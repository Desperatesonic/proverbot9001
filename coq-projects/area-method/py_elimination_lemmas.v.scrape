Require Export pythagoras_difference_lemmas.
-----
Require Export ratios_elimination_lemmas.
-----
Theorem elim_py_on_parallel_d_middle :\n forall (A B W U V Y : Point) (r : F),\n on_parallel_d Y W U V r -> \n Py A Y B = Py A W B + r* (Py A V B - Py A U B  + 2* Py W U V  )-r*(1-r)*(Py U V U).
-----
Theorem elim_py_on_parallel_d_middle : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A Y B = Py A W B + r* (Py A V B - Py A U B + 2* Py W U V )-r*(1-r)*(Py U V U).

*****

*****
forall (A B W U V Y : Point) (r : F) (_ : on_parallel_d Y W U V r), eq (Py A Y B) (Fminus (Fplus (Py A W B) (Fmult r (Fplus (Fminus (Py A V B) (Py A U B)) (Fmult (Fplus F1 F1) (Py W U V))))) (Fmult (Fmult r (Fminus F1 r)) (Py U V U)))
+++++
Proof.
-----
Theorem elim_py_on_parallel_d_middle : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A Y B = Py A W B + r* (Py A V B - Py A U B + 2* Py W U V )-r*(1-r)*(Py U V U).
Proof.

*****

*****
forall (A B W U V Y : Point) (r : F) (_ : on_parallel_d Y W U V r), eq (Py A Y B) (Fminus (Fplus (Py A W B) (Fmult r (Fplus (Fminus (Py A V B) (Py A U B)) (Fmult (Fplus F1 F1) (Py W U V))))) (Fmult (Fmult r (Fminus F1 r)) (Py U V U)))
+++++
intros.
-----
Theorem elim_py_on_parallel_d_middle : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A Y B = Py A W B + r* (Py A V B - Py A U B + 2* Py W U V )-r*(1-r)*(Py U V U).
Proof.
intros.

*****
H : on_parallel_d Y W U V r
r : F
A,B,W,U,V,Y : Point
*****
eq (Py A Y B) (Fminus (Fplus (Py A W B) (Fmult r (Fplus (Fminus (Py A V B) (Py A U B)) (Fmult (Fplus F1 F1) (Py W U V))))) (Fmult (Fmult r (Fminus F1 r)) (Py U V U)))
+++++
cases_equality W Y.
-----
Theorem elim_py_on_parallel_d_middle : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A Y B = Py A W B + r* (Py A V B - Py A U B + 2* Py W U V )-r*(1-r)*(Py U V U).
Proof.
intros.
cases_equality W Y.

*****
H0 : eq W Y
H : on_parallel_d Y W U V r
r : F
A,B,W,U,V,Y : Point
*****
eq (Py A Y B) (Fminus (Fplus (Py A W B) (Fmult r (Fplus (Fminus (Py A V B) (Py A U B)) (Fmult (Fplus F1 F1) (Py W U V))))) (Fmult (Fmult r (Fminus F1 r)) (Py U V U)))
+++++
subst.
-----
Theorem elim_py_on_parallel_d_middle : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A Y B = Py A W B + r* (Py A V B - Py A U B + 2* Py W U V )-r*(1-r)*(Py U V U).
Proof.
intros.
cases_equality W Y.
subst.

*****
H : on_parallel_d Y Y U V r
r : F
A,B,U,V,Y : Point
*****
eq (Py A Y B) (Fminus (Fplus (Py A Y B) (Fmult r (Fplus (Fminus (Py A V B) (Py A U B)) (Fmult (Fplus F1 F1) (Py Y U V))))) (Fmult (Fmult r (Fminus F1 r)) (Py U V U)))
+++++
unfold on_parallel_d in H.
-----
Theorem elim_py_on_parallel_d_middle : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A Y B = Py A W B + r* (Py A V B - Py A U B + 2* Py W U V )-r*(1-r)*(Py U V U).
Proof.
intros.
cases_equality W Y.
subst.
unfold on_parallel_d in H.

*****
H : and (not (eq U V))\n (and (parallel Y Y U V) (eq (DSeg Y Y) (Fmult r (DSeg U V))))
r : F
A,B,U,V,Y : Point
*****
eq (Py A Y B) (Fminus (Fplus (Py A Y B) (Fmult r (Fplus (Fminus (Py A V B) (Py A U B)) (Fmult (Fplus F1 F1) (Py Y U V))))) (Fmult (Fmult r (Fminus F1 r)) (Py U V U)))
+++++
use H.
-----
Theorem elim_py_on_parallel_d_middle : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A Y B = Py A W B + r* (Py A V B - Py A U B + 2* Py W U V )-r*(1-r)*(Py U V U).
Proof.
intros.
cases_equality W Y.
subst.
unfold on_parallel_d in H.
use H.

*****
H3 : eq (DSeg Y Y) (Fmult r (DSeg U V))
H2 : parallel Y Y U V
H0 : not (eq U V)
r : F
A,B,U,V,Y : Point
*****
eq (Py A Y B) (Fminus (Fplus (Py A Y B) (Fmult r (Fplus (Fminus (Py A V B) (Py A U B)) (Fmult (Fplus F1 F1) (Py Y U V))))) (Fmult (Fmult r (Fminus F1 r)) (Py U V U)))
+++++
basic_simpl.
-----
Theorem elim_py_on_parallel_d_middle : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A Y B = Py A W B + r* (Py A V B - Py A U B + 2* Py W U V )-r*(1-r)*(Py U V U).
Proof.
intros.
cases_equality W Y.
subst.
unfold on_parallel_d in H.
use H.
basic_simpl.

*****
H3 : eq F0 (Fmult r (DSeg U V))
H2 : parallel Y Y U V
H0 : not (eq U V)
r : F
A,B,U,V,Y : Point
*****
eq (Py A Y B) (Fminus (Fplus (Py A Y B) (Fmult r (Fplus (Fminus (Py A V B) (Py A U B)) (Fmult (Fplus F1 F1) (Py Y U V))))) (Fmult (Fmult r (Fminus F1 r)) (Py U V U)))
+++++
symmetry in H3.
-----
Theorem elim_py_on_parallel_d_middle : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A Y B = Py A W B + r* (Py A V B - Py A U B + 2* Py W U V )-r*(1-r)*(Py U V U).
Proof.
intros.
cases_equality W Y.
subst.
unfold on_parallel_d in H.
use H.
basic_simpl.
symmetry in H3.

*****
H3 : eq (Fmult r (DSeg U V)) F0
H2 : parallel Y Y U V
H0 : not (eq U V)
r : F
A,B,U,V,Y : Point
*****
eq (Py A Y B) (Fminus (Fplus (Py A Y B) (Fmult r (Fplus (Fminus (Py A V B) (Py A U B)) (Fmult (Fplus F1 F1) (Py Y U V))))) (Fmult (Fmult r (Fminus F1 r)) (Py U V U)))
+++++
assert (r= 0).
-----
Theorem elim_py_on_parallel_d_middle : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A Y B = Py A W B + r* (Py A V B - Py A U B + 2* Py W U V )-r*(1-r)*(Py U V U).
Proof.
intros.
cases_equality W Y.
subst.
unfold on_parallel_d in H.
use H.
basic_simpl.
symmetry in H3.
assert (r= 0).

*****
H3 : eq (Fmult r (DSeg U V)) F0
H2 : parallel Y Y U V
H0 : not (eq U V)
r : F
A,B,U,V,Y : Point
*****
eq r F0
+++++
IsoleVar r H3.
-----
Theorem elim_py_on_parallel_d_middle : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A Y B = Py A W B + r* (Py A V B - Py A U B + 2* Py W U V )-r*(1-r)*(Py U V U).
Proof.
intros.
cases_equality W Y.
subst.
unfold on_parallel_d in H.
use H.
basic_simpl.
symmetry in H3.
assert (r= 0).
IsoleVar r H3.

*****
H3 : eq r (Fdiv F0 (DSeg U V))
H : not (eq (DSeg U V) F0)
H2 : parallel Y Y U V
H0 : not (eq U V)
r : F
A,B,U,V,Y : Point
*****
eq r F0
+++++
rewrite H3.
-----
Theorem elim_py_on_parallel_d_middle : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A Y B = Py A W B + r* (Py A V B - Py A U B + 2* Py W U V )-r*(1-r)*(Py U V U).
Proof.
intros.
cases_equality W Y.
subst.
unfold on_parallel_d in H.
use H.
basic_simpl.
symmetry in H3.
assert (r= 0).
IsoleVar r H3.
rewrite H3.

*****
H3 : eq r (Fdiv F0 (DSeg U V))
H : not (eq (DSeg U V) F0)
H2 : parallel Y Y U V
H0 : not (eq U V)
r : F
A,B,U,V,Y : Point
*****
eq (Fdiv F0 (DSeg U V)) F0
+++++
field.
-----
Theorem elim_py_on_parallel_d_middle : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A Y B = Py A W B + r* (Py A V B - Py A U B + 2* Py W U V )-r*(1-r)*(Py U V U).
Proof.
intros.
cases_equality W Y.
subst.
unfold on_parallel_d in H.
use H.
basic_simpl.
symmetry in H3.
assert (r= 0).
IsoleVar r H3.
rewrite H3.
field.

*****
H3 : eq r (Fdiv F0 (DSeg U V))
H : not (eq (DSeg U V) F0)
H2 : parallel Y Y U V
H0 : not (eq U V)
r : F
A,B,U,V,Y : Point
*****
not (eq (DSeg U V) F0)
+++++
auto with Geom.
-----
Theorem elim_py_on_parallel_d_middle : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A Y B = Py A W B + r* (Py A V B - Py A U B + 2* Py W U V )-r*(1-r)*(Py U V U).
Proof.
intros.
cases_equality W Y.
subst.
unfold on_parallel_d in H.
use H.
basic_simpl.
symmetry in H3.
assert (r= 0).
IsoleVar r H3.

*****
H3 : eq (Fmult r (DSeg U V)) F0
H2 : parallel Y Y U V
H0 : not (eq U V)
r : F
A,B,U,V,Y : Point
*****
not (eq (DSeg U V) F0)
+++++
auto with Geom.
-----
Theorem elim_py_on_parallel_d_middle : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A Y B = Py A W B + r* (Py A V B - Py A U B + 2* Py W U V )-r*(1-r)*(Py U V U).
Proof.
intros.
cases_equality W Y.
subst.
unfold on_parallel_d in H.
use H.
basic_simpl.
symmetry in H3.
assert (r= 0).

*****
H : eq r F0
H3 : eq (Fmult r (DSeg U V)) F0
H2 : parallel Y Y U V
H0 : not (eq U V)
r : F
A,B,U,V,Y : Point
*****
eq (Py A Y B) (Fminus (Fplus (Py A Y B) (Fmult r (Fplus (Fminus (Py A V B) (Py A U B)) (Fmult (Fplus F1 F1) (Py Y U V))))) (Fmult (Fmult r (Fminus F1 r)) (Py U V U)))
+++++
rewrite H.
-----
Theorem elim_py_on_parallel_d_middle : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A Y B = Py A W B + r* (Py A V B - Py A U B + 2* Py W U V )-r*(1-r)*(Py U V U).
Proof.
intros.
cases_equality W Y.
subst.
unfold on_parallel_d in H.
use H.
basic_simpl.
symmetry in H3.
assert (r= 0).
rewrite H.

*****
H : eq r F0
H3 : eq (Fmult r (DSeg U V)) F0
H2 : parallel Y Y U V
H0 : not (eq U V)
r : F
A,B,U,V,Y : Point
*****
eq (Py A Y B) (Fminus (Fplus (Py A Y B) (Fmult F0 (Fplus (Fminus (Py A V B) (Py A U B)) (Fmult (Fplus F1 F1) (Py Y U V))))) (Fmult (Fmult F0 (Fminus F1 F0)) (Py U V U)))
+++++
basic_simpl.
-----
Theorem elim_py_on_parallel_d_middle : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A Y B = Py A W B + r* (Py A V B - Py A U B + 2* Py W U V )-r*(1-r)*(Py U V U).
Proof.
intros.
cases_equality W Y.
subst.
unfold on_parallel_d in H.
use H.
basic_simpl.
symmetry in H3.
assert (r= 0).
rewrite H.
basic_simpl.

*****
H : eq r F0
H3 : eq (Fmult r (DSeg U V)) F0
H2 : parallel Y Y U V
H0 : not (eq U V)
r : F
A,B,U,V,Y : Point
*****
eq (Py A Y B) (Py A Y B)
+++++
auto.
-----
Theorem elim_py_on_parallel_d_middle : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A Y B = Py A W B + r* (Py A V B - Py A U B + 2* Py W U V )-r*(1-r)*(Py U V U).
Proof.
intros.
cases_equality W Y.

*****
H0 : not (eq W Y)
H : on_parallel_d Y W U V r
r : F
A,B,W,U,V,Y : Point
*****
eq (Py A Y B) (Fminus (Fplus (Py A W B) (Fmult r (Fplus (Fminus (Py A V B) (Py A U B)) (Fmult (Fplus F1 F1) (Py W U V))))) (Fmult (Fmult r (Fminus F1 r)) (Py U V U)))
+++++
assert (parallel W Y U V).
-----
Theorem elim_py_on_parallel_d_middle : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A Y B = Py A W B + r* (Py A V B - Py A U B + 2* Py W U V )-r*(1-r)*(Py U V U).
Proof.
intros.
cases_equality W Y.
assert (parallel W Y U V).

*****
H0 : not (eq W Y)
H : on_parallel_d Y W U V r
r : F
A,B,W,U,V,Y : Point
*****
parallel W Y U V
+++++
unfold on_parallel_d in H.
-----
Theorem elim_py_on_parallel_d_middle : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A Y B = Py A W B + r* (Py A V B - Py A U B + 2* Py W U V )-r*(1-r)*(Py U V U).
Proof.
intros.
cases_equality W Y.
assert (parallel W Y U V).
unfold on_parallel_d in H.

*****
H0 : not (eq W Y)
H : and (not (eq U V))\n (and (parallel Y W U V) (eq (DSeg W Y) (Fmult r (DSeg U V))))
r : F
A,B,W,U,V,Y : Point
*****
parallel W Y U V
+++++
use H.
-----
Theorem elim_py_on_parallel_d_middle : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A Y B = Py A W B + r* (Py A V B - Py A U B + 2* Py W U V )-r*(1-r)*(Py U V U).
Proof.
intros.
cases_equality W Y.
assert (parallel W Y U V).
unfold on_parallel_d in H.
use H.

*****
H4 : eq (DSeg W Y) (Fmult r (DSeg U V))
H3 : parallel Y W U V
H1 : not (eq U V)
H0 : not (eq W Y)
r : F
A,B,W,U,V,Y : Point
*****
parallel W Y U V
+++++
auto with Geom.
-----
Theorem elim_py_on_parallel_d_middle : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A Y B = Py A W B + r* (Py A V B - Py A U B + 2* Py W U V )-r*(1-r)*(Py U V U).
Proof.
intros.
cases_equality W Y.
assert (parallel W Y U V).

*****
H1 : parallel W Y U V
H0 : not (eq W Y)
H : on_parallel_d Y W U V r
r : F
A,B,W,U,V,Y : Point
*****
eq (Py A Y B) (Fminus (Fplus (Py A W B) (Fmult r (Fplus (Fminus (Py A V B) (Py A U B)) (Fmult (Fplus F1 F1) (Py W U V))))) (Fmult (Fmult r (Fminus F1 r)) (Py U V U)))
+++++
elim ( on_line_dex_spec_strong_f W Y U V H1 H0).
-----
Theorem elim_py_on_parallel_d_middle : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A Y B = Py A W B + r* (Py A V B - Py A U B + 2* Py W U V )-r*(1-r)*(Py U V U).
Proof.
intros.
cases_equality W Y.
assert (parallel W Y U V).
elim ( on_line_dex_spec_strong_f W Y U V H1 H0).

*****
H1 : parallel W Y U V
H0 : not (eq W Y)
H : on_parallel_d Y W U V r
r : F
A,B,W,U,V,Y : Point
*****
forall (x : Point) (_ : and (Col x W Y) (and (eq (DSeg W x) (DSeg U V)) (weak_3_parallelogram W x V U))), eq (Py A Y B) (Fminus (Fplus (Py A W B) (Fmult r (Fplus (Fminus (Py A V B) (Py A U B)) (Fmult (Fplus F1 F1) (Py W U V))))) (Fmult (Fmult r (Fminus F1 r)) (Py U V U)))
+++++
intros S HS.
-----
Theorem elim_py_on_parallel_d_middle : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A Y B = Py A W B + r* (Py A V B - Py A U B + 2* Py W U V )-r*(1-r)*(Py U V U).
Proof.
intros.
cases_equality W Y.
assert (parallel W Y U V).
elim ( on_line_dex_spec_strong_f W Y U V H1 H0).
intros S HS.

*****
HS : and (Col S W Y)\n (and (eq (DSeg W S) (DSeg U V)) (weak_3_parallelogram W S V U))
S : Point
H1 : parallel W Y U V
H0 : not (eq W Y)
H : on_parallel_d Y W U V r
r : F
A,B,W,U,V,Y : Point
*****
eq (Py A Y B) (Fminus (Fplus (Py A W B) (Fmult r (Fplus (Fminus (Py A V B) (Py A U B)) (Fmult (Fplus F1 F1) (Py W U V))))) (Fmult (Fmult r (Fminus F1 r)) (Py U V U)))
+++++
use HS.
-----
Theorem elim_py_on_parallel_d_middle : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A Y B = Py A W B + r* (Py A V B - Py A U B + 2* Py W U V )-r*(1-r)*(Py U V U).
Proof.
intros.
cases_equality W Y.
assert (parallel W Y U V).
elim ( on_line_dex_spec_strong_f W Y U V H1 H0).
intros S HS.
use HS.

*****
H5 : weak_3_parallelogram W S V U
H4 : eq (DSeg W S) (DSeg U V)
H2 : Col S W Y
S : Point
H1 : parallel W Y U V
H0 : not (eq W Y)
H : on_parallel_d Y W U V r
r : F
A,B,W,U,V,Y : Point
*****
eq (Py A Y B) (Fminus (Fplus (Py A W B) (Fmult r (Fplus (Fminus (Py A V B) (Py A U B)) (Fmult (Fplus F1 F1) (Py W U V))))) (Fmult (Fmult r (Fminus F1 r)) (Py U V U)))
+++++
assert (Py A Y B = W ** Y / W ** S * Py A S B + Y ** S / W ** S * Py A W B - W ** Y / W ** S * (Y ** S / W ** S) * Py W S W).
-----
Theorem elim_py_on_parallel_d_middle : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A Y B = Py A W B + r* (Py A V B - Py A U B + 2* Py W U V )-r*(1-r)*(Py U V U).
Proof.
intros.
cases_equality W Y.
assert (parallel W Y U V).
elim ( on_line_dex_spec_strong_f W Y U V H1 H0).
intros S HS.
use HS.
assert (Py A Y B = W ** Y / W ** S * Py A S B + Y ** S / W ** S * Py A W B - W ** Y / W ** S * (Y ** S / W ** S) * Py W S W).

*****
H5 : weak_3_parallelogram W S V U
H4 : eq (DSeg W S) (DSeg U V)
H2 : Col S W Y
S : Point
H1 : parallel W Y U V
H0 : not (eq W Y)
H : on_parallel_d Y W U V r
r : F
A,B,W,U,V,Y : Point
*****
eq (Py A Y B) (Fminus (Fplus (Fmult (Fdiv (DSeg W Y) (DSeg W S)) (Py A S B)) (Fmult (Fdiv (DSeg Y S) (DSeg W S)) (Py A W B))) (Fmult (Fmult (Fdiv (DSeg W Y) (DSeg W S)) (Fdiv (DSeg Y S) (DSeg W S))) (Py W S W)))
+++++
apply (l3_5_py A B W S Y).
-----
Theorem elim_py_on_parallel_d_middle : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A Y B = Py A W B + r* (Py A V B - Py A U B + 2* Py W U V )-r*(1-r)*(Py U V U).
Proof.
intros.
cases_equality W Y.
assert (parallel W Y U V).
elim ( on_line_dex_spec_strong_f W Y U V H1 H0).
intros S HS.
use HS.
assert (Py A Y B = W ** Y / W ** S * Py A S B + Y ** S / W ** S * Py A W B - W ** Y / W ** S * (Y ** S / W ** S) * Py W S W).
apply (l3_5_py A B W S Y).

*****
H5 : weak_3_parallelogram W S V U
H4 : eq (DSeg W S) (DSeg U V)
H2 : Col S W Y
S : Point
H1 : parallel W Y U V
H0 : not (eq W Y)
H : on_parallel_d Y W U V r
r : F
A,B,W,U,V,Y : Point
*****
not (eq W S)
+++++
unfold not.
-----
Theorem elim_py_on_parallel_d_middle : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A Y B = Py A W B + r* (Py A V B - Py A U B + 2* Py W U V )-r*(1-r)*(Py U V U).
Proof.
intros.
cases_equality W Y.
assert (parallel W Y U V).
elim ( on_line_dex_spec_strong_f W Y U V H1 H0).
intros S HS.
use HS.
assert (Py A Y B = W ** Y / W ** S * Py A S B + Y ** S / W ** S * Py A W B - W ** Y / W ** S * (Y ** S / W ** S) * Py W S W).
apply (l3_5_py A B W S Y).
unfold not.

*****
H5 : weak_3_parallelogram W S V U
H4 : eq (DSeg W S) (DSeg U V)
H2 : Col S W Y
S : Point
H1 : parallel W Y U V
H0 : not (eq W Y)
H : on_parallel_d Y W U V r
r : F
A,B,W,U,V,Y : Point
*****
forall _ : eq W S, False
+++++
intro.
-----
Theorem elim_py_on_parallel_d_middle : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A Y B = Py A W B + r* (Py A V B - Py A U B + 2* Py W U V )-r*(1-r)*(Py U V U).
Proof.
intros.
cases_equality W Y.
assert (parallel W Y U V).
elim ( on_line_dex_spec_strong_f W Y U V H1 H0).
intros S HS.
use HS.
assert (Py A Y B = W ** Y / W ** S * Py A S B + Y ** S / W ** S * Py A W B - W ** Y / W ** S * (Y ** S / W ** S) * Py W S W).
apply (l3_5_py A B W S Y).
unfold not.
intro.

*****
H3 : eq W S
H5 : weak_3_parallelogram W S V U
H4 : eq (DSeg W S) (DSeg U V)
H2 : Col S W Y
S : Point
H1 : parallel W Y U V
H0 : not (eq W Y)
H : on_parallel_d Y W U V r
r : F
A,B,W,U,V,Y : Point
*****
False
+++++
subst.
-----
Theorem elim_py_on_parallel_d_middle : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A Y B = Py A W B + r* (Py A V B - Py A U B + 2* Py W U V )-r*(1-r)*(Py U V U).
Proof.
intros.
cases_equality W Y.
assert (parallel W Y U V).
elim ( on_line_dex_spec_strong_f W Y U V H1 H0).
intros S HS.
use HS.
assert (Py A Y B = W ** Y / W ** S * Py A S B + Y ** S / W ** S * Py A W B - W ** Y / W ** S * (Y ** S / W ** S) * Py W S W).
apply (l3_5_py A B W S Y).
unfold not.
intro.
subst.

*****
H : on_parallel_d Y S U V r
H0 : not (eq S Y)
H1 : parallel S Y U V
H2 : Col S S Y
H4 : eq (DSeg S S) (DSeg U V)
H5 : weak_3_parallelogram S S V U
S : Point
r : F
A,B,U,V,Y : Point
*****
False
+++++
basic_simpl.
-----
Theorem elim_py_on_parallel_d_middle : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A Y B = Py A W B + r* (Py A V B - Py A U B + 2* Py W U V )-r*(1-r)*(Py U V U).
Proof.
intros.
cases_equality W Y.
assert (parallel W Y U V).
elim ( on_line_dex_spec_strong_f W Y U V H1 H0).
intros S HS.
use HS.
assert (Py A Y B = W ** Y / W ** S * Py A S B + Y ** S / W ** S * Py A W B - W ** Y / W ** S * (Y ** S / W ** S) * Py W S W).
apply (l3_5_py A B W S Y).
unfold not.
intro.
subst.
basic_simpl.

*****
H : on_parallel_d Y S U V r
H0 : not (eq S Y)
H1 : parallel S Y U V
H2 : Col S S Y
H4 : eq F0 (DSeg U V)
H5 : weak_3_parallelogram S S V U
S : Point
r : F
A,B,U,V,Y : Point
*****
False
+++++
assert (U=V).
-----
Theorem elim_py_on_parallel_d_middle : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A Y B = Py A W B + r* (Py A V B - Py A U B + 2* Py W U V )-r*(1-r)*(Py U V U).
Proof.
intros.
cases_equality W Y.
assert (parallel W Y U V).
elim ( on_line_dex_spec_strong_f W Y U V H1 H0).
intros S HS.
use HS.
assert (Py A Y B = W ** Y / W ** S * Py A S B + Y ** S / W ** S * Py A W B - W ** Y / W ** S * (Y ** S / W ** S) * Py W S W).
apply (l3_5_py A B W S Y).
unfold not.
intro.
subst.
basic_simpl.
assert (U=V).

*****
H : on_parallel_d Y S U V r
H0 : not (eq S Y)
H1 : parallel S Y U V
H2 : Col S S Y
H4 : eq F0 (DSeg U V)
H5 : weak_3_parallelogram S S V U
S : Point
r : F
A,B,U,V,Y : Point
*****
eq U V
+++++
auto with Geom.
-----
Theorem elim_py_on_parallel_d_middle : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A Y B = Py A W B + r* (Py A V B - Py A U B + 2* Py W U V )-r*(1-r)*(Py U V U).
Proof.
intros.
cases_equality W Y.
assert (parallel W Y U V).
elim ( on_line_dex_spec_strong_f W Y U V H1 H0).
intros S HS.
use HS.
assert (Py A Y B = W ** Y / W ** S * Py A S B + Y ** S / W ** S * Py A W B - W ** Y / W ** S * (Y ** S / W ** S) * Py W S W).
apply (l3_5_py A B W S Y).
unfold not.
intro.
subst.
basic_simpl.
assert (U=V).

*****
H3 : eq U V
H : on_parallel_d Y S U V r
H0 : not (eq S Y)
H1 : parallel S Y U V
H2 : Col S S Y
H4 : eq F0 (DSeg U V)
H5 : weak_3_parallelogram S S V U
S : Point
r : F
A,B,U,V,Y : Point
*****
False
+++++
idtac.
-----
Theorem elim_py_on_parallel_d_middle : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A Y B = Py A W B + r* (Py A V B - Py A U B + 2* Py W U V )-r*(1-r)*(Py U V U).
Proof.
intros.
cases_equality W Y.
assert (parallel W Y U V).
elim ( on_line_dex_spec_strong_f W Y U V H1 H0).
intros S HS.
use HS.
assert (Py A Y B = W ** Y / W ** S * Py A S B + Y ** S / W ** S * Py A W B - W ** Y / W ** S * (Y ** S / W ** S) * Py W S W).
apply (l3_5_py A B W S Y).
unfold not.
intro.
subst.
basic_simpl.
assert (U=V).
idtac.

*****
H3 : eq U V
H : on_parallel_d Y S U V r
H0 : not (eq S Y)
H1 : parallel S Y U V
H2 : Col S S Y
H4 : eq F0 (DSeg U V)
H5 : weak_3_parallelogram S S V U
S : Point
r : F
A,B,U,V,Y : Point
*****
False
+++++
unfold on_parallel_d in *.
-----
Theorem elim_py_on_parallel_d_middle : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A Y B = Py A W B + r* (Py A V B - Py A U B + 2* Py W U V )-r*(1-r)*(Py U V U).
Proof.
intros.
cases_equality W Y.
assert (parallel W Y U V).
elim ( on_line_dex_spec_strong_f W Y U V H1 H0).
intros S HS.
use HS.
assert (Py A Y B = W ** Y / W ** S * Py A S B + Y ** S / W ** S * Py A W B - W ** Y / W ** S * (Y ** S / W ** S) * Py W S W).
apply (l3_5_py A B W S Y).
unfold not.
intro.
subst.
basic_simpl.
assert (U=V).
idtac.
unfold on_parallel_d in *.

*****
H3 : eq U V
H : and (not (eq U V))\n (and (parallel Y S U V) (eq (DSeg S Y) (Fmult r (DSeg U V))))
H0 : not (eq S Y)
H1 : parallel S Y U V
H2 : Col S S Y
H4 : eq F0 (DSeg U V)
H5 : weak_3_parallelogram S S V U
S : Point
r : F
A,B,U,V,Y : Point
*****
False
+++++
use H.
-----
Theorem elim_py_on_parallel_d_middle : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A Y B = Py A W B + r* (Py A V B - Py A U B + 2* Py W U V )-r*(1-r)*(Py U V U).
Proof.
intros.
cases_equality W Y.
assert (parallel W Y U V).
elim ( on_line_dex_spec_strong_f W Y U V H1 H0).
intros S HS.
use HS.
assert (Py A Y B = W ** Y / W ** S * Py A S B + Y ** S / W ** S * Py A W B - W ** Y / W ** S * (Y ** S / W ** S) * Py W S W).
apply (l3_5_py A B W S Y).
unfold not.
intro.
subst.
basic_simpl.
assert (U=V).
idtac.
unfold on_parallel_d in *.
use H.

*****
H9 : eq (DSeg S Y) (Fmult r (DSeg U V))
H8 : parallel Y S U V
H6 : not (eq U V)
H3 : eq U V
H0 : not (eq S Y)
H1 : parallel S Y U V
H2 : Col S S Y
H4 : eq F0 (DSeg U V)
H5 : weak_3_parallelogram S S V U
S : Point
r : F
A,B,U,V,Y : Point
*****
False
+++++
auto.
-----
Theorem elim_py_on_parallel_d_middle : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A Y B = Py A W B + r* (Py A V B - Py A U B + 2* Py W U V )-r*(1-r)*(Py U V U).
Proof.
intros.
cases_equality W Y.
assert (parallel W Y U V).
elim ( on_line_dex_spec_strong_f W Y U V H1 H0).
intros S HS.
use HS.
assert (Py A Y B = W ** Y / W ** S * Py A S B + Y ** S / W ** S * Py A W B - W ** Y / W ** S * (Y ** S / W ** S) * Py W S W).
apply (l3_5_py A B W S Y).

*****
H5 : weak_3_parallelogram W S V U
H4 : eq (DSeg W S) (DSeg U V)
H2 : Col S W Y
S : Point
H1 : parallel W Y U V
H0 : not (eq W Y)
H : on_parallel_d Y W U V r
r : F
A,B,W,U,V,Y : Point
*****
Col Y W S
+++++
auto with Geom.
-----
Theorem elim_py_on_parallel_d_middle : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A Y B = Py A W B + r* (Py A V B - Py A U B + 2* Py W U V )-r*(1-r)*(Py U V U).
Proof.
intros.
cases_equality W Y.
assert (parallel W Y U V).
elim ( on_line_dex_spec_strong_f W Y U V H1 H0).
intros S HS.
use HS.
assert (Py A Y B = W ** Y / W ** S * Py A S B + Y ** S / W ** S * Py A W B - W ** Y / W ** S * (Y ** S / W ** S) * Py W S W).

*****
H3 : eq (Py A Y B)\n (Fminus\n (Fplus (Fmult (Fdiv (DSeg W Y) (DSeg W S)) (Py A S B))\n (Fmult (Fdiv (DSeg Y S) (DSeg W S)) (Py A W B)))\n (Fmult\n (Fmult (Fdiv (DSeg W Y) (DSeg W S))\n (Fdiv (DSeg Y S) (DSeg W S))) (Py W S W)))
H5 : weak_3_parallelogram W S V U
H4 : eq (DSeg W S) (DSeg U V)
H2 : Col S W Y
S : Point
H1 : parallel W Y U V
H0 : not (eq W Y)
H : on_parallel_d Y W U V r
r : F
A,B,W,U,V,Y : Point
*****
eq (Py A Y B) (Fminus (Fplus (Py A W B) (Fmult r (Fplus (Fminus (Py A V B) (Py A U B)) (Fmult (Fplus F1 F1) (Py W U V))))) (Fmult (Fmult r (Fminus F1 r)) (Py U V U)))
+++++
assert (W ** Y / W ** S = r).
-----
Theorem elim_py_on_parallel_d_middle : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A Y B = Py A W B + r* (Py A V B - Py A U B + 2* Py W U V )-r*(1-r)*(Py U V U).
Proof.
intros.
cases_equality W Y.
assert (parallel W Y U V).
elim ( on_line_dex_spec_strong_f W Y U V H1 H0).
intros S HS.
use HS.
assert (Py A Y B = W ** Y / W ** S * Py A S B + Y ** S / W ** S * Py A W B - W ** Y / W ** S * (Y ** S / W ** S) * Py W S W).
assert (W ** Y / W ** S = r).

*****
H3 : eq (Py A Y B)\n (Fminus\n (Fplus (Fmult (Fdiv (DSeg W Y) (DSeg W S)) (Py A S B))\n (Fmult (Fdiv (DSeg Y S) (DSeg W S)) (Py A W B)))\n (Fmult\n (Fmult (Fdiv (DSeg W Y) (DSeg W S))\n (Fdiv (DSeg Y S) (DSeg W S))) (Py W S W)))
H5 : weak_3_parallelogram W S V U
H4 : eq (DSeg W S) (DSeg U V)
H2 : Col S W Y
S : Point
H1 : parallel W Y U V
H0 : not (eq W Y)
H : on_parallel_d Y W U V r
r : F
A,B,W,U,V,Y : Point
*****
eq (Fdiv (DSeg W Y) (DSeg W S)) r
+++++
unfold on_parallel_d in *.
-----
Theorem elim_py_on_parallel_d_middle : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A Y B = Py A W B + r* (Py A V B - Py A U B + 2* Py W U V )-r*(1-r)*(Py U V U).
Proof.
intros.
cases_equality W Y.
assert (parallel W Y U V).
elim ( on_line_dex_spec_strong_f W Y U V H1 H0).
intros S HS.
use HS.
assert (Py A Y B = W ** Y / W ** S * Py A S B + Y ** S / W ** S * Py A W B - W ** Y / W ** S * (Y ** S / W ** S) * Py W S W).
assert (W ** Y / W ** S = r).
unfold on_parallel_d in *.

*****
H3 : eq (Py A Y B)\n (Fminus\n (Fplus (Fmult (Fdiv (DSeg W Y) (DSeg W S)) (Py A S B))\n (Fmult (Fdiv (DSeg Y S) (DSeg W S)) (Py A W B)))\n (Fmult\n (Fmult (Fdiv (DSeg W Y) (DSeg W S))\n (Fdiv (DSeg Y S) (DSeg W S))) (Py W S W)))
H5 : weak_3_parallelogram W S V U
H4 : eq (DSeg W S) (DSeg U V)
H2 : Col S W Y
S : Point
H1 : parallel W Y U V
H0 : not (eq W Y)
H : and (not (eq U V))\n (and (parallel Y W U V) (eq (DSeg W Y) (Fmult r (DSeg U V))))
r : F
A,B,W,U,V,Y : Point
*****
eq (Fdiv (DSeg W Y) (DSeg W S)) r
+++++
use H.
-----
Theorem elim_py_on_parallel_d_middle : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A Y B = Py A W B + r* (Py A V B - Py A U B + 2* Py W U V )-r*(1-r)*(Py U V U).
Proof.
intros.
cases_equality W Y.
assert (parallel W Y U V).
elim ( on_line_dex_spec_strong_f W Y U V H1 H0).
intros S HS.
use HS.
assert (Py A Y B = W ** Y / W ** S * Py A S B + Y ** S / W ** S * Py A W B - W ** Y / W ** S * (Y ** S / W ** S) * Py W S W).
assert (W ** Y / W ** S = r).
unfold on_parallel_d in *.
use H.

*****
H9 : eq (DSeg W Y) (Fmult r (DSeg U V))
H8 : parallel Y W U V
H6 : not (eq U V)
H3 : eq (Py A Y B)\n (Fminus\n (Fplus (Fmult (Fdiv (DSeg W Y) (DSeg W S)) (Py A S B))\n (Fmult (Fdiv (DSeg Y S) (DSeg W S)) (Py A W B)))\n (Fmult\n (Fmult (Fdiv (DSeg W Y) (DSeg W S))\n (Fdiv (DSeg Y S) (DSeg W S))) (Py W S W)))
H5 : weak_3_parallelogram W S V U
H4 : eq (DSeg W S) (DSeg U V)
H2 : Col S W Y
S : Point
H1 : parallel W Y U V
H0 : not (eq W Y)
r : F
A,B,W,U,V,Y : Point
*****
eq (Fdiv (DSeg W Y) (DSeg W S)) r
+++++
rewrite H9.
-----
Theorem elim_py_on_parallel_d_middle : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A Y B = Py A W B + r* (Py A V B - Py A U B + 2* Py W U V )-r*(1-r)*(Py U V U).
Proof.
intros.
cases_equality W Y.
assert (parallel W Y U V).
elim ( on_line_dex_spec_strong_f W Y U V H1 H0).
intros S HS.
use HS.
assert (Py A Y B = W ** Y / W ** S * Py A S B + Y ** S / W ** S * Py A W B - W ** Y / W ** S * (Y ** S / W ** S) * Py W S W).
assert (W ** Y / W ** S = r).
unfold on_parallel_d in *.
use H.
rewrite H9.

*****
H9 : eq (DSeg W Y) (Fmult r (DSeg U V))
H8 : parallel Y W U V
H6 : not (eq U V)
H3 : eq (Py A Y B)\n (Fminus\n (Fplus (Fmult (Fdiv (DSeg W Y) (DSeg W S)) (Py A S B))\n (Fmult (Fdiv (DSeg Y S) (DSeg W S)) (Py A W B)))\n (Fmult\n (Fmult (Fdiv (DSeg W Y) (DSeg W S))\n (Fdiv (DSeg Y S) (DSeg W S))) (Py W S W)))
H5 : weak_3_parallelogram W S V U
H4 : eq (DSeg W S) (DSeg U V)
H2 : Col S W Y
S : Point
H1 : parallel W Y U V
H0 : not (eq W Y)
r : F
A,B,W,U,V,Y : Point
*****
eq (Fdiv (Fmult r (DSeg U V)) (DSeg W S)) r
+++++
rewrite H4.
-----
Theorem elim_py_on_parallel_d_middle : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A Y B = Py A W B + r* (Py A V B - Py A U B + 2* Py W U V )-r*(1-r)*(Py U V U).
Proof.
intros.
cases_equality W Y.
assert (parallel W Y U V).
elim ( on_line_dex_spec_strong_f W Y U V H1 H0).
intros S HS.
use HS.
assert (Py A Y B = W ** Y / W ** S * Py A S B + Y ** S / W ** S * Py A W B - W ** Y / W ** S * (Y ** S / W ** S) * Py W S W).
assert (W ** Y / W ** S = r).
unfold on_parallel_d in *.
use H.
rewrite H9.
rewrite H4.

*****
H9 : eq (DSeg W Y) (Fmult r (DSeg U V))
H8 : parallel Y W U V
H6 : not (eq U V)
H3 : eq (Py A Y B)\n (Fminus\n (Fplus (Fmult (Fdiv (DSeg W Y) (DSeg W S)) (Py A S B))\n (Fmult (Fdiv (DSeg Y S) (DSeg W S)) (Py A W B)))\n (Fmult\n (Fmult (Fdiv (DSeg W Y) (DSeg W S))\n (Fdiv (DSeg Y S) (DSeg W S))) (Py W S W)))
H5 : weak_3_parallelogram W S V U
H4 : eq (DSeg W S) (DSeg U V)
H2 : Col S W Y
S : Point
H1 : parallel W Y U V
H0 : not (eq W Y)
r : F
A,B,W,U,V,Y : Point
*****
eq (Fdiv (Fmult r (DSeg U V)) (DSeg U V)) r
+++++
field.
-----
Theorem elim_py_on_parallel_d_middle : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A Y B = Py A W B + r* (Py A V B - Py A U B + 2* Py W U V )-r*(1-r)*(Py U V U).
Proof.
intros.
cases_equality W Y.
assert (parallel W Y U V).
elim ( on_line_dex_spec_strong_f W Y U V H1 H0).
intros S HS.
use HS.
assert (Py A Y B = W ** Y / W ** S * Py A S B + Y ** S / W ** S * Py A W B - W ** Y / W ** S * (Y ** S / W ** S) * Py W S W).
assert (W ** Y / W ** S = r).
unfold on_parallel_d in *.
use H.
rewrite H9.
rewrite H4.
field.

*****
H9 : eq (DSeg W Y) (Fmult r (DSeg U V))
H8 : parallel Y W U V
H6 : not (eq U V)
H3 : eq (Py A Y B)\n (Fminus\n (Fplus (Fmult (Fdiv (DSeg W Y) (DSeg W S)) (Py A S B))\n (Fmult (Fdiv (DSeg Y S) (DSeg W S)) (Py A W B)))\n (Fmult\n (Fmult (Fdiv (DSeg W Y) (DSeg W S))\n (Fdiv (DSeg Y S) (DSeg W S))) (Py W S W)))
H5 : weak_3_parallelogram W S V U
H4 : eq (DSeg W S) (DSeg U V)
H2 : Col S W Y
S : Point
H1 : parallel W Y U V
H0 : not (eq W Y)
r : F
A,B,W,U,V,Y : Point
*****
not (eq (DSeg U V) F0)
+++++
auto with Geom.
-----
Theorem elim_py_on_parallel_d_middle : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A Y B = Py A W B + r* (Py A V B - Py A U B + 2* Py W U V )-r*(1-r)*(Py U V U).
Proof.
intros.
cases_equality W Y.
assert (parallel W Y U V).
elim ( on_line_dex_spec_strong_f W Y U V H1 H0).
intros S HS.
use HS.
assert (Py A Y B = W ** Y / W ** S * Py A S B + Y ** S / W ** S * Py A W B - W ** Y / W ** S * (Y ** S / W ** S) * Py W S W).
assert (W ** Y / W ** S = r).

*****
H6 : eq (Fdiv (DSeg W Y) (DSeg W S)) r
H3 : eq (Py A Y B)\n (Fminus\n (Fplus (Fmult (Fdiv (DSeg W Y) (DSeg W S)) (Py A S B))\n (Fmult (Fdiv (DSeg Y S) (DSeg W S)) (Py A W B)))\n (Fmult\n (Fmult (Fdiv (DSeg W Y) (DSeg W S))\n (Fdiv (DSeg Y S) (DSeg W S))) (Py W S W)))
H5 : weak_3_parallelogram W S V U
H4 : eq (DSeg W S) (DSeg U V)
H2 : Col S W Y
S : Point
H1 : parallel W Y U V
H0 : not (eq W Y)
H : on_parallel_d Y W U V r
r : F
A,B,W,U,V,Y : Point
*****
eq (Py A Y B) (Fminus (Fplus (Py A W B) (Fmult r (Fplus (Fminus (Py A V B) (Py A U B)) (Fmult (Fplus F1 F1) (Py W U V))))) (Fmult (Fmult r (Fminus F1 r)) (Py U V U)))
+++++
rewrite H6 in H3.
-----
Theorem elim_py_on_parallel_d_middle : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A Y B = Py A W B + r* (Py A V B - Py A U B + 2* Py W U V )-r*(1-r)*(Py U V U).
Proof.
intros.
cases_equality W Y.
assert (parallel W Y U V).
elim ( on_line_dex_spec_strong_f W Y U V H1 H0).
intros S HS.
use HS.
assert (Py A Y B = W ** Y / W ** S * Py A S B + Y ** S / W ** S * Py A W B - W ** Y / W ** S * (Y ** S / W ** S) * Py W S W).
assert (W ** Y / W ** S = r).
rewrite H6 in H3.

*****
H6 : eq (Fdiv (DSeg W Y) (DSeg W S)) r
H3 : eq (Py A Y B)\n (Fminus\n (Fplus (Fmult r (Py A S B))\n (Fmult (Fdiv (DSeg Y S) (DSeg W S)) (Py A W B)))\n (Fmult (Fmult r (Fdiv (DSeg Y S) (DSeg W S))) (Py W S W)))
H5 : weak_3_parallelogram W S V U
H4 : eq (DSeg W S) (DSeg U V)
H2 : Col S W Y
S : Point
H1 : parallel W Y U V
H0 : not (eq W Y)
H : on_parallel_d Y W U V r
r : F
A,B,W,U,V,Y : Point
*****
eq (Py A Y B) (Fminus (Fplus (Py A W B) (Fmult r (Fplus (Fminus (Py A V B) (Py A U B)) (Fmult (Fplus F1 F1) (Py W U V))))) (Fmult (Fmult r (Fminus F1 r)) (Py U V U)))
+++++
assert ( Y ** S / W ** S = 1 - r).
-----
Theorem elim_py_on_parallel_d_middle : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A Y B = Py A W B + r* (Py A V B - Py A U B + 2* Py W U V )-r*(1-r)*(Py U V U).
Proof.
intros.
cases_equality W Y.
assert (parallel W Y U V).
elim ( on_line_dex_spec_strong_f W Y U V H1 H0).
intros S HS.
use HS.
assert (Py A Y B = W ** Y / W ** S * Py A S B + Y ** S / W ** S * Py A W B - W ** Y / W ** S * (Y ** S / W ** S) * Py W S W).
assert (W ** Y / W ** S = r).
rewrite H6 in H3.
assert ( Y ** S / W ** S = 1 - r).

*****
H6 : eq (Fdiv (DSeg W Y) (DSeg W S)) r
H3 : eq (Py A Y B)\n (Fminus\n (Fplus (Fmult r (Py A S B))\n (Fmult (Fdiv (DSeg Y S) (DSeg W S)) (Py A W B)))\n (Fmult (Fmult r (Fdiv (DSeg Y S) (DSeg W S))) (Py W S W)))
H5 : weak_3_parallelogram W S V U
H4 : eq (DSeg W S) (DSeg U V)
H2 : Col S W Y
S : Point
H1 : parallel W Y U V
H0 : not (eq W Y)
H : on_parallel_d Y W U V r
r : F
A,B,W,U,V,Y : Point
*****
eq (Fdiv (DSeg Y S) (DSeg W S)) (Fminus F1 r)
+++++
unfold on_parallel_d in *.
-----
Theorem elim_py_on_parallel_d_middle : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A Y B = Py A W B + r* (Py A V B - Py A U B + 2* Py W U V )-r*(1-r)*(Py U V U).
Proof.
intros.
cases_equality W Y.
assert (parallel W Y U V).
elim ( on_line_dex_spec_strong_f W Y U V H1 H0).
intros S HS.
use HS.
assert (Py A Y B = W ** Y / W ** S * Py A S B + Y ** S / W ** S * Py A W B - W ** Y / W ** S * (Y ** S / W ** S) * Py W S W).
assert (W ** Y / W ** S = r).
rewrite H6 in H3.
assert ( Y ** S / W ** S = 1 - r).
unfold on_parallel_d in *.

*****
H6 : eq (Fdiv (DSeg W Y) (DSeg W S)) r
H3 : eq (Py A Y B)\n (Fminus\n (Fplus (Fmult r (Py A S B))\n (Fmult (Fdiv (DSeg Y S) (DSeg W S)) (Py A W B)))\n (Fmult (Fmult r (Fdiv (DSeg Y S) (DSeg W S))) (Py W S W)))
H5 : weak_3_parallelogram W S V U
H4 : eq (DSeg W S) (DSeg U V)
H2 : Col S W Y
S : Point
H1 : parallel W Y U V
H0 : not (eq W Y)
H : and (not (eq U V))\n (and (parallel Y W U V) (eq (DSeg W Y) (Fmult r (DSeg U V))))
r : F
A,B,W,U,V,Y : Point
*****
eq (Fdiv (DSeg Y S) (DSeg W S)) (Fminus F1 r)
+++++
use H.
-----
Theorem elim_py_on_parallel_d_middle : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A Y B = Py A W B + r* (Py A V B - Py A U B + 2* Py W U V )-r*(1-r)*(Py U V U).
Proof.
intros.
cases_equality W Y.
assert (parallel W Y U V).
elim ( on_line_dex_spec_strong_f W Y U V H1 H0).
intros S HS.
use HS.
assert (Py A Y B = W ** Y / W ** S * Py A S B + Y ** S / W ** S * Py A W B - W ** Y / W ** S * (Y ** S / W ** S) * Py W S W).
assert (W ** Y / W ** S = r).
rewrite H6 in H3.
assert ( Y ** S / W ** S = 1 - r).
unfold on_parallel_d in *.
use H.

*****
H10 : eq (DSeg W Y) (Fmult r (DSeg U V))
H9 : parallel Y W U V
H7 : not (eq U V)
H6 : eq (Fdiv (DSeg W Y) (DSeg W S)) r
H3 : eq (Py A Y B)\n (Fminus\n (Fplus (Fmult r (Py A S B))\n (Fmult (Fdiv (DSeg Y S) (DSeg W S)) (Py A W B)))\n (Fmult (Fmult r (Fdiv (DSeg Y S) (DSeg W S))) (Py W S W)))
H5 : weak_3_parallelogram W S V U
H4 : eq (DSeg W S) (DSeg U V)
H2 : Col S W Y
S : Point
H1 : parallel W Y U V
H0 : not (eq W Y)
r : F
A,B,W,U,V,Y : Point
*****
eq (Fdiv (DSeg Y S) (DSeg W S)) (Fminus F1 r)
+++++
replace (Y**S) with (Y**W + W**S) by auto with Geom.
-----
Theorem elim_py_on_parallel_d_middle : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A Y B = Py A W B + r* (Py A V B - Py A U B + 2* Py W U V )-r*(1-r)*(Py U V U).
Proof.
intros.
cases_equality W Y.
assert (parallel W Y U V).
elim ( on_line_dex_spec_strong_f W Y U V H1 H0).
intros S HS.
use HS.
assert (Py A Y B = W ** Y / W ** S * Py A S B + Y ** S / W ** S * Py A W B - W ** Y / W ** S * (Y ** S / W ** S) * Py W S W).
assert (W ** Y / W ** S = r).
rewrite H6 in H3.
assert ( Y ** S / W ** S = 1 - r).
unfold on_parallel_d in *.
use H.
replace (Y**S) with (Y**W + W**S) by auto with Geom.

*****
H10 : eq (DSeg W Y) (Fmult r (DSeg U V))
H9 : parallel Y W U V
H7 : not (eq U V)
H6 : eq (Fdiv (DSeg W Y) (DSeg W S)) r
H3 : eq (Py A Y B)\n (Fminus\n (Fplus (Fmult r (Py A S B))\n (Fmult (Fdiv (DSeg Y S) (DSeg W S)) (Py A W B)))\n (Fmult (Fmult r (Fdiv (DSeg Y S) (DSeg W S))) (Py W S W)))
H5 : weak_3_parallelogram W S V U
H4 : eq (DSeg W S) (DSeg U V)
H2 : Col S W Y
S : Point
H1 : parallel W Y U V
H0 : not (eq W Y)
r : F
A,B,W,U,V,Y : Point
*****
eq (Fdiv (Fplus (DSeg Y W) (DSeg W S)) (DSeg W S)) (Fminus F1 r)
+++++
uniformize_dir_seg.
-----
Theorem elim_py_on_parallel_d_middle : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A Y B = Py A W B + r* (Py A V B - Py A U B + 2* Py W U V )-r*(1-r)*(Py U V U).
Proof.
intros.
cases_equality W Y.
assert (parallel W Y U V).
elim ( on_line_dex_spec_strong_f W Y U V H1 H0).
intros S HS.
use HS.
assert (Py A Y B = W ** Y / W ** S * Py A S B + Y ** S / W ** S * Py A W B - W ** Y / W ** S * (Y ** S / W ** S) * Py W S W).
assert (W ** Y / W ** S = r).
rewrite H6 in H3.
assert ( Y ** S / W ** S = 1 - r).
unfold on_parallel_d in *.
use H.
replace (Y**S) with (Y**W + W**S) by auto with Geom.
uniformize_dir_seg.

*****
H10 : eq (DSeg W Y) (Fmult r (DSeg U V))
H6 : eq (Fdiv (DSeg W Y) (DSeg W S)) r
H3 : eq (Py A Y B)\n (Fminus\n (Fplus (Fmult r (Py A S B))\n (Fmult (Fdiv (DSeg Y S) (DSeg W S)) (Py A W B)))\n (Fmult (Fmult r (Fdiv (DSeg Y S) (DSeg W S))) (Py W S W)))
H4 : eq (DSeg W S) (DSeg U V)
H9 : parallel Y W U V
H7 : not (eq U V)
H5 : weak_3_parallelogram W S V U
H2 : Col S W Y
S : Point
H1 : parallel W Y U V
H0 : not (eq W Y)
r : F
A,B,W,U,V,Y : Point
*****
eq (Fdiv (Fplus (Fopp (DSeg W Y)) (DSeg W S)) (DSeg W S)) (Fminus F1 r)
+++++
rewrite H10.
-----
Theorem elim_py_on_parallel_d_middle : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A Y B = Py A W B + r* (Py A V B - Py A U B + 2* Py W U V )-r*(1-r)*(Py U V U).
Proof.
intros.
cases_equality W Y.
assert (parallel W Y U V).
elim ( on_line_dex_spec_strong_f W Y U V H1 H0).
intros S HS.
use HS.
assert (Py A Y B = W ** Y / W ** S * Py A S B + Y ** S / W ** S * Py A W B - W ** Y / W ** S * (Y ** S / W ** S) * Py W S W).
assert (W ** Y / W ** S = r).
rewrite H6 in H3.
assert ( Y ** S / W ** S = 1 - r).
unfold on_parallel_d in *.
use H.
replace (Y**S) with (Y**W + W**S) by auto with Geom.
uniformize_dir_seg.
rewrite H10.

*****
H10 : eq (DSeg W Y) (Fmult r (DSeg U V))
H6 : eq (Fdiv (DSeg W Y) (DSeg W S)) r
H3 : eq (Py A Y B)\n (Fminus\n (Fplus (Fmult r (Py A S B))\n (Fmult (Fdiv (DSeg Y S) (DSeg W S)) (Py A W B)))\n (Fmult (Fmult r (Fdiv (DSeg Y S) (DSeg W S))) (Py W S W)))
H4 : eq (DSeg W S) (DSeg U V)
H9 : parallel Y W U V
H7 : not (eq U V)
H5 : weak_3_parallelogram W S V U
H2 : Col S W Y
S : Point
H1 : parallel W Y U V
H0 : not (eq W Y)
r : F
A,B,W,U,V,Y : Point
*****
eq (Fdiv (Fplus (Fopp (Fmult r (DSeg U V))) (DSeg W S)) (DSeg W S)) (Fminus F1 r)
+++++
rewrite H4.
-----
Theorem elim_py_on_parallel_d_middle : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A Y B = Py A W B + r* (Py A V B - Py A U B + 2* Py W U V )-r*(1-r)*(Py U V U).
Proof.
intros.
cases_equality W Y.
assert (parallel W Y U V).
elim ( on_line_dex_spec_strong_f W Y U V H1 H0).
intros S HS.
use HS.
assert (Py A Y B = W ** Y / W ** S * Py A S B + Y ** S / W ** S * Py A W B - W ** Y / W ** S * (Y ** S / W ** S) * Py W S W).
assert (W ** Y / W ** S = r).
rewrite H6 in H3.
assert ( Y ** S / W ** S = 1 - r).
unfold on_parallel_d in *.
use H.
replace (Y**S) with (Y**W + W**S) by auto with Geom.
uniformize_dir_seg.
rewrite H10.
rewrite H4.

*****
H10 : eq (DSeg W Y) (Fmult r (DSeg U V))
H6 : eq (Fdiv (DSeg W Y) (DSeg W S)) r
H3 : eq (Py A Y B)\n (Fminus\n (Fplus (Fmult r (Py A S B))\n (Fmult (Fdiv (DSeg Y S) (DSeg W S)) (Py A W B)))\n (Fmult (Fmult r (Fdiv (DSeg Y S) (DSeg W S))) (Py W S W)))
H4 : eq (DSeg W S) (DSeg U V)
H9 : parallel Y W U V
H7 : not (eq U V)
H5 : weak_3_parallelogram W S V U
H2 : Col S W Y
S : Point
H1 : parallel W Y U V
H0 : not (eq W Y)
r : F
A,B,W,U,V,Y : Point
*****
eq (Fdiv (Fplus (Fopp (Fmult r (DSeg U V))) (DSeg U V)) (DSeg U V)) (Fminus F1 r)
+++++
field.
-----
Theorem elim_py_on_parallel_d_middle : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A Y B = Py A W B + r* (Py A V B - Py A U B + 2* Py W U V )-r*(1-r)*(Py U V U).
Proof.
intros.
cases_equality W Y.
assert (parallel W Y U V).
elim ( on_line_dex_spec_strong_f W Y U V H1 H0).
intros S HS.
use HS.
assert (Py A Y B = W ** Y / W ** S * Py A S B + Y ** S / W ** S * Py A W B - W ** Y / W ** S * (Y ** S / W ** S) * Py W S W).
assert (W ** Y / W ** S = r).
rewrite H6 in H3.
assert ( Y ** S / W ** S = 1 - r).
unfold on_parallel_d in *.
use H.
replace (Y**S) with (Y**W + W**S) by auto with Geom.
uniformize_dir_seg.
rewrite H10.
rewrite H4.
field.

*****
H10 : eq (DSeg W Y) (Fmult r (DSeg U V))
H6 : eq (Fdiv (DSeg W Y) (DSeg W S)) r
H3 : eq (Py A Y B)\n (Fminus\n (Fplus (Fmult r (Py A S B))\n (Fmult (Fdiv (DSeg Y S) (DSeg W S)) (Py A W B)))\n (Fmult (Fmult r (Fdiv (DSeg Y S) (DSeg W S))) (Py W S W)))
H4 : eq (DSeg W S) (DSeg U V)
H9 : parallel Y W U V
H7 : not (eq U V)
H5 : weak_3_parallelogram W S V U
H2 : Col S W Y
S : Point
H1 : parallel W Y U V
H0 : not (eq W Y)
r : F
A,B,W,U,V,Y : Point
*****
not (eq (DSeg U V) F0)
+++++
auto with Geom.
-----
Theorem elim_py_on_parallel_d_middle : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A Y B = Py A W B + r* (Py A V B - Py A U B + 2* Py W U V )-r*(1-r)*(Py U V U).
Proof.
intros.
cases_equality W Y.
assert (parallel W Y U V).
elim ( on_line_dex_spec_strong_f W Y U V H1 H0).
intros S HS.
use HS.
assert (Py A Y B = W ** Y / W ** S * Py A S B + Y ** S / W ** S * Py A W B - W ** Y / W ** S * (Y ** S / W ** S) * Py W S W).
assert (W ** Y / W ** S = r).
rewrite H6 in H3.
assert ( Y ** S / W ** S = 1 - r).

*****
H7 : eq (Fdiv (DSeg Y S) (DSeg W S)) (Fminus F1 r)
H6 : eq (Fdiv (DSeg W Y) (DSeg W S)) r
H3 : eq (Py A Y B)\n (Fminus\n (Fplus (Fmult r (Py A S B))\n (Fmult (Fdiv (DSeg Y S) (DSeg W S)) (Py A W B)))\n (Fmult (Fmult r (Fdiv (DSeg Y S) (DSeg W S))) (Py W S W)))
H5 : weak_3_parallelogram W S V U
H4 : eq (DSeg W S) (DSeg U V)
H2 : Col S W Y
S : Point
H1 : parallel W Y U V
H0 : not (eq W Y)
H : on_parallel_d Y W U V r
r : F
A,B,W,U,V,Y : Point
*****
eq (Py A Y B) (Fminus (Fplus (Py A W B) (Fmult r (Fplus (Fminus (Py A V B) (Py A U B)) (Fmult (Fplus F1 F1) (Py W U V))))) (Fmult (Fmult r (Fminus F1 r)) (Py U V U)))
+++++
rewrite H7 in H3.
-----
Theorem elim_py_on_parallel_d_middle : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A Y B = Py A W B + r* (Py A V B - Py A U B + 2* Py W U V )-r*(1-r)*(Py U V U).
Proof.
intros.
cases_equality W Y.
assert (parallel W Y U V).
elim ( on_line_dex_spec_strong_f W Y U V H1 H0).
intros S HS.
use HS.
assert (Py A Y B = W ** Y / W ** S * Py A S B + Y ** S / W ** S * Py A W B - W ** Y / W ** S * (Y ** S / W ** S) * Py W S W).
assert (W ** Y / W ** S = r).
rewrite H6 in H3.
assert ( Y ** S / W ** S = 1 - r).
rewrite H7 in H3.

*****
H7 : eq (Fdiv (DSeg Y S) (DSeg W S)) (Fminus F1 r)
H6 : eq (Fdiv (DSeg W Y) (DSeg W S)) r
H3 : eq (Py A Y B)\n (Fminus (Fplus (Fmult r (Py A S B)) (Fmult (Fminus F1 r) (Py A W B)))\n (Fmult (Fmult r (Fminus F1 r)) (Py W S W)))
H5 : weak_3_parallelogram W S V U
H4 : eq (DSeg W S) (DSeg U V)
H2 : Col S W Y
S : Point
H1 : parallel W Y U V
H0 : not (eq W Y)
H : on_parallel_d Y W U V r
r : F
A,B,W,U,V,Y : Point
*****
eq (Py A Y B) (Fminus (Fplus (Py A W B) (Fmult r (Fplus (Fminus (Py A V B) (Py A U B)) (Fmult (Fplus F1 F1) (Py W U V))))) (Fmult (Fmult r (Fminus F1 r)) (Py U V U)))
+++++
assert (weak_3_parallelogram U V S W).
-----
Theorem elim_py_on_parallel_d_middle : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A Y B = Py A W B + r* (Py A V B - Py A U B + 2* Py W U V )-r*(1-r)*(Py U V U).
Proof.
intros.
cases_equality W Y.
assert (parallel W Y U V).
elim ( on_line_dex_spec_strong_f W Y U V H1 H0).
intros S HS.
use HS.
assert (Py A Y B = W ** Y / W ** S * Py A S B + Y ** S / W ** S * Py A W B - W ** Y / W ** S * (Y ** S / W ** S) * Py W S W).
assert (W ** Y / W ** S = r).
rewrite H6 in H3.
assert ( Y ** S / W ** S = 1 - r).
rewrite H7 in H3.
assert (weak_3_parallelogram U V S W).

*****
H7 : eq (Fdiv (DSeg Y S) (DSeg W S)) (Fminus F1 r)
H6 : eq (Fdiv (DSeg W Y) (DSeg W S)) r
H3 : eq (Py A Y B)\n (Fminus (Fplus (Fmult r (Py A S B)) (Fmult (Fminus F1 r) (Py A W B)))\n (Fmult (Fmult r (Fminus F1 r)) (Py W S W)))
H5 : weak_3_parallelogram W S V U
H4 : eq (DSeg W S) (DSeg U V)
H2 : Col S W Y
S : Point
H1 : parallel W Y U V
H0 : not (eq W Y)
H : on_parallel_d Y W U V r
r : F
A,B,W,U,V,Y : Point
*****
weak_3_parallelogram U V S W
+++++
auto with Geom.
-----
Theorem elim_py_on_parallel_d_middle : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A Y B = Py A W B + r* (Py A V B - Py A U B + 2* Py W U V )-r*(1-r)*(Py U V U).
Proof.
intros.
cases_equality W Y.
assert (parallel W Y U V).
elim ( on_line_dex_spec_strong_f W Y U V H1 H0).
intros S HS.
use HS.
assert (Py A Y B = W ** Y / W ** S * Py A S B + Y ** S / W ** S * Py A W B - W ** Y / W ** S * (Y ** S / W ** S) * Py W S W).
assert (W ** Y / W ** S = r).
rewrite H6 in H3.
assert ( Y ** S / W ** S = 1 - r).
rewrite H7 in H3.
assert (weak_3_parallelogram U V S W).

*****
H8 : weak_3_parallelogram U V S W
H7 : eq (Fdiv (DSeg Y S) (DSeg W S)) (Fminus F1 r)
H6 : eq (Fdiv (DSeg W Y) (DSeg W S)) r
H3 : eq (Py A Y B)\n (Fminus (Fplus (Fmult r (Py A S B)) (Fmult (Fminus F1 r) (Py A W B)))\n (Fmult (Fmult r (Fminus F1 r)) (Py W S W)))
H5 : weak_3_parallelogram W S V U
H4 : eq (DSeg W S) (DSeg U V)
H2 : Col S W Y
S : Point
H1 : parallel W Y U V
H0 : not (eq W Y)
H : on_parallel_d Y W U V r
r : F
A,B,W,U,V,Y : Point
*****
eq (Py A Y B) (Fminus (Fplus (Py A W B) (Fmult r (Fplus (Fminus (Py A V B) (Py A U B)) (Fmult (Fplus F1 F1) (Py W U V))))) (Fmult (Fmult r (Fminus F1 r)) (Py U V U)))
+++++
idtac.
-----
Theorem elim_py_on_parallel_d_middle : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A Y B = Py A W B + r* (Py A V B - Py A U B + 2* Py W U V )-r*(1-r)*(Py U V U).
Proof.
intros.
cases_equality W Y.
assert (parallel W Y U V).
elim ( on_line_dex_spec_strong_f W Y U V H1 H0).
intros S HS.
use HS.
assert (Py A Y B = W ** Y / W ** S * Py A S B + Y ** S / W ** S * Py A W B - W ** Y / W ** S * (Y ** S / W ** S) * Py W S W).
assert (W ** Y / W ** S = r).
rewrite H6 in H3.
assert ( Y ** S / W ** S = 1 - r).
rewrite H7 in H3.
assert (weak_3_parallelogram U V S W).
idtac.

*****
H8 : weak_3_parallelogram U V S W
H7 : eq (Fdiv (DSeg Y S) (DSeg W S)) (Fminus F1 r)
H6 : eq (Fdiv (DSeg W Y) (DSeg W S)) r
H3 : eq (Py A Y B)\n (Fminus (Fplus (Fmult r (Py A S B)) (Fmult (Fminus F1 r) (Py A W B)))\n (Fmult (Fmult r (Fminus F1 r)) (Py W S W)))
H5 : weak_3_parallelogram W S V U
H4 : eq (DSeg W S) (DSeg U V)
H2 : Col S W Y
S : Point
H1 : parallel W Y U V
H0 : not (eq W Y)
H : on_parallel_d Y W U V r
r : F
A,B,W,U,V,Y : Point
*****
eq (Py A Y B) (Fminus (Fplus (Py A W B) (Fmult r (Fplus (Fminus (Py A V B) (Py A U B)) (Fmult (Fplus F1 F1) (Py W U V))))) (Fmult (Fmult r (Fminus F1 r)) (Py U V U)))
+++++
assert (T:= l_27_c U V S W A B H8).
-----
Theorem elim_py_on_parallel_d_middle : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A Y B = Py A W B + r* (Py A V B - Py A U B + 2* Py W U V )-r*(1-r)*(Py U V U).
Proof.
intros.
cases_equality W Y.
assert (parallel W Y U V).
elim ( on_line_dex_spec_strong_f W Y U V H1 H0).
intros S HS.
use HS.
assert (Py A Y B = W ** Y / W ** S * Py A S B + Y ** S / W ** S * Py A W B - W ** Y / W ** S * (Y ** S / W ** S) * Py W S W).
assert (W ** Y / W ** S = r).
rewrite H6 in H3.
assert ( Y ** S / W ** S = 1 - r).
rewrite H7 in H3.
assert (weak_3_parallelogram U V S W).
idtac.
assert (T:= l_27_c U V S W A B H8).

*****
T : eq (Fplus (Py A U B) (Py A S B))\n (Fplus (Fplus (Py A V B) (Py A W B)) (Fmult (Fplus F1 F1) (Py V U W)))
H8 : weak_3_parallelogram U V S W
H7 : eq (Fdiv (DSeg Y S) (DSeg W S)) (Fminus F1 r)
H6 : eq (Fdiv (DSeg W Y) (DSeg W S)) r
H3 : eq (Py A Y B)\n (Fminus (Fplus (Fmult r (Py A S B)) (Fmult (Fminus F1 r) (Py A W B)))\n (Fmult (Fmult r (Fminus F1 r)) (Py W S W)))
H5 : weak_3_parallelogram W S V U
H4 : eq (DSeg W S) (DSeg U V)
H2 : Col S W Y
S : Point
H1 : parallel W Y U V
H0 : not (eq W Y)
H : on_parallel_d Y W U V r
r : F
A,B,W,U,V,Y : Point
*****
eq (Py A Y B) (Fminus (Fplus (Py A W B) (Fmult r (Fplus (Fminus (Py A V B) (Py A U B)) (Fmult (Fplus F1 F1) (Py W U V))))) (Fmult (Fmult r (Fminus F1 r)) (Py U V U)))
+++++
revert T.
-----
Theorem elim_py_on_parallel_d_middle : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A Y B = Py A W B + r* (Py A V B - Py A U B + 2* Py W U V )-r*(1-r)*(Py U V U).
Proof.
intros.
cases_equality W Y.
assert (parallel W Y U V).
elim ( on_line_dex_spec_strong_f W Y U V H1 H0).
intros S HS.
use HS.
assert (Py A Y B = W ** Y / W ** S * Py A S B + Y ** S / W ** S * Py A W B - W ** Y / W ** S * (Y ** S / W ** S) * Py W S W).
assert (W ** Y / W ** S = r).
rewrite H6 in H3.
assert ( Y ** S / W ** S = 1 - r).
rewrite H7 in H3.
assert (weak_3_parallelogram U V S W).
idtac.
assert (T:= l_27_c U V S W A B H8).
revert T.

*****
H8 : weak_3_parallelogram U V S W
H7 : eq (Fdiv (DSeg Y S) (DSeg W S)) (Fminus F1 r)
H6 : eq (Fdiv (DSeg W Y) (DSeg W S)) r
H3 : eq (Py A Y B)\n (Fminus (Fplus (Fmult r (Py A S B)) (Fmult (Fminus F1 r) (Py A W B)))\n (Fmult (Fmult r (Fminus F1 r)) (Py W S W)))
H5 : weak_3_parallelogram W S V U
H4 : eq (DSeg W S) (DSeg U V)
H2 : Col S W Y
S : Point
H1 : parallel W Y U V
H0 : not (eq W Y)
H : on_parallel_d Y W U V r
r : F
A,B,W,U,V,Y : Point
*****
forall _ : eq (Fplus (Py A U B) (Py A S B)) (Fplus (Fplus (Py A V B) (Py A W B)) (Fmult (Fplus F1 F1) (Py V U W))), eq (Py A Y B) (Fminus (Fplus (Py A W B) (Fmult r (Fplus (Fminus (Py A V B) (Py A U B)) (Fmult (Fplus F1 F1) (Py W U V))))) (Fmult (Fmult r (Fminus F1 r)) (Py U V U)))
+++++
revert H3.
-----
Theorem elim_py_on_parallel_d_middle : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A Y B = Py A W B + r* (Py A V B - Py A U B + 2* Py W U V )-r*(1-r)*(Py U V U).
Proof.
intros.
cases_equality W Y.
assert (parallel W Y U V).
elim ( on_line_dex_spec_strong_f W Y U V H1 H0).
intros S HS.
use HS.
assert (Py A Y B = W ** Y / W ** S * Py A S B + Y ** S / W ** S * Py A W B - W ** Y / W ** S * (Y ** S / W ** S) * Py W S W).
assert (W ** Y / W ** S = r).
rewrite H6 in H3.
assert ( Y ** S / W ** S = 1 - r).
rewrite H7 in H3.
assert (weak_3_parallelogram U V S W).
idtac.
assert (T:= l_27_c U V S W A B H8).
revert T.
revert H3.

*****
H8 : weak_3_parallelogram U V S W
H7 : eq (Fdiv (DSeg Y S) (DSeg W S)) (Fminus F1 r)
H6 : eq (Fdiv (DSeg W Y) (DSeg W S)) r
H5 : weak_3_parallelogram W S V U
H4 : eq (DSeg W S) (DSeg U V)
H2 : Col S W Y
S : Point
H1 : parallel W Y U V
H0 : not (eq W Y)
H : on_parallel_d Y W U V r
r : F
A,B,W,U,V,Y : Point
*****
forall (_ : eq (Py A Y B) (Fminus (Fplus (Fmult r (Py A S B)) (Fmult (Fminus F1 r) (Py A W B))) (Fmult (Fmult r (Fminus F1 r)) (Py W S W)))) (_ : eq (Fplus (Py A U B) (Py A S B)) (Fplus (Fplus (Py A V B) (Py A W B)) (Fmult (Fplus F1 F1) (Py V U W)))), eq (Py A Y B) (Fminus (Fplus (Py A W B) (Fmult r (Fplus (Fminus (Py A V B) (Py A U B)) (Fmult (Fplus F1 F1) (Py W U V))))) (Fmult (Fmult r (Fminus F1 r)) (Py U V U)))
+++++
uniformize_pys.
-----
Theorem elim_py_on_parallel_d_middle : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A Y B = Py A W B + r* (Py A V B - Py A U B + 2* Py W U V )-r*(1-r)*(Py U V U).
Proof.
intros.
cases_equality W Y.
assert (parallel W Y U V).
elim ( on_line_dex_spec_strong_f W Y U V H1 H0).
intros S HS.
use HS.
assert (Py A Y B = W ** Y / W ** S * Py A S B + Y ** S / W ** S * Py A W B - W ** Y / W ** S * (Y ** S / W ** S) * Py W S W).
assert (W ** Y / W ** S = r).
rewrite H6 in H3.
assert ( Y ** S / W ** S = 1 - r).
rewrite H7 in H3.
assert (weak_3_parallelogram U V S W).
idtac.
assert (T:= l_27_c U V S W A B H8).
revert T.
revert H3.
uniformize_pys.

*****
H8 : weak_3_parallelogram U V S W
H7 : eq (Fdiv (DSeg Y S) (DSeg W S)) (Fminus F1 r)
H6 : eq (Fdiv (DSeg W Y) (DSeg W S)) r
H5 : weak_3_parallelogram W S V U
H4 : eq (DSeg W S) (DSeg U V)
H2 : Col S W Y
S : Point
H1 : parallel W Y U V
H0 : not (eq W Y)
H : on_parallel_d Y W U V r
r : F
A,B,W,U,V,Y : Point
*****
forall (_ : eq (Py A Y B) (Fminus (Fplus (Fmult r (Py A S B)) (Fmult (Fminus F1 r) (Py A W B))) (Fmult (Fmult r (Fminus F1 r)) (Py W S W)))) (_ : eq (Fplus (Py A U B) (Py A S B)) (Fplus (Fplus (Py A V B) (Py A W B)) (Fmult (Fplus F1 F1) (Py W U V)))), eq (Py A Y B) (Fminus (Fplus (Py A W B) (Fmult r (Fplus (Fminus (Py A V B) (Py A U B)) (Fmult (Fplus F1 F1) (Py W U V))))) (Fmult (Fmult r (Fminus F1 r)) (Py U V U)))
+++++
intros.
-----
Theorem elim_py_on_parallel_d_middle : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A Y B = Py A W B + r* (Py A V B - Py A U B + 2* Py W U V )-r*(1-r)*(Py U V U).
Proof.
intros.
cases_equality W Y.
assert (parallel W Y U V).
elim ( on_line_dex_spec_strong_f W Y U V H1 H0).
intros S HS.
use HS.
assert (Py A Y B = W ** Y / W ** S * Py A S B + Y ** S / W ** S * Py A W B - W ** Y / W ** S * (Y ** S / W ** S) * Py W S W).
assert (W ** Y / W ** S = r).
rewrite H6 in H3.
assert ( Y ** S / W ** S = 1 - r).
rewrite H7 in H3.
assert (weak_3_parallelogram U V S W).
idtac.
assert (T:= l_27_c U V S W A B H8).
revert T.
revert H3.
uniformize_pys.
intros.

*****
T : eq (Fplus (Py A U B) (Py A S B))\n (Fplus (Fplus (Py A V B) (Py A W B)) (Fmult (Fplus F1 F1) (Py W U V)))
H3 : eq (Py A Y B)\n (Fminus (Fplus (Fmult r (Py A S B)) (Fmult (Fminus F1 r) (Py A W B)))\n (Fmult (Fmult r (Fminus F1 r)) (Py W S W)))
H8 : weak_3_parallelogram U V S W
H7 : eq (Fdiv (DSeg Y S) (DSeg W S)) (Fminus F1 r)
H6 : eq (Fdiv (DSeg W Y) (DSeg W S)) r
H5 : weak_3_parallelogram W S V U
H4 : eq (DSeg W S) (DSeg U V)
H2 : Col S W Y
S : Point
H1 : parallel W Y U V
H0 : not (eq W Y)
H : on_parallel_d Y W U V r
r : F
A,B,W,U,V,Y : Point
*****
eq (Py A Y B) (Fminus (Fplus (Py A W B) (Fmult r (Fplus (Fminus (Py A V B) (Py A U B)) (Fmult (Fplus F1 F1) (Py W U V))))) (Fmult (Fmult r (Fminus F1 r)) (Py U V U)))
+++++
IsoleVar (Py A S B) T.
-----
Theorem elim_py_on_parallel_d_middle : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A Y B = Py A W B + r* (Py A V B - Py A U B + 2* Py W U V )-r*(1-r)*(Py U V U).
Proof.
intros.
cases_equality W Y.
assert (parallel W Y U V).
elim ( on_line_dex_spec_strong_f W Y U V H1 H0).
intros S HS.
use HS.
assert (Py A Y B = W ** Y / W ** S * Py A S B + Y ** S / W ** S * Py A W B - W ** Y / W ** S * (Y ** S / W ** S) * Py W S W).
assert (W ** Y / W ** S = r).
rewrite H6 in H3.
assert ( Y ** S / W ** S = 1 - r).
rewrite H7 in H3.
assert (weak_3_parallelogram U V S W).
idtac.
assert (T:= l_27_c U V S W A B H8).
revert T.
revert H3.
uniformize_pys.
intros.
IsoleVar (Py A S B) T.

*****
T : eq (Py A S B)\n (Fminus\n (Fplus (Fplus (Py A V B) (Py A W B))\n (Fmult (Fplus F1 F1) (Py W U V))) (Py A U B))
H3 : eq (Py A Y B)\n (Fminus (Fplus (Fmult r (Py A S B)) (Fmult (Fminus F1 r) (Py A W B)))\n (Fmult (Fmult r (Fminus F1 r)) (Py W S W)))
H8 : weak_3_parallelogram U V S W
H7 : eq (Fdiv (DSeg Y S) (DSeg W S)) (Fminus F1 r)
H6 : eq (Fdiv (DSeg W Y) (DSeg W S)) r
H5 : weak_3_parallelogram W S V U
H4 : eq (DSeg W S) (DSeg U V)
H2 : Col S W Y
S : Point
H1 : parallel W Y U V
H0 : not (eq W Y)
H : on_parallel_d Y W U V r
r : F
A,B,W,U,V,Y : Point
*****
eq (Py A Y B) (Fminus (Fplus (Py A W B) (Fmult r (Fplus (Fminus (Py A V B) (Py A U B)) (Fmult (Fplus F1 F1) (Py W U V))))) (Fmult (Fmult r (Fminus F1 r)) (Py U V U)))
+++++
rewrite T in H3.
-----
Theorem elim_py_on_parallel_d_middle : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A Y B = Py A W B + r* (Py A V B - Py A U B + 2* Py W U V )-r*(1-r)*(Py U V U).
Proof.
intros.
cases_equality W Y.
assert (parallel W Y U V).
elim ( on_line_dex_spec_strong_f W Y U V H1 H0).
intros S HS.
use HS.
assert (Py A Y B = W ** Y / W ** S * Py A S B + Y ** S / W ** S * Py A W B - W ** Y / W ** S * (Y ** S / W ** S) * Py W S W).
assert (W ** Y / W ** S = r).
rewrite H6 in H3.
assert ( Y ** S / W ** S = 1 - r).
rewrite H7 in H3.
assert (weak_3_parallelogram U V S W).
idtac.
assert (T:= l_27_c U V S W A B H8).
revert T.
revert H3.
uniformize_pys.
intros.
IsoleVar (Py A S B) T.
rewrite T in H3.

*****
T : eq (Py A S B)\n (Fminus\n (Fplus (Fplus (Py A V B) (Py A W B))\n (Fmult (Fplus F1 F1) (Py W U V))) (Py A U B))
H3 : eq (Py A Y B)\n (Fminus\n (Fplus\n (Fmult r\n (Fminus\n (Fplus (Fplus (Py A V B) (Py A W B))\n (Fmult (Fplus F1 F1) (Py W U V))) \n (Py A U B))) (Fmult (Fminus F1 r) (Py A W B)))\n (Fmult (Fmult r (Fminus F1 r)) (Py W S W)))
H8 : weak_3_parallelogram U V S W
H7 : eq (Fdiv (DSeg Y S) (DSeg W S)) (Fminus F1 r)
H6 : eq (Fdiv (DSeg W Y) (DSeg W S)) r
H5 : weak_3_parallelogram W S V U
H4 : eq (DSeg W S) (DSeg U V)
H2 : Col S W Y
S : Point
H1 : parallel W Y U V
H0 : not (eq W Y)
H : on_parallel_d Y W U V r
r : F
A,B,W,U,V,Y : Point
*****
eq (Py A Y B) (Fminus (Fplus (Py A W B) (Fmult r (Fplus (Fminus (Py A V B) (Py A U B)) (Fmult (Fplus F1 F1) (Py W U V))))) (Fmult (Fmult r (Fminus F1 r)) (Py U V U)))
+++++
rewrite H3.
-----
Theorem elim_py_on_parallel_d_middle : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A Y B = Py A W B + r* (Py A V B - Py A U B + 2* Py W U V )-r*(1-r)*(Py U V U).
Proof.
intros.
cases_equality W Y.
assert (parallel W Y U V).
elim ( on_line_dex_spec_strong_f W Y U V H1 H0).
intros S HS.
use HS.
assert (Py A Y B = W ** Y / W ** S * Py A S B + Y ** S / W ** S * Py A W B - W ** Y / W ** S * (Y ** S / W ** S) * Py W S W).
assert (W ** Y / W ** S = r).
rewrite H6 in H3.
assert ( Y ** S / W ** S = 1 - r).
rewrite H7 in H3.
assert (weak_3_parallelogram U V S W).
idtac.
assert (T:= l_27_c U V S W A B H8).
revert T.
revert H3.
uniformize_pys.
intros.
IsoleVar (Py A S B) T.
rewrite T in H3.
rewrite H3.

*****
T : eq (Py A S B)\n (Fminus\n (Fplus (Fplus (Py A V B) (Py A W B))\n (Fmult (Fplus F1 F1) (Py W U V))) (Py A U B))
H3 : eq (Py A Y B)\n (Fminus\n (Fplus\n (Fmult r\n (Fminus\n (Fplus (Fplus (Py A V B) (Py A W B))\n (Fmult (Fplus F1 F1) (Py W U V))) \n (Py A U B))) (Fmult (Fminus F1 r) (Py A W B)))\n (Fmult (Fmult r (Fminus F1 r)) (Py W S W)))
H8 : weak_3_parallelogram U V S W
H7 : eq (Fdiv (DSeg Y S) (DSeg W S)) (Fminus F1 r)
H6 : eq (Fdiv (DSeg W Y) (DSeg W S)) r
H5 : weak_3_parallelogram W S V U
H4 : eq (DSeg W S) (DSeg U V)
H2 : Col S W Y
S : Point
H1 : parallel W Y U V
H0 : not (eq W Y)
H : on_parallel_d Y W U V r
r : F
A,B,W,U,V,Y : Point
*****
eq (Fminus (Fplus (Fmult r (Fminus (Fplus (Fplus (Py A V B) (Py A W B)) (Fmult (Fplus F1 F1) (Py W U V))) (Py A U B))) (Fmult (Fminus F1 r) (Py A W B))) (Fmult (Fmult r (Fminus F1 r)) (Py W S W))) (Fminus (Fplus (Py A W B) (Fmult r (Fplus (Fminus (Py A V B) (Py A U B)) (Fmult (Fplus F1 F1) (Py W U V))))) (Fmult (Fmult r (Fminus F1 r)) (Py U V U)))
+++++
replace (Py W S W) with (Py U V U).
-----
Theorem elim_py_on_parallel_d_middle : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A Y B = Py A W B + r* (Py A V B - Py A U B + 2* Py W U V )-r*(1-r)*(Py U V U).
Proof.
intros.
cases_equality W Y.
assert (parallel W Y U V).
elim ( on_line_dex_spec_strong_f W Y U V H1 H0).
intros S HS.
use HS.
assert (Py A Y B = W ** Y / W ** S * Py A S B + Y ** S / W ** S * Py A W B - W ** Y / W ** S * (Y ** S / W ** S) * Py W S W).
assert (W ** Y / W ** S = r).
rewrite H6 in H3.
assert ( Y ** S / W ** S = 1 - r).
rewrite H7 in H3.
assert (weak_3_parallelogram U V S W).
idtac.
assert (T:= l_27_c U V S W A B H8).
revert T.
revert H3.
uniformize_pys.
intros.
IsoleVar (Py A S B) T.
rewrite T in H3.
rewrite H3.
replace (Py W S W) with (Py U V U).

*****
T : eq (Py A S B)\n (Fminus\n (Fplus (Fplus (Py A V B) (Py A W B))\n (Fmult (Fplus F1 F1) (Py W U V))) (Py A U B))
H3 : eq (Py A Y B)\n (Fminus\n (Fplus\n (Fmult r\n (Fminus\n (Fplus (Fplus (Py A V B) (Py A W B))\n (Fmult (Fplus F1 F1) (Py W U V))) \n (Py A U B))) (Fmult (Fminus F1 r) (Py A W B)))\n (Fmult (Fmult r (Fminus F1 r)) (Py W S W)))
H8 : weak_3_parallelogram U V S W
H7 : eq (Fdiv (DSeg Y S) (DSeg W S)) (Fminus F1 r)
H6 : eq (Fdiv (DSeg W Y) (DSeg W S)) r
H5 : weak_3_parallelogram W S V U
H4 : eq (DSeg W S) (DSeg U V)
H2 : Col S W Y
S : Point
H1 : parallel W Y U V
H0 : not (eq W Y)
H : on_parallel_d Y W U V r
r : F
A,B,W,U,V,Y : Point
*****
eq (Fminus (Fplus (Fmult r (Fminus (Fplus (Fplus (Py A V B) (Py A W B)) (Fmult (Fplus F1 F1) (Py W U V))) (Py A U B))) (Fmult (Fminus F1 r) (Py A W B))) (Fmult (Fmult r (Fminus F1 r)) (Py U V U))) (Fminus (Fplus (Py A W B) (Fmult r (Fplus (Fminus (Py A V B) (Py A U B)) (Fmult (Fplus F1 F1) (Py W U V))))) (Fmult (Fmult r (Fminus F1 r)) (Py U V U)))
+++++
ring.
-----
Theorem elim_py_on_parallel_d_middle : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A Y B = Py A W B + r* (Py A V B - Py A U B + 2* Py W U V )-r*(1-r)*(Py U V U).
Proof.
intros.
cases_equality W Y.
assert (parallel W Y U V).
elim ( on_line_dex_spec_strong_f W Y U V H1 H0).
intros S HS.
use HS.
assert (Py A Y B = W ** Y / W ** S * Py A S B + Y ** S / W ** S * Py A W B - W ** Y / W ** S * (Y ** S / W ** S) * Py W S W).
assert (W ** Y / W ** S = r).
rewrite H6 in H3.
assert ( Y ** S / W ** S = 1 - r).
rewrite H7 in H3.
assert (weak_3_parallelogram U V S W).
idtac.
assert (T:= l_27_c U V S W A B H8).
revert T.
revert H3.
uniformize_pys.
intros.
IsoleVar (Py A S B) T.
rewrite T in H3.
rewrite H3.
replace (Py W S W) with (Py U V U).

*****
T : eq (Py A S B)\n (Fminus\n (Fplus (Fplus (Py A V B) (Py A W B))\n (Fmult (Fplus F1 F1) (Py W U V))) (Py A U B))
H3 : eq (Py A Y B)\n (Fminus\n (Fplus\n (Fmult r\n (Fminus\n (Fplus (Fplus (Py A V B) (Py A W B))\n (Fmult (Fplus F1 F1) (Py W U V))) \n (Py A U B))) (Fmult (Fminus F1 r) (Py A W B)))\n (Fmult (Fmult r (Fminus F1 r)) (Py W S W)))
H8 : weak_3_parallelogram U V S W
H7 : eq (Fdiv (DSeg Y S) (DSeg W S)) (Fminus F1 r)
H6 : eq (Fdiv (DSeg W Y) (DSeg W S)) r
H5 : weak_3_parallelogram W S V U
H4 : eq (DSeg W S) (DSeg U V)
H2 : Col S W Y
S : Point
H1 : parallel W Y U V
H0 : not (eq W Y)
H : on_parallel_d Y W U V r
r : F
A,B,W,U,V,Y : Point
*****
eq (Py U V U) (Py W S W)
+++++
unfold Py.
-----
Theorem elim_py_on_parallel_d_middle : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A Y B = Py A W B + r* (Py A V B - Py A U B + 2* Py W U V )-r*(1-r)*(Py U V U).
Proof.
intros.
cases_equality W Y.
assert (parallel W Y U V).
elim ( on_line_dex_spec_strong_f W Y U V H1 H0).
intros S HS.
use HS.
assert (Py A Y B = W ** Y / W ** S * Py A S B + Y ** S / W ** S * Py A W B - W ** Y / W ** S * (Y ** S / W ** S) * Py W S W).
assert (W ** Y / W ** S = r).
rewrite H6 in H3.
assert ( Y ** S / W ** S = 1 - r).
rewrite H7 in H3.
assert (weak_3_parallelogram U V S W).
idtac.
assert (T:= l_27_c U V S W A B H8).
revert T.
revert H3.
uniformize_pys.
intros.
IsoleVar (Py A S B) T.
rewrite T in H3.
rewrite H3.
replace (Py W S W) with (Py U V U).
unfold Py.

*****
T : eq (Py A S B)\n (Fminus\n (Fplus (Fplus (Py A V B) (Py A W B))\n (Fmult (Fplus F1 F1) (Py W U V))) (Py A U B))
H3 : eq (Py A Y B)\n (Fminus\n (Fplus\n (Fmult r\n (Fminus\n (Fplus (Fplus (Py A V B) (Py A W B))\n (Fmult (Fplus F1 F1) (Py W U V))) \n (Py A U B))) (Fmult (Fminus F1 r) (Py A W B)))\n (Fmult (Fmult r (Fminus F1 r)) (Py W S W)))
H8 : weak_3_parallelogram U V S W
H7 : eq (Fdiv (DSeg Y S) (DSeg W S)) (Fminus F1 r)
H6 : eq (Fdiv (DSeg W Y) (DSeg W S)) r
H5 : weak_3_parallelogram W S V U
H4 : eq (DSeg W S) (DSeg U V)
H2 : Col S W Y
S : Point
H1 : parallel W Y U V
H0 : not (eq W Y)
H : on_parallel_d Y W U V r
r : F
A,B,W,U,V,Y : Point
*****
eq (Fminus (Fplus (Fmult (DSeg U V) (DSeg U V)) (Fmult (DSeg V U) (DSeg V U))) (Fmult (DSeg U U) (DSeg U U))) (Fminus (Fplus (Fmult (DSeg W S) (DSeg W S)) (Fmult (DSeg S W) (DSeg S W))) (Fmult (DSeg W W) (DSeg W W)))
+++++
basic_simpl.
-----
Theorem elim_py_on_parallel_d_middle : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A Y B = Py A W B + r* (Py A V B - Py A U B + 2* Py W U V )-r*(1-r)*(Py U V U).
Proof.
intros.
cases_equality W Y.
assert (parallel W Y U V).
elim ( on_line_dex_spec_strong_f W Y U V H1 H0).
intros S HS.
use HS.
assert (Py A Y B = W ** Y / W ** S * Py A S B + Y ** S / W ** S * Py A W B - W ** Y / W ** S * (Y ** S / W ** S) * Py W S W).
assert (W ** Y / W ** S = r).
rewrite H6 in H3.
assert ( Y ** S / W ** S = 1 - r).
rewrite H7 in H3.
assert (weak_3_parallelogram U V S W).
idtac.
assert (T:= l_27_c U V S W A B H8).
revert T.
revert H3.
uniformize_pys.
intros.
IsoleVar (Py A S B) T.
rewrite T in H3.
rewrite H3.
replace (Py W S W) with (Py U V U).
unfold Py.
basic_simpl.

*****
T : eq (Py A S B)\n (Fminus\n (Fplus (Fplus (Py A V B) (Py A W B))\n (Fmult (Fplus F1 F1) (Py W U V))) (Py A U B))
H3 : eq (Py A Y B)\n (Fminus\n (Fplus\n (Fmult r\n (Fminus\n (Fplus (Fplus (Py A V B) (Py A W B))\n (Fmult (Fplus F1 F1) (Py W U V))) \n (Py A U B))) (Fmult (Fminus F1 r) (Py A W B)))\n (Fmult (Fmult r (Fminus F1 r)) (Py W S W)))
H8 : weak_3_parallelogram U V S W
H7 : eq (Fdiv (DSeg Y S) (DSeg W S)) (Fminus F1 r)
H6 : eq (Fdiv (DSeg W Y) (DSeg W S)) r
H5 : weak_3_parallelogram W S V U
H4 : eq (DSeg W S) (DSeg U V)
H2 : Col S W Y
S : Point
H1 : parallel W Y U V
H0 : not (eq W Y)
H : on_parallel_d Y W U V r
r : F
A,B,W,U,V,Y : Point
*****
eq (Fplus (Fmult (DSeg U V) (DSeg U V)) (Fmult (DSeg V U) (DSeg V U))) (Fplus (Fmult (DSeg W S) (DSeg W S)) (Fmult (DSeg S W) (DSeg S W)))
+++++
uniformize_dir_seg.
-----
Theorem elim_py_on_parallel_d_middle : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A Y B = Py A W B + r* (Py A V B - Py A U B + 2* Py W U V )-r*(1-r)*(Py U V U).
Proof.
intros.
cases_equality W Y.
assert (parallel W Y U V).
elim ( on_line_dex_spec_strong_f W Y U V H1 H0).
intros S HS.
use HS.
assert (Py A Y B = W ** Y / W ** S * Py A S B + Y ** S / W ** S * Py A W B - W ** Y / W ** S * (Y ** S / W ** S) * Py W S W).
assert (W ** Y / W ** S = r).
rewrite H6 in H3.
assert ( Y ** S / W ** S = 1 - r).
rewrite H7 in H3.
assert (weak_3_parallelogram U V S W).
idtac.
assert (T:= l_27_c U V S W A B H8).
revert T.
revert H3.
uniformize_pys.
intros.
IsoleVar (Py A S B) T.
rewrite T in H3.
rewrite H3.
replace (Py W S W) with (Py U V U).
unfold Py.
basic_simpl.
uniformize_dir_seg.

*****
H7 : eq (Fdiv (DSeg Y S) (DSeg W S)) (Fminus F1 r)
H6 : eq (Fdiv (DSeg W Y) (DSeg W S)) r
H4 : eq (DSeg W S) (DSeg U V)
T : eq (Py A S B)\n (Fminus\n (Fplus (Fplus (Py A V B) (Py A W B))\n (Fmult (Fplus F1 F1) (Py W U V))) (Py A U B))
H3 : eq (Py A Y B)\n (Fminus\n (Fplus\n (Fmult r\n (Fminus\n (Fplus (Fplus (Py A V B) (Py A W B))\n (Fmult (Fplus F1 F1) (Py W U V))) \n (Py A U B))) (Fmult (Fminus F1 r) (Py A W B)))\n (Fmult (Fmult r (Fminus F1 r)) (Py W S W)))
H8 : weak_3_parallelogram U V S W
H5 : weak_3_parallelogram W S V U
H2 : Col S W Y
S : Point
H1 : parallel W Y U V
H0 : not (eq W Y)
H : on_parallel_d Y W U V r
r : F
A,B,W,U,V,Y : Point
*****
eq (Fplus (Fmult (DSeg U V) (DSeg U V)) (Fmult (Fopp (DSeg U V)) (Fopp (DSeg U V)))) (Fplus (Fmult (DSeg W S) (DSeg W S)) (Fmult (Fopp (DSeg W S)) (Fopp (DSeg W S))))
+++++
rewrite H4.
-----
Theorem elim_py_on_parallel_d_middle : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A Y B = Py A W B + r* (Py A V B - Py A U B + 2* Py W U V )-r*(1-r)*(Py U V U).
Proof.
intros.
cases_equality W Y.
assert (parallel W Y U V).
elim ( on_line_dex_spec_strong_f W Y U V H1 H0).
intros S HS.
use HS.
assert (Py A Y B = W ** Y / W ** S * Py A S B + Y ** S / W ** S * Py A W B - W ** Y / W ** S * (Y ** S / W ** S) * Py W S W).
assert (W ** Y / W ** S = r).
rewrite H6 in H3.
assert ( Y ** S / W ** S = 1 - r).
rewrite H7 in H3.
assert (weak_3_parallelogram U V S W).
idtac.
assert (T:= l_27_c U V S W A B H8).
revert T.
revert H3.
uniformize_pys.
intros.
IsoleVar (Py A S B) T.
rewrite T in H3.
rewrite H3.
replace (Py W S W) with (Py U V U).
unfold Py.
basic_simpl.
uniformize_dir_seg.
rewrite H4.

*****
H7 : eq (Fdiv (DSeg Y S) (DSeg W S)) (Fminus F1 r)
H6 : eq (Fdiv (DSeg W Y) (DSeg W S)) r
H4 : eq (DSeg W S) (DSeg U V)
T : eq (Py A S B)\n (Fminus\n (Fplus (Fplus (Py A V B) (Py A W B))\n (Fmult (Fplus F1 F1) (Py W U V))) (Py A U B))
H3 : eq (Py A Y B)\n (Fminus\n (Fplus\n (Fmult r\n (Fminus\n (Fplus (Fplus (Py A V B) (Py A W B))\n (Fmult (Fplus F1 F1) (Py W U V))) \n (Py A U B))) (Fmult (Fminus F1 r) (Py A W B)))\n (Fmult (Fmult r (Fminus F1 r)) (Py W S W)))
H8 : weak_3_parallelogram U V S W
H5 : weak_3_parallelogram W S V U
H2 : Col S W Y
S : Point
H1 : parallel W Y U V
H0 : not (eq W Y)
H : on_parallel_d Y W U V r
r : F
A,B,W,U,V,Y : Point
*****
eq (Fplus (Fmult (DSeg U V) (DSeg U V)) (Fmult (Fopp (DSeg U V)) (Fopp (DSeg U V)))) (Fplus (Fmult (DSeg U V) (DSeg U V)) (Fmult (Fopp (DSeg U V)) (Fopp (DSeg U V))))
+++++
ring.
-----
Theorem elim_py_on_parallel_d_middle : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A Y B = Py A W B + r* (Py A V B - Py A U B + 2* Py W U V )-r*(1-r)*(Py U V U).
Proof.
intros.
cases_equality W Y.

*****

*****

+++++
Qed.
-----
Theorem elim_py_on_parallel_d_right :\n forall (A B W U V Y : Point) (r : F),\n on_parallel_d Y W U V r -> \n Py A B Y = Py A B W + r  * (Py A B V - Py A B U).
-----
Theorem elim_py_on_parallel_d_right : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A B Y = Py A B W + r * (Py A B V - Py A B U).

*****

*****
forall (A B W U V Y : Point) (r : F) (_ : on_parallel_d Y W U V r), eq (Py A B Y) (Fplus (Py A B W) (Fmult r (Fminus (Py A B V) (Py A B U))))
+++++
Proof.
-----
Theorem elim_py_on_parallel_d_right : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A B Y = Py A B W + r * (Py A B V - Py A B U).
Proof.

*****

*****
forall (A B W U V Y : Point) (r : F) (_ : on_parallel_d Y W U V r), eq (Py A B Y) (Fplus (Py A B W) (Fmult r (Fminus (Py A B V) (Py A B U))))
+++++
intros.
-----
Theorem elim_py_on_parallel_d_right : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A B Y = Py A B W + r * (Py A B V - Py A B U).
Proof.
intros.

*****
H : on_parallel_d Y W U V r
r : F
A,B,W,U,V,Y : Point
*****
eq (Py A B Y) (Fplus (Py A B W) (Fmult r (Fminus (Py A B V) (Py A B U))))
+++++
cases_equality W Y.
-----
Theorem elim_py_on_parallel_d_right : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A B Y = Py A B W + r * (Py A B V - Py A B U).
Proof.
intros.
cases_equality W Y.

*****
H0 : eq W Y
H : on_parallel_d Y W U V r
r : F
A,B,W,U,V,Y : Point
*****
eq (Py A B Y) (Fplus (Py A B W) (Fmult r (Fminus (Py A B V) (Py A B U))))
+++++
subst.
-----
Theorem elim_py_on_parallel_d_right : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A B Y = Py A B W + r * (Py A B V - Py A B U).
Proof.
intros.
cases_equality W Y.
subst.

*****
H : on_parallel_d Y Y U V r
r : F
A,B,U,V,Y : Point
*****
eq (Py A B Y) (Fplus (Py A B Y) (Fmult r (Fminus (Py A B V) (Py A B U))))
+++++
unfold on_parallel_d in H.
-----
Theorem elim_py_on_parallel_d_right : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A B Y = Py A B W + r * (Py A B V - Py A B U).
Proof.
intros.
cases_equality W Y.
subst.
unfold on_parallel_d in H.

*****
H : and (not (eq U V))\n (and (parallel Y Y U V) (eq (DSeg Y Y) (Fmult r (DSeg U V))))
r : F
A,B,U,V,Y : Point
*****
eq (Py A B Y) (Fplus (Py A B Y) (Fmult r (Fminus (Py A B V) (Py A B U))))
+++++
use H.
-----
Theorem elim_py_on_parallel_d_right : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A B Y = Py A B W + r * (Py A B V - Py A B U).
Proof.
intros.
cases_equality W Y.
subst.
unfold on_parallel_d in H.
use H.

*****
H3 : eq (DSeg Y Y) (Fmult r (DSeg U V))
H2 : parallel Y Y U V
H0 : not (eq U V)
r : F
A,B,U,V,Y : Point
*****
eq (Py A B Y) (Fplus (Py A B Y) (Fmult r (Fminus (Py A B V) (Py A B U))))
+++++
basic_simpl.
-----
Theorem elim_py_on_parallel_d_right : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A B Y = Py A B W + r * (Py A B V - Py A B U).
Proof.
intros.
cases_equality W Y.
subst.
unfold on_parallel_d in H.
use H.
basic_simpl.

*****
H3 : eq F0 (Fmult r (DSeg U V))
H2 : parallel Y Y U V
H0 : not (eq U V)
r : F
A,B,U,V,Y : Point
*****
eq (Py A B Y) (Fplus (Py A B Y) (Fmult r (Fminus (Py A B V) (Py A B U))))
+++++
symmetry in H3.
-----
Theorem elim_py_on_parallel_d_right : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A B Y = Py A B W + r * (Py A B V - Py A B U).
Proof.
intros.
cases_equality W Y.
subst.
unfold on_parallel_d in H.
use H.
basic_simpl.
symmetry in H3.

*****
H3 : eq (Fmult r (DSeg U V)) F0
H2 : parallel Y Y U V
H0 : not (eq U V)
r : F
A,B,U,V,Y : Point
*****
eq (Py A B Y) (Fplus (Py A B Y) (Fmult r (Fminus (Py A B V) (Py A B U))))
+++++
assert (r= 0).
-----
Theorem elim_py_on_parallel_d_right : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A B Y = Py A B W + r * (Py A B V - Py A B U).
Proof.
intros.
cases_equality W Y.
subst.
unfold on_parallel_d in H.
use H.
basic_simpl.
symmetry in H3.
assert (r= 0).

*****
H3 : eq (Fmult r (DSeg U V)) F0
H2 : parallel Y Y U V
H0 : not (eq U V)
r : F
A,B,U,V,Y : Point
*****
eq r F0
+++++
IsoleVar r H3.
-----
Theorem elim_py_on_parallel_d_right : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A B Y = Py A B W + r * (Py A B V - Py A B U).
Proof.
intros.
cases_equality W Y.
subst.
unfold on_parallel_d in H.
use H.
basic_simpl.
symmetry in H3.
assert (r= 0).
IsoleVar r H3.

*****
H3 : eq r (Fdiv F0 (DSeg U V))
H : not (eq (DSeg U V) F0)
H2 : parallel Y Y U V
H0 : not (eq U V)
r : F
A,B,U,V,Y : Point
*****
eq r F0
+++++
rewrite H3.
-----
Theorem elim_py_on_parallel_d_right : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A B Y = Py A B W + r * (Py A B V - Py A B U).
Proof.
intros.
cases_equality W Y.
subst.
unfold on_parallel_d in H.
use H.
basic_simpl.
symmetry in H3.
assert (r= 0).
IsoleVar r H3.
rewrite H3.

*****
H3 : eq r (Fdiv F0 (DSeg U V))
H : not (eq (DSeg U V) F0)
H2 : parallel Y Y U V
H0 : not (eq U V)
r : F
A,B,U,V,Y : Point
*****
eq (Fdiv F0 (DSeg U V)) F0
+++++
field.
-----
Theorem elim_py_on_parallel_d_right : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A B Y = Py A B W + r * (Py A B V - Py A B U).
Proof.
intros.
cases_equality W Y.
subst.
unfold on_parallel_d in H.
use H.
basic_simpl.
symmetry in H3.
assert (r= 0).
IsoleVar r H3.
rewrite H3.
field.

*****
H3 : eq r (Fdiv F0 (DSeg U V))
H : not (eq (DSeg U V) F0)
H2 : parallel Y Y U V
H0 : not (eq U V)
r : F
A,B,U,V,Y : Point
*****
not (eq (DSeg U V) F0)
+++++
auto with Geom.
-----
Theorem elim_py_on_parallel_d_right : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A B Y = Py A B W + r * (Py A B V - Py A B U).
Proof.
intros.
cases_equality W Y.
subst.
unfold on_parallel_d in H.
use H.
basic_simpl.
symmetry in H3.
assert (r= 0).
IsoleVar r H3.

*****
H3 : eq (Fmult r (DSeg U V)) F0
H2 : parallel Y Y U V
H0 : not (eq U V)
r : F
A,B,U,V,Y : Point
*****
not (eq (DSeg U V) F0)
+++++
auto with Geom.
-----
Theorem elim_py_on_parallel_d_right : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A B Y = Py A B W + r * (Py A B V - Py A B U).
Proof.
intros.
cases_equality W Y.
subst.
unfold on_parallel_d in H.
use H.
basic_simpl.
symmetry in H3.
assert (r= 0).

*****
H : eq r F0
H3 : eq (Fmult r (DSeg U V)) F0
H2 : parallel Y Y U V
H0 : not (eq U V)
r : F
A,B,U,V,Y : Point
*****
eq (Py A B Y) (Fplus (Py A B Y) (Fmult r (Fminus (Py A B V) (Py A B U))))
+++++
rewrite H.
-----
Theorem elim_py_on_parallel_d_right : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A B Y = Py A B W + r * (Py A B V - Py A B U).
Proof.
intros.
cases_equality W Y.
subst.
unfold on_parallel_d in H.
use H.
basic_simpl.
symmetry in H3.
assert (r= 0).
rewrite H.

*****
H : eq r F0
H3 : eq (Fmult r (DSeg U V)) F0
H2 : parallel Y Y U V
H0 : not (eq U V)
r : F
A,B,U,V,Y : Point
*****
eq (Py A B Y) (Fplus (Py A B Y) (Fmult F0 (Fminus (Py A B V) (Py A B U))))
+++++
basic_simpl.
-----
Theorem elim_py_on_parallel_d_right : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A B Y = Py A B W + r * (Py A B V - Py A B U).
Proof.
intros.
cases_equality W Y.
subst.
unfold on_parallel_d in H.
use H.
basic_simpl.
symmetry in H3.
assert (r= 0).
rewrite H.
basic_simpl.

*****
H : eq r F0
H3 : eq (Fmult r (DSeg U V)) F0
H2 : parallel Y Y U V
H0 : not (eq U V)
r : F
A,B,U,V,Y : Point
*****
eq (Py A B Y) (Py A B Y)
+++++
auto.
-----
Theorem elim_py_on_parallel_d_right : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A B Y = Py A B W + r * (Py A B V - Py A B U).
Proof.
intros.
cases_equality W Y.

*****
H0 : not (eq W Y)
H : on_parallel_d Y W U V r
r : F
A,B,W,U,V,Y : Point
*****
eq (Py A B Y) (Fplus (Py A B W) (Fmult r (Fminus (Py A B V) (Py A B U))))
+++++
assert (parallel W Y U V).
-----
Theorem elim_py_on_parallel_d_right : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A B Y = Py A B W + r * (Py A B V - Py A B U).
Proof.
intros.
cases_equality W Y.
assert (parallel W Y U V).

*****
H0 : not (eq W Y)
H : on_parallel_d Y W U V r
r : F
A,B,W,U,V,Y : Point
*****
parallel W Y U V
+++++
unfold on_parallel_d in H.
-----
Theorem elim_py_on_parallel_d_right : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A B Y = Py A B W + r * (Py A B V - Py A B U).
Proof.
intros.
cases_equality W Y.
assert (parallel W Y U V).
unfold on_parallel_d in H.

*****
H0 : not (eq W Y)
H : and (not (eq U V))\n (and (parallel Y W U V) (eq (DSeg W Y) (Fmult r (DSeg U V))))
r : F
A,B,W,U,V,Y : Point
*****
parallel W Y U V
+++++
use H.
-----
Theorem elim_py_on_parallel_d_right : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A B Y = Py A B W + r * (Py A B V - Py A B U).
Proof.
intros.
cases_equality W Y.
assert (parallel W Y U V).
unfold on_parallel_d in H.
use H.

*****
H4 : eq (DSeg W Y) (Fmult r (DSeg U V))
H3 : parallel Y W U V
H1 : not (eq U V)
H0 : not (eq W Y)
r : F
A,B,W,U,V,Y : Point
*****
parallel W Y U V
+++++
auto with Geom.
-----
Theorem elim_py_on_parallel_d_right : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A B Y = Py A B W + r * (Py A B V - Py A B U).
Proof.
intros.
cases_equality W Y.
assert (parallel W Y U V).

*****
H1 : parallel W Y U V
H0 : not (eq W Y)
H : on_parallel_d Y W U V r
r : F
A,B,W,U,V,Y : Point
*****
eq (Py A B Y) (Fplus (Py A B W) (Fmult r (Fminus (Py A B V) (Py A B U))))
+++++
elim ( on_line_dex_spec_strong_f W Y U V H1 H0).
-----
Theorem elim_py_on_parallel_d_right : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A B Y = Py A B W + r * (Py A B V - Py A B U).
Proof.
intros.
cases_equality W Y.
assert (parallel W Y U V).
elim ( on_line_dex_spec_strong_f W Y U V H1 H0).

*****
H1 : parallel W Y U V
H0 : not (eq W Y)
H : on_parallel_d Y W U V r
r : F
A,B,W,U,V,Y : Point
*****
forall (x : Point) (_ : and (Col x W Y) (and (eq (DSeg W x) (DSeg U V)) (weak_3_parallelogram W x V U))), eq (Py A B Y) (Fplus (Py A B W) (Fmult r (Fminus (Py A B V) (Py A B U))))
+++++
intros S HS.
-----
Theorem elim_py_on_parallel_d_right : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A B Y = Py A B W + r * (Py A B V - Py A B U).
Proof.
intros.
cases_equality W Y.
assert (parallel W Y U V).
elim ( on_line_dex_spec_strong_f W Y U V H1 H0).
intros S HS.

*****
HS : and (Col S W Y)\n (and (eq (DSeg W S) (DSeg U V)) (weak_3_parallelogram W S V U))
S : Point
H1 : parallel W Y U V
H0 : not (eq W Y)
H : on_parallel_d Y W U V r
r : F
A,B,W,U,V,Y : Point
*****
eq (Py A B Y) (Fplus (Py A B W) (Fmult r (Fminus (Py A B V) (Py A B U))))
+++++
use HS.
-----
Theorem elim_py_on_parallel_d_right : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A B Y = Py A B W + r * (Py A B V - Py A B U).
Proof.
intros.
cases_equality W Y.
assert (parallel W Y U V).
elim ( on_line_dex_spec_strong_f W Y U V H1 H0).
intros S HS.
use HS.

*****
H5 : weak_3_parallelogram W S V U
H4 : eq (DSeg W S) (DSeg U V)
H2 : Col S W Y
S : Point
H1 : parallel W Y U V
H0 : not (eq W Y)
H : on_parallel_d Y W U V r
r : F
A,B,W,U,V,Y : Point
*****
eq (Py A B Y) (Fplus (Py A B W) (Fmult r (Fminus (Py A B V) (Py A B U))))
+++++
assert (Py A B Y = W ** Y / W ** S * Py A B S + Y ** S / W ** S * Py A B W).
-----
Theorem elim_py_on_parallel_d_right : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A B Y = Py A B W + r * (Py A B V - Py A B U).
Proof.
intros.
cases_equality W Y.
assert (parallel W Y U V).
elim ( on_line_dex_spec_strong_f W Y U V H1 H0).
intros S HS.
use HS.
assert (Py A B Y = W ** Y / W ** S * Py A B S + Y ** S / W ** S * Py A B W).

*****
H5 : weak_3_parallelogram W S V U
H4 : eq (DSeg W S) (DSeg U V)
H2 : Col S W Y
S : Point
H1 : parallel W Y U V
H0 : not (eq W Y)
H : on_parallel_d Y W U V r
r : F
A,B,W,U,V,Y : Point
*****
eq (Py A B Y) (Fplus (Fmult (Fdiv (DSeg W Y) (DSeg W S)) (Py A B S)) (Fmult (Fdiv (DSeg Y S) (DSeg W S)) (Py A B W)))
+++++
apply (l_28_b A B W S Y).
-----
Theorem elim_py_on_parallel_d_right : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A B Y = Py A B W + r * (Py A B V - Py A B U).
Proof.
intros.
cases_equality W Y.
assert (parallel W Y U V).
elim ( on_line_dex_spec_strong_f W Y U V H1 H0).
intros S HS.
use HS.
assert (Py A B Y = W ** Y / W ** S * Py A B S + Y ** S / W ** S * Py A B W).
apply (l_28_b A B W S Y).

*****
H5 : weak_3_parallelogram W S V U
H4 : eq (DSeg W S) (DSeg U V)
H2 : Col S W Y
S : Point
H1 : parallel W Y U V
H0 : not (eq W Y)
H : on_parallel_d Y W U V r
r : F
A,B,W,U,V,Y : Point
*****
not (eq W S)
+++++
intro.
-----
Theorem elim_py_on_parallel_d_right : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A B Y = Py A B W + r * (Py A B V - Py A B U).
Proof.
intros.
cases_equality W Y.
assert (parallel W Y U V).
elim ( on_line_dex_spec_strong_f W Y U V H1 H0).
intros S HS.
use HS.
assert (Py A B Y = W ** Y / W ** S * Py A B S + Y ** S / W ** S * Py A B W).
apply (l_28_b A B W S Y).
intro.

*****
H3 : eq W S
H5 : weak_3_parallelogram W S V U
H4 : eq (DSeg W S) (DSeg U V)
H2 : Col S W Y
S : Point
H1 : parallel W Y U V
H0 : not (eq W Y)
H : on_parallel_d Y W U V r
r : F
A,B,W,U,V,Y : Point
*****
False
+++++
subst.
-----
Theorem elim_py_on_parallel_d_right : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A B Y = Py A B W + r * (Py A B V - Py A B U).
Proof.
intros.
cases_equality W Y.
assert (parallel W Y U V).
elim ( on_line_dex_spec_strong_f W Y U V H1 H0).
intros S HS.
use HS.
assert (Py A B Y = W ** Y / W ** S * Py A B S + Y ** S / W ** S * Py A B W).
apply (l_28_b A B W S Y).
intro.
subst.

*****
H : on_parallel_d Y S U V r
H0 : not (eq S Y)
H1 : parallel S Y U V
H2 : Col S S Y
H4 : eq (DSeg S S) (DSeg U V)
H5 : weak_3_parallelogram S S V U
S : Point
r : F
A,B,U,V,Y : Point
*****
False
+++++
basic_simpl.
-----
Theorem elim_py_on_parallel_d_right : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A B Y = Py A B W + r * (Py A B V - Py A B U).
Proof.
intros.
cases_equality W Y.
assert (parallel W Y U V).
elim ( on_line_dex_spec_strong_f W Y U V H1 H0).
intros S HS.
use HS.
assert (Py A B Y = W ** Y / W ** S * Py A B S + Y ** S / W ** S * Py A B W).
apply (l_28_b A B W S Y).
intro.
subst.
basic_simpl.

*****
H : on_parallel_d Y S U V r
H0 : not (eq S Y)
H1 : parallel S Y U V
H2 : Col S S Y
H4 : eq F0 (DSeg U V)
H5 : weak_3_parallelogram S S V U
S : Point
r : F
A,B,U,V,Y : Point
*****
False
+++++
assert (U=V).
-----
Theorem elim_py_on_parallel_d_right : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A B Y = Py A B W + r * (Py A B V - Py A B U).
Proof.
intros.
cases_equality W Y.
assert (parallel W Y U V).
elim ( on_line_dex_spec_strong_f W Y U V H1 H0).
intros S HS.
use HS.
assert (Py A B Y = W ** Y / W ** S * Py A B S + Y ** S / W ** S * Py A B W).
apply (l_28_b A B W S Y).
intro.
subst.
basic_simpl.
assert (U=V).

*****
H : on_parallel_d Y S U V r
H0 : not (eq S Y)
H1 : parallel S Y U V
H2 : Col S S Y
H4 : eq F0 (DSeg U V)
H5 : weak_3_parallelogram S S V U
S : Point
r : F
A,B,U,V,Y : Point
*****
eq U V
+++++
auto with Geom.
-----
Theorem elim_py_on_parallel_d_right : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A B Y = Py A B W + r * (Py A B V - Py A B U).
Proof.
intros.
cases_equality W Y.
assert (parallel W Y U V).
elim ( on_line_dex_spec_strong_f W Y U V H1 H0).
intros S HS.
use HS.
assert (Py A B Y = W ** Y / W ** S * Py A B S + Y ** S / W ** S * Py A B W).
apply (l_28_b A B W S Y).
intro.
subst.
basic_simpl.
assert (U=V).

*****
H3 : eq U V
H : on_parallel_d Y S U V r
H0 : not (eq S Y)
H1 : parallel S Y U V
H2 : Col S S Y
H4 : eq F0 (DSeg U V)
H5 : weak_3_parallelogram S S V U
S : Point
r : F
A,B,U,V,Y : Point
*****
False
+++++
idtac.
-----
Theorem elim_py_on_parallel_d_right : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A B Y = Py A B W + r * (Py A B V - Py A B U).
Proof.
intros.
cases_equality W Y.
assert (parallel W Y U V).
elim ( on_line_dex_spec_strong_f W Y U V H1 H0).
intros S HS.
use HS.
assert (Py A B Y = W ** Y / W ** S * Py A B S + Y ** S / W ** S * Py A B W).
apply (l_28_b A B W S Y).
intro.
subst.
basic_simpl.
assert (U=V).
idtac.

*****
H3 : eq U V
H : on_parallel_d Y S U V r
H0 : not (eq S Y)
H1 : parallel S Y U V
H2 : Col S S Y
H4 : eq F0 (DSeg U V)
H5 : weak_3_parallelogram S S V U
S : Point
r : F
A,B,U,V,Y : Point
*****
False
+++++
subst.
-----
Theorem elim_py_on_parallel_d_right : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A B Y = Py A B W + r * (Py A B V - Py A B U).
Proof.
intros.
cases_equality W Y.
assert (parallel W Y U V).
elim ( on_line_dex_spec_strong_f W Y U V H1 H0).
intros S HS.
use HS.
assert (Py A B Y = W ** Y / W ** S * Py A B S + Y ** S / W ** S * Py A B W).
apply (l_28_b A B W S Y).
intro.
subst.
basic_simpl.
assert (U=V).
idtac.
subst.

*****
H : on_parallel_d Y S V V r
H0 : not (eq S Y)
H1 : parallel S Y V V
H2 : Col S S Y
H5 : weak_3_parallelogram S S V V
H4 : eq F0 (DSeg V V)
S : Point
r : F
A,B,V,Y : Point
*****
False
+++++
unfold on_parallel_d in H.
-----
Theorem elim_py_on_parallel_d_right : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A B Y = Py A B W + r * (Py A B V - Py A B U).
Proof.
intros.
cases_equality W Y.
assert (parallel W Y U V).
elim ( on_line_dex_spec_strong_f W Y U V H1 H0).
intros S HS.
use HS.
assert (Py A B Y = W ** Y / W ** S * Py A B S + Y ** S / W ** S * Py A B W).
apply (l_28_b A B W S Y).
intro.
subst.
basic_simpl.
assert (U=V).
idtac.
subst.
unfold on_parallel_d in H.

*****
H : and (not (eq V V))\n (and (parallel Y S V V) (eq (DSeg S Y) (Fmult r (DSeg V V))))
H0 : not (eq S Y)
H1 : parallel S Y V V
H2 : Col S S Y
H5 : weak_3_parallelogram S S V V
H4 : eq F0 (DSeg V V)
S : Point
r : F
A,B,V,Y : Point
*****
False
+++++
intuition.
-----
Theorem elim_py_on_parallel_d_right : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A B Y = Py A B W + r * (Py A B V - Py A B U).
Proof.
intros.
cases_equality W Y.
assert (parallel W Y U V).
elim ( on_line_dex_spec_strong_f W Y U V H1 H0).
intros S HS.
use HS.
assert (Py A B Y = W ** Y / W ** S * Py A B S + Y ** S / W ** S * Py A B W).
apply (l_28_b A B W S Y).

*****
H5 : weak_3_parallelogram W S V U
H4 : eq (DSeg W S) (DSeg U V)
H2 : Col S W Y
S : Point
H1 : parallel W Y U V
H0 : not (eq W Y)
H : on_parallel_d Y W U V r
r : F
A,B,W,U,V,Y : Point
*****
Col Y W S
+++++
auto with Geom.
-----
Theorem elim_py_on_parallel_d_right : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A B Y = Py A B W + r * (Py A B V - Py A B U).
Proof.
intros.
cases_equality W Y.
assert (parallel W Y U V).
elim ( on_line_dex_spec_strong_f W Y U V H1 H0).
intros S HS.
use HS.
assert (Py A B Y = W ** Y / W ** S * Py A B S + Y ** S / W ** S * Py A B W).

*****
H3 : eq (Py A B Y)\n (Fplus (Fmult (Fdiv (DSeg W Y) (DSeg W S)) (Py A B S))\n (Fmult (Fdiv (DSeg Y S) (DSeg W S)) (Py A B W)))
H5 : weak_3_parallelogram W S V U
H4 : eq (DSeg W S) (DSeg U V)
H2 : Col S W Y
S : Point
H1 : parallel W Y U V
H0 : not (eq W Y)
H : on_parallel_d Y W U V r
r : F
A,B,W,U,V,Y : Point
*****
eq (Py A B Y) (Fplus (Py A B W) (Fmult r (Fminus (Py A B V) (Py A B U))))
+++++
unfold on_parallel_d in H.
-----
Theorem elim_py_on_parallel_d_right : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A B Y = Py A B W + r * (Py A B V - Py A B U).
Proof.
intros.
cases_equality W Y.
assert (parallel W Y U V).
elim ( on_line_dex_spec_strong_f W Y U V H1 H0).
intros S HS.
use HS.
assert (Py A B Y = W ** Y / W ** S * Py A B S + Y ** S / W ** S * Py A B W).
unfold on_parallel_d in H.

*****
H3 : eq (Py A B Y)\n (Fplus (Fmult (Fdiv (DSeg W Y) (DSeg W S)) (Py A B S))\n (Fmult (Fdiv (DSeg Y S) (DSeg W S)) (Py A B W)))
H5 : weak_3_parallelogram W S V U
H4 : eq (DSeg W S) (DSeg U V)
H2 : Col S W Y
S : Point
H1 : parallel W Y U V
H0 : not (eq W Y)
H : and (not (eq U V))\n (and (parallel Y W U V) (eq (DSeg W Y) (Fmult r (DSeg U V))))
r : F
A,B,W,U,V,Y : Point
*****
eq (Py A B Y) (Fplus (Py A B W) (Fmult r (Fminus (Py A B V) (Py A B U))))
+++++
use H.
-----
Theorem elim_py_on_parallel_d_right : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A B Y = Py A B W + r * (Py A B V - Py A B U).
Proof.
intros.
cases_equality W Y.
assert (parallel W Y U V).
elim ( on_line_dex_spec_strong_f W Y U V H1 H0).
intros S HS.
use HS.
assert (Py A B Y = W ** Y / W ** S * Py A B S + Y ** S / W ** S * Py A B W).
unfold on_parallel_d in H.
use H.

*****
H9 : eq (DSeg W Y) (Fmult r (DSeg U V))
H8 : parallel Y W U V
H6 : not (eq U V)
H3 : eq (Py A B Y)\n (Fplus (Fmult (Fdiv (DSeg W Y) (DSeg W S)) (Py A B S))\n (Fmult (Fdiv (DSeg Y S) (DSeg W S)) (Py A B W)))
H5 : weak_3_parallelogram W S V U
H4 : eq (DSeg W S) (DSeg U V)
H2 : Col S W Y
S : Point
H1 : parallel W Y U V
H0 : not (eq W Y)
r : F
A,B,W,U,V,Y : Point
*****
eq (Py A B Y) (Fplus (Py A B W) (Fmult r (Fminus (Py A B V) (Py A B U))))
+++++
assert (W ** Y / W ** S = r).
-----
Theorem elim_py_on_parallel_d_right : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A B Y = Py A B W + r * (Py A B V - Py A B U).
Proof.
intros.
cases_equality W Y.
assert (parallel W Y U V).
elim ( on_line_dex_spec_strong_f W Y U V H1 H0).
intros S HS.
use HS.
assert (Py A B Y = W ** Y / W ** S * Py A B S + Y ** S / W ** S * Py A B W).
unfold on_parallel_d in H.
use H.
assert (W ** Y / W ** S = r).

*****
H9 : eq (DSeg W Y) (Fmult r (DSeg U V))
H8 : parallel Y W U V
H6 : not (eq U V)
H3 : eq (Py A B Y)\n (Fplus (Fmult (Fdiv (DSeg W Y) (DSeg W S)) (Py A B S))\n (Fmult (Fdiv (DSeg Y S) (DSeg W S)) (Py A B W)))
H5 : weak_3_parallelogram W S V U
H4 : eq (DSeg W S) (DSeg U V)
H2 : Col S W Y
S : Point
H1 : parallel W Y U V
H0 : not (eq W Y)
r : F
A,B,W,U,V,Y : Point
*****
eq (Fdiv (DSeg W Y) (DSeg W S)) r
+++++
rewrite H9.
-----
Theorem elim_py_on_parallel_d_right : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A B Y = Py A B W + r * (Py A B V - Py A B U).
Proof.
intros.
cases_equality W Y.
assert (parallel W Y U V).
elim ( on_line_dex_spec_strong_f W Y U V H1 H0).
intros S HS.
use HS.
assert (Py A B Y = W ** Y / W ** S * Py A B S + Y ** S / W ** S * Py A B W).
unfold on_parallel_d in H.
use H.
assert (W ** Y / W ** S = r).
rewrite H9.

*****
H9 : eq (DSeg W Y) (Fmult r (DSeg U V))
H8 : parallel Y W U V
H6 : not (eq U V)
H3 : eq (Py A B Y)\n (Fplus (Fmult (Fdiv (DSeg W Y) (DSeg W S)) (Py A B S))\n (Fmult (Fdiv (DSeg Y S) (DSeg W S)) (Py A B W)))
H5 : weak_3_parallelogram W S V U
H4 : eq (DSeg W S) (DSeg U V)
H2 : Col S W Y
S : Point
H1 : parallel W Y U V
H0 : not (eq W Y)
r : F
A,B,W,U,V,Y : Point
*****
eq (Fdiv (Fmult r (DSeg U V)) (DSeg W S)) r
+++++
rewrite H4.
-----
Theorem elim_py_on_parallel_d_right : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A B Y = Py A B W + r * (Py A B V - Py A B U).
Proof.
intros.
cases_equality W Y.
assert (parallel W Y U V).
elim ( on_line_dex_spec_strong_f W Y U V H1 H0).
intros S HS.
use HS.
assert (Py A B Y = W ** Y / W ** S * Py A B S + Y ** S / W ** S * Py A B W).
unfold on_parallel_d in H.
use H.
assert (W ** Y / W ** S = r).
rewrite H9.
rewrite H4.

*****
H9 : eq (DSeg W Y) (Fmult r (DSeg U V))
H8 : parallel Y W U V
H6 : not (eq U V)
H3 : eq (Py A B Y)\n (Fplus (Fmult (Fdiv (DSeg W Y) (DSeg W S)) (Py A B S))\n (Fmult (Fdiv (DSeg Y S) (DSeg W S)) (Py A B W)))
H5 : weak_3_parallelogram W S V U
H4 : eq (DSeg W S) (DSeg U V)
H2 : Col S W Y
S : Point
H1 : parallel W Y U V
H0 : not (eq W Y)
r : F
A,B,W,U,V,Y : Point
*****
eq (Fdiv (Fmult r (DSeg U V)) (DSeg U V)) r
+++++
field.
-----
Theorem elim_py_on_parallel_d_right : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A B Y = Py A B W + r * (Py A B V - Py A B U).
Proof.
intros.
cases_equality W Y.
assert (parallel W Y U V).
elim ( on_line_dex_spec_strong_f W Y U V H1 H0).
intros S HS.
use HS.
assert (Py A B Y = W ** Y / W ** S * Py A B S + Y ** S / W ** S * Py A B W).
unfold on_parallel_d in H.
use H.
assert (W ** Y / W ** S = r).
rewrite H9.
rewrite H4.
field.

*****
H9 : eq (DSeg W Y) (Fmult r (DSeg U V))
H8 : parallel Y W U V
H6 : not (eq U V)
H3 : eq (Py A B Y)\n (Fplus (Fmult (Fdiv (DSeg W Y) (DSeg W S)) (Py A B S))\n (Fmult (Fdiv (DSeg Y S) (DSeg W S)) (Py A B W)))
H5 : weak_3_parallelogram W S V U
H4 : eq (DSeg W S) (DSeg U V)
H2 : Col S W Y
S : Point
H1 : parallel W Y U V
H0 : not (eq W Y)
r : F
A,B,W,U,V,Y : Point
*****
not (eq (DSeg U V) F0)
+++++
auto with Geom.
-----
Theorem elim_py_on_parallel_d_right : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A B Y = Py A B W + r * (Py A B V - Py A B U).
Proof.
intros.
cases_equality W Y.
assert (parallel W Y U V).
elim ( on_line_dex_spec_strong_f W Y U V H1 H0).
intros S HS.
use HS.
assert (Py A B Y = W ** Y / W ** S * Py A B S + Y ** S / W ** S * Py A B W).
unfold on_parallel_d in H.
use H.
assert (W ** Y / W ** S = r).

*****
H : eq (Fdiv (DSeg W Y) (DSeg W S)) r
H9 : eq (DSeg W Y) (Fmult r (DSeg U V))
H8 : parallel Y W U V
H6 : not (eq U V)
H3 : eq (Py A B Y)\n (Fplus (Fmult (Fdiv (DSeg W Y) (DSeg W S)) (Py A B S))\n (Fmult (Fdiv (DSeg Y S) (DSeg W S)) (Py A B W)))
H5 : weak_3_parallelogram W S V U
H4 : eq (DSeg W S) (DSeg U V)
H2 : Col S W Y
S : Point
H1 : parallel W Y U V
H0 : not (eq W Y)
r : F
A,B,W,U,V,Y : Point
*****
eq (Py A B Y) (Fplus (Py A B W) (Fmult r (Fminus (Py A B V) (Py A B U))))
+++++
rewrite H in H3.
-----
Theorem elim_py_on_parallel_d_right : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A B Y = Py A B W + r * (Py A B V - Py A B U).
Proof.
intros.
cases_equality W Y.
assert (parallel W Y U V).
elim ( on_line_dex_spec_strong_f W Y U V H1 H0).
intros S HS.
use HS.
assert (Py A B Y = W ** Y / W ** S * Py A B S + Y ** S / W ** S * Py A B W).
unfold on_parallel_d in H.
use H.
assert (W ** Y / W ** S = r).
rewrite H in H3.

*****
H : eq (Fdiv (DSeg W Y) (DSeg W S)) r
H9 : eq (DSeg W Y) (Fmult r (DSeg U V))
H8 : parallel Y W U V
H6 : not (eq U V)
H3 : eq (Py A B Y)\n (Fplus (Fmult r (Py A B S))\n (Fmult (Fdiv (DSeg Y S) (DSeg W S)) (Py A B W)))
H5 : weak_3_parallelogram W S V U
H4 : eq (DSeg W S) (DSeg U V)
H2 : Col S W Y
S : Point
H1 : parallel W Y U V
H0 : not (eq W Y)
r : F
A,B,W,U,V,Y : Point
*****
eq (Py A B Y) (Fplus (Py A B W) (Fmult r (Fminus (Py A B V) (Py A B U))))
+++++
assert ( Y ** S / W ** S = 1 - r).
-----
Theorem elim_py_on_parallel_d_right : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A B Y = Py A B W + r * (Py A B V - Py A B U).
Proof.
intros.
cases_equality W Y.
assert (parallel W Y U V).
elim ( on_line_dex_spec_strong_f W Y U V H1 H0).
intros S HS.
use HS.
assert (Py A B Y = W ** Y / W ** S * Py A B S + Y ** S / W ** S * Py A B W).
unfold on_parallel_d in H.
use H.
assert (W ** Y / W ** S = r).
rewrite H in H3.
assert ( Y ** S / W ** S = 1 - r).

*****
H : eq (Fdiv (DSeg W Y) (DSeg W S)) r
H9 : eq (DSeg W Y) (Fmult r (DSeg U V))
H8 : parallel Y W U V
H6 : not (eq U V)
H3 : eq (Py A B Y)\n (Fplus (Fmult r (Py A B S))\n (Fmult (Fdiv (DSeg Y S) (DSeg W S)) (Py A B W)))
H5 : weak_3_parallelogram W S V U
H4 : eq (DSeg W S) (DSeg U V)
H2 : Col S W Y
S : Point
H1 : parallel W Y U V
H0 : not (eq W Y)
r : F
A,B,W,U,V,Y : Point
*****
eq (Fdiv (DSeg Y S) (DSeg W S)) (Fminus F1 r)
+++++
replace (Y**S) with (Y**W + W**S) by auto with Geom.
-----
Theorem elim_py_on_parallel_d_right : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A B Y = Py A B W + r * (Py A B V - Py A B U).
Proof.
intros.
cases_equality W Y.
assert (parallel W Y U V).
elim ( on_line_dex_spec_strong_f W Y U V H1 H0).
intros S HS.
use HS.
assert (Py A B Y = W ** Y / W ** S * Py A B S + Y ** S / W ** S * Py A B W).
unfold on_parallel_d in H.
use H.
assert (W ** Y / W ** S = r).
rewrite H in H3.
assert ( Y ** S / W ** S = 1 - r).
replace (Y**S) with (Y**W + W**S) by auto with Geom.

*****
H : eq (Fdiv (DSeg W Y) (DSeg W S)) r
H9 : eq (DSeg W Y) (Fmult r (DSeg U V))
H8 : parallel Y W U V
H6 : not (eq U V)
H3 : eq (Py A B Y)\n (Fplus (Fmult r (Py A B S))\n (Fmult (Fdiv (DSeg Y S) (DSeg W S)) (Py A B W)))
H5 : weak_3_parallelogram W S V U
H4 : eq (DSeg W S) (DSeg U V)
H2 : Col S W Y
S : Point
H1 : parallel W Y U V
H0 : not (eq W Y)
r : F
A,B,W,U,V,Y : Point
*****
eq (Fdiv (Fplus (DSeg Y W) (DSeg W S)) (DSeg W S)) (Fminus F1 r)
+++++
uniformize_dir_seg.
-----
Theorem elim_py_on_parallel_d_right : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A B Y = Py A B W + r * (Py A B V - Py A B U).
Proof.
intros.
cases_equality W Y.
assert (parallel W Y U V).
elim ( on_line_dex_spec_strong_f W Y U V H1 H0).
intros S HS.
use HS.
assert (Py A B Y = W ** Y / W ** S * Py A B S + Y ** S / W ** S * Py A B W).
unfold on_parallel_d in H.
use H.
assert (W ** Y / W ** S = r).
rewrite H in H3.
assert ( Y ** S / W ** S = 1 - r).
replace (Y**S) with (Y**W + W**S) by auto with Geom.
uniformize_dir_seg.

*****
H : eq (Fdiv (DSeg W Y) (DSeg W S)) r
H9 : eq (DSeg W Y) (Fmult r (DSeg U V))
H3 : eq (Py A B Y)\n (Fplus (Fmult r (Py A B S))\n (Fmult (Fdiv (DSeg Y S) (DSeg W S)) (Py A B W)))
H4 : eq (DSeg W S) (DSeg U V)
H8 : parallel Y W U V
H6 : not (eq U V)
H5 : weak_3_parallelogram W S V U
H2 : Col S W Y
S : Point
H1 : parallel W Y U V
H0 : not (eq W Y)
r : F
A,B,W,U,V,Y : Point
*****
eq (Fdiv (Fplus (Fopp (DSeg W Y)) (DSeg W S)) (DSeg W S)) (Fminus F1 r)
+++++
rewrite H9.
-----
Theorem elim_py_on_parallel_d_right : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A B Y = Py A B W + r * (Py A B V - Py A B U).
Proof.
intros.
cases_equality W Y.
assert (parallel W Y U V).
elim ( on_line_dex_spec_strong_f W Y U V H1 H0).
intros S HS.
use HS.
assert (Py A B Y = W ** Y / W ** S * Py A B S + Y ** S / W ** S * Py A B W).
unfold on_parallel_d in H.
use H.
assert (W ** Y / W ** S = r).
rewrite H in H3.
assert ( Y ** S / W ** S = 1 - r).
replace (Y**S) with (Y**W + W**S) by auto with Geom.
uniformize_dir_seg.
rewrite H9.

*****
H : eq (Fdiv (DSeg W Y) (DSeg W S)) r
H9 : eq (DSeg W Y) (Fmult r (DSeg U V))
H3 : eq (Py A B Y)\n (Fplus (Fmult r (Py A B S))\n (Fmult (Fdiv (DSeg Y S) (DSeg W S)) (Py A B W)))
H4 : eq (DSeg W S) (DSeg U V)
H8 : parallel Y W U V
H6 : not (eq U V)
H5 : weak_3_parallelogram W S V U
H2 : Col S W Y
S : Point
H1 : parallel W Y U V
H0 : not (eq W Y)
r : F
A,B,W,U,V,Y : Point
*****
eq (Fdiv (Fplus (Fopp (Fmult r (DSeg U V))) (DSeg W S)) (DSeg W S)) (Fminus F1 r)
+++++
rewrite H4.
-----
Theorem elim_py_on_parallel_d_right : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A B Y = Py A B W + r * (Py A B V - Py A B U).
Proof.
intros.
cases_equality W Y.
assert (parallel W Y U V).
elim ( on_line_dex_spec_strong_f W Y U V H1 H0).
intros S HS.
use HS.
assert (Py A B Y = W ** Y / W ** S * Py A B S + Y ** S / W ** S * Py A B W).
unfold on_parallel_d in H.
use H.
assert (W ** Y / W ** S = r).
rewrite H in H3.
assert ( Y ** S / W ** S = 1 - r).
replace (Y**S) with (Y**W + W**S) by auto with Geom.
uniformize_dir_seg.
rewrite H9.
rewrite H4.

*****
H : eq (Fdiv (DSeg W Y) (DSeg W S)) r
H9 : eq (DSeg W Y) (Fmult r (DSeg U V))
H3 : eq (Py A B Y)\n (Fplus (Fmult r (Py A B S))\n (Fmult (Fdiv (DSeg Y S) (DSeg W S)) (Py A B W)))
H4 : eq (DSeg W S) (DSeg U V)
H8 : parallel Y W U V
H6 : not (eq U V)
H5 : weak_3_parallelogram W S V U
H2 : Col S W Y
S : Point
H1 : parallel W Y U V
H0 : not (eq W Y)
r : F
A,B,W,U,V,Y : Point
*****
eq (Fdiv (Fplus (Fopp (Fmult r (DSeg U V))) (DSeg U V)) (DSeg U V)) (Fminus F1 r)
+++++
field.
-----
Theorem elim_py_on_parallel_d_right : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A B Y = Py A B W + r * (Py A B V - Py A B U).
Proof.
intros.
cases_equality W Y.
assert (parallel W Y U V).
elim ( on_line_dex_spec_strong_f W Y U V H1 H0).
intros S HS.
use HS.
assert (Py A B Y = W ** Y / W ** S * Py A B S + Y ** S / W ** S * Py A B W).
unfold on_parallel_d in H.
use H.
assert (W ** Y / W ** S = r).
rewrite H in H3.
assert ( Y ** S / W ** S = 1 - r).
replace (Y**S) with (Y**W + W**S) by auto with Geom.
uniformize_dir_seg.
rewrite H9.
rewrite H4.
field.

*****
H : eq (Fdiv (DSeg W Y) (DSeg W S)) r
H9 : eq (DSeg W Y) (Fmult r (DSeg U V))
H3 : eq (Py A B Y)\n (Fplus (Fmult r (Py A B S))\n (Fmult (Fdiv (DSeg Y S) (DSeg W S)) (Py A B W)))
H4 : eq (DSeg W S) (DSeg U V)
H8 : parallel Y W U V
H6 : not (eq U V)
H5 : weak_3_parallelogram W S V U
H2 : Col S W Y
S : Point
H1 : parallel W Y U V
H0 : not (eq W Y)
r : F
A,B,W,U,V,Y : Point
*****
not (eq (DSeg U V) F0)
+++++
auto with Geom.
-----
Theorem elim_py_on_parallel_d_right : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A B Y = Py A B W + r * (Py A B V - Py A B U).
Proof.
intros.
cases_equality W Y.
assert (parallel W Y U V).
elim ( on_line_dex_spec_strong_f W Y U V H1 H0).
intros S HS.
use HS.
assert (Py A B Y = W ** Y / W ** S * Py A B S + Y ** S / W ** S * Py A B W).
unfold on_parallel_d in H.
use H.
assert (W ** Y / W ** S = r).
rewrite H in H3.
assert ( Y ** S / W ** S = 1 - r).

*****
H7 : eq (Fdiv (DSeg Y S) (DSeg W S)) (Fminus F1 r)
H : eq (Fdiv (DSeg W Y) (DSeg W S)) r
H9 : eq (DSeg W Y) (Fmult r (DSeg U V))
H8 : parallel Y W U V
H6 : not (eq U V)
H3 : eq (Py A B Y)\n (Fplus (Fmult r (Py A B S))\n (Fmult (Fdiv (DSeg Y S) (DSeg W S)) (Py A B W)))
H5 : weak_3_parallelogram W S V U
H4 : eq (DSeg W S) (DSeg U V)
H2 : Col S W Y
S : Point
H1 : parallel W Y U V
H0 : not (eq W Y)
r : F
A,B,W,U,V,Y : Point
*****
eq (Py A B Y) (Fplus (Py A B W) (Fmult r (Fminus (Py A B V) (Py A B U))))
+++++
rewrite H7 in H3.
-----
Theorem elim_py_on_parallel_d_right : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A B Y = Py A B W + r * (Py A B V - Py A B U).
Proof.
intros.
cases_equality W Y.
assert (parallel W Y U V).
elim ( on_line_dex_spec_strong_f W Y U V H1 H0).
intros S HS.
use HS.
assert (Py A B Y = W ** Y / W ** S * Py A B S + Y ** S / W ** S * Py A B W).
unfold on_parallel_d in H.
use H.
assert (W ** Y / W ** S = r).
rewrite H in H3.
assert ( Y ** S / W ** S = 1 - r).
rewrite H7 in H3.

*****
H7 : eq (Fdiv (DSeg Y S) (DSeg W S)) (Fminus F1 r)
H : eq (Fdiv (DSeg W Y) (DSeg W S)) r
H9 : eq (DSeg W Y) (Fmult r (DSeg U V))
H8 : parallel Y W U V
H6 : not (eq U V)
H3 : eq (Py A B Y)\n (Fplus (Fmult r (Py A B S)) (Fmult (Fminus F1 r) (Py A B W)))
H5 : weak_3_parallelogram W S V U
H4 : eq (DSeg W S) (DSeg U V)
H2 : Col S W Y
S : Point
H1 : parallel W Y U V
H0 : not (eq W Y)
r : F
A,B,W,U,V,Y : Point
*****
eq (Py A B Y) (Fplus (Py A B W) (Fmult r (Fminus (Py A B V) (Py A B U))))
+++++
assert (weak_3_parallelogram U V S W).
-----
Theorem elim_py_on_parallel_d_right : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A B Y = Py A B W + r * (Py A B V - Py A B U).
Proof.
intros.
cases_equality W Y.
assert (parallel W Y U V).
elim ( on_line_dex_spec_strong_f W Y U V H1 H0).
intros S HS.
use HS.
assert (Py A B Y = W ** Y / W ** S * Py A B S + Y ** S / W ** S * Py A B W).
unfold on_parallel_d in H.
use H.
assert (W ** Y / W ** S = r).
rewrite H in H3.
assert ( Y ** S / W ** S = 1 - r).
rewrite H7 in H3.
assert (weak_3_parallelogram U V S W).

*****
H7 : eq (Fdiv (DSeg Y S) (DSeg W S)) (Fminus F1 r)
H : eq (Fdiv (DSeg W Y) (DSeg W S)) r
H9 : eq (DSeg W Y) (Fmult r (DSeg U V))
H8 : parallel Y W U V
H6 : not (eq U V)
H3 : eq (Py A B Y)\n (Fplus (Fmult r (Py A B S)) (Fmult (Fminus F1 r) (Py A B W)))
H5 : weak_3_parallelogram W S V U
H4 : eq (DSeg W S) (DSeg U V)
H2 : Col S W Y
S : Point
H1 : parallel W Y U V
H0 : not (eq W Y)
r : F
A,B,W,U,V,Y : Point
*****
weak_3_parallelogram U V S W
+++++
auto with Geom.
-----
Theorem elim_py_on_parallel_d_right : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A B Y = Py A B W + r * (Py A B V - Py A B U).
Proof.
intros.
cases_equality W Y.
assert (parallel W Y U V).
elim ( on_line_dex_spec_strong_f W Y U V H1 H0).
intros S HS.
use HS.
assert (Py A B Y = W ** Y / W ** S * Py A B S + Y ** S / W ** S * Py A B W).
unfold on_parallel_d in H.
use H.
assert (W ** Y / W ** S = r).
rewrite H in H3.
assert ( Y ** S / W ** S = 1 - r).
rewrite H7 in H3.
assert (weak_3_parallelogram U V S W).

*****
H10 : weak_3_parallelogram U V S W
H7 : eq (Fdiv (DSeg Y S) (DSeg W S)) (Fminus F1 r)
H : eq (Fdiv (DSeg W Y) (DSeg W S)) r
H9 : eq (DSeg W Y) (Fmult r (DSeg U V))
H8 : parallel Y W U V
H6 : not (eq U V)
H3 : eq (Py A B Y)\n (Fplus (Fmult r (Py A B S)) (Fmult (Fminus F1 r) (Py A B W)))
H5 : weak_3_parallelogram W S V U
H4 : eq (DSeg W S) (DSeg U V)
H2 : Col S W Y
S : Point
H1 : parallel W Y U V
H0 : not (eq W Y)
r : F
A,B,W,U,V,Y : Point
*****
eq (Py A B Y) (Fplus (Py A B W) (Fmult r (Fminus (Py A B V) (Py A B U))))
+++++
idtac.
-----
Theorem elim_py_on_parallel_d_right : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A B Y = Py A B W + r * (Py A B V - Py A B U).
Proof.
intros.
cases_equality W Y.
assert (parallel W Y U V).
elim ( on_line_dex_spec_strong_f W Y U V H1 H0).
intros S HS.
use HS.
assert (Py A B Y = W ** Y / W ** S * Py A B S + Y ** S / W ** S * Py A B W).
unfold on_parallel_d in H.
use H.
assert (W ** Y / W ** S = r).
rewrite H in H3.
assert ( Y ** S / W ** S = 1 - r).
rewrite H7 in H3.
assert (weak_3_parallelogram U V S W).
idtac.

*****
H10 : weak_3_parallelogram U V S W
H7 : eq (Fdiv (DSeg Y S) (DSeg W S)) (Fminus F1 r)
H : eq (Fdiv (DSeg W Y) (DSeg W S)) r
H9 : eq (DSeg W Y) (Fmult r (DSeg U V))
H8 : parallel Y W U V
H6 : not (eq U V)
H3 : eq (Py A B Y)\n (Fplus (Fmult r (Py A B S)) (Fmult (Fminus F1 r) (Py A B W)))
H5 : weak_3_parallelogram W S V U
H4 : eq (DSeg W S) (DSeg U V)
H2 : Col S W Y
S : Point
H1 : parallel W Y U V
H0 : not (eq W Y)
r : F
A,B,W,U,V,Y : Point
*****
eq (Py A B Y) (Fplus (Py A B W) (Fmult r (Fminus (Py A B V) (Py A B U))))
+++++
assert (T:= l_27_a U V S W B A H10).
-----
Theorem elim_py_on_parallel_d_right : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A B Y = Py A B W + r * (Py A B V - Py A B U).
Proof.
intros.
cases_equality W Y.
assert (parallel W Y U V).
elim ( on_line_dex_spec_strong_f W Y U V H1 H0).
intros S HS.
use HS.
assert (Py A B Y = W ** Y / W ** S * Py A B S + Y ** S / W ** S * Py A B W).
unfold on_parallel_d in H.
use H.
assert (W ** Y / W ** S = r).
rewrite H in H3.
assert ( Y ** S / W ** S = 1 - r).
rewrite H7 in H3.
assert (weak_3_parallelogram U V S W).
idtac.
assert (T:= l_27_a U V S W B A H10).

*****
T : eq (Fplus (Py U B A) (Py S B A)) (Fplus (Py V B A) (Py W B A))
H10 : weak_3_parallelogram U V S W
H7 : eq (Fdiv (DSeg Y S) (DSeg W S)) (Fminus F1 r)
H : eq (Fdiv (DSeg W Y) (DSeg W S)) r
H9 : eq (DSeg W Y) (Fmult r (DSeg U V))
H8 : parallel Y W U V
H6 : not (eq U V)
H3 : eq (Py A B Y)\n (Fplus (Fmult r (Py A B S)) (Fmult (Fminus F1 r) (Py A B W)))
H5 : weak_3_parallelogram W S V U
H4 : eq (DSeg W S) (DSeg U V)
H2 : Col S W Y
S : Point
H1 : parallel W Y U V
H0 : not (eq W Y)
r : F
A,B,W,U,V,Y : Point
*****
eq (Py A B Y) (Fplus (Py A B W) (Fmult r (Fminus (Py A B V) (Py A B U))))
+++++
revert T.
-----
Theorem elim_py_on_parallel_d_right : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A B Y = Py A B W + r * (Py A B V - Py A B U).
Proof.
intros.
cases_equality W Y.
assert (parallel W Y U V).
elim ( on_line_dex_spec_strong_f W Y U V H1 H0).
intros S HS.
use HS.
assert (Py A B Y = W ** Y / W ** S * Py A B S + Y ** S / W ** S * Py A B W).
unfold on_parallel_d in H.
use H.
assert (W ** Y / W ** S = r).
rewrite H in H3.
assert ( Y ** S / W ** S = 1 - r).
rewrite H7 in H3.
assert (weak_3_parallelogram U V S W).
idtac.
assert (T:= l_27_a U V S W B A H10).
revert T.

*****
H10 : weak_3_parallelogram U V S W
H7 : eq (Fdiv (DSeg Y S) (DSeg W S)) (Fminus F1 r)
H : eq (Fdiv (DSeg W Y) (DSeg W S)) r
H9 : eq (DSeg W Y) (Fmult r (DSeg U V))
H8 : parallel Y W U V
H6 : not (eq U V)
H3 : eq (Py A B Y)\n (Fplus (Fmult r (Py A B S)) (Fmult (Fminus F1 r) (Py A B W)))
H5 : weak_3_parallelogram W S V U
H4 : eq (DSeg W S) (DSeg U V)
H2 : Col S W Y
S : Point
H1 : parallel W Y U V
H0 : not (eq W Y)
r : F
A,B,W,U,V,Y : Point
*****
forall _ : eq (Fplus (Py U B A) (Py S B A)) (Fplus (Py V B A) (Py W B A)), eq (Py A B Y) (Fplus (Py A B W) (Fmult r (Fminus (Py A B V) (Py A B U))))
+++++
revert H3.
-----
Theorem elim_py_on_parallel_d_right : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A B Y = Py A B W + r * (Py A B V - Py A B U).
Proof.
intros.
cases_equality W Y.
assert (parallel W Y U V).
elim ( on_line_dex_spec_strong_f W Y U V H1 H0).
intros S HS.
use HS.
assert (Py A B Y = W ** Y / W ** S * Py A B S + Y ** S / W ** S * Py A B W).
unfold on_parallel_d in H.
use H.
assert (W ** Y / W ** S = r).
rewrite H in H3.
assert ( Y ** S / W ** S = 1 - r).
rewrite H7 in H3.
assert (weak_3_parallelogram U V S W).
idtac.
assert (T:= l_27_a U V S W B A H10).
revert T.
revert H3.

*****
H10 : weak_3_parallelogram U V S W
H7 : eq (Fdiv (DSeg Y S) (DSeg W S)) (Fminus F1 r)
H : eq (Fdiv (DSeg W Y) (DSeg W S)) r
H9 : eq (DSeg W Y) (Fmult r (DSeg U V))
H8 : parallel Y W U V
H6 : not (eq U V)
H5 : weak_3_parallelogram W S V U
H4 : eq (DSeg W S) (DSeg U V)
H2 : Col S W Y
S : Point
H1 : parallel W Y U V
H0 : not (eq W Y)
r : F
A,B,W,U,V,Y : Point
*****
forall (_ : eq (Py A B Y) (Fplus (Fmult r (Py A B S)) (Fmult (Fminus F1 r) (Py A B W)))) (_ : eq (Fplus (Py U B A) (Py S B A)) (Fplus (Py V B A) (Py W B A))), eq (Py A B Y) (Fplus (Py A B W) (Fmult r (Fminus (Py A B V) (Py A B U))))
+++++
uniformize_pys.
-----
Theorem elim_py_on_parallel_d_right : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A B Y = Py A B W + r * (Py A B V - Py A B U).
Proof.
intros.
cases_equality W Y.
assert (parallel W Y U V).
elim ( on_line_dex_spec_strong_f W Y U V H1 H0).
intros S HS.
use HS.
assert (Py A B Y = W ** Y / W ** S * Py A B S + Y ** S / W ** S * Py A B W).
unfold on_parallel_d in H.
use H.
assert (W ** Y / W ** S = r).
rewrite H in H3.
assert ( Y ** S / W ** S = 1 - r).
rewrite H7 in H3.
assert (weak_3_parallelogram U V S W).
idtac.
assert (T:= l_27_a U V S W B A H10).
revert T.
revert H3.
uniformize_pys.

*****
H10 : weak_3_parallelogram U V S W
H7 : eq (Fdiv (DSeg Y S) (DSeg W S)) (Fminus F1 r)
H : eq (Fdiv (DSeg W Y) (DSeg W S)) r
H9 : eq (DSeg W Y) (Fmult r (DSeg U V))
H8 : parallel Y W U V
H6 : not (eq U V)
H5 : weak_3_parallelogram W S V U
H4 : eq (DSeg W S) (DSeg U V)
H2 : Col S W Y
S : Point
H1 : parallel W Y U V
H0 : not (eq W Y)
r : F
A,B,W,U,V,Y : Point
*****
forall (_ : eq (Py A B Y) (Fplus (Fmult r (Py S B A)) (Fmult (Fminus F1 r) (Py W B A)))) (_ : eq (Fplus (Py A B U) (Py S B A)) (Fplus (Py A B V) (Py W B A))), eq (Py A B Y) (Fplus (Py W B A) (Fmult r (Fminus (Py A B V) (Py A B U))))
+++++
intros.
-----
Theorem elim_py_on_parallel_d_right : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A B Y = Py A B W + r * (Py A B V - Py A B U).
Proof.
intros.
cases_equality W Y.
assert (parallel W Y U V).
elim ( on_line_dex_spec_strong_f W Y U V H1 H0).
intros S HS.
use HS.
assert (Py A B Y = W ** Y / W ** S * Py A B S + Y ** S / W ** S * Py A B W).
unfold on_parallel_d in H.
use H.
assert (W ** Y / W ** S = r).
rewrite H in H3.
assert ( Y ** S / W ** S = 1 - r).
rewrite H7 in H3.
assert (weak_3_parallelogram U V S W).
idtac.
assert (T:= l_27_a U V S W B A H10).
revert T.
revert H3.
uniformize_pys.
intros.

*****
T : eq (Fplus (Py A B U) (Py S B A)) (Fplus (Py A B V) (Py W B A))
H3 : eq (Py A B Y)\n (Fplus (Fmult r (Py S B A)) (Fmult (Fminus F1 r) (Py W B A)))
H10 : weak_3_parallelogram U V S W
H7 : eq (Fdiv (DSeg Y S) (DSeg W S)) (Fminus F1 r)
H : eq (Fdiv (DSeg W Y) (DSeg W S)) r
H9 : eq (DSeg W Y) (Fmult r (DSeg U V))
H8 : parallel Y W U V
H6 : not (eq U V)
H5 : weak_3_parallelogram W S V U
H4 : eq (DSeg W S) (DSeg U V)
H2 : Col S W Y
S : Point
H1 : parallel W Y U V
H0 : not (eq W Y)
r : F
A,B,W,U,V,Y : Point
*****
eq (Py A B Y) (Fplus (Py W B A) (Fmult r (Fminus (Py A B V) (Py A B U))))
+++++
IsoleVar (Py S B A) T.
-----
Theorem elim_py_on_parallel_d_right : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A B Y = Py A B W + r * (Py A B V - Py A B U).
Proof.
intros.
cases_equality W Y.
assert (parallel W Y U V).
elim ( on_line_dex_spec_strong_f W Y U V H1 H0).
intros S HS.
use HS.
assert (Py A B Y = W ** Y / W ** S * Py A B S + Y ** S / W ** S * Py A B W).
unfold on_parallel_d in H.
use H.
assert (W ** Y / W ** S = r).
rewrite H in H3.
assert ( Y ** S / W ** S = 1 - r).
rewrite H7 in H3.
assert (weak_3_parallelogram U V S W).
idtac.
assert (T:= l_27_a U V S W B A H10).
revert T.
revert H3.
uniformize_pys.
intros.
IsoleVar (Py S B A) T.

*****
T : eq (Py S B A) (Fminus (Fplus (Py A B V) (Py W B A)) (Py A B U))
H3 : eq (Py A B Y)\n (Fplus (Fmult r (Py S B A)) (Fmult (Fminus F1 r) (Py W B A)))
H10 : weak_3_parallelogram U V S W
H7 : eq (Fdiv (DSeg Y S) (DSeg W S)) (Fminus F1 r)
H : eq (Fdiv (DSeg W Y) (DSeg W S)) r
H9 : eq (DSeg W Y) (Fmult r (DSeg U V))
H8 : parallel Y W U V
H6 : not (eq U V)
H5 : weak_3_parallelogram W S V U
H4 : eq (DSeg W S) (DSeg U V)
H2 : Col S W Y
S : Point
H1 : parallel W Y U V
H0 : not (eq W Y)
r : F
A,B,W,U,V,Y : Point
*****
eq (Py A B Y) (Fplus (Py W B A) (Fmult r (Fminus (Py A B V) (Py A B U))))
+++++
rewrite T in H3.
-----
Theorem elim_py_on_parallel_d_right : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A B Y = Py A B W + r * (Py A B V - Py A B U).
Proof.
intros.
cases_equality W Y.
assert (parallel W Y U V).
elim ( on_line_dex_spec_strong_f W Y U V H1 H0).
intros S HS.
use HS.
assert (Py A B Y = W ** Y / W ** S * Py A B S + Y ** S / W ** S * Py A B W).
unfold on_parallel_d in H.
use H.
assert (W ** Y / W ** S = r).
rewrite H in H3.
assert ( Y ** S / W ** S = 1 - r).
rewrite H7 in H3.
assert (weak_3_parallelogram U V S W).
idtac.
assert (T:= l_27_a U V S W B A H10).
revert T.
revert H3.
uniformize_pys.
intros.
IsoleVar (Py S B A) T.
rewrite T in H3.

*****
T : eq (Py S B A) (Fminus (Fplus (Py A B V) (Py W B A)) (Py A B U))
H3 : eq (Py A B Y)\n (Fplus (Fmult r (Fminus (Fplus (Py A B V) (Py W B A)) (Py A B U)))\n (Fmult (Fminus F1 r) (Py W B A)))
H10 : weak_3_parallelogram U V S W
H7 : eq (Fdiv (DSeg Y S) (DSeg W S)) (Fminus F1 r)
H : eq (Fdiv (DSeg W Y) (DSeg W S)) r
H9 : eq (DSeg W Y) (Fmult r (DSeg U V))
H8 : parallel Y W U V
H6 : not (eq U V)
H5 : weak_3_parallelogram W S V U
H4 : eq (DSeg W S) (DSeg U V)
H2 : Col S W Y
S : Point
H1 : parallel W Y U V
H0 : not (eq W Y)
r : F
A,B,W,U,V,Y : Point
*****
eq (Py A B Y) (Fplus (Py W B A) (Fmult r (Fminus (Py A B V) (Py A B U))))
+++++
rewrite H3.
-----
Theorem elim_py_on_parallel_d_right : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A B Y = Py A B W + r * (Py A B V - Py A B U).
Proof.
intros.
cases_equality W Y.
assert (parallel W Y U V).
elim ( on_line_dex_spec_strong_f W Y U V H1 H0).
intros S HS.
use HS.
assert (Py A B Y = W ** Y / W ** S * Py A B S + Y ** S / W ** S * Py A B W).
unfold on_parallel_d in H.
use H.
assert (W ** Y / W ** S = r).
rewrite H in H3.
assert ( Y ** S / W ** S = 1 - r).
rewrite H7 in H3.
assert (weak_3_parallelogram U V S W).
idtac.
assert (T:= l_27_a U V S W B A H10).
revert T.
revert H3.
uniformize_pys.
intros.
IsoleVar (Py S B A) T.
rewrite T in H3.
rewrite H3.

*****
T : eq (Py S B A) (Fminus (Fplus (Py A B V) (Py W B A)) (Py A B U))
H3 : eq (Py A B Y)\n (Fplus (Fmult r (Fminus (Fplus (Py A B V) (Py W B A)) (Py A B U)))\n (Fmult (Fminus F1 r) (Py W B A)))
H10 : weak_3_parallelogram U V S W
H7 : eq (Fdiv (DSeg Y S) (DSeg W S)) (Fminus F1 r)
H : eq (Fdiv (DSeg W Y) (DSeg W S)) r
H9 : eq (DSeg W Y) (Fmult r (DSeg U V))
H8 : parallel Y W U V
H6 : not (eq U V)
H5 : weak_3_parallelogram W S V U
H4 : eq (DSeg W S) (DSeg U V)
H2 : Col S W Y
S : Point
H1 : parallel W Y U V
H0 : not (eq W Y)
r : F
A,B,W,U,V,Y : Point
*****
eq (Fplus (Fmult r (Fminus (Fplus (Py A B V) (Py W B A)) (Py A B U))) (Fmult (Fminus F1 r) (Py W B A))) (Fplus (Py W B A) (Fmult r (Fminus (Py A B V) (Py A B U))))
+++++
ring.
-----
Theorem elim_py_on_parallel_d_right : forall (A B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py A B Y = Py A B W + r * (Py A B V - Py A B U).
Proof.
intros.
cases_equality W Y.

*****

*****

+++++
Qed.
-----
Theorem elim_py_on_parallel_d_left_right :\n forall (B W U V Y : Point) (r : F),\n on_parallel_d Y W U V r -> \n Py Y B Y = Py W B W + r * r * Py V B V - 2 * r * r * Py V B U + r * r * Py U B U +\n2 * r * Py V B W - 2 * r * Py U B W.
-----
Theorem elim_py_on_parallel_d_left_right : forall (B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py Y B Y = Py W B W + r * r * Py V B V - 2 * r * r * Py V B U + r * r * Py U B U + 2 * r * Py V B W - 2 * r * Py U B W.

*****

*****
forall (B W U V Y : Point) (r : F) (_ : on_parallel_d Y W U V r), eq (Py Y B Y) (Fminus (Fplus (Fplus (Fminus (Fplus (Py W B W) (Fmult (Fmult r r) (Py V B V))) (Fmult (Fmult (Fmult (Fplus F1 F1) r) r) (Py V B U))) (Fmult (Fmult r r) (Py U B U))) (Fmult (Fmult (Fplus F1 F1) r) (Py V B W))) (Fmult (Fmult (Fplus F1 F1) r) (Py U B W)))
+++++
Proof.
-----
Theorem elim_py_on_parallel_d_left_right : forall (B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py Y B Y = Py W B W + r * r * Py V B V - 2 * r * r * Py V B U + r * r * Py U B U + 2 * r * Py V B W - 2 * r * Py U B W.
Proof.

*****

*****
forall (B W U V Y : Point) (r : F) (_ : on_parallel_d Y W U V r), eq (Py Y B Y) (Fminus (Fplus (Fplus (Fminus (Fplus (Py W B W) (Fmult (Fmult r r) (Py V B V))) (Fmult (Fmult (Fmult (Fplus F1 F1) r) r) (Py V B U))) (Fmult (Fmult r r) (Py U B U))) (Fmult (Fmult (Fplus F1 F1) r) (Py V B W))) (Fmult (Fmult (Fplus F1 F1) r) (Py U B W)))
+++++
intros.
-----
Theorem elim_py_on_parallel_d_left_right : forall (B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py Y B Y = Py W B W + r * r * Py V B V - 2 * r * r * Py V B U + r * r * Py U B U + 2 * r * Py V B W - 2 * r * Py U B W.
Proof.
intros.

*****
H : on_parallel_d Y W U V r
r : F
B,W,U,V,Y : Point
*****
eq (Py Y B Y) (Fminus (Fplus (Fplus (Fminus (Fplus (Py W B W) (Fmult (Fmult r r) (Py V B V))) (Fmult (Fmult (Fmult (Fplus F1 F1) r) r) (Py V B U))) (Fmult (Fmult r r) (Py U B U))) (Fmult (Fmult (Fplus F1 F1) r) (Py V B W))) (Fmult (Fmult (Fplus F1 F1) r) (Py U B W)))
+++++
rewrite (elim_py_on_parallel_d_right Y B W U V Y r H).
-----
Theorem elim_py_on_parallel_d_left_right : forall (B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py Y B Y = Py W B W + r * r * Py V B V - 2 * r * r * Py V B U + r * r * Py U B U + 2 * r * Py V B W - 2 * r * Py U B W.
Proof.
intros.
rewrite (elim_py_on_parallel_d_right Y B W U V Y r H).

*****
H : on_parallel_d Y W U V r
r : F
B,W,U,V,Y : Point
*****
eq (Fplus (Py Y B W) (Fmult r (Fminus (Py Y B V) (Py Y B U)))) (Fminus (Fplus (Fplus (Fminus (Fplus (Py W B W) (Fmult (Fmult r r) (Py V B V))) (Fmult (Fmult (Fmult (Fplus F1 F1) r) r) (Py V B U))) (Fmult (Fmult r r) (Py U B U))) (Fmult (Fmult (Fplus F1 F1) r) (Py V B W))) (Fmult (Fmult (Fplus F1 F1) r) (Py U B W)))
+++++
rewrite pyth_sym.
-----
Theorem elim_py_on_parallel_d_left_right : forall (B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py Y B Y = Py W B W + r * r * Py V B V - 2 * r * r * Py V B U + r * r * Py U B U + 2 * r * Py V B W - 2 * r * Py U B W.
Proof.
intros.
rewrite (elim_py_on_parallel_d_right Y B W U V Y r H).
rewrite pyth_sym.

*****
H : on_parallel_d Y W U V r
r : F
B,W,U,V,Y : Point
*****
eq (Fplus (Py W B Y) (Fmult r (Fminus (Py Y B V) (Py Y B U)))) (Fminus (Fplus (Fplus (Fminus (Fplus (Py W B W) (Fmult (Fmult r r) (Py V B V))) (Fmult (Fmult (Fmult (Fplus F1 F1) r) r) (Py V B U))) (Fmult (Fmult r r) (Py U B U))) (Fmult (Fmult (Fplus F1 F1) r) (Py V B W))) (Fmult (Fmult (Fplus F1 F1) r) (Py U B W)))
+++++
replace ( Py Y B V) with (Py V B Y) by (apply pyth_sym;auto).
-----
Theorem elim_py_on_parallel_d_left_right : forall (B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py Y B Y = Py W B W + r * r * Py V B V - 2 * r * r * Py V B U + r * r * Py U B U + 2 * r * Py V B W - 2 * r * Py U B W.
Proof.
intros.
rewrite (elim_py_on_parallel_d_right Y B W U V Y r H).
rewrite pyth_sym.
replace ( Py Y B V) with (Py V B Y) by (apply pyth_sym;auto).

*****
H : on_parallel_d Y W U V r
r : F
B,W,U,V,Y : Point
*****
eq (Fplus (Py W B Y) (Fmult r (Fminus (Py V B Y) (Py Y B U)))) (Fminus (Fplus (Fplus (Fminus (Fplus (Py W B W) (Fmult (Fmult r r) (Py V B V))) (Fmult (Fmult (Fmult (Fplus F1 F1) r) r) (Py V B U))) (Fmult (Fmult r r) (Py U B U))) (Fmult (Fmult (Fplus F1 F1) r) (Py V B W))) (Fmult (Fmult (Fplus F1 F1) r) (Py U B W)))
+++++
replace ( Py Y B U) with (Py U B Y) by (apply pyth_sym;auto).
-----
Theorem elim_py_on_parallel_d_left_right : forall (B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py Y B Y = Py W B W + r * r * Py V B V - 2 * r * r * Py V B U + r * r * Py U B U + 2 * r * Py V B W - 2 * r * Py U B W.
Proof.
intros.
rewrite (elim_py_on_parallel_d_right Y B W U V Y r H).
rewrite pyth_sym.
replace ( Py Y B V) with (Py V B Y) by (apply pyth_sym;auto).
replace ( Py Y B U) with (Py U B Y) by (apply pyth_sym;auto).

*****
H : on_parallel_d Y W U V r
r : F
B,W,U,V,Y : Point
*****
eq (Fplus (Py W B Y) (Fmult r (Fminus (Py V B Y) (Py U B Y)))) (Fminus (Fplus (Fplus (Fminus (Fplus (Py W B W) (Fmult (Fmult r r) (Py V B V))) (Fmult (Fmult (Fmult (Fplus F1 F1) r) r) (Py V B U))) (Fmult (Fmult r r) (Py U B U))) (Fmult (Fmult (Fplus F1 F1) r) (Py V B W))) (Fmult (Fmult (Fplus F1 F1) r) (Py U B W)))
+++++
rewrite (elim_py_on_parallel_d_right W B W U V Y r H).
-----
Theorem elim_py_on_parallel_d_left_right : forall (B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py Y B Y = Py W B W + r * r * Py V B V - 2 * r * r * Py V B U + r * r * Py U B U + 2 * r * Py V B W - 2 * r * Py U B W.
Proof.
intros.
rewrite (elim_py_on_parallel_d_right Y B W U V Y r H).
rewrite pyth_sym.
replace ( Py Y B V) with (Py V B Y) by (apply pyth_sym;auto).
replace ( Py Y B U) with (Py U B Y) by (apply pyth_sym;auto).
rewrite (elim_py_on_parallel_d_right W B W U V Y r H).

*****
H : on_parallel_d Y W U V r
r : F
B,W,U,V,Y : Point
*****
eq (Fplus (Fplus (Py W B W) (Fmult r (Fminus (Py W B V) (Py W B U)))) (Fmult r (Fminus (Py V B Y) (Py U B Y)))) (Fminus (Fplus (Fplus (Fminus (Fplus (Py W B W) (Fmult (Fmult r r) (Py V B V))) (Fmult (Fmult (Fmult (Fplus F1 F1) r) r) (Py V B U))) (Fmult (Fmult r r) (Py U B U))) (Fmult (Fmult (Fplus F1 F1) r) (Py V B W))) (Fmult (Fmult (Fplus F1 F1) r) (Py U B W)))
+++++
rewrite (elim_py_on_parallel_d_right V B W U V Y r H).
-----
Theorem elim_py_on_parallel_d_left_right : forall (B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py Y B Y = Py W B W + r * r * Py V B V - 2 * r * r * Py V B U + r * r * Py U B U + 2 * r * Py V B W - 2 * r * Py U B W.
Proof.
intros.
rewrite (elim_py_on_parallel_d_right Y B W U V Y r H).
rewrite pyth_sym.
replace ( Py Y B V) with (Py V B Y) by (apply pyth_sym;auto).
replace ( Py Y B U) with (Py U B Y) by (apply pyth_sym;auto).
rewrite (elim_py_on_parallel_d_right W B W U V Y r H).
rewrite (elim_py_on_parallel_d_right V B W U V Y r H).

*****
H : on_parallel_d Y W U V r
r : F
B,W,U,V,Y : Point
*****
eq (Fplus (Fplus (Py W B W) (Fmult r (Fminus (Py W B V) (Py W B U)))) (Fmult r (Fminus (Fplus (Py V B W) (Fmult r (Fminus (Py V B V) (Py V B U)))) (Py U B Y)))) (Fminus (Fplus (Fplus (Fminus (Fplus (Py W B W) (Fmult (Fmult r r) (Py V B V))) (Fmult (Fmult (Fmult (Fplus F1 F1) r) r) (Py V B U))) (Fmult (Fmult r r) (Py U B U))) (Fmult (Fmult (Fplus F1 F1) r) (Py V B W))) (Fmult (Fmult (Fplus F1 F1) r) (Py U B W)))
+++++
rewrite (elim_py_on_parallel_d_right U B W U V Y r H).
-----
Theorem elim_py_on_parallel_d_left_right : forall (B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py Y B Y = Py W B W + r * r * Py V B V - 2 * r * r * Py V B U + r * r * Py U B U + 2 * r * Py V B W - 2 * r * Py U B W.
Proof.
intros.
rewrite (elim_py_on_parallel_d_right Y B W U V Y r H).
rewrite pyth_sym.
replace ( Py Y B V) with (Py V B Y) by (apply pyth_sym;auto).
replace ( Py Y B U) with (Py U B Y) by (apply pyth_sym;auto).
rewrite (elim_py_on_parallel_d_right W B W U V Y r H).
rewrite (elim_py_on_parallel_d_right V B W U V Y r H).
rewrite (elim_py_on_parallel_d_right U B W U V Y r H).

*****
H : on_parallel_d Y W U V r
r : F
B,W,U,V,Y : Point
*****
eq (Fplus (Fplus (Py W B W) (Fmult r (Fminus (Py W B V) (Py W B U)))) (Fmult r (Fminus (Fplus (Py V B W) (Fmult r (Fminus (Py V B V) (Py V B U)))) (Fplus (Py U B W) (Fmult r (Fminus (Py U B V) (Py U B U))))))) (Fminus (Fplus (Fplus (Fminus (Fplus (Py W B W) (Fmult (Fmult r r) (Py V B V))) (Fmult (Fmult (Fmult (Fplus F1 F1) r) r) (Py V B U))) (Fmult (Fmult r r) (Py U B U))) (Fmult (Fmult (Fplus F1 F1) r) (Py V B W))) (Fmult (Fmult (Fplus F1 F1) r) (Py U B W)))
+++++
replace (Py W B U) with (Py U B W) by auto with Geom.
-----
Theorem elim_py_on_parallel_d_left_right : forall (B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py Y B Y = Py W B W + r * r * Py V B V - 2 * r * r * Py V B U + r * r * Py U B U + 2 * r * Py V B W - 2 * r * Py U B W.
Proof.
intros.
rewrite (elim_py_on_parallel_d_right Y B W U V Y r H).
rewrite pyth_sym.
replace ( Py Y B V) with (Py V B Y) by (apply pyth_sym;auto).
replace ( Py Y B U) with (Py U B Y) by (apply pyth_sym;auto).
rewrite (elim_py_on_parallel_d_right W B W U V Y r H).
rewrite (elim_py_on_parallel_d_right V B W U V Y r H).
rewrite (elim_py_on_parallel_d_right U B W U V Y r H).
replace (Py W B U) with (Py U B W) by auto with Geom.

*****
H : on_parallel_d Y W U V r
r : F
B,W,U,V,Y : Point
*****
eq (Fplus (Fplus (Py W B W) (Fmult r (Fminus (Py W B V) (Py U B W)))) (Fmult r (Fminus (Fplus (Py V B W) (Fmult r (Fminus (Py V B V) (Py V B U)))) (Fplus (Py U B W) (Fmult r (Fminus (Py U B V) (Py U B U))))))) (Fminus (Fplus (Fplus (Fminus (Fplus (Py W B W) (Fmult (Fmult r r) (Py V B V))) (Fmult (Fmult (Fmult (Fplus F1 F1) r) r) (Py V B U))) (Fmult (Fmult r r) (Py U B U))) (Fmult (Fmult (Fplus F1 F1) r) (Py V B W))) (Fmult (Fmult (Fplus F1 F1) r) (Py U B W)))
+++++
replace (Py W B V) with (Py V B W) by auto with Geom.
-----
Theorem elim_py_on_parallel_d_left_right : forall (B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py Y B Y = Py W B W + r * r * Py V B V - 2 * r * r * Py V B U + r * r * Py U B U + 2 * r * Py V B W - 2 * r * Py U B W.
Proof.
intros.
rewrite (elim_py_on_parallel_d_right Y B W U V Y r H).
rewrite pyth_sym.
replace ( Py Y B V) with (Py V B Y) by (apply pyth_sym;auto).
replace ( Py Y B U) with (Py U B Y) by (apply pyth_sym;auto).
rewrite (elim_py_on_parallel_d_right W B W U V Y r H).
rewrite (elim_py_on_parallel_d_right V B W U V Y r H).
rewrite (elim_py_on_parallel_d_right U B W U V Y r H).
replace (Py W B U) with (Py U B W) by auto with Geom.
replace (Py W B V) with (Py V B W) by auto with Geom.

*****
H : on_parallel_d Y W U V r
r : F
B,W,U,V,Y : Point
*****
eq (Fplus (Fplus (Py W B W) (Fmult r (Fminus (Py V B W) (Py U B W)))) (Fmult r (Fminus (Fplus (Py V B W) (Fmult r (Fminus (Py V B V) (Py V B U)))) (Fplus (Py U B W) (Fmult r (Fminus (Py U B V) (Py U B U))))))) (Fminus (Fplus (Fplus (Fminus (Fplus (Py W B W) (Fmult (Fmult r r) (Py V B V))) (Fmult (Fmult (Fmult (Fplus F1 F1) r) r) (Py V B U))) (Fmult (Fmult r r) (Py U B U))) (Fmult (Fmult (Fplus F1 F1) r) (Py V B W))) (Fmult (Fmult (Fplus F1 F1) r) (Py U B W)))
+++++
replace (Py U B V) with (Py V B U) by auto with Geom.
-----
Theorem elim_py_on_parallel_d_left_right : forall (B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py Y B Y = Py W B W + r * r * Py V B V - 2 * r * r * Py V B U + r * r * Py U B U + 2 * r * Py V B W - 2 * r * Py U B W.
Proof.
intros.
rewrite (elim_py_on_parallel_d_right Y B W U V Y r H).
rewrite pyth_sym.
replace ( Py Y B V) with (Py V B Y) by (apply pyth_sym;auto).
replace ( Py Y B U) with (Py U B Y) by (apply pyth_sym;auto).
rewrite (elim_py_on_parallel_d_right W B W U V Y r H).
rewrite (elim_py_on_parallel_d_right V B W U V Y r H).
rewrite (elim_py_on_parallel_d_right U B W U V Y r H).
replace (Py W B U) with (Py U B W) by auto with Geom.
replace (Py W B V) with (Py V B W) by auto with Geom.
replace (Py U B V) with (Py V B U) by auto with Geom.

*****
H : on_parallel_d Y W U V r
r : F
B,W,U,V,Y : Point
*****
eq (Fplus (Fplus (Py W B W) (Fmult r (Fminus (Py V B W) (Py U B W)))) (Fmult r (Fminus (Fplus (Py V B W) (Fmult r (Fminus (Py V B V) (Py V B U)))) (Fplus (Py U B W) (Fmult r (Fminus (Py V B U) (Py U B U))))))) (Fminus (Fplus (Fplus (Fminus (Fplus (Py W B W) (Fmult (Fmult r r) (Py V B V))) (Fmult (Fmult (Fmult (Fplus F1 F1) r) r) (Py V B U))) (Fmult (Fmult r r) (Py U B U))) (Fmult (Fmult (Fplus F1 F1) r) (Py V B W))) (Fmult (Fmult (Fplus F1 F1) r) (Py U B W)))
+++++
ring.
-----
Theorem elim_py_on_parallel_d_left_right : forall (B W U V Y : Point) (r : F), on_parallel_d Y W U V r -> Py Y B Y = Py W B W + r * r * Py V B V - 2 * r * r * Py V B U + r * r * Py U B U + 2 * r * Py V B W - 2 * r * Py U B W.
Proof.
intros.
rewrite (elim_py_on_parallel_d_right Y B W U V Y r H).
rewrite pyth_sym.
replace ( Py Y B V) with (Py V B Y) by (apply pyth_sym;auto).
replace ( Py Y B U) with (Py U B Y) by (apply pyth_sym;auto).
rewrite (elim_py_on_parallel_d_right W B W U V Y r H).
rewrite (elim_py_on_parallel_d_right V B W U V Y r H).
rewrite (elim_py_on_parallel_d_right U B W U V Y r H).
replace (Py W B U) with (Py U B W) by auto with Geom.
replace (Py W B V) with (Py V B W) by auto with Geom.
replace (Py U B V) with (Py V B U) by auto with Geom.
ring.

*****

*****

+++++
Qed.
-----
Theorem elim_py_on_line_d_right :\n forall (A B P Q Y : Point) (f : F),\n on_line_d Y P Q f ->\n Py A B Y = f * Py A B Q + (1 - f) * Py A B P.
-----
Theorem elim_py_on_line_d_right : forall (A B P Q Y : Point) (f : F), on_line_d Y P Q f -> Py A B Y = f * Py A B Q + (1 - f) * Py A B P.

*****

*****
forall (A B P Q Y : Point) (f : F) (_ : on_line_d Y P Q f), eq (Py A B Y) (Fplus (Fmult f (Py A B Q)) (Fmult (Fminus F1 f) (Py A B P)))
+++++
Proof.
-----
Theorem elim_py_on_line_d_right : forall (A B P Q Y : Point) (f : F), on_line_d Y P Q f -> Py A B Y = f * Py A B Q + (1 - f) * Py A B P.
Proof.

*****

*****
forall (A B P Q Y : Point) (f : F) (_ : on_line_d Y P Q f), eq (Py A B Y) (Fplus (Fmult f (Py A B Q)) (Fmult (Fminus F1 f) (Py A B P)))
+++++
intros.
-----
Theorem elim_py_on_line_d_right : forall (A B P Q Y : Point) (f : F), on_line_d Y P Q f -> Py A B Y = f * Py A B Q + (1 - f) * Py A B P.
Proof.
intros.

*****
H : on_line_d Y P Q f
f : F
A,B,P,Q,Y : Point
*****
eq (Py A B Y) (Fplus (Fmult f (Py A B Q)) (Fmult (Fminus F1 f) (Py A B P)))
+++++
apply -> on_line_d_iff_on_parallel_d in H.
-----
Theorem elim_py_on_line_d_right : forall (A B P Q Y : Point) (f : F), on_line_d Y P Q f -> Py A B Y = f * Py A B Q + (1 - f) * Py A B P.
Proof.
intros.
apply -> on_line_d_iff_on_parallel_d in H.

*****
H : on_parallel_d Y P Q P (Fminus F0 f)
f : F
A,B,P,Q,Y : Point
*****
eq (Py A B Y) (Fplus (Fmult f (Py A B Q)) (Fmult (Fminus F1 f) (Py A B P)))
+++++
rewrite (elim_py_on_parallel_d_right A B P Q P Y (0-f) H).
-----
Theorem elim_py_on_line_d_right : forall (A B P Q Y : Point) (f : F), on_line_d Y P Q f -> Py A B Y = f * Py A B Q + (1 - f) * Py A B P.
Proof.
intros.
apply -> on_line_d_iff_on_parallel_d in H.
rewrite (elim_py_on_parallel_d_right A B P Q P Y (0-f) H).

*****
H : on_parallel_d Y P Q P (Fminus F0 f)
f : F
A,B,P,Q,Y : Point
*****
eq (Fplus (Py A B P) (Fmult (Fminus F0 f) (Fminus (Py A B P) (Py A B Q)))) (Fplus (Fmult f (Py A B Q)) (Fmult (Fminus F1 f) (Py A B P)))
+++++
ring.
-----
Theorem elim_py_on_line_d_right : forall (A B P Q Y : Point) (f : F), on_line_d Y P Q f -> Py A B Y = f * Py A B Q + (1 - f) * Py A B P.
Proof.
intros.
apply -> on_line_d_iff_on_parallel_d in H.
rewrite (elim_py_on_parallel_d_right A B P Q P Y (0-f) H).
ring.

*****

*****

+++++
Qed.
-----
Theorem elim_py_on_line_d_left_right :\n forall (A P Q Y : Point) (f : F),\n on_line_d Y P Q f -> Py Y A Y = f* (f * Py Q A Q + (1 - f) * Py Q A P) +\n(1 - f) * (f * Py P A Q + (1 - f) * Py P A P).
-----
Theorem elim_py_on_line_d_left_right : forall (A P Q Y : Point) (f : F), on_line_d Y P Q f -> Py Y A Y = f* (f * Py Q A Q + (1 - f) * Py Q A P) + (1 - f) * (f * Py P A Q + (1 - f) * Py P A P).

*****

*****
forall (A P Q Y : Point) (f : F) (_ : on_line_d Y P Q f), eq (Py Y A Y) (Fplus (Fmult f (Fplus (Fmult f (Py Q A Q)) (Fmult (Fminus F1 f) (Py Q A P)))) (Fmult (Fminus F1 f) (Fplus (Fmult f (Py P A Q)) (Fmult (Fminus F1 f) (Py P A P)))))
+++++
Proof.
-----
Theorem elim_py_on_line_d_left_right : forall (A P Q Y : Point) (f : F), on_line_d Y P Q f -> Py Y A Y = f* (f * Py Q A Q + (1 - f) * Py Q A P) + (1 - f) * (f * Py P A Q + (1 - f) * Py P A P).
Proof.

*****

*****
forall (A P Q Y : Point) (f : F) (_ : on_line_d Y P Q f), eq (Py Y A Y) (Fplus (Fmult f (Fplus (Fmult f (Py Q A Q)) (Fmult (Fminus F1 f) (Py Q A P)))) (Fmult (Fminus F1 f) (Fplus (Fmult f (Py P A Q)) (Fmult (Fminus F1 f) (Py P A P)))))
+++++
intros.
-----
Theorem elim_py_on_line_d_left_right : forall (A P Q Y : Point) (f : F), on_line_d Y P Q f -> Py Y A Y = f* (f * Py Q A Q + (1 - f) * Py Q A P) + (1 - f) * (f * Py P A Q + (1 - f) * Py P A P).
Proof.
intros.

*****
H : on_line_d Y P Q f
f : F
A,P,Q,Y : Point
*****
eq (Py Y A Y) (Fplus (Fmult f (Fplus (Fmult f (Py Q A Q)) (Fmult (Fminus F1 f) (Py Q A P)))) (Fmult (Fminus F1 f) (Fplus (Fmult f (Py P A Q)) (Fmult (Fminus F1 f) (Py P A P)))))
+++++
rewrite (elim_py_on_line_d_right Y A P Q Y f H).
-----
Theorem elim_py_on_line_d_left_right : forall (A P Q Y : Point) (f : F), on_line_d Y P Q f -> Py Y A Y = f* (f * Py Q A Q + (1 - f) * Py Q A P) + (1 - f) * (f * Py P A Q + (1 - f) * Py P A P).
Proof.
intros.
rewrite (elim_py_on_line_d_right Y A P Q Y f H).

*****
H : on_line_d Y P Q f
f : F
A,P,Q,Y : Point
*****
eq (Fplus (Fmult f (Py Y A Q)) (Fmult (Fminus F1 f) (Py Y A P))) (Fplus (Fmult f (Fplus (Fmult f (Py Q A Q)) (Fmult (Fminus F1 f) (Py Q A P)))) (Fmult (Fminus F1 f) (Fplus (Fmult f (Py P A Q)) (Fmult (Fminus F1 f) (Py P A P)))))
+++++
rewrite pyth_sym.
-----
Theorem elim_py_on_line_d_left_right : forall (A P Q Y : Point) (f : F), on_line_d Y P Q f -> Py Y A Y = f* (f * Py Q A Q + (1 - f) * Py Q A P) + (1 - f) * (f * Py P A Q + (1 - f) * Py P A P).
Proof.
intros.
rewrite (elim_py_on_line_d_right Y A P Q Y f H).
rewrite pyth_sym.

*****
H : on_line_d Y P Q f
f : F
A,P,Q,Y : Point
*****
eq (Fplus (Fmult f (Py Q A Y)) (Fmult (Fminus F1 f) (Py Y A P))) (Fplus (Fmult f (Fplus (Fmult f (Py Q A Q)) (Fmult (Fminus F1 f) (Py Q A P)))) (Fmult (Fminus F1 f) (Fplus (Fmult f (Py P A Q)) (Fmult (Fminus F1 f) (Py P A P)))))
+++++
replace ( Py Y A P) with (Py P A Y) by (apply pyth_sym;auto).
-----
Theorem elim_py_on_line_d_left_right : forall (A P Q Y : Point) (f : F), on_line_d Y P Q f -> Py Y A Y = f* (f * Py Q A Q + (1 - f) * Py Q A P) + (1 - f) * (f * Py P A Q + (1 - f) * Py P A P).
Proof.
intros.
rewrite (elim_py_on_line_d_right Y A P Q Y f H).
rewrite pyth_sym.
replace ( Py Y A P) with (Py P A Y) by (apply pyth_sym;auto).

*****
H : on_line_d Y P Q f
f : F
A,P,Q,Y : Point
*****
eq (Fplus (Fmult f (Py Q A Y)) (Fmult (Fminus F1 f) (Py P A Y))) (Fplus (Fmult f (Fplus (Fmult f (Py Q A Q)) (Fmult (Fminus F1 f) (Py Q A P)))) (Fmult (Fminus F1 f) (Fplus (Fmult f (Py P A Q)) (Fmult (Fminus F1 f) (Py P A P)))))
+++++
rewrite (elim_py_on_line_d_right Q A P Q Y f H).
-----
Theorem elim_py_on_line_d_left_right : forall (A P Q Y : Point) (f : F), on_line_d Y P Q f -> Py Y A Y = f* (f * Py Q A Q + (1 - f) * Py Q A P) + (1 - f) * (f * Py P A Q + (1 - f) * Py P A P).
Proof.
intros.
rewrite (elim_py_on_line_d_right Y A P Q Y f H).
rewrite pyth_sym.
replace ( Py Y A P) with (Py P A Y) by (apply pyth_sym;auto).
rewrite (elim_py_on_line_d_right Q A P Q Y f H).

*****
H : on_line_d Y P Q f
f : F
A,P,Q,Y : Point
*****
eq (Fplus (Fmult f (Fplus (Fmult f (Py Q A Q)) (Fmult (Fminus F1 f) (Py Q A P)))) (Fmult (Fminus F1 f) (Py P A Y))) (Fplus (Fmult f (Fplus (Fmult f (Py Q A Q)) (Fmult (Fminus F1 f) (Py Q A P)))) (Fmult (Fminus F1 f) (Fplus (Fmult f (Py P A Q)) (Fmult (Fminus F1 f) (Py P A P)))))
+++++
rewrite (elim_py_on_line_d_right P A P Q Y f H).
-----
Theorem elim_py_on_line_d_left_right : forall (A P Q Y : Point) (f : F), on_line_d Y P Q f -> Py Y A Y = f* (f * Py Q A Q + (1 - f) * Py Q A P) + (1 - f) * (f * Py P A Q + (1 - f) * Py P A P).
Proof.
intros.
rewrite (elim_py_on_line_d_right Y A P Q Y f H).
rewrite pyth_sym.
replace ( Py Y A P) with (Py P A Y) by (apply pyth_sym;auto).
rewrite (elim_py_on_line_d_right Q A P Q Y f H).
rewrite (elim_py_on_line_d_right P A P Q Y f H).

*****
H : on_line_d Y P Q f
f : F
A,P,Q,Y : Point
*****
eq (Fplus (Fmult f (Fplus (Fmult f (Py Q A Q)) (Fmult (Fminus F1 f) (Py Q A P)))) (Fmult (Fminus F1 f) (Fplus (Fmult f (Py P A Q)) (Fmult (Fminus F1 f) (Py P A P))))) (Fplus (Fmult f (Fplus (Fmult f (Py Q A Q)) (Fmult (Fminus F1 f) (Py Q A P)))) (Fmult (Fminus F1 f) (Fplus (Fmult f (Py P A Q)) (Fmult (Fminus F1 f) (Py P A P)))))
+++++
auto.
-----
Theorem elim_py_on_line_d_left_right : forall (A P Q Y : Point) (f : F), on_line_d Y P Q f -> Py Y A Y = f* (f * Py Q A Q + (1 - f) * Py Q A P) + (1 - f) * (f * Py P A Q + (1 - f) * Py P A P).
Proof.
intros.
rewrite (elim_py_on_line_d_right Y A P Q Y f H).
rewrite pyth_sym.
replace ( Py Y A P) with (Py P A Y) by (apply pyth_sym;auto).
rewrite (elim_py_on_line_d_right Q A P Q Y f H).
rewrite (elim_py_on_line_d_right P A P Q Y f H).
auto.

*****

*****

+++++
Qed.
-----
Lemma elim_py_midpoint_left_right : forall A B C M : Point, \non_line_d M B C (1 / 2) ->\n       Py M A M = - (1)/(2+2) * (Py B C B - 2* Py A C A - 2 *Py A B A).
-----
Lemma elim_py_midpoint_left_right : forall A B C M : Point, on_line_d M B C (1 / 2) -> Py M A M = - (1)/(2+2) * (Py B C B - 2* Py A C A - 2 *Py A B A).

*****

*****
forall (A B C M : Point) (_ : on_line_d M B C (Fdiv F1 (Fplus F1 F1))), eq (Py M A M) (Fmult (Fdiv (Fopp F1) (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Fminus (Fminus (Py B C B) (Fmult (Fplus F1 F1) (Py A C A))) (Fmult (Fplus F1 F1) (Py A B A))))
+++++
Proof.
-----
Lemma elim_py_midpoint_left_right : forall A B C M : Point, on_line_d M B C (1 / 2) -> Py M A M = - (1)/(2+2) * (Py B C B - 2* Py A C A - 2 *Py A B A).
Proof.

*****

*****
forall (A B C M : Point) (_ : on_line_d M B C (Fdiv F1 (Fplus F1 F1))), eq (Py M A M) (Fmult (Fdiv (Fopp F1) (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Fminus (Fminus (Py B C B) (Fmult (Fplus F1 F1) (Py A C A))) (Fmult (Fplus F1 F1) (Py A B A))))
+++++
intros.
-----
Lemma elim_py_midpoint_left_right : forall A B C M : Point, on_line_d M B C (1 / 2) -> Py M A M = - (1)/(2+2) * (Py B C B - 2* Py A C A - 2 *Py A B A).
Proof.
intros.

*****
H : on_line_d M B C (Fdiv F1 (Fplus F1 F1))
A,B,C,M : Point
*****
eq (Py M A M) (Fmult (Fdiv (Fopp F1) (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Fminus (Fminus (Py B C B) (Fmult (Fplus F1 F1) (Py A C A))) (Fmult (Fplus F1 F1) (Py A B A))))
+++++
rewrite (elim_py_on_line_d_left_right A B C M (1/2)).
-----
Lemma elim_py_midpoint_left_right : forall A B C M : Point, on_line_d M B C (1 / 2) -> Py M A M = - (1)/(2+2) * (Py B C B - 2* Py A C A - 2 *Py A B A).
Proof.
intros.
rewrite (elim_py_on_line_d_left_right A B C M (1/2)).

*****
H : on_line_d M B C (Fdiv F1 (Fplus F1 F1))
A,B,C,M : Point
*****
eq (Fplus (Fmult (Fdiv F1 (Fplus F1 F1)) (Fplus (Fmult (Fdiv F1 (Fplus F1 F1)) (Py C A C)) (Fmult (Fminus F1 (Fdiv F1 (Fplus F1 F1))) (Py C A B)))) (Fmult (Fminus F1 (Fdiv F1 (Fplus F1 F1))) (Fplus (Fmult (Fdiv F1 (Fplus F1 F1)) (Py B A C)) (Fmult (Fminus F1 (Fdiv F1 (Fplus F1 F1))) (Py B A B))))) (Fmult (Fdiv (Fopp F1) (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Fminus (Fminus (Py B C B) (Fmult (Fplus F1 F1) (Py A C A))) (Fmult (Fplus F1 F1) (Py A B A))))
+++++
idtac.
-----
Lemma elim_py_midpoint_left_right : forall A B C M : Point, on_line_d M B C (1 / 2) -> Py M A M = - (1)/(2+2) * (Py B C B - 2* Py A C A - 2 *Py A B A).
Proof.
intros.
rewrite (elim_py_on_line_d_left_right A B C M (1/2)).
idtac.

*****
H : on_line_d M B C (Fdiv F1 (Fplus F1 F1))
A,B,C,M : Point
*****
eq (Fplus (Fmult (Fdiv F1 (Fplus F1 F1)) (Fplus (Fmult (Fdiv F1 (Fplus F1 F1)) (Py C A C)) (Fmult (Fminus F1 (Fdiv F1 (Fplus F1 F1))) (Py C A B)))) (Fmult (Fminus F1 (Fdiv F1 (Fplus F1 F1))) (Fplus (Fmult (Fdiv F1 (Fplus F1 F1)) (Py B A C)) (Fmult (Fminus F1 (Fdiv F1 (Fplus F1 F1))) (Py B A B))))) (Fmult (Fdiv (Fopp F1) (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Fminus (Fminus (Py B C B) (Fmult (Fplus F1 F1) (Py A C A))) (Fmult (Fplus F1 F1) (Py A B A))))
+++++
field_simplify.
-----
Lemma elim_py_midpoint_left_right : forall A B C M : Point, on_line_d M B C (1 / 2) -> Py M A M = - (1)/(2+2) * (Py B C B - 2* Py A C A - 2 *Py A B A).
Proof.
intros.
rewrite (elim_py_on_line_d_left_right A B C M (1/2)).
idtac.
field_simplify.

*****
H : on_line_d M B C (Fdiv F1 (Fplus F1 F1))
A,B,C,M : Point
*****
eq (Fdiv (Fplus (Fplus (Fplus (Py C A C) (Py C A B)) (Py B A C)) (Py B A B)) (Fmult (Fplus F1 F1) (Fplus F1 F1))) (Fdiv (Fplus (Fplus (Fopp (Py B C B)) (Fmult (Fplus F1 F1) (Py A C A))) (Fmult (Fplus F1 F1) (Py A B A))) (Fmult (Fplus F1 F1) (Fplus F1 F1)))
+++++
unfold Py.
-----
Lemma elim_py_midpoint_left_right : forall A B C M : Point, on_line_d M B C (1 / 2) -> Py M A M = - (1)/(2+2) * (Py B C B - 2* Py A C A - 2 *Py A B A).
Proof.
intros.
rewrite (elim_py_on_line_d_left_right A B C M (1/2)).
idtac.
field_simplify.
unfold Py.

*****
H : on_line_d M B C (Fdiv F1 (Fplus F1 F1))
A,B,C,M : Point
*****
eq (Fdiv (Fplus (Fplus (Fplus (Fminus (Fplus (Fmult (DSeg C A) (DSeg C A)) (Fmult (DSeg A C) (DSeg A C))) (Fmult (DSeg C C) (DSeg C C))) (Fminus (Fplus (Fmult (DSeg C A) (DSeg C A)) (Fmult (DSeg A B) (DSeg A B))) (Fmult (DSeg C B) (DSeg C B)))) (Fminus (Fplus (Fmult (DSeg B A) (DSeg B A)) (Fmult (DSeg A C) (DSeg A C))) (Fmult (DSeg B C) (DSeg B C)))) (Fminus (Fplus (Fmult (DSeg B A) (DSeg B A)) (Fmult (DSeg A B) (DSeg A B))) (Fmult (DSeg B B) (DSeg B B)))) (Fmult (Fplus F1 F1) (Fplus F1 F1))) (Fdiv (Fplus (Fplus (Fopp (Fminus (Fplus (Fmult (DSeg B C) (DSeg B C)) (Fmult (DSeg C B) (DSeg C B))) (Fmult (DSeg B B) (DSeg B B)))) (Fmult (Fplus F1 F1) (Fminus (Fplus (Fmult (DSeg A C) (DSeg A C)) (Fmult (DSeg C A) (DSeg C A))) (Fmult (DSeg A A) (DSeg A A))))) (Fmult (Fplus F1 F1) (Fminus (Fplus (Fmult (DSeg A B) (DSeg A B)) (Fmult (DSeg B A) (DSeg B A))) (Fmult (DSeg A A) (DSeg A A))))) (Fmult (Fplus F1 F1) (Fplus F1 F1)))
+++++
basic_simpl.
-----
Lemma elim_py_midpoint_left_right : forall A B C M : Point, on_line_d M B C (1 / 2) -> Py M A M = - (1)/(2+2) * (Py B C B - 2* Py A C A - 2 *Py A B A).
Proof.
intros.
rewrite (elim_py_on_line_d_left_right A B C M (1/2)).
idtac.
field_simplify.
unfold Py.
basic_simpl.

*****
H : on_line_d M B C (Fdiv F1 (Fplus F1 F1))
A,B,C,M : Point
*****
eq (Fdiv (Fplus (Fplus (Fplus (Fplus (Fmult (DSeg C A) (DSeg C A)) (Fmult (DSeg A C) (DSeg A C))) (Fminus (Fplus (Fmult (DSeg C A) (DSeg C A)) (Fmult (DSeg A B) (DSeg A B))) (Fmult (DSeg C B) (DSeg C B)))) (Fminus (Fplus (Fmult (DSeg B A) (DSeg B A)) (Fmult (DSeg A C) (DSeg A C))) (Fmult (DSeg B C) (DSeg B C)))) (Fplus (Fmult (DSeg B A) (DSeg B A)) (Fmult (DSeg A B) (DSeg A B)))) (Fmult (Fplus F1 F1) (Fplus F1 F1))) (Fdiv (Fplus (Fplus (Fopp (Fplus (Fmult (DSeg B C) (DSeg B C)) (Fmult (DSeg C B) (DSeg C B)))) (Fmult (Fplus F1 F1) (Fplus (Fmult (DSeg A C) (DSeg A C)) (Fmult (DSeg C A) (DSeg C A))))) (Fmult (Fplus F1 F1) (Fplus (Fmult (DSeg A B) (DSeg A B)) (Fmult (DSeg B A) (DSeg B A))))) (Fmult (Fplus F1 F1) (Fplus F1 F1)))
+++++
uniformize_dir_seg.
-----
Lemma elim_py_midpoint_left_right : forall A B C M : Point, on_line_d M B C (1 / 2) -> Py M A M = - (1)/(2+2) * (Py B C B - 2* Py A C A - 2 *Py A B A).
Proof.
intros.
rewrite (elim_py_on_line_d_left_right A B C M (1/2)).
idtac.
field_simplify.
unfold Py.
basic_simpl.
uniformize_dir_seg.

*****
H : on_line_d M B C (Fdiv F1 (Fplus F1 F1))
A,B,C,M : Point
*****
eq (Fdiv (Fplus (Fplus (Fplus (Fplus (Fmult (Fopp (DSeg A C)) (Fopp (DSeg A C))) (Fmult (DSeg A C) (DSeg A C))) (Fminus (Fplus (Fmult (Fopp (DSeg A C)) (Fopp (DSeg A C))) (Fmult (DSeg A B) (DSeg A B))) (Fmult (Fopp (DSeg B C)) (Fopp (DSeg B C))))) (Fminus (Fplus (Fmult (Fopp (DSeg A B)) (Fopp (DSeg A B))) (Fmult (DSeg A C) (DSeg A C))) (Fmult (DSeg B C) (DSeg B C)))) (Fplus (Fmult (Fopp (DSeg A B)) (Fopp (DSeg A B))) (Fmult (DSeg A B) (DSeg A B)))) (Fmult (Fplus F1 F1) (Fplus F1 F1))) (Fdiv (Fplus (Fplus (Fopp (Fplus (Fmult (DSeg B C) (DSeg B C)) (Fmult (Fopp (DSeg B C)) (Fopp (DSeg B C))))) (Fmult (Fplus F1 F1) (Fplus (Fmult (DSeg A C) (DSeg A C)) (Fmult (Fopp (DSeg A C)) (Fopp (DSeg A C)))))) (Fmult (Fplus F1 F1) (Fplus (Fmult (DSeg A B) (DSeg A B)) (Fmult (Fopp (DSeg A B)) (Fopp (DSeg A B)))))) (Fmult (Fplus F1 F1) (Fplus F1 F1)))
+++++
field_simplify_eq.
-----
Lemma elim_py_midpoint_left_right : forall A B C M : Point, on_line_d M B C (1 / 2) -> Py M A M = - (1)/(2+2) * (Py B C B - 2* Py A C A - 2 *Py A B A).
Proof.
intros.
rewrite (elim_py_on_line_d_left_right A B C M (1/2)).
idtac.
field_simplify.
unfold Py.
basic_simpl.
uniformize_dir_seg.
field_simplify_eq.

*****
H : on_line_d M B C (Fdiv F1 (Fplus F1 F1))
A,B,C,M : Point
*****
eq (Fminus (Fplus (Fmult (Fmult (Fmult (Fplus F1 F1) (Fplus F1 F1)) (DSeg A C)) (DSeg A C)) (Fmult (Fmult (Fmult (Fplus F1 F1) (Fplus F1 F1)) (DSeg A B)) (DSeg A B))) (Fmult (Fmult (Fplus F1 F1) (DSeg B C)) (DSeg B C))) (Fminus (Fplus (Fmult (Fmult (Fmult (Fplus F1 F1) (Fplus F1 F1)) (DSeg A C)) (DSeg A C)) (Fmult (Fmult (Fmult (Fplus F1 F1) (Fplus F1 F1)) (DSeg A B)) (DSeg A B))) (Fmult (Fmult (Fplus F1 F1) (DSeg B C)) (DSeg B C)))
+++++
auto.
-----
Lemma elim_py_midpoint_left_right : forall A B C M : Point, on_line_d M B C (1 / 2) -> Py M A M = - (1)/(2+2) * (Py B C B - 2* Py A C A - 2 *Py A B A).
Proof.
intros.
rewrite (elim_py_on_line_d_left_right A B C M (1/2)).
idtac.
field_simplify.
unfold Py.
basic_simpl.
uniformize_dir_seg.
field_simplify_eq.

*****
H : on_line_d M B C (Fdiv F1 (Fplus F1 F1))
A,B,C,M : Point
*****
not (eq (Fmult (Fplus F1 F1) (Fplus F1 F1)) F0)
+++++
solve_conds.
-----
Lemma elim_py_midpoint_left_right : forall A B C M : Point, on_line_d M B C (1 / 2) -> Py M A M = - (1)/(2+2) * (Py B C B - 2* Py A C A - 2 *Py A B A).
Proof.
intros.
rewrite (elim_py_on_line_d_left_right A B C M (1/2)).
idtac.
field_simplify.

*****
H : on_line_d M B C (Fdiv F1 (Fplus F1 F1))
A,B,C,M : Point
*****
not (eq (Fmult (Fplus F1 F1) (Fplus F1 F1)) F0)
+++++
solve_conds.
-----
Lemma elim_py_midpoint_left_right : forall A B C M : Point, on_line_d M B C (1 / 2) -> Py M A M = - (1)/(2+2) * (Py B C B - 2* Py A C A - 2 *Py A B A).
Proof.
intros.
rewrite (elim_py_on_line_d_left_right A B C M (1/2)).
idtac.
field_simplify.

*****
H : on_line_d M B C (Fdiv F1 (Fplus F1 F1))
A,B,C,M : Point
*****
not (eq (Fplus F1 F1) F0)
+++++
solve_conds.
-----
Lemma elim_py_midpoint_left_right : forall A B C M : Point, on_line_d M B C (1 / 2) -> Py M A M = - (1)/(2+2) * (Py B C B - 2* Py A C A - 2 *Py A B A).
Proof.
intros.
rewrite (elim_py_on_line_d_left_right A B C M (1/2)).

*****
H : on_line_d M B C (Fdiv F1 (Fplus F1 F1))
A,B,C,M : Point
*****
on_line_d M B C (Fdiv F1 (Fplus F1 F1))
+++++
auto .
-----
Lemma elim_py_midpoint_left_right : forall A B C M : Point, on_line_d M B C (1 / 2) -> Py M A M = - (1)/(2+2) * (Py B C B - 2* Py A C A - 2 *Py A B A).
Proof.
intros.
rewrite (elim_py_on_line_d_left_right A B C M (1/2)).

*****

*****

+++++
Qed.
-----
Theorem elim_py_on_line_right :\n forall A B P Q Y : Point,\n on_line Y P Q ->\n Py A B Y = P ** Y / P ** Q * Py A B Q + (1 - P ** Y / P ** Q) * Py A B P.
-----
Theorem elim_py_on_line_right : forall A B P Q Y : Point, on_line Y P Q -> Py A B Y = P ** Y / P ** Q * Py A B Q + (1 - P ** Y / P ** Q) * Py A B P.

*****

*****
forall (A B P Q Y : Point) (_ : on_line Y P Q), eq (Py A B Y) (Fplus (Fmult (Fdiv (DSeg P Y) (DSeg P Q)) (Py A B Q)) (Fmult (Fminus F1 (Fdiv (DSeg P Y) (DSeg P Q))) (Py A B P)))
+++++
Proof.
-----
Theorem elim_py_on_line_right : forall A B P Q Y : Point, on_line Y P Q -> Py A B Y = P ** Y / P ** Q * Py A B Q + (1 - P ** Y / P ** Q) * Py A B P.
Proof.

*****

*****
forall (A B P Q Y : Point) (_ : on_line Y P Q), eq (Py A B Y) (Fplus (Fmult (Fdiv (DSeg P Y) (DSeg P Q)) (Py A B Q)) (Fmult (Fminus F1 (Fdiv (DSeg P Y) (DSeg P Q))) (Py A B P)))
+++++
intros.
-----
Theorem elim_py_on_line_right : forall A B P Q Y : Point, on_line Y P Q -> Py A B Y = P ** Y / P ** Q * Py A B Q + (1 - P ** Y / P ** Q) * Py A B P.
Proof.
intros.

*****
H : on_line Y P Q
A,B,P,Q,Y : Point
*****
eq (Py A B Y) (Fplus (Fmult (Fdiv (DSeg P Y) (DSeg P Q)) (Py A B Q)) (Fmult (Fminus F1 (Fdiv (DSeg P Y) (DSeg P Q))) (Py A B P)))
+++++
assert (on_line_d Y P Q (P ** Y / P ** Q)).
-----
Theorem elim_py_on_line_right : forall A B P Q Y : Point, on_line Y P Q -> Py A B Y = P ** Y / P ** Q * Py A B Q + (1 - P ** Y / P ** Q) * Py A B P.
Proof.
intros.
assert (on_line_d Y P Q (P ** Y / P ** Q)).

*****
H : on_line Y P Q
A,B,P,Q,Y : Point
*****
on_line_d Y P Q (Fdiv (DSeg P Y) (DSeg P Q))
+++++
apply on_line_to_on_line_d.
-----
Theorem elim_py_on_line_right : forall A B P Q Y : Point, on_line Y P Q -> Py A B Y = P ** Y / P ** Q * Py A B Q + (1 - P ** Y / P ** Q) * Py A B P.
Proof.
intros.
assert (on_line_d Y P Q (P ** Y / P ** Q)).
apply on_line_to_on_line_d.

*****
H : on_line Y P Q
A,B,P,Q,Y : Point
*****
on_line Y P Q
+++++
Geometry.
-----
Theorem elim_py_on_line_right : forall A B P Q Y : Point, on_line Y P Q -> Py A B Y = P ** Y / P ** Q * Py A B Q + (1 - P ** Y / P ** Q) * Py A B P.
Proof.
intros.
assert (on_line_d Y P Q (P ** Y / P ** Q)).

*****
H0 : on_line_d Y P Q (Fdiv (DSeg P Y) (DSeg P Q))
H : on_line Y P Q
A,B,P,Q,Y : Point
*****
eq (Py A B Y) (Fplus (Fmult (Fdiv (DSeg P Y) (DSeg P Q)) (Py A B Q)) (Fmult (Fminus F1 (Fdiv (DSeg P Y) (DSeg P Q))) (Py A B P)))
+++++
apply elim_py_on_line_d_right.
-----
Theorem elim_py_on_line_right : forall A B P Q Y : Point, on_line Y P Q -> Py A B Y = P ** Y / P ** Q * Py A B Q + (1 - P ** Y / P ** Q) * Py A B P.
Proof.
intros.
assert (on_line_d Y P Q (P ** Y / P ** Q)).
apply elim_py_on_line_d_right.

*****
H0 : on_line_d Y P Q (Fdiv (DSeg P Y) (DSeg P Q))
H : on_line Y P Q
A,B,P,Q,Y : Point
*****
on_line_d Y P Q (Fdiv (DSeg P Y) (DSeg P Q))
+++++
Geometry.
-----
Theorem elim_py_on_line_right : forall A B P Q Y : Point, on_line Y P Q -> Py A B Y = P ** Y / P ** Q * Py A B Q + (1 - P ** Y / P ** Q) * Py A B P.
Proof.
intros.
assert (on_line_d Y P Q (P ** Y / P ** Q)).

*****

*****

+++++
Qed.
-----
Theorem elim_py_on_line_d_middle :\n forall A B P Q Y r,\n on_line_d Y P Q r ->\n Py A Y B = - Py A P B * r + Py A P B + r * r * Py Q P Q + r * Py A Q B- r * Py Q P Q.
-----
Theorem elim_py_on_line_d_middle : forall A B P Q Y r, on_line_d Y P Q r -> Py A Y B = - Py A P B * r + Py A P B + r * r * Py Q P Q + r * Py A Q B- r * Py Q P Q.

*****

*****
forall (A B P Q Y : Point) (r : F) (_ : on_line_d Y P Q r), eq (Py A Y B) (Fminus (Fplus (Fplus (Fplus (Fmult (Fopp (Py A P B)) r) (Py A P B)) (Fmult (Fmult r r) (Py Q P Q))) (Fmult r (Py A Q B))) (Fmult r (Py Q P Q)))
+++++
Proof.
-----
Theorem elim_py_on_line_d_middle : forall A B P Q Y r, on_line_d Y P Q r -> Py A Y B = - Py A P B * r + Py A P B + r * r * Py Q P Q + r * Py A Q B- r * Py Q P Q.
Proof.

*****

*****
forall (A B P Q Y : Point) (r : F) (_ : on_line_d Y P Q r), eq (Py A Y B) (Fminus (Fplus (Fplus (Fplus (Fmult (Fopp (Py A P B)) r) (Py A P B)) (Fmult (Fmult r r) (Py Q P Q))) (Fmult r (Py A Q B))) (Fmult r (Py Q P Q)))
+++++
intros.
-----
Theorem elim_py_on_line_d_middle : forall A B P Q Y r, on_line_d Y P Q r -> Py A Y B = - Py A P B * r + Py A P B + r * r * Py Q P Q + r * Py A Q B- r * Py Q P Q.
Proof.
intros.

*****
H : on_line_d Y P Q r
r : F
A,B,P,Q,Y : Point
*****
eq (Py A Y B) (Fminus (Fplus (Fplus (Fplus (Fmult (Fopp (Py A P B)) r) (Py A P B)) (Fmult (Fmult r r) (Py Q P Q))) (Fmult r (Py A Q B))) (Fmult r (Py Q P Q)))
+++++
apply -> on_line_d_iff_on_parallel_d in H.
-----
Theorem elim_py_on_line_d_middle : forall A B P Q Y r, on_line_d Y P Q r -> Py A Y B = - Py A P B * r + Py A P B + r * r * Py Q P Q + r * Py A Q B- r * Py Q P Q.
Proof.
intros.
apply -> on_line_d_iff_on_parallel_d in H.

*****
H : on_parallel_d Y P Q P (Fminus F0 r)
r : F
A,B,P,Q,Y : Point
*****
eq (Py A Y B) (Fminus (Fplus (Fplus (Fplus (Fmult (Fopp (Py A P B)) r) (Py A P B)) (Fmult (Fmult r r) (Py Q P Q))) (Fmult r (Py A Q B))) (Fmult r (Py Q P Q)))
+++++
rewrite (elim_py_on_parallel_d_middle A B P Q P Y (0-r) H).
-----
Theorem elim_py_on_line_d_middle : forall A B P Q Y r, on_line_d Y P Q r -> Py A Y B = - Py A P B * r + Py A P B + r * r * Py Q P Q + r * Py A Q B- r * Py Q P Q.
Proof.
intros.
apply -> on_line_d_iff_on_parallel_d in H.
rewrite (elim_py_on_parallel_d_middle A B P Q P Y (0-r) H).

*****
H : on_parallel_d Y P Q P (Fminus F0 r)
r : F
A,B,P,Q,Y : Point
*****
eq (Fminus (Fplus (Py A P B) (Fmult (Fminus F0 r) (Fplus (Fminus (Py A P B) (Py A Q B)) (Fmult (Fplus F1 F1) (Py P Q P))))) (Fmult (Fmult (Fminus F0 r) (Fminus F1 (Fminus F0 r))) (Py Q P Q))) (Fminus (Fplus (Fplus (Fplus (Fmult (Fopp (Py A P B)) r) (Py A P B)) (Fmult (Fmult r r) (Py Q P Q))) (Fmult r (Py A Q B))) (Fmult r (Py Q P Q)))
+++++
replace (Py P Q P) with (Py Q P Q) by auto with Geom.
-----
Theorem elim_py_on_line_d_middle : forall A B P Q Y r, on_line_d Y P Q r -> Py A Y B = - Py A P B * r + Py A P B + r * r * Py Q P Q + r * Py A Q B- r * Py Q P Q.
Proof.
intros.
apply -> on_line_d_iff_on_parallel_d in H.
rewrite (elim_py_on_parallel_d_middle A B P Q P Y (0-r) H).
replace (Py P Q P) with (Py Q P Q) by auto with Geom.

*****
H : on_parallel_d Y P Q P (Fminus F0 r)
r : F
A,B,P,Q,Y : Point
*****
eq (Fminus (Fplus (Py A P B) (Fmult (Fminus F0 r) (Fplus (Fminus (Py A P B) (Py A Q B)) (Fmult (Fplus F1 F1) (Py Q P Q))))) (Fmult (Fmult (Fminus F0 r) (Fminus F1 (Fminus F0 r))) (Py Q P Q))) (Fminus (Fplus (Fplus (Fplus (Fmult (Fopp (Py A P B)) r) (Py A P B)) (Fmult (Fmult r r) (Py Q P Q))) (Fmult r (Py A Q B))) (Fmult r (Py Q P Q)))
+++++
ring.
-----
Theorem elim_py_on_line_d_middle : forall A B P Q Y r, on_line_d Y P Q r -> Py A Y B = - Py A P B * r + Py A P B + r * r * Py Q P Q + r * Py A Q B- r * Py Q P Q.
Proof.
intros.
apply -> on_line_d_iff_on_parallel_d in H.
rewrite (elim_py_on_parallel_d_middle A B P Q P Y (0-r) H).
replace (Py P Q P) with (Py Q P Q) by auto with Geom.
ring.

*****

*****

+++++
Qed.
-----
Theorem elim_py_on_line_middle :\n forall A B P Q Y : Point,\n on_line Y P Q ->\n Py A Y B = Py A P B + P ** Y / Q ** P * (Py A P B - Py A Q B + 2* Py Q P Q) -\nP ** Y / Q ** P * (1 - P ** Y / Q ** P) * Py Q P Q.
-----
Theorem elim_py_on_line_middle : forall A B P Q Y : Point, on_line Y P Q -> Py A Y B = Py A P B + P ** Y / Q ** P * (Py A P B - Py A Q B + 2* Py Q P Q) - P ** Y / Q ** P * (1 - P ** Y / Q ** P) * Py Q P Q.

*****

*****
forall (A B P Q Y : Point) (_ : on_line Y P Q), eq (Py A Y B) (Fminus (Fplus (Py A P B) (Fmult (Fdiv (DSeg P Y) (DSeg Q P)) (Fplus (Fminus (Py A P B) (Py A Q B)) (Fmult (Fplus F1 F1) (Py Q P Q))))) (Fmult (Fmult (Fdiv (DSeg P Y) (DSeg Q P)) (Fminus F1 (Fdiv (DSeg P Y) (DSeg Q P)))) (Py Q P Q)))
+++++
Proof.
-----
Theorem elim_py_on_line_middle : forall A B P Q Y : Point, on_line Y P Q -> Py A Y B = Py A P B + P ** Y / Q ** P * (Py A P B - Py A Q B + 2* Py Q P Q) - P ** Y / Q ** P * (1 - P ** Y / Q ** P) * Py Q P Q.
Proof.

*****

*****
forall (A B P Q Y : Point) (_ : on_line Y P Q), eq (Py A Y B) (Fminus (Fplus (Py A P B) (Fmult (Fdiv (DSeg P Y) (DSeg Q P)) (Fplus (Fminus (Py A P B) (Py A Q B)) (Fmult (Fplus F1 F1) (Py Q P Q))))) (Fmult (Fmult (Fdiv (DSeg P Y) (DSeg Q P)) (Fminus F1 (Fdiv (DSeg P Y) (DSeg Q P)))) (Py Q P Q)))
+++++
intros.
-----
Theorem elim_py_on_line_middle : forall A B P Q Y : Point, on_line Y P Q -> Py A Y B = Py A P B + P ** Y / Q ** P * (Py A P B - Py A Q B + 2* Py Q P Q) - P ** Y / Q ** P * (1 - P ** Y / Q ** P) * Py Q P Q.
Proof.
intros.

*****
H : on_line Y P Q
A,B,P,Q,Y : Point
*****
eq (Py A Y B) (Fminus (Fplus (Py A P B) (Fmult (Fdiv (DSeg P Y) (DSeg Q P)) (Fplus (Fminus (Py A P B) (Py A Q B)) (Fmult (Fplus F1 F1) (Py Q P Q))))) (Fmult (Fmult (Fdiv (DSeg P Y) (DSeg Q P)) (Fminus F1 (Fdiv (DSeg P Y) (DSeg Q P)))) (Py Q P Q)))
+++++
apply -> on_line_iff_on_parallel in H.
-----
Theorem elim_py_on_line_middle : forall A B P Q Y : Point, on_line Y P Q -> Py A Y B = Py A P B + P ** Y / Q ** P * (Py A P B - Py A Q B + 2* Py Q P Q) - P ** Y / Q ** P * (1 - P ** Y / Q ** P) * Py Q P Q.
Proof.
intros.
apply -> on_line_iff_on_parallel in H.

*****
H : on_parallel Y P Q P
A,B,P,Q,Y : Point
*****
eq (Py A Y B) (Fminus (Fplus (Py A P B) (Fmult (Fdiv (DSeg P Y) (DSeg Q P)) (Fplus (Fminus (Py A P B) (Py A Q B)) (Fmult (Fplus F1 F1) (Py Q P Q))))) (Fmult (Fmult (Fdiv (DSeg P Y) (DSeg Q P)) (Fminus F1 (Fdiv (DSeg P Y) (DSeg Q P)))) (Py Q P Q)))
+++++
apply on_parallel_to_on_parallel_d in H.
-----
Theorem elim_py_on_line_middle : forall A B P Q Y : Point, on_line Y P Q -> Py A Y B = Py A P B + P ** Y / Q ** P * (Py A P B - Py A Q B + 2* Py Q P Q) - P ** Y / Q ** P * (1 - P ** Y / Q ** P) * Py Q P Q.
Proof.
intros.
apply -> on_line_iff_on_parallel in H.
apply on_parallel_to_on_parallel_d in H.

*****
H : on_parallel_d Y P Q P (Fdiv (DSeg P Y) (DSeg Q P))
A,B,P,Q,Y : Point
*****
eq (Py A Y B) (Fminus (Fplus (Py A P B) (Fmult (Fdiv (DSeg P Y) (DSeg Q P)) (Fplus (Fminus (Py A P B) (Py A Q B)) (Fmult (Fplus F1 F1) (Py Q P Q))))) (Fmult (Fmult (Fdiv (DSeg P Y) (DSeg Q P)) (Fminus F1 (Fdiv (DSeg P Y) (DSeg Q P)))) (Py Q P Q)))
+++++
rewrite (elim_py_on_parallel_d_middle A B P Q P Y (P ** Y / Q ** P) H).
-----
Theorem elim_py_on_line_middle : forall A B P Q Y : Point, on_line Y P Q -> Py A Y B = Py A P B + P ** Y / Q ** P * (Py A P B - Py A Q B + 2* Py Q P Q) - P ** Y / Q ** P * (1 - P ** Y / Q ** P) * Py Q P Q.
Proof.
intros.
apply -> on_line_iff_on_parallel in H.
apply on_parallel_to_on_parallel_d in H.
rewrite (elim_py_on_parallel_d_middle A B P Q P Y (P ** Y / Q ** P) H).

*****
H : on_parallel_d Y P Q P (Fdiv (DSeg P Y) (DSeg Q P))
A,B,P,Q,Y : Point
*****
eq (Fminus (Fplus (Py A P B) (Fmult (Fdiv (DSeg P Y) (DSeg Q P)) (Fplus (Fminus (Py A P B) (Py A Q B)) (Fmult (Fplus F1 F1) (Py P Q P))))) (Fmult (Fmult (Fdiv (DSeg P Y) (DSeg Q P)) (Fminus F1 (Fdiv (DSeg P Y) (DSeg Q P)))) (Py Q P Q))) (Fminus (Fplus (Py A P B) (Fmult (Fdiv (DSeg P Y) (DSeg Q P)) (Fplus (Fminus (Py A P B) (Py A Q B)) (Fmult (Fplus F1 F1) (Py Q P Q))))) (Fmult (Fmult (Fdiv (DSeg P Y) (DSeg Q P)) (Fminus F1 (Fdiv (DSeg P Y) (DSeg Q P)))) (Py Q P Q)))
+++++
replace (Py P Q P) with (Py Q P Q) by auto with Geom.
-----
Theorem elim_py_on_line_middle : forall A B P Q Y : Point, on_line Y P Q -> Py A Y B = Py A P B + P ** Y / Q ** P * (Py A P B - Py A Q B + 2* Py Q P Q) - P ** Y / Q ** P * (1 - P ** Y / Q ** P) * Py Q P Q.
Proof.
intros.
apply -> on_line_iff_on_parallel in H.
apply on_parallel_to_on_parallel_d in H.
rewrite (elim_py_on_parallel_d_middle A B P Q P Y (P ** Y / Q ** P) H).
replace (Py P Q P) with (Py Q P Q) by auto with Geom.

*****
H : on_parallel_d Y P Q P (Fdiv (DSeg P Y) (DSeg Q P))
A,B,P,Q,Y : Point
*****
eq (Fminus (Fplus (Py A P B) (Fmult (Fdiv (DSeg P Y) (DSeg Q P)) (Fplus (Fminus (Py A P B) (Py A Q B)) (Fmult (Fplus F1 F1) (Py Q P Q))))) (Fmult (Fmult (Fdiv (DSeg P Y) (DSeg Q P)) (Fminus F1 (Fdiv (DSeg P Y) (DSeg Q P)))) (Py Q P Q))) (Fminus (Fplus (Py A P B) (Fmult (Fdiv (DSeg P Y) (DSeg Q P)) (Fplus (Fminus (Py A P B) (Py A Q B)) (Fmult (Fplus F1 F1) (Py Q P Q))))) (Fmult (Fmult (Fdiv (DSeg P Y) (DSeg Q P)) (Fminus F1 (Fdiv (DSeg P Y) (DSeg Q P)))) (Py Q P Q)))
+++++
ring.
-----
Theorem elim_py_on_line_middle : forall A B P Q Y : Point, on_line Y P Q -> Py A Y B = Py A P B + P ** Y / Q ** P * (Py A P B - Py A Q B + 2* Py Q P Q) - P ** Y / Q ** P * (1 - P ** Y / Q ** P) * Py Q P Q.
Proof.
intros.
apply -> on_line_iff_on_parallel in H.
apply on_parallel_to_on_parallel_d in H.
rewrite (elim_py_on_parallel_d_middle A B P Q P Y (P ** Y / Q ** P) H).
replace (Py P Q P) with (Py Q P Q) by auto with Geom.
ring.

*****

*****

+++++
Qed.
-----
Theorem elim_py_inter_ll_right :\n forall A B P Q U V Y : Point,\n inter_ll Y P Q U V ->\n Py A B Y = 1 / S4 P U Q V * (S P U V * Py A B Q + S Q V U * Py A B P).
-----
Theorem elim_py_inter_ll_right : forall A B P Q U V Y : Point, inter_ll Y P Q U V -> Py A B Y = 1 / S4 P U Q V * (S P U V * Py A B Q + S Q V U * Py A B P).

*****

*****
forall (A B P Q U V Y : Point) (_ : inter_ll Y P Q U V), eq (Py A B Y) (Fmult (Fdiv F1 (S4 P U Q V)) (Fplus (Fmult (S P U V) (Py A B Q)) (Fmult (S Q V U) (Py A B P))))
+++++
Proof.
-----
Theorem elim_py_inter_ll_right : forall A B P Q U V Y : Point, inter_ll Y P Q U V -> Py A B Y = 1 / S4 P U Q V * (S P U V * Py A B Q + S Q V U * Py A B P).
Proof.

*****

*****
forall (A B P Q U V Y : Point) (_ : inter_ll Y P Q U V), eq (Py A B Y) (Fmult (Fdiv F1 (S4 P U Q V)) (Fplus (Fmult (S P U V) (Py A B Q)) (Fmult (S Q V U) (Py A B P))))
+++++
intros.
-----
Theorem elim_py_inter_ll_right : forall A B P Q U V Y : Point, inter_ll Y P Q U V -> Py A B Y = 1 / S4 P U Q V * (S P U V * Py A B Q + S Q V U * Py A B P).
Proof.
intros.

*****
H : inter_ll Y P Q U V
A,B,P,Q,U,V,Y : Point
*****
eq (Py A B Y) (Fmult (Fdiv F1 (S4 P U Q V)) (Fplus (Fmult (S P U V) (Py A B Q)) (Fmult (S Q V U) (Py A B P))))
+++++
unfold inter_ll in H.
-----
Theorem elim_py_inter_ll_right : forall A B P Q U V Y : Point, inter_ll Y P Q U V -> Py A B Y = 1 / S4 P U Q V * (S P U V * Py A B Q + S Q V U * Py A B P).
Proof.
intros.
unfold inter_ll in H.

*****
H : and (Col Y P Q) (and (Col Y U V) (not (parallel P Q U V)))
A,B,P,Q,U,V,Y : Point
*****
eq (Py A B Y) (Fmult (Fdiv F1 (S4 P U Q V)) (Fplus (Fmult (S P U V) (Py A B Q)) (Fmult (S Q V U) (Py A B P))))
+++++
decompose [and] H.
-----
Theorem elim_py_inter_ll_right : forall A B P Q U V Y : Point, inter_ll Y P Q U V -> Py A B Y = 1 / S4 P U Q V * (S P U V * Py A B Q + S Q V U * Py A B P).
Proof.
intros.
unfold inter_ll in H.
decompose [and] H.

*****
H3 : not (parallel P Q U V)
H2 : Col Y U V
H0 : Col Y P Q
H : and (Col Y P Q) (and (Col Y U V) (not (parallel P Q U V)))
A,B,P,Q,U,V,Y : Point
*****
eq (Py A B Y) (Fmult (Fdiv F1 (S4 P U Q V)) (Fplus (Fmult (S P U V) (Py A B Q)) (Fmult (S Q V U) (Py A B P))))
+++++
clear H.
-----
Theorem elim_py_inter_ll_right : forall A B P Q U V Y : Point, inter_ll Y P Q U V -> Py A B Y = 1 / S4 P U Q V * (S P U V * Py A B Q + S Q V U * Py A B P).
Proof.
intros.
unfold inter_ll in H.
decompose [and] H.
clear H.

*****
H3 : not (parallel P Q U V)
H2 : Col Y U V
H0 : Col Y P Q
A,B,P,Q,U,V,Y : Point
*****
eq (Py A B Y) (Fmult (Fdiv F1 (S4 P U Q V)) (Fplus (Fmult (S P U V) (Py A B Q)) (Fmult (S Q V U) (Py A B P))))
+++++
assert (P<>Q).
-----
Theorem elim_py_inter_ll_right : forall A B P Q U V Y : Point, inter_ll Y P Q U V -> Py A B Y = 1 / S4 P U Q V * (S P U V * Py A B Q + S Q V U * Py A B P).
Proof.
intros.
unfold inter_ll in H.
decompose [and] H.
clear H.
assert (P<>Q).

*****
H3 : not (parallel P Q U V)
H2 : Col Y U V
H0 : Col Y P Q
A,B,P,Q,U,V,Y : Point
*****
not (eq P Q)
+++++
eauto with Geom.
-----
Theorem elim_py_inter_ll_right : forall A B P Q U V Y : Point, inter_ll Y P Q U V -> Py A B Y = 1 / S4 P U Q V * (S P U V * Py A B Q + S Q V U * Py A B P).
Proof.
intros.
unfold inter_ll in H.
decompose [and] H.
clear H.
assert (P<>Q).

*****
H : not (eq P Q)
H3 : not (parallel P Q U V)
H2 : Col Y U V
H0 : Col Y P Q
A,B,P,Q,U,V,Y : Point
*****
eq (Py A B Y) (Fmult (Fdiv F1 (S4 P U Q V)) (Fplus (Fmult (S P U V) (Py A B Q)) (Fmult (S Q V U) (Py A B P))))
+++++
rewrite (l_28_b A B P Q Y).
-----
Theorem elim_py_inter_ll_right : forall A B P Q U V Y : Point, inter_ll Y P Q U V -> Py A B Y = 1 / S4 P U Q V * (S P U V * Py A B Q + S Q V U * Py A B P).
Proof.
intros.
unfold inter_ll in H.
decompose [and] H.
clear H.
assert (P<>Q).
rewrite (l_28_b A B P Q Y).

*****
H : not (eq P Q)
H3 : not (parallel P Q U V)
H2 : Col Y U V
H0 : Col Y P Q
A,B,P,Q,U,V,Y : Point
*****
eq (Fplus (Fmult (Fdiv (DSeg P Y) (DSeg P Q)) (Py A B Q)) (Fmult (Fdiv (DSeg Y Q) (DSeg P Q)) (Py A B P))) (Fmult (Fdiv F1 (S4 P U Q V)) (Fplus (Fmult (S P U V) (Py A B Q)) (Fmult (S Q V U) (Py A B P))))
+++++
replace (Y ** Q / P ** Q) with (- (Q ** Y/ P**Q )).
-----
Theorem elim_py_inter_ll_right : forall A B P Q U V Y : Point, inter_ll Y P Q U V -> Py A B Y = 1 / S4 P U Q V * (S P U V * Py A B Q + S Q V U * Py A B P).
Proof.
intros.
unfold inter_ll in H.
decompose [and] H.
clear H.
assert (P<>Q).
rewrite (l_28_b A B P Q Y).
replace (Y ** Q / P ** Q) with (- (Q ** Y/ P**Q )).

*****
H : not (eq P Q)
H3 : not (parallel P Q U V)
H2 : Col Y U V
H0 : Col Y P Q
A,B,P,Q,U,V,Y : Point
*****
eq (Fplus (Fmult (Fdiv (DSeg P Y) (DSeg P Q)) (Py A B Q)) (Fmult (Fopp (Fdiv (DSeg Q Y) (DSeg P Q))) (Py A B P))) (Fmult (Fdiv F1 (S4 P U Q V)) (Fplus (Fmult (S P U V) (Py A B Q)) (Fmult (S Q V U) (Py A B P))))
+++++
rewrite (co_side_bis U V P Q Y H3).
-----
Theorem elim_py_inter_ll_right : forall A B P Q U V Y : Point, inter_ll Y P Q U V -> Py A B Y = 1 / S4 P U Q V * (S P U V * Py A B Q + S Q V U * Py A B P).
Proof.
intros.
unfold inter_ll in H.
decompose [and] H.
clear H.
assert (P<>Q).
rewrite (l_28_b A B P Q Y).
replace (Y ** Q / P ** Q) with (- (Q ** Y/ P**Q )).
rewrite (co_side_bis U V P Q Y H3).

*****
H : not (eq P Q)
H3 : not (parallel P Q U V)
H2 : Col Y U V
H0 : Col Y P Q
A,B,P,Q,U,V,Y : Point
*****
eq (Fplus (Fmult (Fdiv (DSeg P Y) (DSeg P Q)) (Py A B Q)) (Fmult (Fopp (Fdiv (S Q U V) (S4 P U Q V))) (Py A B P))) (Fmult (Fdiv F1 (S4 P U Q V)) (Fplus (Fmult (S P U V) (Py A B Q)) (Fmult (S Q V U) (Py A B P))))
+++++
idtac.
-----
Theorem elim_py_inter_ll_right : forall A B P Q U V Y : Point, inter_ll Y P Q U V -> Py A B Y = 1 / S4 P U Q V * (S P U V * Py A B Q + S Q V U * Py A B P).
Proof.
intros.
unfold inter_ll in H.
decompose [and] H.
clear H.
assert (P<>Q).
rewrite (l_28_b A B P Q Y).
replace (Y ** Q / P ** Q) with (- (Q ** Y/ P**Q )).
rewrite (co_side_bis U V P Q Y H3).
idtac.

*****
H : not (eq P Q)
H3 : not (parallel P Q U V)
H2 : Col Y U V
H0 : Col Y P Q
A,B,P,Q,U,V,Y : Point
*****
eq (Fplus (Fmult (Fdiv (DSeg P Y) (DSeg P Q)) (Py A B Q)) (Fmult (Fopp (Fdiv (S Q U V) (S4 P U Q V))) (Py A B P))) (Fmult (Fdiv F1 (S4 P U Q V)) (Fplus (Fmult (S P U V) (Py A B Q)) (Fmult (S Q V U) (Py A B P))))
+++++
replace (P ** Y / P ** Q) with (- (P ** Y / Q ** P)).
-----
Theorem elim_py_inter_ll_right : forall A B P Q U V Y : Point, inter_ll Y P Q U V -> Py A B Y = 1 / S4 P U Q V * (S P U V * Py A B Q + S Q V U * Py A B P).
Proof.
intros.
unfold inter_ll in H.
decompose [and] H.
clear H.
assert (P<>Q).
rewrite (l_28_b A B P Q Y).
replace (Y ** Q / P ** Q) with (- (Q ** Y/ P**Q )).
rewrite (co_side_bis U V P Q Y H3).
idtac.
replace (P ** Y / P ** Q) with (- (P ** Y / Q ** P)).

*****
H : not (eq P Q)
H3 : not (parallel P Q U V)
H2 : Col Y U V
H0 : Col Y P Q
A,B,P,Q,U,V,Y : Point
*****
eq (Fplus (Fmult (Fopp (Fdiv (DSeg P Y) (DSeg Q P))) (Py A B Q)) (Fmult (Fopp (Fdiv (S Q U V) (S4 P U Q V))) (Py A B P))) (Fmult (Fdiv F1 (S4 P U Q V)) (Fplus (Fmult (S P U V) (Py A B Q)) (Fmult (S Q V U) (Py A B P))))
+++++
rewrite (co_side_bis V U Q P Y).
-----
Theorem elim_py_inter_ll_right : forall A B P Q U V Y : Point, inter_ll Y P Q U V -> Py A B Y = 1 / S4 P U Q V * (S P U V * Py A B Q + S Q V U * Py A B P).
Proof.
intros.
unfold inter_ll in H.
decompose [and] H.
clear H.
assert (P<>Q).
rewrite (l_28_b A B P Q Y).
replace (Y ** Q / P ** Q) with (- (Q ** Y/ P**Q )).
rewrite (co_side_bis U V P Q Y H3).
idtac.
replace (P ** Y / P ** Q) with (- (P ** Y / Q ** P)).
rewrite (co_side_bis V U Q P Y).

*****
H : not (eq P Q)
H3 : not (parallel P Q U V)
H2 : Col Y U V
H0 : Col Y P Q
A,B,P,Q,U,V,Y : Point
*****
eq (Fplus (Fmult (Fopp (Fdiv (S P V U) (S4 Q V P U))) (Py A B Q)) (Fmult (Fopp (Fdiv (S Q U V) (S4 P U Q V))) (Py A B P))) (Fmult (Fdiv F1 (S4 P U Q V)) (Fplus (Fmult (S P U V) (Py A B Q)) (Fmult (S Q V U) (Py A B P))))
+++++
replace (S4 Q V P U) with (S4 P U Q V) by (auto with Geom).
-----
Theorem elim_py_inter_ll_right : forall A B P Q U V Y : Point, inter_ll Y P Q U V -> Py A B Y = 1 / S4 P U Q V * (S P U V * Py A B Q + S Q V U * Py A B P).
Proof.
intros.
unfold inter_ll in H.
decompose [and] H.
clear H.
assert (P<>Q).
rewrite (l_28_b A B P Q Y).
replace (Y ** Q / P ** Q) with (- (Q ** Y/ P**Q )).
rewrite (co_side_bis U V P Q Y H3).
idtac.
replace (P ** Y / P ** Q) with (- (P ** Y / Q ** P)).
rewrite (co_side_bis V U Q P Y).
replace (S4 Q V P U) with (S4 P U Q V) by (auto with Geom).

*****
H : not (eq P Q)
H3 : not (parallel P Q U V)
H2 : Col Y U V
H0 : Col Y P Q
A,B,P,Q,U,V,Y : Point
*****
eq (Fplus (Fmult (Fopp (Fdiv (S P V U) (S4 P U Q V))) (Py A B Q)) (Fmult (Fopp (Fdiv (S Q U V) (S4 P U Q V))) (Py A B P))) (Fmult (Fdiv F1 (S4 P U Q V)) (Fplus (Fmult (S P U V) (Py A B Q)) (Fmult (S Q V U) (Py A B P))))
+++++
uniformize_signed_areas.
-----
Theorem elim_py_inter_ll_right : forall A B P Q U V Y : Point, inter_ll Y P Q U V -> Py A B Y = 1 / S4 P U Q V * (S P U V * Py A B Q + S Q V U * Py A B P).
Proof.
intros.
unfold inter_ll in H.
decompose [and] H.
clear H.
assert (P<>Q).
rewrite (l_28_b A B P Q Y).
replace (Y ** Q / P ** Q) with (- (Q ** Y/ P**Q )).
rewrite (co_side_bis U V P Q Y H3).
idtac.
replace (P ** Y / P ** Q) with (- (P ** Y / Q ** P)).
rewrite (co_side_bis V U Q P Y).
replace (S4 Q V P U) with (S4 P U Q V) by (auto with Geom).
uniformize_signed_areas.

*****
H : not (eq P Q)
H3 : not (parallel P Q U V)
H2 : Col Y U V
H0 : Col Y P Q
A,B,P,Q,U,V,Y : Point
*****
eq (Fplus (Fmult (Fopp (Fdiv (S P V U) (S4 P U Q V))) (Py A B Q)) (Fmult (Fopp (Fdiv (S Q U V) (S4 P U Q V))) (Py A B P))) (Fmult (Fdiv F1 (S4 P U Q V)) (Fplus (Fmult (Fopp (S P V U)) (Py A B Q)) (Fmult (Fopp (S Q U V)) (Py A B P))))
+++++
field.
-----
Theorem elim_py_inter_ll_right : forall A B P Q U V Y : Point, inter_ll Y P Q U V -> Py A B Y = 1 / S4 P U Q V * (S P U V * Py A B Q + S Q V U * Py A B P).
Proof.
intros.
unfold inter_ll in H.
decompose [and] H.
clear H.
assert (P<>Q).
rewrite (l_28_b A B P Q Y).
replace (Y ** Q / P ** Q) with (- (Q ** Y/ P**Q )).
rewrite (co_side_bis U V P Q Y H3).
idtac.
replace (P ** Y / P ** Q) with (- (P ** Y / Q ** P)).
rewrite (co_side_bis V U Q P Y).
replace (S4 Q V P U) with (S4 P U Q V) by (auto with Geom).
uniformize_signed_areas.
field.

*****
H : not (eq P Q)
H3 : not (parallel P Q U V)
H2 : Col Y U V
H0 : Col Y P Q
A,B,P,Q,U,V,Y : Point
*****
not (eq (S4 P U Q V) F0)
+++++
auto with Geom.
-----
Theorem elim_py_inter_ll_right : forall A B P Q U V Y : Point, inter_ll Y P Q U V -> Py A B Y = 1 / S4 P U Q V * (S P U V * Py A B Q + S Q V U * Py A B P).
Proof.
intros.
unfold inter_ll in H.
decompose [and] H.
clear H.
assert (P<>Q).
rewrite (l_28_b A B P Q Y).
replace (Y ** Q / P ** Q) with (- (Q ** Y/ P**Q )).
rewrite (co_side_bis U V P Q Y H3).
idtac.
replace (P ** Y / P ** Q) with (- (P ** Y / Q ** P)).
rewrite (co_side_bis V U Q P Y).

*****
H : not (eq P Q)
H3 : not (parallel P Q U V)
H2 : Col Y U V
H0 : Col Y P Q
A,B,P,Q,U,V,Y : Point
*****
not (parallel Q P V U)
+++++
unfold not.
-----
Theorem elim_py_inter_ll_right : forall A B P Q U V Y : Point, inter_ll Y P Q U V -> Py A B Y = 1 / S4 P U Q V * (S P U V * Py A B Q + S Q V U * Py A B P).
Proof.
intros.
unfold inter_ll in H.
decompose [and] H.
clear H.
assert (P<>Q).
rewrite (l_28_b A B P Q Y).
replace (Y ** Q / P ** Q) with (- (Q ** Y/ P**Q )).
rewrite (co_side_bis U V P Q Y H3).
idtac.
replace (P ** Y / P ** Q) with (- (P ** Y / Q ** P)).
rewrite (co_side_bis V U Q P Y).
unfold not.

*****
H : not (eq P Q)
H3 : not (parallel P Q U V)
H2 : Col Y U V
H0 : Col Y P Q
A,B,P,Q,U,V,Y : Point
*****
forall _ : parallel Q P V U, False
+++++
intro.
-----
Theorem elim_py_inter_ll_right : forall A B P Q U V Y : Point, inter_ll Y P Q U V -> Py A B Y = 1 / S4 P U Q V * (S P U V * Py A B Q + S Q V U * Py A B P).
Proof.
intros.
unfold inter_ll in H.
decompose [and] H.
clear H.
assert (P<>Q).
rewrite (l_28_b A B P Q Y).
replace (Y ** Q / P ** Q) with (- (Q ** Y/ P**Q )).
rewrite (co_side_bis U V P Q Y H3).
idtac.
replace (P ** Y / P ** Q) with (- (P ** Y / Q ** P)).
rewrite (co_side_bis V U Q P Y).
unfold not.
intro.

*****
H1 : parallel Q P V U
H : not (eq P Q)
H3 : not (parallel P Q U V)
H2 : Col Y U V
H0 : Col Y P Q
A,B,P,Q,U,V,Y : Point
*****
False
+++++
assert (parallel P Q U V).
-----
Theorem elim_py_inter_ll_right : forall A B P Q U V Y : Point, inter_ll Y P Q U V -> Py A B Y = 1 / S4 P U Q V * (S P U V * Py A B Q + S Q V U * Py A B P).
Proof.
intros.
unfold inter_ll in H.
decompose [and] H.
clear H.
assert (P<>Q).
rewrite (l_28_b A B P Q Y).
replace (Y ** Q / P ** Q) with (- (Q ** Y/ P**Q )).
rewrite (co_side_bis U V P Q Y H3).
idtac.
replace (P ** Y / P ** Q) with (- (P ** Y / Q ** P)).
rewrite (co_side_bis V U Q P Y).
unfold not.
intro.
assert (parallel P Q U V).

*****
H1 : parallel Q P V U
H : not (eq P Q)
H3 : not (parallel P Q U V)
H2 : Col Y U V
H0 : Col Y P Q
A,B,P,Q,U,V,Y : Point
*****
parallel P Q U V
+++++
auto with Geom.
-----
Theorem elim_py_inter_ll_right : forall A B P Q U V Y : Point, inter_ll Y P Q U V -> Py A B Y = 1 / S4 P U Q V * (S P U V * Py A B Q + S Q V U * Py A B P).
Proof.
intros.
unfold inter_ll in H.
decompose [and] H.
clear H.
assert (P<>Q).
rewrite (l_28_b A B P Q Y).
replace (Y ** Q / P ** Q) with (- (Q ** Y/ P**Q )).
rewrite (co_side_bis U V P Q Y H3).
idtac.
replace (P ** Y / P ** Q) with (- (P ** Y / Q ** P)).
rewrite (co_side_bis V U Q P Y).
unfold not.
intro.
assert (parallel P Q U V).

*****
H4 : parallel P Q U V
H1 : parallel Q P V U
H : not (eq P Q)
H3 : not (parallel P Q U V)
H2 : Col Y U V
H0 : Col Y P Q
A,B,P,Q,U,V,Y : Point
*****
False
+++++
intuition.
-----
Theorem elim_py_inter_ll_right : forall A B P Q U V Y : Point, inter_ll Y P Q U V -> Py A B Y = 1 / S4 P U Q V * (S P U V * Py A B Q + S Q V U * Py A B P).
Proof.
intros.
unfold inter_ll in H.
decompose [and] H.
clear H.
assert (P<>Q).
rewrite (l_28_b A B P Q Y).
replace (Y ** Q / P ** Q) with (- (Q ** Y/ P**Q )).
rewrite (co_side_bis U V P Q Y H3).
idtac.
replace (P ** Y / P ** Q) with (- (P ** Y / Q ** P)).
rewrite (co_side_bis V U Q P Y).

*****
H : not (eq P Q)
H3 : not (parallel P Q U V)
H2 : Col Y U V
H0 : Col Y P Q
A,B,P,Q,U,V,Y : Point
*****
Col V U Y
+++++
auto with Geom.
-----
Theorem elim_py_inter_ll_right : forall A B P Q U V Y : Point, inter_ll Y P Q U V -> Py A B Y = 1 / S4 P U Q V * (S P U V * Py A B Q + S Q V U * Py A B P).
Proof.
intros.
unfold inter_ll in H.
decompose [and] H.
clear H.
assert (P<>Q).
rewrite (l_28_b A B P Q Y).
replace (Y ** Q / P ** Q) with (- (Q ** Y/ P**Q )).
rewrite (co_side_bis U V P Q Y H3).
idtac.
replace (P ** Y / P ** Q) with (- (P ** Y / Q ** P)).
rewrite (co_side_bis V U Q P Y).

*****
H : not (eq P Q)
H3 : not (parallel P Q U V)
H2 : Col Y U V
H0 : Col Y P Q
A,B,P,Q,U,V,Y : Point
*****
Col Q P Y
+++++
auto with Geom.
-----
Theorem elim_py_inter_ll_right : forall A B P Q U V Y : Point, inter_ll Y P Q U V -> Py A B Y = 1 / S4 P U Q V * (S P U V * Py A B Q + S Q V U * Py A B P).
Proof.
intros.
unfold inter_ll in H.
decompose [and] H.
clear H.
assert (P<>Q).
rewrite (l_28_b A B P Q Y).
replace (Y ** Q / P ** Q) with (- (Q ** Y/ P**Q )).
rewrite (co_side_bis U V P Q Y H3).
idtac.
replace (P ** Y / P ** Q) with (- (P ** Y / Q ** P)).

*****
H : not (eq P Q)
H3 : not (parallel P Q U V)
H2 : Col Y U V
H0 : Col Y P Q
A,B,P,Q,U,V,Y : Point
*****
eq (Fopp (Fdiv (DSeg P Y) (DSeg Q P))) (Fdiv (DSeg P Y) (DSeg P Q))
+++++
rewrite dirseg_4 at 1.
-----
Theorem elim_py_inter_ll_right : forall A B P Q U V Y : Point, inter_ll Y P Q U V -> Py A B Y = 1 / S4 P U Q V * (S P U V * Py A B Q + S Q V U * Py A B P).
Proof.
intros.
unfold inter_ll in H.
decompose [and] H.
clear H.
assert (P<>Q).
rewrite (l_28_b A B P Q Y).
replace (Y ** Q / P ** Q) with (- (Q ** Y/ P**Q )).
rewrite (co_side_bis U V P Q Y H3).
idtac.
replace (P ** Y / P ** Q) with (- (P ** Y / Q ** P)).
rewrite dirseg_4 at 1.

*****
H : not (eq P Q)
H3 : not (parallel P Q U V)
H2 : Col Y U V
H0 : Col Y P Q
A,B,P,Q,U,V,Y : Point
*****
eq (Fopp (Fopp (Fdiv (DSeg P Y) (DSeg P Q)))) (Fdiv (DSeg P Y) (DSeg P Q))
+++++
ring.
-----
Theorem elim_py_inter_ll_right : forall A B P Q U V Y : Point, inter_ll Y P Q U V -> Py A B Y = 1 / S4 P U Q V * (S P U V * Py A B Q + S Q V U * Py A B P).
Proof.
intros.
unfold inter_ll in H.
decompose [and] H.
clear H.
assert (P<>Q).
rewrite (l_28_b A B P Q Y).
replace (Y ** Q / P ** Q) with (- (Q ** Y/ P**Q )).
rewrite (co_side_bis U V P Q Y H3).
idtac.
replace (P ** Y / P ** Q) with (- (P ** Y / Q ** P)).
rewrite dirseg_4 at 1.

*****
H : not (eq P Q)
H3 : not (parallel P Q U V)
H2 : Col Y U V
H0 : Col Y P Q
A,B,P,Q,U,V,Y : Point
*****
not (eq (DSeg Q P) F0)
+++++
auto with Geom.
-----
Theorem elim_py_inter_ll_right : forall A B P Q U V Y : Point, inter_ll Y P Q U V -> Py A B Y = 1 / S4 P U Q V * (S P U V * Py A B Q + S Q V U * Py A B P).
Proof.
intros.
unfold inter_ll in H.
decompose [and] H.
clear H.
assert (P<>Q).
rewrite (l_28_b A B P Q Y).
replace (Y ** Q / P ** Q) with (- (Q ** Y/ P**Q )).
rewrite (co_side_bis U V P Q Y H3).

*****
H : not (eq P Q)
H3 : not (parallel P Q U V)
H2 : Col Y U V
H0 : Col Y P Q
A,B,P,Q,U,V,Y : Point
*****
Col U V Y
+++++
auto with Geom .
-----
Theorem elim_py_inter_ll_right : forall A B P Q U V Y : Point, inter_ll Y P Q U V -> Py A B Y = 1 / S4 P U Q V * (S P U V * Py A B Q + S Q V U * Py A B P).
Proof.
intros.
unfold inter_ll in H.
decompose [and] H.
clear H.
assert (P<>Q).
rewrite (l_28_b A B P Q Y).
replace (Y ** Q / P ** Q) with (- (Q ** Y/ P**Q )).
rewrite (co_side_bis U V P Q Y H3).

*****
H : not (eq P Q)
H3 : not (parallel P Q U V)
H2 : Col Y U V
H0 : Col Y P Q
A,B,P,Q,U,V,Y : Point
*****
Col P Q Y
+++++
auto with Geom .
-----
Theorem elim_py_inter_ll_right : forall A B P Q U V Y : Point, inter_ll Y P Q U V -> Py A B Y = 1 / S4 P U Q V * (S P U V * Py A B Q + S Q V U * Py A B P).
Proof.
intros.
unfold inter_ll in H.
decompose [and] H.
clear H.
assert (P<>Q).
rewrite (l_28_b A B P Q Y).
replace (Y ** Q / P ** Q) with (- (Q ** Y/ P**Q )).

*****
H : not (eq P Q)
H3 : not (parallel P Q U V)
H2 : Col Y U V
H0 : Col Y P Q
A,B,P,Q,U,V,Y : Point
*****
eq (Fopp (Fdiv (DSeg Q Y) (DSeg P Q))) (Fdiv (DSeg Y Q) (DSeg P Q))
+++++
rewrite dirseg_3 at 1.
-----
Theorem elim_py_inter_ll_right : forall A B P Q U V Y : Point, inter_ll Y P Q U V -> Py A B Y = 1 / S4 P U Q V * (S P U V * Py A B Q + S Q V U * Py A B P).
Proof.
intros.
unfold inter_ll in H.
decompose [and] H.
clear H.
assert (P<>Q).
rewrite (l_28_b A B P Q Y).
replace (Y ** Q / P ** Q) with (- (Q ** Y/ P**Q )).
rewrite dirseg_3 at 1.

*****
H : not (eq P Q)
H3 : not (parallel P Q U V)
H2 : Col Y U V
H0 : Col Y P Q
A,B,P,Q,U,V,Y : Point
*****
eq (Fopp (Fopp (Fdiv (DSeg Y Q) (DSeg P Q)))) (Fdiv (DSeg Y Q) (DSeg P Q))
+++++
ring.
-----
Theorem elim_py_inter_ll_right : forall A B P Q U V Y : Point, inter_ll Y P Q U V -> Py A B Y = 1 / S4 P U Q V * (S P U V * Py A B Q + S Q V U * Py A B P).
Proof.
intros.
unfold inter_ll in H.
decompose [and] H.
clear H.
assert (P<>Q).
rewrite (l_28_b A B P Q Y).
replace (Y ** Q / P ** Q) with (- (Q ** Y/ P**Q )).
rewrite dirseg_3 at 1.

*****
H : not (eq P Q)
H3 : not (parallel P Q U V)
H2 : Col Y U V
H0 : Col Y P Q
A,B,P,Q,U,V,Y : Point
*****
not (eq (DSeg P Q) F0)
+++++
auto with Geom.
-----
Theorem elim_py_inter_ll_right : forall A B P Q U V Y : Point, inter_ll Y P Q U V -> Py A B Y = 1 / S4 P U Q V * (S P U V * Py A B Q + S Q V U * Py A B P).
Proof.
intros.
unfold inter_ll in H.
decompose [and] H.
clear H.
assert (P<>Q).
rewrite (l_28_b A B P Q Y).

*****
H : not (eq P Q)
H3 : not (parallel P Q U V)
H2 : Col Y U V
H0 : Col Y P Q
A,B,P,Q,U,V,Y : Point
*****
not (eq P Q)
+++++
idtac.
-----
Theorem elim_py_inter_ll_right : forall A B P Q U V Y : Point, inter_ll Y P Q U V -> Py A B Y = 1 / S4 P U Q V * (S P U V * Py A B Q + S Q V U * Py A B P).
Proof.
intros.
unfold inter_ll in H.
decompose [and] H.
clear H.
assert (P<>Q).
rewrite (l_28_b A B P Q Y).
idtac.

*****
H : not (eq P Q)
H3 : not (parallel P Q U V)
H2 : Col Y U V
H0 : Col Y P Q
A,B,P,Q,U,V,Y : Point
*****
not (eq P Q)
+++++
auto.
-----
Theorem elim_py_inter_ll_right : forall A B P Q U V Y : Point, inter_ll Y P Q U V -> Py A B Y = 1 / S4 P U Q V * (S P U V * Py A B Q + S Q V U * Py A B P).
Proof.
intros.
unfold inter_ll in H.
decompose [and] H.
clear H.
assert (P<>Q).
rewrite (l_28_b A B P Q Y).

*****
H : not (eq P Q)
H3 : not (parallel P Q U V)
H2 : Col Y U V
H0 : Col Y P Q
A,B,P,Q,U,V,Y : Point
*****
Col Y P Q
+++++
auto with Geom.
-----
Theorem elim_py_inter_ll_right : forall A B P Q U V Y : Point, inter_ll Y P Q U V -> Py A B Y = 1 / S4 P U Q V * (S P U V * Py A B Q + S Q V U * Py A B P).
Proof.
intros.
unfold inter_ll in H.
decompose [and] H.
clear H.
assert (P<>Q).

*****

*****

+++++
Qed.
-----
Theorem elim_py_inter_ll_right_invariant :\n forall A B P Q U V Y : Point,\n inter_ll Y P Q U V -> S4 P U Q V <> 0.
-----
Theorem elim_py_inter_ll_right_invariant : forall A B P Q U V Y : Point, inter_ll Y P Q U V -> S4 P U Q V <> 0.

*****

*****
forall (_ : Point) (_ : Point) (P Q U V Y : Point) (_ : inter_ll Y P Q U V), not (eq (S4 P U Q V) F0)
+++++
Proof.
-----
Theorem elim_py_inter_ll_right_invariant : forall A B P Q U V Y : Point, inter_ll Y P Q U V -> S4 P U Q V <> 0.
Proof.

*****

*****
forall (_ : Point) (_ : Point) (P Q U V Y : Point) (_ : inter_ll Y P Q U V), not (eq (S4 P U Q V) F0)
+++++
intros.
-----
Theorem elim_py_inter_ll_right_invariant : forall A B P Q U V Y : Point, inter_ll Y P Q U V -> S4 P U Q V <> 0.
Proof.
intros.

*****
H : inter_ll Y P Q U V
A,B,P,Q,U,V,Y : Point
*****
not (eq (S4 P U Q V) F0)
+++++
unfold inter_ll, parallel in H.
-----
Theorem elim_py_inter_ll_right_invariant : forall A B P Q U V Y : Point, inter_ll Y P Q U V -> S4 P U Q V <> 0.
Proof.
intros.
unfold inter_ll, parallel in H.

*****
H : and (Col Y P Q) (and (Col Y U V) (not (eq (S4 P U Q V) F0)))
A,B,P,Q,U,V,Y : Point
*****
not (eq (S4 P U Q V) F0)
+++++
intuition.
-----
Theorem elim_py_inter_ll_right_invariant : forall A B P Q U V Y : Point, inter_ll Y P Q U V -> S4 P U Q V <> 0.
Proof.
intros.
unfold inter_ll, parallel in H.
intuition.

*****

*****

+++++
Qed.
-----
Theorem elim_py_inter_ll_left_right :\n forall B P Q U V Y : Point,\n inter_ll Y P Q U V ->\n Py Y B Y = 1 / S4 P U Q V *\n(S P U V * (1 / S4 P U Q V * (S P U V * Py Q B Q + S Q V U * Py Q B P)) +\n S Q V U * (1 / S4 P U Q V * (S P U V * Py P B Q + S Q V U * Py P B P))).
-----
Theorem elim_py_inter_ll_left_right : forall B P Q U V Y : Point, inter_ll Y P Q U V -> Py Y B Y = 1 / S4 P U Q V * (S P U V * (1 / S4 P U Q V * (S P U V * Py Q B Q + S Q V U * Py Q B P)) + S Q V U * (1 / S4 P U Q V * (S P U V * Py P B Q + S Q V U * Py P B P))).

*****

*****
forall (B P Q U V Y : Point) (_ : inter_ll Y P Q U V), eq (Py Y B Y) (Fmult (Fdiv F1 (S4 P U Q V)) (Fplus (Fmult (S P U V) (Fmult (Fdiv F1 (S4 P U Q V)) (Fplus (Fmult (S P U V) (Py Q B Q)) (Fmult (S Q V U) (Py Q B P))))) (Fmult (S Q V U) (Fmult (Fdiv F1 (S4 P U Q V)) (Fplus (Fmult (S P U V) (Py P B Q)) (Fmult (S Q V U) (Py P B P)))))))
+++++
Proof.
-----
Theorem elim_py_inter_ll_left_right : forall B P Q U V Y : Point, inter_ll Y P Q U V -> Py Y B Y = 1 / S4 P U Q V * (S P U V * (1 / S4 P U Q V * (S P U V * Py Q B Q + S Q V U * Py Q B P)) + S Q V U * (1 / S4 P U Q V * (S P U V * Py P B Q + S Q V U * Py P B P))).
Proof.

*****

*****
forall (B P Q U V Y : Point) (_ : inter_ll Y P Q U V), eq (Py Y B Y) (Fmult (Fdiv F1 (S4 P U Q V)) (Fplus (Fmult (S P U V) (Fmult (Fdiv F1 (S4 P U Q V)) (Fplus (Fmult (S P U V) (Py Q B Q)) (Fmult (S Q V U) (Py Q B P))))) (Fmult (S Q V U) (Fmult (Fdiv F1 (S4 P U Q V)) (Fplus (Fmult (S P U V) (Py P B Q)) (Fmult (S Q V U) (Py P B P)))))))
+++++
intros.
-----
Theorem elim_py_inter_ll_left_right : forall B P Q U V Y : Point, inter_ll Y P Q U V -> Py Y B Y = 1 / S4 P U Q V * (S P U V * (1 / S4 P U Q V * (S P U V * Py Q B Q + S Q V U * Py Q B P)) + S Q V U * (1 / S4 P U Q V * (S P U V * Py P B Q + S Q V U * Py P B P))).
Proof.
intros.

*****
H : inter_ll Y P Q U V
B,P,Q,U,V,Y : Point
*****
eq (Py Y B Y) (Fmult (Fdiv F1 (S4 P U Q V)) (Fplus (Fmult (S P U V) (Fmult (Fdiv F1 (S4 P U Q V)) (Fplus (Fmult (S P U V) (Py Q B Q)) (Fmult (S Q V U) (Py Q B P))))) (Fmult (S Q V U) (Fmult (Fdiv F1 (S4 P U Q V)) (Fplus (Fmult (S P U V) (Py P B Q)) (Fmult (S Q V U) (Py P B P)))))))
+++++
rewrite (elim_py_inter_ll_right Y B P Q U V Y H).
-----
Theorem elim_py_inter_ll_left_right : forall B P Q U V Y : Point, inter_ll Y P Q U V -> Py Y B Y = 1 / S4 P U Q V * (S P U V * (1 / S4 P U Q V * (S P U V * Py Q B Q + S Q V U * Py Q B P)) + S Q V U * (1 / S4 P U Q V * (S P U V * Py P B Q + S Q V U * Py P B P))).
Proof.
intros.
rewrite (elim_py_inter_ll_right Y B P Q U V Y H).

*****
H : inter_ll Y P Q U V
B,P,Q,U,V,Y : Point
*****
eq (Fmult (Fdiv F1 (S4 P U Q V)) (Fplus (Fmult (S P U V) (Py Y B Q)) (Fmult (S Q V U) (Py Y B P)))) (Fmult (Fdiv F1 (S4 P U Q V)) (Fplus (Fmult (S P U V) (Fmult (Fdiv F1 (S4 P U Q V)) (Fplus (Fmult (S P U V) (Py Q B Q)) (Fmult (S Q V U) (Py Q B P))))) (Fmult (S Q V U) (Fmult (Fdiv F1 (S4 P U Q V)) (Fplus (Fmult (S P U V) (Py P B Q)) (Fmult (S Q V U) (Py P B P)))))))
+++++
replace (Py Y B P) with (Py P B Y) by auto with Geom.
-----
Theorem elim_py_inter_ll_left_right : forall B P Q U V Y : Point, inter_ll Y P Q U V -> Py Y B Y = 1 / S4 P U Q V * (S P U V * (1 / S4 P U Q V * (S P U V * Py Q B Q + S Q V U * Py Q B P)) + S Q V U * (1 / S4 P U Q V * (S P U V * Py P B Q + S Q V U * Py P B P))).
Proof.
intros.
rewrite (elim_py_inter_ll_right Y B P Q U V Y H).
replace (Py Y B P) with (Py P B Y) by auto with Geom.

*****
H : inter_ll Y P Q U V
B,P,Q,U,V,Y : Point
*****
eq (Fmult (Fdiv F1 (S4 P U Q V)) (Fplus (Fmult (S P U V) (Py Y B Q)) (Fmult (S Q V U) (Py P B Y)))) (Fmult (Fdiv F1 (S4 P U Q V)) (Fplus (Fmult (S P U V) (Fmult (Fdiv F1 (S4 P U Q V)) (Fplus (Fmult (S P U V) (Py Q B Q)) (Fmult (S Q V U) (Py Q B P))))) (Fmult (S Q V U) (Fmult (Fdiv F1 (S4 P U Q V)) (Fplus (Fmult (S P U V) (Py P B Q)) (Fmult (S Q V U) (Py P B P)))))))
+++++
replace (Py Y B Q) with (Py Q B Y) by auto with Geom.
-----
Theorem elim_py_inter_ll_left_right : forall B P Q U V Y : Point, inter_ll Y P Q U V -> Py Y B Y = 1 / S4 P U Q V * (S P U V * (1 / S4 P U Q V * (S P U V * Py Q B Q + S Q V U * Py Q B P)) + S Q V U * (1 / S4 P U Q V * (S P U V * Py P B Q + S Q V U * Py P B P))).
Proof.
intros.
rewrite (elim_py_inter_ll_right Y B P Q U V Y H).
replace (Py Y B P) with (Py P B Y) by auto with Geom.
replace (Py Y B Q) with (Py Q B Y) by auto with Geom.

*****
H : inter_ll Y P Q U V
B,P,Q,U,V,Y : Point
*****
eq (Fmult (Fdiv F1 (S4 P U Q V)) (Fplus (Fmult (S P U V) (Py Q B Y)) (Fmult (S Q V U) (Py P B Y)))) (Fmult (Fdiv F1 (S4 P U Q V)) (Fplus (Fmult (S P U V) (Fmult (Fdiv F1 (S4 P U Q V)) (Fplus (Fmult (S P U V) (Py Q B Q)) (Fmult (S Q V U) (Py Q B P))))) (Fmult (S Q V U) (Fmult (Fdiv F1 (S4 P U Q V)) (Fplus (Fmult (S P U V) (Py P B Q)) (Fmult (S Q V U) (Py P B P)))))))
+++++
rewrite (elim_py_inter_ll_right Q B P Q U V Y H).
-----
Theorem elim_py_inter_ll_left_right : forall B P Q U V Y : Point, inter_ll Y P Q U V -> Py Y B Y = 1 / S4 P U Q V * (S P U V * (1 / S4 P U Q V * (S P U V * Py Q B Q + S Q V U * Py Q B P)) + S Q V U * (1 / S4 P U Q V * (S P U V * Py P B Q + S Q V U * Py P B P))).
Proof.
intros.
rewrite (elim_py_inter_ll_right Y B P Q U V Y H).
replace (Py Y B P) with (Py P B Y) by auto with Geom.
replace (Py Y B Q) with (Py Q B Y) by auto with Geom.
rewrite (elim_py_inter_ll_right Q B P Q U V Y H).

*****
H : inter_ll Y P Q U V
B,P,Q,U,V,Y : Point
*****
eq (Fmult (Fdiv F1 (S4 P U Q V)) (Fplus (Fmult (S P U V) (Fmult (Fdiv F1 (S4 P U Q V)) (Fplus (Fmult (S P U V) (Py Q B Q)) (Fmult (S Q V U) (Py Q B P))))) (Fmult (S Q V U) (Py P B Y)))) (Fmult (Fdiv F1 (S4 P U Q V)) (Fplus (Fmult (S P U V) (Fmult (Fdiv F1 (S4 P U Q V)) (Fplus (Fmult (S P U V) (Py Q B Q)) (Fmult (S Q V U) (Py Q B P))))) (Fmult (S Q V U) (Fmult (Fdiv F1 (S4 P U Q V)) (Fplus (Fmult (S P U V) (Py P B Q)) (Fmult (S Q V U) (Py P B P)))))))
+++++
rewrite (elim_py_inter_ll_right P B P Q U V Y H).
-----
Theorem elim_py_inter_ll_left_right : forall B P Q U V Y : Point, inter_ll Y P Q U V -> Py Y B Y = 1 / S4 P U Q V * (S P U V * (1 / S4 P U Q V * (S P U V * Py Q B Q + S Q V U * Py Q B P)) + S Q V U * (1 / S4 P U Q V * (S P U V * Py P B Q + S Q V U * Py P B P))).
Proof.
intros.
rewrite (elim_py_inter_ll_right Y B P Q U V Y H).
replace (Py Y B P) with (Py P B Y) by auto with Geom.
replace (Py Y B Q) with (Py Q B Y) by auto with Geom.
rewrite (elim_py_inter_ll_right Q B P Q U V Y H).
rewrite (elim_py_inter_ll_right P B P Q U V Y H).

*****
H : inter_ll Y P Q U V
B,P,Q,U,V,Y : Point
*****
eq (Fmult (Fdiv F1 (S4 P U Q V)) (Fplus (Fmult (S P U V) (Fmult (Fdiv F1 (S4 P U Q V)) (Fplus (Fmult (S P U V) (Py Q B Q)) (Fmult (S Q V U) (Py Q B P))))) (Fmult (S Q V U) (Fmult (Fdiv F1 (S4 P U Q V)) (Fplus (Fmult (S P U V) (Py P B Q)) (Fmult (S Q V U) (Py P B P))))))) (Fmult (Fdiv F1 (S4 P U Q V)) (Fplus (Fmult (S P U V) (Fmult (Fdiv F1 (S4 P U Q V)) (Fplus (Fmult (S P U V) (Py Q B Q)) (Fmult (S Q V U) (Py Q B P))))) (Fmult (S Q V U) (Fmult (Fdiv F1 (S4 P U Q V)) (Fplus (Fmult (S P U V) (Py P B Q)) (Fmult (S Q V U) (Py P B P)))))))
+++++
auto.
-----
Theorem elim_py_inter_ll_left_right : forall B P Q U V Y : Point, inter_ll Y P Q U V -> Py Y B Y = 1 / S4 P U Q V * (S P U V * (1 / S4 P U Q V * (S P U V * Py Q B Q + S Q V U * Py Q B P)) + S Q V U * (1 / S4 P U Q V * (S P U V * Py P B Q + S Q V U * Py P B P))).
Proof.
intros.
rewrite (elim_py_inter_ll_right Y B P Q U V Y H).
replace (Py Y B P) with (Py P B Y) by auto with Geom.
replace (Py Y B Q) with (Py Q B Y) by auto with Geom.
rewrite (elim_py_inter_ll_right Q B P Q U V Y H).
rewrite (elim_py_inter_ll_right P B P Q U V Y H).
auto.

*****

*****

+++++
Qed.
-----
Theorem elim_py_inter_ll_left_right_invariant :\n forall B P Q U V Y : Point,\n inter_ll Y P Q U V -> S4 P U Q V <> 0.
-----
Theorem elim_py_inter_ll_left_right_invariant : forall B P Q U V Y : Point, inter_ll Y P Q U V -> S4 P U Q V <> 0.

*****

*****
forall (_ : Point) (P Q U V Y : Point) (_ : inter_ll Y P Q U V), not (eq (S4 P U Q V) F0)
+++++
Proof.
-----
Theorem elim_py_inter_ll_left_right_invariant : forall B P Q U V Y : Point, inter_ll Y P Q U V -> S4 P U Q V <> 0.
Proof.

*****

*****
forall (_ : Point) (P Q U V Y : Point) (_ : inter_ll Y P Q U V), not (eq (S4 P U Q V) F0)
+++++
intros.
-----
Theorem elim_py_inter_ll_left_right_invariant : forall B P Q U V Y : Point, inter_ll Y P Q U V -> S4 P U Q V <> 0.
Proof.
intros.

*****
H : inter_ll Y P Q U V
B,P,Q,U,V,Y : Point
*****
not (eq (S4 P U Q V) F0)
+++++
unfold inter_ll, parallel in H.
-----
Theorem elim_py_inter_ll_left_right_invariant : forall B P Q U V Y : Point, inter_ll Y P Q U V -> S4 P U Q V <> 0.
Proof.
intros.
unfold inter_ll, parallel in H.

*****
H : and (Col Y P Q) (and (Col Y U V) (not (eq (S4 P U Q V) F0)))
B,P,Q,U,V,Y : Point
*****
not (eq (S4 P U Q V) F0)
+++++
intuition.
-----
Theorem elim_py_inter_ll_left_right_invariant : forall B P Q U V Y : Point, inter_ll Y P Q U V -> S4 P U Q V <> 0.
Proof.
intros.
unfold inter_ll, parallel in H.
intuition.

*****

*****

+++++
Qed.
-----
Theorem elim_py_inter_ll_middle :\n forall A B P Q U V Y : Point,\n inter_ll Y P Q U V ->\n Py A Y B = - (S P V U / S4 P U Q V) * Py A Q B + - (S Q U V / S4 P U Q V) * Py A P B -\n- (S P V U / S4 P U Q V) * - (S Q U V / S4 P U Q V) * Py P Q P.
-----
Theorem elim_py_inter_ll_middle : forall A B P Q U V Y : Point, inter_ll Y P Q U V -> Py A Y B = - (S P V U / S4 P U Q V) * Py A Q B + - (S Q U V / S4 P U Q V) * Py A P B - - (S P V U / S4 P U Q V) * - (S Q U V / S4 P U Q V) * Py P Q P.

*****

*****
forall (A B P Q U V Y : Point) (_ : inter_ll Y P Q U V), eq (Py A Y B) (Fminus (Fplus (Fmult (Fopp (Fdiv (S P V U) (S4 P U Q V))) (Py A Q B)) (Fmult (Fopp (Fdiv (S Q U V) (S4 P U Q V))) (Py A P B))) (Fmult (Fmult (Fopp (Fdiv (S P V U) (S4 P U Q V))) (Fopp (Fdiv (S Q U V) (S4 P U Q V)))) (Py P Q P)))
+++++
Proof.
-----
Theorem elim_py_inter_ll_middle : forall A B P Q U V Y : Point, inter_ll Y P Q U V -> Py A Y B = - (S P V U / S4 P U Q V) * Py A Q B + - (S Q U V / S4 P U Q V) * Py A P B - - (S P V U / S4 P U Q V) * - (S Q U V / S4 P U Q V) * Py P Q P.
Proof.

*****

*****
forall (A B P Q U V Y : Point) (_ : inter_ll Y P Q U V), eq (Py A Y B) (Fminus (Fplus (Fmult (Fopp (Fdiv (S P V U) (S4 P U Q V))) (Py A Q B)) (Fmult (Fopp (Fdiv (S Q U V) (S4 P U Q V))) (Py A P B))) (Fmult (Fmult (Fopp (Fdiv (S P V U) (S4 P U Q V))) (Fopp (Fdiv (S Q U V) (S4 P U Q V)))) (Py P Q P)))
+++++
intros.
-----
Theorem elim_py_inter_ll_middle : forall A B P Q U V Y : Point, inter_ll Y P Q U V -> Py A Y B = - (S P V U / S4 P U Q V) * Py A Q B + - (S Q U V / S4 P U Q V) * Py A P B - - (S P V U / S4 P U Q V) * - (S Q U V / S4 P U Q V) * Py P Q P.
Proof.
intros.

*****
H : inter_ll Y P Q U V
A,B,P,Q,U,V,Y : Point
*****
eq (Py A Y B) (Fminus (Fplus (Fmult (Fopp (Fdiv (S P V U) (S4 P U Q V))) (Py A Q B)) (Fmult (Fopp (Fdiv (S Q U V) (S4 P U Q V))) (Py A P B))) (Fmult (Fmult (Fopp (Fdiv (S P V U) (S4 P U Q V))) (Fopp (Fdiv (S Q U V) (S4 P U Q V)))) (Py P Q P)))
+++++
unfold inter_ll in H.
-----
Theorem elim_py_inter_ll_middle : forall A B P Q U V Y : Point, inter_ll Y P Q U V -> Py A Y B = - (S P V U / S4 P U Q V) * Py A Q B + - (S Q U V / S4 P U Q V) * Py A P B - - (S P V U / S4 P U Q V) * - (S Q U V / S4 P U Q V) * Py P Q P.
Proof.
intros.
unfold inter_ll in H.

*****
H : and (Col Y P Q) (and (Col Y U V) (not (parallel P Q U V)))
A,B,P,Q,U,V,Y : Point
*****
eq (Py A Y B) (Fminus (Fplus (Fmult (Fopp (Fdiv (S P V U) (S4 P U Q V))) (Py A Q B)) (Fmult (Fopp (Fdiv (S Q U V) (S4 P U Q V))) (Py A P B))) (Fmult (Fmult (Fopp (Fdiv (S P V U) (S4 P U Q V))) (Fopp (Fdiv (S Q U V) (S4 P U Q V)))) (Py P Q P)))
+++++
decompose [and] H.
-----
Theorem elim_py_inter_ll_middle : forall A B P Q U V Y : Point, inter_ll Y P Q U V -> Py A Y B = - (S P V U / S4 P U Q V) * Py A Q B + - (S Q U V / S4 P U Q V) * Py A P B - - (S P V U / S4 P U Q V) * - (S Q U V / S4 P U Q V) * Py P Q P.
Proof.
intros.
unfold inter_ll in H.
decompose [and] H.

*****
H3 : not (parallel P Q U V)
H2 : Col Y U V
H0 : Col Y P Q
H : and (Col Y P Q) (and (Col Y U V) (not (parallel P Q U V)))
A,B,P,Q,U,V,Y : Point
*****
eq (Py A Y B) (Fminus (Fplus (Fmult (Fopp (Fdiv (S P V U) (S4 P U Q V))) (Py A Q B)) (Fmult (Fopp (Fdiv (S Q U V) (S4 P U Q V))) (Py A P B))) (Fmult (Fmult (Fopp (Fdiv (S P V U) (S4 P U Q V))) (Fopp (Fdiv (S Q U V) (S4 P U Q V)))) (Py P Q P)))
+++++
clear H.
-----
Theorem elim_py_inter_ll_middle : forall A B P Q U V Y : Point, inter_ll Y P Q U V -> Py A Y B = - (S P V U / S4 P U Q V) * Py A Q B + - (S Q U V / S4 P U Q V) * Py A P B - - (S P V U / S4 P U Q V) * - (S Q U V / S4 P U Q V) * Py P Q P.
Proof.
intros.
unfold inter_ll in H.
decompose [and] H.
clear H.

*****
H3 : not (parallel P Q U V)
H2 : Col Y U V
H0 : Col Y P Q
A,B,P,Q,U,V,Y : Point
*****
eq (Py A Y B) (Fminus (Fplus (Fmult (Fopp (Fdiv (S P V U) (S4 P U Q V))) (Py A Q B)) (Fmult (Fopp (Fdiv (S Q U V) (S4 P U Q V))) (Py A P B))) (Fmult (Fmult (Fopp (Fdiv (S P V U) (S4 P U Q V))) (Fopp (Fdiv (S Q U V) (S4 P U Q V)))) (Py P Q P)))
+++++
assert (P<>Q).
-----
Theorem elim_py_inter_ll_middle : forall A B P Q U V Y : Point, inter_ll Y P Q U V -> Py A Y B = - (S P V U / S4 P U Q V) * Py A Q B + - (S Q U V / S4 P U Q V) * Py A P B - - (S P V U / S4 P U Q V) * - (S Q U V / S4 P U Q V) * Py P Q P.
Proof.
intros.
unfold inter_ll in H.
decompose [and] H.
clear H.
assert (P<>Q).

*****
H3 : not (parallel P Q U V)
H2 : Col Y U V
H0 : Col Y P Q
A,B,P,Q,U,V,Y : Point
*****
not (eq P Q)
+++++
eauto with Geom.
-----
Theorem elim_py_inter_ll_middle : forall A B P Q U V Y : Point, inter_ll Y P Q U V -> Py A Y B = - (S P V U / S4 P U Q V) * Py A Q B + - (S Q U V / S4 P U Q V) * Py A P B - - (S P V U / S4 P U Q V) * - (S Q U V / S4 P U Q V) * Py P Q P.
Proof.
intros.
unfold inter_ll in H.
decompose [and] H.
clear H.
assert (P<>Q).

*****
H : not (eq P Q)
H3 : not (parallel P Q U V)
H2 : Col Y U V
H0 : Col Y P Q
A,B,P,Q,U,V,Y : Point
*****
eq (Py A Y B) (Fminus (Fplus (Fmult (Fopp (Fdiv (S P V U) (S4 P U Q V))) (Py A Q B)) (Fmult (Fopp (Fdiv (S Q U V) (S4 P U Q V))) (Py A P B))) (Fmult (Fmult (Fopp (Fdiv (S P V U) (S4 P U Q V))) (Fopp (Fdiv (S Q U V) (S4 P U Q V)))) (Py P Q P)))
+++++
rewrite (l3_5_py A B P Q Y).
-----
Theorem elim_py_inter_ll_middle : forall A B P Q U V Y : Point, inter_ll Y P Q U V -> Py A Y B = - (S P V U / S4 P U Q V) * Py A Q B + - (S Q U V / S4 P U Q V) * Py A P B - - (S P V U / S4 P U Q V) * - (S Q U V / S4 P U Q V) * Py P Q P.
Proof.
intros.
unfold inter_ll in H.
decompose [and] H.
clear H.
assert (P<>Q).
rewrite (l3_5_py A B P Q Y).

*****
H : not (eq P Q)
H3 : not (parallel P Q U V)
H2 : Col Y U V
H0 : Col Y P Q
A,B,P,Q,U,V,Y : Point
*****
eq (Fminus (Fplus (Fmult (Fdiv (DSeg P Y) (DSeg P Q)) (Py A Q B)) (Fmult (Fdiv (DSeg Y Q) (DSeg P Q)) (Py A P B))) (Fmult (Fmult (Fdiv (DSeg P Y) (DSeg P Q)) (Fdiv (DSeg Y Q) (DSeg P Q))) (Py P Q P))) (Fminus (Fplus (Fmult (Fopp (Fdiv (S P V U) (S4 P U Q V))) (Py A Q B)) (Fmult (Fopp (Fdiv (S Q U V) (S4 P U Q V))) (Py A P B))) (Fmult (Fmult (Fopp (Fdiv (S P V U) (S4 P U Q V))) (Fopp (Fdiv (S Q U V) (S4 P U Q V)))) (Py P Q P)))
+++++
idtac.
-----
Theorem elim_py_inter_ll_middle : forall A B P Q U V Y : Point, inter_ll Y P Q U V -> Py A Y B = - (S P V U / S4 P U Q V) * Py A Q B + - (S Q U V / S4 P U Q V) * Py A P B - - (S P V U / S4 P U Q V) * - (S Q U V / S4 P U Q V) * Py P Q P.
Proof.
intros.
unfold inter_ll in H.
decompose [and] H.
clear H.
assert (P<>Q).
rewrite (l3_5_py A B P Q Y).
idtac.

*****
H : not (eq P Q)
H3 : not (parallel P Q U V)
H2 : Col Y U V
H0 : Col Y P Q
A,B,P,Q,U,V,Y : Point
*****
eq (Fminus (Fplus (Fmult (Fdiv (DSeg P Y) (DSeg P Q)) (Py A Q B)) (Fmult (Fdiv (DSeg Y Q) (DSeg P Q)) (Py A P B))) (Fmult (Fmult (Fdiv (DSeg P Y) (DSeg P Q)) (Fdiv (DSeg Y Q) (DSeg P Q))) (Py P Q P))) (Fminus (Fplus (Fmult (Fopp (Fdiv (S P V U) (S4 P U Q V))) (Py A Q B)) (Fmult (Fopp (Fdiv (S Q U V) (S4 P U Q V))) (Py A P B))) (Fmult (Fmult (Fopp (Fdiv (S P V U) (S4 P U Q V))) (Fopp (Fdiv (S Q U V) (S4 P U Q V)))) (Py P Q P)))
+++++
replace (Y ** Q / P ** Q) with (- (Q ** Y/ P**Q )).
-----
Theorem elim_py_inter_ll_middle : forall A B P Q U V Y : Point, inter_ll Y P Q U V -> Py A Y B = - (S P V U / S4 P U Q V) * Py A Q B + - (S Q U V / S4 P U Q V) * Py A P B - - (S P V U / S4 P U Q V) * - (S Q U V / S4 P U Q V) * Py P Q P.
Proof.
intros.
unfold inter_ll in H.
decompose [and] H.
clear H.
assert (P<>Q).
rewrite (l3_5_py A B P Q Y).
idtac.
replace (Y ** Q / P ** Q) with (- (Q ** Y/ P**Q )).

*****
H : not (eq P Q)
H3 : not (parallel P Q U V)
H2 : Col Y U V
H0 : Col Y P Q
A,B,P,Q,U,V,Y : Point
*****
eq (Fminus (Fplus (Fmult (Fdiv (DSeg P Y) (DSeg P Q)) (Py A Q B)) (Fmult (Fopp (Fdiv (DSeg Q Y) (DSeg P Q))) (Py A P B))) (Fmult (Fmult (Fdiv (DSeg P Y) (DSeg P Q)) (Fopp (Fdiv (DSeg Q Y) (DSeg P Q)))) (Py P Q P))) (Fminus (Fplus (Fmult (Fopp (Fdiv (S P V U) (S4 P U Q V))) (Py A Q B)) (Fmult (Fopp (Fdiv (S Q U V) (S4 P U Q V))) (Py A P B))) (Fmult (Fmult (Fopp (Fdiv (S P V U) (S4 P U Q V))) (Fopp (Fdiv (S Q U V) (S4 P U Q V)))) (Py P Q P)))
+++++
rewrite (co_side_bis U V P Q Y H3).
-----
Theorem elim_py_inter_ll_middle : forall A B P Q U V Y : Point, inter_ll Y P Q U V -> Py A Y B = - (S P V U / S4 P U Q V) * Py A Q B + - (S Q U V / S4 P U Q V) * Py A P B - - (S P V U / S4 P U Q V) * - (S Q U V / S4 P U Q V) * Py P Q P.
Proof.
intros.
unfold inter_ll in H.
decompose [and] H.
clear H.
assert (P<>Q).
rewrite (l3_5_py A B P Q Y).
idtac.
replace (Y ** Q / P ** Q) with (- (Q ** Y/ P**Q )).
rewrite (co_side_bis U V P Q Y H3).

*****
H : not (eq P Q)
H3 : not (parallel P Q U V)
H2 : Col Y U V
H0 : Col Y P Q
A,B,P,Q,U,V,Y : Point
*****
eq (Fminus (Fplus (Fmult (Fdiv (DSeg P Y) (DSeg P Q)) (Py A Q B)) (Fmult (Fopp (Fdiv (S Q U V) (S4 P U Q V))) (Py A P B))) (Fmult (Fmult (Fdiv (DSeg P Y) (DSeg P Q)) (Fopp (Fdiv (S Q U V) (S4 P U Q V)))) (Py P Q P))) (Fminus (Fplus (Fmult (Fopp (Fdiv (S P V U) (S4 P U Q V))) (Py A Q B)) (Fmult (Fopp (Fdiv (S Q U V) (S4 P U Q V))) (Py A P B))) (Fmult (Fmult (Fopp (Fdiv (S P V U) (S4 P U Q V))) (Fopp (Fdiv (S Q U V) (S4 P U Q V)))) (Py P Q P)))
+++++
idtac.
-----
Theorem elim_py_inter_ll_middle : forall A B P Q U V Y : Point, inter_ll Y P Q U V -> Py A Y B = - (S P V U / S4 P U Q V) * Py A Q B + - (S Q U V / S4 P U Q V) * Py A P B - - (S P V U / S4 P U Q V) * - (S Q U V / S4 P U Q V) * Py P Q P.
Proof.
intros.
unfold inter_ll in H.
decompose [and] H.
clear H.
assert (P<>Q).
rewrite (l3_5_py A B P Q Y).
idtac.
replace (Y ** Q / P ** Q) with (- (Q ** Y/ P**Q )).
rewrite (co_side_bis U V P Q Y H3).
idtac.

*****
H : not (eq P Q)
H3 : not (parallel P Q U V)
H2 : Col Y U V
H0 : Col Y P Q
A,B,P,Q,U,V,Y : Point
*****
eq (Fminus (Fplus (Fmult (Fdiv (DSeg P Y) (DSeg P Q)) (Py A Q B)) (Fmult (Fopp (Fdiv (S Q U V) (S4 P U Q V))) (Py A P B))) (Fmult (Fmult (Fdiv (DSeg P Y) (DSeg P Q)) (Fopp (Fdiv (S Q U V) (S4 P U Q V)))) (Py P Q P))) (Fminus (Fplus (Fmult (Fopp (Fdiv (S P V U) (S4 P U Q V))) (Py A Q B)) (Fmult (Fopp (Fdiv (S Q U V) (S4 P U Q V))) (Py A P B))) (Fmult (Fmult (Fopp (Fdiv (S P V U) (S4 P U Q V))) (Fopp (Fdiv (S Q U V) (S4 P U Q V)))) (Py P Q P)))
+++++
replace (P ** Y / P ** Q) with (- (P ** Y / Q ** P)).
-----
Theorem elim_py_inter_ll_middle : forall A B P Q U V Y : Point, inter_ll Y P Q U V -> Py A Y B = - (S P V U / S4 P U Q V) * Py A Q B + - (S Q U V / S4 P U Q V) * Py A P B - - (S P V U / S4 P U Q V) * - (S Q U V / S4 P U Q V) * Py P Q P.
Proof.
intros.
unfold inter_ll in H.
decompose [and] H.
clear H.
assert (P<>Q).
rewrite (l3_5_py A B P Q Y).
idtac.
replace (Y ** Q / P ** Q) with (- (Q ** Y/ P**Q )).
rewrite (co_side_bis U V P Q Y H3).
idtac.
replace (P ** Y / P ** Q) with (- (P ** Y / Q ** P)).

*****
H : not (eq P Q)
H3 : not (parallel P Q U V)
H2 : Col Y U V
H0 : Col Y P Q
A,B,P,Q,U,V,Y : Point
*****
eq (Fminus (Fplus (Fmult (Fopp (Fdiv (DSeg P Y) (DSeg Q P))) (Py A Q B)) (Fmult (Fopp (Fdiv (S Q U V) (S4 P U Q V))) (Py A P B))) (Fmult (Fmult (Fopp (Fdiv (DSeg P Y) (DSeg Q P))) (Fopp (Fdiv (S Q U V) (S4 P U Q V)))) (Py P Q P))) (Fminus (Fplus (Fmult (Fopp (Fdiv (S P V U) (S4 P U Q V))) (Py A Q B)) (Fmult (Fopp (Fdiv (S Q U V) (S4 P U Q V))) (Py A P B))) (Fmult (Fmult (Fopp (Fdiv (S P V U) (S4 P U Q V))) (Fopp (Fdiv (S Q U V) (S4 P U Q V)))) (Py P Q P)))
+++++
rewrite (co_side_bis V U Q P Y).
-----
Theorem elim_py_inter_ll_middle : forall A B P Q U V Y : Point, inter_ll Y P Q U V -> Py A Y B = - (S P V U / S4 P U Q V) * Py A Q B + - (S Q U V / S4 P U Q V) * Py A P B - - (S P V U / S4 P U Q V) * - (S Q U V / S4 P U Q V) * Py P Q P.
Proof.
intros.
unfold inter_ll in H.
decompose [and] H.
clear H.
assert (P<>Q).
rewrite (l3_5_py A B P Q Y).
idtac.
replace (Y ** Q / P ** Q) with (- (Q ** Y/ P**Q )).
rewrite (co_side_bis U V P Q Y H3).
idtac.
replace (P ** Y / P ** Q) with (- (P ** Y / Q ** P)).
rewrite (co_side_bis V U Q P Y).

*****
H : not (eq P Q)
H3 : not (parallel P Q U V)
H2 : Col Y U V
H0 : Col Y P Q
A,B,P,Q,U,V,Y : Point
*****
eq (Fminus (Fplus (Fmult (Fopp (Fdiv (S P V U) (S4 Q V P U))) (Py A Q B)) (Fmult (Fopp (Fdiv (S Q U V) (S4 P U Q V))) (Py A P B))) (Fmult (Fmult (Fopp (Fdiv (S P V U) (S4 Q V P U))) (Fopp (Fdiv (S Q U V) (S4 P U Q V)))) (Py P Q P))) (Fminus (Fplus (Fmult (Fopp (Fdiv (S P V U) (S4 P U Q V))) (Py A Q B)) (Fmult (Fopp (Fdiv (S Q U V) (S4 P U Q V))) (Py A P B))) (Fmult (Fmult (Fopp (Fdiv (S P V U) (S4 P U Q V))) (Fopp (Fdiv (S Q U V) (S4 P U Q V)))) (Py P Q P)))
+++++
replace (S4 Q V P U) with (S4 P U Q V) by auto with Geom.
-----
Theorem elim_py_inter_ll_middle : forall A B P Q U V Y : Point, inter_ll Y P Q U V -> Py A Y B = - (S P V U / S4 P U Q V) * Py A Q B + - (S Q U V / S4 P U Q V) * Py A P B - - (S P V U / S4 P U Q V) * - (S Q U V / S4 P U Q V) * Py P Q P.
Proof.
intros.
unfold inter_ll in H.
decompose [and] H.
clear H.
assert (P<>Q).
rewrite (l3_5_py A B P Q Y).
idtac.
replace (Y ** Q / P ** Q) with (- (Q ** Y/ P**Q )).
rewrite (co_side_bis U V P Q Y H3).
idtac.
replace (P ** Y / P ** Q) with (- (P ** Y / Q ** P)).
rewrite (co_side_bis V U Q P Y).
replace (S4 Q V P U) with (S4 P U Q V) by auto with Geom.

*****
H : not (eq P Q)
H3 : not (parallel P Q U V)
H2 : Col Y U V
H0 : Col Y P Q
A,B,P,Q,U,V,Y : Point
*****
eq (Fminus (Fplus (Fmult (Fopp (Fdiv (S P V U) (S4 P U Q V))) (Py A Q B)) (Fmult (Fopp (Fdiv (S Q U V) (S4 P U Q V))) (Py A P B))) (Fmult (Fmult (Fopp (Fdiv (S P V U) (S4 P U Q V))) (Fopp (Fdiv (S Q U V) (S4 P U Q V)))) (Py P Q P))) (Fminus (Fplus (Fmult (Fopp (Fdiv (S P V U) (S4 P U Q V))) (Py A Q B)) (Fmult (Fopp (Fdiv (S Q U V) (S4 P U Q V))) (Py A P B))) (Fmult (Fmult (Fopp (Fdiv (S P V U) (S4 P U Q V))) (Fopp (Fdiv (S Q U V) (S4 P U Q V)))) (Py P Q P)))
+++++
auto.
-----
Theorem elim_py_inter_ll_middle : forall A B P Q U V Y : Point, inter_ll Y P Q U V -> Py A Y B = - (S P V U / S4 P U Q V) * Py A Q B + - (S Q U V / S4 P U Q V) * Py A P B - - (S P V U / S4 P U Q V) * - (S Q U V / S4 P U Q V) * Py P Q P.
Proof.
intros.
unfold inter_ll in H.
decompose [and] H.
clear H.
assert (P<>Q).
rewrite (l3_5_py A B P Q Y).
idtac.
replace (Y ** Q / P ** Q) with (- (Q ** Y/ P**Q )).
rewrite (co_side_bis U V P Q Y H3).
idtac.
replace (P ** Y / P ** Q) with (- (P ** Y / Q ** P)).
rewrite (co_side_bis V U Q P Y).

*****
H : not (eq P Q)
H3 : not (parallel P Q U V)
H2 : Col Y U V
H0 : Col Y P Q
A,B,P,Q,U,V,Y : Point
*****
not (parallel Q P V U)
+++++
intro.
-----
Theorem elim_py_inter_ll_middle : forall A B P Q U V Y : Point, inter_ll Y P Q U V -> Py A Y B = - (S P V U / S4 P U Q V) * Py A Q B + - (S Q U V / S4 P U Q V) * Py A P B - - (S P V U / S4 P U Q V) * - (S Q U V / S4 P U Q V) * Py P Q P.
Proof.
intros.
unfold inter_ll in H.
decompose [and] H.
clear H.
assert (P<>Q).
rewrite (l3_5_py A B P Q Y).
idtac.
replace (Y ** Q / P ** Q) with (- (Q ** Y/ P**Q )).
rewrite (co_side_bis U V P Q Y H3).
idtac.
replace (P ** Y / P ** Q) with (- (P ** Y / Q ** P)).
rewrite (co_side_bis V U Q P Y).
intro.

*****
H1 : parallel Q P V U
H : not (eq P Q)
H3 : not (parallel P Q U V)
H2 : Col Y U V
H0 : Col Y P Q
A,B,P,Q,U,V,Y : Point
*****
False
+++++
assert (parallel P Q U V).
-----
Theorem elim_py_inter_ll_middle : forall A B P Q U V Y : Point, inter_ll Y P Q U V -> Py A Y B = - (S P V U / S4 P U Q V) * Py A Q B + - (S Q U V / S4 P U Q V) * Py A P B - - (S P V U / S4 P U Q V) * - (S Q U V / S4 P U Q V) * Py P Q P.
Proof.
intros.
unfold inter_ll in H.
decompose [and] H.
clear H.
assert (P<>Q).
rewrite (l3_5_py A B P Q Y).
idtac.
replace (Y ** Q / P ** Q) with (- (Q ** Y/ P**Q )).
rewrite (co_side_bis U V P Q Y H3).
idtac.
replace (P ** Y / P ** Q) with (- (P ** Y / Q ** P)).
rewrite (co_side_bis V U Q P Y).
intro.
assert (parallel P Q U V).

*****
H1 : parallel Q P V U
H : not (eq P Q)
H3 : not (parallel P Q U V)
H2 : Col Y U V
H0 : Col Y P Q
A,B,P,Q,U,V,Y : Point
*****
parallel P Q U V
+++++
auto with Geom.
-----
Theorem elim_py_inter_ll_middle : forall A B P Q U V Y : Point, inter_ll Y P Q U V -> Py A Y B = - (S P V U / S4 P U Q V) * Py A Q B + - (S Q U V / S4 P U Q V) * Py A P B - - (S P V U / S4 P U Q V) * - (S Q U V / S4 P U Q V) * Py P Q P.
Proof.
intros.
unfold inter_ll in H.
decompose [and] H.
clear H.
assert (P<>Q).
rewrite (l3_5_py A B P Q Y).
idtac.
replace (Y ** Q / P ** Q) with (- (Q ** Y/ P**Q )).
rewrite (co_side_bis U V P Q Y H3).
idtac.
replace (P ** Y / P ** Q) with (- (P ** Y / Q ** P)).
rewrite (co_side_bis V U Q P Y).
intro.
assert (parallel P Q U V).

*****
H4 : parallel P Q U V
H1 : parallel Q P V U
H : not (eq P Q)
H3 : not (parallel P Q U V)
H2 : Col Y U V
H0 : Col Y P Q
A,B,P,Q,U,V,Y : Point
*****
False
+++++
auto with Geom.
-----
Theorem elim_py_inter_ll_middle : forall A B P Q U V Y : Point, inter_ll Y P Q U V -> Py A Y B = - (S P V U / S4 P U Q V) * Py A Q B + - (S Q U V / S4 P U Q V) * Py A P B - - (S P V U / S4 P U Q V) * - (S Q U V / S4 P U Q V) * Py P Q P.
Proof.
intros.
unfold inter_ll in H.
decompose [and] H.
clear H.
assert (P<>Q).
rewrite (l3_5_py A B P Q Y).
idtac.
replace (Y ** Q / P ** Q) with (- (Q ** Y/ P**Q )).
rewrite (co_side_bis U V P Q Y H3).
idtac.
replace (P ** Y / P ** Q) with (- (P ** Y / Q ** P)).
rewrite (co_side_bis V U Q P Y).

*****
H : not (eq P Q)
H3 : not (parallel P Q U V)
H2 : Col Y U V
H0 : Col Y P Q
A,B,P,Q,U,V,Y : Point
*****
Col V U Y
+++++
auto with Geom.
-----
Theorem elim_py_inter_ll_middle : forall A B P Q U V Y : Point, inter_ll Y P Q U V -> Py A Y B = - (S P V U / S4 P U Q V) * Py A Q B + - (S Q U V / S4 P U Q V) * Py A P B - - (S P V U / S4 P U Q V) * - (S Q U V / S4 P U Q V) * Py P Q P.
Proof.
intros.
unfold inter_ll in H.
decompose [and] H.
clear H.
assert (P<>Q).
rewrite (l3_5_py A B P Q Y).
idtac.
replace (Y ** Q / P ** Q) with (- (Q ** Y/ P**Q )).
rewrite (co_side_bis U V P Q Y H3).
idtac.
replace (P ** Y / P ** Q) with (- (P ** Y / Q ** P)).
rewrite (co_side_bis V U Q P Y).

*****
H : not (eq P Q)
H3 : not (parallel P Q U V)
H2 : Col Y U V
H0 : Col Y P Q
A,B,P,Q,U,V,Y : Point
*****
Col Q P Y
+++++
auto with Geom.
-----
Theorem elim_py_inter_ll_middle : forall A B P Q U V Y : Point, inter_ll Y P Q U V -> Py A Y B = - (S P V U / S4 P U Q V) * Py A Q B + - (S Q U V / S4 P U Q V) * Py A P B - - (S P V U / S4 P U Q V) * - (S Q U V / S4 P U Q V) * Py P Q P.
Proof.
intros.
unfold inter_ll in H.
decompose [and] H.
clear H.
assert (P<>Q).
rewrite (l3_5_py A B P Q Y).
idtac.
replace (Y ** Q / P ** Q) with (- (Q ** Y/ P**Q )).
rewrite (co_side_bis U V P Q Y H3).
idtac.
replace (P ** Y / P ** Q) with (- (P ** Y / Q ** P)).

*****
H : not (eq P Q)
H3 : not (parallel P Q U V)
H2 : Col Y U V
H0 : Col Y P Q
A,B,P,Q,U,V,Y : Point
*****
eq (Fopp (Fdiv (DSeg P Y) (DSeg Q P))) (Fdiv (DSeg P Y) (DSeg P Q))
+++++
rewrite dirseg_4 at 1.
-----
Theorem elim_py_inter_ll_middle : forall A B P Q U V Y : Point, inter_ll Y P Q U V -> Py A Y B = - (S P V U / S4 P U Q V) * Py A Q B + - (S Q U V / S4 P U Q V) * Py A P B - - (S P V U / S4 P U Q V) * - (S Q U V / S4 P U Q V) * Py P Q P.
Proof.
intros.
unfold inter_ll in H.
decompose [and] H.
clear H.
assert (P<>Q).
rewrite (l3_5_py A B P Q Y).
idtac.
replace (Y ** Q / P ** Q) with (- (Q ** Y/ P**Q )).
rewrite (co_side_bis U V P Q Y H3).
idtac.
replace (P ** Y / P ** Q) with (- (P ** Y / Q ** P)).
rewrite dirseg_4 at 1.

*****
H : not (eq P Q)
H3 : not (parallel P Q U V)
H2 : Col Y U V
H0 : Col Y P Q
A,B,P,Q,U,V,Y : Point
*****
eq (Fopp (Fopp (Fdiv (DSeg P Y) (DSeg P Q)))) (Fdiv (DSeg P Y) (DSeg P Q))
+++++
ring.
-----
Theorem elim_py_inter_ll_middle : forall A B P Q U V Y : Point, inter_ll Y P Q U V -> Py A Y B = - (S P V U / S4 P U Q V) * Py A Q B + - (S Q U V / S4 P U Q V) * Py A P B - - (S P V U / S4 P U Q V) * - (S Q U V / S4 P U Q V) * Py P Q P.
Proof.
intros.
unfold inter_ll in H.
decompose [and] H.
clear H.
assert (P<>Q).
rewrite (l3_5_py A B P Q Y).
idtac.
replace (Y ** Q / P ** Q) with (- (Q ** Y/ P**Q )).
rewrite (co_side_bis U V P Q Y H3).
idtac.
replace (P ** Y / P ** Q) with (- (P ** Y / Q ** P)).
rewrite dirseg_4 at 1.

*****
H : not (eq P Q)
H3 : not (parallel P Q U V)
H2 : Col Y U V
H0 : Col Y P Q
A,B,P,Q,U,V,Y : Point
*****
not (eq (DSeg Q P) F0)
+++++
auto with Geom.
-----
Theorem elim_py_inter_ll_middle : forall A B P Q U V Y : Point, inter_ll Y P Q U V -> Py A Y B = - (S P V U / S4 P U Q V) * Py A Q B + - (S Q U V / S4 P U Q V) * Py A P B - - (S P V U / S4 P U Q V) * - (S Q U V / S4 P U Q V) * Py P Q P.
Proof.
intros.
unfold inter_ll in H.
decompose [and] H.
clear H.
assert (P<>Q).
rewrite (l3_5_py A B P Q Y).
idtac.
replace (Y ** Q / P ** Q) with (- (Q ** Y/ P**Q )).
rewrite (co_side_bis U V P Q Y H3).

*****
H : not (eq P Q)
H3 : not (parallel P Q U V)
H2 : Col Y U V
H0 : Col Y P Q
A,B,P,Q,U,V,Y : Point
*****
Col U V Y
+++++
auto with Geom .
-----
Theorem elim_py_inter_ll_middle : forall A B P Q U V Y : Point, inter_ll Y P Q U V -> Py A Y B = - (S P V U / S4 P U Q V) * Py A Q B + - (S Q U V / S4 P U Q V) * Py A P B - - (S P V U / S4 P U Q V) * - (S Q U V / S4 P U Q V) * Py P Q P.
Proof.
intros.
unfold inter_ll in H.
decompose [and] H.
clear H.
assert (P<>Q).
rewrite (l3_5_py A B P Q Y).
idtac.
replace (Y ** Q / P ** Q) with (- (Q ** Y/ P**Q )).
rewrite (co_side_bis U V P Q Y H3).

*****
H : not (eq P Q)
H3 : not (parallel P Q U V)
H2 : Col Y U V
H0 : Col Y P Q
A,B,P,Q,U,V,Y : Point
*****
Col P Q Y
+++++
auto with Geom .
-----
Theorem elim_py_inter_ll_middle : forall A B P Q U V Y : Point, inter_ll Y P Q U V -> Py A Y B = - (S P V U / S4 P U Q V) * Py A Q B + - (S Q U V / S4 P U Q V) * Py A P B - - (S P V U / S4 P U Q V) * - (S Q U V / S4 P U Q V) * Py P Q P.
Proof.
intros.
unfold inter_ll in H.
decompose [and] H.
clear H.
assert (P<>Q).
rewrite (l3_5_py A B P Q Y).
idtac.
replace (Y ** Q / P ** Q) with (- (Q ** Y/ P**Q )).

*****
H : not (eq P Q)
H3 : not (parallel P Q U V)
H2 : Col Y U V
H0 : Col Y P Q
A,B,P,Q,U,V,Y : Point
*****
eq (Fopp (Fdiv (DSeg Q Y) (DSeg P Q))) (Fdiv (DSeg Y Q) (DSeg P Q))
+++++
rewrite dirseg_3 at 1.
-----
Theorem elim_py_inter_ll_middle : forall A B P Q U V Y : Point, inter_ll Y P Q U V -> Py A Y B = - (S P V U / S4 P U Q V) * Py A Q B + - (S Q U V / S4 P U Q V) * Py A P B - - (S P V U / S4 P U Q V) * - (S Q U V / S4 P U Q V) * Py P Q P.
Proof.
intros.
unfold inter_ll in H.
decompose [and] H.
clear H.
assert (P<>Q).
rewrite (l3_5_py A B P Q Y).
idtac.
replace (Y ** Q / P ** Q) with (- (Q ** Y/ P**Q )).
rewrite dirseg_3 at 1.

*****
H : not (eq P Q)
H3 : not (parallel P Q U V)
H2 : Col Y U V
H0 : Col Y P Q
A,B,P,Q,U,V,Y : Point
*****
eq (Fopp (Fopp (Fdiv (DSeg Y Q) (DSeg P Q)))) (Fdiv (DSeg Y Q) (DSeg P Q))
+++++
ring.
-----
Theorem elim_py_inter_ll_middle : forall A B P Q U V Y : Point, inter_ll Y P Q U V -> Py A Y B = - (S P V U / S4 P U Q V) * Py A Q B + - (S Q U V / S4 P U Q V) * Py A P B - - (S P V U / S4 P U Q V) * - (S Q U V / S4 P U Q V) * Py P Q P.
Proof.
intros.
unfold inter_ll in H.
decompose [and] H.
clear H.
assert (P<>Q).
rewrite (l3_5_py A B P Q Y).
idtac.
replace (Y ** Q / P ** Q) with (- (Q ** Y/ P**Q )).
rewrite dirseg_3 at 1.

*****
H : not (eq P Q)
H3 : not (parallel P Q U V)
H2 : Col Y U V
H0 : Col Y P Q
A,B,P,Q,U,V,Y : Point
*****
not (eq (DSeg P Q) F0)
+++++
auto with Geom.
-----
Theorem elim_py_inter_ll_middle : forall A B P Q U V Y : Point, inter_ll Y P Q U V -> Py A Y B = - (S P V U / S4 P U Q V) * Py A Q B + - (S Q U V / S4 P U Q V) * Py A P B - - (S P V U / S4 P U Q V) * - (S Q U V / S4 P U Q V) * Py P Q P.
Proof.
intros.
unfold inter_ll in H.
decompose [and] H.
clear H.
assert (P<>Q).
rewrite (l3_5_py A B P Q Y).

*****
H : not (eq P Q)
H3 : not (parallel P Q U V)
H2 : Col Y U V
H0 : Col Y P Q
A,B,P,Q,U,V,Y : Point
*****
not (eq P Q)
+++++
auto .
-----
Theorem elim_py_inter_ll_middle : forall A B P Q U V Y : Point, inter_ll Y P Q U V -> Py A Y B = - (S P V U / S4 P U Q V) * Py A Q B + - (S Q U V / S4 P U Q V) * Py A P B - - (S P V U / S4 P U Q V) * - (S Q U V / S4 P U Q V) * Py P Q P.
Proof.
intros.
unfold inter_ll in H.
decompose [and] H.
clear H.
assert (P<>Q).
rewrite (l3_5_py A B P Q Y).

*****
H : not (eq P Q)
H3 : not (parallel P Q U V)
H2 : Col Y U V
H0 : Col Y P Q
A,B,P,Q,U,V,Y : Point
*****
Col Y P Q
+++++
auto .
-----
Theorem elim_py_inter_ll_middle : forall A B P Q U V Y : Point, inter_ll Y P Q U V -> Py A Y B = - (S P V U / S4 P U Q V) * Py A Q B + - (S Q U V / S4 P U Q V) * Py A P B - - (S P V U / S4 P U Q V) * - (S Q U V / S4 P U Q V) * Py P Q P.
Proof.
intros.
unfold inter_ll in H.
decompose [and] H.
clear H.
assert (P<>Q).

*****

*****

+++++
Qed.
-----
Theorem elim_py_inter_ll_middle_invariant :\n forall A B P Q U V Y : Point,\n inter_ll Y P Q U V -> S4  P U Q V <> 0.
-----
Theorem elim_py_inter_ll_middle_invariant : forall A B P Q U V Y : Point, inter_ll Y P Q U V -> S4 P U Q V <> 0.

*****

*****
forall (_ : Point) (_ : Point) (P Q U V Y : Point) (_ : inter_ll Y P Q U V), not (eq (S4 P U Q V) F0)
+++++
Proof.
-----
Theorem elim_py_inter_ll_middle_invariant : forall A B P Q U V Y : Point, inter_ll Y P Q U V -> S4 P U Q V <> 0.
Proof.

*****

*****
forall (_ : Point) (_ : Point) (P Q U V Y : Point) (_ : inter_ll Y P Q U V), not (eq (S4 P U Q V) F0)
+++++
exact elim_py_inter_ll_right_invariant.
-----
Theorem elim_py_inter_ll_middle_invariant : forall A B P Q U V Y : Point, inter_ll Y P Q U V -> S4 P U Q V <> 0.
Proof.
exact elim_py_inter_ll_right_invariant.

*****

*****

+++++
Qed.
-----
Theorem elim_py_on_foot_right :\n forall A B P U V Y : Point,\n on_foot Y P U V ->\n Py A B Y = (Py P U V * Py A B V + Py P V U * Py A B U) / (Py U V U).
-----
Theorem elim_py_on_foot_right : forall A B P U V Y : Point, on_foot Y P U V -> Py A B Y = (Py P U V * Py A B V + Py P V U * Py A B U) / (Py U V U).

*****

*****
forall (A B P U V Y : Point) (_ : on_foot Y P U V), eq (Py A B Y) (Fdiv (Fplus (Fmult (Py P U V) (Py A B V)) (Fmult (Py P V U) (Py A B U))) (Py U V U))
+++++
Proof.
-----
Theorem elim_py_on_foot_right : forall A B P U V Y : Point, on_foot Y P U V -> Py A B Y = (Py P U V * Py A B V + Py P V U * Py A B U) / (Py U V U).
Proof.

*****

*****
forall (A B P U V Y : Point) (_ : on_foot Y P U V), eq (Py A B Y) (Fdiv (Fplus (Fmult (Py P U V) (Py A B V)) (Fmult (Py P V U) (Py A B U))) (Py U V U))
+++++
intros.
-----
Theorem elim_py_on_foot_right : forall A B P U V Y : Point, on_foot Y P U V -> Py A B Y = (Py P U V * Py A B V + Py P V U * Py A B U) / (Py U V U).
Proof.
intros.

*****
H : on_foot Y P U V
A,B,P,U,V,Y : Point
*****
eq (Py A B Y) (Fdiv (Fplus (Fmult (Py P U V) (Py A B V)) (Fmult (Py P V U) (Py A B U))) (Py U V U))
+++++
unfold on_foot in *.
-----
Theorem elim_py_on_foot_right : forall A B P U V Y : Point, on_foot Y P U V -> Py A B Y = (Py P U V * Py A B V + Py P V U * Py A B U) / (Py U V U).
Proof.
intros.
unfold on_foot in *.

*****
H : and (perp Y P U V) (and (Col Y U V) (not (eq U V)))
A,B,P,U,V,Y : Point
*****
eq (Py A B Y) (Fdiv (Fplus (Fmult (Py P U V) (Py A B V)) (Fmult (Py P V U) (Py A B U))) (Py U V U))
+++++
use H.
-----
Theorem elim_py_on_foot_right : forall A B P U V Y : Point, on_foot Y P U V -> Py A B Y = (Py P U V * Py A B V + Py P V U * Py A B U) / (Py U V U).
Proof.
intros.
unfold on_foot in *.
use H.

*****
H3 : not (eq U V)
H2 : Col Y U V
H0 : perp Y P U V
A,B,P,U,V,Y : Point
*****
eq (Py A B Y) (Fdiv (Fplus (Fmult (Py P U V) (Py A B V)) (Fmult (Py P V U) (Py A B U))) (Py U V U))
+++++
rewrite (l_28_b A B U V).
-----
Theorem elim_py_on_foot_right : forall A B P U V Y : Point, on_foot Y P U V -> Py A B Y = (Py P U V * Py A B V + Py P V U * Py A B U) / (Py U V U).
Proof.
intros.
unfold on_foot in *.
use H.
rewrite (l_28_b A B U V).

*****
H3 : not (eq U V)
H2 : Col Y U V
H0 : perp Y P U V
A,B,P,U,V,Y : Point
*****
eq (Fplus (Fmult (Fdiv (DSeg U Y) (DSeg U V)) (Py A B V)) (Fmult (Fdiv (DSeg Y V) (DSeg U V)) (Py A B U))) (Fdiv (Fplus (Fmult (Py P U V) (Py A B V)) (Fmult (Py P V U) (Py A B U))) (Py U V U))
+++++
idtac.
-----
Theorem elim_py_on_foot_right : forall A B P U V Y : Point, on_foot Y P U V -> Py A B Y = (Py P U V * Py A B V + Py P V U * Py A B U) / (Py U V U).
Proof.
intros.
unfold on_foot in *.
use H.
rewrite (l_28_b A B U V).
idtac.

*****
H3 : not (eq U V)
H2 : Col Y U V
H0 : perp Y P U V
A,B,P,U,V,Y : Point
*****
eq (Fplus (Fmult (Fdiv (DSeg U Y) (DSeg U V)) (Py A B V)) (Fmult (Fdiv (DSeg Y V) (DSeg U V)) (Py A B U))) (Fdiv (Fplus (Fmult (Py P U V) (Py A B V)) (Fmult (Py P V U) (Py A B U))) (Py U V U))
+++++
assert (U**Y/U**V = Py P U V / Py U V U).
-----
Theorem elim_py_on_foot_right : forall A B P U V Y : Point, on_foot Y P U V -> Py A B Y = (Py P U V * Py A B V + Py P V U * Py A B U) / (Py U V U).
Proof.
intros.
unfold on_foot in *.
use H.
rewrite (l_28_b A B U V).
idtac.
assert (U**Y/U**V = Py P U V / Py U V U).

*****
H3 : not (eq U V)
H2 : Col Y U V
H0 : perp Y P U V
A,B,P,U,V,Y : Point
*****
eq (Fdiv (DSeg U Y) (DSeg U V)) (Fdiv (Py P U V) (Py U V U))
+++++
apply l_24_c_on_foot.
-----
Theorem elim_py_on_foot_right : forall A B P U V Y : Point, on_foot Y P U V -> Py A B Y = (Py P U V * Py A B V + Py P V U * Py A B U) / (Py U V U).
Proof.
intros.
unfold on_foot in *.
use H.
rewrite (l_28_b A B U V).
idtac.
assert (U**Y/U**V = Py P U V / Py U V U).
apply l_24_c_on_foot.

*****
H3 : not (eq U V)
H2 : Col Y U V
H0 : perp Y P U V
A,B,P,U,V,Y : Point
*****
on_foot Y P U V
+++++
unfold on_foot.
-----
Theorem elim_py_on_foot_right : forall A B P U V Y : Point, on_foot Y P U V -> Py A B Y = (Py P U V * Py A B V + Py P V U * Py A B U) / (Py U V U).
Proof.
intros.
unfold on_foot in *.
use H.
rewrite (l_28_b A B U V).
idtac.
assert (U**Y/U**V = Py P U V / Py U V U).
apply l_24_c_on_foot.
unfold on_foot.

*****
H3 : not (eq U V)
H2 : Col Y U V
H0 : perp Y P U V
A,B,P,U,V,Y : Point
*****
and (perp Y P U V) (and (Col Y U V) (not (eq U V)))
+++++
auto.
-----
Theorem elim_py_on_foot_right : forall A B P U V Y : Point, on_foot Y P U V -> Py A B Y = (Py P U V * Py A B V + Py P V U * Py A B U) / (Py U V U).
Proof.
intros.
unfold on_foot in *.
use H.
rewrite (l_28_b A B U V).
idtac.
assert (U**Y/U**V = Py P U V / Py U V U).

*****
H : eq (Fdiv (DSeg U Y) (DSeg U V)) (Fdiv (Py P U V) (Py U V U))
H3 : not (eq U V)
H2 : Col Y U V
H0 : perp Y P U V
A,B,P,U,V,Y : Point
*****
eq (Fplus (Fmult (Fdiv (DSeg U Y) (DSeg U V)) (Py A B V)) (Fmult (Fdiv (DSeg Y V) (DSeg U V)) (Py A B U))) (Fdiv (Fplus (Fmult (Py P U V) (Py A B V)) (Fmult (Py P V U) (Py A B U))) (Py U V U))
+++++
assert (V**Y/V**U = Py P V U / Py V U V).
-----
Theorem elim_py_on_foot_right : forall A B P U V Y : Point, on_foot Y P U V -> Py A B Y = (Py P U V * Py A B V + Py P V U * Py A B U) / (Py U V U).
Proof.
intros.
unfold on_foot in *.
use H.
rewrite (l_28_b A B U V).
idtac.
assert (U**Y/U**V = Py P U V / Py U V U).
assert (V**Y/V**U = Py P V U / Py V U V).

*****
H : eq (Fdiv (DSeg U Y) (DSeg U V)) (Fdiv (Py P U V) (Py U V U))
H3 : not (eq U V)
H2 : Col Y U V
H0 : perp Y P U V
A,B,P,U,V,Y : Point
*****
eq (Fdiv (DSeg V Y) (DSeg V U)) (Fdiv (Py P V U) (Py V U V))
+++++
apply l_24_c_on_foot.
-----
Theorem elim_py_on_foot_right : forall A B P U V Y : Point, on_foot Y P U V -> Py A B Y = (Py P U V * Py A B V + Py P V U * Py A B U) / (Py U V U).
Proof.
intros.
unfold on_foot in *.
use H.
rewrite (l_28_b A B U V).
idtac.
assert (U**Y/U**V = Py P U V / Py U V U).
assert (V**Y/V**U = Py P V U / Py V U V).
apply l_24_c_on_foot.

*****
H : eq (Fdiv (DSeg U Y) (DSeg U V)) (Fdiv (Py P U V) (Py U V U))
H3 : not (eq U V)
H2 : Col Y U V
H0 : perp Y P U V
A,B,P,U,V,Y : Point
*****
on_foot Y P V U
+++++
unfold on_foot.
-----
Theorem elim_py_on_foot_right : forall A B P U V Y : Point, on_foot Y P U V -> Py A B Y = (Py P U V * Py A B V + Py P V U * Py A B U) / (Py U V U).
Proof.
intros.
unfold on_foot in *.
use H.
rewrite (l_28_b A B U V).
idtac.
assert (U**Y/U**V = Py P U V / Py U V U).
assert (V**Y/V**U = Py P V U / Py V U V).
apply l_24_c_on_foot.
unfold on_foot.

*****
H : eq (Fdiv (DSeg U Y) (DSeg U V)) (Fdiv (Py P U V) (Py U V U))
H3 : not (eq U V)
H2 : Col Y U V
H0 : perp Y P U V
A,B,P,U,V,Y : Point
*****
and (perp Y P V U) (and (Col Y V U) (not (eq V U)))
+++++
auto with Geom.
-----
Theorem elim_py_on_foot_right : forall A B P U V Y : Point, on_foot Y P U V -> Py A B Y = (Py P U V * Py A B V + Py P V U * Py A B U) / (Py U V U).
Proof.
intros.
unfold on_foot in *.
use H.
rewrite (l_28_b A B U V).
idtac.
assert (U**Y/U**V = Py P U V / Py U V U).
assert (V**Y/V**U = Py P V U / Py V U V).

*****
H1 : eq (Fdiv (DSeg V Y) (DSeg V U)) (Fdiv (Py P V U) (Py V U V))
H : eq (Fdiv (DSeg U Y) (DSeg U V)) (Fdiv (Py P U V) (Py U V U))
H3 : not (eq U V)
H2 : Col Y U V
H0 : perp Y P U V
A,B,P,U,V,Y : Point
*****
eq (Fplus (Fmult (Fdiv (DSeg U Y) (DSeg U V)) (Py A B V)) (Fmult (Fdiv (DSeg Y V) (DSeg U V)) (Py A B U))) (Fdiv (Fplus (Fmult (Py P U V) (Py A B V)) (Fmult (Py P V U) (Py A B U))) (Py U V U))
+++++
replace (Y ** V / U ** V) with (V**Y/V**U) by auto with Geom.
-----
Theorem elim_py_on_foot_right : forall A B P U V Y : Point, on_foot Y P U V -> Py A B Y = (Py P U V * Py A B V + Py P V U * Py A B U) / (Py U V U).
Proof.
intros.
unfold on_foot in *.
use H.
rewrite (l_28_b A B U V).
idtac.
assert (U**Y/U**V = Py P U V / Py U V U).
assert (V**Y/V**U = Py P V U / Py V U V).
replace (Y ** V / U ** V) with (V**Y/V**U) by auto with Geom.

*****
H1 : eq (Fdiv (DSeg V Y) (DSeg V U)) (Fdiv (Py P V U) (Py V U V))
H : eq (Fdiv (DSeg U Y) (DSeg U V)) (Fdiv (Py P U V) (Py U V U))
H3 : not (eq U V)
H2 : Col Y U V
H0 : perp Y P U V
A,B,P,U,V,Y : Point
*****
eq (Fplus (Fmult (Fdiv (DSeg U Y) (DSeg U V)) (Py A B V)) (Fmult (Fdiv (DSeg V Y) (DSeg V U)) (Py A B U))) (Fdiv (Fplus (Fmult (Py P U V) (Py A B V)) (Fmult (Py P V U) (Py A B U))) (Py U V U))
+++++
rewrite H.
-----
Theorem elim_py_on_foot_right : forall A B P U V Y : Point, on_foot Y P U V -> Py A B Y = (Py P U V * Py A B V + Py P V U * Py A B U) / (Py U V U).
Proof.
intros.
unfold on_foot in *.
use H.
rewrite (l_28_b A B U V).
idtac.
assert (U**Y/U**V = Py P U V / Py U V U).
assert (V**Y/V**U = Py P V U / Py V U V).
replace (Y ** V / U ** V) with (V**Y/V**U) by auto with Geom.
rewrite H.

*****
H1 : eq (Fdiv (DSeg V Y) (DSeg V U)) (Fdiv (Py P V U) (Py V U V))
H : eq (Fdiv (DSeg U Y) (DSeg U V)) (Fdiv (Py P U V) (Py U V U))
H3 : not (eq U V)
H2 : Col Y U V
H0 : perp Y P U V
A,B,P,U,V,Y : Point
*****
eq (Fplus (Fmult (Fdiv (Py P U V) (Py U V U)) (Py A B V)) (Fmult (Fdiv (DSeg V Y) (DSeg V U)) (Py A B U))) (Fdiv (Fplus (Fmult (Py P U V) (Py A B V)) (Fmult (Py P V U) (Py A B U))) (Py U V U))
+++++
rewrite H1.
-----
Theorem elim_py_on_foot_right : forall A B P U V Y : Point, on_foot Y P U V -> Py A B Y = (Py P U V * Py A B V + Py P V U * Py A B U) / (Py U V U).
Proof.
intros.
unfold on_foot in *.
use H.
rewrite (l_28_b A B U V).
idtac.
assert (U**Y/U**V = Py P U V / Py U V U).
assert (V**Y/V**U = Py P V U / Py V U V).
replace (Y ** V / U ** V) with (V**Y/V**U) by auto with Geom.
rewrite H.
rewrite H1.

*****
H1 : eq (Fdiv (DSeg V Y) (DSeg V U)) (Fdiv (Py P V U) (Py V U V))
H : eq (Fdiv (DSeg U Y) (DSeg U V)) (Fdiv (Py P U V) (Py U V U))
H3 : not (eq U V)
H2 : Col Y U V
H0 : perp Y P U V
A,B,P,U,V,Y : Point
*****
eq (Fplus (Fmult (Fdiv (Py P U V) (Py U V U)) (Py A B V)) (Fmult (Fdiv (Py P V U) (Py V U V)) (Py A B U))) (Fdiv (Fplus (Fmult (Py P U V) (Py A B V)) (Fmult (Py P V U) (Py A B U))) (Py U V U))
+++++
replace (Py V U V) with (Py U V U) by auto with Geom.
-----
Theorem elim_py_on_foot_right : forall A B P U V Y : Point, on_foot Y P U V -> Py A B Y = (Py P U V * Py A B V + Py P V U * Py A B U) / (Py U V U).
Proof.
intros.
unfold on_foot in *.
use H.
rewrite (l_28_b A B U V).
idtac.
assert (U**Y/U**V = Py P U V / Py U V U).
assert (V**Y/V**U = Py P V U / Py V U V).
replace (Y ** V / U ** V) with (V**Y/V**U) by auto with Geom.
rewrite H.
rewrite H1.
replace (Py V U V) with (Py U V U) by auto with Geom.

*****
H1 : eq (Fdiv (DSeg V Y) (DSeg V U)) (Fdiv (Py P V U) (Py V U V))
H : eq (Fdiv (DSeg U Y) (DSeg U V)) (Fdiv (Py P U V) (Py U V U))
H3 : not (eq U V)
H2 : Col Y U V
H0 : perp Y P U V
A,B,P,U,V,Y : Point
*****
eq (Fplus (Fmult (Fdiv (Py P U V) (Py U V U)) (Py A B V)) (Fmult (Fdiv (Py P V U) (Py U V U)) (Py A B U))) (Fdiv (Fplus (Fmult (Py P U V) (Py A B V)) (Fmult (Py P V U) (Py A B U))) (Py U V U))
+++++
field.
-----
Theorem elim_py_on_foot_right : forall A B P U V Y : Point, on_foot Y P U V -> Py A B Y = (Py P U V * Py A B V + Py P V U * Py A B U) / (Py U V U).
Proof.
intros.
unfold on_foot in *.
use H.
rewrite (l_28_b A B U V).
idtac.
assert (U**Y/U**V = Py P U V / Py U V U).
assert (V**Y/V**U = Py P V U / Py V U V).
replace (Y ** V / U ** V) with (V**Y/V**U) by auto with Geom.
rewrite H.
rewrite H1.
replace (Py V U V) with (Py U V U) by auto with Geom.
field.

*****
H1 : eq (Fdiv (DSeg V Y) (DSeg V U)) (Fdiv (Py P V U) (Py V U V))
H : eq (Fdiv (DSeg U Y) (DSeg U V)) (Fdiv (Py P U V) (Py U V U))
H3 : not (eq U V)
H2 : Col Y U V
H0 : perp Y P U V
A,B,P,U,V,Y : Point
*****
not (eq (Py U V U) F0)
+++++
auto with Geom.
-----
Theorem elim_py_on_foot_right : forall A B P U V Y : Point, on_foot Y P U V -> Py A B Y = (Py P U V * Py A B V + Py P V U * Py A B U) / (Py U V U).
Proof.
intros.
unfold on_foot in *.
use H.
rewrite (l_28_b A B U V).

*****
H3 : not (eq U V)
H2 : Col Y U V
H0 : perp Y P U V
A,B,P,U,V,Y : Point
*****
not (eq U V)
+++++
auto with Geom .
-----
Theorem elim_py_on_foot_right : forall A B P U V Y : Point, on_foot Y P U V -> Py A B Y = (Py P U V * Py A B V + Py P V U * Py A B U) / (Py U V U).
Proof.
intros.
unfold on_foot in *.
use H.
rewrite (l_28_b A B U V).

*****
H3 : not (eq U V)
H2 : Col Y U V
H0 : perp Y P U V
A,B,P,U,V,Y : Point
*****
Col Y U V
+++++
auto with Geom .
-----
Theorem elim_py_on_foot_right : forall A B P U V Y : Point, on_foot Y P U V -> Py A B Y = (Py P U V * Py A B V + Py P V U * Py A B U) / (Py U V U).
Proof.
intros.
unfold on_foot in *.
use H.
rewrite (l_28_b A B U V).

*****

*****

+++++
Qed.
-----
Theorem elim_py_on_foot_left_right :\n forall B P U V Y : Point,\n on_foot Y P U V ->\n Py Y B Y = \n (Py P U V * Py P U V * Py V B V + Py P U V * Py P V U * Py V B U +\n Py P U V * Py P V U * Py U B V + Py P V U * Py P V U * Py U B U) / (Py U V U *  Py U V U).
-----
Theorem elim_py_on_foot_left_right : forall B P U V Y : Point, on_foot Y P U V -> Py Y B Y = (Py P U V * Py P U V * Py V B V + Py P U V * Py P V U * Py V B U + Py P U V * Py P V U * Py U B V + Py P V U * Py P V U * Py U B U) / (Py U V U * Py U V U).

*****

*****
forall (B P U V Y : Point) (_ : on_foot Y P U V), eq (Py Y B Y) (Fdiv (Fplus (Fplus (Fplus (Fmult (Fmult (Py P U V) (Py P U V)) (Py V B V)) (Fmult (Fmult (Py P U V) (Py P V U)) (Py V B U))) (Fmult (Fmult (Py P U V) (Py P V U)) (Py U B V))) (Fmult (Fmult (Py P V U) (Py P V U)) (Py U B U))) (Fmult (Py U V U) (Py U V U)))
+++++
Proof.
-----
Theorem elim_py_on_foot_left_right : forall B P U V Y : Point, on_foot Y P U V -> Py Y B Y = (Py P U V * Py P U V * Py V B V + Py P U V * Py P V U * Py V B U + Py P U V * Py P V U * Py U B V + Py P V U * Py P V U * Py U B U) / (Py U V U * Py U V U).
Proof.

*****

*****
forall (B P U V Y : Point) (_ : on_foot Y P U V), eq (Py Y B Y) (Fdiv (Fplus (Fplus (Fplus (Fmult (Fmult (Py P U V) (Py P U V)) (Py V B V)) (Fmult (Fmult (Py P U V) (Py P V U)) (Py V B U))) (Fmult (Fmult (Py P U V) (Py P V U)) (Py U B V))) (Fmult (Fmult (Py P V U) (Py P V U)) (Py U B U))) (Fmult (Py U V U) (Py U V U)))
+++++
intros.
-----
Theorem elim_py_on_foot_left_right : forall B P U V Y : Point, on_foot Y P U V -> Py Y B Y = (Py P U V * Py P U V * Py V B V + Py P U V * Py P V U * Py V B U + Py P U V * Py P V U * Py U B V + Py P V U * Py P V U * Py U B U) / (Py U V U * Py U V U).
Proof.
intros.

*****
H : on_foot Y P U V
B,P,U,V,Y : Point
*****
eq (Py Y B Y) (Fdiv (Fplus (Fplus (Fplus (Fmult (Fmult (Py P U V) (Py P U V)) (Py V B V)) (Fmult (Fmult (Py P U V) (Py P V U)) (Py V B U))) (Fmult (Fmult (Py P U V) (Py P V U)) (Py U B V))) (Fmult (Fmult (Py P V U) (Py P V U)) (Py U B U))) (Fmult (Py U V U) (Py U V U)))
+++++
rewrite (elim_py_on_foot_right Y B P U V Y H).
-----
Theorem elim_py_on_foot_left_right : forall B P U V Y : Point, on_foot Y P U V -> Py Y B Y = (Py P U V * Py P U V * Py V B V + Py P U V * Py P V U * Py V B U + Py P U V * Py P V U * Py U B V + Py P V U * Py P V U * Py U B U) / (Py U V U * Py U V U).
Proof.
intros.
rewrite (elim_py_on_foot_right Y B P U V Y H).

*****
H : on_foot Y P U V
B,P,U,V,Y : Point
*****
eq (Fdiv (Fplus (Fmult (Py P U V) (Py Y B V)) (Fmult (Py P V U) (Py Y B U))) (Py U V U)) (Fdiv (Fplus (Fplus (Fplus (Fmult (Fmult (Py P U V) (Py P U V)) (Py V B V)) (Fmult (Fmult (Py P U V) (Py P V U)) (Py V B U))) (Fmult (Fmult (Py P U V) (Py P V U)) (Py U B V))) (Fmult (Fmult (Py P V U) (Py P V U)) (Py U B U))) (Fmult (Py U V U) (Py U V U)))
+++++
replace (Py Y B V) with (Py V B Y) by auto with Geom.
-----
Theorem elim_py_on_foot_left_right : forall B P U V Y : Point, on_foot Y P U V -> Py Y B Y = (Py P U V * Py P U V * Py V B V + Py P U V * Py P V U * Py V B U + Py P U V * Py P V U * Py U B V + Py P V U * Py P V U * Py U B U) / (Py U V U * Py U V U).
Proof.
intros.
rewrite (elim_py_on_foot_right Y B P U V Y H).
replace (Py Y B V) with (Py V B Y) by auto with Geom.

*****
H : on_foot Y P U V
B,P,U,V,Y : Point
*****
eq (Fdiv (Fplus (Fmult (Py P U V) (Py V B Y)) (Fmult (Py P V U) (Py Y B U))) (Py U V U)) (Fdiv (Fplus (Fplus (Fplus (Fmult (Fmult (Py P U V) (Py P U V)) (Py V B V)) (Fmult (Fmult (Py P U V) (Py P V U)) (Py V B U))) (Fmult (Fmult (Py P U V) (Py P V U)) (Py U B V))) (Fmult (Fmult (Py P V U) (Py P V U)) (Py U B U))) (Fmult (Py U V U) (Py U V U)))
+++++
replace (Py Y B U) with (Py U B Y) by auto with Geom.
-----
Theorem elim_py_on_foot_left_right : forall B P U V Y : Point, on_foot Y P U V -> Py Y B Y = (Py P U V * Py P U V * Py V B V + Py P U V * Py P V U * Py V B U + Py P U V * Py P V U * Py U B V + Py P V U * Py P V U * Py U B U) / (Py U V U * Py U V U).
Proof.
intros.
rewrite (elim_py_on_foot_right Y B P U V Y H).
replace (Py Y B V) with (Py V B Y) by auto with Geom.
replace (Py Y B U) with (Py U B Y) by auto with Geom.

*****
H : on_foot Y P U V
B,P,U,V,Y : Point
*****
eq (Fdiv (Fplus (Fmult (Py P U V) (Py V B Y)) (Fmult (Py P V U) (Py U B Y))) (Py U V U)) (Fdiv (Fplus (Fplus (Fplus (Fmult (Fmult (Py P U V) (Py P U V)) (Py V B V)) (Fmult (Fmult (Py P U V) (Py P V U)) (Py V B U))) (Fmult (Fmult (Py P U V) (Py P V U)) (Py U B V))) (Fmult (Fmult (Py P V U) (Py P V U)) (Py U B U))) (Fmult (Py U V U) (Py U V U)))
+++++
rewrite (elim_py_on_foot_right V B P U V Y H).
-----
Theorem elim_py_on_foot_left_right : forall B P U V Y : Point, on_foot Y P U V -> Py Y B Y = (Py P U V * Py P U V * Py V B V + Py P U V * Py P V U * Py V B U + Py P U V * Py P V U * Py U B V + Py P V U * Py P V U * Py U B U) / (Py U V U * Py U V U).
Proof.
intros.
rewrite (elim_py_on_foot_right Y B P U V Y H).
replace (Py Y B V) with (Py V B Y) by auto with Geom.
replace (Py Y B U) with (Py U B Y) by auto with Geom.
rewrite (elim_py_on_foot_right V B P U V Y H).

*****
H : on_foot Y P U V
B,P,U,V,Y : Point
*****
eq (Fdiv (Fplus (Fmult (Py P U V) (Fdiv (Fplus (Fmult (Py P U V) (Py V B V)) (Fmult (Py P V U) (Py V B U))) (Py U V U))) (Fmult (Py P V U) (Py U B Y))) (Py U V U)) (Fdiv (Fplus (Fplus (Fplus (Fmult (Fmult (Py P U V) (Py P U V)) (Py V B V)) (Fmult (Fmult (Py P U V) (Py P V U)) (Py V B U))) (Fmult (Fmult (Py P U V) (Py P V U)) (Py U B V))) (Fmult (Fmult (Py P V U) (Py P V U)) (Py U B U))) (Fmult (Py U V U) (Py U V U)))
+++++
rewrite (elim_py_on_foot_right U B P U V Y H).
-----
Theorem elim_py_on_foot_left_right : forall B P U V Y : Point, on_foot Y P U V -> Py Y B Y = (Py P U V * Py P U V * Py V B V + Py P U V * Py P V U * Py V B U + Py P U V * Py P V U * Py U B V + Py P V U * Py P V U * Py U B U) / (Py U V U * Py U V U).
Proof.
intros.
rewrite (elim_py_on_foot_right Y B P U V Y H).
replace (Py Y B V) with (Py V B Y) by auto with Geom.
replace (Py Y B U) with (Py U B Y) by auto with Geom.
rewrite (elim_py_on_foot_right V B P U V Y H).
rewrite (elim_py_on_foot_right U B P U V Y H).

*****
H : on_foot Y P U V
B,P,U,V,Y : Point
*****
eq (Fdiv (Fplus (Fmult (Py P U V) (Fdiv (Fplus (Fmult (Py P U V) (Py V B V)) (Fmult (Py P V U) (Py V B U))) (Py U V U))) (Fmult (Py P V U) (Fdiv (Fplus (Fmult (Py P U V) (Py U B V)) (Fmult (Py P V U) (Py U B U))) (Py U V U)))) (Py U V U)) (Fdiv (Fplus (Fplus (Fplus (Fmult (Fmult (Py P U V) (Py P U V)) (Py V B V)) (Fmult (Fmult (Py P U V) (Py P V U)) (Py V B U))) (Fmult (Fmult (Py P U V) (Py P V U)) (Py U B V))) (Fmult (Fmult (Py P V U) (Py P V U)) (Py U B U))) (Fmult (Py U V U) (Py U V U)))
+++++
field.
-----
Theorem elim_py_on_foot_left_right : forall B P U V Y : Point, on_foot Y P U V -> Py Y B Y = (Py P U V * Py P U V * Py V B V + Py P U V * Py P V U * Py V B U + Py P U V * Py P V U * Py U B V + Py P V U * Py P V U * Py U B U) / (Py U V U * Py U V U).
Proof.
intros.
rewrite (elim_py_on_foot_right Y B P U V Y H).
replace (Py Y B V) with (Py V B Y) by auto with Geom.
replace (Py Y B U) with (Py U B Y) by auto with Geom.
rewrite (elim_py_on_foot_right V B P U V Y H).
rewrite (elim_py_on_foot_right U B P U V Y H).
field.

*****
H : on_foot Y P U V
B,P,U,V,Y : Point
*****
not (eq (Py U V U) F0)
+++++
unfold on_foot in H.
-----
Theorem elim_py_on_foot_left_right : forall B P U V Y : Point, on_foot Y P U V -> Py Y B Y = (Py P U V * Py P U V * Py V B V + Py P U V * Py P V U * Py V B U + Py P U V * Py P V U * Py U B V + Py P V U * Py P V U * Py U B U) / (Py U V U * Py U V U).
Proof.
intros.
rewrite (elim_py_on_foot_right Y B P U V Y H).
replace (Py Y B V) with (Py V B Y) by auto with Geom.
replace (Py Y B U) with (Py U B Y) by auto with Geom.
rewrite (elim_py_on_foot_right V B P U V Y H).
rewrite (elim_py_on_foot_right U B P U V Y H).
field.
unfold on_foot in H.

*****
H : and (perp Y P U V) (and (Col Y U V) (not (eq U V)))
B,P,U,V,Y : Point
*****
not (eq (Py U V U) F0)
+++++
use H.
-----
Theorem elim_py_on_foot_left_right : forall B P U V Y : Point, on_foot Y P U V -> Py Y B Y = (Py P U V * Py P U V * Py V B V + Py P U V * Py P V U * Py V B U + Py P U V * Py P V U * Py U B V + Py P V U * Py P V U * Py U B U) / (Py U V U * Py U V U).
Proof.
intros.
rewrite (elim_py_on_foot_right Y B P U V Y H).
replace (Py Y B V) with (Py V B Y) by auto with Geom.
replace (Py Y B U) with (Py U B Y) by auto with Geom.
rewrite (elim_py_on_foot_right V B P U V Y H).
rewrite (elim_py_on_foot_right U B P U V Y H).
field.
unfold on_foot in H.
use H.

*****
H3 : not (eq U V)
H2 : Col Y U V
H0 : perp Y P U V
B,P,U,V,Y : Point
*****
not (eq (Py U V U) F0)
+++++
unfold Py.
-----
Theorem elim_py_on_foot_left_right : forall B P U V Y : Point, on_foot Y P U V -> Py Y B Y = (Py P U V * Py P U V * Py V B V + Py P U V * Py P V U * Py V B U + Py P U V * Py P V U * Py U B V + Py P V U * Py P V U * Py U B U) / (Py U V U * Py U V U).
Proof.
intros.
rewrite (elim_py_on_foot_right Y B P U V Y H).
replace (Py Y B V) with (Py V B Y) by auto with Geom.
replace (Py Y B U) with (Py U B Y) by auto with Geom.
rewrite (elim_py_on_foot_right V B P U V Y H).
rewrite (elim_py_on_foot_right U B P U V Y H).
field.
unfold on_foot in H.
use H.
unfold Py.

*****
H3 : not (eq U V)
H2 : Col Y U V
H0 : perp Y P U V
B,P,U,V,Y : Point
*****
not (eq (Fminus (Fplus (Fmult (DSeg U V) (DSeg U V)) (Fmult (DSeg V U) (DSeg V U))) (Fmult (DSeg U U) (DSeg U U))) F0)
+++++
basic_simpl.
-----
Theorem elim_py_on_foot_left_right : forall B P U V Y : Point, on_foot Y P U V -> Py Y B Y = (Py P U V * Py P U V * Py V B V + Py P U V * Py P V U * Py V B U + Py P U V * Py P V U * Py U B V + Py P V U * Py P V U * Py U B U) / (Py U V U * Py U V U).
Proof.
intros.
rewrite (elim_py_on_foot_right Y B P U V Y H).
replace (Py Y B V) with (Py V B Y) by auto with Geom.
replace (Py Y B U) with (Py U B Y) by auto with Geom.
rewrite (elim_py_on_foot_right V B P U V Y H).
rewrite (elim_py_on_foot_right U B P U V Y H).
field.
unfold on_foot in H.
use H.
unfold Py.
basic_simpl.

*****
H3 : not (eq U V)
H2 : Col Y U V
H0 : perp Y P U V
B,P,U,V,Y : Point
*****
not (eq (Fplus (Fmult (DSeg U V) (DSeg U V)) (Fmult (DSeg V U) (DSeg V U))) F0)
+++++
uniformize_dir_seg.
-----
Theorem elim_py_on_foot_left_right : forall B P U V Y : Point, on_foot Y P U V -> Py Y B Y = (Py P U V * Py P U V * Py V B V + Py P U V * Py P V U * Py V B U + Py P U V * Py P V U * Py U B V + Py P V U * Py P V U * Py U B U) / (Py U V U * Py U V U).
Proof.
intros.
rewrite (elim_py_on_foot_right Y B P U V Y H).
replace (Py Y B V) with (Py V B Y) by auto with Geom.
replace (Py Y B U) with (Py U B Y) by auto with Geom.
rewrite (elim_py_on_foot_right V B P U V Y H).
rewrite (elim_py_on_foot_right U B P U V Y H).
field.
unfold on_foot in H.
use H.
unfold Py.
basic_simpl.
uniformize_dir_seg.

*****
H3 : not (eq U V)
H2 : Col Y U V
H0 : perp Y P U V
B,P,U,V,Y : Point
*****
not (eq (Fplus (Fmult (DSeg U V) (DSeg U V)) (Fmult (Fopp (DSeg U V)) (Fopp (DSeg U V)))) F0)
+++++
replace (U ** V * U ** V + - U ** V * - U ** V) with (2* U ** V * U ** V) by ring.
-----
Theorem elim_py_on_foot_left_right : forall B P U V Y : Point, on_foot Y P U V -> Py Y B Y = (Py P U V * Py P U V * Py V B V + Py P U V * Py P V U * Py V B U + Py P U V * Py P V U * Py U B V + Py P V U * Py P V U * Py U B U) / (Py U V U * Py U V U).
Proof.
intros.
rewrite (elim_py_on_foot_right Y B P U V Y H).
replace (Py Y B V) with (Py V B Y) by auto with Geom.
replace (Py Y B U) with (Py U B Y) by auto with Geom.
rewrite (elim_py_on_foot_right V B P U V Y H).
rewrite (elim_py_on_foot_right U B P U V Y H).
field.
unfold on_foot in H.
use H.
unfold Py.
basic_simpl.
uniformize_dir_seg.
replace (U ** V * U ** V + - U ** V * - U ** V) with (2* U ** V * U ** V) by ring.

*****
H3 : not (eq U V)
H2 : Col Y U V
H0 : perp Y P U V
B,P,U,V,Y : Point
*****
not (eq (Fmult (Fmult (Fplus F1 F1) (DSeg U V)) (DSeg U V)) F0)
+++++
repeat (apply nonzeromult).
-----
Theorem elim_py_on_foot_left_right : forall B P U V Y : Point, on_foot Y P U V -> Py Y B Y = (Py P U V * Py P U V * Py V B V + Py P U V * Py P V U * Py V B U + Py P U V * Py P V U * Py U B V + Py P V U * Py P V U * Py U B U) / (Py U V U * Py U V U).
Proof.
intros.
rewrite (elim_py_on_foot_right Y B P U V Y H).
replace (Py Y B V) with (Py V B Y) by auto with Geom.
replace (Py Y B U) with (Py U B Y) by auto with Geom.
rewrite (elim_py_on_foot_right V B P U V Y H).
rewrite (elim_py_on_foot_right U B P U V Y H).
field.
unfold on_foot in H.
use H.
unfold Py.
basic_simpl.
uniformize_dir_seg.
replace (U ** V * U ** V + - U ** V * - U ** V) with (2* U ** V * U ** V) by ring.
repeat (apply nonzeromult).

*****
H3 : not (eq U V)
H2 : Col Y U V
H0 : perp Y P U V
B,P,U,V,Y : Point
*****
not (eq (Fplus F1 F1) F0)
+++++
auto with Geom.
-----
Theorem elim_py_on_foot_left_right : forall B P U V Y : Point, on_foot Y P U V -> Py Y B Y = (Py P U V * Py P U V * Py V B V + Py P U V * Py P V U * Py V B U + Py P U V * Py P V U * Py U B V + Py P V U * Py P V U * Py U B U) / (Py U V U * Py U V U).
Proof.
intros.
rewrite (elim_py_on_foot_right Y B P U V Y H).
replace (Py Y B V) with (Py V B Y) by auto with Geom.
replace (Py Y B U) with (Py U B Y) by auto with Geom.
rewrite (elim_py_on_foot_right V B P U V Y H).
rewrite (elim_py_on_foot_right U B P U V Y H).
field.
unfold on_foot in H.
use H.
unfold Py.
basic_simpl.
uniformize_dir_seg.
replace (U ** V * U ** V + - U ** V * - U ** V) with (2* U ** V * U ** V) by ring.
repeat (apply nonzeromult).

*****
H3 : not (eq U V)
H2 : Col Y U V
H0 : perp Y P U V
B,P,U,V,Y : Point
*****
not (eq (DSeg U V) F0)
+++++
auto with Geom.
-----
Theorem elim_py_on_foot_left_right : forall B P U V Y : Point, on_foot Y P U V -> Py Y B Y = (Py P U V * Py P U V * Py V B V + Py P U V * Py P V U * Py V B U + Py P U V * Py P V U * Py U B V + Py P V U * Py P V U * Py U B U) / (Py U V U * Py U V U).
Proof.
intros.
rewrite (elim_py_on_foot_right Y B P U V Y H).
replace (Py Y B V) with (Py V B Y) by auto with Geom.
replace (Py Y B U) with (Py U B Y) by auto with Geom.
rewrite (elim_py_on_foot_right V B P U V Y H).
rewrite (elim_py_on_foot_right U B P U V Y H).
field.
unfold on_foot in H.
use H.
unfold Py.
basic_simpl.
uniformize_dir_seg.
replace (U ** V * U ** V + - U ** V * - U ** V) with (2* U ** V * U ** V) by ring.
repeat (apply nonzeromult).

*****
H3 : not (eq U V)
H2 : Col Y U V
H0 : perp Y P U V
B,P,U,V,Y : Point
*****
not (eq (DSeg U V) F0)
+++++
auto with Geom.
-----
Theorem elim_py_on_foot_left_right : forall B P U V Y : Point, on_foot Y P U V -> Py Y B Y = (Py P U V * Py P U V * Py V B V + Py P U V * Py P V U * Py V B U + Py P U V * Py P V U * Py U B V + Py P V U * Py P V U * Py U B U) / (Py U V U * Py U V U).
Proof.
intros.
rewrite (elim_py_on_foot_right Y B P U V Y H).
replace (Py Y B V) with (Py V B Y) by auto with Geom.
replace (Py Y B U) with (Py U B Y) by auto with Geom.
rewrite (elim_py_on_foot_right V B P U V Y H).
rewrite (elim_py_on_foot_right U B P U V Y H).
field.
unfold on_foot in H.
use H.
unfold Py.
basic_simpl.
uniformize_dir_seg.
replace (U ** V * U ** V + - U ** V * - U ** V) with (2* U ** V * U ** V) by ring.
repeat (apply nonzeromult).

*****

*****

+++++
Qed.
-----
Theorem elim_py_on_foot_left_right_invariant :\nforall B P U V Y : Point,\n on_foot Y P U V -> (Py U V U *  Py U V U) <> 0.
-----
Theorem elim_py_on_foot_left_right_invariant : forall B P U V Y : Point, on_foot Y P U V -> (Py U V U * Py U V U) <> 0.

*****

*****
forall (_ : Point) (P U V Y : Point) (_ : on_foot Y P U V), not (eq (Fmult (Py U V U) (Py U V U)) F0)
+++++
Proof.
-----
Theorem elim_py_on_foot_left_right_invariant : forall B P U V Y : Point, on_foot Y P U V -> (Py U V U * Py U V U) <> 0.
Proof.

*****

*****
forall (_ : Point) (P U V Y : Point) (_ : on_foot Y P U V), not (eq (Fmult (Py U V U) (Py U V U)) F0)
+++++
intros.
-----
Theorem elim_py_on_foot_left_right_invariant : forall B P U V Y : Point, on_foot Y P U V -> (Py U V U * Py U V U) <> 0.
Proof.
intros.

*****
H : on_foot Y P U V
B,P,U,V,Y : Point
*****
not (eq (Fmult (Py U V U) (Py U V U)) F0)
+++++
unfold on_foot in H.
-----
Theorem elim_py_on_foot_left_right_invariant : forall B P U V Y : Point, on_foot Y P U V -> (Py U V U * Py U V U) <> 0.
Proof.
intros.
unfold on_foot in H.

*****
H : and (perp Y P U V) (and (Col Y U V) (not (eq U V)))
B,P,U,V,Y : Point
*****
not (eq (Fmult (Py U V U) (Py U V U)) F0)
+++++
use H.
-----
Theorem elim_py_on_foot_left_right_invariant : forall B P U V Y : Point, on_foot Y P U V -> (Py U V U * Py U V U) <> 0.
Proof.
intros.
unfold on_foot in H.
use H.

*****
H3 : not (eq U V)
H2 : Col Y U V
H0 : perp Y P U V
B,P,U,V,Y : Point
*****
not (eq (Fmult (Py U V U) (Py U V U)) F0)
+++++
unfold Py.
-----
Theorem elim_py_on_foot_left_right_invariant : forall B P U V Y : Point, on_foot Y P U V -> (Py U V U * Py U V U) <> 0.
Proof.
intros.
unfold on_foot in H.
use H.
unfold Py.

*****
H3 : not (eq U V)
H2 : Col Y U V
H0 : perp Y P U V
B,P,U,V,Y : Point
*****
not (eq (Fmult (Fminus (Fplus (Fmult (DSeg U V) (DSeg U V)) (Fmult (DSeg V U) (DSeg V U))) (Fmult (DSeg U U) (DSeg U U))) (Fminus (Fplus (Fmult (DSeg U V) (DSeg U V)) (Fmult (DSeg V U) (DSeg V U))) (Fmult (DSeg U U) (DSeg U U)))) F0)
+++++
basic_simpl.
-----
Theorem elim_py_on_foot_left_right_invariant : forall B P U V Y : Point, on_foot Y P U V -> (Py U V U * Py U V U) <> 0.
Proof.
intros.
unfold on_foot in H.
use H.
unfold Py.
basic_simpl.

*****
H3 : not (eq U V)
H2 : Col Y U V
H0 : perp Y P U V
B,P,U,V,Y : Point
*****
not (eq (Fmult (Fplus (Fmult (DSeg U V) (DSeg U V)) (Fmult (DSeg V U) (DSeg V U))) (Fplus (Fmult (DSeg U V) (DSeg U V)) (Fmult (DSeg V U) (DSeg V U)))) F0)
+++++
uniformize_dir_seg.
-----
Theorem elim_py_on_foot_left_right_invariant : forall B P U V Y : Point, on_foot Y P U V -> (Py U V U * Py U V U) <> 0.
Proof.
intros.
unfold on_foot in H.
use H.
unfold Py.
basic_simpl.
uniformize_dir_seg.

*****
H3 : not (eq U V)
H2 : Col Y U V
H0 : perp Y P U V
B,P,U,V,Y : Point
*****
not (eq (Fmult (Fplus (Fmult (DSeg U V) (DSeg U V)) (Fmult (Fopp (DSeg U V)) (Fopp (DSeg U V)))) (Fplus (Fmult (DSeg U V) (DSeg U V)) (Fmult (Fopp (DSeg U V)) (Fopp (DSeg U V))))) F0)
+++++
replace (U ** V * U ** V + - U ** V * - U ** V) with (2* U ** V * U ** V) by ring.
-----
Theorem elim_py_on_foot_left_right_invariant : forall B P U V Y : Point, on_foot Y P U V -> (Py U V U * Py U V U) <> 0.
Proof.
intros.
unfold on_foot in H.
use H.
unfold Py.
basic_simpl.
uniformize_dir_seg.
replace (U ** V * U ** V + - U ** V * - U ** V) with (2* U ** V * U ** V) by ring.

*****
H3 : not (eq U V)
H2 : Col Y U V
H0 : perp Y P U V
B,P,U,V,Y : Point
*****
not (eq (Fmult (Fmult (Fmult (Fplus F1 F1) (DSeg U V)) (DSeg U V)) (Fmult (Fmult (Fplus F1 F1) (DSeg U V)) (DSeg U V))) F0)
+++++
repeat (apply nonzeromult).
-----
Theorem elim_py_on_foot_left_right_invariant : forall B P U V Y : Point, on_foot Y P U V -> (Py U V U * Py U V U) <> 0.
Proof.
intros.
unfold on_foot in H.
use H.
unfold Py.
basic_simpl.
uniformize_dir_seg.
replace (U ** V * U ** V + - U ** V * - U ** V) with (2* U ** V * U ** V) by ring.
repeat (apply nonzeromult).

*****
H3 : not (eq U V)
H2 : Col Y U V
H0 : perp Y P U V
B,P,U,V,Y : Point
*****
not (eq (Fplus F1 F1) F0)
+++++
auto with Geom.
-----
Theorem elim_py_on_foot_left_right_invariant : forall B P U V Y : Point, on_foot Y P U V -> (Py U V U * Py U V U) <> 0.
Proof.
intros.
unfold on_foot in H.
use H.
unfold Py.
basic_simpl.
uniformize_dir_seg.
replace (U ** V * U ** V + - U ** V * - U ** V) with (2* U ** V * U ** V) by ring.
repeat (apply nonzeromult).

*****
H3 : not (eq U V)
H2 : Col Y U V
H0 : perp Y P U V
B,P,U,V,Y : Point
*****
not (eq (DSeg U V) F0)
+++++
auto with Geom.
-----
Theorem elim_py_on_foot_left_right_invariant : forall B P U V Y : Point, on_foot Y P U V -> (Py U V U * Py U V U) <> 0.
Proof.
intros.
unfold on_foot in H.
use H.
unfold Py.
basic_simpl.
uniformize_dir_seg.
replace (U ** V * U ** V + - U ** V * - U ** V) with (2* U ** V * U ** V) by ring.
repeat (apply nonzeromult).

*****
H3 : not (eq U V)
H2 : Col Y U V
H0 : perp Y P U V
B,P,U,V,Y : Point
*****
not (eq (DSeg U V) F0)
+++++
auto with Geom.
-----
Theorem elim_py_on_foot_left_right_invariant : forall B P U V Y : Point, on_foot Y P U V -> (Py U V U * Py U V U) <> 0.
Proof.
intros.
unfold on_foot in H.
use H.
unfold Py.
basic_simpl.
uniformize_dir_seg.
replace (U ** V * U ** V + - U ** V * - U ** V) with (2* U ** V * U ** V) by ring.
repeat (apply nonzeromult).

*****
H3 : not (eq U V)
H2 : Col Y U V
H0 : perp Y P U V
B,P,U,V,Y : Point
*****
not (eq (Fplus F1 F1) F0)
+++++
auto with Geom.
-----
Theorem elim_py_on_foot_left_right_invariant : forall B P U V Y : Point, on_foot Y P U V -> (Py U V U * Py U V U) <> 0.
Proof.
intros.
unfold on_foot in H.
use H.
unfold Py.
basic_simpl.
uniformize_dir_seg.
replace (U ** V * U ** V + - U ** V * - U ** V) with (2* U ** V * U ** V) by ring.
repeat (apply nonzeromult).

*****
H3 : not (eq U V)
H2 : Col Y U V
H0 : perp Y P U V
B,P,U,V,Y : Point
*****
not (eq (DSeg U V) F0)
+++++
auto with Geom.
-----
Theorem elim_py_on_foot_left_right_invariant : forall B P U V Y : Point, on_foot Y P U V -> (Py U V U * Py U V U) <> 0.
Proof.
intros.
unfold on_foot in H.
use H.
unfold Py.
basic_simpl.
uniformize_dir_seg.
replace (U ** V * U ** V + - U ** V * - U ** V) with (2* U ** V * U ** V) by ring.
repeat (apply nonzeromult).

*****
H3 : not (eq U V)
H2 : Col Y U V
H0 : perp Y P U V
B,P,U,V,Y : Point
*****
not (eq (DSeg U V) F0)
+++++
auto with Geom.
-----
Theorem elim_py_on_foot_left_right_invariant : forall B P U V Y : Point, on_foot Y P U V -> (Py U V U * Py U V U) <> 0.
Proof.
intros.
unfold on_foot in H.
use H.
unfold Py.
basic_simpl.
uniformize_dir_seg.
replace (U ** V * U ** V + - U ** V * - U ** V) with (2* U ** V * U ** V) by ring.
repeat (apply nonzeromult).

*****

*****

+++++
Qed.
-----
Theorem elim_py_on_foot_right_invariant :\n forall A B P U V Y : Point,\n on_foot Y P U V -> Py U V U <> 0.
-----
Theorem elim_py_on_foot_right_invariant : forall A B P U V Y : Point, on_foot Y P U V -> Py U V U <> 0.

*****

*****
forall (_ : Point) (_ : Point) (P U V Y : Point) (_ : on_foot Y P U V), not (eq (Py U V U) F0)
+++++
Proof.
-----
Theorem elim_py_on_foot_right_invariant : forall A B P U V Y : Point, on_foot Y P U V -> Py U V U <> 0.
Proof.

*****

*****
forall (_ : Point) (_ : Point) (P U V Y : Point) (_ : on_foot Y P U V), not (eq (Py U V U) F0)
+++++
intros.
-----
Theorem elim_py_on_foot_right_invariant : forall A B P U V Y : Point, on_foot Y P U V -> Py U V U <> 0.
Proof.
intros.

*****
H : on_foot Y P U V
A,B,P,U,V,Y : Point
*****
not (eq (Py U V U) F0)
+++++
unfold on_foot in *.
-----
Theorem elim_py_on_foot_right_invariant : forall A B P U V Y : Point, on_foot Y P U V -> Py U V U <> 0.
Proof.
intros.
unfold on_foot in *.

*****
H : and (perp Y P U V) (and (Col Y U V) (not (eq U V)))
A,B,P,U,V,Y : Point
*****
not (eq (Py U V U) F0)
+++++
unfold Py.
-----
Theorem elim_py_on_foot_right_invariant : forall A B P U V Y : Point, on_foot Y P U V -> Py U V U <> 0.
Proof.
intros.
unfold on_foot in *.
unfold Py.

*****
H : and (perp Y P U V) (and (Col Y U V) (not (eq U V)))
A,B,P,U,V,Y : Point
*****
not (eq (Fminus (Fplus (Fmult (DSeg U V) (DSeg U V)) (Fmult (DSeg V U) (DSeg V U))) (Fmult (DSeg U U) (DSeg U U))) F0)
+++++
uniformize_dir_seg.
-----
Theorem elim_py_on_foot_right_invariant : forall A B P U V Y : Point, on_foot Y P U V -> Py U V U <> 0.
Proof.
intros.
unfold on_foot in *.
unfold Py.
uniformize_dir_seg.

*****
H : and (perp Y P U V) (and (Col Y U V) (not (eq U V)))
A,B,P,U,V,Y : Point
*****
not (eq (Fminus (Fplus (Fmult (DSeg U V) (DSeg U V)) (Fmult (Fopp (DSeg U V)) (Fopp (DSeg U V)))) (Fmult (DSeg U U) (DSeg U U))) F0)
+++++
basic_simpl.
-----
Theorem elim_py_on_foot_right_invariant : forall A B P U V Y : Point, on_foot Y P U V -> Py U V U <> 0.
Proof.
intros.
unfold on_foot in *.
unfold Py.
uniformize_dir_seg.
basic_simpl.

*****
H : and (perp Y P U V) (and (Col Y U V) (not (eq U V)))
A,B,P,U,V,Y : Point
*****
not (eq (Fplus (Fmult (DSeg U V) (DSeg U V)) (Fmult (DSeg U V) (DSeg U V))) F0)
+++++
replace (U ** V * U ** V + U ** V * U ** V) with (2 * U ** V * U ** V) by ring.
-----
Theorem elim_py_on_foot_right_invariant : forall A B P U V Y : Point, on_foot Y P U V -> Py U V U <> 0.
Proof.
intros.
unfold on_foot in *.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2 * U ** V * U ** V) by ring.

*****
H : and (perp Y P U V) (and (Col Y U V) (not (eq U V)))
A,B,P,U,V,Y : Point
*****
not (eq (Fmult (Fmult (Fplus F1 F1) (DSeg U V)) (DSeg U V)) F0)
+++++
decompose [and] H.
-----
Theorem elim_py_on_foot_right_invariant : forall A B P U V Y : Point, on_foot Y P U V -> Py U V U <> 0.
Proof.
intros.
unfold on_foot in *.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2 * U ** V * U ** V) by ring.
decompose [and] H.

*****
H3 : not (eq U V)
H2 : Col Y U V
H0 : perp Y P U V
H : and (perp Y P U V) (and (Col Y U V) (not (eq U V)))
A,B,P,U,V,Y : Point
*****
not (eq (Fmult (Fmult (Fplus F1 F1) (DSeg U V)) (DSeg U V)) F0)
+++++
clear H.
-----
Theorem elim_py_on_foot_right_invariant : forall A B P U V Y : Point, on_foot Y P U V -> Py U V U <> 0.
Proof.
intros.
unfold on_foot in *.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2 * U ** V * U ** V) by ring.
decompose [and] H.
clear H.

*****
H3 : not (eq U V)
H2 : Col Y U V
H0 : perp Y P U V
A,B,P,U,V,Y : Point
*****
not (eq (Fmult (Fmult (Fplus F1 F1) (DSeg U V)) (DSeg U V)) F0)
+++++
repeat apply nonzeromult.
-----
Theorem elim_py_on_foot_right_invariant : forall A B P U V Y : Point, on_foot Y P U V -> Py U V U <> 0.
Proof.
intros.
unfold on_foot in *.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2 * U ** V * U ** V) by ring.
decompose [and] H.
clear H.
repeat apply nonzeromult.

*****
H3 : not (eq U V)
H2 : Col Y U V
H0 : perp Y P U V
A,B,P,U,V,Y : Point
*****
not (eq (Fplus F1 F1) F0)
+++++
auto with Geom.
-----
Theorem elim_py_on_foot_right_invariant : forall A B P U V Y : Point, on_foot Y P U V -> Py U V U <> 0.
Proof.
intros.
unfold on_foot in *.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2 * U ** V * U ** V) by ring.
decompose [and] H.
clear H.
repeat apply nonzeromult.

*****
H3 : not (eq U V)
H2 : Col Y U V
H0 : perp Y P U V
A,B,P,U,V,Y : Point
*****
not (eq (DSeg U V) F0)
+++++
auto with Geom.
-----
Theorem elim_py_on_foot_right_invariant : forall A B P U V Y : Point, on_foot Y P U V -> Py U V U <> 0.
Proof.
intros.
unfold on_foot in *.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2 * U ** V * U ** V) by ring.
decompose [and] H.
clear H.
repeat apply nonzeromult.

*****
H3 : not (eq U V)
H2 : Col Y U V
H0 : perp Y P U V
A,B,P,U,V,Y : Point
*****
not (eq (DSeg U V) F0)
+++++
auto with Geom.
-----
Theorem elim_py_on_foot_right_invariant : forall A B P U V Y : Point, on_foot Y P U V -> Py U V U <> 0.
Proof.
intros.
unfold on_foot in *.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2 * U ** V * U ** V) by ring.
decompose [and] H.
clear H.
repeat apply nonzeromult.

*****

*****

+++++
Qed.
-----
Theorem elim_py_on_foot_middle :\n forall A B P U V Y : Point,\n on_foot Y P U V ->\n Py A Y B = (Py P U V / Py U V U) * Py A V B + \n                  (Py P V U) / (Py  U V U) * Py A U B - \n                  (Py P U V * Py P V U) / Py U V U.
-----
Theorem elim_py_on_foot_middle : forall A B P U V Y : Point, on_foot Y P U V -> Py A Y B = (Py P U V / Py U V U) * Py A V B + (Py P V U) / (Py U V U) * Py A U B - (Py P U V * Py P V U) / Py U V U.

*****

*****
forall (A B P U V Y : Point) (_ : on_foot Y P U V), eq (Py A Y B) (Fminus (Fplus (Fmult (Fdiv (Py P U V) (Py U V U)) (Py A V B)) (Fmult (Fdiv (Py P V U) (Py U V U)) (Py A U B))) (Fdiv (Fmult (Py P U V) (Py P V U)) (Py U V U)))
+++++
Proof.
-----
Theorem elim_py_on_foot_middle : forall A B P U V Y : Point, on_foot Y P U V -> Py A Y B = (Py P U V / Py U V U) * Py A V B + (Py P V U) / (Py U V U) * Py A U B - (Py P U V * Py P V U) / Py U V U.
Proof.

*****

*****
forall (A B P U V Y : Point) (_ : on_foot Y P U V), eq (Py A Y B) (Fminus (Fplus (Fmult (Fdiv (Py P U V) (Py U V U)) (Py A V B)) (Fmult (Fdiv (Py P V U) (Py U V U)) (Py A U B))) (Fdiv (Fmult (Py P U V) (Py P V U)) (Py U V U)))
+++++
intros.
-----
Theorem elim_py_on_foot_middle : forall A B P U V Y : Point, on_foot Y P U V -> Py A Y B = (Py P U V / Py U V U) * Py A V B + (Py P V U) / (Py U V U) * Py A U B - (Py P U V * Py P V U) / Py U V U.
Proof.
intros.

*****
H : on_foot Y P U V
A,B,P,U,V,Y : Point
*****
eq (Py A Y B) (Fminus (Fplus (Fmult (Fdiv (Py P U V) (Py U V U)) (Py A V B)) (Fmult (Fdiv (Py P V U) (Py U V U)) (Py A U B))) (Fdiv (Fmult (Py P U V) (Py P V U)) (Py U V U)))
+++++
rewrite (l3_5_py A B U V).
-----
Theorem elim_py_on_foot_middle : forall A B P U V Y : Point, on_foot Y P U V -> Py A Y B = (Py P U V / Py U V U) * Py A V B + (Py P V U) / (Py U V U) * Py A U B - (Py P U V * Py P V U) / Py U V U.
Proof.
intros.
rewrite (l3_5_py A B U V).

*****
H : on_foot Y P U V
A,B,P,U,V,Y : Point
*****
eq (Fminus (Fplus (Fmult (Fdiv (DSeg U Y) (DSeg U V)) (Py A V B)) (Fmult (Fdiv (DSeg Y V) (DSeg U V)) (Py A U B))) (Fmult (Fmult (Fdiv (DSeg U Y) (DSeg U V)) (Fdiv (DSeg Y V) (DSeg U V))) (Py U V U))) (Fminus (Fplus (Fmult (Fdiv (Py P U V) (Py U V U)) (Py A V B)) (Fmult (Fdiv (Py P V U) (Py U V U)) (Py A U B))) (Fdiv (Fmult (Py P U V) (Py P V U)) (Py U V U)))
+++++
idtac.
-----
Theorem elim_py_on_foot_middle : forall A B P U V Y : Point, on_foot Y P U V -> Py A Y B = (Py P U V / Py U V U) * Py A V B + (Py P V U) / (Py U V U) * Py A U B - (Py P U V * Py P V U) / Py U V U.
Proof.
intros.
rewrite (l3_5_py A B U V).
idtac.

*****
H : on_foot Y P U V
A,B,P,U,V,Y : Point
*****
eq (Fminus (Fplus (Fmult (Fdiv (DSeg U Y) (DSeg U V)) (Py A V B)) (Fmult (Fdiv (DSeg Y V) (DSeg U V)) (Py A U B))) (Fmult (Fmult (Fdiv (DSeg U Y) (DSeg U V)) (Fdiv (DSeg Y V) (DSeg U V))) (Py U V U))) (Fminus (Fplus (Fmult (Fdiv (Py P U V) (Py U V U)) (Py A V B)) (Fmult (Fdiv (Py P V U) (Py U V U)) (Py A U B))) (Fdiv (Fmult (Py P U V) (Py P V U)) (Py U V U)))
+++++
assert (U**Y/U**V = Py P U V / Py U V U).
-----
Theorem elim_py_on_foot_middle : forall A B P U V Y : Point, on_foot Y P U V -> Py A Y B = (Py P U V / Py U V U) * Py A V B + (Py P V U) / (Py U V U) * Py A U B - (Py P U V * Py P V U) / Py U V U.
Proof.
intros.
rewrite (l3_5_py A B U V).
idtac.
assert (U**Y/U**V = Py P U V / Py U V U).

*****
H : on_foot Y P U V
A,B,P,U,V,Y : Point
*****
eq (Fdiv (DSeg U Y) (DSeg U V)) (Fdiv (Py P U V) (Py U V U))
+++++
apply l_24_c_on_foot.
-----
Theorem elim_py_on_foot_middle : forall A B P U V Y : Point, on_foot Y P U V -> Py A Y B = (Py P U V / Py U V U) * Py A V B + (Py P V U) / (Py U V U) * Py A U B - (Py P U V * Py P V U) / Py U V U.
Proof.
intros.
rewrite (l3_5_py A B U V).
idtac.
assert (U**Y/U**V = Py P U V / Py U V U).
apply l_24_c_on_foot.

*****
H : on_foot Y P U V
A,B,P,U,V,Y : Point
*****
on_foot Y P U V
+++++
unfold on_foot.
-----
Theorem elim_py_on_foot_middle : forall A B P U V Y : Point, on_foot Y P U V -> Py A Y B = (Py P U V / Py U V U) * Py A V B + (Py P V U) / (Py U V U) * Py A U B - (Py P U V * Py P V U) / Py U V U.
Proof.
intros.
rewrite (l3_5_py A B U V).
idtac.
assert (U**Y/U**V = Py P U V / Py U V U).
apply l_24_c_on_foot.
unfold on_foot.

*****
H : on_foot Y P U V
A,B,P,U,V,Y : Point
*****
and (perp Y P U V) (and (Col Y U V) (not (eq U V)))
+++++
auto.
-----
Theorem elim_py_on_foot_middle : forall A B P U V Y : Point, on_foot Y P U V -> Py A Y B = (Py P U V / Py U V U) * Py A V B + (Py P V U) / (Py U V U) * Py A U B - (Py P U V * Py P V U) / Py U V U.
Proof.
intros.
rewrite (l3_5_py A B U V).
idtac.
assert (U**Y/U**V = Py P U V / Py U V U).

*****
H0 : eq (Fdiv (DSeg U Y) (DSeg U V)) (Fdiv (Py P U V) (Py U V U))
H : on_foot Y P U V
A,B,P,U,V,Y : Point
*****
eq (Fminus (Fplus (Fmult (Fdiv (DSeg U Y) (DSeg U V)) (Py A V B)) (Fmult (Fdiv (DSeg Y V) (DSeg U V)) (Py A U B))) (Fmult (Fmult (Fdiv (DSeg U Y) (DSeg U V)) (Fdiv (DSeg Y V) (DSeg U V))) (Py U V U))) (Fminus (Fplus (Fmult (Fdiv (Py P U V) (Py U V U)) (Py A V B)) (Fmult (Fdiv (Py P V U) (Py U V U)) (Py A U B))) (Fdiv (Fmult (Py P U V) (Py P V U)) (Py U V U)))
+++++
assert (V**Y/V**U = Py P V U / Py V U V).
-----
Theorem elim_py_on_foot_middle : forall A B P U V Y : Point, on_foot Y P U V -> Py A Y B = (Py P U V / Py U V U) * Py A V B + (Py P V U) / (Py U V U) * Py A U B - (Py P U V * Py P V U) / Py U V U.
Proof.
intros.
rewrite (l3_5_py A B U V).
idtac.
assert (U**Y/U**V = Py P U V / Py U V U).
assert (V**Y/V**U = Py P V U / Py V U V).

*****
H0 : eq (Fdiv (DSeg U Y) (DSeg U V)) (Fdiv (Py P U V) (Py U V U))
H : on_foot Y P U V
A,B,P,U,V,Y : Point
*****
eq (Fdiv (DSeg V Y) (DSeg V U)) (Fdiv (Py P V U) (Py V U V))
+++++
apply l_24_c_on_foot.
-----
Theorem elim_py_on_foot_middle : forall A B P U V Y : Point, on_foot Y P U V -> Py A Y B = (Py P U V / Py U V U) * Py A V B + (Py P V U) / (Py U V U) * Py A U B - (Py P U V * Py P V U) / Py U V U.
Proof.
intros.
rewrite (l3_5_py A B U V).
idtac.
assert (U**Y/U**V = Py P U V / Py U V U).
assert (V**Y/V**U = Py P V U / Py V U V).
apply l_24_c_on_foot.

*****
H0 : eq (Fdiv (DSeg U Y) (DSeg U V)) (Fdiv (Py P U V) (Py U V U))
H : on_foot Y P U V
A,B,P,U,V,Y : Point
*****
on_foot Y P V U
+++++
unfold on_foot in *.
-----
Theorem elim_py_on_foot_middle : forall A B P U V Y : Point, on_foot Y P U V -> Py A Y B = (Py P U V / Py U V U) * Py A V B + (Py P V U) / (Py U V U) * Py A U B - (Py P U V * Py P V U) / Py U V U.
Proof.
intros.
rewrite (l3_5_py A B U V).
idtac.
assert (U**Y/U**V = Py P U V / Py U V U).
assert (V**Y/V**U = Py P V U / Py V U V).
apply l_24_c_on_foot.
unfold on_foot in *.

*****
H0 : eq (Fdiv (DSeg U Y) (DSeg U V)) (Fdiv (Py P U V) (Py U V U))
H : and (perp Y P U V) (and (Col Y U V) (not (eq U V)))
A,B,P,U,V,Y : Point
*****
and (perp Y P V U) (and (Col Y V U) (not (eq V U)))
+++++
intuition.
-----
Theorem elim_py_on_foot_middle : forall A B P U V Y : Point, on_foot Y P U V -> Py A Y B = (Py P U V / Py U V U) * Py A V B + (Py P V U) / (Py U V U) * Py A U B - (Py P U V * Py P V U) / Py U V U.
Proof.
intros.
rewrite (l3_5_py A B U V).
idtac.
assert (U**Y/U**V = Py P U V / Py U V U).
assert (V**Y/V**U = Py P V U / Py V U V).

*****
H1 : eq (Fdiv (DSeg V Y) (DSeg V U)) (Fdiv (Py P V U) (Py V U V))
H0 : eq (Fdiv (DSeg U Y) (DSeg U V)) (Fdiv (Py P U V) (Py U V U))
H : on_foot Y P U V
A,B,P,U,V,Y : Point
*****
eq (Fminus (Fplus (Fmult (Fdiv (DSeg U Y) (DSeg U V)) (Py A V B)) (Fmult (Fdiv (DSeg Y V) (DSeg U V)) (Py A U B))) (Fmult (Fmult (Fdiv (DSeg U Y) (DSeg U V)) (Fdiv (DSeg Y V) (DSeg U V))) (Py U V U))) (Fminus (Fplus (Fmult (Fdiv (Py P U V) (Py U V U)) (Py A V B)) (Fmult (Fdiv (Py P V U) (Py U V U)) (Py A U B))) (Fdiv (Fmult (Py P U V) (Py P V U)) (Py U V U)))
+++++
rewrite H0.
-----
Theorem elim_py_on_foot_middle : forall A B P U V Y : Point, on_foot Y P U V -> Py A Y B = (Py P U V / Py U V U) * Py A V B + (Py P V U) / (Py U V U) * Py A U B - (Py P U V * Py P V U) / Py U V U.
Proof.
intros.
rewrite (l3_5_py A B U V).
idtac.
assert (U**Y/U**V = Py P U V / Py U V U).
assert (V**Y/V**U = Py P V U / Py V U V).
rewrite H0.

*****
H1 : eq (Fdiv (DSeg V Y) (DSeg V U)) (Fdiv (Py P V U) (Py V U V))
H0 : eq (Fdiv (DSeg U Y) (DSeg U V)) (Fdiv (Py P U V) (Py U V U))
H : on_foot Y P U V
A,B,P,U,V,Y : Point
*****
eq (Fminus (Fplus (Fmult (Fdiv (Py P U V) (Py U V U)) (Py A V B)) (Fmult (Fdiv (DSeg Y V) (DSeg U V)) (Py A U B))) (Fmult (Fmult (Fdiv (Py P U V) (Py U V U)) (Fdiv (DSeg Y V) (DSeg U V))) (Py U V U))) (Fminus (Fplus (Fmult (Fdiv (Py P U V) (Py U V U)) (Py A V B)) (Fmult (Fdiv (Py P V U) (Py U V U)) (Py A U B))) (Fdiv (Fmult (Py P U V) (Py P V U)) (Py U V U)))
+++++
unfold on_foot in *.
-----
Theorem elim_py_on_foot_middle : forall A B P U V Y : Point, on_foot Y P U V -> Py A Y B = (Py P U V / Py U V U) * Py A V B + (Py P V U) / (Py U V U) * Py A U B - (Py P U V * Py P V U) / Py U V U.
Proof.
intros.
rewrite (l3_5_py A B U V).
idtac.
assert (U**Y/U**V = Py P U V / Py U V U).
assert (V**Y/V**U = Py P V U / Py V U V).
rewrite H0.
unfold on_foot in *.

*****
H1 : eq (Fdiv (DSeg V Y) (DSeg V U)) (Fdiv (Py P V U) (Py V U V))
H0 : eq (Fdiv (DSeg U Y) (DSeg U V)) (Fdiv (Py P U V) (Py U V U))
H : and (perp Y P U V) (and (Col Y U V) (not (eq U V)))
A,B,P,U,V,Y : Point
*****
eq (Fminus (Fplus (Fmult (Fdiv (Py P U V) (Py U V U)) (Py A V B)) (Fmult (Fdiv (DSeg Y V) (DSeg U V)) (Py A U B))) (Fmult (Fmult (Fdiv (Py P U V) (Py U V U)) (Fdiv (DSeg Y V) (DSeg U V))) (Py U V U))) (Fminus (Fplus (Fmult (Fdiv (Py P U V) (Py U V U)) (Py A V B)) (Fmult (Fdiv (Py P V U) (Py U V U)) (Py A U B))) (Fdiv (Fmult (Py P U V) (Py P V U)) (Py U V U)))
+++++
use H.
-----
Theorem elim_py_on_foot_middle : forall A B P U V Y : Point, on_foot Y P U V -> Py A Y B = (Py P U V / Py U V U) * Py A V B + (Py P V U) / (Py U V U) * Py A U B - (Py P U V * Py P V U) / Py U V U.
Proof.
intros.
rewrite (l3_5_py A B U V).
idtac.
assert (U**Y/U**V = Py P U V / Py U V U).
assert (V**Y/V**U = Py P V U / Py V U V).
rewrite H0.
unfold on_foot in *.
use H.

*****
H5 : not (eq U V)
H4 : Col Y U V
H2 : perp Y P U V
H1 : eq (Fdiv (DSeg V Y) (DSeg V U)) (Fdiv (Py P V U) (Py V U V))
H0 : eq (Fdiv (DSeg U Y) (DSeg U V)) (Fdiv (Py P U V) (Py U V U))
A,B,P,U,V,Y : Point
*****
eq (Fminus (Fplus (Fmult (Fdiv (Py P U V) (Py U V U)) (Py A V B)) (Fmult (Fdiv (DSeg Y V) (DSeg U V)) (Py A U B))) (Fmult (Fmult (Fdiv (Py P U V) (Py U V U)) (Fdiv (DSeg Y V) (DSeg U V))) (Py U V U))) (Fminus (Fplus (Fmult (Fdiv (Py P U V) (Py U V U)) (Py A V B)) (Fmult (Fdiv (Py P V U) (Py U V U)) (Py A U B))) (Fdiv (Fmult (Py P U V) (Py P V U)) (Py U V U)))
+++++
replace (Y ** V / U ** V) with (V**Y/V**U) by auto with Geom.
-----
Theorem elim_py_on_foot_middle : forall A B P U V Y : Point, on_foot Y P U V -> Py A Y B = (Py P U V / Py U V U) * Py A V B + (Py P V U) / (Py U V U) * Py A U B - (Py P U V * Py P V U) / Py U V U.
Proof.
intros.
rewrite (l3_5_py A B U V).
idtac.
assert (U**Y/U**V = Py P U V / Py U V U).
assert (V**Y/V**U = Py P V U / Py V U V).
rewrite H0.
unfold on_foot in *.
use H.
replace (Y ** V / U ** V) with (V**Y/V**U) by auto with Geom.

*****
H5 : not (eq U V)
H4 : Col Y U V
H2 : perp Y P U V
H1 : eq (Fdiv (DSeg V Y) (DSeg V U)) (Fdiv (Py P V U) (Py V U V))
H0 : eq (Fdiv (DSeg U Y) (DSeg U V)) (Fdiv (Py P U V) (Py U V U))
A,B,P,U,V,Y : Point
*****
eq (Fminus (Fplus (Fmult (Fdiv (Py P U V) (Py U V U)) (Py A V B)) (Fmult (Fdiv (DSeg V Y) (DSeg V U)) (Py A U B))) (Fmult (Fmult (Fdiv (Py P U V) (Py U V U)) (Fdiv (DSeg V Y) (DSeg V U))) (Py U V U))) (Fminus (Fplus (Fmult (Fdiv (Py P U V) (Py U V U)) (Py A V B)) (Fmult (Fdiv (Py P V U) (Py U V U)) (Py A U B))) (Fdiv (Fmult (Py P U V) (Py P V U)) (Py U V U)))
+++++
rewrite H1.
-----
Theorem elim_py_on_foot_middle : forall A B P U V Y : Point, on_foot Y P U V -> Py A Y B = (Py P U V / Py U V U) * Py A V B + (Py P V U) / (Py U V U) * Py A U B - (Py P U V * Py P V U) / Py U V U.
Proof.
intros.
rewrite (l3_5_py A B U V).
idtac.
assert (U**Y/U**V = Py P U V / Py U V U).
assert (V**Y/V**U = Py P V U / Py V U V).
rewrite H0.
unfold on_foot in *.
use H.
replace (Y ** V / U ** V) with (V**Y/V**U) by auto with Geom.
rewrite H1.

*****
H5 : not (eq U V)
H4 : Col Y U V
H2 : perp Y P U V
H1 : eq (Fdiv (DSeg V Y) (DSeg V U)) (Fdiv (Py P V U) (Py V U V))
H0 : eq (Fdiv (DSeg U Y) (DSeg U V)) (Fdiv (Py P U V) (Py U V U))
A,B,P,U,V,Y : Point
*****
eq (Fminus (Fplus (Fmult (Fdiv (Py P U V) (Py U V U)) (Py A V B)) (Fmult (Fdiv (Py P V U) (Py V U V)) (Py A U B))) (Fmult (Fmult (Fdiv (Py P U V) (Py U V U)) (Fdiv (Py P V U) (Py V U V))) (Py U V U))) (Fminus (Fplus (Fmult (Fdiv (Py P U V) (Py U V U)) (Py A V B)) (Fmult (Fdiv (Py P V U) (Py U V U)) (Py A U B))) (Fdiv (Fmult (Py P U V) (Py P V U)) (Py U V U)))
+++++
replace (Py V U V) with (Py U V U).
-----
Theorem elim_py_on_foot_middle : forall A B P U V Y : Point, on_foot Y P U V -> Py A Y B = (Py P U V / Py U V U) * Py A V B + (Py P V U) / (Py U V U) * Py A U B - (Py P U V * Py P V U) / Py U V U.
Proof.
intros.
rewrite (l3_5_py A B U V).
idtac.
assert (U**Y/U**V = Py P U V / Py U V U).
assert (V**Y/V**U = Py P V U / Py V U V).
rewrite H0.
unfold on_foot in *.
use H.
replace (Y ** V / U ** V) with (V**Y/V**U) by auto with Geom.
rewrite H1.
replace (Py V U V) with (Py U V U).

*****
H5 : not (eq U V)
H4 : Col Y U V
H2 : perp Y P U V
H1 : eq (Fdiv (DSeg V Y) (DSeg V U)) (Fdiv (Py P V U) (Py V U V))
H0 : eq (Fdiv (DSeg U Y) (DSeg U V)) (Fdiv (Py P U V) (Py U V U))
A,B,P,U,V,Y : Point
*****
eq (Fminus (Fplus (Fmult (Fdiv (Py P U V) (Py U V U)) (Py A V B)) (Fmult (Fdiv (Py P V U) (Py U V U)) (Py A U B))) (Fmult (Fmult (Fdiv (Py P U V) (Py U V U)) (Fdiv (Py P V U) (Py U V U))) (Py U V U))) (Fminus (Fplus (Fmult (Fdiv (Py P U V) (Py U V U)) (Py A V B)) (Fmult (Fdiv (Py P V U) (Py U V U)) (Py A U B))) (Fdiv (Fmult (Py P U V) (Py P V U)) (Py U V U)))
+++++
field.
-----
Theorem elim_py_on_foot_middle : forall A B P U V Y : Point, on_foot Y P U V -> Py A Y B = (Py P U V / Py U V U) * Py A V B + (Py P V U) / (Py U V U) * Py A U B - (Py P U V * Py P V U) / Py U V U.
Proof.
intros.
rewrite (l3_5_py A B U V).
idtac.
assert (U**Y/U**V = Py P U V / Py U V U).
assert (V**Y/V**U = Py P V U / Py V U V).
rewrite H0.
unfold on_foot in *.
use H.
replace (Y ** V / U ** V) with (V**Y/V**U) by auto with Geom.
rewrite H1.
replace (Py V U V) with (Py U V U).
field.

*****
H5 : not (eq U V)
H4 : Col Y U V
H2 : perp Y P U V
H1 : eq (Fdiv (DSeg V Y) (DSeg V U)) (Fdiv (Py P V U) (Py V U V))
H0 : eq (Fdiv (DSeg U Y) (DSeg U V)) (Fdiv (Py P U V) (Py U V U))
A,B,P,U,V,Y : Point
*****
not (eq (Py U V U) F0)
+++++
auto with Geom.
-----
Theorem elim_py_on_foot_middle : forall A B P U V Y : Point, on_foot Y P U V -> Py A Y B = (Py P U V / Py U V U) * Py A V B + (Py P V U) / (Py U V U) * Py A U B - (Py P U V * Py P V U) / Py U V U.
Proof.
intros.
rewrite (l3_5_py A B U V).
idtac.
assert (U**Y/U**V = Py P U V / Py U V U).
assert (V**Y/V**U = Py P V U / Py V U V).
rewrite H0.
unfold on_foot in *.
use H.
replace (Y ** V / U ** V) with (V**Y/V**U) by auto with Geom.
rewrite H1.
replace (Py V U V) with (Py U V U).

*****
H5 : not (eq U V)
H4 : Col Y U V
H2 : perp Y P U V
H1 : eq (Fdiv (DSeg V Y) (DSeg V U)) (Fdiv (Py P V U) (Py V U V))
H0 : eq (Fdiv (DSeg U Y) (DSeg U V)) (Fdiv (Py P U V) (Py U V U))
A,B,P,U,V,Y : Point
*****
eq (Py U V U) (Py V U V)
+++++
auto with Geom.
-----
Theorem elim_py_on_foot_middle : forall A B P U V Y : Point, on_foot Y P U V -> Py A Y B = (Py P U V / Py U V U) * Py A V B + (Py P V U) / (Py U V U) * Py A U B - (Py P U V * Py P V U) / Py U V U.
Proof.
intros.
rewrite (l3_5_py A B U V).

*****
H : on_foot Y P U V
A,B,P,U,V,Y : Point
*****
not (eq U V)
+++++
unfold on_foot in *.
-----
Theorem elim_py_on_foot_middle : forall A B P U V Y : Point, on_foot Y P U V -> Py A Y B = (Py P U V / Py U V U) * Py A V B + (Py P V U) / (Py U V U) * Py A U B - (Py P U V * Py P V U) / Py U V U.
Proof.
intros.
rewrite (l3_5_py A B U V).
unfold on_foot in *.

*****
H : and (perp Y P U V) (and (Col Y U V) (not (eq U V)))
A,B,P,U,V,Y : Point
*****
not (eq U V)
+++++
intuition .
-----
Theorem elim_py_on_foot_middle : forall A B P U V Y : Point, on_foot Y P U V -> Py A Y B = (Py P U V / Py U V U) * Py A V B + (Py P V U) / (Py U V U) * Py A U B - (Py P U V * Py P V U) / Py U V U.
Proof.
intros.
rewrite (l3_5_py A B U V).

*****
H : on_foot Y P U V
A,B,P,U,V,Y : Point
*****
Col Y U V
+++++
unfold on_foot in *.
-----
Theorem elim_py_on_foot_middle : forall A B P U V Y : Point, on_foot Y P U V -> Py A Y B = (Py P U V / Py U V U) * Py A V B + (Py P V U) / (Py U V U) * Py A U B - (Py P U V * Py P V U) / Py U V U.
Proof.
intros.
rewrite (l3_5_py A B U V).
unfold on_foot in *.

*****
H : and (perp Y P U V) (and (Col Y U V) (not (eq U V)))
A,B,P,U,V,Y : Point
*****
Col Y U V
+++++
intuition .
-----
Theorem elim_py_on_foot_middle : forall A B P U V Y : Point, on_foot Y P U V -> Py A Y B = (Py P U V / Py U V U) * Py A V B + (Py P V U) / (Py U V U) * Py A U B - (Py P U V * Py P V U) / Py U V U.
Proof.
intros.
rewrite (l3_5_py A B U V).

*****

*****

+++++
Qed.
-----
Theorem elim_py_on_foot_middle_invariant :\n forall A B P U V Y : Point,\n on_foot Y P U V -> Py U V U <> 0.
-----
Theorem elim_py_on_foot_middle_invariant : forall A B P U V Y : Point, on_foot Y P U V -> Py U V U <> 0.

*****

*****
forall (_ : Point) (_ : Point) (P U V Y : Point) (_ : on_foot Y P U V), not (eq (Py U V U) F0)
+++++
Proof.
-----
Theorem elim_py_on_foot_middle_invariant : forall A B P U V Y : Point, on_foot Y P U V -> Py U V U <> 0.
Proof.

*****

*****
forall (_ : Point) (_ : Point) (P U V Y : Point) (_ : on_foot Y P U V), not (eq (Py U V U) F0)
+++++
exact elim_py_on_foot_right_invariant.
-----
Theorem elim_py_on_foot_middle_invariant : forall A B P U V Y : Point, on_foot Y P U V -> Py U V U <> 0.
Proof.
exact elim_py_on_foot_right_invariant.

*****

*****

+++++
Qed.
-----
Theorem elim_py_on_perp_d_right :\nforall A B P Q Y : Point, forall r: F,\non_perp_d Y P Q r ->\nPy A B Y = Py A B P - (2+2) * r * S4 P A Q B.
-----
Theorem elim_py_on_perp_d_right : forall A B P Q Y : Point, forall r: F, on_perp_d Y P Q r -> Py A B Y = Py A B P - (2+2) * r * S4 P A Q B.

*****

*****
forall (A B P Q Y : Point) (r : F) (_ : on_perp_d Y P Q r), eq (Py A B Y) (Fminus (Py A B P) (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) r) (S4 P A Q B)))
+++++
Proof.
-----
Theorem elim_py_on_perp_d_right : forall A B P Q Y : Point, forall r: F, on_perp_d Y P Q r -> Py A B Y = Py A B P - (2+2) * r * S4 P A Q B.
Proof.

*****

*****
forall (A B P Q Y : Point) (r : F) (_ : on_perp_d Y P Q r), eq (Py A B Y) (Fminus (Py A B P) (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) r) (S4 P A Q B)))
+++++
intros.
-----
Theorem elim_py_on_perp_d_right : forall A B P Q Y : Point, forall r: F, on_perp_d Y P Q r -> Py A B Y = Py A B P - (2+2) * r * S4 P A Q B.
Proof.
intros.

*****
H : on_perp_d Y P Q r
r : F
A,B,P,Q,Y : Point
*****
eq (Py A B Y) (Fminus (Py A B P) (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) r) (S4 P A Q B)))
+++++
unfold on_perp_d in H.
-----
Theorem elim_py_on_perp_d_right : forall A B P Q Y : Point, forall r: F, on_perp_d Y P Q r -> Py A B Y = Py A B P - (2+2) * r * S4 P A Q B.
Proof.
intros.
unfold on_perp_d in H.

*****
H : and (not (eq P Q))\n (and (perp Y P P Q)\n (and\n (eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y)))\n (not (eq r F0))))
r : F
A,B,P,Q,Y : Point
*****
eq (Py A B Y) (Fminus (Py A B P) (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) r) (S4 P A Q B)))
+++++
use H.
-----
Theorem elim_py_on_perp_d_right : forall A B P Q Y : Point, forall r: F, on_perp_d Y P Q r -> Py A B Y = Py A B P - (2+2) * r * S4 P A Q B.
Proof.
intros.
unfold on_perp_d in H.
use H.

*****
H4 : not (eq r F0)
H1 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H2 : perp Y P P Q
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
eq (Py A B Y) (Fminus (Py A B P) (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) r) (S4 P A Q B)))
+++++
assert (P<>Y).
-----
Theorem elim_py_on_perp_d_right : forall A B P Q Y : Point, forall r: F, on_perp_d Y P Q r -> Py A B Y = Py A B P - (2+2) * r * S4 P A Q B.
Proof.
intros.
unfold on_perp_d in H.
use H.
assert (P<>Y).

*****
H4 : not (eq r F0)
H1 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H2 : perp Y P P Q
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
not (eq P Y)
+++++
intro;subst;basic_simpl.
-----
Theorem elim_py_on_perp_d_right : forall A B P Q Y : Point, forall r: F, on_perp_d Y P Q r -> Py A B Y = Py A B P - (2+2) * r * S4 P A Q B.
Proof.
intros.
unfold on_perp_d in H.
use H.
assert (P<>Y).
intro;subst;basic_simpl.

*****
H4 : not (eq r F0)
H0 : not (eq Y Q)
H2 : perp Y Y Y Q
H1 : eq (Fmult r (Py Y Q Y)) F0
r : F
A,B,Q,Y : Point
*****
False
+++++
IsoleVar (Py Y Q Y) H1.
-----
Theorem elim_py_on_perp_d_right : forall A B P Q Y : Point, forall r: F, on_perp_d Y P Q r -> Py A B Y = Py A B P - (2+2) * r * S4 P A Q B.
Proof.
intros.
unfold on_perp_d in H.
use H.
assert (P<>Y).
intro;subst;basic_simpl.
IsoleVar (Py Y Q Y) H1.

*****
H1 : eq (Py Y Q Y) (Fdiv F0 r)
H4 : not (eq r F0)
H0 : not (eq Y Q)
H2 : perp Y Y Y Q
r : F
A,B,Q,Y : Point
*****
False
+++++
replace (0/r) with 0 in H1 by (field;auto with Geom).
-----
Theorem elim_py_on_perp_d_right : forall A B P Q Y : Point, forall r: F, on_perp_d Y P Q r -> Py A B Y = Py A B P - (2+2) * r * S4 P A Q B.
Proof.
intros.
unfold on_perp_d in H.
use H.
assert (P<>Y).
intro;subst;basic_simpl.
IsoleVar (Py Y Q Y) H1.
replace (0/r) with 0 in H1 by (field;auto with Geom).

*****
H1 : eq (Py Y Q Y) F0
H4 : not (eq r F0)
H0 : not (eq Y Q)
H2 : perp Y Y Y Q
r : F
A,B,Q,Y : Point
*****
False
+++++
intuition.
-----
Theorem elim_py_on_perp_d_right : forall A B P Q Y : Point, forall r: F, on_perp_d Y P Q r -> Py A B Y = Py A B P - (2+2) * r * S4 P A Q B.
Proof.
intros.
unfold on_perp_d in H.
use H.
assert (P<>Y).
intro;subst;basic_simpl.
IsoleVar (Py Y Q Y) H1.
replace (0/r) with 0 in H1 by (field;auto with Geom).
intuition.

*****
H : not (eq P Y)
H4 : not (eq r F0)
H1 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H2 : perp Y P P Q
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
eq (Py A B Y) (Fminus (Py A B P) (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) r) (S4 P A Q B)))
+++++
elim (proj_ex A P Y H).
-----
Theorem elim_py_on_perp_d_right : forall A B P Q Y : Point, forall r: F, on_perp_d Y P Q r -> Py A B Y = Py A B P - (2+2) * r * S4 P A Q B.
Proof.
intros.
unfold on_perp_d in H.
use H.
assert (P<>Y).
intro;subst;basic_simpl.
IsoleVar (Py Y Q Y) H1.
replace (0/r) with 0 in H1 by (field;auto with Geom).
intuition.
elim (proj_ex A P Y H).

*****
H : not (eq P Y)
H4 : not (eq r F0)
H1 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H2 : perp Y P P Q
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
forall (x : Point) (_ : on_foot x A P Y), eq (Py A B Y) (Fminus (Py A B P) (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) r) (S4 P A Q B)))
+++++
intros A1 HA1.
-----
Theorem elim_py_on_perp_d_right : forall A B P Q Y : Point, forall r: F, on_perp_d Y P Q r -> Py A B Y = Py A B P - (2+2) * r * S4 P A Q B.
Proof.
intros.
unfold on_perp_d in H.
use H.
assert (P<>Y).
intro;subst;basic_simpl.
IsoleVar (Py Y Q Y) H1.
replace (0/r) with 0 in H1 by (field;auto with Geom).
intuition.
elim (proj_ex A P Y H).
intros A1 HA1.

*****
HA1 : on_foot A1 A P Y
A1 : Point
H : not (eq P Y)
H4 : not (eq r F0)
H1 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H2 : perp Y P P Q
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
eq (Py A B Y) (Fminus (Py A B P) (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) r) (S4 P A Q B)))
+++++
elim (proj_ex B P Y H).
-----
Theorem elim_py_on_perp_d_right : forall A B P Q Y : Point, forall r: F, on_perp_d Y P Q r -> Py A B Y = Py A B P - (2+2) * r * S4 P A Q B.
Proof.
intros.
unfold on_perp_d in H.
use H.
assert (P<>Y).
intro;subst;basic_simpl.
IsoleVar (Py Y Q Y) H1.
replace (0/r) with 0 in H1 by (field;auto with Geom).
intuition.
elim (proj_ex A P Y H).
intros A1 HA1.
elim (proj_ex B P Y H).

*****
HA1 : on_foot A1 A P Y
A1 : Point
H : not (eq P Y)
H4 : not (eq r F0)
H1 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H2 : perp Y P P Q
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
forall (x : Point) (_ : on_foot x B P Y), eq (Py A B Y) (Fminus (Py A B P) (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) r) (S4 P A Q B)))
+++++
intros B1 HB1.
-----
Theorem elim_py_on_perp_d_right : forall A B P Q Y : Point, forall r: F, on_perp_d Y P Q r -> Py A B Y = Py A B P - (2+2) * r * S4 P A Q B.
Proof.
intros.
unfold on_perp_d in H.
use H.
assert (P<>Y).
intro;subst;basic_simpl.
IsoleVar (Py Y Q Y) H1.
replace (0/r) with 0 in H1 by (field;auto with Geom).
intuition.
elim (proj_ex A P Y H).
intros A1 HA1.
elim (proj_ex B P Y H).
intros B1 HB1.

*****
HB1 : on_foot B1 B P Y
B1 : Point
HA1 : on_foot A1 A P Y
A1 : Point
H : not (eq P Y)
H4 : not (eq r F0)
H1 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H2 : perp Y P P Q
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
eq (Py A B Y) (Fminus (Py A B P) (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) r) (S4 P A Q B)))
+++++
assert (Py4 B P A Y / Py Y P Y = S4 P A Q B / S P Q Y).
-----
Theorem elim_py_on_perp_d_right : forall A B P Q Y : Point, forall r: F, on_perp_d Y P Q r -> Py A B Y = Py A B P - (2+2) * r * S4 P A Q B.
Proof.
intros.
unfold on_perp_d in H.
use H.
assert (P<>Y).
intro;subst;basic_simpl.
IsoleVar (Py Y Q Y) H1.
replace (0/r) with 0 in H1 by (field;auto with Geom).
intuition.
elim (proj_ex A P Y H).
intros A1 HA1.
elim (proj_ex B P Y H).
intros B1 HB1.
assert (Py4 B P A Y / Py Y P Y = S4 P A Q B / S P Q Y).

*****
HB1 : on_foot B1 B P Y
B1 : Point
HA1 : on_foot A1 A P Y
A1 : Point
H : not (eq P Y)
H4 : not (eq r F0)
H1 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H2 : perp Y P P Q
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
eq (Fdiv (Py4 B P A Y) (Py Y P Y)) (Fdiv (S4 P A Q B) (S P Q Y))
+++++
replace (Py4 B P A Y) with (Py4 B1 P A1 Y).
-----
Theorem elim_py_on_perp_d_right : forall A B P Q Y : Point, forall r: F, on_perp_d Y P Q r -> Py A B Y = Py A B P - (2+2) * r * S4 P A Q B.
Proof.
intros.
unfold on_perp_d in H.
use H.
assert (P<>Y).
intro;subst;basic_simpl.
IsoleVar (Py Y Q Y) H1.
replace (0/r) with 0 in H1 by (field;auto with Geom).
intuition.
elim (proj_ex A P Y H).
intros A1 HA1.
elim (proj_ex B P Y H).
intros B1 HB1.
assert (Py4 B P A Y / Py Y P Y = S4 P A Q B / S P Q Y).
replace (Py4 B P A Y) with (Py4 B1 P A1 Y).

*****
HB1 : on_foot B1 B P Y
B1 : Point
HA1 : on_foot A1 A P Y
A1 : Point
H : not (eq P Y)
H4 : not (eq r F0)
H1 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H2 : perp Y P P Q
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
eq (Fdiv (Py4 B1 P A1 Y) (Py Y P Y)) (Fdiv (S4 P A Q B) (S P Q Y))
+++++
assert (parallel A1 B1 P Y).
-----
Theorem elim_py_on_perp_d_right : forall A B P Q Y : Point, forall r: F, on_perp_d Y P Q r -> Py A B Y = Py A B P - (2+2) * r * S4 P A Q B.
Proof.
intros.
unfold on_perp_d in H.
use H.
assert (P<>Y).
intro;subst;basic_simpl.
IsoleVar (Py Y Q Y) H1.
replace (0/r) with 0 in H1 by (field;auto with Geom).
intuition.
elim (proj_ex A P Y H).
intros A1 HA1.
elim (proj_ex B P Y H).
intros B1 HB1.
assert (Py4 B P A Y / Py Y P Y = S4 P A Q B / S P Q Y).
replace (Py4 B P A Y) with (Py4 B1 P A1 Y).
assert (parallel A1 B1 P Y).

*****
HB1 : on_foot B1 B P Y
B1 : Point
HA1 : on_foot A1 A P Y
A1 : Point
H : not (eq P Y)
H4 : not (eq r F0)
H1 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H2 : perp Y P P Q
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
parallel A1 B1 P Y
+++++
unfold on_foot in *.
-----
Theorem elim_py_on_perp_d_right : forall A B P Q Y : Point, forall r: F, on_perp_d Y P Q r -> Py A B Y = Py A B P - (2+2) * r * S4 P A Q B.
Proof.
intros.
unfold on_perp_d in H.
use H.
assert (P<>Y).
intro;subst;basic_simpl.
IsoleVar (Py Y Q Y) H1.
replace (0/r) with 0 in H1 by (field;auto with Geom).
intuition.
elim (proj_ex A P Y H).
intros A1 HA1.
elim (proj_ex B P Y H).
intros B1 HB1.
assert (Py4 B P A Y / Py Y P Y = S4 P A Q B / S P Q Y).
replace (Py4 B P A Y) with (Py4 B1 P A1 Y).
assert (parallel A1 B1 P Y).
unfold on_foot in *.

*****
HB1 : and (perp B1 B P Y) (and (Col B1 P Y) (not (eq P Y)))
B1 : Point
HA1 : and (perp A1 A P Y) (and (Col A1 P Y) (not (eq P Y)))
A1 : Point
H : not (eq P Y)
H4 : not (eq r F0)
H1 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H2 : perp Y P P Q
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
parallel A1 B1 P Y
+++++
use HA1.
-----
Theorem elim_py_on_perp_d_right : forall A B P Q Y : Point, forall r: F, on_perp_d Y P Q r -> Py A B Y = Py A B P - (2+2) * r * S4 P A Q B.
Proof.
intros.
unfold on_perp_d in H.
use H.
assert (P<>Y).
intro;subst;basic_simpl.
IsoleVar (Py Y Q Y) H1.
replace (0/r) with 0 in H1 by (field;auto with Geom).
intuition.
elim (proj_ex A P Y H).
intros A1 HA1.
elim (proj_ex B P Y H).
intros B1 HB1.
assert (Py4 B P A Y / Py Y P Y = S4 P A Q B / S P Q Y).
replace (Py4 B P A Y) with (Py4 B1 P A1 Y).
assert (parallel A1 B1 P Y).
unfold on_foot in *.
use HA1.

*****
H7 : not (eq P Y)
H6 : Col A1 P Y
H3 : perp A1 A P Y
HB1 : and (perp B1 B P Y) (and (Col B1 P Y) (not (eq P Y)))
A1,B1 : Point
H : not (eq P Y)
H4 : not (eq r F0)
H1 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H2 : perp Y P P Q
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
parallel A1 B1 P Y
+++++
use HB1.
-----
Theorem elim_py_on_perp_d_right : forall A B P Q Y : Point, forall r: F, on_perp_d Y P Q r -> Py A B Y = Py A B P - (2+2) * r * S4 P A Q B.
Proof.
intros.
unfold on_perp_d in H.
use H.
assert (P<>Y).
intro;subst;basic_simpl.
IsoleVar (Py Y Q Y) H1.
replace (0/r) with 0 in H1 by (field;auto with Geom).
intuition.
elim (proj_ex A P Y H).
intros A1 HA1.
elim (proj_ex B P Y H).
intros B1 HB1.
assert (Py4 B P A Y / Py Y P Y = S4 P A Q B / S P Q Y).
replace (Py4 B P A Y) with (Py4 B1 P A1 Y).
assert (parallel A1 B1 P Y).
unfold on_foot in *.
use HA1.
use HB1.

*****
H10 : not (eq P Y)
H9 : Col B1 P Y
H5 : perp B1 B P Y
H7 : not (eq P Y)
H6 : Col A1 P Y
H3 : perp A1 A P Y
A1,B1 : Point
H : not (eq P Y)
H4 : not (eq r F0)
H1 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H2 : perp Y P P Q
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
parallel A1 B1 P Y
+++++
cut (parallel Y P A1 B1).
-----
Theorem elim_py_on_perp_d_right : forall A B P Q Y : Point, forall r: F, on_perp_d Y P Q r -> Py A B Y = Py A B P - (2+2) * r * S4 P A Q B.
Proof.
intros.
unfold on_perp_d in H.
use H.
assert (P<>Y).
intro;subst;basic_simpl.
IsoleVar (Py Y Q Y) H1.
replace (0/r) with 0 in H1 by (field;auto with Geom).
intuition.
elim (proj_ex A P Y H).
intros A1 HA1.
elim (proj_ex B P Y H).
intros B1 HB1.
assert (Py4 B P A Y / Py Y P Y = S4 P A Q B / S P Q Y).
replace (Py4 B P A Y) with (Py4 B1 P A1 Y).
assert (parallel A1 B1 P Y).
unfold on_foot in *.
use HA1.
use HB1.
cut (parallel Y P A1 B1).

*****
H10 : not (eq P Y)
H9 : Col B1 P Y
H5 : perp B1 B P Y
H7 : not (eq P Y)
H6 : Col A1 P Y
H3 : perp A1 A P Y
A1,B1 : Point
H : not (eq P Y)
H4 : not (eq r F0)
H1 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H2 : perp Y P P Q
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
forall _ : parallel Y P A1 B1, parallel A1 B1 P Y
+++++
auto with Geom.
-----
Theorem elim_py_on_perp_d_right : forall A B P Q Y : Point, forall r: F, on_perp_d Y P Q r -> Py A B Y = Py A B P - (2+2) * r * S4 P A Q B.
Proof.
intros.
unfold on_perp_d in H.
use H.
assert (P<>Y).
intro;subst;basic_simpl.
IsoleVar (Py Y Q Y) H1.
replace (0/r) with 0 in H1 by (field;auto with Geom).
intuition.
elim (proj_ex A P Y H).
intros A1 HA1.
elim (proj_ex B P Y H).
intros B1 HB1.
assert (Py4 B P A Y / Py Y P Y = S4 P A Q B / S P Q Y).
replace (Py4 B P A Y) with (Py4 B1 P A1 Y).
assert (parallel A1 B1 P Y).
unfold on_foot in *.
use HA1.
use HB1.
cut (parallel Y P A1 B1).
auto with Geom.

*****
H10 : not (eq P Y)
H9 : Col B1 P Y
H5 : perp B1 B P Y
H7 : not (eq P Y)
H6 : Col A1 P Y
H3 : perp A1 A P Y
A1,B1 : Point
H : not (eq P Y)
H4 : not (eq r F0)
H1 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H2 : perp Y P P Q
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
parallel Y P A1 B1
+++++
unfold parallel, S4.
-----
Theorem elim_py_on_perp_d_right : forall A B P Q Y : Point, forall r: F, on_perp_d Y P Q r -> Py A B Y = Py A B P - (2+2) * r * S4 P A Q B.
Proof.
intros.
unfold on_perp_d in H.
use H.
assert (P<>Y).
intro;subst;basic_simpl.
IsoleVar (Py Y Q Y) H1.
replace (0/r) with 0 in H1 by (field;auto with Geom).
intuition.
elim (proj_ex A P Y H).
intros A1 HA1.
elim (proj_ex B P Y H).
intros B1 HB1.
assert (Py4 B P A Y / Py Y P Y = S4 P A Q B / S P Q Y).
replace (Py4 B P A Y) with (Py4 B1 P A1 Y).
assert (parallel A1 B1 P Y).
unfold on_foot in *.
use HA1.
use HB1.
cut (parallel Y P A1 B1).
auto with Geom.
unfold parallel, S4.

*****
H10 : not (eq P Y)
H9 : Col B1 P Y
H5 : perp B1 B P Y
H7 : not (eq P Y)
H6 : Col A1 P Y
H3 : perp A1 A P Y
A1,B1 : Point
H : not (eq P Y)
H4 : not (eq r F0)
H1 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H2 : perp Y P P Q
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
eq (Fplus (S Y A1 P) (S Y P B1)) F0
+++++
unfold Col in *.
-----
Theorem elim_py_on_perp_d_right : forall A B P Q Y : Point, forall r: F, on_perp_d Y P Q r -> Py A B Y = Py A B P - (2+2) * r * S4 P A Q B.
Proof.
intros.
unfold on_perp_d in H.
use H.
assert (P<>Y).
intro;subst;basic_simpl.
IsoleVar (Py Y Q Y) H1.
replace (0/r) with 0 in H1 by (field;auto with Geom).
intuition.
elim (proj_ex A P Y H).
intros A1 HA1.
elim (proj_ex B P Y H).
intros B1 HB1.
assert (Py4 B P A Y / Py Y P Y = S4 P A Q B / S P Q Y).
replace (Py4 B P A Y) with (Py4 B1 P A1 Y).
assert (parallel A1 B1 P Y).
unfold on_foot in *.
use HA1.
use HB1.
cut (parallel Y P A1 B1).
auto with Geom.
unfold parallel, S4.
unfold Col in *.

*****
H10 : not (eq P Y)
H9 : eq (S B1 P Y) F0
H5 : perp B1 B P Y
H7 : not (eq P Y)
H6 : eq (S A1 P Y) F0
H3 : perp A1 A P Y
A1,B1 : Point
H : not (eq P Y)
H4 : not (eq r F0)
H1 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H2 : perp Y P P Q
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
eq (Fplus (S Y A1 P) (S Y P B1)) F0
+++++
uniformize_signed_areas.
-----
Theorem elim_py_on_perp_d_right : forall A B P Q Y : Point, forall r: F, on_perp_d Y P Q r -> Py A B Y = Py A B P - (2+2) * r * S4 P A Q B.
Proof.
intros.
unfold on_perp_d in H.
use H.
assert (P<>Y).
intro;subst;basic_simpl.
IsoleVar (Py Y Q Y) H1.
replace (0/r) with 0 in H1 by (field;auto with Geom).
intuition.
elim (proj_ex A P Y H).
intros A1 HA1.
elim (proj_ex B P Y H).
intros B1 HB1.
assert (Py4 B P A Y / Py Y P Y = S4 P A Q B / S P Q Y).
replace (Py4 B P A Y) with (Py4 B1 P A1 Y).
assert (parallel A1 B1 P Y).
unfold on_foot in *.
use HA1.
use HB1.
cut (parallel Y P A1 B1).
auto with Geom.
unfold parallel, S4.
unfold Col in *.
uniformize_signed_areas.

*****
H9 : eq (S B1 P Y) F0
H6 : eq (S A1 P Y) F0
H1 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H10 : not (eq P Y)
H5 : perp B1 B P Y
H7 : not (eq P Y)
H3 : perp A1 A P Y
A1,B1 : Point
H : not (eq P Y)
H4 : not (eq r F0)
H2 : perp Y P P Q
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
eq (Fplus (S A1 P Y) (Fopp (S B1 P Y))) F0
+++++
rewrite H6, H9.
-----
Theorem elim_py_on_perp_d_right : forall A B P Q Y : Point, forall r: F, on_perp_d Y P Q r -> Py A B Y = Py A B P - (2+2) * r * S4 P A Q B.
Proof.
intros.
unfold on_perp_d in H.
use H.
assert (P<>Y).
intro;subst;basic_simpl.
IsoleVar (Py Y Q Y) H1.
replace (0/r) with 0 in H1 by (field;auto with Geom).
intuition.
elim (proj_ex A P Y H).
intros A1 HA1.
elim (proj_ex B P Y H).
intros B1 HB1.
assert (Py4 B P A Y / Py Y P Y = S4 P A Q B / S P Q Y).
replace (Py4 B P A Y) with (Py4 B1 P A1 Y).
assert (parallel A1 B1 P Y).
unfold on_foot in *.
use HA1.
use HB1.
cut (parallel Y P A1 B1).
auto with Geom.
unfold parallel, S4.
unfold Col in *.
uniformize_signed_areas.
rewrite H6, H9.

*****
H9 : eq (S B1 P Y) F0
H6 : eq (S A1 P Y) F0
H1 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H10 : not (eq P Y)
H5 : perp B1 B P Y
H7 : not (eq P Y)
H3 : perp A1 A P Y
A1,B1 : Point
H : not (eq P Y)
H4 : not (eq r F0)
H2 : perp Y P P Q
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
eq (Fplus F0 (Fopp F0)) F0
+++++
ring.
-----
Theorem elim_py_on_perp_d_right : forall A B P Q Y : Point, forall r: F, on_perp_d Y P Q r -> Py A B Y = Py A B P - (2+2) * r * S4 P A Q B.
Proof.
intros.
unfold on_perp_d in H.
use H.
assert (P<>Y).
intro;subst;basic_simpl.
IsoleVar (Py Y Q Y) H1.
replace (0/r) with 0 in H1 by (field;auto with Geom).
intuition.
elim (proj_ex A P Y H).
intros A1 HA1.
elim (proj_ex B P Y H).
intros B1 HB1.
assert (Py4 B P A Y / Py Y P Y = S4 P A Q B / S P Q Y).
replace (Py4 B P A Y) with (Py4 B1 P A1 Y).
assert (parallel A1 B1 P Y).
unfold on_foot in *.
use HA1.
use HB1.
cut (parallel Y P A1 B1).
auto with Geom.
unfold parallel, S4.
unfold Col in *.
uniformize_signed_areas.
rewrite H6, H9.
ring.

*****
H3 : parallel A1 B1 P Y
HB1 : on_foot B1 B P Y
B1 : Point
HA1 : on_foot A1 A P Y
A1 : Point
H : not (eq P Y)
H4 : not (eq r F0)
H1 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H2 : perp Y P P Q
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
eq (Fdiv (Py4 B1 P A1 Y) (Py Y P Y)) (Fdiv (S4 P A Q B) (S P Q Y))
+++++
replace (Py Y P Y) with (Py P Y P) by auto with Geom.
-----
Theorem elim_py_on_perp_d_right : forall A B P Q Y : Point, forall r: F, on_perp_d Y P Q r -> Py A B Y = Py A B P - (2+2) * r * S4 P A Q B.
Proof.
intros.
unfold on_perp_d in H.
use H.
assert (P<>Y).
intro;subst;basic_simpl.
IsoleVar (Py Y Q Y) H1.
replace (0/r) with 0 in H1 by (field;auto with Geom).
intuition.
elim (proj_ex A P Y H).
intros A1 HA1.
elim (proj_ex B P Y H).
intros B1 HB1.
assert (Py4 B P A Y / Py Y P Y = S4 P A Q B / S P Q Y).
replace (Py4 B P A Y) with (Py4 B1 P A1 Y).
assert (parallel A1 B1 P Y).
unfold on_foot in *.
use HA1.
use HB1.
cut (parallel Y P A1 B1).
auto with Geom.
unfold parallel, S4.
unfold Col in *.
uniformize_signed_areas.
rewrite H6, H9.
ring.
replace (Py Y P Y) with (Py P Y P) by auto with Geom.

*****
H3 : parallel A1 B1 P Y
HB1 : on_foot B1 B P Y
B1 : Point
HA1 : on_foot A1 A P Y
A1 : Point
H : not (eq P Y)
H4 : not (eq r F0)
H1 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H2 : perp Y P P Q
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
eq (Fdiv (Py4 B1 P A1 Y) (Py P Y P)) (Fdiv (S4 P A Q B) (S P Q Y))
+++++
rewrite <- (l3_10b A1 B1 P Y) by assumption.
-----
Theorem elim_py_on_perp_d_right : forall A B P Q Y : Point, forall r: F, on_perp_d Y P Q r -> Py A B Y = Py A B P - (2+2) * r * S4 P A Q B.
Proof.
intros.
unfold on_perp_d in H.
use H.
assert (P<>Y).
intro;subst;basic_simpl.
IsoleVar (Py Y Q Y) H1.
replace (0/r) with 0 in H1 by (field;auto with Geom).
intuition.
elim (proj_ex A P Y H).
intros A1 HA1.
elim (proj_ex B P Y H).
intros B1 HB1.
assert (Py4 B P A Y / Py Y P Y = S4 P A Q B / S P Q Y).
replace (Py4 B P A Y) with (Py4 B1 P A1 Y).
assert (parallel A1 B1 P Y).
unfold on_foot in *.
use HA1.
use HB1.
cut (parallel Y P A1 B1).
auto with Geom.
unfold parallel, S4.
unfold Col in *.
uniformize_signed_areas.
rewrite H6, H9.
ring.
replace (Py Y P Y) with (Py P Y P) by auto with Geom.
rewrite <- (l3_10b A1 B1 P Y) by assumption.

*****
H3 : parallel A1 B1 P Y
HB1 : on_foot B1 B P Y
B1 : Point
HA1 : on_foot A1 A P Y
A1 : Point
H : not (eq P Y)
H4 : not (eq r F0)
H1 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H2 : perp Y P P Q
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
eq (Fdiv (DSeg A1 B1) (DSeg P Y)) (Fdiv (S4 P A Q B) (S P Q Y))
+++++
replace (A1 ** B1 / P ** Y) with ((S4 P A1 Q B1) / (S P Q Y)).
-----
Theorem elim_py_on_perp_d_right : forall A B P Q Y : Point, forall r: F, on_perp_d Y P Q r -> Py A B Y = Py A B P - (2+2) * r * S4 P A Q B.
Proof.
intros.
unfold on_perp_d in H.
use H.
assert (P<>Y).
intro;subst;basic_simpl.
IsoleVar (Py Y Q Y) H1.
replace (0/r) with 0 in H1 by (field;auto with Geom).
intuition.
elim (proj_ex A P Y H).
intros A1 HA1.
elim (proj_ex B P Y H).
intros B1 HB1.
assert (Py4 B P A Y / Py Y P Y = S4 P A Q B / S P Q Y).
replace (Py4 B P A Y) with (Py4 B1 P A1 Y).
assert (parallel A1 B1 P Y).
unfold on_foot in *.
use HA1.
use HB1.
cut (parallel Y P A1 B1).
auto with Geom.
unfold parallel, S4.
unfold Col in *.
uniformize_signed_areas.
rewrite H6, H9.
ring.
replace (Py Y P Y) with (Py P Y P) by auto with Geom.
rewrite <- (l3_10b A1 B1 P Y) by assumption.
replace (A1 ** B1 / P ** Y) with ((S4 P A1 Q B1) / (S P Q Y)).

*****
H3 : parallel A1 B1 P Y
HB1 : on_foot B1 B P Y
B1 : Point
HA1 : on_foot A1 A P Y
A1 : Point
H : not (eq P Y)
H4 : not (eq r F0)
H1 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H2 : perp Y P P Q
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
eq (Fdiv (S4 P A1 Q B1) (S P Q Y)) (Fdiv (S4 P A Q B) (S P Q Y))
+++++
replace (S4 P A1 Q B1) with (S4 P A Q B).
-----
Theorem elim_py_on_perp_d_right : forall A B P Q Y : Point, forall r: F, on_perp_d Y P Q r -> Py A B Y = Py A B P - (2+2) * r * S4 P A Q B.
Proof.
intros.
unfold on_perp_d in H.
use H.
assert (P<>Y).
intro;subst;basic_simpl.
IsoleVar (Py Y Q Y) H1.
replace (0/r) with 0 in H1 by (field;auto with Geom).
intuition.
elim (proj_ex A P Y H).
intros A1 HA1.
elim (proj_ex B P Y H).
intros B1 HB1.
assert (Py4 B P A Y / Py Y P Y = S4 P A Q B / S P Q Y).
replace (Py4 B P A Y) with (Py4 B1 P A1 Y).
assert (parallel A1 B1 P Y).
unfold on_foot in *.
use HA1.
use HB1.
cut (parallel Y P A1 B1).
auto with Geom.
unfold parallel, S4.
unfold Col in *.
uniformize_signed_areas.
rewrite H6, H9.
ring.
replace (Py Y P Y) with (Py P Y P) by auto with Geom.
rewrite <- (l3_10b A1 B1 P Y) by assumption.
replace (A1 ** B1 / P ** Y) with ((S4 P A1 Q B1) / (S P Q Y)).
replace (S4 P A1 Q B1) with (S4 P A Q B).

*****
H3 : parallel A1 B1 P Y
HB1 : on_foot B1 B P Y
B1 : Point
HA1 : on_foot A1 A P Y
A1 : Point
H : not (eq P Y)
H4 : not (eq r F0)
H1 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H2 : perp Y P P Q
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
eq (Fdiv (S4 P A Q B) (S P Q Y)) (Fdiv (S4 P A Q B) (S P Q Y))
+++++
auto.
-----
Theorem elim_py_on_perp_d_right : forall A B P Q Y : Point, forall r: F, on_perp_d Y P Q r -> Py A B Y = Py A B P - (2+2) * r * S4 P A Q B.
Proof.
intros.
unfold on_perp_d in H.
use H.
assert (P<>Y).
intro;subst;basic_simpl.
IsoleVar (Py Y Q Y) H1.
replace (0/r) with 0 in H1 by (field;auto with Geom).
intuition.
elim (proj_ex A P Y H).
intros A1 HA1.
elim (proj_ex B P Y H).
intros B1 HB1.
assert (Py4 B P A Y / Py Y P Y = S4 P A Q B / S P Q Y).
replace (Py4 B P A Y) with (Py4 B1 P A1 Y).
assert (parallel A1 B1 P Y).
unfold on_foot in *.
use HA1.
use HB1.
cut (parallel Y P A1 B1).
auto with Geom.
unfold parallel, S4.
unfold Col in *.
uniformize_signed_areas.
rewrite H6, H9.
ring.
replace (Py Y P Y) with (Py P Y P) by auto with Geom.
rewrite <- (l3_10b A1 B1 P Y) by assumption.
replace (A1 ** B1 / P ** Y) with ((S4 P A1 Q B1) / (S P Q Y)).
replace (S4 P A1 Q B1) with (S4 P A Q B).
auto.

*****
H3 : parallel A1 B1 P Y
HB1 : on_foot B1 B P Y
B1 : Point
HA1 : on_foot A1 A P Y
A1 : Point
H : not (eq P Y)
H4 : not (eq r F0)
H1 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H2 : perp Y P P Q
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
eq (S4 P A Q B) (S4 P A1 Q B1)
+++++
unfold S4.
-----
Theorem elim_py_on_perp_d_right : forall A B P Q Y : Point, forall r: F, on_perp_d Y P Q r -> Py A B Y = Py A B P - (2+2) * r * S4 P A Q B.
Proof.
intros.
unfold on_perp_d in H.
use H.
assert (P<>Y).
intro;subst;basic_simpl.
IsoleVar (Py Y Q Y) H1.
replace (0/r) with 0 in H1 by (field;auto with Geom).
intuition.
elim (proj_ex A P Y H).
intros A1 HA1.
elim (proj_ex B P Y H).
intros B1 HB1.
assert (Py4 B P A Y / Py Y P Y = S4 P A Q B / S P Q Y).
replace (Py4 B P A Y) with (Py4 B1 P A1 Y).
assert (parallel A1 B1 P Y).
unfold on_foot in *.
use HA1.
use HB1.
cut (parallel Y P A1 B1).
auto with Geom.
unfold parallel, S4.
unfold Col in *.
uniformize_signed_areas.
rewrite H6, H9.
ring.
replace (Py Y P Y) with (Py P Y P) by auto with Geom.
rewrite <- (l3_10b A1 B1 P Y) by assumption.
replace (A1 ** B1 / P ** Y) with ((S4 P A1 Q B1) / (S P Q Y)).
replace (S4 P A1 Q B1) with (S4 P A Q B).
auto.
unfold S4.

*****
H3 : parallel A1 B1 P Y
HB1 : on_foot B1 B P Y
B1 : Point
HA1 : on_foot A1 A P Y
A1 : Point
H : not (eq P Y)
H4 : not (eq r F0)
H1 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H2 : perp Y P P Q
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
eq (Fplus (S P A Q) (S P Q B)) (Fplus (S P A1 Q) (S P Q B1))
+++++
unfold on_foot in *.
-----
Theorem elim_py_on_perp_d_right : forall A B P Q Y : Point, forall r: F, on_perp_d Y P Q r -> Py A B Y = Py A B P - (2+2) * r * S4 P A Q B.
Proof.
intros.
unfold on_perp_d in H.
use H.
assert (P<>Y).
intro;subst;basic_simpl.
IsoleVar (Py Y Q Y) H1.
replace (0/r) with 0 in H1 by (field;auto with Geom).
intuition.
elim (proj_ex A P Y H).
intros A1 HA1.
elim (proj_ex B P Y H).
intros B1 HB1.
assert (Py4 B P A Y / Py Y P Y = S4 P A Q B / S P Q Y).
replace (Py4 B P A Y) with (Py4 B1 P A1 Y).
assert (parallel A1 B1 P Y).
unfold on_foot in *.
use HA1.
use HB1.
cut (parallel Y P A1 B1).
auto with Geom.
unfold parallel, S4.
unfold Col in *.
uniformize_signed_areas.
rewrite H6, H9.
ring.
replace (Py Y P Y) with (Py P Y P) by auto with Geom.
rewrite <- (l3_10b A1 B1 P Y) by assumption.
replace (A1 ** B1 / P ** Y) with ((S4 P A1 Q B1) / (S P Q Y)).
replace (S4 P A1 Q B1) with (S4 P A Q B).
auto.
unfold S4.
unfold on_foot in *.

*****
H3 : parallel A1 B1 P Y
HB1 : and (perp B1 B P Y) (and (Col B1 P Y) (not (eq P Y)))
B1 : Point
HA1 : and (perp A1 A P Y) (and (Col A1 P Y) (not (eq P Y)))
A1 : Point
H : not (eq P Y)
H4 : not (eq r F0)
H1 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H2 : perp Y P P Q
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
eq (Fplus (S P A Q) (S P Q B)) (Fplus (S P A1 Q) (S P Q B1))
+++++
use HA1.
-----
Theorem elim_py_on_perp_d_right : forall A B P Q Y : Point, forall r: F, on_perp_d Y P Q r -> Py A B Y = Py A B P - (2+2) * r * S4 P A Q B.
Proof.
intros.
unfold on_perp_d in H.
use H.
assert (P<>Y).
intro;subst;basic_simpl.
IsoleVar (Py Y Q Y) H1.
replace (0/r) with 0 in H1 by (field;auto with Geom).
intuition.
elim (proj_ex A P Y H).
intros A1 HA1.
elim (proj_ex B P Y H).
intros B1 HB1.
assert (Py4 B P A Y / Py Y P Y = S4 P A Q B / S P Q Y).
replace (Py4 B P A Y) with (Py4 B1 P A1 Y).
assert (parallel A1 B1 P Y).
unfold on_foot in *.
use HA1.
use HB1.
cut (parallel Y P A1 B1).
auto with Geom.
unfold parallel, S4.
unfold Col in *.
uniformize_signed_areas.
rewrite H6, H9.
ring.
replace (Py Y P Y) with (Py P Y P) by auto with Geom.
rewrite <- (l3_10b A1 B1 P Y) by assumption.
replace (A1 ** B1 / P ** Y) with ((S4 P A1 Q B1) / (S P Q Y)).
replace (S4 P A1 Q B1) with (S4 P A Q B).
auto.
unfold S4.
unfold on_foot in *.
use HA1.

*****
H8 : not (eq P Y)
H7 : Col A1 P Y
H5 : perp A1 A P Y
H3 : parallel A1 B1 P Y
HB1 : and (perp B1 B P Y) (and (Col B1 P Y) (not (eq P Y)))
A1,B1 : Point
H : not (eq P Y)
H4 : not (eq r F0)
H1 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H2 : perp Y P P Q
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
eq (Fplus (S P A Q) (S P Q B)) (Fplus (S P A1 Q) (S P Q B1))
+++++
use HB1.
-----
Theorem elim_py_on_perp_d_right : forall A B P Q Y : Point, forall r: F, on_perp_d Y P Q r -> Py A B Y = Py A B P - (2+2) * r * S4 P A Q B.
Proof.
intros.
unfold on_perp_d in H.
use H.
assert (P<>Y).
intro;subst;basic_simpl.
IsoleVar (Py Y Q Y) H1.
replace (0/r) with 0 in H1 by (field;auto with Geom).
intuition.
elim (proj_ex A P Y H).
intros A1 HA1.
elim (proj_ex B P Y H).
intros B1 HB1.
assert (Py4 B P A Y / Py Y P Y = S4 P A Q B / S P Q Y).
replace (Py4 B P A Y) with (Py4 B1 P A1 Y).
assert (parallel A1 B1 P Y).
unfold on_foot in *.
use HA1.
use HB1.
cut (parallel Y P A1 B1).
auto with Geom.
unfold parallel, S4.
unfold Col in *.
uniformize_signed_areas.
rewrite H6, H9.
ring.
replace (Py Y P Y) with (Py P Y P) by auto with Geom.
rewrite <- (l3_10b A1 B1 P Y) by assumption.
replace (A1 ** B1 / P ** Y) with ((S4 P A1 Q B1) / (S P Q Y)).
replace (S4 P A1 Q B1) with (S4 P A Q B).
auto.
unfold S4.
unfold on_foot in *.
use HA1.
use HB1.

*****
H11 : not (eq P Y)
H10 : Col B1 P Y
H6 : perp B1 B P Y
H8 : not (eq P Y)
H7 : Col A1 P Y
H5 : perp A1 A P Y
H3 : parallel A1 B1 P Y
A1,B1 : Point
H : not (eq P Y)
H4 : not (eq r F0)
H1 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H2 : perp Y P P Q
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
eq (Fplus (S P A Q) (S P Q B)) (Fplus (S P A1 Q) (S P Q B1))
+++++
assert (parallel P Q B B1).
-----
Theorem elim_py_on_perp_d_right : forall A B P Q Y : Point, forall r: F, on_perp_d Y P Q r -> Py A B Y = Py A B P - (2+2) * r * S4 P A Q B.
Proof.
intros.
unfold on_perp_d in H.
use H.
assert (P<>Y).
intro;subst;basic_simpl.
IsoleVar (Py Y Q Y) H1.
replace (0/r) with 0 in H1 by (field;auto with Geom).
intuition.
elim (proj_ex A P Y H).
intros A1 HA1.
elim (proj_ex B P Y H).
intros B1 HB1.
assert (Py4 B P A Y / Py Y P Y = S4 P A Q B / S P Q Y).
replace (Py4 B P A Y) with (Py4 B1 P A1 Y).
assert (parallel A1 B1 P Y).
unfold on_foot in *.
use HA1.
use HB1.
cut (parallel Y P A1 B1).
auto with Geom.
unfold parallel, S4.
unfold Col in *.
uniformize_signed_areas.
rewrite H6, H9.
ring.
replace (Py Y P Y) with (Py P Y P) by auto with Geom.
rewrite <- (l3_10b A1 B1 P Y) by assumption.
replace (A1 ** B1 / P ** Y) with ((S4 P A1 Q B1) / (S P Q Y)).
replace (S4 P A1 Q B1) with (S4 P A Q B).
auto.
unfold S4.
unfold on_foot in *.
use HA1.
use HB1.
assert (parallel P Q B B1).

*****
H11 : not (eq P Y)
H10 : Col B1 P Y
H6 : perp B1 B P Y
H8 : not (eq P Y)
H7 : Col A1 P Y
H5 : perp A1 A P Y
H3 : parallel A1 B1 P Y
A1,B1 : Point
H : not (eq P Y)
H4 : not (eq r F0)
H1 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H2 : perp Y P P Q
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
parallel P Q B B1
+++++
apply (perp_perp_para P Q Y P B B1);auto with Geom.
-----
Theorem elim_py_on_perp_d_right : forall A B P Q Y : Point, forall r: F, on_perp_d Y P Q r -> Py A B Y = Py A B P - (2+2) * r * S4 P A Q B.
Proof.
intros.
unfold on_perp_d in H.
use H.
assert (P<>Y).
intro;subst;basic_simpl.
IsoleVar (Py Y Q Y) H1.
replace (0/r) with 0 in H1 by (field;auto with Geom).
intuition.
elim (proj_ex A P Y H).
intros A1 HA1.
elim (proj_ex B P Y H).
intros B1 HB1.
assert (Py4 B P A Y / Py Y P Y = S4 P A Q B / S P Q Y).
replace (Py4 B P A Y) with (Py4 B1 P A1 Y).
assert (parallel A1 B1 P Y).
unfold on_foot in *.
use HA1.
use HB1.
cut (parallel Y P A1 B1).
auto with Geom.
unfold parallel, S4.
unfold Col in *.
uniformize_signed_areas.
rewrite H6, H9.
ring.
replace (Py Y P Y) with (Py P Y P) by auto with Geom.
rewrite <- (l3_10b A1 B1 P Y) by assumption.
replace (A1 ** B1 / P ** Y) with ((S4 P A1 Q B1) / (S P Q Y)).
replace (S4 P A1 Q B1) with (S4 P A Q B).
auto.
unfold S4.
unfold on_foot in *.
use HA1.
use HB1.
assert (parallel P Q B B1).
apply (perp_perp_para P Q Y P B B1);auto with Geom.

*****
H9 : parallel P Q B B1
H11 : not (eq P Y)
H10 : Col B1 P Y
H6 : perp B1 B P Y
H8 : not (eq P Y)
H7 : Col A1 P Y
H5 : perp A1 A P Y
H3 : parallel A1 B1 P Y
A1,B1 : Point
H : not (eq P Y)
H4 : not (eq r F0)
H1 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H2 : perp Y P P Q
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
eq (Fplus (S P A Q) (S P Q B)) (Fplus (S P A1 Q) (S P Q B1))
+++++
assert (parallel P Q A A1).
-----
Theorem elim_py_on_perp_d_right : forall A B P Q Y : Point, forall r: F, on_perp_d Y P Q r -> Py A B Y = Py A B P - (2+2) * r * S4 P A Q B.
Proof.
intros.
unfold on_perp_d in H.
use H.
assert (P<>Y).
intro;subst;basic_simpl.
IsoleVar (Py Y Q Y) H1.
replace (0/r) with 0 in H1 by (field;auto with Geom).
intuition.
elim (proj_ex A P Y H).
intros A1 HA1.
elim (proj_ex B P Y H).
intros B1 HB1.
assert (Py4 B P A Y / Py Y P Y = S4 P A Q B / S P Q Y).
replace (Py4 B P A Y) with (Py4 B1 P A1 Y).
assert (parallel A1 B1 P Y).
unfold on_foot in *.
use HA1.
use HB1.
cut (parallel Y P A1 B1).
auto with Geom.
unfold parallel, S4.
unfold Col in *.
uniformize_signed_areas.
rewrite H6, H9.
ring.
replace (Py Y P Y) with (Py P Y P) by auto with Geom.
rewrite <- (l3_10b A1 B1 P Y) by assumption.
replace (A1 ** B1 / P ** Y) with ((S4 P A1 Q B1) / (S P Q Y)).
replace (S4 P A1 Q B1) with (S4 P A Q B).
auto.
unfold S4.
unfold on_foot in *.
use HA1.
use HB1.
assert (parallel P Q B B1).
apply (perp_perp_para P Q Y P B B1);auto with Geom.
assert (parallel P Q A A1).

*****
H9 : parallel P Q B B1
H11 : not (eq P Y)
H10 : Col B1 P Y
H6 : perp B1 B P Y
H8 : not (eq P Y)
H7 : Col A1 P Y
H5 : perp A1 A P Y
H3 : parallel A1 B1 P Y
A1,B1 : Point
H : not (eq P Y)
H4 : not (eq r F0)
H1 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H2 : perp Y P P Q
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
parallel P Q A A1
+++++
apply (perp_perp_para P Q Y P A A1);auto with Geom.
-----
Theorem elim_py_on_perp_d_right : forall A B P Q Y : Point, forall r: F, on_perp_d Y P Q r -> Py A B Y = Py A B P - (2+2) * r * S4 P A Q B.
Proof.
intros.
unfold on_perp_d in H.
use H.
assert (P<>Y).
intro;subst;basic_simpl.
IsoleVar (Py Y Q Y) H1.
replace (0/r) with 0 in H1 by (field;auto with Geom).
intuition.
elim (proj_ex A P Y H).
intros A1 HA1.
elim (proj_ex B P Y H).
intros B1 HB1.
assert (Py4 B P A Y / Py Y P Y = S4 P A Q B / S P Q Y).
replace (Py4 B P A Y) with (Py4 B1 P A1 Y).
assert (parallel A1 B1 P Y).
unfold on_foot in *.
use HA1.
use HB1.
cut (parallel Y P A1 B1).
auto with Geom.
unfold parallel, S4.
unfold Col in *.
uniformize_signed_areas.
rewrite H6, H9.
ring.
replace (Py Y P Y) with (Py P Y P) by auto with Geom.
rewrite <- (l3_10b A1 B1 P Y) by assumption.
replace (A1 ** B1 / P ** Y) with ((S4 P A1 Q B1) / (S P Q Y)).
replace (S4 P A1 Q B1) with (S4 P A Q B).
auto.
unfold S4.
unfold on_foot in *.
use HA1.
use HB1.
assert (parallel P Q B B1).
apply (perp_perp_para P Q Y P B B1);auto with Geom.
assert (parallel P Q A A1).
apply (perp_perp_para P Q Y P A A1);auto with Geom.

*****
H12 : parallel P Q A A1
H9 : parallel P Q B B1
H11 : not (eq P Y)
H10 : Col B1 P Y
H6 : perp B1 B P Y
H8 : not (eq P Y)
H7 : Col A1 P Y
H5 : perp A1 A P Y
H3 : parallel A1 B1 P Y
A1,B1 : Point
H : not (eq P Y)
H4 : not (eq r F0)
H1 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H2 : perp Y P P Q
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
eq (Fplus (S P A Q) (S P Q B)) (Fplus (S P A1 Q) (S P Q B1))
+++++
unfold parallel, S4 in *.
-----
Theorem elim_py_on_perp_d_right : forall A B P Q Y : Point, forall r: F, on_perp_d Y P Q r -> Py A B Y = Py A B P - (2+2) * r * S4 P A Q B.
Proof.
intros.
unfold on_perp_d in H.
use H.
assert (P<>Y).
intro;subst;basic_simpl.
IsoleVar (Py Y Q Y) H1.
replace (0/r) with 0 in H1 by (field;auto with Geom).
intuition.
elim (proj_ex A P Y H).
intros A1 HA1.
elim (proj_ex B P Y H).
intros B1 HB1.
assert (Py4 B P A Y / Py Y P Y = S4 P A Q B / S P Q Y).
replace (Py4 B P A Y) with (Py4 B1 P A1 Y).
assert (parallel A1 B1 P Y).
unfold on_foot in *.
use HA1.
use HB1.
cut (parallel Y P A1 B1).
auto with Geom.
unfold parallel, S4.
unfold Col in *.
uniformize_signed_areas.
rewrite H6, H9.
ring.
replace (Py Y P Y) with (Py P Y P) by auto with Geom.
rewrite <- (l3_10b A1 B1 P Y) by assumption.
replace (A1 ** B1 / P ** Y) with ((S4 P A1 Q B1) / (S P Q Y)).
replace (S4 P A1 Q B1) with (S4 P A Q B).
auto.
unfold S4.
unfold on_foot in *.
use HA1.
use HB1.
assert (parallel P Q B B1).
apply (perp_perp_para P Q Y P B B1);auto with Geom.
assert (parallel P Q A A1).
apply (perp_perp_para P Q Y P A A1);auto with Geom.
unfold parallel, S4 in *.

*****
H12 : eq (Fplus (S P A Q) (S P Q A1)) F0
H9 : eq (Fplus (S P B Q) (S P Q B1)) F0
H11 : not (eq P Y)
H10 : Col B1 P Y
H6 : perp B1 B P Y
H8 : not (eq P Y)
H7 : Col A1 P Y
H5 : perp A1 A P Y
H3 : eq (Fplus (S A1 P B1) (S A1 B1 Y)) F0
A1,B1 : Point
H : not (eq P Y)
H4 : not (eq r F0)
H1 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H2 : perp Y P P Q
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
eq (Fplus (S P A Q) (S P Q B)) (Fplus (S P A1 Q) (S P Q B1))
+++++
uniformize_signed_areas.
-----
Theorem elim_py_on_perp_d_right : forall A B P Q Y : Point, forall r: F, on_perp_d Y P Q r -> Py A B Y = Py A B P - (2+2) * r * S4 P A Q B.
Proof.
intros.
unfold on_perp_d in H.
use H.
assert (P<>Y).
intro;subst;basic_simpl.
IsoleVar (Py Y Q Y) H1.
replace (0/r) with 0 in H1 by (field;auto with Geom).
intuition.
elim (proj_ex A P Y H).
intros A1 HA1.
elim (proj_ex B P Y H).
intros B1 HB1.
assert (Py4 B P A Y / Py Y P Y = S4 P A Q B / S P Q Y).
replace (Py4 B P A Y) with (Py4 B1 P A1 Y).
assert (parallel A1 B1 P Y).
unfold on_foot in *.
use HA1.
use HB1.
cut (parallel Y P A1 B1).
auto with Geom.
unfold parallel, S4.
unfold Col in *.
uniformize_signed_areas.
rewrite H6, H9.
ring.
replace (Py Y P Y) with (Py P Y P) by auto with Geom.
rewrite <- (l3_10b A1 B1 P Y) by assumption.
replace (A1 ** B1 / P ** Y) with ((S4 P A1 Q B1) / (S P Q Y)).
replace (S4 P A1 Q B1) with (S4 P A Q B).
auto.
unfold S4.
unfold on_foot in *.
use HA1.
use HB1.
assert (parallel P Q B B1).
apply (perp_perp_para P Q Y P B B1);auto with Geom.
assert (parallel P Q A A1).
apply (perp_perp_para P Q Y P A A1);auto with Geom.
unfold parallel, S4 in *.
uniformize_signed_areas.

*****
H12 : eq (Fplus (S P A Q) (S P Q A1)) F0
H9 : eq (Fplus (S P B Q) (S P Q B1)) F0
H3 : eq (Fplus (S A1 P B1) (S A1 B1 Y)) F0
H1 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H11 : not (eq P Y)
H10 : Col B1 P Y
H6 : perp B1 B P Y
H8 : not (eq P Y)
H7 : Col A1 P Y
H5 : perp A1 A P Y
A1,B1 : Point
H : not (eq P Y)
H4 : not (eq r F0)
H2 : perp Y P P Q
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
eq (Fplus (S P A Q) (Fopp (S P B Q))) (Fplus (Fopp (S P Q A1)) (S P Q B1))
+++++
IsoleVar (S P A Q) H12;rewrite H12.
-----
Theorem elim_py_on_perp_d_right : forall A B P Q Y : Point, forall r: F, on_perp_d Y P Q r -> Py A B Y = Py A B P - (2+2) * r * S4 P A Q B.
Proof.
intros.
unfold on_perp_d in H.
use H.
assert (P<>Y).
intro;subst;basic_simpl.
IsoleVar (Py Y Q Y) H1.
replace (0/r) with 0 in H1 by (field;auto with Geom).
intuition.
elim (proj_ex A P Y H).
intros A1 HA1.
elim (proj_ex B P Y H).
intros B1 HB1.
assert (Py4 B P A Y / Py Y P Y = S4 P A Q B / S P Q Y).
replace (Py4 B P A Y) with (Py4 B1 P A1 Y).
assert (parallel A1 B1 P Y).
unfold on_foot in *.
use HA1.
use HB1.
cut (parallel Y P A1 B1).
auto with Geom.
unfold parallel, S4.
unfold Col in *.
uniformize_signed_areas.
rewrite H6, H9.
ring.
replace (Py Y P Y) with (Py P Y P) by auto with Geom.
rewrite <- (l3_10b A1 B1 P Y) by assumption.
replace (A1 ** B1 / P ** Y) with ((S4 P A1 Q B1) / (S P Q Y)).
replace (S4 P A1 Q B1) with (S4 P A Q B).
auto.
unfold S4.
unfold on_foot in *.
use HA1.
use HB1.
assert (parallel P Q B B1).
apply (perp_perp_para P Q Y P B B1);auto with Geom.
assert (parallel P Q A A1).
apply (perp_perp_para P Q Y P A A1);auto with Geom.
unfold parallel, S4 in *.
uniformize_signed_areas.
IsoleVar (S P A Q) H12;rewrite H12.

*****
H12 : eq (S P A Q) (Fminus F0 (S P Q A1))
H9 : eq (Fplus (S P B Q) (S P Q B1)) F0
H3 : eq (Fplus (S A1 P B1) (S A1 B1 Y)) F0
H1 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H11 : not (eq P Y)
H10 : Col B1 P Y
H6 : perp B1 B P Y
H8 : not (eq P Y)
H7 : Col A1 P Y
H5 : perp A1 A P Y
A1,B1 : Point
H : not (eq P Y)
H4 : not (eq r F0)
H2 : perp Y P P Q
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
eq (Fplus (Fminus F0 (S P Q A1)) (Fopp (S P B Q))) (Fplus (Fopp (S P Q A1)) (S P Q B1))
+++++
IsoleVar (S P B Q) H9;rewrite H9.
-----
Theorem elim_py_on_perp_d_right : forall A B P Q Y : Point, forall r: F, on_perp_d Y P Q r -> Py A B Y = Py A B P - (2+2) * r * S4 P A Q B.
Proof.
intros.
unfold on_perp_d in H.
use H.
assert (P<>Y).
intro;subst;basic_simpl.
IsoleVar (Py Y Q Y) H1.
replace (0/r) with 0 in H1 by (field;auto with Geom).
intuition.
elim (proj_ex A P Y H).
intros A1 HA1.
elim (proj_ex B P Y H).
intros B1 HB1.
assert (Py4 B P A Y / Py Y P Y = S4 P A Q B / S P Q Y).
replace (Py4 B P A Y) with (Py4 B1 P A1 Y).
assert (parallel A1 B1 P Y).
unfold on_foot in *.
use HA1.
use HB1.
cut (parallel Y P A1 B1).
auto with Geom.
unfold parallel, S4.
unfold Col in *.
uniformize_signed_areas.
rewrite H6, H9.
ring.
replace (Py Y P Y) with (Py P Y P) by auto with Geom.
rewrite <- (l3_10b A1 B1 P Y) by assumption.
replace (A1 ** B1 / P ** Y) with ((S4 P A1 Q B1) / (S P Q Y)).
replace (S4 P A1 Q B1) with (S4 P A Q B).
auto.
unfold S4.
unfold on_foot in *.
use HA1.
use HB1.
assert (parallel P Q B B1).
apply (perp_perp_para P Q Y P B B1);auto with Geom.
assert (parallel P Q A A1).
apply (perp_perp_para P Q Y P A A1);auto with Geom.
unfold parallel, S4 in *.
uniformize_signed_areas.
IsoleVar (S P A Q) H12;rewrite H12.
IsoleVar (S P B Q) H9;rewrite H9.

*****
H9 : eq (S P B Q) (Fminus F0 (S P Q B1))
H12 : eq (S P A Q) (Fminus F0 (S P Q A1))
H3 : eq (Fplus (S A1 P B1) (S A1 B1 Y)) F0
H1 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H11 : not (eq P Y)
H10 : Col B1 P Y
H6 : perp B1 B P Y
H8 : not (eq P Y)
H7 : Col A1 P Y
H5 : perp A1 A P Y
A1,B1 : Point
H : not (eq P Y)
H4 : not (eq r F0)
H2 : perp Y P P Q
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
eq (Fplus (Fminus F0 (S P Q A1)) (Fopp (Fminus F0 (S P Q B1)))) (Fplus (Fopp (S P Q A1)) (S P Q B1))
+++++
ring.
-----
Theorem elim_py_on_perp_d_right : forall A B P Q Y : Point, forall r: F, on_perp_d Y P Q r -> Py A B Y = Py A B P - (2+2) * r * S4 P A Q B.
Proof.
intros.
unfold on_perp_d in H.
use H.
assert (P<>Y).
intro;subst;basic_simpl.
IsoleVar (Py Y Q Y) H1.
replace (0/r) with 0 in H1 by (field;auto with Geom).
intuition.
elim (proj_ex A P Y H).
intros A1 HA1.
elim (proj_ex B P Y H).
intros B1 HB1.
assert (Py4 B P A Y / Py Y P Y = S4 P A Q B / S P Q Y).
replace (Py4 B P A Y) with (Py4 B1 P A1 Y).
assert (parallel A1 B1 P Y).
unfold on_foot in *.
use HA1.
use HB1.
cut (parallel Y P A1 B1).
auto with Geom.
unfold parallel, S4.
unfold Col in *.
uniformize_signed_areas.
rewrite H6, H9.
ring.
replace (Py Y P Y) with (Py P Y P) by auto with Geom.
rewrite <- (l3_10b A1 B1 P Y) by assumption.
replace (A1 ** B1 / P ** Y) with ((S4 P A1 Q B1) / (S P Q Y)).
replace (S4 P A1 Q B1) with (S4 P A Q B).
auto.
unfold S4.
unfold on_foot in *.
use HA1.
use HB1.
assert (parallel P Q B B1).
apply (perp_perp_para P Q Y P B B1);auto with Geom.
assert (parallel P Q A A1).
apply (perp_perp_para P Q Y P A A1);auto with Geom.
unfold parallel, S4 in *.
uniformize_signed_areas.
IsoleVar (S P A Q) H12;rewrite H12.
IsoleVar (S P B Q) H9;rewrite H9.
ring.

*****
H3 : parallel A1 B1 P Y
HB1 : on_foot B1 B P Y
B1 : Point
HA1 : on_foot A1 A P Y
A1 : Point
H : not (eq P Y)
H4 : not (eq r F0)
H1 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H2 : perp Y P P Q
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
eq (Fdiv (S4 P A1 Q B1) (S P Q Y)) (Fdiv (DSeg A1 B1) (DSeg P Y))
+++++
unfold S4.
-----
Theorem elim_py_on_perp_d_right : forall A B P Q Y : Point, forall r: F, on_perp_d Y P Q r -> Py A B Y = Py A B P - (2+2) * r * S4 P A Q B.
Proof.
intros.
unfold on_perp_d in H.
use H.
assert (P<>Y).
intro;subst;basic_simpl.
IsoleVar (Py Y Q Y) H1.
replace (0/r) with 0 in H1 by (field;auto with Geom).
intuition.
elim (proj_ex A P Y H).
intros A1 HA1.
elim (proj_ex B P Y H).
intros B1 HB1.
assert (Py4 B P A Y / Py Y P Y = S4 P A Q B / S P Q Y).
replace (Py4 B P A Y) with (Py4 B1 P A1 Y).
assert (parallel A1 B1 P Y).
unfold on_foot in *.
use HA1.
use HB1.
cut (parallel Y P A1 B1).
auto with Geom.
unfold parallel, S4.
unfold Col in *.
uniformize_signed_areas.
rewrite H6, H9.
ring.
replace (Py Y P Y) with (Py P Y P) by auto with Geom.
rewrite <- (l3_10b A1 B1 P Y) by assumption.
replace (A1 ** B1 / P ** Y) with ((S4 P A1 Q B1) / (S P Q Y)).
replace (S4 P A1 Q B1) with (S4 P A Q B).
auto.
unfold S4.
unfold on_foot in *.
use HA1.
use HB1.
assert (parallel P Q B B1).
apply (perp_perp_para P Q Y P B B1);auto with Geom.
assert (parallel P Q A A1).
apply (perp_perp_para P Q Y P A A1);auto with Geom.
unfold parallel, S4 in *.
uniformize_signed_areas.
IsoleVar (S P A Q) H12;rewrite H12.
IsoleVar (S P B Q) H9;rewrite H9.
ring.
unfold S4.

*****
H3 : parallel A1 B1 P Y
HB1 : on_foot B1 B P Y
B1 : Point
HA1 : on_foot A1 A P Y
A1 : Point
H : not (eq P Y)
H4 : not (eq r F0)
H1 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H2 : perp Y P P Q
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
eq (Fdiv (Fplus (S P A1 Q) (S P Q B1)) (S P Q Y)) (Fdiv (DSeg A1 B1) (DSeg P Y))
+++++
replace (A1**B1) with (A1**P + P**B1).
-----
Theorem elim_py_on_perp_d_right : forall A B P Q Y : Point, forall r: F, on_perp_d Y P Q r -> Py A B Y = Py A B P - (2+2) * r * S4 P A Q B.
Proof.
intros.
unfold on_perp_d in H.
use H.
assert (P<>Y).
intro;subst;basic_simpl.
IsoleVar (Py Y Q Y) H1.
replace (0/r) with 0 in H1 by (field;auto with Geom).
intuition.
elim (proj_ex A P Y H).
intros A1 HA1.
elim (proj_ex B P Y H).
intros B1 HB1.
assert (Py4 B P A Y / Py Y P Y = S4 P A Q B / S P Q Y).
replace (Py4 B P A Y) with (Py4 B1 P A1 Y).
assert (parallel A1 B1 P Y).
unfold on_foot in *.
use HA1.
use HB1.
cut (parallel Y P A1 B1).
auto with Geom.
unfold parallel, S4.
unfold Col in *.
uniformize_signed_areas.
rewrite H6, H9.
ring.
replace (Py Y P Y) with (Py P Y P) by auto with Geom.
rewrite <- (l3_10b A1 B1 P Y) by assumption.
replace (A1 ** B1 / P ** Y) with ((S4 P A1 Q B1) / (S P Q Y)).
replace (S4 P A1 Q B1) with (S4 P A Q B).
auto.
unfold S4.
unfold on_foot in *.
use HA1.
use HB1.
assert (parallel P Q B B1).
apply (perp_perp_para P Q Y P B B1);auto with Geom.
assert (parallel P Q A A1).
apply (perp_perp_para P Q Y P A A1);auto with Geom.
unfold parallel, S4 in *.
uniformize_signed_areas.
IsoleVar (S P A Q) H12;rewrite H12.
IsoleVar (S P B Q) H9;rewrite H9.
ring.
unfold S4.
replace (A1**B1) with (A1**P + P**B1).

*****
H3 : parallel A1 B1 P Y
HB1 : on_foot B1 B P Y
B1 : Point
HA1 : on_foot A1 A P Y
A1 : Point
H : not (eq P Y)
H4 : not (eq r F0)
H1 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H2 : perp Y P P Q
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
eq (Fdiv (Fplus (S P A1 Q) (S P Q B1)) (S P Q Y)) (Fdiv (Fplus (DSeg A1 P) (DSeg P B1)) (DSeg P Y))
+++++
2:apply chasles.
-----
Theorem elim_py_on_perp_d_right : forall A B P Q Y : Point, forall r: F, on_perp_d Y P Q r -> Py A B Y = Py A B P - (2+2) * r * S4 P A Q B.
Proof.
intros.
unfold on_perp_d in H.
use H.
assert (P<>Y).
intro;subst;basic_simpl.
IsoleVar (Py Y Q Y) H1.
replace (0/r) with 0 in H1 by (field;auto with Geom).
intuition.
elim (proj_ex A P Y H).
intros A1 HA1.
elim (proj_ex B P Y H).
intros B1 HB1.
assert (Py4 B P A Y / Py Y P Y = S4 P A Q B / S P Q Y).
replace (Py4 B P A Y) with (Py4 B1 P A1 Y).
assert (parallel A1 B1 P Y).
unfold on_foot in *.
use HA1.
use HB1.
cut (parallel Y P A1 B1).
auto with Geom.
unfold parallel, S4.
unfold Col in *.
uniformize_signed_areas.
rewrite H6, H9.
ring.
replace (Py Y P Y) with (Py P Y P) by auto with Geom.
rewrite <- (l3_10b A1 B1 P Y) by assumption.
replace (A1 ** B1 / P ** Y) with ((S4 P A1 Q B1) / (S P Q Y)).
replace (S4 P A1 Q B1) with (S4 P A Q B).
auto.
unfold S4.
unfold on_foot in *.
use HA1.
use HB1.
assert (parallel P Q B B1).
apply (perp_perp_para P Q Y P B B1);auto with Geom.
assert (parallel P Q A A1).
apply (perp_perp_para P Q Y P A A1);auto with Geom.
unfold parallel, S4 in *.
uniformize_signed_areas.
IsoleVar (S P A Q) H12;rewrite H12.
IsoleVar (S P B Q) H9;rewrite H9.
ring.
unfold S4.
replace (A1**B1) with (A1**P + P**B1).
2:apply chasles.

*****
H3 : parallel A1 B1 P Y
HB1 : on_foot B1 B P Y
B1 : Point
HA1 : on_foot A1 A P Y
A1 : Point
H : not (eq P Y)
H4 : not (eq r F0)
H1 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H2 : perp Y P P Q
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
eq (Fdiv (Fplus (S P A1 Q) (S P Q B1)) (S P Q Y)) (Fdiv (Fplus (DSeg A1 P) (DSeg P B1)) (DSeg P Y))
+++++
assert (~ (Col P Q Y)).
-----
Theorem elim_py_on_perp_d_right : forall A B P Q Y : Point, forall r: F, on_perp_d Y P Q r -> Py A B Y = Py A B P - (2+2) * r * S4 P A Q B.
Proof.
intros.
unfold on_perp_d in H.
use H.
assert (P<>Y).
intro;subst;basic_simpl.
IsoleVar (Py Y Q Y) H1.
replace (0/r) with 0 in H1 by (field;auto with Geom).
intuition.
elim (proj_ex A P Y H).
intros A1 HA1.
elim (proj_ex B P Y H).
intros B1 HB1.
assert (Py4 B P A Y / Py Y P Y = S4 P A Q B / S P Q Y).
replace (Py4 B P A Y) with (Py4 B1 P A1 Y).
assert (parallel A1 B1 P Y).
unfold on_foot in *.
use HA1.
use HB1.
cut (parallel Y P A1 B1).
auto with Geom.
unfold parallel, S4.
unfold Col in *.
uniformize_signed_areas.
rewrite H6, H9.
ring.
replace (Py Y P Y) with (Py P Y P) by auto with Geom.
rewrite <- (l3_10b A1 B1 P Y) by assumption.
replace (A1 ** B1 / P ** Y) with ((S4 P A1 Q B1) / (S P Q Y)).
replace (S4 P A1 Q B1) with (S4 P A Q B).
auto.
unfold S4.
unfold on_foot in *.
use HA1.
use HB1.
assert (parallel P Q B B1).
apply (perp_perp_para P Q Y P B B1);auto with Geom.
assert (parallel P Q A A1).
apply (perp_perp_para P Q Y P A A1);auto with Geom.
unfold parallel, S4 in *.
uniformize_signed_areas.
IsoleVar (S P A Q) H12;rewrite H12.
IsoleVar (S P B Q) H9;rewrite H9.
ring.
unfold S4.
replace (A1**B1) with (A1**P + P**B1).
2:apply chasles.
assert (~ (Col P Q Y)).

*****
H3 : parallel A1 B1 P Y
HB1 : on_foot B1 B P Y
B1 : Point
HA1 : on_foot A1 A P Y
A1 : Point
H : not (eq P Y)
H4 : not (eq r F0)
H1 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H2 : perp Y P P Q
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
not (Col P Q Y)
+++++
intro.
-----
Theorem elim_py_on_perp_d_right : forall A B P Q Y : Point, forall r: F, on_perp_d Y P Q r -> Py A B Y = Py A B P - (2+2) * r * S4 P A Q B.
Proof.
intros.
unfold on_perp_d in H.
use H.
assert (P<>Y).
intro;subst;basic_simpl.
IsoleVar (Py Y Q Y) H1.
replace (0/r) with 0 in H1 by (field;auto with Geom).
intuition.
elim (proj_ex A P Y H).
intros A1 HA1.
elim (proj_ex B P Y H).
intros B1 HB1.
assert (Py4 B P A Y / Py Y P Y = S4 P A Q B / S P Q Y).
replace (Py4 B P A Y) with (Py4 B1 P A1 Y).
assert (parallel A1 B1 P Y).
unfold on_foot in *.
use HA1.
use HB1.
cut (parallel Y P A1 B1).
auto with Geom.
unfold parallel, S4.
unfold Col in *.
uniformize_signed_areas.
rewrite H6, H9.
ring.
replace (Py Y P Y) with (Py P Y P) by auto with Geom.
rewrite <- (l3_10b A1 B1 P Y) by assumption.
replace (A1 ** B1 / P ** Y) with ((S4 P A1 Q B1) / (S P Q Y)).
replace (S4 P A1 Q B1) with (S4 P A Q B).
auto.
unfold S4.
unfold on_foot in *.
use HA1.
use HB1.
assert (parallel P Q B B1).
apply (perp_perp_para P Q Y P B B1);auto with Geom.
assert (parallel P Q A A1).
apply (perp_perp_para P Q Y P A A1);auto with Geom.
unfold parallel, S4 in *.
uniformize_signed_areas.
IsoleVar (S P A Q) H12;rewrite H12.
IsoleVar (S P B Q) H9;rewrite H9.
ring.
unfold S4.
replace (A1**B1) with (A1**P + P**B1).
2:apply chasles.
assert (~ (Col P Q Y)).
intro.

*****
H5 : Col P Q Y
H3 : parallel A1 B1 P Y
HB1 : on_foot B1 B P Y
B1 : Point
HA1 : on_foot A1 A P Y
A1 : Point
H : not (eq P Y)
H4 : not (eq r F0)
H1 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H2 : perp Y P P Q
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
False
+++++
rewrite H5 in H1.
-----
Theorem elim_py_on_perp_d_right : forall A B P Q Y : Point, forall r: F, on_perp_d Y P Q r -> Py A B Y = Py A B P - (2+2) * r * S4 P A Q B.
Proof.
intros.
unfold on_perp_d in H.
use H.
assert (P<>Y).
intro;subst;basic_simpl.
IsoleVar (Py Y Q Y) H1.
replace (0/r) with 0 in H1 by (field;auto with Geom).
intuition.
elim (proj_ex A P Y H).
intros A1 HA1.
elim (proj_ex B P Y H).
intros B1 HB1.
assert (Py4 B P A Y / Py Y P Y = S4 P A Q B / S P Q Y).
replace (Py4 B P A Y) with (Py4 B1 P A1 Y).
assert (parallel A1 B1 P Y).
unfold on_foot in *.
use HA1.
use HB1.
cut (parallel Y P A1 B1).
auto with Geom.
unfold parallel, S4.
unfold Col in *.
uniformize_signed_areas.
rewrite H6, H9.
ring.
replace (Py Y P Y) with (Py P Y P) by auto with Geom.
rewrite <- (l3_10b A1 B1 P Y) by assumption.
replace (A1 ** B1 / P ** Y) with ((S4 P A1 Q B1) / (S P Q Y)).
replace (S4 P A1 Q B1) with (S4 P A Q B).
auto.
unfold S4.
unfold on_foot in *.
use HA1.
use HB1.
assert (parallel P Q B B1).
apply (perp_perp_para P Q Y P B B1);auto with Geom.
assert (parallel P Q A A1).
apply (perp_perp_para P Q Y P A A1);auto with Geom.
unfold parallel, S4 in *.
uniformize_signed_areas.
IsoleVar (S P A Q) H12;rewrite H12.
IsoleVar (S P B Q) H9;rewrite H9.
ring.
unfold S4.
replace (A1**B1) with (A1**P + P**B1).
2:apply chasles.
assert (~ (Col P Q Y)).
intro.
rewrite H5 in H1.

*****
H5 : Col P Q Y
H3 : parallel A1 B1 P Y
HB1 : on_foot B1 B P Y
B1 : Point
HA1 : on_foot A1 A P Y
A1 : Point
H : not (eq P Y)
H4 : not (eq r F0)
H1 : eq (Fmult r (Py P Q P)) (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) F0)
H2 : perp Y P P Q
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
False
+++++
basic_simpl.
-----
Theorem elim_py_on_perp_d_right : forall A B P Q Y : Point, forall r: F, on_perp_d Y P Q r -> Py A B Y = Py A B P - (2+2) * r * S4 P A Q B.
Proof.
intros.
unfold on_perp_d in H.
use H.
assert (P<>Y).
intro;subst;basic_simpl.
IsoleVar (Py Y Q Y) H1.
replace (0/r) with 0 in H1 by (field;auto with Geom).
intuition.
elim (proj_ex A P Y H).
intros A1 HA1.
elim (proj_ex B P Y H).
intros B1 HB1.
assert (Py4 B P A Y / Py Y P Y = S4 P A Q B / S P Q Y).
replace (Py4 B P A Y) with (Py4 B1 P A1 Y).
assert (parallel A1 B1 P Y).
unfold on_foot in *.
use HA1.
use HB1.
cut (parallel Y P A1 B1).
auto with Geom.
unfold parallel, S4.
unfold Col in *.
uniformize_signed_areas.
rewrite H6, H9.
ring.
replace (Py Y P Y) with (Py P Y P) by auto with Geom.
rewrite <- (l3_10b A1 B1 P Y) by assumption.
replace (A1 ** B1 / P ** Y) with ((S4 P A1 Q B1) / (S P Q Y)).
replace (S4 P A1 Q B1) with (S4 P A Q B).
auto.
unfold S4.
unfold on_foot in *.
use HA1.
use HB1.
assert (parallel P Q B B1).
apply (perp_perp_para P Q Y P B B1);auto with Geom.
assert (parallel P Q A A1).
apply (perp_perp_para P Q Y P A A1);auto with Geom.
unfold parallel, S4 in *.
uniformize_signed_areas.
IsoleVar (S P A Q) H12;rewrite H12.
IsoleVar (S P B Q) H9;rewrite H9.
ring.
unfold S4.
replace (A1**B1) with (A1**P + P**B1).
2:apply chasles.
assert (~ (Col P Q Y)).
intro.
rewrite H5 in H1.
basic_simpl.

*****
H5 : Col P Q Y
H3 : parallel A1 B1 P Y
HB1 : on_foot B1 B P Y
B1 : Point
HA1 : on_foot A1 A P Y
A1 : Point
H : not (eq P Y)
H4 : not (eq r F0)
H1 : eq (Fmult r (Py P Q P)) F0
H2 : perp Y P P Q
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
False
+++++
IsoleVar r H1.
-----
Theorem elim_py_on_perp_d_right : forall A B P Q Y : Point, forall r: F, on_perp_d Y P Q r -> Py A B Y = Py A B P - (2+2) * r * S4 P A Q B.
Proof.
intros.
unfold on_perp_d in H.
use H.
assert (P<>Y).
intro;subst;basic_simpl.
IsoleVar (Py Y Q Y) H1.
replace (0/r) with 0 in H1 by (field;auto with Geom).
intuition.
elim (proj_ex A P Y H).
intros A1 HA1.
elim (proj_ex B P Y H).
intros B1 HB1.
assert (Py4 B P A Y / Py Y P Y = S4 P A Q B / S P Q Y).
replace (Py4 B P A Y) with (Py4 B1 P A1 Y).
assert (parallel A1 B1 P Y).
unfold on_foot in *.
use HA1.
use HB1.
cut (parallel Y P A1 B1).
auto with Geom.
unfold parallel, S4.
unfold Col in *.
uniformize_signed_areas.
rewrite H6, H9.
ring.
replace (Py Y P Y) with (Py P Y P) by auto with Geom.
rewrite <- (l3_10b A1 B1 P Y) by assumption.
replace (A1 ** B1 / P ** Y) with ((S4 P A1 Q B1) / (S P Q Y)).
replace (S4 P A1 Q B1) with (S4 P A Q B).
auto.
unfold S4.
unfold on_foot in *.
use HA1.
use HB1.
assert (parallel P Q B B1).
apply (perp_perp_para P Q Y P B B1);auto with Geom.
assert (parallel P Q A A1).
apply (perp_perp_para P Q Y P A A1);auto with Geom.
unfold parallel, S4 in *.
uniformize_signed_areas.
IsoleVar (S P A Q) H12;rewrite H12.
IsoleVar (S P B Q) H9;rewrite H9.
ring.
unfold S4.
replace (A1**B1) with (A1**P + P**B1).
2:apply chasles.
assert (~ (Col P Q Y)).
intro.
rewrite H5 in H1.
basic_simpl.
IsoleVar r H1.

*****
H1 : eq r (Fdiv F0 (Py P Q P))
H6 : not (eq (Py P Q P) F0)
H5 : Col P Q Y
H3 : parallel A1 B1 P Y
HB1 : on_foot B1 B P Y
B1 : Point
HA1 : on_foot A1 A P Y
A1 : Point
H : not (eq P Y)
H4 : not (eq r F0)
H2 : perp Y P P Q
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
False
+++++
replace (0/ Py P Q P) with 0 in H1.
-----
Theorem elim_py_on_perp_d_right : forall A B P Q Y : Point, forall r: F, on_perp_d Y P Q r -> Py A B Y = Py A B P - (2+2) * r * S4 P A Q B.
Proof.
intros.
unfold on_perp_d in H.
use H.
assert (P<>Y).
intro;subst;basic_simpl.
IsoleVar (Py Y Q Y) H1.
replace (0/r) with 0 in H1 by (field;auto with Geom).
intuition.
elim (proj_ex A P Y H).
intros A1 HA1.
elim (proj_ex B P Y H).
intros B1 HB1.
assert (Py4 B P A Y / Py Y P Y = S4 P A Q B / S P Q Y).
replace (Py4 B P A Y) with (Py4 B1 P A1 Y).
assert (parallel A1 B1 P Y).
unfold on_foot in *.
use HA1.
use HB1.
cut (parallel Y P A1 B1).
auto with Geom.
unfold parallel, S4.
unfold Col in *.
uniformize_signed_areas.
rewrite H6, H9.
ring.
replace (Py Y P Y) with (Py P Y P) by auto with Geom.
rewrite <- (l3_10b A1 B1 P Y) by assumption.
replace (A1 ** B1 / P ** Y) with ((S4 P A1 Q B1) / (S P Q Y)).
replace (S4 P A1 Q B1) with (S4 P A Q B).
auto.
unfold S4.
unfold on_foot in *.
use HA1.
use HB1.
assert (parallel P Q B B1).
apply (perp_perp_para P Q Y P B B1);auto with Geom.
assert (parallel P Q A A1).
apply (perp_perp_para P Q Y P A A1);auto with Geom.
unfold parallel, S4 in *.
uniformize_signed_areas.
IsoleVar (S P A Q) H12;rewrite H12.
IsoleVar (S P B Q) H9;rewrite H9.
ring.
unfold S4.
replace (A1**B1) with (A1**P + P**B1).
2:apply chasles.
assert (~ (Col P Q Y)).
intro.
rewrite H5 in H1.
basic_simpl.
IsoleVar r H1.
replace (0/ Py P Q P) with 0 in H1.

*****
H1 : eq r F0
H6 : not (eq (Py P Q P) F0)
H5 : Col P Q Y
H3 : parallel A1 B1 P Y
HB1 : on_foot B1 B P Y
B1 : Point
HA1 : on_foot A1 A P Y
A1 : Point
H : not (eq P Y)
H4 : not (eq r F0)
H2 : perp Y P P Q
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
False
+++++
intuition.
-----
Theorem elim_py_on_perp_d_right : forall A B P Q Y : Point, forall r: F, on_perp_d Y P Q r -> Py A B Y = Py A B P - (2+2) * r * S4 P A Q B.
Proof.
intros.
unfold on_perp_d in H.
use H.
assert (P<>Y).
intro;subst;basic_simpl.
IsoleVar (Py Y Q Y) H1.
replace (0/r) with 0 in H1 by (field;auto with Geom).
intuition.
elim (proj_ex A P Y H).
intros A1 HA1.
elim (proj_ex B P Y H).
intros B1 HB1.
assert (Py4 B P A Y / Py Y P Y = S4 P A Q B / S P Q Y).
replace (Py4 B P A Y) with (Py4 B1 P A1 Y).
assert (parallel A1 B1 P Y).
unfold on_foot in *.
use HA1.
use HB1.
cut (parallel Y P A1 B1).
auto with Geom.
unfold parallel, S4.
unfold Col in *.
uniformize_signed_areas.
rewrite H6, H9.
ring.
replace (Py Y P Y) with (Py P Y P) by auto with Geom.
rewrite <- (l3_10b A1 B1 P Y) by assumption.
replace (A1 ** B1 / P ** Y) with ((S4 P A1 Q B1) / (S P Q Y)).
replace (S4 P A1 Q B1) with (S4 P A Q B).
auto.
unfold S4.
unfold on_foot in *.
use HA1.
use HB1.
assert (parallel P Q B B1).
apply (perp_perp_para P Q Y P B B1);auto with Geom.
assert (parallel P Q A A1).
apply (perp_perp_para P Q Y P A A1);auto with Geom.
unfold parallel, S4 in *.
uniformize_signed_areas.
IsoleVar (S P A Q) H12;rewrite H12.
IsoleVar (S P B Q) H9;rewrite H9.
ring.
unfold S4.
replace (A1**B1) with (A1**P + P**B1).
2:apply chasles.
assert (~ (Col P Q Y)).
intro.
rewrite H5 in H1.
basic_simpl.
IsoleVar r H1.
replace (0/ Py P Q P) with 0 in H1.
intuition.

*****
H1 : eq r (Fdiv F0 (Py P Q P))
H6 : not (eq (Py P Q P) F0)
H5 : Col P Q Y
H3 : parallel A1 B1 P Y
HB1 : on_foot B1 B P Y
B1 : Point
HA1 : on_foot A1 A P Y
A1 : Point
H : not (eq P Y)
H4 : not (eq r F0)
H2 : perp Y P P Q
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
eq F0 (Fdiv F0 (Py P Q P))
+++++
field;auto with Geom.
-----
Theorem elim_py_on_perp_d_right : forall A B P Q Y : Point, forall r: F, on_perp_d Y P Q r -> Py A B Y = Py A B P - (2+2) * r * S4 P A Q B.
Proof.
intros.
unfold on_perp_d in H.
use H.
assert (P<>Y).
intro;subst;basic_simpl.
IsoleVar (Py Y Q Y) H1.
replace (0/r) with 0 in H1 by (field;auto with Geom).
intuition.
elim (proj_ex A P Y H).
intros A1 HA1.
elim (proj_ex B P Y H).
intros B1 HB1.
assert (Py4 B P A Y / Py Y P Y = S4 P A Q B / S P Q Y).
replace (Py4 B P A Y) with (Py4 B1 P A1 Y).
assert (parallel A1 B1 P Y).
unfold on_foot in *.
use HA1.
use HB1.
cut (parallel Y P A1 B1).
auto with Geom.
unfold parallel, S4.
unfold Col in *.
uniformize_signed_areas.
rewrite H6, H9.
ring.
replace (Py Y P Y) with (Py P Y P) by auto with Geom.
rewrite <- (l3_10b A1 B1 P Y) by assumption.
replace (A1 ** B1 / P ** Y) with ((S4 P A1 Q B1) / (S P Q Y)).
replace (S4 P A1 Q B1) with (S4 P A Q B).
auto.
unfold S4.
unfold on_foot in *.
use HA1.
use HB1.
assert (parallel P Q B B1).
apply (perp_perp_para P Q Y P B B1);auto with Geom.
assert (parallel P Q A A1).
apply (perp_perp_para P Q Y P A A1);auto with Geom.
unfold parallel, S4 in *.
uniformize_signed_areas.
IsoleVar (S P A Q) H12;rewrite H12.
IsoleVar (S P B Q) H9;rewrite H9.
ring.
unfold S4.
replace (A1**B1) with (A1**P + P**B1).
2:apply chasles.
assert (~ (Col P Q Y)).
intro.
rewrite H5 in H1.
basic_simpl.
IsoleVar r H1.
replace (0/ Py P Q P) with 0 in H1.
intuition.
field;auto with Geom.

*****
H5 : Col P Q Y
H3 : parallel A1 B1 P Y
HB1 : on_foot B1 B P Y
B1 : Point
HA1 : on_foot A1 A P Y
A1 : Point
H : not (eq P Y)
H4 : not (eq r F0)
H1 : eq (Fmult r (Py P Q P)) F0
H2 : perp Y P P Q
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
not (eq (Py P Q P) F0)
+++++
auto with Geom.
-----
Theorem elim_py_on_perp_d_right : forall A B P Q Y : Point, forall r: F, on_perp_d Y P Q r -> Py A B Y = Py A B P - (2+2) * r * S4 P A Q B.
Proof.
intros.
unfold on_perp_d in H.
use H.
assert (P<>Y).
intro;subst;basic_simpl.
IsoleVar (Py Y Q Y) H1.
replace (0/r) with 0 in H1 by (field;auto with Geom).
intuition.
elim (proj_ex A P Y H).
intros A1 HA1.
elim (proj_ex B P Y H).
intros B1 HB1.
assert (Py4 B P A Y / Py Y P Y = S4 P A Q B / S P Q Y).
replace (Py4 B P A Y) with (Py4 B1 P A1 Y).
assert (parallel A1 B1 P Y).
unfold on_foot in *.
use HA1.
use HB1.
cut (parallel Y P A1 B1).
auto with Geom.
unfold parallel, S4.
unfold Col in *.
uniformize_signed_areas.
rewrite H6, H9.
ring.
replace (Py Y P Y) with (Py P Y P) by auto with Geom.
rewrite <- (l3_10b A1 B1 P Y) by assumption.
replace (A1 ** B1 / P ** Y) with ((S4 P A1 Q B1) / (S P Q Y)).
replace (S4 P A1 Q B1) with (S4 P A Q B).
auto.
unfold S4.
unfold on_foot in *.
use HA1.
use HB1.
assert (parallel P Q B B1).
apply (perp_perp_para P Q Y P B B1);auto with Geom.
assert (parallel P Q A A1).
apply (perp_perp_para P Q Y P A A1);auto with Geom.
unfold parallel, S4 in *.
uniformize_signed_areas.
IsoleVar (S P A Q) H12;rewrite H12.
IsoleVar (S P B Q) H9;rewrite H9.
ring.
unfold S4.
replace (A1**B1) with (A1**P + P**B1).
2:apply chasles.
assert (~ (Col P Q Y)).
intro.
rewrite H5 in H1.
basic_simpl.
IsoleVar r H1.
replace (0/ Py P Q P) with 0 in H1.
intuition.
field;auto with Geom.
auto with Geom.

*****
H5 : not (Col P Q Y)
H3 : parallel A1 B1 P Y
HB1 : on_foot B1 B P Y
B1 : Point
HA1 : on_foot A1 A P Y
A1 : Point
H : not (eq P Y)
H4 : not (eq r F0)
H1 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H2 : perp Y P P Q
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
eq (Fdiv (Fplus (S P A1 Q) (S P Q B1)) (S P Q Y)) (Fdiv (Fplus (DSeg A1 P) (DSeg P B1)) (DSeg P Y))
+++++
replace ((A1 ** P + P ** B1) / P ** Y) with (- (P**A1 / P**Y) + P ** B1/ P**Y).
-----
Theorem elim_py_on_perp_d_right : forall A B P Q Y : Point, forall r: F, on_perp_d Y P Q r -> Py A B Y = Py A B P - (2+2) * r * S4 P A Q B.
Proof.
intros.
unfold on_perp_d in H.
use H.
assert (P<>Y).
intro;subst;basic_simpl.
IsoleVar (Py Y Q Y) H1.
replace (0/r) with 0 in H1 by (field;auto with Geom).
intuition.
elim (proj_ex A P Y H).
intros A1 HA1.
elim (proj_ex B P Y H).
intros B1 HB1.
assert (Py4 B P A Y / Py Y P Y = S4 P A Q B / S P Q Y).
replace (Py4 B P A Y) with (Py4 B1 P A1 Y).
assert (parallel A1 B1 P Y).
unfold on_foot in *.
use HA1.
use HB1.
cut (parallel Y P A1 B1).
auto with Geom.
unfold parallel, S4.
unfold Col in *.
uniformize_signed_areas.
rewrite H6, H9.
ring.
replace (Py Y P Y) with (Py P Y P) by auto with Geom.
rewrite <- (l3_10b A1 B1 P Y) by assumption.
replace (A1 ** B1 / P ** Y) with ((S4 P A1 Q B1) / (S P Q Y)).
replace (S4 P A1 Q B1) with (S4 P A Q B).
auto.
unfold S4.
unfold on_foot in *.
use HA1.
use HB1.
assert (parallel P Q B B1).
apply (perp_perp_para P Q Y P B B1);auto with Geom.
assert (parallel P Q A A1).
apply (perp_perp_para P Q Y P A A1);auto with Geom.
unfold parallel, S4 in *.
uniformize_signed_areas.
IsoleVar (S P A Q) H12;rewrite H12.
IsoleVar (S P B Q) H9;rewrite H9.
ring.
unfold S4.
replace (A1**B1) with (A1**P + P**B1).
2:apply chasles.
assert (~ (Col P Q Y)).
intro.
rewrite H5 in H1.
basic_simpl.
IsoleVar r H1.
replace (0/ Py P Q P) with 0 in H1.
intuition.
field;auto with Geom.
auto with Geom.
replace ((A1 ** P + P ** B1) / P ** Y) with (- (P**A1 / P**Y) + P ** B1/ P**Y).

*****
H5 : not (Col P Q Y)
H3 : parallel A1 B1 P Y
HB1 : on_foot B1 B P Y
B1 : Point
HA1 : on_foot A1 A P Y
A1 : Point
H : not (eq P Y)
H4 : not (eq r F0)
H1 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H2 : perp Y P P Q
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
eq (Fdiv (Fplus (S P A1 Q) (S P Q B1)) (S P Q Y)) (Fplus (Fopp (Fdiv (DSeg P A1) (DSeg P Y))) (Fdiv (DSeg P B1) (DSeg P Y)))
+++++
2:uniformize_dir_seg;field;auto with Geom.
-----
Theorem elim_py_on_perp_d_right : forall A B P Q Y : Point, forall r: F, on_perp_d Y P Q r -> Py A B Y = Py A B P - (2+2) * r * S4 P A Q B.
Proof.
intros.
unfold on_perp_d in H.
use H.
assert (P<>Y).
intro;subst;basic_simpl.
IsoleVar (Py Y Q Y) H1.
replace (0/r) with 0 in H1 by (field;auto with Geom).
intuition.
elim (proj_ex A P Y H).
intros A1 HA1.
elim (proj_ex B P Y H).
intros B1 HB1.
assert (Py4 B P A Y / Py Y P Y = S4 P A Q B / S P Q Y).
replace (Py4 B P A Y) with (Py4 B1 P A1 Y).
assert (parallel A1 B1 P Y).
unfold on_foot in *.
use HA1.
use HB1.
cut (parallel Y P A1 B1).
auto with Geom.
unfold parallel, S4.
unfold Col in *.
uniformize_signed_areas.
rewrite H6, H9.
ring.
replace (Py Y P Y) with (Py P Y P) by auto with Geom.
rewrite <- (l3_10b A1 B1 P Y) by assumption.
replace (A1 ** B1 / P ** Y) with ((S4 P A1 Q B1) / (S P Q Y)).
replace (S4 P A1 Q B1) with (S4 P A Q B).
auto.
unfold S4.
unfold on_foot in *.
use HA1.
use HB1.
assert (parallel P Q B B1).
apply (perp_perp_para P Q Y P B B1);auto with Geom.
assert (parallel P Q A A1).
apply (perp_perp_para P Q Y P A A1);auto with Geom.
unfold parallel, S4 in *.
uniformize_signed_areas.
IsoleVar (S P A Q) H12;rewrite H12.
IsoleVar (S P B Q) H9;rewrite H9.
ring.
unfold S4.
replace (A1**B1) with (A1**P + P**B1).
2:apply chasles.
assert (~ (Col P Q Y)).
intro.
rewrite H5 in H1.
basic_simpl.
IsoleVar r H1.
replace (0/ Py P Q P) with 0 in H1.
intuition.
field;auto with Geom.
auto with Geom.
replace ((A1 ** P + P ** B1) / P ** Y) with (- (P**A1 / P**Y) + P ** B1/ P**Y).
2:uniformize_dir_seg;field;auto with Geom.

*****
H5 : not (Col P Q Y)
H3 : parallel A1 B1 P Y
HB1 : on_foot B1 B P Y
B1 : Point
HA1 : on_foot A1 A P Y
A1 : Point
H : not (eq P Y)
H4 : not (eq r F0)
H1 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H2 : perp Y P P Q
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
eq (Fdiv (Fplus (S P A1 Q) (S P Q B1)) (S P Q Y)) (Fplus (Fopp (Fdiv (DSeg P A1) (DSeg P Y))) (Fdiv (DSeg P B1) (DSeg P Y)))
+++++
rewrite (A6 P A1 Y Q H).
-----
Theorem elim_py_on_perp_d_right : forall A B P Q Y : Point, forall r: F, on_perp_d Y P Q r -> Py A B Y = Py A B P - (2+2) * r * S4 P A Q B.
Proof.
intros.
unfold on_perp_d in H.
use H.
assert (P<>Y).
intro;subst;basic_simpl.
IsoleVar (Py Y Q Y) H1.
replace (0/r) with 0 in H1 by (field;auto with Geom).
intuition.
elim (proj_ex A P Y H).
intros A1 HA1.
elim (proj_ex B P Y H).
intros B1 HB1.
assert (Py4 B P A Y / Py Y P Y = S4 P A Q B / S P Q Y).
replace (Py4 B P A Y) with (Py4 B1 P A1 Y).
assert (parallel A1 B1 P Y).
unfold on_foot in *.
use HA1.
use HB1.
cut (parallel Y P A1 B1).
auto with Geom.
unfold parallel, S4.
unfold Col in *.
uniformize_signed_areas.
rewrite H6, H9.
ring.
replace (Py Y P Y) with (Py P Y P) by auto with Geom.
rewrite <- (l3_10b A1 B1 P Y) by assumption.
replace (A1 ** B1 / P ** Y) with ((S4 P A1 Q B1) / (S P Q Y)).
replace (S4 P A1 Q B1) with (S4 P A Q B).
auto.
unfold S4.
unfold on_foot in *.
use HA1.
use HB1.
assert (parallel P Q B B1).
apply (perp_perp_para P Q Y P B B1);auto with Geom.
assert (parallel P Q A A1).
apply (perp_perp_para P Q Y P A A1);auto with Geom.
unfold parallel, S4 in *.
uniformize_signed_areas.
IsoleVar (S P A Q) H12;rewrite H12.
IsoleVar (S P B Q) H9;rewrite H9.
ring.
unfold S4.
replace (A1**B1) with (A1**P + P**B1).
2:apply chasles.
assert (~ (Col P Q Y)).
intro.
rewrite H5 in H1.
basic_simpl.
IsoleVar r H1.
replace (0/ Py P Q P) with 0 in H1.
intuition.
field;auto with Geom.
auto with Geom.
replace ((A1 ** P + P ** B1) / P ** Y) with (- (P**A1 / P**Y) + P ** B1/ P**Y).
2:uniformize_dir_seg;field;auto with Geom.
rewrite (A6 P A1 Y Q H).

*****
H5 : not (Col P Q Y)
H3 : parallel A1 B1 P Y
HB1 : on_foot B1 B P Y
B1 : Point
HA1 : on_foot A1 A P Y
A1 : Point
H : not (eq P Y)
H4 : not (eq r F0)
H1 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H2 : perp Y P P Q
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
eq (Fdiv (Fplus (S P A1 Q) (S P Q B1)) (S P Q Y)) (Fplus (Fopp (Fdiv (S Q P A1) (S Q P Y))) (Fdiv (DSeg P B1) (DSeg P Y)))
+++++
rewrite (A6 P B1 Y Q H).
-----
Theorem elim_py_on_perp_d_right : forall A B P Q Y : Point, forall r: F, on_perp_d Y P Q r -> Py A B Y = Py A B P - (2+2) * r * S4 P A Q B.
Proof.
intros.
unfold on_perp_d in H.
use H.
assert (P<>Y).
intro;subst;basic_simpl.
IsoleVar (Py Y Q Y) H1.
replace (0/r) with 0 in H1 by (field;auto with Geom).
intuition.
elim (proj_ex A P Y H).
intros A1 HA1.
elim (proj_ex B P Y H).
intros B1 HB1.
assert (Py4 B P A Y / Py Y P Y = S4 P A Q B / S P Q Y).
replace (Py4 B P A Y) with (Py4 B1 P A1 Y).
assert (parallel A1 B1 P Y).
unfold on_foot in *.
use HA1.
use HB1.
cut (parallel Y P A1 B1).
auto with Geom.
unfold parallel, S4.
unfold Col in *.
uniformize_signed_areas.
rewrite H6, H9.
ring.
replace (Py Y P Y) with (Py P Y P) by auto with Geom.
rewrite <- (l3_10b A1 B1 P Y) by assumption.
replace (A1 ** B1 / P ** Y) with ((S4 P A1 Q B1) / (S P Q Y)).
replace (S4 P A1 Q B1) with (S4 P A Q B).
auto.
unfold S4.
unfold on_foot in *.
use HA1.
use HB1.
assert (parallel P Q B B1).
apply (perp_perp_para P Q Y P B B1);auto with Geom.
assert (parallel P Q A A1).
apply (perp_perp_para P Q Y P A A1);auto with Geom.
unfold parallel, S4 in *.
uniformize_signed_areas.
IsoleVar (S P A Q) H12;rewrite H12.
IsoleVar (S P B Q) H9;rewrite H9.
ring.
unfold S4.
replace (A1**B1) with (A1**P + P**B1).
2:apply chasles.
assert (~ (Col P Q Y)).
intro.
rewrite H5 in H1.
basic_simpl.
IsoleVar r H1.
replace (0/ Py P Q P) with 0 in H1.
intuition.
field;auto with Geom.
auto with Geom.
replace ((A1 ** P + P ** B1) / P ** Y) with (- (P**A1 / P**Y) + P ** B1/ P**Y).
2:uniformize_dir_seg;field;auto with Geom.
rewrite (A6 P A1 Y Q H).
rewrite (A6 P B1 Y Q H).

*****
H5 : not (Col P Q Y)
H3 : parallel A1 B1 P Y
HB1 : on_foot B1 B P Y
B1 : Point
HA1 : on_foot A1 A P Y
A1 : Point
H : not (eq P Y)
H4 : not (eq r F0)
H1 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H2 : perp Y P P Q
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
eq (Fdiv (Fplus (S P A1 Q) (S P Q B1)) (S P Q Y)) (Fplus (Fopp (Fdiv (S Q P A1) (S Q P Y))) (Fdiv (S Q P B1) (S Q P Y)))
+++++
uniformize_signed_areas.
-----
Theorem elim_py_on_perp_d_right : forall A B P Q Y : Point, forall r: F, on_perp_d Y P Q r -> Py A B Y = Py A B P - (2+2) * r * S4 P A Q B.
Proof.
intros.
unfold on_perp_d in H.
use H.
assert (P<>Y).
intro;subst;basic_simpl.
IsoleVar (Py Y Q Y) H1.
replace (0/r) with 0 in H1 by (field;auto with Geom).
intuition.
elim (proj_ex A P Y H).
intros A1 HA1.
elim (proj_ex B P Y H).
intros B1 HB1.
assert (Py4 B P A Y / Py Y P Y = S4 P A Q B / S P Q Y).
replace (Py4 B P A Y) with (Py4 B1 P A1 Y).
assert (parallel A1 B1 P Y).
unfold on_foot in *.
use HA1.
use HB1.
cut (parallel Y P A1 B1).
auto with Geom.
unfold parallel, S4.
unfold Col in *.
uniformize_signed_areas.
rewrite H6, H9.
ring.
replace (Py Y P Y) with (Py P Y P) by auto with Geom.
rewrite <- (l3_10b A1 B1 P Y) by assumption.
replace (A1 ** B1 / P ** Y) with ((S4 P A1 Q B1) / (S P Q Y)).
replace (S4 P A1 Q B1) with (S4 P A Q B).
auto.
unfold S4.
unfold on_foot in *.
use HA1.
use HB1.
assert (parallel P Q B B1).
apply (perp_perp_para P Q Y P B B1);auto with Geom.
assert (parallel P Q A A1).
apply (perp_perp_para P Q Y P A A1);auto with Geom.
unfold parallel, S4 in *.
uniformize_signed_areas.
IsoleVar (S P A Q) H12;rewrite H12.
IsoleVar (S P B Q) H9;rewrite H9.
ring.
unfold S4.
replace (A1**B1) with (A1**P + P**B1).
2:apply chasles.
assert (~ (Col P Q Y)).
intro.
rewrite H5 in H1.
basic_simpl.
IsoleVar r H1.
replace (0/ Py P Q P) with 0 in H1.
intuition.
field;auto with Geom.
auto with Geom.
replace ((A1 ** P + P ** B1) / P ** Y) with (- (P**A1 / P**Y) + P ** B1/ P**Y).
2:uniformize_dir_seg;field;auto with Geom.
rewrite (A6 P A1 Y Q H).
rewrite (A6 P B1 Y Q H).
uniformize_signed_areas.

*****
H1 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H5 : not (Col P Q Y)
H3 : parallel A1 B1 P Y
HB1 : on_foot B1 B P Y
B1 : Point
HA1 : on_foot A1 A P Y
A1 : Point
H : not (eq P Y)
H4 : not (eq r F0)
H2 : perp Y P P Q
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
eq (Fdiv (Fplus (S P A1 Q) (S P Q B1)) (S P Q Y)) (Fplus (Fopp (Fdiv (S P A1 Q) (Fopp (S P Q Y)))) (Fdiv (Fopp (S P Q B1)) (Fopp (S P Q Y))))
+++++
field;solve_conds;auto with Geom.
-----
Theorem elim_py_on_perp_d_right : forall A B P Q Y : Point, forall r: F, on_perp_d Y P Q r -> Py A B Y = Py A B P - (2+2) * r * S4 P A Q B.
Proof.
intros.
unfold on_perp_d in H.
use H.
assert (P<>Y).
intro;subst;basic_simpl.
IsoleVar (Py Y Q Y) H1.
replace (0/r) with 0 in H1 by (field;auto with Geom).
intuition.
elim (proj_ex A P Y H).
intros A1 HA1.
elim (proj_ex B P Y H).
intros B1 HB1.
assert (Py4 B P A Y / Py Y P Y = S4 P A Q B / S P Q Y).
replace (Py4 B P A Y) with (Py4 B1 P A1 Y).
assert (parallel A1 B1 P Y).
unfold on_foot in *.
use HA1.
use HB1.
cut (parallel Y P A1 B1).
auto with Geom.
unfold parallel, S4.
unfold Col in *.
uniformize_signed_areas.
rewrite H6, H9.
ring.
replace (Py Y P Y) with (Py P Y P) by auto with Geom.
rewrite <- (l3_10b A1 B1 P Y) by assumption.
replace (A1 ** B1 / P ** Y) with ((S4 P A1 Q B1) / (S P Q Y)).
replace (S4 P A1 Q B1) with (S4 P A Q B).
auto.
unfold S4.
unfold on_foot in *.
use HA1.
use HB1.
assert (parallel P Q B B1).
apply (perp_perp_para P Q Y P B B1);auto with Geom.
assert (parallel P Q A A1).
apply (perp_perp_para P Q Y P A A1);auto with Geom.
unfold parallel, S4 in *.
uniformize_signed_areas.
IsoleVar (S P A Q) H12;rewrite H12.
IsoleVar (S P B Q) H9;rewrite H9.
ring.
unfold S4.
replace (A1**B1) with (A1**P + P**B1).
2:apply chasles.
assert (~ (Col P Q Y)).
intro.
rewrite H5 in H1.
basic_simpl.
IsoleVar r H1.
replace (0/ Py P Q P) with 0 in H1.
intuition.
field;auto with Geom.
auto with Geom.
replace ((A1 ** P + P ** B1) / P ** Y) with (- (P**A1 / P**Y) + P ** B1/ P**Y).
2:uniformize_dir_seg;field;auto with Geom.
rewrite (A6 P A1 Y Q H).
rewrite (A6 P B1 Y Q H).
uniformize_signed_areas.
field;solve_conds;auto with Geom.

*****
H5 : not (Col P Q Y)
H3 : parallel A1 B1 P Y
HB1 : on_foot B1 B P Y
B1 : Point
HA1 : on_foot A1 A P Y
A1 : Point
H : not (eq P Y)
H4 : not (eq r F0)
H1 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H2 : perp Y P P Q
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
not (Col Q P Y)
+++++
auto with Geom.
-----
Theorem elim_py_on_perp_d_right : forall A B P Q Y : Point, forall r: F, on_perp_d Y P Q r -> Py A B Y = Py A B P - (2+2) * r * S4 P A Q B.
Proof.
intros.
unfold on_perp_d in H.
use H.
assert (P<>Y).
intro;subst;basic_simpl.
IsoleVar (Py Y Q Y) H1.
replace (0/r) with 0 in H1 by (field;auto with Geom).
intuition.
elim (proj_ex A P Y H).
intros A1 HA1.
elim (proj_ex B P Y H).
intros B1 HB1.
assert (Py4 B P A Y / Py Y P Y = S4 P A Q B / S P Q Y).
replace (Py4 B P A Y) with (Py4 B1 P A1 Y).
assert (parallel A1 B1 P Y).
unfold on_foot in *.
use HA1.
use HB1.
cut (parallel Y P A1 B1).
auto with Geom.
unfold parallel, S4.
unfold Col in *.
uniformize_signed_areas.
rewrite H6, H9.
ring.
replace (Py Y P Y) with (Py P Y P) by auto with Geom.
rewrite <- (l3_10b A1 B1 P Y) by assumption.
replace (A1 ** B1 / P ** Y) with ((S4 P A1 Q B1) / (S P Q Y)).
replace (S4 P A1 Q B1) with (S4 P A Q B).
auto.
unfold S4.
unfold on_foot in *.
use HA1.
use HB1.
assert (parallel P Q B B1).
apply (perp_perp_para P Q Y P B B1);auto with Geom.
assert (parallel P Q A A1).
apply (perp_perp_para P Q Y P A A1);auto with Geom.
unfold parallel, S4 in *.
uniformize_signed_areas.
IsoleVar (S P A Q) H12;rewrite H12.
IsoleVar (S P B Q) H9;rewrite H9.
ring.
unfold S4.
replace (A1**B1) with (A1**P + P**B1).
2:apply chasles.
assert (~ (Col P Q Y)).
intro.
rewrite H5 in H1.
basic_simpl.
IsoleVar r H1.
replace (0/ Py P Q P) with 0 in H1.
intuition.
field;auto with Geom.
auto with Geom.
replace ((A1 ** P + P ** B1) / P ** Y) with (- (P**A1 / P**Y) + P ** B1/ P**Y).
2:uniformize_dir_seg;field;auto with Geom.
rewrite (A6 P A1 Y Q H).
rewrite (A6 P B1 Y Q H).
uniformize_signed_areas.
field;solve_conds;auto with Geom.
auto with Geom.

*****
H5 : not (Col P Q Y)
H3 : parallel A1 B1 P Y
HB1 : on_foot B1 B P Y
B1 : Point
HA1 : on_foot A1 A P Y
A1 : Point
H : not (eq P Y)
H4 : not (eq r F0)
H1 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H2 : perp Y P P Q
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
Col P B1 Y
+++++
unfold on_foot in *.
-----
Theorem elim_py_on_perp_d_right : forall A B P Q Y : Point, forall r: F, on_perp_d Y P Q r -> Py A B Y = Py A B P - (2+2) * r * S4 P A Q B.
Proof.
intros.
unfold on_perp_d in H.
use H.
assert (P<>Y).
intro;subst;basic_simpl.
IsoleVar (Py Y Q Y) H1.
replace (0/r) with 0 in H1 by (field;auto with Geom).
intuition.
elim (proj_ex A P Y H).
intros A1 HA1.
elim (proj_ex B P Y H).
intros B1 HB1.
assert (Py4 B P A Y / Py Y P Y = S4 P A Q B / S P Q Y).
replace (Py4 B P A Y) with (Py4 B1 P A1 Y).
assert (parallel A1 B1 P Y).
unfold on_foot in *.
use HA1.
use HB1.
cut (parallel Y P A1 B1).
auto with Geom.
unfold parallel, S4.
unfold Col in *.
uniformize_signed_areas.
rewrite H6, H9.
ring.
replace (Py Y P Y) with (Py P Y P) by auto with Geom.
rewrite <- (l3_10b A1 B1 P Y) by assumption.
replace (A1 ** B1 / P ** Y) with ((S4 P A1 Q B1) / (S P Q Y)).
replace (S4 P A1 Q B1) with (S4 P A Q B).
auto.
unfold S4.
unfold on_foot in *.
use HA1.
use HB1.
assert (parallel P Q B B1).
apply (perp_perp_para P Q Y P B B1);auto with Geom.
assert (parallel P Q A A1).
apply (perp_perp_para P Q Y P A A1);auto with Geom.
unfold parallel, S4 in *.
uniformize_signed_areas.
IsoleVar (S P A Q) H12;rewrite H12.
IsoleVar (S P B Q) H9;rewrite H9.
ring.
unfold S4.
replace (A1**B1) with (A1**P + P**B1).
2:apply chasles.
assert (~ (Col P Q Y)).
intro.
rewrite H5 in H1.
basic_simpl.
IsoleVar r H1.
replace (0/ Py P Q P) with 0 in H1.
intuition.
field;auto with Geom.
auto with Geom.
replace ((A1 ** P + P ** B1) / P ** Y) with (- (P**A1 / P**Y) + P ** B1/ P**Y).
2:uniformize_dir_seg;field;auto with Geom.
rewrite (A6 P A1 Y Q H).
rewrite (A6 P B1 Y Q H).
uniformize_signed_areas.
field;solve_conds;auto with Geom.
auto with Geom.
unfold on_foot in *.

*****
H5 : not (Col P Q Y)
H3 : parallel A1 B1 P Y
HB1 : and (perp B1 B P Y) (and (Col B1 P Y) (not (eq P Y)))
B1 : Point
HA1 : and (perp A1 A P Y) (and (Col A1 P Y) (not (eq P Y)))
A1 : Point
H : not (eq P Y)
H4 : not (eq r F0)
H1 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H2 : perp Y P P Q
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
Col P B1 Y
+++++
use HA1.
-----
Theorem elim_py_on_perp_d_right : forall A B P Q Y : Point, forall r: F, on_perp_d Y P Q r -> Py A B Y = Py A B P - (2+2) * r * S4 P A Q B.
Proof.
intros.
unfold on_perp_d in H.
use H.
assert (P<>Y).
intro;subst;basic_simpl.
IsoleVar (Py Y Q Y) H1.
replace (0/r) with 0 in H1 by (field;auto with Geom).
intuition.
elim (proj_ex A P Y H).
intros A1 HA1.
elim (proj_ex B P Y H).
intros B1 HB1.
assert (Py4 B P A Y / Py Y P Y = S4 P A Q B / S P Q Y).
replace (Py4 B P A Y) with (Py4 B1 P A1 Y).
assert (parallel A1 B1 P Y).
unfold on_foot in *.
use HA1.
use HB1.
cut (parallel Y P A1 B1).
auto with Geom.
unfold parallel, S4.
unfold Col in *.
uniformize_signed_areas.
rewrite H6, H9.
ring.
replace (Py Y P Y) with (Py P Y P) by auto with Geom.
rewrite <- (l3_10b A1 B1 P Y) by assumption.
replace (A1 ** B1 / P ** Y) with ((S4 P A1 Q B1) / (S P Q Y)).
replace (S4 P A1 Q B1) with (S4 P A Q B).
auto.
unfold S4.
unfold on_foot in *.
use HA1.
use HB1.
assert (parallel P Q B B1).
apply (perp_perp_para P Q Y P B B1);auto with Geom.
assert (parallel P Q A A1).
apply (perp_perp_para P Q Y P A A1);auto with Geom.
unfold parallel, S4 in *.
uniformize_signed_areas.
IsoleVar (S P A Q) H12;rewrite H12.
IsoleVar (S P B Q) H9;rewrite H9.
ring.
unfold S4.
replace (A1**B1) with (A1**P + P**B1).
2:apply chasles.
assert (~ (Col P Q Y)).
intro.
rewrite H5 in H1.
basic_simpl.
IsoleVar r H1.
replace (0/ Py P Q P) with 0 in H1.
intuition.
field;auto with Geom.
auto with Geom.
replace ((A1 ** P + P ** B1) / P ** Y) with (- (P**A1 / P**Y) + P ** B1/ P**Y).
2:uniformize_dir_seg;field;auto with Geom.
rewrite (A6 P A1 Y Q H).
rewrite (A6 P B1 Y Q H).
uniformize_signed_areas.
field;solve_conds;auto with Geom.
auto with Geom.
unfold on_foot in *.
use HA1.

*****
H9 : not (eq P Y)
H8 : Col A1 P Y
H6 : perp A1 A P Y
H5 : not (Col P Q Y)
H3 : parallel A1 B1 P Y
HB1 : and (perp B1 B P Y) (and (Col B1 P Y) (not (eq P Y)))
A1,B1 : Point
H : not (eq P Y)
H4 : not (eq r F0)
H1 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H2 : perp Y P P Q
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
Col P B1 Y
+++++
use HB1.
-----
Theorem elim_py_on_perp_d_right : forall A B P Q Y : Point, forall r: F, on_perp_d Y P Q r -> Py A B Y = Py A B P - (2+2) * r * S4 P A Q B.
Proof.
intros.
unfold on_perp_d in H.
use H.
assert (P<>Y).
intro;subst;basic_simpl.
IsoleVar (Py Y Q Y) H1.
replace (0/r) with 0 in H1 by (field;auto with Geom).
intuition.
elim (proj_ex A P Y H).
intros A1 HA1.
elim (proj_ex B P Y H).
intros B1 HB1.
assert (Py4 B P A Y / Py Y P Y = S4 P A Q B / S P Q Y).
replace (Py4 B P A Y) with (Py4 B1 P A1 Y).
assert (parallel A1 B1 P Y).
unfold on_foot in *.
use HA1.
use HB1.
cut (parallel Y P A1 B1).
auto with Geom.
unfold parallel, S4.
unfold Col in *.
uniformize_signed_areas.
rewrite H6, H9.
ring.
replace (Py Y P Y) with (Py P Y P) by auto with Geom.
rewrite <- (l3_10b A1 B1 P Y) by assumption.
replace (A1 ** B1 / P ** Y) with ((S4 P A1 Q B1) / (S P Q Y)).
replace (S4 P A1 Q B1) with (S4 P A Q B).
auto.
unfold S4.
unfold on_foot in *.
use HA1.
use HB1.
assert (parallel P Q B B1).
apply (perp_perp_para P Q Y P B B1);auto with Geom.
assert (parallel P Q A A1).
apply (perp_perp_para P Q Y P A A1);auto with Geom.
unfold parallel, S4 in *.
uniformize_signed_areas.
IsoleVar (S P A Q) H12;rewrite H12.
IsoleVar (S P B Q) H9;rewrite H9.
ring.
unfold S4.
replace (A1**B1) with (A1**P + P**B1).
2:apply chasles.
assert (~ (Col P Q Y)).
intro.
rewrite H5 in H1.
basic_simpl.
IsoleVar r H1.
replace (0/ Py P Q P) with 0 in H1.
intuition.
field;auto with Geom.
auto with Geom.
replace ((A1 ** P + P ** B1) / P ** Y) with (- (P**A1 / P**Y) + P ** B1/ P**Y).
2:uniformize_dir_seg;field;auto with Geom.
rewrite (A6 P A1 Y Q H).
rewrite (A6 P B1 Y Q H).
uniformize_signed_areas.
field;solve_conds;auto with Geom.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.

*****
H12 : not (eq P Y)
H11 : Col B1 P Y
H7 : perp B1 B P Y
H9 : not (eq P Y)
H8 : Col A1 P Y
H6 : perp A1 A P Y
H5 : not (Col P Q Y)
H3 : parallel A1 B1 P Y
A1,B1 : Point
H : not (eq P Y)
H4 : not (eq r F0)
H1 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H2 : perp Y P P Q
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
Col P B1 Y
+++++
auto with Geom.
-----
Theorem elim_py_on_perp_d_right : forall A B P Q Y : Point, forall r: F, on_perp_d Y P Q r -> Py A B Y = Py A B P - (2+2) * r * S4 P A Q B.
Proof.
intros.
unfold on_perp_d in H.
use H.
assert (P<>Y).
intro;subst;basic_simpl.
IsoleVar (Py Y Q Y) H1.
replace (0/r) with 0 in H1 by (field;auto with Geom).
intuition.
elim (proj_ex A P Y H).
intros A1 HA1.
elim (proj_ex B P Y H).
intros B1 HB1.
assert (Py4 B P A Y / Py Y P Y = S4 P A Q B / S P Q Y).
replace (Py4 B P A Y) with (Py4 B1 P A1 Y).
assert (parallel A1 B1 P Y).
unfold on_foot in *.
use HA1.
use HB1.
cut (parallel Y P A1 B1).
auto with Geom.
unfold parallel, S4.
unfold Col in *.
uniformize_signed_areas.
rewrite H6, H9.
ring.
replace (Py Y P Y) with (Py P Y P) by auto with Geom.
rewrite <- (l3_10b A1 B1 P Y) by assumption.
replace (A1 ** B1 / P ** Y) with ((S4 P A1 Q B1) / (S P Q Y)).
replace (S4 P A1 Q B1) with (S4 P A Q B).
auto.
unfold S4.
unfold on_foot in *.
use HA1.
use HB1.
assert (parallel P Q B B1).
apply (perp_perp_para P Q Y P B B1);auto with Geom.
assert (parallel P Q A A1).
apply (perp_perp_para P Q Y P A A1);auto with Geom.
unfold parallel, S4 in *.
uniformize_signed_areas.
IsoleVar (S P A Q) H12;rewrite H12.
IsoleVar (S P B Q) H9;rewrite H9.
ring.
unfold S4.
replace (A1**B1) with (A1**P + P**B1).
2:apply chasles.
assert (~ (Col P Q Y)).
intro.
rewrite H5 in H1.
basic_simpl.
IsoleVar r H1.
replace (0/ Py P Q P) with 0 in H1.
intuition.
field;auto with Geom.
auto with Geom.
replace ((A1 ** P + P ** B1) / P ** Y) with (- (P**A1 / P**Y) + P ** B1/ P**Y).
2:uniformize_dir_seg;field;auto with Geom.
rewrite (A6 P A1 Y Q H).
rewrite (A6 P B1 Y Q H).
uniformize_signed_areas.
field;solve_conds;auto with Geom.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
auto with Geom.

*****
H5 : not (Col P Q Y)
H3 : parallel A1 B1 P Y
HB1 : on_foot B1 B P Y
B1 : Point
HA1 : on_foot A1 A P Y
A1 : Point
H : not (eq P Y)
H4 : not (eq r F0)
H1 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H2 : perp Y P P Q
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
not (Col Q P Y)
+++++
auto with Geom.
-----
Theorem elim_py_on_perp_d_right : forall A B P Q Y : Point, forall r: F, on_perp_d Y P Q r -> Py A B Y = Py A B P - (2+2) * r * S4 P A Q B.
Proof.
intros.
unfold on_perp_d in H.
use H.
assert (P<>Y).
intro;subst;basic_simpl.
IsoleVar (Py Y Q Y) H1.
replace (0/r) with 0 in H1 by (field;auto with Geom).
intuition.
elim (proj_ex A P Y H).
intros A1 HA1.
elim (proj_ex B P Y H).
intros B1 HB1.
assert (Py4 B P A Y / Py Y P Y = S4 P A Q B / S P Q Y).
replace (Py4 B P A Y) with (Py4 B1 P A1 Y).
assert (parallel A1 B1 P Y).
unfold on_foot in *.
use HA1.
use HB1.
cut (parallel Y P A1 B1).
auto with Geom.
unfold parallel, S4.
unfold Col in *.
uniformize_signed_areas.
rewrite H6, H9.
ring.
replace (Py Y P Y) with (Py P Y P) by auto with Geom.
rewrite <- (l3_10b A1 B1 P Y) by assumption.
replace (A1 ** B1 / P ** Y) with ((S4 P A1 Q B1) / (S P Q Y)).
replace (S4 P A1 Q B1) with (S4 P A Q B).
auto.
unfold S4.
unfold on_foot in *.
use HA1.
use HB1.
assert (parallel P Q B B1).
apply (perp_perp_para P Q Y P B B1);auto with Geom.
assert (parallel P Q A A1).
apply (perp_perp_para P Q Y P A A1);auto with Geom.
unfold parallel, S4 in *.
uniformize_signed_areas.
IsoleVar (S P A Q) H12;rewrite H12.
IsoleVar (S P B Q) H9;rewrite H9.
ring.
unfold S4.
replace (A1**B1) with (A1**P + P**B1).
2:apply chasles.
assert (~ (Col P Q Y)).
intro.
rewrite H5 in H1.
basic_simpl.
IsoleVar r H1.
replace (0/ Py P Q P) with 0 in H1.
intuition.
field;auto with Geom.
auto with Geom.
replace ((A1 ** P + P ** B1) / P ** Y) with (- (P**A1 / P**Y) + P ** B1/ P**Y).
2:uniformize_dir_seg;field;auto with Geom.
rewrite (A6 P A1 Y Q H).
rewrite (A6 P B1 Y Q H).
uniformize_signed_areas.
field;solve_conds;auto with Geom.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
auto with Geom.
auto with Geom.

*****
H5 : not (Col P Q Y)
H3 : parallel A1 B1 P Y
HB1 : on_foot B1 B P Y
B1 : Point
HA1 : on_foot A1 A P Y
A1 : Point
H : not (eq P Y)
H4 : not (eq r F0)
H1 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H2 : perp Y P P Q
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
Col P A1 Y
+++++
unfold on_foot in *.
-----
Theorem elim_py_on_perp_d_right : forall A B P Q Y : Point, forall r: F, on_perp_d Y P Q r -> Py A B Y = Py A B P - (2+2) * r * S4 P A Q B.
Proof.
intros.
unfold on_perp_d in H.
use H.
assert (P<>Y).
intro;subst;basic_simpl.
IsoleVar (Py Y Q Y) H1.
replace (0/r) with 0 in H1 by (field;auto with Geom).
intuition.
elim (proj_ex A P Y H).
intros A1 HA1.
elim (proj_ex B P Y H).
intros B1 HB1.
assert (Py4 B P A Y / Py Y P Y = S4 P A Q B / S P Q Y).
replace (Py4 B P A Y) with (Py4 B1 P A1 Y).
assert (parallel A1 B1 P Y).
unfold on_foot in *.
use HA1.
use HB1.
cut (parallel Y P A1 B1).
auto with Geom.
unfold parallel, S4.
unfold Col in *.
uniformize_signed_areas.
rewrite H6, H9.
ring.
replace (Py Y P Y) with (Py P Y P) by auto with Geom.
rewrite <- (l3_10b A1 B1 P Y) by assumption.
replace (A1 ** B1 / P ** Y) with ((S4 P A1 Q B1) / (S P Q Y)).
replace (S4 P A1 Q B1) with (S4 P A Q B).
auto.
unfold S4.
unfold on_foot in *.
use HA1.
use HB1.
assert (parallel P Q B B1).
apply (perp_perp_para P Q Y P B B1);auto with Geom.
assert (parallel P Q A A1).
apply (perp_perp_para P Q Y P A A1);auto with Geom.
unfold parallel, S4 in *.
uniformize_signed_areas.
IsoleVar (S P A Q) H12;rewrite H12.
IsoleVar (S P B Q) H9;rewrite H9.
ring.
unfold S4.
replace (A1**B1) with (A1**P + P**B1).
2:apply chasles.
assert (~ (Col P Q Y)).
intro.
rewrite H5 in H1.
basic_simpl.
IsoleVar r H1.
replace (0/ Py P Q P) with 0 in H1.
intuition.
field;auto with Geom.
auto with Geom.
replace ((A1 ** P + P ** B1) / P ** Y) with (- (P**A1 / P**Y) + P ** B1/ P**Y).
2:uniformize_dir_seg;field;auto with Geom.
rewrite (A6 P A1 Y Q H).
rewrite (A6 P B1 Y Q H).
uniformize_signed_areas.
field;solve_conds;auto with Geom.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
auto with Geom.
auto with Geom.
unfold on_foot in *.

*****
H5 : not (Col P Q Y)
H3 : parallel A1 B1 P Y
HB1 : and (perp B1 B P Y) (and (Col B1 P Y) (not (eq P Y)))
B1 : Point
HA1 : and (perp A1 A P Y) (and (Col A1 P Y) (not (eq P Y)))
A1 : Point
H : not (eq P Y)
H4 : not (eq r F0)
H1 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H2 : perp Y P P Q
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
Col P A1 Y
+++++
use HA1.
-----
Theorem elim_py_on_perp_d_right : forall A B P Q Y : Point, forall r: F, on_perp_d Y P Q r -> Py A B Y = Py A B P - (2+2) * r * S4 P A Q B.
Proof.
intros.
unfold on_perp_d in H.
use H.
assert (P<>Y).
intro;subst;basic_simpl.
IsoleVar (Py Y Q Y) H1.
replace (0/r) with 0 in H1 by (field;auto with Geom).
intuition.
elim (proj_ex A P Y H).
intros A1 HA1.
elim (proj_ex B P Y H).
intros B1 HB1.
assert (Py4 B P A Y / Py Y P Y = S4 P A Q B / S P Q Y).
replace (Py4 B P A Y) with (Py4 B1 P A1 Y).
assert (parallel A1 B1 P Y).
unfold on_foot in *.
use HA1.
use HB1.
cut (parallel Y P A1 B1).
auto with Geom.
unfold parallel, S4.
unfold Col in *.
uniformize_signed_areas.
rewrite H6, H9.
ring.
replace (Py Y P Y) with (Py P Y P) by auto with Geom.
rewrite <- (l3_10b A1 B1 P Y) by assumption.
replace (A1 ** B1 / P ** Y) with ((S4 P A1 Q B1) / (S P Q Y)).
replace (S4 P A1 Q B1) with (S4 P A Q B).
auto.
unfold S4.
unfold on_foot in *.
use HA1.
use HB1.
assert (parallel P Q B B1).
apply (perp_perp_para P Q Y P B B1);auto with Geom.
assert (parallel P Q A A1).
apply (perp_perp_para P Q Y P A A1);auto with Geom.
unfold parallel, S4 in *.
uniformize_signed_areas.
IsoleVar (S P A Q) H12;rewrite H12.
IsoleVar (S P B Q) H9;rewrite H9.
ring.
unfold S4.
replace (A1**B1) with (A1**P + P**B1).
2:apply chasles.
assert (~ (Col P Q Y)).
intro.
rewrite H5 in H1.
basic_simpl.
IsoleVar r H1.
replace (0/ Py P Q P) with 0 in H1.
intuition.
field;auto with Geom.
auto with Geom.
replace ((A1 ** P + P ** B1) / P ** Y) with (- (P**A1 / P**Y) + P ** B1/ P**Y).
2:uniformize_dir_seg;field;auto with Geom.
rewrite (A6 P A1 Y Q H).
rewrite (A6 P B1 Y Q H).
uniformize_signed_areas.
field;solve_conds;auto with Geom.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
auto with Geom.
auto with Geom.
unfold on_foot in *.
use HA1.

*****
H9 : not (eq P Y)
H8 : Col A1 P Y
H6 : perp A1 A P Y
H5 : not (Col P Q Y)
H3 : parallel A1 B1 P Y
HB1 : and (perp B1 B P Y) (and (Col B1 P Y) (not (eq P Y)))
A1,B1 : Point
H : not (eq P Y)
H4 : not (eq r F0)
H1 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H2 : perp Y P P Q
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
Col P A1 Y
+++++
use HB1.
-----
Theorem elim_py_on_perp_d_right : forall A B P Q Y : Point, forall r: F, on_perp_d Y P Q r -> Py A B Y = Py A B P - (2+2) * r * S4 P A Q B.
Proof.
intros.
unfold on_perp_d in H.
use H.
assert (P<>Y).
intro;subst;basic_simpl.
IsoleVar (Py Y Q Y) H1.
replace (0/r) with 0 in H1 by (field;auto with Geom).
intuition.
elim (proj_ex A P Y H).
intros A1 HA1.
elim (proj_ex B P Y H).
intros B1 HB1.
assert (Py4 B P A Y / Py Y P Y = S4 P A Q B / S P Q Y).
replace (Py4 B P A Y) with (Py4 B1 P A1 Y).
assert (parallel A1 B1 P Y).
unfold on_foot in *.
use HA1.
use HB1.
cut (parallel Y P A1 B1).
auto with Geom.
unfold parallel, S4.
unfold Col in *.
uniformize_signed_areas.
rewrite H6, H9.
ring.
replace (Py Y P Y) with (Py P Y P) by auto with Geom.
rewrite <- (l3_10b A1 B1 P Y) by assumption.
replace (A1 ** B1 / P ** Y) with ((S4 P A1 Q B1) / (S P Q Y)).
replace (S4 P A1 Q B1) with (S4 P A Q B).
auto.
unfold S4.
unfold on_foot in *.
use HA1.
use HB1.
assert (parallel P Q B B1).
apply (perp_perp_para P Q Y P B B1);auto with Geom.
assert (parallel P Q A A1).
apply (perp_perp_para P Q Y P A A1);auto with Geom.
unfold parallel, S4 in *.
uniformize_signed_areas.
IsoleVar (S P A Q) H12;rewrite H12.
IsoleVar (S P B Q) H9;rewrite H9.
ring.
unfold S4.
replace (A1**B1) with (A1**P + P**B1).
2:apply chasles.
assert (~ (Col P Q Y)).
intro.
rewrite H5 in H1.
basic_simpl.
IsoleVar r H1.
replace (0/ Py P Q P) with 0 in H1.
intuition.
field;auto with Geom.
auto with Geom.
replace ((A1 ** P + P ** B1) / P ** Y) with (- (P**A1 / P**Y) + P ** B1/ P**Y).
2:uniformize_dir_seg;field;auto with Geom.
rewrite (A6 P A1 Y Q H).
rewrite (A6 P B1 Y Q H).
uniformize_signed_areas.
field;solve_conds;auto with Geom.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
auto with Geom.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.

*****
H12 : not (eq P Y)
H11 : Col B1 P Y
H7 : perp B1 B P Y
H9 : not (eq P Y)
H8 : Col A1 P Y
H6 : perp A1 A P Y
H5 : not (Col P Q Y)
H3 : parallel A1 B1 P Y
A1,B1 : Point
H : not (eq P Y)
H4 : not (eq r F0)
H1 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H2 : perp Y P P Q
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
Col P A1 Y
+++++
auto with Geom.
-----
Theorem elim_py_on_perp_d_right : forall A B P Q Y : Point, forall r: F, on_perp_d Y P Q r -> Py A B Y = Py A B P - (2+2) * r * S4 P A Q B.
Proof.
intros.
unfold on_perp_d in H.
use H.
assert (P<>Y).
intro;subst;basic_simpl.
IsoleVar (Py Y Q Y) H1.
replace (0/r) with 0 in H1 by (field;auto with Geom).
intuition.
elim (proj_ex A P Y H).
intros A1 HA1.
elim (proj_ex B P Y H).
intros B1 HB1.
assert (Py4 B P A Y / Py Y P Y = S4 P A Q B / S P Q Y).
replace (Py4 B P A Y) with (Py4 B1 P A1 Y).
assert (parallel A1 B1 P Y).
unfold on_foot in *.
use HA1.
use HB1.
cut (parallel Y P A1 B1).
auto with Geom.
unfold parallel, S4.
unfold Col in *.
uniformize_signed_areas.
rewrite H6, H9.
ring.
replace (Py Y P Y) with (Py P Y P) by auto with Geom.
rewrite <- (l3_10b A1 B1 P Y) by assumption.
replace (A1 ** B1 / P ** Y) with ((S4 P A1 Q B1) / (S P Q Y)).
replace (S4 P A1 Q B1) with (S4 P A Q B).
auto.
unfold S4.
unfold on_foot in *.
use HA1.
use HB1.
assert (parallel P Q B B1).
apply (perp_perp_para P Q Y P B B1);auto with Geom.
assert (parallel P Q A A1).
apply (perp_perp_para P Q Y P A A1);auto with Geom.
unfold parallel, S4 in *.
uniformize_signed_areas.
IsoleVar (S P A Q) H12;rewrite H12.
IsoleVar (S P B Q) H9;rewrite H9.
ring.
unfold S4.
replace (A1**B1) with (A1**P + P**B1).
2:apply chasles.
assert (~ (Col P Q Y)).
intro.
rewrite H5 in H1.
basic_simpl.
IsoleVar r H1.
replace (0/ Py P Q P) with 0 in H1.
intuition.
field;auto with Geom.
auto with Geom.
replace ((A1 ** P + P ** B1) / P ** Y) with (- (P**A1 / P**Y) + P ** B1/ P**Y).
2:uniformize_dir_seg;field;auto with Geom.
rewrite (A6 P A1 Y Q H).
rewrite (A6 P B1 Y Q H).
uniformize_signed_areas.
field;solve_conds;auto with Geom.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
auto with Geom.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
auto with Geom.

*****
H3 : parallel A1 B1 P Y
HB1 : on_foot B1 B P Y
B1 : Point
HA1 : on_foot A1 A P Y
A1 : Point
H : not (eq P Y)
H4 : not (eq r F0)
H1 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H2 : perp Y P P Q
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
Col A1 P B1
+++++
unfold on_foot in *.
-----
Theorem elim_py_on_perp_d_right : forall A B P Q Y : Point, forall r: F, on_perp_d Y P Q r -> Py A B Y = Py A B P - (2+2) * r * S4 P A Q B.
Proof.
intros.
unfold on_perp_d in H.
use H.
assert (P<>Y).
intro;subst;basic_simpl.
IsoleVar (Py Y Q Y) H1.
replace (0/r) with 0 in H1 by (field;auto with Geom).
intuition.
elim (proj_ex A P Y H).
intros A1 HA1.
elim (proj_ex B P Y H).
intros B1 HB1.
assert (Py4 B P A Y / Py Y P Y = S4 P A Q B / S P Q Y).
replace (Py4 B P A Y) with (Py4 B1 P A1 Y).
assert (parallel A1 B1 P Y).
unfold on_foot in *.
use HA1.
use HB1.
cut (parallel Y P A1 B1).
auto with Geom.
unfold parallel, S4.
unfold Col in *.
uniformize_signed_areas.
rewrite H6, H9.
ring.
replace (Py Y P Y) with (Py P Y P) by auto with Geom.
rewrite <- (l3_10b A1 B1 P Y) by assumption.
replace (A1 ** B1 / P ** Y) with ((S4 P A1 Q B1) / (S P Q Y)).
replace (S4 P A1 Q B1) with (S4 P A Q B).
auto.
unfold S4.
unfold on_foot in *.
use HA1.
use HB1.
assert (parallel P Q B B1).
apply (perp_perp_para P Q Y P B B1);auto with Geom.
assert (parallel P Q A A1).
apply (perp_perp_para P Q Y P A A1);auto with Geom.
unfold parallel, S4 in *.
uniformize_signed_areas.
IsoleVar (S P A Q) H12;rewrite H12.
IsoleVar (S P B Q) H9;rewrite H9.
ring.
unfold S4.
replace (A1**B1) with (A1**P + P**B1).
2:apply chasles.
assert (~ (Col P Q Y)).
intro.
rewrite H5 in H1.
basic_simpl.
IsoleVar r H1.
replace (0/ Py P Q P) with 0 in H1.
intuition.
field;auto with Geom.
auto with Geom.
replace ((A1 ** P + P ** B1) / P ** Y) with (- (P**A1 / P**Y) + P ** B1/ P**Y).
2:uniformize_dir_seg;field;auto with Geom.
rewrite (A6 P A1 Y Q H).
rewrite (A6 P B1 Y Q H).
uniformize_signed_areas.
field;solve_conds;auto with Geom.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
auto with Geom.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
auto with Geom.
unfold on_foot in *.

*****
H3 : parallel A1 B1 P Y
HB1 : and (perp B1 B P Y) (and (Col B1 P Y) (not (eq P Y)))
B1 : Point
HA1 : and (perp A1 A P Y) (and (Col A1 P Y) (not (eq P Y)))
A1 : Point
H : not (eq P Y)
H4 : not (eq r F0)
H1 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H2 : perp Y P P Q
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
Col A1 P B1
+++++
use HA1.
-----
Theorem elim_py_on_perp_d_right : forall A B P Q Y : Point, forall r: F, on_perp_d Y P Q r -> Py A B Y = Py A B P - (2+2) * r * S4 P A Q B.
Proof.
intros.
unfold on_perp_d in H.
use H.
assert (P<>Y).
intro;subst;basic_simpl.
IsoleVar (Py Y Q Y) H1.
replace (0/r) with 0 in H1 by (field;auto with Geom).
intuition.
elim (proj_ex A P Y H).
intros A1 HA1.
elim (proj_ex B P Y H).
intros B1 HB1.
assert (Py4 B P A Y / Py Y P Y = S4 P A Q B / S P Q Y).
replace (Py4 B P A Y) with (Py4 B1 P A1 Y).
assert (parallel A1 B1 P Y).
unfold on_foot in *.
use HA1.
use HB1.
cut (parallel Y P A1 B1).
auto with Geom.
unfold parallel, S4.
unfold Col in *.
uniformize_signed_areas.
rewrite H6, H9.
ring.
replace (Py Y P Y) with (Py P Y P) by auto with Geom.
rewrite <- (l3_10b A1 B1 P Y) by assumption.
replace (A1 ** B1 / P ** Y) with ((S4 P A1 Q B1) / (S P Q Y)).
replace (S4 P A1 Q B1) with (S4 P A Q B).
auto.
unfold S4.
unfold on_foot in *.
use HA1.
use HB1.
assert (parallel P Q B B1).
apply (perp_perp_para P Q Y P B B1);auto with Geom.
assert (parallel P Q A A1).
apply (perp_perp_para P Q Y P A A1);auto with Geom.
unfold parallel, S4 in *.
uniformize_signed_areas.
IsoleVar (S P A Q) H12;rewrite H12.
IsoleVar (S P B Q) H9;rewrite H9.
ring.
unfold S4.
replace (A1**B1) with (A1**P + P**B1).
2:apply chasles.
assert (~ (Col P Q Y)).
intro.
rewrite H5 in H1.
basic_simpl.
IsoleVar r H1.
replace (0/ Py P Q P) with 0 in H1.
intuition.
field;auto with Geom.
auto with Geom.
replace ((A1 ** P + P ** B1) / P ** Y) with (- (P**A1 / P**Y) + P ** B1/ P**Y).
2:uniformize_dir_seg;field;auto with Geom.
rewrite (A6 P A1 Y Q H).
rewrite (A6 P B1 Y Q H).
uniformize_signed_areas.
field;solve_conds;auto with Geom.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
auto with Geom.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
auto with Geom.
unfold on_foot in *.
use HA1.

*****
H8 : not (eq P Y)
H7 : Col A1 P Y
H5 : perp A1 A P Y
H3 : parallel A1 B1 P Y
HB1 : and (perp B1 B P Y) (and (Col B1 P Y) (not (eq P Y)))
A1,B1 : Point
H : not (eq P Y)
H4 : not (eq r F0)
H1 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H2 : perp Y P P Q
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
Col A1 P B1
+++++
use HB1.
-----
Theorem elim_py_on_perp_d_right : forall A B P Q Y : Point, forall r: F, on_perp_d Y P Q r -> Py A B Y = Py A B P - (2+2) * r * S4 P A Q B.
Proof.
intros.
unfold on_perp_d in H.
use H.
assert (P<>Y).
intro;subst;basic_simpl.
IsoleVar (Py Y Q Y) H1.
replace (0/r) with 0 in H1 by (field;auto with Geom).
intuition.
elim (proj_ex A P Y H).
intros A1 HA1.
elim (proj_ex B P Y H).
intros B1 HB1.
assert (Py4 B P A Y / Py Y P Y = S4 P A Q B / S P Q Y).
replace (Py4 B P A Y) with (Py4 B1 P A1 Y).
assert (parallel A1 B1 P Y).
unfold on_foot in *.
use HA1.
use HB1.
cut (parallel Y P A1 B1).
auto with Geom.
unfold parallel, S4.
unfold Col in *.
uniformize_signed_areas.
rewrite H6, H9.
ring.
replace (Py Y P Y) with (Py P Y P) by auto with Geom.
rewrite <- (l3_10b A1 B1 P Y) by assumption.
replace (A1 ** B1 / P ** Y) with ((S4 P A1 Q B1) / (S P Q Y)).
replace (S4 P A1 Q B1) with (S4 P A Q B).
auto.
unfold S4.
unfold on_foot in *.
use HA1.
use HB1.
assert (parallel P Q B B1).
apply (perp_perp_para P Q Y P B B1);auto with Geom.
assert (parallel P Q A A1).
apply (perp_perp_para P Q Y P A A1);auto with Geom.
unfold parallel, S4 in *.
uniformize_signed_areas.
IsoleVar (S P A Q) H12;rewrite H12.
IsoleVar (S P B Q) H9;rewrite H9.
ring.
unfold S4.
replace (A1**B1) with (A1**P + P**B1).
2:apply chasles.
assert (~ (Col P Q Y)).
intro.
rewrite H5 in H1.
basic_simpl.
IsoleVar r H1.
replace (0/ Py P Q P) with 0 in H1.
intuition.
field;auto with Geom.
auto with Geom.
replace ((A1 ** P + P ** B1) / P ** Y) with (- (P**A1 / P**Y) + P ** B1/ P**Y).
2:uniformize_dir_seg;field;auto with Geom.
rewrite (A6 P A1 Y Q H).
rewrite (A6 P B1 Y Q H).
uniformize_signed_areas.
field;solve_conds;auto with Geom.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
auto with Geom.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.

*****
H11 : not (eq P Y)
H10 : Col B1 P Y
H6 : perp B1 B P Y
H8 : not (eq P Y)
H7 : Col A1 P Y
H5 : perp A1 A P Y
H3 : parallel A1 B1 P Y
A1,B1 : Point
H : not (eq P Y)
H4 : not (eq r F0)
H1 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H2 : perp Y P P Q
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
Col A1 P B1
+++++
assert (Col P A1 B1).
-----
Theorem elim_py_on_perp_d_right : forall A B P Q Y : Point, forall r: F, on_perp_d Y P Q r -> Py A B Y = Py A B P - (2+2) * r * S4 P A Q B.
Proof.
intros.
unfold on_perp_d in H.
use H.
assert (P<>Y).
intro;subst;basic_simpl.
IsoleVar (Py Y Q Y) H1.
replace (0/r) with 0 in H1 by (field;auto with Geom).
intuition.
elim (proj_ex A P Y H).
intros A1 HA1.
elim (proj_ex B P Y H).
intros B1 HB1.
assert (Py4 B P A Y / Py Y P Y = S4 P A Q B / S P Q Y).
replace (Py4 B P A Y) with (Py4 B1 P A1 Y).
assert (parallel A1 B1 P Y).
unfold on_foot in *.
use HA1.
use HB1.
cut (parallel Y P A1 B1).
auto with Geom.
unfold parallel, S4.
unfold Col in *.
uniformize_signed_areas.
rewrite H6, H9.
ring.
replace (Py Y P Y) with (Py P Y P) by auto with Geom.
rewrite <- (l3_10b A1 B1 P Y) by assumption.
replace (A1 ** B1 / P ** Y) with ((S4 P A1 Q B1) / (S P Q Y)).
replace (S4 P A1 Q B1) with (S4 P A Q B).
auto.
unfold S4.
unfold on_foot in *.
use HA1.
use HB1.
assert (parallel P Q B B1).
apply (perp_perp_para P Q Y P B B1);auto with Geom.
assert (parallel P Q A A1).
apply (perp_perp_para P Q Y P A A1);auto with Geom.
unfold parallel, S4 in *.
uniformize_signed_areas.
IsoleVar (S P A Q) H12;rewrite H12.
IsoleVar (S P B Q) H9;rewrite H9.
ring.
unfold S4.
replace (A1**B1) with (A1**P + P**B1).
2:apply chasles.
assert (~ (Col P Q Y)).
intro.
rewrite H5 in H1.
basic_simpl.
IsoleVar r H1.
replace (0/ Py P Q P) with 0 in H1.
intuition.
field;auto with Geom.
auto with Geom.
replace ((A1 ** P + P ** B1) / P ** Y) with (- (P**A1 / P**Y) + P ** B1/ P**Y).
2:uniformize_dir_seg;field;auto with Geom.
rewrite (A6 P A1 Y Q H).
rewrite (A6 P B1 Y Q H).
uniformize_signed_areas.
field;solve_conds;auto with Geom.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
auto with Geom.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
assert (Col P A1 B1).

*****
H11 : not (eq P Y)
H10 : Col B1 P Y
H6 : perp B1 B P Y
H8 : not (eq P Y)
H7 : Col A1 P Y
H5 : perp A1 A P Y
H3 : parallel A1 B1 P Y
A1,B1 : Point
H : not (eq P Y)
H4 : not (eq r F0)
H1 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H2 : perp Y P P Q
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
Col P A1 B1
+++++
apply (col_trans_1 P Y A1 B1 H11);auto with Geom.
-----
Theorem elim_py_on_perp_d_right : forall A B P Q Y : Point, forall r: F, on_perp_d Y P Q r -> Py A B Y = Py A B P - (2+2) * r * S4 P A Q B.
Proof.
intros.
unfold on_perp_d in H.
use H.
assert (P<>Y).
intro;subst;basic_simpl.
IsoleVar (Py Y Q Y) H1.
replace (0/r) with 0 in H1 by (field;auto with Geom).
intuition.
elim (proj_ex A P Y H).
intros A1 HA1.
elim (proj_ex B P Y H).
intros B1 HB1.
assert (Py4 B P A Y / Py Y P Y = S4 P A Q B / S P Q Y).
replace (Py4 B P A Y) with (Py4 B1 P A1 Y).
assert (parallel A1 B1 P Y).
unfold on_foot in *.
use HA1.
use HB1.
cut (parallel Y P A1 B1).
auto with Geom.
unfold parallel, S4.
unfold Col in *.
uniformize_signed_areas.
rewrite H6, H9.
ring.
replace (Py Y P Y) with (Py P Y P) by auto with Geom.
rewrite <- (l3_10b A1 B1 P Y) by assumption.
replace (A1 ** B1 / P ** Y) with ((S4 P A1 Q B1) / (S P Q Y)).
replace (S4 P A1 Q B1) with (S4 P A Q B).
auto.
unfold S4.
unfold on_foot in *.
use HA1.
use HB1.
assert (parallel P Q B B1).
apply (perp_perp_para P Q Y P B B1);auto with Geom.
assert (parallel P Q A A1).
apply (perp_perp_para P Q Y P A A1);auto with Geom.
unfold parallel, S4 in *.
uniformize_signed_areas.
IsoleVar (S P A Q) H12;rewrite H12.
IsoleVar (S P B Q) H9;rewrite H9.
ring.
unfold S4.
replace (A1**B1) with (A1**P + P**B1).
2:apply chasles.
assert (~ (Col P Q Y)).
intro.
rewrite H5 in H1.
basic_simpl.
IsoleVar r H1.
replace (0/ Py P Q P) with 0 in H1.
intuition.
field;auto with Geom.
auto with Geom.
replace ((A1 ** P + P ** B1) / P ** Y) with (- (P**A1 / P**Y) + P ** B1/ P**Y).
2:uniformize_dir_seg;field;auto with Geom.
rewrite (A6 P A1 Y Q H).
rewrite (A6 P B1 Y Q H).
uniformize_signed_areas.
field;solve_conds;auto with Geom.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
auto with Geom.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
assert (Col P A1 B1).
apply (col_trans_1 P Y A1 B1 H11);auto with Geom.

*****
H9 : Col P A1 B1
H11 : not (eq P Y)
H10 : Col B1 P Y
H6 : perp B1 B P Y
H8 : not (eq P Y)
H7 : Col A1 P Y
H5 : perp A1 A P Y
H3 : parallel A1 B1 P Y
A1,B1 : Point
H : not (eq P Y)
H4 : not (eq r F0)
H1 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H2 : perp Y P P Q
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
Col A1 P B1
+++++
auto with Geom.
-----
Theorem elim_py_on_perp_d_right : forall A B P Q Y : Point, forall r: F, on_perp_d Y P Q r -> Py A B Y = Py A B P - (2+2) * r * S4 P A Q B.
Proof.
intros.
unfold on_perp_d in H.
use H.
assert (P<>Y).
intro;subst;basic_simpl.
IsoleVar (Py Y Q Y) H1.
replace (0/r) with 0 in H1 by (field;auto with Geom).
intuition.
elim (proj_ex A P Y H).
intros A1 HA1.
elim (proj_ex B P Y H).
intros B1 HB1.
assert (Py4 B P A Y / Py Y P Y = S4 P A Q B / S P Q Y).
replace (Py4 B P A Y) with (Py4 B1 P A1 Y).
assert (parallel A1 B1 P Y).
unfold on_foot in *.
use HA1.
use HB1.
cut (parallel Y P A1 B1).
auto with Geom.
unfold parallel, S4.
unfold Col in *.
uniformize_signed_areas.
rewrite H6, H9.
ring.
replace (Py Y P Y) with (Py P Y P) by auto with Geom.
rewrite <- (l3_10b A1 B1 P Y) by assumption.
replace (A1 ** B1 / P ** Y) with ((S4 P A1 Q B1) / (S P Q Y)).
replace (S4 P A1 Q B1) with (S4 P A Q B).
auto.
unfold S4.
unfold on_foot in *.
use HA1.
use HB1.
assert (parallel P Q B B1).
apply (perp_perp_para P Q Y P B B1);auto with Geom.
assert (parallel P Q A A1).
apply (perp_perp_para P Q Y P A A1);auto with Geom.
unfold parallel, S4 in *.
uniformize_signed_areas.
IsoleVar (S P A Q) H12;rewrite H12.
IsoleVar (S P B Q) H9;rewrite H9.
ring.
unfold S4.
replace (A1**B1) with (A1**P + P**B1).
2:apply chasles.
assert (~ (Col P Q Y)).
intro.
rewrite H5 in H1.
basic_simpl.
IsoleVar r H1.
replace (0/ Py P Q P) with 0 in H1.
intuition.
field;auto with Geom.
auto with Geom.
replace ((A1 ** P + P ** B1) / P ** Y) with (- (P**A1 / P**Y) + P ** B1/ P**Y).
2:uniformize_dir_seg;field;auto with Geom.
rewrite (A6 P A1 Y Q H).
rewrite (A6 P B1 Y Q H).
uniformize_signed_areas.
field;solve_conds;auto with Geom.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
auto with Geom.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
assert (Col P A1 B1).
apply (col_trans_1 P Y A1 B1 H11);auto with Geom.
auto with Geom.

*****
HB1 : on_foot B1 B P Y
B1 : Point
HA1 : on_foot A1 A P Y
A1 : Point
H : not (eq P Y)
H4 : not (eq r F0)
H1 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H2 : perp Y P P Q
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
eq (Py4 B1 P A1 Y) (Py4 B P A Y)
+++++
unfold Py4.
-----
Theorem elim_py_on_perp_d_right : forall A B P Q Y : Point, forall r: F, on_perp_d Y P Q r -> Py A B Y = Py A B P - (2+2) * r * S4 P A Q B.
Proof.
intros.
unfold on_perp_d in H.
use H.
assert (P<>Y).
intro;subst;basic_simpl.
IsoleVar (Py Y Q Y) H1.
replace (0/r) with 0 in H1 by (field;auto with Geom).
intuition.
elim (proj_ex A P Y H).
intros A1 HA1.
elim (proj_ex B P Y H).
intros B1 HB1.
assert (Py4 B P A Y / Py Y P Y = S4 P A Q B / S P Q Y).
replace (Py4 B P A Y) with (Py4 B1 P A1 Y).
assert (parallel A1 B1 P Y).
unfold on_foot in *.
use HA1.
use HB1.
cut (parallel Y P A1 B1).
auto with Geom.
unfold parallel, S4.
unfold Col in *.
uniformize_signed_areas.
rewrite H6, H9.
ring.
replace (Py Y P Y) with (Py P Y P) by auto with Geom.
rewrite <- (l3_10b A1 B1 P Y) by assumption.
replace (A1 ** B1 / P ** Y) with ((S4 P A1 Q B1) / (S P Q Y)).
replace (S4 P A1 Q B1) with (S4 P A Q B).
auto.
unfold S4.
unfold on_foot in *.
use HA1.
use HB1.
assert (parallel P Q B B1).
apply (perp_perp_para P Q Y P B B1);auto with Geom.
assert (parallel P Q A A1).
apply (perp_perp_para P Q Y P A A1);auto with Geom.
unfold parallel, S4 in *.
uniformize_signed_areas.
IsoleVar (S P A Q) H12;rewrite H12.
IsoleVar (S P B Q) H9;rewrite H9.
ring.
unfold S4.
replace (A1**B1) with (A1**P + P**B1).
2:apply chasles.
assert (~ (Col P Q Y)).
intro.
rewrite H5 in H1.
basic_simpl.
IsoleVar r H1.
replace (0/ Py P Q P) with 0 in H1.
intuition.
field;auto with Geom.
auto with Geom.
replace ((A1 ** P + P ** B1) / P ** Y) with (- (P**A1 / P**Y) + P ** B1/ P**Y).
2:uniformize_dir_seg;field;auto with Geom.
rewrite (A6 P A1 Y Q H).
rewrite (A6 P B1 Y Q H).
uniformize_signed_areas.
field;solve_conds;auto with Geom.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
auto with Geom.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
assert (Col P A1 B1).
apply (col_trans_1 P Y A1 B1 H11);auto with Geom.
auto with Geom.
unfold Py4.

*****
HB1 : on_foot B1 B P Y
B1 : Point
HA1 : on_foot A1 A P Y
A1 : Point
H : not (eq P Y)
H4 : not (eq r F0)
H1 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H2 : perp Y P P Q
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
eq (Fminus (Py B1 P Y) (Py A1 P Y)) (Fminus (Py B P Y) (Py A P Y))
+++++
unfold on_foot in *.
-----
Theorem elim_py_on_perp_d_right : forall A B P Q Y : Point, forall r: F, on_perp_d Y P Q r -> Py A B Y = Py A B P - (2+2) * r * S4 P A Q B.
Proof.
intros.
unfold on_perp_d in H.
use H.
assert (P<>Y).
intro;subst;basic_simpl.
IsoleVar (Py Y Q Y) H1.
replace (0/r) with 0 in H1 by (field;auto with Geom).
intuition.
elim (proj_ex A P Y H).
intros A1 HA1.
elim (proj_ex B P Y H).
intros B1 HB1.
assert (Py4 B P A Y / Py Y P Y = S4 P A Q B / S P Q Y).
replace (Py4 B P A Y) with (Py4 B1 P A1 Y).
assert (parallel A1 B1 P Y).
unfold on_foot in *.
use HA1.
use HB1.
cut (parallel Y P A1 B1).
auto with Geom.
unfold parallel, S4.
unfold Col in *.
uniformize_signed_areas.
rewrite H6, H9.
ring.
replace (Py Y P Y) with (Py P Y P) by auto with Geom.
rewrite <- (l3_10b A1 B1 P Y) by assumption.
replace (A1 ** B1 / P ** Y) with ((S4 P A1 Q B1) / (S P Q Y)).
replace (S4 P A1 Q B1) with (S4 P A Q B).
auto.
unfold S4.
unfold on_foot in *.
use HA1.
use HB1.
assert (parallel P Q B B1).
apply (perp_perp_para P Q Y P B B1);auto with Geom.
assert (parallel P Q A A1).
apply (perp_perp_para P Q Y P A A1);auto with Geom.
unfold parallel, S4 in *.
uniformize_signed_areas.
IsoleVar (S P A Q) H12;rewrite H12.
IsoleVar (S P B Q) H9;rewrite H9.
ring.
unfold S4.
replace (A1**B1) with (A1**P + P**B1).
2:apply chasles.
assert (~ (Col P Q Y)).
intro.
rewrite H5 in H1.
basic_simpl.
IsoleVar r H1.
replace (0/ Py P Q P) with 0 in H1.
intuition.
field;auto with Geom.
auto with Geom.
replace ((A1 ** P + P ** B1) / P ** Y) with (- (P**A1 / P**Y) + P ** B1/ P**Y).
2:uniformize_dir_seg;field;auto with Geom.
rewrite (A6 P A1 Y Q H).
rewrite (A6 P B1 Y Q H).
uniformize_signed_areas.
field;solve_conds;auto with Geom.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
auto with Geom.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
assert (Col P A1 B1).
apply (col_trans_1 P Y A1 B1 H11);auto with Geom.
auto with Geom.
unfold Py4.
unfold on_foot in *.

*****
HB1 : and (perp B1 B P Y) (and (Col B1 P Y) (not (eq P Y)))
B1 : Point
HA1 : and (perp A1 A P Y) (and (Col A1 P Y) (not (eq P Y)))
A1 : Point
H : not (eq P Y)
H4 : not (eq r F0)
H1 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H2 : perp Y P P Q
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
eq (Fminus (Py B1 P Y) (Py A1 P Y)) (Fminus (Py B P Y) (Py A P Y))
+++++
use HA1.
-----
Theorem elim_py_on_perp_d_right : forall A B P Q Y : Point, forall r: F, on_perp_d Y P Q r -> Py A B Y = Py A B P - (2+2) * r * S4 P A Q B.
Proof.
intros.
unfold on_perp_d in H.
use H.
assert (P<>Y).
intro;subst;basic_simpl.
IsoleVar (Py Y Q Y) H1.
replace (0/r) with 0 in H1 by (field;auto with Geom).
intuition.
elim (proj_ex A P Y H).
intros A1 HA1.
elim (proj_ex B P Y H).
intros B1 HB1.
assert (Py4 B P A Y / Py Y P Y = S4 P A Q B / S P Q Y).
replace (Py4 B P A Y) with (Py4 B1 P A1 Y).
assert (parallel A1 B1 P Y).
unfold on_foot in *.
use HA1.
use HB1.
cut (parallel Y P A1 B1).
auto with Geom.
unfold parallel, S4.
unfold Col in *.
uniformize_signed_areas.
rewrite H6, H9.
ring.
replace (Py Y P Y) with (Py P Y P) by auto with Geom.
rewrite <- (l3_10b A1 B1 P Y) by assumption.
replace (A1 ** B1 / P ** Y) with ((S4 P A1 Q B1) / (S P Q Y)).
replace (S4 P A1 Q B1) with (S4 P A Q B).
auto.
unfold S4.
unfold on_foot in *.
use HA1.
use HB1.
assert (parallel P Q B B1).
apply (perp_perp_para P Q Y P B B1);auto with Geom.
assert (parallel P Q A A1).
apply (perp_perp_para P Q Y P A A1);auto with Geom.
unfold parallel, S4 in *.
uniformize_signed_areas.
IsoleVar (S P A Q) H12;rewrite H12.
IsoleVar (S P B Q) H9;rewrite H9.
ring.
unfold S4.
replace (A1**B1) with (A1**P + P**B1).
2:apply chasles.
assert (~ (Col P Q Y)).
intro.
rewrite H5 in H1.
basic_simpl.
IsoleVar r H1.
replace (0/ Py P Q P) with 0 in H1.
intuition.
field;auto with Geom.
auto with Geom.
replace ((A1 ** P + P ** B1) / P ** Y) with (- (P**A1 / P**Y) + P ** B1/ P**Y).
2:uniformize_dir_seg;field;auto with Geom.
rewrite (A6 P A1 Y Q H).
rewrite (A6 P B1 Y Q H).
uniformize_signed_areas.
field;solve_conds;auto with Geom.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
auto with Geom.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
assert (Col P A1 B1).
apply (col_trans_1 P Y A1 B1 H11);auto with Geom.
auto with Geom.
unfold Py4.
unfold on_foot in *.
use HA1.

*****
H7 : not (eq P Y)
H6 : Col A1 P Y
H3 : perp A1 A P Y
HB1 : and (perp B1 B P Y) (and (Col B1 P Y) (not (eq P Y)))
A1,B1 : Point
H : not (eq P Y)
H4 : not (eq r F0)
H1 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H2 : perp Y P P Q
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
eq (Fminus (Py B1 P Y) (Py A1 P Y)) (Fminus (Py B P Y) (Py A P Y))
+++++
use HB1.
-----
Theorem elim_py_on_perp_d_right : forall A B P Q Y : Point, forall r: F, on_perp_d Y P Q r -> Py A B Y = Py A B P - (2+2) * r * S4 P A Q B.
Proof.
intros.
unfold on_perp_d in H.
use H.
assert (P<>Y).
intro;subst;basic_simpl.
IsoleVar (Py Y Q Y) H1.
replace (0/r) with 0 in H1 by (field;auto with Geom).
intuition.
elim (proj_ex A P Y H).
intros A1 HA1.
elim (proj_ex B P Y H).
intros B1 HB1.
assert (Py4 B P A Y / Py Y P Y = S4 P A Q B / S P Q Y).
replace (Py4 B P A Y) with (Py4 B1 P A1 Y).
assert (parallel A1 B1 P Y).
unfold on_foot in *.
use HA1.
use HB1.
cut (parallel Y P A1 B1).
auto with Geom.
unfold parallel, S4.
unfold Col in *.
uniformize_signed_areas.
rewrite H6, H9.
ring.
replace (Py Y P Y) with (Py P Y P) by auto with Geom.
rewrite <- (l3_10b A1 B1 P Y) by assumption.
replace (A1 ** B1 / P ** Y) with ((S4 P A1 Q B1) / (S P Q Y)).
replace (S4 P A1 Q B1) with (S4 P A Q B).
auto.
unfold S4.
unfold on_foot in *.
use HA1.
use HB1.
assert (parallel P Q B B1).
apply (perp_perp_para P Q Y P B B1);auto with Geom.
assert (parallel P Q A A1).
apply (perp_perp_para P Q Y P A A1);auto with Geom.
unfold parallel, S4 in *.
uniformize_signed_areas.
IsoleVar (S P A Q) H12;rewrite H12.
IsoleVar (S P B Q) H9;rewrite H9.
ring.
unfold S4.
replace (A1**B1) with (A1**P + P**B1).
2:apply chasles.
assert (~ (Col P Q Y)).
intro.
rewrite H5 in H1.
basic_simpl.
IsoleVar r H1.
replace (0/ Py P Q P) with 0 in H1.
intuition.
field;auto with Geom.
auto with Geom.
replace ((A1 ** P + P ** B1) / P ** Y) with (- (P**A1 / P**Y) + P ** B1/ P**Y).
2:uniformize_dir_seg;field;auto with Geom.
rewrite (A6 P A1 Y Q H).
rewrite (A6 P B1 Y Q H).
uniformize_signed_areas.
field;solve_conds;auto with Geom.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
auto with Geom.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
assert (Col P A1 B1).
apply (col_trans_1 P Y A1 B1 H11);auto with Geom.
auto with Geom.
unfold Py4.
unfold on_foot in *.
use HA1.
use HB1.

*****
H10 : not (eq P Y)
H9 : Col B1 P Y
H5 : perp B1 B P Y
H7 : not (eq P Y)
H6 : Col A1 P Y
H3 : perp A1 A P Y
A1,B1 : Point
H : not (eq P Y)
H4 : not (eq r F0)
H1 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H2 : perp Y P P Q
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
eq (Fminus (Py B1 P Y) (Py A1 P Y)) (Fminus (Py B P Y) (Py A P Y))
+++++
unfold perp, Py4 in *.
-----
Theorem elim_py_on_perp_d_right : forall A B P Q Y : Point, forall r: F, on_perp_d Y P Q r -> Py A B Y = Py A B P - (2+2) * r * S4 P A Q B.
Proof.
intros.
unfold on_perp_d in H.
use H.
assert (P<>Y).
intro;subst;basic_simpl.
IsoleVar (Py Y Q Y) H1.
replace (0/r) with 0 in H1 by (field;auto with Geom).
intuition.
elim (proj_ex A P Y H).
intros A1 HA1.
elim (proj_ex B P Y H).
intros B1 HB1.
assert (Py4 B P A Y / Py Y P Y = S4 P A Q B / S P Q Y).
replace (Py4 B P A Y) with (Py4 B1 P A1 Y).
assert (parallel A1 B1 P Y).
unfold on_foot in *.
use HA1.
use HB1.
cut (parallel Y P A1 B1).
auto with Geom.
unfold parallel, S4.
unfold Col in *.
uniformize_signed_areas.
rewrite H6, H9.
ring.
replace (Py Y P Y) with (Py P Y P) by auto with Geom.
rewrite <- (l3_10b A1 B1 P Y) by assumption.
replace (A1 ** B1 / P ** Y) with ((S4 P A1 Q B1) / (S P Q Y)).
replace (S4 P A1 Q B1) with (S4 P A Q B).
auto.
unfold S4.
unfold on_foot in *.
use HA1.
use HB1.
assert (parallel P Q B B1).
apply (perp_perp_para P Q Y P B B1);auto with Geom.
assert (parallel P Q A A1).
apply (perp_perp_para P Q Y P A A1);auto with Geom.
unfold parallel, S4 in *.
uniformize_signed_areas.
IsoleVar (S P A Q) H12;rewrite H12.
IsoleVar (S P B Q) H9;rewrite H9.
ring.
unfold S4.
replace (A1**B1) with (A1**P + P**B1).
2:apply chasles.
assert (~ (Col P Q Y)).
intro.
rewrite H5 in H1.
basic_simpl.
IsoleVar r H1.
replace (0/ Py P Q P) with 0 in H1.
intuition.
field;auto with Geom.
auto with Geom.
replace ((A1 ** P + P ** B1) / P ** Y) with (- (P**A1 / P**Y) + P ** B1/ P**Y).
2:uniformize_dir_seg;field;auto with Geom.
rewrite (A6 P A1 Y Q H).
rewrite (A6 P B1 Y Q H).
uniformize_signed_areas.
field;solve_conds;auto with Geom.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
auto with Geom.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
assert (Col P A1 B1).
apply (col_trans_1 P Y A1 B1 H11);auto with Geom.
auto with Geom.
unfold Py4.
unfold on_foot in *.
use HA1.
use HB1.
unfold perp, Py4 in *.

*****
H10 : not (eq P Y)
H9 : Col B1 P Y
H5 : eq (Fminus (Py B1 P Y) (Py B P Y)) F0
H7 : not (eq P Y)
H6 : Col A1 P Y
H3 : eq (Fminus (Py A1 P Y) (Py A P Y)) F0
A1,B1 : Point
H : not (eq P Y)
H4 : not (eq r F0)
H1 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H2 : eq (Fminus (Py Y P Q) (Py P P Q)) F0
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
eq (Fminus (Py B1 P Y) (Py A1 P Y)) (Fminus (Py B P Y) (Py A P Y))
+++++
IsoleVar (Py A1 P Y) H3.
-----
Theorem elim_py_on_perp_d_right : forall A B P Q Y : Point, forall r: F, on_perp_d Y P Q r -> Py A B Y = Py A B P - (2+2) * r * S4 P A Q B.
Proof.
intros.
unfold on_perp_d in H.
use H.
assert (P<>Y).
intro;subst;basic_simpl.
IsoleVar (Py Y Q Y) H1.
replace (0/r) with 0 in H1 by (field;auto with Geom).
intuition.
elim (proj_ex A P Y H).
intros A1 HA1.
elim (proj_ex B P Y H).
intros B1 HB1.
assert (Py4 B P A Y / Py Y P Y = S4 P A Q B / S P Q Y).
replace (Py4 B P A Y) with (Py4 B1 P A1 Y).
assert (parallel A1 B1 P Y).
unfold on_foot in *.
use HA1.
use HB1.
cut (parallel Y P A1 B1).
auto with Geom.
unfold parallel, S4.
unfold Col in *.
uniformize_signed_areas.
rewrite H6, H9.
ring.
replace (Py Y P Y) with (Py P Y P) by auto with Geom.
rewrite <- (l3_10b A1 B1 P Y) by assumption.
replace (A1 ** B1 / P ** Y) with ((S4 P A1 Q B1) / (S P Q Y)).
replace (S4 P A1 Q B1) with (S4 P A Q B).
auto.
unfold S4.
unfold on_foot in *.
use HA1.
use HB1.
assert (parallel P Q B B1).
apply (perp_perp_para P Q Y P B B1);auto with Geom.
assert (parallel P Q A A1).
apply (perp_perp_para P Q Y P A A1);auto with Geom.
unfold parallel, S4 in *.
uniformize_signed_areas.
IsoleVar (S P A Q) H12;rewrite H12.
IsoleVar (S P B Q) H9;rewrite H9.
ring.
unfold S4.
replace (A1**B1) with (A1**P + P**B1).
2:apply chasles.
assert (~ (Col P Q Y)).
intro.
rewrite H5 in H1.
basic_simpl.
IsoleVar r H1.
replace (0/ Py P Q P) with 0 in H1.
intuition.
field;auto with Geom.
auto with Geom.
replace ((A1 ** P + P ** B1) / P ** Y) with (- (P**A1 / P**Y) + P ** B1/ P**Y).
2:uniformize_dir_seg;field;auto with Geom.
rewrite (A6 P A1 Y Q H).
rewrite (A6 P B1 Y Q H).
uniformize_signed_areas.
field;solve_conds;auto with Geom.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
auto with Geom.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
assert (Col P A1 B1).
apply (col_trans_1 P Y A1 B1 H11);auto with Geom.
auto with Geom.
unfold Py4.
unfold on_foot in *.
use HA1.
use HB1.
unfold perp, Py4 in *.
IsoleVar (Py A1 P Y) H3.

*****
H3 : eq (Py A1 P Y) (Fplus F0 (Py A P Y))
H10 : not (eq P Y)
H9 : Col B1 P Y
H5 : eq (Fminus (Py B1 P Y) (Py B P Y)) F0
H7 : not (eq P Y)
H6 : Col A1 P Y
A1,B1 : Point
H : not (eq P Y)
H4 : not (eq r F0)
H1 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H2 : eq (Fminus (Py Y P Q) (Py P P Q)) F0
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
eq (Fminus (Py B1 P Y) (Py A1 P Y)) (Fminus (Py B P Y) (Py A P Y))
+++++
IsoleVar (Py B1 P Y) H5.
-----
Theorem elim_py_on_perp_d_right : forall A B P Q Y : Point, forall r: F, on_perp_d Y P Q r -> Py A B Y = Py A B P - (2+2) * r * S4 P A Q B.
Proof.
intros.
unfold on_perp_d in H.
use H.
assert (P<>Y).
intro;subst;basic_simpl.
IsoleVar (Py Y Q Y) H1.
replace (0/r) with 0 in H1 by (field;auto with Geom).
intuition.
elim (proj_ex A P Y H).
intros A1 HA1.
elim (proj_ex B P Y H).
intros B1 HB1.
assert (Py4 B P A Y / Py Y P Y = S4 P A Q B / S P Q Y).
replace (Py4 B P A Y) with (Py4 B1 P A1 Y).
assert (parallel A1 B1 P Y).
unfold on_foot in *.
use HA1.
use HB1.
cut (parallel Y P A1 B1).
auto with Geom.
unfold parallel, S4.
unfold Col in *.
uniformize_signed_areas.
rewrite H6, H9.
ring.
replace (Py Y P Y) with (Py P Y P) by auto with Geom.
rewrite <- (l3_10b A1 B1 P Y) by assumption.
replace (A1 ** B1 / P ** Y) with ((S4 P A1 Q B1) / (S P Q Y)).
replace (S4 P A1 Q B1) with (S4 P A Q B).
auto.
unfold S4.
unfold on_foot in *.
use HA1.
use HB1.
assert (parallel P Q B B1).
apply (perp_perp_para P Q Y P B B1);auto with Geom.
assert (parallel P Q A A1).
apply (perp_perp_para P Q Y P A A1);auto with Geom.
unfold parallel, S4 in *.
uniformize_signed_areas.
IsoleVar (S P A Q) H12;rewrite H12.
IsoleVar (S P B Q) H9;rewrite H9.
ring.
unfold S4.
replace (A1**B1) with (A1**P + P**B1).
2:apply chasles.
assert (~ (Col P Q Y)).
intro.
rewrite H5 in H1.
basic_simpl.
IsoleVar r H1.
replace (0/ Py P Q P) with 0 in H1.
intuition.
field;auto with Geom.
auto with Geom.
replace ((A1 ** P + P ** B1) / P ** Y) with (- (P**A1 / P**Y) + P ** B1/ P**Y).
2:uniformize_dir_seg;field;auto with Geom.
rewrite (A6 P A1 Y Q H).
rewrite (A6 P B1 Y Q H).
uniformize_signed_areas.
field;solve_conds;auto with Geom.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
auto with Geom.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
assert (Col P A1 B1).
apply (col_trans_1 P Y A1 B1 H11);auto with Geom.
auto with Geom.
unfold Py4.
unfold on_foot in *.
use HA1.
use HB1.
unfold perp, Py4 in *.
IsoleVar (Py A1 P Y) H3.
IsoleVar (Py B1 P Y) H5.

*****
H5 : eq (Py B1 P Y) (Fplus F0 (Py B P Y))
H3 : eq (Py A1 P Y) (Fplus F0 (Py A P Y))
H10 : not (eq P Y)
H9 : Col B1 P Y
H7 : not (eq P Y)
H6 : Col A1 P Y
A1,B1 : Point
H : not (eq P Y)
H4 : not (eq r F0)
H1 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H2 : eq (Fminus (Py Y P Q) (Py P P Q)) F0
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
eq (Fminus (Py B1 P Y) (Py A1 P Y)) (Fminus (Py B P Y) (Py A P Y))
+++++
rewrite H3, H5.
-----
Theorem elim_py_on_perp_d_right : forall A B P Q Y : Point, forall r: F, on_perp_d Y P Q r -> Py A B Y = Py A B P - (2+2) * r * S4 P A Q B.
Proof.
intros.
unfold on_perp_d in H.
use H.
assert (P<>Y).
intro;subst;basic_simpl.
IsoleVar (Py Y Q Y) H1.
replace (0/r) with 0 in H1 by (field;auto with Geom).
intuition.
elim (proj_ex A P Y H).
intros A1 HA1.
elim (proj_ex B P Y H).
intros B1 HB1.
assert (Py4 B P A Y / Py Y P Y = S4 P A Q B / S P Q Y).
replace (Py4 B P A Y) with (Py4 B1 P A1 Y).
assert (parallel A1 B1 P Y).
unfold on_foot in *.
use HA1.
use HB1.
cut (parallel Y P A1 B1).
auto with Geom.
unfold parallel, S4.
unfold Col in *.
uniformize_signed_areas.
rewrite H6, H9.
ring.
replace (Py Y P Y) with (Py P Y P) by auto with Geom.
rewrite <- (l3_10b A1 B1 P Y) by assumption.
replace (A1 ** B1 / P ** Y) with ((S4 P A1 Q B1) / (S P Q Y)).
replace (S4 P A1 Q B1) with (S4 P A Q B).
auto.
unfold S4.
unfold on_foot in *.
use HA1.
use HB1.
assert (parallel P Q B B1).
apply (perp_perp_para P Q Y P B B1);auto with Geom.
assert (parallel P Q A A1).
apply (perp_perp_para P Q Y P A A1);auto with Geom.
unfold parallel, S4 in *.
uniformize_signed_areas.
IsoleVar (S P A Q) H12;rewrite H12.
IsoleVar (S P B Q) H9;rewrite H9.
ring.
unfold S4.
replace (A1**B1) with (A1**P + P**B1).
2:apply chasles.
assert (~ (Col P Q Y)).
intro.
rewrite H5 in H1.
basic_simpl.
IsoleVar r H1.
replace (0/ Py P Q P) with 0 in H1.
intuition.
field;auto with Geom.
auto with Geom.
replace ((A1 ** P + P ** B1) / P ** Y) with (- (P**A1 / P**Y) + P ** B1/ P**Y).
2:uniformize_dir_seg;field;auto with Geom.
rewrite (A6 P A1 Y Q H).
rewrite (A6 P B1 Y Q H).
uniformize_signed_areas.
field;solve_conds;auto with Geom.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
auto with Geom.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
assert (Col P A1 B1).
apply (col_trans_1 P Y A1 B1 H11);auto with Geom.
auto with Geom.
unfold Py4.
unfold on_foot in *.
use HA1.
use HB1.
unfold perp, Py4 in *.
IsoleVar (Py A1 P Y) H3.
IsoleVar (Py B1 P Y) H5.
rewrite H3, H5.

*****
H5 : eq (Py B1 P Y) (Fplus F0 (Py B P Y))
H3 : eq (Py A1 P Y) (Fplus F0 (Py A P Y))
H10 : not (eq P Y)
H9 : Col B1 P Y
H7 : not (eq P Y)
H6 : Col A1 P Y
A1,B1 : Point
H : not (eq P Y)
H4 : not (eq r F0)
H1 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H2 : eq (Fminus (Py Y P Q) (Py P P Q)) F0
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
eq (Fminus (Fplus F0 (Py B P Y)) (Fplus F0 (Py A P Y))) (Fminus (Py B P Y) (Py A P Y))
+++++
ring.
-----
Theorem elim_py_on_perp_d_right : forall A B P Q Y : Point, forall r: F, on_perp_d Y P Q r -> Py A B Y = Py A B P - (2+2) * r * S4 P A Q B.
Proof.
intros.
unfold on_perp_d in H.
use H.
assert (P<>Y).
intro;subst;basic_simpl.
IsoleVar (Py Y Q Y) H1.
replace (0/r) with 0 in H1 by (field;auto with Geom).
intuition.
elim (proj_ex A P Y H).
intros A1 HA1.
elim (proj_ex B P Y H).
intros B1 HB1.
assert (Py4 B P A Y / Py Y P Y = S4 P A Q B / S P Q Y).
replace (Py4 B P A Y) with (Py4 B1 P A1 Y).
assert (parallel A1 B1 P Y).
unfold on_foot in *.
use HA1.
use HB1.
cut (parallel Y P A1 B1).
auto with Geom.
unfold parallel, S4.
unfold Col in *.
uniformize_signed_areas.
rewrite H6, H9.
ring.
replace (Py Y P Y) with (Py P Y P) by auto with Geom.
rewrite <- (l3_10b A1 B1 P Y) by assumption.
replace (A1 ** B1 / P ** Y) with ((S4 P A1 Q B1) / (S P Q Y)).
replace (S4 P A1 Q B1) with (S4 P A Q B).
auto.
unfold S4.
unfold on_foot in *.
use HA1.
use HB1.
assert (parallel P Q B B1).
apply (perp_perp_para P Q Y P B B1);auto with Geom.
assert (parallel P Q A A1).
apply (perp_perp_para P Q Y P A A1);auto with Geom.
unfold parallel, S4 in *.
uniformize_signed_areas.
IsoleVar (S P A Q) H12;rewrite H12.
IsoleVar (S P B Q) H9;rewrite H9.
ring.
unfold S4.
replace (A1**B1) with (A1**P + P**B1).
2:apply chasles.
assert (~ (Col P Q Y)).
intro.
rewrite H5 in H1.
basic_simpl.
IsoleVar r H1.
replace (0/ Py P Q P) with 0 in H1.
intuition.
field;auto with Geom.
auto with Geom.
replace ((A1 ** P + P ** B1) / P ** Y) with (- (P**A1 / P**Y) + P ** B1/ P**Y).
2:uniformize_dir_seg;field;auto with Geom.
rewrite (A6 P A1 Y Q H).
rewrite (A6 P B1 Y Q H).
uniformize_signed_areas.
field;solve_conds;auto with Geom.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
auto with Geom.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
assert (Col P A1 B1).
apply (col_trans_1 P Y A1 B1 H11);auto with Geom.
auto with Geom.
unfold Py4.
unfold on_foot in *.
use HA1.
use HB1.
unfold perp, Py4 in *.
IsoleVar (Py A1 P Y) H3.
IsoleVar (Py B1 P Y) H5.
rewrite H3, H5.
ring.

*****
H3 : eq (Fdiv (Py4 B P A Y) (Py Y P Y)) (Fdiv (S4 P A Q B) (S P Q Y))
HB1 : on_foot B1 B P Y
B1 : Point
HA1 : on_foot A1 A P Y
A1 : Point
H : not (eq P Y)
H4 : not (eq r F0)
H1 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H2 : perp Y P P Q
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
eq (Py A B Y) (Fminus (Py A B P) (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) r) (S4 P A Q B)))
+++++
assert (T:=herron_qin P Q Y).
-----
Theorem elim_py_on_perp_d_right : forall A B P Q Y : Point, forall r: F, on_perp_d Y P Q r -> Py A B Y = Py A B P - (2+2) * r * S4 P A Q B.
Proof.
intros.
unfold on_perp_d in H.
use H.
assert (P<>Y).
intro;subst;basic_simpl.
IsoleVar (Py Y Q Y) H1.
replace (0/r) with 0 in H1 by (field;auto with Geom).
intuition.
elim (proj_ex A P Y H).
intros A1 HA1.
elim (proj_ex B P Y H).
intros B1 HB1.
assert (Py4 B P A Y / Py Y P Y = S4 P A Q B / S P Q Y).
replace (Py4 B P A Y) with (Py4 B1 P A1 Y).
assert (parallel A1 B1 P Y).
unfold on_foot in *.
use HA1.
use HB1.
cut (parallel Y P A1 B1).
auto with Geom.
unfold parallel, S4.
unfold Col in *.
uniformize_signed_areas.
rewrite H6, H9.
ring.
replace (Py Y P Y) with (Py P Y P) by auto with Geom.
rewrite <- (l3_10b A1 B1 P Y) by assumption.
replace (A1 ** B1 / P ** Y) with ((S4 P A1 Q B1) / (S P Q Y)).
replace (S4 P A1 Q B1) with (S4 P A Q B).
auto.
unfold S4.
unfold on_foot in *.
use HA1.
use HB1.
assert (parallel P Q B B1).
apply (perp_perp_para P Q Y P B B1);auto with Geom.
assert (parallel P Q A A1).
apply (perp_perp_para P Q Y P A A1);auto with Geom.
unfold parallel, S4 in *.
uniformize_signed_areas.
IsoleVar (S P A Q) H12;rewrite H12.
IsoleVar (S P B Q) H9;rewrite H9.
ring.
unfold S4.
replace (A1**B1) with (A1**P + P**B1).
2:apply chasles.
assert (~ (Col P Q Y)).
intro.
rewrite H5 in H1.
basic_simpl.
IsoleVar r H1.
replace (0/ Py P Q P) with 0 in H1.
intuition.
field;auto with Geom.
auto with Geom.
replace ((A1 ** P + P ** B1) / P ** Y) with (- (P**A1 / P**Y) + P ** B1/ P**Y).
2:uniformize_dir_seg;field;auto with Geom.
rewrite (A6 P A1 Y Q H).
rewrite (A6 P B1 Y Q H).
uniformize_signed_areas.
field;solve_conds;auto with Geom.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
auto with Geom.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
assert (Col P A1 B1).
apply (col_trans_1 P Y A1 B1 H11);auto with Geom.
auto with Geom.
unfold Py4.
unfold on_foot in *.
use HA1.
use HB1.
unfold perp, Py4 in *.
IsoleVar (Py A1 P Y) H3.
IsoleVar (Py B1 P Y) H5.
rewrite H3, H5.
ring.
assert (T:=herron_qin P Q Y).

*****
T : eq (Fmult (S P Q Y) (S P Q Y))\n (Fmult\n (Fdiv F1\n (Fmult\n (Fmult (Fmult (Fplus F1 F1) (Fplus F1 F1)) (Fplus F1 F1))\n (Fplus F1 F1)))\n (Fminus (Fmult (Py P Q P) (Py P Y P))\n (Fmult (Py Q P Y) (Py Q P Y))))
H3 : eq (Fdiv (Py4 B P A Y) (Py Y P Y)) (Fdiv (S4 P A Q B) (S P Q Y))
HB1 : on_foot B1 B P Y
B1 : Point
HA1 : on_foot A1 A P Y
A1 : Point
H : not (eq P Y)
H4 : not (eq r F0)
H1 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H2 : perp Y P P Q
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
eq (Py A B Y) (Fminus (Py A B P) (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) r) (S4 P A Q B)))
+++++
unfold perp, Py4 in H2.
-----
Theorem elim_py_on_perp_d_right : forall A B P Q Y : Point, forall r: F, on_perp_d Y P Q r -> Py A B Y = Py A B P - (2+2) * r * S4 P A Q B.
Proof.
intros.
unfold on_perp_d in H.
use H.
assert (P<>Y).
intro;subst;basic_simpl.
IsoleVar (Py Y Q Y) H1.
replace (0/r) with 0 in H1 by (field;auto with Geom).
intuition.
elim (proj_ex A P Y H).
intros A1 HA1.
elim (proj_ex B P Y H).
intros B1 HB1.
assert (Py4 B P A Y / Py Y P Y = S4 P A Q B / S P Q Y).
replace (Py4 B P A Y) with (Py4 B1 P A1 Y).
assert (parallel A1 B1 P Y).
unfold on_foot in *.
use HA1.
use HB1.
cut (parallel Y P A1 B1).
auto with Geom.
unfold parallel, S4.
unfold Col in *.
uniformize_signed_areas.
rewrite H6, H9.
ring.
replace (Py Y P Y) with (Py P Y P) by auto with Geom.
rewrite <- (l3_10b A1 B1 P Y) by assumption.
replace (A1 ** B1 / P ** Y) with ((S4 P A1 Q B1) / (S P Q Y)).
replace (S4 P A1 Q B1) with (S4 P A Q B).
auto.
unfold S4.
unfold on_foot in *.
use HA1.
use HB1.
assert (parallel P Q B B1).
apply (perp_perp_para P Q Y P B B1);auto with Geom.
assert (parallel P Q A A1).
apply (perp_perp_para P Q Y P A A1);auto with Geom.
unfold parallel, S4 in *.
uniformize_signed_areas.
IsoleVar (S P A Q) H12;rewrite H12.
IsoleVar (S P B Q) H9;rewrite H9.
ring.
unfold S4.
replace (A1**B1) with (A1**P + P**B1).
2:apply chasles.
assert (~ (Col P Q Y)).
intro.
rewrite H5 in H1.
basic_simpl.
IsoleVar r H1.
replace (0/ Py P Q P) with 0 in H1.
intuition.
field;auto with Geom.
auto with Geom.
replace ((A1 ** P + P ** B1) / P ** Y) with (- (P**A1 / P**Y) + P ** B1/ P**Y).
2:uniformize_dir_seg;field;auto with Geom.
rewrite (A6 P A1 Y Q H).
rewrite (A6 P B1 Y Q H).
uniformize_signed_areas.
field;solve_conds;auto with Geom.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
auto with Geom.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
assert (Col P A1 B1).
apply (col_trans_1 P Y A1 B1 H11);auto with Geom.
auto with Geom.
unfold Py4.
unfold on_foot in *.
use HA1.
use HB1.
unfold perp, Py4 in *.
IsoleVar (Py A1 P Y) H3.
IsoleVar (Py B1 P Y) H5.
rewrite H3, H5.
ring.
assert (T:=herron_qin P Q Y).
unfold perp, Py4 in H2.

*****
T : eq (Fmult (S P Q Y) (S P Q Y))\n (Fmult\n (Fdiv F1\n (Fmult\n (Fmult (Fmult (Fplus F1 F1) (Fplus F1 F1)) (Fplus F1 F1))\n (Fplus F1 F1)))\n (Fminus (Fmult (Py P Q P) (Py P Y P))\n (Fmult (Py Q P Y) (Py Q P Y))))
H3 : eq (Fdiv (Py4 B P A Y) (Py Y P Y)) (Fdiv (S4 P A Q B) (S P Q Y))
HB1 : on_foot B1 B P Y
B1 : Point
HA1 : on_foot A1 A P Y
A1 : Point
H : not (eq P Y)
H4 : not (eq r F0)
H1 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H2 : eq (Fminus (Py Y P Q) (Py P P Q)) F0
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
eq (Py A B Y) (Fminus (Py A B P) (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) r) (S4 P A Q B)))
+++++
basic_simpl.
-----
Theorem elim_py_on_perp_d_right : forall A B P Q Y : Point, forall r: F, on_perp_d Y P Q r -> Py A B Y = Py A B P - (2+2) * r * S4 P A Q B.
Proof.
intros.
unfold on_perp_d in H.
use H.
assert (P<>Y).
intro;subst;basic_simpl.
IsoleVar (Py Y Q Y) H1.
replace (0/r) with 0 in H1 by (field;auto with Geom).
intuition.
elim (proj_ex A P Y H).
intros A1 HA1.
elim (proj_ex B P Y H).
intros B1 HB1.
assert (Py4 B P A Y / Py Y P Y = S4 P A Q B / S P Q Y).
replace (Py4 B P A Y) with (Py4 B1 P A1 Y).
assert (parallel A1 B1 P Y).
unfold on_foot in *.
use HA1.
use HB1.
cut (parallel Y P A1 B1).
auto with Geom.
unfold parallel, S4.
unfold Col in *.
uniformize_signed_areas.
rewrite H6, H9.
ring.
replace (Py Y P Y) with (Py P Y P) by auto with Geom.
rewrite <- (l3_10b A1 B1 P Y) by assumption.
replace (A1 ** B1 / P ** Y) with ((S4 P A1 Q B1) / (S P Q Y)).
replace (S4 P A1 Q B1) with (S4 P A Q B).
auto.
unfold S4.
unfold on_foot in *.
use HA1.
use HB1.
assert (parallel P Q B B1).
apply (perp_perp_para P Q Y P B B1);auto with Geom.
assert (parallel P Q A A1).
apply (perp_perp_para P Q Y P A A1);auto with Geom.
unfold parallel, S4 in *.
uniformize_signed_areas.
IsoleVar (S P A Q) H12;rewrite H12.
IsoleVar (S P B Q) H9;rewrite H9.
ring.
unfold S4.
replace (A1**B1) with (A1**P + P**B1).
2:apply chasles.
assert (~ (Col P Q Y)).
intro.
rewrite H5 in H1.
basic_simpl.
IsoleVar r H1.
replace (0/ Py P Q P) with 0 in H1.
intuition.
field;auto with Geom.
auto with Geom.
replace ((A1 ** P + P ** B1) / P ** Y) with (- (P**A1 / P**Y) + P ** B1/ P**Y).
2:uniformize_dir_seg;field;auto with Geom.
rewrite (A6 P A1 Y Q H).
rewrite (A6 P B1 Y Q H).
uniformize_signed_areas.
field;solve_conds;auto with Geom.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
auto with Geom.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
assert (Col P A1 B1).
apply (col_trans_1 P Y A1 B1 H11);auto with Geom.
auto with Geom.
unfold Py4.
unfold on_foot in *.
use HA1.
use HB1.
unfold perp, Py4 in *.
IsoleVar (Py A1 P Y) H3.
IsoleVar (Py B1 P Y) H5.
rewrite H3, H5.
ring.
assert (T:=herron_qin P Q Y).
unfold perp, Py4 in H2.
basic_simpl.

*****
T : eq (Fmult (S P Q Y) (S P Q Y))\n (Fmult\n (Fdiv F1\n (Fmult\n (Fmult (Fmult (Fplus F1 F1) (Fplus F1 F1)) (Fplus F1 F1))\n (Fplus F1 F1)))\n (Fminus (Fmult (Py P Q P) (Py P Y P))\n (Fmult (Py Q P Y) (Py Q P Y))))
H3 : eq (Fdiv (Py4 B P A Y) (Py Y P Y)) (Fdiv (S4 P A Q B) (S P Q Y))
HB1 : on_foot B1 B P Y
B1 : Point
HA1 : on_foot A1 A P Y
A1 : Point
H : not (eq P Y)
H4 : not (eq r F0)
H1 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H2 : eq (Py Y P Q) F0
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
eq (Py A B Y) (Fminus (Py A B P) (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) r) (S4 P A Q B)))
+++++
replace (Py Q P Y) with 0 in T by (replace (Py Q P Y) with (Py Y P Q) by auto with Geom;auto).
-----
Theorem elim_py_on_perp_d_right : forall A B P Q Y : Point, forall r: F, on_perp_d Y P Q r -> Py A B Y = Py A B P - (2+2) * r * S4 P A Q B.
Proof.
intros.
unfold on_perp_d in H.
use H.
assert (P<>Y).
intro;subst;basic_simpl.
IsoleVar (Py Y Q Y) H1.
replace (0/r) with 0 in H1 by (field;auto with Geom).
intuition.
elim (proj_ex A P Y H).
intros A1 HA1.
elim (proj_ex B P Y H).
intros B1 HB1.
assert (Py4 B P A Y / Py Y P Y = S4 P A Q B / S P Q Y).
replace (Py4 B P A Y) with (Py4 B1 P A1 Y).
assert (parallel A1 B1 P Y).
unfold on_foot in *.
use HA1.
use HB1.
cut (parallel Y P A1 B1).
auto with Geom.
unfold parallel, S4.
unfold Col in *.
uniformize_signed_areas.
rewrite H6, H9.
ring.
replace (Py Y P Y) with (Py P Y P) by auto with Geom.
rewrite <- (l3_10b A1 B1 P Y) by assumption.
replace (A1 ** B1 / P ** Y) with ((S4 P A1 Q B1) / (S P Q Y)).
replace (S4 P A1 Q B1) with (S4 P A Q B).
auto.
unfold S4.
unfold on_foot in *.
use HA1.
use HB1.
assert (parallel P Q B B1).
apply (perp_perp_para P Q Y P B B1);auto with Geom.
assert (parallel P Q A A1).
apply (perp_perp_para P Q Y P A A1);auto with Geom.
unfold parallel, S4 in *.
uniformize_signed_areas.
IsoleVar (S P A Q) H12;rewrite H12.
IsoleVar (S P B Q) H9;rewrite H9.
ring.
unfold S4.
replace (A1**B1) with (A1**P + P**B1).
2:apply chasles.
assert (~ (Col P Q Y)).
intro.
rewrite H5 in H1.
basic_simpl.
IsoleVar r H1.
replace (0/ Py P Q P) with 0 in H1.
intuition.
field;auto with Geom.
auto with Geom.
replace ((A1 ** P + P ** B1) / P ** Y) with (- (P**A1 / P**Y) + P ** B1/ P**Y).
2:uniformize_dir_seg;field;auto with Geom.
rewrite (A6 P A1 Y Q H).
rewrite (A6 P B1 Y Q H).
uniformize_signed_areas.
field;solve_conds;auto with Geom.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
auto with Geom.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
assert (Col P A1 B1).
apply (col_trans_1 P Y A1 B1 H11);auto with Geom.
auto with Geom.
unfold Py4.
unfold on_foot in *.
use HA1.
use HB1.
unfold perp, Py4 in *.
IsoleVar (Py A1 P Y) H3.
IsoleVar (Py B1 P Y) H5.
rewrite H3, H5.
ring.
assert (T:=herron_qin P Q Y).
unfold perp, Py4 in H2.
basic_simpl.
replace (Py Q P Y) with 0 in T by (replace (Py Q P Y) with (Py Y P Q) by auto with Geom;auto).

*****
T : eq (Fmult (S P Q Y) (S P Q Y))\n (Fmult\n (Fdiv F1\n (Fmult\n (Fmult (Fmult (Fplus F1 F1) (Fplus F1 F1)) (Fplus F1 F1))\n (Fplus F1 F1)))\n (Fminus (Fmult (Py P Q P) (Py P Y P)) (Fmult F0 F0)))
H3 : eq (Fdiv (Py4 B P A Y) (Py Y P Y)) (Fdiv (S4 P A Q B) (S P Q Y))
HB1 : on_foot B1 B P Y
B1 : Point
HA1 : on_foot A1 A P Y
A1 : Point
H : not (eq P Y)
H4 : not (eq r F0)
H1 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H2 : eq (Py Y P Q) F0
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
eq (Py A B Y) (Fminus (Py A B P) (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) r) (S4 P A Q B)))
+++++
basic_simpl.
-----
Theorem elim_py_on_perp_d_right : forall A B P Q Y : Point, forall r: F, on_perp_d Y P Q r -> Py A B Y = Py A B P - (2+2) * r * S4 P A Q B.
Proof.
intros.
unfold on_perp_d in H.
use H.
assert (P<>Y).
intro;subst;basic_simpl.
IsoleVar (Py Y Q Y) H1.
replace (0/r) with 0 in H1 by (field;auto with Geom).
intuition.
elim (proj_ex A P Y H).
intros A1 HA1.
elim (proj_ex B P Y H).
intros B1 HB1.
assert (Py4 B P A Y / Py Y P Y = S4 P A Q B / S P Q Y).
replace (Py4 B P A Y) with (Py4 B1 P A1 Y).
assert (parallel A1 B1 P Y).
unfold on_foot in *.
use HA1.
use HB1.
cut (parallel Y P A1 B1).
auto with Geom.
unfold parallel, S4.
unfold Col in *.
uniformize_signed_areas.
rewrite H6, H9.
ring.
replace (Py Y P Y) with (Py P Y P) by auto with Geom.
rewrite <- (l3_10b A1 B1 P Y) by assumption.
replace (A1 ** B1 / P ** Y) with ((S4 P A1 Q B1) / (S P Q Y)).
replace (S4 P A1 Q B1) with (S4 P A Q B).
auto.
unfold S4.
unfold on_foot in *.
use HA1.
use HB1.
assert (parallel P Q B B1).
apply (perp_perp_para P Q Y P B B1);auto with Geom.
assert (parallel P Q A A1).
apply (perp_perp_para P Q Y P A A1);auto with Geom.
unfold parallel, S4 in *.
uniformize_signed_areas.
IsoleVar (S P A Q) H12;rewrite H12.
IsoleVar (S P B Q) H9;rewrite H9.
ring.
unfold S4.
replace (A1**B1) with (A1**P + P**B1).
2:apply chasles.
assert (~ (Col P Q Y)).
intro.
rewrite H5 in H1.
basic_simpl.
IsoleVar r H1.
replace (0/ Py P Q P) with 0 in H1.
intuition.
field;auto with Geom.
auto with Geom.
replace ((A1 ** P + P ** B1) / P ** Y) with (- (P**A1 / P**Y) + P ** B1/ P**Y).
2:uniformize_dir_seg;field;auto with Geom.
rewrite (A6 P A1 Y Q H).
rewrite (A6 P B1 Y Q H).
uniformize_signed_areas.
field;solve_conds;auto with Geom.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
auto with Geom.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
assert (Col P A1 B1).
apply (col_trans_1 P Y A1 B1 H11);auto with Geom.
auto with Geom.
unfold Py4.
unfold on_foot in *.
use HA1.
use HB1.
unfold perp, Py4 in *.
IsoleVar (Py A1 P Y) H3.
IsoleVar (Py B1 P Y) H5.
rewrite H3, H5.
ring.
assert (T:=herron_qin P Q Y).
unfold perp, Py4 in H2.
basic_simpl.
replace (Py Q P Y) with 0 in T by (replace (Py Q P Y) with (Py Y P Q) by auto with Geom;auto).
basic_simpl.

*****
T : eq (Fmult (S P Q Y) (S P Q Y))\n (Fmult\n (Fdiv F1\n (Fmult\n (Fmult (Fmult (Fplus F1 F1) (Fplus F1 F1)) (Fplus F1 F1))\n (Fplus F1 F1))) (Fmult (Py P Q P) (Py P Y P)))
H3 : eq (Fdiv (Py4 B P A Y) (Py Y P Y)) (Fdiv (S4 P A Q B) (S P Q Y))
HB1 : on_foot B1 B P Y
B1 : Point
HA1 : on_foot A1 A P Y
A1 : Point
H : not (eq P Y)
H4 : not (eq r F0)
H1 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H2 : eq (Py Y P Q) F0
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
eq (Py A B Y) (Fminus (Py A B P) (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) r) (S4 P A Q B)))
+++++
assert (Py Y P Y = (2*2)*r* S P Q Y).
-----
Theorem elim_py_on_perp_d_right : forall A B P Q Y : Point, forall r: F, on_perp_d Y P Q r -> Py A B Y = Py A B P - (2+2) * r * S4 P A Q B.
Proof.
intros.
unfold on_perp_d in H.
use H.
assert (P<>Y).
intro;subst;basic_simpl.
IsoleVar (Py Y Q Y) H1.
replace (0/r) with 0 in H1 by (field;auto with Geom).
intuition.
elim (proj_ex A P Y H).
intros A1 HA1.
elim (proj_ex B P Y H).
intros B1 HB1.
assert (Py4 B P A Y / Py Y P Y = S4 P A Q B / S P Q Y).
replace (Py4 B P A Y) with (Py4 B1 P A1 Y).
assert (parallel A1 B1 P Y).
unfold on_foot in *.
use HA1.
use HB1.
cut (parallel Y P A1 B1).
auto with Geom.
unfold parallel, S4.
unfold Col in *.
uniformize_signed_areas.
rewrite H6, H9.
ring.
replace (Py Y P Y) with (Py P Y P) by auto with Geom.
rewrite <- (l3_10b A1 B1 P Y) by assumption.
replace (A1 ** B1 / P ** Y) with ((S4 P A1 Q B1) / (S P Q Y)).
replace (S4 P A1 Q B1) with (S4 P A Q B).
auto.
unfold S4.
unfold on_foot in *.
use HA1.
use HB1.
assert (parallel P Q B B1).
apply (perp_perp_para P Q Y P B B1);auto with Geom.
assert (parallel P Q A A1).
apply (perp_perp_para P Q Y P A A1);auto with Geom.
unfold parallel, S4 in *.
uniformize_signed_areas.
IsoleVar (S P A Q) H12;rewrite H12.
IsoleVar (S P B Q) H9;rewrite H9.
ring.
unfold S4.
replace (A1**B1) with (A1**P + P**B1).
2:apply chasles.
assert (~ (Col P Q Y)).
intro.
rewrite H5 in H1.
basic_simpl.
IsoleVar r H1.
replace (0/ Py P Q P) with 0 in H1.
intuition.
field;auto with Geom.
auto with Geom.
replace ((A1 ** P + P ** B1) / P ** Y) with (- (P**A1 / P**Y) + P ** B1/ P**Y).
2:uniformize_dir_seg;field;auto with Geom.
rewrite (A6 P A1 Y Q H).
rewrite (A6 P B1 Y Q H).
uniformize_signed_areas.
field;solve_conds;auto with Geom.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
auto with Geom.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
assert (Col P A1 B1).
apply (col_trans_1 P Y A1 B1 H11);auto with Geom.
auto with Geom.
unfold Py4.
unfold on_foot in *.
use HA1.
use HB1.
unfold perp, Py4 in *.
IsoleVar (Py A1 P Y) H3.
IsoleVar (Py B1 P Y) H5.
rewrite H3, H5.
ring.
assert (T:=herron_qin P Q Y).
unfold perp, Py4 in H2.
basic_simpl.
replace (Py Q P Y) with 0 in T by (replace (Py Q P Y) with (Py Y P Q) by auto with Geom;auto).
basic_simpl.
assert (Py Y P Y = (2*2)*r* S P Q Y).

*****
T : eq (Fmult (S P Q Y) (S P Q Y))\n (Fmult\n (Fdiv F1\n (Fmult\n (Fmult (Fmult (Fplus F1 F1) (Fplus F1 F1)) (Fplus F1 F1))\n (Fplus F1 F1))) (Fmult (Py P Q P) (Py P Y P)))
H3 : eq (Fdiv (Py4 B P A Y) (Py Y P Y)) (Fdiv (S4 P A Q B) (S P Q Y))
HB1 : on_foot B1 B P Y
B1 : Point
HA1 : on_foot A1 A P Y
A1 : Point
H : not (eq P Y)
H4 : not (eq r F0)
H1 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H2 : eq (Py Y P Q) F0
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
eq (Py Y P Y) (Fmult (Fmult (Fmult (Fplus F1 F1) (Fplus F1 F1)) r) (S P Q Y))
+++++
IsoleVar r H1.
-----
Theorem elim_py_on_perp_d_right : forall A B P Q Y : Point, forall r: F, on_perp_d Y P Q r -> Py A B Y = Py A B P - (2+2) * r * S4 P A Q B.
Proof.
intros.
unfold on_perp_d in H.
use H.
assert (P<>Y).
intro;subst;basic_simpl.
IsoleVar (Py Y Q Y) H1.
replace (0/r) with 0 in H1 by (field;auto with Geom).
intuition.
elim (proj_ex A P Y H).
intros A1 HA1.
elim (proj_ex B P Y H).
intros B1 HB1.
assert (Py4 B P A Y / Py Y P Y = S4 P A Q B / S P Q Y).
replace (Py4 B P A Y) with (Py4 B1 P A1 Y).
assert (parallel A1 B1 P Y).
unfold on_foot in *.
use HA1.
use HB1.
cut (parallel Y P A1 B1).
auto with Geom.
unfold parallel, S4.
unfold Col in *.
uniformize_signed_areas.
rewrite H6, H9.
ring.
replace (Py Y P Y) with (Py P Y P) by auto with Geom.
rewrite <- (l3_10b A1 B1 P Y) by assumption.
replace (A1 ** B1 / P ** Y) with ((S4 P A1 Q B1) / (S P Q Y)).
replace (S4 P A1 Q B1) with (S4 P A Q B).
auto.
unfold S4.
unfold on_foot in *.
use HA1.
use HB1.
assert (parallel P Q B B1).
apply (perp_perp_para P Q Y P B B1);auto with Geom.
assert (parallel P Q A A1).
apply (perp_perp_para P Q Y P A A1);auto with Geom.
unfold parallel, S4 in *.
uniformize_signed_areas.
IsoleVar (S P A Q) H12;rewrite H12.
IsoleVar (S P B Q) H9;rewrite H9.
ring.
unfold S4.
replace (A1**B1) with (A1**P + P**B1).
2:apply chasles.
assert (~ (Col P Q Y)).
intro.
rewrite H5 in H1.
basic_simpl.
IsoleVar r H1.
replace (0/ Py P Q P) with 0 in H1.
intuition.
field;auto with Geom.
auto with Geom.
replace ((A1 ** P + P ** B1) / P ** Y) with (- (P**A1 / P**Y) + P ** B1/ P**Y).
2:uniformize_dir_seg;field;auto with Geom.
rewrite (A6 P A1 Y Q H).
rewrite (A6 P B1 Y Q H).
uniformize_signed_areas.
field;solve_conds;auto with Geom.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
auto with Geom.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
assert (Col P A1 B1).
apply (col_trans_1 P Y A1 B1 H11);auto with Geom.
auto with Geom.
unfold Py4.
unfold on_foot in *.
use HA1.
use HB1.
unfold perp, Py4 in *.
IsoleVar (Py A1 P Y) H3.
IsoleVar (Py B1 P Y) H5.
rewrite H3, H5.
ring.
assert (T:=herron_qin P Q Y).
unfold perp, Py4 in H2.
basic_simpl.
replace (Py Q P Y) with 0 in T by (replace (Py Q P Y) with (Py Y P Q) by auto with Geom;auto).
basic_simpl.
assert (Py Y P Y = (2*2)*r* S P Q Y).
IsoleVar r H1.

*****
H1 : eq r\n (Fdiv (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))\n (Py P Q P))
H5 : not (eq (Py P Q P) F0)
T : eq (Fmult (S P Q Y) (S P Q Y))\n (Fmult\n (Fdiv F1\n (Fmult\n (Fmult (Fmult (Fplus F1 F1) (Fplus F1 F1)) (Fplus F1 F1))\n (Fplus F1 F1))) (Fmult (Py P Q P) (Py P Y P)))
H3 : eq (Fdiv (Py4 B P A Y) (Py Y P Y)) (Fdiv (S4 P A Q B) (S P Q Y))
HB1 : on_foot B1 B P Y
B1 : Point
HA1 : on_foot A1 A P Y
A1 : Point
H : not (eq P Y)
H4 : not (eq r F0)
H2 : eq (Py Y P Q) F0
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
eq (Py Y P Y) (Fmult (Fmult (Fmult (Fplus F1 F1) (Fplus F1 F1)) r) (S P Q Y))
+++++
rewrite H1.
-----
Theorem elim_py_on_perp_d_right : forall A B P Q Y : Point, forall r: F, on_perp_d Y P Q r -> Py A B Y = Py A B P - (2+2) * r * S4 P A Q B.
Proof.
intros.
unfold on_perp_d in H.
use H.
assert (P<>Y).
intro;subst;basic_simpl.
IsoleVar (Py Y Q Y) H1.
replace (0/r) with 0 in H1 by (field;auto with Geom).
intuition.
elim (proj_ex A P Y H).
intros A1 HA1.
elim (proj_ex B P Y H).
intros B1 HB1.
assert (Py4 B P A Y / Py Y P Y = S4 P A Q B / S P Q Y).
replace (Py4 B P A Y) with (Py4 B1 P A1 Y).
assert (parallel A1 B1 P Y).
unfold on_foot in *.
use HA1.
use HB1.
cut (parallel Y P A1 B1).
auto with Geom.
unfold parallel, S4.
unfold Col in *.
uniformize_signed_areas.
rewrite H6, H9.
ring.
replace (Py Y P Y) with (Py P Y P) by auto with Geom.
rewrite <- (l3_10b A1 B1 P Y) by assumption.
replace (A1 ** B1 / P ** Y) with ((S4 P A1 Q B1) / (S P Q Y)).
replace (S4 P A1 Q B1) with (S4 P A Q B).
auto.
unfold S4.
unfold on_foot in *.
use HA1.
use HB1.
assert (parallel P Q B B1).
apply (perp_perp_para P Q Y P B B1);auto with Geom.
assert (parallel P Q A A1).
apply (perp_perp_para P Q Y P A A1);auto with Geom.
unfold parallel, S4 in *.
uniformize_signed_areas.
IsoleVar (S P A Q) H12;rewrite H12.
IsoleVar (S P B Q) H9;rewrite H9.
ring.
unfold S4.
replace (A1**B1) with (A1**P + P**B1).
2:apply chasles.
assert (~ (Col P Q Y)).
intro.
rewrite H5 in H1.
basic_simpl.
IsoleVar r H1.
replace (0/ Py P Q P) with 0 in H1.
intuition.
field;auto with Geom.
auto with Geom.
replace ((A1 ** P + P ** B1) / P ** Y) with (- (P**A1 / P**Y) + P ** B1/ P**Y).
2:uniformize_dir_seg;field;auto with Geom.
rewrite (A6 P A1 Y Q H).
rewrite (A6 P B1 Y Q H).
uniformize_signed_areas.
field;solve_conds;auto with Geom.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
auto with Geom.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
assert (Col P A1 B1).
apply (col_trans_1 P Y A1 B1 H11);auto with Geom.
auto with Geom.
unfold Py4.
unfold on_foot in *.
use HA1.
use HB1.
unfold perp, Py4 in *.
IsoleVar (Py A1 P Y) H3.
IsoleVar (Py B1 P Y) H5.
rewrite H3, H5.
ring.
assert (T:=herron_qin P Q Y).
unfold perp, Py4 in H2.
basic_simpl.
replace (Py Q P Y) with 0 in T by (replace (Py Q P Y) with (Py Y P Q) by auto with Geom;auto).
basic_simpl.
assert (Py Y P Y = (2*2)*r* S P Q Y).
IsoleVar r H1.
rewrite H1.

*****
H1 : eq r\n (Fdiv (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))\n (Py P Q P))
H5 : not (eq (Py P Q P) F0)
T : eq (Fmult (S P Q Y) (S P Q Y))\n (Fmult\n (Fdiv F1\n (Fmult\n (Fmult (Fmult (Fplus F1 F1) (Fplus F1 F1)) (Fplus F1 F1))\n (Fplus F1 F1))) (Fmult (Py P Q P) (Py P Y P)))
H3 : eq (Fdiv (Py4 B P A Y) (Py Y P Y)) (Fdiv (S4 P A Q B) (S P Q Y))
HB1 : on_foot B1 B P Y
B1 : Point
HA1 : on_foot A1 A P Y
A1 : Point
H : not (eq P Y)
H4 : not (eq r F0)
H2 : eq (Py Y P Q) F0
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
eq (Py Y P Y) (Fmult (Fmult (Fmult (Fplus F1 F1) (Fplus F1 F1)) (Fdiv (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y)) (Py P Q P))) (S P Q Y))
+++++
field_simplify_eq.
-----
Theorem elim_py_on_perp_d_right : forall A B P Q Y : Point, forall r: F, on_perp_d Y P Q r -> Py A B Y = Py A B P - (2+2) * r * S4 P A Q B.
Proof.
intros.
unfold on_perp_d in H.
use H.
assert (P<>Y).
intro;subst;basic_simpl.
IsoleVar (Py Y Q Y) H1.
replace (0/r) with 0 in H1 by (field;auto with Geom).
intuition.
elim (proj_ex A P Y H).
intros A1 HA1.
elim (proj_ex B P Y H).
intros B1 HB1.
assert (Py4 B P A Y / Py Y P Y = S4 P A Q B / S P Q Y).
replace (Py4 B P A Y) with (Py4 B1 P A1 Y).
assert (parallel A1 B1 P Y).
unfold on_foot in *.
use HA1.
use HB1.
cut (parallel Y P A1 B1).
auto with Geom.
unfold parallel, S4.
unfold Col in *.
uniformize_signed_areas.
rewrite H6, H9.
ring.
replace (Py Y P Y) with (Py P Y P) by auto with Geom.
rewrite <- (l3_10b A1 B1 P Y) by assumption.
replace (A1 ** B1 / P ** Y) with ((S4 P A1 Q B1) / (S P Q Y)).
replace (S4 P A1 Q B1) with (S4 P A Q B).
auto.
unfold S4.
unfold on_foot in *.
use HA1.
use HB1.
assert (parallel P Q B B1).
apply (perp_perp_para P Q Y P B B1);auto with Geom.
assert (parallel P Q A A1).
apply (perp_perp_para P Q Y P A A1);auto with Geom.
unfold parallel, S4 in *.
uniformize_signed_areas.
IsoleVar (S P A Q) H12;rewrite H12.
IsoleVar (S P B Q) H9;rewrite H9.
ring.
unfold S4.
replace (A1**B1) with (A1**P + P**B1).
2:apply chasles.
assert (~ (Col P Q Y)).
intro.
rewrite H5 in H1.
basic_simpl.
IsoleVar r H1.
replace (0/ Py P Q P) with 0 in H1.
intuition.
field;auto with Geom.
auto with Geom.
replace ((A1 ** P + P ** B1) / P ** Y) with (- (P**A1 / P**Y) + P ** B1/ P**Y).
2:uniformize_dir_seg;field;auto with Geom.
rewrite (A6 P A1 Y Q H).
rewrite (A6 P B1 Y Q H).
uniformize_signed_areas.
field;solve_conds;auto with Geom.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
auto with Geom.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
assert (Col P A1 B1).
apply (col_trans_1 P Y A1 B1 H11);auto with Geom.
auto with Geom.
unfold Py4.
unfold on_foot in *.
use HA1.
use HB1.
unfold perp, Py4 in *.
IsoleVar (Py A1 P Y) H3.
IsoleVar (Py B1 P Y) H5.
rewrite H3, H5.
ring.
assert (T:=herron_qin P Q Y).
unfold perp, Py4 in H2.
basic_simpl.
replace (Py Q P Y) with 0 in T by (replace (Py Q P Y) with (Py Y P Q) by auto with Geom;auto).
basic_simpl.
assert (Py Y P Y = (2*2)*r* S P Q Y).
IsoleVar r H1.
rewrite H1.
field_simplify_eq.

*****
H1 : eq r\n (Fdiv (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))\n (Py P Q P))
H5 : not (eq (Py P Q P) F0)
T : eq (Fmult (S P Q Y) (S P Q Y))\n (Fmult\n (Fdiv F1\n (Fmult\n (Fmult (Fmult (Fplus F1 F1) (Fplus F1 F1)) (Fplus F1 F1))\n (Fplus F1 F1))) (Fmult (Py P Q P) (Py P Y P)))
H3 : eq (Fdiv (Py4 B P A Y) (Py Y P Y)) (Fdiv (S4 P A Q B) (S P Q Y))
HB1 : on_foot B1 B P Y
B1 : Point
HA1 : on_foot A1 A P Y
A1 : Point
H : not (eq P Y)
H4 : not (eq r F0)
H2 : eq (Py Y P Q) F0
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
eq (Fmult (Py Y P Y) (Py P Q P)) (Fmult (Fmult (Fmult (Fplus F1 F1) (Fmult (Fplus F1 F1) (Fmult (Fplus F1 F1) (Fplus F1 F1)))) (S P Q Y)) (S P Q Y))
+++++
2:auto with Geom.
-----
Theorem elim_py_on_perp_d_right : forall A B P Q Y : Point, forall r: F, on_perp_d Y P Q r -> Py A B Y = Py A B P - (2+2) * r * S4 P A Q B.
Proof.
intros.
unfold on_perp_d in H.
use H.
assert (P<>Y).
intro;subst;basic_simpl.
IsoleVar (Py Y Q Y) H1.
replace (0/r) with 0 in H1 by (field;auto with Geom).
intuition.
elim (proj_ex A P Y H).
intros A1 HA1.
elim (proj_ex B P Y H).
intros B1 HB1.
assert (Py4 B P A Y / Py Y P Y = S4 P A Q B / S P Q Y).
replace (Py4 B P A Y) with (Py4 B1 P A1 Y).
assert (parallel A1 B1 P Y).
unfold on_foot in *.
use HA1.
use HB1.
cut (parallel Y P A1 B1).
auto with Geom.
unfold parallel, S4.
unfold Col in *.
uniformize_signed_areas.
rewrite H6, H9.
ring.
replace (Py Y P Y) with (Py P Y P) by auto with Geom.
rewrite <- (l3_10b A1 B1 P Y) by assumption.
replace (A1 ** B1 / P ** Y) with ((S4 P A1 Q B1) / (S P Q Y)).
replace (S4 P A1 Q B1) with (S4 P A Q B).
auto.
unfold S4.
unfold on_foot in *.
use HA1.
use HB1.
assert (parallel P Q B B1).
apply (perp_perp_para P Q Y P B B1);auto with Geom.
assert (parallel P Q A A1).
apply (perp_perp_para P Q Y P A A1);auto with Geom.
unfold parallel, S4 in *.
uniformize_signed_areas.
IsoleVar (S P A Q) H12;rewrite H12.
IsoleVar (S P B Q) H9;rewrite H9.
ring.
unfold S4.
replace (A1**B1) with (A1**P + P**B1).
2:apply chasles.
assert (~ (Col P Q Y)).
intro.
rewrite H5 in H1.
basic_simpl.
IsoleVar r H1.
replace (0/ Py P Q P) with 0 in H1.
intuition.
field;auto with Geom.
auto with Geom.
replace ((A1 ** P + P ** B1) / P ** Y) with (- (P**A1 / P**Y) + P ** B1/ P**Y).
2:uniformize_dir_seg;field;auto with Geom.
rewrite (A6 P A1 Y Q H).
rewrite (A6 P B1 Y Q H).
uniformize_signed_areas.
field;solve_conds;auto with Geom.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
auto with Geom.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
assert (Col P A1 B1).
apply (col_trans_1 P Y A1 B1 H11);auto with Geom.
auto with Geom.
unfold Py4.
unfold on_foot in *.
use HA1.
use HB1.
unfold perp, Py4 in *.
IsoleVar (Py A1 P Y) H3.
IsoleVar (Py B1 P Y) H5.
rewrite H3, H5.
ring.
assert (T:=herron_qin P Q Y).
unfold perp, Py4 in H2.
basic_simpl.
replace (Py Q P Y) with 0 in T by (replace (Py Q P Y) with (Py Y P Q) by auto with Geom;auto).
basic_simpl.
assert (Py Y P Y = (2*2)*r* S P Q Y).
IsoleVar r H1.
rewrite H1.
field_simplify_eq.
2:auto with Geom.

*****
H1 : eq r\n (Fdiv (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))\n (Py P Q P))
H5 : not (eq (Py P Q P) F0)
T : eq (Fmult (S P Q Y) (S P Q Y))\n (Fmult\n (Fdiv F1\n (Fmult\n (Fmult (Fmult (Fplus F1 F1) (Fplus F1 F1)) (Fplus F1 F1))\n (Fplus F1 F1))) (Fmult (Py P Q P) (Py P Y P)))
H3 : eq (Fdiv (Py4 B P A Y) (Py Y P Y)) (Fdiv (S4 P A Q B) (S P Q Y))
HB1 : on_foot B1 B P Y
B1 : Point
HA1 : on_foot A1 A P Y
A1 : Point
H : not (eq P Y)
H4 : not (eq r F0)
H2 : eq (Py Y P Q) F0
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
eq (Fmult (Py Y P Y) (Py P Q P)) (Fmult (Fmult (Fmult (Fplus F1 F1) (Fmult (Fplus F1 F1) (Fmult (Fplus F1 F1) (Fplus F1 F1)))) (S P Q Y)) (S P Q Y))
+++++
2:auto with Geom.
-----
Theorem elim_py_on_perp_d_right : forall A B P Q Y : Point, forall r: F, on_perp_d Y P Q r -> Py A B Y = Py A B P - (2+2) * r * S4 P A Q B.
Proof.
intros.
unfold on_perp_d in H.
use H.
assert (P<>Y).
intro;subst;basic_simpl.
IsoleVar (Py Y Q Y) H1.
replace (0/r) with 0 in H1 by (field;auto with Geom).
intuition.
elim (proj_ex A P Y H).
intros A1 HA1.
elim (proj_ex B P Y H).
intros B1 HB1.
assert (Py4 B P A Y / Py Y P Y = S4 P A Q B / S P Q Y).
replace (Py4 B P A Y) with (Py4 B1 P A1 Y).
assert (parallel A1 B1 P Y).
unfold on_foot in *.
use HA1.
use HB1.
cut (parallel Y P A1 B1).
auto with Geom.
unfold parallel, S4.
unfold Col in *.
uniformize_signed_areas.
rewrite H6, H9.
ring.
replace (Py Y P Y) with (Py P Y P) by auto with Geom.
rewrite <- (l3_10b A1 B1 P Y) by assumption.
replace (A1 ** B1 / P ** Y) with ((S4 P A1 Q B1) / (S P Q Y)).
replace (S4 P A1 Q B1) with (S4 P A Q B).
auto.
unfold S4.
unfold on_foot in *.
use HA1.
use HB1.
assert (parallel P Q B B1).
apply (perp_perp_para P Q Y P B B1);auto with Geom.
assert (parallel P Q A A1).
apply (perp_perp_para P Q Y P A A1);auto with Geom.
unfold parallel, S4 in *.
uniformize_signed_areas.
IsoleVar (S P A Q) H12;rewrite H12.
IsoleVar (S P B Q) H9;rewrite H9.
ring.
unfold S4.
replace (A1**B1) with (A1**P + P**B1).
2:apply chasles.
assert (~ (Col P Q Y)).
intro.
rewrite H5 in H1.
basic_simpl.
IsoleVar r H1.
replace (0/ Py P Q P) with 0 in H1.
intuition.
field;auto with Geom.
auto with Geom.
replace ((A1 ** P + P ** B1) / P ** Y) with (- (P**A1 / P**Y) + P ** B1/ P**Y).
2:uniformize_dir_seg;field;auto with Geom.
rewrite (A6 P A1 Y Q H).
rewrite (A6 P B1 Y Q H).
uniformize_signed_areas.
field;solve_conds;auto with Geom.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
auto with Geom.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
assert (Col P A1 B1).
apply (col_trans_1 P Y A1 B1 H11);auto with Geom.
auto with Geom.
unfold Py4.
unfold on_foot in *.
use HA1.
use HB1.
unfold perp, Py4 in *.
IsoleVar (Py A1 P Y) H3.
IsoleVar (Py B1 P Y) H5.
rewrite H3, H5.
ring.
assert (T:=herron_qin P Q Y).
unfold perp, Py4 in H2.
basic_simpl.
replace (Py Q P Y) with 0 in T by (replace (Py Q P Y) with (Py Y P Q) by auto with Geom;auto).
basic_simpl.
assert (Py Y P Y = (2*2)*r* S P Q Y).
IsoleVar r H1.
rewrite H1.
field_simplify_eq.
2:auto with Geom.
2:auto with Geom.

*****
H1 : eq r\n (Fdiv (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))\n (Py P Q P))
H5 : not (eq (Py P Q P) F0)
T : eq (Fmult (S P Q Y) (S P Q Y))\n (Fmult\n (Fdiv F1\n (Fmult\n (Fmult (Fmult (Fplus F1 F1) (Fplus F1 F1)) (Fplus F1 F1))\n (Fplus F1 F1))) (Fmult (Py P Q P) (Py P Y P)))
H3 : eq (Fdiv (Py4 B P A Y) (Py Y P Y)) (Fdiv (S4 P A Q B) (S P Q Y))
HB1 : on_foot B1 B P Y
B1 : Point
HA1 : on_foot A1 A P Y
A1 : Point
H : not (eq P Y)
H4 : not (eq r F0)
H2 : eq (Py Y P Q) F0
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
eq (Fmult (Py Y P Y) (Py P Q P)) (Fmult (Fmult (Fmult (Fplus F1 F1) (Fmult (Fplus F1 F1) (Fmult (Fplus F1 F1) (Fplus F1 F1)))) (S P Q Y)) (S P Q Y))
+++++
replace (2 * (2 * (2 * 2)) * S P Q Y * S P Q Y) with ((2 * (2 * (2 * 2))) * (S P Q Y * S P Q Y)) by ring.
-----
Theorem elim_py_on_perp_d_right : forall A B P Q Y : Point, forall r: F, on_perp_d Y P Q r -> Py A B Y = Py A B P - (2+2) * r * S4 P A Q B.
Proof.
intros.
unfold on_perp_d in H.
use H.
assert (P<>Y).
intro;subst;basic_simpl.
IsoleVar (Py Y Q Y) H1.
replace (0/r) with 0 in H1 by (field;auto with Geom).
intuition.
elim (proj_ex A P Y H).
intros A1 HA1.
elim (proj_ex B P Y H).
intros B1 HB1.
assert (Py4 B P A Y / Py Y P Y = S4 P A Q B / S P Q Y).
replace (Py4 B P A Y) with (Py4 B1 P A1 Y).
assert (parallel A1 B1 P Y).
unfold on_foot in *.
use HA1.
use HB1.
cut (parallel Y P A1 B1).
auto with Geom.
unfold parallel, S4.
unfold Col in *.
uniformize_signed_areas.
rewrite H6, H9.
ring.
replace (Py Y P Y) with (Py P Y P) by auto with Geom.
rewrite <- (l3_10b A1 B1 P Y) by assumption.
replace (A1 ** B1 / P ** Y) with ((S4 P A1 Q B1) / (S P Q Y)).
replace (S4 P A1 Q B1) with (S4 P A Q B).
auto.
unfold S4.
unfold on_foot in *.
use HA1.
use HB1.
assert (parallel P Q B B1).
apply (perp_perp_para P Q Y P B B1);auto with Geom.
assert (parallel P Q A A1).
apply (perp_perp_para P Q Y P A A1);auto with Geom.
unfold parallel, S4 in *.
uniformize_signed_areas.
IsoleVar (S P A Q) H12;rewrite H12.
IsoleVar (S P B Q) H9;rewrite H9.
ring.
unfold S4.
replace (A1**B1) with (A1**P + P**B1).
2:apply chasles.
assert (~ (Col P Q Y)).
intro.
rewrite H5 in H1.
basic_simpl.
IsoleVar r H1.
replace (0/ Py P Q P) with 0 in H1.
intuition.
field;auto with Geom.
auto with Geom.
replace ((A1 ** P + P ** B1) / P ** Y) with (- (P**A1 / P**Y) + P ** B1/ P**Y).
2:uniformize_dir_seg;field;auto with Geom.
rewrite (A6 P A1 Y Q H).
rewrite (A6 P B1 Y Q H).
uniformize_signed_areas.
field;solve_conds;auto with Geom.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
auto with Geom.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
assert (Col P A1 B1).
apply (col_trans_1 P Y A1 B1 H11);auto with Geom.
auto with Geom.
unfold Py4.
unfold on_foot in *.
use HA1.
use HB1.
unfold perp, Py4 in *.
IsoleVar (Py A1 P Y) H3.
IsoleVar (Py B1 P Y) H5.
rewrite H3, H5.
ring.
assert (T:=herron_qin P Q Y).
unfold perp, Py4 in H2.
basic_simpl.
replace (Py Q P Y) with 0 in T by (replace (Py Q P Y) with (Py Y P Q) by auto with Geom;auto).
basic_simpl.
assert (Py Y P Y = (2*2)*r* S P Q Y).
IsoleVar r H1.
rewrite H1.
field_simplify_eq.
2:auto with Geom.
2:auto with Geom.
replace (2 * (2 * (2 * 2)) * S P Q Y * S P Q Y) with ((2 * (2 * (2 * 2))) * (S P Q Y * S P Q Y)) by ring.

*****
H1 : eq r\n (Fdiv (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))\n (Py P Q P))
H5 : not (eq (Py P Q P) F0)
T : eq (Fmult (S P Q Y) (S P Q Y))\n (Fmult\n (Fdiv F1\n (Fmult\n (Fmult (Fmult (Fplus F1 F1) (Fplus F1 F1)) (Fplus F1 F1))\n (Fplus F1 F1))) (Fmult (Py P Q P) (Py P Y P)))
H3 : eq (Fdiv (Py4 B P A Y) (Py Y P Y)) (Fdiv (S4 P A Q B) (S P Q Y))
HB1 : on_foot B1 B P Y
B1 : Point
HA1 : on_foot A1 A P Y
A1 : Point
H : not (eq P Y)
H4 : not (eq r F0)
H2 : eq (Py Y P Q) F0
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
eq (Fmult (Py Y P Y) (Py P Q P)) (Fmult (Fmult (Fplus F1 F1) (Fmult (Fplus F1 F1) (Fmult (Fplus F1 F1) (Fplus F1 F1)))) (Fmult (S P Q Y) (S P Q Y)))
+++++
rewrite T.
-----
Theorem elim_py_on_perp_d_right : forall A B P Q Y : Point, forall r: F, on_perp_d Y P Q r -> Py A B Y = Py A B P - (2+2) * r * S4 P A Q B.
Proof.
intros.
unfold on_perp_d in H.
use H.
assert (P<>Y).
intro;subst;basic_simpl.
IsoleVar (Py Y Q Y) H1.
replace (0/r) with 0 in H1 by (field;auto with Geom).
intuition.
elim (proj_ex A P Y H).
intros A1 HA1.
elim (proj_ex B P Y H).
intros B1 HB1.
assert (Py4 B P A Y / Py Y P Y = S4 P A Q B / S P Q Y).
replace (Py4 B P A Y) with (Py4 B1 P A1 Y).
assert (parallel A1 B1 P Y).
unfold on_foot in *.
use HA1.
use HB1.
cut (parallel Y P A1 B1).
auto with Geom.
unfold parallel, S4.
unfold Col in *.
uniformize_signed_areas.
rewrite H6, H9.
ring.
replace (Py Y P Y) with (Py P Y P) by auto with Geom.
rewrite <- (l3_10b A1 B1 P Y) by assumption.
replace (A1 ** B1 / P ** Y) with ((S4 P A1 Q B1) / (S P Q Y)).
replace (S4 P A1 Q B1) with (S4 P A Q B).
auto.
unfold S4.
unfold on_foot in *.
use HA1.
use HB1.
assert (parallel P Q B B1).
apply (perp_perp_para P Q Y P B B1);auto with Geom.
assert (parallel P Q A A1).
apply (perp_perp_para P Q Y P A A1);auto with Geom.
unfold parallel, S4 in *.
uniformize_signed_areas.
IsoleVar (S P A Q) H12;rewrite H12.
IsoleVar (S P B Q) H9;rewrite H9.
ring.
unfold S4.
replace (A1**B1) with (A1**P + P**B1).
2:apply chasles.
assert (~ (Col P Q Y)).
intro.
rewrite H5 in H1.
basic_simpl.
IsoleVar r H1.
replace (0/ Py P Q P) with 0 in H1.
intuition.
field;auto with Geom.
auto with Geom.
replace ((A1 ** P + P ** B1) / P ** Y) with (- (P**A1 / P**Y) + P ** B1/ P**Y).
2:uniformize_dir_seg;field;auto with Geom.
rewrite (A6 P A1 Y Q H).
rewrite (A6 P B1 Y Q H).
uniformize_signed_areas.
field;solve_conds;auto with Geom.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
auto with Geom.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
assert (Col P A1 B1).
apply (col_trans_1 P Y A1 B1 H11);auto with Geom.
auto with Geom.
unfold Py4.
unfold on_foot in *.
use HA1.
use HB1.
unfold perp, Py4 in *.
IsoleVar (Py A1 P Y) H3.
IsoleVar (Py B1 P Y) H5.
rewrite H3, H5.
ring.
assert (T:=herron_qin P Q Y).
unfold perp, Py4 in H2.
basic_simpl.
replace (Py Q P Y) with 0 in T by (replace (Py Q P Y) with (Py Y P Q) by auto with Geom;auto).
basic_simpl.
assert (Py Y P Y = (2*2)*r* S P Q Y).
IsoleVar r H1.
rewrite H1.
field_simplify_eq.
2:auto with Geom.
2:auto with Geom.
replace (2 * (2 * (2 * 2)) * S P Q Y * S P Q Y) with ((2 * (2 * (2 * 2))) * (S P Q Y * S P Q Y)) by ring.
rewrite T.

*****
H1 : eq r\n (Fdiv (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))\n (Py P Q P))
H5 : not (eq (Py P Q P) F0)
T : eq (Fmult (S P Q Y) (S P Q Y))\n (Fmult\n (Fdiv F1\n (Fmult\n (Fmult (Fmult (Fplus F1 F1) (Fplus F1 F1)) (Fplus F1 F1))\n (Fplus F1 F1))) (Fmult (Py P Q P) (Py P Y P)))
H3 : eq (Fdiv (Py4 B P A Y) (Py Y P Y)) (Fdiv (S4 P A Q B) (S P Q Y))
HB1 : on_foot B1 B P Y
B1 : Point
HA1 : on_foot A1 A P Y
A1 : Point
H : not (eq P Y)
H4 : not (eq r F0)
H2 : eq (Py Y P Q) F0
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
eq (Fmult (Py Y P Y) (Py P Q P)) (Fmult (Fmult (Fplus F1 F1) (Fmult (Fplus F1 F1) (Fmult (Fplus F1 F1) (Fplus F1 F1)))) (Fmult (Fdiv F1 (Fmult (Fmult (Fmult (Fplus F1 F1) (Fplus F1 F1)) (Fplus F1 F1)) (Fplus F1 F1))) (Fmult (Py P Q P) (Py P Y P))))
+++++
uniformize_pys.
-----
Theorem elim_py_on_perp_d_right : forall A B P Q Y : Point, forall r: F, on_perp_d Y P Q r -> Py A B Y = Py A B P - (2+2) * r * S4 P A Q B.
Proof.
intros.
unfold on_perp_d in H.
use H.
assert (P<>Y).
intro;subst;basic_simpl.
IsoleVar (Py Y Q Y) H1.
replace (0/r) with 0 in H1 by (field;auto with Geom).
intuition.
elim (proj_ex A P Y H).
intros A1 HA1.
elim (proj_ex B P Y H).
intros B1 HB1.
assert (Py4 B P A Y / Py Y P Y = S4 P A Q B / S P Q Y).
replace (Py4 B P A Y) with (Py4 B1 P A1 Y).
assert (parallel A1 B1 P Y).
unfold on_foot in *.
use HA1.
use HB1.
cut (parallel Y P A1 B1).
auto with Geom.
unfold parallel, S4.
unfold Col in *.
uniformize_signed_areas.
rewrite H6, H9.
ring.
replace (Py Y P Y) with (Py P Y P) by auto with Geom.
rewrite <- (l3_10b A1 B1 P Y) by assumption.
replace (A1 ** B1 / P ** Y) with ((S4 P A1 Q B1) / (S P Q Y)).
replace (S4 P A1 Q B1) with (S4 P A Q B).
auto.
unfold S4.
unfold on_foot in *.
use HA1.
use HB1.
assert (parallel P Q B B1).
apply (perp_perp_para P Q Y P B B1);auto with Geom.
assert (parallel P Q A A1).
apply (perp_perp_para P Q Y P A A1);auto with Geom.
unfold parallel, S4 in *.
uniformize_signed_areas.
IsoleVar (S P A Q) H12;rewrite H12.
IsoleVar (S P B Q) H9;rewrite H9.
ring.
unfold S4.
replace (A1**B1) with (A1**P + P**B1).
2:apply chasles.
assert (~ (Col P Q Y)).
intro.
rewrite H5 in H1.
basic_simpl.
IsoleVar r H1.
replace (0/ Py P Q P) with 0 in H1.
intuition.
field;auto with Geom.
auto with Geom.
replace ((A1 ** P + P ** B1) / P ** Y) with (- (P**A1 / P**Y) + P ** B1/ P**Y).
2:uniformize_dir_seg;field;auto with Geom.
rewrite (A6 P A1 Y Q H).
rewrite (A6 P B1 Y Q H).
uniformize_signed_areas.
field;solve_conds;auto with Geom.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
auto with Geom.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
assert (Col P A1 B1).
apply (col_trans_1 P Y A1 B1 H11);auto with Geom.
auto with Geom.
unfold Py4.
unfold on_foot in *.
use HA1.
use HB1.
unfold perp, Py4 in *.
IsoleVar (Py A1 P Y) H3.
IsoleVar (Py B1 P Y) H5.
rewrite H3, H5.
ring.
assert (T:=herron_qin P Q Y).
unfold perp, Py4 in H2.
basic_simpl.
replace (Py Q P Y) with 0 in T by (replace (Py Q P Y) with (Py Y P Q) by auto with Geom;auto).
basic_simpl.
assert (Py Y P Y = (2*2)*r* S P Q Y).
IsoleVar r H1.
rewrite H1.
field_simplify_eq.
2:auto with Geom.
2:auto with Geom.
replace (2 * (2 * (2 * 2)) * S P Q Y * S P Q Y) with ((2 * (2 * (2 * 2))) * (S P Q Y * S P Q Y)) by ring.
rewrite T.
uniformize_pys.

*****
H1 : eq r\n (Fdiv (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))\n (Py P Q P))
H5 : not (eq (Py P Q P) F0)
T : eq (Fmult (S P Q Y) (S P Q Y))\n (Fmult\n (Fdiv F1\n (Fmult\n (Fmult (Fmult (Fplus F1 F1) (Fplus F1 F1)) (Fplus F1 F1))\n (Fplus F1 F1))) (Fmult (Py P Q P) (Py P Y P)))
H3 : eq (Fdiv (Py4 B P A Y) (Py P Y P)) (Fdiv (S4 P A Q B) (S P Q Y))
HB1 : on_foot B1 B P Y
B1 : Point
HA1 : on_foot A1 A P Y
A1 : Point
H : not (eq P Y)
H4 : not (eq r F0)
H2 : eq (Py Y P Q) F0
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
eq (Fmult (Py P Y P) (Py P Q P)) (Fmult (Fmult (Fplus F1 F1) (Fmult (Fplus F1 F1) (Fmult (Fplus F1 F1) (Fplus F1 F1)))) (Fmult (Fdiv F1 (Fmult (Fmult (Fmult (Fplus F1 F1) (Fplus F1 F1)) (Fplus F1 F1)) (Fplus F1 F1))) (Fmult (Py P Q P) (Py P Y P))))
+++++
field;solve_conds.
-----
Theorem elim_py_on_perp_d_right : forall A B P Q Y : Point, forall r: F, on_perp_d Y P Q r -> Py A B Y = Py A B P - (2+2) * r * S4 P A Q B.
Proof.
intros.
unfold on_perp_d in H.
use H.
assert (P<>Y).
intro;subst;basic_simpl.
IsoleVar (Py Y Q Y) H1.
replace (0/r) with 0 in H1 by (field;auto with Geom).
intuition.
elim (proj_ex A P Y H).
intros A1 HA1.
elim (proj_ex B P Y H).
intros B1 HB1.
assert (Py4 B P A Y / Py Y P Y = S4 P A Q B / S P Q Y).
replace (Py4 B P A Y) with (Py4 B1 P A1 Y).
assert (parallel A1 B1 P Y).
unfold on_foot in *.
use HA1.
use HB1.
cut (parallel Y P A1 B1).
auto with Geom.
unfold parallel, S4.
unfold Col in *.
uniformize_signed_areas.
rewrite H6, H9.
ring.
replace (Py Y P Y) with (Py P Y P) by auto with Geom.
rewrite <- (l3_10b A1 B1 P Y) by assumption.
replace (A1 ** B1 / P ** Y) with ((S4 P A1 Q B1) / (S P Q Y)).
replace (S4 P A1 Q B1) with (S4 P A Q B).
auto.
unfold S4.
unfold on_foot in *.
use HA1.
use HB1.
assert (parallel P Q B B1).
apply (perp_perp_para P Q Y P B B1);auto with Geom.
assert (parallel P Q A A1).
apply (perp_perp_para P Q Y P A A1);auto with Geom.
unfold parallel, S4 in *.
uniformize_signed_areas.
IsoleVar (S P A Q) H12;rewrite H12.
IsoleVar (S P B Q) H9;rewrite H9.
ring.
unfold S4.
replace (A1**B1) with (A1**P + P**B1).
2:apply chasles.
assert (~ (Col P Q Y)).
intro.
rewrite H5 in H1.
basic_simpl.
IsoleVar r H1.
replace (0/ Py P Q P) with 0 in H1.
intuition.
field;auto with Geom.
auto with Geom.
replace ((A1 ** P + P ** B1) / P ** Y) with (- (P**A1 / P**Y) + P ** B1/ P**Y).
2:uniformize_dir_seg;field;auto with Geom.
rewrite (A6 P A1 Y Q H).
rewrite (A6 P B1 Y Q H).
uniformize_signed_areas.
field;solve_conds;auto with Geom.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
auto with Geom.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
assert (Col P A1 B1).
apply (col_trans_1 P Y A1 B1 H11);auto with Geom.
auto with Geom.
unfold Py4.
unfold on_foot in *.
use HA1.
use HB1.
unfold perp, Py4 in *.
IsoleVar (Py A1 P Y) H3.
IsoleVar (Py B1 P Y) H5.
rewrite H3, H5.
ring.
assert (T:=herron_qin P Q Y).
unfold perp, Py4 in H2.
basic_simpl.
replace (Py Q P Y) with 0 in T by (replace (Py Q P Y) with (Py Y P Q) by auto with Geom;auto).
basic_simpl.
assert (Py Y P Y = (2*2)*r* S P Q Y).
IsoleVar r H1.
rewrite H1.
field_simplify_eq.
2:auto with Geom.
2:auto with Geom.
replace (2 * (2 * (2 * 2)) * S P Q Y * S P Q Y) with ((2 * (2 * (2 * 2))) * (S P Q Y * S P Q Y)) by ring.
rewrite T.
uniformize_pys.
field;solve_conds.

*****
H5 : eq (Py Y P Y)\n (Fmult (Fmult (Fmult (Fplus F1 F1) (Fplus F1 F1)) r) (S P Q Y))
T : eq (Fmult (S P Q Y) (S P Q Y))\n (Fmult\n (Fdiv F1\n (Fmult\n (Fmult (Fmult (Fplus F1 F1) (Fplus F1 F1)) (Fplus F1 F1))\n (Fplus F1 F1))) (Fmult (Py P Q P) (Py P Y P)))
H3 : eq (Fdiv (Py4 B P A Y) (Py Y P Y)) (Fdiv (S4 P A Q B) (S P Q Y))
HB1 : on_foot B1 B P Y
B1 : Point
HA1 : on_foot A1 A P Y
A1 : Point
H : not (eq P Y)
H4 : not (eq r F0)
H1 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H2 : eq (Py Y P Q) F0
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
eq (Py A B Y) (Fminus (Py A B P) (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) r) (S4 P A Q B)))
+++++
replace (Py A B Y) with (Py A B P - Py4 B P A Y).
-----
Theorem elim_py_on_perp_d_right : forall A B P Q Y : Point, forall r: F, on_perp_d Y P Q r -> Py A B Y = Py A B P - (2+2) * r * S4 P A Q B.
Proof.
intros.
unfold on_perp_d in H.
use H.
assert (P<>Y).
intro;subst;basic_simpl.
IsoleVar (Py Y Q Y) H1.
replace (0/r) with 0 in H1 by (field;auto with Geom).
intuition.
elim (proj_ex A P Y H).
intros A1 HA1.
elim (proj_ex B P Y H).
intros B1 HB1.
assert (Py4 B P A Y / Py Y P Y = S4 P A Q B / S P Q Y).
replace (Py4 B P A Y) with (Py4 B1 P A1 Y).
assert (parallel A1 B1 P Y).
unfold on_foot in *.
use HA1.
use HB1.
cut (parallel Y P A1 B1).
auto with Geom.
unfold parallel, S4.
unfold Col in *.
uniformize_signed_areas.
rewrite H6, H9.
ring.
replace (Py Y P Y) with (Py P Y P) by auto with Geom.
rewrite <- (l3_10b A1 B1 P Y) by assumption.
replace (A1 ** B1 / P ** Y) with ((S4 P A1 Q B1) / (S P Q Y)).
replace (S4 P A1 Q B1) with (S4 P A Q B).
auto.
unfold S4.
unfold on_foot in *.
use HA1.
use HB1.
assert (parallel P Q B B1).
apply (perp_perp_para P Q Y P B B1);auto with Geom.
assert (parallel P Q A A1).
apply (perp_perp_para P Q Y P A A1);auto with Geom.
unfold parallel, S4 in *.
uniformize_signed_areas.
IsoleVar (S P A Q) H12;rewrite H12.
IsoleVar (S P B Q) H9;rewrite H9.
ring.
unfold S4.
replace (A1**B1) with (A1**P + P**B1).
2:apply chasles.
assert (~ (Col P Q Y)).
intro.
rewrite H5 in H1.
basic_simpl.
IsoleVar r H1.
replace (0/ Py P Q P) with 0 in H1.
intuition.
field;auto with Geom.
auto with Geom.
replace ((A1 ** P + P ** B1) / P ** Y) with (- (P**A1 / P**Y) + P ** B1/ P**Y).
2:uniformize_dir_seg;field;auto with Geom.
rewrite (A6 P A1 Y Q H).
rewrite (A6 P B1 Y Q H).
uniformize_signed_areas.
field;solve_conds;auto with Geom.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
auto with Geom.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
assert (Col P A1 B1).
apply (col_trans_1 P Y A1 B1 H11);auto with Geom.
auto with Geom.
unfold Py4.
unfold on_foot in *.
use HA1.
use HB1.
unfold perp, Py4 in *.
IsoleVar (Py A1 P Y) H3.
IsoleVar (Py B1 P Y) H5.
rewrite H3, H5.
ring.
assert (T:=herron_qin P Q Y).
unfold perp, Py4 in H2.
basic_simpl.
replace (Py Q P Y) with 0 in T by (replace (Py Q P Y) with (Py Y P Q) by auto with Geom;auto).
basic_simpl.
assert (Py Y P Y = (2*2)*r* S P Q Y).
IsoleVar r H1.
rewrite H1.
field_simplify_eq.
2:auto with Geom.
2:auto with Geom.
replace (2 * (2 * (2 * 2)) * S P Q Y * S P Q Y) with ((2 * (2 * (2 * 2))) * (S P Q Y * S P Q Y)) by ring.
rewrite T.
uniformize_pys.
field;solve_conds.
replace (Py A B Y) with (Py A B P - Py4 B P A Y).

*****
H5 : eq (Py Y P Y)\n (Fmult (Fmult (Fmult (Fplus F1 F1) (Fplus F1 F1)) r) (S P Q Y))
T : eq (Fmult (S P Q Y) (S P Q Y))\n (Fmult\n (Fdiv F1\n (Fmult\n (Fmult (Fmult (Fplus F1 F1) (Fplus F1 F1)) (Fplus F1 F1))\n (Fplus F1 F1))) (Fmult (Py P Q P) (Py P Y P)))
H3 : eq (Fdiv (Py4 B P A Y) (Py Y P Y)) (Fdiv (S4 P A Q B) (S P Q Y))
HB1 : on_foot B1 B P Y
B1 : Point
HA1 : on_foot A1 A P Y
A1 : Point
H : not (eq P Y)
H4 : not (eq r F0)
H1 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H2 : eq (Py Y P Q) F0
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
eq (Fminus (Py A B P) (Py4 B P A Y)) (Fminus (Py A B P) (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) r) (S4 P A Q B)))
+++++
IsoleVar (Py4 B P A Y) H3.
-----
Theorem elim_py_on_perp_d_right : forall A B P Q Y : Point, forall r: F, on_perp_d Y P Q r -> Py A B Y = Py A B P - (2+2) * r * S4 P A Q B.
Proof.
intros.
unfold on_perp_d in H.
use H.
assert (P<>Y).
intro;subst;basic_simpl.
IsoleVar (Py Y Q Y) H1.
replace (0/r) with 0 in H1 by (field;auto with Geom).
intuition.
elim (proj_ex A P Y H).
intros A1 HA1.
elim (proj_ex B P Y H).
intros B1 HB1.
assert (Py4 B P A Y / Py Y P Y = S4 P A Q B / S P Q Y).
replace (Py4 B P A Y) with (Py4 B1 P A1 Y).
assert (parallel A1 B1 P Y).
unfold on_foot in *.
use HA1.
use HB1.
cut (parallel Y P A1 B1).
auto with Geom.
unfold parallel, S4.
unfold Col in *.
uniformize_signed_areas.
rewrite H6, H9.
ring.
replace (Py Y P Y) with (Py P Y P) by auto with Geom.
rewrite <- (l3_10b A1 B1 P Y) by assumption.
replace (A1 ** B1 / P ** Y) with ((S4 P A1 Q B1) / (S P Q Y)).
replace (S4 P A1 Q B1) with (S4 P A Q B).
auto.
unfold S4.
unfold on_foot in *.
use HA1.
use HB1.
assert (parallel P Q B B1).
apply (perp_perp_para P Q Y P B B1);auto with Geom.
assert (parallel P Q A A1).
apply (perp_perp_para P Q Y P A A1);auto with Geom.
unfold parallel, S4 in *.
uniformize_signed_areas.
IsoleVar (S P A Q) H12;rewrite H12.
IsoleVar (S P B Q) H9;rewrite H9.
ring.
unfold S4.
replace (A1**B1) with (A1**P + P**B1).
2:apply chasles.
assert (~ (Col P Q Y)).
intro.
rewrite H5 in H1.
basic_simpl.
IsoleVar r H1.
replace (0/ Py P Q P) with 0 in H1.
intuition.
field;auto with Geom.
auto with Geom.
replace ((A1 ** P + P ** B1) / P ** Y) with (- (P**A1 / P**Y) + P ** B1/ P**Y).
2:uniformize_dir_seg;field;auto with Geom.
rewrite (A6 P A1 Y Q H).
rewrite (A6 P B1 Y Q H).
uniformize_signed_areas.
field;solve_conds;auto with Geom.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
auto with Geom.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
assert (Col P A1 B1).
apply (col_trans_1 P Y A1 B1 H11);auto with Geom.
auto with Geom.
unfold Py4.
unfold on_foot in *.
use HA1.
use HB1.
unfold perp, Py4 in *.
IsoleVar (Py A1 P Y) H3.
IsoleVar (Py B1 P Y) H5.
rewrite H3, H5.
ring.
assert (T:=herron_qin P Q Y).
unfold perp, Py4 in H2.
basic_simpl.
replace (Py Q P Y) with 0 in T by (replace (Py Q P Y) with (Py Y P Q) by auto with Geom;auto).
basic_simpl.
assert (Py Y P Y = (2*2)*r* S P Q Y).
IsoleVar r H1.
rewrite H1.
field_simplify_eq.
2:auto with Geom.
2:auto with Geom.
replace (2 * (2 * (2 * 2)) * S P Q Y * S P Q Y) with ((2 * (2 * (2 * 2))) * (S P Q Y * S P Q Y)) by ring.
rewrite T.
uniformize_pys.
field;solve_conds.
replace (Py A B Y) with (Py A B P - Py4 B P A Y).
IsoleVar (Py4 B P A Y) H3.

*****
H3 : eq (Py4 B P A Y) (Fmult (Py Y P Y) (Fdiv (S4 P A Q B) (S P Q Y)))
H6 : not (eq (Py Y P Y) F0)
H5 : eq (Py Y P Y)\n (Fmult (Fmult (Fmult (Fplus F1 F1) (Fplus F1 F1)) r) (S P Q Y))
T : eq (Fmult (S P Q Y) (S P Q Y))\n (Fmult\n (Fdiv F1\n (Fmult\n (Fmult (Fmult (Fplus F1 F1) (Fplus F1 F1)) (Fplus F1 F1))\n (Fplus F1 F1))) (Fmult (Py P Q P) (Py P Y P)))
HB1 : on_foot B1 B P Y
B1 : Point
HA1 : on_foot A1 A P Y
A1 : Point
H : not (eq P Y)
H4 : not (eq r F0)
H1 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H2 : eq (Py Y P Q) F0
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
eq (Fminus (Py A B P) (Py4 B P A Y)) (Fminus (Py A B P) (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) r) (S4 P A Q B)))
+++++
rewrite H3.
-----
Theorem elim_py_on_perp_d_right : forall A B P Q Y : Point, forall r: F, on_perp_d Y P Q r -> Py A B Y = Py A B P - (2+2) * r * S4 P A Q B.
Proof.
intros.
unfold on_perp_d in H.
use H.
assert (P<>Y).
intro;subst;basic_simpl.
IsoleVar (Py Y Q Y) H1.
replace (0/r) with 0 in H1 by (field;auto with Geom).
intuition.
elim (proj_ex A P Y H).
intros A1 HA1.
elim (proj_ex B P Y H).
intros B1 HB1.
assert (Py4 B P A Y / Py Y P Y = S4 P A Q B / S P Q Y).
replace (Py4 B P A Y) with (Py4 B1 P A1 Y).
assert (parallel A1 B1 P Y).
unfold on_foot in *.
use HA1.
use HB1.
cut (parallel Y P A1 B1).
auto with Geom.
unfold parallel, S4.
unfold Col in *.
uniformize_signed_areas.
rewrite H6, H9.
ring.
replace (Py Y P Y) with (Py P Y P) by auto with Geom.
rewrite <- (l3_10b A1 B1 P Y) by assumption.
replace (A1 ** B1 / P ** Y) with ((S4 P A1 Q B1) / (S P Q Y)).
replace (S4 P A1 Q B1) with (S4 P A Q B).
auto.
unfold S4.
unfold on_foot in *.
use HA1.
use HB1.
assert (parallel P Q B B1).
apply (perp_perp_para P Q Y P B B1);auto with Geom.
assert (parallel P Q A A1).
apply (perp_perp_para P Q Y P A A1);auto with Geom.
unfold parallel, S4 in *.
uniformize_signed_areas.
IsoleVar (S P A Q) H12;rewrite H12.
IsoleVar (S P B Q) H9;rewrite H9.
ring.
unfold S4.
replace (A1**B1) with (A1**P + P**B1).
2:apply chasles.
assert (~ (Col P Q Y)).
intro.
rewrite H5 in H1.
basic_simpl.
IsoleVar r H1.
replace (0/ Py P Q P) with 0 in H1.
intuition.
field;auto with Geom.
auto with Geom.
replace ((A1 ** P + P ** B1) / P ** Y) with (- (P**A1 / P**Y) + P ** B1/ P**Y).
2:uniformize_dir_seg;field;auto with Geom.
rewrite (A6 P A1 Y Q H).
rewrite (A6 P B1 Y Q H).
uniformize_signed_areas.
field;solve_conds;auto with Geom.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
auto with Geom.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
assert (Col P A1 B1).
apply (col_trans_1 P Y A1 B1 H11);auto with Geom.
auto with Geom.
unfold Py4.
unfold on_foot in *.
use HA1.
use HB1.
unfold perp, Py4 in *.
IsoleVar (Py A1 P Y) H3.
IsoleVar (Py B1 P Y) H5.
rewrite H3, H5.
ring.
assert (T:=herron_qin P Q Y).
unfold perp, Py4 in H2.
basic_simpl.
replace (Py Q P Y) with 0 in T by (replace (Py Q P Y) with (Py Y P Q) by auto with Geom;auto).
basic_simpl.
assert (Py Y P Y = (2*2)*r* S P Q Y).
IsoleVar r H1.
rewrite H1.
field_simplify_eq.
2:auto with Geom.
2:auto with Geom.
replace (2 * (2 * (2 * 2)) * S P Q Y * S P Q Y) with ((2 * (2 * (2 * 2))) * (S P Q Y * S P Q Y)) by ring.
rewrite T.
uniformize_pys.
field;solve_conds.
replace (Py A B Y) with (Py A B P - Py4 B P A Y).
IsoleVar (Py4 B P A Y) H3.
rewrite H3.

*****
H3 : eq (Py4 B P A Y) (Fmult (Py Y P Y) (Fdiv (S4 P A Q B) (S P Q Y)))
H6 : not (eq (Py Y P Y) F0)
H5 : eq (Py Y P Y)\n (Fmult (Fmult (Fmult (Fplus F1 F1) (Fplus F1 F1)) r) (S P Q Y))
T : eq (Fmult (S P Q Y) (S P Q Y))\n (Fmult\n (Fdiv F1\n (Fmult\n (Fmult (Fmult (Fplus F1 F1) (Fplus F1 F1)) (Fplus F1 F1))\n (Fplus F1 F1))) (Fmult (Py P Q P) (Py P Y P)))
HB1 : on_foot B1 B P Y
B1 : Point
HA1 : on_foot A1 A P Y
A1 : Point
H : not (eq P Y)
H4 : not (eq r F0)
H1 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H2 : eq (Py Y P Q) F0
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
eq (Fminus (Py A B P) (Fmult (Py Y P Y) (Fdiv (S4 P A Q B) (S P Q Y)))) (Fminus (Py A B P) (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) r) (S4 P A Q B)))
+++++
rewrite H5.
-----
Theorem elim_py_on_perp_d_right : forall A B P Q Y : Point, forall r: F, on_perp_d Y P Q r -> Py A B Y = Py A B P - (2+2) * r * S4 P A Q B.
Proof.
intros.
unfold on_perp_d in H.
use H.
assert (P<>Y).
intro;subst;basic_simpl.
IsoleVar (Py Y Q Y) H1.
replace (0/r) with 0 in H1 by (field;auto with Geom).
intuition.
elim (proj_ex A P Y H).
intros A1 HA1.
elim (proj_ex B P Y H).
intros B1 HB1.
assert (Py4 B P A Y / Py Y P Y = S4 P A Q B / S P Q Y).
replace (Py4 B P A Y) with (Py4 B1 P A1 Y).
assert (parallel A1 B1 P Y).
unfold on_foot in *.
use HA1.
use HB1.
cut (parallel Y P A1 B1).
auto with Geom.
unfold parallel, S4.
unfold Col in *.
uniformize_signed_areas.
rewrite H6, H9.
ring.
replace (Py Y P Y) with (Py P Y P) by auto with Geom.
rewrite <- (l3_10b A1 B1 P Y) by assumption.
replace (A1 ** B1 / P ** Y) with ((S4 P A1 Q B1) / (S P Q Y)).
replace (S4 P A1 Q B1) with (S4 P A Q B).
auto.
unfold S4.
unfold on_foot in *.
use HA1.
use HB1.
assert (parallel P Q B B1).
apply (perp_perp_para P Q Y P B B1);auto with Geom.
assert (parallel P Q A A1).
apply (perp_perp_para P Q Y P A A1);auto with Geom.
unfold parallel, S4 in *.
uniformize_signed_areas.
IsoleVar (S P A Q) H12;rewrite H12.
IsoleVar (S P B Q) H9;rewrite H9.
ring.
unfold S4.
replace (A1**B1) with (A1**P + P**B1).
2:apply chasles.
assert (~ (Col P Q Y)).
intro.
rewrite H5 in H1.
basic_simpl.
IsoleVar r H1.
replace (0/ Py P Q P) with 0 in H1.
intuition.
field;auto with Geom.
auto with Geom.
replace ((A1 ** P + P ** B1) / P ** Y) with (- (P**A1 / P**Y) + P ** B1/ P**Y).
2:uniformize_dir_seg;field;auto with Geom.
rewrite (A6 P A1 Y Q H).
rewrite (A6 P B1 Y Q H).
uniformize_signed_areas.
field;solve_conds;auto with Geom.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
auto with Geom.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
assert (Col P A1 B1).
apply (col_trans_1 P Y A1 B1 H11);auto with Geom.
auto with Geom.
unfold Py4.
unfold on_foot in *.
use HA1.
use HB1.
unfold perp, Py4 in *.
IsoleVar (Py A1 P Y) H3.
IsoleVar (Py B1 P Y) H5.
rewrite H3, H5.
ring.
assert (T:=herron_qin P Q Y).
unfold perp, Py4 in H2.
basic_simpl.
replace (Py Q P Y) with 0 in T by (replace (Py Q P Y) with (Py Y P Q) by auto with Geom;auto).
basic_simpl.
assert (Py Y P Y = (2*2)*r* S P Q Y).
IsoleVar r H1.
rewrite H1.
field_simplify_eq.
2:auto with Geom.
2:auto with Geom.
replace (2 * (2 * (2 * 2)) * S P Q Y * S P Q Y) with ((2 * (2 * (2 * 2))) * (S P Q Y * S P Q Y)) by ring.
rewrite T.
uniformize_pys.
field;solve_conds.
replace (Py A B Y) with (Py A B P - Py4 B P A Y).
IsoleVar (Py4 B P A Y) H3.
rewrite H3.
rewrite H5.

*****
H3 : eq (Py4 B P A Y) (Fmult (Py Y P Y) (Fdiv (S4 P A Q B) (S P Q Y)))
H6 : not (eq (Py Y P Y) F0)
H5 : eq (Py Y P Y)\n (Fmult (Fmult (Fmult (Fplus F1 F1) (Fplus F1 F1)) r) (S P Q Y))
T : eq (Fmult (S P Q Y) (S P Q Y))\n (Fmult\n (Fdiv F1\n (Fmult\n (Fmult (Fmult (Fplus F1 F1) (Fplus F1 F1)) (Fplus F1 F1))\n (Fplus F1 F1))) (Fmult (Py P Q P) (Py P Y P)))
HB1 : on_foot B1 B P Y
B1 : Point
HA1 : on_foot A1 A P Y
A1 : Point
H : not (eq P Y)
H4 : not (eq r F0)
H1 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H2 : eq (Py Y P Q) F0
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
eq (Fminus (Py A B P) (Fmult (Fmult (Fmult (Fmult (Fplus F1 F1) (Fplus F1 F1)) r) (S P Q Y)) (Fdiv (S4 P A Q B) (S P Q Y)))) (Fminus (Py A B P) (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) r) (S4 P A Q B)))
+++++
field.
-----
Theorem elim_py_on_perp_d_right : forall A B P Q Y : Point, forall r: F, on_perp_d Y P Q r -> Py A B Y = Py A B P - (2+2) * r * S4 P A Q B.
Proof.
intros.
unfold on_perp_d in H.
use H.
assert (P<>Y).
intro;subst;basic_simpl.
IsoleVar (Py Y Q Y) H1.
replace (0/r) with 0 in H1 by (field;auto with Geom).
intuition.
elim (proj_ex A P Y H).
intros A1 HA1.
elim (proj_ex B P Y H).
intros B1 HB1.
assert (Py4 B P A Y / Py Y P Y = S4 P A Q B / S P Q Y).
replace (Py4 B P A Y) with (Py4 B1 P A1 Y).
assert (parallel A1 B1 P Y).
unfold on_foot in *.
use HA1.
use HB1.
cut (parallel Y P A1 B1).
auto with Geom.
unfold parallel, S4.
unfold Col in *.
uniformize_signed_areas.
rewrite H6, H9.
ring.
replace (Py Y P Y) with (Py P Y P) by auto with Geom.
rewrite <- (l3_10b A1 B1 P Y) by assumption.
replace (A1 ** B1 / P ** Y) with ((S4 P A1 Q B1) / (S P Q Y)).
replace (S4 P A1 Q B1) with (S4 P A Q B).
auto.
unfold S4.
unfold on_foot in *.
use HA1.
use HB1.
assert (parallel P Q B B1).
apply (perp_perp_para P Q Y P B B1);auto with Geom.
assert (parallel P Q A A1).
apply (perp_perp_para P Q Y P A A1);auto with Geom.
unfold parallel, S4 in *.
uniformize_signed_areas.
IsoleVar (S P A Q) H12;rewrite H12.
IsoleVar (S P B Q) H9;rewrite H9.
ring.
unfold S4.
replace (A1**B1) with (A1**P + P**B1).
2:apply chasles.
assert (~ (Col P Q Y)).
intro.
rewrite H5 in H1.
basic_simpl.
IsoleVar r H1.
replace (0/ Py P Q P) with 0 in H1.
intuition.
field;auto with Geom.
auto with Geom.
replace ((A1 ** P + P ** B1) / P ** Y) with (- (P**A1 / P**Y) + P ** B1/ P**Y).
2:uniformize_dir_seg;field;auto with Geom.
rewrite (A6 P A1 Y Q H).
rewrite (A6 P B1 Y Q H).
uniformize_signed_areas.
field;solve_conds;auto with Geom.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
auto with Geom.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
assert (Col P A1 B1).
apply (col_trans_1 P Y A1 B1 H11);auto with Geom.
auto with Geom.
unfold Py4.
unfold on_foot in *.
use HA1.
use HB1.
unfold perp, Py4 in *.
IsoleVar (Py A1 P Y) H3.
IsoleVar (Py B1 P Y) H5.
rewrite H3, H5.
ring.
assert (T:=herron_qin P Q Y).
unfold perp, Py4 in H2.
basic_simpl.
replace (Py Q P Y) with 0 in T by (replace (Py Q P Y) with (Py Y P Q) by auto with Geom;auto).
basic_simpl.
assert (Py Y P Y = (2*2)*r* S P Q Y).
IsoleVar r H1.
rewrite H1.
field_simplify_eq.
2:auto with Geom.
2:auto with Geom.
replace (2 * (2 * (2 * 2)) * S P Q Y * S P Q Y) with ((2 * (2 * (2 * 2))) * (S P Q Y * S P Q Y)) by ring.
rewrite T.
uniformize_pys.
field;solve_conds.
replace (Py A B Y) with (Py A B P - Py4 B P A Y).
IsoleVar (Py4 B P A Y) H3.
rewrite H3.
rewrite H5.
field.

*****
H3 : eq (Py4 B P A Y) (Fmult (Py Y P Y) (Fdiv (S4 P A Q B) (S P Q Y)))
H6 : not (eq (Py Y P Y) F0)
H5 : eq (Py Y P Y)\n (Fmult (Fmult (Fmult (Fplus F1 F1) (Fplus F1 F1)) r) (S P Q Y))
T : eq (Fmult (S P Q Y) (S P Q Y))\n (Fmult\n (Fdiv F1\n (Fmult\n (Fmult (Fmult (Fplus F1 F1) (Fplus F1 F1)) (Fplus F1 F1))\n (Fplus F1 F1))) (Fmult (Py P Q P) (Py P Y P)))
HB1 : on_foot B1 B P Y
B1 : Point
HA1 : on_foot A1 A P Y
A1 : Point
H : not (eq P Y)
H4 : not (eq r F0)
H1 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H2 : eq (Py Y P Q) F0
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
not (eq (S P Q Y) F0)
+++++
2:auto with Geom.
-----
Theorem elim_py_on_perp_d_right : forall A B P Q Y : Point, forall r: F, on_perp_d Y P Q r -> Py A B Y = Py A B P - (2+2) * r * S4 P A Q B.
Proof.
intros.
unfold on_perp_d in H.
use H.
assert (P<>Y).
intro;subst;basic_simpl.
IsoleVar (Py Y Q Y) H1.
replace (0/r) with 0 in H1 by (field;auto with Geom).
intuition.
elim (proj_ex A P Y H).
intros A1 HA1.
elim (proj_ex B P Y H).
intros B1 HB1.
assert (Py4 B P A Y / Py Y P Y = S4 P A Q B / S P Q Y).
replace (Py4 B P A Y) with (Py4 B1 P A1 Y).
assert (parallel A1 B1 P Y).
unfold on_foot in *.
use HA1.
use HB1.
cut (parallel Y P A1 B1).
auto with Geom.
unfold parallel, S4.
unfold Col in *.
uniformize_signed_areas.
rewrite H6, H9.
ring.
replace (Py Y P Y) with (Py P Y P) by auto with Geom.
rewrite <- (l3_10b A1 B1 P Y) by assumption.
replace (A1 ** B1 / P ** Y) with ((S4 P A1 Q B1) / (S P Q Y)).
replace (S4 P A1 Q B1) with (S4 P A Q B).
auto.
unfold S4.
unfold on_foot in *.
use HA1.
use HB1.
assert (parallel P Q B B1).
apply (perp_perp_para P Q Y P B B1);auto with Geom.
assert (parallel P Q A A1).
apply (perp_perp_para P Q Y P A A1);auto with Geom.
unfold parallel, S4 in *.
uniformize_signed_areas.
IsoleVar (S P A Q) H12;rewrite H12.
IsoleVar (S P B Q) H9;rewrite H9.
ring.
unfold S4.
replace (A1**B1) with (A1**P + P**B1).
2:apply chasles.
assert (~ (Col P Q Y)).
intro.
rewrite H5 in H1.
basic_simpl.
IsoleVar r H1.
replace (0/ Py P Q P) with 0 in H1.
intuition.
field;auto with Geom.
auto with Geom.
replace ((A1 ** P + P ** B1) / P ** Y) with (- (P**A1 / P**Y) + P ** B1/ P**Y).
2:uniformize_dir_seg;field;auto with Geom.
rewrite (A6 P A1 Y Q H).
rewrite (A6 P B1 Y Q H).
uniformize_signed_areas.
field;solve_conds;auto with Geom.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
auto with Geom.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
assert (Col P A1 B1).
apply (col_trans_1 P Y A1 B1 H11);auto with Geom.
auto with Geom.
unfold Py4.
unfold on_foot in *.
use HA1.
use HB1.
unfold perp, Py4 in *.
IsoleVar (Py A1 P Y) H3.
IsoleVar (Py B1 P Y) H5.
rewrite H3, H5.
ring.
assert (T:=herron_qin P Q Y).
unfold perp, Py4 in H2.
basic_simpl.
replace (Py Q P Y) with 0 in T by (replace (Py Q P Y) with (Py Y P Q) by auto with Geom;auto).
basic_simpl.
assert (Py Y P Y = (2*2)*r* S P Q Y).
IsoleVar r H1.
rewrite H1.
field_simplify_eq.
2:auto with Geom.
2:auto with Geom.
replace (2 * (2 * (2 * 2)) * S P Q Y * S P Q Y) with ((2 * (2 * (2 * 2))) * (S P Q Y * S P Q Y)) by ring.
rewrite T.
uniformize_pys.
field;solve_conds.
replace (Py A B Y) with (Py A B P - Py4 B P A Y).
IsoleVar (Py4 B P A Y) H3.
rewrite H3.
rewrite H5.
field.
2:auto with Geom.

*****
H3 : eq (Py4 B P A Y) (Fmult (Py Y P Y) (Fdiv (S4 P A Q B) (S P Q Y)))
H6 : not (eq (Py Y P Y) F0)
H5 : eq (Py Y P Y)\n (Fmult (Fmult (Fmult (Fplus F1 F1) (Fplus F1 F1)) r) (S P Q Y))
T : eq (Fmult (S P Q Y) (S P Q Y))\n (Fmult\n (Fdiv F1\n (Fmult\n (Fmult (Fmult (Fplus F1 F1) (Fplus F1 F1)) (Fplus F1 F1))\n (Fplus F1 F1))) (Fmult (Py P Q P) (Py P Y P)))
HB1 : on_foot B1 B P Y
B1 : Point
HA1 : on_foot A1 A P Y
A1 : Point
H : not (eq P Y)
H4 : not (eq r F0)
H1 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H2 : eq (Py Y P Q) F0
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
not (eq (S P Q Y) F0)
+++++
intro.
-----
Theorem elim_py_on_perp_d_right : forall A B P Q Y : Point, forall r: F, on_perp_d Y P Q r -> Py A B Y = Py A B P - (2+2) * r * S4 P A Q B.
Proof.
intros.
unfold on_perp_d in H.
use H.
assert (P<>Y).
intro;subst;basic_simpl.
IsoleVar (Py Y Q Y) H1.
replace (0/r) with 0 in H1 by (field;auto with Geom).
intuition.
elim (proj_ex A P Y H).
intros A1 HA1.
elim (proj_ex B P Y H).
intros B1 HB1.
assert (Py4 B P A Y / Py Y P Y = S4 P A Q B / S P Q Y).
replace (Py4 B P A Y) with (Py4 B1 P A1 Y).
assert (parallel A1 B1 P Y).
unfold on_foot in *.
use HA1.
use HB1.
cut (parallel Y P A1 B1).
auto with Geom.
unfold parallel, S4.
unfold Col in *.
uniformize_signed_areas.
rewrite H6, H9.
ring.
replace (Py Y P Y) with (Py P Y P) by auto with Geom.
rewrite <- (l3_10b A1 B1 P Y) by assumption.
replace (A1 ** B1 / P ** Y) with ((S4 P A1 Q B1) / (S P Q Y)).
replace (S4 P A1 Q B1) with (S4 P A Q B).
auto.
unfold S4.
unfold on_foot in *.
use HA1.
use HB1.
assert (parallel P Q B B1).
apply (perp_perp_para P Q Y P B B1);auto with Geom.
assert (parallel P Q A A1).
apply (perp_perp_para P Q Y P A A1);auto with Geom.
unfold parallel, S4 in *.
uniformize_signed_areas.
IsoleVar (S P A Q) H12;rewrite H12.
IsoleVar (S P B Q) H9;rewrite H9.
ring.
unfold S4.
replace (A1**B1) with (A1**P + P**B1).
2:apply chasles.
assert (~ (Col P Q Y)).
intro.
rewrite H5 in H1.
basic_simpl.
IsoleVar r H1.
replace (0/ Py P Q P) with 0 in H1.
intuition.
field;auto with Geom.
auto with Geom.
replace ((A1 ** P + P ** B1) / P ** Y) with (- (P**A1 / P**Y) + P ** B1/ P**Y).
2:uniformize_dir_seg;field;auto with Geom.
rewrite (A6 P A1 Y Q H).
rewrite (A6 P B1 Y Q H).
uniformize_signed_areas.
field;solve_conds;auto with Geom.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
auto with Geom.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
assert (Col P A1 B1).
apply (col_trans_1 P Y A1 B1 H11);auto with Geom.
auto with Geom.
unfold Py4.
unfold on_foot in *.
use HA1.
use HB1.
unfold perp, Py4 in *.
IsoleVar (Py A1 P Y) H3.
IsoleVar (Py B1 P Y) H5.
rewrite H3, H5.
ring.
assert (T:=herron_qin P Q Y).
unfold perp, Py4 in H2.
basic_simpl.
replace (Py Q P Y) with 0 in T by (replace (Py Q P Y) with (Py Y P Q) by auto with Geom;auto).
basic_simpl.
assert (Py Y P Y = (2*2)*r* S P Q Y).
IsoleVar r H1.
rewrite H1.
field_simplify_eq.
2:auto with Geom.
2:auto with Geom.
replace (2 * (2 * (2 * 2)) * S P Q Y * S P Q Y) with ((2 * (2 * (2 * 2))) * (S P Q Y * S P Q Y)) by ring.
rewrite T.
uniformize_pys.
field;solve_conds.
replace (Py A B Y) with (Py A B P - Py4 B P A Y).
IsoleVar (Py4 B P A Y) H3.
rewrite H3.
rewrite H5.
field.
2:auto with Geom.
intro.

*****
H7 : eq (S P Q Y) F0
H3 : eq (Py4 B P A Y) (Fmult (Py Y P Y) (Fdiv (S4 P A Q B) (S P Q Y)))
H6 : not (eq (Py Y P Y) F0)
H5 : eq (Py Y P Y)\n (Fmult (Fmult (Fmult (Fplus F1 F1) (Fplus F1 F1)) r) (S P Q Y))
T : eq (Fmult (S P Q Y) (S P Q Y))\n (Fmult\n (Fdiv F1\n (Fmult\n (Fmult (Fmult (Fplus F1 F1) (Fplus F1 F1)) (Fplus F1 F1))\n (Fplus F1 F1))) (Fmult (Py P Q P) (Py P Y P)))
HB1 : on_foot B1 B P Y
B1 : Point
HA1 : on_foot A1 A P Y
A1 : Point
H : not (eq P Y)
H4 : not (eq r F0)
H1 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H2 : eq (Py Y P Q) F0
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
False
+++++
assert (Col Y P Q) by auto with Geom.
-----
Theorem elim_py_on_perp_d_right : forall A B P Q Y : Point, forall r: F, on_perp_d Y P Q r -> Py A B Y = Py A B P - (2+2) * r * S4 P A Q B.
Proof.
intros.
unfold on_perp_d in H.
use H.
assert (P<>Y).
intro;subst;basic_simpl.
IsoleVar (Py Y Q Y) H1.
replace (0/r) with 0 in H1 by (field;auto with Geom).
intuition.
elim (proj_ex A P Y H).
intros A1 HA1.
elim (proj_ex B P Y H).
intros B1 HB1.
assert (Py4 B P A Y / Py Y P Y = S4 P A Q B / S P Q Y).
replace (Py4 B P A Y) with (Py4 B1 P A1 Y).
assert (parallel A1 B1 P Y).
unfold on_foot in *.
use HA1.
use HB1.
cut (parallel Y P A1 B1).
auto with Geom.
unfold parallel, S4.
unfold Col in *.
uniformize_signed_areas.
rewrite H6, H9.
ring.
replace (Py Y P Y) with (Py P Y P) by auto with Geom.
rewrite <- (l3_10b A1 B1 P Y) by assumption.
replace (A1 ** B1 / P ** Y) with ((S4 P A1 Q B1) / (S P Q Y)).
replace (S4 P A1 Q B1) with (S4 P A Q B).
auto.
unfold S4.
unfold on_foot in *.
use HA1.
use HB1.
assert (parallel P Q B B1).
apply (perp_perp_para P Q Y P B B1);auto with Geom.
assert (parallel P Q A A1).
apply (perp_perp_para P Q Y P A A1);auto with Geom.
unfold parallel, S4 in *.
uniformize_signed_areas.
IsoleVar (S P A Q) H12;rewrite H12.
IsoleVar (S P B Q) H9;rewrite H9.
ring.
unfold S4.
replace (A1**B1) with (A1**P + P**B1).
2:apply chasles.
assert (~ (Col P Q Y)).
intro.
rewrite H5 in H1.
basic_simpl.
IsoleVar r H1.
replace (0/ Py P Q P) with 0 in H1.
intuition.
field;auto with Geom.
auto with Geom.
replace ((A1 ** P + P ** B1) / P ** Y) with (- (P**A1 / P**Y) + P ** B1/ P**Y).
2:uniformize_dir_seg;field;auto with Geom.
rewrite (A6 P A1 Y Q H).
rewrite (A6 P B1 Y Q H).
uniformize_signed_areas.
field;solve_conds;auto with Geom.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
auto with Geom.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
assert (Col P A1 B1).
apply (col_trans_1 P Y A1 B1 H11);auto with Geom.
auto with Geom.
unfold Py4.
unfold on_foot in *.
use HA1.
use HB1.
unfold perp, Py4 in *.
IsoleVar (Py A1 P Y) H3.
IsoleVar (Py B1 P Y) H5.
rewrite H3, H5.
ring.
assert (T:=herron_qin P Q Y).
unfold perp, Py4 in H2.
basic_simpl.
replace (Py Q P Y) with 0 in T by (replace (Py Q P Y) with (Py Y P Q) by auto with Geom;auto).
basic_simpl.
assert (Py Y P Y = (2*2)*r* S P Q Y).
IsoleVar r H1.
rewrite H1.
field_simplify_eq.
2:auto with Geom.
2:auto with Geom.
replace (2 * (2 * (2 * 2)) * S P Q Y * S P Q Y) with ((2 * (2 * (2 * 2))) * (S P Q Y * S P Q Y)) by ring.
rewrite T.
uniformize_pys.
field;solve_conds.
replace (Py A B Y) with (Py A B P - Py4 B P A Y).
IsoleVar (Py4 B P A Y) H3.
rewrite H3.
rewrite H5.
field.
2:auto with Geom.
intro.
assert (Col Y P Q) by auto with Geom.

*****
H8 : Col Y P Q
H7 : eq (S P Q Y) F0
H3 : eq (Py4 B P A Y) (Fmult (Py Y P Y) (Fdiv (S4 P A Q B) (S P Q Y)))
H6 : not (eq (Py Y P Y) F0)
H5 : eq (Py Y P Y)\n (Fmult (Fmult (Fmult (Fplus F1 F1) (Fplus F1 F1)) r) (S P Q Y))
T : eq (Fmult (S P Q Y) (S P Q Y))\n (Fmult\n (Fdiv F1\n (Fmult\n (Fmult (Fmult (Fplus F1 F1) (Fplus F1 F1)) (Fplus F1 F1))\n (Fplus F1 F1))) (Fmult (Py P Q P) (Py P Y P)))
HB1 : on_foot B1 B P Y
B1 : Point
HA1 : on_foot A1 A P Y
A1 : Point
H : not (eq P Y)
H4 : not (eq r F0)
H1 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H2 : eq (Py Y P Q) F0
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
False
+++++
rewrite col_pyth in H2 by assumption.
-----
Theorem elim_py_on_perp_d_right : forall A B P Q Y : Point, forall r: F, on_perp_d Y P Q r -> Py A B Y = Py A B P - (2+2) * r * S4 P A Q B.
Proof.
intros.
unfold on_perp_d in H.
use H.
assert (P<>Y).
intro;subst;basic_simpl.
IsoleVar (Py Y Q Y) H1.
replace (0/r) with 0 in H1 by (field;auto with Geom).
intuition.
elim (proj_ex A P Y H).
intros A1 HA1.
elim (proj_ex B P Y H).
intros B1 HB1.
assert (Py4 B P A Y / Py Y P Y = S4 P A Q B / S P Q Y).
replace (Py4 B P A Y) with (Py4 B1 P A1 Y).
assert (parallel A1 B1 P Y).
unfold on_foot in *.
use HA1.
use HB1.
cut (parallel Y P A1 B1).
auto with Geom.
unfold parallel, S4.
unfold Col in *.
uniformize_signed_areas.
rewrite H6, H9.
ring.
replace (Py Y P Y) with (Py P Y P) by auto with Geom.
rewrite <- (l3_10b A1 B1 P Y) by assumption.
replace (A1 ** B1 / P ** Y) with ((S4 P A1 Q B1) / (S P Q Y)).
replace (S4 P A1 Q B1) with (S4 P A Q B).
auto.
unfold S4.
unfold on_foot in *.
use HA1.
use HB1.
assert (parallel P Q B B1).
apply (perp_perp_para P Q Y P B B1);auto with Geom.
assert (parallel P Q A A1).
apply (perp_perp_para P Q Y P A A1);auto with Geom.
unfold parallel, S4 in *.
uniformize_signed_areas.
IsoleVar (S P A Q) H12;rewrite H12.
IsoleVar (S P B Q) H9;rewrite H9.
ring.
unfold S4.
replace (A1**B1) with (A1**P + P**B1).
2:apply chasles.
assert (~ (Col P Q Y)).
intro.
rewrite H5 in H1.
basic_simpl.
IsoleVar r H1.
replace (0/ Py P Q P) with 0 in H1.
intuition.
field;auto with Geom.
auto with Geom.
replace ((A1 ** P + P ** B1) / P ** Y) with (- (P**A1 / P**Y) + P ** B1/ P**Y).
2:uniformize_dir_seg;field;auto with Geom.
rewrite (A6 P A1 Y Q H).
rewrite (A6 P B1 Y Q H).
uniformize_signed_areas.
field;solve_conds;auto with Geom.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
auto with Geom.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
assert (Col P A1 B1).
apply (col_trans_1 P Y A1 B1 H11);auto with Geom.
auto with Geom.
unfold Py4.
unfold on_foot in *.
use HA1.
use HB1.
unfold perp, Py4 in *.
IsoleVar (Py A1 P Y) H3.
IsoleVar (Py B1 P Y) H5.
rewrite H3, H5.
ring.
assert (T:=herron_qin P Q Y).
unfold perp, Py4 in H2.
basic_simpl.
replace (Py Q P Y) with 0 in T by (replace (Py Q P Y) with (Py Y P Q) by auto with Geom;auto).
basic_simpl.
assert (Py Y P Y = (2*2)*r* S P Q Y).
IsoleVar r H1.
rewrite H1.
field_simplify_eq.
2:auto with Geom.
2:auto with Geom.
replace (2 * (2 * (2 * 2)) * S P Q Y * S P Q Y) with ((2 * (2 * (2 * 2))) * (S P Q Y * S P Q Y)) by ring.
rewrite T.
uniformize_pys.
field;solve_conds.
replace (Py A B Y) with (Py A B P - Py4 B P A Y).
IsoleVar (Py4 B P A Y) H3.
rewrite H3.
rewrite H5.
field.
2:auto with Geom.
intro.
assert (Col Y P Q) by auto with Geom.
rewrite col_pyth in H2 by assumption.

*****
H8 : Col Y P Q
H7 : eq (S P Q Y) F0
H3 : eq (Py4 B P A Y) (Fmult (Py Y P Y) (Fdiv (S4 P A Q B) (S P Q Y)))
H6 : not (eq (Py Y P Y) F0)
H5 : eq (Py Y P Y)\n (Fmult (Fmult (Fmult (Fplus F1 F1) (Fplus F1 F1)) r) (S P Q Y))
T : eq (Fmult (S P Q Y) (S P Q Y))\n (Fmult\n (Fdiv F1\n (Fmult\n (Fmult (Fmult (Fplus F1 F1) (Fplus F1 F1)) (Fplus F1 F1))\n (Fplus F1 F1))) (Fmult (Py P Q P) (Py P Y P)))
HB1 : on_foot B1 B P Y
B1 : Point
HA1 : on_foot A1 A P Y
A1 : Point
H : not (eq P Y)
H4 : not (eq r F0)
H1 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H2 : eq (Fmult (Fmult (Fplus F1 F1) (DSeg P Y)) (DSeg P Q)) F0
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
False
+++++
IsoleVar (P**Q) H2.
-----
Theorem elim_py_on_perp_d_right : forall A B P Q Y : Point, forall r: F, on_perp_d Y P Q r -> Py A B Y = Py A B P - (2+2) * r * S4 P A Q B.
Proof.
intros.
unfold on_perp_d in H.
use H.
assert (P<>Y).
intro;subst;basic_simpl.
IsoleVar (Py Y Q Y) H1.
replace (0/r) with 0 in H1 by (field;auto with Geom).
intuition.
elim (proj_ex A P Y H).
intros A1 HA1.
elim (proj_ex B P Y H).
intros B1 HB1.
assert (Py4 B P A Y / Py Y P Y = S4 P A Q B / S P Q Y).
replace (Py4 B P A Y) with (Py4 B1 P A1 Y).
assert (parallel A1 B1 P Y).
unfold on_foot in *.
use HA1.
use HB1.
cut (parallel Y P A1 B1).
auto with Geom.
unfold parallel, S4.
unfold Col in *.
uniformize_signed_areas.
rewrite H6, H9.
ring.
replace (Py Y P Y) with (Py P Y P) by auto with Geom.
rewrite <- (l3_10b A1 B1 P Y) by assumption.
replace (A1 ** B1 / P ** Y) with ((S4 P A1 Q B1) / (S P Q Y)).
replace (S4 P A1 Q B1) with (S4 P A Q B).
auto.
unfold S4.
unfold on_foot in *.
use HA1.
use HB1.
assert (parallel P Q B B1).
apply (perp_perp_para P Q Y P B B1);auto with Geom.
assert (parallel P Q A A1).
apply (perp_perp_para P Q Y P A A1);auto with Geom.
unfold parallel, S4 in *.
uniformize_signed_areas.
IsoleVar (S P A Q) H12;rewrite H12.
IsoleVar (S P B Q) H9;rewrite H9.
ring.
unfold S4.
replace (A1**B1) with (A1**P + P**B1).
2:apply chasles.
assert (~ (Col P Q Y)).
intro.
rewrite H5 in H1.
basic_simpl.
IsoleVar r H1.
replace (0/ Py P Q P) with 0 in H1.
intuition.
field;auto with Geom.
auto with Geom.
replace ((A1 ** P + P ** B1) / P ** Y) with (- (P**A1 / P**Y) + P ** B1/ P**Y).
2:uniformize_dir_seg;field;auto with Geom.
rewrite (A6 P A1 Y Q H).
rewrite (A6 P B1 Y Q H).
uniformize_signed_areas.
field;solve_conds;auto with Geom.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
auto with Geom.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
assert (Col P A1 B1).
apply (col_trans_1 P Y A1 B1 H11);auto with Geom.
auto with Geom.
unfold Py4.
unfold on_foot in *.
use HA1.
use HB1.
unfold perp, Py4 in *.
IsoleVar (Py A1 P Y) H3.
IsoleVar (Py B1 P Y) H5.
rewrite H3, H5.
ring.
assert (T:=herron_qin P Q Y).
unfold perp, Py4 in H2.
basic_simpl.
replace (Py Q P Y) with 0 in T by (replace (Py Q P Y) with (Py Y P Q) by auto with Geom;auto).
basic_simpl.
assert (Py Y P Y = (2*2)*r* S P Q Y).
IsoleVar r H1.
rewrite H1.
field_simplify_eq.
2:auto with Geom.
2:auto with Geom.
replace (2 * (2 * (2 * 2)) * S P Q Y * S P Q Y) with ((2 * (2 * (2 * 2))) * (S P Q Y * S P Q Y)) by ring.
rewrite T.
uniformize_pys.
field;solve_conds.
replace (Py A B Y) with (Py A B P - Py4 B P A Y).
IsoleVar (Py4 B P A Y) H3.
rewrite H3.
rewrite H5.
field.
2:auto with Geom.
intro.
assert (Col Y P Q) by auto with Geom.
rewrite col_pyth in H2 by assumption.
IsoleVar (P**Q) H2.

*****
H2 : eq (DSeg P Q) (Fdiv F0 (Fmult (Fplus F1 F1) (DSeg P Y)))
H9 : not (eq (Fmult (Fplus F1 F1) (DSeg P Y)) F0)
H8 : Col Y P Q
H7 : eq (S P Q Y) F0
H3 : eq (Py4 B P A Y) (Fmult (Py Y P Y) (Fdiv (S4 P A Q B) (S P Q Y)))
H6 : not (eq (Py Y P Y) F0)
H5 : eq (Py Y P Y)\n (Fmult (Fmult (Fmult (Fplus F1 F1) (Fplus F1 F1)) r) (S P Q Y))
T : eq (Fmult (S P Q Y) (S P Q Y))\n (Fmult\n (Fdiv F1\n (Fmult\n (Fmult (Fmult (Fplus F1 F1) (Fplus F1 F1)) (Fplus F1 F1))\n (Fplus F1 F1))) (Fmult (Py P Q P) (Py P Y P)))
HB1 : on_foot B1 B P Y
B1 : Point
HA1 : on_foot A1 A P Y
A1 : Point
H : not (eq P Y)
H4 : not (eq r F0)
H1 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
False
+++++
2:solve_conds;auto with Geom.
-----
Theorem elim_py_on_perp_d_right : forall A B P Q Y : Point, forall r: F, on_perp_d Y P Q r -> Py A B Y = Py A B P - (2+2) * r * S4 P A Q B.
Proof.
intros.
unfold on_perp_d in H.
use H.
assert (P<>Y).
intro;subst;basic_simpl.
IsoleVar (Py Y Q Y) H1.
replace (0/r) with 0 in H1 by (field;auto with Geom).
intuition.
elim (proj_ex A P Y H).
intros A1 HA1.
elim (proj_ex B P Y H).
intros B1 HB1.
assert (Py4 B P A Y / Py Y P Y = S4 P A Q B / S P Q Y).
replace (Py4 B P A Y) with (Py4 B1 P A1 Y).
assert (parallel A1 B1 P Y).
unfold on_foot in *.
use HA1.
use HB1.
cut (parallel Y P A1 B1).
auto with Geom.
unfold parallel, S4.
unfold Col in *.
uniformize_signed_areas.
rewrite H6, H9.
ring.
replace (Py Y P Y) with (Py P Y P) by auto with Geom.
rewrite <- (l3_10b A1 B1 P Y) by assumption.
replace (A1 ** B1 / P ** Y) with ((S4 P A1 Q B1) / (S P Q Y)).
replace (S4 P A1 Q B1) with (S4 P A Q B).
auto.
unfold S4.
unfold on_foot in *.
use HA1.
use HB1.
assert (parallel P Q B B1).
apply (perp_perp_para P Q Y P B B1);auto with Geom.
assert (parallel P Q A A1).
apply (perp_perp_para P Q Y P A A1);auto with Geom.
unfold parallel, S4 in *.
uniformize_signed_areas.
IsoleVar (S P A Q) H12;rewrite H12.
IsoleVar (S P B Q) H9;rewrite H9.
ring.
unfold S4.
replace (A1**B1) with (A1**P + P**B1).
2:apply chasles.
assert (~ (Col P Q Y)).
intro.
rewrite H5 in H1.
basic_simpl.
IsoleVar r H1.
replace (0/ Py P Q P) with 0 in H1.
intuition.
field;auto with Geom.
auto with Geom.
replace ((A1 ** P + P ** B1) / P ** Y) with (- (P**A1 / P**Y) + P ** B1/ P**Y).
2:uniformize_dir_seg;field;auto with Geom.
rewrite (A6 P A1 Y Q H).
rewrite (A6 P B1 Y Q H).
uniformize_signed_areas.
field;solve_conds;auto with Geom.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
auto with Geom.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
assert (Col P A1 B1).
apply (col_trans_1 P Y A1 B1 H11);auto with Geom.
auto with Geom.
unfold Py4.
unfold on_foot in *.
use HA1.
use HB1.
unfold perp, Py4 in *.
IsoleVar (Py A1 P Y) H3.
IsoleVar (Py B1 P Y) H5.
rewrite H3, H5.
ring.
assert (T:=herron_qin P Q Y).
unfold perp, Py4 in H2.
basic_simpl.
replace (Py Q P Y) with 0 in T by (replace (Py Q P Y) with (Py Y P Q) by auto with Geom;auto).
basic_simpl.
assert (Py Y P Y = (2*2)*r* S P Q Y).
IsoleVar r H1.
rewrite H1.
field_simplify_eq.
2:auto with Geom.
2:auto with Geom.
replace (2 * (2 * (2 * 2)) * S P Q Y * S P Q Y) with ((2 * (2 * (2 * 2))) * (S P Q Y * S P Q Y)) by ring.
rewrite T.
uniformize_pys.
field;solve_conds.
replace (Py A B Y) with (Py A B P - Py4 B P A Y).
IsoleVar (Py4 B P A Y) H3.
rewrite H3.
rewrite H5.
field.
2:auto with Geom.
intro.
assert (Col Y P Q) by auto with Geom.
rewrite col_pyth in H2 by assumption.
IsoleVar (P**Q) H2.
2:solve_conds;auto with Geom.

*****
H2 : eq (DSeg P Q) (Fdiv F0 (Fmult (Fplus F1 F1) (DSeg P Y)))
H9 : not (eq (Fmult (Fplus F1 F1) (DSeg P Y)) F0)
H8 : Col Y P Q
H7 : eq (S P Q Y) F0
H3 : eq (Py4 B P A Y) (Fmult (Py Y P Y) (Fdiv (S4 P A Q B) (S P Q Y)))
H6 : not (eq (Py Y P Y) F0)
H5 : eq (Py Y P Y)\n (Fmult (Fmult (Fmult (Fplus F1 F1) (Fplus F1 F1)) r) (S P Q Y))
T : eq (Fmult (S P Q Y) (S P Q Y))\n (Fmult\n (Fdiv F1\n (Fmult\n (Fmult (Fmult (Fplus F1 F1) (Fplus F1 F1)) (Fplus F1 F1))\n (Fplus F1 F1))) (Fmult (Py P Q P) (Py P Y P)))
HB1 : on_foot B1 B P Y
B1 : Point
HA1 : on_foot A1 A P Y
A1 : Point
H : not (eq P Y)
H4 : not (eq r F0)
H1 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
False
+++++
replace (0 / (2 * P ** Y)) with (0) in H2.
-----
Theorem elim_py_on_perp_d_right : forall A B P Q Y : Point, forall r: F, on_perp_d Y P Q r -> Py A B Y = Py A B P - (2+2) * r * S4 P A Q B.
Proof.
intros.
unfold on_perp_d in H.
use H.
assert (P<>Y).
intro;subst;basic_simpl.
IsoleVar (Py Y Q Y) H1.
replace (0/r) with 0 in H1 by (field;auto with Geom).
intuition.
elim (proj_ex A P Y H).
intros A1 HA1.
elim (proj_ex B P Y H).
intros B1 HB1.
assert (Py4 B P A Y / Py Y P Y = S4 P A Q B / S P Q Y).
replace (Py4 B P A Y) with (Py4 B1 P A1 Y).
assert (parallel A1 B1 P Y).
unfold on_foot in *.
use HA1.
use HB1.
cut (parallel Y P A1 B1).
auto with Geom.
unfold parallel, S4.
unfold Col in *.
uniformize_signed_areas.
rewrite H6, H9.
ring.
replace (Py Y P Y) with (Py P Y P) by auto with Geom.
rewrite <- (l3_10b A1 B1 P Y) by assumption.
replace (A1 ** B1 / P ** Y) with ((S4 P A1 Q B1) / (S P Q Y)).
replace (S4 P A1 Q B1) with (S4 P A Q B).
auto.
unfold S4.
unfold on_foot in *.
use HA1.
use HB1.
assert (parallel P Q B B1).
apply (perp_perp_para P Q Y P B B1);auto with Geom.
assert (parallel P Q A A1).
apply (perp_perp_para P Q Y P A A1);auto with Geom.
unfold parallel, S4 in *.
uniformize_signed_areas.
IsoleVar (S P A Q) H12;rewrite H12.
IsoleVar (S P B Q) H9;rewrite H9.
ring.
unfold S4.
replace (A1**B1) with (A1**P + P**B1).
2:apply chasles.
assert (~ (Col P Q Y)).
intro.
rewrite H5 in H1.
basic_simpl.
IsoleVar r H1.
replace (0/ Py P Q P) with 0 in H1.
intuition.
field;auto with Geom.
auto with Geom.
replace ((A1 ** P + P ** B1) / P ** Y) with (- (P**A1 / P**Y) + P ** B1/ P**Y).
2:uniformize_dir_seg;field;auto with Geom.
rewrite (A6 P A1 Y Q H).
rewrite (A6 P B1 Y Q H).
uniformize_signed_areas.
field;solve_conds;auto with Geom.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
auto with Geom.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
assert (Col P A1 B1).
apply (col_trans_1 P Y A1 B1 H11);auto with Geom.
auto with Geom.
unfold Py4.
unfold on_foot in *.
use HA1.
use HB1.
unfold perp, Py4 in *.
IsoleVar (Py A1 P Y) H3.
IsoleVar (Py B1 P Y) H5.
rewrite H3, H5.
ring.
assert (T:=herron_qin P Q Y).
unfold perp, Py4 in H2.
basic_simpl.
replace (Py Q P Y) with 0 in T by (replace (Py Q P Y) with (Py Y P Q) by auto with Geom;auto).
basic_simpl.
assert (Py Y P Y = (2*2)*r* S P Q Y).
IsoleVar r H1.
rewrite H1.
field_simplify_eq.
2:auto with Geom.
2:auto with Geom.
replace (2 * (2 * (2 * 2)) * S P Q Y * S P Q Y) with ((2 * (2 * (2 * 2))) * (S P Q Y * S P Q Y)) by ring.
rewrite T.
uniformize_pys.
field;solve_conds.
replace (Py A B Y) with (Py A B P - Py4 B P A Y).
IsoleVar (Py4 B P A Y) H3.
rewrite H3.
rewrite H5.
field.
2:auto with Geom.
intro.
assert (Col Y P Q) by auto with Geom.
rewrite col_pyth in H2 by assumption.
IsoleVar (P**Q) H2.
2:solve_conds;auto with Geom.
replace (0 / (2 * P ** Y)) with (0) in H2.

*****
H2 : eq (DSeg P Q) F0
H9 : not (eq (Fmult (Fplus F1 F1) (DSeg P Y)) F0)
H8 : Col Y P Q
H7 : eq (S P Q Y) F0
H3 : eq (Py4 B P A Y) (Fmult (Py Y P Y) (Fdiv (S4 P A Q B) (S P Q Y)))
H6 : not (eq (Py Y P Y) F0)
H5 : eq (Py Y P Y)\n (Fmult (Fmult (Fmult (Fplus F1 F1) (Fplus F1 F1)) r) (S P Q Y))
T : eq (Fmult (S P Q Y) (S P Q Y))\n (Fmult\n (Fdiv F1\n (Fmult\n (Fmult (Fmult (Fplus F1 F1) (Fplus F1 F1)) (Fplus F1 F1))\n (Fplus F1 F1))) (Fmult (Py P Q P) (Py P Y P)))
HB1 : on_foot B1 B P Y
B1 : Point
HA1 : on_foot A1 A P Y
A1 : Point
H : not (eq P Y)
H4 : not (eq r F0)
H1 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
False
+++++
2:field;solve_conds;auto with Geom.
-----
Theorem elim_py_on_perp_d_right : forall A B P Q Y : Point, forall r: F, on_perp_d Y P Q r -> Py A B Y = Py A B P - (2+2) * r * S4 P A Q B.
Proof.
intros.
unfold on_perp_d in H.
use H.
assert (P<>Y).
intro;subst;basic_simpl.
IsoleVar (Py Y Q Y) H1.
replace (0/r) with 0 in H1 by (field;auto with Geom).
intuition.
elim (proj_ex A P Y H).
intros A1 HA1.
elim (proj_ex B P Y H).
intros B1 HB1.
assert (Py4 B P A Y / Py Y P Y = S4 P A Q B / S P Q Y).
replace (Py4 B P A Y) with (Py4 B1 P A1 Y).
assert (parallel A1 B1 P Y).
unfold on_foot in *.
use HA1.
use HB1.
cut (parallel Y P A1 B1).
auto with Geom.
unfold parallel, S4.
unfold Col in *.
uniformize_signed_areas.
rewrite H6, H9.
ring.
replace (Py Y P Y) with (Py P Y P) by auto with Geom.
rewrite <- (l3_10b A1 B1 P Y) by assumption.
replace (A1 ** B1 / P ** Y) with ((S4 P A1 Q B1) / (S P Q Y)).
replace (S4 P A1 Q B1) with (S4 P A Q B).
auto.
unfold S4.
unfold on_foot in *.
use HA1.
use HB1.
assert (parallel P Q B B1).
apply (perp_perp_para P Q Y P B B1);auto with Geom.
assert (parallel P Q A A1).
apply (perp_perp_para P Q Y P A A1);auto with Geom.
unfold parallel, S4 in *.
uniformize_signed_areas.
IsoleVar (S P A Q) H12;rewrite H12.
IsoleVar (S P B Q) H9;rewrite H9.
ring.
unfold S4.
replace (A1**B1) with (A1**P + P**B1).
2:apply chasles.
assert (~ (Col P Q Y)).
intro.
rewrite H5 in H1.
basic_simpl.
IsoleVar r H1.
replace (0/ Py P Q P) with 0 in H1.
intuition.
field;auto with Geom.
auto with Geom.
replace ((A1 ** P + P ** B1) / P ** Y) with (- (P**A1 / P**Y) + P ** B1/ P**Y).
2:uniformize_dir_seg;field;auto with Geom.
rewrite (A6 P A1 Y Q H).
rewrite (A6 P B1 Y Q H).
uniformize_signed_areas.
field;solve_conds;auto with Geom.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
auto with Geom.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
assert (Col P A1 B1).
apply (col_trans_1 P Y A1 B1 H11);auto with Geom.
auto with Geom.
unfold Py4.
unfold on_foot in *.
use HA1.
use HB1.
unfold perp, Py4 in *.
IsoleVar (Py A1 P Y) H3.
IsoleVar (Py B1 P Y) H5.
rewrite H3, H5.
ring.
assert (T:=herron_qin P Q Y).
unfold perp, Py4 in H2.
basic_simpl.
replace (Py Q P Y) with 0 in T by (replace (Py Q P Y) with (Py Y P Q) by auto with Geom;auto).
basic_simpl.
assert (Py Y P Y = (2*2)*r* S P Q Y).
IsoleVar r H1.
rewrite H1.
field_simplify_eq.
2:auto with Geom.
2:auto with Geom.
replace (2 * (2 * (2 * 2)) * S P Q Y * S P Q Y) with ((2 * (2 * (2 * 2))) * (S P Q Y * S P Q Y)) by ring.
rewrite T.
uniformize_pys.
field;solve_conds.
replace (Py A B Y) with (Py A B P - Py4 B P A Y).
IsoleVar (Py4 B P A Y) H3.
rewrite H3.
rewrite H5.
field.
2:auto with Geom.
intro.
assert (Col Y P Q) by auto with Geom.
rewrite col_pyth in H2 by assumption.
IsoleVar (P**Q) H2.
2:solve_conds;auto with Geom.
replace (0 / (2 * P ** Y)) with (0) in H2.
2:field;solve_conds;auto with Geom.

*****
H2 : eq (DSeg P Q) F0
H9 : not (eq (Fmult (Fplus F1 F1) (DSeg P Y)) F0)
H8 : Col Y P Q
H7 : eq (S P Q Y) F0
H3 : eq (Py4 B P A Y) (Fmult (Py Y P Y) (Fdiv (S4 P A Q B) (S P Q Y)))
H6 : not (eq (Py Y P Y) F0)
H5 : eq (Py Y P Y)\n (Fmult (Fmult (Fmult (Fplus F1 F1) (Fplus F1 F1)) r) (S P Q Y))
T : eq (Fmult (S P Q Y) (S P Q Y))\n (Fmult\n (Fdiv F1\n (Fmult\n (Fmult (Fmult (Fplus F1 F1) (Fplus F1 F1)) (Fplus F1 F1))\n (Fplus F1 F1))) (Fmult (Py P Q P) (Py P Y P)))
HB1 : on_foot B1 B P Y
B1 : Point
HA1 : on_foot A1 A P Y
A1 : Point
H : not (eq P Y)
H4 : not (eq r F0)
H1 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
False
+++++
assert (P=Q) by auto with Geom.
-----
Theorem elim_py_on_perp_d_right : forall A B P Q Y : Point, forall r: F, on_perp_d Y P Q r -> Py A B Y = Py A B P - (2+2) * r * S4 P A Q B.
Proof.
intros.
unfold on_perp_d in H.
use H.
assert (P<>Y).
intro;subst;basic_simpl.
IsoleVar (Py Y Q Y) H1.
replace (0/r) with 0 in H1 by (field;auto with Geom).
intuition.
elim (proj_ex A P Y H).
intros A1 HA1.
elim (proj_ex B P Y H).
intros B1 HB1.
assert (Py4 B P A Y / Py Y P Y = S4 P A Q B / S P Q Y).
replace (Py4 B P A Y) with (Py4 B1 P A1 Y).
assert (parallel A1 B1 P Y).
unfold on_foot in *.
use HA1.
use HB1.
cut (parallel Y P A1 B1).
auto with Geom.
unfold parallel, S4.
unfold Col in *.
uniformize_signed_areas.
rewrite H6, H9.
ring.
replace (Py Y P Y) with (Py P Y P) by auto with Geom.
rewrite <- (l3_10b A1 B1 P Y) by assumption.
replace (A1 ** B1 / P ** Y) with ((S4 P A1 Q B1) / (S P Q Y)).
replace (S4 P A1 Q B1) with (S4 P A Q B).
auto.
unfold S4.
unfold on_foot in *.
use HA1.
use HB1.
assert (parallel P Q B B1).
apply (perp_perp_para P Q Y P B B1);auto with Geom.
assert (parallel P Q A A1).
apply (perp_perp_para P Q Y P A A1);auto with Geom.
unfold parallel, S4 in *.
uniformize_signed_areas.
IsoleVar (S P A Q) H12;rewrite H12.
IsoleVar (S P B Q) H9;rewrite H9.
ring.
unfold S4.
replace (A1**B1) with (A1**P + P**B1).
2:apply chasles.
assert (~ (Col P Q Y)).
intro.
rewrite H5 in H1.
basic_simpl.
IsoleVar r H1.
replace (0/ Py P Q P) with 0 in H1.
intuition.
field;auto with Geom.
auto with Geom.
replace ((A1 ** P + P ** B1) / P ** Y) with (- (P**A1 / P**Y) + P ** B1/ P**Y).
2:uniformize_dir_seg;field;auto with Geom.
rewrite (A6 P A1 Y Q H).
rewrite (A6 P B1 Y Q H).
uniformize_signed_areas.
field;solve_conds;auto with Geom.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
auto with Geom.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
assert (Col P A1 B1).
apply (col_trans_1 P Y A1 B1 H11);auto with Geom.
auto with Geom.
unfold Py4.
unfold on_foot in *.
use HA1.
use HB1.
unfold perp, Py4 in *.
IsoleVar (Py A1 P Y) H3.
IsoleVar (Py B1 P Y) H5.
rewrite H3, H5.
ring.
assert (T:=herron_qin P Q Y).
unfold perp, Py4 in H2.
basic_simpl.
replace (Py Q P Y) with 0 in T by (replace (Py Q P Y) with (Py Y P Q) by auto with Geom;auto).
basic_simpl.
assert (Py Y P Y = (2*2)*r* S P Q Y).
IsoleVar r H1.
rewrite H1.
field_simplify_eq.
2:auto with Geom.
2:auto with Geom.
replace (2 * (2 * (2 * 2)) * S P Q Y * S P Q Y) with ((2 * (2 * (2 * 2))) * (S P Q Y * S P Q Y)) by ring.
rewrite T.
uniformize_pys.
field;solve_conds.
replace (Py A B Y) with (Py A B P - Py4 B P A Y).
IsoleVar (Py4 B P A Y) H3.
rewrite H3.
rewrite H5.
field.
2:auto with Geom.
intro.
assert (Col Y P Q) by auto with Geom.
rewrite col_pyth in H2 by assumption.
IsoleVar (P**Q) H2.
2:solve_conds;auto with Geom.
replace (0 / (2 * P ** Y)) with (0) in H2.
2:field;solve_conds;auto with Geom.
assert (P=Q) by auto with Geom.

*****
H10 : eq P Q
H2 : eq (DSeg P Q) F0
H9 : not (eq (Fmult (Fplus F1 F1) (DSeg P Y)) F0)
H8 : Col Y P Q
H7 : eq (S P Q Y) F0
H3 : eq (Py4 B P A Y) (Fmult (Py Y P Y) (Fdiv (S4 P A Q B) (S P Q Y)))
H6 : not (eq (Py Y P Y) F0)
H5 : eq (Py Y P Y)\n (Fmult (Fmult (Fmult (Fplus F1 F1) (Fplus F1 F1)) r) (S P Q Y))
T : eq (Fmult (S P Q Y) (S P Q Y))\n (Fmult\n (Fdiv F1\n (Fmult\n (Fmult (Fmult (Fplus F1 F1) (Fplus F1 F1)) (Fplus F1 F1))\n (Fplus F1 F1))) (Fmult (Py P Q P) (Py P Y P)))
HB1 : on_foot B1 B P Y
B1 : Point
HA1 : on_foot A1 A P Y
A1 : Point
H : not (eq P Y)
H4 : not (eq r F0)
H1 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
False
+++++
intuition.
-----
Theorem elim_py_on_perp_d_right : forall A B P Q Y : Point, forall r: F, on_perp_d Y P Q r -> Py A B Y = Py A B P - (2+2) * r * S4 P A Q B.
Proof.
intros.
unfold on_perp_d in H.
use H.
assert (P<>Y).
intro;subst;basic_simpl.
IsoleVar (Py Y Q Y) H1.
replace (0/r) with 0 in H1 by (field;auto with Geom).
intuition.
elim (proj_ex A P Y H).
intros A1 HA1.
elim (proj_ex B P Y H).
intros B1 HB1.
assert (Py4 B P A Y / Py Y P Y = S4 P A Q B / S P Q Y).
replace (Py4 B P A Y) with (Py4 B1 P A1 Y).
assert (parallel A1 B1 P Y).
unfold on_foot in *.
use HA1.
use HB1.
cut (parallel Y P A1 B1).
auto with Geom.
unfold parallel, S4.
unfold Col in *.
uniformize_signed_areas.
rewrite H6, H9.
ring.
replace (Py Y P Y) with (Py P Y P) by auto with Geom.
rewrite <- (l3_10b A1 B1 P Y) by assumption.
replace (A1 ** B1 / P ** Y) with ((S4 P A1 Q B1) / (S P Q Y)).
replace (S4 P A1 Q B1) with (S4 P A Q B).
auto.
unfold S4.
unfold on_foot in *.
use HA1.
use HB1.
assert (parallel P Q B B1).
apply (perp_perp_para P Q Y P B B1);auto with Geom.
assert (parallel P Q A A1).
apply (perp_perp_para P Q Y P A A1);auto with Geom.
unfold parallel, S4 in *.
uniformize_signed_areas.
IsoleVar (S P A Q) H12;rewrite H12.
IsoleVar (S P B Q) H9;rewrite H9.
ring.
unfold S4.
replace (A1**B1) with (A1**P + P**B1).
2:apply chasles.
assert (~ (Col P Q Y)).
intro.
rewrite H5 in H1.
basic_simpl.
IsoleVar r H1.
replace (0/ Py P Q P) with 0 in H1.
intuition.
field;auto with Geom.
auto with Geom.
replace ((A1 ** P + P ** B1) / P ** Y) with (- (P**A1 / P**Y) + P ** B1/ P**Y).
2:uniformize_dir_seg;field;auto with Geom.
rewrite (A6 P A1 Y Q H).
rewrite (A6 P B1 Y Q H).
uniformize_signed_areas.
field;solve_conds;auto with Geom.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
auto with Geom.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
assert (Col P A1 B1).
apply (col_trans_1 P Y A1 B1 H11);auto with Geom.
auto with Geom.
unfold Py4.
unfold on_foot in *.
use HA1.
use HB1.
unfold perp, Py4 in *.
IsoleVar (Py A1 P Y) H3.
IsoleVar (Py B1 P Y) H5.
rewrite H3, H5.
ring.
assert (T:=herron_qin P Q Y).
unfold perp, Py4 in H2.
basic_simpl.
replace (Py Q P Y) with 0 in T by (replace (Py Q P Y) with (Py Y P Q) by auto with Geom;auto).
basic_simpl.
assert (Py Y P Y = (2*2)*r* S P Q Y).
IsoleVar r H1.
rewrite H1.
field_simplify_eq.
2:auto with Geom.
2:auto with Geom.
replace (2 * (2 * (2 * 2)) * S P Q Y * S P Q Y) with ((2 * (2 * (2 * 2))) * (S P Q Y * S P Q Y)) by ring.
rewrite T.
uniformize_pys.
field;solve_conds.
replace (Py A B Y) with (Py A B P - Py4 B P A Y).
IsoleVar (Py4 B P A Y) H3.
rewrite H3.
rewrite H5.
field.
2:auto with Geom.
intro.
assert (Col Y P Q) by auto with Geom.
rewrite col_pyth in H2 by assumption.
IsoleVar (P**Q) H2.
2:solve_conds;auto with Geom.
replace (0 / (2 * P ** Y)) with (0) in H2.
2:field;solve_conds;auto with Geom.
assert (P=Q) by auto with Geom.
intuition.

*****
H5 : eq (Py Y P Y)\n (Fmult (Fmult (Fmult (Fplus F1 F1) (Fplus F1 F1)) r) (S P Q Y))
T : eq (Fmult (S P Q Y) (S P Q Y))\n (Fmult\n (Fdiv F1\n (Fmult\n (Fmult (Fmult (Fplus F1 F1) (Fplus F1 F1)) (Fplus F1 F1))\n (Fplus F1 F1))) (Fmult (Py P Q P) (Py P Y P)))
H3 : eq (Fdiv (Py4 B P A Y) (Py Y P Y)) (Fdiv (S4 P A Q B) (S P Q Y))
HB1 : on_foot B1 B P Y
B1 : Point
HA1 : on_foot A1 A P Y
A1 : Point
H : not (eq P Y)
H4 : not (eq r F0)
H1 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H2 : eq (Py Y P Q) F0
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
eq (Fminus (Py A B P) (Py4 B P A Y)) (Py A B Y)
+++++
replace (Py4 B P A Y) with (- Py4 Y B P A) by auto with Geom.
-----
Theorem elim_py_on_perp_d_right : forall A B P Q Y : Point, forall r: F, on_perp_d Y P Q r -> Py A B Y = Py A B P - (2+2) * r * S4 P A Q B.
Proof.
intros.
unfold on_perp_d in H.
use H.
assert (P<>Y).
intro;subst;basic_simpl.
IsoleVar (Py Y Q Y) H1.
replace (0/r) with 0 in H1 by (field;auto with Geom).
intuition.
elim (proj_ex A P Y H).
intros A1 HA1.
elim (proj_ex B P Y H).
intros B1 HB1.
assert (Py4 B P A Y / Py Y P Y = S4 P A Q B / S P Q Y).
replace (Py4 B P A Y) with (Py4 B1 P A1 Y).
assert (parallel A1 B1 P Y).
unfold on_foot in *.
use HA1.
use HB1.
cut (parallel Y P A1 B1).
auto with Geom.
unfold parallel, S4.
unfold Col in *.
uniformize_signed_areas.
rewrite H6, H9.
ring.
replace (Py Y P Y) with (Py P Y P) by auto with Geom.
rewrite <- (l3_10b A1 B1 P Y) by assumption.
replace (A1 ** B1 / P ** Y) with ((S4 P A1 Q B1) / (S P Q Y)).
replace (S4 P A1 Q B1) with (S4 P A Q B).
auto.
unfold S4.
unfold on_foot in *.
use HA1.
use HB1.
assert (parallel P Q B B1).
apply (perp_perp_para P Q Y P B B1);auto with Geom.
assert (parallel P Q A A1).
apply (perp_perp_para P Q Y P A A1);auto with Geom.
unfold parallel, S4 in *.
uniformize_signed_areas.
IsoleVar (S P A Q) H12;rewrite H12.
IsoleVar (S P B Q) H9;rewrite H9.
ring.
unfold S4.
replace (A1**B1) with (A1**P + P**B1).
2:apply chasles.
assert (~ (Col P Q Y)).
intro.
rewrite H5 in H1.
basic_simpl.
IsoleVar r H1.
replace (0/ Py P Q P) with 0 in H1.
intuition.
field;auto with Geom.
auto with Geom.
replace ((A1 ** P + P ** B1) / P ** Y) with (- (P**A1 / P**Y) + P ** B1/ P**Y).
2:uniformize_dir_seg;field;auto with Geom.
rewrite (A6 P A1 Y Q H).
rewrite (A6 P B1 Y Q H).
uniformize_signed_areas.
field;solve_conds;auto with Geom.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
auto with Geom.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
assert (Col P A1 B1).
apply (col_trans_1 P Y A1 B1 H11);auto with Geom.
auto with Geom.
unfold Py4.
unfold on_foot in *.
use HA1.
use HB1.
unfold perp, Py4 in *.
IsoleVar (Py A1 P Y) H3.
IsoleVar (Py B1 P Y) H5.
rewrite H3, H5.
ring.
assert (T:=herron_qin P Q Y).
unfold perp, Py4 in H2.
basic_simpl.
replace (Py Q P Y) with 0 in T by (replace (Py Q P Y) with (Py Y P Q) by auto with Geom;auto).
basic_simpl.
assert (Py Y P Y = (2*2)*r* S P Q Y).
IsoleVar r H1.
rewrite H1.
field_simplify_eq.
2:auto with Geom.
2:auto with Geom.
replace (2 * (2 * (2 * 2)) * S P Q Y * S P Q Y) with ((2 * (2 * (2 * 2))) * (S P Q Y * S P Q Y)) by ring.
rewrite T.
uniformize_pys.
field;solve_conds.
replace (Py A B Y) with (Py A B P - Py4 B P A Y).
IsoleVar (Py4 B P A Y) H3.
rewrite H3.
rewrite H5.
field.
2:auto with Geom.
intro.
assert (Col Y P Q) by auto with Geom.
rewrite col_pyth in H2 by assumption.
IsoleVar (P**Q) H2.
2:solve_conds;auto with Geom.
replace (0 / (2 * P ** Y)) with (0) in H2.
2:field;solve_conds;auto with Geom.
assert (P=Q) by auto with Geom.
intuition.
replace (Py4 B P A Y) with (- Py4 Y B P A) by auto with Geom.

*****
H5 : eq (Py Y P Y)\n (Fmult (Fmult (Fmult (Fplus F1 F1) (Fplus F1 F1)) r) (S P Q Y))
T : eq (Fmult (S P Q Y) (S P Q Y))\n (Fmult\n (Fdiv F1\n (Fmult\n (Fmult (Fmult (Fplus F1 F1) (Fplus F1 F1)) (Fplus F1 F1))\n (Fplus F1 F1))) (Fmult (Py P Q P) (Py P Y P)))
H3 : eq (Fdiv (Py4 B P A Y) (Py Y P Y)) (Fdiv (S4 P A Q B) (S P Q Y))
HB1 : on_foot B1 B P Y
B1 : Point
HA1 : on_foot A1 A P Y
A1 : Point
H : not (eq P Y)
H4 : not (eq r F0)
H1 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H2 : eq (Py Y P Q) F0
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
eq (Fminus (Py A B P) (Fopp (Py4 Y B P A))) (Py A B Y)
+++++
unfold Py4.
-----
Theorem elim_py_on_perp_d_right : forall A B P Q Y : Point, forall r: F, on_perp_d Y P Q r -> Py A B Y = Py A B P - (2+2) * r * S4 P A Q B.
Proof.
intros.
unfold on_perp_d in H.
use H.
assert (P<>Y).
intro;subst;basic_simpl.
IsoleVar (Py Y Q Y) H1.
replace (0/r) with 0 in H1 by (field;auto with Geom).
intuition.
elim (proj_ex A P Y H).
intros A1 HA1.
elim (proj_ex B P Y H).
intros B1 HB1.
assert (Py4 B P A Y / Py Y P Y = S4 P A Q B / S P Q Y).
replace (Py4 B P A Y) with (Py4 B1 P A1 Y).
assert (parallel A1 B1 P Y).
unfold on_foot in *.
use HA1.
use HB1.
cut (parallel Y P A1 B1).
auto with Geom.
unfold parallel, S4.
unfold Col in *.
uniformize_signed_areas.
rewrite H6, H9.
ring.
replace (Py Y P Y) with (Py P Y P) by auto with Geom.
rewrite <- (l3_10b A1 B1 P Y) by assumption.
replace (A1 ** B1 / P ** Y) with ((S4 P A1 Q B1) / (S P Q Y)).
replace (S4 P A1 Q B1) with (S4 P A Q B).
auto.
unfold S4.
unfold on_foot in *.
use HA1.
use HB1.
assert (parallel P Q B B1).
apply (perp_perp_para P Q Y P B B1);auto with Geom.
assert (parallel P Q A A1).
apply (perp_perp_para P Q Y P A A1);auto with Geom.
unfold parallel, S4 in *.
uniformize_signed_areas.
IsoleVar (S P A Q) H12;rewrite H12.
IsoleVar (S P B Q) H9;rewrite H9.
ring.
unfold S4.
replace (A1**B1) with (A1**P + P**B1).
2:apply chasles.
assert (~ (Col P Q Y)).
intro.
rewrite H5 in H1.
basic_simpl.
IsoleVar r H1.
replace (0/ Py P Q P) with 0 in H1.
intuition.
field;auto with Geom.
auto with Geom.
replace ((A1 ** P + P ** B1) / P ** Y) with (- (P**A1 / P**Y) + P ** B1/ P**Y).
2:uniformize_dir_seg;field;auto with Geom.
rewrite (A6 P A1 Y Q H).
rewrite (A6 P B1 Y Q H).
uniformize_signed_areas.
field;solve_conds;auto with Geom.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
auto with Geom.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
assert (Col P A1 B1).
apply (col_trans_1 P Y A1 B1 H11);auto with Geom.
auto with Geom.
unfold Py4.
unfold on_foot in *.
use HA1.
use HB1.
unfold perp, Py4 in *.
IsoleVar (Py A1 P Y) H3.
IsoleVar (Py B1 P Y) H5.
rewrite H3, H5.
ring.
assert (T:=herron_qin P Q Y).
unfold perp, Py4 in H2.
basic_simpl.
replace (Py Q P Y) with 0 in T by (replace (Py Q P Y) with (Py Y P Q) by auto with Geom;auto).
basic_simpl.
assert (Py Y P Y = (2*2)*r* S P Q Y).
IsoleVar r H1.
rewrite H1.
field_simplify_eq.
2:auto with Geom.
2:auto with Geom.
replace (2 * (2 * (2 * 2)) * S P Q Y * S P Q Y) with ((2 * (2 * (2 * 2))) * (S P Q Y * S P Q Y)) by ring.
rewrite T.
uniformize_pys.
field;solve_conds.
replace (Py A B Y) with (Py A B P - Py4 B P A Y).
IsoleVar (Py4 B P A Y) H3.
rewrite H3.
rewrite H5.
field.
2:auto with Geom.
intro.
assert (Col Y P Q) by auto with Geom.
rewrite col_pyth in H2 by assumption.
IsoleVar (P**Q) H2.
2:solve_conds;auto with Geom.
replace (0 / (2 * P ** Y)) with (0) in H2.
2:field;solve_conds;auto with Geom.
assert (P=Q) by auto with Geom.
intuition.
replace (Py4 B P A Y) with (- Py4 Y B P A) by auto with Geom.
unfold Py4.

*****
H5 : eq (Py Y P Y)\n (Fmult (Fmult (Fmult (Fplus F1 F1) (Fplus F1 F1)) r) (S P Q Y))
T : eq (Fmult (S P Q Y) (S P Q Y))\n (Fmult\n (Fdiv F1\n (Fmult\n (Fmult (Fmult (Fplus F1 F1) (Fplus F1 F1)) (Fplus F1 F1))\n (Fplus F1 F1))) (Fmult (Py P Q P) (Py P Y P)))
H3 : eq (Fdiv (Py4 B P A Y) (Py Y P Y)) (Fdiv (S4 P A Q B) (S P Q Y))
HB1 : on_foot B1 B P Y
B1 : Point
HA1 : on_foot A1 A P Y
A1 : Point
H : not (eq P Y)
H4 : not (eq r F0)
H1 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H2 : eq (Py Y P Q) F0
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
eq (Fminus (Py A B P) (Fopp (Fminus (Py Y B A) (Py P B A)))) (Py A B Y)
+++++
uniformize_pys.
-----
Theorem elim_py_on_perp_d_right : forall A B P Q Y : Point, forall r: F, on_perp_d Y P Q r -> Py A B Y = Py A B P - (2+2) * r * S4 P A Q B.
Proof.
intros.
unfold on_perp_d in H.
use H.
assert (P<>Y).
intro;subst;basic_simpl.
IsoleVar (Py Y Q Y) H1.
replace (0/r) with 0 in H1 by (field;auto with Geom).
intuition.
elim (proj_ex A P Y H).
intros A1 HA1.
elim (proj_ex B P Y H).
intros B1 HB1.
assert (Py4 B P A Y / Py Y P Y = S4 P A Q B / S P Q Y).
replace (Py4 B P A Y) with (Py4 B1 P A1 Y).
assert (parallel A1 B1 P Y).
unfold on_foot in *.
use HA1.
use HB1.
cut (parallel Y P A1 B1).
auto with Geom.
unfold parallel, S4.
unfold Col in *.
uniformize_signed_areas.
rewrite H6, H9.
ring.
replace (Py Y P Y) with (Py P Y P) by auto with Geom.
rewrite <- (l3_10b A1 B1 P Y) by assumption.
replace (A1 ** B1 / P ** Y) with ((S4 P A1 Q B1) / (S P Q Y)).
replace (S4 P A1 Q B1) with (S4 P A Q B).
auto.
unfold S4.
unfold on_foot in *.
use HA1.
use HB1.
assert (parallel P Q B B1).
apply (perp_perp_para P Q Y P B B1);auto with Geom.
assert (parallel P Q A A1).
apply (perp_perp_para P Q Y P A A1);auto with Geom.
unfold parallel, S4 in *.
uniformize_signed_areas.
IsoleVar (S P A Q) H12;rewrite H12.
IsoleVar (S P B Q) H9;rewrite H9.
ring.
unfold S4.
replace (A1**B1) with (A1**P + P**B1).
2:apply chasles.
assert (~ (Col P Q Y)).
intro.
rewrite H5 in H1.
basic_simpl.
IsoleVar r H1.
replace (0/ Py P Q P) with 0 in H1.
intuition.
field;auto with Geom.
auto with Geom.
replace ((A1 ** P + P ** B1) / P ** Y) with (- (P**A1 / P**Y) + P ** B1/ P**Y).
2:uniformize_dir_seg;field;auto with Geom.
rewrite (A6 P A1 Y Q H).
rewrite (A6 P B1 Y Q H).
uniformize_signed_areas.
field;solve_conds;auto with Geom.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
auto with Geom.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
assert (Col P A1 B1).
apply (col_trans_1 P Y A1 B1 H11);auto with Geom.
auto with Geom.
unfold Py4.
unfold on_foot in *.
use HA1.
use HB1.
unfold perp, Py4 in *.
IsoleVar (Py A1 P Y) H3.
IsoleVar (Py B1 P Y) H5.
rewrite H3, H5.
ring.
assert (T:=herron_qin P Q Y).
unfold perp, Py4 in H2.
basic_simpl.
replace (Py Q P Y) with 0 in T by (replace (Py Q P Y) with (Py Y P Q) by auto with Geom;auto).
basic_simpl.
assert (Py Y P Y = (2*2)*r* S P Q Y).
IsoleVar r H1.
rewrite H1.
field_simplify_eq.
2:auto with Geom.
2:auto with Geom.
replace (2 * (2 * (2 * 2)) * S P Q Y * S P Q Y) with ((2 * (2 * (2 * 2))) * (S P Q Y * S P Q Y)) by ring.
rewrite T.
uniformize_pys.
field;solve_conds.
replace (Py A B Y) with (Py A B P - Py4 B P A Y).
IsoleVar (Py4 B P A Y) H3.
rewrite H3.
rewrite H5.
field.
2:auto with Geom.
intro.
assert (Col Y P Q) by auto with Geom.
rewrite col_pyth in H2 by assumption.
IsoleVar (P**Q) H2.
2:solve_conds;auto with Geom.
replace (0 / (2 * P ** Y)) with (0) in H2.
2:field;solve_conds;auto with Geom.
assert (P=Q) by auto with Geom.
intuition.
replace (Py4 B P A Y) with (- Py4 Y B P A) by auto with Geom.
unfold Py4.
uniformize_pys.

*****
H5 : eq (Py Y P Y)\n (Fmult (Fmult (Fmult (Fplus F1 F1) (Fplus F1 F1)) r) (S P Q Y))
T : eq (Fmult (S P Q Y) (S P Q Y))\n (Fmult\n (Fdiv F1\n (Fmult\n (Fmult (Fmult (Fplus F1 F1) (Fplus F1 F1)) (Fplus F1 F1))\n (Fplus F1 F1))) (Fmult (Py P Q P) (Py P Y P)))
H3 : eq (Fdiv (Py4 B P A Y) (Py Y P Y)) (Fdiv (S4 P A Q B) (S P Q Y))
HB1 : on_foot B1 B P Y
B1 : Point
HA1 : on_foot A1 A P Y
A1 : Point
H : not (eq P Y)
H4 : not (eq r F0)
H1 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H2 : eq (Py Y P Q) F0
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
eq (Fminus (Py P B A) (Fopp (Fminus (Py A B Y) (Py P B A)))) (Py A B Y)
+++++
ring.
-----
Theorem elim_py_on_perp_d_right : forall A B P Q Y : Point, forall r: F, on_perp_d Y P Q r -> Py A B Y = Py A B P - (2+2) * r * S4 P A Q B.
Proof.
intros.
unfold on_perp_d in H.
use H.
assert (P<>Y).
intro;subst;basic_simpl.
IsoleVar (Py Y Q Y) H1.
replace (0/r) with 0 in H1 by (field;auto with Geom).
intuition.
elim (proj_ex A P Y H).
intros A1 HA1.
elim (proj_ex B P Y H).
intros B1 HB1.
assert (Py4 B P A Y / Py Y P Y = S4 P A Q B / S P Q Y).
replace (Py4 B P A Y) with (Py4 B1 P A1 Y).
assert (parallel A1 B1 P Y).
unfold on_foot in *.
use HA1.
use HB1.
cut (parallel Y P A1 B1).
auto with Geom.
unfold parallel, S4.
unfold Col in *.
uniformize_signed_areas.
rewrite H6, H9.
ring.
replace (Py Y P Y) with (Py P Y P) by auto with Geom.
rewrite <- (l3_10b A1 B1 P Y) by assumption.
replace (A1 ** B1 / P ** Y) with ((S4 P A1 Q B1) / (S P Q Y)).
replace (S4 P A1 Q B1) with (S4 P A Q B).
auto.
unfold S4.
unfold on_foot in *.
use HA1.
use HB1.
assert (parallel P Q B B1).
apply (perp_perp_para P Q Y P B B1);auto with Geom.
assert (parallel P Q A A1).
apply (perp_perp_para P Q Y P A A1);auto with Geom.
unfold parallel, S4 in *.
uniformize_signed_areas.
IsoleVar (S P A Q) H12;rewrite H12.
IsoleVar (S P B Q) H9;rewrite H9.
ring.
unfold S4.
replace (A1**B1) with (A1**P + P**B1).
2:apply chasles.
assert (~ (Col P Q Y)).
intro.
rewrite H5 in H1.
basic_simpl.
IsoleVar r H1.
replace (0/ Py P Q P) with 0 in H1.
intuition.
field;auto with Geom.
auto with Geom.
replace ((A1 ** P + P ** B1) / P ** Y) with (- (P**A1 / P**Y) + P ** B1/ P**Y).
2:uniformize_dir_seg;field;auto with Geom.
rewrite (A6 P A1 Y Q H).
rewrite (A6 P B1 Y Q H).
uniformize_signed_areas.
field;solve_conds;auto with Geom.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
auto with Geom.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
auto with Geom.
unfold on_foot in *.
use HA1.
use HB1.
assert (Col P A1 B1).
apply (col_trans_1 P Y A1 B1 H11);auto with Geom.
auto with Geom.
unfold Py4.
unfold on_foot in *.
use HA1.
use HB1.
unfold perp, Py4 in *.
IsoleVar (Py A1 P Y) H3.
IsoleVar (Py B1 P Y) H5.
rewrite H3, H5.
ring.
assert (T:=herron_qin P Q Y).
unfold perp, Py4 in H2.
basic_simpl.
replace (Py Q P Y) with 0 in T by (replace (Py Q P Y) with (Py Y P Q) by auto with Geom;auto).
basic_simpl.
assert (Py Y P Y = (2*2)*r* S P Q Y).
IsoleVar r H1.
rewrite H1.
field_simplify_eq.
2:auto with Geom.
2:auto with Geom.
replace (2 * (2 * (2 * 2)) * S P Q Y * S P Q Y) with ((2 * (2 * (2 * 2))) * (S P Q Y * S P Q Y)) by ring.
rewrite T.
uniformize_pys.
field;solve_conds.
replace (Py A B Y) with (Py A B P - Py4 B P A Y).
IsoleVar (Py4 B P A Y) H3.
rewrite H3.
rewrite H5.
field.
2:auto with Geom.
intro.
assert (Col Y P Q) by auto with Geom.
rewrite col_pyth in H2 by assumption.
IsoleVar (P**Q) H2.
2:solve_conds;auto with Geom.
replace (0 / (2 * P ** Y)) with (0) in H2.
2:field;solve_conds;auto with Geom.
assert (P=Q) by auto with Geom.
intuition.
replace (Py4 B P A Y) with (- Py4 Y B P A) by auto with Geom.
unfold Py4.
uniformize_pys.
ring.

*****

*****

+++++
Qed.
-----
Theorem elim_py_on_perp_d_middle :\nforall A B U V Y : Point, forall r: F,\non_perp_d Y U V r ->\nPy A Y B = Py A U B + r * r * Py U V U - (2+2)*r*(S A U V + S B U V).
-----
Theorem elim_py_on_perp_d_middle : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> Py A Y B = Py A U B + r * r * Py U V U - (2+2)*r*(S A U V + S B U V).

*****

*****
forall (A B U V Y : Point) (r : F) (_ : on_perp_d Y U V r), eq (Py A Y B) (Fminus (Fplus (Py A U B) (Fmult (Fmult r r) (Py U V U))) (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) r) (Fplus (S A U V) (S B U V))))
+++++
Proof.
-----
Theorem elim_py_on_perp_d_middle : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> Py A Y B = Py A U B + r * r * Py U V U - (2+2)*r*(S A U V + S B U V).
Proof.

*****

*****
forall (A B U V Y : Point) (r : F) (_ : on_perp_d Y U V r), eq (Py A Y B) (Fminus (Fplus (Py A U B) (Fmult (Fmult r r) (Py U V U))) (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) r) (Fplus (S A U V) (S B U V))))
+++++
intros.
-----
Theorem elim_py_on_perp_d_middle : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> Py A Y B = Py A U B + r * r * Py U V U - (2+2)*r*(S A U V + S B U V).
Proof.
intros.

*****
H : on_perp_d Y U V r
r : F
A,B,U,V,Y : Point
*****
eq (Py A Y B) (Fminus (Fplus (Py A U B) (Fmult (Fmult r r) (Py U V U))) (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) r) (Fplus (S A U V) (S B U V))))
+++++
rename U into P.
-----
Theorem elim_py_on_perp_d_middle : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> Py A Y B = Py A U B + r * r * Py U V U - (2+2)*r*(S A U V + S B U V).
Proof.
intros.
rename U into P.

*****
H : on_perp_d Y P V r
r : F
A,B,P,V,Y : Point
*****
eq (Py A Y B) (Fminus (Fplus (Py A P B) (Fmult (Fmult r r) (Py P V P))) (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) r) (Fplus (S A P V) (S B P V))))
+++++
rename V into Q.
-----
Theorem elim_py_on_perp_d_middle : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> Py A Y B = Py A U B + r * r * Py U V U - (2+2)*r*(S A U V + S B U V).
Proof.
intros.
rename U into P.
rename V into Q.

*****
H : on_perp_d Y P Q r
r : F
A,B,P,Q,Y : Point
*****
eq (Py A Y B) (Fminus (Fplus (Py A P B) (Fmult (Fmult r r) (Py P Q P))) (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) r) (Fplus (S A P Q) (S B P Q))))
+++++
replace (Py A Y B) with (Py A P B - Py A P Y - Py B P Y + Py Y P Y) by (unfold Py; uniformize_dir_seg;basic_simpl;ring).
-----
Theorem elim_py_on_perp_d_middle : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> Py A Y B = Py A U B + r * r * Py U V U - (2+2)*r*(S A U V + S B U V).
Proof.
intros.
rename U into P.
rename V into Q.
replace (Py A Y B) with (Py A P B - Py A P Y - Py B P Y + Py Y P Y) by (unfold Py; uniformize_dir_seg;basic_simpl;ring).

*****
H : on_perp_d Y P Q r
r : F
A,B,P,Q,Y : Point
*****
eq (Fplus (Fminus (Fminus (Py A P B) (Py A P Y)) (Py B P Y)) (Py Y P Y)) (Fminus (Fplus (Py A P B) (Fmult (Fmult r r) (Py P Q P))) (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) r) (Fplus (S A P Q) (S B P Q))))
+++++
rewrite (elim_py_on_perp_d_right A P P Q Y r H).
-----
Theorem elim_py_on_perp_d_middle : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> Py A Y B = Py A U B + r * r * Py U V U - (2+2)*r*(S A U V + S B U V).
Proof.
intros.
rename U into P.
rename V into Q.
replace (Py A Y B) with (Py A P B - Py A P Y - Py B P Y + Py Y P Y) by (unfold Py; uniformize_dir_seg;basic_simpl;ring).
rewrite (elim_py_on_perp_d_right A P P Q Y r H).

*****
H : on_perp_d Y P Q r
r : F
A,B,P,Q,Y : Point
*****
eq (Fplus (Fminus (Fminus (Py A P B) (Fminus (Py A P P) (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) r) (S4 P A Q P)))) (Py B P Y)) (Py Y P Y)) (Fminus (Fplus (Py A P B) (Fmult (Fmult r r) (Py P Q P))) (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) r) (Fplus (S A P Q) (S B P Q))))
+++++
rewrite (elim_py_on_perp_d_right B P P Q Y r H).
-----
Theorem elim_py_on_perp_d_middle : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> Py A Y B = Py A U B + r * r * Py U V U - (2+2)*r*(S A U V + S B U V).
Proof.
intros.
rename U into P.
rename V into Q.
replace (Py A Y B) with (Py A P B - Py A P Y - Py B P Y + Py Y P Y) by (unfold Py; uniformize_dir_seg;basic_simpl;ring).
rewrite (elim_py_on_perp_d_right A P P Q Y r H).
rewrite (elim_py_on_perp_d_right B P P Q Y r H).

*****
H : on_perp_d Y P Q r
r : F
A,B,P,Q,Y : Point
*****
eq (Fplus (Fminus (Fminus (Py A P B) (Fminus (Py A P P) (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) r) (S4 P A Q P)))) (Fminus (Py B P P) (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) r) (S4 P B Q P)))) (Py Y P Y)) (Fminus (Fplus (Py A P B) (Fmult (Fmult r r) (Py P Q P))) (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) r) (Fplus (S A P Q) (S B P Q))))
+++++
basic_simpl.
-----
Theorem elim_py_on_perp_d_middle : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> Py A Y B = Py A U B + r * r * Py U V U - (2+2)*r*(S A U V + S B U V).
Proof.
intros.
rename U into P.
rename V into Q.
replace (Py A Y B) with (Py A P B - Py A P Y - Py B P Y + Py Y P Y) by (unfold Py; uniformize_dir_seg;basic_simpl;ring).
rewrite (elim_py_on_perp_d_right A P P Q Y r H).
rewrite (elim_py_on_perp_d_right B P P Q Y r H).
basic_simpl.

*****
H : on_perp_d Y P Q r
r : F
A,B,P,Q,Y : Point
*****
eq (Fplus (Fminus (Fminus (Py A P B) (Fminus F0 (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) r) (S P A Q)))) (Fminus F0 (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) r) (S P B Q)))) (Py Y P Y)) (Fminus (Fplus (Py A P B) (Fmult (Fmult r r) (Py P Q P))) (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) r) (Fplus (S A P Q) (S B P Q))))
+++++
unfold on_perp_d in H.
-----
Theorem elim_py_on_perp_d_middle : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> Py A Y B = Py A U B + r * r * Py U V U - (2+2)*r*(S A U V + S B U V).
Proof.
intros.
rename U into P.
rename V into Q.
replace (Py A Y B) with (Py A P B - Py A P Y - Py B P Y + Py Y P Y) by (unfold Py; uniformize_dir_seg;basic_simpl;ring).
rewrite (elim_py_on_perp_d_right A P P Q Y r H).
rewrite (elim_py_on_perp_d_right B P P Q Y r H).
basic_simpl.
unfold on_perp_d in H.

*****
H : and (not (eq P Q))\n (and (perp Y P P Q)\n (and\n (eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y)))\n (not (eq r F0))))
r : F
A,B,P,Q,Y : Point
*****
eq (Fplus (Fminus (Fminus (Py A P B) (Fminus F0 (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) r) (S P A Q)))) (Fminus F0 (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) r) (S P B Q)))) (Py Y P Y)) (Fminus (Fplus (Py A P B) (Fmult (Fmult r r) (Py P Q P))) (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) r) (Fplus (S A P Q) (S B P Q))))
+++++
use H.
-----
Theorem elim_py_on_perp_d_middle : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> Py A Y B = Py A U B + r * r * Py U V U - (2+2)*r*(S A U V + S B U V).
Proof.
intros.
rename U into P.
rename V into Q.
replace (Py A Y B) with (Py A P B - Py A P Y - Py B P Y + Py Y P Y) by (unfold Py; uniformize_dir_seg;basic_simpl;ring).
rewrite (elim_py_on_perp_d_right A P P Q Y r H).
rewrite (elim_py_on_perp_d_right B P P Q Y r H).
basic_simpl.
unfold on_perp_d in H.
use H.

*****
H4 : not (eq r F0)
H1 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H2 : perp Y P P Q
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
eq (Fplus (Fminus (Fminus (Py A P B) (Fminus F0 (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) r) (S P A Q)))) (Fminus F0 (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) r) (S P B Q)))) (Py Y P Y)) (Fminus (Fplus (Py A P B) (Fmult (Fmult r r) (Py P Q P))) (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) r) (Fplus (S A P Q) (S B P Q))))
+++++
assert (T:=herron_qin P Q Y).
-----
Theorem elim_py_on_perp_d_middle : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> Py A Y B = Py A U B + r * r * Py U V U - (2+2)*r*(S A U V + S B U V).
Proof.
intros.
rename U into P.
rename V into Q.
replace (Py A Y B) with (Py A P B - Py A P Y - Py B P Y + Py Y P Y) by (unfold Py; uniformize_dir_seg;basic_simpl;ring).
rewrite (elim_py_on_perp_d_right A P P Q Y r H).
rewrite (elim_py_on_perp_d_right B P P Q Y r H).
basic_simpl.
unfold on_perp_d in H.
use H.
assert (T:=herron_qin P Q Y).

*****
T : eq (Fmult (S P Q Y) (S P Q Y))\n (Fmult\n (Fdiv F1\n (Fmult\n (Fmult (Fmult (Fplus F1 F1) (Fplus F1 F1)) (Fplus F1 F1))\n (Fplus F1 F1)))\n (Fminus (Fmult (Py P Q P) (Py P Y P))\n (Fmult (Py Q P Y) (Py Q P Y))))
H4 : not (eq r F0)
H1 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H2 : perp Y P P Q
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
eq (Fplus (Fminus (Fminus (Py A P B) (Fminus F0 (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) r) (S P A Q)))) (Fminus F0 (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) r) (S P B Q)))) (Py Y P Y)) (Fminus (Fplus (Py A P B) (Fmult (Fmult r r) (Py P Q P))) (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) r) (Fplus (S A P Q) (S B P Q))))
+++++
unfold perp in H2.
-----
Theorem elim_py_on_perp_d_middle : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> Py A Y B = Py A U B + r * r * Py U V U - (2+2)*r*(S A U V + S B U V).
Proof.
intros.
rename U into P.
rename V into Q.
replace (Py A Y B) with (Py A P B - Py A P Y - Py B P Y + Py Y P Y) by (unfold Py; uniformize_dir_seg;basic_simpl;ring).
rewrite (elim_py_on_perp_d_right A P P Q Y r H).
rewrite (elim_py_on_perp_d_right B P P Q Y r H).
basic_simpl.
unfold on_perp_d in H.
use H.
assert (T:=herron_qin P Q Y).
unfold perp in H2.

*****
T : eq (Fmult (S P Q Y) (S P Q Y))\n (Fmult\n (Fdiv F1\n (Fmult\n (Fmult (Fmult (Fplus F1 F1) (Fplus F1 F1)) (Fplus F1 F1))\n (Fplus F1 F1)))\n (Fminus (Fmult (Py P Q P) (Py P Y P))\n (Fmult (Py Q P Y) (Py Q P Y))))
H4 : not (eq r F0)
H1 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H2 : eq (Py4 Y P P Q) F0
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
eq (Fplus (Fminus (Fminus (Py A P B) (Fminus F0 (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) r) (S P A Q)))) (Fminus F0 (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) r) (S P B Q)))) (Py Y P Y)) (Fminus (Fplus (Py A P B) (Fmult (Fmult r r) (Py P Q P))) (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) r) (Fplus (S A P Q) (S B P Q))))
+++++
unfold Py4 in H2.
-----
Theorem elim_py_on_perp_d_middle : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> Py A Y B = Py A U B + r * r * Py U V U - (2+2)*r*(S A U V + S B U V).
Proof.
intros.
rename U into P.
rename V into Q.
replace (Py A Y B) with (Py A P B - Py A P Y - Py B P Y + Py Y P Y) by (unfold Py; uniformize_dir_seg;basic_simpl;ring).
rewrite (elim_py_on_perp_d_right A P P Q Y r H).
rewrite (elim_py_on_perp_d_right B P P Q Y r H).
basic_simpl.
unfold on_perp_d in H.
use H.
assert (T:=herron_qin P Q Y).
unfold perp in H2.
unfold Py4 in H2.

*****
T : eq (Fmult (S P Q Y) (S P Q Y))\n (Fmult\n (Fdiv F1\n (Fmult\n (Fmult (Fmult (Fplus F1 F1) (Fplus F1 F1)) (Fplus F1 F1))\n (Fplus F1 F1)))\n (Fminus (Fmult (Py P Q P) (Py P Y P))\n (Fmult (Py Q P Y) (Py Q P Y))))
H4 : not (eq r F0)
H1 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H2 : eq (Fminus (Py Y P Q) (Py P P Q)) F0
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
eq (Fplus (Fminus (Fminus (Py A P B) (Fminus F0 (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) r) (S P A Q)))) (Fminus F0 (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) r) (S P B Q)))) (Py Y P Y)) (Fminus (Fplus (Py A P B) (Fmult (Fmult r r) (Py P Q P))) (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) r) (Fplus (S A P Q) (S B P Q))))
+++++
basic_simpl.
-----
Theorem elim_py_on_perp_d_middle : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> Py A Y B = Py A U B + r * r * Py U V U - (2+2)*r*(S A U V + S B U V).
Proof.
intros.
rename U into P.
rename V into Q.
replace (Py A Y B) with (Py A P B - Py A P Y - Py B P Y + Py Y P Y) by (unfold Py; uniformize_dir_seg;basic_simpl;ring).
rewrite (elim_py_on_perp_d_right A P P Q Y r H).
rewrite (elim_py_on_perp_d_right B P P Q Y r H).
basic_simpl.
unfold on_perp_d in H.
use H.
assert (T:=herron_qin P Q Y).
unfold perp in H2.
unfold Py4 in H2.
basic_simpl.

*****
T : eq (Fmult (S P Q Y) (S P Q Y))\n (Fmult\n (Fdiv F1\n (Fmult\n (Fmult (Fmult (Fplus F1 F1) (Fplus F1 F1)) (Fplus F1 F1))\n (Fplus F1 F1)))\n (Fminus (Fmult (Py P Q P) (Py P Y P))\n (Fmult (Py Q P Y) (Py Q P Y))))
H4 : not (eq r F0)
H1 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H2 : eq (Py Y P Q) F0
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
eq (Fplus (Fminus (Fminus (Py A P B) (Fminus F0 (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) r) (S P A Q)))) (Fminus F0 (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) r) (S P B Q)))) (Py Y P Y)) (Fminus (Fplus (Py A P B) (Fmult (Fmult r r) (Py P Q P))) (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) r) (Fplus (S A P Q) (S B P Q))))
+++++
replace (Py Q P Y) with (Py Y P Q) in * by auto with Geom.
-----
Theorem elim_py_on_perp_d_middle : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> Py A Y B = Py A U B + r * r * Py U V U - (2+2)*r*(S A U V + S B U V).
Proof.
intros.
rename U into P.
rename V into Q.
replace (Py A Y B) with (Py A P B - Py A P Y - Py B P Y + Py Y P Y) by (unfold Py; uniformize_dir_seg;basic_simpl;ring).
rewrite (elim_py_on_perp_d_right A P P Q Y r H).
rewrite (elim_py_on_perp_d_right B P P Q Y r H).
basic_simpl.
unfold on_perp_d in H.
use H.
assert (T:=herron_qin P Q Y).
unfold perp in H2.
unfold Py4 in H2.
basic_simpl.
replace (Py Q P Y) with (Py Y P Q) in * by auto with Geom.

*****
T : eq (Fmult (S P Q Y) (S P Q Y))\n (Fmult\n (Fdiv F1\n (Fmult\n (Fmult (Fmult (Fplus F1 F1) (Fplus F1 F1)) (Fplus F1 F1))\n (Fplus F1 F1)))\n (Fminus (Fmult (Py P Q P) (Py P Y P))\n (Fmult (Py Y P Q) (Py Y P Q))))
H4 : not (eq r F0)
H1 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H2 : eq (Py Y P Q) F0
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
eq (Fplus (Fminus (Fminus (Py A P B) (Fminus F0 (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) r) (S P A Q)))) (Fminus F0 (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) r) (S P B Q)))) (Py Y P Y)) (Fminus (Fplus (Py A P B) (Fmult (Fmult r r) (Py P Q P))) (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) r) (Fplus (S A P Q) (S B P Q))))
+++++
rewrite H2 in T.
-----
Theorem elim_py_on_perp_d_middle : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> Py A Y B = Py A U B + r * r * Py U V U - (2+2)*r*(S A U V + S B U V).
Proof.
intros.
rename U into P.
rename V into Q.
replace (Py A Y B) with (Py A P B - Py A P Y - Py B P Y + Py Y P Y) by (unfold Py; uniformize_dir_seg;basic_simpl;ring).
rewrite (elim_py_on_perp_d_right A P P Q Y r H).
rewrite (elim_py_on_perp_d_right B P P Q Y r H).
basic_simpl.
unfold on_perp_d in H.
use H.
assert (T:=herron_qin P Q Y).
unfold perp in H2.
unfold Py4 in H2.
basic_simpl.
replace (Py Q P Y) with (Py Y P Q) in * by auto with Geom.
rewrite H2 in T.

*****
T : eq (Fmult (S P Q Y) (S P Q Y))\n (Fmult\n (Fdiv F1\n (Fmult\n (Fmult (Fmult (Fplus F1 F1) (Fplus F1 F1)) (Fplus F1 F1))\n (Fplus F1 F1)))\n (Fminus (Fmult (Py P Q P) (Py P Y P)) (Fmult F0 F0)))
H4 : not (eq r F0)
H1 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H2 : eq (Py Y P Q) F0
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
eq (Fplus (Fminus (Fminus (Py A P B) (Fminus F0 (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) r) (S P A Q)))) (Fminus F0 (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) r) (S P B Q)))) (Py Y P Y)) (Fminus (Fplus (Py A P B) (Fmult (Fmult r r) (Py P Q P))) (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) r) (Fplus (S A P Q) (S B P Q))))
+++++
basic_simpl.
-----
Theorem elim_py_on_perp_d_middle : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> Py A Y B = Py A U B + r * r * Py U V U - (2+2)*r*(S A U V + S B U V).
Proof.
intros.
rename U into P.
rename V into Q.
replace (Py A Y B) with (Py A P B - Py A P Y - Py B P Y + Py Y P Y) by (unfold Py; uniformize_dir_seg;basic_simpl;ring).
rewrite (elim_py_on_perp_d_right A P P Q Y r H).
rewrite (elim_py_on_perp_d_right B P P Q Y r H).
basic_simpl.
unfold on_perp_d in H.
use H.
assert (T:=herron_qin P Q Y).
unfold perp in H2.
unfold Py4 in H2.
basic_simpl.
replace (Py Q P Y) with (Py Y P Q) in * by auto with Geom.
rewrite H2 in T.
basic_simpl.

*****
T : eq (Fmult (S P Q Y) (S P Q Y))\n (Fmult\n (Fdiv F1\n (Fmult\n (Fmult (Fmult (Fplus F1 F1) (Fplus F1 F1)) (Fplus F1 F1))\n (Fplus F1 F1))) (Fmult (Py P Q P) (Py P Y P)))
H4 : not (eq r F0)
H1 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H2 : eq (Py Y P Q) F0
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
eq (Fplus (Fminus (Fminus (Py A P B) (Fminus F0 (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) r) (S P A Q)))) (Fminus F0 (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) r) (S P B Q)))) (Py Y P Y)) (Fminus (Fplus (Py A P B) (Fmult (Fmult r r) (Py P Q P))) (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) r) (Fplus (S A P Q) (S B P Q))))
+++++
replace (Py P Y P) with (Py Y P Y) in * by auto with Geom.
-----
Theorem elim_py_on_perp_d_middle : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> Py A Y B = Py A U B + r * r * Py U V U - (2+2)*r*(S A U V + S B U V).
Proof.
intros.
rename U into P.
rename V into Q.
replace (Py A Y B) with (Py A P B - Py A P Y - Py B P Y + Py Y P Y) by (unfold Py; uniformize_dir_seg;basic_simpl;ring).
rewrite (elim_py_on_perp_d_right A P P Q Y r H).
rewrite (elim_py_on_perp_d_right B P P Q Y r H).
basic_simpl.
unfold on_perp_d in H.
use H.
assert (T:=herron_qin P Q Y).
unfold perp in H2.
unfold Py4 in H2.
basic_simpl.
replace (Py Q P Y) with (Py Y P Q) in * by auto with Geom.
rewrite H2 in T.
basic_simpl.
replace (Py P Y P) with (Py Y P Y) in * by auto with Geom.

*****
T : eq (Fmult (S P Q Y) (S P Q Y))\n (Fmult\n (Fdiv F1\n (Fmult\n (Fmult (Fmult (Fplus F1 F1) (Fplus F1 F1)) (Fplus F1 F1))\n (Fplus F1 F1))) (Fmult (Py P Q P) (Py Y P Y)))
H4 : not (eq r F0)
H1 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H2 : eq (Py Y P Q) F0
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
eq (Fplus (Fminus (Fminus (Py A P B) (Fminus F0 (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) r) (S P A Q)))) (Fminus F0 (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) r) (S P B Q)))) (Py Y P Y)) (Fminus (Fplus (Py A P B) (Fmult (Fmult r r) (Py P Q P))) (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) r) (Fplus (S A P Q) (S B P Q))))
+++++
IsoleVar (Py Y P Y) T.
-----
Theorem elim_py_on_perp_d_middle : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> Py A Y B = Py A U B + r * r * Py U V U - (2+2)*r*(S A U V + S B U V).
Proof.
intros.
rename U into P.
rename V into Q.
replace (Py A Y B) with (Py A P B - Py A P Y - Py B P Y + Py Y P Y) by (unfold Py; uniformize_dir_seg;basic_simpl;ring).
rewrite (elim_py_on_perp_d_right A P P Q Y r H).
rewrite (elim_py_on_perp_d_right B P P Q Y r H).
basic_simpl.
unfold on_perp_d in H.
use H.
assert (T:=herron_qin P Q Y).
unfold perp in H2.
unfold Py4 in H2.
basic_simpl.
replace (Py Q P Y) with (Py Y P Q) in * by auto with Geom.
rewrite H2 in T.
basic_simpl.
replace (Py P Y P) with (Py Y P Y) in * by auto with Geom.
IsoleVar (Py Y P Y) T.

*****
T : eq (Py Y P Y)\n (Fdiv\n (Fdiv (Fmult (S P Q Y) (S P Q Y))\n (Fdiv F1\n (Fmult\n (Fmult (Fmult (Fplus F1 F1) (Fplus F1 F1)) (Fplus F1 F1))\n (Fplus F1 F1)))) (Py P Q P))
H3 : not (eq (Py P Q P) F0)
H : not\n (eq\n (Fdiv F1\n (Fmult\n (Fmult (Fmult (Fplus F1 F1) (Fplus F1 F1)) (Fplus F1 F1))\n (Fplus F1 F1))) F0)
H4 : not (eq r F0)
H1 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H2 : eq (Py Y P Q) F0
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
eq (Fplus (Fminus (Fminus (Py A P B) (Fminus F0 (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) r) (S P A Q)))) (Fminus F0 (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) r) (S P B Q)))) (Py Y P Y)) (Fminus (Fplus (Py A P B) (Fmult (Fmult r r) (Py P Q P))) (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) r) (Fplus (S A P Q) (S B P Q))))
+++++
IsoleVar r H1.
-----
Theorem elim_py_on_perp_d_middle : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> Py A Y B = Py A U B + r * r * Py U V U - (2+2)*r*(S A U V + S B U V).
Proof.
intros.
rename U into P.
rename V into Q.
replace (Py A Y B) with (Py A P B - Py A P Y - Py B P Y + Py Y P Y) by (unfold Py; uniformize_dir_seg;basic_simpl;ring).
rewrite (elim_py_on_perp_d_right A P P Q Y r H).
rewrite (elim_py_on_perp_d_right B P P Q Y r H).
basic_simpl.
unfold on_perp_d in H.
use H.
assert (T:=herron_qin P Q Y).
unfold perp in H2.
unfold Py4 in H2.
basic_simpl.
replace (Py Q P Y) with (Py Y P Q) in * by auto with Geom.
rewrite H2 in T.
basic_simpl.
replace (Py P Y P) with (Py Y P Y) in * by auto with Geom.
IsoleVar (Py Y P Y) T.
IsoleVar r H1.

*****
H1 : eq r\n (Fdiv (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))\n (Py P Q P))
T : eq (Py Y P Y)\n (Fdiv\n (Fdiv (Fmult (S P Q Y) (S P Q Y))\n (Fdiv F1\n (Fmult\n (Fmult (Fmult (Fplus F1 F1) (Fplus F1 F1)) (Fplus F1 F1))\n (Fplus F1 F1)))) (Py P Q P))
H3 : not (eq (Py P Q P) F0)
H : not\n (eq\n (Fdiv F1\n (Fmult\n (Fmult (Fmult (Fplus F1 F1) (Fplus F1 F1)) (Fplus F1 F1))\n (Fplus F1 F1))) F0)
H4 : not (eq r F0)
H2 : eq (Py Y P Q) F0
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
eq (Fplus (Fminus (Fminus (Py A P B) (Fminus F0 (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) r) (S P A Q)))) (Fminus F0 (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) r) (S P B Q)))) (Py Y P Y)) (Fminus (Fplus (Py A P B) (Fmult (Fmult r r) (Py P Q P))) (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) r) (Fplus (S A P Q) (S B P Q))))
+++++
rewrite H1.
-----
Theorem elim_py_on_perp_d_middle : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> Py A Y B = Py A U B + r * r * Py U V U - (2+2)*r*(S A U V + S B U V).
Proof.
intros.
rename U into P.
rename V into Q.
replace (Py A Y B) with (Py A P B - Py A P Y - Py B P Y + Py Y P Y) by (unfold Py; uniformize_dir_seg;basic_simpl;ring).
rewrite (elim_py_on_perp_d_right A P P Q Y r H).
rewrite (elim_py_on_perp_d_right B P P Q Y r H).
basic_simpl.
unfold on_perp_d in H.
use H.
assert (T:=herron_qin P Q Y).
unfold perp in H2.
unfold Py4 in H2.
basic_simpl.
replace (Py Q P Y) with (Py Y P Q) in * by auto with Geom.
rewrite H2 in T.
basic_simpl.
replace (Py P Y P) with (Py Y P Y) in * by auto with Geom.
IsoleVar (Py Y P Y) T.
IsoleVar r H1.
rewrite H1.

*****
H1 : eq r\n (Fdiv (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))\n (Py P Q P))
T : eq (Py Y P Y)\n (Fdiv\n (Fdiv (Fmult (S P Q Y) (S P Q Y))\n (Fdiv F1\n (Fmult\n (Fmult (Fmult (Fplus F1 F1) (Fplus F1 F1)) (Fplus F1 F1))\n (Fplus F1 F1)))) (Py P Q P))
H3 : not (eq (Py P Q P) F0)
H : not\n (eq\n (Fdiv F1\n (Fmult\n (Fmult (Fmult (Fplus F1 F1) (Fplus F1 F1)) (Fplus F1 F1))\n (Fplus F1 F1))) F0)
H4 : not (eq r F0)
H2 : eq (Py Y P Q) F0
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
eq (Fplus (Fminus (Fminus (Py A P B) (Fminus F0 (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (Fdiv (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y)) (Py P Q P))) (S P A Q)))) (Fminus F0 (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (Fdiv (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y)) (Py P Q P))) (S P B Q)))) (Py Y P Y)) (Fminus (Fplus (Py A P B) (Fmult (Fmult (Fdiv (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y)) (Py P Q P)) (Fdiv (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y)) (Py P Q P))) (Py P Q P))) (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (Fdiv (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y)) (Py P Q P))) (Fplus (S A P Q) (S B P Q))))
+++++
rewrite T.
-----
Theorem elim_py_on_perp_d_middle : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> Py A Y B = Py A U B + r * r * Py U V U - (2+2)*r*(S A U V + S B U V).
Proof.
intros.
rename U into P.
rename V into Q.
replace (Py A Y B) with (Py A P B - Py A P Y - Py B P Y + Py Y P Y) by (unfold Py; uniformize_dir_seg;basic_simpl;ring).
rewrite (elim_py_on_perp_d_right A P P Q Y r H).
rewrite (elim_py_on_perp_d_right B P P Q Y r H).
basic_simpl.
unfold on_perp_d in H.
use H.
assert (T:=herron_qin P Q Y).
unfold perp in H2.
unfold Py4 in H2.
basic_simpl.
replace (Py Q P Y) with (Py Y P Q) in * by auto with Geom.
rewrite H2 in T.
basic_simpl.
replace (Py P Y P) with (Py Y P Y) in * by auto with Geom.
IsoleVar (Py Y P Y) T.
IsoleVar r H1.
rewrite H1.
rewrite T.

*****
H1 : eq r\n (Fdiv (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))\n (Py P Q P))
T : eq (Py Y P Y)\n (Fdiv\n (Fdiv (Fmult (S P Q Y) (S P Q Y))\n (Fdiv F1\n (Fmult\n (Fmult (Fmult (Fplus F1 F1) (Fplus F1 F1)) (Fplus F1 F1))\n (Fplus F1 F1)))) (Py P Q P))
H3 : not (eq (Py P Q P) F0)
H : not\n (eq\n (Fdiv F1\n (Fmult\n (Fmult (Fmult (Fplus F1 F1) (Fplus F1 F1)) (Fplus F1 F1))\n (Fplus F1 F1))) F0)
H4 : not (eq r F0)
H2 : eq (Py Y P Q) F0
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
eq (Fplus (Fminus (Fminus (Py A P B) (Fminus F0 (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (Fdiv (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y)) (Py P Q P))) (S P A Q)))) (Fminus F0 (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (Fdiv (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y)) (Py P Q P))) (S P B Q)))) (Fdiv (Fdiv (Fmult (S P Q Y) (S P Q Y)) (Fdiv F1 (Fmult (Fmult (Fmult (Fplus F1 F1) (Fplus F1 F1)) (Fplus F1 F1)) (Fplus F1 F1)))) (Py P Q P))) (Fminus (Fplus (Py A P B) (Fmult (Fmult (Fdiv (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y)) (Py P Q P)) (Fdiv (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y)) (Py P Q P))) (Py P Q P))) (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (Fdiv (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y)) (Py P Q P))) (Fplus (S A P Q) (S B P Q))))
+++++
uniformize_signed_areas.
-----
Theorem elim_py_on_perp_d_middle : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> Py A Y B = Py A U B + r * r * Py U V U - (2+2)*r*(S A U V + S B U V).
Proof.
intros.
rename U into P.
rename V into Q.
replace (Py A Y B) with (Py A P B - Py A P Y - Py B P Y + Py Y P Y) by (unfold Py; uniformize_dir_seg;basic_simpl;ring).
rewrite (elim_py_on_perp_d_right A P P Q Y r H).
rewrite (elim_py_on_perp_d_right B P P Q Y r H).
basic_simpl.
unfold on_perp_d in H.
use H.
assert (T:=herron_qin P Q Y).
unfold perp in H2.
unfold Py4 in H2.
basic_simpl.
replace (Py Q P Y) with (Py Y P Q) in * by auto with Geom.
rewrite H2 in T.
basic_simpl.
replace (Py P Y P) with (Py Y P Y) in * by auto with Geom.
IsoleVar (Py Y P Y) T.
IsoleVar r H1.
rewrite H1.
rewrite T.
uniformize_signed_areas.

*****
H1 : eq r\n (Fdiv (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))\n (Py P Q P))
T : eq (Py Y P Y)\n (Fdiv\n (Fdiv (Fmult (S P Q Y) (S P Q Y))\n (Fdiv F1\n (Fmult\n (Fmult (Fmult (Fplus F1 F1) (Fplus F1 F1)) (Fplus F1 F1))\n (Fplus F1 F1)))) (Py P Q P))
H3 : not (eq (Py P Q P) F0)
H : not\n (eq\n (Fdiv F1\n (Fmult\n (Fmult (Fmult (Fplus F1 F1) (Fplus F1 F1)) (Fplus F1 F1))\n (Fplus F1 F1))) F0)
H4 : not (eq r F0)
H2 : eq (Py Y P Q) F0
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
eq (Fplus (Fminus (Fminus (Py A P B) (Fminus F0 (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (Fdiv (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y)) (Py P Q P))) (S P A Q)))) (Fminus F0 (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (Fdiv (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y)) (Py P Q P))) (S P B Q)))) (Fdiv (Fdiv (Fmult (S P Q Y) (S P Q Y)) (Fdiv F1 (Fmult (Fmult (Fmult (Fplus F1 F1) (Fplus F1 F1)) (Fplus F1 F1)) (Fplus F1 F1)))) (Py P Q P))) (Fminus (Fplus (Py A P B) (Fmult (Fmult (Fdiv (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y)) (Py P Q P)) (Fdiv (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y)) (Py P Q P))) (Py P Q P))) (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (Fdiv (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y)) (Py P Q P))) (Fplus (Fopp (S P A Q)) (Fopp (S P B Q)))))
+++++
field.
-----
Theorem elim_py_on_perp_d_middle : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> Py A Y B = Py A U B + r * r * Py U V U - (2+2)*r*(S A U V + S B U V).
Proof.
intros.
rename U into P.
rename V into Q.
replace (Py A Y B) with (Py A P B - Py A P Y - Py B P Y + Py Y P Y) by (unfold Py; uniformize_dir_seg;basic_simpl;ring).
rewrite (elim_py_on_perp_d_right A P P Q Y r H).
rewrite (elim_py_on_perp_d_right B P P Q Y r H).
basic_simpl.
unfold on_perp_d in H.
use H.
assert (T:=herron_qin P Q Y).
unfold perp in H2.
unfold Py4 in H2.
basic_simpl.
replace (Py Q P Y) with (Py Y P Q) in * by auto with Geom.
rewrite H2 in T.
basic_simpl.
replace (Py P Y P) with (Py Y P Y) in * by auto with Geom.
IsoleVar (Py Y P Y) T.
IsoleVar r H1.
rewrite H1.
rewrite T.
uniformize_signed_areas.
field.

*****
H1 : eq r\n (Fdiv (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))\n (Py P Q P))
T : eq (Py Y P Y)\n (Fdiv\n (Fdiv (Fmult (S P Q Y) (S P Q Y))\n (Fdiv F1\n (Fmult\n (Fmult (Fmult (Fplus F1 F1) (Fplus F1 F1)) (Fplus F1 F1))\n (Fplus F1 F1)))) (Py P Q P))
H3 : not (eq (Py P Q P) F0)
H : not\n (eq\n (Fdiv F1\n (Fmult\n (Fmult (Fmult (Fplus F1 F1) (Fplus F1 F1)) (Fplus F1 F1))\n (Fplus F1 F1))) F0)
H4 : not (eq r F0)
H2 : eq (Py Y P Q) F0
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
and (not (eq (Py P Q P) F0)) (and (not (eq (Fmult (Fplus F1 F1) (Fmult (Fplus F1 F1) (Fmult (Fplus F1 F1) (Fplus F1 F1)))) F0)) (not (eq F1 F0)))
+++++
solve_conds.
-----
Theorem elim_py_on_perp_d_middle : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> Py A Y B = Py A U B + r * r * Py U V U - (2+2)*r*(S A U V + S B U V).
Proof.
intros.
rename U into P.
rename V into Q.
replace (Py A Y B) with (Py A P B - Py A P Y - Py B P Y + Py Y P Y) by (unfold Py; uniformize_dir_seg;basic_simpl;ring).
rewrite (elim_py_on_perp_d_right A P P Q Y r H).
rewrite (elim_py_on_perp_d_right B P P Q Y r H).
basic_simpl.
unfold on_perp_d in H.
use H.
assert (T:=herron_qin P Q Y).
unfold perp in H2.
unfold Py4 in H2.
basic_simpl.
replace (Py Q P Y) with (Py Y P Q) in * by auto with Geom.
rewrite H2 in T.
basic_simpl.
replace (Py P Y P) with (Py Y P Y) in * by auto with Geom.
IsoleVar (Py Y P Y) T.
IsoleVar r H1.
rewrite H1.
rewrite T.
uniformize_signed_areas.
field.
solve_conds.

*****
H1 : eq r\n (Fdiv (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))\n (Py P Q P))
T : eq (Py Y P Y)\n (Fdiv\n (Fdiv (Fmult (S P Q Y) (S P Q Y))\n (Fdiv F1\n (Fmult\n (Fmult (Fmult (Fplus F1 F1) (Fplus F1 F1)) (Fplus F1 F1))\n (Fplus F1 F1)))) (Py P Q P))
H3 : not (eq (Py P Q P) F0)
H : not\n (eq\n (Fdiv F1\n (Fmult\n (Fmult (Fmult (Fplus F1 F1) (Fplus F1 F1)) (Fplus F1 F1))\n (Fplus F1 F1))) F0)
H4 : not (eq r F0)
H2 : eq (Py Y P Q) F0
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
not (eq F1 F0)
+++++
auto with field_hints.
-----
Theorem elim_py_on_perp_d_middle : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> Py A Y B = Py A U B + r * r * Py U V U - (2+2)*r*(S A U V + S B U V).
Proof.
intros.
rename U into P.
rename V into Q.
replace (Py A Y B) with (Py A P B - Py A P Y - Py B P Y + Py Y P Y) by (unfold Py; uniformize_dir_seg;basic_simpl;ring).
rewrite (elim_py_on_perp_d_right A P P Q Y r H).
rewrite (elim_py_on_perp_d_right B P P Q Y r H).
basic_simpl.
unfold on_perp_d in H.
use H.
assert (T:=herron_qin P Q Y).
unfold perp in H2.
unfold Py4 in H2.
basic_simpl.
replace (Py Q P Y) with (Py Y P Q) in * by auto with Geom.
rewrite H2 in T.
basic_simpl.
replace (Py P Y P) with (Py Y P Y) in * by auto with Geom.
IsoleVar (Py Y P Y) T.

*****
H : not\n (eq\n (Fdiv F1\n (Fmult\n (Fmult (Fmult (Fplus F1 F1) (Fplus F1 F1)) (Fplus F1 F1))\n (Fplus F1 F1))) F0)
T : eq (Fmult (S P Q Y) (S P Q Y))\n (Fmult\n (Fdiv F1\n (Fmult\n (Fmult (Fmult (Fplus F1 F1) (Fplus F1 F1)) (Fplus F1 F1))\n (Fplus F1 F1))) (Fmult (Py P Q P) (Py Y P Y)))
H4 : not (eq r F0)
H1 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H2 : eq (Py Y P Q) F0
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
not (eq (Py P Q P) F0)
+++++
auto with Geom.
-----
Theorem elim_py_on_perp_d_middle : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> Py A Y B = Py A U B + r * r * Py U V U - (2+2)*r*(S A U V + S B U V).
Proof.
intros.
rename U into P.
rename V into Q.
replace (Py A Y B) with (Py A P B - Py A P Y - Py B P Y + Py Y P Y) by (unfold Py; uniformize_dir_seg;basic_simpl;ring).
rewrite (elim_py_on_perp_d_right A P P Q Y r H).
rewrite (elim_py_on_perp_d_right B P P Q Y r H).
basic_simpl.
unfold on_perp_d in H.
use H.
assert (T:=herron_qin P Q Y).
unfold perp in H2.
unfold Py4 in H2.
basic_simpl.
replace (Py Q P Y) with (Py Y P Q) in * by auto with Geom.
rewrite H2 in T.
basic_simpl.
replace (Py P Y P) with (Py Y P Y) in * by auto with Geom.
IsoleVar (Py Y P Y) T.

*****
T : eq (Fmult (S P Q Y) (S P Q Y))\n (Fmult\n (Fdiv F1\n (Fmult\n (Fmult (Fmult (Fplus F1 F1) (Fplus F1 F1)) (Fplus F1 F1))\n (Fplus F1 F1))) (Fmult (Py P Q P) (Py Y P Y)))
H4 : not (eq r F0)
H1 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H2 : eq (Py Y P Q) F0
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
not (eq (Fdiv F1 (Fmult (Fmult (Fmult (Fplus F1 F1) (Fplus F1 F1)) (Fplus F1 F1)) (Fplus F1 F1))) F0)
+++++
solve_conds.
-----
Theorem elim_py_on_perp_d_middle : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> Py A Y B = Py A U B + r * r * Py U V U - (2+2)*r*(S A U V + S B U V).
Proof.
intros.
rename U into P.
rename V into Q.
replace (Py A Y B) with (Py A P B - Py A P Y - Py B P Y + Py Y P Y) by (unfold Py; uniformize_dir_seg;basic_simpl;ring).
rewrite (elim_py_on_perp_d_right A P P Q Y r H).
rewrite (elim_py_on_perp_d_right B P P Q Y r H).
basic_simpl.
unfold on_perp_d in H.
use H.
assert (T:=herron_qin P Q Y).
unfold perp in H2.
unfold Py4 in H2.
basic_simpl.
replace (Py Q P Y) with (Py Y P Q) in * by auto with Geom.
rewrite H2 in T.
basic_simpl.
replace (Py P Y P) with (Py Y P Y) in * by auto with Geom.
IsoleVar (Py Y P Y) T.
solve_conds.

*****
T : eq (Fmult (S P Q Y) (S P Q Y))\n (Fmult\n (Fdiv F1\n (Fmult\n (Fmult (Fmult (Fplus F1 F1) (Fplus F1 F1)) (Fplus F1 F1))\n (Fplus F1 F1))) (Fmult (Py P Q P) (Py Y P Y)))
H4 : not (eq r F0)
H1 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H2 : eq (Py Y P Q) F0
H0 : not (eq P Q)
r : F
A,B,P,Q,Y : Point
*****
not (eq F1 F0)
+++++
auto with field_hints.
-----
Theorem elim_py_on_perp_d_middle : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> Py A Y B = Py A U B + r * r * Py U V U - (2+2)*r*(S A U V + S B U V).
Proof.
intros.
rename U into P.
rename V into Q.
replace (Py A Y B) with (Py A P B - Py A P Y - Py B P Y + Py Y P Y) by (unfold Py; uniformize_dir_seg;basic_simpl;ring).
rewrite (elim_py_on_perp_d_right A P P Q Y r H).
rewrite (elim_py_on_perp_d_right B P P Q Y r H).
basic_simpl.
unfold on_perp_d in H.
use H.
assert (T:=herron_qin P Q Y).
unfold perp in H2.
unfold Py4 in H2.
basic_simpl.
replace (Py Q P Y) with (Py Y P Q) in * by auto with Geom.
rewrite H2 in T.
basic_simpl.
replace (Py P Y P) with (Py Y P Y) in * by auto with Geom.
IsoleVar (Py Y P Y) T.

*****

*****

+++++
Qed.
-----
Theorem elim_area_on_perp_d :\nforall A B U V Y : Point, forall r: F,\non_perp_d Y U V r ->\nS A B Y = S A B U - r / (2+2)  * Py4 U A V B.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.

*****

*****
forall (A B U V Y : Point) (r : F) (_ : on_perp_d Y U V r), eq (S A B Y) (Fminus (S A B U) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py4 U A V B)))
+++++
Proof.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.

*****

*****
forall (A B U V Y : Point) (r : F) (_ : on_perp_d Y U V r), eq (S A B Y) (Fminus (S A B U) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py4 U A V B)))
+++++
intros A B U V Y r.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.

*****
r : F
A,B,U,V,Y : Point
*****
forall _ : on_perp_d Y U V r, eq (S A B Y) (Fminus (S A B U) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py4 U A V B)))
+++++
intros.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.

*****
H : on_perp_d Y U V r
r : F
A,B,U,V,Y : Point
*****
eq (S A B Y) (Fminus (S A B U) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py4 U A V B)))
+++++
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.

*****
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
H : on_perp_d Y U V r
r : F
A,B,U,V,Y : Point
*****
eq (S A B Y) (Fminus (S A B U) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py4 U A V B)))
+++++
rewrite H0.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.

*****
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
H : on_perp_d Y U V r
r : F
A,B,U,V,Y : Point
*****
eq (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y)) (Fminus (S A B U) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py4 U A V B)))
+++++
assert (Hyuv :~ Col Y U V).
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).

*****
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
H : on_perp_d Y U V r
r : F
A,B,U,V,Y : Point
*****
not (Col Y U V)
+++++
unfold on_perp_d in H.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.

*****
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
H : and (not (eq U V))\n (and (perp Y U U V)\n (and\n (eq (Fmult r (Py U V U))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S U V Y)))\n (not (eq r F0))))
r : F
A,B,U,V,Y : Point
*****
not (Col Y U V)
+++++
use H.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.

*****
H5 : not (eq r F0)
H2 : eq (Fmult r (Py U V U))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S U V Y))
H3 : perp Y U U V
H1 : not (eq U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
r : F
A,B,U,V,Y : Point
*****
not (Col Y U V)
+++++
intro.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.

*****
H : Col Y U V
H5 : not (eq r F0)
H2 : eq (Fmult r (Py U V U))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S U V Y))
H3 : perp Y U U V
H1 : not (eq U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
r : F
A,B,U,V,Y : Point
*****
False
+++++
assert (Col U V Y) by auto with Geom.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.

*****
H4 : Col U V Y
H : Col Y U V
H5 : not (eq r F0)
H2 : eq (Fmult r (Py U V U))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S U V Y))
H3 : perp Y U U V
H1 : not (eq U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
r : F
A,B,U,V,Y : Point
*****
False
+++++
rewrite H4 in H2.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.

*****
H4 : Col U V Y
H : Col Y U V
H5 : not (eq r F0)
H2 : eq (Fmult r (Py U V U)) (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) F0)
H3 : perp Y U U V
H1 : not (eq U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
r : F
A,B,U,V,Y : Point
*****
False
+++++
basic_simpl.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.

*****
H4 : Col U V Y
H : Col Y U V
H5 : not (eq r F0)
H2 : eq (Fmult r (Py U V U)) F0
H3 : perp Y U U V
H1 : not (eq U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
r : F
A,B,U,V,Y : Point
*****
False
+++++
IsoleVar r H2.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.

*****
H2 : eq r (Fdiv F0 (Py U V U))
H6 : not (eq (Py U V U) F0)
H4 : Col U V Y
H : Col Y U V
H5 : not (eq r F0)
H3 : perp Y U U V
H1 : not (eq U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
r : F
A,B,U,V,Y : Point
*****
False
+++++
replace (0 / Py U V U) with 0 in H2.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.

*****
H2 : eq r F0
H6 : not (eq (Py U V U) F0)
H4 : Col U V Y
H : Col Y U V
H5 : not (eq r F0)
H3 : perp Y U U V
H1 : not (eq U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
r : F
A,B,U,V,Y : Point
*****
False
+++++
2:field;auto.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.

*****
H2 : eq r F0
H6 : not (eq (Py U V U) F0)
H4 : Col U V Y
H : Col Y U V
H5 : not (eq r F0)
H3 : perp Y U U V
H1 : not (eq U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
r : F
A,B,U,V,Y : Point
*****
False
+++++
2:auto with Geom.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.

*****
H2 : eq r F0
H6 : not (eq (Py U V U) F0)
H4 : Col U V Y
H : Col Y U V
H5 : not (eq r F0)
H3 : perp Y U U V
H1 : not (eq U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
r : F
A,B,U,V,Y : Point
*****
False
+++++
intuition.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.

*****
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
H : on_perp_d Y U V r
r : F
A,B,U,V,Y : Point
*****
eq (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y)) (Fminus (S A B U) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py4 U A V B)))
+++++
elim (proj_ex A U V).
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).

*****
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
H : on_perp_d Y U V r
r : F
A,B,U,V,Y : Point
*****
forall (x : Point) (_ : on_foot x A U V), eq (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y)) (Fminus (S A B U) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py4 U A V B)))
+++++
intros A1 HA1.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.

*****
HA1 : on_foot A1 A U V
A1 : Point
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
H : on_perp_d Y U V r
r : F
A,B,U,V,Y : Point
*****
eq (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y)) (Fminus (S A B U) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py4 U A V B)))
+++++
2:unfold on_perp_d in H;intuition.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.

*****
HA1 : on_foot A1 A U V
A1 : Point
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
H : on_perp_d Y U V r
r : F
A,B,U,V,Y : Point
*****
eq (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y)) (Fminus (S A B U) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py4 U A V B)))
+++++
assert (S U A Y = Py A U V / Py U V U * S U V Y).
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).

*****
HA1 : on_foot A1 A U V
A1 : Point
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
H : on_perp_d Y U V r
r : F
A,B,U,V,Y : Point
*****
eq (S U A Y) (Fmult (Fdiv (Py A U V) (Py U V U)) (S U V Y))
+++++
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).

*****
HA1 : on_foot A1 A U V
A1 : Point
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
H : on_perp_d Y U V r
r : F
A,B,U,V,Y : Point
*****
eq (Fdiv (S U A Y) (S U V Y)) (Fdiv (S U A1 Y) (S U V Y))
+++++
replace (S U A Y) with (S U A1 Y).
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).

*****
HA1 : on_foot A1 A U V
A1 : Point
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
H : on_perp_d Y U V r
r : F
A,B,U,V,Y : Point
*****
eq (Fdiv (S U A1 Y) (S U V Y)) (Fdiv (S U A1 Y) (S U V Y))
+++++
auto.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.

*****
HA1 : on_foot A1 A U V
A1 : Point
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
H : on_perp_d Y U V r
r : F
A,B,U,V,Y : Point
*****
eq (S U A1 Y) (S U A Y)
+++++
unfold on_foot in *.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.

*****
HA1 : and (perp A1 A U V) (and (Col A1 U V) (not (eq U V)))
A1 : Point
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
H : on_perp_d Y U V r
r : F
A,B,U,V,Y : Point
*****
eq (S U A1 Y) (S U A Y)
+++++
use HA1.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.

*****
H4 : not (eq U V)
H3 : Col A1 U V
H1 : perp A1 A U V
A1 : Point
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
H : on_perp_d Y U V r
r : F
A,B,U,V,Y : Point
*****
eq (S U A1 Y) (S U A Y)
+++++
unfold on_perp_d in *.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.

*****
H4 : not (eq U V)
H3 : Col A1 U V
H1 : perp A1 A U V
A1 : Point
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
H : and (not (eq U V))\n (and (perp Y U U V)\n (and\n (eq (Fmult r (Py U V U))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S U V Y)))\n (not (eq r F0))))
r : F
A,B,U,V,Y : Point
*****
eq (S U A1 Y) (S U A Y)
+++++
use H.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.
use H.

*****
H8 : not (eq r F0)
H5 : eq (Fmult r (Py U V U))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S U V Y))
H6 : perp Y U U V
H4,H2 : not (eq U V)
H3 : Col A1 U V
H1 : perp A1 A U V
A1 : Point
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
r : F
A,B,U,V,Y : Point
*****
eq (S U A1 Y) (S U A Y)
+++++
assert (parallel A1 A Y U).
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.
use H.
assert (parallel A1 A Y U).

*****
H8 : not (eq r F0)
H5 : eq (Fmult r (Py U V U))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S U V Y))
H6 : perp Y U U V
H4,H2 : not (eq U V)
H3 : Col A1 U V
H1 : perp A1 A U V
A1 : Point
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
r : F
A,B,U,V,Y : Point
*****
parallel A1 A Y U
+++++
apply (perp_perp_para A1 A U V Y U);auto with Geom.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.
use H.
assert (parallel A1 A Y U).
apply (perp_perp_para A1 A U V Y U);auto with Geom.

*****
H : parallel A1 A Y U
H8 : not (eq r F0)
H5 : eq (Fmult r (Py U V U))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S U V Y))
H6 : perp Y U U V
H4,H2 : not (eq U V)
H3 : Col A1 U V
H1 : perp A1 A U V
A1 : Point
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
r : F
A,B,U,V,Y : Point
*****
eq (S U A1 Y) (S U A Y)
+++++
assert (parallel Y U A1 A) by auto with Geom.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.
use H.
assert (parallel A1 A Y U).
apply (perp_perp_para A1 A U V Y U);auto with Geom.
assert (parallel Y U A1 A) by auto with Geom.

*****
H7 : parallel Y U A1 A
H : parallel A1 A Y U
H8 : not (eq r F0)
H5 : eq (Fmult r (Py U V U))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S U V Y))
H6 : perp Y U U V
H4,H2 : not (eq U V)
H3 : Col A1 U V
H1 : perp A1 A U V
A1 : Point
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
r : F
A,B,U,V,Y : Point
*****
eq (S U A1 Y) (S U A Y)
+++++
unfold parallel, S4 in H7.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.
use H.
assert (parallel A1 A Y U).
apply (perp_perp_para A1 A U V Y U);auto with Geom.
assert (parallel Y U A1 A) by auto with Geom.
unfold parallel, S4 in H7.

*****
H7 : eq (Fplus (S Y A1 U) (S Y U A)) F0
H : parallel A1 A Y U
H8 : not (eq r F0)
H5 : eq (Fmult r (Py U V U))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S U V Y))
H6 : perp Y U U V
H4,H2 : not (eq U V)
H3 : Col A1 U V
H1 : perp A1 A U V
A1 : Point
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
r : F
A,B,U,V,Y : Point
*****
eq (S U A1 Y) (S U A Y)
+++++
uniformize_signed_areas.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.
use H.
assert (parallel A1 A Y U).
apply (perp_perp_para A1 A U V Y U);auto with Geom.
assert (parallel Y U A1 A) by auto with Geom.
unfold parallel, S4 in H7.
uniformize_signed_areas.

*****
H7 : eq (Fplus (S Y A1 U) (Fopp (S A U Y))) F0
H5 : eq (Fmult r (Py U V U))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S U V Y))
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
H : parallel A1 A Y U
H8 : not (eq r F0)
H6 : perp Y U U V
H4,H2 : not (eq U V)
H3 : Col A1 U V
H1 : perp A1 A U V
A1 : Point
Hyuv : not (Col Y U V)
r : F
A,B,U,V,Y : Point
*****
eq (Fopp (S Y A1 U)) (Fopp (S A U Y))
+++++
IsoleVar (S Y A1 U) H7.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.
use H.
assert (parallel A1 A Y U).
apply (perp_perp_para A1 A U V Y U);auto with Geom.
assert (parallel Y U A1 A) by auto with Geom.
unfold parallel, S4 in H7.
uniformize_signed_areas.
IsoleVar (S Y A1 U) H7.

*****
H7 : eq (S Y A1 U) (Fminus F0 (Fopp (S A U Y)))
H5 : eq (Fmult r (Py U V U))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S U V Y))
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
H : parallel A1 A Y U
H8 : not (eq r F0)
H6 : perp Y U U V
H4,H2 : not (eq U V)
H3 : Col A1 U V
H1 : perp A1 A U V
A1 : Point
Hyuv : not (Col Y U V)
r : F
A,B,U,V,Y : Point
*****
eq (Fopp (S Y A1 U)) (Fopp (S A U Y))
+++++
rewrite H7.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.
use H.
assert (parallel A1 A Y U).
apply (perp_perp_para A1 A U V Y U);auto with Geom.
assert (parallel Y U A1 A) by auto with Geom.
unfold parallel, S4 in H7.
uniformize_signed_areas.
IsoleVar (S Y A1 U) H7.
rewrite H7.

*****
H7 : eq (S Y A1 U) (Fminus F0 (Fopp (S A U Y)))
H5 : eq (Fmult r (Py U V U))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S U V Y))
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
H : parallel A1 A Y U
H8 : not (eq r F0)
H6 : perp Y U U V
H4,H2 : not (eq U V)
H3 : Col A1 U V
H1 : perp A1 A U V
A1 : Point
Hyuv : not (Col Y U V)
r : F
A,B,U,V,Y : Point
*****
eq (Fopp (Fminus F0 (Fopp (S A U Y)))) (Fopp (S A U Y))
+++++
ring.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.
use H.
assert (parallel A1 A Y U).
apply (perp_perp_para A1 A U V Y U);auto with Geom.
assert (parallel Y U A1 A) by auto with Geom.
unfold parallel, S4 in H7.
uniformize_signed_areas.
IsoleVar (S Y A1 U) H7.
rewrite H7.
ring.

*****
H1 : eq (Fdiv (S U A Y) (S U V Y)) (Fdiv (S U A1 Y) (S U V Y))
HA1 : on_foot A1 A U V
A1 : Point
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
H : on_perp_d Y U V r
r : F
A,B,U,V,Y : Point
*****
eq (S U A Y) (Fmult (Fdiv (Py A U V) (Py U V U)) (S U V Y))
+++++
assert ( S U A1 Y / S U V Y = U**A1 / U**V).
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.
use H.
assert (parallel A1 A Y U).
apply (perp_perp_para A1 A U V Y U);auto with Geom.
assert (parallel Y U A1 A) by auto with Geom.
unfold parallel, S4 in H7.
uniformize_signed_areas.
IsoleVar (S Y A1 U) H7.
rewrite H7.
ring.
assert ( S U A1 Y / S U V Y = U**A1 / U**V).

*****
H1 : eq (Fdiv (S U A Y) (S U V Y)) (Fdiv (S U A1 Y) (S U V Y))
HA1 : on_foot A1 A U V
A1 : Point
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
H : on_perp_d Y U V r
r : F
A,B,U,V,Y : Point
*****
eq (Fdiv (S U A1 Y) (S U V Y)) (Fdiv (DSeg U A1) (DSeg U V))
+++++
rewrite (A6 U A1 V Y).
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.
use H.
assert (parallel A1 A Y U).
apply (perp_perp_para A1 A U V Y U);auto with Geom.
assert (parallel Y U A1 A) by auto with Geom.
unfold parallel, S4 in H7.
uniformize_signed_areas.
IsoleVar (S Y A1 U) H7.
rewrite H7.
ring.
assert ( S U A1 Y / S U V Y = U**A1 / U**V).
rewrite (A6 U A1 V Y).

*****
H1 : eq (Fdiv (S U A Y) (S U V Y)) (Fdiv (S U A1 Y) (S U V Y))
HA1 : on_foot A1 A U V
A1 : Point
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
H : on_perp_d Y U V r
r : F
A,B,U,V,Y : Point
*****
eq (Fdiv (S U A1 Y) (S U V Y)) (Fdiv (S Y U A1) (S Y U V))
+++++
uniformize_signed_areas.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.
use H.
assert (parallel A1 A Y U).
apply (perp_perp_para A1 A U V Y U);auto with Geom.
assert (parallel Y U A1 A) by auto with Geom.
unfold parallel, S4 in H7.
uniformize_signed_areas.
IsoleVar (S Y A1 U) H7.
rewrite H7.
ring.
assert ( S U A1 Y / S U V Y = U**A1 / U**V).
rewrite (A6 U A1 V Y).
uniformize_signed_areas.

*****
H1 : eq (Fdiv (Fopp (S A U Y)) (S U V Y)) (Fdiv (S U A1 Y) (S U V Y))
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
HA1 : on_foot A1 A U V
A1 : Point
Hyuv : not (Col Y U V)
H : on_perp_d Y U V r
r : F
A,B,U,V,Y : Point
*****
eq (Fdiv (S U A1 Y) (S U V Y)) (Fdiv (S U A1 Y) (S U V Y))
+++++
auto with Geom.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.
use H.
assert (parallel A1 A Y U).
apply (perp_perp_para A1 A U V Y U);auto with Geom.
assert (parallel Y U A1 A) by auto with Geom.
unfold parallel, S4 in H7.
uniformize_signed_areas.
IsoleVar (S Y A1 U) H7.
rewrite H7.
ring.
assert ( S U A1 Y / S U V Y = U**A1 / U**V).
rewrite (A6 U A1 V Y).
uniformize_signed_areas.
auto with Geom.

*****
H1 : eq (Fdiv (S U A Y) (S U V Y)) (Fdiv (S U A1 Y) (S U V Y))
HA1 : on_foot A1 A U V
A1 : Point
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
H : on_perp_d Y U V r
r : F
A,B,U,V,Y : Point
*****
not (eq U V)
+++++
unfold on_perp_d in H.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.
use H.
assert (parallel A1 A Y U).
apply (perp_perp_para A1 A U V Y U);auto with Geom.
assert (parallel Y U A1 A) by auto with Geom.
unfold parallel, S4 in H7.
uniformize_signed_areas.
IsoleVar (S Y A1 U) H7.
rewrite H7.
ring.
assert ( S U A1 Y / S U V Y = U**A1 / U**V).
rewrite (A6 U A1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.

*****
H1 : eq (Fdiv (S U A Y) (S U V Y)) (Fdiv (S U A1 Y) (S U V Y))
HA1 : on_foot A1 A U V
A1 : Point
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
H : and (not (eq U V))\n (and (perp Y U U V)\n (and\n (eq (Fmult r (Py U V U))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S U V Y)))\n (not (eq r F0))))
r : F
A,B,U,V,Y : Point
*****
not (eq U V)
+++++
use H;auto.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.
use H.
assert (parallel A1 A Y U).
apply (perp_perp_para A1 A U V Y U);auto with Geom.
assert (parallel Y U A1 A) by auto with Geom.
unfold parallel, S4 in H7.
uniformize_signed_areas.
IsoleVar (S Y A1 U) H7.
rewrite H7.
ring.
assert ( S U A1 Y / S U V Y = U**A1 / U**V).
rewrite (A6 U A1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.

*****
H1 : eq (Fdiv (S U A Y) (S U V Y)) (Fdiv (S U A1 Y) (S U V Y))
HA1 : on_foot A1 A U V
A1 : Point
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
H : on_perp_d Y U V r
r : F
A,B,U,V,Y : Point
*****
not (Col Y U V)
+++++
unfold on_perp_d in H.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.
use H.
assert (parallel A1 A Y U).
apply (perp_perp_para A1 A U V Y U);auto with Geom.
assert (parallel Y U A1 A) by auto with Geom.
unfold parallel, S4 in H7.
uniformize_signed_areas.
IsoleVar (S Y A1 U) H7.
rewrite H7.
ring.
assert ( S U A1 Y / S U V Y = U**A1 / U**V).
rewrite (A6 U A1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.

*****
H1 : eq (Fdiv (S U A Y) (S U V Y)) (Fdiv (S U A1 Y) (S U V Y))
HA1 : on_foot A1 A U V
A1 : Point
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
H : and (not (eq U V))\n (and (perp Y U U V)\n (and\n (eq (Fmult r (Py U V U))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S U V Y)))\n (not (eq r F0))))
r : F
A,B,U,V,Y : Point
*****
not (Col Y U V)
+++++
use H.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.
use H.
assert (parallel A1 A Y U).
apply (perp_perp_para A1 A U V Y U);auto with Geom.
assert (parallel Y U A1 A) by auto with Geom.
unfold parallel, S4 in H7.
uniformize_signed_areas.
IsoleVar (S Y A1 U) H7.
rewrite H7.
ring.
assert ( S U A1 Y / S U V Y = U**A1 / U**V).
rewrite (A6 U A1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.

*****
H6 : not (eq r F0)
H3 : eq (Fmult r (Py U V U))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S U V Y))
H4 : perp Y U U V
H2 : not (eq U V)
H1 : eq (Fdiv (S U A Y) (S U V Y)) (Fdiv (S U A1 Y) (S U V Y))
HA1 : on_foot A1 A U V
A1 : Point
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
r : F
A,B,U,V,Y : Point
*****
not (Col Y U V)
+++++
auto.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.
use H.
assert (parallel A1 A Y U).
apply (perp_perp_para A1 A U V Y U);auto with Geom.
assert (parallel Y U A1 A) by auto with Geom.
unfold parallel, S4 in H7.
uniformize_signed_areas.
IsoleVar (S Y A1 U) H7.
rewrite H7.
ring.
assert ( S U A1 Y / S U V Y = U**A1 / U**V).
rewrite (A6 U A1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.

*****
H1 : eq (Fdiv (S U A Y) (S U V Y)) (Fdiv (S U A1 Y) (S U V Y))
HA1 : on_foot A1 A U V
A1 : Point
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
H : on_perp_d Y U V r
r : F
A,B,U,V,Y : Point
*****
Col U A1 V
+++++
unfold on_foot in *.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.
use H.
assert (parallel A1 A Y U).
apply (perp_perp_para A1 A U V Y U);auto with Geom.
assert (parallel Y U A1 A) by auto with Geom.
unfold parallel, S4 in H7.
uniformize_signed_areas.
IsoleVar (S Y A1 U) H7.
rewrite H7.
ring.
assert ( S U A1 Y / S U V Y = U**A1 / U**V).
rewrite (A6 U A1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.

*****
H1 : eq (Fdiv (S U A Y) (S U V Y)) (Fdiv (S U A1 Y) (S U V Y))
HA1 : and (perp A1 A U V) (and (Col A1 U V) (not (eq U V)))
A1 : Point
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
H : on_perp_d Y U V r
r : F
A,B,U,V,Y : Point
*****
Col U A1 V
+++++
use HA1.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.
use H.
assert (parallel A1 A Y U).
apply (perp_perp_para A1 A U V Y U);auto with Geom.
assert (parallel Y U A1 A) by auto with Geom.
unfold parallel, S4 in H7.
uniformize_signed_areas.
IsoleVar (S Y A1 U) H7.
rewrite H7.
ring.
assert ( S U A1 Y / S U V Y = U**A1 / U**V).
rewrite (A6 U A1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HA1.

*****
H5 : not (eq U V)
H4 : Col A1 U V
H2 : perp A1 A U V
H1 : eq (Fdiv (S U A Y) (S U V Y)) (Fdiv (S U A1 Y) (S U V Y))
A1 : Point
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
H : on_perp_d Y U V r
r : F
A,B,U,V,Y : Point
*****
Col U A1 V
+++++
auto with Geom.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.
use H.
assert (parallel A1 A Y U).
apply (perp_perp_para A1 A U V Y U);auto with Geom.
assert (parallel Y U A1 A) by auto with Geom.
unfold parallel, S4 in H7.
uniformize_signed_areas.
IsoleVar (S Y A1 U) H7.
rewrite H7.
ring.
assert ( S U A1 Y / S U V Y = U**A1 / U**V).
rewrite (A6 U A1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HA1.
auto with Geom.

*****
H2 : eq (Fdiv (S U A1 Y) (S U V Y)) (Fdiv (DSeg U A1) (DSeg U V))
H1 : eq (Fdiv (S U A Y) (S U V Y)) (Fdiv (S U A1 Y) (S U V Y))
HA1 : on_foot A1 A U V
A1 : Point
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
H : on_perp_d Y U V r
r : F
A,B,U,V,Y : Point
*****
eq (S U A Y) (Fmult (Fdiv (Py A U V) (Py U V U)) (S U V Y))
+++++
assert (U**A1 / U**V = Py A1 U V / Py U V U).
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.
use H.
assert (parallel A1 A Y U).
apply (perp_perp_para A1 A U V Y U);auto with Geom.
assert (parallel Y U A1 A) by auto with Geom.
unfold parallel, S4 in H7.
uniformize_signed_areas.
IsoleVar (S Y A1 U) H7.
rewrite H7.
ring.
assert ( S U A1 Y / S U V Y = U**A1 / U**V).
rewrite (A6 U A1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HA1.
auto with Geom.
assert (U**A1 / U**V = Py A1 U V / Py U V U).

*****
H2 : eq (Fdiv (S U A1 Y) (S U V Y)) (Fdiv (DSeg U A1) (DSeg U V))
H1 : eq (Fdiv (S U A Y) (S U V Y)) (Fdiv (S U A1 Y) (S U V Y))
HA1 : on_foot A1 A U V
A1 : Point
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
H : on_perp_d Y U V r
r : F
A,B,U,V,Y : Point
*****
eq (Fdiv (DSeg U A1) (DSeg U V)) (Fdiv (Py A1 U V) (Py U V U))
+++++
rewrite col_pyth.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.
use H.
assert (parallel A1 A Y U).
apply (perp_perp_para A1 A U V Y U);auto with Geom.
assert (parallel Y U A1 A) by auto with Geom.
unfold parallel, S4 in H7.
uniformize_signed_areas.
IsoleVar (S Y A1 U) H7.
rewrite H7.
ring.
assert ( S U A1 Y / S U V Y = U**A1 / U**V).
rewrite (A6 U A1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HA1.
auto with Geom.
assert (U**A1 / U**V = Py A1 U V / Py U V U).
rewrite col_pyth.

*****
H2 : eq (Fdiv (S U A1 Y) (S U V Y)) (Fdiv (DSeg U A1) (DSeg U V))
H1 : eq (Fdiv (S U A Y) (S U V Y)) (Fdiv (S U A1 Y) (S U V Y))
HA1 : on_foot A1 A U V
A1 : Point
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
H : on_perp_d Y U V r
r : F
A,B,U,V,Y : Point
*****
eq (Fdiv (DSeg U A1) (DSeg U V)) (Fdiv (Fmult (Fmult (Fplus F1 F1) (DSeg U A1)) (DSeg U V)) (Py U V U))
+++++
unfold Py.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.
use H.
assert (parallel A1 A Y U).
apply (perp_perp_para A1 A U V Y U);auto with Geom.
assert (parallel Y U A1 A) by auto with Geom.
unfold parallel, S4 in H7.
uniformize_signed_areas.
IsoleVar (S Y A1 U) H7.
rewrite H7.
ring.
assert ( S U A1 Y / S U V Y = U**A1 / U**V).
rewrite (A6 U A1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HA1.
auto with Geom.
assert (U**A1 / U**V = Py A1 U V / Py U V U).
rewrite col_pyth.
unfold Py.

*****
H2 : eq (Fdiv (S U A1 Y) (S U V Y)) (Fdiv (DSeg U A1) (DSeg U V))
H1 : eq (Fdiv (S U A Y) (S U V Y)) (Fdiv (S U A1 Y) (S U V Y))
HA1 : on_foot A1 A U V
A1 : Point
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
H : on_perp_d Y U V r
r : F
A,B,U,V,Y : Point
*****
eq (Fdiv (DSeg U A1) (DSeg U V)) (Fdiv (Fmult (Fmult (Fplus F1 F1) (DSeg U A1)) (DSeg U V)) (Fminus (Fplus (Fmult (DSeg U V) (DSeg U V)) (Fmult (DSeg V U) (DSeg V U))) (Fmult (DSeg U U) (DSeg U U))))
+++++
uniformize_dir_seg.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.
use H.
assert (parallel A1 A Y U).
apply (perp_perp_para A1 A U V Y U);auto with Geom.
assert (parallel Y U A1 A) by auto with Geom.
unfold parallel, S4 in H7.
uniformize_signed_areas.
IsoleVar (S Y A1 U) H7.
rewrite H7.
ring.
assert ( S U A1 Y / S U V Y = U**A1 / U**V).
rewrite (A6 U A1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HA1.
auto with Geom.
assert (U**A1 / U**V = Py A1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.

*****
H2 : eq (Fdiv (S U A1 Y) (S U V Y)) (Fdiv (DSeg U A1) (DSeg U V))
H1 : eq (Fdiv (S U A Y) (S U V Y)) (Fdiv (S U A1 Y) (S U V Y))
HA1 : on_foot A1 A U V
A1 : Point
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
H : on_perp_d Y U V r
r : F
A,B,U,V,Y : Point
*****
eq (Fdiv (DSeg U A1) (DSeg U V)) (Fdiv (Fmult (Fmult (Fplus F1 F1) (DSeg U A1)) (DSeg U V)) (Fminus (Fplus (Fmult (DSeg U V) (DSeg U V)) (Fmult (Fopp (DSeg U V)) (Fopp (DSeg U V)))) (Fmult (DSeg U U) (DSeg U U))))
+++++
basic_simpl.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.
use H.
assert (parallel A1 A Y U).
apply (perp_perp_para A1 A U V Y U);auto with Geom.
assert (parallel Y U A1 A) by auto with Geom.
unfold parallel, S4 in H7.
uniformize_signed_areas.
IsoleVar (S Y A1 U) H7.
rewrite H7.
ring.
assert ( S U A1 Y / S U V Y = U**A1 / U**V).
rewrite (A6 U A1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HA1.
auto with Geom.
assert (U**A1 / U**V = Py A1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.

*****
H2 : eq (Fdiv (S U A1 Y) (S U V Y)) (Fdiv (DSeg U A1) (DSeg U V))
H1 : eq (Fdiv (S U A Y) (S U V Y)) (Fdiv (S U A1 Y) (S U V Y))
HA1 : on_foot A1 A U V
A1 : Point
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
H : on_perp_d Y U V r
r : F
A,B,U,V,Y : Point
*****
eq (Fdiv (DSeg U A1) (DSeg U V)) (Fdiv (Fmult (Fmult (Fplus F1 F1) (DSeg U A1)) (DSeg U V)) (Fplus (Fmult (DSeg U V) (DSeg U V)) (Fmult (DSeg U V) (DSeg U V))))
+++++
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.
use H.
assert (parallel A1 A Y U).
apply (perp_perp_para A1 A U V Y U);auto with Geom.
assert (parallel Y U A1 A) by auto with Geom.
unfold parallel, S4 in H7.
uniformize_signed_areas.
IsoleVar (S Y A1 U) H7.
rewrite H7.
ring.
assert ( S U A1 Y / S U V Y = U**A1 / U**V).
rewrite (A6 U A1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HA1.
auto with Geom.
assert (U**A1 / U**V = Py A1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.

*****
H2 : eq (Fdiv (S U A1 Y) (S U V Y)) (Fdiv (DSeg U A1) (DSeg U V))
H1 : eq (Fdiv (S U A Y) (S U V Y)) (Fdiv (S U A1 Y) (S U V Y))
HA1 : on_foot A1 A U V
A1 : Point
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
H : on_perp_d Y U V r
r : F
A,B,U,V,Y : Point
*****
eq (Fdiv (DSeg U A1) (DSeg U V)) (Fdiv (Fmult (Fmult (Fplus F1 F1) (DSeg U A1)) (DSeg U V)) (Fmult (Fmult (Fplus F1 F1) (DSeg U V)) (DSeg U V)))
+++++
field;solve_conds;unfold on_perp_d in *;auto with Geom.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.
use H.
assert (parallel A1 A Y U).
apply (perp_perp_para A1 A U V Y U);auto with Geom.
assert (parallel Y U A1 A) by auto with Geom.
unfold parallel, S4 in H7.
uniformize_signed_areas.
IsoleVar (S Y A1 U) H7.
rewrite H7.
ring.
assert ( S U A1 Y / S U V Y = U**A1 / U**V).
rewrite (A6 U A1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HA1.
auto with Geom.
assert (U**A1 / U**V = Py A1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.

*****
H2 : eq (Fdiv (S U A1 Y) (S U V Y)) (Fdiv (DSeg U A1) (DSeg U V))
H1 : eq (Fdiv (S U A Y) (S U V Y)) (Fdiv (S U A1 Y) (S U V Y))
HA1 : on_foot A1 A U V
A1 : Point
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
H : and (not (eq U V))\n (and (perp Y U U V)\n (and\n (eq (Fmult r (Py U V U))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S U V Y)))\n (not (eq r F0))))
r : F
A,B,U,V,Y : Point
*****
not (eq (DSeg U V) F0)
+++++
unfold on_perp_d in *;use H;auto with Geom.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.
use H.
assert (parallel A1 A Y U).
apply (perp_perp_para A1 A U V Y U);auto with Geom.
assert (parallel Y U A1 A) by auto with Geom.
unfold parallel, S4 in H7.
uniformize_signed_areas.
IsoleVar (S Y A1 U) H7.
rewrite H7.
ring.
assert ( S U A1 Y / S U V Y = U**A1 / U**V).
rewrite (A6 U A1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HA1.
auto with Geom.
assert (U**A1 / U**V = Py A1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.

*****
H2 : eq (Fdiv (S U A1 Y) (S U V Y)) (Fdiv (DSeg U A1) (DSeg U V))
H1 : eq (Fdiv (S U A Y) (S U V Y)) (Fdiv (S U A1 Y) (S U V Y))
HA1 : on_foot A1 A U V
A1 : Point
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
H : on_perp_d Y U V r
r : F
A,B,U,V,Y : Point
*****
Col A1 U V
+++++
unfold on_foot in *;use HA1;auto with Geom.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.
use H.
assert (parallel A1 A Y U).
apply (perp_perp_para A1 A U V Y U);auto with Geom.
assert (parallel Y U A1 A) by auto with Geom.
unfold parallel, S4 in H7.
uniformize_signed_areas.
IsoleVar (S Y A1 U) H7.
rewrite H7.
ring.
assert ( S U A1 Y / S U V Y = U**A1 / U**V).
rewrite (A6 U A1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HA1.
auto with Geom.
assert (U**A1 / U**V = Py A1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HA1;auto with Geom.

*****
H3 : eq (Fdiv (DSeg U A1) (DSeg U V)) (Fdiv (Py A1 U V) (Py U V U))
H2 : eq (Fdiv (S U A1 Y) (S U V Y)) (Fdiv (DSeg U A1) (DSeg U V))
H1 : eq (Fdiv (S U A Y) (S U V Y)) (Fdiv (S U A1 Y) (S U V Y))
HA1 : on_foot A1 A U V
A1 : Point
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
H : on_perp_d Y U V r
r : F
A,B,U,V,Y : Point
*****
eq (S U A Y) (Fmult (Fdiv (Py A U V) (Py U V U)) (S U V Y))
+++++
assert (Py A1 U V = Py A U V).
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.
use H.
assert (parallel A1 A Y U).
apply (perp_perp_para A1 A U V Y U);auto with Geom.
assert (parallel Y U A1 A) by auto with Geom.
unfold parallel, S4 in H7.
uniformize_signed_areas.
IsoleVar (S Y A1 U) H7.
rewrite H7.
ring.
assert ( S U A1 Y / S U V Y = U**A1 / U**V).
rewrite (A6 U A1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HA1.
auto with Geom.
assert (U**A1 / U**V = Py A1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HA1;auto with Geom.
assert (Py A1 U V = Py A U V).

*****
H3 : eq (Fdiv (DSeg U A1) (DSeg U V)) (Fdiv (Py A1 U V) (Py U V U))
H2 : eq (Fdiv (S U A1 Y) (S U V Y)) (Fdiv (DSeg U A1) (DSeg U V))
H1 : eq (Fdiv (S U A Y) (S U V Y)) (Fdiv (S U A1 Y) (S U V Y))
HA1 : on_foot A1 A U V
A1 : Point
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
H : on_perp_d Y U V r
r : F
A,B,U,V,Y : Point
*****
eq (Py A1 U V) (Py A U V)
+++++
unfold on_foot in *.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.
use H.
assert (parallel A1 A Y U).
apply (perp_perp_para A1 A U V Y U);auto with Geom.
assert (parallel Y U A1 A) by auto with Geom.
unfold parallel, S4 in H7.
uniformize_signed_areas.
IsoleVar (S Y A1 U) H7.
rewrite H7.
ring.
assert ( S U A1 Y / S U V Y = U**A1 / U**V).
rewrite (A6 U A1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HA1.
auto with Geom.
assert (U**A1 / U**V = Py A1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HA1;auto with Geom.
assert (Py A1 U V = Py A U V).
unfold on_foot in *.

*****
H3 : eq (Fdiv (DSeg U A1) (DSeg U V)) (Fdiv (Py A1 U V) (Py U V U))
H2 : eq (Fdiv (S U A1 Y) (S U V Y)) (Fdiv (DSeg U A1) (DSeg U V))
H1 : eq (Fdiv (S U A Y) (S U V Y)) (Fdiv (S U A1 Y) (S U V Y))
HA1 : and (perp A1 A U V) (and (Col A1 U V) (not (eq U V)))
A1 : Point
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
H : on_perp_d Y U V r
r : F
A,B,U,V,Y : Point
*****
eq (Py A1 U V) (Py A U V)
+++++
use HA1.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.
use H.
assert (parallel A1 A Y U).
apply (perp_perp_para A1 A U V Y U);auto with Geom.
assert (parallel Y U A1 A) by auto with Geom.
unfold parallel, S4 in H7.
uniformize_signed_areas.
IsoleVar (S Y A1 U) H7.
rewrite H7.
ring.
assert ( S U A1 Y / S U V Y = U**A1 / U**V).
rewrite (A6 U A1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HA1.
auto with Geom.
assert (U**A1 / U**V = Py A1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HA1;auto with Geom.
assert (Py A1 U V = Py A U V).
unfold on_foot in *.
use HA1.

*****
H7 : not (eq U V)
H6 : Col A1 U V
H4 : perp A1 A U V
H3 : eq (Fdiv (DSeg U A1) (DSeg U V)) (Fdiv (Py A1 U V) (Py U V U))
H2 : eq (Fdiv (S U A1 Y) (S U V Y)) (Fdiv (DSeg U A1) (DSeg U V))
H1 : eq (Fdiv (S U A Y) (S U V Y)) (Fdiv (S U A1 Y) (S U V Y))
A1 : Point
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
H : on_perp_d Y U V r
r : F
A,B,U,V,Y : Point
*****
eq (Py A1 U V) (Py A U V)
+++++
unfold perp, Py4 in H4.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.
use H.
assert (parallel A1 A Y U).
apply (perp_perp_para A1 A U V Y U);auto with Geom.
assert (parallel Y U A1 A) by auto with Geom.
unfold parallel, S4 in H7.
uniformize_signed_areas.
IsoleVar (S Y A1 U) H7.
rewrite H7.
ring.
assert ( S U A1 Y / S U V Y = U**A1 / U**V).
rewrite (A6 U A1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HA1.
auto with Geom.
assert (U**A1 / U**V = Py A1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HA1;auto with Geom.
assert (Py A1 U V = Py A U V).
unfold on_foot in *.
use HA1.
unfold perp, Py4 in H4.

*****
H7 : not (eq U V)
H6 : Col A1 U V
H4 : eq (Fminus (Py A1 U V) (Py A U V)) F0
H3 : eq (Fdiv (DSeg U A1) (DSeg U V)) (Fdiv (Py A1 U V) (Py U V U))
H2 : eq (Fdiv (S U A1 Y) (S U V Y)) (Fdiv (DSeg U A1) (DSeg U V))
H1 : eq (Fdiv (S U A Y) (S U V Y)) (Fdiv (S U A1 Y) (S U V Y))
A1 : Point
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
H : on_perp_d Y U V r
r : F
A,B,U,V,Y : Point
*****
eq (Py A1 U V) (Py A U V)
+++++
IsoleVar (Py A1 U V) H4.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.
use H.
assert (parallel A1 A Y U).
apply (perp_perp_para A1 A U V Y U);auto with Geom.
assert (parallel Y U A1 A) by auto with Geom.
unfold parallel, S4 in H7.
uniformize_signed_areas.
IsoleVar (S Y A1 U) H7.
rewrite H7.
ring.
assert ( S U A1 Y / S U V Y = U**A1 / U**V).
rewrite (A6 U A1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HA1.
auto with Geom.
assert (U**A1 / U**V = Py A1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HA1;auto with Geom.
assert (Py A1 U V = Py A U V).
unfold on_foot in *.
use HA1.
unfold perp, Py4 in H4.
IsoleVar (Py A1 U V) H4.

*****
H4 : eq (Py A1 U V) (Fplus F0 (Py A U V))
H7 : not (eq U V)
H6 : Col A1 U V
H3 : eq (Fdiv (DSeg U A1) (DSeg U V)) (Fdiv (Py A1 U V) (Py U V U))
H2 : eq (Fdiv (S U A1 Y) (S U V Y)) (Fdiv (DSeg U A1) (DSeg U V))
H1 : eq (Fdiv (S U A Y) (S U V Y)) (Fdiv (S U A1 Y) (S U V Y))
A1 : Point
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
H : on_perp_d Y U V r
r : F
A,B,U,V,Y : Point
*****
eq (Py A1 U V) (Py A U V)
+++++
rewrite H4.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.
use H.
assert (parallel A1 A Y U).
apply (perp_perp_para A1 A U V Y U);auto with Geom.
assert (parallel Y U A1 A) by auto with Geom.
unfold parallel, S4 in H7.
uniformize_signed_areas.
IsoleVar (S Y A1 U) H7.
rewrite H7.
ring.
assert ( S U A1 Y / S U V Y = U**A1 / U**V).
rewrite (A6 U A1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HA1.
auto with Geom.
assert (U**A1 / U**V = Py A1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HA1;auto with Geom.
assert (Py A1 U V = Py A U V).
unfold on_foot in *.
use HA1.
unfold perp, Py4 in H4.
IsoleVar (Py A1 U V) H4.
rewrite H4.

*****
H4 : eq (Py A1 U V) (Fplus F0 (Py A U V))
H7 : not (eq U V)
H6 : Col A1 U V
H3 : eq (Fdiv (DSeg U A1) (DSeg U V)) (Fdiv (Py A1 U V) (Py U V U))
H2 : eq (Fdiv (S U A1 Y) (S U V Y)) (Fdiv (DSeg U A1) (DSeg U V))
H1 : eq (Fdiv (S U A Y) (S U V Y)) (Fdiv (S U A1 Y) (S U V Y))
A1 : Point
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
H : on_perp_d Y U V r
r : F
A,B,U,V,Y : Point
*****
eq (Fplus F0 (Py A U V)) (Py A U V)
+++++
ring.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.
use H.
assert (parallel A1 A Y U).
apply (perp_perp_para A1 A U V Y U);auto with Geom.
assert (parallel Y U A1 A) by auto with Geom.
unfold parallel, S4 in H7.
uniformize_signed_areas.
IsoleVar (S Y A1 U) H7.
rewrite H7.
ring.
assert ( S U A1 Y / S U V Y = U**A1 / U**V).
rewrite (A6 U A1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HA1.
auto with Geom.
assert (U**A1 / U**V = Py A1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HA1;auto with Geom.
assert (Py A1 U V = Py A U V).
unfold on_foot in *.
use HA1.
unfold perp, Py4 in H4.
IsoleVar (Py A1 U V) H4.
rewrite H4.
ring.

*****
H4 : eq (Py A1 U V) (Py A U V)
H3 : eq (Fdiv (DSeg U A1) (DSeg U V)) (Fdiv (Py A1 U V) (Py U V U))
H2 : eq (Fdiv (S U A1 Y) (S U V Y)) (Fdiv (DSeg U A1) (DSeg U V))
H1 : eq (Fdiv (S U A Y) (S U V Y)) (Fdiv (S U A1 Y) (S U V Y))
HA1 : on_foot A1 A U V
A1 : Point
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
H : on_perp_d Y U V r
r : F
A,B,U,V,Y : Point
*****
eq (S U A Y) (Fmult (Fdiv (Py A U V) (Py U V U)) (S U V Y))
+++++
rewrite H2 in H1.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.
use H.
assert (parallel A1 A Y U).
apply (perp_perp_para A1 A U V Y U);auto with Geom.
assert (parallel Y U A1 A) by auto with Geom.
unfold parallel, S4 in H7.
uniformize_signed_areas.
IsoleVar (S Y A1 U) H7.
rewrite H7.
ring.
assert ( S U A1 Y / S U V Y = U**A1 / U**V).
rewrite (A6 U A1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HA1.
auto with Geom.
assert (U**A1 / U**V = Py A1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HA1;auto with Geom.
assert (Py A1 U V = Py A U V).
unfold on_foot in *.
use HA1.
unfold perp, Py4 in H4.
IsoleVar (Py A1 U V) H4.
rewrite H4.
ring.
rewrite H2 in H1.

*****
H4 : eq (Py A1 U V) (Py A U V)
H3 : eq (Fdiv (DSeg U A1) (DSeg U V)) (Fdiv (Py A1 U V) (Py U V U))
H2 : eq (Fdiv (S U A1 Y) (S U V Y)) (Fdiv (DSeg U A1) (DSeg U V))
H1 : eq (Fdiv (S U A Y) (S U V Y)) (Fdiv (DSeg U A1) (DSeg U V))
HA1 : on_foot A1 A U V
A1 : Point
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
H : on_perp_d Y U V r
r : F
A,B,U,V,Y : Point
*****
eq (S U A Y) (Fmult (Fdiv (Py A U V) (Py U V U)) (S U V Y))
+++++
rewrite H3 in H1.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.
use H.
assert (parallel A1 A Y U).
apply (perp_perp_para A1 A U V Y U);auto with Geom.
assert (parallel Y U A1 A) by auto with Geom.
unfold parallel, S4 in H7.
uniformize_signed_areas.
IsoleVar (S Y A1 U) H7.
rewrite H7.
ring.
assert ( S U A1 Y / S U V Y = U**A1 / U**V).
rewrite (A6 U A1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HA1.
auto with Geom.
assert (U**A1 / U**V = Py A1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HA1;auto with Geom.
assert (Py A1 U V = Py A U V).
unfold on_foot in *.
use HA1.
unfold perp, Py4 in H4.
IsoleVar (Py A1 U V) H4.
rewrite H4.
ring.
rewrite H2 in H1.
rewrite H3 in H1.

*****
H4 : eq (Py A1 U V) (Py A U V)
H3 : eq (Fdiv (DSeg U A1) (DSeg U V)) (Fdiv (Py A1 U V) (Py U V U))
H2 : eq (Fdiv (S U A1 Y) (S U V Y)) (Fdiv (DSeg U A1) (DSeg U V))
H1 : eq (Fdiv (S U A Y) (S U V Y)) (Fdiv (Py A1 U V) (Py U V U))
HA1 : on_foot A1 A U V
A1 : Point
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
H : on_perp_d Y U V r
r : F
A,B,U,V,Y : Point
*****
eq (S U A Y) (Fmult (Fdiv (Py A U V) (Py U V U)) (S U V Y))
+++++
rewrite H4 in H1.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.
use H.
assert (parallel A1 A Y U).
apply (perp_perp_para A1 A U V Y U);auto with Geom.
assert (parallel Y U A1 A) by auto with Geom.
unfold parallel, S4 in H7.
uniformize_signed_areas.
IsoleVar (S Y A1 U) H7.
rewrite H7.
ring.
assert ( S U A1 Y / S U V Y = U**A1 / U**V).
rewrite (A6 U A1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HA1.
auto with Geom.
assert (U**A1 / U**V = Py A1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HA1;auto with Geom.
assert (Py A1 U V = Py A U V).
unfold on_foot in *.
use HA1.
unfold perp, Py4 in H4.
IsoleVar (Py A1 U V) H4.
rewrite H4.
ring.
rewrite H2 in H1.
rewrite H3 in H1.
rewrite H4 in H1.

*****
H4 : eq (Py A1 U V) (Py A U V)
H3 : eq (Fdiv (DSeg U A1) (DSeg U V)) (Fdiv (Py A1 U V) (Py U V U))
H2 : eq (Fdiv (S U A1 Y) (S U V Y)) (Fdiv (DSeg U A1) (DSeg U V))
H1 : eq (Fdiv (S U A Y) (S U V Y)) (Fdiv (Py A U V) (Py U V U))
HA1 : on_foot A1 A U V
A1 : Point
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
H : on_perp_d Y U V r
r : F
A,B,U,V,Y : Point
*****
eq (S U A Y) (Fmult (Fdiv (Py A U V) (Py U V U)) (S U V Y))
+++++
IsoleVar (S U A Y) H1.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.
use H.
assert (parallel A1 A Y U).
apply (perp_perp_para A1 A U V Y U);auto with Geom.
assert (parallel Y U A1 A) by auto with Geom.
unfold parallel, S4 in H7.
uniformize_signed_areas.
IsoleVar (S Y A1 U) H7.
rewrite H7.
ring.
assert ( S U A1 Y / S U V Y = U**A1 / U**V).
rewrite (A6 U A1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HA1.
auto with Geom.
assert (U**A1 / U**V = Py A1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HA1;auto with Geom.
assert (Py A1 U V = Py A U V).
unfold on_foot in *.
use HA1.
unfold perp, Py4 in H4.
IsoleVar (Py A1 U V) H4.
rewrite H4.
ring.
rewrite H2 in H1.
rewrite H3 in H1.
rewrite H4 in H1.
IsoleVar (S U A Y) H1.

*****
H1 : eq (S U A Y) (Fmult (S U V Y) (Fdiv (Py A U V) (Py U V U)))
H5 : not (eq (S U V Y) F0)
H4 : eq (Py A1 U V) (Py A U V)
H3 : eq (Fdiv (DSeg U A1) (DSeg U V)) (Fdiv (Py A1 U V) (Py U V U))
H2 : eq (Fdiv (S U A1 Y) (S U V Y)) (Fdiv (DSeg U A1) (DSeg U V))
HA1 : on_foot A1 A U V
A1 : Point
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
H : on_perp_d Y U V r
r : F
A,B,U,V,Y : Point
*****
eq (S U A Y) (Fmult (Fdiv (Py A U V) (Py U V U)) (S U V Y))
+++++
rewrite H1.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.
use H.
assert (parallel A1 A Y U).
apply (perp_perp_para A1 A U V Y U);auto with Geom.
assert (parallel Y U A1 A) by auto with Geom.
unfold parallel, S4 in H7.
uniformize_signed_areas.
IsoleVar (S Y A1 U) H7.
rewrite H7.
ring.
assert ( S U A1 Y / S U V Y = U**A1 / U**V).
rewrite (A6 U A1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HA1.
auto with Geom.
assert (U**A1 / U**V = Py A1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HA1;auto with Geom.
assert (Py A1 U V = Py A U V).
unfold on_foot in *.
use HA1.
unfold perp, Py4 in H4.
IsoleVar (Py A1 U V) H4.
rewrite H4.
ring.
rewrite H2 in H1.
rewrite H3 in H1.
rewrite H4 in H1.
IsoleVar (S U A Y) H1.
rewrite H1.

*****
H1 : eq (S U A Y) (Fmult (S U V Y) (Fdiv (Py A U V) (Py U V U)))
H5 : not (eq (S U V Y) F0)
H4 : eq (Py A1 U V) (Py A U V)
H3 : eq (Fdiv (DSeg U A1) (DSeg U V)) (Fdiv (Py A1 U V) (Py U V U))
H2 : eq (Fdiv (S U A1 Y) (S U V Y)) (Fdiv (DSeg U A1) (DSeg U V))
HA1 : on_foot A1 A U V
A1 : Point
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
H : on_perp_d Y U V r
r : F
A,B,U,V,Y : Point
*****
eq (Fmult (S U V Y) (Fdiv (Py A U V) (Py U V U))) (Fmult (Fdiv (Py A U V) (Py U V U)) (S U V Y))
+++++
field.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.
use H.
assert (parallel A1 A Y U).
apply (perp_perp_para A1 A U V Y U);auto with Geom.
assert (parallel Y U A1 A) by auto with Geom.
unfold parallel, S4 in H7.
uniformize_signed_areas.
IsoleVar (S Y A1 U) H7.
rewrite H7.
ring.
assert ( S U A1 Y / S U V Y = U**A1 / U**V).
rewrite (A6 U A1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HA1.
auto with Geom.
assert (U**A1 / U**V = Py A1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HA1;auto with Geom.
assert (Py A1 U V = Py A U V).
unfold on_foot in *.
use HA1.
unfold perp, Py4 in H4.
IsoleVar (Py A1 U V) H4.
rewrite H4.
ring.
rewrite H2 in H1.
rewrite H3 in H1.
rewrite H4 in H1.
IsoleVar (S U A Y) H1.
rewrite H1.
field.

*****
H1 : eq (S U A Y) (Fmult (S U V Y) (Fdiv (Py A U V) (Py U V U)))
H5 : not (eq (S U V Y) F0)
H4 : eq (Py A1 U V) (Py A U V)
H3 : eq (Fdiv (DSeg U A1) (DSeg U V)) (Fdiv (Py A1 U V) (Py U V U))
H2 : eq (Fdiv (S U A1 Y) (S U V Y)) (Fdiv (DSeg U A1) (DSeg U V))
HA1 : on_foot A1 A U V
A1 : Point
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
H : on_perp_d Y U V r
r : F
A,B,U,V,Y : Point
*****
not (eq (Py U V U) F0)
+++++
unfold on_perp_d in *.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.
use H.
assert (parallel A1 A Y U).
apply (perp_perp_para A1 A U V Y U);auto with Geom.
assert (parallel Y U A1 A) by auto with Geom.
unfold parallel, S4 in H7.
uniformize_signed_areas.
IsoleVar (S Y A1 U) H7.
rewrite H7.
ring.
assert ( S U A1 Y / S U V Y = U**A1 / U**V).
rewrite (A6 U A1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HA1.
auto with Geom.
assert (U**A1 / U**V = Py A1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HA1;auto with Geom.
assert (Py A1 U V = Py A U V).
unfold on_foot in *.
use HA1.
unfold perp, Py4 in H4.
IsoleVar (Py A1 U V) H4.
rewrite H4.
ring.
rewrite H2 in H1.
rewrite H3 in H1.
rewrite H4 in H1.
IsoleVar (S U A Y) H1.
rewrite H1.
field.
unfold on_perp_d in *.

*****
H1 : eq (S U A Y) (Fmult (S U V Y) (Fdiv (Py A U V) (Py U V U)))
H5 : not (eq (S U V Y) F0)
H4 : eq (Py A1 U V) (Py A U V)
H3 : eq (Fdiv (DSeg U A1) (DSeg U V)) (Fdiv (Py A1 U V) (Py U V U))
H2 : eq (Fdiv (S U A1 Y) (S U V Y)) (Fdiv (DSeg U A1) (DSeg U V))
HA1 : on_foot A1 A U V
A1 : Point
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
H : and (not (eq U V))\n (and (perp Y U U V)\n (and\n (eq (Fmult r (Py U V U))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S U V Y)))\n (not (eq r F0))))
r : F
A,B,U,V,Y : Point
*****
not (eq (Py U V U) F0)
+++++
intuition.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.
use H.
assert (parallel A1 A Y U).
apply (perp_perp_para A1 A U V Y U);auto with Geom.
assert (parallel Y U A1 A) by auto with Geom.
unfold parallel, S4 in H7.
uniformize_signed_areas.
IsoleVar (S Y A1 U) H7.
rewrite H7.
ring.
assert ( S U A1 Y / S U V Y = U**A1 / U**V).
rewrite (A6 U A1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HA1.
auto with Geom.
assert (U**A1 / U**V = Py A1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HA1;auto with Geom.
assert (Py A1 U V = Py A U V).
unfold on_foot in *.
use HA1.
unfold perp, Py4 in H4.
IsoleVar (Py A1 U V) H4.
rewrite H4.
ring.
rewrite H2 in H1.
rewrite H3 in H1.
rewrite H4 in H1.
IsoleVar (S U A Y) H1.
rewrite H1.
field.
unfold on_perp_d in *.
intuition.

*****
H4 : eq (Py A1 U V) (Py A U V)
H3 : eq (Fdiv (DSeg U A1) (DSeg U V)) (Fdiv (Py A1 U V) (Py U V U))
H2 : eq (Fdiv (S U A1 Y) (S U V Y)) (Fdiv (DSeg U A1) (DSeg U V))
H1 : eq (Fdiv (S U A Y) (S U V Y)) (Fdiv (Py A U V) (Py U V U))
HA1 : on_foot A1 A U V
A1 : Point
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
H : on_perp_d Y U V r
r : F
A,B,U,V,Y : Point
*****
not (eq (S U V Y) F0)
+++++
auto with Geom.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.
use H.
assert (parallel A1 A Y U).
apply (perp_perp_para A1 A U V Y U);auto with Geom.
assert (parallel Y U A1 A) by auto with Geom.
unfold parallel, S4 in H7.
uniformize_signed_areas.
IsoleVar (S Y A1 U) H7.
rewrite H7.
ring.
assert ( S U A1 Y / S U V Y = U**A1 / U**V).
rewrite (A6 U A1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HA1.
auto with Geom.
assert (U**A1 / U**V = Py A1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HA1;auto with Geom.
assert (Py A1 U V = Py A U V).
unfold on_foot in *.
use HA1.
unfold perp, Py4 in H4.
IsoleVar (Py A1 U V) H4.
rewrite H4.
ring.
rewrite H2 in H1.
rewrite H3 in H1.
rewrite H4 in H1.
IsoleVar (S U A Y) H1.
rewrite H1.
field.
unfold on_perp_d in *.
intuition.
auto with Geom.

*****
H1 : eq (S U A Y) (Fmult (Fdiv (Py A U V) (Py U V U)) (S U V Y))
HA1 : on_foot A1 A U V
A1 : Point
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
H : on_perp_d Y U V r
r : F
A,B,U,V,Y : Point
*****
eq (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y)) (Fminus (S A B U) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py4 U A V B)))
+++++
assert (S U B Y = Py B U V / Py U V U * S U V Y).
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.
use H.
assert (parallel A1 A Y U).
apply (perp_perp_para A1 A U V Y U);auto with Geom.
assert (parallel Y U A1 A) by auto with Geom.
unfold parallel, S4 in H7.
uniformize_signed_areas.
IsoleVar (S Y A1 U) H7.
rewrite H7.
ring.
assert ( S U A1 Y / S U V Y = U**A1 / U**V).
rewrite (A6 U A1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HA1.
auto with Geom.
assert (U**A1 / U**V = Py A1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HA1;auto with Geom.
assert (Py A1 U V = Py A U V).
unfold on_foot in *.
use HA1.
unfold perp, Py4 in H4.
IsoleVar (Py A1 U V) H4.
rewrite H4.
ring.
rewrite H2 in H1.
rewrite H3 in H1.
rewrite H4 in H1.
IsoleVar (S U A Y) H1.
rewrite H1.
field.
unfold on_perp_d in *.
intuition.
auto with Geom.
assert (S U B Y = Py B U V / Py U V U * S U V Y).

*****
H1 : eq (S U A Y) (Fmult (Fdiv (Py A U V) (Py U V U)) (S U V Y))
HA1 : on_foot A1 A U V
A1 : Point
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
H : on_perp_d Y U V r
r : F
A,B,U,V,Y : Point
*****
eq (S U B Y) (Fmult (Fdiv (Py B U V) (Py U V U)) (S U V Y))
+++++
elim (proj_ex B U V).
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.
use H.
assert (parallel A1 A Y U).
apply (perp_perp_para A1 A U V Y U);auto with Geom.
assert (parallel Y U A1 A) by auto with Geom.
unfold parallel, S4 in H7.
uniformize_signed_areas.
IsoleVar (S Y A1 U) H7.
rewrite H7.
ring.
assert ( S U A1 Y / S U V Y = U**A1 / U**V).
rewrite (A6 U A1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HA1.
auto with Geom.
assert (U**A1 / U**V = Py A1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HA1;auto with Geom.
assert (Py A1 U V = Py A U V).
unfold on_foot in *.
use HA1.
unfold perp, Py4 in H4.
IsoleVar (Py A1 U V) H4.
rewrite H4.
ring.
rewrite H2 in H1.
rewrite H3 in H1.
rewrite H4 in H1.
IsoleVar (S U A Y) H1.
rewrite H1.
field.
unfold on_perp_d in *.
intuition.
auto with Geom.
assert (S U B Y = Py B U V / Py U V U * S U V Y).
elim (proj_ex B U V).

*****
H1 : eq (S U A Y) (Fmult (Fdiv (Py A U V) (Py U V U)) (S U V Y))
HA1 : on_foot A1 A U V
A1 : Point
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
H : on_perp_d Y U V r
r : F
A,B,U,V,Y : Point
*****
forall (x : Point) (_ : on_foot x B U V), eq (S U B Y) (Fmult (Fdiv (Py B U V) (Py U V U)) (S U V Y))
+++++
intros B1 HB1.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.
use H.
assert (parallel A1 A Y U).
apply (perp_perp_para A1 A U V Y U);auto with Geom.
assert (parallel Y U A1 A) by auto with Geom.
unfold parallel, S4 in H7.
uniformize_signed_areas.
IsoleVar (S Y A1 U) H7.
rewrite H7.
ring.
assert ( S U A1 Y / S U V Y = U**A1 / U**V).
rewrite (A6 U A1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HA1.
auto with Geom.
assert (U**A1 / U**V = Py A1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HA1;auto with Geom.
assert (Py A1 U V = Py A U V).
unfold on_foot in *.
use HA1.
unfold perp, Py4 in H4.
IsoleVar (Py A1 U V) H4.
rewrite H4.
ring.
rewrite H2 in H1.
rewrite H3 in H1.
rewrite H4 in H1.
IsoleVar (S U A Y) H1.
rewrite H1.
field.
unfold on_perp_d in *.
intuition.
auto with Geom.
assert (S U B Y = Py B U V / Py U V U * S U V Y).
elim (proj_ex B U V).
intros B1 HB1.

*****
HB1 : on_foot B1 B U V
B1 : Point
H1 : eq (S U A Y) (Fmult (Fdiv (Py A U V) (Py U V U)) (S U V Y))
HA1 : on_foot A1 A U V
A1 : Point
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
H : on_perp_d Y U V r
r : F
A,B,U,V,Y : Point
*****
eq (S U B Y) (Fmult (Fdiv (Py B U V) (Py U V U)) (S U V Y))
+++++
2:unfold on_perp_d in H;intuition.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.
use H.
assert (parallel A1 A Y U).
apply (perp_perp_para A1 A U V Y U);auto with Geom.
assert (parallel Y U A1 A) by auto with Geom.
unfold parallel, S4 in H7.
uniformize_signed_areas.
IsoleVar (S Y A1 U) H7.
rewrite H7.
ring.
assert ( S U A1 Y / S U V Y = U**A1 / U**V).
rewrite (A6 U A1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HA1.
auto with Geom.
assert (U**A1 / U**V = Py A1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HA1;auto with Geom.
assert (Py A1 U V = Py A U V).
unfold on_foot in *.
use HA1.
unfold perp, Py4 in H4.
IsoleVar (Py A1 U V) H4.
rewrite H4.
ring.
rewrite H2 in H1.
rewrite H3 in H1.
rewrite H4 in H1.
IsoleVar (S U A Y) H1.
rewrite H1.
field.
unfold on_perp_d in *.
intuition.
auto with Geom.
assert (S U B Y = Py B U V / Py U V U * S U V Y).
elim (proj_ex B U V).
intros B1 HB1.
2:unfold on_perp_d in H;intuition.

*****
HB1 : on_foot B1 B U V
B1 : Point
H1 : eq (S U A Y) (Fmult (Fdiv (Py A U V) (Py U V U)) (S U V Y))
HA1 : on_foot A1 A U V
A1 : Point
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
H : on_perp_d Y U V r
r : F
A,B,U,V,Y : Point
*****
eq (S U B Y) (Fmult (Fdiv (Py B U V) (Py U V U)) (S U V Y))
+++++
assert (S U B Y / S U V Y = S U B1 Y / S U V Y).
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.
use H.
assert (parallel A1 A Y U).
apply (perp_perp_para A1 A U V Y U);auto with Geom.
assert (parallel Y U A1 A) by auto with Geom.
unfold parallel, S4 in H7.
uniformize_signed_areas.
IsoleVar (S Y A1 U) H7.
rewrite H7.
ring.
assert ( S U A1 Y / S U V Y = U**A1 / U**V).
rewrite (A6 U A1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HA1.
auto with Geom.
assert (U**A1 / U**V = Py A1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HA1;auto with Geom.
assert (Py A1 U V = Py A U V).
unfold on_foot in *.
use HA1.
unfold perp, Py4 in H4.
IsoleVar (Py A1 U V) H4.
rewrite H4.
ring.
rewrite H2 in H1.
rewrite H3 in H1.
rewrite H4 in H1.
IsoleVar (S U A Y) H1.
rewrite H1.
field.
unfold on_perp_d in *.
intuition.
auto with Geom.
assert (S U B Y = Py B U V / Py U V U * S U V Y).
elim (proj_ex B U V).
intros B1 HB1.
2:unfold on_perp_d in H;intuition.
assert (S U B Y / S U V Y = S U B1 Y / S U V Y).

*****
HB1 : on_foot B1 B U V
B1 : Point
H1 : eq (S U A Y) (Fmult (Fdiv (Py A U V) (Py U V U)) (S U V Y))
HA1 : on_foot A1 A U V
A1 : Point
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
H : on_perp_d Y U V r
r : F
A,B,U,V,Y : Point
*****
eq (Fdiv (S U B Y) (S U V Y)) (Fdiv (S U B1 Y) (S U V Y))
+++++
replace (S U B Y) with (S U B1 Y).
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.
use H.
assert (parallel A1 A Y U).
apply (perp_perp_para A1 A U V Y U);auto with Geom.
assert (parallel Y U A1 A) by auto with Geom.
unfold parallel, S4 in H7.
uniformize_signed_areas.
IsoleVar (S Y A1 U) H7.
rewrite H7.
ring.
assert ( S U A1 Y / S U V Y = U**A1 / U**V).
rewrite (A6 U A1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HA1.
auto with Geom.
assert (U**A1 / U**V = Py A1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HA1;auto with Geom.
assert (Py A1 U V = Py A U V).
unfold on_foot in *.
use HA1.
unfold perp, Py4 in H4.
IsoleVar (Py A1 U V) H4.
rewrite H4.
ring.
rewrite H2 in H1.
rewrite H3 in H1.
rewrite H4 in H1.
IsoleVar (S U A Y) H1.
rewrite H1.
field.
unfold on_perp_d in *.
intuition.
auto with Geom.
assert (S U B Y = Py B U V / Py U V U * S U V Y).
elim (proj_ex B U V).
intros B1 HB1.
2:unfold on_perp_d in H;intuition.
assert (S U B Y / S U V Y = S U B1 Y / S U V Y).
replace (S U B Y) with (S U B1 Y).

*****
HB1 : on_foot B1 B U V
B1 : Point
H1 : eq (S U A Y) (Fmult (Fdiv (Py A U V) (Py U V U)) (S U V Y))
HA1 : on_foot A1 A U V
A1 : Point
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
H : on_perp_d Y U V r
r : F
A,B,U,V,Y : Point
*****
eq (Fdiv (S U B1 Y) (S U V Y)) (Fdiv (S U B1 Y) (S U V Y))
+++++
auto.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.
use H.
assert (parallel A1 A Y U).
apply (perp_perp_para A1 A U V Y U);auto with Geom.
assert (parallel Y U A1 A) by auto with Geom.
unfold parallel, S4 in H7.
uniformize_signed_areas.
IsoleVar (S Y A1 U) H7.
rewrite H7.
ring.
assert ( S U A1 Y / S U V Y = U**A1 / U**V).
rewrite (A6 U A1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HA1.
auto with Geom.
assert (U**A1 / U**V = Py A1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HA1;auto with Geom.
assert (Py A1 U V = Py A U V).
unfold on_foot in *.
use HA1.
unfold perp, Py4 in H4.
IsoleVar (Py A1 U V) H4.
rewrite H4.
ring.
rewrite H2 in H1.
rewrite H3 in H1.
rewrite H4 in H1.
IsoleVar (S U A Y) H1.
rewrite H1.
field.
unfold on_perp_d in *.
intuition.
auto with Geom.
assert (S U B Y = Py B U V / Py U V U * S U V Y).
elim (proj_ex B U V).
intros B1 HB1.
2:unfold on_perp_d in H;intuition.
assert (S U B Y / S U V Y = S U B1 Y / S U V Y).
replace (S U B Y) with (S U B1 Y).
auto.

*****
HB1 : on_foot B1 B U V
B1 : Point
H1 : eq (S U A Y) (Fmult (Fdiv (Py A U V) (Py U V U)) (S U V Y))
HA1 : on_foot A1 A U V
A1 : Point
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
H : on_perp_d Y U V r
r : F
A,B,U,V,Y : Point
*****
eq (S U B1 Y) (S U B Y)
+++++
unfold on_foot in *.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.
use H.
assert (parallel A1 A Y U).
apply (perp_perp_para A1 A U V Y U);auto with Geom.
assert (parallel Y U A1 A) by auto with Geom.
unfold parallel, S4 in H7.
uniformize_signed_areas.
IsoleVar (S Y A1 U) H7.
rewrite H7.
ring.
assert ( S U A1 Y / S U V Y = U**A1 / U**V).
rewrite (A6 U A1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HA1.
auto with Geom.
assert (U**A1 / U**V = Py A1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HA1;auto with Geom.
assert (Py A1 U V = Py A U V).
unfold on_foot in *.
use HA1.
unfold perp, Py4 in H4.
IsoleVar (Py A1 U V) H4.
rewrite H4.
ring.
rewrite H2 in H1.
rewrite H3 in H1.
rewrite H4 in H1.
IsoleVar (S U A Y) H1.
rewrite H1.
field.
unfold on_perp_d in *.
intuition.
auto with Geom.
assert (S U B Y = Py B U V / Py U V U * S U V Y).
elim (proj_ex B U V).
intros B1 HB1.
2:unfold on_perp_d in H;intuition.
assert (S U B Y / S U V Y = S U B1 Y / S U V Y).
replace (S U B Y) with (S U B1 Y).
auto.
unfold on_foot in *.

*****
HB1 : and (perp B1 B U V) (and (Col B1 U V) (not (eq U V)))
B1 : Point
H1 : eq (S U A Y) (Fmult (Fdiv (Py A U V) (Py U V U)) (S U V Y))
HA1 : and (perp A1 A U V) (and (Col A1 U V) (not (eq U V)))
A1 : Point
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
H : on_perp_d Y U V r
r : F
A,B,U,V,Y : Point
*****
eq (S U B1 Y) (S U B Y)
+++++
use HB1.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.
use H.
assert (parallel A1 A Y U).
apply (perp_perp_para A1 A U V Y U);auto with Geom.
assert (parallel Y U A1 A) by auto with Geom.
unfold parallel, S4 in H7.
uniformize_signed_areas.
IsoleVar (S Y A1 U) H7.
rewrite H7.
ring.
assert ( S U A1 Y / S U V Y = U**A1 / U**V).
rewrite (A6 U A1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HA1.
auto with Geom.
assert (U**A1 / U**V = Py A1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HA1;auto with Geom.
assert (Py A1 U V = Py A U V).
unfold on_foot in *.
use HA1.
unfold perp, Py4 in H4.
IsoleVar (Py A1 U V) H4.
rewrite H4.
ring.
rewrite H2 in H1.
rewrite H3 in H1.
rewrite H4 in H1.
IsoleVar (S U A Y) H1.
rewrite H1.
field.
unfold on_perp_d in *.
intuition.
auto with Geom.
assert (S U B Y = Py B U V / Py U V U * S U V Y).
elim (proj_ex B U V).
intros B1 HB1.
2:unfold on_perp_d in H;intuition.
assert (S U B Y / S U V Y = S U B1 Y / S U V Y).
replace (S U B Y) with (S U B1 Y).
auto.
unfold on_foot in *.
use HB1.

*****
H5 : not (eq U V)
H4 : Col B1 U V
H2 : perp B1 B U V
B1 : Point
H1 : eq (S U A Y) (Fmult (Fdiv (Py A U V) (Py U V U)) (S U V Y))
HA1 : and (perp A1 A U V) (and (Col A1 U V) (not (eq U V)))
A1 : Point
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
H : on_perp_d Y U V r
r : F
A,B,U,V,Y : Point
*****
eq (S U B1 Y) (S U B Y)
+++++
unfold on_perp_d in *.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.
use H.
assert (parallel A1 A Y U).
apply (perp_perp_para A1 A U V Y U);auto with Geom.
assert (parallel Y U A1 A) by auto with Geom.
unfold parallel, S4 in H7.
uniformize_signed_areas.
IsoleVar (S Y A1 U) H7.
rewrite H7.
ring.
assert ( S U A1 Y / S U V Y = U**A1 / U**V).
rewrite (A6 U A1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HA1.
auto with Geom.
assert (U**A1 / U**V = Py A1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HA1;auto with Geom.
assert (Py A1 U V = Py A U V).
unfold on_foot in *.
use HA1.
unfold perp, Py4 in H4.
IsoleVar (Py A1 U V) H4.
rewrite H4.
ring.
rewrite H2 in H1.
rewrite H3 in H1.
rewrite H4 in H1.
IsoleVar (S U A Y) H1.
rewrite H1.
field.
unfold on_perp_d in *.
intuition.
auto with Geom.
assert (S U B Y = Py B U V / Py U V U * S U V Y).
elim (proj_ex B U V).
intros B1 HB1.
2:unfold on_perp_d in H;intuition.
assert (S U B Y / S U V Y = S U B1 Y / S U V Y).
replace (S U B Y) with (S U B1 Y).
auto.
unfold on_foot in *.
use HB1.
unfold on_perp_d in *.

*****
H5 : not (eq U V)
H4 : Col B1 U V
H2 : perp B1 B U V
B1 : Point
H1 : eq (S U A Y) (Fmult (Fdiv (Py A U V) (Py U V U)) (S U V Y))
HA1 : and (perp A1 A U V) (and (Col A1 U V) (not (eq U V)))
A1 : Point
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
H : and (not (eq U V))\n (and (perp Y U U V)\n (and\n (eq (Fmult r (Py U V U))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S U V Y)))\n (not (eq r F0))))
r : F
A,B,U,V,Y : Point
*****
eq (S U B1 Y) (S U B Y)
+++++
use H.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.
use H.
assert (parallel A1 A Y U).
apply (perp_perp_para A1 A U V Y U);auto with Geom.
assert (parallel Y U A1 A) by auto with Geom.
unfold parallel, S4 in H7.
uniformize_signed_areas.
IsoleVar (S Y A1 U) H7.
rewrite H7.
ring.
assert ( S U A1 Y / S U V Y = U**A1 / U**V).
rewrite (A6 U A1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HA1.
auto with Geom.
assert (U**A1 / U**V = Py A1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HA1;auto with Geom.
assert (Py A1 U V = Py A U V).
unfold on_foot in *.
use HA1.
unfold perp, Py4 in H4.
IsoleVar (Py A1 U V) H4.
rewrite H4.
ring.
rewrite H2 in H1.
rewrite H3 in H1.
rewrite H4 in H1.
IsoleVar (S U A Y) H1.
rewrite H1.
field.
unfold on_perp_d in *.
intuition.
auto with Geom.
assert (S U B Y = Py B U V / Py U V U * S U V Y).
elim (proj_ex B U V).
intros B1 HB1.
2:unfold on_perp_d in H;intuition.
assert (S U B Y / S U V Y = S U B1 Y / S U V Y).
replace (S U B Y) with (S U B1 Y).
auto.
unfold on_foot in *.
use HB1.
unfold on_perp_d in *.
use H.

*****
H9 : not (eq r F0)
H6 : eq (Fmult r (Py U V U))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S U V Y))
H7 : perp Y U U V
H5,H3 : not (eq U V)
H4 : Col B1 U V
H2 : perp B1 B U V
B1 : Point
H1 : eq (S U A Y) (Fmult (Fdiv (Py A U V) (Py U V U)) (S U V Y))
HA1 : and (perp A1 A U V) (and (Col A1 U V) (not (eq U V)))
A1 : Point
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
r : F
A,B,U,V,Y : Point
*****
eq (S U B1 Y) (S U B Y)
+++++
assert (parallel B1 B Y U).
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.
use H.
assert (parallel A1 A Y U).
apply (perp_perp_para A1 A U V Y U);auto with Geom.
assert (parallel Y U A1 A) by auto with Geom.
unfold parallel, S4 in H7.
uniformize_signed_areas.
IsoleVar (S Y A1 U) H7.
rewrite H7.
ring.
assert ( S U A1 Y / S U V Y = U**A1 / U**V).
rewrite (A6 U A1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HA1.
auto with Geom.
assert (U**A1 / U**V = Py A1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HA1;auto with Geom.
assert (Py A1 U V = Py A U V).
unfold on_foot in *.
use HA1.
unfold perp, Py4 in H4.
IsoleVar (Py A1 U V) H4.
rewrite H4.
ring.
rewrite H2 in H1.
rewrite H3 in H1.
rewrite H4 in H1.
IsoleVar (S U A Y) H1.
rewrite H1.
field.
unfold on_perp_d in *.
intuition.
auto with Geom.
assert (S U B Y = Py B U V / Py U V U * S U V Y).
elim (proj_ex B U V).
intros B1 HB1.
2:unfold on_perp_d in H;intuition.
assert (S U B Y / S U V Y = S U B1 Y / S U V Y).
replace (S U B Y) with (S U B1 Y).
auto.
unfold on_foot in *.
use HB1.
unfold on_perp_d in *.
use H.
assert (parallel B1 B Y U).

*****
H9 : not (eq r F0)
H6 : eq (Fmult r (Py U V U))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S U V Y))
H7 : perp Y U U V
H5,H3 : not (eq U V)
H4 : Col B1 U V
H2 : perp B1 B U V
B1 : Point
H1 : eq (S U A Y) (Fmult (Fdiv (Py A U V) (Py U V U)) (S U V Y))
HA1 : and (perp A1 A U V) (and (Col A1 U V) (not (eq U V)))
A1 : Point
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
r : F
A,B,U,V,Y : Point
*****
parallel B1 B Y U
+++++
apply (perp_perp_para B1 B U V Y U);auto with Geom.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.
use H.
assert (parallel A1 A Y U).
apply (perp_perp_para A1 A U V Y U);auto with Geom.
assert (parallel Y U A1 A) by auto with Geom.
unfold parallel, S4 in H7.
uniformize_signed_areas.
IsoleVar (S Y A1 U) H7.
rewrite H7.
ring.
assert ( S U A1 Y / S U V Y = U**A1 / U**V).
rewrite (A6 U A1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HA1.
auto with Geom.
assert (U**A1 / U**V = Py A1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HA1;auto with Geom.
assert (Py A1 U V = Py A U V).
unfold on_foot in *.
use HA1.
unfold perp, Py4 in H4.
IsoleVar (Py A1 U V) H4.
rewrite H4.
ring.
rewrite H2 in H1.
rewrite H3 in H1.
rewrite H4 in H1.
IsoleVar (S U A Y) H1.
rewrite H1.
field.
unfold on_perp_d in *.
intuition.
auto with Geom.
assert (S U B Y = Py B U V / Py U V U * S U V Y).
elim (proj_ex B U V).
intros B1 HB1.
2:unfold on_perp_d in H;intuition.
assert (S U B Y / S U V Y = S U B1 Y / S U V Y).
replace (S U B Y) with (S U B1 Y).
auto.
unfold on_foot in *.
use HB1.
unfold on_perp_d in *.
use H.
assert (parallel B1 B Y U).
apply (perp_perp_para B1 B U V Y U);auto with Geom.

*****
H : parallel B1 B Y U
H9 : not (eq r F0)
H6 : eq (Fmult r (Py U V U))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S U V Y))
H7 : perp Y U U V
H5,H3 : not (eq U V)
H4 : Col B1 U V
H2 : perp B1 B U V
B1 : Point
H1 : eq (S U A Y) (Fmult (Fdiv (Py A U V) (Py U V U)) (S U V Y))
HA1 : and (perp A1 A U V) (and (Col A1 U V) (not (eq U V)))
A1 : Point
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
r : F
A,B,U,V,Y : Point
*****
eq (S U B1 Y) (S U B Y)
+++++
assert (parallel Y U B1 B) by auto with Geom.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.
use H.
assert (parallel A1 A Y U).
apply (perp_perp_para A1 A U V Y U);auto with Geom.
assert (parallel Y U A1 A) by auto with Geom.
unfold parallel, S4 in H7.
uniformize_signed_areas.
IsoleVar (S Y A1 U) H7.
rewrite H7.
ring.
assert ( S U A1 Y / S U V Y = U**A1 / U**V).
rewrite (A6 U A1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HA1.
auto with Geom.
assert (U**A1 / U**V = Py A1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HA1;auto with Geom.
assert (Py A1 U V = Py A U V).
unfold on_foot in *.
use HA1.
unfold perp, Py4 in H4.
IsoleVar (Py A1 U V) H4.
rewrite H4.
ring.
rewrite H2 in H1.
rewrite H3 in H1.
rewrite H4 in H1.
IsoleVar (S U A Y) H1.
rewrite H1.
field.
unfold on_perp_d in *.
intuition.
auto with Geom.
assert (S U B Y = Py B U V / Py U V U * S U V Y).
elim (proj_ex B U V).
intros B1 HB1.
2:unfold on_perp_d in H;intuition.
assert (S U B Y / S U V Y = S U B1 Y / S U V Y).
replace (S U B Y) with (S U B1 Y).
auto.
unfold on_foot in *.
use HB1.
unfold on_perp_d in *.
use H.
assert (parallel B1 B Y U).
apply (perp_perp_para B1 B U V Y U);auto with Geom.
assert (parallel Y U B1 B) by auto with Geom.

*****
H8 : parallel Y U B1 B
H : parallel B1 B Y U
H9 : not (eq r F0)
H6 : eq (Fmult r (Py U V U))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S U V Y))
H7 : perp Y U U V
H5,H3 : not (eq U V)
H4 : Col B1 U V
H2 : perp B1 B U V
B1 : Point
H1 : eq (S U A Y) (Fmult (Fdiv (Py A U V) (Py U V U)) (S U V Y))
HA1 : and (perp A1 A U V) (and (Col A1 U V) (not (eq U V)))
A1 : Point
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
r : F
A,B,U,V,Y : Point
*****
eq (S U B1 Y) (S U B Y)
+++++
unfold parallel, S4 in H8.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.
use H.
assert (parallel A1 A Y U).
apply (perp_perp_para A1 A U V Y U);auto with Geom.
assert (parallel Y U A1 A) by auto with Geom.
unfold parallel, S4 in H7.
uniformize_signed_areas.
IsoleVar (S Y A1 U) H7.
rewrite H7.
ring.
assert ( S U A1 Y / S U V Y = U**A1 / U**V).
rewrite (A6 U A1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HA1.
auto with Geom.
assert (U**A1 / U**V = Py A1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HA1;auto with Geom.
assert (Py A1 U V = Py A U V).
unfold on_foot in *.
use HA1.
unfold perp, Py4 in H4.
IsoleVar (Py A1 U V) H4.
rewrite H4.
ring.
rewrite H2 in H1.
rewrite H3 in H1.
rewrite H4 in H1.
IsoleVar (S U A Y) H1.
rewrite H1.
field.
unfold on_perp_d in *.
intuition.
auto with Geom.
assert (S U B Y = Py B U V / Py U V U * S U V Y).
elim (proj_ex B U V).
intros B1 HB1.
2:unfold on_perp_d in H;intuition.
assert (S U B Y / S U V Y = S U B1 Y / S U V Y).
replace (S U B Y) with (S U B1 Y).
auto.
unfold on_foot in *.
use HB1.
unfold on_perp_d in *.
use H.
assert (parallel B1 B Y U).
apply (perp_perp_para B1 B U V Y U);auto with Geom.
assert (parallel Y U B1 B) by auto with Geom.
unfold parallel, S4 in H8.

*****
H8 : eq (Fplus (S Y B1 U) (S Y U B)) F0
H : parallel B1 B Y U
H9 : not (eq r F0)
H6 : eq (Fmult r (Py U V U))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S U V Y))
H7 : perp Y U U V
H5,H3 : not (eq U V)
H4 : Col B1 U V
H2 : perp B1 B U V
B1 : Point
H1 : eq (S U A Y) (Fmult (Fdiv (Py A U V) (Py U V U)) (S U V Y))
HA1 : and (perp A1 A U V) (and (Col A1 U V) (not (eq U V)))
A1 : Point
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
r : F
A,B,U,V,Y : Point
*****
eq (S U B1 Y) (S U B Y)
+++++
uniformize_signed_areas.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.
use H.
assert (parallel A1 A Y U).
apply (perp_perp_para A1 A U V Y U);auto with Geom.
assert (parallel Y U A1 A) by auto with Geom.
unfold parallel, S4 in H7.
uniformize_signed_areas.
IsoleVar (S Y A1 U) H7.
rewrite H7.
ring.
assert ( S U A1 Y / S U V Y = U**A1 / U**V).
rewrite (A6 U A1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HA1.
auto with Geom.
assert (U**A1 / U**V = Py A1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HA1;auto with Geom.
assert (Py A1 U V = Py A U V).
unfold on_foot in *.
use HA1.
unfold perp, Py4 in H4.
IsoleVar (Py A1 U V) H4.
rewrite H4.
ring.
rewrite H2 in H1.
rewrite H3 in H1.
rewrite H4 in H1.
IsoleVar (S U A Y) H1.
rewrite H1.
field.
unfold on_perp_d in *.
intuition.
auto with Geom.
assert (S U B Y = Py B U V / Py U V U * S U V Y).
elim (proj_ex B U V).
intros B1 HB1.
2:unfold on_perp_d in H;intuition.
assert (S U B Y / S U V Y = S U B1 Y / S U V Y).
replace (S U B Y) with (S U B1 Y).
auto.
unfold on_foot in *.
use HB1.
unfold on_perp_d in *.
use H.
assert (parallel B1 B Y U).
apply (perp_perp_para B1 B U V Y U);auto with Geom.
assert (parallel Y U B1 B) by auto with Geom.
unfold parallel, S4 in H8.
uniformize_signed_areas.

*****
H8 : eq (Fplus (S Y B1 U) (S U B Y)) F0
H6 : eq (Fmult r (Py U V U))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S U V Y))
H1 : eq (Fopp (S A U Y)) (Fmult (Fdiv (Py A U V) (Py U V U)) (S U V Y))
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
H : parallel B1 B Y U
H9 : not (eq r F0)
H7 : perp Y U U V
H5,H3 : not (eq U V)
H4 : Col B1 U V
H2 : perp B1 B U V
B1 : Point
HA1 : and (perp A1 A U V) (and (Col A1 U V) (not (eq U V)))
A1 : Point
Hyuv : not (Col Y U V)
r : F
A,B,U,V,Y : Point
*****
eq (Fopp (S Y B1 U)) (S U B Y)
+++++
IsoleVar (S Y B1 U) H8.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.
use H.
assert (parallel A1 A Y U).
apply (perp_perp_para A1 A U V Y U);auto with Geom.
assert (parallel Y U A1 A) by auto with Geom.
unfold parallel, S4 in H7.
uniformize_signed_areas.
IsoleVar (S Y A1 U) H7.
rewrite H7.
ring.
assert ( S U A1 Y / S U V Y = U**A1 / U**V).
rewrite (A6 U A1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HA1.
auto with Geom.
assert (U**A1 / U**V = Py A1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HA1;auto with Geom.
assert (Py A1 U V = Py A U V).
unfold on_foot in *.
use HA1.
unfold perp, Py4 in H4.
IsoleVar (Py A1 U V) H4.
rewrite H4.
ring.
rewrite H2 in H1.
rewrite H3 in H1.
rewrite H4 in H1.
IsoleVar (S U A Y) H1.
rewrite H1.
field.
unfold on_perp_d in *.
intuition.
auto with Geom.
assert (S U B Y = Py B U V / Py U V U * S U V Y).
elim (proj_ex B U V).
intros B1 HB1.
2:unfold on_perp_d in H;intuition.
assert (S U B Y / S U V Y = S U B1 Y / S U V Y).
replace (S U B Y) with (S U B1 Y).
auto.
unfold on_foot in *.
use HB1.
unfold on_perp_d in *.
use H.
assert (parallel B1 B Y U).
apply (perp_perp_para B1 B U V Y U);auto with Geom.
assert (parallel Y U B1 B) by auto with Geom.
unfold parallel, S4 in H8.
uniformize_signed_areas.
IsoleVar (S Y B1 U) H8.

*****
H8 : eq (S Y B1 U) (Fminus F0 (S U B Y))
H6 : eq (Fmult r (Py U V U))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S U V Y))
H1 : eq (Fopp (S A U Y)) (Fmult (Fdiv (Py A U V) (Py U V U)) (S U V Y))
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
H : parallel B1 B Y U
H9 : not (eq r F0)
H7 : perp Y U U V
H5,H3 : not (eq U V)
H4 : Col B1 U V
H2 : perp B1 B U V
B1 : Point
HA1 : and (perp A1 A U V) (and (Col A1 U V) (not (eq U V)))
A1 : Point
Hyuv : not (Col Y U V)
r : F
A,B,U,V,Y : Point
*****
eq (Fopp (S Y B1 U)) (S U B Y)
+++++
rewrite H8.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.
use H.
assert (parallel A1 A Y U).
apply (perp_perp_para A1 A U V Y U);auto with Geom.
assert (parallel Y U A1 A) by auto with Geom.
unfold parallel, S4 in H7.
uniformize_signed_areas.
IsoleVar (S Y A1 U) H7.
rewrite H7.
ring.
assert ( S U A1 Y / S U V Y = U**A1 / U**V).
rewrite (A6 U A1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HA1.
auto with Geom.
assert (U**A1 / U**V = Py A1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HA1;auto with Geom.
assert (Py A1 U V = Py A U V).
unfold on_foot in *.
use HA1.
unfold perp, Py4 in H4.
IsoleVar (Py A1 U V) H4.
rewrite H4.
ring.
rewrite H2 in H1.
rewrite H3 in H1.
rewrite H4 in H1.
IsoleVar (S U A Y) H1.
rewrite H1.
field.
unfold on_perp_d in *.
intuition.
auto with Geom.
assert (S U B Y = Py B U V / Py U V U * S U V Y).
elim (proj_ex B U V).
intros B1 HB1.
2:unfold on_perp_d in H;intuition.
assert (S U B Y / S U V Y = S U B1 Y / S U V Y).
replace (S U B Y) with (S U B1 Y).
auto.
unfold on_foot in *.
use HB1.
unfold on_perp_d in *.
use H.
assert (parallel B1 B Y U).
apply (perp_perp_para B1 B U V Y U);auto with Geom.
assert (parallel Y U B1 B) by auto with Geom.
unfold parallel, S4 in H8.
uniformize_signed_areas.
IsoleVar (S Y B1 U) H8.
rewrite H8.

*****
H8 : eq (S Y B1 U) (Fminus F0 (S U B Y))
H6 : eq (Fmult r (Py U V U))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S U V Y))
H1 : eq (Fopp (S A U Y)) (Fmult (Fdiv (Py A U V) (Py U V U)) (S U V Y))
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
H : parallel B1 B Y U
H9 : not (eq r F0)
H7 : perp Y U U V
H5,H3 : not (eq U V)
H4 : Col B1 U V
H2 : perp B1 B U V
B1 : Point
HA1 : and (perp A1 A U V) (and (Col A1 U V) (not (eq U V)))
A1 : Point
Hyuv : not (Col Y U V)
r : F
A,B,U,V,Y : Point
*****
eq (Fopp (Fminus F0 (S U B Y))) (S U B Y)
+++++
ring.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.
use H.
assert (parallel A1 A Y U).
apply (perp_perp_para A1 A U V Y U);auto with Geom.
assert (parallel Y U A1 A) by auto with Geom.
unfold parallel, S4 in H7.
uniformize_signed_areas.
IsoleVar (S Y A1 U) H7.
rewrite H7.
ring.
assert ( S U A1 Y / S U V Y = U**A1 / U**V).
rewrite (A6 U A1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HA1.
auto with Geom.
assert (U**A1 / U**V = Py A1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HA1;auto with Geom.
assert (Py A1 U V = Py A U V).
unfold on_foot in *.
use HA1.
unfold perp, Py4 in H4.
IsoleVar (Py A1 U V) H4.
rewrite H4.
ring.
rewrite H2 in H1.
rewrite H3 in H1.
rewrite H4 in H1.
IsoleVar (S U A Y) H1.
rewrite H1.
field.
unfold on_perp_d in *.
intuition.
auto with Geom.
assert (S U B Y = Py B U V / Py U V U * S U V Y).
elim (proj_ex B U V).
intros B1 HB1.
2:unfold on_perp_d in H;intuition.
assert (S U B Y / S U V Y = S U B1 Y / S U V Y).
replace (S U B Y) with (S U B1 Y).
auto.
unfold on_foot in *.
use HB1.
unfold on_perp_d in *.
use H.
assert (parallel B1 B Y U).
apply (perp_perp_para B1 B U V Y U);auto with Geom.
assert (parallel Y U B1 B) by auto with Geom.
unfold parallel, S4 in H8.
uniformize_signed_areas.
IsoleVar (S Y B1 U) H8.
rewrite H8.
ring.

*****
H2 : eq (Fdiv (S U B Y) (S U V Y)) (Fdiv (S U B1 Y) (S U V Y))
HB1 : on_foot B1 B U V
B1 : Point
H1 : eq (S U A Y) (Fmult (Fdiv (Py A U V) (Py U V U)) (S U V Y))
HA1 : on_foot A1 A U V
A1 : Point
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
H : on_perp_d Y U V r
r : F
A,B,U,V,Y : Point
*****
eq (S U B Y) (Fmult (Fdiv (Py B U V) (Py U V U)) (S U V Y))
+++++
assert ( S U B1 Y / S U V Y = U**B1 / U**V).
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.
use H.
assert (parallel A1 A Y U).
apply (perp_perp_para A1 A U V Y U);auto with Geom.
assert (parallel Y U A1 A) by auto with Geom.
unfold parallel, S4 in H7.
uniformize_signed_areas.
IsoleVar (S Y A1 U) H7.
rewrite H7.
ring.
assert ( S U A1 Y / S U V Y = U**A1 / U**V).
rewrite (A6 U A1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HA1.
auto with Geom.
assert (U**A1 / U**V = Py A1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HA1;auto with Geom.
assert (Py A1 U V = Py A U V).
unfold on_foot in *.
use HA1.
unfold perp, Py4 in H4.
IsoleVar (Py A1 U V) H4.
rewrite H4.
ring.
rewrite H2 in H1.
rewrite H3 in H1.
rewrite H4 in H1.
IsoleVar (S U A Y) H1.
rewrite H1.
field.
unfold on_perp_d in *.
intuition.
auto with Geom.
assert (S U B Y = Py B U V / Py U V U * S U V Y).
elim (proj_ex B U V).
intros B1 HB1.
2:unfold on_perp_d in H;intuition.
assert (S U B Y / S U V Y = S U B1 Y / S U V Y).
replace (S U B Y) with (S U B1 Y).
auto.
unfold on_foot in *.
use HB1.
unfold on_perp_d in *.
use H.
assert (parallel B1 B Y U).
apply (perp_perp_para B1 B U V Y U);auto with Geom.
assert (parallel Y U B1 B) by auto with Geom.
unfold parallel, S4 in H8.
uniformize_signed_areas.
IsoleVar (S Y B1 U) H8.
rewrite H8.
ring.
assert ( S U B1 Y / S U V Y = U**B1 / U**V).

*****
H2 : eq (Fdiv (S U B Y) (S U V Y)) (Fdiv (S U B1 Y) (S U V Y))
HB1 : on_foot B1 B U V
B1 : Point
H1 : eq (S U A Y) (Fmult (Fdiv (Py A U V) (Py U V U)) (S U V Y))
HA1 : on_foot A1 A U V
A1 : Point
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
H : on_perp_d Y U V r
r : F
A,B,U,V,Y : Point
*****
eq (Fdiv (S U B1 Y) (S U V Y)) (Fdiv (DSeg U B1) (DSeg U V))
+++++
rewrite (A6 U B1 V Y).
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.
use H.
assert (parallel A1 A Y U).
apply (perp_perp_para A1 A U V Y U);auto with Geom.
assert (parallel Y U A1 A) by auto with Geom.
unfold parallel, S4 in H7.
uniformize_signed_areas.
IsoleVar (S Y A1 U) H7.
rewrite H7.
ring.
assert ( S U A1 Y / S U V Y = U**A1 / U**V).
rewrite (A6 U A1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HA1.
auto with Geom.
assert (U**A1 / U**V = Py A1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HA1;auto with Geom.
assert (Py A1 U V = Py A U V).
unfold on_foot in *.
use HA1.
unfold perp, Py4 in H4.
IsoleVar (Py A1 U V) H4.
rewrite H4.
ring.
rewrite H2 in H1.
rewrite H3 in H1.
rewrite H4 in H1.
IsoleVar (S U A Y) H1.
rewrite H1.
field.
unfold on_perp_d in *.
intuition.
auto with Geom.
assert (S U B Y = Py B U V / Py U V U * S U V Y).
elim (proj_ex B U V).
intros B1 HB1.
2:unfold on_perp_d in H;intuition.
assert (S U B Y / S U V Y = S U B1 Y / S U V Y).
replace (S U B Y) with (S U B1 Y).
auto.
unfold on_foot in *.
use HB1.
unfold on_perp_d in *.
use H.
assert (parallel B1 B Y U).
apply (perp_perp_para B1 B U V Y U);auto with Geom.
assert (parallel Y U B1 B) by auto with Geom.
unfold parallel, S4 in H8.
uniformize_signed_areas.
IsoleVar (S Y B1 U) H8.
rewrite H8.
ring.
assert ( S U B1 Y / S U V Y = U**B1 / U**V).
rewrite (A6 U B1 V Y).

*****
H2 : eq (Fdiv (S U B Y) (S U V Y)) (Fdiv (S U B1 Y) (S U V Y))
HB1 : on_foot B1 B U V
B1 : Point
H1 : eq (S U A Y) (Fmult (Fdiv (Py A U V) (Py U V U)) (S U V Y))
HA1 : on_foot A1 A U V
A1 : Point
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
H : on_perp_d Y U V r
r : F
A,B,U,V,Y : Point
*****
eq (Fdiv (S U B1 Y) (S U V Y)) (Fdiv (S Y U B1) (S Y U V))
+++++
uniformize_signed_areas.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.
use H.
assert (parallel A1 A Y U).
apply (perp_perp_para A1 A U V Y U);auto with Geom.
assert (parallel Y U A1 A) by auto with Geom.
unfold parallel, S4 in H7.
uniformize_signed_areas.
IsoleVar (S Y A1 U) H7.
rewrite H7.
ring.
assert ( S U A1 Y / S U V Y = U**A1 / U**V).
rewrite (A6 U A1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HA1.
auto with Geom.
assert (U**A1 / U**V = Py A1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HA1;auto with Geom.
assert (Py A1 U V = Py A U V).
unfold on_foot in *.
use HA1.
unfold perp, Py4 in H4.
IsoleVar (Py A1 U V) H4.
rewrite H4.
ring.
rewrite H2 in H1.
rewrite H3 in H1.
rewrite H4 in H1.
IsoleVar (S U A Y) H1.
rewrite H1.
field.
unfold on_perp_d in *.
intuition.
auto with Geom.
assert (S U B Y = Py B U V / Py U V U * S U V Y).
elim (proj_ex B U V).
intros B1 HB1.
2:unfold on_perp_d in H;intuition.
assert (S U B Y / S U V Y = S U B1 Y / S U V Y).
replace (S U B Y) with (S U B1 Y).
auto.
unfold on_foot in *.
use HB1.
unfold on_perp_d in *.
use H.
assert (parallel B1 B Y U).
apply (perp_perp_para B1 B U V Y U);auto with Geom.
assert (parallel Y U B1 B) by auto with Geom.
unfold parallel, S4 in H8.
uniformize_signed_areas.
IsoleVar (S Y B1 U) H8.
rewrite H8.
ring.
assert ( S U B1 Y / S U V Y = U**B1 / U**V).
rewrite (A6 U B1 V Y).
uniformize_signed_areas.

*****
H2 : eq (Fdiv (S U B Y) (S U V Y)) (Fdiv (S U B1 Y) (S U V Y))
H1 : eq (Fopp (S A U Y)) (Fmult (Fdiv (Py A U V) (Py U V U)) (S U V Y))
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
HB1 : on_foot B1 B U V
B1 : Point
HA1 : on_foot A1 A U V
A1 : Point
Hyuv : not (Col Y U V)
H : on_perp_d Y U V r
r : F
A,B,U,V,Y : Point
*****
eq (Fdiv (S U B1 Y) (S U V Y)) (Fdiv (S U B1 Y) (S U V Y))
+++++
auto with Geom.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.
use H.
assert (parallel A1 A Y U).
apply (perp_perp_para A1 A U V Y U);auto with Geom.
assert (parallel Y U A1 A) by auto with Geom.
unfold parallel, S4 in H7.
uniformize_signed_areas.
IsoleVar (S Y A1 U) H7.
rewrite H7.
ring.
assert ( S U A1 Y / S U V Y = U**A1 / U**V).
rewrite (A6 U A1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HA1.
auto with Geom.
assert (U**A1 / U**V = Py A1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HA1;auto with Geom.
assert (Py A1 U V = Py A U V).
unfold on_foot in *.
use HA1.
unfold perp, Py4 in H4.
IsoleVar (Py A1 U V) H4.
rewrite H4.
ring.
rewrite H2 in H1.
rewrite H3 in H1.
rewrite H4 in H1.
IsoleVar (S U A Y) H1.
rewrite H1.
field.
unfold on_perp_d in *.
intuition.
auto with Geom.
assert (S U B Y = Py B U V / Py U V U * S U V Y).
elim (proj_ex B U V).
intros B1 HB1.
2:unfold on_perp_d in H;intuition.
assert (S U B Y / S U V Y = S U B1 Y / S U V Y).
replace (S U B Y) with (S U B1 Y).
auto.
unfold on_foot in *.
use HB1.
unfold on_perp_d in *.
use H.
assert (parallel B1 B Y U).
apply (perp_perp_para B1 B U V Y U);auto with Geom.
assert (parallel Y U B1 B) by auto with Geom.
unfold parallel, S4 in H8.
uniformize_signed_areas.
IsoleVar (S Y B1 U) H8.
rewrite H8.
ring.
assert ( S U B1 Y / S U V Y = U**B1 / U**V).
rewrite (A6 U B1 V Y).
uniformize_signed_areas.
auto with Geom.

*****
H2 : eq (Fdiv (S U B Y) (S U V Y)) (Fdiv (S U B1 Y) (S U V Y))
HB1 : on_foot B1 B U V
B1 : Point
H1 : eq (S U A Y) (Fmult (Fdiv (Py A U V) (Py U V U)) (S U V Y))
HA1 : on_foot A1 A U V
A1 : Point
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
H : on_perp_d Y U V r
r : F
A,B,U,V,Y : Point
*****
not (eq U V)
+++++
unfold on_perp_d in H.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.
use H.
assert (parallel A1 A Y U).
apply (perp_perp_para A1 A U V Y U);auto with Geom.
assert (parallel Y U A1 A) by auto with Geom.
unfold parallel, S4 in H7.
uniformize_signed_areas.
IsoleVar (S Y A1 U) H7.
rewrite H7.
ring.
assert ( S U A1 Y / S U V Y = U**A1 / U**V).
rewrite (A6 U A1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HA1.
auto with Geom.
assert (U**A1 / U**V = Py A1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HA1;auto with Geom.
assert (Py A1 U V = Py A U V).
unfold on_foot in *.
use HA1.
unfold perp, Py4 in H4.
IsoleVar (Py A1 U V) H4.
rewrite H4.
ring.
rewrite H2 in H1.
rewrite H3 in H1.
rewrite H4 in H1.
IsoleVar (S U A Y) H1.
rewrite H1.
field.
unfold on_perp_d in *.
intuition.
auto with Geom.
assert (S U B Y = Py B U V / Py U V U * S U V Y).
elim (proj_ex B U V).
intros B1 HB1.
2:unfold on_perp_d in H;intuition.
assert (S U B Y / S U V Y = S U B1 Y / S U V Y).
replace (S U B Y) with (S U B1 Y).
auto.
unfold on_foot in *.
use HB1.
unfold on_perp_d in *.
use H.
assert (parallel B1 B Y U).
apply (perp_perp_para B1 B U V Y U);auto with Geom.
assert (parallel Y U B1 B) by auto with Geom.
unfold parallel, S4 in H8.
uniformize_signed_areas.
IsoleVar (S Y B1 U) H8.
rewrite H8.
ring.
assert ( S U B1 Y / S U V Y = U**B1 / U**V).
rewrite (A6 U B1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.

*****
H2 : eq (Fdiv (S U B Y) (S U V Y)) (Fdiv (S U B1 Y) (S U V Y))
HB1 : on_foot B1 B U V
B1 : Point
H1 : eq (S U A Y) (Fmult (Fdiv (Py A U V) (Py U V U)) (S U V Y))
HA1 : on_foot A1 A U V
A1 : Point
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
H : and (not (eq U V))\n (and (perp Y U U V)\n (and\n (eq (Fmult r (Py U V U))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S U V Y)))\n (not (eq r F0))))
r : F
A,B,U,V,Y : Point
*****
not (eq U V)
+++++
use H;auto.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.
use H.
assert (parallel A1 A Y U).
apply (perp_perp_para A1 A U V Y U);auto with Geom.
assert (parallel Y U A1 A) by auto with Geom.
unfold parallel, S4 in H7.
uniformize_signed_areas.
IsoleVar (S Y A1 U) H7.
rewrite H7.
ring.
assert ( S U A1 Y / S U V Y = U**A1 / U**V).
rewrite (A6 U A1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HA1.
auto with Geom.
assert (U**A1 / U**V = Py A1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HA1;auto with Geom.
assert (Py A1 U V = Py A U V).
unfold on_foot in *.
use HA1.
unfold perp, Py4 in H4.
IsoleVar (Py A1 U V) H4.
rewrite H4.
ring.
rewrite H2 in H1.
rewrite H3 in H1.
rewrite H4 in H1.
IsoleVar (S U A Y) H1.
rewrite H1.
field.
unfold on_perp_d in *.
intuition.
auto with Geom.
assert (S U B Y = Py B U V / Py U V U * S U V Y).
elim (proj_ex B U V).
intros B1 HB1.
2:unfold on_perp_d in H;intuition.
assert (S U B Y / S U V Y = S U B1 Y / S U V Y).
replace (S U B Y) with (S U B1 Y).
auto.
unfold on_foot in *.
use HB1.
unfold on_perp_d in *.
use H.
assert (parallel B1 B Y U).
apply (perp_perp_para B1 B U V Y U);auto with Geom.
assert (parallel Y U B1 B) by auto with Geom.
unfold parallel, S4 in H8.
uniformize_signed_areas.
IsoleVar (S Y B1 U) H8.
rewrite H8.
ring.
assert ( S U B1 Y / S U V Y = U**B1 / U**V).
rewrite (A6 U B1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.

*****
H2 : eq (Fdiv (S U B Y) (S U V Y)) (Fdiv (S U B1 Y) (S U V Y))
HB1 : on_foot B1 B U V
B1 : Point
H1 : eq (S U A Y) (Fmult (Fdiv (Py A U V) (Py U V U)) (S U V Y))
HA1 : on_foot A1 A U V
A1 : Point
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
H : on_perp_d Y U V r
r : F
A,B,U,V,Y : Point
*****
not (Col Y U V)
+++++
unfold on_perp_d in H.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.
use H.
assert (parallel A1 A Y U).
apply (perp_perp_para A1 A U V Y U);auto with Geom.
assert (parallel Y U A1 A) by auto with Geom.
unfold parallel, S4 in H7.
uniformize_signed_areas.
IsoleVar (S Y A1 U) H7.
rewrite H7.
ring.
assert ( S U A1 Y / S U V Y = U**A1 / U**V).
rewrite (A6 U A1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HA1.
auto with Geom.
assert (U**A1 / U**V = Py A1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HA1;auto with Geom.
assert (Py A1 U V = Py A U V).
unfold on_foot in *.
use HA1.
unfold perp, Py4 in H4.
IsoleVar (Py A1 U V) H4.
rewrite H4.
ring.
rewrite H2 in H1.
rewrite H3 in H1.
rewrite H4 in H1.
IsoleVar (S U A Y) H1.
rewrite H1.
field.
unfold on_perp_d in *.
intuition.
auto with Geom.
assert (S U B Y = Py B U V / Py U V U * S U V Y).
elim (proj_ex B U V).
intros B1 HB1.
2:unfold on_perp_d in H;intuition.
assert (S U B Y / S U V Y = S U B1 Y / S U V Y).
replace (S U B Y) with (S U B1 Y).
auto.
unfold on_foot in *.
use HB1.
unfold on_perp_d in *.
use H.
assert (parallel B1 B Y U).
apply (perp_perp_para B1 B U V Y U);auto with Geom.
assert (parallel Y U B1 B) by auto with Geom.
unfold parallel, S4 in H8.
uniformize_signed_areas.
IsoleVar (S Y B1 U) H8.
rewrite H8.
ring.
assert ( S U B1 Y / S U V Y = U**B1 / U**V).
rewrite (A6 U B1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.

*****
H2 : eq (Fdiv (S U B Y) (S U V Y)) (Fdiv (S U B1 Y) (S U V Y))
HB1 : on_foot B1 B U V
B1 : Point
H1 : eq (S U A Y) (Fmult (Fdiv (Py A U V) (Py U V U)) (S U V Y))
HA1 : on_foot A1 A U V
A1 : Point
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
H : and (not (eq U V))\n (and (perp Y U U V)\n (and\n (eq (Fmult r (Py U V U))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S U V Y)))\n (not (eq r F0))))
r : F
A,B,U,V,Y : Point
*****
not (Col Y U V)
+++++
use H.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.
use H.
assert (parallel A1 A Y U).
apply (perp_perp_para A1 A U V Y U);auto with Geom.
assert (parallel Y U A1 A) by auto with Geom.
unfold parallel, S4 in H7.
uniformize_signed_areas.
IsoleVar (S Y A1 U) H7.
rewrite H7.
ring.
assert ( S U A1 Y / S U V Y = U**A1 / U**V).
rewrite (A6 U A1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HA1.
auto with Geom.
assert (U**A1 / U**V = Py A1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HA1;auto with Geom.
assert (Py A1 U V = Py A U V).
unfold on_foot in *.
use HA1.
unfold perp, Py4 in H4.
IsoleVar (Py A1 U V) H4.
rewrite H4.
ring.
rewrite H2 in H1.
rewrite H3 in H1.
rewrite H4 in H1.
IsoleVar (S U A Y) H1.
rewrite H1.
field.
unfold on_perp_d in *.
intuition.
auto with Geom.
assert (S U B Y = Py B U V / Py U V U * S U V Y).
elim (proj_ex B U V).
intros B1 HB1.
2:unfold on_perp_d in H;intuition.
assert (S U B Y / S U V Y = S U B1 Y / S U V Y).
replace (S U B Y) with (S U B1 Y).
auto.
unfold on_foot in *.
use HB1.
unfold on_perp_d in *.
use H.
assert (parallel B1 B Y U).
apply (perp_perp_para B1 B U V Y U);auto with Geom.
assert (parallel Y U B1 B) by auto with Geom.
unfold parallel, S4 in H8.
uniformize_signed_areas.
IsoleVar (S Y B1 U) H8.
rewrite H8.
ring.
assert ( S U B1 Y / S U V Y = U**B1 / U**V).
rewrite (A6 U B1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.

*****
H7 : not (eq r F0)
H4 : eq (Fmult r (Py U V U))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S U V Y))
H5 : perp Y U U V
H3 : not (eq U V)
H2 : eq (Fdiv (S U B Y) (S U V Y)) (Fdiv (S U B1 Y) (S U V Y))
HB1 : on_foot B1 B U V
B1 : Point
H1 : eq (S U A Y) (Fmult (Fdiv (Py A U V) (Py U V U)) (S U V Y))
HA1 : on_foot A1 A U V
A1 : Point
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
r : F
A,B,U,V,Y : Point
*****
not (Col Y U V)
+++++
auto.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.
use H.
assert (parallel A1 A Y U).
apply (perp_perp_para A1 A U V Y U);auto with Geom.
assert (parallel Y U A1 A) by auto with Geom.
unfold parallel, S4 in H7.
uniformize_signed_areas.
IsoleVar (S Y A1 U) H7.
rewrite H7.
ring.
assert ( S U A1 Y / S U V Y = U**A1 / U**V).
rewrite (A6 U A1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HA1.
auto with Geom.
assert (U**A1 / U**V = Py A1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HA1;auto with Geom.
assert (Py A1 U V = Py A U V).
unfold on_foot in *.
use HA1.
unfold perp, Py4 in H4.
IsoleVar (Py A1 U V) H4.
rewrite H4.
ring.
rewrite H2 in H1.
rewrite H3 in H1.
rewrite H4 in H1.
IsoleVar (S U A Y) H1.
rewrite H1.
field.
unfold on_perp_d in *.
intuition.
auto with Geom.
assert (S U B Y = Py B U V / Py U V U * S U V Y).
elim (proj_ex B U V).
intros B1 HB1.
2:unfold on_perp_d in H;intuition.
assert (S U B Y / S U V Y = S U B1 Y / S U V Y).
replace (S U B Y) with (S U B1 Y).
auto.
unfold on_foot in *.
use HB1.
unfold on_perp_d in *.
use H.
assert (parallel B1 B Y U).
apply (perp_perp_para B1 B U V Y U);auto with Geom.
assert (parallel Y U B1 B) by auto with Geom.
unfold parallel, S4 in H8.
uniformize_signed_areas.
IsoleVar (S Y B1 U) H8.
rewrite H8.
ring.
assert ( S U B1 Y / S U V Y = U**B1 / U**V).
rewrite (A6 U B1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.

*****
H2 : eq (Fdiv (S U B Y) (S U V Y)) (Fdiv (S U B1 Y) (S U V Y))
HB1 : on_foot B1 B U V
B1 : Point
H1 : eq (S U A Y) (Fmult (Fdiv (Py A U V) (Py U V U)) (S U V Y))
HA1 : on_foot A1 A U V
A1 : Point
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
H : on_perp_d Y U V r
r : F
A,B,U,V,Y : Point
*****
Col U B1 V
+++++
unfold on_foot in *.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.
use H.
assert (parallel A1 A Y U).
apply (perp_perp_para A1 A U V Y U);auto with Geom.
assert (parallel Y U A1 A) by auto with Geom.
unfold parallel, S4 in H7.
uniformize_signed_areas.
IsoleVar (S Y A1 U) H7.
rewrite H7.
ring.
assert ( S U A1 Y / S U V Y = U**A1 / U**V).
rewrite (A6 U A1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HA1.
auto with Geom.
assert (U**A1 / U**V = Py A1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HA1;auto with Geom.
assert (Py A1 U V = Py A U V).
unfold on_foot in *.
use HA1.
unfold perp, Py4 in H4.
IsoleVar (Py A1 U V) H4.
rewrite H4.
ring.
rewrite H2 in H1.
rewrite H3 in H1.
rewrite H4 in H1.
IsoleVar (S U A Y) H1.
rewrite H1.
field.
unfold on_perp_d in *.
intuition.
auto with Geom.
assert (S U B Y = Py B U V / Py U V U * S U V Y).
elim (proj_ex B U V).
intros B1 HB1.
2:unfold on_perp_d in H;intuition.
assert (S U B Y / S U V Y = S U B1 Y / S U V Y).
replace (S U B Y) with (S U B1 Y).
auto.
unfold on_foot in *.
use HB1.
unfold on_perp_d in *.
use H.
assert (parallel B1 B Y U).
apply (perp_perp_para B1 B U V Y U);auto with Geom.
assert (parallel Y U B1 B) by auto with Geom.
unfold parallel, S4 in H8.
uniformize_signed_areas.
IsoleVar (S Y B1 U) H8.
rewrite H8.
ring.
assert ( S U B1 Y / S U V Y = U**B1 / U**V).
rewrite (A6 U B1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.

*****
H2 : eq (Fdiv (S U B Y) (S U V Y)) (Fdiv (S U B1 Y) (S U V Y))
HB1 : and (perp B1 B U V) (and (Col B1 U V) (not (eq U V)))
B1 : Point
H1 : eq (S U A Y) (Fmult (Fdiv (Py A U V) (Py U V U)) (S U V Y))
HA1 : and (perp A1 A U V) (and (Col A1 U V) (not (eq U V)))
A1 : Point
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
H : on_perp_d Y U V r
r : F
A,B,U,V,Y : Point
*****
Col U B1 V
+++++
use HB1.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.
use H.
assert (parallel A1 A Y U).
apply (perp_perp_para A1 A U V Y U);auto with Geom.
assert (parallel Y U A1 A) by auto with Geom.
unfold parallel, S4 in H7.
uniformize_signed_areas.
IsoleVar (S Y A1 U) H7.
rewrite H7.
ring.
assert ( S U A1 Y / S U V Y = U**A1 / U**V).
rewrite (A6 U A1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HA1.
auto with Geom.
assert (U**A1 / U**V = Py A1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HA1;auto with Geom.
assert (Py A1 U V = Py A U V).
unfold on_foot in *.
use HA1.
unfold perp, Py4 in H4.
IsoleVar (Py A1 U V) H4.
rewrite H4.
ring.
rewrite H2 in H1.
rewrite H3 in H1.
rewrite H4 in H1.
IsoleVar (S U A Y) H1.
rewrite H1.
field.
unfold on_perp_d in *.
intuition.
auto with Geom.
assert (S U B Y = Py B U V / Py U V U * S U V Y).
elim (proj_ex B U V).
intros B1 HB1.
2:unfold on_perp_d in H;intuition.
assert (S U B Y / S U V Y = S U B1 Y / S U V Y).
replace (S U B Y) with (S U B1 Y).
auto.
unfold on_foot in *.
use HB1.
unfold on_perp_d in *.
use H.
assert (parallel B1 B Y U).
apply (perp_perp_para B1 B U V Y U);auto with Geom.
assert (parallel Y U B1 B) by auto with Geom.
unfold parallel, S4 in H8.
uniformize_signed_areas.
IsoleVar (S Y B1 U) H8.
rewrite H8.
ring.
assert ( S U B1 Y / S U V Y = U**B1 / U**V).
rewrite (A6 U B1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HB1.

*****
H6 : not (eq U V)
H5 : Col B1 U V
H3 : perp B1 B U V
H2 : eq (Fdiv (S U B Y) (S U V Y)) (Fdiv (S U B1 Y) (S U V Y))
B1 : Point
H1 : eq (S U A Y) (Fmult (Fdiv (Py A U V) (Py U V U)) (S U V Y))
HA1 : and (perp A1 A U V) (and (Col A1 U V) (not (eq U V)))
A1 : Point
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
H : on_perp_d Y U V r
r : F
A,B,U,V,Y : Point
*****
Col U B1 V
+++++
auto with Geom.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.
use H.
assert (parallel A1 A Y U).
apply (perp_perp_para A1 A U V Y U);auto with Geom.
assert (parallel Y U A1 A) by auto with Geom.
unfold parallel, S4 in H7.
uniformize_signed_areas.
IsoleVar (S Y A1 U) H7.
rewrite H7.
ring.
assert ( S U A1 Y / S U V Y = U**A1 / U**V).
rewrite (A6 U A1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HA1.
auto with Geom.
assert (U**A1 / U**V = Py A1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HA1;auto with Geom.
assert (Py A1 U V = Py A U V).
unfold on_foot in *.
use HA1.
unfold perp, Py4 in H4.
IsoleVar (Py A1 U V) H4.
rewrite H4.
ring.
rewrite H2 in H1.
rewrite H3 in H1.
rewrite H4 in H1.
IsoleVar (S U A Y) H1.
rewrite H1.
field.
unfold on_perp_d in *.
intuition.
auto with Geom.
assert (S U B Y = Py B U V / Py U V U * S U V Y).
elim (proj_ex B U V).
intros B1 HB1.
2:unfold on_perp_d in H;intuition.
assert (S U B Y / S U V Y = S U B1 Y / S U V Y).
replace (S U B Y) with (S U B1 Y).
auto.
unfold on_foot in *.
use HB1.
unfold on_perp_d in *.
use H.
assert (parallel B1 B Y U).
apply (perp_perp_para B1 B U V Y U);auto with Geom.
assert (parallel Y U B1 B) by auto with Geom.
unfold parallel, S4 in H8.
uniformize_signed_areas.
IsoleVar (S Y B1 U) H8.
rewrite H8.
ring.
assert ( S U B1 Y / S U V Y = U**B1 / U**V).
rewrite (A6 U B1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HB1.
auto with Geom.

*****
H3 : eq (Fdiv (S U B1 Y) (S U V Y)) (Fdiv (DSeg U B1) (DSeg U V))
H2 : eq (Fdiv (S U B Y) (S U V Y)) (Fdiv (S U B1 Y) (S U V Y))
HB1 : on_foot B1 B U V
B1 : Point
H1 : eq (S U A Y) (Fmult (Fdiv (Py A U V) (Py U V U)) (S U V Y))
HA1 : on_foot A1 A U V
A1 : Point
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
H : on_perp_d Y U V r
r : F
A,B,U,V,Y : Point
*****
eq (S U B Y) (Fmult (Fdiv (Py B U V) (Py U V U)) (S U V Y))
+++++
assert (U**B1 / U**V = Py B1 U V / Py U V U).
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.
use H.
assert (parallel A1 A Y U).
apply (perp_perp_para A1 A U V Y U);auto with Geom.
assert (parallel Y U A1 A) by auto with Geom.
unfold parallel, S4 in H7.
uniformize_signed_areas.
IsoleVar (S Y A1 U) H7.
rewrite H7.
ring.
assert ( S U A1 Y / S U V Y = U**A1 / U**V).
rewrite (A6 U A1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HA1.
auto with Geom.
assert (U**A1 / U**V = Py A1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HA1;auto with Geom.
assert (Py A1 U V = Py A U V).
unfold on_foot in *.
use HA1.
unfold perp, Py4 in H4.
IsoleVar (Py A1 U V) H4.
rewrite H4.
ring.
rewrite H2 in H1.
rewrite H3 in H1.
rewrite H4 in H1.
IsoleVar (S U A Y) H1.
rewrite H1.
field.
unfold on_perp_d in *.
intuition.
auto with Geom.
assert (S U B Y = Py B U V / Py U V U * S U V Y).
elim (proj_ex B U V).
intros B1 HB1.
2:unfold on_perp_d in H;intuition.
assert (S U B Y / S U V Y = S U B1 Y / S U V Y).
replace (S U B Y) with (S U B1 Y).
auto.
unfold on_foot in *.
use HB1.
unfold on_perp_d in *.
use H.
assert (parallel B1 B Y U).
apply (perp_perp_para B1 B U V Y U);auto with Geom.
assert (parallel Y U B1 B) by auto with Geom.
unfold parallel, S4 in H8.
uniformize_signed_areas.
IsoleVar (S Y B1 U) H8.
rewrite H8.
ring.
assert ( S U B1 Y / S U V Y = U**B1 / U**V).
rewrite (A6 U B1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HB1.
auto with Geom.
assert (U**B1 / U**V = Py B1 U V / Py U V U).

*****
H3 : eq (Fdiv (S U B1 Y) (S U V Y)) (Fdiv (DSeg U B1) (DSeg U V))
H2 : eq (Fdiv (S U B Y) (S U V Y)) (Fdiv (S U B1 Y) (S U V Y))
HB1 : on_foot B1 B U V
B1 : Point
H1 : eq (S U A Y) (Fmult (Fdiv (Py A U V) (Py U V U)) (S U V Y))
HA1 : on_foot A1 A U V
A1 : Point
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
H : on_perp_d Y U V r
r : F
A,B,U,V,Y : Point
*****
eq (Fdiv (DSeg U B1) (DSeg U V)) (Fdiv (Py B1 U V) (Py U V U))
+++++
rewrite col_pyth.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.
use H.
assert (parallel A1 A Y U).
apply (perp_perp_para A1 A U V Y U);auto with Geom.
assert (parallel Y U A1 A) by auto with Geom.
unfold parallel, S4 in H7.
uniformize_signed_areas.
IsoleVar (S Y A1 U) H7.
rewrite H7.
ring.
assert ( S U A1 Y / S U V Y = U**A1 / U**V).
rewrite (A6 U A1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HA1.
auto with Geom.
assert (U**A1 / U**V = Py A1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HA1;auto with Geom.
assert (Py A1 U V = Py A U V).
unfold on_foot in *.
use HA1.
unfold perp, Py4 in H4.
IsoleVar (Py A1 U V) H4.
rewrite H4.
ring.
rewrite H2 in H1.
rewrite H3 in H1.
rewrite H4 in H1.
IsoleVar (S U A Y) H1.
rewrite H1.
field.
unfold on_perp_d in *.
intuition.
auto with Geom.
assert (S U B Y = Py B U V / Py U V U * S U V Y).
elim (proj_ex B U V).
intros B1 HB1.
2:unfold on_perp_d in H;intuition.
assert (S U B Y / S U V Y = S U B1 Y / S U V Y).
replace (S U B Y) with (S U B1 Y).
auto.
unfold on_foot in *.
use HB1.
unfold on_perp_d in *.
use H.
assert (parallel B1 B Y U).
apply (perp_perp_para B1 B U V Y U);auto with Geom.
assert (parallel Y U B1 B) by auto with Geom.
unfold parallel, S4 in H8.
uniformize_signed_areas.
IsoleVar (S Y B1 U) H8.
rewrite H8.
ring.
assert ( S U B1 Y / S U V Y = U**B1 / U**V).
rewrite (A6 U B1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HB1.
auto with Geom.
assert (U**B1 / U**V = Py B1 U V / Py U V U).
rewrite col_pyth.

*****
H3 : eq (Fdiv (S U B1 Y) (S U V Y)) (Fdiv (DSeg U B1) (DSeg U V))
H2 : eq (Fdiv (S U B Y) (S U V Y)) (Fdiv (S U B1 Y) (S U V Y))
HB1 : on_foot B1 B U V
B1 : Point
H1 : eq (S U A Y) (Fmult (Fdiv (Py A U V) (Py U V U)) (S U V Y))
HA1 : on_foot A1 A U V
A1 : Point
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
H : on_perp_d Y U V r
r : F
A,B,U,V,Y : Point
*****
eq (Fdiv (DSeg U B1) (DSeg U V)) (Fdiv (Fmult (Fmult (Fplus F1 F1) (DSeg U B1)) (DSeg U V)) (Py U V U))
+++++
unfold Py.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.
use H.
assert (parallel A1 A Y U).
apply (perp_perp_para A1 A U V Y U);auto with Geom.
assert (parallel Y U A1 A) by auto with Geom.
unfold parallel, S4 in H7.
uniformize_signed_areas.
IsoleVar (S Y A1 U) H7.
rewrite H7.
ring.
assert ( S U A1 Y / S U V Y = U**A1 / U**V).
rewrite (A6 U A1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HA1.
auto with Geom.
assert (U**A1 / U**V = Py A1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HA1;auto with Geom.
assert (Py A1 U V = Py A U V).
unfold on_foot in *.
use HA1.
unfold perp, Py4 in H4.
IsoleVar (Py A1 U V) H4.
rewrite H4.
ring.
rewrite H2 in H1.
rewrite H3 in H1.
rewrite H4 in H1.
IsoleVar (S U A Y) H1.
rewrite H1.
field.
unfold on_perp_d in *.
intuition.
auto with Geom.
assert (S U B Y = Py B U V / Py U V U * S U V Y).
elim (proj_ex B U V).
intros B1 HB1.
2:unfold on_perp_d in H;intuition.
assert (S U B Y / S U V Y = S U B1 Y / S U V Y).
replace (S U B Y) with (S U B1 Y).
auto.
unfold on_foot in *.
use HB1.
unfold on_perp_d in *.
use H.
assert (parallel B1 B Y U).
apply (perp_perp_para B1 B U V Y U);auto with Geom.
assert (parallel Y U B1 B) by auto with Geom.
unfold parallel, S4 in H8.
uniformize_signed_areas.
IsoleVar (S Y B1 U) H8.
rewrite H8.
ring.
assert ( S U B1 Y / S U V Y = U**B1 / U**V).
rewrite (A6 U B1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HB1.
auto with Geom.
assert (U**B1 / U**V = Py B1 U V / Py U V U).
rewrite col_pyth.
unfold Py.

*****
H3 : eq (Fdiv (S U B1 Y) (S U V Y)) (Fdiv (DSeg U B1) (DSeg U V))
H2 : eq (Fdiv (S U B Y) (S U V Y)) (Fdiv (S U B1 Y) (S U V Y))
HB1 : on_foot B1 B U V
B1 : Point
H1 : eq (S U A Y) (Fmult (Fdiv (Py A U V) (Py U V U)) (S U V Y))
HA1 : on_foot A1 A U V
A1 : Point
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
H : on_perp_d Y U V r
r : F
A,B,U,V,Y : Point
*****
eq (Fdiv (DSeg U B1) (DSeg U V)) (Fdiv (Fmult (Fmult (Fplus F1 F1) (DSeg U B1)) (DSeg U V)) (Fminus (Fplus (Fmult (DSeg U V) (DSeg U V)) (Fmult (DSeg V U) (DSeg V U))) (Fmult (DSeg U U) (DSeg U U))))
+++++
uniformize_dir_seg.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.
use H.
assert (parallel A1 A Y U).
apply (perp_perp_para A1 A U V Y U);auto with Geom.
assert (parallel Y U A1 A) by auto with Geom.
unfold parallel, S4 in H7.
uniformize_signed_areas.
IsoleVar (S Y A1 U) H7.
rewrite H7.
ring.
assert ( S U A1 Y / S U V Y = U**A1 / U**V).
rewrite (A6 U A1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HA1.
auto with Geom.
assert (U**A1 / U**V = Py A1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HA1;auto with Geom.
assert (Py A1 U V = Py A U V).
unfold on_foot in *.
use HA1.
unfold perp, Py4 in H4.
IsoleVar (Py A1 U V) H4.
rewrite H4.
ring.
rewrite H2 in H1.
rewrite H3 in H1.
rewrite H4 in H1.
IsoleVar (S U A Y) H1.
rewrite H1.
field.
unfold on_perp_d in *.
intuition.
auto with Geom.
assert (S U B Y = Py B U V / Py U V U * S U V Y).
elim (proj_ex B U V).
intros B1 HB1.
2:unfold on_perp_d in H;intuition.
assert (S U B Y / S U V Y = S U B1 Y / S U V Y).
replace (S U B Y) with (S U B1 Y).
auto.
unfold on_foot in *.
use HB1.
unfold on_perp_d in *.
use H.
assert (parallel B1 B Y U).
apply (perp_perp_para B1 B U V Y U);auto with Geom.
assert (parallel Y U B1 B) by auto with Geom.
unfold parallel, S4 in H8.
uniformize_signed_areas.
IsoleVar (S Y B1 U) H8.
rewrite H8.
ring.
assert ( S U B1 Y / S U V Y = U**B1 / U**V).
rewrite (A6 U B1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HB1.
auto with Geom.
assert (U**B1 / U**V = Py B1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.

*****
H3 : eq (Fdiv (S U B1 Y) (S U V Y)) (Fdiv (DSeg U B1) (DSeg U V))
H2 : eq (Fdiv (S U B Y) (S U V Y)) (Fdiv (S U B1 Y) (S U V Y))
HB1 : on_foot B1 B U V
B1 : Point
H1 : eq (S U A Y) (Fmult (Fdiv (Py A U V) (Py U V U)) (S U V Y))
HA1 : on_foot A1 A U V
A1 : Point
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
H : on_perp_d Y U V r
r : F
A,B,U,V,Y : Point
*****
eq (Fdiv (DSeg U B1) (DSeg U V)) (Fdiv (Fmult (Fmult (Fplus F1 F1) (DSeg U B1)) (DSeg U V)) (Fminus (Fplus (Fmult (DSeg U V) (DSeg U V)) (Fmult (Fopp (DSeg U V)) (Fopp (DSeg U V)))) (Fmult F0 F0)))
+++++
basic_simpl.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.
use H.
assert (parallel A1 A Y U).
apply (perp_perp_para A1 A U V Y U);auto with Geom.
assert (parallel Y U A1 A) by auto with Geom.
unfold parallel, S4 in H7.
uniformize_signed_areas.
IsoleVar (S Y A1 U) H7.
rewrite H7.
ring.
assert ( S U A1 Y / S U V Y = U**A1 / U**V).
rewrite (A6 U A1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HA1.
auto with Geom.
assert (U**A1 / U**V = Py A1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HA1;auto with Geom.
assert (Py A1 U V = Py A U V).
unfold on_foot in *.
use HA1.
unfold perp, Py4 in H4.
IsoleVar (Py A1 U V) H4.
rewrite H4.
ring.
rewrite H2 in H1.
rewrite H3 in H1.
rewrite H4 in H1.
IsoleVar (S U A Y) H1.
rewrite H1.
field.
unfold on_perp_d in *.
intuition.
auto with Geom.
assert (S U B Y = Py B U V / Py U V U * S U V Y).
elim (proj_ex B U V).
intros B1 HB1.
2:unfold on_perp_d in H;intuition.
assert (S U B Y / S U V Y = S U B1 Y / S U V Y).
replace (S U B Y) with (S U B1 Y).
auto.
unfold on_foot in *.
use HB1.
unfold on_perp_d in *.
use H.
assert (parallel B1 B Y U).
apply (perp_perp_para B1 B U V Y U);auto with Geom.
assert (parallel Y U B1 B) by auto with Geom.
unfold parallel, S4 in H8.
uniformize_signed_areas.
IsoleVar (S Y B1 U) H8.
rewrite H8.
ring.
assert ( S U B1 Y / S U V Y = U**B1 / U**V).
rewrite (A6 U B1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HB1.
auto with Geom.
assert (U**B1 / U**V = Py B1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.

*****
H3 : eq (Fdiv (S U B1 Y) (S U V Y)) (Fdiv (DSeg U B1) (DSeg U V))
H2 : eq (Fdiv (S U B Y) (S U V Y)) (Fdiv (S U B1 Y) (S U V Y))
HB1 : on_foot B1 B U V
B1 : Point
H1 : eq (S U A Y) (Fmult (Fdiv (Py A U V) (Py U V U)) (S U V Y))
HA1 : on_foot A1 A U V
A1 : Point
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
H : on_perp_d Y U V r
r : F
A,B,U,V,Y : Point
*****
eq (Fdiv (DSeg U B1) (DSeg U V)) (Fdiv (Fmult (Fmult (Fplus F1 F1) (DSeg U B1)) (DSeg U V)) (Fplus (Fmult (DSeg U V) (DSeg U V)) (Fmult (DSeg U V) (DSeg U V))))
+++++
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.
use H.
assert (parallel A1 A Y U).
apply (perp_perp_para A1 A U V Y U);auto with Geom.
assert (parallel Y U A1 A) by auto with Geom.
unfold parallel, S4 in H7.
uniformize_signed_areas.
IsoleVar (S Y A1 U) H7.
rewrite H7.
ring.
assert ( S U A1 Y / S U V Y = U**A1 / U**V).
rewrite (A6 U A1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HA1.
auto with Geom.
assert (U**A1 / U**V = Py A1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HA1;auto with Geom.
assert (Py A1 U V = Py A U V).
unfold on_foot in *.
use HA1.
unfold perp, Py4 in H4.
IsoleVar (Py A1 U V) H4.
rewrite H4.
ring.
rewrite H2 in H1.
rewrite H3 in H1.
rewrite H4 in H1.
IsoleVar (S U A Y) H1.
rewrite H1.
field.
unfold on_perp_d in *.
intuition.
auto with Geom.
assert (S U B Y = Py B U V / Py U V U * S U V Y).
elim (proj_ex B U V).
intros B1 HB1.
2:unfold on_perp_d in H;intuition.
assert (S U B Y / S U V Y = S U B1 Y / S U V Y).
replace (S U B Y) with (S U B1 Y).
auto.
unfold on_foot in *.
use HB1.
unfold on_perp_d in *.
use H.
assert (parallel B1 B Y U).
apply (perp_perp_para B1 B U V Y U);auto with Geom.
assert (parallel Y U B1 B) by auto with Geom.
unfold parallel, S4 in H8.
uniformize_signed_areas.
IsoleVar (S Y B1 U) H8.
rewrite H8.
ring.
assert ( S U B1 Y / S U V Y = U**B1 / U**V).
rewrite (A6 U B1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HB1.
auto with Geom.
assert (U**B1 / U**V = Py B1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.

*****
H3 : eq (Fdiv (S U B1 Y) (S U V Y)) (Fdiv (DSeg U B1) (DSeg U V))
H2 : eq (Fdiv (S U B Y) (S U V Y)) (Fdiv (S U B1 Y) (S U V Y))
HB1 : on_foot B1 B U V
B1 : Point
H1 : eq (S U A Y) (Fmult (Fdiv (Py A U V) (Py U V U)) (S U V Y))
HA1 : on_foot A1 A U V
A1 : Point
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
H : on_perp_d Y U V r
r : F
A,B,U,V,Y : Point
*****
eq (Fdiv (DSeg U B1) (DSeg U V)) (Fdiv (Fmult (Fmult (Fplus F1 F1) (DSeg U B1)) (DSeg U V)) (Fmult (Fmult (Fplus F1 F1) (DSeg U V)) (DSeg U V)))
+++++
field;solve_conds;unfold on_perp_d in *;auto with Geom.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.
use H.
assert (parallel A1 A Y U).
apply (perp_perp_para A1 A U V Y U);auto with Geom.
assert (parallel Y U A1 A) by auto with Geom.
unfold parallel, S4 in H7.
uniformize_signed_areas.
IsoleVar (S Y A1 U) H7.
rewrite H7.
ring.
assert ( S U A1 Y / S U V Y = U**A1 / U**V).
rewrite (A6 U A1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HA1.
auto with Geom.
assert (U**A1 / U**V = Py A1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HA1;auto with Geom.
assert (Py A1 U V = Py A U V).
unfold on_foot in *.
use HA1.
unfold perp, Py4 in H4.
IsoleVar (Py A1 U V) H4.
rewrite H4.
ring.
rewrite H2 in H1.
rewrite H3 in H1.
rewrite H4 in H1.
IsoleVar (S U A Y) H1.
rewrite H1.
field.
unfold on_perp_d in *.
intuition.
auto with Geom.
assert (S U B Y = Py B U V / Py U V U * S U V Y).
elim (proj_ex B U V).
intros B1 HB1.
2:unfold on_perp_d in H;intuition.
assert (S U B Y / S U V Y = S U B1 Y / S U V Y).
replace (S U B Y) with (S U B1 Y).
auto.
unfold on_foot in *.
use HB1.
unfold on_perp_d in *.
use H.
assert (parallel B1 B Y U).
apply (perp_perp_para B1 B U V Y U);auto with Geom.
assert (parallel Y U B1 B) by auto with Geom.
unfold parallel, S4 in H8.
uniformize_signed_areas.
IsoleVar (S Y B1 U) H8.
rewrite H8.
ring.
assert ( S U B1 Y / S U V Y = U**B1 / U**V).
rewrite (A6 U B1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HB1.
auto with Geom.
assert (U**B1 / U**V = Py B1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.

*****
H3 : eq (Fdiv (S U B1 Y) (S U V Y)) (Fdiv (DSeg U B1) (DSeg U V))
H2 : eq (Fdiv (S U B Y) (S U V Y)) (Fdiv (S U B1 Y) (S U V Y))
HB1 : on_foot B1 B U V
B1 : Point
H1 : eq (S U A Y) (Fmult (Fdiv (Py A U V) (Py U V U)) (S U V Y))
HA1 : on_foot A1 A U V
A1 : Point
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
H : and (not (eq U V))\n (and (perp Y U U V)\n (and\n (eq (Fmult r (Py U V U))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S U V Y)))\n (not (eq r F0))))
r : F
A,B,U,V,Y : Point
*****
not (eq (DSeg U V) F0)
+++++
unfold on_perp_d in *;use H;auto with Geom.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.
use H.
assert (parallel A1 A Y U).
apply (perp_perp_para A1 A U V Y U);auto with Geom.
assert (parallel Y U A1 A) by auto with Geom.
unfold parallel, S4 in H7.
uniformize_signed_areas.
IsoleVar (S Y A1 U) H7.
rewrite H7.
ring.
assert ( S U A1 Y / S U V Y = U**A1 / U**V).
rewrite (A6 U A1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HA1.
auto with Geom.
assert (U**A1 / U**V = Py A1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HA1;auto with Geom.
assert (Py A1 U V = Py A U V).
unfold on_foot in *.
use HA1.
unfold perp, Py4 in H4.
IsoleVar (Py A1 U V) H4.
rewrite H4.
ring.
rewrite H2 in H1.
rewrite H3 in H1.
rewrite H4 in H1.
IsoleVar (S U A Y) H1.
rewrite H1.
field.
unfold on_perp_d in *.
intuition.
auto with Geom.
assert (S U B Y = Py B U V / Py U V U * S U V Y).
elim (proj_ex B U V).
intros B1 HB1.
2:unfold on_perp_d in H;intuition.
assert (S U B Y / S U V Y = S U B1 Y / S U V Y).
replace (S U B Y) with (S U B1 Y).
auto.
unfold on_foot in *.
use HB1.
unfold on_perp_d in *.
use H.
assert (parallel B1 B Y U).
apply (perp_perp_para B1 B U V Y U);auto with Geom.
assert (parallel Y U B1 B) by auto with Geom.
unfold parallel, S4 in H8.
uniformize_signed_areas.
IsoleVar (S Y B1 U) H8.
rewrite H8.
ring.
assert ( S U B1 Y / S U V Y = U**B1 / U**V).
rewrite (A6 U B1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HB1.
auto with Geom.
assert (U**B1 / U**V = Py B1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.

*****
H3 : eq (Fdiv (S U B1 Y) (S U V Y)) (Fdiv (DSeg U B1) (DSeg U V))
H2 : eq (Fdiv (S U B Y) (S U V Y)) (Fdiv (S U B1 Y) (S U V Y))
HB1 : on_foot B1 B U V
B1 : Point
H1 : eq (S U A Y) (Fmult (Fdiv (Py A U V) (Py U V U)) (S U V Y))
HA1 : on_foot A1 A U V
A1 : Point
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
H : on_perp_d Y U V r
r : F
A,B,U,V,Y : Point
*****
Col B1 U V
+++++
unfold on_foot in *;use HB1;auto with Geom.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.
use H.
assert (parallel A1 A Y U).
apply (perp_perp_para A1 A U V Y U);auto with Geom.
assert (parallel Y U A1 A) by auto with Geom.
unfold parallel, S4 in H7.
uniformize_signed_areas.
IsoleVar (S Y A1 U) H7.
rewrite H7.
ring.
assert ( S U A1 Y / S U V Y = U**A1 / U**V).
rewrite (A6 U A1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HA1.
auto with Geom.
assert (U**A1 / U**V = Py A1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HA1;auto with Geom.
assert (Py A1 U V = Py A U V).
unfold on_foot in *.
use HA1.
unfold perp, Py4 in H4.
IsoleVar (Py A1 U V) H4.
rewrite H4.
ring.
rewrite H2 in H1.
rewrite H3 in H1.
rewrite H4 in H1.
IsoleVar (S U A Y) H1.
rewrite H1.
field.
unfold on_perp_d in *.
intuition.
auto with Geom.
assert (S U B Y = Py B U V / Py U V U * S U V Y).
elim (proj_ex B U V).
intros B1 HB1.
2:unfold on_perp_d in H;intuition.
assert (S U B Y / S U V Y = S U B1 Y / S U V Y).
replace (S U B Y) with (S U B1 Y).
auto.
unfold on_foot in *.
use HB1.
unfold on_perp_d in *.
use H.
assert (parallel B1 B Y U).
apply (perp_perp_para B1 B U V Y U);auto with Geom.
assert (parallel Y U B1 B) by auto with Geom.
unfold parallel, S4 in H8.
uniformize_signed_areas.
IsoleVar (S Y B1 U) H8.
rewrite H8.
ring.
assert ( S U B1 Y / S U V Y = U**B1 / U**V).
rewrite (A6 U B1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HB1.
auto with Geom.
assert (U**B1 / U**V = Py B1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HB1;auto with Geom.

*****
H4 : eq (Fdiv (DSeg U B1) (DSeg U V)) (Fdiv (Py B1 U V) (Py U V U))
H3 : eq (Fdiv (S U B1 Y) (S U V Y)) (Fdiv (DSeg U B1) (DSeg U V))
H2 : eq (Fdiv (S U B Y) (S U V Y)) (Fdiv (S U B1 Y) (S U V Y))
HB1 : on_foot B1 B U V
B1 : Point
H1 : eq (S U A Y) (Fmult (Fdiv (Py A U V) (Py U V U)) (S U V Y))
HA1 : on_foot A1 A U V
A1 : Point
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
H : on_perp_d Y U V r
r : F
A,B,U,V,Y : Point
*****
eq (S U B Y) (Fmult (Fdiv (Py B U V) (Py U V U)) (S U V Y))
+++++
assert (Py B1 U V = Py B U V).
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.
use H.
assert (parallel A1 A Y U).
apply (perp_perp_para A1 A U V Y U);auto with Geom.
assert (parallel Y U A1 A) by auto with Geom.
unfold parallel, S4 in H7.
uniformize_signed_areas.
IsoleVar (S Y A1 U) H7.
rewrite H7.
ring.
assert ( S U A1 Y / S U V Y = U**A1 / U**V).
rewrite (A6 U A1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HA1.
auto with Geom.
assert (U**A1 / U**V = Py A1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HA1;auto with Geom.
assert (Py A1 U V = Py A U V).
unfold on_foot in *.
use HA1.
unfold perp, Py4 in H4.
IsoleVar (Py A1 U V) H4.
rewrite H4.
ring.
rewrite H2 in H1.
rewrite H3 in H1.
rewrite H4 in H1.
IsoleVar (S U A Y) H1.
rewrite H1.
field.
unfold on_perp_d in *.
intuition.
auto with Geom.
assert (S U B Y = Py B U V / Py U V U * S U V Y).
elim (proj_ex B U V).
intros B1 HB1.
2:unfold on_perp_d in H;intuition.
assert (S U B Y / S U V Y = S U B1 Y / S U V Y).
replace (S U B Y) with (S U B1 Y).
auto.
unfold on_foot in *.
use HB1.
unfold on_perp_d in *.
use H.
assert (parallel B1 B Y U).
apply (perp_perp_para B1 B U V Y U);auto with Geom.
assert (parallel Y U B1 B) by auto with Geom.
unfold parallel, S4 in H8.
uniformize_signed_areas.
IsoleVar (S Y B1 U) H8.
rewrite H8.
ring.
assert ( S U B1 Y / S U V Y = U**B1 / U**V).
rewrite (A6 U B1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HB1.
auto with Geom.
assert (U**B1 / U**V = Py B1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HB1;auto with Geom.
assert (Py B1 U V = Py B U V).

*****
H4 : eq (Fdiv (DSeg U B1) (DSeg U V)) (Fdiv (Py B1 U V) (Py U V U))
H3 : eq (Fdiv (S U B1 Y) (S U V Y)) (Fdiv (DSeg U B1) (DSeg U V))
H2 : eq (Fdiv (S U B Y) (S U V Y)) (Fdiv (S U B1 Y) (S U V Y))
HB1 : on_foot B1 B U V
B1 : Point
H1 : eq (S U A Y) (Fmult (Fdiv (Py A U V) (Py U V U)) (S U V Y))
HA1 : on_foot A1 A U V
A1 : Point
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
H : on_perp_d Y U V r
r : F
A,B,U,V,Y : Point
*****
eq (Py B1 U V) (Py B U V)
+++++
unfold on_foot in *.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.
use H.
assert (parallel A1 A Y U).
apply (perp_perp_para A1 A U V Y U);auto with Geom.
assert (parallel Y U A1 A) by auto with Geom.
unfold parallel, S4 in H7.
uniformize_signed_areas.
IsoleVar (S Y A1 U) H7.
rewrite H7.
ring.
assert ( S U A1 Y / S U V Y = U**A1 / U**V).
rewrite (A6 U A1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HA1.
auto with Geom.
assert (U**A1 / U**V = Py A1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HA1;auto with Geom.
assert (Py A1 U V = Py A U V).
unfold on_foot in *.
use HA1.
unfold perp, Py4 in H4.
IsoleVar (Py A1 U V) H4.
rewrite H4.
ring.
rewrite H2 in H1.
rewrite H3 in H1.
rewrite H4 in H1.
IsoleVar (S U A Y) H1.
rewrite H1.
field.
unfold on_perp_d in *.
intuition.
auto with Geom.
assert (S U B Y = Py B U V / Py U V U * S U V Y).
elim (proj_ex B U V).
intros B1 HB1.
2:unfold on_perp_d in H;intuition.
assert (S U B Y / S U V Y = S U B1 Y / S U V Y).
replace (S U B Y) with (S U B1 Y).
auto.
unfold on_foot in *.
use HB1.
unfold on_perp_d in *.
use H.
assert (parallel B1 B Y U).
apply (perp_perp_para B1 B U V Y U);auto with Geom.
assert (parallel Y U B1 B) by auto with Geom.
unfold parallel, S4 in H8.
uniformize_signed_areas.
IsoleVar (S Y B1 U) H8.
rewrite H8.
ring.
assert ( S U B1 Y / S U V Y = U**B1 / U**V).
rewrite (A6 U B1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HB1.
auto with Geom.
assert (U**B1 / U**V = Py B1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HB1;auto with Geom.
assert (Py B1 U V = Py B U V).
unfold on_foot in *.

*****
H4 : eq (Fdiv (DSeg U B1) (DSeg U V)) (Fdiv (Py B1 U V) (Py U V U))
H3 : eq (Fdiv (S U B1 Y) (S U V Y)) (Fdiv (DSeg U B1) (DSeg U V))
H2 : eq (Fdiv (S U B Y) (S U V Y)) (Fdiv (S U B1 Y) (S U V Y))
HB1 : and (perp B1 B U V) (and (Col B1 U V) (not (eq U V)))
B1 : Point
H1 : eq (S U A Y) (Fmult (Fdiv (Py A U V) (Py U V U)) (S U V Y))
HA1 : and (perp A1 A U V) (and (Col A1 U V) (not (eq U V)))
A1 : Point
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
H : on_perp_d Y U V r
r : F
A,B,U,V,Y : Point
*****
eq (Py B1 U V) (Py B U V)
+++++
use HB1.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.
use H.
assert (parallel A1 A Y U).
apply (perp_perp_para A1 A U V Y U);auto with Geom.
assert (parallel Y U A1 A) by auto with Geom.
unfold parallel, S4 in H7.
uniformize_signed_areas.
IsoleVar (S Y A1 U) H7.
rewrite H7.
ring.
assert ( S U A1 Y / S U V Y = U**A1 / U**V).
rewrite (A6 U A1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HA1.
auto with Geom.
assert (U**A1 / U**V = Py A1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HA1;auto with Geom.
assert (Py A1 U V = Py A U V).
unfold on_foot in *.
use HA1.
unfold perp, Py4 in H4.
IsoleVar (Py A1 U V) H4.
rewrite H4.
ring.
rewrite H2 in H1.
rewrite H3 in H1.
rewrite H4 in H1.
IsoleVar (S U A Y) H1.
rewrite H1.
field.
unfold on_perp_d in *.
intuition.
auto with Geom.
assert (S U B Y = Py B U V / Py U V U * S U V Y).
elim (proj_ex B U V).
intros B1 HB1.
2:unfold on_perp_d in H;intuition.
assert (S U B Y / S U V Y = S U B1 Y / S U V Y).
replace (S U B Y) with (S U B1 Y).
auto.
unfold on_foot in *.
use HB1.
unfold on_perp_d in *.
use H.
assert (parallel B1 B Y U).
apply (perp_perp_para B1 B U V Y U);auto with Geom.
assert (parallel Y U B1 B) by auto with Geom.
unfold parallel, S4 in H8.
uniformize_signed_areas.
IsoleVar (S Y B1 U) H8.
rewrite H8.
ring.
assert ( S U B1 Y / S U V Y = U**B1 / U**V).
rewrite (A6 U B1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HB1.
auto with Geom.
assert (U**B1 / U**V = Py B1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HB1;auto with Geom.
assert (Py B1 U V = Py B U V).
unfold on_foot in *.
use HB1.

*****
H8 : not (eq U V)
H7 : Col B1 U V
H5 : perp B1 B U V
H4 : eq (Fdiv (DSeg U B1) (DSeg U V)) (Fdiv (Py B1 U V) (Py U V U))
H3 : eq (Fdiv (S U B1 Y) (S U V Y)) (Fdiv (DSeg U B1) (DSeg U V))
H2 : eq (Fdiv (S U B Y) (S U V Y)) (Fdiv (S U B1 Y) (S U V Y))
B1 : Point
H1 : eq (S U A Y) (Fmult (Fdiv (Py A U V) (Py U V U)) (S U V Y))
HA1 : and (perp A1 A U V) (and (Col A1 U V) (not (eq U V)))
A1 : Point
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
H : on_perp_d Y U V r
r : F
A,B,U,V,Y : Point
*****
eq (Py B1 U V) (Py B U V)
+++++
unfold perp, Py4 in H5.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.
use H.
assert (parallel A1 A Y U).
apply (perp_perp_para A1 A U V Y U);auto with Geom.
assert (parallel Y U A1 A) by auto with Geom.
unfold parallel, S4 in H7.
uniformize_signed_areas.
IsoleVar (S Y A1 U) H7.
rewrite H7.
ring.
assert ( S U A1 Y / S U V Y = U**A1 / U**V).
rewrite (A6 U A1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HA1.
auto with Geom.
assert (U**A1 / U**V = Py A1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HA1;auto with Geom.
assert (Py A1 U V = Py A U V).
unfold on_foot in *.
use HA1.
unfold perp, Py4 in H4.
IsoleVar (Py A1 U V) H4.
rewrite H4.
ring.
rewrite H2 in H1.
rewrite H3 in H1.
rewrite H4 in H1.
IsoleVar (S U A Y) H1.
rewrite H1.
field.
unfold on_perp_d in *.
intuition.
auto with Geom.
assert (S U B Y = Py B U V / Py U V U * S U V Y).
elim (proj_ex B U V).
intros B1 HB1.
2:unfold on_perp_d in H;intuition.
assert (S U B Y / S U V Y = S U B1 Y / S U V Y).
replace (S U B Y) with (S U B1 Y).
auto.
unfold on_foot in *.
use HB1.
unfold on_perp_d in *.
use H.
assert (parallel B1 B Y U).
apply (perp_perp_para B1 B U V Y U);auto with Geom.
assert (parallel Y U B1 B) by auto with Geom.
unfold parallel, S4 in H8.
uniformize_signed_areas.
IsoleVar (S Y B1 U) H8.
rewrite H8.
ring.
assert ( S U B1 Y / S U V Y = U**B1 / U**V).
rewrite (A6 U B1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HB1.
auto with Geom.
assert (U**B1 / U**V = Py B1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HB1;auto with Geom.
assert (Py B1 U V = Py B U V).
unfold on_foot in *.
use HB1.
unfold perp, Py4 in H5.

*****
H8 : not (eq U V)
H7 : Col B1 U V
H5 : eq (Fminus (Py B1 U V) (Py B U V)) F0
H4 : eq (Fdiv (DSeg U B1) (DSeg U V)) (Fdiv (Py B1 U V) (Py U V U))
H3 : eq (Fdiv (S U B1 Y) (S U V Y)) (Fdiv (DSeg U B1) (DSeg U V))
H2 : eq (Fdiv (S U B Y) (S U V Y)) (Fdiv (S U B1 Y) (S U V Y))
B1 : Point
H1 : eq (S U A Y) (Fmult (Fdiv (Py A U V) (Py U V U)) (S U V Y))
HA1 : and (perp A1 A U V) (and (Col A1 U V) (not (eq U V)))
A1 : Point
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
H : on_perp_d Y U V r
r : F
A,B,U,V,Y : Point
*****
eq (Py B1 U V) (Py B U V)
+++++
IsoleVar (Py B1 U V) H5.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.
use H.
assert (parallel A1 A Y U).
apply (perp_perp_para A1 A U V Y U);auto with Geom.
assert (parallel Y U A1 A) by auto with Geom.
unfold parallel, S4 in H7.
uniformize_signed_areas.
IsoleVar (S Y A1 U) H7.
rewrite H7.
ring.
assert ( S U A1 Y / S U V Y = U**A1 / U**V).
rewrite (A6 U A1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HA1.
auto with Geom.
assert (U**A1 / U**V = Py A1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HA1;auto with Geom.
assert (Py A1 U V = Py A U V).
unfold on_foot in *.
use HA1.
unfold perp, Py4 in H4.
IsoleVar (Py A1 U V) H4.
rewrite H4.
ring.
rewrite H2 in H1.
rewrite H3 in H1.
rewrite H4 in H1.
IsoleVar (S U A Y) H1.
rewrite H1.
field.
unfold on_perp_d in *.
intuition.
auto with Geom.
assert (S U B Y = Py B U V / Py U V U * S U V Y).
elim (proj_ex B U V).
intros B1 HB1.
2:unfold on_perp_d in H;intuition.
assert (S U B Y / S U V Y = S U B1 Y / S U V Y).
replace (S U B Y) with (S U B1 Y).
auto.
unfold on_foot in *.
use HB1.
unfold on_perp_d in *.
use H.
assert (parallel B1 B Y U).
apply (perp_perp_para B1 B U V Y U);auto with Geom.
assert (parallel Y U B1 B) by auto with Geom.
unfold parallel, S4 in H8.
uniformize_signed_areas.
IsoleVar (S Y B1 U) H8.
rewrite H8.
ring.
assert ( S U B1 Y / S U V Y = U**B1 / U**V).
rewrite (A6 U B1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HB1.
auto with Geom.
assert (U**B1 / U**V = Py B1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HB1;auto with Geom.
assert (Py B1 U V = Py B U V).
unfold on_foot in *.
use HB1.
unfold perp, Py4 in H5.
IsoleVar (Py B1 U V) H5.

*****
H5 : eq (Py B1 U V) (Fplus F0 (Py B U V))
H8 : not (eq U V)
H7 : Col B1 U V
H4 : eq (Fdiv (DSeg U B1) (DSeg U V)) (Fdiv (Py B1 U V) (Py U V U))
H3 : eq (Fdiv (S U B1 Y) (S U V Y)) (Fdiv (DSeg U B1) (DSeg U V))
H2 : eq (Fdiv (S U B Y) (S U V Y)) (Fdiv (S U B1 Y) (S U V Y))
B1 : Point
H1 : eq (S U A Y) (Fmult (Fdiv (Py A U V) (Py U V U)) (S U V Y))
HA1 : and (perp A1 A U V) (and (Col A1 U V) (not (eq U V)))
A1 : Point
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
H : on_perp_d Y U V r
r : F
A,B,U,V,Y : Point
*****
eq (Py B1 U V) (Py B U V)
+++++
rewrite H5.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.
use H.
assert (parallel A1 A Y U).
apply (perp_perp_para A1 A U V Y U);auto with Geom.
assert (parallel Y U A1 A) by auto with Geom.
unfold parallel, S4 in H7.
uniformize_signed_areas.
IsoleVar (S Y A1 U) H7.
rewrite H7.
ring.
assert ( S U A1 Y / S U V Y = U**A1 / U**V).
rewrite (A6 U A1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HA1.
auto with Geom.
assert (U**A1 / U**V = Py A1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HA1;auto with Geom.
assert (Py A1 U V = Py A U V).
unfold on_foot in *.
use HA1.
unfold perp, Py4 in H4.
IsoleVar (Py A1 U V) H4.
rewrite H4.
ring.
rewrite H2 in H1.
rewrite H3 in H1.
rewrite H4 in H1.
IsoleVar (S U A Y) H1.
rewrite H1.
field.
unfold on_perp_d in *.
intuition.
auto with Geom.
assert (S U B Y = Py B U V / Py U V U * S U V Y).
elim (proj_ex B U V).
intros B1 HB1.
2:unfold on_perp_d in H;intuition.
assert (S U B Y / S U V Y = S U B1 Y / S U V Y).
replace (S U B Y) with (S U B1 Y).
auto.
unfold on_foot in *.
use HB1.
unfold on_perp_d in *.
use H.
assert (parallel B1 B Y U).
apply (perp_perp_para B1 B U V Y U);auto with Geom.
assert (parallel Y U B1 B) by auto with Geom.
unfold parallel, S4 in H8.
uniformize_signed_areas.
IsoleVar (S Y B1 U) H8.
rewrite H8.
ring.
assert ( S U B1 Y / S U V Y = U**B1 / U**V).
rewrite (A6 U B1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HB1.
auto with Geom.
assert (U**B1 / U**V = Py B1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HB1;auto with Geom.
assert (Py B1 U V = Py B U V).
unfold on_foot in *.
use HB1.
unfold perp, Py4 in H5.
IsoleVar (Py B1 U V) H5.
rewrite H5.

*****
H5 : eq (Py B1 U V) (Fplus F0 (Py B U V))
H8 : not (eq U V)
H7 : Col B1 U V
H4 : eq (Fdiv (DSeg U B1) (DSeg U V)) (Fdiv (Py B1 U V) (Py U V U))
H3 : eq (Fdiv (S U B1 Y) (S U V Y)) (Fdiv (DSeg U B1) (DSeg U V))
H2 : eq (Fdiv (S U B Y) (S U V Y)) (Fdiv (S U B1 Y) (S U V Y))
B1 : Point
H1 : eq (S U A Y) (Fmult (Fdiv (Py A U V) (Py U V U)) (S U V Y))
HA1 : and (perp A1 A U V) (and (Col A1 U V) (not (eq U V)))
A1 : Point
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
H : on_perp_d Y U V r
r : F
A,B,U,V,Y : Point
*****
eq (Fplus F0 (Py B U V)) (Py B U V)
+++++
ring.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.
use H.
assert (parallel A1 A Y U).
apply (perp_perp_para A1 A U V Y U);auto with Geom.
assert (parallel Y U A1 A) by auto with Geom.
unfold parallel, S4 in H7.
uniformize_signed_areas.
IsoleVar (S Y A1 U) H7.
rewrite H7.
ring.
assert ( S U A1 Y / S U V Y = U**A1 / U**V).
rewrite (A6 U A1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HA1.
auto with Geom.
assert (U**A1 / U**V = Py A1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HA1;auto with Geom.
assert (Py A1 U V = Py A U V).
unfold on_foot in *.
use HA1.
unfold perp, Py4 in H4.
IsoleVar (Py A1 U V) H4.
rewrite H4.
ring.
rewrite H2 in H1.
rewrite H3 in H1.
rewrite H4 in H1.
IsoleVar (S U A Y) H1.
rewrite H1.
field.
unfold on_perp_d in *.
intuition.
auto with Geom.
assert (S U B Y = Py B U V / Py U V U * S U V Y).
elim (proj_ex B U V).
intros B1 HB1.
2:unfold on_perp_d in H;intuition.
assert (S U B Y / S U V Y = S U B1 Y / S U V Y).
replace (S U B Y) with (S U B1 Y).
auto.
unfold on_foot in *.
use HB1.
unfold on_perp_d in *.
use H.
assert (parallel B1 B Y U).
apply (perp_perp_para B1 B U V Y U);auto with Geom.
assert (parallel Y U B1 B) by auto with Geom.
unfold parallel, S4 in H8.
uniformize_signed_areas.
IsoleVar (S Y B1 U) H8.
rewrite H8.
ring.
assert ( S U B1 Y / S U V Y = U**B1 / U**V).
rewrite (A6 U B1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HB1.
auto with Geom.
assert (U**B1 / U**V = Py B1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HB1;auto with Geom.
assert (Py B1 U V = Py B U V).
unfold on_foot in *.
use HB1.
unfold perp, Py4 in H5.
IsoleVar (Py B1 U V) H5.
rewrite H5.
ring.

*****
H5 : eq (Py B1 U V) (Py B U V)
H4 : eq (Fdiv (DSeg U B1) (DSeg U V)) (Fdiv (Py B1 U V) (Py U V U))
H3 : eq (Fdiv (S U B1 Y) (S U V Y)) (Fdiv (DSeg U B1) (DSeg U V))
H2 : eq (Fdiv (S U B Y) (S U V Y)) (Fdiv (S U B1 Y) (S U V Y))
HB1 : on_foot B1 B U V
B1 : Point
H1 : eq (S U A Y) (Fmult (Fdiv (Py A U V) (Py U V U)) (S U V Y))
HA1 : on_foot A1 A U V
A1 : Point
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
H : on_perp_d Y U V r
r : F
A,B,U,V,Y : Point
*****
eq (S U B Y) (Fmult (Fdiv (Py B U V) (Py U V U)) (S U V Y))
+++++
rewrite H3 in H2.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.
use H.
assert (parallel A1 A Y U).
apply (perp_perp_para A1 A U V Y U);auto with Geom.
assert (parallel Y U A1 A) by auto with Geom.
unfold parallel, S4 in H7.
uniformize_signed_areas.
IsoleVar (S Y A1 U) H7.
rewrite H7.
ring.
assert ( S U A1 Y / S U V Y = U**A1 / U**V).
rewrite (A6 U A1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HA1.
auto with Geom.
assert (U**A1 / U**V = Py A1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HA1;auto with Geom.
assert (Py A1 U V = Py A U V).
unfold on_foot in *.
use HA1.
unfold perp, Py4 in H4.
IsoleVar (Py A1 U V) H4.
rewrite H4.
ring.
rewrite H2 in H1.
rewrite H3 in H1.
rewrite H4 in H1.
IsoleVar (S U A Y) H1.
rewrite H1.
field.
unfold on_perp_d in *.
intuition.
auto with Geom.
assert (S U B Y = Py B U V / Py U V U * S U V Y).
elim (proj_ex B U V).
intros B1 HB1.
2:unfold on_perp_d in H;intuition.
assert (S U B Y / S U V Y = S U B1 Y / S U V Y).
replace (S U B Y) with (S U B1 Y).
auto.
unfold on_foot in *.
use HB1.
unfold on_perp_d in *.
use H.
assert (parallel B1 B Y U).
apply (perp_perp_para B1 B U V Y U);auto with Geom.
assert (parallel Y U B1 B) by auto with Geom.
unfold parallel, S4 in H8.
uniformize_signed_areas.
IsoleVar (S Y B1 U) H8.
rewrite H8.
ring.
assert ( S U B1 Y / S U V Y = U**B1 / U**V).
rewrite (A6 U B1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HB1.
auto with Geom.
assert (U**B1 / U**V = Py B1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HB1;auto with Geom.
assert (Py B1 U V = Py B U V).
unfold on_foot in *.
use HB1.
unfold perp, Py4 in H5.
IsoleVar (Py B1 U V) H5.
rewrite H5.
ring.
rewrite H3 in H2.

*****
H5 : eq (Py B1 U V) (Py B U V)
H4 : eq (Fdiv (DSeg U B1) (DSeg U V)) (Fdiv (Py B1 U V) (Py U V U))
H3 : eq (Fdiv (S U B1 Y) (S U V Y)) (Fdiv (DSeg U B1) (DSeg U V))
H2 : eq (Fdiv (S U B Y) (S U V Y)) (Fdiv (DSeg U B1) (DSeg U V))
HB1 : on_foot B1 B U V
B1 : Point
H1 : eq (S U A Y) (Fmult (Fdiv (Py A U V) (Py U V U)) (S U V Y))
HA1 : on_foot A1 A U V
A1 : Point
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
H : on_perp_d Y U V r
r : F
A,B,U,V,Y : Point
*****
eq (S U B Y) (Fmult (Fdiv (Py B U V) (Py U V U)) (S U V Y))
+++++
rewrite H4 in H2.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.
use H.
assert (parallel A1 A Y U).
apply (perp_perp_para A1 A U V Y U);auto with Geom.
assert (parallel Y U A1 A) by auto with Geom.
unfold parallel, S4 in H7.
uniformize_signed_areas.
IsoleVar (S Y A1 U) H7.
rewrite H7.
ring.
assert ( S U A1 Y / S U V Y = U**A1 / U**V).
rewrite (A6 U A1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HA1.
auto with Geom.
assert (U**A1 / U**V = Py A1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HA1;auto with Geom.
assert (Py A1 U V = Py A U V).
unfold on_foot in *.
use HA1.
unfold perp, Py4 in H4.
IsoleVar (Py A1 U V) H4.
rewrite H4.
ring.
rewrite H2 in H1.
rewrite H3 in H1.
rewrite H4 in H1.
IsoleVar (S U A Y) H1.
rewrite H1.
field.
unfold on_perp_d in *.
intuition.
auto with Geom.
assert (S U B Y = Py B U V / Py U V U * S U V Y).
elim (proj_ex B U V).
intros B1 HB1.
2:unfold on_perp_d in H;intuition.
assert (S U B Y / S U V Y = S U B1 Y / S U V Y).
replace (S U B Y) with (S U B1 Y).
auto.
unfold on_foot in *.
use HB1.
unfold on_perp_d in *.
use H.
assert (parallel B1 B Y U).
apply (perp_perp_para B1 B U V Y U);auto with Geom.
assert (parallel Y U B1 B) by auto with Geom.
unfold parallel, S4 in H8.
uniformize_signed_areas.
IsoleVar (S Y B1 U) H8.
rewrite H8.
ring.
assert ( S U B1 Y / S U V Y = U**B1 / U**V).
rewrite (A6 U B1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HB1.
auto with Geom.
assert (U**B1 / U**V = Py B1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HB1;auto with Geom.
assert (Py B1 U V = Py B U V).
unfold on_foot in *.
use HB1.
unfold perp, Py4 in H5.
IsoleVar (Py B1 U V) H5.
rewrite H5.
ring.
rewrite H3 in H2.
rewrite H4 in H2.

*****
H5 : eq (Py B1 U V) (Py B U V)
H4 : eq (Fdiv (DSeg U B1) (DSeg U V)) (Fdiv (Py B1 U V) (Py U V U))
H3 : eq (Fdiv (S U B1 Y) (S U V Y)) (Fdiv (DSeg U B1) (DSeg U V))
H2 : eq (Fdiv (S U B Y) (S U V Y)) (Fdiv (Py B1 U V) (Py U V U))
HB1 : on_foot B1 B U V
B1 : Point
H1 : eq (S U A Y) (Fmult (Fdiv (Py A U V) (Py U V U)) (S U V Y))
HA1 : on_foot A1 A U V
A1 : Point
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
H : on_perp_d Y U V r
r : F
A,B,U,V,Y : Point
*****
eq (S U B Y) (Fmult (Fdiv (Py B U V) (Py U V U)) (S U V Y))
+++++
rewrite H5 in H2.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.
use H.
assert (parallel A1 A Y U).
apply (perp_perp_para A1 A U V Y U);auto with Geom.
assert (parallel Y U A1 A) by auto with Geom.
unfold parallel, S4 in H7.
uniformize_signed_areas.
IsoleVar (S Y A1 U) H7.
rewrite H7.
ring.
assert ( S U A1 Y / S U V Y = U**A1 / U**V).
rewrite (A6 U A1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HA1.
auto with Geom.
assert (U**A1 / U**V = Py A1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HA1;auto with Geom.
assert (Py A1 U V = Py A U V).
unfold on_foot in *.
use HA1.
unfold perp, Py4 in H4.
IsoleVar (Py A1 U V) H4.
rewrite H4.
ring.
rewrite H2 in H1.
rewrite H3 in H1.
rewrite H4 in H1.
IsoleVar (S U A Y) H1.
rewrite H1.
field.
unfold on_perp_d in *.
intuition.
auto with Geom.
assert (S U B Y = Py B U V / Py U V U * S U V Y).
elim (proj_ex B U V).
intros B1 HB1.
2:unfold on_perp_d in H;intuition.
assert (S U B Y / S U V Y = S U B1 Y / S U V Y).
replace (S U B Y) with (S U B1 Y).
auto.
unfold on_foot in *.
use HB1.
unfold on_perp_d in *.
use H.
assert (parallel B1 B Y U).
apply (perp_perp_para B1 B U V Y U);auto with Geom.
assert (parallel Y U B1 B) by auto with Geom.
unfold parallel, S4 in H8.
uniformize_signed_areas.
IsoleVar (S Y B1 U) H8.
rewrite H8.
ring.
assert ( S U B1 Y / S U V Y = U**B1 / U**V).
rewrite (A6 U B1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HB1.
auto with Geom.
assert (U**B1 / U**V = Py B1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HB1;auto with Geom.
assert (Py B1 U V = Py B U V).
unfold on_foot in *.
use HB1.
unfold perp, Py4 in H5.
IsoleVar (Py B1 U V) H5.
rewrite H5.
ring.
rewrite H3 in H2.
rewrite H4 in H2.
rewrite H5 in H2.

*****
H5 : eq (Py B1 U V) (Py B U V)
H4 : eq (Fdiv (DSeg U B1) (DSeg U V)) (Fdiv (Py B1 U V) (Py U V U))
H3 : eq (Fdiv (S U B1 Y) (S U V Y)) (Fdiv (DSeg U B1) (DSeg U V))
H2 : eq (Fdiv (S U B Y) (S U V Y)) (Fdiv (Py B U V) (Py U V U))
HB1 : on_foot B1 B U V
B1 : Point
H1 : eq (S U A Y) (Fmult (Fdiv (Py A U V) (Py U V U)) (S U V Y))
HA1 : on_foot A1 A U V
A1 : Point
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
H : on_perp_d Y U V r
r : F
A,B,U,V,Y : Point
*****
eq (S U B Y) (Fmult (Fdiv (Py B U V) (Py U V U)) (S U V Y))
+++++
IsoleVar (S U B Y) H2.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.
use H.
assert (parallel A1 A Y U).
apply (perp_perp_para A1 A U V Y U);auto with Geom.
assert (parallel Y U A1 A) by auto with Geom.
unfold parallel, S4 in H7.
uniformize_signed_areas.
IsoleVar (S Y A1 U) H7.
rewrite H7.
ring.
assert ( S U A1 Y / S U V Y = U**A1 / U**V).
rewrite (A6 U A1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HA1.
auto with Geom.
assert (U**A1 / U**V = Py A1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HA1;auto with Geom.
assert (Py A1 U V = Py A U V).
unfold on_foot in *.
use HA1.
unfold perp, Py4 in H4.
IsoleVar (Py A1 U V) H4.
rewrite H4.
ring.
rewrite H2 in H1.
rewrite H3 in H1.
rewrite H4 in H1.
IsoleVar (S U A Y) H1.
rewrite H1.
field.
unfold on_perp_d in *.
intuition.
auto with Geom.
assert (S U B Y = Py B U V / Py U V U * S U V Y).
elim (proj_ex B U V).
intros B1 HB1.
2:unfold on_perp_d in H;intuition.
assert (S U B Y / S U V Y = S U B1 Y / S U V Y).
replace (S U B Y) with (S U B1 Y).
auto.
unfold on_foot in *.
use HB1.
unfold on_perp_d in *.
use H.
assert (parallel B1 B Y U).
apply (perp_perp_para B1 B U V Y U);auto with Geom.
assert (parallel Y U B1 B) by auto with Geom.
unfold parallel, S4 in H8.
uniformize_signed_areas.
IsoleVar (S Y B1 U) H8.
rewrite H8.
ring.
assert ( S U B1 Y / S U V Y = U**B1 / U**V).
rewrite (A6 U B1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HB1.
auto with Geom.
assert (U**B1 / U**V = Py B1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HB1;auto with Geom.
assert (Py B1 U V = Py B U V).
unfold on_foot in *.
use HB1.
unfold perp, Py4 in H5.
IsoleVar (Py B1 U V) H5.
rewrite H5.
ring.
rewrite H3 in H2.
rewrite H4 in H2.
rewrite H5 in H2.
IsoleVar (S U B Y) H2.

*****
H2 : eq (S U B Y) (Fmult (S U V Y) (Fdiv (Py B U V) (Py U V U)))
H6 : not (eq (S U V Y) F0)
H5 : eq (Py B1 U V) (Py B U V)
H4 : eq (Fdiv (DSeg U B1) (DSeg U V)) (Fdiv (Py B1 U V) (Py U V U))
H3 : eq (Fdiv (S U B1 Y) (S U V Y)) (Fdiv (DSeg U B1) (DSeg U V))
HB1 : on_foot B1 B U V
B1 : Point
H1 : eq (S U A Y) (Fmult (Fdiv (Py A U V) (Py U V U)) (S U V Y))
HA1 : on_foot A1 A U V
A1 : Point
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
H : on_perp_d Y U V r
r : F
A,B,U,V,Y : Point
*****
eq (S U B Y) (Fmult (Fdiv (Py B U V) (Py U V U)) (S U V Y))
+++++
rewrite H2.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.
use H.
assert (parallel A1 A Y U).
apply (perp_perp_para A1 A U V Y U);auto with Geom.
assert (parallel Y U A1 A) by auto with Geom.
unfold parallel, S4 in H7.
uniformize_signed_areas.
IsoleVar (S Y A1 U) H7.
rewrite H7.
ring.
assert ( S U A1 Y / S U V Y = U**A1 / U**V).
rewrite (A6 U A1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HA1.
auto with Geom.
assert (U**A1 / U**V = Py A1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HA1;auto with Geom.
assert (Py A1 U V = Py A U V).
unfold on_foot in *.
use HA1.
unfold perp, Py4 in H4.
IsoleVar (Py A1 U V) H4.
rewrite H4.
ring.
rewrite H2 in H1.
rewrite H3 in H1.
rewrite H4 in H1.
IsoleVar (S U A Y) H1.
rewrite H1.
field.
unfold on_perp_d in *.
intuition.
auto with Geom.
assert (S U B Y = Py B U V / Py U V U * S U V Y).
elim (proj_ex B U V).
intros B1 HB1.
2:unfold on_perp_d in H;intuition.
assert (S U B Y / S U V Y = S U B1 Y / S U V Y).
replace (S U B Y) with (S U B1 Y).
auto.
unfold on_foot in *.
use HB1.
unfold on_perp_d in *.
use H.
assert (parallel B1 B Y U).
apply (perp_perp_para B1 B U V Y U);auto with Geom.
assert (parallel Y U B1 B) by auto with Geom.
unfold parallel, S4 in H8.
uniformize_signed_areas.
IsoleVar (S Y B1 U) H8.
rewrite H8.
ring.
assert ( S U B1 Y / S U V Y = U**B1 / U**V).
rewrite (A6 U B1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HB1.
auto with Geom.
assert (U**B1 / U**V = Py B1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HB1;auto with Geom.
assert (Py B1 U V = Py B U V).
unfold on_foot in *.
use HB1.
unfold perp, Py4 in H5.
IsoleVar (Py B1 U V) H5.
rewrite H5.
ring.
rewrite H3 in H2.
rewrite H4 in H2.
rewrite H5 in H2.
IsoleVar (S U B Y) H2.
rewrite H2.

*****
H2 : eq (S U B Y) (Fmult (S U V Y) (Fdiv (Py B U V) (Py U V U)))
H6 : not (eq (S U V Y) F0)
H5 : eq (Py B1 U V) (Py B U V)
H4 : eq (Fdiv (DSeg U B1) (DSeg U V)) (Fdiv (Py B1 U V) (Py U V U))
H3 : eq (Fdiv (S U B1 Y) (S U V Y)) (Fdiv (DSeg U B1) (DSeg U V))
HB1 : on_foot B1 B U V
B1 : Point
H1 : eq (S U A Y) (Fmult (Fdiv (Py A U V) (Py U V U)) (S U V Y))
HA1 : on_foot A1 A U V
A1 : Point
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
H : on_perp_d Y U V r
r : F
A,B,U,V,Y : Point
*****
eq (Fmult (S U V Y) (Fdiv (Py B U V) (Py U V U))) (Fmult (Fdiv (Py B U V) (Py U V U)) (S U V Y))
+++++
field.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.
use H.
assert (parallel A1 A Y U).
apply (perp_perp_para A1 A U V Y U);auto with Geom.
assert (parallel Y U A1 A) by auto with Geom.
unfold parallel, S4 in H7.
uniformize_signed_areas.
IsoleVar (S Y A1 U) H7.
rewrite H7.
ring.
assert ( S U A1 Y / S U V Y = U**A1 / U**V).
rewrite (A6 U A1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HA1.
auto with Geom.
assert (U**A1 / U**V = Py A1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HA1;auto with Geom.
assert (Py A1 U V = Py A U V).
unfold on_foot in *.
use HA1.
unfold perp, Py4 in H4.
IsoleVar (Py A1 U V) H4.
rewrite H4.
ring.
rewrite H2 in H1.
rewrite H3 in H1.
rewrite H4 in H1.
IsoleVar (S U A Y) H1.
rewrite H1.
field.
unfold on_perp_d in *.
intuition.
auto with Geom.
assert (S U B Y = Py B U V / Py U V U * S U V Y).
elim (proj_ex B U V).
intros B1 HB1.
2:unfold on_perp_d in H;intuition.
assert (S U B Y / S U V Y = S U B1 Y / S U V Y).
replace (S U B Y) with (S U B1 Y).
auto.
unfold on_foot in *.
use HB1.
unfold on_perp_d in *.
use H.
assert (parallel B1 B Y U).
apply (perp_perp_para B1 B U V Y U);auto with Geom.
assert (parallel Y U B1 B) by auto with Geom.
unfold parallel, S4 in H8.
uniformize_signed_areas.
IsoleVar (S Y B1 U) H8.
rewrite H8.
ring.
assert ( S U B1 Y / S U V Y = U**B1 / U**V).
rewrite (A6 U B1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HB1.
auto with Geom.
assert (U**B1 / U**V = Py B1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HB1;auto with Geom.
assert (Py B1 U V = Py B U V).
unfold on_foot in *.
use HB1.
unfold perp, Py4 in H5.
IsoleVar (Py B1 U V) H5.
rewrite H5.
ring.
rewrite H3 in H2.
rewrite H4 in H2.
rewrite H5 in H2.
IsoleVar (S U B Y) H2.
rewrite H2.
field.

*****
H2 : eq (S U B Y) (Fmult (S U V Y) (Fdiv (Py B U V) (Py U V U)))
H6 : not (eq (S U V Y) F0)
H5 : eq (Py B1 U V) (Py B U V)
H4 : eq (Fdiv (DSeg U B1) (DSeg U V)) (Fdiv (Py B1 U V) (Py U V U))
H3 : eq (Fdiv (S U B1 Y) (S U V Y)) (Fdiv (DSeg U B1) (DSeg U V))
HB1 : on_foot B1 B U V
B1 : Point
H1 : eq (S U A Y) (Fmult (Fdiv (Py A U V) (Py U V U)) (S U V Y))
HA1 : on_foot A1 A U V
A1 : Point
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
H : on_perp_d Y U V r
r : F
A,B,U,V,Y : Point
*****
not (eq (Py U V U) F0)
+++++
unfold on_perp_d in *.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.
use H.
assert (parallel A1 A Y U).
apply (perp_perp_para A1 A U V Y U);auto with Geom.
assert (parallel Y U A1 A) by auto with Geom.
unfold parallel, S4 in H7.
uniformize_signed_areas.
IsoleVar (S Y A1 U) H7.
rewrite H7.
ring.
assert ( S U A1 Y / S U V Y = U**A1 / U**V).
rewrite (A6 U A1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HA1.
auto with Geom.
assert (U**A1 / U**V = Py A1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HA1;auto with Geom.
assert (Py A1 U V = Py A U V).
unfold on_foot in *.
use HA1.
unfold perp, Py4 in H4.
IsoleVar (Py A1 U V) H4.
rewrite H4.
ring.
rewrite H2 in H1.
rewrite H3 in H1.
rewrite H4 in H1.
IsoleVar (S U A Y) H1.
rewrite H1.
field.
unfold on_perp_d in *.
intuition.
auto with Geom.
assert (S U B Y = Py B U V / Py U V U * S U V Y).
elim (proj_ex B U V).
intros B1 HB1.
2:unfold on_perp_d in H;intuition.
assert (S U B Y / S U V Y = S U B1 Y / S U V Y).
replace (S U B Y) with (S U B1 Y).
auto.
unfold on_foot in *.
use HB1.
unfold on_perp_d in *.
use H.
assert (parallel B1 B Y U).
apply (perp_perp_para B1 B U V Y U);auto with Geom.
assert (parallel Y U B1 B) by auto with Geom.
unfold parallel, S4 in H8.
uniformize_signed_areas.
IsoleVar (S Y B1 U) H8.
rewrite H8.
ring.
assert ( S U B1 Y / S U V Y = U**B1 / U**V).
rewrite (A6 U B1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HB1.
auto with Geom.
assert (U**B1 / U**V = Py B1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HB1;auto with Geom.
assert (Py B1 U V = Py B U V).
unfold on_foot in *.
use HB1.
unfold perp, Py4 in H5.
IsoleVar (Py B1 U V) H5.
rewrite H5.
ring.
rewrite H3 in H2.
rewrite H4 in H2.
rewrite H5 in H2.
IsoleVar (S U B Y) H2.
rewrite H2.
field.
unfold on_perp_d in *.

*****
H2 : eq (S U B Y) (Fmult (S U V Y) (Fdiv (Py B U V) (Py U V U)))
H6 : not (eq (S U V Y) F0)
H5 : eq (Py B1 U V) (Py B U V)
H4 : eq (Fdiv (DSeg U B1) (DSeg U V)) (Fdiv (Py B1 U V) (Py U V U))
H3 : eq (Fdiv (S U B1 Y) (S U V Y)) (Fdiv (DSeg U B1) (DSeg U V))
HB1 : on_foot B1 B U V
B1 : Point
H1 : eq (S U A Y) (Fmult (Fdiv (Py A U V) (Py U V U)) (S U V Y))
HA1 : on_foot A1 A U V
A1 : Point
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
H : and (not (eq U V))\n (and (perp Y U U V)\n (and\n (eq (Fmult r (Py U V U))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S U V Y)))\n (not (eq r F0))))
r : F
A,B,U,V,Y : Point
*****
not (eq (Py U V U) F0)
+++++
intuition.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.
use H.
assert (parallel A1 A Y U).
apply (perp_perp_para A1 A U V Y U);auto with Geom.
assert (parallel Y U A1 A) by auto with Geom.
unfold parallel, S4 in H7.
uniformize_signed_areas.
IsoleVar (S Y A1 U) H7.
rewrite H7.
ring.
assert ( S U A1 Y / S U V Y = U**A1 / U**V).
rewrite (A6 U A1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HA1.
auto with Geom.
assert (U**A1 / U**V = Py A1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HA1;auto with Geom.
assert (Py A1 U V = Py A U V).
unfold on_foot in *.
use HA1.
unfold perp, Py4 in H4.
IsoleVar (Py A1 U V) H4.
rewrite H4.
ring.
rewrite H2 in H1.
rewrite H3 in H1.
rewrite H4 in H1.
IsoleVar (S U A Y) H1.
rewrite H1.
field.
unfold on_perp_d in *.
intuition.
auto with Geom.
assert (S U B Y = Py B U V / Py U V U * S U V Y).
elim (proj_ex B U V).
intros B1 HB1.
2:unfold on_perp_d in H;intuition.
assert (S U B Y / S U V Y = S U B1 Y / S U V Y).
replace (S U B Y) with (S U B1 Y).
auto.
unfold on_foot in *.
use HB1.
unfold on_perp_d in *.
use H.
assert (parallel B1 B Y U).
apply (perp_perp_para B1 B U V Y U);auto with Geom.
assert (parallel Y U B1 B) by auto with Geom.
unfold parallel, S4 in H8.
uniformize_signed_areas.
IsoleVar (S Y B1 U) H8.
rewrite H8.
ring.
assert ( S U B1 Y / S U V Y = U**B1 / U**V).
rewrite (A6 U B1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HB1.
auto with Geom.
assert (U**B1 / U**V = Py B1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HB1;auto with Geom.
assert (Py B1 U V = Py B U V).
unfold on_foot in *.
use HB1.
unfold perp, Py4 in H5.
IsoleVar (Py B1 U V) H5.
rewrite H5.
ring.
rewrite H3 in H2.
rewrite H4 in H2.
rewrite H5 in H2.
IsoleVar (S U B Y) H2.
rewrite H2.
field.
unfold on_perp_d in *.
intuition.

*****
H5 : eq (Py B1 U V) (Py B U V)
H4 : eq (Fdiv (DSeg U B1) (DSeg U V)) (Fdiv (Py B1 U V) (Py U V U))
H3 : eq (Fdiv (S U B1 Y) (S U V Y)) (Fdiv (DSeg U B1) (DSeg U V))
H2 : eq (Fdiv (S U B Y) (S U V Y)) (Fdiv (Py B U V) (Py U V U))
HB1 : on_foot B1 B U V
B1 : Point
H1 : eq (S U A Y) (Fmult (Fdiv (Py A U V) (Py U V U)) (S U V Y))
HA1 : on_foot A1 A U V
A1 : Point
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
H : on_perp_d Y U V r
r : F
A,B,U,V,Y : Point
*****
not (eq (S U V Y) F0)
+++++
auto with Geom.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.
use H.
assert (parallel A1 A Y U).
apply (perp_perp_para A1 A U V Y U);auto with Geom.
assert (parallel Y U A1 A) by auto with Geom.
unfold parallel, S4 in H7.
uniformize_signed_areas.
IsoleVar (S Y A1 U) H7.
rewrite H7.
ring.
assert ( S U A1 Y / S U V Y = U**A1 / U**V).
rewrite (A6 U A1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HA1.
auto with Geom.
assert (U**A1 / U**V = Py A1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HA1;auto with Geom.
assert (Py A1 U V = Py A U V).
unfold on_foot in *.
use HA1.
unfold perp, Py4 in H4.
IsoleVar (Py A1 U V) H4.
rewrite H4.
ring.
rewrite H2 in H1.
rewrite H3 in H1.
rewrite H4 in H1.
IsoleVar (S U A Y) H1.
rewrite H1.
field.
unfold on_perp_d in *.
intuition.
auto with Geom.
assert (S U B Y = Py B U V / Py U V U * S U V Y).
elim (proj_ex B U V).
intros B1 HB1.
2:unfold on_perp_d in H;intuition.
assert (S U B Y / S U V Y = S U B1 Y / S U V Y).
replace (S U B Y) with (S U B1 Y).
auto.
unfold on_foot in *.
use HB1.
unfold on_perp_d in *.
use H.
assert (parallel B1 B Y U).
apply (perp_perp_para B1 B U V Y U);auto with Geom.
assert (parallel Y U B1 B) by auto with Geom.
unfold parallel, S4 in H8.
uniformize_signed_areas.
IsoleVar (S Y B1 U) H8.
rewrite H8.
ring.
assert ( S U B1 Y / S U V Y = U**B1 / U**V).
rewrite (A6 U B1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HB1.
auto with Geom.
assert (U**B1 / U**V = Py B1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HB1;auto with Geom.
assert (Py B1 U V = Py B U V).
unfold on_foot in *.
use HB1.
unfold perp, Py4 in H5.
IsoleVar (Py B1 U V) H5.
rewrite H5.
ring.
rewrite H3 in H2.
rewrite H4 in H2.
rewrite H5 in H2.
IsoleVar (S U B Y) H2.
rewrite H2.
field.
unfold on_perp_d in *.
intuition.
auto with Geom.

*****
H2 : eq (S U B Y) (Fmult (Fdiv (Py B U V) (Py U V U)) (S U V Y))
H1 : eq (S U A Y) (Fmult (Fdiv (Py A U V) (Py U V U)) (S U V Y))
HA1 : on_foot A1 A U V
A1 : Point
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
H : on_perp_d Y U V r
r : F
A,B,U,V,Y : Point
*****
eq (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y)) (Fminus (S A B U) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py4 U A V B)))
+++++
assert (S U A Y = r / (2+2) * Py A U V).
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.
use H.
assert (parallel A1 A Y U).
apply (perp_perp_para A1 A U V Y U);auto with Geom.
assert (parallel Y U A1 A) by auto with Geom.
unfold parallel, S4 in H7.
uniformize_signed_areas.
IsoleVar (S Y A1 U) H7.
rewrite H7.
ring.
assert ( S U A1 Y / S U V Y = U**A1 / U**V).
rewrite (A6 U A1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HA1.
auto with Geom.
assert (U**A1 / U**V = Py A1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HA1;auto with Geom.
assert (Py A1 U V = Py A U V).
unfold on_foot in *.
use HA1.
unfold perp, Py4 in H4.
IsoleVar (Py A1 U V) H4.
rewrite H4.
ring.
rewrite H2 in H1.
rewrite H3 in H1.
rewrite H4 in H1.
IsoleVar (S U A Y) H1.
rewrite H1.
field.
unfold on_perp_d in *.
intuition.
auto with Geom.
assert (S U B Y = Py B U V / Py U V U * S U V Y).
elim (proj_ex B U V).
intros B1 HB1.
2:unfold on_perp_d in H;intuition.
assert (S U B Y / S U V Y = S U B1 Y / S U V Y).
replace (S U B Y) with (S U B1 Y).
auto.
unfold on_foot in *.
use HB1.
unfold on_perp_d in *.
use H.
assert (parallel B1 B Y U).
apply (perp_perp_para B1 B U V Y U);auto with Geom.
assert (parallel Y U B1 B) by auto with Geom.
unfold parallel, S4 in H8.
uniformize_signed_areas.
IsoleVar (S Y B1 U) H8.
rewrite H8.
ring.
assert ( S U B1 Y / S U V Y = U**B1 / U**V).
rewrite (A6 U B1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HB1.
auto with Geom.
assert (U**B1 / U**V = Py B1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HB1;auto with Geom.
assert (Py B1 U V = Py B U V).
unfold on_foot in *.
use HB1.
unfold perp, Py4 in H5.
IsoleVar (Py B1 U V) H5.
rewrite H5.
ring.
rewrite H3 in H2.
rewrite H4 in H2.
rewrite H5 in H2.
IsoleVar (S U B Y) H2.
rewrite H2.
field.
unfold on_perp_d in *.
intuition.
auto with Geom.
assert (S U A Y = r / (2+2) * Py A U V).

*****
H2 : eq (S U B Y) (Fmult (Fdiv (Py B U V) (Py U V U)) (S U V Y))
H1 : eq (S U A Y) (Fmult (Fdiv (Py A U V) (Py U V U)) (S U V Y))
HA1 : on_foot A1 A U V
A1 : Point
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
H : on_perp_d Y U V r
r : F
A,B,U,V,Y : Point
*****
eq (S U A Y) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py A U V))
+++++
rewrite H1.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.
use H.
assert (parallel A1 A Y U).
apply (perp_perp_para A1 A U V Y U);auto with Geom.
assert (parallel Y U A1 A) by auto with Geom.
unfold parallel, S4 in H7.
uniformize_signed_areas.
IsoleVar (S Y A1 U) H7.
rewrite H7.
ring.
assert ( S U A1 Y / S U V Y = U**A1 / U**V).
rewrite (A6 U A1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HA1.
auto with Geom.
assert (U**A1 / U**V = Py A1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HA1;auto with Geom.
assert (Py A1 U V = Py A U V).
unfold on_foot in *.
use HA1.
unfold perp, Py4 in H4.
IsoleVar (Py A1 U V) H4.
rewrite H4.
ring.
rewrite H2 in H1.
rewrite H3 in H1.
rewrite H4 in H1.
IsoleVar (S U A Y) H1.
rewrite H1.
field.
unfold on_perp_d in *.
intuition.
auto with Geom.
assert (S U B Y = Py B U V / Py U V U * S U V Y).
elim (proj_ex B U V).
intros B1 HB1.
2:unfold on_perp_d in H;intuition.
assert (S U B Y / S U V Y = S U B1 Y / S U V Y).
replace (S U B Y) with (S U B1 Y).
auto.
unfold on_foot in *.
use HB1.
unfold on_perp_d in *.
use H.
assert (parallel B1 B Y U).
apply (perp_perp_para B1 B U V Y U);auto with Geom.
assert (parallel Y U B1 B) by auto with Geom.
unfold parallel, S4 in H8.
uniformize_signed_areas.
IsoleVar (S Y B1 U) H8.
rewrite H8.
ring.
assert ( S U B1 Y / S U V Y = U**B1 / U**V).
rewrite (A6 U B1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HB1.
auto with Geom.
assert (U**B1 / U**V = Py B1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HB1;auto with Geom.
assert (Py B1 U V = Py B U V).
unfold on_foot in *.
use HB1.
unfold perp, Py4 in H5.
IsoleVar (Py B1 U V) H5.
rewrite H5.
ring.
rewrite H3 in H2.
rewrite H4 in H2.
rewrite H5 in H2.
IsoleVar (S U B Y) H2.
rewrite H2.
field.
unfold on_perp_d in *.
intuition.
auto with Geom.
assert (S U A Y = r / (2+2) * Py A U V).
rewrite H1.

*****
H2 : eq (S U B Y) (Fmult (Fdiv (Py B U V) (Py U V U)) (S U V Y))
H1 : eq (S U A Y) (Fmult (Fdiv (Py A U V) (Py U V U)) (S U V Y))
HA1 : on_foot A1 A U V
A1 : Point
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
H : on_perp_d Y U V r
r : F
A,B,U,V,Y : Point
*****
eq (Fmult (Fdiv (Py A U V) (Py U V U)) (S U V Y)) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py A U V))
+++++
unfold on_perp_d in H.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.
use H.
assert (parallel A1 A Y U).
apply (perp_perp_para A1 A U V Y U);auto with Geom.
assert (parallel Y U A1 A) by auto with Geom.
unfold parallel, S4 in H7.
uniformize_signed_areas.
IsoleVar (S Y A1 U) H7.
rewrite H7.
ring.
assert ( S U A1 Y / S U V Y = U**A1 / U**V).
rewrite (A6 U A1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HA1.
auto with Geom.
assert (U**A1 / U**V = Py A1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HA1;auto with Geom.
assert (Py A1 U V = Py A U V).
unfold on_foot in *.
use HA1.
unfold perp, Py4 in H4.
IsoleVar (Py A1 U V) H4.
rewrite H4.
ring.
rewrite H2 in H1.
rewrite H3 in H1.
rewrite H4 in H1.
IsoleVar (S U A Y) H1.
rewrite H1.
field.
unfold on_perp_d in *.
intuition.
auto with Geom.
assert (S U B Y = Py B U V / Py U V U * S U V Y).
elim (proj_ex B U V).
intros B1 HB1.
2:unfold on_perp_d in H;intuition.
assert (S U B Y / S U V Y = S U B1 Y / S U V Y).
replace (S U B Y) with (S U B1 Y).
auto.
unfold on_foot in *.
use HB1.
unfold on_perp_d in *.
use H.
assert (parallel B1 B Y U).
apply (perp_perp_para B1 B U V Y U);auto with Geom.
assert (parallel Y U B1 B) by auto with Geom.
unfold parallel, S4 in H8.
uniformize_signed_areas.
IsoleVar (S Y B1 U) H8.
rewrite H8.
ring.
assert ( S U B1 Y / S U V Y = U**B1 / U**V).
rewrite (A6 U B1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HB1.
auto with Geom.
assert (U**B1 / U**V = Py B1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HB1;auto with Geom.
assert (Py B1 U V = Py B U V).
unfold on_foot in *.
use HB1.
unfold perp, Py4 in H5.
IsoleVar (Py B1 U V) H5.
rewrite H5.
ring.
rewrite H3 in H2.
rewrite H4 in H2.
rewrite H5 in H2.
IsoleVar (S U B Y) H2.
rewrite H2.
field.
unfold on_perp_d in *.
intuition.
auto with Geom.
assert (S U A Y = r / (2+2) * Py A U V).
rewrite H1.
unfold on_perp_d in H.

*****
H2 : eq (S U B Y) (Fmult (Fdiv (Py B U V) (Py U V U)) (S U V Y))
H1 : eq (S U A Y) (Fmult (Fdiv (Py A U V) (Py U V U)) (S U V Y))
HA1 : on_foot A1 A U V
A1 : Point
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
H : and (not (eq U V))\n (and (perp Y U U V)\n (and\n (eq (Fmult r (Py U V U))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S U V Y)))\n (not (eq r F0))))
r : F
A,B,U,V,Y : Point
*****
eq (Fmult (Fdiv (Py A U V) (Py U V U)) (S U V Y)) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py A U V))
+++++
use H.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.
use H.
assert (parallel A1 A Y U).
apply (perp_perp_para A1 A U V Y U);auto with Geom.
assert (parallel Y U A1 A) by auto with Geom.
unfold parallel, S4 in H7.
uniformize_signed_areas.
IsoleVar (S Y A1 U) H7.
rewrite H7.
ring.
assert ( S U A1 Y / S U V Y = U**A1 / U**V).
rewrite (A6 U A1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HA1.
auto with Geom.
assert (U**A1 / U**V = Py A1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HA1;auto with Geom.
assert (Py A1 U V = Py A U V).
unfold on_foot in *.
use HA1.
unfold perp, Py4 in H4.
IsoleVar (Py A1 U V) H4.
rewrite H4.
ring.
rewrite H2 in H1.
rewrite H3 in H1.
rewrite H4 in H1.
IsoleVar (S U A Y) H1.
rewrite H1.
field.
unfold on_perp_d in *.
intuition.
auto with Geom.
assert (S U B Y = Py B U V / Py U V U * S U V Y).
elim (proj_ex B U V).
intros B1 HB1.
2:unfold on_perp_d in H;intuition.
assert (S U B Y / S U V Y = S U B1 Y / S U V Y).
replace (S U B Y) with (S U B1 Y).
auto.
unfold on_foot in *.
use HB1.
unfold on_perp_d in *.
use H.
assert (parallel B1 B Y U).
apply (perp_perp_para B1 B U V Y U);auto with Geom.
assert (parallel Y U B1 B) by auto with Geom.
unfold parallel, S4 in H8.
uniformize_signed_areas.
IsoleVar (S Y B1 U) H8.
rewrite H8.
ring.
assert ( S U B1 Y / S U V Y = U**B1 / U**V).
rewrite (A6 U B1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HB1.
auto with Geom.
assert (U**B1 / U**V = Py B1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HB1;auto with Geom.
assert (Py B1 U V = Py B U V).
unfold on_foot in *.
use HB1.
unfold perp, Py4 in H5.
IsoleVar (Py B1 U V) H5.
rewrite H5.
ring.
rewrite H3 in H2.
rewrite H4 in H2.
rewrite H5 in H2.
IsoleVar (S U B Y) H2.
rewrite H2.
field.
unfold on_perp_d in *.
intuition.
auto with Geom.
assert (S U A Y = r / (2+2) * Py A U V).
rewrite H1.
unfold on_perp_d in H.
use H.

*****
H7 : not (eq r F0)
H4 : eq (Fmult r (Py U V U))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S U V Y))
H5 : perp Y U U V
H3 : not (eq U V)
H2 : eq (S U B Y) (Fmult (Fdiv (Py B U V) (Py U V U)) (S U V Y))
H1 : eq (S U A Y) (Fmult (Fdiv (Py A U V) (Py U V U)) (S U V Y))
HA1 : on_foot A1 A U V
A1 : Point
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
r : F
A,B,U,V,Y : Point
*****
eq (Fmult (Fdiv (Py A U V) (Py U V U)) (S U V Y)) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py A U V))
+++++
IsoleVar (S U V Y) H4.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.
use H.
assert (parallel A1 A Y U).
apply (perp_perp_para A1 A U V Y U);auto with Geom.
assert (parallel Y U A1 A) by auto with Geom.
unfold parallel, S4 in H7.
uniformize_signed_areas.
IsoleVar (S Y A1 U) H7.
rewrite H7.
ring.
assert ( S U A1 Y / S U V Y = U**A1 / U**V).
rewrite (A6 U A1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HA1.
auto with Geom.
assert (U**A1 / U**V = Py A1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HA1;auto with Geom.
assert (Py A1 U V = Py A U V).
unfold on_foot in *.
use HA1.
unfold perp, Py4 in H4.
IsoleVar (Py A1 U V) H4.
rewrite H4.
ring.
rewrite H2 in H1.
rewrite H3 in H1.
rewrite H4 in H1.
IsoleVar (S U A Y) H1.
rewrite H1.
field.
unfold on_perp_d in *.
intuition.
auto with Geom.
assert (S U B Y = Py B U V / Py U V U * S U V Y).
elim (proj_ex B U V).
intros B1 HB1.
2:unfold on_perp_d in H;intuition.
assert (S U B Y / S U V Y = S U B1 Y / S U V Y).
replace (S U B Y) with (S U B1 Y).
auto.
unfold on_foot in *.
use HB1.
unfold on_perp_d in *.
use H.
assert (parallel B1 B Y U).
apply (perp_perp_para B1 B U V Y U);auto with Geom.
assert (parallel Y U B1 B) by auto with Geom.
unfold parallel, S4 in H8.
uniformize_signed_areas.
IsoleVar (S Y B1 U) H8.
rewrite H8.
ring.
assert ( S U B1 Y / S U V Y = U**B1 / U**V).
rewrite (A6 U B1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HB1.
auto with Geom.
assert (U**B1 / U**V = Py B1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HB1;auto with Geom.
assert (Py B1 U V = Py B U V).
unfold on_foot in *.
use HB1.
unfold perp, Py4 in H5.
IsoleVar (Py B1 U V) H5.
rewrite H5.
ring.
rewrite H3 in H2.
rewrite H4 in H2.
rewrite H5 in H2.
IsoleVar (S U B Y) H2.
rewrite H2.
field.
unfold on_perp_d in *.
intuition.
auto with Geom.
assert (S U A Y = r / (2+2) * Py A U V).
rewrite H1.
unfold on_perp_d in H.
use H.
IsoleVar (S U V Y) H4.

*****
H4 : eq (S U V Y)\n (Fdiv (Fmult r (Py U V U)) (Fplus (Fplus F1 F1) (Fplus F1 F1)))
H : not (eq (Fplus (Fplus F1 F1) (Fplus F1 F1)) F0)
H7 : not (eq r F0)
H5 : perp Y U U V
H3 : not (eq U V)
H2 : eq (S U B Y) (Fmult (Fdiv (Py B U V) (Py U V U)) (S U V Y))
H1 : eq (S U A Y) (Fmult (Fdiv (Py A U V) (Py U V U)) (S U V Y))
HA1 : on_foot A1 A U V
A1 : Point
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
r : F
A,B,U,V,Y : Point
*****
eq (Fmult (Fdiv (Py A U V) (Py U V U)) (S U V Y)) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py A U V))
+++++
rewrite H4.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.
use H.
assert (parallel A1 A Y U).
apply (perp_perp_para A1 A U V Y U);auto with Geom.
assert (parallel Y U A1 A) by auto with Geom.
unfold parallel, S4 in H7.
uniformize_signed_areas.
IsoleVar (S Y A1 U) H7.
rewrite H7.
ring.
assert ( S U A1 Y / S U V Y = U**A1 / U**V).
rewrite (A6 U A1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HA1.
auto with Geom.
assert (U**A1 / U**V = Py A1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HA1;auto with Geom.
assert (Py A1 U V = Py A U V).
unfold on_foot in *.
use HA1.
unfold perp, Py4 in H4.
IsoleVar (Py A1 U V) H4.
rewrite H4.
ring.
rewrite H2 in H1.
rewrite H3 in H1.
rewrite H4 in H1.
IsoleVar (S U A Y) H1.
rewrite H1.
field.
unfold on_perp_d in *.
intuition.
auto with Geom.
assert (S U B Y = Py B U V / Py U V U * S U V Y).
elim (proj_ex B U V).
intros B1 HB1.
2:unfold on_perp_d in H;intuition.
assert (S U B Y / S U V Y = S U B1 Y / S U V Y).
replace (S U B Y) with (S U B1 Y).
auto.
unfold on_foot in *.
use HB1.
unfold on_perp_d in *.
use H.
assert (parallel B1 B Y U).
apply (perp_perp_para B1 B U V Y U);auto with Geom.
assert (parallel Y U B1 B) by auto with Geom.
unfold parallel, S4 in H8.
uniformize_signed_areas.
IsoleVar (S Y B1 U) H8.
rewrite H8.
ring.
assert ( S U B1 Y / S U V Y = U**B1 / U**V).
rewrite (A6 U B1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HB1.
auto with Geom.
assert (U**B1 / U**V = Py B1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HB1;auto with Geom.
assert (Py B1 U V = Py B U V).
unfold on_foot in *.
use HB1.
unfold perp, Py4 in H5.
IsoleVar (Py B1 U V) H5.
rewrite H5.
ring.
rewrite H3 in H2.
rewrite H4 in H2.
rewrite H5 in H2.
IsoleVar (S U B Y) H2.
rewrite H2.
field.
unfold on_perp_d in *.
intuition.
auto with Geom.
assert (S U A Y = r / (2+2) * Py A U V).
rewrite H1.
unfold on_perp_d in H.
use H.
IsoleVar (S U V Y) H4.
rewrite H4.

*****
H4 : eq (S U V Y)\n (Fdiv (Fmult r (Py U V U)) (Fplus (Fplus F1 F1) (Fplus F1 F1)))
H : not (eq (Fplus (Fplus F1 F1) (Fplus F1 F1)) F0)
H7 : not (eq r F0)
H5 : perp Y U U V
H3 : not (eq U V)
H2 : eq (S U B Y) (Fmult (Fdiv (Py B U V) (Py U V U)) (S U V Y))
H1 : eq (S U A Y) (Fmult (Fdiv (Py A U V) (Py U V U)) (S U V Y))
HA1 : on_foot A1 A U V
A1 : Point
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
r : F
A,B,U,V,Y : Point
*****
eq (Fmult (Fdiv (Py A U V) (Py U V U)) (Fdiv (Fmult r (Py U V U)) (Fplus (Fplus F1 F1) (Fplus F1 F1)))) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py A U V))
+++++
field;solve_conds.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.
use H.
assert (parallel A1 A Y U).
apply (perp_perp_para A1 A U V Y U);auto with Geom.
assert (parallel Y U A1 A) by auto with Geom.
unfold parallel, S4 in H7.
uniformize_signed_areas.
IsoleVar (S Y A1 U) H7.
rewrite H7.
ring.
assert ( S U A1 Y / S U V Y = U**A1 / U**V).
rewrite (A6 U A1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HA1.
auto with Geom.
assert (U**A1 / U**V = Py A1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HA1;auto with Geom.
assert (Py A1 U V = Py A U V).
unfold on_foot in *.
use HA1.
unfold perp, Py4 in H4.
IsoleVar (Py A1 U V) H4.
rewrite H4.
ring.
rewrite H2 in H1.
rewrite H3 in H1.
rewrite H4 in H1.
IsoleVar (S U A Y) H1.
rewrite H1.
field.
unfold on_perp_d in *.
intuition.
auto with Geom.
assert (S U B Y = Py B U V / Py U V U * S U V Y).
elim (proj_ex B U V).
intros B1 HB1.
2:unfold on_perp_d in H;intuition.
assert (S U B Y / S U V Y = S U B1 Y / S U V Y).
replace (S U B Y) with (S U B1 Y).
auto.
unfold on_foot in *.
use HB1.
unfold on_perp_d in *.
use H.
assert (parallel B1 B Y U).
apply (perp_perp_para B1 B U V Y U);auto with Geom.
assert (parallel Y U B1 B) by auto with Geom.
unfold parallel, S4 in H8.
uniformize_signed_areas.
IsoleVar (S Y B1 U) H8.
rewrite H8.
ring.
assert ( S U B1 Y / S U V Y = U**B1 / U**V).
rewrite (A6 U B1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HB1.
auto with Geom.
assert (U**B1 / U**V = Py B1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HB1;auto with Geom.
assert (Py B1 U V = Py B U V).
unfold on_foot in *.
use HB1.
unfold perp, Py4 in H5.
IsoleVar (Py B1 U V) H5.
rewrite H5.
ring.
rewrite H3 in H2.
rewrite H4 in H2.
rewrite H5 in H2.
IsoleVar (S U B Y) H2.
rewrite H2.
field.
unfold on_perp_d in *.
intuition.
auto with Geom.
assert (S U A Y = r / (2+2) * Py A U V).
rewrite H1.
unfold on_perp_d in H.
use H.
IsoleVar (S U V Y) H4.
rewrite H4.
field;solve_conds.

*****
H4 : eq (S U V Y)\n (Fdiv (Fmult r (Py U V U)) (Fplus (Fplus F1 F1) (Fplus F1 F1)))
H : not (eq (Fplus (Fplus F1 F1) (Fplus F1 F1)) F0)
H7 : not (eq r F0)
H5 : perp Y U U V
H3 : not (eq U V)
H2 : eq (S U B Y) (Fmult (Fdiv (Py B U V) (Py U V U)) (S U V Y))
H1 : eq (S U A Y) (Fmult (Fdiv (Py A U V) (Py U V U)) (S U V Y))
HA1 : on_foot A1 A U V
A1 : Point
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
r : F
A,B,U,V,Y : Point
*****
not (eq (Py U V U) F0)
+++++
auto with Geom.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.
use H.
assert (parallel A1 A Y U).
apply (perp_perp_para A1 A U V Y U);auto with Geom.
assert (parallel Y U A1 A) by auto with Geom.
unfold parallel, S4 in H7.
uniformize_signed_areas.
IsoleVar (S Y A1 U) H7.
rewrite H7.
ring.
assert ( S U A1 Y / S U V Y = U**A1 / U**V).
rewrite (A6 U A1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HA1.
auto with Geom.
assert (U**A1 / U**V = Py A1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HA1;auto with Geom.
assert (Py A1 U V = Py A U V).
unfold on_foot in *.
use HA1.
unfold perp, Py4 in H4.
IsoleVar (Py A1 U V) H4.
rewrite H4.
ring.
rewrite H2 in H1.
rewrite H3 in H1.
rewrite H4 in H1.
IsoleVar (S U A Y) H1.
rewrite H1.
field.
unfold on_perp_d in *.
intuition.
auto with Geom.
assert (S U B Y = Py B U V / Py U V U * S U V Y).
elim (proj_ex B U V).
intros B1 HB1.
2:unfold on_perp_d in H;intuition.
assert (S U B Y / S U V Y = S U B1 Y / S U V Y).
replace (S U B Y) with (S U B1 Y).
auto.
unfold on_foot in *.
use HB1.
unfold on_perp_d in *.
use H.
assert (parallel B1 B Y U).
apply (perp_perp_para B1 B U V Y U);auto with Geom.
assert (parallel Y U B1 B) by auto with Geom.
unfold parallel, S4 in H8.
uniformize_signed_areas.
IsoleVar (S Y B1 U) H8.
rewrite H8.
ring.
assert ( S U B1 Y / S U V Y = U**B1 / U**V).
rewrite (A6 U B1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HB1.
auto with Geom.
assert (U**B1 / U**V = Py B1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HB1;auto with Geom.
assert (Py B1 U V = Py B U V).
unfold on_foot in *.
use HB1.
unfold perp, Py4 in H5.
IsoleVar (Py B1 U V) H5.
rewrite H5.
ring.
rewrite H3 in H2.
rewrite H4 in H2.
rewrite H5 in H2.
IsoleVar (S U B Y) H2.
rewrite H2.
field.
unfold on_perp_d in *.
intuition.
auto with Geom.
assert (S U A Y = r / (2+2) * Py A U V).
rewrite H1.
unfold on_perp_d in H.
use H.
IsoleVar (S U V Y) H4.
rewrite H4.
field;solve_conds.
auto with Geom.

*****
H7 : not (eq r F0)
H4 : eq (Fmult r (Py U V U))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S U V Y))
H5 : perp Y U U V
H3 : not (eq U V)
H2 : eq (S U B Y) (Fmult (Fdiv (Py B U V) (Py U V U)) (S U V Y))
H1 : eq (S U A Y) (Fmult (Fdiv (Py A U V) (Py U V U)) (S U V Y))
HA1 : on_foot A1 A U V
A1 : Point
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
r : F
A,B,U,V,Y : Point
*****
not (eq (Fplus (Fplus F1 F1) (Fplus F1 F1)) F0)
+++++
replace (2+2) with (2*2) by ring.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.
use H.
assert (parallel A1 A Y U).
apply (perp_perp_para A1 A U V Y U);auto with Geom.
assert (parallel Y U A1 A) by auto with Geom.
unfold parallel, S4 in H7.
uniformize_signed_areas.
IsoleVar (S Y A1 U) H7.
rewrite H7.
ring.
assert ( S U A1 Y / S U V Y = U**A1 / U**V).
rewrite (A6 U A1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HA1.
auto with Geom.
assert (U**A1 / U**V = Py A1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HA1;auto with Geom.
assert (Py A1 U V = Py A U V).
unfold on_foot in *.
use HA1.
unfold perp, Py4 in H4.
IsoleVar (Py A1 U V) H4.
rewrite H4.
ring.
rewrite H2 in H1.
rewrite H3 in H1.
rewrite H4 in H1.
IsoleVar (S U A Y) H1.
rewrite H1.
field.
unfold on_perp_d in *.
intuition.
auto with Geom.
assert (S U B Y = Py B U V / Py U V U * S U V Y).
elim (proj_ex B U V).
intros B1 HB1.
2:unfold on_perp_d in H;intuition.
assert (S U B Y / S U V Y = S U B1 Y / S U V Y).
replace (S U B Y) with (S U B1 Y).
auto.
unfold on_foot in *.
use HB1.
unfold on_perp_d in *.
use H.
assert (parallel B1 B Y U).
apply (perp_perp_para B1 B U V Y U);auto with Geom.
assert (parallel Y U B1 B) by auto with Geom.
unfold parallel, S4 in H8.
uniformize_signed_areas.
IsoleVar (S Y B1 U) H8.
rewrite H8.
ring.
assert ( S U B1 Y / S U V Y = U**B1 / U**V).
rewrite (A6 U B1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HB1.
auto with Geom.
assert (U**B1 / U**V = Py B1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HB1;auto with Geom.
assert (Py B1 U V = Py B U V).
unfold on_foot in *.
use HB1.
unfold perp, Py4 in H5.
IsoleVar (Py B1 U V) H5.
rewrite H5.
ring.
rewrite H3 in H2.
rewrite H4 in H2.
rewrite H5 in H2.
IsoleVar (S U B Y) H2.
rewrite H2.
field.
unfold on_perp_d in *.
intuition.
auto with Geom.
assert (S U A Y = r / (2+2) * Py A U V).
rewrite H1.
unfold on_perp_d in H.
use H.
IsoleVar (S U V Y) H4.
rewrite H4.
field;solve_conds.
auto with Geom.
replace (2+2) with (2*2) by ring.

*****
H7 : not (eq r F0)
H4 : eq (Fmult r (Py U V U))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S U V Y))
H5 : perp Y U U V
H3 : not (eq U V)
H2 : eq (S U B Y) (Fmult (Fdiv (Py B U V) (Py U V U)) (S U V Y))
H1 : eq (S U A Y) (Fmult (Fdiv (Py A U V) (Py U V U)) (S U V Y))
HA1 : on_foot A1 A U V
A1 : Point
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
r : F
A,B,U,V,Y : Point
*****
not (eq (Fmult (Fplus F1 F1) (Fplus F1 F1)) F0)
+++++
solve_conds.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.
use H.
assert (parallel A1 A Y U).
apply (perp_perp_para A1 A U V Y U);auto with Geom.
assert (parallel Y U A1 A) by auto with Geom.
unfold parallel, S4 in H7.
uniformize_signed_areas.
IsoleVar (S Y A1 U) H7.
rewrite H7.
ring.
assert ( S U A1 Y / S U V Y = U**A1 / U**V).
rewrite (A6 U A1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HA1.
auto with Geom.
assert (U**A1 / U**V = Py A1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HA1;auto with Geom.
assert (Py A1 U V = Py A U V).
unfold on_foot in *.
use HA1.
unfold perp, Py4 in H4.
IsoleVar (Py A1 U V) H4.
rewrite H4.
ring.
rewrite H2 in H1.
rewrite H3 in H1.
rewrite H4 in H1.
IsoleVar (S U A Y) H1.
rewrite H1.
field.
unfold on_perp_d in *.
intuition.
auto with Geom.
assert (S U B Y = Py B U V / Py U V U * S U V Y).
elim (proj_ex B U V).
intros B1 HB1.
2:unfold on_perp_d in H;intuition.
assert (S U B Y / S U V Y = S U B1 Y / S U V Y).
replace (S U B Y) with (S U B1 Y).
auto.
unfold on_foot in *.
use HB1.
unfold on_perp_d in *.
use H.
assert (parallel B1 B Y U).
apply (perp_perp_para B1 B U V Y U);auto with Geom.
assert (parallel Y U B1 B) by auto with Geom.
unfold parallel, S4 in H8.
uniformize_signed_areas.
IsoleVar (S Y B1 U) H8.
rewrite H8.
ring.
assert ( S U B1 Y / S U V Y = U**B1 / U**V).
rewrite (A6 U B1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HB1.
auto with Geom.
assert (U**B1 / U**V = Py B1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HB1;auto with Geom.
assert (Py B1 U V = Py B U V).
unfold on_foot in *.
use HB1.
unfold perp, Py4 in H5.
IsoleVar (Py B1 U V) H5.
rewrite H5.
ring.
rewrite H3 in H2.
rewrite H4 in H2.
rewrite H5 in H2.
IsoleVar (S U B Y) H2.
rewrite H2.
field.
unfold on_perp_d in *.
intuition.
auto with Geom.
assert (S U A Y = r / (2+2) * Py A U V).
rewrite H1.
unfold on_perp_d in H.
use H.
IsoleVar (S U V Y) H4.
rewrite H4.
field;solve_conds.
auto with Geom.
replace (2+2) with (2*2) by ring.
solve_conds.

*****
H3 : eq (S U A Y)\n (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py A U V))
H2 : eq (S U B Y) (Fmult (Fdiv (Py B U V) (Py U V U)) (S U V Y))
H1 : eq (S U A Y) (Fmult (Fdiv (Py A U V) (Py U V U)) (S U V Y))
HA1 : on_foot A1 A U V
A1 : Point
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
H : on_perp_d Y U V r
r : F
A,B,U,V,Y : Point
*****
eq (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y)) (Fminus (S A B U) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py4 U A V B)))
+++++
assert (S U B Y = r / (2+2) * Py B U V).
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.
use H.
assert (parallel A1 A Y U).
apply (perp_perp_para A1 A U V Y U);auto with Geom.
assert (parallel Y U A1 A) by auto with Geom.
unfold parallel, S4 in H7.
uniformize_signed_areas.
IsoleVar (S Y A1 U) H7.
rewrite H7.
ring.
assert ( S U A1 Y / S U V Y = U**A1 / U**V).
rewrite (A6 U A1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HA1.
auto with Geom.
assert (U**A1 / U**V = Py A1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HA1;auto with Geom.
assert (Py A1 U V = Py A U V).
unfold on_foot in *.
use HA1.
unfold perp, Py4 in H4.
IsoleVar (Py A1 U V) H4.
rewrite H4.
ring.
rewrite H2 in H1.
rewrite H3 in H1.
rewrite H4 in H1.
IsoleVar (S U A Y) H1.
rewrite H1.
field.
unfold on_perp_d in *.
intuition.
auto with Geom.
assert (S U B Y = Py B U V / Py U V U * S U V Y).
elim (proj_ex B U V).
intros B1 HB1.
2:unfold on_perp_d in H;intuition.
assert (S U B Y / S U V Y = S U B1 Y / S U V Y).
replace (S U B Y) with (S U B1 Y).
auto.
unfold on_foot in *.
use HB1.
unfold on_perp_d in *.
use H.
assert (parallel B1 B Y U).
apply (perp_perp_para B1 B U V Y U);auto with Geom.
assert (parallel Y U B1 B) by auto with Geom.
unfold parallel, S4 in H8.
uniformize_signed_areas.
IsoleVar (S Y B1 U) H8.
rewrite H8.
ring.
assert ( S U B1 Y / S U V Y = U**B1 / U**V).
rewrite (A6 U B1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HB1.
auto with Geom.
assert (U**B1 / U**V = Py B1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HB1;auto with Geom.
assert (Py B1 U V = Py B U V).
unfold on_foot in *.
use HB1.
unfold perp, Py4 in H5.
IsoleVar (Py B1 U V) H5.
rewrite H5.
ring.
rewrite H3 in H2.
rewrite H4 in H2.
rewrite H5 in H2.
IsoleVar (S U B Y) H2.
rewrite H2.
field.
unfold on_perp_d in *.
intuition.
auto with Geom.
assert (S U A Y = r / (2+2) * Py A U V).
rewrite H1.
unfold on_perp_d in H.
use H.
IsoleVar (S U V Y) H4.
rewrite H4.
field;solve_conds.
auto with Geom.
replace (2+2) with (2*2) by ring.
solve_conds.
assert (S U B Y = r / (2+2) * Py B U V).

*****
H3 : eq (S U A Y)\n (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py A U V))
H2 : eq (S U B Y) (Fmult (Fdiv (Py B U V) (Py U V U)) (S U V Y))
H1 : eq (S U A Y) (Fmult (Fdiv (Py A U V) (Py U V U)) (S U V Y))
HA1 : on_foot A1 A U V
A1 : Point
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
H : on_perp_d Y U V r
r : F
A,B,U,V,Y : Point
*****
eq (S U B Y) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py B U V))
+++++
unfold on_perp_d in H.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.
use H.
assert (parallel A1 A Y U).
apply (perp_perp_para A1 A U V Y U);auto with Geom.
assert (parallel Y U A1 A) by auto with Geom.
unfold parallel, S4 in H7.
uniformize_signed_areas.
IsoleVar (S Y A1 U) H7.
rewrite H7.
ring.
assert ( S U A1 Y / S U V Y = U**A1 / U**V).
rewrite (A6 U A1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HA1.
auto with Geom.
assert (U**A1 / U**V = Py A1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HA1;auto with Geom.
assert (Py A1 U V = Py A U V).
unfold on_foot in *.
use HA1.
unfold perp, Py4 in H4.
IsoleVar (Py A1 U V) H4.
rewrite H4.
ring.
rewrite H2 in H1.
rewrite H3 in H1.
rewrite H4 in H1.
IsoleVar (S U A Y) H1.
rewrite H1.
field.
unfold on_perp_d in *.
intuition.
auto with Geom.
assert (S U B Y = Py B U V / Py U V U * S U V Y).
elim (proj_ex B U V).
intros B1 HB1.
2:unfold on_perp_d in H;intuition.
assert (S U B Y / S U V Y = S U B1 Y / S U V Y).
replace (S U B Y) with (S U B1 Y).
auto.
unfold on_foot in *.
use HB1.
unfold on_perp_d in *.
use H.
assert (parallel B1 B Y U).
apply (perp_perp_para B1 B U V Y U);auto with Geom.
assert (parallel Y U B1 B) by auto with Geom.
unfold parallel, S4 in H8.
uniformize_signed_areas.
IsoleVar (S Y B1 U) H8.
rewrite H8.
ring.
assert ( S U B1 Y / S U V Y = U**B1 / U**V).
rewrite (A6 U B1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HB1.
auto with Geom.
assert (U**B1 / U**V = Py B1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HB1;auto with Geom.
assert (Py B1 U V = Py B U V).
unfold on_foot in *.
use HB1.
unfold perp, Py4 in H5.
IsoleVar (Py B1 U V) H5.
rewrite H5.
ring.
rewrite H3 in H2.
rewrite H4 in H2.
rewrite H5 in H2.
IsoleVar (S U B Y) H2.
rewrite H2.
field.
unfold on_perp_d in *.
intuition.
auto with Geom.
assert (S U A Y = r / (2+2) * Py A U V).
rewrite H1.
unfold on_perp_d in H.
use H.
IsoleVar (S U V Y) H4.
rewrite H4.
field;solve_conds.
auto with Geom.
replace (2+2) with (2*2) by ring.
solve_conds.
assert (S U B Y = r / (2+2) * Py B U V).
unfold on_perp_d in H.

*****
H3 : eq (S U A Y)\n (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py A U V))
H2 : eq (S U B Y) (Fmult (Fdiv (Py B U V) (Py U V U)) (S U V Y))
H1 : eq (S U A Y) (Fmult (Fdiv (Py A U V) (Py U V U)) (S U V Y))
HA1 : on_foot A1 A U V
A1 : Point
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
H : and (not (eq U V))\n (and (perp Y U U V)\n (and\n (eq (Fmult r (Py U V U))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S U V Y)))\n (not (eq r F0))))
r : F
A,B,U,V,Y : Point
*****
eq (S U B Y) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py B U V))
+++++
use H.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.
use H.
assert (parallel A1 A Y U).
apply (perp_perp_para A1 A U V Y U);auto with Geom.
assert (parallel Y U A1 A) by auto with Geom.
unfold parallel, S4 in H7.
uniformize_signed_areas.
IsoleVar (S Y A1 U) H7.
rewrite H7.
ring.
assert ( S U A1 Y / S U V Y = U**A1 / U**V).
rewrite (A6 U A1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HA1.
auto with Geom.
assert (U**A1 / U**V = Py A1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HA1;auto with Geom.
assert (Py A1 U V = Py A U V).
unfold on_foot in *.
use HA1.
unfold perp, Py4 in H4.
IsoleVar (Py A1 U V) H4.
rewrite H4.
ring.
rewrite H2 in H1.
rewrite H3 in H1.
rewrite H4 in H1.
IsoleVar (S U A Y) H1.
rewrite H1.
field.
unfold on_perp_d in *.
intuition.
auto with Geom.
assert (S U B Y = Py B U V / Py U V U * S U V Y).
elim (proj_ex B U V).
intros B1 HB1.
2:unfold on_perp_d in H;intuition.
assert (S U B Y / S U V Y = S U B1 Y / S U V Y).
replace (S U B Y) with (S U B1 Y).
auto.
unfold on_foot in *.
use HB1.
unfold on_perp_d in *.
use H.
assert (parallel B1 B Y U).
apply (perp_perp_para B1 B U V Y U);auto with Geom.
assert (parallel Y U B1 B) by auto with Geom.
unfold parallel, S4 in H8.
uniformize_signed_areas.
IsoleVar (S Y B1 U) H8.
rewrite H8.
ring.
assert ( S U B1 Y / S U V Y = U**B1 / U**V).
rewrite (A6 U B1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HB1.
auto with Geom.
assert (U**B1 / U**V = Py B1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HB1;auto with Geom.
assert (Py B1 U V = Py B U V).
unfold on_foot in *.
use HB1.
unfold perp, Py4 in H5.
IsoleVar (Py B1 U V) H5.
rewrite H5.
ring.
rewrite H3 in H2.
rewrite H4 in H2.
rewrite H5 in H2.
IsoleVar (S U B Y) H2.
rewrite H2.
field.
unfold on_perp_d in *.
intuition.
auto with Geom.
assert (S U A Y = r / (2+2) * Py A U V).
rewrite H1.
unfold on_perp_d in H.
use H.
IsoleVar (S U V Y) H4.
rewrite H4.
field;solve_conds.
auto with Geom.
replace (2+2) with (2*2) by ring.
solve_conds.
assert (S U B Y = r / (2+2) * Py B U V).
unfold on_perp_d in H.
use H.

*****
H8 : not (eq r F0)
H5 : eq (Fmult r (Py U V U))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S U V Y))
H6 : perp Y U U V
H4 : not (eq U V)
H3 : eq (S U A Y)\n (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py A U V))
H2 : eq (S U B Y) (Fmult (Fdiv (Py B U V) (Py U V U)) (S U V Y))
H1 : eq (S U A Y) (Fmult (Fdiv (Py A U V) (Py U V U)) (S U V Y))
HA1 : on_foot A1 A U V
A1 : Point
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
r : F
A,B,U,V,Y : Point
*****
eq (S U B Y) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py B U V))
+++++
rewrite H2.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.
use H.
assert (parallel A1 A Y U).
apply (perp_perp_para A1 A U V Y U);auto with Geom.
assert (parallel Y U A1 A) by auto with Geom.
unfold parallel, S4 in H7.
uniformize_signed_areas.
IsoleVar (S Y A1 U) H7.
rewrite H7.
ring.
assert ( S U A1 Y / S U V Y = U**A1 / U**V).
rewrite (A6 U A1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HA1.
auto with Geom.
assert (U**A1 / U**V = Py A1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HA1;auto with Geom.
assert (Py A1 U V = Py A U V).
unfold on_foot in *.
use HA1.
unfold perp, Py4 in H4.
IsoleVar (Py A1 U V) H4.
rewrite H4.
ring.
rewrite H2 in H1.
rewrite H3 in H1.
rewrite H4 in H1.
IsoleVar (S U A Y) H1.
rewrite H1.
field.
unfold on_perp_d in *.
intuition.
auto with Geom.
assert (S U B Y = Py B U V / Py U V U * S U V Y).
elim (proj_ex B U V).
intros B1 HB1.
2:unfold on_perp_d in H;intuition.
assert (S U B Y / S U V Y = S U B1 Y / S U V Y).
replace (S U B Y) with (S U B1 Y).
auto.
unfold on_foot in *.
use HB1.
unfold on_perp_d in *.
use H.
assert (parallel B1 B Y U).
apply (perp_perp_para B1 B U V Y U);auto with Geom.
assert (parallel Y U B1 B) by auto with Geom.
unfold parallel, S4 in H8.
uniformize_signed_areas.
IsoleVar (S Y B1 U) H8.
rewrite H8.
ring.
assert ( S U B1 Y / S U V Y = U**B1 / U**V).
rewrite (A6 U B1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HB1.
auto with Geom.
assert (U**B1 / U**V = Py B1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HB1;auto with Geom.
assert (Py B1 U V = Py B U V).
unfold on_foot in *.
use HB1.
unfold perp, Py4 in H5.
IsoleVar (Py B1 U V) H5.
rewrite H5.
ring.
rewrite H3 in H2.
rewrite H4 in H2.
rewrite H5 in H2.
IsoleVar (S U B Y) H2.
rewrite H2.
field.
unfold on_perp_d in *.
intuition.
auto with Geom.
assert (S U A Y = r / (2+2) * Py A U V).
rewrite H1.
unfold on_perp_d in H.
use H.
IsoleVar (S U V Y) H4.
rewrite H4.
field;solve_conds.
auto with Geom.
replace (2+2) with (2*2) by ring.
solve_conds.
assert (S U B Y = r / (2+2) * Py B U V).
unfold on_perp_d in H.
use H.
rewrite H2.

*****
H8 : not (eq r F0)
H5 : eq (Fmult r (Py U V U))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S U V Y))
H6 : perp Y U U V
H4 : not (eq U V)
H3 : eq (S U A Y)\n (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py A U V))
H2 : eq (S U B Y) (Fmult (Fdiv (Py B U V) (Py U V U)) (S U V Y))
H1 : eq (S U A Y) (Fmult (Fdiv (Py A U V) (Py U V U)) (S U V Y))
HA1 : on_foot A1 A U V
A1 : Point
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
r : F
A,B,U,V,Y : Point
*****
eq (Fmult (Fdiv (Py B U V) (Py U V U)) (S U V Y)) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py B U V))
+++++
IsoleVar (S U V Y) H5.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.
use H.
assert (parallel A1 A Y U).
apply (perp_perp_para A1 A U V Y U);auto with Geom.
assert (parallel Y U A1 A) by auto with Geom.
unfold parallel, S4 in H7.
uniformize_signed_areas.
IsoleVar (S Y A1 U) H7.
rewrite H7.
ring.
assert ( S U A1 Y / S U V Y = U**A1 / U**V).
rewrite (A6 U A1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HA1.
auto with Geom.
assert (U**A1 / U**V = Py A1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HA1;auto with Geom.
assert (Py A1 U V = Py A U V).
unfold on_foot in *.
use HA1.
unfold perp, Py4 in H4.
IsoleVar (Py A1 U V) H4.
rewrite H4.
ring.
rewrite H2 in H1.
rewrite H3 in H1.
rewrite H4 in H1.
IsoleVar (S U A Y) H1.
rewrite H1.
field.
unfold on_perp_d in *.
intuition.
auto with Geom.
assert (S U B Y = Py B U V / Py U V U * S U V Y).
elim (proj_ex B U V).
intros B1 HB1.
2:unfold on_perp_d in H;intuition.
assert (S U B Y / S U V Y = S U B1 Y / S U V Y).
replace (S U B Y) with (S U B1 Y).
auto.
unfold on_foot in *.
use HB1.
unfold on_perp_d in *.
use H.
assert (parallel B1 B Y U).
apply (perp_perp_para B1 B U V Y U);auto with Geom.
assert (parallel Y U B1 B) by auto with Geom.
unfold parallel, S4 in H8.
uniformize_signed_areas.
IsoleVar (S Y B1 U) H8.
rewrite H8.
ring.
assert ( S U B1 Y / S U V Y = U**B1 / U**V).
rewrite (A6 U B1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HB1.
auto with Geom.
assert (U**B1 / U**V = Py B1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HB1;auto with Geom.
assert (Py B1 U V = Py B U V).
unfold on_foot in *.
use HB1.
unfold perp, Py4 in H5.
IsoleVar (Py B1 U V) H5.
rewrite H5.
ring.
rewrite H3 in H2.
rewrite H4 in H2.
rewrite H5 in H2.
IsoleVar (S U B Y) H2.
rewrite H2.
field.
unfold on_perp_d in *.
intuition.
auto with Geom.
assert (S U A Y = r / (2+2) * Py A U V).
rewrite H1.
unfold on_perp_d in H.
use H.
IsoleVar (S U V Y) H4.
rewrite H4.
field;solve_conds.
auto with Geom.
replace (2+2) with (2*2) by ring.
solve_conds.
assert (S U B Y = r / (2+2) * Py B U V).
unfold on_perp_d in H.
use H.
rewrite H2.
IsoleVar (S U V Y) H5.

*****
H5 : eq (S U V Y)\n (Fdiv (Fmult r (Py U V U)) (Fplus (Fplus F1 F1) (Fplus F1 F1)))
H : not (eq (Fplus (Fplus F1 F1) (Fplus F1 F1)) F0)
H8 : not (eq r F0)
H6 : perp Y U U V
H4 : not (eq U V)
H3 : eq (S U A Y)\n (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py A U V))
H2 : eq (S U B Y) (Fmult (Fdiv (Py B U V) (Py U V U)) (S U V Y))
H1 : eq (S U A Y) (Fmult (Fdiv (Py A U V) (Py U V U)) (S U V Y))
HA1 : on_foot A1 A U V
A1 : Point
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
r : F
A,B,U,V,Y : Point
*****
eq (Fmult (Fdiv (Py B U V) (Py U V U)) (S U V Y)) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py B U V))
+++++
rewrite H5.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.
use H.
assert (parallel A1 A Y U).
apply (perp_perp_para A1 A U V Y U);auto with Geom.
assert (parallel Y U A1 A) by auto with Geom.
unfold parallel, S4 in H7.
uniformize_signed_areas.
IsoleVar (S Y A1 U) H7.
rewrite H7.
ring.
assert ( S U A1 Y / S U V Y = U**A1 / U**V).
rewrite (A6 U A1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HA1.
auto with Geom.
assert (U**A1 / U**V = Py A1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HA1;auto with Geom.
assert (Py A1 U V = Py A U V).
unfold on_foot in *.
use HA1.
unfold perp, Py4 in H4.
IsoleVar (Py A1 U V) H4.
rewrite H4.
ring.
rewrite H2 in H1.
rewrite H3 in H1.
rewrite H4 in H1.
IsoleVar (S U A Y) H1.
rewrite H1.
field.
unfold on_perp_d in *.
intuition.
auto with Geom.
assert (S U B Y = Py B U V / Py U V U * S U V Y).
elim (proj_ex B U V).
intros B1 HB1.
2:unfold on_perp_d in H;intuition.
assert (S U B Y / S U V Y = S U B1 Y / S U V Y).
replace (S U B Y) with (S U B1 Y).
auto.
unfold on_foot in *.
use HB1.
unfold on_perp_d in *.
use H.
assert (parallel B1 B Y U).
apply (perp_perp_para B1 B U V Y U);auto with Geom.
assert (parallel Y U B1 B) by auto with Geom.
unfold parallel, S4 in H8.
uniformize_signed_areas.
IsoleVar (S Y B1 U) H8.
rewrite H8.
ring.
assert ( S U B1 Y / S U V Y = U**B1 / U**V).
rewrite (A6 U B1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HB1.
auto with Geom.
assert (U**B1 / U**V = Py B1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HB1;auto with Geom.
assert (Py B1 U V = Py B U V).
unfold on_foot in *.
use HB1.
unfold perp, Py4 in H5.
IsoleVar (Py B1 U V) H5.
rewrite H5.
ring.
rewrite H3 in H2.
rewrite H4 in H2.
rewrite H5 in H2.
IsoleVar (S U B Y) H2.
rewrite H2.
field.
unfold on_perp_d in *.
intuition.
auto with Geom.
assert (S U A Y = r / (2+2) * Py A U V).
rewrite H1.
unfold on_perp_d in H.
use H.
IsoleVar (S U V Y) H4.
rewrite H4.
field;solve_conds.
auto with Geom.
replace (2+2) with (2*2) by ring.
solve_conds.
assert (S U B Y = r / (2+2) * Py B U V).
unfold on_perp_d in H.
use H.
rewrite H2.
IsoleVar (S U V Y) H5.
rewrite H5.

*****
H5 : eq (S U V Y)\n (Fdiv (Fmult r (Py U V U)) (Fplus (Fplus F1 F1) (Fplus F1 F1)))
H : not (eq (Fplus (Fplus F1 F1) (Fplus F1 F1)) F0)
H8 : not (eq r F0)
H6 : perp Y U U V
H4 : not (eq U V)
H3 : eq (S U A Y)\n (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py A U V))
H2 : eq (S U B Y) (Fmult (Fdiv (Py B U V) (Py U V U)) (S U V Y))
H1 : eq (S U A Y) (Fmult (Fdiv (Py A U V) (Py U V U)) (S U V Y))
HA1 : on_foot A1 A U V
A1 : Point
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
r : F
A,B,U,V,Y : Point
*****
eq (Fmult (Fdiv (Py B U V) (Py U V U)) (Fdiv (Fmult r (Py U V U)) (Fplus (Fplus F1 F1) (Fplus F1 F1)))) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py B U V))
+++++
field;solve_conds.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.
use H.
assert (parallel A1 A Y U).
apply (perp_perp_para A1 A U V Y U);auto with Geom.
assert (parallel Y U A1 A) by auto with Geom.
unfold parallel, S4 in H7.
uniformize_signed_areas.
IsoleVar (S Y A1 U) H7.
rewrite H7.
ring.
assert ( S U A1 Y / S U V Y = U**A1 / U**V).
rewrite (A6 U A1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HA1.
auto with Geom.
assert (U**A1 / U**V = Py A1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HA1;auto with Geom.
assert (Py A1 U V = Py A U V).
unfold on_foot in *.
use HA1.
unfold perp, Py4 in H4.
IsoleVar (Py A1 U V) H4.
rewrite H4.
ring.
rewrite H2 in H1.
rewrite H3 in H1.
rewrite H4 in H1.
IsoleVar (S U A Y) H1.
rewrite H1.
field.
unfold on_perp_d in *.
intuition.
auto with Geom.
assert (S U B Y = Py B U V / Py U V U * S U V Y).
elim (proj_ex B U V).
intros B1 HB1.
2:unfold on_perp_d in H;intuition.
assert (S U B Y / S U V Y = S U B1 Y / S U V Y).
replace (S U B Y) with (S U B1 Y).
auto.
unfold on_foot in *.
use HB1.
unfold on_perp_d in *.
use H.
assert (parallel B1 B Y U).
apply (perp_perp_para B1 B U V Y U);auto with Geom.
assert (parallel Y U B1 B) by auto with Geom.
unfold parallel, S4 in H8.
uniformize_signed_areas.
IsoleVar (S Y B1 U) H8.
rewrite H8.
ring.
assert ( S U B1 Y / S U V Y = U**B1 / U**V).
rewrite (A6 U B1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HB1.
auto with Geom.
assert (U**B1 / U**V = Py B1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HB1;auto with Geom.
assert (Py B1 U V = Py B U V).
unfold on_foot in *.
use HB1.
unfold perp, Py4 in H5.
IsoleVar (Py B1 U V) H5.
rewrite H5.
ring.
rewrite H3 in H2.
rewrite H4 in H2.
rewrite H5 in H2.
IsoleVar (S U B Y) H2.
rewrite H2.
field.
unfold on_perp_d in *.
intuition.
auto with Geom.
assert (S U A Y = r / (2+2) * Py A U V).
rewrite H1.
unfold on_perp_d in H.
use H.
IsoleVar (S U V Y) H4.
rewrite H4.
field;solve_conds.
auto with Geom.
replace (2+2) with (2*2) by ring.
solve_conds.
assert (S U B Y = r / (2+2) * Py B U V).
unfold on_perp_d in H.
use H.
rewrite H2.
IsoleVar (S U V Y) H5.
rewrite H5.
field;solve_conds.

*****
H5 : eq (S U V Y)\n (Fdiv (Fmult r (Py U V U)) (Fplus (Fplus F1 F1) (Fplus F1 F1)))
H : not (eq (Fplus (Fplus F1 F1) (Fplus F1 F1)) F0)
H8 : not (eq r F0)
H6 : perp Y U U V
H4 : not (eq U V)
H3 : eq (S U A Y)\n (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py A U V))
H2 : eq (S U B Y) (Fmult (Fdiv (Py B U V) (Py U V U)) (S U V Y))
H1 : eq (S U A Y) (Fmult (Fdiv (Py A U V) (Py U V U)) (S U V Y))
HA1 : on_foot A1 A U V
A1 : Point
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
r : F
A,B,U,V,Y : Point
*****
not (eq (Py U V U) F0)
+++++
auto with Geom.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.
use H.
assert (parallel A1 A Y U).
apply (perp_perp_para A1 A U V Y U);auto with Geom.
assert (parallel Y U A1 A) by auto with Geom.
unfold parallel, S4 in H7.
uniformize_signed_areas.
IsoleVar (S Y A1 U) H7.
rewrite H7.
ring.
assert ( S U A1 Y / S U V Y = U**A1 / U**V).
rewrite (A6 U A1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HA1.
auto with Geom.
assert (U**A1 / U**V = Py A1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HA1;auto with Geom.
assert (Py A1 U V = Py A U V).
unfold on_foot in *.
use HA1.
unfold perp, Py4 in H4.
IsoleVar (Py A1 U V) H4.
rewrite H4.
ring.
rewrite H2 in H1.
rewrite H3 in H1.
rewrite H4 in H1.
IsoleVar (S U A Y) H1.
rewrite H1.
field.
unfold on_perp_d in *.
intuition.
auto with Geom.
assert (S U B Y = Py B U V / Py U V U * S U V Y).
elim (proj_ex B U V).
intros B1 HB1.
2:unfold on_perp_d in H;intuition.
assert (S U B Y / S U V Y = S U B1 Y / S U V Y).
replace (S U B Y) with (S U B1 Y).
auto.
unfold on_foot in *.
use HB1.
unfold on_perp_d in *.
use H.
assert (parallel B1 B Y U).
apply (perp_perp_para B1 B U V Y U);auto with Geom.
assert (parallel Y U B1 B) by auto with Geom.
unfold parallel, S4 in H8.
uniformize_signed_areas.
IsoleVar (S Y B1 U) H8.
rewrite H8.
ring.
assert ( S U B1 Y / S U V Y = U**B1 / U**V).
rewrite (A6 U B1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HB1.
auto with Geom.
assert (U**B1 / U**V = Py B1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HB1;auto with Geom.
assert (Py B1 U V = Py B U V).
unfold on_foot in *.
use HB1.
unfold perp, Py4 in H5.
IsoleVar (Py B1 U V) H5.
rewrite H5.
ring.
rewrite H3 in H2.
rewrite H4 in H2.
rewrite H5 in H2.
IsoleVar (S U B Y) H2.
rewrite H2.
field.
unfold on_perp_d in *.
intuition.
auto with Geom.
assert (S U A Y = r / (2+2) * Py A U V).
rewrite H1.
unfold on_perp_d in H.
use H.
IsoleVar (S U V Y) H4.
rewrite H4.
field;solve_conds.
auto with Geom.
replace (2+2) with (2*2) by ring.
solve_conds.
assert (S U B Y = r / (2+2) * Py B U V).
unfold on_perp_d in H.
use H.
rewrite H2.
IsoleVar (S U V Y) H5.
rewrite H5.
field;solve_conds.
auto with Geom.

*****
H8 : not (eq r F0)
H5 : eq (Fmult r (Py U V U))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S U V Y))
H6 : perp Y U U V
H4 : not (eq U V)
H3 : eq (S U A Y)\n (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py A U V))
H2 : eq (S U B Y) (Fmult (Fdiv (Py B U V) (Py U V U)) (S U V Y))
H1 : eq (S U A Y) (Fmult (Fdiv (Py A U V) (Py U V U)) (S U V Y))
HA1 : on_foot A1 A U V
A1 : Point
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
r : F
A,B,U,V,Y : Point
*****
not (eq (Fplus (Fplus F1 F1) (Fplus F1 F1)) F0)
+++++
replace (2+2) with (2*2) by ring.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.
use H.
assert (parallel A1 A Y U).
apply (perp_perp_para A1 A U V Y U);auto with Geom.
assert (parallel Y U A1 A) by auto with Geom.
unfold parallel, S4 in H7.
uniformize_signed_areas.
IsoleVar (S Y A1 U) H7.
rewrite H7.
ring.
assert ( S U A1 Y / S U V Y = U**A1 / U**V).
rewrite (A6 U A1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HA1.
auto with Geom.
assert (U**A1 / U**V = Py A1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HA1;auto with Geom.
assert (Py A1 U V = Py A U V).
unfold on_foot in *.
use HA1.
unfold perp, Py4 in H4.
IsoleVar (Py A1 U V) H4.
rewrite H4.
ring.
rewrite H2 in H1.
rewrite H3 in H1.
rewrite H4 in H1.
IsoleVar (S U A Y) H1.
rewrite H1.
field.
unfold on_perp_d in *.
intuition.
auto with Geom.
assert (S U B Y = Py B U V / Py U V U * S U V Y).
elim (proj_ex B U V).
intros B1 HB1.
2:unfold on_perp_d in H;intuition.
assert (S U B Y / S U V Y = S U B1 Y / S U V Y).
replace (S U B Y) with (S U B1 Y).
auto.
unfold on_foot in *.
use HB1.
unfold on_perp_d in *.
use H.
assert (parallel B1 B Y U).
apply (perp_perp_para B1 B U V Y U);auto with Geom.
assert (parallel Y U B1 B) by auto with Geom.
unfold parallel, S4 in H8.
uniformize_signed_areas.
IsoleVar (S Y B1 U) H8.
rewrite H8.
ring.
assert ( S U B1 Y / S U V Y = U**B1 / U**V).
rewrite (A6 U B1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HB1.
auto with Geom.
assert (U**B1 / U**V = Py B1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HB1;auto with Geom.
assert (Py B1 U V = Py B U V).
unfold on_foot in *.
use HB1.
unfold perp, Py4 in H5.
IsoleVar (Py B1 U V) H5.
rewrite H5.
ring.
rewrite H3 in H2.
rewrite H4 in H2.
rewrite H5 in H2.
IsoleVar (S U B Y) H2.
rewrite H2.
field.
unfold on_perp_d in *.
intuition.
auto with Geom.
assert (S U A Y = r / (2+2) * Py A U V).
rewrite H1.
unfold on_perp_d in H.
use H.
IsoleVar (S U V Y) H4.
rewrite H4.
field;solve_conds.
auto with Geom.
replace (2+2) with (2*2) by ring.
solve_conds.
assert (S U B Y = r / (2+2) * Py B U V).
unfold on_perp_d in H.
use H.
rewrite H2.
IsoleVar (S U V Y) H5.
rewrite H5.
field;solve_conds.
auto with Geom.
replace (2+2) with (2*2) by ring.

*****
H8 : not (eq r F0)
H5 : eq (Fmult r (Py U V U))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S U V Y))
H6 : perp Y U U V
H4 : not (eq U V)
H3 : eq (S U A Y)\n (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py A U V))
H2 : eq (S U B Y) (Fmult (Fdiv (Py B U V) (Py U V U)) (S U V Y))
H1 : eq (S U A Y) (Fmult (Fdiv (Py A U V) (Py U V U)) (S U V Y))
HA1 : on_foot A1 A U V
A1 : Point
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
r : F
A,B,U,V,Y : Point
*****
not (eq (Fmult (Fplus F1 F1) (Fplus F1 F1)) F0)
+++++
solve_conds.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.
use H.
assert (parallel A1 A Y U).
apply (perp_perp_para A1 A U V Y U);auto with Geom.
assert (parallel Y U A1 A) by auto with Geom.
unfold parallel, S4 in H7.
uniformize_signed_areas.
IsoleVar (S Y A1 U) H7.
rewrite H7.
ring.
assert ( S U A1 Y / S U V Y = U**A1 / U**V).
rewrite (A6 U A1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HA1.
auto with Geom.
assert (U**A1 / U**V = Py A1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HA1;auto with Geom.
assert (Py A1 U V = Py A U V).
unfold on_foot in *.
use HA1.
unfold perp, Py4 in H4.
IsoleVar (Py A1 U V) H4.
rewrite H4.
ring.
rewrite H2 in H1.
rewrite H3 in H1.
rewrite H4 in H1.
IsoleVar (S U A Y) H1.
rewrite H1.
field.
unfold on_perp_d in *.
intuition.
auto with Geom.
assert (S U B Y = Py B U V / Py U V U * S U V Y).
elim (proj_ex B U V).
intros B1 HB1.
2:unfold on_perp_d in H;intuition.
assert (S U B Y / S U V Y = S U B1 Y / S U V Y).
replace (S U B Y) with (S U B1 Y).
auto.
unfold on_foot in *.
use HB1.
unfold on_perp_d in *.
use H.
assert (parallel B1 B Y U).
apply (perp_perp_para B1 B U V Y U);auto with Geom.
assert (parallel Y U B1 B) by auto with Geom.
unfold parallel, S4 in H8.
uniformize_signed_areas.
IsoleVar (S Y B1 U) H8.
rewrite H8.
ring.
assert ( S U B1 Y / S U V Y = U**B1 / U**V).
rewrite (A6 U B1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HB1.
auto with Geom.
assert (U**B1 / U**V = Py B1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HB1;auto with Geom.
assert (Py B1 U V = Py B U V).
unfold on_foot in *.
use HB1.
unfold perp, Py4 in H5.
IsoleVar (Py B1 U V) H5.
rewrite H5.
ring.
rewrite H3 in H2.
rewrite H4 in H2.
rewrite H5 in H2.
IsoleVar (S U B Y) H2.
rewrite H2.
field.
unfold on_perp_d in *.
intuition.
auto with Geom.
assert (S U A Y = r / (2+2) * Py A U V).
rewrite H1.
unfold on_perp_d in H.
use H.
IsoleVar (S U V Y) H4.
rewrite H4.
field;solve_conds.
auto with Geom.
replace (2+2) with (2*2) by ring.
solve_conds.
assert (S U B Y = r / (2+2) * Py B U V).
unfold on_perp_d in H.
use H.
rewrite H2.
IsoleVar (S U V Y) H5.
rewrite H5.
field;solve_conds.
auto with Geom.
replace (2+2) with (2*2) by ring.
solve_conds.

*****
H4 : eq (S U B Y)\n (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py B U V))
H3 : eq (S U A Y)\n (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py A U V))
H2 : eq (S U B Y) (Fmult (Fdiv (Py B U V) (Py U V U)) (S U V Y))
H1 : eq (S U A Y) (Fmult (Fdiv (Py A U V) (Py U V U)) (S U V Y))
HA1 : on_foot A1 A U V
A1 : Point
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
H : on_perp_d Y U V r
r : F
A,B,U,V,Y : Point
*****
eq (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y)) (Fminus (S A B U) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py4 U A V B)))
+++++
replace (S A U Y) with (- S U A Y) by auto with Geom.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.
use H.
assert (parallel A1 A Y U).
apply (perp_perp_para A1 A U V Y U);auto with Geom.
assert (parallel Y U A1 A) by auto with Geom.
unfold parallel, S4 in H7.
uniformize_signed_areas.
IsoleVar (S Y A1 U) H7.
rewrite H7.
ring.
assert ( S U A1 Y / S U V Y = U**A1 / U**V).
rewrite (A6 U A1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HA1.
auto with Geom.
assert (U**A1 / U**V = Py A1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HA1;auto with Geom.
assert (Py A1 U V = Py A U V).
unfold on_foot in *.
use HA1.
unfold perp, Py4 in H4.
IsoleVar (Py A1 U V) H4.
rewrite H4.
ring.
rewrite H2 in H1.
rewrite H3 in H1.
rewrite H4 in H1.
IsoleVar (S U A Y) H1.
rewrite H1.
field.
unfold on_perp_d in *.
intuition.
auto with Geom.
assert (S U B Y = Py B U V / Py U V U * S U V Y).
elim (proj_ex B U V).
intros B1 HB1.
2:unfold on_perp_d in H;intuition.
assert (S U B Y / S U V Y = S U B1 Y / S U V Y).
replace (S U B Y) with (S U B1 Y).
auto.
unfold on_foot in *.
use HB1.
unfold on_perp_d in *.
use H.
assert (parallel B1 B Y U).
apply (perp_perp_para B1 B U V Y U);auto with Geom.
assert (parallel Y U B1 B) by auto with Geom.
unfold parallel, S4 in H8.
uniformize_signed_areas.
IsoleVar (S Y B1 U) H8.
rewrite H8.
ring.
assert ( S U B1 Y / S U V Y = U**B1 / U**V).
rewrite (A6 U B1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HB1.
auto with Geom.
assert (U**B1 / U**V = Py B1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HB1;auto with Geom.
assert (Py B1 U V = Py B U V).
unfold on_foot in *.
use HB1.
unfold perp, Py4 in H5.
IsoleVar (Py B1 U V) H5.
rewrite H5.
ring.
rewrite H3 in H2.
rewrite H4 in H2.
rewrite H5 in H2.
IsoleVar (S U B Y) H2.
rewrite H2.
field.
unfold on_perp_d in *.
intuition.
auto with Geom.
assert (S U A Y = r / (2+2) * Py A U V).
rewrite H1.
unfold on_perp_d in H.
use H.
IsoleVar (S U V Y) H4.
rewrite H4.
field;solve_conds.
auto with Geom.
replace (2+2) with (2*2) by ring.
solve_conds.
assert (S U B Y = r / (2+2) * Py B U V).
unfold on_perp_d in H.
use H.
rewrite H2.
IsoleVar (S U V Y) H5.
rewrite H5.
field;solve_conds.
auto with Geom.
replace (2+2) with (2*2) by ring.
solve_conds.
replace (S A U Y) with (- S U A Y) by auto with Geom.

*****
H4 : eq (S U B Y)\n (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py B U V))
H3 : eq (S U A Y)\n (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py A U V))
H2 : eq (S U B Y) (Fmult (Fdiv (Py B U V) (Py U V U)) (S U V Y))
H1 : eq (S U A Y) (Fmult (Fdiv (Py A U V) (Py U V U)) (S U V Y))
HA1 : on_foot A1 A U V
A1 : Point
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
H : on_perp_d Y U V r
r : F
A,B,U,V,Y : Point
*****
eq (Fplus (Fplus (S A B U) (Fopp (S U A Y))) (S U B Y)) (Fminus (S A B U) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py4 U A V B)))
+++++
rewrite H3, H4.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.
use H.
assert (parallel A1 A Y U).
apply (perp_perp_para A1 A U V Y U);auto with Geom.
assert (parallel Y U A1 A) by auto with Geom.
unfold parallel, S4 in H7.
uniformize_signed_areas.
IsoleVar (S Y A1 U) H7.
rewrite H7.
ring.
assert ( S U A1 Y / S U V Y = U**A1 / U**V).
rewrite (A6 U A1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HA1.
auto with Geom.
assert (U**A1 / U**V = Py A1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HA1;auto with Geom.
assert (Py A1 U V = Py A U V).
unfold on_foot in *.
use HA1.
unfold perp, Py4 in H4.
IsoleVar (Py A1 U V) H4.
rewrite H4.
ring.
rewrite H2 in H1.
rewrite H3 in H1.
rewrite H4 in H1.
IsoleVar (S U A Y) H1.
rewrite H1.
field.
unfold on_perp_d in *.
intuition.
auto with Geom.
assert (S U B Y = Py B U V / Py U V U * S U V Y).
elim (proj_ex B U V).
intros B1 HB1.
2:unfold on_perp_d in H;intuition.
assert (S U B Y / S U V Y = S U B1 Y / S U V Y).
replace (S U B Y) with (S U B1 Y).
auto.
unfold on_foot in *.
use HB1.
unfold on_perp_d in *.
use H.
assert (parallel B1 B Y U).
apply (perp_perp_para B1 B U V Y U);auto with Geom.
assert (parallel Y U B1 B) by auto with Geom.
unfold parallel, S4 in H8.
uniformize_signed_areas.
IsoleVar (S Y B1 U) H8.
rewrite H8.
ring.
assert ( S U B1 Y / S U V Y = U**B1 / U**V).
rewrite (A6 U B1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HB1.
auto with Geom.
assert (U**B1 / U**V = Py B1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HB1;auto with Geom.
assert (Py B1 U V = Py B U V).
unfold on_foot in *.
use HB1.
unfold perp, Py4 in H5.
IsoleVar (Py B1 U V) H5.
rewrite H5.
ring.
rewrite H3 in H2.
rewrite H4 in H2.
rewrite H5 in H2.
IsoleVar (S U B Y) H2.
rewrite H2.
field.
unfold on_perp_d in *.
intuition.
auto with Geom.
assert (S U A Y = r / (2+2) * Py A U V).
rewrite H1.
unfold on_perp_d in H.
use H.
IsoleVar (S U V Y) H4.
rewrite H4.
field;solve_conds.
auto with Geom.
replace (2+2) with (2*2) by ring.
solve_conds.
assert (S U B Y = r / (2+2) * Py B U V).
unfold on_perp_d in H.
use H.
rewrite H2.
IsoleVar (S U V Y) H5.
rewrite H5.
field;solve_conds.
auto with Geom.
replace (2+2) with (2*2) by ring.
solve_conds.
replace (S A U Y) with (- S U A Y) by auto with Geom.
rewrite H3, H4.

*****
H4 : eq (S U B Y)\n (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py B U V))
H3 : eq (S U A Y)\n (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py A U V))
H2 : eq (S U B Y) (Fmult (Fdiv (Py B U V) (Py U V U)) (S U V Y))
H1 : eq (S U A Y) (Fmult (Fdiv (Py A U V) (Py U V U)) (S U V Y))
HA1 : on_foot A1 A U V
A1 : Point
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
H : on_perp_d Y U V r
r : F
A,B,U,V,Y : Point
*****
eq (Fplus (Fplus (S A B U) (Fopp (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py A U V)))) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py B U V))) (Fminus (S A B U) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py4 U A V B)))
+++++
replace (Py4 U A V B) with( Py A U V - Py B U V).
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.
use H.
assert (parallel A1 A Y U).
apply (perp_perp_para A1 A U V Y U);auto with Geom.
assert (parallel Y U A1 A) by auto with Geom.
unfold parallel, S4 in H7.
uniformize_signed_areas.
IsoleVar (S Y A1 U) H7.
rewrite H7.
ring.
assert ( S U A1 Y / S U V Y = U**A1 / U**V).
rewrite (A6 U A1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HA1.
auto with Geom.
assert (U**A1 / U**V = Py A1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HA1;auto with Geom.
assert (Py A1 U V = Py A U V).
unfold on_foot in *.
use HA1.
unfold perp, Py4 in H4.
IsoleVar (Py A1 U V) H4.
rewrite H4.
ring.
rewrite H2 in H1.
rewrite H3 in H1.
rewrite H4 in H1.
IsoleVar (S U A Y) H1.
rewrite H1.
field.
unfold on_perp_d in *.
intuition.
auto with Geom.
assert (S U B Y = Py B U V / Py U V U * S U V Y).
elim (proj_ex B U V).
intros B1 HB1.
2:unfold on_perp_d in H;intuition.
assert (S U B Y / S U V Y = S U B1 Y / S U V Y).
replace (S U B Y) with (S U B1 Y).
auto.
unfold on_foot in *.
use HB1.
unfold on_perp_d in *.
use H.
assert (parallel B1 B Y U).
apply (perp_perp_para B1 B U V Y U);auto with Geom.
assert (parallel Y U B1 B) by auto with Geom.
unfold parallel, S4 in H8.
uniformize_signed_areas.
IsoleVar (S Y B1 U) H8.
rewrite H8.
ring.
assert ( S U B1 Y / S U V Y = U**B1 / U**V).
rewrite (A6 U B1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HB1.
auto with Geom.
assert (U**B1 / U**V = Py B1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HB1;auto with Geom.
assert (Py B1 U V = Py B U V).
unfold on_foot in *.
use HB1.
unfold perp, Py4 in H5.
IsoleVar (Py B1 U V) H5.
rewrite H5.
ring.
rewrite H3 in H2.
rewrite H4 in H2.
rewrite H5 in H2.
IsoleVar (S U B Y) H2.
rewrite H2.
field.
unfold on_perp_d in *.
intuition.
auto with Geom.
assert (S U A Y = r / (2+2) * Py A U V).
rewrite H1.
unfold on_perp_d in H.
use H.
IsoleVar (S U V Y) H4.
rewrite H4.
field;solve_conds.
auto with Geom.
replace (2+2) with (2*2) by ring.
solve_conds.
assert (S U B Y = r / (2+2) * Py B U V).
unfold on_perp_d in H.
use H.
rewrite H2.
IsoleVar (S U V Y) H5.
rewrite H5.
field;solve_conds.
auto with Geom.
replace (2+2) with (2*2) by ring.
solve_conds.
replace (S A U Y) with (- S U A Y) by auto with Geom.
rewrite H3, H4.
replace (Py4 U A V B) with( Py A U V - Py B U V).

*****
H4 : eq (S U B Y)\n (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py B U V))
H3 : eq (S U A Y)\n (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py A U V))
H2 : eq (S U B Y) (Fmult (Fdiv (Py B U V) (Py U V U)) (S U V Y))
H1 : eq (S U A Y) (Fmult (Fdiv (Py A U V) (Py U V U)) (S U V Y))
HA1 : on_foot A1 A U V
A1 : Point
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
H : on_perp_d Y U V r
r : F
A,B,U,V,Y : Point
*****
eq (Fplus (Fplus (S A B U) (Fopp (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py A U V)))) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py B U V))) (Fminus (S A B U) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Fminus (Py A U V) (Py B U V))))
+++++
ring.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.
use H.
assert (parallel A1 A Y U).
apply (perp_perp_para A1 A U V Y U);auto with Geom.
assert (parallel Y U A1 A) by auto with Geom.
unfold parallel, S4 in H7.
uniformize_signed_areas.
IsoleVar (S Y A1 U) H7.
rewrite H7.
ring.
assert ( S U A1 Y / S U V Y = U**A1 / U**V).
rewrite (A6 U A1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HA1.
auto with Geom.
assert (U**A1 / U**V = Py A1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HA1;auto with Geom.
assert (Py A1 U V = Py A U V).
unfold on_foot in *.
use HA1.
unfold perp, Py4 in H4.
IsoleVar (Py A1 U V) H4.
rewrite H4.
ring.
rewrite H2 in H1.
rewrite H3 in H1.
rewrite H4 in H1.
IsoleVar (S U A Y) H1.
rewrite H1.
field.
unfold on_perp_d in *.
intuition.
auto with Geom.
assert (S U B Y = Py B U V / Py U V U * S U V Y).
elim (proj_ex B U V).
intros B1 HB1.
2:unfold on_perp_d in H;intuition.
assert (S U B Y / S U V Y = S U B1 Y / S U V Y).
replace (S U B Y) with (S U B1 Y).
auto.
unfold on_foot in *.
use HB1.
unfold on_perp_d in *.
use H.
assert (parallel B1 B Y U).
apply (perp_perp_para B1 B U V Y U);auto with Geom.
assert (parallel Y U B1 B) by auto with Geom.
unfold parallel, S4 in H8.
uniformize_signed_areas.
IsoleVar (S Y B1 U) H8.
rewrite H8.
ring.
assert ( S U B1 Y / S U V Y = U**B1 / U**V).
rewrite (A6 U B1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HB1.
auto with Geom.
assert (U**B1 / U**V = Py B1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HB1;auto with Geom.
assert (Py B1 U V = Py B U V).
unfold on_foot in *.
use HB1.
unfold perp, Py4 in H5.
IsoleVar (Py B1 U V) H5.
rewrite H5.
ring.
rewrite H3 in H2.
rewrite H4 in H2.
rewrite H5 in H2.
IsoleVar (S U B Y) H2.
rewrite H2.
field.
unfold on_perp_d in *.
intuition.
auto with Geom.
assert (S U A Y = r / (2+2) * Py A U V).
rewrite H1.
unfold on_perp_d in H.
use H.
IsoleVar (S U V Y) H4.
rewrite H4.
field;solve_conds.
auto with Geom.
replace (2+2) with (2*2) by ring.
solve_conds.
assert (S U B Y = r / (2+2) * Py B U V).
unfold on_perp_d in H.
use H.
rewrite H2.
IsoleVar (S U V Y) H5.
rewrite H5.
field;solve_conds.
auto with Geom.
replace (2+2) with (2*2) by ring.
solve_conds.
replace (S A U Y) with (- S U A Y) by auto with Geom.
rewrite H3, H4.
replace (Py4 U A V B) with( Py A U V - Py B U V).
ring.

*****
H4 : eq (S U B Y)\n (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py B U V))
H3 : eq (S U A Y)\n (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py A U V))
H2 : eq (S U B Y) (Fmult (Fdiv (Py B U V) (Py U V U)) (S U V Y))
H1 : eq (S U A Y) (Fmult (Fdiv (Py A U V) (Py U V U)) (S U V Y))
HA1 : on_foot A1 A U V
A1 : Point
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
H : on_perp_d Y U V r
r : F
A,B,U,V,Y : Point
*****
eq (Fminus (Py A U V) (Py B U V)) (Py4 U A V B)
+++++
symmetry.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.
use H.
assert (parallel A1 A Y U).
apply (perp_perp_para A1 A U V Y U);auto with Geom.
assert (parallel Y U A1 A) by auto with Geom.
unfold parallel, S4 in H7.
uniformize_signed_areas.
IsoleVar (S Y A1 U) H7.
rewrite H7.
ring.
assert ( S U A1 Y / S U V Y = U**A1 / U**V).
rewrite (A6 U A1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HA1.
auto with Geom.
assert (U**A1 / U**V = Py A1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HA1;auto with Geom.
assert (Py A1 U V = Py A U V).
unfold on_foot in *.
use HA1.
unfold perp, Py4 in H4.
IsoleVar (Py A1 U V) H4.
rewrite H4.
ring.
rewrite H2 in H1.
rewrite H3 in H1.
rewrite H4 in H1.
IsoleVar (S U A Y) H1.
rewrite H1.
field.
unfold on_perp_d in *.
intuition.
auto with Geom.
assert (S U B Y = Py B U V / Py U V U * S U V Y).
elim (proj_ex B U V).
intros B1 HB1.
2:unfold on_perp_d in H;intuition.
assert (S U B Y / S U V Y = S U B1 Y / S U V Y).
replace (S U B Y) with (S U B1 Y).
auto.
unfold on_foot in *.
use HB1.
unfold on_perp_d in *.
use H.
assert (parallel B1 B Y U).
apply (perp_perp_para B1 B U V Y U);auto with Geom.
assert (parallel Y U B1 B) by auto with Geom.
unfold parallel, S4 in H8.
uniformize_signed_areas.
IsoleVar (S Y B1 U) H8.
rewrite H8.
ring.
assert ( S U B1 Y / S U V Y = U**B1 / U**V).
rewrite (A6 U B1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HB1.
auto with Geom.
assert (U**B1 / U**V = Py B1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HB1;auto with Geom.
assert (Py B1 U V = Py B U V).
unfold on_foot in *.
use HB1.
unfold perp, Py4 in H5.
IsoleVar (Py B1 U V) H5.
rewrite H5.
ring.
rewrite H3 in H2.
rewrite H4 in H2.
rewrite H5 in H2.
IsoleVar (S U B Y) H2.
rewrite H2.
field.
unfold on_perp_d in *.
intuition.
auto with Geom.
assert (S U A Y = r / (2+2) * Py A U V).
rewrite H1.
unfold on_perp_d in H.
use H.
IsoleVar (S U V Y) H4.
rewrite H4.
field;solve_conds.
auto with Geom.
replace (2+2) with (2*2) by ring.
solve_conds.
assert (S U B Y = r / (2+2) * Py B U V).
unfold on_perp_d in H.
use H.
rewrite H2.
IsoleVar (S U V Y) H5.
rewrite H5.
field;solve_conds.
auto with Geom.
replace (2+2) with (2*2) by ring.
solve_conds.
replace (S A U Y) with (- S U A Y) by auto with Geom.
rewrite H3, H4.
replace (Py4 U A V B) with( Py A U V - Py B U V).
ring.
symmetry.

*****
H4 : eq (S U B Y)\n (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py B U V))
H3 : eq (S U A Y)\n (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py A U V))
H2 : eq (S U B Y) (Fmult (Fdiv (Py B U V) (Py U V U)) (S U V Y))
H1 : eq (S U A Y) (Fmult (Fdiv (Py A U V) (Py U V U)) (S U V Y))
HA1 : on_foot A1 A U V
A1 : Point
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
H : on_perp_d Y U V r
r : F
A,B,U,V,Y : Point
*****
eq (Py4 U A V B) (Fminus (Py A U V) (Py B U V))
+++++
replace ( Py A U V - Py B U V) with (Py4 A U B V) by auto.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.
use H.
assert (parallel A1 A Y U).
apply (perp_perp_para A1 A U V Y U);auto with Geom.
assert (parallel Y U A1 A) by auto with Geom.
unfold parallel, S4 in H7.
uniformize_signed_areas.
IsoleVar (S Y A1 U) H7.
rewrite H7.
ring.
assert ( S U A1 Y / S U V Y = U**A1 / U**V).
rewrite (A6 U A1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HA1.
auto with Geom.
assert (U**A1 / U**V = Py A1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HA1;auto with Geom.
assert (Py A1 U V = Py A U V).
unfold on_foot in *.
use HA1.
unfold perp, Py4 in H4.
IsoleVar (Py A1 U V) H4.
rewrite H4.
ring.
rewrite H2 in H1.
rewrite H3 in H1.
rewrite H4 in H1.
IsoleVar (S U A Y) H1.
rewrite H1.
field.
unfold on_perp_d in *.
intuition.
auto with Geom.
assert (S U B Y = Py B U V / Py U V U * S U V Y).
elim (proj_ex B U V).
intros B1 HB1.
2:unfold on_perp_d in H;intuition.
assert (S U B Y / S U V Y = S U B1 Y / S U V Y).
replace (S U B Y) with (S U B1 Y).
auto.
unfold on_foot in *.
use HB1.
unfold on_perp_d in *.
use H.
assert (parallel B1 B Y U).
apply (perp_perp_para B1 B U V Y U);auto with Geom.
assert (parallel Y U B1 B) by auto with Geom.
unfold parallel, S4 in H8.
uniformize_signed_areas.
IsoleVar (S Y B1 U) H8.
rewrite H8.
ring.
assert ( S U B1 Y / S U V Y = U**B1 / U**V).
rewrite (A6 U B1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HB1.
auto with Geom.
assert (U**B1 / U**V = Py B1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HB1;auto with Geom.
assert (Py B1 U V = Py B U V).
unfold on_foot in *.
use HB1.
unfold perp, Py4 in H5.
IsoleVar (Py B1 U V) H5.
rewrite H5.
ring.
rewrite H3 in H2.
rewrite H4 in H2.
rewrite H5 in H2.
IsoleVar (S U B Y) H2.
rewrite H2.
field.
unfold on_perp_d in *.
intuition.
auto with Geom.
assert (S U A Y = r / (2+2) * Py A U V).
rewrite H1.
unfold on_perp_d in H.
use H.
IsoleVar (S U V Y) H4.
rewrite H4.
field;solve_conds.
auto with Geom.
replace (2+2) with (2*2) by ring.
solve_conds.
assert (S U B Y = r / (2+2) * Py B U V).
unfold on_perp_d in H.
use H.
rewrite H2.
IsoleVar (S U V Y) H5.
rewrite H5.
field;solve_conds.
auto with Geom.
replace (2+2) with (2*2) by ring.
solve_conds.
replace (S A U Y) with (- S U A Y) by auto with Geom.
rewrite H3, H4.
replace (Py4 U A V B) with( Py A U V - Py B U V).
ring.
symmetry.
replace ( Py A U V - Py B U V) with (Py4 A U B V) by auto.

*****
H4 : eq (S U B Y)\n (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py B U V))
H3 : eq (S U A Y)\n (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py A U V))
H2 : eq (S U B Y) (Fmult (Fdiv (Py B U V) (Py U V U)) (S U V Y))
H1 : eq (S U A Y) (Fmult (Fdiv (Py A U V) (Py U V U)) (S U V Y))
HA1 : on_foot A1 A U V
A1 : Point
Hyuv : not (Col Y U V)
H0 : eq (S A B Y) (Fplus (Fplus (S A B U) (S A U Y)) (S U B Y))
H : on_perp_d Y U V r
r : F
A,B,U,V,Y : Point
*****
eq (Py4 U A V B) (Py4 A U B V)
+++++
auto with Geom.
-----
Theorem elim_area_on_perp_d : forall A B U V Y : Point, forall r: F, on_perp_d Y U V r -> S A B Y = S A B U - r / (2+2) * Py4 U A V B.
Proof.
intros A B U V Y r.
intros.
assert (S A B Y = S A B U + S A U Y + S U B Y) by auto with Geom.
rewrite H0.
assert (Hyuv :~ Col Y U V).
unfold on_perp_d in H.
use H.
intro.
assert (Col U V Y) by auto with Geom.
rewrite H4 in H2.
basic_simpl.
IsoleVar r H2.
replace (0 / Py U V U) with 0 in H2.
2:field;auto.
2:auto with Geom.
intuition.
elim (proj_ex A U V).
intros A1 HA1.
2:unfold on_perp_d in H;intuition.
assert (S U A Y = Py A U V / Py U V U * S U V Y).
assert (S U A Y / S U V Y = S U A1 Y / S U V Y).
replace (S U A Y) with (S U A1 Y).
auto.
unfold on_foot in *.
use HA1.
unfold on_perp_d in *.
use H.
assert (parallel A1 A Y U).
apply (perp_perp_para A1 A U V Y U);auto with Geom.
assert (parallel Y U A1 A) by auto with Geom.
unfold parallel, S4 in H7.
uniformize_signed_areas.
IsoleVar (S Y A1 U) H7.
rewrite H7.
ring.
assert ( S U A1 Y / S U V Y = U**A1 / U**V).
rewrite (A6 U A1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HA1.
auto with Geom.
assert (U**A1 / U**V = Py A1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HA1;auto with Geom.
assert (Py A1 U V = Py A U V).
unfold on_foot in *.
use HA1.
unfold perp, Py4 in H4.
IsoleVar (Py A1 U V) H4.
rewrite H4.
ring.
rewrite H2 in H1.
rewrite H3 in H1.
rewrite H4 in H1.
IsoleVar (S U A Y) H1.
rewrite H1.
field.
unfold on_perp_d in *.
intuition.
auto with Geom.
assert (S U B Y = Py B U V / Py U V U * S U V Y).
elim (proj_ex B U V).
intros B1 HB1.
2:unfold on_perp_d in H;intuition.
assert (S U B Y / S U V Y = S U B1 Y / S U V Y).
replace (S U B Y) with (S U B1 Y).
auto.
unfold on_foot in *.
use HB1.
unfold on_perp_d in *.
use H.
assert (parallel B1 B Y U).
apply (perp_perp_para B1 B U V Y U);auto with Geom.
assert (parallel Y U B1 B) by auto with Geom.
unfold parallel, S4 in H8.
uniformize_signed_areas.
IsoleVar (S Y B1 U) H8.
rewrite H8.
ring.
assert ( S U B1 Y / S U V Y = U**B1 / U**V).
rewrite (A6 U B1 V Y).
uniformize_signed_areas.
auto with Geom.
unfold on_perp_d in H.
use H;auto.
unfold on_perp_d in H.
use H.
auto.
unfold on_foot in *.
use HB1.
auto with Geom.
assert (U**B1 / U**V = Py B1 U V / Py U V U).
rewrite col_pyth.
unfold Py.
uniformize_dir_seg.
basic_simpl.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U**V*U**V) by ring.
field;solve_conds;unfold on_perp_d in *;auto with Geom.
unfold on_perp_d in *;use H;auto with Geom.
unfold on_foot in *;use HB1;auto with Geom.
assert (Py B1 U V = Py B U V).
unfold on_foot in *.
use HB1.
unfold perp, Py4 in H5.
IsoleVar (Py B1 U V) H5.
rewrite H5.
ring.
rewrite H3 in H2.
rewrite H4 in H2.
rewrite H5 in H2.
IsoleVar (S U B Y) H2.
rewrite H2.
field.
unfold on_perp_d in *.
intuition.
auto with Geom.
assert (S U A Y = r / (2+2) * Py A U V).
rewrite H1.
unfold on_perp_d in H.
use H.
IsoleVar (S U V Y) H4.
rewrite H4.
field;solve_conds.
auto with Geom.
replace (2+2) with (2*2) by ring.
solve_conds.
assert (S U B Y = r / (2+2) * Py B U V).
unfold on_perp_d in H.
use H.
rewrite H2.
IsoleVar (S U V Y) H5.
rewrite H5.
field;solve_conds.
auto with Geom.
replace (2+2) with (2*2) by ring.
solve_conds.
replace (S A U Y) with (- S U A Y) by auto with Geom.
rewrite H3, H4.
replace (Py4 U A V B) with( Py A U V - Py B U V).
ring.
symmetry.
replace ( Py A U V - Py B U V) with (Py4 A U B V) by auto.
auto with Geom.

*****

*****

+++++
Qed.
-----
Theorem elim_py_on_perp_d_left_right :\nforall B U V Y : Point, forall r: F,\non_perp_d Y U V r ->\nPy Y B Y = Py U B U - (2 + 2) * r * S U V B -\n(2 + 2) * r * (0 - r / (2 + 2) * Py U V U + S U V B).
-----
Theorem elim_py_on_perp_d_left_right : forall B U V Y : Point, forall r: F, on_perp_d Y U V r -> Py Y B Y = Py U B U - (2 + 2) * r * S U V B - (2 + 2) * r * (0 - r / (2 + 2) * Py U V U + S U V B).

*****

*****
forall (B U V Y : Point) (r : F) (_ : on_perp_d Y U V r), eq (Py Y B Y) (Fminus (Fminus (Py U B U) (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) r) (S U V B))) (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) r) (Fplus (Fminus F0 (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py U V U))) (S U V B))))
+++++
Proof.
-----
Theorem elim_py_on_perp_d_left_right : forall B U V Y : Point, forall r: F, on_perp_d Y U V r -> Py Y B Y = Py U B U - (2 + 2) * r * S U V B - (2 + 2) * r * (0 - r / (2 + 2) * Py U V U + S U V B).
Proof.

*****

*****
forall (B U V Y : Point) (r : F) (_ : on_perp_d Y U V r), eq (Py Y B Y) (Fminus (Fminus (Py U B U) (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) r) (S U V B))) (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) r) (Fplus (Fminus F0 (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py U V U))) (S U V B))))
+++++
intros.
-----
Theorem elim_py_on_perp_d_left_right : forall B U V Y : Point, forall r: F, on_perp_d Y U V r -> Py Y B Y = Py U B U - (2 + 2) * r * S U V B - (2 + 2) * r * (0 - r / (2 + 2) * Py U V U + S U V B).
Proof.
intros.

*****
H : on_perp_d Y U V r
r : F
B,U,V,Y : Point
*****
eq (Py Y B Y) (Fminus (Fminus (Py U B U) (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) r) (S U V B))) (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) r) (Fplus (Fminus F0 (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py U V U))) (S U V B))))
+++++
rewrite (elim_py_on_perp_d_right Y B U V Y r H).
-----
Theorem elim_py_on_perp_d_left_right : forall B U V Y : Point, forall r: F, on_perp_d Y U V r -> Py Y B Y = Py U B U - (2 + 2) * r * S U V B - (2 + 2) * r * (0 - r / (2 + 2) * Py U V U + S U V B).
Proof.
intros.
rewrite (elim_py_on_perp_d_right Y B U V Y r H).

*****
H : on_perp_d Y U V r
r : F
B,U,V,Y : Point
*****
eq (Fminus (Py Y B U) (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) r) (S4 U Y V B))) (Fminus (Fminus (Py U B U) (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) r) (S U V B))) (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) r) (Fplus (Fminus F0 (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py U V U))) (S U V B))))
+++++
replace (Py Y B U) with (Py U B Y) by auto with Geom.
-----
Theorem elim_py_on_perp_d_left_right : forall B U V Y : Point, forall r: F, on_perp_d Y U V r -> Py Y B Y = Py U B U - (2 + 2) * r * S U V B - (2 + 2) * r * (0 - r / (2 + 2) * Py U V U + S U V B).
Proof.
intros.
rewrite (elim_py_on_perp_d_right Y B U V Y r H).
replace (Py Y B U) with (Py U B Y) by auto with Geom.

*****
H : on_perp_d Y U V r
r : F
B,U,V,Y : Point
*****
eq (Fminus (Py U B Y) (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) r) (S4 U Y V B))) (Fminus (Fminus (Py U B U) (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) r) (S U V B))) (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) r) (Fplus (Fminus F0 (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py U V U))) (S U V B))))
+++++
rewrite (elim_py_on_perp_d_right U B U V Y r H).
-----
Theorem elim_py_on_perp_d_left_right : forall B U V Y : Point, forall r: F, on_perp_d Y U V r -> Py Y B Y = Py U B U - (2 + 2) * r * S U V B - (2 + 2) * r * (0 - r / (2 + 2) * Py U V U + S U V B).
Proof.
intros.
rewrite (elim_py_on_perp_d_right Y B U V Y r H).
replace (Py Y B U) with (Py U B Y) by auto with Geom.
rewrite (elim_py_on_perp_d_right U B U V Y r H).

*****
H : on_perp_d Y U V r
r : F
B,U,V,Y : Point
*****
eq (Fminus (Fminus (Py U B U) (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) r) (S4 U U V B))) (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) r) (S4 U Y V B))) (Fminus (Fminus (Py U B U) (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) r) (S U V B))) (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) r) (Fplus (Fminus F0 (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py U V U))) (S U V B))))
+++++
unfold S4.
-----
Theorem elim_py_on_perp_d_left_right : forall B U V Y : Point, forall r: F, on_perp_d Y U V r -> Py Y B Y = Py U B U - (2 + 2) * r * S U V B - (2 + 2) * r * (0 - r / (2 + 2) * Py U V U + S U V B).
Proof.
intros.
rewrite (elim_py_on_perp_d_right Y B U V Y r H).
replace (Py Y B U) with (Py U B Y) by auto with Geom.
rewrite (elim_py_on_perp_d_right U B U V Y r H).
unfold S4.

*****
H : on_perp_d Y U V r
r : F
B,U,V,Y : Point
*****
eq (Fminus (Fminus (Py U B U) (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) r) (Fplus (S U U V) (S U V B)))) (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) r) (Fplus (S U Y V) (S U V B)))) (Fminus (Fminus (Py U B U) (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) r) (S U V B))) (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) r) (Fplus (Fminus F0 (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py U V U))) (S U V B))))
+++++
basic_simpl.
-----
Theorem elim_py_on_perp_d_left_right : forall B U V Y : Point, forall r: F, on_perp_d Y U V r -> Py Y B Y = Py U B U - (2 + 2) * r * S U V B - (2 + 2) * r * (0 - r / (2 + 2) * Py U V U + S U V B).
Proof.
intros.
rewrite (elim_py_on_perp_d_right Y B U V Y r H).
replace (Py Y B U) with (Py U B Y) by auto with Geom.
rewrite (elim_py_on_perp_d_right U B U V Y r H).
unfold S4.
basic_simpl.

*****
H : on_perp_d Y U V r
r : F
B,U,V,Y : Point
*****
eq (Fminus (Fminus (Py U B U) (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) r) (S U V B))) (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) r) (Fplus (S U Y V) (S U V B)))) (Fminus (Fminus (Py U B U) (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) r) (S U V B))) (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) r) (Fplus (Fminus F0 (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py U V U))) (S U V B))))
+++++
replace (S U Y V) with (S V U Y) by auto with Geom.
-----
Theorem elim_py_on_perp_d_left_right : forall B U V Y : Point, forall r: F, on_perp_d Y U V r -> Py Y B Y = Py U B U - (2 + 2) * r * S U V B - (2 + 2) * r * (0 - r / (2 + 2) * Py U V U + S U V B).
Proof.
intros.
rewrite (elim_py_on_perp_d_right Y B U V Y r H).
replace (Py Y B U) with (Py U B Y) by auto with Geom.
rewrite (elim_py_on_perp_d_right U B U V Y r H).
unfold S4.
basic_simpl.
replace (S U Y V) with (S V U Y) by auto with Geom.

*****
H : on_perp_d Y U V r
r : F
B,U,V,Y : Point
*****
eq (Fminus (Fminus (Py U B U) (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) r) (S U V B))) (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) r) (Fplus (S V U Y) (S U V B)))) (Fminus (Fminus (Py U B U) (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) r) (S U V B))) (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) r) (Fplus (Fminus F0 (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py U V U))) (S U V B))))
+++++
rewrite (elim_area_on_perp_d V U U V Y r H).
-----
Theorem elim_py_on_perp_d_left_right : forall B U V Y : Point, forall r: F, on_perp_d Y U V r -> Py Y B Y = Py U B U - (2 + 2) * r * S U V B - (2 + 2) * r * (0 - r / (2 + 2) * Py U V U + S U V B).
Proof.
intros.
rewrite (elim_py_on_perp_d_right Y B U V Y r H).
replace (Py Y B U) with (Py U B Y) by auto with Geom.
rewrite (elim_py_on_perp_d_right U B U V Y r H).
unfold S4.
basic_simpl.
replace (S U Y V) with (S V U Y) by auto with Geom.
rewrite (elim_area_on_perp_d V U U V Y r H).

*****
H : on_perp_d Y U V r
r : F
B,U,V,Y : Point
*****
eq (Fminus (Fminus (Py U B U) (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) r) (S U V B))) (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) r) (Fplus (Fminus (S V U U) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py4 U V V U))) (S U V B)))) (Fminus (Fminus (Py U B U) (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) r) (S U V B))) (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) r) (Fplus (Fminus F0 (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py U V U))) (S U V B))))
+++++
unfold Py4.
-----
Theorem elim_py_on_perp_d_left_right : forall B U V Y : Point, forall r: F, on_perp_d Y U V r -> Py Y B Y = Py U B U - (2 + 2) * r * S U V B - (2 + 2) * r * (0 - r / (2 + 2) * Py U V U + S U V B).
Proof.
intros.
rewrite (elim_py_on_perp_d_right Y B U V Y r H).
replace (Py Y B U) with (Py U B Y) by auto with Geom.
rewrite (elim_py_on_perp_d_right U B U V Y r H).
unfold S4.
basic_simpl.
replace (S U Y V) with (S V U Y) by auto with Geom.
rewrite (elim_area_on_perp_d V U U V Y r H).
unfold Py4.

*****
H : on_perp_d Y U V r
r : F
B,U,V,Y : Point
*****
eq (Fminus (Fminus (Py U B U) (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) r) (S U V B))) (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) r) (Fplus (Fminus (S V U U) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Fminus (Py U V U) (Py V V U)))) (S U V B)))) (Fminus (Fminus (Py U B U) (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) r) (S U V B))) (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) r) (Fplus (Fminus F0 (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py U V U))) (S U V B))))
+++++
basic_simpl.
-----
Theorem elim_py_on_perp_d_left_right : forall B U V Y : Point, forall r: F, on_perp_d Y U V r -> Py Y B Y = Py U B U - (2 + 2) * r * S U V B - (2 + 2) * r * (0 - r / (2 + 2) * Py U V U + S U V B).
Proof.
intros.
rewrite (elim_py_on_perp_d_right Y B U V Y r H).
replace (Py Y B U) with (Py U B Y) by auto with Geom.
rewrite (elim_py_on_perp_d_right U B U V Y r H).
unfold S4.
basic_simpl.
replace (S U Y V) with (S V U Y) by auto with Geom.
rewrite (elim_area_on_perp_d V U U V Y r H).
unfold Py4.
basic_simpl.

*****
H : on_perp_d Y U V r
r : F
B,U,V,Y : Point
*****
eq (Fminus (Fminus (Py U B U) (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) r) (S U V B))) (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) r) (Fplus (Fminus F0 (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py U V U))) (S U V B)))) (Fminus (Fminus (Py U B U) (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) r) (S U V B))) (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) r) (Fplus (Fminus F0 (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py U V U))) (S U V B))))
+++++
auto.
-----
Theorem elim_py_on_perp_d_left_right : forall B U V Y : Point, forall r: F, on_perp_d Y U V r -> Py Y B Y = Py U B U - (2 + 2) * r * S U V B - (2 + 2) * r * (0 - r / (2 + 2) * Py U V U + S U V B).
Proof.
intros.
rewrite (elim_py_on_perp_d_right Y B U V Y r H).
replace (Py Y B U) with (Py U B Y) by auto with Geom.
rewrite (elim_py_on_perp_d_right U B U V Y r H).
unfold S4.
basic_simpl.
replace (S U Y V) with (S V U Y) by auto with Geom.
rewrite (elim_area_on_perp_d V U U V Y r H).
unfold Py4.
basic_simpl.
auto.

*****

*****

+++++
Qed.
-----
Theorem elim_area_on_foot :\nforall A B P U V Y : Point,\n on_foot Y P U V ->\n S A B Y = (Py P U V * S A B V + Py P V U * S A B U) / (Py U V U).
-----
Theorem elim_area_on_foot : forall A B P U V Y : Point, on_foot Y P U V -> S A B Y = (Py P U V * S A B V + Py P V U * S A B U) / (Py U V U).

*****

*****
forall (A B P U V Y : Point) (_ : on_foot Y P U V), eq (S A B Y) (Fdiv (Fplus (Fmult (Py P U V) (S A B V)) (Fmult (Py P V U) (S A B U))) (Py U V U))
+++++
Proof.
-----
Theorem elim_area_on_foot : forall A B P U V Y : Point, on_foot Y P U V -> S A B Y = (Py P U V * S A B V + Py P V U * S A B U) / (Py U V U).
Proof.

*****

*****
forall (A B P U V Y : Point) (_ : on_foot Y P U V), eq (S A B Y) (Fdiv (Fplus (Fmult (Py P U V) (S A B V)) (Fmult (Py P V U) (S A B U))) (Py U V U))
+++++
intros.
-----
Theorem elim_area_on_foot : forall A B P U V Y : Point, on_foot Y P U V -> S A B Y = (Py P U V * S A B V + Py P V U * S A B U) / (Py U V U).
Proof.
intros.

*****
H : on_foot Y P U V
A,B,P,U,V,Y : Point
*****
eq (S A B Y) (Fdiv (Fplus (Fmult (Py P U V) (S A B V)) (Fmult (Py P V U) (S A B U))) (Py U V U))
+++++
unfold on_foot in *.
-----
Theorem elim_area_on_foot : forall A B P U V Y : Point, on_foot Y P U V -> S A B Y = (Py P U V * S A B V + Py P V U * S A B U) / (Py U V U).
Proof.
intros.
unfold on_foot in *.

*****
H : and (perp Y P U V) (and (Col Y U V) (not (eq U V)))
A,B,P,U,V,Y : Point
*****
eq (S A B Y) (Fdiv (Fplus (Fmult (Py P U V) (S A B V)) (Fmult (Py P V U) (S A B U))) (Py U V U))
+++++
use H.
-----
Theorem elim_area_on_foot : forall A B P U V Y : Point, on_foot Y P U V -> S A B Y = (Py P U V * S A B V + Py P V U * S A B U) / (Py U V U).
Proof.
intros.
unfold on_foot in *.
use H.

*****
H3 : not (eq U V)
H2 : Col Y U V
H0 : perp Y P U V
A,B,P,U,V,Y : Point
*****
eq (S A B Y) (Fdiv (Fplus (Fmult (Py P U V) (S A B V)) (Fmult (Py P V U) (S A B U))) (Py U V U))
+++++
replace (S A B Y) with (S Y A B) by auto with Geom.
-----
Theorem elim_area_on_foot : forall A B P U V Y : Point, on_foot Y P U V -> S A B Y = (Py P U V * S A B V + Py P V U * S A B U) / (Py U V U).
Proof.
intros.
unfold on_foot in *.
use H.
replace (S A B Y) with (S Y A B) by auto with Geom.

*****
H3 : not (eq U V)
H2 : Col Y U V
H0 : perp Y P U V
A,B,P,U,V,Y : Point
*****
eq (S Y A B) (Fdiv (Fplus (Fmult (Py P U V) (S A B V)) (Fmult (Py P V U) (S A B U))) (Py U V U))
+++++
rewrite (l2_9 A B U V Y).
-----
Theorem elim_area_on_foot : forall A B P U V Y : Point, on_foot Y P U V -> S A B Y = (Py P U V * S A B V + Py P V U * S A B U) / (Py U V U).
Proof.
intros.
unfold on_foot in *.
use H.
replace (S A B Y) with (S Y A B) by auto with Geom.
rewrite (l2_9 A B U V Y).

*****
H3 : not (eq U V)
H2 : Col Y U V
H0 : perp Y P U V
A,B,P,U,V,Y : Point
*****
eq (Fplus (Fmult (Fdiv (DSeg U Y) (DSeg U V)) (S V A B)) (Fmult (Fdiv (DSeg Y V) (DSeg U V)) (S U A B))) (Fdiv (Fplus (Fmult (Py P U V) (S A B V)) (Fmult (Py P V U) (S A B U))) (Py U V U))
+++++
idtac.
-----
Theorem elim_area_on_foot : forall A B P U V Y : Point, on_foot Y P U V -> S A B Y = (Py P U V * S A B V + Py P V U * S A B U) / (Py U V U).
Proof.
intros.
unfold on_foot in *.
use H.
replace (S A B Y) with (S Y A B) by auto with Geom.
rewrite (l2_9 A B U V Y).
idtac.

*****
H3 : not (eq U V)
H2 : Col Y U V
H0 : perp Y P U V
A,B,P,U,V,Y : Point
*****
eq (Fplus (Fmult (Fdiv (DSeg U Y) (DSeg U V)) (S V A B)) (Fmult (Fdiv (DSeg Y V) (DSeg U V)) (S U A B))) (Fdiv (Fplus (Fmult (Py P U V) (S A B V)) (Fmult (Py P V U) (S A B U))) (Py U V U))
+++++
assert (U**Y/U**V = Py P U V / Py U V U).
-----
Theorem elim_area_on_foot : forall A B P U V Y : Point, on_foot Y P U V -> S A B Y = (Py P U V * S A B V + Py P V U * S A B U) / (Py U V U).
Proof.
intros.
unfold on_foot in *.
use H.
replace (S A B Y) with (S Y A B) by auto with Geom.
rewrite (l2_9 A B U V Y).
idtac.
assert (U**Y/U**V = Py P U V / Py U V U).

*****
H3 : not (eq U V)
H2 : Col Y U V
H0 : perp Y P U V
A,B,P,U,V,Y : Point
*****
eq (Fdiv (DSeg U Y) (DSeg U V)) (Fdiv (Py P U V) (Py U V U))
+++++
apply l_24_c_on_foot.
-----
Theorem elim_area_on_foot : forall A B P U V Y : Point, on_foot Y P U V -> S A B Y = (Py P U V * S A B V + Py P V U * S A B U) / (Py U V U).
Proof.
intros.
unfold on_foot in *.
use H.
replace (S A B Y) with (S Y A B) by auto with Geom.
rewrite (l2_9 A B U V Y).
idtac.
assert (U**Y/U**V = Py P U V / Py U V U).
apply l_24_c_on_foot.

*****
H3 : not (eq U V)
H2 : Col Y U V
H0 : perp Y P U V
A,B,P,U,V,Y : Point
*****
on_foot Y P U V
+++++
unfold on_foot.
-----
Theorem elim_area_on_foot : forall A B P U V Y : Point, on_foot Y P U V -> S A B Y = (Py P U V * S A B V + Py P V U * S A B U) / (Py U V U).
Proof.
intros.
unfold on_foot in *.
use H.
replace (S A B Y) with (S Y A B) by auto with Geom.
rewrite (l2_9 A B U V Y).
idtac.
assert (U**Y/U**V = Py P U V / Py U V U).
apply l_24_c_on_foot.
unfold on_foot.

*****
H3 : not (eq U V)
H2 : Col Y U V
H0 : perp Y P U V
A,B,P,U,V,Y : Point
*****
and (perp Y P U V) (and (Col Y U V) (not (eq U V)))
+++++
auto.
-----
Theorem elim_area_on_foot : forall A B P U V Y : Point, on_foot Y P U V -> S A B Y = (Py P U V * S A B V + Py P V U * S A B U) / (Py U V U).
Proof.
intros.
unfold on_foot in *.
use H.
replace (S A B Y) with (S Y A B) by auto with Geom.
rewrite (l2_9 A B U V Y).
idtac.
assert (U**Y/U**V = Py P U V / Py U V U).

*****
H : eq (Fdiv (DSeg U Y) (DSeg U V)) (Fdiv (Py P U V) (Py U V U))
H3 : not (eq U V)
H2 : Col Y U V
H0 : perp Y P U V
A,B,P,U,V,Y : Point
*****
eq (Fplus (Fmult (Fdiv (DSeg U Y) (DSeg U V)) (S V A B)) (Fmult (Fdiv (DSeg Y V) (DSeg U V)) (S U A B))) (Fdiv (Fplus (Fmult (Py P U V) (S A B V)) (Fmult (Py P V U) (S A B U))) (Py U V U))
+++++
assert (V**Y/V**U = Py P V U / Py V U V).
-----
Theorem elim_area_on_foot : forall A B P U V Y : Point, on_foot Y P U V -> S A B Y = (Py P U V * S A B V + Py P V U * S A B U) / (Py U V U).
Proof.
intros.
unfold on_foot in *.
use H.
replace (S A B Y) with (S Y A B) by auto with Geom.
rewrite (l2_9 A B U V Y).
idtac.
assert (U**Y/U**V = Py P U V / Py U V U).
assert (V**Y/V**U = Py P V U / Py V U V).

*****
H : eq (Fdiv (DSeg U Y) (DSeg U V)) (Fdiv (Py P U V) (Py U V U))
H3 : not (eq U V)
H2 : Col Y U V
H0 : perp Y P U V
A,B,P,U,V,Y : Point
*****
eq (Fdiv (DSeg V Y) (DSeg V U)) (Fdiv (Py P V U) (Py V U V))
+++++
apply l_24_c_on_foot.
-----
Theorem elim_area_on_foot : forall A B P U V Y : Point, on_foot Y P U V -> S A B Y = (Py P U V * S A B V + Py P V U * S A B U) / (Py U V U).
Proof.
intros.
unfold on_foot in *.
use H.
replace (S A B Y) with (S Y A B) by auto with Geom.
rewrite (l2_9 A B U V Y).
idtac.
assert (U**Y/U**V = Py P U V / Py U V U).
assert (V**Y/V**U = Py P V U / Py V U V).
apply l_24_c_on_foot.

*****
H : eq (Fdiv (DSeg U Y) (DSeg U V)) (Fdiv (Py P U V) (Py U V U))
H3 : not (eq U V)
H2 : Col Y U V
H0 : perp Y P U V
A,B,P,U,V,Y : Point
*****
on_foot Y P V U
+++++
unfold on_foot.
-----
Theorem elim_area_on_foot : forall A B P U V Y : Point, on_foot Y P U V -> S A B Y = (Py P U V * S A B V + Py P V U * S A B U) / (Py U V U).
Proof.
intros.
unfold on_foot in *.
use H.
replace (S A B Y) with (S Y A B) by auto with Geom.
rewrite (l2_9 A B U V Y).
idtac.
assert (U**Y/U**V = Py P U V / Py U V U).
assert (V**Y/V**U = Py P V U / Py V U V).
apply l_24_c_on_foot.
unfold on_foot.

*****
H : eq (Fdiv (DSeg U Y) (DSeg U V)) (Fdiv (Py P U V) (Py U V U))
H3 : not (eq U V)
H2 : Col Y U V
H0 : perp Y P U V
A,B,P,U,V,Y : Point
*****
and (perp Y P V U) (and (Col Y V U) (not (eq V U)))
+++++
auto with Geom.
-----
Theorem elim_area_on_foot : forall A B P U V Y : Point, on_foot Y P U V -> S A B Y = (Py P U V * S A B V + Py P V U * S A B U) / (Py U V U).
Proof.
intros.
unfold on_foot in *.
use H.
replace (S A B Y) with (S Y A B) by auto with Geom.
rewrite (l2_9 A B U V Y).
idtac.
assert (U**Y/U**V = Py P U V / Py U V U).
assert (V**Y/V**U = Py P V U / Py V U V).

*****
H1 : eq (Fdiv (DSeg V Y) (DSeg V U)) (Fdiv (Py P V U) (Py V U V))
H : eq (Fdiv (DSeg U Y) (DSeg U V)) (Fdiv (Py P U V) (Py U V U))
H3 : not (eq U V)
H2 : Col Y U V
H0 : perp Y P U V
A,B,P,U,V,Y : Point
*****
eq (Fplus (Fmult (Fdiv (DSeg U Y) (DSeg U V)) (S V A B)) (Fmult (Fdiv (DSeg Y V) (DSeg U V)) (S U A B))) (Fdiv (Fplus (Fmult (Py P U V) (S A B V)) (Fmult (Py P V U) (S A B U))) (Py U V U))
+++++
replace (Y ** V / U ** V) with (V**Y/V**U) by auto with Geom.
-----
Theorem elim_area_on_foot : forall A B P U V Y : Point, on_foot Y P U V -> S A B Y = (Py P U V * S A B V + Py P V U * S A B U) / (Py U V U).
Proof.
intros.
unfold on_foot in *.
use H.
replace (S A B Y) with (S Y A B) by auto with Geom.
rewrite (l2_9 A B U V Y).
idtac.
assert (U**Y/U**V = Py P U V / Py U V U).
assert (V**Y/V**U = Py P V U / Py V U V).
replace (Y ** V / U ** V) with (V**Y/V**U) by auto with Geom.

*****
H1 : eq (Fdiv (DSeg V Y) (DSeg V U)) (Fdiv (Py P V U) (Py V U V))
H : eq (Fdiv (DSeg U Y) (DSeg U V)) (Fdiv (Py P U V) (Py U V U))
H3 : not (eq U V)
H2 : Col Y U V
H0 : perp Y P U V
A,B,P,U,V,Y : Point
*****
eq (Fplus (Fmult (Fdiv (DSeg U Y) (DSeg U V)) (S V A B)) (Fmult (Fdiv (DSeg V Y) (DSeg V U)) (S U A B))) (Fdiv (Fplus (Fmult (Py P U V) (S A B V)) (Fmult (Py P V U) (S A B U))) (Py U V U))
+++++
rewrite H.
-----
Theorem elim_area_on_foot : forall A B P U V Y : Point, on_foot Y P U V -> S A B Y = (Py P U V * S A B V + Py P V U * S A B U) / (Py U V U).
Proof.
intros.
unfold on_foot in *.
use H.
replace (S A B Y) with (S Y A B) by auto with Geom.
rewrite (l2_9 A B U V Y).
idtac.
assert (U**Y/U**V = Py P U V / Py U V U).
assert (V**Y/V**U = Py P V U / Py V U V).
replace (Y ** V / U ** V) with (V**Y/V**U) by auto with Geom.
rewrite H.

*****
H1 : eq (Fdiv (DSeg V Y) (DSeg V U)) (Fdiv (Py P V U) (Py V U V))
H : eq (Fdiv (DSeg U Y) (DSeg U V)) (Fdiv (Py P U V) (Py U V U))
H3 : not (eq U V)
H2 : Col Y U V
H0 : perp Y P U V
A,B,P,U,V,Y : Point
*****
eq (Fplus (Fmult (Fdiv (Py P U V) (Py U V U)) (S V A B)) (Fmult (Fdiv (DSeg V Y) (DSeg V U)) (S U A B))) (Fdiv (Fplus (Fmult (Py P U V) (S A B V)) (Fmult (Py P V U) (S A B U))) (Py U V U))
+++++
rewrite H1.
-----
Theorem elim_area_on_foot : forall A B P U V Y : Point, on_foot Y P U V -> S A B Y = (Py P U V * S A B V + Py P V U * S A B U) / (Py U V U).
Proof.
intros.
unfold on_foot in *.
use H.
replace (S A B Y) with (S Y A B) by auto with Geom.
rewrite (l2_9 A B U V Y).
idtac.
assert (U**Y/U**V = Py P U V / Py U V U).
assert (V**Y/V**U = Py P V U / Py V U V).
replace (Y ** V / U ** V) with (V**Y/V**U) by auto with Geom.
rewrite H.
rewrite H1.

*****
H1 : eq (Fdiv (DSeg V Y) (DSeg V U)) (Fdiv (Py P V U) (Py V U V))
H : eq (Fdiv (DSeg U Y) (DSeg U V)) (Fdiv (Py P U V) (Py U V U))
H3 : not (eq U V)
H2 : Col Y U V
H0 : perp Y P U V
A,B,P,U,V,Y : Point
*****
eq (Fplus (Fmult (Fdiv (Py P U V) (Py U V U)) (S V A B)) (Fmult (Fdiv (Py P V U) (Py V U V)) (S U A B))) (Fdiv (Fplus (Fmult (Py P U V) (S A B V)) (Fmult (Py P V U) (S A B U))) (Py U V U))
+++++
replace (Py V U V) with (Py U V U) by auto with Geom.
-----
Theorem elim_area_on_foot : forall A B P U V Y : Point, on_foot Y P U V -> S A B Y = (Py P U V * S A B V + Py P V U * S A B U) / (Py U V U).
Proof.
intros.
unfold on_foot in *.
use H.
replace (S A B Y) with (S Y A B) by auto with Geom.
rewrite (l2_9 A B U V Y).
idtac.
assert (U**Y/U**V = Py P U V / Py U V U).
assert (V**Y/V**U = Py P V U / Py V U V).
replace (Y ** V / U ** V) with (V**Y/V**U) by auto with Geom.
rewrite H.
rewrite H1.
replace (Py V U V) with (Py U V U) by auto with Geom.

*****
H1 : eq (Fdiv (DSeg V Y) (DSeg V U)) (Fdiv (Py P V U) (Py V U V))
H : eq (Fdiv (DSeg U Y) (DSeg U V)) (Fdiv (Py P U V) (Py U V U))
H3 : not (eq U V)
H2 : Col Y U V
H0 : perp Y P U V
A,B,P,U,V,Y : Point
*****
eq (Fplus (Fmult (Fdiv (Py P U V) (Py U V U)) (S V A B)) (Fmult (Fdiv (Py P V U) (Py U V U)) (S U A B))) (Fdiv (Fplus (Fmult (Py P U V) (S A B V)) (Fmult (Py P V U) (S A B U))) (Py U V U))
+++++
uniformize_signed_areas.
-----
Theorem elim_area_on_foot : forall A B P U V Y : Point, on_foot Y P U V -> S A B Y = (Py P U V * S A B V + Py P V U * S A B U) / (Py U V U).
Proof.
intros.
unfold on_foot in *.
use H.
replace (S A B Y) with (S Y A B) by auto with Geom.
rewrite (l2_9 A B U V Y).
idtac.
assert (U**Y/U**V = Py P U V / Py U V U).
assert (V**Y/V**U = Py P V U / Py V U V).
replace (Y ** V / U ** V) with (V**Y/V**U) by auto with Geom.
rewrite H.
rewrite H1.
replace (Py V U V) with (Py U V U) by auto with Geom.
uniformize_signed_areas.

*****
H1 : eq (Fdiv (DSeg V Y) (DSeg V U)) (Fdiv (Py P V U) (Py V U V))
H : eq (Fdiv (DSeg U Y) (DSeg U V)) (Fdiv (Py P U V) (Py U V U))
H3 : not (eq U V)
H2 : Col Y U V
H0 : perp Y P U V
A,B,P,U,V,Y : Point
*****
eq (Fplus (Fmult (Fdiv (Py P U V) (Py U V U)) (S V A B)) (Fmult (Fdiv (Py P V U) (Py U V U)) (S U A B))) (Fdiv (Fplus (Fmult (Py P U V) (S V A B)) (Fmult (Py P V U) (S U A B))) (Py U V U))
+++++
field.
-----
Theorem elim_area_on_foot : forall A B P U V Y : Point, on_foot Y P U V -> S A B Y = (Py P U V * S A B V + Py P V U * S A B U) / (Py U V U).
Proof.
intros.
unfold on_foot in *.
use H.
replace (S A B Y) with (S Y A B) by auto with Geom.
rewrite (l2_9 A B U V Y).
idtac.
assert (U**Y/U**V = Py P U V / Py U V U).
assert (V**Y/V**U = Py P V U / Py V U V).
replace (Y ** V / U ** V) with (V**Y/V**U) by auto with Geom.
rewrite H.
rewrite H1.
replace (Py V U V) with (Py U V U) by auto with Geom.
uniformize_signed_areas.
field.

*****
H1 : eq (Fdiv (DSeg V Y) (DSeg V U)) (Fdiv (Py P V U) (Py V U V))
H : eq (Fdiv (DSeg U Y) (DSeg U V)) (Fdiv (Py P U V) (Py U V U))
H3 : not (eq U V)
H2 : Col Y U V
H0 : perp Y P U V
A,B,P,U,V,Y : Point
*****
not (eq (Py U V U) F0)
+++++
auto with Geom.
-----
Theorem elim_area_on_foot : forall A B P U V Y : Point, on_foot Y P U V -> S A B Y = (Py P U V * S A B V + Py P V U * S A B U) / (Py U V U).
Proof.
intros.
unfold on_foot in *.
use H.
replace (S A B Y) with (S Y A B) by auto with Geom.
rewrite (l2_9 A B U V Y).

*****
H3 : not (eq U V)
H2 : Col Y U V
H0 : perp Y P U V
A,B,P,U,V,Y : Point
*****
not (eq U V)
+++++
auto with Geom .
-----
Theorem elim_area_on_foot : forall A B P U V Y : Point, on_foot Y P U V -> S A B Y = (Py P U V * S A B V + Py P V U * S A B U) / (Py U V U).
Proof.
intros.
unfold on_foot in *.
use H.
replace (S A B Y) with (S Y A B) by auto with Geom.
rewrite (l2_9 A B U V Y).

*****
H3 : not (eq U V)
H2 : Col Y U V
H0 : perp Y P U V
A,B,P,U,V,Y : Point
*****
Col Y U V
+++++
auto with Geom .
-----
Theorem elim_area_on_foot : forall A B P U V Y : Point, on_foot Y P U V -> S A B Y = (Py P U V * S A B V + Py P V U * S A B U) / (Py U V U).
Proof.
intros.
unfold on_foot in *.
use H.
replace (S A B Y) with (S Y A B) by auto with Geom.
rewrite (l2_9 A B U V Y).

*****

*****

+++++
Qed.
-----
Theorem elim_area_on_foot_invariant :\nforall A B P U V Y : Point,\n on_foot Y P U V ->\n Py U V U <> 0.
-----
Theorem elim_area_on_foot_invariant : forall A B P U V Y : Point, on_foot Y P U V -> Py U V U <> 0.

*****

*****
forall (_ : Point) (_ : Point) (P U V Y : Point) (_ : on_foot Y P U V), not (eq (Py U V U) F0)
+++++
Proof.
-----
Theorem elim_area_on_foot_invariant : forall A B P U V Y : Point, on_foot Y P U V -> Py U V U <> 0.
Proof.

*****

*****
forall (_ : Point) (_ : Point) (P U V Y : Point) (_ : on_foot Y P U V), not (eq (Py U V U) F0)
+++++
exact elim_py_on_foot_right_invariant.
-----
Theorem elim_area_on_foot_invariant : forall A B P U V Y : Point, on_foot Y P U V -> Py U V U <> 0.
Proof.
exact elim_py_on_foot_right_invariant.

*****

*****

+++++
Qed.
-----
Theorem elim_ratio_on_foot_a :\nforall Y P U V A C D : Point,\non_foot Y P U V ->\nCol A U V ->\nparallel A Y C D ->\nC <> D ->\nA <> Y ->\nA**Y / C**D = Py4 P C A D / Py C D C.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.

*****

*****
forall (Y P U V A C D : Point) (_ : on_foot Y P U V) (_ : Col A U V) (_ : parallel A Y C D) (_ : not (eq C D)) (_ : not (eq A Y)), eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (Py4 P C A D) (Py C D C))
+++++
Proof.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.

*****

*****
forall (Y P U V A C D : Point) (_ : on_foot Y P U V) (_ : Col A U V) (_ : parallel A Y C D) (_ : not (eq C D)) (_ : not (eq A Y)), eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (Py4 P C A D) (Py C D C))
+++++
intros.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.

*****
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A U V
H : on_foot Y P U V
Y,P,U,V,A,C,D : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (Py4 P C A D) (Py C D C))
+++++
cases_equality A U.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.

*****
H4 : eq A U
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A U V
H : on_foot Y P U V
Y,P,U,V,A,C,D : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (Py4 P C A D) (Py C D C))
+++++
subst U.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
subst U.

*****
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H : on_foot Y P A V
H0 : Col A A V
Y,P,V,A,C,D : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (Py4 P C A D) (Py C D C))
+++++
cases_equality A V.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
subst U.
cases_equality A V.

*****
H4 : eq A V
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H : on_foot Y P A V
H0 : Col A A V
Y,P,V,A,C,D : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (Py4 P C A D) (Py C D C))
+++++
subst V.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
subst U.
cases_equality A V.
subst V.

*****
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A A A
H : on_foot Y P A A
Y,P,A,C,D : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (Py4 P C A D) (Py C D C))
+++++
unfold on_foot in H.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
subst U.
cases_equality A V.
subst V.
unfold on_foot in H.

*****
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A A A
H : and (perp Y P A A) (and (Col Y A A) (not (eq A A)))
Y,P,A,C,D : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (Py4 P C A D) (Py C D C))
+++++
use H.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
subst U.
cases_equality A V.
subst V.
unfold on_foot in H.
use H.

*****
H7 : not (eq A A)
H6 : Col Y A A
H4 : perp Y P A A
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A A A
Y,P,A,C,D : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (Py4 P C A D) (Py C D C))
+++++
intuition.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
subst U.
cases_equality A V.

*****
H4 : not (eq A V)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H : on_foot Y P A V
H0 : Col A A V
Y,P,V,A,C,D : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (Py4 P C A D) (Py C D C))
+++++
clear H0.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
subst U.
cases_equality A V.
clear H0.

*****
H4 : not (eq A V)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H : on_foot Y P A V
Y,P,V,A,C,D : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (Py4 P C A D) (Py C D C))
+++++
unfold on_foot in H.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
subst U.
cases_equality A V.
clear H0.
unfold on_foot in H.

*****
H4 : not (eq A V)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H : and (perp Y P A V) (and (Col Y A V) (not (eq A V)))
Y,P,V,A,C,D : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (Py4 P C A D) (Py C D C))
+++++
use H.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
subst U.
cases_equality A V.
clear H0.
unfold on_foot in H.
use H.

*****
H7 : not (eq A V)
H6 : Col Y A V
H0 : perp Y P A V
H4 : not (eq A V)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
Y,P,V,A,C,D : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (Py4 P C A D) (Py C D C))
+++++
pose (d := C**D/A**V).
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
subst U.
cases_equality A V.
clear H0.
unfold on_foot in H.
use H.
pose (d := C**D/A**V).

*****
d : F
H7 : not (eq A V)
H6 : Col Y A V
H0 : perp Y P A V
H4 : not (eq A V)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
Y,P,V,A,C,D : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (Py4 P C A D) (Py C D C))
+++++
assert ({T : Point | Col T A V /\ A ** T = d * A**V}).
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
subst U.
cases_equality A V.
clear H0.
unfold on_foot in H.
use H.
pose (d := C**D/A**V).
assert ({T : Point | Col T A V /\\ A ** T = d * A**V}).

*****
d : F
H7 : not (eq A V)
H6 : Col Y A V
H0 : perp Y P A V
H4 : not (eq A V)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
Y,P,V,A,C,D : Point
*****
sig (fun T : Point => and (Col T A V) (eq (DSeg A T) (Fmult d (DSeg A V))))
+++++
apply (on_line_dex A V).
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
subst U.
cases_equality A V.
clear H0.
unfold on_foot in H.
use H.
pose (d := C**D/A**V).
assert ({T : Point | Col T A V /\\ A ** T = d * A**V}).
apply (on_line_dex A V).

*****
d : F
H7 : not (eq A V)
H6 : Col Y A V
H0 : perp Y P A V
H4 : not (eq A V)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
Y,P,V,A,C,D : Point
*****
not (eq A V)
+++++
assumption.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
subst U.
cases_equality A V.
clear H0.
unfold on_foot in H.
use H.
pose (d := C**D/A**V).
assert ({T : Point | Col T A V /\\ A ** T = d * A**V}).

*****
H : sig\n (fun T : Point =>\n and (Col T A V) (eq (DSeg A T) (Fmult d (DSeg A V))))
d : F
H7 : not (eq A V)
H6 : Col Y A V
H0 : perp Y P A V
H4 : not (eq A V)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
Y,P,V,A,C,D : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (Py4 P C A D) (Py C D C))
+++++
elim H.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
subst U.
cases_equality A V.
clear H0.
unfold on_foot in H.
use H.
pose (d := C**D/A**V).
assert ({T : Point | Col T A V /\\ A ** T = d * A**V}).
elim H.

*****
H : sig\n (fun T : Point =>\n and (Col T A V) (eq (DSeg A T) (Fmult d (DSeg A V))))
d : F
H7 : not (eq A V)
H6 : Col Y A V
H0 : perp Y P A V
H4 : not (eq A V)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
Y,P,V,A,C,D : Point
*****
forall (x : Point) (_ : and (Col x A V) (eq (DSeg A x) (Fmult d (DSeg A V)))), eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (Py4 P C A D) (Py C D C))
+++++
intros T HT.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
subst U.
cases_equality A V.
clear H0.
unfold on_foot in H.
use H.
pose (d := C**D/A**V).
assert ({T : Point | Col T A V /\\ A ** T = d * A**V}).
elim H.
intros T HT.

*****
HT : and (Col T A V) (eq (DSeg A T) (Fmult d (DSeg A V)))
T : Point
H : sig\n (fun T : Point =>\n and (Col T A V) (eq (DSeg A T) (Fmult d (DSeg A V))))
d : F
H7 : not (eq A V)
H6 : Col Y A V
H0 : perp Y P A V
H4 : not (eq A V)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
Y,P,V,A,C,D : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (Py4 P C A D) (Py C D C))
+++++
clear H.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
subst U.
cases_equality A V.
clear H0.
unfold on_foot in H.
use H.
pose (d := C**D/A**V).
assert ({T : Point | Col T A V /\\ A ** T = d * A**V}).
elim H.
intros T HT.
clear H.

*****
HT : and (Col T A V) (eq (DSeg A T) (Fmult d (DSeg A V)))
T : Point
d : F
H7 : not (eq A V)
H6 : Col Y A V
H0 : perp Y P A V
H4 : not (eq A V)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
Y,P,V,A,C,D : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (Py4 P C A D) (Py C D C))
+++++
use HT.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
subst U.
cases_equality A V.
clear H0.
unfold on_foot in H.
use H.
pose (d := C**D/A**V).
assert ({T : Point | Col T A V /\\ A ** T = d * A**V}).
elim H.
intros T HT.
clear H.
use HT.

*****
H5 : eq (DSeg A T) (Fmult d (DSeg A V))
H : Col T A V
T : Point
d : F
H7 : not (eq A V)
H6 : Col Y A V
H0 : perp Y P A V
H4 : not (eq A V)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
Y,P,V,A,C,D : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (Py4 P C A D) (Py C D C))
+++++
unfold d in H5.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
subst U.
cases_equality A V.
clear H0.
unfold on_foot in H.
use H.
pose (d := C**D/A**V).
assert ({T : Point | Col T A V /\\ A ** T = d * A**V}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H5.

*****
H5 : eq (DSeg A T) (Fmult (Fdiv (DSeg C D) (DSeg A V)) (DSeg A V))
H : Col T A V
T : Point
d : F
H7 : not (eq A V)
H6 : Col Y A V
H0 : perp Y P A V
H4 : not (eq A V)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
Y,P,V,A,C,D : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (Py4 P C A D) (Py C D C))
+++++
assert (A**T = C**D).
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
subst U.
cases_equality A V.
clear H0.
unfold on_foot in H.
use H.
pose (d := C**D/A**V).
assert ({T : Point | Col T A V /\\ A ** T = d * A**V}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H5.
assert (A**T = C**D).

*****
H5 : eq (DSeg A T) (Fmult (Fdiv (DSeg C D) (DSeg A V)) (DSeg A V))
H : Col T A V
T : Point
d : F
H7 : not (eq A V)
H6 : Col Y A V
H0 : perp Y P A V
H4 : not (eq A V)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
Y,P,V,A,C,D : Point
*****
eq (DSeg A T) (DSeg C D)
+++++
rewrite H5.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
subst U.
cases_equality A V.
clear H0.
unfold on_foot in H.
use H.
pose (d := C**D/A**V).
assert ({T : Point | Col T A V /\\ A ** T = d * A**V}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H5.
assert (A**T = C**D).
rewrite H5.

*****
H5 : eq (DSeg A T) (Fmult (Fdiv (DSeg C D) (DSeg A V)) (DSeg A V))
H : Col T A V
T : Point
d : F
H7 : not (eq A V)
H6 : Col Y A V
H0 : perp Y P A V
H4 : not (eq A V)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
Y,P,V,A,C,D : Point
*****
eq (Fmult (Fdiv (DSeg C D) (DSeg A V)) (DSeg A V)) (DSeg C D)
+++++
field.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
subst U.
cases_equality A V.
clear H0.
unfold on_foot in H.
use H.
pose (d := C**D/A**V).
assert ({T : Point | Col T A V /\\ A ** T = d * A**V}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H5.
assert (A**T = C**D).
rewrite H5.
field.

*****
H5 : eq (DSeg A T) (Fmult (Fdiv (DSeg C D) (DSeg A V)) (DSeg A V))
H : Col T A V
T : Point
d : F
H7 : not (eq A V)
H6 : Col Y A V
H0 : perp Y P A V
H4 : not (eq A V)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
Y,P,V,A,C,D : Point
*****
not (eq (DSeg A V) F0)
+++++
auto with Geom.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
subst U.
cases_equality A V.
clear H0.
unfold on_foot in H.
use H.
pose (d := C**D/A**V).
assert ({T : Point | Col T A V /\\ A ** T = d * A**V}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H5.
assert (A**T = C**D).

*****
H8 : eq (DSeg A T) (DSeg C D)
H5 : eq (DSeg A T) (Fmult (Fdiv (DSeg C D) (DSeg A V)) (DSeg A V))
H : Col T A V
T : Point
d : F
H7 : not (eq A V)
H6 : Col Y A V
H0 : perp Y P A V
H4 : not (eq A V)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
Y,P,V,A,C,D : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (Py4 P C A D) (Py C D C))
+++++
rewrite <- H8.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
subst U.
cases_equality A V.
clear H0.
unfold on_foot in H.
use H.
pose (d := C**D/A**V).
assert ({T : Point | Col T A V /\\ A ** T = d * A**V}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H5.
assert (A**T = C**D).
rewrite <- H8.

*****
H8 : eq (DSeg A T) (DSeg C D)
H5 : eq (DSeg A T) (Fmult (Fdiv (DSeg C D) (DSeg A V)) (DSeg A V))
H : Col T A V
T : Point
d : F
H7 : not (eq A V)
H6 : Col Y A V
H0 : perp Y P A V
H4 : not (eq A V)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
Y,P,V,A,C,D : Point
*****
eq (Fdiv (DSeg A Y) (DSeg A T)) (Fdiv (Py4 P C A D) (Py C D C))
+++++
clear H5.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
subst U.
cases_equality A V.
clear H0.
unfold on_foot in H.
use H.
pose (d := C**D/A**V).
assert ({T : Point | Col T A V /\\ A ** T = d * A**V}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H5.
assert (A**T = C**D).
rewrite <- H8.
clear H5.

*****
H8 : eq (DSeg A T) (DSeg C D)
H : Col T A V
T : Point
d : F
H7 : not (eq A V)
H6 : Col Y A V
H0 : perp Y P A V
H4 : not (eq A V)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
Y,P,V,A,C,D : Point
*****
eq (Fdiv (DSeg A Y) (DSeg A T)) (Fdiv (Py4 P C A D) (Py C D C))
+++++
rewrite ( l_24_b A T P Y).
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
subst U.
cases_equality A V.
clear H0.
unfold on_foot in H.
use H.
pose (d := C**D/A**V).
assert ({T : Point | Col T A V /\\ A ** T = d * A**V}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H5.
assert (A**T = C**D).
rewrite <- H8.
clear H5.
rewrite ( l_24_b A T P Y).

*****
H8 : eq (DSeg A T) (DSeg C D)
H : Col T A V
T : Point
d : F
H7 : not (eq A V)
H6 : Col Y A V
H0 : perp Y P A V
H4 : not (eq A V)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
Y,P,V,A,C,D : Point
*****
eq (Fdiv (Py P A T) (Fmult (Fmult (Fplus F1 F1) (DSeg A T)) (DSeg A T))) (Fdiv (Py4 P C A D) (Py C D C))
+++++
replace (2 * A ** T * A ** T) with (Py A T A) by (unfold Py;basic_simpl;uniformize_dir_seg;ring).
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
subst U.
cases_equality A V.
clear H0.
unfold on_foot in H.
use H.
pose (d := C**D/A**V).
assert ({T : Point | Col T A V /\\ A ** T = d * A**V}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H5.
assert (A**T = C**D).
rewrite <- H8.
clear H5.
rewrite ( l_24_b A T P Y).
replace (2 * A ** T * A ** T) with (Py A T A) by (unfold Py;basic_simpl;uniformize_dir_seg;ring).

*****
H8 : eq (DSeg A T) (DSeg C D)
H : Col T A V
T : Point
d : F
H7 : not (eq A V)
H6 : Col Y A V
H0 : perp Y P A V
H4 : not (eq A V)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
Y,P,V,A,C,D : Point
*****
eq (Fdiv (Py P A T) (Py A T A)) (Fdiv (Py4 P C A D) (Py C D C))
+++++
replace (Py A T A) with (Py C D C) by (unfold Py; uniformize_dir_seg; rewrite H8; ring).
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
subst U.
cases_equality A V.
clear H0.
unfold on_foot in H.
use H.
pose (d := C**D/A**V).
assert ({T : Point | Col T A V /\\ A ** T = d * A**V}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H5.
assert (A**T = C**D).
rewrite <- H8.
clear H5.
rewrite ( l_24_b A T P Y).
replace (2 * A ** T * A ** T) with (Py A T A) by (unfold Py;basic_simpl;uniformize_dir_seg;ring).
replace (Py A T A) with (Py C D C) by (unfold Py; uniformize_dir_seg; rewrite H8; ring).

*****
H8 : eq (DSeg A T) (DSeg C D)
H : Col T A V
T : Point
d : F
H7 : not (eq A V)
H6 : Col Y A V
H0 : perp Y P A V
H4 : not (eq A V)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
Y,P,V,A,C,D : Point
*****
eq (Fdiv (Py P A T) (Py C D C)) (Fdiv (Py4 P C A D) (Py C D C))
+++++
replace (Py P A T) with (Py4 P C A D).
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
subst U.
cases_equality A V.
clear H0.
unfold on_foot in H.
use H.
pose (d := C**D/A**V).
assert ({T : Point | Col T A V /\\ A ** T = d * A**V}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H5.
assert (A**T = C**D).
rewrite <- H8.
clear H5.
rewrite ( l_24_b A T P Y).
replace (2 * A ** T * A ** T) with (Py A T A) by (unfold Py;basic_simpl;uniformize_dir_seg;ring).
replace (Py A T A) with (Py C D C) by (unfold Py; uniformize_dir_seg; rewrite H8; ring).
replace (Py P A T) with (Py4 P C A D).

*****
H8 : eq (DSeg A T) (DSeg C D)
H : Col T A V
T : Point
d : F
H7 : not (eq A V)
H6 : Col Y A V
H0 : perp Y P A V
H4 : not (eq A V)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
Y,P,V,A,C,D : Point
*****
eq (Fdiv (Py4 P C A D) (Py C D C)) (Fdiv (Py4 P C A D) (Py C D C))
+++++
auto.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
subst U.
cases_equality A V.
clear H0.
unfold on_foot in H.
use H.
pose (d := C**D/A**V).
assert ({T : Point | Col T A V /\\ A ** T = d * A**V}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H5.
assert (A**T = C**D).
rewrite <- H8.
clear H5.
rewrite ( l_24_b A T P Y).
replace (2 * A ** T * A ** T) with (Py A T A) by (unfold Py;basic_simpl;uniformize_dir_seg;ring).
replace (Py A T A) with (Py C D C) by (unfold Py; uniformize_dir_seg; rewrite H8; ring).
replace (Py P A T) with (Py4 P C A D).

*****
H8 : eq (DSeg A T) (DSeg C D)
H : Col T A V
T : Point
d : F
H7 : not (eq A V)
H6 : Col Y A V
H0 : perp Y P A V
H4 : not (eq A V)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
Y,P,V,A,C,D : Point
*****
eq (Py4 P C A D) (Py P A T)
+++++
rewrite (l3_8_a A T D C P).
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
subst U.
cases_equality A V.
clear H0.
unfold on_foot in H.
use H.
pose (d := C**D/A**V).
assert ({T : Point | Col T A V /\\ A ** T = d * A**V}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H5.
assert (A**T = C**D).
rewrite <- H8.
clear H5.
rewrite ( l_24_b A T P Y).
replace (2 * A ** T * A ** T) with (Py A T A) by (unfold Py;basic_simpl;uniformize_dir_seg;ring).
replace (Py A T A) with (Py C D C) by (unfold Py; uniformize_dir_seg; rewrite H8; ring).
replace (Py P A T) with (Py4 P C A D).
rewrite (l3_8_a A T D C P).

*****
H8 : eq (DSeg A T) (DSeg C D)
H : Col T A V
T : Point
d : F
H7 : not (eq A V)
H6 : Col Y A V
H0 : perp Y P A V
H4 : not (eq A V)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
Y,P,V,A,C,D : Point
*****
eq (Py4 P C A D) (Py4 P C A D)
+++++
auto.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
subst U.
cases_equality A V.
clear H0.
unfold on_foot in H.
use H.
pose (d := C**D/A**V).
assert ({T : Point | Col T A V /\\ A ** T = d * A**V}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H5.
assert (A**T = C**D).
rewrite <- H8.
clear H5.
rewrite ( l_24_b A T P Y).
replace (2 * A ** T * A ** T) with (Py A T A) by (unfold Py;basic_simpl;uniformize_dir_seg;ring).
replace (Py A T A) with (Py C D C) by (unfold Py; uniformize_dir_seg; rewrite H8; ring).
replace (Py P A T) with (Py4 P C A D).
rewrite (l3_8_a A T D C P).

*****
H8 : eq (DSeg A T) (DSeg C D)
H : Col T A V
T : Point
d : F
H7 : not (eq A V)
H6 : Col Y A V
H0 : perp Y P A V
H4 : not (eq A V)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
Y,P,V,A,C,D : Point
*****
weak_3_parallelogram A T D C
+++++
auto.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
subst U.
cases_equality A V.
clear H0.
unfold on_foot in H.
use H.
pose (d := C**D/A**V).
assert ({T : Point | Col T A V /\\ A ** T = d * A**V}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H5.
assert (A**T = C**D).
rewrite <- H8.
clear H5.
rewrite ( l_24_b A T P Y).
replace (2 * A ** T * A ** T) with (Py A T A) by (unfold Py;basic_simpl;uniformize_dir_seg;ring).
replace (Py A T A) with (Py C D C) by (unfold Py; uniformize_dir_seg; rewrite H8; ring).
replace (Py P A T) with (Py4 P C A D).
rewrite (l3_8_a A T D C P).
auto.

*****
H8 : eq (DSeg A T) (DSeg C D)
H : Col T A V
T : Point
d : F
H7 : not (eq A V)
H6 : Col Y A V
H0 : perp Y P A V
H4 : not (eq A V)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
Y,P,V,A,C,D : Point
*****
weak_3_parallelogram A T D C
+++++
apply parallel_side_eq_weak_weak_weak_para.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
subst U.
cases_equality A V.
clear H0.
unfold on_foot in H.
use H.
pose (d := C**D/A**V).
assert ({T : Point | Col T A V /\\ A ** T = d * A**V}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H5.
assert (A**T = C**D).
rewrite <- H8.
clear H5.
rewrite ( l_24_b A T P Y).
replace (2 * A ** T * A ** T) with (Py A T A) by (unfold Py;basic_simpl;uniformize_dir_seg;ring).
replace (Py A T A) with (Py C D C) by (unfold Py; uniformize_dir_seg; rewrite H8; ring).
replace (Py P A T) with (Py4 P C A D).
rewrite (l3_8_a A T D C P).
auto.
apply parallel_side_eq_weak_weak_weak_para.

*****
H8 : eq (DSeg A T) (DSeg C D)
H : Col T A V
T : Point
d : F
H7 : not (eq A V)
H6 : Col Y A V
H0 : perp Y P A V
H4 : not (eq A V)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
Y,P,V,A,C,D : Point
*****
parallel A T C D
+++++
auto with Geom.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
subst U.
cases_equality A V.
clear H0.
unfold on_foot in H.
use H.
pose (d := C**D/A**V).
assert ({T : Point | Col T A V /\\ A ** T = d * A**V}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H5.
assert (A**T = C**D).
rewrite <- H8.
clear H5.
rewrite ( l_24_b A T P Y).
replace (2 * A ** T * A ** T) with (Py A T A) by (unfold Py;basic_simpl;uniformize_dir_seg;ring).
replace (Py A T A) with (Py C D C) by (unfold Py; uniformize_dir_seg; rewrite H8; ring).
replace (Py P A T) with (Py4 P C A D).
rewrite (l3_8_a A T D C P).
auto.
apply parallel_side_eq_weak_weak_weak_para.
auto with Geom.

*****
H8 : eq (DSeg A T) (DSeg C D)
H : Col T A V
T : Point
d : F
H7 : not (eq A V)
H6 : Col Y A V
H0 : perp Y P A V
H4 : not (eq A V)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
Y,P,V,A,C,D : Point
*****
parallel A T C D
+++++
assert (Col A Y T).
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
subst U.
cases_equality A V.
clear H0.
unfold on_foot in H.
use H.
pose (d := C**D/A**V).
assert ({T : Point | Col T A V /\\ A ** T = d * A**V}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H5.
assert (A**T = C**D).
rewrite <- H8.
clear H5.
rewrite ( l_24_b A T P Y).
replace (2 * A ** T * A ** T) with (Py A T A) by (unfold Py;basic_simpl;uniformize_dir_seg;ring).
replace (Py A T A) with (Py C D C) by (unfold Py; uniformize_dir_seg; rewrite H8; ring).
replace (Py P A T) with (Py4 P C A D).
rewrite (l3_8_a A T D C P).
auto.
apply parallel_side_eq_weak_weak_weak_para.
auto with Geom.
assert (Col A Y T).

*****
H8 : eq (DSeg A T) (DSeg C D)
H : Col T A V
T : Point
d : F
H7 : not (eq A V)
H6 : Col Y A V
H0 : perp Y P A V
H4 : not (eq A V)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
Y,P,V,A,C,D : Point
*****
Col A Y T
+++++
apply (col_trans_1 A V Y T H4).
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
subst U.
cases_equality A V.
clear H0.
unfold on_foot in H.
use H.
pose (d := C**D/A**V).
assert ({T : Point | Col T A V /\\ A ** T = d * A**V}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H5.
assert (A**T = C**D).
rewrite <- H8.
clear H5.
rewrite ( l_24_b A T P Y).
replace (2 * A ** T * A ** T) with (Py A T A) by (unfold Py;basic_simpl;uniformize_dir_seg;ring).
replace (Py A T A) with (Py C D C) by (unfold Py; uniformize_dir_seg; rewrite H8; ring).
replace (Py P A T) with (Py4 P C A D).
rewrite (l3_8_a A T D C P).
auto.
apply parallel_side_eq_weak_weak_weak_para.
auto with Geom.
assert (Col A Y T).
apply (col_trans_1 A V Y T H4).

*****
H8 : eq (DSeg A T) (DSeg C D)
H : Col T A V
T : Point
d : F
H7 : not (eq A V)
H6 : Col Y A V
H0 : perp Y P A V
H4 : not (eq A V)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
Y,P,V,A,C,D : Point
*****
Col A V Y
+++++
auto with Geom.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
subst U.
cases_equality A V.
clear H0.
unfold on_foot in H.
use H.
pose (d := C**D/A**V).
assert ({T : Point | Col T A V /\\ A ** T = d * A**V}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H5.
assert (A**T = C**D).
rewrite <- H8.
clear H5.
rewrite ( l_24_b A T P Y).
replace (2 * A ** T * A ** T) with (Py A T A) by (unfold Py;basic_simpl;uniformize_dir_seg;ring).
replace (Py A T A) with (Py C D C) by (unfold Py; uniformize_dir_seg; rewrite H8; ring).
replace (Py P A T) with (Py4 P C A D).
rewrite (l3_8_a A T D C P).
auto.
apply parallel_side_eq_weak_weak_weak_para.
auto with Geom.
assert (Col A Y T).
apply (col_trans_1 A V Y T H4).

*****
H8 : eq (DSeg A T) (DSeg C D)
H : Col T A V
T : Point
d : F
H7 : not (eq A V)
H6 : Col Y A V
H0 : perp Y P A V
H4 : not (eq A V)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
Y,P,V,A,C,D : Point
*****
Col A V T
+++++
auto with Geom.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
subst U.
cases_equality A V.
clear H0.
unfold on_foot in H.
use H.
pose (d := C**D/A**V).
assert ({T : Point | Col T A V /\\ A ** T = d * A**V}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H5.
assert (A**T = C**D).
rewrite <- H8.
clear H5.
rewrite ( l_24_b A T P Y).
replace (2 * A ** T * A ** T) with (Py A T A) by (unfold Py;basic_simpl;uniformize_dir_seg;ring).
replace (Py A T A) with (Py C D C) by (unfold Py; uniformize_dir_seg; rewrite H8; ring).
replace (Py P A T) with (Py4 P C A D).
rewrite (l3_8_a A T D C P).
auto.
apply parallel_side_eq_weak_weak_weak_para.
auto with Geom.
assert (Col A Y T).

*****
H5 : Col A Y T
H8 : eq (DSeg A T) (DSeg C D)
H : Col T A V
T : Point
d : F
H7 : not (eq A V)
H6 : Col Y A V
H0 : perp Y P A V
H4 : not (eq A V)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
Y,P,V,A,C,D : Point
*****
parallel A T C D
+++++
cut ( parallel C D A T).
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
subst U.
cases_equality A V.
clear H0.
unfold on_foot in H.
use H.
pose (d := C**D/A**V).
assert ({T : Point | Col T A V /\\ A ** T = d * A**V}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H5.
assert (A**T = C**D).
rewrite <- H8.
clear H5.
rewrite ( l_24_b A T P Y).
replace (2 * A ** T * A ** T) with (Py A T A) by (unfold Py;basic_simpl;uniformize_dir_seg;ring).
replace (Py A T A) with (Py C D C) by (unfold Py; uniformize_dir_seg; rewrite H8; ring).
replace (Py P A T) with (Py4 P C A D).
rewrite (l3_8_a A T D C P).
auto.
apply parallel_side_eq_weak_weak_weak_para.
auto with Geom.
assert (Col A Y T).
cut ( parallel C D A T).

*****
H5 : Col A Y T
H8 : eq (DSeg A T) (DSeg C D)
H : Col T A V
T : Point
d : F
H7 : not (eq A V)
H6 : Col Y A V
H0 : perp Y P A V
H4 : not (eq A V)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
Y,P,V,A,C,D : Point
*****
forall _ : parallel C D A T, parallel A T C D
+++++
auto with Geom.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
subst U.
cases_equality A V.
clear H0.
unfold on_foot in H.
use H.
pose (d := C**D/A**V).
assert ({T : Point | Col T A V /\\ A ** T = d * A**V}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H5.
assert (A**T = C**D).
rewrite <- H8.
clear H5.
rewrite ( l_24_b A T P Y).
replace (2 * A ** T * A ** T) with (Py A T A) by (unfold Py;basic_simpl;uniformize_dir_seg;ring).
replace (Py A T A) with (Py C D C) by (unfold Py; uniformize_dir_seg; rewrite H8; ring).
replace (Py P A T) with (Py4 P C A D).
rewrite (l3_8_a A T D C P).
auto.
apply parallel_side_eq_weak_weak_weak_para.
auto with Geom.
assert (Col A Y T).
cut ( parallel C D A T).

*****
H5 : Col A Y T
H8 : eq (DSeg A T) (DSeg C D)
H : Col T A V
T : Point
d : F
H7 : not (eq A V)
H6 : Col Y A V
H0 : perp Y P A V
H4 : not (eq A V)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
Y,P,V,A,C,D : Point
*****
parallel C D A T
+++++
apply (parallel_transitivity C D A Y A T).
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
subst U.
cases_equality A V.
clear H0.
unfold on_foot in H.
use H.
pose (d := C**D/A**V).
assert ({T : Point | Col T A V /\\ A ** T = d * A**V}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H5.
assert (A**T = C**D).
rewrite <- H8.
clear H5.
rewrite ( l_24_b A T P Y).
replace (2 * A ** T * A ** T) with (Py A T A) by (unfold Py;basic_simpl;uniformize_dir_seg;ring).
replace (Py A T A) with (Py C D C) by (unfold Py; uniformize_dir_seg; rewrite H8; ring).
replace (Py P A T) with (Py4 P C A D).
rewrite (l3_8_a A T D C P).
auto.
apply parallel_side_eq_weak_weak_weak_para.
auto with Geom.
assert (Col A Y T).
cut ( parallel C D A T).
apply (parallel_transitivity C D A Y A T).

*****
H5 : Col A Y T
H8 : eq (DSeg A T) (DSeg C D)
H : Col T A V
T : Point
d : F
H7 : not (eq A V)
H6 : Col Y A V
H0 : perp Y P A V
H4 : not (eq A V)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
Y,P,V,A,C,D : Point
*****
not (eq A Y)
+++++
auto with Geom.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
subst U.
cases_equality A V.
clear H0.
unfold on_foot in H.
use H.
pose (d := C**D/A**V).
assert ({T : Point | Col T A V /\\ A ** T = d * A**V}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H5.
assert (A**T = C**D).
rewrite <- H8.
clear H5.
rewrite ( l_24_b A T P Y).
replace (2 * A ** T * A ** T) with (Py A T A) by (unfold Py;basic_simpl;uniformize_dir_seg;ring).
replace (Py A T A) with (Py C D C) by (unfold Py; uniformize_dir_seg; rewrite H8; ring).
replace (Py P A T) with (Py4 P C A D).
rewrite (l3_8_a A T D C P).
auto.
apply parallel_side_eq_weak_weak_weak_para.
auto with Geom.
assert (Col A Y T).
cut ( parallel C D A T).
apply (parallel_transitivity C D A Y A T).

*****
H5 : Col A Y T
H8 : eq (DSeg A T) (DSeg C D)
H : Col T A V
T : Point
d : F
H7 : not (eq A V)
H6 : Col Y A V
H0 : perp Y P A V
H4 : not (eq A V)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
Y,P,V,A,C,D : Point
*****
parallel C D A Y
+++++
auto with Geom.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
subst U.
cases_equality A V.
clear H0.
unfold on_foot in H.
use H.
pose (d := C**D/A**V).
assert ({T : Point | Col T A V /\\ A ** T = d * A**V}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H5.
assert (A**T = C**D).
rewrite <- H8.
clear H5.
rewrite ( l_24_b A T P Y).
replace (2 * A ** T * A ** T) with (Py A T A) by (unfold Py;basic_simpl;uniformize_dir_seg;ring).
replace (Py A T A) with (Py C D C) by (unfold Py; uniformize_dir_seg; rewrite H8; ring).
replace (Py P A T) with (Py4 P C A D).
rewrite (l3_8_a A T D C P).
auto.
apply parallel_side_eq_weak_weak_weak_para.
auto with Geom.
assert (Col A Y T).
cut ( parallel C D A T).
apply (parallel_transitivity C D A Y A T).

*****
H5 : Col A Y T
H8 : eq (DSeg A T) (DSeg C D)
H : Col T A V
T : Point
d : F
H7 : not (eq A V)
H6 : Col Y A V
H0 : perp Y P A V
H4 : not (eq A V)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
Y,P,V,A,C,D : Point
*****
parallel A Y A T
+++++
auto with Geom.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
subst U.
cases_equality A V.
clear H0.
unfold on_foot in H.
use H.
pose (d := C**D/A**V).
assert ({T : Point | Col T A V /\\ A ** T = d * A**V}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H5.
assert (A**T = C**D).
rewrite <- H8.
clear H5.
rewrite ( l_24_b A T P Y).
replace (2 * A ** T * A ** T) with (Py A T A) by (unfold Py;basic_simpl;uniformize_dir_seg;ring).
replace (Py A T A) with (Py C D C) by (unfold Py; uniformize_dir_seg; rewrite H8; ring).
replace (Py P A T) with (Py4 P C A D).
rewrite (l3_8_a A T D C P).
auto.
apply parallel_side_eq_weak_weak_weak_para.

*****
H8 : eq (DSeg A T) (DSeg C D)
H : Col T A V
T : Point
d : F
H7 : not (eq A V)
H6 : Col Y A V
H0 : perp Y P A V
H4 : not (eq A V)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
Y,P,V,A,C,D : Point
*****
eq (DSeg A T) (DSeg C D)
+++++
auto with Geom.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
subst U.
cases_equality A V.
clear H0.
unfold on_foot in H.
use H.
pose (d := C**D/A**V).
assert ({T : Point | Col T A V /\\ A ** T = d * A**V}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H5.
assert (A**T = C**D).
rewrite <- H8.
clear H5.
rewrite ( l_24_b A T P Y).

*****
H8 : eq (DSeg A T) (DSeg C D)
H : Col T A V
T : Point
d : F
H7 : not (eq A V)
H6 : Col Y A V
H0 : perp Y P A V
H4 : not (eq A V)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
Y,P,V,A,C,D : Point
*****
Col A Y T
+++++
unfold parallel.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
subst U.
cases_equality A V.
clear H0.
unfold on_foot in H.
use H.
pose (d := C**D/A**V).
assert ({T : Point | Col T A V /\\ A ** T = d * A**V}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H5.
assert (A**T = C**D).
rewrite <- H8.
clear H5.
rewrite ( l_24_b A T P Y).
unfold parallel.

*****
H8 : eq (DSeg A T) (DSeg C D)
H : Col T A V
T : Point
d : F
H7 : not (eq A V)
H6 : Col Y A V
H0 : perp Y P A V
H4 : not (eq A V)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
Y,P,V,A,C,D : Point
*****
Col A Y T
+++++
unfold S4.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
subst U.
cases_equality A V.
clear H0.
unfold on_foot in H.
use H.
pose (d := C**D/A**V).
assert ({T : Point | Col T A V /\\ A ** T = d * A**V}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H5.
assert (A**T = C**D).
rewrite <- H8.
clear H5.
rewrite ( l_24_b A T P Y).
unfold parallel.
unfold S4.

*****
H8 : eq (DSeg A T) (DSeg C D)
H : Col T A V
T : Point
d : F
H7 : not (eq A V)
H6 : Col Y A V
H0 : perp Y P A V
H4 : not (eq A V)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
Y,P,V,A,C,D : Point
*****
Col A Y T
+++++
basic_simpl.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
subst U.
cases_equality A V.
clear H0.
unfold on_foot in H.
use H.
pose (d := C**D/A**V).
assert ({T : Point | Col T A V /\\ A ** T = d * A**V}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H5.
assert (A**T = C**D).
rewrite <- H8.
clear H5.
rewrite ( l_24_b A T P Y).
unfold parallel.
unfold S4.
basic_simpl.

*****
H8 : eq (DSeg A T) (DSeg C D)
H : Col T A V
T : Point
d : F
H7 : not (eq A V)
H6 : Col Y A V
H0 : perp Y P A V
H4 : not (eq A V)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
Y,P,V,A,C,D : Point
*****
Col A Y T
+++++
auto.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
subst U.
cases_equality A V.
clear H0.
unfold on_foot in H.
use H.
pose (d := C**D/A**V).
assert ({T : Point | Col T A V /\\ A ** T = d * A**V}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H5.
assert (A**T = C**D).
rewrite <- H8.
clear H5.
rewrite ( l_24_b A T P Y).
unfold parallel.
unfold S4.
basic_simpl.
auto.

*****
H8 : eq (DSeg A T) (DSeg C D)
H : Col T A V
T : Point
d : F
H7 : not (eq A V)
H6 : Col Y A V
H0 : perp Y P A V
H4 : not (eq A V)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
Y,P,V,A,C,D : Point
*****
Col A Y T
+++++
apply (col_trans_1 A V Y T H7).
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
subst U.
cases_equality A V.
clear H0.
unfold on_foot in H.
use H.
pose (d := C**D/A**V).
assert ({T : Point | Col T A V /\\ A ** T = d * A**V}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H5.
assert (A**T = C**D).
rewrite <- H8.
clear H5.
rewrite ( l_24_b A T P Y).
unfold parallel.
unfold S4.
basic_simpl.
auto.
apply (col_trans_1 A V Y T H7).

*****
H8 : eq (DSeg A T) (DSeg C D)
H : Col T A V
T : Point
d : F
H7 : not (eq A V)
H6 : Col Y A V
H0 : perp Y P A V
H4 : not (eq A V)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
Y,P,V,A,C,D : Point
*****
Col A V Y
+++++
auto with Geom.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
subst U.
cases_equality A V.
clear H0.
unfold on_foot in H.
use H.
pose (d := C**D/A**V).
assert ({T : Point | Col T A V /\\ A ** T = d * A**V}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H5.
assert (A**T = C**D).
rewrite <- H8.
clear H5.
rewrite ( l_24_b A T P Y).
unfold parallel.
unfold S4.
basic_simpl.
auto.
apply (col_trans_1 A V Y T H7).

*****
H8 : eq (DSeg A T) (DSeg C D)
H : Col T A V
T : Point
d : F
H7 : not (eq A V)
H6 : Col Y A V
H0 : perp Y P A V
H4 : not (eq A V)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
Y,P,V,A,C,D : Point
*****
Col A V T
+++++
auto with Geom.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
subst U.
cases_equality A V.
clear H0.
unfold on_foot in H.
use H.
pose (d := C**D/A**V).
assert ({T : Point | Col T A V /\\ A ** T = d * A**V}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H5.
assert (A**T = C**D).
rewrite <- H8.
clear H5.
rewrite ( l_24_b A T P Y).

*****
H8 : eq (DSeg A T) (DSeg C D)
H : Col T A V
T : Point
d : F
H7 : not (eq A V)
H6 : Col Y A V
H0 : perp Y P A V
H4 : not (eq A V)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
Y,P,V,A,C,D : Point
*****
perp A T P Y
+++++
apply (perp_para_perp A V P Y A T).
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
subst U.
cases_equality A V.
clear H0.
unfold on_foot in H.
use H.
pose (d := C**D/A**V).
assert ({T : Point | Col T A V /\\ A ** T = d * A**V}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H5.
assert (A**T = C**D).
rewrite <- H8.
clear H5.
rewrite ( l_24_b A T P Y).
apply (perp_para_perp A V P Y A T).

*****
H8 : eq (DSeg A T) (DSeg C D)
H : Col T A V
T : Point
d : F
H7 : not (eq A V)
H6 : Col Y A V
H0 : perp Y P A V
H4 : not (eq A V)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
Y,P,V,A,C,D : Point
*****
not (eq A V)
+++++
auto.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
subst U.
cases_equality A V.
clear H0.
unfold on_foot in H.
use H.
pose (d := C**D/A**V).
assert ({T : Point | Col T A V /\\ A ** T = d * A**V}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H5.
assert (A**T = C**D).
rewrite <- H8.
clear H5.
rewrite ( l_24_b A T P Y).
apply (perp_para_perp A V P Y A T).

*****
H8 : eq (DSeg A T) (DSeg C D)
H : Col T A V
T : Point
d : F
H7 : not (eq A V)
H6 : Col Y A V
H0 : perp Y P A V
H4 : not (eq A V)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
Y,P,V,A,C,D : Point
*****
perp A V P Y
+++++
auto.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
subst U.
cases_equality A V.
clear H0.
unfold on_foot in H.
use H.
pose (d := C**D/A**V).
assert ({T : Point | Col T A V /\\ A ** T = d * A**V}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H5.
assert (A**T = C**D).
rewrite <- H8.
clear H5.
rewrite ( l_24_b A T P Y).
apply (perp_para_perp A V P Y A T).
auto.

*****
H8 : eq (DSeg A T) (DSeg C D)
H : Col T A V
T : Point
d : F
H7 : not (eq A V)
H6 : Col Y A V
H0 : perp Y P A V
H4 : not (eq A V)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
Y,P,V,A,C,D : Point
*****
perp A V P Y
+++++
auto with Geom.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
subst U.
cases_equality A V.
clear H0.
unfold on_foot in H.
use H.
pose (d := C**D/A**V).
assert ({T : Point | Col T A V /\\ A ** T = d * A**V}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H5.
assert (A**T = C**D).
rewrite <- H8.
clear H5.
rewrite ( l_24_b A T P Y).
apply (perp_para_perp A V P Y A T).

*****
H8 : eq (DSeg A T) (DSeg C D)
H : Col T A V
T : Point
d : F
H7 : not (eq A V)
H6 : Col Y A V
H0 : perp Y P A V
H4 : not (eq A V)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
Y,P,V,A,C,D : Point
*****
parallel A V A T
+++++
auto.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
subst U.
cases_equality A V.
clear H0.
unfold on_foot in H.
use H.
pose (d := C**D/A**V).
assert ({T : Point | Col T A V /\\ A ** T = d * A**V}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H5.
assert (A**T = C**D).
rewrite <- H8.
clear H5.
rewrite ( l_24_b A T P Y).
apply (perp_para_perp A V P Y A T).
auto.

*****
H8 : eq (DSeg A T) (DSeg C D)
H : Col T A V
T : Point
d : F
H7 : not (eq A V)
H6 : Col Y A V
H0 : perp Y P A V
H4 : not (eq A V)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
Y,P,V,A,C,D : Point
*****
parallel A V A T
+++++
unfold parallel.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
subst U.
cases_equality A V.
clear H0.
unfold on_foot in H.
use H.
pose (d := C**D/A**V).
assert ({T : Point | Col T A V /\\ A ** T = d * A**V}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H5.
assert (A**T = C**D).
rewrite <- H8.
clear H5.
rewrite ( l_24_b A T P Y).
apply (perp_para_perp A V P Y A T).
auto.
unfold parallel.

*****
H8 : eq (DSeg A T) (DSeg C D)
H : Col T A V
T : Point
d : F
H7 : not (eq A V)
H6 : Col Y A V
H0 : perp Y P A V
H4 : not (eq A V)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
Y,P,V,A,C,D : Point
*****
eq (S4 A A V T) F0
+++++
unfold S4.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
subst U.
cases_equality A V.
clear H0.
unfold on_foot in H.
use H.
pose (d := C**D/A**V).
assert ({T : Point | Col T A V /\\ A ** T = d * A**V}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H5.
assert (A**T = C**D).
rewrite <- H8.
clear H5.
rewrite ( l_24_b A T P Y).
apply (perp_para_perp A V P Y A T).
auto.
unfold parallel.
unfold S4.

*****
H8 : eq (DSeg A T) (DSeg C D)
H : Col T A V
T : Point
d : F
H7 : not (eq A V)
H6 : Col Y A V
H0 : perp Y P A V
H4 : not (eq A V)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
Y,P,V,A,C,D : Point
*****
eq (Fplus (S A A V) (S A V T)) F0
+++++
basic_simpl.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
subst U.
cases_equality A V.
clear H0.
unfold on_foot in H.
use H.
pose (d := C**D/A**V).
assert ({T : Point | Col T A V /\\ A ** T = d * A**V}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H5.
assert (A**T = C**D).
rewrite <- H8.
clear H5.
rewrite ( l_24_b A T P Y).
apply (perp_para_perp A V P Y A T).
auto.
unfold parallel.
unfold S4.
basic_simpl.

*****
H8 : eq (DSeg A T) (DSeg C D)
H : Col T A V
T : Point
d : F
H7 : not (eq A V)
H6 : Col Y A V
H0 : perp Y P A V
H4 : not (eq A V)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
Y,P,V,A,C,D : Point
*****
eq (S A V T) F0
+++++
assert (Col A V T).
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
subst U.
cases_equality A V.
clear H0.
unfold on_foot in H.
use H.
pose (d := C**D/A**V).
assert ({T : Point | Col T A V /\\ A ** T = d * A**V}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H5.
assert (A**T = C**D).
rewrite <- H8.
clear H5.
rewrite ( l_24_b A T P Y).
apply (perp_para_perp A V P Y A T).
auto.
unfold parallel.
unfold S4.
basic_simpl.
assert (Col A V T).

*****
H8 : eq (DSeg A T) (DSeg C D)
H : Col T A V
T : Point
d : F
H7 : not (eq A V)
H6 : Col Y A V
H0 : perp Y P A V
H4 : not (eq A V)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
Y,P,V,A,C,D : Point
*****
Col A V T
+++++
auto with Geom.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
subst U.
cases_equality A V.
clear H0.
unfold on_foot in H.
use H.
pose (d := C**D/A**V).
assert ({T : Point | Col T A V /\\ A ** T = d * A**V}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H5.
assert (A**T = C**D).
rewrite <- H8.
clear H5.
rewrite ( l_24_b A T P Y).
apply (perp_para_perp A V P Y A T).
auto.
unfold parallel.
unfold S4.
basic_simpl.
assert (Col A V T).

*****
H5 : Col A V T
H8 : eq (DSeg A T) (DSeg C D)
H : Col T A V
T : Point
d : F
H7 : not (eq A V)
H6 : Col Y A V
H0 : perp Y P A V
H4 : not (eq A V)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
Y,P,V,A,C,D : Point
*****
eq (S A V T) F0
+++++
auto with Geom.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
subst U.
cases_equality A V.
clear H0.
unfold on_foot in H.
use H.
pose (d := C**D/A**V).
assert ({T : Point | Col T A V /\\ A ** T = d * A**V}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H5.
assert (A**T = C**D).
rewrite <- H8.
clear H5.
rewrite ( l_24_b A T P Y).

*****
H8 : eq (DSeg A T) (DSeg C D)
H : Col T A V
T : Point
d : F
H7 : not (eq A V)
H6 : Col Y A V
H0 : perp Y P A V
H4 : not (eq A V)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
Y,P,V,A,C,D : Point
*****
not (eq A T)
+++++
unfold not.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
subst U.
cases_equality A V.
clear H0.
unfold on_foot in H.
use H.
pose (d := C**D/A**V).
assert ({T : Point | Col T A V /\\ A ** T = d * A**V}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H5.
assert (A**T = C**D).
rewrite <- H8.
clear H5.
rewrite ( l_24_b A T P Y).
unfold not.

*****
H8 : eq (DSeg A T) (DSeg C D)
H : Col T A V
T : Point
d : F
H7 : not (eq A V)
H6 : Col Y A V
H0 : perp Y P A V
H4 : not (eq A V)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
Y,P,V,A,C,D : Point
*****
forall _ : eq A T, False
+++++
intro.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
subst U.
cases_equality A V.
clear H0.
unfold on_foot in H.
use H.
pose (d := C**D/A**V).
assert ({T : Point | Col T A V /\\ A ** T = d * A**V}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H5.
assert (A**T = C**D).
rewrite <- H8.
clear H5.
rewrite ( l_24_b A T P Y).
unfold not.
intro.

*****
H5 : eq A T
H8 : eq (DSeg A T) (DSeg C D)
H : Col T A V
T : Point
d : F
H7 : not (eq A V)
H6 : Col Y A V
H0 : perp Y P A V
H4 : not (eq A V)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
Y,P,V,A,C,D : Point
*****
False
+++++
subst.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
subst U.
cases_equality A V.
clear H0.
unfold on_foot in H.
use H.
pose (d := C**D/A**V).
assert ({T : Point | Col T A V /\\ A ** T = d * A**V}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H5.
assert (A**T = C**D).
rewrite <- H8.
clear H5.
rewrite ( l_24_b A T P Y).
unfold not.
intro.
subst.

*****
H3 : not (eq T Y)
H4 : not (eq T V)
H0 : perp Y P T V
H6 : Col Y T V
H7 : not (eq T V)
d : F
H2 : not (eq C D)
H1 : parallel T Y C D
H : Col T T V
H8 : eq (DSeg T T) (DSeg C D)
Y,P,V,C,D,T : Point
*****
False
+++++
basic_simpl.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
subst U.
cases_equality A V.
clear H0.
unfold on_foot in H.
use H.
pose (d := C**D/A**V).
assert ({T : Point | Col T A V /\\ A ** T = d * A**V}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H5.
assert (A**T = C**D).
rewrite <- H8.
clear H5.
rewrite ( l_24_b A T P Y).
unfold not.
intro.
subst.
basic_simpl.

*****
H3 : not (eq T Y)
H4 : not (eq T V)
H0 : perp Y P T V
H6 : Col Y T V
H7 : not (eq T V)
d : F
H2 : not (eq C D)
H1 : parallel T Y C D
H : Col T T V
H8 : eq F0 (DSeg C D)
Y,P,V,C,D,T : Point
*****
False
+++++
assert (C=D).
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
subst U.
cases_equality A V.
clear H0.
unfold on_foot in H.
use H.
pose (d := C**D/A**V).
assert ({T : Point | Col T A V /\\ A ** T = d * A**V}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H5.
assert (A**T = C**D).
rewrite <- H8.
clear H5.
rewrite ( l_24_b A T P Y).
unfold not.
intro.
subst.
basic_simpl.
assert (C=D).

*****
H3 : not (eq T Y)
H4 : not (eq T V)
H0 : perp Y P T V
H6 : Col Y T V
H7 : not (eq T V)
d : F
H2 : not (eq C D)
H1 : parallel T Y C D
H : Col T T V
H8 : eq F0 (DSeg C D)
Y,P,V,C,D,T : Point
*****
eq C D
+++++
auto with Geom.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
subst U.
cases_equality A V.
clear H0.
unfold on_foot in H.
use H.
pose (d := C**D/A**V).
assert ({T : Point | Col T A V /\\ A ** T = d * A**V}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H5.
assert (A**T = C**D).
rewrite <- H8.
clear H5.
rewrite ( l_24_b A T P Y).
unfold not.
intro.
subst.
basic_simpl.
assert (C=D).

*****
H5 : eq C D
H3 : not (eq T Y)
H4 : not (eq T V)
H0 : perp Y P T V
H6 : Col Y T V
H7 : not (eq T V)
d : F
H2 : not (eq C D)
H1 : parallel T Y C D
H : Col T T V
H8 : eq F0 (DSeg C D)
Y,P,V,C,D,T : Point
*****
False
+++++
intuition.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.

*****
H4 : not (eq A U)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A U V
H : on_foot Y P U V
Y,P,U,V,A,C,D : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (Py4 P C A D) (Py C D C))
+++++
unfold on_foot in H.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
unfold on_foot in H.

*****
H4 : not (eq A U)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A U V
H : and (perp Y P U V) (and (Col Y U V) (not (eq U V)))
Y,P,U,V,A,C,D : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (Py4 P C A D) (Py C D C))
+++++
use H.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
unfold on_foot in H.
use H.

*****
H8 : not (eq U V)
H7 : Col Y U V
H5 : perp Y P U V
H4 : not (eq A U)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A U V
Y,P,U,V,A,C,D : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (Py4 P C A D) (Py C D C))
+++++
pose (d := C**D/A**U).
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
unfold on_foot in H.
use H.
pose (d := C**D/A**U).

*****
d : F
H8 : not (eq U V)
H7 : Col Y U V
H5 : perp Y P U V
H4 : not (eq A U)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A U V
Y,P,U,V,A,C,D : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (Py4 P C A D) (Py C D C))
+++++
assert ({T : Point | Col T A U /\ A ** T = d * A**U}).
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
unfold on_foot in H.
use H.
pose (d := C**D/A**U).
assert ({T : Point | Col T A U /\\ A ** T = d * A**U}).

*****
d : F
H8 : not (eq U V)
H7 : Col Y U V
H5 : perp Y P U V
H4 : not (eq A U)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A U V
Y,P,U,V,A,C,D : Point
*****
sig (fun T : Point => and (Col T A U) (eq (DSeg A T) (Fmult d (DSeg A U))))
+++++
apply (on_line_dex A U).
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
unfold on_foot in H.
use H.
pose (d := C**D/A**U).
assert ({T : Point | Col T A U /\\ A ** T = d * A**U}).
apply (on_line_dex A U).

*****
d : F
H8 : not (eq U V)
H7 : Col Y U V
H5 : perp Y P U V
H4 : not (eq A U)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A U V
Y,P,U,V,A,C,D : Point
*****
not (eq A U)
+++++
assumption.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
unfold on_foot in H.
use H.
pose (d := C**D/A**U).
assert ({T : Point | Col T A U /\\ A ** T = d * A**U}).

*****
H : sig\n (fun T : Point =>\n and (Col T A U) (eq (DSeg A T) (Fmult d (DSeg A U))))
d : F
H8 : not (eq U V)
H7 : Col Y U V
H5 : perp Y P U V
H4 : not (eq A U)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A U V
Y,P,U,V,A,C,D : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (Py4 P C A D) (Py C D C))
+++++
elim H.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
unfold on_foot in H.
use H.
pose (d := C**D/A**U).
assert ({T : Point | Col T A U /\\ A ** T = d * A**U}).
elim H.

*****
H : sig\n (fun T : Point =>\n and (Col T A U) (eq (DSeg A T) (Fmult d (DSeg A U))))
d : F
H8 : not (eq U V)
H7 : Col Y U V
H5 : perp Y P U V
H4 : not (eq A U)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A U V
Y,P,U,V,A,C,D : Point
*****
forall (x : Point) (_ : and (Col x A U) (eq (DSeg A x) (Fmult d (DSeg A U)))), eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (Py4 P C A D) (Py C D C))
+++++
intros T HT.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
unfold on_foot in H.
use H.
pose (d := C**D/A**U).
assert ({T : Point | Col T A U /\\ A ** T = d * A**U}).
elim H.
intros T HT.

*****
HT : and (Col T A U) (eq (DSeg A T) (Fmult d (DSeg A U)))
T : Point
H : sig\n (fun T : Point =>\n and (Col T A U) (eq (DSeg A T) (Fmult d (DSeg A U))))
d : F
H8 : not (eq U V)
H7 : Col Y U V
H5 : perp Y P U V
H4 : not (eq A U)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A U V
Y,P,U,V,A,C,D : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (Py4 P C A D) (Py C D C))
+++++
clear H.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
unfold on_foot in H.
use H.
pose (d := C**D/A**U).
assert ({T : Point | Col T A U /\\ A ** T = d * A**U}).
elim H.
intros T HT.
clear H.

*****
HT : and (Col T A U) (eq (DSeg A T) (Fmult d (DSeg A U)))
T : Point
d : F
H8 : not (eq U V)
H7 : Col Y U V
H5 : perp Y P U V
H4 : not (eq A U)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A U V
Y,P,U,V,A,C,D : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (Py4 P C A D) (Py C D C))
+++++
use HT.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
unfold on_foot in H.
use H.
pose (d := C**D/A**U).
assert ({T : Point | Col T A U /\\ A ** T = d * A**U}).
elim H.
intros T HT.
clear H.
use HT.

*****
H6 : eq (DSeg A T) (Fmult d (DSeg A U))
H : Col T A U
T : Point
d : F
H8 : not (eq U V)
H7 : Col Y U V
H5 : perp Y P U V
H4 : not (eq A U)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A U V
Y,P,U,V,A,C,D : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (Py4 P C A D) (Py C D C))
+++++
unfold d in H6.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
unfold on_foot in H.
use H.
pose (d := C**D/A**U).
assert ({T : Point | Col T A U /\\ A ** T = d * A**U}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H6.

*****
H6 : eq (DSeg A T) (Fmult (Fdiv (DSeg C D) (DSeg A U)) (DSeg A U))
H : Col T A U
T : Point
d : F
H8 : not (eq U V)
H7 : Col Y U V
H5 : perp Y P U V
H4 : not (eq A U)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A U V
Y,P,U,V,A,C,D : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (Py4 P C A D) (Py C D C))
+++++
assert (A**T = C**D).
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
unfold on_foot in H.
use H.
pose (d := C**D/A**U).
assert ({T : Point | Col T A U /\\ A ** T = d * A**U}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H6.
assert (A**T = C**D).

*****
H6 : eq (DSeg A T) (Fmult (Fdiv (DSeg C D) (DSeg A U)) (DSeg A U))
H : Col T A U
T : Point
d : F
H8 : not (eq U V)
H7 : Col Y U V
H5 : perp Y P U V
H4 : not (eq A U)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A U V
Y,P,U,V,A,C,D : Point
*****
eq (DSeg A T) (DSeg C D)
+++++
rewrite H6.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
unfold on_foot in H.
use H.
pose (d := C**D/A**U).
assert ({T : Point | Col T A U /\\ A ** T = d * A**U}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H6.
assert (A**T = C**D).
rewrite H6.

*****
H6 : eq (DSeg A T) (Fmult (Fdiv (DSeg C D) (DSeg A U)) (DSeg A U))
H : Col T A U
T : Point
d : F
H8 : not (eq U V)
H7 : Col Y U V
H5 : perp Y P U V
H4 : not (eq A U)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A U V
Y,P,U,V,A,C,D : Point
*****
eq (Fmult (Fdiv (DSeg C D) (DSeg A U)) (DSeg A U)) (DSeg C D)
+++++
field.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
unfold on_foot in H.
use H.
pose (d := C**D/A**U).
assert ({T : Point | Col T A U /\\ A ** T = d * A**U}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H6.
assert (A**T = C**D).
rewrite H6.
field.

*****
H6 : eq (DSeg A T) (Fmult (Fdiv (DSeg C D) (DSeg A U)) (DSeg A U))
H : Col T A U
T : Point
d : F
H8 : not (eq U V)
H7 : Col Y U V
H5 : perp Y P U V
H4 : not (eq A U)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A U V
Y,P,U,V,A,C,D : Point
*****
not (eq (DSeg A U) F0)
+++++
auto with Geom.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
unfold on_foot in H.
use H.
pose (d := C**D/A**U).
assert ({T : Point | Col T A U /\\ A ** T = d * A**U}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H6.
assert (A**T = C**D).

*****
H9 : eq (DSeg A T) (DSeg C D)
H6 : eq (DSeg A T) (Fmult (Fdiv (DSeg C D) (DSeg A U)) (DSeg A U))
H : Col T A U
T : Point
d : F
H8 : not (eq U V)
H7 : Col Y U V
H5 : perp Y P U V
H4 : not (eq A U)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A U V
Y,P,U,V,A,C,D : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (Py4 P C A D) (Py C D C))
+++++
rewrite <- H9.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
unfold on_foot in H.
use H.
pose (d := C**D/A**U).
assert ({T : Point | Col T A U /\\ A ** T = d * A**U}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H6.
assert (A**T = C**D).
rewrite <- H9.

*****
H9 : eq (DSeg A T) (DSeg C D)
H6 : eq (DSeg A T) (Fmult (Fdiv (DSeg C D) (DSeg A U)) (DSeg A U))
H : Col T A U
T : Point
d : F
H8 : not (eq U V)
H7 : Col Y U V
H5 : perp Y P U V
H4 : not (eq A U)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A U V
Y,P,U,V,A,C,D : Point
*****
eq (Fdiv (DSeg A Y) (DSeg A T)) (Fdiv (Py4 P C A D) (Py C D C))
+++++
clear H6.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
unfold on_foot in H.
use H.
pose (d := C**D/A**U).
assert ({T : Point | Col T A U /\\ A ** T = d * A**U}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H6.
assert (A**T = C**D).
rewrite <- H9.
clear H6.

*****
H9 : eq (DSeg A T) (DSeg C D)
H : Col T A U
T : Point
d : F
H8 : not (eq U V)
H7 : Col Y U V
H5 : perp Y P U V
H4 : not (eq A U)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A U V
Y,P,U,V,A,C,D : Point
*****
eq (Fdiv (DSeg A Y) (DSeg A T)) (Fdiv (Py4 P C A D) (Py C D C))
+++++
rewrite ( l_24_b A T P Y).
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
unfold on_foot in H.
use H.
pose (d := C**D/A**U).
assert ({T : Point | Col T A U /\\ A ** T = d * A**U}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H6.
assert (A**T = C**D).
rewrite <- H9.
clear H6.
rewrite ( l_24_b A T P Y).

*****
H9 : eq (DSeg A T) (DSeg C D)
H : Col T A U
T : Point
d : F
H8 : not (eq U V)
H7 : Col Y U V
H5 : perp Y P U V
H4 : not (eq A U)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A U V
Y,P,U,V,A,C,D : Point
*****
eq (Fdiv (Py P A T) (Fmult (Fmult (Fplus F1 F1) (DSeg A T)) (DSeg A T))) (Fdiv (Py4 P C A D) (Py C D C))
+++++
replace (2 * A ** T * A ** T) with (Py A T A) by (unfold Py;basic_simpl;uniformize_dir_seg;ring).
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
unfold on_foot in H.
use H.
pose (d := C**D/A**U).
assert ({T : Point | Col T A U /\\ A ** T = d * A**U}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H6.
assert (A**T = C**D).
rewrite <- H9.
clear H6.
rewrite ( l_24_b A T P Y).
replace (2 * A ** T * A ** T) with (Py A T A) by (unfold Py;basic_simpl;uniformize_dir_seg;ring).

*****
H9 : eq (DSeg A T) (DSeg C D)
H : Col T A U
T : Point
d : F
H8 : not (eq U V)
H7 : Col Y U V
H5 : perp Y P U V
H4 : not (eq A U)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A U V
Y,P,U,V,A,C,D : Point
*****
eq (Fdiv (Py P A T) (Py A T A)) (Fdiv (Py4 P C A D) (Py C D C))
+++++
replace (Py A T A) with (Py C D C) by (unfold Py; uniformize_dir_seg; rewrite H9; ring).
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
unfold on_foot in H.
use H.
pose (d := C**D/A**U).
assert ({T : Point | Col T A U /\\ A ** T = d * A**U}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H6.
assert (A**T = C**D).
rewrite <- H9.
clear H6.
rewrite ( l_24_b A T P Y).
replace (2 * A ** T * A ** T) with (Py A T A) by (unfold Py;basic_simpl;uniformize_dir_seg;ring).
replace (Py A T A) with (Py C D C) by (unfold Py; uniformize_dir_seg; rewrite H9; ring).

*****
H9 : eq (DSeg A T) (DSeg C D)
H : Col T A U
T : Point
d : F
H8 : not (eq U V)
H7 : Col Y U V
H5 : perp Y P U V
H4 : not (eq A U)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A U V
Y,P,U,V,A,C,D : Point
*****
eq (Fdiv (Py P A T) (Py C D C)) (Fdiv (Py4 P C A D) (Py C D C))
+++++
replace (Py P A T) with (Py4 P C A D).
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
unfold on_foot in H.
use H.
pose (d := C**D/A**U).
assert ({T : Point | Col T A U /\\ A ** T = d * A**U}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H6.
assert (A**T = C**D).
rewrite <- H9.
clear H6.
rewrite ( l_24_b A T P Y).
replace (2 * A ** T * A ** T) with (Py A T A) by (unfold Py;basic_simpl;uniformize_dir_seg;ring).
replace (Py A T A) with (Py C D C) by (unfold Py; uniformize_dir_seg; rewrite H9; ring).
replace (Py P A T) with (Py4 P C A D).

*****
H9 : eq (DSeg A T) (DSeg C D)
H : Col T A U
T : Point
d : F
H8 : not (eq U V)
H7 : Col Y U V
H5 : perp Y P U V
H4 : not (eq A U)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A U V
Y,P,U,V,A,C,D : Point
*****
eq (Fdiv (Py4 P C A D) (Py C D C)) (Fdiv (Py4 P C A D) (Py C D C))
+++++
auto.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
unfold on_foot in H.
use H.
pose (d := C**D/A**U).
assert ({T : Point | Col T A U /\\ A ** T = d * A**U}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H6.
assert (A**T = C**D).
rewrite <- H9.
clear H6.
rewrite ( l_24_b A T P Y).
replace (2 * A ** T * A ** T) with (Py A T A) by (unfold Py;basic_simpl;uniformize_dir_seg;ring).
replace (Py A T A) with (Py C D C) by (unfold Py; uniformize_dir_seg; rewrite H9; ring).
replace (Py P A T) with (Py4 P C A D).

*****
H9 : eq (DSeg A T) (DSeg C D)
H : Col T A U
T : Point
d : F
H8 : not (eq U V)
H7 : Col Y U V
H5 : perp Y P U V
H4 : not (eq A U)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A U V
Y,P,U,V,A,C,D : Point
*****
eq (Py4 P C A D) (Py P A T)
+++++
rewrite (l3_8_a A T D C P).
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
unfold on_foot in H.
use H.
pose (d := C**D/A**U).
assert ({T : Point | Col T A U /\\ A ** T = d * A**U}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H6.
assert (A**T = C**D).
rewrite <- H9.
clear H6.
rewrite ( l_24_b A T P Y).
replace (2 * A ** T * A ** T) with (Py A T A) by (unfold Py;basic_simpl;uniformize_dir_seg;ring).
replace (Py A T A) with (Py C D C) by (unfold Py; uniformize_dir_seg; rewrite H9; ring).
replace (Py P A T) with (Py4 P C A D).
rewrite (l3_8_a A T D C P).

*****
H9 : eq (DSeg A T) (DSeg C D)
H : Col T A U
T : Point
d : F
H8 : not (eq U V)
H7 : Col Y U V
H5 : perp Y P U V
H4 : not (eq A U)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A U V
Y,P,U,V,A,C,D : Point
*****
eq (Py4 P C A D) (Py4 P C A D)
+++++
auto.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
unfold on_foot in H.
use H.
pose (d := C**D/A**U).
assert ({T : Point | Col T A U /\\ A ** T = d * A**U}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H6.
assert (A**T = C**D).
rewrite <- H9.
clear H6.
rewrite ( l_24_b A T P Y).
replace (2 * A ** T * A ** T) with (Py A T A) by (unfold Py;basic_simpl;uniformize_dir_seg;ring).
replace (Py A T A) with (Py C D C) by (unfold Py; uniformize_dir_seg; rewrite H9; ring).
replace (Py P A T) with (Py4 P C A D).
rewrite (l3_8_a A T D C P).

*****
H9 : eq (DSeg A T) (DSeg C D)
H : Col T A U
T : Point
d : F
H8 : not (eq U V)
H7 : Col Y U V
H5 : perp Y P U V
H4 : not (eq A U)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A U V
Y,P,U,V,A,C,D : Point
*****
weak_3_parallelogram A T D C
+++++
auto.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
unfold on_foot in H.
use H.
pose (d := C**D/A**U).
assert ({T : Point | Col T A U /\\ A ** T = d * A**U}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H6.
assert (A**T = C**D).
rewrite <- H9.
clear H6.
rewrite ( l_24_b A T P Y).
replace (2 * A ** T * A ** T) with (Py A T A) by (unfold Py;basic_simpl;uniformize_dir_seg;ring).
replace (Py A T A) with (Py C D C) by (unfold Py; uniformize_dir_seg; rewrite H9; ring).
replace (Py P A T) with (Py4 P C A D).
rewrite (l3_8_a A T D C P).
auto.

*****
H9 : eq (DSeg A T) (DSeg C D)
H : Col T A U
T : Point
d : F
H8 : not (eq U V)
H7 : Col Y U V
H5 : perp Y P U V
H4 : not (eq A U)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A U V
Y,P,U,V,A,C,D : Point
*****
weak_3_parallelogram A T D C
+++++
assert (Col U Y A).
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
unfold on_foot in H.
use H.
pose (d := C**D/A**U).
assert ({T : Point | Col T A U /\\ A ** T = d * A**U}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H6.
assert (A**T = C**D).
rewrite <- H9.
clear H6.
rewrite ( l_24_b A T P Y).
replace (2 * A ** T * A ** T) with (Py A T A) by (unfold Py;basic_simpl;uniformize_dir_seg;ring).
replace (Py A T A) with (Py C D C) by (unfold Py; uniformize_dir_seg; rewrite H9; ring).
replace (Py P A T) with (Py4 P C A D).
rewrite (l3_8_a A T D C P).
auto.
assert (Col U Y A).

*****
H9 : eq (DSeg A T) (DSeg C D)
H : Col T A U
T : Point
d : F
H8 : not (eq U V)
H7 : Col Y U V
H5 : perp Y P U V
H4 : not (eq A U)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A U V
Y,P,U,V,A,C,D : Point
*****
Col U Y A
+++++
apply (col_trans_1 U V Y A H8).
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
unfold on_foot in H.
use H.
pose (d := C**D/A**U).
assert ({T : Point | Col T A U /\\ A ** T = d * A**U}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H6.
assert (A**T = C**D).
rewrite <- H9.
clear H6.
rewrite ( l_24_b A T P Y).
replace (2 * A ** T * A ** T) with (Py A T A) by (unfold Py;basic_simpl;uniformize_dir_seg;ring).
replace (Py A T A) with (Py C D C) by (unfold Py; uniformize_dir_seg; rewrite H9; ring).
replace (Py P A T) with (Py4 P C A D).
rewrite (l3_8_a A T D C P).
auto.
assert (Col U Y A).
apply (col_trans_1 U V Y A H8).

*****
H9 : eq (DSeg A T) (DSeg C D)
H : Col T A U
T : Point
d : F
H8 : not (eq U V)
H7 : Col Y U V
H5 : perp Y P U V
H4 : not (eq A U)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A U V
Y,P,U,V,A,C,D : Point
*****
Col U V Y
+++++
auto with Geom.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
unfold on_foot in H.
use H.
pose (d := C**D/A**U).
assert ({T : Point | Col T A U /\\ A ** T = d * A**U}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H6.
assert (A**T = C**D).
rewrite <- H9.
clear H6.
rewrite ( l_24_b A T P Y).
replace (2 * A ** T * A ** T) with (Py A T A) by (unfold Py;basic_simpl;uniformize_dir_seg;ring).
replace (Py A T A) with (Py C D C) by (unfold Py; uniformize_dir_seg; rewrite H9; ring).
replace (Py P A T) with (Py4 P C A D).
rewrite (l3_8_a A T D C P).
auto.
assert (Col U Y A).
apply (col_trans_1 U V Y A H8).

*****
H9 : eq (DSeg A T) (DSeg C D)
H : Col T A U
T : Point
d : F
H8 : not (eq U V)
H7 : Col Y U V
H5 : perp Y P U V
H4 : not (eq A U)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A U V
Y,P,U,V,A,C,D : Point
*****
Col U V A
+++++
auto with Geom.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
unfold on_foot in H.
use H.
pose (d := C**D/A**U).
assert ({T : Point | Col T A U /\\ A ** T = d * A**U}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H6.
assert (A**T = C**D).
rewrite <- H9.
clear H6.
rewrite ( l_24_b A T P Y).
replace (2 * A ** T * A ** T) with (Py A T A) by (unfold Py;basic_simpl;uniformize_dir_seg;ring).
replace (Py A T A) with (Py C D C) by (unfold Py; uniformize_dir_seg; rewrite H9; ring).
replace (Py P A T) with (Py4 P C A D).
rewrite (l3_8_a A T D C P).
auto.
assert (Col U Y A).

*****
H6 : Col U Y A
H9 : eq (DSeg A T) (DSeg C D)
H : Col T A U
T : Point
d : F
H8 : not (eq U V)
H7 : Col Y U V
H5 : perp Y P U V
H4 : not (eq A U)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A U V
Y,P,U,V,A,C,D : Point
*****
weak_3_parallelogram A T D C
+++++
assert (Col U Y T).
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
unfold on_foot in H.
use H.
pose (d := C**D/A**U).
assert ({T : Point | Col T A U /\\ A ** T = d * A**U}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H6.
assert (A**T = C**D).
rewrite <- H9.
clear H6.
rewrite ( l_24_b A T P Y).
replace (2 * A ** T * A ** T) with (Py A T A) by (unfold Py;basic_simpl;uniformize_dir_seg;ring).
replace (Py A T A) with (Py C D C) by (unfold Py; uniformize_dir_seg; rewrite H9; ring).
replace (Py P A T) with (Py4 P C A D).
rewrite (l3_8_a A T D C P).
auto.
assert (Col U Y A).
assert (Col U Y T).

*****
H6 : Col U Y A
H9 : eq (DSeg A T) (DSeg C D)
H : Col T A U
T : Point
d : F
H8 : not (eq U V)
H7 : Col Y U V
H5 : perp Y P U V
H4 : not (eq A U)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A U V
Y,P,U,V,A,C,D : Point
*****
Col U Y T
+++++
apply (col_trans_1 U A Y T).
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
unfold on_foot in H.
use H.
pose (d := C**D/A**U).
assert ({T : Point | Col T A U /\\ A ** T = d * A**U}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H6.
assert (A**T = C**D).
rewrite <- H9.
clear H6.
rewrite ( l_24_b A T P Y).
replace (2 * A ** T * A ** T) with (Py A T A) by (unfold Py;basic_simpl;uniformize_dir_seg;ring).
replace (Py A T A) with (Py C D C) by (unfold Py; uniformize_dir_seg; rewrite H9; ring).
replace (Py P A T) with (Py4 P C A D).
rewrite (l3_8_a A T D C P).
auto.
assert (Col U Y A).
assert (Col U Y T).
apply (col_trans_1 U A Y T).

*****
H6 : Col U Y A
H9 : eq (DSeg A T) (DSeg C D)
H : Col T A U
T : Point
d : F
H8 : not (eq U V)
H7 : Col Y U V
H5 : perp Y P U V
H4 : not (eq A U)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A U V
Y,P,U,V,A,C,D : Point
*****
not (eq U A)
+++++
auto with Geom.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
unfold on_foot in H.
use H.
pose (d := C**D/A**U).
assert ({T : Point | Col T A U /\\ A ** T = d * A**U}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H6.
assert (A**T = C**D).
rewrite <- H9.
clear H6.
rewrite ( l_24_b A T P Y).
replace (2 * A ** T * A ** T) with (Py A T A) by (unfold Py;basic_simpl;uniformize_dir_seg;ring).
replace (Py A T A) with (Py C D C) by (unfold Py; uniformize_dir_seg; rewrite H9; ring).
replace (Py P A T) with (Py4 P C A D).
rewrite (l3_8_a A T D C P).
auto.
assert (Col U Y A).
assert (Col U Y T).
apply (col_trans_1 U A Y T).

*****
H6 : Col U Y A
H9 : eq (DSeg A T) (DSeg C D)
H : Col T A U
T : Point
d : F
H8 : not (eq U V)
H7 : Col Y U V
H5 : perp Y P U V
H4 : not (eq A U)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A U V
Y,P,U,V,A,C,D : Point
*****
Col U A Y
+++++
auto with Geom.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
unfold on_foot in H.
use H.
pose (d := C**D/A**U).
assert ({T : Point | Col T A U /\\ A ** T = d * A**U}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H6.
assert (A**T = C**D).
rewrite <- H9.
clear H6.
rewrite ( l_24_b A T P Y).
replace (2 * A ** T * A ** T) with (Py A T A) by (unfold Py;basic_simpl;uniformize_dir_seg;ring).
replace (Py A T A) with (Py C D C) by (unfold Py; uniformize_dir_seg; rewrite H9; ring).
replace (Py P A T) with (Py4 P C A D).
rewrite (l3_8_a A T D C P).
auto.
assert (Col U Y A).
assert (Col U Y T).
apply (col_trans_1 U A Y T).

*****
H6 : Col U Y A
H9 : eq (DSeg A T) (DSeg C D)
H : Col T A U
T : Point
d : F
H8 : not (eq U V)
H7 : Col Y U V
H5 : perp Y P U V
H4 : not (eq A U)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A U V
Y,P,U,V,A,C,D : Point
*****
Col U A T
+++++
auto with Geom.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
unfold on_foot in H.
use H.
pose (d := C**D/A**U).
assert ({T : Point | Col T A U /\\ A ** T = d * A**U}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H6.
assert (A**T = C**D).
rewrite <- H9.
clear H6.
rewrite ( l_24_b A T P Y).
replace (2 * A ** T * A ** T) with (Py A T A) by (unfold Py;basic_simpl;uniformize_dir_seg;ring).
replace (Py A T A) with (Py C D C) by (unfold Py; uniformize_dir_seg; rewrite H9; ring).
replace (Py P A T) with (Py4 P C A D).
rewrite (l3_8_a A T D C P).
auto.
assert (Col U Y A).
assert (Col U Y T).

*****
H10 : Col U Y T
H6 : Col U Y A
H9 : eq (DSeg A T) (DSeg C D)
H : Col T A U
T : Point
d : F
H8 : not (eq U V)
H7 : Col Y U V
H5 : perp Y P U V
H4 : not (eq A U)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A U V
Y,P,U,V,A,C,D : Point
*****
weak_3_parallelogram A T D C
+++++
assert (Col A Y T).
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
unfold on_foot in H.
use H.
pose (d := C**D/A**U).
assert ({T : Point | Col T A U /\\ A ** T = d * A**U}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H6.
assert (A**T = C**D).
rewrite <- H9.
clear H6.
rewrite ( l_24_b A T P Y).
replace (2 * A ** T * A ** T) with (Py A T A) by (unfold Py;basic_simpl;uniformize_dir_seg;ring).
replace (Py A T A) with (Py C D C) by (unfold Py; uniformize_dir_seg; rewrite H9; ring).
replace (Py P A T) with (Py4 P C A D).
rewrite (l3_8_a A T D C P).
auto.
assert (Col U Y A).
assert (Col U Y T).
assert (Col A Y T).

*****
H10 : Col U Y T
H6 : Col U Y A
H9 : eq (DSeg A T) (DSeg C D)
H : Col T A U
T : Point
d : F
H8 : not (eq U V)
H7 : Col Y U V
H5 : perp Y P U V
H4 : not (eq A U)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A U V
Y,P,U,V,A,C,D : Point
*****
Col A Y T
+++++
apply (col_trans_1 A U Y T H4).
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
unfold on_foot in H.
use H.
pose (d := C**D/A**U).
assert ({T : Point | Col T A U /\\ A ** T = d * A**U}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H6.
assert (A**T = C**D).
rewrite <- H9.
clear H6.
rewrite ( l_24_b A T P Y).
replace (2 * A ** T * A ** T) with (Py A T A) by (unfold Py;basic_simpl;uniformize_dir_seg;ring).
replace (Py A T A) with (Py C D C) by (unfold Py; uniformize_dir_seg; rewrite H9; ring).
replace (Py P A T) with (Py4 P C A D).
rewrite (l3_8_a A T D C P).
auto.
assert (Col U Y A).
assert (Col U Y T).
assert (Col A Y T).
apply (col_trans_1 A U Y T H4).

*****
H10 : Col U Y T
H6 : Col U Y A
H9 : eq (DSeg A T) (DSeg C D)
H : Col T A U
T : Point
d : F
H8 : not (eq U V)
H7 : Col Y U V
H5 : perp Y P U V
H4 : not (eq A U)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A U V
Y,P,U,V,A,C,D : Point
*****
Col A U Y
+++++
auto with Geom.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
unfold on_foot in H.
use H.
pose (d := C**D/A**U).
assert ({T : Point | Col T A U /\\ A ** T = d * A**U}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H6.
assert (A**T = C**D).
rewrite <- H9.
clear H6.
rewrite ( l_24_b A T P Y).
replace (2 * A ** T * A ** T) with (Py A T A) by (unfold Py;basic_simpl;uniformize_dir_seg;ring).
replace (Py A T A) with (Py C D C) by (unfold Py; uniformize_dir_seg; rewrite H9; ring).
replace (Py P A T) with (Py4 P C A D).
rewrite (l3_8_a A T D C P).
auto.
assert (Col U Y A).
assert (Col U Y T).
assert (Col A Y T).
apply (col_trans_1 A U Y T H4).

*****
H10 : Col U Y T
H6 : Col U Y A
H9 : eq (DSeg A T) (DSeg C D)
H : Col T A U
T : Point
d : F
H8 : not (eq U V)
H7 : Col Y U V
H5 : perp Y P U V
H4 : not (eq A U)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A U V
Y,P,U,V,A,C,D : Point
*****
Col A U T
+++++
auto with Geom.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
unfold on_foot in H.
use H.
pose (d := C**D/A**U).
assert ({T : Point | Col T A U /\\ A ** T = d * A**U}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H6.
assert (A**T = C**D).
rewrite <- H9.
clear H6.
rewrite ( l_24_b A T P Y).
replace (2 * A ** T * A ** T) with (Py A T A) by (unfold Py;basic_simpl;uniformize_dir_seg;ring).
replace (Py A T A) with (Py C D C) by (unfold Py; uniformize_dir_seg; rewrite H9; ring).
replace (Py P A T) with (Py4 P C A D).
rewrite (l3_8_a A T D C P).
auto.
assert (Col U Y A).
assert (Col U Y T).
assert (Col A Y T).

*****
H11 : Col A Y T
H10 : Col U Y T
H6 : Col U Y A
H9 : eq (DSeg A T) (DSeg C D)
H : Col T A U
T : Point
d : F
H8 : not (eq U V)
H7 : Col Y U V
H5 : perp Y P U V
H4 : not (eq A U)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A U V
Y,P,U,V,A,C,D : Point
*****
weak_3_parallelogram A T D C
+++++
assert (parallel C D T A).
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
unfold on_foot in H.
use H.
pose (d := C**D/A**U).
assert ({T : Point | Col T A U /\\ A ** T = d * A**U}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H6.
assert (A**T = C**D).
rewrite <- H9.
clear H6.
rewrite ( l_24_b A T P Y).
replace (2 * A ** T * A ** T) with (Py A T A) by (unfold Py;basic_simpl;uniformize_dir_seg;ring).
replace (Py A T A) with (Py C D C) by (unfold Py; uniformize_dir_seg; rewrite H9; ring).
replace (Py P A T) with (Py4 P C A D).
rewrite (l3_8_a A T D C P).
auto.
assert (Col U Y A).
assert (Col U Y T).
assert (Col A Y T).
assert (parallel C D T A).

*****
H11 : Col A Y T
H10 : Col U Y T
H6 : Col U Y A
H9 : eq (DSeg A T) (DSeg C D)
H : Col T A U
T : Point
d : F
H8 : not (eq U V)
H7 : Col Y U V
H5 : perp Y P U V
H4 : not (eq A U)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A U V
Y,P,U,V,A,C,D : Point
*****
parallel C D T A
+++++
apply (parallel_transitivity C D A Y T A).
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
unfold on_foot in H.
use H.
pose (d := C**D/A**U).
assert ({T : Point | Col T A U /\\ A ** T = d * A**U}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H6.
assert (A**T = C**D).
rewrite <- H9.
clear H6.
rewrite ( l_24_b A T P Y).
replace (2 * A ** T * A ** T) with (Py A T A) by (unfold Py;basic_simpl;uniformize_dir_seg;ring).
replace (Py A T A) with (Py C D C) by (unfold Py; uniformize_dir_seg; rewrite H9; ring).
replace (Py P A T) with (Py4 P C A D).
rewrite (l3_8_a A T D C P).
auto.
assert (Col U Y A).
assert (Col U Y T).
assert (Col A Y T).
assert (parallel C D T A).
apply (parallel_transitivity C D A Y T A).

*****
H11 : Col A Y T
H10 : Col U Y T
H6 : Col U Y A
H9 : eq (DSeg A T) (DSeg C D)
H : Col T A U
T : Point
d : F
H8 : not (eq U V)
H7 : Col Y U V
H5 : perp Y P U V
H4 : not (eq A U)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A U V
Y,P,U,V,A,C,D : Point
*****
not (eq A Y)
+++++
auto with Geom.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
unfold on_foot in H.
use H.
pose (d := C**D/A**U).
assert ({T : Point | Col T A U /\\ A ** T = d * A**U}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H6.
assert (A**T = C**D).
rewrite <- H9.
clear H6.
rewrite ( l_24_b A T P Y).
replace (2 * A ** T * A ** T) with (Py A T A) by (unfold Py;basic_simpl;uniformize_dir_seg;ring).
replace (Py A T A) with (Py C D C) by (unfold Py; uniformize_dir_seg; rewrite H9; ring).
replace (Py P A T) with (Py4 P C A D).
rewrite (l3_8_a A T D C P).
auto.
assert (Col U Y A).
assert (Col U Y T).
assert (Col A Y T).
assert (parallel C D T A).
apply (parallel_transitivity C D A Y T A).

*****
H11 : Col A Y T
H10 : Col U Y T
H6 : Col U Y A
H9 : eq (DSeg A T) (DSeg C D)
H : Col T A U
T : Point
d : F
H8 : not (eq U V)
H7 : Col Y U V
H5 : perp Y P U V
H4 : not (eq A U)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A U V
Y,P,U,V,A,C,D : Point
*****
parallel C D A Y
+++++
auto with Geom.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
unfold on_foot in H.
use H.
pose (d := C**D/A**U).
assert ({T : Point | Col T A U /\\ A ** T = d * A**U}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H6.
assert (A**T = C**D).
rewrite <- H9.
clear H6.
rewrite ( l_24_b A T P Y).
replace (2 * A ** T * A ** T) with (Py A T A) by (unfold Py;basic_simpl;uniformize_dir_seg;ring).
replace (Py A T A) with (Py C D C) by (unfold Py; uniformize_dir_seg; rewrite H9; ring).
replace (Py P A T) with (Py4 P C A D).
rewrite (l3_8_a A T D C P).
auto.
assert (Col U Y A).
assert (Col U Y T).
assert (Col A Y T).
assert (parallel C D T A).
apply (parallel_transitivity C D A Y T A).

*****
H11 : Col A Y T
H10 : Col U Y T
H6 : Col U Y A
H9 : eq (DSeg A T) (DSeg C D)
H : Col T A U
T : Point
d : F
H8 : not (eq U V)
H7 : Col Y U V
H5 : perp Y P U V
H4 : not (eq A U)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A U V
Y,P,U,V,A,C,D : Point
*****
parallel A Y T A
+++++
auto with Geom.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
unfold on_foot in H.
use H.
pose (d := C**D/A**U).
assert ({T : Point | Col T A U /\\ A ** T = d * A**U}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H6.
assert (A**T = C**D).
rewrite <- H9.
clear H6.
rewrite ( l_24_b A T P Y).
replace (2 * A ** T * A ** T) with (Py A T A) by (unfold Py;basic_simpl;uniformize_dir_seg;ring).
replace (Py A T A) with (Py C D C) by (unfold Py; uniformize_dir_seg; rewrite H9; ring).
replace (Py P A T) with (Py4 P C A D).
rewrite (l3_8_a A T D C P).
auto.
assert (Col U Y A).
assert (Col U Y T).
assert (Col A Y T).
assert (parallel C D T A).

*****
H12 : parallel C D T A
H11 : Col A Y T
H10 : Col U Y T
H6 : Col U Y A
H9 : eq (DSeg A T) (DSeg C D)
H : Col T A U
T : Point
d : F
H8 : not (eq U V)
H7 : Col Y U V
H5 : perp Y P U V
H4 : not (eq A U)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A U V
Y,P,U,V,A,C,D : Point
*****
weak_3_parallelogram A T D C
+++++
unfold parallel.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
unfold on_foot in H.
use H.
pose (d := C**D/A**U).
assert ({T : Point | Col T A U /\\ A ** T = d * A**U}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H6.
assert (A**T = C**D).
rewrite <- H9.
clear H6.
rewrite ( l_24_b A T P Y).
replace (2 * A ** T * A ** T) with (Py A T A) by (unfold Py;basic_simpl;uniformize_dir_seg;ring).
replace (Py A T A) with (Py C D C) by (unfold Py; uniformize_dir_seg; rewrite H9; ring).
replace (Py P A T) with (Py4 P C A D).
rewrite (l3_8_a A T D C P).
auto.
assert (Col U Y A).
assert (Col U Y T).
assert (Col A Y T).
assert (parallel C D T A).
unfold parallel.

*****
H12 : parallel C D T A
H11 : Col A Y T
H10 : Col U Y T
H6 : Col U Y A
H9 : eq (DSeg A T) (DSeg C D)
H : Col T A U
T : Point
d : F
H8 : not (eq U V)
H7 : Col Y U V
H5 : perp Y P U V
H4 : not (eq A U)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A U V
Y,P,U,V,A,C,D : Point
*****
weak_3_parallelogram A T D C
+++++
basic_simpl.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
unfold on_foot in H.
use H.
pose (d := C**D/A**U).
assert ({T : Point | Col T A U /\\ A ** T = d * A**U}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H6.
assert (A**T = C**D).
rewrite <- H9.
clear H6.
rewrite ( l_24_b A T P Y).
replace (2 * A ** T * A ** T) with (Py A T A) by (unfold Py;basic_simpl;uniformize_dir_seg;ring).
replace (Py A T A) with (Py C D C) by (unfold Py; uniformize_dir_seg; rewrite H9; ring).
replace (Py P A T) with (Py4 P C A D).
rewrite (l3_8_a A T D C P).
auto.
assert (Col U Y A).
assert (Col U Y T).
assert (Col A Y T).
assert (parallel C D T A).
unfold parallel.
basic_simpl.

*****
H12 : parallel C D T A
H11 : Col A Y T
H10 : Col U Y T
H6 : Col U Y A
H9 : eq (DSeg A T) (DSeg C D)
H : Col T A U
T : Point
d : F
H8 : not (eq U V)
H7 : Col Y U V
H5 : perp Y P U V
H4 : not (eq A U)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A U V
Y,P,U,V,A,C,D : Point
*****
weak_3_parallelogram A T D C
+++++
assert (Col A T Y).
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
unfold on_foot in H.
use H.
pose (d := C**D/A**U).
assert ({T : Point | Col T A U /\\ A ** T = d * A**U}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H6.
assert (A**T = C**D).
rewrite <- H9.
clear H6.
rewrite ( l_24_b A T P Y).
replace (2 * A ** T * A ** T) with (Py A T A) by (unfold Py;basic_simpl;uniformize_dir_seg;ring).
replace (Py A T A) with (Py C D C) by (unfold Py; uniformize_dir_seg; rewrite H9; ring).
replace (Py P A T) with (Py4 P C A D).
rewrite (l3_8_a A T D C P).
auto.
assert (Col U Y A).
assert (Col U Y T).
assert (Col A Y T).
assert (parallel C D T A).
unfold parallel.
basic_simpl.
assert (Col A T Y).

*****
H12 : parallel C D T A
H11 : Col A Y T
H10 : Col U Y T
H6 : Col U Y A
H9 : eq (DSeg A T) (DSeg C D)
H : Col T A U
T : Point
d : F
H8 : not (eq U V)
H7 : Col Y U V
H5 : perp Y P U V
H4 : not (eq A U)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A U V
Y,P,U,V,A,C,D : Point
*****
Col A T Y
+++++
auto with Geom.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
unfold on_foot in H.
use H.
pose (d := C**D/A**U).
assert ({T : Point | Col T A U /\\ A ** T = d * A**U}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H6.
assert (A**T = C**D).
rewrite <- H9.
clear H6.
rewrite ( l_24_b A T P Y).
replace (2 * A ** T * A ** T) with (Py A T A) by (unfold Py;basic_simpl;uniformize_dir_seg;ring).
replace (Py A T A) with (Py C D C) by (unfold Py; uniformize_dir_seg; rewrite H9; ring).
replace (Py P A T) with (Py4 P C A D).
rewrite (l3_8_a A T D C P).
auto.
assert (Col U Y A).
assert (Col U Y T).
assert (Col A Y T).
assert (parallel C D T A).
unfold parallel.
basic_simpl.
assert (Col A T Y).

*****
H13 : Col A T Y
H12 : parallel C D T A
H11 : Col A Y T
H10 : Col U Y T
H6 : Col U Y A
H9 : eq (DSeg A T) (DSeg C D)
H : Col T A U
T : Point
d : F
H8 : not (eq U V)
H7 : Col Y U V
H5 : perp Y P U V
H4 : not (eq A U)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A U V
Y,P,U,V,A,C,D : Point
*****
weak_3_parallelogram A T D C
+++++
idtac.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
unfold on_foot in H.
use H.
pose (d := C**D/A**U).
assert ({T : Point | Col T A U /\\ A ** T = d * A**U}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H6.
assert (A**T = C**D).
rewrite <- H9.
clear H6.
rewrite ( l_24_b A T P Y).
replace (2 * A ** T * A ** T) with (Py A T A) by (unfold Py;basic_simpl;uniformize_dir_seg;ring).
replace (Py A T A) with (Py C D C) by (unfold Py; uniformize_dir_seg; rewrite H9; ring).
replace (Py P A T) with (Py4 P C A D).
rewrite (l3_8_a A T D C P).
auto.
assert (Col U Y A).
assert (Col U Y T).
assert (Col A Y T).
assert (parallel C D T A).
unfold parallel.
basic_simpl.
assert (Col A T Y).
idtac.

*****
H13 : Col A T Y
H12 : parallel C D T A
H11 : Col A Y T
H10 : Col U Y T
H6 : Col U Y A
H9 : eq (DSeg A T) (DSeg C D)
H : Col T A U
T : Point
d : F
H8 : not (eq U V)
H7 : Col Y U V
H5 : perp Y P U V
H4 : not (eq A U)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A U V
Y,P,U,V,A,C,D : Point
*****
weak_3_parallelogram A T D C
+++++
auto.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
unfold on_foot in H.
use H.
pose (d := C**D/A**U).
assert ({T : Point | Col T A U /\\ A ** T = d * A**U}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H6.
assert (A**T = C**D).
rewrite <- H9.
clear H6.
rewrite ( l_24_b A T P Y).
replace (2 * A ** T * A ** T) with (Py A T A) by (unfold Py;basic_simpl;uniformize_dir_seg;ring).
replace (Py A T A) with (Py C D C) by (unfold Py; uniformize_dir_seg; rewrite H9; ring).
replace (Py P A T) with (Py4 P C A D).
rewrite (l3_8_a A T D C P).
auto.
assert (Col U Y A).
assert (Col U Y T).
assert (Col A Y T).
assert (parallel C D T A).
unfold parallel.
basic_simpl.
assert (Col A T Y).
idtac.
auto.

*****
H13 : Col A T Y
H12 : parallel C D T A
H11 : Col A Y T
H10 : Col U Y T
H6 : Col U Y A
H9 : eq (DSeg A T) (DSeg C D)
H : Col T A U
T : Point
d : F
H8 : not (eq U V)
H7 : Col Y U V
H5 : perp Y P U V
H4 : not (eq A U)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A U V
Y,P,U,V,A,C,D : Point
*****
weak_3_parallelogram A T D C
+++++
apply parallel_side_eq_weak_weak_weak_para.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
unfold on_foot in H.
use H.
pose (d := C**D/A**U).
assert ({T : Point | Col T A U /\\ A ** T = d * A**U}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H6.
assert (A**T = C**D).
rewrite <- H9.
clear H6.
rewrite ( l_24_b A T P Y).
replace (2 * A ** T * A ** T) with (Py A T A) by (unfold Py;basic_simpl;uniformize_dir_seg;ring).
replace (Py A T A) with (Py C D C) by (unfold Py; uniformize_dir_seg; rewrite H9; ring).
replace (Py P A T) with (Py4 P C A D).
rewrite (l3_8_a A T D C P).
auto.
assert (Col U Y A).
assert (Col U Y T).
assert (Col A Y T).
assert (parallel C D T A).
unfold parallel.
basic_simpl.
assert (Col A T Y).
idtac.
auto.
apply parallel_side_eq_weak_weak_weak_para.

*****
H13 : Col A T Y
H12 : parallel C D T A
H11 : Col A Y T
H10 : Col U Y T
H6 : Col U Y A
H9 : eq (DSeg A T) (DSeg C D)
H : Col T A U
T : Point
d : F
H8 : not (eq U V)
H7 : Col Y U V
H5 : perp Y P U V
H4 : not (eq A U)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A U V
Y,P,U,V,A,C,D : Point
*****
parallel A T C D
+++++
auto with Geom.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
unfold on_foot in H.
use H.
pose (d := C**D/A**U).
assert ({T : Point | Col T A U /\\ A ** T = d * A**U}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H6.
assert (A**T = C**D).
rewrite <- H9.
clear H6.
rewrite ( l_24_b A T P Y).
replace (2 * A ** T * A ** T) with (Py A T A) by (unfold Py;basic_simpl;uniformize_dir_seg;ring).
replace (Py A T A) with (Py C D C) by (unfold Py; uniformize_dir_seg; rewrite H9; ring).
replace (Py P A T) with (Py4 P C A D).
rewrite (l3_8_a A T D C P).
auto.
assert (Col U Y A).
assert (Col U Y T).
assert (Col A Y T).
assert (parallel C D T A).
unfold parallel.
basic_simpl.
assert (Col A T Y).
idtac.
auto.
apply parallel_side_eq_weak_weak_weak_para.

*****
H13 : Col A T Y
H12 : parallel C D T A
H11 : Col A Y T
H10 : Col U Y T
H6 : Col U Y A
H9 : eq (DSeg A T) (DSeg C D)
H : Col T A U
T : Point
d : F
H8 : not (eq U V)
H7 : Col Y U V
H5 : perp Y P U V
H4 : not (eq A U)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A U V
Y,P,U,V,A,C,D : Point
*****
eq (DSeg A T) (DSeg C D)
+++++
auto with Geom.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
unfold on_foot in H.
use H.
pose (d := C**D/A**U).
assert ({T : Point | Col T A U /\\ A ** T = d * A**U}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H6.
assert (A**T = C**D).
rewrite <- H9.
clear H6.
rewrite ( l_24_b A T P Y).

*****
H9 : eq (DSeg A T) (DSeg C D)
H : Col T A U
T : Point
d : F
H8 : not (eq U V)
H7 : Col Y U V
H5 : perp Y P U V
H4 : not (eq A U)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A U V
Y,P,U,V,A,C,D : Point
*****
Col A Y T
+++++
assert (Col U Y A).
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
unfold on_foot in H.
use H.
pose (d := C**D/A**U).
assert ({T : Point | Col T A U /\\ A ** T = d * A**U}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H6.
assert (A**T = C**D).
rewrite <- H9.
clear H6.
rewrite ( l_24_b A T P Y).
assert (Col U Y A).

*****
H9 : eq (DSeg A T) (DSeg C D)
H : Col T A U
T : Point
d : F
H8 : not (eq U V)
H7 : Col Y U V
H5 : perp Y P U V
H4 : not (eq A U)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A U V
Y,P,U,V,A,C,D : Point
*****
Col U Y A
+++++
apply (col_trans_1 U V Y A H8).
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
unfold on_foot in H.
use H.
pose (d := C**D/A**U).
assert ({T : Point | Col T A U /\\ A ** T = d * A**U}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H6.
assert (A**T = C**D).
rewrite <- H9.
clear H6.
rewrite ( l_24_b A T P Y).
assert (Col U Y A).
apply (col_trans_1 U V Y A H8).

*****
H9 : eq (DSeg A T) (DSeg C D)
H : Col T A U
T : Point
d : F
H8 : not (eq U V)
H7 : Col Y U V
H5 : perp Y P U V
H4 : not (eq A U)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A U V
Y,P,U,V,A,C,D : Point
*****
Col U V Y
+++++
auto with Geom.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
unfold on_foot in H.
use H.
pose (d := C**D/A**U).
assert ({T : Point | Col T A U /\\ A ** T = d * A**U}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H6.
assert (A**T = C**D).
rewrite <- H9.
clear H6.
rewrite ( l_24_b A T P Y).
assert (Col U Y A).
apply (col_trans_1 U V Y A H8).

*****
H9 : eq (DSeg A T) (DSeg C D)
H : Col T A U
T : Point
d : F
H8 : not (eq U V)
H7 : Col Y U V
H5 : perp Y P U V
H4 : not (eq A U)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A U V
Y,P,U,V,A,C,D : Point
*****
Col U V A
+++++
auto with Geom.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
unfold on_foot in H.
use H.
pose (d := C**D/A**U).
assert ({T : Point | Col T A U /\\ A ** T = d * A**U}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H6.
assert (A**T = C**D).
rewrite <- H9.
clear H6.
rewrite ( l_24_b A T P Y).
assert (Col U Y A).

*****
H6 : Col U Y A
H9 : eq (DSeg A T) (DSeg C D)
H : Col T A U
T : Point
d : F
H8 : not (eq U V)
H7 : Col Y U V
H5 : perp Y P U V
H4 : not (eq A U)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A U V
Y,P,U,V,A,C,D : Point
*****
Col A Y T
+++++
assert (Col U Y T).
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
unfold on_foot in H.
use H.
pose (d := C**D/A**U).
assert ({T : Point | Col T A U /\\ A ** T = d * A**U}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H6.
assert (A**T = C**D).
rewrite <- H9.
clear H6.
rewrite ( l_24_b A T P Y).
assert (Col U Y A).
assert (Col U Y T).

*****
H6 : Col U Y A
H9 : eq (DSeg A T) (DSeg C D)
H : Col T A U
T : Point
d : F
H8 : not (eq U V)
H7 : Col Y U V
H5 : perp Y P U V
H4 : not (eq A U)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A U V
Y,P,U,V,A,C,D : Point
*****
Col U Y T
+++++
apply (col_trans_1 U A Y T).
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
unfold on_foot in H.
use H.
pose (d := C**D/A**U).
assert ({T : Point | Col T A U /\\ A ** T = d * A**U}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H6.
assert (A**T = C**D).
rewrite <- H9.
clear H6.
rewrite ( l_24_b A T P Y).
assert (Col U Y A).
assert (Col U Y T).
apply (col_trans_1 U A Y T).

*****
H6 : Col U Y A
H9 : eq (DSeg A T) (DSeg C D)
H : Col T A U
T : Point
d : F
H8 : not (eq U V)
H7 : Col Y U V
H5 : perp Y P U V
H4 : not (eq A U)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A U V
Y,P,U,V,A,C,D : Point
*****
not (eq U A)
+++++
auto with Geom.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
unfold on_foot in H.
use H.
pose (d := C**D/A**U).
assert ({T : Point | Col T A U /\\ A ** T = d * A**U}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H6.
assert (A**T = C**D).
rewrite <- H9.
clear H6.
rewrite ( l_24_b A T P Y).
assert (Col U Y A).
assert (Col U Y T).
apply (col_trans_1 U A Y T).

*****
H6 : Col U Y A
H9 : eq (DSeg A T) (DSeg C D)
H : Col T A U
T : Point
d : F
H8 : not (eq U V)
H7 : Col Y U V
H5 : perp Y P U V
H4 : not (eq A U)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A U V
Y,P,U,V,A,C,D : Point
*****
Col U A Y
+++++
auto with Geom.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
unfold on_foot in H.
use H.
pose (d := C**D/A**U).
assert ({T : Point | Col T A U /\\ A ** T = d * A**U}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H6.
assert (A**T = C**D).
rewrite <- H9.
clear H6.
rewrite ( l_24_b A T P Y).
assert (Col U Y A).
assert (Col U Y T).
apply (col_trans_1 U A Y T).

*****
H6 : Col U Y A
H9 : eq (DSeg A T) (DSeg C D)
H : Col T A U
T : Point
d : F
H8 : not (eq U V)
H7 : Col Y U V
H5 : perp Y P U V
H4 : not (eq A U)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A U V
Y,P,U,V,A,C,D : Point
*****
Col U A T
+++++
auto with Geom.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
unfold on_foot in H.
use H.
pose (d := C**D/A**U).
assert ({T : Point | Col T A U /\\ A ** T = d * A**U}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H6.
assert (A**T = C**D).
rewrite <- H9.
clear H6.
rewrite ( l_24_b A T P Y).
assert (Col U Y A).
assert (Col U Y T).

*****
H10 : Col U Y T
H6 : Col U Y A
H9 : eq (DSeg A T) (DSeg C D)
H : Col T A U
T : Point
d : F
H8 : not (eq U V)
H7 : Col Y U V
H5 : perp Y P U V
H4 : not (eq A U)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A U V
Y,P,U,V,A,C,D : Point
*****
Col A Y T
+++++
assert (Col A Y T).
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
unfold on_foot in H.
use H.
pose (d := C**D/A**U).
assert ({T : Point | Col T A U /\\ A ** T = d * A**U}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H6.
assert (A**T = C**D).
rewrite <- H9.
clear H6.
rewrite ( l_24_b A T P Y).
assert (Col U Y A).
assert (Col U Y T).
assert (Col A Y T).

*****
H10 : Col U Y T
H6 : Col U Y A
H9 : eq (DSeg A T) (DSeg C D)
H : Col T A U
T : Point
d : F
H8 : not (eq U V)
H7 : Col Y U V
H5 : perp Y P U V
H4 : not (eq A U)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A U V
Y,P,U,V,A,C,D : Point
*****
Col A Y T
+++++
apply (col_trans_1 A U Y T H4).
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
unfold on_foot in H.
use H.
pose (d := C**D/A**U).
assert ({T : Point | Col T A U /\\ A ** T = d * A**U}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H6.
assert (A**T = C**D).
rewrite <- H9.
clear H6.
rewrite ( l_24_b A T P Y).
assert (Col U Y A).
assert (Col U Y T).
assert (Col A Y T).
apply (col_trans_1 A U Y T H4).

*****
H10 : Col U Y T
H6 : Col U Y A
H9 : eq (DSeg A T) (DSeg C D)
H : Col T A U
T : Point
d : F
H8 : not (eq U V)
H7 : Col Y U V
H5 : perp Y P U V
H4 : not (eq A U)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A U V
Y,P,U,V,A,C,D : Point
*****
Col A U Y
+++++
auto with Geom.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
unfold on_foot in H.
use H.
pose (d := C**D/A**U).
assert ({T : Point | Col T A U /\\ A ** T = d * A**U}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H6.
assert (A**T = C**D).
rewrite <- H9.
clear H6.
rewrite ( l_24_b A T P Y).
assert (Col U Y A).
assert (Col U Y T).
assert (Col A Y T).
apply (col_trans_1 A U Y T H4).

*****
H10 : Col U Y T
H6 : Col U Y A
H9 : eq (DSeg A T) (DSeg C D)
H : Col T A U
T : Point
d : F
H8 : not (eq U V)
H7 : Col Y U V
H5 : perp Y P U V
H4 : not (eq A U)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A U V
Y,P,U,V,A,C,D : Point
*****
Col A U T
+++++
auto with Geom.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
unfold on_foot in H.
use H.
pose (d := C**D/A**U).
assert ({T : Point | Col T A U /\\ A ** T = d * A**U}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H6.
assert (A**T = C**D).
rewrite <- H9.
clear H6.
rewrite ( l_24_b A T P Y).
assert (Col U Y A).
assert (Col U Y T).
assert (Col A Y T).

*****
H11 : Col A Y T
H10 : Col U Y T
H6 : Col U Y A
H9 : eq (DSeg A T) (DSeg C D)
H : Col T A U
T : Point
d : F
H8 : not (eq U V)
H7 : Col Y U V
H5 : perp Y P U V
H4 : not (eq A U)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A U V
Y,P,U,V,A,C,D : Point
*****
Col A Y T
+++++
auto.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
unfold on_foot in H.
use H.
pose (d := C**D/A**U).
assert ({T : Point | Col T A U /\\ A ** T = d * A**U}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H6.
assert (A**T = C**D).
rewrite <- H9.
clear H6.
rewrite ( l_24_b A T P Y).

*****
H9 : eq (DSeg A T) (DSeg C D)
H : Col T A U
T : Point
d : F
H8 : not (eq U V)
H7 : Col Y U V
H5 : perp Y P U V
H4 : not (eq A U)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A U V
Y,P,U,V,A,C,D : Point
*****
perp A T P Y
+++++
assert (Col U Y A).
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
unfold on_foot in H.
use H.
pose (d := C**D/A**U).
assert ({T : Point | Col T A U /\\ A ** T = d * A**U}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H6.
assert (A**T = C**D).
rewrite <- H9.
clear H6.
rewrite ( l_24_b A T P Y).
assert (Col U Y A).

*****
H9 : eq (DSeg A T) (DSeg C D)
H : Col T A U
T : Point
d : F
H8 : not (eq U V)
H7 : Col Y U V
H5 : perp Y P U V
H4 : not (eq A U)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A U V
Y,P,U,V,A,C,D : Point
*****
Col U Y A
+++++
apply (col_trans_1 U V Y A H8).
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
unfold on_foot in H.
use H.
pose (d := C**D/A**U).
assert ({T : Point | Col T A U /\\ A ** T = d * A**U}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H6.
assert (A**T = C**D).
rewrite <- H9.
clear H6.
rewrite ( l_24_b A T P Y).
assert (Col U Y A).
apply (col_trans_1 U V Y A H8).

*****
H9 : eq (DSeg A T) (DSeg C D)
H : Col T A U
T : Point
d : F
H8 : not (eq U V)
H7 : Col Y U V
H5 : perp Y P U V
H4 : not (eq A U)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A U V
Y,P,U,V,A,C,D : Point
*****
Col U V Y
+++++
auto with Geom.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
unfold on_foot in H.
use H.
pose (d := C**D/A**U).
assert ({T : Point | Col T A U /\\ A ** T = d * A**U}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H6.
assert (A**T = C**D).
rewrite <- H9.
clear H6.
rewrite ( l_24_b A T P Y).
assert (Col U Y A).
apply (col_trans_1 U V Y A H8).

*****
H9 : eq (DSeg A T) (DSeg C D)
H : Col T A U
T : Point
d : F
H8 : not (eq U V)
H7 : Col Y U V
H5 : perp Y P U V
H4 : not (eq A U)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A U V
Y,P,U,V,A,C,D : Point
*****
Col U V A
+++++
auto with Geom.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
unfold on_foot in H.
use H.
pose (d := C**D/A**U).
assert ({T : Point | Col T A U /\\ A ** T = d * A**U}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H6.
assert (A**T = C**D).
rewrite <- H9.
clear H6.
rewrite ( l_24_b A T P Y).
assert (Col U Y A).

*****
H6 : Col U Y A
H9 : eq (DSeg A T) (DSeg C D)
H : Col T A U
T : Point
d : F
H8 : not (eq U V)
H7 : Col Y U V
H5 : perp Y P U V
H4 : not (eq A U)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A U V
Y,P,U,V,A,C,D : Point
*****
perp A T P Y
+++++
assert (Col U Y T).
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
unfold on_foot in H.
use H.
pose (d := C**D/A**U).
assert ({T : Point | Col T A U /\\ A ** T = d * A**U}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H6.
assert (A**T = C**D).
rewrite <- H9.
clear H6.
rewrite ( l_24_b A T P Y).
assert (Col U Y A).
assert (Col U Y T).

*****
H6 : Col U Y A
H9 : eq (DSeg A T) (DSeg C D)
H : Col T A U
T : Point
d : F
H8 : not (eq U V)
H7 : Col Y U V
H5 : perp Y P U V
H4 : not (eq A U)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A U V
Y,P,U,V,A,C,D : Point
*****
Col U Y T
+++++
apply (col_trans_1 U A Y T).
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
unfold on_foot in H.
use H.
pose (d := C**D/A**U).
assert ({T : Point | Col T A U /\\ A ** T = d * A**U}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H6.
assert (A**T = C**D).
rewrite <- H9.
clear H6.
rewrite ( l_24_b A T P Y).
assert (Col U Y A).
assert (Col U Y T).
apply (col_trans_1 U A Y T).

*****
H6 : Col U Y A
H9 : eq (DSeg A T) (DSeg C D)
H : Col T A U
T : Point
d : F
H8 : not (eq U V)
H7 : Col Y U V
H5 : perp Y P U V
H4 : not (eq A U)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A U V
Y,P,U,V,A,C,D : Point
*****
not (eq U A)
+++++
auto with Geom.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
unfold on_foot in H.
use H.
pose (d := C**D/A**U).
assert ({T : Point | Col T A U /\\ A ** T = d * A**U}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H6.
assert (A**T = C**D).
rewrite <- H9.
clear H6.
rewrite ( l_24_b A T P Y).
assert (Col U Y A).
assert (Col U Y T).
apply (col_trans_1 U A Y T).

*****
H6 : Col U Y A
H9 : eq (DSeg A T) (DSeg C D)
H : Col T A U
T : Point
d : F
H8 : not (eq U V)
H7 : Col Y U V
H5 : perp Y P U V
H4 : not (eq A U)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A U V
Y,P,U,V,A,C,D : Point
*****
Col U A Y
+++++
auto with Geom.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
unfold on_foot in H.
use H.
pose (d := C**D/A**U).
assert ({T : Point | Col T A U /\\ A ** T = d * A**U}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H6.
assert (A**T = C**D).
rewrite <- H9.
clear H6.
rewrite ( l_24_b A T P Y).
assert (Col U Y A).
assert (Col U Y T).
apply (col_trans_1 U A Y T).

*****
H6 : Col U Y A
H9 : eq (DSeg A T) (DSeg C D)
H : Col T A U
T : Point
d : F
H8 : not (eq U V)
H7 : Col Y U V
H5 : perp Y P U V
H4 : not (eq A U)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A U V
Y,P,U,V,A,C,D : Point
*****
Col U A T
+++++
auto with Geom.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
unfold on_foot in H.
use H.
pose (d := C**D/A**U).
assert ({T : Point | Col T A U /\\ A ** T = d * A**U}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H6.
assert (A**T = C**D).
rewrite <- H9.
clear H6.
rewrite ( l_24_b A T P Y).
assert (Col U Y A).
assert (Col U Y T).

*****
H10 : Col U Y T
H6 : Col U Y A
H9 : eq (DSeg A T) (DSeg C D)
H : Col T A U
T : Point
d : F
H8 : not (eq U V)
H7 : Col Y U V
H5 : perp Y P U V
H4 : not (eq A U)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A U V
Y,P,U,V,A,C,D : Point
*****
perp A T P Y
+++++
assert (Col A Y T).
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
unfold on_foot in H.
use H.
pose (d := C**D/A**U).
assert ({T : Point | Col T A U /\\ A ** T = d * A**U}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H6.
assert (A**T = C**D).
rewrite <- H9.
clear H6.
rewrite ( l_24_b A T P Y).
assert (Col U Y A).
assert (Col U Y T).
assert (Col A Y T).

*****
H10 : Col U Y T
H6 : Col U Y A
H9 : eq (DSeg A T) (DSeg C D)
H : Col T A U
T : Point
d : F
H8 : not (eq U V)
H7 : Col Y U V
H5 : perp Y P U V
H4 : not (eq A U)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A U V
Y,P,U,V,A,C,D : Point
*****
Col A Y T
+++++
apply (col_trans_1 A U Y T H4).
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
unfold on_foot in H.
use H.
pose (d := C**D/A**U).
assert ({T : Point | Col T A U /\\ A ** T = d * A**U}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H6.
assert (A**T = C**D).
rewrite <- H9.
clear H6.
rewrite ( l_24_b A T P Y).
assert (Col U Y A).
assert (Col U Y T).
assert (Col A Y T).
apply (col_trans_1 A U Y T H4).

*****
H10 : Col U Y T
H6 : Col U Y A
H9 : eq (DSeg A T) (DSeg C D)
H : Col T A U
T : Point
d : F
H8 : not (eq U V)
H7 : Col Y U V
H5 : perp Y P U V
H4 : not (eq A U)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A U V
Y,P,U,V,A,C,D : Point
*****
Col A U Y
+++++
auto with Geom.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
unfold on_foot in H.
use H.
pose (d := C**D/A**U).
assert ({T : Point | Col T A U /\\ A ** T = d * A**U}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H6.
assert (A**T = C**D).
rewrite <- H9.
clear H6.
rewrite ( l_24_b A T P Y).
assert (Col U Y A).
assert (Col U Y T).
assert (Col A Y T).
apply (col_trans_1 A U Y T H4).

*****
H10 : Col U Y T
H6 : Col U Y A
H9 : eq (DSeg A T) (DSeg C D)
H : Col T A U
T : Point
d : F
H8 : not (eq U V)
H7 : Col Y U V
H5 : perp Y P U V
H4 : not (eq A U)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A U V
Y,P,U,V,A,C,D : Point
*****
Col A U T
+++++
auto with Geom.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
unfold on_foot in H.
use H.
pose (d := C**D/A**U).
assert ({T : Point | Col T A U /\\ A ** T = d * A**U}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H6.
assert (A**T = C**D).
rewrite <- H9.
clear H6.
rewrite ( l_24_b A T P Y).
assert (Col U Y A).
assert (Col U Y T).
assert (Col A Y T).

*****
H11 : Col A Y T
H10 : Col U Y T
H6 : Col U Y A
H9 : eq (DSeg A T) (DSeg C D)
H : Col T A U
T : Point
d : F
H8 : not (eq U V)
H7 : Col Y U V
H5 : perp Y P U V
H4 : not (eq A U)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A U V
Y,P,U,V,A,C,D : Point
*****
perp A T P Y
+++++
auto.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
unfold on_foot in H.
use H.
pose (d := C**D/A**U).
assert ({T : Point | Col T A U /\\ A ** T = d * A**U}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H6.
assert (A**T = C**D).
rewrite <- H9.
clear H6.
rewrite ( l_24_b A T P Y).
assert (Col U Y A).
assert (Col U Y T).
assert (Col A Y T).
auto.

*****
H11 : Col A Y T
H10 : Col U Y T
H6 : Col U Y A
H9 : eq (DSeg A T) (DSeg C D)
H : Col T A U
T : Point
d : F
H8 : not (eq U V)
H7 : Col Y U V
H5 : perp Y P U V
H4 : not (eq A U)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A U V
Y,P,U,V,A,C,D : Point
*****
perp A T P Y
+++++
assert (Col U V T).
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
unfold on_foot in H.
use H.
pose (d := C**D/A**U).
assert ({T : Point | Col T A U /\\ A ** T = d * A**U}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H6.
assert (A**T = C**D).
rewrite <- H9.
clear H6.
rewrite ( l_24_b A T P Y).
assert (Col U Y A).
assert (Col U Y T).
assert (Col A Y T).
auto.
assert (Col U V T).

*****
H11 : Col A Y T
H10 : Col U Y T
H6 : Col U Y A
H9 : eq (DSeg A T) (DSeg C D)
H : Col T A U
T : Point
d : F
H8 : not (eq U V)
H7 : Col Y U V
H5 : perp Y P U V
H4 : not (eq A U)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A U V
Y,P,U,V,A,C,D : Point
*****
Col U V T
+++++
apply (col_trans_1 U A V T).
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
unfold on_foot in H.
use H.
pose (d := C**D/A**U).
assert ({T : Point | Col T A U /\\ A ** T = d * A**U}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H6.
assert (A**T = C**D).
rewrite <- H9.
clear H6.
rewrite ( l_24_b A T P Y).
assert (Col U Y A).
assert (Col U Y T).
assert (Col A Y T).
auto.
assert (Col U V T).
apply (col_trans_1 U A V T).

*****
H11 : Col A Y T
H10 : Col U Y T
H6 : Col U Y A
H9 : eq (DSeg A T) (DSeg C D)
H : Col T A U
T : Point
d : F
H8 : not (eq U V)
H7 : Col Y U V
H5 : perp Y P U V
H4 : not (eq A U)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A U V
Y,P,U,V,A,C,D : Point
*****
not (eq U A)
+++++
auto with Geom.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
unfold on_foot in H.
use H.
pose (d := C**D/A**U).
assert ({T : Point | Col T A U /\\ A ** T = d * A**U}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H6.
assert (A**T = C**D).
rewrite <- H9.
clear H6.
rewrite ( l_24_b A T P Y).
assert (Col U Y A).
assert (Col U Y T).
assert (Col A Y T).
auto.
assert (Col U V T).
apply (col_trans_1 U A V T).

*****
H11 : Col A Y T
H10 : Col U Y T
H6 : Col U Y A
H9 : eq (DSeg A T) (DSeg C D)
H : Col T A U
T : Point
d : F
H8 : not (eq U V)
H7 : Col Y U V
H5 : perp Y P U V
H4 : not (eq A U)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A U V
Y,P,U,V,A,C,D : Point
*****
Col U A V
+++++
auto with Geom.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
unfold on_foot in H.
use H.
pose (d := C**D/A**U).
assert ({T : Point | Col T A U /\\ A ** T = d * A**U}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H6.
assert (A**T = C**D).
rewrite <- H9.
clear H6.
rewrite ( l_24_b A T P Y).
assert (Col U Y A).
assert (Col U Y T).
assert (Col A Y T).
auto.
assert (Col U V T).
apply (col_trans_1 U A V T).

*****
H11 : Col A Y T
H10 : Col U Y T
H6 : Col U Y A
H9 : eq (DSeg A T) (DSeg C D)
H : Col T A U
T : Point
d : F
H8 : not (eq U V)
H7 : Col Y U V
H5 : perp Y P U V
H4 : not (eq A U)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A U V
Y,P,U,V,A,C,D : Point
*****
Col U A T
+++++
auto with Geom.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
unfold on_foot in H.
use H.
pose (d := C**D/A**U).
assert ({T : Point | Col T A U /\\ A ** T = d * A**U}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H6.
assert (A**T = C**D).
rewrite <- H9.
clear H6.
rewrite ( l_24_b A T P Y).
assert (Col U Y A).
assert (Col U Y T).
assert (Col A Y T).
auto.
assert (Col U V T).

*****
H12 : Col U V T
H11 : Col A Y T
H10 : Col U Y T
H6 : Col U Y A
H9 : eq (DSeg A T) (DSeg C D)
H : Col T A U
T : Point
d : F
H8 : not (eq U V)
H7 : Col Y U V
H5 : perp Y P U V
H4 : not (eq A U)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A U V
Y,P,U,V,A,C,D : Point
*****
perp A T P Y
+++++
assert (parallel U V A T).
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
unfold on_foot in H.
use H.
pose (d := C**D/A**U).
assert ({T : Point | Col T A U /\\ A ** T = d * A**U}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H6.
assert (A**T = C**D).
rewrite <- H9.
clear H6.
rewrite ( l_24_b A T P Y).
assert (Col U Y A).
assert (Col U Y T).
assert (Col A Y T).
auto.
assert (Col U V T).
assert (parallel U V A T).

*****
H12 : Col U V T
H11 : Col A Y T
H10 : Col U Y T
H6 : Col U Y A
H9 : eq (DSeg A T) (DSeg C D)
H : Col T A U
T : Point
d : F
H8 : not (eq U V)
H7 : Col Y U V
H5 : perp Y P U V
H4 : not (eq A U)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A U V
Y,P,U,V,A,C,D : Point
*****
parallel U V A T
+++++
unfold parallel.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
unfold on_foot in H.
use H.
pose (d := C**D/A**U).
assert ({T : Point | Col T A U /\\ A ** T = d * A**U}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H6.
assert (A**T = C**D).
rewrite <- H9.
clear H6.
rewrite ( l_24_b A T P Y).
assert (Col U Y A).
assert (Col U Y T).
assert (Col A Y T).
auto.
assert (Col U V T).
assert (parallel U V A T).
unfold parallel.

*****
H12 : Col U V T
H11 : Col A Y T
H10 : Col U Y T
H6 : Col U Y A
H9 : eq (DSeg A T) (DSeg C D)
H : Col T A U
T : Point
d : F
H8 : not (eq U V)
H7 : Col Y U V
H5 : perp Y P U V
H4 : not (eq A U)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A U V
Y,P,U,V,A,C,D : Point
*****
eq (S4 U A V T) F0
+++++
unfold S4.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
unfold on_foot in H.
use H.
pose (d := C**D/A**U).
assert ({T : Point | Col T A U /\\ A ** T = d * A**U}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H6.
assert (A**T = C**D).
rewrite <- H9.
clear H6.
rewrite ( l_24_b A T P Y).
assert (Col U Y A).
assert (Col U Y T).
assert (Col A Y T).
auto.
assert (Col U V T).
assert (parallel U V A T).
unfold parallel.
unfold S4.

*****
H12 : Col U V T
H11 : Col A Y T
H10 : Col U Y T
H6 : Col U Y A
H9 : eq (DSeg A T) (DSeg C D)
H : Col T A U
T : Point
d : F
H8 : not (eq U V)
H7 : Col Y U V
H5 : perp Y P U V
H4 : not (eq A U)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A U V
Y,P,U,V,A,C,D : Point
*****
eq (Fplus (S U A V) (S U V T)) F0
+++++
basic_simpl.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
unfold on_foot in H.
use H.
pose (d := C**D/A**U).
assert ({T : Point | Col T A U /\\ A ** T = d * A**U}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H6.
assert (A**T = C**D).
rewrite <- H9.
clear H6.
rewrite ( l_24_b A T P Y).
assert (Col U Y A).
assert (Col U Y T).
assert (Col A Y T).
auto.
assert (Col U V T).
assert (parallel U V A T).
unfold parallel.
unfold S4.
basic_simpl.

*****
H12 : Col U V T
H11 : Col A Y T
H10 : Col U Y T
H6 : Col U Y A
H9 : eq (DSeg A T) (DSeg C D)
H : Col T A U
T : Point
d : F
H8 : not (eq U V)
H7 : Col Y U V
H5 : perp Y P U V
H4 : not (eq A U)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A U V
Y,P,U,V,A,C,D : Point
*****
eq (Fplus (S U A V) (S U V T)) F0
+++++
replace (S U A V) with 0.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
unfold on_foot in H.
use H.
pose (d := C**D/A**U).
assert ({T : Point | Col T A U /\\ A ** T = d * A**U}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H6.
assert (A**T = C**D).
rewrite <- H9.
clear H6.
rewrite ( l_24_b A T P Y).
assert (Col U Y A).
assert (Col U Y T).
assert (Col A Y T).
auto.
assert (Col U V T).
assert (parallel U V A T).
unfold parallel.
unfold S4.
basic_simpl.
replace (S U A V) with 0.

*****
H12 : Col U V T
H11 : Col A Y T
H10 : Col U Y T
H6 : Col U Y A
H9 : eq (DSeg A T) (DSeg C D)
H : Col T A U
T : Point
d : F
H8 : not (eq U V)
H7 : Col Y U V
H5 : perp Y P U V
H4 : not (eq A U)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A U V
Y,P,U,V,A,C,D : Point
*****
eq (Fplus F0 (S U V T)) F0
+++++
rewrite H12.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
unfold on_foot in H.
use H.
pose (d := C**D/A**U).
assert ({T : Point | Col T A U /\\ A ** T = d * A**U}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H6.
assert (A**T = C**D).
rewrite <- H9.
clear H6.
rewrite ( l_24_b A T P Y).
assert (Col U Y A).
assert (Col U Y T).
assert (Col A Y T).
auto.
assert (Col U V T).
assert (parallel U V A T).
unfold parallel.
unfold S4.
basic_simpl.
replace (S U A V) with 0.
rewrite H12.

*****
H12 : Col U V T
H11 : Col A Y T
H10 : Col U Y T
H6 : Col U Y A
H9 : eq (DSeg A T) (DSeg C D)
H : Col T A U
T : Point
d : F
H8 : not (eq U V)
H7 : Col Y U V
H5 : perp Y P U V
H4 : not (eq A U)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A U V
Y,P,U,V,A,C,D : Point
*****
eq (Fplus F0 F0) F0
+++++
ring.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
unfold on_foot in H.
use H.
pose (d := C**D/A**U).
assert ({T : Point | Col T A U /\\ A ** T = d * A**U}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H6.
assert (A**T = C**D).
rewrite <- H9.
clear H6.
rewrite ( l_24_b A T P Y).
assert (Col U Y A).
assert (Col U Y T).
assert (Col A Y T).
auto.
assert (Col U V T).
assert (parallel U V A T).
unfold parallel.
unfold S4.
basic_simpl.
replace (S U A V) with 0.

*****
H12 : Col U V T
H11 : Col A Y T
H10 : Col U Y T
H6 : Col U Y A
H9 : eq (DSeg A T) (DSeg C D)
H : Col T A U
T : Point
d : F
H8 : not (eq U V)
H7 : Col Y U V
H5 : perp Y P U V
H4 : not (eq A U)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A U V
Y,P,U,V,A,C,D : Point
*****
eq F0 (S U A V)
+++++
assert (Col U A V).
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
unfold on_foot in H.
use H.
pose (d := C**D/A**U).
assert ({T : Point | Col T A U /\\ A ** T = d * A**U}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H6.
assert (A**T = C**D).
rewrite <- H9.
clear H6.
rewrite ( l_24_b A T P Y).
assert (Col U Y A).
assert (Col U Y T).
assert (Col A Y T).
auto.
assert (Col U V T).
assert (parallel U V A T).
unfold parallel.
unfold S4.
basic_simpl.
replace (S U A V) with 0.
assert (Col U A V).

*****
H12 : Col U V T
H11 : Col A Y T
H10 : Col U Y T
H6 : Col U Y A
H9 : eq (DSeg A T) (DSeg C D)
H : Col T A U
T : Point
d : F
H8 : not (eq U V)
H7 : Col Y U V
H5 : perp Y P U V
H4 : not (eq A U)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A U V
Y,P,U,V,A,C,D : Point
*****
Col U A V
+++++
auto with Geom.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
unfold on_foot in H.
use H.
pose (d := C**D/A**U).
assert ({T : Point | Col T A U /\\ A ** T = d * A**U}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H6.
assert (A**T = C**D).
rewrite <- H9.
clear H6.
rewrite ( l_24_b A T P Y).
assert (Col U Y A).
assert (Col U Y T).
assert (Col A Y T).
auto.
assert (Col U V T).
assert (parallel U V A T).
unfold parallel.
unfold S4.
basic_simpl.
replace (S U A V) with 0.
assert (Col U A V).

*****
H13 : Col U A V
H12 : Col U V T
H11 : Col A Y T
H10 : Col U Y T
H6 : Col U Y A
H9 : eq (DSeg A T) (DSeg C D)
H : Col T A U
T : Point
d : F
H8 : not (eq U V)
H7 : Col Y U V
H5 : perp Y P U V
H4 : not (eq A U)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A U V
Y,P,U,V,A,C,D : Point
*****
eq F0 (S U A V)
+++++
idtac.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
unfold on_foot in H.
use H.
pose (d := C**D/A**U).
assert ({T : Point | Col T A U /\\ A ** T = d * A**U}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H6.
assert (A**T = C**D).
rewrite <- H9.
clear H6.
rewrite ( l_24_b A T P Y).
assert (Col U Y A).
assert (Col U Y T).
assert (Col A Y T).
auto.
assert (Col U V T).
assert (parallel U V A T).
unfold parallel.
unfold S4.
basic_simpl.
replace (S U A V) with 0.
assert (Col U A V).
idtac.

*****
H13 : Col U A V
H12 : Col U V T
H11 : Col A Y T
H10 : Col U Y T
H6 : Col U Y A
H9 : eq (DSeg A T) (DSeg C D)
H : Col T A U
T : Point
d : F
H8 : not (eq U V)
H7 : Col Y U V
H5 : perp Y P U V
H4 : not (eq A U)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A U V
Y,P,U,V,A,C,D : Point
*****
eq F0 (S U A V)
+++++
symmetry.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
unfold on_foot in H.
use H.
pose (d := C**D/A**U).
assert ({T : Point | Col T A U /\\ A ** T = d * A**U}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H6.
assert (A**T = C**D).
rewrite <- H9.
clear H6.
rewrite ( l_24_b A T P Y).
assert (Col U Y A).
assert (Col U Y T).
assert (Col A Y T).
auto.
assert (Col U V T).
assert (parallel U V A T).
unfold parallel.
unfold S4.
basic_simpl.
replace (S U A V) with 0.
assert (Col U A V).
idtac.
symmetry.

*****
H13 : Col U A V
H12 : Col U V T
H11 : Col A Y T
H10 : Col U Y T
H6 : Col U Y A
H9 : eq (DSeg A T) (DSeg C D)
H : Col T A U
T : Point
d : F
H8 : not (eq U V)
H7 : Col Y U V
H5 : perp Y P U V
H4 : not (eq A U)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A U V
Y,P,U,V,A,C,D : Point
*****
eq (S U A V) F0
+++++
auto with Geom.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
unfold on_foot in H.
use H.
pose (d := C**D/A**U).
assert ({T : Point | Col T A U /\\ A ** T = d * A**U}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H6.
assert (A**T = C**D).
rewrite <- H9.
clear H6.
rewrite ( l_24_b A T P Y).
assert (Col U Y A).
assert (Col U Y T).
assert (Col A Y T).
auto.
assert (Col U V T).
assert (parallel U V A T).

*****
H13 : parallel U V A T
H12 : Col U V T
H11 : Col A Y T
H10 : Col U Y T
H6 : Col U Y A
H9 : eq (DSeg A T) (DSeg C D)
H : Col T A U
T : Point
d : F
H8 : not (eq U V)
H7 : Col Y U V
H5 : perp Y P U V
H4 : not (eq A U)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A U V
Y,P,U,V,A,C,D : Point
*****
perp A T P Y
+++++
cut (perp A T Y P).
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
unfold on_foot in H.
use H.
pose (d := C**D/A**U).
assert ({T : Point | Col T A U /\\ A ** T = d * A**U}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H6.
assert (A**T = C**D).
rewrite <- H9.
clear H6.
rewrite ( l_24_b A T P Y).
assert (Col U Y A).
assert (Col U Y T).
assert (Col A Y T).
auto.
assert (Col U V T).
assert (parallel U V A T).
cut (perp A T Y P).

*****
H13 : parallel U V A T
H12 : Col U V T
H11 : Col A Y T
H10 : Col U Y T
H6 : Col U Y A
H9 : eq (DSeg A T) (DSeg C D)
H : Col T A U
T : Point
d : F
H8 : not (eq U V)
H7 : Col Y U V
H5 : perp Y P U V
H4 : not (eq A U)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A U V
Y,P,U,V,A,C,D : Point
*****
forall _ : perp A T Y P, perp A T P Y
+++++
auto with Geom.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
unfold on_foot in H.
use H.
pose (d := C**D/A**U).
assert ({T : Point | Col T A U /\\ A ** T = d * A**U}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H6.
assert (A**T = C**D).
rewrite <- H9.
clear H6.
rewrite ( l_24_b A T P Y).
assert (Col U Y A).
assert (Col U Y T).
assert (Col A Y T).
auto.
assert (Col U V T).
assert (parallel U V A T).
cut (perp A T Y P).

*****
H13 : parallel U V A T
H12 : Col U V T
H11 : Col A Y T
H10 : Col U Y T
H6 : Col U Y A
H9 : eq (DSeg A T) (DSeg C D)
H : Col T A U
T : Point
d : F
H8 : not (eq U V)
H7 : Col Y U V
H5 : perp Y P U V
H4 : not (eq A U)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A U V
Y,P,U,V,A,C,D : Point
*****
perp A T Y P
+++++
apply (perp_para_perp U V Y P A T).
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
unfold on_foot in H.
use H.
pose (d := C**D/A**U).
assert ({T : Point | Col T A U /\\ A ** T = d * A**U}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H6.
assert (A**T = C**D).
rewrite <- H9.
clear H6.
rewrite ( l_24_b A T P Y).
assert (Col U Y A).
assert (Col U Y T).
assert (Col A Y T).
auto.
assert (Col U V T).
assert (parallel U V A T).
cut (perp A T Y P).
apply (perp_para_perp U V Y P A T).

*****
H13 : parallel U V A T
H12 : Col U V T
H11 : Col A Y T
H10 : Col U Y T
H6 : Col U Y A
H9 : eq (DSeg A T) (DSeg C D)
H : Col T A U
T : Point
d : F
H8 : not (eq U V)
H7 : Col Y U V
H5 : perp Y P U V
H4 : not (eq A U)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A U V
Y,P,U,V,A,C,D : Point
*****
not (eq U V)
+++++
auto with Geom.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
unfold on_foot in H.
use H.
pose (d := C**D/A**U).
assert ({T : Point | Col T A U /\\ A ** T = d * A**U}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H6.
assert (A**T = C**D).
rewrite <- H9.
clear H6.
rewrite ( l_24_b A T P Y).
assert (Col U Y A).
assert (Col U Y T).
assert (Col A Y T).
auto.
assert (Col U V T).
assert (parallel U V A T).
cut (perp A T Y P).
apply (perp_para_perp U V Y P A T).

*****
H13 : parallel U V A T
H12 : Col U V T
H11 : Col A Y T
H10 : Col U Y T
H6 : Col U Y A
H9 : eq (DSeg A T) (DSeg C D)
H : Col T A U
T : Point
d : F
H8 : not (eq U V)
H7 : Col Y U V
H5 : perp Y P U V
H4 : not (eq A U)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A U V
Y,P,U,V,A,C,D : Point
*****
perp U V Y P
+++++
auto with Geom.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
unfold on_foot in H.
use H.
pose (d := C**D/A**U).
assert ({T : Point | Col T A U /\\ A ** T = d * A**U}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H6.
assert (A**T = C**D).
rewrite <- H9.
clear H6.
rewrite ( l_24_b A T P Y).
assert (Col U Y A).
assert (Col U Y T).
assert (Col A Y T).
auto.
assert (Col U V T).
assert (parallel U V A T).
cut (perp A T Y P).
apply (perp_para_perp U V Y P A T).

*****
H13 : parallel U V A T
H12 : Col U V T
H11 : Col A Y T
H10 : Col U Y T
H6 : Col U Y A
H9 : eq (DSeg A T) (DSeg C D)
H : Col T A U
T : Point
d : F
H8 : not (eq U V)
H7 : Col Y U V
H5 : perp Y P U V
H4 : not (eq A U)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A U V
Y,P,U,V,A,C,D : Point
*****
parallel U V A T
+++++
auto with Geom.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
unfold on_foot in H.
use H.
pose (d := C**D/A**U).
assert ({T : Point | Col T A U /\\ A ** T = d * A**U}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H6.
assert (A**T = C**D).
rewrite <- H9.
clear H6.
rewrite ( l_24_b A T P Y).

*****
H9 : eq (DSeg A T) (DSeg C D)
H : Col T A U
T : Point
d : F
H8 : not (eq U V)
H7 : Col Y U V
H5 : perp Y P U V
H4 : not (eq A U)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A U V
Y,P,U,V,A,C,D : Point
*****
not (eq A T)
+++++
unfold not.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
unfold on_foot in H.
use H.
pose (d := C**D/A**U).
assert ({T : Point | Col T A U /\\ A ** T = d * A**U}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H6.
assert (A**T = C**D).
rewrite <- H9.
clear H6.
rewrite ( l_24_b A T P Y).
unfold not.

*****
H9 : eq (DSeg A T) (DSeg C D)
H : Col T A U
T : Point
d : F
H8 : not (eq U V)
H7 : Col Y U V
H5 : perp Y P U V
H4 : not (eq A U)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A U V
Y,P,U,V,A,C,D : Point
*****
forall _ : eq A T, False
+++++
intro.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
unfold on_foot in H.
use H.
pose (d := C**D/A**U).
assert ({T : Point | Col T A U /\\ A ** T = d * A**U}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H6.
assert (A**T = C**D).
rewrite <- H9.
clear H6.
rewrite ( l_24_b A T P Y).
unfold not.
intro.

*****
H6 : eq A T
H9 : eq (DSeg A T) (DSeg C D)
H : Col T A U
T : Point
d : F
H8 : not (eq U V)
H7 : Col Y U V
H5 : perp Y P U V
H4 : not (eq A U)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A U V
Y,P,U,V,A,C,D : Point
*****
False
+++++
subst.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
unfold on_foot in H.
use H.
pose (d := C**D/A**U).
assert ({T : Point | Col T A U /\\ A ** T = d * A**U}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H6.
assert (A**T = C**D).
rewrite <- H9.
clear H6.
rewrite ( l_24_b A T P Y).
unfold not.
intro.
subst.

*****
d : F
H8 : not (eq U V)
H7 : Col Y U V
H5 : perp Y P U V
H3 : not (eq T Y)
H4 : not (eq T U)
H2 : not (eq C D)
H0 : Col T U V
H1 : parallel T Y C D
H : Col T T U
H9 : eq (DSeg T T) (DSeg C D)
Y,P,U,V,C,D,T : Point
*****
False
+++++
basic_simpl.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
unfold on_foot in H.
use H.
pose (d := C**D/A**U).
assert ({T : Point | Col T A U /\\ A ** T = d * A**U}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H6.
assert (A**T = C**D).
rewrite <- H9.
clear H6.
rewrite ( l_24_b A T P Y).
unfold not.
intro.
subst.
basic_simpl.

*****
d : F
H8 : not (eq U V)
H7 : Col Y U V
H5 : perp Y P U V
H3 : not (eq T Y)
H4 : not (eq T U)
H2 : not (eq C D)
H0 : Col T U V
H1 : parallel T Y C D
H : Col T T U
H9 : eq F0 (DSeg C D)
Y,P,U,V,C,D,T : Point
*****
False
+++++
assert (C=D).
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
unfold on_foot in H.
use H.
pose (d := C**D/A**U).
assert ({T : Point | Col T A U /\\ A ** T = d * A**U}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H6.
assert (A**T = C**D).
rewrite <- H9.
clear H6.
rewrite ( l_24_b A T P Y).
unfold not.
intro.
subst.
basic_simpl.
assert (C=D).

*****
d : F
H8 : not (eq U V)
H7 : Col Y U V
H5 : perp Y P U V
H3 : not (eq T Y)
H4 : not (eq T U)
H2 : not (eq C D)
H0 : Col T U V
H1 : parallel T Y C D
H : Col T T U
H9 : eq F0 (DSeg C D)
Y,P,U,V,C,D,T : Point
*****
eq C D
+++++
auto with Geom.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.
unfold on_foot in H.
use H.
pose (d := C**D/A**U).
assert ({T : Point | Col T A U /\\ A ** T = d * A**U}).
elim H.
intros T HT.
clear H.
use HT.
unfold d in H6.
assert (A**T = C**D).
rewrite <- H9.
clear H6.
rewrite ( l_24_b A T P Y).
unfold not.
intro.
subst.
basic_simpl.
assert (C=D).

*****
H6 : eq C D
d : F
H8 : not (eq U V)
H7 : Col Y U V
H5 : perp Y P U V
H3 : not (eq T Y)
H4 : not (eq T U)
H2 : not (eq C D)
H0 : Col T U V
H1 : parallel T Y C D
H : Col T T U
H9 : eq F0 (DSeg C D)
Y,P,U,V,C,D,T : Point
*****
False
+++++
intuition.
-----
Theorem elim_ratio_on_foot_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C D -> C <> D -> A <> Y -> A**Y / C**D = Py4 P C A D / Py C D C.
Proof.
intros.
cases_equality A U.

*****

*****

+++++
Qed.
-----
Theorem elim_ratio_on_foot_a_invariant : forall C D,\nC<>D -> Py C D C <> 0.
-----
Theorem elim_ratio_on_foot_a_invariant : forall C D, C<>D -> Py C D C <> 0.

*****

*****
forall (C D : Point) (_ : not (eq C D)), not (eq (Py C D C) F0)
+++++
Proof.
-----
Theorem elim_ratio_on_foot_a_invariant : forall C D, C<>D -> Py C D C <> 0.
Proof.

*****

*****
forall (C D : Point) (_ : not (eq C D)), not (eq (Py C D C) F0)
+++++
auto with Geom.
-----
Theorem elim_ratio_on_foot_a_invariant : forall C D, C<>D -> Py C D C <> 0.
Proof.
auto with Geom.

*****

*****

+++++
Qed.
-----
Theorem elim_ratio_on_foot_spec_a :\nforall Y P U V A C D : Point,\non_foot Y P U V ->\nCol A U V ->\nparallel A Y C Y ->\nC <> Y ->\nA <> Y ->\nA**Y / C**Y = (Py P U V * Py4 P C A V + Py P V U * Py4 P C A U) /\n(Py P U V * Py C V C + Py P V U * Py C U C - Py P U V * Py P V U).
-----
Theorem elim_ratio_on_foot_spec_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C Y -> C <> Y -> A <> Y -> A**Y / C**Y = (Py P U V * Py4 P C A V + Py P V U * Py4 P C A U) / (Py P U V * Py C V C + Py P V U * Py C U C - Py P U V * Py P V U).

*****

*****
forall (Y P U V A C _ : Point) (_ : on_foot Y P U V) (_ : Col A U V) (_ : parallel A Y C Y) (_ : not (eq C Y)) (_ : not (eq A Y)), eq (Fdiv (DSeg A Y) (DSeg C Y)) (Fdiv (Fplus (Fmult (Py P U V) (Py4 P C A V)) (Fmult (Py P V U) (Py4 P C A U))) (Fminus (Fplus (Fmult (Py P U V) (Py C V C)) (Fmult (Py P V U) (Py C U C))) (Fmult (Py P U V) (Py P V U))))
+++++
Proof.
-----
Theorem elim_ratio_on_foot_spec_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C Y -> C <> Y -> A <> Y -> A**Y / C**Y = (Py P U V * Py4 P C A V + Py P V U * Py4 P C A U) / (Py P U V * Py C V C + Py P V U * Py C U C - Py P U V * Py P V U).
Proof.

*****

*****
forall (Y P U V A C _ : Point) (_ : on_foot Y P U V) (_ : Col A U V) (_ : parallel A Y C Y) (_ : not (eq C Y)) (_ : not (eq A Y)), eq (Fdiv (DSeg A Y) (DSeg C Y)) (Fdiv (Fplus (Fmult (Py P U V) (Py4 P C A V)) (Fmult (Py P V U) (Py4 P C A U))) (Fminus (Fplus (Fmult (Py P U V) (Py C V C)) (Fmult (Py P V U) (Py C U C))) (Fmult (Py P U V) (Py P V U))))
+++++
intros.
-----
Theorem elim_ratio_on_foot_spec_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C Y -> C <> Y -> A <> Y -> A**Y / C**Y = (Py P U V * Py4 P C A V + Py P V U * Py4 P C A U) / (Py P U V * Py C V C + Py P V U * Py C U C - Py P U V * Py P V U).
Proof.
intros.

*****
H3 : not (eq A Y)
H2 : not (eq C Y)
H1 : parallel A Y C Y
H0 : Col A U V
H : on_foot Y P U V
Y,P,U,V,A,C,D : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C Y)) (Fdiv (Fplus (Fmult (Py P U V) (Py4 P C A V)) (Fmult (Py P V U) (Py4 P C A U))) (Fminus (Fplus (Fmult (Py P U V) (Py C V C)) (Fmult (Py P V U) (Py C U C))) (Fmult (Py P U V) (Py P V U))))
+++++
rewrite (elim_ratio_on_foot_a Y P U V).
-----
Theorem elim_ratio_on_foot_spec_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C Y -> C <> Y -> A <> Y -> A**Y / C**Y = (Py P U V * Py4 P C A V + Py P V U * Py4 P C A U) / (Py P U V * Py C V C + Py P V U * Py C U C - Py P U V * Py P V U).
Proof.
intros.
rewrite (elim_ratio_on_foot_a Y P U V).

*****
H3 : not (eq A Y)
H2 : not (eq C Y)
H1 : parallel A Y C Y
H0 : Col A U V
H : on_foot Y P U V
Y,P,U,V,A,C,D : Point
*****
eq (Fdiv (Py4 P C A Y) (Py C Y C)) (Fdiv (Fplus (Fmult (Py P U V) (Py4 P C A V)) (Fmult (Py P V U) (Py4 P C A U))) (Fminus (Fplus (Fmult (Py P U V) (Py C V C)) (Fmult (Py P V U) (Py C U C))) (Fmult (Py P U V) (Py P V U))))
+++++
idtac.
-----
Theorem elim_ratio_on_foot_spec_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C Y -> C <> Y -> A <> Y -> A**Y / C**Y = (Py P U V * Py4 P C A V + Py P V U * Py4 P C A U) / (Py P U V * Py C V C + Py P V U * Py C U C - Py P U V * Py P V U).
Proof.
intros.
rewrite (elim_ratio_on_foot_a Y P U V).
idtac.

*****
H3 : not (eq A Y)
H2 : not (eq C Y)
H1 : parallel A Y C Y
H0 : Col A U V
H : on_foot Y P U V
Y,P,U,V,A,C,D : Point
*****
eq (Fdiv (Py4 P C A Y) (Py C Y C)) (Fdiv (Fplus (Fmult (Py P U V) (Py4 P C A V)) (Fmult (Py P V U) (Py4 P C A U))) (Fminus (Fplus (Fmult (Py P U V) (Py C V C)) (Fmult (Py P V U) (Py C U C))) (Fmult (Py P U V) (Py P V U))))
+++++
assert (T:= (elim_ratio_on_foot_a_invariant C Y H2)).
-----
Theorem elim_ratio_on_foot_spec_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C Y -> C <> Y -> A <> Y -> A**Y / C**Y = (Py P U V * Py4 P C A V + Py P V U * Py4 P C A U) / (Py P U V * Py C V C + Py P V U * Py C U C - Py P U V * Py P V U).
Proof.
intros.
rewrite (elim_ratio_on_foot_a Y P U V).
idtac.
assert (T:= (elim_ratio_on_foot_a_invariant C Y H2)).

*****
T : not (eq (Py C Y C) F0)
H3 : not (eq A Y)
H2 : not (eq C Y)
H1 : parallel A Y C Y
H0 : Col A U V
H : on_foot Y P U V
Y,P,U,V,A,C,D : Point
*****
eq (Fdiv (Py4 P C A Y) (Py C Y C)) (Fdiv (Fplus (Fmult (Py P U V) (Py4 P C A V)) (Fmult (Py P V U) (Py4 P C A U))) (Fminus (Fplus (Fmult (Py P U V) (Py C V C)) (Fmult (Py P V U) (Py C U C))) (Fmult (Py P U V) (Py P V U))))
+++++
unfold Py4.
-----
Theorem elim_ratio_on_foot_spec_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C Y -> C <> Y -> A <> Y -> A**Y / C**Y = (Py P U V * Py4 P C A V + Py P V U * Py4 P C A U) / (Py P U V * Py C V C + Py P V U * Py C U C - Py P U V * Py P V U).
Proof.
intros.
rewrite (elim_ratio_on_foot_a Y P U V).
idtac.
assert (T:= (elim_ratio_on_foot_a_invariant C Y H2)).
unfold Py4.

*****
T : not (eq (Py C Y C) F0)
H3 : not (eq A Y)
H2 : not (eq C Y)
H1 : parallel A Y C Y
H0 : Col A U V
H : on_foot Y P U V
Y,P,U,V,A,C,D : Point
*****
eq (Fdiv (Fminus (Py P C Y) (Py A C Y)) (Py C Y C)) (Fdiv (Fplus (Fmult (Py P U V) (Fminus (Py P C V) (Py A C V))) (Fmult (Py P V U) (Fminus (Py P C U) (Py A C U)))) (Fminus (Fplus (Fmult (Py P U V) (Py C V C)) (Fmult (Py P V U) (Py C U C))) (Fmult (Py P U V) (Py P V U))))
+++++
rewrite (elim_py_on_foot_right P C P U V) in *.
-----
Theorem elim_ratio_on_foot_spec_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C Y -> C <> Y -> A <> Y -> A**Y / C**Y = (Py P U V * Py4 P C A V + Py P V U * Py4 P C A U) / (Py P U V * Py C V C + Py P V U * Py C U C - Py P U V * Py P V U).
Proof.
intros.
rewrite (elim_ratio_on_foot_a Y P U V).
idtac.
assert (T:= (elim_ratio_on_foot_a_invariant C Y H2)).
unfold Py4.
rewrite (elim_py_on_foot_right P C P U V) in *.

*****
T : not (eq (Py C Y C) F0)
H3 : not (eq A Y)
H2 : not (eq C Y)
H1 : parallel A Y C Y
H0 : Col A U V
H : on_foot Y P U V
Y,P,U,V,A,C,D : Point
*****
eq (Fdiv (Fminus (Fdiv (Fplus (Fmult (Py P U V) (Py P C V)) (Fmult (Py P V U) (Py P C U))) (Py U V U)) (Py A C Y)) (Py C Y C)) (Fdiv (Fplus (Fmult (Py P U V) (Fminus (Py P C V) (Py A C V))) (Fmult (Py P V U) (Fminus (Py P C U) (Py A C U)))) (Fminus (Fplus (Fmult (Py P U V) (Py C V C)) (Fmult (Py P V U) (Py C U C))) (Fmult (Py P U V) (Py P V U))))
+++++
idtac.
-----
Theorem elim_ratio_on_foot_spec_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C Y -> C <> Y -> A <> Y -> A**Y / C**Y = (Py P U V * Py4 P C A V + Py P V U * Py4 P C A U) / (Py P U V * Py C V C + Py P V U * Py C U C - Py P U V * Py P V U).
Proof.
intros.
rewrite (elim_ratio_on_foot_a Y P U V).
idtac.
assert (T:= (elim_ratio_on_foot_a_invariant C Y H2)).
unfold Py4.
rewrite (elim_py_on_foot_right P C P U V) in *.
idtac.

*****
T : not (eq (Py C Y C) F0)
H3 : not (eq A Y)
H2 : not (eq C Y)
H1 : parallel A Y C Y
H0 : Col A U V
H : on_foot Y P U V
Y,P,U,V,A,C,D : Point
*****
eq (Fdiv (Fminus (Fdiv (Fplus (Fmult (Py P U V) (Py P C V)) (Fmult (Py P V U) (Py P C U))) (Py U V U)) (Py A C Y)) (Py C Y C)) (Fdiv (Fplus (Fmult (Py P U V) (Fminus (Py P C V) (Py A C V))) (Fmult (Py P V U) (Fminus (Py P C U) (Py A C U)))) (Fminus (Fplus (Fmult (Py P U V) (Py C V C)) (Fmult (Py P V U) (Py C U C))) (Fmult (Py P U V) (Py P V U))))
+++++
rewrite (elim_py_on_foot_right A C P U V) in *.
-----
Theorem elim_ratio_on_foot_spec_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C Y -> C <> Y -> A <> Y -> A**Y / C**Y = (Py P U V * Py4 P C A V + Py P V U * Py4 P C A U) / (Py P U V * Py C V C + Py P V U * Py C U C - Py P U V * Py P V U).
Proof.
intros.
rewrite (elim_ratio_on_foot_a Y P U V).
idtac.
assert (T:= (elim_ratio_on_foot_a_invariant C Y H2)).
unfold Py4.
rewrite (elim_py_on_foot_right P C P U V) in *.
idtac.
rewrite (elim_py_on_foot_right A C P U V) in *.

*****
T : not (eq (Py C Y C) F0)
H3 : not (eq A Y)
H2 : not (eq C Y)
H1 : parallel A Y C Y
H0 : Col A U V
H : on_foot Y P U V
Y,P,U,V,A,C,D : Point
*****
eq (Fdiv (Fminus (Fdiv (Fplus (Fmult (Py P U V) (Py P C V)) (Fmult (Py P V U) (Py P C U))) (Py U V U)) (Fdiv (Fplus (Fmult (Py P U V) (Py A C V)) (Fmult (Py P V U) (Py A C U))) (Py U V U))) (Py C Y C)) (Fdiv (Fplus (Fmult (Py P U V) (Fminus (Py P C V) (Py A C V))) (Fmult (Py P V U) (Fminus (Py P C U) (Py A C U)))) (Fminus (Fplus (Fmult (Py P U V) (Py C V C)) (Fmult (Py P V U) (Py C U C))) (Fmult (Py P U V) (Py P V U))))
+++++
idtac.
-----
Theorem elim_ratio_on_foot_spec_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C Y -> C <> Y -> A <> Y -> A**Y / C**Y = (Py P U V * Py4 P C A V + Py P V U * Py4 P C A U) / (Py P U V * Py C V C + Py P V U * Py C U C - Py P U V * Py P V U).
Proof.
intros.
rewrite (elim_ratio_on_foot_a Y P U V).
idtac.
assert (T:= (elim_ratio_on_foot_a_invariant C Y H2)).
unfold Py4.
rewrite (elim_py_on_foot_right P C P U V) in *.
idtac.
rewrite (elim_py_on_foot_right A C P U V) in *.
idtac.

*****
T : not (eq (Py C Y C) F0)
H3 : not (eq A Y)
H2 : not (eq C Y)
H1 : parallel A Y C Y
H0 : Col A U V
H : on_foot Y P U V
Y,P,U,V,A,C,D : Point
*****
eq (Fdiv (Fminus (Fdiv (Fplus (Fmult (Py P U V) (Py P C V)) (Fmult (Py P V U) (Py P C U))) (Py U V U)) (Fdiv (Fplus (Fmult (Py P U V) (Py A C V)) (Fmult (Py P V U) (Py A C U))) (Py U V U))) (Py C Y C)) (Fdiv (Fplus (Fmult (Py P U V) (Fminus (Py P C V) (Py A C V))) (Fmult (Py P V U) (Fminus (Py P C U) (Py A C U)))) (Fminus (Fplus (Fmult (Py P U V) (Py C V C)) (Fmult (Py P V U) (Py C U C))) (Fmult (Py P U V) (Py P V U))))
+++++
rewrite (pyth_simpl_4 C Y) in *.
-----
Theorem elim_ratio_on_foot_spec_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C Y -> C <> Y -> A <> Y -> A**Y / C**Y = (Py P U V * Py4 P C A V + Py P V U * Py4 P C A U) / (Py P U V * Py C V C + Py P V U * Py C U C - Py P U V * Py P V U).
Proof.
intros.
rewrite (elim_ratio_on_foot_a Y P U V).
idtac.
assert (T:= (elim_ratio_on_foot_a_invariant C Y H2)).
unfold Py4.
rewrite (elim_py_on_foot_right P C P U V) in *.
idtac.
rewrite (elim_py_on_foot_right A C P U V) in *.
idtac.
rewrite (pyth_simpl_4 C Y) in *.

*****
T : not (eq (Py Y C Y) F0)
H3 : not (eq A Y)
H2 : not (eq C Y)
H1 : parallel A Y C Y
H0 : Col A U V
H : on_foot Y P U V
Y,P,U,V,A,C,D : Point
*****
eq (Fdiv (Fminus (Fdiv (Fplus (Fmult (Py P U V) (Py P C V)) (Fmult (Py P V U) (Py P C U))) (Py U V U)) (Fdiv (Fplus (Fmult (Py P U V) (Py A C V)) (Fmult (Py P V U) (Py A C U))) (Py U V U))) (Py Y C Y)) (Fdiv (Fplus (Fmult (Py P U V) (Fminus (Py P C V) (Py A C V))) (Fmult (Py P V U) (Fminus (Py P C U) (Py A C U)))) (Fminus (Fplus (Fmult (Py P U V) (Py C V C)) (Fmult (Py P V U) (Py C U C))) (Fmult (Py P U V) (Py P V U))))
+++++
rewrite (elim_py_on_foot_left_right C P U V Y) in *.
-----
Theorem elim_ratio_on_foot_spec_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C Y -> C <> Y -> A <> Y -> A**Y / C**Y = (Py P U V * Py4 P C A V + Py P V U * Py4 P C A U) / (Py P U V * Py C V C + Py P V U * Py C U C - Py P U V * Py P V U).
Proof.
intros.
rewrite (elim_ratio_on_foot_a Y P U V).
idtac.
assert (T:= (elim_ratio_on_foot_a_invariant C Y H2)).
unfold Py4.
rewrite (elim_py_on_foot_right P C P U V) in *.
idtac.
rewrite (elim_py_on_foot_right A C P U V) in *.
idtac.
rewrite (pyth_simpl_4 C Y) in *.
rewrite (elim_py_on_foot_left_right C P U V Y) in *.

*****
T : not\n (eq\n (Fdiv\n (Fplus\n (Fplus\n (Fplus (Fmult (Fmult (Py P U V) (Py P U V)) (Py V C V))\n (Fmult (Fmult (Py P U V) (Py P V U)) (Py V C U)))\n (Fmult (Fmult (Py P U V) (Py P V U)) (Py U C V)))\n (Fmult (Fmult (Py P V U) (Py P V U)) (Py U C U)))\n (Fmult (Py U V U) (Py U V U))) F0)
H3 : not (eq A Y)
H2 : not (eq C Y)
H1 : parallel A Y C Y
H0 : Col A U V
H : on_foot Y P U V
Y,P,U,V,A,C,D : Point
*****
eq (Fdiv (Fminus (Fdiv (Fplus (Fmult (Py P U V) (Py P C V)) (Fmult (Py P V U) (Py P C U))) (Py U V U)) (Fdiv (Fplus (Fmult (Py P U V) (Py A C V)) (Fmult (Py P V U) (Py A C U))) (Py U V U))) (Fdiv (Fplus (Fplus (Fplus (Fmult (Fmult (Py P U V) (Py P U V)) (Py V C V)) (Fmult (Fmult (Py P U V) (Py P V U)) (Py V C U))) (Fmult (Fmult (Py P U V) (Py P V U)) (Py U C V))) (Fmult (Fmult (Py P V U) (Py P V U)) (Py U C U))) (Fmult (Py U V U) (Py U V U)))) (Fdiv (Fplus (Fmult (Py P U V) (Fminus (Py P C V) (Py A C V))) (Fmult (Py P V U) (Fminus (Py P C U) (Py A C U)))) (Fminus (Fplus (Fmult (Py P U V) (Py C V C)) (Fmult (Py P V U) (Py C U C))) (Fmult (Py P U V) (Py P V U))))
+++++
idtac.
-----
Theorem elim_ratio_on_foot_spec_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C Y -> C <> Y -> A <> Y -> A**Y / C**Y = (Py P U V * Py4 P C A V + Py P V U * Py4 P C A U) / (Py P U V * Py C V C + Py P V U * Py C U C - Py P U V * Py P V U).
Proof.
intros.
rewrite (elim_ratio_on_foot_a Y P U V).
idtac.
assert (T:= (elim_ratio_on_foot_a_invariant C Y H2)).
unfold Py4.
rewrite (elim_py_on_foot_right P C P U V) in *.
idtac.
rewrite (elim_py_on_foot_right A C P U V) in *.
idtac.
rewrite (pyth_simpl_4 C Y) in *.
rewrite (elim_py_on_foot_left_right C P U V Y) in *.
idtac.

*****
T : not\n (eq\n (Fdiv\n (Fplus\n (Fplus\n (Fplus (Fmult (Fmult (Py P U V) (Py P U V)) (Py V C V))\n (Fmult (Fmult (Py P U V) (Py P V U)) (Py V C U)))\n (Fmult (Fmult (Py P U V) (Py P V U)) (Py U C V)))\n (Fmult (Fmult (Py P V U) (Py P V U)) (Py U C U)))\n (Fmult (Py U V U) (Py U V U))) F0)
H3 : not (eq A Y)
H2 : not (eq C Y)
H1 : parallel A Y C Y
H0 : Col A U V
H : on_foot Y P U V
Y,P,U,V,A,C,D : Point
*****
eq (Fdiv (Fminus (Fdiv (Fplus (Fmult (Py P U V) (Py P C V)) (Fmult (Py P V U) (Py P C U))) (Py U V U)) (Fdiv (Fplus (Fmult (Py P U V) (Py A C V)) (Fmult (Py P V U) (Py A C U))) (Py U V U))) (Fdiv (Fplus (Fplus (Fplus (Fmult (Fmult (Py P U V) (Py P U V)) (Py V C V)) (Fmult (Fmult (Py P U V) (Py P V U)) (Py V C U))) (Fmult (Fmult (Py P U V) (Py P V U)) (Py U C V))) (Fmult (Fmult (Py P V U) (Py P V U)) (Py U C U))) (Fmult (Py U V U) (Py U V U)))) (Fdiv (Fplus (Fmult (Py P U V) (Fminus (Py P C V) (Py A C V))) (Fmult (Py P V U) (Fminus (Py P C U) (Py A C U)))) (Fminus (Fplus (Fmult (Py P U V) (Py C V C)) (Fmult (Py P V U) (Py C U C))) (Fmult (Py P U V) (Py P V U))))
+++++
replace (((Py P U V * Py P C V + Py P V U * Py P C U) / Py U V U - (Py P U V * Py A C V + Py P V U * Py A C U) / Py U V U) / ((Py P U V * Py P U V * Py V C V + Py P U V * Py P V U * Py V C U + Py P U V * Py P V U * Py U C V + Py P V U * Py P V U * Py U C U) / (Py U V U * Py U V U))) with (((Py P U V * Py P C V + Py P V U * Py P C U) - (Py P U V * Py A C V + Py P V U * Py A C U) ) / ((Py P U V * Py P U V * Py V C V + Py P U V * Py P V U * Py V C U + Py P U V * Py P V U * Py U C V + Py P V U * Py P V U * Py U C U) / ( Py U V U))) in *.
-----
Theorem elim_ratio_on_foot_spec_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C Y -> C <> Y -> A <> Y -> A**Y / C**Y = (Py P U V * Py4 P C A V + Py P V U * Py4 P C A U) / (Py P U V * Py C V C + Py P V U * Py C U C - Py P U V * Py P V U).
Proof.
intros.
rewrite (elim_ratio_on_foot_a Y P U V).
idtac.
assert (T:= (elim_ratio_on_foot_a_invariant C Y H2)).
unfold Py4.
rewrite (elim_py_on_foot_right P C P U V) in *.
idtac.
rewrite (elim_py_on_foot_right A C P U V) in *.
idtac.
rewrite (pyth_simpl_4 C Y) in *.
rewrite (elim_py_on_foot_left_right C P U V Y) in *.
idtac.
replace (((Py P U V * Py P C V + Py P V U * Py P C U) / Py U V U - (Py P U V * Py A C V + Py P V U * Py A C U) / Py U V U) / ((Py P U V * Py P U V * Py V C V + Py P U V * Py P V U * Py V C U + Py P U V * Py P V U * Py U C V + Py P V U * Py P V U * Py U C U) / (Py U V U * Py U V U))) with (((Py P U V * Py P C V + Py P V U * Py P C U) - (Py P U V * Py A C V + Py P V U * Py A C U) ) / ((Py P U V * Py P U V * Py V C V + Py P U V * Py P V U * Py V C U + Py P U V * Py P V U * Py U C V + Py P V U * Py P V U * Py U C U) / ( Py U V U))) in *.

*****
T : not\n (eq\n (Fdiv\n (Fplus\n (Fplus\n (Fplus (Fmult (Fmult (Py P U V) (Py P U V)) (Py V C V))\n (Fmult (Fmult (Py P U V) (Py P V U)) (Py V C U)))\n (Fmult (Fmult (Py P U V) (Py P V U)) (Py U C V)))\n (Fmult (Fmult (Py P V U) (Py P V U)) (Py U C U)))\n (Fmult (Py U V U) (Py U V U))) F0)
H3 : not (eq A Y)
H2 : not (eq C Y)
H1 : parallel A Y C Y
H0 : Col A U V
H : on_foot Y P U V
Y,P,U,V,A,C,D : Point
*****
eq (Fdiv (Fminus (Fplus (Fmult (Py P U V) (Py P C V)) (Fmult (Py P V U) (Py P C U))) (Fplus (Fmult (Py P U V) (Py A C V)) (Fmult (Py P V U) (Py A C U)))) (Fdiv (Fplus (Fplus (Fplus (Fmult (Fmult (Py P U V) (Py P U V)) (Py V C V)) (Fmult (Fmult (Py P U V) (Py P V U)) (Py V C U))) (Fmult (Fmult (Py P U V) (Py P V U)) (Py U C V))) (Fmult (Fmult (Py P V U) (Py P V U)) (Py U C U))) (Py U V U))) (Fdiv (Fplus (Fmult (Py P U V) (Fminus (Py P C V) (Py A C V))) (Fmult (Py P V U) (Fminus (Py P C U) (Py A C U)))) (Fminus (Fplus (Fmult (Py P U V) (Py C V C)) (Fmult (Py P V U) (Py C U C))) (Fmult (Py P U V) (Py P V U))))
+++++
replace (Py P U V * Py P C V + Py P V U * Py P C U - (Py P U V * Py A C V + Py P V U * Py A C U)) with (Py P U V * Py P C V + Py P V U * Py P C U - Py P U V * Py A C V - Py P V U * Py A C U) in * by ring.
-----
Theorem elim_ratio_on_foot_spec_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C Y -> C <> Y -> A <> Y -> A**Y / C**Y = (Py P U V * Py4 P C A V + Py P V U * Py4 P C A U) / (Py P U V * Py C V C + Py P V U * Py C U C - Py P U V * Py P V U).
Proof.
intros.
rewrite (elim_ratio_on_foot_a Y P U V).
idtac.
assert (T:= (elim_ratio_on_foot_a_invariant C Y H2)).
unfold Py4.
rewrite (elim_py_on_foot_right P C P U V) in *.
idtac.
rewrite (elim_py_on_foot_right A C P U V) in *.
idtac.
rewrite (pyth_simpl_4 C Y) in *.
rewrite (elim_py_on_foot_left_right C P U V Y) in *.
idtac.
replace (((Py P U V * Py P C V + Py P V U * Py P C U) / Py U V U - (Py P U V * Py A C V + Py P V U * Py A C U) / Py U V U) / ((Py P U V * Py P U V * Py V C V + Py P U V * Py P V U * Py V C U + Py P U V * Py P V U * Py U C V + Py P V U * Py P V U * Py U C U) / (Py U V U * Py U V U))) with (((Py P U V * Py P C V + Py P V U * Py P C U) - (Py P U V * Py A C V + Py P V U * Py A C U) ) / ((Py P U V * Py P U V * Py V C V + Py P U V * Py P V U * Py V C U + Py P U V * Py P V U * Py U C V + Py P V U * Py P V U * Py U C U) / ( Py U V U))) in *.
replace (Py P U V * Py P C V + Py P V U * Py P C U - (Py P U V * Py A C V + Py P V U * Py A C U)) with (Py P U V * Py P C V + Py P V U * Py P C U - Py P U V * Py A C V - Py P V U * Py A C U) in * by ring.

*****
T : not\n (eq\n (Fdiv\n (Fplus\n (Fplus\n (Fplus (Fmult (Fmult (Py P U V) (Py P U V)) (Py V C V))\n (Fmult (Fmult (Py P U V) (Py P V U)) (Py V C U)))\n (Fmult (Fmult (Py P U V) (Py P V U)) (Py U C V)))\n (Fmult (Fmult (Py P V U) (Py P V U)) (Py U C U)))\n (Fmult (Py U V U) (Py U V U))) F0)
H3 : not (eq A Y)
H2 : not (eq C Y)
H1 : parallel A Y C Y
H0 : Col A U V
H : on_foot Y P U V
Y,P,U,V,A,C,D : Point
*****
eq (Fdiv (Fminus (Fminus (Fplus (Fmult (Py P U V) (Py P C V)) (Fmult (Py P V U) (Py P C U))) (Fmult (Py P U V) (Py A C V))) (Fmult (Py P V U) (Py A C U))) (Fdiv (Fplus (Fplus (Fplus (Fmult (Fmult (Py P U V) (Py P U V)) (Py V C V)) (Fmult (Fmult (Py P U V) (Py P V U)) (Py V C U))) (Fmult (Fmult (Py P U V) (Py P V U)) (Py U C V))) (Fmult (Fmult (Py P V U) (Py P V U)) (Py U C U))) (Py U V U))) (Fdiv (Fplus (Fmult (Py P U V) (Fminus (Py P C V) (Py A C V))) (Fmult (Py P V U) (Fminus (Py P C U) (Py A C U)))) (Fminus (Fplus (Fmult (Py P U V) (Py C V C)) (Fmult (Py P V U) (Py C U C))) (Fmult (Py P U V) (Py P V U))))
+++++
replace (Py P U V * Py P C V + Py P V U * Py P C U - Py P U V * Py A C V - Py P V U * Py A C U) with (Py P U V * Py4 P C A V + Py P V U * Py4 P C A U) in * by (unfold Py4;ring).
-----
Theorem elim_ratio_on_foot_spec_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C Y -> C <> Y -> A <> Y -> A**Y / C**Y = (Py P U V * Py4 P C A V + Py P V U * Py4 P C A U) / (Py P U V * Py C V C + Py P V U * Py C U C - Py P U V * Py P V U).
Proof.
intros.
rewrite (elim_ratio_on_foot_a Y P U V).
idtac.
assert (T:= (elim_ratio_on_foot_a_invariant C Y H2)).
unfold Py4.
rewrite (elim_py_on_foot_right P C P U V) in *.
idtac.
rewrite (elim_py_on_foot_right A C P U V) in *.
idtac.
rewrite (pyth_simpl_4 C Y) in *.
rewrite (elim_py_on_foot_left_right C P U V Y) in *.
idtac.
replace (((Py P U V * Py P C V + Py P V U * Py P C U) / Py U V U - (Py P U V * Py A C V + Py P V U * Py A C U) / Py U V U) / ((Py P U V * Py P U V * Py V C V + Py P U V * Py P V U * Py V C U + Py P U V * Py P V U * Py U C V + Py P V U * Py P V U * Py U C U) / (Py U V U * Py U V U))) with (((Py P U V * Py P C V + Py P V U * Py P C U) - (Py P U V * Py A C V + Py P V U * Py A C U) ) / ((Py P U V * Py P U V * Py V C V + Py P U V * Py P V U * Py V C U + Py P U V * Py P V U * Py U C V + Py P V U * Py P V U * Py U C U) / ( Py U V U))) in *.
replace (Py P U V * Py P C V + Py P V U * Py P C U - (Py P U V * Py A C V + Py P V U * Py A C U)) with (Py P U V * Py P C V + Py P V U * Py P C U - Py P U V * Py A C V - Py P V U * Py A C U) in * by ring.
replace (Py P U V * Py P C V + Py P V U * Py P C U - Py P U V * Py A C V - Py P V U * Py A C U) with (Py P U V * Py4 P C A V + Py P V U * Py4 P C A U) in * by (unfold Py4;ring).

*****
T : not\n (eq\n (Fdiv\n (Fplus\n (Fplus\n (Fplus (Fmult (Fmult (Py P U V) (Py P U V)) (Py V C V))\n (Fmult (Fmult (Py P U V) (Py P V U)) (Py V C U)))\n (Fmult (Fmult (Py P U V) (Py P V U)) (Py U C V)))\n (Fmult (Fmult (Py P V U) (Py P V U)) (Py U C U)))\n (Fmult (Py U V U) (Py U V U))) F0)
H3 : not (eq A Y)
H2 : not (eq C Y)
H1 : parallel A Y C Y
H0 : Col A U V
H : on_foot Y P U V
Y,P,U,V,A,C,D : Point
*****
eq (Fdiv (Fplus (Fmult (Py P U V) (Py4 P C A V)) (Fmult (Py P V U) (Py4 P C A U))) (Fdiv (Fplus (Fplus (Fplus (Fmult (Fmult (Py P U V) (Py P U V)) (Py V C V)) (Fmult (Fmult (Py P U V) (Py P V U)) (Py V C U))) (Fmult (Fmult (Py P U V) (Py P V U)) (Py U C V))) (Fmult (Fmult (Py P V U) (Py P V U)) (Py U C U))) (Py U V U))) (Fdiv (Fplus (Fmult (Py P U V) (Fminus (Py P C V) (Py A C V))) (Fmult (Py P V U) (Fminus (Py P C U) (Py A C U)))) (Fminus (Fplus (Fmult (Py P U V) (Py C V C)) (Fmult (Py P V U) (Py C U C))) (Fmult (Py P U V) (Py P V U))))
+++++
replace ((Py P U V * Py P U V * Py V C V + Py P U V * Py P V U * Py V C U + Py P U V * Py P V U * Py U C V + Py P V U * Py P V U * Py U C U) / Py U V U) with ( Py P U V * Py C V C + Py P V U * Py C U C - Py P U V * Py P V U) in *.
-----
Theorem elim_ratio_on_foot_spec_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C Y -> C <> Y -> A <> Y -> A**Y / C**Y = (Py P U V * Py4 P C A V + Py P V U * Py4 P C A U) / (Py P U V * Py C V C + Py P V U * Py C U C - Py P U V * Py P V U).
Proof.
intros.
rewrite (elim_ratio_on_foot_a Y P U V).
idtac.
assert (T:= (elim_ratio_on_foot_a_invariant C Y H2)).
unfold Py4.
rewrite (elim_py_on_foot_right P C P U V) in *.
idtac.
rewrite (elim_py_on_foot_right A C P U V) in *.
idtac.
rewrite (pyth_simpl_4 C Y) in *.
rewrite (elim_py_on_foot_left_right C P U V Y) in *.
idtac.
replace (((Py P U V * Py P C V + Py P V U * Py P C U) / Py U V U - (Py P U V * Py A C V + Py P V U * Py A C U) / Py U V U) / ((Py P U V * Py P U V * Py V C V + Py P U V * Py P V U * Py V C U + Py P U V * Py P V U * Py U C V + Py P V U * Py P V U * Py U C U) / (Py U V U * Py U V U))) with (((Py P U V * Py P C V + Py P V U * Py P C U) - (Py P U V * Py A C V + Py P V U * Py A C U) ) / ((Py P U V * Py P U V * Py V C V + Py P U V * Py P V U * Py V C U + Py P U V * Py P V U * Py U C V + Py P V U * Py P V U * Py U C U) / ( Py U V U))) in *.
replace (Py P U V * Py P C V + Py P V U * Py P C U - (Py P U V * Py A C V + Py P V U * Py A C U)) with (Py P U V * Py P C V + Py P V U * Py P C U - Py P U V * Py A C V - Py P V U * Py A C U) in * by ring.
replace (Py P U V * Py P C V + Py P V U * Py P C U - Py P U V * Py A C V - Py P V U * Py A C U) with (Py P U V * Py4 P C A V + Py P V U * Py4 P C A U) in * by (unfold Py4;ring).
replace ((Py P U V * Py P U V * Py V C V + Py P U V * Py P V U * Py V C U + Py P U V * Py P V U * Py U C V + Py P V U * Py P V U * Py U C U) / Py U V U) with ( Py P U V * Py C V C + Py P V U * Py C U C - Py P U V * Py P V U) in *.

*****
T : not\n (eq\n (Fdiv\n (Fplus\n (Fplus\n (Fplus (Fmult (Fmult (Py P U V) (Py P U V)) (Py V C V))\n (Fmult (Fmult (Py P U V) (Py P V U)) (Py V C U)))\n (Fmult (Fmult (Py P U V) (Py P V U)) (Py U C V)))\n (Fmult (Fmult (Py P V U) (Py P V U)) (Py U C U)))\n (Fmult (Py U V U) (Py U V U))) F0)
H3 : not (eq A Y)
H2 : not (eq C Y)
H1 : parallel A Y C Y
H0 : Col A U V
H : on_foot Y P U V
Y,P,U,V,A,C,D : Point
*****
eq (Fdiv (Fplus (Fmult (Py P U V) (Py4 P C A V)) (Fmult (Py P V U) (Py4 P C A U))) (Fminus (Fplus (Fmult (Py P U V) (Py C V C)) (Fmult (Py P V U) (Py C U C))) (Fmult (Py P U V) (Py P V U)))) (Fdiv (Fplus (Fmult (Py P U V) (Fminus (Py P C V) (Py A C V))) (Fmult (Py P V U) (Fminus (Py P C U) (Py A C U)))) (Fminus (Fplus (Fmult (Py P U V) (Py C V C)) (Fmult (Py P V U) (Py C U C))) (Fmult (Py P U V) (Py P V U))))
+++++
trivial.
-----
Theorem elim_ratio_on_foot_spec_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C Y -> C <> Y -> A <> Y -> A**Y / C**Y = (Py P U V * Py4 P C A V + Py P V U * Py4 P C A U) / (Py P U V * Py C V C + Py P V U * Py C U C - Py P U V * Py P V U).
Proof.
intros.
rewrite (elim_ratio_on_foot_a Y P U V).
idtac.
assert (T:= (elim_ratio_on_foot_a_invariant C Y H2)).
unfold Py4.
rewrite (elim_py_on_foot_right P C P U V) in *.
idtac.
rewrite (elim_py_on_foot_right A C P U V) in *.
idtac.
rewrite (pyth_simpl_4 C Y) in *.
rewrite (elim_py_on_foot_left_right C P U V Y) in *.
idtac.
replace (((Py P U V * Py P C V + Py P V U * Py P C U) / Py U V U - (Py P U V * Py A C V + Py P V U * Py A C U) / Py U V U) / ((Py P U V * Py P U V * Py V C V + Py P U V * Py P V U * Py V C U + Py P U V * Py P V U * Py U C V + Py P V U * Py P V U * Py U C U) / (Py U V U * Py U V U))) with (((Py P U V * Py P C V + Py P V U * Py P C U) - (Py P U V * Py A C V + Py P V U * Py A C U) ) / ((Py P U V * Py P U V * Py V C V + Py P U V * Py P V U * Py V C U + Py P U V * Py P V U * Py U C V + Py P V U * Py P V U * Py U C U) / ( Py U V U))) in *.
replace (Py P U V * Py P C V + Py P V U * Py P C U - (Py P U V * Py A C V + Py P V U * Py A C U)) with (Py P U V * Py P C V + Py P V U * Py P C U - Py P U V * Py A C V - Py P V U * Py A C U) in * by ring.
replace (Py P U V * Py P C V + Py P V U * Py P C U - Py P U V * Py A C V - Py P V U * Py A C U) with (Py P U V * Py4 P C A V + Py P V U * Py4 P C A U) in * by (unfold Py4;ring).
replace ((Py P U V * Py P U V * Py V C V + Py P U V * Py P V U * Py V C U + Py P U V * Py P V U * Py U C V + Py P V U * Py P V U * Py U C U) / Py U V U) with ( Py P U V * Py C V C + Py P V U * Py C U C - Py P U V * Py P V U) in *.

*****
T : not\n (eq\n (Fdiv\n (Fplus\n (Fplus\n (Fplus (Fmult (Fmult (Py P U V) (Py P U V)) (Py V C V))\n (Fmult (Fmult (Py P U V) (Py P V U)) (Py V C U)))\n (Fmult (Fmult (Py P U V) (Py P V U)) (Py U C V)))\n (Fmult (Fmult (Py P V U) (Py P V U)) (Py U C U)))\n (Fmult (Py U V U) (Py U V U))) F0)
H3 : not (eq A Y)
H2 : not (eq C Y)
H1 : parallel A Y C Y
H0 : Col A U V
H : on_foot Y P U V
Y,P,U,V,A,C,D : Point
*****
eq (Fminus (Fplus (Fmult (Py P U V) (Py C V C)) (Fmult (Py P V U) (Py C U C))) (Fmult (Py P U V) (Py P V U))) (Fdiv (Fplus (Fplus (Fplus (Fmult (Fmult (Py P U V) (Py P U V)) (Py V C V)) (Fmult (Fmult (Py P U V) (Py P V U)) (Py V C U))) (Fmult (Fmult (Py P U V) (Py P V U)) (Py U C V))) (Fmult (Fmult (Py P V U) (Py P V U)) (Py U C U))) (Py U V U))
+++++
unfold Py.
-----
Theorem elim_ratio_on_foot_spec_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C Y -> C <> Y -> A <> Y -> A**Y / C**Y = (Py P U V * Py4 P C A V + Py P V U * Py4 P C A U) / (Py P U V * Py C V C + Py P V U * Py C U C - Py P U V * Py P V U).
Proof.
intros.
rewrite (elim_ratio_on_foot_a Y P U V).
idtac.
assert (T:= (elim_ratio_on_foot_a_invariant C Y H2)).
unfold Py4.
rewrite (elim_py_on_foot_right P C P U V) in *.
idtac.
rewrite (elim_py_on_foot_right A C P U V) in *.
idtac.
rewrite (pyth_simpl_4 C Y) in *.
rewrite (elim_py_on_foot_left_right C P U V Y) in *.
idtac.
replace (((Py P U V * Py P C V + Py P V U * Py P C U) / Py U V U - (Py P U V * Py A C V + Py P V U * Py A C U) / Py U V U) / ((Py P U V * Py P U V * Py V C V + Py P U V * Py P V U * Py V C U + Py P U V * Py P V U * Py U C V + Py P V U * Py P V U * Py U C U) / (Py U V U * Py U V U))) with (((Py P U V * Py P C V + Py P V U * Py P C U) - (Py P U V * Py A C V + Py P V U * Py A C U) ) / ((Py P U V * Py P U V * Py V C V + Py P U V * Py P V U * Py V C U + Py P U V * Py P V U * Py U C V + Py P V U * Py P V U * Py U C U) / ( Py U V U))) in *.
replace (Py P U V * Py P C V + Py P V U * Py P C U - (Py P U V * Py A C V + Py P V U * Py A C U)) with (Py P U V * Py P C V + Py P V U * Py P C U - Py P U V * Py A C V - Py P V U * Py A C U) in * by ring.
replace (Py P U V * Py P C V + Py P V U * Py P C U - Py P U V * Py A C V - Py P V U * Py A C U) with (Py P U V * Py4 P C A V + Py P V U * Py4 P C A U) in * by (unfold Py4;ring).
replace ((Py P U V * Py P U V * Py V C V + Py P U V * Py P V U * Py V C U + Py P U V * Py P V U * Py U C V + Py P V U * Py P V U * Py U C U) / Py U V U) with ( Py P U V * Py C V C + Py P V U * Py C U C - Py P U V * Py P V U) in *.
unfold Py.

*****
T : not\n (eq\n (Fdiv\n (Fplus\n (Fplus\n (Fplus (Fmult (Fmult (Py P U V) (Py P U V)) (Py V C V))\n (Fmult (Fmult (Py P U V) (Py P V U)) (Py V C U)))\n (Fmult (Fmult (Py P U V) (Py P V U)) (Py U C V)))\n (Fmult (Fmult (Py P V U) (Py P V U)) (Py U C U)))\n (Fmult (Py U V U) (Py U V U))) F0)
H3 : not (eq A Y)
H2 : not (eq C Y)
H1 : parallel A Y C Y
H0 : Col A U V
H : on_foot Y P U V
Y,P,U,V,A,C,D : Point
*****
eq (Fminus (Fplus (Fmult (Fminus (Fplus (Fmult (DSeg P U) (DSeg P U)) (Fmult (DSeg U V) (DSeg U V))) (Fmult (DSeg P V) (DSeg P V))) (Fminus (Fplus (Fmult (DSeg C V) (DSeg C V)) (Fmult (DSeg V C) (DSeg V C))) (Fmult (DSeg C C) (DSeg C C)))) (Fmult (Fminus (Fplus (Fmult (DSeg P V) (DSeg P V)) (Fmult (DSeg V U) (DSeg V U))) (Fmult (DSeg P U) (DSeg P U))) (Fminus (Fplus (Fmult (DSeg C U) (DSeg C U)) (Fmult (DSeg U C) (DSeg U C))) (Fmult (DSeg C C) (DSeg C C))))) (Fmult (Fminus (Fplus (Fmult (DSeg P U) (DSeg P U)) (Fmult (DSeg U V) (DSeg U V))) (Fmult (DSeg P V) (DSeg P V))) (Fminus (Fplus (Fmult (DSeg P V) (DSeg P V)) (Fmult (DSeg V U) (DSeg V U))) (Fmult (DSeg P U) (DSeg P U))))) (Fdiv (Fplus (Fplus (Fplus (Fmult (Fmult (Fminus (Fplus (Fmult (DSeg P U) (DSeg P U)) (Fmult (DSeg U V) (DSeg U V))) (Fmult (DSeg P V) (DSeg P V))) (Fminus (Fplus (Fmult (DSeg P U) (DSeg P U)) (Fmult (DSeg U V) (DSeg U V))) (Fmult (DSeg P V) (DSeg P V)))) (Fminus (Fplus (Fmult (DSeg V C) (DSeg V C)) (Fmult (DSeg C V) (DSeg C V))) (Fmult (DSeg V V) (DSeg V V)))) (Fmult (Fmult (Fminus (Fplus (Fmult (DSeg P U) (DSeg P U)) (Fmult (DSeg U V) (DSeg U V))) (Fmult (DSeg P V) (DSeg P V))) (Fminus (Fplus (Fmult (DSeg P V) (DSeg P V)) (Fmult (DSeg V U) (DSeg V U))) (Fmult (DSeg P U) (DSeg P U)))) (Fminus (Fplus (Fmult (DSeg V C) (DSeg V C)) (Fmult (DSeg C U) (DSeg C U))) (Fmult (DSeg V U) (DSeg V U))))) (Fmult (Fmult (Fminus (Fplus (Fmult (DSeg P U) (DSeg P U)) (Fmult (DSeg U V) (DSeg U V))) (Fmult (DSeg P V) (DSeg P V))) (Fminus (Fplus (Fmult (DSeg P V) (DSeg P V)) (Fmult (DSeg V U) (DSeg V U))) (Fmult (DSeg P U) (DSeg P U)))) (Fminus (Fplus (Fmult (DSeg U C) (DSeg U C)) (Fmult (DSeg C V) (DSeg C V))) (Fmult (DSeg U V) (DSeg U V))))) (Fmult (Fmult (Fminus (Fplus (Fmult (DSeg P V) (DSeg P V)) (Fmult (DSeg V U) (DSeg V U))) (Fmult (DSeg P U) (DSeg P U))) (Fminus (Fplus (Fmult (DSeg P V) (DSeg P V)) (Fmult (DSeg V U) (DSeg V U))) (Fmult (DSeg P U) (DSeg P U)))) (Fminus (Fplus (Fmult (DSeg U C) (DSeg U C)) (Fmult (DSeg C U) (DSeg C U))) (Fmult (DSeg U U) (DSeg U U))))) (Fminus (Fplus (Fmult (DSeg U V) (DSeg U V)) (Fmult (DSeg V U) (DSeg V U))) (Fmult (DSeg U U) (DSeg U U))))
+++++
uniformize_dir_seg.
-----
Theorem elim_ratio_on_foot_spec_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C Y -> C <> Y -> A <> Y -> A**Y / C**Y = (Py P U V * Py4 P C A V + Py P V U * Py4 P C A U) / (Py P U V * Py C V C + Py P V U * Py C U C - Py P U V * Py P V U).
Proof.
intros.
rewrite (elim_ratio_on_foot_a Y P U V).
idtac.
assert (T:= (elim_ratio_on_foot_a_invariant C Y H2)).
unfold Py4.
rewrite (elim_py_on_foot_right P C P U V) in *.
idtac.
rewrite (elim_py_on_foot_right A C P U V) in *.
idtac.
rewrite (pyth_simpl_4 C Y) in *.
rewrite (elim_py_on_foot_left_right C P U V Y) in *.
idtac.
replace (((Py P U V * Py P C V + Py P V U * Py P C U) / Py U V U - (Py P U V * Py A C V + Py P V U * Py A C U) / Py U V U) / ((Py P U V * Py P U V * Py V C V + Py P U V * Py P V U * Py V C U + Py P U V * Py P V U * Py U C V + Py P V U * Py P V U * Py U C U) / (Py U V U * Py U V U))) with (((Py P U V * Py P C V + Py P V U * Py P C U) - (Py P U V * Py A C V + Py P V U * Py A C U) ) / ((Py P U V * Py P U V * Py V C V + Py P U V * Py P V U * Py V C U + Py P U V * Py P V U * Py U C V + Py P V U * Py P V U * Py U C U) / ( Py U V U))) in *.
replace (Py P U V * Py P C V + Py P V U * Py P C U - (Py P U V * Py A C V + Py P V U * Py A C U)) with (Py P U V * Py P C V + Py P V U * Py P C U - Py P U V * Py A C V - Py P V U * Py A C U) in * by ring.
replace (Py P U V * Py P C V + Py P V U * Py P C U - Py P U V * Py A C V - Py P V U * Py A C U) with (Py P U V * Py4 P C A V + Py P V U * Py4 P C A U) in * by (unfold Py4;ring).
replace ((Py P U V * Py P U V * Py V C V + Py P U V * Py P V U * Py V C U + Py P U V * Py P V U * Py U C V + Py P V U * Py P V U * Py U C U) / Py U V U) with ( Py P U V * Py C V C + Py P V U * Py C U C - Py P U V * Py P V U) in *.
unfold Py.
uniformize_dir_seg.

*****
T : not\n (eq\n (Fdiv\n (Fplus\n (Fplus\n (Fplus (Fmult (Fmult (Py P U V) (Py P U V)) (Py V C V))\n (Fmult (Fmult (Py P U V) (Py P V U)) (Py V C U)))\n (Fmult (Fmult (Py P U V) (Py P V U)) (Py U C V)))\n (Fmult (Fmult (Py P V U) (Py P V U)) (Py U C U)))\n (Fmult (Py U V U) (Py U V U))) F0)
H3 : not (eq A Y)
H2 : not (eq C Y)
H1 : parallel A Y C Y
H0 : Col A U V
H : on_foot Y P U V
Y,P,U,V,A,C,D : Point
*****
eq (Fminus (Fplus (Fmult (Fminus (Fplus (Fmult (DSeg P U) (DSeg P U)) (Fmult (DSeg U V) (DSeg U V))) (Fmult (DSeg P V) (DSeg P V))) (Fminus (Fplus (Fmult (DSeg C V) (DSeg C V)) (Fmult (Fopp (DSeg C V)) (Fopp (DSeg C V)))) (Fmult F0 F0))) (Fmult (Fminus (Fplus (Fmult (DSeg P V) (DSeg P V)) (Fmult (Fopp (DSeg U V)) (Fopp (DSeg U V)))) (Fmult (DSeg P U) (DSeg P U))) (Fminus (Fplus (Fmult (DSeg C U) (DSeg C U)) (Fmult (Fopp (DSeg C U)) (Fopp (DSeg C U)))) (Fmult F0 F0)))) (Fmult (Fminus (Fplus (Fmult (DSeg P U) (DSeg P U)) (Fmult (DSeg U V) (DSeg U V))) (Fmult (DSeg P V) (DSeg P V))) (Fminus (Fplus (Fmult (DSeg P V) (DSeg P V)) (Fmult (Fopp (DSeg U V)) (Fopp (DSeg U V)))) (Fmult (DSeg P U) (DSeg P U))))) (Fdiv (Fplus (Fplus (Fplus (Fmult (Fmult (Fminus (Fplus (Fmult (DSeg P U) (DSeg P U)) (Fmult (DSeg U V) (DSeg U V))) (Fmult (DSeg P V) (DSeg P V))) (Fminus (Fplus (Fmult (DSeg P U) (DSeg P U)) (Fmult (DSeg U V) (DSeg U V))) (Fmult (DSeg P V) (DSeg P V)))) (Fminus (Fplus (Fmult (Fopp (DSeg C V)) (Fopp (DSeg C V))) (Fmult (DSeg C V) (DSeg C V))) (Fmult F0 F0))) (Fmult (Fmult (Fminus (Fplus (Fmult (DSeg P U) (DSeg P U)) (Fmult (DSeg U V) (DSeg U V))) (Fmult (DSeg P V) (DSeg P V))) (Fminus (Fplus (Fmult (DSeg P V) (DSeg P V)) (Fmult (Fopp (DSeg U V)) (Fopp (DSeg U V)))) (Fmult (DSeg P U) (DSeg P U)))) (Fminus (Fplus (Fmult (Fopp (DSeg C V)) (Fopp (DSeg C V))) (Fmult (DSeg C U) (DSeg C U))) (Fmult (Fopp (DSeg U V)) (Fopp (DSeg U V)))))) (Fmult (Fmult (Fminus (Fplus (Fmult (DSeg P U) (DSeg P U)) (Fmult (DSeg U V) (DSeg U V))) (Fmult (DSeg P V) (DSeg P V))) (Fminus (Fplus (Fmult (DSeg P V) (DSeg P V)) (Fmult (Fopp (DSeg U V)) (Fopp (DSeg U V)))) (Fmult (DSeg P U) (DSeg P U)))) (Fminus (Fplus (Fmult (Fopp (DSeg C U)) (Fopp (DSeg C U))) (Fmult (DSeg C V) (DSeg C V))) (Fmult (DSeg U V) (DSeg U V))))) (Fmult (Fmult (Fminus (Fplus (Fmult (DSeg P V) (DSeg P V)) (Fmult (Fopp (DSeg U V)) (Fopp (DSeg U V)))) (Fmult (DSeg P U) (DSeg P U))) (Fminus (Fplus (Fmult (DSeg P V) (DSeg P V)) (Fmult (Fopp (DSeg U V)) (Fopp (DSeg U V)))) (Fmult (DSeg P U) (DSeg P U)))) (Fminus (Fplus (Fmult (Fopp (DSeg C U)) (Fopp (DSeg C U))) (Fmult (DSeg C U) (DSeg C U))) (Fmult F0 F0)))) (Fminus (Fplus (Fmult (DSeg U V) (DSeg U V)) (Fmult (Fopp (DSeg U V)) (Fopp (DSeg U V)))) (Fmult F0 F0)))
+++++
field.
-----
Theorem elim_ratio_on_foot_spec_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C Y -> C <> Y -> A <> Y -> A**Y / C**Y = (Py P U V * Py4 P C A V + Py P V U * Py4 P C A U) / (Py P U V * Py C V C + Py P V U * Py C U C - Py P U V * Py P V U).
Proof.
intros.
rewrite (elim_ratio_on_foot_a Y P U V).
idtac.
assert (T:= (elim_ratio_on_foot_a_invariant C Y H2)).
unfold Py4.
rewrite (elim_py_on_foot_right P C P U V) in *.
idtac.
rewrite (elim_py_on_foot_right A C P U V) in *.
idtac.
rewrite (pyth_simpl_4 C Y) in *.
rewrite (elim_py_on_foot_left_right C P U V Y) in *.
idtac.
replace (((Py P U V * Py P C V + Py P V U * Py P C U) / Py U V U - (Py P U V * Py A C V + Py P V U * Py A C U) / Py U V U) / ((Py P U V * Py P U V * Py V C V + Py P U V * Py P V U * Py V C U + Py P U V * Py P V U * Py U C V + Py P V U * Py P V U * Py U C U) / (Py U V U * Py U V U))) with (((Py P U V * Py P C V + Py P V U * Py P C U) - (Py P U V * Py A C V + Py P V U * Py A C U) ) / ((Py P U V * Py P U V * Py V C V + Py P U V * Py P V U * Py V C U + Py P U V * Py P V U * Py U C V + Py P V U * Py P V U * Py U C U) / ( Py U V U))) in *.
replace (Py P U V * Py P C V + Py P V U * Py P C U - (Py P U V * Py A C V + Py P V U * Py A C U)) with (Py P U V * Py P C V + Py P V U * Py P C U - Py P U V * Py A C V - Py P V U * Py A C U) in * by ring.
replace (Py P U V * Py P C V + Py P V U * Py P C U - Py P U V * Py A C V - Py P V U * Py A C U) with (Py P U V * Py4 P C A V + Py P V U * Py4 P C A U) in * by (unfold Py4;ring).
replace ((Py P U V * Py P U V * Py V C V + Py P U V * Py P V U * Py V C U + Py P U V * Py P V U * Py U C V + Py P V U * Py P V U * Py U C U) / Py U V U) with ( Py P U V * Py C V C + Py P V U * Py C U C - Py P U V * Py P V U) in *.
unfold Py.
uniformize_dir_seg.
field.

*****
T : not\n (eq\n (Fdiv\n (Fplus\n (Fplus\n (Fplus (Fmult (Fmult (Py P U V) (Py P U V)) (Py V C V))\n (Fmult (Fmult (Py P U V) (Py P V U)) (Py V C U)))\n (Fmult (Fmult (Py P U V) (Py P V U)) (Py U C V)))\n (Fmult (Fmult (Py P V U) (Py P V U)) (Py U C U)))\n (Fmult (Py U V U) (Py U V U))) F0)
H3 : not (eq A Y)
H2 : not (eq C Y)
H1 : parallel A Y C Y
H0 : Col A U V
H : on_foot Y P U V
Y,P,U,V,A,C,D : Point
*****
not (eq (Fplus (Fmult (DSeg U V) (DSeg U V)) (Fmult (Fopp (DSeg U V)) (Fopp (DSeg U V)))) F0)
+++++
basic_simpl.
-----
Theorem elim_ratio_on_foot_spec_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C Y -> C <> Y -> A <> Y -> A**Y / C**Y = (Py P U V * Py4 P C A V + Py P V U * Py4 P C A U) / (Py P U V * Py C V C + Py P V U * Py C U C - Py P U V * Py P V U).
Proof.
intros.
rewrite (elim_ratio_on_foot_a Y P U V).
idtac.
assert (T:= (elim_ratio_on_foot_a_invariant C Y H2)).
unfold Py4.
rewrite (elim_py_on_foot_right P C P U V) in *.
idtac.
rewrite (elim_py_on_foot_right A C P U V) in *.
idtac.
rewrite (pyth_simpl_4 C Y) in *.
rewrite (elim_py_on_foot_left_right C P U V Y) in *.
idtac.
replace (((Py P U V * Py P C V + Py P V U * Py P C U) / Py U V U - (Py P U V * Py A C V + Py P V U * Py A C U) / Py U V U) / ((Py P U V * Py P U V * Py V C V + Py P U V * Py P V U * Py V C U + Py P U V * Py P V U * Py U C V + Py P V U * Py P V U * Py U C U) / (Py U V U * Py U V U))) with (((Py P U V * Py P C V + Py P V U * Py P C U) - (Py P U V * Py A C V + Py P V U * Py A C U) ) / ((Py P U V * Py P U V * Py V C V + Py P U V * Py P V U * Py V C U + Py P U V * Py P V U * Py U C V + Py P V U * Py P V U * Py U C U) / ( Py U V U))) in *.
replace (Py P U V * Py P C V + Py P V U * Py P C U - (Py P U V * Py A C V + Py P V U * Py A C U)) with (Py P U V * Py P C V + Py P V U * Py P C U - Py P U V * Py A C V - Py P V U * Py A C U) in * by ring.
replace (Py P U V * Py P C V + Py P V U * Py P C U - Py P U V * Py A C V - Py P V U * Py A C U) with (Py P U V * Py4 P C A V + Py P V U * Py4 P C A U) in * by (unfold Py4;ring).
replace ((Py P U V * Py P U V * Py V C V + Py P U V * Py P V U * Py V C U + Py P U V * Py P V U * Py U C V + Py P V U * Py P V U * Py U C U) / Py U V U) with ( Py P U V * Py C V C + Py P V U * Py C U C - Py P U V * Py P V U) in *.
unfold Py.
uniformize_dir_seg.
field.
basic_simpl.

*****
T : not\n (eq\n (Fdiv\n (Fplus\n (Fplus\n (Fplus (Fmult (Fmult (Py P U V) (Py P U V)) (Py V C V))\n (Fmult (Fmult (Py P U V) (Py P V U)) (Py V C U)))\n (Fmult (Fmult (Py P U V) (Py P V U)) (Py U C V)))\n (Fmult (Fmult (Py P V U) (Py P V U)) (Py U C U)))\n (Fmult (Py U V U) (Py U V U))) F0)
H3 : not (eq A Y)
H2 : not (eq C Y)
H1 : parallel A Y C Y
H0 : Col A U V
H : on_foot Y P U V
Y,P,U,V,A,C,D : Point
*****
not (eq (Fplus (Fmult (DSeg U V) (DSeg U V)) (Fmult (DSeg U V) (DSeg U V))) F0)
+++++
replace(U ** V * U ** V + U ** V * U ** V) with (2*U ** V * U ** V) by ring.
-----
Theorem elim_ratio_on_foot_spec_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C Y -> C <> Y -> A <> Y -> A**Y / C**Y = (Py P U V * Py4 P C A V + Py P V U * Py4 P C A U) / (Py P U V * Py C V C + Py P V U * Py C U C - Py P U V * Py P V U).
Proof.
intros.
rewrite (elim_ratio_on_foot_a Y P U V).
idtac.
assert (T:= (elim_ratio_on_foot_a_invariant C Y H2)).
unfold Py4.
rewrite (elim_py_on_foot_right P C P U V) in *.
idtac.
rewrite (elim_py_on_foot_right A C P U V) in *.
idtac.
rewrite (pyth_simpl_4 C Y) in *.
rewrite (elim_py_on_foot_left_right C P U V Y) in *.
idtac.
replace (((Py P U V * Py P C V + Py P V U * Py P C U) / Py U V U - (Py P U V * Py A C V + Py P V U * Py A C U) / Py U V U) / ((Py P U V * Py P U V * Py V C V + Py P U V * Py P V U * Py V C U + Py P U V * Py P V U * Py U C V + Py P V U * Py P V U * Py U C U) / (Py U V U * Py U V U))) with (((Py P U V * Py P C V + Py P V U * Py P C U) - (Py P U V * Py A C V + Py P V U * Py A C U) ) / ((Py P U V * Py P U V * Py V C V + Py P U V * Py P V U * Py V C U + Py P U V * Py P V U * Py U C V + Py P V U * Py P V U * Py U C U) / ( Py U V U))) in *.
replace (Py P U V * Py P C V + Py P V U * Py P C U - (Py P U V * Py A C V + Py P V U * Py A C U)) with (Py P U V * Py P C V + Py P V U * Py P C U - Py P U V * Py A C V - Py P V U * Py A C U) in * by ring.
replace (Py P U V * Py P C V + Py P V U * Py P C U - Py P U V * Py A C V - Py P V U * Py A C U) with (Py P U V * Py4 P C A V + Py P V U * Py4 P C A U) in * by (unfold Py4;ring).
replace ((Py P U V * Py P U V * Py V C V + Py P U V * Py P V U * Py V C U + Py P U V * Py P V U * Py U C V + Py P V U * Py P V U * Py U C U) / Py U V U) with ( Py P U V * Py C V C + Py P V U * Py C U C - Py P U V * Py P V U) in *.
unfold Py.
uniformize_dir_seg.
field.
basic_simpl.
replace(U ** V * U ** V + U ** V * U ** V) with (2*U ** V * U ** V) by ring.

*****
T : not\n (eq\n (Fdiv\n (Fplus\n (Fplus\n (Fplus (Fmult (Fmult (Py P U V) (Py P U V)) (Py V C V))\n (Fmult (Fmult (Py P U V) (Py P V U)) (Py V C U)))\n (Fmult (Fmult (Py P U V) (Py P V U)) (Py U C V)))\n (Fmult (Fmult (Py P V U) (Py P V U)) (Py U C U)))\n (Fmult (Py U V U) (Py U V U))) F0)
H3 : not (eq A Y)
H2 : not (eq C Y)
H1 : parallel A Y C Y
H0 : Col A U V
H : on_foot Y P U V
Y,P,U,V,A,C,D : Point
*****
not (eq (Fmult (Fmult (Fplus F1 F1) (DSeg U V)) (DSeg U V)) F0)
+++++
unfold on_foot in H.
-----
Theorem elim_ratio_on_foot_spec_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C Y -> C <> Y -> A <> Y -> A**Y / C**Y = (Py P U V * Py4 P C A V + Py P V U * Py4 P C A U) / (Py P U V * Py C V C + Py P V U * Py C U C - Py P U V * Py P V U).
Proof.
intros.
rewrite (elim_ratio_on_foot_a Y P U V).
idtac.
assert (T:= (elim_ratio_on_foot_a_invariant C Y H2)).
unfold Py4.
rewrite (elim_py_on_foot_right P C P U V) in *.
idtac.
rewrite (elim_py_on_foot_right A C P U V) in *.
idtac.
rewrite (pyth_simpl_4 C Y) in *.
rewrite (elim_py_on_foot_left_right C P U V Y) in *.
idtac.
replace (((Py P U V * Py P C V + Py P V U * Py P C U) / Py U V U - (Py P U V * Py A C V + Py P V U * Py A C U) / Py U V U) / ((Py P U V * Py P U V * Py V C V + Py P U V * Py P V U * Py V C U + Py P U V * Py P V U * Py U C V + Py P V U * Py P V U * Py U C U) / (Py U V U * Py U V U))) with (((Py P U V * Py P C V + Py P V U * Py P C U) - (Py P U V * Py A C V + Py P V U * Py A C U) ) / ((Py P U V * Py P U V * Py V C V + Py P U V * Py P V U * Py V C U + Py P U V * Py P V U * Py U C V + Py P V U * Py P V U * Py U C U) / ( Py U V U))) in *.
replace (Py P U V * Py P C V + Py P V U * Py P C U - (Py P U V * Py A C V + Py P V U * Py A C U)) with (Py P U V * Py P C V + Py P V U * Py P C U - Py P U V * Py A C V - Py P V U * Py A C U) in * by ring.
replace (Py P U V * Py P C V + Py P V U * Py P C U - Py P U V * Py A C V - Py P V U * Py A C U) with (Py P U V * Py4 P C A V + Py P V U * Py4 P C A U) in * by (unfold Py4;ring).
replace ((Py P U V * Py P U V * Py V C V + Py P U V * Py P V U * Py V C U + Py P U V * Py P V U * Py U C V + Py P V U * Py P V U * Py U C U) / Py U V U) with ( Py P U V * Py C V C + Py P V U * Py C U C - Py P U V * Py P V U) in *.
unfold Py.
uniformize_dir_seg.
field.
basic_simpl.
replace(U ** V * U ** V + U ** V * U ** V) with (2*U ** V * U ** V) by ring.
unfold on_foot in H.

*****
T : not\n (eq\n (Fdiv\n (Fplus\n (Fplus\n (Fplus (Fmult (Fmult (Py P U V) (Py P U V)) (Py V C V))\n (Fmult (Fmult (Py P U V) (Py P V U)) (Py V C U)))\n (Fmult (Fmult (Py P U V) (Py P V U)) (Py U C V)))\n (Fmult (Fmult (Py P V U) (Py P V U)) (Py U C U)))\n (Fmult (Py U V U) (Py U V U))) F0)
H3 : not (eq A Y)
H2 : not (eq C Y)
H1 : parallel A Y C Y
H0 : Col A U V
H : and (perp Y P U V) (and (Col Y U V) (not (eq U V)))
Y,P,U,V,A,C,D : Point
*****
not (eq (Fmult (Fmult (Fplus F1 F1) (DSeg U V)) (DSeg U V)) F0)
+++++
use H.
-----
Theorem elim_ratio_on_foot_spec_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C Y -> C <> Y -> A <> Y -> A**Y / C**Y = (Py P U V * Py4 P C A V + Py P V U * Py4 P C A U) / (Py P U V * Py C V C + Py P V U * Py C U C - Py P U V * Py P V U).
Proof.
intros.
rewrite (elim_ratio_on_foot_a Y P U V).
idtac.
assert (T:= (elim_ratio_on_foot_a_invariant C Y H2)).
unfold Py4.
rewrite (elim_py_on_foot_right P C P U V) in *.
idtac.
rewrite (elim_py_on_foot_right A C P U V) in *.
idtac.
rewrite (pyth_simpl_4 C Y) in *.
rewrite (elim_py_on_foot_left_right C P U V Y) in *.
idtac.
replace (((Py P U V * Py P C V + Py P V U * Py P C U) / Py U V U - (Py P U V * Py A C V + Py P V U * Py A C U) / Py U V U) / ((Py P U V * Py P U V * Py V C V + Py P U V * Py P V U * Py V C U + Py P U V * Py P V U * Py U C V + Py P V U * Py P V U * Py U C U) / (Py U V U * Py U V U))) with (((Py P U V * Py P C V + Py P V U * Py P C U) - (Py P U V * Py A C V + Py P V U * Py A C U) ) / ((Py P U V * Py P U V * Py V C V + Py P U V * Py P V U * Py V C U + Py P U V * Py P V U * Py U C V + Py P V U * Py P V U * Py U C U) / ( Py U V U))) in *.
replace (Py P U V * Py P C V + Py P V U * Py P C U - (Py P U V * Py A C V + Py P V U * Py A C U)) with (Py P U V * Py P C V + Py P V U * Py P C U - Py P U V * Py A C V - Py P V U * Py A C U) in * by ring.
replace (Py P U V * Py P C V + Py P V U * Py P C U - Py P U V * Py A C V - Py P V U * Py A C U) with (Py P U V * Py4 P C A V + Py P V U * Py4 P C A U) in * by (unfold Py4;ring).
replace ((Py P U V * Py P U V * Py V C V + Py P U V * Py P V U * Py V C U + Py P U V * Py P V U * Py U C V + Py P V U * Py P V U * Py U C U) / Py U V U) with ( Py P U V * Py C V C + Py P V U * Py C U C - Py P U V * Py P V U) in *.
unfold Py.
uniformize_dir_seg.
field.
basic_simpl.
replace(U ** V * U ** V + U ** V * U ** V) with (2*U ** V * U ** V) by ring.
unfold on_foot in H.
use H.

*****
H7 : not (eq U V)
H6 : Col Y U V
H4 : perp Y P U V
T : not\n (eq\n (Fdiv\n (Fplus\n (Fplus\n (Fplus (Fmult (Fmult (Py P U V) (Py P U V)) (Py V C V))\n (Fmult (Fmult (Py P U V) (Py P V U)) (Py V C U)))\n (Fmult (Fmult (Py P U V) (Py P V U)) (Py U C V)))\n (Fmult (Fmult (Py P V U) (Py P V U)) (Py U C U)))\n (Fmult (Py U V U) (Py U V U))) F0)
H3 : not (eq A Y)
H2 : not (eq C Y)
H1 : parallel A Y C Y
H0 : Col A U V
Y,P,U,V,A,C,D : Point
*****
not (eq (Fmult (Fmult (Fplus F1 F1) (DSeg U V)) (DSeg U V)) F0)
+++++
repeat (apply nonzeromult).
-----
Theorem elim_ratio_on_foot_spec_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C Y -> C <> Y -> A <> Y -> A**Y / C**Y = (Py P U V * Py4 P C A V + Py P V U * Py4 P C A U) / (Py P U V * Py C V C + Py P V U * Py C U C - Py P U V * Py P V U).
Proof.
intros.
rewrite (elim_ratio_on_foot_a Y P U V).
idtac.
assert (T:= (elim_ratio_on_foot_a_invariant C Y H2)).
unfold Py4.
rewrite (elim_py_on_foot_right P C P U V) in *.
idtac.
rewrite (elim_py_on_foot_right A C P U V) in *.
idtac.
rewrite (pyth_simpl_4 C Y) in *.
rewrite (elim_py_on_foot_left_right C P U V Y) in *.
idtac.
replace (((Py P U V * Py P C V + Py P V U * Py P C U) / Py U V U - (Py P U V * Py A C V + Py P V U * Py A C U) / Py U V U) / ((Py P U V * Py P U V * Py V C V + Py P U V * Py P V U * Py V C U + Py P U V * Py P V U * Py U C V + Py P V U * Py P V U * Py U C U) / (Py U V U * Py U V U))) with (((Py P U V * Py P C V + Py P V U * Py P C U) - (Py P U V * Py A C V + Py P V U * Py A C U) ) / ((Py P U V * Py P U V * Py V C V + Py P U V * Py P V U * Py V C U + Py P U V * Py P V U * Py U C V + Py P V U * Py P V U * Py U C U) / ( Py U V U))) in *.
replace (Py P U V * Py P C V + Py P V U * Py P C U - (Py P U V * Py A C V + Py P V U * Py A C U)) with (Py P U V * Py P C V + Py P V U * Py P C U - Py P U V * Py A C V - Py P V U * Py A C U) in * by ring.
replace (Py P U V * Py P C V + Py P V U * Py P C U - Py P U V * Py A C V - Py P V U * Py A C U) with (Py P U V * Py4 P C A V + Py P V U * Py4 P C A U) in * by (unfold Py4;ring).
replace ((Py P U V * Py P U V * Py V C V + Py P U V * Py P V U * Py V C U + Py P U V * Py P V U * Py U C V + Py P V U * Py P V U * Py U C U) / Py U V U) with ( Py P U V * Py C V C + Py P V U * Py C U C - Py P U V * Py P V U) in *.
unfold Py.
uniformize_dir_seg.
field.
basic_simpl.
replace(U ** V * U ** V + U ** V * U ** V) with (2*U ** V * U ** V) by ring.
unfold on_foot in H.
use H.
repeat (apply nonzeromult).

*****
H7 : not (eq U V)
H6 : Col Y U V
H4 : perp Y P U V
T : not\n (eq\n (Fdiv\n (Fplus\n (Fplus\n (Fplus (Fmult (Fmult (Py P U V) (Py P U V)) (Py V C V))\n (Fmult (Fmult (Py P U V) (Py P V U)) (Py V C U)))\n (Fmult (Fmult (Py P U V) (Py P V U)) (Py U C V)))\n (Fmult (Fmult (Py P V U) (Py P V U)) (Py U C U)))\n (Fmult (Py U V U) (Py U V U))) F0)
H3 : not (eq A Y)
H2 : not (eq C Y)
H1 : parallel A Y C Y
H0 : Col A U V
Y,P,U,V,A,C,D : Point
*****
not (eq (Fplus F1 F1) F0)
+++++
auto with Geom.
-----
Theorem elim_ratio_on_foot_spec_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C Y -> C <> Y -> A <> Y -> A**Y / C**Y = (Py P U V * Py4 P C A V + Py P V U * Py4 P C A U) / (Py P U V * Py C V C + Py P V U * Py C U C - Py P U V * Py P V U).
Proof.
intros.
rewrite (elim_ratio_on_foot_a Y P U V).
idtac.
assert (T:= (elim_ratio_on_foot_a_invariant C Y H2)).
unfold Py4.
rewrite (elim_py_on_foot_right P C P U V) in *.
idtac.
rewrite (elim_py_on_foot_right A C P U V) in *.
idtac.
rewrite (pyth_simpl_4 C Y) in *.
rewrite (elim_py_on_foot_left_right C P U V Y) in *.
idtac.
replace (((Py P U V * Py P C V + Py P V U * Py P C U) / Py U V U - (Py P U V * Py A C V + Py P V U * Py A C U) / Py U V U) / ((Py P U V * Py P U V * Py V C V + Py P U V * Py P V U * Py V C U + Py P U V * Py P V U * Py U C V + Py P V U * Py P V U * Py U C U) / (Py U V U * Py U V U))) with (((Py P U V * Py P C V + Py P V U * Py P C U) - (Py P U V * Py A C V + Py P V U * Py A C U) ) / ((Py P U V * Py P U V * Py V C V + Py P U V * Py P V U * Py V C U + Py P U V * Py P V U * Py U C V + Py P V U * Py P V U * Py U C U) / ( Py U V U))) in *.
replace (Py P U V * Py P C V + Py P V U * Py P C U - (Py P U V * Py A C V + Py P V U * Py A C U)) with (Py P U V * Py P C V + Py P V U * Py P C U - Py P U V * Py A C V - Py P V U * Py A C U) in * by ring.
replace (Py P U V * Py P C V + Py P V U * Py P C U - Py P U V * Py A C V - Py P V U * Py A C U) with (Py P U V * Py4 P C A V + Py P V U * Py4 P C A U) in * by (unfold Py4;ring).
replace ((Py P U V * Py P U V * Py V C V + Py P U V * Py P V U * Py V C U + Py P U V * Py P V U * Py U C V + Py P V U * Py P V U * Py U C U) / Py U V U) with ( Py P U V * Py C V C + Py P V U * Py C U C - Py P U V * Py P V U) in *.
unfold Py.
uniformize_dir_seg.
field.
basic_simpl.
replace(U ** V * U ** V + U ** V * U ** V) with (2*U ** V * U ** V) by ring.
unfold on_foot in H.
use H.
repeat (apply nonzeromult).

*****
H7 : not (eq U V)
H6 : Col Y U V
H4 : perp Y P U V
T : not\n (eq\n (Fdiv\n (Fplus\n (Fplus\n (Fplus (Fmult (Fmult (Py P U V) (Py P U V)) (Py V C V))\n (Fmult (Fmult (Py P U V) (Py P V U)) (Py V C U)))\n (Fmult (Fmult (Py P U V) (Py P V U)) (Py U C V)))\n (Fmult (Fmult (Py P V U) (Py P V U)) (Py U C U)))\n (Fmult (Py U V U) (Py U V U))) F0)
H3 : not (eq A Y)
H2 : not (eq C Y)
H1 : parallel A Y C Y
H0 : Col A U V
Y,P,U,V,A,C,D : Point
*****
not (eq (DSeg U V) F0)
+++++
auto with Geom.
-----
Theorem elim_ratio_on_foot_spec_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C Y -> C <> Y -> A <> Y -> A**Y / C**Y = (Py P U V * Py4 P C A V + Py P V U * Py4 P C A U) / (Py P U V * Py C V C + Py P V U * Py C U C - Py P U V * Py P V U).
Proof.
intros.
rewrite (elim_ratio_on_foot_a Y P U V).
idtac.
assert (T:= (elim_ratio_on_foot_a_invariant C Y H2)).
unfold Py4.
rewrite (elim_py_on_foot_right P C P U V) in *.
idtac.
rewrite (elim_py_on_foot_right A C P U V) in *.
idtac.
rewrite (pyth_simpl_4 C Y) in *.
rewrite (elim_py_on_foot_left_right C P U V Y) in *.
idtac.
replace (((Py P U V * Py P C V + Py P V U * Py P C U) / Py U V U - (Py P U V * Py A C V + Py P V U * Py A C U) / Py U V U) / ((Py P U V * Py P U V * Py V C V + Py P U V * Py P V U * Py V C U + Py P U V * Py P V U * Py U C V + Py P V U * Py P V U * Py U C U) / (Py U V U * Py U V U))) with (((Py P U V * Py P C V + Py P V U * Py P C U) - (Py P U V * Py A C V + Py P V U * Py A C U) ) / ((Py P U V * Py P U V * Py V C V + Py P U V * Py P V U * Py V C U + Py P U V * Py P V U * Py U C V + Py P V U * Py P V U * Py U C U) / ( Py U V U))) in *.
replace (Py P U V * Py P C V + Py P V U * Py P C U - (Py P U V * Py A C V + Py P V U * Py A C U)) with (Py P U V * Py P C V + Py P V U * Py P C U - Py P U V * Py A C V - Py P V U * Py A C U) in * by ring.
replace (Py P U V * Py P C V + Py P V U * Py P C U - Py P U V * Py A C V - Py P V U * Py A C U) with (Py P U V * Py4 P C A V + Py P V U * Py4 P C A U) in * by (unfold Py4;ring).
replace ((Py P U V * Py P U V * Py V C V + Py P U V * Py P V U * Py V C U + Py P U V * Py P V U * Py U C V + Py P V U * Py P V U * Py U C U) / Py U V U) with ( Py P U V * Py C V C + Py P V U * Py C U C - Py P U V * Py P V U) in *.
unfold Py.
uniformize_dir_seg.
field.
basic_simpl.
replace(U ** V * U ** V + U ** V * U ** V) with (2*U ** V * U ** V) by ring.
unfold on_foot in H.
use H.
repeat (apply nonzeromult).

*****
H7 : not (eq U V)
H6 : Col Y U V
H4 : perp Y P U V
T : not\n (eq\n (Fdiv\n (Fplus\n (Fplus\n (Fplus (Fmult (Fmult (Py P U V) (Py P U V)) (Py V C V))\n (Fmult (Fmult (Py P U V) (Py P V U)) (Py V C U)))\n (Fmult (Fmult (Py P U V) (Py P V U)) (Py U C V)))\n (Fmult (Fmult (Py P V U) (Py P V U)) (Py U C U)))\n (Fmult (Py U V U) (Py U V U))) F0)
H3 : not (eq A Y)
H2 : not (eq C Y)
H1 : parallel A Y C Y
H0 : Col A U V
Y,P,U,V,A,C,D : Point
*****
not (eq (DSeg U V) F0)
+++++
auto with Geom.
-----
Theorem elim_ratio_on_foot_spec_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C Y -> C <> Y -> A <> Y -> A**Y / C**Y = (Py P U V * Py4 P C A V + Py P V U * Py4 P C A U) / (Py P U V * Py C V C + Py P V U * Py C U C - Py P U V * Py P V U).
Proof.
intros.
rewrite (elim_ratio_on_foot_a Y P U V).
idtac.
assert (T:= (elim_ratio_on_foot_a_invariant C Y H2)).
unfold Py4.
rewrite (elim_py_on_foot_right P C P U V) in *.
idtac.
rewrite (elim_py_on_foot_right A C P U V) in *.
idtac.
rewrite (pyth_simpl_4 C Y) in *.
rewrite (elim_py_on_foot_left_right C P U V Y) in *.
idtac.
replace (((Py P U V * Py P C V + Py P V U * Py P C U) / Py U V U - (Py P U V * Py A C V + Py P V U * Py A C U) / Py U V U) / ((Py P U V * Py P U V * Py V C V + Py P U V * Py P V U * Py V C U + Py P U V * Py P V U * Py U C V + Py P V U * Py P V U * Py U C U) / (Py U V U * Py U V U))) with (((Py P U V * Py P C V + Py P V U * Py P C U) - (Py P U V * Py A C V + Py P V U * Py A C U) ) / ((Py P U V * Py P U V * Py V C V + Py P U V * Py P V U * Py V C U + Py P U V * Py P V U * Py U C V + Py P V U * Py P V U * Py U C U) / ( Py U V U))) in *.

*****
T : not\n (eq\n (Fdiv\n (Fplus\n (Fplus\n (Fplus (Fmult (Fmult (Py P U V) (Py P U V)) (Py V C V))\n (Fmult (Fmult (Py P U V) (Py P V U)) (Py V C U)))\n (Fmult (Fmult (Py P U V) (Py P V U)) (Py U C V)))\n (Fmult (Fmult (Py P V U) (Py P V U)) (Py U C U)))\n (Fmult (Py U V U) (Py U V U))) F0)
H3 : not (eq A Y)
H2 : not (eq C Y)
H1 : parallel A Y C Y
H0 : Col A U V
H : on_foot Y P U V
Y,P,U,V,A,C,D : Point
*****
eq (Fdiv (Fminus (Fplus (Fmult (Py P U V) (Py P C V)) (Fmult (Py P V U) (Py P C U))) (Fplus (Fmult (Py P U V) (Py A C V)) (Fmult (Py P V U) (Py A C U)))) (Fdiv (Fplus (Fplus (Fplus (Fmult (Fmult (Py P U V) (Py P U V)) (Py V C V)) (Fmult (Fmult (Py P U V) (Py P V U)) (Py V C U))) (Fmult (Fmult (Py P U V) (Py P V U)) (Py U C V))) (Fmult (Fmult (Py P V U) (Py P V U)) (Py U C U))) (Py U V U))) (Fdiv (Fminus (Fdiv (Fplus (Fmult (Py P U V) (Py P C V)) (Fmult (Py P V U) (Py P C U))) (Py U V U)) (Fdiv (Fplus (Fmult (Py P U V) (Py A C V)) (Fmult (Py P V U) (Py A C U))) (Py U V U))) (Fdiv (Fplus (Fplus (Fplus (Fmult (Fmult (Py P U V) (Py P U V)) (Py V C V)) (Fmult (Fmult (Py P U V) (Py P V U)) (Py V C U))) (Fmult (Fmult (Py P U V) (Py P V U)) (Py U C V))) (Fmult (Fmult (Py P V U) (Py P V U)) (Py U C U))) (Fmult (Py U V U) (Py U V U))))
+++++
field.
-----
Theorem elim_ratio_on_foot_spec_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C Y -> C <> Y -> A <> Y -> A**Y / C**Y = (Py P U V * Py4 P C A V + Py P V U * Py4 P C A U) / (Py P U V * Py C V C + Py P V U * Py C U C - Py P U V * Py P V U).
Proof.
intros.
rewrite (elim_ratio_on_foot_a Y P U V).
idtac.
assert (T:= (elim_ratio_on_foot_a_invariant C Y H2)).
unfold Py4.
rewrite (elim_py_on_foot_right P C P U V) in *.
idtac.
rewrite (elim_py_on_foot_right A C P U V) in *.
idtac.
rewrite (pyth_simpl_4 C Y) in *.
rewrite (elim_py_on_foot_left_right C P U V Y) in *.
idtac.
replace (((Py P U V * Py P C V + Py P V U * Py P C U) / Py U V U - (Py P U V * Py A C V + Py P V U * Py A C U) / Py U V U) / ((Py P U V * Py P U V * Py V C V + Py P U V * Py P V U * Py V C U + Py P U V * Py P V U * Py U C V + Py P V U * Py P V U * Py U C U) / (Py U V U * Py U V U))) with (((Py P U V * Py P C V + Py P V U * Py P C U) - (Py P U V * Py A C V + Py P V U * Py A C U) ) / ((Py P U V * Py P U V * Py V C V + Py P U V * Py P V U * Py V C U + Py P U V * Py P V U * Py U C V + Py P V U * Py P V U * Py U C U) / ( Py U V U))) in *.
field.

*****
T : not\n (eq\n (Fdiv\n (Fplus\n (Fplus\n (Fplus (Fmult (Fmult (Py P U V) (Py P U V)) (Py V C V))\n (Fmult (Fmult (Py P U V) (Py P V U)) (Py V C U)))\n (Fmult (Fmult (Py P U V) (Py P V U)) (Py U C V)))\n (Fmult (Fmult (Py P V U) (Py P V U)) (Py U C U)))\n (Fmult (Py U V U) (Py U V U))) F0)
H3 : not (eq A Y)
H2 : not (eq C Y)
H1 : parallel A Y C Y
H0 : Col A U V
H : on_foot Y P U V
Y,P,U,V,A,C,D : Point
*****
and (not (eq (Py U V U) F0)) (not (eq (Fplus (Fplus (Fplus (Fmult (Fmult (Py P U V) (Py P U V)) (Py V C V)) (Fmult (Fmult (Py P U V) (Py P V U)) (Py V C U))) (Fmult (Fmult (Py P U V) (Py P V U)) (Py U C V))) (Fmult (Fmult (Py P V U) (Py P V U)) (Py U C U))) F0))
+++++
split.
-----
Theorem elim_ratio_on_foot_spec_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C Y -> C <> Y -> A <> Y -> A**Y / C**Y = (Py P U V * Py4 P C A V + Py P V U * Py4 P C A U) / (Py P U V * Py C V C + Py P V U * Py C U C - Py P U V * Py P V U).
Proof.
intros.
rewrite (elim_ratio_on_foot_a Y P U V).
idtac.
assert (T:= (elim_ratio_on_foot_a_invariant C Y H2)).
unfold Py4.
rewrite (elim_py_on_foot_right P C P U V) in *.
idtac.
rewrite (elim_py_on_foot_right A C P U V) in *.
idtac.
rewrite (pyth_simpl_4 C Y) in *.
rewrite (elim_py_on_foot_left_right C P U V Y) in *.
idtac.
replace (((Py P U V * Py P C V + Py P V U * Py P C U) / Py U V U - (Py P U V * Py A C V + Py P V U * Py A C U) / Py U V U) / ((Py P U V * Py P U V * Py V C V + Py P U V * Py P V U * Py V C U + Py P U V * Py P V U * Py U C V + Py P V U * Py P V U * Py U C U) / (Py U V U * Py U V U))) with (((Py P U V * Py P C V + Py P V U * Py P C U) - (Py P U V * Py A C V + Py P V U * Py A C U) ) / ((Py P U V * Py P U V * Py V C V + Py P U V * Py P V U * Py V C U + Py P U V * Py P V U * Py U C V + Py P V U * Py P V U * Py U C U) / ( Py U V U))) in *.
field.
split.

*****
T : not\n (eq\n (Fdiv\n (Fplus\n (Fplus\n (Fplus (Fmult (Fmult (Py P U V) (Py P U V)) (Py V C V))\n (Fmult (Fmult (Py P U V) (Py P V U)) (Py V C U)))\n (Fmult (Fmult (Py P U V) (Py P V U)) (Py U C V)))\n (Fmult (Fmult (Py P V U) (Py P V U)) (Py U C U)))\n (Fmult (Py U V U) (Py U V U))) F0)
H3 : not (eq A Y)
H2 : not (eq C Y)
H1 : parallel A Y C Y
H0 : Col A U V
H : on_foot Y P U V
Y,P,U,V,A,C,D : Point
*****
not (eq (Py U V U) F0)
+++++
unfold on_foot in H.
-----
Theorem elim_ratio_on_foot_spec_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C Y -> C <> Y -> A <> Y -> A**Y / C**Y = (Py P U V * Py4 P C A V + Py P V U * Py4 P C A U) / (Py P U V * Py C V C + Py P V U * Py C U C - Py P U V * Py P V U).
Proof.
intros.
rewrite (elim_ratio_on_foot_a Y P U V).
idtac.
assert (T:= (elim_ratio_on_foot_a_invariant C Y H2)).
unfold Py4.
rewrite (elim_py_on_foot_right P C P U V) in *.
idtac.
rewrite (elim_py_on_foot_right A C P U V) in *.
idtac.
rewrite (pyth_simpl_4 C Y) in *.
rewrite (elim_py_on_foot_left_right C P U V Y) in *.
idtac.
replace (((Py P U V * Py P C V + Py P V U * Py P C U) / Py U V U - (Py P U V * Py A C V + Py P V U * Py A C U) / Py U V U) / ((Py P U V * Py P U V * Py V C V + Py P U V * Py P V U * Py V C U + Py P U V * Py P V U * Py U C V + Py P V U * Py P V U * Py U C U) / (Py U V U * Py U V U))) with (((Py P U V * Py P C V + Py P V U * Py P C U) - (Py P U V * Py A C V + Py P V U * Py A C U) ) / ((Py P U V * Py P U V * Py V C V + Py P U V * Py P V U * Py V C U + Py P U V * Py P V U * Py U C V + Py P V U * Py P V U * Py U C U) / ( Py U V U))) in *.
field.
split.
unfold on_foot in H.

*****
T : not\n (eq\n (Fdiv\n (Fplus\n (Fplus\n (Fplus (Fmult (Fmult (Py P U V) (Py P U V)) (Py V C V))\n (Fmult (Fmult (Py P U V) (Py P V U)) (Py V C U)))\n (Fmult (Fmult (Py P U V) (Py P V U)) (Py U C V)))\n (Fmult (Fmult (Py P V U) (Py P V U)) (Py U C U)))\n (Fmult (Py U V U) (Py U V U))) F0)
H3 : not (eq A Y)
H2 : not (eq C Y)
H1 : parallel A Y C Y
H0 : Col A U V
H : and (perp Y P U V) (and (Col Y U V) (not (eq U V)))
Y,P,U,V,A,C,D : Point
*****
not (eq (Py U V U) F0)
+++++
use H.
-----
Theorem elim_ratio_on_foot_spec_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C Y -> C <> Y -> A <> Y -> A**Y / C**Y = (Py P U V * Py4 P C A V + Py P V U * Py4 P C A U) / (Py P U V * Py C V C + Py P V U * Py C U C - Py P U V * Py P V U).
Proof.
intros.
rewrite (elim_ratio_on_foot_a Y P U V).
idtac.
assert (T:= (elim_ratio_on_foot_a_invariant C Y H2)).
unfold Py4.
rewrite (elim_py_on_foot_right P C P U V) in *.
idtac.
rewrite (elim_py_on_foot_right A C P U V) in *.
idtac.
rewrite (pyth_simpl_4 C Y) in *.
rewrite (elim_py_on_foot_left_right C P U V Y) in *.
idtac.
replace (((Py P U V * Py P C V + Py P V U * Py P C U) / Py U V U - (Py P U V * Py A C V + Py P V U * Py A C U) / Py U V U) / ((Py P U V * Py P U V * Py V C V + Py P U V * Py P V U * Py V C U + Py P U V * Py P V U * Py U C V + Py P V U * Py P V U * Py U C U) / (Py U V U * Py U V U))) with (((Py P U V * Py P C V + Py P V U * Py P C U) - (Py P U V * Py A C V + Py P V U * Py A C U) ) / ((Py P U V * Py P U V * Py V C V + Py P U V * Py P V U * Py V C U + Py P U V * Py P V U * Py U C V + Py P V U * Py P V U * Py U C U) / ( Py U V U))) in *.
field.
split.
unfold on_foot in H.
use H.

*****
H7 : not (eq U V)
H6 : Col Y U V
H4 : perp Y P U V
T : not\n (eq\n (Fdiv\n (Fplus\n (Fplus\n (Fplus (Fmult (Fmult (Py P U V) (Py P U V)) (Py V C V))\n (Fmult (Fmult (Py P U V) (Py P V U)) (Py V C U)))\n (Fmult (Fmult (Py P U V) (Py P V U)) (Py U C V)))\n (Fmult (Fmult (Py P V U) (Py P V U)) (Py U C U)))\n (Fmult (Py U V U) (Py U V U))) F0)
H3 : not (eq A Y)
H2 : not (eq C Y)
H1 : parallel A Y C Y
H0 : Col A U V
Y,P,U,V,A,C,D : Point
*****
not (eq (Py U V U) F0)
+++++
auto with Geom.
-----
Theorem elim_ratio_on_foot_spec_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C Y -> C <> Y -> A <> Y -> A**Y / C**Y = (Py P U V * Py4 P C A V + Py P V U * Py4 P C A U) / (Py P U V * Py C V C + Py P V U * Py C U C - Py P U V * Py P V U).
Proof.
intros.
rewrite (elim_ratio_on_foot_a Y P U V).
idtac.
assert (T:= (elim_ratio_on_foot_a_invariant C Y H2)).
unfold Py4.
rewrite (elim_py_on_foot_right P C P U V) in *.
idtac.
rewrite (elim_py_on_foot_right A C P U V) in *.
idtac.
rewrite (pyth_simpl_4 C Y) in *.
rewrite (elim_py_on_foot_left_right C P U V Y) in *.
idtac.
replace (((Py P U V * Py P C V + Py P V U * Py P C U) / Py U V U - (Py P U V * Py A C V + Py P V U * Py A C U) / Py U V U) / ((Py P U V * Py P U V * Py V C V + Py P U V * Py P V U * Py V C U + Py P U V * Py P V U * Py U C V + Py P V U * Py P V U * Py U C U) / (Py U V U * Py U V U))) with (((Py P U V * Py P C V + Py P V U * Py P C U) - (Py P U V * Py A C V + Py P V U * Py A C U) ) / ((Py P U V * Py P U V * Py V C V + Py P U V * Py P V U * Py V C U + Py P U V * Py P V U * Py U C V + Py P V U * Py P V U * Py U C U) / ( Py U V U))) in *.
field.
split.

*****
T : not\n (eq\n (Fdiv\n (Fplus\n (Fplus\n (Fplus (Fmult (Fmult (Py P U V) (Py P U V)) (Py V C V))\n (Fmult (Fmult (Py P U V) (Py P V U)) (Py V C U)))\n (Fmult (Fmult (Py P U V) (Py P V U)) (Py U C V)))\n (Fmult (Fmult (Py P V U) (Py P V U)) (Py U C U)))\n (Fmult (Py U V U) (Py U V U))) F0)
H3 : not (eq A Y)
H2 : not (eq C Y)
H1 : parallel A Y C Y
H0 : Col A U V
H : on_foot Y P U V
Y,P,U,V,A,C,D : Point
*****
not (eq (Fplus (Fplus (Fplus (Fmult (Fmult (Py P U V) (Py P U V)) (Py V C V)) (Fmult (Fmult (Py P U V) (Py P V U)) (Py V C U))) (Fmult (Fmult (Py P U V) (Py P V U)) (Py U C V))) (Fmult (Fmult (Py P V U) (Py P V U)) (Py U C U))) F0)
+++++
intro Ha.
-----
Theorem elim_ratio_on_foot_spec_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C Y -> C <> Y -> A <> Y -> A**Y / C**Y = (Py P U V * Py4 P C A V + Py P V U * Py4 P C A U) / (Py P U V * Py C V C + Py P V U * Py C U C - Py P U V * Py P V U).
Proof.
intros.
rewrite (elim_ratio_on_foot_a Y P U V).
idtac.
assert (T:= (elim_ratio_on_foot_a_invariant C Y H2)).
unfold Py4.
rewrite (elim_py_on_foot_right P C P U V) in *.
idtac.
rewrite (elim_py_on_foot_right A C P U V) in *.
idtac.
rewrite (pyth_simpl_4 C Y) in *.
rewrite (elim_py_on_foot_left_right C P U V Y) in *.
idtac.
replace (((Py P U V * Py P C V + Py P V U * Py P C U) / Py U V U - (Py P U V * Py A C V + Py P V U * Py A C U) / Py U V U) / ((Py P U V * Py P U V * Py V C V + Py P U V * Py P V U * Py V C U + Py P U V * Py P V U * Py U C V + Py P V U * Py P V U * Py U C U) / (Py U V U * Py U V U))) with (((Py P U V * Py P C V + Py P V U * Py P C U) - (Py P U V * Py A C V + Py P V U * Py A C U) ) / ((Py P U V * Py P U V * Py V C V + Py P U V * Py P V U * Py V C U + Py P U V * Py P V U * Py U C V + Py P V U * Py P V U * Py U C U) / ( Py U V U))) in *.
field.
split.
intro Ha.

*****
Ha : eq\n (Fplus\n (Fplus\n (Fplus (Fmult (Fmult (Py P U V) (Py P U V)) (Py V C V))\n (Fmult (Fmult (Py P U V) (Py P V U)) (Py V C U)))\n (Fmult (Fmult (Py P U V) (Py P V U)) (Py U C V)))\n (Fmult (Fmult (Py P V U) (Py P V U)) (Py U C U))) F0
T : not\n (eq\n (Fdiv\n (Fplus\n (Fplus\n (Fplus (Fmult (Fmult (Py P U V) (Py P U V)) (Py V C V))\n (Fmult (Fmult (Py P U V) (Py P V U)) (Py V C U)))\n (Fmult (Fmult (Py P U V) (Py P V U)) (Py U C V)))\n (Fmult (Fmult (Py P V U) (Py P V U)) (Py U C U)))\n (Fmult (Py U V U) (Py U V U))) F0)
H3 : not (eq A Y)
H2 : not (eq C Y)
H1 : parallel A Y C Y
H0 : Col A U V
H : on_foot Y P U V
Y,P,U,V,A,C,D : Point
*****
False
+++++
rewrite Ha in *.
-----
Theorem elim_ratio_on_foot_spec_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C Y -> C <> Y -> A <> Y -> A**Y / C**Y = (Py P U V * Py4 P C A V + Py P V U * Py4 P C A U) / (Py P U V * Py C V C + Py P V U * Py C U C - Py P U V * Py P V U).
Proof.
intros.
rewrite (elim_ratio_on_foot_a Y P U V).
idtac.
assert (T:= (elim_ratio_on_foot_a_invariant C Y H2)).
unfold Py4.
rewrite (elim_py_on_foot_right P C P U V) in *.
idtac.
rewrite (elim_py_on_foot_right A C P U V) in *.
idtac.
rewrite (pyth_simpl_4 C Y) in *.
rewrite (elim_py_on_foot_left_right C P U V Y) in *.
idtac.
replace (((Py P U V * Py P C V + Py P V U * Py P C U) / Py U V U - (Py P U V * Py A C V + Py P V U * Py A C U) / Py U V U) / ((Py P U V * Py P U V * Py V C V + Py P U V * Py P V U * Py V C U + Py P U V * Py P V U * Py U C V + Py P V U * Py P V U * Py U C U) / (Py U V U * Py U V U))) with (((Py P U V * Py P C V + Py P V U * Py P C U) - (Py P U V * Py A C V + Py P V U * Py A C U) ) / ((Py P U V * Py P U V * Py V C V + Py P U V * Py P V U * Py V C U + Py P U V * Py P V U * Py U C V + Py P V U * Py P V U * Py U C U) / ( Py U V U))) in *.
field.
split.
intro Ha.
rewrite Ha in *.

*****
Ha : eq\n (Fplus\n (Fplus\n (Fplus (Fmult (Fmult (Py P U V) (Py P U V)) (Py V C V))\n (Fmult (Fmult (Py P U V) (Py P V U)) (Py V C U)))\n (Fmult (Fmult (Py P U V) (Py P V U)) (Py U C V)))\n (Fmult (Fmult (Py P V U) (Py P V U)) (Py U C U))) F0
T : not (eq (Fdiv F0 (Fmult (Py U V U) (Py U V U))) F0)
H3 : not (eq A Y)
H2 : not (eq C Y)
H1 : parallel A Y C Y
H0 : Col A U V
H : on_foot Y P U V
Y,P,U,V,A,C,D : Point
*****
False
+++++
replace ( 0 / (Py U V U * Py U V U) ) with 0 in *.
-----
Theorem elim_ratio_on_foot_spec_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C Y -> C <> Y -> A <> Y -> A**Y / C**Y = (Py P U V * Py4 P C A V + Py P V U * Py4 P C A U) / (Py P U V * Py C V C + Py P V U * Py C U C - Py P U V * Py P V U).
Proof.
intros.
rewrite (elim_ratio_on_foot_a Y P U V).
idtac.
assert (T:= (elim_ratio_on_foot_a_invariant C Y H2)).
unfold Py4.
rewrite (elim_py_on_foot_right P C P U V) in *.
idtac.
rewrite (elim_py_on_foot_right A C P U V) in *.
idtac.
rewrite (pyth_simpl_4 C Y) in *.
rewrite (elim_py_on_foot_left_right C P U V Y) in *.
idtac.
replace (((Py P U V * Py P C V + Py P V U * Py P C U) / Py U V U - (Py P U V * Py A C V + Py P V U * Py A C U) / Py U V U) / ((Py P U V * Py P U V * Py V C V + Py P U V * Py P V U * Py V C U + Py P U V * Py P V U * Py U C V + Py P V U * Py P V U * Py U C U) / (Py U V U * Py U V U))) with (((Py P U V * Py P C V + Py P V U * Py P C U) - (Py P U V * Py A C V + Py P V U * Py A C U) ) / ((Py P U V * Py P U V * Py V C V + Py P U V * Py P V U * Py V C U + Py P U V * Py P V U * Py U C V + Py P V U * Py P V U * Py U C U) / ( Py U V U))) in *.
field.
split.
intro Ha.
rewrite Ha in *.
replace ( 0 / (Py U V U * Py U V U) ) with 0 in *.

*****
Ha : eq\n (Fplus\n (Fplus\n (Fplus (Fmult (Fmult (Py P U V) (Py P U V)) (Py V C V))\n (Fmult (Fmult (Py P U V) (Py P V U)) (Py V C U)))\n (Fmult (Fmult (Py P U V) (Py P V U)) (Py U C V)))\n (Fmult (Fmult (Py P V U) (Py P V U)) (Py U C U))) F0
T : not (eq F0 F0)
H3 : not (eq A Y)
H2 : not (eq C Y)
H1 : parallel A Y C Y
H0 : Col A U V
H : on_foot Y P U V
Y,P,U,V,A,C,D : Point
*****
False
+++++
intuition.
-----
Theorem elim_ratio_on_foot_spec_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C Y -> C <> Y -> A <> Y -> A**Y / C**Y = (Py P U V * Py4 P C A V + Py P V U * Py4 P C A U) / (Py P U V * Py C V C + Py P V U * Py C U C - Py P U V * Py P V U).
Proof.
intros.
rewrite (elim_ratio_on_foot_a Y P U V).
idtac.
assert (T:= (elim_ratio_on_foot_a_invariant C Y H2)).
unfold Py4.
rewrite (elim_py_on_foot_right P C P U V) in *.
idtac.
rewrite (elim_py_on_foot_right A C P U V) in *.
idtac.
rewrite (pyth_simpl_4 C Y) in *.
rewrite (elim_py_on_foot_left_right C P U V Y) in *.
idtac.
replace (((Py P U V * Py P C V + Py P V U * Py P C U) / Py U V U - (Py P U V * Py A C V + Py P V U * Py A C U) / Py U V U) / ((Py P U V * Py P U V * Py V C V + Py P U V * Py P V U * Py V C U + Py P U V * Py P V U * Py U C V + Py P V U * Py P V U * Py U C U) / (Py U V U * Py U V U))) with (((Py P U V * Py P C V + Py P V U * Py P C U) - (Py P U V * Py A C V + Py P V U * Py A C U) ) / ((Py P U V * Py P U V * Py V C V + Py P U V * Py P V U * Py V C U + Py P U V * Py P V U * Py U C V + Py P V U * Py P V U * Py U C U) / ( Py U V U))) in *.
field.
split.
intro Ha.
rewrite Ha in *.
replace ( 0 / (Py U V U * Py U V U) ) with 0 in *.

*****
Ha : eq\n (Fplus\n (Fplus\n (Fplus (Fmult (Fmult (Py P U V) (Py P U V)) (Py V C V))\n (Fmult (Fmult (Py P U V) (Py P V U)) (Py V C U)))\n (Fmult (Fmult (Py P U V) (Py P V U)) (Py U C V)))\n (Fmult (Fmult (Py P V U) (Py P V U)) (Py U C U))) F0
T : not (eq (Fdiv F0 (Fmult (Py U V U) (Py U V U))) F0)
H3 : not (eq A Y)
H2 : not (eq C Y)
H1 : parallel A Y C Y
H0 : Col A U V
H : on_foot Y P U V
Y,P,U,V,A,C,D : Point
*****
eq F0 (Fdiv F0 (Fmult (Py U V U) (Py U V U)))
+++++
field.
-----
Theorem elim_ratio_on_foot_spec_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C Y -> C <> Y -> A <> Y -> A**Y / C**Y = (Py P U V * Py4 P C A V + Py P V U * Py4 P C A U) / (Py P U V * Py C V C + Py P V U * Py C U C - Py P U V * Py P V U).
Proof.
intros.
rewrite (elim_ratio_on_foot_a Y P U V).
idtac.
assert (T:= (elim_ratio_on_foot_a_invariant C Y H2)).
unfold Py4.
rewrite (elim_py_on_foot_right P C P U V) in *.
idtac.
rewrite (elim_py_on_foot_right A C P U V) in *.
idtac.
rewrite (pyth_simpl_4 C Y) in *.
rewrite (elim_py_on_foot_left_right C P U V Y) in *.
idtac.
replace (((Py P U V * Py P C V + Py P V U * Py P C U) / Py U V U - (Py P U V * Py A C V + Py P V U * Py A C U) / Py U V U) / ((Py P U V * Py P U V * Py V C V + Py P U V * Py P V U * Py V C U + Py P U V * Py P V U * Py U C V + Py P V U * Py P V U * Py U C U) / (Py U V U * Py U V U))) with (((Py P U V * Py P C V + Py P V U * Py P C U) - (Py P U V * Py A C V + Py P V U * Py A C U) ) / ((Py P U V * Py P U V * Py V C V + Py P U V * Py P V U * Py V C U + Py P U V * Py P V U * Py U C V + Py P V U * Py P V U * Py U C U) / ( Py U V U))) in *.
field.
split.
intro Ha.
rewrite Ha in *.
replace ( 0 / (Py U V U * Py U V U) ) with 0 in *.
field.

*****
Ha : eq\n (Fplus\n (Fplus\n (Fplus (Fmult (Fmult (Py P U V) (Py P U V)) (Py V C V))\n (Fmult (Fmult (Py P U V) (Py P V U)) (Py V C U)))\n (Fmult (Fmult (Py P U V) (Py P V U)) (Py U C V)))\n (Fmult (Fmult (Py P V U) (Py P V U)) (Py U C U))) F0
T : not (eq (Fdiv F0 (Fmult (Py U V U) (Py U V U))) F0)
H3 : not (eq A Y)
H2 : not (eq C Y)
H1 : parallel A Y C Y
H0 : Col A U V
H : on_foot Y P U V
Y,P,U,V,A,C,D : Point
*****
not (eq (Py U V U) F0)
+++++
unfold on_foot in H.
-----
Theorem elim_ratio_on_foot_spec_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C Y -> C <> Y -> A <> Y -> A**Y / C**Y = (Py P U V * Py4 P C A V + Py P V U * Py4 P C A U) / (Py P U V * Py C V C + Py P V U * Py C U C - Py P U V * Py P V U).
Proof.
intros.
rewrite (elim_ratio_on_foot_a Y P U V).
idtac.
assert (T:= (elim_ratio_on_foot_a_invariant C Y H2)).
unfold Py4.
rewrite (elim_py_on_foot_right P C P U V) in *.
idtac.
rewrite (elim_py_on_foot_right A C P U V) in *.
idtac.
rewrite (pyth_simpl_4 C Y) in *.
rewrite (elim_py_on_foot_left_right C P U V Y) in *.
idtac.
replace (((Py P U V * Py P C V + Py P V U * Py P C U) / Py U V U - (Py P U V * Py A C V + Py P V U * Py A C U) / Py U V U) / ((Py P U V * Py P U V * Py V C V + Py P U V * Py P V U * Py V C U + Py P U V * Py P V U * Py U C V + Py P V U * Py P V U * Py U C U) / (Py U V U * Py U V U))) with (((Py P U V * Py P C V + Py P V U * Py P C U) - (Py P U V * Py A C V + Py P V U * Py A C U) ) / ((Py P U V * Py P U V * Py V C V + Py P U V * Py P V U * Py V C U + Py P U V * Py P V U * Py U C V + Py P V U * Py P V U * Py U C U) / ( Py U V U))) in *.
field.
split.
intro Ha.
rewrite Ha in *.
replace ( 0 / (Py U V U * Py U V U) ) with 0 in *.
field.
unfold on_foot in H.

*****
Ha : eq\n (Fplus\n (Fplus\n (Fplus (Fmult (Fmult (Py P U V) (Py P U V)) (Py V C V))\n (Fmult (Fmult (Py P U V) (Py P V U)) (Py V C U)))\n (Fmult (Fmult (Py P U V) (Py P V U)) (Py U C V)))\n (Fmult (Fmult (Py P V U) (Py P V U)) (Py U C U))) F0
T : not (eq (Fdiv F0 (Fmult (Py U V U) (Py U V U))) F0)
H3 : not (eq A Y)
H2 : not (eq C Y)
H1 : parallel A Y C Y
H0 : Col A U V
H : and (perp Y P U V) (and (Col Y U V) (not (eq U V)))
Y,P,U,V,A,C,D : Point
*****
not (eq (Py U V U) F0)
+++++
use H.
-----
Theorem elim_ratio_on_foot_spec_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C Y -> C <> Y -> A <> Y -> A**Y / C**Y = (Py P U V * Py4 P C A V + Py P V U * Py4 P C A U) / (Py P U V * Py C V C + Py P V U * Py C U C - Py P U V * Py P V U).
Proof.
intros.
rewrite (elim_ratio_on_foot_a Y P U V).
idtac.
assert (T:= (elim_ratio_on_foot_a_invariant C Y H2)).
unfold Py4.
rewrite (elim_py_on_foot_right P C P U V) in *.
idtac.
rewrite (elim_py_on_foot_right A C P U V) in *.
idtac.
rewrite (pyth_simpl_4 C Y) in *.
rewrite (elim_py_on_foot_left_right C P U V Y) in *.
idtac.
replace (((Py P U V * Py P C V + Py P V U * Py P C U) / Py U V U - (Py P U V * Py A C V + Py P V U * Py A C U) / Py U V U) / ((Py P U V * Py P U V * Py V C V + Py P U V * Py P V U * Py V C U + Py P U V * Py P V U * Py U C V + Py P V U * Py P V U * Py U C U) / (Py U V U * Py U V U))) with (((Py P U V * Py P C V + Py P V U * Py P C U) - (Py P U V * Py A C V + Py P V U * Py A C U) ) / ((Py P U V * Py P U V * Py V C V + Py P U V * Py P V U * Py V C U + Py P U V * Py P V U * Py U C V + Py P V U * Py P V U * Py U C U) / ( Py U V U))) in *.
field.
split.
intro Ha.
rewrite Ha in *.
replace ( 0 / (Py U V U * Py U V U) ) with 0 in *.
field.
unfold on_foot in H.
use H.

*****
H7 : not (eq U V)
H6 : Col Y U V
H4 : perp Y P U V
Ha : eq\n (Fplus\n (Fplus\n (Fplus (Fmult (Fmult (Py P U V) (Py P U V)) (Py V C V))\n (Fmult (Fmult (Py P U V) (Py P V U)) (Py V C U)))\n (Fmult (Fmult (Py P U V) (Py P V U)) (Py U C V)))\n (Fmult (Fmult (Py P V U) (Py P V U)) (Py U C U))) F0
T : not (eq (Fdiv F0 (Fmult (Py U V U) (Py U V U))) F0)
H3 : not (eq A Y)
H2 : not (eq C Y)
H1 : parallel A Y C Y
H0 : Col A U V
Y,P,U,V,A,C,D : Point
*****
not (eq (Py U V U) F0)
+++++
auto with Geom.
-----
Theorem elim_ratio_on_foot_spec_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C Y -> C <> Y -> A <> Y -> A**Y / C**Y = (Py P U V * Py4 P C A V + Py P V U * Py4 P C A U) / (Py P U V * Py C V C + Py P V U * Py C U C - Py P U V * Py P V U).
Proof.
intros.
rewrite (elim_ratio_on_foot_a Y P U V).
idtac.
assert (T:= (elim_ratio_on_foot_a_invariant C Y H2)).
unfold Py4.
rewrite (elim_py_on_foot_right P C P U V) in *.
idtac.
rewrite (elim_py_on_foot_right A C P U V) in *.
idtac.
rewrite (pyth_simpl_4 C Y) in *.
rewrite (elim_py_on_foot_left_right C P U V Y) in *.

*****
T : not (eq (Py Y C Y) F0)
H3 : not (eq A Y)
H2 : not (eq C Y)
H1 : parallel A Y C Y
H0 : Col A U V
H : on_foot Y P U V
Y,P,U,V,A,C,D : Point
*****
on_foot Y P U V
+++++
auto .
-----
Theorem elim_ratio_on_foot_spec_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C Y -> C <> Y -> A <> Y -> A**Y / C**Y = (Py P U V * Py4 P C A V + Py P V U * Py4 P C A U) / (Py P U V * Py C V C + Py P V U * Py C U C - Py P U V * Py P V U).
Proof.
intros.
rewrite (elim_ratio_on_foot_a Y P U V).
idtac.
assert (T:= (elim_ratio_on_foot_a_invariant C Y H2)).
unfold Py4.
rewrite (elim_py_on_foot_right P C P U V) in *.
idtac.
rewrite (elim_py_on_foot_right A C P U V) in *.
idtac.
rewrite (pyth_simpl_4 C Y) in *.
rewrite (elim_py_on_foot_left_right C P U V Y) in *.

*****
T : not (eq (Py Y C Y) F0)
H3 : not (eq A Y)
H2 : not (eq C Y)
H1 : parallel A Y C Y
H0 : Col A U V
H : on_foot Y P U V
Y,P,U,V,A,C,D : Point
*****
on_foot Y P U V
+++++
auto .
-----
Theorem elim_ratio_on_foot_spec_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C Y -> C <> Y -> A <> Y -> A**Y / C**Y = (Py P U V * Py4 P C A V + Py P V U * Py4 P C A U) / (Py P U V * Py C V C + Py P V U * Py C U C - Py P U V * Py P V U).
Proof.
intros.
rewrite (elim_ratio_on_foot_a Y P U V).
idtac.
assert (T:= (elim_ratio_on_foot_a_invariant C Y H2)).
unfold Py4.
rewrite (elim_py_on_foot_right P C P U V) in *.
idtac.
rewrite (elim_py_on_foot_right A C P U V) in *.

*****
T : not (eq (Py C Y C) F0)
H3 : not (eq A Y)
H2 : not (eq C Y)
H1 : parallel A Y C Y
H0 : Col A U V
H : on_foot Y P U V
Y,P,U,V,A,C,D : Point
*****
on_foot Y P U V
+++++
auto .
-----
Theorem elim_ratio_on_foot_spec_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C Y -> C <> Y -> A <> Y -> A**Y / C**Y = (Py P U V * Py4 P C A V + Py P V U * Py4 P C A U) / (Py P U V * Py C V C + Py P V U * Py C U C - Py P U V * Py P V U).
Proof.
intros.
rewrite (elim_ratio_on_foot_a Y P U V).
idtac.
assert (T:= (elim_ratio_on_foot_a_invariant C Y H2)).
unfold Py4.
rewrite (elim_py_on_foot_right P C P U V) in *.

*****
T : not (eq (Py C Y C) F0)
H3 : not (eq A Y)
H2 : not (eq C Y)
H1 : parallel A Y C Y
H0 : Col A U V
H : on_foot Y P U V
Y,P,U,V,A,C,D : Point
*****
on_foot Y P U V
+++++
auto .
-----
Theorem elim_ratio_on_foot_spec_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C Y -> C <> Y -> A <> Y -> A**Y / C**Y = (Py P U V * Py4 P C A V + Py P V U * Py4 P C A U) / (Py P U V * Py C V C + Py P V U * Py C U C - Py P U V * Py P V U).
Proof.
intros.
rewrite (elim_ratio_on_foot_a Y P U V).

*****
H3 : not (eq A Y)
H2 : not (eq C Y)
H1 : parallel A Y C Y
H0 : Col A U V
H : on_foot Y P U V
Y,P,U,V,A,C,D : Point
*****
on_foot Y P U V
+++++
auto .
-----
Theorem elim_ratio_on_foot_spec_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C Y -> C <> Y -> A <> Y -> A**Y / C**Y = (Py P U V * Py4 P C A V + Py P V U * Py4 P C A U) / (Py P U V * Py C V C + Py P V U * Py C U C - Py P U V * Py P V U).
Proof.
intros.
rewrite (elim_ratio_on_foot_a Y P U V).

*****
H3 : not (eq A Y)
H2 : not (eq C Y)
H1 : parallel A Y C Y
H0 : Col A U V
H : on_foot Y P U V
Y,P,U,V,A,C,D : Point
*****
Col A U V
+++++
auto .
-----
Theorem elim_ratio_on_foot_spec_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C Y -> C <> Y -> A <> Y -> A**Y / C**Y = (Py P U V * Py4 P C A V + Py P V U * Py4 P C A U) / (Py P U V * Py C V C + Py P V U * Py C U C - Py P U V * Py P V U).
Proof.
intros.
rewrite (elim_ratio_on_foot_a Y P U V).

*****
H3 : not (eq A Y)
H2 : not (eq C Y)
H1 : parallel A Y C Y
H0 : Col A U V
H : on_foot Y P U V
Y,P,U,V,A,C,D : Point
*****
parallel A Y C Y
+++++
auto .
-----
Theorem elim_ratio_on_foot_spec_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C Y -> C <> Y -> A <> Y -> A**Y / C**Y = (Py P U V * Py4 P C A V + Py P V U * Py4 P C A U) / (Py P U V * Py C V C + Py P V U * Py C U C - Py P U V * Py P V U).
Proof.
intros.
rewrite (elim_ratio_on_foot_a Y P U V).

*****
H3 : not (eq A Y)
H2 : not (eq C Y)
H1 : parallel A Y C Y
H0 : Col A U V
H : on_foot Y P U V
Y,P,U,V,A,C,D : Point
*****
not (eq C Y)
+++++
auto .
-----
Theorem elim_ratio_on_foot_spec_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C Y -> C <> Y -> A <> Y -> A**Y / C**Y = (Py P U V * Py4 P C A V + Py P V U * Py4 P C A U) / (Py P U V * Py C V C + Py P V U * Py C U C - Py P U V * Py P V U).
Proof.
intros.
rewrite (elim_ratio_on_foot_a Y P U V).

*****
H3 : not (eq A Y)
H2 : not (eq C Y)
H1 : parallel A Y C Y
H0 : Col A U V
H : on_foot Y P U V
Y,P,U,V,A,C,D : Point
*****
not (eq A Y)
+++++
auto .
-----
Theorem elim_ratio_on_foot_spec_a : forall Y P U V A C D : Point, on_foot Y P U V -> Col A U V -> parallel A Y C Y -> C <> Y -> A <> Y -> A**Y / C**Y = (Py P U V * Py4 P C A V + Py P V U * Py4 P C A U) / (Py P U V * Py C V C + Py P V U * Py C U C - Py P U V * Py P V U).
Proof.
intros.
rewrite (elim_ratio_on_foot_a Y P U V).

*****

*****

+++++
Qed.
-----
Theorem elim_ratio_on_foot_b :\nforall Y P U V A C D : Point,\non_foot Y P U V ->\n~ Col A U V ->\nparallel A Y C D ->\nC <> D ->\nA**Y / C**D = S A U V / S4 C U D V.
-----
Theorem elim_ratio_on_foot_b : forall Y P U V A C D : Point, on_foot Y P U V -> ~ Col A U V -> parallel A Y C D -> C <> D -> A**Y / C**D = S A U V / S4 C U D V.

*****

*****
forall (Y P U V A C D : Point) (_ : on_foot Y P U V) (_ : not (Col A U V)) (_ : parallel A Y C D) (_ : not (eq C D)), eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (S A U V) (S4 C U D V))
+++++
Proof.
-----
Theorem elim_ratio_on_foot_b : forall Y P U V A C D : Point, on_foot Y P U V -> ~ Col A U V -> parallel A Y C D -> C <> D -> A**Y / C**D = S A U V / S4 C U D V.
Proof.

*****

*****
forall (Y P U V A C D : Point) (_ : on_foot Y P U V) (_ : not (Col A U V)) (_ : parallel A Y C D) (_ : not (eq C D)), eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (S A U V) (S4 C U D V))
+++++
intros.
-----
Theorem elim_ratio_on_foot_b : forall Y P U V A C D : Point, on_foot Y P U V -> ~ Col A U V -> parallel A Y C D -> C <> D -> A**Y / C**D = S A U V / S4 C U D V.
Proof.
intros.

*****
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A U V)
H : on_foot Y P U V
Y,P,U,V,A,C,D : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (S A U V) (S4 C U D V))
+++++
cases_equality Y P.
-----
Theorem elim_ratio_on_foot_b : forall Y P U V A C D : Point, on_foot Y P U V -> ~ Col A U V -> parallel A Y C D -> C <> D -> A**Y / C**D = S A U V / S4 C U D V.
Proof.
intros.
cases_equality Y P.

*****
H3 : eq Y P
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A U V)
H : on_foot Y P U V
Y,P,U,V,A,C,D : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (S A U V) (S4 C U D V))
+++++
subst Y.
-----
Theorem elim_ratio_on_foot_b : forall Y P U V A C D : Point, on_foot Y P U V -> ~ Col A U V -> parallel A Y C D -> C <> D -> A**Y / C**D = S A U V / S4 C U D V.
Proof.
intros.
cases_equality Y P.
subst Y.

*****
H2 : not (eq C D)
H1 : parallel A P C D
H0 : not (Col A U V)
H : on_foot P P U V
P,U,V,A,C,D : Point
*****
eq (Fdiv (DSeg A P) (DSeg C D)) (Fdiv (S A U V) (S4 C U D V))
+++++
unfold S4.
-----
Theorem elim_ratio_on_foot_b : forall Y P U V A C D : Point, on_foot Y P U V -> ~ Col A U V -> parallel A Y C D -> C <> D -> A**Y / C**D = S A U V / S4 C U D V.
Proof.
intros.
cases_equality Y P.
subst Y.
unfold S4.

*****
H2 : not (eq C D)
H1 : parallel A P C D
H0 : not (Col A U V)
H : on_foot P P U V
P,U,V,A,C,D : Point
*****
eq (Fdiv (DSeg A P) (DSeg C D)) (Fdiv (S A U V) (Fplus (S C U D) (S C D V)))
+++++
unfold on_foot in H.
-----
Theorem elim_ratio_on_foot_b : forall Y P U V A C D : Point, on_foot Y P U V -> ~ Col A U V -> parallel A Y C D -> C <> D -> A**Y / C**D = S A U V / S4 C U D V.
Proof.
intros.
cases_equality Y P.
subst Y.
unfold S4.
unfold on_foot in H.

*****
H2 : not (eq C D)
H1 : parallel A P C D
H0 : not (Col A U V)
H : and (perp P P U V) (and (Col P U V) (not (eq U V)))
P,U,V,A,C,D : Point
*****
eq (Fdiv (DSeg A P) (DSeg C D)) (Fdiv (S A U V) (Fplus (S C U D) (S C D V)))
+++++
use H.
-----
Theorem elim_ratio_on_foot_b : forall Y P U V A C D : Point, on_foot Y P U V -> ~ Col A U V -> parallel A Y C D -> C <> D -> A**Y / C**D = S A U V / S4 C U D V.
Proof.
intros.
cases_equality Y P.
subst Y.
unfold S4.
unfold on_foot in H.
use H.

*****
H6 : not (eq U V)
H5 : Col P U V
H3 : perp P P U V
H2 : not (eq C D)
H1 : parallel A P C D
H0 : not (Col A U V)
P,U,V,A,C,D : Point
*****
eq (Fdiv (DSeg A P) (DSeg C D)) (Fdiv (S A U V) (Fplus (S C U D) (S C D V)))
+++++
clear H3.
-----
Theorem elim_ratio_on_foot_b : forall Y P U V A C D : Point, on_foot Y P U V -> ~ Col A U V -> parallel A Y C D -> C <> D -> A**Y / C**D = S A U V / S4 C U D V.
Proof.
intros.
cases_equality Y P.
subst Y.
unfold S4.
unfold on_foot in H.
use H.
clear H3.

*****
H6 : not (eq U V)
H5 : Col P U V
H2 : not (eq C D)
H1 : parallel A P C D
H0 : not (Col A U V)
P,U,V,A,C,D : Point
*****
eq (Fdiv (DSeg A P) (DSeg C D)) (Fdiv (S A U V) (Fplus (S C U D) (S C D V)))
+++++
eapply elim_length_ratio_inter_ll_1 with (P:=A) (Q:=P).
-----
Theorem elim_ratio_on_foot_b : forall Y P U V A C D : Point, on_foot Y P U V -> ~ Col A U V -> parallel A Y C D -> C <> D -> A**Y / C**D = S A U V / S4 C U D V.
Proof.
intros.
cases_equality Y P.
subst Y.
unfold S4.
unfold on_foot in H.
use H.
clear H3.
eapply elim_length_ratio_inter_ll_1 with (P:=A) (Q:=P).

*****
H6 : not (eq U V)
H5 : Col P U V
H2 : not (eq C D)
H1 : parallel A P C D
H0 : not (Col A U V)
P,U,V,A,C,D : Point
*****
inter_ll P A P U V
+++++
auto with Geom.
-----
Theorem elim_ratio_on_foot_b : forall Y P U V A C D : Point, on_foot Y P U V -> ~ Col A U V -> parallel A Y C D -> C <> D -> A**Y / C**D = S A U V / S4 C U D V.
Proof.
intros.
cases_equality Y P.
subst Y.
unfold S4.
unfold on_foot in H.
use H.
clear H3.
eapply elim_length_ratio_inter_ll_1 with (P:=A) (Q:=P).
auto with Geom.

*****
H6 : not (eq U V)
H5 : Col P U V
H2 : not (eq C D)
H1 : parallel A P C D
H0 : not (Col A U V)
P,U,V,A,C,D : Point
*****
inter_ll P A P U V
+++++
unfold inter_ll.
-----
Theorem elim_ratio_on_foot_b : forall Y P U V A C D : Point, on_foot Y P U V -> ~ Col A U V -> parallel A Y C D -> C <> D -> A**Y / C**D = S A U V / S4 C U D V.
Proof.
intros.
cases_equality Y P.
subst Y.
unfold S4.
unfold on_foot in H.
use H.
clear H3.
eapply elim_length_ratio_inter_ll_1 with (P:=A) (Q:=P).
auto with Geom.
unfold inter_ll.

*****
H6 : not (eq U V)
H5 : Col P U V
H2 : not (eq C D)
H1 : parallel A P C D
H0 : not (Col A U V)
P,U,V,A,C,D : Point
*****
and (Col P A P) (and (Col P U V) (not (parallel A P U V)))
+++++
repeat split.
-----
Theorem elim_ratio_on_foot_b : forall Y P U V A C D : Point, on_foot Y P U V -> ~ Col A U V -> parallel A Y C D -> C <> D -> A**Y / C**D = S A U V / S4 C U D V.
Proof.
intros.
cases_equality Y P.
subst Y.
unfold S4.
unfold on_foot in H.
use H.
clear H3.
eapply elim_length_ratio_inter_ll_1 with (P:=A) (Q:=P).
auto with Geom.
unfold inter_ll.
repeat split.

*****
H6 : not (eq U V)
H5 : Col P U V
H2 : not (eq C D)
H1 : parallel A P C D
H0 : not (Col A U V)
P,U,V,A,C,D : Point
*****
Col P A P
+++++
auto with Geom.
-----
Theorem elim_ratio_on_foot_b : forall Y P U V A C D : Point, on_foot Y P U V -> ~ Col A U V -> parallel A Y C D -> C <> D -> A**Y / C**D = S A U V / S4 C U D V.
Proof.
intros.
cases_equality Y P.
subst Y.
unfold S4.
unfold on_foot in H.
use H.
clear H3.
eapply elim_length_ratio_inter_ll_1 with (P:=A) (Q:=P).
auto with Geom.
unfold inter_ll.
repeat split.

*****
H6 : not (eq U V)
H5 : Col P U V
H2 : not (eq C D)
H1 : parallel A P C D
H0 : not (Col A U V)
P,U,V,A,C,D : Point
*****
Col P U V
+++++
auto with Geom.
-----
Theorem elim_ratio_on_foot_b : forall Y P U V A C D : Point, on_foot Y P U V -> ~ Col A U V -> parallel A Y C D -> C <> D -> A**Y / C**D = S A U V / S4 C U D V.
Proof.
intros.
cases_equality Y P.
subst Y.
unfold S4.
unfold on_foot in H.
use H.
clear H3.
eapply elim_length_ratio_inter_ll_1 with (P:=A) (Q:=P).
auto with Geom.
unfold inter_ll.
repeat split.

*****
H6 : not (eq U V)
H5 : Col P U V
H2 : not (eq C D)
H1 : parallel A P C D
H0 : not (Col A U V)
P,U,V,A,C,D : Point
*****
not (parallel A P U V)
+++++
auto with Geom.
-----
Theorem elim_ratio_on_foot_b : forall Y P U V A C D : Point, on_foot Y P U V -> ~ Col A U V -> parallel A Y C D -> C <> D -> A**Y / C**D = S A U V / S4 C U D V.
Proof.
intros.
cases_equality Y P.
subst Y.
unfold S4.
unfold on_foot in H.
use H.
clear H3.
eapply elim_length_ratio_inter_ll_1 with (P:=A) (Q:=P).
auto with Geom.
unfold inter_ll.
repeat split.
auto with Geom.

*****
H6 : not (eq U V)
H5 : Col P U V
H2 : not (eq C D)
H1 : parallel A P C D
H0 : not (Col A U V)
P,U,V,A,C,D : Point
*****
not (parallel A P U V)
+++++
intro.
-----
Theorem elim_ratio_on_foot_b : forall Y P U V A C D : Point, on_foot Y P U V -> ~ Col A U V -> parallel A Y C D -> C <> D -> A**Y / C**D = S A U V / S4 C U D V.
Proof.
intros.
cases_equality Y P.
subst Y.
unfold S4.
unfold on_foot in H.
use H.
clear H3.
eapply elim_length_ratio_inter_ll_1 with (P:=A) (Q:=P).
auto with Geom.
unfold inter_ll.
repeat split.
auto with Geom.
intro.

*****
H : parallel A P U V
H6 : not (eq U V)
H5 : Col P U V
H2 : not (eq C D)
H1 : parallel A P C D
H0 : not (Col A U V)
P,U,V,A,C,D : Point
*****
False
+++++
assert (parallel V U P A).
-----
Theorem elim_ratio_on_foot_b : forall Y P U V A C D : Point, on_foot Y P U V -> ~ Col A U V -> parallel A Y C D -> C <> D -> A**Y / C**D = S A U V / S4 C U D V.
Proof.
intros.
cases_equality Y P.
subst Y.
unfold S4.
unfold on_foot in H.
use H.
clear H3.
eapply elim_length_ratio_inter_ll_1 with (P:=A) (Q:=P).
auto with Geom.
unfold inter_ll.
repeat split.
auto with Geom.
intro.
assert (parallel V U P A).

*****
H : parallel A P U V
H6 : not (eq U V)
H5 : Col P U V
H2 : not (eq C D)
H1 : parallel A P C D
H0 : not (Col A U V)
P,U,V,A,C,D : Point
*****
parallel V U P A
+++++
auto with Geom.
-----
Theorem elim_ratio_on_foot_b : forall Y P U V A C D : Point, on_foot Y P U V -> ~ Col A U V -> parallel A Y C D -> C <> D -> A**Y / C**D = S A U V / S4 C U D V.
Proof.
intros.
cases_equality Y P.
subst Y.
unfold S4.
unfold on_foot in H.
use H.
clear H3.
eapply elim_length_ratio_inter_ll_1 with (P:=A) (Q:=P).
auto with Geom.
unfold inter_ll.
repeat split.
auto with Geom.
intro.
assert (parallel V U P A).

*****
H3 : parallel V U P A
H : parallel A P U V
H6 : not (eq U V)
H5 : Col P U V
H2 : not (eq C D)
H1 : parallel A P C D
H0 : not (Col A U V)
P,U,V,A,C,D : Point
*****
False
+++++
idtac.
-----
Theorem elim_ratio_on_foot_b : forall Y P U V A C D : Point, on_foot Y P U V -> ~ Col A U V -> parallel A Y C D -> C <> D -> A**Y / C**D = S A U V / S4 C U D V.
Proof.
intros.
cases_equality Y P.
subst Y.
unfold S4.
unfold on_foot in H.
use H.
clear H3.
eapply elim_length_ratio_inter_ll_1 with (P:=A) (Q:=P).
auto with Geom.
unfold inter_ll.
repeat split.
auto with Geom.
intro.
assert (parallel V U P A).
idtac.

*****
H3 : parallel V U P A
H : parallel A P U V
H6 : not (eq U V)
H5 : Col P U V
H2 : not (eq C D)
H1 : parallel A P C D
H0 : not (Col A U V)
P,U,V,A,C,D : Point
*****
False
+++++
unfold parallel in H3.
-----
Theorem elim_ratio_on_foot_b : forall Y P U V A C D : Point, on_foot Y P U V -> ~ Col A U V -> parallel A Y C D -> C <> D -> A**Y / C**D = S A U V / S4 C U D V.
Proof.
intros.
cases_equality Y P.
subst Y.
unfold S4.
unfold on_foot in H.
use H.
clear H3.
eapply elim_length_ratio_inter_ll_1 with (P:=A) (Q:=P).
auto with Geom.
unfold inter_ll.
repeat split.
auto with Geom.
intro.
assert (parallel V U P A).
idtac.
unfold parallel in H3.

*****
H3 : eq (S4 V P U A) F0
H : parallel A P U V
H6 : not (eq U V)
H5 : Col P U V
H2 : not (eq C D)
H1 : parallel A P C D
H0 : not (Col A U V)
P,U,V,A,C,D : Point
*****
False
+++++
unfold S4 in H3.
-----
Theorem elim_ratio_on_foot_b : forall Y P U V A C D : Point, on_foot Y P U V -> ~ Col A U V -> parallel A Y C D -> C <> D -> A**Y / C**D = S A U V / S4 C U D V.
Proof.
intros.
cases_equality Y P.
subst Y.
unfold S4.
unfold on_foot in H.
use H.
clear H3.
eapply elim_length_ratio_inter_ll_1 with (P:=A) (Q:=P).
auto with Geom.
unfold inter_ll.
repeat split.
auto with Geom.
intro.
assert (parallel V U P A).
idtac.
unfold parallel in H3.
unfold S4 in H3.

*****
H3 : eq (Fplus (S V P U) (S V U A)) F0
H : parallel A P U V
H6 : not (eq U V)
H5 : Col P U V
H2 : not (eq C D)
H1 : parallel A P C D
H0 : not (Col A U V)
P,U,V,A,C,D : Point
*****
False
+++++
replace (S V P U) with (S P U V) in H3 by auto with Geom.
-----
Theorem elim_ratio_on_foot_b : forall Y P U V A C D : Point, on_foot Y P U V -> ~ Col A U V -> parallel A Y C D -> C <> D -> A**Y / C**D = S A U V / S4 C U D V.
Proof.
intros.
cases_equality Y P.
subst Y.
unfold S4.
unfold on_foot in H.
use H.
clear H3.
eapply elim_length_ratio_inter_ll_1 with (P:=A) (Q:=P).
auto with Geom.
unfold inter_ll.
repeat split.
auto with Geom.
intro.
assert (parallel V U P A).
idtac.
unfold parallel in H3.
unfold S4 in H3.
replace (S V P U) with (S P U V) in H3 by auto with Geom.

*****
H3 : eq (Fplus (S P U V) (S V U A)) F0
H : parallel A P U V
H6 : not (eq U V)
H5 : Col P U V
H2 : not (eq C D)
H1 : parallel A P C D
H0 : not (Col A U V)
P,U,V,A,C,D : Point
*****
False
+++++
rewrite H5 in H3.
-----
Theorem elim_ratio_on_foot_b : forall Y P U V A C D : Point, on_foot Y P U V -> ~ Col A U V -> parallel A Y C D -> C <> D -> A**Y / C**D = S A U V / S4 C U D V.
Proof.
intros.
cases_equality Y P.
subst Y.
unfold S4.
unfold on_foot in H.
use H.
clear H3.
eapply elim_length_ratio_inter_ll_1 with (P:=A) (Q:=P).
auto with Geom.
unfold inter_ll.
repeat split.
auto with Geom.
intro.
assert (parallel V U P A).
idtac.
unfold parallel in H3.
unfold S4 in H3.
replace (S V P U) with (S P U V) in H3 by auto with Geom.
rewrite H5 in H3.

*****
H3 : eq (Fplus F0 (S V U A)) F0
H : parallel A P U V
H6 : not (eq U V)
H5 : Col P U V
H2 : not (eq C D)
H1 : parallel A P C D
H0 : not (Col A U V)
P,U,V,A,C,D : Point
*****
False
+++++
basic_simpl.
-----
Theorem elim_ratio_on_foot_b : forall Y P U V A C D : Point, on_foot Y P U V -> ~ Col A U V -> parallel A Y C D -> C <> D -> A**Y / C**D = S A U V / S4 C U D V.
Proof.
intros.
cases_equality Y P.
subst Y.
unfold S4.
unfold on_foot in H.
use H.
clear H3.
eapply elim_length_ratio_inter_ll_1 with (P:=A) (Q:=P).
auto with Geom.
unfold inter_ll.
repeat split.
auto with Geom.
intro.
assert (parallel V U P A).
idtac.
unfold parallel in H3.
unfold S4 in H3.
replace (S V P U) with (S P U V) in H3 by auto with Geom.
rewrite H5 in H3.
basic_simpl.

*****
H3 : eq (S V U A) F0
H : parallel A P U V
H6 : not (eq U V)
H5 : Col P U V
H2 : not (eq C D)
H1 : parallel A P C D
H0 : not (Col A U V)
P,U,V,A,C,D : Point
*****
False
+++++
assert (Col A U V).
-----
Theorem elim_ratio_on_foot_b : forall Y P U V A C D : Point, on_foot Y P U V -> ~ Col A U V -> parallel A Y C D -> C <> D -> A**Y / C**D = S A U V / S4 C U D V.
Proof.
intros.
cases_equality Y P.
subst Y.
unfold S4.
unfold on_foot in H.
use H.
clear H3.
eapply elim_length_ratio_inter_ll_1 with (P:=A) (Q:=P).
auto with Geom.
unfold inter_ll.
repeat split.
auto with Geom.
intro.
assert (parallel V U P A).
idtac.
unfold parallel in H3.
unfold S4 in H3.
replace (S V P U) with (S P U V) in H3 by auto with Geom.
rewrite H5 in H3.
basic_simpl.
assert (Col A U V).

*****
H3 : eq (S V U A) F0
H : parallel A P U V
H6 : not (eq U V)
H5 : Col P U V
H2 : not (eq C D)
H1 : parallel A P C D
H0 : not (Col A U V)
P,U,V,A,C,D : Point
*****
Col A U V
+++++
auto with Geom.
-----
Theorem elim_ratio_on_foot_b : forall Y P U V A C D : Point, on_foot Y P U V -> ~ Col A U V -> parallel A Y C D -> C <> D -> A**Y / C**D = S A U V / S4 C U D V.
Proof.
intros.
cases_equality Y P.
subst Y.
unfold S4.
unfold on_foot in H.
use H.
clear H3.
eapply elim_length_ratio_inter_ll_1 with (P:=A) (Q:=P).
auto with Geom.
unfold inter_ll.
repeat split.
auto with Geom.
intro.
assert (parallel V U P A).
idtac.
unfold parallel in H3.
unfold S4 in H3.
replace (S V P U) with (S P U V) in H3 by auto with Geom.
rewrite H5 in H3.
basic_simpl.
assert (Col A U V).

*****
H4 : Col A U V
H3 : eq (S V U A) F0
H : parallel A P U V
H6 : not (eq U V)
H5 : Col P U V
H2 : not (eq C D)
H1 : parallel A P C D
H0 : not (Col A U V)
P,U,V,A,C,D : Point
*****
False
+++++
intuition.
-----
Theorem elim_ratio_on_foot_b : forall Y P U V A C D : Point, on_foot Y P U V -> ~ Col A U V -> parallel A Y C D -> C <> D -> A**Y / C**D = S A U V / S4 C U D V.
Proof.
intros.
cases_equality Y P.
subst Y.
unfold S4.
unfold on_foot in H.
use H.
clear H3.
eapply elim_length_ratio_inter_ll_1 with (P:=A) (Q:=P).

*****
H6 : not (eq U V)
H5 : Col P U V
H2 : not (eq C D)
H1 : parallel A P C D
H0 : not (Col A U V)
P,U,V,A,C,D : Point
*****
not (eq (S A U V) F0)
+++++
auto with Geom.
-----
Theorem elim_ratio_on_foot_b : forall Y P U V A C D : Point, on_foot Y P U V -> ~ Col A U V -> parallel A Y C D -> C <> D -> A**Y / C**D = S A U V / S4 C U D V.
Proof.
intros.
cases_equality Y P.
subst Y.
unfold S4.
unfold on_foot in H.
use H.
clear H3.
eapply elim_length_ratio_inter_ll_1 with (P:=A) (Q:=P).

*****
H6 : not (eq U V)
H5 : Col P U V
H2 : not (eq C D)
H1 : parallel A P C D
H0 : not (Col A U V)
P,U,V,A,C,D : Point
*****
not (eq C D)
+++++
auto with Geom.
-----
Theorem elim_ratio_on_foot_b : forall Y P U V A C D : Point, on_foot Y P U V -> ~ Col A U V -> parallel A Y C D -> C <> D -> A**Y / C**D = S A U V / S4 C U D V.
Proof.
intros.
cases_equality Y P.
subst Y.
unfold S4.
unfold on_foot in H.
use H.
clear H3.
eapply elim_length_ratio_inter_ll_1 with (P:=A) (Q:=P).

*****
H6 : not (eq U V)
H5 : Col P U V
H2 : not (eq C D)
H1 : parallel A P C D
H0 : not (Col A U V)
P,U,V,A,C,D : Point
*****
parallel A P C D
+++++
auto with Geom.
-----
Theorem elim_ratio_on_foot_b : forall Y P U V A C D : Point, on_foot Y P U V -> ~ Col A U V -> parallel A Y C D -> C <> D -> A**Y / C**D = S A U V / S4 C U D V.
Proof.
intros.
cases_equality Y P.

*****
H3 : not (eq Y P)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A U V)
H : on_foot Y P U V
Y,P,U,V,A,C,D : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (S A U V) (S4 C U D V))
+++++
eapply elim_length_ratio_inter_ll_1 with (P:=P) (Q:=Y).
-----
Theorem elim_ratio_on_foot_b : forall Y P U V A C D : Point, on_foot Y P U V -> ~ Col A U V -> parallel A Y C D -> C <> D -> A**Y / C**D = S A U V / S4 C U D V.
Proof.
intros.
cases_equality Y P.
eapply elim_length_ratio_inter_ll_1 with (P:=P) (Q:=Y).

*****
H3 : not (eq Y P)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A U V)
H : on_foot Y P U V
Y,P,U,V,A,C,D : Point
*****
inter_ll Y P Y U V
+++++
auto with Geom.
-----
Theorem elim_ratio_on_foot_b : forall Y P U V A C D : Point, on_foot Y P U V -> ~ Col A U V -> parallel A Y C D -> C <> D -> A**Y / C**D = S A U V / S4 C U D V.
Proof.
intros.
cases_equality Y P.
eapply elim_length_ratio_inter_ll_1 with (P:=P) (Q:=Y).
auto with Geom.

*****
H3 : not (eq Y P)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A U V)
H : on_foot Y P U V
Y,P,U,V,A,C,D : Point
*****
inter_ll Y P Y U V
+++++
unfold inter_ll.
-----
Theorem elim_ratio_on_foot_b : forall Y P U V A C D : Point, on_foot Y P U V -> ~ Col A U V -> parallel A Y C D -> C <> D -> A**Y / C**D = S A U V / S4 C U D V.
Proof.
intros.
cases_equality Y P.
eapply elim_length_ratio_inter_ll_1 with (P:=P) (Q:=Y).
auto with Geom.
unfold inter_ll.

*****
H3 : not (eq Y P)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A U V)
H : on_foot Y P U V
Y,P,U,V,A,C,D : Point
*****
and (Col Y P Y) (and (Col Y U V) (not (parallel P Y U V)))
+++++
unfold on_foot in *.
-----
Theorem elim_ratio_on_foot_b : forall Y P U V A C D : Point, on_foot Y P U V -> ~ Col A U V -> parallel A Y C D -> C <> D -> A**Y / C**D = S A U V / S4 C U D V.
Proof.
intros.
cases_equality Y P.
eapply elim_length_ratio_inter_ll_1 with (P:=P) (Q:=Y).
auto with Geom.
unfold inter_ll.
unfold on_foot in *.

*****
H3 : not (eq Y P)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A U V)
H : and (perp Y P U V) (and (Col Y U V) (not (eq U V)))
Y,P,U,V,A,C,D : Point
*****
and (Col Y P Y) (and (Col Y U V) (not (parallel P Y U V)))
+++++
use H.
-----
Theorem elim_ratio_on_foot_b : forall Y P U V A C D : Point, on_foot Y P U V -> ~ Col A U V -> parallel A Y C D -> C <> D -> A**Y / C**D = S A U V / S4 C U D V.
Proof.
intros.
cases_equality Y P.
eapply elim_length_ratio_inter_ll_1 with (P:=P) (Q:=Y).
auto with Geom.
unfold inter_ll.
unfold on_foot in *.
use H.

*****
H7 : not (eq U V)
H6 : Col Y U V
H4 : perp Y P U V
H3 : not (eq Y P)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A U V)
Y,P,U,V,A,C,D : Point
*****
and (Col Y P Y) (and (Col Y U V) (not (parallel P Y U V)))
+++++
repeat split.
-----
Theorem elim_ratio_on_foot_b : forall Y P U V A C D : Point, on_foot Y P U V -> ~ Col A U V -> parallel A Y C D -> C <> D -> A**Y / C**D = S A U V / S4 C U D V.
Proof.
intros.
cases_equality Y P.
eapply elim_length_ratio_inter_ll_1 with (P:=P) (Q:=Y).
auto with Geom.
unfold inter_ll.
unfold on_foot in *.
use H.
repeat split.

*****
H7 : not (eq U V)
H6 : Col Y U V
H4 : perp Y P U V
H3 : not (eq Y P)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A U V)
Y,P,U,V,A,C,D : Point
*****
Col Y P Y
+++++
auto with Geom.
-----
Theorem elim_ratio_on_foot_b : forall Y P U V A C D : Point, on_foot Y P U V -> ~ Col A U V -> parallel A Y C D -> C <> D -> A**Y / C**D = S A U V / S4 C U D V.
Proof.
intros.
cases_equality Y P.
eapply elim_length_ratio_inter_ll_1 with (P:=P) (Q:=Y).
auto with Geom.
unfold inter_ll.
unfold on_foot in *.
use H.
repeat split.

*****
H7 : not (eq U V)
H6 : Col Y U V
H4 : perp Y P U V
H3 : not (eq Y P)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A U V)
Y,P,U,V,A,C,D : Point
*****
Col Y U V
+++++
auto with Geom.
-----
Theorem elim_ratio_on_foot_b : forall Y P U V A C D : Point, on_foot Y P U V -> ~ Col A U V -> parallel A Y C D -> C <> D -> A**Y / C**D = S A U V / S4 C U D V.
Proof.
intros.
cases_equality Y P.
eapply elim_length_ratio_inter_ll_1 with (P:=P) (Q:=Y).
auto with Geom.
unfold inter_ll.
unfold on_foot in *.
use H.
repeat split.

*****
H7 : not (eq U V)
H6 : Col Y U V
H4 : perp Y P U V
H3 : not (eq Y P)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A U V)
Y,P,U,V,A,C,D : Point
*****
not (parallel P Y U V)
+++++
auto with Geom.
-----
Theorem elim_ratio_on_foot_b : forall Y P U V A C D : Point, on_foot Y P U V -> ~ Col A U V -> parallel A Y C D -> C <> D -> A**Y / C**D = S A U V / S4 C U D V.
Proof.
intros.
cases_equality Y P.
eapply elim_length_ratio_inter_ll_1 with (P:=P) (Q:=Y).
auto with Geom.
unfold inter_ll.
unfold on_foot in *.
use H.
repeat split.
auto with Geom.

*****
H7 : not (eq U V)
H6 : Col Y U V
H4 : perp Y P U V
H3 : not (eq Y P)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A U V)
Y,P,U,V,A,C,D : Point
*****
not (parallel P Y U V)
+++++
cut (~ parallel Y P U V).
-----
Theorem elim_ratio_on_foot_b : forall Y P U V A C D : Point, on_foot Y P U V -> ~ Col A U V -> parallel A Y C D -> C <> D -> A**Y / C**D = S A U V / S4 C U D V.
Proof.
intros.
cases_equality Y P.
eapply elim_length_ratio_inter_ll_1 with (P:=P) (Q:=Y).
auto with Geom.
unfold inter_ll.
unfold on_foot in *.
use H.
repeat split.
auto with Geom.
cut (~ parallel Y P U V).

*****
H7 : not (eq U V)
H6 : Col Y U V
H4 : perp Y P U V
H3 : not (eq Y P)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A U V)
Y,P,U,V,A,C,D : Point
*****
forall _ : not (parallel Y P U V), not (parallel P Y U V)
+++++
auto with Geom.
-----
Theorem elim_ratio_on_foot_b : forall Y P U V A C D : Point, on_foot Y P U V -> ~ Col A U V -> parallel A Y C D -> C <> D -> A**Y / C**D = S A U V / S4 C U D V.
Proof.
intros.
cases_equality Y P.
eapply elim_length_ratio_inter_ll_1 with (P:=P) (Q:=Y).
auto with Geom.
unfold inter_ll.
unfold on_foot in *.
use H.
repeat split.
auto with Geom.
cut (~ parallel Y P U V).

*****
H7 : not (eq U V)
H6 : Col Y U V
H4 : perp Y P U V
H3 : not (eq Y P)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A U V)
Y,P,U,V,A,C,D : Point
*****
not (parallel Y P U V)
+++++
apply perp_not_parallel.
-----
Theorem elim_ratio_on_foot_b : forall Y P U V A C D : Point, on_foot Y P U V -> ~ Col A U V -> parallel A Y C D -> C <> D -> A**Y / C**D = S A U V / S4 C U D V.
Proof.
intros.
cases_equality Y P.
eapply elim_length_ratio_inter_ll_1 with (P:=P) (Q:=Y).
auto with Geom.
unfold inter_ll.
unfold on_foot in *.
use H.
repeat split.
auto with Geom.
cut (~ parallel Y P U V).
apply perp_not_parallel.

*****
H7 : not (eq U V)
H6 : Col Y U V
H4 : perp Y P U V
H3 : not (eq Y P)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A U V)
Y,P,U,V,A,C,D : Point
*****
perp Y P U V
+++++
auto with Geom.
-----
Theorem elim_ratio_on_foot_b : forall Y P U V A C D : Point, on_foot Y P U V -> ~ Col A U V -> parallel A Y C D -> C <> D -> A**Y / C**D = S A U V / S4 C U D V.
Proof.
intros.
cases_equality Y P.
eapply elim_length_ratio_inter_ll_1 with (P:=P) (Q:=Y).
auto with Geom.
unfold inter_ll.
unfold on_foot in *.
use H.
repeat split.
auto with Geom.
cut (~ parallel Y P U V).
apply perp_not_parallel.

*****
H7 : not (eq U V)
H6 : Col Y U V
H4 : perp Y P U V
H3 : not (eq Y P)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A U V)
Y,P,U,V,A,C,D : Point
*****
not (eq Y P)
+++++
auto with Geom.
-----
Theorem elim_ratio_on_foot_b : forall Y P U V A C D : Point, on_foot Y P U V -> ~ Col A U V -> parallel A Y C D -> C <> D -> A**Y / C**D = S A U V / S4 C U D V.
Proof.
intros.
cases_equality Y P.
eapply elim_length_ratio_inter_ll_1 with (P:=P) (Q:=Y).
auto with Geom.
unfold inter_ll.
unfold on_foot in *.
use H.
repeat split.
auto with Geom.
cut (~ parallel Y P U V).
apply perp_not_parallel.

*****
H7 : not (eq U V)
H6 : Col Y U V
H4 : perp Y P U V
H3 : not (eq Y P)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A U V)
Y,P,U,V,A,C,D : Point
*****
not (eq U V)
+++++
auto with Geom.
-----
Theorem elim_ratio_on_foot_b : forall Y P U V A C D : Point, on_foot Y P U V -> ~ Col A U V -> parallel A Y C D -> C <> D -> A**Y / C**D = S A U V / S4 C U D V.
Proof.
intros.
cases_equality Y P.
eapply elim_length_ratio_inter_ll_1 with (P:=P) (Q:=Y).

*****
H3 : not (eq Y P)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A U V)
H : on_foot Y P U V
Y,P,U,V,A,C,D : Point
*****
not (eq (S A U V) F0)
+++++
auto with Geom.
-----
Theorem elim_ratio_on_foot_b : forall Y P U V A C D : Point, on_foot Y P U V -> ~ Col A U V -> parallel A Y C D -> C <> D -> A**Y / C**D = S A U V / S4 C U D V.
Proof.
intros.
cases_equality Y P.
eapply elim_length_ratio_inter_ll_1 with (P:=P) (Q:=Y).

*****
H3 : not (eq Y P)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A U V)
H : on_foot Y P U V
Y,P,U,V,A,C,D : Point
*****
not (eq C D)
+++++
auto with Geom.
-----
Theorem elim_ratio_on_foot_b : forall Y P U V A C D : Point, on_foot Y P U V -> ~ Col A U V -> parallel A Y C D -> C <> D -> A**Y / C**D = S A U V / S4 C U D V.
Proof.
intros.
cases_equality Y P.
eapply elim_length_ratio_inter_ll_1 with (P:=P) (Q:=Y).

*****
H3 : not (eq Y P)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A U V)
H : on_foot Y P U V
Y,P,U,V,A,C,D : Point
*****
parallel A Y C D
+++++
auto with Geom.
-----
Theorem elim_ratio_on_foot_b : forall Y P U V A C D : Point, on_foot Y P U V -> ~ Col A U V -> parallel A Y C D -> C <> D -> A**Y / C**D = S A U V / S4 C U D V.
Proof.
intros.
cases_equality Y P.

*****

*****

+++++
Qed.
-----
Theorem elim_ratio_on_foot_spec_b :\nforall Y P U V A C : Point,\non_foot Y P U V ->\n~ Col A U V ->\nparallel A Y C Y ->\nC <> Y ->\nA**Y / C**Y = S A U V / S C U V.
-----
Theorem elim_ratio_on_foot_spec_b : forall Y P U V A C : Point, on_foot Y P U V -> ~ Col A U V -> parallel A Y C Y -> C <> Y -> A**Y / C**Y = S A U V / S C U V.

*****

*****
forall (Y P U V A C : Point) (_ : on_foot Y P U V) (_ : not (Col A U V)) (_ : parallel A Y C Y) (_ : not (eq C Y)), eq (Fdiv (DSeg A Y) (DSeg C Y)) (Fdiv (S A U V) (S C U V))
+++++
Proof.
-----
Theorem elim_ratio_on_foot_spec_b : forall Y P U V A C : Point, on_foot Y P U V -> ~ Col A U V -> parallel A Y C Y -> C <> Y -> A**Y / C**Y = S A U V / S C U V.
Proof.

*****

*****
forall (Y P U V A C : Point) (_ : on_foot Y P U V) (_ : not (Col A U V)) (_ : parallel A Y C Y) (_ : not (eq C Y)), eq (Fdiv (DSeg A Y) (DSeg C Y)) (Fdiv (S A U V) (S C U V))
+++++
intros.
-----
Theorem elim_ratio_on_foot_spec_b : forall Y P U V A C : Point, on_foot Y P U V -> ~ Col A U V -> parallel A Y C Y -> C <> Y -> A**Y / C**Y = S A U V / S C U V.
Proof.
intros.

*****
H2 : not (eq C Y)
H1 : parallel A Y C Y
H0 : not (Col A U V)
H : on_foot Y P U V
Y,P,U,V,A,C : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C Y)) (Fdiv (S A U V) (S C U V))
+++++
rewrite (elim_ratio_on_foot_b Y P U V A C).
-----
Theorem elim_ratio_on_foot_spec_b : forall Y P U V A C : Point, on_foot Y P U V -> ~ Col A U V -> parallel A Y C Y -> C <> Y -> A**Y / C**Y = S A U V / S C U V.
Proof.
intros.
rewrite (elim_ratio_on_foot_b Y P U V A C).

*****
H2 : not (eq C Y)
H1 : parallel A Y C Y
H0 : not (Col A U V)
H : on_foot Y P U V
Y,P,U,V,A,C : Point
*****
eq (Fdiv (S A U V) (S4 C U Y V)) (Fdiv (S A U V) (S C U V))
+++++
idtac.
-----
Theorem elim_ratio_on_foot_spec_b : forall Y P U V A C : Point, on_foot Y P U V -> ~ Col A U V -> parallel A Y C Y -> C <> Y -> A**Y / C**Y = S A U V / S C U V.
Proof.
intros.
rewrite (elim_ratio_on_foot_b Y P U V A C).
idtac.

*****
H2 : not (eq C Y)
H1 : parallel A Y C Y
H0 : not (Col A U V)
H : on_foot Y P U V
Y,P,U,V,A,C : Point
*****
eq (Fdiv (S A U V) (S4 C U Y V)) (Fdiv (S A U V) (S C U V))
+++++
unfold S4.
-----
Theorem elim_ratio_on_foot_spec_b : forall Y P U V A C : Point, on_foot Y P U V -> ~ Col A U V -> parallel A Y C Y -> C <> Y -> A**Y / C**Y = S A U V / S C U V.
Proof.
intros.
rewrite (elim_ratio_on_foot_b Y P U V A C).
idtac.
unfold S4.

*****
H2 : not (eq C Y)
H1 : parallel A Y C Y
H0 : not (Col A U V)
H : on_foot Y P U V
Y,P,U,V,A,C : Point
*****
eq (Fdiv (S A U V) (Fplus (S C U Y) (S C Y V))) (Fdiv (S A U V) (S C U V))
+++++
replace (S C Y V) with (S V C Y) by auto with Geom.
-----
Theorem elim_ratio_on_foot_spec_b : forall Y P U V A C : Point, on_foot Y P U V -> ~ Col A U V -> parallel A Y C Y -> C <> Y -> A**Y / C**Y = S A U V / S C U V.
Proof.
intros.
rewrite (elim_ratio_on_foot_b Y P U V A C).
idtac.
unfold S4.
replace (S C Y V) with (S V C Y) by auto with Geom.

*****
H2 : not (eq C Y)
H1 : parallel A Y C Y
H0 : not (Col A U V)
H : on_foot Y P U V
Y,P,U,V,A,C : Point
*****
eq (Fdiv (S A U V) (Fplus (S C U Y) (S V C Y))) (Fdiv (S A U V) (S C U V))
+++++
rewrite (elim_area_on_foot C U P U V Y).
-----
Theorem elim_ratio_on_foot_spec_b : forall Y P U V A C : Point, on_foot Y P U V -> ~ Col A U V -> parallel A Y C Y -> C <> Y -> A**Y / C**Y = S A U V / S C U V.
Proof.
intros.
rewrite (elim_ratio_on_foot_b Y P U V A C).
idtac.
unfold S4.
replace (S C Y V) with (S V C Y) by auto with Geom.
rewrite (elim_area_on_foot C U P U V Y).

*****
H2 : not (eq C Y)
H1 : parallel A Y C Y
H0 : not (Col A U V)
H : on_foot Y P U V
Y,P,U,V,A,C : Point
*****
eq (Fdiv (S A U V) (Fplus (Fdiv (Fplus (Fmult (Py P U V) (S C U V)) (Fmult (Py P V U) (S C U U))) (Py U V U)) (S V C Y))) (Fdiv (S A U V) (S C U V))
+++++
idtac.
-----
Theorem elim_ratio_on_foot_spec_b : forall Y P U V A C : Point, on_foot Y P U V -> ~ Col A U V -> parallel A Y C Y -> C <> Y -> A**Y / C**Y = S A U V / S C U V.
Proof.
intros.
rewrite (elim_ratio_on_foot_b Y P U V A C).
idtac.
unfold S4.
replace (S C Y V) with (S V C Y) by auto with Geom.
rewrite (elim_area_on_foot C U P U V Y).
idtac.

*****
H2 : not (eq C Y)
H1 : parallel A Y C Y
H0 : not (Col A U V)
H : on_foot Y P U V
Y,P,U,V,A,C : Point
*****
eq (Fdiv (S A U V) (Fplus (Fdiv (Fplus (Fmult (Py P U V) (S C U V)) (Fmult (Py P V U) (S C U U))) (Py U V U)) (S V C Y))) (Fdiv (S A U V) (S C U V))
+++++
rewrite (elim_area_on_foot V C P U V Y).
-----
Theorem elim_ratio_on_foot_spec_b : forall Y P U V A C : Point, on_foot Y P U V -> ~ Col A U V -> parallel A Y C Y -> C <> Y -> A**Y / C**Y = S A U V / S C U V.
Proof.
intros.
rewrite (elim_ratio_on_foot_b Y P U V A C).
idtac.
unfold S4.
replace (S C Y V) with (S V C Y) by auto with Geom.
rewrite (elim_area_on_foot C U P U V Y).
idtac.
rewrite (elim_area_on_foot V C P U V Y).

*****
H2 : not (eq C Y)
H1 : parallel A Y C Y
H0 : not (Col A U V)
H : on_foot Y P U V
Y,P,U,V,A,C : Point
*****
eq (Fdiv (S A U V) (Fplus (Fdiv (Fplus (Fmult (Py P U V) (S C U V)) (Fmult (Py P V U) (S C U U))) (Py U V U)) (Fdiv (Fplus (Fmult (Py P U V) (S V C V)) (Fmult (Py P V U) (S V C U))) (Py U V U)))) (Fdiv (S A U V) (S C U V))
+++++
idtac.
-----
Theorem elim_ratio_on_foot_spec_b : forall Y P U V A C : Point, on_foot Y P U V -> ~ Col A U V -> parallel A Y C Y -> C <> Y -> A**Y / C**Y = S A U V / S C U V.
Proof.
intros.
rewrite (elim_ratio_on_foot_b Y P U V A C).
idtac.
unfold S4.
replace (S C Y V) with (S V C Y) by auto with Geom.
rewrite (elim_area_on_foot C U P U V Y).
idtac.
rewrite (elim_area_on_foot V C P U V Y).
idtac.

*****
H2 : not (eq C Y)
H1 : parallel A Y C Y
H0 : not (Col A U V)
H : on_foot Y P U V
Y,P,U,V,A,C : Point
*****
eq (Fdiv (S A U V) (Fplus (Fdiv (Fplus (Fmult (Py P U V) (S C U V)) (Fmult (Py P V U) (S C U U))) (Py U V U)) (Fdiv (Fplus (Fmult (Py P U V) (S V C V)) (Fmult (Py P V U) (S V C U))) (Py U V U)))) (Fdiv (S A U V) (S C U V))
+++++
basic_simpl.
-----
Theorem elim_ratio_on_foot_spec_b : forall Y P U V A C : Point, on_foot Y P U V -> ~ Col A U V -> parallel A Y C Y -> C <> Y -> A**Y / C**Y = S A U V / S C U V.
Proof.
intros.
rewrite (elim_ratio_on_foot_b Y P U V A C).
idtac.
unfold S4.
replace (S C Y V) with (S V C Y) by auto with Geom.
rewrite (elim_area_on_foot C U P U V Y).
idtac.
rewrite (elim_area_on_foot V C P U V Y).
idtac.
basic_simpl.

*****
H2 : not (eq C Y)
H1 : parallel A Y C Y
H0 : not (Col A U V)
H : on_foot Y P U V
Y,P,U,V,A,C : Point
*****
eq (Fdiv (S A U V) (Fplus (Fdiv (Fmult (Py P U V) (S C U V)) (Py U V U)) (Fdiv (Fmult (Py P V U) (S V C U)) (Py U V U)))) (Fdiv (S A U V) (S C U V))
+++++
uniformize_signed_areas.
-----
Theorem elim_ratio_on_foot_spec_b : forall Y P U V A C : Point, on_foot Y P U V -> ~ Col A U V -> parallel A Y C Y -> C <> Y -> A**Y / C**Y = S A U V / S C U V.
Proof.
intros.
rewrite (elim_ratio_on_foot_b Y P U V A C).
idtac.
unfold S4.
replace (S C Y V) with (S V C Y) by auto with Geom.
rewrite (elim_area_on_foot C U P U V Y).
idtac.
rewrite (elim_area_on_foot V C P U V Y).
idtac.
basic_simpl.
uniformize_signed_areas.

*****
H2 : not (eq C Y)
H1 : parallel A Y C Y
H0 : not (Col A U V)
H : on_foot Y P U V
Y,P,U,V,A,C : Point
*****
eq (Fdiv (S A U V) (Fplus (Fdiv (Fmult (Py P U V) (S C U V)) (Py U V U)) (Fdiv (Fmult (Py P V U) (S C U V)) (Py U V U)))) (Fdiv (S A U V) (S C U V))
+++++
replace (Py P U V * S C U V / Py U V U + Py P V U * S C U V / Py U V U) with (S C U V).
-----
Theorem elim_ratio_on_foot_spec_b : forall Y P U V A C : Point, on_foot Y P U V -> ~ Col A U V -> parallel A Y C Y -> C <> Y -> A**Y / C**Y = S A U V / S C U V.
Proof.
intros.
rewrite (elim_ratio_on_foot_b Y P U V A C).
idtac.
unfold S4.
replace (S C Y V) with (S V C Y) by auto with Geom.
rewrite (elim_area_on_foot C U P U V Y).
idtac.
rewrite (elim_area_on_foot V C P U V Y).
idtac.
basic_simpl.
uniformize_signed_areas.
replace (Py P U V * S C U V / Py U V U + Py P V U * S C U V / Py U V U) with (S C U V).

*****
H2 : not (eq C Y)
H1 : parallel A Y C Y
H0 : not (Col A U V)
H : on_foot Y P U V
Y,P,U,V,A,C : Point
*****
eq (Fdiv (S A U V) (S C U V)) (Fdiv (S A U V) (S C U V))
+++++
trivial.
-----
Theorem elim_ratio_on_foot_spec_b : forall Y P U V A C : Point, on_foot Y P U V -> ~ Col A U V -> parallel A Y C Y -> C <> Y -> A**Y / C**Y = S A U V / S C U V.
Proof.
intros.
rewrite (elim_ratio_on_foot_b Y P U V A C).
idtac.
unfold S4.
replace (S C Y V) with (S V C Y) by auto with Geom.
rewrite (elim_area_on_foot C U P U V Y).
idtac.
rewrite (elim_area_on_foot V C P U V Y).
idtac.
basic_simpl.
uniformize_signed_areas.
replace (Py P U V * S C U V / Py U V U + Py P V U * S C U V / Py U V U) with (S C U V).

*****
H2 : not (eq C Y)
H1 : parallel A Y C Y
H0 : not (Col A U V)
H : on_foot Y P U V
Y,P,U,V,A,C : Point
*****
eq (S C U V) (Fplus (Fdiv (Fmult (Py P U V) (S C U V)) (Py U V U)) (Fdiv (Fmult (Py P V U) (S C U V)) (Py U V U)))
+++++
unfold Py.
-----
Theorem elim_ratio_on_foot_spec_b : forall Y P U V A C : Point, on_foot Y P U V -> ~ Col A U V -> parallel A Y C Y -> C <> Y -> A**Y / C**Y = S A U V / S C U V.
Proof.
intros.
rewrite (elim_ratio_on_foot_b Y P U V A C).
idtac.
unfold S4.
replace (S C Y V) with (S V C Y) by auto with Geom.
rewrite (elim_area_on_foot C U P U V Y).
idtac.
rewrite (elim_area_on_foot V C P U V Y).
idtac.
basic_simpl.
uniformize_signed_areas.
replace (Py P U V * S C U V / Py U V U + Py P V U * S C U V / Py U V U) with (S C U V).
unfold Py.

*****
H2 : not (eq C Y)
H1 : parallel A Y C Y
H0 : not (Col A U V)
H : on_foot Y P U V
Y,P,U,V,A,C : Point
*****
eq (S C U V) (Fplus (Fdiv (Fmult (Fminus (Fplus (Fmult (DSeg P U) (DSeg P U)) (Fmult (DSeg U V) (DSeg U V))) (Fmult (DSeg P V) (DSeg P V))) (S C U V)) (Fminus (Fplus (Fmult (DSeg U V) (DSeg U V)) (Fmult (DSeg V U) (DSeg V U))) (Fmult (DSeg U U) (DSeg U U)))) (Fdiv (Fmult (Fminus (Fplus (Fmult (DSeg P V) (DSeg P V)) (Fmult (DSeg V U) (DSeg V U))) (Fmult (DSeg P U) (DSeg P U))) (S C U V)) (Fminus (Fplus (Fmult (DSeg U V) (DSeg U V)) (Fmult (DSeg V U) (DSeg V U))) (Fmult (DSeg U U) (DSeg U U)))))
+++++
uniformize_dir_seg.
-----
Theorem elim_ratio_on_foot_spec_b : forall Y P U V A C : Point, on_foot Y P U V -> ~ Col A U V -> parallel A Y C Y -> C <> Y -> A**Y / C**Y = S A U V / S C U V.
Proof.
intros.
rewrite (elim_ratio_on_foot_b Y P U V A C).
idtac.
unfold S4.
replace (S C Y V) with (S V C Y) by auto with Geom.
rewrite (elim_area_on_foot C U P U V Y).
idtac.
rewrite (elim_area_on_foot V C P U V Y).
idtac.
basic_simpl.
uniformize_signed_areas.
replace (Py P U V * S C U V / Py U V U + Py P V U * S C U V / Py U V U) with (S C U V).
unfold Py.
uniformize_dir_seg.

*****
H2 : not (eq C Y)
H1 : parallel A Y C Y
H0 : not (Col A U V)
H : on_foot Y P U V
Y,P,U,V,A,C : Point
*****
eq (S C U V) (Fplus (Fdiv (Fmult (Fminus (Fplus (Fmult (DSeg P U) (DSeg P U)) (Fmult (DSeg U V) (DSeg U V))) (Fmult (DSeg P V) (DSeg P V))) (S C U V)) (Fminus (Fplus (Fmult (DSeg U V) (DSeg U V)) (Fmult (Fopp (DSeg U V)) (Fopp (DSeg U V)))) (Fmult (DSeg U U) (DSeg U U)))) (Fdiv (Fmult (Fminus (Fplus (Fmult (DSeg P V) (DSeg P V)) (Fmult (Fopp (DSeg U V)) (Fopp (DSeg U V)))) (Fmult (DSeg P U) (DSeg P U))) (S C U V)) (Fminus (Fplus (Fmult (DSeg U V) (DSeg U V)) (Fmult (Fopp (DSeg U V)) (Fopp (DSeg U V)))) (Fmult (DSeg U U) (DSeg U U)))))
+++++
basic_simpl.
-----
Theorem elim_ratio_on_foot_spec_b : forall Y P U V A C : Point, on_foot Y P U V -> ~ Col A U V -> parallel A Y C Y -> C <> Y -> A**Y / C**Y = S A U V / S C U V.
Proof.
intros.
rewrite (elim_ratio_on_foot_b Y P U V A C).
idtac.
unfold S4.
replace (S C Y V) with (S V C Y) by auto with Geom.
rewrite (elim_area_on_foot C U P U V Y).
idtac.
rewrite (elim_area_on_foot V C P U V Y).
idtac.
basic_simpl.
uniformize_signed_areas.
replace (Py P U V * S C U V / Py U V U + Py P V U * S C U V / Py U V U) with (S C U V).
unfold Py.
uniformize_dir_seg.
basic_simpl.

*****
H2 : not (eq C Y)
H1 : parallel A Y C Y
H0 : not (Col A U V)
H : on_foot Y P U V
Y,P,U,V,A,C : Point
*****
eq (S C U V) (Fplus (Fdiv (Fmult (Fminus (Fplus (Fmult (DSeg P U) (DSeg P U)) (Fmult (DSeg U V) (DSeg U V))) (Fmult (DSeg P V) (DSeg P V))) (S C U V)) (Fplus (Fmult (DSeg U V) (DSeg U V)) (Fmult (DSeg U V) (DSeg U V)))) (Fdiv (Fmult (Fminus (Fplus (Fmult (DSeg P V) (DSeg P V)) (Fmult (DSeg U V) (DSeg U V))) (Fmult (DSeg P U) (DSeg P U))) (S C U V)) (Fplus (Fmult (DSeg U V) (DSeg U V)) (Fmult (DSeg U V) (DSeg U V)))))
+++++
field.
-----
Theorem elim_ratio_on_foot_spec_b : forall Y P U V A C : Point, on_foot Y P U V -> ~ Col A U V -> parallel A Y C Y -> C <> Y -> A**Y / C**Y = S A U V / S C U V.
Proof.
intros.
rewrite (elim_ratio_on_foot_b Y P U V A C).
idtac.
unfold S4.
replace (S C Y V) with (S V C Y) by auto with Geom.
rewrite (elim_area_on_foot C U P U V Y).
idtac.
rewrite (elim_area_on_foot V C P U V Y).
idtac.
basic_simpl.
uniformize_signed_areas.
replace (Py P U V * S C U V / Py U V U + Py P V U * S C U V / Py U V U) with (S C U V).
unfold Py.
uniformize_dir_seg.
basic_simpl.
field.

*****
H2 : not (eq C Y)
H1 : parallel A Y C Y
H0 : not (Col A U V)
H : on_foot Y P U V
Y,P,U,V,A,C : Point
*****
not (eq (Fplus (Fmult (DSeg U V) (DSeg U V)) (Fmult (DSeg U V) (DSeg U V))) F0)
+++++
replace (U ** V * U ** V + U ** V * U ** V) with (2*U ** V * U ** V) by ring.
-----
Theorem elim_ratio_on_foot_spec_b : forall Y P U V A C : Point, on_foot Y P U V -> ~ Col A U V -> parallel A Y C Y -> C <> Y -> A**Y / C**Y = S A U V / S C U V.
Proof.
intros.
rewrite (elim_ratio_on_foot_b Y P U V A C).
idtac.
unfold S4.
replace (S C Y V) with (S V C Y) by auto with Geom.
rewrite (elim_area_on_foot C U P U V Y).
idtac.
rewrite (elim_area_on_foot V C P U V Y).
idtac.
basic_simpl.
uniformize_signed_areas.
replace (Py P U V * S C U V / Py U V U + Py P V U * S C U V / Py U V U) with (S C U V).
unfold Py.
uniformize_dir_seg.
basic_simpl.
field.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U ** V * U ** V) by ring.

*****
H2 : not (eq C Y)
H1 : parallel A Y C Y
H0 : not (Col A U V)
H : on_foot Y P U V
Y,P,U,V,A,C : Point
*****
not (eq (Fmult (Fmult (Fplus F1 F1) (DSeg U V)) (DSeg U V)) F0)
+++++
unfold on_foot in H.
-----
Theorem elim_ratio_on_foot_spec_b : forall Y P U V A C : Point, on_foot Y P U V -> ~ Col A U V -> parallel A Y C Y -> C <> Y -> A**Y / C**Y = S A U V / S C U V.
Proof.
intros.
rewrite (elim_ratio_on_foot_b Y P U V A C).
idtac.
unfold S4.
replace (S C Y V) with (S V C Y) by auto with Geom.
rewrite (elim_area_on_foot C U P U V Y).
idtac.
rewrite (elim_area_on_foot V C P U V Y).
idtac.
basic_simpl.
uniformize_signed_areas.
replace (Py P U V * S C U V / Py U V U + Py P V U * S C U V / Py U V U) with (S C U V).
unfold Py.
uniformize_dir_seg.
basic_simpl.
field.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U ** V * U ** V) by ring.
unfold on_foot in H.

*****
H2 : not (eq C Y)
H1 : parallel A Y C Y
H0 : not (Col A U V)
H : and (perp Y P U V) (and (Col Y U V) (not (eq U V)))
Y,P,U,V,A,C : Point
*****
not (eq (Fmult (Fmult (Fplus F1 F1) (DSeg U V)) (DSeg U V)) F0)
+++++
decompose [and] H.
-----
Theorem elim_ratio_on_foot_spec_b : forall Y P U V A C : Point, on_foot Y P U V -> ~ Col A U V -> parallel A Y C Y -> C <> Y -> A**Y / C**Y = S A U V / S C U V.
Proof.
intros.
rewrite (elim_ratio_on_foot_b Y P U V A C).
idtac.
unfold S4.
replace (S C Y V) with (S V C Y) by auto with Geom.
rewrite (elim_area_on_foot C U P U V Y).
idtac.
rewrite (elim_area_on_foot V C P U V Y).
idtac.
basic_simpl.
uniformize_signed_areas.
replace (Py P U V * S C U V / Py U V U + Py P V U * S C U V / Py U V U) with (S C U V).
unfold Py.
uniformize_dir_seg.
basic_simpl.
field.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U ** V * U ** V) by ring.
unfold on_foot in H.
decompose [and] H.

*****
H6 : not (eq U V)
H5 : Col Y U V
H3 : perp Y P U V
H2 : not (eq C Y)
H1 : parallel A Y C Y
H0 : not (Col A U V)
H : and (perp Y P U V) (and (Col Y U V) (not (eq U V)))
Y,P,U,V,A,C : Point
*****
not (eq (Fmult (Fmult (Fplus F1 F1) (DSeg U V)) (DSeg U V)) F0)
+++++
repeat (apply nonzeromult).
-----
Theorem elim_ratio_on_foot_spec_b : forall Y P U V A C : Point, on_foot Y P U V -> ~ Col A U V -> parallel A Y C Y -> C <> Y -> A**Y / C**Y = S A U V / S C U V.
Proof.
intros.
rewrite (elim_ratio_on_foot_b Y P U V A C).
idtac.
unfold S4.
replace (S C Y V) with (S V C Y) by auto with Geom.
rewrite (elim_area_on_foot C U P U V Y).
idtac.
rewrite (elim_area_on_foot V C P U V Y).
idtac.
basic_simpl.
uniformize_signed_areas.
replace (Py P U V * S C U V / Py U V U + Py P V U * S C U V / Py U V U) with (S C U V).
unfold Py.
uniformize_dir_seg.
basic_simpl.
field.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U ** V * U ** V) by ring.
unfold on_foot in H.
decompose [and] H.
repeat (apply nonzeromult).

*****
H6 : not (eq U V)
H5 : Col Y U V
H3 : perp Y P U V
H2 : not (eq C Y)
H1 : parallel A Y C Y
H0 : not (Col A U V)
H : and (perp Y P U V) (and (Col Y U V) (not (eq U V)))
Y,P,U,V,A,C : Point
*****
not (eq (Fplus F1 F1) F0)
+++++
auto with Geom.
-----
Theorem elim_ratio_on_foot_spec_b : forall Y P U V A C : Point, on_foot Y P U V -> ~ Col A U V -> parallel A Y C Y -> C <> Y -> A**Y / C**Y = S A U V / S C U V.
Proof.
intros.
rewrite (elim_ratio_on_foot_b Y P U V A C).
idtac.
unfold S4.
replace (S C Y V) with (S V C Y) by auto with Geom.
rewrite (elim_area_on_foot C U P U V Y).
idtac.
rewrite (elim_area_on_foot V C P U V Y).
idtac.
basic_simpl.
uniformize_signed_areas.
replace (Py P U V * S C U V / Py U V U + Py P V U * S C U V / Py U V U) with (S C U V).
unfold Py.
uniformize_dir_seg.
basic_simpl.
field.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U ** V * U ** V) by ring.
unfold on_foot in H.
decompose [and] H.
repeat (apply nonzeromult).

*****
H6 : not (eq U V)
H5 : Col Y U V
H3 : perp Y P U V
H2 : not (eq C Y)
H1 : parallel A Y C Y
H0 : not (Col A U V)
H : and (perp Y P U V) (and (Col Y U V) (not (eq U V)))
Y,P,U,V,A,C : Point
*****
not (eq (DSeg U V) F0)
+++++
auto with Geom.
-----
Theorem elim_ratio_on_foot_spec_b : forall Y P U V A C : Point, on_foot Y P U V -> ~ Col A U V -> parallel A Y C Y -> C <> Y -> A**Y / C**Y = S A U V / S C U V.
Proof.
intros.
rewrite (elim_ratio_on_foot_b Y P U V A C).
idtac.
unfold S4.
replace (S C Y V) with (S V C Y) by auto with Geom.
rewrite (elim_area_on_foot C U P U V Y).
idtac.
rewrite (elim_area_on_foot V C P U V Y).
idtac.
basic_simpl.
uniformize_signed_areas.
replace (Py P U V * S C U V / Py U V U + Py P V U * S C U V / Py U V U) with (S C U V).
unfold Py.
uniformize_dir_seg.
basic_simpl.
field.
replace (U ** V * U ** V + U ** V * U ** V) with (2*U ** V * U ** V) by ring.
unfold on_foot in H.
decompose [and] H.
repeat (apply nonzeromult).

*****
H6 : not (eq U V)
H5 : Col Y U V
H3 : perp Y P U V
H2 : not (eq C Y)
H1 : parallel A Y C Y
H0 : not (Col A U V)
H : and (perp Y P U V) (and (Col Y U V) (not (eq U V)))
Y,P,U,V,A,C : Point
*****
not (eq (DSeg U V) F0)
+++++
auto with Geom.
-----
Theorem elim_ratio_on_foot_spec_b : forall Y P U V A C : Point, on_foot Y P U V -> ~ Col A U V -> parallel A Y C Y -> C <> Y -> A**Y / C**Y = S A U V / S C U V.
Proof.
intros.
rewrite (elim_ratio_on_foot_b Y P U V A C).
idtac.
unfold S4.
replace (S C Y V) with (S V C Y) by auto with Geom.
rewrite (elim_area_on_foot C U P U V Y).
idtac.
rewrite (elim_area_on_foot V C P U V Y).

*****
H2 : not (eq C Y)
H1 : parallel A Y C Y
H0 : not (Col A U V)
H : on_foot Y P U V
Y,P,U,V,A,C : Point
*****
on_foot Y P U V
+++++
assumption .
-----
Theorem elim_ratio_on_foot_spec_b : forall Y P U V A C : Point, on_foot Y P U V -> ~ Col A U V -> parallel A Y C Y -> C <> Y -> A**Y / C**Y = S A U V / S C U V.
Proof.
intros.
rewrite (elim_ratio_on_foot_b Y P U V A C).
idtac.
unfold S4.
replace (S C Y V) with (S V C Y) by auto with Geom.
rewrite (elim_area_on_foot C U P U V Y).

*****
H2 : not (eq C Y)
H1 : parallel A Y C Y
H0 : not (Col A U V)
H : on_foot Y P U V
Y,P,U,V,A,C : Point
*****
on_foot Y P U V
+++++
assumption .
-----
Theorem elim_ratio_on_foot_spec_b : forall Y P U V A C : Point, on_foot Y P U V -> ~ Col A U V -> parallel A Y C Y -> C <> Y -> A**Y / C**Y = S A U V / S C U V.
Proof.
intros.
rewrite (elim_ratio_on_foot_b Y P U V A C).

*****
H2 : not (eq C Y)
H1 : parallel A Y C Y
H0 : not (Col A U V)
H : on_foot Y P U V
Y,P,U,V,A,C : Point
*****
on_foot Y P U V
+++++
assumption .
-----
Theorem elim_ratio_on_foot_spec_b : forall Y P U V A C : Point, on_foot Y P U V -> ~ Col A U V -> parallel A Y C Y -> C <> Y -> A**Y / C**Y = S A U V / S C U V.
Proof.
intros.
rewrite (elim_ratio_on_foot_b Y P U V A C).

*****
H2 : not (eq C Y)
H1 : parallel A Y C Y
H0 : not (Col A U V)
H : on_foot Y P U V
Y,P,U,V,A,C : Point
*****
not (Col A U V)
+++++
assumption .
-----
Theorem elim_ratio_on_foot_spec_b : forall Y P U V A C : Point, on_foot Y P U V -> ~ Col A U V -> parallel A Y C Y -> C <> Y -> A**Y / C**Y = S A U V / S C U V.
Proof.
intros.
rewrite (elim_ratio_on_foot_b Y P U V A C).

*****
H2 : not (eq C Y)
H1 : parallel A Y C Y
H0 : not (Col A U V)
H : on_foot Y P U V
Y,P,U,V,A,C : Point
*****
parallel A Y C Y
+++++
assumption .
-----
Theorem elim_ratio_on_foot_spec_b : forall Y P U V A C : Point, on_foot Y P U V -> ~ Col A U V -> parallel A Y C Y -> C <> Y -> A**Y / C**Y = S A U V / S C U V.
Proof.
intros.
rewrite (elim_ratio_on_foot_b Y P U V A C).

*****
H2 : not (eq C Y)
H1 : parallel A Y C Y
H0 : not (Col A U V)
H : on_foot Y P U V
Y,P,U,V,A,C : Point
*****
not (eq C Y)
+++++
assumption .
-----
Theorem elim_ratio_on_foot_spec_b : forall Y P U V A C : Point, on_foot Y P U V -> ~ Col A U V -> parallel A Y C Y -> C <> Y -> A**Y / C**Y = S A U V / S C U V.
Proof.
intros.
rewrite (elim_ratio_on_foot_b Y P U V A C).

*****

*****

+++++
Qed.
-----
Theorem elim_ratio_on_foot_b_invariant :\nforall Y P U V A C D : Point,\non_foot Y P U V ->\n~ Col A U V ->\nparallel A Y C D ->\nC<>D ->\nS4 C U D V <> 0.
-----
Theorem elim_ratio_on_foot_b_invariant : forall Y P U V A C D : Point, on_foot Y P U V -> ~ Col A U V -> parallel A Y C D -> C<>D -> S4 C U D V <> 0.

*****

*****
forall (Y P U V A C D : Point) (_ : on_foot Y P U V) (_ : not (Col A U V)) (_ : parallel A Y C D) (_ : not (eq C D)), not (eq (S4 C U D V) F0)
+++++
Proof.
-----
Theorem elim_ratio_on_foot_b_invariant : forall Y P U V A C D : Point, on_foot Y P U V -> ~ Col A U V -> parallel A Y C D -> C<>D -> S4 C U D V <> 0.
Proof.

*****

*****
forall (Y P U V A C D : Point) (_ : on_foot Y P U V) (_ : not (Col A U V)) (_ : parallel A Y C D) (_ : not (eq C D)), not (eq (S4 C U D V) F0)
+++++
intros.
-----
Theorem elim_ratio_on_foot_b_invariant : forall Y P U V A C D : Point, on_foot Y P U V -> ~ Col A U V -> parallel A Y C D -> C<>D -> S4 C U D V <> 0.
Proof.
intros.

*****
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A U V)
H : on_foot Y P U V
Y,P,U,V,A,C,D : Point
*****
not (eq (S4 C U D V) F0)
+++++
intro.
-----
Theorem elim_ratio_on_foot_b_invariant : forall Y P U V A C D : Point, on_foot Y P U V -> ~ Col A U V -> parallel A Y C D -> C<>D -> S4 C U D V <> 0.
Proof.
intros.
intro.

*****
H3 : eq (S4 C U D V) F0
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A U V)
H : on_foot Y P U V
Y,P,U,V,A,C,D : Point
*****
False
+++++
assert (parallel C D U V).
-----
Theorem elim_ratio_on_foot_b_invariant : forall Y P U V A C D : Point, on_foot Y P U V -> ~ Col A U V -> parallel A Y C D -> C<>D -> S4 C U D V <> 0.
Proof.
intros.
intro.
assert (parallel C D U V).

*****
H3 : eq (S4 C U D V) F0
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A U V)
H : on_foot Y P U V
Y,P,U,V,A,C,D : Point
*****
parallel C D U V
+++++
auto with Geom.
-----
Theorem elim_ratio_on_foot_b_invariant : forall Y P U V A C D : Point, on_foot Y P U V -> ~ Col A U V -> parallel A Y C D -> C<>D -> S4 C U D V <> 0.
Proof.
intros.
intro.
assert (parallel C D U V).

*****
H4 : parallel C D U V
H3 : eq (S4 C U D V) F0
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A U V)
H : on_foot Y P U V
Y,P,U,V,A,C,D : Point
*****
False
+++++
idtac.
-----
Theorem elim_ratio_on_foot_b_invariant : forall Y P U V A C D : Point, on_foot Y P U V -> ~ Col A U V -> parallel A Y C D -> C<>D -> S4 C U D V <> 0.
Proof.
intros.
intro.
assert (parallel C D U V).
idtac.

*****
H4 : parallel C D U V
H3 : eq (S4 C U D V) F0
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A U V)
H : on_foot Y P U V
Y,P,U,V,A,C,D : Point
*****
False
+++++
unfold on_foot in *.
-----
Theorem elim_ratio_on_foot_b_invariant : forall Y P U V A C D : Point, on_foot Y P U V -> ~ Col A U V -> parallel A Y C D -> C<>D -> S4 C U D V <> 0.
Proof.
intros.
intro.
assert (parallel C D U V).
idtac.
unfold on_foot in *.

*****
H4 : parallel C D U V
H3 : eq (S4 C U D V) F0
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A U V)
H : and (perp Y P U V) (and (Col Y U V) (not (eq U V)))
Y,P,U,V,A,C,D : Point
*****
False
+++++
use H.
-----
Theorem elim_ratio_on_foot_b_invariant : forall Y P U V A C D : Point, on_foot Y P U V -> ~ Col A U V -> parallel A Y C D -> C<>D -> S4 C U D V <> 0.
Proof.
intros.
intro.
assert (parallel C D U V).
idtac.
unfold on_foot in *.
use H.

*****
H8 : not (eq U V)
H7 : Col Y U V
H5 : perp Y P U V
H4 : parallel C D U V
H3 : eq (S4 C U D V) F0
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A U V)
Y,P,U,V,A,C,D : Point
*****
False
+++++
assert (T:=parallel_transitivity A Y C D U V H2 H1 H4).
-----
Theorem elim_ratio_on_foot_b_invariant : forall Y P U V A C D : Point, on_foot Y P U V -> ~ Col A U V -> parallel A Y C D -> C<>D -> S4 C U D V <> 0.
Proof.
intros.
intro.
assert (parallel C D U V).
idtac.
unfold on_foot in *.
use H.
assert (T:=parallel_transitivity A Y C D U V H2 H1 H4).

*****
T : parallel A Y U V
H8 : not (eq U V)
H7 : Col Y U V
H5 : perp Y P U V
H4 : parallel C D U V
H3 : eq (S4 C U D V) F0
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A U V)
Y,P,U,V,A,C,D : Point
*****
False
+++++
assert (parallel U V A Y).
-----
Theorem elim_ratio_on_foot_b_invariant : forall Y P U V A C D : Point, on_foot Y P U V -> ~ Col A U V -> parallel A Y C D -> C<>D -> S4 C U D V <> 0.
Proof.
intros.
intro.
assert (parallel C D U V).
idtac.
unfold on_foot in *.
use H.
assert (T:=parallel_transitivity A Y C D U V H2 H1 H4).
assert (parallel U V A Y).

*****
T : parallel A Y U V
H8 : not (eq U V)
H7 : Col Y U V
H5 : perp Y P U V
H4 : parallel C D U V
H3 : eq (S4 C U D V) F0
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A U V)
Y,P,U,V,A,C,D : Point
*****
parallel U V A Y
+++++
auto with Geom.
-----
Theorem elim_ratio_on_foot_b_invariant : forall Y P U V A C D : Point, on_foot Y P U V -> ~ Col A U V -> parallel A Y C D -> C<>D -> S4 C U D V <> 0.
Proof.
intros.
intro.
assert (parallel C D U V).
idtac.
unfold on_foot in *.
use H.
assert (T:=parallel_transitivity A Y C D U V H2 H1 H4).
assert (parallel U V A Y).

*****
H : parallel U V A Y
T : parallel A Y U V
H8 : not (eq U V)
H7 : Col Y U V
H5 : perp Y P U V
H4 : parallel C D U V
H3 : eq (S4 C U D V) F0
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A U V)
Y,P,U,V,A,C,D : Point
*****
False
+++++
idtac.
-----
Theorem elim_ratio_on_foot_b_invariant : forall Y P U V A C D : Point, on_foot Y P U V -> ~ Col A U V -> parallel A Y C D -> C<>D -> S4 C U D V <> 0.
Proof.
intros.
intro.
assert (parallel C D U V).
idtac.
unfold on_foot in *.
use H.
assert (T:=parallel_transitivity A Y C D U V H2 H1 H4).
assert (parallel U V A Y).
idtac.

*****
H : parallel U V A Y
T : parallel A Y U V
H8 : not (eq U V)
H7 : Col Y U V
H5 : perp Y P U V
H4 : parallel C D U V
H3 : eq (S4 C U D V) F0
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A U V)
Y,P,U,V,A,C,D : Point
*****
False
+++++
unfold parallel in H.
-----
Theorem elim_ratio_on_foot_b_invariant : forall Y P U V A C D : Point, on_foot Y P U V -> ~ Col A U V -> parallel A Y C D -> C<>D -> S4 C U D V <> 0.
Proof.
intros.
intro.
assert (parallel C D U V).
idtac.
unfold on_foot in *.
use H.
assert (T:=parallel_transitivity A Y C D U V H2 H1 H4).
assert (parallel U V A Y).
idtac.
unfold parallel in H.

*****
H : eq (S4 U A V Y) F0
T : parallel A Y U V
H8 : not (eq U V)
H7 : Col Y U V
H5 : perp Y P U V
H4 : parallel C D U V
H3 : eq (S4 C U D V) F0
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A U V)
Y,P,U,V,A,C,D : Point
*****
False
+++++
unfold S4 in H.
-----
Theorem elim_ratio_on_foot_b_invariant : forall Y P U V A C D : Point, on_foot Y P U V -> ~ Col A U V -> parallel A Y C D -> C<>D -> S4 C U D V <> 0.
Proof.
intros.
intro.
assert (parallel C D U V).
idtac.
unfold on_foot in *.
use H.
assert (T:=parallel_transitivity A Y C D U V H2 H1 H4).
assert (parallel U V A Y).
idtac.
unfold parallel in H.
unfold S4 in H.

*****
H : eq (Fplus (S U A V) (S U V Y)) F0
T : parallel A Y U V
H8 : not (eq U V)
H7 : Col Y U V
H5 : perp Y P U V
H4 : parallel C D U V
H3 : eq (S4 C U D V) F0
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A U V)
Y,P,U,V,A,C,D : Point
*****
False
+++++
replace (S U V Y) with (0) in H.
-----
Theorem elim_ratio_on_foot_b_invariant : forall Y P U V A C D : Point, on_foot Y P U V -> ~ Col A U V -> parallel A Y C D -> C<>D -> S4 C U D V <> 0.
Proof.
intros.
intro.
assert (parallel C D U V).
idtac.
unfold on_foot in *.
use H.
assert (T:=parallel_transitivity A Y C D U V H2 H1 H4).
assert (parallel U V A Y).
idtac.
unfold parallel in H.
unfold S4 in H.
replace (S U V Y) with (0) in H.

*****
H : eq (Fplus (S U A V) F0) F0
T : parallel A Y U V
H8 : not (eq U V)
H7 : Col Y U V
H5 : perp Y P U V
H4 : parallel C D U V
H3 : eq (S4 C U D V) F0
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A U V)
Y,P,U,V,A,C,D : Point
*****
False
+++++
basic_simpl.
-----
Theorem elim_ratio_on_foot_b_invariant : forall Y P U V A C D : Point, on_foot Y P U V -> ~ Col A U V -> parallel A Y C D -> C<>D -> S4 C U D V <> 0.
Proof.
intros.
intro.
assert (parallel C D U V).
idtac.
unfold on_foot in *.
use H.
assert (T:=parallel_transitivity A Y C D U V H2 H1 H4).
assert (parallel U V A Y).
idtac.
unfold parallel in H.
unfold S4 in H.
replace (S U V Y) with (0) in H.
basic_simpl.

*****
H : eq (S U A V) F0
T : parallel A Y U V
H8 : not (eq U V)
H7 : Col Y U V
H5 : perp Y P U V
H4 : parallel C D U V
H3 : eq (S4 C U D V) F0
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A U V)
Y,P,U,V,A,C,D : Point
*****
False
+++++
assert (Col A U V).
-----
Theorem elim_ratio_on_foot_b_invariant : forall Y P U V A C D : Point, on_foot Y P U V -> ~ Col A U V -> parallel A Y C D -> C<>D -> S4 C U D V <> 0.
Proof.
intros.
intro.
assert (parallel C D U V).
idtac.
unfold on_foot in *.
use H.
assert (T:=parallel_transitivity A Y C D U V H2 H1 H4).
assert (parallel U V A Y).
idtac.
unfold parallel in H.
unfold S4 in H.
replace (S U V Y) with (0) in H.
basic_simpl.
assert (Col A U V).

*****
H : eq (S U A V) F0
T : parallel A Y U V
H8 : not (eq U V)
H7 : Col Y U V
H5 : perp Y P U V
H4 : parallel C D U V
H3 : eq (S4 C U D V) F0
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A U V)
Y,P,U,V,A,C,D : Point
*****
Col A U V
+++++
auto with Geom.
-----
Theorem elim_ratio_on_foot_b_invariant : forall Y P U V A C D : Point, on_foot Y P U V -> ~ Col A U V -> parallel A Y C D -> C<>D -> S4 C U D V <> 0.
Proof.
intros.
intro.
assert (parallel C D U V).
idtac.
unfold on_foot in *.
use H.
assert (T:=parallel_transitivity A Y C D U V H2 H1 H4).
assert (parallel U V A Y).
idtac.
unfold parallel in H.
unfold S4 in H.
replace (S U V Y) with (0) in H.
basic_simpl.
assert (Col A U V).

*****
H6 : Col A U V
H : eq (S U A V) F0
T : parallel A Y U V
H8 : not (eq U V)
H7 : Col Y U V
H5 : perp Y P U V
H4 : parallel C D U V
H3 : eq (S4 C U D V) F0
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A U V)
Y,P,U,V,A,C,D : Point
*****
False
+++++
idtac.
-----
Theorem elim_ratio_on_foot_b_invariant : forall Y P U V A C D : Point, on_foot Y P U V -> ~ Col A U V -> parallel A Y C D -> C<>D -> S4 C U D V <> 0.
Proof.
intros.
intro.
assert (parallel C D U V).
idtac.
unfold on_foot in *.
use H.
assert (T:=parallel_transitivity A Y C D U V H2 H1 H4).
assert (parallel U V A Y).
idtac.
unfold parallel in H.
unfold S4 in H.
replace (S U V Y) with (0) in H.
basic_simpl.
assert (Col A U V).
idtac.

*****
H6 : Col A U V
H : eq (S U A V) F0
T : parallel A Y U V
H8 : not (eq U V)
H7 : Col Y U V
H5 : perp Y P U V
H4 : parallel C D U V
H3 : eq (S4 C U D V) F0
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A U V)
Y,P,U,V,A,C,D : Point
*****
False
+++++
intuition.
-----
Theorem elim_ratio_on_foot_b_invariant : forall Y P U V A C D : Point, on_foot Y P U V -> ~ Col A U V -> parallel A Y C D -> C<>D -> S4 C U D V <> 0.
Proof.
intros.
intro.
assert (parallel C D U V).
idtac.
unfold on_foot in *.
use H.
assert (T:=parallel_transitivity A Y C D U V H2 H1 H4).
assert (parallel U V A Y).
idtac.
unfold parallel in H.
unfold S4 in H.
replace (S U V Y) with (0) in H.

*****
H : eq (Fplus (S U A V) (S U V Y)) F0
T : parallel A Y U V
H8 : not (eq U V)
H7 : Col Y U V
H5 : perp Y P U V
H4 : parallel C D U V
H3 : eq (S4 C U D V) F0
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A U V)
Y,P,U,V,A,C,D : Point
*****
eq F0 (S U V Y)
+++++
assert (Col U V Y).
-----
Theorem elim_ratio_on_foot_b_invariant : forall Y P U V A C D : Point, on_foot Y P U V -> ~ Col A U V -> parallel A Y C D -> C<>D -> S4 C U D V <> 0.
Proof.
intros.
intro.
assert (parallel C D U V).
idtac.
unfold on_foot in *.
use H.
assert (T:=parallel_transitivity A Y C D U V H2 H1 H4).
assert (parallel U V A Y).
idtac.
unfold parallel in H.
unfold S4 in H.
replace (S U V Y) with (0) in H.
assert (Col U V Y).

*****
H : eq (Fplus (S U A V) (S U V Y)) F0
T : parallel A Y U V
H8 : not (eq U V)
H7 : Col Y U V
H5 : perp Y P U V
H4 : parallel C D U V
H3 : eq (S4 C U D V) F0
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A U V)
Y,P,U,V,A,C,D : Point
*****
Col U V Y
+++++
auto with Geom.
-----
Theorem elim_ratio_on_foot_b_invariant : forall Y P U V A C D : Point, on_foot Y P U V -> ~ Col A U V -> parallel A Y C D -> C<>D -> S4 C U D V <> 0.
Proof.
intros.
intro.
assert (parallel C D U V).
idtac.
unfold on_foot in *.
use H.
assert (T:=parallel_transitivity A Y C D U V H2 H1 H4).
assert (parallel U V A Y).
idtac.
unfold parallel in H.
unfold S4 in H.
replace (S U V Y) with (0) in H.
assert (Col U V Y).

*****
H6 : Col U V Y
H : eq (Fplus (S U A V) (S U V Y)) F0
T : parallel A Y U V
H8 : not (eq U V)
H7 : Col Y U V
H5 : perp Y P U V
H4 : parallel C D U V
H3 : eq (S4 C U D V) F0
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A U V)
Y,P,U,V,A,C,D : Point
*****
eq F0 (S U V Y)
+++++
idtac.
-----
Theorem elim_ratio_on_foot_b_invariant : forall Y P U V A C D : Point, on_foot Y P U V -> ~ Col A U V -> parallel A Y C D -> C<>D -> S4 C U D V <> 0.
Proof.
intros.
intro.
assert (parallel C D U V).
idtac.
unfold on_foot in *.
use H.
assert (T:=parallel_transitivity A Y C D U V H2 H1 H4).
assert (parallel U V A Y).
idtac.
unfold parallel in H.
unfold S4 in H.
replace (S U V Y) with (0) in H.
assert (Col U V Y).
idtac.

*****
H6 : Col U V Y
H : eq (Fplus (S U A V) (S U V Y)) F0
T : parallel A Y U V
H8 : not (eq U V)
H7 : Col Y U V
H5 : perp Y P U V
H4 : parallel C D U V
H3 : eq (S4 C U D V) F0
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A U V)
Y,P,U,V,A,C,D : Point
*****
eq F0 (S U V Y)
+++++
auto with Geom.
-----
Theorem elim_ratio_on_foot_b_invariant : forall Y P U V A C D : Point, on_foot Y P U V -> ~ Col A U V -> parallel A Y C D -> C<>D -> S4 C U D V <> 0.
Proof.
intros.
intro.
assert (parallel C D U V).

*****

*****

+++++
Qed.
-----
Theorem elim_ratio_on_perp_d_a_invariant :\n  forall Y P Q A C D : Point, forall r: F,\n  on_perp_d Y P Q r->\n  Col A P Y  ->\n  parallel A Y C D ->\n  A<>Y ->\n  C<>D ->\n  S4 C P D Q <> 0.
-----
Theorem elim_ratio_on_perp_d_a_invariant : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> A<>Y -> C<>D -> S4 C P D Q <> 0.

*****

*****
forall (Y P Q A C D : Point) (r : F) (_ : on_perp_d Y P Q r) (_ : Col A P Y) (_ : parallel A Y C D) (_ : not (eq A Y)) (_ : not (eq C D)), not (eq (S4 C P D Q) F0)
+++++
Proof.
-----
Theorem elim_ratio_on_perp_d_a_invariant : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> A<>Y -> C<>D -> S4 C P D Q <> 0.
Proof.

*****

*****
forall (Y P Q A C D : Point) (r : F) (_ : on_perp_d Y P Q r) (_ : Col A P Y) (_ : parallel A Y C D) (_ : not (eq A Y)) (_ : not (eq C D)), not (eq (S4 C P D Q) F0)
+++++
intros.
-----
Theorem elim_ratio_on_perp_d_a_invariant : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> A<>Y -> C<>D -> S4 C P D Q <> 0.
Proof.
intros.

*****
H3 : not (eq C D)
H2 : not (eq A Y)
H1 : parallel A Y C D
H0 : Col A P Y
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C,D : Point
*****
not (eq (S4 C P D Q) F0)
+++++
unfold on_perp_d in H.
-----
Theorem elim_ratio_on_perp_d_a_invariant : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> A<>Y -> C<>D -> S4 C P D Q <> 0.
Proof.
intros.
unfold on_perp_d in H.

*****
H3 : not (eq C D)
H2 : not (eq A Y)
H1 : parallel A Y C D
H0 : Col A P Y
H : and (not (eq P Q))\n (and (perp Y P P Q)\n (and\n (eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y)))\n (not (eq r F0))))
r : F
Y,P,Q,A,C,D : Point
*****
not (eq (S4 C P D Q) F0)
+++++
use H.
-----
Theorem elim_ratio_on_perp_d_a_invariant : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> A<>Y -> C<>D -> S4 C P D Q <> 0.
Proof.
intros.
unfold on_perp_d in H.
use H.

*****
H8 : not (eq r F0)
H5 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H6 : perp Y P P Q
H4 : not (eq P Q)
H3 : not (eq C D)
H2 : not (eq A Y)
H1 : parallel A Y C D
H0 : Col A P Y
r : F
Y,P,Q,A,C,D : Point
*****
not (eq (S4 C P D Q) F0)
+++++
intro.
-----
Theorem elim_ratio_on_perp_d_a_invariant : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> A<>Y -> C<>D -> S4 C P D Q <> 0.
Proof.
intros.
unfold on_perp_d in H.
use H.
intro.

*****
H : eq (S4 C P D Q) F0
H8 : not (eq r F0)
H5 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H6 : perp Y P P Q
H4 : not (eq P Q)
H3 : not (eq C D)
H2 : not (eq A Y)
H1 : parallel A Y C D
H0 : Col A P Y
r : F
Y,P,Q,A,C,D : Point
*****
False
+++++
assert (parallel C D P Q) by auto with Geom.
-----
Theorem elim_ratio_on_perp_d_a_invariant : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> A<>Y -> C<>D -> S4 C P D Q <> 0.
Proof.
intros.
unfold on_perp_d in H.
use H.
intro.
assert (parallel C D P Q) by auto with Geom.

*****
H7 : parallel C D P Q
H : eq (S4 C P D Q) F0
H8 : not (eq r F0)
H5 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H6 : perp Y P P Q
H4 : not (eq P Q)
H3 : not (eq C D)
H2 : not (eq A Y)
H1 : parallel A Y C D
H0 : Col A P Y
r : F
Y,P,Q,A,C,D : Point
*****
False
+++++
clear H.
-----
Theorem elim_ratio_on_perp_d_a_invariant : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> A<>Y -> C<>D -> S4 C P D Q <> 0.
Proof.
intros.
unfold on_perp_d in H.
use H.
intro.
assert (parallel C D P Q) by auto with Geom.
clear H.

*****
H7 : parallel C D P Q
H8 : not (eq r F0)
H5 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H6 : perp Y P P Q
H4 : not (eq P Q)
H3 : not (eq C D)
H2 : not (eq A Y)
H1 : parallel A Y C D
H0 : Col A P Y
r : F
Y,P,Q,A,C,D : Point
*****
False
+++++
assert (T:=parallel_transitivity A Y C D P Q H3 H1 H7).
-----
Theorem elim_ratio_on_perp_d_a_invariant : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> A<>Y -> C<>D -> S4 C P D Q <> 0.
Proof.
intros.
unfold on_perp_d in H.
use H.
intro.
assert (parallel C D P Q) by auto with Geom.
clear H.
assert (T:=parallel_transitivity A Y C D P Q H3 H1 H7).

*****
T : parallel A Y P Q
H7 : parallel C D P Q
H8 : not (eq r F0)
H5 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H6 : perp Y P P Q
H4 : not (eq P Q)
H3 : not (eq C D)
H2 : not (eq A Y)
H1 : parallel A Y C D
H0 : Col A P Y
r : F
Y,P,Q,A,C,D : Point
*****
False
+++++
assert (parallel Y P P Q).
-----
Theorem elim_ratio_on_perp_d_a_invariant : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> A<>Y -> C<>D -> S4 C P D Q <> 0.
Proof.
intros.
unfold on_perp_d in H.
use H.
intro.
assert (parallel C D P Q) by auto with Geom.
clear H.
assert (T:=parallel_transitivity A Y C D P Q H3 H1 H7).
assert (parallel Y P P Q).

*****
T : parallel A Y P Q
H7 : parallel C D P Q
H8 : not (eq r F0)
H5 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H6 : perp Y P P Q
H4 : not (eq P Q)
H3 : not (eq C D)
H2 : not (eq A Y)
H1 : parallel A Y C D
H0 : Col A P Y
r : F
Y,P,Q,A,C,D : Point
*****
parallel Y P P Q
+++++
apply (parallel_transitivity Y P A Y P Q H2); auto with Geom.
-----
Theorem elim_ratio_on_perp_d_a_invariant : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> A<>Y -> C<>D -> S4 C P D Q <> 0.
Proof.
intros.
unfold on_perp_d in H.
use H.
intro.
assert (parallel C D P Q) by auto with Geom.
clear H.
assert (T:=parallel_transitivity A Y C D P Q H3 H1 H7).
assert (parallel Y P P Q).
apply (parallel_transitivity Y P A Y P Q H2); auto with Geom.

*****
H : parallel Y P P Q
T : parallel A Y P Q
H7 : parallel C D P Q
H8 : not (eq r F0)
H5 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H6 : perp Y P P Q
H4 : not (eq P Q)
H3 : not (eq C D)
H2 : not (eq A Y)
H1 : parallel A Y C D
H0 : Col A P Y
r : F
Y,P,Q,A,C,D : Point
*****
False
+++++
unfold parallel.
-----
Theorem elim_ratio_on_perp_d_a_invariant : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> A<>Y -> C<>D -> S4 C P D Q <> 0.
Proof.
intros.
unfold on_perp_d in H.
use H.
intro.
assert (parallel C D P Q) by auto with Geom.
clear H.
assert (T:=parallel_transitivity A Y C D P Q H3 H1 H7).
assert (parallel Y P P Q).
apply (parallel_transitivity Y P A Y P Q H2); auto with Geom.
unfold parallel.

*****
H : parallel Y P P Q
T : parallel A Y P Q
H7 : parallel C D P Q
H8 : not (eq r F0)
H5 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H6 : perp Y P P Q
H4 : not (eq P Q)
H3 : not (eq C D)
H2 : not (eq A Y)
H1 : parallel A Y C D
H0 : Col A P Y
r : F
Y,P,Q,A,C,D : Point
*****
False
+++++
basic_simpl.
-----
Theorem elim_ratio_on_perp_d_a_invariant : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> A<>Y -> C<>D -> S4 C P D Q <> 0.
Proof.
intros.
unfold on_perp_d in H.
use H.
intro.
assert (parallel C D P Q) by auto with Geom.
clear H.
assert (T:=parallel_transitivity A Y C D P Q H3 H1 H7).
assert (parallel Y P P Q).
apply (parallel_transitivity Y P A Y P Q H2); auto with Geom.
unfold parallel.
basic_simpl.

*****
H : parallel Y P P Q
T : parallel A Y P Q
H7 : parallel C D P Q
H8 : not (eq r F0)
H5 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H6 : perp Y P P Q
H4 : not (eq P Q)
H3 : not (eq C D)
H2 : not (eq A Y)
H1 : parallel A Y C D
H0 : Col A P Y
r : F
Y,P,Q,A,C,D : Point
*****
False
+++++
assert (Col Y A P) by auto with Geom.
-----
Theorem elim_ratio_on_perp_d_a_invariant : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> A<>Y -> C<>D -> S4 C P D Q <> 0.
Proof.
intros.
unfold on_perp_d in H.
use H.
intro.
assert (parallel C D P Q) by auto with Geom.
clear H.
assert (T:=parallel_transitivity A Y C D P Q H3 H1 H7).
assert (parallel Y P P Q).
apply (parallel_transitivity Y P A Y P Q H2); auto with Geom.
unfold parallel.
basic_simpl.
assert (Col Y A P) by auto with Geom.

*****
H9 : Col Y A P
H : parallel Y P P Q
T : parallel A Y P Q
H7 : parallel C D P Q
H8 : not (eq r F0)
H5 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H6 : perp Y P P Q
H4 : not (eq P Q)
H3 : not (eq C D)
H2 : not (eq A Y)
H1 : parallel A Y C D
H0 : Col A P Y
r : F
Y,P,Q,A,C,D : Point
*****
False
+++++
auto with Geom.
-----
Theorem elim_ratio_on_perp_d_a_invariant : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> A<>Y -> C<>D -> S4 C P D Q <> 0.
Proof.
intros.
unfold on_perp_d in H.
use H.
intro.
assert (parallel C D P Q) by auto with Geom.
clear H.
assert (T:=parallel_transitivity A Y C D P Q H3 H1 H7).
assert (parallel Y P P Q).
apply (parallel_transitivity Y P A Y P Q H2); auto with Geom.
unfold parallel.
basic_simpl.
assert (Col Y A P) by auto with Geom.
auto with Geom.

*****
H9 : Col Y A P
H : parallel Y P P Q
T : parallel A Y P Q
H7 : parallel C D P Q
H8 : not (eq r F0)
H5 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H6 : perp Y P P Q
H4 : not (eq P Q)
H3 : not (eq C D)
H2 : not (eq A Y)
H1 : parallel A Y C D
H0 : Col A P Y
r : F
Y,P,Q,A,C,D : Point
*****
False
+++++
assert (~ perp Y P P Q).
-----
Theorem elim_ratio_on_perp_d_a_invariant : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> A<>Y -> C<>D -> S4 C P D Q <> 0.
Proof.
intros.
unfold on_perp_d in H.
use H.
intro.
assert (parallel C D P Q) by auto with Geom.
clear H.
assert (T:=parallel_transitivity A Y C D P Q H3 H1 H7).
assert (parallel Y P P Q).
apply (parallel_transitivity Y P A Y P Q H2); auto with Geom.
unfold parallel.
basic_simpl.
assert (Col Y A P) by auto with Geom.
auto with Geom.
assert (~ perp Y P P Q).

*****
H9 : Col Y A P
H : parallel Y P P Q
T : parallel A Y P Q
H7 : parallel C D P Q
H8 : not (eq r F0)
H5 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H6 : perp Y P P Q
H4 : not (eq P Q)
H3 : not (eq C D)
H2 : not (eq A Y)
H1 : parallel A Y C D
H0 : Col A P Y
r : F
Y,P,Q,A,C,D : Point
*****
not (perp Y P P Q)
+++++
apply (parallel_not_perp Y P P Q H).
-----
Theorem elim_ratio_on_perp_d_a_invariant : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> A<>Y -> C<>D -> S4 C P D Q <> 0.
Proof.
intros.
unfold on_perp_d in H.
use H.
intro.
assert (parallel C D P Q) by auto with Geom.
clear H.
assert (T:=parallel_transitivity A Y C D P Q H3 H1 H7).
assert (parallel Y P P Q).
apply (parallel_transitivity Y P A Y P Q H2); auto with Geom.
unfold parallel.
basic_simpl.
assert (Col Y A P) by auto with Geom.
auto with Geom.
assert (~ perp Y P P Q).
apply (parallel_not_perp Y P P Q H).

*****
H9 : Col Y A P
H : parallel Y P P Q
T : parallel A Y P Q
H7 : parallel C D P Q
H8 : not (eq r F0)
H5 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H6 : perp Y P P Q
H4 : not (eq P Q)
H3 : not (eq C D)
H2 : not (eq A Y)
H1 : parallel A Y C D
H0 : Col A P Y
r : F
Y,P,Q,A,C,D : Point
*****
not (eq Y P)
+++++
2:auto.
-----
Theorem elim_ratio_on_perp_d_a_invariant : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> A<>Y -> C<>D -> S4 C P D Q <> 0.
Proof.
intros.
unfold on_perp_d in H.
use H.
intro.
assert (parallel C D P Q) by auto with Geom.
clear H.
assert (T:=parallel_transitivity A Y C D P Q H3 H1 H7).
assert (parallel Y P P Q).
apply (parallel_transitivity Y P A Y P Q H2); auto with Geom.
unfold parallel.
basic_simpl.
assert (Col Y A P) by auto with Geom.
auto with Geom.
assert (~ perp Y P P Q).
apply (parallel_not_perp Y P P Q H).
2:auto.

*****
H9 : Col Y A P
H : parallel Y P P Q
T : parallel A Y P Q
H7 : parallel C D P Q
H8 : not (eq r F0)
H5 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H6 : perp Y P P Q
H4 : not (eq P Q)
H3 : not (eq C D)
H2 : not (eq A Y)
H1 : parallel A Y C D
H0 : Col A P Y
r : F
Y,P,Q,A,C,D : Point
*****
not (eq Y P)
+++++
2:intuition.
-----
Theorem elim_ratio_on_perp_d_a_invariant : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> A<>Y -> C<>D -> S4 C P D Q <> 0.
Proof.
intros.
unfold on_perp_d in H.
use H.
intro.
assert (parallel C D P Q) by auto with Geom.
clear H.
assert (T:=parallel_transitivity A Y C D P Q H3 H1 H7).
assert (parallel Y P P Q).
apply (parallel_transitivity Y P A Y P Q H2); auto with Geom.
unfold parallel.
basic_simpl.
assert (Col Y A P) by auto with Geom.
auto with Geom.
assert (~ perp Y P P Q).
apply (parallel_not_perp Y P P Q H).
2:auto.
2:intuition.

*****
H9 : Col Y A P
H : parallel Y P P Q
T : parallel A Y P Q
H7 : parallel C D P Q
H8 : not (eq r F0)
H5 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H6 : perp Y P P Q
H4 : not (eq P Q)
H3 : not (eq C D)
H2 : not (eq A Y)
H1 : parallel A Y C D
H0 : Col A P Y
r : F
Y,P,Q,A,C,D : Point
*****
not (eq Y P)
+++++
intro;subst.
-----
Theorem elim_ratio_on_perp_d_a_invariant : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> A<>Y -> C<>D -> S4 C P D Q <> 0.
Proof.
intros.
unfold on_perp_d in H.
use H.
intro.
assert (parallel C D P Q) by auto with Geom.
clear H.
assert (T:=parallel_transitivity A Y C D P Q H3 H1 H7).
assert (parallel Y P P Q).
apply (parallel_transitivity Y P A Y P Q H2); auto with Geom.
unfold parallel.
basic_simpl.
assert (Col Y A P) by auto with Geom.
auto with Geom.
assert (~ perp Y P P Q).
apply (parallel_not_perp Y P P Q H).
2:auto.
2:intuition.
intro;subst.

*****
T : parallel A P P Q
H : parallel P P P Q
H9 : Col P A P
H7 : parallel C D P Q
H8 : not (eq r F0)
H6 : perp P P P Q
H5 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q P))
H4 : not (eq P Q)
H3 : not (eq C D)
H0 : Col A P P
H1 : parallel A P C D
H2 : not (eq A P)
r : F
P,Q,A,C,D : Point
*****
False
+++++
basic_simpl.
-----
Theorem elim_ratio_on_perp_d_a_invariant : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> A<>Y -> C<>D -> S4 C P D Q <> 0.
Proof.
intros.
unfold on_perp_d in H.
use H.
intro.
assert (parallel C D P Q) by auto with Geom.
clear H.
assert (T:=parallel_transitivity A Y C D P Q H3 H1 H7).
assert (parallel Y P P Q).
apply (parallel_transitivity Y P A Y P Q H2); auto with Geom.
unfold parallel.
basic_simpl.
assert (Col Y A P) by auto with Geom.
auto with Geom.
assert (~ perp Y P P Q).
apply (parallel_not_perp Y P P Q H).
2:auto.
2:intuition.
intro;subst.
basic_simpl.

*****
T : parallel A P P Q
H : parallel P P P Q
H9 : Col P A P
H7 : parallel C D P Q
H8 : not (eq r F0)
H6 : perp P P P Q
H5 : eq (Fmult r (Py P Q P)) F0
H4 : not (eq P Q)
H3 : not (eq C D)
H0 : Col A P P
H1 : parallel A P C D
H2 : not (eq A P)
r : F
P,Q,A,C,D : Point
*****
False
+++++
IsoleVar (Py P Q P) H5.
-----
Theorem elim_ratio_on_perp_d_a_invariant : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> A<>Y -> C<>D -> S4 C P D Q <> 0.
Proof.
intros.
unfold on_perp_d in H.
use H.
intro.
assert (parallel C D P Q) by auto with Geom.
clear H.
assert (T:=parallel_transitivity A Y C D P Q H3 H1 H7).
assert (parallel Y P P Q).
apply (parallel_transitivity Y P A Y P Q H2); auto with Geom.
unfold parallel.
basic_simpl.
assert (Col Y A P) by auto with Geom.
auto with Geom.
assert (~ perp Y P P Q).
apply (parallel_not_perp Y P P Q H).
2:auto.
2:intuition.
intro;subst.
basic_simpl.
IsoleVar (Py P Q P) H5.

*****
H5 : eq (Py P Q P) (Fdiv F0 r)
T : parallel A P P Q
H : parallel P P P Q
H9 : Col P A P
H7 : parallel C D P Q
H8 : not (eq r F0)
H6 : perp P P P Q
H4 : not (eq P Q)
H3 : not (eq C D)
H0 : Col A P P
H1 : parallel A P C D
H2 : not (eq A P)
r : F
P,Q,A,C,D : Point
*****
False
+++++
replace (0/r) with (0) in H5.
-----
Theorem elim_ratio_on_perp_d_a_invariant : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> A<>Y -> C<>D -> S4 C P D Q <> 0.
Proof.
intros.
unfold on_perp_d in H.
use H.
intro.
assert (parallel C D P Q) by auto with Geom.
clear H.
assert (T:=parallel_transitivity A Y C D P Q H3 H1 H7).
assert (parallel Y P P Q).
apply (parallel_transitivity Y P A Y P Q H2); auto with Geom.
unfold parallel.
basic_simpl.
assert (Col Y A P) by auto with Geom.
auto with Geom.
assert (~ perp Y P P Q).
apply (parallel_not_perp Y P P Q H).
2:auto.
2:intuition.
intro;subst.
basic_simpl.
IsoleVar (Py P Q P) H5.
replace (0/r) with (0) in H5.

*****
H5 : eq (Py P Q P) F0
T : parallel A P P Q
H : parallel P P P Q
H9 : Col P A P
H7 : parallel C D P Q
H8 : not (eq r F0)
H6 : perp P P P Q
H4 : not (eq P Q)
H3 : not (eq C D)
H0 : Col A P P
H1 : parallel A P C D
H2 : not (eq A P)
r : F
P,Q,A,C,D : Point
*****
False
+++++
2:field.
-----
Theorem elim_ratio_on_perp_d_a_invariant : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> A<>Y -> C<>D -> S4 C P D Q <> 0.
Proof.
intros.
unfold on_perp_d in H.
use H.
intro.
assert (parallel C D P Q) by auto with Geom.
clear H.
assert (T:=parallel_transitivity A Y C D P Q H3 H1 H7).
assert (parallel Y P P Q).
apply (parallel_transitivity Y P A Y P Q H2); auto with Geom.
unfold parallel.
basic_simpl.
assert (Col Y A P) by auto with Geom.
auto with Geom.
assert (~ perp Y P P Q).
apply (parallel_not_perp Y P P Q H).
2:auto.
2:intuition.
intro;subst.
basic_simpl.
IsoleVar (Py P Q P) H5.
replace (0/r) with (0) in H5.
2:field.

*****
H5 : eq (Py P Q P) F0
T : parallel A P P Q
H : parallel P P P Q
H9 : Col P A P
H7 : parallel C D P Q
H8 : not (eq r F0)
H6 : perp P P P Q
H4 : not (eq P Q)
H3 : not (eq C D)
H0 : Col A P P
H1 : parallel A P C D
H2 : not (eq A P)
r : F
P,Q,A,C,D : Point
*****
False
+++++
2:auto.
-----
Theorem elim_ratio_on_perp_d_a_invariant : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> A<>Y -> C<>D -> S4 C P D Q <> 0.
Proof.
intros.
unfold on_perp_d in H.
use H.
intro.
assert (parallel C D P Q) by auto with Geom.
clear H.
assert (T:=parallel_transitivity A Y C D P Q H3 H1 H7).
assert (parallel Y P P Q).
apply (parallel_transitivity Y P A Y P Q H2); auto with Geom.
unfold parallel.
basic_simpl.
assert (Col Y A P) by auto with Geom.
auto with Geom.
assert (~ perp Y P P Q).
apply (parallel_not_perp Y P P Q H).
2:auto.
2:intuition.
intro;subst.
basic_simpl.
IsoleVar (Py P Q P) H5.
replace (0/r) with (0) in H5.
2:field.
2:auto.

*****
H5 : eq (Py P Q P) F0
T : parallel A P P Q
H : parallel P P P Q
H9 : Col P A P
H7 : parallel C D P Q
H8 : not (eq r F0)
H6 : perp P P P Q
H4 : not (eq P Q)
H3 : not (eq C D)
H0 : Col A P P
H1 : parallel A P C D
H2 : not (eq A P)
r : F
P,Q,A,C,D : Point
*****
False
+++++
assert (P=Q).
-----
Theorem elim_ratio_on_perp_d_a_invariant : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> A<>Y -> C<>D -> S4 C P D Q <> 0.
Proof.
intros.
unfold on_perp_d in H.
use H.
intro.
assert (parallel C D P Q) by auto with Geom.
clear H.
assert (T:=parallel_transitivity A Y C D P Q H3 H1 H7).
assert (parallel Y P P Q).
apply (parallel_transitivity Y P A Y P Q H2); auto with Geom.
unfold parallel.
basic_simpl.
assert (Col Y A P) by auto with Geom.
auto with Geom.
assert (~ perp Y P P Q).
apply (parallel_not_perp Y P P Q H).
2:auto.
2:intuition.
intro;subst.
basic_simpl.
IsoleVar (Py P Q P) H5.
replace (0/r) with (0) in H5.
2:field.
2:auto.
assert (P=Q).

*****
H5 : eq (Py P Q P) F0
T : parallel A P P Q
H : parallel P P P Q
H9 : Col P A P
H7 : parallel C D P Q
H8 : not (eq r F0)
H6 : perp P P P Q
H4 : not (eq P Q)
H3 : not (eq C D)
H0 : Col A P P
H1 : parallel A P C D
H2 : not (eq A P)
r : F
P,Q,A,C,D : Point
*****
eq P Q
+++++
auto with Geom.
-----
Theorem elim_ratio_on_perp_d_a_invariant : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> A<>Y -> C<>D -> S4 C P D Q <> 0.
Proof.
intros.
unfold on_perp_d in H.
use H.
intro.
assert (parallel C D P Q) by auto with Geom.
clear H.
assert (T:=parallel_transitivity A Y C D P Q H3 H1 H7).
assert (parallel Y P P Q).
apply (parallel_transitivity Y P A Y P Q H2); auto with Geom.
unfold parallel.
basic_simpl.
assert (Col Y A P) by auto with Geom.
auto with Geom.
assert (~ perp Y P P Q).
apply (parallel_not_perp Y P P Q H).
2:auto.
2:intuition.
intro;subst.
basic_simpl.
IsoleVar (Py P Q P) H5.
replace (0/r) with (0) in H5.
2:field.
2:auto.
assert (P=Q).
auto with Geom.

*****
H10 : eq P Q
H5 : eq (Py P Q P) F0
T : parallel A P P Q
H : parallel P P P Q
H9 : Col P A P
H7 : parallel C D P Q
H8 : not (eq r F0)
H6 : perp P P P Q
H4 : not (eq P Q)
H3 : not (eq C D)
H0 : Col A P P
H1 : parallel A P C D
H2 : not (eq A P)
r : F
P,Q,A,C,D : Point
*****
False
+++++
intuition.
-----
Theorem elim_ratio_on_perp_d_a_invariant : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> A<>Y -> C<>D -> S4 C P D Q <> 0.
Proof.
intros.
unfold on_perp_d in H.
use H.
intro.
assert (parallel C D P Q) by auto with Geom.
clear H.
assert (T:=parallel_transitivity A Y C D P Q H3 H1 H7).
assert (parallel Y P P Q).
apply (parallel_transitivity Y P A Y P Q H2); auto with Geom.
unfold parallel.
basic_simpl.
assert (Col Y A P) by auto with Geom.
auto with Geom.
assert (~ perp Y P P Q).
apply (parallel_not_perp Y P P Q H).
2:auto.
2:intuition.
intro;subst.
basic_simpl.
IsoleVar (Py P Q P) H5.
replace (0/r) with (0) in H5.
2:field.
2:auto.
assert (P=Q).
auto with Geom.
intuition.

*****

*****

+++++
Qed.
-----
Theorem elim_ratio_on_perp_d_a_aux :\n forall Y P Q A C D : Point, forall r: F,\non_perp_d Y P Q r->\nCol A P Y  ->\nparallel A Y C D ->\nC<>D ->\nA<>Y ->\nA<>P ->\nA**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).

*****

*****
forall (Y P Q A C D : Point) (r : F) (_ : on_perp_d Y P Q r) (_ : Col A P Y) (_ : parallel A Y C D) (_ : not (eq C D)) (_ : not (eq A Y)) (_ : not (eq A P)), eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (Fminus (S A P Q) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py P Q P))) (S4 C P D Q))
+++++
Proof.
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.

*****

*****
forall (Y P Q A C D : Point) (r : F) (_ : on_perp_d Y P Q r) (_ : Col A P Y) (_ : parallel A Y C D) (_ : not (eq C D)) (_ : not (eq A Y)) (_ : not (eq A P)), eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (Fminus (S A P Q) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py P Q P))) (S4 C P D Q))
+++++
intros.
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.

*****
H4 : not (eq A P)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A P Y
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C,D : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (Fminus (S A P Q) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py P Q P))) (S4 C P D Q))
+++++
rename H4 into Hap.
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.

*****
Hap : not (eq A P)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A P Y
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C,D : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (Fminus (S A P Q) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py P Q P))) (S4 C P D Q))
+++++
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).

*****
T : not (eq (S4 C P D Q) F0)
Hap : not (eq A P)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A P Y
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C,D : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (Fminus (S A P Q) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py P Q P))) (S4 C P D Q))
+++++
assert (Hr: r<> 0).
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).

*****
T : not (eq (S4 C P D Q) F0)
Hap : not (eq A P)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A P Y
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C,D : Point
*****
not (eq r F0)
+++++
unfold on_perp_d in *.
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
unfold on_perp_d in *.

*****
T : not (eq (S4 C P D Q) F0)
Hap : not (eq A P)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A P Y
H : and (not (eq P Q))\n (and (perp Y P P Q)\n (and\n (eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y)))\n (not (eq r F0))))
r : F
Y,P,Q,A,C,D : Point
*****
not (eq r F0)
+++++
use H.
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
unfold on_perp_d in *.
use H.

*****
H8 : not (eq r F0)
H5 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H6 : perp Y P P Q
H4 : not (eq P Q)
T : not (eq (S4 C P D Q) F0)
Hap : not (eq A P)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A P Y
r : F
Y,P,Q,A,C,D : Point
*****
not (eq r F0)
+++++
auto.
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).

*****
Hr : not (eq r F0)
T : not (eq (S4 C P D Q) F0)
Hap : not (eq A P)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A P Y
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C,D : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (Fminus (S A P Q) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py P Q P))) (S4 C P D Q))
+++++
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).

*****
Hr : not (eq r F0)
T : not (eq (S4 C P D Q) F0)
Hap : not (eq A P)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A P Y
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C,D : Point
*****
eq (Fdiv (Fplus (DSeg A P) (DSeg P Y)) (DSeg C D)) (Fdiv (Fminus (S A P Q) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py P Q P))) (S4 C P D Q))
+++++
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).

*****
Hr : not (eq r F0)
T : not (eq (S4 C P D Q) F0)
Hap : not (eq A P)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A P Y
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C,D : Point
*****
eq (Fplus (Fdiv (DSeg A P) (DSeg C D)) (Fdiv (DSeg P Y) (DSeg C D))) (Fdiv (Fminus (S A P Q) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py P Q P))) (S4 C P D Q))
+++++
replace (A**P / C**D) with (S A P Q / S4 C P D Q).
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).
replace (A**P / C**D) with (S A P Q / S4 C P D Q).

*****
Hr : not (eq r F0)
T : not (eq (S4 C P D Q) F0)
Hap : not (eq A P)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A P Y
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C,D : Point
*****
eq (Fplus (Fdiv (S A P Q) (S4 C P D Q)) (Fdiv (DSeg P Y) (DSeg C D))) (Fdiv (Fminus (S A P Q) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py P Q P))) (S4 C P D Q))
+++++
replace (P**Y / C**D) with (- r / (2+2) * Py P Q P / S4 C P D Q).
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).
replace (A**P / C**D) with (S A P Q / S4 C P D Q).
replace (P**Y / C**D) with (- r / (2+2) * Py P Q P / S4 C P D Q).

*****
Hr : not (eq r F0)
T : not (eq (S4 C P D Q) F0)
Hap : not (eq A P)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A P Y
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C,D : Point
*****
eq (Fplus (Fdiv (S A P Q) (S4 C P D Q)) (Fdiv (Fmult (Fdiv (Fopp r) (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py P Q P)) (S4 C P D Q))) (Fdiv (Fminus (S A P Q) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py P Q P))) (S4 C P D Q))
+++++
field.
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).
replace (A**P / C**D) with (S A P Q / S4 C P D Q).
replace (P**Y / C**D) with (- r / (2+2) * Py P Q P / S4 C P D Q).
field.

*****
Hr : not (eq r F0)
T : not (eq (S4 C P D Q) F0)
Hap : not (eq A P)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A P Y
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C,D : Point
*****
and (not (eq (Fmult (Fplus F1 F1) (Fplus F1 F1)) F0)) (not (eq (S4 C P D Q) F0))
+++++
solve_conds.
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).
replace (A**P / C**D) with (S A P Q / S4 C P D Q).
replace (P**Y / C**D) with (- r / (2+2) * Py P Q P / S4 C P D Q).

*****
Hr : not (eq r F0)
T : not (eq (S4 C P D Q) F0)
Hap : not (eq A P)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A P Y
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C,D : Point
*****
eq (Fdiv (Fmult (Fdiv (Fopp r) (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py P Q P)) (S4 C P D Q)) (Fdiv (DSeg P Y) (DSeg C D))
+++++
assert (P**Y / C**D = S P Y Q / S4 C P D Q).
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).
replace (A**P / C**D) with (S A P Q / S4 C P D Q).
replace (P**Y / C**D) with (- r / (2+2) * Py P Q P / S4 C P D Q).
assert (P**Y / C**D = S P Y Q / S4 C P D Q).

*****
Hr : not (eq r F0)
T : not (eq (S4 C P D Q) F0)
Hap : not (eq A P)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A P Y
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C,D : Point
*****
eq (Fdiv (DSeg P Y) (DSeg C D)) (Fdiv (S P Y Q) (S4 C P D Q))
+++++
assert (Y ** P / C ** D = S Y P Q / S4 C P D Q).
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).
replace (A**P / C**D) with (S A P Q / S4 C P D Q).
replace (P**Y / C**D) with (- r / (2+2) * Py P Q P / S4 C P D Q).
assert (P**Y / C**D = S P Y Q / S4 C P D Q).
assert (Y ** P / C ** D = S Y P Q / S4 C P D Q).

*****
Hr : not (eq r F0)
T : not (eq (S4 C P D Q) F0)
Hap : not (eq A P)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A P Y
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C,D : Point
*****
eq (Fdiv (DSeg Y P) (DSeg C D)) (Fdiv (S Y P Q) (S4 C P D Q))
+++++
apply (elim_length_ratio_inter_ll_2 Y C D P A P Q P).
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).
replace (A**P / C**D) with (S A P Q / S4 C P D Q).
replace (P**Y / C**D) with (- r / (2+2) * Py P Q P / S4 C P D Q).
assert (P**Y / C**D = S P Y Q / S4 C P D Q).
assert (Y ** P / C ** D = S Y P Q / S4 C P D Q).
apply (elim_length_ratio_inter_ll_2 Y C D P A P Q P).

*****
Hr : not (eq r F0)
T : not (eq (S4 C P D Q) F0)
Hap : not (eq A P)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A P Y
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C,D : Point
*****
inter_ll P P Q P A
+++++
unfold inter_ll.
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).
replace (A**P / C**D) with (S A P Q / S4 C P D Q).
replace (P**Y / C**D) with (- r / (2+2) * Py P Q P / S4 C P D Q).
assert (P**Y / C**D = S P Y Q / S4 C P D Q).
assert (Y ** P / C ** D = S Y P Q / S4 C P D Q).
apply (elim_length_ratio_inter_ll_2 Y C D P A P Q P).
unfold inter_ll.

*****
Hr : not (eq r F0)
T : not (eq (S4 C P D Q) F0)
Hap : not (eq A P)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A P Y
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C,D : Point
*****
and (Col P P Q) (and (Col P P A) (not (parallel P Q P A)))
+++++
repeat split.
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).
replace (A**P / C**D) with (S A P Q / S4 C P D Q).
replace (P**Y / C**D) with (- r / (2+2) * Py P Q P / S4 C P D Q).
assert (P**Y / C**D = S P Y Q / S4 C P D Q).
assert (Y ** P / C ** D = S Y P Q / S4 C P D Q).
apply (elim_length_ratio_inter_ll_2 Y C D P A P Q P).
unfold inter_ll.
repeat split.

*****
Hr : not (eq r F0)
T : not (eq (S4 C P D Q) F0)
Hap : not (eq A P)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A P Y
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C,D : Point
*****
Col P P Q
+++++
auto with Geom.
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).
replace (A**P / C**D) with (S A P Q / S4 C P D Q).
replace (P**Y / C**D) with (- r / (2+2) * Py P Q P / S4 C P D Q).
assert (P**Y / C**D = S P Y Q / S4 C P D Q).
assert (Y ** P / C ** D = S Y P Q / S4 C P D Q).
apply (elim_length_ratio_inter_ll_2 Y C D P A P Q P).
unfold inter_ll.
repeat split.

*****
Hr : not (eq r F0)
T : not (eq (S4 C P D Q) F0)
Hap : not (eq A P)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A P Y
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C,D : Point
*****
Col P P A
+++++
auto with Geom.
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).
replace (A**P / C**D) with (S A P Q / S4 C P D Q).
replace (P**Y / C**D) with (- r / (2+2) * Py P Q P / S4 C P D Q).
assert (P**Y / C**D = S P Y Q / S4 C P D Q).
assert (Y ** P / C ** D = S Y P Q / S4 C P D Q).
apply (elim_length_ratio_inter_ll_2 Y C D P A P Q P).
unfold inter_ll.
repeat split.

*****
Hr : not (eq r F0)
T : not (eq (S4 C P D Q) F0)
Hap : not (eq A P)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A P Y
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C,D : Point
*****
not (parallel P Q P A)
+++++
auto with Geom.
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).
replace (A**P / C**D) with (S A P Q / S4 C P D Q).
replace (P**Y / C**D) with (- r / (2+2) * Py P Q P / S4 C P D Q).
assert (P**Y / C**D = S P Y Q / S4 C P D Q).
assert (Y ** P / C ** D = S Y P Q / S4 C P D Q).
apply (elim_length_ratio_inter_ll_2 Y C D P A P Q P).
unfold inter_ll.
repeat split.
auto with Geom.

*****
Hr : not (eq r F0)
T : not (eq (S4 C P D Q) F0)
Hap : not (eq A P)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A P Y
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C,D : Point
*****
not (parallel P Q P A)
+++++
intro.
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).
replace (A**P / C**D) with (S A P Q / S4 C P D Q).
replace (P**Y / C**D) with (- r / (2+2) * Py P Q P / S4 C P D Q).
assert (P**Y / C**D = S P Y Q / S4 C P D Q).
assert (Y ** P / C ** D = S Y P Q / S4 C P D Q).
apply (elim_length_ratio_inter_ll_2 Y C D P A P Q P).
unfold inter_ll.
repeat split.
auto with Geom.
intro.

*****
H4 : parallel P Q P A
Hr : not (eq r F0)
T : not (eq (S4 C P D Q) F0)
Hap : not (eq A P)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A P Y
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C,D : Point
*****
False
+++++
unfold on_perp_d in H.
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).
replace (A**P / C**D) with (S A P Q / S4 C P D Q).
replace (P**Y / C**D) with (- r / (2+2) * Py P Q P / S4 C P D Q).
assert (P**Y / C**D = S P Y Q / S4 C P D Q).
assert (Y ** P / C ** D = S Y P Q / S4 C P D Q).
apply (elim_length_ratio_inter_ll_2 Y C D P A P Q P).
unfold inter_ll.
repeat split.
auto with Geom.
intro.
unfold on_perp_d in H.

*****
H4 : parallel P Q P A
Hr : not (eq r F0)
T : not (eq (S4 C P D Q) F0)
Hap : not (eq A P)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A P Y
H : and (not (eq P Q))\n (and (perp Y P P Q)\n (and\n (eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y)))\n (not (eq r F0))))
r : F
Y,P,Q,A,C,D : Point
*****
False
+++++
use H.
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).
replace (A**P / C**D) with (S A P Q / S4 C P D Q).
replace (P**Y / C**D) with (- r / (2+2) * Py P Q P / S4 C P D Q).
assert (P**Y / C**D = S P Y Q / S4 C P D Q).
assert (Y ** P / C ** D = S Y P Q / S4 C P D Q).
apply (elim_length_ratio_inter_ll_2 Y C D P A P Q P).
unfold inter_ll.
repeat split.
auto with Geom.
intro.
unfold on_perp_d in H.
use H.

*****
H9 : not (eq r F0)
H6 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H7 : perp Y P P Q
H5 : not (eq P Q)
H4 : parallel P Q P A
Hr : not (eq r F0)
T : not (eq (S4 C P D Q) F0)
Hap : not (eq A P)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A P Y
r : F
Y,P,Q,A,C,D : Point
*****
False
+++++
assert (parallel P Q P Y).
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).
replace (A**P / C**D) with (S A P Q / S4 C P D Q).
replace (P**Y / C**D) with (- r / (2+2) * Py P Q P / S4 C P D Q).
assert (P**Y / C**D = S P Y Q / S4 C P D Q).
assert (Y ** P / C ** D = S Y P Q / S4 C P D Q).
apply (elim_length_ratio_inter_ll_2 Y C D P A P Q P).
unfold inter_ll.
repeat split.
auto with Geom.
intro.
unfold on_perp_d in H.
use H.
assert (parallel P Q P Y).

*****
H9 : not (eq r F0)
H6 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H7 : perp Y P P Q
H5 : not (eq P Q)
H4 : parallel P Q P A
Hr : not (eq r F0)
T : not (eq (S4 C P D Q) F0)
Hap : not (eq A P)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A P Y
r : F
Y,P,Q,A,C,D : Point
*****
parallel P Q P Y
+++++
apply (parallel_transitivity P Q P A P Y).
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).
replace (A**P / C**D) with (S A P Q / S4 C P D Q).
replace (P**Y / C**D) with (- r / (2+2) * Py P Q P / S4 C P D Q).
assert (P**Y / C**D = S P Y Q / S4 C P D Q).
assert (Y ** P / C ** D = S Y P Q / S4 C P D Q).
apply (elim_length_ratio_inter_ll_2 Y C D P A P Q P).
unfold inter_ll.
repeat split.
auto with Geom.
intro.
unfold on_perp_d in H.
use H.
assert (parallel P Q P Y).
apply (parallel_transitivity P Q P A P Y).

*****
H9 : not (eq r F0)
H6 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H7 : perp Y P P Q
H5 : not (eq P Q)
H4 : parallel P Q P A
Hr : not (eq r F0)
T : not (eq (S4 C P D Q) F0)
Hap : not (eq A P)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A P Y
r : F
Y,P,Q,A,C,D : Point
*****
not (eq P A)
+++++
auto.
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).
replace (A**P / C**D) with (S A P Q / S4 C P D Q).
replace (P**Y / C**D) with (- r / (2+2) * Py P Q P / S4 C P D Q).
assert (P**Y / C**D = S P Y Q / S4 C P D Q).
assert (Y ** P / C ** D = S Y P Q / S4 C P D Q).
apply (elim_length_ratio_inter_ll_2 Y C D P A P Q P).
unfold inter_ll.
repeat split.
auto with Geom.
intro.
unfold on_perp_d in H.
use H.
assert (parallel P Q P Y).
apply (parallel_transitivity P Q P A P Y).

*****
H9 : not (eq r F0)
H6 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H7 : perp Y P P Q
H5 : not (eq P Q)
H4 : parallel P Q P A
Hr : not (eq r F0)
T : not (eq (S4 C P D Q) F0)
Hap : not (eq A P)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A P Y
r : F
Y,P,Q,A,C,D : Point
*****
parallel P Q P A
+++++
auto.
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).
replace (A**P / C**D) with (S A P Q / S4 C P D Q).
replace (P**Y / C**D) with (- r / (2+2) * Py P Q P / S4 C P D Q).
assert (P**Y / C**D = S P Y Q / S4 C P D Q).
assert (Y ** P / C ** D = S Y P Q / S4 C P D Q).
apply (elim_length_ratio_inter_ll_2 Y C D P A P Q P).
unfold inter_ll.
repeat split.
auto with Geom.
intro.
unfold on_perp_d in H.
use H.
assert (parallel P Q P Y).
apply (parallel_transitivity P Q P A P Y).

*****
H9 : not (eq r F0)
H6 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H7 : perp Y P P Q
H5 : not (eq P Q)
H4 : parallel P Q P A
Hr : not (eq r F0)
T : not (eq (S4 C P D Q) F0)
Hap : not (eq A P)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A P Y
r : F
Y,P,Q,A,C,D : Point
*****
parallel P A P Y
+++++
unfold parallel.
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).
replace (A**P / C**D) with (S A P Q / S4 C P D Q).
replace (P**Y / C**D) with (- r / (2+2) * Py P Q P / S4 C P D Q).
assert (P**Y / C**D = S P Y Q / S4 C P D Q).
assert (Y ** P / C ** D = S Y P Q / S4 C P D Q).
apply (elim_length_ratio_inter_ll_2 Y C D P A P Q P).
unfold inter_ll.
repeat split.
auto with Geom.
intro.
unfold on_perp_d in H.
use H.
assert (parallel P Q P Y).
apply (parallel_transitivity P Q P A P Y).
unfold parallel.

*****
H9 : not (eq r F0)
H6 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H7 : perp Y P P Q
H5 : not (eq P Q)
H4 : parallel P Q P A
Hr : not (eq r F0)
T : not (eq (S4 C P D Q) F0)
Hap : not (eq A P)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A P Y
r : F
Y,P,Q,A,C,D : Point
*****
eq (S4 P P A Y) F0
+++++
unfold S4.
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).
replace (A**P / C**D) with (S A P Q / S4 C P D Q).
replace (P**Y / C**D) with (- r / (2+2) * Py P Q P / S4 C P D Q).
assert (P**Y / C**D = S P Y Q / S4 C P D Q).
assert (Y ** P / C ** D = S Y P Q / S4 C P D Q).
apply (elim_length_ratio_inter_ll_2 Y C D P A P Q P).
unfold inter_ll.
repeat split.
auto with Geom.
intro.
unfold on_perp_d in H.
use H.
assert (parallel P Q P Y).
apply (parallel_transitivity P Q P A P Y).
unfold parallel.
unfold S4.

*****
H9 : not (eq r F0)
H6 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H7 : perp Y P P Q
H5 : not (eq P Q)
H4 : parallel P Q P A
Hr : not (eq r F0)
T : not (eq (S4 C P D Q) F0)
Hap : not (eq A P)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A P Y
r : F
Y,P,Q,A,C,D : Point
*****
eq (Fplus (S P P A) (S P A Y)) F0
+++++
basic_simpl.
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).
replace (A**P / C**D) with (S A P Q / S4 C P D Q).
replace (P**Y / C**D) with (- r / (2+2) * Py P Q P / S4 C P D Q).
assert (P**Y / C**D = S P Y Q / S4 C P D Q).
assert (Y ** P / C ** D = S Y P Q / S4 C P D Q).
apply (elim_length_ratio_inter_ll_2 Y C D P A P Q P).
unfold inter_ll.
repeat split.
auto with Geom.
intro.
unfold on_perp_d in H.
use H.
assert (parallel P Q P Y).
apply (parallel_transitivity P Q P A P Y).
unfold parallel.
unfold S4.
basic_simpl.

*****
H9 : not (eq r F0)
H6 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H7 : perp Y P P Q
H5 : not (eq P Q)
H4 : parallel P Q P A
Hr : not (eq r F0)
T : not (eq (S4 C P D Q) F0)
Hap : not (eq A P)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A P Y
r : F
Y,P,Q,A,C,D : Point
*****
eq (S P A Y) F0
+++++
unfold Col in H0.
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).
replace (A**P / C**D) with (S A P Q / S4 C P D Q).
replace (P**Y / C**D) with (- r / (2+2) * Py P Q P / S4 C P D Q).
assert (P**Y / C**D = S P Y Q / S4 C P D Q).
assert (Y ** P / C ** D = S Y P Q / S4 C P D Q).
apply (elim_length_ratio_inter_ll_2 Y C D P A P Q P).
unfold inter_ll.
repeat split.
auto with Geom.
intro.
unfold on_perp_d in H.
use H.
assert (parallel P Q P Y).
apply (parallel_transitivity P Q P A P Y).
unfold parallel.
unfold S4.
basic_simpl.
unfold Col in H0.

*****
H9 : not (eq r F0)
H6 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H7 : perp Y P P Q
H5 : not (eq P Q)
H4 : parallel P Q P A
Hr : not (eq r F0)
T : not (eq (S4 C P D Q) F0)
Hap : not (eq A P)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : eq (S A P Y) F0
r : F
Y,P,Q,A,C,D : Point
*****
eq (S P A Y) F0
+++++
uniformize_signed_areas.
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).
replace (A**P / C**D) with (S A P Q / S4 C P D Q).
replace (P**Y / C**D) with (- r / (2+2) * Py P Q P / S4 C P D Q).
assert (P**Y / C**D = S P Y Q / S4 C P D Q).
assert (Y ** P / C ** D = S Y P Q / S4 C P D Q).
apply (elim_length_ratio_inter_ll_2 Y C D P A P Q P).
unfold inter_ll.
repeat split.
auto with Geom.
intro.
unfold on_perp_d in H.
use H.
assert (parallel P Q P Y).
apply (parallel_transitivity P Q P A P Y).
unfold parallel.
unfold S4.
basic_simpl.
unfold Col in H0.
uniformize_signed_areas.

*****
H6 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H0 : eq (S A P Y) F0
H9 : not (eq r F0)
H7 : perp Y P P Q
H5 : not (eq P Q)
H4 : parallel P Q P A
Hr : not (eq r F0)
T : not (eq (S4 C P D Q) F0)
Hap : not (eq A P)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
r : F
Y,P,Q,A,C,D : Point
*****
eq (Fopp (S A P Y)) F0
+++++
rewrite H0.
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).
replace (A**P / C**D) with (S A P Q / S4 C P D Q).
replace (P**Y / C**D) with (- r / (2+2) * Py P Q P / S4 C P D Q).
assert (P**Y / C**D = S P Y Q / S4 C P D Q).
assert (Y ** P / C ** D = S Y P Q / S4 C P D Q).
apply (elim_length_ratio_inter_ll_2 Y C D P A P Q P).
unfold inter_ll.
repeat split.
auto with Geom.
intro.
unfold on_perp_d in H.
use H.
assert (parallel P Q P Y).
apply (parallel_transitivity P Q P A P Y).
unfold parallel.
unfold S4.
basic_simpl.
unfold Col in H0.
uniformize_signed_areas.
rewrite H0.

*****
H6 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H0 : eq (S A P Y) F0
H9 : not (eq r F0)
H7 : perp Y P P Q
H5 : not (eq P Q)
H4 : parallel P Q P A
Hr : not (eq r F0)
T : not (eq (S4 C P D Q) F0)
Hap : not (eq A P)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
r : F
Y,P,Q,A,C,D : Point
*****
eq (Fopp F0) F0
+++++
ring.
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).
replace (A**P / C**D) with (S A P Q / S4 C P D Q).
replace (P**Y / C**D) with (- r / (2+2) * Py P Q P / S4 C P D Q).
assert (P**Y / C**D = S P Y Q / S4 C P D Q).
assert (Y ** P / C ** D = S Y P Q / S4 C P D Q).
apply (elim_length_ratio_inter_ll_2 Y C D P A P Q P).
unfold inter_ll.
repeat split.
auto with Geom.
intro.
unfold on_perp_d in H.
use H.
assert (parallel P Q P Y).

*****
H : parallel P Q P Y
H9 : not (eq r F0)
H6 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H7 : perp Y P P Q
H5 : not (eq P Q)
H4 : parallel P Q P A
Hr : not (eq r F0)
T : not (eq (S4 C P D Q) F0)
Hap : not (eq A P)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A P Y
r : F
Y,P,Q,A,C,D : Point
*****
False
+++++
assert (parallel Y P P Q).
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).
replace (A**P / C**D) with (S A P Q / S4 C P D Q).
replace (P**Y / C**D) with (- r / (2+2) * Py P Q P / S4 C P D Q).
assert (P**Y / C**D = S P Y Q / S4 C P D Q).
assert (Y ** P / C ** D = S Y P Q / S4 C P D Q).
apply (elim_length_ratio_inter_ll_2 Y C D P A P Q P).
unfold inter_ll.
repeat split.
auto with Geom.
intro.
unfold on_perp_d in H.
use H.
assert (parallel P Q P Y).
assert (parallel Y P P Q).

*****
H : parallel P Q P Y
H9 : not (eq r F0)
H6 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H7 : perp Y P P Q
H5 : not (eq P Q)
H4 : parallel P Q P A
Hr : not (eq r F0)
T : not (eq (S4 C P D Q) F0)
Hap : not (eq A P)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A P Y
r : F
Y,P,Q,A,C,D : Point
*****
parallel Y P P Q
+++++
auto with Geom.
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).
replace (A**P / C**D) with (S A P Q / S4 C P D Q).
replace (P**Y / C**D) with (- r / (2+2) * Py P Q P / S4 C P D Q).
assert (P**Y / C**D = S P Y Q / S4 C P D Q).
assert (Y ** P / C ** D = S Y P Q / S4 C P D Q).
apply (elim_length_ratio_inter_ll_2 Y C D P A P Q P).
unfold inter_ll.
repeat split.
auto with Geom.
intro.
unfold on_perp_d in H.
use H.
assert (parallel P Q P Y).
assert (parallel Y P P Q).

*****
H8 : parallel Y P P Q
H : parallel P Q P Y
H9 : not (eq r F0)
H6 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H7 : perp Y P P Q
H5 : not (eq P Q)
H4 : parallel P Q P A
Hr : not (eq r F0)
T : not (eq (S4 C P D Q) F0)
Hap : not (eq A P)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A P Y
r : F
Y,P,Q,A,C,D : Point
*****
False
+++++
idtac.
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).
replace (A**P / C**D) with (S A P Q / S4 C P D Q).
replace (P**Y / C**D) with (- r / (2+2) * Py P Q P / S4 C P D Q).
assert (P**Y / C**D = S P Y Q / S4 C P D Q).
assert (Y ** P / C ** D = S Y P Q / S4 C P D Q).
apply (elim_length_ratio_inter_ll_2 Y C D P A P Q P).
unfold inter_ll.
repeat split.
auto with Geom.
intro.
unfold on_perp_d in H.
use H.
assert (parallel P Q P Y).
assert (parallel Y P P Q).
idtac.

*****
H8 : parallel Y P P Q
H : parallel P Q P Y
H9 : not (eq r F0)
H6 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H7 : perp Y P P Q
H5 : not (eq P Q)
H4 : parallel P Q P A
Hr : not (eq r F0)
T : not (eq (S4 C P D Q) F0)
Hap : not (eq A P)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A P Y
r : F
Y,P,Q,A,C,D : Point
*****
False
+++++
apply (perp_not_parallel Y P P Q H7).
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).
replace (A**P / C**D) with (S A P Q / S4 C P D Q).
replace (P**Y / C**D) with (- r / (2+2) * Py P Q P / S4 C P D Q).
assert (P**Y / C**D = S P Y Q / S4 C P D Q).
assert (Y ** P / C ** D = S Y P Q / S4 C P D Q).
apply (elim_length_ratio_inter_ll_2 Y C D P A P Q P).
unfold inter_ll.
repeat split.
auto with Geom.
intro.
unfold on_perp_d in H.
use H.
assert (parallel P Q P Y).
assert (parallel Y P P Q).
idtac.
apply (perp_not_parallel Y P P Q H7).

*****
H8 : parallel Y P P Q
H : parallel P Q P Y
H9 : not (eq r F0)
H6 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H7 : perp Y P P Q
H5 : not (eq P Q)
H4 : parallel P Q P A
Hr : not (eq r F0)
T : not (eq (S4 C P D Q) F0)
Hap : not (eq A P)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A P Y
r : F
Y,P,Q,A,C,D : Point
*****
not (eq Y P)
+++++
intro.
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).
replace (A**P / C**D) with (S A P Q / S4 C P D Q).
replace (P**Y / C**D) with (- r / (2+2) * Py P Q P / S4 C P D Q).
assert (P**Y / C**D = S P Y Q / S4 C P D Q).
assert (Y ** P / C ** D = S Y P Q / S4 C P D Q).
apply (elim_length_ratio_inter_ll_2 Y C D P A P Q P).
unfold inter_ll.
repeat split.
auto with Geom.
intro.
unfold on_perp_d in H.
use H.
assert (parallel P Q P Y).
assert (parallel Y P P Q).
idtac.
apply (perp_not_parallel Y P P Q H7).
intro.

*****
H10 : eq Y P
H8 : parallel Y P P Q
H : parallel P Q P Y
H9 : not (eq r F0)
H6 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H7 : perp Y P P Q
H5 : not (eq P Q)
H4 : parallel P Q P A
Hr : not (eq r F0)
T : not (eq (S4 C P D Q) F0)
Hap : not (eq A P)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A P Y
r : F
Y,P,Q,A,C,D : Point
*****
False
+++++
subst Y.
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).
replace (A**P / C**D) with (S A P Q / S4 C P D Q).
replace (P**Y / C**D) with (- r / (2+2) * Py P Q P / S4 C P D Q).
assert (P**Y / C**D = S P Y Q / S4 C P D Q).
assert (Y ** P / C ** D = S Y P Q / S4 C P D Q).
apply (elim_length_ratio_inter_ll_2 Y C D P A P Q P).
unfold inter_ll.
repeat split.
auto with Geom.
intro.
unfold on_perp_d in H.
use H.
assert (parallel P Q P Y).
assert (parallel Y P P Q).
idtac.
apply (perp_not_parallel Y P P Q H7).
intro.
subst Y.

*****
H : parallel P Q P P
H8 : parallel P P P Q
H9 : not (eq r F0)
H7 : perp P P P Q
H6 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q P))
H5 : not (eq P Q)
H4 : parallel P Q P A
Hr : not (eq r F0)
T : not (eq (S4 C P D Q) F0)
H3,Hap : not (eq A P)
H2 : not (eq C D)
H0 : Col A P P
H1 : parallel A P C D
r : F
P,Q,A,C,D : Point
*****
False
+++++
basic_simpl.
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).
replace (A**P / C**D) with (S A P Q / S4 C P D Q).
replace (P**Y / C**D) with (- r / (2+2) * Py P Q P / S4 C P D Q).
assert (P**Y / C**D = S P Y Q / S4 C P D Q).
assert (Y ** P / C ** D = S Y P Q / S4 C P D Q).
apply (elim_length_ratio_inter_ll_2 Y C D P A P Q P).
unfold inter_ll.
repeat split.
auto with Geom.
intro.
unfold on_perp_d in H.
use H.
assert (parallel P Q P Y).
assert (parallel Y P P Q).
idtac.
apply (perp_not_parallel Y P P Q H7).
intro.
subst Y.
basic_simpl.

*****
H : parallel P Q P P
H8 : parallel P P P Q
H9 : not (eq r F0)
H7 : perp P P P Q
H6 : eq (Fmult r (Py P Q P)) F0
H5 : not (eq P Q)
H4 : parallel P Q P A
Hr : not (eq r F0)
T : not (eq (S4 C P D Q) F0)
H3,Hap : not (eq A P)
H2 : not (eq C D)
H0 : Col A P P
H1 : parallel A P C D
r : F
P,Q,A,C,D : Point
*****
False
+++++
IsoleVar r H6.
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).
replace (A**P / C**D) with (S A P Q / S4 C P D Q).
replace (P**Y / C**D) with (- r / (2+2) * Py P Q P / S4 C P D Q).
assert (P**Y / C**D = S P Y Q / S4 C P D Q).
assert (Y ** P / C ** D = S Y P Q / S4 C P D Q).
apply (elim_length_ratio_inter_ll_2 Y C D P A P Q P).
unfold inter_ll.
repeat split.
auto with Geom.
intro.
unfold on_perp_d in H.
use H.
assert (parallel P Q P Y).
assert (parallel Y P P Q).
idtac.
apply (perp_not_parallel Y P P Q H7).
intro.
subst Y.
basic_simpl.
IsoleVar r H6.

*****
H6 : eq r (Fdiv F0 (Py P Q P))
H10 : not (eq (Py P Q P) F0)
H : parallel P Q P P
H8 : parallel P P P Q
H9 : not (eq r F0)
H7 : perp P P P Q
H5 : not (eq P Q)
H4 : parallel P Q P A
Hr : not (eq r F0)
T : not (eq (S4 C P D Q) F0)
H3,Hap : not (eq A P)
H2 : not (eq C D)
H0 : Col A P P
H1 : parallel A P C D
r : F
P,Q,A,C,D : Point
*****
False
+++++
replace (0 / Py P Q P) with 0 in H6.
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).
replace (A**P / C**D) with (S A P Q / S4 C P D Q).
replace (P**Y / C**D) with (- r / (2+2) * Py P Q P / S4 C P D Q).
assert (P**Y / C**D = S P Y Q / S4 C P D Q).
assert (Y ** P / C ** D = S Y P Q / S4 C P D Q).
apply (elim_length_ratio_inter_ll_2 Y C D P A P Q P).
unfold inter_ll.
repeat split.
auto with Geom.
intro.
unfold on_perp_d in H.
use H.
assert (parallel P Q P Y).
assert (parallel Y P P Q).
idtac.
apply (perp_not_parallel Y P P Q H7).
intro.
subst Y.
basic_simpl.
IsoleVar r H6.
replace (0 / Py P Q P) with 0 in H6.

*****
H6 : eq r F0
H10 : not (eq (Py P Q P) F0)
H : parallel P Q P P
H8 : parallel P P P Q
H9 : not (eq r F0)
H7 : perp P P P Q
H5 : not (eq P Q)
H4 : parallel P Q P A
Hr : not (eq r F0)
T : not (eq (S4 C P D Q) F0)
H3,Hap : not (eq A P)
H2 : not (eq C D)
H0 : Col A P P
H1 : parallel A P C D
r : F
P,Q,A,C,D : Point
*****
False
+++++
auto.
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).
replace (A**P / C**D) with (S A P Q / S4 C P D Q).
replace (P**Y / C**D) with (- r / (2+2) * Py P Q P / S4 C P D Q).
assert (P**Y / C**D = S P Y Q / S4 C P D Q).
assert (Y ** P / C ** D = S Y P Q / S4 C P D Q).
apply (elim_length_ratio_inter_ll_2 Y C D P A P Q P).
unfold inter_ll.
repeat split.
auto with Geom.
intro.
unfold on_perp_d in H.
use H.
assert (parallel P Q P Y).
assert (parallel Y P P Q).
idtac.
apply (perp_not_parallel Y P P Q H7).
intro.
subst Y.
basic_simpl.
IsoleVar r H6.
replace (0 / Py P Q P) with 0 in H6.

*****
H6 : eq r (Fdiv F0 (Py P Q P))
H10 : not (eq (Py P Q P) F0)
H : parallel P Q P P
H8 : parallel P P P Q
H9 : not (eq r F0)
H7 : perp P P P Q
H5 : not (eq P Q)
H4 : parallel P Q P A
Hr : not (eq r F0)
T : not (eq (S4 C P D Q) F0)
H3,Hap : not (eq A P)
H2 : not (eq C D)
H0 : Col A P P
H1 : parallel A P C D
r : F
P,Q,A,C,D : Point
*****
eq F0 (Fdiv F0 (Py P Q P))
+++++
field.
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).
replace (A**P / C**D) with (S A P Q / S4 C P D Q).
replace (P**Y / C**D) with (- r / (2+2) * Py P Q P / S4 C P D Q).
assert (P**Y / C**D = S P Y Q / S4 C P D Q).
assert (Y ** P / C ** D = S Y P Q / S4 C P D Q).
apply (elim_length_ratio_inter_ll_2 Y C D P A P Q P).
unfold inter_ll.
repeat split.
auto with Geom.
intro.
unfold on_perp_d in H.
use H.
assert (parallel P Q P Y).
assert (parallel Y P P Q).
idtac.
apply (perp_not_parallel Y P P Q H7).
intro.
subst Y.
basic_simpl.
IsoleVar r H6.
replace (0 / Py P Q P) with 0 in H6.
field.

*****
H6 : eq r (Fdiv F0 (Py P Q P))
H10 : not (eq (Py P Q P) F0)
H : parallel P Q P P
H8 : parallel P P P Q
H9 : not (eq r F0)
H7 : perp P P P Q
H5 : not (eq P Q)
H4 : parallel P Q P A
Hr : not (eq r F0)
T : not (eq (S4 C P D Q) F0)
H3,Hap : not (eq A P)
H2 : not (eq C D)
H0 : Col A P P
H1 : parallel A P C D
r : F
P,Q,A,C,D : Point
*****
not (eq (Py P Q P) F0)
+++++
auto with Geom.
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).
replace (A**P / C**D) with (S A P Q / S4 C P D Q).
replace (P**Y / C**D) with (- r / (2+2) * Py P Q P / S4 C P D Q).
assert (P**Y / C**D = S P Y Q / S4 C P D Q).
assert (Y ** P / C ** D = S Y P Q / S4 C P D Q).
apply (elim_length_ratio_inter_ll_2 Y C D P A P Q P).
unfold inter_ll.
repeat split.
auto with Geom.
intro.
unfold on_perp_d in H.
use H.
assert (parallel P Q P Y).
assert (parallel Y P P Q).
idtac.
apply (perp_not_parallel Y P P Q H7).
intro.
subst Y.
basic_simpl.
IsoleVar r H6.

*****
H : parallel P Q P P
H8 : parallel P P P Q
H9 : not (eq r F0)
H7 : perp P P P Q
H6 : eq (Fmult r (Py P Q P)) F0
H5 : not (eq P Q)
H4 : parallel P Q P A
Hr : not (eq r F0)
T : not (eq (S4 C P D Q) F0)
H3,Hap : not (eq A P)
H2 : not (eq C D)
H0 : Col A P P
H1 : parallel A P C D
r : F
P,Q,A,C,D : Point
*****
not (eq (Py P Q P) F0)
+++++
auto with Geom.
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).
replace (A**P / C**D) with (S A P Q / S4 C P D Q).
replace (P**Y / C**D) with (- r / (2+2) * Py P Q P / S4 C P D Q).
assert (P**Y / C**D = S P Y Q / S4 C P D Q).
assert (Y ** P / C ** D = S Y P Q / S4 C P D Q).
apply (elim_length_ratio_inter_ll_2 Y C D P A P Q P).
unfold inter_ll.
repeat split.
auto with Geom.
intro.
unfold on_perp_d in H.
use H.
assert (parallel P Q P Y).
assert (parallel Y P P Q).
idtac.
apply (perp_not_parallel Y P P Q H7).

*****
H8 : parallel Y P P Q
H : parallel P Q P Y
H9 : not (eq r F0)
H6 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H7 : perp Y P P Q
H5 : not (eq P Q)
H4 : parallel P Q P A
Hr : not (eq r F0)
T : not (eq (S4 C P D Q) F0)
Hap : not (eq A P)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A P Y
r : F
Y,P,Q,A,C,D : Point
*****
not (eq P Q)
+++++
auto.
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).
replace (A**P / C**D) with (S A P Q / S4 C P D Q).
replace (P**Y / C**D) with (- r / (2+2) * Py P Q P / S4 C P D Q).
assert (P**Y / C**D = S P Y Q / S4 C P D Q).
assert (Y ** P / C ** D = S Y P Q / S4 C P D Q).
apply (elim_length_ratio_inter_ll_2 Y C D P A P Q P).
unfold inter_ll.
repeat split.
auto with Geom.
intro.
unfold on_perp_d in H.
use H.
assert (parallel P Q P Y).
assert (parallel Y P P Q).
idtac.
apply (perp_not_parallel Y P P Q H7).

*****
H8 : parallel Y P P Q
H : parallel P Q P Y
H9 : not (eq r F0)
H6 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H7 : perp Y P P Q
H5 : not (eq P Q)
H4 : parallel P Q P A
Hr : not (eq r F0)
T : not (eq (S4 C P D Q) F0)
Hap : not (eq A P)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A P Y
r : F
Y,P,Q,A,C,D : Point
*****
parallel Y P P Q
+++++
auto.
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).
replace (A**P / C**D) with (S A P Q / S4 C P D Q).
replace (P**Y / C**D) with (- r / (2+2) * Py P Q P / S4 C P D Q).
assert (P**Y / C**D = S P Y Q / S4 C P D Q).
assert (Y ** P / C ** D = S Y P Q / S4 C P D Q).
apply (elim_length_ratio_inter_ll_2 Y C D P A P Q P).

*****
Hr : not (eq r F0)
T : not (eq (S4 C P D Q) F0)
Hap : not (eq A P)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A P Y
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C,D : Point
*****
eq (S Y P A) F0
+++++
unfold Col in *.
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).
replace (A**P / C**D) with (S A P Q / S4 C P D Q).
replace (P**Y / C**D) with (- r / (2+2) * Py P Q P / S4 C P D Q).
assert (P**Y / C**D = S P Y Q / S4 C P D Q).
assert (Y ** P / C ** D = S Y P Q / S4 C P D Q).
apply (elim_length_ratio_inter_ll_2 Y C D P A P Q P).
unfold Col in *.

*****
Hr : not (eq r F0)
T : not (eq (S4 C P D Q) F0)
Hap : not (eq A P)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : eq (S A P Y) F0
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C,D : Point
*****
eq (S Y P A) F0
+++++
uniformize_signed_areas.
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).
replace (A**P / C**D) with (S A P Q / S4 C P D Q).
replace (P**Y / C**D) with (- r / (2+2) * Py P Q P / S4 C P D Q).
assert (P**Y / C**D = S P Y Q / S4 C P D Q).
assert (Y ** P / C ** D = S Y P Q / S4 C P D Q).
apply (elim_length_ratio_inter_ll_2 Y C D P A P Q P).
unfold Col in *.
uniformize_signed_areas.

*****
H0 : eq (S A P Y) F0
Hr : not (eq r F0)
T : not (eq (S4 C P D Q) F0)
Hap : not (eq A P)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C,D : Point
*****
eq (Fopp (S A P Y)) F0
+++++
rewrite H0.
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).
replace (A**P / C**D) with (S A P Q / S4 C P D Q).
replace (P**Y / C**D) with (- r / (2+2) * Py P Q P / S4 C P D Q).
assert (P**Y / C**D = S P Y Q / S4 C P D Q).
assert (Y ** P / C ** D = S Y P Q / S4 C P D Q).
apply (elim_length_ratio_inter_ll_2 Y C D P A P Q P).
unfold Col in *.
uniformize_signed_areas.
rewrite H0.

*****
H0 : eq (S A P Y) F0
Hr : not (eq r F0)
T : not (eq (S4 C P D Q) F0)
Hap : not (eq A P)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C,D : Point
*****
eq (Fopp F0) F0
+++++
ring.
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).
replace (A**P / C**D) with (S A P Q / S4 C P D Q).
replace (P**Y / C**D) with (- r / (2+2) * Py P Q P / S4 C P D Q).
assert (P**Y / C**D = S P Y Q / S4 C P D Q).
assert (Y ** P / C ** D = S Y P Q / S4 C P D Q).
apply (elim_length_ratio_inter_ll_2 Y C D P A P Q P).

*****
Hr : not (eq r F0)
T : not (eq (S4 C P D Q) F0)
Hap : not (eq A P)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A P Y
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C,D : Point
*****
not (eq C D)
+++++
auto.
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).
replace (A**P / C**D) with (S A P Q / S4 C P D Q).
replace (P**Y / C**D) with (- r / (2+2) * Py P Q P / S4 C P D Q).
assert (P**Y / C**D = S P Y Q / S4 C P D Q).
assert (Y ** P / C ** D = S Y P Q / S4 C P D Q).
apply (elim_length_ratio_inter_ll_2 Y C D P A P Q P).

*****
Hr : not (eq r F0)
T : not (eq (S4 C P D Q) F0)
Hap : not (eq A P)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A P Y
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C,D : Point
*****
parallel Y P C D
+++++
assert (parallel C D P Y).
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).
replace (A**P / C**D) with (S A P Q / S4 C P D Q).
replace (P**Y / C**D) with (- r / (2+2) * Py P Q P / S4 C P D Q).
assert (P**Y / C**D = S P Y Q / S4 C P D Q).
assert (Y ** P / C ** D = S Y P Q / S4 C P D Q).
apply (elim_length_ratio_inter_ll_2 Y C D P A P Q P).
assert (parallel C D P Y).

*****
Hr : not (eq r F0)
T : not (eq (S4 C P D Q) F0)
Hap : not (eq A P)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A P Y
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C,D : Point
*****
parallel C D P Y
+++++
apply (parallel_transitivity C D A Y P Y).
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).
replace (A**P / C**D) with (S A P Q / S4 C P D Q).
replace (P**Y / C**D) with (- r / (2+2) * Py P Q P / S4 C P D Q).
assert (P**Y / C**D = S P Y Q / S4 C P D Q).
assert (Y ** P / C ** D = S Y P Q / S4 C P D Q).
apply (elim_length_ratio_inter_ll_2 Y C D P A P Q P).
assert (parallel C D P Y).
apply (parallel_transitivity C D A Y P Y).

*****
Hr : not (eq r F0)
T : not (eq (S4 C P D Q) F0)
Hap : not (eq A P)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A P Y
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C,D : Point
*****
not (eq A Y)
+++++
auto with Geom.
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).
replace (A**P / C**D) with (S A P Q / S4 C P D Q).
replace (P**Y / C**D) with (- r / (2+2) * Py P Q P / S4 C P D Q).
assert (P**Y / C**D = S P Y Q / S4 C P D Q).
assert (Y ** P / C ** D = S Y P Q / S4 C P D Q).
apply (elim_length_ratio_inter_ll_2 Y C D P A P Q P).
assert (parallel C D P Y).
apply (parallel_transitivity C D A Y P Y).

*****
Hr : not (eq r F0)
T : not (eq (S4 C P D Q) F0)
Hap : not (eq A P)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A P Y
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C,D : Point
*****
parallel C D A Y
+++++
auto with Geom.
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).
replace (A**P / C**D) with (S A P Q / S4 C P D Q).
replace (P**Y / C**D) with (- r / (2+2) * Py P Q P / S4 C P D Q).
assert (P**Y / C**D = S P Y Q / S4 C P D Q).
assert (Y ** P / C ** D = S Y P Q / S4 C P D Q).
apply (elim_length_ratio_inter_ll_2 Y C D P A P Q P).
assert (parallel C D P Y).
apply (parallel_transitivity C D A Y P Y).

*****
Hr : not (eq r F0)
T : not (eq (S4 C P D Q) F0)
Hap : not (eq A P)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A P Y
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C,D : Point
*****
parallel A Y P Y
+++++
auto with Geom.
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).
replace (A**P / C**D) with (S A P Q / S4 C P D Q).
replace (P**Y / C**D) with (- r / (2+2) * Py P Q P / S4 C P D Q).
assert (P**Y / C**D = S P Y Q / S4 C P D Q).
assert (Y ** P / C ** D = S Y P Q / S4 C P D Q).
apply (elim_length_ratio_inter_ll_2 Y C D P A P Q P).
assert (parallel C D P Y).

*****
H4 : parallel C D P Y
Hr : not (eq r F0)
T : not (eq (S4 C P D Q) F0)
Hap : not (eq A P)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A P Y
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C,D : Point
*****
parallel Y P C D
+++++
auto with Geom.
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).
replace (A**P / C**D) with (S A P Q / S4 C P D Q).
replace (P**Y / C**D) with (- r / (2+2) * Py P Q P / S4 C P D Q).
assert (P**Y / C**D = S P Y Q / S4 C P D Q).
assert (Y ** P / C ** D = S Y P Q / S4 C P D Q).
apply (elim_length_ratio_inter_ll_2 Y C D P A P Q P).

*****
Hr : not (eq r F0)
T : not (eq (S4 C P D Q) F0)
Hap : not (eq A P)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A P Y
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C,D : Point
*****
not (eq Y P)
+++++
intro.
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).
replace (A**P / C**D) with (S A P Q / S4 C P D Q).
replace (P**Y / C**D) with (- r / (2+2) * Py P Q P / S4 C P D Q).
assert (P**Y / C**D = S P Y Q / S4 C P D Q).
assert (Y ** P / C ** D = S Y P Q / S4 C P D Q).
apply (elim_length_ratio_inter_ll_2 Y C D P A P Q P).
intro.

*****
H4 : eq Y P
Hr : not (eq r F0)
T : not (eq (S4 C P D Q) F0)
Hap : not (eq A P)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A P Y
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C,D : Point
*****
False
+++++
subst.
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).
replace (A**P / C**D) with (S A P Q / S4 C P D Q).
replace (P**Y / C**D) with (- r / (2+2) * Py P Q P / S4 C P D Q).
assert (P**Y / C**D = S P Y Q / S4 C P D Q).
assert (Y ** P / C ** D = S Y P Q / S4 C P D Q).
apply (elim_length_ratio_inter_ll_2 Y C D P A P Q P).
intro.
subst.

*****
Hr : not (eq r F0)
T : not (eq (S4 C P D Q) F0)
H3,Hap : not (eq A P)
H2 : not (eq C D)
H : on_perp_d P P Q r
H0 : Col A P P
H1 : parallel A P C D
r : F
P,Q,A,C,D : Point
*****
False
+++++
unfold on_perp_d in H.
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).
replace (A**P / C**D) with (S A P Q / S4 C P D Q).
replace (P**Y / C**D) with (- r / (2+2) * Py P Q P / S4 C P D Q).
assert (P**Y / C**D = S P Y Q / S4 C P D Q).
assert (Y ** P / C ** D = S Y P Q / S4 C P D Q).
apply (elim_length_ratio_inter_ll_2 Y C D P A P Q P).
intro.
subst.
unfold on_perp_d in H.

*****
Hr : not (eq r F0)
T : not (eq (S4 C P D Q) F0)
H3,Hap : not (eq A P)
H2 : not (eq C D)
H : and (not (eq P Q))\n (and (perp P P P Q)\n (and\n (eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q P)))\n (not (eq r F0))))
H0 : Col A P P
H1 : parallel A P C D
r : F
P,Q,A,C,D : Point
*****
False
+++++
use H.
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).
replace (A**P / C**D) with (S A P Q / S4 C P D Q).
replace (P**Y / C**D) with (- r / (2+2) * Py P Q P / S4 C P D Q).
assert (P**Y / C**D = S P Y Q / S4 C P D Q).
assert (Y ** P / C ** D = S Y P Q / S4 C P D Q).
apply (elim_length_ratio_inter_ll_2 Y C D P A P Q P).
intro.
subst.
unfold on_perp_d in H.
use H.

*****
H8 : not (eq r F0)
H5 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q P))
H6 : perp P P P Q
H4 : not (eq P Q)
Hr : not (eq r F0)
T : not (eq (S4 C P D Q) F0)
H3,Hap : not (eq A P)
H2 : not (eq C D)
H0 : Col A P P
H1 : parallel A P C D
r : F
P,Q,A,C,D : Point
*****
False
+++++
basic_simpl.
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).
replace (A**P / C**D) with (S A P Q / S4 C P D Q).
replace (P**Y / C**D) with (- r / (2+2) * Py P Q P / S4 C P D Q).
assert (P**Y / C**D = S P Y Q / S4 C P D Q).
assert (Y ** P / C ** D = S Y P Q / S4 C P D Q).
apply (elim_length_ratio_inter_ll_2 Y C D P A P Q P).
intro.
subst.
unfold on_perp_d in H.
use H.
basic_simpl.

*****
H8 : not (eq r F0)
H5 : eq (Fmult r (Py P Q P)) F0
H6 : perp P P P Q
H4 : not (eq P Q)
Hr : not (eq r F0)
T : not (eq (S4 C P D Q) F0)
H3,Hap : not (eq A P)
H2 : not (eq C D)
H0 : Col A P P
H1 : parallel A P C D
r : F
P,Q,A,C,D : Point
*****
False
+++++
IsoleVar r H5.
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).
replace (A**P / C**D) with (S A P Q / S4 C P D Q).
replace (P**Y / C**D) with (- r / (2+2) * Py P Q P / S4 C P D Q).
assert (P**Y / C**D = S P Y Q / S4 C P D Q).
assert (Y ** P / C ** D = S Y P Q / S4 C P D Q).
apply (elim_length_ratio_inter_ll_2 Y C D P A P Q P).
intro.
subst.
unfold on_perp_d in H.
use H.
basic_simpl.
IsoleVar r H5.

*****
H5 : eq r (Fdiv F0 (Py P Q P))
H : not (eq (Py P Q P) F0)
H8 : not (eq r F0)
H6 : perp P P P Q
H4 : not (eq P Q)
Hr : not (eq r F0)
T : not (eq (S4 C P D Q) F0)
H3,Hap : not (eq A P)
H2 : not (eq C D)
H0 : Col A P P
H1 : parallel A P C D
r : F
P,Q,A,C,D : Point
*****
False
+++++
replace (0 / Py P Q P) with 0 in H5.
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).
replace (A**P / C**D) with (S A P Q / S4 C P D Q).
replace (P**Y / C**D) with (- r / (2+2) * Py P Q P / S4 C P D Q).
assert (P**Y / C**D = S P Y Q / S4 C P D Q).
assert (Y ** P / C ** D = S Y P Q / S4 C P D Q).
apply (elim_length_ratio_inter_ll_2 Y C D P A P Q P).
intro.
subst.
unfold on_perp_d in H.
use H.
basic_simpl.
IsoleVar r H5.
replace (0 / Py P Q P) with 0 in H5.

*****
H5 : eq r F0
H : not (eq (Py P Q P) F0)
H8 : not (eq r F0)
H6 : perp P P P Q
H4 : not (eq P Q)
Hr : not (eq r F0)
T : not (eq (S4 C P D Q) F0)
H3,Hap : not (eq A P)
H2 : not (eq C D)
H0 : Col A P P
H1 : parallel A P C D
r : F
P,Q,A,C,D : Point
*****
False
+++++
auto.
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).
replace (A**P / C**D) with (S A P Q / S4 C P D Q).
replace (P**Y / C**D) with (- r / (2+2) * Py P Q P / S4 C P D Q).
assert (P**Y / C**D = S P Y Q / S4 C P D Q).
assert (Y ** P / C ** D = S Y P Q / S4 C P D Q).
apply (elim_length_ratio_inter_ll_2 Y C D P A P Q P).
intro.
subst.
unfold on_perp_d in H.
use H.
basic_simpl.
IsoleVar r H5.
replace (0 / Py P Q P) with 0 in H5.

*****
H5 : eq r (Fdiv F0 (Py P Q P))
H : not (eq (Py P Q P) F0)
H8 : not (eq r F0)
H6 : perp P P P Q
H4 : not (eq P Q)
Hr : not (eq r F0)
T : not (eq (S4 C P D Q) F0)
H3,Hap : not (eq A P)
H2 : not (eq C D)
H0 : Col A P P
H1 : parallel A P C D
r : F
P,Q,A,C,D : Point
*****
eq F0 (Fdiv F0 (Py P Q P))
+++++
field.
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).
replace (A**P / C**D) with (S A P Q / S4 C P D Q).
replace (P**Y / C**D) with (- r / (2+2) * Py P Q P / S4 C P D Q).
assert (P**Y / C**D = S P Y Q / S4 C P D Q).
assert (Y ** P / C ** D = S Y P Q / S4 C P D Q).
apply (elim_length_ratio_inter_ll_2 Y C D P A P Q P).
intro.
subst.
unfold on_perp_d in H.
use H.
basic_simpl.
IsoleVar r H5.
replace (0 / Py P Q P) with 0 in H5.
field.

*****
H5 : eq r (Fdiv F0 (Py P Q P))
H : not (eq (Py P Q P) F0)
H8 : not (eq r F0)
H6 : perp P P P Q
H4 : not (eq P Q)
Hr : not (eq r F0)
T : not (eq (S4 C P D Q) F0)
H3,Hap : not (eq A P)
H2 : not (eq C D)
H0 : Col A P P
H1 : parallel A P C D
r : F
P,Q,A,C,D : Point
*****
not (eq (Py P Q P) F0)
+++++
solve_conds.
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).
replace (A**P / C**D) with (S A P Q / S4 C P D Q).
replace (P**Y / C**D) with (- r / (2+2) * Py P Q P / S4 C P D Q).
assert (P**Y / C**D = S P Y Q / S4 C P D Q).
assert (Y ** P / C ** D = S Y P Q / S4 C P D Q).
apply (elim_length_ratio_inter_ll_2 Y C D P A P Q P).
intro.
subst.
unfold on_perp_d in H.
use H.
basic_simpl.
IsoleVar r H5.

*****
H8 : not (eq r F0)
H5 : eq (Fmult r (Py P Q P)) F0
H6 : perp P P P Q
H4 : not (eq P Q)
Hr : not (eq r F0)
T : not (eq (S4 C P D Q) F0)
H3,Hap : not (eq A P)
H2 : not (eq C D)
H0 : Col A P P
H1 : parallel A P C D
r : F
P,Q,A,C,D : Point
*****
not (eq (Py P Q P) F0)
+++++
auto with Geom.
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).
replace (A**P / C**D) with (S A P Q / S4 C P D Q).
replace (P**Y / C**D) with (- r / (2+2) * Py P Q P / S4 C P D Q).
assert (P**Y / C**D = S P Y Q / S4 C P D Q).
assert (Y ** P / C ** D = S Y P Q / S4 C P D Q).

*****
H4 : eq (Fdiv (DSeg Y P) (DSeg C D)) (Fdiv (S Y P Q) (S4 C P D Q))
Hr : not (eq r F0)
T : not (eq (S4 C P D Q) F0)
Hap : not (eq A P)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A P Y
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C,D : Point
*****
eq (Fdiv (DSeg P Y) (DSeg C D)) (Fdiv (S P Y Q) (S4 C P D Q))
+++++
assert (parallel C D Y P).
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).
replace (A**P / C**D) with (S A P Q / S4 C P D Q).
replace (P**Y / C**D) with (- r / (2+2) * Py P Q P / S4 C P D Q).
assert (P**Y / C**D = S P Y Q / S4 C P D Q).
assert (Y ** P / C ** D = S Y P Q / S4 C P D Q).
assert (parallel C D Y P).

*****
H4 : eq (Fdiv (DSeg Y P) (DSeg C D)) (Fdiv (S Y P Q) (S4 C P D Q))
Hr : not (eq r F0)
T : not (eq (S4 C P D Q) F0)
Hap : not (eq A P)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A P Y
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C,D : Point
*****
parallel C D Y P
+++++
apply (parallel_transitivity C D A Y Y P H3).
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).
replace (A**P / C**D) with (S A P Q / S4 C P D Q).
replace (P**Y / C**D) with (- r / (2+2) * Py P Q P / S4 C P D Q).
assert (P**Y / C**D = S P Y Q / S4 C P D Q).
assert (Y ** P / C ** D = S Y P Q / S4 C P D Q).
assert (parallel C D Y P).
apply (parallel_transitivity C D A Y Y P H3).

*****
H4 : eq (Fdiv (DSeg Y P) (DSeg C D)) (Fdiv (S Y P Q) (S4 C P D Q))
Hr : not (eq r F0)
T : not (eq (S4 C P D Q) F0)
Hap : not (eq A P)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A P Y
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C,D : Point
*****
parallel C D A Y
+++++
auto with Geom.
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).
replace (A**P / C**D) with (S A P Q / S4 C P D Q).
replace (P**Y / C**D) with (- r / (2+2) * Py P Q P / S4 C P D Q).
assert (P**Y / C**D = S P Y Q / S4 C P D Q).
assert (Y ** P / C ** D = S Y P Q / S4 C P D Q).
assert (parallel C D Y P).
apply (parallel_transitivity C D A Y Y P H3).

*****
H4 : eq (Fdiv (DSeg Y P) (DSeg C D)) (Fdiv (S Y P Q) (S4 C P D Q))
Hr : not (eq r F0)
T : not (eq (S4 C P D Q) F0)
Hap : not (eq A P)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A P Y
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C,D : Point
*****
parallel A Y Y P
+++++
auto with Geom.
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).
replace (A**P / C**D) with (S A P Q / S4 C P D Q).
replace (P**Y / C**D) with (- r / (2+2) * Py P Q P / S4 C P D Q).
assert (P**Y / C**D = S P Y Q / S4 C P D Q).
assert (Y ** P / C ** D = S Y P Q / S4 C P D Q).
assert (parallel C D Y P).

*****
H5 : parallel C D Y P
H4 : eq (Fdiv (DSeg Y P) (DSeg C D)) (Fdiv (S Y P Q) (S4 C P D Q))
Hr : not (eq r F0)
T : not (eq (S4 C P D Q) F0)
Hap : not (eq A P)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A P Y
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C,D : Point
*****
eq (Fdiv (DSeg P Y) (DSeg C D)) (Fdiv (S P Y Q) (S4 C P D Q))
+++++
replace (P ** Y / C ** D) with (- ( Y**P / C**D)).
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).
replace (A**P / C**D) with (S A P Q / S4 C P D Q).
replace (P**Y / C**D) with (- r / (2+2) * Py P Q P / S4 C P D Q).
assert (P**Y / C**D = S P Y Q / S4 C P D Q).
assert (Y ** P / C ** D = S Y P Q / S4 C P D Q).
assert (parallel C D Y P).
replace (P ** Y / C ** D) with (- ( Y**P / C**D)).

*****
H5 : parallel C D Y P
H4 : eq (Fdiv (DSeg Y P) (DSeg C D)) (Fdiv (S Y P Q) (S4 C P D Q))
Hr : not (eq r F0)
T : not (eq (S4 C P D Q) F0)
Hap : not (eq A P)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A P Y
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C,D : Point
*****
eq (Fopp (Fdiv (DSeg Y P) (DSeg C D))) (Fdiv (S P Y Q) (S4 C P D Q))
+++++
rewrite H4.
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).
replace (A**P / C**D) with (S A P Q / S4 C P D Q).
replace (P**Y / C**D) with (- r / (2+2) * Py P Q P / S4 C P D Q).
assert (P**Y / C**D = S P Y Q / S4 C P D Q).
assert (Y ** P / C ** D = S Y P Q / S4 C P D Q).
assert (parallel C D Y P).
replace (P ** Y / C ** D) with (- ( Y**P / C**D)).
rewrite H4.

*****
H5 : parallel C D Y P
H4 : eq (Fdiv (DSeg Y P) (DSeg C D)) (Fdiv (S Y P Q) (S4 C P D Q))
Hr : not (eq r F0)
T : not (eq (S4 C P D Q) F0)
Hap : not (eq A P)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A P Y
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C,D : Point
*****
eq (Fopp (Fdiv (S Y P Q) (S4 C P D Q))) (Fdiv (S P Y Q) (S4 C P D Q))
+++++
uniformize_signed_areas.
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).
replace (A**P / C**D) with (S A P Q / S4 C P D Q).
replace (P**Y / C**D) with (- r / (2+2) * Py P Q P / S4 C P D Q).
assert (P**Y / C**D = S P Y Q / S4 C P D Q).
assert (Y ** P / C ** D = S Y P Q / S4 C P D Q).
assert (parallel C D Y P).
replace (P ** Y / C ** D) with (- ( Y**P / C**D)).
rewrite H4.
uniformize_signed_areas.

*****
H4 : eq (Fdiv (DSeg Y P) (DSeg C D)) (Fdiv (S Y P Q) (S4 C P D Q))
H5 : parallel C D Y P
Hr : not (eq r F0)
T : not (eq (S4 C P D Q) F0)
Hap : not (eq A P)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A P Y
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C,D : Point
*****
eq (Fopp (Fdiv (S Y P Q) (S4 C P D Q))) (Fdiv (Fopp (S Y P Q)) (S4 C P D Q))
+++++
field.
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).
replace (A**P / C**D) with (S A P Q / S4 C P D Q).
replace (P**Y / C**D) with (- r / (2+2) * Py P Q P / S4 C P D Q).
assert (P**Y / C**D = S P Y Q / S4 C P D Q).
assert (Y ** P / C ** D = S Y P Q / S4 C P D Q).
assert (parallel C D Y P).
replace (P ** Y / C ** D) with (- ( Y**P / C**D)).
rewrite H4.
uniformize_signed_areas.
field.

*****
H4 : eq (Fdiv (DSeg Y P) (DSeg C D)) (Fdiv (S Y P Q) (S4 C P D Q))
H5 : parallel C D Y P
Hr : not (eq r F0)
T : not (eq (S4 C P D Q) F0)
Hap : not (eq A P)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A P Y
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C,D : Point
*****
not (eq (S4 C P D Q) F0)
+++++
auto.
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).
replace (A**P / C**D) with (S A P Q / S4 C P D Q).
replace (P**Y / C**D) with (- r / (2+2) * Py P Q P / S4 C P D Q).
assert (P**Y / C**D = S P Y Q / S4 C P D Q).
assert (Y ** P / C ** D = S Y P Q / S4 C P D Q).
assert (parallel C D Y P).
replace (P ** Y / C ** D) with (- ( Y**P / C**D)).

*****
H5 : parallel C D Y P
H4 : eq (Fdiv (DSeg Y P) (DSeg C D)) (Fdiv (S Y P Q) (S4 C P D Q))
Hr : not (eq r F0)
T : not (eq (S4 C P D Q) F0)
Hap : not (eq A P)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A P Y
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C,D : Point
*****
eq (Fopp (Fdiv (DSeg Y P) (DSeg C D))) (Fdiv (DSeg P Y) (DSeg C D))
+++++
uniformize_dir_seg.
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).
replace (A**P / C**D) with (S A P Q / S4 C P D Q).
replace (P**Y / C**D) with (- r / (2+2) * Py P Q P / S4 C P D Q).
assert (P**Y / C**D = S P Y Q / S4 C P D Q).
assert (Y ** P / C ** D = S Y P Q / S4 C P D Q).
assert (parallel C D Y P).
replace (P ** Y / C ** D) with (- ( Y**P / C**D)).
uniformize_dir_seg.

*****
H5 : parallel C D Y P
H4 : eq (Fdiv (DSeg Y P) (DSeg C D)) (Fdiv (S Y P Q) (S4 C P D Q))
Hr : not (eq r F0)
T : not (eq (S4 C P D Q) F0)
Hap : not (eq A P)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A P Y
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C,D : Point
*****
eq (Fopp (Fdiv (DSeg Y P) (DSeg C D))) (Fdiv (Fopp (DSeg Y P)) (DSeg C D))
+++++
field.
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).
replace (A**P / C**D) with (S A P Q / S4 C P D Q).
replace (P**Y / C**D) with (- r / (2+2) * Py P Q P / S4 C P D Q).
assert (P**Y / C**D = S P Y Q / S4 C P D Q).
assert (Y ** P / C ** D = S Y P Q / S4 C P D Q).
assert (parallel C D Y P).
replace (P ** Y / C ** D) with (- ( Y**P / C**D)).
uniformize_dir_seg.
field.

*****
H5 : parallel C D Y P
H4 : eq (Fdiv (DSeg Y P) (DSeg C D)) (Fdiv (S Y P Q) (S4 C P D Q))
Hr : not (eq r F0)
T : not (eq (S4 C P D Q) F0)
Hap : not (eq A P)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A P Y
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C,D : Point
*****
not (eq (DSeg C D) F0)
+++++
auto with Geom.
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).
replace (A**P / C**D) with (S A P Q / S4 C P D Q).
replace (P**Y / C**D) with (- r / (2+2) * Py P Q P / S4 C P D Q).
assert (P**Y / C**D = S P Y Q / S4 C P D Q).

*****
H4 : eq (Fdiv (DSeg P Y) (DSeg C D)) (Fdiv (S P Y Q) (S4 C P D Q))
Hr : not (eq r F0)
T : not (eq (S4 C P D Q) F0)
Hap : not (eq A P)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A P Y
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C,D : Point
*****
eq (Fdiv (Fmult (Fdiv (Fopp r) (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py P Q P)) (S4 C P D Q)) (Fdiv (DSeg P Y) (DSeg C D))
+++++
rewrite H4.
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).
replace (A**P / C**D) with (S A P Q / S4 C P D Q).
replace (P**Y / C**D) with (- r / (2+2) * Py P Q P / S4 C P D Q).
assert (P**Y / C**D = S P Y Q / S4 C P D Q).
rewrite H4.

*****
H4 : eq (Fdiv (DSeg P Y) (DSeg C D)) (Fdiv (S P Y Q) (S4 C P D Q))
Hr : not (eq r F0)
T : not (eq (S4 C P D Q) F0)
Hap : not (eq A P)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A P Y
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C,D : Point
*****
eq (Fdiv (Fmult (Fdiv (Fopp r) (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py P Q P)) (S4 C P D Q)) (Fdiv (S P Y Q) (S4 C P D Q))
+++++
unfold on_perp_d in H.
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).
replace (A**P / C**D) with (S A P Q / S4 C P D Q).
replace (P**Y / C**D) with (- r / (2+2) * Py P Q P / S4 C P D Q).
assert (P**Y / C**D = S P Y Q / S4 C P D Q).
rewrite H4.
unfold on_perp_d in H.

*****
H4 : eq (Fdiv (DSeg P Y) (DSeg C D)) (Fdiv (S P Y Q) (S4 C P D Q))
Hr : not (eq r F0)
T : not (eq (S4 C P D Q) F0)
Hap : not (eq A P)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A P Y
H : and (not (eq P Q))\n (and (perp Y P P Q)\n (and\n (eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y)))\n (not (eq r F0))))
r : F
Y,P,Q,A,C,D : Point
*****
eq (Fdiv (Fmult (Fdiv (Fopp r) (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py P Q P)) (S4 C P D Q)) (Fdiv (S P Y Q) (S4 C P D Q))
+++++
use H.
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).
replace (A**P / C**D) with (S A P Q / S4 C P D Q).
replace (P**Y / C**D) with (- r / (2+2) * Py P Q P / S4 C P D Q).
assert (P**Y / C**D = S P Y Q / S4 C P D Q).
rewrite H4.
unfold on_perp_d in H.
use H.

*****
H9 : not (eq r F0)
H6 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H7 : perp Y P P Q
H5 : not (eq P Q)
H4 : eq (Fdiv (DSeg P Y) (DSeg C D)) (Fdiv (S P Y Q) (S4 C P D Q))
Hr : not (eq r F0)
T : not (eq (S4 C P D Q) F0)
Hap : not (eq A P)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A P Y
r : F
Y,P,Q,A,C,D : Point
*****
eq (Fdiv (Fmult (Fdiv (Fopp r) (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py P Q P)) (S4 C P D Q)) (Fdiv (S P Y Q) (S4 C P D Q))
+++++
IsoleVar r H6.
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).
replace (A**P / C**D) with (S A P Q / S4 C P D Q).
replace (P**Y / C**D) with (- r / (2+2) * Py P Q P / S4 C P D Q).
assert (P**Y / C**D = S P Y Q / S4 C P D Q).
rewrite H4.
unfold on_perp_d in H.
use H.
IsoleVar r H6.

*****
H6 : eq r\n (Fdiv (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))\n (Py P Q P))
H : not (eq (Py P Q P) F0)
H9 : not (eq r F0)
H7 : perp Y P P Q
H5 : not (eq P Q)
H4 : eq (Fdiv (DSeg P Y) (DSeg C D)) (Fdiv (S P Y Q) (S4 C P D Q))
Hr : not (eq r F0)
T : not (eq (S4 C P D Q) F0)
Hap : not (eq A P)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A P Y
r : F
Y,P,Q,A,C,D : Point
*****
eq (Fdiv (Fmult (Fdiv (Fopp r) (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py P Q P)) (S4 C P D Q)) (Fdiv (S P Y Q) (S4 C P D Q))
+++++
rewrite H6.
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).
replace (A**P / C**D) with (S A P Q / S4 C P D Q).
replace (P**Y / C**D) with (- r / (2+2) * Py P Q P / S4 C P D Q).
assert (P**Y / C**D = S P Y Q / S4 C P D Q).
rewrite H4.
unfold on_perp_d in H.
use H.
IsoleVar r H6.
rewrite H6.

*****
H6 : eq r\n (Fdiv (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))\n (Py P Q P))
H : not (eq (Py P Q P) F0)
H9 : not (eq r F0)
H7 : perp Y P P Q
H5 : not (eq P Q)
H4 : eq (Fdiv (DSeg P Y) (DSeg C D)) (Fdiv (S P Y Q) (S4 C P D Q))
Hr : not (eq r F0)
T : not (eq (S4 C P D Q) F0)
Hap : not (eq A P)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A P Y
r : F
Y,P,Q,A,C,D : Point
*****
eq (Fdiv (Fmult (Fdiv (Fopp (Fdiv (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y)) (Py P Q P))) (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py P Q P)) (S4 C P D Q)) (Fdiv (S P Y Q) (S4 C P D Q))
+++++
uniformize_signed_areas.
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).
replace (A**P / C**D) with (S A P Q / S4 C P D Q).
replace (P**Y / C**D) with (- r / (2+2) * Py P Q P / S4 C P D Q).
assert (P**Y / C**D = S P Y Q / S4 C P D Q).
rewrite H4.
unfold on_perp_d in H.
use H.
IsoleVar r H6.
rewrite H6.
uniformize_signed_areas.

*****
H6 : eq r\n (Fdiv (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (Fopp (S P Y Q)))\n (Py P Q P))
H4 : eq (Fdiv (DSeg P Y) (DSeg C D)) (Fdiv (S P Y Q) (S4 C P D Q))
H : not (eq (Py P Q P) F0)
H9 : not (eq r F0)
H7 : perp Y P P Q
H5 : not (eq P Q)
Hr : not (eq r F0)
T : not (eq (S4 C P D Q) F0)
Hap : not (eq A P)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A P Y
r : F
Y,P,Q,A,C,D : Point
*****
eq (Fdiv (Fmult (Fdiv (Fopp (Fdiv (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (Fopp (S P Y Q))) (Py P Q P))) (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py P Q P)) (S4 C P D Q)) (Fdiv (S P Y Q) (S4 C P D Q))
+++++
field.
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).
replace (A**P / C**D) with (S A P Q / S4 C P D Q).
replace (P**Y / C**D) with (- r / (2+2) * Py P Q P / S4 C P D Q).
assert (P**Y / C**D = S P Y Q / S4 C P D Q).
rewrite H4.
unfold on_perp_d in H.
use H.
IsoleVar r H6.
rewrite H6.
uniformize_signed_areas.
field.

*****
H6 : eq r\n (Fdiv (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (Fopp (S P Y Q)))\n (Py P Q P))
H4 : eq (Fdiv (DSeg P Y) (DSeg C D)) (Fdiv (S P Y Q) (S4 C P D Q))
H : not (eq (Py P Q P) F0)
H9 : not (eq r F0)
H7 : perp Y P P Q
H5 : not (eq P Q)
Hr : not (eq r F0)
T : not (eq (S4 C P D Q) F0)
Hap : not (eq A P)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A P Y
r : F
Y,P,Q,A,C,D : Point
*****
and (not (eq (S4 C P D Q) F0)) (and (not (eq (Py P Q P) F0)) (not (eq (Fmult (Fplus F1 F1) (Fplus F1 F1)) F0)))
+++++
repeat split.
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).
replace (A**P / C**D) with (S A P Q / S4 C P D Q).
replace (P**Y / C**D) with (- r / (2+2) * Py P Q P / S4 C P D Q).
assert (P**Y / C**D = S P Y Q / S4 C P D Q).
rewrite H4.
unfold on_perp_d in H.
use H.
IsoleVar r H6.
rewrite H6.
uniformize_signed_areas.
field.
repeat split.

*****
H6 : eq r\n (Fdiv (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (Fopp (S P Y Q)))\n (Py P Q P))
H4 : eq (Fdiv (DSeg P Y) (DSeg C D)) (Fdiv (S P Y Q) (S4 C P D Q))
H : not (eq (Py P Q P) F0)
H9 : not (eq r F0)
H7 : perp Y P P Q
H5 : not (eq P Q)
Hr : not (eq r F0)
T : not (eq (S4 C P D Q) F0)
Hap : not (eq A P)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A P Y
r : F
Y,P,Q,A,C,D : Point
*****
not (eq (S4 C P D Q) F0)
+++++
auto with Geom.
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).
replace (A**P / C**D) with (S A P Q / S4 C P D Q).
replace (P**Y / C**D) with (- r / (2+2) * Py P Q P / S4 C P D Q).
assert (P**Y / C**D = S P Y Q / S4 C P D Q).
rewrite H4.
unfold on_perp_d in H.
use H.
IsoleVar r H6.
rewrite H6.
uniformize_signed_areas.
field.
repeat split.

*****
H6 : eq r\n (Fdiv (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (Fopp (S P Y Q)))\n (Py P Q P))
H4 : eq (Fdiv (DSeg P Y) (DSeg C D)) (Fdiv (S P Y Q) (S4 C P D Q))
H : not (eq (Py P Q P) F0)
H9 : not (eq r F0)
H7 : perp Y P P Q
H5 : not (eq P Q)
Hr : not (eq r F0)
T : not (eq (S4 C P D Q) F0)
Hap : not (eq A P)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A P Y
r : F
Y,P,Q,A,C,D : Point
*****
not (eq (Py P Q P) F0)
+++++
auto with Geom.
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).
replace (A**P / C**D) with (S A P Q / S4 C P D Q).
replace (P**Y / C**D) with (- r / (2+2) * Py P Q P / S4 C P D Q).
assert (P**Y / C**D = S P Y Q / S4 C P D Q).
rewrite H4.
unfold on_perp_d in H.
use H.
IsoleVar r H6.
rewrite H6.
uniformize_signed_areas.
field.
repeat split.

*****
H6 : eq r\n (Fdiv (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (Fopp (S P Y Q)))\n (Py P Q P))
H4 : eq (Fdiv (DSeg P Y) (DSeg C D)) (Fdiv (S P Y Q) (S4 C P D Q))
H : not (eq (Py P Q P) F0)
H9 : not (eq r F0)
H7 : perp Y P P Q
H5 : not (eq P Q)
Hr : not (eq r F0)
T : not (eq (S4 C P D Q) F0)
Hap : not (eq A P)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A P Y
r : F
Y,P,Q,A,C,D : Point
*****
not (eq (Fmult (Fplus F1 F1) (Fplus F1 F1)) F0)
+++++
auto with Geom.
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).
replace (A**P / C**D) with (S A P Q / S4 C P D Q).
replace (P**Y / C**D) with (- r / (2+2) * Py P Q P / S4 C P D Q).
assert (P**Y / C**D = S P Y Q / S4 C P D Q).
rewrite H4.
unfold on_perp_d in H.
use H.
IsoleVar r H6.
rewrite H6.
uniformize_signed_areas.
field.
repeat split.
auto with Geom.

*****
H6 : eq r\n (Fdiv (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (Fopp (S P Y Q)))\n (Py P Q P))
H4 : eq (Fdiv (DSeg P Y) (DSeg C D)) (Fdiv (S P Y Q) (S4 C P D Q))
H : not (eq (Py P Q P) F0)
H9 : not (eq r F0)
H7 : perp Y P P Q
H5 : not (eq P Q)
Hr : not (eq r F0)
T : not (eq (S4 C P D Q) F0)
Hap : not (eq A P)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A P Y
r : F
Y,P,Q,A,C,D : Point
*****
not (eq (Fmult (Fplus F1 F1) (Fplus F1 F1)) F0)
+++++
solve_conds.
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).
replace (A**P / C**D) with (S A P Q / S4 C P D Q).
replace (P**Y / C**D) with (- r / (2+2) * Py P Q P / S4 C P D Q).
assert (P**Y / C**D = S P Y Q / S4 C P D Q).
rewrite H4.
unfold on_perp_d in H.
use H.
IsoleVar r H6.

*****
H9 : not (eq r F0)
H6 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H7 : perp Y P P Q
H5 : not (eq P Q)
H4 : eq (Fdiv (DSeg P Y) (DSeg C D)) (Fdiv (S P Y Q) (S4 C P D Q))
Hr : not (eq r F0)
T : not (eq (S4 C P D Q) F0)
Hap : not (eq A P)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A P Y
r : F
Y,P,Q,A,C,D : Point
*****
not (eq (Py P Q P) F0)
+++++
auto with Geom.
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).
replace (A**P / C**D) with (S A P Q / S4 C P D Q).

*****
Hr : not (eq r F0)
T : not (eq (S4 C P D Q) F0)
Hap : not (eq A P)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A P Y
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C,D : Point
*****
eq (Fdiv (S A P Q) (S4 C P D Q)) (Fdiv (DSeg A P) (DSeg C D))
+++++
cases_equality A P.
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).
replace (A**P / C**D) with (S A P Q / S4 C P D Q).
cases_equality A P.

*****
H4 : eq A P
Hr : not (eq r F0)
T : not (eq (S4 C P D Q) F0)
Hap : not (eq A P)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A P Y
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C,D : Point
*****
eq (Fdiv (S A P Q) (S4 C P D Q)) (Fdiv (DSeg A P) (DSeg C D))
+++++
subst P.
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).
replace (A**P / C**D) with (S A P Q / S4 C P D Q).
cases_equality A P.
subst P.

*****
Hr : not (eq r F0)
Hap : not (eq A A)
T : not (eq (S4 C A D Q) F0)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H : on_perp_d Y A Q r
H0 : Col A A Y
r : F
Y,Q,A,C,D : Point
*****
eq (Fdiv (S A A Q) (S4 C A D Q)) (Fdiv (DSeg A A) (DSeg C D))
+++++
basic_simpl.
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).
replace (A**P / C**D) with (S A P Q / S4 C P D Q).
cases_equality A P.
subst P.
basic_simpl.

*****
Hr : not (eq r F0)
Hap : not (eq A A)
T : not (eq (S4 C A D Q) F0)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H : on_perp_d Y A Q r
H0 : Col A A Y
r : F
Y,Q,A,C,D : Point
*****
eq F0 (Fdiv F0 (DSeg C D))
+++++
field.
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).
replace (A**P / C**D) with (S A P Q / S4 C P D Q).
cases_equality A P.
subst P.
basic_simpl.
field.

*****
Hr : not (eq r F0)
Hap : not (eq A A)
T : not (eq (S4 C A D Q) F0)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H : on_perp_d Y A Q r
H0 : Col A A Y
r : F
Y,Q,A,C,D : Point
*****
not (eq (DSeg C D) F0)
+++++
solve_conds.
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).
replace (A**P / C**D) with (S A P Q / S4 C P D Q).
cases_equality A P.
subst P.
basic_simpl.
field.
solve_conds.

*****
Hr : not (eq r F0)
Hap : not (eq A A)
T : not (eq (S4 C A D Q) F0)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H : on_perp_d Y A Q r
H0 : Col A A Y
r : F
Y,Q,A,C,D : Point
*****
not (eq (DSeg C D) F0)
+++++
auto with Geom.
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).
replace (A**P / C**D) with (S A P Q / S4 C P D Q).
cases_equality A P.

*****
H4 : not (eq A P)
Hr : not (eq r F0)
T : not (eq (S4 C P D Q) F0)
Hap : not (eq A P)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A P Y
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C,D : Point
*****
eq (Fdiv (S A P Q) (S4 C P D Q)) (Fdiv (DSeg A P) (DSeg C D))
+++++
rewrite (elim_length_ratio_inter_ll_2 A C D P Y P Q P).
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).
replace (A**P / C**D) with (S A P Q / S4 C P D Q).
cases_equality A P.
rewrite (elim_length_ratio_inter_ll_2 A C D P Y P Q P).

*****
H4 : not (eq A P)
Hr : not (eq r F0)
T : not (eq (S4 C P D Q) F0)
Hap : not (eq A P)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A P Y
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C,D : Point
*****
eq (Fdiv (S A P Q) (S4 C P D Q)) (Fdiv (S A P Q) (S4 C P D Q))
+++++
auto.
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).
replace (A**P / C**D) with (S A P Q / S4 C P D Q).
cases_equality A P.
rewrite (elim_length_ratio_inter_ll_2 A C D P Y P Q P).

*****
H4 : not (eq A P)
Hr : not (eq r F0)
T : not (eq (S4 C P D Q) F0)
Hap : not (eq A P)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A P Y
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C,D : Point
*****
inter_ll P P Q P Y
+++++
unfold inter_ll.
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).
replace (A**P / C**D) with (S A P Q / S4 C P D Q).
cases_equality A P.
rewrite (elim_length_ratio_inter_ll_2 A C D P Y P Q P).
unfold inter_ll.

*****
H4 : not (eq A P)
Hr : not (eq r F0)
T : not (eq (S4 C P D Q) F0)
Hap : not (eq A P)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A P Y
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C,D : Point
*****
and (Col P P Q) (and (Col P P Y) (not (parallel P Q P Y)))
+++++
repeat split.
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).
replace (A**P / C**D) with (S A P Q / S4 C P D Q).
cases_equality A P.
rewrite (elim_length_ratio_inter_ll_2 A C D P Y P Q P).
unfold inter_ll.
repeat split.

*****
H4 : not (eq A P)
Hr : not (eq r F0)
T : not (eq (S4 C P D Q) F0)
Hap : not (eq A P)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A P Y
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C,D : Point
*****
Col P P Q
+++++
auto with Geom.
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).
replace (A**P / C**D) with (S A P Q / S4 C P D Q).
cases_equality A P.
rewrite (elim_length_ratio_inter_ll_2 A C D P Y P Q P).
unfold inter_ll.
repeat split.

*****
H4 : not (eq A P)
Hr : not (eq r F0)
T : not (eq (S4 C P D Q) F0)
Hap : not (eq A P)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A P Y
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C,D : Point
*****
Col P P Y
+++++
auto with Geom.
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).
replace (A**P / C**D) with (S A P Q / S4 C P D Q).
cases_equality A P.
rewrite (elim_length_ratio_inter_ll_2 A C D P Y P Q P).
unfold inter_ll.
repeat split.

*****
H4 : not (eq A P)
Hr : not (eq r F0)
T : not (eq (S4 C P D Q) F0)
Hap : not (eq A P)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A P Y
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C,D : Point
*****
not (parallel P Q P Y)
+++++
auto with Geom.
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).
replace (A**P / C**D) with (S A P Q / S4 C P D Q).
cases_equality A P.
rewrite (elim_length_ratio_inter_ll_2 A C D P Y P Q P).
unfold inter_ll.
repeat split.
auto with Geom.

*****
H4 : not (eq A P)
Hr : not (eq r F0)
T : not (eq (S4 C P D Q) F0)
Hap : not (eq A P)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A P Y
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C,D : Point
*****
not (parallel P Q P Y)
+++++
apply perp_not_parallel.
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).
replace (A**P / C**D) with (S A P Q / S4 C P D Q).
cases_equality A P.
rewrite (elim_length_ratio_inter_ll_2 A C D P Y P Q P).
unfold inter_ll.
repeat split.
auto with Geom.
apply perp_not_parallel.

*****
H4 : not (eq A P)
Hr : not (eq r F0)
T : not (eq (S4 C P D Q) F0)
Hap : not (eq A P)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A P Y
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C,D : Point
*****
perp P Q P Y
+++++
unfold on_perp_d in H.
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).
replace (A**P / C**D) with (S A P Q / S4 C P D Q).
cases_equality A P.
rewrite (elim_length_ratio_inter_ll_2 A C D P Y P Q P).
unfold inter_ll.
repeat split.
auto with Geom.
apply perp_not_parallel.
unfold on_perp_d in H.

*****
H4 : not (eq A P)
Hr : not (eq r F0)
T : not (eq (S4 C P D Q) F0)
Hap : not (eq A P)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A P Y
H : and (not (eq P Q))\n (and (perp Y P P Q)\n (and\n (eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y)))\n (not (eq r F0))))
r : F
Y,P,Q,A,C,D : Point
*****
perp P Q P Y
+++++
use H.
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).
replace (A**P / C**D) with (S A P Q / S4 C P D Q).
cases_equality A P.
rewrite (elim_length_ratio_inter_ll_2 A C D P Y P Q P).
unfold inter_ll.
repeat split.
auto with Geom.
apply perp_not_parallel.
unfold on_perp_d in H.
use H.

*****
H9 : not (eq r F0)
H6 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H7 : perp Y P P Q
H5 : not (eq P Q)
H4 : not (eq A P)
Hr : not (eq r F0)
T : not (eq (S4 C P D Q) F0)
Hap : not (eq A P)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A P Y
r : F
Y,P,Q,A,C,D : Point
*****
perp P Q P Y
+++++
auto with Geom.
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).
replace (A**P / C**D) with (S A P Q / S4 C P D Q).
cases_equality A P.
rewrite (elim_length_ratio_inter_ll_2 A C D P Y P Q P).
unfold inter_ll.
repeat split.
auto with Geom.
apply perp_not_parallel.

*****
H4 : not (eq A P)
Hr : not (eq r F0)
T : not (eq (S4 C P D Q) F0)
Hap : not (eq A P)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A P Y
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C,D : Point
*****
not (eq P Q)
+++++
unfold on_perp_d in H.
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).
replace (A**P / C**D) with (S A P Q / S4 C P D Q).
cases_equality A P.
rewrite (elim_length_ratio_inter_ll_2 A C D P Y P Q P).
unfold inter_ll.
repeat split.
auto with Geom.
apply perp_not_parallel.
unfold on_perp_d in H.

*****
H4 : not (eq A P)
Hr : not (eq r F0)
T : not (eq (S4 C P D Q) F0)
Hap : not (eq A P)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A P Y
H : and (not (eq P Q))\n (and (perp Y P P Q)\n (and\n (eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y)))\n (not (eq r F0))))
r : F
Y,P,Q,A,C,D : Point
*****
not (eq P Q)
+++++
use H.
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).
replace (A**P / C**D) with (S A P Q / S4 C P D Q).
cases_equality A P.
rewrite (elim_length_ratio_inter_ll_2 A C D P Y P Q P).
unfold inter_ll.
repeat split.
auto with Geom.
apply perp_not_parallel.
unfold on_perp_d in H.
use H.

*****
H9 : not (eq r F0)
H6 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H7 : perp Y P P Q
H5 : not (eq P Q)
H4 : not (eq A P)
Hr : not (eq r F0)
T : not (eq (S4 C P D Q) F0)
Hap : not (eq A P)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A P Y
r : F
Y,P,Q,A,C,D : Point
*****
not (eq P Q)
+++++
auto.
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).
replace (A**P / C**D) with (S A P Q / S4 C P D Q).
cases_equality A P.
rewrite (elim_length_ratio_inter_ll_2 A C D P Y P Q P).
unfold inter_ll.
repeat split.
auto with Geom.
apply perp_not_parallel.

*****
H4 : not (eq A P)
Hr : not (eq r F0)
T : not (eq (S4 C P D Q) F0)
Hap : not (eq A P)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A P Y
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C,D : Point
*****
not (eq P Y)
+++++
unfold on_perp_d in H.
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).
replace (A**P / C**D) with (S A P Q / S4 C P D Q).
cases_equality A P.
rewrite (elim_length_ratio_inter_ll_2 A C D P Y P Q P).
unfold inter_ll.
repeat split.
auto with Geom.
apply perp_not_parallel.
unfold on_perp_d in H.

*****
H4 : not (eq A P)
Hr : not (eq r F0)
T : not (eq (S4 C P D Q) F0)
Hap : not (eq A P)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A P Y
H : and (not (eq P Q))\n (and (perp Y P P Q)\n (and\n (eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y)))\n (not (eq r F0))))
r : F
Y,P,Q,A,C,D : Point
*****
not (eq P Y)
+++++
use H.
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).
replace (A**P / C**D) with (S A P Q / S4 C P D Q).
cases_equality A P.
rewrite (elim_length_ratio_inter_ll_2 A C D P Y P Q P).
unfold inter_ll.
repeat split.
auto with Geom.
apply perp_not_parallel.
unfold on_perp_d in H.
use H.

*****
H9 : not (eq r F0)
H6 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H7 : perp Y P P Q
H5 : not (eq P Q)
H4 : not (eq A P)
Hr : not (eq r F0)
T : not (eq (S4 C P D Q) F0)
Hap : not (eq A P)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A P Y
r : F
Y,P,Q,A,C,D : Point
*****
not (eq P Y)
+++++
intro.
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).
replace (A**P / C**D) with (S A P Q / S4 C P D Q).
cases_equality A P.
rewrite (elim_length_ratio_inter_ll_2 A C D P Y P Q P).
unfold inter_ll.
repeat split.
auto with Geom.
apply perp_not_parallel.
unfold on_perp_d in H.
use H.
intro.

*****
H : eq P Y
H9 : not (eq r F0)
H6 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H7 : perp Y P P Q
H5 : not (eq P Q)
H4 : not (eq A P)
Hr : not (eq r F0)
T : not (eq (S4 C P D Q) F0)
Hap : not (eq A P)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A P Y
r : F
Y,P,Q,A,C,D : Point
*****
False
+++++
subst P.
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).
replace (A**P / C**D) with (S A P Q / S4 C P D Q).
cases_equality A P.
rewrite (elim_length_ratio_inter_ll_2 A C D P Y P Q P).
unfold inter_ll.
repeat split.
auto with Geom.
apply perp_not_parallel.
unfold on_perp_d in H.
use H.
intro.
subst P.

*****
H9 : not (eq r F0)
H4 : not (eq A Y)
H5 : not (eq Y Q)
H7 : perp Y Y Y Q
H6 : eq (Fmult r (Py Y Q Y))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S Y Q Y))
Hr : not (eq r F0)
Hap : not (eq A Y)
T : not (eq (S4 C Y D Q) F0)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A Y Y
r : F
Y,Q,A,C,D : Point
*****
False
+++++
basic_simpl.
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).
replace (A**P / C**D) with (S A P Q / S4 C P D Q).
cases_equality A P.
rewrite (elim_length_ratio_inter_ll_2 A C D P Y P Q P).
unfold inter_ll.
repeat split.
auto with Geom.
apply perp_not_parallel.
unfold on_perp_d in H.
use H.
intro.
subst P.
basic_simpl.

*****
H9 : not (eq r F0)
H4 : not (eq A Y)
H5 : not (eq Y Q)
H7 : perp Y Y Y Q
H6 : eq (Fmult r (Py Y Q Y)) F0
Hr : not (eq r F0)
Hap : not (eq A Y)
T : not (eq (S4 C Y D Q) F0)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A Y Y
r : F
Y,Q,A,C,D : Point
*****
False
+++++
IsoleVar (Py Y Q Y) H6.
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).
replace (A**P / C**D) with (S A P Q / S4 C P D Q).
cases_equality A P.
rewrite (elim_length_ratio_inter_ll_2 A C D P Y P Q P).
unfold inter_ll.
repeat split.
auto with Geom.
apply perp_not_parallel.
unfold on_perp_d in H.
use H.
intro.
subst P.
basic_simpl.
IsoleVar (Py Y Q Y) H6.

*****
H6 : eq (Py Y Q Y) (Fdiv F0 r)
H9 : not (eq r F0)
H4 : not (eq A Y)
H5 : not (eq Y Q)
H7 : perp Y Y Y Q
Hr : not (eq r F0)
Hap : not (eq A Y)
T : not (eq (S4 C Y D Q) F0)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A Y Y
r : F
Y,Q,A,C,D : Point
*****
False
+++++
replace (0/r) with 0 in H6 by (field;solve_conds).
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).
replace (A**P / C**D) with (S A P Q / S4 C P D Q).
cases_equality A P.
rewrite (elim_length_ratio_inter_ll_2 A C D P Y P Q P).
unfold inter_ll.
repeat split.
auto with Geom.
apply perp_not_parallel.
unfold on_perp_d in H.
use H.
intro.
subst P.
basic_simpl.
IsoleVar (Py Y Q Y) H6.
replace (0/r) with 0 in H6 by (field;solve_conds).

*****
H6 : eq (Py Y Q Y) F0
H9 : not (eq r F0)
H4 : not (eq A Y)
H5 : not (eq Y Q)
H7 : perp Y Y Y Q
Hr : not (eq r F0)
Hap : not (eq A Y)
T : not (eq (S4 C Y D Q) F0)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A Y Y
r : F
Y,Q,A,C,D : Point
*****
False
+++++
assert (Py Y Q Y <> 0).
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).
replace (A**P / C**D) with (S A P Q / S4 C P D Q).
cases_equality A P.
rewrite (elim_length_ratio_inter_ll_2 A C D P Y P Q P).
unfold inter_ll.
repeat split.
auto with Geom.
apply perp_not_parallel.
unfold on_perp_d in H.
use H.
intro.
subst P.
basic_simpl.
IsoleVar (Py Y Q Y) H6.
replace (0/r) with 0 in H6 by (field;solve_conds).
assert (Py Y Q Y <> 0).

*****
H6 : eq (Py Y Q Y) F0
H9 : not (eq r F0)
H4 : not (eq A Y)
H5 : not (eq Y Q)
H7 : perp Y Y Y Q
Hr : not (eq r F0)
Hap : not (eq A Y)
T : not (eq (S4 C Y D Q) F0)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A Y Y
r : F
Y,Q,A,C,D : Point
*****
not (eq (Py Y Q Y) F0)
+++++
auto with Geom.
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).
replace (A**P / C**D) with (S A P Q / S4 C P D Q).
cases_equality A P.
rewrite (elim_length_ratio_inter_ll_2 A C D P Y P Q P).
unfold inter_ll.
repeat split.
auto with Geom.
apply perp_not_parallel.
unfold on_perp_d in H.
use H.
intro.
subst P.
basic_simpl.
IsoleVar (Py Y Q Y) H6.
replace (0/r) with 0 in H6 by (field;solve_conds).
assert (Py Y Q Y <> 0).

*****
H : not (eq (Py Y Q Y) F0)
H6 : eq (Py Y Q Y) F0
H9 : not (eq r F0)
H4 : not (eq A Y)
H5 : not (eq Y Q)
H7 : perp Y Y Y Q
Hr : not (eq r F0)
Hap : not (eq A Y)
T : not (eq (S4 C Y D Q) F0)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A Y Y
r : F
Y,Q,A,C,D : Point
*****
False
+++++
intuition.
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).
replace (A**P / C**D) with (S A P Q / S4 C P D Q).
cases_equality A P.
rewrite (elim_length_ratio_inter_ll_2 A C D P Y P Q P).

*****
H4 : not (eq A P)
Hr : not (eq r F0)
T : not (eq (S4 C P D Q) F0)
Hap : not (eq A P)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A P Y
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C,D : Point
*****
eq (S A P Y) F0
+++++
auto with Geom.
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).
replace (A**P / C**D) with (S A P Q / S4 C P D Q).
cases_equality A P.
rewrite (elim_length_ratio_inter_ll_2 A C D P Y P Q P).

*****
H4 : not (eq A P)
Hr : not (eq r F0)
T : not (eq (S4 C P D Q) F0)
Hap : not (eq A P)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A P Y
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C,D : Point
*****
not (eq C D)
+++++
auto.
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).
replace (A**P / C**D) with (S A P Q / S4 C P D Q).
cases_equality A P.
rewrite (elim_length_ratio_inter_ll_2 A C D P Y P Q P).

*****
H4 : not (eq A P)
Hr : not (eq r F0)
T : not (eq (S4 C P D Q) F0)
Hap : not (eq A P)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A P Y
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C,D : Point
*****
parallel A P C D
+++++
assert (parallel C D P A).
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).
replace (A**P / C**D) with (S A P Q / S4 C P D Q).
cases_equality A P.
rewrite (elim_length_ratio_inter_ll_2 A C D P Y P Q P).
assert (parallel C D P A).

*****
H4 : not (eq A P)
Hr : not (eq r F0)
T : not (eq (S4 C P D Q) F0)
Hap : not (eq A P)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A P Y
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C,D : Point
*****
parallel C D P A
+++++
apply (parallel_transitivity C D A Y P A H3).
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).
replace (A**P / C**D) with (S A P Q / S4 C P D Q).
cases_equality A P.
rewrite (elim_length_ratio_inter_ll_2 A C D P Y P Q P).
assert (parallel C D P A).
apply (parallel_transitivity C D A Y P A H3).

*****
H4 : not (eq A P)
Hr : not (eq r F0)
T : not (eq (S4 C P D Q) F0)
Hap : not (eq A P)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A P Y
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C,D : Point
*****
parallel C D A Y
+++++
auto with Geom.
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).
replace (A**P / C**D) with (S A P Q / S4 C P D Q).
cases_equality A P.
rewrite (elim_length_ratio_inter_ll_2 A C D P Y P Q P).
assert (parallel C D P A).
apply (parallel_transitivity C D A Y P A H3).

*****
H4 : not (eq A P)
Hr : not (eq r F0)
T : not (eq (S4 C P D Q) F0)
Hap : not (eq A P)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A P Y
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C,D : Point
*****
parallel A Y P A
+++++
unfold parallel.
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).
replace (A**P / C**D) with (S A P Q / S4 C P D Q).
cases_equality A P.
rewrite (elim_length_ratio_inter_ll_2 A C D P Y P Q P).
assert (parallel C D P A).
apply (parallel_transitivity C D A Y P A H3).
unfold parallel.

*****
H4 : not (eq A P)
Hr : not (eq r F0)
T : not (eq (S4 C P D Q) F0)
Hap : not (eq A P)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A P Y
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C,D : Point
*****
eq (S4 A P Y A) F0
+++++
unfold S4.
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).
replace (A**P / C**D) with (S A P Q / S4 C P D Q).
cases_equality A P.
rewrite (elim_length_ratio_inter_ll_2 A C D P Y P Q P).
assert (parallel C D P A).
apply (parallel_transitivity C D A Y P A H3).
unfold parallel.
unfold S4.

*****
H4 : not (eq A P)
Hr : not (eq r F0)
T : not (eq (S4 C P D Q) F0)
Hap : not (eq A P)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A P Y
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C,D : Point
*****
eq (Fplus (S A P Y) (S A Y A)) F0
+++++
basic_simpl.
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).
replace (A**P / C**D) with (S A P Q / S4 C P D Q).
cases_equality A P.
rewrite (elim_length_ratio_inter_ll_2 A C D P Y P Q P).
assert (parallel C D P A).
apply (parallel_transitivity C D A Y P A H3).
unfold parallel.
unfold S4.
basic_simpl.

*****
H4 : not (eq A P)
Hr : not (eq r F0)
T : not (eq (S4 C P D Q) F0)
Hap : not (eq A P)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A P Y
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C,D : Point
*****
eq (S A P Y) F0
+++++
auto with Geom.
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).
replace (A**P / C**D) with (S A P Q / S4 C P D Q).
cases_equality A P.
rewrite (elim_length_ratio_inter_ll_2 A C D P Y P Q P).
assert (parallel C D P A).

*****
H5 : parallel C D P A
H4 : not (eq A P)
Hr : not (eq r F0)
T : not (eq (S4 C P D Q) F0)
Hap : not (eq A P)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A P Y
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C,D : Point
*****
parallel A P C D
+++++
auto with Geom.
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).
replace (A**Y) with (A**P + P**Y) by (auto with Geom).
replace ((A ** P + P ** Y) / C ** D) with (A**P/C**D + P**Y/C**D) by (field;auto with Geom).
replace (A**P / C**D) with (S A P Q / S4 C P D Q).
cases_equality A P.
rewrite (elim_length_ratio_inter_ll_2 A C D P Y P Q P).

*****
H4 : not (eq A P)
Hr : not (eq r F0)
T : not (eq (S4 C P D Q) F0)
Hap : not (eq A P)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A P Y
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C,D : Point
*****
not (eq A P)
+++++
auto.
-----
Theorem elim_ratio_on_perp_d_a_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A<>P -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
rename H4 into Hap.
assert (T:= (elim_ratio_on_perp_d_a_invariant Y P Q A C D r H H0 H1 H3 H2)).
assert (Hr: r<> 0).

*****

*****

+++++
Qed.
-----
Theorem elim_ratio_on_perp_d_a :\n forall Y P Q A C D : Point, forall r: F,\non_perp_d Y P Q r->\nCol A P Y  ->\nparallel A Y C D ->\nC<>D ->\nA<>Y ->\nA**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
-----
Theorem elim_ratio_on_perp_d_a : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).

*****

*****
forall (Y P Q A C D : Point) (r : F) (_ : on_perp_d Y P Q r) (_ : Col A P Y) (_ : parallel A Y C D) (_ : not (eq C D)) (_ : not (eq A Y)), eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (Fminus (S A P Q) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py P Q P))) (S4 C P D Q))
+++++
Proof.
-----
Theorem elim_ratio_on_perp_d_a : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.

*****

*****
forall (Y P Q A C D : Point) (r : F) (_ : on_perp_d Y P Q r) (_ : Col A P Y) (_ : parallel A Y C D) (_ : not (eq C D)) (_ : not (eq A Y)), eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (Fminus (S A P Q) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py P Q P))) (S4 C P D Q))
+++++
intros.
-----
Theorem elim_ratio_on_perp_d_a : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.

*****
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A P Y
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C,D : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (Fminus (S A P Q) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py P Q P))) (S4 C P D Q))
+++++
cases_equality A P.
-----
Theorem elim_ratio_on_perp_d_a : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
cases_equality A P.

*****
H4 : eq A P
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A P Y
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C,D : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (Fminus (S A P Q) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py P Q P))) (S4 C P D Q))
+++++
subst A.
-----
Theorem elim_ratio_on_perp_d_a : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
cases_equality A P.
subst A.

*****
H3 : not (eq P Y)
H2 : not (eq C D)
H0 : Col P P Y
H1 : parallel P Y C D
H : on_perp_d Y P Q r
r : F
Y,P,Q,C,D : Point
*****
eq (Fdiv (DSeg P Y) (DSeg C D)) (Fdiv (Fminus (S P P Q) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py P Q P))) (S4 C P D Q))
+++++
clear H0.
-----
Theorem elim_ratio_on_perp_d_a : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
cases_equality A P.
subst A.
clear H0.

*****
H3 : not (eq P Y)
H2 : not (eq C D)
H1 : parallel P Y C D
H : on_perp_d Y P Q r
r : F
Y,P,Q,C,D : Point
*****
eq (Fdiv (DSeg P Y) (DSeg C D)) (Fdiv (Fminus (S P P Q) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py P Q P))) (S4 C P D Q))
+++++
basic_simpl.
-----
Theorem elim_ratio_on_perp_d_a : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
cases_equality A P.
subst A.
clear H0.
basic_simpl.

*****
H3 : not (eq P Y)
H2 : not (eq C D)
H1 : parallel P Y C D
H : on_perp_d Y P Q r
r : F
Y,P,Q,C,D : Point
*****
eq (Fdiv (DSeg P Y) (DSeg C D)) (Fdiv (Fminus F0 (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py P Q P))) (S4 C P D Q))
+++++
unfold on_perp_d in H.
-----
Theorem elim_ratio_on_perp_d_a : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
cases_equality A P.
subst A.
clear H0.
basic_simpl.
unfold on_perp_d in H.

*****
H3 : not (eq P Y)
H2 : not (eq C D)
H1 : parallel P Y C D
H : and (not (eq P Q))\n (and (perp Y P P Q)\n (and\n (eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y)))\n (not (eq r F0))))
r : F
Y,P,Q,C,D : Point
*****
eq (Fdiv (DSeg P Y) (DSeg C D)) (Fdiv (Fminus F0 (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py P Q P))) (S4 C P D Q))
+++++
use H.
-----
Theorem elim_ratio_on_perp_d_a : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
cases_equality A P.
subst A.
clear H0.
basic_simpl.
unfold on_perp_d in H.
use H.

*****
H7 : not (eq r F0)
H4 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H5 : perp Y P P Q
H0 : not (eq P Q)
H3 : not (eq P Y)
H2 : not (eq C D)
H1 : parallel P Y C D
r : F
Y,P,Q,C,D : Point
*****
eq (Fdiv (DSeg P Y) (DSeg C D)) (Fdiv (Fminus F0 (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py P Q P))) (S4 C P D Q))
+++++
replace (0 - r / (2 + 2) * Py P Q P) with (S Q P Y).
-----
Theorem elim_ratio_on_perp_d_a : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
cases_equality A P.
subst A.
clear H0.
basic_simpl.
unfold on_perp_d in H.
use H.
replace (0 - r / (2 + 2) * Py P Q P) with (S Q P Y).

*****
H7 : not (eq r F0)
H4 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H5 : perp Y P P Q
H0 : not (eq P Q)
H3 : not (eq P Y)
H2 : not (eq C D)
H1 : parallel P Y C D
r : F
Y,P,Q,C,D : Point
*****
eq (Fdiv (DSeg P Y) (DSeg C D)) (Fdiv (S Q P Y) (S4 C P D Q))
+++++
replace (P ** Y / C ** D) with (- (Y**P / C**D)).
-----
Theorem elim_ratio_on_perp_d_a : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
cases_equality A P.
subst A.
clear H0.
basic_simpl.
unfold on_perp_d in H.
use H.
replace (0 - r / (2 + 2) * Py P Q P) with (S Q P Y).
replace (P ** Y / C ** D) with (- (Y**P / C**D)).

*****
H7 : not (eq r F0)
H4 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H5 : perp Y P P Q
H0 : not (eq P Q)
H3 : not (eq P Y)
H2 : not (eq C D)
H1 : parallel P Y C D
r : F
Y,P,Q,C,D : Point
*****
eq (Fopp (Fdiv (DSeg Y P) (DSeg C D))) (Fdiv (S Q P Y) (S4 C P D Q))
+++++
rewrite (elim_length_ratio_inter_ll_1 Y C D P Q P Y P).
-----
Theorem elim_ratio_on_perp_d_a : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
cases_equality A P.
subst A.
clear H0.
basic_simpl.
unfold on_perp_d in H.
use H.
replace (0 - r / (2 + 2) * Py P Q P) with (S Q P Y).
replace (P ** Y / C ** D) with (- (Y**P / C**D)).
rewrite (elim_length_ratio_inter_ll_1 Y C D P Q P Y P).

*****
H7 : not (eq r F0)
H4 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H5 : perp Y P P Q
H0 : not (eq P Q)
H3 : not (eq P Y)
H2 : not (eq C D)
H1 : parallel P Y C D
r : F
Y,P,Q,C,D : Point
*****
eq (Fopp (Fdiv (S Y P Q) (S4 C P D Q))) (Fdiv (S Q P Y) (S4 C P D Q))
+++++
uniformize_signed_areas.
-----
Theorem elim_ratio_on_perp_d_a : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
cases_equality A P.
subst A.
clear H0.
basic_simpl.
unfold on_perp_d in H.
use H.
replace (0 - r / (2 + 2) * Py P Q P) with (S Q P Y).
replace (P ** Y / C ** D) with (- (Y**P / C**D)).
rewrite (elim_length_ratio_inter_ll_1 Y C D P Q P Y P).
uniformize_signed_areas.

*****
H4 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H7 : not (eq r F0)
H5 : perp Y P P Q
H0 : not (eq P Q)
H3 : not (eq P Y)
H2 : not (eq C D)
H1 : parallel P Y C D
r : F
Y,P,Q,C,D : Point
*****
eq (Fopp (Fdiv (S P Q Y) (S4 C P D Q))) (Fdiv (Fopp (S P Q Y)) (S4 C P D Q))
+++++
field.
-----
Theorem elim_ratio_on_perp_d_a : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
cases_equality A P.
subst A.
clear H0.
basic_simpl.
unfold on_perp_d in H.
use H.
replace (0 - r / (2 + 2) * Py P Q P) with (S Q P Y).
replace (P ** Y / C ** D) with (- (Y**P / C**D)).
rewrite (elim_length_ratio_inter_ll_1 Y C D P Q P Y P).
uniformize_signed_areas.
field.

*****
H4 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H7 : not (eq r F0)
H5 : perp Y P P Q
H0 : not (eq P Q)
H3 : not (eq P Y)
H2 : not (eq C D)
H1 : parallel P Y C D
r : F
Y,P,Q,C,D : Point
*****
not (eq (S4 C P D Q) F0)
+++++
cut (~ parallel C D P Q).
-----
Theorem elim_ratio_on_perp_d_a : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
cases_equality A P.
subst A.
clear H0.
basic_simpl.
unfold on_perp_d in H.
use H.
replace (0 - r / (2 + 2) * Py P Q P) with (S Q P Y).
replace (P ** Y / C ** D) with (- (Y**P / C**D)).
rewrite (elim_length_ratio_inter_ll_1 Y C D P Q P Y P).
uniformize_signed_areas.
field.
cut (~ parallel C D P Q).

*****
H4 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H7 : not (eq r F0)
H5 : perp Y P P Q
H0 : not (eq P Q)
H3 : not (eq P Y)
H2 : not (eq C D)
H1 : parallel P Y C D
r : F
Y,P,Q,C,D : Point
*****
forall _ : not (parallel C D P Q), not (eq (S4 C P D Q) F0)
+++++
auto with Geom.
-----
Theorem elim_ratio_on_perp_d_a : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
cases_equality A P.
subst A.
clear H0.
basic_simpl.
unfold on_perp_d in H.
use H.
replace (0 - r / (2 + 2) * Py P Q P) with (S Q P Y).
replace (P ** Y / C ** D) with (- (Y**P / C**D)).
rewrite (elim_length_ratio_inter_ll_1 Y C D P Q P Y P).
uniformize_signed_areas.
field.
cut (~ parallel C D P Q).

*****
H4 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H7 : not (eq r F0)
H5 : perp Y P P Q
H0 : not (eq P Q)
H3 : not (eq P Y)
H2 : not (eq C D)
H1 : parallel P Y C D
r : F
Y,P,Q,C,D : Point
*****
not (parallel C D P Q)
+++++
assert (perp C D P Q).
-----
Theorem elim_ratio_on_perp_d_a : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
cases_equality A P.
subst A.
clear H0.
basic_simpl.
unfold on_perp_d in H.
use H.
replace (0 - r / (2 + 2) * Py P Q P) with (S Q P Y).
replace (P ** Y / C ** D) with (- (Y**P / C**D)).
rewrite (elim_length_ratio_inter_ll_1 Y C D P Q P Y P).
uniformize_signed_areas.
field.
cut (~ parallel C D P Q).
assert (perp C D P Q).

*****
H4 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H7 : not (eq r F0)
H5 : perp Y P P Q
H0 : not (eq P Q)
H3 : not (eq P Y)
H2 : not (eq C D)
H1 : parallel P Y C D
r : F
Y,P,Q,C,D : Point
*****
perp C D P Q
+++++
apply (perp_para_perp P Y P Q C D).
-----
Theorem elim_ratio_on_perp_d_a : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
cases_equality A P.
subst A.
clear H0.
basic_simpl.
unfold on_perp_d in H.
use H.
replace (0 - r / (2 + 2) * Py P Q P) with (S Q P Y).
replace (P ** Y / C ** D) with (- (Y**P / C**D)).
rewrite (elim_length_ratio_inter_ll_1 Y C D P Q P Y P).
uniformize_signed_areas.
field.
cut (~ parallel C D P Q).
assert (perp C D P Q).
apply (perp_para_perp P Y P Q C D).

*****
H4 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H7 : not (eq r F0)
H5 : perp Y P P Q
H0 : not (eq P Q)
H3 : not (eq P Y)
H2 : not (eq C D)
H1 : parallel P Y C D
r : F
Y,P,Q,C,D : Point
*****
not (eq P Y)
+++++
auto with Geom.
-----
Theorem elim_ratio_on_perp_d_a : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
cases_equality A P.
subst A.
clear H0.
basic_simpl.
unfold on_perp_d in H.
use H.
replace (0 - r / (2 + 2) * Py P Q P) with (S Q P Y).
replace (P ** Y / C ** D) with (- (Y**P / C**D)).
rewrite (elim_length_ratio_inter_ll_1 Y C D P Q P Y P).
uniformize_signed_areas.
field.
cut (~ parallel C D P Q).
assert (perp C D P Q).
apply (perp_para_perp P Y P Q C D).

*****
H4 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H7 : not (eq r F0)
H5 : perp Y P P Q
H0 : not (eq P Q)
H3 : not (eq P Y)
H2 : not (eq C D)
H1 : parallel P Y C D
r : F
Y,P,Q,C,D : Point
*****
perp P Y P Q
+++++
auto with Geom.
-----
Theorem elim_ratio_on_perp_d_a : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
cases_equality A P.
subst A.
clear H0.
basic_simpl.
unfold on_perp_d in H.
use H.
replace (0 - r / (2 + 2) * Py P Q P) with (S Q P Y).
replace (P ** Y / C ** D) with (- (Y**P / C**D)).
rewrite (elim_length_ratio_inter_ll_1 Y C D P Q P Y P).
uniformize_signed_areas.
field.
cut (~ parallel C D P Q).
assert (perp C D P Q).
apply (perp_para_perp P Y P Q C D).

*****
H4 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H7 : not (eq r F0)
H5 : perp Y P P Q
H0 : not (eq P Q)
H3 : not (eq P Y)
H2 : not (eq C D)
H1 : parallel P Y C D
r : F
Y,P,Q,C,D : Point
*****
parallel P Y C D
+++++
auto with Geom.
-----
Theorem elim_ratio_on_perp_d_a : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
cases_equality A P.
subst A.
clear H0.
basic_simpl.
unfold on_perp_d in H.
use H.
replace (0 - r / (2 + 2) * Py P Q P) with (S Q P Y).
replace (P ** Y / C ** D) with (- (Y**P / C**D)).
rewrite (elim_length_ratio_inter_ll_1 Y C D P Q P Y P).
uniformize_signed_areas.
field.
cut (~ parallel C D P Q).
assert (perp C D P Q).

*****
H : perp C D P Q
H4 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H7 : not (eq r F0)
H5 : perp Y P P Q
H0 : not (eq P Q)
H3 : not (eq P Y)
H2 : not (eq C D)
H1 : parallel P Y C D
r : F
Y,P,Q,C,D : Point
*****
not (parallel C D P Q)
+++++
intro.
-----
Theorem elim_ratio_on_perp_d_a : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
cases_equality A P.
subst A.
clear H0.
basic_simpl.
unfold on_perp_d in H.
use H.
replace (0 - r / (2 + 2) * Py P Q P) with (S Q P Y).
replace (P ** Y / C ** D) with (- (Y**P / C**D)).
rewrite (elim_length_ratio_inter_ll_1 Y C D P Q P Y P).
uniformize_signed_areas.
field.
cut (~ parallel C D P Q).
assert (perp C D P Q).
intro.

*****
H6 : parallel C D P Q
H : perp C D P Q
H4 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H7 : not (eq r F0)
H5 : perp Y P P Q
H0 : not (eq P Q)
H3 : not (eq P Y)
H2 : not (eq C D)
H1 : parallel P Y C D
r : F
Y,P,Q,C,D : Point
*****
False
+++++
assert (T:=parallel_not_perp C D P Q H6 H2 H0).
-----
Theorem elim_ratio_on_perp_d_a : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
cases_equality A P.
subst A.
clear H0.
basic_simpl.
unfold on_perp_d in H.
use H.
replace (0 - r / (2 + 2) * Py P Q P) with (S Q P Y).
replace (P ** Y / C ** D) with (- (Y**P / C**D)).
rewrite (elim_length_ratio_inter_ll_1 Y C D P Q P Y P).
uniformize_signed_areas.
field.
cut (~ parallel C D P Q).
assert (perp C D P Q).
intro.
assert (T:=parallel_not_perp C D P Q H6 H2 H0).

*****
T : not (perp C D P Q)
H6 : parallel C D P Q
H : perp C D P Q
H4 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H7 : not (eq r F0)
H5 : perp Y P P Q
H0 : not (eq P Q)
H3 : not (eq P Y)
H2 : not (eq C D)
H1 : parallel P Y C D
r : F
Y,P,Q,C,D : Point
*****
False
+++++
intuition.
-----
Theorem elim_ratio_on_perp_d_a : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
cases_equality A P.
subst A.
clear H0.
basic_simpl.
unfold on_perp_d in H.
use H.
replace (0 - r / (2 + 2) * Py P Q P) with (S Q P Y).
replace (P ** Y / C ** D) with (- (Y**P / C**D)).
rewrite (elim_length_ratio_inter_ll_1 Y C D P Q P Y P).

*****
H7 : not (eq r F0)
H4 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H5 : perp Y P P Q
H0 : not (eq P Q)
H3 : not (eq P Y)
H2 : not (eq C D)
H1 : parallel P Y C D
r : F
Y,P,Q,C,D : Point
*****
inter_ll P P Y P Q
+++++
unfold inter_ll.
-----
Theorem elim_ratio_on_perp_d_a : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
cases_equality A P.
subst A.
clear H0.
basic_simpl.
unfold on_perp_d in H.
use H.
replace (0 - r / (2 + 2) * Py P Q P) with (S Q P Y).
replace (P ** Y / C ** D) with (- (Y**P / C**D)).
rewrite (elim_length_ratio_inter_ll_1 Y C D P Q P Y P).
unfold inter_ll.

*****
H7 : not (eq r F0)
H4 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H5 : perp Y P P Q
H0 : not (eq P Q)
H3 : not (eq P Y)
H2 : not (eq C D)
H1 : parallel P Y C D
r : F
Y,P,Q,C,D : Point
*****
and (Col P P Y) (and (Col P P Q) (not (parallel P Y P Q)))
+++++
repeat split.
-----
Theorem elim_ratio_on_perp_d_a : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
cases_equality A P.
subst A.
clear H0.
basic_simpl.
unfold on_perp_d in H.
use H.
replace (0 - r / (2 + 2) * Py P Q P) with (S Q P Y).
replace (P ** Y / C ** D) with (- (Y**P / C**D)).
rewrite (elim_length_ratio_inter_ll_1 Y C D P Q P Y P).
unfold inter_ll.
repeat split.

*****
H7 : not (eq r F0)
H4 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H5 : perp Y P P Q
H0 : not (eq P Q)
H3 : not (eq P Y)
H2 : not (eq C D)
H1 : parallel P Y C D
r : F
Y,P,Q,C,D : Point
*****
Col P P Y
+++++
auto with Geom.
-----
Theorem elim_ratio_on_perp_d_a : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
cases_equality A P.
subst A.
clear H0.
basic_simpl.
unfold on_perp_d in H.
use H.
replace (0 - r / (2 + 2) * Py P Q P) with (S Q P Y).
replace (P ** Y / C ** D) with (- (Y**P / C**D)).
rewrite (elim_length_ratio_inter_ll_1 Y C D P Q P Y P).
unfold inter_ll.
repeat split.

*****
H7 : not (eq r F0)
H4 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H5 : perp Y P P Q
H0 : not (eq P Q)
H3 : not (eq P Y)
H2 : not (eq C D)
H1 : parallel P Y C D
r : F
Y,P,Q,C,D : Point
*****
Col P P Q
+++++
auto with Geom.
-----
Theorem elim_ratio_on_perp_d_a : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
cases_equality A P.
subst A.
clear H0.
basic_simpl.
unfold on_perp_d in H.
use H.
replace (0 - r / (2 + 2) * Py P Q P) with (S Q P Y).
replace (P ** Y / C ** D) with (- (Y**P / C**D)).
rewrite (elim_length_ratio_inter_ll_1 Y C D P Q P Y P).
unfold inter_ll.
repeat split.

*****
H7 : not (eq r F0)
H4 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H5 : perp Y P P Q
H0 : not (eq P Q)
H3 : not (eq P Y)
H2 : not (eq C D)
H1 : parallel P Y C D
r : F
Y,P,Q,C,D : Point
*****
not (parallel P Y P Q)
+++++
auto with Geom.
-----
Theorem elim_ratio_on_perp_d_a : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
cases_equality A P.
subst A.
clear H0.
basic_simpl.
unfold on_perp_d in H.
use H.
replace (0 - r / (2 + 2) * Py P Q P) with (S Q P Y).
replace (P ** Y / C ** D) with (- (Y**P / C**D)).
rewrite (elim_length_ratio_inter_ll_1 Y C D P Q P Y P).
unfold inter_ll.
repeat split.
auto with Geom.

*****
H7 : not (eq r F0)
H4 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H5 : perp Y P P Q
H0 : not (eq P Q)
H3 : not (eq P Y)
H2 : not (eq C D)
H1 : parallel P Y C D
r : F
Y,P,Q,C,D : Point
*****
not (parallel P Y P Q)
+++++
intro.
-----
Theorem elim_ratio_on_perp_d_a : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
cases_equality A P.
subst A.
clear H0.
basic_simpl.
unfold on_perp_d in H.
use H.
replace (0 - r / (2 + 2) * Py P Q P) with (S Q P Y).
replace (P ** Y / C ** D) with (- (Y**P / C**D)).
rewrite (elim_length_ratio_inter_ll_1 Y C D P Q P Y P).
unfold inter_ll.
repeat split.
auto with Geom.
intro.

*****
H : parallel P Y P Q
H7 : not (eq r F0)
H4 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H5 : perp Y P P Q
H0 : not (eq P Q)
H3 : not (eq P Y)
H2 : not (eq C D)
H1 : parallel P Y C D
r : F
Y,P,Q,C,D : Point
*****
False
+++++
assert (T:=parallel_not_perp P Y P Q H H3 H0).
-----
Theorem elim_ratio_on_perp_d_a : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
cases_equality A P.
subst A.
clear H0.
basic_simpl.
unfold on_perp_d in H.
use H.
replace (0 - r / (2 + 2) * Py P Q P) with (S Q P Y).
replace (P ** Y / C ** D) with (- (Y**P / C**D)).
rewrite (elim_length_ratio_inter_ll_1 Y C D P Q P Y P).
unfold inter_ll.
repeat split.
auto with Geom.
intro.
assert (T:=parallel_not_perp P Y P Q H H3 H0).

*****
T : not (perp P Y P Q)
H : parallel P Y P Q
H7 : not (eq r F0)
H4 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H5 : perp Y P P Q
H0 : not (eq P Q)
H3 : not (eq P Y)
H2 : not (eq C D)
H1 : parallel P Y C D
r : F
Y,P,Q,C,D : Point
*****
False
+++++
assert (perp P Y P Q).
-----
Theorem elim_ratio_on_perp_d_a : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
cases_equality A P.
subst A.
clear H0.
basic_simpl.
unfold on_perp_d in H.
use H.
replace (0 - r / (2 + 2) * Py P Q P) with (S Q P Y).
replace (P ** Y / C ** D) with (- (Y**P / C**D)).
rewrite (elim_length_ratio_inter_ll_1 Y C D P Q P Y P).
unfold inter_ll.
repeat split.
auto with Geom.
intro.
assert (T:=parallel_not_perp P Y P Q H H3 H0).
assert (perp P Y P Q).

*****
T : not (perp P Y P Q)
H : parallel P Y P Q
H7 : not (eq r F0)
H4 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H5 : perp Y P P Q
H0 : not (eq P Q)
H3 : not (eq P Y)
H2 : not (eq C D)
H1 : parallel P Y C D
r : F
Y,P,Q,C,D : Point
*****
perp P Y P Q
+++++
auto with Geom.
-----
Theorem elim_ratio_on_perp_d_a : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
cases_equality A P.
subst A.
clear H0.
basic_simpl.
unfold on_perp_d in H.
use H.
replace (0 - r / (2 + 2) * Py P Q P) with (S Q P Y).
replace (P ** Y / C ** D) with (- (Y**P / C**D)).
rewrite (elim_length_ratio_inter_ll_1 Y C D P Q P Y P).
unfold inter_ll.
repeat split.
auto with Geom.
intro.
assert (T:=parallel_not_perp P Y P Q H H3 H0).
assert (perp P Y P Q).

*****
H6 : perp P Y P Q
T : not (perp P Y P Q)
H : parallel P Y P Q
H7 : not (eq r F0)
H4 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H5 : perp Y P P Q
H0 : not (eq P Q)
H3 : not (eq P Y)
H2 : not (eq C D)
H1 : parallel P Y C D
r : F
Y,P,Q,C,D : Point
*****
False
+++++
idtac.
-----
Theorem elim_ratio_on_perp_d_a : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
cases_equality A P.
subst A.
clear H0.
basic_simpl.
unfold on_perp_d in H.
use H.
replace (0 - r / (2 + 2) * Py P Q P) with (S Q P Y).
replace (P ** Y / C ** D) with (- (Y**P / C**D)).
rewrite (elim_length_ratio_inter_ll_1 Y C D P Q P Y P).
unfold inter_ll.
repeat split.
auto with Geom.
intro.
assert (T:=parallel_not_perp P Y P Q H H3 H0).
assert (perp P Y P Q).
idtac.

*****
H6 : perp P Y P Q
T : not (perp P Y P Q)
H : parallel P Y P Q
H7 : not (eq r F0)
H4 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H5 : perp Y P P Q
H0 : not (eq P Q)
H3 : not (eq P Y)
H2 : not (eq C D)
H1 : parallel P Y C D
r : F
Y,P,Q,C,D : Point
*****
False
+++++
intuition.
-----
Theorem elim_ratio_on_perp_d_a : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
cases_equality A P.
subst A.
clear H0.
basic_simpl.
unfold on_perp_d in H.
use H.
replace (0 - r / (2 + 2) * Py P Q P) with (S Q P Y).
replace (P ** Y / C ** D) with (- (Y**P / C**D)).
rewrite (elim_length_ratio_inter_ll_1 Y C D P Q P Y P).

*****
H7 : not (eq r F0)
H4 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H5 : perp Y P P Q
H0 : not (eq P Q)
H3 : not (eq P Y)
H2 : not (eq C D)
H1 : parallel P Y C D
r : F
Y,P,Q,C,D : Point
*****
not (eq (S Y P Q) F0)
+++++
intro.
-----
Theorem elim_ratio_on_perp_d_a : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
cases_equality A P.
subst A.
clear H0.
basic_simpl.
unfold on_perp_d in H.
use H.
replace (0 - r / (2 + 2) * Py P Q P) with (S Q P Y).
replace (P ** Y / C ** D) with (- (Y**P / C**D)).
rewrite (elim_length_ratio_inter_ll_1 Y C D P Q P Y P).
intro.

*****
H : eq (S Y P Q) F0
H7 : not (eq r F0)
H4 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H5 : perp Y P P Q
H0 : not (eq P Q)
H3 : not (eq P Y)
H2 : not (eq C D)
H1 : parallel P Y C D
r : F
Y,P,Q,C,D : Point
*****
False
+++++
uniformize_signed_areas.
-----
Theorem elim_ratio_on_perp_d_a : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
cases_equality A P.
subst A.
clear H0.
basic_simpl.
unfold on_perp_d in H.
use H.
replace (0 - r / (2 + 2) * Py P Q P) with (S Q P Y).
replace (P ** Y / C ** D) with (- (Y**P / C**D)).
rewrite (elim_length_ratio_inter_ll_1 Y C D P Q P Y P).
intro.
uniformize_signed_areas.

*****
H : eq (S P Q Y) F0
H4 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H7 : not (eq r F0)
H5 : perp Y P P Q
H0 : not (eq P Q)
H3 : not (eq P Y)
H2 : not (eq C D)
H1 : parallel P Y C D
r : F
Y,P,Q,C,D : Point
*****
False
+++++
rewrite H in H4.
-----
Theorem elim_ratio_on_perp_d_a : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
cases_equality A P.
subst A.
clear H0.
basic_simpl.
unfold on_perp_d in H.
use H.
replace (0 - r / (2 + 2) * Py P Q P) with (S Q P Y).
replace (P ** Y / C ** D) with (- (Y**P / C**D)).
rewrite (elim_length_ratio_inter_ll_1 Y C D P Q P Y P).
intro.
uniformize_signed_areas.
rewrite H in H4.

*****
H : eq (S P Q Y) F0
H4 : eq (Fmult r (Py P Q P)) (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) F0)
H7 : not (eq r F0)
H5 : perp Y P P Q
H0 : not (eq P Q)
H3 : not (eq P Y)
H2 : not (eq C D)
H1 : parallel P Y C D
r : F
Y,P,Q,C,D : Point
*****
False
+++++
basic_simpl.
-----
Theorem elim_ratio_on_perp_d_a : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
cases_equality A P.
subst A.
clear H0.
basic_simpl.
unfold on_perp_d in H.
use H.
replace (0 - r / (2 + 2) * Py P Q P) with (S Q P Y).
replace (P ** Y / C ** D) with (- (Y**P / C**D)).
rewrite (elim_length_ratio_inter_ll_1 Y C D P Q P Y P).
intro.
uniformize_signed_areas.
rewrite H in H4.
basic_simpl.

*****
H : eq (S P Q Y) F0
H4 : eq (Fmult r (Py P Q P)) F0
H7 : not (eq r F0)
H5 : perp Y P P Q
H0 : not (eq P Q)
H3 : not (eq P Y)
H2 : not (eq C D)
H1 : parallel P Y C D
r : F
Y,P,Q,C,D : Point
*****
False
+++++
assert (r * Py P Q P <> 0).
-----
Theorem elim_ratio_on_perp_d_a : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
cases_equality A P.
subst A.
clear H0.
basic_simpl.
unfold on_perp_d in H.
use H.
replace (0 - r / (2 + 2) * Py P Q P) with (S Q P Y).
replace (P ** Y / C ** D) with (- (Y**P / C**D)).
rewrite (elim_length_ratio_inter_ll_1 Y C D P Q P Y P).
intro.
uniformize_signed_areas.
rewrite H in H4.
basic_simpl.
assert (r * Py P Q P <> 0).

*****
H : eq (S P Q Y) F0
H4 : eq (Fmult r (Py P Q P)) F0
H7 : not (eq r F0)
H5 : perp Y P P Q
H0 : not (eq P Q)
H3 : not (eq P Y)
H2 : not (eq C D)
H1 : parallel P Y C D
r : F
Y,P,Q,C,D : Point
*****
not (eq (Fmult r (Py P Q P)) F0)
+++++
apply nonzeromult.
-----
Theorem elim_ratio_on_perp_d_a : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
cases_equality A P.
subst A.
clear H0.
basic_simpl.
unfold on_perp_d in H.
use H.
replace (0 - r / (2 + 2) * Py P Q P) with (S Q P Y).
replace (P ** Y / C ** D) with (- (Y**P / C**D)).
rewrite (elim_length_ratio_inter_ll_1 Y C D P Q P Y P).
intro.
uniformize_signed_areas.
rewrite H in H4.
basic_simpl.
assert (r * Py P Q P <> 0).
apply nonzeromult.

*****
H : eq (S P Q Y) F0
H4 : eq (Fmult r (Py P Q P)) F0
H7 : not (eq r F0)
H5 : perp Y P P Q
H0 : not (eq P Q)
H3 : not (eq P Y)
H2 : not (eq C D)
H1 : parallel P Y C D
r : F
Y,P,Q,C,D : Point
*****
not (eq r F0)
+++++
auto with Geom.
-----
Theorem elim_ratio_on_perp_d_a : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
cases_equality A P.
subst A.
clear H0.
basic_simpl.
unfold on_perp_d in H.
use H.
replace (0 - r / (2 + 2) * Py P Q P) with (S Q P Y).
replace (P ** Y / C ** D) with (- (Y**P / C**D)).
rewrite (elim_length_ratio_inter_ll_1 Y C D P Q P Y P).
intro.
uniformize_signed_areas.
rewrite H in H4.
basic_simpl.
assert (r * Py P Q P <> 0).
apply nonzeromult.

*****
H : eq (S P Q Y) F0
H4 : eq (Fmult r (Py P Q P)) F0
H7 : not (eq r F0)
H5 : perp Y P P Q
H0 : not (eq P Q)
H3 : not (eq P Y)
H2 : not (eq C D)
H1 : parallel P Y C D
r : F
Y,P,Q,C,D : Point
*****
not (eq (Py P Q P) F0)
+++++
auto with Geom.
-----
Theorem elim_ratio_on_perp_d_a : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
cases_equality A P.
subst A.
clear H0.
basic_simpl.
unfold on_perp_d in H.
use H.
replace (0 - r / (2 + 2) * Py P Q P) with (S Q P Y).
replace (P ** Y / C ** D) with (- (Y**P / C**D)).
rewrite (elim_length_ratio_inter_ll_1 Y C D P Q P Y P).
intro.
uniformize_signed_areas.
rewrite H in H4.
basic_simpl.
assert (r * Py P Q P <> 0).

*****
H6 : not (eq (Fmult r (Py P Q P)) F0)
H : eq (S P Q Y) F0
H4 : eq (Fmult r (Py P Q P)) F0
H7 : not (eq r F0)
H5 : perp Y P P Q
H0 : not (eq P Q)
H3 : not (eq P Y)
H2 : not (eq C D)
H1 : parallel P Y C D
r : F
Y,P,Q,C,D : Point
*****
False
+++++
idtac.
-----
Theorem elim_ratio_on_perp_d_a : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
cases_equality A P.
subst A.
clear H0.
basic_simpl.
unfold on_perp_d in H.
use H.
replace (0 - r / (2 + 2) * Py P Q P) with (S Q P Y).
replace (P ** Y / C ** D) with (- (Y**P / C**D)).
rewrite (elim_length_ratio_inter_ll_1 Y C D P Q P Y P).
intro.
uniformize_signed_areas.
rewrite H in H4.
basic_simpl.
assert (r * Py P Q P <> 0).
idtac.

*****
H6 : not (eq (Fmult r (Py P Q P)) F0)
H : eq (S P Q Y) F0
H4 : eq (Fmult r (Py P Q P)) F0
H7 : not (eq r F0)
H5 : perp Y P P Q
H0 : not (eq P Q)
H3 : not (eq P Y)
H2 : not (eq C D)
H1 : parallel P Y C D
r : F
Y,P,Q,C,D : Point
*****
False
+++++
intuition.
-----
Theorem elim_ratio_on_perp_d_a : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
cases_equality A P.
subst A.
clear H0.
basic_simpl.
unfold on_perp_d in H.
use H.
replace (0 - r / (2 + 2) * Py P Q P) with (S Q P Y).
replace (P ** Y / C ** D) with (- (Y**P / C**D)).
rewrite (elim_length_ratio_inter_ll_1 Y C D P Q P Y P).

*****
H7 : not (eq r F0)
H4 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H5 : perp Y P P Q
H0 : not (eq P Q)
H3 : not (eq P Y)
H2 : not (eq C D)
H1 : parallel P Y C D
r : F
Y,P,Q,C,D : Point
*****
not (eq C D)
+++++
auto.
-----
Theorem elim_ratio_on_perp_d_a : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
cases_equality A P.
subst A.
clear H0.
basic_simpl.
unfold on_perp_d in H.
use H.
replace (0 - r / (2 + 2) * Py P Q P) with (S Q P Y).
replace (P ** Y / C ** D) with (- (Y**P / C**D)).
rewrite (elim_length_ratio_inter_ll_1 Y C D P Q P Y P).

*****
H7 : not (eq r F0)
H4 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H5 : perp Y P P Q
H0 : not (eq P Q)
H3 : not (eq P Y)
H2 : not (eq C D)
H1 : parallel P Y C D
r : F
Y,P,Q,C,D : Point
*****
parallel Y P C D
+++++
auto with Geom.
-----
Theorem elim_ratio_on_perp_d_a : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
cases_equality A P.
subst A.
clear H0.
basic_simpl.
unfold on_perp_d in H.
use H.
replace (0 - r / (2 + 2) * Py P Q P) with (S Q P Y).
replace (P ** Y / C ** D) with (- (Y**P / C**D)).

*****
H7 : not (eq r F0)
H4 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H5 : perp Y P P Q
H0 : not (eq P Q)
H3 : not (eq P Y)
H2 : not (eq C D)
H1 : parallel P Y C D
r : F
Y,P,Q,C,D : Point
*****
eq (Fopp (Fdiv (DSeg Y P) (DSeg C D))) (Fdiv (DSeg P Y) (DSeg C D))
+++++
uniformize_dir_seg.
-----
Theorem elim_ratio_on_perp_d_a : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
cases_equality A P.
subst A.
clear H0.
basic_simpl.
unfold on_perp_d in H.
use H.
replace (0 - r / (2 + 2) * Py P Q P) with (S Q P Y).
replace (P ** Y / C ** D) with (- (Y**P / C**D)).
uniformize_dir_seg.

*****
H7 : not (eq r F0)
H4 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H5 : perp Y P P Q
H0 : not (eq P Q)
H3 : not (eq P Y)
H2 : not (eq C D)
H1 : parallel P Y C D
r : F
Y,P,Q,C,D : Point
*****
eq (Fopp (Fdiv (DSeg Y P) (DSeg C D))) (Fdiv (Fopp (DSeg Y P)) (DSeg C D))
+++++
field.
-----
Theorem elim_ratio_on_perp_d_a : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
cases_equality A P.
subst A.
clear H0.
basic_simpl.
unfold on_perp_d in H.
use H.
replace (0 - r / (2 + 2) * Py P Q P) with (S Q P Y).
replace (P ** Y / C ** D) with (- (Y**P / C**D)).
uniformize_dir_seg.
field.

*****
H7 : not (eq r F0)
H4 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H5 : perp Y P P Q
H0 : not (eq P Q)
H3 : not (eq P Y)
H2 : not (eq C D)
H1 : parallel P Y C D
r : F
Y,P,Q,C,D : Point
*****
not (eq (DSeg C D) F0)
+++++
auto with Geom.
-----
Theorem elim_ratio_on_perp_d_a : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
cases_equality A P.
subst A.
clear H0.
basic_simpl.
unfold on_perp_d in H.
use H.
replace (0 - r / (2 + 2) * Py P Q P) with (S Q P Y).

*****
H7 : not (eq r F0)
H4 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H5 : perp Y P P Q
H0 : not (eq P Q)
H3 : not (eq P Y)
H2 : not (eq C D)
H1 : parallel P Y C D
r : F
Y,P,Q,C,D : Point
*****
eq (S Q P Y) (Fminus F0 (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py P Q P)))
+++++
uniformize_signed_areas.
-----
Theorem elim_ratio_on_perp_d_a : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
cases_equality A P.
subst A.
clear H0.
basic_simpl.
unfold on_perp_d in H.
use H.
replace (0 - r / (2 + 2) * Py P Q P) with (S Q P Y).
uniformize_signed_areas.

*****
H4 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H7 : not (eq r F0)
H5 : perp Y P P Q
H0 : not (eq P Q)
H3 : not (eq P Y)
H2 : not (eq C D)
H1 : parallel P Y C D
r : F
Y,P,Q,C,D : Point
*****
eq (Fopp (S P Q Y)) (Fminus F0 (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py P Q P)))
+++++
IsoleVar (S P Q Y) H4.
-----
Theorem elim_ratio_on_perp_d_a : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
cases_equality A P.
subst A.
clear H0.
basic_simpl.
unfold on_perp_d in H.
use H.
replace (0 - r / (2 + 2) * Py P Q P) with (S Q P Y).
uniformize_signed_areas.
IsoleVar (S P Q Y) H4.

*****
H4 : eq (S P Q Y)\n (Fdiv (Fmult r (Py P Q P)) (Fplus (Fplus F1 F1) (Fplus F1 F1)))
H : not (eq (Fplus (Fplus F1 F1) (Fplus F1 F1)) F0)
H7 : not (eq r F0)
H5 : perp Y P P Q
H0 : not (eq P Q)
H3 : not (eq P Y)
H2 : not (eq C D)
H1 : parallel P Y C D
r : F
Y,P,Q,C,D : Point
*****
eq (Fopp (S P Q Y)) (Fminus F0 (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py P Q P)))
+++++
rewrite H4.
-----
Theorem elim_ratio_on_perp_d_a : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
cases_equality A P.
subst A.
clear H0.
basic_simpl.
unfold on_perp_d in H.
use H.
replace (0 - r / (2 + 2) * Py P Q P) with (S Q P Y).
uniformize_signed_areas.
IsoleVar (S P Q Y) H4.
rewrite H4.

*****
H4 : eq (S P Q Y)\n (Fdiv (Fmult r (Py P Q P)) (Fplus (Fplus F1 F1) (Fplus F1 F1)))
H : not (eq (Fplus (Fplus F1 F1) (Fplus F1 F1)) F0)
H7 : not (eq r F0)
H5 : perp Y P P Q
H0 : not (eq P Q)
H3 : not (eq P Y)
H2 : not (eq C D)
H1 : parallel P Y C D
r : F
Y,P,Q,C,D : Point
*****
eq (Fopp (Fdiv (Fmult r (Py P Q P)) (Fplus (Fplus F1 F1) (Fplus F1 F1)))) (Fminus F0 (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py P Q P)))
+++++
field.
-----
Theorem elim_ratio_on_perp_d_a : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
cases_equality A P.
subst A.
clear H0.
basic_simpl.
unfold on_perp_d in H.
use H.
replace (0 - r / (2 + 2) * Py P Q P) with (S Q P Y).
uniformize_signed_areas.
IsoleVar (S P Q Y) H4.
rewrite H4.
field.

*****
H4 : eq (S P Q Y)\n (Fdiv (Fmult r (Py P Q P)) (Fplus (Fplus F1 F1) (Fplus F1 F1)))
H : not (eq (Fplus (Fplus F1 F1) (Fplus F1 F1)) F0)
H7 : not (eq r F0)
H5 : perp Y P P Q
H0 : not (eq P Q)
H3 : not (eq P Y)
H2 : not (eq C D)
H1 : parallel P Y C D
r : F
Y,P,Q,C,D : Point
*****
not (eq (Fmult (Fplus F1 F1) (Fplus F1 F1)) F0)
+++++
apply nonzeromult.
-----
Theorem elim_ratio_on_perp_d_a : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
cases_equality A P.
subst A.
clear H0.
basic_simpl.
unfold on_perp_d in H.
use H.
replace (0 - r / (2 + 2) * Py P Q P) with (S Q P Y).
uniformize_signed_areas.
IsoleVar (S P Q Y) H4.
rewrite H4.
field.
apply nonzeromult.

*****
H4 : eq (S P Q Y)\n (Fdiv (Fmult r (Py P Q P)) (Fplus (Fplus F1 F1) (Fplus F1 F1)))
H : not (eq (Fplus (Fplus F1 F1) (Fplus F1 F1)) F0)
H7 : not (eq r F0)
H5 : perp Y P P Q
H0 : not (eq P Q)
H3 : not (eq P Y)
H2 : not (eq C D)
H1 : parallel P Y C D
r : F
Y,P,Q,C,D : Point
*****
not (eq (Fplus F1 F1) F0)
+++++
auto with Geom.
-----
Theorem elim_ratio_on_perp_d_a : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
cases_equality A P.
subst A.
clear H0.
basic_simpl.
unfold on_perp_d in H.
use H.
replace (0 - r / (2 + 2) * Py P Q P) with (S Q P Y).
uniformize_signed_areas.
IsoleVar (S P Q Y) H4.
rewrite H4.
field.
apply nonzeromult.

*****
H4 : eq (S P Q Y)\n (Fdiv (Fmult r (Py P Q P)) (Fplus (Fplus F1 F1) (Fplus F1 F1)))
H : not (eq (Fplus (Fplus F1 F1) (Fplus F1 F1)) F0)
H7 : not (eq r F0)
H5 : perp Y P P Q
H0 : not (eq P Q)
H3 : not (eq P Y)
H2 : not (eq C D)
H1 : parallel P Y C D
r : F
Y,P,Q,C,D : Point
*****
not (eq (Fplus F1 F1) F0)
+++++
auto with Geom.
-----
Theorem elim_ratio_on_perp_d_a : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
cases_equality A P.
subst A.
clear H0.
basic_simpl.
unfold on_perp_d in H.
use H.
replace (0 - r / (2 + 2) * Py P Q P) with (S Q P Y).
uniformize_signed_areas.
IsoleVar (S P Q Y) H4.

*****
H4 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H7 : not (eq r F0)
H5 : perp Y P P Q
H0 : not (eq P Q)
H3 : not (eq P Y)
H2 : not (eq C D)
H1 : parallel P Y C D
r : F
Y,P,Q,C,D : Point
*****
not (eq (Fplus (Fplus F1 F1) (Fplus F1 F1)) F0)
+++++
replace (2+2) with (2*2) by ring.
-----
Theorem elim_ratio_on_perp_d_a : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
cases_equality A P.
subst A.
clear H0.
basic_simpl.
unfold on_perp_d in H.
use H.
replace (0 - r / (2 + 2) * Py P Q P) with (S Q P Y).
uniformize_signed_areas.
IsoleVar (S P Q Y) H4.
replace (2+2) with (2*2) by ring.

*****
H4 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H7 : not (eq r F0)
H5 : perp Y P P Q
H0 : not (eq P Q)
H3 : not (eq P Y)
H2 : not (eq C D)
H1 : parallel P Y C D
r : F
Y,P,Q,C,D : Point
*****
not (eq (Fmult (Fplus F1 F1) (Fplus F1 F1)) F0)
+++++
apply nonzeromult.
-----
Theorem elim_ratio_on_perp_d_a : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
cases_equality A P.
subst A.
clear H0.
basic_simpl.
unfold on_perp_d in H.
use H.
replace (0 - r / (2 + 2) * Py P Q P) with (S Q P Y).
uniformize_signed_areas.
IsoleVar (S P Q Y) H4.
replace (2+2) with (2*2) by ring.
apply nonzeromult.

*****
H4 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H7 : not (eq r F0)
H5 : perp Y P P Q
H0 : not (eq P Q)
H3 : not (eq P Y)
H2 : not (eq C D)
H1 : parallel P Y C D
r : F
Y,P,Q,C,D : Point
*****
not (eq (Fplus F1 F1) F0)
+++++
auto with Geom.
-----
Theorem elim_ratio_on_perp_d_a : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
cases_equality A P.
subst A.
clear H0.
basic_simpl.
unfold on_perp_d in H.
use H.
replace (0 - r / (2 + 2) * Py P Q P) with (S Q P Y).
uniformize_signed_areas.
IsoleVar (S P Q Y) H4.
replace (2+2) with (2*2) by ring.
apply nonzeromult.

*****
H4 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H7 : not (eq r F0)
H5 : perp Y P P Q
H0 : not (eq P Q)
H3 : not (eq P Y)
H2 : not (eq C D)
H1 : parallel P Y C D
r : F
Y,P,Q,C,D : Point
*****
not (eq (Fplus F1 F1) F0)
+++++
auto with Geom.
-----
Theorem elim_ratio_on_perp_d_a : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
cases_equality A P.

*****
H4 : not (eq A P)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A P Y
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C,D : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (Fminus (S A P Q) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py P Q P))) (S4 C P D Q))
+++++
apply elim_ratio_on_perp_d_a_aux.
-----
Theorem elim_ratio_on_perp_d_a : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
cases_equality A P.
apply elim_ratio_on_perp_d_a_aux.

*****
H4 : not (eq A P)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A P Y
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C,D : Point
*****
on_perp_d Y P Q r
+++++
auto.
-----
Theorem elim_ratio_on_perp_d_a : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
cases_equality A P.
apply elim_ratio_on_perp_d_a_aux.

*****
H4 : not (eq A P)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A P Y
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C,D : Point
*****
Col A P Y
+++++
auto.
-----
Theorem elim_ratio_on_perp_d_a : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
cases_equality A P.
apply elim_ratio_on_perp_d_a_aux.

*****
H4 : not (eq A P)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A P Y
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C,D : Point
*****
parallel A Y C D
+++++
auto.
-----
Theorem elim_ratio_on_perp_d_a : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
cases_equality A P.
apply elim_ratio_on_perp_d_a_aux.

*****
H4 : not (eq A P)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A P Y
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C,D : Point
*****
not (eq C D)
+++++
auto.
-----
Theorem elim_ratio_on_perp_d_a : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
cases_equality A P.
apply elim_ratio_on_perp_d_a_aux.

*****
H4 : not (eq A P)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A P Y
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C,D : Point
*****
not (eq A Y)
+++++
auto.
-----
Theorem elim_ratio_on_perp_d_a : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
cases_equality A P.
apply elim_ratio_on_perp_d_a_aux.

*****
H4 : not (eq A P)
H3 : not (eq A Y)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : Col A P Y
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C,D : Point
*****
not (eq A P)
+++++
auto.
-----
Theorem elim_ratio_on_perp_d_a : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C D -> C<>D -> A<>Y -> A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).
Proof.
intros.
cases_equality A P.

*****

*****

+++++
Qed.
-----
Theorem elim_ratio_on_perp_d_spec_a :\n forall Y P Q A C : Point, forall r: F,\non_perp_d Y P Q r->\nCol A P Y  ->\nparallel A Y C Y ->\nC<>Y ->\nA<>Y ->\nA**Y / C**Y = (S A P Q - r / (2 + 2) * Py P Q P) /\n(S Q C P -r/(2+2) * Py P Q P).
-----
Theorem elim_ratio_on_perp_d_spec_a : forall Y P Q A C : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C Y -> C<>Y -> A<>Y -> A**Y / C**Y = (S A P Q - r / (2 + 2) * Py P Q P) / (S Q C P -r/(2+2) * Py P Q P).

*****

*****
forall (Y P Q A C : Point) (r : F) (_ : on_perp_d Y P Q r) (_ : Col A P Y) (_ : parallel A Y C Y) (_ : not (eq C Y)) (_ : not (eq A Y)), eq (Fdiv (DSeg A Y) (DSeg C Y)) (Fdiv (Fminus (S A P Q) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py P Q P))) (Fminus (S Q C P) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py P Q P))))
+++++
Proof.
-----
Theorem elim_ratio_on_perp_d_spec_a : forall Y P Q A C : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C Y -> C<>Y -> A<>Y -> A**Y / C**Y = (S A P Q - r / (2 + 2) * Py P Q P) / (S Q C P -r/(2+2) * Py P Q P).
Proof.

*****

*****
forall (Y P Q A C : Point) (r : F) (_ : on_perp_d Y P Q r) (_ : Col A P Y) (_ : parallel A Y C Y) (_ : not (eq C Y)) (_ : not (eq A Y)), eq (Fdiv (DSeg A Y) (DSeg C Y)) (Fdiv (Fminus (S A P Q) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py P Q P))) (Fminus (S Q C P) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py P Q P))))
+++++
intros.
-----
Theorem elim_ratio_on_perp_d_spec_a : forall Y P Q A C : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C Y -> C<>Y -> A<>Y -> A**Y / C**Y = (S A P Q - r / (2 + 2) * Py P Q P) / (S Q C P -r/(2+2) * Py P Q P).
Proof.
intros.

*****
H3 : not (eq A Y)
H2 : not (eq C Y)
H1 : parallel A Y C Y
H0 : Col A P Y
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C Y)) (Fdiv (Fminus (S A P Q) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py P Q P))) (Fminus (S Q C P) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py P Q P))))
+++++
rewrite (elim_ratio_on_perp_d_a Y P Q A C Y r).
-----
Theorem elim_ratio_on_perp_d_spec_a : forall Y P Q A C : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C Y -> C<>Y -> A<>Y -> A**Y / C**Y = (S A P Q - r / (2 + 2) * Py P Q P) / (S Q C P -r/(2+2) * Py P Q P).
Proof.
intros.
rewrite (elim_ratio_on_perp_d_a Y P Q A C Y r).

*****
H3 : not (eq A Y)
H2 : not (eq C Y)
H1 : parallel A Y C Y
H0 : Col A P Y
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C : Point
*****
eq (Fdiv (Fminus (S A P Q) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py P Q P))) (S4 C P Y Q)) (Fdiv (Fminus (S A P Q) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py P Q P))) (Fminus (S Q C P) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py P Q P))))
+++++
try assumption.
-----
Theorem elim_ratio_on_perp_d_spec_a : forall Y P Q A C : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C Y -> C<>Y -> A<>Y -> A**Y / C**Y = (S A P Q - r / (2 + 2) * Py P Q P) / (S Q C P -r/(2+2) * Py P Q P).
Proof.
intros.
rewrite (elim_ratio_on_perp_d_a Y P Q A C Y r).
try assumption.

*****
H3 : not (eq A Y)
H2 : not (eq C Y)
H1 : parallel A Y C Y
H0 : Col A P Y
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C : Point
*****
eq (Fdiv (Fminus (S A P Q) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py P Q P))) (S4 C P Y Q)) (Fdiv (Fminus (S A P Q) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py P Q P))) (Fminus (S Q C P) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py P Q P))))
+++++
unfold S4.
-----
Theorem elim_ratio_on_perp_d_spec_a : forall Y P Q A C : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C Y -> C<>Y -> A<>Y -> A**Y / C**Y = (S A P Q - r / (2 + 2) * Py P Q P) / (S Q C P -r/(2+2) * Py P Q P).
Proof.
intros.
rewrite (elim_ratio_on_perp_d_a Y P Q A C Y r).
try assumption.
unfold S4.

*****
H3 : not (eq A Y)
H2 : not (eq C Y)
H1 : parallel A Y C Y
H0 : Col A P Y
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C : Point
*****
eq (Fdiv (Fminus (S A P Q) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py P Q P))) (Fplus (S C P Y) (S C Y Q))) (Fdiv (Fminus (S A P Q) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py P Q P))) (Fminus (S Q C P) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py P Q P))))
+++++
replace (S C Y Q) with (S Q C Y) by auto with Geom.
-----
Theorem elim_ratio_on_perp_d_spec_a : forall Y P Q A C : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C Y -> C<>Y -> A<>Y -> A**Y / C**Y = (S A P Q - r / (2 + 2) * Py P Q P) / (S Q C P -r/(2+2) * Py P Q P).
Proof.
intros.
rewrite (elim_ratio_on_perp_d_a Y P Q A C Y r).
try assumption.
unfold S4.
replace (S C Y Q) with (S Q C Y) by auto with Geom.

*****
H3 : not (eq A Y)
H2 : not (eq C Y)
H1 : parallel A Y C Y
H0 : Col A P Y
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C : Point
*****
eq (Fdiv (Fminus (S A P Q) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py P Q P))) (Fplus (S C P Y) (S Q C Y))) (Fdiv (Fminus (S A P Q) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py P Q P))) (Fminus (S Q C P) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py P Q P))))
+++++
rewrite (elim_area_on_perp_d C P P Q Y r).
-----
Theorem elim_ratio_on_perp_d_spec_a : forall Y P Q A C : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C Y -> C<>Y -> A<>Y -> A**Y / C**Y = (S A P Q - r / (2 + 2) * Py P Q P) / (S Q C P -r/(2+2) * Py P Q P).
Proof.
intros.
rewrite (elim_ratio_on_perp_d_a Y P Q A C Y r).
try assumption.
unfold S4.
replace (S C Y Q) with (S Q C Y) by auto with Geom.
rewrite (elim_area_on_perp_d C P P Q Y r).

*****
H3 : not (eq A Y)
H2 : not (eq C Y)
H1 : parallel A Y C Y
H0 : Col A P Y
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C : Point
*****
eq (Fdiv (Fminus (S A P Q) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py P Q P))) (Fplus (Fminus (S C P P) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py4 P C Q P))) (S Q C Y))) (Fdiv (Fminus (S A P Q) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py P Q P))) (Fminus (S Q C P) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py P Q P))))
+++++
idtac.
-----
Theorem elim_ratio_on_perp_d_spec_a : forall Y P Q A C : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C Y -> C<>Y -> A<>Y -> A**Y / C**Y = (S A P Q - r / (2 + 2) * Py P Q P) / (S Q C P -r/(2+2) * Py P Q P).
Proof.
intros.
rewrite (elim_ratio_on_perp_d_a Y P Q A C Y r).
try assumption.
unfold S4.
replace (S C Y Q) with (S Q C Y) by auto with Geom.
rewrite (elim_area_on_perp_d C P P Q Y r).
idtac.

*****
H3 : not (eq A Y)
H2 : not (eq C Y)
H1 : parallel A Y C Y
H0 : Col A P Y
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C : Point
*****
eq (Fdiv (Fminus (S A P Q) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py P Q P))) (Fplus (Fminus (S C P P) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py4 P C Q P))) (S Q C Y))) (Fdiv (Fminus (S A P Q) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py P Q P))) (Fminus (S Q C P) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py P Q P))))
+++++
rewrite (elim_area_on_perp_d Q C P Q Y r).
-----
Theorem elim_ratio_on_perp_d_spec_a : forall Y P Q A C : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C Y -> C<>Y -> A<>Y -> A**Y / C**Y = (S A P Q - r / (2 + 2) * Py P Q P) / (S Q C P -r/(2+2) * Py P Q P).
Proof.
intros.
rewrite (elim_ratio_on_perp_d_a Y P Q A C Y r).
try assumption.
unfold S4.
replace (S C Y Q) with (S Q C Y) by auto with Geom.
rewrite (elim_area_on_perp_d C P P Q Y r).
idtac.
rewrite (elim_area_on_perp_d Q C P Q Y r).

*****
H3 : not (eq A Y)
H2 : not (eq C Y)
H1 : parallel A Y C Y
H0 : Col A P Y
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C : Point
*****
eq (Fdiv (Fminus (S A P Q) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py P Q P))) (Fplus (Fminus (S C P P) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py4 P C Q P))) (Fminus (S Q C P) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py4 P Q Q C))))) (Fdiv (Fminus (S A P Q) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py P Q P))) (Fminus (S Q C P) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py P Q P))))
+++++
idtac.
-----
Theorem elim_ratio_on_perp_d_spec_a : forall Y P Q A C : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C Y -> C<>Y -> A<>Y -> A**Y / C**Y = (S A P Q - r / (2 + 2) * Py P Q P) / (S Q C P -r/(2+2) * Py P Q P).
Proof.
intros.
rewrite (elim_ratio_on_perp_d_a Y P Q A C Y r).
try assumption.
unfold S4.
replace (S C Y Q) with (S Q C Y) by auto with Geom.
rewrite (elim_area_on_perp_d C P P Q Y r).
idtac.
rewrite (elim_area_on_perp_d Q C P Q Y r).
idtac.

*****
H3 : not (eq A Y)
H2 : not (eq C Y)
H1 : parallel A Y C Y
H0 : Col A P Y
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C : Point
*****
eq (Fdiv (Fminus (S A P Q) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py P Q P))) (Fplus (Fminus (S C P P) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py4 P C Q P))) (Fminus (S Q C P) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py4 P Q Q C))))) (Fdiv (Fminus (S A P Q) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py P Q P))) (Fminus (S Q C P) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py P Q P))))
+++++
basic_simpl.
-----
Theorem elim_ratio_on_perp_d_spec_a : forall Y P Q A C : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C Y -> C<>Y -> A<>Y -> A**Y / C**Y = (S A P Q - r / (2 + 2) * Py P Q P) / (S Q C P -r/(2+2) * Py P Q P).
Proof.
intros.
rewrite (elim_ratio_on_perp_d_a Y P Q A C Y r).
try assumption.
unfold S4.
replace (S C Y Q) with (S Q C Y) by auto with Geom.
rewrite (elim_area_on_perp_d C P P Q Y r).
idtac.
rewrite (elim_area_on_perp_d Q C P Q Y r).
idtac.
basic_simpl.

*****
H3 : not (eq A Y)
H2 : not (eq C Y)
H1 : parallel A Y C Y
H0 : Col A P Y
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C : Point
*****
eq (Fdiv (Fminus (S A P Q) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py P Q P))) (Fplus (Fminus F0 (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py4 P C Q P))) (Fminus (S Q C P) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py4 P Q Q C))))) (Fdiv (Fminus (S A P Q) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py P Q P))) (Fminus (S Q C P) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py P Q P))))
+++++
unfold Py4.
-----
Theorem elim_ratio_on_perp_d_spec_a : forall Y P Q A C : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C Y -> C<>Y -> A<>Y -> A**Y / C**Y = (S A P Q - r / (2 + 2) * Py P Q P) / (S Q C P -r/(2+2) * Py P Q P).
Proof.
intros.
rewrite (elim_ratio_on_perp_d_a Y P Q A C Y r).
try assumption.
unfold S4.
replace (S C Y Q) with (S Q C Y) by auto with Geom.
rewrite (elim_area_on_perp_d C P P Q Y r).
idtac.
rewrite (elim_area_on_perp_d Q C P Q Y r).
idtac.
basic_simpl.
unfold Py4.

*****
H3 : not (eq A Y)
H2 : not (eq C Y)
H1 : parallel A Y C Y
H0 : Col A P Y
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C : Point
*****
eq (Fdiv (Fminus (S A P Q) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py P Q P))) (Fplus (Fminus F0 (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Fminus (Py P C P) (Py Q C P)))) (Fminus (S Q C P) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Fminus (Py P Q C) (Py Q Q C)))))) (Fdiv (Fminus (S A P Q) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py P Q P))) (Fminus (S Q C P) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py P Q P))))
+++++
basic_simpl.
-----
Theorem elim_ratio_on_perp_d_spec_a : forall Y P Q A C : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C Y -> C<>Y -> A<>Y -> A**Y / C**Y = (S A P Q - r / (2 + 2) * Py P Q P) / (S Q C P -r/(2+2) * Py P Q P).
Proof.
intros.
rewrite (elim_ratio_on_perp_d_a Y P Q A C Y r).
try assumption.
unfold S4.
replace (S C Y Q) with (S Q C Y) by auto with Geom.
rewrite (elim_area_on_perp_d C P P Q Y r).
idtac.
rewrite (elim_area_on_perp_d Q C P Q Y r).
idtac.
basic_simpl.
unfold Py4.
basic_simpl.

*****
H3 : not (eq A Y)
H2 : not (eq C Y)
H1 : parallel A Y C Y
H0 : Col A P Y
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C : Point
*****
eq (Fdiv (Fminus (S A P Q) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py P Q P))) (Fplus (Fminus F0 (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Fminus (Py P C P) (Py Q C P)))) (Fminus (S Q C P) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py P Q C))))) (Fdiv (Fminus (S A P Q) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py P Q P))) (Fminus (S Q C P) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py P Q P))))
+++++
uniformize_signed_areas.
-----
Theorem elim_ratio_on_perp_d_spec_a : forall Y P Q A C : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C Y -> C<>Y -> A<>Y -> A**Y / C**Y = (S A P Q - r / (2 + 2) * Py P Q P) / (S Q C P -r/(2+2) * Py P Q P).
Proof.
intros.
rewrite (elim_ratio_on_perp_d_a Y P Q A C Y r).
try assumption.
unfold S4.
replace (S C Y Q) with (S Q C Y) by auto with Geom.
rewrite (elim_area_on_perp_d C P P Q Y r).
idtac.
rewrite (elim_area_on_perp_d Q C P Q Y r).
idtac.
basic_simpl.
unfold Py4.
basic_simpl.
uniformize_signed_areas.

*****
H3 : not (eq A Y)
H2 : not (eq C Y)
H1 : parallel A Y C Y
H0 : Col A P Y
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C : Point
*****
eq (Fdiv (Fminus (S A P Q) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py P Q P))) (Fplus (Fminus F0 (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Fminus (Py P C P) (Py Q C P)))) (Fminus (S Q C P) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py P Q C))))) (Fdiv (Fminus (S A P Q) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py P Q P))) (Fminus (S Q C P) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py P Q P))))
+++++
replace (0 - r / (2 + 2) * (Py P C P - Py Q C P) + (S Q C P - r / (2 + 2) * Py P Q C)) with (S Q C P - r / (2 + 2) * (Py P C P - Py Q C P) - r / (2 + 2) * Py P Q C) by ring.
-----
Theorem elim_ratio_on_perp_d_spec_a : forall Y P Q A C : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C Y -> C<>Y -> A<>Y -> A**Y / C**Y = (S A P Q - r / (2 + 2) * Py P Q P) / (S Q C P -r/(2+2) * Py P Q P).
Proof.
intros.
rewrite (elim_ratio_on_perp_d_a Y P Q A C Y r).
try assumption.
unfold S4.
replace (S C Y Q) with (S Q C Y) by auto with Geom.
rewrite (elim_area_on_perp_d C P P Q Y r).
idtac.
rewrite (elim_area_on_perp_d Q C P Q Y r).
idtac.
basic_simpl.
unfold Py4.
basic_simpl.
uniformize_signed_areas.
replace (0 - r / (2 + 2) * (Py P C P - Py Q C P) + (S Q C P - r / (2 + 2) * Py P Q C)) with (S Q C P - r / (2 + 2) * (Py P C P - Py Q C P) - r / (2 + 2) * Py P Q C) by ring.

*****
H3 : not (eq A Y)
H2 : not (eq C Y)
H1 : parallel A Y C Y
H0 : Col A P Y
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C : Point
*****
eq (Fdiv (Fminus (S A P Q) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py P Q P))) (Fminus (Fminus (S Q C P) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Fminus (Py P C P) (Py Q C P)))) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py P Q C)))) (Fdiv (Fminus (S A P Q) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py P Q P))) (Fminus (S Q C P) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py P Q P))))
+++++
replace (Py P C P - Py Q C P) with (Py C P Q) by (unfold Py;uniformize_dir_seg;basic_simpl;ring).
-----
Theorem elim_ratio_on_perp_d_spec_a : forall Y P Q A C : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C Y -> C<>Y -> A<>Y -> A**Y / C**Y = (S A P Q - r / (2 + 2) * Py P Q P) / (S Q C P -r/(2+2) * Py P Q P).
Proof.
intros.
rewrite (elim_ratio_on_perp_d_a Y P Q A C Y r).
try assumption.
unfold S4.
replace (S C Y Q) with (S Q C Y) by auto with Geom.
rewrite (elim_area_on_perp_d C P P Q Y r).
idtac.
rewrite (elim_area_on_perp_d Q C P Q Y r).
idtac.
basic_simpl.
unfold Py4.
basic_simpl.
uniformize_signed_areas.
replace (0 - r / (2 + 2) * (Py P C P - Py Q C P) + (S Q C P - r / (2 + 2) * Py P Q C)) with (S Q C P - r / (2 + 2) * (Py P C P - Py Q C P) - r / (2 + 2) * Py P Q C) by ring.
replace (Py P C P - Py Q C P) with (Py C P Q) by (unfold Py;uniformize_dir_seg;basic_simpl;ring).

*****
H3 : not (eq A Y)
H2 : not (eq C Y)
H1 : parallel A Y C Y
H0 : Col A P Y
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C : Point
*****
eq (Fdiv (Fminus (S A P Q) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py P Q P))) (Fminus (Fminus (S Q C P) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py C P Q))) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py P Q C)))) (Fdiv (Fminus (S A P Q) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py P Q P))) (Fminus (S Q C P) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py P Q P))))
+++++
replace (S Q C P - r / (2 + 2) * Py C P Q - r / (2 + 2) * Py P Q C) with (S Q C P -r/(2+2) * Py P Q P).
-----
Theorem elim_ratio_on_perp_d_spec_a : forall Y P Q A C : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C Y -> C<>Y -> A<>Y -> A**Y / C**Y = (S A P Q - r / (2 + 2) * Py P Q P) / (S Q C P -r/(2+2) * Py P Q P).
Proof.
intros.
rewrite (elim_ratio_on_perp_d_a Y P Q A C Y r).
try assumption.
unfold S4.
replace (S C Y Q) with (S Q C Y) by auto with Geom.
rewrite (elim_area_on_perp_d C P P Q Y r).
idtac.
rewrite (elim_area_on_perp_d Q C P Q Y r).
idtac.
basic_simpl.
unfold Py4.
basic_simpl.
uniformize_signed_areas.
replace (0 - r / (2 + 2) * (Py P C P - Py Q C P) + (S Q C P - r / (2 + 2) * Py P Q C)) with (S Q C P - r / (2 + 2) * (Py P C P - Py Q C P) - r / (2 + 2) * Py P Q C) by ring.
replace (Py P C P - Py Q C P) with (Py C P Q) by (unfold Py;uniformize_dir_seg;basic_simpl;ring).
replace (S Q C P - r / (2 + 2) * Py C P Q - r / (2 + 2) * Py P Q C) with (S Q C P -r/(2+2) * Py P Q P).

*****
H3 : not (eq A Y)
H2 : not (eq C Y)
H1 : parallel A Y C Y
H0 : Col A P Y
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C : Point
*****
eq (Fdiv (Fminus (S A P Q) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py P Q P))) (Fminus (S Q C P) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py P Q P)))) (Fdiv (Fminus (S A P Q) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py P Q P))) (Fminus (S Q C P) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py P Q P))))
+++++
trivial.
-----
Theorem elim_ratio_on_perp_d_spec_a : forall Y P Q A C : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C Y -> C<>Y -> A<>Y -> A**Y / C**Y = (S A P Q - r / (2 + 2) * Py P Q P) / (S Q C P -r/(2+2) * Py P Q P).
Proof.
intros.
rewrite (elim_ratio_on_perp_d_a Y P Q A C Y r).
try assumption.
unfold S4.
replace (S C Y Q) with (S Q C Y) by auto with Geom.
rewrite (elim_area_on_perp_d C P P Q Y r).
idtac.
rewrite (elim_area_on_perp_d Q C P Q Y r).
idtac.
basic_simpl.
unfold Py4.
basic_simpl.
uniformize_signed_areas.
replace (0 - r / (2 + 2) * (Py P C P - Py Q C P) + (S Q C P - r / (2 + 2) * Py P Q C)) with (S Q C P - r / (2 + 2) * (Py P C P - Py Q C P) - r / (2 + 2) * Py P Q C) by ring.
replace (Py P C P - Py Q C P) with (Py C P Q) by (unfold Py;uniformize_dir_seg;basic_simpl;ring).
replace (S Q C P - r / (2 + 2) * Py C P Q - r / (2 + 2) * Py P Q C) with (S Q C P -r/(2+2) * Py P Q P).

*****
H3 : not (eq A Y)
H2 : not (eq C Y)
H1 : parallel A Y C Y
H0 : Col A P Y
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C : Point
*****
eq (Fminus (S Q C P) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py P Q P))) (Fminus (Fminus (S Q C P) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py C P Q))) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Py P Q C)))
+++++
unfold Py.
-----
Theorem elim_ratio_on_perp_d_spec_a : forall Y P Q A C : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C Y -> C<>Y -> A<>Y -> A**Y / C**Y = (S A P Q - r / (2 + 2) * Py P Q P) / (S Q C P -r/(2+2) * Py P Q P).
Proof.
intros.
rewrite (elim_ratio_on_perp_d_a Y P Q A C Y r).
try assumption.
unfold S4.
replace (S C Y Q) with (S Q C Y) by auto with Geom.
rewrite (elim_area_on_perp_d C P P Q Y r).
idtac.
rewrite (elim_area_on_perp_d Q C P Q Y r).
idtac.
basic_simpl.
unfold Py4.
basic_simpl.
uniformize_signed_areas.
replace (0 - r / (2 + 2) * (Py P C P - Py Q C P) + (S Q C P - r / (2 + 2) * Py P Q C)) with (S Q C P - r / (2 + 2) * (Py P C P - Py Q C P) - r / (2 + 2) * Py P Q C) by ring.
replace (Py P C P - Py Q C P) with (Py C P Q) by (unfold Py;uniformize_dir_seg;basic_simpl;ring).
replace (S Q C P - r / (2 + 2) * Py C P Q - r / (2 + 2) * Py P Q C) with (S Q C P -r/(2+2) * Py P Q P).
unfold Py.

*****
H3 : not (eq A Y)
H2 : not (eq C Y)
H1 : parallel A Y C Y
H0 : Col A P Y
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C : Point
*****
eq (Fminus (S Q C P) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Fminus (Fplus (Fmult (DSeg P Q) (DSeg P Q)) (Fmult (DSeg Q P) (DSeg Q P))) (Fmult (DSeg P P) (DSeg P P))))) (Fminus (Fminus (S Q C P) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Fminus (Fplus (Fmult (DSeg C P) (DSeg C P)) (Fmult (DSeg P Q) (DSeg P Q))) (Fmult (DSeg C Q) (DSeg C Q))))) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Fminus (Fplus (Fmult (DSeg P Q) (DSeg P Q)) (Fmult (DSeg Q C) (DSeg Q C))) (Fmult (DSeg P C) (DSeg P C)))))
+++++
uniformize_dir_seg.
-----
Theorem elim_ratio_on_perp_d_spec_a : forall Y P Q A C : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C Y -> C<>Y -> A<>Y -> A**Y / C**Y = (S A P Q - r / (2 + 2) * Py P Q P) / (S Q C P -r/(2+2) * Py P Q P).
Proof.
intros.
rewrite (elim_ratio_on_perp_d_a Y P Q A C Y r).
try assumption.
unfold S4.
replace (S C Y Q) with (S Q C Y) by auto with Geom.
rewrite (elim_area_on_perp_d C P P Q Y r).
idtac.
rewrite (elim_area_on_perp_d Q C P Q Y r).
idtac.
basic_simpl.
unfold Py4.
basic_simpl.
uniformize_signed_areas.
replace (0 - r / (2 + 2) * (Py P C P - Py Q C P) + (S Q C P - r / (2 + 2) * Py P Q C)) with (S Q C P - r / (2 + 2) * (Py P C P - Py Q C P) - r / (2 + 2) * Py P Q C) by ring.
replace (Py P C P - Py Q C P) with (Py C P Q) by (unfold Py;uniformize_dir_seg;basic_simpl;ring).
replace (S Q C P - r / (2 + 2) * Py C P Q - r / (2 + 2) * Py P Q C) with (S Q C P -r/(2+2) * Py P Q P).
unfold Py.
uniformize_dir_seg.

*****
H3 : not (eq A Y)
H2 : not (eq C Y)
H1 : parallel A Y C Y
H0 : Col A P Y
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C : Point
*****
eq (Fminus (S Q C P) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Fminus (Fplus (Fmult (DSeg P Q) (DSeg P Q)) (Fmult (Fopp (DSeg P Q)) (Fopp (DSeg P Q)))) (Fmult (DSeg P P) (DSeg P P))))) (Fminus (Fminus (S Q C P) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Fminus (Fplus (Fmult (Fopp (DSeg P C)) (Fopp (DSeg P C))) (Fmult (DSeg P Q) (DSeg P Q))) (Fmult (Fopp (DSeg Q C)) (Fopp (DSeg Q C)))))) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Fminus (Fplus (Fmult (DSeg P Q) (DSeg P Q)) (Fmult (DSeg Q C) (DSeg Q C))) (Fmult (DSeg P C) (DSeg P C)))))
+++++
basic_simpl.
-----
Theorem elim_ratio_on_perp_d_spec_a : forall Y P Q A C : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C Y -> C<>Y -> A<>Y -> A**Y / C**Y = (S A P Q - r / (2 + 2) * Py P Q P) / (S Q C P -r/(2+2) * Py P Q P).
Proof.
intros.
rewrite (elim_ratio_on_perp_d_a Y P Q A C Y r).
try assumption.
unfold S4.
replace (S C Y Q) with (S Q C Y) by auto with Geom.
rewrite (elim_area_on_perp_d C P P Q Y r).
idtac.
rewrite (elim_area_on_perp_d Q C P Q Y r).
idtac.
basic_simpl.
unfold Py4.
basic_simpl.
uniformize_signed_areas.
replace (0 - r / (2 + 2) * (Py P C P - Py Q C P) + (S Q C P - r / (2 + 2) * Py P Q C)) with (S Q C P - r / (2 + 2) * (Py P C P - Py Q C P) - r / (2 + 2) * Py P Q C) by ring.
replace (Py P C P - Py Q C P) with (Py C P Q) by (unfold Py;uniformize_dir_seg;basic_simpl;ring).
replace (S Q C P - r / (2 + 2) * Py C P Q - r / (2 + 2) * Py P Q C) with (S Q C P -r/(2+2) * Py P Q P).
unfold Py.
uniformize_dir_seg.
basic_simpl.

*****
H3 : not (eq A Y)
H2 : not (eq C Y)
H1 : parallel A Y C Y
H0 : Col A P Y
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C : Point
*****
eq (Fminus (S Q C P) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Fplus (Fmult (DSeg P Q) (DSeg P Q)) (Fmult (DSeg P Q) (DSeg P Q))))) (Fminus (Fminus (S Q C P) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Fminus (Fplus (Fmult (DSeg P C) (DSeg P C)) (Fmult (DSeg P Q) (DSeg P Q))) (Fmult (DSeg Q C) (DSeg Q C))))) (Fmult (Fdiv r (Fplus (Fplus F1 F1) (Fplus F1 F1))) (Fminus (Fplus (Fmult (DSeg P Q) (DSeg P Q)) (Fmult (DSeg Q C) (DSeg Q C))) (Fmult (DSeg P C) (DSeg P C)))))
+++++
field.
-----
Theorem elim_ratio_on_perp_d_spec_a : forall Y P Q A C : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C Y -> C<>Y -> A<>Y -> A**Y / C**Y = (S A P Q - r / (2 + 2) * Py P Q P) / (S Q C P -r/(2+2) * Py P Q P).
Proof.
intros.
rewrite (elim_ratio_on_perp_d_a Y P Q A C Y r).
try assumption.
unfold S4.
replace (S C Y Q) with (S Q C Y) by auto with Geom.
rewrite (elim_area_on_perp_d C P P Q Y r).
idtac.
rewrite (elim_area_on_perp_d Q C P Q Y r).
idtac.
basic_simpl.
unfold Py4.
basic_simpl.
uniformize_signed_areas.
replace (0 - r / (2 + 2) * (Py P C P - Py Q C P) + (S Q C P - r / (2 + 2) * Py P Q C)) with (S Q C P - r / (2 + 2) * (Py P C P - Py Q C P) - r / (2 + 2) * Py P Q C) by ring.
replace (Py P C P - Py Q C P) with (Py C P Q) by (unfold Py;uniformize_dir_seg;basic_simpl;ring).
replace (S Q C P - r / (2 + 2) * Py C P Q - r / (2 + 2) * Py P Q C) with (S Q C P -r/(2+2) * Py P Q P).
unfold Py.
uniformize_dir_seg.
basic_simpl.
field.

*****
H3 : not (eq A Y)
H2 : not (eq C Y)
H1 : parallel A Y C Y
H0 : Col A P Y
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C : Point
*****
not (eq (Fmult (Fplus F1 F1) (Fplus F1 F1)) F0)
+++++
apply nonzeromult.
-----
Theorem elim_ratio_on_perp_d_spec_a : forall Y P Q A C : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C Y -> C<>Y -> A<>Y -> A**Y / C**Y = (S A P Q - r / (2 + 2) * Py P Q P) / (S Q C P -r/(2+2) * Py P Q P).
Proof.
intros.
rewrite (elim_ratio_on_perp_d_a Y P Q A C Y r).
try assumption.
unfold S4.
replace (S C Y Q) with (S Q C Y) by auto with Geom.
rewrite (elim_area_on_perp_d C P P Q Y r).
idtac.
rewrite (elim_area_on_perp_d Q C P Q Y r).
idtac.
basic_simpl.
unfold Py4.
basic_simpl.
uniformize_signed_areas.
replace (0 - r / (2 + 2) * (Py P C P - Py Q C P) + (S Q C P - r / (2 + 2) * Py P Q C)) with (S Q C P - r / (2 + 2) * (Py P C P - Py Q C P) - r / (2 + 2) * Py P Q C) by ring.
replace (Py P C P - Py Q C P) with (Py C P Q) by (unfold Py;uniformize_dir_seg;basic_simpl;ring).
replace (S Q C P - r / (2 + 2) * Py C P Q - r / (2 + 2) * Py P Q C) with (S Q C P -r/(2+2) * Py P Q P).
unfold Py.
uniformize_dir_seg.
basic_simpl.
field.
apply nonzeromult.

*****
H3 : not (eq A Y)
H2 : not (eq C Y)
H1 : parallel A Y C Y
H0 : Col A P Y
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C : Point
*****
not (eq (Fplus F1 F1) F0)
+++++
auto with Geom.
-----
Theorem elim_ratio_on_perp_d_spec_a : forall Y P Q A C : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C Y -> C<>Y -> A<>Y -> A**Y / C**Y = (S A P Q - r / (2 + 2) * Py P Q P) / (S Q C P -r/(2+2) * Py P Q P).
Proof.
intros.
rewrite (elim_ratio_on_perp_d_a Y P Q A C Y r).
try assumption.
unfold S4.
replace (S C Y Q) with (S Q C Y) by auto with Geom.
rewrite (elim_area_on_perp_d C P P Q Y r).
idtac.
rewrite (elim_area_on_perp_d Q C P Q Y r).
idtac.
basic_simpl.
unfold Py4.
basic_simpl.
uniformize_signed_areas.
replace (0 - r / (2 + 2) * (Py P C P - Py Q C P) + (S Q C P - r / (2 + 2) * Py P Q C)) with (S Q C P - r / (2 + 2) * (Py P C P - Py Q C P) - r / (2 + 2) * Py P Q C) by ring.
replace (Py P C P - Py Q C P) with (Py C P Q) by (unfold Py;uniformize_dir_seg;basic_simpl;ring).
replace (S Q C P - r / (2 + 2) * Py C P Q - r / (2 + 2) * Py P Q C) with (S Q C P -r/(2+2) * Py P Q P).
unfold Py.
uniformize_dir_seg.
basic_simpl.
field.
apply nonzeromult.

*****
H3 : not (eq A Y)
H2 : not (eq C Y)
H1 : parallel A Y C Y
H0 : Col A P Y
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C : Point
*****
not (eq (Fplus F1 F1) F0)
+++++
auto with Geom.
-----
Theorem elim_ratio_on_perp_d_spec_a : forall Y P Q A C : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C Y -> C<>Y -> A<>Y -> A**Y / C**Y = (S A P Q - r / (2 + 2) * Py P Q P) / (S Q C P -r/(2+2) * Py P Q P).
Proof.
intros.
rewrite (elim_ratio_on_perp_d_a Y P Q A C Y r).
try assumption.
unfold S4.
replace (S C Y Q) with (S Q C Y) by auto with Geom.
rewrite (elim_area_on_perp_d C P P Q Y r).
idtac.
rewrite (elim_area_on_perp_d Q C P Q Y r).

*****
H3 : not (eq A Y)
H2 : not (eq C Y)
H1 : parallel A Y C Y
H0 : Col A P Y
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C : Point
*****
on_perp_d Y P Q r
+++++
assumption .
-----
Theorem elim_ratio_on_perp_d_spec_a : forall Y P Q A C : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C Y -> C<>Y -> A<>Y -> A**Y / C**Y = (S A P Q - r / (2 + 2) * Py P Q P) / (S Q C P -r/(2+2) * Py P Q P).
Proof.
intros.
rewrite (elim_ratio_on_perp_d_a Y P Q A C Y r).
try assumption.
unfold S4.
replace (S C Y Q) with (S Q C Y) by auto with Geom.
rewrite (elim_area_on_perp_d C P P Q Y r).

*****
H3 : not (eq A Y)
H2 : not (eq C Y)
H1 : parallel A Y C Y
H0 : Col A P Y
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C : Point
*****
on_perp_d Y P Q r
+++++
assumption .
-----
Theorem elim_ratio_on_perp_d_spec_a : forall Y P Q A C : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C Y -> C<>Y -> A<>Y -> A**Y / C**Y = (S A P Q - r / (2 + 2) * Py P Q P) / (S Q C P -r/(2+2) * Py P Q P).
Proof.
intros.
rewrite (elim_ratio_on_perp_d_a Y P Q A C Y r).

*****
H3 : not (eq A Y)
H2 : not (eq C Y)
H1 : parallel A Y C Y
H0 : Col A P Y
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C : Point
*****
on_perp_d Y P Q r
+++++
try assumption.
-----
Theorem elim_ratio_on_perp_d_spec_a : forall Y P Q A C : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C Y -> C<>Y -> A<>Y -> A**Y / C**Y = (S A P Q - r / (2 + 2) * Py P Q P) / (S Q C P -r/(2+2) * Py P Q P).
Proof.
intros.
rewrite (elim_ratio_on_perp_d_a Y P Q A C Y r).

*****
H3 : not (eq A Y)
H2 : not (eq C Y)
H1 : parallel A Y C Y
H0 : Col A P Y
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C : Point
*****
Col A P Y
+++++
try assumption.
-----
Theorem elim_ratio_on_perp_d_spec_a : forall Y P Q A C : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C Y -> C<>Y -> A<>Y -> A**Y / C**Y = (S A P Q - r / (2 + 2) * Py P Q P) / (S Q C P -r/(2+2) * Py P Q P).
Proof.
intros.
rewrite (elim_ratio_on_perp_d_a Y P Q A C Y r).

*****
H3 : not (eq A Y)
H2 : not (eq C Y)
H1 : parallel A Y C Y
H0 : Col A P Y
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C : Point
*****
parallel A Y C Y
+++++
try assumption.
-----
Theorem elim_ratio_on_perp_d_spec_a : forall Y P Q A C : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C Y -> C<>Y -> A<>Y -> A**Y / C**Y = (S A P Q - r / (2 + 2) * Py P Q P) / (S Q C P -r/(2+2) * Py P Q P).
Proof.
intros.
rewrite (elim_ratio_on_perp_d_a Y P Q A C Y r).

*****
H3 : not (eq A Y)
H2 : not (eq C Y)
H1 : parallel A Y C Y
H0 : Col A P Y
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C : Point
*****
not (eq C Y)
+++++
try assumption.
-----
Theorem elim_ratio_on_perp_d_spec_a : forall Y P Q A C : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C Y -> C<>Y -> A<>Y -> A**Y / C**Y = (S A P Q - r / (2 + 2) * Py P Q P) / (S Q C P -r/(2+2) * Py P Q P).
Proof.
intros.
rewrite (elim_ratio_on_perp_d_a Y P Q A C Y r).

*****
H3 : not (eq A Y)
H2 : not (eq C Y)
H1 : parallel A Y C Y
H0 : Col A P Y
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C : Point
*****
not (eq A Y)
+++++
try assumption.
-----
Theorem elim_ratio_on_perp_d_spec_a : forall Y P Q A C : Point, forall r: F, on_perp_d Y P Q r-> Col A P Y -> parallel A Y C Y -> C<>Y -> A<>Y -> A**Y / C**Y = (S A P Q - r / (2 + 2) * Py P Q P) / (S Q C P -r/(2+2) * Py P Q P).
Proof.
intros.
rewrite (elim_ratio_on_perp_d_a Y P Q A C Y r).

*****

*****

+++++
Qed.
-----
Lemma elim_ratio_on_perp_d_b_auxi : \n  forall A Y C D P Q : Point, \n  on_parallel_d Y A C D 1 ->\n  Py C P Q - Py D P Q = Py A P Q - Py Y P Q.
-----
Lemma elim_ratio_on_perp_d_b_auxi : forall A Y C D P Q : Point, on_parallel_d Y A C D 1 -> Py C P Q - Py D P Q = Py A P Q - Py Y P Q.

*****

*****
forall (A Y C D P Q : Point) (_ : on_parallel_d Y A C D F1), eq (Fminus (Py C P Q) (Py D P Q)) (Fminus (Py A P Q) (Py Y P Q))
+++++
Proof.
-----
Lemma elim_ratio_on_perp_d_b_auxi : forall A Y C D P Q : Point, on_parallel_d Y A C D 1 -> Py C P Q - Py D P Q = Py A P Q - Py Y P Q.
Proof.

*****

*****
forall (A Y C D P Q : Point) (_ : on_parallel_d Y A C D F1), eq (Fminus (Py C P Q) (Py D P Q)) (Fminus (Py A P Q) (Py Y P Q))
+++++
intros.
-----
Lemma elim_ratio_on_perp_d_b_auxi : forall A Y C D P Q : Point, on_parallel_d Y A C D 1 -> Py C P Q - Py D P Q = Py A P Q - Py Y P Q.
Proof.
intros.

*****
H : on_parallel_d Y A C D F1
A,Y,C,D,P,Q : Point
*****
eq (Fminus (Py C P Q) (Py D P Q)) (Fminus (Py A P Q) (Py Y P Q))
+++++
replace (Py Y P Q) with (Py Q P Y) by apply pyth_sym.
-----
Lemma elim_ratio_on_perp_d_b_auxi : forall A Y C D P Q : Point, on_parallel_d Y A C D 1 -> Py C P Q - Py D P Q = Py A P Q - Py Y P Q.
Proof.
intros.
replace (Py Y P Q) with (Py Q P Y) by apply pyth_sym.

*****
H : on_parallel_d Y A C D F1
A,Y,C,D,P,Q : Point
*****
eq (Fminus (Py C P Q) (Py D P Q)) (Fminus (Py A P Q) (Py Q P Y))
+++++
rewrite (elim_py_on_parallel_d_right Q P A C D Y 1).
-----
Lemma elim_ratio_on_perp_d_b_auxi : forall A Y C D P Q : Point, on_parallel_d Y A C D 1 -> Py C P Q - Py D P Q = Py A P Q - Py Y P Q.
Proof.
intros.
replace (Py Y P Q) with (Py Q P Y) by apply pyth_sym.
rewrite (elim_py_on_parallel_d_right Q P A C D Y 1).

*****
H : on_parallel_d Y A C D F1
A,Y,C,D,P,Q : Point
*****
eq (Fminus (Py C P Q) (Py D P Q)) (Fminus (Py A P Q) (Fplus (Py Q P A) (Fmult F1 (Fminus (Py Q P D) (Py Q P C)))))
+++++
idtac.
-----
Lemma elim_ratio_on_perp_d_b_auxi : forall A Y C D P Q : Point, on_parallel_d Y A C D 1 -> Py C P Q - Py D P Q = Py A P Q - Py Y P Q.
Proof.
intros.
replace (Py Y P Q) with (Py Q P Y) by apply pyth_sym.
rewrite (elim_py_on_parallel_d_right Q P A C D Y 1).
idtac.

*****
H : on_parallel_d Y A C D F1
A,Y,C,D,P,Q : Point
*****
eq (Fminus (Py C P Q) (Py D P Q)) (Fminus (Py A P Q) (Fplus (Py Q P A) (Fmult F1 (Fminus (Py Q P D) (Py Q P C)))))
+++++
replace (Py A P Q) with (Py Q P A) by apply pyth_sym.
-----
Lemma elim_ratio_on_perp_d_b_auxi : forall A Y C D P Q : Point, on_parallel_d Y A C D 1 -> Py C P Q - Py D P Q = Py A P Q - Py Y P Q.
Proof.
intros.
replace (Py Y P Q) with (Py Q P Y) by apply pyth_sym.
rewrite (elim_py_on_parallel_d_right Q P A C D Y 1).
idtac.
replace (Py A P Q) with (Py Q P A) by apply pyth_sym.

*****
H : on_parallel_d Y A C D F1
A,Y,C,D,P,Q : Point
*****
eq (Fminus (Py C P Q) (Py D P Q)) (Fminus (Py Q P A) (Fplus (Py Q P A) (Fmult F1 (Fminus (Py Q P D) (Py Q P C)))))
+++++
replace (Py Q P D) with (Py D P Q) by apply pyth_sym.
-----
Lemma elim_ratio_on_perp_d_b_auxi : forall A Y C D P Q : Point, on_parallel_d Y A C D 1 -> Py C P Q - Py D P Q = Py A P Q - Py Y P Q.
Proof.
intros.
replace (Py Y P Q) with (Py Q P Y) by apply pyth_sym.
rewrite (elim_py_on_parallel_d_right Q P A C D Y 1).
idtac.
replace (Py A P Q) with (Py Q P A) by apply pyth_sym.
replace (Py Q P D) with (Py D P Q) by apply pyth_sym.

*****
H : on_parallel_d Y A C D F1
A,Y,C,D,P,Q : Point
*****
eq (Fminus (Py C P Q) (Py D P Q)) (Fminus (Py Q P A) (Fplus (Py Q P A) (Fmult F1 (Fminus (Py D P Q) (Py Q P C)))))
+++++
replace (Py Q P C) with (Py C P Q) by apply pyth_sym.
-----
Lemma elim_ratio_on_perp_d_b_auxi : forall A Y C D P Q : Point, on_parallel_d Y A C D 1 -> Py C P Q - Py D P Q = Py A P Q - Py Y P Q.
Proof.
intros.
replace (Py Y P Q) with (Py Q P Y) by apply pyth_sym.
rewrite (elim_py_on_parallel_d_right Q P A C D Y 1).
idtac.
replace (Py A P Q) with (Py Q P A) by apply pyth_sym.
replace (Py Q P D) with (Py D P Q) by apply pyth_sym.
replace (Py Q P C) with (Py C P Q) by apply pyth_sym.

*****
H : on_parallel_d Y A C D F1
A,Y,C,D,P,Q : Point
*****
eq (Fminus (Py C P Q) (Py D P Q)) (Fminus (Py Q P A) (Fplus (Py Q P A) (Fmult F1 (Fminus (Py D P Q) (Py C P Q)))))
+++++
ring.
-----
Lemma elim_ratio_on_perp_d_b_auxi : forall A Y C D P Q : Point, on_parallel_d Y A C D 1 -> Py C P Q - Py D P Q = Py A P Q - Py Y P Q.
Proof.
intros.
replace (Py Y P Q) with (Py Q P Y) by apply pyth_sym.
rewrite (elim_py_on_parallel_d_right Q P A C D Y 1).

*****
H : on_parallel_d Y A C D F1
A,Y,C,D,P,Q : Point
*****
on_parallel_d Y A C D F1
+++++
assumption .
-----
Lemma elim_ratio_on_perp_d_b_auxi : forall A Y C D P Q : Point, on_parallel_d Y A C D 1 -> Py C P Q - Py D P Q = Py A P Q - Py Y P Q.
Proof.
intros.
replace (Py Y P Q) with (Py Q P Y) by apply pyth_sym.
rewrite (elim_py_on_parallel_d_right Q P A C D Y 1).

*****

*****

+++++
Qed.
-----
Theorem elim_ratio_on_perp_d_b_aux :\n forall Y P Q A C D : Point, forall r: F,\n on_perp_d Y P Q r->\n ~ Col A P Y  ->\n parallel A Y C D ->\n C<>D -> C**D <>A**Y ->\n A**Y / C**D = Py A P Q / Py4 C P D Q.
-----
Theorem elim_ratio_on_perp_d_b_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C D -> C<>D -> C**D <>A**Y -> A**Y / C**D = Py A P Q / Py4 C P D Q.

*****

*****
forall (Y P Q A C D : Point) (r : F) (_ : on_perp_d Y P Q r) (_ : not (Col A P Y)) (_ : parallel A Y C D) (_ : not (eq C D)) (_ : not (eq (DSeg C D) (DSeg A Y))), eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (Py A P Q) (Py4 C P D Q))
+++++
Proof.
-----
Theorem elim_ratio_on_perp_d_b_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C D -> C<>D -> C**D <>A**Y -> A**Y / C**D = Py A P Q / Py4 C P D Q.
Proof.

*****

*****
forall (Y P Q A C D : Point) (r : F) (_ : on_perp_d Y P Q r) (_ : not (Col A P Y)) (_ : parallel A Y C D) (_ : not (eq C D)) (_ : not (eq (DSeg C D) (DSeg A Y))), eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (Py A P Q) (Py4 C P D Q))
+++++
intros.
-----
Theorem elim_ratio_on_perp_d_b_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C D -> C<>D -> C**D <>A**Y -> A**Y / C**D = Py A P Q / Py4 C P D Q.
Proof.
intros.

*****
H3 : not (eq (DSeg C D) (DSeg A Y))
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C,D : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (Py A P Q) (Py4 C P D Q))
+++++
unfold on_perp_d in H.
-----
Theorem elim_ratio_on_perp_d_b_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C D -> C<>D -> C**D <>A**Y -> A**Y / C**D = Py A P Q / Py4 C P D Q.
Proof.
intros.
unfold on_perp_d in H.

*****
H3 : not (eq (DSeg C D) (DSeg A Y))
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
H : and (not (eq P Q))\n (and (perp Y P P Q)\n (and\n (eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y)))\n (not (eq r F0))))
r : F
Y,P,Q,A,C,D : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (Py A P Q) (Py4 C P D Q))
+++++
assert (A<>Y).
-----
Theorem elim_ratio_on_perp_d_b_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C D -> C<>D -> C**D <>A**Y -> A**Y / C**D = Py A P Q / Py4 C P D Q.
Proof.
intros.
unfold on_perp_d in H.
assert (A<>Y).

*****
H3 : not (eq (DSeg C D) (DSeg A Y))
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
H : and (not (eq P Q))\n (and (perp Y P P Q)\n (and\n (eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y)))\n (not (eq r F0))))
r : F
Y,P,Q,A,C,D : Point
*****
not (eq A Y)
+++++
unfold not.
-----
Theorem elim_ratio_on_perp_d_b_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C D -> C<>D -> C**D <>A**Y -> A**Y / C**D = Py A P Q / Py4 C P D Q.
Proof.
intros.
unfold on_perp_d in H.
assert (A<>Y).
unfold not.

*****
H3 : not (eq (DSeg C D) (DSeg A Y))
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
H : and (not (eq P Q))\n (and (perp Y P P Q)\n (and\n (eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y)))\n (not (eq r F0))))
r : F
Y,P,Q,A,C,D : Point
*****
forall _ : eq A Y, False
+++++
intro.
-----
Theorem elim_ratio_on_perp_d_b_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C D -> C<>D -> C**D <>A**Y -> A**Y / C**D = Py A P Q / Py4 C P D Q.
Proof.
intros.
unfold on_perp_d in H.
assert (A<>Y).
unfold not.
intro.

*****
H4 : eq A Y
H3 : not (eq (DSeg C D) (DSeg A Y))
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
H : and (not (eq P Q))\n (and (perp Y P P Q)\n (and\n (eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y)))\n (not (eq r F0))))
r : F
Y,P,Q,A,C,D : Point
*****
False
+++++
subst.
-----
Theorem elim_ratio_on_perp_d_b_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C D -> C<>D -> C**D <>A**Y -> A**Y / C**D = Py A P Q / Py4 C P D Q.
Proof.
intros.
unfold on_perp_d in H.
assert (A<>Y).
unfold not.
intro.
subst.

*****
H3 : not (eq (DSeg C D) (DSeg Y Y))
H2 : not (eq C D)
H0 : not (Col Y P Y)
H1 : parallel Y Y C D
H : and (not (eq P Q))\n (and (perp Y P P Q)\n (and\n (eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y)))\n (not (eq r F0))))
r : F
Y,P,Q,C,D : Point
*****
False
+++++
intuition.
-----
Theorem elim_ratio_on_perp_d_b_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C D -> C<>D -> C**D <>A**Y -> A**Y / C**D = Py A P Q / Py4 C P D Q.
Proof.
intros.
unfold on_perp_d in H.
assert (A<>Y).

*****
H4 : not (eq A Y)
H3 : not (eq (DSeg C D) (DSeg A Y))
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
H : and (not (eq P Q))\n (and (perp Y P P Q)\n (and\n (eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y)))\n (not (eq r F0))))
r : F
Y,P,Q,A,C,D : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (Py A P Q) (Py4 C P D Q))
+++++
assert (T:=on_line_dex_spec_strong_f A Y C D H1 H4).
-----
Theorem elim_ratio_on_perp_d_b_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C D -> C<>D -> C**D <>A**Y -> A**Y / C**D = Py A P Q / Py4 C P D Q.
Proof.
intros.
unfold on_perp_d in H.
assert (A<>Y).
assert (T:=on_line_dex_spec_strong_f A Y C D H1 H4).

*****
T : ex\n (fun Y0 : Point =>\n and (Col Y0 A Y)\n (and (eq (DSeg A Y0) (DSeg C D)) (weak_3_parallelogram A Y0 D C)))
H4 : not (eq A Y)
H3 : not (eq (DSeg C D) (DSeg A Y))
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
H : and (not (eq P Q))\n (and (perp Y P P Q)\n (and\n (eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y)))\n (not (eq r F0))))
r : F
Y,P,Q,A,C,D : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (Py A P Q) (Py4 C P D Q))
+++++
elim T.
-----
Theorem elim_ratio_on_perp_d_b_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C D -> C<>D -> C**D <>A**Y -> A**Y / C**D = Py A P Q / Py4 C P D Q.
Proof.
intros.
unfold on_perp_d in H.
assert (A<>Y).
assert (T:=on_line_dex_spec_strong_f A Y C D H1 H4).
elim T.

*****
T : ex\n (fun Y0 : Point =>\n and (Col Y0 A Y)\n (and (eq (DSeg A Y0) (DSeg C D)) (weak_3_parallelogram A Y0 D C)))
H4 : not (eq A Y)
H3 : not (eq (DSeg C D) (DSeg A Y))
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
H : and (not (eq P Q))\n (and (perp Y P P Q)\n (and\n (eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y)))\n (not (eq r F0))))
r : F
Y,P,Q,A,C,D : Point
*****
forall (x : Point) (_ : and (Col x A Y) (and (eq (DSeg A x) (DSeg C D)) (weak_3_parallelogram A x D C))), eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (Py A P Q) (Py4 C P D Q))
+++++
intros D' HD'.
-----
Theorem elim_ratio_on_perp_d_b_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C D -> C<>D -> C**D <>A**Y -> A**Y / C**D = Py A P Q / Py4 C P D Q.
Proof.
intros.
unfold on_perp_d in H.
assert (A<>Y).
assert (T:=on_line_dex_spec_strong_f A Y C D H1 H4).
elim T.
intros D' HD'.

*****
HD' : and (Col D' A Y)\n (and (eq (DSeg A D') (DSeg C D)) (weak_3_parallelogram A D' D C))
D' : Point
T : ex\n (fun Y0 : Point =>\n and (Col Y0 A Y)\n (and (eq (DSeg A Y0) (DSeg C D)) (weak_3_parallelogram A Y0 D C)))
H4 : not (eq A Y)
H3 : not (eq (DSeg C D) (DSeg A Y))
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
H : and (not (eq P Q))\n (and (perp Y P P Q)\n (and\n (eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y)))\n (not (eq r F0))))
r : F
Y,P,Q,A,C,D : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (Py A P Q) (Py4 C P D Q))
+++++
clear T.
-----
Theorem elim_ratio_on_perp_d_b_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C D -> C<>D -> C**D <>A**Y -> A**Y / C**D = Py A P Q / Py4 C P D Q.
Proof.
intros.
unfold on_perp_d in H.
assert (A<>Y).
assert (T:=on_line_dex_spec_strong_f A Y C D H1 H4).
elim T.
intros D' HD'.
clear T.

*****
HD' : and (Col D' A Y)\n (and (eq (DSeg A D') (DSeg C D)) (weak_3_parallelogram A D' D C))
D' : Point
H4 : not (eq A Y)
H3 : not (eq (DSeg C D) (DSeg A Y))
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
H : and (not (eq P Q))\n (and (perp Y P P Q)\n (and\n (eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y)))\n (not (eq r F0))))
r : F
Y,P,Q,A,C,D : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (Py A P Q) (Py4 C P D Q))
+++++
decompose [and] HD'.
-----
Theorem elim_ratio_on_perp_d_b_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C D -> C<>D -> C**D <>A**Y -> A**Y / C**D = Py A P Q / Py4 C P D Q.
Proof.
intros.
unfold on_perp_d in H.
assert (A<>Y).
assert (T:=on_line_dex_spec_strong_f A Y C D H1 H4).
elim T.
intros D' HD'.
clear T.
decompose [and] HD'.

*****
H8 : weak_3_parallelogram A D' D C
H7 : eq (DSeg A D') (DSeg C D)
H5 : Col D' A Y
HD' : and (Col D' A Y)\n (and (eq (DSeg A D') (DSeg C D)) (weak_3_parallelogram A D' D C))
D' : Point
H4 : not (eq A Y)
H3 : not (eq (DSeg C D) (DSeg A Y))
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
H : and (not (eq P Q))\n (and (perp Y P P Q)\n (and\n (eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y)))\n (not (eq r F0))))
r : F
Y,P,Q,A,C,D : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (Py A P Q) (Py4 C P D Q))
+++++
clear HD'.
-----
Theorem elim_ratio_on_perp_d_b_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C D -> C<>D -> C**D <>A**Y -> A**Y / C**D = Py A P Q / Py4 C P D Q.
Proof.
intros.
unfold on_perp_d in H.
assert (A<>Y).
assert (T:=on_line_dex_spec_strong_f A Y C D H1 H4).
elim T.
intros D' HD'.
clear T.
decompose [and] HD'.
clear HD'.

*****
H8 : weak_3_parallelogram A D' D C
H7 : eq (DSeg A D') (DSeg C D)
H5 : Col D' A Y
D' : Point
H4 : not (eq A Y)
H3 : not (eq (DSeg C D) (DSeg A Y))
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
H : and (not (eq P Q))\n (and (perp Y P P Q)\n (and\n (eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y)))\n (not (eq r F0))))
r : F
Y,P,Q,A,C,D : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (Py A P Q) (Py4 C P D Q))
+++++
rewrite <- H7.
-----
Theorem elim_ratio_on_perp_d_b_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C D -> C<>D -> C**D <>A**Y -> A**Y / C**D = Py A P Q / Py4 C P D Q.
Proof.
intros.
unfold on_perp_d in H.
assert (A<>Y).
assert (T:=on_line_dex_spec_strong_f A Y C D H1 H4).
elim T.
intros D' HD'.
clear T.
decompose [and] HD'.
clear HD'.
rewrite <- H7.

*****
H8 : weak_3_parallelogram A D' D C
H7 : eq (DSeg A D') (DSeg C D)
H5 : Col D' A Y
D' : Point
H4 : not (eq A Y)
H3 : not (eq (DSeg C D) (DSeg A Y))
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
H : and (not (eq P Q))\n (and (perp Y P P Q)\n (and\n (eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y)))\n (not (eq r F0))))
r : F
Y,P,Q,A,C,D : Point
*****
eq (Fdiv (DSeg A Y) (DSeg A D')) (Fdiv (Py A P Q) (Py4 C P D Q))
+++++
assert (A<>D').
-----
Theorem elim_ratio_on_perp_d_b_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C D -> C<>D -> C**D <>A**Y -> A**Y / C**D = Py A P Q / Py4 C P D Q.
Proof.
intros.
unfold on_perp_d in H.
assert (A<>Y).
assert (T:=on_line_dex_spec_strong_f A Y C D H1 H4).
elim T.
intros D' HD'.
clear T.
decompose [and] HD'.
clear HD'.
rewrite <- H7.
assert (A<>D').

*****
H8 : weak_3_parallelogram A D' D C
H7 : eq (DSeg A D') (DSeg C D)
H5 : Col D' A Y
D' : Point
H4 : not (eq A Y)
H3 : not (eq (DSeg C D) (DSeg A Y))
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
H : and (not (eq P Q))\n (and (perp Y P P Q)\n (and\n (eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y)))\n (not (eq r F0))))
r : F
Y,P,Q,A,C,D : Point
*****
not (eq A D')
+++++
unfold not.
-----
Theorem elim_ratio_on_perp_d_b_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C D -> C<>D -> C**D <>A**Y -> A**Y / C**D = Py A P Q / Py4 C P D Q.
Proof.
intros.
unfold on_perp_d in H.
assert (A<>Y).
assert (T:=on_line_dex_spec_strong_f A Y C D H1 H4).
elim T.
intros D' HD'.
clear T.
decompose [and] HD'.
clear HD'.
rewrite <- H7.
assert (A<>D').
unfold not.

*****
H8 : weak_3_parallelogram A D' D C
H7 : eq (DSeg A D') (DSeg C D)
H5 : Col D' A Y
D' : Point
H4 : not (eq A Y)
H3 : not (eq (DSeg C D) (DSeg A Y))
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
H : and (not (eq P Q))\n (and (perp Y P P Q)\n (and\n (eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y)))\n (not (eq r F0))))
r : F
Y,P,Q,A,C,D : Point
*****
forall _ : eq A D', False
+++++
intro.
-----
Theorem elim_ratio_on_perp_d_b_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C D -> C<>D -> C**D <>A**Y -> A**Y / C**D = Py A P Q / Py4 C P D Q.
Proof.
intros.
unfold on_perp_d in H.
assert (A<>Y).
assert (T:=on_line_dex_spec_strong_f A Y C D H1 H4).
elim T.
intros D' HD'.
clear T.
decompose [and] HD'.
clear HD'.
rewrite <- H7.
assert (A<>D').
unfold not.
intro.

*****
H6 : eq A D'
H8 : weak_3_parallelogram A D' D C
H7 : eq (DSeg A D') (DSeg C D)
H5 : Col D' A Y
D' : Point
H4 : not (eq A Y)
H3 : not (eq (DSeg C D) (DSeg A Y))
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
H : and (not (eq P Q))\n (and (perp Y P P Q)\n (and\n (eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y)))\n (not (eq r F0))))
r : F
Y,P,Q,A,C,D : Point
*****
False
+++++
subst.
-----
Theorem elim_ratio_on_perp_d_b_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C D -> C<>D -> C**D <>A**Y -> A**Y / C**D = Py A P Q / Py4 C P D Q.
Proof.
intros.
unfold on_perp_d in H.
assert (A<>Y).
assert (T:=on_line_dex_spec_strong_f A Y C D H1 H4).
elim T.
intros D' HD'.
clear T.
decompose [and] HD'.
clear HD'.
rewrite <- H7.
assert (A<>D').
unfold not.
intro.
subst.

*****
H3 : not (eq (DSeg C D) (DSeg D' Y))
H4 : not (eq D' Y)
H2 : not (eq C D)
H0 : not (Col D' P Y)
H1 : parallel D' Y C D
H5 : Col D' D' Y
H7 : eq (DSeg D' D') (DSeg C D)
H8 : weak_3_parallelogram D' D' D C
D' : Point
H : and (not (eq P Q))\n (and (perp Y P P Q)\n (and\n (eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y)))\n (not (eq r F0))))
r : F
Y,P,Q,C,D : Point
*****
False
+++++
basic_simpl.
-----
Theorem elim_ratio_on_perp_d_b_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C D -> C<>D -> C**D <>A**Y -> A**Y / C**D = Py A P Q / Py4 C P D Q.
Proof.
intros.
unfold on_perp_d in H.
assert (A<>Y).
assert (T:=on_line_dex_spec_strong_f A Y C D H1 H4).
elim T.
intros D' HD'.
clear T.
decompose [and] HD'.
clear HD'.
rewrite <- H7.
assert (A<>D').
unfold not.
intro.
subst.
basic_simpl.

*****
H3 : not (eq (DSeg C D) (DSeg D' Y))
H4 : not (eq D' Y)
H2 : not (eq C D)
H0 : not (Col D' P Y)
H1 : parallel D' Y C D
H5 : Col D' D' Y
H7 : eq F0 (DSeg C D)
H8 : weak_3_parallelogram D' D' D C
D' : Point
H : and (not (eq P Q))\n (and (perp Y P P Q)\n (and\n (eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y)))\n (not (eq r F0))))
r : F
Y,P,Q,C,D : Point
*****
False
+++++
assert (C=D).
-----
Theorem elim_ratio_on_perp_d_b_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C D -> C<>D -> C**D <>A**Y -> A**Y / C**D = Py A P Q / Py4 C P D Q.
Proof.
intros.
unfold on_perp_d in H.
assert (A<>Y).
assert (T:=on_line_dex_spec_strong_f A Y C D H1 H4).
elim T.
intros D' HD'.
clear T.
decompose [and] HD'.
clear HD'.
rewrite <- H7.
assert (A<>D').
unfold not.
intro.
subst.
basic_simpl.
assert (C=D).

*****
H3 : not (eq (DSeg C D) (DSeg D' Y))
H4 : not (eq D' Y)
H2 : not (eq C D)
H0 : not (Col D' P Y)
H1 : parallel D' Y C D
H5 : Col D' D' Y
H7 : eq F0 (DSeg C D)
H8 : weak_3_parallelogram D' D' D C
D' : Point
H : and (not (eq P Q))\n (and (perp Y P P Q)\n (and\n (eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y)))\n (not (eq r F0))))
r : F
Y,P,Q,C,D : Point
*****
eq C D
+++++
auto with Geom.
-----
Theorem elim_ratio_on_perp_d_b_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C D -> C<>D -> C**D <>A**Y -> A**Y / C**D = Py A P Q / Py4 C P D Q.
Proof.
intros.
unfold on_perp_d in H.
assert (A<>Y).
assert (T:=on_line_dex_spec_strong_f A Y C D H1 H4).
elim T.
intros D' HD'.
clear T.
decompose [and] HD'.
clear HD'.
rewrite <- H7.
assert (A<>D').
unfold not.
intro.
subst.
basic_simpl.
assert (C=D).

*****
H6 : eq C D
H3 : not (eq (DSeg C D) (DSeg D' Y))
H4 : not (eq D' Y)
H2 : not (eq C D)
H0 : not (Col D' P Y)
H1 : parallel D' Y C D
H5 : Col D' D' Y
H7 : eq F0 (DSeg C D)
H8 : weak_3_parallelogram D' D' D C
D' : Point
H : and (not (eq P Q))\n (and (perp Y P P Q)\n (and\n (eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y)))\n (not (eq r F0))))
r : F
Y,P,Q,C,D : Point
*****
False
+++++
subst.
-----
Theorem elim_ratio_on_perp_d_b_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C D -> C<>D -> C**D <>A**Y -> A**Y / C**D = Py A P Q / Py4 C P D Q.
Proof.
intros.
unfold on_perp_d in H.
assert (A<>Y).
assert (T:=on_line_dex_spec_strong_f A Y C D H1 H4).
elim T.
intros D' HD'.
clear T.
decompose [and] HD'.
clear HD'.
rewrite <- H7.
assert (A<>D').
unfold not.
intro.
subst.
basic_simpl.
assert (C=D).
subst.

*****
H3 : not (eq (DSeg D D) (DSeg D' Y))
H4 : not (eq D' Y)
H2 : not (eq D D)
H0 : not (Col D' P Y)
H1 : parallel D' Y D D
H5 : Col D' D' Y
H8 : weak_3_parallelogram D' D' D D
H7 : eq F0 (DSeg D D)
D' : Point
H : and (not (eq P Q))\n (and (perp Y P P Q)\n (and\n (eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y)))\n (not (eq r F0))))
r : F
Y,P,Q,D : Point
*****
False
+++++
intuition.
-----
Theorem elim_ratio_on_perp_d_b_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C D -> C<>D -> C**D <>A**Y -> A**Y / C**D = Py A P Q / Py4 C P D Q.
Proof.
intros.
unfold on_perp_d in H.
assert (A<>Y).
assert (T:=on_line_dex_spec_strong_f A Y C D H1 H4).
elim T.
intros D' HD'.
clear T.
decompose [and] HD'.
clear HD'.
rewrite <- H7.
assert (A<>D').

*****
H6 : not (eq A D')
H8 : weak_3_parallelogram A D' D C
H7 : eq (DSeg A D') (DSeg C D)
H5 : Col D' A Y
D' : Point
H4 : not (eq A Y)
H3 : not (eq (DSeg C D) (DSeg A Y))
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
H : and (not (eq P Q))\n (and (perp Y P P Q)\n (and\n (eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y)))\n (not (eq r F0))))
r : F
Y,P,Q,A,C,D : Point
*****
eq (Fdiv (DSeg A Y) (DSeg A D')) (Fdiv (Py A P Q) (Py4 C P D Q))
+++++
assert (D'<>Y).
-----
Theorem elim_ratio_on_perp_d_b_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C D -> C<>D -> C**D <>A**Y -> A**Y / C**D = Py A P Q / Py4 C P D Q.
Proof.
intros.
unfold on_perp_d in H.
assert (A<>Y).
assert (T:=on_line_dex_spec_strong_f A Y C D H1 H4).
elim T.
intros D' HD'.
clear T.
decompose [and] HD'.
clear HD'.
rewrite <- H7.
assert (A<>D').
assert (D'<>Y).

*****
H6 : not (eq A D')
H8 : weak_3_parallelogram A D' D C
H7 : eq (DSeg A D') (DSeg C D)
H5 : Col D' A Y
D' : Point
H4 : not (eq A Y)
H3 : not (eq (DSeg C D) (DSeg A Y))
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
H : and (not (eq P Q))\n (and (perp Y P P Q)\n (and\n (eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y)))\n (not (eq r F0))))
r : F
Y,P,Q,A,C,D : Point
*****
not (eq D' Y)
+++++
unfold not.
-----
Theorem elim_ratio_on_perp_d_b_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C D -> C<>D -> C**D <>A**Y -> A**Y / C**D = Py A P Q / Py4 C P D Q.
Proof.
intros.
unfold on_perp_d in H.
assert (A<>Y).
assert (T:=on_line_dex_spec_strong_f A Y C D H1 H4).
elim T.
intros D' HD'.
clear T.
decompose [and] HD'.
clear HD'.
rewrite <- H7.
assert (A<>D').
assert (D'<>Y).
unfold not.

*****
H6 : not (eq A D')
H8 : weak_3_parallelogram A D' D C
H7 : eq (DSeg A D') (DSeg C D)
H5 : Col D' A Y
D' : Point
H4 : not (eq A Y)
H3 : not (eq (DSeg C D) (DSeg A Y))
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
H : and (not (eq P Q))\n (and (perp Y P P Q)\n (and\n (eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y)))\n (not (eq r F0))))
r : F
Y,P,Q,A,C,D : Point
*****
forall _ : eq D' Y, False
+++++
intro.
-----
Theorem elim_ratio_on_perp_d_b_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C D -> C<>D -> C**D <>A**Y -> A**Y / C**D = Py A P Q / Py4 C P D Q.
Proof.
intros.
unfold on_perp_d in H.
assert (A<>Y).
assert (T:=on_line_dex_spec_strong_f A Y C D H1 H4).
elim T.
intros D' HD'.
clear T.
decompose [and] HD'.
clear HD'.
rewrite <- H7.
assert (A<>D').
assert (D'<>Y).
unfold not.
intro.

*****
H9 : eq D' Y
H6 : not (eq A D')
H8 : weak_3_parallelogram A D' D C
H7 : eq (DSeg A D') (DSeg C D)
H5 : Col D' A Y
D' : Point
H4 : not (eq A Y)
H3 : not (eq (DSeg C D) (DSeg A Y))
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
H : and (not (eq P Q))\n (and (perp Y P P Q)\n (and\n (eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y)))\n (not (eq r F0))))
r : F
Y,P,Q,A,C,D : Point
*****
False
+++++
subst.
-----
Theorem elim_ratio_on_perp_d_b_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C D -> C<>D -> C**D <>A**Y -> A**Y / C**D = Py A P Q / Py4 C P D Q.
Proof.
intros.
unfold on_perp_d in H.
assert (A<>Y).
assert (T:=on_line_dex_spec_strong_f A Y C D H1 H4).
elim T.
intros D' HD'.
clear T.
decompose [and] HD'.
clear HD'.
rewrite <- H7.
assert (A<>D').
assert (D'<>Y).
unfold not.
intro.
subst.

*****
H5 : Col Y A Y
H7 : eq (DSeg A Y) (DSeg C D)
H8 : weak_3_parallelogram A Y D C
H4,H6 : not (eq A Y)
H3 : not (eq (DSeg C D) (DSeg A Y))
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
H : and (not (eq P Q))\n (and (perp Y P P Q)\n (and\n (eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y)))\n (not (eq r F0))))
r : F
Y,P,Q,A,C,D : Point
*****
False
+++++
subst.
-----
Theorem elim_ratio_on_perp_d_b_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C D -> C<>D -> C**D <>A**Y -> A**Y / C**D = Py A P Q / Py4 C P D Q.
Proof.
intros.
unfold on_perp_d in H.
assert (A<>Y).
assert (T:=on_line_dex_spec_strong_f A Y C D H1 H4).
elim T.
intros D' HD'.
clear T.
decompose [and] HD'.
clear HD'.
rewrite <- H7.
assert (A<>D').
assert (D'<>Y).
unfold not.
intro.
subst.
subst.

*****
H5 : Col Y A Y
H7 : eq (DSeg A Y) (DSeg C D)
H8 : weak_3_parallelogram A Y D C
H4,H6 : not (eq A Y)
H3 : not (eq (DSeg C D) (DSeg A Y))
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
H : and (not (eq P Q))\n (and (perp Y P P Q)\n (and\n (eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y)))\n (not (eq r F0))))
r : F
Y,P,Q,A,C,D : Point
*****
False
+++++
rewrite H7 in H3.
-----
Theorem elim_ratio_on_perp_d_b_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C D -> C<>D -> C**D <>A**Y -> A**Y / C**D = Py A P Q / Py4 C P D Q.
Proof.
intros.
unfold on_perp_d in H.
assert (A<>Y).
assert (T:=on_line_dex_spec_strong_f A Y C D H1 H4).
elim T.
intros D' HD'.
clear T.
decompose [and] HD'.
clear HD'.
rewrite <- H7.
assert (A<>D').
assert (D'<>Y).
unfold not.
intro.
subst.
subst.
rewrite H7 in H3.

*****
H5 : Col Y A Y
H7 : eq (DSeg A Y) (DSeg C D)
H8 : weak_3_parallelogram A Y D C
H4,H6 : not (eq A Y)
H3 : not (eq (DSeg C D) (DSeg C D))
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
H : and (not (eq P Q))\n (and (perp Y P P Q)\n (and\n (eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y)))\n (not (eq r F0))))
r : F
Y,P,Q,A,C,D : Point
*****
False
+++++
intuition.
-----
Theorem elim_ratio_on_perp_d_b_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C D -> C<>D -> C**D <>A**Y -> A**Y / C**D = Py A P Q / Py4 C P D Q.
Proof.
intros.
unfold on_perp_d in H.
assert (A<>Y).
assert (T:=on_line_dex_spec_strong_f A Y C D H1 H4).
elim T.
intros D' HD'.
clear T.
decompose [and] HD'.
clear HD'.
rewrite <- H7.
assert (A<>D').
assert (D'<>Y).

*****
H9 : not (eq D' Y)
H6 : not (eq A D')
H8 : weak_3_parallelogram A D' D C
H7 : eq (DSeg A D') (DSeg C D)
H5 : Col D' A Y
D' : Point
H4 : not (eq A Y)
H3 : not (eq (DSeg C D) (DSeg A Y))
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
H : and (not (eq P Q))\n (and (perp Y P P Q)\n (and\n (eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y)))\n (not (eq r F0))))
r : F
Y,P,Q,A,C,D : Point
*****
eq (Fdiv (DSeg A Y) (DSeg A D')) (Fdiv (Py A P Q) (Py4 C P D Q))
+++++
rewrite (l_25_b P Q A D' Y H6 H9).
-----
Theorem elim_ratio_on_perp_d_b_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C D -> C<>D -> C**D <>A**Y -> A**Y / C**D = Py A P Q / Py4 C P D Q.
Proof.
intros.
unfold on_perp_d in H.
assert (A<>Y).
assert (T:=on_line_dex_spec_strong_f A Y C D H1 H4).
elim T.
intros D' HD'.
clear T.
decompose [and] HD'.
clear HD'.
rewrite <- H7.
assert (A<>D').
assert (D'<>Y).
rewrite (l_25_b P Q A D' Y H6 H9).

*****
H9 : not (eq D' Y)
H6 : not (eq A D')
H8 : weak_3_parallelogram A D' D C
H7 : eq (DSeg A D') (DSeg C D)
H5 : Col D' A Y
D' : Point
H4 : not (eq A Y)
H3 : not (eq (DSeg C D) (DSeg A Y))
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
H : and (not (eq P Q))\n (and (perp Y P P Q)\n (and\n (eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y)))\n (not (eq r F0))))
r : F
Y,P,Q,A,C,D : Point
*****
eq (Fdiv (Py A P Q) (Py4 A P D' Q)) (Fdiv (Py A P Q) (Py4 C P D Q))
+++++
assert (Py4 A P D' Q = Py4 C P D Q).
-----
Theorem elim_ratio_on_perp_d_b_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C D -> C<>D -> C**D <>A**Y -> A**Y / C**D = Py A P Q / Py4 C P D Q.
Proof.
intros.
unfold on_perp_d in H.
assert (A<>Y).
assert (T:=on_line_dex_spec_strong_f A Y C D H1 H4).
elim T.
intros D' HD'.
clear T.
decompose [and] HD'.
clear HD'.
rewrite <- H7.
assert (A<>D').
assert (D'<>Y).
rewrite (l_25_b P Q A D' Y H6 H9).
assert (Py4 A P D' Q = Py4 C P D Q).

*****
H9 : not (eq D' Y)
H6 : not (eq A D')
H8 : weak_3_parallelogram A D' D C
H7 : eq (DSeg A D') (DSeg C D)
H5 : Col D' A Y
D' : Point
H4 : not (eq A Y)
H3 : not (eq (DSeg C D) (DSeg A Y))
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
H : and (not (eq P Q))\n (and (perp Y P P Q)\n (and\n (eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y)))\n (not (eq r F0))))
r : F
Y,P,Q,A,C,D : Point
*****
eq (Py4 A P D' Q) (Py4 C P D Q)
+++++
apply l_27_b.
-----
Theorem elim_ratio_on_perp_d_b_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C D -> C<>D -> C**D <>A**Y -> A**Y / C**D = Py A P Q / Py4 C P D Q.
Proof.
intros.
unfold on_perp_d in H.
assert (A<>Y).
assert (T:=on_line_dex_spec_strong_f A Y C D H1 H4).
elim T.
intros D' HD'.
clear T.
decompose [and] HD'.
clear HD'.
rewrite <- H7.
assert (A<>D').
assert (D'<>Y).
rewrite (l_25_b P Q A D' Y H6 H9).
assert (Py4 A P D' Q = Py4 C P D Q).
apply l_27_b.

*****
H9 : not (eq D' Y)
H6 : not (eq A D')
H8 : weak_3_parallelogram A D' D C
H7 : eq (DSeg A D') (DSeg C D)
H5 : Col D' A Y
D' : Point
H4 : not (eq A Y)
H3 : not (eq (DSeg C D) (DSeg A Y))
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
H : and (not (eq P Q))\n (and (perp Y P P Q)\n (and\n (eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y)))\n (not (eq r F0))))
r : F
Y,P,Q,A,C,D : Point
*****
weak_3_parallelogram A D' D C
+++++
auto.
-----
Theorem elim_ratio_on_perp_d_b_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C D -> C<>D -> C**D <>A**Y -> A**Y / C**D = Py A P Q / Py4 C P D Q.
Proof.
intros.
unfold on_perp_d in H.
assert (A<>Y).
assert (T:=on_line_dex_spec_strong_f A Y C D H1 H4).
elim T.
intros D' HD'.
clear T.
decompose [and] HD'.
clear HD'.
rewrite <- H7.
assert (A<>D').
assert (D'<>Y).
rewrite (l_25_b P Q A D' Y H6 H9).
assert (Py4 A P D' Q = Py4 C P D Q).

*****
H10 : eq (Py4 A P D' Q) (Py4 C P D Q)
H9 : not (eq D' Y)
H6 : not (eq A D')
H8 : weak_3_parallelogram A D' D C
H7 : eq (DSeg A D') (DSeg C D)
H5 : Col D' A Y
D' : Point
H4 : not (eq A Y)
H3 : not (eq (DSeg C D) (DSeg A Y))
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
H : and (not (eq P Q))\n (and (perp Y P P Q)\n (and\n (eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y)))\n (not (eq r F0))))
r : F
Y,P,Q,A,C,D : Point
*****
eq (Fdiv (Py A P Q) (Py4 A P D' Q)) (Fdiv (Py A P Q) (Py4 C P D Q))
+++++
rewrite H10.
-----
Theorem elim_ratio_on_perp_d_b_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C D -> C<>D -> C**D <>A**Y -> A**Y / C**D = Py A P Q / Py4 C P D Q.
Proof.
intros.
unfold on_perp_d in H.
assert (A<>Y).
assert (T:=on_line_dex_spec_strong_f A Y C D H1 H4).
elim T.
intros D' HD'.
clear T.
decompose [and] HD'.
clear HD'.
rewrite <- H7.
assert (A<>D').
assert (D'<>Y).
rewrite (l_25_b P Q A D' Y H6 H9).
assert (Py4 A P D' Q = Py4 C P D Q).
rewrite H10.

*****
H10 : eq (Py4 A P D' Q) (Py4 C P D Q)
H9 : not (eq D' Y)
H6 : not (eq A D')
H8 : weak_3_parallelogram A D' D C
H7 : eq (DSeg A D') (DSeg C D)
H5 : Col D' A Y
D' : Point
H4 : not (eq A Y)
H3 : not (eq (DSeg C D) (DSeg A Y))
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
H : and (not (eq P Q))\n (and (perp Y P P Q)\n (and\n (eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y)))\n (not (eq r F0))))
r : F
Y,P,Q,A,C,D : Point
*****
eq (Fdiv (Py A P Q) (Py4 C P D Q)) (Fdiv (Py A P Q) (Py4 C P D Q))
+++++
reflexivity.
-----
Theorem elim_ratio_on_perp_d_b_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C D -> C<>D -> C**D <>A**Y -> A**Y / C**D = Py A P Q / Py4 C P D Q.
Proof.
intros.
unfold on_perp_d in H.
assert (A<>Y).
assert (T:=on_line_dex_spec_strong_f A Y C D H1 H4).
elim T.
intros D' HD'.
clear T.
decompose [and] HD'.
clear HD'.
rewrite <- H7.
assert (A<>D').
assert (D'<>Y).
rewrite (l_25_b P Q A D' Y H6 H9).

*****
H9 : not (eq D' Y)
H6 : not (eq A D')
H8 : weak_3_parallelogram A D' D C
H7 : eq (DSeg A D') (DSeg C D)
H5 : Col D' A Y
D' : Point
H4 : not (eq A Y)
H3 : not (eq (DSeg C D) (DSeg A Y))
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
H : and (not (eq P Q))\n (and (perp Y P P Q)\n (and\n (eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y)))\n (not (eq r F0))))
r : F
Y,P,Q,A,C,D : Point
*****
not (eq (Py D' P Q) F0)
+++++
unfold not.
-----
Theorem elim_ratio_on_perp_d_b_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C D -> C<>D -> C**D <>A**Y -> A**Y / C**D = Py A P Q / Py4 C P D Q.
Proof.
intros.
unfold on_perp_d in H.
assert (A<>Y).
assert (T:=on_line_dex_spec_strong_f A Y C D H1 H4).
elim T.
intros D' HD'.
clear T.
decompose [and] HD'.
clear HD'.
rewrite <- H7.
assert (A<>D').
assert (D'<>Y).
rewrite (l_25_b P Q A D' Y H6 H9).
unfold not.

*****
H9 : not (eq D' Y)
H6 : not (eq A D')
H8 : weak_3_parallelogram A D' D C
H7 : eq (DSeg A D') (DSeg C D)
H5 : Col D' A Y
D' : Point
H4 : not (eq A Y)
H3 : not (eq (DSeg C D) (DSeg A Y))
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
H : and (not (eq P Q))\n (and (perp Y P P Q)\n (and\n (eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y)))\n (not (eq r F0))))
r : F
Y,P,Q,A,C,D : Point
*****
forall _ : eq (Py D' P Q) F0, False
+++++
intro.
-----
Theorem elim_ratio_on_perp_d_b_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C D -> C<>D -> C**D <>A**Y -> A**Y / C**D = Py A P Q / Py4 C P D Q.
Proof.
intros.
unfold on_perp_d in H.
assert (A<>Y).
assert (T:=on_line_dex_spec_strong_f A Y C D H1 H4).
elim T.
intros D' HD'.
clear T.
decompose [and] HD'.
clear HD'.
rewrite <- H7.
assert (A<>D').
assert (D'<>Y).
rewrite (l_25_b P Q A D' Y H6 H9).
unfold not.
intro.

*****
H10 : eq (Py D' P Q) F0
H9 : not (eq D' Y)
H6 : not (eq A D')
H8 : weak_3_parallelogram A D' D C
H7 : eq (DSeg A D') (DSeg C D)
H5 : Col D' A Y
D' : Point
H4 : not (eq A Y)
H3 : not (eq (DSeg C D) (DSeg A Y))
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
H : and (not (eq P Q))\n (and (perp Y P P Q)\n (and\n (eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y)))\n (not (eq r F0))))
r : F
Y,P,Q,A,C,D : Point
*****
False
+++++
assert (parallel Y P D' P).
-----
Theorem elim_ratio_on_perp_d_b_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C D -> C<>D -> C**D <>A**Y -> A**Y / C**D = Py A P Q / Py4 C P D Q.
Proof.
intros.
unfold on_perp_d in H.
assert (A<>Y).
assert (T:=on_line_dex_spec_strong_f A Y C D H1 H4).
elim T.
intros D' HD'.
clear T.
decompose [and] HD'.
clear HD'.
rewrite <- H7.
assert (A<>D').
assert (D'<>Y).
rewrite (l_25_b P Q A D' Y H6 H9).
unfold not.
intro.
assert (parallel Y P D' P).

*****
H10 : eq (Py D' P Q) F0
H9 : not (eq D' Y)
H6 : not (eq A D')
H8 : weak_3_parallelogram A D' D C
H7 : eq (DSeg A D') (DSeg C D)
H5 : Col D' A Y
D' : Point
H4 : not (eq A Y)
H3 : not (eq (DSeg C D) (DSeg A Y))
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
H : and (not (eq P Q))\n (and (perp Y P P Q)\n (and\n (eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y)))\n (not (eq r F0))))
r : F
Y,P,Q,A,C,D : Point
*****
parallel Y P D' P
+++++
decompose [and] H.
-----
Theorem elim_ratio_on_perp_d_b_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C D -> C<>D -> C**D <>A**Y -> A**Y / C**D = Py A P Q / Py4 C P D Q.
Proof.
intros.
unfold on_perp_d in H.
assert (A<>Y).
assert (T:=on_line_dex_spec_strong_f A Y C D H1 H4).
elim T.
intros D' HD'.
clear T.
decompose [and] HD'.
clear HD'.
rewrite <- H7.
assert (A<>D').
assert (D'<>Y).
rewrite (l_25_b P Q A D' Y H6 H9).
unfold not.
intro.
assert (parallel Y P D' P).
decompose [and] H.

*****
H15 : not (eq r F0)
H12 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H13 : perp Y P P Q
H11 : not (eq P Q)
H10 : eq (Py D' P Q) F0
H9 : not (eq D' Y)
H6 : not (eq A D')
H8 : weak_3_parallelogram A D' D C
H7 : eq (DSeg A D') (DSeg C D)
H5 : Col D' A Y
D' : Point
H4 : not (eq A Y)
H3 : not (eq (DSeg C D) (DSeg A Y))
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
H : and (not (eq P Q))\n (and (perp Y P P Q)\n (and\n (eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y)))\n (not (eq r F0))))
r : F
Y,P,Q,A,C,D : Point
*****
parallel Y P D' P
+++++
clear H.
-----
Theorem elim_ratio_on_perp_d_b_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C D -> C<>D -> C**D <>A**Y -> A**Y / C**D = Py A P Q / Py4 C P D Q.
Proof.
intros.
unfold on_perp_d in H.
assert (A<>Y).
assert (T:=on_line_dex_spec_strong_f A Y C D H1 H4).
elim T.
intros D' HD'.
clear T.
decompose [and] HD'.
clear HD'.
rewrite <- H7.
assert (A<>D').
assert (D'<>Y).
rewrite (l_25_b P Q A D' Y H6 H9).
unfold not.
intro.
assert (parallel Y P D' P).
decompose [and] H.
clear H.

*****
H15 : not (eq r F0)
H12 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H13 : perp Y P P Q
H11 : not (eq P Q)
H10 : eq (Py D' P Q) F0
H9 : not (eq D' Y)
H6 : not (eq A D')
H8 : weak_3_parallelogram A D' D C
H7 : eq (DSeg A D') (DSeg C D)
H5 : Col D' A Y
D' : Point
H4 : not (eq A Y)
H3 : not (eq (DSeg C D) (DSeg A Y))
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
r : F
Y,P,Q,A,C,D : Point
*****
parallel Y P D' P
+++++
apply (perp_perp_para Y P P Q D' P).
-----
Theorem elim_ratio_on_perp_d_b_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C D -> C<>D -> C**D <>A**Y -> A**Y / C**D = Py A P Q / Py4 C P D Q.
Proof.
intros.
unfold on_perp_d in H.
assert (A<>Y).
assert (T:=on_line_dex_spec_strong_f A Y C D H1 H4).
elim T.
intros D' HD'.
clear T.
decompose [and] HD'.
clear HD'.
rewrite <- H7.
assert (A<>D').
assert (D'<>Y).
rewrite (l_25_b P Q A D' Y H6 H9).
unfold not.
intro.
assert (parallel Y P D' P).
decompose [and] H.
clear H.
apply (perp_perp_para Y P P Q D' P).

*****
H15 : not (eq r F0)
H12 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H13 : perp Y P P Q
H11 : not (eq P Q)
H10 : eq (Py D' P Q) F0
H9 : not (eq D' Y)
H6 : not (eq A D')
H8 : weak_3_parallelogram A D' D C
H7 : eq (DSeg A D') (DSeg C D)
H5 : Col D' A Y
D' : Point
H4 : not (eq A Y)
H3 : not (eq (DSeg C D) (DSeg A Y))
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
r : F
Y,P,Q,A,C,D : Point
*****
not (eq P Q)
+++++
auto with Geom.
-----
Theorem elim_ratio_on_perp_d_b_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C D -> C<>D -> C**D <>A**Y -> A**Y / C**D = Py A P Q / Py4 C P D Q.
Proof.
intros.
unfold on_perp_d in H.
assert (A<>Y).
assert (T:=on_line_dex_spec_strong_f A Y C D H1 H4).
elim T.
intros D' HD'.
clear T.
decompose [and] HD'.
clear HD'.
rewrite <- H7.
assert (A<>D').
assert (D'<>Y).
rewrite (l_25_b P Q A D' Y H6 H9).
unfold not.
intro.
assert (parallel Y P D' P).
decompose [and] H.
clear H.
apply (perp_perp_para Y P P Q D' P).

*****
H15 : not (eq r F0)
H12 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H13 : perp Y P P Q
H11 : not (eq P Q)
H10 : eq (Py D' P Q) F0
H9 : not (eq D' Y)
H6 : not (eq A D')
H8 : weak_3_parallelogram A D' D C
H7 : eq (DSeg A D') (DSeg C D)
H5 : Col D' A Y
D' : Point
H4 : not (eq A Y)
H3 : not (eq (DSeg C D) (DSeg A Y))
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
r : F
Y,P,Q,A,C,D : Point
*****
perp Y P P Q
+++++
auto with Geom.
-----
Theorem elim_ratio_on_perp_d_b_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C D -> C<>D -> C**D <>A**Y -> A**Y / C**D = Py A P Q / Py4 C P D Q.
Proof.
intros.
unfold on_perp_d in H.
assert (A<>Y).
assert (T:=on_line_dex_spec_strong_f A Y C D H1 H4).
elim T.
intros D' HD'.
clear T.
decompose [and] HD'.
clear HD'.
rewrite <- H7.
assert (A<>D').
assert (D'<>Y).
rewrite (l_25_b P Q A D' Y H6 H9).
unfold not.
intro.
assert (parallel Y P D' P).
decompose [and] H.
clear H.
apply (perp_perp_para Y P P Q D' P).

*****
H15 : not (eq r F0)
H12 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H13 : perp Y P P Q
H11 : not (eq P Q)
H10 : eq (Py D' P Q) F0
H9 : not (eq D' Y)
H6 : not (eq A D')
H8 : weak_3_parallelogram A D' D C
H7 : eq (DSeg A D') (DSeg C D)
H5 : Col D' A Y
D' : Point
H4 : not (eq A Y)
H3 : not (eq (DSeg C D) (DSeg A Y))
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
r : F
Y,P,Q,A,C,D : Point
*****
perp D' P P Q
+++++
auto with Geom.
-----
Theorem elim_ratio_on_perp_d_b_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C D -> C<>D -> C**D <>A**Y -> A**Y / C**D = Py A P Q / Py4 C P D Q.
Proof.
intros.
unfold on_perp_d in H.
assert (A<>Y).
assert (T:=on_line_dex_spec_strong_f A Y C D H1 H4).
elim T.
intros D' HD'.
clear T.
decompose [and] HD'.
clear HD'.
rewrite <- H7.
assert (A<>D').
assert (D'<>Y).
rewrite (l_25_b P Q A D' Y H6 H9).
unfold not.
intro.
assert (parallel Y P D' P).

*****
H11 : parallel Y P D' P
H10 : eq (Py D' P Q) F0
H9 : not (eq D' Y)
H6 : not (eq A D')
H8 : weak_3_parallelogram A D' D C
H7 : eq (DSeg A D') (DSeg C D)
H5 : Col D' A Y
D' : Point
H4 : not (eq A Y)
H3 : not (eq (DSeg C D) (DSeg A Y))
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
H : and (not (eq P Q))\n (and (perp Y P P Q)\n (and\n (eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y)))\n (not (eq r F0))))
r : F
Y,P,Q,A,C,D : Point
*****
False
+++++
assert (Col Y P D').
-----
Theorem elim_ratio_on_perp_d_b_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C D -> C<>D -> C**D <>A**Y -> A**Y / C**D = Py A P Q / Py4 C P D Q.
Proof.
intros.
unfold on_perp_d in H.
assert (A<>Y).
assert (T:=on_line_dex_spec_strong_f A Y C D H1 H4).
elim T.
intros D' HD'.
clear T.
decompose [and] HD'.
clear HD'.
rewrite <- H7.
assert (A<>D').
assert (D'<>Y).
rewrite (l_25_b P Q A D' Y H6 H9).
unfold not.
intro.
assert (parallel Y P D' P).
assert (Col Y P D').

*****
H11 : parallel Y P D' P
H10 : eq (Py D' P Q) F0
H9 : not (eq D' Y)
H6 : not (eq A D')
H8 : weak_3_parallelogram A D' D C
H7 : eq (DSeg A D') (DSeg C D)
H5 : Col D' A Y
D' : Point
H4 : not (eq A Y)
H3 : not (eq (DSeg C D) (DSeg A Y))
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
H : and (not (eq P Q))\n (and (perp Y P P Q)\n (and\n (eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y)))\n (not (eq r F0))))
r : F
Y,P,Q,A,C,D : Point
*****
Col Y P D'
+++++
unfold parallel in H11.
-----
Theorem elim_ratio_on_perp_d_b_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C D -> C<>D -> C**D <>A**Y -> A**Y / C**D = Py A P Q / Py4 C P D Q.
Proof.
intros.
unfold on_perp_d in H.
assert (A<>Y).
assert (T:=on_line_dex_spec_strong_f A Y C D H1 H4).
elim T.
intros D' HD'.
clear T.
decompose [and] HD'.
clear HD'.
rewrite <- H7.
assert (A<>D').
assert (D'<>Y).
rewrite (l_25_b P Q A D' Y H6 H9).
unfold not.
intro.
assert (parallel Y P D' P).
assert (Col Y P D').
unfold parallel in H11.

*****
H11 : eq (S4 Y D' P P) F0
H10 : eq (Py D' P Q) F0
H9 : not (eq D' Y)
H6 : not (eq A D')
H8 : weak_3_parallelogram A D' D C
H7 : eq (DSeg A D') (DSeg C D)
H5 : Col D' A Y
D' : Point
H4 : not (eq A Y)
H3 : not (eq (DSeg C D) (DSeg A Y))
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
H : and (not (eq P Q))\n (and (perp Y P P Q)\n (and\n (eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y)))\n (not (eq r F0))))
r : F
Y,P,Q,A,C,D : Point
*****
Col Y P D'
+++++
unfold S4 in H11.
-----
Theorem elim_ratio_on_perp_d_b_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C D -> C<>D -> C**D <>A**Y -> A**Y / C**D = Py A P Q / Py4 C P D Q.
Proof.
intros.
unfold on_perp_d in H.
assert (A<>Y).
assert (T:=on_line_dex_spec_strong_f A Y C D H1 H4).
elim T.
intros D' HD'.
clear T.
decompose [and] HD'.
clear HD'.
rewrite <- H7.
assert (A<>D').
assert (D'<>Y).
rewrite (l_25_b P Q A D' Y H6 H9).
unfold not.
intro.
assert (parallel Y P D' P).
assert (Col Y P D').
unfold parallel in H11.
unfold S4 in H11.

*****
H11 : eq (Fplus (S Y D' P) (S Y P P)) F0
H10 : eq (Py D' P Q) F0
H9 : not (eq D' Y)
H6 : not (eq A D')
H8 : weak_3_parallelogram A D' D C
H7 : eq (DSeg A D') (DSeg C D)
H5 : Col D' A Y
D' : Point
H4 : not (eq A Y)
H3 : not (eq (DSeg C D) (DSeg A Y))
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
H : and (not (eq P Q))\n (and (perp Y P P Q)\n (and\n (eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y)))\n (not (eq r F0))))
r : F
Y,P,Q,A,C,D : Point
*****
Col Y P D'
+++++
basic_simpl.
-----
Theorem elim_ratio_on_perp_d_b_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C D -> C<>D -> C**D <>A**Y -> A**Y / C**D = Py A P Q / Py4 C P D Q.
Proof.
intros.
unfold on_perp_d in H.
assert (A<>Y).
assert (T:=on_line_dex_spec_strong_f A Y C D H1 H4).
elim T.
intros D' HD'.
clear T.
decompose [and] HD'.
clear HD'.
rewrite <- H7.
assert (A<>D').
assert (D'<>Y).
rewrite (l_25_b P Q A D' Y H6 H9).
unfold not.
intro.
assert (parallel Y P D' P).
assert (Col Y P D').
unfold parallel in H11.
unfold S4 in H11.
basic_simpl.

*****
H11 : eq (S Y D' P) F0
H10 : eq (Py D' P Q) F0
H9 : not (eq D' Y)
H6 : not (eq A D')
H8 : weak_3_parallelogram A D' D C
H7 : eq (DSeg A D') (DSeg C D)
H5 : Col D' A Y
D' : Point
H4 : not (eq A Y)
H3 : not (eq (DSeg C D) (DSeg A Y))
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
H : and (not (eq P Q))\n (and (perp Y P P Q)\n (and\n (eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y)))\n (not (eq r F0))))
r : F
Y,P,Q,A,C,D : Point
*****
Col Y P D'
+++++
auto with Geom.
-----
Theorem elim_ratio_on_perp_d_b_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C D -> C<>D -> C**D <>A**Y -> A**Y / C**D = Py A P Q / Py4 C P D Q.
Proof.
intros.
unfold on_perp_d in H.
assert (A<>Y).
assert (T:=on_line_dex_spec_strong_f A Y C D H1 H4).
elim T.
intros D' HD'.
clear T.
decompose [and] HD'.
clear HD'.
rewrite <- H7.
assert (A<>D').
assert (D'<>Y).
rewrite (l_25_b P Q A D' Y H6 H9).
unfold not.
intro.
assert (parallel Y P D' P).
assert (Col Y P D').

*****
H12 : Col Y P D'
H11 : parallel Y P D' P
H10 : eq (Py D' P Q) F0
H9 : not (eq D' Y)
H6 : not (eq A D')
H8 : weak_3_parallelogram A D' D C
H7 : eq (DSeg A D') (DSeg C D)
H5 : Col D' A Y
D' : Point
H4 : not (eq A Y)
H3 : not (eq (DSeg C D) (DSeg A Y))
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
H : and (not (eq P Q))\n (and (perp Y P P Q)\n (and\n (eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y)))\n (not (eq r F0))))
r : F
Y,P,Q,A,C,D : Point
*****
False
+++++
assert (Col Y A P).
-----
Theorem elim_ratio_on_perp_d_b_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C D -> C<>D -> C**D <>A**Y -> A**Y / C**D = Py A P Q / Py4 C P D Q.
Proof.
intros.
unfold on_perp_d in H.
assert (A<>Y).
assert (T:=on_line_dex_spec_strong_f A Y C D H1 H4).
elim T.
intros D' HD'.
clear T.
decompose [and] HD'.
clear HD'.
rewrite <- H7.
assert (A<>D').
assert (D'<>Y).
rewrite (l_25_b P Q A D' Y H6 H9).
unfold not.
intro.
assert (parallel Y P D' P).
assert (Col Y P D').
assert (Col Y A P).

*****
H12 : Col Y P D'
H11 : parallel Y P D' P
H10 : eq (Py D' P Q) F0
H9 : not (eq D' Y)
H6 : not (eq A D')
H8 : weak_3_parallelogram A D' D C
H7 : eq (DSeg A D') (DSeg C D)
H5 : Col D' A Y
D' : Point
H4 : not (eq A Y)
H3 : not (eq (DSeg C D) (DSeg A Y))
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
H : and (not (eq P Q))\n (and (perp Y P P Q)\n (and\n (eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y)))\n (not (eq r F0))))
r : F
Y,P,Q,A,C,D : Point
*****
Col Y A P
+++++
apply (col_trans_1 Y D' A P).
-----
Theorem elim_ratio_on_perp_d_b_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C D -> C<>D -> C**D <>A**Y -> A**Y / C**D = Py A P Q / Py4 C P D Q.
Proof.
intros.
unfold on_perp_d in H.
assert (A<>Y).
assert (T:=on_line_dex_spec_strong_f A Y C D H1 H4).
elim T.
intros D' HD'.
clear T.
decompose [and] HD'.
clear HD'.
rewrite <- H7.
assert (A<>D').
assert (D'<>Y).
rewrite (l_25_b P Q A D' Y H6 H9).
unfold not.
intro.
assert (parallel Y P D' P).
assert (Col Y P D').
assert (Col Y A P).
apply (col_trans_1 Y D' A P).

*****
H12 : Col Y P D'
H11 : parallel Y P D' P
H10 : eq (Py D' P Q) F0
H9 : not (eq D' Y)
H6 : not (eq A D')
H8 : weak_3_parallelogram A D' D C
H7 : eq (DSeg A D') (DSeg C D)
H5 : Col D' A Y
D' : Point
H4 : not (eq A Y)
H3 : not (eq (DSeg C D) (DSeg A Y))
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
H : and (not (eq P Q))\n (and (perp Y P P Q)\n (and\n (eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y)))\n (not (eq r F0))))
r : F
Y,P,Q,A,C,D : Point
*****
not (eq Y D')
+++++
auto with Geom.
-----
Theorem elim_ratio_on_perp_d_b_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C D -> C<>D -> C**D <>A**Y -> A**Y / C**D = Py A P Q / Py4 C P D Q.
Proof.
intros.
unfold on_perp_d in H.
assert (A<>Y).
assert (T:=on_line_dex_spec_strong_f A Y C D H1 H4).
elim T.
intros D' HD'.
clear T.
decompose [and] HD'.
clear HD'.
rewrite <- H7.
assert (A<>D').
assert (D'<>Y).
rewrite (l_25_b P Q A D' Y H6 H9).
unfold not.
intro.
assert (parallel Y P D' P).
assert (Col Y P D').
assert (Col Y A P).
apply (col_trans_1 Y D' A P).

*****
H12 : Col Y P D'
H11 : parallel Y P D' P
H10 : eq (Py D' P Q) F0
H9 : not (eq D' Y)
H6 : not (eq A D')
H8 : weak_3_parallelogram A D' D C
H7 : eq (DSeg A D') (DSeg C D)
H5 : Col D' A Y
D' : Point
H4 : not (eq A Y)
H3 : not (eq (DSeg C D) (DSeg A Y))
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
H : and (not (eq P Q))\n (and (perp Y P P Q)\n (and\n (eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y)))\n (not (eq r F0))))
r : F
Y,P,Q,A,C,D : Point
*****
Col Y D' A
+++++
auto with Geom.
-----
Theorem elim_ratio_on_perp_d_b_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C D -> C<>D -> C**D <>A**Y -> A**Y / C**D = Py A P Q / Py4 C P D Q.
Proof.
intros.
unfold on_perp_d in H.
assert (A<>Y).
assert (T:=on_line_dex_spec_strong_f A Y C D H1 H4).
elim T.
intros D' HD'.
clear T.
decompose [and] HD'.
clear HD'.
rewrite <- H7.
assert (A<>D').
assert (D'<>Y).
rewrite (l_25_b P Q A D' Y H6 H9).
unfold not.
intro.
assert (parallel Y P D' P).
assert (Col Y P D').
assert (Col Y A P).
apply (col_trans_1 Y D' A P).

*****
H12 : Col Y P D'
H11 : parallel Y P D' P
H10 : eq (Py D' P Q) F0
H9 : not (eq D' Y)
H6 : not (eq A D')
H8 : weak_3_parallelogram A D' D C
H7 : eq (DSeg A D') (DSeg C D)
H5 : Col D' A Y
D' : Point
H4 : not (eq A Y)
H3 : not (eq (DSeg C D) (DSeg A Y))
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
H : and (not (eq P Q))\n (and (perp Y P P Q)\n (and\n (eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y)))\n (not (eq r F0))))
r : F
Y,P,Q,A,C,D : Point
*****
Col Y D' P
+++++
auto with Geom.
-----
Theorem elim_ratio_on_perp_d_b_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C D -> C<>D -> C**D <>A**Y -> A**Y / C**D = Py A P Q / Py4 C P D Q.
Proof.
intros.
unfold on_perp_d in H.
assert (A<>Y).
assert (T:=on_line_dex_spec_strong_f A Y C D H1 H4).
elim T.
intros D' HD'.
clear T.
decompose [and] HD'.
clear HD'.
rewrite <- H7.
assert (A<>D').
assert (D'<>Y).
rewrite (l_25_b P Q A D' Y H6 H9).
unfold not.
intro.
assert (parallel Y P D' P).
assert (Col Y P D').
assert (Col Y A P).

*****
H13 : Col Y A P
H12 : Col Y P D'
H11 : parallel Y P D' P
H10 : eq (Py D' P Q) F0
H9 : not (eq D' Y)
H6 : not (eq A D')
H8 : weak_3_parallelogram A D' D C
H7 : eq (DSeg A D') (DSeg C D)
H5 : Col D' A Y
D' : Point
H4 : not (eq A Y)
H3 : not (eq (DSeg C D) (DSeg A Y))
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
H : and (not (eq P Q))\n (and (perp Y P P Q)\n (and\n (eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y)))\n (not (eq r F0))))
r : F
Y,P,Q,A,C,D : Point
*****
False
+++++
intuition.
-----
Theorem elim_ratio_on_perp_d_b_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C D -> C<>D -> C**D <>A**Y -> A**Y / C**D = Py A P Q / Py4 C P D Q.
Proof.
intros.
unfold on_perp_d in H.
assert (A<>Y).
assert (T:=on_line_dex_spec_strong_f A Y C D H1 H4).
elim T.
intros D' HD'.
clear T.
decompose [and] HD'.
clear HD'.
rewrite <- H7.
assert (A<>D').
assert (D'<>Y).
rewrite (l_25_b P Q A D' Y H6 H9).

*****
H9 : not (eq D' Y)
H6 : not (eq A D')
H8 : weak_3_parallelogram A D' D C
H7 : eq (DSeg A D') (DSeg C D)
H5 : Col D' A Y
D' : Point
H4 : not (eq A Y)
H3 : not (eq (DSeg C D) (DSeg A Y))
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
H : and (not (eq P Q))\n (and (perp Y P P Q)\n (and\n (eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y)))\n (not (eq r F0))))
r : F
Y,P,Q,A,C,D : Point
*****
on_inter_line_perp Y P A D' P Q
+++++
unfold on_inter_line_perp.
-----
Theorem elim_ratio_on_perp_d_b_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C D -> C<>D -> C**D <>A**Y -> A**Y / C**D = Py A P Q / Py4 C P D Q.
Proof.
intros.
unfold on_perp_d in H.
assert (A<>Y).
assert (T:=on_line_dex_spec_strong_f A Y C D H1 H4).
elim T.
intros D' HD'.
clear T.
decompose [and] HD'.
clear HD'.
rewrite <- H7.
assert (A<>D').
assert (D'<>Y).
rewrite (l_25_b P Q A D' Y H6 H9).
unfold on_inter_line_perp.

*****
H9 : not (eq D' Y)
H6 : not (eq A D')
H8 : weak_3_parallelogram A D' D C
H7 : eq (DSeg A D') (DSeg C D)
H5 : Col D' A Y
D' : Point
H4 : not (eq A Y)
H3 : not (eq (DSeg C D) (DSeg A Y))
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
H : and (not (eq P Q))\n (and (perp Y P P Q)\n (and\n (eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y)))\n (not (eq r F0))))
r : F
Y,P,Q,A,C,D : Point
*****
and (Col Y A D') (and (perp Y P P Q) (not (perp P Q A D')))
+++++
decompose [and] H.
-----
Theorem elim_ratio_on_perp_d_b_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C D -> C<>D -> C**D <>A**Y -> A**Y / C**D = Py A P Q / Py4 C P D Q.
Proof.
intros.
unfold on_perp_d in H.
assert (A<>Y).
assert (T:=on_line_dex_spec_strong_f A Y C D H1 H4).
elim T.
intros D' HD'.
clear T.
decompose [and] HD'.
clear HD'.
rewrite <- H7.
assert (A<>D').
assert (D'<>Y).
rewrite (l_25_b P Q A D' Y H6 H9).
unfold on_inter_line_perp.
decompose [and] H.

*****
H14 : not (eq r F0)
H11 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H12 : perp Y P P Q
H10 : not (eq P Q)
H9 : not (eq D' Y)
H6 : not (eq A D')
H8 : weak_3_parallelogram A D' D C
H7 : eq (DSeg A D') (DSeg C D)
H5 : Col D' A Y
D' : Point
H4 : not (eq A Y)
H3 : not (eq (DSeg C D) (DSeg A Y))
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
H : and (not (eq P Q))\n (and (perp Y P P Q)\n (and\n (eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y)))\n (not (eq r F0))))
r : F
Y,P,Q,A,C,D : Point
*****
and (Col Y A D') (and (perp Y P P Q) (not (perp P Q A D')))
+++++
repeat split.
-----
Theorem elim_ratio_on_perp_d_b_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C D -> C<>D -> C**D <>A**Y -> A**Y / C**D = Py A P Q / Py4 C P D Q.
Proof.
intros.
unfold on_perp_d in H.
assert (A<>Y).
assert (T:=on_line_dex_spec_strong_f A Y C D H1 H4).
elim T.
intros D' HD'.
clear T.
decompose [and] HD'.
clear HD'.
rewrite <- H7.
assert (A<>D').
assert (D'<>Y).
rewrite (l_25_b P Q A D' Y H6 H9).
unfold on_inter_line_perp.
decompose [and] H.
repeat split.

*****
H14 : not (eq r F0)
H11 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H12 : perp Y P P Q
H10 : not (eq P Q)
H9 : not (eq D' Y)
H6 : not (eq A D')
H8 : weak_3_parallelogram A D' D C
H7 : eq (DSeg A D') (DSeg C D)
H5 : Col D' A Y
D' : Point
H4 : not (eq A Y)
H3 : not (eq (DSeg C D) (DSeg A Y))
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
H : and (not (eq P Q))\n (and (perp Y P P Q)\n (and\n (eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y)))\n (not (eq r F0))))
r : F
Y,P,Q,A,C,D : Point
*****
Col Y A D'
+++++
auto with Geom.
-----
Theorem elim_ratio_on_perp_d_b_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C D -> C<>D -> C**D <>A**Y -> A**Y / C**D = Py A P Q / Py4 C P D Q.
Proof.
intros.
unfold on_perp_d in H.
assert (A<>Y).
assert (T:=on_line_dex_spec_strong_f A Y C D H1 H4).
elim T.
intros D' HD'.
clear T.
decompose [and] HD'.
clear HD'.
rewrite <- H7.
assert (A<>D').
assert (D'<>Y).
rewrite (l_25_b P Q A D' Y H6 H9).
unfold on_inter_line_perp.
decompose [and] H.
repeat split.

*****
H14 : not (eq r F0)
H11 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H12 : perp Y P P Q
H10 : not (eq P Q)
H9 : not (eq D' Y)
H6 : not (eq A D')
H8 : weak_3_parallelogram A D' D C
H7 : eq (DSeg A D') (DSeg C D)
H5 : Col D' A Y
D' : Point
H4 : not (eq A Y)
H3 : not (eq (DSeg C D) (DSeg A Y))
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
H : and (not (eq P Q))\n (and (perp Y P P Q)\n (and\n (eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y)))\n (not (eq r F0))))
r : F
Y,P,Q,A,C,D : Point
*****
perp Y P P Q
+++++
auto with Geom.
-----
Theorem elim_ratio_on_perp_d_b_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C D -> C<>D -> C**D <>A**Y -> A**Y / C**D = Py A P Q / Py4 C P D Q.
Proof.
intros.
unfold on_perp_d in H.
assert (A<>Y).
assert (T:=on_line_dex_spec_strong_f A Y C D H1 H4).
elim T.
intros D' HD'.
clear T.
decompose [and] HD'.
clear HD'.
rewrite <- H7.
assert (A<>D').
assert (D'<>Y).
rewrite (l_25_b P Q A D' Y H6 H9).
unfold on_inter_line_perp.
decompose [and] H.
repeat split.

*****
H14 : not (eq r F0)
H11 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H12 : perp Y P P Q
H10 : not (eq P Q)
H9 : not (eq D' Y)
H6 : not (eq A D')
H8 : weak_3_parallelogram A D' D C
H7 : eq (DSeg A D') (DSeg C D)
H5 : Col D' A Y
D' : Point
H4 : not (eq A Y)
H3 : not (eq (DSeg C D) (DSeg A Y))
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
H : and (not (eq P Q))\n (and (perp Y P P Q)\n (and\n (eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y)))\n (not (eq r F0))))
r : F
Y,P,Q,A,C,D : Point
*****
not (perp P Q A D')
+++++
intro.
-----
Theorem elim_ratio_on_perp_d_b_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C D -> C<>D -> C**D <>A**Y -> A**Y / C**D = Py A P Q / Py4 C P D Q.
Proof.
intros.
unfold on_perp_d in H.
assert (A<>Y).
assert (T:=on_line_dex_spec_strong_f A Y C D H1 H4).
elim T.
intros D' HD'.
clear T.
decompose [and] HD'.
clear HD'.
rewrite <- H7.
assert (A<>D').
assert (D'<>Y).
rewrite (l_25_b P Q A D' Y H6 H9).
unfold on_inter_line_perp.
decompose [and] H.
repeat split.
intro.

*****
H13 : perp P Q A D'
H14 : not (eq r F0)
H11 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H12 : perp Y P P Q
H10 : not (eq P Q)
H9 : not (eq D' Y)
H6 : not (eq A D')
H8 : weak_3_parallelogram A D' D C
H7 : eq (DSeg A D') (DSeg C D)
H5 : Col D' A Y
D' : Point
H4 : not (eq A Y)
H3 : not (eq (DSeg C D) (DSeg A Y))
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
H : and (not (eq P Q))\n (and (perp Y P P Q)\n (and\n (eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y)))\n (not (eq r F0))))
r : F
Y,P,Q,A,C,D : Point
*****
False
+++++
assert (parallel A D' Y P).
-----
Theorem elim_ratio_on_perp_d_b_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C D -> C<>D -> C**D <>A**Y -> A**Y / C**D = Py A P Q / Py4 C P D Q.
Proof.
intros.
unfold on_perp_d in H.
assert (A<>Y).
assert (T:=on_line_dex_spec_strong_f A Y C D H1 H4).
elim T.
intros D' HD'.
clear T.
decompose [and] HD'.
clear HD'.
rewrite <- H7.
assert (A<>D').
assert (D'<>Y).
rewrite (l_25_b P Q A D' Y H6 H9).
unfold on_inter_line_perp.
decompose [and] H.
repeat split.
intro.
assert (parallel A D' Y P).

*****
H13 : perp P Q A D'
H14 : not (eq r F0)
H11 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H12 : perp Y P P Q
H10 : not (eq P Q)
H9 : not (eq D' Y)
H6 : not (eq A D')
H8 : weak_3_parallelogram A D' D C
H7 : eq (DSeg A D') (DSeg C D)
H5 : Col D' A Y
D' : Point
H4 : not (eq A Y)
H3 : not (eq (DSeg C D) (DSeg A Y))
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
H : and (not (eq P Q))\n (and (perp Y P P Q)\n (and\n (eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y)))\n (not (eq r F0))))
r : F
Y,P,Q,A,C,D : Point
*****
parallel A D' Y P
+++++
apply (perp_perp_para A D' P Q Y P).
-----
Theorem elim_ratio_on_perp_d_b_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C D -> C<>D -> C**D <>A**Y -> A**Y / C**D = Py A P Q / Py4 C P D Q.
Proof.
intros.
unfold on_perp_d in H.
assert (A<>Y).
assert (T:=on_line_dex_spec_strong_f A Y C D H1 H4).
elim T.
intros D' HD'.
clear T.
decompose [and] HD'.
clear HD'.
rewrite <- H7.
assert (A<>D').
assert (D'<>Y).
rewrite (l_25_b P Q A D' Y H6 H9).
unfold on_inter_line_perp.
decompose [and] H.
repeat split.
intro.
assert (parallel A D' Y P).
apply (perp_perp_para A D' P Q Y P).

*****
H13 : perp P Q A D'
H14 : not (eq r F0)
H11 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H12 : perp Y P P Q
H10 : not (eq P Q)
H9 : not (eq D' Y)
H6 : not (eq A D')
H8 : weak_3_parallelogram A D' D C
H7 : eq (DSeg A D') (DSeg C D)
H5 : Col D' A Y
D' : Point
H4 : not (eq A Y)
H3 : not (eq (DSeg C D) (DSeg A Y))
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
H : and (not (eq P Q))\n (and (perp Y P P Q)\n (and\n (eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y)))\n (not (eq r F0))))
r : F
Y,P,Q,A,C,D : Point
*****
not (eq P Q)
+++++
auto with Geom.
-----
Theorem elim_ratio_on_perp_d_b_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C D -> C<>D -> C**D <>A**Y -> A**Y / C**D = Py A P Q / Py4 C P D Q.
Proof.
intros.
unfold on_perp_d in H.
assert (A<>Y).
assert (T:=on_line_dex_spec_strong_f A Y C D H1 H4).
elim T.
intros D' HD'.
clear T.
decompose [and] HD'.
clear HD'.
rewrite <- H7.
assert (A<>D').
assert (D'<>Y).
rewrite (l_25_b P Q A D' Y H6 H9).
unfold on_inter_line_perp.
decompose [and] H.
repeat split.
intro.
assert (parallel A D' Y P).
apply (perp_perp_para A D' P Q Y P).

*****
H13 : perp P Q A D'
H14 : not (eq r F0)
H11 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H12 : perp Y P P Q
H10 : not (eq P Q)
H9 : not (eq D' Y)
H6 : not (eq A D')
H8 : weak_3_parallelogram A D' D C
H7 : eq (DSeg A D') (DSeg C D)
H5 : Col D' A Y
D' : Point
H4 : not (eq A Y)
H3 : not (eq (DSeg C D) (DSeg A Y))
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
H : and (not (eq P Q))\n (and (perp Y P P Q)\n (and\n (eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y)))\n (not (eq r F0))))
r : F
Y,P,Q,A,C,D : Point
*****
perp A D' P Q
+++++
auto with Geom.
-----
Theorem elim_ratio_on_perp_d_b_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C D -> C<>D -> C**D <>A**Y -> A**Y / C**D = Py A P Q / Py4 C P D Q.
Proof.
intros.
unfold on_perp_d in H.
assert (A<>Y).
assert (T:=on_line_dex_spec_strong_f A Y C D H1 H4).
elim T.
intros D' HD'.
clear T.
decompose [and] HD'.
clear HD'.
rewrite <- H7.
assert (A<>D').
assert (D'<>Y).
rewrite (l_25_b P Q A D' Y H6 H9).
unfold on_inter_line_perp.
decompose [and] H.
repeat split.
intro.
assert (parallel A D' Y P).
apply (perp_perp_para A D' P Q Y P).

*****
H13 : perp P Q A D'
H14 : not (eq r F0)
H11 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H12 : perp Y P P Q
H10 : not (eq P Q)
H9 : not (eq D' Y)
H6 : not (eq A D')
H8 : weak_3_parallelogram A D' D C
H7 : eq (DSeg A D') (DSeg C D)
H5 : Col D' A Y
D' : Point
H4 : not (eq A Y)
H3 : not (eq (DSeg C D) (DSeg A Y))
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
H : and (not (eq P Q))\n (and (perp Y P P Q)\n (and\n (eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y)))\n (not (eq r F0))))
r : F
Y,P,Q,A,C,D : Point
*****
perp Y P P Q
+++++
auto with Geom.
-----
Theorem elim_ratio_on_perp_d_b_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C D -> C<>D -> C**D <>A**Y -> A**Y / C**D = Py A P Q / Py4 C P D Q.
Proof.
intros.
unfold on_perp_d in H.
assert (A<>Y).
assert (T:=on_line_dex_spec_strong_f A Y C D H1 H4).
elim T.
intros D' HD'.
clear T.
decompose [and] HD'.
clear HD'.
rewrite <- H7.
assert (A<>D').
assert (D'<>Y).
rewrite (l_25_b P Q A D' Y H6 H9).
unfold on_inter_line_perp.
decompose [and] H.
repeat split.
intro.
assert (parallel A D' Y P).

*****
H15 : parallel A D' Y P
H13 : perp P Q A D'
H14 : not (eq r F0)
H11 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H12 : perp Y P P Q
H10 : not (eq P Q)
H9 : not (eq D' Y)
H6 : not (eq A D')
H8 : weak_3_parallelogram A D' D C
H7 : eq (DSeg A D') (DSeg C D)
H5 : Col D' A Y
D' : Point
H4 : not (eq A Y)
H3 : not (eq (DSeg C D) (DSeg A Y))
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
H : and (not (eq P Q))\n (and (perp Y P P Q)\n (and\n (eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y)))\n (not (eq r F0))))
r : F
Y,P,Q,A,C,D : Point
*****
False
+++++
assert (Col A P Y).
-----
Theorem elim_ratio_on_perp_d_b_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C D -> C<>D -> C**D <>A**Y -> A**Y / C**D = Py A P Q / Py4 C P D Q.
Proof.
intros.
unfold on_perp_d in H.
assert (A<>Y).
assert (T:=on_line_dex_spec_strong_f A Y C D H1 H4).
elim T.
intros D' HD'.
clear T.
decompose [and] HD'.
clear HD'.
rewrite <- H7.
assert (A<>D').
assert (D'<>Y).
rewrite (l_25_b P Q A D' Y H6 H9).
unfold on_inter_line_perp.
decompose [and] H.
repeat split.
intro.
assert (parallel A D' Y P).
assert (Col A P Y).

*****
H15 : parallel A D' Y P
H13 : perp P Q A D'
H14 : not (eq r F0)
H11 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H12 : perp Y P P Q
H10 : not (eq P Q)
H9 : not (eq D' Y)
H6 : not (eq A D')
H8 : weak_3_parallelogram A D' D C
H7 : eq (DSeg A D') (DSeg C D)
H5 : Col D' A Y
D' : Point
H4 : not (eq A Y)
H3 : not (eq (DSeg C D) (DSeg A Y))
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
H : and (not (eq P Q))\n (and (perp Y P P Q)\n (and\n (eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y)))\n (not (eq r F0))))
r : F
Y,P,Q,A,C,D : Point
*****
Col A P Y
+++++
assert (Col P A D').
-----
Theorem elim_ratio_on_perp_d_b_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C D -> C<>D -> C**D <>A**Y -> A**Y / C**D = Py A P Q / Py4 C P D Q.
Proof.
intros.
unfold on_perp_d in H.
assert (A<>Y).
assert (T:=on_line_dex_spec_strong_f A Y C D H1 H4).
elim T.
intros D' HD'.
clear T.
decompose [and] HD'.
clear HD'.
rewrite <- H7.
assert (A<>D').
assert (D'<>Y).
rewrite (l_25_b P Q A D' Y H6 H9).
unfold on_inter_line_perp.
decompose [and] H.
repeat split.
intro.
assert (parallel A D' Y P).
assert (Col A P Y).
assert (Col P A D').

*****
H15 : parallel A D' Y P
H13 : perp P Q A D'
H14 : not (eq r F0)
H11 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H12 : perp Y P P Q
H10 : not (eq P Q)
H9 : not (eq D' Y)
H6 : not (eq A D')
H8 : weak_3_parallelogram A D' D C
H7 : eq (DSeg A D') (DSeg C D)
H5 : Col D' A Y
D' : Point
H4 : not (eq A Y)
H3 : not (eq (DSeg C D) (DSeg A Y))
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
H : and (not (eq P Q))\n (and (perp Y P P Q)\n (and\n (eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y)))\n (not (eq r F0))))
r : F
Y,P,Q,A,C,D : Point
*****
Col P A D'
+++++
apply (par_col_col_3 Y P A D').
-----
Theorem elim_ratio_on_perp_d_b_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C D -> C<>D -> C**D <>A**Y -> A**Y / C**D = Py A P Q / Py4 C P D Q.
Proof.
intros.
unfold on_perp_d in H.
assert (A<>Y).
assert (T:=on_line_dex_spec_strong_f A Y C D H1 H4).
elim T.
intros D' HD'.
clear T.
decompose [and] HD'.
clear HD'.
rewrite <- H7.
assert (A<>D').
assert (D'<>Y).
rewrite (l_25_b P Q A D' Y H6 H9).
unfold on_inter_line_perp.
decompose [and] H.
repeat split.
intro.
assert (parallel A D' Y P).
assert (Col A P Y).
assert (Col P A D').
apply (par_col_col_3 Y P A D').

*****
H15 : parallel A D' Y P
H13 : perp P Q A D'
H14 : not (eq r F0)
H11 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H12 : perp Y P P Q
H10 : not (eq P Q)
H9 : not (eq D' Y)
H6 : not (eq A D')
H8 : weak_3_parallelogram A D' D C
H7 : eq (DSeg A D') (DSeg C D)
H5 : Col D' A Y
D' : Point
H4 : not (eq A Y)
H3 : not (eq (DSeg C D) (DSeg A Y))
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
H : and (not (eq P Q))\n (and (perp Y P P Q)\n (and\n (eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y)))\n (not (eq r F0))))
r : F
Y,P,Q,A,C,D : Point
*****
parallel Y P A D'
+++++
auto with Geom.
-----
Theorem elim_ratio_on_perp_d_b_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C D -> C<>D -> C**D <>A**Y -> A**Y / C**D = Py A P Q / Py4 C P D Q.
Proof.
intros.
unfold on_perp_d in H.
assert (A<>Y).
assert (T:=on_line_dex_spec_strong_f A Y C D H1 H4).
elim T.
intros D' HD'.
clear T.
decompose [and] HD'.
clear HD'.
rewrite <- H7.
assert (A<>D').
assert (D'<>Y).
rewrite (l_25_b P Q A D' Y H6 H9).
unfold on_inter_line_perp.
decompose [and] H.
repeat split.
intro.
assert (parallel A D' Y P).
assert (Col A P Y).
assert (Col P A D').
apply (par_col_col_3 Y P A D').

*****
H15 : parallel A D' Y P
H13 : perp P Q A D'
H14 : not (eq r F0)
H11 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H12 : perp Y P P Q
H10 : not (eq P Q)
H9 : not (eq D' Y)
H6 : not (eq A D')
H8 : weak_3_parallelogram A D' D C
H7 : eq (DSeg A D') (DSeg C D)
H5 : Col D' A Y
D' : Point
H4 : not (eq A Y)
H3 : not (eq (DSeg C D) (DSeg A Y))
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
H : and (not (eq P Q))\n (and (perp Y P P Q)\n (and\n (eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y)))\n (not (eq r F0))))
r : F
Y,P,Q,A,C,D : Point
*****
Col Y A D'
+++++
auto with Geom.
-----
Theorem elim_ratio_on_perp_d_b_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C D -> C<>D -> C**D <>A**Y -> A**Y / C**D = Py A P Q / Py4 C P D Q.
Proof.
intros.
unfold on_perp_d in H.
assert (A<>Y).
assert (T:=on_line_dex_spec_strong_f A Y C D H1 H4).
elim T.
intros D' HD'.
clear T.
decompose [and] HD'.
clear HD'.
rewrite <- H7.
assert (A<>D').
assert (D'<>Y).
rewrite (l_25_b P Q A D' Y H6 H9).
unfold on_inter_line_perp.
decompose [and] H.
repeat split.
intro.
assert (parallel A D' Y P).
assert (Col A P Y).
assert (Col P A D').

*****
H16 : Col P A D'
H15 : parallel A D' Y P
H13 : perp P Q A D'
H14 : not (eq r F0)
H11 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H12 : perp Y P P Q
H10 : not (eq P Q)
H9 : not (eq D' Y)
H6 : not (eq A D')
H8 : weak_3_parallelogram A D' D C
H7 : eq (DSeg A D') (DSeg C D)
H5 : Col D' A Y
D' : Point
H4 : not (eq A Y)
H3 : not (eq (DSeg C D) (DSeg A Y))
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
H : and (not (eq P Q))\n (and (perp Y P P Q)\n (and\n (eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y)))\n (not (eq r F0))))
r : F
Y,P,Q,A,C,D : Point
*****
Col A P Y
+++++
assert (parallel Y P A P).
-----
Theorem elim_ratio_on_perp_d_b_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C D -> C<>D -> C**D <>A**Y -> A**Y / C**D = Py A P Q / Py4 C P D Q.
Proof.
intros.
unfold on_perp_d in H.
assert (A<>Y).
assert (T:=on_line_dex_spec_strong_f A Y C D H1 H4).
elim T.
intros D' HD'.
clear T.
decompose [and] HD'.
clear HD'.
rewrite <- H7.
assert (A<>D').
assert (D'<>Y).
rewrite (l_25_b P Q A D' Y H6 H9).
unfold on_inter_line_perp.
decompose [and] H.
repeat split.
intro.
assert (parallel A D' Y P).
assert (Col A P Y).
assert (Col P A D').
assert (parallel Y P A P).

*****
H16 : Col P A D'
H15 : parallel A D' Y P
H13 : perp P Q A D'
H14 : not (eq r F0)
H11 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H12 : perp Y P P Q
H10 : not (eq P Q)
H9 : not (eq D' Y)
H6 : not (eq A D')
H8 : weak_3_parallelogram A D' D C
H7 : eq (DSeg A D') (DSeg C D)
H5 : Col D' A Y
D' : Point
H4 : not (eq A Y)
H3 : not (eq (DSeg C D) (DSeg A Y))
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
H : and (not (eq P Q))\n (and (perp Y P P Q)\n (and\n (eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y)))\n (not (eq r F0))))
r : F
Y,P,Q,A,C,D : Point
*****
parallel Y P A P
+++++
apply (col_par_par Y P A D' P).
-----
Theorem elim_ratio_on_perp_d_b_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C D -> C<>D -> C**D <>A**Y -> A**Y / C**D = Py A P Q / Py4 C P D Q.
Proof.
intros.
unfold on_perp_d in H.
assert (A<>Y).
assert (T:=on_line_dex_spec_strong_f A Y C D H1 H4).
elim T.
intros D' HD'.
clear T.
decompose [and] HD'.
clear HD'.
rewrite <- H7.
assert (A<>D').
assert (D'<>Y).
rewrite (l_25_b P Q A D' Y H6 H9).
unfold on_inter_line_perp.
decompose [and] H.
repeat split.
intro.
assert (parallel A D' Y P).
assert (Col A P Y).
assert (Col P A D').
assert (parallel Y P A P).
apply (col_par_par Y P A D' P).

*****
H16 : Col P A D'
H15 : parallel A D' Y P
H13 : perp P Q A D'
H14 : not (eq r F0)
H11 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H12 : perp Y P P Q
H10 : not (eq P Q)
H9 : not (eq D' Y)
H6 : not (eq A D')
H8 : weak_3_parallelogram A D' D C
H7 : eq (DSeg A D') (DSeg C D)
H5 : Col D' A Y
D' : Point
H4 : not (eq A Y)
H3 : not (eq (DSeg C D) (DSeg A Y))
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
H : and (not (eq P Q))\n (and (perp Y P P Q)\n (and\n (eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y)))\n (not (eq r F0))))
r : F
Y,P,Q,A,C,D : Point
*****
not (eq A D')
+++++
auto with Geom.
-----
Theorem elim_ratio_on_perp_d_b_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C D -> C<>D -> C**D <>A**Y -> A**Y / C**D = Py A P Q / Py4 C P D Q.
Proof.
intros.
unfold on_perp_d in H.
assert (A<>Y).
assert (T:=on_line_dex_spec_strong_f A Y C D H1 H4).
elim T.
intros D' HD'.
clear T.
decompose [and] HD'.
clear HD'.
rewrite <- H7.
assert (A<>D').
assert (D'<>Y).
rewrite (l_25_b P Q A D' Y H6 H9).
unfold on_inter_line_perp.
decompose [and] H.
repeat split.
intro.
assert (parallel A D' Y P).
assert (Col A P Y).
assert (Col P A D').
assert (parallel Y P A P).
apply (col_par_par Y P A D' P).

*****
H16 : Col P A D'
H15 : parallel A D' Y P
H13 : perp P Q A D'
H14 : not (eq r F0)
H11 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H12 : perp Y P P Q
H10 : not (eq P Q)
H9 : not (eq D' Y)
H6 : not (eq A D')
H8 : weak_3_parallelogram A D' D C
H7 : eq (DSeg A D') (DSeg C D)
H5 : Col D' A Y
D' : Point
H4 : not (eq A Y)
H3 : not (eq (DSeg C D) (DSeg A Y))
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
H : and (not (eq P Q))\n (and (perp Y P P Q)\n (and\n (eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y)))\n (not (eq r F0))))
r : F
Y,P,Q,A,C,D : Point
*****
parallel Y P A D'
+++++
auto with Geom.
-----
Theorem elim_ratio_on_perp_d_b_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C D -> C<>D -> C**D <>A**Y -> A**Y / C**D = Py A P Q / Py4 C P D Q.
Proof.
intros.
unfold on_perp_d in H.
assert (A<>Y).
assert (T:=on_line_dex_spec_strong_f A Y C D H1 H4).
elim T.
intros D' HD'.
clear T.
decompose [and] HD'.
clear HD'.
rewrite <- H7.
assert (A<>D').
assert (D'<>Y).
rewrite (l_25_b P Q A D' Y H6 H9).
unfold on_inter_line_perp.
decompose [and] H.
repeat split.
intro.
assert (parallel A D' Y P).
assert (Col A P Y).
assert (Col P A D').
assert (parallel Y P A P).
apply (col_par_par Y P A D' P).

*****
H16 : Col P A D'
H15 : parallel A D' Y P
H13 : perp P Q A D'
H14 : not (eq r F0)
H11 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H12 : perp Y P P Q
H10 : not (eq P Q)
H9 : not (eq D' Y)
H6 : not (eq A D')
H8 : weak_3_parallelogram A D' D C
H7 : eq (DSeg A D') (DSeg C D)
H5 : Col D' A Y
D' : Point
H4 : not (eq A Y)
H3 : not (eq (DSeg C D) (DSeg A Y))
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
H : and (not (eq P Q))\n (and (perp Y P P Q)\n (and\n (eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y)))\n (not (eq r F0))))
r : F
Y,P,Q,A,C,D : Point
*****
Col A D' P
+++++
auto with Geom.
-----
Theorem elim_ratio_on_perp_d_b_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C D -> C<>D -> C**D <>A**Y -> A**Y / C**D = Py A P Q / Py4 C P D Q.
Proof.
intros.
unfold on_perp_d in H.
assert (A<>Y).
assert (T:=on_line_dex_spec_strong_f A Y C D H1 H4).
elim T.
intros D' HD'.
clear T.
decompose [and] HD'.
clear HD'.
rewrite <- H7.
assert (A<>D').
assert (D'<>Y).
rewrite (l_25_b P Q A D' Y H6 H9).
unfold on_inter_line_perp.
decompose [and] H.
repeat split.
intro.
assert (parallel A D' Y P).
assert (Col A P Y).
assert (Col P A D').
assert (parallel Y P A P).

*****
H17 : parallel Y P A P
H16 : Col P A D'
H15 : parallel A D' Y P
H13 : perp P Q A D'
H14 : not (eq r F0)
H11 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H12 : perp Y P P Q
H10 : not (eq P Q)
H9 : not (eq D' Y)
H6 : not (eq A D')
H8 : weak_3_parallelogram A D' D C
H7 : eq (DSeg A D') (DSeg C D)
H5 : Col D' A Y
D' : Point
H4 : not (eq A Y)
H3 : not (eq (DSeg C D) (DSeg A Y))
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
H : and (not (eq P Q))\n (and (perp Y P P Q)\n (and\n (eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y)))\n (not (eq r F0))))
r : F
Y,P,Q,A,C,D : Point
*****
Col A P Y
+++++
unfold parallel in H17.
-----
Theorem elim_ratio_on_perp_d_b_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C D -> C<>D -> C**D <>A**Y -> A**Y / C**D = Py A P Q / Py4 C P D Q.
Proof.
intros.
unfold on_perp_d in H.
assert (A<>Y).
assert (T:=on_line_dex_spec_strong_f A Y C D H1 H4).
elim T.
intros D' HD'.
clear T.
decompose [and] HD'.
clear HD'.
rewrite <- H7.
assert (A<>D').
assert (D'<>Y).
rewrite (l_25_b P Q A D' Y H6 H9).
unfold on_inter_line_perp.
decompose [and] H.
repeat split.
intro.
assert (parallel A D' Y P).
assert (Col A P Y).
assert (Col P A D').
assert (parallel Y P A P).
unfold parallel in H17.

*****
H17 : eq (S4 Y A P P) F0
H16 : Col P A D'
H15 : parallel A D' Y P
H13 : perp P Q A D'
H14 : not (eq r F0)
H11 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H12 : perp Y P P Q
H10 : not (eq P Q)
H9 : not (eq D' Y)
H6 : not (eq A D')
H8 : weak_3_parallelogram A D' D C
H7 : eq (DSeg A D') (DSeg C D)
H5 : Col D' A Y
D' : Point
H4 : not (eq A Y)
H3 : not (eq (DSeg C D) (DSeg A Y))
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
H : and (not (eq P Q))\n (and (perp Y P P Q)\n (and\n (eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y)))\n (not (eq r F0))))
r : F
Y,P,Q,A,C,D : Point
*****
Col A P Y
+++++
unfold S4 in H17.
-----
Theorem elim_ratio_on_perp_d_b_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C D -> C<>D -> C**D <>A**Y -> A**Y / C**D = Py A P Q / Py4 C P D Q.
Proof.
intros.
unfold on_perp_d in H.
assert (A<>Y).
assert (T:=on_line_dex_spec_strong_f A Y C D H1 H4).
elim T.
intros D' HD'.
clear T.
decompose [and] HD'.
clear HD'.
rewrite <- H7.
assert (A<>D').
assert (D'<>Y).
rewrite (l_25_b P Q A D' Y H6 H9).
unfold on_inter_line_perp.
decompose [and] H.
repeat split.
intro.
assert (parallel A D' Y P).
assert (Col A P Y).
assert (Col P A D').
assert (parallel Y P A P).
unfold parallel in H17.
unfold S4 in H17.

*****
H17 : eq (Fplus (S Y A P) (S Y P P)) F0
H16 : Col P A D'
H15 : parallel A D' Y P
H13 : perp P Q A D'
H14 : not (eq r F0)
H11 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H12 : perp Y P P Q
H10 : not (eq P Q)
H9 : not (eq D' Y)
H6 : not (eq A D')
H8 : weak_3_parallelogram A D' D C
H7 : eq (DSeg A D') (DSeg C D)
H5 : Col D' A Y
D' : Point
H4 : not (eq A Y)
H3 : not (eq (DSeg C D) (DSeg A Y))
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
H : and (not (eq P Q))\n (and (perp Y P P Q)\n (and\n (eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y)))\n (not (eq r F0))))
r : F
Y,P,Q,A,C,D : Point
*****
Col A P Y
+++++
basic_simpl.
-----
Theorem elim_ratio_on_perp_d_b_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C D -> C<>D -> C**D <>A**Y -> A**Y / C**D = Py A P Q / Py4 C P D Q.
Proof.
intros.
unfold on_perp_d in H.
assert (A<>Y).
assert (T:=on_line_dex_spec_strong_f A Y C D H1 H4).
elim T.
intros D' HD'.
clear T.
decompose [and] HD'.
clear HD'.
rewrite <- H7.
assert (A<>D').
assert (D'<>Y).
rewrite (l_25_b P Q A D' Y H6 H9).
unfold on_inter_line_perp.
decompose [and] H.
repeat split.
intro.
assert (parallel A D' Y P).
assert (Col A P Y).
assert (Col P A D').
assert (parallel Y P A P).
unfold parallel in H17.
unfold S4 in H17.
basic_simpl.

*****
H17 : eq (S Y A P) F0
H16 : Col P A D'
H15 : parallel A D' Y P
H13 : perp P Q A D'
H14 : not (eq r F0)
H11 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H12 : perp Y P P Q
H10 : not (eq P Q)
H9 : not (eq D' Y)
H6 : not (eq A D')
H8 : weak_3_parallelogram A D' D C
H7 : eq (DSeg A D') (DSeg C D)
H5 : Col D' A Y
D' : Point
H4 : not (eq A Y)
H3 : not (eq (DSeg C D) (DSeg A Y))
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
H : and (not (eq P Q))\n (and (perp Y P P Q)\n (and\n (eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y)))\n (not (eq r F0))))
r : F
Y,P,Q,A,C,D : Point
*****
Col A P Y
+++++
auto with Geom.
-----
Theorem elim_ratio_on_perp_d_b_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C D -> C<>D -> C**D <>A**Y -> A**Y / C**D = Py A P Q / Py4 C P D Q.
Proof.
intros.
unfold on_perp_d in H.
assert (A<>Y).
assert (T:=on_line_dex_spec_strong_f A Y C D H1 H4).
elim T.
intros D' HD'.
clear T.
decompose [and] HD'.
clear HD'.
rewrite <- H7.
assert (A<>D').
assert (D'<>Y).
rewrite (l_25_b P Q A D' Y H6 H9).
unfold on_inter_line_perp.
decompose [and] H.
repeat split.
intro.
assert (parallel A D' Y P).
assert (Col A P Y).

*****
H16 : Col A P Y
H15 : parallel A D' Y P
H13 : perp P Q A D'
H14 : not (eq r F0)
H11 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H12 : perp Y P P Q
H10 : not (eq P Q)
H9 : not (eq D' Y)
H6 : not (eq A D')
H8 : weak_3_parallelogram A D' D C
H7 : eq (DSeg A D') (DSeg C D)
H5 : Col D' A Y
D' : Point
H4 : not (eq A Y)
H3 : not (eq (DSeg C D) (DSeg A Y))
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
H : and (not (eq P Q))\n (and (perp Y P P Q)\n (and\n (eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y)))\n (not (eq r F0))))
r : F
Y,P,Q,A,C,D : Point
*****
False
+++++
intuition.
-----
Theorem elim_ratio_on_perp_d_b_aux : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C D -> C<>D -> C**D <>A**Y -> A**Y / C**D = Py A P Q / Py4 C P D Q.
Proof.
intros.
unfold on_perp_d in H.
assert (A<>Y).

*****

*****

+++++
Qed.
-----
Theorem elim_ratio_on_perp_d_b_invariant :\n forall Y P Q A C D : Point, forall r: F,\n on_perp_d Y P Q r ->\n ~ Col A P Y ->\n parallel A Y C D ->\n C<>D ->\n Py4 C P D Q <> 0.
-----
Theorem elim_ratio_on_perp_d_b_invariant : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r -> ~ Col A P Y -> parallel A Y C D -> C<>D -> Py4 C P D Q <> 0.

*****

*****
forall (Y P Q A C D : Point) (r : F) (_ : on_perp_d Y P Q r) (_ : not (Col A P Y)) (_ : parallel A Y C D) (_ : not (eq C D)), not (eq (Py4 C P D Q) F0)
+++++
Proof.
-----
Theorem elim_ratio_on_perp_d_b_invariant : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r -> ~ Col A P Y -> parallel A Y C D -> C<>D -> Py4 C P D Q <> 0.
Proof.

*****

*****
forall (Y P Q A C D : Point) (r : F) (_ : on_perp_d Y P Q r) (_ : not (Col A P Y)) (_ : parallel A Y C D) (_ : not (eq C D)), not (eq (Py4 C P D Q) F0)
+++++
intros.
-----
Theorem elim_ratio_on_perp_d_b_invariant : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r -> ~ Col A P Y -> parallel A Y C D -> C<>D -> Py4 C P D Q <> 0.
Proof.
intros.

*****
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C,D : Point
*****
not (eq (Py4 C P D Q) F0)
+++++
unfold on_perp_d in H.
-----
Theorem elim_ratio_on_perp_d_b_invariant : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r -> ~ Col A P Y -> parallel A Y C D -> C<>D -> Py4 C P D Q <> 0.
Proof.
intros.
unfold on_perp_d in H.

*****
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
H : and (not (eq P Q))\n (and (perp Y P P Q)\n (and\n (eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y)))\n (not (eq r F0))))
r : F
Y,P,Q,A,C,D : Point
*****
not (eq (Py4 C P D Q) F0)
+++++
use H.
-----
Theorem elim_ratio_on_perp_d_b_invariant : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r -> ~ Col A P Y -> parallel A Y C D -> C<>D -> Py4 C P D Q <> 0.
Proof.
intros.
unfold on_perp_d in H.
use H.

*****
H7 : not (eq r F0)
H4 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H5 : perp Y P P Q
H3 : not (eq P Q)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
r : F
Y,P,Q,A,C,D : Point
*****
not (eq (Py4 C P D Q) F0)
+++++
intro.
-----
Theorem elim_ratio_on_perp_d_b_invariant : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r -> ~ Col A P Y -> parallel A Y C D -> C<>D -> Py4 C P D Q <> 0.
Proof.
intros.
unfold on_perp_d in H.
use H.
intro.

*****
H : eq (Py4 C P D Q) F0
H7 : not (eq r F0)
H4 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H5 : perp Y P P Q
H3 : not (eq P Q)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
r : F
Y,P,Q,A,C,D : Point
*****
False
+++++
assert (perp C D P Q).
-----
Theorem elim_ratio_on_perp_d_b_invariant : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r -> ~ Col A P Y -> parallel A Y C D -> C<>D -> Py4 C P D Q <> 0.
Proof.
intros.
unfold on_perp_d in H.
use H.
intro.
assert (perp C D P Q).

*****
H : eq (Py4 C P D Q) F0
H7 : not (eq r F0)
H4 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H5 : perp Y P P Q
H3 : not (eq P Q)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
r : F
Y,P,Q,A,C,D : Point
*****
perp C D P Q
+++++
auto with Geom.
-----
Theorem elim_ratio_on_perp_d_b_invariant : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r -> ~ Col A P Y -> parallel A Y C D -> C<>D -> Py4 C P D Q <> 0.
Proof.
intros.
unfold on_perp_d in H.
use H.
intro.
assert (perp C D P Q).

*****
H6 : perp C D P Q
H : eq (Py4 C P D Q) F0
H7 : not (eq r F0)
H4 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H5 : perp Y P P Q
H3 : not (eq P Q)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
r : F
Y,P,Q,A,C,D : Point
*****
False
+++++
idtac.
-----
Theorem elim_ratio_on_perp_d_b_invariant : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r -> ~ Col A P Y -> parallel A Y C D -> C<>D -> Py4 C P D Q <> 0.
Proof.
intros.
unfold on_perp_d in H.
use H.
intro.
assert (perp C D P Q).
idtac.

*****
H6 : perp C D P Q
H : eq (Py4 C P D Q) F0
H7 : not (eq r F0)
H4 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H5 : perp Y P P Q
H3 : not (eq P Q)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
r : F
Y,P,Q,A,C,D : Point
*****
False
+++++
clear H.
-----
Theorem elim_ratio_on_perp_d_b_invariant : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r -> ~ Col A P Y -> parallel A Y C D -> C<>D -> Py4 C P D Q <> 0.
Proof.
intros.
unfold on_perp_d in H.
use H.
intro.
assert (perp C D P Q).
idtac.
clear H.

*****
H6 : perp C D P Q
H7 : not (eq r F0)
H4 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H5 : perp Y P P Q
H3 : not (eq P Q)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
r : F
Y,P,Q,A,C,D : Point
*****
False
+++++
assert (parallel Y P C D).
-----
Theorem elim_ratio_on_perp_d_b_invariant : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r -> ~ Col A P Y -> parallel A Y C D -> C<>D -> Py4 C P D Q <> 0.
Proof.
intros.
unfold on_perp_d in H.
use H.
intro.
assert (perp C D P Q).
idtac.
clear H.
assert (parallel Y P C D).

*****
H6 : perp C D P Q
H7 : not (eq r F0)
H4 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H5 : perp Y P P Q
H3 : not (eq P Q)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
r : F
Y,P,Q,A,C,D : Point
*****
parallel Y P C D
+++++
eapply perp_perp_para.
-----
Theorem elim_ratio_on_perp_d_b_invariant : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r -> ~ Col A P Y -> parallel A Y C D -> C<>D -> Py4 C P D Q <> 0.
Proof.
intros.
unfold on_perp_d in H.
use H.
intro.
assert (perp C D P Q).
idtac.
clear H.
assert (parallel Y P C D).
eapply perp_perp_para.

*****
H6 : perp C D P Q
H7 : not (eq r F0)
H4 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H5 : perp Y P P Q
H3 : not (eq P Q)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
r : F
Y,P,Q,A,C,D : Point
*****
not (eq ?C ?D)
+++++
eauto.
-----
Theorem elim_ratio_on_perp_d_b_invariant : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r -> ~ Col A P Y -> parallel A Y C D -> C<>D -> Py4 C P D Q <> 0.
Proof.
intros.
unfold on_perp_d in H.
use H.
intro.
assert (perp C D P Q).
idtac.
clear H.
assert (parallel Y P C D).
eapply perp_perp_para.

*****
H6 : perp C D P Q
H7 : not (eq r F0)
H4 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H5 : perp Y P P Q
H3 : not (eq P Q)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
r : F
Y,P,Q,A,C,D : Point
*****
perp Y P P Q
+++++
eauto.
-----
Theorem elim_ratio_on_perp_d_b_invariant : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r -> ~ Col A P Y -> parallel A Y C D -> C<>D -> Py4 C P D Q <> 0.
Proof.
intros.
unfold on_perp_d in H.
use H.
intro.
assert (perp C D P Q).
idtac.
clear H.
assert (parallel Y P C D).
eapply perp_perp_para.

*****
H6 : perp C D P Q
H7 : not (eq r F0)
H4 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H5 : perp Y P P Q
H3 : not (eq P Q)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
r : F
Y,P,Q,A,C,D : Point
*****
perp C D P Q
+++++
eauto.
-----
Theorem elim_ratio_on_perp_d_b_invariant : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r -> ~ Col A P Y -> parallel A Y C D -> C<>D -> Py4 C P D Q <> 0.
Proof.
intros.
unfold on_perp_d in H.
use H.
intro.
assert (perp C D P Q).
idtac.
clear H.
assert (parallel Y P C D).

*****
H : parallel Y P C D
H6 : perp C D P Q
H7 : not (eq r F0)
H4 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H5 : perp Y P P Q
H3 : not (eq P Q)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
r : F
Y,P,Q,A,C,D : Point
*****
False
+++++
idtac.
-----
Theorem elim_ratio_on_perp_d_b_invariant : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r -> ~ Col A P Y -> parallel A Y C D -> C<>D -> Py4 C P D Q <> 0.
Proof.
intros.
unfold on_perp_d in H.
use H.
intro.
assert (perp C D P Q).
idtac.
clear H.
assert (parallel Y P C D).
idtac.

*****
H : parallel Y P C D
H6 : perp C D P Q
H7 : not (eq r F0)
H4 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H5 : perp Y P P Q
H3 : not (eq P Q)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
r : F
Y,P,Q,A,C,D : Point
*****
False
+++++
assert (parallel Y P A Y).
-----
Theorem elim_ratio_on_perp_d_b_invariant : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r -> ~ Col A P Y -> parallel A Y C D -> C<>D -> Py4 C P D Q <> 0.
Proof.
intros.
unfold on_perp_d in H.
use H.
intro.
assert (perp C D P Q).
idtac.
clear H.
assert (parallel Y P C D).
idtac.
assert (parallel Y P A Y).

*****
H : parallel Y P C D
H6 : perp C D P Q
H7 : not (eq r F0)
H4 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H5 : perp Y P P Q
H3 : not (eq P Q)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
r : F
Y,P,Q,A,C,D : Point
*****
parallel Y P A Y
+++++
apply (parallel_transitivity Y P C D A Y).
-----
Theorem elim_ratio_on_perp_d_b_invariant : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r -> ~ Col A P Y -> parallel A Y C D -> C<>D -> Py4 C P D Q <> 0.
Proof.
intros.
unfold on_perp_d in H.
use H.
intro.
assert (perp C D P Q).
idtac.
clear H.
assert (parallel Y P C D).
idtac.
assert (parallel Y P A Y).
apply (parallel_transitivity Y P C D A Y).

*****
H : parallel Y P C D
H6 : perp C D P Q
H7 : not (eq r F0)
H4 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H5 : perp Y P P Q
H3 : not (eq P Q)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
r : F
Y,P,Q,A,C,D : Point
*****
not (eq C D)
+++++
auto with Geom.
-----
Theorem elim_ratio_on_perp_d_b_invariant : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r -> ~ Col A P Y -> parallel A Y C D -> C<>D -> Py4 C P D Q <> 0.
Proof.
intros.
unfold on_perp_d in H.
use H.
intro.
assert (perp C D P Q).
idtac.
clear H.
assert (parallel Y P C D).
idtac.
assert (parallel Y P A Y).
apply (parallel_transitivity Y P C D A Y).

*****
H : parallel Y P C D
H6 : perp C D P Q
H7 : not (eq r F0)
H4 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H5 : perp Y P P Q
H3 : not (eq P Q)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
r : F
Y,P,Q,A,C,D : Point
*****
parallel Y P C D
+++++
auto with Geom.
-----
Theorem elim_ratio_on_perp_d_b_invariant : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r -> ~ Col A P Y -> parallel A Y C D -> C<>D -> Py4 C P D Q <> 0.
Proof.
intros.
unfold on_perp_d in H.
use H.
intro.
assert (perp C D P Q).
idtac.
clear H.
assert (parallel Y P C D).
idtac.
assert (parallel Y P A Y).
apply (parallel_transitivity Y P C D A Y).

*****
H : parallel Y P C D
H6 : perp C D P Q
H7 : not (eq r F0)
H4 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H5 : perp Y P P Q
H3 : not (eq P Q)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
r : F
Y,P,Q,A,C,D : Point
*****
parallel C D A Y
+++++
auto with Geom.
-----
Theorem elim_ratio_on_perp_d_b_invariant : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r -> ~ Col A P Y -> parallel A Y C D -> C<>D -> Py4 C P D Q <> 0.
Proof.
intros.
unfold on_perp_d in H.
use H.
intro.
assert (perp C D P Q).
idtac.
clear H.
assert (parallel Y P C D).
idtac.
assert (parallel Y P A Y).

*****
H8 : parallel Y P A Y
H : parallel Y P C D
H6 : perp C D P Q
H7 : not (eq r F0)
H4 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H5 : perp Y P P Q
H3 : not (eq P Q)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
r : F
Y,P,Q,A,C,D : Point
*****
False
+++++
idtac.
-----
Theorem elim_ratio_on_perp_d_b_invariant : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r -> ~ Col A P Y -> parallel A Y C D -> C<>D -> Py4 C P D Q <> 0.
Proof.
intros.
unfold on_perp_d in H.
use H.
intro.
assert (perp C D P Q).
idtac.
clear H.
assert (parallel Y P C D).
idtac.
assert (parallel Y P A Y).
idtac.

*****
H8 : parallel Y P A Y
H : parallel Y P C D
H6 : perp C D P Q
H7 : not (eq r F0)
H4 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H5 : perp Y P P Q
H3 : not (eq P Q)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
r : F
Y,P,Q,A,C,D : Point
*****
False
+++++
assert (Col A P Y).
-----
Theorem elim_ratio_on_perp_d_b_invariant : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r -> ~ Col A P Y -> parallel A Y C D -> C<>D -> Py4 C P D Q <> 0.
Proof.
intros.
unfold on_perp_d in H.
use H.
intro.
assert (perp C D P Q).
idtac.
clear H.
assert (parallel Y P C D).
idtac.
assert (parallel Y P A Y).
idtac.
assert (Col A P Y).

*****
H8 : parallel Y P A Y
H : parallel Y P C D
H6 : perp C D P Q
H7 : not (eq r F0)
H4 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H5 : perp Y P P Q
H3 : not (eq P Q)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
r : F
Y,P,Q,A,C,D : Point
*****
Col A P Y
+++++
unfold parallel in *.
-----
Theorem elim_ratio_on_perp_d_b_invariant : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r -> ~ Col A P Y -> parallel A Y C D -> C<>D -> Py4 C P D Q <> 0.
Proof.
intros.
unfold on_perp_d in H.
use H.
intro.
assert (perp C D P Q).
idtac.
clear H.
assert (parallel Y P C D).
idtac.
assert (parallel Y P A Y).
idtac.
assert (Col A P Y).
unfold parallel in *.

*****
H8 : eq (S4 Y A P Y) F0
H : eq (S4 Y C P D) F0
H6 : perp C D P Q
H7 : not (eq r F0)
H4 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H5 : perp Y P P Q
H3 : not (eq P Q)
H2 : not (eq C D)
H1 : eq (S4 A C Y D) F0
H0 : not (Col A P Y)
r : F
Y,P,Q,A,C,D : Point
*****
Col A P Y
+++++
basic_simpl.
-----
Theorem elim_ratio_on_perp_d_b_invariant : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r -> ~ Col A P Y -> parallel A Y C D -> C<>D -> Py4 C P D Q <> 0.
Proof.
intros.
unfold on_perp_d in H.
use H.
intro.
assert (perp C D P Q).
idtac.
clear H.
assert (parallel Y P C D).
idtac.
assert (parallel Y P A Y).
idtac.
assert (Col A P Y).
unfold parallel in *.
basic_simpl.

*****
H8 : eq (S Y A P) F0
H : eq (S4 Y C P D) F0
H6 : perp C D P Q
H7 : not (eq r F0)
H4 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H5 : perp Y P P Q
H3 : not (eq P Q)
H2 : not (eq C D)
H1 : eq (S4 A C Y D) F0
H0 : not (Col A P Y)
r : F
Y,P,Q,A,C,D : Point
*****
Col A P Y
+++++
auto with Geom.
-----
Theorem elim_ratio_on_perp_d_b_invariant : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r -> ~ Col A P Y -> parallel A Y C D -> C<>D -> Py4 C P D Q <> 0.
Proof.
intros.
unfold on_perp_d in H.
use H.
intro.
assert (perp C D P Q).
idtac.
clear H.
assert (parallel Y P C D).
idtac.
assert (parallel Y P A Y).
idtac.
assert (Col A P Y).

*****
H9 : Col A P Y
H8 : parallel Y P A Y
H : parallel Y P C D
H6 : perp C D P Q
H7 : not (eq r F0)
H4 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H5 : perp Y P P Q
H3 : not (eq P Q)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
r : F
Y,P,Q,A,C,D : Point
*****
False
+++++
intuition.
-----
Theorem elim_ratio_on_perp_d_b_invariant : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r -> ~ Col A P Y -> parallel A Y C D -> C<>D -> Py4 C P D Q <> 0.
Proof.
intros.
unfold on_perp_d in H.
use H.
intro.
assert (perp C D P Q).

*****

*****

+++++
Qed.
-----
Theorem elim_ratio_on_perp_d_b :\n forall Y P Q A C D : Point, forall r: F,\n on_perp_d Y P Q r->\n ~ Col A P Y  ->\n parallel A Y C D ->\n C<>D ->\n A**Y / C**D = Py A P Q / Py4 C P D Q.
-----
Theorem elim_ratio_on_perp_d_b : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C D -> C<>D -> A**Y / C**D = Py A P Q / Py4 C P D Q.

*****

*****
forall (Y P Q A C D : Point) (r : F) (_ : on_perp_d Y P Q r) (_ : not (Col A P Y)) (_ : parallel A Y C D) (_ : not (eq C D)), eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (Py A P Q) (Py4 C P D Q))
+++++
Proof.
-----
Theorem elim_ratio_on_perp_d_b : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C D -> C<>D -> A**Y / C**D = Py A P Q / Py4 C P D Q.
Proof.

*****

*****
forall (Y P Q A C D : Point) (r : F) (_ : on_perp_d Y P Q r) (_ : not (Col A P Y)) (_ : parallel A Y C D) (_ : not (eq C D)), eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (Py A P Q) (Py4 C P D Q))
+++++
intros.
-----
Theorem elim_ratio_on_perp_d_b : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C D -> C<>D -> A**Y / C**D = Py A P Q / Py4 C P D Q.
Proof.
intros.

*****
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C,D : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (Py A P Q) (Py4 C P D Q))
+++++
elim (classic (A**Y=C**D)).
-----
Theorem elim_ratio_on_perp_d_b : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C D -> C<>D -> A**Y / C**D = Py A P Q / Py4 C P D Q.
Proof.
intros.
elim (classic (A**Y=C**D)).

*****
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C,D : Point
*****
forall _ : eq (DSeg A Y) (DSeg C D), eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (Py A P Q) (Py4 C P D Q))
+++++
intro.
-----
Theorem elim_ratio_on_perp_d_b : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C D -> C<>D -> A**Y / C**D = Py A P Q / Py4 C P D Q.
Proof.
intros.
elim (classic (A**Y=C**D)).
intro.

*****
H3 : eq (DSeg A Y) (DSeg C D)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C,D : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (Py A P Q) (Py4 C P D Q))
+++++
assert (on_parallel_d Y A C D 1).
-----
Theorem elim_ratio_on_perp_d_b : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C D -> C<>D -> A**Y / C**D = Py A P Q / Py4 C P D Q.
Proof.
intros.
elim (classic (A**Y=C**D)).
intro.
assert (on_parallel_d Y A C D 1).

*****
H3 : eq (DSeg A Y) (DSeg C D)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C,D : Point
*****
on_parallel_d Y A C D F1
+++++
unfold on_parallel_d.
-----
Theorem elim_ratio_on_perp_d_b : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C D -> C<>D -> A**Y / C**D = Py A P Q / Py4 C P D Q.
Proof.
intros.
elim (classic (A**Y=C**D)).
intro.
assert (on_parallel_d Y A C D 1).
unfold on_parallel_d.

*****
H3 : eq (DSeg A Y) (DSeg C D)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C,D : Point
*****
and (not (eq C D)) (and (parallel Y A C D) (eq (DSeg A Y) (Fmult F1 (DSeg C D))))
+++++
repeat split.
-----
Theorem elim_ratio_on_perp_d_b : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C D -> C<>D -> A**Y / C**D = Py A P Q / Py4 C P D Q.
Proof.
intros.
elim (classic (A**Y=C**D)).
intro.
assert (on_parallel_d Y A C D 1).
unfold on_parallel_d.
repeat split.

*****
H3 : eq (DSeg A Y) (DSeg C D)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C,D : Point
*****
not (eq C D)
+++++
auto with Geom.
-----
Theorem elim_ratio_on_perp_d_b : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C D -> C<>D -> A**Y / C**D = Py A P Q / Py4 C P D Q.
Proof.
intros.
elim (classic (A**Y=C**D)).
intro.
assert (on_parallel_d Y A C D 1).
unfold on_parallel_d.
repeat split.

*****
H3 : eq (DSeg A Y) (DSeg C D)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C,D : Point
*****
parallel Y A C D
+++++
auto with Geom.
-----
Theorem elim_ratio_on_perp_d_b : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C D -> C<>D -> A**Y / C**D = Py A P Q / Py4 C P D Q.
Proof.
intros.
elim (classic (A**Y=C**D)).
intro.
assert (on_parallel_d Y A C D 1).
unfold on_parallel_d.
repeat split.

*****
H3 : eq (DSeg A Y) (DSeg C D)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C,D : Point
*****
eq (DSeg A Y) (Fmult F1 (DSeg C D))
+++++
auto with Geom.
-----
Theorem elim_ratio_on_perp_d_b : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C D -> C<>D -> A**Y / C**D = Py A P Q / Py4 C P D Q.
Proof.
intros.
elim (classic (A**Y=C**D)).
intro.
assert (on_parallel_d Y A C D 1).
unfold on_parallel_d.
repeat split.
auto with Geom.

*****
H3 : eq (DSeg A Y) (DSeg C D)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C,D : Point
*****
eq (DSeg A Y) (Fmult F1 (DSeg C D))
+++++
ring_simplify.
-----
Theorem elim_ratio_on_perp_d_b : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C D -> C<>D -> A**Y / C**D = Py A P Q / Py4 C P D Q.
Proof.
intros.
elim (classic (A**Y=C**D)).
intro.
assert (on_parallel_d Y A C D 1).
unfold on_parallel_d.
repeat split.
auto with Geom.
ring_simplify.

*****
H3 : eq (DSeg A Y) (DSeg C D)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C,D : Point
*****
eq (DSeg A Y) (DSeg C D)
+++++
auto.
-----
Theorem elim_ratio_on_perp_d_b : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C D -> C<>D -> A**Y / C**D = Py A P Q / Py4 C P D Q.
Proof.
intros.
elim (classic (A**Y=C**D)).
intro.
assert (on_parallel_d Y A C D 1).

*****
H4 : on_parallel_d Y A C D F1
H3 : eq (DSeg A Y) (DSeg C D)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C,D : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (Py A P Q) (Py4 C P D Q))
+++++
rewrite H3.
-----
Theorem elim_ratio_on_perp_d_b : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C D -> C<>D -> A**Y / C**D = Py A P Q / Py4 C P D Q.
Proof.
intros.
elim (classic (A**Y=C**D)).
intro.
assert (on_parallel_d Y A C D 1).
rewrite H3.

*****
H4 : on_parallel_d Y A C D F1
H3 : eq (DSeg A Y) (DSeg C D)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C,D : Point
*****
eq (Fdiv (DSeg C D) (DSeg C D)) (Fdiv (Py A P Q) (Py4 C P D Q))
+++++
replace (C ** D / C ** D) with 1 by (field;auto with Geom).
-----
Theorem elim_ratio_on_perp_d_b : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C D -> C<>D -> A**Y / C**D = Py A P Q / Py4 C P D Q.
Proof.
intros.
elim (classic (A**Y=C**D)).
intro.
assert (on_parallel_d Y A C D 1).
rewrite H3.
replace (C ** D / C ** D) with 1 by (field;auto with Geom).

*****
H4 : on_parallel_d Y A C D F1
H3 : eq (DSeg A Y) (DSeg C D)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C,D : Point
*****
eq F1 (Fdiv (Py A P Q) (Py4 C P D Q))
+++++
assert (T:=elim_ratio_on_perp_d_b_auxi A Y C D P Q H4).
-----
Theorem elim_ratio_on_perp_d_b : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C D -> C<>D -> A**Y / C**D = Py A P Q / Py4 C P D Q.
Proof.
intros.
elim (classic (A**Y=C**D)).
intro.
assert (on_parallel_d Y A C D 1).
rewrite H3.
replace (C ** D / C ** D) with 1 by (field;auto with Geom).
assert (T:=elim_ratio_on_perp_d_b_auxi A Y C D P Q H4).

*****
T : eq (Fminus (Py C P Q) (Py D P Q)) (Fminus (Py A P Q) (Py Y P Q))
H4 : on_parallel_d Y A C D F1
H3 : eq (DSeg A Y) (DSeg C D)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C,D : Point
*****
eq F1 (Fdiv (Py A P Q) (Py4 C P D Q))
+++++
assert (Py A P Q = Py4 C P D Q).
-----
Theorem elim_ratio_on_perp_d_b : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C D -> C<>D -> A**Y / C**D = Py A P Q / Py4 C P D Q.
Proof.
intros.
elim (classic (A**Y=C**D)).
intro.
assert (on_parallel_d Y A C D 1).
rewrite H3.
replace (C ** D / C ** D) with 1 by (field;auto with Geom).
assert (T:=elim_ratio_on_perp_d_b_auxi A Y C D P Q H4).
assert (Py A P Q = Py4 C P D Q).

*****
T : eq (Fminus (Py C P Q) (Py D P Q)) (Fminus (Py A P Q) (Py Y P Q))
H4 : on_parallel_d Y A C D F1
H3 : eq (DSeg A Y) (DSeg C D)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C,D : Point
*****
eq (Py A P Q) (Py4 C P D Q)
+++++
unfold Py4.
-----
Theorem elim_ratio_on_perp_d_b : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C D -> C<>D -> A**Y / C**D = Py A P Q / Py4 C P D Q.
Proof.
intros.
elim (classic (A**Y=C**D)).
intro.
assert (on_parallel_d Y A C D 1).
rewrite H3.
replace (C ** D / C ** D) with 1 by (field;auto with Geom).
assert (T:=elim_ratio_on_perp_d_b_auxi A Y C D P Q H4).
assert (Py A P Q = Py4 C P D Q).
unfold Py4.

*****
T : eq (Fminus (Py C P Q) (Py D P Q)) (Fminus (Py A P Q) (Py Y P Q))
H4 : on_parallel_d Y A C D F1
H3 : eq (DSeg A Y) (DSeg C D)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C,D : Point
*****
eq (Py A P Q) (Fminus (Py C P Q) (Py D P Q))
+++++
assert (Py Y P Q = 0).
-----
Theorem elim_ratio_on_perp_d_b : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C D -> C<>D -> A**Y / C**D = Py A P Q / Py4 C P D Q.
Proof.
intros.
elim (classic (A**Y=C**D)).
intro.
assert (on_parallel_d Y A C D 1).
rewrite H3.
replace (C ** D / C ** D) with 1 by (field;auto with Geom).
assert (T:=elim_ratio_on_perp_d_b_auxi A Y C D P Q H4).
assert (Py A P Q = Py4 C P D Q).
unfold Py4.
assert (Py Y P Q = 0).

*****
T : eq (Fminus (Py C P Q) (Py D P Q)) (Fminus (Py A P Q) (Py Y P Q))
H4 : on_parallel_d Y A C D F1
H3 : eq (DSeg A Y) (DSeg C D)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C,D : Point
*****
eq (Py Y P Q) F0
+++++
unfold on_perp_d in H.
-----
Theorem elim_ratio_on_perp_d_b : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C D -> C<>D -> A**Y / C**D = Py A P Q / Py4 C P D Q.
Proof.
intros.
elim (classic (A**Y=C**D)).
intro.
assert (on_parallel_d Y A C D 1).
rewrite H3.
replace (C ** D / C ** D) with 1 by (field;auto with Geom).
assert (T:=elim_ratio_on_perp_d_b_auxi A Y C D P Q H4).
assert (Py A P Q = Py4 C P D Q).
unfold Py4.
assert (Py Y P Q = 0).
unfold on_perp_d in H.

*****
T : eq (Fminus (Py C P Q) (Py D P Q)) (Fminus (Py A P Q) (Py Y P Q))
H4 : on_parallel_d Y A C D F1
H3 : eq (DSeg A Y) (DSeg C D)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
H : and (not (eq P Q))\n (and (perp Y P P Q)\n (and\n (eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y)))\n (not (eq r F0))))
r : F
Y,P,Q,A,C,D : Point
*****
eq (Py Y P Q) F0
+++++
use H.
-----
Theorem elim_ratio_on_perp_d_b : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C D -> C<>D -> A**Y / C**D = Py A P Q / Py4 C P D Q.
Proof.
intros.
elim (classic (A**Y=C**D)).
intro.
assert (on_parallel_d Y A C D 1).
rewrite H3.
replace (C ** D / C ** D) with 1 by (field;auto with Geom).
assert (T:=elim_ratio_on_perp_d_b_auxi A Y C D P Q H4).
assert (Py A P Q = Py4 C P D Q).
unfold Py4.
assert (Py Y P Q = 0).
unfold on_perp_d in H.
use H.

*****
H9 : not (eq r F0)
H6 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H7 : perp Y P P Q
H5 : not (eq P Q)
T : eq (Fminus (Py C P Q) (Py D P Q)) (Fminus (Py A P Q) (Py Y P Q))
H4 : on_parallel_d Y A C D F1
H3 : eq (DSeg A Y) (DSeg C D)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
r : F
Y,P,Q,A,C,D : Point
*****
eq (Py Y P Q) F0
+++++
unfold perp in *.
-----
Theorem elim_ratio_on_perp_d_b : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C D -> C<>D -> A**Y / C**D = Py A P Q / Py4 C P D Q.
Proof.
intros.
elim (classic (A**Y=C**D)).
intro.
assert (on_parallel_d Y A C D 1).
rewrite H3.
replace (C ** D / C ** D) with 1 by (field;auto with Geom).
assert (T:=elim_ratio_on_perp_d_b_auxi A Y C D P Q H4).
assert (Py A P Q = Py4 C P D Q).
unfold Py4.
assert (Py Y P Q = 0).
unfold on_perp_d in H.
use H.
unfold perp in *.

*****
H9 : not (eq r F0)
H6 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H7 : eq (Py4 Y P P Q) F0
H5 : not (eq P Q)
T : eq (Fminus (Py C P Q) (Py D P Q)) (Fminus (Py A P Q) (Py Y P Q))
H4 : on_parallel_d Y A C D F1
H3 : eq (DSeg A Y) (DSeg C D)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
r : F
Y,P,Q,A,C,D : Point
*****
eq (Py Y P Q) F0
+++++
unfold Py4 in *.
-----
Theorem elim_ratio_on_perp_d_b : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C D -> C<>D -> A**Y / C**D = Py A P Q / Py4 C P D Q.
Proof.
intros.
elim (classic (A**Y=C**D)).
intro.
assert (on_parallel_d Y A C D 1).
rewrite H3.
replace (C ** D / C ** D) with 1 by (field;auto with Geom).
assert (T:=elim_ratio_on_perp_d_b_auxi A Y C D P Q H4).
assert (Py A P Q = Py4 C P D Q).
unfold Py4.
assert (Py Y P Q = 0).
unfold on_perp_d in H.
use H.
unfold perp in *.
unfold Py4 in *.

*****
H9 : not (eq r F0)
H6 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H7 : eq (Fminus (Py Y P Q) (Py P P Q)) F0
H5 : not (eq P Q)
T : eq (Fminus (Py C P Q) (Py D P Q)) (Fminus (Py A P Q) (Py Y P Q))
H4 : on_parallel_d Y A C D F1
H3 : eq (DSeg A Y) (DSeg C D)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
r : F
Y,P,Q,A,C,D : Point
*****
eq (Py Y P Q) F0
+++++
basic_simpl.
-----
Theorem elim_ratio_on_perp_d_b : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C D -> C<>D -> A**Y / C**D = Py A P Q / Py4 C P D Q.
Proof.
intros.
elim (classic (A**Y=C**D)).
intro.
assert (on_parallel_d Y A C D 1).
rewrite H3.
replace (C ** D / C ** D) with 1 by (field;auto with Geom).
assert (T:=elim_ratio_on_perp_d_b_auxi A Y C D P Q H4).
assert (Py A P Q = Py4 C P D Q).
unfold Py4.
assert (Py Y P Q = 0).
unfold on_perp_d in H.
use H.
unfold perp in *.
unfold Py4 in *.
basic_simpl.

*****
H9 : not (eq r F0)
H6 : eq (Fmult r (Py P Q P))\n (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S P Q Y))
H7 : eq (Py Y P Q) F0
H5 : not (eq P Q)
T : eq (Fminus (Py C P Q) (Py D P Q)) (Fminus (Py A P Q) (Py Y P Q))
H4 : on_parallel_d Y A C D F1
H3 : eq (DSeg A Y) (DSeg C D)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
r : F
Y,P,Q,A,C,D : Point
*****
eq (Py Y P Q) F0
+++++
assumption.
-----
Theorem elim_ratio_on_perp_d_b : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C D -> C<>D -> A**Y / C**D = Py A P Q / Py4 C P D Q.
Proof.
intros.
elim (classic (A**Y=C**D)).
intro.
assert (on_parallel_d Y A C D 1).
rewrite H3.
replace (C ** D / C ** D) with 1 by (field;auto with Geom).
assert (T:=elim_ratio_on_perp_d_b_auxi A Y C D P Q H4).
assert (Py A P Q = Py4 C P D Q).
unfold Py4.
assert (Py Y P Q = 0).

*****
H5 : eq (Py Y P Q) F0
T : eq (Fminus (Py C P Q) (Py D P Q)) (Fminus (Py A P Q) (Py Y P Q))
H4 : on_parallel_d Y A C D F1
H3 : eq (DSeg A Y) (DSeg C D)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C,D : Point
*****
eq (Py A P Q) (Fminus (Py C P Q) (Py D P Q))
+++++
rewrite H5 in T.
-----
Theorem elim_ratio_on_perp_d_b : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C D -> C<>D -> A**Y / C**D = Py A P Q / Py4 C P D Q.
Proof.
intros.
elim (classic (A**Y=C**D)).
intro.
assert (on_parallel_d Y A C D 1).
rewrite H3.
replace (C ** D / C ** D) with 1 by (field;auto with Geom).
assert (T:=elim_ratio_on_perp_d_b_auxi A Y C D P Q H4).
assert (Py A P Q = Py4 C P D Q).
unfold Py4.
assert (Py Y P Q = 0).
rewrite H5 in T.

*****
H5 : eq (Py Y P Q) F0
T : eq (Fminus (Py C P Q) (Py D P Q)) (Fminus (Py A P Q) F0)
H4 : on_parallel_d Y A C D F1
H3 : eq (DSeg A Y) (DSeg C D)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C,D : Point
*****
eq (Py A P Q) (Fminus (Py C P Q) (Py D P Q))
+++++
ring_simplify in T.
-----
Theorem elim_ratio_on_perp_d_b : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C D -> C<>D -> A**Y / C**D = Py A P Q / Py4 C P D Q.
Proof.
intros.
elim (classic (A**Y=C**D)).
intro.
assert (on_parallel_d Y A C D 1).
rewrite H3.
replace (C ** D / C ** D) with 1 by (field;auto with Geom).
assert (T:=elim_ratio_on_perp_d_b_auxi A Y C D P Q H4).
assert (Py A P Q = Py4 C P D Q).
unfold Py4.
assert (Py Y P Q = 0).
rewrite H5 in T.
ring_simplify in T.

*****
H5 : eq (Py Y P Q) F0
T : eq (Fminus (Py C P Q) (Py D P Q)) (Py A P Q)
H4 : on_parallel_d Y A C D F1
H3 : eq (DSeg A Y) (DSeg C D)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C,D : Point
*****
eq (Py A P Q) (Fminus (Py C P Q) (Py D P Q))
+++++
rewrite <- T.
-----
Theorem elim_ratio_on_perp_d_b : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C D -> C<>D -> A**Y / C**D = Py A P Q / Py4 C P D Q.
Proof.
intros.
elim (classic (A**Y=C**D)).
intro.
assert (on_parallel_d Y A C D 1).
rewrite H3.
replace (C ** D / C ** D) with 1 by (field;auto with Geom).
assert (T:=elim_ratio_on_perp_d_b_auxi A Y C D P Q H4).
assert (Py A P Q = Py4 C P D Q).
unfold Py4.
assert (Py Y P Q = 0).
rewrite H5 in T.
ring_simplify in T.
rewrite <- T.

*****
H5 : eq (Py Y P Q) F0
T : eq (Fminus (Py C P Q) (Py D P Q)) (Py A P Q)
H4 : on_parallel_d Y A C D F1
H3 : eq (DSeg A Y) (DSeg C D)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C,D : Point
*****
eq (Fminus (Py C P Q) (Py D P Q)) (Fminus (Py C P Q) (Py D P Q))
+++++
ring.
-----
Theorem elim_ratio_on_perp_d_b : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C D -> C<>D -> A**Y / C**D = Py A P Q / Py4 C P D Q.
Proof.
intros.
elim (classic (A**Y=C**D)).
intro.
assert (on_parallel_d Y A C D 1).
rewrite H3.
replace (C ** D / C ** D) with 1 by (field;auto with Geom).
assert (T:=elim_ratio_on_perp_d_b_auxi A Y C D P Q H4).
assert (Py A P Q = Py4 C P D Q).

*****
H5 : eq (Py A P Q) (Py4 C P D Q)
T : eq (Fminus (Py C P Q) (Py D P Q)) (Fminus (Py A P Q) (Py Y P Q))
H4 : on_parallel_d Y A C D F1
H3 : eq (DSeg A Y) (DSeg C D)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C,D : Point
*****
eq F1 (Fdiv (Py A P Q) (Py4 C P D Q))
+++++
rewrite H5.
-----
Theorem elim_ratio_on_perp_d_b : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C D -> C<>D -> A**Y / C**D = Py A P Q / Py4 C P D Q.
Proof.
intros.
elim (classic (A**Y=C**D)).
intro.
assert (on_parallel_d Y A C D 1).
rewrite H3.
replace (C ** D / C ** D) with 1 by (field;auto with Geom).
assert (T:=elim_ratio_on_perp_d_b_auxi A Y C D P Q H4).
assert (Py A P Q = Py4 C P D Q).
rewrite H5.

*****
H5 : eq (Py A P Q) (Py4 C P D Q)
T : eq (Fminus (Py C P Q) (Py D P Q)) (Fminus (Py A P Q) (Py Y P Q))
H4 : on_parallel_d Y A C D F1
H3 : eq (DSeg A Y) (DSeg C D)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C,D : Point
*****
eq F1 (Fdiv (Py4 C P D Q) (Py4 C P D Q))
+++++
field.
-----
Theorem elim_ratio_on_perp_d_b : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C D -> C<>D -> A**Y / C**D = Py A P Q / Py4 C P D Q.
Proof.
intros.
elim (classic (A**Y=C**D)).
intro.
assert (on_parallel_d Y A C D 1).
rewrite H3.
replace (C ** D / C ** D) with 1 by (field;auto with Geom).
assert (T:=elim_ratio_on_perp_d_b_auxi A Y C D P Q H4).
assert (Py A P Q = Py4 C P D Q).
rewrite H5.
field.

*****
H5 : eq (Py A P Q) (Py4 C P D Q)
T : eq (Fminus (Py C P Q) (Py D P Q)) (Fminus (Py A P Q) (Py Y P Q))
H4 : on_parallel_d Y A C D F1
H3 : eq (DSeg A Y) (DSeg C D)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C,D : Point
*****
not (eq (Py4 C P D Q) F0)
+++++
eapply elim_ratio_on_perp_d_b_invariant.
-----
Theorem elim_ratio_on_perp_d_b : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C D -> C<>D -> A**Y / C**D = Py A P Q / Py4 C P D Q.
Proof.
intros.
elim (classic (A**Y=C**D)).
intro.
assert (on_parallel_d Y A C D 1).
rewrite H3.
replace (C ** D / C ** D) with 1 by (field;auto with Geom).
assert (T:=elim_ratio_on_perp_d_b_auxi A Y C D P Q H4).
assert (Py A P Q = Py4 C P D Q).
rewrite H5.
field.
eapply elim_ratio_on_perp_d_b_invariant.

*****
H5 : eq (Py A P Q) (Py4 C P D Q)
T : eq (Fminus (Py C P Q) (Py D P Q)) (Fminus (Py A P Q) (Py Y P Q))
H4 : on_parallel_d Y A C D F1
H3 : eq (DSeg A Y) (DSeg C D)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C,D : Point
*****
on_perp_d ?Y P Q ?r
+++++
eauto.
-----
Theorem elim_ratio_on_perp_d_b : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C D -> C<>D -> A**Y / C**D = Py A P Q / Py4 C P D Q.
Proof.
intros.
elim (classic (A**Y=C**D)).
intro.
assert (on_parallel_d Y A C D 1).
rewrite H3.
replace (C ** D / C ** D) with 1 by (field;auto with Geom).
assert (T:=elim_ratio_on_perp_d_b_auxi A Y C D P Q H4).
assert (Py A P Q = Py4 C P D Q).
rewrite H5.
field.
eapply elim_ratio_on_perp_d_b_invariant.

*****
H5 : eq (Py A P Q) (Py4 C P D Q)
T : eq (Fminus (Py C P Q) (Py D P Q)) (Fminus (Py A P Q) (Py Y P Q))
H4 : on_parallel_d Y A C D F1
H3 : eq (DSeg A Y) (DSeg C D)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C,D : Point
*****
not (Col ?A P Y)
+++++
eauto.
-----
Theorem elim_ratio_on_perp_d_b : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C D -> C<>D -> A**Y / C**D = Py A P Q / Py4 C P D Q.
Proof.
intros.
elim (classic (A**Y=C**D)).
intro.
assert (on_parallel_d Y A C D 1).
rewrite H3.
replace (C ** D / C ** D) with 1 by (field;auto with Geom).
assert (T:=elim_ratio_on_perp_d_b_auxi A Y C D P Q H4).
assert (Py A P Q = Py4 C P D Q).
rewrite H5.
field.
eapply elim_ratio_on_perp_d_b_invariant.

*****
H5 : eq (Py A P Q) (Py4 C P D Q)
T : eq (Fminus (Py C P Q) (Py D P Q)) (Fminus (Py A P Q) (Py Y P Q))
H4 : on_parallel_d Y A C D F1
H3 : eq (DSeg A Y) (DSeg C D)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C,D : Point
*****
parallel A Y C D
+++++
eauto.
-----
Theorem elim_ratio_on_perp_d_b : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C D -> C<>D -> A**Y / C**D = Py A P Q / Py4 C P D Q.
Proof.
intros.
elim (classic (A**Y=C**D)).
intro.
assert (on_parallel_d Y A C D 1).
rewrite H3.
replace (C ** D / C ** D) with 1 by (field;auto with Geom).
assert (T:=elim_ratio_on_perp_d_b_auxi A Y C D P Q H4).
assert (Py A P Q = Py4 C P D Q).
rewrite H5.
field.
eapply elim_ratio_on_perp_d_b_invariant.

*****
H5 : eq (Py A P Q) (Py4 C P D Q)
T : eq (Fminus (Py C P Q) (Py D P Q)) (Fminus (Py A P Q) (Py Y P Q))
H4 : on_parallel_d Y A C D F1
H3 : eq (DSeg A Y) (DSeg C D)
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C,D : Point
*****
not (eq C D)
+++++
eauto.
-----
Theorem elim_ratio_on_perp_d_b : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C D -> C<>D -> A**Y / C**D = Py A P Q / Py4 C P D Q.
Proof.
intros.
elim (classic (A**Y=C**D)).

*****
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C,D : Point
*****
forall _ : not (eq (DSeg A Y) (DSeg C D)), eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (Py A P Q) (Py4 C P D Q))
+++++
intros.
-----
Theorem elim_ratio_on_perp_d_b : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C D -> C<>D -> A**Y / C**D = Py A P Q / Py4 C P D Q.
Proof.
intros.
elim (classic (A**Y=C**D)).
intros.

*****
H3 : not (eq (DSeg A Y) (DSeg C D))
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C,D : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (Py A P Q) (Py4 C P D Q))
+++++
eapply elim_ratio_on_perp_d_b_aux.
-----
Theorem elim_ratio_on_perp_d_b : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C D -> C<>D -> A**Y / C**D = Py A P Q / Py4 C P D Q.
Proof.
intros.
elim (classic (A**Y=C**D)).
intros.
eapply elim_ratio_on_perp_d_b_aux.

*****
H3 : not (eq (DSeg A Y) (DSeg C D))
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C,D : Point
*****
on_perp_d Y P Q ?r
+++++
eauto.
-----
Theorem elim_ratio_on_perp_d_b : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C D -> C<>D -> A**Y / C**D = Py A P Q / Py4 C P D Q.
Proof.
intros.
elim (classic (A**Y=C**D)).
intros.
eapply elim_ratio_on_perp_d_b_aux.

*****
H3 : not (eq (DSeg A Y) (DSeg C D))
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C,D : Point
*****
not (Col A P Y)
+++++
eauto.
-----
Theorem elim_ratio_on_perp_d_b : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C D -> C<>D -> A**Y / C**D = Py A P Q / Py4 C P D Q.
Proof.
intros.
elim (classic (A**Y=C**D)).
intros.
eapply elim_ratio_on_perp_d_b_aux.

*****
H3 : not (eq (DSeg A Y) (DSeg C D))
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C,D : Point
*****
parallel A Y C D
+++++
eauto.
-----
Theorem elim_ratio_on_perp_d_b : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C D -> C<>D -> A**Y / C**D = Py A P Q / Py4 C P D Q.
Proof.
intros.
elim (classic (A**Y=C**D)).
intros.
eapply elim_ratio_on_perp_d_b_aux.

*****
H3 : not (eq (DSeg A Y) (DSeg C D))
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C,D : Point
*****
not (eq C D)
+++++
eauto.
-----
Theorem elim_ratio_on_perp_d_b : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C D -> C<>D -> A**Y / C**D = Py A P Q / Py4 C P D Q.
Proof.
intros.
elim (classic (A**Y=C**D)).
intros.
eapply elim_ratio_on_perp_d_b_aux.

*****
H3 : not (eq (DSeg A Y) (DSeg C D))
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (Col A P Y)
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C,D : Point
*****
not (eq (DSeg C D) (DSeg A Y))
+++++
eauto.
-----
Theorem elim_ratio_on_perp_d_b : forall Y P Q A C D : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C D -> C<>D -> A**Y / C**D = Py A P Q / Py4 C P D Q.
Proof.
intros.
elim (classic (A**Y=C**D)).

*****

*****

+++++
Qed.
-----
Theorem elim_ratio_on_perp_d_spec_b :\n forall Y P Q A C : Point, forall r: F,\n on_perp_d Y P Q r->\n ~ Col A P Y  ->\n parallel A Y C Y ->\n C<>Y ->\n A**Y / C**Y = Py A P Q / Py C P Q.
-----
Theorem elim_ratio_on_perp_d_spec_b : forall Y P Q A C : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C Y -> C<>Y -> A**Y / C**Y = Py A P Q / Py C P Q.

*****

*****
forall (Y P Q A C : Point) (r : F) (_ : on_perp_d Y P Q r) (_ : not (Col A P Y)) (_ : parallel A Y C Y) (_ : not (eq C Y)), eq (Fdiv (DSeg A Y) (DSeg C Y)) (Fdiv (Py A P Q) (Py C P Q))
+++++
Proof.
-----
Theorem elim_ratio_on_perp_d_spec_b : forall Y P Q A C : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C Y -> C<>Y -> A**Y / C**Y = Py A P Q / Py C P Q.
Proof.

*****

*****
forall (Y P Q A C : Point) (r : F) (_ : on_perp_d Y P Q r) (_ : not (Col A P Y)) (_ : parallel A Y C Y) (_ : not (eq C Y)), eq (Fdiv (DSeg A Y) (DSeg C Y)) (Fdiv (Py A P Q) (Py C P Q))
+++++
intros.
-----
Theorem elim_ratio_on_perp_d_spec_b : forall Y P Q A C : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C Y -> C<>Y -> A**Y / C**Y = Py A P Q / Py C P Q.
Proof.
intros.

*****
H2 : not (eq C Y)
H1 : parallel A Y C Y
H0 : not (Col A P Y)
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C Y)) (Fdiv (Py A P Q) (Py C P Q))
+++++
rewrite (elim_ratio_on_perp_d_b Y P Q A C Y r).
-----
Theorem elim_ratio_on_perp_d_spec_b : forall Y P Q A C : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C Y -> C<>Y -> A**Y / C**Y = Py A P Q / Py C P Q.
Proof.
intros.
rewrite (elim_ratio_on_perp_d_b Y P Q A C Y r).

*****
H2 : not (eq C Y)
H1 : parallel A Y C Y
H0 : not (Col A P Y)
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C : Point
*****
eq (Fdiv (Py A P Q) (Py4 C P Y Q)) (Fdiv (Py A P Q) (Py C P Q))
+++++
idtac.
-----
Theorem elim_ratio_on_perp_d_spec_b : forall Y P Q A C : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C Y -> C<>Y -> A**Y / C**Y = Py A P Q / Py C P Q.
Proof.
intros.
rewrite (elim_ratio_on_perp_d_b Y P Q A C Y r).
idtac.

*****
H2 : not (eq C Y)
H1 : parallel A Y C Y
H0 : not (Col A P Y)
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C : Point
*****
eq (Fdiv (Py A P Q) (Py4 C P Y Q)) (Fdiv (Py A P Q) (Py C P Q))
+++++
unfold Py4.
-----
Theorem elim_ratio_on_perp_d_spec_b : forall Y P Q A C : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C Y -> C<>Y -> A**Y / C**Y = Py A P Q / Py C P Q.
Proof.
intros.
rewrite (elim_ratio_on_perp_d_b Y P Q A C Y r).
idtac.
unfold Py4.

*****
H2 : not (eq C Y)
H1 : parallel A Y C Y
H0 : not (Col A P Y)
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C : Point
*****
eq (Fdiv (Py A P Q) (Fminus (Py C P Q) (Py Y P Q))) (Fdiv (Py A P Q) (Py C P Q))
+++++
replace (Py Y P Q) with (Py Q P Y) by auto with Geom.
-----
Theorem elim_ratio_on_perp_d_spec_b : forall Y P Q A C : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C Y -> C<>Y -> A**Y / C**Y = Py A P Q / Py C P Q.
Proof.
intros.
rewrite (elim_ratio_on_perp_d_b Y P Q A C Y r).
idtac.
unfold Py4.
replace (Py Y P Q) with (Py Q P Y) by auto with Geom.

*****
H2 : not (eq C Y)
H1 : parallel A Y C Y
H0 : not (Col A P Y)
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C : Point
*****
eq (Fdiv (Py A P Q) (Fminus (Py C P Q) (Py Q P Y))) (Fdiv (Py A P Q) (Py C P Q))
+++++
rewrite (elim_py_on_perp_d_right Q P P Q Y r).
-----
Theorem elim_ratio_on_perp_d_spec_b : forall Y P Q A C : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C Y -> C<>Y -> A**Y / C**Y = Py A P Q / Py C P Q.
Proof.
intros.
rewrite (elim_ratio_on_perp_d_b Y P Q A C Y r).
idtac.
unfold Py4.
replace (Py Y P Q) with (Py Q P Y) by auto with Geom.
rewrite (elim_py_on_perp_d_right Q P P Q Y r).

*****
H2 : not (eq C Y)
H1 : parallel A Y C Y
H0 : not (Col A P Y)
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C : Point
*****
eq (Fdiv (Py A P Q) (Fminus (Py C P Q) (Fminus (Py Q P P) (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) r) (S4 P Q Q P))))) (Fdiv (Py A P Q) (Py C P Q))
+++++
idtac.
-----
Theorem elim_ratio_on_perp_d_spec_b : forall Y P Q A C : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C Y -> C<>Y -> A**Y / C**Y = Py A P Q / Py C P Q.
Proof.
intros.
rewrite (elim_ratio_on_perp_d_b Y P Q A C Y r).
idtac.
unfold Py4.
replace (Py Y P Q) with (Py Q P Y) by auto with Geom.
rewrite (elim_py_on_perp_d_right Q P P Q Y r).
idtac.

*****
H2 : not (eq C Y)
H1 : parallel A Y C Y
H0 : not (Col A P Y)
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C : Point
*****
eq (Fdiv (Py A P Q) (Fminus (Py C P Q) (Fminus (Py Q P P) (Fmult (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) r) (S4 P Q Q P))))) (Fdiv (Py A P Q) (Py C P Q))
+++++
basic_simpl.
-----
Theorem elim_ratio_on_perp_d_spec_b : forall Y P Q A C : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C Y -> C<>Y -> A**Y / C**Y = Py A P Q / Py C P Q.
Proof.
intros.
rewrite (elim_ratio_on_perp_d_b Y P Q A C Y r).
idtac.
unfold Py4.
replace (Py Y P Q) with (Py Q P Y) by auto with Geom.
rewrite (elim_py_on_perp_d_right Q P P Q Y r).
idtac.
basic_simpl.

*****
H2 : not (eq C Y)
H1 : parallel A Y C Y
H0 : not (Col A P Y)
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C : Point
*****
eq (Fdiv (Py A P Q) (Py C P Q)) (Fdiv (Py A P Q) (Py C P Q))
+++++
trivial.
-----
Theorem elim_ratio_on_perp_d_spec_b : forall Y P Q A C : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C Y -> C<>Y -> A**Y / C**Y = Py A P Q / Py C P Q.
Proof.
intros.
rewrite (elim_ratio_on_perp_d_b Y P Q A C Y r).
idtac.
unfold Py4.
replace (Py Y P Q) with (Py Q P Y) by auto with Geom.
rewrite (elim_py_on_perp_d_right Q P P Q Y r).

*****
H2 : not (eq C Y)
H1 : parallel A Y C Y
H0 : not (Col A P Y)
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C : Point
*****
on_perp_d Y P Q r
+++++
assumption .
-----
Theorem elim_ratio_on_perp_d_spec_b : forall Y P Q A C : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C Y -> C<>Y -> A**Y / C**Y = Py A P Q / Py C P Q.
Proof.
intros.
rewrite (elim_ratio_on_perp_d_b Y P Q A C Y r).

*****
H2 : not (eq C Y)
H1 : parallel A Y C Y
H0 : not (Col A P Y)
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C : Point
*****
on_perp_d Y P Q r
+++++
assumption .
-----
Theorem elim_ratio_on_perp_d_spec_b : forall Y P Q A C : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C Y -> C<>Y -> A**Y / C**Y = Py A P Q / Py C P Q.
Proof.
intros.
rewrite (elim_ratio_on_perp_d_b Y P Q A C Y r).

*****
H2 : not (eq C Y)
H1 : parallel A Y C Y
H0 : not (Col A P Y)
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C : Point
*****
not (Col A P Y)
+++++
assumption .
-----
Theorem elim_ratio_on_perp_d_spec_b : forall Y P Q A C : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C Y -> C<>Y -> A**Y / C**Y = Py A P Q / Py C P Q.
Proof.
intros.
rewrite (elim_ratio_on_perp_d_b Y P Q A C Y r).

*****
H2 : not (eq C Y)
H1 : parallel A Y C Y
H0 : not (Col A P Y)
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C : Point
*****
parallel A Y C Y
+++++
assumption .
-----
Theorem elim_ratio_on_perp_d_spec_b : forall Y P Q A C : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C Y -> C<>Y -> A**Y / C**Y = Py A P Q / Py C P Q.
Proof.
intros.
rewrite (elim_ratio_on_perp_d_b Y P Q A C Y r).

*****
H2 : not (eq C Y)
H1 : parallel A Y C Y
H0 : not (Col A P Y)
H : on_perp_d Y P Q r
r : F
Y,P,Q,A,C : Point
*****
not (eq C Y)
+++++
assumption .
-----
Theorem elim_ratio_on_perp_d_spec_b : forall Y P Q A C : Point, forall r: F, on_perp_d Y P Q r-> ~ Col A P Y -> parallel A Y C Y -> C<>Y -> A**Y / C**Y = Py A P Q / Py C P Q.
Proof.
intros.
rewrite (elim_ratio_on_perp_d_b Y P Q A C Y r).

*****

*****

+++++
Qed.
-----
