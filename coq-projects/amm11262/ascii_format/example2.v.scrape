Require Import AMM11262.
-----
Import NatSet GeneralProperties.
-----
Section example_five_inhabitants.
-----
Definition town_2:= 1 ++ 2 ++ 3 ++ 4 ++ 5 ++ empty.
-----
Remark population_2 : cardinal town_2 = 2*2 +1.
-----
Remark population_2 : cardinal town_2 = 2*2 +1.

*****

*****
Logic.eq (cardinal town_2) (Nat.add (Nat.mul (S (S O)) (S (S O))) (S O))
+++++
Proof.
-----
Remark population_2 : cardinal town_2 = 2*2 +1.
Proof.

*****

*****
Logic.eq (cardinal town_2) (Nat.add (Nat.mul (S (S O)) (S (S O))) (S O))
+++++
reflexivity.
-----
Remark population_2 : cardinal town_2 = 2*2 +1.
Proof.
reflexivity.

*****

*****

+++++
Qed.
-----
Definition familiarity_2 (m n:elt):Prop := \n  match m,n with\n  | 1,2=> True\n  | 1,3 => True\n  | 1,4 => True\n  | 1,5 => True\n  | 2,1 => True\n  | 2,5 => True\n  | 3,1 => True\n  | 3,4 => True\n  | 3,5 => True\n  | 4,1 => True\n  | 4,3 => True\n  | 5,1 => True\n  | 5,2 => True\n  | 5,3 => True\n  | _,_ => False\n  end.
-----
Remark familiarity_2_sym:forall m n : elt, familiarity_2 m n -> familiarity_2 n m.
-----
Remark familiarity_2_sym:forall m n : elt, familiarity_2 m n -> familiarity_2 n m.

*****

*****
forall (m n : elt) (_ : familiarity_2 m n), familiarity_2 n m
+++++
Proof.
-----
Remark familiarity_2_sym:forall m n : elt, familiarity_2 m n -> familiarity_2 n m.
Proof.

*****

*****
forall (m n : elt) (_ : familiarity_2 m n), familiarity_2 n m
+++++
intros [|[|[|[|[|[|m']]]]]] [|[|[|[|[|[|n']]]]]].
-----
Remark familiarity_2_sym:forall m n : elt, familiarity_2 m n -> familiarity_2 n m.
Proof.
intros [|[|[|[|[|[|m']]]]]] [|[|[|[|[|[|n']]]]]].

*****

*****
forall _ : familiarity_2 O O, familiarity_2 O O
+++++
trivial.
-----
Remark familiarity_2_sym:forall m n : elt, familiarity_2 m n -> familiarity_2 n m.
Proof.
intros [|[|[|[|[|[|m']]]]]] [|[|[|[|[|[|n']]]]]].

*****

*****
forall _ : familiarity_2 O (S O), familiarity_2 (S O) O
+++++
trivial.
-----
Remark familiarity_2_sym:forall m n : elt, familiarity_2 m n -> familiarity_2 n m.
Proof.
intros [|[|[|[|[|[|m']]]]]] [|[|[|[|[|[|n']]]]]].

*****

*****
forall _ : familiarity_2 O (S (S O)), familiarity_2 (S (S O)) O
+++++
trivial.
-----
Remark familiarity_2_sym:forall m n : elt, familiarity_2 m n -> familiarity_2 n m.
Proof.
intros [|[|[|[|[|[|m']]]]]] [|[|[|[|[|[|n']]]]]].

*****

*****
forall _ : familiarity_2 O (S (S (S O))), familiarity_2 (S (S (S O))) O
+++++
trivial.
-----
Remark familiarity_2_sym:forall m n : elt, familiarity_2 m n -> familiarity_2 n m.
Proof.
intros [|[|[|[|[|[|m']]]]]] [|[|[|[|[|[|n']]]]]].

*****

*****
forall _ : familiarity_2 O (S (S (S (S O)))), familiarity_2 (S (S (S (S O)))) O
+++++
trivial.
-----
Remark familiarity_2_sym:forall m n : elt, familiarity_2 m n -> familiarity_2 n m.
Proof.
intros [|[|[|[|[|[|m']]]]]] [|[|[|[|[|[|n']]]]]].

*****

*****
forall _ : familiarity_2 O (S (S (S (S (S O))))), familiarity_2 (S (S (S (S (S O))))) O
+++++
trivial.
-----
Remark familiarity_2_sym:forall m n : elt, familiarity_2 m n -> familiarity_2 n m.
Proof.
intros [|[|[|[|[|[|m']]]]]] [|[|[|[|[|[|n']]]]]].

*****
n' : nat
*****
forall _ : familiarity_2 O (S (S (S (S (S (S n')))))), familiarity_2 (S (S (S (S (S (S n')))))) O
+++++
trivial.
-----
Remark familiarity_2_sym:forall m n : elt, familiarity_2 m n -> familiarity_2 n m.
Proof.
intros [|[|[|[|[|[|m']]]]]] [|[|[|[|[|[|n']]]]]].

*****

*****
forall _ : familiarity_2 (S O) O, familiarity_2 O (S O)
+++++
trivial.
-----
Remark familiarity_2_sym:forall m n : elt, familiarity_2 m n -> familiarity_2 n m.
Proof.
intros [|[|[|[|[|[|m']]]]]] [|[|[|[|[|[|n']]]]]].

*****

*****
forall _ : familiarity_2 (S O) (S O), familiarity_2 (S O) (S O)
+++++
trivial.
-----
Remark familiarity_2_sym:forall m n : elt, familiarity_2 m n -> familiarity_2 n m.
Proof.
intros [|[|[|[|[|[|m']]]]]] [|[|[|[|[|[|n']]]]]].

*****

*****
forall _ : familiarity_2 (S O) (S (S O)), familiarity_2 (S (S O)) (S O)
+++++
trivial.
-----
Remark familiarity_2_sym:forall m n : elt, familiarity_2 m n -> familiarity_2 n m.
Proof.
intros [|[|[|[|[|[|m']]]]]] [|[|[|[|[|[|n']]]]]].

*****

*****
forall _ : familiarity_2 (S O) (S (S (S O))), familiarity_2 (S (S (S O))) (S O)
+++++
trivial.
-----
Remark familiarity_2_sym:forall m n : elt, familiarity_2 m n -> familiarity_2 n m.
Proof.
intros [|[|[|[|[|[|m']]]]]] [|[|[|[|[|[|n']]]]]].

*****

*****
forall _ : familiarity_2 (S O) (S (S (S (S O)))), familiarity_2 (S (S (S (S O)))) (S O)
+++++
trivial.
-----
Remark familiarity_2_sym:forall m n : elt, familiarity_2 m n -> familiarity_2 n m.
Proof.
intros [|[|[|[|[|[|m']]]]]] [|[|[|[|[|[|n']]]]]].

*****

*****
forall _ : familiarity_2 (S O) (S (S (S (S (S O))))), familiarity_2 (S (S (S (S (S O))))) (S O)
+++++
trivial.
-----
Remark familiarity_2_sym:forall m n : elt, familiarity_2 m n -> familiarity_2 n m.
Proof.
intros [|[|[|[|[|[|m']]]]]] [|[|[|[|[|[|n']]]]]].

*****
n' : nat
*****
forall _ : familiarity_2 (S O) (S (S (S (S (S (S n')))))), familiarity_2 (S (S (S (S (S (S n')))))) (S O)
+++++
trivial.
-----
Remark familiarity_2_sym:forall m n : elt, familiarity_2 m n -> familiarity_2 n m.
Proof.
intros [|[|[|[|[|[|m']]]]]] [|[|[|[|[|[|n']]]]]].

*****

*****
forall _ : familiarity_2 (S (S O)) O, familiarity_2 O (S (S O))
+++++
trivial.
-----
Remark familiarity_2_sym:forall m n : elt, familiarity_2 m n -> familiarity_2 n m.
Proof.
intros [|[|[|[|[|[|m']]]]]] [|[|[|[|[|[|n']]]]]].

*****

*****
forall _ : familiarity_2 (S (S O)) (S O), familiarity_2 (S O) (S (S O))
+++++
trivial.
-----
Remark familiarity_2_sym:forall m n : elt, familiarity_2 m n -> familiarity_2 n m.
Proof.
intros [|[|[|[|[|[|m']]]]]] [|[|[|[|[|[|n']]]]]].

*****

*****
forall _ : familiarity_2 (S (S O)) (S (S O)), familiarity_2 (S (S O)) (S (S O))
+++++
trivial.
-----
Remark familiarity_2_sym:forall m n : elt, familiarity_2 m n -> familiarity_2 n m.
Proof.
intros [|[|[|[|[|[|m']]]]]] [|[|[|[|[|[|n']]]]]].

*****

*****
forall _ : familiarity_2 (S (S O)) (S (S (S O))), familiarity_2 (S (S (S O))) (S (S O))
+++++
trivial.
-----
Remark familiarity_2_sym:forall m n : elt, familiarity_2 m n -> familiarity_2 n m.
Proof.
intros [|[|[|[|[|[|m']]]]]] [|[|[|[|[|[|n']]]]]].

*****

*****
forall _ : familiarity_2 (S (S O)) (S (S (S (S O)))), familiarity_2 (S (S (S (S O)))) (S (S O))
+++++
trivial.
-----
Remark familiarity_2_sym:forall m n : elt, familiarity_2 m n -> familiarity_2 n m.
Proof.
intros [|[|[|[|[|[|m']]]]]] [|[|[|[|[|[|n']]]]]].

*****

*****
forall _ : familiarity_2 (S (S O)) (S (S (S (S (S O))))), familiarity_2 (S (S (S (S (S O))))) (S (S O))
+++++
trivial.
-----
Remark familiarity_2_sym:forall m n : elt, familiarity_2 m n -> familiarity_2 n m.
Proof.
intros [|[|[|[|[|[|m']]]]]] [|[|[|[|[|[|n']]]]]].

*****
n' : nat
*****
forall _ : familiarity_2 (S (S O)) (S (S (S (S (S (S n')))))), familiarity_2 (S (S (S (S (S (S n')))))) (S (S O))
+++++
trivial.
-----
Remark familiarity_2_sym:forall m n : elt, familiarity_2 m n -> familiarity_2 n m.
Proof.
intros [|[|[|[|[|[|m']]]]]] [|[|[|[|[|[|n']]]]]].

*****

*****
forall _ : familiarity_2 (S (S (S O))) O, familiarity_2 O (S (S (S O)))
+++++
trivial.
-----
Remark familiarity_2_sym:forall m n : elt, familiarity_2 m n -> familiarity_2 n m.
Proof.
intros [|[|[|[|[|[|m']]]]]] [|[|[|[|[|[|n']]]]]].

*****

*****
forall _ : familiarity_2 (S (S (S O))) (S O), familiarity_2 (S O) (S (S (S O)))
+++++
trivial.
-----
Remark familiarity_2_sym:forall m n : elt, familiarity_2 m n -> familiarity_2 n m.
Proof.
intros [|[|[|[|[|[|m']]]]]] [|[|[|[|[|[|n']]]]]].

*****

*****
forall _ : familiarity_2 (S (S (S O))) (S (S O)), familiarity_2 (S (S O)) (S (S (S O)))
+++++
trivial.
-----
Remark familiarity_2_sym:forall m n : elt, familiarity_2 m n -> familiarity_2 n m.
Proof.
intros [|[|[|[|[|[|m']]]]]] [|[|[|[|[|[|n']]]]]].

*****

*****
forall _ : familiarity_2 (S (S (S O))) (S (S (S O))), familiarity_2 (S (S (S O))) (S (S (S O)))
+++++
trivial.
-----
Remark familiarity_2_sym:forall m n : elt, familiarity_2 m n -> familiarity_2 n m.
Proof.
intros [|[|[|[|[|[|m']]]]]] [|[|[|[|[|[|n']]]]]].

*****

*****
forall _ : familiarity_2 (S (S (S O))) (S (S (S (S O)))), familiarity_2 (S (S (S (S O)))) (S (S (S O)))
+++++
trivial.
-----
Remark familiarity_2_sym:forall m n : elt, familiarity_2 m n -> familiarity_2 n m.
Proof.
intros [|[|[|[|[|[|m']]]]]] [|[|[|[|[|[|n']]]]]].

*****

*****
forall _ : familiarity_2 (S (S (S O))) (S (S (S (S (S O))))), familiarity_2 (S (S (S (S (S O))))) (S (S (S O)))
+++++
trivial.
-----
Remark familiarity_2_sym:forall m n : elt, familiarity_2 m n -> familiarity_2 n m.
Proof.
intros [|[|[|[|[|[|m']]]]]] [|[|[|[|[|[|n']]]]]].

*****
n' : nat
*****
forall _ : familiarity_2 (S (S (S O))) (S (S (S (S (S (S n')))))), familiarity_2 (S (S (S (S (S (S n')))))) (S (S (S O)))
+++++
trivial.
-----
Remark familiarity_2_sym:forall m n : elt, familiarity_2 m n -> familiarity_2 n m.
Proof.
intros [|[|[|[|[|[|m']]]]]] [|[|[|[|[|[|n']]]]]].

*****

*****
forall _ : familiarity_2 (S (S (S (S O)))) O, familiarity_2 O (S (S (S (S O))))
+++++
trivial.
-----
Remark familiarity_2_sym:forall m n : elt, familiarity_2 m n -> familiarity_2 n m.
Proof.
intros [|[|[|[|[|[|m']]]]]] [|[|[|[|[|[|n']]]]]].

*****

*****
forall _ : familiarity_2 (S (S (S (S O)))) (S O), familiarity_2 (S O) (S (S (S (S O))))
+++++
trivial.
-----
Remark familiarity_2_sym:forall m n : elt, familiarity_2 m n -> familiarity_2 n m.
Proof.
intros [|[|[|[|[|[|m']]]]]] [|[|[|[|[|[|n']]]]]].

*****

*****
forall _ : familiarity_2 (S (S (S (S O)))) (S (S O)), familiarity_2 (S (S O)) (S (S (S (S O))))
+++++
trivial.
-----
Remark familiarity_2_sym:forall m n : elt, familiarity_2 m n -> familiarity_2 n m.
Proof.
intros [|[|[|[|[|[|m']]]]]] [|[|[|[|[|[|n']]]]]].

*****

*****
forall _ : familiarity_2 (S (S (S (S O)))) (S (S (S O))), familiarity_2 (S (S (S O))) (S (S (S (S O))))
+++++
trivial.
-----
Remark familiarity_2_sym:forall m n : elt, familiarity_2 m n -> familiarity_2 n m.
Proof.
intros [|[|[|[|[|[|m']]]]]] [|[|[|[|[|[|n']]]]]].

*****

*****
forall _ : familiarity_2 (S (S (S (S O)))) (S (S (S (S O)))), familiarity_2 (S (S (S (S O)))) (S (S (S (S O))))
+++++
trivial.
-----
Remark familiarity_2_sym:forall m n : elt, familiarity_2 m n -> familiarity_2 n m.
Proof.
intros [|[|[|[|[|[|m']]]]]] [|[|[|[|[|[|n']]]]]].

*****

*****
forall _ : familiarity_2 (S (S (S (S O)))) (S (S (S (S (S O))))), familiarity_2 (S (S (S (S (S O))))) (S (S (S (S O))))
+++++
trivial.
-----
Remark familiarity_2_sym:forall m n : elt, familiarity_2 m n -> familiarity_2 n m.
Proof.
intros [|[|[|[|[|[|m']]]]]] [|[|[|[|[|[|n']]]]]].

*****
n' : nat
*****
forall _ : familiarity_2 (S (S (S (S O)))) (S (S (S (S (S (S n')))))), familiarity_2 (S (S (S (S (S (S n')))))) (S (S (S (S O))))
+++++
trivial.
-----
Remark familiarity_2_sym:forall m n : elt, familiarity_2 m n -> familiarity_2 n m.
Proof.
intros [|[|[|[|[|[|m']]]]]] [|[|[|[|[|[|n']]]]]].

*****

*****
forall _ : familiarity_2 (S (S (S (S (S O))))) O, familiarity_2 O (S (S (S (S (S O)))))
+++++
trivial.
-----
Remark familiarity_2_sym:forall m n : elt, familiarity_2 m n -> familiarity_2 n m.
Proof.
intros [|[|[|[|[|[|m']]]]]] [|[|[|[|[|[|n']]]]]].

*****

*****
forall _ : familiarity_2 (S (S (S (S (S O))))) (S O), familiarity_2 (S O) (S (S (S (S (S O)))))
+++++
trivial.
-----
Remark familiarity_2_sym:forall m n : elt, familiarity_2 m n -> familiarity_2 n m.
Proof.
intros [|[|[|[|[|[|m']]]]]] [|[|[|[|[|[|n']]]]]].

*****

*****
forall _ : familiarity_2 (S (S (S (S (S O))))) (S (S O)), familiarity_2 (S (S O)) (S (S (S (S (S O)))))
+++++
trivial.
-----
Remark familiarity_2_sym:forall m n : elt, familiarity_2 m n -> familiarity_2 n m.
Proof.
intros [|[|[|[|[|[|m']]]]]] [|[|[|[|[|[|n']]]]]].

*****

*****
forall _ : familiarity_2 (S (S (S (S (S O))))) (S (S (S O))), familiarity_2 (S (S (S O))) (S (S (S (S (S O)))))
+++++
trivial.
-----
Remark familiarity_2_sym:forall m n : elt, familiarity_2 m n -> familiarity_2 n m.
Proof.
intros [|[|[|[|[|[|m']]]]]] [|[|[|[|[|[|n']]]]]].

*****

*****
forall _ : familiarity_2 (S (S (S (S (S O))))) (S (S (S (S O)))), familiarity_2 (S (S (S (S O)))) (S (S (S (S (S O)))))
+++++
trivial.
-----
Remark familiarity_2_sym:forall m n : elt, familiarity_2 m n -> familiarity_2 n m.
Proof.
intros [|[|[|[|[|[|m']]]]]] [|[|[|[|[|[|n']]]]]].

*****

*****
forall _ : familiarity_2 (S (S (S (S (S O))))) (S (S (S (S (S O))))), familiarity_2 (S (S (S (S (S O))))) (S (S (S (S (S O)))))
+++++
trivial.
-----
Remark familiarity_2_sym:forall m n : elt, familiarity_2 m n -> familiarity_2 n m.
Proof.
intros [|[|[|[|[|[|m']]]]]] [|[|[|[|[|[|n']]]]]].

*****
n' : nat
*****
forall _ : familiarity_2 (S (S (S (S (S O))))) (S (S (S (S (S (S n')))))), familiarity_2 (S (S (S (S (S (S n')))))) (S (S (S (S (S O)))))
+++++
trivial.
-----
Remark familiarity_2_sym:forall m n : elt, familiarity_2 m n -> familiarity_2 n m.
Proof.
intros [|[|[|[|[|[|m']]]]]] [|[|[|[|[|[|n']]]]]].

*****
m' : nat
*****
forall _ : familiarity_2 (S (S (S (S (S (S m')))))) O, familiarity_2 O (S (S (S (S (S (S m'))))))
+++++
trivial.
-----
Remark familiarity_2_sym:forall m n : elt, familiarity_2 m n -> familiarity_2 n m.
Proof.
intros [|[|[|[|[|[|m']]]]]] [|[|[|[|[|[|n']]]]]].

*****
m' : nat
*****
forall _ : familiarity_2 (S (S (S (S (S (S m')))))) (S O), familiarity_2 (S O) (S (S (S (S (S (S m'))))))
+++++
trivial.
-----
Remark familiarity_2_sym:forall m n : elt, familiarity_2 m n -> familiarity_2 n m.
Proof.
intros [|[|[|[|[|[|m']]]]]] [|[|[|[|[|[|n']]]]]].

*****
m' : nat
*****
forall _ : familiarity_2 (S (S (S (S (S (S m')))))) (S (S O)), familiarity_2 (S (S O)) (S (S (S (S (S (S m'))))))
+++++
trivial.
-----
Remark familiarity_2_sym:forall m n : elt, familiarity_2 m n -> familiarity_2 n m.
Proof.
intros [|[|[|[|[|[|m']]]]]] [|[|[|[|[|[|n']]]]]].

*****
m' : nat
*****
forall _ : familiarity_2 (S (S (S (S (S (S m')))))) (S (S (S O))), familiarity_2 (S (S (S O))) (S (S (S (S (S (S m'))))))
+++++
trivial.
-----
Remark familiarity_2_sym:forall m n : elt, familiarity_2 m n -> familiarity_2 n m.
Proof.
intros [|[|[|[|[|[|m']]]]]] [|[|[|[|[|[|n']]]]]].

*****
m' : nat
*****
forall _ : familiarity_2 (S (S (S (S (S (S m')))))) (S (S (S (S O)))), familiarity_2 (S (S (S (S O)))) (S (S (S (S (S (S m'))))))
+++++
trivial.
-----
Remark familiarity_2_sym:forall m n : elt, familiarity_2 m n -> familiarity_2 n m.
Proof.
intros [|[|[|[|[|[|m']]]]]] [|[|[|[|[|[|n']]]]]].

*****
m' : nat
*****
forall _ : familiarity_2 (S (S (S (S (S (S m')))))) (S (S (S (S (S O))))), familiarity_2 (S (S (S (S (S O))))) (S (S (S (S (S (S m'))))))
+++++
trivial.
-----
Remark familiarity_2_sym:forall m n : elt, familiarity_2 m n -> familiarity_2 n m.
Proof.
intros [|[|[|[|[|[|m']]]]]] [|[|[|[|[|[|n']]]]]].

*****
m',n' : nat
*****
forall _ : familiarity_2 (S (S (S (S (S (S m')))))) (S (S (S (S (S (S n')))))), familiarity_2 (S (S (S (S (S (S n')))))) (S (S (S (S (S (S m'))))))
+++++
trivial.
-----
Remark familiarity_2_sym:forall m n : elt, familiarity_2 m n -> familiarity_2 n m.
Proof.
intros [|[|[|[|[|[|m']]]]]] [|[|[|[|[|[|n']]]]]].

*****

*****

+++++
Qed.
-----
Remark familiarity_2_extensional:forall (m : elt) (n p : E.t), E.eq n p -> familiarity_2 m n -> familiarity_2 m p.
-----
Remark familiarity_2_extensional:forall (m : elt) (n p : E.t), E.eq n p -> familiarity_2 m n -> familiarity_2 m p.

*****

*****
forall (m : elt) (n p : E.t) (_ : E.eq n p) (_ : familiarity_2 m n), familiarity_2 m p
+++++
Proof.
-----
Remark familiarity_2_extensional:forall (m : elt) (n p : E.t), E.eq n p -> familiarity_2 m n -> familiarity_2 m p.
Proof.

*****

*****
forall (m : elt) (n p : E.t) (_ : E.eq n p) (_ : familiarity_2 m n), familiarity_2 m p
+++++
intros m n p H1 H2.
-----
Remark familiarity_2_extensional:forall (m : elt) (n p : E.t), E.eq n p -> familiarity_2 m n -> familiarity_2 m p.
Proof.
intros m n p H1 H2.

*****
H2 : familiarity_2 m n
H1 : E.eq n p
n,p : E\.t
m : elt
*****
familiarity_2 m p
+++++
compute in H1.
-----
Remark familiarity_2_extensional:forall (m : elt) (n p : E.t), E.eq n p -> familiarity_2 m n -> familiarity_2 m p.
Proof.
intros m n p H1 H2.
compute in H1.

*****
H2 : familiarity_2 m n
H1 : Logic.eq n p
n,p : E\.t
m : elt
*****
familiarity_2 m p
+++++
rewrite <- H1.
-----
Remark familiarity_2_extensional:forall (m : elt) (n p : E.t), E.eq n p -> familiarity_2 m n -> familiarity_2 m p.
Proof.
intros m n p H1 H2.
compute in H1.
rewrite <- H1.

*****
H2 : familiarity_2 m n
H1 : Logic.eq n p
n,p : E\.t
m : elt
*****
familiarity_2 m n
+++++
assumption.
-----
Remark familiarity_2_extensional:forall (m : elt) (n p : E.t), E.eq n p -> familiarity_2 m n -> familiarity_2 m p.
Proof.
intros m n p H1 H2.
compute in H1.
rewrite <- H1.
assumption.

*****

*****

+++++
Qed.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> \n  {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+\n  {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.

*****

*****
forall (B : t) (_ : Subset B town_2) (_ : Logic.eq (cardinal B) (S (S O))), sumor (sumor (sumor (sumor (sumor (sumor (sumor (sumor (sumbool (Equal B (add (S O) (add (S (S O)) empty))) (Equal B (add (S O) (add (S (S (S O))) empty)))) (Equal B (add (S O) (add (S (S (S (S O)))) empty)))) (Equal B (add (S O) (add (S (S (S (S (S O))))) empty)))) (Equal B (add (S (S O)) (add (S (S (S O))) empty)))) (Equal B (add (S (S O)) (add (S (S (S (S O)))) empty)))) (Equal B (add (S (S O)) (add (S (S (S (S (S O))))) empty)))) (Equal B (add (S (S (S O))) (add (S (S (S (S O)))) empty)))) (Equal B (add (S (S (S O))) (add (S (S (S (S (S O))))) empty)))) (Equal B (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))
+++++
Proof.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.

*****

*****
forall (B : t) (_ : Subset B town_2) (_ : Logic.eq (cardinal B) (S (S O))), sumor (sumor (sumor (sumor (sumor (sumor (sumor (sumor (sumbool (Equal B (add (S O) (add (S (S O)) empty))) (Equal B (add (S O) (add (S (S (S O))) empty)))) (Equal B (add (S O) (add (S (S (S (S O)))) empty)))) (Equal B (add (S O) (add (S (S (S (S (S O))))) empty)))) (Equal B (add (S (S O)) (add (S (S (S O))) empty)))) (Equal B (add (S (S O)) (add (S (S (S (S O)))) empty)))) (Equal B (add (S (S O)) (add (S (S (S (S (S O))))) empty)))) (Equal B (add (S (S (S O))) (add (S (S (S (S O)))) empty)))) (Equal B (add (S (S (S O))) (add (S (S (S (S (S O))))) empty)))) (Equal B (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))
+++++
intros B H_sub H_card.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.

*****
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
sumor (sumor (sumor (sumor (sumor (sumor (sumor (sumor (sumbool (Equal B (add (S O) (add (S (S O)) empty))) (Equal B (add (S O) (add (S (S (S O))) empty)))) (Equal B (add (S O) (add (S (S (S (S O)))) empty)))) (Equal B (add (S O) (add (S (S (S (S (S O))))) empty)))) (Equal B (add (S (S O)) (add (S (S (S O))) empty)))) (Equal B (add (S (S O)) (add (S (S (S (S O)))) empty)))) (Equal B (add (S (S O)) (add (S (S (S (S (S O))))) empty)))) (Equal B (add (S (S (S O))) (add (S (S (S (S O)))) empty)))) (Equal B (add (S (S (S O))) (add (S (S (S (S (S O))))) empty)))) (Equal B (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))
+++++
destruct (In_dec 1 B) as [H1|H1].
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].

*****
H1 : In (S O) B
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
sumor (sumor (sumor (sumor (sumor (sumor (sumor (sumor (sumbool (Equal B (add (S O) (add (S (S O)) empty))) (Equal B (add (S O) (add (S (S (S O))) empty)))) (Equal B (add (S O) (add (S (S (S (S O)))) empty)))) (Equal B (add (S O) (add (S (S (S (S (S O))))) empty)))) (Equal B (add (S (S O)) (add (S (S (S O))) empty)))) (Equal B (add (S (S O)) (add (S (S (S (S O)))) empty)))) (Equal B (add (S (S O)) (add (S (S (S (S (S O))))) empty)))) (Equal B (add (S (S (S O))) (add (S (S (S (S O)))) empty)))) (Equal B (add (S (S (S O))) (add (S (S (S (S (S O))))) empty)))) (Equal B (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))
+++++
do 6 left.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
do 6 left.

*****
H1 : In (S O) B
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
sumor (sumor (sumbool (Equal B (add (S O) (add (S (S O)) empty))) (Equal B (add (S O) (add (S (S (S O))) empty)))) (Equal B (add (S O) (add (S (S (S (S O)))) empty)))) (Equal B (add (S O) (add (S (S (S (S (S O))))) empty)))
+++++
assert (H_card_rem:cardinal (remove 1 B)=1).
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
do 6 left.
assert (H_card_rem:cardinal (remove 1 B)=1).

*****
H1 : In (S O) B
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
Logic.eq (cardinal (remove (S O) B)) (S O)
+++++
rewrite <- (remove_cardinal_1 H1) in H_card.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
do 6 left.
assert (H_card_rem:cardinal (remove 1 B)=1).
rewrite <- (remove_cardinal_1 H1) in H_card.

*****
H1 : In (S O) B
H_card : Logic.eq (S (cardinal (remove (S O) B))) (S (S O))
H_sub : Subset B town_2
B : True
*****
Logic.eq (cardinal (remove (S O) B)) (S O)
+++++
apply eq_add_S.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
do 6 left.
assert (H_card_rem:cardinal (remove 1 B)=1).
rewrite <- (remove_cardinal_1 H1) in H_card.
apply eq_add_S.

*****
H1 : In (S O) B
H_card : Logic.eq (S (cardinal (remove (S O) B))) (S (S O))
H_sub : Subset B town_2
B : True
*****
Logic.eq (S (cardinal (remove (S O) B))) (S (S O))
+++++
assumption.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
do 6 left.
assert (H_card_rem:cardinal (remove 1 B)=1).

*****
H_card_rem : Logic.eq (cardinal (remove (S O) B)) (S O)
H1 : In (S O) B
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
sumor (sumor (sumbool (Equal B (add (S O) (add (S (S O)) empty))) (Equal B (add (S O) (add (S (S (S O))) empty)))) (Equal B (add (S O) (add (S (S (S (S O)))) empty)))) (Equal B (add (S O) (add (S (S (S (S (S O))))) empty)))
+++++
idtac.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
do 6 left.
assert (H_card_rem:cardinal (remove 1 B)=1).
idtac.

*****
H_card_rem : Logic.eq (cardinal (remove (S O) B)) (S O)
H1 : In (S O) B
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
sumor (sumor (sumbool (Equal B (add (S O) (add (S (S O)) empty))) (Equal B (add (S O) (add (S (S (S O))) empty)))) (Equal B (add (S O) (add (S (S (S (S O)))) empty)))) (Equal B (add (S O) (add (S (S (S (S (S O))))) empty)))
+++++
destruct (In_dec 2 (remove 1 B)) as [H12|H12].
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
do 6 left.
assert (H_card_rem:cardinal (remove 1 B)=1).
idtac.
destruct (In_dec 2 (remove 1 B)) as [H12|H12].

*****
H12 : In (S (S O)) (remove (S O) B)
H_card_rem : Logic.eq (cardinal (remove (S O) B)) (S O)
H1 : In (S O) B
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
sumor (sumor (sumbool (Equal B (add (S O) (add (S (S O)) empty))) (Equal B (add (S O) (add (S (S (S O))) empty)))) (Equal B (add (S O) (add (S (S (S (S O)))) empty)))) (Equal B (add (S O) (add (S (S (S (S (S O))))) empty)))
+++++
do 3 left.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
do 6 left.
assert (H_card_rem:cardinal (remove 1 B)=1).
idtac.
destruct (In_dec 2 (remove 1 B)) as [H12|H12].
do 3 left.

*****
H12 : In (S (S O)) (remove (S O) B)
H_card_rem : Logic.eq (cardinal (remove (S O) B)) (S O)
H1 : In (S O) B
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
Equal B (add (S O) (add (S (S O)) empty))
+++++
rewrite <- (add_remove H1).
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
do 6 left.
assert (H_card_rem:cardinal (remove 1 B)=1).
idtac.
destruct (In_dec 2 (remove 1 B)) as [H12|H12].
do 3 left.
rewrite <- (add_remove H1).

*****
H12 : In (S (S O)) (remove (S O) B)
H_card_rem : Logic.eq (cardinal (remove (S O) B)) (S O)
H1 : In (S O) B
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
Equal (add (S O) (remove (S O) B)) (add (S O) (add (S (S O)) empty))
+++++
rewrite <- (add_remove H12).
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
do 6 left.
assert (H_card_rem:cardinal (remove 1 B)=1).
idtac.
destruct (In_dec 2 (remove 1 B)) as [H12|H12].
do 3 left.
rewrite <- (add_remove H1).
rewrite <- (add_remove H12).

*****
H12 : In (S (S O)) (remove (S O) B)
H_card_rem : Logic.eq (cardinal (remove (S O) B)) (S O)
H1 : In (S O) B
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
Equal (add (S O) (add (S (S O)) (remove (S (S O)) (remove (S O) B)))) (add (S O) (add (S (S O)) empty))
+++++
generalize (remove_cardinal_1 H12).
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
do 6 left.
assert (H_card_rem:cardinal (remove 1 B)=1).
idtac.
destruct (In_dec 2 (remove 1 B)) as [H12|H12].
do 3 left.
rewrite <- (add_remove H1).
rewrite <- (add_remove H12).
generalize (remove_cardinal_1 H12).

*****
H12 : In (S (S O)) (remove (S O) B)
H_card_rem : Logic.eq (cardinal (remove (S O) B)) (S O)
H1 : In (S O) B
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
forall _ : Logic.eq (S (cardinal (remove (S (S O)) (remove (S O) B)))) (cardinal (remove (S O) B)), Equal (add (S O) (add (S (S O)) (remove (S (S O)) (remove (S O) B)))) (add (S O) (add (S (S O)) empty))
+++++
rewrite H_card_rem.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
do 6 left.
assert (H_card_rem:cardinal (remove 1 B)=1).
idtac.
destruct (In_dec 2 (remove 1 B)) as [H12|H12].
do 3 left.
rewrite <- (add_remove H1).
rewrite <- (add_remove H12).
generalize (remove_cardinal_1 H12).
rewrite H_card_rem.

*****
H12 : In (S (S O)) (remove (S O) B)
H_card_rem : Logic.eq (cardinal (remove (S O) B)) (S O)
H1 : In (S O) B
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
forall _ : Logic.eq (S (cardinal (remove (S (S O)) (remove (S O) B)))) (S O), Equal (add (S O) (add (S (S O)) (remove (S (S O)) (remove (S O) B)))) (add (S O) (add (S (S O)) empty))
+++++
intro H_eq2.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
do 6 left.
assert (H_card_rem:cardinal (remove 1 B)=1).
idtac.
destruct (In_dec 2 (remove 1 B)) as [H12|H12].
do 3 left.
rewrite <- (add_remove H1).
rewrite <- (add_remove H12).
generalize (remove_cardinal_1 H12).
rewrite H_card_rem.
intro H_eq2.

*****
H_eq2 : Logic.eq (S (cardinal (remove (S (S O)) (remove (S O) B)))) (S O)
H12 : In (S (S O)) (remove (S O) B)
H_card_rem : Logic.eq (cardinal (remove (S O) B)) (S O)
H1 : In (S O) B
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
Equal (add (S O) (add (S (S O)) (remove (S (S O)) (remove (S O) B)))) (add (S O) (add (S (S O)) empty))
+++++
rewrite (empty_is_empty_1 (cardinal_inv_1 (eq_add_S _ _ H_eq2))).
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
do 6 left.
assert (H_card_rem:cardinal (remove 1 B)=1).
idtac.
destruct (In_dec 2 (remove 1 B)) as [H12|H12].
do 3 left.
rewrite <- (add_remove H1).
rewrite <- (add_remove H12).
generalize (remove_cardinal_1 H12).
rewrite H_card_rem.
intro H_eq2.
rewrite (empty_is_empty_1 (cardinal_inv_1 (eq_add_S _ _ H_eq2))).

*****
H_eq2 : Logic.eq (S (cardinal (remove (S (S O)) (remove (S O) B)))) (S O)
H12 : In (S (S O)) (remove (S O) B)
H_card_rem : Logic.eq (cardinal (remove (S O) B)) (S O)
H1 : In (S O) B
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
Equal (add (S O) (add (S (S O)) empty)) (add (S O) (add (S (S O)) empty))
+++++
reflexivity.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
do 6 left.
assert (H_card_rem:cardinal (remove 1 B)=1).
idtac.
destruct (In_dec 2 (remove 1 B)) as [H12|H12].

*****
H12 : not (In (S (S O)) (remove (S O) B))
H_card_rem : Logic.eq (cardinal (remove (S O) B)) (S O)
H1 : In (S O) B
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
sumor (sumor (sumbool (Equal B (add (S O) (add (S (S O)) empty))) (Equal B (add (S O) (add (S (S (S O))) empty)))) (Equal B (add (S O) (add (S (S (S (S O)))) empty)))) (Equal B (add (S O) (add (S (S (S (S (S O))))) empty)))
+++++
destruct (In_dec 3 (remove 1 B)) as [H13|H13].
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
do 6 left.
assert (H_card_rem:cardinal (remove 1 B)=1).
idtac.
destruct (In_dec 2 (remove 1 B)) as [H12|H12].
destruct (In_dec 3 (remove 1 B)) as [H13|H13].

*****
H13 : In (S (S (S O))) (remove (S O) B)
H12 : not (In (S (S O)) (remove (S O) B))
H_card_rem : Logic.eq (cardinal (remove (S O) B)) (S O)
H1 : In (S O) B
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
sumor (sumor (sumbool (Equal B (add (S O) (add (S (S O)) empty))) (Equal B (add (S O) (add (S (S (S O))) empty)))) (Equal B (add (S O) (add (S (S (S (S O)))) empty)))) (Equal B (add (S O) (add (S (S (S (S (S O))))) empty)))
+++++
do 2 left.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
do 6 left.
assert (H_card_rem:cardinal (remove 1 B)=1).
idtac.
destruct (In_dec 2 (remove 1 B)) as [H12|H12].
destruct (In_dec 3 (remove 1 B)) as [H13|H13].
do 2 left.

*****
H13 : In (S (S (S O))) (remove (S O) B)
H12 : not (In (S (S O)) (remove (S O) B))
H_card_rem : Logic.eq (cardinal (remove (S O) B)) (S O)
H1 : In (S O) B
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
sumbool (Equal B (add (S O) (add (S (S O)) empty))) (Equal B (add (S O) (add (S (S (S O))) empty)))
+++++
right.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
do 6 left.
assert (H_card_rem:cardinal (remove 1 B)=1).
idtac.
destruct (In_dec 2 (remove 1 B)) as [H12|H12].
destruct (In_dec 3 (remove 1 B)) as [H13|H13].
do 2 left.
right.

*****
H13 : In (S (S (S O))) (remove (S O) B)
H12 : not (In (S (S O)) (remove (S O) B))
H_card_rem : Logic.eq (cardinal (remove (S O) B)) (S O)
H1 : In (S O) B
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
Equal B (add (S O) (add (S (S (S O))) empty))
+++++
rewrite <- (add_remove H1).
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
do 6 left.
assert (H_card_rem:cardinal (remove 1 B)=1).
idtac.
destruct (In_dec 2 (remove 1 B)) as [H12|H12].
destruct (In_dec 3 (remove 1 B)) as [H13|H13].
do 2 left.
right.
rewrite <- (add_remove H1).

*****
H13 : In (S (S (S O))) (remove (S O) B)
H12 : not (In (S (S O)) (remove (S O) B))
H_card_rem : Logic.eq (cardinal (remove (S O) B)) (S O)
H1 : In (S O) B
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
Equal (add (S O) (remove (S O) B)) (add (S O) (add (S (S (S O))) empty))
+++++
rewrite <- (add_remove H13).
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
do 6 left.
assert (H_card_rem:cardinal (remove 1 B)=1).
idtac.
destruct (In_dec 2 (remove 1 B)) as [H12|H12].
destruct (In_dec 3 (remove 1 B)) as [H13|H13].
do 2 left.
right.
rewrite <- (add_remove H1).
rewrite <- (add_remove H13).

*****
H13 : In (S (S (S O))) (remove (S O) B)
H12 : not (In (S (S O)) (remove (S O) B))
H_card_rem : Logic.eq (cardinal (remove (S O) B)) (S O)
H1 : In (S O) B
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
Equal (add (S O) (add (S (S (S O))) (remove (S (S (S O))) (remove (S O) B)))) (add (S O) (add (S (S (S O))) empty))
+++++
generalize (remove_cardinal_1 H13).
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
do 6 left.
assert (H_card_rem:cardinal (remove 1 B)=1).
idtac.
destruct (In_dec 2 (remove 1 B)) as [H12|H12].
destruct (In_dec 3 (remove 1 B)) as [H13|H13].
do 2 left.
right.
rewrite <- (add_remove H1).
rewrite <- (add_remove H13).
generalize (remove_cardinal_1 H13).

*****
H13 : In (S (S (S O))) (remove (S O) B)
H12 : not (In (S (S O)) (remove (S O) B))
H_card_rem : Logic.eq (cardinal (remove (S O) B)) (S O)
H1 : In (S O) B
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
forall _ : Logic.eq (S (cardinal (remove (S (S (S O))) (remove (S O) B)))) (cardinal (remove (S O) B)), Equal (add (S O) (add (S (S (S O))) (remove (S (S (S O))) (remove (S O) B)))) (add (S O) (add (S (S (S O))) empty))
+++++
rewrite H_card_rem.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
do 6 left.
assert (H_card_rem:cardinal (remove 1 B)=1).
idtac.
destruct (In_dec 2 (remove 1 B)) as [H12|H12].
destruct (In_dec 3 (remove 1 B)) as [H13|H13].
do 2 left.
right.
rewrite <- (add_remove H1).
rewrite <- (add_remove H13).
generalize (remove_cardinal_1 H13).
rewrite H_card_rem.

*****
H13 : In (S (S (S O))) (remove (S O) B)
H12 : not (In (S (S O)) (remove (S O) B))
H_card_rem : Logic.eq (cardinal (remove (S O) B)) (S O)
H1 : In (S O) B
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
forall _ : Logic.eq (S (cardinal (remove (S (S (S O))) (remove (S O) B)))) (S O), Equal (add (S O) (add (S (S (S O))) (remove (S (S (S O))) (remove (S O) B)))) (add (S O) (add (S (S (S O))) empty))
+++++
intro H_eq2.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
do 6 left.
assert (H_card_rem:cardinal (remove 1 B)=1).
idtac.
destruct (In_dec 2 (remove 1 B)) as [H12|H12].
destruct (In_dec 3 (remove 1 B)) as [H13|H13].
do 2 left.
right.
rewrite <- (add_remove H1).
rewrite <- (add_remove H13).
generalize (remove_cardinal_1 H13).
rewrite H_card_rem.
intro H_eq2.

*****
H_eq2 : Logic.eq (S (cardinal (remove (S (S (S O))) (remove (S O) B)))) (S O)
H13 : In (S (S (S O))) (remove (S O) B)
H12 : not (In (S (S O)) (remove (S O) B))
H_card_rem : Logic.eq (cardinal (remove (S O) B)) (S O)
H1 : In (S O) B
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
Equal (add (S O) (add (S (S (S O))) (remove (S (S (S O))) (remove (S O) B)))) (add (S O) (add (S (S (S O))) empty))
+++++
rewrite (empty_is_empty_1 (cardinal_inv_1 (eq_add_S _ _ H_eq2))).
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
do 6 left.
assert (H_card_rem:cardinal (remove 1 B)=1).
idtac.
destruct (In_dec 2 (remove 1 B)) as [H12|H12].
destruct (In_dec 3 (remove 1 B)) as [H13|H13].
do 2 left.
right.
rewrite <- (add_remove H1).
rewrite <- (add_remove H13).
generalize (remove_cardinal_1 H13).
rewrite H_card_rem.
intro H_eq2.
rewrite (empty_is_empty_1 (cardinal_inv_1 (eq_add_S _ _ H_eq2))).

*****
H_eq2 : Logic.eq (S (cardinal (remove (S (S (S O))) (remove (S O) B)))) (S O)
H13 : In (S (S (S O))) (remove (S O) B)
H12 : not (In (S (S O)) (remove (S O) B))
H_card_rem : Logic.eq (cardinal (remove (S O) B)) (S O)
H1 : In (S O) B
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
Equal (add (S O) (add (S (S (S O))) empty)) (add (S O) (add (S (S (S O))) empty))
+++++
reflexivity.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
do 6 left.
assert (H_card_rem:cardinal (remove 1 B)=1).
idtac.
destruct (In_dec 2 (remove 1 B)) as [H12|H12].
destruct (In_dec 3 (remove 1 B)) as [H13|H13].

*****
H13 : not (In (S (S (S O))) (remove (S O) B))
H12 : not (In (S (S O)) (remove (S O) B))
H_card_rem : Logic.eq (cardinal (remove (S O) B)) (S O)
H1 : In (S O) B
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
sumor (sumor (sumbool (Equal B (add (S O) (add (S (S O)) empty))) (Equal B (add (S O) (add (S (S (S O))) empty)))) (Equal B (add (S O) (add (S (S (S (S O)))) empty)))) (Equal B (add (S O) (add (S (S (S (S (S O))))) empty)))
+++++
destruct (In_dec 4 (remove 1 B)) as [H14|H14].
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
do 6 left.
assert (H_card_rem:cardinal (remove 1 B)=1).
idtac.
destruct (In_dec 2 (remove 1 B)) as [H12|H12].
destruct (In_dec 3 (remove 1 B)) as [H13|H13].
destruct (In_dec 4 (remove 1 B)) as [H14|H14].

*****
H14 : In (S (S (S (S O)))) (remove (S O) B)
H13 : not (In (S (S (S O))) (remove (S O) B))
H12 : not (In (S (S O)) (remove (S O) B))
H_card_rem : Logic.eq (cardinal (remove (S O) B)) (S O)
H1 : In (S O) B
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
sumor (sumor (sumbool (Equal B (add (S O) (add (S (S O)) empty))) (Equal B (add (S O) (add (S (S (S O))) empty)))) (Equal B (add (S O) (add (S (S (S (S O)))) empty)))) (Equal B (add (S O) (add (S (S (S (S (S O))))) empty)))
+++++
left.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
do 6 left.
assert (H_card_rem:cardinal (remove 1 B)=1).
idtac.
destruct (In_dec 2 (remove 1 B)) as [H12|H12].
destruct (In_dec 3 (remove 1 B)) as [H13|H13].
destruct (In_dec 4 (remove 1 B)) as [H14|H14].
left.

*****
H14 : In (S (S (S (S O)))) (remove (S O) B)
H13 : not (In (S (S (S O))) (remove (S O) B))
H12 : not (In (S (S O)) (remove (S O) B))
H_card_rem : Logic.eq (cardinal (remove (S O) B)) (S O)
H1 : In (S O) B
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
sumor (sumbool (Equal B (add (S O) (add (S (S O)) empty))) (Equal B (add (S O) (add (S (S (S O))) empty)))) (Equal B (add (S O) (add (S (S (S (S O)))) empty)))
+++++
right.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
do 6 left.
assert (H_card_rem:cardinal (remove 1 B)=1).
idtac.
destruct (In_dec 2 (remove 1 B)) as [H12|H12].
destruct (In_dec 3 (remove 1 B)) as [H13|H13].
destruct (In_dec 4 (remove 1 B)) as [H14|H14].
left.
right.

*****
H14 : In (S (S (S (S O)))) (remove (S O) B)
H13 : not (In (S (S (S O))) (remove (S O) B))
H12 : not (In (S (S O)) (remove (S O) B))
H_card_rem : Logic.eq (cardinal (remove (S O) B)) (S O)
H1 : In (S O) B
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
Equal B (add (S O) (add (S (S (S (S O)))) empty))
+++++
rewrite <- (add_remove H1).
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
do 6 left.
assert (H_card_rem:cardinal (remove 1 B)=1).
idtac.
destruct (In_dec 2 (remove 1 B)) as [H12|H12].
destruct (In_dec 3 (remove 1 B)) as [H13|H13].
destruct (In_dec 4 (remove 1 B)) as [H14|H14].
left.
right.
rewrite <- (add_remove H1).

*****
H14 : In (S (S (S (S O)))) (remove (S O) B)
H13 : not (In (S (S (S O))) (remove (S O) B))
H12 : not (In (S (S O)) (remove (S O) B))
H_card_rem : Logic.eq (cardinal (remove (S O) B)) (S O)
H1 : In (S O) B
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
Equal (add (S O) (remove (S O) B)) (add (S O) (add (S (S (S (S O)))) empty))
+++++
rewrite <- (add_remove H14).
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
do 6 left.
assert (H_card_rem:cardinal (remove 1 B)=1).
idtac.
destruct (In_dec 2 (remove 1 B)) as [H12|H12].
destruct (In_dec 3 (remove 1 B)) as [H13|H13].
destruct (In_dec 4 (remove 1 B)) as [H14|H14].
left.
right.
rewrite <- (add_remove H1).
rewrite <- (add_remove H14).

*****
H14 : In (S (S (S (S O)))) (remove (S O) B)
H13 : not (In (S (S (S O))) (remove (S O) B))
H12 : not (In (S (S O)) (remove (S O) B))
H_card_rem : Logic.eq (cardinal (remove (S O) B)) (S O)
H1 : In (S O) B
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
Equal (add (S O) (add (S (S (S (S O)))) (remove (S (S (S (S O)))) (remove (S O) B)))) (add (S O) (add (S (S (S (S O)))) empty))
+++++
generalize (remove_cardinal_1 H14).
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
do 6 left.
assert (H_card_rem:cardinal (remove 1 B)=1).
idtac.
destruct (In_dec 2 (remove 1 B)) as [H12|H12].
destruct (In_dec 3 (remove 1 B)) as [H13|H13].
destruct (In_dec 4 (remove 1 B)) as [H14|H14].
left.
right.
rewrite <- (add_remove H1).
rewrite <- (add_remove H14).
generalize (remove_cardinal_1 H14).

*****
H14 : In (S (S (S (S O)))) (remove (S O) B)
H13 : not (In (S (S (S O))) (remove (S O) B))
H12 : not (In (S (S O)) (remove (S O) B))
H_card_rem : Logic.eq (cardinal (remove (S O) B)) (S O)
H1 : In (S O) B
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
forall _ : Logic.eq (S (cardinal (remove (S (S (S (S O)))) (remove (S O) B)))) (cardinal (remove (S O) B)), Equal (add (S O) (add (S (S (S (S O)))) (remove (S (S (S (S O)))) (remove (S O) B)))) (add (S O) (add (S (S (S (S O)))) empty))
+++++
rewrite H_card_rem.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
do 6 left.
assert (H_card_rem:cardinal (remove 1 B)=1).
idtac.
destruct (In_dec 2 (remove 1 B)) as [H12|H12].
destruct (In_dec 3 (remove 1 B)) as [H13|H13].
destruct (In_dec 4 (remove 1 B)) as [H14|H14].
left.
right.
rewrite <- (add_remove H1).
rewrite <- (add_remove H14).
generalize (remove_cardinal_1 H14).
rewrite H_card_rem.

*****
H14 : In (S (S (S (S O)))) (remove (S O) B)
H13 : not (In (S (S (S O))) (remove (S O) B))
H12 : not (In (S (S O)) (remove (S O) B))
H_card_rem : Logic.eq (cardinal (remove (S O) B)) (S O)
H1 : In (S O) B
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
forall _ : Logic.eq (S (cardinal (remove (S (S (S (S O)))) (remove (S O) B)))) (S O), Equal (add (S O) (add (S (S (S (S O)))) (remove (S (S (S (S O)))) (remove (S O) B)))) (add (S O) (add (S (S (S (S O)))) empty))
+++++
intro H_eq2.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
do 6 left.
assert (H_card_rem:cardinal (remove 1 B)=1).
idtac.
destruct (In_dec 2 (remove 1 B)) as [H12|H12].
destruct (In_dec 3 (remove 1 B)) as [H13|H13].
destruct (In_dec 4 (remove 1 B)) as [H14|H14].
left.
right.
rewrite <- (add_remove H1).
rewrite <- (add_remove H14).
generalize (remove_cardinal_1 H14).
rewrite H_card_rem.
intro H_eq2.

*****
H_eq2 : Logic.eq (S (cardinal (remove (S (S (S (S O)))) (remove (S O) B))))\n (S O)
H14 : In (S (S (S (S O)))) (remove (S O) B)
H13 : not (In (S (S (S O))) (remove (S O) B))
H12 : not (In (S (S O)) (remove (S O) B))
H_card_rem : Logic.eq (cardinal (remove (S O) B)) (S O)
H1 : In (S O) B
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
Equal (add (S O) (add (S (S (S (S O)))) (remove (S (S (S (S O)))) (remove (S O) B)))) (add (S O) (add (S (S (S (S O)))) empty))
+++++
rewrite (empty_is_empty_1 (cardinal_inv_1 (eq_add_S _ _ H_eq2))).
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
do 6 left.
assert (H_card_rem:cardinal (remove 1 B)=1).
idtac.
destruct (In_dec 2 (remove 1 B)) as [H12|H12].
destruct (In_dec 3 (remove 1 B)) as [H13|H13].
destruct (In_dec 4 (remove 1 B)) as [H14|H14].
left.
right.
rewrite <- (add_remove H1).
rewrite <- (add_remove H14).
generalize (remove_cardinal_1 H14).
rewrite H_card_rem.
intro H_eq2.
rewrite (empty_is_empty_1 (cardinal_inv_1 (eq_add_S _ _ H_eq2))).

*****
H_eq2 : Logic.eq (S (cardinal (remove (S (S (S (S O)))) (remove (S O) B))))\n (S O)
H14 : In (S (S (S (S O)))) (remove (S O) B)
H13 : not (In (S (S (S O))) (remove (S O) B))
H12 : not (In (S (S O)) (remove (S O) B))
H_card_rem : Logic.eq (cardinal (remove (S O) B)) (S O)
H1 : In (S O) B
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
Equal (add (S O) (add (S (S (S (S O)))) empty)) (add (S O) (add (S (S (S (S O)))) empty))
+++++
reflexivity.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
do 6 left.
assert (H_card_rem:cardinal (remove 1 B)=1).
idtac.
destruct (In_dec 2 (remove 1 B)) as [H12|H12].
destruct (In_dec 3 (remove 1 B)) as [H13|H13].
destruct (In_dec 4 (remove 1 B)) as [H14|H14].

*****
H14 : not (In (S (S (S (S O)))) (remove (S O) B))
H13 : not (In (S (S (S O))) (remove (S O) B))
H12 : not (In (S (S O)) (remove (S O) B))
H_card_rem : Logic.eq (cardinal (remove (S O) B)) (S O)
H1 : In (S O) B
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
sumor (sumor (sumbool (Equal B (add (S O) (add (S (S O)) empty))) (Equal B (add (S O) (add (S (S (S O))) empty)))) (Equal B (add (S O) (add (S (S (S (S O)))) empty)))) (Equal B (add (S O) (add (S (S (S (S (S O))))) empty)))
+++++
destruct (In_dec 5 (remove 1 B)) as [H15|H15].
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
do 6 left.
assert (H_card_rem:cardinal (remove 1 B)=1).
idtac.
destruct (In_dec 2 (remove 1 B)) as [H12|H12].
destruct (In_dec 3 (remove 1 B)) as [H13|H13].
destruct (In_dec 4 (remove 1 B)) as [H14|H14].
destruct (In_dec 5 (remove 1 B)) as [H15|H15].

*****
H15 : In (S (S (S (S (S O))))) (remove (S O) B)
H14 : not (In (S (S (S (S O)))) (remove (S O) B))
H13 : not (In (S (S (S O))) (remove (S O) B))
H12 : not (In (S (S O)) (remove (S O) B))
H_card_rem : Logic.eq (cardinal (remove (S O) B)) (S O)
H1 : In (S O) B
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
sumor (sumor (sumbool (Equal B (add (S O) (add (S (S O)) empty))) (Equal B (add (S O) (add (S (S (S O))) empty)))) (Equal B (add (S O) (add (S (S (S (S O)))) empty)))) (Equal B (add (S O) (add (S (S (S (S (S O))))) empty)))
+++++
right.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
do 6 left.
assert (H_card_rem:cardinal (remove 1 B)=1).
idtac.
destruct (In_dec 2 (remove 1 B)) as [H12|H12].
destruct (In_dec 3 (remove 1 B)) as [H13|H13].
destruct (In_dec 4 (remove 1 B)) as [H14|H14].
destruct (In_dec 5 (remove 1 B)) as [H15|H15].
right.

*****
H15 : In (S (S (S (S (S O))))) (remove (S O) B)
H14 : not (In (S (S (S (S O)))) (remove (S O) B))
H13 : not (In (S (S (S O))) (remove (S O) B))
H12 : not (In (S (S O)) (remove (S O) B))
H_card_rem : Logic.eq (cardinal (remove (S O) B)) (S O)
H1 : In (S O) B
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
Equal B (add (S O) (add (S (S (S (S (S O))))) empty))
+++++
rewrite <- (add_remove H1).
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
do 6 left.
assert (H_card_rem:cardinal (remove 1 B)=1).
idtac.
destruct (In_dec 2 (remove 1 B)) as [H12|H12].
destruct (In_dec 3 (remove 1 B)) as [H13|H13].
destruct (In_dec 4 (remove 1 B)) as [H14|H14].
destruct (In_dec 5 (remove 1 B)) as [H15|H15].
right.
rewrite <- (add_remove H1).

*****
H15 : In (S (S (S (S (S O))))) (remove (S O) B)
H14 : not (In (S (S (S (S O)))) (remove (S O) B))
H13 : not (In (S (S (S O))) (remove (S O) B))
H12 : not (In (S (S O)) (remove (S O) B))
H_card_rem : Logic.eq (cardinal (remove (S O) B)) (S O)
H1 : In (S O) B
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
Equal (add (S O) (remove (S O) B)) (add (S O) (add (S (S (S (S (S O))))) empty))
+++++
rewrite <- (add_remove H15).
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
do 6 left.
assert (H_card_rem:cardinal (remove 1 B)=1).
idtac.
destruct (In_dec 2 (remove 1 B)) as [H12|H12].
destruct (In_dec 3 (remove 1 B)) as [H13|H13].
destruct (In_dec 4 (remove 1 B)) as [H14|H14].
destruct (In_dec 5 (remove 1 B)) as [H15|H15].
right.
rewrite <- (add_remove H1).
rewrite <- (add_remove H15).

*****
H15 : In (S (S (S (S (S O))))) (remove (S O) B)
H14 : not (In (S (S (S (S O)))) (remove (S O) B))
H13 : not (In (S (S (S O))) (remove (S O) B))
H12 : not (In (S (S O)) (remove (S O) B))
H_card_rem : Logic.eq (cardinal (remove (S O) B)) (S O)
H1 : In (S O) B
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
Equal (add (S O) (add (S (S (S (S (S O))))) (remove (S (S (S (S (S O))))) (remove (S O) B)))) (add (S O) (add (S (S (S (S (S O))))) empty))
+++++
generalize (remove_cardinal_1 H15).
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
do 6 left.
assert (H_card_rem:cardinal (remove 1 B)=1).
idtac.
destruct (In_dec 2 (remove 1 B)) as [H12|H12].
destruct (In_dec 3 (remove 1 B)) as [H13|H13].
destruct (In_dec 4 (remove 1 B)) as [H14|H14].
destruct (In_dec 5 (remove 1 B)) as [H15|H15].
right.
rewrite <- (add_remove H1).
rewrite <- (add_remove H15).
generalize (remove_cardinal_1 H15).

*****
H15 : In (S (S (S (S (S O))))) (remove (S O) B)
H14 : not (In (S (S (S (S O)))) (remove (S O) B))
H13 : not (In (S (S (S O))) (remove (S O) B))
H12 : not (In (S (S O)) (remove (S O) B))
H_card_rem : Logic.eq (cardinal (remove (S O) B)) (S O)
H1 : In (S O) B
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
forall _ : Logic.eq (S (cardinal (remove (S (S (S (S (S O))))) (remove (S O) B)))) (cardinal (remove (S O) B)), Equal (add (S O) (add (S (S (S (S (S O))))) (remove (S (S (S (S (S O))))) (remove (S O) B)))) (add (S O) (add (S (S (S (S (S O))))) empty))
+++++
rewrite H_card_rem.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
do 6 left.
assert (H_card_rem:cardinal (remove 1 B)=1).
idtac.
destruct (In_dec 2 (remove 1 B)) as [H12|H12].
destruct (In_dec 3 (remove 1 B)) as [H13|H13].
destruct (In_dec 4 (remove 1 B)) as [H14|H14].
destruct (In_dec 5 (remove 1 B)) as [H15|H15].
right.
rewrite <- (add_remove H1).
rewrite <- (add_remove H15).
generalize (remove_cardinal_1 H15).
rewrite H_card_rem.

*****
H15 : In (S (S (S (S (S O))))) (remove (S O) B)
H14 : not (In (S (S (S (S O)))) (remove (S O) B))
H13 : not (In (S (S (S O))) (remove (S O) B))
H12 : not (In (S (S O)) (remove (S O) B))
H_card_rem : Logic.eq (cardinal (remove (S O) B)) (S O)
H1 : In (S O) B
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
forall _ : Logic.eq (S (cardinal (remove (S (S (S (S (S O))))) (remove (S O) B)))) (S O), Equal (add (S O) (add (S (S (S (S (S O))))) (remove (S (S (S (S (S O))))) (remove (S O) B)))) (add (S O) (add (S (S (S (S (S O))))) empty))
+++++
intro H_eq2.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
do 6 left.
assert (H_card_rem:cardinal (remove 1 B)=1).
idtac.
destruct (In_dec 2 (remove 1 B)) as [H12|H12].
destruct (In_dec 3 (remove 1 B)) as [H13|H13].
destruct (In_dec 4 (remove 1 B)) as [H14|H14].
destruct (In_dec 5 (remove 1 B)) as [H15|H15].
right.
rewrite <- (add_remove H1).
rewrite <- (add_remove H15).
generalize (remove_cardinal_1 H15).
rewrite H_card_rem.
intro H_eq2.

*****
H_eq2 : Logic.eq (S (cardinal (remove (S (S (S (S (S O))))) (remove (S O) B))))\n (S O)
H15 : In (S (S (S (S (S O))))) (remove (S O) B)
H14 : not (In (S (S (S (S O)))) (remove (S O) B))
H13 : not (In (S (S (S O))) (remove (S O) B))
H12 : not (In (S (S O)) (remove (S O) B))
H_card_rem : Logic.eq (cardinal (remove (S O) B)) (S O)
H1 : In (S O) B
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
Equal (add (S O) (add (S (S (S (S (S O))))) (remove (S (S (S (S (S O))))) (remove (S O) B)))) (add (S O) (add (S (S (S (S (S O))))) empty))
+++++
rewrite (empty_is_empty_1 (cardinal_inv_1 (eq_add_S _ _ H_eq2))).
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
do 6 left.
assert (H_card_rem:cardinal (remove 1 B)=1).
idtac.
destruct (In_dec 2 (remove 1 B)) as [H12|H12].
destruct (In_dec 3 (remove 1 B)) as [H13|H13].
destruct (In_dec 4 (remove 1 B)) as [H14|H14].
destruct (In_dec 5 (remove 1 B)) as [H15|H15].
right.
rewrite <- (add_remove H1).
rewrite <- (add_remove H15).
generalize (remove_cardinal_1 H15).
rewrite H_card_rem.
intro H_eq2.
rewrite (empty_is_empty_1 (cardinal_inv_1 (eq_add_S _ _ H_eq2))).

*****
H_eq2 : Logic.eq (S (cardinal (remove (S (S (S (S (S O))))) (remove (S O) B))))\n (S O)
H15 : In (S (S (S (S (S O))))) (remove (S O) B)
H14 : not (In (S (S (S (S O)))) (remove (S O) B))
H13 : not (In (S (S (S O))) (remove (S O) B))
H12 : not (In (S (S O)) (remove (S O) B))
H_card_rem : Logic.eq (cardinal (remove (S O) B)) (S O)
H1 : In (S O) B
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
Equal (add (S O) (add (S (S (S (S (S O))))) empty)) (add (S O) (add (S (S (S (S (S O))))) empty))
+++++
reflexivity.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
do 6 left.
assert (H_card_rem:cardinal (remove 1 B)=1).
idtac.
destruct (In_dec 2 (remove 1 B)) as [H12|H12].
destruct (In_dec 3 (remove 1 B)) as [H13|H13].
destruct (In_dec 4 (remove 1 B)) as [H14|H14].
destruct (In_dec 5 (remove 1 B)) as [H15|H15].

*****
H15 : not (In (S (S (S (S (S O))))) (remove (S O) B))
H14 : not (In (S (S (S (S O)))) (remove (S O) B))
H13 : not (In (S (S (S O))) (remove (S O) B))
H12 : not (In (S (S O)) (remove (S O) B))
H_card_rem : Logic.eq (cardinal (remove (S O) B)) (S O)
H1 : In (S O) B
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
sumor (sumor (sumbool (Equal B (add (S O) (add (S (S O)) empty))) (Equal B (add (S O) (add (S (S (S O))) empty)))) (Equal B (add (S O) (add (S (S (S (S O)))) empty)))) (Equal B (add (S O) (add (S (S (S (S (S O))))) empty)))
+++++
apply False_rec.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
do 6 left.
assert (H_card_rem:cardinal (remove 1 B)=1).
idtac.
destruct (In_dec 2 (remove 1 B)) as [H12|H12].
destruct (In_dec 3 (remove 1 B)) as [H13|H13].
destruct (In_dec 4 (remove 1 B)) as [H14|H14].
destruct (In_dec 5 (remove 1 B)) as [H15|H15].
apply False_rec.

*****
H15 : not (In (S (S (S (S (S O))))) (remove (S O) B))
H14 : not (In (S (S (S (S O)))) (remove (S O) B))
H13 : not (In (S (S (S O))) (remove (S O) B))
H12 : not (In (S (S O)) (remove (S O) B))
H_card_rem : Logic.eq (cardinal (remove (S O) B)) (S O)
H1 : In (S O) B
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
assert (H11:=(@remove_1 B _ _ (refl_equal 1))).
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
do 6 left.
assert (H_card_rem:cardinal (remove 1 B)=1).
idtac.
destruct (In_dec 2 (remove 1 B)) as [H12|H12].
destruct (In_dec 3 (remove 1 B)) as [H13|H13].
destruct (In_dec 4 (remove 1 B)) as [H14|H14].
destruct (In_dec 5 (remove 1 B)) as [H15|H15].
apply False_rec.
assert (H11:=(@remove_1 B _ _ (refl_equal 1))).

*****
H11 : not (In (S O) (remove (S O) B))
H15 : not (In (S (S (S (S (S O))))) (remove (S O) B))
H14 : not (In (S (S (S (S O)))) (remove (S O) B))
H13 : not (In (S (S (S O))) (remove (S O) B))
H12 : not (In (S (S O)) (remove (S O) B))
H_card_rem : Logic.eq (cardinal (remove (S O) B)) (S O)
H1 : In (S O) B
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
do 6 left.
assert (H_card_rem:cardinal (remove 1 B)=1).
idtac.
destruct (In_dec 2 (remove 1 B)) as [H12|H12].
destruct (In_dec 3 (remove 1 B)) as [H13|H13].
destruct (In_dec 4 (remove 1 B)) as [H14|H14].
destruct (In_dec 5 (remove 1 B)) as [H15|H15].
apply False_rec.
assert (H11:=(@remove_1 B _ _ (refl_equal 1))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].

*****
Hb : In b (remove (S O) B)
b : elt
H11 : not (In (S O) (remove (S O) B))
H15 : not (In (S (S (S (S (S O))))) (remove (S O) B))
H14 : not (In (S (S (S (S O)))) (remove (S O) B))
H13 : not (In (S (S (S O))) (remove (S O) B))
H12 : not (In (S (S O)) (remove (S O) B))
H_card_rem : Logic.eq (cardinal (remove (S O) B)) (S O)
H1 : In (S O) B
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
do 6 left.
assert (H_card_rem:cardinal (remove 1 B)=1).
idtac.
destruct (In_dec 2 (remove 1 B)) as [H12|H12].
destruct (In_dec 3 (remove 1 B)) as [H13|H13].
destruct (In_dec 4 (remove 1 B)) as [H14|H14].
destruct (In_dec 5 (remove 1 B)) as [H15|H15].
apply False_rec.
assert (H11:=(@remove_1 B _ _ (refl_equal 1))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].

*****
Hb1 : Logic.eq b (S O)
Hb : In b (remove (S O) B)
b : elt
H11 : not (In (S O) (remove (S O) B))
H15 : not (In (S (S (S (S (S O))))) (remove (S O) B))
H14 : not (In (S (S (S (S O)))) (remove (S O) B))
H13 : not (In (S (S (S O))) (remove (S O) B))
H12 : not (In (S (S O)) (remove (S O) B))
H_card_rem : Logic.eq (cardinal (remove (S O) B)) (S O)
H1 : In (S O) B
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
apply H11.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
do 6 left.
assert (H_card_rem:cardinal (remove 1 B)=1).
idtac.
destruct (In_dec 2 (remove 1 B)) as [H12|H12].
destruct (In_dec 3 (remove 1 B)) as [H13|H13].
destruct (In_dec 4 (remove 1 B)) as [H14|H14].
destruct (In_dec 5 (remove 1 B)) as [H15|H15].
apply False_rec.
assert (H11:=(@remove_1 B _ _ (refl_equal 1))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
apply H11.

*****
Hb1 : Logic.eq b (S O)
Hb : In b (remove (S O) B)
b : elt
H11 : not (In (S O) (remove (S O) B))
H15 : not (In (S (S (S (S (S O))))) (remove (S O) B))
H14 : not (In (S (S (S (S O)))) (remove (S O) B))
H13 : not (In (S (S (S O))) (remove (S O) B))
H12 : not (In (S (S O)) (remove (S O) B))
H_card_rem : Logic.eq (cardinal (remove (S O) B)) (S O)
H1 : In (S O) B
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
In (S O) (remove (S O) B)
+++++
rewrite Hb1 in Hb.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
do 6 left.
assert (H_card_rem:cardinal (remove 1 B)=1).
idtac.
destruct (In_dec 2 (remove 1 B)) as [H12|H12].
destruct (In_dec 3 (remove 1 B)) as [H13|H13].
destruct (In_dec 4 (remove 1 B)) as [H14|H14].
destruct (In_dec 5 (remove 1 B)) as [H15|H15].
apply False_rec.
assert (H11:=(@remove_1 B _ _ (refl_equal 1))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
apply H11.
rewrite Hb1 in Hb.

*****
Hb1 : Logic.eq b (S O)
Hb : In (S O) (remove (S O) B)
b : elt
H11 : not (In (S O) (remove (S O) B))
H15 : not (In (S (S (S (S (S O))))) (remove (S O) B))
H14 : not (In (S (S (S (S O)))) (remove (S O) B))
H13 : not (In (S (S (S O))) (remove (S O) B))
H12 : not (In (S (S O)) (remove (S O) B))
H_card_rem : Logic.eq (cardinal (remove (S O) B)) (S O)
H1 : In (S O) B
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
In (S O) (remove (S O) B)
+++++
assumption.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
do 6 left.
assert (H_card_rem:cardinal (remove 1 B)=1).
idtac.
destruct (In_dec 2 (remove 1 B)) as [H12|H12].
destruct (In_dec 3 (remove 1 B)) as [H13|H13].
destruct (In_dec 4 (remove 1 B)) as [H14|H14].
destruct (In_dec 5 (remove 1 B)) as [H15|H15].
apply False_rec.
assert (H11:=(@remove_1 B _ _ (refl_equal 1))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].

*****
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S O) B)
b : elt
H11 : not (In (S O) (remove (S O) B))
H15 : not (In (S (S (S (S (S O))))) (remove (S O) B))
H14 : not (In (S (S (S (S O)))) (remove (S O) B))
H13 : not (In (S (S (S O))) (remove (S O) B))
H12 : not (In (S (S O)) (remove (S O) B))
H_card_rem : Logic.eq (cardinal (remove (S O) B)) (S O)
H1 : In (S O) B
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
do 6 left.
assert (H_card_rem:cardinal (remove 1 B)=1).
idtac.
destruct (In_dec 2 (remove 1 B)) as [H12|H12].
destruct (In_dec 3 (remove 1 B)) as [H13|H13].
destruct (In_dec 4 (remove 1 B)) as [H14|H14].
destruct (In_dec 5 (remove 1 B)) as [H15|H15].
apply False_rec.
assert (H11:=(@remove_1 B _ _ (refl_equal 1))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].

*****
Hb2 : Logic.eq b (S (S O))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S O) B)
b : elt
H11 : not (In (S O) (remove (S O) B))
H15 : not (In (S (S (S (S (S O))))) (remove (S O) B))
H14 : not (In (S (S (S (S O)))) (remove (S O) B))
H13 : not (In (S (S (S O))) (remove (S O) B))
H12 : not (In (S (S O)) (remove (S O) B))
H_card_rem : Logic.eq (cardinal (remove (S O) B)) (S O)
H1 : In (S O) B
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
apply H12.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
do 6 left.
assert (H_card_rem:cardinal (remove 1 B)=1).
idtac.
destruct (In_dec 2 (remove 1 B)) as [H12|H12].
destruct (In_dec 3 (remove 1 B)) as [H13|H13].
destruct (In_dec 4 (remove 1 B)) as [H14|H14].
destruct (In_dec 5 (remove 1 B)) as [H15|H15].
apply False_rec.
assert (H11:=(@remove_1 B _ _ (refl_equal 1))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
apply H12.

*****
Hb2 : Logic.eq b (S (S O))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S O) B)
b : elt
H11 : not (In (S O) (remove (S O) B))
H15 : not (In (S (S (S (S (S O))))) (remove (S O) B))
H14 : not (In (S (S (S (S O)))) (remove (S O) B))
H13 : not (In (S (S (S O))) (remove (S O) B))
H12 : not (In (S (S O)) (remove (S O) B))
H_card_rem : Logic.eq (cardinal (remove (S O) B)) (S O)
H1 : In (S O) B
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
In (S (S O)) (remove (S O) B)
+++++
rewrite <- Hb2.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
do 6 left.
assert (H_card_rem:cardinal (remove 1 B)=1).
idtac.
destruct (In_dec 2 (remove 1 B)) as [H12|H12].
destruct (In_dec 3 (remove 1 B)) as [H13|H13].
destruct (In_dec 4 (remove 1 B)) as [H14|H14].
destruct (In_dec 5 (remove 1 B)) as [H15|H15].
apply False_rec.
assert (H11:=(@remove_1 B _ _ (refl_equal 1))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
apply H12.
rewrite <- Hb2.

*****
Hb2 : Logic.eq b (S (S O))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S O) B)
b : elt
H11 : not (In (S O) (remove (S O) B))
H15 : not (In (S (S (S (S (S O))))) (remove (S O) B))
H14 : not (In (S (S (S (S O)))) (remove (S O) B))
H13 : not (In (S (S (S O))) (remove (S O) B))
H12 : not (In (S (S O)) (remove (S O) B))
H_card_rem : Logic.eq (cardinal (remove (S O) B)) (S O)
H1 : In (S O) B
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
In b (remove (S O) B)
+++++
assumption.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
do 6 left.
assert (H_card_rem:cardinal (remove 1 B)=1).
idtac.
destruct (In_dec 2 (remove 1 B)) as [H12|H12].
destruct (In_dec 3 (remove 1 B)) as [H13|H13].
destruct (In_dec 4 (remove 1 B)) as [H14|H14].
destruct (In_dec 5 (remove 1 B)) as [H15|H15].
apply False_rec.
assert (H11:=(@remove_1 B _ _ (refl_equal 1))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].

*****
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S O) B)
b : elt
H11 : not (In (S O) (remove (S O) B))
H15 : not (In (S (S (S (S (S O))))) (remove (S O) B))
H14 : not (In (S (S (S (S O)))) (remove (S O) B))
H13 : not (In (S (S (S O))) (remove (S O) B))
H12 : not (In (S (S O)) (remove (S O) B))
H_card_rem : Logic.eq (cardinal (remove (S O) B)) (S O)
H1 : In (S O) B
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
do 6 left.
assert (H_card_rem:cardinal (remove 1 B)=1).
idtac.
destruct (In_dec 2 (remove 1 B)) as [H12|H12].
destruct (In_dec 3 (remove 1 B)) as [H13|H13].
destruct (In_dec 4 (remove 1 B)) as [H14|H14].
destruct (In_dec 5 (remove 1 B)) as [H15|H15].
apply False_rec.
assert (H11:=(@remove_1 B _ _ (refl_equal 1))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].

*****
Hb3 : Logic.eq b (S (S (S O)))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S O) B)
b : elt
H11 : not (In (S O) (remove (S O) B))
H15 : not (In (S (S (S (S (S O))))) (remove (S O) B))
H14 : not (In (S (S (S (S O)))) (remove (S O) B))
H13 : not (In (S (S (S O))) (remove (S O) B))
H12 : not (In (S (S O)) (remove (S O) B))
H_card_rem : Logic.eq (cardinal (remove (S O) B)) (S O)
H1 : In (S O) B
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
apply H13.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
do 6 left.
assert (H_card_rem:cardinal (remove 1 B)=1).
idtac.
destruct (In_dec 2 (remove 1 B)) as [H12|H12].
destruct (In_dec 3 (remove 1 B)) as [H13|H13].
destruct (In_dec 4 (remove 1 B)) as [H14|H14].
destruct (In_dec 5 (remove 1 B)) as [H15|H15].
apply False_rec.
assert (H11:=(@remove_1 B _ _ (refl_equal 1))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
apply H13.

*****
Hb3 : Logic.eq b (S (S (S O)))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S O) B)
b : elt
H11 : not (In (S O) (remove (S O) B))
H15 : not (In (S (S (S (S (S O))))) (remove (S O) B))
H14 : not (In (S (S (S (S O)))) (remove (S O) B))
H13 : not (In (S (S (S O))) (remove (S O) B))
H12 : not (In (S (S O)) (remove (S O) B))
H_card_rem : Logic.eq (cardinal (remove (S O) B)) (S O)
H1 : In (S O) B
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
In (S (S (S O))) (remove (S O) B)
+++++
rewrite <- Hb3.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
do 6 left.
assert (H_card_rem:cardinal (remove 1 B)=1).
idtac.
destruct (In_dec 2 (remove 1 B)) as [H12|H12].
destruct (In_dec 3 (remove 1 B)) as [H13|H13].
destruct (In_dec 4 (remove 1 B)) as [H14|H14].
destruct (In_dec 5 (remove 1 B)) as [H15|H15].
apply False_rec.
assert (H11:=(@remove_1 B _ _ (refl_equal 1))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
apply H13.
rewrite <- Hb3.

*****
Hb3 : Logic.eq b (S (S (S O)))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S O) B)
b : elt
H11 : not (In (S O) (remove (S O) B))
H15 : not (In (S (S (S (S (S O))))) (remove (S O) B))
H14 : not (In (S (S (S (S O)))) (remove (S O) B))
H13 : not (In (S (S (S O))) (remove (S O) B))
H12 : not (In (S (S O)) (remove (S O) B))
H_card_rem : Logic.eq (cardinal (remove (S O) B)) (S O)
H1 : In (S O) B
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
In b (remove (S O) B)
+++++
assumption.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
do 6 left.
assert (H_card_rem:cardinal (remove 1 B)=1).
idtac.
destruct (In_dec 2 (remove 1 B)) as [H12|H12].
destruct (In_dec 3 (remove 1 B)) as [H13|H13].
destruct (In_dec 4 (remove 1 B)) as [H14|H14].
destruct (In_dec 5 (remove 1 B)) as [H15|H15].
apply False_rec.
assert (H11:=(@remove_1 B _ _ (refl_equal 1))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].

*****
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S O) B)
b : elt
H11 : not (In (S O) (remove (S O) B))
H15 : not (In (S (S (S (S (S O))))) (remove (S O) B))
H14 : not (In (S (S (S (S O)))) (remove (S O) B))
H13 : not (In (S (S (S O))) (remove (S O) B))
H12 : not (In (S (S O)) (remove (S O) B))
H_card_rem : Logic.eq (cardinal (remove (S O) B)) (S O)
H1 : In (S O) B
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
do 6 left.
assert (H_card_rem:cardinal (remove 1 B)=1).
idtac.
destruct (In_dec 2 (remove 1 B)) as [H12|H12].
destruct (In_dec 3 (remove 1 B)) as [H13|H13].
destruct (In_dec 4 (remove 1 B)) as [H14|H14].
destruct (In_dec 5 (remove 1 B)) as [H15|H15].
apply False_rec.
assert (H11:=(@remove_1 B _ _ (refl_equal 1))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].

*****
Hb4 : Logic.eq b (S (S (S (S O))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S O) B)
b : elt
H11 : not (In (S O) (remove (S O) B))
H15 : not (In (S (S (S (S (S O))))) (remove (S O) B))
H14 : not (In (S (S (S (S O)))) (remove (S O) B))
H13 : not (In (S (S (S O))) (remove (S O) B))
H12 : not (In (S (S O)) (remove (S O) B))
H_card_rem : Logic.eq (cardinal (remove (S O) B)) (S O)
H1 : In (S O) B
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
apply H14.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
do 6 left.
assert (H_card_rem:cardinal (remove 1 B)=1).
idtac.
destruct (In_dec 2 (remove 1 B)) as [H12|H12].
destruct (In_dec 3 (remove 1 B)) as [H13|H13].
destruct (In_dec 4 (remove 1 B)) as [H14|H14].
destruct (In_dec 5 (remove 1 B)) as [H15|H15].
apply False_rec.
assert (H11:=(@remove_1 B _ _ (refl_equal 1))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
apply H14.

*****
Hb4 : Logic.eq b (S (S (S (S O))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S O) B)
b : elt
H11 : not (In (S O) (remove (S O) B))
H15 : not (In (S (S (S (S (S O))))) (remove (S O) B))
H14 : not (In (S (S (S (S O)))) (remove (S O) B))
H13 : not (In (S (S (S O))) (remove (S O) B))
H12 : not (In (S (S O)) (remove (S O) B))
H_card_rem : Logic.eq (cardinal (remove (S O) B)) (S O)
H1 : In (S O) B
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
In (S (S (S (S O)))) (remove (S O) B)
+++++
rewrite <- Hb4.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
do 6 left.
assert (H_card_rem:cardinal (remove 1 B)=1).
idtac.
destruct (In_dec 2 (remove 1 B)) as [H12|H12].
destruct (In_dec 3 (remove 1 B)) as [H13|H13].
destruct (In_dec 4 (remove 1 B)) as [H14|H14].
destruct (In_dec 5 (remove 1 B)) as [H15|H15].
apply False_rec.
assert (H11:=(@remove_1 B _ _ (refl_equal 1))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
apply H14.
rewrite <- Hb4.

*****
Hb4 : Logic.eq b (S (S (S (S O))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S O) B)
b : elt
H11 : not (In (S O) (remove (S O) B))
H15 : not (In (S (S (S (S (S O))))) (remove (S O) B))
H14 : not (In (S (S (S (S O)))) (remove (S O) B))
H13 : not (In (S (S (S O))) (remove (S O) B))
H12 : not (In (S (S O)) (remove (S O) B))
H_card_rem : Logic.eq (cardinal (remove (S O) B)) (S O)
H1 : In (S O) B
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
In b (remove (S O) B)
+++++
assumption.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
do 6 left.
assert (H_card_rem:cardinal (remove 1 B)=1).
idtac.
destruct (In_dec 2 (remove 1 B)) as [H12|H12].
destruct (In_dec 3 (remove 1 B)) as [H13|H13].
destruct (In_dec 4 (remove 1 B)) as [H14|H14].
destruct (In_dec 5 (remove 1 B)) as [H15|H15].
apply False_rec.
assert (H11:=(@remove_1 B _ _ (refl_equal 1))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].

*****
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S O) B)
b : elt
H11 : not (In (S O) (remove (S O) B))
H15 : not (In (S (S (S (S (S O))))) (remove (S O) B))
H14 : not (In (S (S (S (S O)))) (remove (S O) B))
H13 : not (In (S (S (S O))) (remove (S O) B))
H12 : not (In (S (S O)) (remove (S O) B))
H_card_rem : Logic.eq (cardinal (remove (S O) B)) (S O)
H1 : In (S O) B
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
do 6 left.
assert (H_card_rem:cardinal (remove 1 B)=1).
idtac.
destruct (In_dec 2 (remove 1 B)) as [H12|H12].
destruct (In_dec 3 (remove 1 B)) as [H13|H13].
destruct (In_dec 4 (remove 1 B)) as [H14|H14].
destruct (In_dec 5 (remove 1 B)) as [H15|H15].
apply False_rec.
assert (H11:=(@remove_1 B _ _ (refl_equal 1))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].

*****
Hb5 : Logic.eq b (S (S (S (S (S O)))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S O) B)
b : elt
H11 : not (In (S O) (remove (S O) B))
H15 : not (In (S (S (S (S (S O))))) (remove (S O) B))
H14 : not (In (S (S (S (S O)))) (remove (S O) B))
H13 : not (In (S (S (S O))) (remove (S O) B))
H12 : not (In (S (S O)) (remove (S O) B))
H_card_rem : Logic.eq (cardinal (remove (S O) B)) (S O)
H1 : In (S O) B
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
apply H15.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
do 6 left.
assert (H_card_rem:cardinal (remove 1 B)=1).
idtac.
destruct (In_dec 2 (remove 1 B)) as [H12|H12].
destruct (In_dec 3 (remove 1 B)) as [H13|H13].
destruct (In_dec 4 (remove 1 B)) as [H14|H14].
destruct (In_dec 5 (remove 1 B)) as [H15|H15].
apply False_rec.
assert (H11:=(@remove_1 B _ _ (refl_equal 1))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].
apply H15.

*****
Hb5 : Logic.eq b (S (S (S (S (S O)))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S O) B)
b : elt
H11 : not (In (S O) (remove (S O) B))
H15 : not (In (S (S (S (S (S O))))) (remove (S O) B))
H14 : not (In (S (S (S (S O)))) (remove (S O) B))
H13 : not (In (S (S (S O))) (remove (S O) B))
H12 : not (In (S (S O)) (remove (S O) B))
H_card_rem : Logic.eq (cardinal (remove (S O) B)) (S O)
H1 : In (S O) B
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
In (S (S (S (S (S O))))) (remove (S O) B)
+++++
rewrite <- Hb5.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
do 6 left.
assert (H_card_rem:cardinal (remove 1 B)=1).
idtac.
destruct (In_dec 2 (remove 1 B)) as [H12|H12].
destruct (In_dec 3 (remove 1 B)) as [H13|H13].
destruct (In_dec 4 (remove 1 B)) as [H14|H14].
destruct (In_dec 5 (remove 1 B)) as [H15|H15].
apply False_rec.
assert (H11:=(@remove_1 B _ _ (refl_equal 1))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].
apply H15.
rewrite <- Hb5.

*****
Hb5 : Logic.eq b (S (S (S (S (S O)))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S O) B)
b : elt
H11 : not (In (S O) (remove (S O) B))
H15 : not (In (S (S (S (S (S O))))) (remove (S O) B))
H14 : not (In (S (S (S (S O)))) (remove (S O) B))
H13 : not (In (S (S (S O))) (remove (S O) B))
H12 : not (In (S (S O)) (remove (S O) B))
H_card_rem : Logic.eq (cardinal (remove (S O) B)) (S O)
H1 : In (S O) B
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
In b (remove (S O) B)
+++++
assumption.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
do 6 left.
assert (H_card_rem:cardinal (remove 1 B)=1).
idtac.
destruct (In_dec 2 (remove 1 B)) as [H12|H12].
destruct (In_dec 3 (remove 1 B)) as [H13|H13].
destruct (In_dec 4 (remove 1 B)) as [H14|H14].
destruct (In_dec 5 (remove 1 B)) as [H15|H15].
apply False_rec.
assert (H11:=(@remove_1 B _ _ (refl_equal 1))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].

*****
Hb5 : not (Logic.eq b (S (S (S (S (S O))))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S O) B)
b : elt
H11 : not (In (S O) (remove (S O) B))
H15 : not (In (S (S (S (S (S O))))) (remove (S O) B))
H14 : not (In (S (S (S (S O)))) (remove (S O) B))
H13 : not (In (S (S (S O))) (remove (S O) B))
H12 : not (In (S (S O)) (remove (S O) B))
H_card_rem : Logic.eq (cardinal (remove (S O) B)) (S O)
H1 : In (S O) B
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
assert (H_sub':=@subset_remove_3 _ _ 1 H_sub).
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
do 6 left.
assert (H_card_rem:cardinal (remove 1 B)=1).
idtac.
destruct (In_dec 2 (remove 1 B)) as [H12|H12].
destruct (In_dec 3 (remove 1 B)) as [H13|H13].
destruct (In_dec 4 (remove 1 B)) as [H14|H14].
destruct (In_dec 5 (remove 1 B)) as [H15|H15].
apply False_rec.
assert (H11:=(@remove_1 B _ _ (refl_equal 1))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].
assert (H_sub':=@subset_remove_3 _ _ 1 H_sub).

*****
H_sub' : Subset (remove (S O) B) town_2
Hb5 : not (Logic.eq b (S (S (S (S (S O))))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S O) B)
b : elt
H11 : not (In (S O) (remove (S O) B))
H15 : not (In (S (S (S (S (S O))))) (remove (S O) B))
H14 : not (In (S (S (S (S O)))) (remove (S O) B))
H13 : not (In (S (S (S O))) (remove (S O) B))
H12 : not (In (S (S O)) (remove (S O) B))
H_card_rem : Logic.eq (cardinal (remove (S O) B)) (S O)
H1 : In (S O) B
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
assert (Hb_town:=H_sub' _ Hb).
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
do 6 left.
assert (H_card_rem:cardinal (remove 1 B)=1).
idtac.
destruct (In_dec 2 (remove 1 B)) as [H12|H12].
destruct (In_dec 3 (remove 1 B)) as [H13|H13].
destruct (In_dec 4 (remove 1 B)) as [H14|H14].
destruct (In_dec 5 (remove 1 B)) as [H15|H15].
apply False_rec.
assert (H11:=(@remove_1 B _ _ (refl_equal 1))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].
assert (H_sub':=@subset_remove_3 _ _ 1 H_sub).
assert (Hb_town:=H_sub' _ Hb).

*****
Hb_town : In b town_2
H_sub' : Subset (remove (S O) B) town_2
Hb5 : not (Logic.eq b (S (S (S (S (S O))))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S O) B)
b : elt
H11 : not (In (S O) (remove (S O) B))
H15 : not (In (S (S (S (S (S O))))) (remove (S O) B))
H14 : not (In (S (S (S (S O)))) (remove (S O) B))
H13 : not (In (S (S (S O))) (remove (S O) B))
H12 : not (In (S (S O)) (remove (S O) B))
H_card_rem : Logic.eq (cardinal (remove (S O) B)) (S O)
H1 : In (S O) B
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
unfold town_2 in Hb_town.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
do 6 left.
assert (H_card_rem:cardinal (remove 1 B)=1).
idtac.
destruct (In_dec 2 (remove 1 B)) as [H12|H12].
destruct (In_dec 3 (remove 1 B)) as [H13|H13].
destruct (In_dec 4 (remove 1 B)) as [H14|H14].
destruct (In_dec 5 (remove 1 B)) as [H15|H15].
apply False_rec.
assert (H11:=(@remove_1 B _ _ (refl_equal 1))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].
assert (H_sub':=@subset_remove_3 _ _ 1 H_sub).
assert (Hb_town:=H_sub' _ Hb).
unfold town_2 in Hb_town.

*****
Hb_town : In b\n (add (S O)\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))))
H_sub' : Subset (remove (S O) B) town_2
Hb5 : not (Logic.eq b (S (S (S (S (S O))))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S O) B)
b : elt
H11 : not (In (S O) (remove (S O) B))
H15 : not (In (S (S (S (S (S O))))) (remove (S O) B))
H14 : not (In (S (S (S (S O)))) (remove (S O) B))
H13 : not (In (S (S (S O))) (remove (S O) B))
H12 : not (In (S (S O)) (remove (S O) B))
H_card_rem : Logic.eq (cardinal (remove (S O) B)) (S O)
H1 : In (S O) B
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
destruct (proj1 (FM.add_iff _ _ b) Hb_town) as [Hb1_town|Hb1_town].
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
do 6 left.
assert (H_card_rem:cardinal (remove 1 B)=1).
idtac.
destruct (In_dec 2 (remove 1 B)) as [H12|H12].
destruct (In_dec 3 (remove 1 B)) as [H13|H13].
destruct (In_dec 4 (remove 1 B)) as [H14|H14].
destruct (In_dec 5 (remove 1 B)) as [H15|H15].
apply False_rec.
assert (H11:=(@remove_1 B _ _ (refl_equal 1))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].
assert (H_sub':=@subset_remove_3 _ _ 1 H_sub).
assert (Hb_town:=H_sub' _ Hb).
unfold town_2 in Hb_town.
destruct (proj1 (FM.add_iff _ _ b) Hb_town) as [Hb1_town|Hb1_town].

*****
Hb1_town : Logic.eq (S O) b
Hb_town : In b\n (add (S O)\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))))
H_sub' : Subset (remove (S O) B) town_2
Hb5 : not (Logic.eq b (S (S (S (S (S O))))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S O) B)
b : elt
H11 : not (In (S O) (remove (S O) B))
H15 : not (In (S (S (S (S (S O))))) (remove (S O) B))
H14 : not (In (S (S (S (S O)))) (remove (S O) B))
H13 : not (In (S (S (S O))) (remove (S O) B))
H12 : not (In (S (S O)) (remove (S O) B))
H_card_rem : Logic.eq (cardinal (remove (S O) B)) (S O)
H1 : In (S O) B
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
apply Hb1.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
do 6 left.
assert (H_card_rem:cardinal (remove 1 B)=1).
idtac.
destruct (In_dec 2 (remove 1 B)) as [H12|H12].
destruct (In_dec 3 (remove 1 B)) as [H13|H13].
destruct (In_dec 4 (remove 1 B)) as [H14|H14].
destruct (In_dec 5 (remove 1 B)) as [H15|H15].
apply False_rec.
assert (H11:=(@remove_1 B _ _ (refl_equal 1))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].
assert (H_sub':=@subset_remove_3 _ _ 1 H_sub).
assert (Hb_town:=H_sub' _ Hb).
unfold town_2 in Hb_town.
destruct (proj1 (FM.add_iff _ _ b) Hb_town) as [Hb1_town|Hb1_town].
apply Hb1.

*****
Hb1_town : Logic.eq (S O) b
Hb_town : In b\n (add (S O)\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))))
H_sub' : Subset (remove (S O) B) town_2
Hb5 : not (Logic.eq b (S (S (S (S (S O))))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S O) B)
b : elt
H11 : not (In (S O) (remove (S O) B))
H15 : not (In (S (S (S (S (S O))))) (remove (S O) B))
H14 : not (In (S (S (S (S O)))) (remove (S O) B))
H13 : not (In (S (S (S O))) (remove (S O) B))
H12 : not (In (S (S O)) (remove (S O) B))
H_card_rem : Logic.eq (cardinal (remove (S O) B)) (S O)
H1 : In (S O) B
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
Logic.eq b (S O)
+++++
rewrite Hb1_town.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
do 6 left.
assert (H_card_rem:cardinal (remove 1 B)=1).
idtac.
destruct (In_dec 2 (remove 1 B)) as [H12|H12].
destruct (In_dec 3 (remove 1 B)) as [H13|H13].
destruct (In_dec 4 (remove 1 B)) as [H14|H14].
destruct (In_dec 5 (remove 1 B)) as [H15|H15].
apply False_rec.
assert (H11:=(@remove_1 B _ _ (refl_equal 1))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].
assert (H_sub':=@subset_remove_3 _ _ 1 H_sub).
assert (Hb_town:=H_sub' _ Hb).
unfold town_2 in Hb_town.
destruct (proj1 (FM.add_iff _ _ b) Hb_town) as [Hb1_town|Hb1_town].
apply Hb1.
rewrite Hb1_town.

*****
Hb1_town : Logic.eq (S O) b
Hb_town : In b\n (add (S O)\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))))
H_sub' : Subset (remove (S O) B) town_2
Hb5 : not (Logic.eq b (S (S (S (S (S O))))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S O) B)
b : elt
H11 : not (In (S O) (remove (S O) B))
H15 : not (In (S (S (S (S (S O))))) (remove (S O) B))
H14 : not (In (S (S (S (S O)))) (remove (S O) B))
H13 : not (In (S (S (S O))) (remove (S O) B))
H12 : not (In (S (S O)) (remove (S O) B))
H_card_rem : Logic.eq (cardinal (remove (S O) B)) (S O)
H1 : In (S O) B
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
Logic.eq b b
+++++
reflexivity.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
do 6 left.
assert (H_card_rem:cardinal (remove 1 B)=1).
idtac.
destruct (In_dec 2 (remove 1 B)) as [H12|H12].
destruct (In_dec 3 (remove 1 B)) as [H13|H13].
destruct (In_dec 4 (remove 1 B)) as [H14|H14].
destruct (In_dec 5 (remove 1 B)) as [H15|H15].
apply False_rec.
assert (H11:=(@remove_1 B _ _ (refl_equal 1))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].
assert (H_sub':=@subset_remove_3 _ _ 1 H_sub).
assert (Hb_town:=H_sub' _ Hb).
unfold town_2 in Hb_town.
destruct (proj1 (FM.add_iff _ _ b) Hb_town) as [Hb1_town|Hb1_town].

*****
Hb1_town : In b\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))))
Hb_town : In b\n (add (S O)\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))))
H_sub' : Subset (remove (S O) B) town_2
Hb5 : not (Logic.eq b (S (S (S (S (S O))))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S O) B)
b : elt
H11 : not (In (S O) (remove (S O) B))
H15 : not (In (S (S (S (S (S O))))) (remove (S O) B))
H14 : not (In (S (S (S (S O)))) (remove (S O) B))
H13 : not (In (S (S (S O))) (remove (S O) B))
H12 : not (In (S (S O)) (remove (S O) B))
H_card_rem : Logic.eq (cardinal (remove (S O) B)) (S O)
H1 : In (S O) B
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
destruct (proj1 (FM.add_iff _ _ b) Hb1_town) as [Hb2_town|Hb2_town].
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
do 6 left.
assert (H_card_rem:cardinal (remove 1 B)=1).
idtac.
destruct (In_dec 2 (remove 1 B)) as [H12|H12].
destruct (In_dec 3 (remove 1 B)) as [H13|H13].
destruct (In_dec 4 (remove 1 B)) as [H14|H14].
destruct (In_dec 5 (remove 1 B)) as [H15|H15].
apply False_rec.
assert (H11:=(@remove_1 B _ _ (refl_equal 1))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].
assert (H_sub':=@subset_remove_3 _ _ 1 H_sub).
assert (Hb_town:=H_sub' _ Hb).
unfold town_2 in Hb_town.
destruct (proj1 (FM.add_iff _ _ b) Hb_town) as [Hb1_town|Hb1_town].
destruct (proj1 (FM.add_iff _ _ b) Hb1_town) as [Hb2_town|Hb2_town].

*****
Hb2_town : Logic.eq (S (S O)) b
Hb1_town : In b\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))))
Hb_town : In b\n (add (S O)\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))))
H_sub' : Subset (remove (S O) B) town_2
Hb5 : not (Logic.eq b (S (S (S (S (S O))))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S O) B)
b : elt
H11 : not (In (S O) (remove (S O) B))
H15 : not (In (S (S (S (S (S O))))) (remove (S O) B))
H14 : not (In (S (S (S (S O)))) (remove (S O) B))
H13 : not (In (S (S (S O))) (remove (S O) B))
H12 : not (In (S (S O)) (remove (S O) B))
H_card_rem : Logic.eq (cardinal (remove (S O) B)) (S O)
H1 : In (S O) B
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
apply Hb2.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
do 6 left.
assert (H_card_rem:cardinal (remove 1 B)=1).
idtac.
destruct (In_dec 2 (remove 1 B)) as [H12|H12].
destruct (In_dec 3 (remove 1 B)) as [H13|H13].
destruct (In_dec 4 (remove 1 B)) as [H14|H14].
destruct (In_dec 5 (remove 1 B)) as [H15|H15].
apply False_rec.
assert (H11:=(@remove_1 B _ _ (refl_equal 1))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].
assert (H_sub':=@subset_remove_3 _ _ 1 H_sub).
assert (Hb_town:=H_sub' _ Hb).
unfold town_2 in Hb_town.
destruct (proj1 (FM.add_iff _ _ b) Hb_town) as [Hb1_town|Hb1_town].
destruct (proj1 (FM.add_iff _ _ b) Hb1_town) as [Hb2_town|Hb2_town].
apply Hb2.

*****
Hb2_town : Logic.eq (S (S O)) b
Hb1_town : In b\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))))
Hb_town : In b\n (add (S O)\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))))
H_sub' : Subset (remove (S O) B) town_2
Hb5 : not (Logic.eq b (S (S (S (S (S O))))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S O) B)
b : elt
H11 : not (In (S O) (remove (S O) B))
H15 : not (In (S (S (S (S (S O))))) (remove (S O) B))
H14 : not (In (S (S (S (S O)))) (remove (S O) B))
H13 : not (In (S (S (S O))) (remove (S O) B))
H12 : not (In (S (S O)) (remove (S O) B))
H_card_rem : Logic.eq (cardinal (remove (S O) B)) (S O)
H1 : In (S O) B
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
Logic.eq b (S (S O))
+++++
rewrite Hb2_town.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
do 6 left.
assert (H_card_rem:cardinal (remove 1 B)=1).
idtac.
destruct (In_dec 2 (remove 1 B)) as [H12|H12].
destruct (In_dec 3 (remove 1 B)) as [H13|H13].
destruct (In_dec 4 (remove 1 B)) as [H14|H14].
destruct (In_dec 5 (remove 1 B)) as [H15|H15].
apply False_rec.
assert (H11:=(@remove_1 B _ _ (refl_equal 1))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].
assert (H_sub':=@subset_remove_3 _ _ 1 H_sub).
assert (Hb_town:=H_sub' _ Hb).
unfold town_2 in Hb_town.
destruct (proj1 (FM.add_iff _ _ b) Hb_town) as [Hb1_town|Hb1_town].
destruct (proj1 (FM.add_iff _ _ b) Hb1_town) as [Hb2_town|Hb2_town].
apply Hb2.
rewrite Hb2_town.

*****
Hb2_town : Logic.eq (S (S O)) b
Hb1_town : In b\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))))
Hb_town : In b\n (add (S O)\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))))
H_sub' : Subset (remove (S O) B) town_2
Hb5 : not (Logic.eq b (S (S (S (S (S O))))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S O) B)
b : elt
H11 : not (In (S O) (remove (S O) B))
H15 : not (In (S (S (S (S (S O))))) (remove (S O) B))
H14 : not (In (S (S (S (S O)))) (remove (S O) B))
H13 : not (In (S (S (S O))) (remove (S O) B))
H12 : not (In (S (S O)) (remove (S O) B))
H_card_rem : Logic.eq (cardinal (remove (S O) B)) (S O)
H1 : In (S O) B
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
Logic.eq b b
+++++
reflexivity.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
do 6 left.
assert (H_card_rem:cardinal (remove 1 B)=1).
idtac.
destruct (In_dec 2 (remove 1 B)) as [H12|H12].
destruct (In_dec 3 (remove 1 B)) as [H13|H13].
destruct (In_dec 4 (remove 1 B)) as [H14|H14].
destruct (In_dec 5 (remove 1 B)) as [H15|H15].
apply False_rec.
assert (H11:=(@remove_1 B _ _ (refl_equal 1))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].
assert (H_sub':=@subset_remove_3 _ _ 1 H_sub).
assert (Hb_town:=H_sub' _ Hb).
unfold town_2 in Hb_town.
destruct (proj1 (FM.add_iff _ _ b) Hb_town) as [Hb1_town|Hb1_town].
destruct (proj1 (FM.add_iff _ _ b) Hb1_town) as [Hb2_town|Hb2_town].

*****
Hb2_town : In b\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))
Hb1_town : In b\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))))
Hb_town : In b\n (add (S O)\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))))
H_sub' : Subset (remove (S O) B) town_2
Hb5 : not (Logic.eq b (S (S (S (S (S O))))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S O) B)
b : elt
H11 : not (In (S O) (remove (S O) B))
H15 : not (In (S (S (S (S (S O))))) (remove (S O) B))
H14 : not (In (S (S (S (S O)))) (remove (S O) B))
H13 : not (In (S (S (S O))) (remove (S O) B))
H12 : not (In (S (S O)) (remove (S O) B))
H_card_rem : Logic.eq (cardinal (remove (S O) B)) (S O)
H1 : In (S O) B
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
destruct (proj1 (FM.add_iff _ _ b) Hb2_town) as [Hb3_town|Hb3_town].
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
do 6 left.
assert (H_card_rem:cardinal (remove 1 B)=1).
idtac.
destruct (In_dec 2 (remove 1 B)) as [H12|H12].
destruct (In_dec 3 (remove 1 B)) as [H13|H13].
destruct (In_dec 4 (remove 1 B)) as [H14|H14].
destruct (In_dec 5 (remove 1 B)) as [H15|H15].
apply False_rec.
assert (H11:=(@remove_1 B _ _ (refl_equal 1))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].
assert (H_sub':=@subset_remove_3 _ _ 1 H_sub).
assert (Hb_town:=H_sub' _ Hb).
unfold town_2 in Hb_town.
destruct (proj1 (FM.add_iff _ _ b) Hb_town) as [Hb1_town|Hb1_town].
destruct (proj1 (FM.add_iff _ _ b) Hb1_town) as [Hb2_town|Hb2_town].
destruct (proj1 (FM.add_iff _ _ b) Hb2_town) as [Hb3_town|Hb3_town].

*****
Hb3_town : Logic.eq (S (S (S O))) b
Hb2_town : In b\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))
Hb1_town : In b\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))))
Hb_town : In b\n (add (S O)\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))))
H_sub' : Subset (remove (S O) B) town_2
Hb5 : not (Logic.eq b (S (S (S (S (S O))))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S O) B)
b : elt
H11 : not (In (S O) (remove (S O) B))
H15 : not (In (S (S (S (S (S O))))) (remove (S O) B))
H14 : not (In (S (S (S (S O)))) (remove (S O) B))
H13 : not (In (S (S (S O))) (remove (S O) B))
H12 : not (In (S (S O)) (remove (S O) B))
H_card_rem : Logic.eq (cardinal (remove (S O) B)) (S O)
H1 : In (S O) B
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
apply Hb3.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
do 6 left.
assert (H_card_rem:cardinal (remove 1 B)=1).
idtac.
destruct (In_dec 2 (remove 1 B)) as [H12|H12].
destruct (In_dec 3 (remove 1 B)) as [H13|H13].
destruct (In_dec 4 (remove 1 B)) as [H14|H14].
destruct (In_dec 5 (remove 1 B)) as [H15|H15].
apply False_rec.
assert (H11:=(@remove_1 B _ _ (refl_equal 1))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].
assert (H_sub':=@subset_remove_3 _ _ 1 H_sub).
assert (Hb_town:=H_sub' _ Hb).
unfold town_2 in Hb_town.
destruct (proj1 (FM.add_iff _ _ b) Hb_town) as [Hb1_town|Hb1_town].
destruct (proj1 (FM.add_iff _ _ b) Hb1_town) as [Hb2_town|Hb2_town].
destruct (proj1 (FM.add_iff _ _ b) Hb2_town) as [Hb3_town|Hb3_town].
apply Hb3.

*****
Hb3_town : Logic.eq (S (S (S O))) b
Hb2_town : In b\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))
Hb1_town : In b\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))))
Hb_town : In b\n (add (S O)\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))))
H_sub' : Subset (remove (S O) B) town_2
Hb5 : not (Logic.eq b (S (S (S (S (S O))))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S O) B)
b : elt
H11 : not (In (S O) (remove (S O) B))
H15 : not (In (S (S (S (S (S O))))) (remove (S O) B))
H14 : not (In (S (S (S (S O)))) (remove (S O) B))
H13 : not (In (S (S (S O))) (remove (S O) B))
H12 : not (In (S (S O)) (remove (S O) B))
H_card_rem : Logic.eq (cardinal (remove (S O) B)) (S O)
H1 : In (S O) B
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
Logic.eq b (S (S (S O)))
+++++
rewrite Hb3_town.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
do 6 left.
assert (H_card_rem:cardinal (remove 1 B)=1).
idtac.
destruct (In_dec 2 (remove 1 B)) as [H12|H12].
destruct (In_dec 3 (remove 1 B)) as [H13|H13].
destruct (In_dec 4 (remove 1 B)) as [H14|H14].
destruct (In_dec 5 (remove 1 B)) as [H15|H15].
apply False_rec.
assert (H11:=(@remove_1 B _ _ (refl_equal 1))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].
assert (H_sub':=@subset_remove_3 _ _ 1 H_sub).
assert (Hb_town:=H_sub' _ Hb).
unfold town_2 in Hb_town.
destruct (proj1 (FM.add_iff _ _ b) Hb_town) as [Hb1_town|Hb1_town].
destruct (proj1 (FM.add_iff _ _ b) Hb1_town) as [Hb2_town|Hb2_town].
destruct (proj1 (FM.add_iff _ _ b) Hb2_town) as [Hb3_town|Hb3_town].
apply Hb3.
rewrite Hb3_town.

*****
Hb3_town : Logic.eq (S (S (S O))) b
Hb2_town : In b\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))
Hb1_town : In b\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))))
Hb_town : In b\n (add (S O)\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))))
H_sub' : Subset (remove (S O) B) town_2
Hb5 : not (Logic.eq b (S (S (S (S (S O))))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S O) B)
b : elt
H11 : not (In (S O) (remove (S O) B))
H15 : not (In (S (S (S (S (S O))))) (remove (S O) B))
H14 : not (In (S (S (S (S O)))) (remove (S O) B))
H13 : not (In (S (S (S O))) (remove (S O) B))
H12 : not (In (S (S O)) (remove (S O) B))
H_card_rem : Logic.eq (cardinal (remove (S O) B)) (S O)
H1 : In (S O) B
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
Logic.eq b b
+++++
reflexivity.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
do 6 left.
assert (H_card_rem:cardinal (remove 1 B)=1).
idtac.
destruct (In_dec 2 (remove 1 B)) as [H12|H12].
destruct (In_dec 3 (remove 1 B)) as [H13|H13].
destruct (In_dec 4 (remove 1 B)) as [H14|H14].
destruct (In_dec 5 (remove 1 B)) as [H15|H15].
apply False_rec.
assert (H11:=(@remove_1 B _ _ (refl_equal 1))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].
assert (H_sub':=@subset_remove_3 _ _ 1 H_sub).
assert (Hb_town:=H_sub' _ Hb).
unfold town_2 in Hb_town.
destruct (proj1 (FM.add_iff _ _ b) Hb_town) as [Hb1_town|Hb1_town].
destruct (proj1 (FM.add_iff _ _ b) Hb1_town) as [Hb2_town|Hb2_town].
destruct (proj1 (FM.add_iff _ _ b) Hb2_town) as [Hb3_town|Hb3_town].

*****
Hb3_town : In b (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))
Hb2_town : In b\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))
Hb1_town : In b\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))))
Hb_town : In b\n (add (S O)\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))))
H_sub' : Subset (remove (S O) B) town_2
Hb5 : not (Logic.eq b (S (S (S (S (S O))))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S O) B)
b : elt
H11 : not (In (S O) (remove (S O) B))
H15 : not (In (S (S (S (S (S O))))) (remove (S O) B))
H14 : not (In (S (S (S (S O)))) (remove (S O) B))
H13 : not (In (S (S (S O))) (remove (S O) B))
H12 : not (In (S (S O)) (remove (S O) B))
H_card_rem : Logic.eq (cardinal (remove (S O) B)) (S O)
H1 : In (S O) B
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
destruct (proj1 (FM.add_iff _ _ b) Hb3_town) as [Hb4_town|Hb4_town].
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
do 6 left.
assert (H_card_rem:cardinal (remove 1 B)=1).
idtac.
destruct (In_dec 2 (remove 1 B)) as [H12|H12].
destruct (In_dec 3 (remove 1 B)) as [H13|H13].
destruct (In_dec 4 (remove 1 B)) as [H14|H14].
destruct (In_dec 5 (remove 1 B)) as [H15|H15].
apply False_rec.
assert (H11:=(@remove_1 B _ _ (refl_equal 1))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].
assert (H_sub':=@subset_remove_3 _ _ 1 H_sub).
assert (Hb_town:=H_sub' _ Hb).
unfold town_2 in Hb_town.
destruct (proj1 (FM.add_iff _ _ b) Hb_town) as [Hb1_town|Hb1_town].
destruct (proj1 (FM.add_iff _ _ b) Hb1_town) as [Hb2_town|Hb2_town].
destruct (proj1 (FM.add_iff _ _ b) Hb2_town) as [Hb3_town|Hb3_town].
destruct (proj1 (FM.add_iff _ _ b) Hb3_town) as [Hb4_town|Hb4_town].

*****
Hb4_town : Logic.eq (S (S (S (S O)))) b
Hb3_town : In b (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))
Hb2_town : In b\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))
Hb1_town : In b\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))))
Hb_town : In b\n (add (S O)\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))))
H_sub' : Subset (remove (S O) B) town_2
Hb5 : not (Logic.eq b (S (S (S (S (S O))))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S O) B)
b : elt
H11 : not (In (S O) (remove (S O) B))
H15 : not (In (S (S (S (S (S O))))) (remove (S O) B))
H14 : not (In (S (S (S (S O)))) (remove (S O) B))
H13 : not (In (S (S (S O))) (remove (S O) B))
H12 : not (In (S (S O)) (remove (S O) B))
H_card_rem : Logic.eq (cardinal (remove (S O) B)) (S O)
H1 : In (S O) B
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
apply Hb4.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
do 6 left.
assert (H_card_rem:cardinal (remove 1 B)=1).
idtac.
destruct (In_dec 2 (remove 1 B)) as [H12|H12].
destruct (In_dec 3 (remove 1 B)) as [H13|H13].
destruct (In_dec 4 (remove 1 B)) as [H14|H14].
destruct (In_dec 5 (remove 1 B)) as [H15|H15].
apply False_rec.
assert (H11:=(@remove_1 B _ _ (refl_equal 1))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].
assert (H_sub':=@subset_remove_3 _ _ 1 H_sub).
assert (Hb_town:=H_sub' _ Hb).
unfold town_2 in Hb_town.
destruct (proj1 (FM.add_iff _ _ b) Hb_town) as [Hb1_town|Hb1_town].
destruct (proj1 (FM.add_iff _ _ b) Hb1_town) as [Hb2_town|Hb2_town].
destruct (proj1 (FM.add_iff _ _ b) Hb2_town) as [Hb3_town|Hb3_town].
destruct (proj1 (FM.add_iff _ _ b) Hb3_town) as [Hb4_town|Hb4_town].
apply Hb4.

*****
Hb4_town : Logic.eq (S (S (S (S O)))) b
Hb3_town : In b (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))
Hb2_town : In b\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))
Hb1_town : In b\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))))
Hb_town : In b\n (add (S O)\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))))
H_sub' : Subset (remove (S O) B) town_2
Hb5 : not (Logic.eq b (S (S (S (S (S O))))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S O) B)
b : elt
H11 : not (In (S O) (remove (S O) B))
H15 : not (In (S (S (S (S (S O))))) (remove (S O) B))
H14 : not (In (S (S (S (S O)))) (remove (S O) B))
H13 : not (In (S (S (S O))) (remove (S O) B))
H12 : not (In (S (S O)) (remove (S O) B))
H_card_rem : Logic.eq (cardinal (remove (S O) B)) (S O)
H1 : In (S O) B
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
Logic.eq b (S (S (S (S O))))
+++++
rewrite Hb4_town.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
do 6 left.
assert (H_card_rem:cardinal (remove 1 B)=1).
idtac.
destruct (In_dec 2 (remove 1 B)) as [H12|H12].
destruct (In_dec 3 (remove 1 B)) as [H13|H13].
destruct (In_dec 4 (remove 1 B)) as [H14|H14].
destruct (In_dec 5 (remove 1 B)) as [H15|H15].
apply False_rec.
assert (H11:=(@remove_1 B _ _ (refl_equal 1))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].
assert (H_sub':=@subset_remove_3 _ _ 1 H_sub).
assert (Hb_town:=H_sub' _ Hb).
unfold town_2 in Hb_town.
destruct (proj1 (FM.add_iff _ _ b) Hb_town) as [Hb1_town|Hb1_town].
destruct (proj1 (FM.add_iff _ _ b) Hb1_town) as [Hb2_town|Hb2_town].
destruct (proj1 (FM.add_iff _ _ b) Hb2_town) as [Hb3_town|Hb3_town].
destruct (proj1 (FM.add_iff _ _ b) Hb3_town) as [Hb4_town|Hb4_town].
apply Hb4.
rewrite Hb4_town.

*****
Hb4_town : Logic.eq (S (S (S (S O)))) b
Hb3_town : In b (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))
Hb2_town : In b\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))
Hb1_town : In b\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))))
Hb_town : In b\n (add (S O)\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))))
H_sub' : Subset (remove (S O) B) town_2
Hb5 : not (Logic.eq b (S (S (S (S (S O))))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S O) B)
b : elt
H11 : not (In (S O) (remove (S O) B))
H15 : not (In (S (S (S (S (S O))))) (remove (S O) B))
H14 : not (In (S (S (S (S O)))) (remove (S O) B))
H13 : not (In (S (S (S O))) (remove (S O) B))
H12 : not (In (S (S O)) (remove (S O) B))
H_card_rem : Logic.eq (cardinal (remove (S O) B)) (S O)
H1 : In (S O) B
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
Logic.eq b b
+++++
reflexivity.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
do 6 left.
assert (H_card_rem:cardinal (remove 1 B)=1).
idtac.
destruct (In_dec 2 (remove 1 B)) as [H12|H12].
destruct (In_dec 3 (remove 1 B)) as [H13|H13].
destruct (In_dec 4 (remove 1 B)) as [H14|H14].
destruct (In_dec 5 (remove 1 B)) as [H15|H15].
apply False_rec.
assert (H11:=(@remove_1 B _ _ (refl_equal 1))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].
assert (H_sub':=@subset_remove_3 _ _ 1 H_sub).
assert (Hb_town:=H_sub' _ Hb).
unfold town_2 in Hb_town.
destruct (proj1 (FM.add_iff _ _ b) Hb_town) as [Hb1_town|Hb1_town].
destruct (proj1 (FM.add_iff _ _ b) Hb1_town) as [Hb2_town|Hb2_town].
destruct (proj1 (FM.add_iff _ _ b) Hb2_town) as [Hb3_town|Hb3_town].
destruct (proj1 (FM.add_iff _ _ b) Hb3_town) as [Hb4_town|Hb4_town].

*****
Hb4_town : In b (add (S (S (S (S (S O))))) empty)
Hb3_town : In b (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))
Hb2_town : In b\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))
Hb1_town : In b\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))))
Hb_town : In b\n (add (S O)\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))))
H_sub' : Subset (remove (S O) B) town_2
Hb5 : not (Logic.eq b (S (S (S (S (S O))))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S O) B)
b : elt
H11 : not (In (S O) (remove (S O) B))
H15 : not (In (S (S (S (S (S O))))) (remove (S O) B))
H14 : not (In (S (S (S (S O)))) (remove (S O) B))
H13 : not (In (S (S (S O))) (remove (S O) B))
H12 : not (In (S (S O)) (remove (S O) B))
H_card_rem : Logic.eq (cardinal (remove (S O) B)) (S O)
H1 : In (S O) B
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
destruct (proj1 (FM.add_iff _ _ b) Hb4_town) as [Hb5_town|Hb5_town].
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
do 6 left.
assert (H_card_rem:cardinal (remove 1 B)=1).
idtac.
destruct (In_dec 2 (remove 1 B)) as [H12|H12].
destruct (In_dec 3 (remove 1 B)) as [H13|H13].
destruct (In_dec 4 (remove 1 B)) as [H14|H14].
destruct (In_dec 5 (remove 1 B)) as [H15|H15].
apply False_rec.
assert (H11:=(@remove_1 B _ _ (refl_equal 1))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].
assert (H_sub':=@subset_remove_3 _ _ 1 H_sub).
assert (Hb_town:=H_sub' _ Hb).
unfold town_2 in Hb_town.
destruct (proj1 (FM.add_iff _ _ b) Hb_town) as [Hb1_town|Hb1_town].
destruct (proj1 (FM.add_iff _ _ b) Hb1_town) as [Hb2_town|Hb2_town].
destruct (proj1 (FM.add_iff _ _ b) Hb2_town) as [Hb3_town|Hb3_town].
destruct (proj1 (FM.add_iff _ _ b) Hb3_town) as [Hb4_town|Hb4_town].
destruct (proj1 (FM.add_iff _ _ b) Hb4_town) as [Hb5_town|Hb5_town].

*****
Hb5_town : Logic.eq (S (S (S (S (S O))))) b
Hb4_town : In b (add (S (S (S (S (S O))))) empty)
Hb3_town : In b (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))
Hb2_town : In b\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))
Hb1_town : In b\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))))
Hb_town : In b\n (add (S O)\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))))
H_sub' : Subset (remove (S O) B) town_2
Hb5 : not (Logic.eq b (S (S (S (S (S O))))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S O) B)
b : elt
H11 : not (In (S O) (remove (S O) B))
H15 : not (In (S (S (S (S (S O))))) (remove (S O) B))
H14 : not (In (S (S (S (S O)))) (remove (S O) B))
H13 : not (In (S (S (S O))) (remove (S O) B))
H12 : not (In (S (S O)) (remove (S O) B))
H_card_rem : Logic.eq (cardinal (remove (S O) B)) (S O)
H1 : In (S O) B
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
apply Hb5.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
do 6 left.
assert (H_card_rem:cardinal (remove 1 B)=1).
idtac.
destruct (In_dec 2 (remove 1 B)) as [H12|H12].
destruct (In_dec 3 (remove 1 B)) as [H13|H13].
destruct (In_dec 4 (remove 1 B)) as [H14|H14].
destruct (In_dec 5 (remove 1 B)) as [H15|H15].
apply False_rec.
assert (H11:=(@remove_1 B _ _ (refl_equal 1))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].
assert (H_sub':=@subset_remove_3 _ _ 1 H_sub).
assert (Hb_town:=H_sub' _ Hb).
unfold town_2 in Hb_town.
destruct (proj1 (FM.add_iff _ _ b) Hb_town) as [Hb1_town|Hb1_town].
destruct (proj1 (FM.add_iff _ _ b) Hb1_town) as [Hb2_town|Hb2_town].
destruct (proj1 (FM.add_iff _ _ b) Hb2_town) as [Hb3_town|Hb3_town].
destruct (proj1 (FM.add_iff _ _ b) Hb3_town) as [Hb4_town|Hb4_town].
destruct (proj1 (FM.add_iff _ _ b) Hb4_town) as [Hb5_town|Hb5_town].
apply Hb5.

*****
Hb5_town : Logic.eq (S (S (S (S (S O))))) b
Hb4_town : In b (add (S (S (S (S (S O))))) empty)
Hb3_town : In b (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))
Hb2_town : In b\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))
Hb1_town : In b\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))))
Hb_town : In b\n (add (S O)\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))))
H_sub' : Subset (remove (S O) B) town_2
Hb5 : not (Logic.eq b (S (S (S (S (S O))))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S O) B)
b : elt
H11 : not (In (S O) (remove (S O) B))
H15 : not (In (S (S (S (S (S O))))) (remove (S O) B))
H14 : not (In (S (S (S (S O)))) (remove (S O) B))
H13 : not (In (S (S (S O))) (remove (S O) B))
H12 : not (In (S (S O)) (remove (S O) B))
H_card_rem : Logic.eq (cardinal (remove (S O) B)) (S O)
H1 : In (S O) B
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
Logic.eq b (S (S (S (S (S O)))))
+++++
rewrite Hb5_town.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
do 6 left.
assert (H_card_rem:cardinal (remove 1 B)=1).
idtac.
destruct (In_dec 2 (remove 1 B)) as [H12|H12].
destruct (In_dec 3 (remove 1 B)) as [H13|H13].
destruct (In_dec 4 (remove 1 B)) as [H14|H14].
destruct (In_dec 5 (remove 1 B)) as [H15|H15].
apply False_rec.
assert (H11:=(@remove_1 B _ _ (refl_equal 1))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].
assert (H_sub':=@subset_remove_3 _ _ 1 H_sub).
assert (Hb_town:=H_sub' _ Hb).
unfold town_2 in Hb_town.
destruct (proj1 (FM.add_iff _ _ b) Hb_town) as [Hb1_town|Hb1_town].
destruct (proj1 (FM.add_iff _ _ b) Hb1_town) as [Hb2_town|Hb2_town].
destruct (proj1 (FM.add_iff _ _ b) Hb2_town) as [Hb3_town|Hb3_town].
destruct (proj1 (FM.add_iff _ _ b) Hb3_town) as [Hb4_town|Hb4_town].
destruct (proj1 (FM.add_iff _ _ b) Hb4_town) as [Hb5_town|Hb5_town].
apply Hb5.
rewrite Hb5_town.

*****
Hb5_town : Logic.eq (S (S (S (S (S O))))) b
Hb4_town : In b (add (S (S (S (S (S O))))) empty)
Hb3_town : In b (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))
Hb2_town : In b\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))
Hb1_town : In b\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))))
Hb_town : In b\n (add (S O)\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))))
H_sub' : Subset (remove (S O) B) town_2
Hb5 : not (Logic.eq b (S (S (S (S (S O))))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S O) B)
b : elt
H11 : not (In (S O) (remove (S O) B))
H15 : not (In (S (S (S (S (S O))))) (remove (S O) B))
H14 : not (In (S (S (S (S O)))) (remove (S O) B))
H13 : not (In (S (S (S O))) (remove (S O) B))
H12 : not (In (S (S O)) (remove (S O) B))
H_card_rem : Logic.eq (cardinal (remove (S O) B)) (S O)
H1 : In (S O) B
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
Logic.eq b b
+++++
reflexivity.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
do 6 left.
assert (H_card_rem:cardinal (remove 1 B)=1).
idtac.
destruct (In_dec 2 (remove 1 B)) as [H12|H12].
destruct (In_dec 3 (remove 1 B)) as [H13|H13].
destruct (In_dec 4 (remove 1 B)) as [H14|H14].
destruct (In_dec 5 (remove 1 B)) as [H15|H15].
apply False_rec.
assert (H11:=(@remove_1 B _ _ (refl_equal 1))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].
assert (H_sub':=@subset_remove_3 _ _ 1 H_sub).
assert (Hb_town:=H_sub' _ Hb).
unfold town_2 in Hb_town.
destruct (proj1 (FM.add_iff _ _ b) Hb_town) as [Hb1_town|Hb1_town].
destruct (proj1 (FM.add_iff _ _ b) Hb1_town) as [Hb2_town|Hb2_town].
destruct (proj1 (FM.add_iff _ _ b) Hb2_town) as [Hb3_town|Hb3_town].
destruct (proj1 (FM.add_iff _ _ b) Hb3_town) as [Hb4_town|Hb4_town].
destruct (proj1 (FM.add_iff _ _ b) Hb4_town) as [Hb5_town|Hb5_town].

*****
Hb5_town : In b empty
Hb4_town : In b (add (S (S (S (S (S O))))) empty)
Hb3_town : In b (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))
Hb2_town : In b\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))
Hb1_town : In b\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))))
Hb_town : In b\n (add (S O)\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))))
H_sub' : Subset (remove (S O) B) town_2
Hb5 : not (Logic.eq b (S (S (S (S (S O))))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S O) B)
b : elt
H11 : not (In (S O) (remove (S O) B))
H15 : not (In (S (S (S (S (S O))))) (remove (S O) B))
H14 : not (In (S (S (S (S O)))) (remove (S O) B))
H13 : not (In (S (S (S O))) (remove (S O) B))
H12 : not (In (S (S O)) (remove (S O) B))
H_card_rem : Logic.eq (cardinal (remove (S O) B)) (S O)
H1 : In (S O) B
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
apply (proj1 (FM.empty_iff b) Hb5_town).
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].

*****
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
sumor (sumor (sumor (sumor (sumor (sumor (sumor (sumor (sumbool (Equal B (add (S O) (add (S (S O)) empty))) (Equal B (add (S O) (add (S (S (S O))) empty)))) (Equal B (add (S O) (add (S (S (S (S O)))) empty)))) (Equal B (add (S O) (add (S (S (S (S (S O))))) empty)))) (Equal B (add (S (S O)) (add (S (S (S O))) empty)))) (Equal B (add (S (S O)) (add (S (S (S (S O)))) empty)))) (Equal B (add (S (S O)) (add (S (S (S (S (S O))))) empty)))) (Equal B (add (S (S (S O))) (add (S (S (S (S O)))) empty)))) (Equal B (add (S (S (S O))) (add (S (S (S (S (S O))))) empty)))) (Equal B (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))
+++++
destruct (In_dec 2 B) as [H2|H2].
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].

*****
H2 : In (S (S O)) B
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
sumor (sumor (sumor (sumor (sumor (sumor (sumor (sumor (sumbool (Equal B (add (S O) (add (S (S O)) empty))) (Equal B (add (S O) (add (S (S (S O))) empty)))) (Equal B (add (S O) (add (S (S (S (S O)))) empty)))) (Equal B (add (S O) (add (S (S (S (S (S O))))) empty)))) (Equal B (add (S (S O)) (add (S (S (S O))) empty)))) (Equal B (add (S (S O)) (add (S (S (S (S O)))) empty)))) (Equal B (add (S (S O)) (add (S (S (S (S (S O))))) empty)))) (Equal B (add (S (S (S O))) (add (S (S (S (S O)))) empty)))) (Equal B (add (S (S (S O))) (add (S (S (S (S (S O))))) empty)))) (Equal B (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))
+++++
assert (H_card_rem:cardinal (remove 2 B)=1).
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
assert (H_card_rem:cardinal (remove 2 B)=1).

*****
H2 : In (S (S O)) B
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
Logic.eq (cardinal (remove (S (S O)) B)) (S O)
+++++
rewrite <- (remove_cardinal_1 H2) in H_card.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
assert (H_card_rem:cardinal (remove 2 B)=1).
rewrite <- (remove_cardinal_1 H2) in H_card.

*****
H2 : In (S (S O)) B
H1 : not (In (S O) B)
H_card : Logic.eq (S (cardinal (remove (S (S O)) B))) (S (S O))
H_sub : Subset B town_2
B : True
*****
Logic.eq (cardinal (remove (S (S O)) B)) (S O)
+++++
apply eq_add_S.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
assert (H_card_rem:cardinal (remove 2 B)=1).
rewrite <- (remove_cardinal_1 H2) in H_card.
apply eq_add_S.

*****
H2 : In (S (S O)) B
H1 : not (In (S O) B)
H_card : Logic.eq (S (cardinal (remove (S (S O)) B))) (S (S O))
H_sub : Subset B town_2
B : True
*****
Logic.eq (S (cardinal (remove (S (S O)) B))) (S (S O))
+++++
assumption.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
assert (H_card_rem:cardinal (remove 2 B)=1).

*****
H_card_rem : Logic.eq (cardinal (remove (S (S O)) B)) (S O)
H2 : In (S (S O)) B
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
sumor (sumor (sumor (sumor (sumor (sumor (sumor (sumor (sumbool (Equal B (add (S O) (add (S (S O)) empty))) (Equal B (add (S O) (add (S (S (S O))) empty)))) (Equal B (add (S O) (add (S (S (S (S O)))) empty)))) (Equal B (add (S O) (add (S (S (S (S (S O))))) empty)))) (Equal B (add (S (S O)) (add (S (S (S O))) empty)))) (Equal B (add (S (S O)) (add (S (S (S (S O)))) empty)))) (Equal B (add (S (S O)) (add (S (S (S (S (S O))))) empty)))) (Equal B (add (S (S (S O))) (add (S (S (S (S O)))) empty)))) (Equal B (add (S (S (S O))) (add (S (S (S (S (S O))))) empty)))) (Equal B (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))
+++++
idtac.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
assert (H_card_rem:cardinal (remove 2 B)=1).
idtac.

*****
H_card_rem : Logic.eq (cardinal (remove (S (S O)) B)) (S O)
H2 : In (S (S O)) B
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
sumor (sumor (sumor (sumor (sumor (sumor (sumor (sumor (sumbool (Equal B (add (S O) (add (S (S O)) empty))) (Equal B (add (S O) (add (S (S (S O))) empty)))) (Equal B (add (S O) (add (S (S (S (S O)))) empty)))) (Equal B (add (S O) (add (S (S (S (S (S O))))) empty)))) (Equal B (add (S (S O)) (add (S (S (S O))) empty)))) (Equal B (add (S (S O)) (add (S (S (S (S O)))) empty)))) (Equal B (add (S (S O)) (add (S (S (S (S (S O))))) empty)))) (Equal B (add (S (S (S O))) (add (S (S (S (S O)))) empty)))) (Equal B (add (S (S (S O))) (add (S (S (S (S (S O))))) empty)))) (Equal B (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))
+++++
assert (H21:=fun HH : In 1 (remove 2 B) => H1 (remove_3 HH)).
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
assert (H_card_rem:cardinal (remove 2 B)=1).
idtac.
assert (H21:=fun HH : In 1 (remove 2 B) => H1 (remove_3 HH)).

*****
H21 : forall _ : In (S O) (remove (S (S O)) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S O)) B)) (S O)
H2 : In (S (S O)) B
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
sumor (sumor (sumor (sumor (sumor (sumor (sumor (sumor (sumbool (Equal B (add (S O) (add (S (S O)) empty))) (Equal B (add (S O) (add (S (S (S O))) empty)))) (Equal B (add (S O) (add (S (S (S (S O)))) empty)))) (Equal B (add (S O) (add (S (S (S (S (S O))))) empty)))) (Equal B (add (S (S O)) (add (S (S (S O))) empty)))) (Equal B (add (S (S O)) (add (S (S (S (S O)))) empty)))) (Equal B (add (S (S O)) (add (S (S (S (S (S O))))) empty)))) (Equal B (add (S (S (S O))) (add (S (S (S (S O)))) empty)))) (Equal B (add (S (S (S O))) (add (S (S (S (S (S O))))) empty)))) (Equal B (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))
+++++
destruct (In_dec 3 (remove 2 B)) as [H23|H23].
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
assert (H_card_rem:cardinal (remove 2 B)=1).
idtac.
assert (H21:=fun HH : In 1 (remove 2 B) => H1 (remove_3 HH)).
destruct (In_dec 3 (remove 2 B)) as [H23|H23].

*****
H23 : In (S (S (S O))) (remove (S (S O)) B)
H21 : forall _ : In (S O) (remove (S (S O)) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S O)) B)) (S O)
H2 : In (S (S O)) B
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
sumor (sumor (sumor (sumor (sumor (sumor (sumor (sumor (sumbool (Equal B (add (S O) (add (S (S O)) empty))) (Equal B (add (S O) (add (S (S (S O))) empty)))) (Equal B (add (S O) (add (S (S (S (S O)))) empty)))) (Equal B (add (S O) (add (S (S (S (S (S O))))) empty)))) (Equal B (add (S (S O)) (add (S (S (S O))) empty)))) (Equal B (add (S (S O)) (add (S (S (S (S O)))) empty)))) (Equal B (add (S (S O)) (add (S (S (S (S (S O))))) empty)))) (Equal B (add (S (S (S O))) (add (S (S (S (S O)))) empty)))) (Equal B (add (S (S (S O))) (add (S (S (S (S (S O))))) empty)))) (Equal B (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))
+++++
do 5 left.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
assert (H_card_rem:cardinal (remove 2 B)=1).
idtac.
assert (H21:=fun HH : In 1 (remove 2 B) => H1 (remove_3 HH)).
destruct (In_dec 3 (remove 2 B)) as [H23|H23].
do 5 left.

*****
H23 : In (S (S (S O))) (remove (S (S O)) B)
H21 : forall _ : In (S O) (remove (S (S O)) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S O)) B)) (S O)
H2 : In (S (S O)) B
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
sumor (sumor (sumor (sumbool (Equal B (add (S O) (add (S (S O)) empty))) (Equal B (add (S O) (add (S (S (S O))) empty)))) (Equal B (add (S O) (add (S (S (S (S O)))) empty)))) (Equal B (add (S O) (add (S (S (S (S (S O))))) empty)))) (Equal B (add (S (S O)) (add (S (S (S O))) empty)))
+++++
right.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
assert (H_card_rem:cardinal (remove 2 B)=1).
idtac.
assert (H21:=fun HH : In 1 (remove 2 B) => H1 (remove_3 HH)).
destruct (In_dec 3 (remove 2 B)) as [H23|H23].
do 5 left.
right.

*****
H23 : In (S (S (S O))) (remove (S (S O)) B)
H21 : forall _ : In (S O) (remove (S (S O)) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S O)) B)) (S O)
H2 : In (S (S O)) B
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
Equal B (add (S (S O)) (add (S (S (S O))) empty))
+++++
rewrite <- (add_remove H2).
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
assert (H_card_rem:cardinal (remove 2 B)=1).
idtac.
assert (H21:=fun HH : In 1 (remove 2 B) => H1 (remove_3 HH)).
destruct (In_dec 3 (remove 2 B)) as [H23|H23].
do 5 left.
right.
rewrite <- (add_remove H2).

*****
H23 : In (S (S (S O))) (remove (S (S O)) B)
H21 : forall _ : In (S O) (remove (S (S O)) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S O)) B)) (S O)
H2 : In (S (S O)) B
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
Equal (add (S (S O)) (remove (S (S O)) B)) (add (S (S O)) (add (S (S (S O))) empty))
+++++
rewrite <- (add_remove H23).
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
assert (H_card_rem:cardinal (remove 2 B)=1).
idtac.
assert (H21:=fun HH : In 1 (remove 2 B) => H1 (remove_3 HH)).
destruct (In_dec 3 (remove 2 B)) as [H23|H23].
do 5 left.
right.
rewrite <- (add_remove H2).
rewrite <- (add_remove H23).

*****
H23 : In (S (S (S O))) (remove (S (S O)) B)
H21 : forall _ : In (S O) (remove (S (S O)) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S O)) B)) (S O)
H2 : In (S (S O)) B
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
Equal (add (S (S O)) (add (S (S (S O))) (remove (S (S (S O))) (remove (S (S O)) B)))) (add (S (S O)) (add (S (S (S O))) empty))
+++++
generalize (remove_cardinal_1 H23).
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
assert (H_card_rem:cardinal (remove 2 B)=1).
idtac.
assert (H21:=fun HH : In 1 (remove 2 B) => H1 (remove_3 HH)).
destruct (In_dec 3 (remove 2 B)) as [H23|H23].
do 5 left.
right.
rewrite <- (add_remove H2).
rewrite <- (add_remove H23).
generalize (remove_cardinal_1 H23).

*****
H23 : In (S (S (S O))) (remove (S (S O)) B)
H21 : forall _ : In (S O) (remove (S (S O)) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S O)) B)) (S O)
H2 : In (S (S O)) B
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
forall _ : Logic.eq (S (cardinal (remove (S (S (S O))) (remove (S (S O)) B)))) (cardinal (remove (S (S O)) B)), Equal (add (S (S O)) (add (S (S (S O))) (remove (S (S (S O))) (remove (S (S O)) B)))) (add (S (S O)) (add (S (S (S O))) empty))
+++++
rewrite H_card_rem.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
assert (H_card_rem:cardinal (remove 2 B)=1).
idtac.
assert (H21:=fun HH : In 1 (remove 2 B) => H1 (remove_3 HH)).
destruct (In_dec 3 (remove 2 B)) as [H23|H23].
do 5 left.
right.
rewrite <- (add_remove H2).
rewrite <- (add_remove H23).
generalize (remove_cardinal_1 H23).
rewrite H_card_rem.

*****
H23 : In (S (S (S O))) (remove (S (S O)) B)
H21 : forall _ : In (S O) (remove (S (S O)) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S O)) B)) (S O)
H2 : In (S (S O)) B
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
forall _ : Logic.eq (S (cardinal (remove (S (S (S O))) (remove (S (S O)) B)))) (S O), Equal (add (S (S O)) (add (S (S (S O))) (remove (S (S (S O))) (remove (S (S O)) B)))) (add (S (S O)) (add (S (S (S O))) empty))
+++++
intro H_eq2.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
assert (H_card_rem:cardinal (remove 2 B)=1).
idtac.
assert (H21:=fun HH : In 1 (remove 2 B) => H1 (remove_3 HH)).
destruct (In_dec 3 (remove 2 B)) as [H23|H23].
do 5 left.
right.
rewrite <- (add_remove H2).
rewrite <- (add_remove H23).
generalize (remove_cardinal_1 H23).
rewrite H_card_rem.
intro H_eq2.

*****
H_eq2 : Logic.eq (S (cardinal (remove (S (S (S O))) (remove (S (S O)) B))))\n (S O)
H23 : In (S (S (S O))) (remove (S (S O)) B)
H21 : forall _ : In (S O) (remove (S (S O)) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S O)) B)) (S O)
H2 : In (S (S O)) B
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
Equal (add (S (S O)) (add (S (S (S O))) (remove (S (S (S O))) (remove (S (S O)) B)))) (add (S (S O)) (add (S (S (S O))) empty))
+++++
rewrite (empty_is_empty_1 (cardinal_inv_1 (eq_add_S _ _ H_eq2))).
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
assert (H_card_rem:cardinal (remove 2 B)=1).
idtac.
assert (H21:=fun HH : In 1 (remove 2 B) => H1 (remove_3 HH)).
destruct (In_dec 3 (remove 2 B)) as [H23|H23].
do 5 left.
right.
rewrite <- (add_remove H2).
rewrite <- (add_remove H23).
generalize (remove_cardinal_1 H23).
rewrite H_card_rem.
intro H_eq2.
rewrite (empty_is_empty_1 (cardinal_inv_1 (eq_add_S _ _ H_eq2))).

*****
H_eq2 : Logic.eq (S (cardinal (remove (S (S (S O))) (remove (S (S O)) B))))\n (S O)
H23 : In (S (S (S O))) (remove (S (S O)) B)
H21 : forall _ : In (S O) (remove (S (S O)) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S O)) B)) (S O)
H2 : In (S (S O)) B
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
Equal (add (S (S O)) (add (S (S (S O))) empty)) (add (S (S O)) (add (S (S (S O))) empty))
+++++
reflexivity.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
assert (H_card_rem:cardinal (remove 2 B)=1).
idtac.
assert (H21:=fun HH : In 1 (remove 2 B) => H1 (remove_3 HH)).
destruct (In_dec 3 (remove 2 B)) as [H23|H23].

*****
H23 : not (In (S (S (S O))) (remove (S (S O)) B))
H21 : forall _ : In (S O) (remove (S (S O)) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S O)) B)) (S O)
H2 : In (S (S O)) B
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
sumor (sumor (sumor (sumor (sumor (sumor (sumor (sumor (sumbool (Equal B (add (S O) (add (S (S O)) empty))) (Equal B (add (S O) (add (S (S (S O))) empty)))) (Equal B (add (S O) (add (S (S (S (S O)))) empty)))) (Equal B (add (S O) (add (S (S (S (S (S O))))) empty)))) (Equal B (add (S (S O)) (add (S (S (S O))) empty)))) (Equal B (add (S (S O)) (add (S (S (S (S O)))) empty)))) (Equal B (add (S (S O)) (add (S (S (S (S (S O))))) empty)))) (Equal B (add (S (S (S O))) (add (S (S (S (S O)))) empty)))) (Equal B (add (S (S (S O))) (add (S (S (S (S (S O))))) empty)))) (Equal B (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))
+++++
destruct (In_dec 4 (remove 2 B)) as [H24|H24].
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
assert (H_card_rem:cardinal (remove 2 B)=1).
idtac.
assert (H21:=fun HH : In 1 (remove 2 B) => H1 (remove_3 HH)).
destruct (In_dec 3 (remove 2 B)) as [H23|H23].
destruct (In_dec 4 (remove 2 B)) as [H24|H24].

*****
H24 : In (S (S (S (S O)))) (remove (S (S O)) B)
H23 : not (In (S (S (S O))) (remove (S (S O)) B))
H21 : forall _ : In (S O) (remove (S (S O)) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S O)) B)) (S O)
H2 : In (S (S O)) B
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
sumor (sumor (sumor (sumor (sumor (sumor (sumor (sumor (sumbool (Equal B (add (S O) (add (S (S O)) empty))) (Equal B (add (S O) (add (S (S (S O))) empty)))) (Equal B (add (S O) (add (S (S (S (S O)))) empty)))) (Equal B (add (S O) (add (S (S (S (S (S O))))) empty)))) (Equal B (add (S (S O)) (add (S (S (S O))) empty)))) (Equal B (add (S (S O)) (add (S (S (S (S O)))) empty)))) (Equal B (add (S (S O)) (add (S (S (S (S (S O))))) empty)))) (Equal B (add (S (S (S O))) (add (S (S (S (S O)))) empty)))) (Equal B (add (S (S (S O))) (add (S (S (S (S (S O))))) empty)))) (Equal B (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))
+++++
do 4 left.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
assert (H_card_rem:cardinal (remove 2 B)=1).
idtac.
assert (H21:=fun HH : In 1 (remove 2 B) => H1 (remove_3 HH)).
destruct (In_dec 3 (remove 2 B)) as [H23|H23].
destruct (In_dec 4 (remove 2 B)) as [H24|H24].
do 4 left.

*****
H24 : In (S (S (S (S O)))) (remove (S (S O)) B)
H23 : not (In (S (S (S O))) (remove (S (S O)) B))
H21 : forall _ : In (S O) (remove (S (S O)) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S O)) B)) (S O)
H2 : In (S (S O)) B
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
sumor (sumor (sumor (sumor (sumbool (Equal B (add (S O) (add (S (S O)) empty))) (Equal B (add (S O) (add (S (S (S O))) empty)))) (Equal B (add (S O) (add (S (S (S (S O)))) empty)))) (Equal B (add (S O) (add (S (S (S (S (S O))))) empty)))) (Equal B (add (S (S O)) (add (S (S (S O))) empty)))) (Equal B (add (S (S O)) (add (S (S (S (S O)))) empty)))
+++++
right.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
assert (H_card_rem:cardinal (remove 2 B)=1).
idtac.
assert (H21:=fun HH : In 1 (remove 2 B) => H1 (remove_3 HH)).
destruct (In_dec 3 (remove 2 B)) as [H23|H23].
destruct (In_dec 4 (remove 2 B)) as [H24|H24].
do 4 left.
right.

*****
H24 : In (S (S (S (S O)))) (remove (S (S O)) B)
H23 : not (In (S (S (S O))) (remove (S (S O)) B))
H21 : forall _ : In (S O) (remove (S (S O)) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S O)) B)) (S O)
H2 : In (S (S O)) B
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
Equal B (add (S (S O)) (add (S (S (S (S O)))) empty))
+++++
rewrite <- (add_remove H2).
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
assert (H_card_rem:cardinal (remove 2 B)=1).
idtac.
assert (H21:=fun HH : In 1 (remove 2 B) => H1 (remove_3 HH)).
destruct (In_dec 3 (remove 2 B)) as [H23|H23].
destruct (In_dec 4 (remove 2 B)) as [H24|H24].
do 4 left.
right.
rewrite <- (add_remove H2).

*****
H24 : In (S (S (S (S O)))) (remove (S (S O)) B)
H23 : not (In (S (S (S O))) (remove (S (S O)) B))
H21 : forall _ : In (S O) (remove (S (S O)) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S O)) B)) (S O)
H2 : In (S (S O)) B
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
Equal (add (S (S O)) (remove (S (S O)) B)) (add (S (S O)) (add (S (S (S (S O)))) empty))
+++++
rewrite <- (add_remove H24).
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
assert (H_card_rem:cardinal (remove 2 B)=1).
idtac.
assert (H21:=fun HH : In 1 (remove 2 B) => H1 (remove_3 HH)).
destruct (In_dec 3 (remove 2 B)) as [H23|H23].
destruct (In_dec 4 (remove 2 B)) as [H24|H24].
do 4 left.
right.
rewrite <- (add_remove H2).
rewrite <- (add_remove H24).

*****
H24 : In (S (S (S (S O)))) (remove (S (S O)) B)
H23 : not (In (S (S (S O))) (remove (S (S O)) B))
H21 : forall _ : In (S O) (remove (S (S O)) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S O)) B)) (S O)
H2 : In (S (S O)) B
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
Equal (add (S (S O)) (add (S (S (S (S O)))) (remove (S (S (S (S O)))) (remove (S (S O)) B)))) (add (S (S O)) (add (S (S (S (S O)))) empty))
+++++
generalize (remove_cardinal_1 H24).
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
assert (H_card_rem:cardinal (remove 2 B)=1).
idtac.
assert (H21:=fun HH : In 1 (remove 2 B) => H1 (remove_3 HH)).
destruct (In_dec 3 (remove 2 B)) as [H23|H23].
destruct (In_dec 4 (remove 2 B)) as [H24|H24].
do 4 left.
right.
rewrite <- (add_remove H2).
rewrite <- (add_remove H24).
generalize (remove_cardinal_1 H24).

*****
H24 : In (S (S (S (S O)))) (remove (S (S O)) B)
H23 : not (In (S (S (S O))) (remove (S (S O)) B))
H21 : forall _ : In (S O) (remove (S (S O)) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S O)) B)) (S O)
H2 : In (S (S O)) B
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
forall _ : Logic.eq (S (cardinal (remove (S (S (S (S O)))) (remove (S (S O)) B)))) (cardinal (remove (S (S O)) B)), Equal (add (S (S O)) (add (S (S (S (S O)))) (remove (S (S (S (S O)))) (remove (S (S O)) B)))) (add (S (S O)) (add (S (S (S (S O)))) empty))
+++++
rewrite H_card_rem.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
assert (H_card_rem:cardinal (remove 2 B)=1).
idtac.
assert (H21:=fun HH : In 1 (remove 2 B) => H1 (remove_3 HH)).
destruct (In_dec 3 (remove 2 B)) as [H23|H23].
destruct (In_dec 4 (remove 2 B)) as [H24|H24].
do 4 left.
right.
rewrite <- (add_remove H2).
rewrite <- (add_remove H24).
generalize (remove_cardinal_1 H24).
rewrite H_card_rem.

*****
H24 : In (S (S (S (S O)))) (remove (S (S O)) B)
H23 : not (In (S (S (S O))) (remove (S (S O)) B))
H21 : forall _ : In (S O) (remove (S (S O)) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S O)) B)) (S O)
H2 : In (S (S O)) B
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
forall _ : Logic.eq (S (cardinal (remove (S (S (S (S O)))) (remove (S (S O)) B)))) (S O), Equal (add (S (S O)) (add (S (S (S (S O)))) (remove (S (S (S (S O)))) (remove (S (S O)) B)))) (add (S (S O)) (add (S (S (S (S O)))) empty))
+++++
intro H_eq2.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
assert (H_card_rem:cardinal (remove 2 B)=1).
idtac.
assert (H21:=fun HH : In 1 (remove 2 B) => H1 (remove_3 HH)).
destruct (In_dec 3 (remove 2 B)) as [H23|H23].
destruct (In_dec 4 (remove 2 B)) as [H24|H24].
do 4 left.
right.
rewrite <- (add_remove H2).
rewrite <- (add_remove H24).
generalize (remove_cardinal_1 H24).
rewrite H_card_rem.
intro H_eq2.

*****
H_eq2 : Logic.eq (S (cardinal (remove (S (S (S (S O)))) (remove (S (S O)) B))))\n (S O)
H24 : In (S (S (S (S O)))) (remove (S (S O)) B)
H23 : not (In (S (S (S O))) (remove (S (S O)) B))
H21 : forall _ : In (S O) (remove (S (S O)) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S O)) B)) (S O)
H2 : In (S (S O)) B
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
Equal (add (S (S O)) (add (S (S (S (S O)))) (remove (S (S (S (S O)))) (remove (S (S O)) B)))) (add (S (S O)) (add (S (S (S (S O)))) empty))
+++++
rewrite (empty_is_empty_1 (cardinal_inv_1 (eq_add_S _ _ H_eq2))).
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
assert (H_card_rem:cardinal (remove 2 B)=1).
idtac.
assert (H21:=fun HH : In 1 (remove 2 B) => H1 (remove_3 HH)).
destruct (In_dec 3 (remove 2 B)) as [H23|H23].
destruct (In_dec 4 (remove 2 B)) as [H24|H24].
do 4 left.
right.
rewrite <- (add_remove H2).
rewrite <- (add_remove H24).
generalize (remove_cardinal_1 H24).
rewrite H_card_rem.
intro H_eq2.
rewrite (empty_is_empty_1 (cardinal_inv_1 (eq_add_S _ _ H_eq2))).

*****
H_eq2 : Logic.eq (S (cardinal (remove (S (S (S (S O)))) (remove (S (S O)) B))))\n (S O)
H24 : In (S (S (S (S O)))) (remove (S (S O)) B)
H23 : not (In (S (S (S O))) (remove (S (S O)) B))
H21 : forall _ : In (S O) (remove (S (S O)) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S O)) B)) (S O)
H2 : In (S (S O)) B
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
Equal (add (S (S O)) (add (S (S (S (S O)))) empty)) (add (S (S O)) (add (S (S (S (S O)))) empty))
+++++
reflexivity.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
assert (H_card_rem:cardinal (remove 2 B)=1).
idtac.
assert (H21:=fun HH : In 1 (remove 2 B) => H1 (remove_3 HH)).
destruct (In_dec 3 (remove 2 B)) as [H23|H23].
destruct (In_dec 4 (remove 2 B)) as [H24|H24].

*****
H24 : not (In (S (S (S (S O)))) (remove (S (S O)) B))
H23 : not (In (S (S (S O))) (remove (S (S O)) B))
H21 : forall _ : In (S O) (remove (S (S O)) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S O)) B)) (S O)
H2 : In (S (S O)) B
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
sumor (sumor (sumor (sumor (sumor (sumor (sumor (sumor (sumbool (Equal B (add (S O) (add (S (S O)) empty))) (Equal B (add (S O) (add (S (S (S O))) empty)))) (Equal B (add (S O) (add (S (S (S (S O)))) empty)))) (Equal B (add (S O) (add (S (S (S (S (S O))))) empty)))) (Equal B (add (S (S O)) (add (S (S (S O))) empty)))) (Equal B (add (S (S O)) (add (S (S (S (S O)))) empty)))) (Equal B (add (S (S O)) (add (S (S (S (S (S O))))) empty)))) (Equal B (add (S (S (S O))) (add (S (S (S (S O)))) empty)))) (Equal B (add (S (S (S O))) (add (S (S (S (S (S O))))) empty)))) (Equal B (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))
+++++
destruct (In_dec 5 (remove 2 B)) as [H25|H25].
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
assert (H_card_rem:cardinal (remove 2 B)=1).
idtac.
assert (H21:=fun HH : In 1 (remove 2 B) => H1 (remove_3 HH)).
destruct (In_dec 3 (remove 2 B)) as [H23|H23].
destruct (In_dec 4 (remove 2 B)) as [H24|H24].
destruct (In_dec 5 (remove 2 B)) as [H25|H25].

*****
H25 : In (S (S (S (S (S O))))) (remove (S (S O)) B)
H24 : not (In (S (S (S (S O)))) (remove (S (S O)) B))
H23 : not (In (S (S (S O))) (remove (S (S O)) B))
H21 : forall _ : In (S O) (remove (S (S O)) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S O)) B)) (S O)
H2 : In (S (S O)) B
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
sumor (sumor (sumor (sumor (sumor (sumor (sumor (sumor (sumbool (Equal B (add (S O) (add (S (S O)) empty))) (Equal B (add (S O) (add (S (S (S O))) empty)))) (Equal B (add (S O) (add (S (S (S (S O)))) empty)))) (Equal B (add (S O) (add (S (S (S (S (S O))))) empty)))) (Equal B (add (S (S O)) (add (S (S (S O))) empty)))) (Equal B (add (S (S O)) (add (S (S (S (S O)))) empty)))) (Equal B (add (S (S O)) (add (S (S (S (S (S O))))) empty)))) (Equal B (add (S (S (S O))) (add (S (S (S (S O)))) empty)))) (Equal B (add (S (S (S O))) (add (S (S (S (S (S O))))) empty)))) (Equal B (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))
+++++
do 3 left.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
assert (H_card_rem:cardinal (remove 2 B)=1).
idtac.
assert (H21:=fun HH : In 1 (remove 2 B) => H1 (remove_3 HH)).
destruct (In_dec 3 (remove 2 B)) as [H23|H23].
destruct (In_dec 4 (remove 2 B)) as [H24|H24].
destruct (In_dec 5 (remove 2 B)) as [H25|H25].
do 3 left.

*****
H25 : In (S (S (S (S (S O))))) (remove (S (S O)) B)
H24 : not (In (S (S (S (S O)))) (remove (S (S O)) B))
H23 : not (In (S (S (S O))) (remove (S (S O)) B))
H21 : forall _ : In (S O) (remove (S (S O)) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S O)) B)) (S O)
H2 : In (S (S O)) B
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
sumor (sumor (sumor (sumor (sumor (sumbool (Equal B (add (S O) (add (S (S O)) empty))) (Equal B (add (S O) (add (S (S (S O))) empty)))) (Equal B (add (S O) (add (S (S (S (S O)))) empty)))) (Equal B (add (S O) (add (S (S (S (S (S O))))) empty)))) (Equal B (add (S (S O)) (add (S (S (S O))) empty)))) (Equal B (add (S (S O)) (add (S (S (S (S O)))) empty)))) (Equal B (add (S (S O)) (add (S (S (S (S (S O))))) empty)))
+++++
right.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
assert (H_card_rem:cardinal (remove 2 B)=1).
idtac.
assert (H21:=fun HH : In 1 (remove 2 B) => H1 (remove_3 HH)).
destruct (In_dec 3 (remove 2 B)) as [H23|H23].
destruct (In_dec 4 (remove 2 B)) as [H24|H24].
destruct (In_dec 5 (remove 2 B)) as [H25|H25].
do 3 left.
right.

*****
H25 : In (S (S (S (S (S O))))) (remove (S (S O)) B)
H24 : not (In (S (S (S (S O)))) (remove (S (S O)) B))
H23 : not (In (S (S (S O))) (remove (S (S O)) B))
H21 : forall _ : In (S O) (remove (S (S O)) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S O)) B)) (S O)
H2 : In (S (S O)) B
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
Equal B (add (S (S O)) (add (S (S (S (S (S O))))) empty))
+++++
rewrite <- (add_remove H2).
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
assert (H_card_rem:cardinal (remove 2 B)=1).
idtac.
assert (H21:=fun HH : In 1 (remove 2 B) => H1 (remove_3 HH)).
destruct (In_dec 3 (remove 2 B)) as [H23|H23].
destruct (In_dec 4 (remove 2 B)) as [H24|H24].
destruct (In_dec 5 (remove 2 B)) as [H25|H25].
do 3 left.
right.
rewrite <- (add_remove H2).

*****
H25 : In (S (S (S (S (S O))))) (remove (S (S O)) B)
H24 : not (In (S (S (S (S O)))) (remove (S (S O)) B))
H23 : not (In (S (S (S O))) (remove (S (S O)) B))
H21 : forall _ : In (S O) (remove (S (S O)) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S O)) B)) (S O)
H2 : In (S (S O)) B
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
Equal (add (S (S O)) (remove (S (S O)) B)) (add (S (S O)) (add (S (S (S (S (S O))))) empty))
+++++
rewrite <- (add_remove H25).
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
assert (H_card_rem:cardinal (remove 2 B)=1).
idtac.
assert (H21:=fun HH : In 1 (remove 2 B) => H1 (remove_3 HH)).
destruct (In_dec 3 (remove 2 B)) as [H23|H23].
destruct (In_dec 4 (remove 2 B)) as [H24|H24].
destruct (In_dec 5 (remove 2 B)) as [H25|H25].
do 3 left.
right.
rewrite <- (add_remove H2).
rewrite <- (add_remove H25).

*****
H25 : In (S (S (S (S (S O))))) (remove (S (S O)) B)
H24 : not (In (S (S (S (S O)))) (remove (S (S O)) B))
H23 : not (In (S (S (S O))) (remove (S (S O)) B))
H21 : forall _ : In (S O) (remove (S (S O)) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S O)) B)) (S O)
H2 : In (S (S O)) B
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
Equal (add (S (S O)) (add (S (S (S (S (S O))))) (remove (S (S (S (S (S O))))) (remove (S (S O)) B)))) (add (S (S O)) (add (S (S (S (S (S O))))) empty))
+++++
generalize (remove_cardinal_1 H25).
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
assert (H_card_rem:cardinal (remove 2 B)=1).
idtac.
assert (H21:=fun HH : In 1 (remove 2 B) => H1 (remove_3 HH)).
destruct (In_dec 3 (remove 2 B)) as [H23|H23].
destruct (In_dec 4 (remove 2 B)) as [H24|H24].
destruct (In_dec 5 (remove 2 B)) as [H25|H25].
do 3 left.
right.
rewrite <- (add_remove H2).
rewrite <- (add_remove H25).
generalize (remove_cardinal_1 H25).

*****
H25 : In (S (S (S (S (S O))))) (remove (S (S O)) B)
H24 : not (In (S (S (S (S O)))) (remove (S (S O)) B))
H23 : not (In (S (S (S O))) (remove (S (S O)) B))
H21 : forall _ : In (S O) (remove (S (S O)) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S O)) B)) (S O)
H2 : In (S (S O)) B
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
forall _ : Logic.eq (S (cardinal (remove (S (S (S (S (S O))))) (remove (S (S O)) B)))) (cardinal (remove (S (S O)) B)), Equal (add (S (S O)) (add (S (S (S (S (S O))))) (remove (S (S (S (S (S O))))) (remove (S (S O)) B)))) (add (S (S O)) (add (S (S (S (S (S O))))) empty))
+++++
rewrite H_card_rem.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
assert (H_card_rem:cardinal (remove 2 B)=1).
idtac.
assert (H21:=fun HH : In 1 (remove 2 B) => H1 (remove_3 HH)).
destruct (In_dec 3 (remove 2 B)) as [H23|H23].
destruct (In_dec 4 (remove 2 B)) as [H24|H24].
destruct (In_dec 5 (remove 2 B)) as [H25|H25].
do 3 left.
right.
rewrite <- (add_remove H2).
rewrite <- (add_remove H25).
generalize (remove_cardinal_1 H25).
rewrite H_card_rem.

*****
H25 : In (S (S (S (S (S O))))) (remove (S (S O)) B)
H24 : not (In (S (S (S (S O)))) (remove (S (S O)) B))
H23 : not (In (S (S (S O))) (remove (S (S O)) B))
H21 : forall _ : In (S O) (remove (S (S O)) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S O)) B)) (S O)
H2 : In (S (S O)) B
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
forall _ : Logic.eq (S (cardinal (remove (S (S (S (S (S O))))) (remove (S (S O)) B)))) (S O), Equal (add (S (S O)) (add (S (S (S (S (S O))))) (remove (S (S (S (S (S O))))) (remove (S (S O)) B)))) (add (S (S O)) (add (S (S (S (S (S O))))) empty))
+++++
intro H_eq2.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
assert (H_card_rem:cardinal (remove 2 B)=1).
idtac.
assert (H21:=fun HH : In 1 (remove 2 B) => H1 (remove_3 HH)).
destruct (In_dec 3 (remove 2 B)) as [H23|H23].
destruct (In_dec 4 (remove 2 B)) as [H24|H24].
destruct (In_dec 5 (remove 2 B)) as [H25|H25].
do 3 left.
right.
rewrite <- (add_remove H2).
rewrite <- (add_remove H25).
generalize (remove_cardinal_1 H25).
rewrite H_card_rem.
intro H_eq2.

*****
H_eq2 : Logic.eq\n (S (cardinal (remove (S (S (S (S (S O))))) (remove (S (S O)) B))))\n (S O)
H25 : In (S (S (S (S (S O))))) (remove (S (S O)) B)
H24 : not (In (S (S (S (S O)))) (remove (S (S O)) B))
H23 : not (In (S (S (S O))) (remove (S (S O)) B))
H21 : forall _ : In (S O) (remove (S (S O)) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S O)) B)) (S O)
H2 : In (S (S O)) B
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
Equal (add (S (S O)) (add (S (S (S (S (S O))))) (remove (S (S (S (S (S O))))) (remove (S (S O)) B)))) (add (S (S O)) (add (S (S (S (S (S O))))) empty))
+++++
rewrite (empty_is_empty_1 (cardinal_inv_1 (eq_add_S _ _ H_eq2))).
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
assert (H_card_rem:cardinal (remove 2 B)=1).
idtac.
assert (H21:=fun HH : In 1 (remove 2 B) => H1 (remove_3 HH)).
destruct (In_dec 3 (remove 2 B)) as [H23|H23].
destruct (In_dec 4 (remove 2 B)) as [H24|H24].
destruct (In_dec 5 (remove 2 B)) as [H25|H25].
do 3 left.
right.
rewrite <- (add_remove H2).
rewrite <- (add_remove H25).
generalize (remove_cardinal_1 H25).
rewrite H_card_rem.
intro H_eq2.
rewrite (empty_is_empty_1 (cardinal_inv_1 (eq_add_S _ _ H_eq2))).

*****
H_eq2 : Logic.eq\n (S (cardinal (remove (S (S (S (S (S O))))) (remove (S (S O)) B))))\n (S O)
H25 : In (S (S (S (S (S O))))) (remove (S (S O)) B)
H24 : not (In (S (S (S (S O)))) (remove (S (S O)) B))
H23 : not (In (S (S (S O))) (remove (S (S O)) B))
H21 : forall _ : In (S O) (remove (S (S O)) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S O)) B)) (S O)
H2 : In (S (S O)) B
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
Equal (add (S (S O)) (add (S (S (S (S (S O))))) empty)) (add (S (S O)) (add (S (S (S (S (S O))))) empty))
+++++
reflexivity.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
assert (H_card_rem:cardinal (remove 2 B)=1).
idtac.
assert (H21:=fun HH : In 1 (remove 2 B) => H1 (remove_3 HH)).
destruct (In_dec 3 (remove 2 B)) as [H23|H23].
destruct (In_dec 4 (remove 2 B)) as [H24|H24].
destruct (In_dec 5 (remove 2 B)) as [H25|H25].

*****
H25 : not (In (S (S (S (S (S O))))) (remove (S (S O)) B))
H24 : not (In (S (S (S (S O)))) (remove (S (S O)) B))
H23 : not (In (S (S (S O))) (remove (S (S O)) B))
H21 : forall _ : In (S O) (remove (S (S O)) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S O)) B)) (S O)
H2 : In (S (S O)) B
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
sumor (sumor (sumor (sumor (sumor (sumor (sumor (sumor (sumbool (Equal B (add (S O) (add (S (S O)) empty))) (Equal B (add (S O) (add (S (S (S O))) empty)))) (Equal B (add (S O) (add (S (S (S (S O)))) empty)))) (Equal B (add (S O) (add (S (S (S (S (S O))))) empty)))) (Equal B (add (S (S O)) (add (S (S (S O))) empty)))) (Equal B (add (S (S O)) (add (S (S (S (S O)))) empty)))) (Equal B (add (S (S O)) (add (S (S (S (S (S O))))) empty)))) (Equal B (add (S (S (S O))) (add (S (S (S (S O)))) empty)))) (Equal B (add (S (S (S O))) (add (S (S (S (S (S O))))) empty)))) (Equal B (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))
+++++
apply False_rec.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
assert (H_card_rem:cardinal (remove 2 B)=1).
idtac.
assert (H21:=fun HH : In 1 (remove 2 B) => H1 (remove_3 HH)).
destruct (In_dec 3 (remove 2 B)) as [H23|H23].
destruct (In_dec 4 (remove 2 B)) as [H24|H24].
destruct (In_dec 5 (remove 2 B)) as [H25|H25].
apply False_rec.

*****
H25 : not (In (S (S (S (S (S O))))) (remove (S (S O)) B))
H24 : not (In (S (S (S (S O)))) (remove (S (S O)) B))
H23 : not (In (S (S (S O))) (remove (S (S O)) B))
H21 : forall _ : In (S O) (remove (S (S O)) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S O)) B)) (S O)
H2 : In (S (S O)) B
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
assert (H22:=(@remove_1 B _ _ (refl_equal 2))).
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
assert (H_card_rem:cardinal (remove 2 B)=1).
idtac.
assert (H21:=fun HH : In 1 (remove 2 B) => H1 (remove_3 HH)).
destruct (In_dec 3 (remove 2 B)) as [H23|H23].
destruct (In_dec 4 (remove 2 B)) as [H24|H24].
destruct (In_dec 5 (remove 2 B)) as [H25|H25].
apply False_rec.
assert (H22:=(@remove_1 B _ _ (refl_equal 2))).

*****
H22 : not (In (S (S O)) (remove (S (S O)) B))
H25 : not (In (S (S (S (S (S O))))) (remove (S (S O)) B))
H24 : not (In (S (S (S (S O)))) (remove (S (S O)) B))
H23 : not (In (S (S (S O))) (remove (S (S O)) B))
H21 : forall _ : In (S O) (remove (S (S O)) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S O)) B)) (S O)
H2 : In (S (S O)) B
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
assert (H_card_rem:cardinal (remove 2 B)=1).
idtac.
assert (H21:=fun HH : In 1 (remove 2 B) => H1 (remove_3 HH)).
destruct (In_dec 3 (remove 2 B)) as [H23|H23].
destruct (In_dec 4 (remove 2 B)) as [H24|H24].
destruct (In_dec 5 (remove 2 B)) as [H25|H25].
apply False_rec.
assert (H22:=(@remove_1 B _ _ (refl_equal 2))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].

*****
Hb : In b (remove (S (S O)) B)
b : elt
H22 : not (In (S (S O)) (remove (S (S O)) B))
H25 : not (In (S (S (S (S (S O))))) (remove (S (S O)) B))
H24 : not (In (S (S (S (S O)))) (remove (S (S O)) B))
H23 : not (In (S (S (S O))) (remove (S (S O)) B))
H21 : forall _ : In (S O) (remove (S (S O)) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S O)) B)) (S O)
H2 : In (S (S O)) B
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
assert (H_card_rem:cardinal (remove 2 B)=1).
idtac.
assert (H21:=fun HH : In 1 (remove 2 B) => H1 (remove_3 HH)).
destruct (In_dec 3 (remove 2 B)) as [H23|H23].
destruct (In_dec 4 (remove 2 B)) as [H24|H24].
destruct (In_dec 5 (remove 2 B)) as [H25|H25].
apply False_rec.
assert (H22:=(@remove_1 B _ _ (refl_equal 2))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].

*****
Hb1 : Logic.eq b (S O)
Hb : In b (remove (S (S O)) B)
b : elt
H22 : not (In (S (S O)) (remove (S (S O)) B))
H25 : not (In (S (S (S (S (S O))))) (remove (S (S O)) B))
H24 : not (In (S (S (S (S O)))) (remove (S (S O)) B))
H23 : not (In (S (S (S O))) (remove (S (S O)) B))
H21 : forall _ : In (S O) (remove (S (S O)) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S O)) B)) (S O)
H2 : In (S (S O)) B
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
apply H21.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
assert (H_card_rem:cardinal (remove 2 B)=1).
idtac.
assert (H21:=fun HH : In 1 (remove 2 B) => H1 (remove_3 HH)).
destruct (In_dec 3 (remove 2 B)) as [H23|H23].
destruct (In_dec 4 (remove 2 B)) as [H24|H24].
destruct (In_dec 5 (remove 2 B)) as [H25|H25].
apply False_rec.
assert (H22:=(@remove_1 B _ _ (refl_equal 2))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
apply H21.

*****
Hb1 : Logic.eq b (S O)
Hb : In b (remove (S (S O)) B)
b : elt
H22 : not (In (S (S O)) (remove (S (S O)) B))
H25 : not (In (S (S (S (S (S O))))) (remove (S (S O)) B))
H24 : not (In (S (S (S (S O)))) (remove (S (S O)) B))
H23 : not (In (S (S (S O))) (remove (S (S O)) B))
H21 : forall _ : In (S O) (remove (S (S O)) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S O)) B)) (S O)
H2 : In (S (S O)) B
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
In (S O) (remove (S (S O)) B)
+++++
rewrite Hb1 in Hb.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
assert (H_card_rem:cardinal (remove 2 B)=1).
idtac.
assert (H21:=fun HH : In 1 (remove 2 B) => H1 (remove_3 HH)).
destruct (In_dec 3 (remove 2 B)) as [H23|H23].
destruct (In_dec 4 (remove 2 B)) as [H24|H24].
destruct (In_dec 5 (remove 2 B)) as [H25|H25].
apply False_rec.
assert (H22:=(@remove_1 B _ _ (refl_equal 2))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
apply H21.
rewrite Hb1 in Hb.

*****
Hb1 : Logic.eq b (S O)
Hb : In (S O) (remove (S (S O)) B)
b : elt
H22 : not (In (S (S O)) (remove (S (S O)) B))
H25 : not (In (S (S (S (S (S O))))) (remove (S (S O)) B))
H24 : not (In (S (S (S (S O)))) (remove (S (S O)) B))
H23 : not (In (S (S (S O))) (remove (S (S O)) B))
H21 : forall _ : In (S O) (remove (S (S O)) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S O)) B)) (S O)
H2 : In (S (S O)) B
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
In (S O) (remove (S (S O)) B)
+++++
assumption.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
assert (H_card_rem:cardinal (remove 2 B)=1).
idtac.
assert (H21:=fun HH : In 1 (remove 2 B) => H1 (remove_3 HH)).
destruct (In_dec 3 (remove 2 B)) as [H23|H23].
destruct (In_dec 4 (remove 2 B)) as [H24|H24].
destruct (In_dec 5 (remove 2 B)) as [H25|H25].
apply False_rec.
assert (H22:=(@remove_1 B _ _ (refl_equal 2))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].

*****
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S (S O)) B)
b : elt
H22 : not (In (S (S O)) (remove (S (S O)) B))
H25 : not (In (S (S (S (S (S O))))) (remove (S (S O)) B))
H24 : not (In (S (S (S (S O)))) (remove (S (S O)) B))
H23 : not (In (S (S (S O))) (remove (S (S O)) B))
H21 : forall _ : In (S O) (remove (S (S O)) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S O)) B)) (S O)
H2 : In (S (S O)) B
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
assert (H_card_rem:cardinal (remove 2 B)=1).
idtac.
assert (H21:=fun HH : In 1 (remove 2 B) => H1 (remove_3 HH)).
destruct (In_dec 3 (remove 2 B)) as [H23|H23].
destruct (In_dec 4 (remove 2 B)) as [H24|H24].
destruct (In_dec 5 (remove 2 B)) as [H25|H25].
apply False_rec.
assert (H22:=(@remove_1 B _ _ (refl_equal 2))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].

*****
Hb2 : Logic.eq b (S (S O))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S (S O)) B)
b : elt
H22 : not (In (S (S O)) (remove (S (S O)) B))
H25 : not (In (S (S (S (S (S O))))) (remove (S (S O)) B))
H24 : not (In (S (S (S (S O)))) (remove (S (S O)) B))
H23 : not (In (S (S (S O))) (remove (S (S O)) B))
H21 : forall _ : In (S O) (remove (S (S O)) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S O)) B)) (S O)
H2 : In (S (S O)) B
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
apply H22.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
assert (H_card_rem:cardinal (remove 2 B)=1).
idtac.
assert (H21:=fun HH : In 1 (remove 2 B) => H1 (remove_3 HH)).
destruct (In_dec 3 (remove 2 B)) as [H23|H23].
destruct (In_dec 4 (remove 2 B)) as [H24|H24].
destruct (In_dec 5 (remove 2 B)) as [H25|H25].
apply False_rec.
assert (H22:=(@remove_1 B _ _ (refl_equal 2))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
apply H22.

*****
Hb2 : Logic.eq b (S (S O))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S (S O)) B)
b : elt
H22 : not (In (S (S O)) (remove (S (S O)) B))
H25 : not (In (S (S (S (S (S O))))) (remove (S (S O)) B))
H24 : not (In (S (S (S (S O)))) (remove (S (S O)) B))
H23 : not (In (S (S (S O))) (remove (S (S O)) B))
H21 : forall _ : In (S O) (remove (S (S O)) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S O)) B)) (S O)
H2 : In (S (S O)) B
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
In (S (S O)) (remove (S (S O)) B)
+++++
rewrite Hb2 in Hb.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
assert (H_card_rem:cardinal (remove 2 B)=1).
idtac.
assert (H21:=fun HH : In 1 (remove 2 B) => H1 (remove_3 HH)).
destruct (In_dec 3 (remove 2 B)) as [H23|H23].
destruct (In_dec 4 (remove 2 B)) as [H24|H24].
destruct (In_dec 5 (remove 2 B)) as [H25|H25].
apply False_rec.
assert (H22:=(@remove_1 B _ _ (refl_equal 2))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
apply H22.
rewrite Hb2 in Hb.

*****
Hb2 : Logic.eq b (S (S O))
Hb1 : not (Logic.eq b (S O))
Hb : In (S (S O)) (remove (S (S O)) B)
b : elt
H22 : not (In (S (S O)) (remove (S (S O)) B))
H25 : not (In (S (S (S (S (S O))))) (remove (S (S O)) B))
H24 : not (In (S (S (S (S O)))) (remove (S (S O)) B))
H23 : not (In (S (S (S O))) (remove (S (S O)) B))
H21 : forall _ : In (S O) (remove (S (S O)) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S O)) B)) (S O)
H2 : In (S (S O)) B
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
In (S (S O)) (remove (S (S O)) B)
+++++
assumption.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
assert (H_card_rem:cardinal (remove 2 B)=1).
idtac.
assert (H21:=fun HH : In 1 (remove 2 B) => H1 (remove_3 HH)).
destruct (In_dec 3 (remove 2 B)) as [H23|H23].
destruct (In_dec 4 (remove 2 B)) as [H24|H24].
destruct (In_dec 5 (remove 2 B)) as [H25|H25].
apply False_rec.
assert (H22:=(@remove_1 B _ _ (refl_equal 2))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].

*****
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S (S O)) B)
b : elt
H22 : not (In (S (S O)) (remove (S (S O)) B))
H25 : not (In (S (S (S (S (S O))))) (remove (S (S O)) B))
H24 : not (In (S (S (S (S O)))) (remove (S (S O)) B))
H23 : not (In (S (S (S O))) (remove (S (S O)) B))
H21 : forall _ : In (S O) (remove (S (S O)) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S O)) B)) (S O)
H2 : In (S (S O)) B
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
assert (H_card_rem:cardinal (remove 2 B)=1).
idtac.
assert (H21:=fun HH : In 1 (remove 2 B) => H1 (remove_3 HH)).
destruct (In_dec 3 (remove 2 B)) as [H23|H23].
destruct (In_dec 4 (remove 2 B)) as [H24|H24].
destruct (In_dec 5 (remove 2 B)) as [H25|H25].
apply False_rec.
assert (H22:=(@remove_1 B _ _ (refl_equal 2))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].

*****
Hb3 : Logic.eq b (S (S (S O)))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S (S O)) B)
b : elt
H22 : not (In (S (S O)) (remove (S (S O)) B))
H25 : not (In (S (S (S (S (S O))))) (remove (S (S O)) B))
H24 : not (In (S (S (S (S O)))) (remove (S (S O)) B))
H23 : not (In (S (S (S O))) (remove (S (S O)) B))
H21 : forall _ : In (S O) (remove (S (S O)) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S O)) B)) (S O)
H2 : In (S (S O)) B
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
apply H23.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
assert (H_card_rem:cardinal (remove 2 B)=1).
idtac.
assert (H21:=fun HH : In 1 (remove 2 B) => H1 (remove_3 HH)).
destruct (In_dec 3 (remove 2 B)) as [H23|H23].
destruct (In_dec 4 (remove 2 B)) as [H24|H24].
destruct (In_dec 5 (remove 2 B)) as [H25|H25].
apply False_rec.
assert (H22:=(@remove_1 B _ _ (refl_equal 2))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
apply H23.

*****
Hb3 : Logic.eq b (S (S (S O)))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S (S O)) B)
b : elt
H22 : not (In (S (S O)) (remove (S (S O)) B))
H25 : not (In (S (S (S (S (S O))))) (remove (S (S O)) B))
H24 : not (In (S (S (S (S O)))) (remove (S (S O)) B))
H23 : not (In (S (S (S O))) (remove (S (S O)) B))
H21 : forall _ : In (S O) (remove (S (S O)) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S O)) B)) (S O)
H2 : In (S (S O)) B
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
In (S (S (S O))) (remove (S (S O)) B)
+++++
rewrite <- Hb3.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
assert (H_card_rem:cardinal (remove 2 B)=1).
idtac.
assert (H21:=fun HH : In 1 (remove 2 B) => H1 (remove_3 HH)).
destruct (In_dec 3 (remove 2 B)) as [H23|H23].
destruct (In_dec 4 (remove 2 B)) as [H24|H24].
destruct (In_dec 5 (remove 2 B)) as [H25|H25].
apply False_rec.
assert (H22:=(@remove_1 B _ _ (refl_equal 2))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
apply H23.
rewrite <- Hb3.

*****
Hb3 : Logic.eq b (S (S (S O)))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S (S O)) B)
b : elt
H22 : not (In (S (S O)) (remove (S (S O)) B))
H25 : not (In (S (S (S (S (S O))))) (remove (S (S O)) B))
H24 : not (In (S (S (S (S O)))) (remove (S (S O)) B))
H23 : not (In (S (S (S O))) (remove (S (S O)) B))
H21 : forall _ : In (S O) (remove (S (S O)) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S O)) B)) (S O)
H2 : In (S (S O)) B
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
In b (remove (S (S O)) B)
+++++
assumption.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
assert (H_card_rem:cardinal (remove 2 B)=1).
idtac.
assert (H21:=fun HH : In 1 (remove 2 B) => H1 (remove_3 HH)).
destruct (In_dec 3 (remove 2 B)) as [H23|H23].
destruct (In_dec 4 (remove 2 B)) as [H24|H24].
destruct (In_dec 5 (remove 2 B)) as [H25|H25].
apply False_rec.
assert (H22:=(@remove_1 B _ _ (refl_equal 2))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].

*****
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S (S O)) B)
b : elt
H22 : not (In (S (S O)) (remove (S (S O)) B))
H25 : not (In (S (S (S (S (S O))))) (remove (S (S O)) B))
H24 : not (In (S (S (S (S O)))) (remove (S (S O)) B))
H23 : not (In (S (S (S O))) (remove (S (S O)) B))
H21 : forall _ : In (S O) (remove (S (S O)) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S O)) B)) (S O)
H2 : In (S (S O)) B
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
assert (H_card_rem:cardinal (remove 2 B)=1).
idtac.
assert (H21:=fun HH : In 1 (remove 2 B) => H1 (remove_3 HH)).
destruct (In_dec 3 (remove 2 B)) as [H23|H23].
destruct (In_dec 4 (remove 2 B)) as [H24|H24].
destruct (In_dec 5 (remove 2 B)) as [H25|H25].
apply False_rec.
assert (H22:=(@remove_1 B _ _ (refl_equal 2))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].

*****
Hb4 : Logic.eq b (S (S (S (S O))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S (S O)) B)
b : elt
H22 : not (In (S (S O)) (remove (S (S O)) B))
H25 : not (In (S (S (S (S (S O))))) (remove (S (S O)) B))
H24 : not (In (S (S (S (S O)))) (remove (S (S O)) B))
H23 : not (In (S (S (S O))) (remove (S (S O)) B))
H21 : forall _ : In (S O) (remove (S (S O)) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S O)) B)) (S O)
H2 : In (S (S O)) B
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
apply H24.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
assert (H_card_rem:cardinal (remove 2 B)=1).
idtac.
assert (H21:=fun HH : In 1 (remove 2 B) => H1 (remove_3 HH)).
destruct (In_dec 3 (remove 2 B)) as [H23|H23].
destruct (In_dec 4 (remove 2 B)) as [H24|H24].
destruct (In_dec 5 (remove 2 B)) as [H25|H25].
apply False_rec.
assert (H22:=(@remove_1 B _ _ (refl_equal 2))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
apply H24.

*****
Hb4 : Logic.eq b (S (S (S (S O))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S (S O)) B)
b : elt
H22 : not (In (S (S O)) (remove (S (S O)) B))
H25 : not (In (S (S (S (S (S O))))) (remove (S (S O)) B))
H24 : not (In (S (S (S (S O)))) (remove (S (S O)) B))
H23 : not (In (S (S (S O))) (remove (S (S O)) B))
H21 : forall _ : In (S O) (remove (S (S O)) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S O)) B)) (S O)
H2 : In (S (S O)) B
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
In (S (S (S (S O)))) (remove (S (S O)) B)
+++++
rewrite <- Hb4.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
assert (H_card_rem:cardinal (remove 2 B)=1).
idtac.
assert (H21:=fun HH : In 1 (remove 2 B) => H1 (remove_3 HH)).
destruct (In_dec 3 (remove 2 B)) as [H23|H23].
destruct (In_dec 4 (remove 2 B)) as [H24|H24].
destruct (In_dec 5 (remove 2 B)) as [H25|H25].
apply False_rec.
assert (H22:=(@remove_1 B _ _ (refl_equal 2))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
apply H24.
rewrite <- Hb4.

*****
Hb4 : Logic.eq b (S (S (S (S O))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S (S O)) B)
b : elt
H22 : not (In (S (S O)) (remove (S (S O)) B))
H25 : not (In (S (S (S (S (S O))))) (remove (S (S O)) B))
H24 : not (In (S (S (S (S O)))) (remove (S (S O)) B))
H23 : not (In (S (S (S O))) (remove (S (S O)) B))
H21 : forall _ : In (S O) (remove (S (S O)) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S O)) B)) (S O)
H2 : In (S (S O)) B
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
In b (remove (S (S O)) B)
+++++
assumption.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
assert (H_card_rem:cardinal (remove 2 B)=1).
idtac.
assert (H21:=fun HH : In 1 (remove 2 B) => H1 (remove_3 HH)).
destruct (In_dec 3 (remove 2 B)) as [H23|H23].
destruct (In_dec 4 (remove 2 B)) as [H24|H24].
destruct (In_dec 5 (remove 2 B)) as [H25|H25].
apply False_rec.
assert (H22:=(@remove_1 B _ _ (refl_equal 2))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].

*****
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S (S O)) B)
b : elt
H22 : not (In (S (S O)) (remove (S (S O)) B))
H25 : not (In (S (S (S (S (S O))))) (remove (S (S O)) B))
H24 : not (In (S (S (S (S O)))) (remove (S (S O)) B))
H23 : not (In (S (S (S O))) (remove (S (S O)) B))
H21 : forall _ : In (S O) (remove (S (S O)) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S O)) B)) (S O)
H2 : In (S (S O)) B
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
assert (H_card_rem:cardinal (remove 2 B)=1).
idtac.
assert (H21:=fun HH : In 1 (remove 2 B) => H1 (remove_3 HH)).
destruct (In_dec 3 (remove 2 B)) as [H23|H23].
destruct (In_dec 4 (remove 2 B)) as [H24|H24].
destruct (In_dec 5 (remove 2 B)) as [H25|H25].
apply False_rec.
assert (H22:=(@remove_1 B _ _ (refl_equal 2))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].

*****
Hb5 : Logic.eq b (S (S (S (S (S O)))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S (S O)) B)
b : elt
H22 : not (In (S (S O)) (remove (S (S O)) B))
H25 : not (In (S (S (S (S (S O))))) (remove (S (S O)) B))
H24 : not (In (S (S (S (S O)))) (remove (S (S O)) B))
H23 : not (In (S (S (S O))) (remove (S (S O)) B))
H21 : forall _ : In (S O) (remove (S (S O)) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S O)) B)) (S O)
H2 : In (S (S O)) B
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
apply H25.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
assert (H_card_rem:cardinal (remove 2 B)=1).
idtac.
assert (H21:=fun HH : In 1 (remove 2 B) => H1 (remove_3 HH)).
destruct (In_dec 3 (remove 2 B)) as [H23|H23].
destruct (In_dec 4 (remove 2 B)) as [H24|H24].
destruct (In_dec 5 (remove 2 B)) as [H25|H25].
apply False_rec.
assert (H22:=(@remove_1 B _ _ (refl_equal 2))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].
apply H25.

*****
Hb5 : Logic.eq b (S (S (S (S (S O)))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S (S O)) B)
b : elt
H22 : not (In (S (S O)) (remove (S (S O)) B))
H25 : not (In (S (S (S (S (S O))))) (remove (S (S O)) B))
H24 : not (In (S (S (S (S O)))) (remove (S (S O)) B))
H23 : not (In (S (S (S O))) (remove (S (S O)) B))
H21 : forall _ : In (S O) (remove (S (S O)) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S O)) B)) (S O)
H2 : In (S (S O)) B
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
In (S (S (S (S (S O))))) (remove (S (S O)) B)
+++++
rewrite <- Hb5.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
assert (H_card_rem:cardinal (remove 2 B)=1).
idtac.
assert (H21:=fun HH : In 1 (remove 2 B) => H1 (remove_3 HH)).
destruct (In_dec 3 (remove 2 B)) as [H23|H23].
destruct (In_dec 4 (remove 2 B)) as [H24|H24].
destruct (In_dec 5 (remove 2 B)) as [H25|H25].
apply False_rec.
assert (H22:=(@remove_1 B _ _ (refl_equal 2))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].
apply H25.
rewrite <- Hb5.

*****
Hb5 : Logic.eq b (S (S (S (S (S O)))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S (S O)) B)
b : elt
H22 : not (In (S (S O)) (remove (S (S O)) B))
H25 : not (In (S (S (S (S (S O))))) (remove (S (S O)) B))
H24 : not (In (S (S (S (S O)))) (remove (S (S O)) B))
H23 : not (In (S (S (S O))) (remove (S (S O)) B))
H21 : forall _ : In (S O) (remove (S (S O)) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S O)) B)) (S O)
H2 : In (S (S O)) B
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
In b (remove (S (S O)) B)
+++++
assumption.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
assert (H_card_rem:cardinal (remove 2 B)=1).
idtac.
assert (H21:=fun HH : In 1 (remove 2 B) => H1 (remove_3 HH)).
destruct (In_dec 3 (remove 2 B)) as [H23|H23].
destruct (In_dec 4 (remove 2 B)) as [H24|H24].
destruct (In_dec 5 (remove 2 B)) as [H25|H25].
apply False_rec.
assert (H22:=(@remove_1 B _ _ (refl_equal 2))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].

*****
Hb5 : not (Logic.eq b (S (S (S (S (S O))))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S (S O)) B)
b : elt
H22 : not (In (S (S O)) (remove (S (S O)) B))
H25 : not (In (S (S (S (S (S O))))) (remove (S (S O)) B))
H24 : not (In (S (S (S (S O)))) (remove (S (S O)) B))
H23 : not (In (S (S (S O))) (remove (S (S O)) B))
H21 : forall _ : In (S O) (remove (S (S O)) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S O)) B)) (S O)
H2 : In (S (S O)) B
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
assert (H_sub':=@subset_remove_3 _ _ 2 H_sub).
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
assert (H_card_rem:cardinal (remove 2 B)=1).
idtac.
assert (H21:=fun HH : In 1 (remove 2 B) => H1 (remove_3 HH)).
destruct (In_dec 3 (remove 2 B)) as [H23|H23].
destruct (In_dec 4 (remove 2 B)) as [H24|H24].
destruct (In_dec 5 (remove 2 B)) as [H25|H25].
apply False_rec.
assert (H22:=(@remove_1 B _ _ (refl_equal 2))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].
assert (H_sub':=@subset_remove_3 _ _ 2 H_sub).

*****
H_sub' : Subset (remove (S (S O)) B) town_2
Hb5 : not (Logic.eq b (S (S (S (S (S O))))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S (S O)) B)
b : elt
H22 : not (In (S (S O)) (remove (S (S O)) B))
H25 : not (In (S (S (S (S (S O))))) (remove (S (S O)) B))
H24 : not (In (S (S (S (S O)))) (remove (S (S O)) B))
H23 : not (In (S (S (S O))) (remove (S (S O)) B))
H21 : forall _ : In (S O) (remove (S (S O)) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S O)) B)) (S O)
H2 : In (S (S O)) B
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
assert (Hb_town:=H_sub' _ Hb).
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
assert (H_card_rem:cardinal (remove 2 B)=1).
idtac.
assert (H21:=fun HH : In 1 (remove 2 B) => H1 (remove_3 HH)).
destruct (In_dec 3 (remove 2 B)) as [H23|H23].
destruct (In_dec 4 (remove 2 B)) as [H24|H24].
destruct (In_dec 5 (remove 2 B)) as [H25|H25].
apply False_rec.
assert (H22:=(@remove_1 B _ _ (refl_equal 2))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].
assert (H_sub':=@subset_remove_3 _ _ 2 H_sub).
assert (Hb_town:=H_sub' _ Hb).

*****
Hb_town : In b town_2
H_sub' : Subset (remove (S (S O)) B) town_2
Hb5 : not (Logic.eq b (S (S (S (S (S O))))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S (S O)) B)
b : elt
H22 : not (In (S (S O)) (remove (S (S O)) B))
H25 : not (In (S (S (S (S (S O))))) (remove (S (S O)) B))
H24 : not (In (S (S (S (S O)))) (remove (S (S O)) B))
H23 : not (In (S (S (S O))) (remove (S (S O)) B))
H21 : forall _ : In (S O) (remove (S (S O)) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S O)) B)) (S O)
H2 : In (S (S O)) B
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
unfold town_2 in Hb_town.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
assert (H_card_rem:cardinal (remove 2 B)=1).
idtac.
assert (H21:=fun HH : In 1 (remove 2 B) => H1 (remove_3 HH)).
destruct (In_dec 3 (remove 2 B)) as [H23|H23].
destruct (In_dec 4 (remove 2 B)) as [H24|H24].
destruct (In_dec 5 (remove 2 B)) as [H25|H25].
apply False_rec.
assert (H22:=(@remove_1 B _ _ (refl_equal 2))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].
assert (H_sub':=@subset_remove_3 _ _ 2 H_sub).
assert (Hb_town:=H_sub' _ Hb).
unfold town_2 in Hb_town.

*****
Hb_town : In b\n (add (S O)\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))))
H_sub' : Subset (remove (S (S O)) B) town_2
Hb5 : not (Logic.eq b (S (S (S (S (S O))))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S (S O)) B)
b : elt
H22 : not (In (S (S O)) (remove (S (S O)) B))
H25 : not (In (S (S (S (S (S O))))) (remove (S (S O)) B))
H24 : not (In (S (S (S (S O)))) (remove (S (S O)) B))
H23 : not (In (S (S (S O))) (remove (S (S O)) B))
H21 : forall _ : In (S O) (remove (S (S O)) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S O)) B)) (S O)
H2 : In (S (S O)) B
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
destruct (proj1 (FM.add_iff _ _ b) Hb_town) as [Hb1_town|Hb1_town].
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
assert (H_card_rem:cardinal (remove 2 B)=1).
idtac.
assert (H21:=fun HH : In 1 (remove 2 B) => H1 (remove_3 HH)).
destruct (In_dec 3 (remove 2 B)) as [H23|H23].
destruct (In_dec 4 (remove 2 B)) as [H24|H24].
destruct (In_dec 5 (remove 2 B)) as [H25|H25].
apply False_rec.
assert (H22:=(@remove_1 B _ _ (refl_equal 2))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].
assert (H_sub':=@subset_remove_3 _ _ 2 H_sub).
assert (Hb_town:=H_sub' _ Hb).
unfold town_2 in Hb_town.
destruct (proj1 (FM.add_iff _ _ b) Hb_town) as [Hb1_town|Hb1_town].

*****
Hb1_town : Logic.eq (S O) b
Hb_town : In b\n (add (S O)\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))))
H_sub' : Subset (remove (S (S O)) B) town_2
Hb5 : not (Logic.eq b (S (S (S (S (S O))))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S (S O)) B)
b : elt
H22 : not (In (S (S O)) (remove (S (S O)) B))
H25 : not (In (S (S (S (S (S O))))) (remove (S (S O)) B))
H24 : not (In (S (S (S (S O)))) (remove (S (S O)) B))
H23 : not (In (S (S (S O))) (remove (S (S O)) B))
H21 : forall _ : In (S O) (remove (S (S O)) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S O)) B)) (S O)
H2 : In (S (S O)) B
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
apply Hb1.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
assert (H_card_rem:cardinal (remove 2 B)=1).
idtac.
assert (H21:=fun HH : In 1 (remove 2 B) => H1 (remove_3 HH)).
destruct (In_dec 3 (remove 2 B)) as [H23|H23].
destruct (In_dec 4 (remove 2 B)) as [H24|H24].
destruct (In_dec 5 (remove 2 B)) as [H25|H25].
apply False_rec.
assert (H22:=(@remove_1 B _ _ (refl_equal 2))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].
assert (H_sub':=@subset_remove_3 _ _ 2 H_sub).
assert (Hb_town:=H_sub' _ Hb).
unfold town_2 in Hb_town.
destruct (proj1 (FM.add_iff _ _ b) Hb_town) as [Hb1_town|Hb1_town].
apply Hb1.

*****
Hb1_town : Logic.eq (S O) b
Hb_town : In b\n (add (S O)\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))))
H_sub' : Subset (remove (S (S O)) B) town_2
Hb5 : not (Logic.eq b (S (S (S (S (S O))))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S (S O)) B)
b : elt
H22 : not (In (S (S O)) (remove (S (S O)) B))
H25 : not (In (S (S (S (S (S O))))) (remove (S (S O)) B))
H24 : not (In (S (S (S (S O)))) (remove (S (S O)) B))
H23 : not (In (S (S (S O))) (remove (S (S O)) B))
H21 : forall _ : In (S O) (remove (S (S O)) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S O)) B)) (S O)
H2 : In (S (S O)) B
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
Logic.eq b (S O)
+++++
rewrite Hb1_town.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
assert (H_card_rem:cardinal (remove 2 B)=1).
idtac.
assert (H21:=fun HH : In 1 (remove 2 B) => H1 (remove_3 HH)).
destruct (In_dec 3 (remove 2 B)) as [H23|H23].
destruct (In_dec 4 (remove 2 B)) as [H24|H24].
destruct (In_dec 5 (remove 2 B)) as [H25|H25].
apply False_rec.
assert (H22:=(@remove_1 B _ _ (refl_equal 2))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].
assert (H_sub':=@subset_remove_3 _ _ 2 H_sub).
assert (Hb_town:=H_sub' _ Hb).
unfold town_2 in Hb_town.
destruct (proj1 (FM.add_iff _ _ b) Hb_town) as [Hb1_town|Hb1_town].
apply Hb1.
rewrite Hb1_town.

*****
Hb1_town : Logic.eq (S O) b
Hb_town : In b\n (add (S O)\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))))
H_sub' : Subset (remove (S (S O)) B) town_2
Hb5 : not (Logic.eq b (S (S (S (S (S O))))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S (S O)) B)
b : elt
H22 : not (In (S (S O)) (remove (S (S O)) B))
H25 : not (In (S (S (S (S (S O))))) (remove (S (S O)) B))
H24 : not (In (S (S (S (S O)))) (remove (S (S O)) B))
H23 : not (In (S (S (S O))) (remove (S (S O)) B))
H21 : forall _ : In (S O) (remove (S (S O)) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S O)) B)) (S O)
H2 : In (S (S O)) B
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
Logic.eq b b
+++++
reflexivity.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
assert (H_card_rem:cardinal (remove 2 B)=1).
idtac.
assert (H21:=fun HH : In 1 (remove 2 B) => H1 (remove_3 HH)).
destruct (In_dec 3 (remove 2 B)) as [H23|H23].
destruct (In_dec 4 (remove 2 B)) as [H24|H24].
destruct (In_dec 5 (remove 2 B)) as [H25|H25].
apply False_rec.
assert (H22:=(@remove_1 B _ _ (refl_equal 2))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].
assert (H_sub':=@subset_remove_3 _ _ 2 H_sub).
assert (Hb_town:=H_sub' _ Hb).
unfold town_2 in Hb_town.
destruct (proj1 (FM.add_iff _ _ b) Hb_town) as [Hb1_town|Hb1_town].

*****
Hb1_town : In b\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))))
Hb_town : In b\n (add (S O)\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))))
H_sub' : Subset (remove (S (S O)) B) town_2
Hb5 : not (Logic.eq b (S (S (S (S (S O))))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S (S O)) B)
b : elt
H22 : not (In (S (S O)) (remove (S (S O)) B))
H25 : not (In (S (S (S (S (S O))))) (remove (S (S O)) B))
H24 : not (In (S (S (S (S O)))) (remove (S (S O)) B))
H23 : not (In (S (S (S O))) (remove (S (S O)) B))
H21 : forall _ : In (S O) (remove (S (S O)) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S O)) B)) (S O)
H2 : In (S (S O)) B
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
destruct (proj1 (FM.add_iff _ _ b) Hb1_town) as [Hb2_town|Hb2_town].
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
assert (H_card_rem:cardinal (remove 2 B)=1).
idtac.
assert (H21:=fun HH : In 1 (remove 2 B) => H1 (remove_3 HH)).
destruct (In_dec 3 (remove 2 B)) as [H23|H23].
destruct (In_dec 4 (remove 2 B)) as [H24|H24].
destruct (In_dec 5 (remove 2 B)) as [H25|H25].
apply False_rec.
assert (H22:=(@remove_1 B _ _ (refl_equal 2))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].
assert (H_sub':=@subset_remove_3 _ _ 2 H_sub).
assert (Hb_town:=H_sub' _ Hb).
unfold town_2 in Hb_town.
destruct (proj1 (FM.add_iff _ _ b) Hb_town) as [Hb1_town|Hb1_town].
destruct (proj1 (FM.add_iff _ _ b) Hb1_town) as [Hb2_town|Hb2_town].

*****
Hb2_town : Logic.eq (S (S O)) b
Hb1_town : In b\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))))
Hb_town : In b\n (add (S O)\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))))
H_sub' : Subset (remove (S (S O)) B) town_2
Hb5 : not (Logic.eq b (S (S (S (S (S O))))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S (S O)) B)
b : elt
H22 : not (In (S (S O)) (remove (S (S O)) B))
H25 : not (In (S (S (S (S (S O))))) (remove (S (S O)) B))
H24 : not (In (S (S (S (S O)))) (remove (S (S O)) B))
H23 : not (In (S (S (S O))) (remove (S (S O)) B))
H21 : forall _ : In (S O) (remove (S (S O)) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S O)) B)) (S O)
H2 : In (S (S O)) B
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
apply Hb2.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
assert (H_card_rem:cardinal (remove 2 B)=1).
idtac.
assert (H21:=fun HH : In 1 (remove 2 B) => H1 (remove_3 HH)).
destruct (In_dec 3 (remove 2 B)) as [H23|H23].
destruct (In_dec 4 (remove 2 B)) as [H24|H24].
destruct (In_dec 5 (remove 2 B)) as [H25|H25].
apply False_rec.
assert (H22:=(@remove_1 B _ _ (refl_equal 2))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].
assert (H_sub':=@subset_remove_3 _ _ 2 H_sub).
assert (Hb_town:=H_sub' _ Hb).
unfold town_2 in Hb_town.
destruct (proj1 (FM.add_iff _ _ b) Hb_town) as [Hb1_town|Hb1_town].
destruct (proj1 (FM.add_iff _ _ b) Hb1_town) as [Hb2_town|Hb2_town].
apply Hb2.

*****
Hb2_town : Logic.eq (S (S O)) b
Hb1_town : In b\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))))
Hb_town : In b\n (add (S O)\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))))
H_sub' : Subset (remove (S (S O)) B) town_2
Hb5 : not (Logic.eq b (S (S (S (S (S O))))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S (S O)) B)
b : elt
H22 : not (In (S (S O)) (remove (S (S O)) B))
H25 : not (In (S (S (S (S (S O))))) (remove (S (S O)) B))
H24 : not (In (S (S (S (S O)))) (remove (S (S O)) B))
H23 : not (In (S (S (S O))) (remove (S (S O)) B))
H21 : forall _ : In (S O) (remove (S (S O)) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S O)) B)) (S O)
H2 : In (S (S O)) B
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
Logic.eq b (S (S O))
+++++
rewrite Hb2_town.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
assert (H_card_rem:cardinal (remove 2 B)=1).
idtac.
assert (H21:=fun HH : In 1 (remove 2 B) => H1 (remove_3 HH)).
destruct (In_dec 3 (remove 2 B)) as [H23|H23].
destruct (In_dec 4 (remove 2 B)) as [H24|H24].
destruct (In_dec 5 (remove 2 B)) as [H25|H25].
apply False_rec.
assert (H22:=(@remove_1 B _ _ (refl_equal 2))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].
assert (H_sub':=@subset_remove_3 _ _ 2 H_sub).
assert (Hb_town:=H_sub' _ Hb).
unfold town_2 in Hb_town.
destruct (proj1 (FM.add_iff _ _ b) Hb_town) as [Hb1_town|Hb1_town].
destruct (proj1 (FM.add_iff _ _ b) Hb1_town) as [Hb2_town|Hb2_town].
apply Hb2.
rewrite Hb2_town.

*****
Hb2_town : Logic.eq (S (S O)) b
Hb1_town : In b\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))))
Hb_town : In b\n (add (S O)\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))))
H_sub' : Subset (remove (S (S O)) B) town_2
Hb5 : not (Logic.eq b (S (S (S (S (S O))))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S (S O)) B)
b : elt
H22 : not (In (S (S O)) (remove (S (S O)) B))
H25 : not (In (S (S (S (S (S O))))) (remove (S (S O)) B))
H24 : not (In (S (S (S (S O)))) (remove (S (S O)) B))
H23 : not (In (S (S (S O))) (remove (S (S O)) B))
H21 : forall _ : In (S O) (remove (S (S O)) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S O)) B)) (S O)
H2 : In (S (S O)) B
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
Logic.eq b b
+++++
reflexivity.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
assert (H_card_rem:cardinal (remove 2 B)=1).
idtac.
assert (H21:=fun HH : In 1 (remove 2 B) => H1 (remove_3 HH)).
destruct (In_dec 3 (remove 2 B)) as [H23|H23].
destruct (In_dec 4 (remove 2 B)) as [H24|H24].
destruct (In_dec 5 (remove 2 B)) as [H25|H25].
apply False_rec.
assert (H22:=(@remove_1 B _ _ (refl_equal 2))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].
assert (H_sub':=@subset_remove_3 _ _ 2 H_sub).
assert (Hb_town:=H_sub' _ Hb).
unfold town_2 in Hb_town.
destruct (proj1 (FM.add_iff _ _ b) Hb_town) as [Hb1_town|Hb1_town].
destruct (proj1 (FM.add_iff _ _ b) Hb1_town) as [Hb2_town|Hb2_town].

*****
Hb2_town : In b\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))
Hb1_town : In b\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))))
Hb_town : In b\n (add (S O)\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))))
H_sub' : Subset (remove (S (S O)) B) town_2
Hb5 : not (Logic.eq b (S (S (S (S (S O))))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S (S O)) B)
b : elt
H22 : not (In (S (S O)) (remove (S (S O)) B))
H25 : not (In (S (S (S (S (S O))))) (remove (S (S O)) B))
H24 : not (In (S (S (S (S O)))) (remove (S (S O)) B))
H23 : not (In (S (S (S O))) (remove (S (S O)) B))
H21 : forall _ : In (S O) (remove (S (S O)) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S O)) B)) (S O)
H2 : In (S (S O)) B
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
destruct (proj1 (FM.add_iff _ _ b) Hb2_town) as [Hb3_town|Hb3_town].
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
assert (H_card_rem:cardinal (remove 2 B)=1).
idtac.
assert (H21:=fun HH : In 1 (remove 2 B) => H1 (remove_3 HH)).
destruct (In_dec 3 (remove 2 B)) as [H23|H23].
destruct (In_dec 4 (remove 2 B)) as [H24|H24].
destruct (In_dec 5 (remove 2 B)) as [H25|H25].
apply False_rec.
assert (H22:=(@remove_1 B _ _ (refl_equal 2))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].
assert (H_sub':=@subset_remove_3 _ _ 2 H_sub).
assert (Hb_town:=H_sub' _ Hb).
unfold town_2 in Hb_town.
destruct (proj1 (FM.add_iff _ _ b) Hb_town) as [Hb1_town|Hb1_town].
destruct (proj1 (FM.add_iff _ _ b) Hb1_town) as [Hb2_town|Hb2_town].
destruct (proj1 (FM.add_iff _ _ b) Hb2_town) as [Hb3_town|Hb3_town].

*****
Hb3_town : Logic.eq (S (S (S O))) b
Hb2_town : In b\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))
Hb1_town : In b\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))))
Hb_town : In b\n (add (S O)\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))))
H_sub' : Subset (remove (S (S O)) B) town_2
Hb5 : not (Logic.eq b (S (S (S (S (S O))))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S (S O)) B)
b : elt
H22 : not (In (S (S O)) (remove (S (S O)) B))
H25 : not (In (S (S (S (S (S O))))) (remove (S (S O)) B))
H24 : not (In (S (S (S (S O)))) (remove (S (S O)) B))
H23 : not (In (S (S (S O))) (remove (S (S O)) B))
H21 : forall _ : In (S O) (remove (S (S O)) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S O)) B)) (S O)
H2 : In (S (S O)) B
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
apply Hb3.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
assert (H_card_rem:cardinal (remove 2 B)=1).
idtac.
assert (H21:=fun HH : In 1 (remove 2 B) => H1 (remove_3 HH)).
destruct (In_dec 3 (remove 2 B)) as [H23|H23].
destruct (In_dec 4 (remove 2 B)) as [H24|H24].
destruct (In_dec 5 (remove 2 B)) as [H25|H25].
apply False_rec.
assert (H22:=(@remove_1 B _ _ (refl_equal 2))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].
assert (H_sub':=@subset_remove_3 _ _ 2 H_sub).
assert (Hb_town:=H_sub' _ Hb).
unfold town_2 in Hb_town.
destruct (proj1 (FM.add_iff _ _ b) Hb_town) as [Hb1_town|Hb1_town].
destruct (proj1 (FM.add_iff _ _ b) Hb1_town) as [Hb2_town|Hb2_town].
destruct (proj1 (FM.add_iff _ _ b) Hb2_town) as [Hb3_town|Hb3_town].
apply Hb3.

*****
Hb3_town : Logic.eq (S (S (S O))) b
Hb2_town : In b\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))
Hb1_town : In b\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))))
Hb_town : In b\n (add (S O)\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))))
H_sub' : Subset (remove (S (S O)) B) town_2
Hb5 : not (Logic.eq b (S (S (S (S (S O))))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S (S O)) B)
b : elt
H22 : not (In (S (S O)) (remove (S (S O)) B))
H25 : not (In (S (S (S (S (S O))))) (remove (S (S O)) B))
H24 : not (In (S (S (S (S O)))) (remove (S (S O)) B))
H23 : not (In (S (S (S O))) (remove (S (S O)) B))
H21 : forall _ : In (S O) (remove (S (S O)) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S O)) B)) (S O)
H2 : In (S (S O)) B
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
Logic.eq b (S (S (S O)))
+++++
rewrite Hb3_town.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
assert (H_card_rem:cardinal (remove 2 B)=1).
idtac.
assert (H21:=fun HH : In 1 (remove 2 B) => H1 (remove_3 HH)).
destruct (In_dec 3 (remove 2 B)) as [H23|H23].
destruct (In_dec 4 (remove 2 B)) as [H24|H24].
destruct (In_dec 5 (remove 2 B)) as [H25|H25].
apply False_rec.
assert (H22:=(@remove_1 B _ _ (refl_equal 2))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].
assert (H_sub':=@subset_remove_3 _ _ 2 H_sub).
assert (Hb_town:=H_sub' _ Hb).
unfold town_2 in Hb_town.
destruct (proj1 (FM.add_iff _ _ b) Hb_town) as [Hb1_town|Hb1_town].
destruct (proj1 (FM.add_iff _ _ b) Hb1_town) as [Hb2_town|Hb2_town].
destruct (proj1 (FM.add_iff _ _ b) Hb2_town) as [Hb3_town|Hb3_town].
apply Hb3.
rewrite Hb3_town.

*****
Hb3_town : Logic.eq (S (S (S O))) b
Hb2_town : In b\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))
Hb1_town : In b\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))))
Hb_town : In b\n (add (S O)\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))))
H_sub' : Subset (remove (S (S O)) B) town_2
Hb5 : not (Logic.eq b (S (S (S (S (S O))))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S (S O)) B)
b : elt
H22 : not (In (S (S O)) (remove (S (S O)) B))
H25 : not (In (S (S (S (S (S O))))) (remove (S (S O)) B))
H24 : not (In (S (S (S (S O)))) (remove (S (S O)) B))
H23 : not (In (S (S (S O))) (remove (S (S O)) B))
H21 : forall _ : In (S O) (remove (S (S O)) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S O)) B)) (S O)
H2 : In (S (S O)) B
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
Logic.eq b b
+++++
reflexivity.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
assert (H_card_rem:cardinal (remove 2 B)=1).
idtac.
assert (H21:=fun HH : In 1 (remove 2 B) => H1 (remove_3 HH)).
destruct (In_dec 3 (remove 2 B)) as [H23|H23].
destruct (In_dec 4 (remove 2 B)) as [H24|H24].
destruct (In_dec 5 (remove 2 B)) as [H25|H25].
apply False_rec.
assert (H22:=(@remove_1 B _ _ (refl_equal 2))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].
assert (H_sub':=@subset_remove_3 _ _ 2 H_sub).
assert (Hb_town:=H_sub' _ Hb).
unfold town_2 in Hb_town.
destruct (proj1 (FM.add_iff _ _ b) Hb_town) as [Hb1_town|Hb1_town].
destruct (proj1 (FM.add_iff _ _ b) Hb1_town) as [Hb2_town|Hb2_town].
destruct (proj1 (FM.add_iff _ _ b) Hb2_town) as [Hb3_town|Hb3_town].

*****
Hb3_town : In b (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))
Hb2_town : In b\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))
Hb1_town : In b\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))))
Hb_town : In b\n (add (S O)\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))))
H_sub' : Subset (remove (S (S O)) B) town_2
Hb5 : not (Logic.eq b (S (S (S (S (S O))))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S (S O)) B)
b : elt
H22 : not (In (S (S O)) (remove (S (S O)) B))
H25 : not (In (S (S (S (S (S O))))) (remove (S (S O)) B))
H24 : not (In (S (S (S (S O)))) (remove (S (S O)) B))
H23 : not (In (S (S (S O))) (remove (S (S O)) B))
H21 : forall _ : In (S O) (remove (S (S O)) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S O)) B)) (S O)
H2 : In (S (S O)) B
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
destruct (proj1 (FM.add_iff _ _ b) Hb3_town) as [Hb4_town|Hb4_town].
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
assert (H_card_rem:cardinal (remove 2 B)=1).
idtac.
assert (H21:=fun HH : In 1 (remove 2 B) => H1 (remove_3 HH)).
destruct (In_dec 3 (remove 2 B)) as [H23|H23].
destruct (In_dec 4 (remove 2 B)) as [H24|H24].
destruct (In_dec 5 (remove 2 B)) as [H25|H25].
apply False_rec.
assert (H22:=(@remove_1 B _ _ (refl_equal 2))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].
assert (H_sub':=@subset_remove_3 _ _ 2 H_sub).
assert (Hb_town:=H_sub' _ Hb).
unfold town_2 in Hb_town.
destruct (proj1 (FM.add_iff _ _ b) Hb_town) as [Hb1_town|Hb1_town].
destruct (proj1 (FM.add_iff _ _ b) Hb1_town) as [Hb2_town|Hb2_town].
destruct (proj1 (FM.add_iff _ _ b) Hb2_town) as [Hb3_town|Hb3_town].
destruct (proj1 (FM.add_iff _ _ b) Hb3_town) as [Hb4_town|Hb4_town].

*****
Hb4_town : Logic.eq (S (S (S (S O)))) b
Hb3_town : In b (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))
Hb2_town : In b\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))
Hb1_town : In b\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))))
Hb_town : In b\n (add (S O)\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))))
H_sub' : Subset (remove (S (S O)) B) town_2
Hb5 : not (Logic.eq b (S (S (S (S (S O))))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S (S O)) B)
b : elt
H22 : not (In (S (S O)) (remove (S (S O)) B))
H25 : not (In (S (S (S (S (S O))))) (remove (S (S O)) B))
H24 : not (In (S (S (S (S O)))) (remove (S (S O)) B))
H23 : not (In (S (S (S O))) (remove (S (S O)) B))
H21 : forall _ : In (S O) (remove (S (S O)) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S O)) B)) (S O)
H2 : In (S (S O)) B
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
apply Hb4.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
assert (H_card_rem:cardinal (remove 2 B)=1).
idtac.
assert (H21:=fun HH : In 1 (remove 2 B) => H1 (remove_3 HH)).
destruct (In_dec 3 (remove 2 B)) as [H23|H23].
destruct (In_dec 4 (remove 2 B)) as [H24|H24].
destruct (In_dec 5 (remove 2 B)) as [H25|H25].
apply False_rec.
assert (H22:=(@remove_1 B _ _ (refl_equal 2))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].
assert (H_sub':=@subset_remove_3 _ _ 2 H_sub).
assert (Hb_town:=H_sub' _ Hb).
unfold town_2 in Hb_town.
destruct (proj1 (FM.add_iff _ _ b) Hb_town) as [Hb1_town|Hb1_town].
destruct (proj1 (FM.add_iff _ _ b) Hb1_town) as [Hb2_town|Hb2_town].
destruct (proj1 (FM.add_iff _ _ b) Hb2_town) as [Hb3_town|Hb3_town].
destruct (proj1 (FM.add_iff _ _ b) Hb3_town) as [Hb4_town|Hb4_town].
apply Hb4.

*****
Hb4_town : Logic.eq (S (S (S (S O)))) b
Hb3_town : In b (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))
Hb2_town : In b\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))
Hb1_town : In b\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))))
Hb_town : In b\n (add (S O)\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))))
H_sub' : Subset (remove (S (S O)) B) town_2
Hb5 : not (Logic.eq b (S (S (S (S (S O))))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S (S O)) B)
b : elt
H22 : not (In (S (S O)) (remove (S (S O)) B))
H25 : not (In (S (S (S (S (S O))))) (remove (S (S O)) B))
H24 : not (In (S (S (S (S O)))) (remove (S (S O)) B))
H23 : not (In (S (S (S O))) (remove (S (S O)) B))
H21 : forall _ : In (S O) (remove (S (S O)) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S O)) B)) (S O)
H2 : In (S (S O)) B
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
Logic.eq b (S (S (S (S O))))
+++++
rewrite Hb4_town.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
assert (H_card_rem:cardinal (remove 2 B)=1).
idtac.
assert (H21:=fun HH : In 1 (remove 2 B) => H1 (remove_3 HH)).
destruct (In_dec 3 (remove 2 B)) as [H23|H23].
destruct (In_dec 4 (remove 2 B)) as [H24|H24].
destruct (In_dec 5 (remove 2 B)) as [H25|H25].
apply False_rec.
assert (H22:=(@remove_1 B _ _ (refl_equal 2))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].
assert (H_sub':=@subset_remove_3 _ _ 2 H_sub).
assert (Hb_town:=H_sub' _ Hb).
unfold town_2 in Hb_town.
destruct (proj1 (FM.add_iff _ _ b) Hb_town) as [Hb1_town|Hb1_town].
destruct (proj1 (FM.add_iff _ _ b) Hb1_town) as [Hb2_town|Hb2_town].
destruct (proj1 (FM.add_iff _ _ b) Hb2_town) as [Hb3_town|Hb3_town].
destruct (proj1 (FM.add_iff _ _ b) Hb3_town) as [Hb4_town|Hb4_town].
apply Hb4.
rewrite Hb4_town.

*****
Hb4_town : Logic.eq (S (S (S (S O)))) b
Hb3_town : In b (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))
Hb2_town : In b\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))
Hb1_town : In b\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))))
Hb_town : In b\n (add (S O)\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))))
H_sub' : Subset (remove (S (S O)) B) town_2
Hb5 : not (Logic.eq b (S (S (S (S (S O))))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S (S O)) B)
b : elt
H22 : not (In (S (S O)) (remove (S (S O)) B))
H25 : not (In (S (S (S (S (S O))))) (remove (S (S O)) B))
H24 : not (In (S (S (S (S O)))) (remove (S (S O)) B))
H23 : not (In (S (S (S O))) (remove (S (S O)) B))
H21 : forall _ : In (S O) (remove (S (S O)) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S O)) B)) (S O)
H2 : In (S (S O)) B
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
Logic.eq b b
+++++
reflexivity.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
assert (H_card_rem:cardinal (remove 2 B)=1).
idtac.
assert (H21:=fun HH : In 1 (remove 2 B) => H1 (remove_3 HH)).
destruct (In_dec 3 (remove 2 B)) as [H23|H23].
destruct (In_dec 4 (remove 2 B)) as [H24|H24].
destruct (In_dec 5 (remove 2 B)) as [H25|H25].
apply False_rec.
assert (H22:=(@remove_1 B _ _ (refl_equal 2))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].
assert (H_sub':=@subset_remove_3 _ _ 2 H_sub).
assert (Hb_town:=H_sub' _ Hb).
unfold town_2 in Hb_town.
destruct (proj1 (FM.add_iff _ _ b) Hb_town) as [Hb1_town|Hb1_town].
destruct (proj1 (FM.add_iff _ _ b) Hb1_town) as [Hb2_town|Hb2_town].
destruct (proj1 (FM.add_iff _ _ b) Hb2_town) as [Hb3_town|Hb3_town].
destruct (proj1 (FM.add_iff _ _ b) Hb3_town) as [Hb4_town|Hb4_town].

*****
Hb4_town : In b (add (S (S (S (S (S O))))) empty)
Hb3_town : In b (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))
Hb2_town : In b\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))
Hb1_town : In b\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))))
Hb_town : In b\n (add (S O)\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))))
H_sub' : Subset (remove (S (S O)) B) town_2
Hb5 : not (Logic.eq b (S (S (S (S (S O))))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S (S O)) B)
b : elt
H22 : not (In (S (S O)) (remove (S (S O)) B))
H25 : not (In (S (S (S (S (S O))))) (remove (S (S O)) B))
H24 : not (In (S (S (S (S O)))) (remove (S (S O)) B))
H23 : not (In (S (S (S O))) (remove (S (S O)) B))
H21 : forall _ : In (S O) (remove (S (S O)) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S O)) B)) (S O)
H2 : In (S (S O)) B
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
destruct (proj1 (FM.add_iff _ _ b) Hb4_town) as [Hb5_town|Hb5_town].
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
assert (H_card_rem:cardinal (remove 2 B)=1).
idtac.
assert (H21:=fun HH : In 1 (remove 2 B) => H1 (remove_3 HH)).
destruct (In_dec 3 (remove 2 B)) as [H23|H23].
destruct (In_dec 4 (remove 2 B)) as [H24|H24].
destruct (In_dec 5 (remove 2 B)) as [H25|H25].
apply False_rec.
assert (H22:=(@remove_1 B _ _ (refl_equal 2))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].
assert (H_sub':=@subset_remove_3 _ _ 2 H_sub).
assert (Hb_town:=H_sub' _ Hb).
unfold town_2 in Hb_town.
destruct (proj1 (FM.add_iff _ _ b) Hb_town) as [Hb1_town|Hb1_town].
destruct (proj1 (FM.add_iff _ _ b) Hb1_town) as [Hb2_town|Hb2_town].
destruct (proj1 (FM.add_iff _ _ b) Hb2_town) as [Hb3_town|Hb3_town].
destruct (proj1 (FM.add_iff _ _ b) Hb3_town) as [Hb4_town|Hb4_town].
destruct (proj1 (FM.add_iff _ _ b) Hb4_town) as [Hb5_town|Hb5_town].

*****
Hb5_town : Logic.eq (S (S (S (S (S O))))) b
Hb4_town : In b (add (S (S (S (S (S O))))) empty)
Hb3_town : In b (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))
Hb2_town : In b\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))
Hb1_town : In b\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))))
Hb_town : In b\n (add (S O)\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))))
H_sub' : Subset (remove (S (S O)) B) town_2
Hb5 : not (Logic.eq b (S (S (S (S (S O))))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S (S O)) B)
b : elt
H22 : not (In (S (S O)) (remove (S (S O)) B))
H25 : not (In (S (S (S (S (S O))))) (remove (S (S O)) B))
H24 : not (In (S (S (S (S O)))) (remove (S (S O)) B))
H23 : not (In (S (S (S O))) (remove (S (S O)) B))
H21 : forall _ : In (S O) (remove (S (S O)) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S O)) B)) (S O)
H2 : In (S (S O)) B
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
apply Hb5.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
assert (H_card_rem:cardinal (remove 2 B)=1).
idtac.
assert (H21:=fun HH : In 1 (remove 2 B) => H1 (remove_3 HH)).
destruct (In_dec 3 (remove 2 B)) as [H23|H23].
destruct (In_dec 4 (remove 2 B)) as [H24|H24].
destruct (In_dec 5 (remove 2 B)) as [H25|H25].
apply False_rec.
assert (H22:=(@remove_1 B _ _ (refl_equal 2))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].
assert (H_sub':=@subset_remove_3 _ _ 2 H_sub).
assert (Hb_town:=H_sub' _ Hb).
unfold town_2 in Hb_town.
destruct (proj1 (FM.add_iff _ _ b) Hb_town) as [Hb1_town|Hb1_town].
destruct (proj1 (FM.add_iff _ _ b) Hb1_town) as [Hb2_town|Hb2_town].
destruct (proj1 (FM.add_iff _ _ b) Hb2_town) as [Hb3_town|Hb3_town].
destruct (proj1 (FM.add_iff _ _ b) Hb3_town) as [Hb4_town|Hb4_town].
destruct (proj1 (FM.add_iff _ _ b) Hb4_town) as [Hb5_town|Hb5_town].
apply Hb5.

*****
Hb5_town : Logic.eq (S (S (S (S (S O))))) b
Hb4_town : In b (add (S (S (S (S (S O))))) empty)
Hb3_town : In b (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))
Hb2_town : In b\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))
Hb1_town : In b\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))))
Hb_town : In b\n (add (S O)\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))))
H_sub' : Subset (remove (S (S O)) B) town_2
Hb5 : not (Logic.eq b (S (S (S (S (S O))))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S (S O)) B)
b : elt
H22 : not (In (S (S O)) (remove (S (S O)) B))
H25 : not (In (S (S (S (S (S O))))) (remove (S (S O)) B))
H24 : not (In (S (S (S (S O)))) (remove (S (S O)) B))
H23 : not (In (S (S (S O))) (remove (S (S O)) B))
H21 : forall _ : In (S O) (remove (S (S O)) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S O)) B)) (S O)
H2 : In (S (S O)) B
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
Logic.eq b (S (S (S (S (S O)))))
+++++
rewrite Hb5_town.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
assert (H_card_rem:cardinal (remove 2 B)=1).
idtac.
assert (H21:=fun HH : In 1 (remove 2 B) => H1 (remove_3 HH)).
destruct (In_dec 3 (remove 2 B)) as [H23|H23].
destruct (In_dec 4 (remove 2 B)) as [H24|H24].
destruct (In_dec 5 (remove 2 B)) as [H25|H25].
apply False_rec.
assert (H22:=(@remove_1 B _ _ (refl_equal 2))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].
assert (H_sub':=@subset_remove_3 _ _ 2 H_sub).
assert (Hb_town:=H_sub' _ Hb).
unfold town_2 in Hb_town.
destruct (proj1 (FM.add_iff _ _ b) Hb_town) as [Hb1_town|Hb1_town].
destruct (proj1 (FM.add_iff _ _ b) Hb1_town) as [Hb2_town|Hb2_town].
destruct (proj1 (FM.add_iff _ _ b) Hb2_town) as [Hb3_town|Hb3_town].
destruct (proj1 (FM.add_iff _ _ b) Hb3_town) as [Hb4_town|Hb4_town].
destruct (proj1 (FM.add_iff _ _ b) Hb4_town) as [Hb5_town|Hb5_town].
apply Hb5.
rewrite Hb5_town.

*****
Hb5_town : Logic.eq (S (S (S (S (S O))))) b
Hb4_town : In b (add (S (S (S (S (S O))))) empty)
Hb3_town : In b (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))
Hb2_town : In b\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))
Hb1_town : In b\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))))
Hb_town : In b\n (add (S O)\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))))
H_sub' : Subset (remove (S (S O)) B) town_2
Hb5 : not (Logic.eq b (S (S (S (S (S O))))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S (S O)) B)
b : elt
H22 : not (In (S (S O)) (remove (S (S O)) B))
H25 : not (In (S (S (S (S (S O))))) (remove (S (S O)) B))
H24 : not (In (S (S (S (S O)))) (remove (S (S O)) B))
H23 : not (In (S (S (S O))) (remove (S (S O)) B))
H21 : forall _ : In (S O) (remove (S (S O)) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S O)) B)) (S O)
H2 : In (S (S O)) B
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
Logic.eq b b
+++++
reflexivity.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
assert (H_card_rem:cardinal (remove 2 B)=1).
idtac.
assert (H21:=fun HH : In 1 (remove 2 B) => H1 (remove_3 HH)).
destruct (In_dec 3 (remove 2 B)) as [H23|H23].
destruct (In_dec 4 (remove 2 B)) as [H24|H24].
destruct (In_dec 5 (remove 2 B)) as [H25|H25].
apply False_rec.
assert (H22:=(@remove_1 B _ _ (refl_equal 2))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].
assert (H_sub':=@subset_remove_3 _ _ 2 H_sub).
assert (Hb_town:=H_sub' _ Hb).
unfold town_2 in Hb_town.
destruct (proj1 (FM.add_iff _ _ b) Hb_town) as [Hb1_town|Hb1_town].
destruct (proj1 (FM.add_iff _ _ b) Hb1_town) as [Hb2_town|Hb2_town].
destruct (proj1 (FM.add_iff _ _ b) Hb2_town) as [Hb3_town|Hb3_town].
destruct (proj1 (FM.add_iff _ _ b) Hb3_town) as [Hb4_town|Hb4_town].
destruct (proj1 (FM.add_iff _ _ b) Hb4_town) as [Hb5_town|Hb5_town].

*****
Hb5_town : In b empty
Hb4_town : In b (add (S (S (S (S (S O))))) empty)
Hb3_town : In b (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))
Hb2_town : In b\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))
Hb1_town : In b\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))))
Hb_town : In b\n (add (S O)\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))))
H_sub' : Subset (remove (S (S O)) B) town_2
Hb5 : not (Logic.eq b (S (S (S (S (S O))))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S (S O)) B)
b : elt
H22 : not (In (S (S O)) (remove (S (S O)) B))
H25 : not (In (S (S (S (S (S O))))) (remove (S (S O)) B))
H24 : not (In (S (S (S (S O)))) (remove (S (S O)) B))
H23 : not (In (S (S (S O))) (remove (S (S O)) B))
H21 : forall _ : In (S O) (remove (S (S O)) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S O)) B)) (S O)
H2 : In (S (S O)) B
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
apply (proj1 (FM.empty_iff b) Hb5_town).
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].

*****
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
sumor (sumor (sumor (sumor (sumor (sumor (sumor (sumor (sumbool (Equal B (add (S O) (add (S (S O)) empty))) (Equal B (add (S O) (add (S (S (S O))) empty)))) (Equal B (add (S O) (add (S (S (S (S O)))) empty)))) (Equal B (add (S O) (add (S (S (S (S (S O))))) empty)))) (Equal B (add (S (S O)) (add (S (S (S O))) empty)))) (Equal B (add (S (S O)) (add (S (S (S (S O)))) empty)))) (Equal B (add (S (S O)) (add (S (S (S (S (S O))))) empty)))) (Equal B (add (S (S (S O))) (add (S (S (S (S O)))) empty)))) (Equal B (add (S (S (S O))) (add (S (S (S (S (S O))))) empty)))) (Equal B (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))
+++++
destruct (In_dec 3 B) as [H3|H3].
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].

*****
H3 : In (S (S (S O))) B
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
sumor (sumor (sumor (sumor (sumor (sumor (sumor (sumor (sumbool (Equal B (add (S O) (add (S (S O)) empty))) (Equal B (add (S O) (add (S (S (S O))) empty)))) (Equal B (add (S O) (add (S (S (S (S O)))) empty)))) (Equal B (add (S O) (add (S (S (S (S (S O))))) empty)))) (Equal B (add (S (S O)) (add (S (S (S O))) empty)))) (Equal B (add (S (S O)) (add (S (S (S (S O)))) empty)))) (Equal B (add (S (S O)) (add (S (S (S (S (S O))))) empty)))) (Equal B (add (S (S (S O))) (add (S (S (S (S O)))) empty)))) (Equal B (add (S (S (S O))) (add (S (S (S (S (S O))))) empty)))) (Equal B (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))
+++++
assert (H_card_rem:cardinal (remove 3 B)=1).
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
assert (H_card_rem:cardinal (remove 3 B)=1).

*****
H3 : In (S (S (S O))) B
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
Logic.eq (cardinal (remove (S (S (S O))) B)) (S O)
+++++
rewrite <- (remove_cardinal_1 H3) in H_card.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
assert (H_card_rem:cardinal (remove 3 B)=1).
rewrite <- (remove_cardinal_1 H3) in H_card.

*****
H3 : In (S (S (S O))) B
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (S (cardinal (remove (S (S (S O))) B))) (S (S O))
H_sub : Subset B town_2
B : True
*****
Logic.eq (cardinal (remove (S (S (S O))) B)) (S O)
+++++
apply eq_add_S.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
assert (H_card_rem:cardinal (remove 3 B)=1).
rewrite <- (remove_cardinal_1 H3) in H_card.
apply eq_add_S.

*****
H3 : In (S (S (S O))) B
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (S (cardinal (remove (S (S (S O))) B))) (S (S O))
H_sub : Subset B town_2
B : True
*****
Logic.eq (S (cardinal (remove (S (S (S O))) B))) (S (S O))
+++++
assumption.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
assert (H_card_rem:cardinal (remove 3 B)=1).

*****
H_card_rem : Logic.eq (cardinal (remove (S (S (S O))) B)) (S O)
H3 : In (S (S (S O))) B
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
sumor (sumor (sumor (sumor (sumor (sumor (sumor (sumor (sumbool (Equal B (add (S O) (add (S (S O)) empty))) (Equal B (add (S O) (add (S (S (S O))) empty)))) (Equal B (add (S O) (add (S (S (S (S O)))) empty)))) (Equal B (add (S O) (add (S (S (S (S (S O))))) empty)))) (Equal B (add (S (S O)) (add (S (S (S O))) empty)))) (Equal B (add (S (S O)) (add (S (S (S (S O)))) empty)))) (Equal B (add (S (S O)) (add (S (S (S (S (S O))))) empty)))) (Equal B (add (S (S (S O))) (add (S (S (S (S O)))) empty)))) (Equal B (add (S (S (S O))) (add (S (S (S (S (S O))))) empty)))) (Equal B (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))
+++++
idtac.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
assert (H_card_rem:cardinal (remove 3 B)=1).
idtac.

*****
H_card_rem : Logic.eq (cardinal (remove (S (S (S O))) B)) (S O)
H3 : In (S (S (S O))) B
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
sumor (sumor (sumor (sumor (sumor (sumor (sumor (sumor (sumbool (Equal B (add (S O) (add (S (S O)) empty))) (Equal B (add (S O) (add (S (S (S O))) empty)))) (Equal B (add (S O) (add (S (S (S (S O)))) empty)))) (Equal B (add (S O) (add (S (S (S (S (S O))))) empty)))) (Equal B (add (S (S O)) (add (S (S (S O))) empty)))) (Equal B (add (S (S O)) (add (S (S (S (S O)))) empty)))) (Equal B (add (S (S O)) (add (S (S (S (S (S O))))) empty)))) (Equal B (add (S (S (S O))) (add (S (S (S (S O)))) empty)))) (Equal B (add (S (S (S O))) (add (S (S (S (S (S O))))) empty)))) (Equal B (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))
+++++
assert (H31:=fun HH : In 1 (remove 3 B) => H1 (remove_3 HH)).
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
assert (H_card_rem:cardinal (remove 3 B)=1).
idtac.
assert (H31:=fun HH : In 1 (remove 3 B) => H1 (remove_3 HH)).

*****
H31 : forall _ : In (S O) (remove (S (S (S O))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S O))) B)) (S O)
H3 : In (S (S (S O))) B
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
sumor (sumor (sumor (sumor (sumor (sumor (sumor (sumor (sumbool (Equal B (add (S O) (add (S (S O)) empty))) (Equal B (add (S O) (add (S (S (S O))) empty)))) (Equal B (add (S O) (add (S (S (S (S O)))) empty)))) (Equal B (add (S O) (add (S (S (S (S (S O))))) empty)))) (Equal B (add (S (S O)) (add (S (S (S O))) empty)))) (Equal B (add (S (S O)) (add (S (S (S (S O)))) empty)))) (Equal B (add (S (S O)) (add (S (S (S (S (S O))))) empty)))) (Equal B (add (S (S (S O))) (add (S (S (S (S O)))) empty)))) (Equal B (add (S (S (S O))) (add (S (S (S (S (S O))))) empty)))) (Equal B (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))
+++++
assert (H32:=fun HH : In 2 (remove 3 B) => H2 (remove_3 HH)).
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
assert (H_card_rem:cardinal (remove 3 B)=1).
idtac.
assert (H31:=fun HH : In 1 (remove 3 B) => H1 (remove_3 HH)).
assert (H32:=fun HH : In 2 (remove 3 B) => H2 (remove_3 HH)).

*****
H32 : forall _ : In (S (S O)) (remove (S (S (S O))) B), False
H31 : forall _ : In (S O) (remove (S (S (S O))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S O))) B)) (S O)
H3 : In (S (S (S O))) B
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
sumor (sumor (sumor (sumor (sumor (sumor (sumor (sumor (sumbool (Equal B (add (S O) (add (S (S O)) empty))) (Equal B (add (S O) (add (S (S (S O))) empty)))) (Equal B (add (S O) (add (S (S (S (S O)))) empty)))) (Equal B (add (S O) (add (S (S (S (S (S O))))) empty)))) (Equal B (add (S (S O)) (add (S (S (S O))) empty)))) (Equal B (add (S (S O)) (add (S (S (S (S O)))) empty)))) (Equal B (add (S (S O)) (add (S (S (S (S (S O))))) empty)))) (Equal B (add (S (S (S O))) (add (S (S (S (S O)))) empty)))) (Equal B (add (S (S (S O))) (add (S (S (S (S (S O))))) empty)))) (Equal B (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))
+++++
destruct (In_dec 4 (remove 3 B)) as [H34|H34].
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
assert (H_card_rem:cardinal (remove 3 B)=1).
idtac.
assert (H31:=fun HH : In 1 (remove 3 B) => H1 (remove_3 HH)).
assert (H32:=fun HH : In 2 (remove 3 B) => H2 (remove_3 HH)).
destruct (In_dec 4 (remove 3 B)) as [H34|H34].

*****
H34 : In (S (S (S (S O)))) (remove (S (S (S O))) B)
H32 : forall _ : In (S (S O)) (remove (S (S (S O))) B), False
H31 : forall _ : In (S O) (remove (S (S (S O))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S O))) B)) (S O)
H3 : In (S (S (S O))) B
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
sumor (sumor (sumor (sumor (sumor (sumor (sumor (sumor (sumbool (Equal B (add (S O) (add (S (S O)) empty))) (Equal B (add (S O) (add (S (S (S O))) empty)))) (Equal B (add (S O) (add (S (S (S (S O)))) empty)))) (Equal B (add (S O) (add (S (S (S (S (S O))))) empty)))) (Equal B (add (S (S O)) (add (S (S (S O))) empty)))) (Equal B (add (S (S O)) (add (S (S (S (S O)))) empty)))) (Equal B (add (S (S O)) (add (S (S (S (S (S O))))) empty)))) (Equal B (add (S (S (S O))) (add (S (S (S (S O)))) empty)))) (Equal B (add (S (S (S O))) (add (S (S (S (S (S O))))) empty)))) (Equal B (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))
+++++
do 2 left.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
assert (H_card_rem:cardinal (remove 3 B)=1).
idtac.
assert (H31:=fun HH : In 1 (remove 3 B) => H1 (remove_3 HH)).
assert (H32:=fun HH : In 2 (remove 3 B) => H2 (remove_3 HH)).
destruct (In_dec 4 (remove 3 B)) as [H34|H34].
do 2 left.

*****
H34 : In (S (S (S (S O)))) (remove (S (S (S O))) B)
H32 : forall _ : In (S (S O)) (remove (S (S (S O))) B), False
H31 : forall _ : In (S O) (remove (S (S (S O))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S O))) B)) (S O)
H3 : In (S (S (S O))) B
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
sumor (sumor (sumor (sumor (sumor (sumor (sumbool (Equal B (add (S O) (add (S (S O)) empty))) (Equal B (add (S O) (add (S (S (S O))) empty)))) (Equal B (add (S O) (add (S (S (S (S O)))) empty)))) (Equal B (add (S O) (add (S (S (S (S (S O))))) empty)))) (Equal B (add (S (S O)) (add (S (S (S O))) empty)))) (Equal B (add (S (S O)) (add (S (S (S (S O)))) empty)))) (Equal B (add (S (S O)) (add (S (S (S (S (S O))))) empty)))) (Equal B (add (S (S (S O))) (add (S (S (S (S O)))) empty)))
+++++
right.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
assert (H_card_rem:cardinal (remove 3 B)=1).
idtac.
assert (H31:=fun HH : In 1 (remove 3 B) => H1 (remove_3 HH)).
assert (H32:=fun HH : In 2 (remove 3 B) => H2 (remove_3 HH)).
destruct (In_dec 4 (remove 3 B)) as [H34|H34].
do 2 left.
right.

*****
H34 : In (S (S (S (S O)))) (remove (S (S (S O))) B)
H32 : forall _ : In (S (S O)) (remove (S (S (S O))) B), False
H31 : forall _ : In (S O) (remove (S (S (S O))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S O))) B)) (S O)
H3 : In (S (S (S O))) B
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
Equal B (add (S (S (S O))) (add (S (S (S (S O)))) empty))
+++++
rewrite <- (add_remove H3).
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
assert (H_card_rem:cardinal (remove 3 B)=1).
idtac.
assert (H31:=fun HH : In 1 (remove 3 B) => H1 (remove_3 HH)).
assert (H32:=fun HH : In 2 (remove 3 B) => H2 (remove_3 HH)).
destruct (In_dec 4 (remove 3 B)) as [H34|H34].
do 2 left.
right.
rewrite <- (add_remove H3).

*****
H34 : In (S (S (S (S O)))) (remove (S (S (S O))) B)
H32 : forall _ : In (S (S O)) (remove (S (S (S O))) B), False
H31 : forall _ : In (S O) (remove (S (S (S O))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S O))) B)) (S O)
H3 : In (S (S (S O))) B
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
Equal (add (S (S (S O))) (remove (S (S (S O))) B)) (add (S (S (S O))) (add (S (S (S (S O)))) empty))
+++++
rewrite <- (add_remove H34).
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
assert (H_card_rem:cardinal (remove 3 B)=1).
idtac.
assert (H31:=fun HH : In 1 (remove 3 B) => H1 (remove_3 HH)).
assert (H32:=fun HH : In 2 (remove 3 B) => H2 (remove_3 HH)).
destruct (In_dec 4 (remove 3 B)) as [H34|H34].
do 2 left.
right.
rewrite <- (add_remove H3).
rewrite <- (add_remove H34).

*****
H34 : In (S (S (S (S O)))) (remove (S (S (S O))) B)
H32 : forall _ : In (S (S O)) (remove (S (S (S O))) B), False
H31 : forall _ : In (S O) (remove (S (S (S O))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S O))) B)) (S O)
H3 : In (S (S (S O))) B
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
Equal (add (S (S (S O))) (add (S (S (S (S O)))) (remove (S (S (S (S O)))) (remove (S (S (S O))) B)))) (add (S (S (S O))) (add (S (S (S (S O)))) empty))
+++++
generalize (remove_cardinal_1 H34).
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
assert (H_card_rem:cardinal (remove 3 B)=1).
idtac.
assert (H31:=fun HH : In 1 (remove 3 B) => H1 (remove_3 HH)).
assert (H32:=fun HH : In 2 (remove 3 B) => H2 (remove_3 HH)).
destruct (In_dec 4 (remove 3 B)) as [H34|H34].
do 2 left.
right.
rewrite <- (add_remove H3).
rewrite <- (add_remove H34).
generalize (remove_cardinal_1 H34).

*****
H34 : In (S (S (S (S O)))) (remove (S (S (S O))) B)
H32 : forall _ : In (S (S O)) (remove (S (S (S O))) B), False
H31 : forall _ : In (S O) (remove (S (S (S O))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S O))) B)) (S O)
H3 : In (S (S (S O))) B
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
forall _ : Logic.eq (S (cardinal (remove (S (S (S (S O)))) (remove (S (S (S O))) B)))) (cardinal (remove (S (S (S O))) B)), Equal (add (S (S (S O))) (add (S (S (S (S O)))) (remove (S (S (S (S O)))) (remove (S (S (S O))) B)))) (add (S (S (S O))) (add (S (S (S (S O)))) empty))
+++++
rewrite H_card_rem.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
assert (H_card_rem:cardinal (remove 3 B)=1).
idtac.
assert (H31:=fun HH : In 1 (remove 3 B) => H1 (remove_3 HH)).
assert (H32:=fun HH : In 2 (remove 3 B) => H2 (remove_3 HH)).
destruct (In_dec 4 (remove 3 B)) as [H34|H34].
do 2 left.
right.
rewrite <- (add_remove H3).
rewrite <- (add_remove H34).
generalize (remove_cardinal_1 H34).
rewrite H_card_rem.

*****
H34 : In (S (S (S (S O)))) (remove (S (S (S O))) B)
H32 : forall _ : In (S (S O)) (remove (S (S (S O))) B), False
H31 : forall _ : In (S O) (remove (S (S (S O))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S O))) B)) (S O)
H3 : In (S (S (S O))) B
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
forall _ : Logic.eq (S (cardinal (remove (S (S (S (S O)))) (remove (S (S (S O))) B)))) (S O), Equal (add (S (S (S O))) (add (S (S (S (S O)))) (remove (S (S (S (S O)))) (remove (S (S (S O))) B)))) (add (S (S (S O))) (add (S (S (S (S O)))) empty))
+++++
intro H_eq2.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
assert (H_card_rem:cardinal (remove 3 B)=1).
idtac.
assert (H31:=fun HH : In 1 (remove 3 B) => H1 (remove_3 HH)).
assert (H32:=fun HH : In 2 (remove 3 B) => H2 (remove_3 HH)).
destruct (In_dec 4 (remove 3 B)) as [H34|H34].
do 2 left.
right.
rewrite <- (add_remove H3).
rewrite <- (add_remove H34).
generalize (remove_cardinal_1 H34).
rewrite H_card_rem.
intro H_eq2.

*****
H_eq2 : Logic.eq\n (S (cardinal (remove (S (S (S (S O)))) (remove (S (S (S O))) B))))\n (S O)
H34 : In (S (S (S (S O)))) (remove (S (S (S O))) B)
H32 : forall _ : In (S (S O)) (remove (S (S (S O))) B), False
H31 : forall _ : In (S O) (remove (S (S (S O))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S O))) B)) (S O)
H3 : In (S (S (S O))) B
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
Equal (add (S (S (S O))) (add (S (S (S (S O)))) (remove (S (S (S (S O)))) (remove (S (S (S O))) B)))) (add (S (S (S O))) (add (S (S (S (S O)))) empty))
+++++
rewrite (empty_is_empty_1 (cardinal_inv_1 (eq_add_S _ _ H_eq2))).
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
assert (H_card_rem:cardinal (remove 3 B)=1).
idtac.
assert (H31:=fun HH : In 1 (remove 3 B) => H1 (remove_3 HH)).
assert (H32:=fun HH : In 2 (remove 3 B) => H2 (remove_3 HH)).
destruct (In_dec 4 (remove 3 B)) as [H34|H34].
do 2 left.
right.
rewrite <- (add_remove H3).
rewrite <- (add_remove H34).
generalize (remove_cardinal_1 H34).
rewrite H_card_rem.
intro H_eq2.
rewrite (empty_is_empty_1 (cardinal_inv_1 (eq_add_S _ _ H_eq2))).

*****
H_eq2 : Logic.eq\n (S (cardinal (remove (S (S (S (S O)))) (remove (S (S (S O))) B))))\n (S O)
H34 : In (S (S (S (S O)))) (remove (S (S (S O))) B)
H32 : forall _ : In (S (S O)) (remove (S (S (S O))) B), False
H31 : forall _ : In (S O) (remove (S (S (S O))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S O))) B)) (S O)
H3 : In (S (S (S O))) B
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
Equal (add (S (S (S O))) (add (S (S (S (S O)))) empty)) (add (S (S (S O))) (add (S (S (S (S O)))) empty))
+++++
reflexivity.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
assert (H_card_rem:cardinal (remove 3 B)=1).
idtac.
assert (H31:=fun HH : In 1 (remove 3 B) => H1 (remove_3 HH)).
assert (H32:=fun HH : In 2 (remove 3 B) => H2 (remove_3 HH)).
destruct (In_dec 4 (remove 3 B)) as [H34|H34].

*****
H34 : not (In (S (S (S (S O)))) (remove (S (S (S O))) B))
H32 : forall _ : In (S (S O)) (remove (S (S (S O))) B), False
H31 : forall _ : In (S O) (remove (S (S (S O))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S O))) B)) (S O)
H3 : In (S (S (S O))) B
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
sumor (sumor (sumor (sumor (sumor (sumor (sumor (sumor (sumbool (Equal B (add (S O) (add (S (S O)) empty))) (Equal B (add (S O) (add (S (S (S O))) empty)))) (Equal B (add (S O) (add (S (S (S (S O)))) empty)))) (Equal B (add (S O) (add (S (S (S (S (S O))))) empty)))) (Equal B (add (S (S O)) (add (S (S (S O))) empty)))) (Equal B (add (S (S O)) (add (S (S (S (S O)))) empty)))) (Equal B (add (S (S O)) (add (S (S (S (S (S O))))) empty)))) (Equal B (add (S (S (S O))) (add (S (S (S (S O)))) empty)))) (Equal B (add (S (S (S O))) (add (S (S (S (S (S O))))) empty)))) (Equal B (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))
+++++
destruct (In_dec 5 (remove 3 B)) as [H35|H35].
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
assert (H_card_rem:cardinal (remove 3 B)=1).
idtac.
assert (H31:=fun HH : In 1 (remove 3 B) => H1 (remove_3 HH)).
assert (H32:=fun HH : In 2 (remove 3 B) => H2 (remove_3 HH)).
destruct (In_dec 4 (remove 3 B)) as [H34|H34].
destruct (In_dec 5 (remove 3 B)) as [H35|H35].

*****
H35 : In (S (S (S (S (S O))))) (remove (S (S (S O))) B)
H34 : not (In (S (S (S (S O)))) (remove (S (S (S O))) B))
H32 : forall _ : In (S (S O)) (remove (S (S (S O))) B), False
H31 : forall _ : In (S O) (remove (S (S (S O))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S O))) B)) (S O)
H3 : In (S (S (S O))) B
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
sumor (sumor (sumor (sumor (sumor (sumor (sumor (sumor (sumbool (Equal B (add (S O) (add (S (S O)) empty))) (Equal B (add (S O) (add (S (S (S O))) empty)))) (Equal B (add (S O) (add (S (S (S (S O)))) empty)))) (Equal B (add (S O) (add (S (S (S (S (S O))))) empty)))) (Equal B (add (S (S O)) (add (S (S (S O))) empty)))) (Equal B (add (S (S O)) (add (S (S (S (S O)))) empty)))) (Equal B (add (S (S O)) (add (S (S (S (S (S O))))) empty)))) (Equal B (add (S (S (S O))) (add (S (S (S (S O)))) empty)))) (Equal B (add (S (S (S O))) (add (S (S (S (S (S O))))) empty)))) (Equal B (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))
+++++
left.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
assert (H_card_rem:cardinal (remove 3 B)=1).
idtac.
assert (H31:=fun HH : In 1 (remove 3 B) => H1 (remove_3 HH)).
assert (H32:=fun HH : In 2 (remove 3 B) => H2 (remove_3 HH)).
destruct (In_dec 4 (remove 3 B)) as [H34|H34].
destruct (In_dec 5 (remove 3 B)) as [H35|H35].
left.

*****
H35 : In (S (S (S (S (S O))))) (remove (S (S (S O))) B)
H34 : not (In (S (S (S (S O)))) (remove (S (S (S O))) B))
H32 : forall _ : In (S (S O)) (remove (S (S (S O))) B), False
H31 : forall _ : In (S O) (remove (S (S (S O))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S O))) B)) (S O)
H3 : In (S (S (S O))) B
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
sumor (sumor (sumor (sumor (sumor (sumor (sumor (sumbool (Equal B (add (S O) (add (S (S O)) empty))) (Equal B (add (S O) (add (S (S (S O))) empty)))) (Equal B (add (S O) (add (S (S (S (S O)))) empty)))) (Equal B (add (S O) (add (S (S (S (S (S O))))) empty)))) (Equal B (add (S (S O)) (add (S (S (S O))) empty)))) (Equal B (add (S (S O)) (add (S (S (S (S O)))) empty)))) (Equal B (add (S (S O)) (add (S (S (S (S (S O))))) empty)))) (Equal B (add (S (S (S O))) (add (S (S (S (S O)))) empty)))) (Equal B (add (S (S (S O))) (add (S (S (S (S (S O))))) empty)))
+++++
right.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
assert (H_card_rem:cardinal (remove 3 B)=1).
idtac.
assert (H31:=fun HH : In 1 (remove 3 B) => H1 (remove_3 HH)).
assert (H32:=fun HH : In 2 (remove 3 B) => H2 (remove_3 HH)).
destruct (In_dec 4 (remove 3 B)) as [H34|H34].
destruct (In_dec 5 (remove 3 B)) as [H35|H35].
left.
right.

*****
H35 : In (S (S (S (S (S O))))) (remove (S (S (S O))) B)
H34 : not (In (S (S (S (S O)))) (remove (S (S (S O))) B))
H32 : forall _ : In (S (S O)) (remove (S (S (S O))) B), False
H31 : forall _ : In (S O) (remove (S (S (S O))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S O))) B)) (S O)
H3 : In (S (S (S O))) B
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
Equal B (add (S (S (S O))) (add (S (S (S (S (S O))))) empty))
+++++
rewrite <- (add_remove H3).
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
assert (H_card_rem:cardinal (remove 3 B)=1).
idtac.
assert (H31:=fun HH : In 1 (remove 3 B) => H1 (remove_3 HH)).
assert (H32:=fun HH : In 2 (remove 3 B) => H2 (remove_3 HH)).
destruct (In_dec 4 (remove 3 B)) as [H34|H34].
destruct (In_dec 5 (remove 3 B)) as [H35|H35].
left.
right.
rewrite <- (add_remove H3).

*****
H35 : In (S (S (S (S (S O))))) (remove (S (S (S O))) B)
H34 : not (In (S (S (S (S O)))) (remove (S (S (S O))) B))
H32 : forall _ : In (S (S O)) (remove (S (S (S O))) B), False
H31 : forall _ : In (S O) (remove (S (S (S O))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S O))) B)) (S O)
H3 : In (S (S (S O))) B
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
Equal (add (S (S (S O))) (remove (S (S (S O))) B)) (add (S (S (S O))) (add (S (S (S (S (S O))))) empty))
+++++
rewrite <- (add_remove H35).
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
assert (H_card_rem:cardinal (remove 3 B)=1).
idtac.
assert (H31:=fun HH : In 1 (remove 3 B) => H1 (remove_3 HH)).
assert (H32:=fun HH : In 2 (remove 3 B) => H2 (remove_3 HH)).
destruct (In_dec 4 (remove 3 B)) as [H34|H34].
destruct (In_dec 5 (remove 3 B)) as [H35|H35].
left.
right.
rewrite <- (add_remove H3).
rewrite <- (add_remove H35).

*****
H35 : In (S (S (S (S (S O))))) (remove (S (S (S O))) B)
H34 : not (In (S (S (S (S O)))) (remove (S (S (S O))) B))
H32 : forall _ : In (S (S O)) (remove (S (S (S O))) B), False
H31 : forall _ : In (S O) (remove (S (S (S O))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S O))) B)) (S O)
H3 : In (S (S (S O))) B
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
Equal (add (S (S (S O))) (add (S (S (S (S (S O))))) (remove (S (S (S (S (S O))))) (remove (S (S (S O))) B)))) (add (S (S (S O))) (add (S (S (S (S (S O))))) empty))
+++++
generalize (remove_cardinal_1 H35).
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
assert (H_card_rem:cardinal (remove 3 B)=1).
idtac.
assert (H31:=fun HH : In 1 (remove 3 B) => H1 (remove_3 HH)).
assert (H32:=fun HH : In 2 (remove 3 B) => H2 (remove_3 HH)).
destruct (In_dec 4 (remove 3 B)) as [H34|H34].
destruct (In_dec 5 (remove 3 B)) as [H35|H35].
left.
right.
rewrite <- (add_remove H3).
rewrite <- (add_remove H35).
generalize (remove_cardinal_1 H35).

*****
H35 : In (S (S (S (S (S O))))) (remove (S (S (S O))) B)
H34 : not (In (S (S (S (S O)))) (remove (S (S (S O))) B))
H32 : forall _ : In (S (S O)) (remove (S (S (S O))) B), False
H31 : forall _ : In (S O) (remove (S (S (S O))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S O))) B)) (S O)
H3 : In (S (S (S O))) B
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
forall _ : Logic.eq (S (cardinal (remove (S (S (S (S (S O))))) (remove (S (S (S O))) B)))) (cardinal (remove (S (S (S O))) B)), Equal (add (S (S (S O))) (add (S (S (S (S (S O))))) (remove (S (S (S (S (S O))))) (remove (S (S (S O))) B)))) (add (S (S (S O))) (add (S (S (S (S (S O))))) empty))
+++++
rewrite H_card_rem.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
assert (H_card_rem:cardinal (remove 3 B)=1).
idtac.
assert (H31:=fun HH : In 1 (remove 3 B) => H1 (remove_3 HH)).
assert (H32:=fun HH : In 2 (remove 3 B) => H2 (remove_3 HH)).
destruct (In_dec 4 (remove 3 B)) as [H34|H34].
destruct (In_dec 5 (remove 3 B)) as [H35|H35].
left.
right.
rewrite <- (add_remove H3).
rewrite <- (add_remove H35).
generalize (remove_cardinal_1 H35).
rewrite H_card_rem.

*****
H35 : In (S (S (S (S (S O))))) (remove (S (S (S O))) B)
H34 : not (In (S (S (S (S O)))) (remove (S (S (S O))) B))
H32 : forall _ : In (S (S O)) (remove (S (S (S O))) B), False
H31 : forall _ : In (S O) (remove (S (S (S O))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S O))) B)) (S O)
H3 : In (S (S (S O))) B
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
forall _ : Logic.eq (S (cardinal (remove (S (S (S (S (S O))))) (remove (S (S (S O))) B)))) (S O), Equal (add (S (S (S O))) (add (S (S (S (S (S O))))) (remove (S (S (S (S (S O))))) (remove (S (S (S O))) B)))) (add (S (S (S O))) (add (S (S (S (S (S O))))) empty))
+++++
intro H_eq2.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
assert (H_card_rem:cardinal (remove 3 B)=1).
idtac.
assert (H31:=fun HH : In 1 (remove 3 B) => H1 (remove_3 HH)).
assert (H32:=fun HH : In 2 (remove 3 B) => H2 (remove_3 HH)).
destruct (In_dec 4 (remove 3 B)) as [H34|H34].
destruct (In_dec 5 (remove 3 B)) as [H35|H35].
left.
right.
rewrite <- (add_remove H3).
rewrite <- (add_remove H35).
generalize (remove_cardinal_1 H35).
rewrite H_card_rem.
intro H_eq2.

*****
H_eq2 : Logic.eq\n (S (cardinal (remove (S (S (S (S (S O))))) (remove (S (S (S O))) B))))\n (S O)
H35 : In (S (S (S (S (S O))))) (remove (S (S (S O))) B)
H34 : not (In (S (S (S (S O)))) (remove (S (S (S O))) B))
H32 : forall _ : In (S (S O)) (remove (S (S (S O))) B), False
H31 : forall _ : In (S O) (remove (S (S (S O))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S O))) B)) (S O)
H3 : In (S (S (S O))) B
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
Equal (add (S (S (S O))) (add (S (S (S (S (S O))))) (remove (S (S (S (S (S O))))) (remove (S (S (S O))) B)))) (add (S (S (S O))) (add (S (S (S (S (S O))))) empty))
+++++
rewrite (empty_is_empty_1 (cardinal_inv_1 (eq_add_S _ _ H_eq2))).
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
assert (H_card_rem:cardinal (remove 3 B)=1).
idtac.
assert (H31:=fun HH : In 1 (remove 3 B) => H1 (remove_3 HH)).
assert (H32:=fun HH : In 2 (remove 3 B) => H2 (remove_3 HH)).
destruct (In_dec 4 (remove 3 B)) as [H34|H34].
destruct (In_dec 5 (remove 3 B)) as [H35|H35].
left.
right.
rewrite <- (add_remove H3).
rewrite <- (add_remove H35).
generalize (remove_cardinal_1 H35).
rewrite H_card_rem.
intro H_eq2.
rewrite (empty_is_empty_1 (cardinal_inv_1 (eq_add_S _ _ H_eq2))).

*****
H_eq2 : Logic.eq\n (S (cardinal (remove (S (S (S (S (S O))))) (remove (S (S (S O))) B))))\n (S O)
H35 : In (S (S (S (S (S O))))) (remove (S (S (S O))) B)
H34 : not (In (S (S (S (S O)))) (remove (S (S (S O))) B))
H32 : forall _ : In (S (S O)) (remove (S (S (S O))) B), False
H31 : forall _ : In (S O) (remove (S (S (S O))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S O))) B)) (S O)
H3 : In (S (S (S O))) B
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
Equal (add (S (S (S O))) (add (S (S (S (S (S O))))) empty)) (add (S (S (S O))) (add (S (S (S (S (S O))))) empty))
+++++
reflexivity.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
assert (H_card_rem:cardinal (remove 3 B)=1).
idtac.
assert (H31:=fun HH : In 1 (remove 3 B) => H1 (remove_3 HH)).
assert (H32:=fun HH : In 2 (remove 3 B) => H2 (remove_3 HH)).
destruct (In_dec 4 (remove 3 B)) as [H34|H34].
destruct (In_dec 5 (remove 3 B)) as [H35|H35].

*****
H35 : not (In (S (S (S (S (S O))))) (remove (S (S (S O))) B))
H34 : not (In (S (S (S (S O)))) (remove (S (S (S O))) B))
H32 : forall _ : In (S (S O)) (remove (S (S (S O))) B), False
H31 : forall _ : In (S O) (remove (S (S (S O))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S O))) B)) (S O)
H3 : In (S (S (S O))) B
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
sumor (sumor (sumor (sumor (sumor (sumor (sumor (sumor (sumbool (Equal B (add (S O) (add (S (S O)) empty))) (Equal B (add (S O) (add (S (S (S O))) empty)))) (Equal B (add (S O) (add (S (S (S (S O)))) empty)))) (Equal B (add (S O) (add (S (S (S (S (S O))))) empty)))) (Equal B (add (S (S O)) (add (S (S (S O))) empty)))) (Equal B (add (S (S O)) (add (S (S (S (S O)))) empty)))) (Equal B (add (S (S O)) (add (S (S (S (S (S O))))) empty)))) (Equal B (add (S (S (S O))) (add (S (S (S (S O)))) empty)))) (Equal B (add (S (S (S O))) (add (S (S (S (S (S O))))) empty)))) (Equal B (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))
+++++
apply False_rec.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
assert (H_card_rem:cardinal (remove 3 B)=1).
idtac.
assert (H31:=fun HH : In 1 (remove 3 B) => H1 (remove_3 HH)).
assert (H32:=fun HH : In 2 (remove 3 B) => H2 (remove_3 HH)).
destruct (In_dec 4 (remove 3 B)) as [H34|H34].
destruct (In_dec 5 (remove 3 B)) as [H35|H35].
apply False_rec.

*****
H35 : not (In (S (S (S (S (S O))))) (remove (S (S (S O))) B))
H34 : not (In (S (S (S (S O)))) (remove (S (S (S O))) B))
H32 : forall _ : In (S (S O)) (remove (S (S (S O))) B), False
H31 : forall _ : In (S O) (remove (S (S (S O))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S O))) B)) (S O)
H3 : In (S (S (S O))) B
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
assert (H33:=(@remove_1 B _ _ (refl_equal 3))).
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
assert (H_card_rem:cardinal (remove 3 B)=1).
idtac.
assert (H31:=fun HH : In 1 (remove 3 B) => H1 (remove_3 HH)).
assert (H32:=fun HH : In 2 (remove 3 B) => H2 (remove_3 HH)).
destruct (In_dec 4 (remove 3 B)) as [H34|H34].
destruct (In_dec 5 (remove 3 B)) as [H35|H35].
apply False_rec.
assert (H33:=(@remove_1 B _ _ (refl_equal 3))).

*****
H33 : not (In (S (S (S O))) (remove (S (S (S O))) B))
H35 : not (In (S (S (S (S (S O))))) (remove (S (S (S O))) B))
H34 : not (In (S (S (S (S O)))) (remove (S (S (S O))) B))
H32 : forall _ : In (S (S O)) (remove (S (S (S O))) B), False
H31 : forall _ : In (S O) (remove (S (S (S O))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S O))) B)) (S O)
H3 : In (S (S (S O))) B
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
assert (H_card_rem:cardinal (remove 3 B)=1).
idtac.
assert (H31:=fun HH : In 1 (remove 3 B) => H1 (remove_3 HH)).
assert (H32:=fun HH : In 2 (remove 3 B) => H2 (remove_3 HH)).
destruct (In_dec 4 (remove 3 B)) as [H34|H34].
destruct (In_dec 5 (remove 3 B)) as [H35|H35].
apply False_rec.
assert (H33:=(@remove_1 B _ _ (refl_equal 3))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].

*****
Hb : In b (remove (S (S (S O))) B)
b : elt
H33 : not (In (S (S (S O))) (remove (S (S (S O))) B))
H35 : not (In (S (S (S (S (S O))))) (remove (S (S (S O))) B))
H34 : not (In (S (S (S (S O)))) (remove (S (S (S O))) B))
H32 : forall _ : In (S (S O)) (remove (S (S (S O))) B), False
H31 : forall _ : In (S O) (remove (S (S (S O))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S O))) B)) (S O)
H3 : In (S (S (S O))) B
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
assert (H_card_rem:cardinal (remove 3 B)=1).
idtac.
assert (H31:=fun HH : In 1 (remove 3 B) => H1 (remove_3 HH)).
assert (H32:=fun HH : In 2 (remove 3 B) => H2 (remove_3 HH)).
destruct (In_dec 4 (remove 3 B)) as [H34|H34].
destruct (In_dec 5 (remove 3 B)) as [H35|H35].
apply False_rec.
assert (H33:=(@remove_1 B _ _ (refl_equal 3))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].

*****
Hb1 : Logic.eq b (S O)
Hb : In b (remove (S (S (S O))) B)
b : elt
H33 : not (In (S (S (S O))) (remove (S (S (S O))) B))
H35 : not (In (S (S (S (S (S O))))) (remove (S (S (S O))) B))
H34 : not (In (S (S (S (S O)))) (remove (S (S (S O))) B))
H32 : forall _ : In (S (S O)) (remove (S (S (S O))) B), False
H31 : forall _ : In (S O) (remove (S (S (S O))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S O))) B)) (S O)
H3 : In (S (S (S O))) B
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
apply H31.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
assert (H_card_rem:cardinal (remove 3 B)=1).
idtac.
assert (H31:=fun HH : In 1 (remove 3 B) => H1 (remove_3 HH)).
assert (H32:=fun HH : In 2 (remove 3 B) => H2 (remove_3 HH)).
destruct (In_dec 4 (remove 3 B)) as [H34|H34].
destruct (In_dec 5 (remove 3 B)) as [H35|H35].
apply False_rec.
assert (H33:=(@remove_1 B _ _ (refl_equal 3))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
apply H31.

*****
Hb1 : Logic.eq b (S O)
Hb : In b (remove (S (S (S O))) B)
b : elt
H33 : not (In (S (S (S O))) (remove (S (S (S O))) B))
H35 : not (In (S (S (S (S (S O))))) (remove (S (S (S O))) B))
H34 : not (In (S (S (S (S O)))) (remove (S (S (S O))) B))
H32 : forall _ : In (S (S O)) (remove (S (S (S O))) B), False
H31 : forall _ : In (S O) (remove (S (S (S O))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S O))) B)) (S O)
H3 : In (S (S (S O))) B
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
In (S O) (remove (S (S (S O))) B)
+++++
rewrite Hb1 in Hb.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
assert (H_card_rem:cardinal (remove 3 B)=1).
idtac.
assert (H31:=fun HH : In 1 (remove 3 B) => H1 (remove_3 HH)).
assert (H32:=fun HH : In 2 (remove 3 B) => H2 (remove_3 HH)).
destruct (In_dec 4 (remove 3 B)) as [H34|H34].
destruct (In_dec 5 (remove 3 B)) as [H35|H35].
apply False_rec.
assert (H33:=(@remove_1 B _ _ (refl_equal 3))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
apply H31.
rewrite Hb1 in Hb.

*****
Hb1 : Logic.eq b (S O)
Hb : In (S O) (remove (S (S (S O))) B)
b : elt
H33 : not (In (S (S (S O))) (remove (S (S (S O))) B))
H35 : not (In (S (S (S (S (S O))))) (remove (S (S (S O))) B))
H34 : not (In (S (S (S (S O)))) (remove (S (S (S O))) B))
H32 : forall _ : In (S (S O)) (remove (S (S (S O))) B), False
H31 : forall _ : In (S O) (remove (S (S (S O))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S O))) B)) (S O)
H3 : In (S (S (S O))) B
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
In (S O) (remove (S (S (S O))) B)
+++++
assumption.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
assert (H_card_rem:cardinal (remove 3 B)=1).
idtac.
assert (H31:=fun HH : In 1 (remove 3 B) => H1 (remove_3 HH)).
assert (H32:=fun HH : In 2 (remove 3 B) => H2 (remove_3 HH)).
destruct (In_dec 4 (remove 3 B)) as [H34|H34].
destruct (In_dec 5 (remove 3 B)) as [H35|H35].
apply False_rec.
assert (H33:=(@remove_1 B _ _ (refl_equal 3))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].

*****
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S (S (S O))) B)
b : elt
H33 : not (In (S (S (S O))) (remove (S (S (S O))) B))
H35 : not (In (S (S (S (S (S O))))) (remove (S (S (S O))) B))
H34 : not (In (S (S (S (S O)))) (remove (S (S (S O))) B))
H32 : forall _ : In (S (S O)) (remove (S (S (S O))) B), False
H31 : forall _ : In (S O) (remove (S (S (S O))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S O))) B)) (S O)
H3 : In (S (S (S O))) B
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
assert (H_card_rem:cardinal (remove 3 B)=1).
idtac.
assert (H31:=fun HH : In 1 (remove 3 B) => H1 (remove_3 HH)).
assert (H32:=fun HH : In 2 (remove 3 B) => H2 (remove_3 HH)).
destruct (In_dec 4 (remove 3 B)) as [H34|H34].
destruct (In_dec 5 (remove 3 B)) as [H35|H35].
apply False_rec.
assert (H33:=(@remove_1 B _ _ (refl_equal 3))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].

*****
Hb2 : Logic.eq b (S (S O))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S (S (S O))) B)
b : elt
H33 : not (In (S (S (S O))) (remove (S (S (S O))) B))
H35 : not (In (S (S (S (S (S O))))) (remove (S (S (S O))) B))
H34 : not (In (S (S (S (S O)))) (remove (S (S (S O))) B))
H32 : forall _ : In (S (S O)) (remove (S (S (S O))) B), False
H31 : forall _ : In (S O) (remove (S (S (S O))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S O))) B)) (S O)
H3 : In (S (S (S O))) B
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
apply H32.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
assert (H_card_rem:cardinal (remove 3 B)=1).
idtac.
assert (H31:=fun HH : In 1 (remove 3 B) => H1 (remove_3 HH)).
assert (H32:=fun HH : In 2 (remove 3 B) => H2 (remove_3 HH)).
destruct (In_dec 4 (remove 3 B)) as [H34|H34].
destruct (In_dec 5 (remove 3 B)) as [H35|H35].
apply False_rec.
assert (H33:=(@remove_1 B _ _ (refl_equal 3))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
apply H32.

*****
Hb2 : Logic.eq b (S (S O))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S (S (S O))) B)
b : elt
H33 : not (In (S (S (S O))) (remove (S (S (S O))) B))
H35 : not (In (S (S (S (S (S O))))) (remove (S (S (S O))) B))
H34 : not (In (S (S (S (S O)))) (remove (S (S (S O))) B))
H32 : forall _ : In (S (S O)) (remove (S (S (S O))) B), False
H31 : forall _ : In (S O) (remove (S (S (S O))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S O))) B)) (S O)
H3 : In (S (S (S O))) B
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
In (S (S O)) (remove (S (S (S O))) B)
+++++
rewrite Hb2 in Hb.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
assert (H_card_rem:cardinal (remove 3 B)=1).
idtac.
assert (H31:=fun HH : In 1 (remove 3 B) => H1 (remove_3 HH)).
assert (H32:=fun HH : In 2 (remove 3 B) => H2 (remove_3 HH)).
destruct (In_dec 4 (remove 3 B)) as [H34|H34].
destruct (In_dec 5 (remove 3 B)) as [H35|H35].
apply False_rec.
assert (H33:=(@remove_1 B _ _ (refl_equal 3))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
apply H32.
rewrite Hb2 in Hb.

*****
Hb2 : Logic.eq b (S (S O))
Hb1 : not (Logic.eq b (S O))
Hb : In (S (S O)) (remove (S (S (S O))) B)
b : elt
H33 : not (In (S (S (S O))) (remove (S (S (S O))) B))
H35 : not (In (S (S (S (S (S O))))) (remove (S (S (S O))) B))
H34 : not (In (S (S (S (S O)))) (remove (S (S (S O))) B))
H32 : forall _ : In (S (S O)) (remove (S (S (S O))) B), False
H31 : forall _ : In (S O) (remove (S (S (S O))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S O))) B)) (S O)
H3 : In (S (S (S O))) B
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
In (S (S O)) (remove (S (S (S O))) B)
+++++
assumption.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
assert (H_card_rem:cardinal (remove 3 B)=1).
idtac.
assert (H31:=fun HH : In 1 (remove 3 B) => H1 (remove_3 HH)).
assert (H32:=fun HH : In 2 (remove 3 B) => H2 (remove_3 HH)).
destruct (In_dec 4 (remove 3 B)) as [H34|H34].
destruct (In_dec 5 (remove 3 B)) as [H35|H35].
apply False_rec.
assert (H33:=(@remove_1 B _ _ (refl_equal 3))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].

*****
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S (S (S O))) B)
b : elt
H33 : not (In (S (S (S O))) (remove (S (S (S O))) B))
H35 : not (In (S (S (S (S (S O))))) (remove (S (S (S O))) B))
H34 : not (In (S (S (S (S O)))) (remove (S (S (S O))) B))
H32 : forall _ : In (S (S O)) (remove (S (S (S O))) B), False
H31 : forall _ : In (S O) (remove (S (S (S O))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S O))) B)) (S O)
H3 : In (S (S (S O))) B
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
assert (H_card_rem:cardinal (remove 3 B)=1).
idtac.
assert (H31:=fun HH : In 1 (remove 3 B) => H1 (remove_3 HH)).
assert (H32:=fun HH : In 2 (remove 3 B) => H2 (remove_3 HH)).
destruct (In_dec 4 (remove 3 B)) as [H34|H34].
destruct (In_dec 5 (remove 3 B)) as [H35|H35].
apply False_rec.
assert (H33:=(@remove_1 B _ _ (refl_equal 3))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].

*****
Hb3 : Logic.eq b (S (S (S O)))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S (S (S O))) B)
b : elt
H33 : not (In (S (S (S O))) (remove (S (S (S O))) B))
H35 : not (In (S (S (S (S (S O))))) (remove (S (S (S O))) B))
H34 : not (In (S (S (S (S O)))) (remove (S (S (S O))) B))
H32 : forall _ : In (S (S O)) (remove (S (S (S O))) B), False
H31 : forall _ : In (S O) (remove (S (S (S O))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S O))) B)) (S O)
H3 : In (S (S (S O))) B
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
apply H33.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
assert (H_card_rem:cardinal (remove 3 B)=1).
idtac.
assert (H31:=fun HH : In 1 (remove 3 B) => H1 (remove_3 HH)).
assert (H32:=fun HH : In 2 (remove 3 B) => H2 (remove_3 HH)).
destruct (In_dec 4 (remove 3 B)) as [H34|H34].
destruct (In_dec 5 (remove 3 B)) as [H35|H35].
apply False_rec.
assert (H33:=(@remove_1 B _ _ (refl_equal 3))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
apply H33.

*****
Hb3 : Logic.eq b (S (S (S O)))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S (S (S O))) B)
b : elt
H33 : not (In (S (S (S O))) (remove (S (S (S O))) B))
H35 : not (In (S (S (S (S (S O))))) (remove (S (S (S O))) B))
H34 : not (In (S (S (S (S O)))) (remove (S (S (S O))) B))
H32 : forall _ : In (S (S O)) (remove (S (S (S O))) B), False
H31 : forall _ : In (S O) (remove (S (S (S O))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S O))) B)) (S O)
H3 : In (S (S (S O))) B
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
In (S (S (S O))) (remove (S (S (S O))) B)
+++++
rewrite Hb3 in Hb.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
assert (H_card_rem:cardinal (remove 3 B)=1).
idtac.
assert (H31:=fun HH : In 1 (remove 3 B) => H1 (remove_3 HH)).
assert (H32:=fun HH : In 2 (remove 3 B) => H2 (remove_3 HH)).
destruct (In_dec 4 (remove 3 B)) as [H34|H34].
destruct (In_dec 5 (remove 3 B)) as [H35|H35].
apply False_rec.
assert (H33:=(@remove_1 B _ _ (refl_equal 3))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
apply H33.
rewrite Hb3 in Hb.

*****
Hb3 : Logic.eq b (S (S (S O)))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In (S (S (S O))) (remove (S (S (S O))) B)
b : elt
H33 : not (In (S (S (S O))) (remove (S (S (S O))) B))
H35 : not (In (S (S (S (S (S O))))) (remove (S (S (S O))) B))
H34 : not (In (S (S (S (S O)))) (remove (S (S (S O))) B))
H32 : forall _ : In (S (S O)) (remove (S (S (S O))) B), False
H31 : forall _ : In (S O) (remove (S (S (S O))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S O))) B)) (S O)
H3 : In (S (S (S O))) B
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
In (S (S (S O))) (remove (S (S (S O))) B)
+++++
assumption.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
assert (H_card_rem:cardinal (remove 3 B)=1).
idtac.
assert (H31:=fun HH : In 1 (remove 3 B) => H1 (remove_3 HH)).
assert (H32:=fun HH : In 2 (remove 3 B) => H2 (remove_3 HH)).
destruct (In_dec 4 (remove 3 B)) as [H34|H34].
destruct (In_dec 5 (remove 3 B)) as [H35|H35].
apply False_rec.
assert (H33:=(@remove_1 B _ _ (refl_equal 3))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].

*****
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S (S (S O))) B)
b : elt
H33 : not (In (S (S (S O))) (remove (S (S (S O))) B))
H35 : not (In (S (S (S (S (S O))))) (remove (S (S (S O))) B))
H34 : not (In (S (S (S (S O)))) (remove (S (S (S O))) B))
H32 : forall _ : In (S (S O)) (remove (S (S (S O))) B), False
H31 : forall _ : In (S O) (remove (S (S (S O))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S O))) B)) (S O)
H3 : In (S (S (S O))) B
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
assert (H_card_rem:cardinal (remove 3 B)=1).
idtac.
assert (H31:=fun HH : In 1 (remove 3 B) => H1 (remove_3 HH)).
assert (H32:=fun HH : In 2 (remove 3 B) => H2 (remove_3 HH)).
destruct (In_dec 4 (remove 3 B)) as [H34|H34].
destruct (In_dec 5 (remove 3 B)) as [H35|H35].
apply False_rec.
assert (H33:=(@remove_1 B _ _ (refl_equal 3))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].

*****
Hb4 : Logic.eq b (S (S (S (S O))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S (S (S O))) B)
b : elt
H33 : not (In (S (S (S O))) (remove (S (S (S O))) B))
H35 : not (In (S (S (S (S (S O))))) (remove (S (S (S O))) B))
H34 : not (In (S (S (S (S O)))) (remove (S (S (S O))) B))
H32 : forall _ : In (S (S O)) (remove (S (S (S O))) B), False
H31 : forall _ : In (S O) (remove (S (S (S O))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S O))) B)) (S O)
H3 : In (S (S (S O))) B
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
apply H34.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
assert (H_card_rem:cardinal (remove 3 B)=1).
idtac.
assert (H31:=fun HH : In 1 (remove 3 B) => H1 (remove_3 HH)).
assert (H32:=fun HH : In 2 (remove 3 B) => H2 (remove_3 HH)).
destruct (In_dec 4 (remove 3 B)) as [H34|H34].
destruct (In_dec 5 (remove 3 B)) as [H35|H35].
apply False_rec.
assert (H33:=(@remove_1 B _ _ (refl_equal 3))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
apply H34.

*****
Hb4 : Logic.eq b (S (S (S (S O))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S (S (S O))) B)
b : elt
H33 : not (In (S (S (S O))) (remove (S (S (S O))) B))
H35 : not (In (S (S (S (S (S O))))) (remove (S (S (S O))) B))
H34 : not (In (S (S (S (S O)))) (remove (S (S (S O))) B))
H32 : forall _ : In (S (S O)) (remove (S (S (S O))) B), False
H31 : forall _ : In (S O) (remove (S (S (S O))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S O))) B)) (S O)
H3 : In (S (S (S O))) B
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
In (S (S (S (S O)))) (remove (S (S (S O))) B)
+++++
rewrite <- Hb4.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
assert (H_card_rem:cardinal (remove 3 B)=1).
idtac.
assert (H31:=fun HH : In 1 (remove 3 B) => H1 (remove_3 HH)).
assert (H32:=fun HH : In 2 (remove 3 B) => H2 (remove_3 HH)).
destruct (In_dec 4 (remove 3 B)) as [H34|H34].
destruct (In_dec 5 (remove 3 B)) as [H35|H35].
apply False_rec.
assert (H33:=(@remove_1 B _ _ (refl_equal 3))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
apply H34.
rewrite <- Hb4.

*****
Hb4 : Logic.eq b (S (S (S (S O))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S (S (S O))) B)
b : elt
H33 : not (In (S (S (S O))) (remove (S (S (S O))) B))
H35 : not (In (S (S (S (S (S O))))) (remove (S (S (S O))) B))
H34 : not (In (S (S (S (S O)))) (remove (S (S (S O))) B))
H32 : forall _ : In (S (S O)) (remove (S (S (S O))) B), False
H31 : forall _ : In (S O) (remove (S (S (S O))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S O))) B)) (S O)
H3 : In (S (S (S O))) B
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
In b (remove (S (S (S O))) B)
+++++
assumption.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
assert (H_card_rem:cardinal (remove 3 B)=1).
idtac.
assert (H31:=fun HH : In 1 (remove 3 B) => H1 (remove_3 HH)).
assert (H32:=fun HH : In 2 (remove 3 B) => H2 (remove_3 HH)).
destruct (In_dec 4 (remove 3 B)) as [H34|H34].
destruct (In_dec 5 (remove 3 B)) as [H35|H35].
apply False_rec.
assert (H33:=(@remove_1 B _ _ (refl_equal 3))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].

*****
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S (S (S O))) B)
b : elt
H33 : not (In (S (S (S O))) (remove (S (S (S O))) B))
H35 : not (In (S (S (S (S (S O))))) (remove (S (S (S O))) B))
H34 : not (In (S (S (S (S O)))) (remove (S (S (S O))) B))
H32 : forall _ : In (S (S O)) (remove (S (S (S O))) B), False
H31 : forall _ : In (S O) (remove (S (S (S O))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S O))) B)) (S O)
H3 : In (S (S (S O))) B
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
assert (H_card_rem:cardinal (remove 3 B)=1).
idtac.
assert (H31:=fun HH : In 1 (remove 3 B) => H1 (remove_3 HH)).
assert (H32:=fun HH : In 2 (remove 3 B) => H2 (remove_3 HH)).
destruct (In_dec 4 (remove 3 B)) as [H34|H34].
destruct (In_dec 5 (remove 3 B)) as [H35|H35].
apply False_rec.
assert (H33:=(@remove_1 B _ _ (refl_equal 3))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].

*****
Hb5 : Logic.eq b (S (S (S (S (S O)))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S (S (S O))) B)
b : elt
H33 : not (In (S (S (S O))) (remove (S (S (S O))) B))
H35 : not (In (S (S (S (S (S O))))) (remove (S (S (S O))) B))
H34 : not (In (S (S (S (S O)))) (remove (S (S (S O))) B))
H32 : forall _ : In (S (S O)) (remove (S (S (S O))) B), False
H31 : forall _ : In (S O) (remove (S (S (S O))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S O))) B)) (S O)
H3 : In (S (S (S O))) B
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
apply H35.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
assert (H_card_rem:cardinal (remove 3 B)=1).
idtac.
assert (H31:=fun HH : In 1 (remove 3 B) => H1 (remove_3 HH)).
assert (H32:=fun HH : In 2 (remove 3 B) => H2 (remove_3 HH)).
destruct (In_dec 4 (remove 3 B)) as [H34|H34].
destruct (In_dec 5 (remove 3 B)) as [H35|H35].
apply False_rec.
assert (H33:=(@remove_1 B _ _ (refl_equal 3))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].
apply H35.

*****
Hb5 : Logic.eq b (S (S (S (S (S O)))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S (S (S O))) B)
b : elt
H33 : not (In (S (S (S O))) (remove (S (S (S O))) B))
H35 : not (In (S (S (S (S (S O))))) (remove (S (S (S O))) B))
H34 : not (In (S (S (S (S O)))) (remove (S (S (S O))) B))
H32 : forall _ : In (S (S O)) (remove (S (S (S O))) B), False
H31 : forall _ : In (S O) (remove (S (S (S O))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S O))) B)) (S O)
H3 : In (S (S (S O))) B
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
In (S (S (S (S (S O))))) (remove (S (S (S O))) B)
+++++
rewrite <- Hb5.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
assert (H_card_rem:cardinal (remove 3 B)=1).
idtac.
assert (H31:=fun HH : In 1 (remove 3 B) => H1 (remove_3 HH)).
assert (H32:=fun HH : In 2 (remove 3 B) => H2 (remove_3 HH)).
destruct (In_dec 4 (remove 3 B)) as [H34|H34].
destruct (In_dec 5 (remove 3 B)) as [H35|H35].
apply False_rec.
assert (H33:=(@remove_1 B _ _ (refl_equal 3))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].
apply H35.
rewrite <- Hb5.

*****
Hb5 : Logic.eq b (S (S (S (S (S O)))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S (S (S O))) B)
b : elt
H33 : not (In (S (S (S O))) (remove (S (S (S O))) B))
H35 : not (In (S (S (S (S (S O))))) (remove (S (S (S O))) B))
H34 : not (In (S (S (S (S O)))) (remove (S (S (S O))) B))
H32 : forall _ : In (S (S O)) (remove (S (S (S O))) B), False
H31 : forall _ : In (S O) (remove (S (S (S O))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S O))) B)) (S O)
H3 : In (S (S (S O))) B
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
In b (remove (S (S (S O))) B)
+++++
assumption.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
assert (H_card_rem:cardinal (remove 3 B)=1).
idtac.
assert (H31:=fun HH : In 1 (remove 3 B) => H1 (remove_3 HH)).
assert (H32:=fun HH : In 2 (remove 3 B) => H2 (remove_3 HH)).
destruct (In_dec 4 (remove 3 B)) as [H34|H34].
destruct (In_dec 5 (remove 3 B)) as [H35|H35].
apply False_rec.
assert (H33:=(@remove_1 B _ _ (refl_equal 3))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].

*****
Hb5 : not (Logic.eq b (S (S (S (S (S O))))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S (S (S O))) B)
b : elt
H33 : not (In (S (S (S O))) (remove (S (S (S O))) B))
H35 : not (In (S (S (S (S (S O))))) (remove (S (S (S O))) B))
H34 : not (In (S (S (S (S O)))) (remove (S (S (S O))) B))
H32 : forall _ : In (S (S O)) (remove (S (S (S O))) B), False
H31 : forall _ : In (S O) (remove (S (S (S O))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S O))) B)) (S O)
H3 : In (S (S (S O))) B
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
assert (H_sub':=@subset_remove_3 _ _ 3 H_sub).
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
assert (H_card_rem:cardinal (remove 3 B)=1).
idtac.
assert (H31:=fun HH : In 1 (remove 3 B) => H1 (remove_3 HH)).
assert (H32:=fun HH : In 2 (remove 3 B) => H2 (remove_3 HH)).
destruct (In_dec 4 (remove 3 B)) as [H34|H34].
destruct (In_dec 5 (remove 3 B)) as [H35|H35].
apply False_rec.
assert (H33:=(@remove_1 B _ _ (refl_equal 3))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].
assert (H_sub':=@subset_remove_3 _ _ 3 H_sub).

*****
H_sub' : Subset (remove (S (S (S O))) B) town_2
Hb5 : not (Logic.eq b (S (S (S (S (S O))))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S (S (S O))) B)
b : elt
H33 : not (In (S (S (S O))) (remove (S (S (S O))) B))
H35 : not (In (S (S (S (S (S O))))) (remove (S (S (S O))) B))
H34 : not (In (S (S (S (S O)))) (remove (S (S (S O))) B))
H32 : forall _ : In (S (S O)) (remove (S (S (S O))) B), False
H31 : forall _ : In (S O) (remove (S (S (S O))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S O))) B)) (S O)
H3 : In (S (S (S O))) B
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
assert (Hb_town:=H_sub' _ Hb).
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
assert (H_card_rem:cardinal (remove 3 B)=1).
idtac.
assert (H31:=fun HH : In 1 (remove 3 B) => H1 (remove_3 HH)).
assert (H32:=fun HH : In 2 (remove 3 B) => H2 (remove_3 HH)).
destruct (In_dec 4 (remove 3 B)) as [H34|H34].
destruct (In_dec 5 (remove 3 B)) as [H35|H35].
apply False_rec.
assert (H33:=(@remove_1 B _ _ (refl_equal 3))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].
assert (H_sub':=@subset_remove_3 _ _ 3 H_sub).
assert (Hb_town:=H_sub' _ Hb).

*****
Hb_town : In b town_2
H_sub' : Subset (remove (S (S (S O))) B) town_2
Hb5 : not (Logic.eq b (S (S (S (S (S O))))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S (S (S O))) B)
b : elt
H33 : not (In (S (S (S O))) (remove (S (S (S O))) B))
H35 : not (In (S (S (S (S (S O))))) (remove (S (S (S O))) B))
H34 : not (In (S (S (S (S O)))) (remove (S (S (S O))) B))
H32 : forall _ : In (S (S O)) (remove (S (S (S O))) B), False
H31 : forall _ : In (S O) (remove (S (S (S O))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S O))) B)) (S O)
H3 : In (S (S (S O))) B
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
unfold town_2 in Hb_town.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
assert (H_card_rem:cardinal (remove 3 B)=1).
idtac.
assert (H31:=fun HH : In 1 (remove 3 B) => H1 (remove_3 HH)).
assert (H32:=fun HH : In 2 (remove 3 B) => H2 (remove_3 HH)).
destruct (In_dec 4 (remove 3 B)) as [H34|H34].
destruct (In_dec 5 (remove 3 B)) as [H35|H35].
apply False_rec.
assert (H33:=(@remove_1 B _ _ (refl_equal 3))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].
assert (H_sub':=@subset_remove_3 _ _ 3 H_sub).
assert (Hb_town:=H_sub' _ Hb).
unfold town_2 in Hb_town.

*****
Hb_town : In b\n (add (S O)\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))))
H_sub' : Subset (remove (S (S (S O))) B) town_2
Hb5 : not (Logic.eq b (S (S (S (S (S O))))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S (S (S O))) B)
b : elt
H33 : not (In (S (S (S O))) (remove (S (S (S O))) B))
H35 : not (In (S (S (S (S (S O))))) (remove (S (S (S O))) B))
H34 : not (In (S (S (S (S O)))) (remove (S (S (S O))) B))
H32 : forall _ : In (S (S O)) (remove (S (S (S O))) B), False
H31 : forall _ : In (S O) (remove (S (S (S O))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S O))) B)) (S O)
H3 : In (S (S (S O))) B
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
destruct (proj1 (FM.add_iff _ _ b) Hb_town) as [Hb1_town|Hb1_town].
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
assert (H_card_rem:cardinal (remove 3 B)=1).
idtac.
assert (H31:=fun HH : In 1 (remove 3 B) => H1 (remove_3 HH)).
assert (H32:=fun HH : In 2 (remove 3 B) => H2 (remove_3 HH)).
destruct (In_dec 4 (remove 3 B)) as [H34|H34].
destruct (In_dec 5 (remove 3 B)) as [H35|H35].
apply False_rec.
assert (H33:=(@remove_1 B _ _ (refl_equal 3))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].
assert (H_sub':=@subset_remove_3 _ _ 3 H_sub).
assert (Hb_town:=H_sub' _ Hb).
unfold town_2 in Hb_town.
destruct (proj1 (FM.add_iff _ _ b) Hb_town) as [Hb1_town|Hb1_town].

*****
Hb1_town : Logic.eq (S O) b
Hb_town : In b\n (add (S O)\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))))
H_sub' : Subset (remove (S (S (S O))) B) town_2
Hb5 : not (Logic.eq b (S (S (S (S (S O))))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S (S (S O))) B)
b : elt
H33 : not (In (S (S (S O))) (remove (S (S (S O))) B))
H35 : not (In (S (S (S (S (S O))))) (remove (S (S (S O))) B))
H34 : not (In (S (S (S (S O)))) (remove (S (S (S O))) B))
H32 : forall _ : In (S (S O)) (remove (S (S (S O))) B), False
H31 : forall _ : In (S O) (remove (S (S (S O))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S O))) B)) (S O)
H3 : In (S (S (S O))) B
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
apply Hb1.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
assert (H_card_rem:cardinal (remove 3 B)=1).
idtac.
assert (H31:=fun HH : In 1 (remove 3 B) => H1 (remove_3 HH)).
assert (H32:=fun HH : In 2 (remove 3 B) => H2 (remove_3 HH)).
destruct (In_dec 4 (remove 3 B)) as [H34|H34].
destruct (In_dec 5 (remove 3 B)) as [H35|H35].
apply False_rec.
assert (H33:=(@remove_1 B _ _ (refl_equal 3))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].
assert (H_sub':=@subset_remove_3 _ _ 3 H_sub).
assert (Hb_town:=H_sub' _ Hb).
unfold town_2 in Hb_town.
destruct (proj1 (FM.add_iff _ _ b) Hb_town) as [Hb1_town|Hb1_town].
apply Hb1.

*****
Hb1_town : Logic.eq (S O) b
Hb_town : In b\n (add (S O)\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))))
H_sub' : Subset (remove (S (S (S O))) B) town_2
Hb5 : not (Logic.eq b (S (S (S (S (S O))))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S (S (S O))) B)
b : elt
H33 : not (In (S (S (S O))) (remove (S (S (S O))) B))
H35 : not (In (S (S (S (S (S O))))) (remove (S (S (S O))) B))
H34 : not (In (S (S (S (S O)))) (remove (S (S (S O))) B))
H32 : forall _ : In (S (S O)) (remove (S (S (S O))) B), False
H31 : forall _ : In (S O) (remove (S (S (S O))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S O))) B)) (S O)
H3 : In (S (S (S O))) B
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
Logic.eq b (S O)
+++++
rewrite Hb1_town.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
assert (H_card_rem:cardinal (remove 3 B)=1).
idtac.
assert (H31:=fun HH : In 1 (remove 3 B) => H1 (remove_3 HH)).
assert (H32:=fun HH : In 2 (remove 3 B) => H2 (remove_3 HH)).
destruct (In_dec 4 (remove 3 B)) as [H34|H34].
destruct (In_dec 5 (remove 3 B)) as [H35|H35].
apply False_rec.
assert (H33:=(@remove_1 B _ _ (refl_equal 3))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].
assert (H_sub':=@subset_remove_3 _ _ 3 H_sub).
assert (Hb_town:=H_sub' _ Hb).
unfold town_2 in Hb_town.
destruct (proj1 (FM.add_iff _ _ b) Hb_town) as [Hb1_town|Hb1_town].
apply Hb1.
rewrite Hb1_town.

*****
Hb1_town : Logic.eq (S O) b
Hb_town : In b\n (add (S O)\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))))
H_sub' : Subset (remove (S (S (S O))) B) town_2
Hb5 : not (Logic.eq b (S (S (S (S (S O))))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S (S (S O))) B)
b : elt
H33 : not (In (S (S (S O))) (remove (S (S (S O))) B))
H35 : not (In (S (S (S (S (S O))))) (remove (S (S (S O))) B))
H34 : not (In (S (S (S (S O)))) (remove (S (S (S O))) B))
H32 : forall _ : In (S (S O)) (remove (S (S (S O))) B), False
H31 : forall _ : In (S O) (remove (S (S (S O))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S O))) B)) (S O)
H3 : In (S (S (S O))) B
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
Logic.eq b b
+++++
reflexivity.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
assert (H_card_rem:cardinal (remove 3 B)=1).
idtac.
assert (H31:=fun HH : In 1 (remove 3 B) => H1 (remove_3 HH)).
assert (H32:=fun HH : In 2 (remove 3 B) => H2 (remove_3 HH)).
destruct (In_dec 4 (remove 3 B)) as [H34|H34].
destruct (In_dec 5 (remove 3 B)) as [H35|H35].
apply False_rec.
assert (H33:=(@remove_1 B _ _ (refl_equal 3))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].
assert (H_sub':=@subset_remove_3 _ _ 3 H_sub).
assert (Hb_town:=H_sub' _ Hb).
unfold town_2 in Hb_town.
destruct (proj1 (FM.add_iff _ _ b) Hb_town) as [Hb1_town|Hb1_town].

*****
Hb1_town : In b\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))))
Hb_town : In b\n (add (S O)\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))))
H_sub' : Subset (remove (S (S (S O))) B) town_2
Hb5 : not (Logic.eq b (S (S (S (S (S O))))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S (S (S O))) B)
b : elt
H33 : not (In (S (S (S O))) (remove (S (S (S O))) B))
H35 : not (In (S (S (S (S (S O))))) (remove (S (S (S O))) B))
H34 : not (In (S (S (S (S O)))) (remove (S (S (S O))) B))
H32 : forall _ : In (S (S O)) (remove (S (S (S O))) B), False
H31 : forall _ : In (S O) (remove (S (S (S O))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S O))) B)) (S O)
H3 : In (S (S (S O))) B
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
destruct (proj1 (FM.add_iff _ _ b) Hb1_town) as [Hb2_town|Hb2_town].
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
assert (H_card_rem:cardinal (remove 3 B)=1).
idtac.
assert (H31:=fun HH : In 1 (remove 3 B) => H1 (remove_3 HH)).
assert (H32:=fun HH : In 2 (remove 3 B) => H2 (remove_3 HH)).
destruct (In_dec 4 (remove 3 B)) as [H34|H34].
destruct (In_dec 5 (remove 3 B)) as [H35|H35].
apply False_rec.
assert (H33:=(@remove_1 B _ _ (refl_equal 3))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].
assert (H_sub':=@subset_remove_3 _ _ 3 H_sub).
assert (Hb_town:=H_sub' _ Hb).
unfold town_2 in Hb_town.
destruct (proj1 (FM.add_iff _ _ b) Hb_town) as [Hb1_town|Hb1_town].
destruct (proj1 (FM.add_iff _ _ b) Hb1_town) as [Hb2_town|Hb2_town].

*****
Hb2_town : Logic.eq (S (S O)) b
Hb1_town : In b\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))))
Hb_town : In b\n (add (S O)\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))))
H_sub' : Subset (remove (S (S (S O))) B) town_2
Hb5 : not (Logic.eq b (S (S (S (S (S O))))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S (S (S O))) B)
b : elt
H33 : not (In (S (S (S O))) (remove (S (S (S O))) B))
H35 : not (In (S (S (S (S (S O))))) (remove (S (S (S O))) B))
H34 : not (In (S (S (S (S O)))) (remove (S (S (S O))) B))
H32 : forall _ : In (S (S O)) (remove (S (S (S O))) B), False
H31 : forall _ : In (S O) (remove (S (S (S O))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S O))) B)) (S O)
H3 : In (S (S (S O))) B
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
apply Hb2.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
assert (H_card_rem:cardinal (remove 3 B)=1).
idtac.
assert (H31:=fun HH : In 1 (remove 3 B) => H1 (remove_3 HH)).
assert (H32:=fun HH : In 2 (remove 3 B) => H2 (remove_3 HH)).
destruct (In_dec 4 (remove 3 B)) as [H34|H34].
destruct (In_dec 5 (remove 3 B)) as [H35|H35].
apply False_rec.
assert (H33:=(@remove_1 B _ _ (refl_equal 3))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].
assert (H_sub':=@subset_remove_3 _ _ 3 H_sub).
assert (Hb_town:=H_sub' _ Hb).
unfold town_2 in Hb_town.
destruct (proj1 (FM.add_iff _ _ b) Hb_town) as [Hb1_town|Hb1_town].
destruct (proj1 (FM.add_iff _ _ b) Hb1_town) as [Hb2_town|Hb2_town].
apply Hb2.

*****
Hb2_town : Logic.eq (S (S O)) b
Hb1_town : In b\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))))
Hb_town : In b\n (add (S O)\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))))
H_sub' : Subset (remove (S (S (S O))) B) town_2
Hb5 : not (Logic.eq b (S (S (S (S (S O))))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S (S (S O))) B)
b : elt
H33 : not (In (S (S (S O))) (remove (S (S (S O))) B))
H35 : not (In (S (S (S (S (S O))))) (remove (S (S (S O))) B))
H34 : not (In (S (S (S (S O)))) (remove (S (S (S O))) B))
H32 : forall _ : In (S (S O)) (remove (S (S (S O))) B), False
H31 : forall _ : In (S O) (remove (S (S (S O))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S O))) B)) (S O)
H3 : In (S (S (S O))) B
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
Logic.eq b (S (S O))
+++++
rewrite Hb2_town.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
assert (H_card_rem:cardinal (remove 3 B)=1).
idtac.
assert (H31:=fun HH : In 1 (remove 3 B) => H1 (remove_3 HH)).
assert (H32:=fun HH : In 2 (remove 3 B) => H2 (remove_3 HH)).
destruct (In_dec 4 (remove 3 B)) as [H34|H34].
destruct (In_dec 5 (remove 3 B)) as [H35|H35].
apply False_rec.
assert (H33:=(@remove_1 B _ _ (refl_equal 3))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].
assert (H_sub':=@subset_remove_3 _ _ 3 H_sub).
assert (Hb_town:=H_sub' _ Hb).
unfold town_2 in Hb_town.
destruct (proj1 (FM.add_iff _ _ b) Hb_town) as [Hb1_town|Hb1_town].
destruct (proj1 (FM.add_iff _ _ b) Hb1_town) as [Hb2_town|Hb2_town].
apply Hb2.
rewrite Hb2_town.

*****
Hb2_town : Logic.eq (S (S O)) b
Hb1_town : In b\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))))
Hb_town : In b\n (add (S O)\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))))
H_sub' : Subset (remove (S (S (S O))) B) town_2
Hb5 : not (Logic.eq b (S (S (S (S (S O))))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S (S (S O))) B)
b : elt
H33 : not (In (S (S (S O))) (remove (S (S (S O))) B))
H35 : not (In (S (S (S (S (S O))))) (remove (S (S (S O))) B))
H34 : not (In (S (S (S (S O)))) (remove (S (S (S O))) B))
H32 : forall _ : In (S (S O)) (remove (S (S (S O))) B), False
H31 : forall _ : In (S O) (remove (S (S (S O))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S O))) B)) (S O)
H3 : In (S (S (S O))) B
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
Logic.eq b b
+++++
reflexivity.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
assert (H_card_rem:cardinal (remove 3 B)=1).
idtac.
assert (H31:=fun HH : In 1 (remove 3 B) => H1 (remove_3 HH)).
assert (H32:=fun HH : In 2 (remove 3 B) => H2 (remove_3 HH)).
destruct (In_dec 4 (remove 3 B)) as [H34|H34].
destruct (In_dec 5 (remove 3 B)) as [H35|H35].
apply False_rec.
assert (H33:=(@remove_1 B _ _ (refl_equal 3))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].
assert (H_sub':=@subset_remove_3 _ _ 3 H_sub).
assert (Hb_town:=H_sub' _ Hb).
unfold town_2 in Hb_town.
destruct (proj1 (FM.add_iff _ _ b) Hb_town) as [Hb1_town|Hb1_town].
destruct (proj1 (FM.add_iff _ _ b) Hb1_town) as [Hb2_town|Hb2_town].

*****
Hb2_town : In b\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))
Hb1_town : In b\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))))
Hb_town : In b\n (add (S O)\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))))
H_sub' : Subset (remove (S (S (S O))) B) town_2
Hb5 : not (Logic.eq b (S (S (S (S (S O))))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S (S (S O))) B)
b : elt
H33 : not (In (S (S (S O))) (remove (S (S (S O))) B))
H35 : not (In (S (S (S (S (S O))))) (remove (S (S (S O))) B))
H34 : not (In (S (S (S (S O)))) (remove (S (S (S O))) B))
H32 : forall _ : In (S (S O)) (remove (S (S (S O))) B), False
H31 : forall _ : In (S O) (remove (S (S (S O))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S O))) B)) (S O)
H3 : In (S (S (S O))) B
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
destruct (proj1 (FM.add_iff _ _ b) Hb2_town) as [Hb3_town|Hb3_town].
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
assert (H_card_rem:cardinal (remove 3 B)=1).
idtac.
assert (H31:=fun HH : In 1 (remove 3 B) => H1 (remove_3 HH)).
assert (H32:=fun HH : In 2 (remove 3 B) => H2 (remove_3 HH)).
destruct (In_dec 4 (remove 3 B)) as [H34|H34].
destruct (In_dec 5 (remove 3 B)) as [H35|H35].
apply False_rec.
assert (H33:=(@remove_1 B _ _ (refl_equal 3))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].
assert (H_sub':=@subset_remove_3 _ _ 3 H_sub).
assert (Hb_town:=H_sub' _ Hb).
unfold town_2 in Hb_town.
destruct (proj1 (FM.add_iff _ _ b) Hb_town) as [Hb1_town|Hb1_town].
destruct (proj1 (FM.add_iff _ _ b) Hb1_town) as [Hb2_town|Hb2_town].
destruct (proj1 (FM.add_iff _ _ b) Hb2_town) as [Hb3_town|Hb3_town].

*****
Hb3_town : Logic.eq (S (S (S O))) b
Hb2_town : In b\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))
Hb1_town : In b\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))))
Hb_town : In b\n (add (S O)\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))))
H_sub' : Subset (remove (S (S (S O))) B) town_2
Hb5 : not (Logic.eq b (S (S (S (S (S O))))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S (S (S O))) B)
b : elt
H33 : not (In (S (S (S O))) (remove (S (S (S O))) B))
H35 : not (In (S (S (S (S (S O))))) (remove (S (S (S O))) B))
H34 : not (In (S (S (S (S O)))) (remove (S (S (S O))) B))
H32 : forall _ : In (S (S O)) (remove (S (S (S O))) B), False
H31 : forall _ : In (S O) (remove (S (S (S O))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S O))) B)) (S O)
H3 : In (S (S (S O))) B
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
apply Hb3.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
assert (H_card_rem:cardinal (remove 3 B)=1).
idtac.
assert (H31:=fun HH : In 1 (remove 3 B) => H1 (remove_3 HH)).
assert (H32:=fun HH : In 2 (remove 3 B) => H2 (remove_3 HH)).
destruct (In_dec 4 (remove 3 B)) as [H34|H34].
destruct (In_dec 5 (remove 3 B)) as [H35|H35].
apply False_rec.
assert (H33:=(@remove_1 B _ _ (refl_equal 3))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].
assert (H_sub':=@subset_remove_3 _ _ 3 H_sub).
assert (Hb_town:=H_sub' _ Hb).
unfold town_2 in Hb_town.
destruct (proj1 (FM.add_iff _ _ b) Hb_town) as [Hb1_town|Hb1_town].
destruct (proj1 (FM.add_iff _ _ b) Hb1_town) as [Hb2_town|Hb2_town].
destruct (proj1 (FM.add_iff _ _ b) Hb2_town) as [Hb3_town|Hb3_town].
apply Hb3.

*****
Hb3_town : Logic.eq (S (S (S O))) b
Hb2_town : In b\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))
Hb1_town : In b\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))))
Hb_town : In b\n (add (S O)\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))))
H_sub' : Subset (remove (S (S (S O))) B) town_2
Hb5 : not (Logic.eq b (S (S (S (S (S O))))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S (S (S O))) B)
b : elt
H33 : not (In (S (S (S O))) (remove (S (S (S O))) B))
H35 : not (In (S (S (S (S (S O))))) (remove (S (S (S O))) B))
H34 : not (In (S (S (S (S O)))) (remove (S (S (S O))) B))
H32 : forall _ : In (S (S O)) (remove (S (S (S O))) B), False
H31 : forall _ : In (S O) (remove (S (S (S O))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S O))) B)) (S O)
H3 : In (S (S (S O))) B
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
Logic.eq b (S (S (S O)))
+++++
rewrite Hb3_town.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
assert (H_card_rem:cardinal (remove 3 B)=1).
idtac.
assert (H31:=fun HH : In 1 (remove 3 B) => H1 (remove_3 HH)).
assert (H32:=fun HH : In 2 (remove 3 B) => H2 (remove_3 HH)).
destruct (In_dec 4 (remove 3 B)) as [H34|H34].
destruct (In_dec 5 (remove 3 B)) as [H35|H35].
apply False_rec.
assert (H33:=(@remove_1 B _ _ (refl_equal 3))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].
assert (H_sub':=@subset_remove_3 _ _ 3 H_sub).
assert (Hb_town:=H_sub' _ Hb).
unfold town_2 in Hb_town.
destruct (proj1 (FM.add_iff _ _ b) Hb_town) as [Hb1_town|Hb1_town].
destruct (proj1 (FM.add_iff _ _ b) Hb1_town) as [Hb2_town|Hb2_town].
destruct (proj1 (FM.add_iff _ _ b) Hb2_town) as [Hb3_town|Hb3_town].
apply Hb3.
rewrite Hb3_town.

*****
Hb3_town : Logic.eq (S (S (S O))) b
Hb2_town : In b\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))
Hb1_town : In b\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))))
Hb_town : In b\n (add (S O)\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))))
H_sub' : Subset (remove (S (S (S O))) B) town_2
Hb5 : not (Logic.eq b (S (S (S (S (S O))))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S (S (S O))) B)
b : elt
H33 : not (In (S (S (S O))) (remove (S (S (S O))) B))
H35 : not (In (S (S (S (S (S O))))) (remove (S (S (S O))) B))
H34 : not (In (S (S (S (S O)))) (remove (S (S (S O))) B))
H32 : forall _ : In (S (S O)) (remove (S (S (S O))) B), False
H31 : forall _ : In (S O) (remove (S (S (S O))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S O))) B)) (S O)
H3 : In (S (S (S O))) B
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
Logic.eq b b
+++++
reflexivity.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
assert (H_card_rem:cardinal (remove 3 B)=1).
idtac.
assert (H31:=fun HH : In 1 (remove 3 B) => H1 (remove_3 HH)).
assert (H32:=fun HH : In 2 (remove 3 B) => H2 (remove_3 HH)).
destruct (In_dec 4 (remove 3 B)) as [H34|H34].
destruct (In_dec 5 (remove 3 B)) as [H35|H35].
apply False_rec.
assert (H33:=(@remove_1 B _ _ (refl_equal 3))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].
assert (H_sub':=@subset_remove_3 _ _ 3 H_sub).
assert (Hb_town:=H_sub' _ Hb).
unfold town_2 in Hb_town.
destruct (proj1 (FM.add_iff _ _ b) Hb_town) as [Hb1_town|Hb1_town].
destruct (proj1 (FM.add_iff _ _ b) Hb1_town) as [Hb2_town|Hb2_town].
destruct (proj1 (FM.add_iff _ _ b) Hb2_town) as [Hb3_town|Hb3_town].

*****
Hb3_town : In b (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))
Hb2_town : In b\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))
Hb1_town : In b\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))))
Hb_town : In b\n (add (S O)\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))))
H_sub' : Subset (remove (S (S (S O))) B) town_2
Hb5 : not (Logic.eq b (S (S (S (S (S O))))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S (S (S O))) B)
b : elt
H33 : not (In (S (S (S O))) (remove (S (S (S O))) B))
H35 : not (In (S (S (S (S (S O))))) (remove (S (S (S O))) B))
H34 : not (In (S (S (S (S O)))) (remove (S (S (S O))) B))
H32 : forall _ : In (S (S O)) (remove (S (S (S O))) B), False
H31 : forall _ : In (S O) (remove (S (S (S O))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S O))) B)) (S O)
H3 : In (S (S (S O))) B
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
destruct (proj1 (FM.add_iff _ _ b) Hb3_town) as [Hb4_town|Hb4_town].
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
assert (H_card_rem:cardinal (remove 3 B)=1).
idtac.
assert (H31:=fun HH : In 1 (remove 3 B) => H1 (remove_3 HH)).
assert (H32:=fun HH : In 2 (remove 3 B) => H2 (remove_3 HH)).
destruct (In_dec 4 (remove 3 B)) as [H34|H34].
destruct (In_dec 5 (remove 3 B)) as [H35|H35].
apply False_rec.
assert (H33:=(@remove_1 B _ _ (refl_equal 3))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].
assert (H_sub':=@subset_remove_3 _ _ 3 H_sub).
assert (Hb_town:=H_sub' _ Hb).
unfold town_2 in Hb_town.
destruct (proj1 (FM.add_iff _ _ b) Hb_town) as [Hb1_town|Hb1_town].
destruct (proj1 (FM.add_iff _ _ b) Hb1_town) as [Hb2_town|Hb2_town].
destruct (proj1 (FM.add_iff _ _ b) Hb2_town) as [Hb3_town|Hb3_town].
destruct (proj1 (FM.add_iff _ _ b) Hb3_town) as [Hb4_town|Hb4_town].

*****
Hb4_town : Logic.eq (S (S (S (S O)))) b
Hb3_town : In b (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))
Hb2_town : In b\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))
Hb1_town : In b\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))))
Hb_town : In b\n (add (S O)\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))))
H_sub' : Subset (remove (S (S (S O))) B) town_2
Hb5 : not (Logic.eq b (S (S (S (S (S O))))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S (S (S O))) B)
b : elt
H33 : not (In (S (S (S O))) (remove (S (S (S O))) B))
H35 : not (In (S (S (S (S (S O))))) (remove (S (S (S O))) B))
H34 : not (In (S (S (S (S O)))) (remove (S (S (S O))) B))
H32 : forall _ : In (S (S O)) (remove (S (S (S O))) B), False
H31 : forall _ : In (S O) (remove (S (S (S O))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S O))) B)) (S O)
H3 : In (S (S (S O))) B
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
apply Hb4.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
assert (H_card_rem:cardinal (remove 3 B)=1).
idtac.
assert (H31:=fun HH : In 1 (remove 3 B) => H1 (remove_3 HH)).
assert (H32:=fun HH : In 2 (remove 3 B) => H2 (remove_3 HH)).
destruct (In_dec 4 (remove 3 B)) as [H34|H34].
destruct (In_dec 5 (remove 3 B)) as [H35|H35].
apply False_rec.
assert (H33:=(@remove_1 B _ _ (refl_equal 3))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].
assert (H_sub':=@subset_remove_3 _ _ 3 H_sub).
assert (Hb_town:=H_sub' _ Hb).
unfold town_2 in Hb_town.
destruct (proj1 (FM.add_iff _ _ b) Hb_town) as [Hb1_town|Hb1_town].
destruct (proj1 (FM.add_iff _ _ b) Hb1_town) as [Hb2_town|Hb2_town].
destruct (proj1 (FM.add_iff _ _ b) Hb2_town) as [Hb3_town|Hb3_town].
destruct (proj1 (FM.add_iff _ _ b) Hb3_town) as [Hb4_town|Hb4_town].
apply Hb4.

*****
Hb4_town : Logic.eq (S (S (S (S O)))) b
Hb3_town : In b (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))
Hb2_town : In b\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))
Hb1_town : In b\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))))
Hb_town : In b\n (add (S O)\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))))
H_sub' : Subset (remove (S (S (S O))) B) town_2
Hb5 : not (Logic.eq b (S (S (S (S (S O))))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S (S (S O))) B)
b : elt
H33 : not (In (S (S (S O))) (remove (S (S (S O))) B))
H35 : not (In (S (S (S (S (S O))))) (remove (S (S (S O))) B))
H34 : not (In (S (S (S (S O)))) (remove (S (S (S O))) B))
H32 : forall _ : In (S (S O)) (remove (S (S (S O))) B), False
H31 : forall _ : In (S O) (remove (S (S (S O))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S O))) B)) (S O)
H3 : In (S (S (S O))) B
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
Logic.eq b (S (S (S (S O))))
+++++
rewrite Hb4_town.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
assert (H_card_rem:cardinal (remove 3 B)=1).
idtac.
assert (H31:=fun HH : In 1 (remove 3 B) => H1 (remove_3 HH)).
assert (H32:=fun HH : In 2 (remove 3 B) => H2 (remove_3 HH)).
destruct (In_dec 4 (remove 3 B)) as [H34|H34].
destruct (In_dec 5 (remove 3 B)) as [H35|H35].
apply False_rec.
assert (H33:=(@remove_1 B _ _ (refl_equal 3))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].
assert (H_sub':=@subset_remove_3 _ _ 3 H_sub).
assert (Hb_town:=H_sub' _ Hb).
unfold town_2 in Hb_town.
destruct (proj1 (FM.add_iff _ _ b) Hb_town) as [Hb1_town|Hb1_town].
destruct (proj1 (FM.add_iff _ _ b) Hb1_town) as [Hb2_town|Hb2_town].
destruct (proj1 (FM.add_iff _ _ b) Hb2_town) as [Hb3_town|Hb3_town].
destruct (proj1 (FM.add_iff _ _ b) Hb3_town) as [Hb4_town|Hb4_town].
apply Hb4.
rewrite Hb4_town.

*****
Hb4_town : Logic.eq (S (S (S (S O)))) b
Hb3_town : In b (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))
Hb2_town : In b\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))
Hb1_town : In b\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))))
Hb_town : In b\n (add (S O)\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))))
H_sub' : Subset (remove (S (S (S O))) B) town_2
Hb5 : not (Logic.eq b (S (S (S (S (S O))))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S (S (S O))) B)
b : elt
H33 : not (In (S (S (S O))) (remove (S (S (S O))) B))
H35 : not (In (S (S (S (S (S O))))) (remove (S (S (S O))) B))
H34 : not (In (S (S (S (S O)))) (remove (S (S (S O))) B))
H32 : forall _ : In (S (S O)) (remove (S (S (S O))) B), False
H31 : forall _ : In (S O) (remove (S (S (S O))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S O))) B)) (S O)
H3 : In (S (S (S O))) B
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
Logic.eq b b
+++++
reflexivity.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
assert (H_card_rem:cardinal (remove 3 B)=1).
idtac.
assert (H31:=fun HH : In 1 (remove 3 B) => H1 (remove_3 HH)).
assert (H32:=fun HH : In 2 (remove 3 B) => H2 (remove_3 HH)).
destruct (In_dec 4 (remove 3 B)) as [H34|H34].
destruct (In_dec 5 (remove 3 B)) as [H35|H35].
apply False_rec.
assert (H33:=(@remove_1 B _ _ (refl_equal 3))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].
assert (H_sub':=@subset_remove_3 _ _ 3 H_sub).
assert (Hb_town:=H_sub' _ Hb).
unfold town_2 in Hb_town.
destruct (proj1 (FM.add_iff _ _ b) Hb_town) as [Hb1_town|Hb1_town].
destruct (proj1 (FM.add_iff _ _ b) Hb1_town) as [Hb2_town|Hb2_town].
destruct (proj1 (FM.add_iff _ _ b) Hb2_town) as [Hb3_town|Hb3_town].
destruct (proj1 (FM.add_iff _ _ b) Hb3_town) as [Hb4_town|Hb4_town].

*****
Hb4_town : In b (add (S (S (S (S (S O))))) empty)
Hb3_town : In b (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))
Hb2_town : In b\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))
Hb1_town : In b\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))))
Hb_town : In b\n (add (S O)\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))))
H_sub' : Subset (remove (S (S (S O))) B) town_2
Hb5 : not (Logic.eq b (S (S (S (S (S O))))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S (S (S O))) B)
b : elt
H33 : not (In (S (S (S O))) (remove (S (S (S O))) B))
H35 : not (In (S (S (S (S (S O))))) (remove (S (S (S O))) B))
H34 : not (In (S (S (S (S O)))) (remove (S (S (S O))) B))
H32 : forall _ : In (S (S O)) (remove (S (S (S O))) B), False
H31 : forall _ : In (S O) (remove (S (S (S O))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S O))) B)) (S O)
H3 : In (S (S (S O))) B
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
destruct (proj1 (FM.add_iff _ _ b) Hb4_town) as [Hb5_town|Hb5_town].
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
assert (H_card_rem:cardinal (remove 3 B)=1).
idtac.
assert (H31:=fun HH : In 1 (remove 3 B) => H1 (remove_3 HH)).
assert (H32:=fun HH : In 2 (remove 3 B) => H2 (remove_3 HH)).
destruct (In_dec 4 (remove 3 B)) as [H34|H34].
destruct (In_dec 5 (remove 3 B)) as [H35|H35].
apply False_rec.
assert (H33:=(@remove_1 B _ _ (refl_equal 3))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].
assert (H_sub':=@subset_remove_3 _ _ 3 H_sub).
assert (Hb_town:=H_sub' _ Hb).
unfold town_2 in Hb_town.
destruct (proj1 (FM.add_iff _ _ b) Hb_town) as [Hb1_town|Hb1_town].
destruct (proj1 (FM.add_iff _ _ b) Hb1_town) as [Hb2_town|Hb2_town].
destruct (proj1 (FM.add_iff _ _ b) Hb2_town) as [Hb3_town|Hb3_town].
destruct (proj1 (FM.add_iff _ _ b) Hb3_town) as [Hb4_town|Hb4_town].
destruct (proj1 (FM.add_iff _ _ b) Hb4_town) as [Hb5_town|Hb5_town].

*****
Hb5_town : Logic.eq (S (S (S (S (S O))))) b
Hb4_town : In b (add (S (S (S (S (S O))))) empty)
Hb3_town : In b (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))
Hb2_town : In b\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))
Hb1_town : In b\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))))
Hb_town : In b\n (add (S O)\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))))
H_sub' : Subset (remove (S (S (S O))) B) town_2
Hb5 : not (Logic.eq b (S (S (S (S (S O))))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S (S (S O))) B)
b : elt
H33 : not (In (S (S (S O))) (remove (S (S (S O))) B))
H35 : not (In (S (S (S (S (S O))))) (remove (S (S (S O))) B))
H34 : not (In (S (S (S (S O)))) (remove (S (S (S O))) B))
H32 : forall _ : In (S (S O)) (remove (S (S (S O))) B), False
H31 : forall _ : In (S O) (remove (S (S (S O))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S O))) B)) (S O)
H3 : In (S (S (S O))) B
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
apply Hb5.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
assert (H_card_rem:cardinal (remove 3 B)=1).
idtac.
assert (H31:=fun HH : In 1 (remove 3 B) => H1 (remove_3 HH)).
assert (H32:=fun HH : In 2 (remove 3 B) => H2 (remove_3 HH)).
destruct (In_dec 4 (remove 3 B)) as [H34|H34].
destruct (In_dec 5 (remove 3 B)) as [H35|H35].
apply False_rec.
assert (H33:=(@remove_1 B _ _ (refl_equal 3))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].
assert (H_sub':=@subset_remove_3 _ _ 3 H_sub).
assert (Hb_town:=H_sub' _ Hb).
unfold town_2 in Hb_town.
destruct (proj1 (FM.add_iff _ _ b) Hb_town) as [Hb1_town|Hb1_town].
destruct (proj1 (FM.add_iff _ _ b) Hb1_town) as [Hb2_town|Hb2_town].
destruct (proj1 (FM.add_iff _ _ b) Hb2_town) as [Hb3_town|Hb3_town].
destruct (proj1 (FM.add_iff _ _ b) Hb3_town) as [Hb4_town|Hb4_town].
destruct (proj1 (FM.add_iff _ _ b) Hb4_town) as [Hb5_town|Hb5_town].
apply Hb5.

*****
Hb5_town : Logic.eq (S (S (S (S (S O))))) b
Hb4_town : In b (add (S (S (S (S (S O))))) empty)
Hb3_town : In b (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))
Hb2_town : In b\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))
Hb1_town : In b\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))))
Hb_town : In b\n (add (S O)\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))))
H_sub' : Subset (remove (S (S (S O))) B) town_2
Hb5 : not (Logic.eq b (S (S (S (S (S O))))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S (S (S O))) B)
b : elt
H33 : not (In (S (S (S O))) (remove (S (S (S O))) B))
H35 : not (In (S (S (S (S (S O))))) (remove (S (S (S O))) B))
H34 : not (In (S (S (S (S O)))) (remove (S (S (S O))) B))
H32 : forall _ : In (S (S O)) (remove (S (S (S O))) B), False
H31 : forall _ : In (S O) (remove (S (S (S O))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S O))) B)) (S O)
H3 : In (S (S (S O))) B
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
Logic.eq b (S (S (S (S (S O)))))
+++++
rewrite Hb5_town.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
assert (H_card_rem:cardinal (remove 3 B)=1).
idtac.
assert (H31:=fun HH : In 1 (remove 3 B) => H1 (remove_3 HH)).
assert (H32:=fun HH : In 2 (remove 3 B) => H2 (remove_3 HH)).
destruct (In_dec 4 (remove 3 B)) as [H34|H34].
destruct (In_dec 5 (remove 3 B)) as [H35|H35].
apply False_rec.
assert (H33:=(@remove_1 B _ _ (refl_equal 3))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].
assert (H_sub':=@subset_remove_3 _ _ 3 H_sub).
assert (Hb_town:=H_sub' _ Hb).
unfold town_2 in Hb_town.
destruct (proj1 (FM.add_iff _ _ b) Hb_town) as [Hb1_town|Hb1_town].
destruct (proj1 (FM.add_iff _ _ b) Hb1_town) as [Hb2_town|Hb2_town].
destruct (proj1 (FM.add_iff _ _ b) Hb2_town) as [Hb3_town|Hb3_town].
destruct (proj1 (FM.add_iff _ _ b) Hb3_town) as [Hb4_town|Hb4_town].
destruct (proj1 (FM.add_iff _ _ b) Hb4_town) as [Hb5_town|Hb5_town].
apply Hb5.
rewrite Hb5_town.

*****
Hb5_town : Logic.eq (S (S (S (S (S O))))) b
Hb4_town : In b (add (S (S (S (S (S O))))) empty)
Hb3_town : In b (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))
Hb2_town : In b\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))
Hb1_town : In b\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))))
Hb_town : In b\n (add (S O)\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))))
H_sub' : Subset (remove (S (S (S O))) B) town_2
Hb5 : not (Logic.eq b (S (S (S (S (S O))))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S (S (S O))) B)
b : elt
H33 : not (In (S (S (S O))) (remove (S (S (S O))) B))
H35 : not (In (S (S (S (S (S O))))) (remove (S (S (S O))) B))
H34 : not (In (S (S (S (S O)))) (remove (S (S (S O))) B))
H32 : forall _ : In (S (S O)) (remove (S (S (S O))) B), False
H31 : forall _ : In (S O) (remove (S (S (S O))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S O))) B)) (S O)
H3 : In (S (S (S O))) B
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
Logic.eq b b
+++++
reflexivity.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
assert (H_card_rem:cardinal (remove 3 B)=1).
idtac.
assert (H31:=fun HH : In 1 (remove 3 B) => H1 (remove_3 HH)).
assert (H32:=fun HH : In 2 (remove 3 B) => H2 (remove_3 HH)).
destruct (In_dec 4 (remove 3 B)) as [H34|H34].
destruct (In_dec 5 (remove 3 B)) as [H35|H35].
apply False_rec.
assert (H33:=(@remove_1 B _ _ (refl_equal 3))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].
assert (H_sub':=@subset_remove_3 _ _ 3 H_sub).
assert (Hb_town:=H_sub' _ Hb).
unfold town_2 in Hb_town.
destruct (proj1 (FM.add_iff _ _ b) Hb_town) as [Hb1_town|Hb1_town].
destruct (proj1 (FM.add_iff _ _ b) Hb1_town) as [Hb2_town|Hb2_town].
destruct (proj1 (FM.add_iff _ _ b) Hb2_town) as [Hb3_town|Hb3_town].
destruct (proj1 (FM.add_iff _ _ b) Hb3_town) as [Hb4_town|Hb4_town].
destruct (proj1 (FM.add_iff _ _ b) Hb4_town) as [Hb5_town|Hb5_town].

*****
Hb5_town : In b empty
Hb4_town : In b (add (S (S (S (S (S O))))) empty)
Hb3_town : In b (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))
Hb2_town : In b\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))
Hb1_town : In b\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))))
Hb_town : In b\n (add (S O)\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))))
H_sub' : Subset (remove (S (S (S O))) B) town_2
Hb5 : not (Logic.eq b (S (S (S (S (S O))))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S (S (S O))) B)
b : elt
H33 : not (In (S (S (S O))) (remove (S (S (S O))) B))
H35 : not (In (S (S (S (S (S O))))) (remove (S (S (S O))) B))
H34 : not (In (S (S (S (S O)))) (remove (S (S (S O))) B))
H32 : forall _ : In (S (S O)) (remove (S (S (S O))) B), False
H31 : forall _ : In (S O) (remove (S (S (S O))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S O))) B)) (S O)
H3 : In (S (S (S O))) B
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
apply (proj1 (FM.empty_iff b) Hb5_town).
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].

*****
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
sumor (sumor (sumor (sumor (sumor (sumor (sumor (sumor (sumbool (Equal B (add (S O) (add (S (S O)) empty))) (Equal B (add (S O) (add (S (S (S O))) empty)))) (Equal B (add (S O) (add (S (S (S (S O)))) empty)))) (Equal B (add (S O) (add (S (S (S (S (S O))))) empty)))) (Equal B (add (S (S O)) (add (S (S (S O))) empty)))) (Equal B (add (S (S O)) (add (S (S (S (S O)))) empty)))) (Equal B (add (S (S O)) (add (S (S (S (S (S O))))) empty)))) (Equal B (add (S (S (S O))) (add (S (S (S (S O)))) empty)))) (Equal B (add (S (S (S O))) (add (S (S (S (S (S O))))) empty)))) (Equal B (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))
+++++
destruct (In_dec 4 B) as [H4|H4].
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].

*****
H4 : In (S (S (S (S O)))) B
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
sumor (sumor (sumor (sumor (sumor (sumor (sumor (sumor (sumbool (Equal B (add (S O) (add (S (S O)) empty))) (Equal B (add (S O) (add (S (S (S O))) empty)))) (Equal B (add (S O) (add (S (S (S (S O)))) empty)))) (Equal B (add (S O) (add (S (S (S (S (S O))))) empty)))) (Equal B (add (S (S O)) (add (S (S (S O))) empty)))) (Equal B (add (S (S O)) (add (S (S (S (S O)))) empty)))) (Equal B (add (S (S O)) (add (S (S (S (S (S O))))) empty)))) (Equal B (add (S (S (S O))) (add (S (S (S (S O)))) empty)))) (Equal B (add (S (S (S O))) (add (S (S (S (S (S O))))) empty)))) (Equal B (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))
+++++
assert (H_card_rem:cardinal (remove 4 B)=1).
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
assert (H_card_rem:cardinal (remove 4 B)=1).

*****
H4 : In (S (S (S (S O)))) B
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
Logic.eq (cardinal (remove (S (S (S (S O)))) B)) (S O)
+++++
rewrite <- (remove_cardinal_1 H4) in H_card.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
assert (H_card_rem:cardinal (remove 4 B)=1).
rewrite <- (remove_cardinal_1 H4) in H_card.

*****
H4 : In (S (S (S (S O)))) B
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (S (cardinal (remove (S (S (S (S O)))) B))) (S (S O))
H_sub : Subset B town_2
B : True
*****
Logic.eq (cardinal (remove (S (S (S (S O)))) B)) (S O)
+++++
apply eq_add_S.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
assert (H_card_rem:cardinal (remove 4 B)=1).
rewrite <- (remove_cardinal_1 H4) in H_card.
apply eq_add_S.

*****
H4 : In (S (S (S (S O)))) B
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (S (cardinal (remove (S (S (S (S O)))) B))) (S (S O))
H_sub : Subset B town_2
B : True
*****
Logic.eq (S (cardinal (remove (S (S (S (S O)))) B))) (S (S O))
+++++
assumption.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
assert (H_card_rem:cardinal (remove 4 B)=1).

*****
H_card_rem : Logic.eq (cardinal (remove (S (S (S (S O)))) B)) (S O)
H4 : In (S (S (S (S O)))) B
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
sumor (sumor (sumor (sumor (sumor (sumor (sumor (sumor (sumbool (Equal B (add (S O) (add (S (S O)) empty))) (Equal B (add (S O) (add (S (S (S O))) empty)))) (Equal B (add (S O) (add (S (S (S (S O)))) empty)))) (Equal B (add (S O) (add (S (S (S (S (S O))))) empty)))) (Equal B (add (S (S O)) (add (S (S (S O))) empty)))) (Equal B (add (S (S O)) (add (S (S (S (S O)))) empty)))) (Equal B (add (S (S O)) (add (S (S (S (S (S O))))) empty)))) (Equal B (add (S (S (S O))) (add (S (S (S (S O)))) empty)))) (Equal B (add (S (S (S O))) (add (S (S (S (S (S O))))) empty)))) (Equal B (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))
+++++
idtac.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
assert (H_card_rem:cardinal (remove 4 B)=1).
idtac.

*****
H_card_rem : Logic.eq (cardinal (remove (S (S (S (S O)))) B)) (S O)
H4 : In (S (S (S (S O)))) B
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
sumor (sumor (sumor (sumor (sumor (sumor (sumor (sumor (sumbool (Equal B (add (S O) (add (S (S O)) empty))) (Equal B (add (S O) (add (S (S (S O))) empty)))) (Equal B (add (S O) (add (S (S (S (S O)))) empty)))) (Equal B (add (S O) (add (S (S (S (S (S O))))) empty)))) (Equal B (add (S (S O)) (add (S (S (S O))) empty)))) (Equal B (add (S (S O)) (add (S (S (S (S O)))) empty)))) (Equal B (add (S (S O)) (add (S (S (S (S (S O))))) empty)))) (Equal B (add (S (S (S O))) (add (S (S (S (S O)))) empty)))) (Equal B (add (S (S (S O))) (add (S (S (S (S (S O))))) empty)))) (Equal B (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))
+++++
assert (H41:=fun HH : In 1 (remove 4 B) => H1 (remove_3 HH)).
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
assert (H_card_rem:cardinal (remove 4 B)=1).
idtac.
assert (H41:=fun HH : In 1 (remove 4 B) => H1 (remove_3 HH)).

*****
H41 : forall _ : In (S O) (remove (S (S (S (S O)))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S (S O)))) B)) (S O)
H4 : In (S (S (S (S O)))) B
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
sumor (sumor (sumor (sumor (sumor (sumor (sumor (sumor (sumbool (Equal B (add (S O) (add (S (S O)) empty))) (Equal B (add (S O) (add (S (S (S O))) empty)))) (Equal B (add (S O) (add (S (S (S (S O)))) empty)))) (Equal B (add (S O) (add (S (S (S (S (S O))))) empty)))) (Equal B (add (S (S O)) (add (S (S (S O))) empty)))) (Equal B (add (S (S O)) (add (S (S (S (S O)))) empty)))) (Equal B (add (S (S O)) (add (S (S (S (S (S O))))) empty)))) (Equal B (add (S (S (S O))) (add (S (S (S (S O)))) empty)))) (Equal B (add (S (S (S O))) (add (S (S (S (S (S O))))) empty)))) (Equal B (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))
+++++
assert (H42:=fun HH : In 2 (remove 4 B) => H2 (remove_3 HH)).
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
assert (H_card_rem:cardinal (remove 4 B)=1).
idtac.
assert (H41:=fun HH : In 1 (remove 4 B) => H1 (remove_3 HH)).
assert (H42:=fun HH : In 2 (remove 4 B) => H2 (remove_3 HH)).

*****
H42 : forall _ : In (S (S O)) (remove (S (S (S (S O)))) B), False
H41 : forall _ : In (S O) (remove (S (S (S (S O)))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S (S O)))) B)) (S O)
H4 : In (S (S (S (S O)))) B
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
sumor (sumor (sumor (sumor (sumor (sumor (sumor (sumor (sumbool (Equal B (add (S O) (add (S (S O)) empty))) (Equal B (add (S O) (add (S (S (S O))) empty)))) (Equal B (add (S O) (add (S (S (S (S O)))) empty)))) (Equal B (add (S O) (add (S (S (S (S (S O))))) empty)))) (Equal B (add (S (S O)) (add (S (S (S O))) empty)))) (Equal B (add (S (S O)) (add (S (S (S (S O)))) empty)))) (Equal B (add (S (S O)) (add (S (S (S (S (S O))))) empty)))) (Equal B (add (S (S (S O))) (add (S (S (S (S O)))) empty)))) (Equal B (add (S (S (S O))) (add (S (S (S (S (S O))))) empty)))) (Equal B (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))
+++++
assert (H43:=fun HH : In 3 (remove 4 B) => H3 (remove_3 HH)).
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
assert (H_card_rem:cardinal (remove 4 B)=1).
idtac.
assert (H41:=fun HH : In 1 (remove 4 B) => H1 (remove_3 HH)).
assert (H42:=fun HH : In 2 (remove 4 B) => H2 (remove_3 HH)).
assert (H43:=fun HH : In 3 (remove 4 B) => H3 (remove_3 HH)).

*****
H43 : forall _ : In (S (S (S O))) (remove (S (S (S (S O)))) B), False
H42 : forall _ : In (S (S O)) (remove (S (S (S (S O)))) B), False
H41 : forall _ : In (S O) (remove (S (S (S (S O)))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S (S O)))) B)) (S O)
H4 : In (S (S (S (S O)))) B
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
sumor (sumor (sumor (sumor (sumor (sumor (sumor (sumor (sumbool (Equal B (add (S O) (add (S (S O)) empty))) (Equal B (add (S O) (add (S (S (S O))) empty)))) (Equal B (add (S O) (add (S (S (S (S O)))) empty)))) (Equal B (add (S O) (add (S (S (S (S (S O))))) empty)))) (Equal B (add (S (S O)) (add (S (S (S O))) empty)))) (Equal B (add (S (S O)) (add (S (S (S (S O)))) empty)))) (Equal B (add (S (S O)) (add (S (S (S (S (S O))))) empty)))) (Equal B (add (S (S (S O))) (add (S (S (S (S O)))) empty)))) (Equal B (add (S (S (S O))) (add (S (S (S (S (S O))))) empty)))) (Equal B (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))
+++++
destruct (In_dec 5 (remove 4 B)) as [H45|H45].
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
assert (H_card_rem:cardinal (remove 4 B)=1).
idtac.
assert (H41:=fun HH : In 1 (remove 4 B) => H1 (remove_3 HH)).
assert (H42:=fun HH : In 2 (remove 4 B) => H2 (remove_3 HH)).
assert (H43:=fun HH : In 3 (remove 4 B) => H3 (remove_3 HH)).
destruct (In_dec 5 (remove 4 B)) as [H45|H45].

*****
H45 : In (S (S (S (S (S O))))) (remove (S (S (S (S O)))) B)
H43 : forall _ : In (S (S (S O))) (remove (S (S (S (S O)))) B), False
H42 : forall _ : In (S (S O)) (remove (S (S (S (S O)))) B), False
H41 : forall _ : In (S O) (remove (S (S (S (S O)))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S (S O)))) B)) (S O)
H4 : In (S (S (S (S O)))) B
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
sumor (sumor (sumor (sumor (sumor (sumor (sumor (sumor (sumbool (Equal B (add (S O) (add (S (S O)) empty))) (Equal B (add (S O) (add (S (S (S O))) empty)))) (Equal B (add (S O) (add (S (S (S (S O)))) empty)))) (Equal B (add (S O) (add (S (S (S (S (S O))))) empty)))) (Equal B (add (S (S O)) (add (S (S (S O))) empty)))) (Equal B (add (S (S O)) (add (S (S (S (S O)))) empty)))) (Equal B (add (S (S O)) (add (S (S (S (S (S O))))) empty)))) (Equal B (add (S (S (S O))) (add (S (S (S (S O)))) empty)))) (Equal B (add (S (S (S O))) (add (S (S (S (S (S O))))) empty)))) (Equal B (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))
+++++
right.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
assert (H_card_rem:cardinal (remove 4 B)=1).
idtac.
assert (H41:=fun HH : In 1 (remove 4 B) => H1 (remove_3 HH)).
assert (H42:=fun HH : In 2 (remove 4 B) => H2 (remove_3 HH)).
assert (H43:=fun HH : In 3 (remove 4 B) => H3 (remove_3 HH)).
destruct (In_dec 5 (remove 4 B)) as [H45|H45].
right.

*****
H45 : In (S (S (S (S (S O))))) (remove (S (S (S (S O)))) B)
H43 : forall _ : In (S (S (S O))) (remove (S (S (S (S O)))) B), False
H42 : forall _ : In (S (S O)) (remove (S (S (S (S O)))) B), False
H41 : forall _ : In (S O) (remove (S (S (S (S O)))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S (S O)))) B)) (S O)
H4 : In (S (S (S (S O)))) B
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
Equal B (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))
+++++
rewrite <- (add_remove H4).
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
assert (H_card_rem:cardinal (remove 4 B)=1).
idtac.
assert (H41:=fun HH : In 1 (remove 4 B) => H1 (remove_3 HH)).
assert (H42:=fun HH : In 2 (remove 4 B) => H2 (remove_3 HH)).
assert (H43:=fun HH : In 3 (remove 4 B) => H3 (remove_3 HH)).
destruct (In_dec 5 (remove 4 B)) as [H45|H45].
right.
rewrite <- (add_remove H4).

*****
H45 : In (S (S (S (S (S O))))) (remove (S (S (S (S O)))) B)
H43 : forall _ : In (S (S (S O))) (remove (S (S (S (S O)))) B), False
H42 : forall _ : In (S (S O)) (remove (S (S (S (S O)))) B), False
H41 : forall _ : In (S O) (remove (S (S (S (S O)))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S (S O)))) B)) (S O)
H4 : In (S (S (S (S O)))) B
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
Equal (add (S (S (S (S O)))) (remove (S (S (S (S O)))) B)) (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))
+++++
rewrite <- (add_remove H45).
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
assert (H_card_rem:cardinal (remove 4 B)=1).
idtac.
assert (H41:=fun HH : In 1 (remove 4 B) => H1 (remove_3 HH)).
assert (H42:=fun HH : In 2 (remove 4 B) => H2 (remove_3 HH)).
assert (H43:=fun HH : In 3 (remove 4 B) => H3 (remove_3 HH)).
destruct (In_dec 5 (remove 4 B)) as [H45|H45].
right.
rewrite <- (add_remove H4).
rewrite <- (add_remove H45).

*****
H45 : In (S (S (S (S (S O))))) (remove (S (S (S (S O)))) B)
H43 : forall _ : In (S (S (S O))) (remove (S (S (S (S O)))) B), False
H42 : forall _ : In (S (S O)) (remove (S (S (S (S O)))) B), False
H41 : forall _ : In (S O) (remove (S (S (S (S O)))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S (S O)))) B)) (S O)
H4 : In (S (S (S (S O)))) B
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
Equal (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) (remove (S (S (S (S (S O))))) (remove (S (S (S (S O)))) B)))) (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))
+++++
generalize (remove_cardinal_1 H45).
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
assert (H_card_rem:cardinal (remove 4 B)=1).
idtac.
assert (H41:=fun HH : In 1 (remove 4 B) => H1 (remove_3 HH)).
assert (H42:=fun HH : In 2 (remove 4 B) => H2 (remove_3 HH)).
assert (H43:=fun HH : In 3 (remove 4 B) => H3 (remove_3 HH)).
destruct (In_dec 5 (remove 4 B)) as [H45|H45].
right.
rewrite <- (add_remove H4).
rewrite <- (add_remove H45).
generalize (remove_cardinal_1 H45).

*****
H45 : In (S (S (S (S (S O))))) (remove (S (S (S (S O)))) B)
H43 : forall _ : In (S (S (S O))) (remove (S (S (S (S O)))) B), False
H42 : forall _ : In (S (S O)) (remove (S (S (S (S O)))) B), False
H41 : forall _ : In (S O) (remove (S (S (S (S O)))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S (S O)))) B)) (S O)
H4 : In (S (S (S (S O)))) B
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
forall _ : Logic.eq (S (cardinal (remove (S (S (S (S (S O))))) (remove (S (S (S (S O)))) B)))) (cardinal (remove (S (S (S (S O)))) B)), Equal (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) (remove (S (S (S (S (S O))))) (remove (S (S (S (S O)))) B)))) (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))
+++++
rewrite H_card_rem.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
assert (H_card_rem:cardinal (remove 4 B)=1).
idtac.
assert (H41:=fun HH : In 1 (remove 4 B) => H1 (remove_3 HH)).
assert (H42:=fun HH : In 2 (remove 4 B) => H2 (remove_3 HH)).
assert (H43:=fun HH : In 3 (remove 4 B) => H3 (remove_3 HH)).
destruct (In_dec 5 (remove 4 B)) as [H45|H45].
right.
rewrite <- (add_remove H4).
rewrite <- (add_remove H45).
generalize (remove_cardinal_1 H45).
rewrite H_card_rem.

*****
H45 : In (S (S (S (S (S O))))) (remove (S (S (S (S O)))) B)
H43 : forall _ : In (S (S (S O))) (remove (S (S (S (S O)))) B), False
H42 : forall _ : In (S (S O)) (remove (S (S (S (S O)))) B), False
H41 : forall _ : In (S O) (remove (S (S (S (S O)))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S (S O)))) B)) (S O)
H4 : In (S (S (S (S O)))) B
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
forall _ : Logic.eq (S (cardinal (remove (S (S (S (S (S O))))) (remove (S (S (S (S O)))) B)))) (S O), Equal (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) (remove (S (S (S (S (S O))))) (remove (S (S (S (S O)))) B)))) (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))
+++++
intro H_eq2.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
assert (H_card_rem:cardinal (remove 4 B)=1).
idtac.
assert (H41:=fun HH : In 1 (remove 4 B) => H1 (remove_3 HH)).
assert (H42:=fun HH : In 2 (remove 4 B) => H2 (remove_3 HH)).
assert (H43:=fun HH : In 3 (remove 4 B) => H3 (remove_3 HH)).
destruct (In_dec 5 (remove 4 B)) as [H45|H45].
right.
rewrite <- (add_remove H4).
rewrite <- (add_remove H45).
generalize (remove_cardinal_1 H45).
rewrite H_card_rem.
intro H_eq2.

*****
H_eq2 : Logic.eq\n (S\n (cardinal\n (remove (S (S (S (S (S O))))) (remove (S (S (S (S O)))) B))))\n (S O)
H45 : In (S (S (S (S (S O))))) (remove (S (S (S (S O)))) B)
H43 : forall _ : In (S (S (S O))) (remove (S (S (S (S O)))) B), False
H42 : forall _ : In (S (S O)) (remove (S (S (S (S O)))) B), False
H41 : forall _ : In (S O) (remove (S (S (S (S O)))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S (S O)))) B)) (S O)
H4 : In (S (S (S (S O)))) B
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
Equal (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) (remove (S (S (S (S (S O))))) (remove (S (S (S (S O)))) B)))) (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))
+++++
rewrite (empty_is_empty_1 (cardinal_inv_1 (eq_add_S _ _ H_eq2))).
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
assert (H_card_rem:cardinal (remove 4 B)=1).
idtac.
assert (H41:=fun HH : In 1 (remove 4 B) => H1 (remove_3 HH)).
assert (H42:=fun HH : In 2 (remove 4 B) => H2 (remove_3 HH)).
assert (H43:=fun HH : In 3 (remove 4 B) => H3 (remove_3 HH)).
destruct (In_dec 5 (remove 4 B)) as [H45|H45].
right.
rewrite <- (add_remove H4).
rewrite <- (add_remove H45).
generalize (remove_cardinal_1 H45).
rewrite H_card_rem.
intro H_eq2.
rewrite (empty_is_empty_1 (cardinal_inv_1 (eq_add_S _ _ H_eq2))).

*****
H_eq2 : Logic.eq\n (S\n (cardinal\n (remove (S (S (S (S (S O))))) (remove (S (S (S (S O)))) B))))\n (S O)
H45 : In (S (S (S (S (S O))))) (remove (S (S (S (S O)))) B)
H43 : forall _ : In (S (S (S O))) (remove (S (S (S (S O)))) B), False
H42 : forall _ : In (S (S O)) (remove (S (S (S (S O)))) B), False
H41 : forall _ : In (S O) (remove (S (S (S (S O)))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S (S O)))) B)) (S O)
H4 : In (S (S (S (S O)))) B
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
Equal (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)) (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))
+++++
reflexivity.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
assert (H_card_rem:cardinal (remove 4 B)=1).
idtac.
assert (H41:=fun HH : In 1 (remove 4 B) => H1 (remove_3 HH)).
assert (H42:=fun HH : In 2 (remove 4 B) => H2 (remove_3 HH)).
assert (H43:=fun HH : In 3 (remove 4 B) => H3 (remove_3 HH)).
destruct (In_dec 5 (remove 4 B)) as [H45|H45].

*****
H45 : not (In (S (S (S (S (S O))))) (remove (S (S (S (S O)))) B))
H43 : forall _ : In (S (S (S O))) (remove (S (S (S (S O)))) B), False
H42 : forall _ : In (S (S O)) (remove (S (S (S (S O)))) B), False
H41 : forall _ : In (S O) (remove (S (S (S (S O)))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S (S O)))) B)) (S O)
H4 : In (S (S (S (S O)))) B
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
sumor (sumor (sumor (sumor (sumor (sumor (sumor (sumor (sumbool (Equal B (add (S O) (add (S (S O)) empty))) (Equal B (add (S O) (add (S (S (S O))) empty)))) (Equal B (add (S O) (add (S (S (S (S O)))) empty)))) (Equal B (add (S O) (add (S (S (S (S (S O))))) empty)))) (Equal B (add (S (S O)) (add (S (S (S O))) empty)))) (Equal B (add (S (S O)) (add (S (S (S (S O)))) empty)))) (Equal B (add (S (S O)) (add (S (S (S (S (S O))))) empty)))) (Equal B (add (S (S (S O))) (add (S (S (S (S O)))) empty)))) (Equal B (add (S (S (S O))) (add (S (S (S (S (S O))))) empty)))) (Equal B (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))
+++++
apply False_rec.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
assert (H_card_rem:cardinal (remove 4 B)=1).
idtac.
assert (H41:=fun HH : In 1 (remove 4 B) => H1 (remove_3 HH)).
assert (H42:=fun HH : In 2 (remove 4 B) => H2 (remove_3 HH)).
assert (H43:=fun HH : In 3 (remove 4 B) => H3 (remove_3 HH)).
destruct (In_dec 5 (remove 4 B)) as [H45|H45].
apply False_rec.

*****
H45 : not (In (S (S (S (S (S O))))) (remove (S (S (S (S O)))) B))
H43 : forall _ : In (S (S (S O))) (remove (S (S (S (S O)))) B), False
H42 : forall _ : In (S (S O)) (remove (S (S (S (S O)))) B), False
H41 : forall _ : In (S O) (remove (S (S (S (S O)))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S (S O)))) B)) (S O)
H4 : In (S (S (S (S O)))) B
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
assert (H44:=(@remove_1 B _ _ (refl_equal 4))).
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
assert (H_card_rem:cardinal (remove 4 B)=1).
idtac.
assert (H41:=fun HH : In 1 (remove 4 B) => H1 (remove_3 HH)).
assert (H42:=fun HH : In 2 (remove 4 B) => H2 (remove_3 HH)).
assert (H43:=fun HH : In 3 (remove 4 B) => H3 (remove_3 HH)).
destruct (In_dec 5 (remove 4 B)) as [H45|H45].
apply False_rec.
assert (H44:=(@remove_1 B _ _ (refl_equal 4))).

*****
H44 : not (In (S (S (S (S O)))) (remove (S (S (S (S O)))) B))
H45 : not (In (S (S (S (S (S O))))) (remove (S (S (S (S O)))) B))
H43 : forall _ : In (S (S (S O))) (remove (S (S (S (S O)))) B), False
H42 : forall _ : In (S (S O)) (remove (S (S (S (S O)))) B), False
H41 : forall _ : In (S O) (remove (S (S (S (S O)))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S (S O)))) B)) (S O)
H4 : In (S (S (S (S O)))) B
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
assert (H_card_rem:cardinal (remove 4 B)=1).
idtac.
assert (H41:=fun HH : In 1 (remove 4 B) => H1 (remove_3 HH)).
assert (H42:=fun HH : In 2 (remove 4 B) => H2 (remove_3 HH)).
assert (H43:=fun HH : In 3 (remove 4 B) => H3 (remove_3 HH)).
destruct (In_dec 5 (remove 4 B)) as [H45|H45].
apply False_rec.
assert (H44:=(@remove_1 B _ _ (refl_equal 4))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].

*****
Hb : In b (remove (S (S (S (S O)))) B)
b : elt
H44 : not (In (S (S (S (S O)))) (remove (S (S (S (S O)))) B))
H45 : not (In (S (S (S (S (S O))))) (remove (S (S (S (S O)))) B))
H43 : forall _ : In (S (S (S O))) (remove (S (S (S (S O)))) B), False
H42 : forall _ : In (S (S O)) (remove (S (S (S (S O)))) B), False
H41 : forall _ : In (S O) (remove (S (S (S (S O)))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S (S O)))) B)) (S O)
H4 : In (S (S (S (S O)))) B
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
assert (H_card_rem:cardinal (remove 4 B)=1).
idtac.
assert (H41:=fun HH : In 1 (remove 4 B) => H1 (remove_3 HH)).
assert (H42:=fun HH : In 2 (remove 4 B) => H2 (remove_3 HH)).
assert (H43:=fun HH : In 3 (remove 4 B) => H3 (remove_3 HH)).
destruct (In_dec 5 (remove 4 B)) as [H45|H45].
apply False_rec.
assert (H44:=(@remove_1 B _ _ (refl_equal 4))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].

*****
Hb1 : Logic.eq b (S O)
Hb : In b (remove (S (S (S (S O)))) B)
b : elt
H44 : not (In (S (S (S (S O)))) (remove (S (S (S (S O)))) B))
H45 : not (In (S (S (S (S (S O))))) (remove (S (S (S (S O)))) B))
H43 : forall _ : In (S (S (S O))) (remove (S (S (S (S O)))) B), False
H42 : forall _ : In (S (S O)) (remove (S (S (S (S O)))) B), False
H41 : forall _ : In (S O) (remove (S (S (S (S O)))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S (S O)))) B)) (S O)
H4 : In (S (S (S (S O)))) B
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
apply H41.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
assert (H_card_rem:cardinal (remove 4 B)=1).
idtac.
assert (H41:=fun HH : In 1 (remove 4 B) => H1 (remove_3 HH)).
assert (H42:=fun HH : In 2 (remove 4 B) => H2 (remove_3 HH)).
assert (H43:=fun HH : In 3 (remove 4 B) => H3 (remove_3 HH)).
destruct (In_dec 5 (remove 4 B)) as [H45|H45].
apply False_rec.
assert (H44:=(@remove_1 B _ _ (refl_equal 4))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
apply H41.

*****
Hb1 : Logic.eq b (S O)
Hb : In b (remove (S (S (S (S O)))) B)
b : elt
H44 : not (In (S (S (S (S O)))) (remove (S (S (S (S O)))) B))
H45 : not (In (S (S (S (S (S O))))) (remove (S (S (S (S O)))) B))
H43 : forall _ : In (S (S (S O))) (remove (S (S (S (S O)))) B), False
H42 : forall _ : In (S (S O)) (remove (S (S (S (S O)))) B), False
H41 : forall _ : In (S O) (remove (S (S (S (S O)))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S (S O)))) B)) (S O)
H4 : In (S (S (S (S O)))) B
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
In (S O) (remove (S (S (S (S O)))) B)
+++++
rewrite Hb1 in Hb.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
assert (H_card_rem:cardinal (remove 4 B)=1).
idtac.
assert (H41:=fun HH : In 1 (remove 4 B) => H1 (remove_3 HH)).
assert (H42:=fun HH : In 2 (remove 4 B) => H2 (remove_3 HH)).
assert (H43:=fun HH : In 3 (remove 4 B) => H3 (remove_3 HH)).
destruct (In_dec 5 (remove 4 B)) as [H45|H45].
apply False_rec.
assert (H44:=(@remove_1 B _ _ (refl_equal 4))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
apply H41.
rewrite Hb1 in Hb.

*****
Hb1 : Logic.eq b (S O)
Hb : In (S O) (remove (S (S (S (S O)))) B)
b : elt
H44 : not (In (S (S (S (S O)))) (remove (S (S (S (S O)))) B))
H45 : not (In (S (S (S (S (S O))))) (remove (S (S (S (S O)))) B))
H43 : forall _ : In (S (S (S O))) (remove (S (S (S (S O)))) B), False
H42 : forall _ : In (S (S O)) (remove (S (S (S (S O)))) B), False
H41 : forall _ : In (S O) (remove (S (S (S (S O)))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S (S O)))) B)) (S O)
H4 : In (S (S (S (S O)))) B
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
In (S O) (remove (S (S (S (S O)))) B)
+++++
assumption.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
assert (H_card_rem:cardinal (remove 4 B)=1).
idtac.
assert (H41:=fun HH : In 1 (remove 4 B) => H1 (remove_3 HH)).
assert (H42:=fun HH : In 2 (remove 4 B) => H2 (remove_3 HH)).
assert (H43:=fun HH : In 3 (remove 4 B) => H3 (remove_3 HH)).
destruct (In_dec 5 (remove 4 B)) as [H45|H45].
apply False_rec.
assert (H44:=(@remove_1 B _ _ (refl_equal 4))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].

*****
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S (S (S (S O)))) B)
b : elt
H44 : not (In (S (S (S (S O)))) (remove (S (S (S (S O)))) B))
H45 : not (In (S (S (S (S (S O))))) (remove (S (S (S (S O)))) B))
H43 : forall _ : In (S (S (S O))) (remove (S (S (S (S O)))) B), False
H42 : forall _ : In (S (S O)) (remove (S (S (S (S O)))) B), False
H41 : forall _ : In (S O) (remove (S (S (S (S O)))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S (S O)))) B)) (S O)
H4 : In (S (S (S (S O)))) B
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
assert (H_card_rem:cardinal (remove 4 B)=1).
idtac.
assert (H41:=fun HH : In 1 (remove 4 B) => H1 (remove_3 HH)).
assert (H42:=fun HH : In 2 (remove 4 B) => H2 (remove_3 HH)).
assert (H43:=fun HH : In 3 (remove 4 B) => H3 (remove_3 HH)).
destruct (In_dec 5 (remove 4 B)) as [H45|H45].
apply False_rec.
assert (H44:=(@remove_1 B _ _ (refl_equal 4))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].

*****
Hb2 : Logic.eq b (S (S O))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S (S (S (S O)))) B)
b : elt
H44 : not (In (S (S (S (S O)))) (remove (S (S (S (S O)))) B))
H45 : not (In (S (S (S (S (S O))))) (remove (S (S (S (S O)))) B))
H43 : forall _ : In (S (S (S O))) (remove (S (S (S (S O)))) B), False
H42 : forall _ : In (S (S O)) (remove (S (S (S (S O)))) B), False
H41 : forall _ : In (S O) (remove (S (S (S (S O)))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S (S O)))) B)) (S O)
H4 : In (S (S (S (S O)))) B
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
apply H42.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
assert (H_card_rem:cardinal (remove 4 B)=1).
idtac.
assert (H41:=fun HH : In 1 (remove 4 B) => H1 (remove_3 HH)).
assert (H42:=fun HH : In 2 (remove 4 B) => H2 (remove_3 HH)).
assert (H43:=fun HH : In 3 (remove 4 B) => H3 (remove_3 HH)).
destruct (In_dec 5 (remove 4 B)) as [H45|H45].
apply False_rec.
assert (H44:=(@remove_1 B _ _ (refl_equal 4))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
apply H42.

*****
Hb2 : Logic.eq b (S (S O))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S (S (S (S O)))) B)
b : elt
H44 : not (In (S (S (S (S O)))) (remove (S (S (S (S O)))) B))
H45 : not (In (S (S (S (S (S O))))) (remove (S (S (S (S O)))) B))
H43 : forall _ : In (S (S (S O))) (remove (S (S (S (S O)))) B), False
H42 : forall _ : In (S (S O)) (remove (S (S (S (S O)))) B), False
H41 : forall _ : In (S O) (remove (S (S (S (S O)))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S (S O)))) B)) (S O)
H4 : In (S (S (S (S O)))) B
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
In (S (S O)) (remove (S (S (S (S O)))) B)
+++++
rewrite Hb2 in Hb.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
assert (H_card_rem:cardinal (remove 4 B)=1).
idtac.
assert (H41:=fun HH : In 1 (remove 4 B) => H1 (remove_3 HH)).
assert (H42:=fun HH : In 2 (remove 4 B) => H2 (remove_3 HH)).
assert (H43:=fun HH : In 3 (remove 4 B) => H3 (remove_3 HH)).
destruct (In_dec 5 (remove 4 B)) as [H45|H45].
apply False_rec.
assert (H44:=(@remove_1 B _ _ (refl_equal 4))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
apply H42.
rewrite Hb2 in Hb.

*****
Hb2 : Logic.eq b (S (S O))
Hb1 : not (Logic.eq b (S O))
Hb : In (S (S O)) (remove (S (S (S (S O)))) B)
b : elt
H44 : not (In (S (S (S (S O)))) (remove (S (S (S (S O)))) B))
H45 : not (In (S (S (S (S (S O))))) (remove (S (S (S (S O)))) B))
H43 : forall _ : In (S (S (S O))) (remove (S (S (S (S O)))) B), False
H42 : forall _ : In (S (S O)) (remove (S (S (S (S O)))) B), False
H41 : forall _ : In (S O) (remove (S (S (S (S O)))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S (S O)))) B)) (S O)
H4 : In (S (S (S (S O)))) B
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
In (S (S O)) (remove (S (S (S (S O)))) B)
+++++
assumption.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
assert (H_card_rem:cardinal (remove 4 B)=1).
idtac.
assert (H41:=fun HH : In 1 (remove 4 B) => H1 (remove_3 HH)).
assert (H42:=fun HH : In 2 (remove 4 B) => H2 (remove_3 HH)).
assert (H43:=fun HH : In 3 (remove 4 B) => H3 (remove_3 HH)).
destruct (In_dec 5 (remove 4 B)) as [H45|H45].
apply False_rec.
assert (H44:=(@remove_1 B _ _ (refl_equal 4))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].

*****
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S (S (S (S O)))) B)
b : elt
H44 : not (In (S (S (S (S O)))) (remove (S (S (S (S O)))) B))
H45 : not (In (S (S (S (S (S O))))) (remove (S (S (S (S O)))) B))
H43 : forall _ : In (S (S (S O))) (remove (S (S (S (S O)))) B), False
H42 : forall _ : In (S (S O)) (remove (S (S (S (S O)))) B), False
H41 : forall _ : In (S O) (remove (S (S (S (S O)))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S (S O)))) B)) (S O)
H4 : In (S (S (S (S O)))) B
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
assert (H_card_rem:cardinal (remove 4 B)=1).
idtac.
assert (H41:=fun HH : In 1 (remove 4 B) => H1 (remove_3 HH)).
assert (H42:=fun HH : In 2 (remove 4 B) => H2 (remove_3 HH)).
assert (H43:=fun HH : In 3 (remove 4 B) => H3 (remove_3 HH)).
destruct (In_dec 5 (remove 4 B)) as [H45|H45].
apply False_rec.
assert (H44:=(@remove_1 B _ _ (refl_equal 4))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].

*****
Hb3 : Logic.eq b (S (S (S O)))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S (S (S (S O)))) B)
b : elt
H44 : not (In (S (S (S (S O)))) (remove (S (S (S (S O)))) B))
H45 : not (In (S (S (S (S (S O))))) (remove (S (S (S (S O)))) B))
H43 : forall _ : In (S (S (S O))) (remove (S (S (S (S O)))) B), False
H42 : forall _ : In (S (S O)) (remove (S (S (S (S O)))) B), False
H41 : forall _ : In (S O) (remove (S (S (S (S O)))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S (S O)))) B)) (S O)
H4 : In (S (S (S (S O)))) B
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
apply H43.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
assert (H_card_rem:cardinal (remove 4 B)=1).
idtac.
assert (H41:=fun HH : In 1 (remove 4 B) => H1 (remove_3 HH)).
assert (H42:=fun HH : In 2 (remove 4 B) => H2 (remove_3 HH)).
assert (H43:=fun HH : In 3 (remove 4 B) => H3 (remove_3 HH)).
destruct (In_dec 5 (remove 4 B)) as [H45|H45].
apply False_rec.
assert (H44:=(@remove_1 B _ _ (refl_equal 4))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
apply H43.

*****
Hb3 : Logic.eq b (S (S (S O)))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S (S (S (S O)))) B)
b : elt
H44 : not (In (S (S (S (S O)))) (remove (S (S (S (S O)))) B))
H45 : not (In (S (S (S (S (S O))))) (remove (S (S (S (S O)))) B))
H43 : forall _ : In (S (S (S O))) (remove (S (S (S (S O)))) B), False
H42 : forall _ : In (S (S O)) (remove (S (S (S (S O)))) B), False
H41 : forall _ : In (S O) (remove (S (S (S (S O)))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S (S O)))) B)) (S O)
H4 : In (S (S (S (S O)))) B
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
In (S (S (S O))) (remove (S (S (S (S O)))) B)
+++++
rewrite Hb3 in Hb.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
assert (H_card_rem:cardinal (remove 4 B)=1).
idtac.
assert (H41:=fun HH : In 1 (remove 4 B) => H1 (remove_3 HH)).
assert (H42:=fun HH : In 2 (remove 4 B) => H2 (remove_3 HH)).
assert (H43:=fun HH : In 3 (remove 4 B) => H3 (remove_3 HH)).
destruct (In_dec 5 (remove 4 B)) as [H45|H45].
apply False_rec.
assert (H44:=(@remove_1 B _ _ (refl_equal 4))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
apply H43.
rewrite Hb3 in Hb.

*****
Hb3 : Logic.eq b (S (S (S O)))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In (S (S (S O))) (remove (S (S (S (S O)))) B)
b : elt
H44 : not (In (S (S (S (S O)))) (remove (S (S (S (S O)))) B))
H45 : not (In (S (S (S (S (S O))))) (remove (S (S (S (S O)))) B))
H43 : forall _ : In (S (S (S O))) (remove (S (S (S (S O)))) B), False
H42 : forall _ : In (S (S O)) (remove (S (S (S (S O)))) B), False
H41 : forall _ : In (S O) (remove (S (S (S (S O)))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S (S O)))) B)) (S O)
H4 : In (S (S (S (S O)))) B
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
In (S (S (S O))) (remove (S (S (S (S O)))) B)
+++++
assumption.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
assert (H_card_rem:cardinal (remove 4 B)=1).
idtac.
assert (H41:=fun HH : In 1 (remove 4 B) => H1 (remove_3 HH)).
assert (H42:=fun HH : In 2 (remove 4 B) => H2 (remove_3 HH)).
assert (H43:=fun HH : In 3 (remove 4 B) => H3 (remove_3 HH)).
destruct (In_dec 5 (remove 4 B)) as [H45|H45].
apply False_rec.
assert (H44:=(@remove_1 B _ _ (refl_equal 4))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].

*****
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S (S (S (S O)))) B)
b : elt
H44 : not (In (S (S (S (S O)))) (remove (S (S (S (S O)))) B))
H45 : not (In (S (S (S (S (S O))))) (remove (S (S (S (S O)))) B))
H43 : forall _ : In (S (S (S O))) (remove (S (S (S (S O)))) B), False
H42 : forall _ : In (S (S O)) (remove (S (S (S (S O)))) B), False
H41 : forall _ : In (S O) (remove (S (S (S (S O)))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S (S O)))) B)) (S O)
H4 : In (S (S (S (S O)))) B
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
assert (H_card_rem:cardinal (remove 4 B)=1).
idtac.
assert (H41:=fun HH : In 1 (remove 4 B) => H1 (remove_3 HH)).
assert (H42:=fun HH : In 2 (remove 4 B) => H2 (remove_3 HH)).
assert (H43:=fun HH : In 3 (remove 4 B) => H3 (remove_3 HH)).
destruct (In_dec 5 (remove 4 B)) as [H45|H45].
apply False_rec.
assert (H44:=(@remove_1 B _ _ (refl_equal 4))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].

*****
Hb4 : Logic.eq b (S (S (S (S O))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S (S (S (S O)))) B)
b : elt
H44 : not (In (S (S (S (S O)))) (remove (S (S (S (S O)))) B))
H45 : not (In (S (S (S (S (S O))))) (remove (S (S (S (S O)))) B))
H43 : forall _ : In (S (S (S O))) (remove (S (S (S (S O)))) B), False
H42 : forall _ : In (S (S O)) (remove (S (S (S (S O)))) B), False
H41 : forall _ : In (S O) (remove (S (S (S (S O)))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S (S O)))) B)) (S O)
H4 : In (S (S (S (S O)))) B
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
apply H44.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
assert (H_card_rem:cardinal (remove 4 B)=1).
idtac.
assert (H41:=fun HH : In 1 (remove 4 B) => H1 (remove_3 HH)).
assert (H42:=fun HH : In 2 (remove 4 B) => H2 (remove_3 HH)).
assert (H43:=fun HH : In 3 (remove 4 B) => H3 (remove_3 HH)).
destruct (In_dec 5 (remove 4 B)) as [H45|H45].
apply False_rec.
assert (H44:=(@remove_1 B _ _ (refl_equal 4))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
apply H44.

*****
Hb4 : Logic.eq b (S (S (S (S O))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S (S (S (S O)))) B)
b : elt
H44 : not (In (S (S (S (S O)))) (remove (S (S (S (S O)))) B))
H45 : not (In (S (S (S (S (S O))))) (remove (S (S (S (S O)))) B))
H43 : forall _ : In (S (S (S O))) (remove (S (S (S (S O)))) B), False
H42 : forall _ : In (S (S O)) (remove (S (S (S (S O)))) B), False
H41 : forall _ : In (S O) (remove (S (S (S (S O)))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S (S O)))) B)) (S O)
H4 : In (S (S (S (S O)))) B
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
In (S (S (S (S O)))) (remove (S (S (S (S O)))) B)
+++++
rewrite Hb4 in Hb.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
assert (H_card_rem:cardinal (remove 4 B)=1).
idtac.
assert (H41:=fun HH : In 1 (remove 4 B) => H1 (remove_3 HH)).
assert (H42:=fun HH : In 2 (remove 4 B) => H2 (remove_3 HH)).
assert (H43:=fun HH : In 3 (remove 4 B) => H3 (remove_3 HH)).
destruct (In_dec 5 (remove 4 B)) as [H45|H45].
apply False_rec.
assert (H44:=(@remove_1 B _ _ (refl_equal 4))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
apply H44.
rewrite Hb4 in Hb.

*****
Hb4 : Logic.eq b (S (S (S (S O))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In (S (S (S (S O)))) (remove (S (S (S (S O)))) B)
b : elt
H44 : not (In (S (S (S (S O)))) (remove (S (S (S (S O)))) B))
H45 : not (In (S (S (S (S (S O))))) (remove (S (S (S (S O)))) B))
H43 : forall _ : In (S (S (S O))) (remove (S (S (S (S O)))) B), False
H42 : forall _ : In (S (S O)) (remove (S (S (S (S O)))) B), False
H41 : forall _ : In (S O) (remove (S (S (S (S O)))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S (S O)))) B)) (S O)
H4 : In (S (S (S (S O)))) B
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
In (S (S (S (S O)))) (remove (S (S (S (S O)))) B)
+++++
assumption.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
assert (H_card_rem:cardinal (remove 4 B)=1).
idtac.
assert (H41:=fun HH : In 1 (remove 4 B) => H1 (remove_3 HH)).
assert (H42:=fun HH : In 2 (remove 4 B) => H2 (remove_3 HH)).
assert (H43:=fun HH : In 3 (remove 4 B) => H3 (remove_3 HH)).
destruct (In_dec 5 (remove 4 B)) as [H45|H45].
apply False_rec.
assert (H44:=(@remove_1 B _ _ (refl_equal 4))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].

*****
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S (S (S (S O)))) B)
b : elt
H44 : not (In (S (S (S (S O)))) (remove (S (S (S (S O)))) B))
H45 : not (In (S (S (S (S (S O))))) (remove (S (S (S (S O)))) B))
H43 : forall _ : In (S (S (S O))) (remove (S (S (S (S O)))) B), False
H42 : forall _ : In (S (S O)) (remove (S (S (S (S O)))) B), False
H41 : forall _ : In (S O) (remove (S (S (S (S O)))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S (S O)))) B)) (S O)
H4 : In (S (S (S (S O)))) B
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
assert (H_card_rem:cardinal (remove 4 B)=1).
idtac.
assert (H41:=fun HH : In 1 (remove 4 B) => H1 (remove_3 HH)).
assert (H42:=fun HH : In 2 (remove 4 B) => H2 (remove_3 HH)).
assert (H43:=fun HH : In 3 (remove 4 B) => H3 (remove_3 HH)).
destruct (In_dec 5 (remove 4 B)) as [H45|H45].
apply False_rec.
assert (H44:=(@remove_1 B _ _ (refl_equal 4))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].

*****
Hb5 : Logic.eq b (S (S (S (S (S O)))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S (S (S (S O)))) B)
b : elt
H44 : not (In (S (S (S (S O)))) (remove (S (S (S (S O)))) B))
H45 : not (In (S (S (S (S (S O))))) (remove (S (S (S (S O)))) B))
H43 : forall _ : In (S (S (S O))) (remove (S (S (S (S O)))) B), False
H42 : forall _ : In (S (S O)) (remove (S (S (S (S O)))) B), False
H41 : forall _ : In (S O) (remove (S (S (S (S O)))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S (S O)))) B)) (S O)
H4 : In (S (S (S (S O)))) B
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
apply H45.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
assert (H_card_rem:cardinal (remove 4 B)=1).
idtac.
assert (H41:=fun HH : In 1 (remove 4 B) => H1 (remove_3 HH)).
assert (H42:=fun HH : In 2 (remove 4 B) => H2 (remove_3 HH)).
assert (H43:=fun HH : In 3 (remove 4 B) => H3 (remove_3 HH)).
destruct (In_dec 5 (remove 4 B)) as [H45|H45].
apply False_rec.
assert (H44:=(@remove_1 B _ _ (refl_equal 4))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].
apply H45.

*****
Hb5 : Logic.eq b (S (S (S (S (S O)))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S (S (S (S O)))) B)
b : elt
H44 : not (In (S (S (S (S O)))) (remove (S (S (S (S O)))) B))
H45 : not (In (S (S (S (S (S O))))) (remove (S (S (S (S O)))) B))
H43 : forall _ : In (S (S (S O))) (remove (S (S (S (S O)))) B), False
H42 : forall _ : In (S (S O)) (remove (S (S (S (S O)))) B), False
H41 : forall _ : In (S O) (remove (S (S (S (S O)))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S (S O)))) B)) (S O)
H4 : In (S (S (S (S O)))) B
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
In (S (S (S (S (S O))))) (remove (S (S (S (S O)))) B)
+++++
rewrite <- Hb5.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
assert (H_card_rem:cardinal (remove 4 B)=1).
idtac.
assert (H41:=fun HH : In 1 (remove 4 B) => H1 (remove_3 HH)).
assert (H42:=fun HH : In 2 (remove 4 B) => H2 (remove_3 HH)).
assert (H43:=fun HH : In 3 (remove 4 B) => H3 (remove_3 HH)).
destruct (In_dec 5 (remove 4 B)) as [H45|H45].
apply False_rec.
assert (H44:=(@remove_1 B _ _ (refl_equal 4))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].
apply H45.
rewrite <- Hb5.

*****
Hb5 : Logic.eq b (S (S (S (S (S O)))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S (S (S (S O)))) B)
b : elt
H44 : not (In (S (S (S (S O)))) (remove (S (S (S (S O)))) B))
H45 : not (In (S (S (S (S (S O))))) (remove (S (S (S (S O)))) B))
H43 : forall _ : In (S (S (S O))) (remove (S (S (S (S O)))) B), False
H42 : forall _ : In (S (S O)) (remove (S (S (S (S O)))) B), False
H41 : forall _ : In (S O) (remove (S (S (S (S O)))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S (S O)))) B)) (S O)
H4 : In (S (S (S (S O)))) B
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
In b (remove (S (S (S (S O)))) B)
+++++
assumption.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
assert (H_card_rem:cardinal (remove 4 B)=1).
idtac.
assert (H41:=fun HH : In 1 (remove 4 B) => H1 (remove_3 HH)).
assert (H42:=fun HH : In 2 (remove 4 B) => H2 (remove_3 HH)).
assert (H43:=fun HH : In 3 (remove 4 B) => H3 (remove_3 HH)).
destruct (In_dec 5 (remove 4 B)) as [H45|H45].
apply False_rec.
assert (H44:=(@remove_1 B _ _ (refl_equal 4))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].

*****
Hb5 : not (Logic.eq b (S (S (S (S (S O))))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S (S (S (S O)))) B)
b : elt
H44 : not (In (S (S (S (S O)))) (remove (S (S (S (S O)))) B))
H45 : not (In (S (S (S (S (S O))))) (remove (S (S (S (S O)))) B))
H43 : forall _ : In (S (S (S O))) (remove (S (S (S (S O)))) B), False
H42 : forall _ : In (S (S O)) (remove (S (S (S (S O)))) B), False
H41 : forall _ : In (S O) (remove (S (S (S (S O)))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S (S O)))) B)) (S O)
H4 : In (S (S (S (S O)))) B
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
assert (H_sub':=@subset_remove_3 _ _ 4 H_sub).
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
assert (H_card_rem:cardinal (remove 4 B)=1).
idtac.
assert (H41:=fun HH : In 1 (remove 4 B) => H1 (remove_3 HH)).
assert (H42:=fun HH : In 2 (remove 4 B) => H2 (remove_3 HH)).
assert (H43:=fun HH : In 3 (remove 4 B) => H3 (remove_3 HH)).
destruct (In_dec 5 (remove 4 B)) as [H45|H45].
apply False_rec.
assert (H44:=(@remove_1 B _ _ (refl_equal 4))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].
assert (H_sub':=@subset_remove_3 _ _ 4 H_sub).

*****
H_sub' : Subset (remove (S (S (S (S O)))) B) town_2
Hb5 : not (Logic.eq b (S (S (S (S (S O))))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S (S (S (S O)))) B)
b : elt
H44 : not (In (S (S (S (S O)))) (remove (S (S (S (S O)))) B))
H45 : not (In (S (S (S (S (S O))))) (remove (S (S (S (S O)))) B))
H43 : forall _ : In (S (S (S O))) (remove (S (S (S (S O)))) B), False
H42 : forall _ : In (S (S O)) (remove (S (S (S (S O)))) B), False
H41 : forall _ : In (S O) (remove (S (S (S (S O)))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S (S O)))) B)) (S O)
H4 : In (S (S (S (S O)))) B
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
assert (Hb_town:=H_sub' _ Hb).
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
assert (H_card_rem:cardinal (remove 4 B)=1).
idtac.
assert (H41:=fun HH : In 1 (remove 4 B) => H1 (remove_3 HH)).
assert (H42:=fun HH : In 2 (remove 4 B) => H2 (remove_3 HH)).
assert (H43:=fun HH : In 3 (remove 4 B) => H3 (remove_3 HH)).
destruct (In_dec 5 (remove 4 B)) as [H45|H45].
apply False_rec.
assert (H44:=(@remove_1 B _ _ (refl_equal 4))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].
assert (H_sub':=@subset_remove_3 _ _ 4 H_sub).
assert (Hb_town:=H_sub' _ Hb).

*****
Hb_town : In b town_2
H_sub' : Subset (remove (S (S (S (S O)))) B) town_2
Hb5 : not (Logic.eq b (S (S (S (S (S O))))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S (S (S (S O)))) B)
b : elt
H44 : not (In (S (S (S (S O)))) (remove (S (S (S (S O)))) B))
H45 : not (In (S (S (S (S (S O))))) (remove (S (S (S (S O)))) B))
H43 : forall _ : In (S (S (S O))) (remove (S (S (S (S O)))) B), False
H42 : forall _ : In (S (S O)) (remove (S (S (S (S O)))) B), False
H41 : forall _ : In (S O) (remove (S (S (S (S O)))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S (S O)))) B)) (S O)
H4 : In (S (S (S (S O)))) B
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
unfold town_2 in Hb_town.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
assert (H_card_rem:cardinal (remove 4 B)=1).
idtac.
assert (H41:=fun HH : In 1 (remove 4 B) => H1 (remove_3 HH)).
assert (H42:=fun HH : In 2 (remove 4 B) => H2 (remove_3 HH)).
assert (H43:=fun HH : In 3 (remove 4 B) => H3 (remove_3 HH)).
destruct (In_dec 5 (remove 4 B)) as [H45|H45].
apply False_rec.
assert (H44:=(@remove_1 B _ _ (refl_equal 4))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].
assert (H_sub':=@subset_remove_3 _ _ 4 H_sub).
assert (Hb_town:=H_sub' _ Hb).
unfold town_2 in Hb_town.

*****
Hb_town : In b\n (add (S O)\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))))
H_sub' : Subset (remove (S (S (S (S O)))) B) town_2
Hb5 : not (Logic.eq b (S (S (S (S (S O))))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S (S (S (S O)))) B)
b : elt
H44 : not (In (S (S (S (S O)))) (remove (S (S (S (S O)))) B))
H45 : not (In (S (S (S (S (S O))))) (remove (S (S (S (S O)))) B))
H43 : forall _ : In (S (S (S O))) (remove (S (S (S (S O)))) B), False
H42 : forall _ : In (S (S O)) (remove (S (S (S (S O)))) B), False
H41 : forall _ : In (S O) (remove (S (S (S (S O)))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S (S O)))) B)) (S O)
H4 : In (S (S (S (S O)))) B
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
destruct (proj1 (FM.add_iff _ _ b) Hb_town) as [Hb1_town|Hb1_town].
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
assert (H_card_rem:cardinal (remove 4 B)=1).
idtac.
assert (H41:=fun HH : In 1 (remove 4 B) => H1 (remove_3 HH)).
assert (H42:=fun HH : In 2 (remove 4 B) => H2 (remove_3 HH)).
assert (H43:=fun HH : In 3 (remove 4 B) => H3 (remove_3 HH)).
destruct (In_dec 5 (remove 4 B)) as [H45|H45].
apply False_rec.
assert (H44:=(@remove_1 B _ _ (refl_equal 4))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].
assert (H_sub':=@subset_remove_3 _ _ 4 H_sub).
assert (Hb_town:=H_sub' _ Hb).
unfold town_2 in Hb_town.
destruct (proj1 (FM.add_iff _ _ b) Hb_town) as [Hb1_town|Hb1_town].

*****
Hb1_town : Logic.eq (S O) b
Hb_town : In b\n (add (S O)\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))))
H_sub' : Subset (remove (S (S (S (S O)))) B) town_2
Hb5 : not (Logic.eq b (S (S (S (S (S O))))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S (S (S (S O)))) B)
b : elt
H44 : not (In (S (S (S (S O)))) (remove (S (S (S (S O)))) B))
H45 : not (In (S (S (S (S (S O))))) (remove (S (S (S (S O)))) B))
H43 : forall _ : In (S (S (S O))) (remove (S (S (S (S O)))) B), False
H42 : forall _ : In (S (S O)) (remove (S (S (S (S O)))) B), False
H41 : forall _ : In (S O) (remove (S (S (S (S O)))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S (S O)))) B)) (S O)
H4 : In (S (S (S (S O)))) B
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
apply Hb1.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
assert (H_card_rem:cardinal (remove 4 B)=1).
idtac.
assert (H41:=fun HH : In 1 (remove 4 B) => H1 (remove_3 HH)).
assert (H42:=fun HH : In 2 (remove 4 B) => H2 (remove_3 HH)).
assert (H43:=fun HH : In 3 (remove 4 B) => H3 (remove_3 HH)).
destruct (In_dec 5 (remove 4 B)) as [H45|H45].
apply False_rec.
assert (H44:=(@remove_1 B _ _ (refl_equal 4))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].
assert (H_sub':=@subset_remove_3 _ _ 4 H_sub).
assert (Hb_town:=H_sub' _ Hb).
unfold town_2 in Hb_town.
destruct (proj1 (FM.add_iff _ _ b) Hb_town) as [Hb1_town|Hb1_town].
apply Hb1.

*****
Hb1_town : Logic.eq (S O) b
Hb_town : In b\n (add (S O)\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))))
H_sub' : Subset (remove (S (S (S (S O)))) B) town_2
Hb5 : not (Logic.eq b (S (S (S (S (S O))))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S (S (S (S O)))) B)
b : elt
H44 : not (In (S (S (S (S O)))) (remove (S (S (S (S O)))) B))
H45 : not (In (S (S (S (S (S O))))) (remove (S (S (S (S O)))) B))
H43 : forall _ : In (S (S (S O))) (remove (S (S (S (S O)))) B), False
H42 : forall _ : In (S (S O)) (remove (S (S (S (S O)))) B), False
H41 : forall _ : In (S O) (remove (S (S (S (S O)))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S (S O)))) B)) (S O)
H4 : In (S (S (S (S O)))) B
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
Logic.eq b (S O)
+++++
rewrite Hb1_town.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
assert (H_card_rem:cardinal (remove 4 B)=1).
idtac.
assert (H41:=fun HH : In 1 (remove 4 B) => H1 (remove_3 HH)).
assert (H42:=fun HH : In 2 (remove 4 B) => H2 (remove_3 HH)).
assert (H43:=fun HH : In 3 (remove 4 B) => H3 (remove_3 HH)).
destruct (In_dec 5 (remove 4 B)) as [H45|H45].
apply False_rec.
assert (H44:=(@remove_1 B _ _ (refl_equal 4))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].
assert (H_sub':=@subset_remove_3 _ _ 4 H_sub).
assert (Hb_town:=H_sub' _ Hb).
unfold town_2 in Hb_town.
destruct (proj1 (FM.add_iff _ _ b) Hb_town) as [Hb1_town|Hb1_town].
apply Hb1.
rewrite Hb1_town.

*****
Hb1_town : Logic.eq (S O) b
Hb_town : In b\n (add (S O)\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))))
H_sub' : Subset (remove (S (S (S (S O)))) B) town_2
Hb5 : not (Logic.eq b (S (S (S (S (S O))))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S (S (S (S O)))) B)
b : elt
H44 : not (In (S (S (S (S O)))) (remove (S (S (S (S O)))) B))
H45 : not (In (S (S (S (S (S O))))) (remove (S (S (S (S O)))) B))
H43 : forall _ : In (S (S (S O))) (remove (S (S (S (S O)))) B), False
H42 : forall _ : In (S (S O)) (remove (S (S (S (S O)))) B), False
H41 : forall _ : In (S O) (remove (S (S (S (S O)))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S (S O)))) B)) (S O)
H4 : In (S (S (S (S O)))) B
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
Logic.eq b b
+++++
reflexivity.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
assert (H_card_rem:cardinal (remove 4 B)=1).
idtac.
assert (H41:=fun HH : In 1 (remove 4 B) => H1 (remove_3 HH)).
assert (H42:=fun HH : In 2 (remove 4 B) => H2 (remove_3 HH)).
assert (H43:=fun HH : In 3 (remove 4 B) => H3 (remove_3 HH)).
destruct (In_dec 5 (remove 4 B)) as [H45|H45].
apply False_rec.
assert (H44:=(@remove_1 B _ _ (refl_equal 4))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].
assert (H_sub':=@subset_remove_3 _ _ 4 H_sub).
assert (Hb_town:=H_sub' _ Hb).
unfold town_2 in Hb_town.
destruct (proj1 (FM.add_iff _ _ b) Hb_town) as [Hb1_town|Hb1_town].

*****
Hb1_town : In b\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))))
Hb_town : In b\n (add (S O)\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))))
H_sub' : Subset (remove (S (S (S (S O)))) B) town_2
Hb5 : not (Logic.eq b (S (S (S (S (S O))))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S (S (S (S O)))) B)
b : elt
H44 : not (In (S (S (S (S O)))) (remove (S (S (S (S O)))) B))
H45 : not (In (S (S (S (S (S O))))) (remove (S (S (S (S O)))) B))
H43 : forall _ : In (S (S (S O))) (remove (S (S (S (S O)))) B), False
H42 : forall _ : In (S (S O)) (remove (S (S (S (S O)))) B), False
H41 : forall _ : In (S O) (remove (S (S (S (S O)))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S (S O)))) B)) (S O)
H4 : In (S (S (S (S O)))) B
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
destruct (proj1 (FM.add_iff _ _ b) Hb1_town) as [Hb2_town|Hb2_town].
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
assert (H_card_rem:cardinal (remove 4 B)=1).
idtac.
assert (H41:=fun HH : In 1 (remove 4 B) => H1 (remove_3 HH)).
assert (H42:=fun HH : In 2 (remove 4 B) => H2 (remove_3 HH)).
assert (H43:=fun HH : In 3 (remove 4 B) => H3 (remove_3 HH)).
destruct (In_dec 5 (remove 4 B)) as [H45|H45].
apply False_rec.
assert (H44:=(@remove_1 B _ _ (refl_equal 4))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].
assert (H_sub':=@subset_remove_3 _ _ 4 H_sub).
assert (Hb_town:=H_sub' _ Hb).
unfold town_2 in Hb_town.
destruct (proj1 (FM.add_iff _ _ b) Hb_town) as [Hb1_town|Hb1_town].
destruct (proj1 (FM.add_iff _ _ b) Hb1_town) as [Hb2_town|Hb2_town].

*****
Hb2_town : Logic.eq (S (S O)) b
Hb1_town : In b\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))))
Hb_town : In b\n (add (S O)\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))))
H_sub' : Subset (remove (S (S (S (S O)))) B) town_2
Hb5 : not (Logic.eq b (S (S (S (S (S O))))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S (S (S (S O)))) B)
b : elt
H44 : not (In (S (S (S (S O)))) (remove (S (S (S (S O)))) B))
H45 : not (In (S (S (S (S (S O))))) (remove (S (S (S (S O)))) B))
H43 : forall _ : In (S (S (S O))) (remove (S (S (S (S O)))) B), False
H42 : forall _ : In (S (S O)) (remove (S (S (S (S O)))) B), False
H41 : forall _ : In (S O) (remove (S (S (S (S O)))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S (S O)))) B)) (S O)
H4 : In (S (S (S (S O)))) B
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
apply Hb2.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
assert (H_card_rem:cardinal (remove 4 B)=1).
idtac.
assert (H41:=fun HH : In 1 (remove 4 B) => H1 (remove_3 HH)).
assert (H42:=fun HH : In 2 (remove 4 B) => H2 (remove_3 HH)).
assert (H43:=fun HH : In 3 (remove 4 B) => H3 (remove_3 HH)).
destruct (In_dec 5 (remove 4 B)) as [H45|H45].
apply False_rec.
assert (H44:=(@remove_1 B _ _ (refl_equal 4))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].
assert (H_sub':=@subset_remove_3 _ _ 4 H_sub).
assert (Hb_town:=H_sub' _ Hb).
unfold town_2 in Hb_town.
destruct (proj1 (FM.add_iff _ _ b) Hb_town) as [Hb1_town|Hb1_town].
destruct (proj1 (FM.add_iff _ _ b) Hb1_town) as [Hb2_town|Hb2_town].
apply Hb2.

*****
Hb2_town : Logic.eq (S (S O)) b
Hb1_town : In b\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))))
Hb_town : In b\n (add (S O)\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))))
H_sub' : Subset (remove (S (S (S (S O)))) B) town_2
Hb5 : not (Logic.eq b (S (S (S (S (S O))))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S (S (S (S O)))) B)
b : elt
H44 : not (In (S (S (S (S O)))) (remove (S (S (S (S O)))) B))
H45 : not (In (S (S (S (S (S O))))) (remove (S (S (S (S O)))) B))
H43 : forall _ : In (S (S (S O))) (remove (S (S (S (S O)))) B), False
H42 : forall _ : In (S (S O)) (remove (S (S (S (S O)))) B), False
H41 : forall _ : In (S O) (remove (S (S (S (S O)))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S (S O)))) B)) (S O)
H4 : In (S (S (S (S O)))) B
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
Logic.eq b (S (S O))
+++++
rewrite Hb2_town.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
assert (H_card_rem:cardinal (remove 4 B)=1).
idtac.
assert (H41:=fun HH : In 1 (remove 4 B) => H1 (remove_3 HH)).
assert (H42:=fun HH : In 2 (remove 4 B) => H2 (remove_3 HH)).
assert (H43:=fun HH : In 3 (remove 4 B) => H3 (remove_3 HH)).
destruct (In_dec 5 (remove 4 B)) as [H45|H45].
apply False_rec.
assert (H44:=(@remove_1 B _ _ (refl_equal 4))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].
assert (H_sub':=@subset_remove_3 _ _ 4 H_sub).
assert (Hb_town:=H_sub' _ Hb).
unfold town_2 in Hb_town.
destruct (proj1 (FM.add_iff _ _ b) Hb_town) as [Hb1_town|Hb1_town].
destruct (proj1 (FM.add_iff _ _ b) Hb1_town) as [Hb2_town|Hb2_town].
apply Hb2.
rewrite Hb2_town.

*****
Hb2_town : Logic.eq (S (S O)) b
Hb1_town : In b\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))))
Hb_town : In b\n (add (S O)\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))))
H_sub' : Subset (remove (S (S (S (S O)))) B) town_2
Hb5 : not (Logic.eq b (S (S (S (S (S O))))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S (S (S (S O)))) B)
b : elt
H44 : not (In (S (S (S (S O)))) (remove (S (S (S (S O)))) B))
H45 : not (In (S (S (S (S (S O))))) (remove (S (S (S (S O)))) B))
H43 : forall _ : In (S (S (S O))) (remove (S (S (S (S O)))) B), False
H42 : forall _ : In (S (S O)) (remove (S (S (S (S O)))) B), False
H41 : forall _ : In (S O) (remove (S (S (S (S O)))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S (S O)))) B)) (S O)
H4 : In (S (S (S (S O)))) B
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
Logic.eq b b
+++++
reflexivity.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
assert (H_card_rem:cardinal (remove 4 B)=1).
idtac.
assert (H41:=fun HH : In 1 (remove 4 B) => H1 (remove_3 HH)).
assert (H42:=fun HH : In 2 (remove 4 B) => H2 (remove_3 HH)).
assert (H43:=fun HH : In 3 (remove 4 B) => H3 (remove_3 HH)).
destruct (In_dec 5 (remove 4 B)) as [H45|H45].
apply False_rec.
assert (H44:=(@remove_1 B _ _ (refl_equal 4))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].
assert (H_sub':=@subset_remove_3 _ _ 4 H_sub).
assert (Hb_town:=H_sub' _ Hb).
unfold town_2 in Hb_town.
destruct (proj1 (FM.add_iff _ _ b) Hb_town) as [Hb1_town|Hb1_town].
destruct (proj1 (FM.add_iff _ _ b) Hb1_town) as [Hb2_town|Hb2_town].

*****
Hb2_town : In b\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))
Hb1_town : In b\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))))
Hb_town : In b\n (add (S O)\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))))
H_sub' : Subset (remove (S (S (S (S O)))) B) town_2
Hb5 : not (Logic.eq b (S (S (S (S (S O))))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S (S (S (S O)))) B)
b : elt
H44 : not (In (S (S (S (S O)))) (remove (S (S (S (S O)))) B))
H45 : not (In (S (S (S (S (S O))))) (remove (S (S (S (S O)))) B))
H43 : forall _ : In (S (S (S O))) (remove (S (S (S (S O)))) B), False
H42 : forall _ : In (S (S O)) (remove (S (S (S (S O)))) B), False
H41 : forall _ : In (S O) (remove (S (S (S (S O)))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S (S O)))) B)) (S O)
H4 : In (S (S (S (S O)))) B
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
destruct (proj1 (FM.add_iff _ _ b) Hb2_town) as [Hb3_town|Hb3_town].
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
assert (H_card_rem:cardinal (remove 4 B)=1).
idtac.
assert (H41:=fun HH : In 1 (remove 4 B) => H1 (remove_3 HH)).
assert (H42:=fun HH : In 2 (remove 4 B) => H2 (remove_3 HH)).
assert (H43:=fun HH : In 3 (remove 4 B) => H3 (remove_3 HH)).
destruct (In_dec 5 (remove 4 B)) as [H45|H45].
apply False_rec.
assert (H44:=(@remove_1 B _ _ (refl_equal 4))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].
assert (H_sub':=@subset_remove_3 _ _ 4 H_sub).
assert (Hb_town:=H_sub' _ Hb).
unfold town_2 in Hb_town.
destruct (proj1 (FM.add_iff _ _ b) Hb_town) as [Hb1_town|Hb1_town].
destruct (proj1 (FM.add_iff _ _ b) Hb1_town) as [Hb2_town|Hb2_town].
destruct (proj1 (FM.add_iff _ _ b) Hb2_town) as [Hb3_town|Hb3_town].

*****
Hb3_town : Logic.eq (S (S (S O))) b
Hb2_town : In b\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))
Hb1_town : In b\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))))
Hb_town : In b\n (add (S O)\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))))
H_sub' : Subset (remove (S (S (S (S O)))) B) town_2
Hb5 : not (Logic.eq b (S (S (S (S (S O))))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S (S (S (S O)))) B)
b : elt
H44 : not (In (S (S (S (S O)))) (remove (S (S (S (S O)))) B))
H45 : not (In (S (S (S (S (S O))))) (remove (S (S (S (S O)))) B))
H43 : forall _ : In (S (S (S O))) (remove (S (S (S (S O)))) B), False
H42 : forall _ : In (S (S O)) (remove (S (S (S (S O)))) B), False
H41 : forall _ : In (S O) (remove (S (S (S (S O)))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S (S O)))) B)) (S O)
H4 : In (S (S (S (S O)))) B
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
apply Hb3.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
assert (H_card_rem:cardinal (remove 4 B)=1).
idtac.
assert (H41:=fun HH : In 1 (remove 4 B) => H1 (remove_3 HH)).
assert (H42:=fun HH : In 2 (remove 4 B) => H2 (remove_3 HH)).
assert (H43:=fun HH : In 3 (remove 4 B) => H3 (remove_3 HH)).
destruct (In_dec 5 (remove 4 B)) as [H45|H45].
apply False_rec.
assert (H44:=(@remove_1 B _ _ (refl_equal 4))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].
assert (H_sub':=@subset_remove_3 _ _ 4 H_sub).
assert (Hb_town:=H_sub' _ Hb).
unfold town_2 in Hb_town.
destruct (proj1 (FM.add_iff _ _ b) Hb_town) as [Hb1_town|Hb1_town].
destruct (proj1 (FM.add_iff _ _ b) Hb1_town) as [Hb2_town|Hb2_town].
destruct (proj1 (FM.add_iff _ _ b) Hb2_town) as [Hb3_town|Hb3_town].
apply Hb3.

*****
Hb3_town : Logic.eq (S (S (S O))) b
Hb2_town : In b\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))
Hb1_town : In b\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))))
Hb_town : In b\n (add (S O)\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))))
H_sub' : Subset (remove (S (S (S (S O)))) B) town_2
Hb5 : not (Logic.eq b (S (S (S (S (S O))))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S (S (S (S O)))) B)
b : elt
H44 : not (In (S (S (S (S O)))) (remove (S (S (S (S O)))) B))
H45 : not (In (S (S (S (S (S O))))) (remove (S (S (S (S O)))) B))
H43 : forall _ : In (S (S (S O))) (remove (S (S (S (S O)))) B), False
H42 : forall _ : In (S (S O)) (remove (S (S (S (S O)))) B), False
H41 : forall _ : In (S O) (remove (S (S (S (S O)))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S (S O)))) B)) (S O)
H4 : In (S (S (S (S O)))) B
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
Logic.eq b (S (S (S O)))
+++++
rewrite Hb3_town.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
assert (H_card_rem:cardinal (remove 4 B)=1).
idtac.
assert (H41:=fun HH : In 1 (remove 4 B) => H1 (remove_3 HH)).
assert (H42:=fun HH : In 2 (remove 4 B) => H2 (remove_3 HH)).
assert (H43:=fun HH : In 3 (remove 4 B) => H3 (remove_3 HH)).
destruct (In_dec 5 (remove 4 B)) as [H45|H45].
apply False_rec.
assert (H44:=(@remove_1 B _ _ (refl_equal 4))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].
assert (H_sub':=@subset_remove_3 _ _ 4 H_sub).
assert (Hb_town:=H_sub' _ Hb).
unfold town_2 in Hb_town.
destruct (proj1 (FM.add_iff _ _ b) Hb_town) as [Hb1_town|Hb1_town].
destruct (proj1 (FM.add_iff _ _ b) Hb1_town) as [Hb2_town|Hb2_town].
destruct (proj1 (FM.add_iff _ _ b) Hb2_town) as [Hb3_town|Hb3_town].
apply Hb3.
rewrite Hb3_town.

*****
Hb3_town : Logic.eq (S (S (S O))) b
Hb2_town : In b\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))
Hb1_town : In b\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))))
Hb_town : In b\n (add (S O)\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))))
H_sub' : Subset (remove (S (S (S (S O)))) B) town_2
Hb5 : not (Logic.eq b (S (S (S (S (S O))))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S (S (S (S O)))) B)
b : elt
H44 : not (In (S (S (S (S O)))) (remove (S (S (S (S O)))) B))
H45 : not (In (S (S (S (S (S O))))) (remove (S (S (S (S O)))) B))
H43 : forall _ : In (S (S (S O))) (remove (S (S (S (S O)))) B), False
H42 : forall _ : In (S (S O)) (remove (S (S (S (S O)))) B), False
H41 : forall _ : In (S O) (remove (S (S (S (S O)))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S (S O)))) B)) (S O)
H4 : In (S (S (S (S O)))) B
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
Logic.eq b b
+++++
reflexivity.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
assert (H_card_rem:cardinal (remove 4 B)=1).
idtac.
assert (H41:=fun HH : In 1 (remove 4 B) => H1 (remove_3 HH)).
assert (H42:=fun HH : In 2 (remove 4 B) => H2 (remove_3 HH)).
assert (H43:=fun HH : In 3 (remove 4 B) => H3 (remove_3 HH)).
destruct (In_dec 5 (remove 4 B)) as [H45|H45].
apply False_rec.
assert (H44:=(@remove_1 B _ _ (refl_equal 4))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].
assert (H_sub':=@subset_remove_3 _ _ 4 H_sub).
assert (Hb_town:=H_sub' _ Hb).
unfold town_2 in Hb_town.
destruct (proj1 (FM.add_iff _ _ b) Hb_town) as [Hb1_town|Hb1_town].
destruct (proj1 (FM.add_iff _ _ b) Hb1_town) as [Hb2_town|Hb2_town].
destruct (proj1 (FM.add_iff _ _ b) Hb2_town) as [Hb3_town|Hb3_town].

*****
Hb3_town : In b (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))
Hb2_town : In b\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))
Hb1_town : In b\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))))
Hb_town : In b\n (add (S O)\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))))
H_sub' : Subset (remove (S (S (S (S O)))) B) town_2
Hb5 : not (Logic.eq b (S (S (S (S (S O))))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S (S (S (S O)))) B)
b : elt
H44 : not (In (S (S (S (S O)))) (remove (S (S (S (S O)))) B))
H45 : not (In (S (S (S (S (S O))))) (remove (S (S (S (S O)))) B))
H43 : forall _ : In (S (S (S O))) (remove (S (S (S (S O)))) B), False
H42 : forall _ : In (S (S O)) (remove (S (S (S (S O)))) B), False
H41 : forall _ : In (S O) (remove (S (S (S (S O)))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S (S O)))) B)) (S O)
H4 : In (S (S (S (S O)))) B
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
destruct (proj1 (FM.add_iff _ _ b) Hb3_town) as [Hb4_town|Hb4_town].
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
assert (H_card_rem:cardinal (remove 4 B)=1).
idtac.
assert (H41:=fun HH : In 1 (remove 4 B) => H1 (remove_3 HH)).
assert (H42:=fun HH : In 2 (remove 4 B) => H2 (remove_3 HH)).
assert (H43:=fun HH : In 3 (remove 4 B) => H3 (remove_3 HH)).
destruct (In_dec 5 (remove 4 B)) as [H45|H45].
apply False_rec.
assert (H44:=(@remove_1 B _ _ (refl_equal 4))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].
assert (H_sub':=@subset_remove_3 _ _ 4 H_sub).
assert (Hb_town:=H_sub' _ Hb).
unfold town_2 in Hb_town.
destruct (proj1 (FM.add_iff _ _ b) Hb_town) as [Hb1_town|Hb1_town].
destruct (proj1 (FM.add_iff _ _ b) Hb1_town) as [Hb2_town|Hb2_town].
destruct (proj1 (FM.add_iff _ _ b) Hb2_town) as [Hb3_town|Hb3_town].
destruct (proj1 (FM.add_iff _ _ b) Hb3_town) as [Hb4_town|Hb4_town].

*****
Hb4_town : Logic.eq (S (S (S (S O)))) b
Hb3_town : In b (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))
Hb2_town : In b\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))
Hb1_town : In b\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))))
Hb_town : In b\n (add (S O)\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))))
H_sub' : Subset (remove (S (S (S (S O)))) B) town_2
Hb5 : not (Logic.eq b (S (S (S (S (S O))))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S (S (S (S O)))) B)
b : elt
H44 : not (In (S (S (S (S O)))) (remove (S (S (S (S O)))) B))
H45 : not (In (S (S (S (S (S O))))) (remove (S (S (S (S O)))) B))
H43 : forall _ : In (S (S (S O))) (remove (S (S (S (S O)))) B), False
H42 : forall _ : In (S (S O)) (remove (S (S (S (S O)))) B), False
H41 : forall _ : In (S O) (remove (S (S (S (S O)))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S (S O)))) B)) (S O)
H4 : In (S (S (S (S O)))) B
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
apply Hb4.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
assert (H_card_rem:cardinal (remove 4 B)=1).
idtac.
assert (H41:=fun HH : In 1 (remove 4 B) => H1 (remove_3 HH)).
assert (H42:=fun HH : In 2 (remove 4 B) => H2 (remove_3 HH)).
assert (H43:=fun HH : In 3 (remove 4 B) => H3 (remove_3 HH)).
destruct (In_dec 5 (remove 4 B)) as [H45|H45].
apply False_rec.
assert (H44:=(@remove_1 B _ _ (refl_equal 4))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].
assert (H_sub':=@subset_remove_3 _ _ 4 H_sub).
assert (Hb_town:=H_sub' _ Hb).
unfold town_2 in Hb_town.
destruct (proj1 (FM.add_iff _ _ b) Hb_town) as [Hb1_town|Hb1_town].
destruct (proj1 (FM.add_iff _ _ b) Hb1_town) as [Hb2_town|Hb2_town].
destruct (proj1 (FM.add_iff _ _ b) Hb2_town) as [Hb3_town|Hb3_town].
destruct (proj1 (FM.add_iff _ _ b) Hb3_town) as [Hb4_town|Hb4_town].
apply Hb4.

*****
Hb4_town : Logic.eq (S (S (S (S O)))) b
Hb3_town : In b (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))
Hb2_town : In b\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))
Hb1_town : In b\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))))
Hb_town : In b\n (add (S O)\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))))
H_sub' : Subset (remove (S (S (S (S O)))) B) town_2
Hb5 : not (Logic.eq b (S (S (S (S (S O))))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S (S (S (S O)))) B)
b : elt
H44 : not (In (S (S (S (S O)))) (remove (S (S (S (S O)))) B))
H45 : not (In (S (S (S (S (S O))))) (remove (S (S (S (S O)))) B))
H43 : forall _ : In (S (S (S O))) (remove (S (S (S (S O)))) B), False
H42 : forall _ : In (S (S O)) (remove (S (S (S (S O)))) B), False
H41 : forall _ : In (S O) (remove (S (S (S (S O)))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S (S O)))) B)) (S O)
H4 : In (S (S (S (S O)))) B
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
Logic.eq b (S (S (S (S O))))
+++++
rewrite Hb4_town.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
assert (H_card_rem:cardinal (remove 4 B)=1).
idtac.
assert (H41:=fun HH : In 1 (remove 4 B) => H1 (remove_3 HH)).
assert (H42:=fun HH : In 2 (remove 4 B) => H2 (remove_3 HH)).
assert (H43:=fun HH : In 3 (remove 4 B) => H3 (remove_3 HH)).
destruct (In_dec 5 (remove 4 B)) as [H45|H45].
apply False_rec.
assert (H44:=(@remove_1 B _ _ (refl_equal 4))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].
assert (H_sub':=@subset_remove_3 _ _ 4 H_sub).
assert (Hb_town:=H_sub' _ Hb).
unfold town_2 in Hb_town.
destruct (proj1 (FM.add_iff _ _ b) Hb_town) as [Hb1_town|Hb1_town].
destruct (proj1 (FM.add_iff _ _ b) Hb1_town) as [Hb2_town|Hb2_town].
destruct (proj1 (FM.add_iff _ _ b) Hb2_town) as [Hb3_town|Hb3_town].
destruct (proj1 (FM.add_iff _ _ b) Hb3_town) as [Hb4_town|Hb4_town].
apply Hb4.
rewrite Hb4_town.

*****
Hb4_town : Logic.eq (S (S (S (S O)))) b
Hb3_town : In b (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))
Hb2_town : In b\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))
Hb1_town : In b\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))))
Hb_town : In b\n (add (S O)\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))))
H_sub' : Subset (remove (S (S (S (S O)))) B) town_2
Hb5 : not (Logic.eq b (S (S (S (S (S O))))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S (S (S (S O)))) B)
b : elt
H44 : not (In (S (S (S (S O)))) (remove (S (S (S (S O)))) B))
H45 : not (In (S (S (S (S (S O))))) (remove (S (S (S (S O)))) B))
H43 : forall _ : In (S (S (S O))) (remove (S (S (S (S O)))) B), False
H42 : forall _ : In (S (S O)) (remove (S (S (S (S O)))) B), False
H41 : forall _ : In (S O) (remove (S (S (S (S O)))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S (S O)))) B)) (S O)
H4 : In (S (S (S (S O)))) B
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
Logic.eq b b
+++++
reflexivity.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
assert (H_card_rem:cardinal (remove 4 B)=1).
idtac.
assert (H41:=fun HH : In 1 (remove 4 B) => H1 (remove_3 HH)).
assert (H42:=fun HH : In 2 (remove 4 B) => H2 (remove_3 HH)).
assert (H43:=fun HH : In 3 (remove 4 B) => H3 (remove_3 HH)).
destruct (In_dec 5 (remove 4 B)) as [H45|H45].
apply False_rec.
assert (H44:=(@remove_1 B _ _ (refl_equal 4))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].
assert (H_sub':=@subset_remove_3 _ _ 4 H_sub).
assert (Hb_town:=H_sub' _ Hb).
unfold town_2 in Hb_town.
destruct (proj1 (FM.add_iff _ _ b) Hb_town) as [Hb1_town|Hb1_town].
destruct (proj1 (FM.add_iff _ _ b) Hb1_town) as [Hb2_town|Hb2_town].
destruct (proj1 (FM.add_iff _ _ b) Hb2_town) as [Hb3_town|Hb3_town].
destruct (proj1 (FM.add_iff _ _ b) Hb3_town) as [Hb4_town|Hb4_town].

*****
Hb4_town : In b (add (S (S (S (S (S O))))) empty)
Hb3_town : In b (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))
Hb2_town : In b\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))
Hb1_town : In b\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))))
Hb_town : In b\n (add (S O)\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))))
H_sub' : Subset (remove (S (S (S (S O)))) B) town_2
Hb5 : not (Logic.eq b (S (S (S (S (S O))))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S (S (S (S O)))) B)
b : elt
H44 : not (In (S (S (S (S O)))) (remove (S (S (S (S O)))) B))
H45 : not (In (S (S (S (S (S O))))) (remove (S (S (S (S O)))) B))
H43 : forall _ : In (S (S (S O))) (remove (S (S (S (S O)))) B), False
H42 : forall _ : In (S (S O)) (remove (S (S (S (S O)))) B), False
H41 : forall _ : In (S O) (remove (S (S (S (S O)))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S (S O)))) B)) (S O)
H4 : In (S (S (S (S O)))) B
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
destruct (proj1 (FM.add_iff _ _ b) Hb4_town) as [Hb5_town|Hb5_town].
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
assert (H_card_rem:cardinal (remove 4 B)=1).
idtac.
assert (H41:=fun HH : In 1 (remove 4 B) => H1 (remove_3 HH)).
assert (H42:=fun HH : In 2 (remove 4 B) => H2 (remove_3 HH)).
assert (H43:=fun HH : In 3 (remove 4 B) => H3 (remove_3 HH)).
destruct (In_dec 5 (remove 4 B)) as [H45|H45].
apply False_rec.
assert (H44:=(@remove_1 B _ _ (refl_equal 4))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].
assert (H_sub':=@subset_remove_3 _ _ 4 H_sub).
assert (Hb_town:=H_sub' _ Hb).
unfold town_2 in Hb_town.
destruct (proj1 (FM.add_iff _ _ b) Hb_town) as [Hb1_town|Hb1_town].
destruct (proj1 (FM.add_iff _ _ b) Hb1_town) as [Hb2_town|Hb2_town].
destruct (proj1 (FM.add_iff _ _ b) Hb2_town) as [Hb3_town|Hb3_town].
destruct (proj1 (FM.add_iff _ _ b) Hb3_town) as [Hb4_town|Hb4_town].
destruct (proj1 (FM.add_iff _ _ b) Hb4_town) as [Hb5_town|Hb5_town].

*****
Hb5_town : Logic.eq (S (S (S (S (S O))))) b
Hb4_town : In b (add (S (S (S (S (S O))))) empty)
Hb3_town : In b (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))
Hb2_town : In b\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))
Hb1_town : In b\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))))
Hb_town : In b\n (add (S O)\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))))
H_sub' : Subset (remove (S (S (S (S O)))) B) town_2
Hb5 : not (Logic.eq b (S (S (S (S (S O))))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S (S (S (S O)))) B)
b : elt
H44 : not (In (S (S (S (S O)))) (remove (S (S (S (S O)))) B))
H45 : not (In (S (S (S (S (S O))))) (remove (S (S (S (S O)))) B))
H43 : forall _ : In (S (S (S O))) (remove (S (S (S (S O)))) B), False
H42 : forall _ : In (S (S O)) (remove (S (S (S (S O)))) B), False
H41 : forall _ : In (S O) (remove (S (S (S (S O)))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S (S O)))) B)) (S O)
H4 : In (S (S (S (S O)))) B
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
apply Hb5.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
assert (H_card_rem:cardinal (remove 4 B)=1).
idtac.
assert (H41:=fun HH : In 1 (remove 4 B) => H1 (remove_3 HH)).
assert (H42:=fun HH : In 2 (remove 4 B) => H2 (remove_3 HH)).
assert (H43:=fun HH : In 3 (remove 4 B) => H3 (remove_3 HH)).
destruct (In_dec 5 (remove 4 B)) as [H45|H45].
apply False_rec.
assert (H44:=(@remove_1 B _ _ (refl_equal 4))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].
assert (H_sub':=@subset_remove_3 _ _ 4 H_sub).
assert (Hb_town:=H_sub' _ Hb).
unfold town_2 in Hb_town.
destruct (proj1 (FM.add_iff _ _ b) Hb_town) as [Hb1_town|Hb1_town].
destruct (proj1 (FM.add_iff _ _ b) Hb1_town) as [Hb2_town|Hb2_town].
destruct (proj1 (FM.add_iff _ _ b) Hb2_town) as [Hb3_town|Hb3_town].
destruct (proj1 (FM.add_iff _ _ b) Hb3_town) as [Hb4_town|Hb4_town].
destruct (proj1 (FM.add_iff _ _ b) Hb4_town) as [Hb5_town|Hb5_town].
apply Hb5.

*****
Hb5_town : Logic.eq (S (S (S (S (S O))))) b
Hb4_town : In b (add (S (S (S (S (S O))))) empty)
Hb3_town : In b (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))
Hb2_town : In b\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))
Hb1_town : In b\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))))
Hb_town : In b\n (add (S O)\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))))
H_sub' : Subset (remove (S (S (S (S O)))) B) town_2
Hb5 : not (Logic.eq b (S (S (S (S (S O))))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S (S (S (S O)))) B)
b : elt
H44 : not (In (S (S (S (S O)))) (remove (S (S (S (S O)))) B))
H45 : not (In (S (S (S (S (S O))))) (remove (S (S (S (S O)))) B))
H43 : forall _ : In (S (S (S O))) (remove (S (S (S (S O)))) B), False
H42 : forall _ : In (S (S O)) (remove (S (S (S (S O)))) B), False
H41 : forall _ : In (S O) (remove (S (S (S (S O)))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S (S O)))) B)) (S O)
H4 : In (S (S (S (S O)))) B
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
Logic.eq b (S (S (S (S (S O)))))
+++++
rewrite Hb5_town.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
assert (H_card_rem:cardinal (remove 4 B)=1).
idtac.
assert (H41:=fun HH : In 1 (remove 4 B) => H1 (remove_3 HH)).
assert (H42:=fun HH : In 2 (remove 4 B) => H2 (remove_3 HH)).
assert (H43:=fun HH : In 3 (remove 4 B) => H3 (remove_3 HH)).
destruct (In_dec 5 (remove 4 B)) as [H45|H45].
apply False_rec.
assert (H44:=(@remove_1 B _ _ (refl_equal 4))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].
assert (H_sub':=@subset_remove_3 _ _ 4 H_sub).
assert (Hb_town:=H_sub' _ Hb).
unfold town_2 in Hb_town.
destruct (proj1 (FM.add_iff _ _ b) Hb_town) as [Hb1_town|Hb1_town].
destruct (proj1 (FM.add_iff _ _ b) Hb1_town) as [Hb2_town|Hb2_town].
destruct (proj1 (FM.add_iff _ _ b) Hb2_town) as [Hb3_town|Hb3_town].
destruct (proj1 (FM.add_iff _ _ b) Hb3_town) as [Hb4_town|Hb4_town].
destruct (proj1 (FM.add_iff _ _ b) Hb4_town) as [Hb5_town|Hb5_town].
apply Hb5.
rewrite Hb5_town.

*****
Hb5_town : Logic.eq (S (S (S (S (S O))))) b
Hb4_town : In b (add (S (S (S (S (S O))))) empty)
Hb3_town : In b (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))
Hb2_town : In b\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))
Hb1_town : In b\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))))
Hb_town : In b\n (add (S O)\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))))
H_sub' : Subset (remove (S (S (S (S O)))) B) town_2
Hb5 : not (Logic.eq b (S (S (S (S (S O))))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S (S (S (S O)))) B)
b : elt
H44 : not (In (S (S (S (S O)))) (remove (S (S (S (S O)))) B))
H45 : not (In (S (S (S (S (S O))))) (remove (S (S (S (S O)))) B))
H43 : forall _ : In (S (S (S O))) (remove (S (S (S (S O)))) B), False
H42 : forall _ : In (S (S O)) (remove (S (S (S (S O)))) B), False
H41 : forall _ : In (S O) (remove (S (S (S (S O)))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S (S O)))) B)) (S O)
H4 : In (S (S (S (S O)))) B
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
Logic.eq b b
+++++
reflexivity.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
assert (H_card_rem:cardinal (remove 4 B)=1).
idtac.
assert (H41:=fun HH : In 1 (remove 4 B) => H1 (remove_3 HH)).
assert (H42:=fun HH : In 2 (remove 4 B) => H2 (remove_3 HH)).
assert (H43:=fun HH : In 3 (remove 4 B) => H3 (remove_3 HH)).
destruct (In_dec 5 (remove 4 B)) as [H45|H45].
apply False_rec.
assert (H44:=(@remove_1 B _ _ (refl_equal 4))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].
assert (H_sub':=@subset_remove_3 _ _ 4 H_sub).
assert (Hb_town:=H_sub' _ Hb).
unfold town_2 in Hb_town.
destruct (proj1 (FM.add_iff _ _ b) Hb_town) as [Hb1_town|Hb1_town].
destruct (proj1 (FM.add_iff _ _ b) Hb1_town) as [Hb2_town|Hb2_town].
destruct (proj1 (FM.add_iff _ _ b) Hb2_town) as [Hb3_town|Hb3_town].
destruct (proj1 (FM.add_iff _ _ b) Hb3_town) as [Hb4_town|Hb4_town].
destruct (proj1 (FM.add_iff _ _ b) Hb4_town) as [Hb5_town|Hb5_town].

*****
Hb5_town : In b empty
Hb4_town : In b (add (S (S (S (S (S O))))) empty)
Hb3_town : In b (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))
Hb2_town : In b\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))
Hb1_town : In b\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))))
Hb_town : In b\n (add (S O)\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))))
H_sub' : Subset (remove (S (S (S (S O)))) B) town_2
Hb5 : not (Logic.eq b (S (S (S (S (S O))))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b (remove (S (S (S (S O)))) B)
b : elt
H44 : not (In (S (S (S (S O)))) (remove (S (S (S (S O)))) B))
H45 : not (In (S (S (S (S (S O))))) (remove (S (S (S (S O)))) B))
H43 : forall _ : In (S (S (S O))) (remove (S (S (S (S O)))) B), False
H42 : forall _ : In (S (S O)) (remove (S (S (S (S O)))) B), False
H41 : forall _ : In (S O) (remove (S (S (S (S O)))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S (S O)))) B)) (S O)
H4 : In (S (S (S (S O)))) B
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
apply (proj1 (FM.empty_iff b) Hb5_town).
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].

*****
H4 : not (In (S (S (S (S O)))) B)
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
sumor (sumor (sumor (sumor (sumor (sumor (sumor (sumor (sumbool (Equal B (add (S O) (add (S (S O)) empty))) (Equal B (add (S O) (add (S (S (S O))) empty)))) (Equal B (add (S O) (add (S (S (S (S O)))) empty)))) (Equal B (add (S O) (add (S (S (S (S (S O))))) empty)))) (Equal B (add (S (S O)) (add (S (S (S O))) empty)))) (Equal B (add (S (S O)) (add (S (S (S (S O)))) empty)))) (Equal B (add (S (S O)) (add (S (S (S (S (S O))))) empty)))) (Equal B (add (S (S (S O))) (add (S (S (S (S O)))) empty)))) (Equal B (add (S (S (S O))) (add (S (S (S (S (S O))))) empty)))) (Equal B (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))
+++++
apply False_rec.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
apply False_rec.

*****
H4 : not (In (S (S (S (S O)))) B)
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
destruct (In_dec 5 B) as [H5|H5].
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
apply False_rec.
destruct (In_dec 5 B) as [H5|H5].

*****
H5 : In (S (S (S (S (S O))))) B
H4 : not (In (S (S (S (S O)))) B)
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
assert (H_card_rem:cardinal (remove 5 B)=1).
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
apply False_rec.
destruct (In_dec 5 B) as [H5|H5].
assert (H_card_rem:cardinal (remove 5 B)=1).

*****
H5 : In (S (S (S (S (S O))))) B
H4 : not (In (S (S (S (S O)))) B)
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
Logic.eq (cardinal (remove (S (S (S (S (S O))))) B)) (S O)
+++++
rewrite <- (remove_cardinal_1 H5) in H_card.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
apply False_rec.
destruct (In_dec 5 B) as [H5|H5].
assert (H_card_rem:cardinal (remove 5 B)=1).
rewrite <- (remove_cardinal_1 H5) in H_card.

*****
H5 : In (S (S (S (S (S O))))) B
H4 : not (In (S (S (S (S O)))) B)
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (S (cardinal (remove (S (S (S (S (S O))))) B))) (S (S O))
H_sub : Subset B town_2
B : True
*****
Logic.eq (cardinal (remove (S (S (S (S (S O))))) B)) (S O)
+++++
apply eq_add_S.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
apply False_rec.
destruct (In_dec 5 B) as [H5|H5].
assert (H_card_rem:cardinal (remove 5 B)=1).
rewrite <- (remove_cardinal_1 H5) in H_card.
apply eq_add_S.

*****
H5 : In (S (S (S (S (S O))))) B
H4 : not (In (S (S (S (S O)))) B)
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (S (cardinal (remove (S (S (S (S (S O))))) B))) (S (S O))
H_sub : Subset B town_2
B : True
*****
Logic.eq (S (cardinal (remove (S (S (S (S (S O))))) B))) (S (S O))
+++++
assumption.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
apply False_rec.
destruct (In_dec 5 B) as [H5|H5].
assert (H_card_rem:cardinal (remove 5 B)=1).

*****
H_card_rem : Logic.eq (cardinal (remove (S (S (S (S (S O))))) B)) (S O)
H5 : In (S (S (S (S (S O))))) B
H4 : not (In (S (S (S (S O)))) B)
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
idtac.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
apply False_rec.
destruct (In_dec 5 B) as [H5|H5].
assert (H_card_rem:cardinal (remove 5 B)=1).
idtac.

*****
H_card_rem : Logic.eq (cardinal (remove (S (S (S (S (S O))))) B)) (S O)
H5 : In (S (S (S (S (S O))))) B
H4 : not (In (S (S (S (S O)))) B)
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
assert (H51:=fun HH : In 1 (remove 5 B) => H1 (remove_3 HH)).
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
apply False_rec.
destruct (In_dec 5 B) as [H5|H5].
assert (H_card_rem:cardinal (remove 5 B)=1).
idtac.
assert (H51:=fun HH : In 1 (remove 5 B) => H1 (remove_3 HH)).

*****
H51 : forall _ : In (S O) (remove (S (S (S (S (S O))))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S (S (S O))))) B)) (S O)
H5 : In (S (S (S (S (S O))))) B
H4 : not (In (S (S (S (S O)))) B)
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
assert (H52:=fun HH : In 2 (remove 5 B) => H2 (remove_3 HH)).
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
apply False_rec.
destruct (In_dec 5 B) as [H5|H5].
assert (H_card_rem:cardinal (remove 5 B)=1).
idtac.
assert (H51:=fun HH : In 1 (remove 5 B) => H1 (remove_3 HH)).
assert (H52:=fun HH : In 2 (remove 5 B) => H2 (remove_3 HH)).

*****
H52 : forall _ : In (S (S O)) (remove (S (S (S (S (S O))))) B), False
H51 : forall _ : In (S O) (remove (S (S (S (S (S O))))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S (S (S O))))) B)) (S O)
H5 : In (S (S (S (S (S O))))) B
H4 : not (In (S (S (S (S O)))) B)
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
assert (H53:=fun HH : In 3 (remove 5 B) => H3 (remove_3 HH)).
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
apply False_rec.
destruct (In_dec 5 B) as [H5|H5].
assert (H_card_rem:cardinal (remove 5 B)=1).
idtac.
assert (H51:=fun HH : In 1 (remove 5 B) => H1 (remove_3 HH)).
assert (H52:=fun HH : In 2 (remove 5 B) => H2 (remove_3 HH)).
assert (H53:=fun HH : In 3 (remove 5 B) => H3 (remove_3 HH)).

*****
H53 : forall _ : In (S (S (S O))) (remove (S (S (S (S (S O))))) B), False
H52 : forall _ : In (S (S O)) (remove (S (S (S (S (S O))))) B), False
H51 : forall _ : In (S O) (remove (S (S (S (S (S O))))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S (S (S O))))) B)) (S O)
H5 : In (S (S (S (S (S O))))) B
H4 : not (In (S (S (S (S O)))) B)
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
assert (H54:=fun HH : In 4 (remove 5 B) => H4 (remove_3 HH)).
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
apply False_rec.
destruct (In_dec 5 B) as [H5|H5].
assert (H_card_rem:cardinal (remove 5 B)=1).
idtac.
assert (H51:=fun HH : In 1 (remove 5 B) => H1 (remove_3 HH)).
assert (H52:=fun HH : In 2 (remove 5 B) => H2 (remove_3 HH)).
assert (H53:=fun HH : In 3 (remove 5 B) => H3 (remove_3 HH)).
assert (H54:=fun HH : In 4 (remove 5 B) => H4 (remove_3 HH)).

*****
H54 : forall _ : In (S (S (S (S O)))) (remove (S (S (S (S (S O))))) B), False
H53 : forall _ : In (S (S (S O))) (remove (S (S (S (S (S O))))) B), False
H52 : forall _ : In (S (S O)) (remove (S (S (S (S (S O))))) B), False
H51 : forall _ : In (S O) (remove (S (S (S (S (S O))))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S (S (S O))))) B)) (S O)
H5 : In (S (S (S (S (S O))))) B
H4 : not (In (S (S (S (S O)))) B)
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
assert (H55:=(@remove_1 B _ _ (refl_equal 5))).
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
apply False_rec.
destruct (In_dec 5 B) as [H5|H5].
assert (H_card_rem:cardinal (remove 5 B)=1).
idtac.
assert (H51:=fun HH : In 1 (remove 5 B) => H1 (remove_3 HH)).
assert (H52:=fun HH : In 2 (remove 5 B) => H2 (remove_3 HH)).
assert (H53:=fun HH : In 3 (remove 5 B) => H3 (remove_3 HH)).
assert (H54:=fun HH : In 4 (remove 5 B) => H4 (remove_3 HH)).
assert (H55:=(@remove_1 B _ _ (refl_equal 5))).

*****
H55 : not (In (S (S (S (S (S O))))) (remove (S (S (S (S (S O))))) B))
H54 : forall _ : In (S (S (S (S O)))) (remove (S (S (S (S (S O))))) B), False
H53 : forall _ : In (S (S (S O))) (remove (S (S (S (S (S O))))) B), False
H52 : forall _ : In (S (S O)) (remove (S (S (S (S (S O))))) B), False
H51 : forall _ : In (S O) (remove (S (S (S (S (S O))))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S (S (S O))))) B)) (S O)
H5 : In (S (S (S (S (S O))))) B
H4 : not (In (S (S (S (S O)))) B)
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
apply False_rec.
destruct (In_dec 5 B) as [H5|H5].
assert (H_card_rem:cardinal (remove 5 B)=1).
idtac.
assert (H51:=fun HH : In 1 (remove 5 B) => H1 (remove_3 HH)).
assert (H52:=fun HH : In 2 (remove 5 B) => H2 (remove_3 HH)).
assert (H53:=fun HH : In 3 (remove 5 B) => H3 (remove_3 HH)).
assert (H54:=fun HH : In 4 (remove 5 B) => H4 (remove_3 HH)).
assert (H55:=(@remove_1 B _ _ (refl_equal 5))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].

*****
Hb : In b (remove (S (S (S (S (S O))))) B)
b : elt
H55 : not (In (S (S (S (S (S O))))) (remove (S (S (S (S (S O))))) B))
H54 : forall _ : In (S (S (S (S O)))) (remove (S (S (S (S (S O))))) B), False
H53 : forall _ : In (S (S (S O))) (remove (S (S (S (S (S O))))) B), False
H52 : forall _ : In (S (S O)) (remove (S (S (S (S (S O))))) B), False
H51 : forall _ : In (S O) (remove (S (S (S (S (S O))))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S (S (S O))))) B)) (S O)
H5 : In (S (S (S (S (S O))))) B
H4 : not (In (S (S (S (S O)))) B)
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
assert (H_sub':=@subset_remove_3 _ _ 5 H_sub).
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
apply False_rec.
destruct (In_dec 5 B) as [H5|H5].
assert (H_card_rem:cardinal (remove 5 B)=1).
idtac.
assert (H51:=fun HH : In 1 (remove 5 B) => H1 (remove_3 HH)).
assert (H52:=fun HH : In 2 (remove 5 B) => H2 (remove_3 HH)).
assert (H53:=fun HH : In 3 (remove 5 B) => H3 (remove_3 HH)).
assert (H54:=fun HH : In 4 (remove 5 B) => H4 (remove_3 HH)).
assert (H55:=(@remove_1 B _ _ (refl_equal 5))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
assert (H_sub':=@subset_remove_3 _ _ 5 H_sub).

*****
H_sub' : Subset (remove (S (S (S (S (S O))))) B) town_2
Hb : In b (remove (S (S (S (S (S O))))) B)
b : elt
H55 : not (In (S (S (S (S (S O))))) (remove (S (S (S (S (S O))))) B))
H54 : forall _ : In (S (S (S (S O)))) (remove (S (S (S (S (S O))))) B), False
H53 : forall _ : In (S (S (S O))) (remove (S (S (S (S (S O))))) B), False
H52 : forall _ : In (S (S O)) (remove (S (S (S (S (S O))))) B), False
H51 : forall _ : In (S O) (remove (S (S (S (S (S O))))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S (S (S O))))) B)) (S O)
H5 : In (S (S (S (S (S O))))) B
H4 : not (In (S (S (S (S O)))) B)
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
assert (Hb_town:=H_sub' _ Hb).
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
apply False_rec.
destruct (In_dec 5 B) as [H5|H5].
assert (H_card_rem:cardinal (remove 5 B)=1).
idtac.
assert (H51:=fun HH : In 1 (remove 5 B) => H1 (remove_3 HH)).
assert (H52:=fun HH : In 2 (remove 5 B) => H2 (remove_3 HH)).
assert (H53:=fun HH : In 3 (remove 5 B) => H3 (remove_3 HH)).
assert (H54:=fun HH : In 4 (remove 5 B) => H4 (remove_3 HH)).
assert (H55:=(@remove_1 B _ _ (refl_equal 5))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
assert (H_sub':=@subset_remove_3 _ _ 5 H_sub).
assert (Hb_town:=H_sub' _ Hb).

*****
Hb_town : In b town_2
H_sub' : Subset (remove (S (S (S (S (S O))))) B) town_2
Hb : In b (remove (S (S (S (S (S O))))) B)
b : elt
H55 : not (In (S (S (S (S (S O))))) (remove (S (S (S (S (S O))))) B))
H54 : forall _ : In (S (S (S (S O)))) (remove (S (S (S (S (S O))))) B), False
H53 : forall _ : In (S (S (S O))) (remove (S (S (S (S (S O))))) B), False
H52 : forall _ : In (S (S O)) (remove (S (S (S (S (S O))))) B), False
H51 : forall _ : In (S O) (remove (S (S (S (S (S O))))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S (S (S O))))) B)) (S O)
H5 : In (S (S (S (S (S O))))) B
H4 : not (In (S (S (S (S O)))) B)
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
unfold town_2 in Hb_town.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
apply False_rec.
destruct (In_dec 5 B) as [H5|H5].
assert (H_card_rem:cardinal (remove 5 B)=1).
idtac.
assert (H51:=fun HH : In 1 (remove 5 B) => H1 (remove_3 HH)).
assert (H52:=fun HH : In 2 (remove 5 B) => H2 (remove_3 HH)).
assert (H53:=fun HH : In 3 (remove 5 B) => H3 (remove_3 HH)).
assert (H54:=fun HH : In 4 (remove 5 B) => H4 (remove_3 HH)).
assert (H55:=(@remove_1 B _ _ (refl_equal 5))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
assert (H_sub':=@subset_remove_3 _ _ 5 H_sub).
assert (Hb_town:=H_sub' _ Hb).
unfold town_2 in Hb_town.

*****
Hb_town : In b\n (add (S O)\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))))
H_sub' : Subset (remove (S (S (S (S (S O))))) B) town_2
Hb : In b (remove (S (S (S (S (S O))))) B)
b : elt
H55 : not (In (S (S (S (S (S O))))) (remove (S (S (S (S (S O))))) B))
H54 : forall _ : In (S (S (S (S O)))) (remove (S (S (S (S (S O))))) B), False
H53 : forall _ : In (S (S (S O))) (remove (S (S (S (S (S O))))) B), False
H52 : forall _ : In (S (S O)) (remove (S (S (S (S (S O))))) B), False
H51 : forall _ : In (S O) (remove (S (S (S (S (S O))))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S (S (S O))))) B)) (S O)
H5 : In (S (S (S (S (S O))))) B
H4 : not (In (S (S (S (S O)))) B)
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
destruct (proj1 (FM.add_iff _ _ b) Hb_town) as [Hb1_town|Hb1_town].
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
apply False_rec.
destruct (In_dec 5 B) as [H5|H5].
assert (H_card_rem:cardinal (remove 5 B)=1).
idtac.
assert (H51:=fun HH : In 1 (remove 5 B) => H1 (remove_3 HH)).
assert (H52:=fun HH : In 2 (remove 5 B) => H2 (remove_3 HH)).
assert (H53:=fun HH : In 3 (remove 5 B) => H3 (remove_3 HH)).
assert (H54:=fun HH : In 4 (remove 5 B) => H4 (remove_3 HH)).
assert (H55:=(@remove_1 B _ _ (refl_equal 5))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
assert (H_sub':=@subset_remove_3 _ _ 5 H_sub).
assert (Hb_town:=H_sub' _ Hb).
unfold town_2 in Hb_town.
destruct (proj1 (FM.add_iff _ _ b) Hb_town) as [Hb1_town|Hb1_town].

*****
Hb1_town : Logic.eq (S O) b
Hb_town : In b\n (add (S O)\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))))
H_sub' : Subset (remove (S (S (S (S (S O))))) B) town_2
Hb : In b (remove (S (S (S (S (S O))))) B)
b : elt
H55 : not (In (S (S (S (S (S O))))) (remove (S (S (S (S (S O))))) B))
H54 : forall _ : In (S (S (S (S O)))) (remove (S (S (S (S (S O))))) B), False
H53 : forall _ : In (S (S (S O))) (remove (S (S (S (S (S O))))) B), False
H52 : forall _ : In (S (S O)) (remove (S (S (S (S (S O))))) B), False
H51 : forall _ : In (S O) (remove (S (S (S (S (S O))))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S (S (S O))))) B)) (S O)
H5 : In (S (S (S (S (S O))))) B
H4 : not (In (S (S (S (S O)))) B)
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
apply H51.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
apply False_rec.
destruct (In_dec 5 B) as [H5|H5].
assert (H_card_rem:cardinal (remove 5 B)=1).
idtac.
assert (H51:=fun HH : In 1 (remove 5 B) => H1 (remove_3 HH)).
assert (H52:=fun HH : In 2 (remove 5 B) => H2 (remove_3 HH)).
assert (H53:=fun HH : In 3 (remove 5 B) => H3 (remove_3 HH)).
assert (H54:=fun HH : In 4 (remove 5 B) => H4 (remove_3 HH)).
assert (H55:=(@remove_1 B _ _ (refl_equal 5))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
assert (H_sub':=@subset_remove_3 _ _ 5 H_sub).
assert (Hb_town:=H_sub' _ Hb).
unfold town_2 in Hb_town.
destruct (proj1 (FM.add_iff _ _ b) Hb_town) as [Hb1_town|Hb1_town].
apply H51.

*****
Hb1_town : Logic.eq (S O) b
Hb_town : In b\n (add (S O)\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))))
H_sub' : Subset (remove (S (S (S (S (S O))))) B) town_2
Hb : In b (remove (S (S (S (S (S O))))) B)
b : elt
H55 : not (In (S (S (S (S (S O))))) (remove (S (S (S (S (S O))))) B))
H54 : forall _ : In (S (S (S (S O)))) (remove (S (S (S (S (S O))))) B), False
H53 : forall _ : In (S (S (S O))) (remove (S (S (S (S (S O))))) B), False
H52 : forall _ : In (S (S O)) (remove (S (S (S (S (S O))))) B), False
H51 : forall _ : In (S O) (remove (S (S (S (S (S O))))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S (S (S O))))) B)) (S O)
H5 : In (S (S (S (S (S O))))) B
H4 : not (In (S (S (S (S O)))) B)
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
In (S O) (remove (S (S (S (S (S O))))) B)
+++++
rewrite <- Hb1_town in Hb.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
apply False_rec.
destruct (In_dec 5 B) as [H5|H5].
assert (H_card_rem:cardinal (remove 5 B)=1).
idtac.
assert (H51:=fun HH : In 1 (remove 5 B) => H1 (remove_3 HH)).
assert (H52:=fun HH : In 2 (remove 5 B) => H2 (remove_3 HH)).
assert (H53:=fun HH : In 3 (remove 5 B) => H3 (remove_3 HH)).
assert (H54:=fun HH : In 4 (remove 5 B) => H4 (remove_3 HH)).
assert (H55:=(@remove_1 B _ _ (refl_equal 5))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
assert (H_sub':=@subset_remove_3 _ _ 5 H_sub).
assert (Hb_town:=H_sub' _ Hb).
unfold town_2 in Hb_town.
destruct (proj1 (FM.add_iff _ _ b) Hb_town) as [Hb1_town|Hb1_town].
apply H51.
rewrite <- Hb1_town in Hb.

*****
Hb1_town : Logic.eq (S O) b
Hb_town : In b\n (add (S O)\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))))
H_sub' : Subset (remove (S (S (S (S (S O))))) B) town_2
Hb : In (S O) (remove (S (S (S (S (S O))))) B)
b : elt
H55 : not (In (S (S (S (S (S O))))) (remove (S (S (S (S (S O))))) B))
H54 : forall _ : In (S (S (S (S O)))) (remove (S (S (S (S (S O))))) B), False
H53 : forall _ : In (S (S (S O))) (remove (S (S (S (S (S O))))) B), False
H52 : forall _ : In (S (S O)) (remove (S (S (S (S (S O))))) B), False
H51 : forall _ : In (S O) (remove (S (S (S (S (S O))))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S (S (S O))))) B)) (S O)
H5 : In (S (S (S (S (S O))))) B
H4 : not (In (S (S (S (S O)))) B)
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
In (S O) (remove (S (S (S (S (S O))))) B)
+++++
assumption.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
apply False_rec.
destruct (In_dec 5 B) as [H5|H5].
assert (H_card_rem:cardinal (remove 5 B)=1).
idtac.
assert (H51:=fun HH : In 1 (remove 5 B) => H1 (remove_3 HH)).
assert (H52:=fun HH : In 2 (remove 5 B) => H2 (remove_3 HH)).
assert (H53:=fun HH : In 3 (remove 5 B) => H3 (remove_3 HH)).
assert (H54:=fun HH : In 4 (remove 5 B) => H4 (remove_3 HH)).
assert (H55:=(@remove_1 B _ _ (refl_equal 5))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
assert (H_sub':=@subset_remove_3 _ _ 5 H_sub).
assert (Hb_town:=H_sub' _ Hb).
unfold town_2 in Hb_town.
destruct (proj1 (FM.add_iff _ _ b) Hb_town) as [Hb1_town|Hb1_town].

*****
Hb1_town : In b\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))))
Hb_town : In b\n (add (S O)\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))))
H_sub' : Subset (remove (S (S (S (S (S O))))) B) town_2
Hb : In b (remove (S (S (S (S (S O))))) B)
b : elt
H55 : not (In (S (S (S (S (S O))))) (remove (S (S (S (S (S O))))) B))
H54 : forall _ : In (S (S (S (S O)))) (remove (S (S (S (S (S O))))) B), False
H53 : forall _ : In (S (S (S O))) (remove (S (S (S (S (S O))))) B), False
H52 : forall _ : In (S (S O)) (remove (S (S (S (S (S O))))) B), False
H51 : forall _ : In (S O) (remove (S (S (S (S (S O))))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S (S (S O))))) B)) (S O)
H5 : In (S (S (S (S (S O))))) B
H4 : not (In (S (S (S (S O)))) B)
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
destruct (proj1 (FM.add_iff _ _ b) Hb1_town) as [Hb2_town|Hb2_town].
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
apply False_rec.
destruct (In_dec 5 B) as [H5|H5].
assert (H_card_rem:cardinal (remove 5 B)=1).
idtac.
assert (H51:=fun HH : In 1 (remove 5 B) => H1 (remove_3 HH)).
assert (H52:=fun HH : In 2 (remove 5 B) => H2 (remove_3 HH)).
assert (H53:=fun HH : In 3 (remove 5 B) => H3 (remove_3 HH)).
assert (H54:=fun HH : In 4 (remove 5 B) => H4 (remove_3 HH)).
assert (H55:=(@remove_1 B _ _ (refl_equal 5))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
assert (H_sub':=@subset_remove_3 _ _ 5 H_sub).
assert (Hb_town:=H_sub' _ Hb).
unfold town_2 in Hb_town.
destruct (proj1 (FM.add_iff _ _ b) Hb_town) as [Hb1_town|Hb1_town].
destruct (proj1 (FM.add_iff _ _ b) Hb1_town) as [Hb2_town|Hb2_town].

*****
Hb2_town : Logic.eq (S (S O)) b
Hb1_town : In b\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))))
Hb_town : In b\n (add (S O)\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))))
H_sub' : Subset (remove (S (S (S (S (S O))))) B) town_2
Hb : In b (remove (S (S (S (S (S O))))) B)
b : elt
H55 : not (In (S (S (S (S (S O))))) (remove (S (S (S (S (S O))))) B))
H54 : forall _ : In (S (S (S (S O)))) (remove (S (S (S (S (S O))))) B), False
H53 : forall _ : In (S (S (S O))) (remove (S (S (S (S (S O))))) B), False
H52 : forall _ : In (S (S O)) (remove (S (S (S (S (S O))))) B), False
H51 : forall _ : In (S O) (remove (S (S (S (S (S O))))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S (S (S O))))) B)) (S O)
H5 : In (S (S (S (S (S O))))) B
H4 : not (In (S (S (S (S O)))) B)
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
apply H52.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
apply False_rec.
destruct (In_dec 5 B) as [H5|H5].
assert (H_card_rem:cardinal (remove 5 B)=1).
idtac.
assert (H51:=fun HH : In 1 (remove 5 B) => H1 (remove_3 HH)).
assert (H52:=fun HH : In 2 (remove 5 B) => H2 (remove_3 HH)).
assert (H53:=fun HH : In 3 (remove 5 B) => H3 (remove_3 HH)).
assert (H54:=fun HH : In 4 (remove 5 B) => H4 (remove_3 HH)).
assert (H55:=(@remove_1 B _ _ (refl_equal 5))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
assert (H_sub':=@subset_remove_3 _ _ 5 H_sub).
assert (Hb_town:=H_sub' _ Hb).
unfold town_2 in Hb_town.
destruct (proj1 (FM.add_iff _ _ b) Hb_town) as [Hb1_town|Hb1_town].
destruct (proj1 (FM.add_iff _ _ b) Hb1_town) as [Hb2_town|Hb2_town].
apply H52.

*****
Hb2_town : Logic.eq (S (S O)) b
Hb1_town : In b\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))))
Hb_town : In b\n (add (S O)\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))))
H_sub' : Subset (remove (S (S (S (S (S O))))) B) town_2
Hb : In b (remove (S (S (S (S (S O))))) B)
b : elt
H55 : not (In (S (S (S (S (S O))))) (remove (S (S (S (S (S O))))) B))
H54 : forall _ : In (S (S (S (S O)))) (remove (S (S (S (S (S O))))) B), False
H53 : forall _ : In (S (S (S O))) (remove (S (S (S (S (S O))))) B), False
H52 : forall _ : In (S (S O)) (remove (S (S (S (S (S O))))) B), False
H51 : forall _ : In (S O) (remove (S (S (S (S (S O))))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S (S (S O))))) B)) (S O)
H5 : In (S (S (S (S (S O))))) B
H4 : not (In (S (S (S (S O)))) B)
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
In (S (S O)) (remove (S (S (S (S (S O))))) B)
+++++
rewrite <- Hb2_town in Hb.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
apply False_rec.
destruct (In_dec 5 B) as [H5|H5].
assert (H_card_rem:cardinal (remove 5 B)=1).
idtac.
assert (H51:=fun HH : In 1 (remove 5 B) => H1 (remove_3 HH)).
assert (H52:=fun HH : In 2 (remove 5 B) => H2 (remove_3 HH)).
assert (H53:=fun HH : In 3 (remove 5 B) => H3 (remove_3 HH)).
assert (H54:=fun HH : In 4 (remove 5 B) => H4 (remove_3 HH)).
assert (H55:=(@remove_1 B _ _ (refl_equal 5))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
assert (H_sub':=@subset_remove_3 _ _ 5 H_sub).
assert (Hb_town:=H_sub' _ Hb).
unfold town_2 in Hb_town.
destruct (proj1 (FM.add_iff _ _ b) Hb_town) as [Hb1_town|Hb1_town].
destruct (proj1 (FM.add_iff _ _ b) Hb1_town) as [Hb2_town|Hb2_town].
apply H52.
rewrite <- Hb2_town in Hb.

*****
Hb2_town : Logic.eq (S (S O)) b
Hb1_town : In b\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))))
Hb_town : In b\n (add (S O)\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))))
H_sub' : Subset (remove (S (S (S (S (S O))))) B) town_2
Hb : In (S (S O)) (remove (S (S (S (S (S O))))) B)
b : elt
H55 : not (In (S (S (S (S (S O))))) (remove (S (S (S (S (S O))))) B))
H54 : forall _ : In (S (S (S (S O)))) (remove (S (S (S (S (S O))))) B), False
H53 : forall _ : In (S (S (S O))) (remove (S (S (S (S (S O))))) B), False
H52 : forall _ : In (S (S O)) (remove (S (S (S (S (S O))))) B), False
H51 : forall _ : In (S O) (remove (S (S (S (S (S O))))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S (S (S O))))) B)) (S O)
H5 : In (S (S (S (S (S O))))) B
H4 : not (In (S (S (S (S O)))) B)
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
In (S (S O)) (remove (S (S (S (S (S O))))) B)
+++++
assumption.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
apply False_rec.
destruct (In_dec 5 B) as [H5|H5].
assert (H_card_rem:cardinal (remove 5 B)=1).
idtac.
assert (H51:=fun HH : In 1 (remove 5 B) => H1 (remove_3 HH)).
assert (H52:=fun HH : In 2 (remove 5 B) => H2 (remove_3 HH)).
assert (H53:=fun HH : In 3 (remove 5 B) => H3 (remove_3 HH)).
assert (H54:=fun HH : In 4 (remove 5 B) => H4 (remove_3 HH)).
assert (H55:=(@remove_1 B _ _ (refl_equal 5))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
assert (H_sub':=@subset_remove_3 _ _ 5 H_sub).
assert (Hb_town:=H_sub' _ Hb).
unfold town_2 in Hb_town.
destruct (proj1 (FM.add_iff _ _ b) Hb_town) as [Hb1_town|Hb1_town].
destruct (proj1 (FM.add_iff _ _ b) Hb1_town) as [Hb2_town|Hb2_town].

*****
Hb2_town : In b\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))
Hb1_town : In b\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))))
Hb_town : In b\n (add (S O)\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))))
H_sub' : Subset (remove (S (S (S (S (S O))))) B) town_2
Hb : In b (remove (S (S (S (S (S O))))) B)
b : elt
H55 : not (In (S (S (S (S (S O))))) (remove (S (S (S (S (S O))))) B))
H54 : forall _ : In (S (S (S (S O)))) (remove (S (S (S (S (S O))))) B), False
H53 : forall _ : In (S (S (S O))) (remove (S (S (S (S (S O))))) B), False
H52 : forall _ : In (S (S O)) (remove (S (S (S (S (S O))))) B), False
H51 : forall _ : In (S O) (remove (S (S (S (S (S O))))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S (S (S O))))) B)) (S O)
H5 : In (S (S (S (S (S O))))) B
H4 : not (In (S (S (S (S O)))) B)
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
destruct (proj1 (FM.add_iff _ _ b) Hb2_town) as [Hb3_town|Hb3_town].
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
apply False_rec.
destruct (In_dec 5 B) as [H5|H5].
assert (H_card_rem:cardinal (remove 5 B)=1).
idtac.
assert (H51:=fun HH : In 1 (remove 5 B) => H1 (remove_3 HH)).
assert (H52:=fun HH : In 2 (remove 5 B) => H2 (remove_3 HH)).
assert (H53:=fun HH : In 3 (remove 5 B) => H3 (remove_3 HH)).
assert (H54:=fun HH : In 4 (remove 5 B) => H4 (remove_3 HH)).
assert (H55:=(@remove_1 B _ _ (refl_equal 5))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
assert (H_sub':=@subset_remove_3 _ _ 5 H_sub).
assert (Hb_town:=H_sub' _ Hb).
unfold town_2 in Hb_town.
destruct (proj1 (FM.add_iff _ _ b) Hb_town) as [Hb1_town|Hb1_town].
destruct (proj1 (FM.add_iff _ _ b) Hb1_town) as [Hb2_town|Hb2_town].
destruct (proj1 (FM.add_iff _ _ b) Hb2_town) as [Hb3_town|Hb3_town].

*****
Hb3_town : Logic.eq (S (S (S O))) b
Hb2_town : In b\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))
Hb1_town : In b\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))))
Hb_town : In b\n (add (S O)\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))))
H_sub' : Subset (remove (S (S (S (S (S O))))) B) town_2
Hb : In b (remove (S (S (S (S (S O))))) B)
b : elt
H55 : not (In (S (S (S (S (S O))))) (remove (S (S (S (S (S O))))) B))
H54 : forall _ : In (S (S (S (S O)))) (remove (S (S (S (S (S O))))) B), False
H53 : forall _ : In (S (S (S O))) (remove (S (S (S (S (S O))))) B), False
H52 : forall _ : In (S (S O)) (remove (S (S (S (S (S O))))) B), False
H51 : forall _ : In (S O) (remove (S (S (S (S (S O))))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S (S (S O))))) B)) (S O)
H5 : In (S (S (S (S (S O))))) B
H4 : not (In (S (S (S (S O)))) B)
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
apply H53.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
apply False_rec.
destruct (In_dec 5 B) as [H5|H5].
assert (H_card_rem:cardinal (remove 5 B)=1).
idtac.
assert (H51:=fun HH : In 1 (remove 5 B) => H1 (remove_3 HH)).
assert (H52:=fun HH : In 2 (remove 5 B) => H2 (remove_3 HH)).
assert (H53:=fun HH : In 3 (remove 5 B) => H3 (remove_3 HH)).
assert (H54:=fun HH : In 4 (remove 5 B) => H4 (remove_3 HH)).
assert (H55:=(@remove_1 B _ _ (refl_equal 5))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
assert (H_sub':=@subset_remove_3 _ _ 5 H_sub).
assert (Hb_town:=H_sub' _ Hb).
unfold town_2 in Hb_town.
destruct (proj1 (FM.add_iff _ _ b) Hb_town) as [Hb1_town|Hb1_town].
destruct (proj1 (FM.add_iff _ _ b) Hb1_town) as [Hb2_town|Hb2_town].
destruct (proj1 (FM.add_iff _ _ b) Hb2_town) as [Hb3_town|Hb3_town].
apply H53.

*****
Hb3_town : Logic.eq (S (S (S O))) b
Hb2_town : In b\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))
Hb1_town : In b\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))))
Hb_town : In b\n (add (S O)\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))))
H_sub' : Subset (remove (S (S (S (S (S O))))) B) town_2
Hb : In b (remove (S (S (S (S (S O))))) B)
b : elt
H55 : not (In (S (S (S (S (S O))))) (remove (S (S (S (S (S O))))) B))
H54 : forall _ : In (S (S (S (S O)))) (remove (S (S (S (S (S O))))) B), False
H53 : forall _ : In (S (S (S O))) (remove (S (S (S (S (S O))))) B), False
H52 : forall _ : In (S (S O)) (remove (S (S (S (S (S O))))) B), False
H51 : forall _ : In (S O) (remove (S (S (S (S (S O))))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S (S (S O))))) B)) (S O)
H5 : In (S (S (S (S (S O))))) B
H4 : not (In (S (S (S (S O)))) B)
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
In (S (S (S O))) (remove (S (S (S (S (S O))))) B)
+++++
rewrite <- Hb3_town in Hb.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
apply False_rec.
destruct (In_dec 5 B) as [H5|H5].
assert (H_card_rem:cardinal (remove 5 B)=1).
idtac.
assert (H51:=fun HH : In 1 (remove 5 B) => H1 (remove_3 HH)).
assert (H52:=fun HH : In 2 (remove 5 B) => H2 (remove_3 HH)).
assert (H53:=fun HH : In 3 (remove 5 B) => H3 (remove_3 HH)).
assert (H54:=fun HH : In 4 (remove 5 B) => H4 (remove_3 HH)).
assert (H55:=(@remove_1 B _ _ (refl_equal 5))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
assert (H_sub':=@subset_remove_3 _ _ 5 H_sub).
assert (Hb_town:=H_sub' _ Hb).
unfold town_2 in Hb_town.
destruct (proj1 (FM.add_iff _ _ b) Hb_town) as [Hb1_town|Hb1_town].
destruct (proj1 (FM.add_iff _ _ b) Hb1_town) as [Hb2_town|Hb2_town].
destruct (proj1 (FM.add_iff _ _ b) Hb2_town) as [Hb3_town|Hb3_town].
apply H53.
rewrite <- Hb3_town in Hb.

*****
Hb3_town : Logic.eq (S (S (S O))) b
Hb2_town : In b\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))
Hb1_town : In b\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))))
Hb_town : In b\n (add (S O)\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))))
H_sub' : Subset (remove (S (S (S (S (S O))))) B) town_2
Hb : In (S (S (S O))) (remove (S (S (S (S (S O))))) B)
b : elt
H55 : not (In (S (S (S (S (S O))))) (remove (S (S (S (S (S O))))) B))
H54 : forall _ : In (S (S (S (S O)))) (remove (S (S (S (S (S O))))) B), False
H53 : forall _ : In (S (S (S O))) (remove (S (S (S (S (S O))))) B), False
H52 : forall _ : In (S (S O)) (remove (S (S (S (S (S O))))) B), False
H51 : forall _ : In (S O) (remove (S (S (S (S (S O))))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S (S (S O))))) B)) (S O)
H5 : In (S (S (S (S (S O))))) B
H4 : not (In (S (S (S (S O)))) B)
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
In (S (S (S O))) (remove (S (S (S (S (S O))))) B)
+++++
assumption.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
apply False_rec.
destruct (In_dec 5 B) as [H5|H5].
assert (H_card_rem:cardinal (remove 5 B)=1).
idtac.
assert (H51:=fun HH : In 1 (remove 5 B) => H1 (remove_3 HH)).
assert (H52:=fun HH : In 2 (remove 5 B) => H2 (remove_3 HH)).
assert (H53:=fun HH : In 3 (remove 5 B) => H3 (remove_3 HH)).
assert (H54:=fun HH : In 4 (remove 5 B) => H4 (remove_3 HH)).
assert (H55:=(@remove_1 B _ _ (refl_equal 5))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
assert (H_sub':=@subset_remove_3 _ _ 5 H_sub).
assert (Hb_town:=H_sub' _ Hb).
unfold town_2 in Hb_town.
destruct (proj1 (FM.add_iff _ _ b) Hb_town) as [Hb1_town|Hb1_town].
destruct (proj1 (FM.add_iff _ _ b) Hb1_town) as [Hb2_town|Hb2_town].
destruct (proj1 (FM.add_iff _ _ b) Hb2_town) as [Hb3_town|Hb3_town].

*****
Hb3_town : In b (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))
Hb2_town : In b\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))
Hb1_town : In b\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))))
Hb_town : In b\n (add (S O)\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))))
H_sub' : Subset (remove (S (S (S (S (S O))))) B) town_2
Hb : In b (remove (S (S (S (S (S O))))) B)
b : elt
H55 : not (In (S (S (S (S (S O))))) (remove (S (S (S (S (S O))))) B))
H54 : forall _ : In (S (S (S (S O)))) (remove (S (S (S (S (S O))))) B), False
H53 : forall _ : In (S (S (S O))) (remove (S (S (S (S (S O))))) B), False
H52 : forall _ : In (S (S O)) (remove (S (S (S (S (S O))))) B), False
H51 : forall _ : In (S O) (remove (S (S (S (S (S O))))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S (S (S O))))) B)) (S O)
H5 : In (S (S (S (S (S O))))) B
H4 : not (In (S (S (S (S O)))) B)
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
destruct (proj1 (FM.add_iff _ _ b) Hb3_town) as [Hb4_town|Hb4_town].
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
apply False_rec.
destruct (In_dec 5 B) as [H5|H5].
assert (H_card_rem:cardinal (remove 5 B)=1).
idtac.
assert (H51:=fun HH : In 1 (remove 5 B) => H1 (remove_3 HH)).
assert (H52:=fun HH : In 2 (remove 5 B) => H2 (remove_3 HH)).
assert (H53:=fun HH : In 3 (remove 5 B) => H3 (remove_3 HH)).
assert (H54:=fun HH : In 4 (remove 5 B) => H4 (remove_3 HH)).
assert (H55:=(@remove_1 B _ _ (refl_equal 5))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
assert (H_sub':=@subset_remove_3 _ _ 5 H_sub).
assert (Hb_town:=H_sub' _ Hb).
unfold town_2 in Hb_town.
destruct (proj1 (FM.add_iff _ _ b) Hb_town) as [Hb1_town|Hb1_town].
destruct (proj1 (FM.add_iff _ _ b) Hb1_town) as [Hb2_town|Hb2_town].
destruct (proj1 (FM.add_iff _ _ b) Hb2_town) as [Hb3_town|Hb3_town].
destruct (proj1 (FM.add_iff _ _ b) Hb3_town) as [Hb4_town|Hb4_town].

*****
Hb4_town : Logic.eq (S (S (S (S O)))) b
Hb3_town : In b (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))
Hb2_town : In b\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))
Hb1_town : In b\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))))
Hb_town : In b\n (add (S O)\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))))
H_sub' : Subset (remove (S (S (S (S (S O))))) B) town_2
Hb : In b (remove (S (S (S (S (S O))))) B)
b : elt
H55 : not (In (S (S (S (S (S O))))) (remove (S (S (S (S (S O))))) B))
H54 : forall _ : In (S (S (S (S O)))) (remove (S (S (S (S (S O))))) B), False
H53 : forall _ : In (S (S (S O))) (remove (S (S (S (S (S O))))) B), False
H52 : forall _ : In (S (S O)) (remove (S (S (S (S (S O))))) B), False
H51 : forall _ : In (S O) (remove (S (S (S (S (S O))))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S (S (S O))))) B)) (S O)
H5 : In (S (S (S (S (S O))))) B
H4 : not (In (S (S (S (S O)))) B)
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
apply H54.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
apply False_rec.
destruct (In_dec 5 B) as [H5|H5].
assert (H_card_rem:cardinal (remove 5 B)=1).
idtac.
assert (H51:=fun HH : In 1 (remove 5 B) => H1 (remove_3 HH)).
assert (H52:=fun HH : In 2 (remove 5 B) => H2 (remove_3 HH)).
assert (H53:=fun HH : In 3 (remove 5 B) => H3 (remove_3 HH)).
assert (H54:=fun HH : In 4 (remove 5 B) => H4 (remove_3 HH)).
assert (H55:=(@remove_1 B _ _ (refl_equal 5))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
assert (H_sub':=@subset_remove_3 _ _ 5 H_sub).
assert (Hb_town:=H_sub' _ Hb).
unfold town_2 in Hb_town.
destruct (proj1 (FM.add_iff _ _ b) Hb_town) as [Hb1_town|Hb1_town].
destruct (proj1 (FM.add_iff _ _ b) Hb1_town) as [Hb2_town|Hb2_town].
destruct (proj1 (FM.add_iff _ _ b) Hb2_town) as [Hb3_town|Hb3_town].
destruct (proj1 (FM.add_iff _ _ b) Hb3_town) as [Hb4_town|Hb4_town].
apply H54.

*****
Hb4_town : Logic.eq (S (S (S (S O)))) b
Hb3_town : In b (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))
Hb2_town : In b\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))
Hb1_town : In b\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))))
Hb_town : In b\n (add (S O)\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))))
H_sub' : Subset (remove (S (S (S (S (S O))))) B) town_2
Hb : In b (remove (S (S (S (S (S O))))) B)
b : elt
H55 : not (In (S (S (S (S (S O))))) (remove (S (S (S (S (S O))))) B))
H54 : forall _ : In (S (S (S (S O)))) (remove (S (S (S (S (S O))))) B), False
H53 : forall _ : In (S (S (S O))) (remove (S (S (S (S (S O))))) B), False
H52 : forall _ : In (S (S O)) (remove (S (S (S (S (S O))))) B), False
H51 : forall _ : In (S O) (remove (S (S (S (S (S O))))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S (S (S O))))) B)) (S O)
H5 : In (S (S (S (S (S O))))) B
H4 : not (In (S (S (S (S O)))) B)
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
In (S (S (S (S O)))) (remove (S (S (S (S (S O))))) B)
+++++
rewrite <- Hb4_town in Hb.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
apply False_rec.
destruct (In_dec 5 B) as [H5|H5].
assert (H_card_rem:cardinal (remove 5 B)=1).
idtac.
assert (H51:=fun HH : In 1 (remove 5 B) => H1 (remove_3 HH)).
assert (H52:=fun HH : In 2 (remove 5 B) => H2 (remove_3 HH)).
assert (H53:=fun HH : In 3 (remove 5 B) => H3 (remove_3 HH)).
assert (H54:=fun HH : In 4 (remove 5 B) => H4 (remove_3 HH)).
assert (H55:=(@remove_1 B _ _ (refl_equal 5))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
assert (H_sub':=@subset_remove_3 _ _ 5 H_sub).
assert (Hb_town:=H_sub' _ Hb).
unfold town_2 in Hb_town.
destruct (proj1 (FM.add_iff _ _ b) Hb_town) as [Hb1_town|Hb1_town].
destruct (proj1 (FM.add_iff _ _ b) Hb1_town) as [Hb2_town|Hb2_town].
destruct (proj1 (FM.add_iff _ _ b) Hb2_town) as [Hb3_town|Hb3_town].
destruct (proj1 (FM.add_iff _ _ b) Hb3_town) as [Hb4_town|Hb4_town].
apply H54.
rewrite <- Hb4_town in Hb.

*****
Hb4_town : Logic.eq (S (S (S (S O)))) b
Hb3_town : In b (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))
Hb2_town : In b\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))
Hb1_town : In b\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))))
Hb_town : In b\n (add (S O)\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))))
H_sub' : Subset (remove (S (S (S (S (S O))))) B) town_2
Hb : In (S (S (S (S O)))) (remove (S (S (S (S (S O))))) B)
b : elt
H55 : not (In (S (S (S (S (S O))))) (remove (S (S (S (S (S O))))) B))
H54 : forall _ : In (S (S (S (S O)))) (remove (S (S (S (S (S O))))) B), False
H53 : forall _ : In (S (S (S O))) (remove (S (S (S (S (S O))))) B), False
H52 : forall _ : In (S (S O)) (remove (S (S (S (S (S O))))) B), False
H51 : forall _ : In (S O) (remove (S (S (S (S (S O))))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S (S (S O))))) B)) (S O)
H5 : In (S (S (S (S (S O))))) B
H4 : not (In (S (S (S (S O)))) B)
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
In (S (S (S (S O)))) (remove (S (S (S (S (S O))))) B)
+++++
assumption.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
apply False_rec.
destruct (In_dec 5 B) as [H5|H5].
assert (H_card_rem:cardinal (remove 5 B)=1).
idtac.
assert (H51:=fun HH : In 1 (remove 5 B) => H1 (remove_3 HH)).
assert (H52:=fun HH : In 2 (remove 5 B) => H2 (remove_3 HH)).
assert (H53:=fun HH : In 3 (remove 5 B) => H3 (remove_3 HH)).
assert (H54:=fun HH : In 4 (remove 5 B) => H4 (remove_3 HH)).
assert (H55:=(@remove_1 B _ _ (refl_equal 5))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
assert (H_sub':=@subset_remove_3 _ _ 5 H_sub).
assert (Hb_town:=H_sub' _ Hb).
unfold town_2 in Hb_town.
destruct (proj1 (FM.add_iff _ _ b) Hb_town) as [Hb1_town|Hb1_town].
destruct (proj1 (FM.add_iff _ _ b) Hb1_town) as [Hb2_town|Hb2_town].
destruct (proj1 (FM.add_iff _ _ b) Hb2_town) as [Hb3_town|Hb3_town].
destruct (proj1 (FM.add_iff _ _ b) Hb3_town) as [Hb4_town|Hb4_town].

*****
Hb4_town : In b (add (S (S (S (S (S O))))) empty)
Hb3_town : In b (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))
Hb2_town : In b\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))
Hb1_town : In b\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))))
Hb_town : In b\n (add (S O)\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))))
H_sub' : Subset (remove (S (S (S (S (S O))))) B) town_2
Hb : In b (remove (S (S (S (S (S O))))) B)
b : elt
H55 : not (In (S (S (S (S (S O))))) (remove (S (S (S (S (S O))))) B))
H54 : forall _ : In (S (S (S (S O)))) (remove (S (S (S (S (S O))))) B), False
H53 : forall _ : In (S (S (S O))) (remove (S (S (S (S (S O))))) B), False
H52 : forall _ : In (S (S O)) (remove (S (S (S (S (S O))))) B), False
H51 : forall _ : In (S O) (remove (S (S (S (S (S O))))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S (S (S O))))) B)) (S O)
H5 : In (S (S (S (S (S O))))) B
H4 : not (In (S (S (S (S O)))) B)
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
destruct (proj1 (FM.add_iff _ _ b) Hb4_town) as [Hb5_town|Hb5_town].
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
apply False_rec.
destruct (In_dec 5 B) as [H5|H5].
assert (H_card_rem:cardinal (remove 5 B)=1).
idtac.
assert (H51:=fun HH : In 1 (remove 5 B) => H1 (remove_3 HH)).
assert (H52:=fun HH : In 2 (remove 5 B) => H2 (remove_3 HH)).
assert (H53:=fun HH : In 3 (remove 5 B) => H3 (remove_3 HH)).
assert (H54:=fun HH : In 4 (remove 5 B) => H4 (remove_3 HH)).
assert (H55:=(@remove_1 B _ _ (refl_equal 5))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
assert (H_sub':=@subset_remove_3 _ _ 5 H_sub).
assert (Hb_town:=H_sub' _ Hb).
unfold town_2 in Hb_town.
destruct (proj1 (FM.add_iff _ _ b) Hb_town) as [Hb1_town|Hb1_town].
destruct (proj1 (FM.add_iff _ _ b) Hb1_town) as [Hb2_town|Hb2_town].
destruct (proj1 (FM.add_iff _ _ b) Hb2_town) as [Hb3_town|Hb3_town].
destruct (proj1 (FM.add_iff _ _ b) Hb3_town) as [Hb4_town|Hb4_town].
destruct (proj1 (FM.add_iff _ _ b) Hb4_town) as [Hb5_town|Hb5_town].

*****
Hb5_town : Logic.eq (S (S (S (S (S O))))) b
Hb4_town : In b (add (S (S (S (S (S O))))) empty)
Hb3_town : In b (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))
Hb2_town : In b\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))
Hb1_town : In b\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))))
Hb_town : In b\n (add (S O)\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))))
H_sub' : Subset (remove (S (S (S (S (S O))))) B) town_2
Hb : In b (remove (S (S (S (S (S O))))) B)
b : elt
H55 : not (In (S (S (S (S (S O))))) (remove (S (S (S (S (S O))))) B))
H54 : forall _ : In (S (S (S (S O)))) (remove (S (S (S (S (S O))))) B), False
H53 : forall _ : In (S (S (S O))) (remove (S (S (S (S (S O))))) B), False
H52 : forall _ : In (S (S O)) (remove (S (S (S (S (S O))))) B), False
H51 : forall _ : In (S O) (remove (S (S (S (S (S O))))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S (S (S O))))) B)) (S O)
H5 : In (S (S (S (S (S O))))) B
H4 : not (In (S (S (S (S O)))) B)
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
apply H55.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
apply False_rec.
destruct (In_dec 5 B) as [H5|H5].
assert (H_card_rem:cardinal (remove 5 B)=1).
idtac.
assert (H51:=fun HH : In 1 (remove 5 B) => H1 (remove_3 HH)).
assert (H52:=fun HH : In 2 (remove 5 B) => H2 (remove_3 HH)).
assert (H53:=fun HH : In 3 (remove 5 B) => H3 (remove_3 HH)).
assert (H54:=fun HH : In 4 (remove 5 B) => H4 (remove_3 HH)).
assert (H55:=(@remove_1 B _ _ (refl_equal 5))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
assert (H_sub':=@subset_remove_3 _ _ 5 H_sub).
assert (Hb_town:=H_sub' _ Hb).
unfold town_2 in Hb_town.
destruct (proj1 (FM.add_iff _ _ b) Hb_town) as [Hb1_town|Hb1_town].
destruct (proj1 (FM.add_iff _ _ b) Hb1_town) as [Hb2_town|Hb2_town].
destruct (proj1 (FM.add_iff _ _ b) Hb2_town) as [Hb3_town|Hb3_town].
destruct (proj1 (FM.add_iff _ _ b) Hb3_town) as [Hb4_town|Hb4_town].
destruct (proj1 (FM.add_iff _ _ b) Hb4_town) as [Hb5_town|Hb5_town].
apply H55.

*****
Hb5_town : Logic.eq (S (S (S (S (S O))))) b
Hb4_town : In b (add (S (S (S (S (S O))))) empty)
Hb3_town : In b (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))
Hb2_town : In b\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))
Hb1_town : In b\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))))
Hb_town : In b\n (add (S O)\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))))
H_sub' : Subset (remove (S (S (S (S (S O))))) B) town_2
Hb : In b (remove (S (S (S (S (S O))))) B)
b : elt
H55 : not (In (S (S (S (S (S O))))) (remove (S (S (S (S (S O))))) B))
H54 : forall _ : In (S (S (S (S O)))) (remove (S (S (S (S (S O))))) B), False
H53 : forall _ : In (S (S (S O))) (remove (S (S (S (S (S O))))) B), False
H52 : forall _ : In (S (S O)) (remove (S (S (S (S (S O))))) B), False
H51 : forall _ : In (S O) (remove (S (S (S (S (S O))))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S (S (S O))))) B)) (S O)
H5 : In (S (S (S (S (S O))))) B
H4 : not (In (S (S (S (S O)))) B)
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
In (S (S (S (S (S O))))) (remove (S (S (S (S (S O))))) B)
+++++
rewrite <- Hb5_town in Hb.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
apply False_rec.
destruct (In_dec 5 B) as [H5|H5].
assert (H_card_rem:cardinal (remove 5 B)=1).
idtac.
assert (H51:=fun HH : In 1 (remove 5 B) => H1 (remove_3 HH)).
assert (H52:=fun HH : In 2 (remove 5 B) => H2 (remove_3 HH)).
assert (H53:=fun HH : In 3 (remove 5 B) => H3 (remove_3 HH)).
assert (H54:=fun HH : In 4 (remove 5 B) => H4 (remove_3 HH)).
assert (H55:=(@remove_1 B _ _ (refl_equal 5))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
assert (H_sub':=@subset_remove_3 _ _ 5 H_sub).
assert (Hb_town:=H_sub' _ Hb).
unfold town_2 in Hb_town.
destruct (proj1 (FM.add_iff _ _ b) Hb_town) as [Hb1_town|Hb1_town].
destruct (proj1 (FM.add_iff _ _ b) Hb1_town) as [Hb2_town|Hb2_town].
destruct (proj1 (FM.add_iff _ _ b) Hb2_town) as [Hb3_town|Hb3_town].
destruct (proj1 (FM.add_iff _ _ b) Hb3_town) as [Hb4_town|Hb4_town].
destruct (proj1 (FM.add_iff _ _ b) Hb4_town) as [Hb5_town|Hb5_town].
apply H55.
rewrite <- Hb5_town in Hb.

*****
Hb5_town : Logic.eq (S (S (S (S (S O))))) b
Hb4_town : In b (add (S (S (S (S (S O))))) empty)
Hb3_town : In b (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))
Hb2_town : In b\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))
Hb1_town : In b\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))))
Hb_town : In b\n (add (S O)\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))))
H_sub' : Subset (remove (S (S (S (S (S O))))) B) town_2
Hb : In (S (S (S (S (S O))))) (remove (S (S (S (S (S O))))) B)
b : elt
H55 : not (In (S (S (S (S (S O))))) (remove (S (S (S (S (S O))))) B))
H54 : forall _ : In (S (S (S (S O)))) (remove (S (S (S (S (S O))))) B), False
H53 : forall _ : In (S (S (S O))) (remove (S (S (S (S (S O))))) B), False
H52 : forall _ : In (S (S O)) (remove (S (S (S (S (S O))))) B), False
H51 : forall _ : In (S O) (remove (S (S (S (S (S O))))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S (S (S O))))) B)) (S O)
H5 : In (S (S (S (S (S O))))) B
H4 : not (In (S (S (S (S O)))) B)
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
In (S (S (S (S (S O))))) (remove (S (S (S (S (S O))))) B)
+++++
assumption.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
apply False_rec.
destruct (In_dec 5 B) as [H5|H5].
assert (H_card_rem:cardinal (remove 5 B)=1).
idtac.
assert (H51:=fun HH : In 1 (remove 5 B) => H1 (remove_3 HH)).
assert (H52:=fun HH : In 2 (remove 5 B) => H2 (remove_3 HH)).
assert (H53:=fun HH : In 3 (remove 5 B) => H3 (remove_3 HH)).
assert (H54:=fun HH : In 4 (remove 5 B) => H4 (remove_3 HH)).
assert (H55:=(@remove_1 B _ _ (refl_equal 5))).
destruct (cardinal_inv_2 H_card_rem) as [b Hb].
assert (H_sub':=@subset_remove_3 _ _ 5 H_sub).
assert (Hb_town:=H_sub' _ Hb).
unfold town_2 in Hb_town.
destruct (proj1 (FM.add_iff _ _ b) Hb_town) as [Hb1_town|Hb1_town].
destruct (proj1 (FM.add_iff _ _ b) Hb1_town) as [Hb2_town|Hb2_town].
destruct (proj1 (FM.add_iff _ _ b) Hb2_town) as [Hb3_town|Hb3_town].
destruct (proj1 (FM.add_iff _ _ b) Hb3_town) as [Hb4_town|Hb4_town].
destruct (proj1 (FM.add_iff _ _ b) Hb4_town) as [Hb5_town|Hb5_town].

*****
Hb5_town : In b empty
Hb4_town : In b (add (S (S (S (S (S O))))) empty)
Hb3_town : In b (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))
Hb2_town : In b\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))
Hb1_town : In b\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))))
Hb_town : In b\n (add (S O)\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))))
H_sub' : Subset (remove (S (S (S (S (S O))))) B) town_2
Hb : In b (remove (S (S (S (S (S O))))) B)
b : elt
H55 : not (In (S (S (S (S (S O))))) (remove (S (S (S (S (S O))))) B))
H54 : forall _ : In (S (S (S (S O)))) (remove (S (S (S (S (S O))))) B), False
H53 : forall _ : In (S (S (S O))) (remove (S (S (S (S (S O))))) B), False
H52 : forall _ : In (S (S O)) (remove (S (S (S (S (S O))))) B), False
H51 : forall _ : In (S O) (remove (S (S (S (S (S O))))) B), False
H_card_rem : Logic.eq (cardinal (remove (S (S (S (S (S O))))) B)) (S O)
H5 : In (S (S (S (S (S O))))) B
H4 : not (In (S (S (S (S O)))) B)
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
apply (proj1 (FM.empty_iff b) Hb5_town).
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
apply False_rec.
destruct (In_dec 5 B) as [H5|H5].

*****
H5 : not (In (S (S (S (S (S O))))) B)
H4 : not (In (S (S (S (S O)))) B)
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
destruct (cardinal_inv_2 H_card) as [b Hb].
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
apply False_rec.
destruct (In_dec 5 B) as [H5|H5].
destruct (cardinal_inv_2 H_card) as [b Hb].

*****
Hb : In b B
b : elt
H5 : not (In (S (S (S (S (S O))))) B)
H4 : not (In (S (S (S (S O)))) B)
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
apply False_rec.
destruct (In_dec 5 B) as [H5|H5].
destruct (cardinal_inv_2 H_card) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].

*****
Hb1 : Logic.eq b (S O)
Hb : In b B
b : elt
H5 : not (In (S (S (S (S (S O))))) B)
H4 : not (In (S (S (S (S O)))) B)
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
apply H1.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
apply False_rec.
destruct (In_dec 5 B) as [H5|H5].
destruct (cardinal_inv_2 H_card) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
apply H1.

*****
Hb1 : Logic.eq b (S O)
Hb : In b B
b : elt
H5 : not (In (S (S (S (S (S O))))) B)
H4 : not (In (S (S (S (S O)))) B)
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
In (S O) B
+++++
rewrite Hb1 in Hb.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
apply False_rec.
destruct (In_dec 5 B) as [H5|H5].
destruct (cardinal_inv_2 H_card) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
apply H1.
rewrite Hb1 in Hb.

*****
Hb1 : Logic.eq b (S O)
Hb : In (S O) B
b : elt
H5 : not (In (S (S (S (S (S O))))) B)
H4 : not (In (S (S (S (S O)))) B)
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
In (S O) B
+++++
assumption.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
apply False_rec.
destruct (In_dec 5 B) as [H5|H5].
destruct (cardinal_inv_2 H_card) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].

*****
Hb1 : not (Logic.eq b (S O))
Hb : In b B
b : elt
H5 : not (In (S (S (S (S (S O))))) B)
H4 : not (In (S (S (S (S O)))) B)
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
apply False_rec.
destruct (In_dec 5 B) as [H5|H5].
destruct (cardinal_inv_2 H_card) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].

*****
Hb2 : Logic.eq b (S (S O))
Hb1 : not (Logic.eq b (S O))
Hb : In b B
b : elt
H5 : not (In (S (S (S (S (S O))))) B)
H4 : not (In (S (S (S (S O)))) B)
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
apply H2.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
apply False_rec.
destruct (In_dec 5 B) as [H5|H5].
destruct (cardinal_inv_2 H_card) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
apply H2.

*****
Hb2 : Logic.eq b (S (S O))
Hb1 : not (Logic.eq b (S O))
Hb : In b B
b : elt
H5 : not (In (S (S (S (S (S O))))) B)
H4 : not (In (S (S (S (S O)))) B)
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
In (S (S O)) B
+++++
rewrite Hb2 in Hb.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
apply False_rec.
destruct (In_dec 5 B) as [H5|H5].
destruct (cardinal_inv_2 H_card) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
apply H2.
rewrite Hb2 in Hb.

*****
Hb2 : Logic.eq b (S (S O))
Hb1 : not (Logic.eq b (S O))
Hb : In (S (S O)) B
b : elt
H5 : not (In (S (S (S (S (S O))))) B)
H4 : not (In (S (S (S (S O)))) B)
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
In (S (S O)) B
+++++
assumption.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
apply False_rec.
destruct (In_dec 5 B) as [H5|H5].
destruct (cardinal_inv_2 H_card) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].

*****
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b B
b : elt
H5 : not (In (S (S (S (S (S O))))) B)
H4 : not (In (S (S (S (S O)))) B)
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
apply False_rec.
destruct (In_dec 5 B) as [H5|H5].
destruct (cardinal_inv_2 H_card) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].

*****
Hb3 : Logic.eq b (S (S (S O)))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b B
b : elt
H5 : not (In (S (S (S (S (S O))))) B)
H4 : not (In (S (S (S (S O)))) B)
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
apply H3.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
apply False_rec.
destruct (In_dec 5 B) as [H5|H5].
destruct (cardinal_inv_2 H_card) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
apply H3.

*****
Hb3 : Logic.eq b (S (S (S O)))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b B
b : elt
H5 : not (In (S (S (S (S (S O))))) B)
H4 : not (In (S (S (S (S O)))) B)
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
In (S (S (S O))) B
+++++
rewrite Hb3 in Hb.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
apply False_rec.
destruct (In_dec 5 B) as [H5|H5].
destruct (cardinal_inv_2 H_card) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
apply H3.
rewrite Hb3 in Hb.

*****
Hb3 : Logic.eq b (S (S (S O)))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In (S (S (S O))) B
b : elt
H5 : not (In (S (S (S (S (S O))))) B)
H4 : not (In (S (S (S (S O)))) B)
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
In (S (S (S O))) B
+++++
assumption.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
apply False_rec.
destruct (In_dec 5 B) as [H5|H5].
destruct (cardinal_inv_2 H_card) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].

*****
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b B
b : elt
H5 : not (In (S (S (S (S (S O))))) B)
H4 : not (In (S (S (S (S O)))) B)
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
apply False_rec.
destruct (In_dec 5 B) as [H5|H5].
destruct (cardinal_inv_2 H_card) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].

*****
Hb4 : Logic.eq b (S (S (S (S O))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b B
b : elt
H5 : not (In (S (S (S (S (S O))))) B)
H4 : not (In (S (S (S (S O)))) B)
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
apply H4.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
apply False_rec.
destruct (In_dec 5 B) as [H5|H5].
destruct (cardinal_inv_2 H_card) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
apply H4.

*****
Hb4 : Logic.eq b (S (S (S (S O))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b B
b : elt
H5 : not (In (S (S (S (S (S O))))) B)
H4 : not (In (S (S (S (S O)))) B)
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
In (S (S (S (S O)))) B
+++++
rewrite Hb4 in Hb.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
apply False_rec.
destruct (In_dec 5 B) as [H5|H5].
destruct (cardinal_inv_2 H_card) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
apply H4.
rewrite Hb4 in Hb.

*****
Hb4 : Logic.eq b (S (S (S (S O))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In (S (S (S (S O)))) B
b : elt
H5 : not (In (S (S (S (S (S O))))) B)
H4 : not (In (S (S (S (S O)))) B)
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
In (S (S (S (S O)))) B
+++++
assumption.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
apply False_rec.
destruct (In_dec 5 B) as [H5|H5].
destruct (cardinal_inv_2 H_card) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].

*****
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b B
b : elt
H5 : not (In (S (S (S (S (S O))))) B)
H4 : not (In (S (S (S (S O)))) B)
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
apply False_rec.
destruct (In_dec 5 B) as [H5|H5].
destruct (cardinal_inv_2 H_card) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].

*****
Hb5 : Logic.eq b (S (S (S (S (S O)))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b B
b : elt
H5 : not (In (S (S (S (S (S O))))) B)
H4 : not (In (S (S (S (S O)))) B)
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
apply H5.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
apply False_rec.
destruct (In_dec 5 B) as [H5|H5].
destruct (cardinal_inv_2 H_card) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].
apply H5.

*****
Hb5 : Logic.eq b (S (S (S (S (S O)))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b B
b : elt
H5 : not (In (S (S (S (S (S O))))) B)
H4 : not (In (S (S (S (S O)))) B)
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
In (S (S (S (S (S O))))) B
+++++
rewrite <- Hb5.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
apply False_rec.
destruct (In_dec 5 B) as [H5|H5].
destruct (cardinal_inv_2 H_card) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].
apply H5.
rewrite <- Hb5.

*****
Hb5 : Logic.eq b (S (S (S (S (S O)))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b B
b : elt
H5 : not (In (S (S (S (S (S O))))) B)
H4 : not (In (S (S (S (S O)))) B)
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
In b B
+++++
assumption.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
apply False_rec.
destruct (In_dec 5 B) as [H5|H5].
destruct (cardinal_inv_2 H_card) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].

*****
Hb5 : not (Logic.eq b (S (S (S (S (S O))))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b B
b : elt
H5 : not (In (S (S (S (S (S O))))) B)
H4 : not (In (S (S (S (S O)))) B)
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
assert (Hb_town:=H_sub _ Hb).
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
apply False_rec.
destruct (In_dec 5 B) as [H5|H5].
destruct (cardinal_inv_2 H_card) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].
assert (Hb_town:=H_sub _ Hb).

*****
Hb_town : In b town_2
Hb5 : not (Logic.eq b (S (S (S (S (S O))))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b B
b : elt
H5 : not (In (S (S (S (S (S O))))) B)
H4 : not (In (S (S (S (S O)))) B)
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
unfold town_2 in Hb_town.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
apply False_rec.
destruct (In_dec 5 B) as [H5|H5].
destruct (cardinal_inv_2 H_card) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].
assert (Hb_town:=H_sub _ Hb).
unfold town_2 in Hb_town.

*****
Hb_town : In b\n (add (S O)\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))))
Hb5 : not (Logic.eq b (S (S (S (S (S O))))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b B
b : elt
H5 : not (In (S (S (S (S (S O))))) B)
H4 : not (In (S (S (S (S O)))) B)
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
destruct (proj1 (FM.add_iff _ _ b) Hb_town) as [Hb1_town|Hb1_town].
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
apply False_rec.
destruct (In_dec 5 B) as [H5|H5].
destruct (cardinal_inv_2 H_card) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].
assert (Hb_town:=H_sub _ Hb).
unfold town_2 in Hb_town.
destruct (proj1 (FM.add_iff _ _ b) Hb_town) as [Hb1_town|Hb1_town].

*****
Hb1_town : Logic.eq (S O) b
Hb_town : In b\n (add (S O)\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))))
Hb5 : not (Logic.eq b (S (S (S (S (S O))))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b B
b : elt
H5 : not (In (S (S (S (S (S O))))) B)
H4 : not (In (S (S (S (S O)))) B)
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
apply Hb1.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
apply False_rec.
destruct (In_dec 5 B) as [H5|H5].
destruct (cardinal_inv_2 H_card) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].
assert (Hb_town:=H_sub _ Hb).
unfold town_2 in Hb_town.
destruct (proj1 (FM.add_iff _ _ b) Hb_town) as [Hb1_town|Hb1_town].
apply Hb1.

*****
Hb1_town : Logic.eq (S O) b
Hb_town : In b\n (add (S O)\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))))
Hb5 : not (Logic.eq b (S (S (S (S (S O))))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b B
b : elt
H5 : not (In (S (S (S (S (S O))))) B)
H4 : not (In (S (S (S (S O)))) B)
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
Logic.eq b (S O)
+++++
rewrite Hb1_town.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
apply False_rec.
destruct (In_dec 5 B) as [H5|H5].
destruct (cardinal_inv_2 H_card) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].
assert (Hb_town:=H_sub _ Hb).
unfold town_2 in Hb_town.
destruct (proj1 (FM.add_iff _ _ b) Hb_town) as [Hb1_town|Hb1_town].
apply Hb1.
rewrite Hb1_town.

*****
Hb1_town : Logic.eq (S O) b
Hb_town : In b\n (add (S O)\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))))
Hb5 : not (Logic.eq b (S (S (S (S (S O))))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b B
b : elt
H5 : not (In (S (S (S (S (S O))))) B)
H4 : not (In (S (S (S (S O)))) B)
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
Logic.eq b b
+++++
reflexivity.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
apply False_rec.
destruct (In_dec 5 B) as [H5|H5].
destruct (cardinal_inv_2 H_card) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].
assert (Hb_town:=H_sub _ Hb).
unfold town_2 in Hb_town.
destruct (proj1 (FM.add_iff _ _ b) Hb_town) as [Hb1_town|Hb1_town].

*****
Hb1_town : In b\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))))
Hb_town : In b\n (add (S O)\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))))
Hb5 : not (Logic.eq b (S (S (S (S (S O))))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b B
b : elt
H5 : not (In (S (S (S (S (S O))))) B)
H4 : not (In (S (S (S (S O)))) B)
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
destruct (proj1 (FM.add_iff _ _ b) Hb1_town) as [Hb2_town|Hb2_town].
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
apply False_rec.
destruct (In_dec 5 B) as [H5|H5].
destruct (cardinal_inv_2 H_card) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].
assert (Hb_town:=H_sub _ Hb).
unfold town_2 in Hb_town.
destruct (proj1 (FM.add_iff _ _ b) Hb_town) as [Hb1_town|Hb1_town].
destruct (proj1 (FM.add_iff _ _ b) Hb1_town) as [Hb2_town|Hb2_town].

*****
Hb2_town : Logic.eq (S (S O)) b
Hb1_town : In b\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))))
Hb_town : In b\n (add (S O)\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))))
Hb5 : not (Logic.eq b (S (S (S (S (S O))))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b B
b : elt
H5 : not (In (S (S (S (S (S O))))) B)
H4 : not (In (S (S (S (S O)))) B)
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
apply Hb2.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
apply False_rec.
destruct (In_dec 5 B) as [H5|H5].
destruct (cardinal_inv_2 H_card) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].
assert (Hb_town:=H_sub _ Hb).
unfold town_2 in Hb_town.
destruct (proj1 (FM.add_iff _ _ b) Hb_town) as [Hb1_town|Hb1_town].
destruct (proj1 (FM.add_iff _ _ b) Hb1_town) as [Hb2_town|Hb2_town].
apply Hb2.

*****
Hb2_town : Logic.eq (S (S O)) b
Hb1_town : In b\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))))
Hb_town : In b\n (add (S O)\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))))
Hb5 : not (Logic.eq b (S (S (S (S (S O))))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b B
b : elt
H5 : not (In (S (S (S (S (S O))))) B)
H4 : not (In (S (S (S (S O)))) B)
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
Logic.eq b (S (S O))
+++++
rewrite Hb2_town.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
apply False_rec.
destruct (In_dec 5 B) as [H5|H5].
destruct (cardinal_inv_2 H_card) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].
assert (Hb_town:=H_sub _ Hb).
unfold town_2 in Hb_town.
destruct (proj1 (FM.add_iff _ _ b) Hb_town) as [Hb1_town|Hb1_town].
destruct (proj1 (FM.add_iff _ _ b) Hb1_town) as [Hb2_town|Hb2_town].
apply Hb2.
rewrite Hb2_town.

*****
Hb2_town : Logic.eq (S (S O)) b
Hb1_town : In b\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))))
Hb_town : In b\n (add (S O)\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))))
Hb5 : not (Logic.eq b (S (S (S (S (S O))))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b B
b : elt
H5 : not (In (S (S (S (S (S O))))) B)
H4 : not (In (S (S (S (S O)))) B)
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
Logic.eq b b
+++++
reflexivity.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
apply False_rec.
destruct (In_dec 5 B) as [H5|H5].
destruct (cardinal_inv_2 H_card) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].
assert (Hb_town:=H_sub _ Hb).
unfold town_2 in Hb_town.
destruct (proj1 (FM.add_iff _ _ b) Hb_town) as [Hb1_town|Hb1_town].
destruct (proj1 (FM.add_iff _ _ b) Hb1_town) as [Hb2_town|Hb2_town].

*****
Hb2_town : In b\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))
Hb1_town : In b\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))))
Hb_town : In b\n (add (S O)\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))))
Hb5 : not (Logic.eq b (S (S (S (S (S O))))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b B
b : elt
H5 : not (In (S (S (S (S (S O))))) B)
H4 : not (In (S (S (S (S O)))) B)
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
destruct (proj1 (FM.add_iff _ _ b) Hb2_town) as [Hb3_town|Hb3_town].
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
apply False_rec.
destruct (In_dec 5 B) as [H5|H5].
destruct (cardinal_inv_2 H_card) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].
assert (Hb_town:=H_sub _ Hb).
unfold town_2 in Hb_town.
destruct (proj1 (FM.add_iff _ _ b) Hb_town) as [Hb1_town|Hb1_town].
destruct (proj1 (FM.add_iff _ _ b) Hb1_town) as [Hb2_town|Hb2_town].
destruct (proj1 (FM.add_iff _ _ b) Hb2_town) as [Hb3_town|Hb3_town].

*****
Hb3_town : Logic.eq (S (S (S O))) b
Hb2_town : In b\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))
Hb1_town : In b\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))))
Hb_town : In b\n (add (S O)\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))))
Hb5 : not (Logic.eq b (S (S (S (S (S O))))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b B
b : elt
H5 : not (In (S (S (S (S (S O))))) B)
H4 : not (In (S (S (S (S O)))) B)
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
apply Hb3.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
apply False_rec.
destruct (In_dec 5 B) as [H5|H5].
destruct (cardinal_inv_2 H_card) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].
assert (Hb_town:=H_sub _ Hb).
unfold town_2 in Hb_town.
destruct (proj1 (FM.add_iff _ _ b) Hb_town) as [Hb1_town|Hb1_town].
destruct (proj1 (FM.add_iff _ _ b) Hb1_town) as [Hb2_town|Hb2_town].
destruct (proj1 (FM.add_iff _ _ b) Hb2_town) as [Hb3_town|Hb3_town].
apply Hb3.

*****
Hb3_town : Logic.eq (S (S (S O))) b
Hb2_town : In b\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))
Hb1_town : In b\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))))
Hb_town : In b\n (add (S O)\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))))
Hb5 : not (Logic.eq b (S (S (S (S (S O))))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b B
b : elt
H5 : not (In (S (S (S (S (S O))))) B)
H4 : not (In (S (S (S (S O)))) B)
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
Logic.eq b (S (S (S O)))
+++++
rewrite Hb3_town.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
apply False_rec.
destruct (In_dec 5 B) as [H5|H5].
destruct (cardinal_inv_2 H_card) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].
assert (Hb_town:=H_sub _ Hb).
unfold town_2 in Hb_town.
destruct (proj1 (FM.add_iff _ _ b) Hb_town) as [Hb1_town|Hb1_town].
destruct (proj1 (FM.add_iff _ _ b) Hb1_town) as [Hb2_town|Hb2_town].
destruct (proj1 (FM.add_iff _ _ b) Hb2_town) as [Hb3_town|Hb3_town].
apply Hb3.
rewrite Hb3_town.

*****
Hb3_town : Logic.eq (S (S (S O))) b
Hb2_town : In b\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))
Hb1_town : In b\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))))
Hb_town : In b\n (add (S O)\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))))
Hb5 : not (Logic.eq b (S (S (S (S (S O))))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b B
b : elt
H5 : not (In (S (S (S (S (S O))))) B)
H4 : not (In (S (S (S (S O)))) B)
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
Logic.eq b b
+++++
reflexivity.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
apply False_rec.
destruct (In_dec 5 B) as [H5|H5].
destruct (cardinal_inv_2 H_card) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].
assert (Hb_town:=H_sub _ Hb).
unfold town_2 in Hb_town.
destruct (proj1 (FM.add_iff _ _ b) Hb_town) as [Hb1_town|Hb1_town].
destruct (proj1 (FM.add_iff _ _ b) Hb1_town) as [Hb2_town|Hb2_town].
destruct (proj1 (FM.add_iff _ _ b) Hb2_town) as [Hb3_town|Hb3_town].

*****
Hb3_town : In b (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))
Hb2_town : In b\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))
Hb1_town : In b\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))))
Hb_town : In b\n (add (S O)\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))))
Hb5 : not (Logic.eq b (S (S (S (S (S O))))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b B
b : elt
H5 : not (In (S (S (S (S (S O))))) B)
H4 : not (In (S (S (S (S O)))) B)
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
destruct (proj1 (FM.add_iff _ _ b) Hb3_town) as [Hb4_town|Hb4_town].
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
apply False_rec.
destruct (In_dec 5 B) as [H5|H5].
destruct (cardinal_inv_2 H_card) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].
assert (Hb_town:=H_sub _ Hb).
unfold town_2 in Hb_town.
destruct (proj1 (FM.add_iff _ _ b) Hb_town) as [Hb1_town|Hb1_town].
destruct (proj1 (FM.add_iff _ _ b) Hb1_town) as [Hb2_town|Hb2_town].
destruct (proj1 (FM.add_iff _ _ b) Hb2_town) as [Hb3_town|Hb3_town].
destruct (proj1 (FM.add_iff _ _ b) Hb3_town) as [Hb4_town|Hb4_town].

*****
Hb4_town : Logic.eq (S (S (S (S O)))) b
Hb3_town : In b (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))
Hb2_town : In b\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))
Hb1_town : In b\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))))
Hb_town : In b\n (add (S O)\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))))
Hb5 : not (Logic.eq b (S (S (S (S (S O))))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b B
b : elt
H5 : not (In (S (S (S (S (S O))))) B)
H4 : not (In (S (S (S (S O)))) B)
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
apply Hb4.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
apply False_rec.
destruct (In_dec 5 B) as [H5|H5].
destruct (cardinal_inv_2 H_card) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].
assert (Hb_town:=H_sub _ Hb).
unfold town_2 in Hb_town.
destruct (proj1 (FM.add_iff _ _ b) Hb_town) as [Hb1_town|Hb1_town].
destruct (proj1 (FM.add_iff _ _ b) Hb1_town) as [Hb2_town|Hb2_town].
destruct (proj1 (FM.add_iff _ _ b) Hb2_town) as [Hb3_town|Hb3_town].
destruct (proj1 (FM.add_iff _ _ b) Hb3_town) as [Hb4_town|Hb4_town].
apply Hb4.

*****
Hb4_town : Logic.eq (S (S (S (S O)))) b
Hb3_town : In b (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))
Hb2_town : In b\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))
Hb1_town : In b\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))))
Hb_town : In b\n (add (S O)\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))))
Hb5 : not (Logic.eq b (S (S (S (S (S O))))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b B
b : elt
H5 : not (In (S (S (S (S (S O))))) B)
H4 : not (In (S (S (S (S O)))) B)
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
Logic.eq b (S (S (S (S O))))
+++++
rewrite Hb4_town.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
apply False_rec.
destruct (In_dec 5 B) as [H5|H5].
destruct (cardinal_inv_2 H_card) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].
assert (Hb_town:=H_sub _ Hb).
unfold town_2 in Hb_town.
destruct (proj1 (FM.add_iff _ _ b) Hb_town) as [Hb1_town|Hb1_town].
destruct (proj1 (FM.add_iff _ _ b) Hb1_town) as [Hb2_town|Hb2_town].
destruct (proj1 (FM.add_iff _ _ b) Hb2_town) as [Hb3_town|Hb3_town].
destruct (proj1 (FM.add_iff _ _ b) Hb3_town) as [Hb4_town|Hb4_town].
apply Hb4.
rewrite Hb4_town.

*****
Hb4_town : Logic.eq (S (S (S (S O)))) b
Hb3_town : In b (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))
Hb2_town : In b\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))
Hb1_town : In b\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))))
Hb_town : In b\n (add (S O)\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))))
Hb5 : not (Logic.eq b (S (S (S (S (S O))))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b B
b : elt
H5 : not (In (S (S (S (S (S O))))) B)
H4 : not (In (S (S (S (S O)))) B)
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
Logic.eq b b
+++++
reflexivity.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
apply False_rec.
destruct (In_dec 5 B) as [H5|H5].
destruct (cardinal_inv_2 H_card) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].
assert (Hb_town:=H_sub _ Hb).
unfold town_2 in Hb_town.
destruct (proj1 (FM.add_iff _ _ b) Hb_town) as [Hb1_town|Hb1_town].
destruct (proj1 (FM.add_iff _ _ b) Hb1_town) as [Hb2_town|Hb2_town].
destruct (proj1 (FM.add_iff _ _ b) Hb2_town) as [Hb3_town|Hb3_town].
destruct (proj1 (FM.add_iff _ _ b) Hb3_town) as [Hb4_town|Hb4_town].

*****
Hb4_town : In b (add (S (S (S (S (S O))))) empty)
Hb3_town : In b (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))
Hb2_town : In b\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))
Hb1_town : In b\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))))
Hb_town : In b\n (add (S O)\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))))
Hb5 : not (Logic.eq b (S (S (S (S (S O))))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b B
b : elt
H5 : not (In (S (S (S (S (S O))))) B)
H4 : not (In (S (S (S (S O)))) B)
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
destruct (proj1 (FM.add_iff _ _ b) Hb4_town) as [Hb5_town|Hb5_town].
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
apply False_rec.
destruct (In_dec 5 B) as [H5|H5].
destruct (cardinal_inv_2 H_card) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].
assert (Hb_town:=H_sub _ Hb).
unfold town_2 in Hb_town.
destruct (proj1 (FM.add_iff _ _ b) Hb_town) as [Hb1_town|Hb1_town].
destruct (proj1 (FM.add_iff _ _ b) Hb1_town) as [Hb2_town|Hb2_town].
destruct (proj1 (FM.add_iff _ _ b) Hb2_town) as [Hb3_town|Hb3_town].
destruct (proj1 (FM.add_iff _ _ b) Hb3_town) as [Hb4_town|Hb4_town].
destruct (proj1 (FM.add_iff _ _ b) Hb4_town) as [Hb5_town|Hb5_town].

*****
Hb5_town : Logic.eq (S (S (S (S (S O))))) b
Hb4_town : In b (add (S (S (S (S (S O))))) empty)
Hb3_town : In b (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))
Hb2_town : In b\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))
Hb1_town : In b\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))))
Hb_town : In b\n (add (S O)\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))))
Hb5 : not (Logic.eq b (S (S (S (S (S O))))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b B
b : elt
H5 : not (In (S (S (S (S (S O))))) B)
H4 : not (In (S (S (S (S O)))) B)
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
apply Hb5.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
apply False_rec.
destruct (In_dec 5 B) as [H5|H5].
destruct (cardinal_inv_2 H_card) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].
assert (Hb_town:=H_sub _ Hb).
unfold town_2 in Hb_town.
destruct (proj1 (FM.add_iff _ _ b) Hb_town) as [Hb1_town|Hb1_town].
destruct (proj1 (FM.add_iff _ _ b) Hb1_town) as [Hb2_town|Hb2_town].
destruct (proj1 (FM.add_iff _ _ b) Hb2_town) as [Hb3_town|Hb3_town].
destruct (proj1 (FM.add_iff _ _ b) Hb3_town) as [Hb4_town|Hb4_town].
destruct (proj1 (FM.add_iff _ _ b) Hb4_town) as [Hb5_town|Hb5_town].
apply Hb5.

*****
Hb5_town : Logic.eq (S (S (S (S (S O))))) b
Hb4_town : In b (add (S (S (S (S (S O))))) empty)
Hb3_town : In b (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))
Hb2_town : In b\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))
Hb1_town : In b\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))))
Hb_town : In b\n (add (S O)\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))))
Hb5 : not (Logic.eq b (S (S (S (S (S O))))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b B
b : elt
H5 : not (In (S (S (S (S (S O))))) B)
H4 : not (In (S (S (S (S O)))) B)
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
Logic.eq b (S (S (S (S (S O)))))
+++++
rewrite Hb5_town.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
apply False_rec.
destruct (In_dec 5 B) as [H5|H5].
destruct (cardinal_inv_2 H_card) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].
assert (Hb_town:=H_sub _ Hb).
unfold town_2 in Hb_town.
destruct (proj1 (FM.add_iff _ _ b) Hb_town) as [Hb1_town|Hb1_town].
destruct (proj1 (FM.add_iff _ _ b) Hb1_town) as [Hb2_town|Hb2_town].
destruct (proj1 (FM.add_iff _ _ b) Hb2_town) as [Hb3_town|Hb3_town].
destruct (proj1 (FM.add_iff _ _ b) Hb3_town) as [Hb4_town|Hb4_town].
destruct (proj1 (FM.add_iff _ _ b) Hb4_town) as [Hb5_town|Hb5_town].
apply Hb5.
rewrite Hb5_town.

*****
Hb5_town : Logic.eq (S (S (S (S (S O))))) b
Hb4_town : In b (add (S (S (S (S (S O))))) empty)
Hb3_town : In b (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))
Hb2_town : In b\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))
Hb1_town : In b\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))))
Hb_town : In b\n (add (S O)\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))))
Hb5 : not (Logic.eq b (S (S (S (S (S O))))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b B
b : elt
H5 : not (In (S (S (S (S (S O))))) B)
H4 : not (In (S (S (S (S O)))) B)
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
Logic.eq b b
+++++
reflexivity.
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].
destruct (In_dec 2 B) as [H2|H2].
destruct (In_dec 3 B) as [H3|H3].
destruct (In_dec 4 B) as [H4|H4].
apply False_rec.
destruct (In_dec 5 B) as [H5|H5].
destruct (cardinal_inv_2 H_card) as [b Hb].
destruct (NatSet.E.eq_dec b 1) as [Hb1|Hb1].
destruct (NatSet.E.eq_dec b 2) as [Hb2|Hb2].
destruct (NatSet.E.eq_dec b 3) as [Hb3|Hb3].
destruct (NatSet.E.eq_dec b 4) as [Hb4|Hb4].
destruct (NatSet.E.eq_dec b 5) as [Hb5|Hb5].
assert (Hb_town:=H_sub _ Hb).
unfold town_2 in Hb_town.
destruct (proj1 (FM.add_iff _ _ b) Hb_town) as [Hb1_town|Hb1_town].
destruct (proj1 (FM.add_iff _ _ b) Hb1_town) as [Hb2_town|Hb2_town].
destruct (proj1 (FM.add_iff _ _ b) Hb2_town) as [Hb3_town|Hb3_town].
destruct (proj1 (FM.add_iff _ _ b) Hb3_town) as [Hb4_town|Hb4_town].
destruct (proj1 (FM.add_iff _ _ b) Hb4_town) as [Hb5_town|Hb5_town].

*****
Hb5_town : In b empty
Hb4_town : In b (add (S (S (S (S (S O))))) empty)
Hb3_town : In b (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))
Hb2_town : In b\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))
Hb1_town : In b\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))))
Hb_town : In b\n (add (S O)\n (add (S (S O))\n (add (S (S (S O)))\n (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))))
Hb5 : not (Logic.eq b (S (S (S (S (S O))))))
Hb4 : not (Logic.eq b (S (S (S (S O)))))
Hb3 : not (Logic.eq b (S (S (S O))))
Hb2 : not (Logic.eq b (S (S O)))
Hb1 : not (Logic.eq b (S O))
Hb : In b B
b : elt
H5 : not (In (S (S (S (S (S O))))) B)
H4 : not (In (S (S (S (S O)))) B)
H3 : not (In (S (S (S O))) B)
H2 : not (In (S (S O)) B)
H1 : not (In (S O) B)
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
apply (proj1 (FM.empty_iff b) Hb5_town).
-----
Remark subsets_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {B [=] 1++2++empty}+{B[=]1++3++empty}+{B[=]1++4++empty}+{B [=] 1++5++empty}+{B[=]2++3++empty}+ {B[=]2++4++empty}+{B[=]2++5++empty}+{B[=]3++4++empty}+{B [=] 3++5++empty}+{B[=]4++5++empty}.
Proof.
intros B H_sub H_card.
destruct (In_dec 1 B) as [H1|H1].

*****

*****

+++++
Qed.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> \n          {d : elt |In d (diff town_2 B) /\ (forall b : elt, In b B -> familiarity_2 d b)}.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.

*****

*****
forall (B : t) (_ : Subset B town_2) (_ : Logic.eq (cardinal B) (S (S O))), sig (fun d : elt => and (In d (diff town_2 B)) (forall (b : elt) (_ : In b B), familiarity_2 d b))
+++++
Proof.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.

*****

*****
forall (B : t) (_ : Subset B town_2) (_ : Logic.eq (cardinal B) (S (S O))), sig (fun d : elt => and (In d (diff town_2 B)) (forall (b : elt) (_ : In b B), familiarity_2 d b))
+++++
intros B H_sub H_card.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.

*****
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
sig (fun d : elt => and (In d (diff town_2 B)) (forall (b : elt) (_ : In b B), familiarity_2 d b))
+++++
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].

*****
HB12 : Equal B (add (S O) (add (S (S O)) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
sig (fun d : elt => and (In d (diff town_2 B)) (forall (b : elt) (_ : In b B), familiarity_2 d b))
+++++
exists 5.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 5.

*****
HB12 : Equal B (add (S O) (add (S (S O)) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
and (In (S (S (S (S (S O))))) (diff town_2 B)) (forall (b : elt) (_ : In b B), familiarity_2 (S (S (S (S (S O))))) b)
+++++
split.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 5.
split.

*****
HB12 : Equal B (add (S O) (add (S (S O)) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
In (S (S (S (S (S O))))) (diff town_2 B)
+++++
rewrite HB12.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 5.
split.
rewrite HB12.

*****
HB12 : Equal B (add (S O) (add (S (S O)) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
In (S (S (S (S (S O))))) (diff town_2 (add (S O) (add (S (S O)) empty)))
+++++
apply mem_2.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 5.
split.
rewrite HB12.
apply mem_2.

*****
HB12 : Equal B (add (S O) (add (S (S O)) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
Logic.eq (mem (S (S (S (S (S O))))) (diff town_2 (add (S O) (add (S (S O)) empty)))) true
+++++
trivial.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 5.
split.

*****
HB12 : Equal B (add (S O) (add (S (S O)) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
forall (b : elt) (_ : In b B), familiarity_2 (S (S (S (S (S O))))) b
+++++
intro b.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 5.
split.
intro b.

*****
b : elt
HB12 : Equal B (add (S O) (add (S (S O)) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
forall _ : In b B, familiarity_2 (S (S (S (S (S O))))) b
+++++
rewrite HB12.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 5.
split.
intro b.
rewrite HB12.

*****
b : elt
HB12 : Equal B (add (S O) (add (S (S O)) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
forall _ : In b (add (S O) (add (S (S O)) empty)), familiarity_2 (S (S (S (S (S O))))) b
+++++
intro Hb.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 5.
split.
intro b.
rewrite HB12.
intro Hb.

*****
Hb : In b (add (S O) (add (S (S O)) empty))
b : elt
HB12 : Equal B (add (S O) (add (S (S O)) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
familiarity_2 (S (S (S (S (S O))))) b
+++++
destruct (proj1 (FM.add_iff _ _ b) Hb) as [H|H].
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 5.
split.
intro b.
rewrite HB12.
intro Hb.
destruct (proj1 (FM.add_iff _ _ b) Hb) as [H|H].

*****
H : Logic.eq (S O) b
Hb : In b (add (S O) (add (S (S O)) empty))
b : elt
HB12 : Equal B (add (S O) (add (S (S O)) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
familiarity_2 (S (S (S (S (S O))))) b
+++++
compute in H.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 5.
split.
intro b.
rewrite HB12.
intro Hb.
destruct (proj1 (FM.add_iff _ _ b) Hb) as [H|H].
compute in H.

*****
H : Logic.eq (S O) b
Hb : In b (add (S O) (add (S (S O)) empty))
b : elt
HB12 : Equal B (add (S O) (add (S (S O)) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
familiarity_2 (S (S (S (S (S O))))) b
+++++
rewrite <- H.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 5.
split.
intro b.
rewrite HB12.
intro Hb.
destruct (proj1 (FM.add_iff _ _ b) Hb) as [H|H].
compute in H.
rewrite <- H.

*****
H : Logic.eq (S O) b
Hb : In b (add (S O) (add (S (S O)) empty))
b : elt
HB12 : Equal B (add (S O) (add (S (S O)) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
familiarity_2 (S (S (S (S (S O))))) (S O)
+++++
simpl.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 5.
split.
intro b.
rewrite HB12.
intro Hb.
destruct (proj1 (FM.add_iff _ _ b) Hb) as [H|H].
compute in H.
rewrite <- H.
simpl.

*****
H : Logic.eq (S O) b
Hb : In b (add (S O) (add (S (S O)) empty))
b : elt
HB12 : Equal B (add (S O) (add (S (S O)) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
True
+++++
trivial.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 5.
split.
intro b.
rewrite HB12.
intro Hb.
destruct (proj1 (FM.add_iff _ _ b) Hb) as [H|H].

*****
H : In b (add (S (S O)) empty)
Hb : In b (add (S O) (add (S (S O)) empty))
b : elt
HB12 : Equal B (add (S O) (add (S (S O)) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
familiarity_2 (S (S (S (S (S O))))) b
+++++
destruct (proj1 (FM.add_iff _ _ b) H) as [H'|H'].
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 5.
split.
intro b.
rewrite HB12.
intro Hb.
destruct (proj1 (FM.add_iff _ _ b) Hb) as [H|H].
destruct (proj1 (FM.add_iff _ _ b) H) as [H'|H'].

*****
H' : Logic.eq (S (S O)) b
H : In b (add (S (S O)) empty)
Hb : In b (add (S O) (add (S (S O)) empty))
b : elt
HB12 : Equal B (add (S O) (add (S (S O)) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
familiarity_2 (S (S (S (S (S O))))) b
+++++
compute in H'.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 5.
split.
intro b.
rewrite HB12.
intro Hb.
destruct (proj1 (FM.add_iff _ _ b) Hb) as [H|H].
destruct (proj1 (FM.add_iff _ _ b) H) as [H'|H'].
compute in H'.

*****
H' : Logic.eq (S (S O)) b
H : In b (add (S (S O)) empty)
Hb : In b (add (S O) (add (S (S O)) empty))
b : elt
HB12 : Equal B (add (S O) (add (S (S O)) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
familiarity_2 (S (S (S (S (S O))))) b
+++++
rewrite <- H'.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 5.
split.
intro b.
rewrite HB12.
intro Hb.
destruct (proj1 (FM.add_iff _ _ b) Hb) as [H|H].
destruct (proj1 (FM.add_iff _ _ b) H) as [H'|H'].
compute in H'.
rewrite <- H'.

*****
H' : Logic.eq (S (S O)) b
H : In b (add (S (S O)) empty)
Hb : In b (add (S O) (add (S (S O)) empty))
b : elt
HB12 : Equal B (add (S O) (add (S (S O)) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
familiarity_2 (S (S (S (S (S O))))) (S (S O))
+++++
simpl.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 5.
split.
intro b.
rewrite HB12.
intro Hb.
destruct (proj1 (FM.add_iff _ _ b) Hb) as [H|H].
destruct (proj1 (FM.add_iff _ _ b) H) as [H'|H'].
compute in H'.
rewrite <- H'.
simpl.

*****
H' : Logic.eq (S (S O)) b
H : In b (add (S (S O)) empty)
Hb : In b (add (S O) (add (S (S O)) empty))
b : elt
HB12 : Equal B (add (S O) (add (S (S O)) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
True
+++++
trivial.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 5.
split.
intro b.
rewrite HB12.
intro Hb.
destruct (proj1 (FM.add_iff _ _ b) Hb) as [H|H].
destruct (proj1 (FM.add_iff _ _ b) H) as [H'|H'].

*****
H' : In b empty
H : In b (add (S (S O)) empty)
Hb : In b (add (S O) (add (S (S O)) empty))
b : elt
HB12 : Equal B (add (S O) (add (S (S O)) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
familiarity_2 (S (S (S (S (S O))))) b
+++++
apply False_ind.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 5.
split.
intro b.
rewrite HB12.
intro Hb.
destruct (proj1 (FM.add_iff _ _ b) Hb) as [H|H].
destruct (proj1 (FM.add_iff _ _ b) H) as [H'|H'].
apply False_ind.

*****
H' : In b empty
H : In b (add (S (S O)) empty)
Hb : In b (add (S O) (add (S (S O)) empty))
b : elt
HB12 : Equal B (add (S O) (add (S (S O)) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
apply (proj1 (FM.empty_iff b) H').
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].

*****
HB13 : Equal B (add (S O) (add (S (S (S O))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
sig (fun d : elt => and (In d (diff town_2 B)) (forall (b : elt) (_ : In b B), familiarity_2 d b))
+++++
exists 4.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 4.

*****
HB13 : Equal B (add (S O) (add (S (S (S O))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
and (In (S (S (S (S O)))) (diff town_2 B)) (forall (b : elt) (_ : In b B), familiarity_2 (S (S (S (S O)))) b)
+++++
split.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 4.
split.

*****
HB13 : Equal B (add (S O) (add (S (S (S O))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
In (S (S (S (S O)))) (diff town_2 B)
+++++
rewrite HB13.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 4.
split.
rewrite HB13.

*****
HB13 : Equal B (add (S O) (add (S (S (S O))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
In (S (S (S (S O)))) (diff town_2 (add (S O) (add (S (S (S O))) empty)))
+++++
apply mem_2.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 4.
split.
rewrite HB13.
apply mem_2.

*****
HB13 : Equal B (add (S O) (add (S (S (S O))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
Logic.eq (mem (S (S (S (S O)))) (diff town_2 (add (S O) (add (S (S (S O))) empty)))) true
+++++
trivial.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 4.
split.

*****
HB13 : Equal B (add (S O) (add (S (S (S O))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
forall (b : elt) (_ : In b B), familiarity_2 (S (S (S (S O)))) b
+++++
intro b.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 4.
split.
intro b.

*****
b : elt
HB13 : Equal B (add (S O) (add (S (S (S O))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
forall _ : In b B, familiarity_2 (S (S (S (S O)))) b
+++++
rewrite HB13.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 4.
split.
intro b.
rewrite HB13.

*****
b : elt
HB13 : Equal B (add (S O) (add (S (S (S O))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
forall _ : In b (add (S O) (add (S (S (S O))) empty)), familiarity_2 (S (S (S (S O)))) b
+++++
intro Hb.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 4.
split.
intro b.
rewrite HB13.
intro Hb.

*****
Hb : In b (add (S O) (add (S (S (S O))) empty))
b : elt
HB13 : Equal B (add (S O) (add (S (S (S O))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
familiarity_2 (S (S (S (S O)))) b
+++++
destruct (proj1 (FM.add_iff _ _ b) Hb) as [H|H].
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 4.
split.
intro b.
rewrite HB13.
intro Hb.
destruct (proj1 (FM.add_iff _ _ b) Hb) as [H|H].

*****
H : Logic.eq (S O) b
Hb : In b (add (S O) (add (S (S (S O))) empty))
b : elt
HB13 : Equal B (add (S O) (add (S (S (S O))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
familiarity_2 (S (S (S (S O)))) b
+++++
compute in H.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 4.
split.
intro b.
rewrite HB13.
intro Hb.
destruct (proj1 (FM.add_iff _ _ b) Hb) as [H|H].
compute in H.

*****
H : Logic.eq (S O) b
Hb : In b (add (S O) (add (S (S (S O))) empty))
b : elt
HB13 : Equal B (add (S O) (add (S (S (S O))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
familiarity_2 (S (S (S (S O)))) b
+++++
rewrite <- H.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 4.
split.
intro b.
rewrite HB13.
intro Hb.
destruct (proj1 (FM.add_iff _ _ b) Hb) as [H|H].
compute in H.
rewrite <- H.

*****
H : Logic.eq (S O) b
Hb : In b (add (S O) (add (S (S (S O))) empty))
b : elt
HB13 : Equal B (add (S O) (add (S (S (S O))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
familiarity_2 (S (S (S (S O)))) (S O)
+++++
simpl.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 4.
split.
intro b.
rewrite HB13.
intro Hb.
destruct (proj1 (FM.add_iff _ _ b) Hb) as [H|H].
compute in H.
rewrite <- H.
simpl.

*****
H : Logic.eq (S O) b
Hb : In b (add (S O) (add (S (S (S O))) empty))
b : elt
HB13 : Equal B (add (S O) (add (S (S (S O))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
True
+++++
trivial.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 4.
split.
intro b.
rewrite HB13.
intro Hb.
destruct (proj1 (FM.add_iff _ _ b) Hb) as [H|H].

*****
H : In b (add (S (S (S O))) empty)
Hb : In b (add (S O) (add (S (S (S O))) empty))
b : elt
HB13 : Equal B (add (S O) (add (S (S (S O))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
familiarity_2 (S (S (S (S O)))) b
+++++
destruct (proj1 (FM.add_iff _ _ b) H) as [H'|H'].
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 4.
split.
intro b.
rewrite HB13.
intro Hb.
destruct (proj1 (FM.add_iff _ _ b) Hb) as [H|H].
destruct (proj1 (FM.add_iff _ _ b) H) as [H'|H'].

*****
H' : Logic.eq (S (S (S O))) b
H : In b (add (S (S (S O))) empty)
Hb : In b (add (S O) (add (S (S (S O))) empty))
b : elt
HB13 : Equal B (add (S O) (add (S (S (S O))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
familiarity_2 (S (S (S (S O)))) b
+++++
compute in H'.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 4.
split.
intro b.
rewrite HB13.
intro Hb.
destruct (proj1 (FM.add_iff _ _ b) Hb) as [H|H].
destruct (proj1 (FM.add_iff _ _ b) H) as [H'|H'].
compute in H'.

*****
H' : Logic.eq (S (S (S O))) b
H : In b (add (S (S (S O))) empty)
Hb : In b (add (S O) (add (S (S (S O))) empty))
b : elt
HB13 : Equal B (add (S O) (add (S (S (S O))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
familiarity_2 (S (S (S (S O)))) b
+++++
rewrite <- H'.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 4.
split.
intro b.
rewrite HB13.
intro Hb.
destruct (proj1 (FM.add_iff _ _ b) Hb) as [H|H].
destruct (proj1 (FM.add_iff _ _ b) H) as [H'|H'].
compute in H'.
rewrite <- H'.

*****
H' : Logic.eq (S (S (S O))) b
H : In b (add (S (S (S O))) empty)
Hb : In b (add (S O) (add (S (S (S O))) empty))
b : elt
HB13 : Equal B (add (S O) (add (S (S (S O))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
familiarity_2 (S (S (S (S O)))) (S (S (S O)))
+++++
simpl.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 4.
split.
intro b.
rewrite HB13.
intro Hb.
destruct (proj1 (FM.add_iff _ _ b) Hb) as [H|H].
destruct (proj1 (FM.add_iff _ _ b) H) as [H'|H'].
compute in H'.
rewrite <- H'.
simpl.

*****
H' : Logic.eq (S (S (S O))) b
H : In b (add (S (S (S O))) empty)
Hb : In b (add (S O) (add (S (S (S O))) empty))
b : elt
HB13 : Equal B (add (S O) (add (S (S (S O))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
True
+++++
trivial.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 4.
split.
intro b.
rewrite HB13.
intro Hb.
destruct (proj1 (FM.add_iff _ _ b) Hb) as [H|H].
destruct (proj1 (FM.add_iff _ _ b) H) as [H'|H'].

*****
H' : In b empty
H : In b (add (S (S (S O))) empty)
Hb : In b (add (S O) (add (S (S (S O))) empty))
b : elt
HB13 : Equal B (add (S O) (add (S (S (S O))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
familiarity_2 (S (S (S (S O)))) b
+++++
apply False_ind.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 4.
split.
intro b.
rewrite HB13.
intro Hb.
destruct (proj1 (FM.add_iff _ _ b) Hb) as [H|H].
destruct (proj1 (FM.add_iff _ _ b) H) as [H'|H'].
apply False_ind.

*****
H' : In b empty
H : In b (add (S (S (S O))) empty)
Hb : In b (add (S O) (add (S (S (S O))) empty))
b : elt
HB13 : Equal B (add (S O) (add (S (S (S O))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
apply (proj1 (FM.empty_iff b) H').
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].

*****
HB14 : Equal B (add (S O) (add (S (S (S (S O)))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
sig (fun d : elt => and (In d (diff town_2 B)) (forall (b : elt) (_ : In b B), familiarity_2 d b))
+++++
exists 3.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 3.

*****
HB14 : Equal B (add (S O) (add (S (S (S (S O)))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
and (In (S (S (S O))) (diff town_2 B)) (forall (b : elt) (_ : In b B), familiarity_2 (S (S (S O))) b)
+++++
split.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 3.
split.

*****
HB14 : Equal B (add (S O) (add (S (S (S (S O)))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
In (S (S (S O))) (diff town_2 B)
+++++
rewrite HB14.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 3.
split.
rewrite HB14.

*****
HB14 : Equal B (add (S O) (add (S (S (S (S O)))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
In (S (S (S O))) (diff town_2 (add (S O) (add (S (S (S (S O)))) empty)))
+++++
apply mem_2.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 3.
split.
rewrite HB14.
apply mem_2.

*****
HB14 : Equal B (add (S O) (add (S (S (S (S O)))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
Logic.eq (mem (S (S (S O))) (diff town_2 (add (S O) (add (S (S (S (S O)))) empty)))) true
+++++
trivial.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 3.
split.

*****
HB14 : Equal B (add (S O) (add (S (S (S (S O)))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
forall (b : elt) (_ : In b B), familiarity_2 (S (S (S O))) b
+++++
intro b.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 3.
split.
intro b.

*****
b : elt
HB14 : Equal B (add (S O) (add (S (S (S (S O)))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
forall _ : In b B, familiarity_2 (S (S (S O))) b
+++++
rewrite HB14.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 3.
split.
intro b.
rewrite HB14.

*****
b : elt
HB14 : Equal B (add (S O) (add (S (S (S (S O)))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
forall _ : In b (add (S O) (add (S (S (S (S O)))) empty)), familiarity_2 (S (S (S O))) b
+++++
intro Hb.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 3.
split.
intro b.
rewrite HB14.
intro Hb.

*****
Hb : In b (add (S O) (add (S (S (S (S O)))) empty))
b : elt
HB14 : Equal B (add (S O) (add (S (S (S (S O)))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
familiarity_2 (S (S (S O))) b
+++++
destruct (proj1 (FM.add_iff _ _ b) Hb) as [H|H].
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 3.
split.
intro b.
rewrite HB14.
intro Hb.
destruct (proj1 (FM.add_iff _ _ b) Hb) as [H|H].

*****
H : Logic.eq (S O) b
Hb : In b (add (S O) (add (S (S (S (S O)))) empty))
b : elt
HB14 : Equal B (add (S O) (add (S (S (S (S O)))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
familiarity_2 (S (S (S O))) b
+++++
compute in H.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 3.
split.
intro b.
rewrite HB14.
intro Hb.
destruct (proj1 (FM.add_iff _ _ b) Hb) as [H|H].
compute in H.

*****
H : Logic.eq (S O) b
Hb : In b (add (S O) (add (S (S (S (S O)))) empty))
b : elt
HB14 : Equal B (add (S O) (add (S (S (S (S O)))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
familiarity_2 (S (S (S O))) b
+++++
rewrite <- H.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 3.
split.
intro b.
rewrite HB14.
intro Hb.
destruct (proj1 (FM.add_iff _ _ b) Hb) as [H|H].
compute in H.
rewrite <- H.

*****
H : Logic.eq (S O) b
Hb : In b (add (S O) (add (S (S (S (S O)))) empty))
b : elt
HB14 : Equal B (add (S O) (add (S (S (S (S O)))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
familiarity_2 (S (S (S O))) (S O)
+++++
simpl.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 3.
split.
intro b.
rewrite HB14.
intro Hb.
destruct (proj1 (FM.add_iff _ _ b) Hb) as [H|H].
compute in H.
rewrite <- H.
simpl.

*****
H : Logic.eq (S O) b
Hb : In b (add (S O) (add (S (S (S (S O)))) empty))
b : elt
HB14 : Equal B (add (S O) (add (S (S (S (S O)))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
True
+++++
trivial.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 3.
split.
intro b.
rewrite HB14.
intro Hb.
destruct (proj1 (FM.add_iff _ _ b) Hb) as [H|H].

*****
H : In b (add (S (S (S (S O)))) empty)
Hb : In b (add (S O) (add (S (S (S (S O)))) empty))
b : elt
HB14 : Equal B (add (S O) (add (S (S (S (S O)))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
familiarity_2 (S (S (S O))) b
+++++
destruct (proj1 (FM.add_iff _ _ b) H) as [H'|H'].
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 3.
split.
intro b.
rewrite HB14.
intro Hb.
destruct (proj1 (FM.add_iff _ _ b) Hb) as [H|H].
destruct (proj1 (FM.add_iff _ _ b) H) as [H'|H'].

*****
H' : Logic.eq (S (S (S (S O)))) b
H : In b (add (S (S (S (S O)))) empty)
Hb : In b (add (S O) (add (S (S (S (S O)))) empty))
b : elt
HB14 : Equal B (add (S O) (add (S (S (S (S O)))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
familiarity_2 (S (S (S O))) b
+++++
compute in H'.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 3.
split.
intro b.
rewrite HB14.
intro Hb.
destruct (proj1 (FM.add_iff _ _ b) Hb) as [H|H].
destruct (proj1 (FM.add_iff _ _ b) H) as [H'|H'].
compute in H'.

*****
H' : Logic.eq (S (S (S (S O)))) b
H : In b (add (S (S (S (S O)))) empty)
Hb : In b (add (S O) (add (S (S (S (S O)))) empty))
b : elt
HB14 : Equal B (add (S O) (add (S (S (S (S O)))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
familiarity_2 (S (S (S O))) b
+++++
rewrite <- H'.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 3.
split.
intro b.
rewrite HB14.
intro Hb.
destruct (proj1 (FM.add_iff _ _ b) Hb) as [H|H].
destruct (proj1 (FM.add_iff _ _ b) H) as [H'|H'].
compute in H'.
rewrite <- H'.

*****
H' : Logic.eq (S (S (S (S O)))) b
H : In b (add (S (S (S (S O)))) empty)
Hb : In b (add (S O) (add (S (S (S (S O)))) empty))
b : elt
HB14 : Equal B (add (S O) (add (S (S (S (S O)))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
familiarity_2 (S (S (S O))) (S (S (S (S O))))
+++++
simpl.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 3.
split.
intro b.
rewrite HB14.
intro Hb.
destruct (proj1 (FM.add_iff _ _ b) Hb) as [H|H].
destruct (proj1 (FM.add_iff _ _ b) H) as [H'|H'].
compute in H'.
rewrite <- H'.
simpl.

*****
H' : Logic.eq (S (S (S (S O)))) b
H : In b (add (S (S (S (S O)))) empty)
Hb : In b (add (S O) (add (S (S (S (S O)))) empty))
b : elt
HB14 : Equal B (add (S O) (add (S (S (S (S O)))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
True
+++++
trivial.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 3.
split.
intro b.
rewrite HB14.
intro Hb.
destruct (proj1 (FM.add_iff _ _ b) Hb) as [H|H].
destruct (proj1 (FM.add_iff _ _ b) H) as [H'|H'].

*****
H' : In b empty
H : In b (add (S (S (S (S O)))) empty)
Hb : In b (add (S O) (add (S (S (S (S O)))) empty))
b : elt
HB14 : Equal B (add (S O) (add (S (S (S (S O)))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
familiarity_2 (S (S (S O))) b
+++++
apply False_ind.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 3.
split.
intro b.
rewrite HB14.
intro Hb.
destruct (proj1 (FM.add_iff _ _ b) Hb) as [H|H].
destruct (proj1 (FM.add_iff _ _ b) H) as [H'|H'].
apply False_ind.

*****
H' : In b empty
H : In b (add (S (S (S (S O)))) empty)
Hb : In b (add (S O) (add (S (S (S (S O)))) empty))
b : elt
HB14 : Equal B (add (S O) (add (S (S (S (S O)))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
apply (proj1 (FM.empty_iff b) H').
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].

*****
HB15 : Equal B (add (S O) (add (S (S (S (S (S O))))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
sig (fun d : elt => and (In d (diff town_2 B)) (forall (b : elt) (_ : In b B), familiarity_2 d b))
+++++
exists 2.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 2.

*****
HB15 : Equal B (add (S O) (add (S (S (S (S (S O))))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
and (In (S (S O)) (diff town_2 B)) (forall (b : elt) (_ : In b B), familiarity_2 (S (S O)) b)
+++++
split.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 2.
split.

*****
HB15 : Equal B (add (S O) (add (S (S (S (S (S O))))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
In (S (S O)) (diff town_2 B)
+++++
rewrite HB15.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 2.
split.
rewrite HB15.

*****
HB15 : Equal B (add (S O) (add (S (S (S (S (S O))))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
In (S (S O)) (diff town_2 (add (S O) (add (S (S (S (S (S O))))) empty)))
+++++
apply mem_2.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 2.
split.
rewrite HB15.
apply mem_2.

*****
HB15 : Equal B (add (S O) (add (S (S (S (S (S O))))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
Logic.eq (mem (S (S O)) (diff town_2 (add (S O) (add (S (S (S (S (S O))))) empty)))) true
+++++
trivial.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 2.
split.

*****
HB15 : Equal B (add (S O) (add (S (S (S (S (S O))))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
forall (b : elt) (_ : In b B), familiarity_2 (S (S O)) b
+++++
intro b.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 2.
split.
intro b.

*****
b : elt
HB15 : Equal B (add (S O) (add (S (S (S (S (S O))))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
forall _ : In b B, familiarity_2 (S (S O)) b
+++++
rewrite HB15.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 2.
split.
intro b.
rewrite HB15.

*****
b : elt
HB15 : Equal B (add (S O) (add (S (S (S (S (S O))))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
forall _ : In b (add (S O) (add (S (S (S (S (S O))))) empty)), familiarity_2 (S (S O)) b
+++++
intro Hb.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 2.
split.
intro b.
rewrite HB15.
intro Hb.

*****
Hb : In b (add (S O) (add (S (S (S (S (S O))))) empty))
b : elt
HB15 : Equal B (add (S O) (add (S (S (S (S (S O))))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
familiarity_2 (S (S O)) b
+++++
destruct (proj1 (FM.add_iff _ _ b) Hb) as [H|H].
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 2.
split.
intro b.
rewrite HB15.
intro Hb.
destruct (proj1 (FM.add_iff _ _ b) Hb) as [H|H].

*****
H : Logic.eq (S O) b
Hb : In b (add (S O) (add (S (S (S (S (S O))))) empty))
b : elt
HB15 : Equal B (add (S O) (add (S (S (S (S (S O))))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
familiarity_2 (S (S O)) b
+++++
compute in H.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 2.
split.
intro b.
rewrite HB15.
intro Hb.
destruct (proj1 (FM.add_iff _ _ b) Hb) as [H|H].
compute in H.

*****
H : Logic.eq (S O) b
Hb : In b (add (S O) (add (S (S (S (S (S O))))) empty))
b : elt
HB15 : Equal B (add (S O) (add (S (S (S (S (S O))))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
familiarity_2 (S (S O)) b
+++++
rewrite <- H.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 2.
split.
intro b.
rewrite HB15.
intro Hb.
destruct (proj1 (FM.add_iff _ _ b) Hb) as [H|H].
compute in H.
rewrite <- H.

*****
H : Logic.eq (S O) b
Hb : In b (add (S O) (add (S (S (S (S (S O))))) empty))
b : elt
HB15 : Equal B (add (S O) (add (S (S (S (S (S O))))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
familiarity_2 (S (S O)) (S O)
+++++
simpl.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 2.
split.
intro b.
rewrite HB15.
intro Hb.
destruct (proj1 (FM.add_iff _ _ b) Hb) as [H|H].
compute in H.
rewrite <- H.
simpl.

*****
H : Logic.eq (S O) b
Hb : In b (add (S O) (add (S (S (S (S (S O))))) empty))
b : elt
HB15 : Equal B (add (S O) (add (S (S (S (S (S O))))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
True
+++++
trivial.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 2.
split.
intro b.
rewrite HB15.
intro Hb.
destruct (proj1 (FM.add_iff _ _ b) Hb) as [H|H].

*****
H : In b (add (S (S (S (S (S O))))) empty)
Hb : In b (add (S O) (add (S (S (S (S (S O))))) empty))
b : elt
HB15 : Equal B (add (S O) (add (S (S (S (S (S O))))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
familiarity_2 (S (S O)) b
+++++
destruct (proj1 (FM.add_iff _ _ b) H) as [H'|H'].
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 2.
split.
intro b.
rewrite HB15.
intro Hb.
destruct (proj1 (FM.add_iff _ _ b) Hb) as [H|H].
destruct (proj1 (FM.add_iff _ _ b) H) as [H'|H'].

*****
H' : Logic.eq (S (S (S (S (S O))))) b
H : In b (add (S (S (S (S (S O))))) empty)
Hb : In b (add (S O) (add (S (S (S (S (S O))))) empty))
b : elt
HB15 : Equal B (add (S O) (add (S (S (S (S (S O))))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
familiarity_2 (S (S O)) b
+++++
compute in H'.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 2.
split.
intro b.
rewrite HB15.
intro Hb.
destruct (proj1 (FM.add_iff _ _ b) Hb) as [H|H].
destruct (proj1 (FM.add_iff _ _ b) H) as [H'|H'].
compute in H'.

*****
H' : Logic.eq (S (S (S (S (S O))))) b
H : In b (add (S (S (S (S (S O))))) empty)
Hb : In b (add (S O) (add (S (S (S (S (S O))))) empty))
b : elt
HB15 : Equal B (add (S O) (add (S (S (S (S (S O))))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
familiarity_2 (S (S O)) b
+++++
rewrite <- H'.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 2.
split.
intro b.
rewrite HB15.
intro Hb.
destruct (proj1 (FM.add_iff _ _ b) Hb) as [H|H].
destruct (proj1 (FM.add_iff _ _ b) H) as [H'|H'].
compute in H'.
rewrite <- H'.

*****
H' : Logic.eq (S (S (S (S (S O))))) b
H : In b (add (S (S (S (S (S O))))) empty)
Hb : In b (add (S O) (add (S (S (S (S (S O))))) empty))
b : elt
HB15 : Equal B (add (S O) (add (S (S (S (S (S O))))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
familiarity_2 (S (S O)) (S (S (S (S (S O)))))
+++++
simpl.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 2.
split.
intro b.
rewrite HB15.
intro Hb.
destruct (proj1 (FM.add_iff _ _ b) Hb) as [H|H].
destruct (proj1 (FM.add_iff _ _ b) H) as [H'|H'].
compute in H'.
rewrite <- H'.
simpl.

*****
H' : Logic.eq (S (S (S (S (S O))))) b
H : In b (add (S (S (S (S (S O))))) empty)
Hb : In b (add (S O) (add (S (S (S (S (S O))))) empty))
b : elt
HB15 : Equal B (add (S O) (add (S (S (S (S (S O))))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
True
+++++
trivial.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 2.
split.
intro b.
rewrite HB15.
intro Hb.
destruct (proj1 (FM.add_iff _ _ b) Hb) as [H|H].
destruct (proj1 (FM.add_iff _ _ b) H) as [H'|H'].

*****
H' : In b empty
H : In b (add (S (S (S (S (S O))))) empty)
Hb : In b (add (S O) (add (S (S (S (S (S O))))) empty))
b : elt
HB15 : Equal B (add (S O) (add (S (S (S (S (S O))))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
familiarity_2 (S (S O)) b
+++++
apply False_ind.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 2.
split.
intro b.
rewrite HB15.
intro Hb.
destruct (proj1 (FM.add_iff _ _ b) Hb) as [H|H].
destruct (proj1 (FM.add_iff _ _ b) H) as [H'|H'].
apply False_ind.

*****
H' : In b empty
H : In b (add (S (S (S (S (S O))))) empty)
Hb : In b (add (S O) (add (S (S (S (S (S O))))) empty))
b : elt
HB15 : Equal B (add (S O) (add (S (S (S (S (S O))))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
apply (proj1 (FM.empty_iff b) H').
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].

*****
HB23 : Equal B (add (S (S O)) (add (S (S (S O))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
sig (fun d : elt => and (In d (diff town_2 B)) (forall (b : elt) (_ : In b B), familiarity_2 d b))
+++++
exists 5.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 5.

*****
HB23 : Equal B (add (S (S O)) (add (S (S (S O))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
and (In (S (S (S (S (S O))))) (diff town_2 B)) (forall (b : elt) (_ : In b B), familiarity_2 (S (S (S (S (S O))))) b)
+++++
split.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 5.
split.

*****
HB23 : Equal B (add (S (S O)) (add (S (S (S O))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
In (S (S (S (S (S O))))) (diff town_2 B)
+++++
rewrite HB23.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 5.
split.
rewrite HB23.

*****
HB23 : Equal B (add (S (S O)) (add (S (S (S O))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
In (S (S (S (S (S O))))) (diff town_2 (add (S (S O)) (add (S (S (S O))) empty)))
+++++
apply mem_2.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 5.
split.
rewrite HB23.
apply mem_2.

*****
HB23 : Equal B (add (S (S O)) (add (S (S (S O))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
Logic.eq (mem (S (S (S (S (S O))))) (diff town_2 (add (S (S O)) (add (S (S (S O))) empty)))) true
+++++
trivial.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 5.
split.

*****
HB23 : Equal B (add (S (S O)) (add (S (S (S O))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
forall (b : elt) (_ : In b B), familiarity_2 (S (S (S (S (S O))))) b
+++++
intro b.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 5.
split.
intro b.

*****
b : elt
HB23 : Equal B (add (S (S O)) (add (S (S (S O))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
forall _ : In b B, familiarity_2 (S (S (S (S (S O))))) b
+++++
rewrite HB23.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 5.
split.
intro b.
rewrite HB23.

*****
b : elt
HB23 : Equal B (add (S (S O)) (add (S (S (S O))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
forall _ : In b (add (S (S O)) (add (S (S (S O))) empty)), familiarity_2 (S (S (S (S (S O))))) b
+++++
intro Hb.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 5.
split.
intro b.
rewrite HB23.
intro Hb.

*****
Hb : In b (add (S (S O)) (add (S (S (S O))) empty))
b : elt
HB23 : Equal B (add (S (S O)) (add (S (S (S O))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
familiarity_2 (S (S (S (S (S O))))) b
+++++
destruct (proj1 (FM.add_iff _ _ b) Hb) as [H|H].
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 5.
split.
intro b.
rewrite HB23.
intro Hb.
destruct (proj1 (FM.add_iff _ _ b) Hb) as [H|H].

*****
H : Logic.eq (S (S O)) b
Hb : In b (add (S (S O)) (add (S (S (S O))) empty))
b : elt
HB23 : Equal B (add (S (S O)) (add (S (S (S O))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
familiarity_2 (S (S (S (S (S O))))) b
+++++
compute in H.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 5.
split.
intro b.
rewrite HB23.
intro Hb.
destruct (proj1 (FM.add_iff _ _ b) Hb) as [H|H].
compute in H.

*****
H : Logic.eq (S (S O)) b
Hb : In b (add (S (S O)) (add (S (S (S O))) empty))
b : elt
HB23 : Equal B (add (S (S O)) (add (S (S (S O))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
familiarity_2 (S (S (S (S (S O))))) b
+++++
rewrite <- H.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 5.
split.
intro b.
rewrite HB23.
intro Hb.
destruct (proj1 (FM.add_iff _ _ b) Hb) as [H|H].
compute in H.
rewrite <- H.

*****
H : Logic.eq (S (S O)) b
Hb : In b (add (S (S O)) (add (S (S (S O))) empty))
b : elt
HB23 : Equal B (add (S (S O)) (add (S (S (S O))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
familiarity_2 (S (S (S (S (S O))))) (S (S O))
+++++
simpl.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 5.
split.
intro b.
rewrite HB23.
intro Hb.
destruct (proj1 (FM.add_iff _ _ b) Hb) as [H|H].
compute in H.
rewrite <- H.
simpl.

*****
H : Logic.eq (S (S O)) b
Hb : In b (add (S (S O)) (add (S (S (S O))) empty))
b : elt
HB23 : Equal B (add (S (S O)) (add (S (S (S O))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
True
+++++
trivial.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 5.
split.
intro b.
rewrite HB23.
intro Hb.
destruct (proj1 (FM.add_iff _ _ b) Hb) as [H|H].

*****
H : In b (add (S (S (S O))) empty)
Hb : In b (add (S (S O)) (add (S (S (S O))) empty))
b : elt
HB23 : Equal B (add (S (S O)) (add (S (S (S O))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
familiarity_2 (S (S (S (S (S O))))) b
+++++
destruct (proj1 (FM.add_iff _ _ b) H) as [H'|H'].
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 5.
split.
intro b.
rewrite HB23.
intro Hb.
destruct (proj1 (FM.add_iff _ _ b) Hb) as [H|H].
destruct (proj1 (FM.add_iff _ _ b) H) as [H'|H'].

*****
H' : Logic.eq (S (S (S O))) b
H : In b (add (S (S (S O))) empty)
Hb : In b (add (S (S O)) (add (S (S (S O))) empty))
b : elt
HB23 : Equal B (add (S (S O)) (add (S (S (S O))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
familiarity_2 (S (S (S (S (S O))))) b
+++++
compute in H'.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 5.
split.
intro b.
rewrite HB23.
intro Hb.
destruct (proj1 (FM.add_iff _ _ b) Hb) as [H|H].
destruct (proj1 (FM.add_iff _ _ b) H) as [H'|H'].
compute in H'.

*****
H' : Logic.eq (S (S (S O))) b
H : In b (add (S (S (S O))) empty)
Hb : In b (add (S (S O)) (add (S (S (S O))) empty))
b : elt
HB23 : Equal B (add (S (S O)) (add (S (S (S O))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
familiarity_2 (S (S (S (S (S O))))) b
+++++
rewrite <- H'.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 5.
split.
intro b.
rewrite HB23.
intro Hb.
destruct (proj1 (FM.add_iff _ _ b) Hb) as [H|H].
destruct (proj1 (FM.add_iff _ _ b) H) as [H'|H'].
compute in H'.
rewrite <- H'.

*****
H' : Logic.eq (S (S (S O))) b
H : In b (add (S (S (S O))) empty)
Hb : In b (add (S (S O)) (add (S (S (S O))) empty))
b : elt
HB23 : Equal B (add (S (S O)) (add (S (S (S O))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
familiarity_2 (S (S (S (S (S O))))) (S (S (S O)))
+++++
simpl.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 5.
split.
intro b.
rewrite HB23.
intro Hb.
destruct (proj1 (FM.add_iff _ _ b) Hb) as [H|H].
destruct (proj1 (FM.add_iff _ _ b) H) as [H'|H'].
compute in H'.
rewrite <- H'.
simpl.

*****
H' : Logic.eq (S (S (S O))) b
H : In b (add (S (S (S O))) empty)
Hb : In b (add (S (S O)) (add (S (S (S O))) empty))
b : elt
HB23 : Equal B (add (S (S O)) (add (S (S (S O))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
True
+++++
trivial.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 5.
split.
intro b.
rewrite HB23.
intro Hb.
destruct (proj1 (FM.add_iff _ _ b) Hb) as [H|H].
destruct (proj1 (FM.add_iff _ _ b) H) as [H'|H'].

*****
H' : In b empty
H : In b (add (S (S (S O))) empty)
Hb : In b (add (S (S O)) (add (S (S (S O))) empty))
b : elt
HB23 : Equal B (add (S (S O)) (add (S (S (S O))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
familiarity_2 (S (S (S (S (S O))))) b
+++++
apply False_ind.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 5.
split.
intro b.
rewrite HB23.
intro Hb.
destruct (proj1 (FM.add_iff _ _ b) Hb) as [H|H].
destruct (proj1 (FM.add_iff _ _ b) H) as [H'|H'].
apply False_ind.

*****
H' : In b empty
H : In b (add (S (S (S O))) empty)
Hb : In b (add (S (S O)) (add (S (S (S O))) empty))
b : elt
HB23 : Equal B (add (S (S O)) (add (S (S (S O))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
apply (proj1 (FM.empty_iff b) H').
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].

*****
HB24 : Equal B (add (S (S O)) (add (S (S (S (S O)))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
sig (fun d : elt => and (In d (diff town_2 B)) (forall (b : elt) (_ : In b B), familiarity_2 d b))
+++++
exists 1.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 1.

*****
HB24 : Equal B (add (S (S O)) (add (S (S (S (S O)))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
and (In (S O) (diff town_2 B)) (forall (b : elt) (_ : In b B), familiarity_2 (S O) b)
+++++
split.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 1.
split.

*****
HB24 : Equal B (add (S (S O)) (add (S (S (S (S O)))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
In (S O) (diff town_2 B)
+++++
rewrite HB24.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 1.
split.
rewrite HB24.

*****
HB24 : Equal B (add (S (S O)) (add (S (S (S (S O)))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
In (S O) (diff town_2 (add (S (S O)) (add (S (S (S (S O)))) empty)))
+++++
apply mem_2.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 1.
split.
rewrite HB24.
apply mem_2.

*****
HB24 : Equal B (add (S (S O)) (add (S (S (S (S O)))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
Logic.eq (mem (S O) (diff town_2 (add (S (S O)) (add (S (S (S (S O)))) empty)))) true
+++++
trivial.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 1.
split.

*****
HB24 : Equal B (add (S (S O)) (add (S (S (S (S O)))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
forall (b : elt) (_ : In b B), familiarity_2 (S O) b
+++++
intro b.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 1.
split.
intro b.

*****
b : elt
HB24 : Equal B (add (S (S O)) (add (S (S (S (S O)))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
forall _ : In b B, familiarity_2 (S O) b
+++++
rewrite HB24.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 1.
split.
intro b.
rewrite HB24.

*****
b : elt
HB24 : Equal B (add (S (S O)) (add (S (S (S (S O)))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
forall _ : In b (add (S (S O)) (add (S (S (S (S O)))) empty)), familiarity_2 (S O) b
+++++
intro Hb.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 1.
split.
intro b.
rewrite HB24.
intro Hb.

*****
Hb : In b (add (S (S O)) (add (S (S (S (S O)))) empty))
b : elt
HB24 : Equal B (add (S (S O)) (add (S (S (S (S O)))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
familiarity_2 (S O) b
+++++
destruct (proj1 (FM.add_iff _ _ b) Hb) as [H|H].
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 1.
split.
intro b.
rewrite HB24.
intro Hb.
destruct (proj1 (FM.add_iff _ _ b) Hb) as [H|H].

*****
H : Logic.eq (S (S O)) b
Hb : In b (add (S (S O)) (add (S (S (S (S O)))) empty))
b : elt
HB24 : Equal B (add (S (S O)) (add (S (S (S (S O)))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
familiarity_2 (S O) b
+++++
compute in H.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 1.
split.
intro b.
rewrite HB24.
intro Hb.
destruct (proj1 (FM.add_iff _ _ b) Hb) as [H|H].
compute in H.

*****
H : Logic.eq (S (S O)) b
Hb : In b (add (S (S O)) (add (S (S (S (S O)))) empty))
b : elt
HB24 : Equal B (add (S (S O)) (add (S (S (S (S O)))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
familiarity_2 (S O) b
+++++
rewrite <- H.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 1.
split.
intro b.
rewrite HB24.
intro Hb.
destruct (proj1 (FM.add_iff _ _ b) Hb) as [H|H].
compute in H.
rewrite <- H.

*****
H : Logic.eq (S (S O)) b
Hb : In b (add (S (S O)) (add (S (S (S (S O)))) empty))
b : elt
HB24 : Equal B (add (S (S O)) (add (S (S (S (S O)))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
familiarity_2 (S O) (S (S O))
+++++
simpl.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 1.
split.
intro b.
rewrite HB24.
intro Hb.
destruct (proj1 (FM.add_iff _ _ b) Hb) as [H|H].
compute in H.
rewrite <- H.
simpl.

*****
H : Logic.eq (S (S O)) b
Hb : In b (add (S (S O)) (add (S (S (S (S O)))) empty))
b : elt
HB24 : Equal B (add (S (S O)) (add (S (S (S (S O)))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
True
+++++
trivial.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 1.
split.
intro b.
rewrite HB24.
intro Hb.
destruct (proj1 (FM.add_iff _ _ b) Hb) as [H|H].

*****
H : In b (add (S (S (S (S O)))) empty)
Hb : In b (add (S (S O)) (add (S (S (S (S O)))) empty))
b : elt
HB24 : Equal B (add (S (S O)) (add (S (S (S (S O)))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
familiarity_2 (S O) b
+++++
destruct (proj1 (FM.add_iff _ _ b) H) as [H'|H'].
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 1.
split.
intro b.
rewrite HB24.
intro Hb.
destruct (proj1 (FM.add_iff _ _ b) Hb) as [H|H].
destruct (proj1 (FM.add_iff _ _ b) H) as [H'|H'].

*****
H' : Logic.eq (S (S (S (S O)))) b
H : In b (add (S (S (S (S O)))) empty)
Hb : In b (add (S (S O)) (add (S (S (S (S O)))) empty))
b : elt
HB24 : Equal B (add (S (S O)) (add (S (S (S (S O)))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
familiarity_2 (S O) b
+++++
compute in H'.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 1.
split.
intro b.
rewrite HB24.
intro Hb.
destruct (proj1 (FM.add_iff _ _ b) Hb) as [H|H].
destruct (proj1 (FM.add_iff _ _ b) H) as [H'|H'].
compute in H'.

*****
H' : Logic.eq (S (S (S (S O)))) b
H : In b (add (S (S (S (S O)))) empty)
Hb : In b (add (S (S O)) (add (S (S (S (S O)))) empty))
b : elt
HB24 : Equal B (add (S (S O)) (add (S (S (S (S O)))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
familiarity_2 (S O) b
+++++
rewrite <- H'.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 1.
split.
intro b.
rewrite HB24.
intro Hb.
destruct (proj1 (FM.add_iff _ _ b) Hb) as [H|H].
destruct (proj1 (FM.add_iff _ _ b) H) as [H'|H'].
compute in H'.
rewrite <- H'.

*****
H' : Logic.eq (S (S (S (S O)))) b
H : In b (add (S (S (S (S O)))) empty)
Hb : In b (add (S (S O)) (add (S (S (S (S O)))) empty))
b : elt
HB24 : Equal B (add (S (S O)) (add (S (S (S (S O)))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
familiarity_2 (S O) (S (S (S (S O))))
+++++
simpl.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 1.
split.
intro b.
rewrite HB24.
intro Hb.
destruct (proj1 (FM.add_iff _ _ b) Hb) as [H|H].
destruct (proj1 (FM.add_iff _ _ b) H) as [H'|H'].
compute in H'.
rewrite <- H'.
simpl.

*****
H' : Logic.eq (S (S (S (S O)))) b
H : In b (add (S (S (S (S O)))) empty)
Hb : In b (add (S (S O)) (add (S (S (S (S O)))) empty))
b : elt
HB24 : Equal B (add (S (S O)) (add (S (S (S (S O)))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
True
+++++
trivial.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 1.
split.
intro b.
rewrite HB24.
intro Hb.
destruct (proj1 (FM.add_iff _ _ b) Hb) as [H|H].
destruct (proj1 (FM.add_iff _ _ b) H) as [H'|H'].

*****
H' : In b empty
H : In b (add (S (S (S (S O)))) empty)
Hb : In b (add (S (S O)) (add (S (S (S (S O)))) empty))
b : elt
HB24 : Equal B (add (S (S O)) (add (S (S (S (S O)))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
familiarity_2 (S O) b
+++++
apply False_ind.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 1.
split.
intro b.
rewrite HB24.
intro Hb.
destruct (proj1 (FM.add_iff _ _ b) Hb) as [H|H].
destruct (proj1 (FM.add_iff _ _ b) H) as [H'|H'].
apply False_ind.

*****
H' : In b empty
H : In b (add (S (S (S (S O)))) empty)
Hb : In b (add (S (S O)) (add (S (S (S (S O)))) empty))
b : elt
HB24 : Equal B (add (S (S O)) (add (S (S (S (S O)))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
apply (proj1 (FM.empty_iff b) H').
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].

*****
HB25 : Equal B (add (S (S O)) (add (S (S (S (S (S O))))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
sig (fun d : elt => and (In d (diff town_2 B)) (forall (b : elt) (_ : In b B), familiarity_2 d b))
+++++
exists 1.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 1.

*****
HB25 : Equal B (add (S (S O)) (add (S (S (S (S (S O))))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
and (In (S O) (diff town_2 B)) (forall (b : elt) (_ : In b B), familiarity_2 (S O) b)
+++++
split.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 1.
split.

*****
HB25 : Equal B (add (S (S O)) (add (S (S (S (S (S O))))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
In (S O) (diff town_2 B)
+++++
rewrite HB25.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 1.
split.
rewrite HB25.

*****
HB25 : Equal B (add (S (S O)) (add (S (S (S (S (S O))))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
In (S O) (diff town_2 (add (S (S O)) (add (S (S (S (S (S O))))) empty)))
+++++
apply mem_2.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 1.
split.
rewrite HB25.
apply mem_2.

*****
HB25 : Equal B (add (S (S O)) (add (S (S (S (S (S O))))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
Logic.eq (mem (S O) (diff town_2 (add (S (S O)) (add (S (S (S (S (S O))))) empty)))) true
+++++
trivial.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 1.
split.

*****
HB25 : Equal B (add (S (S O)) (add (S (S (S (S (S O))))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
forall (b : elt) (_ : In b B), familiarity_2 (S O) b
+++++
intro b.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 1.
split.
intro b.

*****
b : elt
HB25 : Equal B (add (S (S O)) (add (S (S (S (S (S O))))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
forall _ : In b B, familiarity_2 (S O) b
+++++
rewrite HB25.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 1.
split.
intro b.
rewrite HB25.

*****
b : elt
HB25 : Equal B (add (S (S O)) (add (S (S (S (S (S O))))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
forall _ : In b (add (S (S O)) (add (S (S (S (S (S O))))) empty)), familiarity_2 (S O) b
+++++
intro Hb.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 1.
split.
intro b.
rewrite HB25.
intro Hb.

*****
Hb : In b (add (S (S O)) (add (S (S (S (S (S O))))) empty))
b : elt
HB25 : Equal B (add (S (S O)) (add (S (S (S (S (S O))))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
familiarity_2 (S O) b
+++++
destruct (proj1 (FM.add_iff _ _ b) Hb) as [H|H].
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 1.
split.
intro b.
rewrite HB25.
intro Hb.
destruct (proj1 (FM.add_iff _ _ b) Hb) as [H|H].

*****
H : Logic.eq (S (S O)) b
Hb : In b (add (S (S O)) (add (S (S (S (S (S O))))) empty))
b : elt
HB25 : Equal B (add (S (S O)) (add (S (S (S (S (S O))))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
familiarity_2 (S O) b
+++++
compute in H.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 1.
split.
intro b.
rewrite HB25.
intro Hb.
destruct (proj1 (FM.add_iff _ _ b) Hb) as [H|H].
compute in H.

*****
H : Logic.eq (S (S O)) b
Hb : In b (add (S (S O)) (add (S (S (S (S (S O))))) empty))
b : elt
HB25 : Equal B (add (S (S O)) (add (S (S (S (S (S O))))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
familiarity_2 (S O) b
+++++
rewrite <- H.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 1.
split.
intro b.
rewrite HB25.
intro Hb.
destruct (proj1 (FM.add_iff _ _ b) Hb) as [H|H].
compute in H.
rewrite <- H.

*****
H : Logic.eq (S (S O)) b
Hb : In b (add (S (S O)) (add (S (S (S (S (S O))))) empty))
b : elt
HB25 : Equal B (add (S (S O)) (add (S (S (S (S (S O))))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
familiarity_2 (S O) (S (S O))
+++++
simpl.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 1.
split.
intro b.
rewrite HB25.
intro Hb.
destruct (proj1 (FM.add_iff _ _ b) Hb) as [H|H].
compute in H.
rewrite <- H.
simpl.

*****
H : Logic.eq (S (S O)) b
Hb : In b (add (S (S O)) (add (S (S (S (S (S O))))) empty))
b : elt
HB25 : Equal B (add (S (S O)) (add (S (S (S (S (S O))))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
True
+++++
trivial.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 1.
split.
intro b.
rewrite HB25.
intro Hb.
destruct (proj1 (FM.add_iff _ _ b) Hb) as [H|H].

*****
H : In b (add (S (S (S (S (S O))))) empty)
Hb : In b (add (S (S O)) (add (S (S (S (S (S O))))) empty))
b : elt
HB25 : Equal B (add (S (S O)) (add (S (S (S (S (S O))))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
familiarity_2 (S O) b
+++++
destruct (proj1 (FM.add_iff _ _ b) H) as [H'|H'].
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 1.
split.
intro b.
rewrite HB25.
intro Hb.
destruct (proj1 (FM.add_iff _ _ b) Hb) as [H|H].
destruct (proj1 (FM.add_iff _ _ b) H) as [H'|H'].

*****
H' : Logic.eq (S (S (S (S (S O))))) b
H : In b (add (S (S (S (S (S O))))) empty)
Hb : In b (add (S (S O)) (add (S (S (S (S (S O))))) empty))
b : elt
HB25 : Equal B (add (S (S O)) (add (S (S (S (S (S O))))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
familiarity_2 (S O) b
+++++
compute in H'.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 1.
split.
intro b.
rewrite HB25.
intro Hb.
destruct (proj1 (FM.add_iff _ _ b) Hb) as [H|H].
destruct (proj1 (FM.add_iff _ _ b) H) as [H'|H'].
compute in H'.

*****
H' : Logic.eq (S (S (S (S (S O))))) b
H : In b (add (S (S (S (S (S O))))) empty)
Hb : In b (add (S (S O)) (add (S (S (S (S (S O))))) empty))
b : elt
HB25 : Equal B (add (S (S O)) (add (S (S (S (S (S O))))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
familiarity_2 (S O) b
+++++
rewrite <- H'.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 1.
split.
intro b.
rewrite HB25.
intro Hb.
destruct (proj1 (FM.add_iff _ _ b) Hb) as [H|H].
destruct (proj1 (FM.add_iff _ _ b) H) as [H'|H'].
compute in H'.
rewrite <- H'.

*****
H' : Logic.eq (S (S (S (S (S O))))) b
H : In b (add (S (S (S (S (S O))))) empty)
Hb : In b (add (S (S O)) (add (S (S (S (S (S O))))) empty))
b : elt
HB25 : Equal B (add (S (S O)) (add (S (S (S (S (S O))))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
familiarity_2 (S O) (S (S (S (S (S O)))))
+++++
simpl.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 1.
split.
intro b.
rewrite HB25.
intro Hb.
destruct (proj1 (FM.add_iff _ _ b) Hb) as [H|H].
destruct (proj1 (FM.add_iff _ _ b) H) as [H'|H'].
compute in H'.
rewrite <- H'.
simpl.

*****
H' : Logic.eq (S (S (S (S (S O))))) b
H : In b (add (S (S (S (S (S O))))) empty)
Hb : In b (add (S (S O)) (add (S (S (S (S (S O))))) empty))
b : elt
HB25 : Equal B (add (S (S O)) (add (S (S (S (S (S O))))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
True
+++++
trivial.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 1.
split.
intro b.
rewrite HB25.
intro Hb.
destruct (proj1 (FM.add_iff _ _ b) Hb) as [H|H].
destruct (proj1 (FM.add_iff _ _ b) H) as [H'|H'].

*****
H' : In b empty
H : In b (add (S (S (S (S (S O))))) empty)
Hb : In b (add (S (S O)) (add (S (S (S (S (S O))))) empty))
b : elt
HB25 : Equal B (add (S (S O)) (add (S (S (S (S (S O))))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
familiarity_2 (S O) b
+++++
apply False_ind.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 1.
split.
intro b.
rewrite HB25.
intro Hb.
destruct (proj1 (FM.add_iff _ _ b) Hb) as [H|H].
destruct (proj1 (FM.add_iff _ _ b) H) as [H'|H'].
apply False_ind.

*****
H' : In b empty
H : In b (add (S (S (S (S (S O))))) empty)
Hb : In b (add (S (S O)) (add (S (S (S (S (S O))))) empty))
b : elt
HB25 : Equal B (add (S (S O)) (add (S (S (S (S (S O))))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
apply (proj1 (FM.empty_iff b) H').
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].

*****
HB34 : Equal B (add (S (S (S O))) (add (S (S (S (S O)))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
sig (fun d : elt => and (In d (diff town_2 B)) (forall (b : elt) (_ : In b B), familiarity_2 d b))
+++++
exists 1.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 1.

*****
HB34 : Equal B (add (S (S (S O))) (add (S (S (S (S O)))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
and (In (S O) (diff town_2 B)) (forall (b : elt) (_ : In b B), familiarity_2 (S O) b)
+++++
split.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 1.
split.

*****
HB34 : Equal B (add (S (S (S O))) (add (S (S (S (S O)))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
In (S O) (diff town_2 B)
+++++
rewrite HB34.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 1.
split.
rewrite HB34.

*****
HB34 : Equal B (add (S (S (S O))) (add (S (S (S (S O)))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
In (S O) (diff town_2 (add (S (S (S O))) (add (S (S (S (S O)))) empty)))
+++++
apply mem_2.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 1.
split.
rewrite HB34.
apply mem_2.

*****
HB34 : Equal B (add (S (S (S O))) (add (S (S (S (S O)))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
Logic.eq (mem (S O) (diff town_2 (add (S (S (S O))) (add (S (S (S (S O)))) empty)))) true
+++++
trivial.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 1.
split.

*****
HB34 : Equal B (add (S (S (S O))) (add (S (S (S (S O)))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
forall (b : elt) (_ : In b B), familiarity_2 (S O) b
+++++
intro b.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 1.
split.
intro b.

*****
b : elt
HB34 : Equal B (add (S (S (S O))) (add (S (S (S (S O)))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
forall _ : In b B, familiarity_2 (S O) b
+++++
rewrite HB34.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 1.
split.
intro b.
rewrite HB34.

*****
b : elt
HB34 : Equal B (add (S (S (S O))) (add (S (S (S (S O)))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
forall _ : In b (add (S (S (S O))) (add (S (S (S (S O)))) empty)), familiarity_2 (S O) b
+++++
intro Hb.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 1.
split.
intro b.
rewrite HB34.
intro Hb.

*****
Hb : In b (add (S (S (S O))) (add (S (S (S (S O)))) empty))
b : elt
HB34 : Equal B (add (S (S (S O))) (add (S (S (S (S O)))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
familiarity_2 (S O) b
+++++
destruct (proj1 (FM.add_iff _ _ b) Hb) as [H|H].
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 1.
split.
intro b.
rewrite HB34.
intro Hb.
destruct (proj1 (FM.add_iff _ _ b) Hb) as [H|H].

*****
H : Logic.eq (S (S (S O))) b
Hb : In b (add (S (S (S O))) (add (S (S (S (S O)))) empty))
b : elt
HB34 : Equal B (add (S (S (S O))) (add (S (S (S (S O)))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
familiarity_2 (S O) b
+++++
compute in H.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 1.
split.
intro b.
rewrite HB34.
intro Hb.
destruct (proj1 (FM.add_iff _ _ b) Hb) as [H|H].
compute in H.

*****
H : Logic.eq (S (S (S O))) b
Hb : In b (add (S (S (S O))) (add (S (S (S (S O)))) empty))
b : elt
HB34 : Equal B (add (S (S (S O))) (add (S (S (S (S O)))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
familiarity_2 (S O) b
+++++
rewrite <- H.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 1.
split.
intro b.
rewrite HB34.
intro Hb.
destruct (proj1 (FM.add_iff _ _ b) Hb) as [H|H].
compute in H.
rewrite <- H.

*****
H : Logic.eq (S (S (S O))) b
Hb : In b (add (S (S (S O))) (add (S (S (S (S O)))) empty))
b : elt
HB34 : Equal B (add (S (S (S O))) (add (S (S (S (S O)))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
familiarity_2 (S O) (S (S (S O)))
+++++
simpl.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 1.
split.
intro b.
rewrite HB34.
intro Hb.
destruct (proj1 (FM.add_iff _ _ b) Hb) as [H|H].
compute in H.
rewrite <- H.
simpl.

*****
H : Logic.eq (S (S (S O))) b
Hb : In b (add (S (S (S O))) (add (S (S (S (S O)))) empty))
b : elt
HB34 : Equal B (add (S (S (S O))) (add (S (S (S (S O)))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
True
+++++
trivial.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 1.
split.
intro b.
rewrite HB34.
intro Hb.
destruct (proj1 (FM.add_iff _ _ b) Hb) as [H|H].

*****
H : In b (add (S (S (S (S O)))) empty)
Hb : In b (add (S (S (S O))) (add (S (S (S (S O)))) empty))
b : elt
HB34 : Equal B (add (S (S (S O))) (add (S (S (S (S O)))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
familiarity_2 (S O) b
+++++
destruct (proj1 (FM.add_iff _ _ b) H) as [H'|H'].
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 1.
split.
intro b.
rewrite HB34.
intro Hb.
destruct (proj1 (FM.add_iff _ _ b) Hb) as [H|H].
destruct (proj1 (FM.add_iff _ _ b) H) as [H'|H'].

*****
H' : Logic.eq (S (S (S (S O)))) b
H : In b (add (S (S (S (S O)))) empty)
Hb : In b (add (S (S (S O))) (add (S (S (S (S O)))) empty))
b : elt
HB34 : Equal B (add (S (S (S O))) (add (S (S (S (S O)))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
familiarity_2 (S O) b
+++++
compute in H'.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 1.
split.
intro b.
rewrite HB34.
intro Hb.
destruct (proj1 (FM.add_iff _ _ b) Hb) as [H|H].
destruct (proj1 (FM.add_iff _ _ b) H) as [H'|H'].
compute in H'.

*****
H' : Logic.eq (S (S (S (S O)))) b
H : In b (add (S (S (S (S O)))) empty)
Hb : In b (add (S (S (S O))) (add (S (S (S (S O)))) empty))
b : elt
HB34 : Equal B (add (S (S (S O))) (add (S (S (S (S O)))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
familiarity_2 (S O) b
+++++
rewrite <- H'.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 1.
split.
intro b.
rewrite HB34.
intro Hb.
destruct (proj1 (FM.add_iff _ _ b) Hb) as [H|H].
destruct (proj1 (FM.add_iff _ _ b) H) as [H'|H'].
compute in H'.
rewrite <- H'.

*****
H' : Logic.eq (S (S (S (S O)))) b
H : In b (add (S (S (S (S O)))) empty)
Hb : In b (add (S (S (S O))) (add (S (S (S (S O)))) empty))
b : elt
HB34 : Equal B (add (S (S (S O))) (add (S (S (S (S O)))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
familiarity_2 (S O) (S (S (S (S O))))
+++++
simpl.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 1.
split.
intro b.
rewrite HB34.
intro Hb.
destruct (proj1 (FM.add_iff _ _ b) Hb) as [H|H].
destruct (proj1 (FM.add_iff _ _ b) H) as [H'|H'].
compute in H'.
rewrite <- H'.
simpl.

*****
H' : Logic.eq (S (S (S (S O)))) b
H : In b (add (S (S (S (S O)))) empty)
Hb : In b (add (S (S (S O))) (add (S (S (S (S O)))) empty))
b : elt
HB34 : Equal B (add (S (S (S O))) (add (S (S (S (S O)))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
True
+++++
trivial.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 1.
split.
intro b.
rewrite HB34.
intro Hb.
destruct (proj1 (FM.add_iff _ _ b) Hb) as [H|H].
destruct (proj1 (FM.add_iff _ _ b) H) as [H'|H'].

*****
H' : In b empty
H : In b (add (S (S (S (S O)))) empty)
Hb : In b (add (S (S (S O))) (add (S (S (S (S O)))) empty))
b : elt
HB34 : Equal B (add (S (S (S O))) (add (S (S (S (S O)))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
familiarity_2 (S O) b
+++++
apply False_ind.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 1.
split.
intro b.
rewrite HB34.
intro Hb.
destruct (proj1 (FM.add_iff _ _ b) Hb) as [H|H].
destruct (proj1 (FM.add_iff _ _ b) H) as [H'|H'].
apply False_ind.

*****
H' : In b empty
H : In b (add (S (S (S (S O)))) empty)
Hb : In b (add (S (S (S O))) (add (S (S (S (S O)))) empty))
b : elt
HB34 : Equal B (add (S (S (S O))) (add (S (S (S (S O)))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
apply (proj1 (FM.empty_iff b) H').
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].

*****
HB35 : Equal B (add (S (S (S O))) (add (S (S (S (S (S O))))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
sig (fun d : elt => and (In d (diff town_2 B)) (forall (b : elt) (_ : In b B), familiarity_2 d b))
+++++
exists 1.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 1.

*****
HB35 : Equal B (add (S (S (S O))) (add (S (S (S (S (S O))))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
and (In (S O) (diff town_2 B)) (forall (b : elt) (_ : In b B), familiarity_2 (S O) b)
+++++
split.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 1.
split.

*****
HB35 : Equal B (add (S (S (S O))) (add (S (S (S (S (S O))))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
In (S O) (diff town_2 B)
+++++
rewrite HB35.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 1.
split.
rewrite HB35.

*****
HB35 : Equal B (add (S (S (S O))) (add (S (S (S (S (S O))))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
In (S O) (diff town_2 (add (S (S (S O))) (add (S (S (S (S (S O))))) empty)))
+++++
apply mem_2.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 1.
split.
rewrite HB35.
apply mem_2.

*****
HB35 : Equal B (add (S (S (S O))) (add (S (S (S (S (S O))))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
Logic.eq (mem (S O) (diff town_2 (add (S (S (S O))) (add (S (S (S (S (S O))))) empty)))) true
+++++
trivial.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 1.
split.

*****
HB35 : Equal B (add (S (S (S O))) (add (S (S (S (S (S O))))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
forall (b : elt) (_ : In b B), familiarity_2 (S O) b
+++++
intro b.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 1.
split.
intro b.

*****
b : elt
HB35 : Equal B (add (S (S (S O))) (add (S (S (S (S (S O))))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
forall _ : In b B, familiarity_2 (S O) b
+++++
rewrite HB35.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 1.
split.
intro b.
rewrite HB35.

*****
b : elt
HB35 : Equal B (add (S (S (S O))) (add (S (S (S (S (S O))))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
forall _ : In b (add (S (S (S O))) (add (S (S (S (S (S O))))) empty)), familiarity_2 (S O) b
+++++
intro Hb.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 1.
split.
intro b.
rewrite HB35.
intro Hb.

*****
Hb : In b (add (S (S (S O))) (add (S (S (S (S (S O))))) empty))
b : elt
HB35 : Equal B (add (S (S (S O))) (add (S (S (S (S (S O))))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
familiarity_2 (S O) b
+++++
destruct (proj1 (FM.add_iff _ _ b) Hb) as [H|H].
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 1.
split.
intro b.
rewrite HB35.
intro Hb.
destruct (proj1 (FM.add_iff _ _ b) Hb) as [H|H].

*****
H : Logic.eq (S (S (S O))) b
Hb : In b (add (S (S (S O))) (add (S (S (S (S (S O))))) empty))
b : elt
HB35 : Equal B (add (S (S (S O))) (add (S (S (S (S (S O))))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
familiarity_2 (S O) b
+++++
compute in H.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 1.
split.
intro b.
rewrite HB35.
intro Hb.
destruct (proj1 (FM.add_iff _ _ b) Hb) as [H|H].
compute in H.

*****
H : Logic.eq (S (S (S O))) b
Hb : In b (add (S (S (S O))) (add (S (S (S (S (S O))))) empty))
b : elt
HB35 : Equal B (add (S (S (S O))) (add (S (S (S (S (S O))))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
familiarity_2 (S O) b
+++++
rewrite <- H.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 1.
split.
intro b.
rewrite HB35.
intro Hb.
destruct (proj1 (FM.add_iff _ _ b) Hb) as [H|H].
compute in H.
rewrite <- H.

*****
H : Logic.eq (S (S (S O))) b
Hb : In b (add (S (S (S O))) (add (S (S (S (S (S O))))) empty))
b : elt
HB35 : Equal B (add (S (S (S O))) (add (S (S (S (S (S O))))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
familiarity_2 (S O) (S (S (S O)))
+++++
simpl.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 1.
split.
intro b.
rewrite HB35.
intro Hb.
destruct (proj1 (FM.add_iff _ _ b) Hb) as [H|H].
compute in H.
rewrite <- H.
simpl.

*****
H : Logic.eq (S (S (S O))) b
Hb : In b (add (S (S (S O))) (add (S (S (S (S (S O))))) empty))
b : elt
HB35 : Equal B (add (S (S (S O))) (add (S (S (S (S (S O))))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
True
+++++
trivial.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 1.
split.
intro b.
rewrite HB35.
intro Hb.
destruct (proj1 (FM.add_iff _ _ b) Hb) as [H|H].

*****
H : In b (add (S (S (S (S (S O))))) empty)
Hb : In b (add (S (S (S O))) (add (S (S (S (S (S O))))) empty))
b : elt
HB35 : Equal B (add (S (S (S O))) (add (S (S (S (S (S O))))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
familiarity_2 (S O) b
+++++
destruct (proj1 (FM.add_iff _ _ b) H) as [H'|H'].
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 1.
split.
intro b.
rewrite HB35.
intro Hb.
destruct (proj1 (FM.add_iff _ _ b) Hb) as [H|H].
destruct (proj1 (FM.add_iff _ _ b) H) as [H'|H'].

*****
H' : Logic.eq (S (S (S (S (S O))))) b
H : In b (add (S (S (S (S (S O))))) empty)
Hb : In b (add (S (S (S O))) (add (S (S (S (S (S O))))) empty))
b : elt
HB35 : Equal B (add (S (S (S O))) (add (S (S (S (S (S O))))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
familiarity_2 (S O) b
+++++
compute in H'.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 1.
split.
intro b.
rewrite HB35.
intro Hb.
destruct (proj1 (FM.add_iff _ _ b) Hb) as [H|H].
destruct (proj1 (FM.add_iff _ _ b) H) as [H'|H'].
compute in H'.

*****
H' : Logic.eq (S (S (S (S (S O))))) b
H : In b (add (S (S (S (S (S O))))) empty)
Hb : In b (add (S (S (S O))) (add (S (S (S (S (S O))))) empty))
b : elt
HB35 : Equal B (add (S (S (S O))) (add (S (S (S (S (S O))))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
familiarity_2 (S O) b
+++++
rewrite <- H'.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 1.
split.
intro b.
rewrite HB35.
intro Hb.
destruct (proj1 (FM.add_iff _ _ b) Hb) as [H|H].
destruct (proj1 (FM.add_iff _ _ b) H) as [H'|H'].
compute in H'.
rewrite <- H'.

*****
H' : Logic.eq (S (S (S (S (S O))))) b
H : In b (add (S (S (S (S (S O))))) empty)
Hb : In b (add (S (S (S O))) (add (S (S (S (S (S O))))) empty))
b : elt
HB35 : Equal B (add (S (S (S O))) (add (S (S (S (S (S O))))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
familiarity_2 (S O) (S (S (S (S (S O)))))
+++++
simpl.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 1.
split.
intro b.
rewrite HB35.
intro Hb.
destruct (proj1 (FM.add_iff _ _ b) Hb) as [H|H].
destruct (proj1 (FM.add_iff _ _ b) H) as [H'|H'].
compute in H'.
rewrite <- H'.
simpl.

*****
H' : Logic.eq (S (S (S (S (S O))))) b
H : In b (add (S (S (S (S (S O))))) empty)
Hb : In b (add (S (S (S O))) (add (S (S (S (S (S O))))) empty))
b : elt
HB35 : Equal B (add (S (S (S O))) (add (S (S (S (S (S O))))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
True
+++++
trivial.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 1.
split.
intro b.
rewrite HB35.
intro Hb.
destruct (proj1 (FM.add_iff _ _ b) Hb) as [H|H].
destruct (proj1 (FM.add_iff _ _ b) H) as [H'|H'].

*****
H' : In b empty
H : In b (add (S (S (S (S (S O))))) empty)
Hb : In b (add (S (S (S O))) (add (S (S (S (S (S O))))) empty))
b : elt
HB35 : Equal B (add (S (S (S O))) (add (S (S (S (S (S O))))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
familiarity_2 (S O) b
+++++
apply False_ind.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 1.
split.
intro b.
rewrite HB35.
intro Hb.
destruct (proj1 (FM.add_iff _ _ b) Hb) as [H|H].
destruct (proj1 (FM.add_iff _ _ b) H) as [H'|H'].
apply False_ind.

*****
H' : In b empty
H : In b (add (S (S (S (S (S O))))) empty)
Hb : In b (add (S (S (S O))) (add (S (S (S (S (S O))))) empty))
b : elt
HB35 : Equal B (add (S (S (S O))) (add (S (S (S (S (S O))))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
apply (proj1 (FM.empty_iff b) H').
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].

*****
HB45 : Equal B (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
sig (fun d : elt => and (In d (diff town_2 B)) (forall (b : elt) (_ : In b B), familiarity_2 d b))
+++++
exists 3.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 3.

*****
HB45 : Equal B (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
and (In (S (S (S O))) (diff town_2 B)) (forall (b : elt) (_ : In b B), familiarity_2 (S (S (S O))) b)
+++++
split.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 3.
split.

*****
HB45 : Equal B (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
In (S (S (S O))) (diff town_2 B)
+++++
rewrite HB45.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 3.
split.
rewrite HB45.

*****
HB45 : Equal B (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
In (S (S (S O))) (diff town_2 (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))
+++++
apply mem_2.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 3.
split.
rewrite HB45.
apply mem_2.

*****
HB45 : Equal B (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
Logic.eq (mem (S (S (S O))) (diff town_2 (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)))) true
+++++
trivial.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 3.
split.

*****
HB45 : Equal B (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
forall (b : elt) (_ : In b B), familiarity_2 (S (S (S O))) b
+++++
intro b.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 3.
split.
intro b.

*****
b : elt
HB45 : Equal B (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
forall _ : In b B, familiarity_2 (S (S (S O))) b
+++++
rewrite HB45.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 3.
split.
intro b.
rewrite HB45.

*****
b : elt
HB45 : Equal B (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
forall _ : In b (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty)), familiarity_2 (S (S (S O))) b
+++++
intro Hb.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 3.
split.
intro b.
rewrite HB45.
intro Hb.

*****
Hb : In b (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))
b : elt
HB45 : Equal B (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
familiarity_2 (S (S (S O))) b
+++++
destruct (proj1 (FM.add_iff _ _ b) Hb) as [H|H].
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 3.
split.
intro b.
rewrite HB45.
intro Hb.
destruct (proj1 (FM.add_iff _ _ b) Hb) as [H|H].

*****
H : Logic.eq (S (S (S (S O)))) b
Hb : In b (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))
b : elt
HB45 : Equal B (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
familiarity_2 (S (S (S O))) b
+++++
compute in H.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 3.
split.
intro b.
rewrite HB45.
intro Hb.
destruct (proj1 (FM.add_iff _ _ b) Hb) as [H|H].
compute in H.

*****
H : Logic.eq (S (S (S (S O)))) b
Hb : In b (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))
b : elt
HB45 : Equal B (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
familiarity_2 (S (S (S O))) b
+++++
rewrite <- H.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 3.
split.
intro b.
rewrite HB45.
intro Hb.
destruct (proj1 (FM.add_iff _ _ b) Hb) as [H|H].
compute in H.
rewrite <- H.

*****
H : Logic.eq (S (S (S (S O)))) b
Hb : In b (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))
b : elt
HB45 : Equal B (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
familiarity_2 (S (S (S O))) (S (S (S (S O))))
+++++
simpl.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 3.
split.
intro b.
rewrite HB45.
intro Hb.
destruct (proj1 (FM.add_iff _ _ b) Hb) as [H|H].
compute in H.
rewrite <- H.
simpl.

*****
H : Logic.eq (S (S (S (S O)))) b
Hb : In b (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))
b : elt
HB45 : Equal B (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
True
+++++
trivial.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 3.
split.
intro b.
rewrite HB45.
intro Hb.
destruct (proj1 (FM.add_iff _ _ b) Hb) as [H|H].

*****
H : In b (add (S (S (S (S (S O))))) empty)
Hb : In b (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))
b : elt
HB45 : Equal B (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
familiarity_2 (S (S (S O))) b
+++++
destruct (proj1 (FM.add_iff _ _ b) H) as [H'|H'].
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 3.
split.
intro b.
rewrite HB45.
intro Hb.
destruct (proj1 (FM.add_iff _ _ b) Hb) as [H|H].
destruct (proj1 (FM.add_iff _ _ b) H) as [H'|H'].

*****
H' : Logic.eq (S (S (S (S (S O))))) b
H : In b (add (S (S (S (S (S O))))) empty)
Hb : In b (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))
b : elt
HB45 : Equal B (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
familiarity_2 (S (S (S O))) b
+++++
compute in H'.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 3.
split.
intro b.
rewrite HB45.
intro Hb.
destruct (proj1 (FM.add_iff _ _ b) Hb) as [H|H].
destruct (proj1 (FM.add_iff _ _ b) H) as [H'|H'].
compute in H'.

*****
H' : Logic.eq (S (S (S (S (S O))))) b
H : In b (add (S (S (S (S (S O))))) empty)
Hb : In b (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))
b : elt
HB45 : Equal B (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
familiarity_2 (S (S (S O))) b
+++++
rewrite <- H'.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 3.
split.
intro b.
rewrite HB45.
intro Hb.
destruct (proj1 (FM.add_iff _ _ b) Hb) as [H|H].
destruct (proj1 (FM.add_iff _ _ b) H) as [H'|H'].
compute in H'.
rewrite <- H'.

*****
H' : Logic.eq (S (S (S (S (S O))))) b
H : In b (add (S (S (S (S (S O))))) empty)
Hb : In b (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))
b : elt
HB45 : Equal B (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
familiarity_2 (S (S (S O))) (S (S (S (S (S O)))))
+++++
simpl.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 3.
split.
intro b.
rewrite HB45.
intro Hb.
destruct (proj1 (FM.add_iff _ _ b) Hb) as [H|H].
destruct (proj1 (FM.add_iff _ _ b) H) as [H'|H'].
compute in H'.
rewrite <- H'.
simpl.

*****
H' : Logic.eq (S (S (S (S (S O))))) b
H : In b (add (S (S (S (S (S O))))) empty)
Hb : In b (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))
b : elt
HB45 : Equal B (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
True
+++++
trivial.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 3.
split.
intro b.
rewrite HB45.
intro Hb.
destruct (proj1 (FM.add_iff _ _ b) Hb) as [H|H].
destruct (proj1 (FM.add_iff _ _ b) H) as [H'|H'].

*****
H' : In b empty
H : In b (add (S (S (S (S (S O))))) empty)
Hb : In b (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))
b : elt
HB45 : Equal B (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
familiarity_2 (S (S (S O))) b
+++++
apply False_ind.
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].
exists 3.
split.
intro b.
rewrite HB45.
intro Hb.
destruct (proj1 (FM.add_iff _ _ b) Hb) as [H|H].
destruct (proj1 (FM.add_iff _ _ b) H) as [H'|H'].
apply False_ind.

*****
H' : In b empty
H : In b (add (S (S (S (S (S O))))) empty)
Hb : In b (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))
b : elt
HB45 : Equal B (add (S (S (S (S O)))) (add (S (S (S (S (S O))))) empty))
H_card : Logic.eq (cardinal B) (S (S O))
H_sub : Subset B town_2
B : True
*****
False
+++++
apply (proj1 (FM.empty_iff b) H').
-----
Remark acquintance_2: forall B : t, Subset B town_2 -> cardinal B = 2 -> {d : elt |In d (diff town_2 B) /\\ (forall b : elt, In b B -> familiarity_2 d b)}.
Proof.
intros B H_sub H_card.
destruct (subsets_2 B H_sub H_card) as [[[[[[[[[HB12|HB13]|HB14]|HB15]|HB23]|HB24]|HB25]|HB34]|HB35]|HB45].

*****

*****

+++++
Defined.
-----
Check (AMM11262 town_2 2 population_2 familiarity_2 familiarity_2_sym familiarity_2_extensional acquintance_2).
-----
Definition social_citizen_2:=AMM11262 town_2 2 population_2 familiarity_2 \n                                      familiarity_2_sym familiarity_2_extensional acquintance_2.
-----
End example_five_inhabitants.
-----
Extraction "social2" social_citizen_2.
-----
