7485e6e75a047e306acfb9fe72dd52a0
Require  Export parallel_lemmas.
Definition on_line (A B C : Point) : Prop := Col A B C /\ B <> C.
Definition on_line_d (A B C : Point) (lambda : F) : Prop :=
  Col A B C /\ B <> C /\ B ** A = lambda * B ** C.
Definition inter_ll (I A B C D : Point) : Prop :=
  Col I A B /\ Col I C D /\ ~ parallel A B C D.
Definition on_parallel (A' A B C : Point) : Prop := B <> C  /\ parallel A A' B C.
Definition on_parallel_d (Y R P Q : Point) (lambda : F) : Prop :=
  P <> Q  /\ parallel Y R P Q /\ R ** Y = lambda * P ** Q.
Definition on_inter_line_parallel (Y R U V P Q : Point) : Prop :=
  ~Col R P Q /\ Col Y U V /\ parallel Y R P Q /\ ~ parallel P Q U V.
Definition on_inter_parallel_parallel (Y R U V W P Q : Point) : Prop :=
  ~Col R P Q /\ parallel Y R U V /\ parallel Y W P Q /\ ~ parallel P Q U V.
Definition is_midpoint (I A B : Point) := on_line_d I A B (1 / 2).
Definition mratio (Y U V : Point) (r : F) :=
  on_parallel_d Y U U V (r / (1 + r)) /\ 1 + r  <> 0.
Lemma on_line_to_on_line_d : forall A B C,
 on_line A B C -> on_line_d A B C (B**A / B**C).
Proof.
intros.
unfold on_line, on_line_d in *.
intuition.
field.
Geometry.
Qed.
Lemma on_parallel_to_on_parallel_d : forall  Y T A B,
 on_parallel Y T A B -> on_parallel_d Y T A B (T**Y / A**B).
Proof.
  intros.
  unfold on_parallel  in *.
  unfold on_parallel_d in *.
  intuition.
  field.
  Geometry.
Qed.
Theorem on_lineex : forall P Q : Point, P <> Q -> {Y : Point | Col Y P Q}.
Proof.
  intros.
  assert (T := A2a P Q 1).
  Geometry.
  DecompExAnd T X.
  exists X.
  Geometry.
Qed.
Theorem on_line_ex : forall P Q : Point, P<>Q -> exists Y, on_line Y P Q.
Proof.
  intros.
  assert {Y : Point | Col Y P Q}.
  {
    apply on_lineex.
    Geometry.
  }
  {
    DecompEx H0 Y.
    exists Y.
    unfold on_line.
    Geometry.
  }
Qed.
Theorem on_line_dex :
 forall (P Q : Point) (lambda : F),
 P <> Q -> {Y : Point | Col Y P Q /\ P ** Y = lambda * P ** Q}.
Proof.
  intros.
  assert (T := A2a P Q lambda).
  DecompExAnd T X.
  exists X.
  Geometry.
Qed.
Theorem inter_llex :
 forall P Q U V : Point,
 ~ parallel P Q U V -> {Y : Point | Col Y P Q /\ Col Y U V}.
Proof.
  intros.
  assert (P <> Q).
  {
    eapply par_aux_1.
    apply H.
  }
  {
    assert (T := A2a P Q (S P U V / S4 P U Q V)).
    Geometry.
    elim T.
    intro O.
    intros.
    Geometry.
    decompose [and] p.
    Geometry.
    clear T p.
    Geometry.
    cut (O ** Q / P ** Q = - (S Q U V / S4 P U Q V)).
    {
      Geometry.
      intro.
      Geometry.
      assert (S O U V = P ** O / P ** Q * S Q U V + O ** Q / P ** Q * S P U V).
      {
        Geometry.
        apply l2_9.
        {
          Geometry.
        }
        {
          Geometry.
        }
      }
      {
        Geometry.
        assert (P ** O / P ** Q = S P U V / S4 P U Q V).
        {
          Geometry.
          rewrite H2.
          Geometry.
          field.
          Geometry.
        }
        {
          Geometry.
          clear H2.
          rename H5 into H2.
          Geometry.
          rewrite H2 in H4.
          Geometry.
          rewrite H3 in H4.
          Geometry.
          assert (S O U V = 0).
          {
            Geometry.
            rewrite H4.
            field.
            Geometry.
          }
          {
            Geometry.
            exists O.
            Geometry.
          }
        }
      }
    }
    {
      Geometry.
      assert (P ** O / P ** Q = S P U V / S4 P U Q V).
      {
        Geometry.
        rewrite H2.
        field.
        Geometry.
      }
      {
        Geometry.
        clear H2.
        rename H3 into H2.
        Geometry.
        assert (P ** Q + Q ** O = P ** O).
        {
          Geometry.
        }
        {
          Geometry.
          rewrite <- H3 in H2.
          Geometry.
          assert (O ** Q / P ** Q = 1 - S P U V / S4 P U Q V).
          {
            Geometry.
            rewrite <- H2.
            Geometry.
            assert (O ** Q = - Q ** O).
            {
              Geometry.
            }
            {
              Geometry.
              rewrite H4.
              Geometry.
              field.
              Geometry.
            }
          }
          {
            Geometry.
            assert (1 - S P U V / S4 P U Q V = (S4 P U Q V - S P U V) / S4 P U Q V).
            {
              Geometry.
              field.
              Geometry.
            }
            {
              Geometry.
              rewrite H5 in H4.
              Geometry.
              clear H5.
              Geometry.
              unfold S4 in H4.
              Geometry.
              assert (S P U Q + S P Q V - S P U V = - S Q U V).
              {
                Geometry.
                assert (S P Q V = S P Q U + S P U V + S U Q V).
                {
                  Geometry.
                }
                {
                  Geometry.
                  rewrite H5.
                  Geometry.
                  assert (S P Q U = - S P U Q).
                  {
                    Geometry.
                  }
                  {
                    Geometry.
                    rewrite H6.
                    Geometry.
                    assert (S U Q V = - S Q U V).
                    {
                      Geometry.
                    }
                    {
                      Geometry.
                      rewrite H7.
                      Geometry.
                      ring.
                    }
                  }
                }
              }
              {
                Geometry.
                rewrite H5 in H4.
                Geometry.
                rewrite H4.
                Geometry.
                unfold S4 in |- *.
                Geometry.
                field.
                Geometry.
              }
            }
          }
        }
      }
    }
  }
Qed.
Lemma inter_ll_ex :  forall P Q U V : Point,
 ~ parallel P Q U V -> exists Y, inter_ll Y P Q U V.
Proof.
  intros.
  assert  {Y : Point | Col Y P Q /\ Col Y U V}.
  {
    apply inter_llex.
    intuition.
  }
  {
    DecompExAnd H0 Y.
    exists Y.
    unfold inter_ll.
    intuition.
  }
Qed.
Theorem on_parallelex : forall P Q R : Point, 
  Q<>R -> 
  ~ Col P Q R ->
  exists Y, parallel Q R P Y.
Proof.
  intros.
  assert ({Y : Point | parallel Q R P Y}).
  {
    apply euclid_parallel_existence.
  }
  {
    DecompEx H1 Y.
    exists Y.
    intuition.
  }
Qed.
Theorem on_parallel_ex : forall P Q R : Point, 
  Q<>R -> 
  ~ Col P Q R ->
  exists Y, on_parallel Y P Q R.
Proof.
  intros.
  assert ({Y : Point | parallel Q R P Y}).
  {
    apply euclid_parallel_existence.
  }
  {
    elim H1.
    intros.
    exists x.
    unfold on_parallel.
    intuition.
  }
Qed.
Lemma  on_parallel_d_ex :
    forall (P Q R : Point) (lambda : F),
   P<>Q -> 
   ~ Col P Q R ->
   exists Y, on_parallel_d Y R P Q lambda.
Proof.
  intros.
  assert ({Y':Point | (parallel P Q R Y') /\ R<>Y'}).
  {
    apply euclid_parallel_existence_strong.
    Geometry.
  }
  {
    DecompExAnd H1 Y'.
    assert {Y : Point | Col Y R Y' /\ R ** Y =  (lambda * P**Q/R**Y') * R ** Y'}.
    {
      apply on_line_dex.
      Geometry.
    }
    {
      DecompExAnd H1 Y.
      exists Y.
      unfold on_parallel_d.
      repeat split.
      {
        Geometry.
      }
      {
        Geometry.
        cut (parallel P Q R Y).
        {
          Geometry.
        }
        {
          eapply col_par_par.
          {
            apply H4.
          }
          {
            Geometry.
          }
          {
            Geometry.
          }
        }
      }
      {
        Geometry.
        rewrite H6.
        field.
        Geometry.
      }
    }
  }
Qed.
