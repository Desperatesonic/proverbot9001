Require Export GeoCoq.Axioms.tarski_axioms.
-----
Section between_identity_independent.
-----
Inductive Point :=\n  P0 | P1 | P2 | P3.
-----
Definition Bet (A B C : Point) :=\n  A = B \/ B = C \/ A = C.
-----
Definition Cong (A B C D : Point) :=\n  (A = B /\ C = D) \/ (A <> B /\ C <> D).
-----
Lemma not_between_identity : ~ (forall A B, Bet A B A -> A=B).
-----
Lemma not_between_identity : ~ (forall A B, Bet A B A -> A=B).

*****

*****
not (forall (A B : Point) (_ : Bet A B A), eq A B)
+++++
Proof.
-----
Lemma not_between_identity : ~ (forall A B, Bet A B A -> A=B).
Proof.

*****

*****
not (forall (A B : Point) (_ : Bet A B A), eq A B)
+++++
intro.
-----
Lemma not_between_identity : ~ (forall A B, Bet A B A -> A=B).
Proof.
intro.

*****
H : forall (A B : Point) (_ : Bet A B A), eq A B
*****
False
+++++
assert (T:= H P0 P1).
-----
Lemma not_between_identity : ~ (forall A B, Bet A B A -> A=B).
Proof.
intro.
assert (T:= H P0 P1).

*****
T : forall _ : Bet P0 P1 P0, eq P0 P1
H : forall (A B : Point) (_ : Bet A B A), eq A B
*****
False
+++++
assert (P0=P1).
-----
Lemma not_between_identity : ~ (forall A B, Bet A B A -> A=B).
Proof.
intro.
assert (T:= H P0 P1).
assert (P0=P1).

*****
T : forall _ : Bet P0 P1 P0, eq P0 P1
H : forall (A B : Point) (_ : Bet A B A), eq A B
*****
eq P0 P1
+++++
apply T.
-----
Lemma not_between_identity : ~ (forall A B, Bet A B A -> A=B).
Proof.
intro.
assert (T:= H P0 P1).
assert (P0=P1).
apply T.

*****
T : forall _ : Bet P0 P1 P0, eq P0 P1
H : forall (A B : Point) (_ : Bet A B A), eq A B
*****
Bet P0 P1 P0
+++++
unfold Bet.
-----
Lemma not_between_identity : ~ (forall A B, Bet A B A -> A=B).
Proof.
intro.
assert (T:= H P0 P1).
assert (P0=P1).
apply T.
unfold Bet.

*****
T : forall _ : Bet P0 P1 P0, eq P0 P1
H : forall (A B : Point) (_ : Bet A B A), eq A B
*****
or (eq P0 P1) (or (eq P1 P0) (eq P0 P0))
+++++
tauto.
-----
Lemma not_between_identity : ~ (forall A B, Bet A B A -> A=B).
Proof.
intro.
assert (T:= H P0 P1).
assert (P0=P1).

*****
H0 : eq P0 P1
T : forall _ : Bet P0 P1 P0, eq P0 P1
H : forall (A B : Point) (_ : Bet A B A), eq A B
*****
False
+++++
discriminate.
-----
Lemma not_between_identity : ~ (forall A B, Bet A B A -> A=B).
Proof.
intro.
assert (T:= H P0 P1).
assert (P0=P1).

*****

*****

+++++
Qed.
-----
Lemma cong_pseudo_reflexivity : forall A B, Cong A B B A.
-----
Lemma cong_pseudo_reflexivity : forall A B, Cong A B B A.

*****

*****
forall A B : Point, Cong A B B A
+++++
Proof.
-----
Lemma cong_pseudo_reflexivity : forall A B, Cong A B B A.
Proof.

*****

*****
forall A B : Point, Cong A B B A
+++++
unfold Cong.
-----
Lemma cong_pseudo_reflexivity : forall A B, Cong A B B A.
Proof.
unfold Cong.

*****

*****
forall A B : Point, or (and (eq A B) (eq B A)) (and (not (eq A B)) (not (eq B A)))
+++++
intros.
-----
Lemma cong_pseudo_reflexivity : forall A B, Cong A B B A.
Proof.
unfold Cong.
intros.

*****
A,B : Point
*****
or (and (eq A B) (eq B A)) (and (not (eq A B)) (not (eq B A)))
+++++
destruct A.
-----
Lemma cong_pseudo_reflexivity : forall A B, Cong A B B A.
Proof.
unfold Cong.
intros.
destruct A.

*****
B : Point
*****
or (and (eq P0 B) (eq B P0)) (and (not (eq P0 B)) (not (eq B P0)))
+++++
destruct B.
-----
Lemma cong_pseudo_reflexivity : forall A B, Cong A B B A.
Proof.
unfold Cong.
intros.
destruct A.
destruct B.

*****

*****
or (and (eq P0 P0) (eq P0 P0)) (and (not (eq P0 P0)) (not (eq P0 P0)))
+++++
try tauto.
-----
Lemma cong_pseudo_reflexivity : forall A B, Cong A B B A.
Proof.
unfold Cong.
intros.
destruct A.
destruct B.

*****

*****
or (and (eq P0 P1) (eq P1 P0)) (and (not (eq P0 P1)) (not (eq P1 P0)))
+++++
try tauto.
-----
Lemma cong_pseudo_reflexivity : forall A B, Cong A B B A.
Proof.
unfold Cong.
intros.
destruct A.
destruct B.
try tauto.

*****

*****
or (and (eq P0 P1) (eq P1 P0)) (and (not (eq P0 P1)) (not (eq P1 P0)))
+++++
right.
-----
Lemma cong_pseudo_reflexivity : forall A B, Cong A B B A.
Proof.
unfold Cong.
intros.
destruct A.
destruct B.
try tauto.
right.

*****

*****
and (not (eq P0 P1)) (not (eq P1 P0))
+++++
split.
-----
Lemma cong_pseudo_reflexivity : forall A B, Cong A B B A.
Proof.
unfold Cong.
intros.
destruct A.
destruct B.
try tauto.
right.
split.

*****

*****
not (eq P0 P1)
+++++
discriminate.
-----
Lemma cong_pseudo_reflexivity : forall A B, Cong A B B A.
Proof.
unfold Cong.
intros.
destruct A.
destruct B.
try tauto.
right.
split.

*****

*****
not (eq P1 P0)
+++++
discriminate.
-----
Lemma cong_pseudo_reflexivity : forall A B, Cong A B B A.
Proof.
unfold Cong.
intros.
destruct A.
destruct B.

*****

*****
or (and (eq P0 P2) (eq P2 P0)) (and (not (eq P0 P2)) (not (eq P2 P0)))
+++++
try tauto.
-----
Lemma cong_pseudo_reflexivity : forall A B, Cong A B B A.
Proof.
unfold Cong.
intros.
destruct A.
destruct B.
try tauto.

*****

*****
or (and (eq P0 P2) (eq P2 P0)) (and (not (eq P0 P2)) (not (eq P2 P0)))
+++++
right.
-----
Lemma cong_pseudo_reflexivity : forall A B, Cong A B B A.
Proof.
unfold Cong.
intros.
destruct A.
destruct B.
try tauto.
right.

*****

*****
and (not (eq P0 P2)) (not (eq P2 P0))
+++++
split.
-----
Lemma cong_pseudo_reflexivity : forall A B, Cong A B B A.
Proof.
unfold Cong.
intros.
destruct A.
destruct B.
try tauto.
right.
split.

*****

*****
not (eq P0 P2)
+++++
discriminate.
-----
Lemma cong_pseudo_reflexivity : forall A B, Cong A B B A.
Proof.
unfold Cong.
intros.
destruct A.
destruct B.
try tauto.
right.
split.

*****

*****
not (eq P2 P0)
+++++
discriminate.
-----
Lemma cong_pseudo_reflexivity : forall A B, Cong A B B A.
Proof.
unfold Cong.
intros.
destruct A.
destruct B.

*****

*****
or (and (eq P0 P3) (eq P3 P0)) (and (not (eq P0 P3)) (not (eq P3 P0)))
+++++
try tauto.
-----
Lemma cong_pseudo_reflexivity : forall A B, Cong A B B A.
Proof.
unfold Cong.
intros.
destruct A.
destruct B.
try tauto.

*****

*****
or (and (eq P0 P3) (eq P3 P0)) (and (not (eq P0 P3)) (not (eq P3 P0)))
+++++
right.
-----
Lemma cong_pseudo_reflexivity : forall A B, Cong A B B A.
Proof.
unfold Cong.
intros.
destruct A.
destruct B.
try tauto.
right.

*****

*****
and (not (eq P0 P3)) (not (eq P3 P0))
+++++
split.
-----
Lemma cong_pseudo_reflexivity : forall A B, Cong A B B A.
Proof.
unfold Cong.
intros.
destruct A.
destruct B.
try tauto.
right.
split.

*****

*****
not (eq P0 P3)
+++++
discriminate.
-----
Lemma cong_pseudo_reflexivity : forall A B, Cong A B B A.
Proof.
unfold Cong.
intros.
destruct A.
destruct B.
try tauto.
right.
split.

*****

*****
not (eq P3 P0)
+++++
discriminate.
-----
Lemma cong_pseudo_reflexivity : forall A B, Cong A B B A.
Proof.
unfold Cong.
intros.
destruct A.

*****
B : Point
*****
or (and (eq P1 B) (eq B P1)) (and (not (eq P1 B)) (not (eq B P1)))
+++++
destruct B.
-----
Lemma cong_pseudo_reflexivity : forall A B, Cong A B B A.
Proof.
unfold Cong.
intros.
destruct A.
destruct B.

*****

*****
or (and (eq P1 P0) (eq P0 P1)) (and (not (eq P1 P0)) (not (eq P0 P1)))
+++++
try tauto.
-----
Lemma cong_pseudo_reflexivity : forall A B, Cong A B B A.
Proof.
unfold Cong.
intros.
destruct A.
destruct B.
try tauto.

*****

*****
or (and (eq P1 P0) (eq P0 P1)) (and (not (eq P1 P0)) (not (eq P0 P1)))
+++++
right.
-----
Lemma cong_pseudo_reflexivity : forall A B, Cong A B B A.
Proof.
unfold Cong.
intros.
destruct A.
destruct B.
try tauto.
right.

*****

*****
and (not (eq P1 P0)) (not (eq P0 P1))
+++++
split.
-----
Lemma cong_pseudo_reflexivity : forall A B, Cong A B B A.
Proof.
unfold Cong.
intros.
destruct A.
destruct B.
try tauto.
right.
split.

*****

*****
not (eq P1 P0)
+++++
discriminate.
-----
Lemma cong_pseudo_reflexivity : forall A B, Cong A B B A.
Proof.
unfold Cong.
intros.
destruct A.
destruct B.
try tauto.
right.
split.

*****

*****
not (eq P0 P1)
+++++
discriminate.
-----
Lemma cong_pseudo_reflexivity : forall A B, Cong A B B A.
Proof.
unfold Cong.
intros.
destruct A.
destruct B.

*****

*****
or (and (eq P1 P1) (eq P1 P1)) (and (not (eq P1 P1)) (not (eq P1 P1)))
+++++
try tauto.
-----
Lemma cong_pseudo_reflexivity : forall A B, Cong A B B A.
Proof.
unfold Cong.
intros.
destruct A.
destruct B.

*****

*****
or (and (eq P1 P2) (eq P2 P1)) (and (not (eq P1 P2)) (not (eq P2 P1)))
+++++
try tauto.
-----
Lemma cong_pseudo_reflexivity : forall A B, Cong A B B A.
Proof.
unfold Cong.
intros.
destruct A.
destruct B.
try tauto.

*****

*****
or (and (eq P1 P2) (eq P2 P1)) (and (not (eq P1 P2)) (not (eq P2 P1)))
+++++
right.
-----
Lemma cong_pseudo_reflexivity : forall A B, Cong A B B A.
Proof.
unfold Cong.
intros.
destruct A.
destruct B.
try tauto.
right.

*****

*****
and (not (eq P1 P2)) (not (eq P2 P1))
+++++
split.
-----
Lemma cong_pseudo_reflexivity : forall A B, Cong A B B A.
Proof.
unfold Cong.
intros.
destruct A.
destruct B.
try tauto.
right.
split.

*****

*****
not (eq P1 P2)
+++++
discriminate.
-----
Lemma cong_pseudo_reflexivity : forall A B, Cong A B B A.
Proof.
unfold Cong.
intros.
destruct A.
destruct B.
try tauto.
right.
split.

*****

*****
not (eq P2 P1)
+++++
discriminate.
-----
Lemma cong_pseudo_reflexivity : forall A B, Cong A B B A.
Proof.
unfold Cong.
intros.
destruct A.
destruct B.

*****

*****
or (and (eq P1 P3) (eq P3 P1)) (and (not (eq P1 P3)) (not (eq P3 P1)))
+++++
try tauto.
-----
Lemma cong_pseudo_reflexivity : forall A B, Cong A B B A.
Proof.
unfold Cong.
intros.
destruct A.
destruct B.
try tauto.

*****

*****
or (and (eq P1 P3) (eq P3 P1)) (and (not (eq P1 P3)) (not (eq P3 P1)))
+++++
right.
-----
Lemma cong_pseudo_reflexivity : forall A B, Cong A B B A.
Proof.
unfold Cong.
intros.
destruct A.
destruct B.
try tauto.
right.

*****

*****
and (not (eq P1 P3)) (not (eq P3 P1))
+++++
split.
-----
Lemma cong_pseudo_reflexivity : forall A B, Cong A B B A.
Proof.
unfold Cong.
intros.
destruct A.
destruct B.
try tauto.
right.
split.

*****

*****
not (eq P1 P3)
+++++
discriminate.
-----
Lemma cong_pseudo_reflexivity : forall A B, Cong A B B A.
Proof.
unfold Cong.
intros.
destruct A.
destruct B.
try tauto.
right.
split.

*****

*****
not (eq P3 P1)
+++++
discriminate.
-----
Lemma cong_pseudo_reflexivity : forall A B, Cong A B B A.
Proof.
unfold Cong.
intros.
destruct A.

*****
B : Point
*****
or (and (eq P2 B) (eq B P2)) (and (not (eq P2 B)) (not (eq B P2)))
+++++
destruct B.
-----
Lemma cong_pseudo_reflexivity : forall A B, Cong A B B A.
Proof.
unfold Cong.
intros.
destruct A.
destruct B.

*****

*****
or (and (eq P2 P0) (eq P0 P2)) (and (not (eq P2 P0)) (not (eq P0 P2)))
+++++
try tauto.
-----
Lemma cong_pseudo_reflexivity : forall A B, Cong A B B A.
Proof.
unfold Cong.
intros.
destruct A.
destruct B.
try tauto.

*****

*****
or (and (eq P2 P0) (eq P0 P2)) (and (not (eq P2 P0)) (not (eq P0 P2)))
+++++
right.
-----
Lemma cong_pseudo_reflexivity : forall A B, Cong A B B A.
Proof.
unfold Cong.
intros.
destruct A.
destruct B.
try tauto.
right.

*****

*****
and (not (eq P2 P0)) (not (eq P0 P2))
+++++
split.
-----
Lemma cong_pseudo_reflexivity : forall A B, Cong A B B A.
Proof.
unfold Cong.
intros.
destruct A.
destruct B.
try tauto.
right.
split.

*****

*****
not (eq P2 P0)
+++++
discriminate.
-----
Lemma cong_pseudo_reflexivity : forall A B, Cong A B B A.
Proof.
unfold Cong.
intros.
destruct A.
destruct B.
try tauto.
right.
split.

*****

*****
not (eq P0 P2)
+++++
discriminate.
-----
Lemma cong_pseudo_reflexivity : forall A B, Cong A B B A.
Proof.
unfold Cong.
intros.
destruct A.
destruct B.

*****

*****
or (and (eq P2 P1) (eq P1 P2)) (and (not (eq P2 P1)) (not (eq P1 P2)))
+++++
try tauto.
-----
Lemma cong_pseudo_reflexivity : forall A B, Cong A B B A.
Proof.
unfold Cong.
intros.
destruct A.
destruct B.
try tauto.

*****

*****
or (and (eq P2 P1) (eq P1 P2)) (and (not (eq P2 P1)) (not (eq P1 P2)))
+++++
right.
-----
Lemma cong_pseudo_reflexivity : forall A B, Cong A B B A.
Proof.
unfold Cong.
intros.
destruct A.
destruct B.
try tauto.
right.

*****

*****
and (not (eq P2 P1)) (not (eq P1 P2))
+++++
split.
-----
Lemma cong_pseudo_reflexivity : forall A B, Cong A B B A.
Proof.
unfold Cong.
intros.
destruct A.
destruct B.
try tauto.
right.
split.

*****

*****
not (eq P2 P1)
+++++
discriminate.
-----
Lemma cong_pseudo_reflexivity : forall A B, Cong A B B A.
Proof.
unfold Cong.
intros.
destruct A.
destruct B.
try tauto.
right.
split.

*****

*****
not (eq P1 P2)
+++++
discriminate.
-----
Lemma cong_pseudo_reflexivity : forall A B, Cong A B B A.
Proof.
unfold Cong.
intros.
destruct A.
destruct B.

*****

*****
or (and (eq P2 P2) (eq P2 P2)) (and (not (eq P2 P2)) (not (eq P2 P2)))
+++++
try tauto.
-----
Lemma cong_pseudo_reflexivity : forall A B, Cong A B B A.
Proof.
unfold Cong.
intros.
destruct A.
destruct B.

*****

*****
or (and (eq P2 P3) (eq P3 P2)) (and (not (eq P2 P3)) (not (eq P3 P2)))
+++++
try tauto.
-----
Lemma cong_pseudo_reflexivity : forall A B, Cong A B B A.
Proof.
unfold Cong.
intros.
destruct A.
destruct B.
try tauto.

*****

*****
or (and (eq P2 P3) (eq P3 P2)) (and (not (eq P2 P3)) (not (eq P3 P2)))
+++++
right.
-----
Lemma cong_pseudo_reflexivity : forall A B, Cong A B B A.
Proof.
unfold Cong.
intros.
destruct A.
destruct B.
try tauto.
right.

*****

*****
and (not (eq P2 P3)) (not (eq P3 P2))
+++++
split.
-----
Lemma cong_pseudo_reflexivity : forall A B, Cong A B B A.
Proof.
unfold Cong.
intros.
destruct A.
destruct B.
try tauto.
right.
split.

*****

*****
not (eq P2 P3)
+++++
discriminate.
-----
Lemma cong_pseudo_reflexivity : forall A B, Cong A B B A.
Proof.
unfold Cong.
intros.
destruct A.
destruct B.
try tauto.
right.
split.

*****

*****
not (eq P3 P2)
+++++
discriminate.
-----
Lemma cong_pseudo_reflexivity : forall A B, Cong A B B A.
Proof.
unfold Cong.
intros.
destruct A.

*****
B : Point
*****
or (and (eq P3 B) (eq B P3)) (and (not (eq P3 B)) (not (eq B P3)))
+++++
destruct B.
-----
Lemma cong_pseudo_reflexivity : forall A B, Cong A B B A.
Proof.
unfold Cong.
intros.
destruct A.
destruct B.

*****

*****
or (and (eq P3 P0) (eq P0 P3)) (and (not (eq P3 P0)) (not (eq P0 P3)))
+++++
try tauto.
-----
Lemma cong_pseudo_reflexivity : forall A B, Cong A B B A.
Proof.
unfold Cong.
intros.
destruct A.
destruct B.
try tauto.

*****

*****
or (and (eq P3 P0) (eq P0 P3)) (and (not (eq P3 P0)) (not (eq P0 P3)))
+++++
right.
-----
Lemma cong_pseudo_reflexivity : forall A B, Cong A B B A.
Proof.
unfold Cong.
intros.
destruct A.
destruct B.
try tauto.
right.

*****

*****
and (not (eq P3 P0)) (not (eq P0 P3))
+++++
split.
-----
Lemma cong_pseudo_reflexivity : forall A B, Cong A B B A.
Proof.
unfold Cong.
intros.
destruct A.
destruct B.
try tauto.
right.
split.

*****

*****
not (eq P3 P0)
+++++
discriminate.
-----
Lemma cong_pseudo_reflexivity : forall A B, Cong A B B A.
Proof.
unfold Cong.
intros.
destruct A.
destruct B.
try tauto.
right.
split.

*****

*****
not (eq P0 P3)
+++++
discriminate.
-----
Lemma cong_pseudo_reflexivity : forall A B, Cong A B B A.
Proof.
unfold Cong.
intros.
destruct A.
destruct B.

*****

*****
or (and (eq P3 P1) (eq P1 P3)) (and (not (eq P3 P1)) (not (eq P1 P3)))
+++++
try tauto.
-----
Lemma cong_pseudo_reflexivity : forall A B, Cong A B B A.
Proof.
unfold Cong.
intros.
destruct A.
destruct B.
try tauto.

*****

*****
or (and (eq P3 P1) (eq P1 P3)) (and (not (eq P3 P1)) (not (eq P1 P3)))
+++++
right.
-----
Lemma cong_pseudo_reflexivity : forall A B, Cong A B B A.
Proof.
unfold Cong.
intros.
destruct A.
destruct B.
try tauto.
right.

*****

*****
and (not (eq P3 P1)) (not (eq P1 P3))
+++++
split.
-----
Lemma cong_pseudo_reflexivity : forall A B, Cong A B B A.
Proof.
unfold Cong.
intros.
destruct A.
destruct B.
try tauto.
right.
split.

*****

*****
not (eq P3 P1)
+++++
discriminate.
-----
Lemma cong_pseudo_reflexivity : forall A B, Cong A B B A.
Proof.
unfold Cong.
intros.
destruct A.
destruct B.
try tauto.
right.
split.

*****

*****
not (eq P1 P3)
+++++
discriminate.
-----
Lemma cong_pseudo_reflexivity : forall A B, Cong A B B A.
Proof.
unfold Cong.
intros.
destruct A.
destruct B.

*****

*****
or (and (eq P3 P2) (eq P2 P3)) (and (not (eq P3 P2)) (not (eq P2 P3)))
+++++
try tauto.
-----
Lemma cong_pseudo_reflexivity : forall A B, Cong A B B A.
Proof.
unfold Cong.
intros.
destruct A.
destruct B.
try tauto.

*****

*****
or (and (eq P3 P2) (eq P2 P3)) (and (not (eq P3 P2)) (not (eq P2 P3)))
+++++
right.
-----
Lemma cong_pseudo_reflexivity : forall A B, Cong A B B A.
Proof.
unfold Cong.
intros.
destruct A.
destruct B.
try tauto.
right.

*****

*****
and (not (eq P3 P2)) (not (eq P2 P3))
+++++
split.
-----
Lemma cong_pseudo_reflexivity : forall A B, Cong A B B A.
Proof.
unfold Cong.
intros.
destruct A.
destruct B.
try tauto.
right.
split.

*****

*****
not (eq P3 P2)
+++++
discriminate.
-----
Lemma cong_pseudo_reflexivity : forall A B, Cong A B B A.
Proof.
unfold Cong.
intros.
destruct A.
destruct B.
try tauto.
right.
split.

*****

*****
not (eq P2 P3)
+++++
discriminate.
-----
Lemma cong_pseudo_reflexivity : forall A B, Cong A B B A.
Proof.
unfold Cong.
intros.
destruct A.
destruct B.

*****

*****
or (and (eq P3 P3) (eq P3 P3)) (and (not (eq P3 P3)) (not (eq P3 P3)))
+++++
try tauto.
-----
Lemma cong_pseudo_reflexivity : forall A B, Cong A B B A.
Proof.
unfold Cong.
intros.
destruct A.

*****

*****

+++++
Qed.
-----
Lemma cong_identity : forall A B C, Cong A B C C -> A = B.
-----
Lemma cong_identity : forall A B C, Cong A B C C -> A = B.

*****

*****
forall (A B C : Point) (_ : Cong A B C C), eq A B
+++++
Proof.
-----
Lemma cong_identity : forall A B C, Cong A B C C -> A = B.
Proof.

*****

*****
forall (A B C : Point) (_ : Cong A B C C), eq A B
+++++
unfold Cong.
-----
Lemma cong_identity : forall A B C, Cong A B C C -> A = B.
Proof.
unfold Cong.

*****

*****
forall (A B C : Point) (_ : or (and (eq A B) (eq C C)) (and (not (eq A B)) (not (eq C C)))), eq A B
+++++
intros.
-----
Lemma cong_identity : forall A B C, Cong A B C C -> A = B.
Proof.
unfold Cong.
intros.

*****
H : or (and (eq A B) (eq C C)) (and (not (eq A B)) (not (eq C C)))
A,B,C : Point
*****
eq A B
+++++
tauto.
-----
Lemma cong_identity : forall A B C, Cong A B C C -> A = B.
Proof.
unfold Cong.
intros.
tauto.

*****

*****

+++++
Qed.
-----
Lemma cong_inner_transitivity : forall A B C D E F,\n  Cong A B C D -> Cong A B E F -> Cong C D E F.
-----
Lemma cong_inner_transitivity : forall A B C D E F, Cong A B C D -> Cong A B E F -> Cong C D E F.

*****

*****
forall (A B C D E F : Point) (_ : Cong A B C D) (_ : Cong A B E F), Cong C D E F
+++++
Proof.
-----
Lemma cong_inner_transitivity : forall A B C D E F, Cong A B C D -> Cong A B E F -> Cong C D E F.
Proof.

*****

*****
forall (A B C D E F : Point) (_ : Cong A B C D) (_ : Cong A B E F), Cong C D E F
+++++
unfold Cong.
-----
Lemma cong_inner_transitivity : forall A B C D E F, Cong A B C D -> Cong A B E F -> Cong C D E F.
Proof.
unfold Cong.

*****

*****
forall (A B C D E F : Point) (_ : or (and (eq A B) (eq C D)) (and (not (eq A B)) (not (eq C D)))) (_ : or (and (eq A B) (eq E F)) (and (not (eq A B)) (not (eq E F)))), or (and (eq C D) (eq E F)) (and (not (eq C D)) (not (eq E F)))
+++++
tauto.
-----
Lemma cong_inner_transitivity : forall A B C D E F, Cong A B C D -> Cong A B E F -> Cong C D E F.
Proof.
unfold Cong.
tauto.

*****

*****

+++++
Qed.
-----
Lemma inner_pasch : forall A B C P Q,\n  Bet A P C -> Bet B Q C ->\n  exists x, Bet P x B /\ Bet Q x A.
-----
Lemma inner_pasch : forall A B C P Q, Bet A P C -> Bet B Q C -> exists x, Bet P x B /\\ Bet Q x A.

*****

*****
forall (A B C P Q : Point) (_ : Bet A P C) (_ : Bet B Q C), ex (fun x : Point => and (Bet P x B) (Bet Q x A))
+++++
Proof.
-----
Lemma inner_pasch : forall A B C P Q, Bet A P C -> Bet B Q C -> exists x, Bet P x B /\\ Bet Q x A.
Proof.

*****

*****
forall (A B C P Q : Point) (_ : Bet A P C) (_ : Bet B Q C), ex (fun x : Point => and (Bet P x B) (Bet Q x A))
+++++
unfold Bet.
-----
Lemma inner_pasch : forall A B C P Q, Bet A P C -> Bet B Q C -> exists x, Bet P x B /\\ Bet Q x A.
Proof.
unfold Bet.

*****

*****
forall (A B C P Q : Point) (_ : or (eq A P) (or (eq P C) (eq A C))) (_ : or (eq B Q) (or (eq Q C) (eq B C))), ex (fun x : Point => and (or (eq P x) (or (eq x B) (eq P B))) (or (eq Q x) (or (eq x A) (eq Q A))))
+++++
intros.
-----
Lemma inner_pasch : forall A B C P Q, Bet A P C -> Bet B Q C -> exists x, Bet P x B /\\ Bet Q x A.
Proof.
unfold Bet.
intros.

*****
H0 : or (eq B Q) (or (eq Q C) (eq B C))
H : or (eq A P) (or (eq P C) (eq A C))
A,B,C,P,Q : Point
*****
ex (fun x : Point => and (or (eq P x) (or (eq x B) (eq P B))) (or (eq Q x) (or (eq x A) (eq Q A))))
+++++
intuition.
-----
Lemma inner_pasch : forall A B C P Q, Bet A P C -> Bet B Q C -> exists x, Bet P x B /\\ Bet Q x A.
Proof.
unfold Bet.
intros.
intuition.

*****
H : eq B Q
H1 : eq A P
A,B,C,P,Q : Point
*****
ex (fun x : Point => and (or (eq P x) (or (eq x B) (eq P B))) (or (eq Q x) (or (eq x A) (eq Q A))))
+++++
subst.
-----
Lemma inner_pasch : forall A B C P Q, Bet A P C -> Bet B Q C -> exists x, Bet P x B /\\ Bet Q x A.
Proof.
unfold Bet.
intros.
intuition.
subst.

*****
C,P,Q : Point
*****
ex (fun x : Point => and (or (eq P x) (or (eq x Q) (eq P Q))) (or (eq Q x) (or (eq x P) (eq Q P))))
+++++
try (exists P;tauto).
-----
Lemma inner_pasch : forall A B C P Q, Bet A P C -> Bet B Q C -> exists x, Bet P x B /\\ Bet Q x A.
Proof.
unfold Bet.
intros.
intuition.

*****
H0 : eq Q C
H1 : eq A P
A,B,C,P,Q : Point
*****
ex (fun x : Point => and (or (eq P x) (or (eq x B) (eq P B))) (or (eq Q x) (or (eq x A) (eq Q A))))
+++++
subst.
-----
Lemma inner_pasch : forall A B C P Q, Bet A P C -> Bet B Q C -> exists x, Bet P x B /\\ Bet Q x A.
Proof.
unfold Bet.
intros.
intuition.
subst.

*****
B,C,P : Point
*****
ex (fun x : Point => and (or (eq P x) (or (eq x B) (eq P B))) (or (eq C x) (or (eq x P) (eq C P))))
+++++
try (exists P;tauto).
-----
Lemma inner_pasch : forall A B C P Q, Bet A P C -> Bet B Q C -> exists x, Bet P x B /\\ Bet Q x A.
Proof.
unfold Bet.
intros.
intuition.

*****
H0 : eq B C
H1 : eq A P
A,B,C,P,Q : Point
*****
ex (fun x : Point => and (or (eq P x) (or (eq x B) (eq P B))) (or (eq Q x) (or (eq x A) (eq Q A))))
+++++
subst.
-----
Lemma inner_pasch : forall A B C P Q, Bet A P C -> Bet B Q C -> exists x, Bet P x B /\\ Bet Q x A.
Proof.
unfold Bet.
intros.
intuition.
subst.

*****
C,P,Q : Point
*****
ex (fun x : Point => and (or (eq P x) (or (eq x C) (eq P C))) (or (eq Q x) (or (eq x P) (eq Q P))))
+++++
try (exists P;tauto).
-----
Lemma inner_pasch : forall A B C P Q, Bet A P C -> Bet B Q C -> exists x, Bet P x B /\\ Bet Q x A.
Proof.
unfold Bet.
intros.
intuition.

*****
H0 : eq P C
H : eq B Q
A,B,C,P,Q : Point
*****
ex (fun x : Point => and (or (eq P x) (or (eq x B) (eq P B))) (or (eq Q x) (or (eq x A) (eq Q A))))
+++++
subst.
-----
Lemma inner_pasch : forall A B C P Q, Bet A P C -> Bet B Q C -> exists x, Bet P x B /\\ Bet Q x A.
Proof.
unfold Bet.
intros.
intuition.
subst.

*****
A,C,Q : Point
*****
ex (fun x : Point => and (or (eq C x) (or (eq x Q) (eq C Q))) (or (eq Q x) (or (eq x A) (eq Q A))))
+++++
try (exists P;tauto).
-----
Lemma inner_pasch : forall A B C P Q, Bet A P C -> Bet B Q C -> exists x, Bet P x B /\\ Bet Q x A.
Proof.
unfold Bet.
intros.
intuition.
subst.
try (exists P;tauto).

*****
A,C,Q : Point
*****
ex (fun x : Point => and (or (eq C x) (or (eq x Q) (eq C Q))) (or (eq Q x) (or (eq x A) (eq Q A))))
+++++
try (exists Q;tauto).
-----
Lemma inner_pasch : forall A B C P Q, Bet A P C -> Bet B Q C -> exists x, Bet P x B /\\ Bet Q x A.
Proof.
unfold Bet.
intros.
intuition.

*****
H0 : eq A C
H : eq B Q
A,B,C,P,Q : Point
*****
ex (fun x : Point => and (or (eq P x) (or (eq x B) (eq P B))) (or (eq Q x) (or (eq x A) (eq Q A))))
+++++
subst.
-----
Lemma inner_pasch : forall A B C P Q, Bet A P C -> Bet B Q C -> exists x, Bet P x B /\\ Bet Q x A.
Proof.
unfold Bet.
intros.
intuition.
subst.

*****
C,P,Q : Point
*****
ex (fun x : Point => and (or (eq P x) (or (eq x Q) (eq P Q))) (or (eq Q x) (or (eq x C) (eq Q C))))
+++++
try (exists P;tauto).
-----
Lemma inner_pasch : forall A B C P Q, Bet A P C -> Bet B Q C -> exists x, Bet P x B /\\ Bet Q x A.
Proof.
unfold Bet.
intros.
intuition.
subst.
try (exists P;tauto).

*****
C,P,Q : Point
*****
ex (fun x : Point => and (or (eq P x) (or (eq x Q) (eq P Q))) (or (eq Q x) (or (eq x C) (eq Q C))))
+++++
try (exists Q;tauto).
-----
Lemma inner_pasch : forall A B C P Q, Bet A P C -> Bet B Q C -> exists x, Bet P x B /\\ Bet Q x A.
Proof.
unfold Bet.
intros.
intuition.

*****
H1 : eq Q C
H0 : eq P C
A,B,C,P,Q : Point
*****
ex (fun x : Point => and (or (eq P x) (or (eq x B) (eq P B))) (or (eq Q x) (or (eq x A) (eq Q A))))
+++++
subst.
-----
Lemma inner_pasch : forall A B C P Q, Bet A P C -> Bet B Q C -> exists x, Bet P x B /\\ Bet Q x A.
Proof.
unfold Bet.
intros.
intuition.
subst.

*****
A,B,C : Point
*****
ex (fun x : Point => and (or (eq C x) (or (eq x B) (eq C B))) (or (eq C x) (or (eq x A) (eq C A))))
+++++
try (exists P;tauto).
-----
Lemma inner_pasch : forall A B C P Q, Bet A P C -> Bet B Q C -> exists x, Bet P x B /\\ Bet Q x A.
Proof.
unfold Bet.
intros.
intuition.
subst.
try (exists P;tauto).

*****
A,B,C : Point
*****
ex (fun x : Point => and (or (eq C x) (or (eq x B) (eq C B))) (or (eq C x) (or (eq x A) (eq C A))))
+++++
try (exists Q;tauto).
-----
Lemma inner_pasch : forall A B C P Q, Bet A P C -> Bet B Q C -> exists x, Bet P x B /\\ Bet Q x A.
Proof.
unfold Bet.
intros.
intuition.
subst.
try (exists P;tauto).
try (exists Q;tauto).

*****
A,B,C : Point
*****
ex (fun x : Point => and (or (eq C x) (or (eq x B) (eq C B))) (or (eq C x) (or (eq x A) (eq C A))))
+++++
exists C.
-----
Lemma inner_pasch : forall A B C P Q, Bet A P C -> Bet B Q C -> exists x, Bet P x B /\\ Bet Q x A.
Proof.
unfold Bet.
intros.
intuition.
subst.
try (exists P;tauto).
try (exists Q;tauto).
exists C.

*****
A,B,C : Point
*****
and (or (eq C C) (or (eq C B) (eq C B))) (or (eq C C) (or (eq C A) (eq C A)))
+++++
tauto.
-----
Lemma inner_pasch : forall A B C P Q, Bet A P C -> Bet B Q C -> exists x, Bet P x B /\\ Bet Q x A.
Proof.
unfold Bet.
intros.
intuition.

*****
H1 : eq B C
H0 : eq P C
A,B,C,P,Q : Point
*****
ex (fun x : Point => and (or (eq P x) (or (eq x B) (eq P B))) (or (eq Q x) (or (eq x A) (eq Q A))))
+++++
subst.
-----
Lemma inner_pasch : forall A B C P Q, Bet A P C -> Bet B Q C -> exists x, Bet P x B /\\ Bet Q x A.
Proof.
unfold Bet.
intros.
intuition.
subst.

*****
A,C,Q : Point
*****
ex (fun x : Point => and (or (eq C x) (or (eq x C) (eq C C))) (or (eq Q x) (or (eq x A) (eq Q A))))
+++++
try (exists P;tauto).
-----
Lemma inner_pasch : forall A B C P Q, Bet A P C -> Bet B Q C -> exists x, Bet P x B /\\ Bet Q x A.
Proof.
unfold Bet.
intros.
intuition.
subst.
try (exists P;tauto).

*****
A,C,Q : Point
*****
ex (fun x : Point => and (or (eq C x) (or (eq x C) (eq C C))) (or (eq Q x) (or (eq x A) (eq Q A))))
+++++
try (exists Q;tauto).
-----
Lemma inner_pasch : forall A B C P Q, Bet A P C -> Bet B Q C -> exists x, Bet P x B /\\ Bet Q x A.
Proof.
unfold Bet.
intros.
intuition.

*****
H1 : eq Q C
H0 : eq A C
A,B,C,P,Q : Point
*****
ex (fun x : Point => and (or (eq P x) (or (eq x B) (eq P B))) (or (eq Q x) (or (eq x A) (eq Q A))))
+++++
subst.
-----
Lemma inner_pasch : forall A B C P Q, Bet A P C -> Bet B Q C -> exists x, Bet P x B /\\ Bet Q x A.
Proof.
unfold Bet.
intros.
intuition.
subst.

*****
B,C,P : Point
*****
ex (fun x : Point => and (or (eq P x) (or (eq x B) (eq P B))) (or (eq C x) (or (eq x C) (eq C C))))
+++++
try (exists P;tauto).
-----
Lemma inner_pasch : forall A B C P Q, Bet A P C -> Bet B Q C -> exists x, Bet P x B /\\ Bet Q x A.
Proof.
unfold Bet.
intros.
intuition.

*****
H1 : eq B C
H0 : eq A C
A,B,C,P,Q : Point
*****
ex (fun x : Point => and (or (eq P x) (or (eq x B) (eq P B))) (or (eq Q x) (or (eq x A) (eq Q A))))
+++++
subst.
-----
Lemma inner_pasch : forall A B C P Q, Bet A P C -> Bet B Q C -> exists x, Bet P x B /\\ Bet Q x A.
Proof.
unfold Bet.
intros.
intuition.
subst.

*****
C,P,Q : Point
*****
ex (fun x : Point => and (or (eq P x) (or (eq x C) (eq P C))) (or (eq Q x) (or (eq x C) (eq Q C))))
+++++
try (exists P;tauto).
-----
Lemma inner_pasch : forall A B C P Q, Bet A P C -> Bet B Q C -> exists x, Bet P x B /\\ Bet Q x A.
Proof.
unfold Bet.
intros.
intuition.
subst.
try (exists P;tauto).

*****
C,P,Q : Point
*****
ex (fun x : Point => and (or (eq P x) (or (eq x C) (eq P C))) (or (eq Q x) (or (eq x C) (eq Q C))))
+++++
try (exists Q;tauto).
-----
Lemma inner_pasch : forall A B C P Q, Bet A P C -> Bet B Q C -> exists x, Bet P x B /\\ Bet Q x A.
Proof.
unfold Bet.
intros.
intuition.
subst.
try (exists P;tauto).
try (exists Q;tauto).

*****
C,P,Q : Point
*****
ex (fun x : Point => and (or (eq P x) (or (eq x C) (eq P C))) (or (eq Q x) (or (eq x C) (eq Q C))))
+++++
exists C.
-----
Lemma inner_pasch : forall A B C P Q, Bet A P C -> Bet B Q C -> exists x, Bet P x B /\\ Bet Q x A.
Proof.
unfold Bet.
intros.
intuition.
subst.
try (exists P;tauto).
try (exists Q;tauto).
exists C.

*****
C,P,Q : Point
*****
and (or (eq P C) (or (eq C C) (eq P C))) (or (eq Q C) (or (eq C C) (eq Q C)))
+++++
tauto.
-----
Lemma inner_pasch : forall A B C P Q, Bet A P C -> Bet B Q C -> exists x, Bet P x B /\\ Bet Q x A.
Proof.
unfold Bet.
intros.
intuition.

*****

*****

+++++
Qed.
-----
Lemma five_segment : forall A A' B B' C C' D D',\n  Cong A B A' B' ->\n  Cong B C B' C' ->\n  Cong A D A' D' ->\n  Cong B D B' D' ->\n  Bet A B C -> Bet A' B' C' -> A <> B -> Cong C D C' D'.
-----
Lemma five_segment : forall A A' B B' C C' D D', Cong A B A' B' -> Cong B C B' C' -> Cong A D A' D' -> Cong B D B' D' -> Bet A B C -> Bet A' B' C' -> A <> B -> Cong C D C' D'.

*****

*****
forall (A A' B B' C C' D D' : Point) (_ : Cong A B A' B') (_ : Cong B C B' C') (_ : Cong A D A' D') (_ : Cong B D B' D') (_ : Bet A B C) (_ : Bet A' B' C') (_ : not (eq A B)), Cong C D C' D'
+++++
Proof.
-----
Lemma five_segment : forall A A' B B' C C' D D', Cong A B A' B' -> Cong B C B' C' -> Cong A D A' D' -> Cong B D B' D' -> Bet A B C -> Bet A' B' C' -> A <> B -> Cong C D C' D'.
Proof.

*****

*****
forall (A A' B B' C C' D D' : Point) (_ : Cong A B A' B') (_ : Cong B C B' C') (_ : Cong A D A' D') (_ : Cong B D B' D') (_ : Bet A B C) (_ : Bet A' B' C') (_ : not (eq A B)), Cong C D C' D'
+++++
unfold Bet.
-----
Lemma five_segment : forall A A' B B' C C' D D', Cong A B A' B' -> Cong B C B' C' -> Cong A D A' D' -> Cong B D B' D' -> Bet A B C -> Bet A' B' C' -> A <> B -> Cong C D C' D'.
Proof.
unfold Bet.

*****

*****
forall (A A' B B' C C' D D' : Point) (_ : Cong A B A' B') (_ : Cong B C B' C') (_ : Cong A D A' D') (_ : Cong B D B' D') (_ : or (eq A B) (or (eq B C) (eq A C))) (_ : or (eq A' B') (or (eq B' C') (eq A' C'))) (_ : not (eq A B)), Cong C D C' D'
+++++
unfold Cong.
-----
Lemma five_segment : forall A A' B B' C C' D D', Cong A B A' B' -> Cong B C B' C' -> Cong A D A' D' -> Cong B D B' D' -> Bet A B C -> Bet A' B' C' -> A <> B -> Cong C D C' D'.
Proof.
unfold Bet.
unfold Cong.

*****

*****
forall (A A' B B' C C' D D' : Point) (_ : or (and (eq A B) (eq A' B')) (and (not (eq A B)) (not (eq A' B')))) (_ : or (and (eq B C) (eq B' C')) (and (not (eq B C)) (not (eq B' C')))) (_ : or (and (eq A D) (eq A' D')) (and (not (eq A D)) (not (eq A' D')))) (_ : or (and (eq B D) (eq B' D')) (and (not (eq B D)) (not (eq B' D')))) (_ : or (eq A B) (or (eq B C) (eq A C))) (_ : or (eq A' B') (or (eq B' C') (eq A' C'))) (_ : not (eq A B)), or (and (eq C D) (eq C' D')) (and (not (eq C D)) (not (eq C' D')))
+++++
intros.
-----
Lemma five_segment : forall A A' B B' C C' D D', Cong A B A' B' -> Cong B C B' C' -> Cong A D A' D' -> Cong B D B' D' -> Bet A B C -> Bet A' B' C' -> A <> B -> Cong C D C' D'.
Proof.
unfold Bet.
unfold Cong.
intros.

*****
H5 : not (eq A B)
H4 : or (eq A' B') (or (eq B' C') (eq A' C'))
H3 : or (eq A B) (or (eq B C) (eq A C))
H2 : or (and (eq B D) (eq B' D')) (and (not (eq B D)) (not (eq B' D')))
H1 : or (and (eq A D) (eq A' D')) (and (not (eq A D)) (not (eq A' D')))
H0 : or (and (eq B C) (eq B' C')) (and (not (eq B C)) (not (eq B' C')))
H : or (and (eq A B) (eq A' B')) (and (not (eq A B)) (not (eq A' B')))
A,A',B,B',C,C',D,D' : Point
*****
or (and (eq C D) (eq C' D')) (and (not (eq C D)) (not (eq C' D')))
+++++
intuition.
-----
Lemma five_segment : forall A A' B B' C C' D D', Cong A B A' B' -> Cong B C B' C' -> Cong A D A' D' -> Cong B D B' D' -> Bet A B C -> Bet A' B' C' -> A <> B -> Cong C D C' D'.
Proof.
unfold Bet.
unfold Cong.
intros.
intuition.

*****
H6 : eq B' C'
H4 : eq B C
H10 : eq B' D'
H2 : eq B D
H9 : eq A' D'
H1 : eq A D
H8 : eq B' C'
H0 : eq B C
H7 : forall _ : eq A' B', False
H5,H : forall _ : eq A B, False
A,A',B,B',C,C',D,D' : Point
*****
or (and (eq C D) (eq C' D')) (and (forall _ : eq C D, False) (forall _ : eq C' D', False))
+++++
repeat subst.
-----
Lemma five_segment : forall A A' B B' C C' D D', Cong A B A' B' -> Cong B C B' C' -> Cong A D A' D' -> Cong B D B' D' -> Bet A B C -> Bet A' B' C' -> A <> B -> Cong C D C' D'.
Proof.
unfold Bet.
unfold Cong.
intros.
intuition.
repeat subst.

*****
H6 : eq D' D'
H4 : eq D D
H7 : forall _ : eq D' D', False
H,H5 : forall _ : eq D D, False
D,D' : Point
*****
or (and (eq D D) (eq D' D')) (and (forall _ : eq D D, False) (forall _ : eq D' D', False))
+++++
tauto.
-----
Lemma five_segment : forall A A' B B' C C' D D', Cong A B A' B' -> Cong B C B' C' -> Cong A D A' D' -> Cong B D B' D' -> Bet A B C -> Bet A' B' C' -> A <> B -> Cong C D C' D'.
Proof.
unfold Bet.
unfold Cong.
intros.
intuition.

*****
H6 : eq A' C'
H4 : eq B C
H10 : eq B' D'
H2 : eq B D
H9 : eq A' D'
H1 : eq A D
H8 : eq B' C'
H0 : eq B C
H7 : forall _ : eq A' B', False
H5,H : forall _ : eq A B, False
A,A',B,B',C,C',D,D' : Point
*****
or (and (eq C D) (eq C' D')) (and (forall _ : eq C D, False) (forall _ : eq C' D', False))
+++++
repeat subst.
-----
Lemma five_segment : forall A A' B B' C C' D D', Cong A B A' B' -> Cong B C B' C' -> Cong A D A' D' -> Cong B D B' D' -> Bet A B C -> Bet A' B' C' -> A <> B -> Cong C D C' D'.
Proof.
unfold Bet.
unfold Cong.
intros.
intuition.
repeat subst.

*****
H6 : eq D' D'
H4 : eq D D
H7 : forall _ : eq D' D', False
H,H5 : forall _ : eq D D, False
D,D' : Point
*****
or (and (eq D D) (eq D' D')) (and (forall _ : eq D D, False) (forall _ : eq D' D', False))
+++++
tauto.
-----
Lemma five_segment : forall A A' B B' C C' D D', Cong A B A' B' -> Cong B C B' C' -> Cong A D A' D' -> Cong B D B' D' -> Bet A B C -> Bet A' B' C' -> A <> B -> Cong C D C' D'.
Proof.
unfold Bet.
unfold Cong.
intros.
intuition.

*****
H6 : eq B' C'
H4 : eq A C
H10 : eq B' D'
H2 : eq B D
H9 : eq A' D'
H1 : eq A D
H8 : eq B' C'
H0 : eq B C
H7 : forall _ : eq A' B', False
H5,H : forall _ : eq A B, False
A,A',B,B',C,C',D,D' : Point
*****
or (and (eq C D) (eq C' D')) (and (forall _ : eq C D, False) (forall _ : eq C' D', False))
+++++
repeat subst.
-----
Lemma five_segment : forall A A' B B' C C' D D', Cong A B A' B' -> Cong B C B' C' -> Cong A D A' D' -> Cong B D B' D' -> Bet A B C -> Bet A' B' C' -> A <> B -> Cong C D C' D'.
Proof.
unfold Bet.
unfold Cong.
intros.
intuition.
repeat subst.

*****
H6 : eq D' D'
H4 : eq D D
H7 : forall _ : eq D' D', False
H,H5 : forall _ : eq D D, False
D,D' : Point
*****
or (and (eq D D) (eq D' D')) (and (forall _ : eq D D, False) (forall _ : eq D' D', False))
+++++
tauto.
-----
Lemma five_segment : forall A A' B B' C C' D D', Cong A B A' B' -> Cong B C B' C' -> Cong A D A' D' -> Cong B D B' D' -> Bet A B C -> Bet A' B' C' -> A <> B -> Cong C D C' D'.
Proof.
unfold Bet.
unfold Cong.
intros.
intuition.

*****
H6 : eq A' C'
H4 : eq A C
H10 : eq B' D'
H2 : eq B D
H9 : eq A' D'
H1 : eq A D
H8 : eq B' C'
H0 : eq B C
H7 : forall _ : eq A' B', False
H5,H : forall _ : eq A B, False
A,A',B,B',C,C',D,D' : Point
*****
or (and (eq C D) (eq C' D')) (and (forall _ : eq C D, False) (forall _ : eq C' D', False))
+++++
repeat subst.
-----
Lemma five_segment : forall A A' B B' C C' D D', Cong A B A' B' -> Cong B C B' C' -> Cong A D A' D' -> Cong B D B' D' -> Bet A B C -> Bet A' B' C' -> A <> B -> Cong C D C' D'.
Proof.
unfold Bet.
unfold Cong.
intros.
intuition.
repeat subst.

*****
H6 : eq D' D'
H4 : eq D D
H7 : forall _ : eq D' D', False
H,H5 : forall _ : eq D D, False
D,D' : Point
*****
or (and (eq D D) (eq D' D')) (and (forall _ : eq D D, False) (forall _ : eq D' D', False))
+++++
tauto.
-----
Lemma five_segment : forall A A' B B' C C' D D', Cong A B A' B' -> Cong B C B' C' -> Cong A D A' D' -> Cong B D B' D' -> Bet A B C -> Bet A' B' C' -> A <> B -> Cong C D C' D'.
Proof.
unfold Bet.
unfold Cong.
intros.
intuition.

*****
H6 : eq B' C'
H4 : eq B C
H10 : forall _ : eq B' D', False
H2 : forall _ : eq B D, False
H9 : eq A' D'
H1 : eq A D
H8 : eq B' C'
H0 : eq B C
H7 : forall _ : eq A' B', False
H5,H : forall _ : eq A B, False
A,A',B,B',C,C',D,D' : Point
*****
or (and (eq C D) (eq C' D')) (and (forall _ : eq C D, False) (forall _ : eq C' D', False))
+++++
repeat subst.
-----
Lemma five_segment : forall A A' B B' C C' D D', Cong A B A' B' -> Cong B C B' C' -> Cong A D A' D' -> Cong B D B' D' -> Bet A B C -> Bet A' B' C' -> A <> B -> Cong C D C' D'.
Proof.
unfold Bet.
unfold Cong.
intros.
intuition.
repeat subst.

*****
H6 : eq C' C'
H4 : eq C C
H10 : forall _ : eq C' D', False
H2 : forall _ : eq C D, False
H7 : forall _ : eq D' C', False
H5,H : forall _ : eq D C, False
C,C',D,D' : Point
*****
or (and (eq C D) (eq C' D')) (and (forall _ : eq C D, False) (forall _ : eq C' D', False))
+++++
tauto.
-----
Lemma five_segment : forall A A' B B' C C' D D', Cong A B A' B' -> Cong B C B' C' -> Cong A D A' D' -> Cong B D B' D' -> Bet A B C -> Bet A' B' C' -> A <> B -> Cong C D C' D'.
Proof.
unfold Bet.
unfold Cong.
intros.
intuition.

*****
H6 : eq A' C'
H4 : eq B C
H10 : forall _ : eq B' D', False
H2 : forall _ : eq B D, False
H9 : eq A' D'
H1 : eq A D
H8 : eq B' C'
H0 : eq B C
H7 : forall _ : eq A' B', False
H5,H : forall _ : eq A B, False
A,A',B,B',C,C',D,D' : Point
*****
or (and (eq C D) (eq C' D')) (and (forall _ : eq C D, False) (forall _ : eq C' D', False))
+++++
repeat subst.
-----
Lemma five_segment : forall A A' B B' C C' D D', Cong A B A' B' -> Cong B C B' C' -> Cong A D A' D' -> Cong B D B' D' -> Bet A B C -> Bet A' B' C' -> A <> B -> Cong C D C' D'.
Proof.
unfold Bet.
unfold Cong.
intros.
intuition.
repeat subst.

*****
H4 : eq C C
H10 : forall _ : eq C' C', False
H2 : forall _ : eq C D, False
H7 : forall _ : eq C' C', False
H5,H : forall _ : eq D C, False
C,C',D : Point
*****
or (and (eq C D) (eq C' C')) (and (forall _ : eq C D, False) (forall _ : eq C' C', False))
+++++
tauto.
-----
Lemma five_segment : forall A A' B B' C C' D D', Cong A B A' B' -> Cong B C B' C' -> Cong A D A' D' -> Cong B D B' D' -> Bet A B C -> Bet A' B' C' -> A <> B -> Cong C D C' D'.
Proof.
unfold Bet.
unfold Cong.
intros.
intuition.

*****
H6 : eq B' C'
H4 : eq A C
H10 : forall _ : eq B' D', False
H2 : forall _ : eq B D, False
H9 : eq A' D'
H1 : eq A D
H8 : eq B' C'
H0 : eq B C
H7 : forall _ : eq A' B', False
H5,H : forall _ : eq A B, False
A,A',B,B',C,C',D,D' : Point
*****
or (and (eq C D) (eq C' D')) (and (forall _ : eq C D, False) (forall _ : eq C' D', False))
+++++
repeat subst.
-----
Lemma five_segment : forall A A' B B' C C' D D', Cong A B A' B' -> Cong B C B' C' -> Cong A D A' D' -> Cong B D B' D' -> Bet A B C -> Bet A' B' C' -> A <> B -> Cong C D C' D'.
Proof.
unfold Bet.
unfold Cong.
intros.
intuition.
repeat subst.

*****
H6 : eq C' C'
H10 : forall _ : eq C' D', False
H2 : forall _ : eq C C, False
H7 : forall _ : eq D' C', False
H,H5 : forall _ : eq C C, False
C,C',D' : Point
*****
or (and (eq C C) (eq C' D')) (and (forall _ : eq C C, False) (forall _ : eq C' D', False))
+++++
tauto.
-----
Lemma five_segment : forall A A' B B' C C' D D', Cong A B A' B' -> Cong B C B' C' -> Cong A D A' D' -> Cong B D B' D' -> Bet A B C -> Bet A' B' C' -> A <> B -> Cong C D C' D'.
Proof.
unfold Bet.
unfold Cong.
intros.
intuition.

*****
H6 : eq A' C'
H4 : eq A C
H10 : forall _ : eq B' D', False
H2 : forall _ : eq B D, False
H9 : eq A' D'
H1 : eq A D
H8 : eq B' C'
H0 : eq B C
H7 : forall _ : eq A' B', False
H5,H : forall _ : eq A B, False
A,A',B,B',C,C',D,D' : Point
*****
or (and (eq C D) (eq C' D')) (and (forall _ : eq C D, False) (forall _ : eq C' D', False))
+++++
repeat subst.
-----
Lemma five_segment : forall A A' B B' C C' D D', Cong A B A' B' -> Cong B C B' C' -> Cong A D A' D' -> Cong B D B' D' -> Bet A B C -> Bet A' B' C' -> A <> B -> Cong C D C' D'.
Proof.
unfold Bet.
unfold Cong.
intros.
intuition.
repeat subst.

*****
H10 : forall _ : eq C' C', False
H2 : forall _ : eq C C, False
H7 : forall _ : eq C' C', False
H,H5 : forall _ : eq C C, False
C,C' : Point
*****
or (and (eq C C) (eq C' C')) (and (forall _ : eq C C, False) (forall _ : eq C' C', False))
+++++
tauto.
-----
Lemma five_segment : forall A A' B B' C C' D D', Cong A B A' B' -> Cong B C B' C' -> Cong A D A' D' -> Cong B D B' D' -> Bet A B C -> Bet A' B' C' -> A <> B -> Cong C D C' D'.
Proof.
unfold Bet.
unfold Cong.
intros.
intuition.

*****
H6 : eq B' C'
H4 : eq B C
H10 : eq B' D'
H2 : eq B D
H9 : forall _ : eq A' D', False
H1 : forall _ : eq A D, False
H8 : eq B' C'
H0 : eq B C
H7 : forall _ : eq A' B', False
H5,H : forall _ : eq A B, False
A,A',B,B',C,C',D,D' : Point
*****
or (and (eq C D) (eq C' D')) (and (forall _ : eq C D, False) (forall _ : eq C' D', False))
+++++
repeat subst.
-----
Lemma five_segment : forall A A' B B' C C' D D', Cong A B A' B' -> Cong B C B' C' -> Cong A D A' D' -> Cong B D B' D' -> Bet A B C -> Bet A' B' C' -> A <> B -> Cong C D C' D'.
Proof.
unfold Bet.
unfold Cong.
intros.
intuition.
repeat subst.

*****
H6 : eq D' D'
H4 : eq D D
H9 : forall _ : eq A' D', False
H1 : forall _ : eq A D, False
H7 : forall _ : eq A' D', False
H5,H : forall _ : eq A D, False
A,A',D,D' : Point
*****
or (and (eq D D) (eq D' D')) (and (forall _ : eq D D, False) (forall _ : eq D' D', False))
+++++
tauto.
-----
Lemma five_segment : forall A A' B B' C C' D D', Cong A B A' B' -> Cong B C B' C' -> Cong A D A' D' -> Cong B D B' D' -> Bet A B C -> Bet A' B' C' -> A <> B -> Cong C D C' D'.
Proof.
unfold Bet.
unfold Cong.
intros.
intuition.

*****
H6 : eq A' C'
H4 : eq B C
H10 : eq B' D'
H2 : eq B D
H9 : forall _ : eq A' D', False
H1 : forall _ : eq A D, False
H8 : eq B' C'
H0 : eq B C
H7 : forall _ : eq A' B', False
H5,H : forall _ : eq A B, False
A,A',B,B',C,C',D,D' : Point
*****
or (and (eq C D) (eq C' D')) (and (forall _ : eq C D, False) (forall _ : eq C' D', False))
+++++
repeat subst.
-----
Lemma five_segment : forall A A' B B' C C' D D', Cong A B A' B' -> Cong B C B' C' -> Cong A D A' D' -> Cong B D B' D' -> Bet A B C -> Bet A' B' C' -> A <> B -> Cong C D C' D'.
Proof.
unfold Bet.
unfold Cong.
intros.
intuition.
repeat subst.

*****
H4 : eq D D
H9 : forall _ : eq D' D', False
H1 : forall _ : eq A D, False
H7 : forall _ : eq D' D', False
H5,H : forall _ : eq A D, False
A,D,D' : Point
*****
or (and (eq D D) (eq D' D')) (and (forall _ : eq D D, False) (forall _ : eq D' D', False))
+++++
tauto.
-----
Lemma five_segment : forall A A' B B' C C' D D', Cong A B A' B' -> Cong B C B' C' -> Cong A D A' D' -> Cong B D B' D' -> Bet A B C -> Bet A' B' C' -> A <> B -> Cong C D C' D'.
Proof.
unfold Bet.
unfold Cong.
intros.
intuition.

*****
H6 : eq B' C'
H4 : eq A C
H10 : eq B' D'
H2 : eq B D
H9 : forall _ : eq A' D', False
H1 : forall _ : eq A D, False
H8 : eq B' C'
H0 : eq B C
H7 : forall _ : eq A' B', False
H5,H : forall _ : eq A B, False
A,A',B,B',C,C',D,D' : Point
*****
or (and (eq C D) (eq C' D')) (and (forall _ : eq C D, False) (forall _ : eq C' D', False))
+++++
repeat subst.
-----
Lemma five_segment : forall A A' B B' C C' D D', Cong A B A' B' -> Cong B C B' C' -> Cong A D A' D' -> Cong B D B' D' -> Bet A B C -> Bet A' B' C' -> A <> B -> Cong C D C' D'.
Proof.
unfold Bet.
unfold Cong.
intros.
intuition.
repeat subst.

*****
H6 : eq D' D'
H9 : forall _ : eq A' D', False
H1 : forall _ : eq D D, False
H7 : forall _ : eq A' D', False
H,H5 : forall _ : eq D D, False
A',D,D' : Point
*****
or (and (eq D D) (eq D' D')) (and (forall _ : eq D D, False) (forall _ : eq D' D', False))
+++++
tauto.
-----
Lemma five_segment : forall A A' B B' C C' D D', Cong A B A' B' -> Cong B C B' C' -> Cong A D A' D' -> Cong B D B' D' -> Bet A B C -> Bet A' B' C' -> A <> B -> Cong C D C' D'.
Proof.
unfold Bet.
unfold Cong.
intros.
intuition.

*****
H6 : eq A' C'
H4 : eq A C
H10 : eq B' D'
H2 : eq B D
H9 : forall _ : eq A' D', False
H1 : forall _ : eq A D, False
H8 : eq B' C'
H0 : eq B C
H7 : forall _ : eq A' B', False
H5,H : forall _ : eq A B, False
A,A',B,B',C,C',D,D' : Point
*****
or (and (eq C D) (eq C' D')) (and (forall _ : eq C D, False) (forall _ : eq C' D', False))
+++++
repeat subst.
-----
Lemma five_segment : forall A A' B B' C C' D D', Cong A B A' B' -> Cong B C B' C' -> Cong A D A' D' -> Cong B D B' D' -> Bet A B C -> Bet A' B' C' -> A <> B -> Cong C D C' D'.
Proof.
unfold Bet.
unfold Cong.
intros.
intuition.
repeat subst.

*****
H9 : forall _ : eq D' D', False
H1 : forall _ : eq D D, False
H7 : forall _ : eq D' D', False
H,H5 : forall _ : eq D D, False
D,D' : Point
*****
or (and (eq D D) (eq D' D')) (and (forall _ : eq D D, False) (forall _ : eq D' D', False))
+++++
tauto.
-----
Lemma five_segment : forall A A' B B' C C' D D', Cong A B A' B' -> Cong B C B' C' -> Cong A D A' D' -> Cong B D B' D' -> Bet A B C -> Bet A' B' C' -> A <> B -> Cong C D C' D'.
Proof.
unfold Bet.
unfold Cong.
intros.
intuition.

*****
H6 : eq B' C'
H4 : eq B C
H10 : forall _ : eq B' D', False
H2 : forall _ : eq B D, False
H9 : forall _ : eq A' D', False
H1 : forall _ : eq A D, False
H8 : eq B' C'
H0 : eq B C
H7 : forall _ : eq A' B', False
H5,H : forall _ : eq A B, False
A,A',B,B',C,C',D,D' : Point
*****
or (and (eq C D) (eq C' D')) (and (forall _ : eq C D, False) (forall _ : eq C' D', False))
+++++
repeat subst.
-----
Lemma five_segment : forall A A' B B' C C' D D', Cong A B A' B' -> Cong B C B' C' -> Cong A D A' D' -> Cong B D B' D' -> Bet A B C -> Bet A' B' C' -> A <> B -> Cong C D C' D'.
Proof.
unfold Bet.
unfold Cong.
intros.
intuition.
repeat subst.

*****
H6 : eq C' C'
H4 : eq C C
H10 : forall _ : eq C' D', False
H2 : forall _ : eq C D, False
H9 : forall _ : eq A' D', False
H1 : forall _ : eq A D, False
H7 : forall _ : eq A' C', False
H,H5 : forall _ : eq A C, False
A,A',C,C',D,D' : Point
*****
or (and (eq C D) (eq C' D')) (and (forall _ : eq C D, False) (forall _ : eq C' D', False))
+++++
tauto.
-----
Lemma five_segment : forall A A' B B' C C' D D', Cong A B A' B' -> Cong B C B' C' -> Cong A D A' D' -> Cong B D B' D' -> Bet A B C -> Bet A' B' C' -> A <> B -> Cong C D C' D'.
Proof.
unfold Bet.
unfold Cong.
intros.
intuition.

*****
H6 : eq A' C'
H4 : eq B C
H10 : forall _ : eq B' D', False
H2 : forall _ : eq B D, False
H9 : forall _ : eq A' D', False
H1 : forall _ : eq A D, False
H8 : eq B' C'
H0 : eq B C
H7 : forall _ : eq A' B', False
H5,H : forall _ : eq A B, False
A,A',B,B',C,C',D,D' : Point
*****
or (and (eq C D) (eq C' D')) (and (forall _ : eq C D, False) (forall _ : eq C' D', False))
+++++
repeat subst.
-----
Lemma five_segment : forall A A' B B' C C' D D', Cong A B A' B' -> Cong B C B' C' -> Cong A D A' D' -> Cong B D B' D' -> Bet A B C -> Bet A' B' C' -> A <> B -> Cong C D C' D'.
Proof.
unfold Bet.
unfold Cong.
intros.
intuition.
repeat subst.

*****
H4 : eq C C
H10 : forall _ : eq C' D', False
H2 : forall _ : eq C D, False
H9 : forall _ : eq C' D', False
H1 : forall _ : eq A D, False
H7 : forall _ : eq C' C', False
H,H5 : forall _ : eq A C, False
A,C,C',D,D' : Point
*****
or (and (eq C D) (eq C' D')) (and (forall _ : eq C D, False) (forall _ : eq C' D', False))
+++++
tauto.
-----
Lemma five_segment : forall A A' B B' C C' D D', Cong A B A' B' -> Cong B C B' C' -> Cong A D A' D' -> Cong B D B' D' -> Bet A B C -> Bet A' B' C' -> A <> B -> Cong C D C' D'.
Proof.
unfold Bet.
unfold Cong.
intros.
intuition.

*****
H6 : eq B' C'
H4 : eq A C
H10 : forall _ : eq B' D', False
H2 : forall _ : eq B D, False
H9 : forall _ : eq A' D', False
H1 : forall _ : eq A D, False
H8 : eq B' C'
H0 : eq B C
H7 : forall _ : eq A' B', False
H5,H : forall _ : eq A B, False
A,A',B,B',C,C',D,D' : Point
*****
or (and (eq C D) (eq C' D')) (and (forall _ : eq C D, False) (forall _ : eq C' D', False))
+++++
repeat subst.
-----
Lemma five_segment : forall A A' B B' C C' D D', Cong A B A' B' -> Cong B C B' C' -> Cong A D A' D' -> Cong B D B' D' -> Bet A B C -> Bet A' B' C' -> A <> B -> Cong C D C' D'.
Proof.
unfold Bet.
unfold Cong.
intros.
intuition.
repeat subst.

*****
H6 : eq C' C'
H10 : forall _ : eq C' D', False
H2 : forall _ : eq C D, False
H9 : forall _ : eq A' D', False
H1 : forall _ : eq C D, False
H7 : forall _ : eq A' C', False
H5,H : forall _ : eq C C, False
A',C,C',D,D' : Point
*****
or (and (eq C D) (eq C' D')) (and (forall _ : eq C D, False) (forall _ : eq C' D', False))
+++++
tauto.
-----
Lemma five_segment : forall A A' B B' C C' D D', Cong A B A' B' -> Cong B C B' C' -> Cong A D A' D' -> Cong B D B' D' -> Bet A B C -> Bet A' B' C' -> A <> B -> Cong C D C' D'.
Proof.
unfold Bet.
unfold Cong.
intros.
intuition.

*****
H6 : eq A' C'
H4 : eq A C
H10 : forall _ : eq B' D', False
H2 : forall _ : eq B D, False
H9 : forall _ : eq A' D', False
H1 : forall _ : eq A D, False
H8 : eq B' C'
H0 : eq B C
H7 : forall _ : eq A' B', False
H5,H : forall _ : eq A B, False
A,A',B,B',C,C',D,D' : Point
*****
or (and (eq C D) (eq C' D')) (and (forall _ : eq C D, False) (forall _ : eq C' D', False))
+++++
repeat subst.
-----
Lemma five_segment : forall A A' B B' C C' D D', Cong A B A' B' -> Cong B C B' C' -> Cong A D A' D' -> Cong B D B' D' -> Bet A B C -> Bet A' B' C' -> A <> B -> Cong C D C' D'.
Proof.
unfold Bet.
unfold Cong.
intros.
intuition.
repeat subst.

*****
H10 : forall _ : eq C' D', False
H2 : forall _ : eq C D, False
H9 : forall _ : eq C' D', False
H1 : forall _ : eq C D, False
H7 : forall _ : eq C' C', False
H5,H : forall _ : eq C C, False
C,C',D,D' : Point
*****
or (and (eq C D) (eq C' D')) (and (forall _ : eq C D, False) (forall _ : eq C' D', False))
+++++
tauto.
-----
Lemma five_segment : forall A A' B B' C C' D D', Cong A B A' B' -> Cong B C B' C' -> Cong A D A' D' -> Cong B D B' D' -> Bet A B C -> Bet A' B' C' -> A <> B -> Cong C D C' D'.
Proof.
unfold Bet.
unfold Cong.
intros.
intuition.

*****
H6 : eq A' C'
H4 : eq A C
H10 : eq B' D'
H2 : eq B D
H9 : eq A' D'
H1 : eq A D
H8 : forall _ : eq B' C', False
H0 : forall _ : eq B C, False
H7 : forall _ : eq A' B', False
H5,H : forall _ : eq A B, False
A,A',B,B',C,C',D,D' : Point
*****
or (and (eq C D) (eq C' D')) (and (forall _ : eq C D, False) (forall _ : eq C' D', False))
+++++
repeat subst.
-----
Lemma five_segment : forall A A' B B' C C' D D', Cong A B A' B' -> Cong B C B' C' -> Cong A D A' D' -> Cong B D B' D' -> Bet A B C -> Bet A' B' C' -> A <> B -> Cong C D C' D'.
Proof.
unfold Bet.
unfold Cong.
intros.
intuition.
repeat subst.

*****
H8 : forall _ : eq C' C', False
H0 : forall _ : eq C C, False
H7 : forall _ : eq C' C', False
H,H5 : forall _ : eq C C, False
C,C' : Point
*****
or (and (eq C C) (eq C' C')) (and (forall _ : eq C C, False) (forall _ : eq C' C', False))
+++++
tauto.
-----
Lemma five_segment : forall A A' B B' C C' D D', Cong A B A' B' -> Cong B C B' C' -> Cong A D A' D' -> Cong B D B' D' -> Bet A B C -> Bet A' B' C' -> A <> B -> Cong C D C' D'.
Proof.
unfold Bet.
unfold Cong.
intros.
intuition.

*****
H6 : eq A' C'
H4 : eq A C
H10 : forall _ : eq B' D', False
H2 : forall _ : eq B D, False
H9 : eq A' D'
H1 : eq A D
H8 : forall _ : eq B' C', False
H0 : forall _ : eq B C, False
H7 : forall _ : eq A' B', False
H5,H : forall _ : eq A B, False
A,A',B,B',C,C',D,D' : Point
*****
or (and (eq C D) (eq C' D')) (and (forall _ : eq C D, False) (forall _ : eq C' D', False))
+++++
repeat subst.
-----
Lemma five_segment : forall A A' B B' C C' D D', Cong A B A' B' -> Cong B C B' C' -> Cong A D A' D' -> Cong B D B' D' -> Bet A B C -> Bet A' B' C' -> A <> B -> Cong C D C' D'.
Proof.
unfold Bet.
unfold Cong.
intros.
intuition.
repeat subst.

*****
H10 : forall _ : eq B' C', False
H2 : forall _ : eq B C, False
H8 : forall _ : eq B' C', False
H0 : forall _ : eq B C, False
H7 : forall _ : eq C' B', False
H5,H : forall _ : eq C B, False
B,B',C,C' : Point
*****
or (and (eq C C) (eq C' C')) (and (forall _ : eq C C, False) (forall _ : eq C' C', False))
+++++
tauto.
-----
Lemma five_segment : forall A A' B B' C C' D D', Cong A B A' B' -> Cong B C B' C' -> Cong A D A' D' -> Cong B D B' D' -> Bet A B C -> Bet A' B' C' -> A <> B -> Cong C D C' D'.
Proof.
unfold Bet.
unfold Cong.
intros.
intuition.

*****
H6 : eq A' C'
H4 : eq A C
H10 : eq B' D'
H2 : eq B D
H9 : forall _ : eq A' D', False
H1 : forall _ : eq A D, False
H8 : forall _ : eq B' C', False
H0 : forall _ : eq B C, False
H7 : forall _ : eq A' B', False
H5,H : forall _ : eq A B, False
A,A',B,B',C,C',D,D' : Point
*****
or (and (eq C D) (eq C' D')) (and (forall _ : eq C D, False) (forall _ : eq C' D', False))
+++++
repeat subst.
-----
Lemma five_segment : forall A A' B B' C C' D D', Cong A B A' B' -> Cong B C B' C' -> Cong A D A' D' -> Cong B D B' D' -> Bet A B C -> Bet A' B' C' -> A <> B -> Cong C D C' D'.
Proof.
unfold Bet.
unfold Cong.
intros.
intuition.
repeat subst.

*****
H9 : forall _ : eq C' D', False
H1 : forall _ : eq C D, False
H8 : forall _ : eq D' C', False
H0 : forall _ : eq D C, False
H7 : forall _ : eq C' D', False
H5,H : forall _ : eq C D, False
C,C',D,D' : Point
*****
or (and (eq C D) (eq C' D')) (and (forall _ : eq C D, False) (forall _ : eq C' D', False))
+++++
tauto.
-----
Lemma five_segment : forall A A' B B' C C' D D', Cong A B A' B' -> Cong B C B' C' -> Cong A D A' D' -> Cong B D B' D' -> Bet A B C -> Bet A' B' C' -> A <> B -> Cong C D C' D'.
Proof.
unfold Bet.
unfold Cong.
intros.
intuition.

*****
H6 : eq A' C'
H4 : eq A C
H10 : forall _ : eq B' D', False
H2 : forall _ : eq B D, False
H9 : forall _ : eq A' D', False
H1 : forall _ : eq A D, False
H8 : forall _ : eq B' C', False
H0 : forall _ : eq B C, False
H7 : forall _ : eq A' B', False
H5,H : forall _ : eq A B, False
A,A',B,B',C,C',D,D' : Point
*****
or (and (eq C D) (eq C' D')) (and (forall _ : eq C D, False) (forall _ : eq C' D', False))
+++++
repeat subst.
-----
Lemma five_segment : forall A A' B B' C C' D D', Cong A B A' B' -> Cong B C B' C' -> Cong A D A' D' -> Cong B D B' D' -> Bet A B C -> Bet A' B' C' -> A <> B -> Cong C D C' D'.
Proof.
unfold Bet.
unfold Cong.
intros.
intuition.
repeat subst.

*****
H10 : forall _ : eq B' D', False
H2 : forall _ : eq B D, False
H9 : forall _ : eq C' D', False
H1 : forall _ : eq C D, False
H8 : forall _ : eq B' C', False
H0 : forall _ : eq B C, False
H7 : forall _ : eq C' B', False
H,H5 : forall _ : eq C B, False
B,B',C,C',D,D' : Point
*****
or (and (eq C D) (eq C' D')) (and (forall _ : eq C D, False) (forall _ : eq C' D', False))
+++++
tauto.
-----
Lemma five_segment : forall A A' B B' C C' D D', Cong A B A' B' -> Cong B C B' C' -> Cong A D A' D' -> Cong B D B' D' -> Bet A B C -> Bet A' B' C' -> A <> B -> Cong C D C' D'.
Proof.
unfold Bet.
unfold Cong.
intros.
intuition.

*****

*****

+++++
Qed.
-----
Lemma point_eq_dec : forall A B : Point, A=B \/ A<>B.
-----
Lemma point_eq_dec : forall A B : Point, A=B \\/ A<>B.

*****

*****
forall A B : Point, or (eq A B) (not (eq A B))
+++++
Proof.
-----
Lemma point_eq_dec : forall A B : Point, A=B \\/ A<>B.
Proof.

*****

*****
forall A B : Point, or (eq A B) (not (eq A B))
+++++
intros.
-----
Lemma point_eq_dec : forall A B : Point, A=B \\/ A<>B.
Proof.
intros.

*****
A,B : Point
*****
or (eq A B) (not (eq A B))
+++++
destruct A.
-----
Lemma point_eq_dec : forall A B : Point, A=B \\/ A<>B.
Proof.
intros.
destruct A.

*****
B : Point
*****
or (eq P0 B) (not (eq P0 B))
+++++
destruct B.
-----
Lemma point_eq_dec : forall A B : Point, A=B \\/ A<>B.
Proof.
intros.
destruct A.
destruct B.

*****

*****
or (eq P0 P0) (not (eq P0 P0))
+++++
try tauto.
-----
Lemma point_eq_dec : forall A B : Point, A=B \\/ A<>B.
Proof.
intros.
destruct A.
destruct B.

*****

*****
or (eq P0 P1) (not (eq P0 P1))
+++++
try tauto.
-----
Lemma point_eq_dec : forall A B : Point, A=B \\/ A<>B.
Proof.
intros.
destruct A.
destruct B.
try tauto.

*****

*****
or (eq P0 P1) (not (eq P0 P1))
+++++
right.
-----
Lemma point_eq_dec : forall A B : Point, A=B \\/ A<>B.
Proof.
intros.
destruct A.
destruct B.
try tauto.
right.

*****

*****
not (eq P0 P1)
+++++
discriminate.
-----
Lemma point_eq_dec : forall A B : Point, A=B \\/ A<>B.
Proof.
intros.
destruct A.
destruct B.

*****

*****
or (eq P0 P2) (not (eq P0 P2))
+++++
try tauto.
-----
Lemma point_eq_dec : forall A B : Point, A=B \\/ A<>B.
Proof.
intros.
destruct A.
destruct B.
try tauto.

*****

*****
or (eq P0 P2) (not (eq P0 P2))
+++++
right.
-----
Lemma point_eq_dec : forall A B : Point, A=B \\/ A<>B.
Proof.
intros.
destruct A.
destruct B.
try tauto.
right.

*****

*****
not (eq P0 P2)
+++++
discriminate.
-----
Lemma point_eq_dec : forall A B : Point, A=B \\/ A<>B.
Proof.
intros.
destruct A.
destruct B.

*****

*****
or (eq P0 P3) (not (eq P0 P3))
+++++
try tauto.
-----
Lemma point_eq_dec : forall A B : Point, A=B \\/ A<>B.
Proof.
intros.
destruct A.
destruct B.
try tauto.

*****

*****
or (eq P0 P3) (not (eq P0 P3))
+++++
right.
-----
Lemma point_eq_dec : forall A B : Point, A=B \\/ A<>B.
Proof.
intros.
destruct A.
destruct B.
try tauto.
right.

*****

*****
not (eq P0 P3)
+++++
discriminate.
-----
Lemma point_eq_dec : forall A B : Point, A=B \\/ A<>B.
Proof.
intros.
destruct A.

*****
B : Point
*****
or (eq P1 B) (not (eq P1 B))
+++++
destruct B.
-----
Lemma point_eq_dec : forall A B : Point, A=B \\/ A<>B.
Proof.
intros.
destruct A.
destruct B.

*****

*****
or (eq P1 P0) (not (eq P1 P0))
+++++
try tauto.
-----
Lemma point_eq_dec : forall A B : Point, A=B \\/ A<>B.
Proof.
intros.
destruct A.
destruct B.
try tauto.

*****

*****
or (eq P1 P0) (not (eq P1 P0))
+++++
right.
-----
Lemma point_eq_dec : forall A B : Point, A=B \\/ A<>B.
Proof.
intros.
destruct A.
destruct B.
try tauto.
right.

*****

*****
not (eq P1 P0)
+++++
discriminate.
-----
Lemma point_eq_dec : forall A B : Point, A=B \\/ A<>B.
Proof.
intros.
destruct A.
destruct B.

*****

*****
or (eq P1 P1) (not (eq P1 P1))
+++++
try tauto.
-----
Lemma point_eq_dec : forall A B : Point, A=B \\/ A<>B.
Proof.
intros.
destruct A.
destruct B.

*****

*****
or (eq P1 P2) (not (eq P1 P2))
+++++
try tauto.
-----
Lemma point_eq_dec : forall A B : Point, A=B \\/ A<>B.
Proof.
intros.
destruct A.
destruct B.
try tauto.

*****

*****
or (eq P1 P2) (not (eq P1 P2))
+++++
right.
-----
Lemma point_eq_dec : forall A B : Point, A=B \\/ A<>B.
Proof.
intros.
destruct A.
destruct B.
try tauto.
right.

*****

*****
not (eq P1 P2)
+++++
discriminate.
-----
Lemma point_eq_dec : forall A B : Point, A=B \\/ A<>B.
Proof.
intros.
destruct A.
destruct B.

*****

*****
or (eq P1 P3) (not (eq P1 P3))
+++++
try tauto.
-----
Lemma point_eq_dec : forall A B : Point, A=B \\/ A<>B.
Proof.
intros.
destruct A.
destruct B.
try tauto.

*****

*****
or (eq P1 P3) (not (eq P1 P3))
+++++
right.
-----
Lemma point_eq_dec : forall A B : Point, A=B \\/ A<>B.
Proof.
intros.
destruct A.
destruct B.
try tauto.
right.

*****

*****
not (eq P1 P3)
+++++
discriminate.
-----
Lemma point_eq_dec : forall A B : Point, A=B \\/ A<>B.
Proof.
intros.
destruct A.

*****
B : Point
*****
or (eq P2 B) (not (eq P2 B))
+++++
destruct B.
-----
Lemma point_eq_dec : forall A B : Point, A=B \\/ A<>B.
Proof.
intros.
destruct A.
destruct B.

*****

*****
or (eq P2 P0) (not (eq P2 P0))
+++++
try tauto.
-----
Lemma point_eq_dec : forall A B : Point, A=B \\/ A<>B.
Proof.
intros.
destruct A.
destruct B.
try tauto.

*****

*****
or (eq P2 P0) (not (eq P2 P0))
+++++
right.
-----
Lemma point_eq_dec : forall A B : Point, A=B \\/ A<>B.
Proof.
intros.
destruct A.
destruct B.
try tauto.
right.

*****

*****
not (eq P2 P0)
+++++
discriminate.
-----
Lemma point_eq_dec : forall A B : Point, A=B \\/ A<>B.
Proof.
intros.
destruct A.
destruct B.

*****

*****
or (eq P2 P1) (not (eq P2 P1))
+++++
try tauto.
-----
Lemma point_eq_dec : forall A B : Point, A=B \\/ A<>B.
Proof.
intros.
destruct A.
destruct B.
try tauto.

*****

*****
or (eq P2 P1) (not (eq P2 P1))
+++++
right.
-----
Lemma point_eq_dec : forall A B : Point, A=B \\/ A<>B.
Proof.
intros.
destruct A.
destruct B.
try tauto.
right.

*****

*****
not (eq P2 P1)
+++++
discriminate.
-----
Lemma point_eq_dec : forall A B : Point, A=B \\/ A<>B.
Proof.
intros.
destruct A.
destruct B.

*****

*****
or (eq P2 P2) (not (eq P2 P2))
+++++
try tauto.
-----
Lemma point_eq_dec : forall A B : Point, A=B \\/ A<>B.
Proof.
intros.
destruct A.
destruct B.

*****

*****
or (eq P2 P3) (not (eq P2 P3))
+++++
try tauto.
-----
Lemma point_eq_dec : forall A B : Point, A=B \\/ A<>B.
Proof.
intros.
destruct A.
destruct B.
try tauto.

*****

*****
or (eq P2 P3) (not (eq P2 P3))
+++++
right.
-----
Lemma point_eq_dec : forall A B : Point, A=B \\/ A<>B.
Proof.
intros.
destruct A.
destruct B.
try tauto.
right.

*****

*****
not (eq P2 P3)
+++++
discriminate.
-----
Lemma point_eq_dec : forall A B : Point, A=B \\/ A<>B.
Proof.
intros.
destruct A.

*****
B : Point
*****
or (eq P3 B) (not (eq P3 B))
+++++
destruct B.
-----
Lemma point_eq_dec : forall A B : Point, A=B \\/ A<>B.
Proof.
intros.
destruct A.
destruct B.

*****

*****
or (eq P3 P0) (not (eq P3 P0))
+++++
try tauto.
-----
Lemma point_eq_dec : forall A B : Point, A=B \\/ A<>B.
Proof.
intros.
destruct A.
destruct B.
try tauto.

*****

*****
or (eq P3 P0) (not (eq P3 P0))
+++++
right.
-----
Lemma point_eq_dec : forall A B : Point, A=B \\/ A<>B.
Proof.
intros.
destruct A.
destruct B.
try tauto.
right.

*****

*****
not (eq P3 P0)
+++++
discriminate.
-----
Lemma point_eq_dec : forall A B : Point, A=B \\/ A<>B.
Proof.
intros.
destruct A.
destruct B.

*****

*****
or (eq P3 P1) (not (eq P3 P1))
+++++
try tauto.
-----
Lemma point_eq_dec : forall A B : Point, A=B \\/ A<>B.
Proof.
intros.
destruct A.
destruct B.
try tauto.

*****

*****
or (eq P3 P1) (not (eq P3 P1))
+++++
right.
-----
Lemma point_eq_dec : forall A B : Point, A=B \\/ A<>B.
Proof.
intros.
destruct A.
destruct B.
try tauto.
right.

*****

*****
not (eq P3 P1)
+++++
discriminate.
-----
Lemma point_eq_dec : forall A B : Point, A=B \\/ A<>B.
Proof.
intros.
destruct A.
destruct B.

*****

*****
or (eq P3 P2) (not (eq P3 P2))
+++++
try tauto.
-----
Lemma point_eq_dec : forall A B : Point, A=B \\/ A<>B.
Proof.
intros.
destruct A.
destruct B.
try tauto.

*****

*****
or (eq P3 P2) (not (eq P3 P2))
+++++
right.
-----
Lemma point_eq_dec : forall A B : Point, A=B \\/ A<>B.
Proof.
intros.
destruct A.
destruct B.
try tauto.
right.

*****

*****
not (eq P3 P2)
+++++
discriminate.
-----
Lemma point_eq_dec : forall A B : Point, A=B \\/ A<>B.
Proof.
intros.
destruct A.
destruct B.

*****

*****
or (eq P3 P3) (not (eq P3 P3))
+++++
try tauto.
-----
Lemma point_eq_dec : forall A B : Point, A=B \\/ A<>B.
Proof.
intros.
destruct A.

*****

*****

+++++
Qed.
-----
Lemma segment_construction : forall A B C D,\n  exists E, Bet A B E /\ Cong B E C D.
-----
Lemma segment_construction : forall A B C D, exists E, Bet A B E /\\ Cong B E C D.

*****

*****
forall A B C D : Point, ex (fun E : Point => and (Bet A B E) (Cong B E C D))
+++++
Proof.
-----
Lemma segment_construction : forall A B C D, exists E, Bet A B E /\\ Cong B E C D.
Proof.

*****

*****
forall A B C D : Point, ex (fun E : Point => and (Bet A B E) (Cong B E C D))
+++++
intros.
-----
Lemma segment_construction : forall A B C D, exists E, Bet A B E /\\ Cong B E C D.
Proof.
intros.

*****
A,B,C,D : Point
*****
ex (fun E : Point => and (Bet A B E) (Cong B E C D))
+++++
unfold Bet.
-----
Lemma segment_construction : forall A B C D, exists E, Bet A B E /\\ Cong B E C D.
Proof.
intros.
unfold Bet.

*****
A,B,C,D : Point
*****
ex (fun E : Point => and (or (eq A B) (or (eq B E) (eq A E))) (Cong B E C D))
+++++
unfold Cong.
-----
Lemma segment_construction : forall A B C D, exists E, Bet A B E /\\ Cong B E C D.
Proof.
intros.
unfold Bet.
unfold Cong.

*****
A,B,C,D : Point
*****
ex (fun E : Point => and (or (eq A B) (or (eq B E) (eq A E))) (or (and (eq B E) (eq C D)) (and (not (eq B E)) (not (eq C D)))))
+++++
elim (point_eq_dec C D).
-----
Lemma segment_construction : forall A B C D, exists E, Bet A B E /\\ Cong B E C D.
Proof.
intros.
unfold Bet.
unfold Cong.
elim (point_eq_dec C D).

*****
A,B,C,D : Point
*****
forall _ : eq C D, ex (fun E : Point => and (or (eq A B) (or (eq B E) (eq A E))) (or (and (eq B E) (eq C D)) (and (not (eq B E)) (not (eq C D)))))
+++++
intros.
-----
Lemma segment_construction : forall A B C D, exists E, Bet A B E /\\ Cong B E C D.
Proof.
intros.
unfold Bet.
unfold Cong.
elim (point_eq_dec C D).
intros.

*****
H : eq C D
A,B,C,D : Point
*****
ex (fun E : Point => and (or (eq A B) (or (eq B E) (eq A E))) (or (and (eq B E) (eq C D)) (and (not (eq B E)) (not (eq C D)))))
+++++
exists B.
-----
Lemma segment_construction : forall A B C D, exists E, Bet A B E /\\ Cong B E C D.
Proof.
intros.
unfold Bet.
unfold Cong.
elim (point_eq_dec C D).
intros.
exists B.

*****
H : eq C D
A,B,C,D : Point
*****
and (or (eq A B) (or (eq B B) (eq A B))) (or (and (eq B B) (eq C D)) (and (not (eq B B)) (not (eq C D))))
+++++
tauto.
-----
Lemma segment_construction : forall A B C D, exists E, Bet A B E /\\ Cong B E C D.
Proof.
intros.
unfold Bet.
unfold Cong.
elim (point_eq_dec C D).

*****
A,B,C,D : Point
*****
forall _ : not (eq C D), ex (fun E : Point => and (or (eq A B) (or (eq B E) (eq A E))) (or (and (eq B E) (eq C D)) (and (not (eq B E)) (not (eq C D)))))
+++++
intros.
-----
Lemma segment_construction : forall A B C D, exists E, Bet A B E /\\ Cong B E C D.
Proof.
intros.
unfold Bet.
unfold Cong.
elim (point_eq_dec C D).
intros.

*****
H : not (eq C D)
A,B,C,D : Point
*****
ex (fun E : Point => and (or (eq A B) (or (eq B E) (eq A E))) (or (and (eq B E) (eq C D)) (and (not (eq B E)) (not (eq C D)))))
+++++
elim (point_eq_dec A B).
-----
Lemma segment_construction : forall A B C D, exists E, Bet A B E /\\ Cong B E C D.
Proof.
intros.
unfold Bet.
unfold Cong.
elim (point_eq_dec C D).
intros.
elim (point_eq_dec A B).

*****
H : not (eq C D)
A,B,C,D : Point
*****
forall _ : eq A B, ex (fun E : Point => and (or (eq A B) (or (eq B E) (eq A E))) (or (and (eq B E) (eq C D)) (and (not (eq B E)) (not (eq C D)))))
+++++
intro.
-----
Lemma segment_construction : forall A B C D, exists E, Bet A B E /\\ Cong B E C D.
Proof.
intros.
unfold Bet.
unfold Cong.
elim (point_eq_dec C D).
intros.
elim (point_eq_dec A B).
intro.

*****
H0 : eq A B
H : not (eq C D)
A,B,C,D : Point
*****
ex (fun E : Point => and (or (eq A B) (or (eq B E) (eq A E))) (or (and (eq B E) (eq C D)) (and (not (eq B E)) (not (eq C D)))))
+++++
subst.
-----
Lemma segment_construction : forall A B C D, exists E, Bet A B E /\\ Cong B E C D.
Proof.
intros.
unfold Bet.
unfold Cong.
elim (point_eq_dec C D).
intros.
elim (point_eq_dec A B).
intro.
subst.

*****
H : not (eq C D)
B,C,D : Point
*****
ex (fun E : Point => and (or (eq B B) (or (eq B E) (eq B E))) (or (and (eq B E) (eq C D)) (and (not (eq B E)) (not (eq C D)))))
+++++
destruct B.
-----
Lemma segment_construction : forall A B C D, exists E, Bet A B E /\\ Cong B E C D.
Proof.
intros.
unfold Bet.
unfold Cong.
elim (point_eq_dec C D).
intros.
elim (point_eq_dec A B).
intro.
subst.
destruct B.

*****
H : not (eq C D)
C,D : Point
*****
ex (fun E : Point => and (or (eq P0 P0) (or (eq P0 E) (eq P0 E))) (or (and (eq P0 E) (eq C D)) (and (not (eq P0 E)) (not (eq C D)))))
+++++
try (exists P0; split; try tauto; right; split; try discriminate; assumption).
-----
Lemma segment_construction : forall A B C D, exists E, Bet A B E /\\ Cong B E C D.
Proof.
intros.
unfold Bet.
unfold Cong.
elim (point_eq_dec C D).
intros.
elim (point_eq_dec A B).
intro.
subst.
destruct B.
try (exists P0; split; try tauto; right; split; try discriminate; assumption).

*****
H : not (eq C D)
C,D : Point
*****
ex (fun E : Point => and (or (eq P0 P0) (or (eq P0 E) (eq P0 E))) (or (and (eq P0 E) (eq C D)) (and (not (eq P0 E)) (not (eq C D)))))
+++++
exists P1.
-----
Lemma segment_construction : forall A B C D, exists E, Bet A B E /\\ Cong B E C D.
Proof.
intros.
unfold Bet.
unfold Cong.
elim (point_eq_dec C D).
intros.
elim (point_eq_dec A B).
intro.
subst.
destruct B.
try (exists P0; split; try tauto; right; split; try discriminate; assumption).
exists P1.

*****
H : not (eq C D)
C,D : Point
*****
and (or (eq P0 P0) (or (eq P0 P1) (eq P0 P1))) (or (and (eq P0 P1) (eq C D)) (and (not (eq P0 P1)) (not (eq C D))))
+++++
split.
-----
Lemma segment_construction : forall A B C D, exists E, Bet A B E /\\ Cong B E C D.
Proof.
intros.
unfold Bet.
unfold Cong.
elim (point_eq_dec C D).
intros.
elim (point_eq_dec A B).
intro.
subst.
destruct B.
try (exists P0; split; try tauto; right; split; try discriminate; assumption).
exists P1.
split.

*****
H : not (eq C D)
C,D : Point
*****
or (eq P0 P0) (or (eq P0 P1) (eq P0 P1))
+++++
try tauto.
-----
Lemma segment_construction : forall A B C D, exists E, Bet A B E /\\ Cong B E C D.
Proof.
intros.
unfold Bet.
unfold Cong.
elim (point_eq_dec C D).
intros.
elim (point_eq_dec A B).
intro.
subst.
destruct B.
try (exists P0; split; try tauto; right; split; try discriminate; assumption).
exists P1.
split.

*****
H : not (eq C D)
C,D : Point
*****
or (and (eq P0 P1) (eq C D)) (and (not (eq P0 P1)) (not (eq C D)))
+++++
try tauto.
-----
Lemma segment_construction : forall A B C D, exists E, Bet A B E /\\ Cong B E C D.
Proof.
intros.
unfold Bet.
unfold Cong.
elim (point_eq_dec C D).
intros.
elim (point_eq_dec A B).
intro.
subst.
destruct B.
try (exists P0; split; try tauto; right; split; try discriminate; assumption).
exists P1.
split.
try tauto.

*****
H : not (eq C D)
C,D : Point
*****
or (and (eq P0 P1) (eq C D)) (and (not (eq P0 P1)) (not (eq C D)))
+++++
right.
-----
Lemma segment_construction : forall A B C D, exists E, Bet A B E /\\ Cong B E C D.
Proof.
intros.
unfold Bet.
unfold Cong.
elim (point_eq_dec C D).
intros.
elim (point_eq_dec A B).
intro.
subst.
destruct B.
try (exists P0; split; try tauto; right; split; try discriminate; assumption).
exists P1.
split.
try tauto.
right.

*****
H : not (eq C D)
C,D : Point
*****
and (not (eq P0 P1)) (not (eq C D))
+++++
split.
-----
Lemma segment_construction : forall A B C D, exists E, Bet A B E /\\ Cong B E C D.
Proof.
intros.
unfold Bet.
unfold Cong.
elim (point_eq_dec C D).
intros.
elim (point_eq_dec A B).
intro.
subst.
destruct B.
try (exists P0; split; try tauto; right; split; try discriminate; assumption).
exists P1.
split.
try tauto.
right.
split.

*****
H : not (eq C D)
C,D : Point
*****
not (eq P0 P1)
+++++
try discriminate.
-----
Lemma segment_construction : forall A B C D, exists E, Bet A B E /\\ Cong B E C D.
Proof.
intros.
unfold Bet.
unfold Cong.
elim (point_eq_dec C D).
intros.
elim (point_eq_dec A B).
intro.
subst.
destruct B.
try (exists P0; split; try tauto; right; split; try discriminate; assumption).
exists P1.
split.
try tauto.
right.
split.

*****
H : not (eq C D)
C,D : Point
*****
not (eq C D)
+++++
try discriminate.
-----
Lemma segment_construction : forall A B C D, exists E, Bet A B E /\\ Cong B E C D.
Proof.
intros.
unfold Bet.
unfold Cong.
elim (point_eq_dec C D).
intros.
elim (point_eq_dec A B).
intro.
subst.
destruct B.
try (exists P0; split; try tauto; right; split; try discriminate; assumption).
exists P1.
split.
try tauto.
right.
split.
try discriminate.

*****
H : not (eq C D)
C,D : Point
*****
not (eq C D)
+++++
assumption.
-----
Lemma segment_construction : forall A B C D, exists E, Bet A B E /\\ Cong B E C D.
Proof.
intros.
unfold Bet.
unfold Cong.
elim (point_eq_dec C D).
intros.
elim (point_eq_dec A B).
intro.
subst.
destruct B.

*****
H : not (eq C D)
C,D : Point
*****
ex (fun E : Point => and (or (eq P1 P1) (or (eq P1 E) (eq P1 E))) (or (and (eq P1 E) (eq C D)) (and (not (eq P1 E)) (not (eq C D)))))
+++++
try (exists P0; split; try tauto; right; split; try discriminate; assumption).
-----
Lemma segment_construction : forall A B C D, exists E, Bet A B E /\\ Cong B E C D.
Proof.
intros.
unfold Bet.
unfold Cong.
elim (point_eq_dec C D).
intros.
elim (point_eq_dec A B).
intro.
subst.
destruct B.

*****
H : not (eq C D)
C,D : Point
*****
ex (fun E : Point => and (or (eq P2 P2) (or (eq P2 E) (eq P2 E))) (or (and (eq P2 E) (eq C D)) (and (not (eq P2 E)) (not (eq C D)))))
+++++
try (exists P0; split; try tauto; right; split; try discriminate; assumption).
-----
Lemma segment_construction : forall A B C D, exists E, Bet A B E /\\ Cong B E C D.
Proof.
intros.
unfold Bet.
unfold Cong.
elim (point_eq_dec C D).
intros.
elim (point_eq_dec A B).
intro.
subst.
destruct B.

*****
H : not (eq C D)
C,D : Point
*****
ex (fun E : Point => and (or (eq P3 P3) (or (eq P3 E) (eq P3 E))) (or (and (eq P3 E) (eq C D)) (and (not (eq P3 E)) (not (eq C D)))))
+++++
try (exists P0; split; try tauto; right; split; try discriminate; assumption).
-----
Lemma segment_construction : forall A B C D, exists E, Bet A B E /\\ Cong B E C D.
Proof.
intros.
unfold Bet.
unfold Cong.
elim (point_eq_dec C D).
intros.
elim (point_eq_dec A B).

*****
H : not (eq C D)
A,B,C,D : Point
*****
forall _ : not (eq A B), ex (fun E : Point => and (or (eq A B) (or (eq B E) (eq A E))) (or (and (eq B E) (eq C D)) (and (not (eq B E)) (not (eq C D)))))
+++++
intros.
-----
Lemma segment_construction : forall A B C D, exists E, Bet A B E /\\ Cong B E C D.
Proof.
intros.
unfold Bet.
unfold Cong.
elim (point_eq_dec C D).
intros.
elim (point_eq_dec A B).
intros.

*****
H0 : not (eq A B)
H : not (eq C D)
A,B,C,D : Point
*****
ex (fun E : Point => and (or (eq A B) (or (eq B E) (eq A E))) (or (and (eq B E) (eq C D)) (and (not (eq B E)) (not (eq C D)))))
+++++
exists A.
-----
Lemma segment_construction : forall A B C D, exists E, Bet A B E /\\ Cong B E C D.
Proof.
intros.
unfold Bet.
unfold Cong.
elim (point_eq_dec C D).
intros.
elim (point_eq_dec A B).
intros.
exists A.

*****
H0 : not (eq A B)
H : not (eq C D)
A,B,C,D : Point
*****
and (or (eq A B) (or (eq B A) (eq A A))) (or (and (eq B A) (eq C D)) (and (not (eq B A)) (not (eq C D))))
+++++
firstorder.
-----
Lemma segment_construction : forall A B C D, exists E, Bet A B E /\\ Cong B E C D.
Proof.
intros.
unfold Bet.
unfold Cong.
elim (point_eq_dec C D).

*****

*****

+++++
Qed.
-----
Lemma lower_dim : exists A, exists B, exists C, ~ (Bet A B C \/ Bet B C A \/ Bet C A B).
-----
Lemma lower_dim : exists A, exists B, exists C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B).

*****

*****
ex (fun A : Point => ex (fun B : Point => ex (fun C : Point => not (or (Bet A B C) (or (Bet B C A) (Bet C A B))))))
+++++
Proof.
-----
Lemma lower_dim : exists A, exists B, exists C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.

*****

*****
ex (fun A : Point => ex (fun B : Point => ex (fun C : Point => not (or (Bet A B C) (or (Bet B C A) (Bet C A B))))))
+++++
exists P0.
-----
Lemma lower_dim : exists A, exists B, exists C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
exists P0.

*****

*****
ex (fun B : Point => ex (fun C : Point => not (or (Bet P0 B C) (or (Bet B C P0) (Bet C P0 B)))))
+++++
exists P1.
-----
Lemma lower_dim : exists A, exists B, exists C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
exists P0.
exists P1.

*****

*****
ex (fun C : Point => not (or (Bet P0 P1 C) (or (Bet P1 C P0) (Bet C P0 P1))))
+++++
exists P2.
-----
Lemma lower_dim : exists A, exists B, exists C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
exists P0.
exists P1.
exists P2.

*****

*****
not (or (Bet P0 P1 P2) (or (Bet P1 P2 P0) (Bet P2 P0 P1)))
+++++
unfold Bet.
-----
Lemma lower_dim : exists A, exists B, exists C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
exists P0.
exists P1.
exists P2.
unfold Bet.

*****

*****
not (or (or (eq P0 P1) (or (eq P1 P2) (eq P0 P2))) (or (or (eq P1 P2) (or (eq P2 P0) (eq P1 P0))) (or (eq P2 P0) (or (eq P0 P1) (eq P2 P1)))))
+++++
intro.
-----
Lemma lower_dim : exists A, exists B, exists C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
exists P0.
exists P1.
exists P2.
unfold Bet.
intro.

*****
H : or (or (eq P0 P1) (or (eq P1 P2) (eq P0 P2)))\n (or (or (eq P1 P2) (or (eq P2 P0) (eq P1 P0)))\n (or (eq P2 P0) (or (eq P0 P1) (eq P2 P1))))
*****
False
+++++
intuition discriminate.
-----
Lemma lower_dim : exists A, exists B, exists C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
exists P0.
exists P1.
exists P2.
unfold Bet.
intro.
intuition discriminate.

*****

*****

+++++
Qed.
-----
Lemma cong_sym : forall A B C D, Cong A B C D -> Cong C D A B.
-----
Lemma cong_sym : forall A B C D, Cong A B C D -> Cong C D A B.

*****

*****
forall (A B C D : Point) (_ : Cong A B C D), Cong C D A B
+++++
Proof.
-----
Lemma cong_sym : forall A B C D, Cong A B C D -> Cong C D A B.
Proof.

*****

*****
forall (A B C D : Point) (_ : Cong A B C D), Cong C D A B
+++++
unfold Cong.
-----
Lemma cong_sym : forall A B C D, Cong A B C D -> Cong C D A B.
Proof.
unfold Cong.

*****

*****
forall (A B C D : Point) (_ : or (and (eq A B) (eq C D)) (and (not (eq A B)) (not (eq C D)))), or (and (eq C D) (eq A B)) (and (not (eq C D)) (not (eq A B)))
+++++
intros.
-----
Lemma cong_sym : forall A B C D, Cong A B C D -> Cong C D A B.
Proof.
unfold Cong.
intros.

*****
H : or (and (eq A B) (eq C D)) (and (not (eq A B)) (not (eq C D)))
A,B,C,D : Point
*****
or (and (eq C D) (eq A B)) (and (not (eq C D)) (not (eq A B)))
+++++
tauto.
-----
Lemma cong_sym : forall A B C D, Cong A B C D -> Cong C D A B.
Proof.
unfold Cong.
intros.
tauto.

*****

*****

+++++
Qed.
-----
Lemma cong_aux : forall A, Cong A P0 A P1 -> A = P2 \/ A = P3.
-----
Lemma cong_aux : forall A, Cong A P0 A P1 -> A = P2 \\/ A = P3.

*****

*****
forall (A : Point) (_ : Cong A P0 A P1), or (eq A P2) (eq A P3)
+++++
Proof.
-----
Lemma cong_aux : forall A, Cong A P0 A P1 -> A = P2 \\/ A = P3.
Proof.

*****

*****
forall (A : Point) (_ : Cong A P0 A P1), or (eq A P2) (eq A P3)
+++++
intros.
-----
Lemma cong_aux : forall A, Cong A P0 A P1 -> A = P2 \\/ A = P3.
Proof.
intros.

*****
H : Cong A P0 A P1
A : Point
*****
or (eq A P2) (eq A P3)
+++++
destruct A.
-----
Lemma cong_aux : forall A, Cong A P0 A P1 -> A = P2 \\/ A = P3.
Proof.
intros.
destruct A.

*****
H : Cong P0 P0 P0 P1
*****
or (eq P0 P2) (eq P0 P3)
+++++
unfold Cong in *.
-----
Lemma cong_aux : forall A, Cong A P0 A P1 -> A = P2 \\/ A = P3.
Proof.
intros.
destruct A.
unfold Cong in *.

*****
H : or (and (eq P0 P0) (eq P0 P1)) (and (not (eq P0 P0)) (not (eq P0 P1)))
*****
or (eq P0 P2) (eq P0 P3)
+++++
intuition.
-----
Lemma cong_aux : forall A, Cong A P0 A P1 -> A = P2 \\/ A = P3.
Proof.
intros.
destruct A.
unfold Cong in *.
intuition.

*****
H1 : eq P0 P1
H : eq P0 P0
*****
or (eq P0 P2) (eq P0 P3)
+++++
congruence.
-----
Lemma cong_aux : forall A, Cong A P0 A P1 -> A = P2 \\/ A = P3.
Proof.
intros.
destruct A.

*****
H : Cong P1 P0 P1 P1
*****
or (eq P1 P2) (eq P1 P3)
+++++
unfold Cong in *.
-----
Lemma cong_aux : forall A, Cong A P0 A P1 -> A = P2 \\/ A = P3.
Proof.
intros.
destruct A.
unfold Cong in *.

*****
H : or (and (eq P1 P0) (eq P1 P1)) (and (not (eq P1 P0)) (not (eq P1 P1)))
*****
or (eq P1 P2) (eq P1 P3)
+++++
intuition.
-----
Lemma cong_aux : forall A, Cong A P0 A P1 -> A = P2 \\/ A = P3.
Proof.
intros.
destruct A.
unfold Cong in *.
intuition.

*****
H1 : eq P1 P1
H : eq P1 P0
*****
or (eq P1 P2) (eq P1 P3)
+++++
congruence.
-----
Lemma cong_aux : forall A, Cong A P0 A P1 -> A = P2 \\/ A = P3.
Proof.
intros.
destruct A.

*****
H : Cong P2 P0 P2 P1
*****
or (eq P2 P2) (eq P2 P3)
+++++
unfold Cong in *.
-----
Lemma cong_aux : forall A, Cong A P0 A P1 -> A = P2 \\/ A = P3.
Proof.
intros.
destruct A.
unfold Cong in *.

*****
H : or (and (eq P2 P0) (eq P2 P1)) (and (not (eq P2 P0)) (not (eq P2 P1)))
*****
or (eq P2 P2) (eq P2 P3)
+++++
intuition.
-----
Lemma cong_aux : forall A, Cong A P0 A P1 -> A = P2 \\/ A = P3.
Proof.
intros.
destruct A.

*****
H : Cong P3 P0 P3 P1
*****
or (eq P3 P2) (eq P3 P3)
+++++
unfold Cong in *.
-----
Lemma cong_aux : forall A, Cong A P0 A P1 -> A = P2 \\/ A = P3.
Proof.
intros.
destruct A.
unfold Cong in *.

*****
H : or (and (eq P3 P0) (eq P3 P1)) (and (not (eq P3 P0)) (not (eq P3 P1)))
*****
or (eq P3 P2) (eq P3 P3)
+++++
intuition.
-----
Lemma cong_aux : forall A, Cong A P0 A P1 -> A = P2 \\/ A = P3.
Proof.
intros.
destruct A.

*****

*****

+++++
Qed.
-----
Lemma cong_aux_2 : forall A, Cong A P0 A P2 -> A = P1 \/ A = P3.
-----
Lemma cong_aux_2 : forall A, Cong A P0 A P2 -> A = P1 \\/ A = P3.

*****

*****
forall (A : Point) (_ : Cong A P0 A P2), or (eq A P1) (eq A P3)
+++++
Proof.
-----
Lemma cong_aux_2 : forall A, Cong A P0 A P2 -> A = P1 \\/ A = P3.
Proof.

*****

*****
forall (A : Point) (_ : Cong A P0 A P2), or (eq A P1) (eq A P3)
+++++
intros.
-----
Lemma cong_aux_2 : forall A, Cong A P0 A P2 -> A = P1 \\/ A = P3.
Proof.
intros.

*****
H : Cong A P0 A P2
A : Point
*****
or (eq A P1) (eq A P3)
+++++
destruct A.
-----
Lemma cong_aux_2 : forall A, Cong A P0 A P2 -> A = P1 \\/ A = P3.
Proof.
intros.
destruct A.

*****
H : Cong P0 P0 P0 P2
*****
or (eq P0 P1) (eq P0 P3)
+++++
unfold Cong in *.
-----
Lemma cong_aux_2 : forall A, Cong A P0 A P2 -> A = P1 \\/ A = P3.
Proof.
intros.
destruct A.
unfold Cong in *.

*****
H : or (and (eq P0 P0) (eq P0 P2)) (and (not (eq P0 P0)) (not (eq P0 P2)))
*****
or (eq P0 P1) (eq P0 P3)
+++++
intuition.
-----
Lemma cong_aux_2 : forall A, Cong A P0 A P2 -> A = P1 \\/ A = P3.
Proof.
intros.
destruct A.
unfold Cong in *.
intuition.

*****
H1 : eq P0 P2
H : eq P0 P0
*****
or (eq P0 P1) (eq P0 P3)
+++++
congruence.
-----
Lemma cong_aux_2 : forall A, Cong A P0 A P2 -> A = P1 \\/ A = P3.
Proof.
intros.
destruct A.

*****
H : Cong P1 P0 P1 P2
*****
or (eq P1 P1) (eq P1 P3)
+++++
unfold Cong in *.
-----
Lemma cong_aux_2 : forall A, Cong A P0 A P2 -> A = P1 \\/ A = P3.
Proof.
intros.
destruct A.
unfold Cong in *.

*****
H : or (and (eq P1 P0) (eq P1 P2)) (and (not (eq P1 P0)) (not (eq P1 P2)))
*****
or (eq P1 P1) (eq P1 P3)
+++++
intuition.
-----
Lemma cong_aux_2 : forall A, Cong A P0 A P2 -> A = P1 \\/ A = P3.
Proof.
intros.
destruct A.

*****
H : Cong P2 P0 P2 P2
*****
or (eq P2 P1) (eq P2 P3)
+++++
unfold Cong in *.
-----
Lemma cong_aux_2 : forall A, Cong A P0 A P2 -> A = P1 \\/ A = P3.
Proof.
intros.
destruct A.
unfold Cong in *.

*****
H : or (and (eq P2 P0) (eq P2 P2)) (and (not (eq P2 P0)) (not (eq P2 P2)))
*****
or (eq P2 P1) (eq P2 P3)
+++++
intuition.
-----
Lemma cong_aux_2 : forall A, Cong A P0 A P2 -> A = P1 \\/ A = P3.
Proof.
intros.
destruct A.
unfold Cong in *.
intuition.

*****
H1 : eq P2 P2
H : eq P2 P0
*****
or (eq P2 P1) (eq P2 P3)
+++++
congruence.
-----
Lemma cong_aux_2 : forall A, Cong A P0 A P2 -> A = P1 \\/ A = P3.
Proof.
intros.
destruct A.

*****
H : Cong P3 P0 P3 P2
*****
or (eq P3 P1) (eq P3 P3)
+++++
unfold Cong in *.
-----
Lemma cong_aux_2 : forall A, Cong A P0 A P2 -> A = P1 \\/ A = P3.
Proof.
intros.
destruct A.
unfold Cong in *.

*****
H : or (and (eq P3 P0) (eq P3 P2)) (and (not (eq P3 P0)) (not (eq P3 P2)))
*****
or (eq P3 P1) (eq P3 P3)
+++++
intuition.
-----
Lemma cong_aux_2 : forall A, Cong A P0 A P2 -> A = P1 \\/ A = P3.
Proof.
intros.
destruct A.

*****

*****

+++++
Qed.
-----
Lemma cong_aux_3 : forall A, Cong A P1 A P2 -> A = P0 \/ A = P3.
-----
Lemma cong_aux_3 : forall A, Cong A P1 A P2 -> A = P0 \\/ A = P3.

*****

*****
forall (A : Point) (_ : Cong A P1 A P2), or (eq A P0) (eq A P3)
+++++
Proof.
-----
Lemma cong_aux_3 : forall A, Cong A P1 A P2 -> A = P0 \\/ A = P3.
Proof.

*****

*****
forall (A : Point) (_ : Cong A P1 A P2), or (eq A P0) (eq A P3)
+++++
intros.
-----
Lemma cong_aux_3 : forall A, Cong A P1 A P2 -> A = P0 \\/ A = P3.
Proof.
intros.

*****
H : Cong A P1 A P2
A : Point
*****
or (eq A P0) (eq A P3)
+++++
destruct A.
-----
Lemma cong_aux_3 : forall A, Cong A P1 A P2 -> A = P0 \\/ A = P3.
Proof.
intros.
destruct A.

*****
H : Cong P0 P1 P0 P2
*****
or (eq P0 P0) (eq P0 P3)
+++++
unfold Cong in *.
-----
Lemma cong_aux_3 : forall A, Cong A P1 A P2 -> A = P0 \\/ A = P3.
Proof.
intros.
destruct A.
unfold Cong in *.

*****
H : or (and (eq P0 P1) (eq P0 P2)) (and (not (eq P0 P1)) (not (eq P0 P2)))
*****
or (eq P0 P0) (eq P0 P3)
+++++
intuition.
-----
Lemma cong_aux_3 : forall A, Cong A P1 A P2 -> A = P0 \\/ A = P3.
Proof.
intros.
destruct A.

*****
H : Cong P1 P1 P1 P2
*****
or (eq P1 P0) (eq P1 P3)
+++++
unfold Cong in *.
-----
Lemma cong_aux_3 : forall A, Cong A P1 A P2 -> A = P0 \\/ A = P3.
Proof.
intros.
destruct A.
unfold Cong in *.

*****
H : or (and (eq P1 P1) (eq P1 P2)) (and (not (eq P1 P1)) (not (eq P1 P2)))
*****
or (eq P1 P0) (eq P1 P3)
+++++
intuition.
-----
Lemma cong_aux_3 : forall A, Cong A P1 A P2 -> A = P0 \\/ A = P3.
Proof.
intros.
destruct A.
unfold Cong in *.
intuition.

*****
H1 : eq P1 P2
H : eq P1 P1
*****
or (eq P1 P0) (eq P1 P3)
+++++
congruence.
-----
Lemma cong_aux_3 : forall A, Cong A P1 A P2 -> A = P0 \\/ A = P3.
Proof.
intros.
destruct A.

*****
H : Cong P2 P1 P2 P2
*****
or (eq P2 P0) (eq P2 P3)
+++++
unfold Cong in *.
-----
Lemma cong_aux_3 : forall A, Cong A P1 A P2 -> A = P0 \\/ A = P3.
Proof.
intros.
destruct A.
unfold Cong in *.

*****
H : or (and (eq P2 P1) (eq P2 P2)) (and (not (eq P2 P1)) (not (eq P2 P2)))
*****
or (eq P2 P0) (eq P2 P3)
+++++
intuition.
-----
Lemma cong_aux_3 : forall A, Cong A P1 A P2 -> A = P0 \\/ A = P3.
Proof.
intros.
destruct A.
unfold Cong in *.
intuition.

*****
H1 : eq P2 P2
H : eq P2 P1
*****
or (eq P2 P0) (eq P2 P3)
+++++
congruence.
-----
Lemma cong_aux_3 : forall A, Cong A P1 A P2 -> A = P0 \\/ A = P3.
Proof.
intros.
destruct A.

*****
H : Cong P3 P1 P3 P2
*****
or (eq P3 P0) (eq P3 P3)
+++++
unfold Cong in *.
-----
Lemma cong_aux_3 : forall A, Cong A P1 A P2 -> A = P0 \\/ A = P3.
Proof.
intros.
destruct A.
unfold Cong in *.

*****
H : or (and (eq P3 P1) (eq P3 P2)) (and (not (eq P3 P1)) (not (eq P3 P2)))
*****
or (eq P3 P0) (eq P3 P3)
+++++
intuition.
-----
Lemma cong_aux_3 : forall A, Cong A P1 A P2 -> A = P0 \\/ A = P3.
Proof.
intros.
destruct A.

*****

*****

+++++
Qed.
-----
Lemma cong_aux_4 : forall A, Cong A P0 A P3 -> A = P1 \/ A = P2.
-----
Lemma cong_aux_4 : forall A, Cong A P0 A P3 -> A = P1 \\/ A = P2.

*****

*****
forall (A : Point) (_ : Cong A P0 A P3), or (eq A P1) (eq A P2)
+++++
Proof.
-----
Lemma cong_aux_4 : forall A, Cong A P0 A P3 -> A = P1 \\/ A = P2.
Proof.

*****

*****
forall (A : Point) (_ : Cong A P0 A P3), or (eq A P1) (eq A P2)
+++++
intros.
-----
Lemma cong_aux_4 : forall A, Cong A P0 A P3 -> A = P1 \\/ A = P2.
Proof.
intros.

*****
H : Cong A P0 A P3
A : Point
*****
or (eq A P1) (eq A P2)
+++++
destruct A.
-----
Lemma cong_aux_4 : forall A, Cong A P0 A P3 -> A = P1 \\/ A = P2.
Proof.
intros.
destruct A.

*****
H : Cong P0 P0 P0 P3
*****
or (eq P0 P1) (eq P0 P2)
+++++
unfold Cong in *.
-----
Lemma cong_aux_4 : forall A, Cong A P0 A P3 -> A = P1 \\/ A = P2.
Proof.
intros.
destruct A.
unfold Cong in *.

*****
H : or (and (eq P0 P0) (eq P0 P3)) (and (not (eq P0 P0)) (not (eq P0 P3)))
*****
or (eq P0 P1) (eq P0 P2)
+++++
intuition.
-----
Lemma cong_aux_4 : forall A, Cong A P0 A P3 -> A = P1 \\/ A = P2.
Proof.
intros.
destruct A.
unfold Cong in *.
intuition.

*****
H1 : eq P0 P3
H : eq P0 P0
*****
or (eq P0 P1) (eq P0 P2)
+++++
congruence.
-----
Lemma cong_aux_4 : forall A, Cong A P0 A P3 -> A = P1 \\/ A = P2.
Proof.
intros.
destruct A.

*****
H : Cong P1 P0 P1 P3
*****
or (eq P1 P1) (eq P1 P2)
+++++
unfold Cong in *.
-----
Lemma cong_aux_4 : forall A, Cong A P0 A P3 -> A = P1 \\/ A = P2.
Proof.
intros.
destruct A.
unfold Cong in *.

*****
H : or (and (eq P1 P0) (eq P1 P3)) (and (not (eq P1 P0)) (not (eq P1 P3)))
*****
or (eq P1 P1) (eq P1 P2)
+++++
intuition.
-----
Lemma cong_aux_4 : forall A, Cong A P0 A P3 -> A = P1 \\/ A = P2.
Proof.
intros.
destruct A.

*****
H : Cong P2 P0 P2 P3
*****
or (eq P2 P1) (eq P2 P2)
+++++
unfold Cong in *.
-----
Lemma cong_aux_4 : forall A, Cong A P0 A P3 -> A = P1 \\/ A = P2.
Proof.
intros.
destruct A.
unfold Cong in *.

*****
H : or (and (eq P2 P0) (eq P2 P3)) (and (not (eq P2 P0)) (not (eq P2 P3)))
*****
or (eq P2 P1) (eq P2 P2)
+++++
intuition.
-----
Lemma cong_aux_4 : forall A, Cong A P0 A P3 -> A = P1 \\/ A = P2.
Proof.
intros.
destruct A.

*****
H : Cong P3 P0 P3 P3
*****
or (eq P3 P1) (eq P3 P2)
+++++
unfold Cong in *.
-----
Lemma cong_aux_4 : forall A, Cong A P0 A P3 -> A = P1 \\/ A = P2.
Proof.
intros.
destruct A.
unfold Cong in *.

*****
H : or (and (eq P3 P0) (eq P3 P3)) (and (not (eq P3 P0)) (not (eq P3 P3)))
*****
or (eq P3 P1) (eq P3 P2)
+++++
intuition.
-----
Lemma cong_aux_4 : forall A, Cong A P0 A P3 -> A = P1 \\/ A = P2.
Proof.
intros.
destruct A.
unfold Cong in *.
intuition.

*****
H1 : eq P3 P3
H : eq P3 P0
*****
or (eq P3 P1) (eq P3 P2)
+++++
congruence.
-----
Lemma cong_aux_4 : forall A, Cong A P0 A P3 -> A = P1 \\/ A = P2.
Proof.
intros.
destruct A.

*****

*****

+++++
Qed.
-----
Lemma cong_aux_5 : forall A, Cong A P1 A P3 -> A = P0 \/ A = P2.
-----
Lemma cong_aux_5 : forall A, Cong A P1 A P3 -> A = P0 \\/ A = P2.

*****

*****
forall (A : Point) (_ : Cong A P1 A P3), or (eq A P0) (eq A P2)
+++++
Proof.
-----
Lemma cong_aux_5 : forall A, Cong A P1 A P3 -> A = P0 \\/ A = P2.
Proof.

*****

*****
forall (A : Point) (_ : Cong A P1 A P3), or (eq A P0) (eq A P2)
+++++
intros.
-----
Lemma cong_aux_5 : forall A, Cong A P1 A P3 -> A = P0 \\/ A = P2.
Proof.
intros.

*****
H : Cong A P1 A P3
A : Point
*****
or (eq A P0) (eq A P2)
+++++
destruct A.
-----
Lemma cong_aux_5 : forall A, Cong A P1 A P3 -> A = P0 \\/ A = P2.
Proof.
intros.
destruct A.

*****
H : Cong P0 P1 P0 P3
*****
or (eq P0 P0) (eq P0 P2)
+++++
unfold Cong in *.
-----
Lemma cong_aux_5 : forall A, Cong A P1 A P3 -> A = P0 \\/ A = P2.
Proof.
intros.
destruct A.
unfold Cong in *.

*****
H : or (and (eq P0 P1) (eq P0 P3)) (and (not (eq P0 P1)) (not (eq P0 P3)))
*****
or (eq P0 P0) (eq P0 P2)
+++++
intuition.
-----
Lemma cong_aux_5 : forall A, Cong A P1 A P3 -> A = P0 \\/ A = P2.
Proof.
intros.
destruct A.

*****
H : Cong P1 P1 P1 P3
*****
or (eq P1 P0) (eq P1 P2)
+++++
unfold Cong in *.
-----
Lemma cong_aux_5 : forall A, Cong A P1 A P3 -> A = P0 \\/ A = P2.
Proof.
intros.
destruct A.
unfold Cong in *.

*****
H : or (and (eq P1 P1) (eq P1 P3)) (and (not (eq P1 P1)) (not (eq P1 P3)))
*****
or (eq P1 P0) (eq P1 P2)
+++++
intuition.
-----
Lemma cong_aux_5 : forall A, Cong A P1 A P3 -> A = P0 \\/ A = P2.
Proof.
intros.
destruct A.
unfold Cong in *.
intuition.

*****
H1 : eq P1 P3
H : eq P1 P1
*****
or (eq P1 P0) (eq P1 P2)
+++++
congruence.
-----
Lemma cong_aux_5 : forall A, Cong A P1 A P3 -> A = P0 \\/ A = P2.
Proof.
intros.
destruct A.

*****
H : Cong P2 P1 P2 P3
*****
or (eq P2 P0) (eq P2 P2)
+++++
unfold Cong in *.
-----
Lemma cong_aux_5 : forall A, Cong A P1 A P3 -> A = P0 \\/ A = P2.
Proof.
intros.
destruct A.
unfold Cong in *.

*****
H : or (and (eq P2 P1) (eq P2 P3)) (and (not (eq P2 P1)) (not (eq P2 P3)))
*****
or (eq P2 P0) (eq P2 P2)
+++++
intuition.
-----
Lemma cong_aux_5 : forall A, Cong A P1 A P3 -> A = P0 \\/ A = P2.
Proof.
intros.
destruct A.

*****
H : Cong P3 P1 P3 P3
*****
or (eq P3 P0) (eq P3 P2)
+++++
unfold Cong in *.
-----
Lemma cong_aux_5 : forall A, Cong A P1 A P3 -> A = P0 \\/ A = P2.
Proof.
intros.
destruct A.
unfold Cong in *.

*****
H : or (and (eq P3 P1) (eq P3 P3)) (and (not (eq P3 P1)) (not (eq P3 P3)))
*****
or (eq P3 P0) (eq P3 P2)
+++++
intuition.
-----
Lemma cong_aux_5 : forall A, Cong A P1 A P3 -> A = P0 \\/ A = P2.
Proof.
intros.
destruct A.
unfold Cong in *.
intuition.

*****
H1 : eq P3 P3
H : eq P3 P1
*****
or (eq P3 P0) (eq P3 P2)
+++++
congruence.
-----
Lemma cong_aux_5 : forall A, Cong A P1 A P3 -> A = P0 \\/ A = P2.
Proof.
intros.
destruct A.

*****

*****

+++++
Qed.
-----
Lemma cong_aux_6 : forall A, Cong A P2 A P3 -> A = P0 \/ A = P1.
-----
Lemma cong_aux_6 : forall A, Cong A P2 A P3 -> A = P0 \\/ A = P1.

*****

*****
forall (A : Point) (_ : Cong A P2 A P3), or (eq A P0) (eq A P1)
+++++
Proof.
-----
Lemma cong_aux_6 : forall A, Cong A P2 A P3 -> A = P0 \\/ A = P1.
Proof.

*****

*****
forall (A : Point) (_ : Cong A P2 A P3), or (eq A P0) (eq A P1)
+++++
intros.
-----
Lemma cong_aux_6 : forall A, Cong A P2 A P3 -> A = P0 \\/ A = P1.
Proof.
intros.

*****
H : Cong A P2 A P3
A : Point
*****
or (eq A P0) (eq A P1)
+++++
destruct A.
-----
Lemma cong_aux_6 : forall A, Cong A P2 A P3 -> A = P0 \\/ A = P1.
Proof.
intros.
destruct A.

*****
H : Cong P0 P2 P0 P3
*****
or (eq P0 P0) (eq P0 P1)
+++++
unfold Cong in *.
-----
Lemma cong_aux_6 : forall A, Cong A P2 A P3 -> A = P0 \\/ A = P1.
Proof.
intros.
destruct A.
unfold Cong in *.

*****
H : or (and (eq P0 P2) (eq P0 P3)) (and (not (eq P0 P2)) (not (eq P0 P3)))
*****
or (eq P0 P0) (eq P0 P1)
+++++
intuition.
-----
Lemma cong_aux_6 : forall A, Cong A P2 A P3 -> A = P0 \\/ A = P1.
Proof.
intros.
destruct A.

*****
H : Cong P1 P2 P1 P3
*****
or (eq P1 P0) (eq P1 P1)
+++++
unfold Cong in *.
-----
Lemma cong_aux_6 : forall A, Cong A P2 A P3 -> A = P0 \\/ A = P1.
Proof.
intros.
destruct A.
unfold Cong in *.

*****
H : or (and (eq P1 P2) (eq P1 P3)) (and (not (eq P1 P2)) (not (eq P1 P3)))
*****
or (eq P1 P0) (eq P1 P1)
+++++
intuition.
-----
Lemma cong_aux_6 : forall A, Cong A P2 A P3 -> A = P0 \\/ A = P1.
Proof.
intros.
destruct A.

*****
H : Cong P2 P2 P2 P3
*****
or (eq P2 P0) (eq P2 P1)
+++++
unfold Cong in *.
-----
Lemma cong_aux_6 : forall A, Cong A P2 A P3 -> A = P0 \\/ A = P1.
Proof.
intros.
destruct A.
unfold Cong in *.

*****
H : or (and (eq P2 P2) (eq P2 P3)) (and (not (eq P2 P2)) (not (eq P2 P3)))
*****
or (eq P2 P0) (eq P2 P1)
+++++
intuition.
-----
Lemma cong_aux_6 : forall A, Cong A P2 A P3 -> A = P0 \\/ A = P1.
Proof.
intros.
destruct A.
unfold Cong in *.
intuition.

*****
H1 : eq P2 P3
H : eq P2 P2
*****
or (eq P2 P0) (eq P2 P1)
+++++
congruence.
-----
Lemma cong_aux_6 : forall A, Cong A P2 A P3 -> A = P0 \\/ A = P1.
Proof.
intros.
destruct A.

*****
H : Cong P3 P2 P3 P3
*****
or (eq P3 P0) (eq P3 P1)
+++++
unfold Cong in *.
-----
Lemma cong_aux_6 : forall A, Cong A P2 A P3 -> A = P0 \\/ A = P1.
Proof.
intros.
destruct A.
unfold Cong in *.

*****
H : or (and (eq P3 P2) (eq P3 P3)) (and (not (eq P3 P2)) (not (eq P3 P3)))
*****
or (eq P3 P0) (eq P3 P1)
+++++
intuition.
-----
Lemma cong_aux_6 : forall A, Cong A P2 A P3 -> A = P0 \\/ A = P1.
Proof.
intros.
destruct A.
unfold Cong in *.
intuition.

*****
H1 : eq P3 P3
H : eq P3 P2
*****
or (eq P3 P0) (eq P3 P1)
+++++
congruence.
-----
Lemma cong_aux_6 : forall A, Cong A P2 A P3 -> A = P0 \\/ A = P1.
Proof.
intros.
destruct A.

*****

*****

+++++
Qed.
-----
Lemma upper_dim : forall A B C P Q ,\n  P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q ->\n  (Bet A B C \/ Bet B C A \/ Bet C A B).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).

*****

*****
forall (A B C P Q : Point) (_ : not (eq P Q)) (_ : Cong A P A Q) (_ : Cong B P B Q) (_ : Cong C P C Q), or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
Proof.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.

*****

*****
forall (A B C P Q : Point) (_ : not (eq P Q)) (_ : Cong A P A Q) (_ : Cong B P B Q) (_ : Cong C P C Q), or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
intros.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.

*****
H2 : Cong C P C Q
H1 : Cong B P B Q
H0 : Cong A P A Q
H : not (eq P Q)
A,B,C,P,Q : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
destruct P.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.

*****
H2 : Cong C P0 C Q
H1 : Cong B P0 B Q
H0 : Cong A P0 A Q
H : not (eq P0 Q)
A,B,C,Q : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
destruct Q.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.

*****
H2 : Cong C P0 C P0
H1 : Cong B P0 B P0
H0 : Cong A P0 A P0
H : not (eq P0 P0)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try solve [intuition].
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.

*****
H2 : Cong C P0 C P1
H1 : Cong B P0 B P1
H0 : Cong A P0 A P1
H : not (eq P0 P1)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try solve [intuition].
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].

*****
H2 : Cong C P0 C P1
H1 : Cong B P0 B P1
H0 : Cong A P0 A P1
H : not (eq P0 P1)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).

*****
H2 : or (eq C P2) (eq C P3)
H1 : or (eq B P2) (eq B P3)
H0 : or (eq A P2) (eq A P3)
H : not (eq P0 P1)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).

*****
H2 : or (eq C P2) (eq C P3)
H1 : or (eq B P2) (eq B P3)
H0 : or (eq A P2) (eq A P3)
H : not (eq P0 P1)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).

*****
H2 : or (eq C P2) (eq C P3)
H1 : or (eq B P2) (eq B P3)
H0 : or (eq A P2) (eq A P3)
H : not (eq P0 P1)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).

*****
H2 : or (eq C P2) (eq C P3)
H1 : or (eq B P2) (eq B P3)
H0 : or (eq A P2) (eq A P3)
H : not (eq P0 P1)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).

*****
H2 : or (eq C P2) (eq C P3)
H1 : or (eq B P2) (eq B P3)
H0 : or (eq A P2) (eq A P3)
H : not (eq P0 P1)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).

*****
H2 : or (eq C P2) (eq C P3)
H1 : or (eq B P2) (eq B P3)
H0 : or (eq A P2) (eq A P3)
H : not (eq P0 P1)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).

*****
H2 : or (eq C P2) (eq C P3)
H1 : or (eq B P2) (eq B P3)
H0 : or (eq A P2) (eq A P3)
H : not (eq P0 P1)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).

*****
H2 : or (eq C P2) (eq C P3)
H1 : or (eq B P2) (eq B P3)
H0 : or (eq A P2) (eq A P3)
H : not (eq P0 P1)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).

*****
H2 : or (eq C P2) (eq C P3)
H1 : or (eq B P2) (eq B P3)
H0 : or (eq A P2) (eq A P3)
H : not (eq P0 P1)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).

*****
H2 : or (eq C P2) (eq C P3)
H1 : or (eq B P2) (eq B P3)
H0 : or (eq A P2) (eq A P3)
H : not (eq P0 P1)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).

*****
H2 : or (eq C P2) (eq C P3)
H1 : or (eq B P2) (eq B P3)
H0 : or (eq A P2) (eq A P3)
H : not (eq P0 P1)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).

*****
H2 : or (eq C P2) (eq C P3)
H1 : or (eq B P2) (eq B P3)
H0 : or (eq A P2) (eq A P3)
H : not (eq P0 P1)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).

*****
H2 : or (eq C P2) (eq C P3)
H1 : or (eq B P2) (eq B P3)
H0 : or (eq A P2) (eq A P3)
H : not (eq P0 P1)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
intuition.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.

*****
H1 : eq C P2
H0 : eq B P2
H3 : eq A P2
H : forall _ : eq P0 P1, False
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
subst.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.

*****
H : forall _ : eq P0 P1, False
*****
or (Bet P2 P2 P2) (or (Bet P2 P2 P2) (Bet P2 P2 P2))
+++++
unfold Bet.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.
unfold Bet.

*****
H : forall _ : eq P0 P1, False
*****
or (or (eq P2 P2) (or (eq P2 P2) (eq P2 P2))) (or (or (eq P2 P2) (or (eq P2 P2) (eq P2 P2))) (or (eq P2 P2) (or (eq P2 P2) (eq P2 P2))))
+++++
tauto.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.

*****
H1 : eq C P3
H0 : eq B P2
H3 : eq A P2
H : forall _ : eq P0 P1, False
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
subst.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.

*****
H : forall _ : eq P0 P1, False
*****
or (Bet P2 P2 P3) (or (Bet P2 P3 P2) (Bet P3 P2 P2))
+++++
unfold Bet.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.
unfold Bet.

*****
H : forall _ : eq P0 P1, False
*****
or (or (eq P2 P2) (or (eq P2 P3) (eq P2 P3))) (or (or (eq P2 P3) (or (eq P3 P2) (eq P2 P2))) (or (eq P3 P2) (or (eq P2 P2) (eq P3 P2))))
+++++
tauto.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.

*****
H1 : eq C P2
H0 : eq B P3
H3 : eq A P2
H : forall _ : eq P0 P1, False
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
subst.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.

*****
H : forall _ : eq P0 P1, False
*****
or (Bet P2 P3 P2) (or (Bet P3 P2 P2) (Bet P2 P2 P3))
+++++
unfold Bet.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.
unfold Bet.

*****
H : forall _ : eq P0 P1, False
*****
or (or (eq P2 P3) (or (eq P3 P2) (eq P2 P2))) (or (or (eq P3 P2) (or (eq P2 P2) (eq P3 P2))) (or (eq P2 P2) (or (eq P2 P3) (eq P2 P3))))
+++++
tauto.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.

*****
H1 : eq C P3
H0 : eq B P3
H3 : eq A P2
H : forall _ : eq P0 P1, False
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
subst.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.

*****
H : forall _ : eq P0 P1, False
*****
or (Bet P2 P3 P3) (or (Bet P3 P3 P2) (Bet P3 P2 P3))
+++++
unfold Bet.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.
unfold Bet.

*****
H : forall _ : eq P0 P1, False
*****
or (or (eq P2 P3) (or (eq P3 P3) (eq P2 P3))) (or (or (eq P3 P3) (or (eq P3 P2) (eq P3 P2))) (or (eq P3 P2) (or (eq P2 P3) (eq P3 P3))))
+++++
tauto.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.

*****
H1 : eq C P2
H0 : eq B P2
H3 : eq A P3
H : forall _ : eq P0 P1, False
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
subst.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.

*****
H : forall _ : eq P0 P1, False
*****
or (Bet P3 P2 P2) (or (Bet P2 P2 P3) (Bet P2 P3 P2))
+++++
unfold Bet.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.
unfold Bet.

*****
H : forall _ : eq P0 P1, False
*****
or (or (eq P3 P2) (or (eq P2 P2) (eq P3 P2))) (or (or (eq P2 P2) (or (eq P2 P3) (eq P2 P3))) (or (eq P2 P3) (or (eq P3 P2) (eq P2 P2))))
+++++
tauto.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.

*****
H1 : eq C P3
H0 : eq B P2
H3 : eq A P3
H : forall _ : eq P0 P1, False
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
subst.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.

*****
H : forall _ : eq P0 P1, False
*****
or (Bet P3 P2 P3) (or (Bet P2 P3 P3) (Bet P3 P3 P2))
+++++
unfold Bet.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.
unfold Bet.

*****
H : forall _ : eq P0 P1, False
*****
or (or (eq P3 P2) (or (eq P2 P3) (eq P3 P3))) (or (or (eq P2 P3) (or (eq P3 P3) (eq P2 P3))) (or (eq P3 P3) (or (eq P3 P2) (eq P3 P2))))
+++++
tauto.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.

*****
H1 : eq C P2
H0 : eq B P3
H3 : eq A P3
H : forall _ : eq P0 P1, False
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
subst.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.

*****
H : forall _ : eq P0 P1, False
*****
or (Bet P3 P3 P2) (or (Bet P3 P2 P3) (Bet P2 P3 P3))
+++++
unfold Bet.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.
unfold Bet.

*****
H : forall _ : eq P0 P1, False
*****
or (or (eq P3 P3) (or (eq P3 P2) (eq P3 P2))) (or (or (eq P3 P2) (or (eq P2 P3) (eq P3 P3))) (or (eq P2 P3) (or (eq P3 P3) (eq P2 P3))))
+++++
tauto.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.

*****
H1 : eq C P3
H0 : eq B P3
H3 : eq A P3
H : forall _ : eq P0 P1, False
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
subst.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.

*****
H : forall _ : eq P0 P1, False
*****
or (Bet P3 P3 P3) (or (Bet P3 P3 P3) (Bet P3 P3 P3))
+++++
unfold Bet.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.
unfold Bet.

*****
H : forall _ : eq P0 P1, False
*****
or (or (eq P3 P3) (or (eq P3 P3) (eq P3 P3))) (or (or (eq P3 P3) (or (eq P3 P3) (eq P3 P3))) (or (eq P3 P3) (or (eq P3 P3) (eq P3 P3))))
+++++
tauto.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.

*****
H2 : Cong C P0 C P2
H1 : Cong B P0 B P2
H0 : Cong A P0 A P2
H : not (eq P0 P2)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try solve [intuition].
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].

*****
H2 : Cong C P0 C P2
H1 : Cong B P0 B P2
H0 : Cong A P0 A P2
H : not (eq P0 P2)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).

*****
H2 : Cong C P0 C P2
H1 : Cong B P0 B P2
H0 : Cong A P0 A P2
H : not (eq P0 P2)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).

*****
H2 : or (eq C P1) (eq C P3)
H1 : or (eq B P1) (eq B P3)
H0 : or (eq A P1) (eq A P3)
H : not (eq P0 P2)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).

*****
H2 : or (eq C P1) (eq C P3)
H1 : or (eq B P1) (eq B P3)
H0 : or (eq A P1) (eq A P3)
H : not (eq P0 P2)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).

*****
H2 : or (eq C P1) (eq C P3)
H1 : or (eq B P1) (eq B P3)
H0 : or (eq A P1) (eq A P3)
H : not (eq P0 P2)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).

*****
H2 : or (eq C P1) (eq C P3)
H1 : or (eq B P1) (eq B P3)
H0 : or (eq A P1) (eq A P3)
H : not (eq P0 P2)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).

*****
H2 : or (eq C P1) (eq C P3)
H1 : or (eq B P1) (eq B P3)
H0 : or (eq A P1) (eq A P3)
H : not (eq P0 P2)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).

*****
H2 : or (eq C P1) (eq C P3)
H1 : or (eq B P1) (eq B P3)
H0 : or (eq A P1) (eq A P3)
H : not (eq P0 P2)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).

*****
H2 : or (eq C P1) (eq C P3)
H1 : or (eq B P1) (eq B P3)
H0 : or (eq A P1) (eq A P3)
H : not (eq P0 P2)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).

*****
H2 : or (eq C P1) (eq C P3)
H1 : or (eq B P1) (eq B P3)
H0 : or (eq A P1) (eq A P3)
H : not (eq P0 P2)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).

*****
H2 : or (eq C P1) (eq C P3)
H1 : or (eq B P1) (eq B P3)
H0 : or (eq A P1) (eq A P3)
H : not (eq P0 P2)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).

*****
H2 : or (eq C P1) (eq C P3)
H1 : or (eq B P1) (eq B P3)
H0 : or (eq A P1) (eq A P3)
H : not (eq P0 P2)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).

*****
H2 : or (eq C P1) (eq C P3)
H1 : or (eq B P1) (eq B P3)
H0 : or (eq A P1) (eq A P3)
H : not (eq P0 P2)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).

*****
H2 : or (eq C P1) (eq C P3)
H1 : or (eq B P1) (eq B P3)
H0 : or (eq A P1) (eq A P3)
H : not (eq P0 P2)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
intuition.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.

*****
H1 : eq C P1
H0 : eq B P1
H3 : eq A P1
H : forall _ : eq P0 P2, False
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
subst.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.

*****
H : forall _ : eq P0 P2, False
*****
or (Bet P1 P1 P1) (or (Bet P1 P1 P1) (Bet P1 P1 P1))
+++++
unfold Bet.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.
unfold Bet.

*****
H : forall _ : eq P0 P2, False
*****
or (or (eq P1 P1) (or (eq P1 P1) (eq P1 P1))) (or (or (eq P1 P1) (or (eq P1 P1) (eq P1 P1))) (or (eq P1 P1) (or (eq P1 P1) (eq P1 P1))))
+++++
tauto.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.

*****
H1 : eq C P3
H0 : eq B P1
H3 : eq A P1
H : forall _ : eq P0 P2, False
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
subst.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.

*****
H : forall _ : eq P0 P2, False
*****
or (Bet P1 P1 P3) (or (Bet P1 P3 P1) (Bet P3 P1 P1))
+++++
unfold Bet.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.
unfold Bet.

*****
H : forall _ : eq P0 P2, False
*****
or (or (eq P1 P1) (or (eq P1 P3) (eq P1 P3))) (or (or (eq P1 P3) (or (eq P3 P1) (eq P1 P1))) (or (eq P3 P1) (or (eq P1 P1) (eq P3 P1))))
+++++
tauto.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.

*****
H1 : eq C P1
H0 : eq B P3
H3 : eq A P1
H : forall _ : eq P0 P2, False
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
subst.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.

*****
H : forall _ : eq P0 P2, False
*****
or (Bet P1 P3 P1) (or (Bet P3 P1 P1) (Bet P1 P1 P3))
+++++
unfold Bet.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.
unfold Bet.

*****
H : forall _ : eq P0 P2, False
*****
or (or (eq P1 P3) (or (eq P3 P1) (eq P1 P1))) (or (or (eq P3 P1) (or (eq P1 P1) (eq P3 P1))) (or (eq P1 P1) (or (eq P1 P3) (eq P1 P3))))
+++++
tauto.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.

*****
H1 : eq C P3
H0 : eq B P3
H3 : eq A P1
H : forall _ : eq P0 P2, False
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
subst.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.

*****
H : forall _ : eq P0 P2, False
*****
or (Bet P1 P3 P3) (or (Bet P3 P3 P1) (Bet P3 P1 P3))
+++++
unfold Bet.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.
unfold Bet.

*****
H : forall _ : eq P0 P2, False
*****
or (or (eq P1 P3) (or (eq P3 P3) (eq P1 P3))) (or (or (eq P3 P3) (or (eq P3 P1) (eq P3 P1))) (or (eq P3 P1) (or (eq P1 P3) (eq P3 P3))))
+++++
tauto.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.

*****
H1 : eq C P1
H0 : eq B P1
H3 : eq A P3
H : forall _ : eq P0 P2, False
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
subst.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.

*****
H : forall _ : eq P0 P2, False
*****
or (Bet P3 P1 P1) (or (Bet P1 P1 P3) (Bet P1 P3 P1))
+++++
unfold Bet.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.
unfold Bet.

*****
H : forall _ : eq P0 P2, False
*****
or (or (eq P3 P1) (or (eq P1 P1) (eq P3 P1))) (or (or (eq P1 P1) (or (eq P1 P3) (eq P1 P3))) (or (eq P1 P3) (or (eq P3 P1) (eq P1 P1))))
+++++
tauto.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.

*****
H1 : eq C P3
H0 : eq B P1
H3 : eq A P3
H : forall _ : eq P0 P2, False
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
subst.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.

*****
H : forall _ : eq P0 P2, False
*****
or (Bet P3 P1 P3) (or (Bet P1 P3 P3) (Bet P3 P3 P1))
+++++
unfold Bet.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.
unfold Bet.

*****
H : forall _ : eq P0 P2, False
*****
or (or (eq P3 P1) (or (eq P1 P3) (eq P3 P3))) (or (or (eq P1 P3) (or (eq P3 P3) (eq P1 P3))) (or (eq P3 P3) (or (eq P3 P1) (eq P3 P1))))
+++++
tauto.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.

*****
H1 : eq C P1
H0 : eq B P3
H3 : eq A P3
H : forall _ : eq P0 P2, False
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
subst.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.

*****
H : forall _ : eq P0 P2, False
*****
or (Bet P3 P3 P1) (or (Bet P3 P1 P3) (Bet P1 P3 P3))
+++++
unfold Bet.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.
unfold Bet.

*****
H : forall _ : eq P0 P2, False
*****
or (or (eq P3 P3) (or (eq P3 P1) (eq P3 P1))) (or (or (eq P3 P1) (or (eq P1 P3) (eq P3 P3))) (or (eq P1 P3) (or (eq P3 P3) (eq P1 P3))))
+++++
tauto.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.

*****
H1 : eq C P3
H0 : eq B P3
H3 : eq A P3
H : forall _ : eq P0 P2, False
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
subst.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.

*****
H : forall _ : eq P0 P2, False
*****
or (Bet P3 P3 P3) (or (Bet P3 P3 P3) (Bet P3 P3 P3))
+++++
unfold Bet.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.
unfold Bet.

*****
H : forall _ : eq P0 P2, False
*****
or (or (eq P3 P3) (or (eq P3 P3) (eq P3 P3))) (or (or (eq P3 P3) (or (eq P3 P3) (eq P3 P3))) (or (eq P3 P3) (or (eq P3 P3) (eq P3 P3))))
+++++
tauto.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.

*****
H2 : Cong C P0 C P3
H1 : Cong B P0 B P3
H0 : Cong A P0 A P3
H : not (eq P0 P3)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try solve [intuition].
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].

*****
H2 : Cong C P0 C P3
H1 : Cong B P0 B P3
H0 : Cong A P0 A P3
H : not (eq P0 P3)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).

*****
H2 : Cong C P0 C P3
H1 : Cong B P0 B P3
H0 : Cong A P0 A P3
H : not (eq P0 P3)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).

*****
H2 : Cong C P0 C P3
H1 : Cong B P0 B P3
H0 : Cong A P0 A P3
H : not (eq P0 P3)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).

*****
H2 : Cong C P0 C P3
H1 : Cong B P0 B P3
H0 : Cong A P0 A P3
H : not (eq P0 P3)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).

*****
H2 : or (eq C P1) (eq C P2)
H1 : or (eq B P1) (eq B P2)
H0 : or (eq A P1) (eq A P2)
H : not (eq P0 P3)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).

*****
H2 : or (eq C P1) (eq C P2)
H1 : or (eq B P1) (eq B P2)
H0 : or (eq A P1) (eq A P2)
H : not (eq P0 P3)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).

*****
H2 : or (eq C P1) (eq C P2)
H1 : or (eq B P1) (eq B P2)
H0 : or (eq A P1) (eq A P2)
H : not (eq P0 P3)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).

*****
H2 : or (eq C P1) (eq C P2)
H1 : or (eq B P1) (eq B P2)
H0 : or (eq A P1) (eq A P2)
H : not (eq P0 P3)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).

*****
H2 : or (eq C P1) (eq C P2)
H1 : or (eq B P1) (eq B P2)
H0 : or (eq A P1) (eq A P2)
H : not (eq P0 P3)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).

*****
H2 : or (eq C P1) (eq C P2)
H1 : or (eq B P1) (eq B P2)
H0 : or (eq A P1) (eq A P2)
H : not (eq P0 P3)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).

*****
H2 : or (eq C P1) (eq C P2)
H1 : or (eq B P1) (eq B P2)
H0 : or (eq A P1) (eq A P2)
H : not (eq P0 P3)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).

*****
H2 : or (eq C P1) (eq C P2)
H1 : or (eq B P1) (eq B P2)
H0 : or (eq A P1) (eq A P2)
H : not (eq P0 P3)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).

*****
H2 : or (eq C P1) (eq C P2)
H1 : or (eq B P1) (eq B P2)
H0 : or (eq A P1) (eq A P2)
H : not (eq P0 P3)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).

*****
H2 : or (eq C P1) (eq C P2)
H1 : or (eq B P1) (eq B P2)
H0 : or (eq A P1) (eq A P2)
H : not (eq P0 P3)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
intuition.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.

*****
H1 : eq C P1
H0 : eq B P1
H3 : eq A P1
H : forall _ : eq P0 P3, False
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
subst.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.

*****
H : forall _ : eq P0 P3, False
*****
or (Bet P1 P1 P1) (or (Bet P1 P1 P1) (Bet P1 P1 P1))
+++++
unfold Bet.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.
unfold Bet.

*****
H : forall _ : eq P0 P3, False
*****
or (or (eq P1 P1) (or (eq P1 P1) (eq P1 P1))) (or (or (eq P1 P1) (or (eq P1 P1) (eq P1 P1))) (or (eq P1 P1) (or (eq P1 P1) (eq P1 P1))))
+++++
tauto.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.

*****
H1 : eq C P2
H0 : eq B P1
H3 : eq A P1
H : forall _ : eq P0 P3, False
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
subst.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.

*****
H : forall _ : eq P0 P3, False
*****
or (Bet P1 P1 P2) (or (Bet P1 P2 P1) (Bet P2 P1 P1))
+++++
unfold Bet.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.
unfold Bet.

*****
H : forall _ : eq P0 P3, False
*****
or (or (eq P1 P1) (or (eq P1 P2) (eq P1 P2))) (or (or (eq P1 P2) (or (eq P2 P1) (eq P1 P1))) (or (eq P2 P1) (or (eq P1 P1) (eq P2 P1))))
+++++
tauto.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.

*****
H1 : eq C P1
H0 : eq B P2
H3 : eq A P1
H : forall _ : eq P0 P3, False
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
subst.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.

*****
H : forall _ : eq P0 P3, False
*****
or (Bet P1 P2 P1) (or (Bet P2 P1 P1) (Bet P1 P1 P2))
+++++
unfold Bet.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.
unfold Bet.

*****
H : forall _ : eq P0 P3, False
*****
or (or (eq P1 P2) (or (eq P2 P1) (eq P1 P1))) (or (or (eq P2 P1) (or (eq P1 P1) (eq P2 P1))) (or (eq P1 P1) (or (eq P1 P2) (eq P1 P2))))
+++++
tauto.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.

*****
H1 : eq C P2
H0 : eq B P2
H3 : eq A P1
H : forall _ : eq P0 P3, False
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
subst.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.

*****
H : forall _ : eq P0 P3, False
*****
or (Bet P1 P2 P2) (or (Bet P2 P2 P1) (Bet P2 P1 P2))
+++++
unfold Bet.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.
unfold Bet.

*****
H : forall _ : eq P0 P3, False
*****
or (or (eq P1 P2) (or (eq P2 P2) (eq P1 P2))) (or (or (eq P2 P2) (or (eq P2 P1) (eq P2 P1))) (or (eq P2 P1) (or (eq P1 P2) (eq P2 P2))))
+++++
tauto.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.

*****
H1 : eq C P1
H0 : eq B P1
H3 : eq A P2
H : forall _ : eq P0 P3, False
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
subst.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.

*****
H : forall _ : eq P0 P3, False
*****
or (Bet P2 P1 P1) (or (Bet P1 P1 P2) (Bet P1 P2 P1))
+++++
unfold Bet.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.
unfold Bet.

*****
H : forall _ : eq P0 P3, False
*****
or (or (eq P2 P1) (or (eq P1 P1) (eq P2 P1))) (or (or (eq P1 P1) (or (eq P1 P2) (eq P1 P2))) (or (eq P1 P2) (or (eq P2 P1) (eq P1 P1))))
+++++
tauto.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.

*****
H1 : eq C P2
H0 : eq B P1
H3 : eq A P2
H : forall _ : eq P0 P3, False
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
subst.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.

*****
H : forall _ : eq P0 P3, False
*****
or (Bet P2 P1 P2) (or (Bet P1 P2 P2) (Bet P2 P2 P1))
+++++
unfold Bet.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.
unfold Bet.

*****
H : forall _ : eq P0 P3, False
*****
or (or (eq P2 P1) (or (eq P1 P2) (eq P2 P2))) (or (or (eq P1 P2) (or (eq P2 P2) (eq P1 P2))) (or (eq P2 P2) (or (eq P2 P1) (eq P2 P1))))
+++++
tauto.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.

*****
H1 : eq C P1
H0 : eq B P2
H3 : eq A P2
H : forall _ : eq P0 P3, False
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
subst.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.

*****
H : forall _ : eq P0 P3, False
*****
or (Bet P2 P2 P1) (or (Bet P2 P1 P2) (Bet P1 P2 P2))
+++++
unfold Bet.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.
unfold Bet.

*****
H : forall _ : eq P0 P3, False
*****
or (or (eq P2 P2) (or (eq P2 P1) (eq P2 P1))) (or (or (eq P2 P1) (or (eq P1 P2) (eq P2 P2))) (or (eq P1 P2) (or (eq P2 P2) (eq P1 P2))))
+++++
tauto.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.

*****
H1 : eq C P2
H0 : eq B P2
H3 : eq A P2
H : forall _ : eq P0 P3, False
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
subst.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.

*****
H : forall _ : eq P0 P3, False
*****
or (Bet P2 P2 P2) (or (Bet P2 P2 P2) (Bet P2 P2 P2))
+++++
unfold Bet.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.
unfold Bet.

*****
H : forall _ : eq P0 P3, False
*****
or (or (eq P2 P2) (or (eq P2 P2) (eq P2 P2))) (or (or (eq P2 P2) (or (eq P2 P2) (eq P2 P2))) (or (eq P2 P2) (or (eq P2 P2) (eq P2 P2))))
+++++
tauto.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.

*****
H2 : Cong C P1 C Q
H1 : Cong B P1 B Q
H0 : Cong A P1 A Q
H : not (eq P1 Q)
A,B,C,Q : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
destruct Q.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.

*****
H2 : Cong C P1 C P0
H1 : Cong B P1 B P0
H0 : Cong A P1 A P0
H : not (eq P1 P0)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try solve [intuition].
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].

*****
H2 : Cong C P1 C P0
H1 : Cong B P1 B P0
H0 : Cong A P1 A P0
H : not (eq P1 P0)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).

*****
H2 : Cong C P1 C P0
H1 : Cong B P1 B P0
H0 : Cong A P1 A P0
H : not (eq P1 P0)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).

*****
H2 : Cong C P1 C P0
H1 : Cong B P1 B P0
H0 : Cong A P1 A P0
H : not (eq P1 P0)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).

*****
H2 : Cong C P1 C P0
H1 : Cong B P1 B P0
H0 : Cong A P1 A P0
H : not (eq P1 P0)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).

*****
H2 : Cong C P1 C P0
H1 : Cong B P1 B P0
H0 : Cong A P1 A P0
H : not (eq P1 P0)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).

*****
H2 : Cong C P1 C P0
H1 : Cong B P1 B P0
H0 : Cong A P1 A P0
H : not (eq P1 P0)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).

*****
H2 : Cong C P1 C P0
H1 : Cong B P1 B P0
H0 : Cong A P1 A P0
H : not (eq P1 P0)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).

*****
H2 : Cong C P0 C P1
H1 : Cong B P0 B P1
H0 : Cong A P0 A P1
H : not (eq P1 P0)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).

*****
H2 : or (eq C P2) (eq C P3)
H1 : or (eq B P2) (eq B P3)
H0 : or (eq A P2) (eq A P3)
H : not (eq P1 P0)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).

*****
H2 : or (eq C P2) (eq C P3)
H1 : or (eq B P2) (eq B P3)
H0 : or (eq A P2) (eq A P3)
H : not (eq P1 P0)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).

*****
H2 : or (eq C P2) (eq C P3)
H1 : or (eq B P2) (eq B P3)
H0 : or (eq A P2) (eq A P3)
H : not (eq P1 P0)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).

*****
H2 : or (eq C P2) (eq C P3)
H1 : or (eq B P2) (eq B P3)
H0 : or (eq A P2) (eq A P3)
H : not (eq P1 P0)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).

*****
H2 : or (eq C P2) (eq C P3)
H1 : or (eq B P2) (eq B P3)
H0 : or (eq A P2) (eq A P3)
H : not (eq P1 P0)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).

*****
H2 : or (eq C P2) (eq C P3)
H1 : or (eq B P2) (eq B P3)
H0 : or (eq A P2) (eq A P3)
H : not (eq P1 P0)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
intuition.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.

*****
H1 : eq C P2
H0 : eq B P2
H3 : eq A P2
H : forall _ : eq P1 P0, False
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
subst.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.

*****
H : forall _ : eq P1 P0, False
*****
or (Bet P2 P2 P2) (or (Bet P2 P2 P2) (Bet P2 P2 P2))
+++++
unfold Bet.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.
unfold Bet.

*****
H : forall _ : eq P1 P0, False
*****
or (or (eq P2 P2) (or (eq P2 P2) (eq P2 P2))) (or (or (eq P2 P2) (or (eq P2 P2) (eq P2 P2))) (or (eq P2 P2) (or (eq P2 P2) (eq P2 P2))))
+++++
tauto.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.

*****
H1 : eq C P3
H0 : eq B P2
H3 : eq A P2
H : forall _ : eq P1 P0, False
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
subst.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.

*****
H : forall _ : eq P1 P0, False
*****
or (Bet P2 P2 P3) (or (Bet P2 P3 P2) (Bet P3 P2 P2))
+++++
unfold Bet.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.
unfold Bet.

*****
H : forall _ : eq P1 P0, False
*****
or (or (eq P2 P2) (or (eq P2 P3) (eq P2 P3))) (or (or (eq P2 P3) (or (eq P3 P2) (eq P2 P2))) (or (eq P3 P2) (or (eq P2 P2) (eq P3 P2))))
+++++
tauto.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.

*****
H1 : eq C P2
H0 : eq B P3
H3 : eq A P2
H : forall _ : eq P1 P0, False
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
subst.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.

*****
H : forall _ : eq P1 P0, False
*****
or (Bet P2 P3 P2) (or (Bet P3 P2 P2) (Bet P2 P2 P3))
+++++
unfold Bet.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.
unfold Bet.

*****
H : forall _ : eq P1 P0, False
*****
or (or (eq P2 P3) (or (eq P3 P2) (eq P2 P2))) (or (or (eq P3 P2) (or (eq P2 P2) (eq P3 P2))) (or (eq P2 P2) (or (eq P2 P3) (eq P2 P3))))
+++++
tauto.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.

*****
H1 : eq C P3
H0 : eq B P3
H3 : eq A P2
H : forall _ : eq P1 P0, False
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
subst.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.

*****
H : forall _ : eq P1 P0, False
*****
or (Bet P2 P3 P3) (or (Bet P3 P3 P2) (Bet P3 P2 P3))
+++++
unfold Bet.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.
unfold Bet.

*****
H : forall _ : eq P1 P0, False
*****
or (or (eq P2 P3) (or (eq P3 P3) (eq P2 P3))) (or (or (eq P3 P3) (or (eq P3 P2) (eq P3 P2))) (or (eq P3 P2) (or (eq P2 P3) (eq P3 P3))))
+++++
tauto.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.

*****
H1 : eq C P2
H0 : eq B P2
H3 : eq A P3
H : forall _ : eq P1 P0, False
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
subst.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.

*****
H : forall _ : eq P1 P0, False
*****
or (Bet P3 P2 P2) (or (Bet P2 P2 P3) (Bet P2 P3 P2))
+++++
unfold Bet.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.
unfold Bet.

*****
H : forall _ : eq P1 P0, False
*****
or (or (eq P3 P2) (or (eq P2 P2) (eq P3 P2))) (or (or (eq P2 P2) (or (eq P2 P3) (eq P2 P3))) (or (eq P2 P3) (or (eq P3 P2) (eq P2 P2))))
+++++
tauto.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.

*****
H1 : eq C P3
H0 : eq B P2
H3 : eq A P3
H : forall _ : eq P1 P0, False
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
subst.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.

*****
H : forall _ : eq P1 P0, False
*****
or (Bet P3 P2 P3) (or (Bet P2 P3 P3) (Bet P3 P3 P2))
+++++
unfold Bet.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.
unfold Bet.

*****
H : forall _ : eq P1 P0, False
*****
or (or (eq P3 P2) (or (eq P2 P3) (eq P3 P3))) (or (or (eq P2 P3) (or (eq P3 P3) (eq P2 P3))) (or (eq P3 P3) (or (eq P3 P2) (eq P3 P2))))
+++++
tauto.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.

*****
H1 : eq C P2
H0 : eq B P3
H3 : eq A P3
H : forall _ : eq P1 P0, False
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
subst.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.

*****
H : forall _ : eq P1 P0, False
*****
or (Bet P3 P3 P2) (or (Bet P3 P2 P3) (Bet P2 P3 P3))
+++++
unfold Bet.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.
unfold Bet.

*****
H : forall _ : eq P1 P0, False
*****
or (or (eq P3 P3) (or (eq P3 P2) (eq P3 P2))) (or (or (eq P3 P2) (or (eq P2 P3) (eq P3 P3))) (or (eq P2 P3) (or (eq P3 P3) (eq P2 P3))))
+++++
tauto.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.

*****
H1 : eq C P3
H0 : eq B P3
H3 : eq A P3
H : forall _ : eq P1 P0, False
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
subst.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.

*****
H : forall _ : eq P1 P0, False
*****
or (Bet P3 P3 P3) (or (Bet P3 P3 P3) (Bet P3 P3 P3))
+++++
unfold Bet.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.
unfold Bet.

*****
H : forall _ : eq P1 P0, False
*****
or (or (eq P3 P3) (or (eq P3 P3) (eq P3 P3))) (or (or (eq P3 P3) (or (eq P3 P3) (eq P3 P3))) (or (eq P3 P3) (or (eq P3 P3) (eq P3 P3))))
+++++
tauto.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.

*****
H2 : Cong C P1 C P1
H1 : Cong B P1 B P1
H0 : Cong A P1 A P1
H : not (eq P1 P1)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try solve [intuition].
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.

*****
H2 : Cong C P1 C P2
H1 : Cong B P1 B P2
H0 : Cong A P1 A P2
H : not (eq P1 P2)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try solve [intuition].
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].

*****
H2 : Cong C P1 C P2
H1 : Cong B P1 B P2
H0 : Cong A P1 A P2
H : not (eq P1 P2)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).

*****
H2 : Cong C P1 C P2
H1 : Cong B P1 B P2
H0 : Cong A P1 A P2
H : not (eq P1 P2)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).

*****
H2 : Cong C P1 C P2
H1 : Cong B P1 B P2
H0 : Cong A P1 A P2
H : not (eq P1 P2)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).

*****
H2 : or (eq C P0) (eq C P3)
H1 : or (eq B P0) (eq B P3)
H0 : or (eq A P0) (eq A P3)
H : not (eq P1 P2)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).

*****
H2 : or (eq C P0) (eq C P3)
H1 : or (eq B P0) (eq B P3)
H0 : or (eq A P0) (eq A P3)
H : not (eq P1 P2)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).

*****
H2 : or (eq C P0) (eq C P3)
H1 : or (eq B P0) (eq B P3)
H0 : or (eq A P0) (eq A P3)
H : not (eq P1 P2)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).

*****
H2 : or (eq C P0) (eq C P3)
H1 : or (eq B P0) (eq B P3)
H0 : or (eq A P0) (eq A P3)
H : not (eq P1 P2)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).

*****
H2 : or (eq C P0) (eq C P3)
H1 : or (eq B P0) (eq B P3)
H0 : or (eq A P0) (eq A P3)
H : not (eq P1 P2)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).

*****
H2 : or (eq C P0) (eq C P3)
H1 : or (eq B P0) (eq B P3)
H0 : or (eq A P0) (eq A P3)
H : not (eq P1 P2)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).

*****
H2 : or (eq C P0) (eq C P3)
H1 : or (eq B P0) (eq B P3)
H0 : or (eq A P0) (eq A P3)
H : not (eq P1 P2)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).

*****
H2 : or (eq C P0) (eq C P3)
H1 : or (eq B P0) (eq B P3)
H0 : or (eq A P0) (eq A P3)
H : not (eq P1 P2)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).

*****
H2 : or (eq C P0) (eq C P3)
H1 : or (eq B P0) (eq B P3)
H0 : or (eq A P0) (eq A P3)
H : not (eq P1 P2)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).

*****
H2 : or (eq C P0) (eq C P3)
H1 : or (eq B P0) (eq B P3)
H0 : or (eq A P0) (eq A P3)
H : not (eq P1 P2)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).

*****
H2 : or (eq C P0) (eq C P3)
H1 : or (eq B P0) (eq B P3)
H0 : or (eq A P0) (eq A P3)
H : not (eq P1 P2)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
intuition.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.

*****
H1 : eq C P0
H0 : eq B P0
H3 : eq A P0
H : forall _ : eq P1 P2, False
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
subst.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.

*****
H : forall _ : eq P1 P2, False
*****
or (Bet P0 P0 P0) (or (Bet P0 P0 P0) (Bet P0 P0 P0))
+++++
unfold Bet.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.
unfold Bet.

*****
H : forall _ : eq P1 P2, False
*****
or (or (eq P0 P0) (or (eq P0 P0) (eq P0 P0))) (or (or (eq P0 P0) (or (eq P0 P0) (eq P0 P0))) (or (eq P0 P0) (or (eq P0 P0) (eq P0 P0))))
+++++
tauto.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.

*****
H1 : eq C P3
H0 : eq B P0
H3 : eq A P0
H : forall _ : eq P1 P2, False
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
subst.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.

*****
H : forall _ : eq P1 P2, False
*****
or (Bet P0 P0 P3) (or (Bet P0 P3 P0) (Bet P3 P0 P0))
+++++
unfold Bet.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.
unfold Bet.

*****
H : forall _ : eq P1 P2, False
*****
or (or (eq P0 P0) (or (eq P0 P3) (eq P0 P3))) (or (or (eq P0 P3) (or (eq P3 P0) (eq P0 P0))) (or (eq P3 P0) (or (eq P0 P0) (eq P3 P0))))
+++++
tauto.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.

*****
H1 : eq C P0
H0 : eq B P3
H3 : eq A P0
H : forall _ : eq P1 P2, False
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
subst.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.

*****
H : forall _ : eq P1 P2, False
*****
or (Bet P0 P3 P0) (or (Bet P3 P0 P0) (Bet P0 P0 P3))
+++++
unfold Bet.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.
unfold Bet.

*****
H : forall _ : eq P1 P2, False
*****
or (or (eq P0 P3) (or (eq P3 P0) (eq P0 P0))) (or (or (eq P3 P0) (or (eq P0 P0) (eq P3 P0))) (or (eq P0 P0) (or (eq P0 P3) (eq P0 P3))))
+++++
tauto.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.

*****
H1 : eq C P3
H0 : eq B P3
H3 : eq A P0
H : forall _ : eq P1 P2, False
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
subst.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.

*****
H : forall _ : eq P1 P2, False
*****
or (Bet P0 P3 P3) (or (Bet P3 P3 P0) (Bet P3 P0 P3))
+++++
unfold Bet.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.
unfold Bet.

*****
H : forall _ : eq P1 P2, False
*****
or (or (eq P0 P3) (or (eq P3 P3) (eq P0 P3))) (or (or (eq P3 P3) (or (eq P3 P0) (eq P3 P0))) (or (eq P3 P0) (or (eq P0 P3) (eq P3 P3))))
+++++
tauto.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.

*****
H1 : eq C P0
H0 : eq B P0
H3 : eq A P3
H : forall _ : eq P1 P2, False
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
subst.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.

*****
H : forall _ : eq P1 P2, False
*****
or (Bet P3 P0 P0) (or (Bet P0 P0 P3) (Bet P0 P3 P0))
+++++
unfold Bet.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.
unfold Bet.

*****
H : forall _ : eq P1 P2, False
*****
or (or (eq P3 P0) (or (eq P0 P0) (eq P3 P0))) (or (or (eq P0 P0) (or (eq P0 P3) (eq P0 P3))) (or (eq P0 P3) (or (eq P3 P0) (eq P0 P0))))
+++++
tauto.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.

*****
H1 : eq C P3
H0 : eq B P0
H3 : eq A P3
H : forall _ : eq P1 P2, False
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
subst.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.

*****
H : forall _ : eq P1 P2, False
*****
or (Bet P3 P0 P3) (or (Bet P0 P3 P3) (Bet P3 P3 P0))
+++++
unfold Bet.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.
unfold Bet.

*****
H : forall _ : eq P1 P2, False
*****
or (or (eq P3 P0) (or (eq P0 P3) (eq P3 P3))) (or (or (eq P0 P3) (or (eq P3 P3) (eq P0 P3))) (or (eq P3 P3) (or (eq P3 P0) (eq P3 P0))))
+++++
tauto.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.

*****
H1 : eq C P0
H0 : eq B P3
H3 : eq A P3
H : forall _ : eq P1 P2, False
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
subst.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.

*****
H : forall _ : eq P1 P2, False
*****
or (Bet P3 P3 P0) (or (Bet P3 P0 P3) (Bet P0 P3 P3))
+++++
unfold Bet.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.
unfold Bet.

*****
H : forall _ : eq P1 P2, False
*****
or (or (eq P3 P3) (or (eq P3 P0) (eq P3 P0))) (or (or (eq P3 P0) (or (eq P0 P3) (eq P3 P3))) (or (eq P0 P3) (or (eq P3 P3) (eq P0 P3))))
+++++
tauto.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.

*****
H1 : eq C P3
H0 : eq B P3
H3 : eq A P3
H : forall _ : eq P1 P2, False
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
subst.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.

*****
H : forall _ : eq P1 P2, False
*****
or (Bet P3 P3 P3) (or (Bet P3 P3 P3) (Bet P3 P3 P3))
+++++
unfold Bet.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.
unfold Bet.

*****
H : forall _ : eq P1 P2, False
*****
or (or (eq P3 P3) (or (eq P3 P3) (eq P3 P3))) (or (or (eq P3 P3) (or (eq P3 P3) (eq P3 P3))) (or (eq P3 P3) (or (eq P3 P3) (eq P3 P3))))
+++++
tauto.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.

*****
H2 : Cong C P1 C P3
H1 : Cong B P1 B P3
H0 : Cong A P1 A P3
H : not (eq P1 P3)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try solve [intuition].
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].

*****
H2 : Cong C P1 C P3
H1 : Cong B P1 B P3
H0 : Cong A P1 A P3
H : not (eq P1 P3)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).

*****
H2 : Cong C P1 C P3
H1 : Cong B P1 B P3
H0 : Cong A P1 A P3
H : not (eq P1 P3)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).

*****
H2 : Cong C P1 C P3
H1 : Cong B P1 B P3
H0 : Cong A P1 A P3
H : not (eq P1 P3)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).

*****
H2 : Cong C P1 C P3
H1 : Cong B P1 B P3
H0 : Cong A P1 A P3
H : not (eq P1 P3)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).

*****
H2 : Cong C P1 C P3
H1 : Cong B P1 B P3
H0 : Cong A P1 A P3
H : not (eq P1 P3)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).

*****
H2 : or (eq C P0) (eq C P2)
H1 : or (eq B P0) (eq B P2)
H0 : or (eq A P0) (eq A P2)
H : not (eq P1 P3)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).

*****
H2 : or (eq C P0) (eq C P2)
H1 : or (eq B P0) (eq B P2)
H0 : or (eq A P0) (eq A P2)
H : not (eq P1 P3)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).

*****
H2 : or (eq C P0) (eq C P2)
H1 : or (eq B P0) (eq B P2)
H0 : or (eq A P0) (eq A P2)
H : not (eq P1 P3)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).

*****
H2 : or (eq C P0) (eq C P2)
H1 : or (eq B P0) (eq B P2)
H0 : or (eq A P0) (eq A P2)
H : not (eq P1 P3)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).

*****
H2 : or (eq C P0) (eq C P2)
H1 : or (eq B P0) (eq B P2)
H0 : or (eq A P0) (eq A P2)
H : not (eq P1 P3)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).

*****
H2 : or (eq C P0) (eq C P2)
H1 : or (eq B P0) (eq B P2)
H0 : or (eq A P0) (eq A P2)
H : not (eq P1 P3)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).

*****
H2 : or (eq C P0) (eq C P2)
H1 : or (eq B P0) (eq B P2)
H0 : or (eq A P0) (eq A P2)
H : not (eq P1 P3)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).

*****
H2 : or (eq C P0) (eq C P2)
H1 : or (eq B P0) (eq B P2)
H0 : or (eq A P0) (eq A P2)
H : not (eq P1 P3)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).

*****
H2 : or (eq C P0) (eq C P2)
H1 : or (eq B P0) (eq B P2)
H0 : or (eq A P0) (eq A P2)
H : not (eq P1 P3)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
intuition.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.

*****
H1 : eq C P0
H0 : eq B P0
H3 : eq A P0
H : forall _ : eq P1 P3, False
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
subst.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.

*****
H : forall _ : eq P1 P3, False
*****
or (Bet P0 P0 P0) (or (Bet P0 P0 P0) (Bet P0 P0 P0))
+++++
unfold Bet.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.
unfold Bet.

*****
H : forall _ : eq P1 P3, False
*****
or (or (eq P0 P0) (or (eq P0 P0) (eq P0 P0))) (or (or (eq P0 P0) (or (eq P0 P0) (eq P0 P0))) (or (eq P0 P0) (or (eq P0 P0) (eq P0 P0))))
+++++
tauto.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.

*****
H1 : eq C P2
H0 : eq B P0
H3 : eq A P0
H : forall _ : eq P1 P3, False
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
subst.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.

*****
H : forall _ : eq P1 P3, False
*****
or (Bet P0 P0 P2) (or (Bet P0 P2 P0) (Bet P2 P0 P0))
+++++
unfold Bet.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.
unfold Bet.

*****
H : forall _ : eq P1 P3, False
*****
or (or (eq P0 P0) (or (eq P0 P2) (eq P0 P2))) (or (or (eq P0 P2) (or (eq P2 P0) (eq P0 P0))) (or (eq P2 P0) (or (eq P0 P0) (eq P2 P0))))
+++++
tauto.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.

*****
H1 : eq C P0
H0 : eq B P2
H3 : eq A P0
H : forall _ : eq P1 P3, False
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
subst.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.

*****
H : forall _ : eq P1 P3, False
*****
or (Bet P0 P2 P0) (or (Bet P2 P0 P0) (Bet P0 P0 P2))
+++++
unfold Bet.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.
unfold Bet.

*****
H : forall _ : eq P1 P3, False
*****
or (or (eq P0 P2) (or (eq P2 P0) (eq P0 P0))) (or (or (eq P2 P0) (or (eq P0 P0) (eq P2 P0))) (or (eq P0 P0) (or (eq P0 P2) (eq P0 P2))))
+++++
tauto.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.

*****
H1 : eq C P2
H0 : eq B P2
H3 : eq A P0
H : forall _ : eq P1 P3, False
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
subst.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.

*****
H : forall _ : eq P1 P3, False
*****
or (Bet P0 P2 P2) (or (Bet P2 P2 P0) (Bet P2 P0 P2))
+++++
unfold Bet.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.
unfold Bet.

*****
H : forall _ : eq P1 P3, False
*****
or (or (eq P0 P2) (or (eq P2 P2) (eq P0 P2))) (or (or (eq P2 P2) (or (eq P2 P0) (eq P2 P0))) (or (eq P2 P0) (or (eq P0 P2) (eq P2 P2))))
+++++
tauto.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.

*****
H1 : eq C P0
H0 : eq B P0
H3 : eq A P2
H : forall _ : eq P1 P3, False
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
subst.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.

*****
H : forall _ : eq P1 P3, False
*****
or (Bet P2 P0 P0) (or (Bet P0 P0 P2) (Bet P0 P2 P0))
+++++
unfold Bet.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.
unfold Bet.

*****
H : forall _ : eq P1 P3, False
*****
or (or (eq P2 P0) (or (eq P0 P0) (eq P2 P0))) (or (or (eq P0 P0) (or (eq P0 P2) (eq P0 P2))) (or (eq P0 P2) (or (eq P2 P0) (eq P0 P0))))
+++++
tauto.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.

*****
H1 : eq C P2
H0 : eq B P0
H3 : eq A P2
H : forall _ : eq P1 P3, False
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
subst.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.

*****
H : forall _ : eq P1 P3, False
*****
or (Bet P2 P0 P2) (or (Bet P0 P2 P2) (Bet P2 P2 P0))
+++++
unfold Bet.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.
unfold Bet.

*****
H : forall _ : eq P1 P3, False
*****
or (or (eq P2 P0) (or (eq P0 P2) (eq P2 P2))) (or (or (eq P0 P2) (or (eq P2 P2) (eq P0 P2))) (or (eq P2 P2) (or (eq P2 P0) (eq P2 P0))))
+++++
tauto.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.

*****
H1 : eq C P0
H0 : eq B P2
H3 : eq A P2
H : forall _ : eq P1 P3, False
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
subst.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.

*****
H : forall _ : eq P1 P3, False
*****
or (Bet P2 P2 P0) (or (Bet P2 P0 P2) (Bet P0 P2 P2))
+++++
unfold Bet.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.
unfold Bet.

*****
H : forall _ : eq P1 P3, False
*****
or (or (eq P2 P2) (or (eq P2 P0) (eq P2 P0))) (or (or (eq P2 P0) (or (eq P0 P2) (eq P2 P2))) (or (eq P0 P2) (or (eq P2 P2) (eq P0 P2))))
+++++
tauto.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.

*****
H1 : eq C P2
H0 : eq B P2
H3 : eq A P2
H : forall _ : eq P1 P3, False
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
subst.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.

*****
H : forall _ : eq P1 P3, False
*****
or (Bet P2 P2 P2) (or (Bet P2 P2 P2) (Bet P2 P2 P2))
+++++
unfold Bet.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.
unfold Bet.

*****
H : forall _ : eq P1 P3, False
*****
or (or (eq P2 P2) (or (eq P2 P2) (eq P2 P2))) (or (or (eq P2 P2) (or (eq P2 P2) (eq P2 P2))) (or (eq P2 P2) (or (eq P2 P2) (eq P2 P2))))
+++++
tauto.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.

*****
H2 : Cong C P2 C Q
H1 : Cong B P2 B Q
H0 : Cong A P2 A Q
H : not (eq P2 Q)
A,B,C,Q : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
destruct Q.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.

*****
H2 : Cong C P2 C P0
H1 : Cong B P2 B P0
H0 : Cong A P2 A P0
H : not (eq P2 P0)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try solve [intuition].
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].

*****
H2 : Cong C P2 C P0
H1 : Cong B P2 B P0
H0 : Cong A P2 A P0
H : not (eq P2 P0)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).

*****
H2 : Cong C P2 C P0
H1 : Cong B P2 B P0
H0 : Cong A P2 A P0
H : not (eq P2 P0)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).

*****
H2 : Cong C P2 C P0
H1 : Cong B P2 B P0
H0 : Cong A P2 A P0
H : not (eq P2 P0)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).

*****
H2 : Cong C P2 C P0
H1 : Cong B P2 B P0
H0 : Cong A P2 A P0
H : not (eq P2 P0)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).

*****
H2 : Cong C P2 C P0
H1 : Cong B P2 B P0
H0 : Cong A P2 A P0
H : not (eq P2 P0)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).

*****
H2 : Cong C P2 C P0
H1 : Cong B P2 B P0
H0 : Cong A P2 A P0
H : not (eq P2 P0)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).

*****
H2 : Cong C P2 C P0
H1 : Cong B P2 B P0
H0 : Cong A P2 A P0
H : not (eq P2 P0)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).

*****
H2 : Cong C P0 C P2
H1 : Cong B P0 B P2
H0 : Cong A P0 A P2
H : not (eq P2 P0)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).

*****
H2 : Cong C P0 C P2
H1 : Cong B P0 B P2
H0 : Cong A P0 A P2
H : not (eq P2 P0)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).

*****
H2 : or (eq C P1) (eq C P3)
H1 : or (eq B P1) (eq B P3)
H0 : or (eq A P1) (eq A P3)
H : not (eq P2 P0)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).

*****
H2 : or (eq C P1) (eq C P3)
H1 : or (eq B P1) (eq B P3)
H0 : or (eq A P1) (eq A P3)
H : not (eq P2 P0)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).

*****
H2 : or (eq C P1) (eq C P3)
H1 : or (eq B P1) (eq B P3)
H0 : or (eq A P1) (eq A P3)
H : not (eq P2 P0)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).

*****
H2 : or (eq C P1) (eq C P3)
H1 : or (eq B P1) (eq B P3)
H0 : or (eq A P1) (eq A P3)
H : not (eq P2 P0)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).

*****
H2 : or (eq C P1) (eq C P3)
H1 : or (eq B P1) (eq B P3)
H0 : or (eq A P1) (eq A P3)
H : not (eq P2 P0)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
intuition.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.

*****
H1 : eq C P1
H0 : eq B P1
H3 : eq A P1
H : forall _ : eq P2 P0, False
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
subst.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.

*****
H : forall _ : eq P2 P0, False
*****
or (Bet P1 P1 P1) (or (Bet P1 P1 P1) (Bet P1 P1 P1))
+++++
unfold Bet.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.
unfold Bet.

*****
H : forall _ : eq P2 P0, False
*****
or (or (eq P1 P1) (or (eq P1 P1) (eq P1 P1))) (or (or (eq P1 P1) (or (eq P1 P1) (eq P1 P1))) (or (eq P1 P1) (or (eq P1 P1) (eq P1 P1))))
+++++
tauto.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.

*****
H1 : eq C P3
H0 : eq B P1
H3 : eq A P1
H : forall _ : eq P2 P0, False
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
subst.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.

*****
H : forall _ : eq P2 P0, False
*****
or (Bet P1 P1 P3) (or (Bet P1 P3 P1) (Bet P3 P1 P1))
+++++
unfold Bet.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.
unfold Bet.

*****
H : forall _ : eq P2 P0, False
*****
or (or (eq P1 P1) (or (eq P1 P3) (eq P1 P3))) (or (or (eq P1 P3) (or (eq P3 P1) (eq P1 P1))) (or (eq P3 P1) (or (eq P1 P1) (eq P3 P1))))
+++++
tauto.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.

*****
H1 : eq C P1
H0 : eq B P3
H3 : eq A P1
H : forall _ : eq P2 P0, False
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
subst.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.

*****
H : forall _ : eq P2 P0, False
*****
or (Bet P1 P3 P1) (or (Bet P3 P1 P1) (Bet P1 P1 P3))
+++++
unfold Bet.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.
unfold Bet.

*****
H : forall _ : eq P2 P0, False
*****
or (or (eq P1 P3) (or (eq P3 P1) (eq P1 P1))) (or (or (eq P3 P1) (or (eq P1 P1) (eq P3 P1))) (or (eq P1 P1) (or (eq P1 P3) (eq P1 P3))))
+++++
tauto.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.

*****
H1 : eq C P3
H0 : eq B P3
H3 : eq A P1
H : forall _ : eq P2 P0, False
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
subst.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.

*****
H : forall _ : eq P2 P0, False
*****
or (Bet P1 P3 P3) (or (Bet P3 P3 P1) (Bet P3 P1 P3))
+++++
unfold Bet.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.
unfold Bet.

*****
H : forall _ : eq P2 P0, False
*****
or (or (eq P1 P3) (or (eq P3 P3) (eq P1 P3))) (or (or (eq P3 P3) (or (eq P3 P1) (eq P3 P1))) (or (eq P3 P1) (or (eq P1 P3) (eq P3 P3))))
+++++
tauto.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.

*****
H1 : eq C P1
H0 : eq B P1
H3 : eq A P3
H : forall _ : eq P2 P0, False
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
subst.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.

*****
H : forall _ : eq P2 P0, False
*****
or (Bet P3 P1 P1) (or (Bet P1 P1 P3) (Bet P1 P3 P1))
+++++
unfold Bet.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.
unfold Bet.

*****
H : forall _ : eq P2 P0, False
*****
or (or (eq P3 P1) (or (eq P1 P1) (eq P3 P1))) (or (or (eq P1 P1) (or (eq P1 P3) (eq P1 P3))) (or (eq P1 P3) (or (eq P3 P1) (eq P1 P1))))
+++++
tauto.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.

*****
H1 : eq C P3
H0 : eq B P1
H3 : eq A P3
H : forall _ : eq P2 P0, False
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
subst.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.

*****
H : forall _ : eq P2 P0, False
*****
or (Bet P3 P1 P3) (or (Bet P1 P3 P3) (Bet P3 P3 P1))
+++++
unfold Bet.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.
unfold Bet.

*****
H : forall _ : eq P2 P0, False
*****
or (or (eq P3 P1) (or (eq P1 P3) (eq P3 P3))) (or (or (eq P1 P3) (or (eq P3 P3) (eq P1 P3))) (or (eq P3 P3) (or (eq P3 P1) (eq P3 P1))))
+++++
tauto.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.

*****
H1 : eq C P1
H0 : eq B P3
H3 : eq A P3
H : forall _ : eq P2 P0, False
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
subst.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.

*****
H : forall _ : eq P2 P0, False
*****
or (Bet P3 P3 P1) (or (Bet P3 P1 P3) (Bet P1 P3 P3))
+++++
unfold Bet.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.
unfold Bet.

*****
H : forall _ : eq P2 P0, False
*****
or (or (eq P3 P3) (or (eq P3 P1) (eq P3 P1))) (or (or (eq P3 P1) (or (eq P1 P3) (eq P3 P3))) (or (eq P1 P3) (or (eq P3 P3) (eq P1 P3))))
+++++
tauto.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.

*****
H1 : eq C P3
H0 : eq B P3
H3 : eq A P3
H : forall _ : eq P2 P0, False
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
subst.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.

*****
H : forall _ : eq P2 P0, False
*****
or (Bet P3 P3 P3) (or (Bet P3 P3 P3) (Bet P3 P3 P3))
+++++
unfold Bet.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.
unfold Bet.

*****
H : forall _ : eq P2 P0, False
*****
or (or (eq P3 P3) (or (eq P3 P3) (eq P3 P3))) (or (or (eq P3 P3) (or (eq P3 P3) (eq P3 P3))) (or (eq P3 P3) (or (eq P3 P3) (eq P3 P3))))
+++++
tauto.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.

*****
H2 : Cong C P2 C P1
H1 : Cong B P2 B P1
H0 : Cong A P2 A P1
H : not (eq P2 P1)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try solve [intuition].
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].

*****
H2 : Cong C P2 C P1
H1 : Cong B P2 B P1
H0 : Cong A P2 A P1
H : not (eq P2 P1)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).

*****
H2 : Cong C P2 C P1
H1 : Cong B P2 B P1
H0 : Cong A P2 A P1
H : not (eq P2 P1)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).

*****
H2 : Cong C P2 C P1
H1 : Cong B P2 B P1
H0 : Cong A P2 A P1
H : not (eq P2 P1)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).

*****
H2 : Cong C P2 C P1
H1 : Cong B P2 B P1
H0 : Cong A P2 A P1
H : not (eq P2 P1)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).

*****
H2 : Cong C P2 C P1
H1 : Cong B P2 B P1
H0 : Cong A P2 A P1
H : not (eq P2 P1)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).

*****
H2 : Cong C P2 C P1
H1 : Cong B P2 B P1
H0 : Cong A P2 A P1
H : not (eq P2 P1)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).

*****
H2 : Cong C P2 C P1
H1 : Cong B P2 B P1
H0 : Cong A P2 A P1
H : not (eq P2 P1)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).

*****
H2 : Cong C P1 C P2
H1 : Cong B P1 B P2
H0 : Cong A P1 A P2
H : not (eq P2 P1)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).

*****
H2 : Cong C P1 C P2
H1 : Cong B P1 B P2
H0 : Cong A P1 A P2
H : not (eq P2 P1)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).

*****
H2 : Cong C P1 C P2
H1 : Cong B P1 B P2
H0 : Cong A P1 A P2
H : not (eq P2 P1)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).

*****
H2 : or (eq C P0) (eq C P3)
H1 : or (eq B P0) (eq B P3)
H0 : or (eq A P0) (eq A P3)
H : not (eq P2 P1)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).

*****
H2 : or (eq C P0) (eq C P3)
H1 : or (eq B P0) (eq B P3)
H0 : or (eq A P0) (eq A P3)
H : not (eq P2 P1)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).

*****
H2 : or (eq C P0) (eq C P3)
H1 : or (eq B P0) (eq B P3)
H0 : or (eq A P0) (eq A P3)
H : not (eq P2 P1)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).

*****
H2 : or (eq C P0) (eq C P3)
H1 : or (eq B P0) (eq B P3)
H0 : or (eq A P0) (eq A P3)
H : not (eq P2 P1)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
intuition.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.

*****
H1 : eq C P0
H0 : eq B P0
H3 : eq A P0
H : forall _ : eq P2 P1, False
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
subst.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.

*****
H : forall _ : eq P2 P1, False
*****
or (Bet P0 P0 P0) (or (Bet P0 P0 P0) (Bet P0 P0 P0))
+++++
unfold Bet.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.
unfold Bet.

*****
H : forall _ : eq P2 P1, False
*****
or (or (eq P0 P0) (or (eq P0 P0) (eq P0 P0))) (or (or (eq P0 P0) (or (eq P0 P0) (eq P0 P0))) (or (eq P0 P0) (or (eq P0 P0) (eq P0 P0))))
+++++
tauto.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.

*****
H1 : eq C P3
H0 : eq B P0
H3 : eq A P0
H : forall _ : eq P2 P1, False
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
subst.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.

*****
H : forall _ : eq P2 P1, False
*****
or (Bet P0 P0 P3) (or (Bet P0 P3 P0) (Bet P3 P0 P0))
+++++
unfold Bet.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.
unfold Bet.

*****
H : forall _ : eq P2 P1, False
*****
or (or (eq P0 P0) (or (eq P0 P3) (eq P0 P3))) (or (or (eq P0 P3) (or (eq P3 P0) (eq P0 P0))) (or (eq P3 P0) (or (eq P0 P0) (eq P3 P0))))
+++++
tauto.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.

*****
H1 : eq C P0
H0 : eq B P3
H3 : eq A P0
H : forall _ : eq P2 P1, False
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
subst.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.

*****
H : forall _ : eq P2 P1, False
*****
or (Bet P0 P3 P0) (or (Bet P3 P0 P0) (Bet P0 P0 P3))
+++++
unfold Bet.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.
unfold Bet.

*****
H : forall _ : eq P2 P1, False
*****
or (or (eq P0 P3) (or (eq P3 P0) (eq P0 P0))) (or (or (eq P3 P0) (or (eq P0 P0) (eq P3 P0))) (or (eq P0 P0) (or (eq P0 P3) (eq P0 P3))))
+++++
tauto.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.

*****
H1 : eq C P3
H0 : eq B P3
H3 : eq A P0
H : forall _ : eq P2 P1, False
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
subst.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.

*****
H : forall _ : eq P2 P1, False
*****
or (Bet P0 P3 P3) (or (Bet P3 P3 P0) (Bet P3 P0 P3))
+++++
unfold Bet.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.
unfold Bet.

*****
H : forall _ : eq P2 P1, False
*****
or (or (eq P0 P3) (or (eq P3 P3) (eq P0 P3))) (or (or (eq P3 P3) (or (eq P3 P0) (eq P3 P0))) (or (eq P3 P0) (or (eq P0 P3) (eq P3 P3))))
+++++
tauto.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.

*****
H1 : eq C P0
H0 : eq B P0
H3 : eq A P3
H : forall _ : eq P2 P1, False
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
subst.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.

*****
H : forall _ : eq P2 P1, False
*****
or (Bet P3 P0 P0) (or (Bet P0 P0 P3) (Bet P0 P3 P0))
+++++
unfold Bet.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.
unfold Bet.

*****
H : forall _ : eq P2 P1, False
*****
or (or (eq P3 P0) (or (eq P0 P0) (eq P3 P0))) (or (or (eq P0 P0) (or (eq P0 P3) (eq P0 P3))) (or (eq P0 P3) (or (eq P3 P0) (eq P0 P0))))
+++++
tauto.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.

*****
H1 : eq C P3
H0 : eq B P0
H3 : eq A P3
H : forall _ : eq P2 P1, False
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
subst.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.

*****
H : forall _ : eq P2 P1, False
*****
or (Bet P3 P0 P3) (or (Bet P0 P3 P3) (Bet P3 P3 P0))
+++++
unfold Bet.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.
unfold Bet.

*****
H : forall _ : eq P2 P1, False
*****
or (or (eq P3 P0) (or (eq P0 P3) (eq P3 P3))) (or (or (eq P0 P3) (or (eq P3 P3) (eq P0 P3))) (or (eq P3 P3) (or (eq P3 P0) (eq P3 P0))))
+++++
tauto.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.

*****
H1 : eq C P0
H0 : eq B P3
H3 : eq A P3
H : forall _ : eq P2 P1, False
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
subst.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.

*****
H : forall _ : eq P2 P1, False
*****
or (Bet P3 P3 P0) (or (Bet P3 P0 P3) (Bet P0 P3 P3))
+++++
unfold Bet.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.
unfold Bet.

*****
H : forall _ : eq P2 P1, False
*****
or (or (eq P3 P3) (or (eq P3 P0) (eq P3 P0))) (or (or (eq P3 P0) (or (eq P0 P3) (eq P3 P3))) (or (eq P0 P3) (or (eq P3 P3) (eq P0 P3))))
+++++
tauto.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.

*****
H1 : eq C P3
H0 : eq B P3
H3 : eq A P3
H : forall _ : eq P2 P1, False
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
subst.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.

*****
H : forall _ : eq P2 P1, False
*****
or (Bet P3 P3 P3) (or (Bet P3 P3 P3) (Bet P3 P3 P3))
+++++
unfold Bet.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.
unfold Bet.

*****
H : forall _ : eq P2 P1, False
*****
or (or (eq P3 P3) (or (eq P3 P3) (eq P3 P3))) (or (or (eq P3 P3) (or (eq P3 P3) (eq P3 P3))) (or (eq P3 P3) (or (eq P3 P3) (eq P3 P3))))
+++++
tauto.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.

*****
H2 : Cong C P2 C P2
H1 : Cong B P2 B P2
H0 : Cong A P2 A P2
H : not (eq P2 P2)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try solve [intuition].
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.

*****
H2 : Cong C P2 C P3
H1 : Cong B P2 B P3
H0 : Cong A P2 A P3
H : not (eq P2 P3)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try solve [intuition].
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].

*****
H2 : Cong C P2 C P3
H1 : Cong B P2 B P3
H0 : Cong A P2 A P3
H : not (eq P2 P3)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).

*****
H2 : Cong C P2 C P3
H1 : Cong B P2 B P3
H0 : Cong A P2 A P3
H : not (eq P2 P3)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).

*****
H2 : Cong C P2 C P3
H1 : Cong B P2 B P3
H0 : Cong A P2 A P3
H : not (eq P2 P3)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).

*****
H2 : Cong C P2 C P3
H1 : Cong B P2 B P3
H0 : Cong A P2 A P3
H : not (eq P2 P3)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).

*****
H2 : Cong C P2 C P3
H1 : Cong B P2 B P3
H0 : Cong A P2 A P3
H : not (eq P2 P3)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).

*****
H2 : Cong C P2 C P3
H1 : Cong B P2 B P3
H0 : Cong A P2 A P3
H : not (eq P2 P3)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).

*****
H2 : or (eq C P0) (eq C P1)
H1 : or (eq B P0) (eq B P1)
H0 : or (eq A P0) (eq A P1)
H : not (eq P2 P3)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).

*****
H2 : or (eq C P0) (eq C P1)
H1 : or (eq B P0) (eq B P1)
H0 : or (eq A P0) (eq A P1)
H : not (eq P2 P3)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).

*****
H2 : or (eq C P0) (eq C P1)
H1 : or (eq B P0) (eq B P1)
H0 : or (eq A P0) (eq A P1)
H : not (eq P2 P3)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).

*****
H2 : or (eq C P0) (eq C P1)
H1 : or (eq B P0) (eq B P1)
H0 : or (eq A P0) (eq A P1)
H : not (eq P2 P3)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).

*****
H2 : or (eq C P0) (eq C P1)
H1 : or (eq B P0) (eq B P1)
H0 : or (eq A P0) (eq A P1)
H : not (eq P2 P3)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).

*****
H2 : or (eq C P0) (eq C P1)
H1 : or (eq B P0) (eq B P1)
H0 : or (eq A P0) (eq A P1)
H : not (eq P2 P3)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).

*****
H2 : or (eq C P0) (eq C P1)
H1 : or (eq B P0) (eq B P1)
H0 : or (eq A P0) (eq A P1)
H : not (eq P2 P3)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).

*****
H2 : or (eq C P0) (eq C P1)
H1 : or (eq B P0) (eq B P1)
H0 : or (eq A P0) (eq A P1)
H : not (eq P2 P3)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
intuition.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.

*****
H1 : eq C P0
H0 : eq B P0
H3 : eq A P0
H : forall _ : eq P2 P3, False
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
subst.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.

*****
H : forall _ : eq P2 P3, False
*****
or (Bet P0 P0 P0) (or (Bet P0 P0 P0) (Bet P0 P0 P0))
+++++
unfold Bet.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.
unfold Bet.

*****
H : forall _ : eq P2 P3, False
*****
or (or (eq P0 P0) (or (eq P0 P0) (eq P0 P0))) (or (or (eq P0 P0) (or (eq P0 P0) (eq P0 P0))) (or (eq P0 P0) (or (eq P0 P0) (eq P0 P0))))
+++++
tauto.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.

*****
H1 : eq C P1
H0 : eq B P0
H3 : eq A P0
H : forall _ : eq P2 P3, False
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
subst.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.

*****
H : forall _ : eq P2 P3, False
*****
or (Bet P0 P0 P1) (or (Bet P0 P1 P0) (Bet P1 P0 P0))
+++++
unfold Bet.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.
unfold Bet.

*****
H : forall _ : eq P2 P3, False
*****
or (or (eq P0 P0) (or (eq P0 P1) (eq P0 P1))) (or (or (eq P0 P1) (or (eq P1 P0) (eq P0 P0))) (or (eq P1 P0) (or (eq P0 P0) (eq P1 P0))))
+++++
tauto.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.

*****
H1 : eq C P0
H0 : eq B P1
H3 : eq A P0
H : forall _ : eq P2 P3, False
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
subst.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.

*****
H : forall _ : eq P2 P3, False
*****
or (Bet P0 P1 P0) (or (Bet P1 P0 P0) (Bet P0 P0 P1))
+++++
unfold Bet.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.
unfold Bet.

*****
H : forall _ : eq P2 P3, False
*****
or (or (eq P0 P1) (or (eq P1 P0) (eq P0 P0))) (or (or (eq P1 P0) (or (eq P0 P0) (eq P1 P0))) (or (eq P0 P0) (or (eq P0 P1) (eq P0 P1))))
+++++
tauto.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.

*****
H1 : eq C P1
H0 : eq B P1
H3 : eq A P0
H : forall _ : eq P2 P3, False
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
subst.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.

*****
H : forall _ : eq P2 P3, False
*****
or (Bet P0 P1 P1) (or (Bet P1 P1 P0) (Bet P1 P0 P1))
+++++
unfold Bet.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.
unfold Bet.

*****
H : forall _ : eq P2 P3, False
*****
or (or (eq P0 P1) (or (eq P1 P1) (eq P0 P1))) (or (or (eq P1 P1) (or (eq P1 P0) (eq P1 P0))) (or (eq P1 P0) (or (eq P0 P1) (eq P1 P1))))
+++++
tauto.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.

*****
H1 : eq C P0
H0 : eq B P0
H3 : eq A P1
H : forall _ : eq P2 P3, False
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
subst.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.

*****
H : forall _ : eq P2 P3, False
*****
or (Bet P1 P0 P0) (or (Bet P0 P0 P1) (Bet P0 P1 P0))
+++++
unfold Bet.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.
unfold Bet.

*****
H : forall _ : eq P2 P3, False
*****
or (or (eq P1 P0) (or (eq P0 P0) (eq P1 P0))) (or (or (eq P0 P0) (or (eq P0 P1) (eq P0 P1))) (or (eq P0 P1) (or (eq P1 P0) (eq P0 P0))))
+++++
tauto.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.

*****
H1 : eq C P1
H0 : eq B P0
H3 : eq A P1
H : forall _ : eq P2 P3, False
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
subst.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.

*****
H : forall _ : eq P2 P3, False
*****
or (Bet P1 P0 P1) (or (Bet P0 P1 P1) (Bet P1 P1 P0))
+++++
unfold Bet.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.
unfold Bet.

*****
H : forall _ : eq P2 P3, False
*****
or (or (eq P1 P0) (or (eq P0 P1) (eq P1 P1))) (or (or (eq P0 P1) (or (eq P1 P1) (eq P0 P1))) (or (eq P1 P1) (or (eq P1 P0) (eq P1 P0))))
+++++
tauto.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.

*****
H1 : eq C P0
H0 : eq B P1
H3 : eq A P1
H : forall _ : eq P2 P3, False
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
subst.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.

*****
H : forall _ : eq P2 P3, False
*****
or (Bet P1 P1 P0) (or (Bet P1 P0 P1) (Bet P0 P1 P1))
+++++
unfold Bet.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.
unfold Bet.

*****
H : forall _ : eq P2 P3, False
*****
or (or (eq P1 P1) (or (eq P1 P0) (eq P1 P0))) (or (or (eq P1 P0) (or (eq P0 P1) (eq P1 P1))) (or (eq P0 P1) (or (eq P1 P1) (eq P0 P1))))
+++++
tauto.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.

*****
H1 : eq C P1
H0 : eq B P1
H3 : eq A P1
H : forall _ : eq P2 P3, False
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
subst.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.

*****
H : forall _ : eq P2 P3, False
*****
or (Bet P1 P1 P1) (or (Bet P1 P1 P1) (Bet P1 P1 P1))
+++++
unfold Bet.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.
unfold Bet.

*****
H : forall _ : eq P2 P3, False
*****
or (or (eq P1 P1) (or (eq P1 P1) (eq P1 P1))) (or (or (eq P1 P1) (or (eq P1 P1) (eq P1 P1))) (or (eq P1 P1) (or (eq P1 P1) (eq P1 P1))))
+++++
tauto.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.

*****
H2 : Cong C P3 C Q
H1 : Cong B P3 B Q
H0 : Cong A P3 A Q
H : not (eq P3 Q)
A,B,C,Q : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
destruct Q.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.

*****
H2 : Cong C P3 C P0
H1 : Cong B P3 B P0
H0 : Cong A P3 A P0
H : not (eq P3 P0)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try solve [intuition].
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].

*****
H2 : Cong C P3 C P0
H1 : Cong B P3 B P0
H0 : Cong A P3 A P0
H : not (eq P3 P0)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).

*****
H2 : Cong C P3 C P0
H1 : Cong B P3 B P0
H0 : Cong A P3 A P0
H : not (eq P3 P0)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).

*****
H2 : Cong C P3 C P0
H1 : Cong B P3 B P0
H0 : Cong A P3 A P0
H : not (eq P3 P0)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).

*****
H2 : Cong C P3 C P0
H1 : Cong B P3 B P0
H0 : Cong A P3 A P0
H : not (eq P3 P0)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).

*****
H2 : Cong C P3 C P0
H1 : Cong B P3 B P0
H0 : Cong A P3 A P0
H : not (eq P3 P0)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).

*****
H2 : Cong C P3 C P0
H1 : Cong B P3 B P0
H0 : Cong A P3 A P0
H : not (eq P3 P0)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).

*****
H2 : Cong C P3 C P0
H1 : Cong B P3 B P0
H0 : Cong A P3 A P0
H : not (eq P3 P0)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).

*****
H2 : Cong C P0 C P3
H1 : Cong B P0 B P3
H0 : Cong A P0 A P3
H : not (eq P3 P0)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).

*****
H2 : Cong C P0 C P3
H1 : Cong B P0 B P3
H0 : Cong A P0 A P3
H : not (eq P3 P0)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).

*****
H2 : Cong C P0 C P3
H1 : Cong B P0 B P3
H0 : Cong A P0 A P3
H : not (eq P3 P0)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).

*****
H2 : Cong C P0 C P3
H1 : Cong B P0 B P3
H0 : Cong A P0 A P3
H : not (eq P3 P0)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).

*****
H2 : or (eq C P1) (eq C P2)
H1 : or (eq B P1) (eq B P2)
H0 : or (eq A P1) (eq A P2)
H : not (eq P3 P0)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).

*****
H2 : or (eq C P1) (eq C P2)
H1 : or (eq B P1) (eq B P2)
H0 : or (eq A P1) (eq A P2)
H : not (eq P3 P0)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).

*****
H2 : or (eq C P1) (eq C P2)
H1 : or (eq B P1) (eq B P2)
H0 : or (eq A P1) (eq A P2)
H : not (eq P3 P0)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
intuition.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.

*****
H1 : eq C P1
H0 : eq B P1
H3 : eq A P1
H : forall _ : eq P3 P0, False
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
subst.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.

*****
H : forall _ : eq P3 P0, False
*****
or (Bet P1 P1 P1) (or (Bet P1 P1 P1) (Bet P1 P1 P1))
+++++
unfold Bet.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.
unfold Bet.

*****
H : forall _ : eq P3 P0, False
*****
or (or (eq P1 P1) (or (eq P1 P1) (eq P1 P1))) (or (or (eq P1 P1) (or (eq P1 P1) (eq P1 P1))) (or (eq P1 P1) (or (eq P1 P1) (eq P1 P1))))
+++++
tauto.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.

*****
H1 : eq C P2
H0 : eq B P1
H3 : eq A P1
H : forall _ : eq P3 P0, False
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
subst.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.

*****
H : forall _ : eq P3 P0, False
*****
or (Bet P1 P1 P2) (or (Bet P1 P2 P1) (Bet P2 P1 P1))
+++++
unfold Bet.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.
unfold Bet.

*****
H : forall _ : eq P3 P0, False
*****
or (or (eq P1 P1) (or (eq P1 P2) (eq P1 P2))) (or (or (eq P1 P2) (or (eq P2 P1) (eq P1 P1))) (or (eq P2 P1) (or (eq P1 P1) (eq P2 P1))))
+++++
tauto.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.

*****
H1 : eq C P1
H0 : eq B P2
H3 : eq A P1
H : forall _ : eq P3 P0, False
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
subst.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.

*****
H : forall _ : eq P3 P0, False
*****
or (Bet P1 P2 P1) (or (Bet P2 P1 P1) (Bet P1 P1 P2))
+++++
unfold Bet.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.
unfold Bet.

*****
H : forall _ : eq P3 P0, False
*****
or (or (eq P1 P2) (or (eq P2 P1) (eq P1 P1))) (or (or (eq P2 P1) (or (eq P1 P1) (eq P2 P1))) (or (eq P1 P1) (or (eq P1 P2) (eq P1 P2))))
+++++
tauto.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.

*****
H1 : eq C P2
H0 : eq B P2
H3 : eq A P1
H : forall _ : eq P3 P0, False
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
subst.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.

*****
H : forall _ : eq P3 P0, False
*****
or (Bet P1 P2 P2) (or (Bet P2 P2 P1) (Bet P2 P1 P2))
+++++
unfold Bet.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.
unfold Bet.

*****
H : forall _ : eq P3 P0, False
*****
or (or (eq P1 P2) (or (eq P2 P2) (eq P1 P2))) (or (or (eq P2 P2) (or (eq P2 P1) (eq P2 P1))) (or (eq P2 P1) (or (eq P1 P2) (eq P2 P2))))
+++++
tauto.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.

*****
H1 : eq C P1
H0 : eq B P1
H3 : eq A P2
H : forall _ : eq P3 P0, False
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
subst.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.

*****
H : forall _ : eq P3 P0, False
*****
or (Bet P2 P1 P1) (or (Bet P1 P1 P2) (Bet P1 P2 P1))
+++++
unfold Bet.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.
unfold Bet.

*****
H : forall _ : eq P3 P0, False
*****
or (or (eq P2 P1) (or (eq P1 P1) (eq P2 P1))) (or (or (eq P1 P1) (or (eq P1 P2) (eq P1 P2))) (or (eq P1 P2) (or (eq P2 P1) (eq P1 P1))))
+++++
tauto.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.

*****
H1 : eq C P2
H0 : eq B P1
H3 : eq A P2
H : forall _ : eq P3 P0, False
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
subst.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.

*****
H : forall _ : eq P3 P0, False
*****
or (Bet P2 P1 P2) (or (Bet P1 P2 P2) (Bet P2 P2 P1))
+++++
unfold Bet.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.
unfold Bet.

*****
H : forall _ : eq P3 P0, False
*****
or (or (eq P2 P1) (or (eq P1 P2) (eq P2 P2))) (or (or (eq P1 P2) (or (eq P2 P2) (eq P1 P2))) (or (eq P2 P2) (or (eq P2 P1) (eq P2 P1))))
+++++
tauto.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.

*****
H1 : eq C P1
H0 : eq B P2
H3 : eq A P2
H : forall _ : eq P3 P0, False
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
subst.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.

*****
H : forall _ : eq P3 P0, False
*****
or (Bet P2 P2 P1) (or (Bet P2 P1 P2) (Bet P1 P2 P2))
+++++
unfold Bet.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.
unfold Bet.

*****
H : forall _ : eq P3 P0, False
*****
or (or (eq P2 P2) (or (eq P2 P1) (eq P2 P1))) (or (or (eq P2 P1) (or (eq P1 P2) (eq P2 P2))) (or (eq P1 P2) (or (eq P2 P2) (eq P1 P2))))
+++++
tauto.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.

*****
H1 : eq C P2
H0 : eq B P2
H3 : eq A P2
H : forall _ : eq P3 P0, False
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
subst.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.

*****
H : forall _ : eq P3 P0, False
*****
or (Bet P2 P2 P2) (or (Bet P2 P2 P2) (Bet P2 P2 P2))
+++++
unfold Bet.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.
unfold Bet.

*****
H : forall _ : eq P3 P0, False
*****
or (or (eq P2 P2) (or (eq P2 P2) (eq P2 P2))) (or (or (eq P2 P2) (or (eq P2 P2) (eq P2 P2))) (or (eq P2 P2) (or (eq P2 P2) (eq P2 P2))))
+++++
tauto.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.

*****
H2 : Cong C P3 C P1
H1 : Cong B P3 B P1
H0 : Cong A P3 A P1
H : not (eq P3 P1)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try solve [intuition].
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].

*****
H2 : Cong C P3 C P1
H1 : Cong B P3 B P1
H0 : Cong A P3 A P1
H : not (eq P3 P1)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).

*****
H2 : Cong C P3 C P1
H1 : Cong B P3 B P1
H0 : Cong A P3 A P1
H : not (eq P3 P1)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).

*****
H2 : Cong C P3 C P1
H1 : Cong B P3 B P1
H0 : Cong A P3 A P1
H : not (eq P3 P1)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).

*****
H2 : Cong C P3 C P1
H1 : Cong B P3 B P1
H0 : Cong A P3 A P1
H : not (eq P3 P1)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).

*****
H2 : Cong C P3 C P1
H1 : Cong B P3 B P1
H0 : Cong A P3 A P1
H : not (eq P3 P1)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).

*****
H2 : Cong C P3 C P1
H1 : Cong B P3 B P1
H0 : Cong A P3 A P1
H : not (eq P3 P1)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).

*****
H2 : Cong C P3 C P1
H1 : Cong B P3 B P1
H0 : Cong A P3 A P1
H : not (eq P3 P1)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).

*****
H2 : Cong C P1 C P3
H1 : Cong B P1 B P3
H0 : Cong A P1 A P3
H : not (eq P3 P1)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).

*****
H2 : Cong C P1 C P3
H1 : Cong B P1 B P3
H0 : Cong A P1 A P3
H : not (eq P3 P1)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).

*****
H2 : Cong C P1 C P3
H1 : Cong B P1 B P3
H0 : Cong A P1 A P3
H : not (eq P3 P1)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).

*****
H2 : Cong C P1 C P3
H1 : Cong B P1 B P3
H0 : Cong A P1 A P3
H : not (eq P3 P1)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).

*****
H2 : Cong C P1 C P3
H1 : Cong B P1 B P3
H0 : Cong A P1 A P3
H : not (eq P3 P1)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).

*****
H2 : or (eq C P0) (eq C P2)
H1 : or (eq B P0) (eq B P2)
H0 : or (eq A P0) (eq A P2)
H : not (eq P3 P1)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).

*****
H2 : or (eq C P0) (eq C P2)
H1 : or (eq B P0) (eq B P2)
H0 : or (eq A P0) (eq A P2)
H : not (eq P3 P1)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
intuition.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.

*****
H1 : eq C P0
H0 : eq B P0
H3 : eq A P0
H : forall _ : eq P3 P1, False
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
subst.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.

*****
H : forall _ : eq P3 P1, False
*****
or (Bet P0 P0 P0) (or (Bet P0 P0 P0) (Bet P0 P0 P0))
+++++
unfold Bet.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.
unfold Bet.

*****
H : forall _ : eq P3 P1, False
*****
or (or (eq P0 P0) (or (eq P0 P0) (eq P0 P0))) (or (or (eq P0 P0) (or (eq P0 P0) (eq P0 P0))) (or (eq P0 P0) (or (eq P0 P0) (eq P0 P0))))
+++++
tauto.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.

*****
H1 : eq C P2
H0 : eq B P0
H3 : eq A P0
H : forall _ : eq P3 P1, False
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
subst.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.

*****
H : forall _ : eq P3 P1, False
*****
or (Bet P0 P0 P2) (or (Bet P0 P2 P0) (Bet P2 P0 P0))
+++++
unfold Bet.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.
unfold Bet.

*****
H : forall _ : eq P3 P1, False
*****
or (or (eq P0 P0) (or (eq P0 P2) (eq P0 P2))) (or (or (eq P0 P2) (or (eq P2 P0) (eq P0 P0))) (or (eq P2 P0) (or (eq P0 P0) (eq P2 P0))))
+++++
tauto.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.

*****
H1 : eq C P0
H0 : eq B P2
H3 : eq A P0
H : forall _ : eq P3 P1, False
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
subst.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.

*****
H : forall _ : eq P3 P1, False
*****
or (Bet P0 P2 P0) (or (Bet P2 P0 P0) (Bet P0 P0 P2))
+++++
unfold Bet.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.
unfold Bet.

*****
H : forall _ : eq P3 P1, False
*****
or (or (eq P0 P2) (or (eq P2 P0) (eq P0 P0))) (or (or (eq P2 P0) (or (eq P0 P0) (eq P2 P0))) (or (eq P0 P0) (or (eq P0 P2) (eq P0 P2))))
+++++
tauto.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.

*****
H1 : eq C P2
H0 : eq B P2
H3 : eq A P0
H : forall _ : eq P3 P1, False
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
subst.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.

*****
H : forall _ : eq P3 P1, False
*****
or (Bet P0 P2 P2) (or (Bet P2 P2 P0) (Bet P2 P0 P2))
+++++
unfold Bet.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.
unfold Bet.

*****
H : forall _ : eq P3 P1, False
*****
or (or (eq P0 P2) (or (eq P2 P2) (eq P0 P2))) (or (or (eq P2 P2) (or (eq P2 P0) (eq P2 P0))) (or (eq P2 P0) (or (eq P0 P2) (eq P2 P2))))
+++++
tauto.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.

*****
H1 : eq C P0
H0 : eq B P0
H3 : eq A P2
H : forall _ : eq P3 P1, False
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
subst.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.

*****
H : forall _ : eq P3 P1, False
*****
or (Bet P2 P0 P0) (or (Bet P0 P0 P2) (Bet P0 P2 P0))
+++++
unfold Bet.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.
unfold Bet.

*****
H : forall _ : eq P3 P1, False
*****
or (or (eq P2 P0) (or (eq P0 P0) (eq P2 P0))) (or (or (eq P0 P0) (or (eq P0 P2) (eq P0 P2))) (or (eq P0 P2) (or (eq P2 P0) (eq P0 P0))))
+++++
tauto.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.

*****
H1 : eq C P2
H0 : eq B P0
H3 : eq A P2
H : forall _ : eq P3 P1, False
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
subst.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.

*****
H : forall _ : eq P3 P1, False
*****
or (Bet P2 P0 P2) (or (Bet P0 P2 P2) (Bet P2 P2 P0))
+++++
unfold Bet.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.
unfold Bet.

*****
H : forall _ : eq P3 P1, False
*****
or (or (eq P2 P0) (or (eq P0 P2) (eq P2 P2))) (or (or (eq P0 P2) (or (eq P2 P2) (eq P0 P2))) (or (eq P2 P2) (or (eq P2 P0) (eq P2 P0))))
+++++
tauto.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.

*****
H1 : eq C P0
H0 : eq B P2
H3 : eq A P2
H : forall _ : eq P3 P1, False
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
subst.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.

*****
H : forall _ : eq P3 P1, False
*****
or (Bet P2 P2 P0) (or (Bet P2 P0 P2) (Bet P0 P2 P2))
+++++
unfold Bet.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.
unfold Bet.

*****
H : forall _ : eq P3 P1, False
*****
or (or (eq P2 P2) (or (eq P2 P0) (eq P2 P0))) (or (or (eq P2 P0) (or (eq P0 P2) (eq P2 P2))) (or (eq P0 P2) (or (eq P2 P2) (eq P0 P2))))
+++++
tauto.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.

*****
H1 : eq C P2
H0 : eq B P2
H3 : eq A P2
H : forall _ : eq P3 P1, False
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
subst.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.

*****
H : forall _ : eq P3 P1, False
*****
or (Bet P2 P2 P2) (or (Bet P2 P2 P2) (Bet P2 P2 P2))
+++++
unfold Bet.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.
unfold Bet.

*****
H : forall _ : eq P3 P1, False
*****
or (or (eq P2 P2) (or (eq P2 P2) (eq P2 P2))) (or (or (eq P2 P2) (or (eq P2 P2) (eq P2 P2))) (or (eq P2 P2) (or (eq P2 P2) (eq P2 P2))))
+++++
tauto.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.

*****
H2 : Cong C P3 C P2
H1 : Cong B P3 B P2
H0 : Cong A P3 A P2
H : not (eq P3 P2)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try solve [intuition].
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].

*****
H2 : Cong C P3 C P2
H1 : Cong B P3 B P2
H0 : Cong A P3 A P2
H : not (eq P3 P2)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).

*****
H2 : Cong C P3 C P2
H1 : Cong B P3 B P2
H0 : Cong A P3 A P2
H : not (eq P3 P2)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).

*****
H2 : Cong C P3 C P2
H1 : Cong B P3 B P2
H0 : Cong A P3 A P2
H : not (eq P3 P2)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).

*****
H2 : Cong C P3 C P2
H1 : Cong B P3 B P2
H0 : Cong A P3 A P2
H : not (eq P3 P2)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).

*****
H2 : Cong C P3 C P2
H1 : Cong B P3 B P2
H0 : Cong A P3 A P2
H : not (eq P3 P2)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).

*****
H2 : Cong C P3 C P2
H1 : Cong B P3 B P2
H0 : Cong A P3 A P2
H : not (eq P3 P2)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).

*****
H2 : Cong C P3 C P2
H1 : Cong B P3 B P2
H0 : Cong A P3 A P2
H : not (eq P3 P2)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).

*****
H2 : Cong C P2 C P3
H1 : Cong B P2 B P3
H0 : Cong A P2 A P3
H : not (eq P3 P2)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).

*****
H2 : Cong C P2 C P3
H1 : Cong B P2 B P3
H0 : Cong A P2 A P3
H : not (eq P3 P2)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).

*****
H2 : Cong C P2 C P3
H1 : Cong B P2 B P3
H0 : Cong A P2 A P3
H : not (eq P3 P2)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).

*****
H2 : Cong C P2 C P3
H1 : Cong B P2 B P3
H0 : Cong A P2 A P3
H : not (eq P3 P2)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).

*****
H2 : Cong C P2 C P3
H1 : Cong B P2 B P3
H0 : Cong A P2 A P3
H : not (eq P3 P2)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).

*****
H2 : Cong C P2 C P3
H1 : Cong B P2 B P3
H0 : Cong A P2 A P3
H : not (eq P3 P2)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).

*****
H2 : or (eq C P0) (eq C P1)
H1 : or (eq B P0) (eq B P1)
H0 : or (eq A P0) (eq A P1)
H : not (eq P3 P2)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
intuition.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.

*****
H1 : eq C P0
H0 : eq B P0
H3 : eq A P0
H : forall _ : eq P3 P2, False
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
subst.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.

*****
H : forall _ : eq P3 P2, False
*****
or (Bet P0 P0 P0) (or (Bet P0 P0 P0) (Bet P0 P0 P0))
+++++
unfold Bet.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.
unfold Bet.

*****
H : forall _ : eq P3 P2, False
*****
or (or (eq P0 P0) (or (eq P0 P0) (eq P0 P0))) (or (or (eq P0 P0) (or (eq P0 P0) (eq P0 P0))) (or (eq P0 P0) (or (eq P0 P0) (eq P0 P0))))
+++++
tauto.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.

*****
H1 : eq C P1
H0 : eq B P0
H3 : eq A P0
H : forall _ : eq P3 P2, False
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
subst.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.

*****
H : forall _ : eq P3 P2, False
*****
or (Bet P0 P0 P1) (or (Bet P0 P1 P0) (Bet P1 P0 P0))
+++++
unfold Bet.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.
unfold Bet.

*****
H : forall _ : eq P3 P2, False
*****
or (or (eq P0 P0) (or (eq P0 P1) (eq P0 P1))) (or (or (eq P0 P1) (or (eq P1 P0) (eq P0 P0))) (or (eq P1 P0) (or (eq P0 P0) (eq P1 P0))))
+++++
tauto.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.

*****
H1 : eq C P0
H0 : eq B P1
H3 : eq A P0
H : forall _ : eq P3 P2, False
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
subst.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.

*****
H : forall _ : eq P3 P2, False
*****
or (Bet P0 P1 P0) (or (Bet P1 P0 P0) (Bet P0 P0 P1))
+++++
unfold Bet.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.
unfold Bet.

*****
H : forall _ : eq P3 P2, False
*****
or (or (eq P0 P1) (or (eq P1 P0) (eq P0 P0))) (or (or (eq P1 P0) (or (eq P0 P0) (eq P1 P0))) (or (eq P0 P0) (or (eq P0 P1) (eq P0 P1))))
+++++
tauto.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.

*****
H1 : eq C P1
H0 : eq B P1
H3 : eq A P0
H : forall _ : eq P3 P2, False
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
subst.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.

*****
H : forall _ : eq P3 P2, False
*****
or (Bet P0 P1 P1) (or (Bet P1 P1 P0) (Bet P1 P0 P1))
+++++
unfold Bet.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.
unfold Bet.

*****
H : forall _ : eq P3 P2, False
*****
or (or (eq P0 P1) (or (eq P1 P1) (eq P0 P1))) (or (or (eq P1 P1) (or (eq P1 P0) (eq P1 P0))) (or (eq P1 P0) (or (eq P0 P1) (eq P1 P1))))
+++++
tauto.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.

*****
H1 : eq C P0
H0 : eq B P0
H3 : eq A P1
H : forall _ : eq P3 P2, False
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
subst.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.

*****
H : forall _ : eq P3 P2, False
*****
or (Bet P1 P0 P0) (or (Bet P0 P0 P1) (Bet P0 P1 P0))
+++++
unfold Bet.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.
unfold Bet.

*****
H : forall _ : eq P3 P2, False
*****
or (or (eq P1 P0) (or (eq P0 P0) (eq P1 P0))) (or (or (eq P0 P0) (or (eq P0 P1) (eq P0 P1))) (or (eq P0 P1) (or (eq P1 P0) (eq P0 P0))))
+++++
tauto.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.

*****
H1 : eq C P1
H0 : eq B P0
H3 : eq A P1
H : forall _ : eq P3 P2, False
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
subst.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.

*****
H : forall _ : eq P3 P2, False
*****
or (Bet P1 P0 P1) (or (Bet P0 P1 P1) (Bet P1 P1 P0))
+++++
unfold Bet.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.
unfold Bet.

*****
H : forall _ : eq P3 P2, False
*****
or (or (eq P1 P0) (or (eq P0 P1) (eq P1 P1))) (or (or (eq P0 P1) (or (eq P1 P1) (eq P0 P1))) (or (eq P1 P1) (or (eq P1 P0) (eq P1 P0))))
+++++
tauto.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.

*****
H1 : eq C P0
H0 : eq B P1
H3 : eq A P1
H : forall _ : eq P3 P2, False
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
subst.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.

*****
H : forall _ : eq P3 P2, False
*****
or (Bet P1 P1 P0) (or (Bet P1 P0 P1) (Bet P0 P1 P1))
+++++
unfold Bet.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.
unfold Bet.

*****
H : forall _ : eq P3 P2, False
*****
or (or (eq P1 P1) (or (eq P1 P0) (eq P1 P0))) (or (or (eq P1 P0) (or (eq P0 P1) (eq P1 P1))) (or (eq P0 P1) (or (eq P1 P1) (eq P0 P1))))
+++++
tauto.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.

*****
H1 : eq C P1
H0 : eq B P1
H3 : eq A P1
H : forall _ : eq P3 P2, False
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
subst.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.

*****
H : forall _ : eq P3 P2, False
*****
or (Bet P1 P1 P1) (or (Bet P1 P1 P1) (Bet P1 P1 P1))
+++++
unfold Bet.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.
try solve [intuition].
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
try (apply cong_sym in H0; apply cong_sym in H1; apply cong_sym in H2).
try (apply cong_aux in H0; apply cong_aux in H1; apply cong_aux in H2).
try (apply cong_aux_2 in H0; apply cong_aux_2 in H1; apply cong_aux_2 in H2).
try (apply cong_aux_3 in H0; apply cong_aux_3 in H1; apply cong_aux_3 in H2).
try (apply cong_aux_4 in H0; apply cong_aux_4 in H1; apply cong_aux_4 in H2).
try (apply cong_aux_5 in H0; apply cong_aux_5 in H1; apply cong_aux_5 in H2).
try (apply cong_aux_6 in H0; apply cong_aux_6 in H1; apply cong_aux_6 in H2).
intuition.
subst.
unfold Bet.

*****
H : forall _ : eq P3 P2, False
*****
or (or (eq P1 P1) (or (eq P1 P1) (eq P1 P1))) (or (or (eq P1 P1) (or (eq P1 P1) (eq P1 P1))) (or (eq P1 P1) (or (eq P1 P1) (eq P1 P1))))
+++++
tauto.
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.
destruct Q.

*****
H2 : Cong C P3 C P3
H1 : Cong B P3 B P3
H0 : Cong A P3 A P3
H : not (eq P3 P3)
A,B,C : Point
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
try solve [intuition].
-----
Lemma upper_dim : forall A B C P Q , P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q -> (Bet A B C \\/ Bet B C A \\/ Bet C A B).
Proof.
intros.
destruct P.

*****

*****

+++++
Qed.
-----
Lemma not_bet_diff : forall A B C,\n  ~ (Bet A B C \/ Bet B C A \/ Bet C A B) -> A <> B /\ B <> C /\ A <> C.
-----
Lemma not_bet_diff : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> A <> B /\\ B <> C /\\ A <> C.

*****

*****
forall (A B C : Point) (_ : not (or (Bet A B C) (or (Bet B C A) (Bet C A B)))), and (not (eq A B)) (and (not (eq B C)) (not (eq A C)))
+++++
Proof.
-----
Lemma not_bet_diff : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> A <> B /\\ B <> C /\\ A <> C.
Proof.

*****

*****
forall (A B C : Point) (_ : not (or (Bet A B C) (or (Bet B C A) (Bet C A B)))), and (not (eq A B)) (and (not (eq B C)) (not (eq A C)))
+++++
unfold Bet.
-----
Lemma not_bet_diff : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> A <> B /\\ B <> C /\\ A <> C.
Proof.
unfold Bet.

*****

*****
forall (A B C : Point) (_ : not (or (or (eq A B) (or (eq B C) (eq A C))) (or (or (eq B C) (or (eq C A) (eq B A))) (or (eq C A) (or (eq A B) (eq C B)))))), and (not (eq A B)) (and (not (eq B C)) (not (eq A C)))
+++++
intros.
-----
Lemma not_bet_diff : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> A <> B /\\ B <> C /\\ A <> C.
Proof.
unfold Bet.
intros.

*****
H : not\n (or (or (eq A B) (or (eq B C) (eq A C)))\n (or (or (eq B C) (or (eq C A) (eq B A)))\n (or (eq C A) (or (eq A B) (eq C B)))))
A,B,C : Point
*****
and (not (eq A B)) (and (not (eq B C)) (not (eq A C)))
+++++
destruct A.
-----
Lemma not_bet_diff : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> A <> B /\\ B <> C /\\ A <> C.
Proof.
unfold Bet.
intros.
destruct A.

*****
H : not\n (or (or (eq P0 B) (or (eq B C) (eq P0 C)))\n (or (or (eq B C) (or (eq C P0) (eq B P0)))\n (or (eq C P0) (or (eq P0 B) (eq C B)))))
B,C : Point
*****
and (not (eq P0 B)) (and (not (eq B C)) (not (eq P0 C)))
+++++
destruct B.
-----
Lemma not_bet_diff : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> A <> B /\\ B <> C /\\ A <> C.
Proof.
unfold Bet.
intros.
destruct A.
destruct B.

*****
H : not\n (or (or (eq P0 P0) (or (eq P0 C) (eq P0 C)))\n (or (or (eq P0 C) (or (eq C P0) (eq P0 P0)))\n (or (eq C P0) (or (eq P0 P0) (eq C P0)))))
C : Point
*****
and (not (eq P0 P0)) (and (not (eq P0 C)) (not (eq P0 C)))
+++++
destruct C.
-----
Lemma not_bet_diff : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> A <> B /\\ B <> C /\\ A <> C.
Proof.
unfold Bet.
intros.
destruct A.
destruct B.
destruct C.

*****
H : not\n (or (or (eq P0 P0) (or (eq P0 P0) (eq P0 P0)))\n (or (or (eq P0 P0) (or (eq P0 P0) (eq P0 P0)))\n (or (eq P0 P0) (or (eq P0 P0) (eq P0 P0)))))
*****
and (not (eq P0 P0)) (and (not (eq P0 P0)) (not (eq P0 P0)))
+++++
intuition.
-----
Lemma not_bet_diff : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> A <> B /\\ B <> C /\\ A <> C.
Proof.
unfold Bet.
intros.
destruct A.
destruct B.
destruct C.

*****
H : not\n (or (or (eq P0 P0) (or (eq P0 P1) (eq P0 P1)))\n (or (or (eq P0 P1) (or (eq P1 P0) (eq P0 P0)))\n (or (eq P1 P0) (or (eq P0 P0) (eq P1 P0)))))
*****
and (not (eq P0 P0)) (and (not (eq P0 P1)) (not (eq P0 P1)))
+++++
intuition.
-----
Lemma not_bet_diff : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> A <> B /\\ B <> C /\\ A <> C.
Proof.
unfold Bet.
intros.
destruct A.
destruct B.
destruct C.

*****
H : not\n (or (or (eq P0 P0) (or (eq P0 P2) (eq P0 P2)))\n (or (or (eq P0 P2) (or (eq P2 P0) (eq P0 P0)))\n (or (eq P2 P0) (or (eq P0 P0) (eq P2 P0)))))
*****
and (not (eq P0 P0)) (and (not (eq P0 P2)) (not (eq P0 P2)))
+++++
intuition.
-----
Lemma not_bet_diff : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> A <> B /\\ B <> C /\\ A <> C.
Proof.
unfold Bet.
intros.
destruct A.
destruct B.
destruct C.

*****
H : not\n (or (or (eq P0 P0) (or (eq P0 P3) (eq P0 P3)))\n (or (or (eq P0 P3) (or (eq P3 P0) (eq P0 P0)))\n (or (eq P3 P0) (or (eq P0 P0) (eq P3 P0)))))
*****
and (not (eq P0 P0)) (and (not (eq P0 P3)) (not (eq P0 P3)))
+++++
intuition.
-----
Lemma not_bet_diff : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> A <> B /\\ B <> C /\\ A <> C.
Proof.
unfold Bet.
intros.
destruct A.
destruct B.

*****
H : not\n (or (or (eq P0 P1) (or (eq P1 C) (eq P0 C)))\n (or (or (eq P1 C) (or (eq C P0) (eq P1 P0)))\n (or (eq C P0) (or (eq P0 P1) (eq C P1)))))
C : Point
*****
and (not (eq P0 P1)) (and (not (eq P1 C)) (not (eq P0 C)))
+++++
destruct C.
-----
Lemma not_bet_diff : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> A <> B /\\ B <> C /\\ A <> C.
Proof.
unfold Bet.
intros.
destruct A.
destruct B.
destruct C.

*****
H : not\n (or (or (eq P0 P1) (or (eq P1 P0) (eq P0 P0)))\n (or (or (eq P1 P0) (or (eq P0 P0) (eq P1 P0)))\n (or (eq P0 P0) (or (eq P0 P1) (eq P0 P1)))))
*****
and (not (eq P0 P1)) (and (not (eq P1 P0)) (not (eq P0 P0)))
+++++
intuition.
-----
Lemma not_bet_diff : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> A <> B /\\ B <> C /\\ A <> C.
Proof.
unfold Bet.
intros.
destruct A.
destruct B.
destruct C.

*****
H : not\n (or (or (eq P0 P1) (or (eq P1 P1) (eq P0 P1)))\n (or (or (eq P1 P1) (or (eq P1 P0) (eq P1 P0)))\n (or (eq P1 P0) (or (eq P0 P1) (eq P1 P1)))))
*****
and (not (eq P0 P1)) (and (not (eq P1 P1)) (not (eq P0 P1)))
+++++
intuition.
-----
Lemma not_bet_diff : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> A <> B /\\ B <> C /\\ A <> C.
Proof.
unfold Bet.
intros.
destruct A.
destruct B.
destruct C.

*****
H : not\n (or (or (eq P0 P1) (or (eq P1 P2) (eq P0 P2)))\n (or (or (eq P1 P2) (or (eq P2 P0) (eq P1 P0)))\n (or (eq P2 P0) (or (eq P0 P1) (eq P2 P1)))))
*****
and (not (eq P0 P1)) (and (not (eq P1 P2)) (not (eq P0 P2)))
+++++
intuition.
-----
Lemma not_bet_diff : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> A <> B /\\ B <> C /\\ A <> C.
Proof.
unfold Bet.
intros.
destruct A.
destruct B.
destruct C.

*****
H : not\n (or (or (eq P0 P1) (or (eq P1 P3) (eq P0 P3)))\n (or (or (eq P1 P3) (or (eq P3 P0) (eq P1 P0)))\n (or (eq P3 P0) (or (eq P0 P1) (eq P3 P1)))))
*****
and (not (eq P0 P1)) (and (not (eq P1 P3)) (not (eq P0 P3)))
+++++
intuition.
-----
Lemma not_bet_diff : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> A <> B /\\ B <> C /\\ A <> C.
Proof.
unfold Bet.
intros.
destruct A.
destruct B.

*****
H : not\n (or (or (eq P0 P2) (or (eq P2 C) (eq P0 C)))\n (or (or (eq P2 C) (or (eq C P0) (eq P2 P0)))\n (or (eq C P0) (or (eq P0 P2) (eq C P2)))))
C : Point
*****
and (not (eq P0 P2)) (and (not (eq P2 C)) (not (eq P0 C)))
+++++
destruct C.
-----
Lemma not_bet_diff : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> A <> B /\\ B <> C /\\ A <> C.
Proof.
unfold Bet.
intros.
destruct A.
destruct B.
destruct C.

*****
H : not\n (or (or (eq P0 P2) (or (eq P2 P0) (eq P0 P0)))\n (or (or (eq P2 P0) (or (eq P0 P0) (eq P2 P0)))\n (or (eq P0 P0) (or (eq P0 P2) (eq P0 P2)))))
*****
and (not (eq P0 P2)) (and (not (eq P2 P0)) (not (eq P0 P0)))
+++++
intuition.
-----
Lemma not_bet_diff : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> A <> B /\\ B <> C /\\ A <> C.
Proof.
unfold Bet.
intros.
destruct A.
destruct B.
destruct C.

*****
H : not\n (or (or (eq P0 P2) (or (eq P2 P1) (eq P0 P1)))\n (or (or (eq P2 P1) (or (eq P1 P0) (eq P2 P0)))\n (or (eq P1 P0) (or (eq P0 P2) (eq P1 P2)))))
*****
and (not (eq P0 P2)) (and (not (eq P2 P1)) (not (eq P0 P1)))
+++++
intuition.
-----
Lemma not_bet_diff : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> A <> B /\\ B <> C /\\ A <> C.
Proof.
unfold Bet.
intros.
destruct A.
destruct B.
destruct C.

*****
H : not\n (or (or (eq P0 P2) (or (eq P2 P2) (eq P0 P2)))\n (or (or (eq P2 P2) (or (eq P2 P0) (eq P2 P0)))\n (or (eq P2 P0) (or (eq P0 P2) (eq P2 P2)))))
*****
and (not (eq P0 P2)) (and (not (eq P2 P2)) (not (eq P0 P2)))
+++++
intuition.
-----
Lemma not_bet_diff : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> A <> B /\\ B <> C /\\ A <> C.
Proof.
unfold Bet.
intros.
destruct A.
destruct B.
destruct C.

*****
H : not\n (or (or (eq P0 P2) (or (eq P2 P3) (eq P0 P3)))\n (or (or (eq P2 P3) (or (eq P3 P0) (eq P2 P0)))\n (or (eq P3 P0) (or (eq P0 P2) (eq P3 P2)))))
*****
and (not (eq P0 P2)) (and (not (eq P2 P3)) (not (eq P0 P3)))
+++++
intuition.
-----
Lemma not_bet_diff : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> A <> B /\\ B <> C /\\ A <> C.
Proof.
unfold Bet.
intros.
destruct A.
destruct B.

*****
H : not\n (or (or (eq P0 P3) (or (eq P3 C) (eq P0 C)))\n (or (or (eq P3 C) (or (eq C P0) (eq P3 P0)))\n (or (eq C P0) (or (eq P0 P3) (eq C P3)))))
C : Point
*****
and (not (eq P0 P3)) (and (not (eq P3 C)) (not (eq P0 C)))
+++++
destruct C.
-----
Lemma not_bet_diff : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> A <> B /\\ B <> C /\\ A <> C.
Proof.
unfold Bet.
intros.
destruct A.
destruct B.
destruct C.

*****
H : not\n (or (or (eq P0 P3) (or (eq P3 P0) (eq P0 P0)))\n (or (or (eq P3 P0) (or (eq P0 P0) (eq P3 P0)))\n (or (eq P0 P0) (or (eq P0 P3) (eq P0 P3)))))
*****
and (not (eq P0 P3)) (and (not (eq P3 P0)) (not (eq P0 P0)))
+++++
intuition.
-----
Lemma not_bet_diff : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> A <> B /\\ B <> C /\\ A <> C.
Proof.
unfold Bet.
intros.
destruct A.
destruct B.
destruct C.

*****
H : not\n (or (or (eq P0 P3) (or (eq P3 P1) (eq P0 P1)))\n (or (or (eq P3 P1) (or (eq P1 P0) (eq P3 P0)))\n (or (eq P1 P0) (or (eq P0 P3) (eq P1 P3)))))
*****
and (not (eq P0 P3)) (and (not (eq P3 P1)) (not (eq P0 P1)))
+++++
intuition.
-----
Lemma not_bet_diff : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> A <> B /\\ B <> C /\\ A <> C.
Proof.
unfold Bet.
intros.
destruct A.
destruct B.
destruct C.

*****
H : not\n (or (or (eq P0 P3) (or (eq P3 P2) (eq P0 P2)))\n (or (or (eq P3 P2) (or (eq P2 P0) (eq P3 P0)))\n (or (eq P2 P0) (or (eq P0 P3) (eq P2 P3)))))
*****
and (not (eq P0 P3)) (and (not (eq P3 P2)) (not (eq P0 P2)))
+++++
intuition.
-----
Lemma not_bet_diff : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> A <> B /\\ B <> C /\\ A <> C.
Proof.
unfold Bet.
intros.
destruct A.
destruct B.
destruct C.

*****
H : not\n (or (or (eq P0 P3) (or (eq P3 P3) (eq P0 P3)))\n (or (or (eq P3 P3) (or (eq P3 P0) (eq P3 P0)))\n (or (eq P3 P0) (or (eq P0 P3) (eq P3 P3)))))
*****
and (not (eq P0 P3)) (and (not (eq P3 P3)) (not (eq P0 P3)))
+++++
intuition.
-----
Lemma not_bet_diff : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> A <> B /\\ B <> C /\\ A <> C.
Proof.
unfold Bet.
intros.
destruct A.

*****
H : not\n (or (or (eq P1 B) (or (eq B C) (eq P1 C)))\n (or (or (eq B C) (or (eq C P1) (eq B P1)))\n (or (eq C P1) (or (eq P1 B) (eq C B)))))
B,C : Point
*****
and (not (eq P1 B)) (and (not (eq B C)) (not (eq P1 C)))
+++++
destruct B.
-----
Lemma not_bet_diff : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> A <> B /\\ B <> C /\\ A <> C.
Proof.
unfold Bet.
intros.
destruct A.
destruct B.

*****
H : not\n (or (or (eq P1 P0) (or (eq P0 C) (eq P1 C)))\n (or (or (eq P0 C) (or (eq C P1) (eq P0 P1)))\n (or (eq C P1) (or (eq P1 P0) (eq C P0)))))
C : Point
*****
and (not (eq P1 P0)) (and (not (eq P0 C)) (not (eq P1 C)))
+++++
destruct C.
-----
Lemma not_bet_diff : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> A <> B /\\ B <> C /\\ A <> C.
Proof.
unfold Bet.
intros.
destruct A.
destruct B.
destruct C.

*****
H : not\n (or (or (eq P1 P0) (or (eq P0 P0) (eq P1 P0)))\n (or (or (eq P0 P0) (or (eq P0 P1) (eq P0 P1)))\n (or (eq P0 P1) (or (eq P1 P0) (eq P0 P0)))))
*****
and (not (eq P1 P0)) (and (not (eq P0 P0)) (not (eq P1 P0)))
+++++
intuition.
-----
Lemma not_bet_diff : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> A <> B /\\ B <> C /\\ A <> C.
Proof.
unfold Bet.
intros.
destruct A.
destruct B.
destruct C.

*****
H : not\n (or (or (eq P1 P0) (or (eq P0 P1) (eq P1 P1)))\n (or (or (eq P0 P1) (or (eq P1 P1) (eq P0 P1)))\n (or (eq P1 P1) (or (eq P1 P0) (eq P1 P0)))))
*****
and (not (eq P1 P0)) (and (not (eq P0 P1)) (not (eq P1 P1)))
+++++
intuition.
-----
Lemma not_bet_diff : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> A <> B /\\ B <> C /\\ A <> C.
Proof.
unfold Bet.
intros.
destruct A.
destruct B.
destruct C.

*****
H : not\n (or (or (eq P1 P0) (or (eq P0 P2) (eq P1 P2)))\n (or (or (eq P0 P2) (or (eq P2 P1) (eq P0 P1)))\n (or (eq P2 P1) (or (eq P1 P0) (eq P2 P0)))))
*****
and (not (eq P1 P0)) (and (not (eq P0 P2)) (not (eq P1 P2)))
+++++
intuition.
-----
Lemma not_bet_diff : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> A <> B /\\ B <> C /\\ A <> C.
Proof.
unfold Bet.
intros.
destruct A.
destruct B.
destruct C.

*****
H : not\n (or (or (eq P1 P0) (or (eq P0 P3) (eq P1 P3)))\n (or (or (eq P0 P3) (or (eq P3 P1) (eq P0 P1)))\n (or (eq P3 P1) (or (eq P1 P0) (eq P3 P0)))))
*****
and (not (eq P1 P0)) (and (not (eq P0 P3)) (not (eq P1 P3)))
+++++
intuition.
-----
Lemma not_bet_diff : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> A <> B /\\ B <> C /\\ A <> C.
Proof.
unfold Bet.
intros.
destruct A.
destruct B.

*****
H : not\n (or (or (eq P1 P1) (or (eq P1 C) (eq P1 C)))\n (or (or (eq P1 C) (or (eq C P1) (eq P1 P1)))\n (or (eq C P1) (or (eq P1 P1) (eq C P1)))))
C : Point
*****
and (not (eq P1 P1)) (and (not (eq P1 C)) (not (eq P1 C)))
+++++
destruct C.
-----
Lemma not_bet_diff : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> A <> B /\\ B <> C /\\ A <> C.
Proof.
unfold Bet.
intros.
destruct A.
destruct B.
destruct C.

*****
H : not\n (or (or (eq P1 P1) (or (eq P1 P0) (eq P1 P0)))\n (or (or (eq P1 P0) (or (eq P0 P1) (eq P1 P1)))\n (or (eq P0 P1) (or (eq P1 P1) (eq P0 P1)))))
*****
and (not (eq P1 P1)) (and (not (eq P1 P0)) (not (eq P1 P0)))
+++++
intuition.
-----
Lemma not_bet_diff : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> A <> B /\\ B <> C /\\ A <> C.
Proof.
unfold Bet.
intros.
destruct A.
destruct B.
destruct C.

*****
H : not\n (or (or (eq P1 P1) (or (eq P1 P1) (eq P1 P1)))\n (or (or (eq P1 P1) (or (eq P1 P1) (eq P1 P1)))\n (or (eq P1 P1) (or (eq P1 P1) (eq P1 P1)))))
*****
and (not (eq P1 P1)) (and (not (eq P1 P1)) (not (eq P1 P1)))
+++++
intuition.
-----
Lemma not_bet_diff : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> A <> B /\\ B <> C /\\ A <> C.
Proof.
unfold Bet.
intros.
destruct A.
destruct B.
destruct C.

*****
H : not\n (or (or (eq P1 P1) (or (eq P1 P2) (eq P1 P2)))\n (or (or (eq P1 P2) (or (eq P2 P1) (eq P1 P1)))\n (or (eq P2 P1) (or (eq P1 P1) (eq P2 P1)))))
*****
and (not (eq P1 P1)) (and (not (eq P1 P2)) (not (eq P1 P2)))
+++++
intuition.
-----
Lemma not_bet_diff : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> A <> B /\\ B <> C /\\ A <> C.
Proof.
unfold Bet.
intros.
destruct A.
destruct B.
destruct C.

*****
H : not\n (or (or (eq P1 P1) (or (eq P1 P3) (eq P1 P3)))\n (or (or (eq P1 P3) (or (eq P3 P1) (eq P1 P1)))\n (or (eq P3 P1) (or (eq P1 P1) (eq P3 P1)))))
*****
and (not (eq P1 P1)) (and (not (eq P1 P3)) (not (eq P1 P3)))
+++++
intuition.
-----
Lemma not_bet_diff : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> A <> B /\\ B <> C /\\ A <> C.
Proof.
unfold Bet.
intros.
destruct A.
destruct B.

*****
H : not\n (or (or (eq P1 P2) (or (eq P2 C) (eq P1 C)))\n (or (or (eq P2 C) (or (eq C P1) (eq P2 P1)))\n (or (eq C P1) (or (eq P1 P2) (eq C P2)))))
C : Point
*****
and (not (eq P1 P2)) (and (not (eq P2 C)) (not (eq P1 C)))
+++++
destruct C.
-----
Lemma not_bet_diff : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> A <> B /\\ B <> C /\\ A <> C.
Proof.
unfold Bet.
intros.
destruct A.
destruct B.
destruct C.

*****
H : not\n (or (or (eq P1 P2) (or (eq P2 P0) (eq P1 P0)))\n (or (or (eq P2 P0) (or (eq P0 P1) (eq P2 P1)))\n (or (eq P0 P1) (or (eq P1 P2) (eq P0 P2)))))
*****
and (not (eq P1 P2)) (and (not (eq P2 P0)) (not (eq P1 P0)))
+++++
intuition.
-----
Lemma not_bet_diff : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> A <> B /\\ B <> C /\\ A <> C.
Proof.
unfold Bet.
intros.
destruct A.
destruct B.
destruct C.

*****
H : not\n (or (or (eq P1 P2) (or (eq P2 P1) (eq P1 P1)))\n (or (or (eq P2 P1) (or (eq P1 P1) (eq P2 P1)))\n (or (eq P1 P1) (or (eq P1 P2) (eq P1 P2)))))
*****
and (not (eq P1 P2)) (and (not (eq P2 P1)) (not (eq P1 P1)))
+++++
intuition.
-----
Lemma not_bet_diff : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> A <> B /\\ B <> C /\\ A <> C.
Proof.
unfold Bet.
intros.
destruct A.
destruct B.
destruct C.

*****
H : not\n (or (or (eq P1 P2) (or (eq P2 P2) (eq P1 P2)))\n (or (or (eq P2 P2) (or (eq P2 P1) (eq P2 P1)))\n (or (eq P2 P1) (or (eq P1 P2) (eq P2 P2)))))
*****
and (not (eq P1 P2)) (and (not (eq P2 P2)) (not (eq P1 P2)))
+++++
intuition.
-----
Lemma not_bet_diff : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> A <> B /\\ B <> C /\\ A <> C.
Proof.
unfold Bet.
intros.
destruct A.
destruct B.
destruct C.

*****
H : not\n (or (or (eq P1 P2) (or (eq P2 P3) (eq P1 P3)))\n (or (or (eq P2 P3) (or (eq P3 P1) (eq P2 P1)))\n (or (eq P3 P1) (or (eq P1 P2) (eq P3 P2)))))
*****
and (not (eq P1 P2)) (and (not (eq P2 P3)) (not (eq P1 P3)))
+++++
intuition.
-----
Lemma not_bet_diff : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> A <> B /\\ B <> C /\\ A <> C.
Proof.
unfold Bet.
intros.
destruct A.
destruct B.

*****
H : not\n (or (or (eq P1 P3) (or (eq P3 C) (eq P1 C)))\n (or (or (eq P3 C) (or (eq C P1) (eq P3 P1)))\n (or (eq C P1) (or (eq P1 P3) (eq C P3)))))
C : Point
*****
and (not (eq P1 P3)) (and (not (eq P3 C)) (not (eq P1 C)))
+++++
destruct C.
-----
Lemma not_bet_diff : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> A <> B /\\ B <> C /\\ A <> C.
Proof.
unfold Bet.
intros.
destruct A.
destruct B.
destruct C.

*****
H : not\n (or (or (eq P1 P3) (or (eq P3 P0) (eq P1 P0)))\n (or (or (eq P3 P0) (or (eq P0 P1) (eq P3 P1)))\n (or (eq P0 P1) (or (eq P1 P3) (eq P0 P3)))))
*****
and (not (eq P1 P3)) (and (not (eq P3 P0)) (not (eq P1 P0)))
+++++
intuition.
-----
Lemma not_bet_diff : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> A <> B /\\ B <> C /\\ A <> C.
Proof.
unfold Bet.
intros.
destruct A.
destruct B.
destruct C.

*****
H : not\n (or (or (eq P1 P3) (or (eq P3 P1) (eq P1 P1)))\n (or (or (eq P3 P1) (or (eq P1 P1) (eq P3 P1)))\n (or (eq P1 P1) (or (eq P1 P3) (eq P1 P3)))))
*****
and (not (eq P1 P3)) (and (not (eq P3 P1)) (not (eq P1 P1)))
+++++
intuition.
-----
Lemma not_bet_diff : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> A <> B /\\ B <> C /\\ A <> C.
Proof.
unfold Bet.
intros.
destruct A.
destruct B.
destruct C.

*****
H : not\n (or (or (eq P1 P3) (or (eq P3 P2) (eq P1 P2)))\n (or (or (eq P3 P2) (or (eq P2 P1) (eq P3 P1)))\n (or (eq P2 P1) (or (eq P1 P3) (eq P2 P3)))))
*****
and (not (eq P1 P3)) (and (not (eq P3 P2)) (not (eq P1 P2)))
+++++
intuition.
-----
Lemma not_bet_diff : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> A <> B /\\ B <> C /\\ A <> C.
Proof.
unfold Bet.
intros.
destruct A.
destruct B.
destruct C.

*****
H : not\n (or (or (eq P1 P3) (or (eq P3 P3) (eq P1 P3)))\n (or (or (eq P3 P3) (or (eq P3 P1) (eq P3 P1)))\n (or (eq P3 P1) (or (eq P1 P3) (eq P3 P3)))))
*****
and (not (eq P1 P3)) (and (not (eq P3 P3)) (not (eq P1 P3)))
+++++
intuition.
-----
Lemma not_bet_diff : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> A <> B /\\ B <> C /\\ A <> C.
Proof.
unfold Bet.
intros.
destruct A.

*****
H : not\n (or (or (eq P2 B) (or (eq B C) (eq P2 C)))\n (or (or (eq B C) (or (eq C P2) (eq B P2)))\n (or (eq C P2) (or (eq P2 B) (eq C B)))))
B,C : Point
*****
and (not (eq P2 B)) (and (not (eq B C)) (not (eq P2 C)))
+++++
destruct B.
-----
Lemma not_bet_diff : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> A <> B /\\ B <> C /\\ A <> C.
Proof.
unfold Bet.
intros.
destruct A.
destruct B.

*****
H : not\n (or (or (eq P2 P0) (or (eq P0 C) (eq P2 C)))\n (or (or (eq P0 C) (or (eq C P2) (eq P0 P2)))\n (or (eq C P2) (or (eq P2 P0) (eq C P0)))))
C : Point
*****
and (not (eq P2 P0)) (and (not (eq P0 C)) (not (eq P2 C)))
+++++
destruct C.
-----
Lemma not_bet_diff : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> A <> B /\\ B <> C /\\ A <> C.
Proof.
unfold Bet.
intros.
destruct A.
destruct B.
destruct C.

*****
H : not\n (or (or (eq P2 P0) (or (eq P0 P0) (eq P2 P0)))\n (or (or (eq P0 P0) (or (eq P0 P2) (eq P0 P2)))\n (or (eq P0 P2) (or (eq P2 P0) (eq P0 P0)))))
*****
and (not (eq P2 P0)) (and (not (eq P0 P0)) (not (eq P2 P0)))
+++++
intuition.
-----
Lemma not_bet_diff : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> A <> B /\\ B <> C /\\ A <> C.
Proof.
unfold Bet.
intros.
destruct A.
destruct B.
destruct C.

*****
H : not\n (or (or (eq P2 P0) (or (eq P0 P1) (eq P2 P1)))\n (or (or (eq P0 P1) (or (eq P1 P2) (eq P0 P2)))\n (or (eq P1 P2) (or (eq P2 P0) (eq P1 P0)))))
*****
and (not (eq P2 P0)) (and (not (eq P0 P1)) (not (eq P2 P1)))
+++++
intuition.
-----
Lemma not_bet_diff : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> A <> B /\\ B <> C /\\ A <> C.
Proof.
unfold Bet.
intros.
destruct A.
destruct B.
destruct C.

*****
H : not\n (or (or (eq P2 P0) (or (eq P0 P2) (eq P2 P2)))\n (or (or (eq P0 P2) (or (eq P2 P2) (eq P0 P2)))\n (or (eq P2 P2) (or (eq P2 P0) (eq P2 P0)))))
*****
and (not (eq P2 P0)) (and (not (eq P0 P2)) (not (eq P2 P2)))
+++++
intuition.
-----
Lemma not_bet_diff : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> A <> B /\\ B <> C /\\ A <> C.
Proof.
unfold Bet.
intros.
destruct A.
destruct B.
destruct C.

*****
H : not\n (or (or (eq P2 P0) (or (eq P0 P3) (eq P2 P3)))\n (or (or (eq P0 P3) (or (eq P3 P2) (eq P0 P2)))\n (or (eq P3 P2) (or (eq P2 P0) (eq P3 P0)))))
*****
and (not (eq P2 P0)) (and (not (eq P0 P3)) (not (eq P2 P3)))
+++++
intuition.
-----
Lemma not_bet_diff : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> A <> B /\\ B <> C /\\ A <> C.
Proof.
unfold Bet.
intros.
destruct A.
destruct B.

*****
H : not\n (or (or (eq P2 P1) (or (eq P1 C) (eq P2 C)))\n (or (or (eq P1 C) (or (eq C P2) (eq P1 P2)))\n (or (eq C P2) (or (eq P2 P1) (eq C P1)))))
C : Point
*****
and (not (eq P2 P1)) (and (not (eq P1 C)) (not (eq P2 C)))
+++++
destruct C.
-----
Lemma not_bet_diff : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> A <> B /\\ B <> C /\\ A <> C.
Proof.
unfold Bet.
intros.
destruct A.
destruct B.
destruct C.

*****
H : not\n (or (or (eq P2 P1) (or (eq P1 P0) (eq P2 P0)))\n (or (or (eq P1 P0) (or (eq P0 P2) (eq P1 P2)))\n (or (eq P0 P2) (or (eq P2 P1) (eq P0 P1)))))
*****
and (not (eq P2 P1)) (and (not (eq P1 P0)) (not (eq P2 P0)))
+++++
intuition.
-----
Lemma not_bet_diff : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> A <> B /\\ B <> C /\\ A <> C.
Proof.
unfold Bet.
intros.
destruct A.
destruct B.
destruct C.

*****
H : not\n (or (or (eq P2 P1) (or (eq P1 P1) (eq P2 P1)))\n (or (or (eq P1 P1) (or (eq P1 P2) (eq P1 P2)))\n (or (eq P1 P2) (or (eq P2 P1) (eq P1 P1)))))
*****
and (not (eq P2 P1)) (and (not (eq P1 P1)) (not (eq P2 P1)))
+++++
intuition.
-----
Lemma not_bet_diff : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> A <> B /\\ B <> C /\\ A <> C.
Proof.
unfold Bet.
intros.
destruct A.
destruct B.
destruct C.

*****
H : not\n (or (or (eq P2 P1) (or (eq P1 P2) (eq P2 P2)))\n (or (or (eq P1 P2) (or (eq P2 P2) (eq P1 P2)))\n (or (eq P2 P2) (or (eq P2 P1) (eq P2 P1)))))
*****
and (not (eq P2 P1)) (and (not (eq P1 P2)) (not (eq P2 P2)))
+++++
intuition.
-----
Lemma not_bet_diff : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> A <> B /\\ B <> C /\\ A <> C.
Proof.
unfold Bet.
intros.
destruct A.
destruct B.
destruct C.

*****
H : not\n (or (or (eq P2 P1) (or (eq P1 P3) (eq P2 P3)))\n (or (or (eq P1 P3) (or (eq P3 P2) (eq P1 P2)))\n (or (eq P3 P2) (or (eq P2 P1) (eq P3 P1)))))
*****
and (not (eq P2 P1)) (and (not (eq P1 P3)) (not (eq P2 P3)))
+++++
intuition.
-----
Lemma not_bet_diff : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> A <> B /\\ B <> C /\\ A <> C.
Proof.
unfold Bet.
intros.
destruct A.
destruct B.

*****
H : not\n (or (or (eq P2 P2) (or (eq P2 C) (eq P2 C)))\n (or (or (eq P2 C) (or (eq C P2) (eq P2 P2)))\n (or (eq C P2) (or (eq P2 P2) (eq C P2)))))
C : Point
*****
and (not (eq P2 P2)) (and (not (eq P2 C)) (not (eq P2 C)))
+++++
destruct C.
-----
Lemma not_bet_diff : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> A <> B /\\ B <> C /\\ A <> C.
Proof.
unfold Bet.
intros.
destruct A.
destruct B.
destruct C.

*****
H : not\n (or (or (eq P2 P2) (or (eq P2 P0) (eq P2 P0)))\n (or (or (eq P2 P0) (or (eq P0 P2) (eq P2 P2)))\n (or (eq P0 P2) (or (eq P2 P2) (eq P0 P2)))))
*****
and (not (eq P2 P2)) (and (not (eq P2 P0)) (not (eq P2 P0)))
+++++
intuition.
-----
Lemma not_bet_diff : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> A <> B /\\ B <> C /\\ A <> C.
Proof.
unfold Bet.
intros.
destruct A.
destruct B.
destruct C.

*****
H : not\n (or (or (eq P2 P2) (or (eq P2 P1) (eq P2 P1)))\n (or (or (eq P2 P1) (or (eq P1 P2) (eq P2 P2)))\n (or (eq P1 P2) (or (eq P2 P2) (eq P1 P2)))))
*****
and (not (eq P2 P2)) (and (not (eq P2 P1)) (not (eq P2 P1)))
+++++
intuition.
-----
Lemma not_bet_diff : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> A <> B /\\ B <> C /\\ A <> C.
Proof.
unfold Bet.
intros.
destruct A.
destruct B.
destruct C.

*****
H : not\n (or (or (eq P2 P2) (or (eq P2 P2) (eq P2 P2)))\n (or (or (eq P2 P2) (or (eq P2 P2) (eq P2 P2)))\n (or (eq P2 P2) (or (eq P2 P2) (eq P2 P2)))))
*****
and (not (eq P2 P2)) (and (not (eq P2 P2)) (not (eq P2 P2)))
+++++
intuition.
-----
Lemma not_bet_diff : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> A <> B /\\ B <> C /\\ A <> C.
Proof.
unfold Bet.
intros.
destruct A.
destruct B.
destruct C.

*****
H : not\n (or (or (eq P2 P2) (or (eq P2 P3) (eq P2 P3)))\n (or (or (eq P2 P3) (or (eq P3 P2) (eq P2 P2)))\n (or (eq P3 P2) (or (eq P2 P2) (eq P3 P2)))))
*****
and (not (eq P2 P2)) (and (not (eq P2 P3)) (not (eq P2 P3)))
+++++
intuition.
-----
Lemma not_bet_diff : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> A <> B /\\ B <> C /\\ A <> C.
Proof.
unfold Bet.
intros.
destruct A.
destruct B.

*****
H : not\n (or (or (eq P2 P3) (or (eq P3 C) (eq P2 C)))\n (or (or (eq P3 C) (or (eq C P2) (eq P3 P2)))\n (or (eq C P2) (or (eq P2 P3) (eq C P3)))))
C : Point
*****
and (not (eq P2 P3)) (and (not (eq P3 C)) (not (eq P2 C)))
+++++
destruct C.
-----
Lemma not_bet_diff : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> A <> B /\\ B <> C /\\ A <> C.
Proof.
unfold Bet.
intros.
destruct A.
destruct B.
destruct C.

*****
H : not\n (or (or (eq P2 P3) (or (eq P3 P0) (eq P2 P0)))\n (or (or (eq P3 P0) (or (eq P0 P2) (eq P3 P2)))\n (or (eq P0 P2) (or (eq P2 P3) (eq P0 P3)))))
*****
and (not (eq P2 P3)) (and (not (eq P3 P0)) (not (eq P2 P0)))
+++++
intuition.
-----
Lemma not_bet_diff : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> A <> B /\\ B <> C /\\ A <> C.
Proof.
unfold Bet.
intros.
destruct A.
destruct B.
destruct C.

*****
H : not\n (or (or (eq P2 P3) (or (eq P3 P1) (eq P2 P1)))\n (or (or (eq P3 P1) (or (eq P1 P2) (eq P3 P2)))\n (or (eq P1 P2) (or (eq P2 P3) (eq P1 P3)))))
*****
and (not (eq P2 P3)) (and (not (eq P3 P1)) (not (eq P2 P1)))
+++++
intuition.
-----
Lemma not_bet_diff : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> A <> B /\\ B <> C /\\ A <> C.
Proof.
unfold Bet.
intros.
destruct A.
destruct B.
destruct C.

*****
H : not\n (or (or (eq P2 P3) (or (eq P3 P2) (eq P2 P2)))\n (or (or (eq P3 P2) (or (eq P2 P2) (eq P3 P2)))\n (or (eq P2 P2) (or (eq P2 P3) (eq P2 P3)))))
*****
and (not (eq P2 P3)) (and (not (eq P3 P2)) (not (eq P2 P2)))
+++++
intuition.
-----
Lemma not_bet_diff : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> A <> B /\\ B <> C /\\ A <> C.
Proof.
unfold Bet.
intros.
destruct A.
destruct B.
destruct C.

*****
H : not\n (or (or (eq P2 P3) (or (eq P3 P3) (eq P2 P3)))\n (or (or (eq P3 P3) (or (eq P3 P2) (eq P3 P2)))\n (or (eq P3 P2) (or (eq P2 P3) (eq P3 P3)))))
*****
and (not (eq P2 P3)) (and (not (eq P3 P3)) (not (eq P2 P3)))
+++++
intuition.
-----
Lemma not_bet_diff : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> A <> B /\\ B <> C /\\ A <> C.
Proof.
unfold Bet.
intros.
destruct A.

*****
H : not\n (or (or (eq P3 B) (or (eq B C) (eq P3 C)))\n (or (or (eq B C) (or (eq C P3) (eq B P3)))\n (or (eq C P3) (or (eq P3 B) (eq C B)))))
B,C : Point
*****
and (not (eq P3 B)) (and (not (eq B C)) (not (eq P3 C)))
+++++
destruct B.
-----
Lemma not_bet_diff : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> A <> B /\\ B <> C /\\ A <> C.
Proof.
unfold Bet.
intros.
destruct A.
destruct B.

*****
H : not\n (or (or (eq P3 P0) (or (eq P0 C) (eq P3 C)))\n (or (or (eq P0 C) (or (eq C P3) (eq P0 P3)))\n (or (eq C P3) (or (eq P3 P0) (eq C P0)))))
C : Point
*****
and (not (eq P3 P0)) (and (not (eq P0 C)) (not (eq P3 C)))
+++++
destruct C.
-----
Lemma not_bet_diff : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> A <> B /\\ B <> C /\\ A <> C.
Proof.
unfold Bet.
intros.
destruct A.
destruct B.
destruct C.

*****
H : not\n (or (or (eq P3 P0) (or (eq P0 P0) (eq P3 P0)))\n (or (or (eq P0 P0) (or (eq P0 P3) (eq P0 P3)))\n (or (eq P0 P3) (or (eq P3 P0) (eq P0 P0)))))
*****
and (not (eq P3 P0)) (and (not (eq P0 P0)) (not (eq P3 P0)))
+++++
intuition.
-----
Lemma not_bet_diff : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> A <> B /\\ B <> C /\\ A <> C.
Proof.
unfold Bet.
intros.
destruct A.
destruct B.
destruct C.

*****
H : not\n (or (or (eq P3 P0) (or (eq P0 P1) (eq P3 P1)))\n (or (or (eq P0 P1) (or (eq P1 P3) (eq P0 P3)))\n (or (eq P1 P3) (or (eq P3 P0) (eq P1 P0)))))
*****
and (not (eq P3 P0)) (and (not (eq P0 P1)) (not (eq P3 P1)))
+++++
intuition.
-----
Lemma not_bet_diff : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> A <> B /\\ B <> C /\\ A <> C.
Proof.
unfold Bet.
intros.
destruct A.
destruct B.
destruct C.

*****
H : not\n (or (or (eq P3 P0) (or (eq P0 P2) (eq P3 P2)))\n (or (or (eq P0 P2) (or (eq P2 P3) (eq P0 P3)))\n (or (eq P2 P3) (or (eq P3 P0) (eq P2 P0)))))
*****
and (not (eq P3 P0)) (and (not (eq P0 P2)) (not (eq P3 P2)))
+++++
intuition.
-----
Lemma not_bet_diff : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> A <> B /\\ B <> C /\\ A <> C.
Proof.
unfold Bet.
intros.
destruct A.
destruct B.
destruct C.

*****
H : not\n (or (or (eq P3 P0) (or (eq P0 P3) (eq P3 P3)))\n (or (or (eq P0 P3) (or (eq P3 P3) (eq P0 P3)))\n (or (eq P3 P3) (or (eq P3 P0) (eq P3 P0)))))
*****
and (not (eq P3 P0)) (and (not (eq P0 P3)) (not (eq P3 P3)))
+++++
intuition.
-----
Lemma not_bet_diff : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> A <> B /\\ B <> C /\\ A <> C.
Proof.
unfold Bet.
intros.
destruct A.
destruct B.

*****
H : not\n (or (or (eq P3 P1) (or (eq P1 C) (eq P3 C)))\n (or (or (eq P1 C) (or (eq C P3) (eq P1 P3)))\n (or (eq C P3) (or (eq P3 P1) (eq C P1)))))
C : Point
*****
and (not (eq P3 P1)) (and (not (eq P1 C)) (not (eq P3 C)))
+++++
destruct C.
-----
Lemma not_bet_diff : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> A <> B /\\ B <> C /\\ A <> C.
Proof.
unfold Bet.
intros.
destruct A.
destruct B.
destruct C.

*****
H : not\n (or (or (eq P3 P1) (or (eq P1 P0) (eq P3 P0)))\n (or (or (eq P1 P0) (or (eq P0 P3) (eq P1 P3)))\n (or (eq P0 P3) (or (eq P3 P1) (eq P0 P1)))))
*****
and (not (eq P3 P1)) (and (not (eq P1 P0)) (not (eq P3 P0)))
+++++
intuition.
-----
Lemma not_bet_diff : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> A <> B /\\ B <> C /\\ A <> C.
Proof.
unfold Bet.
intros.
destruct A.
destruct B.
destruct C.

*****
H : not\n (or (or (eq P3 P1) (or (eq P1 P1) (eq P3 P1)))\n (or (or (eq P1 P1) (or (eq P1 P3) (eq P1 P3)))\n (or (eq P1 P3) (or (eq P3 P1) (eq P1 P1)))))
*****
and (not (eq P3 P1)) (and (not (eq P1 P1)) (not (eq P3 P1)))
+++++
intuition.
-----
Lemma not_bet_diff : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> A <> B /\\ B <> C /\\ A <> C.
Proof.
unfold Bet.
intros.
destruct A.
destruct B.
destruct C.

*****
H : not\n (or (or (eq P3 P1) (or (eq P1 P2) (eq P3 P2)))\n (or (or (eq P1 P2) (or (eq P2 P3) (eq P1 P3)))\n (or (eq P2 P3) (or (eq P3 P1) (eq P2 P1)))))
*****
and (not (eq P3 P1)) (and (not (eq P1 P2)) (not (eq P3 P2)))
+++++
intuition.
-----
Lemma not_bet_diff : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> A <> B /\\ B <> C /\\ A <> C.
Proof.
unfold Bet.
intros.
destruct A.
destruct B.
destruct C.

*****
H : not\n (or (or (eq P3 P1) (or (eq P1 P3) (eq P3 P3)))\n (or (or (eq P1 P3) (or (eq P3 P3) (eq P1 P3)))\n (or (eq P3 P3) (or (eq P3 P1) (eq P3 P1)))))
*****
and (not (eq P3 P1)) (and (not (eq P1 P3)) (not (eq P3 P3)))
+++++
intuition.
-----
Lemma not_bet_diff : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> A <> B /\\ B <> C /\\ A <> C.
Proof.
unfold Bet.
intros.
destruct A.
destruct B.

*****
H : not\n (or (or (eq P3 P2) (or (eq P2 C) (eq P3 C)))\n (or (or (eq P2 C) (or (eq C P3) (eq P2 P3)))\n (or (eq C P3) (or (eq P3 P2) (eq C P2)))))
C : Point
*****
and (not (eq P3 P2)) (and (not (eq P2 C)) (not (eq P3 C)))
+++++
destruct C.
-----
Lemma not_bet_diff : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> A <> B /\\ B <> C /\\ A <> C.
Proof.
unfold Bet.
intros.
destruct A.
destruct B.
destruct C.

*****
H : not\n (or (or (eq P3 P2) (or (eq P2 P0) (eq P3 P0)))\n (or (or (eq P2 P0) (or (eq P0 P3) (eq P2 P3)))\n (or (eq P0 P3) (or (eq P3 P2) (eq P0 P2)))))
*****
and (not (eq P3 P2)) (and (not (eq P2 P0)) (not (eq P3 P0)))
+++++
intuition.
-----
Lemma not_bet_diff : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> A <> B /\\ B <> C /\\ A <> C.
Proof.
unfold Bet.
intros.
destruct A.
destruct B.
destruct C.

*****
H : not\n (or (or (eq P3 P2) (or (eq P2 P1) (eq P3 P1)))\n (or (or (eq P2 P1) (or (eq P1 P3) (eq P2 P3)))\n (or (eq P1 P3) (or (eq P3 P2) (eq P1 P2)))))
*****
and (not (eq P3 P2)) (and (not (eq P2 P1)) (not (eq P3 P1)))
+++++
intuition.
-----
Lemma not_bet_diff : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> A <> B /\\ B <> C /\\ A <> C.
Proof.
unfold Bet.
intros.
destruct A.
destruct B.
destruct C.

*****
H : not\n (or (or (eq P3 P2) (or (eq P2 P2) (eq P3 P2)))\n (or (or (eq P2 P2) (or (eq P2 P3) (eq P2 P3)))\n (or (eq P2 P3) (or (eq P3 P2) (eq P2 P2)))))
*****
and (not (eq P3 P2)) (and (not (eq P2 P2)) (not (eq P3 P2)))
+++++
intuition.
-----
Lemma not_bet_diff : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> A <> B /\\ B <> C /\\ A <> C.
Proof.
unfold Bet.
intros.
destruct A.
destruct B.
destruct C.

*****
H : not\n (or (or (eq P3 P2) (or (eq P2 P3) (eq P3 P3)))\n (or (or (eq P2 P3) (or (eq P3 P3) (eq P2 P3)))\n (or (eq P3 P3) (or (eq P3 P2) (eq P3 P2)))))
*****
and (not (eq P3 P2)) (and (not (eq P2 P3)) (not (eq P3 P3)))
+++++
intuition.
-----
Lemma not_bet_diff : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> A <> B /\\ B <> C /\\ A <> C.
Proof.
unfold Bet.
intros.
destruct A.
destruct B.

*****
H : not\n (or (or (eq P3 P3) (or (eq P3 C) (eq P3 C)))\n (or (or (eq P3 C) (or (eq C P3) (eq P3 P3)))\n (or (eq C P3) (or (eq P3 P3) (eq C P3)))))
C : Point
*****
and (not (eq P3 P3)) (and (not (eq P3 C)) (not (eq P3 C)))
+++++
destruct C.
-----
Lemma not_bet_diff : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> A <> B /\\ B <> C /\\ A <> C.
Proof.
unfold Bet.
intros.
destruct A.
destruct B.
destruct C.

*****
H : not\n (or (or (eq P3 P3) (or (eq P3 P0) (eq P3 P0)))\n (or (or (eq P3 P0) (or (eq P0 P3) (eq P3 P3)))\n (or (eq P0 P3) (or (eq P3 P3) (eq P0 P3)))))
*****
and (not (eq P3 P3)) (and (not (eq P3 P0)) (not (eq P3 P0)))
+++++
intuition.
-----
Lemma not_bet_diff : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> A <> B /\\ B <> C /\\ A <> C.
Proof.
unfold Bet.
intros.
destruct A.
destruct B.
destruct C.

*****
H : not\n (or (or (eq P3 P3) (or (eq P3 P1) (eq P3 P1)))\n (or (or (eq P3 P1) (or (eq P1 P3) (eq P3 P3)))\n (or (eq P1 P3) (or (eq P3 P3) (eq P1 P3)))))
*****
and (not (eq P3 P3)) (and (not (eq P3 P1)) (not (eq P3 P1)))
+++++
intuition.
-----
Lemma not_bet_diff : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> A <> B /\\ B <> C /\\ A <> C.
Proof.
unfold Bet.
intros.
destruct A.
destruct B.
destruct C.

*****
H : not\n (or (or (eq P3 P3) (or (eq P3 P2) (eq P3 P2)))\n (or (or (eq P3 P2) (or (eq P2 P3) (eq P3 P3)))\n (or (eq P2 P3) (or (eq P3 P3) (eq P2 P3)))))
*****
and (not (eq P3 P3)) (and (not (eq P3 P2)) (not (eq P3 P2)))
+++++
intuition.
-----
Lemma not_bet_diff : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> A <> B /\\ B <> C /\\ A <> C.
Proof.
unfold Bet.
intros.
destruct A.
destruct B.
destruct C.

*****
H : not\n (or (or (eq P3 P3) (or (eq P3 P3) (eq P3 P3)))\n (or (or (eq P3 P3) (or (eq P3 P3) (eq P3 P3)))\n (or (eq P3 P3) (or (eq P3 P3) (eq P3 P3)))))
*****
and (not (eq P3 P3)) (and (not (eq P3 P3)) (not (eq P3 P3)))
+++++
intuition.
-----
Lemma not_bet_diff : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> A <> B /\\ B <> C /\\ A <> C.
Proof.
unfold Bet.
intros.
destruct A.

*****

*****

+++++
Qed.
-----
Lemma euclid : forall A B C,\n  ~ (Bet A B C \/ Bet B C A \/ Bet C A B) -> exists CC, Cong A CC B CC /\ Cong A CC C CC.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.

*****

*****
forall (A B C : Point) (_ : not (or (Bet A B C) (or (Bet B C A) (Bet C A B)))), ex (fun CC : Point => and (Cong A CC B CC) (Cong A CC C CC))
+++++
Proof.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.

*****

*****
forall (A B C : Point) (_ : not (or (Bet A B C) (or (Bet B C A) (Bet C A B)))), ex (fun CC : Point => and (Cong A CC B CC) (Cong A CC C CC))
+++++
intros.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.

*****
H : not (or (Bet A B C) (or (Bet B C A) (Bet C A B)))
A,B,C : Point
*****
ex (fun CC : Point => and (Cong A CC B CC) (Cong A CC C CC))
+++++
apply not_bet_diff in H.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.

*****
H : and (not (eq A B)) (and (not (eq B C)) (not (eq A C)))
A,B,C : Point
*****
ex (fun CC : Point => and (Cong A CC B CC) (Cong A CC C CC))
+++++
spliter.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.

*****
H1 : not (eq A C)
H0 : not (eq B C)
H : not (eq A B)
A,B,C : Point
*****
ex (fun CC : Point => and (Cong A CC B CC) (Cong A CC C CC))
+++++
unfold Cong.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.

*****
H1 : not (eq A C)
H0 : not (eq B C)
H : not (eq A B)
A,B,C : Point
*****
ex (fun CC : Point => and (or (and (eq A CC) (eq B CC)) (and (not (eq A CC)) (not (eq B CC)))) (or (and (eq A CC) (eq C CC)) (and (not (eq A CC)) (not (eq C CC)))))
+++++
destruct A.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.

*****
H1 : not (eq P0 C)
H0 : not (eq B C)
H : not (eq P0 B)
B,C : Point
*****
ex (fun CC : Point => and (or (and (eq P0 CC) (eq B CC)) (and (not (eq P0 CC)) (not (eq B CC)))) (or (and (eq P0 CC) (eq C CC)) (and (not (eq P0 CC)) (not (eq C CC)))))
+++++
destruct B.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.

*****
H0,H1 : not (eq P0 C)
H : not (eq P0 P0)
C : Point
*****
ex (fun CC : Point => and (or (and (eq P0 CC) (eq P0 CC)) (and (not (eq P0 CC)) (not (eq P0 CC)))) (or (and (eq P0 CC) (eq C CC)) (and (not (eq P0 CC)) (not (eq C CC)))))
+++++
destruct C.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.

*****
H,H0,H1 : not (eq P0 P0)
*****
ex (fun CC : Point => and (or (and (eq P0 CC) (eq P0 CC)) (and (not (eq P0 CC)) (not (eq P0 CC)))) (or (and (eq P0 CC) (eq P0 CC)) (and (not (eq P0 CC)) (not (eq P0 CC)))))
+++++
try tauto.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.

*****
H0,H1 : not (eq P0 P1)
H : not (eq P0 P0)
*****
ex (fun CC : Point => and (or (and (eq P0 CC) (eq P0 CC)) (and (not (eq P0 CC)) (not (eq P0 CC)))) (or (and (eq P0 CC) (eq P1 CC)) (and (not (eq P0 CC)) (not (eq P1 CC)))))
+++++
try tauto.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.

*****
H0,H1 : not (eq P0 P2)
H : not (eq P0 P0)
*****
ex (fun CC : Point => and (or (and (eq P0 CC) (eq P0 CC)) (and (not (eq P0 CC)) (not (eq P0 CC)))) (or (and (eq P0 CC) (eq P2 CC)) (and (not (eq P0 CC)) (not (eq P2 CC)))))
+++++
try tauto.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.

*****
H0,H1 : not (eq P0 P3)
H : not (eq P0 P0)
*****
ex (fun CC : Point => and (or (and (eq P0 CC) (eq P0 CC)) (and (not (eq P0 CC)) (not (eq P0 CC)))) (or (and (eq P0 CC) (eq P3 CC)) (and (not (eq P0 CC)) (not (eq P3 CC)))))
+++++
try tauto.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.

*****
H1 : not (eq P0 C)
H0 : not (eq P1 C)
H : not (eq P0 P1)
C : Point
*****
ex (fun CC : Point => and (or (and (eq P0 CC) (eq P1 CC)) (and (not (eq P0 CC)) (not (eq P1 CC)))) (or (and (eq P0 CC) (eq C CC)) (and (not (eq P0 CC)) (not (eq C CC)))))
+++++
destruct C.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.

*****
H1 : not (eq P0 P0)
H0 : not (eq P1 P0)
H : not (eq P0 P1)
*****
ex (fun CC : Point => and (or (and (eq P0 CC) (eq P1 CC)) (and (not (eq P0 CC)) (not (eq P1 CC)))) (or (and (eq P0 CC) (eq P0 CC)) (and (not (eq P0 CC)) (not (eq P0 CC)))))
+++++
try tauto.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.

*****
H1 : not (eq P0 P1)
H0 : not (eq P1 P1)
H : not (eq P0 P1)
*****
ex (fun CC : Point => and (or (and (eq P0 CC) (eq P1 CC)) (and (not (eq P0 CC)) (not (eq P1 CC)))) (or (and (eq P0 CC) (eq P1 CC)) (and (not (eq P0 CC)) (not (eq P1 CC)))))
+++++
try tauto.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.

*****
H1 : not (eq P0 P2)
H0 : not (eq P1 P2)
H : not (eq P0 P1)
*****
ex (fun CC : Point => and (or (and (eq P0 CC) (eq P1 CC)) (and (not (eq P0 CC)) (not (eq P1 CC)))) (or (and (eq P0 CC) (eq P2 CC)) (and (not (eq P0 CC)) (not (eq P2 CC)))))
+++++
try tauto.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.
try tauto.

*****
H1 : not (eq P0 P2)
H0 : not (eq P1 P2)
H : not (eq P0 P1)
*****
ex (fun CC : Point => and (or (and (eq P0 CC) (eq P1 CC)) (and (not (eq P0 CC)) (not (eq P1 CC)))) (or (and (eq P0 CC) (eq P2 CC)) (and (not (eq P0 CC)) (not (eq P2 CC)))))
+++++
try (exists P3; split; right; split; discriminate).
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.

*****
H1 : not (eq P0 P3)
H0 : not (eq P1 P3)
H : not (eq P0 P1)
*****
ex (fun CC : Point => and (or (and (eq P0 CC) (eq P1 CC)) (and (not (eq P0 CC)) (not (eq P1 CC)))) (or (and (eq P0 CC) (eq P3 CC)) (and (not (eq P0 CC)) (not (eq P3 CC)))))
+++++
try tauto.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.
try tauto.

*****
H1 : not (eq P0 P3)
H0 : not (eq P1 P3)
H : not (eq P0 P1)
*****
ex (fun CC : Point => and (or (and (eq P0 CC) (eq P1 CC)) (and (not (eq P0 CC)) (not (eq P1 CC)))) (or (and (eq P0 CC) (eq P3 CC)) (and (not (eq P0 CC)) (not (eq P3 CC)))))
+++++
try (exists P3; split; right; split; discriminate).
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.
try tauto.
try (exists P3; split; right; split; discriminate).

*****
H1 : not (eq P0 P3)
H0 : not (eq P1 P3)
H : not (eq P0 P1)
*****
ex (fun CC : Point => and (or (and (eq P0 CC) (eq P1 CC)) (and (not (eq P0 CC)) (not (eq P1 CC)))) (or (and (eq P0 CC) (eq P3 CC)) (and (not (eq P0 CC)) (not (eq P3 CC)))))
+++++
try (exists P2; split; right; split; discriminate).
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.

*****
H1 : not (eq P0 C)
H0 : not (eq P2 C)
H : not (eq P0 P2)
C : Point
*****
ex (fun CC : Point => and (or (and (eq P0 CC) (eq P2 CC)) (and (not (eq P0 CC)) (not (eq P2 CC)))) (or (and (eq P0 CC) (eq C CC)) (and (not (eq P0 CC)) (not (eq C CC)))))
+++++
destruct C.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.

*****
H1 : not (eq P0 P0)
H0 : not (eq P2 P0)
H : not (eq P0 P2)
*****
ex (fun CC : Point => and (or (and (eq P0 CC) (eq P2 CC)) (and (not (eq P0 CC)) (not (eq P2 CC)))) (or (and (eq P0 CC) (eq P0 CC)) (and (not (eq P0 CC)) (not (eq P0 CC)))))
+++++
try tauto.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.

*****
H1 : not (eq P0 P1)
H0 : not (eq P2 P1)
H : not (eq P0 P2)
*****
ex (fun CC : Point => and (or (and (eq P0 CC) (eq P2 CC)) (and (not (eq P0 CC)) (not (eq P2 CC)))) (or (and (eq P0 CC) (eq P1 CC)) (and (not (eq P0 CC)) (not (eq P1 CC)))))
+++++
try tauto.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.
try tauto.

*****
H1 : not (eq P0 P1)
H0 : not (eq P2 P1)
H : not (eq P0 P2)
*****
ex (fun CC : Point => and (or (and (eq P0 CC) (eq P2 CC)) (and (not (eq P0 CC)) (not (eq P2 CC)))) (or (and (eq P0 CC) (eq P1 CC)) (and (not (eq P0 CC)) (not (eq P1 CC)))))
+++++
try (exists P3; split; right; split; discriminate).
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.

*****
H1 : not (eq P0 P2)
H0 : not (eq P2 P2)
H : not (eq P0 P2)
*****
ex (fun CC : Point => and (or (and (eq P0 CC) (eq P2 CC)) (and (not (eq P0 CC)) (not (eq P2 CC)))) (or (and (eq P0 CC) (eq P2 CC)) (and (not (eq P0 CC)) (not (eq P2 CC)))))
+++++
try tauto.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.

*****
H1 : not (eq P0 P3)
H0 : not (eq P2 P3)
H : not (eq P0 P2)
*****
ex (fun CC : Point => and (or (and (eq P0 CC) (eq P2 CC)) (and (not (eq P0 CC)) (not (eq P2 CC)))) (or (and (eq P0 CC) (eq P3 CC)) (and (not (eq P0 CC)) (not (eq P3 CC)))))
+++++
try tauto.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.
try tauto.

*****
H1 : not (eq P0 P3)
H0 : not (eq P2 P3)
H : not (eq P0 P2)
*****
ex (fun CC : Point => and (or (and (eq P0 CC) (eq P2 CC)) (and (not (eq P0 CC)) (not (eq P2 CC)))) (or (and (eq P0 CC) (eq P3 CC)) (and (not (eq P0 CC)) (not (eq P3 CC)))))
+++++
try (exists P3; split; right; split; discriminate).
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.
try tauto.
try (exists P3; split; right; split; discriminate).

*****
H1 : not (eq P0 P3)
H0 : not (eq P2 P3)
H : not (eq P0 P2)
*****
ex (fun CC : Point => and (or (and (eq P0 CC) (eq P2 CC)) (and (not (eq P0 CC)) (not (eq P2 CC)))) (or (and (eq P0 CC) (eq P3 CC)) (and (not (eq P0 CC)) (not (eq P3 CC)))))
+++++
try (exists P2; split; right; split; discriminate).
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.
try tauto.
try (exists P3; split; right; split; discriminate).
try (exists P2; split; right; split; discriminate).

*****
H1 : not (eq P0 P3)
H0 : not (eq P2 P3)
H : not (eq P0 P2)
*****
ex (fun CC : Point => and (or (and (eq P0 CC) (eq P2 CC)) (and (not (eq P0 CC)) (not (eq P2 CC)))) (or (and (eq P0 CC) (eq P3 CC)) (and (not (eq P0 CC)) (not (eq P3 CC)))))
+++++
try (exists P1; split; right; split; discriminate).
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.

*****
H1 : not (eq P0 C)
H0 : not (eq P3 C)
H : not (eq P0 P3)
C : Point
*****
ex (fun CC : Point => and (or (and (eq P0 CC) (eq P3 CC)) (and (not (eq P0 CC)) (not (eq P3 CC)))) (or (and (eq P0 CC) (eq C CC)) (and (not (eq P0 CC)) (not (eq C CC)))))
+++++
destruct C.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.

*****
H1 : not (eq P0 P0)
H0 : not (eq P3 P0)
H : not (eq P0 P3)
*****
ex (fun CC : Point => and (or (and (eq P0 CC) (eq P3 CC)) (and (not (eq P0 CC)) (not (eq P3 CC)))) (or (and (eq P0 CC) (eq P0 CC)) (and (not (eq P0 CC)) (not (eq P0 CC)))))
+++++
try tauto.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.

*****
H1 : not (eq P0 P1)
H0 : not (eq P3 P1)
H : not (eq P0 P3)
*****
ex (fun CC : Point => and (or (and (eq P0 CC) (eq P3 CC)) (and (not (eq P0 CC)) (not (eq P3 CC)))) (or (and (eq P0 CC) (eq P1 CC)) (and (not (eq P0 CC)) (not (eq P1 CC)))))
+++++
try tauto.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.
try tauto.

*****
H1 : not (eq P0 P1)
H0 : not (eq P3 P1)
H : not (eq P0 P3)
*****
ex (fun CC : Point => and (or (and (eq P0 CC) (eq P3 CC)) (and (not (eq P0 CC)) (not (eq P3 CC)))) (or (and (eq P0 CC) (eq P1 CC)) (and (not (eq P0 CC)) (not (eq P1 CC)))))
+++++
try (exists P3; split; right; split; discriminate).
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.
try tauto.
try (exists P3; split; right; split; discriminate).

*****
H1 : not (eq P0 P1)
H0 : not (eq P3 P1)
H : not (eq P0 P3)
*****
ex (fun CC : Point => and (or (and (eq P0 CC) (eq P3 CC)) (and (not (eq P0 CC)) (not (eq P3 CC)))) (or (and (eq P0 CC) (eq P1 CC)) (and (not (eq P0 CC)) (not (eq P1 CC)))))
+++++
try (exists P2; split; right; split; discriminate).
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.

*****
H1 : not (eq P0 P2)
H0 : not (eq P3 P2)
H : not (eq P0 P3)
*****
ex (fun CC : Point => and (or (and (eq P0 CC) (eq P3 CC)) (and (not (eq P0 CC)) (not (eq P3 CC)))) (or (and (eq P0 CC) (eq P2 CC)) (and (not (eq P0 CC)) (not (eq P2 CC)))))
+++++
try tauto.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.
try tauto.

*****
H1 : not (eq P0 P2)
H0 : not (eq P3 P2)
H : not (eq P0 P3)
*****
ex (fun CC : Point => and (or (and (eq P0 CC) (eq P3 CC)) (and (not (eq P0 CC)) (not (eq P3 CC)))) (or (and (eq P0 CC) (eq P2 CC)) (and (not (eq P0 CC)) (not (eq P2 CC)))))
+++++
try (exists P3; split; right; split; discriminate).
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.
try tauto.
try (exists P3; split; right; split; discriminate).

*****
H1 : not (eq P0 P2)
H0 : not (eq P3 P2)
H : not (eq P0 P3)
*****
ex (fun CC : Point => and (or (and (eq P0 CC) (eq P3 CC)) (and (not (eq P0 CC)) (not (eq P3 CC)))) (or (and (eq P0 CC) (eq P2 CC)) (and (not (eq P0 CC)) (not (eq P2 CC)))))
+++++
try (exists P2; split; right; split; discriminate).
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.
try tauto.
try (exists P3; split; right; split; discriminate).
try (exists P2; split; right; split; discriminate).

*****
H1 : not (eq P0 P2)
H0 : not (eq P3 P2)
H : not (eq P0 P3)
*****
ex (fun CC : Point => and (or (and (eq P0 CC) (eq P3 CC)) (and (not (eq P0 CC)) (not (eq P3 CC)))) (or (and (eq P0 CC) (eq P2 CC)) (and (not (eq P0 CC)) (not (eq P2 CC)))))
+++++
try (exists P1; split; right; split; discriminate).
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.

*****
H1 : not (eq P0 P3)
H0 : not (eq P3 P3)
H : not (eq P0 P3)
*****
ex (fun CC : Point => and (or (and (eq P0 CC) (eq P3 CC)) (and (not (eq P0 CC)) (not (eq P3 CC)))) (or (and (eq P0 CC) (eq P3 CC)) (and (not (eq P0 CC)) (not (eq P3 CC)))))
+++++
try tauto.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.

*****
H1 : not (eq P1 C)
H0 : not (eq B C)
H : not (eq P1 B)
B,C : Point
*****
ex (fun CC : Point => and (or (and (eq P1 CC) (eq B CC)) (and (not (eq P1 CC)) (not (eq B CC)))) (or (and (eq P1 CC) (eq C CC)) (and (not (eq P1 CC)) (not (eq C CC)))))
+++++
destruct B.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.

*****
H1 : not (eq P1 C)
H0 : not (eq P0 C)
H : not (eq P1 P0)
C : Point
*****
ex (fun CC : Point => and (or (and (eq P1 CC) (eq P0 CC)) (and (not (eq P1 CC)) (not (eq P0 CC)))) (or (and (eq P1 CC) (eq C CC)) (and (not (eq P1 CC)) (not (eq C CC)))))
+++++
destruct C.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.

*****
H1 : not (eq P1 P0)
H0 : not (eq P0 P0)
H : not (eq P1 P0)
*****
ex (fun CC : Point => and (or (and (eq P1 CC) (eq P0 CC)) (and (not (eq P1 CC)) (not (eq P0 CC)))) (or (and (eq P1 CC) (eq P0 CC)) (and (not (eq P1 CC)) (not (eq P0 CC)))))
+++++
try tauto.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.

*****
H1 : not (eq P1 P1)
H0 : not (eq P0 P1)
H : not (eq P1 P0)
*****
ex (fun CC : Point => and (or (and (eq P1 CC) (eq P0 CC)) (and (not (eq P1 CC)) (not (eq P0 CC)))) (or (and (eq P1 CC) (eq P1 CC)) (and (not (eq P1 CC)) (not (eq P1 CC)))))
+++++
try tauto.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.

*****
H1 : not (eq P1 P2)
H0 : not (eq P0 P2)
H : not (eq P1 P0)
*****
ex (fun CC : Point => and (or (and (eq P1 CC) (eq P0 CC)) (and (not (eq P1 CC)) (not (eq P0 CC)))) (or (and (eq P1 CC) (eq P2 CC)) (and (not (eq P1 CC)) (not (eq P2 CC)))))
+++++
try tauto.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.
try tauto.

*****
H1 : not (eq P1 P2)
H0 : not (eq P0 P2)
H : not (eq P1 P0)
*****
ex (fun CC : Point => and (or (and (eq P1 CC) (eq P0 CC)) (and (not (eq P1 CC)) (not (eq P0 CC)))) (or (and (eq P1 CC) (eq P2 CC)) (and (not (eq P1 CC)) (not (eq P2 CC)))))
+++++
try (exists P3; split; right; split; discriminate).
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.

*****
H1 : not (eq P1 P3)
H0 : not (eq P0 P3)
H : not (eq P1 P0)
*****
ex (fun CC : Point => and (or (and (eq P1 CC) (eq P0 CC)) (and (not (eq P1 CC)) (not (eq P0 CC)))) (or (and (eq P1 CC) (eq P3 CC)) (and (not (eq P1 CC)) (not (eq P3 CC)))))
+++++
try tauto.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.
try tauto.

*****
H1 : not (eq P1 P3)
H0 : not (eq P0 P3)
H : not (eq P1 P0)
*****
ex (fun CC : Point => and (or (and (eq P1 CC) (eq P0 CC)) (and (not (eq P1 CC)) (not (eq P0 CC)))) (or (and (eq P1 CC) (eq P3 CC)) (and (not (eq P1 CC)) (not (eq P3 CC)))))
+++++
try (exists P3; split; right; split; discriminate).
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.
try tauto.
try (exists P3; split; right; split; discriminate).

*****
H1 : not (eq P1 P3)
H0 : not (eq P0 P3)
H : not (eq P1 P0)
*****
ex (fun CC : Point => and (or (and (eq P1 CC) (eq P0 CC)) (and (not (eq P1 CC)) (not (eq P0 CC)))) (or (and (eq P1 CC) (eq P3 CC)) (and (not (eq P1 CC)) (not (eq P3 CC)))))
+++++
try (exists P2; split; right; split; discriminate).
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.

*****
H0,H1 : not (eq P1 C)
H : not (eq P1 P1)
C : Point
*****
ex (fun CC : Point => and (or (and (eq P1 CC) (eq P1 CC)) (and (not (eq P1 CC)) (not (eq P1 CC)))) (or (and (eq P1 CC) (eq C CC)) (and (not (eq P1 CC)) (not (eq C CC)))))
+++++
destruct C.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.

*****
H0,H1 : not (eq P1 P0)
H : not (eq P1 P1)
*****
ex (fun CC : Point => and (or (and (eq P1 CC) (eq P1 CC)) (and (not (eq P1 CC)) (not (eq P1 CC)))) (or (and (eq P1 CC) (eq P0 CC)) (and (not (eq P1 CC)) (not (eq P0 CC)))))
+++++
try tauto.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.

*****
H,H0,H1 : not (eq P1 P1)
*****
ex (fun CC : Point => and (or (and (eq P1 CC) (eq P1 CC)) (and (not (eq P1 CC)) (not (eq P1 CC)))) (or (and (eq P1 CC) (eq P1 CC)) (and (not (eq P1 CC)) (not (eq P1 CC)))))
+++++
try tauto.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.

*****
H0,H1 : not (eq P1 P2)
H : not (eq P1 P1)
*****
ex (fun CC : Point => and (or (and (eq P1 CC) (eq P1 CC)) (and (not (eq P1 CC)) (not (eq P1 CC)))) (or (and (eq P1 CC) (eq P2 CC)) (and (not (eq P1 CC)) (not (eq P2 CC)))))
+++++
try tauto.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.

*****
H0,H1 : not (eq P1 P3)
H : not (eq P1 P1)
*****
ex (fun CC : Point => and (or (and (eq P1 CC) (eq P1 CC)) (and (not (eq P1 CC)) (not (eq P1 CC)))) (or (and (eq P1 CC) (eq P3 CC)) (and (not (eq P1 CC)) (not (eq P3 CC)))))
+++++
try tauto.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.

*****
H1 : not (eq P1 C)
H0 : not (eq P2 C)
H : not (eq P1 P2)
C : Point
*****
ex (fun CC : Point => and (or (and (eq P1 CC) (eq P2 CC)) (and (not (eq P1 CC)) (not (eq P2 CC)))) (or (and (eq P1 CC) (eq C CC)) (and (not (eq P1 CC)) (not (eq C CC)))))
+++++
destruct C.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.

*****
H1 : not (eq P1 P0)
H0 : not (eq P2 P0)
H : not (eq P1 P2)
*****
ex (fun CC : Point => and (or (and (eq P1 CC) (eq P2 CC)) (and (not (eq P1 CC)) (not (eq P2 CC)))) (or (and (eq P1 CC) (eq P0 CC)) (and (not (eq P1 CC)) (not (eq P0 CC)))))
+++++
try tauto.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.
try tauto.

*****
H1 : not (eq P1 P0)
H0 : not (eq P2 P0)
H : not (eq P1 P2)
*****
ex (fun CC : Point => and (or (and (eq P1 CC) (eq P2 CC)) (and (not (eq P1 CC)) (not (eq P2 CC)))) (or (and (eq P1 CC) (eq P0 CC)) (and (not (eq P1 CC)) (not (eq P0 CC)))))
+++++
try (exists P3; split; right; split; discriminate).
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.

*****
H1 : not (eq P1 P1)
H0 : not (eq P2 P1)
H : not (eq P1 P2)
*****
ex (fun CC : Point => and (or (and (eq P1 CC) (eq P2 CC)) (and (not (eq P1 CC)) (not (eq P2 CC)))) (or (and (eq P1 CC) (eq P1 CC)) (and (not (eq P1 CC)) (not (eq P1 CC)))))
+++++
try tauto.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.

*****
H1 : not (eq P1 P2)
H0 : not (eq P2 P2)
H : not (eq P1 P2)
*****
ex (fun CC : Point => and (or (and (eq P1 CC) (eq P2 CC)) (and (not (eq P1 CC)) (not (eq P2 CC)))) (or (and (eq P1 CC) (eq P2 CC)) (and (not (eq P1 CC)) (not (eq P2 CC)))))
+++++
try tauto.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.

*****
H1 : not (eq P1 P3)
H0 : not (eq P2 P3)
H : not (eq P1 P2)
*****
ex (fun CC : Point => and (or (and (eq P1 CC) (eq P2 CC)) (and (not (eq P1 CC)) (not (eq P2 CC)))) (or (and (eq P1 CC) (eq P3 CC)) (and (not (eq P1 CC)) (not (eq P3 CC)))))
+++++
try tauto.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.
try tauto.

*****
H1 : not (eq P1 P3)
H0 : not (eq P2 P3)
H : not (eq P1 P2)
*****
ex (fun CC : Point => and (or (and (eq P1 CC) (eq P2 CC)) (and (not (eq P1 CC)) (not (eq P2 CC)))) (or (and (eq P1 CC) (eq P3 CC)) (and (not (eq P1 CC)) (not (eq P3 CC)))))
+++++
try (exists P3; split; right; split; discriminate).
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.
try tauto.
try (exists P3; split; right; split; discriminate).

*****
H1 : not (eq P1 P3)
H0 : not (eq P2 P3)
H : not (eq P1 P2)
*****
ex (fun CC : Point => and (or (and (eq P1 CC) (eq P2 CC)) (and (not (eq P1 CC)) (not (eq P2 CC)))) (or (and (eq P1 CC) (eq P3 CC)) (and (not (eq P1 CC)) (not (eq P3 CC)))))
+++++
try (exists P2; split; right; split; discriminate).
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.
try tauto.
try (exists P3; split; right; split; discriminate).
try (exists P2; split; right; split; discriminate).

*****
H1 : not (eq P1 P3)
H0 : not (eq P2 P3)
H : not (eq P1 P2)
*****
ex (fun CC : Point => and (or (and (eq P1 CC) (eq P2 CC)) (and (not (eq P1 CC)) (not (eq P2 CC)))) (or (and (eq P1 CC) (eq P3 CC)) (and (not (eq P1 CC)) (not (eq P3 CC)))))
+++++
try (exists P1; split; right; split; discriminate).
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.
try tauto.
try (exists P3; split; right; split; discriminate).
try (exists P2; split; right; split; discriminate).
try (exists P1; split; right; split; discriminate).

*****
H1 : not (eq P1 P3)
H0 : not (eq P2 P3)
H : not (eq P1 P2)
*****
ex (fun CC : Point => and (or (and (eq P1 CC) (eq P2 CC)) (and (not (eq P1 CC)) (not (eq P2 CC)))) (or (and (eq P1 CC) (eq P3 CC)) (and (not (eq P1 CC)) (not (eq P3 CC)))))
+++++
exists P0.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.
try tauto.
try (exists P3; split; right; split; discriminate).
try (exists P2; split; right; split; discriminate).
try (exists P1; split; right; split; discriminate).
exists P0.

*****
H1 : not (eq P1 P3)
H0 : not (eq P2 P3)
H : not (eq P1 P2)
*****
and (or (and (eq P1 P0) (eq P2 P0)) (and (not (eq P1 P0)) (not (eq P2 P0)))) (or (and (eq P1 P0) (eq P3 P0)) (and (not (eq P1 P0)) (not (eq P3 P0))))
+++++
split.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.
try tauto.
try (exists P3; split; right; split; discriminate).
try (exists P2; split; right; split; discriminate).
try (exists P1; split; right; split; discriminate).
exists P0.
split.

*****
H1 : not (eq P1 P3)
H0 : not (eq P2 P3)
H : not (eq P1 P2)
*****
or (and (eq P1 P0) (eq P2 P0)) (and (not (eq P1 P0)) (not (eq P2 P0)))
+++++
right.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.
try tauto.
try (exists P3; split; right; split; discriminate).
try (exists P2; split; right; split; discriminate).
try (exists P1; split; right; split; discriminate).
exists P0.
split.
right.

*****
H1 : not (eq P1 P3)
H0 : not (eq P2 P3)
H : not (eq P1 P2)
*****
and (not (eq P1 P0)) (not (eq P2 P0))
+++++
split.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.
try tauto.
try (exists P3; split; right; split; discriminate).
try (exists P2; split; right; split; discriminate).
try (exists P1; split; right; split; discriminate).
exists P0.
split.
right.
split.

*****
H1 : not (eq P1 P3)
H0 : not (eq P2 P3)
H : not (eq P1 P2)
*****
not (eq P1 P0)
+++++
discriminate.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.
try tauto.
try (exists P3; split; right; split; discriminate).
try (exists P2; split; right; split; discriminate).
try (exists P1; split; right; split; discriminate).
exists P0.
split.
right.
split.

*****
H1 : not (eq P1 P3)
H0 : not (eq P2 P3)
H : not (eq P1 P2)
*****
not (eq P2 P0)
+++++
discriminate.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.
try tauto.
try (exists P3; split; right; split; discriminate).
try (exists P2; split; right; split; discriminate).
try (exists P1; split; right; split; discriminate).
exists P0.
split.

*****
H1 : not (eq P1 P3)
H0 : not (eq P2 P3)
H : not (eq P1 P2)
*****
or (and (eq P1 P0) (eq P3 P0)) (and (not (eq P1 P0)) (not (eq P3 P0)))
+++++
right.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.
try tauto.
try (exists P3; split; right; split; discriminate).
try (exists P2; split; right; split; discriminate).
try (exists P1; split; right; split; discriminate).
exists P0.
split.
right.

*****
H1 : not (eq P1 P3)
H0 : not (eq P2 P3)
H : not (eq P1 P2)
*****
and (not (eq P1 P0)) (not (eq P3 P0))
+++++
split.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.
try tauto.
try (exists P3; split; right; split; discriminate).
try (exists P2; split; right; split; discriminate).
try (exists P1; split; right; split; discriminate).
exists P0.
split.
right.
split.

*****
H1 : not (eq P1 P3)
H0 : not (eq P2 P3)
H : not (eq P1 P2)
*****
not (eq P1 P0)
+++++
discriminate.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.
try tauto.
try (exists P3; split; right; split; discriminate).
try (exists P2; split; right; split; discriminate).
try (exists P1; split; right; split; discriminate).
exists P0.
split.
right.
split.

*****
H1 : not (eq P1 P3)
H0 : not (eq P2 P3)
H : not (eq P1 P2)
*****
not (eq P3 P0)
+++++
discriminate.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.

*****
H1 : not (eq P1 C)
H0 : not (eq P3 C)
H : not (eq P1 P3)
C : Point
*****
ex (fun CC : Point => and (or (and (eq P1 CC) (eq P3 CC)) (and (not (eq P1 CC)) (not (eq P3 CC)))) (or (and (eq P1 CC) (eq C CC)) (and (not (eq P1 CC)) (not (eq C CC)))))
+++++
destruct C.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.

*****
H1 : not (eq P1 P0)
H0 : not (eq P3 P0)
H : not (eq P1 P3)
*****
ex (fun CC : Point => and (or (and (eq P1 CC) (eq P3 CC)) (and (not (eq P1 CC)) (not (eq P3 CC)))) (or (and (eq P1 CC) (eq P0 CC)) (and (not (eq P1 CC)) (not (eq P0 CC)))))
+++++
try tauto.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.
try tauto.

*****
H1 : not (eq P1 P0)
H0 : not (eq P3 P0)
H : not (eq P1 P3)
*****
ex (fun CC : Point => and (or (and (eq P1 CC) (eq P3 CC)) (and (not (eq P1 CC)) (not (eq P3 CC)))) (or (and (eq P1 CC) (eq P0 CC)) (and (not (eq P1 CC)) (not (eq P0 CC)))))
+++++
try (exists P3; split; right; split; discriminate).
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.
try tauto.
try (exists P3; split; right; split; discriminate).

*****
H1 : not (eq P1 P0)
H0 : not (eq P3 P0)
H : not (eq P1 P3)
*****
ex (fun CC : Point => and (or (and (eq P1 CC) (eq P3 CC)) (and (not (eq P1 CC)) (not (eq P3 CC)))) (or (and (eq P1 CC) (eq P0 CC)) (and (not (eq P1 CC)) (not (eq P0 CC)))))
+++++
try (exists P2; split; right; split; discriminate).
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.

*****
H1 : not (eq P1 P1)
H0 : not (eq P3 P1)
H : not (eq P1 P3)
*****
ex (fun CC : Point => and (or (and (eq P1 CC) (eq P3 CC)) (and (not (eq P1 CC)) (not (eq P3 CC)))) (or (and (eq P1 CC) (eq P1 CC)) (and (not (eq P1 CC)) (not (eq P1 CC)))))
+++++
try tauto.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.

*****
H1 : not (eq P1 P2)
H0 : not (eq P3 P2)
H : not (eq P1 P3)
*****
ex (fun CC : Point => and (or (and (eq P1 CC) (eq P3 CC)) (and (not (eq P1 CC)) (not (eq P3 CC)))) (or (and (eq P1 CC) (eq P2 CC)) (and (not (eq P1 CC)) (not (eq P2 CC)))))
+++++
try tauto.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.
try tauto.

*****
H1 : not (eq P1 P2)
H0 : not (eq P3 P2)
H : not (eq P1 P3)
*****
ex (fun CC : Point => and (or (and (eq P1 CC) (eq P3 CC)) (and (not (eq P1 CC)) (not (eq P3 CC)))) (or (and (eq P1 CC) (eq P2 CC)) (and (not (eq P1 CC)) (not (eq P2 CC)))))
+++++
try (exists P3; split; right; split; discriminate).
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.
try tauto.
try (exists P3; split; right; split; discriminate).

*****
H1 : not (eq P1 P2)
H0 : not (eq P3 P2)
H : not (eq P1 P3)
*****
ex (fun CC : Point => and (or (and (eq P1 CC) (eq P3 CC)) (and (not (eq P1 CC)) (not (eq P3 CC)))) (or (and (eq P1 CC) (eq P2 CC)) (and (not (eq P1 CC)) (not (eq P2 CC)))))
+++++
try (exists P2; split; right; split; discriminate).
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.
try tauto.
try (exists P3; split; right; split; discriminate).
try (exists P2; split; right; split; discriminate).

*****
H1 : not (eq P1 P2)
H0 : not (eq P3 P2)
H : not (eq P1 P3)
*****
ex (fun CC : Point => and (or (and (eq P1 CC) (eq P3 CC)) (and (not (eq P1 CC)) (not (eq P3 CC)))) (or (and (eq P1 CC) (eq P2 CC)) (and (not (eq P1 CC)) (not (eq P2 CC)))))
+++++
try (exists P1; split; right; split; discriminate).
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.
try tauto.
try (exists P3; split; right; split; discriminate).
try (exists P2; split; right; split; discriminate).
try (exists P1; split; right; split; discriminate).

*****
H1 : not (eq P1 P2)
H0 : not (eq P3 P2)
H : not (eq P1 P3)
*****
ex (fun CC : Point => and (or (and (eq P1 CC) (eq P3 CC)) (and (not (eq P1 CC)) (not (eq P3 CC)))) (or (and (eq P1 CC) (eq P2 CC)) (and (not (eq P1 CC)) (not (eq P2 CC)))))
+++++
exists P0.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.
try tauto.
try (exists P3; split; right; split; discriminate).
try (exists P2; split; right; split; discriminate).
try (exists P1; split; right; split; discriminate).
exists P0.

*****
H1 : not (eq P1 P2)
H0 : not (eq P3 P2)
H : not (eq P1 P3)
*****
and (or (and (eq P1 P0) (eq P3 P0)) (and (not (eq P1 P0)) (not (eq P3 P0)))) (or (and (eq P1 P0) (eq P2 P0)) (and (not (eq P1 P0)) (not (eq P2 P0))))
+++++
split.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.
try tauto.
try (exists P3; split; right; split; discriminate).
try (exists P2; split; right; split; discriminate).
try (exists P1; split; right; split; discriminate).
exists P0.
split.

*****
H1 : not (eq P1 P2)
H0 : not (eq P3 P2)
H : not (eq P1 P3)
*****
or (and (eq P1 P0) (eq P3 P0)) (and (not (eq P1 P0)) (not (eq P3 P0)))
+++++
right.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.
try tauto.
try (exists P3; split; right; split; discriminate).
try (exists P2; split; right; split; discriminate).
try (exists P1; split; right; split; discriminate).
exists P0.
split.
right.

*****
H1 : not (eq P1 P2)
H0 : not (eq P3 P2)
H : not (eq P1 P3)
*****
and (not (eq P1 P0)) (not (eq P3 P0))
+++++
split.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.
try tauto.
try (exists P3; split; right; split; discriminate).
try (exists P2; split; right; split; discriminate).
try (exists P1; split; right; split; discriminate).
exists P0.
split.
right.
split.

*****
H1 : not (eq P1 P2)
H0 : not (eq P3 P2)
H : not (eq P1 P3)
*****
not (eq P1 P0)
+++++
discriminate.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.
try tauto.
try (exists P3; split; right; split; discriminate).
try (exists P2; split; right; split; discriminate).
try (exists P1; split; right; split; discriminate).
exists P0.
split.
right.
split.

*****
H1 : not (eq P1 P2)
H0 : not (eq P3 P2)
H : not (eq P1 P3)
*****
not (eq P3 P0)
+++++
discriminate.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.
try tauto.
try (exists P3; split; right; split; discriminate).
try (exists P2; split; right; split; discriminate).
try (exists P1; split; right; split; discriminate).
exists P0.
split.

*****
H1 : not (eq P1 P2)
H0 : not (eq P3 P2)
H : not (eq P1 P3)
*****
or (and (eq P1 P0) (eq P2 P0)) (and (not (eq P1 P0)) (not (eq P2 P0)))
+++++
right.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.
try tauto.
try (exists P3; split; right; split; discriminate).
try (exists P2; split; right; split; discriminate).
try (exists P1; split; right; split; discriminate).
exists P0.
split.
right.

*****
H1 : not (eq P1 P2)
H0 : not (eq P3 P2)
H : not (eq P1 P3)
*****
and (not (eq P1 P0)) (not (eq P2 P0))
+++++
split.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.
try tauto.
try (exists P3; split; right; split; discriminate).
try (exists P2; split; right; split; discriminate).
try (exists P1; split; right; split; discriminate).
exists P0.
split.
right.
split.

*****
H1 : not (eq P1 P2)
H0 : not (eq P3 P2)
H : not (eq P1 P3)
*****
not (eq P1 P0)
+++++
discriminate.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.
try tauto.
try (exists P3; split; right; split; discriminate).
try (exists P2; split; right; split; discriminate).
try (exists P1; split; right; split; discriminate).
exists P0.
split.
right.
split.

*****
H1 : not (eq P1 P2)
H0 : not (eq P3 P2)
H : not (eq P1 P3)
*****
not (eq P2 P0)
+++++
discriminate.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.

*****
H1 : not (eq P1 P3)
H0 : not (eq P3 P3)
H : not (eq P1 P3)
*****
ex (fun CC : Point => and (or (and (eq P1 CC) (eq P3 CC)) (and (not (eq P1 CC)) (not (eq P3 CC)))) (or (and (eq P1 CC) (eq P3 CC)) (and (not (eq P1 CC)) (not (eq P3 CC)))))
+++++
try tauto.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.

*****
H1 : not (eq P2 C)
H0 : not (eq B C)
H : not (eq P2 B)
B,C : Point
*****
ex (fun CC : Point => and (or (and (eq P2 CC) (eq B CC)) (and (not (eq P2 CC)) (not (eq B CC)))) (or (and (eq P2 CC) (eq C CC)) (and (not (eq P2 CC)) (not (eq C CC)))))
+++++
destruct B.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.

*****
H1 : not (eq P2 C)
H0 : not (eq P0 C)
H : not (eq P2 P0)
C : Point
*****
ex (fun CC : Point => and (or (and (eq P2 CC) (eq P0 CC)) (and (not (eq P2 CC)) (not (eq P0 CC)))) (or (and (eq P2 CC) (eq C CC)) (and (not (eq P2 CC)) (not (eq C CC)))))
+++++
destruct C.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.

*****
H1 : not (eq P2 P0)
H0 : not (eq P0 P0)
H : not (eq P2 P0)
*****
ex (fun CC : Point => and (or (and (eq P2 CC) (eq P0 CC)) (and (not (eq P2 CC)) (not (eq P0 CC)))) (or (and (eq P2 CC) (eq P0 CC)) (and (not (eq P2 CC)) (not (eq P0 CC)))))
+++++
try tauto.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.

*****
H1 : not (eq P2 P1)
H0 : not (eq P0 P1)
H : not (eq P2 P0)
*****
ex (fun CC : Point => and (or (and (eq P2 CC) (eq P0 CC)) (and (not (eq P2 CC)) (not (eq P0 CC)))) (or (and (eq P2 CC) (eq P1 CC)) (and (not (eq P2 CC)) (not (eq P1 CC)))))
+++++
try tauto.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.
try tauto.

*****
H1 : not (eq P2 P1)
H0 : not (eq P0 P1)
H : not (eq P2 P0)
*****
ex (fun CC : Point => and (or (and (eq P2 CC) (eq P0 CC)) (and (not (eq P2 CC)) (not (eq P0 CC)))) (or (and (eq P2 CC) (eq P1 CC)) (and (not (eq P2 CC)) (not (eq P1 CC)))))
+++++
try (exists P3; split; right; split; discriminate).
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.

*****
H1 : not (eq P2 P2)
H0 : not (eq P0 P2)
H : not (eq P2 P0)
*****
ex (fun CC : Point => and (or (and (eq P2 CC) (eq P0 CC)) (and (not (eq P2 CC)) (not (eq P0 CC)))) (or (and (eq P2 CC) (eq P2 CC)) (and (not (eq P2 CC)) (not (eq P2 CC)))))
+++++
try tauto.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.

*****
H1 : not (eq P2 P3)
H0 : not (eq P0 P3)
H : not (eq P2 P0)
*****
ex (fun CC : Point => and (or (and (eq P2 CC) (eq P0 CC)) (and (not (eq P2 CC)) (not (eq P0 CC)))) (or (and (eq P2 CC) (eq P3 CC)) (and (not (eq P2 CC)) (not (eq P3 CC)))))
+++++
try tauto.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.
try tauto.

*****
H1 : not (eq P2 P3)
H0 : not (eq P0 P3)
H : not (eq P2 P0)
*****
ex (fun CC : Point => and (or (and (eq P2 CC) (eq P0 CC)) (and (not (eq P2 CC)) (not (eq P0 CC)))) (or (and (eq P2 CC) (eq P3 CC)) (and (not (eq P2 CC)) (not (eq P3 CC)))))
+++++
try (exists P3; split; right; split; discriminate).
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.
try tauto.
try (exists P3; split; right; split; discriminate).

*****
H1 : not (eq P2 P3)
H0 : not (eq P0 P3)
H : not (eq P2 P0)
*****
ex (fun CC : Point => and (or (and (eq P2 CC) (eq P0 CC)) (and (not (eq P2 CC)) (not (eq P0 CC)))) (or (and (eq P2 CC) (eq P3 CC)) (and (not (eq P2 CC)) (not (eq P3 CC)))))
+++++
try (exists P2; split; right; split; discriminate).
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.
try tauto.
try (exists P3; split; right; split; discriminate).
try (exists P2; split; right; split; discriminate).

*****
H1 : not (eq P2 P3)
H0 : not (eq P0 P3)
H : not (eq P2 P0)
*****
ex (fun CC : Point => and (or (and (eq P2 CC) (eq P0 CC)) (and (not (eq P2 CC)) (not (eq P0 CC)))) (or (and (eq P2 CC) (eq P3 CC)) (and (not (eq P2 CC)) (not (eq P3 CC)))))
+++++
try (exists P1; split; right; split; discriminate).
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.

*****
H1 : not (eq P2 C)
H0 : not (eq P1 C)
H : not (eq P2 P1)
C : Point
*****
ex (fun CC : Point => and (or (and (eq P2 CC) (eq P1 CC)) (and (not (eq P2 CC)) (not (eq P1 CC)))) (or (and (eq P2 CC) (eq C CC)) (and (not (eq P2 CC)) (not (eq C CC)))))
+++++
destruct C.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.

*****
H1 : not (eq P2 P0)
H0 : not (eq P1 P0)
H : not (eq P2 P1)
*****
ex (fun CC : Point => and (or (and (eq P2 CC) (eq P1 CC)) (and (not (eq P2 CC)) (not (eq P1 CC)))) (or (and (eq P2 CC) (eq P0 CC)) (and (not (eq P2 CC)) (not (eq P0 CC)))))
+++++
try tauto.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.
try tauto.

*****
H1 : not (eq P2 P0)
H0 : not (eq P1 P0)
H : not (eq P2 P1)
*****
ex (fun CC : Point => and (or (and (eq P2 CC) (eq P1 CC)) (and (not (eq P2 CC)) (not (eq P1 CC)))) (or (and (eq P2 CC) (eq P0 CC)) (and (not (eq P2 CC)) (not (eq P0 CC)))))
+++++
try (exists P3; split; right; split; discriminate).
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.

*****
H1 : not (eq P2 P1)
H0 : not (eq P1 P1)
H : not (eq P2 P1)
*****
ex (fun CC : Point => and (or (and (eq P2 CC) (eq P1 CC)) (and (not (eq P2 CC)) (not (eq P1 CC)))) (or (and (eq P2 CC) (eq P1 CC)) (and (not (eq P2 CC)) (not (eq P1 CC)))))
+++++
try tauto.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.

*****
H1 : not (eq P2 P2)
H0 : not (eq P1 P2)
H : not (eq P2 P1)
*****
ex (fun CC : Point => and (or (and (eq P2 CC) (eq P1 CC)) (and (not (eq P2 CC)) (not (eq P1 CC)))) (or (and (eq P2 CC) (eq P2 CC)) (and (not (eq P2 CC)) (not (eq P2 CC)))))
+++++
try tauto.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.

*****
H1 : not (eq P2 P3)
H0 : not (eq P1 P3)
H : not (eq P2 P1)
*****
ex (fun CC : Point => and (or (and (eq P2 CC) (eq P1 CC)) (and (not (eq P2 CC)) (not (eq P1 CC)))) (or (and (eq P2 CC) (eq P3 CC)) (and (not (eq P2 CC)) (not (eq P3 CC)))))
+++++
try tauto.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.
try tauto.

*****
H1 : not (eq P2 P3)
H0 : not (eq P1 P3)
H : not (eq P2 P1)
*****
ex (fun CC : Point => and (or (and (eq P2 CC) (eq P1 CC)) (and (not (eq P2 CC)) (not (eq P1 CC)))) (or (and (eq P2 CC) (eq P3 CC)) (and (not (eq P2 CC)) (not (eq P3 CC)))))
+++++
try (exists P3; split; right; split; discriminate).
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.
try tauto.
try (exists P3; split; right; split; discriminate).

*****
H1 : not (eq P2 P3)
H0 : not (eq P1 P3)
H : not (eq P2 P1)
*****
ex (fun CC : Point => and (or (and (eq P2 CC) (eq P1 CC)) (and (not (eq P2 CC)) (not (eq P1 CC)))) (or (and (eq P2 CC) (eq P3 CC)) (and (not (eq P2 CC)) (not (eq P3 CC)))))
+++++
try (exists P2; split; right; split; discriminate).
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.
try tauto.
try (exists P3; split; right; split; discriminate).
try (exists P2; split; right; split; discriminate).

*****
H1 : not (eq P2 P3)
H0 : not (eq P1 P3)
H : not (eq P2 P1)
*****
ex (fun CC : Point => and (or (and (eq P2 CC) (eq P1 CC)) (and (not (eq P2 CC)) (not (eq P1 CC)))) (or (and (eq P2 CC) (eq P3 CC)) (and (not (eq P2 CC)) (not (eq P3 CC)))))
+++++
try (exists P1; split; right; split; discriminate).
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.
try tauto.
try (exists P3; split; right; split; discriminate).
try (exists P2; split; right; split; discriminate).
try (exists P1; split; right; split; discriminate).

*****
H1 : not (eq P2 P3)
H0 : not (eq P1 P3)
H : not (eq P2 P1)
*****
ex (fun CC : Point => and (or (and (eq P2 CC) (eq P1 CC)) (and (not (eq P2 CC)) (not (eq P1 CC)))) (or (and (eq P2 CC) (eq P3 CC)) (and (not (eq P2 CC)) (not (eq P3 CC)))))
+++++
exists P0.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.
try tauto.
try (exists P3; split; right; split; discriminate).
try (exists P2; split; right; split; discriminate).
try (exists P1; split; right; split; discriminate).
exists P0.

*****
H1 : not (eq P2 P3)
H0 : not (eq P1 P3)
H : not (eq P2 P1)
*****
and (or (and (eq P2 P0) (eq P1 P0)) (and (not (eq P2 P0)) (not (eq P1 P0)))) (or (and (eq P2 P0) (eq P3 P0)) (and (not (eq P2 P0)) (not (eq P3 P0))))
+++++
split.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.
try tauto.
try (exists P3; split; right; split; discriminate).
try (exists P2; split; right; split; discriminate).
try (exists P1; split; right; split; discriminate).
exists P0.
split.

*****
H1 : not (eq P2 P3)
H0 : not (eq P1 P3)
H : not (eq P2 P1)
*****
or (and (eq P2 P0) (eq P1 P0)) (and (not (eq P2 P0)) (not (eq P1 P0)))
+++++
right.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.
try tauto.
try (exists P3; split; right; split; discriminate).
try (exists P2; split; right; split; discriminate).
try (exists P1; split; right; split; discriminate).
exists P0.
split.
right.

*****
H1 : not (eq P2 P3)
H0 : not (eq P1 P3)
H : not (eq P2 P1)
*****
and (not (eq P2 P0)) (not (eq P1 P0))
+++++
split.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.
try tauto.
try (exists P3; split; right; split; discriminate).
try (exists P2; split; right; split; discriminate).
try (exists P1; split; right; split; discriminate).
exists P0.
split.
right.
split.

*****
H1 : not (eq P2 P3)
H0 : not (eq P1 P3)
H : not (eq P2 P1)
*****
not (eq P2 P0)
+++++
discriminate.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.
try tauto.
try (exists P3; split; right; split; discriminate).
try (exists P2; split; right; split; discriminate).
try (exists P1; split; right; split; discriminate).
exists P0.
split.
right.
split.

*****
H1 : not (eq P2 P3)
H0 : not (eq P1 P3)
H : not (eq P2 P1)
*****
not (eq P1 P0)
+++++
discriminate.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.
try tauto.
try (exists P3; split; right; split; discriminate).
try (exists P2; split; right; split; discriminate).
try (exists P1; split; right; split; discriminate).
exists P0.
split.

*****
H1 : not (eq P2 P3)
H0 : not (eq P1 P3)
H : not (eq P2 P1)
*****
or (and (eq P2 P0) (eq P3 P0)) (and (not (eq P2 P0)) (not (eq P3 P0)))
+++++
right.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.
try tauto.
try (exists P3; split; right; split; discriminate).
try (exists P2; split; right; split; discriminate).
try (exists P1; split; right; split; discriminate).
exists P0.
split.
right.

*****
H1 : not (eq P2 P3)
H0 : not (eq P1 P3)
H : not (eq P2 P1)
*****
and (not (eq P2 P0)) (not (eq P3 P0))
+++++
split.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.
try tauto.
try (exists P3; split; right; split; discriminate).
try (exists P2; split; right; split; discriminate).
try (exists P1; split; right; split; discriminate).
exists P0.
split.
right.
split.

*****
H1 : not (eq P2 P3)
H0 : not (eq P1 P3)
H : not (eq P2 P1)
*****
not (eq P2 P0)
+++++
discriminate.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.
try tauto.
try (exists P3; split; right; split; discriminate).
try (exists P2; split; right; split; discriminate).
try (exists P1; split; right; split; discriminate).
exists P0.
split.
right.
split.

*****
H1 : not (eq P2 P3)
H0 : not (eq P1 P3)
H : not (eq P2 P1)
*****
not (eq P3 P0)
+++++
discriminate.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.

*****
H0,H1 : not (eq P2 C)
H : not (eq P2 P2)
C : Point
*****
ex (fun CC : Point => and (or (and (eq P2 CC) (eq P2 CC)) (and (not (eq P2 CC)) (not (eq P2 CC)))) (or (and (eq P2 CC) (eq C CC)) (and (not (eq P2 CC)) (not (eq C CC)))))
+++++
destruct C.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.

*****
H0,H1 : not (eq P2 P0)
H : not (eq P2 P2)
*****
ex (fun CC : Point => and (or (and (eq P2 CC) (eq P2 CC)) (and (not (eq P2 CC)) (not (eq P2 CC)))) (or (and (eq P2 CC) (eq P0 CC)) (and (not (eq P2 CC)) (not (eq P0 CC)))))
+++++
try tauto.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.

*****
H0,H1 : not (eq P2 P1)
H : not (eq P2 P2)
*****
ex (fun CC : Point => and (or (and (eq P2 CC) (eq P2 CC)) (and (not (eq P2 CC)) (not (eq P2 CC)))) (or (and (eq P2 CC) (eq P1 CC)) (and (not (eq P2 CC)) (not (eq P1 CC)))))
+++++
try tauto.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.

*****
H,H0,H1 : not (eq P2 P2)
*****
ex (fun CC : Point => and (or (and (eq P2 CC) (eq P2 CC)) (and (not (eq P2 CC)) (not (eq P2 CC)))) (or (and (eq P2 CC) (eq P2 CC)) (and (not (eq P2 CC)) (not (eq P2 CC)))))
+++++
try tauto.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.

*****
H0,H1 : not (eq P2 P3)
H : not (eq P2 P2)
*****
ex (fun CC : Point => and (or (and (eq P2 CC) (eq P2 CC)) (and (not (eq P2 CC)) (not (eq P2 CC)))) (or (and (eq P2 CC) (eq P3 CC)) (and (not (eq P2 CC)) (not (eq P3 CC)))))
+++++
try tauto.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.

*****
H1 : not (eq P2 C)
H0 : not (eq P3 C)
H : not (eq P2 P3)
C : Point
*****
ex (fun CC : Point => and (or (and (eq P2 CC) (eq P3 CC)) (and (not (eq P2 CC)) (not (eq P3 CC)))) (or (and (eq P2 CC) (eq C CC)) (and (not (eq P2 CC)) (not (eq C CC)))))
+++++
destruct C.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.

*****
H1 : not (eq P2 P0)
H0 : not (eq P3 P0)
H : not (eq P2 P3)
*****
ex (fun CC : Point => and (or (and (eq P2 CC) (eq P3 CC)) (and (not (eq P2 CC)) (not (eq P3 CC)))) (or (and (eq P2 CC) (eq P0 CC)) (and (not (eq P2 CC)) (not (eq P0 CC)))))
+++++
try tauto.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.
try tauto.

*****
H1 : not (eq P2 P0)
H0 : not (eq P3 P0)
H : not (eq P2 P3)
*****
ex (fun CC : Point => and (or (and (eq P2 CC) (eq P3 CC)) (and (not (eq P2 CC)) (not (eq P3 CC)))) (or (and (eq P2 CC) (eq P0 CC)) (and (not (eq P2 CC)) (not (eq P0 CC)))))
+++++
try (exists P3; split; right; split; discriminate).
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.
try tauto.
try (exists P3; split; right; split; discriminate).

*****
H1 : not (eq P2 P0)
H0 : not (eq P3 P0)
H : not (eq P2 P3)
*****
ex (fun CC : Point => and (or (and (eq P2 CC) (eq P3 CC)) (and (not (eq P2 CC)) (not (eq P3 CC)))) (or (and (eq P2 CC) (eq P0 CC)) (and (not (eq P2 CC)) (not (eq P0 CC)))))
+++++
try (exists P2; split; right; split; discriminate).
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.
try tauto.
try (exists P3; split; right; split; discriminate).
try (exists P2; split; right; split; discriminate).

*****
H1 : not (eq P2 P0)
H0 : not (eq P3 P0)
H : not (eq P2 P3)
*****
ex (fun CC : Point => and (or (and (eq P2 CC) (eq P3 CC)) (and (not (eq P2 CC)) (not (eq P3 CC)))) (or (and (eq P2 CC) (eq P0 CC)) (and (not (eq P2 CC)) (not (eq P0 CC)))))
+++++
try (exists P1; split; right; split; discriminate).
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.

*****
H1 : not (eq P2 P1)
H0 : not (eq P3 P1)
H : not (eq P2 P3)
*****
ex (fun CC : Point => and (or (and (eq P2 CC) (eq P3 CC)) (and (not (eq P2 CC)) (not (eq P3 CC)))) (or (and (eq P2 CC) (eq P1 CC)) (and (not (eq P2 CC)) (not (eq P1 CC)))))
+++++
try tauto.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.
try tauto.

*****
H1 : not (eq P2 P1)
H0 : not (eq P3 P1)
H : not (eq P2 P3)
*****
ex (fun CC : Point => and (or (and (eq P2 CC) (eq P3 CC)) (and (not (eq P2 CC)) (not (eq P3 CC)))) (or (and (eq P2 CC) (eq P1 CC)) (and (not (eq P2 CC)) (not (eq P1 CC)))))
+++++
try (exists P3; split; right; split; discriminate).
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.
try tauto.
try (exists P3; split; right; split; discriminate).

*****
H1 : not (eq P2 P1)
H0 : not (eq P3 P1)
H : not (eq P2 P3)
*****
ex (fun CC : Point => and (or (and (eq P2 CC) (eq P3 CC)) (and (not (eq P2 CC)) (not (eq P3 CC)))) (or (and (eq P2 CC) (eq P1 CC)) (and (not (eq P2 CC)) (not (eq P1 CC)))))
+++++
try (exists P2; split; right; split; discriminate).
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.
try tauto.
try (exists P3; split; right; split; discriminate).
try (exists P2; split; right; split; discriminate).

*****
H1 : not (eq P2 P1)
H0 : not (eq P3 P1)
H : not (eq P2 P3)
*****
ex (fun CC : Point => and (or (and (eq P2 CC) (eq P3 CC)) (and (not (eq P2 CC)) (not (eq P3 CC)))) (or (and (eq P2 CC) (eq P1 CC)) (and (not (eq P2 CC)) (not (eq P1 CC)))))
+++++
try (exists P1; split; right; split; discriminate).
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.
try tauto.
try (exists P3; split; right; split; discriminate).
try (exists P2; split; right; split; discriminate).
try (exists P1; split; right; split; discriminate).

*****
H1 : not (eq P2 P1)
H0 : not (eq P3 P1)
H : not (eq P2 P3)
*****
ex (fun CC : Point => and (or (and (eq P2 CC) (eq P3 CC)) (and (not (eq P2 CC)) (not (eq P3 CC)))) (or (and (eq P2 CC) (eq P1 CC)) (and (not (eq P2 CC)) (not (eq P1 CC)))))
+++++
exists P0.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.
try tauto.
try (exists P3; split; right; split; discriminate).
try (exists P2; split; right; split; discriminate).
try (exists P1; split; right; split; discriminate).
exists P0.

*****
H1 : not (eq P2 P1)
H0 : not (eq P3 P1)
H : not (eq P2 P3)
*****
and (or (and (eq P2 P0) (eq P3 P0)) (and (not (eq P2 P0)) (not (eq P3 P0)))) (or (and (eq P2 P0) (eq P1 P0)) (and (not (eq P2 P0)) (not (eq P1 P0))))
+++++
split.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.
try tauto.
try (exists P3; split; right; split; discriminate).
try (exists P2; split; right; split; discriminate).
try (exists P1; split; right; split; discriminate).
exists P0.
split.

*****
H1 : not (eq P2 P1)
H0 : not (eq P3 P1)
H : not (eq P2 P3)
*****
or (and (eq P2 P0) (eq P3 P0)) (and (not (eq P2 P0)) (not (eq P3 P0)))
+++++
right.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.
try tauto.
try (exists P3; split; right; split; discriminate).
try (exists P2; split; right; split; discriminate).
try (exists P1; split; right; split; discriminate).
exists P0.
split.
right.

*****
H1 : not (eq P2 P1)
H0 : not (eq P3 P1)
H : not (eq P2 P3)
*****
and (not (eq P2 P0)) (not (eq P3 P0))
+++++
split.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.
try tauto.
try (exists P3; split; right; split; discriminate).
try (exists P2; split; right; split; discriminate).
try (exists P1; split; right; split; discriminate).
exists P0.
split.
right.
split.

*****
H1 : not (eq P2 P1)
H0 : not (eq P3 P1)
H : not (eq P2 P3)
*****
not (eq P2 P0)
+++++
discriminate.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.
try tauto.
try (exists P3; split; right; split; discriminate).
try (exists P2; split; right; split; discriminate).
try (exists P1; split; right; split; discriminate).
exists P0.
split.
right.
split.

*****
H1 : not (eq P2 P1)
H0 : not (eq P3 P1)
H : not (eq P2 P3)
*****
not (eq P3 P0)
+++++
discriminate.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.
try tauto.
try (exists P3; split; right; split; discriminate).
try (exists P2; split; right; split; discriminate).
try (exists P1; split; right; split; discriminate).
exists P0.
split.

*****
H1 : not (eq P2 P1)
H0 : not (eq P3 P1)
H : not (eq P2 P3)
*****
or (and (eq P2 P0) (eq P1 P0)) (and (not (eq P2 P0)) (not (eq P1 P0)))
+++++
right.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.
try tauto.
try (exists P3; split; right; split; discriminate).
try (exists P2; split; right; split; discriminate).
try (exists P1; split; right; split; discriminate).
exists P0.
split.
right.

*****
H1 : not (eq P2 P1)
H0 : not (eq P3 P1)
H : not (eq P2 P3)
*****
and (not (eq P2 P0)) (not (eq P1 P0))
+++++
split.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.
try tauto.
try (exists P3; split; right; split; discriminate).
try (exists P2; split; right; split; discriminate).
try (exists P1; split; right; split; discriminate).
exists P0.
split.
right.
split.

*****
H1 : not (eq P2 P1)
H0 : not (eq P3 P1)
H : not (eq P2 P3)
*****
not (eq P2 P0)
+++++
discriminate.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.
try tauto.
try (exists P3; split; right; split; discriminate).
try (exists P2; split; right; split; discriminate).
try (exists P1; split; right; split; discriminate).
exists P0.
split.
right.
split.

*****
H1 : not (eq P2 P1)
H0 : not (eq P3 P1)
H : not (eq P2 P3)
*****
not (eq P1 P0)
+++++
discriminate.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.

*****
H1 : not (eq P2 P2)
H0 : not (eq P3 P2)
H : not (eq P2 P3)
*****
ex (fun CC : Point => and (or (and (eq P2 CC) (eq P3 CC)) (and (not (eq P2 CC)) (not (eq P3 CC)))) (or (and (eq P2 CC) (eq P2 CC)) (and (not (eq P2 CC)) (not (eq P2 CC)))))
+++++
try tauto.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.

*****
H1 : not (eq P2 P3)
H0 : not (eq P3 P3)
H : not (eq P2 P3)
*****
ex (fun CC : Point => and (or (and (eq P2 CC) (eq P3 CC)) (and (not (eq P2 CC)) (not (eq P3 CC)))) (or (and (eq P2 CC) (eq P3 CC)) (and (not (eq P2 CC)) (not (eq P3 CC)))))
+++++
try tauto.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.

*****
H1 : not (eq P3 C)
H0 : not (eq B C)
H : not (eq P3 B)
B,C : Point
*****
ex (fun CC : Point => and (or (and (eq P3 CC) (eq B CC)) (and (not (eq P3 CC)) (not (eq B CC)))) (or (and (eq P3 CC) (eq C CC)) (and (not (eq P3 CC)) (not (eq C CC)))))
+++++
destruct B.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.

*****
H1 : not (eq P3 C)
H0 : not (eq P0 C)
H : not (eq P3 P0)
C : Point
*****
ex (fun CC : Point => and (or (and (eq P3 CC) (eq P0 CC)) (and (not (eq P3 CC)) (not (eq P0 CC)))) (or (and (eq P3 CC) (eq C CC)) (and (not (eq P3 CC)) (not (eq C CC)))))
+++++
destruct C.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.

*****
H1 : not (eq P3 P0)
H0 : not (eq P0 P0)
H : not (eq P3 P0)
*****
ex (fun CC : Point => and (or (and (eq P3 CC) (eq P0 CC)) (and (not (eq P3 CC)) (not (eq P0 CC)))) (or (and (eq P3 CC) (eq P0 CC)) (and (not (eq P3 CC)) (not (eq P0 CC)))))
+++++
try tauto.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.

*****
H1 : not (eq P3 P1)
H0 : not (eq P0 P1)
H : not (eq P3 P0)
*****
ex (fun CC : Point => and (or (and (eq P3 CC) (eq P0 CC)) (and (not (eq P3 CC)) (not (eq P0 CC)))) (or (and (eq P3 CC) (eq P1 CC)) (and (not (eq P3 CC)) (not (eq P1 CC)))))
+++++
try tauto.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.
try tauto.

*****
H1 : not (eq P3 P1)
H0 : not (eq P0 P1)
H : not (eq P3 P0)
*****
ex (fun CC : Point => and (or (and (eq P3 CC) (eq P0 CC)) (and (not (eq P3 CC)) (not (eq P0 CC)))) (or (and (eq P3 CC) (eq P1 CC)) (and (not (eq P3 CC)) (not (eq P1 CC)))))
+++++
try (exists P3; split; right; split; discriminate).
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.
try tauto.
try (exists P3; split; right; split; discriminate).

*****
H1 : not (eq P3 P1)
H0 : not (eq P0 P1)
H : not (eq P3 P0)
*****
ex (fun CC : Point => and (or (and (eq P3 CC) (eq P0 CC)) (and (not (eq P3 CC)) (not (eq P0 CC)))) (or (and (eq P3 CC) (eq P1 CC)) (and (not (eq P3 CC)) (not (eq P1 CC)))))
+++++
try (exists P2; split; right; split; discriminate).
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.

*****
H1 : not (eq P3 P2)
H0 : not (eq P0 P2)
H : not (eq P3 P0)
*****
ex (fun CC : Point => and (or (and (eq P3 CC) (eq P0 CC)) (and (not (eq P3 CC)) (not (eq P0 CC)))) (or (and (eq P3 CC) (eq P2 CC)) (and (not (eq P3 CC)) (not (eq P2 CC)))))
+++++
try tauto.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.
try tauto.

*****
H1 : not (eq P3 P2)
H0 : not (eq P0 P2)
H : not (eq P3 P0)
*****
ex (fun CC : Point => and (or (and (eq P3 CC) (eq P0 CC)) (and (not (eq P3 CC)) (not (eq P0 CC)))) (or (and (eq P3 CC) (eq P2 CC)) (and (not (eq P3 CC)) (not (eq P2 CC)))))
+++++
try (exists P3; split; right; split; discriminate).
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.
try tauto.
try (exists P3; split; right; split; discriminate).

*****
H1 : not (eq P3 P2)
H0 : not (eq P0 P2)
H : not (eq P3 P0)
*****
ex (fun CC : Point => and (or (and (eq P3 CC) (eq P0 CC)) (and (not (eq P3 CC)) (not (eq P0 CC)))) (or (and (eq P3 CC) (eq P2 CC)) (and (not (eq P3 CC)) (not (eq P2 CC)))))
+++++
try (exists P2; split; right; split; discriminate).
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.
try tauto.
try (exists P3; split; right; split; discriminate).
try (exists P2; split; right; split; discriminate).

*****
H1 : not (eq P3 P2)
H0 : not (eq P0 P2)
H : not (eq P3 P0)
*****
ex (fun CC : Point => and (or (and (eq P3 CC) (eq P0 CC)) (and (not (eq P3 CC)) (not (eq P0 CC)))) (or (and (eq P3 CC) (eq P2 CC)) (and (not (eq P3 CC)) (not (eq P2 CC)))))
+++++
try (exists P1; split; right; split; discriminate).
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.

*****
H1 : not (eq P3 P3)
H0 : not (eq P0 P3)
H : not (eq P3 P0)
*****
ex (fun CC : Point => and (or (and (eq P3 CC) (eq P0 CC)) (and (not (eq P3 CC)) (not (eq P0 CC)))) (or (and (eq P3 CC) (eq P3 CC)) (and (not (eq P3 CC)) (not (eq P3 CC)))))
+++++
try tauto.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.

*****
H1 : not (eq P3 C)
H0 : not (eq P1 C)
H : not (eq P3 P1)
C : Point
*****
ex (fun CC : Point => and (or (and (eq P3 CC) (eq P1 CC)) (and (not (eq P3 CC)) (not (eq P1 CC)))) (or (and (eq P3 CC) (eq C CC)) (and (not (eq P3 CC)) (not (eq C CC)))))
+++++
destruct C.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.

*****
H1 : not (eq P3 P0)
H0 : not (eq P1 P0)
H : not (eq P3 P1)
*****
ex (fun CC : Point => and (or (and (eq P3 CC) (eq P1 CC)) (and (not (eq P3 CC)) (not (eq P1 CC)))) (or (and (eq P3 CC) (eq P0 CC)) (and (not (eq P3 CC)) (not (eq P0 CC)))))
+++++
try tauto.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.
try tauto.

*****
H1 : not (eq P3 P0)
H0 : not (eq P1 P0)
H : not (eq P3 P1)
*****
ex (fun CC : Point => and (or (and (eq P3 CC) (eq P1 CC)) (and (not (eq P3 CC)) (not (eq P1 CC)))) (or (and (eq P3 CC) (eq P0 CC)) (and (not (eq P3 CC)) (not (eq P0 CC)))))
+++++
try (exists P3; split; right; split; discriminate).
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.
try tauto.
try (exists P3; split; right; split; discriminate).

*****
H1 : not (eq P3 P0)
H0 : not (eq P1 P0)
H : not (eq P3 P1)
*****
ex (fun CC : Point => and (or (and (eq P3 CC) (eq P1 CC)) (and (not (eq P3 CC)) (not (eq P1 CC)))) (or (and (eq P3 CC) (eq P0 CC)) (and (not (eq P3 CC)) (not (eq P0 CC)))))
+++++
try (exists P2; split; right; split; discriminate).
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.

*****
H1 : not (eq P3 P1)
H0 : not (eq P1 P1)
H : not (eq P3 P1)
*****
ex (fun CC : Point => and (or (and (eq P3 CC) (eq P1 CC)) (and (not (eq P3 CC)) (not (eq P1 CC)))) (or (and (eq P3 CC) (eq P1 CC)) (and (not (eq P3 CC)) (not (eq P1 CC)))))
+++++
try tauto.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.

*****
H1 : not (eq P3 P2)
H0 : not (eq P1 P2)
H : not (eq P3 P1)
*****
ex (fun CC : Point => and (or (and (eq P3 CC) (eq P1 CC)) (and (not (eq P3 CC)) (not (eq P1 CC)))) (or (and (eq P3 CC) (eq P2 CC)) (and (not (eq P3 CC)) (not (eq P2 CC)))))
+++++
try tauto.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.
try tauto.

*****
H1 : not (eq P3 P2)
H0 : not (eq P1 P2)
H : not (eq P3 P1)
*****
ex (fun CC : Point => and (or (and (eq P3 CC) (eq P1 CC)) (and (not (eq P3 CC)) (not (eq P1 CC)))) (or (and (eq P3 CC) (eq P2 CC)) (and (not (eq P3 CC)) (not (eq P2 CC)))))
+++++
try (exists P3; split; right; split; discriminate).
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.
try tauto.
try (exists P3; split; right; split; discriminate).

*****
H1 : not (eq P3 P2)
H0 : not (eq P1 P2)
H : not (eq P3 P1)
*****
ex (fun CC : Point => and (or (and (eq P3 CC) (eq P1 CC)) (and (not (eq P3 CC)) (not (eq P1 CC)))) (or (and (eq P3 CC) (eq P2 CC)) (and (not (eq P3 CC)) (not (eq P2 CC)))))
+++++
try (exists P2; split; right; split; discriminate).
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.
try tauto.
try (exists P3; split; right; split; discriminate).
try (exists P2; split; right; split; discriminate).

*****
H1 : not (eq P3 P2)
H0 : not (eq P1 P2)
H : not (eq P3 P1)
*****
ex (fun CC : Point => and (or (and (eq P3 CC) (eq P1 CC)) (and (not (eq P3 CC)) (not (eq P1 CC)))) (or (and (eq P3 CC) (eq P2 CC)) (and (not (eq P3 CC)) (not (eq P2 CC)))))
+++++
try (exists P1; split; right; split; discriminate).
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.
try tauto.
try (exists P3; split; right; split; discriminate).
try (exists P2; split; right; split; discriminate).
try (exists P1; split; right; split; discriminate).

*****
H1 : not (eq P3 P2)
H0 : not (eq P1 P2)
H : not (eq P3 P1)
*****
ex (fun CC : Point => and (or (and (eq P3 CC) (eq P1 CC)) (and (not (eq P3 CC)) (not (eq P1 CC)))) (or (and (eq P3 CC) (eq P2 CC)) (and (not (eq P3 CC)) (not (eq P2 CC)))))
+++++
exists P0.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.
try tauto.
try (exists P3; split; right; split; discriminate).
try (exists P2; split; right; split; discriminate).
try (exists P1; split; right; split; discriminate).
exists P0.

*****
H1 : not (eq P3 P2)
H0 : not (eq P1 P2)
H : not (eq P3 P1)
*****
and (or (and (eq P3 P0) (eq P1 P0)) (and (not (eq P3 P0)) (not (eq P1 P0)))) (or (and (eq P3 P0) (eq P2 P0)) (and (not (eq P3 P0)) (not (eq P2 P0))))
+++++
split.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.
try tauto.
try (exists P3; split; right; split; discriminate).
try (exists P2; split; right; split; discriminate).
try (exists P1; split; right; split; discriminate).
exists P0.
split.

*****
H1 : not (eq P3 P2)
H0 : not (eq P1 P2)
H : not (eq P3 P1)
*****
or (and (eq P3 P0) (eq P1 P0)) (and (not (eq P3 P0)) (not (eq P1 P0)))
+++++
right.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.
try tauto.
try (exists P3; split; right; split; discriminate).
try (exists P2; split; right; split; discriminate).
try (exists P1; split; right; split; discriminate).
exists P0.
split.
right.

*****
H1 : not (eq P3 P2)
H0 : not (eq P1 P2)
H : not (eq P3 P1)
*****
and (not (eq P3 P0)) (not (eq P1 P0))
+++++
split.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.
try tauto.
try (exists P3; split; right; split; discriminate).
try (exists P2; split; right; split; discriminate).
try (exists P1; split; right; split; discriminate).
exists P0.
split.
right.
split.

*****
H1 : not (eq P3 P2)
H0 : not (eq P1 P2)
H : not (eq P3 P1)
*****
not (eq P3 P0)
+++++
discriminate.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.
try tauto.
try (exists P3; split; right; split; discriminate).
try (exists P2; split; right; split; discriminate).
try (exists P1; split; right; split; discriminate).
exists P0.
split.
right.
split.

*****
H1 : not (eq P3 P2)
H0 : not (eq P1 P2)
H : not (eq P3 P1)
*****
not (eq P1 P0)
+++++
discriminate.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.
try tauto.
try (exists P3; split; right; split; discriminate).
try (exists P2; split; right; split; discriminate).
try (exists P1; split; right; split; discriminate).
exists P0.
split.

*****
H1 : not (eq P3 P2)
H0 : not (eq P1 P2)
H : not (eq P3 P1)
*****
or (and (eq P3 P0) (eq P2 P0)) (and (not (eq P3 P0)) (not (eq P2 P0)))
+++++
right.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.
try tauto.
try (exists P3; split; right; split; discriminate).
try (exists P2; split; right; split; discriminate).
try (exists P1; split; right; split; discriminate).
exists P0.
split.
right.

*****
H1 : not (eq P3 P2)
H0 : not (eq P1 P2)
H : not (eq P3 P1)
*****
and (not (eq P3 P0)) (not (eq P2 P0))
+++++
split.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.
try tauto.
try (exists P3; split; right; split; discriminate).
try (exists P2; split; right; split; discriminate).
try (exists P1; split; right; split; discriminate).
exists P0.
split.
right.
split.

*****
H1 : not (eq P3 P2)
H0 : not (eq P1 P2)
H : not (eq P3 P1)
*****
not (eq P3 P0)
+++++
discriminate.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.
try tauto.
try (exists P3; split; right; split; discriminate).
try (exists P2; split; right; split; discriminate).
try (exists P1; split; right; split; discriminate).
exists P0.
split.
right.
split.

*****
H1 : not (eq P3 P2)
H0 : not (eq P1 P2)
H : not (eq P3 P1)
*****
not (eq P2 P0)
+++++
discriminate.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.

*****
H1 : not (eq P3 P3)
H0 : not (eq P1 P3)
H : not (eq P3 P1)
*****
ex (fun CC : Point => and (or (and (eq P3 CC) (eq P1 CC)) (and (not (eq P3 CC)) (not (eq P1 CC)))) (or (and (eq P3 CC) (eq P3 CC)) (and (not (eq P3 CC)) (not (eq P3 CC)))))
+++++
try tauto.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.

*****
H1 : not (eq P3 C)
H0 : not (eq P2 C)
H : not (eq P3 P2)
C : Point
*****
ex (fun CC : Point => and (or (and (eq P3 CC) (eq P2 CC)) (and (not (eq P3 CC)) (not (eq P2 CC)))) (or (and (eq P3 CC) (eq C CC)) (and (not (eq P3 CC)) (not (eq C CC)))))
+++++
destruct C.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.

*****
H1 : not (eq P3 P0)
H0 : not (eq P2 P0)
H : not (eq P3 P2)
*****
ex (fun CC : Point => and (or (and (eq P3 CC) (eq P2 CC)) (and (not (eq P3 CC)) (not (eq P2 CC)))) (or (and (eq P3 CC) (eq P0 CC)) (and (not (eq P3 CC)) (not (eq P0 CC)))))
+++++
try tauto.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.
try tauto.

*****
H1 : not (eq P3 P0)
H0 : not (eq P2 P0)
H : not (eq P3 P2)
*****
ex (fun CC : Point => and (or (and (eq P3 CC) (eq P2 CC)) (and (not (eq P3 CC)) (not (eq P2 CC)))) (or (and (eq P3 CC) (eq P0 CC)) (and (not (eq P3 CC)) (not (eq P0 CC)))))
+++++
try (exists P3; split; right; split; discriminate).
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.
try tauto.
try (exists P3; split; right; split; discriminate).

*****
H1 : not (eq P3 P0)
H0 : not (eq P2 P0)
H : not (eq P3 P2)
*****
ex (fun CC : Point => and (or (and (eq P3 CC) (eq P2 CC)) (and (not (eq P3 CC)) (not (eq P2 CC)))) (or (and (eq P3 CC) (eq P0 CC)) (and (not (eq P3 CC)) (not (eq P0 CC)))))
+++++
try (exists P2; split; right; split; discriminate).
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.
try tauto.
try (exists P3; split; right; split; discriminate).
try (exists P2; split; right; split; discriminate).

*****
H1 : not (eq P3 P0)
H0 : not (eq P2 P0)
H : not (eq P3 P2)
*****
ex (fun CC : Point => and (or (and (eq P3 CC) (eq P2 CC)) (and (not (eq P3 CC)) (not (eq P2 CC)))) (or (and (eq P3 CC) (eq P0 CC)) (and (not (eq P3 CC)) (not (eq P0 CC)))))
+++++
try (exists P1; split; right; split; discriminate).
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.

*****
H1 : not (eq P3 P1)
H0 : not (eq P2 P1)
H : not (eq P3 P2)
*****
ex (fun CC : Point => and (or (and (eq P3 CC) (eq P2 CC)) (and (not (eq P3 CC)) (not (eq P2 CC)))) (or (and (eq P3 CC) (eq P1 CC)) (and (not (eq P3 CC)) (not (eq P1 CC)))))
+++++
try tauto.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.
try tauto.

*****
H1 : not (eq P3 P1)
H0 : not (eq P2 P1)
H : not (eq P3 P2)
*****
ex (fun CC : Point => and (or (and (eq P3 CC) (eq P2 CC)) (and (not (eq P3 CC)) (not (eq P2 CC)))) (or (and (eq P3 CC) (eq P1 CC)) (and (not (eq P3 CC)) (not (eq P1 CC)))))
+++++
try (exists P3; split; right; split; discriminate).
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.
try tauto.
try (exists P3; split; right; split; discriminate).

*****
H1 : not (eq P3 P1)
H0 : not (eq P2 P1)
H : not (eq P3 P2)
*****
ex (fun CC : Point => and (or (and (eq P3 CC) (eq P2 CC)) (and (not (eq P3 CC)) (not (eq P2 CC)))) (or (and (eq P3 CC) (eq P1 CC)) (and (not (eq P3 CC)) (not (eq P1 CC)))))
+++++
try (exists P2; split; right; split; discriminate).
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.
try tauto.
try (exists P3; split; right; split; discriminate).
try (exists P2; split; right; split; discriminate).

*****
H1 : not (eq P3 P1)
H0 : not (eq P2 P1)
H : not (eq P3 P2)
*****
ex (fun CC : Point => and (or (and (eq P3 CC) (eq P2 CC)) (and (not (eq P3 CC)) (not (eq P2 CC)))) (or (and (eq P3 CC) (eq P1 CC)) (and (not (eq P3 CC)) (not (eq P1 CC)))))
+++++
try (exists P1; split; right; split; discriminate).
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.
try tauto.
try (exists P3; split; right; split; discriminate).
try (exists P2; split; right; split; discriminate).
try (exists P1; split; right; split; discriminate).

*****
H1 : not (eq P3 P1)
H0 : not (eq P2 P1)
H : not (eq P3 P2)
*****
ex (fun CC : Point => and (or (and (eq P3 CC) (eq P2 CC)) (and (not (eq P3 CC)) (not (eq P2 CC)))) (or (and (eq P3 CC) (eq P1 CC)) (and (not (eq P3 CC)) (not (eq P1 CC)))))
+++++
exists P0.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.
try tauto.
try (exists P3; split; right; split; discriminate).
try (exists P2; split; right; split; discriminate).
try (exists P1; split; right; split; discriminate).
exists P0.

*****
H1 : not (eq P3 P1)
H0 : not (eq P2 P1)
H : not (eq P3 P2)
*****
and (or (and (eq P3 P0) (eq P2 P0)) (and (not (eq P3 P0)) (not (eq P2 P0)))) (or (and (eq P3 P0) (eq P1 P0)) (and (not (eq P3 P0)) (not (eq P1 P0))))
+++++
split.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.
try tauto.
try (exists P3; split; right; split; discriminate).
try (exists P2; split; right; split; discriminate).
try (exists P1; split; right; split; discriminate).
exists P0.
split.

*****
H1 : not (eq P3 P1)
H0 : not (eq P2 P1)
H : not (eq P3 P2)
*****
or (and (eq P3 P0) (eq P2 P0)) (and (not (eq P3 P0)) (not (eq P2 P0)))
+++++
right.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.
try tauto.
try (exists P3; split; right; split; discriminate).
try (exists P2; split; right; split; discriminate).
try (exists P1; split; right; split; discriminate).
exists P0.
split.
right.

*****
H1 : not (eq P3 P1)
H0 : not (eq P2 P1)
H : not (eq P3 P2)
*****
and (not (eq P3 P0)) (not (eq P2 P0))
+++++
split.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.
try tauto.
try (exists P3; split; right; split; discriminate).
try (exists P2; split; right; split; discriminate).
try (exists P1; split; right; split; discriminate).
exists P0.
split.
right.
split.

*****
H1 : not (eq P3 P1)
H0 : not (eq P2 P1)
H : not (eq P3 P2)
*****
not (eq P3 P0)
+++++
discriminate.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.
try tauto.
try (exists P3; split; right; split; discriminate).
try (exists P2; split; right; split; discriminate).
try (exists P1; split; right; split; discriminate).
exists P0.
split.
right.
split.

*****
H1 : not (eq P3 P1)
H0 : not (eq P2 P1)
H : not (eq P3 P2)
*****
not (eq P2 P0)
+++++
discriminate.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.
try tauto.
try (exists P3; split; right; split; discriminate).
try (exists P2; split; right; split; discriminate).
try (exists P1; split; right; split; discriminate).
exists P0.
split.

*****
H1 : not (eq P3 P1)
H0 : not (eq P2 P1)
H : not (eq P3 P2)
*****
or (and (eq P3 P0) (eq P1 P0)) (and (not (eq P3 P0)) (not (eq P1 P0)))
+++++
right.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.
try tauto.
try (exists P3; split; right; split; discriminate).
try (exists P2; split; right; split; discriminate).
try (exists P1; split; right; split; discriminate).
exists P0.
split.
right.

*****
H1 : not (eq P3 P1)
H0 : not (eq P2 P1)
H : not (eq P3 P2)
*****
and (not (eq P3 P0)) (not (eq P1 P0))
+++++
split.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.
try tauto.
try (exists P3; split; right; split; discriminate).
try (exists P2; split; right; split; discriminate).
try (exists P1; split; right; split; discriminate).
exists P0.
split.
right.
split.

*****
H1 : not (eq P3 P1)
H0 : not (eq P2 P1)
H : not (eq P3 P2)
*****
not (eq P3 P0)
+++++
discriminate.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.
try tauto.
try (exists P3; split; right; split; discriminate).
try (exists P2; split; right; split; discriminate).
try (exists P1; split; right; split; discriminate).
exists P0.
split.
right.
split.

*****
H1 : not (eq P3 P1)
H0 : not (eq P2 P1)
H : not (eq P3 P2)
*****
not (eq P1 P0)
+++++
discriminate.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.

*****
H1 : not (eq P3 P2)
H0 : not (eq P2 P2)
H : not (eq P3 P2)
*****
ex (fun CC : Point => and (or (and (eq P3 CC) (eq P2 CC)) (and (not (eq P3 CC)) (not (eq P2 CC)))) (or (and (eq P3 CC) (eq P2 CC)) (and (not (eq P3 CC)) (not (eq P2 CC)))))
+++++
try tauto.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.

*****
H1 : not (eq P3 P3)
H0 : not (eq P2 P3)
H : not (eq P3 P2)
*****
ex (fun CC : Point => and (or (and (eq P3 CC) (eq P2 CC)) (and (not (eq P3 CC)) (not (eq P2 CC)))) (or (and (eq P3 CC) (eq P3 CC)) (and (not (eq P3 CC)) (not (eq P3 CC)))))
+++++
try tauto.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.

*****
H0,H1 : not (eq P3 C)
H : not (eq P3 P3)
C : Point
*****
ex (fun CC : Point => and (or (and (eq P3 CC) (eq P3 CC)) (and (not (eq P3 CC)) (not (eq P3 CC)))) (or (and (eq P3 CC) (eq C CC)) (and (not (eq P3 CC)) (not (eq C CC)))))
+++++
destruct C.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.

*****
H0,H1 : not (eq P3 P0)
H : not (eq P3 P3)
*****
ex (fun CC : Point => and (or (and (eq P3 CC) (eq P3 CC)) (and (not (eq P3 CC)) (not (eq P3 CC)))) (or (and (eq P3 CC) (eq P0 CC)) (and (not (eq P3 CC)) (not (eq P0 CC)))))
+++++
try tauto.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.

*****
H0,H1 : not (eq P3 P1)
H : not (eq P3 P3)
*****
ex (fun CC : Point => and (or (and (eq P3 CC) (eq P3 CC)) (and (not (eq P3 CC)) (not (eq P3 CC)))) (or (and (eq P3 CC) (eq P1 CC)) (and (not (eq P3 CC)) (not (eq P1 CC)))))
+++++
try tauto.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.

*****
H0,H1 : not (eq P3 P2)
H : not (eq P3 P3)
*****
ex (fun CC : Point => and (or (and (eq P3 CC) (eq P3 CC)) (and (not (eq P3 CC)) (not (eq P3 CC)))) (or (and (eq P3 CC) (eq P2 CC)) (and (not (eq P3 CC)) (not (eq P2 CC)))))
+++++
try tauto.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.
destruct B.
destruct C.

*****
H,H0,H1 : not (eq P3 P3)
*****
ex (fun CC : Point => and (or (and (eq P3 CC) (eq P3 CC)) (and (not (eq P3 CC)) (not (eq P3 CC)))) (or (and (eq P3 CC) (eq P3 CC)) (and (not (eq P3 CC)) (not (eq P3 CC)))))
+++++
try tauto.
-----
Lemma euclid : forall A B C, ~ (Bet A B C \\/ Bet B C A \\/ Bet C A B) -> exists CC, Cong A CC B CC /\\ Cong A CC C CC.
Proof.
intros.
apply not_bet_diff in H.
spliter.
unfold Cong.
destruct A.

*****

*****

+++++
Qed.
-----
End between_identity_independent.
-----
