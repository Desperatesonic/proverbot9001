Set Implicit Arguments.
-----
Set Strict Implicit.
-----
Set Asymmetric Patterns.
-----
Section checked.
-----
Context {T : Type}.
-----
Variable F : T -> Type.
-----
Inductive Checked : option T -> Type :=\n  | Success : forall {v}, F v -> Checked (Some v)\n  | Failure : Checked None.
-----
Definition succeeded (o : option T) (d : Checked o) : bool :=\n    match d with\n      | Success _ _ => true\n      | Failure => false\n    end.
-----
Definition failed (o : option T) (d : Checked o) : bool :=\n    match d with\n      | Success _ _ => false\n      | Failure => true\n    end.
-----
Definition asOption (o : option T) (d : Checked o) : option (match o with\n                                                                 | None => False\n                                                                 | Some x => F x\n                                                               end) :=\n    match d in Checked o return option match o with\n                                         | None => False\n                                         | Some x => F x\n                                       end\n    with\n      | Success _ x => Some x\n      | Failure => None\n    end.
-----
End checked.
-----
