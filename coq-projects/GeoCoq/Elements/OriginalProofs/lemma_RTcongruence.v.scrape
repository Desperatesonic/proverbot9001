Require Export GeoCoq.Elements.OriginalProofs.lemma_equalanglestransitive.
-----
Section Euclid.
-----
Context `{Ax:euclidean_neutral_ruler_compass}.
-----
Lemma lemma_RTcongruence : \n   forall A B C D E F P Q R, \n   RT A B C D E F -> CongA A B C P Q R ->\n   RT P Q R D E F.
-----
Lemma lemma_RTcongruence : forall A B C D E F P Q R, RT A B C D E F -> CongA A B C P Q R -> RT P Q R D E F.

*****
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
forall (A B C D E F P Q R : Point) (_ : RT A B C D E F) (_ : CongA A B C P Q R), RT P Q R D E F
+++++
Proof.
-----
Lemma lemma_RTcongruence : forall A B C D E F P Q R, RT A B C D E F -> CongA A B C P Q R -> RT P Q R D E F.
Proof.

*****
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
forall (A B C D E F P Q R : Point) (_ : RT A B C D E F) (_ : CongA A B C P Q R), RT P Q R D E F
+++++
intros.
-----
Lemma lemma_RTcongruence : forall A B C D E F P Q R, RT A B C D E F -> CongA A B C P Q R -> RT P Q R D E F.
Proof.
intros.

*****
H0 : CongA A B C P Q R
H : RT A B C D E F
A,B,C,D,E,F,P,Q,R : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
RT P Q R D E F
+++++
let Tf:=fresh in assert (Tf:exists a b c d e, (Supp a b c d e /\ CongA A B C a b c /\ CongA D E F d b e)) by (conclude_def RT );destruct Tf as [a[b[c[d[e]]]]];spliter.
-----
Lemma lemma_RTcongruence : forall A B C D E F P Q R, RT A B C D E F -> CongA A B C P Q R -> RT P Q R D E F.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists a b c d e, (Supp a b c d e /\\ CongA A B C a b c /\\ CongA D E F d b e)) by (conclude_def RT );destruct Tf as [a[b[c[d[e]]]]];spliter.

*****
H3 : CongA D E F d b e
H2 : CongA A B C a b c
H1 : Supp a b c d e
a,b,c,d,e : Point
H0 : CongA A B C P Q R
H : RT A B C D E F
A,B,C,D,E,F,P,Q,R : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
RT P Q R D E F
+++++
assert (CongA P Q R A B C) by (conclude lemma_equalanglessymmetric).
-----
Lemma lemma_RTcongruence : forall A B C D E F P Q R, RT A B C D E F -> CongA A B C P Q R -> RT P Q R D E F.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists a b c d e, (Supp a b c d e /\\ CongA A B C a b c /\\ CongA D E F d b e)) by (conclude_def RT );destruct Tf as [a[b[c[d[e]]]]];spliter.
assert (CongA P Q R A B C) by (conclude lemma_equalanglessymmetric).

*****
H4 : CongA P Q R A B C
H3 : CongA D E F d b e
H2 : CongA A B C a b c
H1 : Supp a b c d e
a,b,c,d,e : Point
H0 : CongA A B C P Q R
H : RT A B C D E F
A,B,C,D,E,F,P,Q,R : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
RT P Q R D E F
+++++
assert (CongA P Q R a b c) by (conclude lemma_equalanglestransitive).
-----
Lemma lemma_RTcongruence : forall A B C D E F P Q R, RT A B C D E F -> CongA A B C P Q R -> RT P Q R D E F.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists a b c d e, (Supp a b c d e /\\ CongA A B C a b c /\\ CongA D E F d b e)) by (conclude_def RT );destruct Tf as [a[b[c[d[e]]]]];spliter.
assert (CongA P Q R A B C) by (conclude lemma_equalanglessymmetric).
assert (CongA P Q R a b c) by (conclude lemma_equalanglestransitive).

*****
H5 : CongA P Q R a b c
H4 : CongA P Q R A B C
H3 : CongA D E F d b e
H2 : CongA A B C a b c
H1 : Supp a b c d e
a,b,c,d,e : Point
H0 : CongA A B C P Q R
H : RT A B C D E F
A,B,C,D,E,F,P,Q,R : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
RT P Q R D E F
+++++
assert (RT P Q R D E F) by (conclude_def RT ).
-----
Lemma lemma_RTcongruence : forall A B C D E F P Q R, RT A B C D E F -> CongA A B C P Q R -> RT P Q R D E F.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists a b c d e, (Supp a b c d e /\\ CongA A B C a b c /\\ CongA D E F d b e)) by (conclude_def RT );destruct Tf as [a[b[c[d[e]]]]];spliter.
assert (CongA P Q R A B C) by (conclude lemma_equalanglessymmetric).
assert (CongA P Q R a b c) by (conclude lemma_equalanglestransitive).
assert (RT P Q R D E F) by (conclude_def RT ).

*****
H6 : RT P Q R D E F
H5 : CongA P Q R a b c
H4 : CongA P Q R A B C
H3 : CongA D E F d b e
H2 : CongA A B C a b c
H1 : Supp a b c d e
a,b,c,d,e : Point
H0 : CongA A B C P Q R
H : RT A B C D E F
A,B,C,D,E,F,P,Q,R : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
RT P Q R D E F
+++++
close.
-----
Lemma lemma_RTcongruence : forall A B C D E F P Q R, RT A B C D E F -> CongA A B C P Q R -> RT P Q R D E F.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists a b c d e, (Supp a b c d e /\\ CongA A B C a b c /\\ CongA D E F d b e)) by (conclude_def RT );destruct Tf as [a[b[c[d[e]]]]];spliter.
assert (CongA P Q R A B C) by (conclude lemma_equalanglessymmetric).
assert (CongA P Q R a b c) by (conclude lemma_equalanglestransitive).
assert (RT P Q R D E F) by (conclude_def RT ).
close.

*****

*****

+++++
Qed.
-----
End Euclid.
-----
