Require Export GeoCoq.Elements.OriginalProofs.proposition_44.
-----
Require Export GeoCoq.Elements.OriginalProofs.lemma_RTcongruence.
-----
Require Export GeoCoq.Elements.OriginalProofs.lemma_RTsymmetric.
-----
Require Export GeoCoq.Elements.OriginalProofs.proposition_14.
-----
Section Euclid.
-----
Context `{Ax:area}.
-----
Lemma proposition_45 : \n   forall A B C D E J K N O R S, \n   nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S ->\n   exists X Z U, PG X K Z U /\ CongA X K Z J E N /\ EF X K Z U A B C D /\ Out K R Z /\ OS X S K Z.
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.

*****
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
forall (A B C D E J K N O R S : Point) (_ : nCol J E N) (_ : nCol A B D) (_ : nCol C B D) (_ : BetS A O C) (_ : BetS B O D) (_ : neq R K) (_ : nCol K R S), ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
Proof.
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.

*****
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
forall (A B C D E J K N O R S : Point) (_ : nCol J E N) (_ : nCol A B D) (_ : nCol C B D) (_ : BetS A O C) (_ : BetS B O D) (_ : neq R K) (_ : nCol K R S), ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
intros.
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.

*****
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (neq B D) by (forward_using lemma_NCdistinct).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).

*****
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.

*****
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).

*****
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (Midpoint B m D) by (conclude_def Midpoint ).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).

*****
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (neq B m) by (forward_using lemma_betweennotequal).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).

*****
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.

*****
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (Triangle A B D) by (conclude_def Triangle ).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).

*****
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (neq K P) by (forward_using lemma_betweennotequal).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).

*****
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (neq P K) by (conclude lemma_inequalitysymmetric).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).

*****
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.

*****
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).

*****
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (Midpoint P K H) by (conclude_def Midpoint ).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).

*****
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).

*****
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).

*****
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).

*****
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).

*****
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).

*****
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (Col P K H) by (conclude_def Col ).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).

*****
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (Col P K R) by (conclude_def Col ).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).

*****
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (neq P K) by (forward_using lemma_betweennotequal).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).

*****
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (Col K H R) by (conclude lemma_collinear4).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).

*****
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (Col R K H) by (forward_using lemma_collinearorder).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).

*****
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (nCol R K S) by (forward_using lemma_NCorder).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).

*****
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (eq K K) by (conclude cn_equalityreflexive).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).

*****
H33 : eq K K
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (Col R K K) by (conclude_def Col ).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (Col R K K) by (conclude_def Col ).

*****
H34 : Col R K K
H33 : eq K K
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (neq K H) by (forward_using lemma_betweennotequal).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (Col R K K) by (conclude_def Col ).
assert (neq K H) by (forward_using lemma_betweennotequal).

*****
H35 : neq K H
H34 : Col R K K
H33 : eq K K
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (neq H K) by (conclude lemma_inequalitysymmetric).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (Col R K K) by (conclude_def Col ).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (neq H K) by (conclude lemma_inequalitysymmetric).

*****
H36 : neq H K
H35 : neq K H
H34 : Col R K K
H33 : eq K K
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (nCol H K S) by (conclude lemma_NChelper).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (Col R K K) by (conclude_def Col ).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (neq H K) by (conclude lemma_inequalitysymmetric).
assert (nCol H K S) by (conclude lemma_NChelper).

*****
H37 : nCol H K S
H36 : neq H K
H35 : neq K H
H34 : Col R K K
H33 : eq K K
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (nCol S K H) by (forward_using lemma_NCorder).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (Col R K K) by (conclude_def Col ).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (neq H K) by (conclude lemma_inequalitysymmetric).
assert (nCol H K S) by (conclude lemma_NChelper).
assert (nCol S K H) by (forward_using lemma_NCorder).

*****
H38 : nCol S K H
H37 : nCol H K S
H36 : neq H K
H35 : neq K H
H34 : Col R K K
H33 : eq K K
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
let Tf:=fresh in assert (Tf:exists F G, (PG F K H G /\ EF A B m D F K H G /\ CongA H K F J E N /\ OS S F K H)) by (conclude proposition_42B);destruct Tf as [F[G]];spliter.
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (Col R K K) by (conclude_def Col ).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (neq H K) by (conclude lemma_inequalitysymmetric).
assert (nCol H K S) by (conclude lemma_NChelper).
assert (nCol S K H) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F G, (PG F K H G /\\ EF A B m D F K H G /\\ CongA H K F J E N /\\ OS S F K H)) by (conclude proposition_42B);destruct Tf as [F[G]];spliter.

*****
H42 : OS S F K H
H41 : CongA H K F J E N
H40 : EF A B m D F K H G
H39 : PG F K H G
F,G : Point
H38 : nCol S K H
H37 : nCol H K S
H36 : neq H K
H35 : neq K H
H34 : Col R K K
H33 : eq K K
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (nCol D B C) by (forward_using lemma_NCorder).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (Col R K K) by (conclude_def Col ).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (neq H K) by (conclude lemma_inequalitysymmetric).
assert (nCol H K S) by (conclude lemma_NChelper).
assert (nCol S K H) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F G, (PG F K H G /\\ EF A B m D F K H G /\\ CongA H K F J E N /\\ OS S F K H)) by (conclude proposition_42B);destruct Tf as [F[G]];spliter.
assert (nCol D B C) by (forward_using lemma_NCorder).

*****
H43 : nCol D B C
H42 : OS S F K H
H41 : CongA H K F J E N
H40 : EF A B m D F K H G
H39 : PG F K H G
F,G : Point
H38 : nCol S K H
H37 : nCol H K S
H36 : neq H K
H35 : neq K H
H34 : Col R K K
H33 : eq K K
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (Triangle D B C) by (conclude_def Triangle ).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (Col R K K) by (conclude_def Col ).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (neq H K) by (conclude lemma_inequalitysymmetric).
assert (nCol H K S) by (conclude lemma_NChelper).
assert (nCol S K H) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F G, (PG F K H G /\\ EF A B m D F K H G /\\ CongA H K F J E N /\\ OS S F K H)) by (conclude proposition_42B);destruct Tf as [F[G]];spliter.
assert (nCol D B C) by (forward_using lemma_NCorder).
assert (Triangle D B C) by (conclude_def Triangle ).

*****
H44 : Triangle D B C
H43 : nCol D B C
H42 : OS S F K H
H41 : CongA H K F J E N
H40 : EF A B m D F K H G
H39 : PG F K H G
F,G : Point
H38 : nCol S K H
H37 : nCol H K S
H36 : neq H K
H35 : neq K H
H34 : Col R K K
H33 : eq K K
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (Par F K H G) by (conclude_def PG ).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (Col R K K) by (conclude_def Col ).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (neq H K) by (conclude lemma_inequalitysymmetric).
assert (nCol H K S) by (conclude lemma_NChelper).
assert (nCol S K H) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F G, (PG F K H G /\\ EF A B m D F K H G /\\ CongA H K F J E N /\\ OS S F K H)) by (conclude proposition_42B);destruct Tf as [F[G]];spliter.
assert (nCol D B C) by (forward_using lemma_NCorder).
assert (Triangle D B C) by (conclude_def Triangle ).
assert (Par F K H G) by (conclude_def PG ).

*****
H45 : Par F K H G
H44 : Triangle D B C
H43 : nCol D B C
H42 : OS S F K H
H41 : CongA H K F J E N
H40 : EF A B m D F K H G
H39 : PG F K H G
F,G : Point
H38 : nCol S K H
H37 : nCol H K S
H36 : neq H K
H35 : neq K H
H34 : Col R K K
H33 : eq K K
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (nCol K H G) by (forward_using lemma_parallelNC).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (Col R K K) by (conclude_def Col ).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (neq H K) by (conclude lemma_inequalitysymmetric).
assert (nCol H K S) by (conclude lemma_NChelper).
assert (nCol S K H) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F G, (PG F K H G /\\ EF A B m D F K H G /\\ CongA H K F J E N /\\ OS S F K H)) by (conclude proposition_42B);destruct Tf as [F[G]];spliter.
assert (nCol D B C) by (forward_using lemma_NCorder).
assert (Triangle D B C) by (conclude_def Triangle ).
assert (Par F K H G) by (conclude_def PG ).
assert (nCol K H G) by (forward_using lemma_parallelNC).

*****
H46 : nCol K H G
H45 : Par F K H G
H44 : Triangle D B C
H43 : nCol D B C
H42 : OS S F K H
H41 : CongA H K F J E N
H40 : EF A B m D F K H G
H39 : PG F K H G
F,G : Point
H38 : nCol S K H
H37 : nCol H K S
H36 : neq H K
H35 : neq K H
H34 : Col R K K
H33 : eq K K
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (nCol H G K) by (forward_using lemma_NCorder).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (Col R K K) by (conclude_def Col ).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (neq H K) by (conclude lemma_inequalitysymmetric).
assert (nCol H K S) by (conclude lemma_NChelper).
assert (nCol S K H) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F G, (PG F K H G /\\ EF A B m D F K H G /\\ CongA H K F J E N /\\ OS S F K H)) by (conclude proposition_42B);destruct Tf as [F[G]];spliter.
assert (nCol D B C) by (forward_using lemma_NCorder).
assert (Triangle D B C) by (conclude_def Triangle ).
assert (Par F K H G) by (conclude_def PG ).
assert (nCol K H G) by (forward_using lemma_parallelNC).
assert (nCol H G K) by (forward_using lemma_NCorder).

*****
H47 : nCol H G K
H46 : nCol K H G
H45 : Par F K H G
H44 : Triangle D B C
H43 : nCol D B C
H42 : OS S F K H
H41 : CongA H K F J E N
H40 : EF A B m D F K H G
H39 : PG F K H G
F,G : Point
H38 : nCol S K H
H37 : nCol H K S
H36 : neq H K
H35 : neq K H
H34 : Col R K K
H33 : eq K K
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (nCol G H K) by (forward_using lemma_NCorder).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (Col R K K) by (conclude_def Col ).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (neq H K) by (conclude lemma_inequalitysymmetric).
assert (nCol H K S) by (conclude lemma_NChelper).
assert (nCol S K H) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F G, (PG F K H G /\\ EF A B m D F K H G /\\ CongA H K F J E N /\\ OS S F K H)) by (conclude proposition_42B);destruct Tf as [F[G]];spliter.
assert (nCol D B C) by (forward_using lemma_NCorder).
assert (Triangle D B C) by (conclude_def Triangle ).
assert (Par F K H G) by (conclude_def PG ).
assert (nCol K H G) by (forward_using lemma_parallelNC).
assert (nCol H G K) by (forward_using lemma_NCorder).
assert (nCol G H K) by (forward_using lemma_NCorder).

*****
H48 : nCol G H K
H47 : nCol H G K
H46 : nCol K H G
H45 : Par F K H G
H44 : Triangle D B C
H43 : nCol D B C
H42 : OS S F K H
H41 : CongA H K F J E N
H40 : EF A B m D F K H G
H39 : PG F K H G
F,G : Point
H38 : nCol S K H
H37 : nCol H K S
H36 : neq H K
H35 : neq K H
H34 : Col R K K
H33 : eq K K
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
let Tf:=fresh in assert (Tf:exists M L e, (PG G H M L /\ CongA G H M J E N /\ EF D B e C G H M L /\ Midpoint B e C /\ TS M G H K)) by (conclude proposition_44);destruct Tf as [M[L[e]]];spliter.
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (Col R K K) by (conclude_def Col ).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (neq H K) by (conclude lemma_inequalitysymmetric).
assert (nCol H K S) by (conclude lemma_NChelper).
assert (nCol S K H) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F G, (PG F K H G /\\ EF A B m D F K H G /\\ CongA H K F J E N /\\ OS S F K H)) by (conclude proposition_42B);destruct Tf as [F[G]];spliter.
assert (nCol D B C) by (forward_using lemma_NCorder).
assert (Triangle D B C) by (conclude_def Triangle ).
assert (Par F K H G) by (conclude_def PG ).
assert (nCol K H G) by (forward_using lemma_parallelNC).
assert (nCol H G K) by (forward_using lemma_NCorder).
assert (nCol G H K) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists M L e, (PG G H M L /\\ CongA G H M J E N /\\ EF D B e C G H M L /\\ Midpoint B e C /\\ TS M G H K)) by (conclude proposition_44);destruct Tf as [M[L[e]]];spliter.

*****
H53 : TS M G H K
H52 : Midpoint B e C
H51 : EF D B e C G H M L
H50 : CongA G H M J E N
H49 : PG G H M L
M,L,e : Point
H48 : nCol G H K
H47 : nCol H G K
H46 : nCol K H G
H45 : Par F K H G
H44 : Triangle D B C
H43 : nCol D B C
H42 : OS S F K H
H41 : CongA H K F J E N
H40 : EF A B m D F K H G
H39 : PG F K H G
F,G : Point
H38 : nCol S K H
H37 : nCol H K S
H36 : neq H K
H35 : neq K H
H34 : Col R K K
H33 : eq K K
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (BetS B e C) by (conclude_def Midpoint ).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (Col R K K) by (conclude_def Col ).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (neq H K) by (conclude lemma_inequalitysymmetric).
assert (nCol H K S) by (conclude lemma_NChelper).
assert (nCol S K H) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F G, (PG F K H G /\\ EF A B m D F K H G /\\ CongA H K F J E N /\\ OS S F K H)) by (conclude proposition_42B);destruct Tf as [F[G]];spliter.
assert (nCol D B C) by (forward_using lemma_NCorder).
assert (Triangle D B C) by (conclude_def Triangle ).
assert (Par F K H G) by (conclude_def PG ).
assert (nCol K H G) by (forward_using lemma_parallelNC).
assert (nCol H G K) by (forward_using lemma_NCorder).
assert (nCol G H K) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists M L e, (PG G H M L /\\ CongA G H M J E N /\\ EF D B e C G H M L /\\ Midpoint B e C /\\ TS M G H K)) by (conclude proposition_44);destruct Tf as [M[L[e]]];spliter.
assert (BetS B e C) by (conclude_def Midpoint ).

*****
H54 : BetS B e C
H53 : TS M G H K
H52 : Midpoint B e C
H51 : EF D B e C G H M L
H50 : CongA G H M J E N
H49 : PG G H M L
M,L,e : Point
H48 : nCol G H K
H47 : nCol H G K
H46 : nCol K H G
H45 : Par F K H G
H44 : Triangle D B C
H43 : nCol D B C
H42 : OS S F K H
H41 : CongA H K F J E N
H40 : EF A B m D F K H G
H39 : PG F K H G
F,G : Point
H38 : nCol S K H
H37 : nCol H K S
H36 : neq H K
H35 : neq K H
H34 : Col R K K
H33 : eq K K
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (CongA J E N G H M) by (conclude lemma_equalanglessymmetric).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (Col R K K) by (conclude_def Col ).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (neq H K) by (conclude lemma_inequalitysymmetric).
assert (nCol H K S) by (conclude lemma_NChelper).
assert (nCol S K H) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F G, (PG F K H G /\\ EF A B m D F K H G /\\ CongA H K F J E N /\\ OS S F K H)) by (conclude proposition_42B);destruct Tf as [F[G]];spliter.
assert (nCol D B C) by (forward_using lemma_NCorder).
assert (Triangle D B C) by (conclude_def Triangle ).
assert (Par F K H G) by (conclude_def PG ).
assert (nCol K H G) by (forward_using lemma_parallelNC).
assert (nCol H G K) by (forward_using lemma_NCorder).
assert (nCol G H K) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists M L e, (PG G H M L /\\ CongA G H M J E N /\\ EF D B e C G H M L /\\ Midpoint B e C /\\ TS M G H K)) by (conclude proposition_44);destruct Tf as [M[L[e]]];spliter.
assert (BetS B e C) by (conclude_def Midpoint ).
assert (CongA J E N G H M) by (conclude lemma_equalanglessymmetric).

*****
H55 : CongA J E N G H M
H54 : BetS B e C
H53 : TS M G H K
H52 : Midpoint B e C
H51 : EF D B e C G H M L
H50 : CongA G H M J E N
H49 : PG G H M L
M,L,e : Point
H48 : nCol G H K
H47 : nCol H G K
H46 : nCol K H G
H45 : Par F K H G
H44 : Triangle D B C
H43 : nCol D B C
H42 : OS S F K H
H41 : CongA H K F J E N
H40 : EF A B m D F K H G
H39 : PG F K H G
F,G : Point
H38 : nCol S K H
H37 : nCol H K S
H36 : neq H K
H35 : neq K H
H34 : Col R K K
H33 : eq K K
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (CongA H K F G H M) by (conclude lemma_equalanglestransitive).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (Col R K K) by (conclude_def Col ).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (neq H K) by (conclude lemma_inequalitysymmetric).
assert (nCol H K S) by (conclude lemma_NChelper).
assert (nCol S K H) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F G, (PG F K H G /\\ EF A B m D F K H G /\\ CongA H K F J E N /\\ OS S F K H)) by (conclude proposition_42B);destruct Tf as [F[G]];spliter.
assert (nCol D B C) by (forward_using lemma_NCorder).
assert (Triangle D B C) by (conclude_def Triangle ).
assert (Par F K H G) by (conclude_def PG ).
assert (nCol K H G) by (forward_using lemma_parallelNC).
assert (nCol H G K) by (forward_using lemma_NCorder).
assert (nCol G H K) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists M L e, (PG G H M L /\\ CongA G H M J E N /\\ EF D B e C G H M L /\\ Midpoint B e C /\\ TS M G H K)) by (conclude proposition_44);destruct Tf as [M[L[e]]];spliter.
assert (BetS B e C) by (conclude_def Midpoint ).
assert (CongA J E N G H M) by (conclude lemma_equalanglessymmetric).
assert (CongA H K F G H M) by (conclude lemma_equalanglestransitive).

*****
H56 : CongA H K F G H M
H55 : CongA J E N G H M
H54 : BetS B e C
H53 : TS M G H K
H52 : Midpoint B e C
H51 : EF D B e C G H M L
H50 : CongA G H M J E N
H49 : PG G H M L
M,L,e : Point
H48 : nCol G H K
H47 : nCol H G K
H46 : nCol K H G
H45 : Par F K H G
H44 : Triangle D B C
H43 : nCol D B C
H42 : OS S F K H
H41 : CongA H K F J E N
H40 : EF A B m D F K H G
H39 : PG F K H G
F,G : Point
H38 : nCol S K H
H37 : nCol H K S
H36 : neq H K
H35 : neq K H
H34 : Col R K K
H33 : eq K K
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (Par F K H G) by (conclude_def PG ).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (Col R K K) by (conclude_def Col ).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (neq H K) by (conclude lemma_inequalitysymmetric).
assert (nCol H K S) by (conclude lemma_NChelper).
assert (nCol S K H) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F G, (PG F K H G /\\ EF A B m D F K H G /\\ CongA H K F J E N /\\ OS S F K H)) by (conclude proposition_42B);destruct Tf as [F[G]];spliter.
assert (nCol D B C) by (forward_using lemma_NCorder).
assert (Triangle D B C) by (conclude_def Triangle ).
assert (Par F K H G) by (conclude_def PG ).
assert (nCol K H G) by (forward_using lemma_parallelNC).
assert (nCol H G K) by (forward_using lemma_NCorder).
assert (nCol G H K) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists M L e, (PG G H M L /\\ CongA G H M J E N /\\ EF D B e C G H M L /\\ Midpoint B e C /\\ TS M G H K)) by (conclude proposition_44);destruct Tf as [M[L[e]]];spliter.
assert (BetS B e C) by (conclude_def Midpoint ).
assert (CongA J E N G H M) by (conclude lemma_equalanglessymmetric).
assert (CongA H K F G H M) by (conclude lemma_equalanglestransitive).
assert (Par F K H G) by (conclude_def PG ).

*****
H57 : Par F K H G
H56 : CongA H K F G H M
H55 : CongA J E N G H M
H54 : BetS B e C
H53 : TS M G H K
H52 : Midpoint B e C
H51 : EF D B e C G H M L
H50 : CongA G H M J E N
H49 : PG G H M L
M,L,e : Point
H48 : nCol G H K
H47 : nCol H G K
H46 : nCol K H G
H45 : Par F K H G
H44 : Triangle D B C
H43 : nCol D B C
H42 : OS S F K H
H41 : CongA H K F J E N
H40 : EF A B m D F K H G
H39 : PG F K H G
F,G : Point
H38 : nCol S K H
H37 : nCol H K S
H36 : neq H K
H35 : neq K H
H34 : Col R K K
H33 : eq K K
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (Par K F H G) by (forward_using lemma_parallelflip).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (Col R K K) by (conclude_def Col ).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (neq H K) by (conclude lemma_inequalitysymmetric).
assert (nCol H K S) by (conclude lemma_NChelper).
assert (nCol S K H) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F G, (PG F K H G /\\ EF A B m D F K H G /\\ CongA H K F J E N /\\ OS S F K H)) by (conclude proposition_42B);destruct Tf as [F[G]];spliter.
assert (nCol D B C) by (forward_using lemma_NCorder).
assert (Triangle D B C) by (conclude_def Triangle ).
assert (Par F K H G) by (conclude_def PG ).
assert (nCol K H G) by (forward_using lemma_parallelNC).
assert (nCol H G K) by (forward_using lemma_NCorder).
assert (nCol G H K) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists M L e, (PG G H M L /\\ CongA G H M J E N /\\ EF D B e C G H M L /\\ Midpoint B e C /\\ TS M G H K)) by (conclude proposition_44);destruct Tf as [M[L[e]]];spliter.
assert (BetS B e C) by (conclude_def Midpoint ).
assert (CongA J E N G H M) by (conclude lemma_equalanglessymmetric).
assert (CongA H K F G H M) by (conclude lemma_equalanglestransitive).
assert (Par F K H G) by (conclude_def PG ).
assert (Par K F H G) by (forward_using lemma_parallelflip).

*****
H58 : Par K F H G
H57 : Par F K H G
H56 : CongA H K F G H M
H55 : CongA J E N G H M
H54 : BetS B e C
H53 : TS M G H K
H52 : Midpoint B e C
H51 : EF D B e C G H M L
H50 : CongA G H M J E N
H49 : PG G H M L
M,L,e : Point
H48 : nCol G H K
H47 : nCol H G K
H46 : nCol K H G
H45 : Par F K H G
H44 : Triangle D B C
H43 : nCol D B C
H42 : OS S F K H
H41 : CongA H K F J E N
H40 : EF A B m D F K H G
H39 : PG F K H G
F,G : Point
H38 : nCol S K H
H37 : nCol H K S
H36 : neq H K
H35 : neq K H
H34 : Col R K K
H33 : eq K K
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (neq H K) by (forward_using lemma_NCdistinct).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (Col R K K) by (conclude_def Col ).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (neq H K) by (conclude lemma_inequalitysymmetric).
assert (nCol H K S) by (conclude lemma_NChelper).
assert (nCol S K H) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F G, (PG F K H G /\\ EF A B m D F K H G /\\ CongA H K F J E N /\\ OS S F K H)) by (conclude proposition_42B);destruct Tf as [F[G]];spliter.
assert (nCol D B C) by (forward_using lemma_NCorder).
assert (Triangle D B C) by (conclude_def Triangle ).
assert (Par F K H G) by (conclude_def PG ).
assert (nCol K H G) by (forward_using lemma_parallelNC).
assert (nCol H G K) by (forward_using lemma_NCorder).
assert (nCol G H K) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists M L e, (PG G H M L /\\ CongA G H M J E N /\\ EF D B e C G H M L /\\ Midpoint B e C /\\ TS M G H K)) by (conclude proposition_44);destruct Tf as [M[L[e]]];spliter.
assert (BetS B e C) by (conclude_def Midpoint ).
assert (CongA J E N G H M) by (conclude lemma_equalanglessymmetric).
assert (CongA H K F G H M) by (conclude lemma_equalanglestransitive).
assert (Par F K H G) by (conclude_def PG ).
assert (Par K F H G) by (forward_using lemma_parallelflip).
assert (neq H K) by (forward_using lemma_NCdistinct).

*****
H59 : neq H K
H58 : Par K F H G
H57 : Par F K H G
H56 : CongA H K F G H M
H55 : CongA J E N G H M
H54 : BetS B e C
H53 : TS M G H K
H52 : Midpoint B e C
H51 : EF D B e C G H M L
H50 : CongA G H M J E N
H49 : PG G H M L
M,L,e : Point
H48 : nCol G H K
H47 : nCol H G K
H46 : nCol K H G
H45 : Par F K H G
H44 : Triangle D B C
H43 : nCol D B C
H42 : OS S F K H
H41 : CongA H K F J E N
H40 : EF A B m D F K H G
H39 : PG F K H G
F,G : Point
H38 : nCol S K H
H37 : nCol H K S
H36 : neq H K
H35 : neq K H
H34 : Col R K K
H33 : eq K K
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
let Tf:=fresh in assert (Tf:exists s, (BetS H K s /\ Cong K s H K)) by (conclude lemma_extension);destruct Tf as [s];spliter.
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (Col R K K) by (conclude_def Col ).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (neq H K) by (conclude lemma_inequalitysymmetric).
assert (nCol H K S) by (conclude lemma_NChelper).
assert (nCol S K H) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F G, (PG F K H G /\\ EF A B m D F K H G /\\ CongA H K F J E N /\\ OS S F K H)) by (conclude proposition_42B);destruct Tf as [F[G]];spliter.
assert (nCol D B C) by (forward_using lemma_NCorder).
assert (Triangle D B C) by (conclude_def Triangle ).
assert (Par F K H G) by (conclude_def PG ).
assert (nCol K H G) by (forward_using lemma_parallelNC).
assert (nCol H G K) by (forward_using lemma_NCorder).
assert (nCol G H K) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists M L e, (PG G H M L /\\ CongA G H M J E N /\\ EF D B e C G H M L /\\ Midpoint B e C /\\ TS M G H K)) by (conclude proposition_44);destruct Tf as [M[L[e]]];spliter.
assert (BetS B e C) by (conclude_def Midpoint ).
assert (CongA J E N G H M) by (conclude lemma_equalanglessymmetric).
assert (CongA H K F G H M) by (conclude lemma_equalanglestransitive).
assert (Par F K H G) by (conclude_def PG ).
assert (Par K F H G) by (forward_using lemma_parallelflip).
assert (neq H K) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists s, (BetS H K s /\\ Cong K s H K)) by (conclude lemma_extension);destruct Tf as [s];spliter.

*****
H61 : Cong K s H K
H60 : BetS H K s
s : Point
H59 : neq H K
H58 : Par K F H G
H57 : Par F K H G
H56 : CongA H K F G H M
H55 : CongA J E N G H M
H54 : BetS B e C
H53 : TS M G H K
H52 : Midpoint B e C
H51 : EF D B e C G H M L
H50 : CongA G H M J E N
H49 : PG G H M L
M,L,e : Point
H48 : nCol G H K
H47 : nCol H G K
H46 : nCol K H G
H45 : Par F K H G
H44 : Triangle D B C
H43 : nCol D B C
H42 : OS S F K H
H41 : CongA H K F J E N
H40 : EF A B m D F K H G
H39 : PG F K H G
F,G : Point
H38 : nCol S K H
H37 : nCol H K S
H36 : neq H K
H35 : neq K H
H34 : Col R K K
H33 : eq K K
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (Par F G K H) by (conclude_def PG ).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (Col R K K) by (conclude_def Col ).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (neq H K) by (conclude lemma_inequalitysymmetric).
assert (nCol H K S) by (conclude lemma_NChelper).
assert (nCol S K H) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F G, (PG F K H G /\\ EF A B m D F K H G /\\ CongA H K F J E N /\\ OS S F K H)) by (conclude proposition_42B);destruct Tf as [F[G]];spliter.
assert (nCol D B C) by (forward_using lemma_NCorder).
assert (Triangle D B C) by (conclude_def Triangle ).
assert (Par F K H G) by (conclude_def PG ).
assert (nCol K H G) by (forward_using lemma_parallelNC).
assert (nCol H G K) by (forward_using lemma_NCorder).
assert (nCol G H K) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists M L e, (PG G H M L /\\ CongA G H M J E N /\\ EF D B e C G H M L /\\ Midpoint B e C /\\ TS M G H K)) by (conclude proposition_44);destruct Tf as [M[L[e]]];spliter.
assert (BetS B e C) by (conclude_def Midpoint ).
assert (CongA J E N G H M) by (conclude lemma_equalanglessymmetric).
assert (CongA H K F G H M) by (conclude lemma_equalanglestransitive).
assert (Par F K H G) by (conclude_def PG ).
assert (Par K F H G) by (forward_using lemma_parallelflip).
assert (neq H K) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists s, (BetS H K s /\\ Cong K s H K)) by (conclude lemma_extension);destruct Tf as [s];spliter.
assert (Par F G K H) by (conclude_def PG ).

*****
H62 : Par F G K H
H61 : Cong K s H K
H60 : BetS H K s
s : Point
H59 : neq H K
H58 : Par K F H G
H57 : Par F K H G
H56 : CongA H K F G H M
H55 : CongA J E N G H M
H54 : BetS B e C
H53 : TS M G H K
H52 : Midpoint B e C
H51 : EF D B e C G H M L
H50 : CongA G H M J E N
H49 : PG G H M L
M,L,e : Point
H48 : nCol G H K
H47 : nCol H G K
H46 : nCol K H G
H45 : Par F K H G
H44 : Triangle D B C
H43 : nCol D B C
H42 : OS S F K H
H41 : CongA H K F J E N
H40 : EF A B m D F K H G
H39 : PG F K H G
F,G : Point
H38 : nCol S K H
H37 : nCol H K S
H36 : neq H K
H35 : neq K H
H34 : Col R K K
H33 : eq K K
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (Par K H F G) by (conclude lemma_parallelsymmetric).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (Col R K K) by (conclude_def Col ).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (neq H K) by (conclude lemma_inequalitysymmetric).
assert (nCol H K S) by (conclude lemma_NChelper).
assert (nCol S K H) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F G, (PG F K H G /\\ EF A B m D F K H G /\\ CongA H K F J E N /\\ OS S F K H)) by (conclude proposition_42B);destruct Tf as [F[G]];spliter.
assert (nCol D B C) by (forward_using lemma_NCorder).
assert (Triangle D B C) by (conclude_def Triangle ).
assert (Par F K H G) by (conclude_def PG ).
assert (nCol K H G) by (forward_using lemma_parallelNC).
assert (nCol H G K) by (forward_using lemma_NCorder).
assert (nCol G H K) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists M L e, (PG G H M L /\\ CongA G H M J E N /\\ EF D B e C G H M L /\\ Midpoint B e C /\\ TS M G H K)) by (conclude proposition_44);destruct Tf as [M[L[e]]];spliter.
assert (BetS B e C) by (conclude_def Midpoint ).
assert (CongA J E N G H M) by (conclude lemma_equalanglessymmetric).
assert (CongA H K F G H M) by (conclude lemma_equalanglestransitive).
assert (Par F K H G) by (conclude_def PG ).
assert (Par K F H G) by (forward_using lemma_parallelflip).
assert (neq H K) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists s, (BetS H K s /\\ Cong K s H K)) by (conclude lemma_extension);destruct Tf as [s];spliter.
assert (Par F G K H) by (conclude_def PG ).
assert (Par K H F G) by (conclude lemma_parallelsymmetric).

*****
H63 : Par K H F G
H62 : Par F G K H
H61 : Cong K s H K
H60 : BetS H K s
s : Point
H59 : neq H K
H58 : Par K F H G
H57 : Par F K H G
H56 : CongA H K F G H M
H55 : CongA J E N G H M
H54 : BetS B e C
H53 : TS M G H K
H52 : Midpoint B e C
H51 : EF D B e C G H M L
H50 : CongA G H M J E N
H49 : PG G H M L
M,L,e : Point
H48 : nCol G H K
H47 : nCol H G K
H46 : nCol K H G
H45 : Par F K H G
H44 : Triangle D B C
H43 : nCol D B C
H42 : OS S F K H
H41 : CongA H K F J E N
H40 : EF A B m D F K H G
H39 : PG F K H G
F,G : Point
H38 : nCol S K H
H37 : nCol H K S
H36 : neq H K
H35 : neq K H
H34 : Col R K K
H33 : eq K K
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (TP K H F G) by (conclude lemma_paralleldef2B).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (Col R K K) by (conclude_def Col ).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (neq H K) by (conclude lemma_inequalitysymmetric).
assert (nCol H K S) by (conclude lemma_NChelper).
assert (nCol S K H) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F G, (PG F K H G /\\ EF A B m D F K H G /\\ CongA H K F J E N /\\ OS S F K H)) by (conclude proposition_42B);destruct Tf as [F[G]];spliter.
assert (nCol D B C) by (forward_using lemma_NCorder).
assert (Triangle D B C) by (conclude_def Triangle ).
assert (Par F K H G) by (conclude_def PG ).
assert (nCol K H G) by (forward_using lemma_parallelNC).
assert (nCol H G K) by (forward_using lemma_NCorder).
assert (nCol G H K) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists M L e, (PG G H M L /\\ CongA G H M J E N /\\ EF D B e C G H M L /\\ Midpoint B e C /\\ TS M G H K)) by (conclude proposition_44);destruct Tf as [M[L[e]]];spliter.
assert (BetS B e C) by (conclude_def Midpoint ).
assert (CongA J E N G H M) by (conclude lemma_equalanglessymmetric).
assert (CongA H K F G H M) by (conclude lemma_equalanglestransitive).
assert (Par F K H G) by (conclude_def PG ).
assert (Par K F H G) by (forward_using lemma_parallelflip).
assert (neq H K) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists s, (BetS H K s /\\ Cong K s H K)) by (conclude lemma_extension);destruct Tf as [s];spliter.
assert (Par F G K H) by (conclude_def PG ).
assert (Par K H F G) by (conclude lemma_parallelsymmetric).
assert (TP K H F G) by (conclude lemma_paralleldef2B).

*****
H64 : TP K H F G
H63 : Par K H F G
H62 : Par F G K H
H61 : Cong K s H K
H60 : BetS H K s
s : Point
H59 : neq H K
H58 : Par K F H G
H57 : Par F K H G
H56 : CongA H K F G H M
H55 : CongA J E N G H M
H54 : BetS B e C
H53 : TS M G H K
H52 : Midpoint B e C
H51 : EF D B e C G H M L
H50 : CongA G H M J E N
H49 : PG G H M L
M,L,e : Point
H48 : nCol G H K
H47 : nCol H G K
H46 : nCol K H G
H45 : Par F K H G
H44 : Triangle D B C
H43 : nCol D B C
H42 : OS S F K H
H41 : CongA H K F J E N
H40 : EF A B m D F K H G
H39 : PG F K H G
F,G : Point
H38 : nCol S K H
H37 : nCol H K S
H36 : neq H K
H35 : neq K H
H34 : Col R K K
H33 : eq K K
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (OS F G K H) by (conclude_def TP ).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (Col R K K) by (conclude_def Col ).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (neq H K) by (conclude lemma_inequalitysymmetric).
assert (nCol H K S) by (conclude lemma_NChelper).
assert (nCol S K H) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F G, (PG F K H G /\\ EF A B m D F K H G /\\ CongA H K F J E N /\\ OS S F K H)) by (conclude proposition_42B);destruct Tf as [F[G]];spliter.
assert (nCol D B C) by (forward_using lemma_NCorder).
assert (Triangle D B C) by (conclude_def Triangle ).
assert (Par F K H G) by (conclude_def PG ).
assert (nCol K H G) by (forward_using lemma_parallelNC).
assert (nCol H G K) by (forward_using lemma_NCorder).
assert (nCol G H K) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists M L e, (PG G H M L /\\ CongA G H M J E N /\\ EF D B e C G H M L /\\ Midpoint B e C /\\ TS M G H K)) by (conclude proposition_44);destruct Tf as [M[L[e]]];spliter.
assert (BetS B e C) by (conclude_def Midpoint ).
assert (CongA J E N G H M) by (conclude lemma_equalanglessymmetric).
assert (CongA H K F G H M) by (conclude lemma_equalanglestransitive).
assert (Par F K H G) by (conclude_def PG ).
assert (Par K F H G) by (forward_using lemma_parallelflip).
assert (neq H K) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists s, (BetS H K s /\\ Cong K s H K)) by (conclude lemma_extension);destruct Tf as [s];spliter.
assert (Par F G K H) by (conclude_def PG ).
assert (Par K H F G) by (conclude lemma_parallelsymmetric).
assert (TP K H F G) by (conclude lemma_paralleldef2B).
assert (OS F G K H) by (conclude_def TP ).

*****
H65 : OS F G K H
H64 : TP K H F G
H63 : Par K H F G
H62 : Par F G K H
H61 : Cong K s H K
H60 : BetS H K s
s : Point
H59 : neq H K
H58 : Par K F H G
H57 : Par F K H G
H56 : CongA H K F G H M
H55 : CongA J E N G H M
H54 : BetS B e C
H53 : TS M G H K
H52 : Midpoint B e C
H51 : EF D B e C G H M L
H50 : CongA G H M J E N
H49 : PG G H M L
M,L,e : Point
H48 : nCol G H K
H47 : nCol H G K
H46 : nCol K H G
H45 : Par F K H G
H44 : Triangle D B C
H43 : nCol D B C
H42 : OS S F K H
H41 : CongA H K F J E N
H40 : EF A B m D F K H G
H39 : PG F K H G
F,G : Point
H38 : nCol S K H
H37 : nCol H K S
H36 : neq H K
H35 : neq K H
H34 : Col R K K
H33 : eq K K
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (RT F K H K H G) by (conclude proposition_29C).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (Col R K K) by (conclude_def Col ).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (neq H K) by (conclude lemma_inequalitysymmetric).
assert (nCol H K S) by (conclude lemma_NChelper).
assert (nCol S K H) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F G, (PG F K H G /\\ EF A B m D F K H G /\\ CongA H K F J E N /\\ OS S F K H)) by (conclude proposition_42B);destruct Tf as [F[G]];spliter.
assert (nCol D B C) by (forward_using lemma_NCorder).
assert (Triangle D B C) by (conclude_def Triangle ).
assert (Par F K H G) by (conclude_def PG ).
assert (nCol K H G) by (forward_using lemma_parallelNC).
assert (nCol H G K) by (forward_using lemma_NCorder).
assert (nCol G H K) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists M L e, (PG G H M L /\\ CongA G H M J E N /\\ EF D B e C G H M L /\\ Midpoint B e C /\\ TS M G H K)) by (conclude proposition_44);destruct Tf as [M[L[e]]];spliter.
assert (BetS B e C) by (conclude_def Midpoint ).
assert (CongA J E N G H M) by (conclude lemma_equalanglessymmetric).
assert (CongA H K F G H M) by (conclude lemma_equalanglestransitive).
assert (Par F K H G) by (conclude_def PG ).
assert (Par K F H G) by (forward_using lemma_parallelflip).
assert (neq H K) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists s, (BetS H K s /\\ Cong K s H K)) by (conclude lemma_extension);destruct Tf as [s];spliter.
assert (Par F G K H) by (conclude_def PG ).
assert (Par K H F G) by (conclude lemma_parallelsymmetric).
assert (TP K H F G) by (conclude lemma_paralleldef2B).
assert (OS F G K H) by (conclude_def TP ).
assert (RT F K H K H G) by (conclude proposition_29C).

*****
H66 : RT F K H K H G
H65 : OS F G K H
H64 : TP K H F G
H63 : Par K H F G
H62 : Par F G K H
H61 : Cong K s H K
H60 : BetS H K s
s : Point
H59 : neq H K
H58 : Par K F H G
H57 : Par F K H G
H56 : CongA H K F G H M
H55 : CongA J E N G H M
H54 : BetS B e C
H53 : TS M G H K
H52 : Midpoint B e C
H51 : EF D B e C G H M L
H50 : CongA G H M J E N
H49 : PG G H M L
M,L,e : Point
H48 : nCol G H K
H47 : nCol H G K
H46 : nCol K H G
H45 : Par F K H G
H44 : Triangle D B C
H43 : nCol D B C
H42 : OS S F K H
H41 : CongA H K F J E N
H40 : EF A B m D F K H G
H39 : PG F K H G
F,G : Point
H38 : nCol S K H
H37 : nCol H K S
H36 : neq H K
H35 : neq K H
H34 : Col R K K
H33 : eq K K
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (CongA G H M H K F) by (conclude lemma_equalanglessymmetric).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (Col R K K) by (conclude_def Col ).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (neq H K) by (conclude lemma_inequalitysymmetric).
assert (nCol H K S) by (conclude lemma_NChelper).
assert (nCol S K H) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F G, (PG F K H G /\\ EF A B m D F K H G /\\ CongA H K F J E N /\\ OS S F K H)) by (conclude proposition_42B);destruct Tf as [F[G]];spliter.
assert (nCol D B C) by (forward_using lemma_NCorder).
assert (Triangle D B C) by (conclude_def Triangle ).
assert (Par F K H G) by (conclude_def PG ).
assert (nCol K H G) by (forward_using lemma_parallelNC).
assert (nCol H G K) by (forward_using lemma_NCorder).
assert (nCol G H K) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists M L e, (PG G H M L /\\ CongA G H M J E N /\\ EF D B e C G H M L /\\ Midpoint B e C /\\ TS M G H K)) by (conclude proposition_44);destruct Tf as [M[L[e]]];spliter.
assert (BetS B e C) by (conclude_def Midpoint ).
assert (CongA J E N G H M) by (conclude lemma_equalanglessymmetric).
assert (CongA H K F G H M) by (conclude lemma_equalanglestransitive).
assert (Par F K H G) by (conclude_def PG ).
assert (Par K F H G) by (forward_using lemma_parallelflip).
assert (neq H K) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists s, (BetS H K s /\\ Cong K s H K)) by (conclude lemma_extension);destruct Tf as [s];spliter.
assert (Par F G K H) by (conclude_def PG ).
assert (Par K H F G) by (conclude lemma_parallelsymmetric).
assert (TP K H F G) by (conclude lemma_paralleldef2B).
assert (OS F G K H) by (conclude_def TP ).
assert (RT F K H K H G) by (conclude proposition_29C).
assert (CongA G H M H K F) by (conclude lemma_equalanglessymmetric).

*****
H67 : CongA G H M H K F
H66 : RT F K H K H G
H65 : OS F G K H
H64 : TP K H F G
H63 : Par K H F G
H62 : Par F G K H
H61 : Cong K s H K
H60 : BetS H K s
s : Point
H59 : neq H K
H58 : Par K F H G
H57 : Par F K H G
H56 : CongA H K F G H M
H55 : CongA J E N G H M
H54 : BetS B e C
H53 : TS M G H K
H52 : Midpoint B e C
H51 : EF D B e C G H M L
H50 : CongA G H M J E N
H49 : PG G H M L
M,L,e : Point
H48 : nCol G H K
H47 : nCol H G K
H46 : nCol K H G
H45 : Par F K H G
H44 : Triangle D B C
H43 : nCol D B C
H42 : OS S F K H
H41 : CongA H K F J E N
H40 : EF A B m D F K H G
H39 : PG F K H G
F,G : Point
H38 : nCol S K H
H37 : nCol H K S
H36 : neq H K
H35 : neq K H
H34 : Col R K K
H33 : eq K K
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (nCol H K F) by (conclude lemma_equalanglesNC).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (Col R K K) by (conclude_def Col ).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (neq H K) by (conclude lemma_inequalitysymmetric).
assert (nCol H K S) by (conclude lemma_NChelper).
assert (nCol S K H) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F G, (PG F K H G /\\ EF A B m D F K H G /\\ CongA H K F J E N /\\ OS S F K H)) by (conclude proposition_42B);destruct Tf as [F[G]];spliter.
assert (nCol D B C) by (forward_using lemma_NCorder).
assert (Triangle D B C) by (conclude_def Triangle ).
assert (Par F K H G) by (conclude_def PG ).
assert (nCol K H G) by (forward_using lemma_parallelNC).
assert (nCol H G K) by (forward_using lemma_NCorder).
assert (nCol G H K) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists M L e, (PG G H M L /\\ CongA G H M J E N /\\ EF D B e C G H M L /\\ Midpoint B e C /\\ TS M G H K)) by (conclude proposition_44);destruct Tf as [M[L[e]]];spliter.
assert (BetS B e C) by (conclude_def Midpoint ).
assert (CongA J E N G H M) by (conclude lemma_equalanglessymmetric).
assert (CongA H K F G H M) by (conclude lemma_equalanglestransitive).
assert (Par F K H G) by (conclude_def PG ).
assert (Par K F H G) by (forward_using lemma_parallelflip).
assert (neq H K) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists s, (BetS H K s /\\ Cong K s H K)) by (conclude lemma_extension);destruct Tf as [s];spliter.
assert (Par F G K H) by (conclude_def PG ).
assert (Par K H F G) by (conclude lemma_parallelsymmetric).
assert (TP K H F G) by (conclude lemma_paralleldef2B).
assert (OS F G K H) by (conclude_def TP ).
assert (RT F K H K H G) by (conclude proposition_29C).
assert (CongA G H M H K F) by (conclude lemma_equalanglessymmetric).
assert (nCol H K F) by (conclude lemma_equalanglesNC).

*****
H68 : nCol H K F
H67 : CongA G H M H K F
H66 : RT F K H K H G
H65 : OS F G K H
H64 : TP K H F G
H63 : Par K H F G
H62 : Par F G K H
H61 : Cong K s H K
H60 : BetS H K s
s : Point
H59 : neq H K
H58 : Par K F H G
H57 : Par F K H G
H56 : CongA H K F G H M
H55 : CongA J E N G H M
H54 : BetS B e C
H53 : TS M G H K
H52 : Midpoint B e C
H51 : EF D B e C G H M L
H50 : CongA G H M J E N
H49 : PG G H M L
M,L,e : Point
H48 : nCol G H K
H47 : nCol H G K
H46 : nCol K H G
H45 : Par F K H G
H44 : Triangle D B C
H43 : nCol D B C
H42 : OS S F K H
H41 : CongA H K F J E N
H40 : EF A B m D F K H G
H39 : PG F K H G
F,G : Point
H38 : nCol S K H
H37 : nCol H K S
H36 : neq H K
H35 : neq K H
H34 : Col R K K
H33 : eq K K
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (nCol F K H) by (forward_using lemma_NCorder).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (Col R K K) by (conclude_def Col ).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (neq H K) by (conclude lemma_inequalitysymmetric).
assert (nCol H K S) by (conclude lemma_NChelper).
assert (nCol S K H) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F G, (PG F K H G /\\ EF A B m D F K H G /\\ CongA H K F J E N /\\ OS S F K H)) by (conclude proposition_42B);destruct Tf as [F[G]];spliter.
assert (nCol D B C) by (forward_using lemma_NCorder).
assert (Triangle D B C) by (conclude_def Triangle ).
assert (Par F K H G) by (conclude_def PG ).
assert (nCol K H G) by (forward_using lemma_parallelNC).
assert (nCol H G K) by (forward_using lemma_NCorder).
assert (nCol G H K) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists M L e, (PG G H M L /\\ CongA G H M J E N /\\ EF D B e C G H M L /\\ Midpoint B e C /\\ TS M G H K)) by (conclude proposition_44);destruct Tf as [M[L[e]]];spliter.
assert (BetS B e C) by (conclude_def Midpoint ).
assert (CongA J E N G H M) by (conclude lemma_equalanglessymmetric).
assert (CongA H K F G H M) by (conclude lemma_equalanglestransitive).
assert (Par F K H G) by (conclude_def PG ).
assert (Par K F H G) by (forward_using lemma_parallelflip).
assert (neq H K) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists s, (BetS H K s /\\ Cong K s H K)) by (conclude lemma_extension);destruct Tf as [s];spliter.
assert (Par F G K H) by (conclude_def PG ).
assert (Par K H F G) by (conclude lemma_parallelsymmetric).
assert (TP K H F G) by (conclude lemma_paralleldef2B).
assert (OS F G K H) by (conclude_def TP ).
assert (RT F K H K H G) by (conclude proposition_29C).
assert (CongA G H M H K F) by (conclude lemma_equalanglessymmetric).
assert (nCol H K F) by (conclude lemma_equalanglesNC).
assert (nCol F K H) by (forward_using lemma_NCorder).

*****
H69 : nCol F K H
H68 : nCol H K F
H67 : CongA G H M H K F
H66 : RT F K H K H G
H65 : OS F G K H
H64 : TP K H F G
H63 : Par K H F G
H62 : Par F G K H
H61 : Cong K s H K
H60 : BetS H K s
s : Point
H59 : neq H K
H58 : Par K F H G
H57 : Par F K H G
H56 : CongA H K F G H M
H55 : CongA J E N G H M
H54 : BetS B e C
H53 : TS M G H K
H52 : Midpoint B e C
H51 : EF D B e C G H M L
H50 : CongA G H M J E N
H49 : PG G H M L
M,L,e : Point
H48 : nCol G H K
H47 : nCol H G K
H46 : nCol K H G
H45 : Par F K H G
H44 : Triangle D B C
H43 : nCol D B C
H42 : OS S F K H
H41 : CongA H K F J E N
H40 : EF A B m D F K H G
H39 : PG F K H G
F,G : Point
H38 : nCol S K H
H37 : nCol H K S
H36 : neq H K
H35 : neq K H
H34 : Col R K K
H33 : eq K K
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (Col R K K) by (conclude_def Col ).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (neq H K) by (conclude lemma_inequalitysymmetric).
assert (nCol H K S) by (conclude lemma_NChelper).
assert (nCol S K H) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F G, (PG F K H G /\\ EF A B m D F K H G /\\ CongA H K F J E N /\\ OS S F K H)) by (conclude proposition_42B);destruct Tf as [F[G]];spliter.
assert (nCol D B C) by (forward_using lemma_NCorder).
assert (Triangle D B C) by (conclude_def Triangle ).
assert (Par F K H G) by (conclude_def PG ).
assert (nCol K H G) by (forward_using lemma_parallelNC).
assert (nCol H G K) by (forward_using lemma_NCorder).
assert (nCol G H K) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists M L e, (PG G H M L /\\ CongA G H M J E N /\\ EF D B e C G H M L /\\ Midpoint B e C /\\ TS M G H K)) by (conclude proposition_44);destruct Tf as [M[L[e]]];spliter.
assert (BetS B e C) by (conclude_def Midpoint ).
assert (CongA J E N G H M) by (conclude lemma_equalanglessymmetric).
assert (CongA H K F G H M) by (conclude lemma_equalanglestransitive).
assert (Par F K H G) by (conclude_def PG ).
assert (Par K F H G) by (forward_using lemma_parallelflip).
assert (neq H K) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists s, (BetS H K s /\\ Cong K s H K)) by (conclude lemma_extension);destruct Tf as [s];spliter.
assert (Par F G K H) by (conclude_def PG ).
assert (Par K H F G) by (conclude lemma_parallelsymmetric).
assert (TP K H F G) by (conclude lemma_paralleldef2B).
assert (OS F G K H) by (conclude_def TP ).
assert (RT F K H K H G) by (conclude proposition_29C).
assert (CongA G H M H K F) by (conclude lemma_equalanglessymmetric).
assert (nCol H K F) by (conclude lemma_equalanglesNC).
assert (nCol F K H) by (forward_using lemma_NCorder).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).

*****
H70 : CongA F K H H K F
H69 : nCol F K H
H68 : nCol H K F
H67 : CongA G H M H K F
H66 : RT F K H K H G
H65 : OS F G K H
H64 : TP K H F G
H63 : Par K H F G
H62 : Par F G K H
H61 : Cong K s H K
H60 : BetS H K s
s : Point
H59 : neq H K
H58 : Par K F H G
H57 : Par F K H G
H56 : CongA H K F G H M
H55 : CongA J E N G H M
H54 : BetS B e C
H53 : TS M G H K
H52 : Midpoint B e C
H51 : EF D B e C G H M L
H50 : CongA G H M J E N
H49 : PG G H M L
M,L,e : Point
H48 : nCol G H K
H47 : nCol H G K
H46 : nCol K H G
H45 : Par F K H G
H44 : Triangle D B C
H43 : nCol D B C
H42 : OS S F K H
H41 : CongA H K F J E N
H40 : EF A B m D F K H G
H39 : PG F K H G
F,G : Point
H38 : nCol S K H
H37 : nCol H K S
H36 : neq H K
H35 : neq K H
H34 : Col R K K
H33 : eq K K
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (CongA F K H G H M) by (conclude lemma_equalanglestransitive).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (Col R K K) by (conclude_def Col ).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (neq H K) by (conclude lemma_inequalitysymmetric).
assert (nCol H K S) by (conclude lemma_NChelper).
assert (nCol S K H) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F G, (PG F K H G /\\ EF A B m D F K H G /\\ CongA H K F J E N /\\ OS S F K H)) by (conclude proposition_42B);destruct Tf as [F[G]];spliter.
assert (nCol D B C) by (forward_using lemma_NCorder).
assert (Triangle D B C) by (conclude_def Triangle ).
assert (Par F K H G) by (conclude_def PG ).
assert (nCol K H G) by (forward_using lemma_parallelNC).
assert (nCol H G K) by (forward_using lemma_NCorder).
assert (nCol G H K) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists M L e, (PG G H M L /\\ CongA G H M J E N /\\ EF D B e C G H M L /\\ Midpoint B e C /\\ TS M G H K)) by (conclude proposition_44);destruct Tf as [M[L[e]]];spliter.
assert (BetS B e C) by (conclude_def Midpoint ).
assert (CongA J E N G H M) by (conclude lemma_equalanglessymmetric).
assert (CongA H K F G H M) by (conclude lemma_equalanglestransitive).
assert (Par F K H G) by (conclude_def PG ).
assert (Par K F H G) by (forward_using lemma_parallelflip).
assert (neq H K) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists s, (BetS H K s /\\ Cong K s H K)) by (conclude lemma_extension);destruct Tf as [s];spliter.
assert (Par F G K H) by (conclude_def PG ).
assert (Par K H F G) by (conclude lemma_parallelsymmetric).
assert (TP K H F G) by (conclude lemma_paralleldef2B).
assert (OS F G K H) by (conclude_def TP ).
assert (RT F K H K H G) by (conclude proposition_29C).
assert (CongA G H M H K F) by (conclude lemma_equalanglessymmetric).
assert (nCol H K F) by (conclude lemma_equalanglesNC).
assert (nCol F K H) by (forward_using lemma_NCorder).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H G H M) by (conclude lemma_equalanglestransitive).

*****
H71 : CongA F K H G H M
H70 : CongA F K H H K F
H69 : nCol F K H
H68 : nCol H K F
H67 : CongA G H M H K F
H66 : RT F K H K H G
H65 : OS F G K H
H64 : TP K H F G
H63 : Par K H F G
H62 : Par F G K H
H61 : Cong K s H K
H60 : BetS H K s
s : Point
H59 : neq H K
H58 : Par K F H G
H57 : Par F K H G
H56 : CongA H K F G H M
H55 : CongA J E N G H M
H54 : BetS B e C
H53 : TS M G H K
H52 : Midpoint B e C
H51 : EF D B e C G H M L
H50 : CongA G H M J E N
H49 : PG G H M L
M,L,e : Point
H48 : nCol G H K
H47 : nCol H G K
H46 : nCol K H G
H45 : Par F K H G
H44 : Triangle D B C
H43 : nCol D B C
H42 : OS S F K H
H41 : CongA H K F J E N
H40 : EF A B m D F K H G
H39 : PG F K H G
F,G : Point
H38 : nCol S K H
H37 : nCol H K S
H36 : neq H K
H35 : neq K H
H34 : Col R K K
H33 : eq K K
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (RT G H M K H G) by (conclude lemma_RTcongruence).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (Col R K K) by (conclude_def Col ).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (neq H K) by (conclude lemma_inequalitysymmetric).
assert (nCol H K S) by (conclude lemma_NChelper).
assert (nCol S K H) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F G, (PG F K H G /\\ EF A B m D F K H G /\\ CongA H K F J E N /\\ OS S F K H)) by (conclude proposition_42B);destruct Tf as [F[G]];spliter.
assert (nCol D B C) by (forward_using lemma_NCorder).
assert (Triangle D B C) by (conclude_def Triangle ).
assert (Par F K H G) by (conclude_def PG ).
assert (nCol K H G) by (forward_using lemma_parallelNC).
assert (nCol H G K) by (forward_using lemma_NCorder).
assert (nCol G H K) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists M L e, (PG G H M L /\\ CongA G H M J E N /\\ EF D B e C G H M L /\\ Midpoint B e C /\\ TS M G H K)) by (conclude proposition_44);destruct Tf as [M[L[e]]];spliter.
assert (BetS B e C) by (conclude_def Midpoint ).
assert (CongA J E N G H M) by (conclude lemma_equalanglessymmetric).
assert (CongA H K F G H M) by (conclude lemma_equalanglestransitive).
assert (Par F K H G) by (conclude_def PG ).
assert (Par K F H G) by (forward_using lemma_parallelflip).
assert (neq H K) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists s, (BetS H K s /\\ Cong K s H K)) by (conclude lemma_extension);destruct Tf as [s];spliter.
assert (Par F G K H) by (conclude_def PG ).
assert (Par K H F G) by (conclude lemma_parallelsymmetric).
assert (TP K H F G) by (conclude lemma_paralleldef2B).
assert (OS F G K H) by (conclude_def TP ).
assert (RT F K H K H G) by (conclude proposition_29C).
assert (CongA G H M H K F) by (conclude lemma_equalanglessymmetric).
assert (nCol H K F) by (conclude lemma_equalanglesNC).
assert (nCol F K H) by (forward_using lemma_NCorder).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H G H M) by (conclude lemma_equalanglestransitive).
assert (RT G H M K H G) by (conclude lemma_RTcongruence).

*****
H72 : RT G H M K H G
H71 : CongA F K H G H M
H70 : CongA F K H H K F
H69 : nCol F K H
H68 : nCol H K F
H67 : CongA G H M H K F
H66 : RT F K H K H G
H65 : OS F G K H
H64 : TP K H F G
H63 : Par K H F G
H62 : Par F G K H
H61 : Cong K s H K
H60 : BetS H K s
s : Point
H59 : neq H K
H58 : Par K F H G
H57 : Par F K H G
H56 : CongA H K F G H M
H55 : CongA J E N G H M
H54 : BetS B e C
H53 : TS M G H K
H52 : Midpoint B e C
H51 : EF D B e C G H M L
H50 : CongA G H M J E N
H49 : PG G H M L
M,L,e : Point
H48 : nCol G H K
H47 : nCol H G K
H46 : nCol K H G
H45 : Par F K H G
H44 : Triangle D B C
H43 : nCol D B C
H42 : OS S F K H
H41 : CongA H K F J E N
H40 : EF A B m D F K H G
H39 : PG F K H G
F,G : Point
H38 : nCol S K H
H37 : nCol H K S
H36 : neq H K
H35 : neq K H
H34 : Col R K K
H33 : eq K K
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (RT K H G G H M) by (conclude lemma_RTsymmetric).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (Col R K K) by (conclude_def Col ).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (neq H K) by (conclude lemma_inequalitysymmetric).
assert (nCol H K S) by (conclude lemma_NChelper).
assert (nCol S K H) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F G, (PG F K H G /\\ EF A B m D F K H G /\\ CongA H K F J E N /\\ OS S F K H)) by (conclude proposition_42B);destruct Tf as [F[G]];spliter.
assert (nCol D B C) by (forward_using lemma_NCorder).
assert (Triangle D B C) by (conclude_def Triangle ).
assert (Par F K H G) by (conclude_def PG ).
assert (nCol K H G) by (forward_using lemma_parallelNC).
assert (nCol H G K) by (forward_using lemma_NCorder).
assert (nCol G H K) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists M L e, (PG G H M L /\\ CongA G H M J E N /\\ EF D B e C G H M L /\\ Midpoint B e C /\\ TS M G H K)) by (conclude proposition_44);destruct Tf as [M[L[e]]];spliter.
assert (BetS B e C) by (conclude_def Midpoint ).
assert (CongA J E N G H M) by (conclude lemma_equalanglessymmetric).
assert (CongA H K F G H M) by (conclude lemma_equalanglestransitive).
assert (Par F K H G) by (conclude_def PG ).
assert (Par K F H G) by (forward_using lemma_parallelflip).
assert (neq H K) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists s, (BetS H K s /\\ Cong K s H K)) by (conclude lemma_extension);destruct Tf as [s];spliter.
assert (Par F G K H) by (conclude_def PG ).
assert (Par K H F G) by (conclude lemma_parallelsymmetric).
assert (TP K H F G) by (conclude lemma_paralleldef2B).
assert (OS F G K H) by (conclude_def TP ).
assert (RT F K H K H G) by (conclude proposition_29C).
assert (CongA G H M H K F) by (conclude lemma_equalanglessymmetric).
assert (nCol H K F) by (conclude lemma_equalanglesNC).
assert (nCol F K H) by (forward_using lemma_NCorder).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H G H M) by (conclude lemma_equalanglestransitive).
assert (RT G H M K H G) by (conclude lemma_RTcongruence).
assert (RT K H G G H M) by (conclude lemma_RTsymmetric).

*****
H73 : RT K H G G H M
H72 : RT G H M K H G
H71 : CongA F K H G H M
H70 : CongA F K H H K F
H69 : nCol F K H
H68 : nCol H K F
H67 : CongA G H M H K F
H66 : RT F K H K H G
H65 : OS F G K H
H64 : TP K H F G
H63 : Par K H F G
H62 : Par F G K H
H61 : Cong K s H K
H60 : BetS H K s
s : Point
H59 : neq H K
H58 : Par K F H G
H57 : Par F K H G
H56 : CongA H K F G H M
H55 : CongA J E N G H M
H54 : BetS B e C
H53 : TS M G H K
H52 : Midpoint B e C
H51 : EF D B e C G H M L
H50 : CongA G H M J E N
H49 : PG G H M L
M,L,e : Point
H48 : nCol G H K
H47 : nCol H G K
H46 : nCol K H G
H45 : Par F K H G
H44 : Triangle D B C
H43 : nCol D B C
H42 : OS S F K H
H41 : CongA H K F J E N
H40 : EF A B m D F K H G
H39 : PG F K H G
F,G : Point
H38 : nCol S K H
H37 : nCol H K S
H36 : neq H K
H35 : neq K H
H34 : Col R K K
H33 : eq K K
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (eq G G) by (conclude cn_equalityreflexive).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (Col R K K) by (conclude_def Col ).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (neq H K) by (conclude lemma_inequalitysymmetric).
assert (nCol H K S) by (conclude lemma_NChelper).
assert (nCol S K H) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F G, (PG F K H G /\\ EF A B m D F K H G /\\ CongA H K F J E N /\\ OS S F K H)) by (conclude proposition_42B);destruct Tf as [F[G]];spliter.
assert (nCol D B C) by (forward_using lemma_NCorder).
assert (Triangle D B C) by (conclude_def Triangle ).
assert (Par F K H G) by (conclude_def PG ).
assert (nCol K H G) by (forward_using lemma_parallelNC).
assert (nCol H G K) by (forward_using lemma_NCorder).
assert (nCol G H K) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists M L e, (PG G H M L /\\ CongA G H M J E N /\\ EF D B e C G H M L /\\ Midpoint B e C /\\ TS M G H K)) by (conclude proposition_44);destruct Tf as [M[L[e]]];spliter.
assert (BetS B e C) by (conclude_def Midpoint ).
assert (CongA J E N G H M) by (conclude lemma_equalanglessymmetric).
assert (CongA H K F G H M) by (conclude lemma_equalanglestransitive).
assert (Par F K H G) by (conclude_def PG ).
assert (Par K F H G) by (forward_using lemma_parallelflip).
assert (neq H K) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists s, (BetS H K s /\\ Cong K s H K)) by (conclude lemma_extension);destruct Tf as [s];spliter.
assert (Par F G K H) by (conclude_def PG ).
assert (Par K H F G) by (conclude lemma_parallelsymmetric).
assert (TP K H F G) by (conclude lemma_paralleldef2B).
assert (OS F G K H) by (conclude_def TP ).
assert (RT F K H K H G) by (conclude proposition_29C).
assert (CongA G H M H K F) by (conclude lemma_equalanglessymmetric).
assert (nCol H K F) by (conclude lemma_equalanglesNC).
assert (nCol F K H) by (forward_using lemma_NCorder).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H G H M) by (conclude lemma_equalanglestransitive).
assert (RT G H M K H G) by (conclude lemma_RTcongruence).
assert (RT K H G G H M) by (conclude lemma_RTsymmetric).
assert (eq G G) by (conclude cn_equalityreflexive).

*****
H74 : eq G G
H73 : RT K H G G H M
H72 : RT G H M K H G
H71 : CongA F K H G H M
H70 : CongA F K H H K F
H69 : nCol F K H
H68 : nCol H K F
H67 : CongA G H M H K F
H66 : RT F K H K H G
H65 : OS F G K H
H64 : TP K H F G
H63 : Par K H F G
H62 : Par F G K H
H61 : Cong K s H K
H60 : BetS H K s
s : Point
H59 : neq H K
H58 : Par K F H G
H57 : Par F K H G
H56 : CongA H K F G H M
H55 : CongA J E N G H M
H54 : BetS B e C
H53 : TS M G H K
H52 : Midpoint B e C
H51 : EF D B e C G H M L
H50 : CongA G H M J E N
H49 : PG G H M L
M,L,e : Point
H48 : nCol G H K
H47 : nCol H G K
H46 : nCol K H G
H45 : Par F K H G
H44 : Triangle D B C
H43 : nCol D B C
H42 : OS S F K H
H41 : CongA H K F J E N
H40 : EF A B m D F K H G
H39 : PG F K H G
F,G : Point
H38 : nCol S K H
H37 : nCol H K S
H36 : neq H K
H35 : neq K H
H34 : Col R K K
H33 : eq K K
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (neq H G) by (forward_using lemma_NCdistinct).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (Col R K K) by (conclude_def Col ).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (neq H K) by (conclude lemma_inequalitysymmetric).
assert (nCol H K S) by (conclude lemma_NChelper).
assert (nCol S K H) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F G, (PG F K H G /\\ EF A B m D F K H G /\\ CongA H K F J E N /\\ OS S F K H)) by (conclude proposition_42B);destruct Tf as [F[G]];spliter.
assert (nCol D B C) by (forward_using lemma_NCorder).
assert (Triangle D B C) by (conclude_def Triangle ).
assert (Par F K H G) by (conclude_def PG ).
assert (nCol K H G) by (forward_using lemma_parallelNC).
assert (nCol H G K) by (forward_using lemma_NCorder).
assert (nCol G H K) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists M L e, (PG G H M L /\\ CongA G H M J E N /\\ EF D B e C G H M L /\\ Midpoint B e C /\\ TS M G H K)) by (conclude proposition_44);destruct Tf as [M[L[e]]];spliter.
assert (BetS B e C) by (conclude_def Midpoint ).
assert (CongA J E N G H M) by (conclude lemma_equalanglessymmetric).
assert (CongA H K F G H M) by (conclude lemma_equalanglestransitive).
assert (Par F K H G) by (conclude_def PG ).
assert (Par K F H G) by (forward_using lemma_parallelflip).
assert (neq H K) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists s, (BetS H K s /\\ Cong K s H K)) by (conclude lemma_extension);destruct Tf as [s];spliter.
assert (Par F G K H) by (conclude_def PG ).
assert (Par K H F G) by (conclude lemma_parallelsymmetric).
assert (TP K H F G) by (conclude lemma_paralleldef2B).
assert (OS F G K H) by (conclude_def TP ).
assert (RT F K H K H G) by (conclude proposition_29C).
assert (CongA G H M H K F) by (conclude lemma_equalanglessymmetric).
assert (nCol H K F) by (conclude lemma_equalanglesNC).
assert (nCol F K H) by (forward_using lemma_NCorder).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H G H M) by (conclude lemma_equalanglestransitive).
assert (RT G H M K H G) by (conclude lemma_RTcongruence).
assert (RT K H G G H M) by (conclude lemma_RTsymmetric).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (neq H G) by (forward_using lemma_NCdistinct).

*****
H75 : neq H G
H74 : eq G G
H73 : RT K H G G H M
H72 : RT G H M K H G
H71 : CongA F K H G H M
H70 : CongA F K H H K F
H69 : nCol F K H
H68 : nCol H K F
H67 : CongA G H M H K F
H66 : RT F K H K H G
H65 : OS F G K H
H64 : TP K H F G
H63 : Par K H F G
H62 : Par F G K H
H61 : Cong K s H K
H60 : BetS H K s
s : Point
H59 : neq H K
H58 : Par K F H G
H57 : Par F K H G
H56 : CongA H K F G H M
H55 : CongA J E N G H M
H54 : BetS B e C
H53 : TS M G H K
H52 : Midpoint B e C
H51 : EF D B e C G H M L
H50 : CongA G H M J E N
H49 : PG G H M L
M,L,e : Point
H48 : nCol G H K
H47 : nCol H G K
H46 : nCol K H G
H45 : Par F K H G
H44 : Triangle D B C
H43 : nCol D B C
H42 : OS S F K H
H41 : CongA H K F J E N
H40 : EF A B m D F K H G
H39 : PG F K H G
F,G : Point
H38 : nCol S K H
H37 : nCol H K S
H36 : neq H K
H35 : neq K H
H34 : Col R K K
H33 : eq K K
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (Out H G G) by (conclude lemma_ray4).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (Col R K K) by (conclude_def Col ).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (neq H K) by (conclude lemma_inequalitysymmetric).
assert (nCol H K S) by (conclude lemma_NChelper).
assert (nCol S K H) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F G, (PG F K H G /\\ EF A B m D F K H G /\\ CongA H K F J E N /\\ OS S F K H)) by (conclude proposition_42B);destruct Tf as [F[G]];spliter.
assert (nCol D B C) by (forward_using lemma_NCorder).
assert (Triangle D B C) by (conclude_def Triangle ).
assert (Par F K H G) by (conclude_def PG ).
assert (nCol K H G) by (forward_using lemma_parallelNC).
assert (nCol H G K) by (forward_using lemma_NCorder).
assert (nCol G H K) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists M L e, (PG G H M L /\\ CongA G H M J E N /\\ EF D B e C G H M L /\\ Midpoint B e C /\\ TS M G H K)) by (conclude proposition_44);destruct Tf as [M[L[e]]];spliter.
assert (BetS B e C) by (conclude_def Midpoint ).
assert (CongA J E N G H M) by (conclude lemma_equalanglessymmetric).
assert (CongA H K F G H M) by (conclude lemma_equalanglestransitive).
assert (Par F K H G) by (conclude_def PG ).
assert (Par K F H G) by (forward_using lemma_parallelflip).
assert (neq H K) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists s, (BetS H K s /\\ Cong K s H K)) by (conclude lemma_extension);destruct Tf as [s];spliter.
assert (Par F G K H) by (conclude_def PG ).
assert (Par K H F G) by (conclude lemma_parallelsymmetric).
assert (TP K H F G) by (conclude lemma_paralleldef2B).
assert (OS F G K H) by (conclude_def TP ).
assert (RT F K H K H G) by (conclude proposition_29C).
assert (CongA G H M H K F) by (conclude lemma_equalanglessymmetric).
assert (nCol H K F) by (conclude lemma_equalanglesNC).
assert (nCol F K H) by (forward_using lemma_NCorder).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H G H M) by (conclude lemma_equalanglestransitive).
assert (RT G H M K H G) by (conclude lemma_RTcongruence).
assert (RT K H G G H M) by (conclude lemma_RTsymmetric).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (neq H G) by (forward_using lemma_NCdistinct).
assert (Out H G G) by (conclude lemma_ray4).

*****
H76 : Out H G G
H75 : neq H G
H74 : eq G G
H73 : RT K H G G H M
H72 : RT G H M K H G
H71 : CongA F K H G H M
H70 : CongA F K H H K F
H69 : nCol F K H
H68 : nCol H K F
H67 : CongA G H M H K F
H66 : RT F K H K H G
H65 : OS F G K H
H64 : TP K H F G
H63 : Par K H F G
H62 : Par F G K H
H61 : Cong K s H K
H60 : BetS H K s
s : Point
H59 : neq H K
H58 : Par K F H G
H57 : Par F K H G
H56 : CongA H K F G H M
H55 : CongA J E N G H M
H54 : BetS B e C
H53 : TS M G H K
H52 : Midpoint B e C
H51 : EF D B e C G H M L
H50 : CongA G H M J E N
H49 : PG G H M L
M,L,e : Point
H48 : nCol G H K
H47 : nCol H G K
H46 : nCol K H G
H45 : Par F K H G
H44 : Triangle D B C
H43 : nCol D B C
H42 : OS S F K H
H41 : CongA H K F J E N
H40 : EF A B m D F K H G
H39 : PG F K H G
F,G : Point
H38 : nCol S K H
H37 : nCol H K S
H36 : neq H K
H35 : neq K H
H34 : Col R K K
H33 : eq K K
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (BetS K H M) by (conclude proposition_14).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (Col R K K) by (conclude_def Col ).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (neq H K) by (conclude lemma_inequalitysymmetric).
assert (nCol H K S) by (conclude lemma_NChelper).
assert (nCol S K H) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F G, (PG F K H G /\\ EF A B m D F K H G /\\ CongA H K F J E N /\\ OS S F K H)) by (conclude proposition_42B);destruct Tf as [F[G]];spliter.
assert (nCol D B C) by (forward_using lemma_NCorder).
assert (Triangle D B C) by (conclude_def Triangle ).
assert (Par F K H G) by (conclude_def PG ).
assert (nCol K H G) by (forward_using lemma_parallelNC).
assert (nCol H G K) by (forward_using lemma_NCorder).
assert (nCol G H K) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists M L e, (PG G H M L /\\ CongA G H M J E N /\\ EF D B e C G H M L /\\ Midpoint B e C /\\ TS M G H K)) by (conclude proposition_44);destruct Tf as [M[L[e]]];spliter.
assert (BetS B e C) by (conclude_def Midpoint ).
assert (CongA J E N G H M) by (conclude lemma_equalanglessymmetric).
assert (CongA H K F G H M) by (conclude lemma_equalanglestransitive).
assert (Par F K H G) by (conclude_def PG ).
assert (Par K F H G) by (forward_using lemma_parallelflip).
assert (neq H K) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists s, (BetS H K s /\\ Cong K s H K)) by (conclude lemma_extension);destruct Tf as [s];spliter.
assert (Par F G K H) by (conclude_def PG ).
assert (Par K H F G) by (conclude lemma_parallelsymmetric).
assert (TP K H F G) by (conclude lemma_paralleldef2B).
assert (OS F G K H) by (conclude_def TP ).
assert (RT F K H K H G) by (conclude proposition_29C).
assert (CongA G H M H K F) by (conclude lemma_equalanglessymmetric).
assert (nCol H K F) by (conclude lemma_equalanglesNC).
assert (nCol F K H) by (forward_using lemma_NCorder).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H G H M) by (conclude lemma_equalanglestransitive).
assert (RT G H M K H G) by (conclude lemma_RTcongruence).
assert (RT K H G G H M) by (conclude lemma_RTsymmetric).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (neq H G) by (forward_using lemma_NCdistinct).
assert (Out H G G) by (conclude lemma_ray4).
assert (BetS K H M) by (conclude proposition_14).

*****
H77 : BetS K H M
H76 : Out H G G
H75 : neq H G
H74 : eq G G
H73 : RT K H G G H M
H72 : RT G H M K H G
H71 : CongA F K H G H M
H70 : CongA F K H H K F
H69 : nCol F K H
H68 : nCol H K F
H67 : CongA G H M H K F
H66 : RT F K H K H G
H65 : OS F G K H
H64 : TP K H F G
H63 : Par K H F G
H62 : Par F G K H
H61 : Cong K s H K
H60 : BetS H K s
s : Point
H59 : neq H K
H58 : Par K F H G
H57 : Par F K H G
H56 : CongA H K F G H M
H55 : CongA J E N G H M
H54 : BetS B e C
H53 : TS M G H K
H52 : Midpoint B e C
H51 : EF D B e C G H M L
H50 : CongA G H M J E N
H49 : PG G H M L
M,L,e : Point
H48 : nCol G H K
H47 : nCol H G K
H46 : nCol K H G
H45 : Par F K H G
H44 : Triangle D B C
H43 : nCol D B C
H42 : OS S F K H
H41 : CongA H K F J E N
H40 : EF A B m D F K H G
H39 : PG F K H G
F,G : Point
H38 : nCol S K H
H37 : nCol H K S
H36 : neq H K
H35 : neq K H
H34 : Col R K K
H33 : eq K K
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (neq F K) by (forward_using lemma_NCdistinct).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (Col R K K) by (conclude_def Col ).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (neq H K) by (conclude lemma_inequalitysymmetric).
assert (nCol H K S) by (conclude lemma_NChelper).
assert (nCol S K H) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F G, (PG F K H G /\\ EF A B m D F K H G /\\ CongA H K F J E N /\\ OS S F K H)) by (conclude proposition_42B);destruct Tf as [F[G]];spliter.
assert (nCol D B C) by (forward_using lemma_NCorder).
assert (Triangle D B C) by (conclude_def Triangle ).
assert (Par F K H G) by (conclude_def PG ).
assert (nCol K H G) by (forward_using lemma_parallelNC).
assert (nCol H G K) by (forward_using lemma_NCorder).
assert (nCol G H K) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists M L e, (PG G H M L /\\ CongA G H M J E N /\\ EF D B e C G H M L /\\ Midpoint B e C /\\ TS M G H K)) by (conclude proposition_44);destruct Tf as [M[L[e]]];spliter.
assert (BetS B e C) by (conclude_def Midpoint ).
assert (CongA J E N G H M) by (conclude lemma_equalanglessymmetric).
assert (CongA H K F G H M) by (conclude lemma_equalanglestransitive).
assert (Par F K H G) by (conclude_def PG ).
assert (Par K F H G) by (forward_using lemma_parallelflip).
assert (neq H K) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists s, (BetS H K s /\\ Cong K s H K)) by (conclude lemma_extension);destruct Tf as [s];spliter.
assert (Par F G K H) by (conclude_def PG ).
assert (Par K H F G) by (conclude lemma_parallelsymmetric).
assert (TP K H F G) by (conclude lemma_paralleldef2B).
assert (OS F G K H) by (conclude_def TP ).
assert (RT F K H K H G) by (conclude proposition_29C).
assert (CongA G H M H K F) by (conclude lemma_equalanglessymmetric).
assert (nCol H K F) by (conclude lemma_equalanglesNC).
assert (nCol F K H) by (forward_using lemma_NCorder).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H G H M) by (conclude lemma_equalanglestransitive).
assert (RT G H M K H G) by (conclude lemma_RTcongruence).
assert (RT K H G G H M) by (conclude lemma_RTsymmetric).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (neq H G) by (forward_using lemma_NCdistinct).
assert (Out H G G) by (conclude lemma_ray4).
assert (BetS K H M) by (conclude proposition_14).
assert (neq F K) by (forward_using lemma_NCdistinct).

*****
H78 : neq F K
H77 : BetS K H M
H76 : Out H G G
H75 : neq H G
H74 : eq G G
H73 : RT K H G G H M
H72 : RT G H M K H G
H71 : CongA F K H G H M
H70 : CongA F K H H K F
H69 : nCol F K H
H68 : nCol H K F
H67 : CongA G H M H K F
H66 : RT F K H K H G
H65 : OS F G K H
H64 : TP K H F G
H63 : Par K H F G
H62 : Par F G K H
H61 : Cong K s H K
H60 : BetS H K s
s : Point
H59 : neq H K
H58 : Par K F H G
H57 : Par F K H G
H56 : CongA H K F G H M
H55 : CongA J E N G H M
H54 : BetS B e C
H53 : TS M G H K
H52 : Midpoint B e C
H51 : EF D B e C G H M L
H50 : CongA G H M J E N
H49 : PG G H M L
M,L,e : Point
H48 : nCol G H K
H47 : nCol H G K
H46 : nCol K H G
H45 : Par F K H G
H44 : Triangle D B C
H43 : nCol D B C
H42 : OS S F K H
H41 : CongA H K F J E N
H40 : EF A B m D F K H G
H39 : PG F K H G
F,G : Point
H38 : nCol S K H
H37 : nCol H K S
H36 : neq H K
H35 : neq K H
H34 : Col R K K
H33 : eq K K
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (nCol G H M) by (conclude lemma_equalanglesNC).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (Col R K K) by (conclude_def Col ).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (neq H K) by (conclude lemma_inequalitysymmetric).
assert (nCol H K S) by (conclude lemma_NChelper).
assert (nCol S K H) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F G, (PG F K H G /\\ EF A B m D F K H G /\\ CongA H K F J E N /\\ OS S F K H)) by (conclude proposition_42B);destruct Tf as [F[G]];spliter.
assert (nCol D B C) by (forward_using lemma_NCorder).
assert (Triangle D B C) by (conclude_def Triangle ).
assert (Par F K H G) by (conclude_def PG ).
assert (nCol K H G) by (forward_using lemma_parallelNC).
assert (nCol H G K) by (forward_using lemma_NCorder).
assert (nCol G H K) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists M L e, (PG G H M L /\\ CongA G H M J E N /\\ EF D B e C G H M L /\\ Midpoint B e C /\\ TS M G H K)) by (conclude proposition_44);destruct Tf as [M[L[e]]];spliter.
assert (BetS B e C) by (conclude_def Midpoint ).
assert (CongA J E N G H M) by (conclude lemma_equalanglessymmetric).
assert (CongA H K F G H M) by (conclude lemma_equalanglestransitive).
assert (Par F K H G) by (conclude_def PG ).
assert (Par K F H G) by (forward_using lemma_parallelflip).
assert (neq H K) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists s, (BetS H K s /\\ Cong K s H K)) by (conclude lemma_extension);destruct Tf as [s];spliter.
assert (Par F G K H) by (conclude_def PG ).
assert (Par K H F G) by (conclude lemma_parallelsymmetric).
assert (TP K H F G) by (conclude lemma_paralleldef2B).
assert (OS F G K H) by (conclude_def TP ).
assert (RT F K H K H G) by (conclude proposition_29C).
assert (CongA G H M H K F) by (conclude lemma_equalanglessymmetric).
assert (nCol H K F) by (conclude lemma_equalanglesNC).
assert (nCol F K H) by (forward_using lemma_NCorder).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H G H M) by (conclude lemma_equalanglestransitive).
assert (RT G H M K H G) by (conclude lemma_RTcongruence).
assert (RT K H G G H M) by (conclude lemma_RTsymmetric).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (neq H G) by (forward_using lemma_NCdistinct).
assert (Out H G G) by (conclude lemma_ray4).
assert (BetS K H M) by (conclude proposition_14).
assert (neq F K) by (forward_using lemma_NCdistinct).
assert (nCol G H M) by (conclude lemma_equalanglesNC).

*****
H79 : nCol G H M
H78 : neq F K
H77 : BetS K H M
H76 : Out H G G
H75 : neq H G
H74 : eq G G
H73 : RT K H G G H M
H72 : RT G H M K H G
H71 : CongA F K H G H M
H70 : CongA F K H H K F
H69 : nCol F K H
H68 : nCol H K F
H67 : CongA G H M H K F
H66 : RT F K H K H G
H65 : OS F G K H
H64 : TP K H F G
H63 : Par K H F G
H62 : Par F G K H
H61 : Cong K s H K
H60 : BetS H K s
s : Point
H59 : neq H K
H58 : Par K F H G
H57 : Par F K H G
H56 : CongA H K F G H M
H55 : CongA J E N G H M
H54 : BetS B e C
H53 : TS M G H K
H52 : Midpoint B e C
H51 : EF D B e C G H M L
H50 : CongA G H M J E N
H49 : PG G H M L
M,L,e : Point
H48 : nCol G H K
H47 : nCol H G K
H46 : nCol K H G
H45 : Par F K H G
H44 : Triangle D B C
H43 : nCol D B C
H42 : OS S F K H
H41 : CongA H K F J E N
H40 : EF A B m D F K H G
H39 : PG F K H G
F,G : Point
H38 : nCol S K H
H37 : nCol H K S
H36 : neq H K
H35 : neq K H
H34 : Col R K K
H33 : eq K K
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (neq G H) by (forward_using lemma_NCdistinct).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (Col R K K) by (conclude_def Col ).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (neq H K) by (conclude lemma_inequalitysymmetric).
assert (nCol H K S) by (conclude lemma_NChelper).
assert (nCol S K H) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F G, (PG F K H G /\\ EF A B m D F K H G /\\ CongA H K F J E N /\\ OS S F K H)) by (conclude proposition_42B);destruct Tf as [F[G]];spliter.
assert (nCol D B C) by (forward_using lemma_NCorder).
assert (Triangle D B C) by (conclude_def Triangle ).
assert (Par F K H G) by (conclude_def PG ).
assert (nCol K H G) by (forward_using lemma_parallelNC).
assert (nCol H G K) by (forward_using lemma_NCorder).
assert (nCol G H K) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists M L e, (PG G H M L /\\ CongA G H M J E N /\\ EF D B e C G H M L /\\ Midpoint B e C /\\ TS M G H K)) by (conclude proposition_44);destruct Tf as [M[L[e]]];spliter.
assert (BetS B e C) by (conclude_def Midpoint ).
assert (CongA J E N G H M) by (conclude lemma_equalanglessymmetric).
assert (CongA H K F G H M) by (conclude lemma_equalanglestransitive).
assert (Par F K H G) by (conclude_def PG ).
assert (Par K F H G) by (forward_using lemma_parallelflip).
assert (neq H K) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists s, (BetS H K s /\\ Cong K s H K)) by (conclude lemma_extension);destruct Tf as [s];spliter.
assert (Par F G K H) by (conclude_def PG ).
assert (Par K H F G) by (conclude lemma_parallelsymmetric).
assert (TP K H F G) by (conclude lemma_paralleldef2B).
assert (OS F G K H) by (conclude_def TP ).
assert (RT F K H K H G) by (conclude proposition_29C).
assert (CongA G H M H K F) by (conclude lemma_equalanglessymmetric).
assert (nCol H K F) by (conclude lemma_equalanglesNC).
assert (nCol F K H) by (forward_using lemma_NCorder).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H G H M) by (conclude lemma_equalanglestransitive).
assert (RT G H M K H G) by (conclude lemma_RTcongruence).
assert (RT K H G G H M) by (conclude lemma_RTsymmetric).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (neq H G) by (forward_using lemma_NCdistinct).
assert (Out H G G) by (conclude lemma_ray4).
assert (BetS K H M) by (conclude proposition_14).
assert (neq F K) by (forward_using lemma_NCdistinct).
assert (nCol G H M) by (conclude lemma_equalanglesNC).
assert (neq G H) by (forward_using lemma_NCdistinct).

*****
H80 : neq G H
H79 : nCol G H M
H78 : neq F K
H77 : BetS K H M
H76 : Out H G G
H75 : neq H G
H74 : eq G G
H73 : RT K H G G H M
H72 : RT G H M K H G
H71 : CongA F K H G H M
H70 : CongA F K H H K F
H69 : nCol F K H
H68 : nCol H K F
H67 : CongA G H M H K F
H66 : RT F K H K H G
H65 : OS F G K H
H64 : TP K H F G
H63 : Par K H F G
H62 : Par F G K H
H61 : Cong K s H K
H60 : BetS H K s
s : Point
H59 : neq H K
H58 : Par K F H G
H57 : Par F K H G
H56 : CongA H K F G H M
H55 : CongA J E N G H M
H54 : BetS B e C
H53 : TS M G H K
H52 : Midpoint B e C
H51 : EF D B e C G H M L
H50 : CongA G H M J E N
H49 : PG G H M L
M,L,e : Point
H48 : nCol G H K
H47 : nCol H G K
H46 : nCol K H G
H45 : Par F K H G
H44 : Triangle D B C
H43 : nCol D B C
H42 : OS S F K H
H41 : CongA H K F J E N
H40 : EF A B m D F K H G
H39 : PG F K H G
F,G : Point
H38 : nCol S K H
H37 : nCol H K S
H36 : neq H K
H35 : neq K H
H34 : Col R K K
H33 : eq K K
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (Par G H M L) by (conclude_def PG ).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (Col R K K) by (conclude_def Col ).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (neq H K) by (conclude lemma_inequalitysymmetric).
assert (nCol H K S) by (conclude lemma_NChelper).
assert (nCol S K H) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F G, (PG F K H G /\\ EF A B m D F K H G /\\ CongA H K F J E N /\\ OS S F K H)) by (conclude proposition_42B);destruct Tf as [F[G]];spliter.
assert (nCol D B C) by (forward_using lemma_NCorder).
assert (Triangle D B C) by (conclude_def Triangle ).
assert (Par F K H G) by (conclude_def PG ).
assert (nCol K H G) by (forward_using lemma_parallelNC).
assert (nCol H G K) by (forward_using lemma_NCorder).
assert (nCol G H K) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists M L e, (PG G H M L /\\ CongA G H M J E N /\\ EF D B e C G H M L /\\ Midpoint B e C /\\ TS M G H K)) by (conclude proposition_44);destruct Tf as [M[L[e]]];spliter.
assert (BetS B e C) by (conclude_def Midpoint ).
assert (CongA J E N G H M) by (conclude lemma_equalanglessymmetric).
assert (CongA H K F G H M) by (conclude lemma_equalanglestransitive).
assert (Par F K H G) by (conclude_def PG ).
assert (Par K F H G) by (forward_using lemma_parallelflip).
assert (neq H K) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists s, (BetS H K s /\\ Cong K s H K)) by (conclude lemma_extension);destruct Tf as [s];spliter.
assert (Par F G K H) by (conclude_def PG ).
assert (Par K H F G) by (conclude lemma_parallelsymmetric).
assert (TP K H F G) by (conclude lemma_paralleldef2B).
assert (OS F G K H) by (conclude_def TP ).
assert (RT F K H K H G) by (conclude proposition_29C).
assert (CongA G H M H K F) by (conclude lemma_equalanglessymmetric).
assert (nCol H K F) by (conclude lemma_equalanglesNC).
assert (nCol F K H) by (forward_using lemma_NCorder).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H G H M) by (conclude lemma_equalanglestransitive).
assert (RT G H M K H G) by (conclude lemma_RTcongruence).
assert (RT K H G G H M) by (conclude lemma_RTsymmetric).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (neq H G) by (forward_using lemma_NCdistinct).
assert (Out H G G) by (conclude lemma_ray4).
assert (BetS K H M) by (conclude proposition_14).
assert (neq F K) by (forward_using lemma_NCdistinct).
assert (nCol G H M) by (conclude lemma_equalanglesNC).
assert (neq G H) by (forward_using lemma_NCdistinct).
assert (Par G H M L) by (conclude_def PG ).

*****
H81 : Par G H M L
H80 : neq G H
H79 : nCol G H M
H78 : neq F K
H77 : BetS K H M
H76 : Out H G G
H75 : neq H G
H74 : eq G G
H73 : RT K H G G H M
H72 : RT G H M K H G
H71 : CongA F K H G H M
H70 : CongA F K H H K F
H69 : nCol F K H
H68 : nCol H K F
H67 : CongA G H M H K F
H66 : RT F K H K H G
H65 : OS F G K H
H64 : TP K H F G
H63 : Par K H F G
H62 : Par F G K H
H61 : Cong K s H K
H60 : BetS H K s
s : Point
H59 : neq H K
H58 : Par K F H G
H57 : Par F K H G
H56 : CongA H K F G H M
H55 : CongA J E N G H M
H54 : BetS B e C
H53 : TS M G H K
H52 : Midpoint B e C
H51 : EF D B e C G H M L
H50 : CongA G H M J E N
H49 : PG G H M L
M,L,e : Point
H48 : nCol G H K
H47 : nCol H G K
H46 : nCol K H G
H45 : Par F K H G
H44 : Triangle D B C
H43 : nCol D B C
H42 : OS S F K H
H41 : CongA H K F J E N
H40 : EF A B m D F K H G
H39 : PG F K H G
F,G : Point
H38 : nCol S K H
H37 : nCol H K S
H36 : neq H K
H35 : neq K H
H34 : Col R K K
H33 : eq K K
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (nCol H M L) by (forward_using lemma_parallelNC).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (Col R K K) by (conclude_def Col ).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (neq H K) by (conclude lemma_inequalitysymmetric).
assert (nCol H K S) by (conclude lemma_NChelper).
assert (nCol S K H) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F G, (PG F K H G /\\ EF A B m D F K H G /\\ CongA H K F J E N /\\ OS S F K H)) by (conclude proposition_42B);destruct Tf as [F[G]];spliter.
assert (nCol D B C) by (forward_using lemma_NCorder).
assert (Triangle D B C) by (conclude_def Triangle ).
assert (Par F K H G) by (conclude_def PG ).
assert (nCol K H G) by (forward_using lemma_parallelNC).
assert (nCol H G K) by (forward_using lemma_NCorder).
assert (nCol G H K) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists M L e, (PG G H M L /\\ CongA G H M J E N /\\ EF D B e C G H M L /\\ Midpoint B e C /\\ TS M G H K)) by (conclude proposition_44);destruct Tf as [M[L[e]]];spliter.
assert (BetS B e C) by (conclude_def Midpoint ).
assert (CongA J E N G H M) by (conclude lemma_equalanglessymmetric).
assert (CongA H K F G H M) by (conclude lemma_equalanglestransitive).
assert (Par F K H G) by (conclude_def PG ).
assert (Par K F H G) by (forward_using lemma_parallelflip).
assert (neq H K) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists s, (BetS H K s /\\ Cong K s H K)) by (conclude lemma_extension);destruct Tf as [s];spliter.
assert (Par F G K H) by (conclude_def PG ).
assert (Par K H F G) by (conclude lemma_parallelsymmetric).
assert (TP K H F G) by (conclude lemma_paralleldef2B).
assert (OS F G K H) by (conclude_def TP ).
assert (RT F K H K H G) by (conclude proposition_29C).
assert (CongA G H M H K F) by (conclude lemma_equalanglessymmetric).
assert (nCol H K F) by (conclude lemma_equalanglesNC).
assert (nCol F K H) by (forward_using lemma_NCorder).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H G H M) by (conclude lemma_equalanglestransitive).
assert (RT G H M K H G) by (conclude lemma_RTcongruence).
assert (RT K H G G H M) by (conclude lemma_RTsymmetric).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (neq H G) by (forward_using lemma_NCdistinct).
assert (Out H G G) by (conclude lemma_ray4).
assert (BetS K H M) by (conclude proposition_14).
assert (neq F K) by (forward_using lemma_NCdistinct).
assert (nCol G H M) by (conclude lemma_equalanglesNC).
assert (neq G H) by (forward_using lemma_NCdistinct).
assert (Par G H M L) by (conclude_def PG ).
assert (nCol H M L) by (forward_using lemma_parallelNC).

*****
H82 : nCol H M L
H81 : Par G H M L
H80 : neq G H
H79 : nCol G H M
H78 : neq F K
H77 : BetS K H M
H76 : Out H G G
H75 : neq H G
H74 : eq G G
H73 : RT K H G G H M
H72 : RT G H M K H G
H71 : CongA F K H G H M
H70 : CongA F K H H K F
H69 : nCol F K H
H68 : nCol H K F
H67 : CongA G H M H K F
H66 : RT F K H K H G
H65 : OS F G K H
H64 : TP K H F G
H63 : Par K H F G
H62 : Par F G K H
H61 : Cong K s H K
H60 : BetS H K s
s : Point
H59 : neq H K
H58 : Par K F H G
H57 : Par F K H G
H56 : CongA H K F G H M
H55 : CongA J E N G H M
H54 : BetS B e C
H53 : TS M G H K
H52 : Midpoint B e C
H51 : EF D B e C G H M L
H50 : CongA G H M J E N
H49 : PG G H M L
M,L,e : Point
H48 : nCol G H K
H47 : nCol H G K
H46 : nCol K H G
H45 : Par F K H G
H44 : Triangle D B C
H43 : nCol D B C
H42 : OS S F K H
H41 : CongA H K F J E N
H40 : EF A B m D F K H G
H39 : PG F K H G
F,G : Point
H38 : nCol S K H
H37 : nCol H K S
H36 : neq H K
H35 : neq K H
H34 : Col R K K
H33 : eq K K
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (neq L M) by (forward_using lemma_NCdistinct).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (Col R K K) by (conclude_def Col ).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (neq H K) by (conclude lemma_inequalitysymmetric).
assert (nCol H K S) by (conclude lemma_NChelper).
assert (nCol S K H) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F G, (PG F K H G /\\ EF A B m D F K H G /\\ CongA H K F J E N /\\ OS S F K H)) by (conclude proposition_42B);destruct Tf as [F[G]];spliter.
assert (nCol D B C) by (forward_using lemma_NCorder).
assert (Triangle D B C) by (conclude_def Triangle ).
assert (Par F K H G) by (conclude_def PG ).
assert (nCol K H G) by (forward_using lemma_parallelNC).
assert (nCol H G K) by (forward_using lemma_NCorder).
assert (nCol G H K) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists M L e, (PG G H M L /\\ CongA G H M J E N /\\ EF D B e C G H M L /\\ Midpoint B e C /\\ TS M G H K)) by (conclude proposition_44);destruct Tf as [M[L[e]]];spliter.
assert (BetS B e C) by (conclude_def Midpoint ).
assert (CongA J E N G H M) by (conclude lemma_equalanglessymmetric).
assert (CongA H K F G H M) by (conclude lemma_equalanglestransitive).
assert (Par F K H G) by (conclude_def PG ).
assert (Par K F H G) by (forward_using lemma_parallelflip).
assert (neq H K) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists s, (BetS H K s /\\ Cong K s H K)) by (conclude lemma_extension);destruct Tf as [s];spliter.
assert (Par F G K H) by (conclude_def PG ).
assert (Par K H F G) by (conclude lemma_parallelsymmetric).
assert (TP K H F G) by (conclude lemma_paralleldef2B).
assert (OS F G K H) by (conclude_def TP ).
assert (RT F K H K H G) by (conclude proposition_29C).
assert (CongA G H M H K F) by (conclude lemma_equalanglessymmetric).
assert (nCol H K F) by (conclude lemma_equalanglesNC).
assert (nCol F K H) by (forward_using lemma_NCorder).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H G H M) by (conclude lemma_equalanglestransitive).
assert (RT G H M K H G) by (conclude lemma_RTcongruence).
assert (RT K H G G H M) by (conclude lemma_RTsymmetric).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (neq H G) by (forward_using lemma_NCdistinct).
assert (Out H G G) by (conclude lemma_ray4).
assert (BetS K H M) by (conclude proposition_14).
assert (neq F K) by (forward_using lemma_NCdistinct).
assert (nCol G H M) by (conclude lemma_equalanglesNC).
assert (neq G H) by (forward_using lemma_NCdistinct).
assert (Par G H M L) by (conclude_def PG ).
assert (nCol H M L) by (forward_using lemma_parallelNC).
assert (neq L M) by (forward_using lemma_NCdistinct).

*****
H83 : neq L M
H82 : nCol H M L
H81 : Par G H M L
H80 : neq G H
H79 : nCol G H M
H78 : neq F K
H77 : BetS K H M
H76 : Out H G G
H75 : neq H G
H74 : eq G G
H73 : RT K H G G H M
H72 : RT G H M K H G
H71 : CongA F K H G H M
H70 : CongA F K H H K F
H69 : nCol F K H
H68 : nCol H K F
H67 : CongA G H M H K F
H66 : RT F K H K H G
H65 : OS F G K H
H64 : TP K H F G
H63 : Par K H F G
H62 : Par F G K H
H61 : Cong K s H K
H60 : BetS H K s
s : Point
H59 : neq H K
H58 : Par K F H G
H57 : Par F K H G
H56 : CongA H K F G H M
H55 : CongA J E N G H M
H54 : BetS B e C
H53 : TS M G H K
H52 : Midpoint B e C
H51 : EF D B e C G H M L
H50 : CongA G H M J E N
H49 : PG G H M L
M,L,e : Point
H48 : nCol G H K
H47 : nCol H G K
H46 : nCol K H G
H45 : Par F K H G
H44 : Triangle D B C
H43 : nCol D B C
H42 : OS S F K H
H41 : CongA H K F J E N
H40 : EF A B m D F K H G
H39 : PG F K H G
F,G : Point
H38 : nCol S K H
H37 : nCol H K S
H36 : neq H K
H35 : neq K H
H34 : Col R K K
H33 : eq K K
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (eq K K) by (conclude cn_equalityreflexive).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (Col R K K) by (conclude_def Col ).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (neq H K) by (conclude lemma_inequalitysymmetric).
assert (nCol H K S) by (conclude lemma_NChelper).
assert (nCol S K H) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F G, (PG F K H G /\\ EF A B m D F K H G /\\ CongA H K F J E N /\\ OS S F K H)) by (conclude proposition_42B);destruct Tf as [F[G]];spliter.
assert (nCol D B C) by (forward_using lemma_NCorder).
assert (Triangle D B C) by (conclude_def Triangle ).
assert (Par F K H G) by (conclude_def PG ).
assert (nCol K H G) by (forward_using lemma_parallelNC).
assert (nCol H G K) by (forward_using lemma_NCorder).
assert (nCol G H K) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists M L e, (PG G H M L /\\ CongA G H M J E N /\\ EF D B e C G H M L /\\ Midpoint B e C /\\ TS M G H K)) by (conclude proposition_44);destruct Tf as [M[L[e]]];spliter.
assert (BetS B e C) by (conclude_def Midpoint ).
assert (CongA J E N G H M) by (conclude lemma_equalanglessymmetric).
assert (CongA H K F G H M) by (conclude lemma_equalanglestransitive).
assert (Par F K H G) by (conclude_def PG ).
assert (Par K F H G) by (forward_using lemma_parallelflip).
assert (neq H K) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists s, (BetS H K s /\\ Cong K s H K)) by (conclude lemma_extension);destruct Tf as [s];spliter.
assert (Par F G K H) by (conclude_def PG ).
assert (Par K H F G) by (conclude lemma_parallelsymmetric).
assert (TP K H F G) by (conclude lemma_paralleldef2B).
assert (OS F G K H) by (conclude_def TP ).
assert (RT F K H K H G) by (conclude proposition_29C).
assert (CongA G H M H K F) by (conclude lemma_equalanglessymmetric).
assert (nCol H K F) by (conclude lemma_equalanglesNC).
assert (nCol F K H) by (forward_using lemma_NCorder).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H G H M) by (conclude lemma_equalanglestransitive).
assert (RT G H M K H G) by (conclude lemma_RTcongruence).
assert (RT K H G G H M) by (conclude lemma_RTsymmetric).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (neq H G) by (forward_using lemma_NCdistinct).
assert (Out H G G) by (conclude lemma_ray4).
assert (BetS K H M) by (conclude proposition_14).
assert (neq F K) by (forward_using lemma_NCdistinct).
assert (nCol G H M) by (conclude lemma_equalanglesNC).
assert (neq G H) by (forward_using lemma_NCdistinct).
assert (Par G H M L) by (conclude_def PG ).
assert (nCol H M L) by (forward_using lemma_parallelNC).
assert (neq L M) by (forward_using lemma_NCdistinct).
assert (eq K K) by (conclude cn_equalityreflexive).

*****
H84 : eq K K
H83 : neq L M
H82 : nCol H M L
H81 : Par G H M L
H80 : neq G H
H79 : nCol G H M
H78 : neq F K
H77 : BetS K H M
H76 : Out H G G
H75 : neq H G
H74 : eq G G
H73 : RT K H G G H M
H72 : RT G H M K H G
H71 : CongA F K H G H M
H70 : CongA F K H H K F
H69 : nCol F K H
H68 : nCol H K F
H67 : CongA G H M H K F
H66 : RT F K H K H G
H65 : OS F G K H
H64 : TP K H F G
H63 : Par K H F G
H62 : Par F G K H
H61 : Cong K s H K
H60 : BetS H K s
s : Point
H59 : neq H K
H58 : Par K F H G
H57 : Par F K H G
H56 : CongA H K F G H M
H55 : CongA J E N G H M
H54 : BetS B e C
H53 : TS M G H K
H52 : Midpoint B e C
H51 : EF D B e C G H M L
H50 : CongA G H M J E N
H49 : PG G H M L
M,L,e : Point
H48 : nCol G H K
H47 : nCol H G K
H46 : nCol K H G
H45 : Par F K H G
H44 : Triangle D B C
H43 : nCol D B C
H42 : OS S F K H
H41 : CongA H K F J E N
H40 : EF A B m D F K H G
H39 : PG F K H G
F,G : Point
H38 : nCol S K H
H37 : nCol H K S
H36 : neq H K
H35 : neq K H
H34 : Col R K K
H33 : eq K K
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (eq H H) by (conclude cn_equalityreflexive).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (Col R K K) by (conclude_def Col ).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (neq H K) by (conclude lemma_inequalitysymmetric).
assert (nCol H K S) by (conclude lemma_NChelper).
assert (nCol S K H) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F G, (PG F K H G /\\ EF A B m D F K H G /\\ CongA H K F J E N /\\ OS S F K H)) by (conclude proposition_42B);destruct Tf as [F[G]];spliter.
assert (nCol D B C) by (forward_using lemma_NCorder).
assert (Triangle D B C) by (conclude_def Triangle ).
assert (Par F K H G) by (conclude_def PG ).
assert (nCol K H G) by (forward_using lemma_parallelNC).
assert (nCol H G K) by (forward_using lemma_NCorder).
assert (nCol G H K) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists M L e, (PG G H M L /\\ CongA G H M J E N /\\ EF D B e C G H M L /\\ Midpoint B e C /\\ TS M G H K)) by (conclude proposition_44);destruct Tf as [M[L[e]]];spliter.
assert (BetS B e C) by (conclude_def Midpoint ).
assert (CongA J E N G H M) by (conclude lemma_equalanglessymmetric).
assert (CongA H K F G H M) by (conclude lemma_equalanglestransitive).
assert (Par F K H G) by (conclude_def PG ).
assert (Par K F H G) by (forward_using lemma_parallelflip).
assert (neq H K) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists s, (BetS H K s /\\ Cong K s H K)) by (conclude lemma_extension);destruct Tf as [s];spliter.
assert (Par F G K H) by (conclude_def PG ).
assert (Par K H F G) by (conclude lemma_parallelsymmetric).
assert (TP K H F G) by (conclude lemma_paralleldef2B).
assert (OS F G K H) by (conclude_def TP ).
assert (RT F K H K H G) by (conclude proposition_29C).
assert (CongA G H M H K F) by (conclude lemma_equalanglessymmetric).
assert (nCol H K F) by (conclude lemma_equalanglesNC).
assert (nCol F K H) by (forward_using lemma_NCorder).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H G H M) by (conclude lemma_equalanglestransitive).
assert (RT G H M K H G) by (conclude lemma_RTcongruence).
assert (RT K H G G H M) by (conclude lemma_RTsymmetric).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (neq H G) by (forward_using lemma_NCdistinct).
assert (Out H G G) by (conclude lemma_ray4).
assert (BetS K H M) by (conclude proposition_14).
assert (neq F K) by (forward_using lemma_NCdistinct).
assert (nCol G H M) by (conclude lemma_equalanglesNC).
assert (neq G H) by (forward_using lemma_NCdistinct).
assert (Par G H M L) by (conclude_def PG ).
assert (nCol H M L) by (forward_using lemma_parallelNC).
assert (neq L M) by (forward_using lemma_NCdistinct).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (eq H H) by (conclude cn_equalityreflexive).

*****
H85 : eq H H
H84 : eq K K
H83 : neq L M
H82 : nCol H M L
H81 : Par G H M L
H80 : neq G H
H79 : nCol G H M
H78 : neq F K
H77 : BetS K H M
H76 : Out H G G
H75 : neq H G
H74 : eq G G
H73 : RT K H G G H M
H72 : RT G H M K H G
H71 : CongA F K H G H M
H70 : CongA F K H H K F
H69 : nCol F K H
H68 : nCol H K F
H67 : CongA G H M H K F
H66 : RT F K H K H G
H65 : OS F G K H
H64 : TP K H F G
H63 : Par K H F G
H62 : Par F G K H
H61 : Cong K s H K
H60 : BetS H K s
s : Point
H59 : neq H K
H58 : Par K F H G
H57 : Par F K H G
H56 : CongA H K F G H M
H55 : CongA J E N G H M
H54 : BetS B e C
H53 : TS M G H K
H52 : Midpoint B e C
H51 : EF D B e C G H M L
H50 : CongA G H M J E N
H49 : PG G H M L
M,L,e : Point
H48 : nCol G H K
H47 : nCol H G K
H46 : nCol K H G
H45 : Par F K H G
H44 : Triangle D B C
H43 : nCol D B C
H42 : OS S F K H
H41 : CongA H K F J E N
H40 : EF A B m D F K H G
H39 : PG F K H G
F,G : Point
H38 : nCol S K H
H37 : nCol H K S
H36 : neq H K
H35 : neq K H
H34 : Col R K K
H33 : eq K K
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (eq M M) by (conclude cn_equalityreflexive).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (Col R K K) by (conclude_def Col ).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (neq H K) by (conclude lemma_inequalitysymmetric).
assert (nCol H K S) by (conclude lemma_NChelper).
assert (nCol S K H) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F G, (PG F K H G /\\ EF A B m D F K H G /\\ CongA H K F J E N /\\ OS S F K H)) by (conclude proposition_42B);destruct Tf as [F[G]];spliter.
assert (nCol D B C) by (forward_using lemma_NCorder).
assert (Triangle D B C) by (conclude_def Triangle ).
assert (Par F K H G) by (conclude_def PG ).
assert (nCol K H G) by (forward_using lemma_parallelNC).
assert (nCol H G K) by (forward_using lemma_NCorder).
assert (nCol G H K) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists M L e, (PG G H M L /\\ CongA G H M J E N /\\ EF D B e C G H M L /\\ Midpoint B e C /\\ TS M G H K)) by (conclude proposition_44);destruct Tf as [M[L[e]]];spliter.
assert (BetS B e C) by (conclude_def Midpoint ).
assert (CongA J E N G H M) by (conclude lemma_equalanglessymmetric).
assert (CongA H K F G H M) by (conclude lemma_equalanglestransitive).
assert (Par F K H G) by (conclude_def PG ).
assert (Par K F H G) by (forward_using lemma_parallelflip).
assert (neq H K) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists s, (BetS H K s /\\ Cong K s H K)) by (conclude lemma_extension);destruct Tf as [s];spliter.
assert (Par F G K H) by (conclude_def PG ).
assert (Par K H F G) by (conclude lemma_parallelsymmetric).
assert (TP K H F G) by (conclude lemma_paralleldef2B).
assert (OS F G K H) by (conclude_def TP ).
assert (RT F K H K H G) by (conclude proposition_29C).
assert (CongA G H M H K F) by (conclude lemma_equalanglessymmetric).
assert (nCol H K F) by (conclude lemma_equalanglesNC).
assert (nCol F K H) by (forward_using lemma_NCorder).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H G H M) by (conclude lemma_equalanglestransitive).
assert (RT G H M K H G) by (conclude lemma_RTcongruence).
assert (RT K H G G H M) by (conclude lemma_RTsymmetric).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (neq H G) by (forward_using lemma_NCdistinct).
assert (Out H G G) by (conclude lemma_ray4).
assert (BetS K H M) by (conclude proposition_14).
assert (neq F K) by (forward_using lemma_NCdistinct).
assert (nCol G H M) by (conclude lemma_equalanglesNC).
assert (neq G H) by (forward_using lemma_NCdistinct).
assert (Par G H M L) by (conclude_def PG ).
assert (nCol H M L) by (forward_using lemma_parallelNC).
assert (neq L M) by (forward_using lemma_NCdistinct).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (eq H H) by (conclude cn_equalityreflexive).
assert (eq M M) by (conclude cn_equalityreflexive).

*****
H86 : eq M M
H85 : eq H H
H84 : eq K K
H83 : neq L M
H82 : nCol H M L
H81 : Par G H M L
H80 : neq G H
H79 : nCol G H M
H78 : neq F K
H77 : BetS K H M
H76 : Out H G G
H75 : neq H G
H74 : eq G G
H73 : RT K H G G H M
H72 : RT G H M K H G
H71 : CongA F K H G H M
H70 : CongA F K H H K F
H69 : nCol F K H
H68 : nCol H K F
H67 : CongA G H M H K F
H66 : RT F K H K H G
H65 : OS F G K H
H64 : TP K H F G
H63 : Par K H F G
H62 : Par F G K H
H61 : Cong K s H K
H60 : BetS H K s
s : Point
H59 : neq H K
H58 : Par K F H G
H57 : Par F K H G
H56 : CongA H K F G H M
H55 : CongA J E N G H M
H54 : BetS B e C
H53 : TS M G H K
H52 : Midpoint B e C
H51 : EF D B e C G H M L
H50 : CongA G H M J E N
H49 : PG G H M L
M,L,e : Point
H48 : nCol G H K
H47 : nCol H G K
H46 : nCol K H G
H45 : Par F K H G
H44 : Triangle D B C
H43 : nCol D B C
H42 : OS S F K H
H41 : CongA H K F J E N
H40 : EF A B m D F K H G
H39 : PG F K H G
F,G : Point
H38 : nCol S K H
H37 : nCol H K S
H36 : neq H K
H35 : neq K H
H34 : Col R K K
H33 : eq K K
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (Col F K K) by (conclude_def Col ).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (Col R K K) by (conclude_def Col ).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (neq H K) by (conclude lemma_inequalitysymmetric).
assert (nCol H K S) by (conclude lemma_NChelper).
assert (nCol S K H) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F G, (PG F K H G /\\ EF A B m D F K H G /\\ CongA H K F J E N /\\ OS S F K H)) by (conclude proposition_42B);destruct Tf as [F[G]];spliter.
assert (nCol D B C) by (forward_using lemma_NCorder).
assert (Triangle D B C) by (conclude_def Triangle ).
assert (Par F K H G) by (conclude_def PG ).
assert (nCol K H G) by (forward_using lemma_parallelNC).
assert (nCol H G K) by (forward_using lemma_NCorder).
assert (nCol G H K) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists M L e, (PG G H M L /\\ CongA G H M J E N /\\ EF D B e C G H M L /\\ Midpoint B e C /\\ TS M G H K)) by (conclude proposition_44);destruct Tf as [M[L[e]]];spliter.
assert (BetS B e C) by (conclude_def Midpoint ).
assert (CongA J E N G H M) by (conclude lemma_equalanglessymmetric).
assert (CongA H K F G H M) by (conclude lemma_equalanglestransitive).
assert (Par F K H G) by (conclude_def PG ).
assert (Par K F H G) by (forward_using lemma_parallelflip).
assert (neq H K) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists s, (BetS H K s /\\ Cong K s H K)) by (conclude lemma_extension);destruct Tf as [s];spliter.
assert (Par F G K H) by (conclude_def PG ).
assert (Par K H F G) by (conclude lemma_parallelsymmetric).
assert (TP K H F G) by (conclude lemma_paralleldef2B).
assert (OS F G K H) by (conclude_def TP ).
assert (RT F K H K H G) by (conclude proposition_29C).
assert (CongA G H M H K F) by (conclude lemma_equalanglessymmetric).
assert (nCol H K F) by (conclude lemma_equalanglesNC).
assert (nCol F K H) by (forward_using lemma_NCorder).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H G H M) by (conclude lemma_equalanglestransitive).
assert (RT G H M K H G) by (conclude lemma_RTcongruence).
assert (RT K H G G H M) by (conclude lemma_RTsymmetric).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (neq H G) by (forward_using lemma_NCdistinct).
assert (Out H G G) by (conclude lemma_ray4).
assert (BetS K H M) by (conclude proposition_14).
assert (neq F K) by (forward_using lemma_NCdistinct).
assert (nCol G H M) by (conclude lemma_equalanglesNC).
assert (neq G H) by (forward_using lemma_NCdistinct).
assert (Par G H M L) by (conclude_def PG ).
assert (nCol H M L) by (forward_using lemma_parallelNC).
assert (neq L M) by (forward_using lemma_NCdistinct).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (eq H H) by (conclude cn_equalityreflexive).
assert (eq M M) by (conclude cn_equalityreflexive).
assert (Col F K K) by (conclude_def Col ).

*****
H87 : Col F K K
H86 : eq M M
H85 : eq H H
H84 : eq K K
H83 : neq L M
H82 : nCol H M L
H81 : Par G H M L
H80 : neq G H
H79 : nCol G H M
H78 : neq F K
H77 : BetS K H M
H76 : Out H G G
H75 : neq H G
H74 : eq G G
H73 : RT K H G G H M
H72 : RT G H M K H G
H71 : CongA F K H G H M
H70 : CongA F K H H K F
H69 : nCol F K H
H68 : nCol H K F
H67 : CongA G H M H K F
H66 : RT F K H K H G
H65 : OS F G K H
H64 : TP K H F G
H63 : Par K H F G
H62 : Par F G K H
H61 : Cong K s H K
H60 : BetS H K s
s : Point
H59 : neq H K
H58 : Par K F H G
H57 : Par F K H G
H56 : CongA H K F G H M
H55 : CongA J E N G H M
H54 : BetS B e C
H53 : TS M G H K
H52 : Midpoint B e C
H51 : EF D B e C G H M L
H50 : CongA G H M J E N
H49 : PG G H M L
M,L,e : Point
H48 : nCol G H K
H47 : nCol H G K
H46 : nCol K H G
H45 : Par F K H G
H44 : Triangle D B C
H43 : nCol D B C
H42 : OS S F K H
H41 : CongA H K F J E N
H40 : EF A B m D F K H G
H39 : PG F K H G
F,G : Point
H38 : nCol S K H
H37 : nCol H K S
H36 : neq H K
H35 : neq K H
H34 : Col R K K
H33 : eq K K
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (Col G H H) by (conclude_def Col ).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (Col R K K) by (conclude_def Col ).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (neq H K) by (conclude lemma_inequalitysymmetric).
assert (nCol H K S) by (conclude lemma_NChelper).
assert (nCol S K H) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F G, (PG F K H G /\\ EF A B m D F K H G /\\ CongA H K F J E N /\\ OS S F K H)) by (conclude proposition_42B);destruct Tf as [F[G]];spliter.
assert (nCol D B C) by (forward_using lemma_NCorder).
assert (Triangle D B C) by (conclude_def Triangle ).
assert (Par F K H G) by (conclude_def PG ).
assert (nCol K H G) by (forward_using lemma_parallelNC).
assert (nCol H G K) by (forward_using lemma_NCorder).
assert (nCol G H K) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists M L e, (PG G H M L /\\ CongA G H M J E N /\\ EF D B e C G H M L /\\ Midpoint B e C /\\ TS M G H K)) by (conclude proposition_44);destruct Tf as [M[L[e]]];spliter.
assert (BetS B e C) by (conclude_def Midpoint ).
assert (CongA J E N G H M) by (conclude lemma_equalanglessymmetric).
assert (CongA H K F G H M) by (conclude lemma_equalanglestransitive).
assert (Par F K H G) by (conclude_def PG ).
assert (Par K F H G) by (forward_using lemma_parallelflip).
assert (neq H K) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists s, (BetS H K s /\\ Cong K s H K)) by (conclude lemma_extension);destruct Tf as [s];spliter.
assert (Par F G K H) by (conclude_def PG ).
assert (Par K H F G) by (conclude lemma_parallelsymmetric).
assert (TP K H F G) by (conclude lemma_paralleldef2B).
assert (OS F G K H) by (conclude_def TP ).
assert (RT F K H K H G) by (conclude proposition_29C).
assert (CongA G H M H K F) by (conclude lemma_equalanglessymmetric).
assert (nCol H K F) by (conclude lemma_equalanglesNC).
assert (nCol F K H) by (forward_using lemma_NCorder).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H G H M) by (conclude lemma_equalanglestransitive).
assert (RT G H M K H G) by (conclude lemma_RTcongruence).
assert (RT K H G G H M) by (conclude lemma_RTsymmetric).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (neq H G) by (forward_using lemma_NCdistinct).
assert (Out H G G) by (conclude lemma_ray4).
assert (BetS K H M) by (conclude proposition_14).
assert (neq F K) by (forward_using lemma_NCdistinct).
assert (nCol G H M) by (conclude lemma_equalanglesNC).
assert (neq G H) by (forward_using lemma_NCdistinct).
assert (Par G H M L) by (conclude_def PG ).
assert (nCol H M L) by (forward_using lemma_parallelNC).
assert (neq L M) by (forward_using lemma_NCdistinct).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (eq H H) by (conclude cn_equalityreflexive).
assert (eq M M) by (conclude cn_equalityreflexive).
assert (Col F K K) by (conclude_def Col ).
assert (Col G H H) by (conclude_def Col ).

*****
H88 : Col G H H
H87 : Col F K K
H86 : eq M M
H85 : eq H H
H84 : eq K K
H83 : neq L M
H82 : nCol H M L
H81 : Par G H M L
H80 : neq G H
H79 : nCol G H M
H78 : neq F K
H77 : BetS K H M
H76 : Out H G G
H75 : neq H G
H74 : eq G G
H73 : RT K H G G H M
H72 : RT G H M K H G
H71 : CongA F K H G H M
H70 : CongA F K H H K F
H69 : nCol F K H
H68 : nCol H K F
H67 : CongA G H M H K F
H66 : RT F K H K H G
H65 : OS F G K H
H64 : TP K H F G
H63 : Par K H F G
H62 : Par F G K H
H61 : Cong K s H K
H60 : BetS H K s
s : Point
H59 : neq H K
H58 : Par K F H G
H57 : Par F K H G
H56 : CongA H K F G H M
H55 : CongA J E N G H M
H54 : BetS B e C
H53 : TS M G H K
H52 : Midpoint B e C
H51 : EF D B e C G H M L
H50 : CongA G H M J E N
H49 : PG G H M L
M,L,e : Point
H48 : nCol G H K
H47 : nCol H G K
H46 : nCol K H G
H45 : Par F K H G
H44 : Triangle D B C
H43 : nCol D B C
H42 : OS S F K H
H41 : CongA H K F J E N
H40 : EF A B m D F K H G
H39 : PG F K H G
F,G : Point
H38 : nCol S K H
H37 : nCol H K S
H36 : neq H K
H35 : neq K H
H34 : Col R K K
H33 : eq K K
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (Col L M M) by (conclude_def Col ).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (Col R K K) by (conclude_def Col ).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (neq H K) by (conclude lemma_inequalitysymmetric).
assert (nCol H K S) by (conclude lemma_NChelper).
assert (nCol S K H) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F G, (PG F K H G /\\ EF A B m D F K H G /\\ CongA H K F J E N /\\ OS S F K H)) by (conclude proposition_42B);destruct Tf as [F[G]];spliter.
assert (nCol D B C) by (forward_using lemma_NCorder).
assert (Triangle D B C) by (conclude_def Triangle ).
assert (Par F K H G) by (conclude_def PG ).
assert (nCol K H G) by (forward_using lemma_parallelNC).
assert (nCol H G K) by (forward_using lemma_NCorder).
assert (nCol G H K) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists M L e, (PG G H M L /\\ CongA G H M J E N /\\ EF D B e C G H M L /\\ Midpoint B e C /\\ TS M G H K)) by (conclude proposition_44);destruct Tf as [M[L[e]]];spliter.
assert (BetS B e C) by (conclude_def Midpoint ).
assert (CongA J E N G H M) by (conclude lemma_equalanglessymmetric).
assert (CongA H K F G H M) by (conclude lemma_equalanglestransitive).
assert (Par F K H G) by (conclude_def PG ).
assert (Par K F H G) by (forward_using lemma_parallelflip).
assert (neq H K) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists s, (BetS H K s /\\ Cong K s H K)) by (conclude lemma_extension);destruct Tf as [s];spliter.
assert (Par F G K H) by (conclude_def PG ).
assert (Par K H F G) by (conclude lemma_parallelsymmetric).
assert (TP K H F G) by (conclude lemma_paralleldef2B).
assert (OS F G K H) by (conclude_def TP ).
assert (RT F K H K H G) by (conclude proposition_29C).
assert (CongA G H M H K F) by (conclude lemma_equalanglessymmetric).
assert (nCol H K F) by (conclude lemma_equalanglesNC).
assert (nCol F K H) by (forward_using lemma_NCorder).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H G H M) by (conclude lemma_equalanglestransitive).
assert (RT G H M K H G) by (conclude lemma_RTcongruence).
assert (RT K H G G H M) by (conclude lemma_RTsymmetric).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (neq H G) by (forward_using lemma_NCdistinct).
assert (Out H G G) by (conclude lemma_ray4).
assert (BetS K H M) by (conclude proposition_14).
assert (neq F K) by (forward_using lemma_NCdistinct).
assert (nCol G H M) by (conclude lemma_equalanglesNC).
assert (neq G H) by (forward_using lemma_NCdistinct).
assert (Par G H M L) by (conclude_def PG ).
assert (nCol H M L) by (forward_using lemma_parallelNC).
assert (neq L M) by (forward_using lemma_NCdistinct).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (eq H H) by (conclude cn_equalityreflexive).
assert (eq M M) by (conclude cn_equalityreflexive).
assert (Col F K K) by (conclude_def Col ).
assert (Col G H H) by (conclude_def Col ).
assert (Col L M M) by (conclude_def Col ).

*****
H89 : Col L M M
H88 : Col G H H
H87 : Col F K K
H86 : eq M M
H85 : eq H H
H84 : eq K K
H83 : neq L M
H82 : nCol H M L
H81 : Par G H M L
H80 : neq G H
H79 : nCol G H M
H78 : neq F K
H77 : BetS K H M
H76 : Out H G G
H75 : neq H G
H74 : eq G G
H73 : RT K H G G H M
H72 : RT G H M K H G
H71 : CongA F K H G H M
H70 : CongA F K H H K F
H69 : nCol F K H
H68 : nCol H K F
H67 : CongA G H M H K F
H66 : RT F K H K H G
H65 : OS F G K H
H64 : TP K H F G
H63 : Par K H F G
H62 : Par F G K H
H61 : Cong K s H K
H60 : BetS H K s
s : Point
H59 : neq H K
H58 : Par K F H G
H57 : Par F K H G
H56 : CongA H K F G H M
H55 : CongA J E N G H M
H54 : BetS B e C
H53 : TS M G H K
H52 : Midpoint B e C
H51 : EF D B e C G H M L
H50 : CongA G H M J E N
H49 : PG G H M L
M,L,e : Point
H48 : nCol G H K
H47 : nCol H G K
H46 : nCol K H G
H45 : Par F K H G
H44 : Triangle D B C
H43 : nCol D B C
H42 : OS S F K H
H41 : CongA H K F J E N
H40 : EF A B m D F K H G
H39 : PG F K H G
F,G : Point
H38 : nCol S K H
H37 : nCol H K S
H36 : neq H K
H35 : neq K H
H34 : Col R K K
H33 : eq K K
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (Par F K G H) by (forward_using lemma_parallelflip).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (Col R K K) by (conclude_def Col ).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (neq H K) by (conclude lemma_inequalitysymmetric).
assert (nCol H K S) by (conclude lemma_NChelper).
assert (nCol S K H) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F G, (PG F K H G /\\ EF A B m D F K H G /\\ CongA H K F J E N /\\ OS S F K H)) by (conclude proposition_42B);destruct Tf as [F[G]];spliter.
assert (nCol D B C) by (forward_using lemma_NCorder).
assert (Triangle D B C) by (conclude_def Triangle ).
assert (Par F K H G) by (conclude_def PG ).
assert (nCol K H G) by (forward_using lemma_parallelNC).
assert (nCol H G K) by (forward_using lemma_NCorder).
assert (nCol G H K) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists M L e, (PG G H M L /\\ CongA G H M J E N /\\ EF D B e C G H M L /\\ Midpoint B e C /\\ TS M G H K)) by (conclude proposition_44);destruct Tf as [M[L[e]]];spliter.
assert (BetS B e C) by (conclude_def Midpoint ).
assert (CongA J E N G H M) by (conclude lemma_equalanglessymmetric).
assert (CongA H K F G H M) by (conclude lemma_equalanglestransitive).
assert (Par F K H G) by (conclude_def PG ).
assert (Par K F H G) by (forward_using lemma_parallelflip).
assert (neq H K) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists s, (BetS H K s /\\ Cong K s H K)) by (conclude lemma_extension);destruct Tf as [s];spliter.
assert (Par F G K H) by (conclude_def PG ).
assert (Par K H F G) by (conclude lemma_parallelsymmetric).
assert (TP K H F G) by (conclude lemma_paralleldef2B).
assert (OS F G K H) by (conclude_def TP ).
assert (RT F K H K H G) by (conclude proposition_29C).
assert (CongA G H M H K F) by (conclude lemma_equalanglessymmetric).
assert (nCol H K F) by (conclude lemma_equalanglesNC).
assert (nCol F K H) by (forward_using lemma_NCorder).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H G H M) by (conclude lemma_equalanglestransitive).
assert (RT G H M K H G) by (conclude lemma_RTcongruence).
assert (RT K H G G H M) by (conclude lemma_RTsymmetric).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (neq H G) by (forward_using lemma_NCdistinct).
assert (Out H G G) by (conclude lemma_ray4).
assert (BetS K H M) by (conclude proposition_14).
assert (neq F K) by (forward_using lemma_NCdistinct).
assert (nCol G H M) by (conclude lemma_equalanglesNC).
assert (neq G H) by (forward_using lemma_NCdistinct).
assert (Par G H M L) by (conclude_def PG ).
assert (nCol H M L) by (forward_using lemma_parallelNC).
assert (neq L M) by (forward_using lemma_NCdistinct).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (eq H H) by (conclude cn_equalityreflexive).
assert (eq M M) by (conclude cn_equalityreflexive).
assert (Col F K K) by (conclude_def Col ).
assert (Col G H H) by (conclude_def Col ).
assert (Col L M M) by (conclude_def Col ).
assert (Par F K G H) by (forward_using lemma_parallelflip).

*****
H90 : Par F K G H
H89 : Col L M M
H88 : Col G H H
H87 : Col F K K
H86 : eq M M
H85 : eq H H
H84 : eq K K
H83 : neq L M
H82 : nCol H M L
H81 : Par G H M L
H80 : neq G H
H79 : nCol G H M
H78 : neq F K
H77 : BetS K H M
H76 : Out H G G
H75 : neq H G
H74 : eq G G
H73 : RT K H G G H M
H72 : RT G H M K H G
H71 : CongA F K H G H M
H70 : CongA F K H H K F
H69 : nCol F K H
H68 : nCol H K F
H67 : CongA G H M H K F
H66 : RT F K H K H G
H65 : OS F G K H
H64 : TP K H F G
H63 : Par K H F G
H62 : Par F G K H
H61 : Cong K s H K
H60 : BetS H K s
s : Point
H59 : neq H K
H58 : Par K F H G
H57 : Par F K H G
H56 : CongA H K F G H M
H55 : CongA J E N G H M
H54 : BetS B e C
H53 : TS M G H K
H52 : Midpoint B e C
H51 : EF D B e C G H M L
H50 : CongA G H M J E N
H49 : PG G H M L
M,L,e : Point
H48 : nCol G H K
H47 : nCol H G K
H46 : nCol K H G
H45 : Par F K H G
H44 : Triangle D B C
H43 : nCol D B C
H42 : OS S F K H
H41 : CongA H K F J E N
H40 : EF A B m D F K H G
H39 : PG F K H G
F,G : Point
H38 : nCol S K H
H37 : nCol H K S
H36 : neq H K
H35 : neq K H
H34 : Col R K K
H33 : eq K K
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (Par M L G H) by (conclude lemma_parallelsymmetric).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (Col R K K) by (conclude_def Col ).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (neq H K) by (conclude lemma_inequalitysymmetric).
assert (nCol H K S) by (conclude lemma_NChelper).
assert (nCol S K H) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F G, (PG F K H G /\\ EF A B m D F K H G /\\ CongA H K F J E N /\\ OS S F K H)) by (conclude proposition_42B);destruct Tf as [F[G]];spliter.
assert (nCol D B C) by (forward_using lemma_NCorder).
assert (Triangle D B C) by (conclude_def Triangle ).
assert (Par F K H G) by (conclude_def PG ).
assert (nCol K H G) by (forward_using lemma_parallelNC).
assert (nCol H G K) by (forward_using lemma_NCorder).
assert (nCol G H K) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists M L e, (PG G H M L /\\ CongA G H M J E N /\\ EF D B e C G H M L /\\ Midpoint B e C /\\ TS M G H K)) by (conclude proposition_44);destruct Tf as [M[L[e]]];spliter.
assert (BetS B e C) by (conclude_def Midpoint ).
assert (CongA J E N G H M) by (conclude lemma_equalanglessymmetric).
assert (CongA H K F G H M) by (conclude lemma_equalanglestransitive).
assert (Par F K H G) by (conclude_def PG ).
assert (Par K F H G) by (forward_using lemma_parallelflip).
assert (neq H K) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists s, (BetS H K s /\\ Cong K s H K)) by (conclude lemma_extension);destruct Tf as [s];spliter.
assert (Par F G K H) by (conclude_def PG ).
assert (Par K H F G) by (conclude lemma_parallelsymmetric).
assert (TP K H F G) by (conclude lemma_paralleldef2B).
assert (OS F G K H) by (conclude_def TP ).
assert (RT F K H K H G) by (conclude proposition_29C).
assert (CongA G H M H K F) by (conclude lemma_equalanglessymmetric).
assert (nCol H K F) by (conclude lemma_equalanglesNC).
assert (nCol F K H) by (forward_using lemma_NCorder).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H G H M) by (conclude lemma_equalanglestransitive).
assert (RT G H M K H G) by (conclude lemma_RTcongruence).
assert (RT K H G G H M) by (conclude lemma_RTsymmetric).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (neq H G) by (forward_using lemma_NCdistinct).
assert (Out H G G) by (conclude lemma_ray4).
assert (BetS K H M) by (conclude proposition_14).
assert (neq F K) by (forward_using lemma_NCdistinct).
assert (nCol G H M) by (conclude lemma_equalanglesNC).
assert (neq G H) by (forward_using lemma_NCdistinct).
assert (Par G H M L) by (conclude_def PG ).
assert (nCol H M L) by (forward_using lemma_parallelNC).
assert (neq L M) by (forward_using lemma_NCdistinct).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (eq H H) by (conclude cn_equalityreflexive).
assert (eq M M) by (conclude cn_equalityreflexive).
assert (Col F K K) by (conclude_def Col ).
assert (Col G H H) by (conclude_def Col ).
assert (Col L M M) by (conclude_def Col ).
assert (Par F K G H) by (forward_using lemma_parallelflip).
assert (Par M L G H) by (conclude lemma_parallelsymmetric).

*****
H91 : Par M L G H
H90 : Par F K G H
H89 : Col L M M
H88 : Col G H H
H87 : Col F K K
H86 : eq M M
H85 : eq H H
H84 : eq K K
H83 : neq L M
H82 : nCol H M L
H81 : Par G H M L
H80 : neq G H
H79 : nCol G H M
H78 : neq F K
H77 : BetS K H M
H76 : Out H G G
H75 : neq H G
H74 : eq G G
H73 : RT K H G G H M
H72 : RT G H M K H G
H71 : CongA F K H G H M
H70 : CongA F K H H K F
H69 : nCol F K H
H68 : nCol H K F
H67 : CongA G H M H K F
H66 : RT F K H K H G
H65 : OS F G K H
H64 : TP K H F G
H63 : Par K H F G
H62 : Par F G K H
H61 : Cong K s H K
H60 : BetS H K s
s : Point
H59 : neq H K
H58 : Par K F H G
H57 : Par F K H G
H56 : CongA H K F G H M
H55 : CongA J E N G H M
H54 : BetS B e C
H53 : TS M G H K
H52 : Midpoint B e C
H51 : EF D B e C G H M L
H50 : CongA G H M J E N
H49 : PG G H M L
M,L,e : Point
H48 : nCol G H K
H47 : nCol H G K
H46 : nCol K H G
H45 : Par F K H G
H44 : Triangle D B C
H43 : nCol D B C
H42 : OS S F K H
H41 : CongA H K F J E N
H40 : EF A B m D F K H G
H39 : PG F K H G
F,G : Point
H38 : nCol S K H
H37 : nCol H K S
H36 : neq H K
H35 : neq K H
H34 : Col R K K
H33 : eq K K
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (Par L M G H) by (forward_using lemma_parallelflip).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (Col R K K) by (conclude_def Col ).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (neq H K) by (conclude lemma_inequalitysymmetric).
assert (nCol H K S) by (conclude lemma_NChelper).
assert (nCol S K H) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F G, (PG F K H G /\\ EF A B m D F K H G /\\ CongA H K F J E N /\\ OS S F K H)) by (conclude proposition_42B);destruct Tf as [F[G]];spliter.
assert (nCol D B C) by (forward_using lemma_NCorder).
assert (Triangle D B C) by (conclude_def Triangle ).
assert (Par F K H G) by (conclude_def PG ).
assert (nCol K H G) by (forward_using lemma_parallelNC).
assert (nCol H G K) by (forward_using lemma_NCorder).
assert (nCol G H K) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists M L e, (PG G H M L /\\ CongA G H M J E N /\\ EF D B e C G H M L /\\ Midpoint B e C /\\ TS M G H K)) by (conclude proposition_44);destruct Tf as [M[L[e]]];spliter.
assert (BetS B e C) by (conclude_def Midpoint ).
assert (CongA J E N G H M) by (conclude lemma_equalanglessymmetric).
assert (CongA H K F G H M) by (conclude lemma_equalanglestransitive).
assert (Par F K H G) by (conclude_def PG ).
assert (Par K F H G) by (forward_using lemma_parallelflip).
assert (neq H K) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists s, (BetS H K s /\\ Cong K s H K)) by (conclude lemma_extension);destruct Tf as [s];spliter.
assert (Par F G K H) by (conclude_def PG ).
assert (Par K H F G) by (conclude lemma_parallelsymmetric).
assert (TP K H F G) by (conclude lemma_paralleldef2B).
assert (OS F G K H) by (conclude_def TP ).
assert (RT F K H K H G) by (conclude proposition_29C).
assert (CongA G H M H K F) by (conclude lemma_equalanglessymmetric).
assert (nCol H K F) by (conclude lemma_equalanglesNC).
assert (nCol F K H) by (forward_using lemma_NCorder).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H G H M) by (conclude lemma_equalanglestransitive).
assert (RT G H M K H G) by (conclude lemma_RTcongruence).
assert (RT K H G G H M) by (conclude lemma_RTsymmetric).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (neq H G) by (forward_using lemma_NCdistinct).
assert (Out H G G) by (conclude lemma_ray4).
assert (BetS K H M) by (conclude proposition_14).
assert (neq F K) by (forward_using lemma_NCdistinct).
assert (nCol G H M) by (conclude lemma_equalanglesNC).
assert (neq G H) by (forward_using lemma_NCdistinct).
assert (Par G H M L) by (conclude_def PG ).
assert (nCol H M L) by (forward_using lemma_parallelNC).
assert (neq L M) by (forward_using lemma_NCdistinct).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (eq H H) by (conclude cn_equalityreflexive).
assert (eq M M) by (conclude cn_equalityreflexive).
assert (Col F K K) by (conclude_def Col ).
assert (Col G H H) by (conclude_def Col ).
assert (Col L M M) by (conclude_def Col ).
assert (Par F K G H) by (forward_using lemma_parallelflip).
assert (Par M L G H) by (conclude lemma_parallelsymmetric).
assert (Par L M G H) by (forward_using lemma_parallelflip).

*****
H92 : Par L M G H
H91 : Par M L G H
H90 : Par F K G H
H89 : Col L M M
H88 : Col G H H
H87 : Col F K K
H86 : eq M M
H85 : eq H H
H84 : eq K K
H83 : neq L M
H82 : nCol H M L
H81 : Par G H M L
H80 : neq G H
H79 : nCol G H M
H78 : neq F K
H77 : BetS K H M
H76 : Out H G G
H75 : neq H G
H74 : eq G G
H73 : RT K H G G H M
H72 : RT G H M K H G
H71 : CongA F K H G H M
H70 : CongA F K H H K F
H69 : nCol F K H
H68 : nCol H K F
H67 : CongA G H M H K F
H66 : RT F K H K H G
H65 : OS F G K H
H64 : TP K H F G
H63 : Par K H F G
H62 : Par F G K H
H61 : Cong K s H K
H60 : BetS H K s
s : Point
H59 : neq H K
H58 : Par K F H G
H57 : Par F K H G
H56 : CongA H K F G H M
H55 : CongA J E N G H M
H54 : BetS B e C
H53 : TS M G H K
H52 : Midpoint B e C
H51 : EF D B e C G H M L
H50 : CongA G H M J E N
H49 : PG G H M L
M,L,e : Point
H48 : nCol G H K
H47 : nCol H G K
H46 : nCol K H G
H45 : Par F K H G
H44 : Triangle D B C
H43 : nCol D B C
H42 : OS S F K H
H41 : CongA H K F J E N
H40 : EF A B m D F K H G
H39 : PG F K H G
F,G : Point
H38 : nCol S K H
H37 : nCol H K S
H36 : neq H K
H35 : neq K H
H34 : Col R K K
H33 : eq K K
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (Par F K L M) by (conclude proposition_30).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (Col R K K) by (conclude_def Col ).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (neq H K) by (conclude lemma_inequalitysymmetric).
assert (nCol H K S) by (conclude lemma_NChelper).
assert (nCol S K H) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F G, (PG F K H G /\\ EF A B m D F K H G /\\ CongA H K F J E N /\\ OS S F K H)) by (conclude proposition_42B);destruct Tf as [F[G]];spliter.
assert (nCol D B C) by (forward_using lemma_NCorder).
assert (Triangle D B C) by (conclude_def Triangle ).
assert (Par F K H G) by (conclude_def PG ).
assert (nCol K H G) by (forward_using lemma_parallelNC).
assert (nCol H G K) by (forward_using lemma_NCorder).
assert (nCol G H K) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists M L e, (PG G H M L /\\ CongA G H M J E N /\\ EF D B e C G H M L /\\ Midpoint B e C /\\ TS M G H K)) by (conclude proposition_44);destruct Tf as [M[L[e]]];spliter.
assert (BetS B e C) by (conclude_def Midpoint ).
assert (CongA J E N G H M) by (conclude lemma_equalanglessymmetric).
assert (CongA H K F G H M) by (conclude lemma_equalanglestransitive).
assert (Par F K H G) by (conclude_def PG ).
assert (Par K F H G) by (forward_using lemma_parallelflip).
assert (neq H K) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists s, (BetS H K s /\\ Cong K s H K)) by (conclude lemma_extension);destruct Tf as [s];spliter.
assert (Par F G K H) by (conclude_def PG ).
assert (Par K H F G) by (conclude lemma_parallelsymmetric).
assert (TP K H F G) by (conclude lemma_paralleldef2B).
assert (OS F G K H) by (conclude_def TP ).
assert (RT F K H K H G) by (conclude proposition_29C).
assert (CongA G H M H K F) by (conclude lemma_equalanglessymmetric).
assert (nCol H K F) by (conclude lemma_equalanglesNC).
assert (nCol F K H) by (forward_using lemma_NCorder).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H G H M) by (conclude lemma_equalanglestransitive).
assert (RT G H M K H G) by (conclude lemma_RTcongruence).
assert (RT K H G G H M) by (conclude lemma_RTsymmetric).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (neq H G) by (forward_using lemma_NCdistinct).
assert (Out H G G) by (conclude lemma_ray4).
assert (BetS K H M) by (conclude proposition_14).
assert (neq F K) by (forward_using lemma_NCdistinct).
assert (nCol G H M) by (conclude lemma_equalanglesNC).
assert (neq G H) by (forward_using lemma_NCdistinct).
assert (Par G H M L) by (conclude_def PG ).
assert (nCol H M L) by (forward_using lemma_parallelNC).
assert (neq L M) by (forward_using lemma_NCdistinct).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (eq H H) by (conclude cn_equalityreflexive).
assert (eq M M) by (conclude cn_equalityreflexive).
assert (Col F K K) by (conclude_def Col ).
assert (Col G H H) by (conclude_def Col ).
assert (Col L M M) by (conclude_def Col ).
assert (Par F K G H) by (forward_using lemma_parallelflip).
assert (Par M L G H) by (conclude lemma_parallelsymmetric).
assert (Par L M G H) by (forward_using lemma_parallelflip).
assert (Par F K L M) by (conclude proposition_30).

*****
H93 : Par F K L M
H92 : Par L M G H
H91 : Par M L G H
H90 : Par F K G H
H89 : Col L M M
H88 : Col G H H
H87 : Col F K K
H86 : eq M M
H85 : eq H H
H84 : eq K K
H83 : neq L M
H82 : nCol H M L
H81 : Par G H M L
H80 : neq G H
H79 : nCol G H M
H78 : neq F K
H77 : BetS K H M
H76 : Out H G G
H75 : neq H G
H74 : eq G G
H73 : RT K H G G H M
H72 : RT G H M K H G
H71 : CongA F K H G H M
H70 : CongA F K H H K F
H69 : nCol F K H
H68 : nCol H K F
H67 : CongA G H M H K F
H66 : RT F K H K H G
H65 : OS F G K H
H64 : TP K H F G
H63 : Par K H F G
H62 : Par F G K H
H61 : Cong K s H K
H60 : BetS H K s
s : Point
H59 : neq H K
H58 : Par K F H G
H57 : Par F K H G
H56 : CongA H K F G H M
H55 : CongA J E N G H M
H54 : BetS B e C
H53 : TS M G H K
H52 : Midpoint B e C
H51 : EF D B e C G H M L
H50 : CongA G H M J E N
H49 : PG G H M L
M,L,e : Point
H48 : nCol G H K
H47 : nCol H G K
H46 : nCol K H G
H45 : Par F K H G
H44 : Triangle D B C
H43 : nCol D B C
H42 : OS S F K H
H41 : CongA H K F J E N
H40 : EF A B m D F K H G
H39 : PG F K H G
F,G : Point
H38 : nCol S K H
H37 : nCol H K S
H36 : neq H K
H35 : neq K H
H34 : Col R K K
H33 : eq K K
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (Par F K M L) by (forward_using lemma_parallelflip).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (Col R K K) by (conclude_def Col ).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (neq H K) by (conclude lemma_inequalitysymmetric).
assert (nCol H K S) by (conclude lemma_NChelper).
assert (nCol S K H) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F G, (PG F K H G /\\ EF A B m D F K H G /\\ CongA H K F J E N /\\ OS S F K H)) by (conclude proposition_42B);destruct Tf as [F[G]];spliter.
assert (nCol D B C) by (forward_using lemma_NCorder).
assert (Triangle D B C) by (conclude_def Triangle ).
assert (Par F K H G) by (conclude_def PG ).
assert (nCol K H G) by (forward_using lemma_parallelNC).
assert (nCol H G K) by (forward_using lemma_NCorder).
assert (nCol G H K) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists M L e, (PG G H M L /\\ CongA G H M J E N /\\ EF D B e C G H M L /\\ Midpoint B e C /\\ TS M G H K)) by (conclude proposition_44);destruct Tf as [M[L[e]]];spliter.
assert (BetS B e C) by (conclude_def Midpoint ).
assert (CongA J E N G H M) by (conclude lemma_equalanglessymmetric).
assert (CongA H K F G H M) by (conclude lemma_equalanglestransitive).
assert (Par F K H G) by (conclude_def PG ).
assert (Par K F H G) by (forward_using lemma_parallelflip).
assert (neq H K) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists s, (BetS H K s /\\ Cong K s H K)) by (conclude lemma_extension);destruct Tf as [s];spliter.
assert (Par F G K H) by (conclude_def PG ).
assert (Par K H F G) by (conclude lemma_parallelsymmetric).
assert (TP K H F G) by (conclude lemma_paralleldef2B).
assert (OS F G K H) by (conclude_def TP ).
assert (RT F K H K H G) by (conclude proposition_29C).
assert (CongA G H M H K F) by (conclude lemma_equalanglessymmetric).
assert (nCol H K F) by (conclude lemma_equalanglesNC).
assert (nCol F K H) by (forward_using lemma_NCorder).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H G H M) by (conclude lemma_equalanglestransitive).
assert (RT G H M K H G) by (conclude lemma_RTcongruence).
assert (RT K H G G H M) by (conclude lemma_RTsymmetric).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (neq H G) by (forward_using lemma_NCdistinct).
assert (Out H G G) by (conclude lemma_ray4).
assert (BetS K H M) by (conclude proposition_14).
assert (neq F K) by (forward_using lemma_NCdistinct).
assert (nCol G H M) by (conclude lemma_equalanglesNC).
assert (neq G H) by (forward_using lemma_NCdistinct).
assert (Par G H M L) by (conclude_def PG ).
assert (nCol H M L) by (forward_using lemma_parallelNC).
assert (neq L M) by (forward_using lemma_NCdistinct).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (eq H H) by (conclude cn_equalityreflexive).
assert (eq M M) by (conclude cn_equalityreflexive).
assert (Col F K K) by (conclude_def Col ).
assert (Col G H H) by (conclude_def Col ).
assert (Col L M M) by (conclude_def Col ).
assert (Par F K G H) by (forward_using lemma_parallelflip).
assert (Par M L G H) by (conclude lemma_parallelsymmetric).
assert (Par L M G H) by (forward_using lemma_parallelflip).
assert (Par F K L M) by (conclude proposition_30).
assert (Par F K M L) by (forward_using lemma_parallelflip).

*****
H94 : Par F K M L
H93 : Par F K L M
H92 : Par L M G H
H91 : Par M L G H
H90 : Par F K G H
H89 : Col L M M
H88 : Col G H H
H87 : Col F K K
H86 : eq M M
H85 : eq H H
H84 : eq K K
H83 : neq L M
H82 : nCol H M L
H81 : Par G H M L
H80 : neq G H
H79 : nCol G H M
H78 : neq F K
H77 : BetS K H M
H76 : Out H G G
H75 : neq H G
H74 : eq G G
H73 : RT K H G G H M
H72 : RT G H M K H G
H71 : CongA F K H G H M
H70 : CongA F K H H K F
H69 : nCol F K H
H68 : nCol H K F
H67 : CongA G H M H K F
H66 : RT F K H K H G
H65 : OS F G K H
H64 : TP K H F G
H63 : Par K H F G
H62 : Par F G K H
H61 : Cong K s H K
H60 : BetS H K s
s : Point
H59 : neq H K
H58 : Par K F H G
H57 : Par F K H G
H56 : CongA H K F G H M
H55 : CongA J E N G H M
H54 : BetS B e C
H53 : TS M G H K
H52 : Midpoint B e C
H51 : EF D B e C G H M L
H50 : CongA G H M J E N
H49 : PG G H M L
M,L,e : Point
H48 : nCol G H K
H47 : nCol H G K
H46 : nCol K H G
H45 : Par F K H G
H44 : Triangle D B C
H43 : nCol D B C
H42 : OS S F K H
H41 : CongA H K F J E N
H40 : EF A B m D F K H G
H39 : PG F K H G
F,G : Point
H38 : nCol S K H
H37 : nCol H K S
H36 : neq H K
H35 : neq K H
H34 : Col R K K
H33 : eq K K
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (Par F G K H) by (conclude_def PG ).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (Col R K K) by (conclude_def Col ).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (neq H K) by (conclude lemma_inequalitysymmetric).
assert (nCol H K S) by (conclude lemma_NChelper).
assert (nCol S K H) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F G, (PG F K H G /\\ EF A B m D F K H G /\\ CongA H K F J E N /\\ OS S F K H)) by (conclude proposition_42B);destruct Tf as [F[G]];spliter.
assert (nCol D B C) by (forward_using lemma_NCorder).
assert (Triangle D B C) by (conclude_def Triangle ).
assert (Par F K H G) by (conclude_def PG ).
assert (nCol K H G) by (forward_using lemma_parallelNC).
assert (nCol H G K) by (forward_using lemma_NCorder).
assert (nCol G H K) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists M L e, (PG G H M L /\\ CongA G H M J E N /\\ EF D B e C G H M L /\\ Midpoint B e C /\\ TS M G H K)) by (conclude proposition_44);destruct Tf as [M[L[e]]];spliter.
assert (BetS B e C) by (conclude_def Midpoint ).
assert (CongA J E N G H M) by (conclude lemma_equalanglessymmetric).
assert (CongA H K F G H M) by (conclude lemma_equalanglestransitive).
assert (Par F K H G) by (conclude_def PG ).
assert (Par K F H G) by (forward_using lemma_parallelflip).
assert (neq H K) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists s, (BetS H K s /\\ Cong K s H K)) by (conclude lemma_extension);destruct Tf as [s];spliter.
assert (Par F G K H) by (conclude_def PG ).
assert (Par K H F G) by (conclude lemma_parallelsymmetric).
assert (TP K H F G) by (conclude lemma_paralleldef2B).
assert (OS F G K H) by (conclude_def TP ).
assert (RT F K H K H G) by (conclude proposition_29C).
assert (CongA G H M H K F) by (conclude lemma_equalanglessymmetric).
assert (nCol H K F) by (conclude lemma_equalanglesNC).
assert (nCol F K H) by (forward_using lemma_NCorder).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H G H M) by (conclude lemma_equalanglestransitive).
assert (RT G H M K H G) by (conclude lemma_RTcongruence).
assert (RT K H G G H M) by (conclude lemma_RTsymmetric).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (neq H G) by (forward_using lemma_NCdistinct).
assert (Out H G G) by (conclude lemma_ray4).
assert (BetS K H M) by (conclude proposition_14).
assert (neq F K) by (forward_using lemma_NCdistinct).
assert (nCol G H M) by (conclude lemma_equalanglesNC).
assert (neq G H) by (forward_using lemma_NCdistinct).
assert (Par G H M L) by (conclude_def PG ).
assert (nCol H M L) by (forward_using lemma_parallelNC).
assert (neq L M) by (forward_using lemma_NCdistinct).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (eq H H) by (conclude cn_equalityreflexive).
assert (eq M M) by (conclude cn_equalityreflexive).
assert (Col F K K) by (conclude_def Col ).
assert (Col G H H) by (conclude_def Col ).
assert (Col L M M) by (conclude_def Col ).
assert (Par F K G H) by (forward_using lemma_parallelflip).
assert (Par M L G H) by (conclude lemma_parallelsymmetric).
assert (Par L M G H) by (forward_using lemma_parallelflip).
assert (Par F K L M) by (conclude proposition_30).
assert (Par F K M L) by (forward_using lemma_parallelflip).
assert (Par F G K H) by (conclude_def PG ).

*****
H95 : Par F G K H
H94 : Par F K M L
H93 : Par F K L M
H92 : Par L M G H
H91 : Par M L G H
H90 : Par F K G H
H89 : Col L M M
H88 : Col G H H
H87 : Col F K K
H86 : eq M M
H85 : eq H H
H84 : eq K K
H83 : neq L M
H82 : nCol H M L
H81 : Par G H M L
H80 : neq G H
H79 : nCol G H M
H78 : neq F K
H77 : BetS K H M
H76 : Out H G G
H75 : neq H G
H74 : eq G G
H73 : RT K H G G H M
H72 : RT G H M K H G
H71 : CongA F K H G H M
H70 : CongA F K H H K F
H69 : nCol F K H
H68 : nCol H K F
H67 : CongA G H M H K F
H66 : RT F K H K H G
H65 : OS F G K H
H64 : TP K H F G
H63 : Par K H F G
H62 : Par F G K H
H61 : Cong K s H K
H60 : BetS H K s
s : Point
H59 : neq H K
H58 : Par K F H G
H57 : Par F K H G
H56 : CongA H K F G H M
H55 : CongA J E N G H M
H54 : BetS B e C
H53 : TS M G H K
H52 : Midpoint B e C
H51 : EF D B e C G H M L
H50 : CongA G H M J E N
H49 : PG G H M L
M,L,e : Point
H48 : nCol G H K
H47 : nCol H G K
H46 : nCol K H G
H45 : Par F K H G
H44 : Triangle D B C
H43 : nCol D B C
H42 : OS S F K H
H41 : CongA H K F J E N
H40 : EF A B m D F K H G
H39 : PG F K H G
F,G : Point
H38 : nCol S K H
H37 : nCol H K S
H36 : neq H K
H35 : neq K H
H34 : Col R K K
H33 : eq K K
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (Par G L H M) by (conclude_def PG ).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (Col R K K) by (conclude_def Col ).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (neq H K) by (conclude lemma_inequalitysymmetric).
assert (nCol H K S) by (conclude lemma_NChelper).
assert (nCol S K H) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F G, (PG F K H G /\\ EF A B m D F K H G /\\ CongA H K F J E N /\\ OS S F K H)) by (conclude proposition_42B);destruct Tf as [F[G]];spliter.
assert (nCol D B C) by (forward_using lemma_NCorder).
assert (Triangle D B C) by (conclude_def Triangle ).
assert (Par F K H G) by (conclude_def PG ).
assert (nCol K H G) by (forward_using lemma_parallelNC).
assert (nCol H G K) by (forward_using lemma_NCorder).
assert (nCol G H K) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists M L e, (PG G H M L /\\ CongA G H M J E N /\\ EF D B e C G H M L /\\ Midpoint B e C /\\ TS M G H K)) by (conclude proposition_44);destruct Tf as [M[L[e]]];spliter.
assert (BetS B e C) by (conclude_def Midpoint ).
assert (CongA J E N G H M) by (conclude lemma_equalanglessymmetric).
assert (CongA H K F G H M) by (conclude lemma_equalanglestransitive).
assert (Par F K H G) by (conclude_def PG ).
assert (Par K F H G) by (forward_using lemma_parallelflip).
assert (neq H K) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists s, (BetS H K s /\\ Cong K s H K)) by (conclude lemma_extension);destruct Tf as [s];spliter.
assert (Par F G K H) by (conclude_def PG ).
assert (Par K H F G) by (conclude lemma_parallelsymmetric).
assert (TP K H F G) by (conclude lemma_paralleldef2B).
assert (OS F G K H) by (conclude_def TP ).
assert (RT F K H K H G) by (conclude proposition_29C).
assert (CongA G H M H K F) by (conclude lemma_equalanglessymmetric).
assert (nCol H K F) by (conclude lemma_equalanglesNC).
assert (nCol F K H) by (forward_using lemma_NCorder).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H G H M) by (conclude lemma_equalanglestransitive).
assert (RT G H M K H G) by (conclude lemma_RTcongruence).
assert (RT K H G G H M) by (conclude lemma_RTsymmetric).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (neq H G) by (forward_using lemma_NCdistinct).
assert (Out H G G) by (conclude lemma_ray4).
assert (BetS K H M) by (conclude proposition_14).
assert (neq F K) by (forward_using lemma_NCdistinct).
assert (nCol G H M) by (conclude lemma_equalanglesNC).
assert (neq G H) by (forward_using lemma_NCdistinct).
assert (Par G H M L) by (conclude_def PG ).
assert (nCol H M L) by (forward_using lemma_parallelNC).
assert (neq L M) by (forward_using lemma_NCdistinct).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (eq H H) by (conclude cn_equalityreflexive).
assert (eq M M) by (conclude cn_equalityreflexive).
assert (Col F K K) by (conclude_def Col ).
assert (Col G H H) by (conclude_def Col ).
assert (Col L M M) by (conclude_def Col ).
assert (Par F K G H) by (forward_using lemma_parallelflip).
assert (Par M L G H) by (conclude lemma_parallelsymmetric).
assert (Par L M G H) by (forward_using lemma_parallelflip).
assert (Par F K L M) by (conclude proposition_30).
assert (Par F K M L) by (forward_using lemma_parallelflip).
assert (Par F G K H) by (conclude_def PG ).
assert (Par G L H M) by (conclude_def PG ).

*****
H96 : Par G L H M
H95 : Par F G K H
H94 : Par F K M L
H93 : Par F K L M
H92 : Par L M G H
H91 : Par M L G H
H90 : Par F K G H
H89 : Col L M M
H88 : Col G H H
H87 : Col F K K
H86 : eq M M
H85 : eq H H
H84 : eq K K
H83 : neq L M
H82 : nCol H M L
H81 : Par G H M L
H80 : neq G H
H79 : nCol G H M
H78 : neq F K
H77 : BetS K H M
H76 : Out H G G
H75 : neq H G
H74 : eq G G
H73 : RT K H G G H M
H72 : RT G H M K H G
H71 : CongA F K H G H M
H70 : CongA F K H H K F
H69 : nCol F K H
H68 : nCol H K F
H67 : CongA G H M H K F
H66 : RT F K H K H G
H65 : OS F G K H
H64 : TP K H F G
H63 : Par K H F G
H62 : Par F G K H
H61 : Cong K s H K
H60 : BetS H K s
s : Point
H59 : neq H K
H58 : Par K F H G
H57 : Par F K H G
H56 : CongA H K F G H M
H55 : CongA J E N G H M
H54 : BetS B e C
H53 : TS M G H K
H52 : Midpoint B e C
H51 : EF D B e C G H M L
H50 : CongA G H M J E N
H49 : PG G H M L
M,L,e : Point
H48 : nCol G H K
H47 : nCol H G K
H46 : nCol K H G
H45 : Par F K H G
H44 : Triangle D B C
H43 : nCol D B C
H42 : OS S F K H
H41 : CongA H K F J E N
H40 : EF A B m D F K H G
H39 : PG F K H G
F,G : Point
H38 : nCol S K H
H37 : nCol H K S
H36 : neq H K
H35 : neq K H
H34 : Col R K K
H33 : eq K K
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (Par F G H K) by (forward_using lemma_parallelflip).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (Col R K K) by (conclude_def Col ).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (neq H K) by (conclude lemma_inequalitysymmetric).
assert (nCol H K S) by (conclude lemma_NChelper).
assert (nCol S K H) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F G, (PG F K H G /\\ EF A B m D F K H G /\\ CongA H K F J E N /\\ OS S F K H)) by (conclude proposition_42B);destruct Tf as [F[G]];spliter.
assert (nCol D B C) by (forward_using lemma_NCorder).
assert (Triangle D B C) by (conclude_def Triangle ).
assert (Par F K H G) by (conclude_def PG ).
assert (nCol K H G) by (forward_using lemma_parallelNC).
assert (nCol H G K) by (forward_using lemma_NCorder).
assert (nCol G H K) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists M L e, (PG G H M L /\\ CongA G H M J E N /\\ EF D B e C G H M L /\\ Midpoint B e C /\\ TS M G H K)) by (conclude proposition_44);destruct Tf as [M[L[e]]];spliter.
assert (BetS B e C) by (conclude_def Midpoint ).
assert (CongA J E N G H M) by (conclude lemma_equalanglessymmetric).
assert (CongA H K F G H M) by (conclude lemma_equalanglestransitive).
assert (Par F K H G) by (conclude_def PG ).
assert (Par K F H G) by (forward_using lemma_parallelflip).
assert (neq H K) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists s, (BetS H K s /\\ Cong K s H K)) by (conclude lemma_extension);destruct Tf as [s];spliter.
assert (Par F G K H) by (conclude_def PG ).
assert (Par K H F G) by (conclude lemma_parallelsymmetric).
assert (TP K H F G) by (conclude lemma_paralleldef2B).
assert (OS F G K H) by (conclude_def TP ).
assert (RT F K H K H G) by (conclude proposition_29C).
assert (CongA G H M H K F) by (conclude lemma_equalanglessymmetric).
assert (nCol H K F) by (conclude lemma_equalanglesNC).
assert (nCol F K H) by (forward_using lemma_NCorder).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H G H M) by (conclude lemma_equalanglestransitive).
assert (RT G H M K H G) by (conclude lemma_RTcongruence).
assert (RT K H G G H M) by (conclude lemma_RTsymmetric).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (neq H G) by (forward_using lemma_NCdistinct).
assert (Out H G G) by (conclude lemma_ray4).
assert (BetS K H M) by (conclude proposition_14).
assert (neq F K) by (forward_using lemma_NCdistinct).
assert (nCol G H M) by (conclude lemma_equalanglesNC).
assert (neq G H) by (forward_using lemma_NCdistinct).
assert (Par G H M L) by (conclude_def PG ).
assert (nCol H M L) by (forward_using lemma_parallelNC).
assert (neq L M) by (forward_using lemma_NCdistinct).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (eq H H) by (conclude cn_equalityreflexive).
assert (eq M M) by (conclude cn_equalityreflexive).
assert (Col F K K) by (conclude_def Col ).
assert (Col G H H) by (conclude_def Col ).
assert (Col L M M) by (conclude_def Col ).
assert (Par F K G H) by (forward_using lemma_parallelflip).
assert (Par M L G H) by (conclude lemma_parallelsymmetric).
assert (Par L M G H) by (forward_using lemma_parallelflip).
assert (Par F K L M) by (conclude proposition_30).
assert (Par F K M L) by (forward_using lemma_parallelflip).
assert (Par F G K H) by (conclude_def PG ).
assert (Par G L H M) by (conclude_def PG ).
assert (Par F G H K) by (forward_using lemma_parallelflip).

*****
H97 : Par F G H K
H96 : Par G L H M
H95 : Par F G K H
H94 : Par F K M L
H93 : Par F K L M
H92 : Par L M G H
H91 : Par M L G H
H90 : Par F K G H
H89 : Col L M M
H88 : Col G H H
H87 : Col F K K
H86 : eq M M
H85 : eq H H
H84 : eq K K
H83 : neq L M
H82 : nCol H M L
H81 : Par G H M L
H80 : neq G H
H79 : nCol G H M
H78 : neq F K
H77 : BetS K H M
H76 : Out H G G
H75 : neq H G
H74 : eq G G
H73 : RT K H G G H M
H72 : RT G H M K H G
H71 : CongA F K H G H M
H70 : CongA F K H H K F
H69 : nCol F K H
H68 : nCol H K F
H67 : CongA G H M H K F
H66 : RT F K H K H G
H65 : OS F G K H
H64 : TP K H F G
H63 : Par K H F G
H62 : Par F G K H
H61 : Cong K s H K
H60 : BetS H K s
s : Point
H59 : neq H K
H58 : Par K F H G
H57 : Par F K H G
H56 : CongA H K F G H M
H55 : CongA J E N G H M
H54 : BetS B e C
H53 : TS M G H K
H52 : Midpoint B e C
H51 : EF D B e C G H M L
H50 : CongA G H M J E N
H49 : PG G H M L
M,L,e : Point
H48 : nCol G H K
H47 : nCol H G K
H46 : nCol K H G
H45 : Par F K H G
H44 : Triangle D B C
H43 : nCol D B C
H42 : OS S F K H
H41 : CongA H K F J E N
H40 : EF A B m D F K H G
H39 : PG F K H G
F,G : Point
H38 : nCol S K H
H37 : nCol H K S
H36 : neq H K
H35 : neq K H
H34 : Col R K K
H33 : eq K K
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (Col K H M) by (conclude_def Col ).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (Col R K K) by (conclude_def Col ).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (neq H K) by (conclude lemma_inequalitysymmetric).
assert (nCol H K S) by (conclude lemma_NChelper).
assert (nCol S K H) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F G, (PG F K H G /\\ EF A B m D F K H G /\\ CongA H K F J E N /\\ OS S F K H)) by (conclude proposition_42B);destruct Tf as [F[G]];spliter.
assert (nCol D B C) by (forward_using lemma_NCorder).
assert (Triangle D B C) by (conclude_def Triangle ).
assert (Par F K H G) by (conclude_def PG ).
assert (nCol K H G) by (forward_using lemma_parallelNC).
assert (nCol H G K) by (forward_using lemma_NCorder).
assert (nCol G H K) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists M L e, (PG G H M L /\\ CongA G H M J E N /\\ EF D B e C G H M L /\\ Midpoint B e C /\\ TS M G H K)) by (conclude proposition_44);destruct Tf as [M[L[e]]];spliter.
assert (BetS B e C) by (conclude_def Midpoint ).
assert (CongA J E N G H M) by (conclude lemma_equalanglessymmetric).
assert (CongA H K F G H M) by (conclude lemma_equalanglestransitive).
assert (Par F K H G) by (conclude_def PG ).
assert (Par K F H G) by (forward_using lemma_parallelflip).
assert (neq H K) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists s, (BetS H K s /\\ Cong K s H K)) by (conclude lemma_extension);destruct Tf as [s];spliter.
assert (Par F G K H) by (conclude_def PG ).
assert (Par K H F G) by (conclude lemma_parallelsymmetric).
assert (TP K H F G) by (conclude lemma_paralleldef2B).
assert (OS F G K H) by (conclude_def TP ).
assert (RT F K H K H G) by (conclude proposition_29C).
assert (CongA G H M H K F) by (conclude lemma_equalanglessymmetric).
assert (nCol H K F) by (conclude lemma_equalanglesNC).
assert (nCol F K H) by (forward_using lemma_NCorder).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H G H M) by (conclude lemma_equalanglestransitive).
assert (RT G H M K H G) by (conclude lemma_RTcongruence).
assert (RT K H G G H M) by (conclude lemma_RTsymmetric).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (neq H G) by (forward_using lemma_NCdistinct).
assert (Out H G G) by (conclude lemma_ray4).
assert (BetS K H M) by (conclude proposition_14).
assert (neq F K) by (forward_using lemma_NCdistinct).
assert (nCol G H M) by (conclude lemma_equalanglesNC).
assert (neq G H) by (forward_using lemma_NCdistinct).
assert (Par G H M L) by (conclude_def PG ).
assert (nCol H M L) by (forward_using lemma_parallelNC).
assert (neq L M) by (forward_using lemma_NCdistinct).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (eq H H) by (conclude cn_equalityreflexive).
assert (eq M M) by (conclude cn_equalityreflexive).
assert (Col F K K) by (conclude_def Col ).
assert (Col G H H) by (conclude_def Col ).
assert (Col L M M) by (conclude_def Col ).
assert (Par F K G H) by (forward_using lemma_parallelflip).
assert (Par M L G H) by (conclude lemma_parallelsymmetric).
assert (Par L M G H) by (forward_using lemma_parallelflip).
assert (Par F K L M) by (conclude proposition_30).
assert (Par F K M L) by (forward_using lemma_parallelflip).
assert (Par F G K H) by (conclude_def PG ).
assert (Par G L H M) by (conclude_def PG ).
assert (Par F G H K) by (forward_using lemma_parallelflip).
assert (Col K H M) by (conclude_def Col ).

*****
H98 : Col K H M
H97 : Par F G H K
H96 : Par G L H M
H95 : Par F G K H
H94 : Par F K M L
H93 : Par F K L M
H92 : Par L M G H
H91 : Par M L G H
H90 : Par F K G H
H89 : Col L M M
H88 : Col G H H
H87 : Col F K K
H86 : eq M M
H85 : eq H H
H84 : eq K K
H83 : neq L M
H82 : nCol H M L
H81 : Par G H M L
H80 : neq G H
H79 : nCol G H M
H78 : neq F K
H77 : BetS K H M
H76 : Out H G G
H75 : neq H G
H74 : eq G G
H73 : RT K H G G H M
H72 : RT G H M K H G
H71 : CongA F K H G H M
H70 : CongA F K H H K F
H69 : nCol F K H
H68 : nCol H K F
H67 : CongA G H M H K F
H66 : RT F K H K H G
H65 : OS F G K H
H64 : TP K H F G
H63 : Par K H F G
H62 : Par F G K H
H61 : Cong K s H K
H60 : BetS H K s
s : Point
H59 : neq H K
H58 : Par K F H G
H57 : Par F K H G
H56 : CongA H K F G H M
H55 : CongA J E N G H M
H54 : BetS B e C
H53 : TS M G H K
H52 : Midpoint B e C
H51 : EF D B e C G H M L
H50 : CongA G H M J E N
H49 : PG G H M L
M,L,e : Point
H48 : nCol G H K
H47 : nCol H G K
H46 : nCol K H G
H45 : Par F K H G
H44 : Triangle D B C
H43 : nCol D B C
H42 : OS S F K H
H41 : CongA H K F J E N
H40 : EF A B m D F K H G
H39 : PG F K H G
F,G : Point
H38 : nCol S K H
H37 : nCol H K S
H36 : neq H K
H35 : neq K H
H34 : Col R K K
H33 : eq K K
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (Col H K M) by (forward_using lemma_collinearorder).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (Col R K K) by (conclude_def Col ).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (neq H K) by (conclude lemma_inequalitysymmetric).
assert (nCol H K S) by (conclude lemma_NChelper).
assert (nCol S K H) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F G, (PG F K H G /\\ EF A B m D F K H G /\\ CongA H K F J E N /\\ OS S F K H)) by (conclude proposition_42B);destruct Tf as [F[G]];spliter.
assert (nCol D B C) by (forward_using lemma_NCorder).
assert (Triangle D B C) by (conclude_def Triangle ).
assert (Par F K H G) by (conclude_def PG ).
assert (nCol K H G) by (forward_using lemma_parallelNC).
assert (nCol H G K) by (forward_using lemma_NCorder).
assert (nCol G H K) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists M L e, (PG G H M L /\\ CongA G H M J E N /\\ EF D B e C G H M L /\\ Midpoint B e C /\\ TS M G H K)) by (conclude proposition_44);destruct Tf as [M[L[e]]];spliter.
assert (BetS B e C) by (conclude_def Midpoint ).
assert (CongA J E N G H M) by (conclude lemma_equalanglessymmetric).
assert (CongA H K F G H M) by (conclude lemma_equalanglestransitive).
assert (Par F K H G) by (conclude_def PG ).
assert (Par K F H G) by (forward_using lemma_parallelflip).
assert (neq H K) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists s, (BetS H K s /\\ Cong K s H K)) by (conclude lemma_extension);destruct Tf as [s];spliter.
assert (Par F G K H) by (conclude_def PG ).
assert (Par K H F G) by (conclude lemma_parallelsymmetric).
assert (TP K H F G) by (conclude lemma_paralleldef2B).
assert (OS F G K H) by (conclude_def TP ).
assert (RT F K H K H G) by (conclude proposition_29C).
assert (CongA G H M H K F) by (conclude lemma_equalanglessymmetric).
assert (nCol H K F) by (conclude lemma_equalanglesNC).
assert (nCol F K H) by (forward_using lemma_NCorder).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H G H M) by (conclude lemma_equalanglestransitive).
assert (RT G H M K H G) by (conclude lemma_RTcongruence).
assert (RT K H G G H M) by (conclude lemma_RTsymmetric).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (neq H G) by (forward_using lemma_NCdistinct).
assert (Out H G G) by (conclude lemma_ray4).
assert (BetS K H M) by (conclude proposition_14).
assert (neq F K) by (forward_using lemma_NCdistinct).
assert (nCol G H M) by (conclude lemma_equalanglesNC).
assert (neq G H) by (forward_using lemma_NCdistinct).
assert (Par G H M L) by (conclude_def PG ).
assert (nCol H M L) by (forward_using lemma_parallelNC).
assert (neq L M) by (forward_using lemma_NCdistinct).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (eq H H) by (conclude cn_equalityreflexive).
assert (eq M M) by (conclude cn_equalityreflexive).
assert (Col F K K) by (conclude_def Col ).
assert (Col G H H) by (conclude_def Col ).
assert (Col L M M) by (conclude_def Col ).
assert (Par F K G H) by (forward_using lemma_parallelflip).
assert (Par M L G H) by (conclude lemma_parallelsymmetric).
assert (Par L M G H) by (forward_using lemma_parallelflip).
assert (Par F K L M) by (conclude proposition_30).
assert (Par F K M L) by (forward_using lemma_parallelflip).
assert (Par F G K H) by (conclude_def PG ).
assert (Par G L H M) by (conclude_def PG ).
assert (Par F G H K) by (forward_using lemma_parallelflip).
assert (Col K H M) by (conclude_def Col ).
assert (Col H K M) by (forward_using lemma_collinearorder).

*****
H99 : Col H K M
H98 : Col K H M
H97 : Par F G H K
H96 : Par G L H M
H95 : Par F G K H
H94 : Par F K M L
H93 : Par F K L M
H92 : Par L M G H
H91 : Par M L G H
H90 : Par F K G H
H89 : Col L M M
H88 : Col G H H
H87 : Col F K K
H86 : eq M M
H85 : eq H H
H84 : eq K K
H83 : neq L M
H82 : nCol H M L
H81 : Par G H M L
H80 : neq G H
H79 : nCol G H M
H78 : neq F K
H77 : BetS K H M
H76 : Out H G G
H75 : neq H G
H74 : eq G G
H73 : RT K H G G H M
H72 : RT G H M K H G
H71 : CongA F K H G H M
H70 : CongA F K H H K F
H69 : nCol F K H
H68 : nCol H K F
H67 : CongA G H M H K F
H66 : RT F K H K H G
H65 : OS F G K H
H64 : TP K H F G
H63 : Par K H F G
H62 : Par F G K H
H61 : Cong K s H K
H60 : BetS H K s
s : Point
H59 : neq H K
H58 : Par K F H G
H57 : Par F K H G
H56 : CongA H K F G H M
H55 : CongA J E N G H M
H54 : BetS B e C
H53 : TS M G H K
H52 : Midpoint B e C
H51 : EF D B e C G H M L
H50 : CongA G H M J E N
H49 : PG G H M L
M,L,e : Point
H48 : nCol G H K
H47 : nCol H G K
H46 : nCol K H G
H45 : Par F K H G
H44 : Triangle D B C
H43 : nCol D B C
H42 : OS S F K H
H41 : CongA H K F J E N
H40 : EF A B m D F K H G
H39 : PG F K H G
F,G : Point
H38 : nCol S K H
H37 : nCol H K S
H36 : neq H K
H35 : neq K H
H34 : Col R K K
H33 : eq K K
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (neq K M) by (forward_using lemma_betweennotequal).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (Col R K K) by (conclude_def Col ).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (neq H K) by (conclude lemma_inequalitysymmetric).
assert (nCol H K S) by (conclude lemma_NChelper).
assert (nCol S K H) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F G, (PG F K H G /\\ EF A B m D F K H G /\\ CongA H K F J E N /\\ OS S F K H)) by (conclude proposition_42B);destruct Tf as [F[G]];spliter.
assert (nCol D B C) by (forward_using lemma_NCorder).
assert (Triangle D B C) by (conclude_def Triangle ).
assert (Par F K H G) by (conclude_def PG ).
assert (nCol K H G) by (forward_using lemma_parallelNC).
assert (nCol H G K) by (forward_using lemma_NCorder).
assert (nCol G H K) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists M L e, (PG G H M L /\\ CongA G H M J E N /\\ EF D B e C G H M L /\\ Midpoint B e C /\\ TS M G H K)) by (conclude proposition_44);destruct Tf as [M[L[e]]];spliter.
assert (BetS B e C) by (conclude_def Midpoint ).
assert (CongA J E N G H M) by (conclude lemma_equalanglessymmetric).
assert (CongA H K F G H M) by (conclude lemma_equalanglestransitive).
assert (Par F K H G) by (conclude_def PG ).
assert (Par K F H G) by (forward_using lemma_parallelflip).
assert (neq H K) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists s, (BetS H K s /\\ Cong K s H K)) by (conclude lemma_extension);destruct Tf as [s];spliter.
assert (Par F G K H) by (conclude_def PG ).
assert (Par K H F G) by (conclude lemma_parallelsymmetric).
assert (TP K H F G) by (conclude lemma_paralleldef2B).
assert (OS F G K H) by (conclude_def TP ).
assert (RT F K H K H G) by (conclude proposition_29C).
assert (CongA G H M H K F) by (conclude lemma_equalanglessymmetric).
assert (nCol H K F) by (conclude lemma_equalanglesNC).
assert (nCol F K H) by (forward_using lemma_NCorder).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H G H M) by (conclude lemma_equalanglestransitive).
assert (RT G H M K H G) by (conclude lemma_RTcongruence).
assert (RT K H G G H M) by (conclude lemma_RTsymmetric).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (neq H G) by (forward_using lemma_NCdistinct).
assert (Out H G G) by (conclude lemma_ray4).
assert (BetS K H M) by (conclude proposition_14).
assert (neq F K) by (forward_using lemma_NCdistinct).
assert (nCol G H M) by (conclude lemma_equalanglesNC).
assert (neq G H) by (forward_using lemma_NCdistinct).
assert (Par G H M L) by (conclude_def PG ).
assert (nCol H M L) by (forward_using lemma_parallelNC).
assert (neq L M) by (forward_using lemma_NCdistinct).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (eq H H) by (conclude cn_equalityreflexive).
assert (eq M M) by (conclude cn_equalityreflexive).
assert (Col F K K) by (conclude_def Col ).
assert (Col G H H) by (conclude_def Col ).
assert (Col L M M) by (conclude_def Col ).
assert (Par F K G H) by (forward_using lemma_parallelflip).
assert (Par M L G H) by (conclude lemma_parallelsymmetric).
assert (Par L M G H) by (forward_using lemma_parallelflip).
assert (Par F K L M) by (conclude proposition_30).
assert (Par F K M L) by (forward_using lemma_parallelflip).
assert (Par F G K H) by (conclude_def PG ).
assert (Par G L H M) by (conclude_def PG ).
assert (Par F G H K) by (forward_using lemma_parallelflip).
assert (Col K H M) by (conclude_def Col ).
assert (Col H K M) by (forward_using lemma_collinearorder).
assert (neq K M) by (forward_using lemma_betweennotequal).

*****
H100 : neq K M
H99 : Col H K M
H98 : Col K H M
H97 : Par F G H K
H96 : Par G L H M
H95 : Par F G K H
H94 : Par F K M L
H93 : Par F K L M
H92 : Par L M G H
H91 : Par M L G H
H90 : Par F K G H
H89 : Col L M M
H88 : Col G H H
H87 : Col F K K
H86 : eq M M
H85 : eq H H
H84 : eq K K
H83 : neq L M
H82 : nCol H M L
H81 : Par G H M L
H80 : neq G H
H79 : nCol G H M
H78 : neq F K
H77 : BetS K H M
H76 : Out H G G
H75 : neq H G
H74 : eq G G
H73 : RT K H G G H M
H72 : RT G H M K H G
H71 : CongA F K H G H M
H70 : CongA F K H H K F
H69 : nCol F K H
H68 : nCol H K F
H67 : CongA G H M H K F
H66 : RT F K H K H G
H65 : OS F G K H
H64 : TP K H F G
H63 : Par K H F G
H62 : Par F G K H
H61 : Cong K s H K
H60 : BetS H K s
s : Point
H59 : neq H K
H58 : Par K F H G
H57 : Par F K H G
H56 : CongA H K F G H M
H55 : CongA J E N G H M
H54 : BetS B e C
H53 : TS M G H K
H52 : Midpoint B e C
H51 : EF D B e C G H M L
H50 : CongA G H M J E N
H49 : PG G H M L
M,L,e : Point
H48 : nCol G H K
H47 : nCol H G K
H46 : nCol K H G
H45 : Par F K H G
H44 : Triangle D B C
H43 : nCol D B C
H42 : OS S F K H
H41 : CongA H K F J E N
H40 : EF A B m D F K H G
H39 : PG F K H G
F,G : Point
H38 : nCol S K H
H37 : nCol H K S
H36 : neq H K
H35 : neq K H
H34 : Col R K K
H33 : eq K K
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (neq M K) by (conclude lemma_inequalitysymmetric).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (Col R K K) by (conclude_def Col ).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (neq H K) by (conclude lemma_inequalitysymmetric).
assert (nCol H K S) by (conclude lemma_NChelper).
assert (nCol S K H) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F G, (PG F K H G /\\ EF A B m D F K H G /\\ CongA H K F J E N /\\ OS S F K H)) by (conclude proposition_42B);destruct Tf as [F[G]];spliter.
assert (nCol D B C) by (forward_using lemma_NCorder).
assert (Triangle D B C) by (conclude_def Triangle ).
assert (Par F K H G) by (conclude_def PG ).
assert (nCol K H G) by (forward_using lemma_parallelNC).
assert (nCol H G K) by (forward_using lemma_NCorder).
assert (nCol G H K) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists M L e, (PG G H M L /\\ CongA G H M J E N /\\ EF D B e C G H M L /\\ Midpoint B e C /\\ TS M G H K)) by (conclude proposition_44);destruct Tf as [M[L[e]]];spliter.
assert (BetS B e C) by (conclude_def Midpoint ).
assert (CongA J E N G H M) by (conclude lemma_equalanglessymmetric).
assert (CongA H K F G H M) by (conclude lemma_equalanglestransitive).
assert (Par F K H G) by (conclude_def PG ).
assert (Par K F H G) by (forward_using lemma_parallelflip).
assert (neq H K) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists s, (BetS H K s /\\ Cong K s H K)) by (conclude lemma_extension);destruct Tf as [s];spliter.
assert (Par F G K H) by (conclude_def PG ).
assert (Par K H F G) by (conclude lemma_parallelsymmetric).
assert (TP K H F G) by (conclude lemma_paralleldef2B).
assert (OS F G K H) by (conclude_def TP ).
assert (RT F K H K H G) by (conclude proposition_29C).
assert (CongA G H M H K F) by (conclude lemma_equalanglessymmetric).
assert (nCol H K F) by (conclude lemma_equalanglesNC).
assert (nCol F K H) by (forward_using lemma_NCorder).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H G H M) by (conclude lemma_equalanglestransitive).
assert (RT G H M K H G) by (conclude lemma_RTcongruence).
assert (RT K H G G H M) by (conclude lemma_RTsymmetric).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (neq H G) by (forward_using lemma_NCdistinct).
assert (Out H G G) by (conclude lemma_ray4).
assert (BetS K H M) by (conclude proposition_14).
assert (neq F K) by (forward_using lemma_NCdistinct).
assert (nCol G H M) by (conclude lemma_equalanglesNC).
assert (neq G H) by (forward_using lemma_NCdistinct).
assert (Par G H M L) by (conclude_def PG ).
assert (nCol H M L) by (forward_using lemma_parallelNC).
assert (neq L M) by (forward_using lemma_NCdistinct).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (eq H H) by (conclude cn_equalityreflexive).
assert (eq M M) by (conclude cn_equalityreflexive).
assert (Col F K K) by (conclude_def Col ).
assert (Col G H H) by (conclude_def Col ).
assert (Col L M M) by (conclude_def Col ).
assert (Par F K G H) by (forward_using lemma_parallelflip).
assert (Par M L G H) by (conclude lemma_parallelsymmetric).
assert (Par L M G H) by (forward_using lemma_parallelflip).
assert (Par F K L M) by (conclude proposition_30).
assert (Par F K M L) by (forward_using lemma_parallelflip).
assert (Par F G K H) by (conclude_def PG ).
assert (Par G L H M) by (conclude_def PG ).
assert (Par F G H K) by (forward_using lemma_parallelflip).
assert (Col K H M) by (conclude_def Col ).
assert (Col H K M) by (forward_using lemma_collinearorder).
assert (neq K M) by (forward_using lemma_betweennotequal).
assert (neq M K) by (conclude lemma_inequalitysymmetric).

*****
H101 : neq M K
H100 : neq K M
H99 : Col H K M
H98 : Col K H M
H97 : Par F G H K
H96 : Par G L H M
H95 : Par F G K H
H94 : Par F K M L
H93 : Par F K L M
H92 : Par L M G H
H91 : Par M L G H
H90 : Par F K G H
H89 : Col L M M
H88 : Col G H H
H87 : Col F K K
H86 : eq M M
H85 : eq H H
H84 : eq K K
H83 : neq L M
H82 : nCol H M L
H81 : Par G H M L
H80 : neq G H
H79 : nCol G H M
H78 : neq F K
H77 : BetS K H M
H76 : Out H G G
H75 : neq H G
H74 : eq G G
H73 : RT K H G G H M
H72 : RT G H M K H G
H71 : CongA F K H G H M
H70 : CongA F K H H K F
H69 : nCol F K H
H68 : nCol H K F
H67 : CongA G H M H K F
H66 : RT F K H K H G
H65 : OS F G K H
H64 : TP K H F G
H63 : Par K H F G
H62 : Par F G K H
H61 : Cong K s H K
H60 : BetS H K s
s : Point
H59 : neq H K
H58 : Par K F H G
H57 : Par F K H G
H56 : CongA H K F G H M
H55 : CongA J E N G H M
H54 : BetS B e C
H53 : TS M G H K
H52 : Midpoint B e C
H51 : EF D B e C G H M L
H50 : CongA G H M J E N
H49 : PG G H M L
M,L,e : Point
H48 : nCol G H K
H47 : nCol H G K
H46 : nCol K H G
H45 : Par F K H G
H44 : Triangle D B C
H43 : nCol D B C
H42 : OS S F K H
H41 : CongA H K F J E N
H40 : EF A B m D F K H G
H39 : PG F K H G
F,G : Point
H38 : nCol S K H
H37 : nCol H K S
H36 : neq H K
H35 : neq K H
H34 : Col R K K
H33 : eq K K
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (Par F G M K) by (conclude lemma_collinearparallel).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (Col R K K) by (conclude_def Col ).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (neq H K) by (conclude lemma_inequalitysymmetric).
assert (nCol H K S) by (conclude lemma_NChelper).
assert (nCol S K H) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F G, (PG F K H G /\\ EF A B m D F K H G /\\ CongA H K F J E N /\\ OS S F K H)) by (conclude proposition_42B);destruct Tf as [F[G]];spliter.
assert (nCol D B C) by (forward_using lemma_NCorder).
assert (Triangle D B C) by (conclude_def Triangle ).
assert (Par F K H G) by (conclude_def PG ).
assert (nCol K H G) by (forward_using lemma_parallelNC).
assert (nCol H G K) by (forward_using lemma_NCorder).
assert (nCol G H K) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists M L e, (PG G H M L /\\ CongA G H M J E N /\\ EF D B e C G H M L /\\ Midpoint B e C /\\ TS M G H K)) by (conclude proposition_44);destruct Tf as [M[L[e]]];spliter.
assert (BetS B e C) by (conclude_def Midpoint ).
assert (CongA J E N G H M) by (conclude lemma_equalanglessymmetric).
assert (CongA H K F G H M) by (conclude lemma_equalanglestransitive).
assert (Par F K H G) by (conclude_def PG ).
assert (Par K F H G) by (forward_using lemma_parallelflip).
assert (neq H K) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists s, (BetS H K s /\\ Cong K s H K)) by (conclude lemma_extension);destruct Tf as [s];spliter.
assert (Par F G K H) by (conclude_def PG ).
assert (Par K H F G) by (conclude lemma_parallelsymmetric).
assert (TP K H F G) by (conclude lemma_paralleldef2B).
assert (OS F G K H) by (conclude_def TP ).
assert (RT F K H K H G) by (conclude proposition_29C).
assert (CongA G H M H K F) by (conclude lemma_equalanglessymmetric).
assert (nCol H K F) by (conclude lemma_equalanglesNC).
assert (nCol F K H) by (forward_using lemma_NCorder).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H G H M) by (conclude lemma_equalanglestransitive).
assert (RT G H M K H G) by (conclude lemma_RTcongruence).
assert (RT K H G G H M) by (conclude lemma_RTsymmetric).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (neq H G) by (forward_using lemma_NCdistinct).
assert (Out H G G) by (conclude lemma_ray4).
assert (BetS K H M) by (conclude proposition_14).
assert (neq F K) by (forward_using lemma_NCdistinct).
assert (nCol G H M) by (conclude lemma_equalanglesNC).
assert (neq G H) by (forward_using lemma_NCdistinct).
assert (Par G H M L) by (conclude_def PG ).
assert (nCol H M L) by (forward_using lemma_parallelNC).
assert (neq L M) by (forward_using lemma_NCdistinct).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (eq H H) by (conclude cn_equalityreflexive).
assert (eq M M) by (conclude cn_equalityreflexive).
assert (Col F K K) by (conclude_def Col ).
assert (Col G H H) by (conclude_def Col ).
assert (Col L M M) by (conclude_def Col ).
assert (Par F K G H) by (forward_using lemma_parallelflip).
assert (Par M L G H) by (conclude lemma_parallelsymmetric).
assert (Par L M G H) by (forward_using lemma_parallelflip).
assert (Par F K L M) by (conclude proposition_30).
assert (Par F K M L) by (forward_using lemma_parallelflip).
assert (Par F G K H) by (conclude_def PG ).
assert (Par G L H M) by (conclude_def PG ).
assert (Par F G H K) by (forward_using lemma_parallelflip).
assert (Col K H M) by (conclude_def Col ).
assert (Col H K M) by (forward_using lemma_collinearorder).
assert (neq K M) by (forward_using lemma_betweennotequal).
assert (neq M K) by (conclude lemma_inequalitysymmetric).
assert (Par F G M K) by (conclude lemma_collinearparallel).

*****
H102 : Par F G M K
H101 : neq M K
H100 : neq K M
H99 : Col H K M
H98 : Col K H M
H97 : Par F G H K
H96 : Par G L H M
H95 : Par F G K H
H94 : Par F K M L
H93 : Par F K L M
H92 : Par L M G H
H91 : Par M L G H
H90 : Par F K G H
H89 : Col L M M
H88 : Col G H H
H87 : Col F K K
H86 : eq M M
H85 : eq H H
H84 : eq K K
H83 : neq L M
H82 : nCol H M L
H81 : Par G H M L
H80 : neq G H
H79 : nCol G H M
H78 : neq F K
H77 : BetS K H M
H76 : Out H G G
H75 : neq H G
H74 : eq G G
H73 : RT K H G G H M
H72 : RT G H M K H G
H71 : CongA F K H G H M
H70 : CongA F K H H K F
H69 : nCol F K H
H68 : nCol H K F
H67 : CongA G H M H K F
H66 : RT F K H K H G
H65 : OS F G K H
H64 : TP K H F G
H63 : Par K H F G
H62 : Par F G K H
H61 : Cong K s H K
H60 : BetS H K s
s : Point
H59 : neq H K
H58 : Par K F H G
H57 : Par F K H G
H56 : CongA H K F G H M
H55 : CongA J E N G H M
H54 : BetS B e C
H53 : TS M G H K
H52 : Midpoint B e C
H51 : EF D B e C G H M L
H50 : CongA G H M J E N
H49 : PG G H M L
M,L,e : Point
H48 : nCol G H K
H47 : nCol H G K
H46 : nCol K H G
H45 : Par F K H G
H44 : Triangle D B C
H43 : nCol D B C
H42 : OS S F K H
H41 : CongA H K F J E N
H40 : EF A B m D F K H G
H39 : PG F K H G
F,G : Point
H38 : nCol S K H
H37 : nCol H K S
H36 : neq H K
H35 : neq K H
H34 : Col R K K
H33 : eq K K
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (Col H M K) by (forward_using lemma_collinearorder).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (Col R K K) by (conclude_def Col ).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (neq H K) by (conclude lemma_inequalitysymmetric).
assert (nCol H K S) by (conclude lemma_NChelper).
assert (nCol S K H) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F G, (PG F K H G /\\ EF A B m D F K H G /\\ CongA H K F J E N /\\ OS S F K H)) by (conclude proposition_42B);destruct Tf as [F[G]];spliter.
assert (nCol D B C) by (forward_using lemma_NCorder).
assert (Triangle D B C) by (conclude_def Triangle ).
assert (Par F K H G) by (conclude_def PG ).
assert (nCol K H G) by (forward_using lemma_parallelNC).
assert (nCol H G K) by (forward_using lemma_NCorder).
assert (nCol G H K) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists M L e, (PG G H M L /\\ CongA G H M J E N /\\ EF D B e C G H M L /\\ Midpoint B e C /\\ TS M G H K)) by (conclude proposition_44);destruct Tf as [M[L[e]]];spliter.
assert (BetS B e C) by (conclude_def Midpoint ).
assert (CongA J E N G H M) by (conclude lemma_equalanglessymmetric).
assert (CongA H K F G H M) by (conclude lemma_equalanglestransitive).
assert (Par F K H G) by (conclude_def PG ).
assert (Par K F H G) by (forward_using lemma_parallelflip).
assert (neq H K) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists s, (BetS H K s /\\ Cong K s H K)) by (conclude lemma_extension);destruct Tf as [s];spliter.
assert (Par F G K H) by (conclude_def PG ).
assert (Par K H F G) by (conclude lemma_parallelsymmetric).
assert (TP K H F G) by (conclude lemma_paralleldef2B).
assert (OS F G K H) by (conclude_def TP ).
assert (RT F K H K H G) by (conclude proposition_29C).
assert (CongA G H M H K F) by (conclude lemma_equalanglessymmetric).
assert (nCol H K F) by (conclude lemma_equalanglesNC).
assert (nCol F K H) by (forward_using lemma_NCorder).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H G H M) by (conclude lemma_equalanglestransitive).
assert (RT G H M K H G) by (conclude lemma_RTcongruence).
assert (RT K H G G H M) by (conclude lemma_RTsymmetric).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (neq H G) by (forward_using lemma_NCdistinct).
assert (Out H G G) by (conclude lemma_ray4).
assert (BetS K H M) by (conclude proposition_14).
assert (neq F K) by (forward_using lemma_NCdistinct).
assert (nCol G H M) by (conclude lemma_equalanglesNC).
assert (neq G H) by (forward_using lemma_NCdistinct).
assert (Par G H M L) by (conclude_def PG ).
assert (nCol H M L) by (forward_using lemma_parallelNC).
assert (neq L M) by (forward_using lemma_NCdistinct).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (eq H H) by (conclude cn_equalityreflexive).
assert (eq M M) by (conclude cn_equalityreflexive).
assert (Col F K K) by (conclude_def Col ).
assert (Col G H H) by (conclude_def Col ).
assert (Col L M M) by (conclude_def Col ).
assert (Par F K G H) by (forward_using lemma_parallelflip).
assert (Par M L G H) by (conclude lemma_parallelsymmetric).
assert (Par L M G H) by (forward_using lemma_parallelflip).
assert (Par F K L M) by (conclude proposition_30).
assert (Par F K M L) by (forward_using lemma_parallelflip).
assert (Par F G K H) by (conclude_def PG ).
assert (Par G L H M) by (conclude_def PG ).
assert (Par F G H K) by (forward_using lemma_parallelflip).
assert (Col K H M) by (conclude_def Col ).
assert (Col H K M) by (forward_using lemma_collinearorder).
assert (neq K M) by (forward_using lemma_betweennotequal).
assert (neq M K) by (conclude lemma_inequalitysymmetric).
assert (Par F G M K) by (conclude lemma_collinearparallel).
assert (Col H M K) by (forward_using lemma_collinearorder).

*****
H103 : Col H M K
H102 : Par F G M K
H101 : neq M K
H100 : neq K M
H99 : Col H K M
H98 : Col K H M
H97 : Par F G H K
H96 : Par G L H M
H95 : Par F G K H
H94 : Par F K M L
H93 : Par F K L M
H92 : Par L M G H
H91 : Par M L G H
H90 : Par F K G H
H89 : Col L M M
H88 : Col G H H
H87 : Col F K K
H86 : eq M M
H85 : eq H H
H84 : eq K K
H83 : neq L M
H82 : nCol H M L
H81 : Par G H M L
H80 : neq G H
H79 : nCol G H M
H78 : neq F K
H77 : BetS K H M
H76 : Out H G G
H75 : neq H G
H74 : eq G G
H73 : RT K H G G H M
H72 : RT G H M K H G
H71 : CongA F K H G H M
H70 : CongA F K H H K F
H69 : nCol F K H
H68 : nCol H K F
H67 : CongA G H M H K F
H66 : RT F K H K H G
H65 : OS F G K H
H64 : TP K H F G
H63 : Par K H F G
H62 : Par F G K H
H61 : Cong K s H K
H60 : BetS H K s
s : Point
H59 : neq H K
H58 : Par K F H G
H57 : Par F K H G
H56 : CongA H K F G H M
H55 : CongA J E N G H M
H54 : BetS B e C
H53 : TS M G H K
H52 : Midpoint B e C
H51 : EF D B e C G H M L
H50 : CongA G H M J E N
H49 : PG G H M L
M,L,e : Point
H48 : nCol G H K
H47 : nCol H G K
H46 : nCol K H G
H45 : Par F K H G
H44 : Triangle D B C
H43 : nCol D B C
H42 : OS S F K H
H41 : CongA H K F J E N
H40 : EF A B m D F K H G
H39 : PG F K H G
F,G : Point
H38 : nCol S K H
H37 : nCol H K S
H36 : neq H K
H35 : neq K H
H34 : Col R K K
H33 : eq K K
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (Par G L K M) by (conclude lemma_collinearparallel).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (Col R K K) by (conclude_def Col ).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (neq H K) by (conclude lemma_inequalitysymmetric).
assert (nCol H K S) by (conclude lemma_NChelper).
assert (nCol S K H) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F G, (PG F K H G /\\ EF A B m D F K H G /\\ CongA H K F J E N /\\ OS S F K H)) by (conclude proposition_42B);destruct Tf as [F[G]];spliter.
assert (nCol D B C) by (forward_using lemma_NCorder).
assert (Triangle D B C) by (conclude_def Triangle ).
assert (Par F K H G) by (conclude_def PG ).
assert (nCol K H G) by (forward_using lemma_parallelNC).
assert (nCol H G K) by (forward_using lemma_NCorder).
assert (nCol G H K) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists M L e, (PG G H M L /\\ CongA G H M J E N /\\ EF D B e C G H M L /\\ Midpoint B e C /\\ TS M G H K)) by (conclude proposition_44);destruct Tf as [M[L[e]]];spliter.
assert (BetS B e C) by (conclude_def Midpoint ).
assert (CongA J E N G H M) by (conclude lemma_equalanglessymmetric).
assert (CongA H K F G H M) by (conclude lemma_equalanglestransitive).
assert (Par F K H G) by (conclude_def PG ).
assert (Par K F H G) by (forward_using lemma_parallelflip).
assert (neq H K) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists s, (BetS H K s /\\ Cong K s H K)) by (conclude lemma_extension);destruct Tf as [s];spliter.
assert (Par F G K H) by (conclude_def PG ).
assert (Par K H F G) by (conclude lemma_parallelsymmetric).
assert (TP K H F G) by (conclude lemma_paralleldef2B).
assert (OS F G K H) by (conclude_def TP ).
assert (RT F K H K H G) by (conclude proposition_29C).
assert (CongA G H M H K F) by (conclude lemma_equalanglessymmetric).
assert (nCol H K F) by (conclude lemma_equalanglesNC).
assert (nCol F K H) by (forward_using lemma_NCorder).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H G H M) by (conclude lemma_equalanglestransitive).
assert (RT G H M K H G) by (conclude lemma_RTcongruence).
assert (RT K H G G H M) by (conclude lemma_RTsymmetric).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (neq H G) by (forward_using lemma_NCdistinct).
assert (Out H G G) by (conclude lemma_ray4).
assert (BetS K H M) by (conclude proposition_14).
assert (neq F K) by (forward_using lemma_NCdistinct).
assert (nCol G H M) by (conclude lemma_equalanglesNC).
assert (neq G H) by (forward_using lemma_NCdistinct).
assert (Par G H M L) by (conclude_def PG ).
assert (nCol H M L) by (forward_using lemma_parallelNC).
assert (neq L M) by (forward_using lemma_NCdistinct).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (eq H H) by (conclude cn_equalityreflexive).
assert (eq M M) by (conclude cn_equalityreflexive).
assert (Col F K K) by (conclude_def Col ).
assert (Col G H H) by (conclude_def Col ).
assert (Col L M M) by (conclude_def Col ).
assert (Par F K G H) by (forward_using lemma_parallelflip).
assert (Par M L G H) by (conclude lemma_parallelsymmetric).
assert (Par L M G H) by (forward_using lemma_parallelflip).
assert (Par F K L M) by (conclude proposition_30).
assert (Par F K M L) by (forward_using lemma_parallelflip).
assert (Par F G K H) by (conclude_def PG ).
assert (Par G L H M) by (conclude_def PG ).
assert (Par F G H K) by (forward_using lemma_parallelflip).
assert (Col K H M) by (conclude_def Col ).
assert (Col H K M) by (forward_using lemma_collinearorder).
assert (neq K M) by (forward_using lemma_betweennotequal).
assert (neq M K) by (conclude lemma_inequalitysymmetric).
assert (Par F G M K) by (conclude lemma_collinearparallel).
assert (Col H M K) by (forward_using lemma_collinearorder).
assert (Par G L K M) by (conclude lemma_collinearparallel).

*****
H104 : Par G L K M
H103 : Col H M K
H102 : Par F G M K
H101 : neq M K
H100 : neq K M
H99 : Col H K M
H98 : Col K H M
H97 : Par F G H K
H96 : Par G L H M
H95 : Par F G K H
H94 : Par F K M L
H93 : Par F K L M
H92 : Par L M G H
H91 : Par M L G H
H90 : Par F K G H
H89 : Col L M M
H88 : Col G H H
H87 : Col F K K
H86 : eq M M
H85 : eq H H
H84 : eq K K
H83 : neq L M
H82 : nCol H M L
H81 : Par G H M L
H80 : neq G H
H79 : nCol G H M
H78 : neq F K
H77 : BetS K H M
H76 : Out H G G
H75 : neq H G
H74 : eq G G
H73 : RT K H G G H M
H72 : RT G H M K H G
H71 : CongA F K H G H M
H70 : CongA F K H H K F
H69 : nCol F K H
H68 : nCol H K F
H67 : CongA G H M H K F
H66 : RT F K H K H G
H65 : OS F G K H
H64 : TP K H F G
H63 : Par K H F G
H62 : Par F G K H
H61 : Cong K s H K
H60 : BetS H K s
s : Point
H59 : neq H K
H58 : Par K F H G
H57 : Par F K H G
H56 : CongA H K F G H M
H55 : CongA J E N G H M
H54 : BetS B e C
H53 : TS M G H K
H52 : Midpoint B e C
H51 : EF D B e C G H M L
H50 : CongA G H M J E N
H49 : PG G H M L
M,L,e : Point
H48 : nCol G H K
H47 : nCol H G K
H46 : nCol K H G
H45 : Par F K H G
H44 : Triangle D B C
H43 : nCol D B C
H42 : OS S F K H
H41 : CongA H K F J E N
H40 : EF A B m D F K H G
H39 : PG F K H G
F,G : Point
H38 : nCol S K H
H37 : nCol H K S
H36 : neq H K
H35 : neq K H
H34 : Col R K K
H33 : eq K K
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (Par G L M K) by (forward_using lemma_parallelflip).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (Col R K K) by (conclude_def Col ).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (neq H K) by (conclude lemma_inequalitysymmetric).
assert (nCol H K S) by (conclude lemma_NChelper).
assert (nCol S K H) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F G, (PG F K H G /\\ EF A B m D F K H G /\\ CongA H K F J E N /\\ OS S F K H)) by (conclude proposition_42B);destruct Tf as [F[G]];spliter.
assert (nCol D B C) by (forward_using lemma_NCorder).
assert (Triangle D B C) by (conclude_def Triangle ).
assert (Par F K H G) by (conclude_def PG ).
assert (nCol K H G) by (forward_using lemma_parallelNC).
assert (nCol H G K) by (forward_using lemma_NCorder).
assert (nCol G H K) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists M L e, (PG G H M L /\\ CongA G H M J E N /\\ EF D B e C G H M L /\\ Midpoint B e C /\\ TS M G H K)) by (conclude proposition_44);destruct Tf as [M[L[e]]];spliter.
assert (BetS B e C) by (conclude_def Midpoint ).
assert (CongA J E N G H M) by (conclude lemma_equalanglessymmetric).
assert (CongA H K F G H M) by (conclude lemma_equalanglestransitive).
assert (Par F K H G) by (conclude_def PG ).
assert (Par K F H G) by (forward_using lemma_parallelflip).
assert (neq H K) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists s, (BetS H K s /\\ Cong K s H K)) by (conclude lemma_extension);destruct Tf as [s];spliter.
assert (Par F G K H) by (conclude_def PG ).
assert (Par K H F G) by (conclude lemma_parallelsymmetric).
assert (TP K H F G) by (conclude lemma_paralleldef2B).
assert (OS F G K H) by (conclude_def TP ).
assert (RT F K H K H G) by (conclude proposition_29C).
assert (CongA G H M H K F) by (conclude lemma_equalanglessymmetric).
assert (nCol H K F) by (conclude lemma_equalanglesNC).
assert (nCol F K H) by (forward_using lemma_NCorder).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H G H M) by (conclude lemma_equalanglestransitive).
assert (RT G H M K H G) by (conclude lemma_RTcongruence).
assert (RT K H G G H M) by (conclude lemma_RTsymmetric).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (neq H G) by (forward_using lemma_NCdistinct).
assert (Out H G G) by (conclude lemma_ray4).
assert (BetS K H M) by (conclude proposition_14).
assert (neq F K) by (forward_using lemma_NCdistinct).
assert (nCol G H M) by (conclude lemma_equalanglesNC).
assert (neq G H) by (forward_using lemma_NCdistinct).
assert (Par G H M L) by (conclude_def PG ).
assert (nCol H M L) by (forward_using lemma_parallelNC).
assert (neq L M) by (forward_using lemma_NCdistinct).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (eq H H) by (conclude cn_equalityreflexive).
assert (eq M M) by (conclude cn_equalityreflexive).
assert (Col F K K) by (conclude_def Col ).
assert (Col G H H) by (conclude_def Col ).
assert (Col L M M) by (conclude_def Col ).
assert (Par F K G H) by (forward_using lemma_parallelflip).
assert (Par M L G H) by (conclude lemma_parallelsymmetric).
assert (Par L M G H) by (forward_using lemma_parallelflip).
assert (Par F K L M) by (conclude proposition_30).
assert (Par F K M L) by (forward_using lemma_parallelflip).
assert (Par F G K H) by (conclude_def PG ).
assert (Par G L H M) by (conclude_def PG ).
assert (Par F G H K) by (forward_using lemma_parallelflip).
assert (Col K H M) by (conclude_def Col ).
assert (Col H K M) by (forward_using lemma_collinearorder).
assert (neq K M) by (forward_using lemma_betweennotequal).
assert (neq M K) by (conclude lemma_inequalitysymmetric).
assert (Par F G M K) by (conclude lemma_collinearparallel).
assert (Col H M K) by (forward_using lemma_collinearorder).
assert (Par G L K M) by (conclude lemma_collinearparallel).
assert (Par G L M K) by (forward_using lemma_parallelflip).

*****
H105 : Par G L M K
H104 : Par G L K M
H103 : Col H M K
H102 : Par F G M K
H101 : neq M K
H100 : neq K M
H99 : Col H K M
H98 : Col K H M
H97 : Par F G H K
H96 : Par G L H M
H95 : Par F G K H
H94 : Par F K M L
H93 : Par F K L M
H92 : Par L M G H
H91 : Par M L G H
H90 : Par F K G H
H89 : Col L M M
H88 : Col G H H
H87 : Col F K K
H86 : eq M M
H85 : eq H H
H84 : eq K K
H83 : neq L M
H82 : nCol H M L
H81 : Par G H M L
H80 : neq G H
H79 : nCol G H M
H78 : neq F K
H77 : BetS K H M
H76 : Out H G G
H75 : neq H G
H74 : eq G G
H73 : RT K H G G H M
H72 : RT G H M K H G
H71 : CongA F K H G H M
H70 : CongA F K H H K F
H69 : nCol F K H
H68 : nCol H K F
H67 : CongA G H M H K F
H66 : RT F K H K H G
H65 : OS F G K H
H64 : TP K H F G
H63 : Par K H F G
H62 : Par F G K H
H61 : Cong K s H K
H60 : BetS H K s
s : Point
H59 : neq H K
H58 : Par K F H G
H57 : Par F K H G
H56 : CongA H K F G H M
H55 : CongA J E N G H M
H54 : BetS B e C
H53 : TS M G H K
H52 : Midpoint B e C
H51 : EF D B e C G H M L
H50 : CongA G H M J E N
H49 : PG G H M L
M,L,e : Point
H48 : nCol G H K
H47 : nCol H G K
H46 : nCol K H G
H45 : Par F K H G
H44 : Triangle D B C
H43 : nCol D B C
H42 : OS S F K H
H41 : CongA H K F J E N
H40 : EF A B m D F K H G
H39 : PG F K H G
F,G : Point
H38 : nCol S K H
H37 : nCol H K S
H36 : neq H K
H35 : neq K H
H34 : Col R K K
H33 : eq K K
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (Par M K G L) by (conclude lemma_parallelsymmetric).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (Col R K K) by (conclude_def Col ).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (neq H K) by (conclude lemma_inequalitysymmetric).
assert (nCol H K S) by (conclude lemma_NChelper).
assert (nCol S K H) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F G, (PG F K H G /\\ EF A B m D F K H G /\\ CongA H K F J E N /\\ OS S F K H)) by (conclude proposition_42B);destruct Tf as [F[G]];spliter.
assert (nCol D B C) by (forward_using lemma_NCorder).
assert (Triangle D B C) by (conclude_def Triangle ).
assert (Par F K H G) by (conclude_def PG ).
assert (nCol K H G) by (forward_using lemma_parallelNC).
assert (nCol H G K) by (forward_using lemma_NCorder).
assert (nCol G H K) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists M L e, (PG G H M L /\\ CongA G H M J E N /\\ EF D B e C G H M L /\\ Midpoint B e C /\\ TS M G H K)) by (conclude proposition_44);destruct Tf as [M[L[e]]];spliter.
assert (BetS B e C) by (conclude_def Midpoint ).
assert (CongA J E N G H M) by (conclude lemma_equalanglessymmetric).
assert (CongA H K F G H M) by (conclude lemma_equalanglestransitive).
assert (Par F K H G) by (conclude_def PG ).
assert (Par K F H G) by (forward_using lemma_parallelflip).
assert (neq H K) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists s, (BetS H K s /\\ Cong K s H K)) by (conclude lemma_extension);destruct Tf as [s];spliter.
assert (Par F G K H) by (conclude_def PG ).
assert (Par K H F G) by (conclude lemma_parallelsymmetric).
assert (TP K H F G) by (conclude lemma_paralleldef2B).
assert (OS F G K H) by (conclude_def TP ).
assert (RT F K H K H G) by (conclude proposition_29C).
assert (CongA G H M H K F) by (conclude lemma_equalanglessymmetric).
assert (nCol H K F) by (conclude lemma_equalanglesNC).
assert (nCol F K H) by (forward_using lemma_NCorder).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H G H M) by (conclude lemma_equalanglestransitive).
assert (RT G H M K H G) by (conclude lemma_RTcongruence).
assert (RT K H G G H M) by (conclude lemma_RTsymmetric).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (neq H G) by (forward_using lemma_NCdistinct).
assert (Out H G G) by (conclude lemma_ray4).
assert (BetS K H M) by (conclude proposition_14).
assert (neq F K) by (forward_using lemma_NCdistinct).
assert (nCol G H M) by (conclude lemma_equalanglesNC).
assert (neq G H) by (forward_using lemma_NCdistinct).
assert (Par G H M L) by (conclude_def PG ).
assert (nCol H M L) by (forward_using lemma_parallelNC).
assert (neq L M) by (forward_using lemma_NCdistinct).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (eq H H) by (conclude cn_equalityreflexive).
assert (eq M M) by (conclude cn_equalityreflexive).
assert (Col F K K) by (conclude_def Col ).
assert (Col G H H) by (conclude_def Col ).
assert (Col L M M) by (conclude_def Col ).
assert (Par F K G H) by (forward_using lemma_parallelflip).
assert (Par M L G H) by (conclude lemma_parallelsymmetric).
assert (Par L M G H) by (forward_using lemma_parallelflip).
assert (Par F K L M) by (conclude proposition_30).
assert (Par F K M L) by (forward_using lemma_parallelflip).
assert (Par F G K H) by (conclude_def PG ).
assert (Par G L H M) by (conclude_def PG ).
assert (Par F G H K) by (forward_using lemma_parallelflip).
assert (Col K H M) by (conclude_def Col ).
assert (Col H K M) by (forward_using lemma_collinearorder).
assert (neq K M) by (forward_using lemma_betweennotequal).
assert (neq M K) by (conclude lemma_inequalitysymmetric).
assert (Par F G M K) by (conclude lemma_collinearparallel).
assert (Col H M K) by (forward_using lemma_collinearorder).
assert (Par G L K M) by (conclude lemma_collinearparallel).
assert (Par G L M K) by (forward_using lemma_parallelflip).
assert (Par M K G L) by (conclude lemma_parallelsymmetric).

*****
H106 : Par M K G L
H105 : Par G L M K
H104 : Par G L K M
H103 : Col H M K
H102 : Par F G M K
H101 : neq M K
H100 : neq K M
H99 : Col H K M
H98 : Col K H M
H97 : Par F G H K
H96 : Par G L H M
H95 : Par F G K H
H94 : Par F K M L
H93 : Par F K L M
H92 : Par L M G H
H91 : Par M L G H
H90 : Par F K G H
H89 : Col L M M
H88 : Col G H H
H87 : Col F K K
H86 : eq M M
H85 : eq H H
H84 : eq K K
H83 : neq L M
H82 : nCol H M L
H81 : Par G H M L
H80 : neq G H
H79 : nCol G H M
H78 : neq F K
H77 : BetS K H M
H76 : Out H G G
H75 : neq H G
H74 : eq G G
H73 : RT K H G G H M
H72 : RT G H M K H G
H71 : CongA F K H G H M
H70 : CongA F K H H K F
H69 : nCol F K H
H68 : nCol H K F
H67 : CongA G H M H K F
H66 : RT F K H K H G
H65 : OS F G K H
H64 : TP K H F G
H63 : Par K H F G
H62 : Par F G K H
H61 : Cong K s H K
H60 : BetS H K s
s : Point
H59 : neq H K
H58 : Par K F H G
H57 : Par F K H G
H56 : CongA H K F G H M
H55 : CongA J E N G H M
H54 : BetS B e C
H53 : TS M G H K
H52 : Midpoint B e C
H51 : EF D B e C G H M L
H50 : CongA G H M J E N
H49 : PG G H M L
M,L,e : Point
H48 : nCol G H K
H47 : nCol H G K
H46 : nCol K H G
H45 : Par F K H G
H44 : Triangle D B C
H43 : nCol D B C
H42 : OS S F K H
H41 : CongA H K F J E N
H40 : EF A B m D F K H G
H39 : PG F K H G
F,G : Point
H38 : nCol S K H
H37 : nCol H K S
H36 : neq H K
H35 : neq K H
H34 : Col R K K
H33 : eq K K
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (Par M K F G) by (conclude lemma_parallelsymmetric).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (Col R K K) by (conclude_def Col ).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (neq H K) by (conclude lemma_inequalitysymmetric).
assert (nCol H K S) by (conclude lemma_NChelper).
assert (nCol S K H) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F G, (PG F K H G /\\ EF A B m D F K H G /\\ CongA H K F J E N /\\ OS S F K H)) by (conclude proposition_42B);destruct Tf as [F[G]];spliter.
assert (nCol D B C) by (forward_using lemma_NCorder).
assert (Triangle D B C) by (conclude_def Triangle ).
assert (Par F K H G) by (conclude_def PG ).
assert (nCol K H G) by (forward_using lemma_parallelNC).
assert (nCol H G K) by (forward_using lemma_NCorder).
assert (nCol G H K) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists M L e, (PG G H M L /\\ CongA G H M J E N /\\ EF D B e C G H M L /\\ Midpoint B e C /\\ TS M G H K)) by (conclude proposition_44);destruct Tf as [M[L[e]]];spliter.
assert (BetS B e C) by (conclude_def Midpoint ).
assert (CongA J E N G H M) by (conclude lemma_equalanglessymmetric).
assert (CongA H K F G H M) by (conclude lemma_equalanglestransitive).
assert (Par F K H G) by (conclude_def PG ).
assert (Par K F H G) by (forward_using lemma_parallelflip).
assert (neq H K) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists s, (BetS H K s /\\ Cong K s H K)) by (conclude lemma_extension);destruct Tf as [s];spliter.
assert (Par F G K H) by (conclude_def PG ).
assert (Par K H F G) by (conclude lemma_parallelsymmetric).
assert (TP K H F G) by (conclude lemma_paralleldef2B).
assert (OS F G K H) by (conclude_def TP ).
assert (RT F K H K H G) by (conclude proposition_29C).
assert (CongA G H M H K F) by (conclude lemma_equalanglessymmetric).
assert (nCol H K F) by (conclude lemma_equalanglesNC).
assert (nCol F K H) by (forward_using lemma_NCorder).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H G H M) by (conclude lemma_equalanglestransitive).
assert (RT G H M K H G) by (conclude lemma_RTcongruence).
assert (RT K H G G H M) by (conclude lemma_RTsymmetric).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (neq H G) by (forward_using lemma_NCdistinct).
assert (Out H G G) by (conclude lemma_ray4).
assert (BetS K H M) by (conclude proposition_14).
assert (neq F K) by (forward_using lemma_NCdistinct).
assert (nCol G H M) by (conclude lemma_equalanglesNC).
assert (neq G H) by (forward_using lemma_NCdistinct).
assert (Par G H M L) by (conclude_def PG ).
assert (nCol H M L) by (forward_using lemma_parallelNC).
assert (neq L M) by (forward_using lemma_NCdistinct).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (eq H H) by (conclude cn_equalityreflexive).
assert (eq M M) by (conclude cn_equalityreflexive).
assert (Col F K K) by (conclude_def Col ).
assert (Col G H H) by (conclude_def Col ).
assert (Col L M M) by (conclude_def Col ).
assert (Par F K G H) by (forward_using lemma_parallelflip).
assert (Par M L G H) by (conclude lemma_parallelsymmetric).
assert (Par L M G H) by (forward_using lemma_parallelflip).
assert (Par F K L M) by (conclude proposition_30).
assert (Par F K M L) by (forward_using lemma_parallelflip).
assert (Par F G K H) by (conclude_def PG ).
assert (Par G L H M) by (conclude_def PG ).
assert (Par F G H K) by (forward_using lemma_parallelflip).
assert (Col K H M) by (conclude_def Col ).
assert (Col H K M) by (forward_using lemma_collinearorder).
assert (neq K M) by (forward_using lemma_betweennotequal).
assert (neq M K) by (conclude lemma_inequalitysymmetric).
assert (Par F G M K) by (conclude lemma_collinearparallel).
assert (Col H M K) by (forward_using lemma_collinearorder).
assert (Par G L K M) by (conclude lemma_collinearparallel).
assert (Par G L M K) by (forward_using lemma_parallelflip).
assert (Par M K G L) by (conclude lemma_parallelsymmetric).
assert (Par M K F G) by (conclude lemma_parallelsymmetric).

*****
H107 : Par M K F G
H106 : Par M K G L
H105 : Par G L M K
H104 : Par G L K M
H103 : Col H M K
H102 : Par F G M K
H101 : neq M K
H100 : neq K M
H99 : Col H K M
H98 : Col K H M
H97 : Par F G H K
H96 : Par G L H M
H95 : Par F G K H
H94 : Par F K M L
H93 : Par F K L M
H92 : Par L M G H
H91 : Par M L G H
H90 : Par F K G H
H89 : Col L M M
H88 : Col G H H
H87 : Col F K K
H86 : eq M M
H85 : eq H H
H84 : eq K K
H83 : neq L M
H82 : nCol H M L
H81 : Par G H M L
H80 : neq G H
H79 : nCol G H M
H78 : neq F K
H77 : BetS K H M
H76 : Out H G G
H75 : neq H G
H74 : eq G G
H73 : RT K H G G H M
H72 : RT G H M K H G
H71 : CongA F K H G H M
H70 : CongA F K H H K F
H69 : nCol F K H
H68 : nCol H K F
H67 : CongA G H M H K F
H66 : RT F K H K H G
H65 : OS F G K H
H64 : TP K H F G
H63 : Par K H F G
H62 : Par F G K H
H61 : Cong K s H K
H60 : BetS H K s
s : Point
H59 : neq H K
H58 : Par K F H G
H57 : Par F K H G
H56 : CongA H K F G H M
H55 : CongA J E N G H M
H54 : BetS B e C
H53 : TS M G H K
H52 : Midpoint B e C
H51 : EF D B e C G H M L
H50 : CongA G H M J E N
H49 : PG G H M L
M,L,e : Point
H48 : nCol G H K
H47 : nCol H G K
H46 : nCol K H G
H45 : Par F K H G
H44 : Triangle D B C
H43 : nCol D B C
H42 : OS S F K H
H41 : CongA H K F J E N
H40 : EF A B m D F K H G
H39 : PG F K H G
F,G : Point
H38 : nCol S K H
H37 : nCol H K S
H36 : neq H K
H35 : neq K H
H34 : Col R K K
H33 : eq K K
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (Par M K G F) by (forward_using lemma_parallelflip).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (Col R K K) by (conclude_def Col ).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (neq H K) by (conclude lemma_inequalitysymmetric).
assert (nCol H K S) by (conclude lemma_NChelper).
assert (nCol S K H) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F G, (PG F K H G /\\ EF A B m D F K H G /\\ CongA H K F J E N /\\ OS S F K H)) by (conclude proposition_42B);destruct Tf as [F[G]];spliter.
assert (nCol D B C) by (forward_using lemma_NCorder).
assert (Triangle D B C) by (conclude_def Triangle ).
assert (Par F K H G) by (conclude_def PG ).
assert (nCol K H G) by (forward_using lemma_parallelNC).
assert (nCol H G K) by (forward_using lemma_NCorder).
assert (nCol G H K) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists M L e, (PG G H M L /\\ CongA G H M J E N /\\ EF D B e C G H M L /\\ Midpoint B e C /\\ TS M G H K)) by (conclude proposition_44);destruct Tf as [M[L[e]]];spliter.
assert (BetS B e C) by (conclude_def Midpoint ).
assert (CongA J E N G H M) by (conclude lemma_equalanglessymmetric).
assert (CongA H K F G H M) by (conclude lemma_equalanglestransitive).
assert (Par F K H G) by (conclude_def PG ).
assert (Par K F H G) by (forward_using lemma_parallelflip).
assert (neq H K) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists s, (BetS H K s /\\ Cong K s H K)) by (conclude lemma_extension);destruct Tf as [s];spliter.
assert (Par F G K H) by (conclude_def PG ).
assert (Par K H F G) by (conclude lemma_parallelsymmetric).
assert (TP K H F G) by (conclude lemma_paralleldef2B).
assert (OS F G K H) by (conclude_def TP ).
assert (RT F K H K H G) by (conclude proposition_29C).
assert (CongA G H M H K F) by (conclude lemma_equalanglessymmetric).
assert (nCol H K F) by (conclude lemma_equalanglesNC).
assert (nCol F K H) by (forward_using lemma_NCorder).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H G H M) by (conclude lemma_equalanglestransitive).
assert (RT G H M K H G) by (conclude lemma_RTcongruence).
assert (RT K H G G H M) by (conclude lemma_RTsymmetric).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (neq H G) by (forward_using lemma_NCdistinct).
assert (Out H G G) by (conclude lemma_ray4).
assert (BetS K H M) by (conclude proposition_14).
assert (neq F K) by (forward_using lemma_NCdistinct).
assert (nCol G H M) by (conclude lemma_equalanglesNC).
assert (neq G H) by (forward_using lemma_NCdistinct).
assert (Par G H M L) by (conclude_def PG ).
assert (nCol H M L) by (forward_using lemma_parallelNC).
assert (neq L M) by (forward_using lemma_NCdistinct).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (eq H H) by (conclude cn_equalityreflexive).
assert (eq M M) by (conclude cn_equalityreflexive).
assert (Col F K K) by (conclude_def Col ).
assert (Col G H H) by (conclude_def Col ).
assert (Col L M M) by (conclude_def Col ).
assert (Par F K G H) by (forward_using lemma_parallelflip).
assert (Par M L G H) by (conclude lemma_parallelsymmetric).
assert (Par L M G H) by (forward_using lemma_parallelflip).
assert (Par F K L M) by (conclude proposition_30).
assert (Par F K M L) by (forward_using lemma_parallelflip).
assert (Par F G K H) by (conclude_def PG ).
assert (Par G L H M) by (conclude_def PG ).
assert (Par F G H K) by (forward_using lemma_parallelflip).
assert (Col K H M) by (conclude_def Col ).
assert (Col H K M) by (forward_using lemma_collinearorder).
assert (neq K M) by (forward_using lemma_betweennotequal).
assert (neq M K) by (conclude lemma_inequalitysymmetric).
assert (Par F G M K) by (conclude lemma_collinearparallel).
assert (Col H M K) by (forward_using lemma_collinearorder).
assert (Par G L K M) by (conclude lemma_collinearparallel).
assert (Par G L M K) by (forward_using lemma_parallelflip).
assert (Par M K G L) by (conclude lemma_parallelsymmetric).
assert (Par M K F G) by (conclude lemma_parallelsymmetric).
assert (Par M K G F) by (forward_using lemma_parallelflip).

*****
H108 : Par M K G F
H107 : Par M K F G
H106 : Par M K G L
H105 : Par G L M K
H104 : Par G L K M
H103 : Col H M K
H102 : Par F G M K
H101 : neq M K
H100 : neq K M
H99 : Col H K M
H98 : Col K H M
H97 : Par F G H K
H96 : Par G L H M
H95 : Par F G K H
H94 : Par F K M L
H93 : Par F K L M
H92 : Par L M G H
H91 : Par M L G H
H90 : Par F K G H
H89 : Col L M M
H88 : Col G H H
H87 : Col F K K
H86 : eq M M
H85 : eq H H
H84 : eq K K
H83 : neq L M
H82 : nCol H M L
H81 : Par G H M L
H80 : neq G H
H79 : nCol G H M
H78 : neq F K
H77 : BetS K H M
H76 : Out H G G
H75 : neq H G
H74 : eq G G
H73 : RT K H G G H M
H72 : RT G H M K H G
H71 : CongA F K H G H M
H70 : CongA F K H H K F
H69 : nCol F K H
H68 : nCol H K F
H67 : CongA G H M H K F
H66 : RT F K H K H G
H65 : OS F G K H
H64 : TP K H F G
H63 : Par K H F G
H62 : Par F G K H
H61 : Cong K s H K
H60 : BetS H K s
s : Point
H59 : neq H K
H58 : Par K F H G
H57 : Par F K H G
H56 : CongA H K F G H M
H55 : CongA J E N G H M
H54 : BetS B e C
H53 : TS M G H K
H52 : Midpoint B e C
H51 : EF D B e C G H M L
H50 : CongA G H M J E N
H49 : PG G H M L
M,L,e : Point
H48 : nCol G H K
H47 : nCol H G K
H46 : nCol K H G
H45 : Par F K H G
H44 : Triangle D B C
H43 : nCol D B C
H42 : OS S F K H
H41 : CongA H K F J E N
H40 : EF A B m D F K H G
H39 : PG F K H G
F,G : Point
H38 : nCol S K H
H37 : nCol H K S
H36 : neq H K
H35 : neq K H
H34 : Col R K K
H33 : eq K K
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (Col G L F) by (conclude lemma_Playfair).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (Col R K K) by (conclude_def Col ).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (neq H K) by (conclude lemma_inequalitysymmetric).
assert (nCol H K S) by (conclude lemma_NChelper).
assert (nCol S K H) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F G, (PG F K H G /\\ EF A B m D F K H G /\\ CongA H K F J E N /\\ OS S F K H)) by (conclude proposition_42B);destruct Tf as [F[G]];spliter.
assert (nCol D B C) by (forward_using lemma_NCorder).
assert (Triangle D B C) by (conclude_def Triangle ).
assert (Par F K H G) by (conclude_def PG ).
assert (nCol K H G) by (forward_using lemma_parallelNC).
assert (nCol H G K) by (forward_using lemma_NCorder).
assert (nCol G H K) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists M L e, (PG G H M L /\\ CongA G H M J E N /\\ EF D B e C G H M L /\\ Midpoint B e C /\\ TS M G H K)) by (conclude proposition_44);destruct Tf as [M[L[e]]];spliter.
assert (BetS B e C) by (conclude_def Midpoint ).
assert (CongA J E N G H M) by (conclude lemma_equalanglessymmetric).
assert (CongA H K F G H M) by (conclude lemma_equalanglestransitive).
assert (Par F K H G) by (conclude_def PG ).
assert (Par K F H G) by (forward_using lemma_parallelflip).
assert (neq H K) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists s, (BetS H K s /\\ Cong K s H K)) by (conclude lemma_extension);destruct Tf as [s];spliter.
assert (Par F G K H) by (conclude_def PG ).
assert (Par K H F G) by (conclude lemma_parallelsymmetric).
assert (TP K H F G) by (conclude lemma_paralleldef2B).
assert (OS F G K H) by (conclude_def TP ).
assert (RT F K H K H G) by (conclude proposition_29C).
assert (CongA G H M H K F) by (conclude lemma_equalanglessymmetric).
assert (nCol H K F) by (conclude lemma_equalanglesNC).
assert (nCol F K H) by (forward_using lemma_NCorder).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H G H M) by (conclude lemma_equalanglestransitive).
assert (RT G H M K H G) by (conclude lemma_RTcongruence).
assert (RT K H G G H M) by (conclude lemma_RTsymmetric).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (neq H G) by (forward_using lemma_NCdistinct).
assert (Out H G G) by (conclude lemma_ray4).
assert (BetS K H M) by (conclude proposition_14).
assert (neq F K) by (forward_using lemma_NCdistinct).
assert (nCol G H M) by (conclude lemma_equalanglesNC).
assert (neq G H) by (forward_using lemma_NCdistinct).
assert (Par G H M L) by (conclude_def PG ).
assert (nCol H M L) by (forward_using lemma_parallelNC).
assert (neq L M) by (forward_using lemma_NCdistinct).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (eq H H) by (conclude cn_equalityreflexive).
assert (eq M M) by (conclude cn_equalityreflexive).
assert (Col F K K) by (conclude_def Col ).
assert (Col G H H) by (conclude_def Col ).
assert (Col L M M) by (conclude_def Col ).
assert (Par F K G H) by (forward_using lemma_parallelflip).
assert (Par M L G H) by (conclude lemma_parallelsymmetric).
assert (Par L M G H) by (forward_using lemma_parallelflip).
assert (Par F K L M) by (conclude proposition_30).
assert (Par F K M L) by (forward_using lemma_parallelflip).
assert (Par F G K H) by (conclude_def PG ).
assert (Par G L H M) by (conclude_def PG ).
assert (Par F G H K) by (forward_using lemma_parallelflip).
assert (Col K H M) by (conclude_def Col ).
assert (Col H K M) by (forward_using lemma_collinearorder).
assert (neq K M) by (forward_using lemma_betweennotequal).
assert (neq M K) by (conclude lemma_inequalitysymmetric).
assert (Par F G M K) by (conclude lemma_collinearparallel).
assert (Col H M K) by (forward_using lemma_collinearorder).
assert (Par G L K M) by (conclude lemma_collinearparallel).
assert (Par G L M K) by (forward_using lemma_parallelflip).
assert (Par M K G L) by (conclude lemma_parallelsymmetric).
assert (Par M K F G) by (conclude lemma_parallelsymmetric).
assert (Par M K G F) by (forward_using lemma_parallelflip).
assert (Col G L F) by (conclude lemma_Playfair).

*****
H109 : Col G L F
H108 : Par M K G F
H107 : Par M K F G
H106 : Par M K G L
H105 : Par G L M K
H104 : Par G L K M
H103 : Col H M K
H102 : Par F G M K
H101 : neq M K
H100 : neq K M
H99 : Col H K M
H98 : Col K H M
H97 : Par F G H K
H96 : Par G L H M
H95 : Par F G K H
H94 : Par F K M L
H93 : Par F K L M
H92 : Par L M G H
H91 : Par M L G H
H90 : Par F K G H
H89 : Col L M M
H88 : Col G H H
H87 : Col F K K
H86 : eq M M
H85 : eq H H
H84 : eq K K
H83 : neq L M
H82 : nCol H M L
H81 : Par G H M L
H80 : neq G H
H79 : nCol G H M
H78 : neq F K
H77 : BetS K H M
H76 : Out H G G
H75 : neq H G
H74 : eq G G
H73 : RT K H G G H M
H72 : RT G H M K H G
H71 : CongA F K H G H M
H70 : CongA F K H H K F
H69 : nCol F K H
H68 : nCol H K F
H67 : CongA G H M H K F
H66 : RT F K H K H G
H65 : OS F G K H
H64 : TP K H F G
H63 : Par K H F G
H62 : Par F G K H
H61 : Cong K s H K
H60 : BetS H K s
s : Point
H59 : neq H K
H58 : Par K F H G
H57 : Par F K H G
H56 : CongA H K F G H M
H55 : CongA J E N G H M
H54 : BetS B e C
H53 : TS M G H K
H52 : Midpoint B e C
H51 : EF D B e C G H M L
H50 : CongA G H M J E N
H49 : PG G H M L
M,L,e : Point
H48 : nCol G H K
H47 : nCol H G K
H46 : nCol K H G
H45 : Par F K H G
H44 : Triangle D B C
H43 : nCol D B C
H42 : OS S F K H
H41 : CongA H K F J E N
H40 : EF A B m D F K H G
H39 : PG F K H G
F,G : Point
H38 : nCol S K H
H37 : nCol H K S
H36 : neq H K
H35 : neq K H
H34 : Col R K K
H33 : eq K K
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (Col G F L) by (forward_using lemma_collinearorder).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (Col R K K) by (conclude_def Col ).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (neq H K) by (conclude lemma_inequalitysymmetric).
assert (nCol H K S) by (conclude lemma_NChelper).
assert (nCol S K H) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F G, (PG F K H G /\\ EF A B m D F K H G /\\ CongA H K F J E N /\\ OS S F K H)) by (conclude proposition_42B);destruct Tf as [F[G]];spliter.
assert (nCol D B C) by (forward_using lemma_NCorder).
assert (Triangle D B C) by (conclude_def Triangle ).
assert (Par F K H G) by (conclude_def PG ).
assert (nCol K H G) by (forward_using lemma_parallelNC).
assert (nCol H G K) by (forward_using lemma_NCorder).
assert (nCol G H K) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists M L e, (PG G H M L /\\ CongA G H M J E N /\\ EF D B e C G H M L /\\ Midpoint B e C /\\ TS M G H K)) by (conclude proposition_44);destruct Tf as [M[L[e]]];spliter.
assert (BetS B e C) by (conclude_def Midpoint ).
assert (CongA J E N G H M) by (conclude lemma_equalanglessymmetric).
assert (CongA H K F G H M) by (conclude lemma_equalanglestransitive).
assert (Par F K H G) by (conclude_def PG ).
assert (Par K F H G) by (forward_using lemma_parallelflip).
assert (neq H K) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists s, (BetS H K s /\\ Cong K s H K)) by (conclude lemma_extension);destruct Tf as [s];spliter.
assert (Par F G K H) by (conclude_def PG ).
assert (Par K H F G) by (conclude lemma_parallelsymmetric).
assert (TP K H F G) by (conclude lemma_paralleldef2B).
assert (OS F G K H) by (conclude_def TP ).
assert (RT F K H K H G) by (conclude proposition_29C).
assert (CongA G H M H K F) by (conclude lemma_equalanglessymmetric).
assert (nCol H K F) by (conclude lemma_equalanglesNC).
assert (nCol F K H) by (forward_using lemma_NCorder).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H G H M) by (conclude lemma_equalanglestransitive).
assert (RT G H M K H G) by (conclude lemma_RTcongruence).
assert (RT K H G G H M) by (conclude lemma_RTsymmetric).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (neq H G) by (forward_using lemma_NCdistinct).
assert (Out H G G) by (conclude lemma_ray4).
assert (BetS K H M) by (conclude proposition_14).
assert (neq F K) by (forward_using lemma_NCdistinct).
assert (nCol G H M) by (conclude lemma_equalanglesNC).
assert (neq G H) by (forward_using lemma_NCdistinct).
assert (Par G H M L) by (conclude_def PG ).
assert (nCol H M L) by (forward_using lemma_parallelNC).
assert (neq L M) by (forward_using lemma_NCdistinct).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (eq H H) by (conclude cn_equalityreflexive).
assert (eq M M) by (conclude cn_equalityreflexive).
assert (Col F K K) by (conclude_def Col ).
assert (Col G H H) by (conclude_def Col ).
assert (Col L M M) by (conclude_def Col ).
assert (Par F K G H) by (forward_using lemma_parallelflip).
assert (Par M L G H) by (conclude lemma_parallelsymmetric).
assert (Par L M G H) by (forward_using lemma_parallelflip).
assert (Par F K L M) by (conclude proposition_30).
assert (Par F K M L) by (forward_using lemma_parallelflip).
assert (Par F G K H) by (conclude_def PG ).
assert (Par G L H M) by (conclude_def PG ).
assert (Par F G H K) by (forward_using lemma_parallelflip).
assert (Col K H M) by (conclude_def Col ).
assert (Col H K M) by (forward_using lemma_collinearorder).
assert (neq K M) by (forward_using lemma_betweennotequal).
assert (neq M K) by (conclude lemma_inequalitysymmetric).
assert (Par F G M K) by (conclude lemma_collinearparallel).
assert (Col H M K) by (forward_using lemma_collinearorder).
assert (Par G L K M) by (conclude lemma_collinearparallel).
assert (Par G L M K) by (forward_using lemma_parallelflip).
assert (Par M K G L) by (conclude lemma_parallelsymmetric).
assert (Par M K F G) by (conclude lemma_parallelsymmetric).
assert (Par M K G F) by (forward_using lemma_parallelflip).
assert (Col G L F) by (conclude lemma_Playfair).
assert (Col G F L) by (forward_using lemma_collinearorder).

*****
H110 : Col G F L
H109 : Col G L F
H108 : Par M K G F
H107 : Par M K F G
H106 : Par M K G L
H105 : Par G L M K
H104 : Par G L K M
H103 : Col H M K
H102 : Par F G M K
H101 : neq M K
H100 : neq K M
H99 : Col H K M
H98 : Col K H M
H97 : Par F G H K
H96 : Par G L H M
H95 : Par F G K H
H94 : Par F K M L
H93 : Par F K L M
H92 : Par L M G H
H91 : Par M L G H
H90 : Par F K G H
H89 : Col L M M
H88 : Col G H H
H87 : Col F K K
H86 : eq M M
H85 : eq H H
H84 : eq K K
H83 : neq L M
H82 : nCol H M L
H81 : Par G H M L
H80 : neq G H
H79 : nCol G H M
H78 : neq F K
H77 : BetS K H M
H76 : Out H G G
H75 : neq H G
H74 : eq G G
H73 : RT K H G G H M
H72 : RT G H M K H G
H71 : CongA F K H G H M
H70 : CongA F K H H K F
H69 : nCol F K H
H68 : nCol H K F
H67 : CongA G H M H K F
H66 : RT F K H K H G
H65 : OS F G K H
H64 : TP K H F G
H63 : Par K H F G
H62 : Par F G K H
H61 : Cong K s H K
H60 : BetS H K s
s : Point
H59 : neq H K
H58 : Par K F H G
H57 : Par F K H G
H56 : CongA H K F G H M
H55 : CongA J E N G H M
H54 : BetS B e C
H53 : TS M G H K
H52 : Midpoint B e C
H51 : EF D B e C G H M L
H50 : CongA G H M J E N
H49 : PG G H M L
M,L,e : Point
H48 : nCol G H K
H47 : nCol H G K
H46 : nCol K H G
H45 : Par F K H G
H44 : Triangle D B C
H43 : nCol D B C
H42 : OS S F K H
H41 : CongA H K F J E N
H40 : EF A B m D F K H G
H39 : PG F K H G
F,G : Point
H38 : nCol S K H
H37 : nCol H K S
H36 : neq H K
H35 : neq K H
H34 : Col R K K
H33 : eq K K
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (nCol F L M) by (forward_using lemma_parallelNC).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (Col R K K) by (conclude_def Col ).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (neq H K) by (conclude lemma_inequalitysymmetric).
assert (nCol H K S) by (conclude lemma_NChelper).
assert (nCol S K H) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F G, (PG F K H G /\\ EF A B m D F K H G /\\ CongA H K F J E N /\\ OS S F K H)) by (conclude proposition_42B);destruct Tf as [F[G]];spliter.
assert (nCol D B C) by (forward_using lemma_NCorder).
assert (Triangle D B C) by (conclude_def Triangle ).
assert (Par F K H G) by (conclude_def PG ).
assert (nCol K H G) by (forward_using lemma_parallelNC).
assert (nCol H G K) by (forward_using lemma_NCorder).
assert (nCol G H K) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists M L e, (PG G H M L /\\ CongA G H M J E N /\\ EF D B e C G H M L /\\ Midpoint B e C /\\ TS M G H K)) by (conclude proposition_44);destruct Tf as [M[L[e]]];spliter.
assert (BetS B e C) by (conclude_def Midpoint ).
assert (CongA J E N G H M) by (conclude lemma_equalanglessymmetric).
assert (CongA H K F G H M) by (conclude lemma_equalanglestransitive).
assert (Par F K H G) by (conclude_def PG ).
assert (Par K F H G) by (forward_using lemma_parallelflip).
assert (neq H K) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists s, (BetS H K s /\\ Cong K s H K)) by (conclude lemma_extension);destruct Tf as [s];spliter.
assert (Par F G K H) by (conclude_def PG ).
assert (Par K H F G) by (conclude lemma_parallelsymmetric).
assert (TP K H F G) by (conclude lemma_paralleldef2B).
assert (OS F G K H) by (conclude_def TP ).
assert (RT F K H K H G) by (conclude proposition_29C).
assert (CongA G H M H K F) by (conclude lemma_equalanglessymmetric).
assert (nCol H K F) by (conclude lemma_equalanglesNC).
assert (nCol F K H) by (forward_using lemma_NCorder).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H G H M) by (conclude lemma_equalanglestransitive).
assert (RT G H M K H G) by (conclude lemma_RTcongruence).
assert (RT K H G G H M) by (conclude lemma_RTsymmetric).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (neq H G) by (forward_using lemma_NCdistinct).
assert (Out H G G) by (conclude lemma_ray4).
assert (BetS K H M) by (conclude proposition_14).
assert (neq F K) by (forward_using lemma_NCdistinct).
assert (nCol G H M) by (conclude lemma_equalanglesNC).
assert (neq G H) by (forward_using lemma_NCdistinct).
assert (Par G H M L) by (conclude_def PG ).
assert (nCol H M L) by (forward_using lemma_parallelNC).
assert (neq L M) by (forward_using lemma_NCdistinct).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (eq H H) by (conclude cn_equalityreflexive).
assert (eq M M) by (conclude cn_equalityreflexive).
assert (Col F K K) by (conclude_def Col ).
assert (Col G H H) by (conclude_def Col ).
assert (Col L M M) by (conclude_def Col ).
assert (Par F K G H) by (forward_using lemma_parallelflip).
assert (Par M L G H) by (conclude lemma_parallelsymmetric).
assert (Par L M G H) by (forward_using lemma_parallelflip).
assert (Par F K L M) by (conclude proposition_30).
assert (Par F K M L) by (forward_using lemma_parallelflip).
assert (Par F G K H) by (conclude_def PG ).
assert (Par G L H M) by (conclude_def PG ).
assert (Par F G H K) by (forward_using lemma_parallelflip).
assert (Col K H M) by (conclude_def Col ).
assert (Col H K M) by (forward_using lemma_collinearorder).
assert (neq K M) by (forward_using lemma_betweennotequal).
assert (neq M K) by (conclude lemma_inequalitysymmetric).
assert (Par F G M K) by (conclude lemma_collinearparallel).
assert (Col H M K) by (forward_using lemma_collinearorder).
assert (Par G L K M) by (conclude lemma_collinearparallel).
assert (Par G L M K) by (forward_using lemma_parallelflip).
assert (Par M K G L) by (conclude lemma_parallelsymmetric).
assert (Par M K F G) by (conclude lemma_parallelsymmetric).
assert (Par M K G F) by (forward_using lemma_parallelflip).
assert (Col G L F) by (conclude lemma_Playfair).
assert (Col G F L) by (forward_using lemma_collinearorder).
assert (nCol F L M) by (forward_using lemma_parallelNC).

*****
H111 : nCol F L M
H110 : Col G F L
H109 : Col G L F
H108 : Par M K G F
H107 : Par M K F G
H106 : Par M K G L
H105 : Par G L M K
H104 : Par G L K M
H103 : Col H M K
H102 : Par F G M K
H101 : neq M K
H100 : neq K M
H99 : Col H K M
H98 : Col K H M
H97 : Par F G H K
H96 : Par G L H M
H95 : Par F G K H
H94 : Par F K M L
H93 : Par F K L M
H92 : Par L M G H
H91 : Par M L G H
H90 : Par F K G H
H89 : Col L M M
H88 : Col G H H
H87 : Col F K K
H86 : eq M M
H85 : eq H H
H84 : eq K K
H83 : neq L M
H82 : nCol H M L
H81 : Par G H M L
H80 : neq G H
H79 : nCol G H M
H78 : neq F K
H77 : BetS K H M
H76 : Out H G G
H75 : neq H G
H74 : eq G G
H73 : RT K H G G H M
H72 : RT G H M K H G
H71 : CongA F K H G H M
H70 : CongA F K H H K F
H69 : nCol F K H
H68 : nCol H K F
H67 : CongA G H M H K F
H66 : RT F K H K H G
H65 : OS F G K H
H64 : TP K H F G
H63 : Par K H F G
H62 : Par F G K H
H61 : Cong K s H K
H60 : BetS H K s
s : Point
H59 : neq H K
H58 : Par K F H G
H57 : Par F K H G
H56 : CongA H K F G H M
H55 : CongA J E N G H M
H54 : BetS B e C
H53 : TS M G H K
H52 : Midpoint B e C
H51 : EF D B e C G H M L
H50 : CongA G H M J E N
H49 : PG G H M L
M,L,e : Point
H48 : nCol G H K
H47 : nCol H G K
H46 : nCol K H G
H45 : Par F K H G
H44 : Triangle D B C
H43 : nCol D B C
H42 : OS S F K H
H41 : CongA H K F J E N
H40 : EF A B m D F K H G
H39 : PG F K H G
F,G : Point
H38 : nCol S K H
H37 : nCol H K S
H36 : neq H K
H35 : neq K H
H34 : Col R K K
H33 : eq K K
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (neq L F) by (forward_using lemma_NCdistinct).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (Col R K K) by (conclude_def Col ).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (neq H K) by (conclude lemma_inequalitysymmetric).
assert (nCol H K S) by (conclude lemma_NChelper).
assert (nCol S K H) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F G, (PG F K H G /\\ EF A B m D F K H G /\\ CongA H K F J E N /\\ OS S F K H)) by (conclude proposition_42B);destruct Tf as [F[G]];spliter.
assert (nCol D B C) by (forward_using lemma_NCorder).
assert (Triangle D B C) by (conclude_def Triangle ).
assert (Par F K H G) by (conclude_def PG ).
assert (nCol K H G) by (forward_using lemma_parallelNC).
assert (nCol H G K) by (forward_using lemma_NCorder).
assert (nCol G H K) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists M L e, (PG G H M L /\\ CongA G H M J E N /\\ EF D B e C G H M L /\\ Midpoint B e C /\\ TS M G H K)) by (conclude proposition_44);destruct Tf as [M[L[e]]];spliter.
assert (BetS B e C) by (conclude_def Midpoint ).
assert (CongA J E N G H M) by (conclude lemma_equalanglessymmetric).
assert (CongA H K F G H M) by (conclude lemma_equalanglestransitive).
assert (Par F K H G) by (conclude_def PG ).
assert (Par K F H G) by (forward_using lemma_parallelflip).
assert (neq H K) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists s, (BetS H K s /\\ Cong K s H K)) by (conclude lemma_extension);destruct Tf as [s];spliter.
assert (Par F G K H) by (conclude_def PG ).
assert (Par K H F G) by (conclude lemma_parallelsymmetric).
assert (TP K H F G) by (conclude lemma_paralleldef2B).
assert (OS F G K H) by (conclude_def TP ).
assert (RT F K H K H G) by (conclude proposition_29C).
assert (CongA G H M H K F) by (conclude lemma_equalanglessymmetric).
assert (nCol H K F) by (conclude lemma_equalanglesNC).
assert (nCol F K H) by (forward_using lemma_NCorder).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H G H M) by (conclude lemma_equalanglestransitive).
assert (RT G H M K H G) by (conclude lemma_RTcongruence).
assert (RT K H G G H M) by (conclude lemma_RTsymmetric).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (neq H G) by (forward_using lemma_NCdistinct).
assert (Out H G G) by (conclude lemma_ray4).
assert (BetS K H M) by (conclude proposition_14).
assert (neq F K) by (forward_using lemma_NCdistinct).
assert (nCol G H M) by (conclude lemma_equalanglesNC).
assert (neq G H) by (forward_using lemma_NCdistinct).
assert (Par G H M L) by (conclude_def PG ).
assert (nCol H M L) by (forward_using lemma_parallelNC).
assert (neq L M) by (forward_using lemma_NCdistinct).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (eq H H) by (conclude cn_equalityreflexive).
assert (eq M M) by (conclude cn_equalityreflexive).
assert (Col F K K) by (conclude_def Col ).
assert (Col G H H) by (conclude_def Col ).
assert (Col L M M) by (conclude_def Col ).
assert (Par F K G H) by (forward_using lemma_parallelflip).
assert (Par M L G H) by (conclude lemma_parallelsymmetric).
assert (Par L M G H) by (forward_using lemma_parallelflip).
assert (Par F K L M) by (conclude proposition_30).
assert (Par F K M L) by (forward_using lemma_parallelflip).
assert (Par F G K H) by (conclude_def PG ).
assert (Par G L H M) by (conclude_def PG ).
assert (Par F G H K) by (forward_using lemma_parallelflip).
assert (Col K H M) by (conclude_def Col ).
assert (Col H K M) by (forward_using lemma_collinearorder).
assert (neq K M) by (forward_using lemma_betweennotequal).
assert (neq M K) by (conclude lemma_inequalitysymmetric).
assert (Par F G M K) by (conclude lemma_collinearparallel).
assert (Col H M K) by (forward_using lemma_collinearorder).
assert (Par G L K M) by (conclude lemma_collinearparallel).
assert (Par G L M K) by (forward_using lemma_parallelflip).
assert (Par M K G L) by (conclude lemma_parallelsymmetric).
assert (Par M K F G) by (conclude lemma_parallelsymmetric).
assert (Par M K G F) by (forward_using lemma_parallelflip).
assert (Col G L F) by (conclude lemma_Playfair).
assert (Col G F L) by (forward_using lemma_collinearorder).
assert (nCol F L M) by (forward_using lemma_parallelNC).
assert (neq L F) by (forward_using lemma_NCdistinct).

*****
H112 : neq L F
H111 : nCol F L M
H110 : Col G F L
H109 : Col G L F
H108 : Par M K G F
H107 : Par M K F G
H106 : Par M K G L
H105 : Par G L M K
H104 : Par G L K M
H103 : Col H M K
H102 : Par F G M K
H101 : neq M K
H100 : neq K M
H99 : Col H K M
H98 : Col K H M
H97 : Par F G H K
H96 : Par G L H M
H95 : Par F G K H
H94 : Par F K M L
H93 : Par F K L M
H92 : Par L M G H
H91 : Par M L G H
H90 : Par F K G H
H89 : Col L M M
H88 : Col G H H
H87 : Col F K K
H86 : eq M M
H85 : eq H H
H84 : eq K K
H83 : neq L M
H82 : nCol H M L
H81 : Par G H M L
H80 : neq G H
H79 : nCol G H M
H78 : neq F K
H77 : BetS K H M
H76 : Out H G G
H75 : neq H G
H74 : eq G G
H73 : RT K H G G H M
H72 : RT G H M K H G
H71 : CongA F K H G H M
H70 : CongA F K H H K F
H69 : nCol F K H
H68 : nCol H K F
H67 : CongA G H M H K F
H66 : RT F K H K H G
H65 : OS F G K H
H64 : TP K H F G
H63 : Par K H F G
H62 : Par F G K H
H61 : Cong K s H K
H60 : BetS H K s
s : Point
H59 : neq H K
H58 : Par K F H G
H57 : Par F K H G
H56 : CongA H K F G H M
H55 : CongA J E N G H M
H54 : BetS B e C
H53 : TS M G H K
H52 : Midpoint B e C
H51 : EF D B e C G H M L
H50 : CongA G H M J E N
H49 : PG G H M L
M,L,e : Point
H48 : nCol G H K
H47 : nCol H G K
H46 : nCol K H G
H45 : Par F K H G
H44 : Triangle D B C
H43 : nCol D B C
H42 : OS S F K H
H41 : CongA H K F J E N
H40 : EF A B m D F K H G
H39 : PG F K H G
F,G : Point
H38 : nCol S K H
H37 : nCol H K S
H36 : neq H K
H35 : neq K H
H34 : Col R K K
H33 : eq K K
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (Par M K L F) by (conclude lemma_collinearparallel).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (Col R K K) by (conclude_def Col ).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (neq H K) by (conclude lemma_inequalitysymmetric).
assert (nCol H K S) by (conclude lemma_NChelper).
assert (nCol S K H) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F G, (PG F K H G /\\ EF A B m D F K H G /\\ CongA H K F J E N /\\ OS S F K H)) by (conclude proposition_42B);destruct Tf as [F[G]];spliter.
assert (nCol D B C) by (forward_using lemma_NCorder).
assert (Triangle D B C) by (conclude_def Triangle ).
assert (Par F K H G) by (conclude_def PG ).
assert (nCol K H G) by (forward_using lemma_parallelNC).
assert (nCol H G K) by (forward_using lemma_NCorder).
assert (nCol G H K) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists M L e, (PG G H M L /\\ CongA G H M J E N /\\ EF D B e C G H M L /\\ Midpoint B e C /\\ TS M G H K)) by (conclude proposition_44);destruct Tf as [M[L[e]]];spliter.
assert (BetS B e C) by (conclude_def Midpoint ).
assert (CongA J E N G H M) by (conclude lemma_equalanglessymmetric).
assert (CongA H K F G H M) by (conclude lemma_equalanglestransitive).
assert (Par F K H G) by (conclude_def PG ).
assert (Par K F H G) by (forward_using lemma_parallelflip).
assert (neq H K) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists s, (BetS H K s /\\ Cong K s H K)) by (conclude lemma_extension);destruct Tf as [s];spliter.
assert (Par F G K H) by (conclude_def PG ).
assert (Par K H F G) by (conclude lemma_parallelsymmetric).
assert (TP K H F G) by (conclude lemma_paralleldef2B).
assert (OS F G K H) by (conclude_def TP ).
assert (RT F K H K H G) by (conclude proposition_29C).
assert (CongA G H M H K F) by (conclude lemma_equalanglessymmetric).
assert (nCol H K F) by (conclude lemma_equalanglesNC).
assert (nCol F K H) by (forward_using lemma_NCorder).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H G H M) by (conclude lemma_equalanglestransitive).
assert (RT G H M K H G) by (conclude lemma_RTcongruence).
assert (RT K H G G H M) by (conclude lemma_RTsymmetric).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (neq H G) by (forward_using lemma_NCdistinct).
assert (Out H G G) by (conclude lemma_ray4).
assert (BetS K H M) by (conclude proposition_14).
assert (neq F K) by (forward_using lemma_NCdistinct).
assert (nCol G H M) by (conclude lemma_equalanglesNC).
assert (neq G H) by (forward_using lemma_NCdistinct).
assert (Par G H M L) by (conclude_def PG ).
assert (nCol H M L) by (forward_using lemma_parallelNC).
assert (neq L M) by (forward_using lemma_NCdistinct).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (eq H H) by (conclude cn_equalityreflexive).
assert (eq M M) by (conclude cn_equalityreflexive).
assert (Col F K K) by (conclude_def Col ).
assert (Col G H H) by (conclude_def Col ).
assert (Col L M M) by (conclude_def Col ).
assert (Par F K G H) by (forward_using lemma_parallelflip).
assert (Par M L G H) by (conclude lemma_parallelsymmetric).
assert (Par L M G H) by (forward_using lemma_parallelflip).
assert (Par F K L M) by (conclude proposition_30).
assert (Par F K M L) by (forward_using lemma_parallelflip).
assert (Par F G K H) by (conclude_def PG ).
assert (Par G L H M) by (conclude_def PG ).
assert (Par F G H K) by (forward_using lemma_parallelflip).
assert (Col K H M) by (conclude_def Col ).
assert (Col H K M) by (forward_using lemma_collinearorder).
assert (neq K M) by (forward_using lemma_betweennotequal).
assert (neq M K) by (conclude lemma_inequalitysymmetric).
assert (Par F G M K) by (conclude lemma_collinearparallel).
assert (Col H M K) by (forward_using lemma_collinearorder).
assert (Par G L K M) by (conclude lemma_collinearparallel).
assert (Par G L M K) by (forward_using lemma_parallelflip).
assert (Par M K G L) by (conclude lemma_parallelsymmetric).
assert (Par M K F G) by (conclude lemma_parallelsymmetric).
assert (Par M K G F) by (forward_using lemma_parallelflip).
assert (Col G L F) by (conclude lemma_Playfair).
assert (Col G F L) by (forward_using lemma_collinearorder).
assert (nCol F L M) by (forward_using lemma_parallelNC).
assert (neq L F) by (forward_using lemma_NCdistinct).
assert (Par M K L F) by (conclude lemma_collinearparallel).

*****
H113 : Par M K L F
H112 : neq L F
H111 : nCol F L M
H110 : Col G F L
H109 : Col G L F
H108 : Par M K G F
H107 : Par M K F G
H106 : Par M K G L
H105 : Par G L M K
H104 : Par G L K M
H103 : Col H M K
H102 : Par F G M K
H101 : neq M K
H100 : neq K M
H99 : Col H K M
H98 : Col K H M
H97 : Par F G H K
H96 : Par G L H M
H95 : Par F G K H
H94 : Par F K M L
H93 : Par F K L M
H92 : Par L M G H
H91 : Par M L G H
H90 : Par F K G H
H89 : Col L M M
H88 : Col G H H
H87 : Col F K K
H86 : eq M M
H85 : eq H H
H84 : eq K K
H83 : neq L M
H82 : nCol H M L
H81 : Par G H M L
H80 : neq G H
H79 : nCol G H M
H78 : neq F K
H77 : BetS K H M
H76 : Out H G G
H75 : neq H G
H74 : eq G G
H73 : RT K H G G H M
H72 : RT G H M K H G
H71 : CongA F K H G H M
H70 : CongA F K H H K F
H69 : nCol F K H
H68 : nCol H K F
H67 : CongA G H M H K F
H66 : RT F K H K H G
H65 : OS F G K H
H64 : TP K H F G
H63 : Par K H F G
H62 : Par F G K H
H61 : Cong K s H K
H60 : BetS H K s
s : Point
H59 : neq H K
H58 : Par K F H G
H57 : Par F K H G
H56 : CongA H K F G H M
H55 : CongA J E N G H M
H54 : BetS B e C
H53 : TS M G H K
H52 : Midpoint B e C
H51 : EF D B e C G H M L
H50 : CongA G H M J E N
H49 : PG G H M L
M,L,e : Point
H48 : nCol G H K
H47 : nCol H G K
H46 : nCol K H G
H45 : Par F K H G
H44 : Triangle D B C
H43 : nCol D B C
H42 : OS S F K H
H41 : CongA H K F J E N
H40 : EF A B m D F K H G
H39 : PG F K H G
F,G : Point
H38 : nCol S K H
H37 : nCol H K S
H36 : neq H K
H35 : neq K H
H34 : Col R K K
H33 : eq K K
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (Par L F M K) by (conclude lemma_parallelsymmetric).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (Col R K K) by (conclude_def Col ).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (neq H K) by (conclude lemma_inequalitysymmetric).
assert (nCol H K S) by (conclude lemma_NChelper).
assert (nCol S K H) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F G, (PG F K H G /\\ EF A B m D F K H G /\\ CongA H K F J E N /\\ OS S F K H)) by (conclude proposition_42B);destruct Tf as [F[G]];spliter.
assert (nCol D B C) by (forward_using lemma_NCorder).
assert (Triangle D B C) by (conclude_def Triangle ).
assert (Par F K H G) by (conclude_def PG ).
assert (nCol K H G) by (forward_using lemma_parallelNC).
assert (nCol H G K) by (forward_using lemma_NCorder).
assert (nCol G H K) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists M L e, (PG G H M L /\\ CongA G H M J E N /\\ EF D B e C G H M L /\\ Midpoint B e C /\\ TS M G H K)) by (conclude proposition_44);destruct Tf as [M[L[e]]];spliter.
assert (BetS B e C) by (conclude_def Midpoint ).
assert (CongA J E N G H M) by (conclude lemma_equalanglessymmetric).
assert (CongA H K F G H M) by (conclude lemma_equalanglestransitive).
assert (Par F K H G) by (conclude_def PG ).
assert (Par K F H G) by (forward_using lemma_parallelflip).
assert (neq H K) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists s, (BetS H K s /\\ Cong K s H K)) by (conclude lemma_extension);destruct Tf as [s];spliter.
assert (Par F G K H) by (conclude_def PG ).
assert (Par K H F G) by (conclude lemma_parallelsymmetric).
assert (TP K H F G) by (conclude lemma_paralleldef2B).
assert (OS F G K H) by (conclude_def TP ).
assert (RT F K H K H G) by (conclude proposition_29C).
assert (CongA G H M H K F) by (conclude lemma_equalanglessymmetric).
assert (nCol H K F) by (conclude lemma_equalanglesNC).
assert (nCol F K H) by (forward_using lemma_NCorder).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H G H M) by (conclude lemma_equalanglestransitive).
assert (RT G H M K H G) by (conclude lemma_RTcongruence).
assert (RT K H G G H M) by (conclude lemma_RTsymmetric).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (neq H G) by (forward_using lemma_NCdistinct).
assert (Out H G G) by (conclude lemma_ray4).
assert (BetS K H M) by (conclude proposition_14).
assert (neq F K) by (forward_using lemma_NCdistinct).
assert (nCol G H M) by (conclude lemma_equalanglesNC).
assert (neq G H) by (forward_using lemma_NCdistinct).
assert (Par G H M L) by (conclude_def PG ).
assert (nCol H M L) by (forward_using lemma_parallelNC).
assert (neq L M) by (forward_using lemma_NCdistinct).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (eq H H) by (conclude cn_equalityreflexive).
assert (eq M M) by (conclude cn_equalityreflexive).
assert (Col F K K) by (conclude_def Col ).
assert (Col G H H) by (conclude_def Col ).
assert (Col L M M) by (conclude_def Col ).
assert (Par F K G H) by (forward_using lemma_parallelflip).
assert (Par M L G H) by (conclude lemma_parallelsymmetric).
assert (Par L M G H) by (forward_using lemma_parallelflip).
assert (Par F K L M) by (conclude proposition_30).
assert (Par F K M L) by (forward_using lemma_parallelflip).
assert (Par F G K H) by (conclude_def PG ).
assert (Par G L H M) by (conclude_def PG ).
assert (Par F G H K) by (forward_using lemma_parallelflip).
assert (Col K H M) by (conclude_def Col ).
assert (Col H K M) by (forward_using lemma_collinearorder).
assert (neq K M) by (forward_using lemma_betweennotequal).
assert (neq M K) by (conclude lemma_inequalitysymmetric).
assert (Par F G M K) by (conclude lemma_collinearparallel).
assert (Col H M K) by (forward_using lemma_collinearorder).
assert (Par G L K M) by (conclude lemma_collinearparallel).
assert (Par G L M K) by (forward_using lemma_parallelflip).
assert (Par M K G L) by (conclude lemma_parallelsymmetric).
assert (Par M K F G) by (conclude lemma_parallelsymmetric).
assert (Par M K G F) by (forward_using lemma_parallelflip).
assert (Col G L F) by (conclude lemma_Playfair).
assert (Col G F L) by (forward_using lemma_collinearorder).
assert (nCol F L M) by (forward_using lemma_parallelNC).
assert (neq L F) by (forward_using lemma_NCdistinct).
assert (Par M K L F) by (conclude lemma_collinearparallel).
assert (Par L F M K) by (conclude lemma_parallelsymmetric).

*****
H114 : Par L F M K
H113 : Par M K L F
H112 : neq L F
H111 : nCol F L M
H110 : Col G F L
H109 : Col G L F
H108 : Par M K G F
H107 : Par M K F G
H106 : Par M K G L
H105 : Par G L M K
H104 : Par G L K M
H103 : Col H M K
H102 : Par F G M K
H101 : neq M K
H100 : neq K M
H99 : Col H K M
H98 : Col K H M
H97 : Par F G H K
H96 : Par G L H M
H95 : Par F G K H
H94 : Par F K M L
H93 : Par F K L M
H92 : Par L M G H
H91 : Par M L G H
H90 : Par F K G H
H89 : Col L M M
H88 : Col G H H
H87 : Col F K K
H86 : eq M M
H85 : eq H H
H84 : eq K K
H83 : neq L M
H82 : nCol H M L
H81 : Par G H M L
H80 : neq G H
H79 : nCol G H M
H78 : neq F K
H77 : BetS K H M
H76 : Out H G G
H75 : neq H G
H74 : eq G G
H73 : RT K H G G H M
H72 : RT G H M K H G
H71 : CongA F K H G H M
H70 : CongA F K H H K F
H69 : nCol F K H
H68 : nCol H K F
H67 : CongA G H M H K F
H66 : RT F K H K H G
H65 : OS F G K H
H64 : TP K H F G
H63 : Par K H F G
H62 : Par F G K H
H61 : Cong K s H K
H60 : BetS H K s
s : Point
H59 : neq H K
H58 : Par K F H G
H57 : Par F K H G
H56 : CongA H K F G H M
H55 : CongA J E N G H M
H54 : BetS B e C
H53 : TS M G H K
H52 : Midpoint B e C
H51 : EF D B e C G H M L
H50 : CongA G H M J E N
H49 : PG G H M L
M,L,e : Point
H48 : nCol G H K
H47 : nCol H G K
H46 : nCol K H G
H45 : Par F K H G
H44 : Triangle D B C
H43 : nCol D B C
H42 : OS S F K H
H41 : CongA H K F J E N
H40 : EF A B m D F K H G
H39 : PG F K H G
F,G : Point
H38 : nCol S K H
H37 : nCol H K S
H36 : neq H K
H35 : neq K H
H34 : Col R K K
H33 : eq K K
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (Par F L K M) by (forward_using lemma_parallelflip).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (Col R K K) by (conclude_def Col ).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (neq H K) by (conclude lemma_inequalitysymmetric).
assert (nCol H K S) by (conclude lemma_NChelper).
assert (nCol S K H) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F G, (PG F K H G /\\ EF A B m D F K H G /\\ CongA H K F J E N /\\ OS S F K H)) by (conclude proposition_42B);destruct Tf as [F[G]];spliter.
assert (nCol D B C) by (forward_using lemma_NCorder).
assert (Triangle D B C) by (conclude_def Triangle ).
assert (Par F K H G) by (conclude_def PG ).
assert (nCol K H G) by (forward_using lemma_parallelNC).
assert (nCol H G K) by (forward_using lemma_NCorder).
assert (nCol G H K) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists M L e, (PG G H M L /\\ CongA G H M J E N /\\ EF D B e C G H M L /\\ Midpoint B e C /\\ TS M G H K)) by (conclude proposition_44);destruct Tf as [M[L[e]]];spliter.
assert (BetS B e C) by (conclude_def Midpoint ).
assert (CongA J E N G H M) by (conclude lemma_equalanglessymmetric).
assert (CongA H K F G H M) by (conclude lemma_equalanglestransitive).
assert (Par F K H G) by (conclude_def PG ).
assert (Par K F H G) by (forward_using lemma_parallelflip).
assert (neq H K) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists s, (BetS H K s /\\ Cong K s H K)) by (conclude lemma_extension);destruct Tf as [s];spliter.
assert (Par F G K H) by (conclude_def PG ).
assert (Par K H F G) by (conclude lemma_parallelsymmetric).
assert (TP K H F G) by (conclude lemma_paralleldef2B).
assert (OS F G K H) by (conclude_def TP ).
assert (RT F K H K H G) by (conclude proposition_29C).
assert (CongA G H M H K F) by (conclude lemma_equalanglessymmetric).
assert (nCol H K F) by (conclude lemma_equalanglesNC).
assert (nCol F K H) by (forward_using lemma_NCorder).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H G H M) by (conclude lemma_equalanglestransitive).
assert (RT G H M K H G) by (conclude lemma_RTcongruence).
assert (RT K H G G H M) by (conclude lemma_RTsymmetric).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (neq H G) by (forward_using lemma_NCdistinct).
assert (Out H G G) by (conclude lemma_ray4).
assert (BetS K H M) by (conclude proposition_14).
assert (neq F K) by (forward_using lemma_NCdistinct).
assert (nCol G H M) by (conclude lemma_equalanglesNC).
assert (neq G H) by (forward_using lemma_NCdistinct).
assert (Par G H M L) by (conclude_def PG ).
assert (nCol H M L) by (forward_using lemma_parallelNC).
assert (neq L M) by (forward_using lemma_NCdistinct).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (eq H H) by (conclude cn_equalityreflexive).
assert (eq M M) by (conclude cn_equalityreflexive).
assert (Col F K K) by (conclude_def Col ).
assert (Col G H H) by (conclude_def Col ).
assert (Col L M M) by (conclude_def Col ).
assert (Par F K G H) by (forward_using lemma_parallelflip).
assert (Par M L G H) by (conclude lemma_parallelsymmetric).
assert (Par L M G H) by (forward_using lemma_parallelflip).
assert (Par F K L M) by (conclude proposition_30).
assert (Par F K M L) by (forward_using lemma_parallelflip).
assert (Par F G K H) by (conclude_def PG ).
assert (Par G L H M) by (conclude_def PG ).
assert (Par F G H K) by (forward_using lemma_parallelflip).
assert (Col K H M) by (conclude_def Col ).
assert (Col H K M) by (forward_using lemma_collinearorder).
assert (neq K M) by (forward_using lemma_betweennotequal).
assert (neq M K) by (conclude lemma_inequalitysymmetric).
assert (Par F G M K) by (conclude lemma_collinearparallel).
assert (Col H M K) by (forward_using lemma_collinearorder).
assert (Par G L K M) by (conclude lemma_collinearparallel).
assert (Par G L M K) by (forward_using lemma_parallelflip).
assert (Par M K G L) by (conclude lemma_parallelsymmetric).
assert (Par M K F G) by (conclude lemma_parallelsymmetric).
assert (Par M K G F) by (forward_using lemma_parallelflip).
assert (Col G L F) by (conclude lemma_Playfair).
assert (Col G F L) by (forward_using lemma_collinearorder).
assert (nCol F L M) by (forward_using lemma_parallelNC).
assert (neq L F) by (forward_using lemma_NCdistinct).
assert (Par M K L F) by (conclude lemma_collinearparallel).
assert (Par L F M K) by (conclude lemma_parallelsymmetric).
assert (Par F L K M) by (forward_using lemma_parallelflip).

*****
H115 : Par F L K M
H114 : Par L F M K
H113 : Par M K L F
H112 : neq L F
H111 : nCol F L M
H110 : Col G F L
H109 : Col G L F
H108 : Par M K G F
H107 : Par M K F G
H106 : Par M K G L
H105 : Par G L M K
H104 : Par G L K M
H103 : Col H M K
H102 : Par F G M K
H101 : neq M K
H100 : neq K M
H99 : Col H K M
H98 : Col K H M
H97 : Par F G H K
H96 : Par G L H M
H95 : Par F G K H
H94 : Par F K M L
H93 : Par F K L M
H92 : Par L M G H
H91 : Par M L G H
H90 : Par F K G H
H89 : Col L M M
H88 : Col G H H
H87 : Col F K K
H86 : eq M M
H85 : eq H H
H84 : eq K K
H83 : neq L M
H82 : nCol H M L
H81 : Par G H M L
H80 : neq G H
H79 : nCol G H M
H78 : neq F K
H77 : BetS K H M
H76 : Out H G G
H75 : neq H G
H74 : eq G G
H73 : RT K H G G H M
H72 : RT G H M K H G
H71 : CongA F K H G H M
H70 : CongA F K H H K F
H69 : nCol F K H
H68 : nCol H K F
H67 : CongA G H M H K F
H66 : RT F K H K H G
H65 : OS F G K H
H64 : TP K H F G
H63 : Par K H F G
H62 : Par F G K H
H61 : Cong K s H K
H60 : BetS H K s
s : Point
H59 : neq H K
H58 : Par K F H G
H57 : Par F K H G
H56 : CongA H K F G H M
H55 : CongA J E N G H M
H54 : BetS B e C
H53 : TS M G H K
H52 : Midpoint B e C
H51 : EF D B e C G H M L
H50 : CongA G H M J E N
H49 : PG G H M L
M,L,e : Point
H48 : nCol G H K
H47 : nCol H G K
H46 : nCol K H G
H45 : Par F K H G
H44 : Triangle D B C
H43 : nCol D B C
H42 : OS S F K H
H41 : CongA H K F J E N
H40 : EF A B m D F K H G
H39 : PG F K H G
F,G : Point
H38 : nCol S K H
H37 : nCol H K S
H36 : neq H K
H35 : neq K H
H34 : Col R K K
H33 : eq K K
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (PG F K M L) by (conclude_def PG ).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (Col R K K) by (conclude_def Col ).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (neq H K) by (conclude lemma_inequalitysymmetric).
assert (nCol H K S) by (conclude lemma_NChelper).
assert (nCol S K H) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F G, (PG F K H G /\\ EF A B m D F K H G /\\ CongA H K F J E N /\\ OS S F K H)) by (conclude proposition_42B);destruct Tf as [F[G]];spliter.
assert (nCol D B C) by (forward_using lemma_NCorder).
assert (Triangle D B C) by (conclude_def Triangle ).
assert (Par F K H G) by (conclude_def PG ).
assert (nCol K H G) by (forward_using lemma_parallelNC).
assert (nCol H G K) by (forward_using lemma_NCorder).
assert (nCol G H K) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists M L e, (PG G H M L /\\ CongA G H M J E N /\\ EF D B e C G H M L /\\ Midpoint B e C /\\ TS M G H K)) by (conclude proposition_44);destruct Tf as [M[L[e]]];spliter.
assert (BetS B e C) by (conclude_def Midpoint ).
assert (CongA J E N G H M) by (conclude lemma_equalanglessymmetric).
assert (CongA H K F G H M) by (conclude lemma_equalanglestransitive).
assert (Par F K H G) by (conclude_def PG ).
assert (Par K F H G) by (forward_using lemma_parallelflip).
assert (neq H K) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists s, (BetS H K s /\\ Cong K s H K)) by (conclude lemma_extension);destruct Tf as [s];spliter.
assert (Par F G K H) by (conclude_def PG ).
assert (Par K H F G) by (conclude lemma_parallelsymmetric).
assert (TP K H F G) by (conclude lemma_paralleldef2B).
assert (OS F G K H) by (conclude_def TP ).
assert (RT F K H K H G) by (conclude proposition_29C).
assert (CongA G H M H K F) by (conclude lemma_equalanglessymmetric).
assert (nCol H K F) by (conclude lemma_equalanglesNC).
assert (nCol F K H) by (forward_using lemma_NCorder).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H G H M) by (conclude lemma_equalanglestransitive).
assert (RT G H M K H G) by (conclude lemma_RTcongruence).
assert (RT K H G G H M) by (conclude lemma_RTsymmetric).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (neq H G) by (forward_using lemma_NCdistinct).
assert (Out H G G) by (conclude lemma_ray4).
assert (BetS K H M) by (conclude proposition_14).
assert (neq F K) by (forward_using lemma_NCdistinct).
assert (nCol G H M) by (conclude lemma_equalanglesNC).
assert (neq G H) by (forward_using lemma_NCdistinct).
assert (Par G H M L) by (conclude_def PG ).
assert (nCol H M L) by (forward_using lemma_parallelNC).
assert (neq L M) by (forward_using lemma_NCdistinct).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (eq H H) by (conclude cn_equalityreflexive).
assert (eq M M) by (conclude cn_equalityreflexive).
assert (Col F K K) by (conclude_def Col ).
assert (Col G H H) by (conclude_def Col ).
assert (Col L M M) by (conclude_def Col ).
assert (Par F K G H) by (forward_using lemma_parallelflip).
assert (Par M L G H) by (conclude lemma_parallelsymmetric).
assert (Par L M G H) by (forward_using lemma_parallelflip).
assert (Par F K L M) by (conclude proposition_30).
assert (Par F K M L) by (forward_using lemma_parallelflip).
assert (Par F G K H) by (conclude_def PG ).
assert (Par G L H M) by (conclude_def PG ).
assert (Par F G H K) by (forward_using lemma_parallelflip).
assert (Col K H M) by (conclude_def Col ).
assert (Col H K M) by (forward_using lemma_collinearorder).
assert (neq K M) by (forward_using lemma_betweennotequal).
assert (neq M K) by (conclude lemma_inequalitysymmetric).
assert (Par F G M K) by (conclude lemma_collinearparallel).
assert (Col H M K) by (forward_using lemma_collinearorder).
assert (Par G L K M) by (conclude lemma_collinearparallel).
assert (Par G L M K) by (forward_using lemma_parallelflip).
assert (Par M K G L) by (conclude lemma_parallelsymmetric).
assert (Par M K F G) by (conclude lemma_parallelsymmetric).
assert (Par M K G F) by (forward_using lemma_parallelflip).
assert (Col G L F) by (conclude lemma_Playfair).
assert (Col G F L) by (forward_using lemma_collinearorder).
assert (nCol F L M) by (forward_using lemma_parallelNC).
assert (neq L F) by (forward_using lemma_NCdistinct).
assert (Par M K L F) by (conclude lemma_collinearparallel).
assert (Par L F M K) by (conclude lemma_parallelsymmetric).
assert (Par F L K M) by (forward_using lemma_parallelflip).
assert (PG F K M L) by (conclude_def PG ).

*****
H116 : PG F K M L
H115 : Par F L K M
H114 : Par L F M K
H113 : Par M K L F
H112 : neq L F
H111 : nCol F L M
H110 : Col G F L
H109 : Col G L F
H108 : Par M K G F
H107 : Par M K F G
H106 : Par M K G L
H105 : Par G L M K
H104 : Par G L K M
H103 : Col H M K
H102 : Par F G M K
H101 : neq M K
H100 : neq K M
H99 : Col H K M
H98 : Col K H M
H97 : Par F G H K
H96 : Par G L H M
H95 : Par F G K H
H94 : Par F K M L
H93 : Par F K L M
H92 : Par L M G H
H91 : Par M L G H
H90 : Par F K G H
H89 : Col L M M
H88 : Col G H H
H87 : Col F K K
H86 : eq M M
H85 : eq H H
H84 : eq K K
H83 : neq L M
H82 : nCol H M L
H81 : Par G H M L
H80 : neq G H
H79 : nCol G H M
H78 : neq F K
H77 : BetS K H M
H76 : Out H G G
H75 : neq H G
H74 : eq G G
H73 : RT K H G G H M
H72 : RT G H M K H G
H71 : CongA F K H G H M
H70 : CongA F K H H K F
H69 : nCol F K H
H68 : nCol H K F
H67 : CongA G H M H K F
H66 : RT F K H K H G
H65 : OS F G K H
H64 : TP K H F G
H63 : Par K H F G
H62 : Par F G K H
H61 : Cong K s H K
H60 : BetS H K s
s : Point
H59 : neq H K
H58 : Par K F H G
H57 : Par F K H G
H56 : CongA H K F G H M
H55 : CongA J E N G H M
H54 : BetS B e C
H53 : TS M G H K
H52 : Midpoint B e C
H51 : EF D B e C G H M L
H50 : CongA G H M J E N
H49 : PG G H M L
M,L,e : Point
H48 : nCol G H K
H47 : nCol H G K
H46 : nCol K H G
H45 : Par F K H G
H44 : Triangle D B C
H43 : nCol D B C
H42 : OS S F K H
H41 : CongA H K F J E N
H40 : EF A B m D F K H G
H39 : PG F K H G
F,G : Point
H38 : nCol S K H
H37 : nCol H K S
H36 : neq H K
H35 : neq K H
H34 : Col R K K
H33 : eq K K
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (nCol F K H) by (forward_using lemma_parallelNC).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (Col R K K) by (conclude_def Col ).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (neq H K) by (conclude lemma_inequalitysymmetric).
assert (nCol H K S) by (conclude lemma_NChelper).
assert (nCol S K H) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F G, (PG F K H G /\\ EF A B m D F K H G /\\ CongA H K F J E N /\\ OS S F K H)) by (conclude proposition_42B);destruct Tf as [F[G]];spliter.
assert (nCol D B C) by (forward_using lemma_NCorder).
assert (Triangle D B C) by (conclude_def Triangle ).
assert (Par F K H G) by (conclude_def PG ).
assert (nCol K H G) by (forward_using lemma_parallelNC).
assert (nCol H G K) by (forward_using lemma_NCorder).
assert (nCol G H K) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists M L e, (PG G H M L /\\ CongA G H M J E N /\\ EF D B e C G H M L /\\ Midpoint B e C /\\ TS M G H K)) by (conclude proposition_44);destruct Tf as [M[L[e]]];spliter.
assert (BetS B e C) by (conclude_def Midpoint ).
assert (CongA J E N G H M) by (conclude lemma_equalanglessymmetric).
assert (CongA H K F G H M) by (conclude lemma_equalanglestransitive).
assert (Par F K H G) by (conclude_def PG ).
assert (Par K F H G) by (forward_using lemma_parallelflip).
assert (neq H K) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists s, (BetS H K s /\\ Cong K s H K)) by (conclude lemma_extension);destruct Tf as [s];spliter.
assert (Par F G K H) by (conclude_def PG ).
assert (Par K H F G) by (conclude lemma_parallelsymmetric).
assert (TP K H F G) by (conclude lemma_paralleldef2B).
assert (OS F G K H) by (conclude_def TP ).
assert (RT F K H K H G) by (conclude proposition_29C).
assert (CongA G H M H K F) by (conclude lemma_equalanglessymmetric).
assert (nCol H K F) by (conclude lemma_equalanglesNC).
assert (nCol F K H) by (forward_using lemma_NCorder).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H G H M) by (conclude lemma_equalanglestransitive).
assert (RT G H M K H G) by (conclude lemma_RTcongruence).
assert (RT K H G G H M) by (conclude lemma_RTsymmetric).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (neq H G) by (forward_using lemma_NCdistinct).
assert (Out H G G) by (conclude lemma_ray4).
assert (BetS K H M) by (conclude proposition_14).
assert (neq F K) by (forward_using lemma_NCdistinct).
assert (nCol G H M) by (conclude lemma_equalanglesNC).
assert (neq G H) by (forward_using lemma_NCdistinct).
assert (Par G H M L) by (conclude_def PG ).
assert (nCol H M L) by (forward_using lemma_parallelNC).
assert (neq L M) by (forward_using lemma_NCdistinct).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (eq H H) by (conclude cn_equalityreflexive).
assert (eq M M) by (conclude cn_equalityreflexive).
assert (Col F K K) by (conclude_def Col ).
assert (Col G H H) by (conclude_def Col ).
assert (Col L M M) by (conclude_def Col ).
assert (Par F K G H) by (forward_using lemma_parallelflip).
assert (Par M L G H) by (conclude lemma_parallelsymmetric).
assert (Par L M G H) by (forward_using lemma_parallelflip).
assert (Par F K L M) by (conclude proposition_30).
assert (Par F K M L) by (forward_using lemma_parallelflip).
assert (Par F G K H) by (conclude_def PG ).
assert (Par G L H M) by (conclude_def PG ).
assert (Par F G H K) by (forward_using lemma_parallelflip).
assert (Col K H M) by (conclude_def Col ).
assert (Col H K M) by (forward_using lemma_collinearorder).
assert (neq K M) by (forward_using lemma_betweennotequal).
assert (neq M K) by (conclude lemma_inequalitysymmetric).
assert (Par F G M K) by (conclude lemma_collinearparallel).
assert (Col H M K) by (forward_using lemma_collinearorder).
assert (Par G L K M) by (conclude lemma_collinearparallel).
assert (Par G L M K) by (forward_using lemma_parallelflip).
assert (Par M K G L) by (conclude lemma_parallelsymmetric).
assert (Par M K F G) by (conclude lemma_parallelsymmetric).
assert (Par M K G F) by (forward_using lemma_parallelflip).
assert (Col G L F) by (conclude lemma_Playfair).
assert (Col G F L) by (forward_using lemma_collinearorder).
assert (nCol F L M) by (forward_using lemma_parallelNC).
assert (neq L F) by (forward_using lemma_NCdistinct).
assert (Par M K L F) by (conclude lemma_collinearparallel).
assert (Par L F M K) by (conclude lemma_parallelsymmetric).
assert (Par F L K M) by (forward_using lemma_parallelflip).
assert (PG F K M L) by (conclude_def PG ).
assert (nCol F K H) by (forward_using lemma_parallelNC).

*****
H117 : nCol F K H
H116 : PG F K M L
H115 : Par F L K M
H114 : Par L F M K
H113 : Par M K L F
H112 : neq L F
H111 : nCol F L M
H110 : Col G F L
H109 : Col G L F
H108 : Par M K G F
H107 : Par M K F G
H106 : Par M K G L
H105 : Par G L M K
H104 : Par G L K M
H103 : Col H M K
H102 : Par F G M K
H101 : neq M K
H100 : neq K M
H99 : Col H K M
H98 : Col K H M
H97 : Par F G H K
H96 : Par G L H M
H95 : Par F G K H
H94 : Par F K M L
H93 : Par F K L M
H92 : Par L M G H
H91 : Par M L G H
H90 : Par F K G H
H89 : Col L M M
H88 : Col G H H
H87 : Col F K K
H86 : eq M M
H85 : eq H H
H84 : eq K K
H83 : neq L M
H82 : nCol H M L
H81 : Par G H M L
H80 : neq G H
H79 : nCol G H M
H78 : neq F K
H77 : BetS K H M
H76 : Out H G G
H75 : neq H G
H74 : eq G G
H73 : RT K H G G H M
H72 : RT G H M K H G
H71 : CongA F K H G H M
H70 : CongA F K H H K F
H69 : nCol F K H
H68 : nCol H K F
H67 : CongA G H M H K F
H66 : RT F K H K H G
H65 : OS F G K H
H64 : TP K H F G
H63 : Par K H F G
H62 : Par F G K H
H61 : Cong K s H K
H60 : BetS H K s
s : Point
H59 : neq H K
H58 : Par K F H G
H57 : Par F K H G
H56 : CongA H K F G H M
H55 : CongA J E N G H M
H54 : BetS B e C
H53 : TS M G H K
H52 : Midpoint B e C
H51 : EF D B e C G H M L
H50 : CongA G H M J E N
H49 : PG G H M L
M,L,e : Point
H48 : nCol G H K
H47 : nCol H G K
H46 : nCol K H G
H45 : Par F K H G
H44 : Triangle D B C
H43 : nCol D B C
H42 : OS S F K H
H41 : CongA H K F J E N
H40 : EF A B m D F K H G
H39 : PG F K H G
F,G : Point
H38 : nCol S K H
H37 : nCol H K S
H36 : neq H K
H35 : neq K H
H34 : Col R K K
H33 : eq K K
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (Col R K K) by (conclude_def Col ).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (neq H K) by (conclude lemma_inequalitysymmetric).
assert (nCol H K S) by (conclude lemma_NChelper).
assert (nCol S K H) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F G, (PG F K H G /\\ EF A B m D F K H G /\\ CongA H K F J E N /\\ OS S F K H)) by (conclude proposition_42B);destruct Tf as [F[G]];spliter.
assert (nCol D B C) by (forward_using lemma_NCorder).
assert (Triangle D B C) by (conclude_def Triangle ).
assert (Par F K H G) by (conclude_def PG ).
assert (nCol K H G) by (forward_using lemma_parallelNC).
assert (nCol H G K) by (forward_using lemma_NCorder).
assert (nCol G H K) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists M L e, (PG G H M L /\\ CongA G H M J E N /\\ EF D B e C G H M L /\\ Midpoint B e C /\\ TS M G H K)) by (conclude proposition_44);destruct Tf as [M[L[e]]];spliter.
assert (BetS B e C) by (conclude_def Midpoint ).
assert (CongA J E N G H M) by (conclude lemma_equalanglessymmetric).
assert (CongA H K F G H M) by (conclude lemma_equalanglestransitive).
assert (Par F K H G) by (conclude_def PG ).
assert (Par K F H G) by (forward_using lemma_parallelflip).
assert (neq H K) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists s, (BetS H K s /\\ Cong K s H K)) by (conclude lemma_extension);destruct Tf as [s];spliter.
assert (Par F G K H) by (conclude_def PG ).
assert (Par K H F G) by (conclude lemma_parallelsymmetric).
assert (TP K H F G) by (conclude lemma_paralleldef2B).
assert (OS F G K H) by (conclude_def TP ).
assert (RT F K H K H G) by (conclude proposition_29C).
assert (CongA G H M H K F) by (conclude lemma_equalanglessymmetric).
assert (nCol H K F) by (conclude lemma_equalanglesNC).
assert (nCol F K H) by (forward_using lemma_NCorder).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H G H M) by (conclude lemma_equalanglestransitive).
assert (RT G H M K H G) by (conclude lemma_RTcongruence).
assert (RT K H G G H M) by (conclude lemma_RTsymmetric).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (neq H G) by (forward_using lemma_NCdistinct).
assert (Out H G G) by (conclude lemma_ray4).
assert (BetS K H M) by (conclude proposition_14).
assert (neq F K) by (forward_using lemma_NCdistinct).
assert (nCol G H M) by (conclude lemma_equalanglesNC).
assert (neq G H) by (forward_using lemma_NCdistinct).
assert (Par G H M L) by (conclude_def PG ).
assert (nCol H M L) by (forward_using lemma_parallelNC).
assert (neq L M) by (forward_using lemma_NCdistinct).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (eq H H) by (conclude cn_equalityreflexive).
assert (eq M M) by (conclude cn_equalityreflexive).
assert (Col F K K) by (conclude_def Col ).
assert (Col G H H) by (conclude_def Col ).
assert (Col L M M) by (conclude_def Col ).
assert (Par F K G H) by (forward_using lemma_parallelflip).
assert (Par M L G H) by (conclude lemma_parallelsymmetric).
assert (Par L M G H) by (forward_using lemma_parallelflip).
assert (Par F K L M) by (conclude proposition_30).
assert (Par F K M L) by (forward_using lemma_parallelflip).
assert (Par F G K H) by (conclude_def PG ).
assert (Par G L H M) by (conclude_def PG ).
assert (Par F G H K) by (forward_using lemma_parallelflip).
assert (Col K H M) by (conclude_def Col ).
assert (Col H K M) by (forward_using lemma_collinearorder).
assert (neq K M) by (forward_using lemma_betweennotequal).
assert (neq M K) by (conclude lemma_inequalitysymmetric).
assert (Par F G M K) by (conclude lemma_collinearparallel).
assert (Col H M K) by (forward_using lemma_collinearorder).
assert (Par G L K M) by (conclude lemma_collinearparallel).
assert (Par G L M K) by (forward_using lemma_parallelflip).
assert (Par M K G L) by (conclude lemma_parallelsymmetric).
assert (Par M K F G) by (conclude lemma_parallelsymmetric).
assert (Par M K G F) by (forward_using lemma_parallelflip).
assert (Col G L F) by (conclude lemma_Playfair).
assert (Col G F L) by (forward_using lemma_collinearorder).
assert (nCol F L M) by (forward_using lemma_parallelNC).
assert (neq L F) by (forward_using lemma_NCdistinct).
assert (Par M K L F) by (conclude lemma_collinearparallel).
assert (Par L F M K) by (conclude lemma_parallelsymmetric).
assert (Par F L K M) by (forward_using lemma_parallelflip).
assert (PG F K M L) by (conclude_def PG ).
assert (nCol F K H) by (forward_using lemma_parallelNC).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).

*****
H118 : CongA F K H H K F
H117 : nCol F K H
H116 : PG F K M L
H115 : Par F L K M
H114 : Par L F M K
H113 : Par M K L F
H112 : neq L F
H111 : nCol F L M
H110 : Col G F L
H109 : Col G L F
H108 : Par M K G F
H107 : Par M K F G
H106 : Par M K G L
H105 : Par G L M K
H104 : Par G L K M
H103 : Col H M K
H102 : Par F G M K
H101 : neq M K
H100 : neq K M
H99 : Col H K M
H98 : Col K H M
H97 : Par F G H K
H96 : Par G L H M
H95 : Par F G K H
H94 : Par F K M L
H93 : Par F K L M
H92 : Par L M G H
H91 : Par M L G H
H90 : Par F K G H
H89 : Col L M M
H88 : Col G H H
H87 : Col F K K
H86 : eq M M
H85 : eq H H
H84 : eq K K
H83 : neq L M
H82 : nCol H M L
H81 : Par G H M L
H80 : neq G H
H79 : nCol G H M
H78 : neq F K
H77 : BetS K H M
H76 : Out H G G
H75 : neq H G
H74 : eq G G
H73 : RT K H G G H M
H72 : RT G H M K H G
H71 : CongA F K H G H M
H70 : CongA F K H H K F
H69 : nCol F K H
H68 : nCol H K F
H67 : CongA G H M H K F
H66 : RT F K H K H G
H65 : OS F G K H
H64 : TP K H F G
H63 : Par K H F G
H62 : Par F G K H
H61 : Cong K s H K
H60 : BetS H K s
s : Point
H59 : neq H K
H58 : Par K F H G
H57 : Par F K H G
H56 : CongA H K F G H M
H55 : CongA J E N G H M
H54 : BetS B e C
H53 : TS M G H K
H52 : Midpoint B e C
H51 : EF D B e C G H M L
H50 : CongA G H M J E N
H49 : PG G H M L
M,L,e : Point
H48 : nCol G H K
H47 : nCol H G K
H46 : nCol K H G
H45 : Par F K H G
H44 : Triangle D B C
H43 : nCol D B C
H42 : OS S F K H
H41 : CongA H K F J E N
H40 : EF A B m D F K H G
H39 : PG F K H G
F,G : Point
H38 : nCol S K H
H37 : nCol H K S
H36 : neq H K
H35 : neq K H
H34 : Col R K K
H33 : eq K K
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (CongA F K H J E N) by (conclude lemma_equalanglestransitive).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (Col R K K) by (conclude_def Col ).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (neq H K) by (conclude lemma_inequalitysymmetric).
assert (nCol H K S) by (conclude lemma_NChelper).
assert (nCol S K H) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F G, (PG F K H G /\\ EF A B m D F K H G /\\ CongA H K F J E N /\\ OS S F K H)) by (conclude proposition_42B);destruct Tf as [F[G]];spliter.
assert (nCol D B C) by (forward_using lemma_NCorder).
assert (Triangle D B C) by (conclude_def Triangle ).
assert (Par F K H G) by (conclude_def PG ).
assert (nCol K H G) by (forward_using lemma_parallelNC).
assert (nCol H G K) by (forward_using lemma_NCorder).
assert (nCol G H K) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists M L e, (PG G H M L /\\ CongA G H M J E N /\\ EF D B e C G H M L /\\ Midpoint B e C /\\ TS M G H K)) by (conclude proposition_44);destruct Tf as [M[L[e]]];spliter.
assert (BetS B e C) by (conclude_def Midpoint ).
assert (CongA J E N G H M) by (conclude lemma_equalanglessymmetric).
assert (CongA H K F G H M) by (conclude lemma_equalanglestransitive).
assert (Par F K H G) by (conclude_def PG ).
assert (Par K F H G) by (forward_using lemma_parallelflip).
assert (neq H K) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists s, (BetS H K s /\\ Cong K s H K)) by (conclude lemma_extension);destruct Tf as [s];spliter.
assert (Par F G K H) by (conclude_def PG ).
assert (Par K H F G) by (conclude lemma_parallelsymmetric).
assert (TP K H F G) by (conclude lemma_paralleldef2B).
assert (OS F G K H) by (conclude_def TP ).
assert (RT F K H K H G) by (conclude proposition_29C).
assert (CongA G H M H K F) by (conclude lemma_equalanglessymmetric).
assert (nCol H K F) by (conclude lemma_equalanglesNC).
assert (nCol F K H) by (forward_using lemma_NCorder).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H G H M) by (conclude lemma_equalanglestransitive).
assert (RT G H M K H G) by (conclude lemma_RTcongruence).
assert (RT K H G G H M) by (conclude lemma_RTsymmetric).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (neq H G) by (forward_using lemma_NCdistinct).
assert (Out H G G) by (conclude lemma_ray4).
assert (BetS K H M) by (conclude proposition_14).
assert (neq F K) by (forward_using lemma_NCdistinct).
assert (nCol G H M) by (conclude lemma_equalanglesNC).
assert (neq G H) by (forward_using lemma_NCdistinct).
assert (Par G H M L) by (conclude_def PG ).
assert (nCol H M L) by (forward_using lemma_parallelNC).
assert (neq L M) by (forward_using lemma_NCdistinct).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (eq H H) by (conclude cn_equalityreflexive).
assert (eq M M) by (conclude cn_equalityreflexive).
assert (Col F K K) by (conclude_def Col ).
assert (Col G H H) by (conclude_def Col ).
assert (Col L M M) by (conclude_def Col ).
assert (Par F K G H) by (forward_using lemma_parallelflip).
assert (Par M L G H) by (conclude lemma_parallelsymmetric).
assert (Par L M G H) by (forward_using lemma_parallelflip).
assert (Par F K L M) by (conclude proposition_30).
assert (Par F K M L) by (forward_using lemma_parallelflip).
assert (Par F G K H) by (conclude_def PG ).
assert (Par G L H M) by (conclude_def PG ).
assert (Par F G H K) by (forward_using lemma_parallelflip).
assert (Col K H M) by (conclude_def Col ).
assert (Col H K M) by (forward_using lemma_collinearorder).
assert (neq K M) by (forward_using lemma_betweennotequal).
assert (neq M K) by (conclude lemma_inequalitysymmetric).
assert (Par F G M K) by (conclude lemma_collinearparallel).
assert (Col H M K) by (forward_using lemma_collinearorder).
assert (Par G L K M) by (conclude lemma_collinearparallel).
assert (Par G L M K) by (forward_using lemma_parallelflip).
assert (Par M K G L) by (conclude lemma_parallelsymmetric).
assert (Par M K F G) by (conclude lemma_parallelsymmetric).
assert (Par M K G F) by (forward_using lemma_parallelflip).
assert (Col G L F) by (conclude lemma_Playfair).
assert (Col G F L) by (forward_using lemma_collinearorder).
assert (nCol F L M) by (forward_using lemma_parallelNC).
assert (neq L F) by (forward_using lemma_NCdistinct).
assert (Par M K L F) by (conclude lemma_collinearparallel).
assert (Par L F M K) by (conclude lemma_parallelsymmetric).
assert (Par F L K M) by (forward_using lemma_parallelflip).
assert (PG F K M L) by (conclude_def PG ).
assert (nCol F K H) by (forward_using lemma_parallelNC).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H J E N) by (conclude lemma_equalanglestransitive).

*****
H119 : CongA F K H J E N
H118 : CongA F K H H K F
H117 : nCol F K H
H116 : PG F K M L
H115 : Par F L K M
H114 : Par L F M K
H113 : Par M K L F
H112 : neq L F
H111 : nCol F L M
H110 : Col G F L
H109 : Col G L F
H108 : Par M K G F
H107 : Par M K F G
H106 : Par M K G L
H105 : Par G L M K
H104 : Par G L K M
H103 : Col H M K
H102 : Par F G M K
H101 : neq M K
H100 : neq K M
H99 : Col H K M
H98 : Col K H M
H97 : Par F G H K
H96 : Par G L H M
H95 : Par F G K H
H94 : Par F K M L
H93 : Par F K L M
H92 : Par L M G H
H91 : Par M L G H
H90 : Par F K G H
H89 : Col L M M
H88 : Col G H H
H87 : Col F K K
H86 : eq M M
H85 : eq H H
H84 : eq K K
H83 : neq L M
H82 : nCol H M L
H81 : Par G H M L
H80 : neq G H
H79 : nCol G H M
H78 : neq F K
H77 : BetS K H M
H76 : Out H G G
H75 : neq H G
H74 : eq G G
H73 : RT K H G G H M
H72 : RT G H M K H G
H71 : CongA F K H G H M
H70 : CongA F K H H K F
H69 : nCol F K H
H68 : nCol H K F
H67 : CongA G H M H K F
H66 : RT F K H K H G
H65 : OS F G K H
H64 : TP K H F G
H63 : Par K H F G
H62 : Par F G K H
H61 : Cong K s H K
H60 : BetS H K s
s : Point
H59 : neq H K
H58 : Par K F H G
H57 : Par F K H G
H56 : CongA H K F G H M
H55 : CongA J E N G H M
H54 : BetS B e C
H53 : TS M G H K
H52 : Midpoint B e C
H51 : EF D B e C G H M L
H50 : CongA G H M J E N
H49 : PG G H M L
M,L,e : Point
H48 : nCol G H K
H47 : nCol H G K
H46 : nCol K H G
H45 : Par F K H G
H44 : Triangle D B C
H43 : nCol D B C
H42 : OS S F K H
H41 : CongA H K F J E N
H40 : EF A B m D F K H G
H39 : PG F K H G
F,G : Point
H38 : nCol S K H
H37 : nCol H K S
H36 : neq H K
H35 : neq K H
H34 : Col R K K
H33 : eq K K
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (neq K H) by (forward_using lemma_betweennotequal).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (Col R K K) by (conclude_def Col ).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (neq H K) by (conclude lemma_inequalitysymmetric).
assert (nCol H K S) by (conclude lemma_NChelper).
assert (nCol S K H) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F G, (PG F K H G /\\ EF A B m D F K H G /\\ CongA H K F J E N /\\ OS S F K H)) by (conclude proposition_42B);destruct Tf as [F[G]];spliter.
assert (nCol D B C) by (forward_using lemma_NCorder).
assert (Triangle D B C) by (conclude_def Triangle ).
assert (Par F K H G) by (conclude_def PG ).
assert (nCol K H G) by (forward_using lemma_parallelNC).
assert (nCol H G K) by (forward_using lemma_NCorder).
assert (nCol G H K) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists M L e, (PG G H M L /\\ CongA G H M J E N /\\ EF D B e C G H M L /\\ Midpoint B e C /\\ TS M G H K)) by (conclude proposition_44);destruct Tf as [M[L[e]]];spliter.
assert (BetS B e C) by (conclude_def Midpoint ).
assert (CongA J E N G H M) by (conclude lemma_equalanglessymmetric).
assert (CongA H K F G H M) by (conclude lemma_equalanglestransitive).
assert (Par F K H G) by (conclude_def PG ).
assert (Par K F H G) by (forward_using lemma_parallelflip).
assert (neq H K) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists s, (BetS H K s /\\ Cong K s H K)) by (conclude lemma_extension);destruct Tf as [s];spliter.
assert (Par F G K H) by (conclude_def PG ).
assert (Par K H F G) by (conclude lemma_parallelsymmetric).
assert (TP K H F G) by (conclude lemma_paralleldef2B).
assert (OS F G K H) by (conclude_def TP ).
assert (RT F K H K H G) by (conclude proposition_29C).
assert (CongA G H M H K F) by (conclude lemma_equalanglessymmetric).
assert (nCol H K F) by (conclude lemma_equalanglesNC).
assert (nCol F K H) by (forward_using lemma_NCorder).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H G H M) by (conclude lemma_equalanglestransitive).
assert (RT G H M K H G) by (conclude lemma_RTcongruence).
assert (RT K H G G H M) by (conclude lemma_RTsymmetric).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (neq H G) by (forward_using lemma_NCdistinct).
assert (Out H G G) by (conclude lemma_ray4).
assert (BetS K H M) by (conclude proposition_14).
assert (neq F K) by (forward_using lemma_NCdistinct).
assert (nCol G H M) by (conclude lemma_equalanglesNC).
assert (neq G H) by (forward_using lemma_NCdistinct).
assert (Par G H M L) by (conclude_def PG ).
assert (nCol H M L) by (forward_using lemma_parallelNC).
assert (neq L M) by (forward_using lemma_NCdistinct).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (eq H H) by (conclude cn_equalityreflexive).
assert (eq M M) by (conclude cn_equalityreflexive).
assert (Col F K K) by (conclude_def Col ).
assert (Col G H H) by (conclude_def Col ).
assert (Col L M M) by (conclude_def Col ).
assert (Par F K G H) by (forward_using lemma_parallelflip).
assert (Par M L G H) by (conclude lemma_parallelsymmetric).
assert (Par L M G H) by (forward_using lemma_parallelflip).
assert (Par F K L M) by (conclude proposition_30).
assert (Par F K M L) by (forward_using lemma_parallelflip).
assert (Par F G K H) by (conclude_def PG ).
assert (Par G L H M) by (conclude_def PG ).
assert (Par F G H K) by (forward_using lemma_parallelflip).
assert (Col K H M) by (conclude_def Col ).
assert (Col H K M) by (forward_using lemma_collinearorder).
assert (neq K M) by (forward_using lemma_betweennotequal).
assert (neq M K) by (conclude lemma_inequalitysymmetric).
assert (Par F G M K) by (conclude lemma_collinearparallel).
assert (Col H M K) by (forward_using lemma_collinearorder).
assert (Par G L K M) by (conclude lemma_collinearparallel).
assert (Par G L M K) by (forward_using lemma_parallelflip).
assert (Par M K G L) by (conclude lemma_parallelsymmetric).
assert (Par M K F G) by (conclude lemma_parallelsymmetric).
assert (Par M K G F) by (forward_using lemma_parallelflip).
assert (Col G L F) by (conclude lemma_Playfair).
assert (Col G F L) by (forward_using lemma_collinearorder).
assert (nCol F L M) by (forward_using lemma_parallelNC).
assert (neq L F) by (forward_using lemma_NCdistinct).
assert (Par M K L F) by (conclude lemma_collinearparallel).
assert (Par L F M K) by (conclude lemma_parallelsymmetric).
assert (Par F L K M) by (forward_using lemma_parallelflip).
assert (PG F K M L) by (conclude_def PG ).
assert (nCol F K H) by (forward_using lemma_parallelNC).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H J E N) by (conclude lemma_equalanglestransitive).
assert (neq K H) by (forward_using lemma_betweennotequal).

*****
H120 : neq K H
H119 : CongA F K H J E N
H118 : CongA F K H H K F
H117 : nCol F K H
H116 : PG F K M L
H115 : Par F L K M
H114 : Par L F M K
H113 : Par M K L F
H112 : neq L F
H111 : nCol F L M
H110 : Col G F L
H109 : Col G L F
H108 : Par M K G F
H107 : Par M K F G
H106 : Par M K G L
H105 : Par G L M K
H104 : Par G L K M
H103 : Col H M K
H102 : Par F G M K
H101 : neq M K
H100 : neq K M
H99 : Col H K M
H98 : Col K H M
H97 : Par F G H K
H96 : Par G L H M
H95 : Par F G K H
H94 : Par F K M L
H93 : Par F K L M
H92 : Par L M G H
H91 : Par M L G H
H90 : Par F K G H
H89 : Col L M M
H88 : Col G H H
H87 : Col F K K
H86 : eq M M
H85 : eq H H
H84 : eq K K
H83 : neq L M
H82 : nCol H M L
H81 : Par G H M L
H80 : neq G H
H79 : nCol G H M
H78 : neq F K
H77 : BetS K H M
H76 : Out H G G
H75 : neq H G
H74 : eq G G
H73 : RT K H G G H M
H72 : RT G H M K H G
H71 : CongA F K H G H M
H70 : CongA F K H H K F
H69 : nCol F K H
H68 : nCol H K F
H67 : CongA G H M H K F
H66 : RT F K H K H G
H65 : OS F G K H
H64 : TP K H F G
H63 : Par K H F G
H62 : Par F G K H
H61 : Cong K s H K
H60 : BetS H K s
s : Point
H59 : neq H K
H58 : Par K F H G
H57 : Par F K H G
H56 : CongA H K F G H M
H55 : CongA J E N G H M
H54 : BetS B e C
H53 : TS M G H K
H52 : Midpoint B e C
H51 : EF D B e C G H M L
H50 : CongA G H M J E N
H49 : PG G H M L
M,L,e : Point
H48 : nCol G H K
H47 : nCol H G K
H46 : nCol K H G
H45 : Par F K H G
H44 : Triangle D B C
H43 : nCol D B C
H42 : OS S F K H
H41 : CongA H K F J E N
H40 : EF A B m D F K H G
H39 : PG F K H G
F,G : Point
H38 : nCol S K H
H37 : nCol H K S
H36 : neq H K
H35 : neq K H
H34 : Col R K K
H33 : eq K K
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (Out K H M) by (conclude lemma_ray4).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (Col R K K) by (conclude_def Col ).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (neq H K) by (conclude lemma_inequalitysymmetric).
assert (nCol H K S) by (conclude lemma_NChelper).
assert (nCol S K H) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F G, (PG F K H G /\\ EF A B m D F K H G /\\ CongA H K F J E N /\\ OS S F K H)) by (conclude proposition_42B);destruct Tf as [F[G]];spliter.
assert (nCol D B C) by (forward_using lemma_NCorder).
assert (Triangle D B C) by (conclude_def Triangle ).
assert (Par F K H G) by (conclude_def PG ).
assert (nCol K H G) by (forward_using lemma_parallelNC).
assert (nCol H G K) by (forward_using lemma_NCorder).
assert (nCol G H K) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists M L e, (PG G H M L /\\ CongA G H M J E N /\\ EF D B e C G H M L /\\ Midpoint B e C /\\ TS M G H K)) by (conclude proposition_44);destruct Tf as [M[L[e]]];spliter.
assert (BetS B e C) by (conclude_def Midpoint ).
assert (CongA J E N G H M) by (conclude lemma_equalanglessymmetric).
assert (CongA H K F G H M) by (conclude lemma_equalanglestransitive).
assert (Par F K H G) by (conclude_def PG ).
assert (Par K F H G) by (forward_using lemma_parallelflip).
assert (neq H K) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists s, (BetS H K s /\\ Cong K s H K)) by (conclude lemma_extension);destruct Tf as [s];spliter.
assert (Par F G K H) by (conclude_def PG ).
assert (Par K H F G) by (conclude lemma_parallelsymmetric).
assert (TP K H F G) by (conclude lemma_paralleldef2B).
assert (OS F G K H) by (conclude_def TP ).
assert (RT F K H K H G) by (conclude proposition_29C).
assert (CongA G H M H K F) by (conclude lemma_equalanglessymmetric).
assert (nCol H K F) by (conclude lemma_equalanglesNC).
assert (nCol F K H) by (forward_using lemma_NCorder).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H G H M) by (conclude lemma_equalanglestransitive).
assert (RT G H M K H G) by (conclude lemma_RTcongruence).
assert (RT K H G G H M) by (conclude lemma_RTsymmetric).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (neq H G) by (forward_using lemma_NCdistinct).
assert (Out H G G) by (conclude lemma_ray4).
assert (BetS K H M) by (conclude proposition_14).
assert (neq F K) by (forward_using lemma_NCdistinct).
assert (nCol G H M) by (conclude lemma_equalanglesNC).
assert (neq G H) by (forward_using lemma_NCdistinct).
assert (Par G H M L) by (conclude_def PG ).
assert (nCol H M L) by (forward_using lemma_parallelNC).
assert (neq L M) by (forward_using lemma_NCdistinct).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (eq H H) by (conclude cn_equalityreflexive).
assert (eq M M) by (conclude cn_equalityreflexive).
assert (Col F K K) by (conclude_def Col ).
assert (Col G H H) by (conclude_def Col ).
assert (Col L M M) by (conclude_def Col ).
assert (Par F K G H) by (forward_using lemma_parallelflip).
assert (Par M L G H) by (conclude lemma_parallelsymmetric).
assert (Par L M G H) by (forward_using lemma_parallelflip).
assert (Par F K L M) by (conclude proposition_30).
assert (Par F K M L) by (forward_using lemma_parallelflip).
assert (Par F G K H) by (conclude_def PG ).
assert (Par G L H M) by (conclude_def PG ).
assert (Par F G H K) by (forward_using lemma_parallelflip).
assert (Col K H M) by (conclude_def Col ).
assert (Col H K M) by (forward_using lemma_collinearorder).
assert (neq K M) by (forward_using lemma_betweennotequal).
assert (neq M K) by (conclude lemma_inequalitysymmetric).
assert (Par F G M K) by (conclude lemma_collinearparallel).
assert (Col H M K) by (forward_using lemma_collinearorder).
assert (Par G L K M) by (conclude lemma_collinearparallel).
assert (Par G L M K) by (forward_using lemma_parallelflip).
assert (Par M K G L) by (conclude lemma_parallelsymmetric).
assert (Par M K F G) by (conclude lemma_parallelsymmetric).
assert (Par M K G F) by (forward_using lemma_parallelflip).
assert (Col G L F) by (conclude lemma_Playfair).
assert (Col G F L) by (forward_using lemma_collinearorder).
assert (nCol F L M) by (forward_using lemma_parallelNC).
assert (neq L F) by (forward_using lemma_NCdistinct).
assert (Par M K L F) by (conclude lemma_collinearparallel).
assert (Par L F M K) by (conclude lemma_parallelsymmetric).
assert (Par F L K M) by (forward_using lemma_parallelflip).
assert (PG F K M L) by (conclude_def PG ).
assert (nCol F K H) by (forward_using lemma_parallelNC).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H J E N) by (conclude lemma_equalanglestransitive).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (Out K H M) by (conclude lemma_ray4).

*****
H121 : Out K H M
H120 : neq K H
H119 : CongA F K H J E N
H118 : CongA F K H H K F
H117 : nCol F K H
H116 : PG F K M L
H115 : Par F L K M
H114 : Par L F M K
H113 : Par M K L F
H112 : neq L F
H111 : nCol F L M
H110 : Col G F L
H109 : Col G L F
H108 : Par M K G F
H107 : Par M K F G
H106 : Par M K G L
H105 : Par G L M K
H104 : Par G L K M
H103 : Col H M K
H102 : Par F G M K
H101 : neq M K
H100 : neq K M
H99 : Col H K M
H98 : Col K H M
H97 : Par F G H K
H96 : Par G L H M
H95 : Par F G K H
H94 : Par F K M L
H93 : Par F K L M
H92 : Par L M G H
H91 : Par M L G H
H90 : Par F K G H
H89 : Col L M M
H88 : Col G H H
H87 : Col F K K
H86 : eq M M
H85 : eq H H
H84 : eq K K
H83 : neq L M
H82 : nCol H M L
H81 : Par G H M L
H80 : neq G H
H79 : nCol G H M
H78 : neq F K
H77 : BetS K H M
H76 : Out H G G
H75 : neq H G
H74 : eq G G
H73 : RT K H G G H M
H72 : RT G H M K H G
H71 : CongA F K H G H M
H70 : CongA F K H H K F
H69 : nCol F K H
H68 : nCol H K F
H67 : CongA G H M H K F
H66 : RT F K H K H G
H65 : OS F G K H
H64 : TP K H F G
H63 : Par K H F G
H62 : Par F G K H
H61 : Cong K s H K
H60 : BetS H K s
s : Point
H59 : neq H K
H58 : Par K F H G
H57 : Par F K H G
H56 : CongA H K F G H M
H55 : CongA J E N G H M
H54 : BetS B e C
H53 : TS M G H K
H52 : Midpoint B e C
H51 : EF D B e C G H M L
H50 : CongA G H M J E N
H49 : PG G H M L
M,L,e : Point
H48 : nCol G H K
H47 : nCol H G K
H46 : nCol K H G
H45 : Par F K H G
H44 : Triangle D B C
H43 : nCol D B C
H42 : OS S F K H
H41 : CongA H K F J E N
H40 : EF A B m D F K H G
H39 : PG F K H G
F,G : Point
H38 : nCol S K H
H37 : nCol H K S
H36 : neq H K
H35 : neq K H
H34 : Col R K K
H33 : eq K K
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (Out K M H) by (conclude lemma_ray5).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (Col R K K) by (conclude_def Col ).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (neq H K) by (conclude lemma_inequalitysymmetric).
assert (nCol H K S) by (conclude lemma_NChelper).
assert (nCol S K H) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F G, (PG F K H G /\\ EF A B m D F K H G /\\ CongA H K F J E N /\\ OS S F K H)) by (conclude proposition_42B);destruct Tf as [F[G]];spliter.
assert (nCol D B C) by (forward_using lemma_NCorder).
assert (Triangle D B C) by (conclude_def Triangle ).
assert (Par F K H G) by (conclude_def PG ).
assert (nCol K H G) by (forward_using lemma_parallelNC).
assert (nCol H G K) by (forward_using lemma_NCorder).
assert (nCol G H K) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists M L e, (PG G H M L /\\ CongA G H M J E N /\\ EF D B e C G H M L /\\ Midpoint B e C /\\ TS M G H K)) by (conclude proposition_44);destruct Tf as [M[L[e]]];spliter.
assert (BetS B e C) by (conclude_def Midpoint ).
assert (CongA J E N G H M) by (conclude lemma_equalanglessymmetric).
assert (CongA H K F G H M) by (conclude lemma_equalanglestransitive).
assert (Par F K H G) by (conclude_def PG ).
assert (Par K F H G) by (forward_using lemma_parallelflip).
assert (neq H K) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists s, (BetS H K s /\\ Cong K s H K)) by (conclude lemma_extension);destruct Tf as [s];spliter.
assert (Par F G K H) by (conclude_def PG ).
assert (Par K H F G) by (conclude lemma_parallelsymmetric).
assert (TP K H F G) by (conclude lemma_paralleldef2B).
assert (OS F G K H) by (conclude_def TP ).
assert (RT F K H K H G) by (conclude proposition_29C).
assert (CongA G H M H K F) by (conclude lemma_equalanglessymmetric).
assert (nCol H K F) by (conclude lemma_equalanglesNC).
assert (nCol F K H) by (forward_using lemma_NCorder).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H G H M) by (conclude lemma_equalanglestransitive).
assert (RT G H M K H G) by (conclude lemma_RTcongruence).
assert (RT K H G G H M) by (conclude lemma_RTsymmetric).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (neq H G) by (forward_using lemma_NCdistinct).
assert (Out H G G) by (conclude lemma_ray4).
assert (BetS K H M) by (conclude proposition_14).
assert (neq F K) by (forward_using lemma_NCdistinct).
assert (nCol G H M) by (conclude lemma_equalanglesNC).
assert (neq G H) by (forward_using lemma_NCdistinct).
assert (Par G H M L) by (conclude_def PG ).
assert (nCol H M L) by (forward_using lemma_parallelNC).
assert (neq L M) by (forward_using lemma_NCdistinct).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (eq H H) by (conclude cn_equalityreflexive).
assert (eq M M) by (conclude cn_equalityreflexive).
assert (Col F K K) by (conclude_def Col ).
assert (Col G H H) by (conclude_def Col ).
assert (Col L M M) by (conclude_def Col ).
assert (Par F K G H) by (forward_using lemma_parallelflip).
assert (Par M L G H) by (conclude lemma_parallelsymmetric).
assert (Par L M G H) by (forward_using lemma_parallelflip).
assert (Par F K L M) by (conclude proposition_30).
assert (Par F K M L) by (forward_using lemma_parallelflip).
assert (Par F G K H) by (conclude_def PG ).
assert (Par G L H M) by (conclude_def PG ).
assert (Par F G H K) by (forward_using lemma_parallelflip).
assert (Col K H M) by (conclude_def Col ).
assert (Col H K M) by (forward_using lemma_collinearorder).
assert (neq K M) by (forward_using lemma_betweennotequal).
assert (neq M K) by (conclude lemma_inequalitysymmetric).
assert (Par F G M K) by (conclude lemma_collinearparallel).
assert (Col H M K) by (forward_using lemma_collinearorder).
assert (Par G L K M) by (conclude lemma_collinearparallel).
assert (Par G L M K) by (forward_using lemma_parallelflip).
assert (Par M K G L) by (conclude lemma_parallelsymmetric).
assert (Par M K F G) by (conclude lemma_parallelsymmetric).
assert (Par M K G F) by (forward_using lemma_parallelflip).
assert (Col G L F) by (conclude lemma_Playfair).
assert (Col G F L) by (forward_using lemma_collinearorder).
assert (nCol F L M) by (forward_using lemma_parallelNC).
assert (neq L F) by (forward_using lemma_NCdistinct).
assert (Par M K L F) by (conclude lemma_collinearparallel).
assert (Par L F M K) by (conclude lemma_parallelsymmetric).
assert (Par F L K M) by (forward_using lemma_parallelflip).
assert (PG F K M L) by (conclude_def PG ).
assert (nCol F K H) by (forward_using lemma_parallelNC).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H J E N) by (conclude lemma_equalanglestransitive).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (Out K H M) by (conclude lemma_ray4).
assert (Out K M H) by (conclude lemma_ray5).

*****
H122 : Out K M H
H121 : Out K H M
H120 : neq K H
H119 : CongA F K H J E N
H118 : CongA F K H H K F
H117 : nCol F K H
H116 : PG F K M L
H115 : Par F L K M
H114 : Par L F M K
H113 : Par M K L F
H112 : neq L F
H111 : nCol F L M
H110 : Col G F L
H109 : Col G L F
H108 : Par M K G F
H107 : Par M K F G
H106 : Par M K G L
H105 : Par G L M K
H104 : Par G L K M
H103 : Col H M K
H102 : Par F G M K
H101 : neq M K
H100 : neq K M
H99 : Col H K M
H98 : Col K H M
H97 : Par F G H K
H96 : Par G L H M
H95 : Par F G K H
H94 : Par F K M L
H93 : Par F K L M
H92 : Par L M G H
H91 : Par M L G H
H90 : Par F K G H
H89 : Col L M M
H88 : Col G H H
H87 : Col F K K
H86 : eq M M
H85 : eq H H
H84 : eq K K
H83 : neq L M
H82 : nCol H M L
H81 : Par G H M L
H80 : neq G H
H79 : nCol G H M
H78 : neq F K
H77 : BetS K H M
H76 : Out H G G
H75 : neq H G
H74 : eq G G
H73 : RT K H G G H M
H72 : RT G H M K H G
H71 : CongA F K H G H M
H70 : CongA F K H H K F
H69 : nCol F K H
H68 : nCol H K F
H67 : CongA G H M H K F
H66 : RT F K H K H G
H65 : OS F G K H
H64 : TP K H F G
H63 : Par K H F G
H62 : Par F G K H
H61 : Cong K s H K
H60 : BetS H K s
s : Point
H59 : neq H K
H58 : Par K F H G
H57 : Par F K H G
H56 : CongA H K F G H M
H55 : CongA J E N G H M
H54 : BetS B e C
H53 : TS M G H K
H52 : Midpoint B e C
H51 : EF D B e C G H M L
H50 : CongA G H M J E N
H49 : PG G H M L
M,L,e : Point
H48 : nCol G H K
H47 : nCol H G K
H46 : nCol K H G
H45 : Par F K H G
H44 : Triangle D B C
H43 : nCol D B C
H42 : OS S F K H
H41 : CongA H K F J E N
H40 : EF A B m D F K H G
H39 : PG F K H G
F,G : Point
H38 : nCol S K H
H37 : nCol H K S
H36 : neq H K
H35 : neq K H
H34 : Col R K K
H33 : eq K K
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (eq F F) by (conclude cn_equalityreflexive).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (Col R K K) by (conclude_def Col ).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (neq H K) by (conclude lemma_inequalitysymmetric).
assert (nCol H K S) by (conclude lemma_NChelper).
assert (nCol S K H) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F G, (PG F K H G /\\ EF A B m D F K H G /\\ CongA H K F J E N /\\ OS S F K H)) by (conclude proposition_42B);destruct Tf as [F[G]];spliter.
assert (nCol D B C) by (forward_using lemma_NCorder).
assert (Triangle D B C) by (conclude_def Triangle ).
assert (Par F K H G) by (conclude_def PG ).
assert (nCol K H G) by (forward_using lemma_parallelNC).
assert (nCol H G K) by (forward_using lemma_NCorder).
assert (nCol G H K) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists M L e, (PG G H M L /\\ CongA G H M J E N /\\ EF D B e C G H M L /\\ Midpoint B e C /\\ TS M G H K)) by (conclude proposition_44);destruct Tf as [M[L[e]]];spliter.
assert (BetS B e C) by (conclude_def Midpoint ).
assert (CongA J E N G H M) by (conclude lemma_equalanglessymmetric).
assert (CongA H K F G H M) by (conclude lemma_equalanglestransitive).
assert (Par F K H G) by (conclude_def PG ).
assert (Par K F H G) by (forward_using lemma_parallelflip).
assert (neq H K) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists s, (BetS H K s /\\ Cong K s H K)) by (conclude lemma_extension);destruct Tf as [s];spliter.
assert (Par F G K H) by (conclude_def PG ).
assert (Par K H F G) by (conclude lemma_parallelsymmetric).
assert (TP K H F G) by (conclude lemma_paralleldef2B).
assert (OS F G K H) by (conclude_def TP ).
assert (RT F K H K H G) by (conclude proposition_29C).
assert (CongA G H M H K F) by (conclude lemma_equalanglessymmetric).
assert (nCol H K F) by (conclude lemma_equalanglesNC).
assert (nCol F K H) by (forward_using lemma_NCorder).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H G H M) by (conclude lemma_equalanglestransitive).
assert (RT G H M K H G) by (conclude lemma_RTcongruence).
assert (RT K H G G H M) by (conclude lemma_RTsymmetric).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (neq H G) by (forward_using lemma_NCdistinct).
assert (Out H G G) by (conclude lemma_ray4).
assert (BetS K H M) by (conclude proposition_14).
assert (neq F K) by (forward_using lemma_NCdistinct).
assert (nCol G H M) by (conclude lemma_equalanglesNC).
assert (neq G H) by (forward_using lemma_NCdistinct).
assert (Par G H M L) by (conclude_def PG ).
assert (nCol H M L) by (forward_using lemma_parallelNC).
assert (neq L M) by (forward_using lemma_NCdistinct).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (eq H H) by (conclude cn_equalityreflexive).
assert (eq M M) by (conclude cn_equalityreflexive).
assert (Col F K K) by (conclude_def Col ).
assert (Col G H H) by (conclude_def Col ).
assert (Col L M M) by (conclude_def Col ).
assert (Par F K G H) by (forward_using lemma_parallelflip).
assert (Par M L G H) by (conclude lemma_parallelsymmetric).
assert (Par L M G H) by (forward_using lemma_parallelflip).
assert (Par F K L M) by (conclude proposition_30).
assert (Par F K M L) by (forward_using lemma_parallelflip).
assert (Par F G K H) by (conclude_def PG ).
assert (Par G L H M) by (conclude_def PG ).
assert (Par F G H K) by (forward_using lemma_parallelflip).
assert (Col K H M) by (conclude_def Col ).
assert (Col H K M) by (forward_using lemma_collinearorder).
assert (neq K M) by (forward_using lemma_betweennotequal).
assert (neq M K) by (conclude lemma_inequalitysymmetric).
assert (Par F G M K) by (conclude lemma_collinearparallel).
assert (Col H M K) by (forward_using lemma_collinearorder).
assert (Par G L K M) by (conclude lemma_collinearparallel).
assert (Par G L M K) by (forward_using lemma_parallelflip).
assert (Par M K G L) by (conclude lemma_parallelsymmetric).
assert (Par M K F G) by (conclude lemma_parallelsymmetric).
assert (Par M K G F) by (forward_using lemma_parallelflip).
assert (Col G L F) by (conclude lemma_Playfair).
assert (Col G F L) by (forward_using lemma_collinearorder).
assert (nCol F L M) by (forward_using lemma_parallelNC).
assert (neq L F) by (forward_using lemma_NCdistinct).
assert (Par M K L F) by (conclude lemma_collinearparallel).
assert (Par L F M K) by (conclude lemma_parallelsymmetric).
assert (Par F L K M) by (forward_using lemma_parallelflip).
assert (PG F K M L) by (conclude_def PG ).
assert (nCol F K H) by (forward_using lemma_parallelNC).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H J E N) by (conclude lemma_equalanglestransitive).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (Out K H M) by (conclude lemma_ray4).
assert (Out K M H) by (conclude lemma_ray5).
assert (eq F F) by (conclude cn_equalityreflexive).

*****
H123 : eq F F
H122 : Out K M H
H121 : Out K H M
H120 : neq K H
H119 : CongA F K H J E N
H118 : CongA F K H H K F
H117 : nCol F K H
H116 : PG F K M L
H115 : Par F L K M
H114 : Par L F M K
H113 : Par M K L F
H112 : neq L F
H111 : nCol F L M
H110 : Col G F L
H109 : Col G L F
H108 : Par M K G F
H107 : Par M K F G
H106 : Par M K G L
H105 : Par G L M K
H104 : Par G L K M
H103 : Col H M K
H102 : Par F G M K
H101 : neq M K
H100 : neq K M
H99 : Col H K M
H98 : Col K H M
H97 : Par F G H K
H96 : Par G L H M
H95 : Par F G K H
H94 : Par F K M L
H93 : Par F K L M
H92 : Par L M G H
H91 : Par M L G H
H90 : Par F K G H
H89 : Col L M M
H88 : Col G H H
H87 : Col F K K
H86 : eq M M
H85 : eq H H
H84 : eq K K
H83 : neq L M
H82 : nCol H M L
H81 : Par G H M L
H80 : neq G H
H79 : nCol G H M
H78 : neq F K
H77 : BetS K H M
H76 : Out H G G
H75 : neq H G
H74 : eq G G
H73 : RT K H G G H M
H72 : RT G H M K H G
H71 : CongA F K H G H M
H70 : CongA F K H H K F
H69 : nCol F K H
H68 : nCol H K F
H67 : CongA G H M H K F
H66 : RT F K H K H G
H65 : OS F G K H
H64 : TP K H F G
H63 : Par K H F G
H62 : Par F G K H
H61 : Cong K s H K
H60 : BetS H K s
s : Point
H59 : neq H K
H58 : Par K F H G
H57 : Par F K H G
H56 : CongA H K F G H M
H55 : CongA J E N G H M
H54 : BetS B e C
H53 : TS M G H K
H52 : Midpoint B e C
H51 : EF D B e C G H M L
H50 : CongA G H M J E N
H49 : PG G H M L
M,L,e : Point
H48 : nCol G H K
H47 : nCol H G K
H46 : nCol K H G
H45 : Par F K H G
H44 : Triangle D B C
H43 : nCol D B C
H42 : OS S F K H
H41 : CongA H K F J E N
H40 : EF A B m D F K H G
H39 : PG F K H G
F,G : Point
H38 : nCol S K H
H37 : nCol H K S
H36 : neq H K
H35 : neq K H
H34 : Col R K K
H33 : eq K K
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (neq K F) by (forward_using lemma_NCdistinct).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (Col R K K) by (conclude_def Col ).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (neq H K) by (conclude lemma_inequalitysymmetric).
assert (nCol H K S) by (conclude lemma_NChelper).
assert (nCol S K H) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F G, (PG F K H G /\\ EF A B m D F K H G /\\ CongA H K F J E N /\\ OS S F K H)) by (conclude proposition_42B);destruct Tf as [F[G]];spliter.
assert (nCol D B C) by (forward_using lemma_NCorder).
assert (Triangle D B C) by (conclude_def Triangle ).
assert (Par F K H G) by (conclude_def PG ).
assert (nCol K H G) by (forward_using lemma_parallelNC).
assert (nCol H G K) by (forward_using lemma_NCorder).
assert (nCol G H K) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists M L e, (PG G H M L /\\ CongA G H M J E N /\\ EF D B e C G H M L /\\ Midpoint B e C /\\ TS M G H K)) by (conclude proposition_44);destruct Tf as [M[L[e]]];spliter.
assert (BetS B e C) by (conclude_def Midpoint ).
assert (CongA J E N G H M) by (conclude lemma_equalanglessymmetric).
assert (CongA H K F G H M) by (conclude lemma_equalanglestransitive).
assert (Par F K H G) by (conclude_def PG ).
assert (Par K F H G) by (forward_using lemma_parallelflip).
assert (neq H K) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists s, (BetS H K s /\\ Cong K s H K)) by (conclude lemma_extension);destruct Tf as [s];spliter.
assert (Par F G K H) by (conclude_def PG ).
assert (Par K H F G) by (conclude lemma_parallelsymmetric).
assert (TP K H F G) by (conclude lemma_paralleldef2B).
assert (OS F G K H) by (conclude_def TP ).
assert (RT F K H K H G) by (conclude proposition_29C).
assert (CongA G H M H K F) by (conclude lemma_equalanglessymmetric).
assert (nCol H K F) by (conclude lemma_equalanglesNC).
assert (nCol F K H) by (forward_using lemma_NCorder).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H G H M) by (conclude lemma_equalanglestransitive).
assert (RT G H M K H G) by (conclude lemma_RTcongruence).
assert (RT K H G G H M) by (conclude lemma_RTsymmetric).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (neq H G) by (forward_using lemma_NCdistinct).
assert (Out H G G) by (conclude lemma_ray4).
assert (BetS K H M) by (conclude proposition_14).
assert (neq F K) by (forward_using lemma_NCdistinct).
assert (nCol G H M) by (conclude lemma_equalanglesNC).
assert (neq G H) by (forward_using lemma_NCdistinct).
assert (Par G H M L) by (conclude_def PG ).
assert (nCol H M L) by (forward_using lemma_parallelNC).
assert (neq L M) by (forward_using lemma_NCdistinct).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (eq H H) by (conclude cn_equalityreflexive).
assert (eq M M) by (conclude cn_equalityreflexive).
assert (Col F K K) by (conclude_def Col ).
assert (Col G H H) by (conclude_def Col ).
assert (Col L M M) by (conclude_def Col ).
assert (Par F K G H) by (forward_using lemma_parallelflip).
assert (Par M L G H) by (conclude lemma_parallelsymmetric).
assert (Par L M G H) by (forward_using lemma_parallelflip).
assert (Par F K L M) by (conclude proposition_30).
assert (Par F K M L) by (forward_using lemma_parallelflip).
assert (Par F G K H) by (conclude_def PG ).
assert (Par G L H M) by (conclude_def PG ).
assert (Par F G H K) by (forward_using lemma_parallelflip).
assert (Col K H M) by (conclude_def Col ).
assert (Col H K M) by (forward_using lemma_collinearorder).
assert (neq K M) by (forward_using lemma_betweennotequal).
assert (neq M K) by (conclude lemma_inequalitysymmetric).
assert (Par F G M K) by (conclude lemma_collinearparallel).
assert (Col H M K) by (forward_using lemma_collinearorder).
assert (Par G L K M) by (conclude lemma_collinearparallel).
assert (Par G L M K) by (forward_using lemma_parallelflip).
assert (Par M K G L) by (conclude lemma_parallelsymmetric).
assert (Par M K F G) by (conclude lemma_parallelsymmetric).
assert (Par M K G F) by (forward_using lemma_parallelflip).
assert (Col G L F) by (conclude lemma_Playfair).
assert (Col G F L) by (forward_using lemma_collinearorder).
assert (nCol F L M) by (forward_using lemma_parallelNC).
assert (neq L F) by (forward_using lemma_NCdistinct).
assert (Par M K L F) by (conclude lemma_collinearparallel).
assert (Par L F M K) by (conclude lemma_parallelsymmetric).
assert (Par F L K M) by (forward_using lemma_parallelflip).
assert (PG F K M L) by (conclude_def PG ).
assert (nCol F K H) by (forward_using lemma_parallelNC).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H J E N) by (conclude lemma_equalanglestransitive).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (Out K H M) by (conclude lemma_ray4).
assert (Out K M H) by (conclude lemma_ray5).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (neq K F) by (forward_using lemma_NCdistinct).

*****
H124 : neq K F
H123 : eq F F
H122 : Out K M H
H121 : Out K H M
H120 : neq K H
H119 : CongA F K H J E N
H118 : CongA F K H H K F
H117 : nCol F K H
H116 : PG F K M L
H115 : Par F L K M
H114 : Par L F M K
H113 : Par M K L F
H112 : neq L F
H111 : nCol F L M
H110 : Col G F L
H109 : Col G L F
H108 : Par M K G F
H107 : Par M K F G
H106 : Par M K G L
H105 : Par G L M K
H104 : Par G L K M
H103 : Col H M K
H102 : Par F G M K
H101 : neq M K
H100 : neq K M
H99 : Col H K M
H98 : Col K H M
H97 : Par F G H K
H96 : Par G L H M
H95 : Par F G K H
H94 : Par F K M L
H93 : Par F K L M
H92 : Par L M G H
H91 : Par M L G H
H90 : Par F K G H
H89 : Col L M M
H88 : Col G H H
H87 : Col F K K
H86 : eq M M
H85 : eq H H
H84 : eq K K
H83 : neq L M
H82 : nCol H M L
H81 : Par G H M L
H80 : neq G H
H79 : nCol G H M
H78 : neq F K
H77 : BetS K H M
H76 : Out H G G
H75 : neq H G
H74 : eq G G
H73 : RT K H G G H M
H72 : RT G H M K H G
H71 : CongA F K H G H M
H70 : CongA F K H H K F
H69 : nCol F K H
H68 : nCol H K F
H67 : CongA G H M H K F
H66 : RT F K H K H G
H65 : OS F G K H
H64 : TP K H F G
H63 : Par K H F G
H62 : Par F G K H
H61 : Cong K s H K
H60 : BetS H K s
s : Point
H59 : neq H K
H58 : Par K F H G
H57 : Par F K H G
H56 : CongA H K F G H M
H55 : CongA J E N G H M
H54 : BetS B e C
H53 : TS M G H K
H52 : Midpoint B e C
H51 : EF D B e C G H M L
H50 : CongA G H M J E N
H49 : PG G H M L
M,L,e : Point
H48 : nCol G H K
H47 : nCol H G K
H46 : nCol K H G
H45 : Par F K H G
H44 : Triangle D B C
H43 : nCol D B C
H42 : OS S F K H
H41 : CongA H K F J E N
H40 : EF A B m D F K H G
H39 : PG F K H G
F,G : Point
H38 : nCol S K H
H37 : nCol H K S
H36 : neq H K
H35 : neq K H
H34 : Col R K K
H33 : eq K K
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (Out K F F) by (conclude lemma_ray4).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (Col R K K) by (conclude_def Col ).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (neq H K) by (conclude lemma_inequalitysymmetric).
assert (nCol H K S) by (conclude lemma_NChelper).
assert (nCol S K H) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F G, (PG F K H G /\\ EF A B m D F K H G /\\ CongA H K F J E N /\\ OS S F K H)) by (conclude proposition_42B);destruct Tf as [F[G]];spliter.
assert (nCol D B C) by (forward_using lemma_NCorder).
assert (Triangle D B C) by (conclude_def Triangle ).
assert (Par F K H G) by (conclude_def PG ).
assert (nCol K H G) by (forward_using lemma_parallelNC).
assert (nCol H G K) by (forward_using lemma_NCorder).
assert (nCol G H K) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists M L e, (PG G H M L /\\ CongA G H M J E N /\\ EF D B e C G H M L /\\ Midpoint B e C /\\ TS M G H K)) by (conclude proposition_44);destruct Tf as [M[L[e]]];spliter.
assert (BetS B e C) by (conclude_def Midpoint ).
assert (CongA J E N G H M) by (conclude lemma_equalanglessymmetric).
assert (CongA H K F G H M) by (conclude lemma_equalanglestransitive).
assert (Par F K H G) by (conclude_def PG ).
assert (Par K F H G) by (forward_using lemma_parallelflip).
assert (neq H K) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists s, (BetS H K s /\\ Cong K s H K)) by (conclude lemma_extension);destruct Tf as [s];spliter.
assert (Par F G K H) by (conclude_def PG ).
assert (Par K H F G) by (conclude lemma_parallelsymmetric).
assert (TP K H F G) by (conclude lemma_paralleldef2B).
assert (OS F G K H) by (conclude_def TP ).
assert (RT F K H K H G) by (conclude proposition_29C).
assert (CongA G H M H K F) by (conclude lemma_equalanglessymmetric).
assert (nCol H K F) by (conclude lemma_equalanglesNC).
assert (nCol F K H) by (forward_using lemma_NCorder).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H G H M) by (conclude lemma_equalanglestransitive).
assert (RT G H M K H G) by (conclude lemma_RTcongruence).
assert (RT K H G G H M) by (conclude lemma_RTsymmetric).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (neq H G) by (forward_using lemma_NCdistinct).
assert (Out H G G) by (conclude lemma_ray4).
assert (BetS K H M) by (conclude proposition_14).
assert (neq F K) by (forward_using lemma_NCdistinct).
assert (nCol G H M) by (conclude lemma_equalanglesNC).
assert (neq G H) by (forward_using lemma_NCdistinct).
assert (Par G H M L) by (conclude_def PG ).
assert (nCol H M L) by (forward_using lemma_parallelNC).
assert (neq L M) by (forward_using lemma_NCdistinct).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (eq H H) by (conclude cn_equalityreflexive).
assert (eq M M) by (conclude cn_equalityreflexive).
assert (Col F K K) by (conclude_def Col ).
assert (Col G H H) by (conclude_def Col ).
assert (Col L M M) by (conclude_def Col ).
assert (Par F K G H) by (forward_using lemma_parallelflip).
assert (Par M L G H) by (conclude lemma_parallelsymmetric).
assert (Par L M G H) by (forward_using lemma_parallelflip).
assert (Par F K L M) by (conclude proposition_30).
assert (Par F K M L) by (forward_using lemma_parallelflip).
assert (Par F G K H) by (conclude_def PG ).
assert (Par G L H M) by (conclude_def PG ).
assert (Par F G H K) by (forward_using lemma_parallelflip).
assert (Col K H M) by (conclude_def Col ).
assert (Col H K M) by (forward_using lemma_collinearorder).
assert (neq K M) by (forward_using lemma_betweennotequal).
assert (neq M K) by (conclude lemma_inequalitysymmetric).
assert (Par F G M K) by (conclude lemma_collinearparallel).
assert (Col H M K) by (forward_using lemma_collinearorder).
assert (Par G L K M) by (conclude lemma_collinearparallel).
assert (Par G L M K) by (forward_using lemma_parallelflip).
assert (Par M K G L) by (conclude lemma_parallelsymmetric).
assert (Par M K F G) by (conclude lemma_parallelsymmetric).
assert (Par M K G F) by (forward_using lemma_parallelflip).
assert (Col G L F) by (conclude lemma_Playfair).
assert (Col G F L) by (forward_using lemma_collinearorder).
assert (nCol F L M) by (forward_using lemma_parallelNC).
assert (neq L F) by (forward_using lemma_NCdistinct).
assert (Par M K L F) by (conclude lemma_collinearparallel).
assert (Par L F M K) by (conclude lemma_parallelsymmetric).
assert (Par F L K M) by (forward_using lemma_parallelflip).
assert (PG F K M L) by (conclude_def PG ).
assert (nCol F K H) by (forward_using lemma_parallelNC).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H J E N) by (conclude lemma_equalanglestransitive).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (Out K H M) by (conclude lemma_ray4).
assert (Out K M H) by (conclude lemma_ray5).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (neq K F) by (forward_using lemma_NCdistinct).
assert (Out K F F) by (conclude lemma_ray4).

*****
H125 : Out K F F
H124 : neq K F
H123 : eq F F
H122 : Out K M H
H121 : Out K H M
H120 : neq K H
H119 : CongA F K H J E N
H118 : CongA F K H H K F
H117 : nCol F K H
H116 : PG F K M L
H115 : Par F L K M
H114 : Par L F M K
H113 : Par M K L F
H112 : neq L F
H111 : nCol F L M
H110 : Col G F L
H109 : Col G L F
H108 : Par M K G F
H107 : Par M K F G
H106 : Par M K G L
H105 : Par G L M K
H104 : Par G L K M
H103 : Col H M K
H102 : Par F G M K
H101 : neq M K
H100 : neq K M
H99 : Col H K M
H98 : Col K H M
H97 : Par F G H K
H96 : Par G L H M
H95 : Par F G K H
H94 : Par F K M L
H93 : Par F K L M
H92 : Par L M G H
H91 : Par M L G H
H90 : Par F K G H
H89 : Col L M M
H88 : Col G H H
H87 : Col F K K
H86 : eq M M
H85 : eq H H
H84 : eq K K
H83 : neq L M
H82 : nCol H M L
H81 : Par G H M L
H80 : neq G H
H79 : nCol G H M
H78 : neq F K
H77 : BetS K H M
H76 : Out H G G
H75 : neq H G
H74 : eq G G
H73 : RT K H G G H M
H72 : RT G H M K H G
H71 : CongA F K H G H M
H70 : CongA F K H H K F
H69 : nCol F K H
H68 : nCol H K F
H67 : CongA G H M H K F
H66 : RT F K H K H G
H65 : OS F G K H
H64 : TP K H F G
H63 : Par K H F G
H62 : Par F G K H
H61 : Cong K s H K
H60 : BetS H K s
s : Point
H59 : neq H K
H58 : Par K F H G
H57 : Par F K H G
H56 : CongA H K F G H M
H55 : CongA J E N G H M
H54 : BetS B e C
H53 : TS M G H K
H52 : Midpoint B e C
H51 : EF D B e C G H M L
H50 : CongA G H M J E N
H49 : PG G H M L
M,L,e : Point
H48 : nCol G H K
H47 : nCol H G K
H46 : nCol K H G
H45 : Par F K H G
H44 : Triangle D B C
H43 : nCol D B C
H42 : OS S F K H
H41 : CongA H K F J E N
H40 : EF A B m D F K H G
H39 : PG F K H G
F,G : Point
H38 : nCol S K H
H37 : nCol H K S
H36 : neq H K
H35 : neq K H
H34 : Col R K K
H33 : eq K K
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (nCol F K M) by (forward_using lemma_parallelNC).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (Col R K K) by (conclude_def Col ).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (neq H K) by (conclude lemma_inequalitysymmetric).
assert (nCol H K S) by (conclude lemma_NChelper).
assert (nCol S K H) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F G, (PG F K H G /\\ EF A B m D F K H G /\\ CongA H K F J E N /\\ OS S F K H)) by (conclude proposition_42B);destruct Tf as [F[G]];spliter.
assert (nCol D B C) by (forward_using lemma_NCorder).
assert (Triangle D B C) by (conclude_def Triangle ).
assert (Par F K H G) by (conclude_def PG ).
assert (nCol K H G) by (forward_using lemma_parallelNC).
assert (nCol H G K) by (forward_using lemma_NCorder).
assert (nCol G H K) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists M L e, (PG G H M L /\\ CongA G H M J E N /\\ EF D B e C G H M L /\\ Midpoint B e C /\\ TS M G H K)) by (conclude proposition_44);destruct Tf as [M[L[e]]];spliter.
assert (BetS B e C) by (conclude_def Midpoint ).
assert (CongA J E N G H M) by (conclude lemma_equalanglessymmetric).
assert (CongA H K F G H M) by (conclude lemma_equalanglestransitive).
assert (Par F K H G) by (conclude_def PG ).
assert (Par K F H G) by (forward_using lemma_parallelflip).
assert (neq H K) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists s, (BetS H K s /\\ Cong K s H K)) by (conclude lemma_extension);destruct Tf as [s];spliter.
assert (Par F G K H) by (conclude_def PG ).
assert (Par K H F G) by (conclude lemma_parallelsymmetric).
assert (TP K H F G) by (conclude lemma_paralleldef2B).
assert (OS F G K H) by (conclude_def TP ).
assert (RT F K H K H G) by (conclude proposition_29C).
assert (CongA G H M H K F) by (conclude lemma_equalanglessymmetric).
assert (nCol H K F) by (conclude lemma_equalanglesNC).
assert (nCol F K H) by (forward_using lemma_NCorder).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H G H M) by (conclude lemma_equalanglestransitive).
assert (RT G H M K H G) by (conclude lemma_RTcongruence).
assert (RT K H G G H M) by (conclude lemma_RTsymmetric).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (neq H G) by (forward_using lemma_NCdistinct).
assert (Out H G G) by (conclude lemma_ray4).
assert (BetS K H M) by (conclude proposition_14).
assert (neq F K) by (forward_using lemma_NCdistinct).
assert (nCol G H M) by (conclude lemma_equalanglesNC).
assert (neq G H) by (forward_using lemma_NCdistinct).
assert (Par G H M L) by (conclude_def PG ).
assert (nCol H M L) by (forward_using lemma_parallelNC).
assert (neq L M) by (forward_using lemma_NCdistinct).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (eq H H) by (conclude cn_equalityreflexive).
assert (eq M M) by (conclude cn_equalityreflexive).
assert (Col F K K) by (conclude_def Col ).
assert (Col G H H) by (conclude_def Col ).
assert (Col L M M) by (conclude_def Col ).
assert (Par F K G H) by (forward_using lemma_parallelflip).
assert (Par M L G H) by (conclude lemma_parallelsymmetric).
assert (Par L M G H) by (forward_using lemma_parallelflip).
assert (Par F K L M) by (conclude proposition_30).
assert (Par F K M L) by (forward_using lemma_parallelflip).
assert (Par F G K H) by (conclude_def PG ).
assert (Par G L H M) by (conclude_def PG ).
assert (Par F G H K) by (forward_using lemma_parallelflip).
assert (Col K H M) by (conclude_def Col ).
assert (Col H K M) by (forward_using lemma_collinearorder).
assert (neq K M) by (forward_using lemma_betweennotequal).
assert (neq M K) by (conclude lemma_inequalitysymmetric).
assert (Par F G M K) by (conclude lemma_collinearparallel).
assert (Col H M K) by (forward_using lemma_collinearorder).
assert (Par G L K M) by (conclude lemma_collinearparallel).
assert (Par G L M K) by (forward_using lemma_parallelflip).
assert (Par M K G L) by (conclude lemma_parallelsymmetric).
assert (Par M K F G) by (conclude lemma_parallelsymmetric).
assert (Par M K G F) by (forward_using lemma_parallelflip).
assert (Col G L F) by (conclude lemma_Playfair).
assert (Col G F L) by (forward_using lemma_collinearorder).
assert (nCol F L M) by (forward_using lemma_parallelNC).
assert (neq L F) by (forward_using lemma_NCdistinct).
assert (Par M K L F) by (conclude lemma_collinearparallel).
assert (Par L F M K) by (conclude lemma_parallelsymmetric).
assert (Par F L K M) by (forward_using lemma_parallelflip).
assert (PG F K M L) by (conclude_def PG ).
assert (nCol F K H) by (forward_using lemma_parallelNC).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H J E N) by (conclude lemma_equalanglestransitive).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (Out K H M) by (conclude lemma_ray4).
assert (Out K M H) by (conclude lemma_ray5).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (neq K F) by (forward_using lemma_NCdistinct).
assert (Out K F F) by (conclude lemma_ray4).
assert (nCol F K M) by (forward_using lemma_parallelNC).

*****
H126 : nCol F K M
H125 : Out K F F
H124 : neq K F
H123 : eq F F
H122 : Out K M H
H121 : Out K H M
H120 : neq K H
H119 : CongA F K H J E N
H118 : CongA F K H H K F
H117 : nCol F K H
H116 : PG F K M L
H115 : Par F L K M
H114 : Par L F M K
H113 : Par M K L F
H112 : neq L F
H111 : nCol F L M
H110 : Col G F L
H109 : Col G L F
H108 : Par M K G F
H107 : Par M K F G
H106 : Par M K G L
H105 : Par G L M K
H104 : Par G L K M
H103 : Col H M K
H102 : Par F G M K
H101 : neq M K
H100 : neq K M
H99 : Col H K M
H98 : Col K H M
H97 : Par F G H K
H96 : Par G L H M
H95 : Par F G K H
H94 : Par F K M L
H93 : Par F K L M
H92 : Par L M G H
H91 : Par M L G H
H90 : Par F K G H
H89 : Col L M M
H88 : Col G H H
H87 : Col F K K
H86 : eq M M
H85 : eq H H
H84 : eq K K
H83 : neq L M
H82 : nCol H M L
H81 : Par G H M L
H80 : neq G H
H79 : nCol G H M
H78 : neq F K
H77 : BetS K H M
H76 : Out H G G
H75 : neq H G
H74 : eq G G
H73 : RT K H G G H M
H72 : RT G H M K H G
H71 : CongA F K H G H M
H70 : CongA F K H H K F
H69 : nCol F K H
H68 : nCol H K F
H67 : CongA G H M H K F
H66 : RT F K H K H G
H65 : OS F G K H
H64 : TP K H F G
H63 : Par K H F G
H62 : Par F G K H
H61 : Cong K s H K
H60 : BetS H K s
s : Point
H59 : neq H K
H58 : Par K F H G
H57 : Par F K H G
H56 : CongA H K F G H M
H55 : CongA J E N G H M
H54 : BetS B e C
H53 : TS M G H K
H52 : Midpoint B e C
H51 : EF D B e C G H M L
H50 : CongA G H M J E N
H49 : PG G H M L
M,L,e : Point
H48 : nCol G H K
H47 : nCol H G K
H46 : nCol K H G
H45 : Par F K H G
H44 : Triangle D B C
H43 : nCol D B C
H42 : OS S F K H
H41 : CongA H K F J E N
H40 : EF A B m D F K H G
H39 : PG F K H G
F,G : Point
H38 : nCol S K H
H37 : nCol H K S
H36 : neq H K
H35 : neq K H
H34 : Col R K K
H33 : eq K K
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (CongA F K M F K M) by (conclude lemma_equalanglesreflexive).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (Col R K K) by (conclude_def Col ).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (neq H K) by (conclude lemma_inequalitysymmetric).
assert (nCol H K S) by (conclude lemma_NChelper).
assert (nCol S K H) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F G, (PG F K H G /\\ EF A B m D F K H G /\\ CongA H K F J E N /\\ OS S F K H)) by (conclude proposition_42B);destruct Tf as [F[G]];spliter.
assert (nCol D B C) by (forward_using lemma_NCorder).
assert (Triangle D B C) by (conclude_def Triangle ).
assert (Par F K H G) by (conclude_def PG ).
assert (nCol K H G) by (forward_using lemma_parallelNC).
assert (nCol H G K) by (forward_using lemma_NCorder).
assert (nCol G H K) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists M L e, (PG G H M L /\\ CongA G H M J E N /\\ EF D B e C G H M L /\\ Midpoint B e C /\\ TS M G H K)) by (conclude proposition_44);destruct Tf as [M[L[e]]];spliter.
assert (BetS B e C) by (conclude_def Midpoint ).
assert (CongA J E N G H M) by (conclude lemma_equalanglessymmetric).
assert (CongA H K F G H M) by (conclude lemma_equalanglestransitive).
assert (Par F K H G) by (conclude_def PG ).
assert (Par K F H G) by (forward_using lemma_parallelflip).
assert (neq H K) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists s, (BetS H K s /\\ Cong K s H K)) by (conclude lemma_extension);destruct Tf as [s];spliter.
assert (Par F G K H) by (conclude_def PG ).
assert (Par K H F G) by (conclude lemma_parallelsymmetric).
assert (TP K H F G) by (conclude lemma_paralleldef2B).
assert (OS F G K H) by (conclude_def TP ).
assert (RT F K H K H G) by (conclude proposition_29C).
assert (CongA G H M H K F) by (conclude lemma_equalanglessymmetric).
assert (nCol H K F) by (conclude lemma_equalanglesNC).
assert (nCol F K H) by (forward_using lemma_NCorder).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H G H M) by (conclude lemma_equalanglestransitive).
assert (RT G H M K H G) by (conclude lemma_RTcongruence).
assert (RT K H G G H M) by (conclude lemma_RTsymmetric).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (neq H G) by (forward_using lemma_NCdistinct).
assert (Out H G G) by (conclude lemma_ray4).
assert (BetS K H M) by (conclude proposition_14).
assert (neq F K) by (forward_using lemma_NCdistinct).
assert (nCol G H M) by (conclude lemma_equalanglesNC).
assert (neq G H) by (forward_using lemma_NCdistinct).
assert (Par G H M L) by (conclude_def PG ).
assert (nCol H M L) by (forward_using lemma_parallelNC).
assert (neq L M) by (forward_using lemma_NCdistinct).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (eq H H) by (conclude cn_equalityreflexive).
assert (eq M M) by (conclude cn_equalityreflexive).
assert (Col F K K) by (conclude_def Col ).
assert (Col G H H) by (conclude_def Col ).
assert (Col L M M) by (conclude_def Col ).
assert (Par F K G H) by (forward_using lemma_parallelflip).
assert (Par M L G H) by (conclude lemma_parallelsymmetric).
assert (Par L M G H) by (forward_using lemma_parallelflip).
assert (Par F K L M) by (conclude proposition_30).
assert (Par F K M L) by (forward_using lemma_parallelflip).
assert (Par F G K H) by (conclude_def PG ).
assert (Par G L H M) by (conclude_def PG ).
assert (Par F G H K) by (forward_using lemma_parallelflip).
assert (Col K H M) by (conclude_def Col ).
assert (Col H K M) by (forward_using lemma_collinearorder).
assert (neq K M) by (forward_using lemma_betweennotequal).
assert (neq M K) by (conclude lemma_inequalitysymmetric).
assert (Par F G M K) by (conclude lemma_collinearparallel).
assert (Col H M K) by (forward_using lemma_collinearorder).
assert (Par G L K M) by (conclude lemma_collinearparallel).
assert (Par G L M K) by (forward_using lemma_parallelflip).
assert (Par M K G L) by (conclude lemma_parallelsymmetric).
assert (Par M K F G) by (conclude lemma_parallelsymmetric).
assert (Par M K G F) by (forward_using lemma_parallelflip).
assert (Col G L F) by (conclude lemma_Playfair).
assert (Col G F L) by (forward_using lemma_collinearorder).
assert (nCol F L M) by (forward_using lemma_parallelNC).
assert (neq L F) by (forward_using lemma_NCdistinct).
assert (Par M K L F) by (conclude lemma_collinearparallel).
assert (Par L F M K) by (conclude lemma_parallelsymmetric).
assert (Par F L K M) by (forward_using lemma_parallelflip).
assert (PG F K M L) by (conclude_def PG ).
assert (nCol F K H) by (forward_using lemma_parallelNC).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H J E N) by (conclude lemma_equalanglestransitive).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (Out K H M) by (conclude lemma_ray4).
assert (Out K M H) by (conclude lemma_ray5).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (neq K F) by (forward_using lemma_NCdistinct).
assert (Out K F F) by (conclude lemma_ray4).
assert (nCol F K M) by (forward_using lemma_parallelNC).
assert (CongA F K M F K M) by (conclude lemma_equalanglesreflexive).

*****
H127 : CongA F K M F K M
H126 : nCol F K M
H125 : Out K F F
H124 : neq K F
H123 : eq F F
H122 : Out K M H
H121 : Out K H M
H120 : neq K H
H119 : CongA F K H J E N
H118 : CongA F K H H K F
H117 : nCol F K H
H116 : PG F K M L
H115 : Par F L K M
H114 : Par L F M K
H113 : Par M K L F
H112 : neq L F
H111 : nCol F L M
H110 : Col G F L
H109 : Col G L F
H108 : Par M K G F
H107 : Par M K F G
H106 : Par M K G L
H105 : Par G L M K
H104 : Par G L K M
H103 : Col H M K
H102 : Par F G M K
H101 : neq M K
H100 : neq K M
H99 : Col H K M
H98 : Col K H M
H97 : Par F G H K
H96 : Par G L H M
H95 : Par F G K H
H94 : Par F K M L
H93 : Par F K L M
H92 : Par L M G H
H91 : Par M L G H
H90 : Par F K G H
H89 : Col L M M
H88 : Col G H H
H87 : Col F K K
H86 : eq M M
H85 : eq H H
H84 : eq K K
H83 : neq L M
H82 : nCol H M L
H81 : Par G H M L
H80 : neq G H
H79 : nCol G H M
H78 : neq F K
H77 : BetS K H M
H76 : Out H G G
H75 : neq H G
H74 : eq G G
H73 : RT K H G G H M
H72 : RT G H M K H G
H71 : CongA F K H G H M
H70 : CongA F K H H K F
H69 : nCol F K H
H68 : nCol H K F
H67 : CongA G H M H K F
H66 : RT F K H K H G
H65 : OS F G K H
H64 : TP K H F G
H63 : Par K H F G
H62 : Par F G K H
H61 : Cong K s H K
H60 : BetS H K s
s : Point
H59 : neq H K
H58 : Par K F H G
H57 : Par F K H G
H56 : CongA H K F G H M
H55 : CongA J E N G H M
H54 : BetS B e C
H53 : TS M G H K
H52 : Midpoint B e C
H51 : EF D B e C G H M L
H50 : CongA G H M J E N
H49 : PG G H M L
M,L,e : Point
H48 : nCol G H K
H47 : nCol H G K
H46 : nCol K H G
H45 : Par F K H G
H44 : Triangle D B C
H43 : nCol D B C
H42 : OS S F K H
H41 : CongA H K F J E N
H40 : EF A B m D F K H G
H39 : PG F K H G
F,G : Point
H38 : nCol S K H
H37 : nCol H K S
H36 : neq H K
H35 : neq K H
H34 : Col R K K
H33 : eq K K
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (CongA F K M F K H) by (conclude lemma_equalangleshelper).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (Col R K K) by (conclude_def Col ).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (neq H K) by (conclude lemma_inequalitysymmetric).
assert (nCol H K S) by (conclude lemma_NChelper).
assert (nCol S K H) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F G, (PG F K H G /\\ EF A B m D F K H G /\\ CongA H K F J E N /\\ OS S F K H)) by (conclude proposition_42B);destruct Tf as [F[G]];spliter.
assert (nCol D B C) by (forward_using lemma_NCorder).
assert (Triangle D B C) by (conclude_def Triangle ).
assert (Par F K H G) by (conclude_def PG ).
assert (nCol K H G) by (forward_using lemma_parallelNC).
assert (nCol H G K) by (forward_using lemma_NCorder).
assert (nCol G H K) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists M L e, (PG G H M L /\\ CongA G H M J E N /\\ EF D B e C G H M L /\\ Midpoint B e C /\\ TS M G H K)) by (conclude proposition_44);destruct Tf as [M[L[e]]];spliter.
assert (BetS B e C) by (conclude_def Midpoint ).
assert (CongA J E N G H M) by (conclude lemma_equalanglessymmetric).
assert (CongA H K F G H M) by (conclude lemma_equalanglestransitive).
assert (Par F K H G) by (conclude_def PG ).
assert (Par K F H G) by (forward_using lemma_parallelflip).
assert (neq H K) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists s, (BetS H K s /\\ Cong K s H K)) by (conclude lemma_extension);destruct Tf as [s];spliter.
assert (Par F G K H) by (conclude_def PG ).
assert (Par K H F G) by (conclude lemma_parallelsymmetric).
assert (TP K H F G) by (conclude lemma_paralleldef2B).
assert (OS F G K H) by (conclude_def TP ).
assert (RT F K H K H G) by (conclude proposition_29C).
assert (CongA G H M H K F) by (conclude lemma_equalanglessymmetric).
assert (nCol H K F) by (conclude lemma_equalanglesNC).
assert (nCol F K H) by (forward_using lemma_NCorder).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H G H M) by (conclude lemma_equalanglestransitive).
assert (RT G H M K H G) by (conclude lemma_RTcongruence).
assert (RT K H G G H M) by (conclude lemma_RTsymmetric).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (neq H G) by (forward_using lemma_NCdistinct).
assert (Out H G G) by (conclude lemma_ray4).
assert (BetS K H M) by (conclude proposition_14).
assert (neq F K) by (forward_using lemma_NCdistinct).
assert (nCol G H M) by (conclude lemma_equalanglesNC).
assert (neq G H) by (forward_using lemma_NCdistinct).
assert (Par G H M L) by (conclude_def PG ).
assert (nCol H M L) by (forward_using lemma_parallelNC).
assert (neq L M) by (forward_using lemma_NCdistinct).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (eq H H) by (conclude cn_equalityreflexive).
assert (eq M M) by (conclude cn_equalityreflexive).
assert (Col F K K) by (conclude_def Col ).
assert (Col G H H) by (conclude_def Col ).
assert (Col L M M) by (conclude_def Col ).
assert (Par F K G H) by (forward_using lemma_parallelflip).
assert (Par M L G H) by (conclude lemma_parallelsymmetric).
assert (Par L M G H) by (forward_using lemma_parallelflip).
assert (Par F K L M) by (conclude proposition_30).
assert (Par F K M L) by (forward_using lemma_parallelflip).
assert (Par F G K H) by (conclude_def PG ).
assert (Par G L H M) by (conclude_def PG ).
assert (Par F G H K) by (forward_using lemma_parallelflip).
assert (Col K H M) by (conclude_def Col ).
assert (Col H K M) by (forward_using lemma_collinearorder).
assert (neq K M) by (forward_using lemma_betweennotequal).
assert (neq M K) by (conclude lemma_inequalitysymmetric).
assert (Par F G M K) by (conclude lemma_collinearparallel).
assert (Col H M K) by (forward_using lemma_collinearorder).
assert (Par G L K M) by (conclude lemma_collinearparallel).
assert (Par G L M K) by (forward_using lemma_parallelflip).
assert (Par M K G L) by (conclude lemma_parallelsymmetric).
assert (Par M K F G) by (conclude lemma_parallelsymmetric).
assert (Par M K G F) by (forward_using lemma_parallelflip).
assert (Col G L F) by (conclude lemma_Playfair).
assert (Col G F L) by (forward_using lemma_collinearorder).
assert (nCol F L M) by (forward_using lemma_parallelNC).
assert (neq L F) by (forward_using lemma_NCdistinct).
assert (Par M K L F) by (conclude lemma_collinearparallel).
assert (Par L F M K) by (conclude lemma_parallelsymmetric).
assert (Par F L K M) by (forward_using lemma_parallelflip).
assert (PG F K M L) by (conclude_def PG ).
assert (nCol F K H) by (forward_using lemma_parallelNC).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H J E N) by (conclude lemma_equalanglestransitive).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (Out K H M) by (conclude lemma_ray4).
assert (Out K M H) by (conclude lemma_ray5).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (neq K F) by (forward_using lemma_NCdistinct).
assert (Out K F F) by (conclude lemma_ray4).
assert (nCol F K M) by (forward_using lemma_parallelNC).
assert (CongA F K M F K M) by (conclude lemma_equalanglesreflexive).
assert (CongA F K M F K H) by (conclude lemma_equalangleshelper).

*****
H128 : CongA F K M F K H
H127 : CongA F K M F K M
H126 : nCol F K M
H125 : Out K F F
H124 : neq K F
H123 : eq F F
H122 : Out K M H
H121 : Out K H M
H120 : neq K H
H119 : CongA F K H J E N
H118 : CongA F K H H K F
H117 : nCol F K H
H116 : PG F K M L
H115 : Par F L K M
H114 : Par L F M K
H113 : Par M K L F
H112 : neq L F
H111 : nCol F L M
H110 : Col G F L
H109 : Col G L F
H108 : Par M K G F
H107 : Par M K F G
H106 : Par M K G L
H105 : Par G L M K
H104 : Par G L K M
H103 : Col H M K
H102 : Par F G M K
H101 : neq M K
H100 : neq K M
H99 : Col H K M
H98 : Col K H M
H97 : Par F G H K
H96 : Par G L H M
H95 : Par F G K H
H94 : Par F K M L
H93 : Par F K L M
H92 : Par L M G H
H91 : Par M L G H
H90 : Par F K G H
H89 : Col L M M
H88 : Col G H H
H87 : Col F K K
H86 : eq M M
H85 : eq H H
H84 : eq K K
H83 : neq L M
H82 : nCol H M L
H81 : Par G H M L
H80 : neq G H
H79 : nCol G H M
H78 : neq F K
H77 : BetS K H M
H76 : Out H G G
H75 : neq H G
H74 : eq G G
H73 : RT K H G G H M
H72 : RT G H M K H G
H71 : CongA F K H G H M
H70 : CongA F K H H K F
H69 : nCol F K H
H68 : nCol H K F
H67 : CongA G H M H K F
H66 : RT F K H K H G
H65 : OS F G K H
H64 : TP K H F G
H63 : Par K H F G
H62 : Par F G K H
H61 : Cong K s H K
H60 : BetS H K s
s : Point
H59 : neq H K
H58 : Par K F H G
H57 : Par F K H G
H56 : CongA H K F G H M
H55 : CongA J E N G H M
H54 : BetS B e C
H53 : TS M G H K
H52 : Midpoint B e C
H51 : EF D B e C G H M L
H50 : CongA G H M J E N
H49 : PG G H M L
M,L,e : Point
H48 : nCol G H K
H47 : nCol H G K
H46 : nCol K H G
H45 : Par F K H G
H44 : Triangle D B C
H43 : nCol D B C
H42 : OS S F K H
H41 : CongA H K F J E N
H40 : EF A B m D F K H G
H39 : PG F K H G
F,G : Point
H38 : nCol S K H
H37 : nCol H K S
H36 : neq H K
H35 : neq K H
H34 : Col R K K
H33 : eq K K
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (CongA F K M J E N) by (conclude lemma_equalanglestransitive).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (Col R K K) by (conclude_def Col ).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (neq H K) by (conclude lemma_inequalitysymmetric).
assert (nCol H K S) by (conclude lemma_NChelper).
assert (nCol S K H) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F G, (PG F K H G /\\ EF A B m D F K H G /\\ CongA H K F J E N /\\ OS S F K H)) by (conclude proposition_42B);destruct Tf as [F[G]];spliter.
assert (nCol D B C) by (forward_using lemma_NCorder).
assert (Triangle D B C) by (conclude_def Triangle ).
assert (Par F K H G) by (conclude_def PG ).
assert (nCol K H G) by (forward_using lemma_parallelNC).
assert (nCol H G K) by (forward_using lemma_NCorder).
assert (nCol G H K) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists M L e, (PG G H M L /\\ CongA G H M J E N /\\ EF D B e C G H M L /\\ Midpoint B e C /\\ TS M G H K)) by (conclude proposition_44);destruct Tf as [M[L[e]]];spliter.
assert (BetS B e C) by (conclude_def Midpoint ).
assert (CongA J E N G H M) by (conclude lemma_equalanglessymmetric).
assert (CongA H K F G H M) by (conclude lemma_equalanglestransitive).
assert (Par F K H G) by (conclude_def PG ).
assert (Par K F H G) by (forward_using lemma_parallelflip).
assert (neq H K) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists s, (BetS H K s /\\ Cong K s H K)) by (conclude lemma_extension);destruct Tf as [s];spliter.
assert (Par F G K H) by (conclude_def PG ).
assert (Par K H F G) by (conclude lemma_parallelsymmetric).
assert (TP K H F G) by (conclude lemma_paralleldef2B).
assert (OS F G K H) by (conclude_def TP ).
assert (RT F K H K H G) by (conclude proposition_29C).
assert (CongA G H M H K F) by (conclude lemma_equalanglessymmetric).
assert (nCol H K F) by (conclude lemma_equalanglesNC).
assert (nCol F K H) by (forward_using lemma_NCorder).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H G H M) by (conclude lemma_equalanglestransitive).
assert (RT G H M K H G) by (conclude lemma_RTcongruence).
assert (RT K H G G H M) by (conclude lemma_RTsymmetric).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (neq H G) by (forward_using lemma_NCdistinct).
assert (Out H G G) by (conclude lemma_ray4).
assert (BetS K H M) by (conclude proposition_14).
assert (neq F K) by (forward_using lemma_NCdistinct).
assert (nCol G H M) by (conclude lemma_equalanglesNC).
assert (neq G H) by (forward_using lemma_NCdistinct).
assert (Par G H M L) by (conclude_def PG ).
assert (nCol H M L) by (forward_using lemma_parallelNC).
assert (neq L M) by (forward_using lemma_NCdistinct).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (eq H H) by (conclude cn_equalityreflexive).
assert (eq M M) by (conclude cn_equalityreflexive).
assert (Col F K K) by (conclude_def Col ).
assert (Col G H H) by (conclude_def Col ).
assert (Col L M M) by (conclude_def Col ).
assert (Par F K G H) by (forward_using lemma_parallelflip).
assert (Par M L G H) by (conclude lemma_parallelsymmetric).
assert (Par L M G H) by (forward_using lemma_parallelflip).
assert (Par F K L M) by (conclude proposition_30).
assert (Par F K M L) by (forward_using lemma_parallelflip).
assert (Par F G K H) by (conclude_def PG ).
assert (Par G L H M) by (conclude_def PG ).
assert (Par F G H K) by (forward_using lemma_parallelflip).
assert (Col K H M) by (conclude_def Col ).
assert (Col H K M) by (forward_using lemma_collinearorder).
assert (neq K M) by (forward_using lemma_betweennotequal).
assert (neq M K) by (conclude lemma_inequalitysymmetric).
assert (Par F G M K) by (conclude lemma_collinearparallel).
assert (Col H M K) by (forward_using lemma_collinearorder).
assert (Par G L K M) by (conclude lemma_collinearparallel).
assert (Par G L M K) by (forward_using lemma_parallelflip).
assert (Par M K G L) by (conclude lemma_parallelsymmetric).
assert (Par M K F G) by (conclude lemma_parallelsymmetric).
assert (Par M K G F) by (forward_using lemma_parallelflip).
assert (Col G L F) by (conclude lemma_Playfair).
assert (Col G F L) by (forward_using lemma_collinearorder).
assert (nCol F L M) by (forward_using lemma_parallelNC).
assert (neq L F) by (forward_using lemma_NCdistinct).
assert (Par M K L F) by (conclude lemma_collinearparallel).
assert (Par L F M K) by (conclude lemma_parallelsymmetric).
assert (Par F L K M) by (forward_using lemma_parallelflip).
assert (PG F K M L) by (conclude_def PG ).
assert (nCol F K H) by (forward_using lemma_parallelNC).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H J E N) by (conclude lemma_equalanglestransitive).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (Out K H M) by (conclude lemma_ray4).
assert (Out K M H) by (conclude lemma_ray5).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (neq K F) by (forward_using lemma_NCdistinct).
assert (Out K F F) by (conclude lemma_ray4).
assert (nCol F K M) by (forward_using lemma_parallelNC).
assert (CongA F K M F K M) by (conclude lemma_equalanglesreflexive).
assert (CongA F K M F K H) by (conclude lemma_equalangleshelper).
assert (CongA F K M J E N) by (conclude lemma_equalanglestransitive).

*****
H129 : CongA F K M J E N
H128 : CongA F K M F K H
H127 : CongA F K M F K M
H126 : nCol F K M
H125 : Out K F F
H124 : neq K F
H123 : eq F F
H122 : Out K M H
H121 : Out K H M
H120 : neq K H
H119 : CongA F K H J E N
H118 : CongA F K H H K F
H117 : nCol F K H
H116 : PG F K M L
H115 : Par F L K M
H114 : Par L F M K
H113 : Par M K L F
H112 : neq L F
H111 : nCol F L M
H110 : Col G F L
H109 : Col G L F
H108 : Par M K G F
H107 : Par M K F G
H106 : Par M K G L
H105 : Par G L M K
H104 : Par G L K M
H103 : Col H M K
H102 : Par F G M K
H101 : neq M K
H100 : neq K M
H99 : Col H K M
H98 : Col K H M
H97 : Par F G H K
H96 : Par G L H M
H95 : Par F G K H
H94 : Par F K M L
H93 : Par F K L M
H92 : Par L M G H
H91 : Par M L G H
H90 : Par F K G H
H89 : Col L M M
H88 : Col G H H
H87 : Col F K K
H86 : eq M M
H85 : eq H H
H84 : eq K K
H83 : neq L M
H82 : nCol H M L
H81 : Par G H M L
H80 : neq G H
H79 : nCol G H M
H78 : neq F K
H77 : BetS K H M
H76 : Out H G G
H75 : neq H G
H74 : eq G G
H73 : RT K H G G H M
H72 : RT G H M K H G
H71 : CongA F K H G H M
H70 : CongA F K H H K F
H69 : nCol F K H
H68 : nCol H K F
H67 : CongA G H M H K F
H66 : RT F K H K H G
H65 : OS F G K H
H64 : TP K H F G
H63 : Par K H F G
H62 : Par F G K H
H61 : Cong K s H K
H60 : BetS H K s
s : Point
H59 : neq H K
H58 : Par K F H G
H57 : Par F K H G
H56 : CongA H K F G H M
H55 : CongA J E N G H M
H54 : BetS B e C
H53 : TS M G H K
H52 : Midpoint B e C
H51 : EF D B e C G H M L
H50 : CongA G H M J E N
H49 : PG G H M L
M,L,e : Point
H48 : nCol G H K
H47 : nCol H G K
H46 : nCol K H G
H45 : Par F K H G
H44 : Triangle D B C
H43 : nCol D B C
H42 : OS S F K H
H41 : CongA H K F J E N
H40 : EF A B m D F K H G
H39 : PG F K H G
F,G : Point
H38 : nCol S K H
H37 : nCol H K S
H36 : neq H K
H35 : neq K H
H34 : Col R K K
H33 : eq K K
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (Col B O D) by (conclude_def Col ).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (Col R K K) by (conclude_def Col ).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (neq H K) by (conclude lemma_inequalitysymmetric).
assert (nCol H K S) by (conclude lemma_NChelper).
assert (nCol S K H) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F G, (PG F K H G /\\ EF A B m D F K H G /\\ CongA H K F J E N /\\ OS S F K H)) by (conclude proposition_42B);destruct Tf as [F[G]];spliter.
assert (nCol D B C) by (forward_using lemma_NCorder).
assert (Triangle D B C) by (conclude_def Triangle ).
assert (Par F K H G) by (conclude_def PG ).
assert (nCol K H G) by (forward_using lemma_parallelNC).
assert (nCol H G K) by (forward_using lemma_NCorder).
assert (nCol G H K) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists M L e, (PG G H M L /\\ CongA G H M J E N /\\ EF D B e C G H M L /\\ Midpoint B e C /\\ TS M G H K)) by (conclude proposition_44);destruct Tf as [M[L[e]]];spliter.
assert (BetS B e C) by (conclude_def Midpoint ).
assert (CongA J E N G H M) by (conclude lemma_equalanglessymmetric).
assert (CongA H K F G H M) by (conclude lemma_equalanglestransitive).
assert (Par F K H G) by (conclude_def PG ).
assert (Par K F H G) by (forward_using lemma_parallelflip).
assert (neq H K) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists s, (BetS H K s /\\ Cong K s H K)) by (conclude lemma_extension);destruct Tf as [s];spliter.
assert (Par F G K H) by (conclude_def PG ).
assert (Par K H F G) by (conclude lemma_parallelsymmetric).
assert (TP K H F G) by (conclude lemma_paralleldef2B).
assert (OS F G K H) by (conclude_def TP ).
assert (RT F K H K H G) by (conclude proposition_29C).
assert (CongA G H M H K F) by (conclude lemma_equalanglessymmetric).
assert (nCol H K F) by (conclude lemma_equalanglesNC).
assert (nCol F K H) by (forward_using lemma_NCorder).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H G H M) by (conclude lemma_equalanglestransitive).
assert (RT G H M K H G) by (conclude lemma_RTcongruence).
assert (RT K H G G H M) by (conclude lemma_RTsymmetric).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (neq H G) by (forward_using lemma_NCdistinct).
assert (Out H G G) by (conclude lemma_ray4).
assert (BetS K H M) by (conclude proposition_14).
assert (neq F K) by (forward_using lemma_NCdistinct).
assert (nCol G H M) by (conclude lemma_equalanglesNC).
assert (neq G H) by (forward_using lemma_NCdistinct).
assert (Par G H M L) by (conclude_def PG ).
assert (nCol H M L) by (forward_using lemma_parallelNC).
assert (neq L M) by (forward_using lemma_NCdistinct).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (eq H H) by (conclude cn_equalityreflexive).
assert (eq M M) by (conclude cn_equalityreflexive).
assert (Col F K K) by (conclude_def Col ).
assert (Col G H H) by (conclude_def Col ).
assert (Col L M M) by (conclude_def Col ).
assert (Par F K G H) by (forward_using lemma_parallelflip).
assert (Par M L G H) by (conclude lemma_parallelsymmetric).
assert (Par L M G H) by (forward_using lemma_parallelflip).
assert (Par F K L M) by (conclude proposition_30).
assert (Par F K M L) by (forward_using lemma_parallelflip).
assert (Par F G K H) by (conclude_def PG ).
assert (Par G L H M) by (conclude_def PG ).
assert (Par F G H K) by (forward_using lemma_parallelflip).
assert (Col K H M) by (conclude_def Col ).
assert (Col H K M) by (forward_using lemma_collinearorder).
assert (neq K M) by (forward_using lemma_betweennotequal).
assert (neq M K) by (conclude lemma_inequalitysymmetric).
assert (Par F G M K) by (conclude lemma_collinearparallel).
assert (Col H M K) by (forward_using lemma_collinearorder).
assert (Par G L K M) by (conclude lemma_collinearparallel).
assert (Par G L M K) by (forward_using lemma_parallelflip).
assert (Par M K G L) by (conclude lemma_parallelsymmetric).
assert (Par M K F G) by (conclude lemma_parallelsymmetric).
assert (Par M K G F) by (forward_using lemma_parallelflip).
assert (Col G L F) by (conclude lemma_Playfair).
assert (Col G F L) by (forward_using lemma_collinearorder).
assert (nCol F L M) by (forward_using lemma_parallelNC).
assert (neq L F) by (forward_using lemma_NCdistinct).
assert (Par M K L F) by (conclude lemma_collinearparallel).
assert (Par L F M K) by (conclude lemma_parallelsymmetric).
assert (Par F L K M) by (forward_using lemma_parallelflip).
assert (PG F K M L) by (conclude_def PG ).
assert (nCol F K H) by (forward_using lemma_parallelNC).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H J E N) by (conclude lemma_equalanglestransitive).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (Out K H M) by (conclude lemma_ray4).
assert (Out K M H) by (conclude lemma_ray5).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (neq K F) by (forward_using lemma_NCdistinct).
assert (Out K F F) by (conclude lemma_ray4).
assert (nCol F K M) by (forward_using lemma_parallelNC).
assert (CongA F K M F K M) by (conclude lemma_equalanglesreflexive).
assert (CongA F K M F K H) by (conclude lemma_equalangleshelper).
assert (CongA F K M J E N) by (conclude lemma_equalanglestransitive).
assert (Col B O D) by (conclude_def Col ).

*****
H130 : Col B O D
H129 : CongA F K M J E N
H128 : CongA F K M F K H
H127 : CongA F K M F K M
H126 : nCol F K M
H125 : Out K F F
H124 : neq K F
H123 : eq F F
H122 : Out K M H
H121 : Out K H M
H120 : neq K H
H119 : CongA F K H J E N
H118 : CongA F K H H K F
H117 : nCol F K H
H116 : PG F K M L
H115 : Par F L K M
H114 : Par L F M K
H113 : Par M K L F
H112 : neq L F
H111 : nCol F L M
H110 : Col G F L
H109 : Col G L F
H108 : Par M K G F
H107 : Par M K F G
H106 : Par M K G L
H105 : Par G L M K
H104 : Par G L K M
H103 : Col H M K
H102 : Par F G M K
H101 : neq M K
H100 : neq K M
H99 : Col H K M
H98 : Col K H M
H97 : Par F G H K
H96 : Par G L H M
H95 : Par F G K H
H94 : Par F K M L
H93 : Par F K L M
H92 : Par L M G H
H91 : Par M L G H
H90 : Par F K G H
H89 : Col L M M
H88 : Col G H H
H87 : Col F K K
H86 : eq M M
H85 : eq H H
H84 : eq K K
H83 : neq L M
H82 : nCol H M L
H81 : Par G H M L
H80 : neq G H
H79 : nCol G H M
H78 : neq F K
H77 : BetS K H M
H76 : Out H G G
H75 : neq H G
H74 : eq G G
H73 : RT K H G G H M
H72 : RT G H M K H G
H71 : CongA F K H G H M
H70 : CongA F K H H K F
H69 : nCol F K H
H68 : nCol H K F
H67 : CongA G H M H K F
H66 : RT F K H K H G
H65 : OS F G K H
H64 : TP K H F G
H63 : Par K H F G
H62 : Par F G K H
H61 : Cong K s H K
H60 : BetS H K s
s : Point
H59 : neq H K
H58 : Par K F H G
H57 : Par F K H G
H56 : CongA H K F G H M
H55 : CongA J E N G H M
H54 : BetS B e C
H53 : TS M G H K
H52 : Midpoint B e C
H51 : EF D B e C G H M L
H50 : CongA G H M J E N
H49 : PG G H M L
M,L,e : Point
H48 : nCol G H K
H47 : nCol H G K
H46 : nCol K H G
H45 : Par F K H G
H44 : Triangle D B C
H43 : nCol D B C
H42 : OS S F K H
H41 : CongA H K F J E N
H40 : EF A B m D F K H G
H39 : PG F K H G
F,G : Point
H38 : nCol S K H
H37 : nCol H K S
H36 : neq H K
H35 : neq K H
H34 : Col R K K
H33 : eq K K
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (Col B D O) by (forward_using lemma_collinearorder).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (Col R K K) by (conclude_def Col ).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (neq H K) by (conclude lemma_inequalitysymmetric).
assert (nCol H K S) by (conclude lemma_NChelper).
assert (nCol S K H) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F G, (PG F K H G /\\ EF A B m D F K H G /\\ CongA H K F J E N /\\ OS S F K H)) by (conclude proposition_42B);destruct Tf as [F[G]];spliter.
assert (nCol D B C) by (forward_using lemma_NCorder).
assert (Triangle D B C) by (conclude_def Triangle ).
assert (Par F K H G) by (conclude_def PG ).
assert (nCol K H G) by (forward_using lemma_parallelNC).
assert (nCol H G K) by (forward_using lemma_NCorder).
assert (nCol G H K) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists M L e, (PG G H M L /\\ CongA G H M J E N /\\ EF D B e C G H M L /\\ Midpoint B e C /\\ TS M G H K)) by (conclude proposition_44);destruct Tf as [M[L[e]]];spliter.
assert (BetS B e C) by (conclude_def Midpoint ).
assert (CongA J E N G H M) by (conclude lemma_equalanglessymmetric).
assert (CongA H K F G H M) by (conclude lemma_equalanglestransitive).
assert (Par F K H G) by (conclude_def PG ).
assert (Par K F H G) by (forward_using lemma_parallelflip).
assert (neq H K) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists s, (BetS H K s /\\ Cong K s H K)) by (conclude lemma_extension);destruct Tf as [s];spliter.
assert (Par F G K H) by (conclude_def PG ).
assert (Par K H F G) by (conclude lemma_parallelsymmetric).
assert (TP K H F G) by (conclude lemma_paralleldef2B).
assert (OS F G K H) by (conclude_def TP ).
assert (RT F K H K H G) by (conclude proposition_29C).
assert (CongA G H M H K F) by (conclude lemma_equalanglessymmetric).
assert (nCol H K F) by (conclude lemma_equalanglesNC).
assert (nCol F K H) by (forward_using lemma_NCorder).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H G H M) by (conclude lemma_equalanglestransitive).
assert (RT G H M K H G) by (conclude lemma_RTcongruence).
assert (RT K H G G H M) by (conclude lemma_RTsymmetric).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (neq H G) by (forward_using lemma_NCdistinct).
assert (Out H G G) by (conclude lemma_ray4).
assert (BetS K H M) by (conclude proposition_14).
assert (neq F K) by (forward_using lemma_NCdistinct).
assert (nCol G H M) by (conclude lemma_equalanglesNC).
assert (neq G H) by (forward_using lemma_NCdistinct).
assert (Par G H M L) by (conclude_def PG ).
assert (nCol H M L) by (forward_using lemma_parallelNC).
assert (neq L M) by (forward_using lemma_NCdistinct).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (eq H H) by (conclude cn_equalityreflexive).
assert (eq M M) by (conclude cn_equalityreflexive).
assert (Col F K K) by (conclude_def Col ).
assert (Col G H H) by (conclude_def Col ).
assert (Col L M M) by (conclude_def Col ).
assert (Par F K G H) by (forward_using lemma_parallelflip).
assert (Par M L G H) by (conclude lemma_parallelsymmetric).
assert (Par L M G H) by (forward_using lemma_parallelflip).
assert (Par F K L M) by (conclude proposition_30).
assert (Par F K M L) by (forward_using lemma_parallelflip).
assert (Par F G K H) by (conclude_def PG ).
assert (Par G L H M) by (conclude_def PG ).
assert (Par F G H K) by (forward_using lemma_parallelflip).
assert (Col K H M) by (conclude_def Col ).
assert (Col H K M) by (forward_using lemma_collinearorder).
assert (neq K M) by (forward_using lemma_betweennotequal).
assert (neq M K) by (conclude lemma_inequalitysymmetric).
assert (Par F G M K) by (conclude lemma_collinearparallel).
assert (Col H M K) by (forward_using lemma_collinearorder).
assert (Par G L K M) by (conclude lemma_collinearparallel).
assert (Par G L M K) by (forward_using lemma_parallelflip).
assert (Par M K G L) by (conclude lemma_parallelsymmetric).
assert (Par M K F G) by (conclude lemma_parallelsymmetric).
assert (Par M K G F) by (forward_using lemma_parallelflip).
assert (Col G L F) by (conclude lemma_Playfair).
assert (Col G F L) by (forward_using lemma_collinearorder).
assert (nCol F L M) by (forward_using lemma_parallelNC).
assert (neq L F) by (forward_using lemma_NCdistinct).
assert (Par M K L F) by (conclude lemma_collinearparallel).
assert (Par L F M K) by (conclude lemma_parallelsymmetric).
assert (Par F L K M) by (forward_using lemma_parallelflip).
assert (PG F K M L) by (conclude_def PG ).
assert (nCol F K H) by (forward_using lemma_parallelNC).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H J E N) by (conclude lemma_equalanglestransitive).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (Out K H M) by (conclude lemma_ray4).
assert (Out K M H) by (conclude lemma_ray5).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (neq K F) by (forward_using lemma_NCdistinct).
assert (Out K F F) by (conclude lemma_ray4).
assert (nCol F K M) by (forward_using lemma_parallelNC).
assert (CongA F K M F K M) by (conclude lemma_equalanglesreflexive).
assert (CongA F K M F K H) by (conclude lemma_equalangleshelper).
assert (CongA F K M J E N) by (conclude lemma_equalanglestransitive).
assert (Col B O D) by (conclude_def Col ).
assert (Col B D O) by (forward_using lemma_collinearorder).

*****
H131 : Col B D O
H130 : Col B O D
H129 : CongA F K M J E N
H128 : CongA F K M F K H
H127 : CongA F K M F K M
H126 : nCol F K M
H125 : Out K F F
H124 : neq K F
H123 : eq F F
H122 : Out K M H
H121 : Out K H M
H120 : neq K H
H119 : CongA F K H J E N
H118 : CongA F K H H K F
H117 : nCol F K H
H116 : PG F K M L
H115 : Par F L K M
H114 : Par L F M K
H113 : Par M K L F
H112 : neq L F
H111 : nCol F L M
H110 : Col G F L
H109 : Col G L F
H108 : Par M K G F
H107 : Par M K F G
H106 : Par M K G L
H105 : Par G L M K
H104 : Par G L K M
H103 : Col H M K
H102 : Par F G M K
H101 : neq M K
H100 : neq K M
H99 : Col H K M
H98 : Col K H M
H97 : Par F G H K
H96 : Par G L H M
H95 : Par F G K H
H94 : Par F K M L
H93 : Par F K L M
H92 : Par L M G H
H91 : Par M L G H
H90 : Par F K G H
H89 : Col L M M
H88 : Col G H H
H87 : Col F K K
H86 : eq M M
H85 : eq H H
H84 : eq K K
H83 : neq L M
H82 : nCol H M L
H81 : Par G H M L
H80 : neq G H
H79 : nCol G H M
H78 : neq F K
H77 : BetS K H M
H76 : Out H G G
H75 : neq H G
H74 : eq G G
H73 : RT K H G G H M
H72 : RT G H M K H G
H71 : CongA F K H G H M
H70 : CongA F K H H K F
H69 : nCol F K H
H68 : nCol H K F
H67 : CongA G H M H K F
H66 : RT F K H K H G
H65 : OS F G K H
H64 : TP K H F G
H63 : Par K H F G
H62 : Par F G K H
H61 : Cong K s H K
H60 : BetS H K s
s : Point
H59 : neq H K
H58 : Par K F H G
H57 : Par F K H G
H56 : CongA H K F G H M
H55 : CongA J E N G H M
H54 : BetS B e C
H53 : TS M G H K
H52 : Midpoint B e C
H51 : EF D B e C G H M L
H50 : CongA G H M J E N
H49 : PG G H M L
M,L,e : Point
H48 : nCol G H K
H47 : nCol H G K
H46 : nCol K H G
H45 : Par F K H G
H44 : Triangle D B C
H43 : nCol D B C
H42 : OS S F K H
H41 : CongA H K F J E N
H40 : EF A B m D F K H G
H39 : PG F K H G
F,G : Point
H38 : nCol S K H
H37 : nCol H K S
H36 : neq H K
H35 : neq K H
H34 : Col R K K
H33 : eq K K
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (nCol B D A) by (forward_using lemma_NCorder).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (Col R K K) by (conclude_def Col ).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (neq H K) by (conclude lemma_inequalitysymmetric).
assert (nCol H K S) by (conclude lemma_NChelper).
assert (nCol S K H) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F G, (PG F K H G /\\ EF A B m D F K H G /\\ CongA H K F J E N /\\ OS S F K H)) by (conclude proposition_42B);destruct Tf as [F[G]];spliter.
assert (nCol D B C) by (forward_using lemma_NCorder).
assert (Triangle D B C) by (conclude_def Triangle ).
assert (Par F K H G) by (conclude_def PG ).
assert (nCol K H G) by (forward_using lemma_parallelNC).
assert (nCol H G K) by (forward_using lemma_NCorder).
assert (nCol G H K) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists M L e, (PG G H M L /\\ CongA G H M J E N /\\ EF D B e C G H M L /\\ Midpoint B e C /\\ TS M G H K)) by (conclude proposition_44);destruct Tf as [M[L[e]]];spliter.
assert (BetS B e C) by (conclude_def Midpoint ).
assert (CongA J E N G H M) by (conclude lemma_equalanglessymmetric).
assert (CongA H K F G H M) by (conclude lemma_equalanglestransitive).
assert (Par F K H G) by (conclude_def PG ).
assert (Par K F H G) by (forward_using lemma_parallelflip).
assert (neq H K) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists s, (BetS H K s /\\ Cong K s H K)) by (conclude lemma_extension);destruct Tf as [s];spliter.
assert (Par F G K H) by (conclude_def PG ).
assert (Par K H F G) by (conclude lemma_parallelsymmetric).
assert (TP K H F G) by (conclude lemma_paralleldef2B).
assert (OS F G K H) by (conclude_def TP ).
assert (RT F K H K H G) by (conclude proposition_29C).
assert (CongA G H M H K F) by (conclude lemma_equalanglessymmetric).
assert (nCol H K F) by (conclude lemma_equalanglesNC).
assert (nCol F K H) by (forward_using lemma_NCorder).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H G H M) by (conclude lemma_equalanglestransitive).
assert (RT G H M K H G) by (conclude lemma_RTcongruence).
assert (RT K H G G H M) by (conclude lemma_RTsymmetric).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (neq H G) by (forward_using lemma_NCdistinct).
assert (Out H G G) by (conclude lemma_ray4).
assert (BetS K H M) by (conclude proposition_14).
assert (neq F K) by (forward_using lemma_NCdistinct).
assert (nCol G H M) by (conclude lemma_equalanglesNC).
assert (neq G H) by (forward_using lemma_NCdistinct).
assert (Par G H M L) by (conclude_def PG ).
assert (nCol H M L) by (forward_using lemma_parallelNC).
assert (neq L M) by (forward_using lemma_NCdistinct).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (eq H H) by (conclude cn_equalityreflexive).
assert (eq M M) by (conclude cn_equalityreflexive).
assert (Col F K K) by (conclude_def Col ).
assert (Col G H H) by (conclude_def Col ).
assert (Col L M M) by (conclude_def Col ).
assert (Par F K G H) by (forward_using lemma_parallelflip).
assert (Par M L G H) by (conclude lemma_parallelsymmetric).
assert (Par L M G H) by (forward_using lemma_parallelflip).
assert (Par F K L M) by (conclude proposition_30).
assert (Par F K M L) by (forward_using lemma_parallelflip).
assert (Par F G K H) by (conclude_def PG ).
assert (Par G L H M) by (conclude_def PG ).
assert (Par F G H K) by (forward_using lemma_parallelflip).
assert (Col K H M) by (conclude_def Col ).
assert (Col H K M) by (forward_using lemma_collinearorder).
assert (neq K M) by (forward_using lemma_betweennotequal).
assert (neq M K) by (conclude lemma_inequalitysymmetric).
assert (Par F G M K) by (conclude lemma_collinearparallel).
assert (Col H M K) by (forward_using lemma_collinearorder).
assert (Par G L K M) by (conclude lemma_collinearparallel).
assert (Par G L M K) by (forward_using lemma_parallelflip).
assert (Par M K G L) by (conclude lemma_parallelsymmetric).
assert (Par M K F G) by (conclude lemma_parallelsymmetric).
assert (Par M K G F) by (forward_using lemma_parallelflip).
assert (Col G L F) by (conclude lemma_Playfair).
assert (Col G F L) by (forward_using lemma_collinearorder).
assert (nCol F L M) by (forward_using lemma_parallelNC).
assert (neq L F) by (forward_using lemma_NCdistinct).
assert (Par M K L F) by (conclude lemma_collinearparallel).
assert (Par L F M K) by (conclude lemma_parallelsymmetric).
assert (Par F L K M) by (forward_using lemma_parallelflip).
assert (PG F K M L) by (conclude_def PG ).
assert (nCol F K H) by (forward_using lemma_parallelNC).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H J E N) by (conclude lemma_equalanglestransitive).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (Out K H M) by (conclude lemma_ray4).
assert (Out K M H) by (conclude lemma_ray5).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (neq K F) by (forward_using lemma_NCdistinct).
assert (Out K F F) by (conclude lemma_ray4).
assert (nCol F K M) by (forward_using lemma_parallelNC).
assert (CongA F K M F K M) by (conclude lemma_equalanglesreflexive).
assert (CongA F K M F K H) by (conclude lemma_equalangleshelper).
assert (CongA F K M J E N) by (conclude lemma_equalanglestransitive).
assert (Col B O D) by (conclude_def Col ).
assert (Col B D O) by (forward_using lemma_collinearorder).
assert (nCol B D A) by (forward_using lemma_NCorder).

*****
H132 : nCol B D A
H131 : Col B D O
H130 : Col B O D
H129 : CongA F K M J E N
H128 : CongA F K M F K H
H127 : CongA F K M F K M
H126 : nCol F K M
H125 : Out K F F
H124 : neq K F
H123 : eq F F
H122 : Out K M H
H121 : Out K H M
H120 : neq K H
H119 : CongA F K H J E N
H118 : CongA F K H H K F
H117 : nCol F K H
H116 : PG F K M L
H115 : Par F L K M
H114 : Par L F M K
H113 : Par M K L F
H112 : neq L F
H111 : nCol F L M
H110 : Col G F L
H109 : Col G L F
H108 : Par M K G F
H107 : Par M K F G
H106 : Par M K G L
H105 : Par G L M K
H104 : Par G L K M
H103 : Col H M K
H102 : Par F G M K
H101 : neq M K
H100 : neq K M
H99 : Col H K M
H98 : Col K H M
H97 : Par F G H K
H96 : Par G L H M
H95 : Par F G K H
H94 : Par F K M L
H93 : Par F K L M
H92 : Par L M G H
H91 : Par M L G H
H90 : Par F K G H
H89 : Col L M M
H88 : Col G H H
H87 : Col F K K
H86 : eq M M
H85 : eq H H
H84 : eq K K
H83 : neq L M
H82 : nCol H M L
H81 : Par G H M L
H80 : neq G H
H79 : nCol G H M
H78 : neq F K
H77 : BetS K H M
H76 : Out H G G
H75 : neq H G
H74 : eq G G
H73 : RT K H G G H M
H72 : RT G H M K H G
H71 : CongA F K H G H M
H70 : CongA F K H H K F
H69 : nCol F K H
H68 : nCol H K F
H67 : CongA G H M H K F
H66 : RT F K H K H G
H65 : OS F G K H
H64 : TP K H F G
H63 : Par K H F G
H62 : Par F G K H
H61 : Cong K s H K
H60 : BetS H K s
s : Point
H59 : neq H K
H58 : Par K F H G
H57 : Par F K H G
H56 : CongA H K F G H M
H55 : CongA J E N G H M
H54 : BetS B e C
H53 : TS M G H K
H52 : Midpoint B e C
H51 : EF D B e C G H M L
H50 : CongA G H M J E N
H49 : PG G H M L
M,L,e : Point
H48 : nCol G H K
H47 : nCol H G K
H46 : nCol K H G
H45 : Par F K H G
H44 : Triangle D B C
H43 : nCol D B C
H42 : OS S F K H
H41 : CongA H K F J E N
H40 : EF A B m D F K H G
H39 : PG F K H G
F,G : Point
H38 : nCol S K H
H37 : nCol H K S
H36 : neq H K
H35 : neq K H
H34 : Col R K K
H33 : eq K K
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (TS A B D C) by (conclude_def TS ).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (Col R K K) by (conclude_def Col ).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (neq H K) by (conclude lemma_inequalitysymmetric).
assert (nCol H K S) by (conclude lemma_NChelper).
assert (nCol S K H) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F G, (PG F K H G /\\ EF A B m D F K H G /\\ CongA H K F J E N /\\ OS S F K H)) by (conclude proposition_42B);destruct Tf as [F[G]];spliter.
assert (nCol D B C) by (forward_using lemma_NCorder).
assert (Triangle D B C) by (conclude_def Triangle ).
assert (Par F K H G) by (conclude_def PG ).
assert (nCol K H G) by (forward_using lemma_parallelNC).
assert (nCol H G K) by (forward_using lemma_NCorder).
assert (nCol G H K) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists M L e, (PG G H M L /\\ CongA G H M J E N /\\ EF D B e C G H M L /\\ Midpoint B e C /\\ TS M G H K)) by (conclude proposition_44);destruct Tf as [M[L[e]]];spliter.
assert (BetS B e C) by (conclude_def Midpoint ).
assert (CongA J E N G H M) by (conclude lemma_equalanglessymmetric).
assert (CongA H K F G H M) by (conclude lemma_equalanglestransitive).
assert (Par F K H G) by (conclude_def PG ).
assert (Par K F H G) by (forward_using lemma_parallelflip).
assert (neq H K) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists s, (BetS H K s /\\ Cong K s H K)) by (conclude lemma_extension);destruct Tf as [s];spliter.
assert (Par F G K H) by (conclude_def PG ).
assert (Par K H F G) by (conclude lemma_parallelsymmetric).
assert (TP K H F G) by (conclude lemma_paralleldef2B).
assert (OS F G K H) by (conclude_def TP ).
assert (RT F K H K H G) by (conclude proposition_29C).
assert (CongA G H M H K F) by (conclude lemma_equalanglessymmetric).
assert (nCol H K F) by (conclude lemma_equalanglesNC).
assert (nCol F K H) by (forward_using lemma_NCorder).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H G H M) by (conclude lemma_equalanglestransitive).
assert (RT G H M K H G) by (conclude lemma_RTcongruence).
assert (RT K H G G H M) by (conclude lemma_RTsymmetric).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (neq H G) by (forward_using lemma_NCdistinct).
assert (Out H G G) by (conclude lemma_ray4).
assert (BetS K H M) by (conclude proposition_14).
assert (neq F K) by (forward_using lemma_NCdistinct).
assert (nCol G H M) by (conclude lemma_equalanglesNC).
assert (neq G H) by (forward_using lemma_NCdistinct).
assert (Par G H M L) by (conclude_def PG ).
assert (nCol H M L) by (forward_using lemma_parallelNC).
assert (neq L M) by (forward_using lemma_NCdistinct).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (eq H H) by (conclude cn_equalityreflexive).
assert (eq M M) by (conclude cn_equalityreflexive).
assert (Col F K K) by (conclude_def Col ).
assert (Col G H H) by (conclude_def Col ).
assert (Col L M M) by (conclude_def Col ).
assert (Par F K G H) by (forward_using lemma_parallelflip).
assert (Par M L G H) by (conclude lemma_parallelsymmetric).
assert (Par L M G H) by (forward_using lemma_parallelflip).
assert (Par F K L M) by (conclude proposition_30).
assert (Par F K M L) by (forward_using lemma_parallelflip).
assert (Par F G K H) by (conclude_def PG ).
assert (Par G L H M) by (conclude_def PG ).
assert (Par F G H K) by (forward_using lemma_parallelflip).
assert (Col K H M) by (conclude_def Col ).
assert (Col H K M) by (forward_using lemma_collinearorder).
assert (neq K M) by (forward_using lemma_betweennotequal).
assert (neq M K) by (conclude lemma_inequalitysymmetric).
assert (Par F G M K) by (conclude lemma_collinearparallel).
assert (Col H M K) by (forward_using lemma_collinearorder).
assert (Par G L K M) by (conclude lemma_collinearparallel).
assert (Par G L M K) by (forward_using lemma_parallelflip).
assert (Par M K G L) by (conclude lemma_parallelsymmetric).
assert (Par M K F G) by (conclude lemma_parallelsymmetric).
assert (Par M K G F) by (forward_using lemma_parallelflip).
assert (Col G L F) by (conclude lemma_Playfair).
assert (Col G F L) by (forward_using lemma_collinearorder).
assert (nCol F L M) by (forward_using lemma_parallelNC).
assert (neq L F) by (forward_using lemma_NCdistinct).
assert (Par M K L F) by (conclude lemma_collinearparallel).
assert (Par L F M K) by (conclude lemma_parallelsymmetric).
assert (Par F L K M) by (forward_using lemma_parallelflip).
assert (PG F K M L) by (conclude_def PG ).
assert (nCol F K H) by (forward_using lemma_parallelNC).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H J E N) by (conclude lemma_equalanglestransitive).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (Out K H M) by (conclude lemma_ray4).
assert (Out K M H) by (conclude lemma_ray5).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (neq K F) by (forward_using lemma_NCdistinct).
assert (Out K F F) by (conclude lemma_ray4).
assert (nCol F K M) by (forward_using lemma_parallelNC).
assert (CongA F K M F K M) by (conclude lemma_equalanglesreflexive).
assert (CongA F K M F K H) by (conclude lemma_equalangleshelper).
assert (CongA F K M J E N) by (conclude lemma_equalanglestransitive).
assert (Col B O D) by (conclude_def Col ).
assert (Col B D O) by (forward_using lemma_collinearorder).
assert (nCol B D A) by (forward_using lemma_NCorder).
assert (TS A B D C) by (conclude_def TS ).

*****
H133 : TS A B D C
H132 : nCol B D A
H131 : Col B D O
H130 : Col B O D
H129 : CongA F K M J E N
H128 : CongA F K M F K H
H127 : CongA F K M F K M
H126 : nCol F K M
H125 : Out K F F
H124 : neq K F
H123 : eq F F
H122 : Out K M H
H121 : Out K H M
H120 : neq K H
H119 : CongA F K H J E N
H118 : CongA F K H H K F
H117 : nCol F K H
H116 : PG F K M L
H115 : Par F L K M
H114 : Par L F M K
H113 : Par M K L F
H112 : neq L F
H111 : nCol F L M
H110 : Col G F L
H109 : Col G L F
H108 : Par M K G F
H107 : Par M K F G
H106 : Par M K G L
H105 : Par G L M K
H104 : Par G L K M
H103 : Col H M K
H102 : Par F G M K
H101 : neq M K
H100 : neq K M
H99 : Col H K M
H98 : Col K H M
H97 : Par F G H K
H96 : Par G L H M
H95 : Par F G K H
H94 : Par F K M L
H93 : Par F K L M
H92 : Par L M G H
H91 : Par M L G H
H90 : Par F K G H
H89 : Col L M M
H88 : Col G H H
H87 : Col F K K
H86 : eq M M
H85 : eq H H
H84 : eq K K
H83 : neq L M
H82 : nCol H M L
H81 : Par G H M L
H80 : neq G H
H79 : nCol G H M
H78 : neq F K
H77 : BetS K H M
H76 : Out H G G
H75 : neq H G
H74 : eq G G
H73 : RT K H G G H M
H72 : RT G H M K H G
H71 : CongA F K H G H M
H70 : CongA F K H H K F
H69 : nCol F K H
H68 : nCol H K F
H67 : CongA G H M H K F
H66 : RT F K H K H G
H65 : OS F G K H
H64 : TP K H F G
H63 : Par K H F G
H62 : Par F G K H
H61 : Cong K s H K
H60 : BetS H K s
s : Point
H59 : neq H K
H58 : Par K F H G
H57 : Par F K H G
H56 : CongA H K F G H M
H55 : CongA J E N G H M
H54 : BetS B e C
H53 : TS M G H K
H52 : Midpoint B e C
H51 : EF D B e C G H M L
H50 : CongA G H M J E N
H49 : PG G H M L
M,L,e : Point
H48 : nCol G H K
H47 : nCol H G K
H46 : nCol K H G
H45 : Par F K H G
H44 : Triangle D B C
H43 : nCol D B C
H42 : OS S F K H
H41 : CongA H K F J E N
H40 : EF A B m D F K H G
H39 : PG F K H G
F,G : Point
H38 : nCol S K H
H37 : nCol H K S
H36 : neq H K
H35 : neq K H
H34 : Col R K K
H33 : eq K K
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (Par G H L M) by (forward_using lemma_parallelflip).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (Col R K K) by (conclude_def Col ).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (neq H K) by (conclude lemma_inequalitysymmetric).
assert (nCol H K S) by (conclude lemma_NChelper).
assert (nCol S K H) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F G, (PG F K H G /\\ EF A B m D F K H G /\\ CongA H K F J E N /\\ OS S F K H)) by (conclude proposition_42B);destruct Tf as [F[G]];spliter.
assert (nCol D B C) by (forward_using lemma_NCorder).
assert (Triangle D B C) by (conclude_def Triangle ).
assert (Par F K H G) by (conclude_def PG ).
assert (nCol K H G) by (forward_using lemma_parallelNC).
assert (nCol H G K) by (forward_using lemma_NCorder).
assert (nCol G H K) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists M L e, (PG G H M L /\\ CongA G H M J E N /\\ EF D B e C G H M L /\\ Midpoint B e C /\\ TS M G H K)) by (conclude proposition_44);destruct Tf as [M[L[e]]];spliter.
assert (BetS B e C) by (conclude_def Midpoint ).
assert (CongA J E N G H M) by (conclude lemma_equalanglessymmetric).
assert (CongA H K F G H M) by (conclude lemma_equalanglestransitive).
assert (Par F K H G) by (conclude_def PG ).
assert (Par K F H G) by (forward_using lemma_parallelflip).
assert (neq H K) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists s, (BetS H K s /\\ Cong K s H K)) by (conclude lemma_extension);destruct Tf as [s];spliter.
assert (Par F G K H) by (conclude_def PG ).
assert (Par K H F G) by (conclude lemma_parallelsymmetric).
assert (TP K H F G) by (conclude lemma_paralleldef2B).
assert (OS F G K H) by (conclude_def TP ).
assert (RT F K H K H G) by (conclude proposition_29C).
assert (CongA G H M H K F) by (conclude lemma_equalanglessymmetric).
assert (nCol H K F) by (conclude lemma_equalanglesNC).
assert (nCol F K H) by (forward_using lemma_NCorder).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H G H M) by (conclude lemma_equalanglestransitive).
assert (RT G H M K H G) by (conclude lemma_RTcongruence).
assert (RT K H G G H M) by (conclude lemma_RTsymmetric).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (neq H G) by (forward_using lemma_NCdistinct).
assert (Out H G G) by (conclude lemma_ray4).
assert (BetS K H M) by (conclude proposition_14).
assert (neq F K) by (forward_using lemma_NCdistinct).
assert (nCol G H M) by (conclude lemma_equalanglesNC).
assert (neq G H) by (forward_using lemma_NCdistinct).
assert (Par G H M L) by (conclude_def PG ).
assert (nCol H M L) by (forward_using lemma_parallelNC).
assert (neq L M) by (forward_using lemma_NCdistinct).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (eq H H) by (conclude cn_equalityreflexive).
assert (eq M M) by (conclude cn_equalityreflexive).
assert (Col F K K) by (conclude_def Col ).
assert (Col G H H) by (conclude_def Col ).
assert (Col L M M) by (conclude_def Col ).
assert (Par F K G H) by (forward_using lemma_parallelflip).
assert (Par M L G H) by (conclude lemma_parallelsymmetric).
assert (Par L M G H) by (forward_using lemma_parallelflip).
assert (Par F K L M) by (conclude proposition_30).
assert (Par F K M L) by (forward_using lemma_parallelflip).
assert (Par F G K H) by (conclude_def PG ).
assert (Par G L H M) by (conclude_def PG ).
assert (Par F G H K) by (forward_using lemma_parallelflip).
assert (Col K H M) by (conclude_def Col ).
assert (Col H K M) by (forward_using lemma_collinearorder).
assert (neq K M) by (forward_using lemma_betweennotequal).
assert (neq M K) by (conclude lemma_inequalitysymmetric).
assert (Par F G M K) by (conclude lemma_collinearparallel).
assert (Col H M K) by (forward_using lemma_collinearorder).
assert (Par G L K M) by (conclude lemma_collinearparallel).
assert (Par G L M K) by (forward_using lemma_parallelflip).
assert (Par M K G L) by (conclude lemma_parallelsymmetric).
assert (Par M K F G) by (conclude lemma_parallelsymmetric).
assert (Par M K G F) by (forward_using lemma_parallelflip).
assert (Col G L F) by (conclude lemma_Playfair).
assert (Col G F L) by (forward_using lemma_collinearorder).
assert (nCol F L M) by (forward_using lemma_parallelNC).
assert (neq L F) by (forward_using lemma_NCdistinct).
assert (Par M K L F) by (conclude lemma_collinearparallel).
assert (Par L F M K) by (conclude lemma_parallelsymmetric).
assert (Par F L K M) by (forward_using lemma_parallelflip).
assert (PG F K M L) by (conclude_def PG ).
assert (nCol F K H) by (forward_using lemma_parallelNC).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H J E N) by (conclude lemma_equalanglestransitive).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (Out K H M) by (conclude lemma_ray4).
assert (Out K M H) by (conclude lemma_ray5).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (neq K F) by (forward_using lemma_NCdistinct).
assert (Out K F F) by (conclude lemma_ray4).
assert (nCol F K M) by (forward_using lemma_parallelNC).
assert (CongA F K M F K M) by (conclude lemma_equalanglesreflexive).
assert (CongA F K M F K H) by (conclude lemma_equalangleshelper).
assert (CongA F K M J E N) by (conclude lemma_equalanglestransitive).
assert (Col B O D) by (conclude_def Col ).
assert (Col B D O) by (forward_using lemma_collinearorder).
assert (nCol B D A) by (forward_using lemma_NCorder).
assert (TS A B D C) by (conclude_def TS ).
assert (Par G H L M) by (forward_using lemma_parallelflip).

*****
H134 : Par G H L M
H133 : TS A B D C
H132 : nCol B D A
H131 : Col B D O
H130 : Col B O D
H129 : CongA F K M J E N
H128 : CongA F K M F K H
H127 : CongA F K M F K M
H126 : nCol F K M
H125 : Out K F F
H124 : neq K F
H123 : eq F F
H122 : Out K M H
H121 : Out K H M
H120 : neq K H
H119 : CongA F K H J E N
H118 : CongA F K H H K F
H117 : nCol F K H
H116 : PG F K M L
H115 : Par F L K M
H114 : Par L F M K
H113 : Par M K L F
H112 : neq L F
H111 : nCol F L M
H110 : Col G F L
H109 : Col G L F
H108 : Par M K G F
H107 : Par M K F G
H106 : Par M K G L
H105 : Par G L M K
H104 : Par G L K M
H103 : Col H M K
H102 : Par F G M K
H101 : neq M K
H100 : neq K M
H99 : Col H K M
H98 : Col K H M
H97 : Par F G H K
H96 : Par G L H M
H95 : Par F G K H
H94 : Par F K M L
H93 : Par F K L M
H92 : Par L M G H
H91 : Par M L G H
H90 : Par F K G H
H89 : Col L M M
H88 : Col G H H
H87 : Col F K K
H86 : eq M M
H85 : eq H H
H84 : eq K K
H83 : neq L M
H82 : nCol H M L
H81 : Par G H M L
H80 : neq G H
H79 : nCol G H M
H78 : neq F K
H77 : BetS K H M
H76 : Out H G G
H75 : neq H G
H74 : eq G G
H73 : RT K H G G H M
H72 : RT G H M K H G
H71 : CongA F K H G H M
H70 : CongA F K H H K F
H69 : nCol F K H
H68 : nCol H K F
H67 : CongA G H M H K F
H66 : RT F K H K H G
H65 : OS F G K H
H64 : TP K H F G
H63 : Par K H F G
H62 : Par F G K H
H61 : Cong K s H K
H60 : BetS H K s
s : Point
H59 : neq H K
H58 : Par K F H G
H57 : Par F K H G
H56 : CongA H K F G H M
H55 : CongA J E N G H M
H54 : BetS B e C
H53 : TS M G H K
H52 : Midpoint B e C
H51 : EF D B e C G H M L
H50 : CongA G H M J E N
H49 : PG G H M L
M,L,e : Point
H48 : nCol G H K
H47 : nCol H G K
H46 : nCol K H G
H45 : Par F K H G
H44 : Triangle D B C
H43 : nCol D B C
H42 : OS S F K H
H41 : CongA H K F J E N
H40 : EF A B m D F K H G
H39 : PG F K H G
F,G : Point
H38 : nCol S K H
H37 : nCol H K S
H36 : neq H K
H35 : neq K H
H34 : Col R K K
H33 : eq K K
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (TP G H L M) by (conclude lemma_paralleldef2B).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (Col R K K) by (conclude_def Col ).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (neq H K) by (conclude lemma_inequalitysymmetric).
assert (nCol H K S) by (conclude lemma_NChelper).
assert (nCol S K H) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F G, (PG F K H G /\\ EF A B m D F K H G /\\ CongA H K F J E N /\\ OS S F K H)) by (conclude proposition_42B);destruct Tf as [F[G]];spliter.
assert (nCol D B C) by (forward_using lemma_NCorder).
assert (Triangle D B C) by (conclude_def Triangle ).
assert (Par F K H G) by (conclude_def PG ).
assert (nCol K H G) by (forward_using lemma_parallelNC).
assert (nCol H G K) by (forward_using lemma_NCorder).
assert (nCol G H K) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists M L e, (PG G H M L /\\ CongA G H M J E N /\\ EF D B e C G H M L /\\ Midpoint B e C /\\ TS M G H K)) by (conclude proposition_44);destruct Tf as [M[L[e]]];spliter.
assert (BetS B e C) by (conclude_def Midpoint ).
assert (CongA J E N G H M) by (conclude lemma_equalanglessymmetric).
assert (CongA H K F G H M) by (conclude lemma_equalanglestransitive).
assert (Par F K H G) by (conclude_def PG ).
assert (Par K F H G) by (forward_using lemma_parallelflip).
assert (neq H K) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists s, (BetS H K s /\\ Cong K s H K)) by (conclude lemma_extension);destruct Tf as [s];spliter.
assert (Par F G K H) by (conclude_def PG ).
assert (Par K H F G) by (conclude lemma_parallelsymmetric).
assert (TP K H F G) by (conclude lemma_paralleldef2B).
assert (OS F G K H) by (conclude_def TP ).
assert (RT F K H K H G) by (conclude proposition_29C).
assert (CongA G H M H K F) by (conclude lemma_equalanglessymmetric).
assert (nCol H K F) by (conclude lemma_equalanglesNC).
assert (nCol F K H) by (forward_using lemma_NCorder).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H G H M) by (conclude lemma_equalanglestransitive).
assert (RT G H M K H G) by (conclude lemma_RTcongruence).
assert (RT K H G G H M) by (conclude lemma_RTsymmetric).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (neq H G) by (forward_using lemma_NCdistinct).
assert (Out H G G) by (conclude lemma_ray4).
assert (BetS K H M) by (conclude proposition_14).
assert (neq F K) by (forward_using lemma_NCdistinct).
assert (nCol G H M) by (conclude lemma_equalanglesNC).
assert (neq G H) by (forward_using lemma_NCdistinct).
assert (Par G H M L) by (conclude_def PG ).
assert (nCol H M L) by (forward_using lemma_parallelNC).
assert (neq L M) by (forward_using lemma_NCdistinct).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (eq H H) by (conclude cn_equalityreflexive).
assert (eq M M) by (conclude cn_equalityreflexive).
assert (Col F K K) by (conclude_def Col ).
assert (Col G H H) by (conclude_def Col ).
assert (Col L M M) by (conclude_def Col ).
assert (Par F K G H) by (forward_using lemma_parallelflip).
assert (Par M L G H) by (conclude lemma_parallelsymmetric).
assert (Par L M G H) by (forward_using lemma_parallelflip).
assert (Par F K L M) by (conclude proposition_30).
assert (Par F K M L) by (forward_using lemma_parallelflip).
assert (Par F G K H) by (conclude_def PG ).
assert (Par G L H M) by (conclude_def PG ).
assert (Par F G H K) by (forward_using lemma_parallelflip).
assert (Col K H M) by (conclude_def Col ).
assert (Col H K M) by (forward_using lemma_collinearorder).
assert (neq K M) by (forward_using lemma_betweennotequal).
assert (neq M K) by (conclude lemma_inequalitysymmetric).
assert (Par F G M K) by (conclude lemma_collinearparallel).
assert (Col H M K) by (forward_using lemma_collinearorder).
assert (Par G L K M) by (conclude lemma_collinearparallel).
assert (Par G L M K) by (forward_using lemma_parallelflip).
assert (Par M K G L) by (conclude lemma_parallelsymmetric).
assert (Par M K F G) by (conclude lemma_parallelsymmetric).
assert (Par M K G F) by (forward_using lemma_parallelflip).
assert (Col G L F) by (conclude lemma_Playfair).
assert (Col G F L) by (forward_using lemma_collinearorder).
assert (nCol F L M) by (forward_using lemma_parallelNC).
assert (neq L F) by (forward_using lemma_NCdistinct).
assert (Par M K L F) by (conclude lemma_collinearparallel).
assert (Par L F M K) by (conclude lemma_parallelsymmetric).
assert (Par F L K M) by (forward_using lemma_parallelflip).
assert (PG F K M L) by (conclude_def PG ).
assert (nCol F K H) by (forward_using lemma_parallelNC).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H J E N) by (conclude lemma_equalanglestransitive).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (Out K H M) by (conclude lemma_ray4).
assert (Out K M H) by (conclude lemma_ray5).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (neq K F) by (forward_using lemma_NCdistinct).
assert (Out K F F) by (conclude lemma_ray4).
assert (nCol F K M) by (forward_using lemma_parallelNC).
assert (CongA F K M F K M) by (conclude lemma_equalanglesreflexive).
assert (CongA F K M F K H) by (conclude lemma_equalangleshelper).
assert (CongA F K M J E N) by (conclude lemma_equalanglestransitive).
assert (Col B O D) by (conclude_def Col ).
assert (Col B D O) by (forward_using lemma_collinearorder).
assert (nCol B D A) by (forward_using lemma_NCorder).
assert (TS A B D C) by (conclude_def TS ).
assert (Par G H L M) by (forward_using lemma_parallelflip).
assert (TP G H L M) by (conclude lemma_paralleldef2B).

*****
H135 : TP G H L M
H134 : Par G H L M
H133 : TS A B D C
H132 : nCol B D A
H131 : Col B D O
H130 : Col B O D
H129 : CongA F K M J E N
H128 : CongA F K M F K H
H127 : CongA F K M F K M
H126 : nCol F K M
H125 : Out K F F
H124 : neq K F
H123 : eq F F
H122 : Out K M H
H121 : Out K H M
H120 : neq K H
H119 : CongA F K H J E N
H118 : CongA F K H H K F
H117 : nCol F K H
H116 : PG F K M L
H115 : Par F L K M
H114 : Par L F M K
H113 : Par M K L F
H112 : neq L F
H111 : nCol F L M
H110 : Col G F L
H109 : Col G L F
H108 : Par M K G F
H107 : Par M K F G
H106 : Par M K G L
H105 : Par G L M K
H104 : Par G L K M
H103 : Col H M K
H102 : Par F G M K
H101 : neq M K
H100 : neq K M
H99 : Col H K M
H98 : Col K H M
H97 : Par F G H K
H96 : Par G L H M
H95 : Par F G K H
H94 : Par F K M L
H93 : Par F K L M
H92 : Par L M G H
H91 : Par M L G H
H90 : Par F K G H
H89 : Col L M M
H88 : Col G H H
H87 : Col F K K
H86 : eq M M
H85 : eq H H
H84 : eq K K
H83 : neq L M
H82 : nCol H M L
H81 : Par G H M L
H80 : neq G H
H79 : nCol G H M
H78 : neq F K
H77 : BetS K H M
H76 : Out H G G
H75 : neq H G
H74 : eq G G
H73 : RT K H G G H M
H72 : RT G H M K H G
H71 : CongA F K H G H M
H70 : CongA F K H H K F
H69 : nCol F K H
H68 : nCol H K F
H67 : CongA G H M H K F
H66 : RT F K H K H G
H65 : OS F G K H
H64 : TP K H F G
H63 : Par K H F G
H62 : Par F G K H
H61 : Cong K s H K
H60 : BetS H K s
s : Point
H59 : neq H K
H58 : Par K F H G
H57 : Par F K H G
H56 : CongA H K F G H M
H55 : CongA J E N G H M
H54 : BetS B e C
H53 : TS M G H K
H52 : Midpoint B e C
H51 : EF D B e C G H M L
H50 : CongA G H M J E N
H49 : PG G H M L
M,L,e : Point
H48 : nCol G H K
H47 : nCol H G K
H46 : nCol K H G
H45 : Par F K H G
H44 : Triangle D B C
H43 : nCol D B C
H42 : OS S F K H
H41 : CongA H K F J E N
H40 : EF A B m D F K H G
H39 : PG F K H G
F,G : Point
H38 : nCol S K H
H37 : nCol H K S
H36 : neq H K
H35 : neq K H
H34 : Col R K K
H33 : eq K K
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (OS L M G H) by (conclude_def TP ).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (Col R K K) by (conclude_def Col ).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (neq H K) by (conclude lemma_inequalitysymmetric).
assert (nCol H K S) by (conclude lemma_NChelper).
assert (nCol S K H) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F G, (PG F K H G /\\ EF A B m D F K H G /\\ CongA H K F J E N /\\ OS S F K H)) by (conclude proposition_42B);destruct Tf as [F[G]];spliter.
assert (nCol D B C) by (forward_using lemma_NCorder).
assert (Triangle D B C) by (conclude_def Triangle ).
assert (Par F K H G) by (conclude_def PG ).
assert (nCol K H G) by (forward_using lemma_parallelNC).
assert (nCol H G K) by (forward_using lemma_NCorder).
assert (nCol G H K) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists M L e, (PG G H M L /\\ CongA G H M J E N /\\ EF D B e C G H M L /\\ Midpoint B e C /\\ TS M G H K)) by (conclude proposition_44);destruct Tf as [M[L[e]]];spliter.
assert (BetS B e C) by (conclude_def Midpoint ).
assert (CongA J E N G H M) by (conclude lemma_equalanglessymmetric).
assert (CongA H K F G H M) by (conclude lemma_equalanglestransitive).
assert (Par F K H G) by (conclude_def PG ).
assert (Par K F H G) by (forward_using lemma_parallelflip).
assert (neq H K) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists s, (BetS H K s /\\ Cong K s H K)) by (conclude lemma_extension);destruct Tf as [s];spliter.
assert (Par F G K H) by (conclude_def PG ).
assert (Par K H F G) by (conclude lemma_parallelsymmetric).
assert (TP K H F G) by (conclude lemma_paralleldef2B).
assert (OS F G K H) by (conclude_def TP ).
assert (RT F K H K H G) by (conclude proposition_29C).
assert (CongA G H M H K F) by (conclude lemma_equalanglessymmetric).
assert (nCol H K F) by (conclude lemma_equalanglesNC).
assert (nCol F K H) by (forward_using lemma_NCorder).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H G H M) by (conclude lemma_equalanglestransitive).
assert (RT G H M K H G) by (conclude lemma_RTcongruence).
assert (RT K H G G H M) by (conclude lemma_RTsymmetric).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (neq H G) by (forward_using lemma_NCdistinct).
assert (Out H G G) by (conclude lemma_ray4).
assert (BetS K H M) by (conclude proposition_14).
assert (neq F K) by (forward_using lemma_NCdistinct).
assert (nCol G H M) by (conclude lemma_equalanglesNC).
assert (neq G H) by (forward_using lemma_NCdistinct).
assert (Par G H M L) by (conclude_def PG ).
assert (nCol H M L) by (forward_using lemma_parallelNC).
assert (neq L M) by (forward_using lemma_NCdistinct).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (eq H H) by (conclude cn_equalityreflexive).
assert (eq M M) by (conclude cn_equalityreflexive).
assert (Col F K K) by (conclude_def Col ).
assert (Col G H H) by (conclude_def Col ).
assert (Col L M M) by (conclude_def Col ).
assert (Par F K G H) by (forward_using lemma_parallelflip).
assert (Par M L G H) by (conclude lemma_parallelsymmetric).
assert (Par L M G H) by (forward_using lemma_parallelflip).
assert (Par F K L M) by (conclude proposition_30).
assert (Par F K M L) by (forward_using lemma_parallelflip).
assert (Par F G K H) by (conclude_def PG ).
assert (Par G L H M) by (conclude_def PG ).
assert (Par F G H K) by (forward_using lemma_parallelflip).
assert (Col K H M) by (conclude_def Col ).
assert (Col H K M) by (forward_using lemma_collinearorder).
assert (neq K M) by (forward_using lemma_betweennotequal).
assert (neq M K) by (conclude lemma_inequalitysymmetric).
assert (Par F G M K) by (conclude lemma_collinearparallel).
assert (Col H M K) by (forward_using lemma_collinearorder).
assert (Par G L K M) by (conclude lemma_collinearparallel).
assert (Par G L M K) by (forward_using lemma_parallelflip).
assert (Par M K G L) by (conclude lemma_parallelsymmetric).
assert (Par M K F G) by (conclude lemma_parallelsymmetric).
assert (Par M K G F) by (forward_using lemma_parallelflip).
assert (Col G L F) by (conclude lemma_Playfair).
assert (Col G F L) by (forward_using lemma_collinearorder).
assert (nCol F L M) by (forward_using lemma_parallelNC).
assert (neq L F) by (forward_using lemma_NCdistinct).
assert (Par M K L F) by (conclude lemma_collinearparallel).
assert (Par L F M K) by (conclude lemma_parallelsymmetric).
assert (Par F L K M) by (forward_using lemma_parallelflip).
assert (PG F K M L) by (conclude_def PG ).
assert (nCol F K H) by (forward_using lemma_parallelNC).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H J E N) by (conclude lemma_equalanglestransitive).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (Out K H M) by (conclude lemma_ray4).
assert (Out K M H) by (conclude lemma_ray5).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (neq K F) by (forward_using lemma_NCdistinct).
assert (Out K F F) by (conclude lemma_ray4).
assert (nCol F K M) by (forward_using lemma_parallelNC).
assert (CongA F K M F K M) by (conclude lemma_equalanglesreflexive).
assert (CongA F K M F K H) by (conclude lemma_equalangleshelper).
assert (CongA F K M J E N) by (conclude lemma_equalanglestransitive).
assert (Col B O D) by (conclude_def Col ).
assert (Col B D O) by (forward_using lemma_collinearorder).
assert (nCol B D A) by (forward_using lemma_NCorder).
assert (TS A B D C) by (conclude_def TS ).
assert (Par G H L M) by (forward_using lemma_parallelflip).
assert (TP G H L M) by (conclude lemma_paralleldef2B).
assert (OS L M G H) by (conclude_def TP ).

*****
H136 : OS L M G H
H135 : TP G H L M
H134 : Par G H L M
H133 : TS A B D C
H132 : nCol B D A
H131 : Col B D O
H130 : Col B O D
H129 : CongA F K M J E N
H128 : CongA F K M F K H
H127 : CongA F K M F K M
H126 : nCol F K M
H125 : Out K F F
H124 : neq K F
H123 : eq F F
H122 : Out K M H
H121 : Out K H M
H120 : neq K H
H119 : CongA F K H J E N
H118 : CongA F K H H K F
H117 : nCol F K H
H116 : PG F K M L
H115 : Par F L K M
H114 : Par L F M K
H113 : Par M K L F
H112 : neq L F
H111 : nCol F L M
H110 : Col G F L
H109 : Col G L F
H108 : Par M K G F
H107 : Par M K F G
H106 : Par M K G L
H105 : Par G L M K
H104 : Par G L K M
H103 : Col H M K
H102 : Par F G M K
H101 : neq M K
H100 : neq K M
H99 : Col H K M
H98 : Col K H M
H97 : Par F G H K
H96 : Par G L H M
H95 : Par F G K H
H94 : Par F K M L
H93 : Par F K L M
H92 : Par L M G H
H91 : Par M L G H
H90 : Par F K G H
H89 : Col L M M
H88 : Col G H H
H87 : Col F K K
H86 : eq M M
H85 : eq H H
H84 : eq K K
H83 : neq L M
H82 : nCol H M L
H81 : Par G H M L
H80 : neq G H
H79 : nCol G H M
H78 : neq F K
H77 : BetS K H M
H76 : Out H G G
H75 : neq H G
H74 : eq G G
H73 : RT K H G G H M
H72 : RT G H M K H G
H71 : CongA F K H G H M
H70 : CongA F K H H K F
H69 : nCol F K H
H68 : nCol H K F
H67 : CongA G H M H K F
H66 : RT F K H K H G
H65 : OS F G K H
H64 : TP K H F G
H63 : Par K H F G
H62 : Par F G K H
H61 : Cong K s H K
H60 : BetS H K s
s : Point
H59 : neq H K
H58 : Par K F H G
H57 : Par F K H G
H56 : CongA H K F G H M
H55 : CongA J E N G H M
H54 : BetS B e C
H53 : TS M G H K
H52 : Midpoint B e C
H51 : EF D B e C G H M L
H50 : CongA G H M J E N
H49 : PG G H M L
M,L,e : Point
H48 : nCol G H K
H47 : nCol H G K
H46 : nCol K H G
H45 : Par F K H G
H44 : Triangle D B C
H43 : nCol D B C
H42 : OS S F K H
H41 : CongA H K F J E N
H40 : EF A B m D F K H G
H39 : PG F K H G
F,G : Point
H38 : nCol S K H
H37 : nCol H K S
H36 : neq H K
H35 : neq K H
H34 : Col R K K
H33 : eq K K
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (Par F K G H) by (forward_using lemma_parallelflip).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (Col R K K) by (conclude_def Col ).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (neq H K) by (conclude lemma_inequalitysymmetric).
assert (nCol H K S) by (conclude lemma_NChelper).
assert (nCol S K H) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F G, (PG F K H G /\\ EF A B m D F K H G /\\ CongA H K F J E N /\\ OS S F K H)) by (conclude proposition_42B);destruct Tf as [F[G]];spliter.
assert (nCol D B C) by (forward_using lemma_NCorder).
assert (Triangle D B C) by (conclude_def Triangle ).
assert (Par F K H G) by (conclude_def PG ).
assert (nCol K H G) by (forward_using lemma_parallelNC).
assert (nCol H G K) by (forward_using lemma_NCorder).
assert (nCol G H K) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists M L e, (PG G H M L /\\ CongA G H M J E N /\\ EF D B e C G H M L /\\ Midpoint B e C /\\ TS M G H K)) by (conclude proposition_44);destruct Tf as [M[L[e]]];spliter.
assert (BetS B e C) by (conclude_def Midpoint ).
assert (CongA J E N G H M) by (conclude lemma_equalanglessymmetric).
assert (CongA H K F G H M) by (conclude lemma_equalanglestransitive).
assert (Par F K H G) by (conclude_def PG ).
assert (Par K F H G) by (forward_using lemma_parallelflip).
assert (neq H K) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists s, (BetS H K s /\\ Cong K s H K)) by (conclude lemma_extension);destruct Tf as [s];spliter.
assert (Par F G K H) by (conclude_def PG ).
assert (Par K H F G) by (conclude lemma_parallelsymmetric).
assert (TP K H F G) by (conclude lemma_paralleldef2B).
assert (OS F G K H) by (conclude_def TP ).
assert (RT F K H K H G) by (conclude proposition_29C).
assert (CongA G H M H K F) by (conclude lemma_equalanglessymmetric).
assert (nCol H K F) by (conclude lemma_equalanglesNC).
assert (nCol F K H) by (forward_using lemma_NCorder).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H G H M) by (conclude lemma_equalanglestransitive).
assert (RT G H M K H G) by (conclude lemma_RTcongruence).
assert (RT K H G G H M) by (conclude lemma_RTsymmetric).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (neq H G) by (forward_using lemma_NCdistinct).
assert (Out H G G) by (conclude lemma_ray4).
assert (BetS K H M) by (conclude proposition_14).
assert (neq F K) by (forward_using lemma_NCdistinct).
assert (nCol G H M) by (conclude lemma_equalanglesNC).
assert (neq G H) by (forward_using lemma_NCdistinct).
assert (Par G H M L) by (conclude_def PG ).
assert (nCol H M L) by (forward_using lemma_parallelNC).
assert (neq L M) by (forward_using lemma_NCdistinct).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (eq H H) by (conclude cn_equalityreflexive).
assert (eq M M) by (conclude cn_equalityreflexive).
assert (Col F K K) by (conclude_def Col ).
assert (Col G H H) by (conclude_def Col ).
assert (Col L M M) by (conclude_def Col ).
assert (Par F K G H) by (forward_using lemma_parallelflip).
assert (Par M L G H) by (conclude lemma_parallelsymmetric).
assert (Par L M G H) by (forward_using lemma_parallelflip).
assert (Par F K L M) by (conclude proposition_30).
assert (Par F K M L) by (forward_using lemma_parallelflip).
assert (Par F G K H) by (conclude_def PG ).
assert (Par G L H M) by (conclude_def PG ).
assert (Par F G H K) by (forward_using lemma_parallelflip).
assert (Col K H M) by (conclude_def Col ).
assert (Col H K M) by (forward_using lemma_collinearorder).
assert (neq K M) by (forward_using lemma_betweennotequal).
assert (neq M K) by (conclude lemma_inequalitysymmetric).
assert (Par F G M K) by (conclude lemma_collinearparallel).
assert (Col H M K) by (forward_using lemma_collinearorder).
assert (Par G L K M) by (conclude lemma_collinearparallel).
assert (Par G L M K) by (forward_using lemma_parallelflip).
assert (Par M K G L) by (conclude lemma_parallelsymmetric).
assert (Par M K F G) by (conclude lemma_parallelsymmetric).
assert (Par M K G F) by (forward_using lemma_parallelflip).
assert (Col G L F) by (conclude lemma_Playfair).
assert (Col G F L) by (forward_using lemma_collinearorder).
assert (nCol F L M) by (forward_using lemma_parallelNC).
assert (neq L F) by (forward_using lemma_NCdistinct).
assert (Par M K L F) by (conclude lemma_collinearparallel).
assert (Par L F M K) by (conclude lemma_parallelsymmetric).
assert (Par F L K M) by (forward_using lemma_parallelflip).
assert (PG F K M L) by (conclude_def PG ).
assert (nCol F K H) by (forward_using lemma_parallelNC).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H J E N) by (conclude lemma_equalanglestransitive).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (Out K H M) by (conclude lemma_ray4).
assert (Out K M H) by (conclude lemma_ray5).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (neq K F) by (forward_using lemma_NCdistinct).
assert (Out K F F) by (conclude lemma_ray4).
assert (nCol F K M) by (forward_using lemma_parallelNC).
assert (CongA F K M F K M) by (conclude lemma_equalanglesreflexive).
assert (CongA F K M F K H) by (conclude lemma_equalangleshelper).
assert (CongA F K M J E N) by (conclude lemma_equalanglestransitive).
assert (Col B O D) by (conclude_def Col ).
assert (Col B D O) by (forward_using lemma_collinearorder).
assert (nCol B D A) by (forward_using lemma_NCorder).
assert (TS A B D C) by (conclude_def TS ).
assert (Par G H L M) by (forward_using lemma_parallelflip).
assert (TP G H L M) by (conclude lemma_paralleldef2B).
assert (OS L M G H) by (conclude_def TP ).
assert (Par F K G H) by (forward_using lemma_parallelflip).

*****
H137 : Par F K G H
H136 : OS L M G H
H135 : TP G H L M
H134 : Par G H L M
H133 : TS A B D C
H132 : nCol B D A
H131 : Col B D O
H130 : Col B O D
H129 : CongA F K M J E N
H128 : CongA F K M F K H
H127 : CongA F K M F K M
H126 : nCol F K M
H125 : Out K F F
H124 : neq K F
H123 : eq F F
H122 : Out K M H
H121 : Out K H M
H120 : neq K H
H119 : CongA F K H J E N
H118 : CongA F K H H K F
H117 : nCol F K H
H116 : PG F K M L
H115 : Par F L K M
H114 : Par L F M K
H113 : Par M K L F
H112 : neq L F
H111 : nCol F L M
H110 : Col G F L
H109 : Col G L F
H108 : Par M K G F
H107 : Par M K F G
H106 : Par M K G L
H105 : Par G L M K
H104 : Par G L K M
H103 : Col H M K
H102 : Par F G M K
H101 : neq M K
H100 : neq K M
H99 : Col H K M
H98 : Col K H M
H97 : Par F G H K
H96 : Par G L H M
H95 : Par F G K H
H94 : Par F K M L
H93 : Par F K L M
H92 : Par L M G H
H91 : Par M L G H
H90 : Par F K G H
H89 : Col L M M
H88 : Col G H H
H87 : Col F K K
H86 : eq M M
H85 : eq H H
H84 : eq K K
H83 : neq L M
H82 : nCol H M L
H81 : Par G H M L
H80 : neq G H
H79 : nCol G H M
H78 : neq F K
H77 : BetS K H M
H76 : Out H G G
H75 : neq H G
H74 : eq G G
H73 : RT K H G G H M
H72 : RT G H M K H G
H71 : CongA F K H G H M
H70 : CongA F K H H K F
H69 : nCol F K H
H68 : nCol H K F
H67 : CongA G H M H K F
H66 : RT F K H K H G
H65 : OS F G K H
H64 : TP K H F G
H63 : Par K H F G
H62 : Par F G K H
H61 : Cong K s H K
H60 : BetS H K s
s : Point
H59 : neq H K
H58 : Par K F H G
H57 : Par F K H G
H56 : CongA H K F G H M
H55 : CongA J E N G H M
H54 : BetS B e C
H53 : TS M G H K
H52 : Midpoint B e C
H51 : EF D B e C G H M L
H50 : CongA G H M J E N
H49 : PG G H M L
M,L,e : Point
H48 : nCol G H K
H47 : nCol H G K
H46 : nCol K H G
H45 : Par F K H G
H44 : Triangle D B C
H43 : nCol D B C
H42 : OS S F K H
H41 : CongA H K F J E N
H40 : EF A B m D F K H G
H39 : PG F K H G
F,G : Point
H38 : nCol S K H
H37 : nCol H K S
H36 : neq H K
H35 : neq K H
H34 : Col R K K
H33 : eq K K
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (Par G H F K) by (conclude lemma_parallelsymmetric).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (Col R K K) by (conclude_def Col ).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (neq H K) by (conclude lemma_inequalitysymmetric).
assert (nCol H K S) by (conclude lemma_NChelper).
assert (nCol S K H) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F G, (PG F K H G /\\ EF A B m D F K H G /\\ CongA H K F J E N /\\ OS S F K H)) by (conclude proposition_42B);destruct Tf as [F[G]];spliter.
assert (nCol D B C) by (forward_using lemma_NCorder).
assert (Triangle D B C) by (conclude_def Triangle ).
assert (Par F K H G) by (conclude_def PG ).
assert (nCol K H G) by (forward_using lemma_parallelNC).
assert (nCol H G K) by (forward_using lemma_NCorder).
assert (nCol G H K) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists M L e, (PG G H M L /\\ CongA G H M J E N /\\ EF D B e C G H M L /\\ Midpoint B e C /\\ TS M G H K)) by (conclude proposition_44);destruct Tf as [M[L[e]]];spliter.
assert (BetS B e C) by (conclude_def Midpoint ).
assert (CongA J E N G H M) by (conclude lemma_equalanglessymmetric).
assert (CongA H K F G H M) by (conclude lemma_equalanglestransitive).
assert (Par F K H G) by (conclude_def PG ).
assert (Par K F H G) by (forward_using lemma_parallelflip).
assert (neq H K) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists s, (BetS H K s /\\ Cong K s H K)) by (conclude lemma_extension);destruct Tf as [s];spliter.
assert (Par F G K H) by (conclude_def PG ).
assert (Par K H F G) by (conclude lemma_parallelsymmetric).
assert (TP K H F G) by (conclude lemma_paralleldef2B).
assert (OS F G K H) by (conclude_def TP ).
assert (RT F K H K H G) by (conclude proposition_29C).
assert (CongA G H M H K F) by (conclude lemma_equalanglessymmetric).
assert (nCol H K F) by (conclude lemma_equalanglesNC).
assert (nCol F K H) by (forward_using lemma_NCorder).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H G H M) by (conclude lemma_equalanglestransitive).
assert (RT G H M K H G) by (conclude lemma_RTcongruence).
assert (RT K H G G H M) by (conclude lemma_RTsymmetric).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (neq H G) by (forward_using lemma_NCdistinct).
assert (Out H G G) by (conclude lemma_ray4).
assert (BetS K H M) by (conclude proposition_14).
assert (neq F K) by (forward_using lemma_NCdistinct).
assert (nCol G H M) by (conclude lemma_equalanglesNC).
assert (neq G H) by (forward_using lemma_NCdistinct).
assert (Par G H M L) by (conclude_def PG ).
assert (nCol H M L) by (forward_using lemma_parallelNC).
assert (neq L M) by (forward_using lemma_NCdistinct).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (eq H H) by (conclude cn_equalityreflexive).
assert (eq M M) by (conclude cn_equalityreflexive).
assert (Col F K K) by (conclude_def Col ).
assert (Col G H H) by (conclude_def Col ).
assert (Col L M M) by (conclude_def Col ).
assert (Par F K G H) by (forward_using lemma_parallelflip).
assert (Par M L G H) by (conclude lemma_parallelsymmetric).
assert (Par L M G H) by (forward_using lemma_parallelflip).
assert (Par F K L M) by (conclude proposition_30).
assert (Par F K M L) by (forward_using lemma_parallelflip).
assert (Par F G K H) by (conclude_def PG ).
assert (Par G L H M) by (conclude_def PG ).
assert (Par F G H K) by (forward_using lemma_parallelflip).
assert (Col K H M) by (conclude_def Col ).
assert (Col H K M) by (forward_using lemma_collinearorder).
assert (neq K M) by (forward_using lemma_betweennotequal).
assert (neq M K) by (conclude lemma_inequalitysymmetric).
assert (Par F G M K) by (conclude lemma_collinearparallel).
assert (Col H M K) by (forward_using lemma_collinearorder).
assert (Par G L K M) by (conclude lemma_collinearparallel).
assert (Par G L M K) by (forward_using lemma_parallelflip).
assert (Par M K G L) by (conclude lemma_parallelsymmetric).
assert (Par M K F G) by (conclude lemma_parallelsymmetric).
assert (Par M K G F) by (forward_using lemma_parallelflip).
assert (Col G L F) by (conclude lemma_Playfair).
assert (Col G F L) by (forward_using lemma_collinearorder).
assert (nCol F L M) by (forward_using lemma_parallelNC).
assert (neq L F) by (forward_using lemma_NCdistinct).
assert (Par M K L F) by (conclude lemma_collinearparallel).
assert (Par L F M K) by (conclude lemma_parallelsymmetric).
assert (Par F L K M) by (forward_using lemma_parallelflip).
assert (PG F K M L) by (conclude_def PG ).
assert (nCol F K H) by (forward_using lemma_parallelNC).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H J E N) by (conclude lemma_equalanglestransitive).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (Out K H M) by (conclude lemma_ray4).
assert (Out K M H) by (conclude lemma_ray5).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (neq K F) by (forward_using lemma_NCdistinct).
assert (Out K F F) by (conclude lemma_ray4).
assert (nCol F K M) by (forward_using lemma_parallelNC).
assert (CongA F K M F K M) by (conclude lemma_equalanglesreflexive).
assert (CongA F K M F K H) by (conclude lemma_equalangleshelper).
assert (CongA F K M J E N) by (conclude lemma_equalanglestransitive).
assert (Col B O D) by (conclude_def Col ).
assert (Col B D O) by (forward_using lemma_collinearorder).
assert (nCol B D A) by (forward_using lemma_NCorder).
assert (TS A B D C) by (conclude_def TS ).
assert (Par G H L M) by (forward_using lemma_parallelflip).
assert (TP G H L M) by (conclude lemma_paralleldef2B).
assert (OS L M G H) by (conclude_def TP ).
assert (Par F K G H) by (forward_using lemma_parallelflip).
assert (Par G H F K) by (conclude lemma_parallelsymmetric).

*****
H138 : Par G H F K
H137 : Par F K G H
H136 : OS L M G H
H135 : TP G H L M
H134 : Par G H L M
H133 : TS A B D C
H132 : nCol B D A
H131 : Col B D O
H130 : Col B O D
H129 : CongA F K M J E N
H128 : CongA F K M F K H
H127 : CongA F K M F K M
H126 : nCol F K M
H125 : Out K F F
H124 : neq K F
H123 : eq F F
H122 : Out K M H
H121 : Out K H M
H120 : neq K H
H119 : CongA F K H J E N
H118 : CongA F K H H K F
H117 : nCol F K H
H116 : PG F K M L
H115 : Par F L K M
H114 : Par L F M K
H113 : Par M K L F
H112 : neq L F
H111 : nCol F L M
H110 : Col G F L
H109 : Col G L F
H108 : Par M K G F
H107 : Par M K F G
H106 : Par M K G L
H105 : Par G L M K
H104 : Par G L K M
H103 : Col H M K
H102 : Par F G M K
H101 : neq M K
H100 : neq K M
H99 : Col H K M
H98 : Col K H M
H97 : Par F G H K
H96 : Par G L H M
H95 : Par F G K H
H94 : Par F K M L
H93 : Par F K L M
H92 : Par L M G H
H91 : Par M L G H
H90 : Par F K G H
H89 : Col L M M
H88 : Col G H H
H87 : Col F K K
H86 : eq M M
H85 : eq H H
H84 : eq K K
H83 : neq L M
H82 : nCol H M L
H81 : Par G H M L
H80 : neq G H
H79 : nCol G H M
H78 : neq F K
H77 : BetS K H M
H76 : Out H G G
H75 : neq H G
H74 : eq G G
H73 : RT K H G G H M
H72 : RT G H M K H G
H71 : CongA F K H G H M
H70 : CongA F K H H K F
H69 : nCol F K H
H68 : nCol H K F
H67 : CongA G H M H K F
H66 : RT F K H K H G
H65 : OS F G K H
H64 : TP K H F G
H63 : Par K H F G
H62 : Par F G K H
H61 : Cong K s H K
H60 : BetS H K s
s : Point
H59 : neq H K
H58 : Par K F H G
H57 : Par F K H G
H56 : CongA H K F G H M
H55 : CongA J E N G H M
H54 : BetS B e C
H53 : TS M G H K
H52 : Midpoint B e C
H51 : EF D B e C G H M L
H50 : CongA G H M J E N
H49 : PG G H M L
M,L,e : Point
H48 : nCol G H K
H47 : nCol H G K
H46 : nCol K H G
H45 : Par F K H G
H44 : Triangle D B C
H43 : nCol D B C
H42 : OS S F K H
H41 : CongA H K F J E N
H40 : EF A B m D F K H G
H39 : PG F K H G
F,G : Point
H38 : nCol S K H
H37 : nCol H K S
H36 : neq H K
H35 : neq K H
H34 : Col R K K
H33 : eq K K
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (TP G H F K) by (conclude lemma_paralleldef2B).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (Col R K K) by (conclude_def Col ).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (neq H K) by (conclude lemma_inequalitysymmetric).
assert (nCol H K S) by (conclude lemma_NChelper).
assert (nCol S K H) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F G, (PG F K H G /\\ EF A B m D F K H G /\\ CongA H K F J E N /\\ OS S F K H)) by (conclude proposition_42B);destruct Tf as [F[G]];spliter.
assert (nCol D B C) by (forward_using lemma_NCorder).
assert (Triangle D B C) by (conclude_def Triangle ).
assert (Par F K H G) by (conclude_def PG ).
assert (nCol K H G) by (forward_using lemma_parallelNC).
assert (nCol H G K) by (forward_using lemma_NCorder).
assert (nCol G H K) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists M L e, (PG G H M L /\\ CongA G H M J E N /\\ EF D B e C G H M L /\\ Midpoint B e C /\\ TS M G H K)) by (conclude proposition_44);destruct Tf as [M[L[e]]];spliter.
assert (BetS B e C) by (conclude_def Midpoint ).
assert (CongA J E N G H M) by (conclude lemma_equalanglessymmetric).
assert (CongA H K F G H M) by (conclude lemma_equalanglestransitive).
assert (Par F K H G) by (conclude_def PG ).
assert (Par K F H G) by (forward_using lemma_parallelflip).
assert (neq H K) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists s, (BetS H K s /\\ Cong K s H K)) by (conclude lemma_extension);destruct Tf as [s];spliter.
assert (Par F G K H) by (conclude_def PG ).
assert (Par K H F G) by (conclude lemma_parallelsymmetric).
assert (TP K H F G) by (conclude lemma_paralleldef2B).
assert (OS F G K H) by (conclude_def TP ).
assert (RT F K H K H G) by (conclude proposition_29C).
assert (CongA G H M H K F) by (conclude lemma_equalanglessymmetric).
assert (nCol H K F) by (conclude lemma_equalanglesNC).
assert (nCol F K H) by (forward_using lemma_NCorder).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H G H M) by (conclude lemma_equalanglestransitive).
assert (RT G H M K H G) by (conclude lemma_RTcongruence).
assert (RT K H G G H M) by (conclude lemma_RTsymmetric).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (neq H G) by (forward_using lemma_NCdistinct).
assert (Out H G G) by (conclude lemma_ray4).
assert (BetS K H M) by (conclude proposition_14).
assert (neq F K) by (forward_using lemma_NCdistinct).
assert (nCol G H M) by (conclude lemma_equalanglesNC).
assert (neq G H) by (forward_using lemma_NCdistinct).
assert (Par G H M L) by (conclude_def PG ).
assert (nCol H M L) by (forward_using lemma_parallelNC).
assert (neq L M) by (forward_using lemma_NCdistinct).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (eq H H) by (conclude cn_equalityreflexive).
assert (eq M M) by (conclude cn_equalityreflexive).
assert (Col F K K) by (conclude_def Col ).
assert (Col G H H) by (conclude_def Col ).
assert (Col L M M) by (conclude_def Col ).
assert (Par F K G H) by (forward_using lemma_parallelflip).
assert (Par M L G H) by (conclude lemma_parallelsymmetric).
assert (Par L M G H) by (forward_using lemma_parallelflip).
assert (Par F K L M) by (conclude proposition_30).
assert (Par F K M L) by (forward_using lemma_parallelflip).
assert (Par F G K H) by (conclude_def PG ).
assert (Par G L H M) by (conclude_def PG ).
assert (Par F G H K) by (forward_using lemma_parallelflip).
assert (Col K H M) by (conclude_def Col ).
assert (Col H K M) by (forward_using lemma_collinearorder).
assert (neq K M) by (forward_using lemma_betweennotequal).
assert (neq M K) by (conclude lemma_inequalitysymmetric).
assert (Par F G M K) by (conclude lemma_collinearparallel).
assert (Col H M K) by (forward_using lemma_collinearorder).
assert (Par G L K M) by (conclude lemma_collinearparallel).
assert (Par G L M K) by (forward_using lemma_parallelflip).
assert (Par M K G L) by (conclude lemma_parallelsymmetric).
assert (Par M K F G) by (conclude lemma_parallelsymmetric).
assert (Par M K G F) by (forward_using lemma_parallelflip).
assert (Col G L F) by (conclude lemma_Playfair).
assert (Col G F L) by (forward_using lemma_collinearorder).
assert (nCol F L M) by (forward_using lemma_parallelNC).
assert (neq L F) by (forward_using lemma_NCdistinct).
assert (Par M K L F) by (conclude lemma_collinearparallel).
assert (Par L F M K) by (conclude lemma_parallelsymmetric).
assert (Par F L K M) by (forward_using lemma_parallelflip).
assert (PG F K M L) by (conclude_def PG ).
assert (nCol F K H) by (forward_using lemma_parallelNC).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H J E N) by (conclude lemma_equalanglestransitive).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (Out K H M) by (conclude lemma_ray4).
assert (Out K M H) by (conclude lemma_ray5).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (neq K F) by (forward_using lemma_NCdistinct).
assert (Out K F F) by (conclude lemma_ray4).
assert (nCol F K M) by (forward_using lemma_parallelNC).
assert (CongA F K M F K M) by (conclude lemma_equalanglesreflexive).
assert (CongA F K M F K H) by (conclude lemma_equalangleshelper).
assert (CongA F K M J E N) by (conclude lemma_equalanglestransitive).
assert (Col B O D) by (conclude_def Col ).
assert (Col B D O) by (forward_using lemma_collinearorder).
assert (nCol B D A) by (forward_using lemma_NCorder).
assert (TS A B D C) by (conclude_def TS ).
assert (Par G H L M) by (forward_using lemma_parallelflip).
assert (TP G H L M) by (conclude lemma_paralleldef2B).
assert (OS L M G H) by (conclude_def TP ).
assert (Par F K G H) by (forward_using lemma_parallelflip).
assert (Par G H F K) by (conclude lemma_parallelsymmetric).
assert (TP G H F K) by (conclude lemma_paralleldef2B).

*****
H139 : TP G H F K
H138 : Par G H F K
H137 : Par F K G H
H136 : OS L M G H
H135 : TP G H L M
H134 : Par G H L M
H133 : TS A B D C
H132 : nCol B D A
H131 : Col B D O
H130 : Col B O D
H129 : CongA F K M J E N
H128 : CongA F K M F K H
H127 : CongA F K M F K M
H126 : nCol F K M
H125 : Out K F F
H124 : neq K F
H123 : eq F F
H122 : Out K M H
H121 : Out K H M
H120 : neq K H
H119 : CongA F K H J E N
H118 : CongA F K H H K F
H117 : nCol F K H
H116 : PG F K M L
H115 : Par F L K M
H114 : Par L F M K
H113 : Par M K L F
H112 : neq L F
H111 : nCol F L M
H110 : Col G F L
H109 : Col G L F
H108 : Par M K G F
H107 : Par M K F G
H106 : Par M K G L
H105 : Par G L M K
H104 : Par G L K M
H103 : Col H M K
H102 : Par F G M K
H101 : neq M K
H100 : neq K M
H99 : Col H K M
H98 : Col K H M
H97 : Par F G H K
H96 : Par G L H M
H95 : Par F G K H
H94 : Par F K M L
H93 : Par F K L M
H92 : Par L M G H
H91 : Par M L G H
H90 : Par F K G H
H89 : Col L M M
H88 : Col G H H
H87 : Col F K K
H86 : eq M M
H85 : eq H H
H84 : eq K K
H83 : neq L M
H82 : nCol H M L
H81 : Par G H M L
H80 : neq G H
H79 : nCol G H M
H78 : neq F K
H77 : BetS K H M
H76 : Out H G G
H75 : neq H G
H74 : eq G G
H73 : RT K H G G H M
H72 : RT G H M K H G
H71 : CongA F K H G H M
H70 : CongA F K H H K F
H69 : nCol F K H
H68 : nCol H K F
H67 : CongA G H M H K F
H66 : RT F K H K H G
H65 : OS F G K H
H64 : TP K H F G
H63 : Par K H F G
H62 : Par F G K H
H61 : Cong K s H K
H60 : BetS H K s
s : Point
H59 : neq H K
H58 : Par K F H G
H57 : Par F K H G
H56 : CongA H K F G H M
H55 : CongA J E N G H M
H54 : BetS B e C
H53 : TS M G H K
H52 : Midpoint B e C
H51 : EF D B e C G H M L
H50 : CongA G H M J E N
H49 : PG G H M L
M,L,e : Point
H48 : nCol G H K
H47 : nCol H G K
H46 : nCol K H G
H45 : Par F K H G
H44 : Triangle D B C
H43 : nCol D B C
H42 : OS S F K H
H41 : CongA H K F J E N
H40 : EF A B m D F K H G
H39 : PG F K H G
F,G : Point
H38 : nCol S K H
H37 : nCol H K S
H36 : neq H K
H35 : neq K H
H34 : Col R K K
H33 : eq K K
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (OS F K G H) by (conclude_def TP ).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (Col R K K) by (conclude_def Col ).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (neq H K) by (conclude lemma_inequalitysymmetric).
assert (nCol H K S) by (conclude lemma_NChelper).
assert (nCol S K H) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F G, (PG F K H G /\\ EF A B m D F K H G /\\ CongA H K F J E N /\\ OS S F K H)) by (conclude proposition_42B);destruct Tf as [F[G]];spliter.
assert (nCol D B C) by (forward_using lemma_NCorder).
assert (Triangle D B C) by (conclude_def Triangle ).
assert (Par F K H G) by (conclude_def PG ).
assert (nCol K H G) by (forward_using lemma_parallelNC).
assert (nCol H G K) by (forward_using lemma_NCorder).
assert (nCol G H K) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists M L e, (PG G H M L /\\ CongA G H M J E N /\\ EF D B e C G H M L /\\ Midpoint B e C /\\ TS M G H K)) by (conclude proposition_44);destruct Tf as [M[L[e]]];spliter.
assert (BetS B e C) by (conclude_def Midpoint ).
assert (CongA J E N G H M) by (conclude lemma_equalanglessymmetric).
assert (CongA H K F G H M) by (conclude lemma_equalanglestransitive).
assert (Par F K H G) by (conclude_def PG ).
assert (Par K F H G) by (forward_using lemma_parallelflip).
assert (neq H K) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists s, (BetS H K s /\\ Cong K s H K)) by (conclude lemma_extension);destruct Tf as [s];spliter.
assert (Par F G K H) by (conclude_def PG ).
assert (Par K H F G) by (conclude lemma_parallelsymmetric).
assert (TP K H F G) by (conclude lemma_paralleldef2B).
assert (OS F G K H) by (conclude_def TP ).
assert (RT F K H K H G) by (conclude proposition_29C).
assert (CongA G H M H K F) by (conclude lemma_equalanglessymmetric).
assert (nCol H K F) by (conclude lemma_equalanglesNC).
assert (nCol F K H) by (forward_using lemma_NCorder).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H G H M) by (conclude lemma_equalanglestransitive).
assert (RT G H M K H G) by (conclude lemma_RTcongruence).
assert (RT K H G G H M) by (conclude lemma_RTsymmetric).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (neq H G) by (forward_using lemma_NCdistinct).
assert (Out H G G) by (conclude lemma_ray4).
assert (BetS K H M) by (conclude proposition_14).
assert (neq F K) by (forward_using lemma_NCdistinct).
assert (nCol G H M) by (conclude lemma_equalanglesNC).
assert (neq G H) by (forward_using lemma_NCdistinct).
assert (Par G H M L) by (conclude_def PG ).
assert (nCol H M L) by (forward_using lemma_parallelNC).
assert (neq L M) by (forward_using lemma_NCdistinct).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (eq H H) by (conclude cn_equalityreflexive).
assert (eq M M) by (conclude cn_equalityreflexive).
assert (Col F K K) by (conclude_def Col ).
assert (Col G H H) by (conclude_def Col ).
assert (Col L M M) by (conclude_def Col ).
assert (Par F K G H) by (forward_using lemma_parallelflip).
assert (Par M L G H) by (conclude lemma_parallelsymmetric).
assert (Par L M G H) by (forward_using lemma_parallelflip).
assert (Par F K L M) by (conclude proposition_30).
assert (Par F K M L) by (forward_using lemma_parallelflip).
assert (Par F G K H) by (conclude_def PG ).
assert (Par G L H M) by (conclude_def PG ).
assert (Par F G H K) by (forward_using lemma_parallelflip).
assert (Col K H M) by (conclude_def Col ).
assert (Col H K M) by (forward_using lemma_collinearorder).
assert (neq K M) by (forward_using lemma_betweennotequal).
assert (neq M K) by (conclude lemma_inequalitysymmetric).
assert (Par F G M K) by (conclude lemma_collinearparallel).
assert (Col H M K) by (forward_using lemma_collinearorder).
assert (Par G L K M) by (conclude lemma_collinearparallel).
assert (Par G L M K) by (forward_using lemma_parallelflip).
assert (Par M K G L) by (conclude lemma_parallelsymmetric).
assert (Par M K F G) by (conclude lemma_parallelsymmetric).
assert (Par M K G F) by (forward_using lemma_parallelflip).
assert (Col G L F) by (conclude lemma_Playfair).
assert (Col G F L) by (forward_using lemma_collinearorder).
assert (nCol F L M) by (forward_using lemma_parallelNC).
assert (neq L F) by (forward_using lemma_NCdistinct).
assert (Par M K L F) by (conclude lemma_collinearparallel).
assert (Par L F M K) by (conclude lemma_parallelsymmetric).
assert (Par F L K M) by (forward_using lemma_parallelflip).
assert (PG F K M L) by (conclude_def PG ).
assert (nCol F K H) by (forward_using lemma_parallelNC).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H J E N) by (conclude lemma_equalanglestransitive).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (Out K H M) by (conclude lemma_ray4).
assert (Out K M H) by (conclude lemma_ray5).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (neq K F) by (forward_using lemma_NCdistinct).
assert (Out K F F) by (conclude lemma_ray4).
assert (nCol F K M) by (forward_using lemma_parallelNC).
assert (CongA F K M F K M) by (conclude lemma_equalanglesreflexive).
assert (CongA F K M F K H) by (conclude lemma_equalangleshelper).
assert (CongA F K M J E N) by (conclude lemma_equalanglestransitive).
assert (Col B O D) by (conclude_def Col ).
assert (Col B D O) by (forward_using lemma_collinearorder).
assert (nCol B D A) by (forward_using lemma_NCorder).
assert (TS A B D C) by (conclude_def TS ).
assert (Par G H L M) by (forward_using lemma_parallelflip).
assert (TP G H L M) by (conclude lemma_paralleldef2B).
assert (OS L M G H) by (conclude_def TP ).
assert (Par F K G H) by (forward_using lemma_parallelflip).
assert (Par G H F K) by (conclude lemma_parallelsymmetric).
assert (TP G H F K) by (conclude lemma_paralleldef2B).
assert (OS F K G H) by (conclude_def TP ).

*****
H140 : OS F K G H
H139 : TP G H F K
H138 : Par G H F K
H137 : Par F K G H
H136 : OS L M G H
H135 : TP G H L M
H134 : Par G H L M
H133 : TS A B D C
H132 : nCol B D A
H131 : Col B D O
H130 : Col B O D
H129 : CongA F K M J E N
H128 : CongA F K M F K H
H127 : CongA F K M F K M
H126 : nCol F K M
H125 : Out K F F
H124 : neq K F
H123 : eq F F
H122 : Out K M H
H121 : Out K H M
H120 : neq K H
H119 : CongA F K H J E N
H118 : CongA F K H H K F
H117 : nCol F K H
H116 : PG F K M L
H115 : Par F L K M
H114 : Par L F M K
H113 : Par M K L F
H112 : neq L F
H111 : nCol F L M
H110 : Col G F L
H109 : Col G L F
H108 : Par M K G F
H107 : Par M K F G
H106 : Par M K G L
H105 : Par G L M K
H104 : Par G L K M
H103 : Col H M K
H102 : Par F G M K
H101 : neq M K
H100 : neq K M
H99 : Col H K M
H98 : Col K H M
H97 : Par F G H K
H96 : Par G L H M
H95 : Par F G K H
H94 : Par F K M L
H93 : Par F K L M
H92 : Par L M G H
H91 : Par M L G H
H90 : Par F K G H
H89 : Col L M M
H88 : Col G H H
H87 : Col F K K
H86 : eq M M
H85 : eq H H
H84 : eq K K
H83 : neq L M
H82 : nCol H M L
H81 : Par G H M L
H80 : neq G H
H79 : nCol G H M
H78 : neq F K
H77 : BetS K H M
H76 : Out H G G
H75 : neq H G
H74 : eq G G
H73 : RT K H G G H M
H72 : RT G H M K H G
H71 : CongA F K H G H M
H70 : CongA F K H H K F
H69 : nCol F K H
H68 : nCol H K F
H67 : CongA G H M H K F
H66 : RT F K H K H G
H65 : OS F G K H
H64 : TP K H F G
H63 : Par K H F G
H62 : Par F G K H
H61 : Cong K s H K
H60 : BetS H K s
s : Point
H59 : neq H K
H58 : Par K F H G
H57 : Par F K H G
H56 : CongA H K F G H M
H55 : CongA J E N G H M
H54 : BetS B e C
H53 : TS M G H K
H52 : Midpoint B e C
H51 : EF D B e C G H M L
H50 : CongA G H M J E N
H49 : PG G H M L
M,L,e : Point
H48 : nCol G H K
H47 : nCol H G K
H46 : nCol K H G
H45 : Par F K H G
H44 : Triangle D B C
H43 : nCol D B C
H42 : OS S F K H
H41 : CongA H K F J E N
H40 : EF A B m D F K H G
H39 : PG F K H G
F,G : Point
H38 : nCol S K H
H37 : nCol H K S
H36 : neq H K
H35 : neq K H
H34 : Col R K K
H33 : eq K K
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (eq H H) by (conclude cn_equalityreflexive).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (Col R K K) by (conclude_def Col ).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (neq H K) by (conclude lemma_inequalitysymmetric).
assert (nCol H K S) by (conclude lemma_NChelper).
assert (nCol S K H) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F G, (PG F K H G /\\ EF A B m D F K H G /\\ CongA H K F J E N /\\ OS S F K H)) by (conclude proposition_42B);destruct Tf as [F[G]];spliter.
assert (nCol D B C) by (forward_using lemma_NCorder).
assert (Triangle D B C) by (conclude_def Triangle ).
assert (Par F K H G) by (conclude_def PG ).
assert (nCol K H G) by (forward_using lemma_parallelNC).
assert (nCol H G K) by (forward_using lemma_NCorder).
assert (nCol G H K) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists M L e, (PG G H M L /\\ CongA G H M J E N /\\ EF D B e C G H M L /\\ Midpoint B e C /\\ TS M G H K)) by (conclude proposition_44);destruct Tf as [M[L[e]]];spliter.
assert (BetS B e C) by (conclude_def Midpoint ).
assert (CongA J E N G H M) by (conclude lemma_equalanglessymmetric).
assert (CongA H K F G H M) by (conclude lemma_equalanglestransitive).
assert (Par F K H G) by (conclude_def PG ).
assert (Par K F H G) by (forward_using lemma_parallelflip).
assert (neq H K) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists s, (BetS H K s /\\ Cong K s H K)) by (conclude lemma_extension);destruct Tf as [s];spliter.
assert (Par F G K H) by (conclude_def PG ).
assert (Par K H F G) by (conclude lemma_parallelsymmetric).
assert (TP K H F G) by (conclude lemma_paralleldef2B).
assert (OS F G K H) by (conclude_def TP ).
assert (RT F K H K H G) by (conclude proposition_29C).
assert (CongA G H M H K F) by (conclude lemma_equalanglessymmetric).
assert (nCol H K F) by (conclude lemma_equalanglesNC).
assert (nCol F K H) by (forward_using lemma_NCorder).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H G H M) by (conclude lemma_equalanglestransitive).
assert (RT G H M K H G) by (conclude lemma_RTcongruence).
assert (RT K H G G H M) by (conclude lemma_RTsymmetric).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (neq H G) by (forward_using lemma_NCdistinct).
assert (Out H G G) by (conclude lemma_ray4).
assert (BetS K H M) by (conclude proposition_14).
assert (neq F K) by (forward_using lemma_NCdistinct).
assert (nCol G H M) by (conclude lemma_equalanglesNC).
assert (neq G H) by (forward_using lemma_NCdistinct).
assert (Par G H M L) by (conclude_def PG ).
assert (nCol H M L) by (forward_using lemma_parallelNC).
assert (neq L M) by (forward_using lemma_NCdistinct).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (eq H H) by (conclude cn_equalityreflexive).
assert (eq M M) by (conclude cn_equalityreflexive).
assert (Col F K K) by (conclude_def Col ).
assert (Col G H H) by (conclude_def Col ).
assert (Col L M M) by (conclude_def Col ).
assert (Par F K G H) by (forward_using lemma_parallelflip).
assert (Par M L G H) by (conclude lemma_parallelsymmetric).
assert (Par L M G H) by (forward_using lemma_parallelflip).
assert (Par F K L M) by (conclude proposition_30).
assert (Par F K M L) by (forward_using lemma_parallelflip).
assert (Par F G K H) by (conclude_def PG ).
assert (Par G L H M) by (conclude_def PG ).
assert (Par F G H K) by (forward_using lemma_parallelflip).
assert (Col K H M) by (conclude_def Col ).
assert (Col H K M) by (forward_using lemma_collinearorder).
assert (neq K M) by (forward_using lemma_betweennotequal).
assert (neq M K) by (conclude lemma_inequalitysymmetric).
assert (Par F G M K) by (conclude lemma_collinearparallel).
assert (Col H M K) by (forward_using lemma_collinearorder).
assert (Par G L K M) by (conclude lemma_collinearparallel).
assert (Par G L M K) by (forward_using lemma_parallelflip).
assert (Par M K G L) by (conclude lemma_parallelsymmetric).
assert (Par M K F G) by (conclude lemma_parallelsymmetric).
assert (Par M K G F) by (forward_using lemma_parallelflip).
assert (Col G L F) by (conclude lemma_Playfair).
assert (Col G F L) by (forward_using lemma_collinearorder).
assert (nCol F L M) by (forward_using lemma_parallelNC).
assert (neq L F) by (forward_using lemma_NCdistinct).
assert (Par M K L F) by (conclude lemma_collinearparallel).
assert (Par L F M K) by (conclude lemma_parallelsymmetric).
assert (Par F L K M) by (forward_using lemma_parallelflip).
assert (PG F K M L) by (conclude_def PG ).
assert (nCol F K H) by (forward_using lemma_parallelNC).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H J E N) by (conclude lemma_equalanglestransitive).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (Out K H M) by (conclude lemma_ray4).
assert (Out K M H) by (conclude lemma_ray5).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (neq K F) by (forward_using lemma_NCdistinct).
assert (Out K F F) by (conclude lemma_ray4).
assert (nCol F K M) by (forward_using lemma_parallelNC).
assert (CongA F K M F K M) by (conclude lemma_equalanglesreflexive).
assert (CongA F K M F K H) by (conclude lemma_equalangleshelper).
assert (CongA F K M J E N) by (conclude lemma_equalanglestransitive).
assert (Col B O D) by (conclude_def Col ).
assert (Col B D O) by (forward_using lemma_collinearorder).
assert (nCol B D A) by (forward_using lemma_NCorder).
assert (TS A B D C) by (conclude_def TS ).
assert (Par G H L M) by (forward_using lemma_parallelflip).
assert (TP G H L M) by (conclude lemma_paralleldef2B).
assert (OS L M G H) by (conclude_def TP ).
assert (Par F K G H) by (forward_using lemma_parallelflip).
assert (Par G H F K) by (conclude lemma_parallelsymmetric).
assert (TP G H F K) by (conclude lemma_paralleldef2B).
assert (OS F K G H) by (conclude_def TP ).
assert (eq H H) by (conclude cn_equalityreflexive).

*****
H141 : eq H H
H140 : OS F K G H
H139 : TP G H F K
H138 : Par G H F K
H137 : Par F K G H
H136 : OS L M G H
H135 : TP G H L M
H134 : Par G H L M
H133 : TS A B D C
H132 : nCol B D A
H131 : Col B D O
H130 : Col B O D
H129 : CongA F K M J E N
H128 : CongA F K M F K H
H127 : CongA F K M F K M
H126 : nCol F K M
H125 : Out K F F
H124 : neq K F
H123 : eq F F
H122 : Out K M H
H121 : Out K H M
H120 : neq K H
H119 : CongA F K H J E N
H118 : CongA F K H H K F
H117 : nCol F K H
H116 : PG F K M L
H115 : Par F L K M
H114 : Par L F M K
H113 : Par M K L F
H112 : neq L F
H111 : nCol F L M
H110 : Col G F L
H109 : Col G L F
H108 : Par M K G F
H107 : Par M K F G
H106 : Par M K G L
H105 : Par G L M K
H104 : Par G L K M
H103 : Col H M K
H102 : Par F G M K
H101 : neq M K
H100 : neq K M
H99 : Col H K M
H98 : Col K H M
H97 : Par F G H K
H96 : Par G L H M
H95 : Par F G K H
H94 : Par F K M L
H93 : Par F K L M
H92 : Par L M G H
H91 : Par M L G H
H90 : Par F K G H
H89 : Col L M M
H88 : Col G H H
H87 : Col F K K
H86 : eq M M
H85 : eq H H
H84 : eq K K
H83 : neq L M
H82 : nCol H M L
H81 : Par G H M L
H80 : neq G H
H79 : nCol G H M
H78 : neq F K
H77 : BetS K H M
H76 : Out H G G
H75 : neq H G
H74 : eq G G
H73 : RT K H G G H M
H72 : RT G H M K H G
H71 : CongA F K H G H M
H70 : CongA F K H H K F
H69 : nCol F K H
H68 : nCol H K F
H67 : CongA G H M H K F
H66 : RT F K H K H G
H65 : OS F G K H
H64 : TP K H F G
H63 : Par K H F G
H62 : Par F G K H
H61 : Cong K s H K
H60 : BetS H K s
s : Point
H59 : neq H K
H58 : Par K F H G
H57 : Par F K H G
H56 : CongA H K F G H M
H55 : CongA J E N G H M
H54 : BetS B e C
H53 : TS M G H K
H52 : Midpoint B e C
H51 : EF D B e C G H M L
H50 : CongA G H M J E N
H49 : PG G H M L
M,L,e : Point
H48 : nCol G H K
H47 : nCol H G K
H46 : nCol K H G
H45 : Par F K H G
H44 : Triangle D B C
H43 : nCol D B C
H42 : OS S F K H
H41 : CongA H K F J E N
H40 : EF A B m D F K H G
H39 : PG F K H G
F,G : Point
H38 : nCol S K H
H37 : nCol H K S
H36 : neq H K
H35 : neq K H
H34 : Col R K K
H33 : eq K K
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (Col G H H) by (conclude_def Col ).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (Col R K K) by (conclude_def Col ).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (neq H K) by (conclude lemma_inequalitysymmetric).
assert (nCol H K S) by (conclude lemma_NChelper).
assert (nCol S K H) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F G, (PG F K H G /\\ EF A B m D F K H G /\\ CongA H K F J E N /\\ OS S F K H)) by (conclude proposition_42B);destruct Tf as [F[G]];spliter.
assert (nCol D B C) by (forward_using lemma_NCorder).
assert (Triangle D B C) by (conclude_def Triangle ).
assert (Par F K H G) by (conclude_def PG ).
assert (nCol K H G) by (forward_using lemma_parallelNC).
assert (nCol H G K) by (forward_using lemma_NCorder).
assert (nCol G H K) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists M L e, (PG G H M L /\\ CongA G H M J E N /\\ EF D B e C G H M L /\\ Midpoint B e C /\\ TS M G H K)) by (conclude proposition_44);destruct Tf as [M[L[e]]];spliter.
assert (BetS B e C) by (conclude_def Midpoint ).
assert (CongA J E N G H M) by (conclude lemma_equalanglessymmetric).
assert (CongA H K F G H M) by (conclude lemma_equalanglestransitive).
assert (Par F K H G) by (conclude_def PG ).
assert (Par K F H G) by (forward_using lemma_parallelflip).
assert (neq H K) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists s, (BetS H K s /\\ Cong K s H K)) by (conclude lemma_extension);destruct Tf as [s];spliter.
assert (Par F G K H) by (conclude_def PG ).
assert (Par K H F G) by (conclude lemma_parallelsymmetric).
assert (TP K H F G) by (conclude lemma_paralleldef2B).
assert (OS F G K H) by (conclude_def TP ).
assert (RT F K H K H G) by (conclude proposition_29C).
assert (CongA G H M H K F) by (conclude lemma_equalanglessymmetric).
assert (nCol H K F) by (conclude lemma_equalanglesNC).
assert (nCol F K H) by (forward_using lemma_NCorder).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H G H M) by (conclude lemma_equalanglestransitive).
assert (RT G H M K H G) by (conclude lemma_RTcongruence).
assert (RT K H G G H M) by (conclude lemma_RTsymmetric).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (neq H G) by (forward_using lemma_NCdistinct).
assert (Out H G G) by (conclude lemma_ray4).
assert (BetS K H M) by (conclude proposition_14).
assert (neq F K) by (forward_using lemma_NCdistinct).
assert (nCol G H M) by (conclude lemma_equalanglesNC).
assert (neq G H) by (forward_using lemma_NCdistinct).
assert (Par G H M L) by (conclude_def PG ).
assert (nCol H M L) by (forward_using lemma_parallelNC).
assert (neq L M) by (forward_using lemma_NCdistinct).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (eq H H) by (conclude cn_equalityreflexive).
assert (eq M M) by (conclude cn_equalityreflexive).
assert (Col F K K) by (conclude_def Col ).
assert (Col G H H) by (conclude_def Col ).
assert (Col L M M) by (conclude_def Col ).
assert (Par F K G H) by (forward_using lemma_parallelflip).
assert (Par M L G H) by (conclude lemma_parallelsymmetric).
assert (Par L M G H) by (forward_using lemma_parallelflip).
assert (Par F K L M) by (conclude proposition_30).
assert (Par F K M L) by (forward_using lemma_parallelflip).
assert (Par F G K H) by (conclude_def PG ).
assert (Par G L H M) by (conclude_def PG ).
assert (Par F G H K) by (forward_using lemma_parallelflip).
assert (Col K H M) by (conclude_def Col ).
assert (Col H K M) by (forward_using lemma_collinearorder).
assert (neq K M) by (forward_using lemma_betweennotequal).
assert (neq M K) by (conclude lemma_inequalitysymmetric).
assert (Par F G M K) by (conclude lemma_collinearparallel).
assert (Col H M K) by (forward_using lemma_collinearorder).
assert (Par G L K M) by (conclude lemma_collinearparallel).
assert (Par G L M K) by (forward_using lemma_parallelflip).
assert (Par M K G L) by (conclude lemma_parallelsymmetric).
assert (Par M K F G) by (conclude lemma_parallelsymmetric).
assert (Par M K G F) by (forward_using lemma_parallelflip).
assert (Col G L F) by (conclude lemma_Playfair).
assert (Col G F L) by (forward_using lemma_collinearorder).
assert (nCol F L M) by (forward_using lemma_parallelNC).
assert (neq L F) by (forward_using lemma_NCdistinct).
assert (Par M K L F) by (conclude lemma_collinearparallel).
assert (Par L F M K) by (conclude lemma_parallelsymmetric).
assert (Par F L K M) by (forward_using lemma_parallelflip).
assert (PG F K M L) by (conclude_def PG ).
assert (nCol F K H) by (forward_using lemma_parallelNC).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H J E N) by (conclude lemma_equalanglestransitive).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (Out K H M) by (conclude lemma_ray4).
assert (Out K M H) by (conclude lemma_ray5).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (neq K F) by (forward_using lemma_NCdistinct).
assert (Out K F F) by (conclude lemma_ray4).
assert (nCol F K M) by (forward_using lemma_parallelNC).
assert (CongA F K M F K M) by (conclude lemma_equalanglesreflexive).
assert (CongA F K M F K H) by (conclude lemma_equalangleshelper).
assert (CongA F K M J E N) by (conclude lemma_equalanglestransitive).
assert (Col B O D) by (conclude_def Col ).
assert (Col B D O) by (forward_using lemma_collinearorder).
assert (nCol B D A) by (forward_using lemma_NCorder).
assert (TS A B D C) by (conclude_def TS ).
assert (Par G H L M) by (forward_using lemma_parallelflip).
assert (TP G H L M) by (conclude lemma_paralleldef2B).
assert (OS L M G H) by (conclude_def TP ).
assert (Par F K G H) by (forward_using lemma_parallelflip).
assert (Par G H F K) by (conclude lemma_parallelsymmetric).
assert (TP G H F K) by (conclude lemma_paralleldef2B).
assert (OS F K G H) by (conclude_def TP ).
assert (eq H H) by (conclude cn_equalityreflexive).
assert (Col G H H) by (conclude_def Col ).

*****
H142 : Col G H H
H141 : eq H H
H140 : OS F K G H
H139 : TP G H F K
H138 : Par G H F K
H137 : Par F K G H
H136 : OS L M G H
H135 : TP G H L M
H134 : Par G H L M
H133 : TS A B D C
H132 : nCol B D A
H131 : Col B D O
H130 : Col B O D
H129 : CongA F K M J E N
H128 : CongA F K M F K H
H127 : CongA F K M F K M
H126 : nCol F K M
H125 : Out K F F
H124 : neq K F
H123 : eq F F
H122 : Out K M H
H121 : Out K H M
H120 : neq K H
H119 : CongA F K H J E N
H118 : CongA F K H H K F
H117 : nCol F K H
H116 : PG F K M L
H115 : Par F L K M
H114 : Par L F M K
H113 : Par M K L F
H112 : neq L F
H111 : nCol F L M
H110 : Col G F L
H109 : Col G L F
H108 : Par M K G F
H107 : Par M K F G
H106 : Par M K G L
H105 : Par G L M K
H104 : Par G L K M
H103 : Col H M K
H102 : Par F G M K
H101 : neq M K
H100 : neq K M
H99 : Col H K M
H98 : Col K H M
H97 : Par F G H K
H96 : Par G L H M
H95 : Par F G K H
H94 : Par F K M L
H93 : Par F K L M
H92 : Par L M G H
H91 : Par M L G H
H90 : Par F K G H
H89 : Col L M M
H88 : Col G H H
H87 : Col F K K
H86 : eq M M
H85 : eq H H
H84 : eq K K
H83 : neq L M
H82 : nCol H M L
H81 : Par G H M L
H80 : neq G H
H79 : nCol G H M
H78 : neq F K
H77 : BetS K H M
H76 : Out H G G
H75 : neq H G
H74 : eq G G
H73 : RT K H G G H M
H72 : RT G H M K H G
H71 : CongA F K H G H M
H70 : CongA F K H H K F
H69 : nCol F K H
H68 : nCol H K F
H67 : CongA G H M H K F
H66 : RT F K H K H G
H65 : OS F G K H
H64 : TP K H F G
H63 : Par K H F G
H62 : Par F G K H
H61 : Cong K s H K
H60 : BetS H K s
s : Point
H59 : neq H K
H58 : Par K F H G
H57 : Par F K H G
H56 : CongA H K F G H M
H55 : CongA J E N G H M
H54 : BetS B e C
H53 : TS M G H K
H52 : Midpoint B e C
H51 : EF D B e C G H M L
H50 : CongA G H M J E N
H49 : PG G H M L
M,L,e : Point
H48 : nCol G H K
H47 : nCol H G K
H46 : nCol K H G
H45 : Par F K H G
H44 : Triangle D B C
H43 : nCol D B C
H42 : OS S F K H
H41 : CongA H K F J E N
H40 : EF A B m D F K H G
H39 : PG F K H G
F,G : Point
H38 : nCol S K H
H37 : nCol H K S
H36 : neq H K
H35 : neq K H
H34 : Col R K K
H33 : eq K K
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (TS K G H M) by (conclude_def TS ).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (Col R K K) by (conclude_def Col ).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (neq H K) by (conclude lemma_inequalitysymmetric).
assert (nCol H K S) by (conclude lemma_NChelper).
assert (nCol S K H) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F G, (PG F K H G /\\ EF A B m D F K H G /\\ CongA H K F J E N /\\ OS S F K H)) by (conclude proposition_42B);destruct Tf as [F[G]];spliter.
assert (nCol D B C) by (forward_using lemma_NCorder).
assert (Triangle D B C) by (conclude_def Triangle ).
assert (Par F K H G) by (conclude_def PG ).
assert (nCol K H G) by (forward_using lemma_parallelNC).
assert (nCol H G K) by (forward_using lemma_NCorder).
assert (nCol G H K) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists M L e, (PG G H M L /\\ CongA G H M J E N /\\ EF D B e C G H M L /\\ Midpoint B e C /\\ TS M G H K)) by (conclude proposition_44);destruct Tf as [M[L[e]]];spliter.
assert (BetS B e C) by (conclude_def Midpoint ).
assert (CongA J E N G H M) by (conclude lemma_equalanglessymmetric).
assert (CongA H K F G H M) by (conclude lemma_equalanglestransitive).
assert (Par F K H G) by (conclude_def PG ).
assert (Par K F H G) by (forward_using lemma_parallelflip).
assert (neq H K) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists s, (BetS H K s /\\ Cong K s H K)) by (conclude lemma_extension);destruct Tf as [s];spliter.
assert (Par F G K H) by (conclude_def PG ).
assert (Par K H F G) by (conclude lemma_parallelsymmetric).
assert (TP K H F G) by (conclude lemma_paralleldef2B).
assert (OS F G K H) by (conclude_def TP ).
assert (RT F K H K H G) by (conclude proposition_29C).
assert (CongA G H M H K F) by (conclude lemma_equalanglessymmetric).
assert (nCol H K F) by (conclude lemma_equalanglesNC).
assert (nCol F K H) by (forward_using lemma_NCorder).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H G H M) by (conclude lemma_equalanglestransitive).
assert (RT G H M K H G) by (conclude lemma_RTcongruence).
assert (RT K H G G H M) by (conclude lemma_RTsymmetric).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (neq H G) by (forward_using lemma_NCdistinct).
assert (Out H G G) by (conclude lemma_ray4).
assert (BetS K H M) by (conclude proposition_14).
assert (neq F K) by (forward_using lemma_NCdistinct).
assert (nCol G H M) by (conclude lemma_equalanglesNC).
assert (neq G H) by (forward_using lemma_NCdistinct).
assert (Par G H M L) by (conclude_def PG ).
assert (nCol H M L) by (forward_using lemma_parallelNC).
assert (neq L M) by (forward_using lemma_NCdistinct).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (eq H H) by (conclude cn_equalityreflexive).
assert (eq M M) by (conclude cn_equalityreflexive).
assert (Col F K K) by (conclude_def Col ).
assert (Col G H H) by (conclude_def Col ).
assert (Col L M M) by (conclude_def Col ).
assert (Par F K G H) by (forward_using lemma_parallelflip).
assert (Par M L G H) by (conclude lemma_parallelsymmetric).
assert (Par L M G H) by (forward_using lemma_parallelflip).
assert (Par F K L M) by (conclude proposition_30).
assert (Par F K M L) by (forward_using lemma_parallelflip).
assert (Par F G K H) by (conclude_def PG ).
assert (Par G L H M) by (conclude_def PG ).
assert (Par F G H K) by (forward_using lemma_parallelflip).
assert (Col K H M) by (conclude_def Col ).
assert (Col H K M) by (forward_using lemma_collinearorder).
assert (neq K M) by (forward_using lemma_betweennotequal).
assert (neq M K) by (conclude lemma_inequalitysymmetric).
assert (Par F G M K) by (conclude lemma_collinearparallel).
assert (Col H M K) by (forward_using lemma_collinearorder).
assert (Par G L K M) by (conclude lemma_collinearparallel).
assert (Par G L M K) by (forward_using lemma_parallelflip).
assert (Par M K G L) by (conclude lemma_parallelsymmetric).
assert (Par M K F G) by (conclude lemma_parallelsymmetric).
assert (Par M K G F) by (forward_using lemma_parallelflip).
assert (Col G L F) by (conclude lemma_Playfair).
assert (Col G F L) by (forward_using lemma_collinearorder).
assert (nCol F L M) by (forward_using lemma_parallelNC).
assert (neq L F) by (forward_using lemma_NCdistinct).
assert (Par M K L F) by (conclude lemma_collinearparallel).
assert (Par L F M K) by (conclude lemma_parallelsymmetric).
assert (Par F L K M) by (forward_using lemma_parallelflip).
assert (PG F K M L) by (conclude_def PG ).
assert (nCol F K H) by (forward_using lemma_parallelNC).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H J E N) by (conclude lemma_equalanglestransitive).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (Out K H M) by (conclude lemma_ray4).
assert (Out K M H) by (conclude lemma_ray5).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (neq K F) by (forward_using lemma_NCdistinct).
assert (Out K F F) by (conclude lemma_ray4).
assert (nCol F K M) by (forward_using lemma_parallelNC).
assert (CongA F K M F K M) by (conclude lemma_equalanglesreflexive).
assert (CongA F K M F K H) by (conclude lemma_equalangleshelper).
assert (CongA F K M J E N) by (conclude lemma_equalanglestransitive).
assert (Col B O D) by (conclude_def Col ).
assert (Col B D O) by (forward_using lemma_collinearorder).
assert (nCol B D A) by (forward_using lemma_NCorder).
assert (TS A B D C) by (conclude_def TS ).
assert (Par G H L M) by (forward_using lemma_parallelflip).
assert (TP G H L M) by (conclude lemma_paralleldef2B).
assert (OS L M G H) by (conclude_def TP ).
assert (Par F K G H) by (forward_using lemma_parallelflip).
assert (Par G H F K) by (conclude lemma_parallelsymmetric).
assert (TP G H F K) by (conclude lemma_paralleldef2B).
assert (OS F K G H) by (conclude_def TP ).
assert (eq H H) by (conclude cn_equalityreflexive).
assert (Col G H H) by (conclude_def Col ).
assert (TS K G H M) by (conclude_def TS ).

*****
H143 : TS K G H M
H142 : Col G H H
H141 : eq H H
H140 : OS F K G H
H139 : TP G H F K
H138 : Par G H F K
H137 : Par F K G H
H136 : OS L M G H
H135 : TP G H L M
H134 : Par G H L M
H133 : TS A B D C
H132 : nCol B D A
H131 : Col B D O
H130 : Col B O D
H129 : CongA F K M J E N
H128 : CongA F K M F K H
H127 : CongA F K M F K M
H126 : nCol F K M
H125 : Out K F F
H124 : neq K F
H123 : eq F F
H122 : Out K M H
H121 : Out K H M
H120 : neq K H
H119 : CongA F K H J E N
H118 : CongA F K H H K F
H117 : nCol F K H
H116 : PG F K M L
H115 : Par F L K M
H114 : Par L F M K
H113 : Par M K L F
H112 : neq L F
H111 : nCol F L M
H110 : Col G F L
H109 : Col G L F
H108 : Par M K G F
H107 : Par M K F G
H106 : Par M K G L
H105 : Par G L M K
H104 : Par G L K M
H103 : Col H M K
H102 : Par F G M K
H101 : neq M K
H100 : neq K M
H99 : Col H K M
H98 : Col K H M
H97 : Par F G H K
H96 : Par G L H M
H95 : Par F G K H
H94 : Par F K M L
H93 : Par F K L M
H92 : Par L M G H
H91 : Par M L G H
H90 : Par F K G H
H89 : Col L M M
H88 : Col G H H
H87 : Col F K K
H86 : eq M M
H85 : eq H H
H84 : eq K K
H83 : neq L M
H82 : nCol H M L
H81 : Par G H M L
H80 : neq G H
H79 : nCol G H M
H78 : neq F K
H77 : BetS K H M
H76 : Out H G G
H75 : neq H G
H74 : eq G G
H73 : RT K H G G H M
H72 : RT G H M K H G
H71 : CongA F K H G H M
H70 : CongA F K H H K F
H69 : nCol F K H
H68 : nCol H K F
H67 : CongA G H M H K F
H66 : RT F K H K H G
H65 : OS F G K H
H64 : TP K H F G
H63 : Par K H F G
H62 : Par F G K H
H61 : Cong K s H K
H60 : BetS H K s
s : Point
H59 : neq H K
H58 : Par K F H G
H57 : Par F K H G
H56 : CongA H K F G H M
H55 : CongA J E N G H M
H54 : BetS B e C
H53 : TS M G H K
H52 : Midpoint B e C
H51 : EF D B e C G H M L
H50 : CongA G H M J E N
H49 : PG G H M L
M,L,e : Point
H48 : nCol G H K
H47 : nCol H G K
H46 : nCol K H G
H45 : Par F K H G
H44 : Triangle D B C
H43 : nCol D B C
H42 : OS S F K H
H41 : CongA H K F J E N
H40 : EF A B m D F K H G
H39 : PG F K H G
F,G : Point
H38 : nCol S K H
H37 : nCol H K S
H36 : neq H K
H35 : neq K H
H34 : Col R K K
H33 : eq K K
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (TS F G H M) by (conclude lemma_planeseparation).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (Col R K K) by (conclude_def Col ).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (neq H K) by (conclude lemma_inequalitysymmetric).
assert (nCol H K S) by (conclude lemma_NChelper).
assert (nCol S K H) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F G, (PG F K H G /\\ EF A B m D F K H G /\\ CongA H K F J E N /\\ OS S F K H)) by (conclude proposition_42B);destruct Tf as [F[G]];spliter.
assert (nCol D B C) by (forward_using lemma_NCorder).
assert (Triangle D B C) by (conclude_def Triangle ).
assert (Par F K H G) by (conclude_def PG ).
assert (nCol K H G) by (forward_using lemma_parallelNC).
assert (nCol H G K) by (forward_using lemma_NCorder).
assert (nCol G H K) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists M L e, (PG G H M L /\\ CongA G H M J E N /\\ EF D B e C G H M L /\\ Midpoint B e C /\\ TS M G H K)) by (conclude proposition_44);destruct Tf as [M[L[e]]];spliter.
assert (BetS B e C) by (conclude_def Midpoint ).
assert (CongA J E N G H M) by (conclude lemma_equalanglessymmetric).
assert (CongA H K F G H M) by (conclude lemma_equalanglestransitive).
assert (Par F K H G) by (conclude_def PG ).
assert (Par K F H G) by (forward_using lemma_parallelflip).
assert (neq H K) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists s, (BetS H K s /\\ Cong K s H K)) by (conclude lemma_extension);destruct Tf as [s];spliter.
assert (Par F G K H) by (conclude_def PG ).
assert (Par K H F G) by (conclude lemma_parallelsymmetric).
assert (TP K H F G) by (conclude lemma_paralleldef2B).
assert (OS F G K H) by (conclude_def TP ).
assert (RT F K H K H G) by (conclude proposition_29C).
assert (CongA G H M H K F) by (conclude lemma_equalanglessymmetric).
assert (nCol H K F) by (conclude lemma_equalanglesNC).
assert (nCol F K H) by (forward_using lemma_NCorder).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H G H M) by (conclude lemma_equalanglestransitive).
assert (RT G H M K H G) by (conclude lemma_RTcongruence).
assert (RT K H G G H M) by (conclude lemma_RTsymmetric).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (neq H G) by (forward_using lemma_NCdistinct).
assert (Out H G G) by (conclude lemma_ray4).
assert (BetS K H M) by (conclude proposition_14).
assert (neq F K) by (forward_using lemma_NCdistinct).
assert (nCol G H M) by (conclude lemma_equalanglesNC).
assert (neq G H) by (forward_using lemma_NCdistinct).
assert (Par G H M L) by (conclude_def PG ).
assert (nCol H M L) by (forward_using lemma_parallelNC).
assert (neq L M) by (forward_using lemma_NCdistinct).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (eq H H) by (conclude cn_equalityreflexive).
assert (eq M M) by (conclude cn_equalityreflexive).
assert (Col F K K) by (conclude_def Col ).
assert (Col G H H) by (conclude_def Col ).
assert (Col L M M) by (conclude_def Col ).
assert (Par F K G H) by (forward_using lemma_parallelflip).
assert (Par M L G H) by (conclude lemma_parallelsymmetric).
assert (Par L M G H) by (forward_using lemma_parallelflip).
assert (Par F K L M) by (conclude proposition_30).
assert (Par F K M L) by (forward_using lemma_parallelflip).
assert (Par F G K H) by (conclude_def PG ).
assert (Par G L H M) by (conclude_def PG ).
assert (Par F G H K) by (forward_using lemma_parallelflip).
assert (Col K H M) by (conclude_def Col ).
assert (Col H K M) by (forward_using lemma_collinearorder).
assert (neq K M) by (forward_using lemma_betweennotequal).
assert (neq M K) by (conclude lemma_inequalitysymmetric).
assert (Par F G M K) by (conclude lemma_collinearparallel).
assert (Col H M K) by (forward_using lemma_collinearorder).
assert (Par G L K M) by (conclude lemma_collinearparallel).
assert (Par G L M K) by (forward_using lemma_parallelflip).
assert (Par M K G L) by (conclude lemma_parallelsymmetric).
assert (Par M K F G) by (conclude lemma_parallelsymmetric).
assert (Par M K G F) by (forward_using lemma_parallelflip).
assert (Col G L F) by (conclude lemma_Playfair).
assert (Col G F L) by (forward_using lemma_collinearorder).
assert (nCol F L M) by (forward_using lemma_parallelNC).
assert (neq L F) by (forward_using lemma_NCdistinct).
assert (Par M K L F) by (conclude lemma_collinearparallel).
assert (Par L F M K) by (conclude lemma_parallelsymmetric).
assert (Par F L K M) by (forward_using lemma_parallelflip).
assert (PG F K M L) by (conclude_def PG ).
assert (nCol F K H) by (forward_using lemma_parallelNC).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H J E N) by (conclude lemma_equalanglestransitive).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (Out K H M) by (conclude lemma_ray4).
assert (Out K M H) by (conclude lemma_ray5).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (neq K F) by (forward_using lemma_NCdistinct).
assert (Out K F F) by (conclude lemma_ray4).
assert (nCol F K M) by (forward_using lemma_parallelNC).
assert (CongA F K M F K M) by (conclude lemma_equalanglesreflexive).
assert (CongA F K M F K H) by (conclude lemma_equalangleshelper).
assert (CongA F K M J E N) by (conclude lemma_equalanglestransitive).
assert (Col B O D) by (conclude_def Col ).
assert (Col B D O) by (forward_using lemma_collinearorder).
assert (nCol B D A) by (forward_using lemma_NCorder).
assert (TS A B D C) by (conclude_def TS ).
assert (Par G H L M) by (forward_using lemma_parallelflip).
assert (TP G H L M) by (conclude lemma_paralleldef2B).
assert (OS L M G H) by (conclude_def TP ).
assert (Par F K G H) by (forward_using lemma_parallelflip).
assert (Par G H F K) by (conclude lemma_parallelsymmetric).
assert (TP G H F K) by (conclude lemma_paralleldef2B).
assert (OS F K G H) by (conclude_def TP ).
assert (eq H H) by (conclude cn_equalityreflexive).
assert (Col G H H) by (conclude_def Col ).
assert (TS K G H M) by (conclude_def TS ).
assert (TS F G H M) by (conclude lemma_planeseparation).

*****
H144 : TS F G H M
H143 : TS K G H M
H142 : Col G H H
H141 : eq H H
H140 : OS F K G H
H139 : TP G H F K
H138 : Par G H F K
H137 : Par F K G H
H136 : OS L M G H
H135 : TP G H L M
H134 : Par G H L M
H133 : TS A B D C
H132 : nCol B D A
H131 : Col B D O
H130 : Col B O D
H129 : CongA F K M J E N
H128 : CongA F K M F K H
H127 : CongA F K M F K M
H126 : nCol F K M
H125 : Out K F F
H124 : neq K F
H123 : eq F F
H122 : Out K M H
H121 : Out K H M
H120 : neq K H
H119 : CongA F K H J E N
H118 : CongA F K H H K F
H117 : nCol F K H
H116 : PG F K M L
H115 : Par F L K M
H114 : Par L F M K
H113 : Par M K L F
H112 : neq L F
H111 : nCol F L M
H110 : Col G F L
H109 : Col G L F
H108 : Par M K G F
H107 : Par M K F G
H106 : Par M K G L
H105 : Par G L M K
H104 : Par G L K M
H103 : Col H M K
H102 : Par F G M K
H101 : neq M K
H100 : neq K M
H99 : Col H K M
H98 : Col K H M
H97 : Par F G H K
H96 : Par G L H M
H95 : Par F G K H
H94 : Par F K M L
H93 : Par F K L M
H92 : Par L M G H
H91 : Par M L G H
H90 : Par F K G H
H89 : Col L M M
H88 : Col G H H
H87 : Col F K K
H86 : eq M M
H85 : eq H H
H84 : eq K K
H83 : neq L M
H82 : nCol H M L
H81 : Par G H M L
H80 : neq G H
H79 : nCol G H M
H78 : neq F K
H77 : BetS K H M
H76 : Out H G G
H75 : neq H G
H74 : eq G G
H73 : RT K H G G H M
H72 : RT G H M K H G
H71 : CongA F K H G H M
H70 : CongA F K H H K F
H69 : nCol F K H
H68 : nCol H K F
H67 : CongA G H M H K F
H66 : RT F K H K H G
H65 : OS F G K H
H64 : TP K H F G
H63 : Par K H F G
H62 : Par F G K H
H61 : Cong K s H K
H60 : BetS H K s
s : Point
H59 : neq H K
H58 : Par K F H G
H57 : Par F K H G
H56 : CongA H K F G H M
H55 : CongA J E N G H M
H54 : BetS B e C
H53 : TS M G H K
H52 : Midpoint B e C
H51 : EF D B e C G H M L
H50 : CongA G H M J E N
H49 : PG G H M L
M,L,e : Point
H48 : nCol G H K
H47 : nCol H G K
H46 : nCol K H G
H45 : Par F K H G
H44 : Triangle D B C
H43 : nCol D B C
H42 : OS S F K H
H41 : CongA H K F J E N
H40 : EF A B m D F K H G
H39 : PG F K H G
F,G : Point
H38 : nCol S K H
H37 : nCol H K S
H36 : neq H K
H35 : neq K H
H34 : Col R K K
H33 : eq K K
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (TS M G H F) by (conclude lemma_oppositesidesymmetric).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (Col R K K) by (conclude_def Col ).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (neq H K) by (conclude lemma_inequalitysymmetric).
assert (nCol H K S) by (conclude lemma_NChelper).
assert (nCol S K H) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F G, (PG F K H G /\\ EF A B m D F K H G /\\ CongA H K F J E N /\\ OS S F K H)) by (conclude proposition_42B);destruct Tf as [F[G]];spliter.
assert (nCol D B C) by (forward_using lemma_NCorder).
assert (Triangle D B C) by (conclude_def Triangle ).
assert (Par F K H G) by (conclude_def PG ).
assert (nCol K H G) by (forward_using lemma_parallelNC).
assert (nCol H G K) by (forward_using lemma_NCorder).
assert (nCol G H K) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists M L e, (PG G H M L /\\ CongA G H M J E N /\\ EF D B e C G H M L /\\ Midpoint B e C /\\ TS M G H K)) by (conclude proposition_44);destruct Tf as [M[L[e]]];spliter.
assert (BetS B e C) by (conclude_def Midpoint ).
assert (CongA J E N G H M) by (conclude lemma_equalanglessymmetric).
assert (CongA H K F G H M) by (conclude lemma_equalanglestransitive).
assert (Par F K H G) by (conclude_def PG ).
assert (Par K F H G) by (forward_using lemma_parallelflip).
assert (neq H K) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists s, (BetS H K s /\\ Cong K s H K)) by (conclude lemma_extension);destruct Tf as [s];spliter.
assert (Par F G K H) by (conclude_def PG ).
assert (Par K H F G) by (conclude lemma_parallelsymmetric).
assert (TP K H F G) by (conclude lemma_paralleldef2B).
assert (OS F G K H) by (conclude_def TP ).
assert (RT F K H K H G) by (conclude proposition_29C).
assert (CongA G H M H K F) by (conclude lemma_equalanglessymmetric).
assert (nCol H K F) by (conclude lemma_equalanglesNC).
assert (nCol F K H) by (forward_using lemma_NCorder).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H G H M) by (conclude lemma_equalanglestransitive).
assert (RT G H M K H G) by (conclude lemma_RTcongruence).
assert (RT K H G G H M) by (conclude lemma_RTsymmetric).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (neq H G) by (forward_using lemma_NCdistinct).
assert (Out H G G) by (conclude lemma_ray4).
assert (BetS K H M) by (conclude proposition_14).
assert (neq F K) by (forward_using lemma_NCdistinct).
assert (nCol G H M) by (conclude lemma_equalanglesNC).
assert (neq G H) by (forward_using lemma_NCdistinct).
assert (Par G H M L) by (conclude_def PG ).
assert (nCol H M L) by (forward_using lemma_parallelNC).
assert (neq L M) by (forward_using lemma_NCdistinct).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (eq H H) by (conclude cn_equalityreflexive).
assert (eq M M) by (conclude cn_equalityreflexive).
assert (Col F K K) by (conclude_def Col ).
assert (Col G H H) by (conclude_def Col ).
assert (Col L M M) by (conclude_def Col ).
assert (Par F K G H) by (forward_using lemma_parallelflip).
assert (Par M L G H) by (conclude lemma_parallelsymmetric).
assert (Par L M G H) by (forward_using lemma_parallelflip).
assert (Par F K L M) by (conclude proposition_30).
assert (Par F K M L) by (forward_using lemma_parallelflip).
assert (Par F G K H) by (conclude_def PG ).
assert (Par G L H M) by (conclude_def PG ).
assert (Par F G H K) by (forward_using lemma_parallelflip).
assert (Col K H M) by (conclude_def Col ).
assert (Col H K M) by (forward_using lemma_collinearorder).
assert (neq K M) by (forward_using lemma_betweennotequal).
assert (neq M K) by (conclude lemma_inequalitysymmetric).
assert (Par F G M K) by (conclude lemma_collinearparallel).
assert (Col H M K) by (forward_using lemma_collinearorder).
assert (Par G L K M) by (conclude lemma_collinearparallel).
assert (Par G L M K) by (forward_using lemma_parallelflip).
assert (Par M K G L) by (conclude lemma_parallelsymmetric).
assert (Par M K F G) by (conclude lemma_parallelsymmetric).
assert (Par M K G F) by (forward_using lemma_parallelflip).
assert (Col G L F) by (conclude lemma_Playfair).
assert (Col G F L) by (forward_using lemma_collinearorder).
assert (nCol F L M) by (forward_using lemma_parallelNC).
assert (neq L F) by (forward_using lemma_NCdistinct).
assert (Par M K L F) by (conclude lemma_collinearparallel).
assert (Par L F M K) by (conclude lemma_parallelsymmetric).
assert (Par F L K M) by (forward_using lemma_parallelflip).
assert (PG F K M L) by (conclude_def PG ).
assert (nCol F K H) by (forward_using lemma_parallelNC).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H J E N) by (conclude lemma_equalanglestransitive).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (Out K H M) by (conclude lemma_ray4).
assert (Out K M H) by (conclude lemma_ray5).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (neq K F) by (forward_using lemma_NCdistinct).
assert (Out K F F) by (conclude lemma_ray4).
assert (nCol F K M) by (forward_using lemma_parallelNC).
assert (CongA F K M F K M) by (conclude lemma_equalanglesreflexive).
assert (CongA F K M F K H) by (conclude lemma_equalangleshelper).
assert (CongA F K M J E N) by (conclude lemma_equalanglestransitive).
assert (Col B O D) by (conclude_def Col ).
assert (Col B D O) by (forward_using lemma_collinearorder).
assert (nCol B D A) by (forward_using lemma_NCorder).
assert (TS A B D C) by (conclude_def TS ).
assert (Par G H L M) by (forward_using lemma_parallelflip).
assert (TP G H L M) by (conclude lemma_paralleldef2B).
assert (OS L M G H) by (conclude_def TP ).
assert (Par F K G H) by (forward_using lemma_parallelflip).
assert (Par G H F K) by (conclude lemma_parallelsymmetric).
assert (TP G H F K) by (conclude lemma_paralleldef2B).
assert (OS F K G H) by (conclude_def TP ).
assert (eq H H) by (conclude cn_equalityreflexive).
assert (Col G H H) by (conclude_def Col ).
assert (TS K G H M) by (conclude_def TS ).
assert (TS F G H M) by (conclude lemma_planeseparation).
assert (TS M G H F) by (conclude lemma_oppositesidesymmetric).

*****
H145 : TS M G H F
H144 : TS F G H M
H143 : TS K G H M
H142 : Col G H H
H141 : eq H H
H140 : OS F K G H
H139 : TP G H F K
H138 : Par G H F K
H137 : Par F K G H
H136 : OS L M G H
H135 : TP G H L M
H134 : Par G H L M
H133 : TS A B D C
H132 : nCol B D A
H131 : Col B D O
H130 : Col B O D
H129 : CongA F K M J E N
H128 : CongA F K M F K H
H127 : CongA F K M F K M
H126 : nCol F K M
H125 : Out K F F
H124 : neq K F
H123 : eq F F
H122 : Out K M H
H121 : Out K H M
H120 : neq K H
H119 : CongA F K H J E N
H118 : CongA F K H H K F
H117 : nCol F K H
H116 : PG F K M L
H115 : Par F L K M
H114 : Par L F M K
H113 : Par M K L F
H112 : neq L F
H111 : nCol F L M
H110 : Col G F L
H109 : Col G L F
H108 : Par M K G F
H107 : Par M K F G
H106 : Par M K G L
H105 : Par G L M K
H104 : Par G L K M
H103 : Col H M K
H102 : Par F G M K
H101 : neq M K
H100 : neq K M
H99 : Col H K M
H98 : Col K H M
H97 : Par F G H K
H96 : Par G L H M
H95 : Par F G K H
H94 : Par F K M L
H93 : Par F K L M
H92 : Par L M G H
H91 : Par M L G H
H90 : Par F K G H
H89 : Col L M M
H88 : Col G H H
H87 : Col F K K
H86 : eq M M
H85 : eq H H
H84 : eq K K
H83 : neq L M
H82 : nCol H M L
H81 : Par G H M L
H80 : neq G H
H79 : nCol G H M
H78 : neq F K
H77 : BetS K H M
H76 : Out H G G
H75 : neq H G
H74 : eq G G
H73 : RT K H G G H M
H72 : RT G H M K H G
H71 : CongA F K H G H M
H70 : CongA F K H H K F
H69 : nCol F K H
H68 : nCol H K F
H67 : CongA G H M H K F
H66 : RT F K H K H G
H65 : OS F G K H
H64 : TP K H F G
H63 : Par K H F G
H62 : Par F G K H
H61 : Cong K s H K
H60 : BetS H K s
s : Point
H59 : neq H K
H58 : Par K F H G
H57 : Par F K H G
H56 : CongA H K F G H M
H55 : CongA J E N G H M
H54 : BetS B e C
H53 : TS M G H K
H52 : Midpoint B e C
H51 : EF D B e C G H M L
H50 : CongA G H M J E N
H49 : PG G H M L
M,L,e : Point
H48 : nCol G H K
H47 : nCol H G K
H46 : nCol K H G
H45 : Par F K H G
H44 : Triangle D B C
H43 : nCol D B C
H42 : OS S F K H
H41 : CongA H K F J E N
H40 : EF A B m D F K H G
H39 : PG F K H G
F,G : Point
H38 : nCol S K H
H37 : nCol H K S
H36 : neq H K
H35 : neq K H
H34 : Col R K K
H33 : eq K K
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (TS L G H F) by (conclude lemma_planeseparation).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (Col R K K) by (conclude_def Col ).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (neq H K) by (conclude lemma_inequalitysymmetric).
assert (nCol H K S) by (conclude lemma_NChelper).
assert (nCol S K H) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F G, (PG F K H G /\\ EF A B m D F K H G /\\ CongA H K F J E N /\\ OS S F K H)) by (conclude proposition_42B);destruct Tf as [F[G]];spliter.
assert (nCol D B C) by (forward_using lemma_NCorder).
assert (Triangle D B C) by (conclude_def Triangle ).
assert (Par F K H G) by (conclude_def PG ).
assert (nCol K H G) by (forward_using lemma_parallelNC).
assert (nCol H G K) by (forward_using lemma_NCorder).
assert (nCol G H K) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists M L e, (PG G H M L /\\ CongA G H M J E N /\\ EF D B e C G H M L /\\ Midpoint B e C /\\ TS M G H K)) by (conclude proposition_44);destruct Tf as [M[L[e]]];spliter.
assert (BetS B e C) by (conclude_def Midpoint ).
assert (CongA J E N G H M) by (conclude lemma_equalanglessymmetric).
assert (CongA H K F G H M) by (conclude lemma_equalanglestransitive).
assert (Par F K H G) by (conclude_def PG ).
assert (Par K F H G) by (forward_using lemma_parallelflip).
assert (neq H K) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists s, (BetS H K s /\\ Cong K s H K)) by (conclude lemma_extension);destruct Tf as [s];spliter.
assert (Par F G K H) by (conclude_def PG ).
assert (Par K H F G) by (conclude lemma_parallelsymmetric).
assert (TP K H F G) by (conclude lemma_paralleldef2B).
assert (OS F G K H) by (conclude_def TP ).
assert (RT F K H K H G) by (conclude proposition_29C).
assert (CongA G H M H K F) by (conclude lemma_equalanglessymmetric).
assert (nCol H K F) by (conclude lemma_equalanglesNC).
assert (nCol F K H) by (forward_using lemma_NCorder).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H G H M) by (conclude lemma_equalanglestransitive).
assert (RT G H M K H G) by (conclude lemma_RTcongruence).
assert (RT K H G G H M) by (conclude lemma_RTsymmetric).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (neq H G) by (forward_using lemma_NCdistinct).
assert (Out H G G) by (conclude lemma_ray4).
assert (BetS K H M) by (conclude proposition_14).
assert (neq F K) by (forward_using lemma_NCdistinct).
assert (nCol G H M) by (conclude lemma_equalanglesNC).
assert (neq G H) by (forward_using lemma_NCdistinct).
assert (Par G H M L) by (conclude_def PG ).
assert (nCol H M L) by (forward_using lemma_parallelNC).
assert (neq L M) by (forward_using lemma_NCdistinct).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (eq H H) by (conclude cn_equalityreflexive).
assert (eq M M) by (conclude cn_equalityreflexive).
assert (Col F K K) by (conclude_def Col ).
assert (Col G H H) by (conclude_def Col ).
assert (Col L M M) by (conclude_def Col ).
assert (Par F K G H) by (forward_using lemma_parallelflip).
assert (Par M L G H) by (conclude lemma_parallelsymmetric).
assert (Par L M G H) by (forward_using lemma_parallelflip).
assert (Par F K L M) by (conclude proposition_30).
assert (Par F K M L) by (forward_using lemma_parallelflip).
assert (Par F G K H) by (conclude_def PG ).
assert (Par G L H M) by (conclude_def PG ).
assert (Par F G H K) by (forward_using lemma_parallelflip).
assert (Col K H M) by (conclude_def Col ).
assert (Col H K M) by (forward_using lemma_collinearorder).
assert (neq K M) by (forward_using lemma_betweennotequal).
assert (neq M K) by (conclude lemma_inequalitysymmetric).
assert (Par F G M K) by (conclude lemma_collinearparallel).
assert (Col H M K) by (forward_using lemma_collinearorder).
assert (Par G L K M) by (conclude lemma_collinearparallel).
assert (Par G L M K) by (forward_using lemma_parallelflip).
assert (Par M K G L) by (conclude lemma_parallelsymmetric).
assert (Par M K F G) by (conclude lemma_parallelsymmetric).
assert (Par M K G F) by (forward_using lemma_parallelflip).
assert (Col G L F) by (conclude lemma_Playfair).
assert (Col G F L) by (forward_using lemma_collinearorder).
assert (nCol F L M) by (forward_using lemma_parallelNC).
assert (neq L F) by (forward_using lemma_NCdistinct).
assert (Par M K L F) by (conclude lemma_collinearparallel).
assert (Par L F M K) by (conclude lemma_parallelsymmetric).
assert (Par F L K M) by (forward_using lemma_parallelflip).
assert (PG F K M L) by (conclude_def PG ).
assert (nCol F K H) by (forward_using lemma_parallelNC).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H J E N) by (conclude lemma_equalanglestransitive).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (Out K H M) by (conclude lemma_ray4).
assert (Out K M H) by (conclude lemma_ray5).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (neq K F) by (forward_using lemma_NCdistinct).
assert (Out K F F) by (conclude lemma_ray4).
assert (nCol F K M) by (forward_using lemma_parallelNC).
assert (CongA F K M F K M) by (conclude lemma_equalanglesreflexive).
assert (CongA F K M F K H) by (conclude lemma_equalangleshelper).
assert (CongA F K M J E N) by (conclude lemma_equalanglestransitive).
assert (Col B O D) by (conclude_def Col ).
assert (Col B D O) by (forward_using lemma_collinearorder).
assert (nCol B D A) by (forward_using lemma_NCorder).
assert (TS A B D C) by (conclude_def TS ).
assert (Par G H L M) by (forward_using lemma_parallelflip).
assert (TP G H L M) by (conclude lemma_paralleldef2B).
assert (OS L M G H) by (conclude_def TP ).
assert (Par F K G H) by (forward_using lemma_parallelflip).
assert (Par G H F K) by (conclude lemma_parallelsymmetric).
assert (TP G H F K) by (conclude lemma_paralleldef2B).
assert (OS F K G H) by (conclude_def TP ).
assert (eq H H) by (conclude cn_equalityreflexive).
assert (Col G H H) by (conclude_def Col ).
assert (TS K G H M) by (conclude_def TS ).
assert (TS F G H M) by (conclude lemma_planeseparation).
assert (TS M G H F) by (conclude lemma_oppositesidesymmetric).
assert (TS L G H F) by (conclude lemma_planeseparation).

*****
H146 : TS L G H F
H145 : TS M G H F
H144 : TS F G H M
H143 : TS K G H M
H142 : Col G H H
H141 : eq H H
H140 : OS F K G H
H139 : TP G H F K
H138 : Par G H F K
H137 : Par F K G H
H136 : OS L M G H
H135 : TP G H L M
H134 : Par G H L M
H133 : TS A B D C
H132 : nCol B D A
H131 : Col B D O
H130 : Col B O D
H129 : CongA F K M J E N
H128 : CongA F K M F K H
H127 : CongA F K M F K M
H126 : nCol F K M
H125 : Out K F F
H124 : neq K F
H123 : eq F F
H122 : Out K M H
H121 : Out K H M
H120 : neq K H
H119 : CongA F K H J E N
H118 : CongA F K H H K F
H117 : nCol F K H
H116 : PG F K M L
H115 : Par F L K M
H114 : Par L F M K
H113 : Par M K L F
H112 : neq L F
H111 : nCol F L M
H110 : Col G F L
H109 : Col G L F
H108 : Par M K G F
H107 : Par M K F G
H106 : Par M K G L
H105 : Par G L M K
H104 : Par G L K M
H103 : Col H M K
H102 : Par F G M K
H101 : neq M K
H100 : neq K M
H99 : Col H K M
H98 : Col K H M
H97 : Par F G H K
H96 : Par G L H M
H95 : Par F G K H
H94 : Par F K M L
H93 : Par F K L M
H92 : Par L M G H
H91 : Par M L G H
H90 : Par F K G H
H89 : Col L M M
H88 : Col G H H
H87 : Col F K K
H86 : eq M M
H85 : eq H H
H84 : eq K K
H83 : neq L M
H82 : nCol H M L
H81 : Par G H M L
H80 : neq G H
H79 : nCol G H M
H78 : neq F K
H77 : BetS K H M
H76 : Out H G G
H75 : neq H G
H74 : eq G G
H73 : RT K H G G H M
H72 : RT G H M K H G
H71 : CongA F K H G H M
H70 : CongA F K H H K F
H69 : nCol F K H
H68 : nCol H K F
H67 : CongA G H M H K F
H66 : RT F K H K H G
H65 : OS F G K H
H64 : TP K H F G
H63 : Par K H F G
H62 : Par F G K H
H61 : Cong K s H K
H60 : BetS H K s
s : Point
H59 : neq H K
H58 : Par K F H G
H57 : Par F K H G
H56 : CongA H K F G H M
H55 : CongA J E N G H M
H54 : BetS B e C
H53 : TS M G H K
H52 : Midpoint B e C
H51 : EF D B e C G H M L
H50 : CongA G H M J E N
H49 : PG G H M L
M,L,e : Point
H48 : nCol G H K
H47 : nCol H G K
H46 : nCol K H G
H45 : Par F K H G
H44 : Triangle D B C
H43 : nCol D B C
H42 : OS S F K H
H41 : CongA H K F J E N
H40 : EF A B m D F K H G
H39 : PG F K H G
F,G : Point
H38 : nCol S K H
H37 : nCol H K S
H36 : neq H K
H35 : neq K H
H34 : Col R K K
H33 : eq K K
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
let Tf:=fresh in assert (Tf:exists t, (BetS L t F /\ Col G H t /\ nCol G H L)) by (conclude_def TS );destruct Tf as [t];spliter.
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (Col R K K) by (conclude_def Col ).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (neq H K) by (conclude lemma_inequalitysymmetric).
assert (nCol H K S) by (conclude lemma_NChelper).
assert (nCol S K H) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F G, (PG F K H G /\\ EF A B m D F K H G /\\ CongA H K F J E N /\\ OS S F K H)) by (conclude proposition_42B);destruct Tf as [F[G]];spliter.
assert (nCol D B C) by (forward_using lemma_NCorder).
assert (Triangle D B C) by (conclude_def Triangle ).
assert (Par F K H G) by (conclude_def PG ).
assert (nCol K H G) by (forward_using lemma_parallelNC).
assert (nCol H G K) by (forward_using lemma_NCorder).
assert (nCol G H K) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists M L e, (PG G H M L /\\ CongA G H M J E N /\\ EF D B e C G H M L /\\ Midpoint B e C /\\ TS M G H K)) by (conclude proposition_44);destruct Tf as [M[L[e]]];spliter.
assert (BetS B e C) by (conclude_def Midpoint ).
assert (CongA J E N G H M) by (conclude lemma_equalanglessymmetric).
assert (CongA H K F G H M) by (conclude lemma_equalanglestransitive).
assert (Par F K H G) by (conclude_def PG ).
assert (Par K F H G) by (forward_using lemma_parallelflip).
assert (neq H K) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists s, (BetS H K s /\\ Cong K s H K)) by (conclude lemma_extension);destruct Tf as [s];spliter.
assert (Par F G K H) by (conclude_def PG ).
assert (Par K H F G) by (conclude lemma_parallelsymmetric).
assert (TP K H F G) by (conclude lemma_paralleldef2B).
assert (OS F G K H) by (conclude_def TP ).
assert (RT F K H K H G) by (conclude proposition_29C).
assert (CongA G H M H K F) by (conclude lemma_equalanglessymmetric).
assert (nCol H K F) by (conclude lemma_equalanglesNC).
assert (nCol F K H) by (forward_using lemma_NCorder).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H G H M) by (conclude lemma_equalanglestransitive).
assert (RT G H M K H G) by (conclude lemma_RTcongruence).
assert (RT K H G G H M) by (conclude lemma_RTsymmetric).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (neq H G) by (forward_using lemma_NCdistinct).
assert (Out H G G) by (conclude lemma_ray4).
assert (BetS K H M) by (conclude proposition_14).
assert (neq F K) by (forward_using lemma_NCdistinct).
assert (nCol G H M) by (conclude lemma_equalanglesNC).
assert (neq G H) by (forward_using lemma_NCdistinct).
assert (Par G H M L) by (conclude_def PG ).
assert (nCol H M L) by (forward_using lemma_parallelNC).
assert (neq L M) by (forward_using lemma_NCdistinct).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (eq H H) by (conclude cn_equalityreflexive).
assert (eq M M) by (conclude cn_equalityreflexive).
assert (Col F K K) by (conclude_def Col ).
assert (Col G H H) by (conclude_def Col ).
assert (Col L M M) by (conclude_def Col ).
assert (Par F K G H) by (forward_using lemma_parallelflip).
assert (Par M L G H) by (conclude lemma_parallelsymmetric).
assert (Par L M G H) by (forward_using lemma_parallelflip).
assert (Par F K L M) by (conclude proposition_30).
assert (Par F K M L) by (forward_using lemma_parallelflip).
assert (Par F G K H) by (conclude_def PG ).
assert (Par G L H M) by (conclude_def PG ).
assert (Par F G H K) by (forward_using lemma_parallelflip).
assert (Col K H M) by (conclude_def Col ).
assert (Col H K M) by (forward_using lemma_collinearorder).
assert (neq K M) by (forward_using lemma_betweennotequal).
assert (neq M K) by (conclude lemma_inequalitysymmetric).
assert (Par F G M K) by (conclude lemma_collinearparallel).
assert (Col H M K) by (forward_using lemma_collinearorder).
assert (Par G L K M) by (conclude lemma_collinearparallel).
assert (Par G L M K) by (forward_using lemma_parallelflip).
assert (Par M K G L) by (conclude lemma_parallelsymmetric).
assert (Par M K F G) by (conclude lemma_parallelsymmetric).
assert (Par M K G F) by (forward_using lemma_parallelflip).
assert (Col G L F) by (conclude lemma_Playfair).
assert (Col G F L) by (forward_using lemma_collinearorder).
assert (nCol F L M) by (forward_using lemma_parallelNC).
assert (neq L F) by (forward_using lemma_NCdistinct).
assert (Par M K L F) by (conclude lemma_collinearparallel).
assert (Par L F M K) by (conclude lemma_parallelsymmetric).
assert (Par F L K M) by (forward_using lemma_parallelflip).
assert (PG F K M L) by (conclude_def PG ).
assert (nCol F K H) by (forward_using lemma_parallelNC).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H J E N) by (conclude lemma_equalanglestransitive).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (Out K H M) by (conclude lemma_ray4).
assert (Out K M H) by (conclude lemma_ray5).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (neq K F) by (forward_using lemma_NCdistinct).
assert (Out K F F) by (conclude lemma_ray4).
assert (nCol F K M) by (forward_using lemma_parallelNC).
assert (CongA F K M F K M) by (conclude lemma_equalanglesreflexive).
assert (CongA F K M F K H) by (conclude lemma_equalangleshelper).
assert (CongA F K M J E N) by (conclude lemma_equalanglestransitive).
assert (Col B O D) by (conclude_def Col ).
assert (Col B D O) by (forward_using lemma_collinearorder).
assert (nCol B D A) by (forward_using lemma_NCorder).
assert (TS A B D C) by (conclude_def TS ).
assert (Par G H L M) by (forward_using lemma_parallelflip).
assert (TP G H L M) by (conclude lemma_paralleldef2B).
assert (OS L M G H) by (conclude_def TP ).
assert (Par F K G H) by (forward_using lemma_parallelflip).
assert (Par G H F K) by (conclude lemma_parallelsymmetric).
assert (TP G H F K) by (conclude lemma_paralleldef2B).
assert (OS F K G H) by (conclude_def TP ).
assert (eq H H) by (conclude cn_equalityreflexive).
assert (Col G H H) by (conclude_def Col ).
assert (TS K G H M) by (conclude_def TS ).
assert (TS F G H M) by (conclude lemma_planeseparation).
assert (TS M G H F) by (conclude lemma_oppositesidesymmetric).
assert (TS L G H F) by (conclude lemma_planeseparation).
let Tf:=fresh in assert (Tf:exists t, (BetS L t F /\\ Col G H t /\\ nCol G H L)) by (conclude_def TS );destruct Tf as [t];spliter.

*****
H149 : nCol G H L
H148 : Col G H t
H147 : BetS L t F
t : Point
H146 : TS L G H F
H145 : TS M G H F
H144 : TS F G H M
H143 : TS K G H M
H142 : Col G H H
H141 : eq H H
H140 : OS F K G H
H139 : TP G H F K
H138 : Par G H F K
H137 : Par F K G H
H136 : OS L M G H
H135 : TP G H L M
H134 : Par G H L M
H133 : TS A B D C
H132 : nCol B D A
H131 : Col B D O
H130 : Col B O D
H129 : CongA F K M J E N
H128 : CongA F K M F K H
H127 : CongA F K M F K M
H126 : nCol F K M
H125 : Out K F F
H124 : neq K F
H123 : eq F F
H122 : Out K M H
H121 : Out K H M
H120 : neq K H
H119 : CongA F K H J E N
H118 : CongA F K H H K F
H117 : nCol F K H
H116 : PG F K M L
H115 : Par F L K M
H114 : Par L F M K
H113 : Par M K L F
H112 : neq L F
H111 : nCol F L M
H110 : Col G F L
H109 : Col G L F
H108 : Par M K G F
H107 : Par M K F G
H106 : Par M K G L
H105 : Par G L M K
H104 : Par G L K M
H103 : Col H M K
H102 : Par F G M K
H101 : neq M K
H100 : neq K M
H99 : Col H K M
H98 : Col K H M
H97 : Par F G H K
H96 : Par G L H M
H95 : Par F G K H
H94 : Par F K M L
H93 : Par F K L M
H92 : Par L M G H
H91 : Par M L G H
H90 : Par F K G H
H89 : Col L M M
H88 : Col G H H
H87 : Col F K K
H86 : eq M M
H85 : eq H H
H84 : eq K K
H83 : neq L M
H82 : nCol H M L
H81 : Par G H M L
H80 : neq G H
H79 : nCol G H M
H78 : neq F K
H77 : BetS K H M
H76 : Out H G G
H75 : neq H G
H74 : eq G G
H73 : RT K H G G H M
H72 : RT G H M K H G
H71 : CongA F K H G H M
H70 : CongA F K H H K F
H69 : nCol F K H
H68 : nCol H K F
H67 : CongA G H M H K F
H66 : RT F K H K H G
H65 : OS F G K H
H64 : TP K H F G
H63 : Par K H F G
H62 : Par F G K H
H61 : Cong K s H K
H60 : BetS H K s
s : Point
H59 : neq H K
H58 : Par K F H G
H57 : Par F K H G
H56 : CongA H K F G H M
H55 : CongA J E N G H M
H54 : BetS B e C
H53 : TS M G H K
H52 : Midpoint B e C
H51 : EF D B e C G H M L
H50 : CongA G H M J E N
H49 : PG G H M L
M,L,e : Point
H48 : nCol G H K
H47 : nCol H G K
H46 : nCol K H G
H45 : Par F K H G
H44 : Triangle D B C
H43 : nCol D B C
H42 : OS S F K H
H41 : CongA H K F J E N
H40 : EF A B m D F K H G
H39 : PG F K H G
F,G : Point
H38 : nCol S K H
H37 : nCol H K S
H36 : neq H K
H35 : neq K H
H34 : Col R K K
H33 : eq K K
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (Col F L G) by (forward_using lemma_collinearorder).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (Col R K K) by (conclude_def Col ).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (neq H K) by (conclude lemma_inequalitysymmetric).
assert (nCol H K S) by (conclude lemma_NChelper).
assert (nCol S K H) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F G, (PG F K H G /\\ EF A B m D F K H G /\\ CongA H K F J E N /\\ OS S F K H)) by (conclude proposition_42B);destruct Tf as [F[G]];spliter.
assert (nCol D B C) by (forward_using lemma_NCorder).
assert (Triangle D B C) by (conclude_def Triangle ).
assert (Par F K H G) by (conclude_def PG ).
assert (nCol K H G) by (forward_using lemma_parallelNC).
assert (nCol H G K) by (forward_using lemma_NCorder).
assert (nCol G H K) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists M L e, (PG G H M L /\\ CongA G H M J E N /\\ EF D B e C G H M L /\\ Midpoint B e C /\\ TS M G H K)) by (conclude proposition_44);destruct Tf as [M[L[e]]];spliter.
assert (BetS B e C) by (conclude_def Midpoint ).
assert (CongA J E N G H M) by (conclude lemma_equalanglessymmetric).
assert (CongA H K F G H M) by (conclude lemma_equalanglestransitive).
assert (Par F K H G) by (conclude_def PG ).
assert (Par K F H G) by (forward_using lemma_parallelflip).
assert (neq H K) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists s, (BetS H K s /\\ Cong K s H K)) by (conclude lemma_extension);destruct Tf as [s];spliter.
assert (Par F G K H) by (conclude_def PG ).
assert (Par K H F G) by (conclude lemma_parallelsymmetric).
assert (TP K H F G) by (conclude lemma_paralleldef2B).
assert (OS F G K H) by (conclude_def TP ).
assert (RT F K H K H G) by (conclude proposition_29C).
assert (CongA G H M H K F) by (conclude lemma_equalanglessymmetric).
assert (nCol H K F) by (conclude lemma_equalanglesNC).
assert (nCol F K H) by (forward_using lemma_NCorder).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H G H M) by (conclude lemma_equalanglestransitive).
assert (RT G H M K H G) by (conclude lemma_RTcongruence).
assert (RT K H G G H M) by (conclude lemma_RTsymmetric).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (neq H G) by (forward_using lemma_NCdistinct).
assert (Out H G G) by (conclude lemma_ray4).
assert (BetS K H M) by (conclude proposition_14).
assert (neq F K) by (forward_using lemma_NCdistinct).
assert (nCol G H M) by (conclude lemma_equalanglesNC).
assert (neq G H) by (forward_using lemma_NCdistinct).
assert (Par G H M L) by (conclude_def PG ).
assert (nCol H M L) by (forward_using lemma_parallelNC).
assert (neq L M) by (forward_using lemma_NCdistinct).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (eq H H) by (conclude cn_equalityreflexive).
assert (eq M M) by (conclude cn_equalityreflexive).
assert (Col F K K) by (conclude_def Col ).
assert (Col G H H) by (conclude_def Col ).
assert (Col L M M) by (conclude_def Col ).
assert (Par F K G H) by (forward_using lemma_parallelflip).
assert (Par M L G H) by (conclude lemma_parallelsymmetric).
assert (Par L M G H) by (forward_using lemma_parallelflip).
assert (Par F K L M) by (conclude proposition_30).
assert (Par F K M L) by (forward_using lemma_parallelflip).
assert (Par F G K H) by (conclude_def PG ).
assert (Par G L H M) by (conclude_def PG ).
assert (Par F G H K) by (forward_using lemma_parallelflip).
assert (Col K H M) by (conclude_def Col ).
assert (Col H K M) by (forward_using lemma_collinearorder).
assert (neq K M) by (forward_using lemma_betweennotequal).
assert (neq M K) by (conclude lemma_inequalitysymmetric).
assert (Par F G M K) by (conclude lemma_collinearparallel).
assert (Col H M K) by (forward_using lemma_collinearorder).
assert (Par G L K M) by (conclude lemma_collinearparallel).
assert (Par G L M K) by (forward_using lemma_parallelflip).
assert (Par M K G L) by (conclude lemma_parallelsymmetric).
assert (Par M K F G) by (conclude lemma_parallelsymmetric).
assert (Par M K G F) by (forward_using lemma_parallelflip).
assert (Col G L F) by (conclude lemma_Playfair).
assert (Col G F L) by (forward_using lemma_collinearorder).
assert (nCol F L M) by (forward_using lemma_parallelNC).
assert (neq L F) by (forward_using lemma_NCdistinct).
assert (Par M K L F) by (conclude lemma_collinearparallel).
assert (Par L F M K) by (conclude lemma_parallelsymmetric).
assert (Par F L K M) by (forward_using lemma_parallelflip).
assert (PG F K M L) by (conclude_def PG ).
assert (nCol F K H) by (forward_using lemma_parallelNC).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H J E N) by (conclude lemma_equalanglestransitive).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (Out K H M) by (conclude lemma_ray4).
assert (Out K M H) by (conclude lemma_ray5).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (neq K F) by (forward_using lemma_NCdistinct).
assert (Out K F F) by (conclude lemma_ray4).
assert (nCol F K M) by (forward_using lemma_parallelNC).
assert (CongA F K M F K M) by (conclude lemma_equalanglesreflexive).
assert (CongA F K M F K H) by (conclude lemma_equalangleshelper).
assert (CongA F K M J E N) by (conclude lemma_equalanglestransitive).
assert (Col B O D) by (conclude_def Col ).
assert (Col B D O) by (forward_using lemma_collinearorder).
assert (nCol B D A) by (forward_using lemma_NCorder).
assert (TS A B D C) by (conclude_def TS ).
assert (Par G H L M) by (forward_using lemma_parallelflip).
assert (TP G H L M) by (conclude lemma_paralleldef2B).
assert (OS L M G H) by (conclude_def TP ).
assert (Par F K G H) by (forward_using lemma_parallelflip).
assert (Par G H F K) by (conclude lemma_parallelsymmetric).
assert (TP G H F K) by (conclude lemma_paralleldef2B).
assert (OS F K G H) by (conclude_def TP ).
assert (eq H H) by (conclude cn_equalityreflexive).
assert (Col G H H) by (conclude_def Col ).
assert (TS K G H M) by (conclude_def TS ).
assert (TS F G H M) by (conclude lemma_planeseparation).
assert (TS M G H F) by (conclude lemma_oppositesidesymmetric).
assert (TS L G H F) by (conclude lemma_planeseparation).
let Tf:=fresh in assert (Tf:exists t, (BetS L t F /\\ Col G H t /\\ nCol G H L)) by (conclude_def TS );destruct Tf as [t];spliter.
assert (Col F L G) by (forward_using lemma_collinearorder).

*****
H150 : Col F L G
H149 : nCol G H L
H148 : Col G H t
H147 : BetS L t F
t : Point
H146 : TS L G H F
H145 : TS M G H F
H144 : TS F G H M
H143 : TS K G H M
H142 : Col G H H
H141 : eq H H
H140 : OS F K G H
H139 : TP G H F K
H138 : Par G H F K
H137 : Par F K G H
H136 : OS L M G H
H135 : TP G H L M
H134 : Par G H L M
H133 : TS A B D C
H132 : nCol B D A
H131 : Col B D O
H130 : Col B O D
H129 : CongA F K M J E N
H128 : CongA F K M F K H
H127 : CongA F K M F K M
H126 : nCol F K M
H125 : Out K F F
H124 : neq K F
H123 : eq F F
H122 : Out K M H
H121 : Out K H M
H120 : neq K H
H119 : CongA F K H J E N
H118 : CongA F K H H K F
H117 : nCol F K H
H116 : PG F K M L
H115 : Par F L K M
H114 : Par L F M K
H113 : Par M K L F
H112 : neq L F
H111 : nCol F L M
H110 : Col G F L
H109 : Col G L F
H108 : Par M K G F
H107 : Par M K F G
H106 : Par M K G L
H105 : Par G L M K
H104 : Par G L K M
H103 : Col H M K
H102 : Par F G M K
H101 : neq M K
H100 : neq K M
H99 : Col H K M
H98 : Col K H M
H97 : Par F G H K
H96 : Par G L H M
H95 : Par F G K H
H94 : Par F K M L
H93 : Par F K L M
H92 : Par L M G H
H91 : Par M L G H
H90 : Par F K G H
H89 : Col L M M
H88 : Col G H H
H87 : Col F K K
H86 : eq M M
H85 : eq H H
H84 : eq K K
H83 : neq L M
H82 : nCol H M L
H81 : Par G H M L
H80 : neq G H
H79 : nCol G H M
H78 : neq F K
H77 : BetS K H M
H76 : Out H G G
H75 : neq H G
H74 : eq G G
H73 : RT K H G G H M
H72 : RT G H M K H G
H71 : CongA F K H G H M
H70 : CongA F K H H K F
H69 : nCol F K H
H68 : nCol H K F
H67 : CongA G H M H K F
H66 : RT F K H K H G
H65 : OS F G K H
H64 : TP K H F G
H63 : Par K H F G
H62 : Par F G K H
H61 : Cong K s H K
H60 : BetS H K s
s : Point
H59 : neq H K
H58 : Par K F H G
H57 : Par F K H G
H56 : CongA H K F G H M
H55 : CongA J E N G H M
H54 : BetS B e C
H53 : TS M G H K
H52 : Midpoint B e C
H51 : EF D B e C G H M L
H50 : CongA G H M J E N
H49 : PG G H M L
M,L,e : Point
H48 : nCol G H K
H47 : nCol H G K
H46 : nCol K H G
H45 : Par F K H G
H44 : Triangle D B C
H43 : nCol D B C
H42 : OS S F K H
H41 : CongA H K F J E N
H40 : EF A B m D F K H G
H39 : PG F K H G
F,G : Point
H38 : nCol S K H
H37 : nCol H K S
H36 : neq H K
H35 : neq K H
H34 : Col R K K
H33 : eq K K
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (Col L t F) by (conclude_def Col ).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (Col R K K) by (conclude_def Col ).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (neq H K) by (conclude lemma_inequalitysymmetric).
assert (nCol H K S) by (conclude lemma_NChelper).
assert (nCol S K H) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F G, (PG F K H G /\\ EF A B m D F K H G /\\ CongA H K F J E N /\\ OS S F K H)) by (conclude proposition_42B);destruct Tf as [F[G]];spliter.
assert (nCol D B C) by (forward_using lemma_NCorder).
assert (Triangle D B C) by (conclude_def Triangle ).
assert (Par F K H G) by (conclude_def PG ).
assert (nCol K H G) by (forward_using lemma_parallelNC).
assert (nCol H G K) by (forward_using lemma_NCorder).
assert (nCol G H K) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists M L e, (PG G H M L /\\ CongA G H M J E N /\\ EF D B e C G H M L /\\ Midpoint B e C /\\ TS M G H K)) by (conclude proposition_44);destruct Tf as [M[L[e]]];spliter.
assert (BetS B e C) by (conclude_def Midpoint ).
assert (CongA J E N G H M) by (conclude lemma_equalanglessymmetric).
assert (CongA H K F G H M) by (conclude lemma_equalanglestransitive).
assert (Par F K H G) by (conclude_def PG ).
assert (Par K F H G) by (forward_using lemma_parallelflip).
assert (neq H K) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists s, (BetS H K s /\\ Cong K s H K)) by (conclude lemma_extension);destruct Tf as [s];spliter.
assert (Par F G K H) by (conclude_def PG ).
assert (Par K H F G) by (conclude lemma_parallelsymmetric).
assert (TP K H F G) by (conclude lemma_paralleldef2B).
assert (OS F G K H) by (conclude_def TP ).
assert (RT F K H K H G) by (conclude proposition_29C).
assert (CongA G H M H K F) by (conclude lemma_equalanglessymmetric).
assert (nCol H K F) by (conclude lemma_equalanglesNC).
assert (nCol F K H) by (forward_using lemma_NCorder).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H G H M) by (conclude lemma_equalanglestransitive).
assert (RT G H M K H G) by (conclude lemma_RTcongruence).
assert (RT K H G G H M) by (conclude lemma_RTsymmetric).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (neq H G) by (forward_using lemma_NCdistinct).
assert (Out H G G) by (conclude lemma_ray4).
assert (BetS K H M) by (conclude proposition_14).
assert (neq F K) by (forward_using lemma_NCdistinct).
assert (nCol G H M) by (conclude lemma_equalanglesNC).
assert (neq G H) by (forward_using lemma_NCdistinct).
assert (Par G H M L) by (conclude_def PG ).
assert (nCol H M L) by (forward_using lemma_parallelNC).
assert (neq L M) by (forward_using lemma_NCdistinct).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (eq H H) by (conclude cn_equalityreflexive).
assert (eq M M) by (conclude cn_equalityreflexive).
assert (Col F K K) by (conclude_def Col ).
assert (Col G H H) by (conclude_def Col ).
assert (Col L M M) by (conclude_def Col ).
assert (Par F K G H) by (forward_using lemma_parallelflip).
assert (Par M L G H) by (conclude lemma_parallelsymmetric).
assert (Par L M G H) by (forward_using lemma_parallelflip).
assert (Par F K L M) by (conclude proposition_30).
assert (Par F K M L) by (forward_using lemma_parallelflip).
assert (Par F G K H) by (conclude_def PG ).
assert (Par G L H M) by (conclude_def PG ).
assert (Par F G H K) by (forward_using lemma_parallelflip).
assert (Col K H M) by (conclude_def Col ).
assert (Col H K M) by (forward_using lemma_collinearorder).
assert (neq K M) by (forward_using lemma_betweennotequal).
assert (neq M K) by (conclude lemma_inequalitysymmetric).
assert (Par F G M K) by (conclude lemma_collinearparallel).
assert (Col H M K) by (forward_using lemma_collinearorder).
assert (Par G L K M) by (conclude lemma_collinearparallel).
assert (Par G L M K) by (forward_using lemma_parallelflip).
assert (Par M K G L) by (conclude lemma_parallelsymmetric).
assert (Par M K F G) by (conclude lemma_parallelsymmetric).
assert (Par M K G F) by (forward_using lemma_parallelflip).
assert (Col G L F) by (conclude lemma_Playfair).
assert (Col G F L) by (forward_using lemma_collinearorder).
assert (nCol F L M) by (forward_using lemma_parallelNC).
assert (neq L F) by (forward_using lemma_NCdistinct).
assert (Par M K L F) by (conclude lemma_collinearparallel).
assert (Par L F M K) by (conclude lemma_parallelsymmetric).
assert (Par F L K M) by (forward_using lemma_parallelflip).
assert (PG F K M L) by (conclude_def PG ).
assert (nCol F K H) by (forward_using lemma_parallelNC).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H J E N) by (conclude lemma_equalanglestransitive).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (Out K H M) by (conclude lemma_ray4).
assert (Out K M H) by (conclude lemma_ray5).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (neq K F) by (forward_using lemma_NCdistinct).
assert (Out K F F) by (conclude lemma_ray4).
assert (nCol F K M) by (forward_using lemma_parallelNC).
assert (CongA F K M F K M) by (conclude lemma_equalanglesreflexive).
assert (CongA F K M F K H) by (conclude lemma_equalangleshelper).
assert (CongA F K M J E N) by (conclude lemma_equalanglestransitive).
assert (Col B O D) by (conclude_def Col ).
assert (Col B D O) by (forward_using lemma_collinearorder).
assert (nCol B D A) by (forward_using lemma_NCorder).
assert (TS A B D C) by (conclude_def TS ).
assert (Par G H L M) by (forward_using lemma_parallelflip).
assert (TP G H L M) by (conclude lemma_paralleldef2B).
assert (OS L M G H) by (conclude_def TP ).
assert (Par F K G H) by (forward_using lemma_parallelflip).
assert (Par G H F K) by (conclude lemma_parallelsymmetric).
assert (TP G H F K) by (conclude lemma_paralleldef2B).
assert (OS F K G H) by (conclude_def TP ).
assert (eq H H) by (conclude cn_equalityreflexive).
assert (Col G H H) by (conclude_def Col ).
assert (TS K G H M) by (conclude_def TS ).
assert (TS F G H M) by (conclude lemma_planeseparation).
assert (TS M G H F) by (conclude lemma_oppositesidesymmetric).
assert (TS L G H F) by (conclude lemma_planeseparation).
let Tf:=fresh in assert (Tf:exists t, (BetS L t F /\\ Col G H t /\\ nCol G H L)) by (conclude_def TS );destruct Tf as [t];spliter.
assert (Col F L G) by (forward_using lemma_collinearorder).
assert (Col L t F) by (conclude_def Col ).

*****
H151 : Col L t F
H150 : Col F L G
H149 : nCol G H L
H148 : Col G H t
H147 : BetS L t F
t : Point
H146 : TS L G H F
H145 : TS M G H F
H144 : TS F G H M
H143 : TS K G H M
H142 : Col G H H
H141 : eq H H
H140 : OS F K G H
H139 : TP G H F K
H138 : Par G H F K
H137 : Par F K G H
H136 : OS L M G H
H135 : TP G H L M
H134 : Par G H L M
H133 : TS A B D C
H132 : nCol B D A
H131 : Col B D O
H130 : Col B O D
H129 : CongA F K M J E N
H128 : CongA F K M F K H
H127 : CongA F K M F K M
H126 : nCol F K M
H125 : Out K F F
H124 : neq K F
H123 : eq F F
H122 : Out K M H
H121 : Out K H M
H120 : neq K H
H119 : CongA F K H J E N
H118 : CongA F K H H K F
H117 : nCol F K H
H116 : PG F K M L
H115 : Par F L K M
H114 : Par L F M K
H113 : Par M K L F
H112 : neq L F
H111 : nCol F L M
H110 : Col G F L
H109 : Col G L F
H108 : Par M K G F
H107 : Par M K F G
H106 : Par M K G L
H105 : Par G L M K
H104 : Par G L K M
H103 : Col H M K
H102 : Par F G M K
H101 : neq M K
H100 : neq K M
H99 : Col H K M
H98 : Col K H M
H97 : Par F G H K
H96 : Par G L H M
H95 : Par F G K H
H94 : Par F K M L
H93 : Par F K L M
H92 : Par L M G H
H91 : Par M L G H
H90 : Par F K G H
H89 : Col L M M
H88 : Col G H H
H87 : Col F K K
H86 : eq M M
H85 : eq H H
H84 : eq K K
H83 : neq L M
H82 : nCol H M L
H81 : Par G H M L
H80 : neq G H
H79 : nCol G H M
H78 : neq F K
H77 : BetS K H M
H76 : Out H G G
H75 : neq H G
H74 : eq G G
H73 : RT K H G G H M
H72 : RT G H M K H G
H71 : CongA F K H G H M
H70 : CongA F K H H K F
H69 : nCol F K H
H68 : nCol H K F
H67 : CongA G H M H K F
H66 : RT F K H K H G
H65 : OS F G K H
H64 : TP K H F G
H63 : Par K H F G
H62 : Par F G K H
H61 : Cong K s H K
H60 : BetS H K s
s : Point
H59 : neq H K
H58 : Par K F H G
H57 : Par F K H G
H56 : CongA H K F G H M
H55 : CongA J E N G H M
H54 : BetS B e C
H53 : TS M G H K
H52 : Midpoint B e C
H51 : EF D B e C G H M L
H50 : CongA G H M J E N
H49 : PG G H M L
M,L,e : Point
H48 : nCol G H K
H47 : nCol H G K
H46 : nCol K H G
H45 : Par F K H G
H44 : Triangle D B C
H43 : nCol D B C
H42 : OS S F K H
H41 : CongA H K F J E N
H40 : EF A B m D F K H G
H39 : PG F K H G
F,G : Point
H38 : nCol S K H
H37 : nCol H K S
H36 : neq H K
H35 : neq K H
H34 : Col R K K
H33 : eq K K
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (Col F L t) by (forward_using lemma_collinearorder).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (Col R K K) by (conclude_def Col ).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (neq H K) by (conclude lemma_inequalitysymmetric).
assert (nCol H K S) by (conclude lemma_NChelper).
assert (nCol S K H) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F G, (PG F K H G /\\ EF A B m D F K H G /\\ CongA H K F J E N /\\ OS S F K H)) by (conclude proposition_42B);destruct Tf as [F[G]];spliter.
assert (nCol D B C) by (forward_using lemma_NCorder).
assert (Triangle D B C) by (conclude_def Triangle ).
assert (Par F K H G) by (conclude_def PG ).
assert (nCol K H G) by (forward_using lemma_parallelNC).
assert (nCol H G K) by (forward_using lemma_NCorder).
assert (nCol G H K) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists M L e, (PG G H M L /\\ CongA G H M J E N /\\ EF D B e C G H M L /\\ Midpoint B e C /\\ TS M G H K)) by (conclude proposition_44);destruct Tf as [M[L[e]]];spliter.
assert (BetS B e C) by (conclude_def Midpoint ).
assert (CongA J E N G H M) by (conclude lemma_equalanglessymmetric).
assert (CongA H K F G H M) by (conclude lemma_equalanglestransitive).
assert (Par F K H G) by (conclude_def PG ).
assert (Par K F H G) by (forward_using lemma_parallelflip).
assert (neq H K) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists s, (BetS H K s /\\ Cong K s H K)) by (conclude lemma_extension);destruct Tf as [s];spliter.
assert (Par F G K H) by (conclude_def PG ).
assert (Par K H F G) by (conclude lemma_parallelsymmetric).
assert (TP K H F G) by (conclude lemma_paralleldef2B).
assert (OS F G K H) by (conclude_def TP ).
assert (RT F K H K H G) by (conclude proposition_29C).
assert (CongA G H M H K F) by (conclude lemma_equalanglessymmetric).
assert (nCol H K F) by (conclude lemma_equalanglesNC).
assert (nCol F K H) by (forward_using lemma_NCorder).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H G H M) by (conclude lemma_equalanglestransitive).
assert (RT G H M K H G) by (conclude lemma_RTcongruence).
assert (RT K H G G H M) by (conclude lemma_RTsymmetric).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (neq H G) by (forward_using lemma_NCdistinct).
assert (Out H G G) by (conclude lemma_ray4).
assert (BetS K H M) by (conclude proposition_14).
assert (neq F K) by (forward_using lemma_NCdistinct).
assert (nCol G H M) by (conclude lemma_equalanglesNC).
assert (neq G H) by (forward_using lemma_NCdistinct).
assert (Par G H M L) by (conclude_def PG ).
assert (nCol H M L) by (forward_using lemma_parallelNC).
assert (neq L M) by (forward_using lemma_NCdistinct).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (eq H H) by (conclude cn_equalityreflexive).
assert (eq M M) by (conclude cn_equalityreflexive).
assert (Col F K K) by (conclude_def Col ).
assert (Col G H H) by (conclude_def Col ).
assert (Col L M M) by (conclude_def Col ).
assert (Par F K G H) by (forward_using lemma_parallelflip).
assert (Par M L G H) by (conclude lemma_parallelsymmetric).
assert (Par L M G H) by (forward_using lemma_parallelflip).
assert (Par F K L M) by (conclude proposition_30).
assert (Par F K M L) by (forward_using lemma_parallelflip).
assert (Par F G K H) by (conclude_def PG ).
assert (Par G L H M) by (conclude_def PG ).
assert (Par F G H K) by (forward_using lemma_parallelflip).
assert (Col K H M) by (conclude_def Col ).
assert (Col H K M) by (forward_using lemma_collinearorder).
assert (neq K M) by (forward_using lemma_betweennotequal).
assert (neq M K) by (conclude lemma_inequalitysymmetric).
assert (Par F G M K) by (conclude lemma_collinearparallel).
assert (Col H M K) by (forward_using lemma_collinearorder).
assert (Par G L K M) by (conclude lemma_collinearparallel).
assert (Par G L M K) by (forward_using lemma_parallelflip).
assert (Par M K G L) by (conclude lemma_parallelsymmetric).
assert (Par M K F G) by (conclude lemma_parallelsymmetric).
assert (Par M K G F) by (forward_using lemma_parallelflip).
assert (Col G L F) by (conclude lemma_Playfair).
assert (Col G F L) by (forward_using lemma_collinearorder).
assert (nCol F L M) by (forward_using lemma_parallelNC).
assert (neq L F) by (forward_using lemma_NCdistinct).
assert (Par M K L F) by (conclude lemma_collinearparallel).
assert (Par L F M K) by (conclude lemma_parallelsymmetric).
assert (Par F L K M) by (forward_using lemma_parallelflip).
assert (PG F K M L) by (conclude_def PG ).
assert (nCol F K H) by (forward_using lemma_parallelNC).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H J E N) by (conclude lemma_equalanglestransitive).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (Out K H M) by (conclude lemma_ray4).
assert (Out K M H) by (conclude lemma_ray5).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (neq K F) by (forward_using lemma_NCdistinct).
assert (Out K F F) by (conclude lemma_ray4).
assert (nCol F K M) by (forward_using lemma_parallelNC).
assert (CongA F K M F K M) by (conclude lemma_equalanglesreflexive).
assert (CongA F K M F K H) by (conclude lemma_equalangleshelper).
assert (CongA F K M J E N) by (conclude lemma_equalanglestransitive).
assert (Col B O D) by (conclude_def Col ).
assert (Col B D O) by (forward_using lemma_collinearorder).
assert (nCol B D A) by (forward_using lemma_NCorder).
assert (TS A B D C) by (conclude_def TS ).
assert (Par G H L M) by (forward_using lemma_parallelflip).
assert (TP G H L M) by (conclude lemma_paralleldef2B).
assert (OS L M G H) by (conclude_def TP ).
assert (Par F K G H) by (forward_using lemma_parallelflip).
assert (Par G H F K) by (conclude lemma_parallelsymmetric).
assert (TP G H F K) by (conclude lemma_paralleldef2B).
assert (OS F K G H) by (conclude_def TP ).
assert (eq H H) by (conclude cn_equalityreflexive).
assert (Col G H H) by (conclude_def Col ).
assert (TS K G H M) by (conclude_def TS ).
assert (TS F G H M) by (conclude lemma_planeseparation).
assert (TS M G H F) by (conclude lemma_oppositesidesymmetric).
assert (TS L G H F) by (conclude lemma_planeseparation).
let Tf:=fresh in assert (Tf:exists t, (BetS L t F /\\ Col G H t /\\ nCol G H L)) by (conclude_def TS );destruct Tf as [t];spliter.
assert (Col F L G) by (forward_using lemma_collinearorder).
assert (Col L t F) by (conclude_def Col ).
assert (Col F L t) by (forward_using lemma_collinearorder).

*****
H152 : Col F L t
H151 : Col L t F
H150 : Col F L G
H149 : nCol G H L
H148 : Col G H t
H147 : BetS L t F
t : Point
H146 : TS L G H F
H145 : TS M G H F
H144 : TS F G H M
H143 : TS K G H M
H142 : Col G H H
H141 : eq H H
H140 : OS F K G H
H139 : TP G H F K
H138 : Par G H F K
H137 : Par F K G H
H136 : OS L M G H
H135 : TP G H L M
H134 : Par G H L M
H133 : TS A B D C
H132 : nCol B D A
H131 : Col B D O
H130 : Col B O D
H129 : CongA F K M J E N
H128 : CongA F K M F K H
H127 : CongA F K M F K M
H126 : nCol F K M
H125 : Out K F F
H124 : neq K F
H123 : eq F F
H122 : Out K M H
H121 : Out K H M
H120 : neq K H
H119 : CongA F K H J E N
H118 : CongA F K H H K F
H117 : nCol F K H
H116 : PG F K M L
H115 : Par F L K M
H114 : Par L F M K
H113 : Par M K L F
H112 : neq L F
H111 : nCol F L M
H110 : Col G F L
H109 : Col G L F
H108 : Par M K G F
H107 : Par M K F G
H106 : Par M K G L
H105 : Par G L M K
H104 : Par G L K M
H103 : Col H M K
H102 : Par F G M K
H101 : neq M K
H100 : neq K M
H99 : Col H K M
H98 : Col K H M
H97 : Par F G H K
H96 : Par G L H M
H95 : Par F G K H
H94 : Par F K M L
H93 : Par F K L M
H92 : Par L M G H
H91 : Par M L G H
H90 : Par F K G H
H89 : Col L M M
H88 : Col G H H
H87 : Col F K K
H86 : eq M M
H85 : eq H H
H84 : eq K K
H83 : neq L M
H82 : nCol H M L
H81 : Par G H M L
H80 : neq G H
H79 : nCol G H M
H78 : neq F K
H77 : BetS K H M
H76 : Out H G G
H75 : neq H G
H74 : eq G G
H73 : RT K H G G H M
H72 : RT G H M K H G
H71 : CongA F K H G H M
H70 : CongA F K H H K F
H69 : nCol F K H
H68 : nCol H K F
H67 : CongA G H M H K F
H66 : RT F K H K H G
H65 : OS F G K H
H64 : TP K H F G
H63 : Par K H F G
H62 : Par F G K H
H61 : Cong K s H K
H60 : BetS H K s
s : Point
H59 : neq H K
H58 : Par K F H G
H57 : Par F K H G
H56 : CongA H K F G H M
H55 : CongA J E N G H M
H54 : BetS B e C
H53 : TS M G H K
H52 : Midpoint B e C
H51 : EF D B e C G H M L
H50 : CongA G H M J E N
H49 : PG G H M L
M,L,e : Point
H48 : nCol G H K
H47 : nCol H G K
H46 : nCol K H G
H45 : Par F K H G
H44 : Triangle D B C
H43 : nCol D B C
H42 : OS S F K H
H41 : CongA H K F J E N
H40 : EF A B m D F K H G
H39 : PG F K H G
F,G : Point
H38 : nCol S K H
H37 : nCol H K S
H36 : neq H K
H35 : neq K H
H34 : Col R K K
H33 : eq K K
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (neq F L) by (forward_using lemma_NCdistinct).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (Col R K K) by (conclude_def Col ).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (neq H K) by (conclude lemma_inequalitysymmetric).
assert (nCol H K S) by (conclude lemma_NChelper).
assert (nCol S K H) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F G, (PG F K H G /\\ EF A B m D F K H G /\\ CongA H K F J E N /\\ OS S F K H)) by (conclude proposition_42B);destruct Tf as [F[G]];spliter.
assert (nCol D B C) by (forward_using lemma_NCorder).
assert (Triangle D B C) by (conclude_def Triangle ).
assert (Par F K H G) by (conclude_def PG ).
assert (nCol K H G) by (forward_using lemma_parallelNC).
assert (nCol H G K) by (forward_using lemma_NCorder).
assert (nCol G H K) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists M L e, (PG G H M L /\\ CongA G H M J E N /\\ EF D B e C G H M L /\\ Midpoint B e C /\\ TS M G H K)) by (conclude proposition_44);destruct Tf as [M[L[e]]];spliter.
assert (BetS B e C) by (conclude_def Midpoint ).
assert (CongA J E N G H M) by (conclude lemma_equalanglessymmetric).
assert (CongA H K F G H M) by (conclude lemma_equalanglestransitive).
assert (Par F K H G) by (conclude_def PG ).
assert (Par K F H G) by (forward_using lemma_parallelflip).
assert (neq H K) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists s, (BetS H K s /\\ Cong K s H K)) by (conclude lemma_extension);destruct Tf as [s];spliter.
assert (Par F G K H) by (conclude_def PG ).
assert (Par K H F G) by (conclude lemma_parallelsymmetric).
assert (TP K H F G) by (conclude lemma_paralleldef2B).
assert (OS F G K H) by (conclude_def TP ).
assert (RT F K H K H G) by (conclude proposition_29C).
assert (CongA G H M H K F) by (conclude lemma_equalanglessymmetric).
assert (nCol H K F) by (conclude lemma_equalanglesNC).
assert (nCol F K H) by (forward_using lemma_NCorder).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H G H M) by (conclude lemma_equalanglestransitive).
assert (RT G H M K H G) by (conclude lemma_RTcongruence).
assert (RT K H G G H M) by (conclude lemma_RTsymmetric).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (neq H G) by (forward_using lemma_NCdistinct).
assert (Out H G G) by (conclude lemma_ray4).
assert (BetS K H M) by (conclude proposition_14).
assert (neq F K) by (forward_using lemma_NCdistinct).
assert (nCol G H M) by (conclude lemma_equalanglesNC).
assert (neq G H) by (forward_using lemma_NCdistinct).
assert (Par G H M L) by (conclude_def PG ).
assert (nCol H M L) by (forward_using lemma_parallelNC).
assert (neq L M) by (forward_using lemma_NCdistinct).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (eq H H) by (conclude cn_equalityreflexive).
assert (eq M M) by (conclude cn_equalityreflexive).
assert (Col F K K) by (conclude_def Col ).
assert (Col G H H) by (conclude_def Col ).
assert (Col L M M) by (conclude_def Col ).
assert (Par F K G H) by (forward_using lemma_parallelflip).
assert (Par M L G H) by (conclude lemma_parallelsymmetric).
assert (Par L M G H) by (forward_using lemma_parallelflip).
assert (Par F K L M) by (conclude proposition_30).
assert (Par F K M L) by (forward_using lemma_parallelflip).
assert (Par F G K H) by (conclude_def PG ).
assert (Par G L H M) by (conclude_def PG ).
assert (Par F G H K) by (forward_using lemma_parallelflip).
assert (Col K H M) by (conclude_def Col ).
assert (Col H K M) by (forward_using lemma_collinearorder).
assert (neq K M) by (forward_using lemma_betweennotequal).
assert (neq M K) by (conclude lemma_inequalitysymmetric).
assert (Par F G M K) by (conclude lemma_collinearparallel).
assert (Col H M K) by (forward_using lemma_collinearorder).
assert (Par G L K M) by (conclude lemma_collinearparallel).
assert (Par G L M K) by (forward_using lemma_parallelflip).
assert (Par M K G L) by (conclude lemma_parallelsymmetric).
assert (Par M K F G) by (conclude lemma_parallelsymmetric).
assert (Par M K G F) by (forward_using lemma_parallelflip).
assert (Col G L F) by (conclude lemma_Playfair).
assert (Col G F L) by (forward_using lemma_collinearorder).
assert (nCol F L M) by (forward_using lemma_parallelNC).
assert (neq L F) by (forward_using lemma_NCdistinct).
assert (Par M K L F) by (conclude lemma_collinearparallel).
assert (Par L F M K) by (conclude lemma_parallelsymmetric).
assert (Par F L K M) by (forward_using lemma_parallelflip).
assert (PG F K M L) by (conclude_def PG ).
assert (nCol F K H) by (forward_using lemma_parallelNC).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H J E N) by (conclude lemma_equalanglestransitive).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (Out K H M) by (conclude lemma_ray4).
assert (Out K M H) by (conclude lemma_ray5).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (neq K F) by (forward_using lemma_NCdistinct).
assert (Out K F F) by (conclude lemma_ray4).
assert (nCol F K M) by (forward_using lemma_parallelNC).
assert (CongA F K M F K M) by (conclude lemma_equalanglesreflexive).
assert (CongA F K M F K H) by (conclude lemma_equalangleshelper).
assert (CongA F K M J E N) by (conclude lemma_equalanglestransitive).
assert (Col B O D) by (conclude_def Col ).
assert (Col B D O) by (forward_using lemma_collinearorder).
assert (nCol B D A) by (forward_using lemma_NCorder).
assert (TS A B D C) by (conclude_def TS ).
assert (Par G H L M) by (forward_using lemma_parallelflip).
assert (TP G H L M) by (conclude lemma_paralleldef2B).
assert (OS L M G H) by (conclude_def TP ).
assert (Par F K G H) by (forward_using lemma_parallelflip).
assert (Par G H F K) by (conclude lemma_parallelsymmetric).
assert (TP G H F K) by (conclude lemma_paralleldef2B).
assert (OS F K G H) by (conclude_def TP ).
assert (eq H H) by (conclude cn_equalityreflexive).
assert (Col G H H) by (conclude_def Col ).
assert (TS K G H M) by (conclude_def TS ).
assert (TS F G H M) by (conclude lemma_planeseparation).
assert (TS M G H F) by (conclude lemma_oppositesidesymmetric).
assert (TS L G H F) by (conclude lemma_planeseparation).
let Tf:=fresh in assert (Tf:exists t, (BetS L t F /\\ Col G H t /\\ nCol G H L)) by (conclude_def TS );destruct Tf as [t];spliter.
assert (Col F L G) by (forward_using lemma_collinearorder).
assert (Col L t F) by (conclude_def Col ).
assert (Col F L t) by (forward_using lemma_collinearorder).
assert (neq F L) by (forward_using lemma_NCdistinct).

*****
H153 : neq F L
H152 : Col F L t
H151 : Col L t F
H150 : Col F L G
H149 : nCol G H L
H148 : Col G H t
H147 : BetS L t F
t : Point
H146 : TS L G H F
H145 : TS M G H F
H144 : TS F G H M
H143 : TS K G H M
H142 : Col G H H
H141 : eq H H
H140 : OS F K G H
H139 : TP G H F K
H138 : Par G H F K
H137 : Par F K G H
H136 : OS L M G H
H135 : TP G H L M
H134 : Par G H L M
H133 : TS A B D C
H132 : nCol B D A
H131 : Col B D O
H130 : Col B O D
H129 : CongA F K M J E N
H128 : CongA F K M F K H
H127 : CongA F K M F K M
H126 : nCol F K M
H125 : Out K F F
H124 : neq K F
H123 : eq F F
H122 : Out K M H
H121 : Out K H M
H120 : neq K H
H119 : CongA F K H J E N
H118 : CongA F K H H K F
H117 : nCol F K H
H116 : PG F K M L
H115 : Par F L K M
H114 : Par L F M K
H113 : Par M K L F
H112 : neq L F
H111 : nCol F L M
H110 : Col G F L
H109 : Col G L F
H108 : Par M K G F
H107 : Par M K F G
H106 : Par M K G L
H105 : Par G L M K
H104 : Par G L K M
H103 : Col H M K
H102 : Par F G M K
H101 : neq M K
H100 : neq K M
H99 : Col H K M
H98 : Col K H M
H97 : Par F G H K
H96 : Par G L H M
H95 : Par F G K H
H94 : Par F K M L
H93 : Par F K L M
H92 : Par L M G H
H91 : Par M L G H
H90 : Par F K G H
H89 : Col L M M
H88 : Col G H H
H87 : Col F K K
H86 : eq M M
H85 : eq H H
H84 : eq K K
H83 : neq L M
H82 : nCol H M L
H81 : Par G H M L
H80 : neq G H
H79 : nCol G H M
H78 : neq F K
H77 : BetS K H M
H76 : Out H G G
H75 : neq H G
H74 : eq G G
H73 : RT K H G G H M
H72 : RT G H M K H G
H71 : CongA F K H G H M
H70 : CongA F K H H K F
H69 : nCol F K H
H68 : nCol H K F
H67 : CongA G H M H K F
H66 : RT F K H K H G
H65 : OS F G K H
H64 : TP K H F G
H63 : Par K H F G
H62 : Par F G K H
H61 : Cong K s H K
H60 : BetS H K s
s : Point
H59 : neq H K
H58 : Par K F H G
H57 : Par F K H G
H56 : CongA H K F G H M
H55 : CongA J E N G H M
H54 : BetS B e C
H53 : TS M G H K
H52 : Midpoint B e C
H51 : EF D B e C G H M L
H50 : CongA G H M J E N
H49 : PG G H M L
M,L,e : Point
H48 : nCol G H K
H47 : nCol H G K
H46 : nCol K H G
H45 : Par F K H G
H44 : Triangle D B C
H43 : nCol D B C
H42 : OS S F K H
H41 : CongA H K F J E N
H40 : EF A B m D F K H G
H39 : PG F K H G
F,G : Point
H38 : nCol S K H
H37 : nCol H K S
H36 : neq H K
H35 : neq K H
H34 : Col R K K
H33 : eq K K
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (Col L G t) by (conclude lemma_collinear4).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (Col R K K) by (conclude_def Col ).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (neq H K) by (conclude lemma_inequalitysymmetric).
assert (nCol H K S) by (conclude lemma_NChelper).
assert (nCol S K H) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F G, (PG F K H G /\\ EF A B m D F K H G /\\ CongA H K F J E N /\\ OS S F K H)) by (conclude proposition_42B);destruct Tf as [F[G]];spliter.
assert (nCol D B C) by (forward_using lemma_NCorder).
assert (Triangle D B C) by (conclude_def Triangle ).
assert (Par F K H G) by (conclude_def PG ).
assert (nCol K H G) by (forward_using lemma_parallelNC).
assert (nCol H G K) by (forward_using lemma_NCorder).
assert (nCol G H K) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists M L e, (PG G H M L /\\ CongA G H M J E N /\\ EF D B e C G H M L /\\ Midpoint B e C /\\ TS M G H K)) by (conclude proposition_44);destruct Tf as [M[L[e]]];spliter.
assert (BetS B e C) by (conclude_def Midpoint ).
assert (CongA J E N G H M) by (conclude lemma_equalanglessymmetric).
assert (CongA H K F G H M) by (conclude lemma_equalanglestransitive).
assert (Par F K H G) by (conclude_def PG ).
assert (Par K F H G) by (forward_using lemma_parallelflip).
assert (neq H K) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists s, (BetS H K s /\\ Cong K s H K)) by (conclude lemma_extension);destruct Tf as [s];spliter.
assert (Par F G K H) by (conclude_def PG ).
assert (Par K H F G) by (conclude lemma_parallelsymmetric).
assert (TP K H F G) by (conclude lemma_paralleldef2B).
assert (OS F G K H) by (conclude_def TP ).
assert (RT F K H K H G) by (conclude proposition_29C).
assert (CongA G H M H K F) by (conclude lemma_equalanglessymmetric).
assert (nCol H K F) by (conclude lemma_equalanglesNC).
assert (nCol F K H) by (forward_using lemma_NCorder).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H G H M) by (conclude lemma_equalanglestransitive).
assert (RT G H M K H G) by (conclude lemma_RTcongruence).
assert (RT K H G G H M) by (conclude lemma_RTsymmetric).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (neq H G) by (forward_using lemma_NCdistinct).
assert (Out H G G) by (conclude lemma_ray4).
assert (BetS K H M) by (conclude proposition_14).
assert (neq F K) by (forward_using lemma_NCdistinct).
assert (nCol G H M) by (conclude lemma_equalanglesNC).
assert (neq G H) by (forward_using lemma_NCdistinct).
assert (Par G H M L) by (conclude_def PG ).
assert (nCol H M L) by (forward_using lemma_parallelNC).
assert (neq L M) by (forward_using lemma_NCdistinct).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (eq H H) by (conclude cn_equalityreflexive).
assert (eq M M) by (conclude cn_equalityreflexive).
assert (Col F K K) by (conclude_def Col ).
assert (Col G H H) by (conclude_def Col ).
assert (Col L M M) by (conclude_def Col ).
assert (Par F K G H) by (forward_using lemma_parallelflip).
assert (Par M L G H) by (conclude lemma_parallelsymmetric).
assert (Par L M G H) by (forward_using lemma_parallelflip).
assert (Par F K L M) by (conclude proposition_30).
assert (Par F K M L) by (forward_using lemma_parallelflip).
assert (Par F G K H) by (conclude_def PG ).
assert (Par G L H M) by (conclude_def PG ).
assert (Par F G H K) by (forward_using lemma_parallelflip).
assert (Col K H M) by (conclude_def Col ).
assert (Col H K M) by (forward_using lemma_collinearorder).
assert (neq K M) by (forward_using lemma_betweennotequal).
assert (neq M K) by (conclude lemma_inequalitysymmetric).
assert (Par F G M K) by (conclude lemma_collinearparallel).
assert (Col H M K) by (forward_using lemma_collinearorder).
assert (Par G L K M) by (conclude lemma_collinearparallel).
assert (Par G L M K) by (forward_using lemma_parallelflip).
assert (Par M K G L) by (conclude lemma_parallelsymmetric).
assert (Par M K F G) by (conclude lemma_parallelsymmetric).
assert (Par M K G F) by (forward_using lemma_parallelflip).
assert (Col G L F) by (conclude lemma_Playfair).
assert (Col G F L) by (forward_using lemma_collinearorder).
assert (nCol F L M) by (forward_using lemma_parallelNC).
assert (neq L F) by (forward_using lemma_NCdistinct).
assert (Par M K L F) by (conclude lemma_collinearparallel).
assert (Par L F M K) by (conclude lemma_parallelsymmetric).
assert (Par F L K M) by (forward_using lemma_parallelflip).
assert (PG F K M L) by (conclude_def PG ).
assert (nCol F K H) by (forward_using lemma_parallelNC).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H J E N) by (conclude lemma_equalanglestransitive).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (Out K H M) by (conclude lemma_ray4).
assert (Out K M H) by (conclude lemma_ray5).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (neq K F) by (forward_using lemma_NCdistinct).
assert (Out K F F) by (conclude lemma_ray4).
assert (nCol F K M) by (forward_using lemma_parallelNC).
assert (CongA F K M F K M) by (conclude lemma_equalanglesreflexive).
assert (CongA F K M F K H) by (conclude lemma_equalangleshelper).
assert (CongA F K M J E N) by (conclude lemma_equalanglestransitive).
assert (Col B O D) by (conclude_def Col ).
assert (Col B D O) by (forward_using lemma_collinearorder).
assert (nCol B D A) by (forward_using lemma_NCorder).
assert (TS A B D C) by (conclude_def TS ).
assert (Par G H L M) by (forward_using lemma_parallelflip).
assert (TP G H L M) by (conclude lemma_paralleldef2B).
assert (OS L M G H) by (conclude_def TP ).
assert (Par F K G H) by (forward_using lemma_parallelflip).
assert (Par G H F K) by (conclude lemma_parallelsymmetric).
assert (TP G H F K) by (conclude lemma_paralleldef2B).
assert (OS F K G H) by (conclude_def TP ).
assert (eq H H) by (conclude cn_equalityreflexive).
assert (Col G H H) by (conclude_def Col ).
assert (TS K G H M) by (conclude_def TS ).
assert (TS F G H M) by (conclude lemma_planeseparation).
assert (TS M G H F) by (conclude lemma_oppositesidesymmetric).
assert (TS L G H F) by (conclude lemma_planeseparation).
let Tf:=fresh in assert (Tf:exists t, (BetS L t F /\\ Col G H t /\\ nCol G H L)) by (conclude_def TS );destruct Tf as [t];spliter.
assert (Col F L G) by (forward_using lemma_collinearorder).
assert (Col L t F) by (conclude_def Col ).
assert (Col F L t) by (forward_using lemma_collinearorder).
assert (neq F L) by (forward_using lemma_NCdistinct).
assert (Col L G t) by (conclude lemma_collinear4).

*****
H154 : Col L G t
H153 : neq F L
H152 : Col F L t
H151 : Col L t F
H150 : Col F L G
H149 : nCol G H L
H148 : Col G H t
H147 : BetS L t F
t : Point
H146 : TS L G H F
H145 : TS M G H F
H144 : TS F G H M
H143 : TS K G H M
H142 : Col G H H
H141 : eq H H
H140 : OS F K G H
H139 : TP G H F K
H138 : Par G H F K
H137 : Par F K G H
H136 : OS L M G H
H135 : TP G H L M
H134 : Par G H L M
H133 : TS A B D C
H132 : nCol B D A
H131 : Col B D O
H130 : Col B O D
H129 : CongA F K M J E N
H128 : CongA F K M F K H
H127 : CongA F K M F K M
H126 : nCol F K M
H125 : Out K F F
H124 : neq K F
H123 : eq F F
H122 : Out K M H
H121 : Out K H M
H120 : neq K H
H119 : CongA F K H J E N
H118 : CongA F K H H K F
H117 : nCol F K H
H116 : PG F K M L
H115 : Par F L K M
H114 : Par L F M K
H113 : Par M K L F
H112 : neq L F
H111 : nCol F L M
H110 : Col G F L
H109 : Col G L F
H108 : Par M K G F
H107 : Par M K F G
H106 : Par M K G L
H105 : Par G L M K
H104 : Par G L K M
H103 : Col H M K
H102 : Par F G M K
H101 : neq M K
H100 : neq K M
H99 : Col H K M
H98 : Col K H M
H97 : Par F G H K
H96 : Par G L H M
H95 : Par F G K H
H94 : Par F K M L
H93 : Par F K L M
H92 : Par L M G H
H91 : Par M L G H
H90 : Par F K G H
H89 : Col L M M
H88 : Col G H H
H87 : Col F K K
H86 : eq M M
H85 : eq H H
H84 : eq K K
H83 : neq L M
H82 : nCol H M L
H81 : Par G H M L
H80 : neq G H
H79 : nCol G H M
H78 : neq F K
H77 : BetS K H M
H76 : Out H G G
H75 : neq H G
H74 : eq G G
H73 : RT K H G G H M
H72 : RT G H M K H G
H71 : CongA F K H G H M
H70 : CongA F K H H K F
H69 : nCol F K H
H68 : nCol H K F
H67 : CongA G H M H K F
H66 : RT F K H K H G
H65 : OS F G K H
H64 : TP K H F G
H63 : Par K H F G
H62 : Par F G K H
H61 : Cong K s H K
H60 : BetS H K s
s : Point
H59 : neq H K
H58 : Par K F H G
H57 : Par F K H G
H56 : CongA H K F G H M
H55 : CongA J E N G H M
H54 : BetS B e C
H53 : TS M G H K
H52 : Midpoint B e C
H51 : EF D B e C G H M L
H50 : CongA G H M J E N
H49 : PG G H M L
M,L,e : Point
H48 : nCol G H K
H47 : nCol H G K
H46 : nCol K H G
H45 : Par F K H G
H44 : Triangle D B C
H43 : nCol D B C
H42 : OS S F K H
H41 : CongA H K F J E N
H40 : EF A B m D F K H G
H39 : PG F K H G
F,G : Point
H38 : nCol S K H
H37 : nCol H K S
H36 : neq H K
H35 : neq K H
H34 : Col R K K
H33 : eq K K
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (Col t G L) by (forward_using lemma_collinearorder).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (Col R K K) by (conclude_def Col ).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (neq H K) by (conclude lemma_inequalitysymmetric).
assert (nCol H K S) by (conclude lemma_NChelper).
assert (nCol S K H) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F G, (PG F K H G /\\ EF A B m D F K H G /\\ CongA H K F J E N /\\ OS S F K H)) by (conclude proposition_42B);destruct Tf as [F[G]];spliter.
assert (nCol D B C) by (forward_using lemma_NCorder).
assert (Triangle D B C) by (conclude_def Triangle ).
assert (Par F K H G) by (conclude_def PG ).
assert (nCol K H G) by (forward_using lemma_parallelNC).
assert (nCol H G K) by (forward_using lemma_NCorder).
assert (nCol G H K) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists M L e, (PG G H M L /\\ CongA G H M J E N /\\ EF D B e C G H M L /\\ Midpoint B e C /\\ TS M G H K)) by (conclude proposition_44);destruct Tf as [M[L[e]]];spliter.
assert (BetS B e C) by (conclude_def Midpoint ).
assert (CongA J E N G H M) by (conclude lemma_equalanglessymmetric).
assert (CongA H K F G H M) by (conclude lemma_equalanglestransitive).
assert (Par F K H G) by (conclude_def PG ).
assert (Par K F H G) by (forward_using lemma_parallelflip).
assert (neq H K) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists s, (BetS H K s /\\ Cong K s H K)) by (conclude lemma_extension);destruct Tf as [s];spliter.
assert (Par F G K H) by (conclude_def PG ).
assert (Par K H F G) by (conclude lemma_parallelsymmetric).
assert (TP K H F G) by (conclude lemma_paralleldef2B).
assert (OS F G K H) by (conclude_def TP ).
assert (RT F K H K H G) by (conclude proposition_29C).
assert (CongA G H M H K F) by (conclude lemma_equalanglessymmetric).
assert (nCol H K F) by (conclude lemma_equalanglesNC).
assert (nCol F K H) by (forward_using lemma_NCorder).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H G H M) by (conclude lemma_equalanglestransitive).
assert (RT G H M K H G) by (conclude lemma_RTcongruence).
assert (RT K H G G H M) by (conclude lemma_RTsymmetric).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (neq H G) by (forward_using lemma_NCdistinct).
assert (Out H G G) by (conclude lemma_ray4).
assert (BetS K H M) by (conclude proposition_14).
assert (neq F K) by (forward_using lemma_NCdistinct).
assert (nCol G H M) by (conclude lemma_equalanglesNC).
assert (neq G H) by (forward_using lemma_NCdistinct).
assert (Par G H M L) by (conclude_def PG ).
assert (nCol H M L) by (forward_using lemma_parallelNC).
assert (neq L M) by (forward_using lemma_NCdistinct).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (eq H H) by (conclude cn_equalityreflexive).
assert (eq M M) by (conclude cn_equalityreflexive).
assert (Col F K K) by (conclude_def Col ).
assert (Col G H H) by (conclude_def Col ).
assert (Col L M M) by (conclude_def Col ).
assert (Par F K G H) by (forward_using lemma_parallelflip).
assert (Par M L G H) by (conclude lemma_parallelsymmetric).
assert (Par L M G H) by (forward_using lemma_parallelflip).
assert (Par F K L M) by (conclude proposition_30).
assert (Par F K M L) by (forward_using lemma_parallelflip).
assert (Par F G K H) by (conclude_def PG ).
assert (Par G L H M) by (conclude_def PG ).
assert (Par F G H K) by (forward_using lemma_parallelflip).
assert (Col K H M) by (conclude_def Col ).
assert (Col H K M) by (forward_using lemma_collinearorder).
assert (neq K M) by (forward_using lemma_betweennotequal).
assert (neq M K) by (conclude lemma_inequalitysymmetric).
assert (Par F G M K) by (conclude lemma_collinearparallel).
assert (Col H M K) by (forward_using lemma_collinearorder).
assert (Par G L K M) by (conclude lemma_collinearparallel).
assert (Par G L M K) by (forward_using lemma_parallelflip).
assert (Par M K G L) by (conclude lemma_parallelsymmetric).
assert (Par M K F G) by (conclude lemma_parallelsymmetric).
assert (Par M K G F) by (forward_using lemma_parallelflip).
assert (Col G L F) by (conclude lemma_Playfair).
assert (Col G F L) by (forward_using lemma_collinearorder).
assert (nCol F L M) by (forward_using lemma_parallelNC).
assert (neq L F) by (forward_using lemma_NCdistinct).
assert (Par M K L F) by (conclude lemma_collinearparallel).
assert (Par L F M K) by (conclude lemma_parallelsymmetric).
assert (Par F L K M) by (forward_using lemma_parallelflip).
assert (PG F K M L) by (conclude_def PG ).
assert (nCol F K H) by (forward_using lemma_parallelNC).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H J E N) by (conclude lemma_equalanglestransitive).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (Out K H M) by (conclude lemma_ray4).
assert (Out K M H) by (conclude lemma_ray5).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (neq K F) by (forward_using lemma_NCdistinct).
assert (Out K F F) by (conclude lemma_ray4).
assert (nCol F K M) by (forward_using lemma_parallelNC).
assert (CongA F K M F K M) by (conclude lemma_equalanglesreflexive).
assert (CongA F K M F K H) by (conclude lemma_equalangleshelper).
assert (CongA F K M J E N) by (conclude lemma_equalanglestransitive).
assert (Col B O D) by (conclude_def Col ).
assert (Col B D O) by (forward_using lemma_collinearorder).
assert (nCol B D A) by (forward_using lemma_NCorder).
assert (TS A B D C) by (conclude_def TS ).
assert (Par G H L M) by (forward_using lemma_parallelflip).
assert (TP G H L M) by (conclude lemma_paralleldef2B).
assert (OS L M G H) by (conclude_def TP ).
assert (Par F K G H) by (forward_using lemma_parallelflip).
assert (Par G H F K) by (conclude lemma_parallelsymmetric).
assert (TP G H F K) by (conclude lemma_paralleldef2B).
assert (OS F K G H) by (conclude_def TP ).
assert (eq H H) by (conclude cn_equalityreflexive).
assert (Col G H H) by (conclude_def Col ).
assert (TS K G H M) by (conclude_def TS ).
assert (TS F G H M) by (conclude lemma_planeseparation).
assert (TS M G H F) by (conclude lemma_oppositesidesymmetric).
assert (TS L G H F) by (conclude lemma_planeseparation).
let Tf:=fresh in assert (Tf:exists t, (BetS L t F /\\ Col G H t /\\ nCol G H L)) by (conclude_def TS );destruct Tf as [t];spliter.
assert (Col F L G) by (forward_using lemma_collinearorder).
assert (Col L t F) by (conclude_def Col ).
assert (Col F L t) by (forward_using lemma_collinearorder).
assert (neq F L) by (forward_using lemma_NCdistinct).
assert (Col L G t) by (conclude lemma_collinear4).
assert (Col t G L) by (forward_using lemma_collinearorder).

*****
H155 : Col t G L
H154 : Col L G t
H153 : neq F L
H152 : Col F L t
H151 : Col L t F
H150 : Col F L G
H149 : nCol G H L
H148 : Col G H t
H147 : BetS L t F
t : Point
H146 : TS L G H F
H145 : TS M G H F
H144 : TS F G H M
H143 : TS K G H M
H142 : Col G H H
H141 : eq H H
H140 : OS F K G H
H139 : TP G H F K
H138 : Par G H F K
H137 : Par F K G H
H136 : OS L M G H
H135 : TP G H L M
H134 : Par G H L M
H133 : TS A B D C
H132 : nCol B D A
H131 : Col B D O
H130 : Col B O D
H129 : CongA F K M J E N
H128 : CongA F K M F K H
H127 : CongA F K M F K M
H126 : nCol F K M
H125 : Out K F F
H124 : neq K F
H123 : eq F F
H122 : Out K M H
H121 : Out K H M
H120 : neq K H
H119 : CongA F K H J E N
H118 : CongA F K H H K F
H117 : nCol F K H
H116 : PG F K M L
H115 : Par F L K M
H114 : Par L F M K
H113 : Par M K L F
H112 : neq L F
H111 : nCol F L M
H110 : Col G F L
H109 : Col G L F
H108 : Par M K G F
H107 : Par M K F G
H106 : Par M K G L
H105 : Par G L M K
H104 : Par G L K M
H103 : Col H M K
H102 : Par F G M K
H101 : neq M K
H100 : neq K M
H99 : Col H K M
H98 : Col K H M
H97 : Par F G H K
H96 : Par G L H M
H95 : Par F G K H
H94 : Par F K M L
H93 : Par F K L M
H92 : Par L M G H
H91 : Par M L G H
H90 : Par F K G H
H89 : Col L M M
H88 : Col G H H
H87 : Col F K K
H86 : eq M M
H85 : eq H H
H84 : eq K K
H83 : neq L M
H82 : nCol H M L
H81 : Par G H M L
H80 : neq G H
H79 : nCol G H M
H78 : neq F K
H77 : BetS K H M
H76 : Out H G G
H75 : neq H G
H74 : eq G G
H73 : RT K H G G H M
H72 : RT G H M K H G
H71 : CongA F K H G H M
H70 : CongA F K H H K F
H69 : nCol F K H
H68 : nCol H K F
H67 : CongA G H M H K F
H66 : RT F K H K H G
H65 : OS F G K H
H64 : TP K H F G
H63 : Par K H F G
H62 : Par F G K H
H61 : Cong K s H K
H60 : BetS H K s
s : Point
H59 : neq H K
H58 : Par K F H G
H57 : Par F K H G
H56 : CongA H K F G H M
H55 : CongA J E N G H M
H54 : BetS B e C
H53 : TS M G H K
H52 : Midpoint B e C
H51 : EF D B e C G H M L
H50 : CongA G H M J E N
H49 : PG G H M L
M,L,e : Point
H48 : nCol G H K
H47 : nCol H G K
H46 : nCol K H G
H45 : Par F K H G
H44 : Triangle D B C
H43 : nCol D B C
H42 : OS S F K H
H41 : CongA H K F J E N
H40 : EF A B m D F K H G
H39 : PG F K H G
F,G : Point
H38 : nCol S K H
H37 : nCol H K S
H36 : neq H K
H35 : neq K H
H34 : Col R K K
H33 : eq K K
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (Col t G H) by (forward_using lemma_collinearorder).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (Col R K K) by (conclude_def Col ).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (neq H K) by (conclude lemma_inequalitysymmetric).
assert (nCol H K S) by (conclude lemma_NChelper).
assert (nCol S K H) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F G, (PG F K H G /\\ EF A B m D F K H G /\\ CongA H K F J E N /\\ OS S F K H)) by (conclude proposition_42B);destruct Tf as [F[G]];spliter.
assert (nCol D B C) by (forward_using lemma_NCorder).
assert (Triangle D B C) by (conclude_def Triangle ).
assert (Par F K H G) by (conclude_def PG ).
assert (nCol K H G) by (forward_using lemma_parallelNC).
assert (nCol H G K) by (forward_using lemma_NCorder).
assert (nCol G H K) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists M L e, (PG G H M L /\\ CongA G H M J E N /\\ EF D B e C G H M L /\\ Midpoint B e C /\\ TS M G H K)) by (conclude proposition_44);destruct Tf as [M[L[e]]];spliter.
assert (BetS B e C) by (conclude_def Midpoint ).
assert (CongA J E N G H M) by (conclude lemma_equalanglessymmetric).
assert (CongA H K F G H M) by (conclude lemma_equalanglestransitive).
assert (Par F K H G) by (conclude_def PG ).
assert (Par K F H G) by (forward_using lemma_parallelflip).
assert (neq H K) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists s, (BetS H K s /\\ Cong K s H K)) by (conclude lemma_extension);destruct Tf as [s];spliter.
assert (Par F G K H) by (conclude_def PG ).
assert (Par K H F G) by (conclude lemma_parallelsymmetric).
assert (TP K H F G) by (conclude lemma_paralleldef2B).
assert (OS F G K H) by (conclude_def TP ).
assert (RT F K H K H G) by (conclude proposition_29C).
assert (CongA G H M H K F) by (conclude lemma_equalanglessymmetric).
assert (nCol H K F) by (conclude lemma_equalanglesNC).
assert (nCol F K H) by (forward_using lemma_NCorder).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H G H M) by (conclude lemma_equalanglestransitive).
assert (RT G H M K H G) by (conclude lemma_RTcongruence).
assert (RT K H G G H M) by (conclude lemma_RTsymmetric).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (neq H G) by (forward_using lemma_NCdistinct).
assert (Out H G G) by (conclude lemma_ray4).
assert (BetS K H M) by (conclude proposition_14).
assert (neq F K) by (forward_using lemma_NCdistinct).
assert (nCol G H M) by (conclude lemma_equalanglesNC).
assert (neq G H) by (forward_using lemma_NCdistinct).
assert (Par G H M L) by (conclude_def PG ).
assert (nCol H M L) by (forward_using lemma_parallelNC).
assert (neq L M) by (forward_using lemma_NCdistinct).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (eq H H) by (conclude cn_equalityreflexive).
assert (eq M M) by (conclude cn_equalityreflexive).
assert (Col F K K) by (conclude_def Col ).
assert (Col G H H) by (conclude_def Col ).
assert (Col L M M) by (conclude_def Col ).
assert (Par F K G H) by (forward_using lemma_parallelflip).
assert (Par M L G H) by (conclude lemma_parallelsymmetric).
assert (Par L M G H) by (forward_using lemma_parallelflip).
assert (Par F K L M) by (conclude proposition_30).
assert (Par F K M L) by (forward_using lemma_parallelflip).
assert (Par F G K H) by (conclude_def PG ).
assert (Par G L H M) by (conclude_def PG ).
assert (Par F G H K) by (forward_using lemma_parallelflip).
assert (Col K H M) by (conclude_def Col ).
assert (Col H K M) by (forward_using lemma_collinearorder).
assert (neq K M) by (forward_using lemma_betweennotequal).
assert (neq M K) by (conclude lemma_inequalitysymmetric).
assert (Par F G M K) by (conclude lemma_collinearparallel).
assert (Col H M K) by (forward_using lemma_collinearorder).
assert (Par G L K M) by (conclude lemma_collinearparallel).
assert (Par G L M K) by (forward_using lemma_parallelflip).
assert (Par M K G L) by (conclude lemma_parallelsymmetric).
assert (Par M K F G) by (conclude lemma_parallelsymmetric).
assert (Par M K G F) by (forward_using lemma_parallelflip).
assert (Col G L F) by (conclude lemma_Playfair).
assert (Col G F L) by (forward_using lemma_collinearorder).
assert (nCol F L M) by (forward_using lemma_parallelNC).
assert (neq L F) by (forward_using lemma_NCdistinct).
assert (Par M K L F) by (conclude lemma_collinearparallel).
assert (Par L F M K) by (conclude lemma_parallelsymmetric).
assert (Par F L K M) by (forward_using lemma_parallelflip).
assert (PG F K M L) by (conclude_def PG ).
assert (nCol F K H) by (forward_using lemma_parallelNC).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H J E N) by (conclude lemma_equalanglestransitive).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (Out K H M) by (conclude lemma_ray4).
assert (Out K M H) by (conclude lemma_ray5).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (neq K F) by (forward_using lemma_NCdistinct).
assert (Out K F F) by (conclude lemma_ray4).
assert (nCol F K M) by (forward_using lemma_parallelNC).
assert (CongA F K M F K M) by (conclude lemma_equalanglesreflexive).
assert (CongA F K M F K H) by (conclude lemma_equalangleshelper).
assert (CongA F K M J E N) by (conclude lemma_equalanglestransitive).
assert (Col B O D) by (conclude_def Col ).
assert (Col B D O) by (forward_using lemma_collinearorder).
assert (nCol B D A) by (forward_using lemma_NCorder).
assert (TS A B D C) by (conclude_def TS ).
assert (Par G H L M) by (forward_using lemma_parallelflip).
assert (TP G H L M) by (conclude lemma_paralleldef2B).
assert (OS L M G H) by (conclude_def TP ).
assert (Par F K G H) by (forward_using lemma_parallelflip).
assert (Par G H F K) by (conclude lemma_parallelsymmetric).
assert (TP G H F K) by (conclude lemma_paralleldef2B).
assert (OS F K G H) by (conclude_def TP ).
assert (eq H H) by (conclude cn_equalityreflexive).
assert (Col G H H) by (conclude_def Col ).
assert (TS K G H M) by (conclude_def TS ).
assert (TS F G H M) by (conclude lemma_planeseparation).
assert (TS M G H F) by (conclude lemma_oppositesidesymmetric).
assert (TS L G H F) by (conclude lemma_planeseparation).
let Tf:=fresh in assert (Tf:exists t, (BetS L t F /\\ Col G H t /\\ nCol G H L)) by (conclude_def TS );destruct Tf as [t];spliter.
assert (Col F L G) by (forward_using lemma_collinearorder).
assert (Col L t F) by (conclude_def Col ).
assert (Col F L t) by (forward_using lemma_collinearorder).
assert (neq F L) by (forward_using lemma_NCdistinct).
assert (Col L G t) by (conclude lemma_collinear4).
assert (Col t G L) by (forward_using lemma_collinearorder).
assert (Col t G H) by (forward_using lemma_collinearorder).

*****
H156 : Col t G H
H155 : Col t G L
H154 : Col L G t
H153 : neq F L
H152 : Col F L t
H151 : Col L t F
H150 : Col F L G
H149 : nCol G H L
H148 : Col G H t
H147 : BetS L t F
t : Point
H146 : TS L G H F
H145 : TS M G H F
H144 : TS F G H M
H143 : TS K G H M
H142 : Col G H H
H141 : eq H H
H140 : OS F K G H
H139 : TP G H F K
H138 : Par G H F K
H137 : Par F K G H
H136 : OS L M G H
H135 : TP G H L M
H134 : Par G H L M
H133 : TS A B D C
H132 : nCol B D A
H131 : Col B D O
H130 : Col B O D
H129 : CongA F K M J E N
H128 : CongA F K M F K H
H127 : CongA F K M F K M
H126 : nCol F K M
H125 : Out K F F
H124 : neq K F
H123 : eq F F
H122 : Out K M H
H121 : Out K H M
H120 : neq K H
H119 : CongA F K H J E N
H118 : CongA F K H H K F
H117 : nCol F K H
H116 : PG F K M L
H115 : Par F L K M
H114 : Par L F M K
H113 : Par M K L F
H112 : neq L F
H111 : nCol F L M
H110 : Col G F L
H109 : Col G L F
H108 : Par M K G F
H107 : Par M K F G
H106 : Par M K G L
H105 : Par G L M K
H104 : Par G L K M
H103 : Col H M K
H102 : Par F G M K
H101 : neq M K
H100 : neq K M
H99 : Col H K M
H98 : Col K H M
H97 : Par F G H K
H96 : Par G L H M
H95 : Par F G K H
H94 : Par F K M L
H93 : Par F K L M
H92 : Par L M G H
H91 : Par M L G H
H90 : Par F K G H
H89 : Col L M M
H88 : Col G H H
H87 : Col F K K
H86 : eq M M
H85 : eq H H
H84 : eq K K
H83 : neq L M
H82 : nCol H M L
H81 : Par G H M L
H80 : neq G H
H79 : nCol G H M
H78 : neq F K
H77 : BetS K H M
H76 : Out H G G
H75 : neq H G
H74 : eq G G
H73 : RT K H G G H M
H72 : RT G H M K H G
H71 : CongA F K H G H M
H70 : CongA F K H H K F
H69 : nCol F K H
H68 : nCol H K F
H67 : CongA G H M H K F
H66 : RT F K H K H G
H65 : OS F G K H
H64 : TP K H F G
H63 : Par K H F G
H62 : Par F G K H
H61 : Cong K s H K
H60 : BetS H K s
s : Point
H59 : neq H K
H58 : Par K F H G
H57 : Par F K H G
H56 : CongA H K F G H M
H55 : CongA J E N G H M
H54 : BetS B e C
H53 : TS M G H K
H52 : Midpoint B e C
H51 : EF D B e C G H M L
H50 : CongA G H M J E N
H49 : PG G H M L
M,L,e : Point
H48 : nCol G H K
H47 : nCol H G K
H46 : nCol K H G
H45 : Par F K H G
H44 : Triangle D B C
H43 : nCol D B C
H42 : OS S F K H
H41 : CongA H K F J E N
H40 : EF A B m D F K H G
H39 : PG F K H G
F,G : Point
H38 : nCol S K H
H37 : nCol H K S
H36 : neq H K
H35 : neq K H
H34 : Col R K K
H33 : eq K K
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (~ neq t G).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (Col R K K) by (conclude_def Col ).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (neq H K) by (conclude lemma_inequalitysymmetric).
assert (nCol H K S) by (conclude lemma_NChelper).
assert (nCol S K H) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F G, (PG F K H G /\\ EF A B m D F K H G /\\ CongA H K F J E N /\\ OS S F K H)) by (conclude proposition_42B);destruct Tf as [F[G]];spliter.
assert (nCol D B C) by (forward_using lemma_NCorder).
assert (Triangle D B C) by (conclude_def Triangle ).
assert (Par F K H G) by (conclude_def PG ).
assert (nCol K H G) by (forward_using lemma_parallelNC).
assert (nCol H G K) by (forward_using lemma_NCorder).
assert (nCol G H K) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists M L e, (PG G H M L /\\ CongA G H M J E N /\\ EF D B e C G H M L /\\ Midpoint B e C /\\ TS M G H K)) by (conclude proposition_44);destruct Tf as [M[L[e]]];spliter.
assert (BetS B e C) by (conclude_def Midpoint ).
assert (CongA J E N G H M) by (conclude lemma_equalanglessymmetric).
assert (CongA H K F G H M) by (conclude lemma_equalanglestransitive).
assert (Par F K H G) by (conclude_def PG ).
assert (Par K F H G) by (forward_using lemma_parallelflip).
assert (neq H K) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists s, (BetS H K s /\\ Cong K s H K)) by (conclude lemma_extension);destruct Tf as [s];spliter.
assert (Par F G K H) by (conclude_def PG ).
assert (Par K H F G) by (conclude lemma_parallelsymmetric).
assert (TP K H F G) by (conclude lemma_paralleldef2B).
assert (OS F G K H) by (conclude_def TP ).
assert (RT F K H K H G) by (conclude proposition_29C).
assert (CongA G H M H K F) by (conclude lemma_equalanglessymmetric).
assert (nCol H K F) by (conclude lemma_equalanglesNC).
assert (nCol F K H) by (forward_using lemma_NCorder).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H G H M) by (conclude lemma_equalanglestransitive).
assert (RT G H M K H G) by (conclude lemma_RTcongruence).
assert (RT K H G G H M) by (conclude lemma_RTsymmetric).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (neq H G) by (forward_using lemma_NCdistinct).
assert (Out H G G) by (conclude lemma_ray4).
assert (BetS K H M) by (conclude proposition_14).
assert (neq F K) by (forward_using lemma_NCdistinct).
assert (nCol G H M) by (conclude lemma_equalanglesNC).
assert (neq G H) by (forward_using lemma_NCdistinct).
assert (Par G H M L) by (conclude_def PG ).
assert (nCol H M L) by (forward_using lemma_parallelNC).
assert (neq L M) by (forward_using lemma_NCdistinct).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (eq H H) by (conclude cn_equalityreflexive).
assert (eq M M) by (conclude cn_equalityreflexive).
assert (Col F K K) by (conclude_def Col ).
assert (Col G H H) by (conclude_def Col ).
assert (Col L M M) by (conclude_def Col ).
assert (Par F K G H) by (forward_using lemma_parallelflip).
assert (Par M L G H) by (conclude lemma_parallelsymmetric).
assert (Par L M G H) by (forward_using lemma_parallelflip).
assert (Par F K L M) by (conclude proposition_30).
assert (Par F K M L) by (forward_using lemma_parallelflip).
assert (Par F G K H) by (conclude_def PG ).
assert (Par G L H M) by (conclude_def PG ).
assert (Par F G H K) by (forward_using lemma_parallelflip).
assert (Col K H M) by (conclude_def Col ).
assert (Col H K M) by (forward_using lemma_collinearorder).
assert (neq K M) by (forward_using lemma_betweennotequal).
assert (neq M K) by (conclude lemma_inequalitysymmetric).
assert (Par F G M K) by (conclude lemma_collinearparallel).
assert (Col H M K) by (forward_using lemma_collinearorder).
assert (Par G L K M) by (conclude lemma_collinearparallel).
assert (Par G L M K) by (forward_using lemma_parallelflip).
assert (Par M K G L) by (conclude lemma_parallelsymmetric).
assert (Par M K F G) by (conclude lemma_parallelsymmetric).
assert (Par M K G F) by (forward_using lemma_parallelflip).
assert (Col G L F) by (conclude lemma_Playfair).
assert (Col G F L) by (forward_using lemma_collinearorder).
assert (nCol F L M) by (forward_using lemma_parallelNC).
assert (neq L F) by (forward_using lemma_NCdistinct).
assert (Par M K L F) by (conclude lemma_collinearparallel).
assert (Par L F M K) by (conclude lemma_parallelsymmetric).
assert (Par F L K M) by (forward_using lemma_parallelflip).
assert (PG F K M L) by (conclude_def PG ).
assert (nCol F K H) by (forward_using lemma_parallelNC).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H J E N) by (conclude lemma_equalanglestransitive).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (Out K H M) by (conclude lemma_ray4).
assert (Out K M H) by (conclude lemma_ray5).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (neq K F) by (forward_using lemma_NCdistinct).
assert (Out K F F) by (conclude lemma_ray4).
assert (nCol F K M) by (forward_using lemma_parallelNC).
assert (CongA F K M F K M) by (conclude lemma_equalanglesreflexive).
assert (CongA F K M F K H) by (conclude lemma_equalangleshelper).
assert (CongA F K M J E N) by (conclude lemma_equalanglestransitive).
assert (Col B O D) by (conclude_def Col ).
assert (Col B D O) by (forward_using lemma_collinearorder).
assert (nCol B D A) by (forward_using lemma_NCorder).
assert (TS A B D C) by (conclude_def TS ).
assert (Par G H L M) by (forward_using lemma_parallelflip).
assert (TP G H L M) by (conclude lemma_paralleldef2B).
assert (OS L M G H) by (conclude_def TP ).
assert (Par F K G H) by (forward_using lemma_parallelflip).
assert (Par G H F K) by (conclude lemma_parallelsymmetric).
assert (TP G H F K) by (conclude lemma_paralleldef2B).
assert (OS F K G H) by (conclude_def TP ).
assert (eq H H) by (conclude cn_equalityreflexive).
assert (Col G H H) by (conclude_def Col ).
assert (TS K G H M) by (conclude_def TS ).
assert (TS F G H M) by (conclude lemma_planeseparation).
assert (TS M G H F) by (conclude lemma_oppositesidesymmetric).
assert (TS L G H F) by (conclude lemma_planeseparation).
let Tf:=fresh in assert (Tf:exists t, (BetS L t F /\\ Col G H t /\\ nCol G H L)) by (conclude_def TS );destruct Tf as [t];spliter.
assert (Col F L G) by (forward_using lemma_collinearorder).
assert (Col L t F) by (conclude_def Col ).
assert (Col F L t) by (forward_using lemma_collinearorder).
assert (neq F L) by (forward_using lemma_NCdistinct).
assert (Col L G t) by (conclude lemma_collinear4).
assert (Col t G L) by (forward_using lemma_collinearorder).
assert (Col t G H) by (forward_using lemma_collinearorder).
assert (~ neq t G).

*****
H156 : Col t G H
H155 : Col t G L
H154 : Col L G t
H153 : neq F L
H152 : Col F L t
H151 : Col L t F
H150 : Col F L G
H149 : nCol G H L
H148 : Col G H t
H147 : BetS L t F
t : Point
H146 : TS L G H F
H145 : TS M G H F
H144 : TS F G H M
H143 : TS K G H M
H142 : Col G H H
H141 : eq H H
H140 : OS F K G H
H139 : TP G H F K
H138 : Par G H F K
H137 : Par F K G H
H136 : OS L M G H
H135 : TP G H L M
H134 : Par G H L M
H133 : TS A B D C
H132 : nCol B D A
H131 : Col B D O
H130 : Col B O D
H129 : CongA F K M J E N
H128 : CongA F K M F K H
H127 : CongA F K M F K M
H126 : nCol F K M
H125 : Out K F F
H124 : neq K F
H123 : eq F F
H122 : Out K M H
H121 : Out K H M
H120 : neq K H
H119 : CongA F K H J E N
H118 : CongA F K H H K F
H117 : nCol F K H
H116 : PG F K M L
H115 : Par F L K M
H114 : Par L F M K
H113 : Par M K L F
H112 : neq L F
H111 : nCol F L M
H110 : Col G F L
H109 : Col G L F
H108 : Par M K G F
H107 : Par M K F G
H106 : Par M K G L
H105 : Par G L M K
H104 : Par G L K M
H103 : Col H M K
H102 : Par F G M K
H101 : neq M K
H100 : neq K M
H99 : Col H K M
H98 : Col K H M
H97 : Par F G H K
H96 : Par G L H M
H95 : Par F G K H
H94 : Par F K M L
H93 : Par F K L M
H92 : Par L M G H
H91 : Par M L G H
H90 : Par F K G H
H89 : Col L M M
H88 : Col G H H
H87 : Col F K K
H86 : eq M M
H85 : eq H H
H84 : eq K K
H83 : neq L M
H82 : nCol H M L
H81 : Par G H M L
H80 : neq G H
H79 : nCol G H M
H78 : neq F K
H77 : BetS K H M
H76 : Out H G G
H75 : neq H G
H74 : eq G G
H73 : RT K H G G H M
H72 : RT G H M K H G
H71 : CongA F K H G H M
H70 : CongA F K H H K F
H69 : nCol F K H
H68 : nCol H K F
H67 : CongA G H M H K F
H66 : RT F K H K H G
H65 : OS F G K H
H64 : TP K H F G
H63 : Par K H F G
H62 : Par F G K H
H61 : Cong K s H K
H60 : BetS H K s
s : Point
H59 : neq H K
H58 : Par K F H G
H57 : Par F K H G
H56 : CongA H K F G H M
H55 : CongA J E N G H M
H54 : BetS B e C
H53 : TS M G H K
H52 : Midpoint B e C
H51 : EF D B e C G H M L
H50 : CongA G H M J E N
H49 : PG G H M L
M,L,e : Point
H48 : nCol G H K
H47 : nCol H G K
H46 : nCol K H G
H45 : Par F K H G
H44 : Triangle D B C
H43 : nCol D B C
H42 : OS S F K H
H41 : CongA H K F J E N
H40 : EF A B m D F K H G
H39 : PG F K H G
F,G : Point
H38 : nCol S K H
H37 : nCol H K S
H36 : neq H K
H35 : neq K H
H34 : Col R K K
H33 : eq K K
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (neq t G)
+++++
intro.
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (Col R K K) by (conclude_def Col ).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (neq H K) by (conclude lemma_inequalitysymmetric).
assert (nCol H K S) by (conclude lemma_NChelper).
assert (nCol S K H) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F G, (PG F K H G /\\ EF A B m D F K H G /\\ CongA H K F J E N /\\ OS S F K H)) by (conclude proposition_42B);destruct Tf as [F[G]];spliter.
assert (nCol D B C) by (forward_using lemma_NCorder).
assert (Triangle D B C) by (conclude_def Triangle ).
assert (Par F K H G) by (conclude_def PG ).
assert (nCol K H G) by (forward_using lemma_parallelNC).
assert (nCol H G K) by (forward_using lemma_NCorder).
assert (nCol G H K) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists M L e, (PG G H M L /\\ CongA G H M J E N /\\ EF D B e C G H M L /\\ Midpoint B e C /\\ TS M G H K)) by (conclude proposition_44);destruct Tf as [M[L[e]]];spliter.
assert (BetS B e C) by (conclude_def Midpoint ).
assert (CongA J E N G H M) by (conclude lemma_equalanglessymmetric).
assert (CongA H K F G H M) by (conclude lemma_equalanglestransitive).
assert (Par F K H G) by (conclude_def PG ).
assert (Par K F H G) by (forward_using lemma_parallelflip).
assert (neq H K) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists s, (BetS H K s /\\ Cong K s H K)) by (conclude lemma_extension);destruct Tf as [s];spliter.
assert (Par F G K H) by (conclude_def PG ).
assert (Par K H F G) by (conclude lemma_parallelsymmetric).
assert (TP K H F G) by (conclude lemma_paralleldef2B).
assert (OS F G K H) by (conclude_def TP ).
assert (RT F K H K H G) by (conclude proposition_29C).
assert (CongA G H M H K F) by (conclude lemma_equalanglessymmetric).
assert (nCol H K F) by (conclude lemma_equalanglesNC).
assert (nCol F K H) by (forward_using lemma_NCorder).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H G H M) by (conclude lemma_equalanglestransitive).
assert (RT G H M K H G) by (conclude lemma_RTcongruence).
assert (RT K H G G H M) by (conclude lemma_RTsymmetric).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (neq H G) by (forward_using lemma_NCdistinct).
assert (Out H G G) by (conclude lemma_ray4).
assert (BetS K H M) by (conclude proposition_14).
assert (neq F K) by (forward_using lemma_NCdistinct).
assert (nCol G H M) by (conclude lemma_equalanglesNC).
assert (neq G H) by (forward_using lemma_NCdistinct).
assert (Par G H M L) by (conclude_def PG ).
assert (nCol H M L) by (forward_using lemma_parallelNC).
assert (neq L M) by (forward_using lemma_NCdistinct).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (eq H H) by (conclude cn_equalityreflexive).
assert (eq M M) by (conclude cn_equalityreflexive).
assert (Col F K K) by (conclude_def Col ).
assert (Col G H H) by (conclude_def Col ).
assert (Col L M M) by (conclude_def Col ).
assert (Par F K G H) by (forward_using lemma_parallelflip).
assert (Par M L G H) by (conclude lemma_parallelsymmetric).
assert (Par L M G H) by (forward_using lemma_parallelflip).
assert (Par F K L M) by (conclude proposition_30).
assert (Par F K M L) by (forward_using lemma_parallelflip).
assert (Par F G K H) by (conclude_def PG ).
assert (Par G L H M) by (conclude_def PG ).
assert (Par F G H K) by (forward_using lemma_parallelflip).
assert (Col K H M) by (conclude_def Col ).
assert (Col H K M) by (forward_using lemma_collinearorder).
assert (neq K M) by (forward_using lemma_betweennotequal).
assert (neq M K) by (conclude lemma_inequalitysymmetric).
assert (Par F G M K) by (conclude lemma_collinearparallel).
assert (Col H M K) by (forward_using lemma_collinearorder).
assert (Par G L K M) by (conclude lemma_collinearparallel).
assert (Par G L M K) by (forward_using lemma_parallelflip).
assert (Par M K G L) by (conclude lemma_parallelsymmetric).
assert (Par M K F G) by (conclude lemma_parallelsymmetric).
assert (Par M K G F) by (forward_using lemma_parallelflip).
assert (Col G L F) by (conclude lemma_Playfair).
assert (Col G F L) by (forward_using lemma_collinearorder).
assert (nCol F L M) by (forward_using lemma_parallelNC).
assert (neq L F) by (forward_using lemma_NCdistinct).
assert (Par M K L F) by (conclude lemma_collinearparallel).
assert (Par L F M K) by (conclude lemma_parallelsymmetric).
assert (Par F L K M) by (forward_using lemma_parallelflip).
assert (PG F K M L) by (conclude_def PG ).
assert (nCol F K H) by (forward_using lemma_parallelNC).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H J E N) by (conclude lemma_equalanglestransitive).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (Out K H M) by (conclude lemma_ray4).
assert (Out K M H) by (conclude lemma_ray5).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (neq K F) by (forward_using lemma_NCdistinct).
assert (Out K F F) by (conclude lemma_ray4).
assert (nCol F K M) by (forward_using lemma_parallelNC).
assert (CongA F K M F K M) by (conclude lemma_equalanglesreflexive).
assert (CongA F K M F K H) by (conclude lemma_equalangleshelper).
assert (CongA F K M J E N) by (conclude lemma_equalanglestransitive).
assert (Col B O D) by (conclude_def Col ).
assert (Col B D O) by (forward_using lemma_collinearorder).
assert (nCol B D A) by (forward_using lemma_NCorder).
assert (TS A B D C) by (conclude_def TS ).
assert (Par G H L M) by (forward_using lemma_parallelflip).
assert (TP G H L M) by (conclude lemma_paralleldef2B).
assert (OS L M G H) by (conclude_def TP ).
assert (Par F K G H) by (forward_using lemma_parallelflip).
assert (Par G H F K) by (conclude lemma_parallelsymmetric).
assert (TP G H F K) by (conclude lemma_paralleldef2B).
assert (OS F K G H) by (conclude_def TP ).
assert (eq H H) by (conclude cn_equalityreflexive).
assert (Col G H H) by (conclude_def Col ).
assert (TS K G H M) by (conclude_def TS ).
assert (TS F G H M) by (conclude lemma_planeseparation).
assert (TS M G H F) by (conclude lemma_oppositesidesymmetric).
assert (TS L G H F) by (conclude lemma_planeseparation).
let Tf:=fresh in assert (Tf:exists t, (BetS L t F /\\ Col G H t /\\ nCol G H L)) by (conclude_def TS );destruct Tf as [t];spliter.
assert (Col F L G) by (forward_using lemma_collinearorder).
assert (Col L t F) by (conclude_def Col ).
assert (Col F L t) by (forward_using lemma_collinearorder).
assert (neq F L) by (forward_using lemma_NCdistinct).
assert (Col L G t) by (conclude lemma_collinear4).
assert (Col t G L) by (forward_using lemma_collinearorder).
assert (Col t G H) by (forward_using lemma_collinearorder).
assert (~ neq t G).
intro.

*****
H157 : neq t G
H156 : Col t G H
H155 : Col t G L
H154 : Col L G t
H153 : neq F L
H152 : Col F L t
H151 : Col L t F
H150 : Col F L G
H149 : nCol G H L
H148 : Col G H t
H147 : BetS L t F
t : Point
H146 : TS L G H F
H145 : TS M G H F
H144 : TS F G H M
H143 : TS K G H M
H142 : Col G H H
H141 : eq H H
H140 : OS F K G H
H139 : TP G H F K
H138 : Par G H F K
H137 : Par F K G H
H136 : OS L M G H
H135 : TP G H L M
H134 : Par G H L M
H133 : TS A B D C
H132 : nCol B D A
H131 : Col B D O
H130 : Col B O D
H129 : CongA F K M J E N
H128 : CongA F K M F K H
H127 : CongA F K M F K M
H126 : nCol F K M
H125 : Out K F F
H124 : neq K F
H123 : eq F F
H122 : Out K M H
H121 : Out K H M
H120 : neq K H
H119 : CongA F K H J E N
H118 : CongA F K H H K F
H117 : nCol F K H
H116 : PG F K M L
H115 : Par F L K M
H114 : Par L F M K
H113 : Par M K L F
H112 : neq L F
H111 : nCol F L M
H110 : Col G F L
H109 : Col G L F
H108 : Par M K G F
H107 : Par M K F G
H106 : Par M K G L
H105 : Par G L M K
H104 : Par G L K M
H103 : Col H M K
H102 : Par F G M K
H101 : neq M K
H100 : neq K M
H99 : Col H K M
H98 : Col K H M
H97 : Par F G H K
H96 : Par G L H M
H95 : Par F G K H
H94 : Par F K M L
H93 : Par F K L M
H92 : Par L M G H
H91 : Par M L G H
H90 : Par F K G H
H89 : Col L M M
H88 : Col G H H
H87 : Col F K K
H86 : eq M M
H85 : eq H H
H84 : eq K K
H83 : neq L M
H82 : nCol H M L
H81 : Par G H M L
H80 : neq G H
H79 : nCol G H M
H78 : neq F K
H77 : BetS K H M
H76 : Out H G G
H75 : neq H G
H74 : eq G G
H73 : RT K H G G H M
H72 : RT G H M K H G
H71 : CongA F K H G H M
H70 : CongA F K H H K F
H69 : nCol F K H
H68 : nCol H K F
H67 : CongA G H M H K F
H66 : RT F K H K H G
H65 : OS F G K H
H64 : TP K H F G
H63 : Par K H F G
H62 : Par F G K H
H61 : Cong K s H K
H60 : BetS H K s
s : Point
H59 : neq H K
H58 : Par K F H G
H57 : Par F K H G
H56 : CongA H K F G H M
H55 : CongA J E N G H M
H54 : BetS B e C
H53 : TS M G H K
H52 : Midpoint B e C
H51 : EF D B e C G H M L
H50 : CongA G H M J E N
H49 : PG G H M L
M,L,e : Point
H48 : nCol G H K
H47 : nCol H G K
H46 : nCol K H G
H45 : Par F K H G
H44 : Triangle D B C
H43 : nCol D B C
H42 : OS S F K H
H41 : CongA H K F J E N
H40 : EF A B m D F K H G
H39 : PG F K H G
F,G : Point
H38 : nCol S K H
H37 : nCol H K S
H36 : neq H K
H35 : neq K H
H34 : Col R K K
H33 : eq K K
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col G L H) by (conclude lemma_collinear4).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (Col R K K) by (conclude_def Col ).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (neq H K) by (conclude lemma_inequalitysymmetric).
assert (nCol H K S) by (conclude lemma_NChelper).
assert (nCol S K H) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F G, (PG F K H G /\\ EF A B m D F K H G /\\ CongA H K F J E N /\\ OS S F K H)) by (conclude proposition_42B);destruct Tf as [F[G]];spliter.
assert (nCol D B C) by (forward_using lemma_NCorder).
assert (Triangle D B C) by (conclude_def Triangle ).
assert (Par F K H G) by (conclude_def PG ).
assert (nCol K H G) by (forward_using lemma_parallelNC).
assert (nCol H G K) by (forward_using lemma_NCorder).
assert (nCol G H K) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists M L e, (PG G H M L /\\ CongA G H M J E N /\\ EF D B e C G H M L /\\ Midpoint B e C /\\ TS M G H K)) by (conclude proposition_44);destruct Tf as [M[L[e]]];spliter.
assert (BetS B e C) by (conclude_def Midpoint ).
assert (CongA J E N G H M) by (conclude lemma_equalanglessymmetric).
assert (CongA H K F G H M) by (conclude lemma_equalanglestransitive).
assert (Par F K H G) by (conclude_def PG ).
assert (Par K F H G) by (forward_using lemma_parallelflip).
assert (neq H K) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists s, (BetS H K s /\\ Cong K s H K)) by (conclude lemma_extension);destruct Tf as [s];spliter.
assert (Par F G K H) by (conclude_def PG ).
assert (Par K H F G) by (conclude lemma_parallelsymmetric).
assert (TP K H F G) by (conclude lemma_paralleldef2B).
assert (OS F G K H) by (conclude_def TP ).
assert (RT F K H K H G) by (conclude proposition_29C).
assert (CongA G H M H K F) by (conclude lemma_equalanglessymmetric).
assert (nCol H K F) by (conclude lemma_equalanglesNC).
assert (nCol F K H) by (forward_using lemma_NCorder).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H G H M) by (conclude lemma_equalanglestransitive).
assert (RT G H M K H G) by (conclude lemma_RTcongruence).
assert (RT K H G G H M) by (conclude lemma_RTsymmetric).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (neq H G) by (forward_using lemma_NCdistinct).
assert (Out H G G) by (conclude lemma_ray4).
assert (BetS K H M) by (conclude proposition_14).
assert (neq F K) by (forward_using lemma_NCdistinct).
assert (nCol G H M) by (conclude lemma_equalanglesNC).
assert (neq G H) by (forward_using lemma_NCdistinct).
assert (Par G H M L) by (conclude_def PG ).
assert (nCol H M L) by (forward_using lemma_parallelNC).
assert (neq L M) by (forward_using lemma_NCdistinct).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (eq H H) by (conclude cn_equalityreflexive).
assert (eq M M) by (conclude cn_equalityreflexive).
assert (Col F K K) by (conclude_def Col ).
assert (Col G H H) by (conclude_def Col ).
assert (Col L M M) by (conclude_def Col ).
assert (Par F K G H) by (forward_using lemma_parallelflip).
assert (Par M L G H) by (conclude lemma_parallelsymmetric).
assert (Par L M G H) by (forward_using lemma_parallelflip).
assert (Par F K L M) by (conclude proposition_30).
assert (Par F K M L) by (forward_using lemma_parallelflip).
assert (Par F G K H) by (conclude_def PG ).
assert (Par G L H M) by (conclude_def PG ).
assert (Par F G H K) by (forward_using lemma_parallelflip).
assert (Col K H M) by (conclude_def Col ).
assert (Col H K M) by (forward_using lemma_collinearorder).
assert (neq K M) by (forward_using lemma_betweennotequal).
assert (neq M K) by (conclude lemma_inequalitysymmetric).
assert (Par F G M K) by (conclude lemma_collinearparallel).
assert (Col H M K) by (forward_using lemma_collinearorder).
assert (Par G L K M) by (conclude lemma_collinearparallel).
assert (Par G L M K) by (forward_using lemma_parallelflip).
assert (Par M K G L) by (conclude lemma_parallelsymmetric).
assert (Par M K F G) by (conclude lemma_parallelsymmetric).
assert (Par M K G F) by (forward_using lemma_parallelflip).
assert (Col G L F) by (conclude lemma_Playfair).
assert (Col G F L) by (forward_using lemma_collinearorder).
assert (nCol F L M) by (forward_using lemma_parallelNC).
assert (neq L F) by (forward_using lemma_NCdistinct).
assert (Par M K L F) by (conclude lemma_collinearparallel).
assert (Par L F M K) by (conclude lemma_parallelsymmetric).
assert (Par F L K M) by (forward_using lemma_parallelflip).
assert (PG F K M L) by (conclude_def PG ).
assert (nCol F K H) by (forward_using lemma_parallelNC).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H J E N) by (conclude lemma_equalanglestransitive).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (Out K H M) by (conclude lemma_ray4).
assert (Out K M H) by (conclude lemma_ray5).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (neq K F) by (forward_using lemma_NCdistinct).
assert (Out K F F) by (conclude lemma_ray4).
assert (nCol F K M) by (forward_using lemma_parallelNC).
assert (CongA F K M F K M) by (conclude lemma_equalanglesreflexive).
assert (CongA F K M F K H) by (conclude lemma_equalangleshelper).
assert (CongA F K M J E N) by (conclude lemma_equalanglestransitive).
assert (Col B O D) by (conclude_def Col ).
assert (Col B D O) by (forward_using lemma_collinearorder).
assert (nCol B D A) by (forward_using lemma_NCorder).
assert (TS A B D C) by (conclude_def TS ).
assert (Par G H L M) by (forward_using lemma_parallelflip).
assert (TP G H L M) by (conclude lemma_paralleldef2B).
assert (OS L M G H) by (conclude_def TP ).
assert (Par F K G H) by (forward_using lemma_parallelflip).
assert (Par G H F K) by (conclude lemma_parallelsymmetric).
assert (TP G H F K) by (conclude lemma_paralleldef2B).
assert (OS F K G H) by (conclude_def TP ).
assert (eq H H) by (conclude cn_equalityreflexive).
assert (Col G H H) by (conclude_def Col ).
assert (TS K G H M) by (conclude_def TS ).
assert (TS F G H M) by (conclude lemma_planeseparation).
assert (TS M G H F) by (conclude lemma_oppositesidesymmetric).
assert (TS L G H F) by (conclude lemma_planeseparation).
let Tf:=fresh in assert (Tf:exists t, (BetS L t F /\\ Col G H t /\\ nCol G H L)) by (conclude_def TS );destruct Tf as [t];spliter.
assert (Col F L G) by (forward_using lemma_collinearorder).
assert (Col L t F) by (conclude_def Col ).
assert (Col F L t) by (forward_using lemma_collinearorder).
assert (neq F L) by (forward_using lemma_NCdistinct).
assert (Col L G t) by (conclude lemma_collinear4).
assert (Col t G L) by (forward_using lemma_collinearorder).
assert (Col t G H) by (forward_using lemma_collinearorder).
assert (~ neq t G).
intro.
assert (Col G L H) by (conclude lemma_collinear4).

*****
H158 : Col G L H
H157 : neq t G
H156 : Col t G H
H155 : Col t G L
H154 : Col L G t
H153 : neq F L
H152 : Col F L t
H151 : Col L t F
H150 : Col F L G
H149 : nCol G H L
H148 : Col G H t
H147 : BetS L t F
t : Point
H146 : TS L G H F
H145 : TS M G H F
H144 : TS F G H M
H143 : TS K G H M
H142 : Col G H H
H141 : eq H H
H140 : OS F K G H
H139 : TP G H F K
H138 : Par G H F K
H137 : Par F K G H
H136 : OS L M G H
H135 : TP G H L M
H134 : Par G H L M
H133 : TS A B D C
H132 : nCol B D A
H131 : Col B D O
H130 : Col B O D
H129 : CongA F K M J E N
H128 : CongA F K M F K H
H127 : CongA F K M F K M
H126 : nCol F K M
H125 : Out K F F
H124 : neq K F
H123 : eq F F
H122 : Out K M H
H121 : Out K H M
H120 : neq K H
H119 : CongA F K H J E N
H118 : CongA F K H H K F
H117 : nCol F K H
H116 : PG F K M L
H115 : Par F L K M
H114 : Par L F M K
H113 : Par M K L F
H112 : neq L F
H111 : nCol F L M
H110 : Col G F L
H109 : Col G L F
H108 : Par M K G F
H107 : Par M K F G
H106 : Par M K G L
H105 : Par G L M K
H104 : Par G L K M
H103 : Col H M K
H102 : Par F G M K
H101 : neq M K
H100 : neq K M
H99 : Col H K M
H98 : Col K H M
H97 : Par F G H K
H96 : Par G L H M
H95 : Par F G K H
H94 : Par F K M L
H93 : Par F K L M
H92 : Par L M G H
H91 : Par M L G H
H90 : Par F K G H
H89 : Col L M M
H88 : Col G H H
H87 : Col F K K
H86 : eq M M
H85 : eq H H
H84 : eq K K
H83 : neq L M
H82 : nCol H M L
H81 : Par G H M L
H80 : neq G H
H79 : nCol G H M
H78 : neq F K
H77 : BetS K H M
H76 : Out H G G
H75 : neq H G
H74 : eq G G
H73 : RT K H G G H M
H72 : RT G H M K H G
H71 : CongA F K H G H M
H70 : CongA F K H H K F
H69 : nCol F K H
H68 : nCol H K F
H67 : CongA G H M H K F
H66 : RT F K H K H G
H65 : OS F G K H
H64 : TP K H F G
H63 : Par K H F G
H62 : Par F G K H
H61 : Cong K s H K
H60 : BetS H K s
s : Point
H59 : neq H K
H58 : Par K F H G
H57 : Par F K H G
H56 : CongA H K F G H M
H55 : CongA J E N G H M
H54 : BetS B e C
H53 : TS M G H K
H52 : Midpoint B e C
H51 : EF D B e C G H M L
H50 : CongA G H M J E N
H49 : PG G H M L
M,L,e : Point
H48 : nCol G H K
H47 : nCol H G K
H46 : nCol K H G
H45 : Par F K H G
H44 : Triangle D B C
H43 : nCol D B C
H42 : OS S F K H
H41 : CongA H K F J E N
H40 : EF A B m D F K H G
H39 : PG F K H G
F,G : Point
H38 : nCol S K H
H37 : nCol H K S
H36 : neq H K
H35 : neq K H
H34 : Col R K K
H33 : eq K K
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col G H L) by (forward_using lemma_collinearorder).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (Col R K K) by (conclude_def Col ).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (neq H K) by (conclude lemma_inequalitysymmetric).
assert (nCol H K S) by (conclude lemma_NChelper).
assert (nCol S K H) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F G, (PG F K H G /\\ EF A B m D F K H G /\\ CongA H K F J E N /\\ OS S F K H)) by (conclude proposition_42B);destruct Tf as [F[G]];spliter.
assert (nCol D B C) by (forward_using lemma_NCorder).
assert (Triangle D B C) by (conclude_def Triangle ).
assert (Par F K H G) by (conclude_def PG ).
assert (nCol K H G) by (forward_using lemma_parallelNC).
assert (nCol H G K) by (forward_using lemma_NCorder).
assert (nCol G H K) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists M L e, (PG G H M L /\\ CongA G H M J E N /\\ EF D B e C G H M L /\\ Midpoint B e C /\\ TS M G H K)) by (conclude proposition_44);destruct Tf as [M[L[e]]];spliter.
assert (BetS B e C) by (conclude_def Midpoint ).
assert (CongA J E N G H M) by (conclude lemma_equalanglessymmetric).
assert (CongA H K F G H M) by (conclude lemma_equalanglestransitive).
assert (Par F K H G) by (conclude_def PG ).
assert (Par K F H G) by (forward_using lemma_parallelflip).
assert (neq H K) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists s, (BetS H K s /\\ Cong K s H K)) by (conclude lemma_extension);destruct Tf as [s];spliter.
assert (Par F G K H) by (conclude_def PG ).
assert (Par K H F G) by (conclude lemma_parallelsymmetric).
assert (TP K H F G) by (conclude lemma_paralleldef2B).
assert (OS F G K H) by (conclude_def TP ).
assert (RT F K H K H G) by (conclude proposition_29C).
assert (CongA G H M H K F) by (conclude lemma_equalanglessymmetric).
assert (nCol H K F) by (conclude lemma_equalanglesNC).
assert (nCol F K H) by (forward_using lemma_NCorder).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H G H M) by (conclude lemma_equalanglestransitive).
assert (RT G H M K H G) by (conclude lemma_RTcongruence).
assert (RT K H G G H M) by (conclude lemma_RTsymmetric).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (neq H G) by (forward_using lemma_NCdistinct).
assert (Out H G G) by (conclude lemma_ray4).
assert (BetS K H M) by (conclude proposition_14).
assert (neq F K) by (forward_using lemma_NCdistinct).
assert (nCol G H M) by (conclude lemma_equalanglesNC).
assert (neq G H) by (forward_using lemma_NCdistinct).
assert (Par G H M L) by (conclude_def PG ).
assert (nCol H M L) by (forward_using lemma_parallelNC).
assert (neq L M) by (forward_using lemma_NCdistinct).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (eq H H) by (conclude cn_equalityreflexive).
assert (eq M M) by (conclude cn_equalityreflexive).
assert (Col F K K) by (conclude_def Col ).
assert (Col G H H) by (conclude_def Col ).
assert (Col L M M) by (conclude_def Col ).
assert (Par F K G H) by (forward_using lemma_parallelflip).
assert (Par M L G H) by (conclude lemma_parallelsymmetric).
assert (Par L M G H) by (forward_using lemma_parallelflip).
assert (Par F K L M) by (conclude proposition_30).
assert (Par F K M L) by (forward_using lemma_parallelflip).
assert (Par F G K H) by (conclude_def PG ).
assert (Par G L H M) by (conclude_def PG ).
assert (Par F G H K) by (forward_using lemma_parallelflip).
assert (Col K H M) by (conclude_def Col ).
assert (Col H K M) by (forward_using lemma_collinearorder).
assert (neq K M) by (forward_using lemma_betweennotequal).
assert (neq M K) by (conclude lemma_inequalitysymmetric).
assert (Par F G M K) by (conclude lemma_collinearparallel).
assert (Col H M K) by (forward_using lemma_collinearorder).
assert (Par G L K M) by (conclude lemma_collinearparallel).
assert (Par G L M K) by (forward_using lemma_parallelflip).
assert (Par M K G L) by (conclude lemma_parallelsymmetric).
assert (Par M K F G) by (conclude lemma_parallelsymmetric).
assert (Par M K G F) by (forward_using lemma_parallelflip).
assert (Col G L F) by (conclude lemma_Playfair).
assert (Col G F L) by (forward_using lemma_collinearorder).
assert (nCol F L M) by (forward_using lemma_parallelNC).
assert (neq L F) by (forward_using lemma_NCdistinct).
assert (Par M K L F) by (conclude lemma_collinearparallel).
assert (Par L F M K) by (conclude lemma_parallelsymmetric).
assert (Par F L K M) by (forward_using lemma_parallelflip).
assert (PG F K M L) by (conclude_def PG ).
assert (nCol F K H) by (forward_using lemma_parallelNC).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H J E N) by (conclude lemma_equalanglestransitive).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (Out K H M) by (conclude lemma_ray4).
assert (Out K M H) by (conclude lemma_ray5).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (neq K F) by (forward_using lemma_NCdistinct).
assert (Out K F F) by (conclude lemma_ray4).
assert (nCol F K M) by (forward_using lemma_parallelNC).
assert (CongA F K M F K M) by (conclude lemma_equalanglesreflexive).
assert (CongA F K M F K H) by (conclude lemma_equalangleshelper).
assert (CongA F K M J E N) by (conclude lemma_equalanglestransitive).
assert (Col B O D) by (conclude_def Col ).
assert (Col B D O) by (forward_using lemma_collinearorder).
assert (nCol B D A) by (forward_using lemma_NCorder).
assert (TS A B D C) by (conclude_def TS ).
assert (Par G H L M) by (forward_using lemma_parallelflip).
assert (TP G H L M) by (conclude lemma_paralleldef2B).
assert (OS L M G H) by (conclude_def TP ).
assert (Par F K G H) by (forward_using lemma_parallelflip).
assert (Par G H F K) by (conclude lemma_parallelsymmetric).
assert (TP G H F K) by (conclude lemma_paralleldef2B).
assert (OS F K G H) by (conclude_def TP ).
assert (eq H H) by (conclude cn_equalityreflexive).
assert (Col G H H) by (conclude_def Col ).
assert (TS K G H M) by (conclude_def TS ).
assert (TS F G H M) by (conclude lemma_planeseparation).
assert (TS M G H F) by (conclude lemma_oppositesidesymmetric).
assert (TS L G H F) by (conclude lemma_planeseparation).
let Tf:=fresh in assert (Tf:exists t, (BetS L t F /\\ Col G H t /\\ nCol G H L)) by (conclude_def TS );destruct Tf as [t];spliter.
assert (Col F L G) by (forward_using lemma_collinearorder).
assert (Col L t F) by (conclude_def Col ).
assert (Col F L t) by (forward_using lemma_collinearorder).
assert (neq F L) by (forward_using lemma_NCdistinct).
assert (Col L G t) by (conclude lemma_collinear4).
assert (Col t G L) by (forward_using lemma_collinearorder).
assert (Col t G H) by (forward_using lemma_collinearorder).
assert (~ neq t G).
intro.
assert (Col G L H) by (conclude lemma_collinear4).
assert (Col G H L) by (forward_using lemma_collinearorder).

*****
H159 : Col G H L
H158 : Col G L H
H157 : neq t G
H156 : Col t G H
H155 : Col t G L
H154 : Col L G t
H153 : neq F L
H152 : Col F L t
H151 : Col L t F
H150 : Col F L G
H149 : nCol G H L
H148 : Col G H t
H147 : BetS L t F
t : Point
H146 : TS L G H F
H145 : TS M G H F
H144 : TS F G H M
H143 : TS K G H M
H142 : Col G H H
H141 : eq H H
H140 : OS F K G H
H139 : TP G H F K
H138 : Par G H F K
H137 : Par F K G H
H136 : OS L M G H
H135 : TP G H L M
H134 : Par G H L M
H133 : TS A B D C
H132 : nCol B D A
H131 : Col B D O
H130 : Col B O D
H129 : CongA F K M J E N
H128 : CongA F K M F K H
H127 : CongA F K M F K M
H126 : nCol F K M
H125 : Out K F F
H124 : neq K F
H123 : eq F F
H122 : Out K M H
H121 : Out K H M
H120 : neq K H
H119 : CongA F K H J E N
H118 : CongA F K H H K F
H117 : nCol F K H
H116 : PG F K M L
H115 : Par F L K M
H114 : Par L F M K
H113 : Par M K L F
H112 : neq L F
H111 : nCol F L M
H110 : Col G F L
H109 : Col G L F
H108 : Par M K G F
H107 : Par M K F G
H106 : Par M K G L
H105 : Par G L M K
H104 : Par G L K M
H103 : Col H M K
H102 : Par F G M K
H101 : neq M K
H100 : neq K M
H99 : Col H K M
H98 : Col K H M
H97 : Par F G H K
H96 : Par G L H M
H95 : Par F G K H
H94 : Par F K M L
H93 : Par F K L M
H92 : Par L M G H
H91 : Par M L G H
H90 : Par F K G H
H89 : Col L M M
H88 : Col G H H
H87 : Col F K K
H86 : eq M M
H85 : eq H H
H84 : eq K K
H83 : neq L M
H82 : nCol H M L
H81 : Par G H M L
H80 : neq G H
H79 : nCol G H M
H78 : neq F K
H77 : BetS K H M
H76 : Out H G G
H75 : neq H G
H74 : eq G G
H73 : RT K H G G H M
H72 : RT G H M K H G
H71 : CongA F K H G H M
H70 : CongA F K H H K F
H69 : nCol F K H
H68 : nCol H K F
H67 : CongA G H M H K F
H66 : RT F K H K H G
H65 : OS F G K H
H64 : TP K H F G
H63 : Par K H F G
H62 : Par F G K H
H61 : Cong K s H K
H60 : BetS H K s
s : Point
H59 : neq H K
H58 : Par K F H G
H57 : Par F K H G
H56 : CongA H K F G H M
H55 : CongA J E N G H M
H54 : BetS B e C
H53 : TS M G H K
H52 : Midpoint B e C
H51 : EF D B e C G H M L
H50 : CongA G H M J E N
H49 : PG G H M L
M,L,e : Point
H48 : nCol G H K
H47 : nCol H G K
H46 : nCol K H G
H45 : Par F K H G
H44 : Triangle D B C
H43 : nCol D B C
H42 : OS S F K H
H41 : CongA H K F J E N
H40 : EF A B m D F K H G
H39 : PG F K H G
F,G : Point
H38 : nCol S K H
H37 : nCol H K S
H36 : neq H K
H35 : neq K H
H34 : Col R K K
H33 : eq K K
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (Col R K K) by (conclude_def Col ).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (neq H K) by (conclude lemma_inequalitysymmetric).
assert (nCol H K S) by (conclude lemma_NChelper).
assert (nCol S K H) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F G, (PG F K H G /\\ EF A B m D F K H G /\\ CongA H K F J E N /\\ OS S F K H)) by (conclude proposition_42B);destruct Tf as [F[G]];spliter.
assert (nCol D B C) by (forward_using lemma_NCorder).
assert (Triangle D B C) by (conclude_def Triangle ).
assert (Par F K H G) by (conclude_def PG ).
assert (nCol K H G) by (forward_using lemma_parallelNC).
assert (nCol H G K) by (forward_using lemma_NCorder).
assert (nCol G H K) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists M L e, (PG G H M L /\\ CongA G H M J E N /\\ EF D B e C G H M L /\\ Midpoint B e C /\\ TS M G H K)) by (conclude proposition_44);destruct Tf as [M[L[e]]];spliter.
assert (BetS B e C) by (conclude_def Midpoint ).
assert (CongA J E N G H M) by (conclude lemma_equalanglessymmetric).
assert (CongA H K F G H M) by (conclude lemma_equalanglestransitive).
assert (Par F K H G) by (conclude_def PG ).
assert (Par K F H G) by (forward_using lemma_parallelflip).
assert (neq H K) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists s, (BetS H K s /\\ Cong K s H K)) by (conclude lemma_extension);destruct Tf as [s];spliter.
assert (Par F G K H) by (conclude_def PG ).
assert (Par K H F G) by (conclude lemma_parallelsymmetric).
assert (TP K H F G) by (conclude lemma_paralleldef2B).
assert (OS F G K H) by (conclude_def TP ).
assert (RT F K H K H G) by (conclude proposition_29C).
assert (CongA G H M H K F) by (conclude lemma_equalanglessymmetric).
assert (nCol H K F) by (conclude lemma_equalanglesNC).
assert (nCol F K H) by (forward_using lemma_NCorder).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H G H M) by (conclude lemma_equalanglestransitive).
assert (RT G H M K H G) by (conclude lemma_RTcongruence).
assert (RT K H G G H M) by (conclude lemma_RTsymmetric).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (neq H G) by (forward_using lemma_NCdistinct).
assert (Out H G G) by (conclude lemma_ray4).
assert (BetS K H M) by (conclude proposition_14).
assert (neq F K) by (forward_using lemma_NCdistinct).
assert (nCol G H M) by (conclude lemma_equalanglesNC).
assert (neq G H) by (forward_using lemma_NCdistinct).
assert (Par G H M L) by (conclude_def PG ).
assert (nCol H M L) by (forward_using lemma_parallelNC).
assert (neq L M) by (forward_using lemma_NCdistinct).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (eq H H) by (conclude cn_equalityreflexive).
assert (eq M M) by (conclude cn_equalityreflexive).
assert (Col F K K) by (conclude_def Col ).
assert (Col G H H) by (conclude_def Col ).
assert (Col L M M) by (conclude_def Col ).
assert (Par F K G H) by (forward_using lemma_parallelflip).
assert (Par M L G H) by (conclude lemma_parallelsymmetric).
assert (Par L M G H) by (forward_using lemma_parallelflip).
assert (Par F K L M) by (conclude proposition_30).
assert (Par F K M L) by (forward_using lemma_parallelflip).
assert (Par F G K H) by (conclude_def PG ).
assert (Par G L H M) by (conclude_def PG ).
assert (Par F G H K) by (forward_using lemma_parallelflip).
assert (Col K H M) by (conclude_def Col ).
assert (Col H K M) by (forward_using lemma_collinearorder).
assert (neq K M) by (forward_using lemma_betweennotequal).
assert (neq M K) by (conclude lemma_inequalitysymmetric).
assert (Par F G M K) by (conclude lemma_collinearparallel).
assert (Col H M K) by (forward_using lemma_collinearorder).
assert (Par G L K M) by (conclude lemma_collinearparallel).
assert (Par G L M K) by (forward_using lemma_parallelflip).
assert (Par M K G L) by (conclude lemma_parallelsymmetric).
assert (Par M K F G) by (conclude lemma_parallelsymmetric).
assert (Par M K G F) by (forward_using lemma_parallelflip).
assert (Col G L F) by (conclude lemma_Playfair).
assert (Col G F L) by (forward_using lemma_collinearorder).
assert (nCol F L M) by (forward_using lemma_parallelNC).
assert (neq L F) by (forward_using lemma_NCdistinct).
assert (Par M K L F) by (conclude lemma_collinearparallel).
assert (Par L F M K) by (conclude lemma_parallelsymmetric).
assert (Par F L K M) by (forward_using lemma_parallelflip).
assert (PG F K M L) by (conclude_def PG ).
assert (nCol F K H) by (forward_using lemma_parallelNC).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H J E N) by (conclude lemma_equalanglestransitive).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (Out K H M) by (conclude lemma_ray4).
assert (Out K M H) by (conclude lemma_ray5).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (neq K F) by (forward_using lemma_NCdistinct).
assert (Out K F F) by (conclude lemma_ray4).
assert (nCol F K M) by (forward_using lemma_parallelNC).
assert (CongA F K M F K M) by (conclude lemma_equalanglesreflexive).
assert (CongA F K M F K H) by (conclude lemma_equalangleshelper).
assert (CongA F K M J E N) by (conclude lemma_equalanglestransitive).
assert (Col B O D) by (conclude_def Col ).
assert (Col B D O) by (forward_using lemma_collinearorder).
assert (nCol B D A) by (forward_using lemma_NCorder).
assert (TS A B D C) by (conclude_def TS ).
assert (Par G H L M) by (forward_using lemma_parallelflip).
assert (TP G H L M) by (conclude lemma_paralleldef2B).
assert (OS L M G H) by (conclude_def TP ).
assert (Par F K G H) by (forward_using lemma_parallelflip).
assert (Par G H F K) by (conclude lemma_parallelsymmetric).
assert (TP G H F K) by (conclude lemma_paralleldef2B).
assert (OS F K G H) by (conclude_def TP ).
assert (eq H H) by (conclude cn_equalityreflexive).
assert (Col G H H) by (conclude_def Col ).
assert (TS K G H M) by (conclude_def TS ).
assert (TS F G H M) by (conclude lemma_planeseparation).
assert (TS M G H F) by (conclude lemma_oppositesidesymmetric).
assert (TS L G H F) by (conclude lemma_planeseparation).
let Tf:=fresh in assert (Tf:exists t, (BetS L t F /\\ Col G H t /\\ nCol G H L)) by (conclude_def TS );destruct Tf as [t];spliter.
assert (Col F L G) by (forward_using lemma_collinearorder).
assert (Col L t F) by (conclude_def Col ).
assert (Col F L t) by (forward_using lemma_collinearorder).
assert (neq F L) by (forward_using lemma_NCdistinct).
assert (Col L G t) by (conclude lemma_collinear4).
assert (Col t G L) by (forward_using lemma_collinearorder).
assert (Col t G H) by (forward_using lemma_collinearorder).
assert (~ neq t G).

*****
H157 : not (neq t G)
H156 : Col t G H
H155 : Col t G L
H154 : Col L G t
H153 : neq F L
H152 : Col F L t
H151 : Col L t F
H150 : Col F L G
H149 : nCol G H L
H148 : Col G H t
H147 : BetS L t F
t : Point
H146 : TS L G H F
H145 : TS M G H F
H144 : TS F G H M
H143 : TS K G H M
H142 : Col G H H
H141 : eq H H
H140 : OS F K G H
H139 : TP G H F K
H138 : Par G H F K
H137 : Par F K G H
H136 : OS L M G H
H135 : TP G H L M
H134 : Par G H L M
H133 : TS A B D C
H132 : nCol B D A
H131 : Col B D O
H130 : Col B O D
H129 : CongA F K M J E N
H128 : CongA F K M F K H
H127 : CongA F K M F K M
H126 : nCol F K M
H125 : Out K F F
H124 : neq K F
H123 : eq F F
H122 : Out K M H
H121 : Out K H M
H120 : neq K H
H119 : CongA F K H J E N
H118 : CongA F K H H K F
H117 : nCol F K H
H116 : PG F K M L
H115 : Par F L K M
H114 : Par L F M K
H113 : Par M K L F
H112 : neq L F
H111 : nCol F L M
H110 : Col G F L
H109 : Col G L F
H108 : Par M K G F
H107 : Par M K F G
H106 : Par M K G L
H105 : Par G L M K
H104 : Par G L K M
H103 : Col H M K
H102 : Par F G M K
H101 : neq M K
H100 : neq K M
H99 : Col H K M
H98 : Col K H M
H97 : Par F G H K
H96 : Par G L H M
H95 : Par F G K H
H94 : Par F K M L
H93 : Par F K L M
H92 : Par L M G H
H91 : Par M L G H
H90 : Par F K G H
H89 : Col L M M
H88 : Col G H H
H87 : Col F K K
H86 : eq M M
H85 : eq H H
H84 : eq K K
H83 : neq L M
H82 : nCol H M L
H81 : Par G H M L
H80 : neq G H
H79 : nCol G H M
H78 : neq F K
H77 : BetS K H M
H76 : Out H G G
H75 : neq H G
H74 : eq G G
H73 : RT K H G G H M
H72 : RT G H M K H G
H71 : CongA F K H G H M
H70 : CongA F K H H K F
H69 : nCol F K H
H68 : nCol H K F
H67 : CongA G H M H K F
H66 : RT F K H K H G
H65 : OS F G K H
H64 : TP K H F G
H63 : Par K H F G
H62 : Par F G K H
H61 : Cong K s H K
H60 : BetS H K s
s : Point
H59 : neq H K
H58 : Par K F H G
H57 : Par F K H G
H56 : CongA H K F G H M
H55 : CongA J E N G H M
H54 : BetS B e C
H53 : TS M G H K
H52 : Midpoint B e C
H51 : EF D B e C G H M L
H50 : CongA G H M J E N
H49 : PG G H M L
M,L,e : Point
H48 : nCol G H K
H47 : nCol H G K
H46 : nCol K H G
H45 : Par F K H G
H44 : Triangle D B C
H43 : nCol D B C
H42 : OS S F K H
H41 : CongA H K F J E N
H40 : EF A B m D F K H G
H39 : PG F K H G
F,G : Point
H38 : nCol S K H
H37 : nCol H K S
H36 : neq H K
H35 : neq K H
H34 : Col R K K
H33 : eq K K
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (BetS L G F) by (conclude cn_equalitysub).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (Col R K K) by (conclude_def Col ).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (neq H K) by (conclude lemma_inequalitysymmetric).
assert (nCol H K S) by (conclude lemma_NChelper).
assert (nCol S K H) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F G, (PG F K H G /\\ EF A B m D F K H G /\\ CongA H K F J E N /\\ OS S F K H)) by (conclude proposition_42B);destruct Tf as [F[G]];spliter.
assert (nCol D B C) by (forward_using lemma_NCorder).
assert (Triangle D B C) by (conclude_def Triangle ).
assert (Par F K H G) by (conclude_def PG ).
assert (nCol K H G) by (forward_using lemma_parallelNC).
assert (nCol H G K) by (forward_using lemma_NCorder).
assert (nCol G H K) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists M L e, (PG G H M L /\\ CongA G H M J E N /\\ EF D B e C G H M L /\\ Midpoint B e C /\\ TS M G H K)) by (conclude proposition_44);destruct Tf as [M[L[e]]];spliter.
assert (BetS B e C) by (conclude_def Midpoint ).
assert (CongA J E N G H M) by (conclude lemma_equalanglessymmetric).
assert (CongA H K F G H M) by (conclude lemma_equalanglestransitive).
assert (Par F K H G) by (conclude_def PG ).
assert (Par K F H G) by (forward_using lemma_parallelflip).
assert (neq H K) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists s, (BetS H K s /\\ Cong K s H K)) by (conclude lemma_extension);destruct Tf as [s];spliter.
assert (Par F G K H) by (conclude_def PG ).
assert (Par K H F G) by (conclude lemma_parallelsymmetric).
assert (TP K H F G) by (conclude lemma_paralleldef2B).
assert (OS F G K H) by (conclude_def TP ).
assert (RT F K H K H G) by (conclude proposition_29C).
assert (CongA G H M H K F) by (conclude lemma_equalanglessymmetric).
assert (nCol H K F) by (conclude lemma_equalanglesNC).
assert (nCol F K H) by (forward_using lemma_NCorder).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H G H M) by (conclude lemma_equalanglestransitive).
assert (RT G H M K H G) by (conclude lemma_RTcongruence).
assert (RT K H G G H M) by (conclude lemma_RTsymmetric).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (neq H G) by (forward_using lemma_NCdistinct).
assert (Out H G G) by (conclude lemma_ray4).
assert (BetS K H M) by (conclude proposition_14).
assert (neq F K) by (forward_using lemma_NCdistinct).
assert (nCol G H M) by (conclude lemma_equalanglesNC).
assert (neq G H) by (forward_using lemma_NCdistinct).
assert (Par G H M L) by (conclude_def PG ).
assert (nCol H M L) by (forward_using lemma_parallelNC).
assert (neq L M) by (forward_using lemma_NCdistinct).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (eq H H) by (conclude cn_equalityreflexive).
assert (eq M M) by (conclude cn_equalityreflexive).
assert (Col F K K) by (conclude_def Col ).
assert (Col G H H) by (conclude_def Col ).
assert (Col L M M) by (conclude_def Col ).
assert (Par F K G H) by (forward_using lemma_parallelflip).
assert (Par M L G H) by (conclude lemma_parallelsymmetric).
assert (Par L M G H) by (forward_using lemma_parallelflip).
assert (Par F K L M) by (conclude proposition_30).
assert (Par F K M L) by (forward_using lemma_parallelflip).
assert (Par F G K H) by (conclude_def PG ).
assert (Par G L H M) by (conclude_def PG ).
assert (Par F G H K) by (forward_using lemma_parallelflip).
assert (Col K H M) by (conclude_def Col ).
assert (Col H K M) by (forward_using lemma_collinearorder).
assert (neq K M) by (forward_using lemma_betweennotequal).
assert (neq M K) by (conclude lemma_inequalitysymmetric).
assert (Par F G M K) by (conclude lemma_collinearparallel).
assert (Col H M K) by (forward_using lemma_collinearorder).
assert (Par G L K M) by (conclude lemma_collinearparallel).
assert (Par G L M K) by (forward_using lemma_parallelflip).
assert (Par M K G L) by (conclude lemma_parallelsymmetric).
assert (Par M K F G) by (conclude lemma_parallelsymmetric).
assert (Par M K G F) by (forward_using lemma_parallelflip).
assert (Col G L F) by (conclude lemma_Playfair).
assert (Col G F L) by (forward_using lemma_collinearorder).
assert (nCol F L M) by (forward_using lemma_parallelNC).
assert (neq L F) by (forward_using lemma_NCdistinct).
assert (Par M K L F) by (conclude lemma_collinearparallel).
assert (Par L F M K) by (conclude lemma_parallelsymmetric).
assert (Par F L K M) by (forward_using lemma_parallelflip).
assert (PG F K M L) by (conclude_def PG ).
assert (nCol F K H) by (forward_using lemma_parallelNC).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H J E N) by (conclude lemma_equalanglestransitive).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (Out K H M) by (conclude lemma_ray4).
assert (Out K M H) by (conclude lemma_ray5).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (neq K F) by (forward_using lemma_NCdistinct).
assert (Out K F F) by (conclude lemma_ray4).
assert (nCol F K M) by (forward_using lemma_parallelNC).
assert (CongA F K M F K M) by (conclude lemma_equalanglesreflexive).
assert (CongA F K M F K H) by (conclude lemma_equalangleshelper).
assert (CongA F K M J E N) by (conclude lemma_equalanglestransitive).
assert (Col B O D) by (conclude_def Col ).
assert (Col B D O) by (forward_using lemma_collinearorder).
assert (nCol B D A) by (forward_using lemma_NCorder).
assert (TS A B D C) by (conclude_def TS ).
assert (Par G H L M) by (forward_using lemma_parallelflip).
assert (TP G H L M) by (conclude lemma_paralleldef2B).
assert (OS L M G H) by (conclude_def TP ).
assert (Par F K G H) by (forward_using lemma_parallelflip).
assert (Par G H F K) by (conclude lemma_parallelsymmetric).
assert (TP G H F K) by (conclude lemma_paralleldef2B).
assert (OS F K G H) by (conclude_def TP ).
assert (eq H H) by (conclude cn_equalityreflexive).
assert (Col G H H) by (conclude_def Col ).
assert (TS K G H M) by (conclude_def TS ).
assert (TS F G H M) by (conclude lemma_planeseparation).
assert (TS M G H F) by (conclude lemma_oppositesidesymmetric).
assert (TS L G H F) by (conclude lemma_planeseparation).
let Tf:=fresh in assert (Tf:exists t, (BetS L t F /\\ Col G H t /\\ nCol G H L)) by (conclude_def TS );destruct Tf as [t];spliter.
assert (Col F L G) by (forward_using lemma_collinearorder).
assert (Col L t F) by (conclude_def Col ).
assert (Col F L t) by (forward_using lemma_collinearorder).
assert (neq F L) by (forward_using lemma_NCdistinct).
assert (Col L G t) by (conclude lemma_collinear4).
assert (Col t G L) by (forward_using lemma_collinearorder).
assert (Col t G H) by (forward_using lemma_collinearorder).
assert (~ neq t G).
assert (BetS L G F) by (conclude cn_equalitysub).

*****
H158 : BetS L G F
H157 : not (neq t G)
H156 : Col t G H
H155 : Col t G L
H154 : Col L G t
H153 : neq F L
H152 : Col F L t
H151 : Col L t F
H150 : Col F L G
H149 : nCol G H L
H148 : Col G H t
H147 : BetS L t F
t : Point
H146 : TS L G H F
H145 : TS M G H F
H144 : TS F G H M
H143 : TS K G H M
H142 : Col G H H
H141 : eq H H
H140 : OS F K G H
H139 : TP G H F K
H138 : Par G H F K
H137 : Par F K G H
H136 : OS L M G H
H135 : TP G H L M
H134 : Par G H L M
H133 : TS A B D C
H132 : nCol B D A
H131 : Col B D O
H130 : Col B O D
H129 : CongA F K M J E N
H128 : CongA F K M F K H
H127 : CongA F K M F K M
H126 : nCol F K M
H125 : Out K F F
H124 : neq K F
H123 : eq F F
H122 : Out K M H
H121 : Out K H M
H120 : neq K H
H119 : CongA F K H J E N
H118 : CongA F K H H K F
H117 : nCol F K H
H116 : PG F K M L
H115 : Par F L K M
H114 : Par L F M K
H113 : Par M K L F
H112 : neq L F
H111 : nCol F L M
H110 : Col G F L
H109 : Col G L F
H108 : Par M K G F
H107 : Par M K F G
H106 : Par M K G L
H105 : Par G L M K
H104 : Par G L K M
H103 : Col H M K
H102 : Par F G M K
H101 : neq M K
H100 : neq K M
H99 : Col H K M
H98 : Col K H M
H97 : Par F G H K
H96 : Par G L H M
H95 : Par F G K H
H94 : Par F K M L
H93 : Par F K L M
H92 : Par L M G H
H91 : Par M L G H
H90 : Par F K G H
H89 : Col L M M
H88 : Col G H H
H87 : Col F K K
H86 : eq M M
H85 : eq H H
H84 : eq K K
H83 : neq L M
H82 : nCol H M L
H81 : Par G H M L
H80 : neq G H
H79 : nCol G H M
H78 : neq F K
H77 : BetS K H M
H76 : Out H G G
H75 : neq H G
H74 : eq G G
H73 : RT K H G G H M
H72 : RT G H M K H G
H71 : CongA F K H G H M
H70 : CongA F K H H K F
H69 : nCol F K H
H68 : nCol H K F
H67 : CongA G H M H K F
H66 : RT F K H K H G
H65 : OS F G K H
H64 : TP K H F G
H63 : Par K H F G
H62 : Par F G K H
H61 : Cong K s H K
H60 : BetS H K s
s : Point
H59 : neq H K
H58 : Par K F H G
H57 : Par F K H G
H56 : CongA H K F G H M
H55 : CongA J E N G H M
H54 : BetS B e C
H53 : TS M G H K
H52 : Midpoint B e C
H51 : EF D B e C G H M L
H50 : CongA G H M J E N
H49 : PG G H M L
M,L,e : Point
H48 : nCol G H K
H47 : nCol H G K
H46 : nCol K H G
H45 : Par F K H G
H44 : Triangle D B C
H43 : nCol D B C
H42 : OS S F K H
H41 : CongA H K F J E N
H40 : EF A B m D F K H G
H39 : PG F K H G
F,G : Point
H38 : nCol S K H
H37 : nCol H K S
H36 : neq H K
H35 : neq K H
H34 : Col R K K
H33 : eq K K
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (BetS F G L) by (conclude axiom_betweennesssymmetry).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (Col R K K) by (conclude_def Col ).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (neq H K) by (conclude lemma_inequalitysymmetric).
assert (nCol H K S) by (conclude lemma_NChelper).
assert (nCol S K H) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F G, (PG F K H G /\\ EF A B m D F K H G /\\ CongA H K F J E N /\\ OS S F K H)) by (conclude proposition_42B);destruct Tf as [F[G]];spliter.
assert (nCol D B C) by (forward_using lemma_NCorder).
assert (Triangle D B C) by (conclude_def Triangle ).
assert (Par F K H G) by (conclude_def PG ).
assert (nCol K H G) by (forward_using lemma_parallelNC).
assert (nCol H G K) by (forward_using lemma_NCorder).
assert (nCol G H K) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists M L e, (PG G H M L /\\ CongA G H M J E N /\\ EF D B e C G H M L /\\ Midpoint B e C /\\ TS M G H K)) by (conclude proposition_44);destruct Tf as [M[L[e]]];spliter.
assert (BetS B e C) by (conclude_def Midpoint ).
assert (CongA J E N G H M) by (conclude lemma_equalanglessymmetric).
assert (CongA H K F G H M) by (conclude lemma_equalanglestransitive).
assert (Par F K H G) by (conclude_def PG ).
assert (Par K F H G) by (forward_using lemma_parallelflip).
assert (neq H K) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists s, (BetS H K s /\\ Cong K s H K)) by (conclude lemma_extension);destruct Tf as [s];spliter.
assert (Par F G K H) by (conclude_def PG ).
assert (Par K H F G) by (conclude lemma_parallelsymmetric).
assert (TP K H F G) by (conclude lemma_paralleldef2B).
assert (OS F G K H) by (conclude_def TP ).
assert (RT F K H K H G) by (conclude proposition_29C).
assert (CongA G H M H K F) by (conclude lemma_equalanglessymmetric).
assert (nCol H K F) by (conclude lemma_equalanglesNC).
assert (nCol F K H) by (forward_using lemma_NCorder).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H G H M) by (conclude lemma_equalanglestransitive).
assert (RT G H M K H G) by (conclude lemma_RTcongruence).
assert (RT K H G G H M) by (conclude lemma_RTsymmetric).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (neq H G) by (forward_using lemma_NCdistinct).
assert (Out H G G) by (conclude lemma_ray4).
assert (BetS K H M) by (conclude proposition_14).
assert (neq F K) by (forward_using lemma_NCdistinct).
assert (nCol G H M) by (conclude lemma_equalanglesNC).
assert (neq G H) by (forward_using lemma_NCdistinct).
assert (Par G H M L) by (conclude_def PG ).
assert (nCol H M L) by (forward_using lemma_parallelNC).
assert (neq L M) by (forward_using lemma_NCdistinct).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (eq H H) by (conclude cn_equalityreflexive).
assert (eq M M) by (conclude cn_equalityreflexive).
assert (Col F K K) by (conclude_def Col ).
assert (Col G H H) by (conclude_def Col ).
assert (Col L M M) by (conclude_def Col ).
assert (Par F K G H) by (forward_using lemma_parallelflip).
assert (Par M L G H) by (conclude lemma_parallelsymmetric).
assert (Par L M G H) by (forward_using lemma_parallelflip).
assert (Par F K L M) by (conclude proposition_30).
assert (Par F K M L) by (forward_using lemma_parallelflip).
assert (Par F G K H) by (conclude_def PG ).
assert (Par G L H M) by (conclude_def PG ).
assert (Par F G H K) by (forward_using lemma_parallelflip).
assert (Col K H M) by (conclude_def Col ).
assert (Col H K M) by (forward_using lemma_collinearorder).
assert (neq K M) by (forward_using lemma_betweennotequal).
assert (neq M K) by (conclude lemma_inequalitysymmetric).
assert (Par F G M K) by (conclude lemma_collinearparallel).
assert (Col H M K) by (forward_using lemma_collinearorder).
assert (Par G L K M) by (conclude lemma_collinearparallel).
assert (Par G L M K) by (forward_using lemma_parallelflip).
assert (Par M K G L) by (conclude lemma_parallelsymmetric).
assert (Par M K F G) by (conclude lemma_parallelsymmetric).
assert (Par M K G F) by (forward_using lemma_parallelflip).
assert (Col G L F) by (conclude lemma_Playfair).
assert (Col G F L) by (forward_using lemma_collinearorder).
assert (nCol F L M) by (forward_using lemma_parallelNC).
assert (neq L F) by (forward_using lemma_NCdistinct).
assert (Par M K L F) by (conclude lemma_collinearparallel).
assert (Par L F M K) by (conclude lemma_parallelsymmetric).
assert (Par F L K M) by (forward_using lemma_parallelflip).
assert (PG F K M L) by (conclude_def PG ).
assert (nCol F K H) by (forward_using lemma_parallelNC).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H J E N) by (conclude lemma_equalanglestransitive).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (Out K H M) by (conclude lemma_ray4).
assert (Out K M H) by (conclude lemma_ray5).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (neq K F) by (forward_using lemma_NCdistinct).
assert (Out K F F) by (conclude lemma_ray4).
assert (nCol F K M) by (forward_using lemma_parallelNC).
assert (CongA F K M F K M) by (conclude lemma_equalanglesreflexive).
assert (CongA F K M F K H) by (conclude lemma_equalangleshelper).
assert (CongA F K M J E N) by (conclude lemma_equalanglestransitive).
assert (Col B O D) by (conclude_def Col ).
assert (Col B D O) by (forward_using lemma_collinearorder).
assert (nCol B D A) by (forward_using lemma_NCorder).
assert (TS A B D C) by (conclude_def TS ).
assert (Par G H L M) by (forward_using lemma_parallelflip).
assert (TP G H L M) by (conclude lemma_paralleldef2B).
assert (OS L M G H) by (conclude_def TP ).
assert (Par F K G H) by (forward_using lemma_parallelflip).
assert (Par G H F K) by (conclude lemma_parallelsymmetric).
assert (TP G H F K) by (conclude lemma_paralleldef2B).
assert (OS F K G H) by (conclude_def TP ).
assert (eq H H) by (conclude cn_equalityreflexive).
assert (Col G H H) by (conclude_def Col ).
assert (TS K G H M) by (conclude_def TS ).
assert (TS F G H M) by (conclude lemma_planeseparation).
assert (TS M G H F) by (conclude lemma_oppositesidesymmetric).
assert (TS L G H F) by (conclude lemma_planeseparation).
let Tf:=fresh in assert (Tf:exists t, (BetS L t F /\\ Col G H t /\\ nCol G H L)) by (conclude_def TS );destruct Tf as [t];spliter.
assert (Col F L G) by (forward_using lemma_collinearorder).
assert (Col L t F) by (conclude_def Col ).
assert (Col F L t) by (forward_using lemma_collinearorder).
assert (neq F L) by (forward_using lemma_NCdistinct).
assert (Col L G t) by (conclude lemma_collinear4).
assert (Col t G L) by (forward_using lemma_collinearorder).
assert (Col t G H) by (forward_using lemma_collinearorder).
assert (~ neq t G).
assert (BetS L G F) by (conclude cn_equalitysub).
assert (BetS F G L) by (conclude axiom_betweennesssymmetry).

*****
H159 : BetS F G L
H158 : BetS L G F
H157 : not (neq t G)
H156 : Col t G H
H155 : Col t G L
H154 : Col L G t
H153 : neq F L
H152 : Col F L t
H151 : Col L t F
H150 : Col F L G
H149 : nCol G H L
H148 : Col G H t
H147 : BetS L t F
t : Point
H146 : TS L G H F
H145 : TS M G H F
H144 : TS F G H M
H143 : TS K G H M
H142 : Col G H H
H141 : eq H H
H140 : OS F K G H
H139 : TP G H F K
H138 : Par G H F K
H137 : Par F K G H
H136 : OS L M G H
H135 : TP G H L M
H134 : Par G H L M
H133 : TS A B D C
H132 : nCol B D A
H131 : Col B D O
H130 : Col B O D
H129 : CongA F K M J E N
H128 : CongA F K M F K H
H127 : CongA F K M F K M
H126 : nCol F K M
H125 : Out K F F
H124 : neq K F
H123 : eq F F
H122 : Out K M H
H121 : Out K H M
H120 : neq K H
H119 : CongA F K H J E N
H118 : CongA F K H H K F
H117 : nCol F K H
H116 : PG F K M L
H115 : Par F L K M
H114 : Par L F M K
H113 : Par M K L F
H112 : neq L F
H111 : nCol F L M
H110 : Col G F L
H109 : Col G L F
H108 : Par M K G F
H107 : Par M K F G
H106 : Par M K G L
H105 : Par G L M K
H104 : Par G L K M
H103 : Col H M K
H102 : Par F G M K
H101 : neq M K
H100 : neq K M
H99 : Col H K M
H98 : Col K H M
H97 : Par F G H K
H96 : Par G L H M
H95 : Par F G K H
H94 : Par F K M L
H93 : Par F K L M
H92 : Par L M G H
H91 : Par M L G H
H90 : Par F K G H
H89 : Col L M M
H88 : Col G H H
H87 : Col F K K
H86 : eq M M
H85 : eq H H
H84 : eq K K
H83 : neq L M
H82 : nCol H M L
H81 : Par G H M L
H80 : neq G H
H79 : nCol G H M
H78 : neq F K
H77 : BetS K H M
H76 : Out H G G
H75 : neq H G
H74 : eq G G
H73 : RT K H G G H M
H72 : RT G H M K H G
H71 : CongA F K H G H M
H70 : CongA F K H H K F
H69 : nCol F K H
H68 : nCol H K F
H67 : CongA G H M H K F
H66 : RT F K H K H G
H65 : OS F G K H
H64 : TP K H F G
H63 : Par K H F G
H62 : Par F G K H
H61 : Cong K s H K
H60 : BetS H K s
s : Point
H59 : neq H K
H58 : Par K F H G
H57 : Par F K H G
H56 : CongA H K F G H M
H55 : CongA J E N G H M
H54 : BetS B e C
H53 : TS M G H K
H52 : Midpoint B e C
H51 : EF D B e C G H M L
H50 : CongA G H M J E N
H49 : PG G H M L
M,L,e : Point
H48 : nCol G H K
H47 : nCol H G K
H46 : nCol K H G
H45 : Par F K H G
H44 : Triangle D B C
H43 : nCol D B C
H42 : OS S F K H
H41 : CongA H K F J E N
H40 : EF A B m D F K H G
H39 : PG F K H G
F,G : Point
H38 : nCol S K H
H37 : nCol H K S
H36 : neq H K
H35 : neq K H
H34 : Col R K K
H33 : eq K K
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
let Tf:=fresh in assert (Tf:exists j, (BetS F j M /\ BetS K j L)) by (conclude lemma_diagonalsmeet);destruct Tf as [j];spliter.
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (Col R K K) by (conclude_def Col ).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (neq H K) by (conclude lemma_inequalitysymmetric).
assert (nCol H K S) by (conclude lemma_NChelper).
assert (nCol S K H) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F G, (PG F K H G /\\ EF A B m D F K H G /\\ CongA H K F J E N /\\ OS S F K H)) by (conclude proposition_42B);destruct Tf as [F[G]];spliter.
assert (nCol D B C) by (forward_using lemma_NCorder).
assert (Triangle D B C) by (conclude_def Triangle ).
assert (Par F K H G) by (conclude_def PG ).
assert (nCol K H G) by (forward_using lemma_parallelNC).
assert (nCol H G K) by (forward_using lemma_NCorder).
assert (nCol G H K) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists M L e, (PG G H M L /\\ CongA G H M J E N /\\ EF D B e C G H M L /\\ Midpoint B e C /\\ TS M G H K)) by (conclude proposition_44);destruct Tf as [M[L[e]]];spliter.
assert (BetS B e C) by (conclude_def Midpoint ).
assert (CongA J E N G H M) by (conclude lemma_equalanglessymmetric).
assert (CongA H K F G H M) by (conclude lemma_equalanglestransitive).
assert (Par F K H G) by (conclude_def PG ).
assert (Par K F H G) by (forward_using lemma_parallelflip).
assert (neq H K) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists s, (BetS H K s /\\ Cong K s H K)) by (conclude lemma_extension);destruct Tf as [s];spliter.
assert (Par F G K H) by (conclude_def PG ).
assert (Par K H F G) by (conclude lemma_parallelsymmetric).
assert (TP K H F G) by (conclude lemma_paralleldef2B).
assert (OS F G K H) by (conclude_def TP ).
assert (RT F K H K H G) by (conclude proposition_29C).
assert (CongA G H M H K F) by (conclude lemma_equalanglessymmetric).
assert (nCol H K F) by (conclude lemma_equalanglesNC).
assert (nCol F K H) by (forward_using lemma_NCorder).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H G H M) by (conclude lemma_equalanglestransitive).
assert (RT G H M K H G) by (conclude lemma_RTcongruence).
assert (RT K H G G H M) by (conclude lemma_RTsymmetric).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (neq H G) by (forward_using lemma_NCdistinct).
assert (Out H G G) by (conclude lemma_ray4).
assert (BetS K H M) by (conclude proposition_14).
assert (neq F K) by (forward_using lemma_NCdistinct).
assert (nCol G H M) by (conclude lemma_equalanglesNC).
assert (neq G H) by (forward_using lemma_NCdistinct).
assert (Par G H M L) by (conclude_def PG ).
assert (nCol H M L) by (forward_using lemma_parallelNC).
assert (neq L M) by (forward_using lemma_NCdistinct).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (eq H H) by (conclude cn_equalityreflexive).
assert (eq M M) by (conclude cn_equalityreflexive).
assert (Col F K K) by (conclude_def Col ).
assert (Col G H H) by (conclude_def Col ).
assert (Col L M M) by (conclude_def Col ).
assert (Par F K G H) by (forward_using lemma_parallelflip).
assert (Par M L G H) by (conclude lemma_parallelsymmetric).
assert (Par L M G H) by (forward_using lemma_parallelflip).
assert (Par F K L M) by (conclude proposition_30).
assert (Par F K M L) by (forward_using lemma_parallelflip).
assert (Par F G K H) by (conclude_def PG ).
assert (Par G L H M) by (conclude_def PG ).
assert (Par F G H K) by (forward_using lemma_parallelflip).
assert (Col K H M) by (conclude_def Col ).
assert (Col H K M) by (forward_using lemma_collinearorder).
assert (neq K M) by (forward_using lemma_betweennotequal).
assert (neq M K) by (conclude lemma_inequalitysymmetric).
assert (Par F G M K) by (conclude lemma_collinearparallel).
assert (Col H M K) by (forward_using lemma_collinearorder).
assert (Par G L K M) by (conclude lemma_collinearparallel).
assert (Par G L M K) by (forward_using lemma_parallelflip).
assert (Par M K G L) by (conclude lemma_parallelsymmetric).
assert (Par M K F G) by (conclude lemma_parallelsymmetric).
assert (Par M K G F) by (forward_using lemma_parallelflip).
assert (Col G L F) by (conclude lemma_Playfair).
assert (Col G F L) by (forward_using lemma_collinearorder).
assert (nCol F L M) by (forward_using lemma_parallelNC).
assert (neq L F) by (forward_using lemma_NCdistinct).
assert (Par M K L F) by (conclude lemma_collinearparallel).
assert (Par L F M K) by (conclude lemma_parallelsymmetric).
assert (Par F L K M) by (forward_using lemma_parallelflip).
assert (PG F K M L) by (conclude_def PG ).
assert (nCol F K H) by (forward_using lemma_parallelNC).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H J E N) by (conclude lemma_equalanglestransitive).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (Out K H M) by (conclude lemma_ray4).
assert (Out K M H) by (conclude lemma_ray5).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (neq K F) by (forward_using lemma_NCdistinct).
assert (Out K F F) by (conclude lemma_ray4).
assert (nCol F K M) by (forward_using lemma_parallelNC).
assert (CongA F K M F K M) by (conclude lemma_equalanglesreflexive).
assert (CongA F K M F K H) by (conclude lemma_equalangleshelper).
assert (CongA F K M J E N) by (conclude lemma_equalanglestransitive).
assert (Col B O D) by (conclude_def Col ).
assert (Col B D O) by (forward_using lemma_collinearorder).
assert (nCol B D A) by (forward_using lemma_NCorder).
assert (TS A B D C) by (conclude_def TS ).
assert (Par G H L M) by (forward_using lemma_parallelflip).
assert (TP G H L M) by (conclude lemma_paralleldef2B).
assert (OS L M G H) by (conclude_def TP ).
assert (Par F K G H) by (forward_using lemma_parallelflip).
assert (Par G H F K) by (conclude lemma_parallelsymmetric).
assert (TP G H F K) by (conclude lemma_paralleldef2B).
assert (OS F K G H) by (conclude_def TP ).
assert (eq H H) by (conclude cn_equalityreflexive).
assert (Col G H H) by (conclude_def Col ).
assert (TS K G H M) by (conclude_def TS ).
assert (TS F G H M) by (conclude lemma_planeseparation).
assert (TS M G H F) by (conclude lemma_oppositesidesymmetric).
assert (TS L G H F) by (conclude lemma_planeseparation).
let Tf:=fresh in assert (Tf:exists t, (BetS L t F /\\ Col G H t /\\ nCol G H L)) by (conclude_def TS );destruct Tf as [t];spliter.
assert (Col F L G) by (forward_using lemma_collinearorder).
assert (Col L t F) by (conclude_def Col ).
assert (Col F L t) by (forward_using lemma_collinearorder).
assert (neq F L) by (forward_using lemma_NCdistinct).
assert (Col L G t) by (conclude lemma_collinear4).
assert (Col t G L) by (forward_using lemma_collinearorder).
assert (Col t G H) by (forward_using lemma_collinearorder).
assert (~ neq t G).
assert (BetS L G F) by (conclude cn_equalitysub).
assert (BetS F G L) by (conclude axiom_betweennesssymmetry).
let Tf:=fresh in assert (Tf:exists j, (BetS F j M /\\ BetS K j L)) by (conclude lemma_diagonalsmeet);destruct Tf as [j];spliter.

*****
H161 : BetS K j L
H160 : BetS F j M
j : Point
H159 : BetS F G L
H158 : BetS L G F
H157 : not (neq t G)
H156 : Col t G H
H155 : Col t G L
H154 : Col L G t
H153 : neq F L
H152 : Col F L t
H151 : Col L t F
H150 : Col F L G
H149 : nCol G H L
H148 : Col G H t
H147 : BetS L t F
t : Point
H146 : TS L G H F
H145 : TS M G H F
H144 : TS F G H M
H143 : TS K G H M
H142 : Col G H H
H141 : eq H H
H140 : OS F K G H
H139 : TP G H F K
H138 : Par G H F K
H137 : Par F K G H
H136 : OS L M G H
H135 : TP G H L M
H134 : Par G H L M
H133 : TS A B D C
H132 : nCol B D A
H131 : Col B D O
H130 : Col B O D
H129 : CongA F K M J E N
H128 : CongA F K M F K H
H127 : CongA F K M F K M
H126 : nCol F K M
H125 : Out K F F
H124 : neq K F
H123 : eq F F
H122 : Out K M H
H121 : Out K H M
H120 : neq K H
H119 : CongA F K H J E N
H118 : CongA F K H H K F
H117 : nCol F K H
H116 : PG F K M L
H115 : Par F L K M
H114 : Par L F M K
H113 : Par M K L F
H112 : neq L F
H111 : nCol F L M
H110 : Col G F L
H109 : Col G L F
H108 : Par M K G F
H107 : Par M K F G
H106 : Par M K G L
H105 : Par G L M K
H104 : Par G L K M
H103 : Col H M K
H102 : Par F G M K
H101 : neq M K
H100 : neq K M
H99 : Col H K M
H98 : Col K H M
H97 : Par F G H K
H96 : Par G L H M
H95 : Par F G K H
H94 : Par F K M L
H93 : Par F K L M
H92 : Par L M G H
H91 : Par M L G H
H90 : Par F K G H
H89 : Col L M M
H88 : Col G H H
H87 : Col F K K
H86 : eq M M
H85 : eq H H
H84 : eq K K
H83 : neq L M
H82 : nCol H M L
H81 : Par G H M L
H80 : neq G H
H79 : nCol G H M
H78 : neq F K
H77 : BetS K H M
H76 : Out H G G
H75 : neq H G
H74 : eq G G
H73 : RT K H G G H M
H72 : RT G H M K H G
H71 : CongA F K H G H M
H70 : CongA F K H H K F
H69 : nCol F K H
H68 : nCol H K F
H67 : CongA G H M H K F
H66 : RT F K H K H G
H65 : OS F G K H
H64 : TP K H F G
H63 : Par K H F G
H62 : Par F G K H
H61 : Cong K s H K
H60 : BetS H K s
s : Point
H59 : neq H K
H58 : Par K F H G
H57 : Par F K H G
H56 : CongA H K F G H M
H55 : CongA J E N G H M
H54 : BetS B e C
H53 : TS M G H K
H52 : Midpoint B e C
H51 : EF D B e C G H M L
H50 : CongA G H M J E N
H49 : PG G H M L
M,L,e : Point
H48 : nCol G H K
H47 : nCol H G K
H46 : nCol K H G
H45 : Par F K H G
H44 : Triangle D B C
H43 : nCol D B C
H42 : OS S F K H
H41 : CongA H K F J E N
H40 : EF A B m D F K H G
H39 : PG F K H G
F,G : Point
H38 : nCol S K H
H37 : nCol H K S
H36 : neq H K
H35 : neq K H
H34 : Col R K K
H33 : eq K K
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (EF A B C D F K M L) by (conclude axiom_paste4).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (Col R K K) by (conclude_def Col ).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (neq H K) by (conclude lemma_inequalitysymmetric).
assert (nCol H K S) by (conclude lemma_NChelper).
assert (nCol S K H) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F G, (PG F K H G /\\ EF A B m D F K H G /\\ CongA H K F J E N /\\ OS S F K H)) by (conclude proposition_42B);destruct Tf as [F[G]];spliter.
assert (nCol D B C) by (forward_using lemma_NCorder).
assert (Triangle D B C) by (conclude_def Triangle ).
assert (Par F K H G) by (conclude_def PG ).
assert (nCol K H G) by (forward_using lemma_parallelNC).
assert (nCol H G K) by (forward_using lemma_NCorder).
assert (nCol G H K) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists M L e, (PG G H M L /\\ CongA G H M J E N /\\ EF D B e C G H M L /\\ Midpoint B e C /\\ TS M G H K)) by (conclude proposition_44);destruct Tf as [M[L[e]]];spliter.
assert (BetS B e C) by (conclude_def Midpoint ).
assert (CongA J E N G H M) by (conclude lemma_equalanglessymmetric).
assert (CongA H K F G H M) by (conclude lemma_equalanglestransitive).
assert (Par F K H G) by (conclude_def PG ).
assert (Par K F H G) by (forward_using lemma_parallelflip).
assert (neq H K) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists s, (BetS H K s /\\ Cong K s H K)) by (conclude lemma_extension);destruct Tf as [s];spliter.
assert (Par F G K H) by (conclude_def PG ).
assert (Par K H F G) by (conclude lemma_parallelsymmetric).
assert (TP K H F G) by (conclude lemma_paralleldef2B).
assert (OS F G K H) by (conclude_def TP ).
assert (RT F K H K H G) by (conclude proposition_29C).
assert (CongA G H M H K F) by (conclude lemma_equalanglessymmetric).
assert (nCol H K F) by (conclude lemma_equalanglesNC).
assert (nCol F K H) by (forward_using lemma_NCorder).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H G H M) by (conclude lemma_equalanglestransitive).
assert (RT G H M K H G) by (conclude lemma_RTcongruence).
assert (RT K H G G H M) by (conclude lemma_RTsymmetric).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (neq H G) by (forward_using lemma_NCdistinct).
assert (Out H G G) by (conclude lemma_ray4).
assert (BetS K H M) by (conclude proposition_14).
assert (neq F K) by (forward_using lemma_NCdistinct).
assert (nCol G H M) by (conclude lemma_equalanglesNC).
assert (neq G H) by (forward_using lemma_NCdistinct).
assert (Par G H M L) by (conclude_def PG ).
assert (nCol H M L) by (forward_using lemma_parallelNC).
assert (neq L M) by (forward_using lemma_NCdistinct).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (eq H H) by (conclude cn_equalityreflexive).
assert (eq M M) by (conclude cn_equalityreflexive).
assert (Col F K K) by (conclude_def Col ).
assert (Col G H H) by (conclude_def Col ).
assert (Col L M M) by (conclude_def Col ).
assert (Par F K G H) by (forward_using lemma_parallelflip).
assert (Par M L G H) by (conclude lemma_parallelsymmetric).
assert (Par L M G H) by (forward_using lemma_parallelflip).
assert (Par F K L M) by (conclude proposition_30).
assert (Par F K M L) by (forward_using lemma_parallelflip).
assert (Par F G K H) by (conclude_def PG ).
assert (Par G L H M) by (conclude_def PG ).
assert (Par F G H K) by (forward_using lemma_parallelflip).
assert (Col K H M) by (conclude_def Col ).
assert (Col H K M) by (forward_using lemma_collinearorder).
assert (neq K M) by (forward_using lemma_betweennotequal).
assert (neq M K) by (conclude lemma_inequalitysymmetric).
assert (Par F G M K) by (conclude lemma_collinearparallel).
assert (Col H M K) by (forward_using lemma_collinearorder).
assert (Par G L K M) by (conclude lemma_collinearparallel).
assert (Par G L M K) by (forward_using lemma_parallelflip).
assert (Par M K G L) by (conclude lemma_parallelsymmetric).
assert (Par M K F G) by (conclude lemma_parallelsymmetric).
assert (Par M K G F) by (forward_using lemma_parallelflip).
assert (Col G L F) by (conclude lemma_Playfair).
assert (Col G F L) by (forward_using lemma_collinearorder).
assert (nCol F L M) by (forward_using lemma_parallelNC).
assert (neq L F) by (forward_using lemma_NCdistinct).
assert (Par M K L F) by (conclude lemma_collinearparallel).
assert (Par L F M K) by (conclude lemma_parallelsymmetric).
assert (Par F L K M) by (forward_using lemma_parallelflip).
assert (PG F K M L) by (conclude_def PG ).
assert (nCol F K H) by (forward_using lemma_parallelNC).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H J E N) by (conclude lemma_equalanglestransitive).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (Out K H M) by (conclude lemma_ray4).
assert (Out K M H) by (conclude lemma_ray5).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (neq K F) by (forward_using lemma_NCdistinct).
assert (Out K F F) by (conclude lemma_ray4).
assert (nCol F K M) by (forward_using lemma_parallelNC).
assert (CongA F K M F K M) by (conclude lemma_equalanglesreflexive).
assert (CongA F K M F K H) by (conclude lemma_equalangleshelper).
assert (CongA F K M J E N) by (conclude lemma_equalanglestransitive).
assert (Col B O D) by (conclude_def Col ).
assert (Col B D O) by (forward_using lemma_collinearorder).
assert (nCol B D A) by (forward_using lemma_NCorder).
assert (TS A B D C) by (conclude_def TS ).
assert (Par G H L M) by (forward_using lemma_parallelflip).
assert (TP G H L M) by (conclude lemma_paralleldef2B).
assert (OS L M G H) by (conclude_def TP ).
assert (Par F K G H) by (forward_using lemma_parallelflip).
assert (Par G H F K) by (conclude lemma_parallelsymmetric).
assert (TP G H F K) by (conclude lemma_paralleldef2B).
assert (OS F K G H) by (conclude_def TP ).
assert (eq H H) by (conclude cn_equalityreflexive).
assert (Col G H H) by (conclude_def Col ).
assert (TS K G H M) by (conclude_def TS ).
assert (TS F G H M) by (conclude lemma_planeseparation).
assert (TS M G H F) by (conclude lemma_oppositesidesymmetric).
assert (TS L G H F) by (conclude lemma_planeseparation).
let Tf:=fresh in assert (Tf:exists t, (BetS L t F /\\ Col G H t /\\ nCol G H L)) by (conclude_def TS );destruct Tf as [t];spliter.
assert (Col F L G) by (forward_using lemma_collinearorder).
assert (Col L t F) by (conclude_def Col ).
assert (Col F L t) by (forward_using lemma_collinearorder).
assert (neq F L) by (forward_using lemma_NCdistinct).
assert (Col L G t) by (conclude lemma_collinear4).
assert (Col t G L) by (forward_using lemma_collinearorder).
assert (Col t G H) by (forward_using lemma_collinearorder).
assert (~ neq t G).
assert (BetS L G F) by (conclude cn_equalitysub).
assert (BetS F G L) by (conclude axiom_betweennesssymmetry).
let Tf:=fresh in assert (Tf:exists j, (BetS F j M /\\ BetS K j L)) by (conclude lemma_diagonalsmeet);destruct Tf as [j];spliter.
assert (EF A B C D F K M L) by (conclude axiom_paste4).

*****
H162 : EF A B C D F K M L
H161 : BetS K j L
H160 : BetS F j M
j : Point
H159 : BetS F G L
H158 : BetS L G F
H157 : not (neq t G)
H156 : Col t G H
H155 : Col t G L
H154 : Col L G t
H153 : neq F L
H152 : Col F L t
H151 : Col L t F
H150 : Col F L G
H149 : nCol G H L
H148 : Col G H t
H147 : BetS L t F
t : Point
H146 : TS L G H F
H145 : TS M G H F
H144 : TS F G H M
H143 : TS K G H M
H142 : Col G H H
H141 : eq H H
H140 : OS F K G H
H139 : TP G H F K
H138 : Par G H F K
H137 : Par F K G H
H136 : OS L M G H
H135 : TP G H L M
H134 : Par G H L M
H133 : TS A B D C
H132 : nCol B D A
H131 : Col B D O
H130 : Col B O D
H129 : CongA F K M J E N
H128 : CongA F K M F K H
H127 : CongA F K M F K M
H126 : nCol F K M
H125 : Out K F F
H124 : neq K F
H123 : eq F F
H122 : Out K M H
H121 : Out K H M
H120 : neq K H
H119 : CongA F K H J E N
H118 : CongA F K H H K F
H117 : nCol F K H
H116 : PG F K M L
H115 : Par F L K M
H114 : Par L F M K
H113 : Par M K L F
H112 : neq L F
H111 : nCol F L M
H110 : Col G F L
H109 : Col G L F
H108 : Par M K G F
H107 : Par M K F G
H106 : Par M K G L
H105 : Par G L M K
H104 : Par G L K M
H103 : Col H M K
H102 : Par F G M K
H101 : neq M K
H100 : neq K M
H99 : Col H K M
H98 : Col K H M
H97 : Par F G H K
H96 : Par G L H M
H95 : Par F G K H
H94 : Par F K M L
H93 : Par F K L M
H92 : Par L M G H
H91 : Par M L G H
H90 : Par F K G H
H89 : Col L M M
H88 : Col G H H
H87 : Col F K K
H86 : eq M M
H85 : eq H H
H84 : eq K K
H83 : neq L M
H82 : nCol H M L
H81 : Par G H M L
H80 : neq G H
H79 : nCol G H M
H78 : neq F K
H77 : BetS K H M
H76 : Out H G G
H75 : neq H G
H74 : eq G G
H73 : RT K H G G H M
H72 : RT G H M K H G
H71 : CongA F K H G H M
H70 : CongA F K H H K F
H69 : nCol F K H
H68 : nCol H K F
H67 : CongA G H M H K F
H66 : RT F K H K H G
H65 : OS F G K H
H64 : TP K H F G
H63 : Par K H F G
H62 : Par F G K H
H61 : Cong K s H K
H60 : BetS H K s
s : Point
H59 : neq H K
H58 : Par K F H G
H57 : Par F K H G
H56 : CongA H K F G H M
H55 : CongA J E N G H M
H54 : BetS B e C
H53 : TS M G H K
H52 : Midpoint B e C
H51 : EF D B e C G H M L
H50 : CongA G H M J E N
H49 : PG G H M L
M,L,e : Point
H48 : nCol G H K
H47 : nCol H G K
H46 : nCol K H G
H45 : Par F K H G
H44 : Triangle D B C
H43 : nCol D B C
H42 : OS S F K H
H41 : CongA H K F J E N
H40 : EF A B m D F K H G
H39 : PG F K H G
F,G : Point
H38 : nCol S K H
H37 : nCol H K S
H36 : neq H K
H35 : neq K H
H34 : Col R K K
H33 : eq K K
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (EF F K M L A B C D) by (conclude axiom_EFsymmetric).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (Col R K K) by (conclude_def Col ).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (neq H K) by (conclude lemma_inequalitysymmetric).
assert (nCol H K S) by (conclude lemma_NChelper).
assert (nCol S K H) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F G, (PG F K H G /\\ EF A B m D F K H G /\\ CongA H K F J E N /\\ OS S F K H)) by (conclude proposition_42B);destruct Tf as [F[G]];spliter.
assert (nCol D B C) by (forward_using lemma_NCorder).
assert (Triangle D B C) by (conclude_def Triangle ).
assert (Par F K H G) by (conclude_def PG ).
assert (nCol K H G) by (forward_using lemma_parallelNC).
assert (nCol H G K) by (forward_using lemma_NCorder).
assert (nCol G H K) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists M L e, (PG G H M L /\\ CongA G H M J E N /\\ EF D B e C G H M L /\\ Midpoint B e C /\\ TS M G H K)) by (conclude proposition_44);destruct Tf as [M[L[e]]];spliter.
assert (BetS B e C) by (conclude_def Midpoint ).
assert (CongA J E N G H M) by (conclude lemma_equalanglessymmetric).
assert (CongA H K F G H M) by (conclude lemma_equalanglestransitive).
assert (Par F K H G) by (conclude_def PG ).
assert (Par K F H G) by (forward_using lemma_parallelflip).
assert (neq H K) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists s, (BetS H K s /\\ Cong K s H K)) by (conclude lemma_extension);destruct Tf as [s];spliter.
assert (Par F G K H) by (conclude_def PG ).
assert (Par K H F G) by (conclude lemma_parallelsymmetric).
assert (TP K H F G) by (conclude lemma_paralleldef2B).
assert (OS F G K H) by (conclude_def TP ).
assert (RT F K H K H G) by (conclude proposition_29C).
assert (CongA G H M H K F) by (conclude lemma_equalanglessymmetric).
assert (nCol H K F) by (conclude lemma_equalanglesNC).
assert (nCol F K H) by (forward_using lemma_NCorder).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H G H M) by (conclude lemma_equalanglestransitive).
assert (RT G H M K H G) by (conclude lemma_RTcongruence).
assert (RT K H G G H M) by (conclude lemma_RTsymmetric).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (neq H G) by (forward_using lemma_NCdistinct).
assert (Out H G G) by (conclude lemma_ray4).
assert (BetS K H M) by (conclude proposition_14).
assert (neq F K) by (forward_using lemma_NCdistinct).
assert (nCol G H M) by (conclude lemma_equalanglesNC).
assert (neq G H) by (forward_using lemma_NCdistinct).
assert (Par G H M L) by (conclude_def PG ).
assert (nCol H M L) by (forward_using lemma_parallelNC).
assert (neq L M) by (forward_using lemma_NCdistinct).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (eq H H) by (conclude cn_equalityreflexive).
assert (eq M M) by (conclude cn_equalityreflexive).
assert (Col F K K) by (conclude_def Col ).
assert (Col G H H) by (conclude_def Col ).
assert (Col L M M) by (conclude_def Col ).
assert (Par F K G H) by (forward_using lemma_parallelflip).
assert (Par M L G H) by (conclude lemma_parallelsymmetric).
assert (Par L M G H) by (forward_using lemma_parallelflip).
assert (Par F K L M) by (conclude proposition_30).
assert (Par F K M L) by (forward_using lemma_parallelflip).
assert (Par F G K H) by (conclude_def PG ).
assert (Par G L H M) by (conclude_def PG ).
assert (Par F G H K) by (forward_using lemma_parallelflip).
assert (Col K H M) by (conclude_def Col ).
assert (Col H K M) by (forward_using lemma_collinearorder).
assert (neq K M) by (forward_using lemma_betweennotequal).
assert (neq M K) by (conclude lemma_inequalitysymmetric).
assert (Par F G M K) by (conclude lemma_collinearparallel).
assert (Col H M K) by (forward_using lemma_collinearorder).
assert (Par G L K M) by (conclude lemma_collinearparallel).
assert (Par G L M K) by (forward_using lemma_parallelflip).
assert (Par M K G L) by (conclude lemma_parallelsymmetric).
assert (Par M K F G) by (conclude lemma_parallelsymmetric).
assert (Par M K G F) by (forward_using lemma_parallelflip).
assert (Col G L F) by (conclude lemma_Playfair).
assert (Col G F L) by (forward_using lemma_collinearorder).
assert (nCol F L M) by (forward_using lemma_parallelNC).
assert (neq L F) by (forward_using lemma_NCdistinct).
assert (Par M K L F) by (conclude lemma_collinearparallel).
assert (Par L F M K) by (conclude lemma_parallelsymmetric).
assert (Par F L K M) by (forward_using lemma_parallelflip).
assert (PG F K M L) by (conclude_def PG ).
assert (nCol F K H) by (forward_using lemma_parallelNC).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H J E N) by (conclude lemma_equalanglestransitive).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (Out K H M) by (conclude lemma_ray4).
assert (Out K M H) by (conclude lemma_ray5).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (neq K F) by (forward_using lemma_NCdistinct).
assert (Out K F F) by (conclude lemma_ray4).
assert (nCol F K M) by (forward_using lemma_parallelNC).
assert (CongA F K M F K M) by (conclude lemma_equalanglesreflexive).
assert (CongA F K M F K H) by (conclude lemma_equalangleshelper).
assert (CongA F K M J E N) by (conclude lemma_equalanglestransitive).
assert (Col B O D) by (conclude_def Col ).
assert (Col B D O) by (forward_using lemma_collinearorder).
assert (nCol B D A) by (forward_using lemma_NCorder).
assert (TS A B D C) by (conclude_def TS ).
assert (Par G H L M) by (forward_using lemma_parallelflip).
assert (TP G H L M) by (conclude lemma_paralleldef2B).
assert (OS L M G H) by (conclude_def TP ).
assert (Par F K G H) by (forward_using lemma_parallelflip).
assert (Par G H F K) by (conclude lemma_parallelsymmetric).
assert (TP G H F K) by (conclude lemma_paralleldef2B).
assert (OS F K G H) by (conclude_def TP ).
assert (eq H H) by (conclude cn_equalityreflexive).
assert (Col G H H) by (conclude_def Col ).
assert (TS K G H M) by (conclude_def TS ).
assert (TS F G H M) by (conclude lemma_planeseparation).
assert (TS M G H F) by (conclude lemma_oppositesidesymmetric).
assert (TS L G H F) by (conclude lemma_planeseparation).
let Tf:=fresh in assert (Tf:exists t, (BetS L t F /\\ Col G H t /\\ nCol G H L)) by (conclude_def TS );destruct Tf as [t];spliter.
assert (Col F L G) by (forward_using lemma_collinearorder).
assert (Col L t F) by (conclude_def Col ).
assert (Col F L t) by (forward_using lemma_collinearorder).
assert (neq F L) by (forward_using lemma_NCdistinct).
assert (Col L G t) by (conclude lemma_collinear4).
assert (Col t G L) by (forward_using lemma_collinearorder).
assert (Col t G H) by (forward_using lemma_collinearorder).
assert (~ neq t G).
assert (BetS L G F) by (conclude cn_equalitysub).
assert (BetS F G L) by (conclude axiom_betweennesssymmetry).
let Tf:=fresh in assert (Tf:exists j, (BetS F j M /\\ BetS K j L)) by (conclude lemma_diagonalsmeet);destruct Tf as [j];spliter.
assert (EF A B C D F K M L) by (conclude axiom_paste4).
assert (EF F K M L A B C D) by (conclude axiom_EFsymmetric).

*****
H163 : EF F K M L A B C D
H162 : EF A B C D F K M L
H161 : BetS K j L
H160 : BetS F j M
j : Point
H159 : BetS F G L
H158 : BetS L G F
H157 : not (neq t G)
H156 : Col t G H
H155 : Col t G L
H154 : Col L G t
H153 : neq F L
H152 : Col F L t
H151 : Col L t F
H150 : Col F L G
H149 : nCol G H L
H148 : Col G H t
H147 : BetS L t F
t : Point
H146 : TS L G H F
H145 : TS M G H F
H144 : TS F G H M
H143 : TS K G H M
H142 : Col G H H
H141 : eq H H
H140 : OS F K G H
H139 : TP G H F K
H138 : Par G H F K
H137 : Par F K G H
H136 : OS L M G H
H135 : TP G H L M
H134 : Par G H L M
H133 : TS A B D C
H132 : nCol B D A
H131 : Col B D O
H130 : Col B O D
H129 : CongA F K M J E N
H128 : CongA F K M F K H
H127 : CongA F K M F K M
H126 : nCol F K M
H125 : Out K F F
H124 : neq K F
H123 : eq F F
H122 : Out K M H
H121 : Out K H M
H120 : neq K H
H119 : CongA F K H J E N
H118 : CongA F K H H K F
H117 : nCol F K H
H116 : PG F K M L
H115 : Par F L K M
H114 : Par L F M K
H113 : Par M K L F
H112 : neq L F
H111 : nCol F L M
H110 : Col G F L
H109 : Col G L F
H108 : Par M K G F
H107 : Par M K F G
H106 : Par M K G L
H105 : Par G L M K
H104 : Par G L K M
H103 : Col H M K
H102 : Par F G M K
H101 : neq M K
H100 : neq K M
H99 : Col H K M
H98 : Col K H M
H97 : Par F G H K
H96 : Par G L H M
H95 : Par F G K H
H94 : Par F K M L
H93 : Par F K L M
H92 : Par L M G H
H91 : Par M L G H
H90 : Par F K G H
H89 : Col L M M
H88 : Col G H H
H87 : Col F K K
H86 : eq M M
H85 : eq H H
H84 : eq K K
H83 : neq L M
H82 : nCol H M L
H81 : Par G H M L
H80 : neq G H
H79 : nCol G H M
H78 : neq F K
H77 : BetS K H M
H76 : Out H G G
H75 : neq H G
H74 : eq G G
H73 : RT K H G G H M
H72 : RT G H M K H G
H71 : CongA F K H G H M
H70 : CongA F K H H K F
H69 : nCol F K H
H68 : nCol H K F
H67 : CongA G H M H K F
H66 : RT F K H K H G
H65 : OS F G K H
H64 : TP K H F G
H63 : Par K H F G
H62 : Par F G K H
H61 : Cong K s H K
H60 : BetS H K s
s : Point
H59 : neq H K
H58 : Par K F H G
H57 : Par F K H G
H56 : CongA H K F G H M
H55 : CongA J E N G H M
H54 : BetS B e C
H53 : TS M G H K
H52 : Midpoint B e C
H51 : EF D B e C G H M L
H50 : CongA G H M J E N
H49 : PG G H M L
M,L,e : Point
H48 : nCol G H K
H47 : nCol H G K
H46 : nCol K H G
H45 : Par F K H G
H44 : Triangle D B C
H43 : nCol D B C
H42 : OS S F K H
H41 : CongA H K F J E N
H40 : EF A B m D F K H G
H39 : PG F K H G
F,G : Point
H38 : nCol S K H
H37 : nCol H K S
H36 : neq H K
H35 : neq K H
H34 : Col R K K
H33 : eq K K
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (BetS P K M) by (conclude lemma_3_7b).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (Col R K K) by (conclude_def Col ).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (neq H K) by (conclude lemma_inequalitysymmetric).
assert (nCol H K S) by (conclude lemma_NChelper).
assert (nCol S K H) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F G, (PG F K H G /\\ EF A B m D F K H G /\\ CongA H K F J E N /\\ OS S F K H)) by (conclude proposition_42B);destruct Tf as [F[G]];spliter.
assert (nCol D B C) by (forward_using lemma_NCorder).
assert (Triangle D B C) by (conclude_def Triangle ).
assert (Par F K H G) by (conclude_def PG ).
assert (nCol K H G) by (forward_using lemma_parallelNC).
assert (nCol H G K) by (forward_using lemma_NCorder).
assert (nCol G H K) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists M L e, (PG G H M L /\\ CongA G H M J E N /\\ EF D B e C G H M L /\\ Midpoint B e C /\\ TS M G H K)) by (conclude proposition_44);destruct Tf as [M[L[e]]];spliter.
assert (BetS B e C) by (conclude_def Midpoint ).
assert (CongA J E N G H M) by (conclude lemma_equalanglessymmetric).
assert (CongA H K F G H M) by (conclude lemma_equalanglestransitive).
assert (Par F K H G) by (conclude_def PG ).
assert (Par K F H G) by (forward_using lemma_parallelflip).
assert (neq H K) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists s, (BetS H K s /\\ Cong K s H K)) by (conclude lemma_extension);destruct Tf as [s];spliter.
assert (Par F G K H) by (conclude_def PG ).
assert (Par K H F G) by (conclude lemma_parallelsymmetric).
assert (TP K H F G) by (conclude lemma_paralleldef2B).
assert (OS F G K H) by (conclude_def TP ).
assert (RT F K H K H G) by (conclude proposition_29C).
assert (CongA G H M H K F) by (conclude lemma_equalanglessymmetric).
assert (nCol H K F) by (conclude lemma_equalanglesNC).
assert (nCol F K H) by (forward_using lemma_NCorder).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H G H M) by (conclude lemma_equalanglestransitive).
assert (RT G H M K H G) by (conclude lemma_RTcongruence).
assert (RT K H G G H M) by (conclude lemma_RTsymmetric).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (neq H G) by (forward_using lemma_NCdistinct).
assert (Out H G G) by (conclude lemma_ray4).
assert (BetS K H M) by (conclude proposition_14).
assert (neq F K) by (forward_using lemma_NCdistinct).
assert (nCol G H M) by (conclude lemma_equalanglesNC).
assert (neq G H) by (forward_using lemma_NCdistinct).
assert (Par G H M L) by (conclude_def PG ).
assert (nCol H M L) by (forward_using lemma_parallelNC).
assert (neq L M) by (forward_using lemma_NCdistinct).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (eq H H) by (conclude cn_equalityreflexive).
assert (eq M M) by (conclude cn_equalityreflexive).
assert (Col F K K) by (conclude_def Col ).
assert (Col G H H) by (conclude_def Col ).
assert (Col L M M) by (conclude_def Col ).
assert (Par F K G H) by (forward_using lemma_parallelflip).
assert (Par M L G H) by (conclude lemma_parallelsymmetric).
assert (Par L M G H) by (forward_using lemma_parallelflip).
assert (Par F K L M) by (conclude proposition_30).
assert (Par F K M L) by (forward_using lemma_parallelflip).
assert (Par F G K H) by (conclude_def PG ).
assert (Par G L H M) by (conclude_def PG ).
assert (Par F G H K) by (forward_using lemma_parallelflip).
assert (Col K H M) by (conclude_def Col ).
assert (Col H K M) by (forward_using lemma_collinearorder).
assert (neq K M) by (forward_using lemma_betweennotequal).
assert (neq M K) by (conclude lemma_inequalitysymmetric).
assert (Par F G M K) by (conclude lemma_collinearparallel).
assert (Col H M K) by (forward_using lemma_collinearorder).
assert (Par G L K M) by (conclude lemma_collinearparallel).
assert (Par G L M K) by (forward_using lemma_parallelflip).
assert (Par M K G L) by (conclude lemma_parallelsymmetric).
assert (Par M K F G) by (conclude lemma_parallelsymmetric).
assert (Par M K G F) by (forward_using lemma_parallelflip).
assert (Col G L F) by (conclude lemma_Playfair).
assert (Col G F L) by (forward_using lemma_collinearorder).
assert (nCol F L M) by (forward_using lemma_parallelNC).
assert (neq L F) by (forward_using lemma_NCdistinct).
assert (Par M K L F) by (conclude lemma_collinearparallel).
assert (Par L F M K) by (conclude lemma_parallelsymmetric).
assert (Par F L K M) by (forward_using lemma_parallelflip).
assert (PG F K M L) by (conclude_def PG ).
assert (nCol F K H) by (forward_using lemma_parallelNC).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H J E N) by (conclude lemma_equalanglestransitive).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (Out K H M) by (conclude lemma_ray4).
assert (Out K M H) by (conclude lemma_ray5).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (neq K F) by (forward_using lemma_NCdistinct).
assert (Out K F F) by (conclude lemma_ray4).
assert (nCol F K M) by (forward_using lemma_parallelNC).
assert (CongA F K M F K M) by (conclude lemma_equalanglesreflexive).
assert (CongA F K M F K H) by (conclude lemma_equalangleshelper).
assert (CongA F K M J E N) by (conclude lemma_equalanglestransitive).
assert (Col B O D) by (conclude_def Col ).
assert (Col B D O) by (forward_using lemma_collinearorder).
assert (nCol B D A) by (forward_using lemma_NCorder).
assert (TS A B D C) by (conclude_def TS ).
assert (Par G H L M) by (forward_using lemma_parallelflip).
assert (TP G H L M) by (conclude lemma_paralleldef2B).
assert (OS L M G H) by (conclude_def TP ).
assert (Par F K G H) by (forward_using lemma_parallelflip).
assert (Par G H F K) by (conclude lemma_parallelsymmetric).
assert (TP G H F K) by (conclude lemma_paralleldef2B).
assert (OS F K G H) by (conclude_def TP ).
assert (eq H H) by (conclude cn_equalityreflexive).
assert (Col G H H) by (conclude_def Col ).
assert (TS K G H M) by (conclude_def TS ).
assert (TS F G H M) by (conclude lemma_planeseparation).
assert (TS M G H F) by (conclude lemma_oppositesidesymmetric).
assert (TS L G H F) by (conclude lemma_planeseparation).
let Tf:=fresh in assert (Tf:exists t, (BetS L t F /\\ Col G H t /\\ nCol G H L)) by (conclude_def TS );destruct Tf as [t];spliter.
assert (Col F L G) by (forward_using lemma_collinearorder).
assert (Col L t F) by (conclude_def Col ).
assert (Col F L t) by (forward_using lemma_collinearorder).
assert (neq F L) by (forward_using lemma_NCdistinct).
assert (Col L G t) by (conclude lemma_collinear4).
assert (Col t G L) by (forward_using lemma_collinearorder).
assert (Col t G H) by (forward_using lemma_collinearorder).
assert (~ neq t G).
assert (BetS L G F) by (conclude cn_equalitysub).
assert (BetS F G L) by (conclude axiom_betweennesssymmetry).
let Tf:=fresh in assert (Tf:exists j, (BetS F j M /\\ BetS K j L)) by (conclude lemma_diagonalsmeet);destruct Tf as [j];spliter.
assert (EF A B C D F K M L) by (conclude axiom_paste4).
assert (EF F K M L A B C D) by (conclude axiom_EFsymmetric).
assert (BetS P K M) by (conclude lemma_3_7b).

*****
H164 : BetS P K M
H163 : EF F K M L A B C D
H162 : EF A B C D F K M L
H161 : BetS K j L
H160 : BetS F j M
j : Point
H159 : BetS F G L
H158 : BetS L G F
H157 : not (neq t G)
H156 : Col t G H
H155 : Col t G L
H154 : Col L G t
H153 : neq F L
H152 : Col F L t
H151 : Col L t F
H150 : Col F L G
H149 : nCol G H L
H148 : Col G H t
H147 : BetS L t F
t : Point
H146 : TS L G H F
H145 : TS M G H F
H144 : TS F G H M
H143 : TS K G H M
H142 : Col G H H
H141 : eq H H
H140 : OS F K G H
H139 : TP G H F K
H138 : Par G H F K
H137 : Par F K G H
H136 : OS L M G H
H135 : TP G H L M
H134 : Par G H L M
H133 : TS A B D C
H132 : nCol B D A
H131 : Col B D O
H130 : Col B O D
H129 : CongA F K M J E N
H128 : CongA F K M F K H
H127 : CongA F K M F K M
H126 : nCol F K M
H125 : Out K F F
H124 : neq K F
H123 : eq F F
H122 : Out K M H
H121 : Out K H M
H120 : neq K H
H119 : CongA F K H J E N
H118 : CongA F K H H K F
H117 : nCol F K H
H116 : PG F K M L
H115 : Par F L K M
H114 : Par L F M K
H113 : Par M K L F
H112 : neq L F
H111 : nCol F L M
H110 : Col G F L
H109 : Col G L F
H108 : Par M K G F
H107 : Par M K F G
H106 : Par M K G L
H105 : Par G L M K
H104 : Par G L K M
H103 : Col H M K
H102 : Par F G M K
H101 : neq M K
H100 : neq K M
H99 : Col H K M
H98 : Col K H M
H97 : Par F G H K
H96 : Par G L H M
H95 : Par F G K H
H94 : Par F K M L
H93 : Par F K L M
H92 : Par L M G H
H91 : Par M L G H
H90 : Par F K G H
H89 : Col L M M
H88 : Col G H H
H87 : Col F K K
H86 : eq M M
H85 : eq H H
H84 : eq K K
H83 : neq L M
H82 : nCol H M L
H81 : Par G H M L
H80 : neq G H
H79 : nCol G H M
H78 : neq F K
H77 : BetS K H M
H76 : Out H G G
H75 : neq H G
H74 : eq G G
H73 : RT K H G G H M
H72 : RT G H M K H G
H71 : CongA F K H G H M
H70 : CongA F K H H K F
H69 : nCol F K H
H68 : nCol H K F
H67 : CongA G H M H K F
H66 : RT F K H K H G
H65 : OS F G K H
H64 : TP K H F G
H63 : Par K H F G
H62 : Par F G K H
H61 : Cong K s H K
H60 : BetS H K s
s : Point
H59 : neq H K
H58 : Par K F H G
H57 : Par F K H G
H56 : CongA H K F G H M
H55 : CongA J E N G H M
H54 : BetS B e C
H53 : TS M G H K
H52 : Midpoint B e C
H51 : EF D B e C G H M L
H50 : CongA G H M J E N
H49 : PG G H M L
M,L,e : Point
H48 : nCol G H K
H47 : nCol H G K
H46 : nCol K H G
H45 : Par F K H G
H44 : Triangle D B C
H43 : nCol D B C
H42 : OS S F K H
H41 : CongA H K F J E N
H40 : EF A B m D F K H G
H39 : PG F K H G
F,G : Point
H38 : nCol S K H
H37 : nCol H K S
H36 : neq H K
H35 : neq K H
H34 : Col R K K
H33 : eq K K
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (Out K R M) by (conclude_def Out ).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (Col R K K) by (conclude_def Col ).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (neq H K) by (conclude lemma_inequalitysymmetric).
assert (nCol H K S) by (conclude lemma_NChelper).
assert (nCol S K H) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F G, (PG F K H G /\\ EF A B m D F K H G /\\ CongA H K F J E N /\\ OS S F K H)) by (conclude proposition_42B);destruct Tf as [F[G]];spliter.
assert (nCol D B C) by (forward_using lemma_NCorder).
assert (Triangle D B C) by (conclude_def Triangle ).
assert (Par F K H G) by (conclude_def PG ).
assert (nCol K H G) by (forward_using lemma_parallelNC).
assert (nCol H G K) by (forward_using lemma_NCorder).
assert (nCol G H K) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists M L e, (PG G H M L /\\ CongA G H M J E N /\\ EF D B e C G H M L /\\ Midpoint B e C /\\ TS M G H K)) by (conclude proposition_44);destruct Tf as [M[L[e]]];spliter.
assert (BetS B e C) by (conclude_def Midpoint ).
assert (CongA J E N G H M) by (conclude lemma_equalanglessymmetric).
assert (CongA H K F G H M) by (conclude lemma_equalanglestransitive).
assert (Par F K H G) by (conclude_def PG ).
assert (Par K F H G) by (forward_using lemma_parallelflip).
assert (neq H K) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists s, (BetS H K s /\\ Cong K s H K)) by (conclude lemma_extension);destruct Tf as [s];spliter.
assert (Par F G K H) by (conclude_def PG ).
assert (Par K H F G) by (conclude lemma_parallelsymmetric).
assert (TP K H F G) by (conclude lemma_paralleldef2B).
assert (OS F G K H) by (conclude_def TP ).
assert (RT F K H K H G) by (conclude proposition_29C).
assert (CongA G H M H K F) by (conclude lemma_equalanglessymmetric).
assert (nCol H K F) by (conclude lemma_equalanglesNC).
assert (nCol F K H) by (forward_using lemma_NCorder).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H G H M) by (conclude lemma_equalanglestransitive).
assert (RT G H M K H G) by (conclude lemma_RTcongruence).
assert (RT K H G G H M) by (conclude lemma_RTsymmetric).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (neq H G) by (forward_using lemma_NCdistinct).
assert (Out H G G) by (conclude lemma_ray4).
assert (BetS K H M) by (conclude proposition_14).
assert (neq F K) by (forward_using lemma_NCdistinct).
assert (nCol G H M) by (conclude lemma_equalanglesNC).
assert (neq G H) by (forward_using lemma_NCdistinct).
assert (Par G H M L) by (conclude_def PG ).
assert (nCol H M L) by (forward_using lemma_parallelNC).
assert (neq L M) by (forward_using lemma_NCdistinct).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (eq H H) by (conclude cn_equalityreflexive).
assert (eq M M) by (conclude cn_equalityreflexive).
assert (Col F K K) by (conclude_def Col ).
assert (Col G H H) by (conclude_def Col ).
assert (Col L M M) by (conclude_def Col ).
assert (Par F K G H) by (forward_using lemma_parallelflip).
assert (Par M L G H) by (conclude lemma_parallelsymmetric).
assert (Par L M G H) by (forward_using lemma_parallelflip).
assert (Par F K L M) by (conclude proposition_30).
assert (Par F K M L) by (forward_using lemma_parallelflip).
assert (Par F G K H) by (conclude_def PG ).
assert (Par G L H M) by (conclude_def PG ).
assert (Par F G H K) by (forward_using lemma_parallelflip).
assert (Col K H M) by (conclude_def Col ).
assert (Col H K M) by (forward_using lemma_collinearorder).
assert (neq K M) by (forward_using lemma_betweennotequal).
assert (neq M K) by (conclude lemma_inequalitysymmetric).
assert (Par F G M K) by (conclude lemma_collinearparallel).
assert (Col H M K) by (forward_using lemma_collinearorder).
assert (Par G L K M) by (conclude lemma_collinearparallel).
assert (Par G L M K) by (forward_using lemma_parallelflip).
assert (Par M K G L) by (conclude lemma_parallelsymmetric).
assert (Par M K F G) by (conclude lemma_parallelsymmetric).
assert (Par M K G F) by (forward_using lemma_parallelflip).
assert (Col G L F) by (conclude lemma_Playfair).
assert (Col G F L) by (forward_using lemma_collinearorder).
assert (nCol F L M) by (forward_using lemma_parallelNC).
assert (neq L F) by (forward_using lemma_NCdistinct).
assert (Par M K L F) by (conclude lemma_collinearparallel).
assert (Par L F M K) by (conclude lemma_parallelsymmetric).
assert (Par F L K M) by (forward_using lemma_parallelflip).
assert (PG F K M L) by (conclude_def PG ).
assert (nCol F K H) by (forward_using lemma_parallelNC).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H J E N) by (conclude lemma_equalanglestransitive).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (Out K H M) by (conclude lemma_ray4).
assert (Out K M H) by (conclude lemma_ray5).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (neq K F) by (forward_using lemma_NCdistinct).
assert (Out K F F) by (conclude lemma_ray4).
assert (nCol F K M) by (forward_using lemma_parallelNC).
assert (CongA F K M F K M) by (conclude lemma_equalanglesreflexive).
assert (CongA F K M F K H) by (conclude lemma_equalangleshelper).
assert (CongA F K M J E N) by (conclude lemma_equalanglestransitive).
assert (Col B O D) by (conclude_def Col ).
assert (Col B D O) by (forward_using lemma_collinearorder).
assert (nCol B D A) by (forward_using lemma_NCorder).
assert (TS A B D C) by (conclude_def TS ).
assert (Par G H L M) by (forward_using lemma_parallelflip).
assert (TP G H L M) by (conclude lemma_paralleldef2B).
assert (OS L M G H) by (conclude_def TP ).
assert (Par F K G H) by (forward_using lemma_parallelflip).
assert (Par G H F K) by (conclude lemma_parallelsymmetric).
assert (TP G H F K) by (conclude lemma_paralleldef2B).
assert (OS F K G H) by (conclude_def TP ).
assert (eq H H) by (conclude cn_equalityreflexive).
assert (Col G H H) by (conclude_def Col ).
assert (TS K G H M) by (conclude_def TS ).
assert (TS F G H M) by (conclude lemma_planeseparation).
assert (TS M G H F) by (conclude lemma_oppositesidesymmetric).
assert (TS L G H F) by (conclude lemma_planeseparation).
let Tf:=fresh in assert (Tf:exists t, (BetS L t F /\\ Col G H t /\\ nCol G H L)) by (conclude_def TS );destruct Tf as [t];spliter.
assert (Col F L G) by (forward_using lemma_collinearorder).
assert (Col L t F) by (conclude_def Col ).
assert (Col F L t) by (forward_using lemma_collinearorder).
assert (neq F L) by (forward_using lemma_NCdistinct).
assert (Col L G t) by (conclude lemma_collinear4).
assert (Col t G L) by (forward_using lemma_collinearorder).
assert (Col t G H) by (forward_using lemma_collinearorder).
assert (~ neq t G).
assert (BetS L G F) by (conclude cn_equalitysub).
assert (BetS F G L) by (conclude axiom_betweennesssymmetry).
let Tf:=fresh in assert (Tf:exists j, (BetS F j M /\\ BetS K j L)) by (conclude lemma_diagonalsmeet);destruct Tf as [j];spliter.
assert (EF A B C D F K M L) by (conclude axiom_paste4).
assert (EF F K M L A B C D) by (conclude axiom_EFsymmetric).
assert (BetS P K M) by (conclude lemma_3_7b).
assert (Out K R M) by (conclude_def Out ).

*****
H165 : Out K R M
H164 : BetS P K M
H163 : EF F K M L A B C D
H162 : EF A B C D F K M L
H161 : BetS K j L
H160 : BetS F j M
j : Point
H159 : BetS F G L
H158 : BetS L G F
H157 : not (neq t G)
H156 : Col t G H
H155 : Col t G L
H154 : Col L G t
H153 : neq F L
H152 : Col F L t
H151 : Col L t F
H150 : Col F L G
H149 : nCol G H L
H148 : Col G H t
H147 : BetS L t F
t : Point
H146 : TS L G H F
H145 : TS M G H F
H144 : TS F G H M
H143 : TS K G H M
H142 : Col G H H
H141 : eq H H
H140 : OS F K G H
H139 : TP G H F K
H138 : Par G H F K
H137 : Par F K G H
H136 : OS L M G H
H135 : TP G H L M
H134 : Par G H L M
H133 : TS A B D C
H132 : nCol B D A
H131 : Col B D O
H130 : Col B O D
H129 : CongA F K M J E N
H128 : CongA F K M F K H
H127 : CongA F K M F K M
H126 : nCol F K M
H125 : Out K F F
H124 : neq K F
H123 : eq F F
H122 : Out K M H
H121 : Out K H M
H120 : neq K H
H119 : CongA F K H J E N
H118 : CongA F K H H K F
H117 : nCol F K H
H116 : PG F K M L
H115 : Par F L K M
H114 : Par L F M K
H113 : Par M K L F
H112 : neq L F
H111 : nCol F L M
H110 : Col G F L
H109 : Col G L F
H108 : Par M K G F
H107 : Par M K F G
H106 : Par M K G L
H105 : Par G L M K
H104 : Par G L K M
H103 : Col H M K
H102 : Par F G M K
H101 : neq M K
H100 : neq K M
H99 : Col H K M
H98 : Col K H M
H97 : Par F G H K
H96 : Par G L H M
H95 : Par F G K H
H94 : Par F K M L
H93 : Par F K L M
H92 : Par L M G H
H91 : Par M L G H
H90 : Par F K G H
H89 : Col L M M
H88 : Col G H H
H87 : Col F K K
H86 : eq M M
H85 : eq H H
H84 : eq K K
H83 : neq L M
H82 : nCol H M L
H81 : Par G H M L
H80 : neq G H
H79 : nCol G H M
H78 : neq F K
H77 : BetS K H M
H76 : Out H G G
H75 : neq H G
H74 : eq G G
H73 : RT K H G G H M
H72 : RT G H M K H G
H71 : CongA F K H G H M
H70 : CongA F K H H K F
H69 : nCol F K H
H68 : nCol H K F
H67 : CongA G H M H K F
H66 : RT F K H K H G
H65 : OS F G K H
H64 : TP K H F G
H63 : Par K H F G
H62 : Par F G K H
H61 : Cong K s H K
H60 : BetS H K s
s : Point
H59 : neq H K
H58 : Par K F H G
H57 : Par F K H G
H56 : CongA H K F G H M
H55 : CongA J E N G H M
H54 : BetS B e C
H53 : TS M G H K
H52 : Midpoint B e C
H51 : EF D B e C G H M L
H50 : CongA G H M J E N
H49 : PG G H M L
M,L,e : Point
H48 : nCol G H K
H47 : nCol H G K
H46 : nCol K H G
H45 : Par F K H G
H44 : Triangle D B C
H43 : nCol D B C
H42 : OS S F K H
H41 : CongA H K F J E N
H40 : EF A B m D F K H G
H39 : PG F K H G
F,G : Point
H38 : nCol S K H
H37 : nCol H K S
H36 : neq H K
H35 : neq K H
H34 : Col R K K
H33 : eq K K
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (OS F S K H) by (forward_using lemma_samesidesymmetric).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (Col R K K) by (conclude_def Col ).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (neq H K) by (conclude lemma_inequalitysymmetric).
assert (nCol H K S) by (conclude lemma_NChelper).
assert (nCol S K H) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F G, (PG F K H G /\\ EF A B m D F K H G /\\ CongA H K F J E N /\\ OS S F K H)) by (conclude proposition_42B);destruct Tf as [F[G]];spliter.
assert (nCol D B C) by (forward_using lemma_NCorder).
assert (Triangle D B C) by (conclude_def Triangle ).
assert (Par F K H G) by (conclude_def PG ).
assert (nCol K H G) by (forward_using lemma_parallelNC).
assert (nCol H G K) by (forward_using lemma_NCorder).
assert (nCol G H K) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists M L e, (PG G H M L /\\ CongA G H M J E N /\\ EF D B e C G H M L /\\ Midpoint B e C /\\ TS M G H K)) by (conclude proposition_44);destruct Tf as [M[L[e]]];spliter.
assert (BetS B e C) by (conclude_def Midpoint ).
assert (CongA J E N G H M) by (conclude lemma_equalanglessymmetric).
assert (CongA H K F G H M) by (conclude lemma_equalanglestransitive).
assert (Par F K H G) by (conclude_def PG ).
assert (Par K F H G) by (forward_using lemma_parallelflip).
assert (neq H K) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists s, (BetS H K s /\\ Cong K s H K)) by (conclude lemma_extension);destruct Tf as [s];spliter.
assert (Par F G K H) by (conclude_def PG ).
assert (Par K H F G) by (conclude lemma_parallelsymmetric).
assert (TP K H F G) by (conclude lemma_paralleldef2B).
assert (OS F G K H) by (conclude_def TP ).
assert (RT F K H K H G) by (conclude proposition_29C).
assert (CongA G H M H K F) by (conclude lemma_equalanglessymmetric).
assert (nCol H K F) by (conclude lemma_equalanglesNC).
assert (nCol F K H) by (forward_using lemma_NCorder).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H G H M) by (conclude lemma_equalanglestransitive).
assert (RT G H M K H G) by (conclude lemma_RTcongruence).
assert (RT K H G G H M) by (conclude lemma_RTsymmetric).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (neq H G) by (forward_using lemma_NCdistinct).
assert (Out H G G) by (conclude lemma_ray4).
assert (BetS K H M) by (conclude proposition_14).
assert (neq F K) by (forward_using lemma_NCdistinct).
assert (nCol G H M) by (conclude lemma_equalanglesNC).
assert (neq G H) by (forward_using lemma_NCdistinct).
assert (Par G H M L) by (conclude_def PG ).
assert (nCol H M L) by (forward_using lemma_parallelNC).
assert (neq L M) by (forward_using lemma_NCdistinct).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (eq H H) by (conclude cn_equalityreflexive).
assert (eq M M) by (conclude cn_equalityreflexive).
assert (Col F K K) by (conclude_def Col ).
assert (Col G H H) by (conclude_def Col ).
assert (Col L M M) by (conclude_def Col ).
assert (Par F K G H) by (forward_using lemma_parallelflip).
assert (Par M L G H) by (conclude lemma_parallelsymmetric).
assert (Par L M G H) by (forward_using lemma_parallelflip).
assert (Par F K L M) by (conclude proposition_30).
assert (Par F K M L) by (forward_using lemma_parallelflip).
assert (Par F G K H) by (conclude_def PG ).
assert (Par G L H M) by (conclude_def PG ).
assert (Par F G H K) by (forward_using lemma_parallelflip).
assert (Col K H M) by (conclude_def Col ).
assert (Col H K M) by (forward_using lemma_collinearorder).
assert (neq K M) by (forward_using lemma_betweennotequal).
assert (neq M K) by (conclude lemma_inequalitysymmetric).
assert (Par F G M K) by (conclude lemma_collinearparallel).
assert (Col H M K) by (forward_using lemma_collinearorder).
assert (Par G L K M) by (conclude lemma_collinearparallel).
assert (Par G L M K) by (forward_using lemma_parallelflip).
assert (Par M K G L) by (conclude lemma_parallelsymmetric).
assert (Par M K F G) by (conclude lemma_parallelsymmetric).
assert (Par M K G F) by (forward_using lemma_parallelflip).
assert (Col G L F) by (conclude lemma_Playfair).
assert (Col G F L) by (forward_using lemma_collinearorder).
assert (nCol F L M) by (forward_using lemma_parallelNC).
assert (neq L F) by (forward_using lemma_NCdistinct).
assert (Par M K L F) by (conclude lemma_collinearparallel).
assert (Par L F M K) by (conclude lemma_parallelsymmetric).
assert (Par F L K M) by (forward_using lemma_parallelflip).
assert (PG F K M L) by (conclude_def PG ).
assert (nCol F K H) by (forward_using lemma_parallelNC).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H J E N) by (conclude lemma_equalanglestransitive).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (Out K H M) by (conclude lemma_ray4).
assert (Out K M H) by (conclude lemma_ray5).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (neq K F) by (forward_using lemma_NCdistinct).
assert (Out K F F) by (conclude lemma_ray4).
assert (nCol F K M) by (forward_using lemma_parallelNC).
assert (CongA F K M F K M) by (conclude lemma_equalanglesreflexive).
assert (CongA F K M F K H) by (conclude lemma_equalangleshelper).
assert (CongA F K M J E N) by (conclude lemma_equalanglestransitive).
assert (Col B O D) by (conclude_def Col ).
assert (Col B D O) by (forward_using lemma_collinearorder).
assert (nCol B D A) by (forward_using lemma_NCorder).
assert (TS A B D C) by (conclude_def TS ).
assert (Par G H L M) by (forward_using lemma_parallelflip).
assert (TP G H L M) by (conclude lemma_paralleldef2B).
assert (OS L M G H) by (conclude_def TP ).
assert (Par F K G H) by (forward_using lemma_parallelflip).
assert (Par G H F K) by (conclude lemma_parallelsymmetric).
assert (TP G H F K) by (conclude lemma_paralleldef2B).
assert (OS F K G H) by (conclude_def TP ).
assert (eq H H) by (conclude cn_equalityreflexive).
assert (Col G H H) by (conclude_def Col ).
assert (TS K G H M) by (conclude_def TS ).
assert (TS F G H M) by (conclude lemma_planeseparation).
assert (TS M G H F) by (conclude lemma_oppositesidesymmetric).
assert (TS L G H F) by (conclude lemma_planeseparation).
let Tf:=fresh in assert (Tf:exists t, (BetS L t F /\\ Col G H t /\\ nCol G H L)) by (conclude_def TS );destruct Tf as [t];spliter.
assert (Col F L G) by (forward_using lemma_collinearorder).
assert (Col L t F) by (conclude_def Col ).
assert (Col F L t) by (forward_using lemma_collinearorder).
assert (neq F L) by (forward_using lemma_NCdistinct).
assert (Col L G t) by (conclude lemma_collinear4).
assert (Col t G L) by (forward_using lemma_collinearorder).
assert (Col t G H) by (forward_using lemma_collinearorder).
assert (~ neq t G).
assert (BetS L G F) by (conclude cn_equalitysub).
assert (BetS F G L) by (conclude axiom_betweennesssymmetry).
let Tf:=fresh in assert (Tf:exists j, (BetS F j M /\\ BetS K j L)) by (conclude lemma_diagonalsmeet);destruct Tf as [j];spliter.
assert (EF A B C D F K M L) by (conclude axiom_paste4).
assert (EF F K M L A B C D) by (conclude axiom_EFsymmetric).
assert (BetS P K M) by (conclude lemma_3_7b).
assert (Out K R M) by (conclude_def Out ).
assert (OS F S K H) by (forward_using lemma_samesidesymmetric).

*****
H166 : OS F S K H
H165 : Out K R M
H164 : BetS P K M
H163 : EF F K M L A B C D
H162 : EF A B C D F K M L
H161 : BetS K j L
H160 : BetS F j M
j : Point
H159 : BetS F G L
H158 : BetS L G F
H157 : not (neq t G)
H156 : Col t G H
H155 : Col t G L
H154 : Col L G t
H153 : neq F L
H152 : Col F L t
H151 : Col L t F
H150 : Col F L G
H149 : nCol G H L
H148 : Col G H t
H147 : BetS L t F
t : Point
H146 : TS L G H F
H145 : TS M G H F
H144 : TS F G H M
H143 : TS K G H M
H142 : Col G H H
H141 : eq H H
H140 : OS F K G H
H139 : TP G H F K
H138 : Par G H F K
H137 : Par F K G H
H136 : OS L M G H
H135 : TP G H L M
H134 : Par G H L M
H133 : TS A B D C
H132 : nCol B D A
H131 : Col B D O
H130 : Col B O D
H129 : CongA F K M J E N
H128 : CongA F K M F K H
H127 : CongA F K M F K M
H126 : nCol F K M
H125 : Out K F F
H124 : neq K F
H123 : eq F F
H122 : Out K M H
H121 : Out K H M
H120 : neq K H
H119 : CongA F K H J E N
H118 : CongA F K H H K F
H117 : nCol F K H
H116 : PG F K M L
H115 : Par F L K M
H114 : Par L F M K
H113 : Par M K L F
H112 : neq L F
H111 : nCol F L M
H110 : Col G F L
H109 : Col G L F
H108 : Par M K G F
H107 : Par M K F G
H106 : Par M K G L
H105 : Par G L M K
H104 : Par G L K M
H103 : Col H M K
H102 : Par F G M K
H101 : neq M K
H100 : neq K M
H99 : Col H K M
H98 : Col K H M
H97 : Par F G H K
H96 : Par G L H M
H95 : Par F G K H
H94 : Par F K M L
H93 : Par F K L M
H92 : Par L M G H
H91 : Par M L G H
H90 : Par F K G H
H89 : Col L M M
H88 : Col G H H
H87 : Col F K K
H86 : eq M M
H85 : eq H H
H84 : eq K K
H83 : neq L M
H82 : nCol H M L
H81 : Par G H M L
H80 : neq G H
H79 : nCol G H M
H78 : neq F K
H77 : BetS K H M
H76 : Out H G G
H75 : neq H G
H74 : eq G G
H73 : RT K H G G H M
H72 : RT G H M K H G
H71 : CongA F K H G H M
H70 : CongA F K H H K F
H69 : nCol F K H
H68 : nCol H K F
H67 : CongA G H M H K F
H66 : RT F K H K H G
H65 : OS F G K H
H64 : TP K H F G
H63 : Par K H F G
H62 : Par F G K H
H61 : Cong K s H K
H60 : BetS H K s
s : Point
H59 : neq H K
H58 : Par K F H G
H57 : Par F K H G
H56 : CongA H K F G H M
H55 : CongA J E N G H M
H54 : BetS B e C
H53 : TS M G H K
H52 : Midpoint B e C
H51 : EF D B e C G H M L
H50 : CongA G H M J E N
H49 : PG G H M L
M,L,e : Point
H48 : nCol G H K
H47 : nCol H G K
H46 : nCol K H G
H45 : Par F K H G
H44 : Triangle D B C
H43 : nCol D B C
H42 : OS S F K H
H41 : CongA H K F J E N
H40 : EF A B m D F K H G
H39 : PG F K H G
F,G : Point
H38 : nCol S K H
H37 : nCol H K S
H36 : neq H K
H35 : neq K H
H34 : Col R K K
H33 : eq K K
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (Col K H M) by (conclude_def Col ).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (Col R K K) by (conclude_def Col ).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (neq H K) by (conclude lemma_inequalitysymmetric).
assert (nCol H K S) by (conclude lemma_NChelper).
assert (nCol S K H) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F G, (PG F K H G /\\ EF A B m D F K H G /\\ CongA H K F J E N /\\ OS S F K H)) by (conclude proposition_42B);destruct Tf as [F[G]];spliter.
assert (nCol D B C) by (forward_using lemma_NCorder).
assert (Triangle D B C) by (conclude_def Triangle ).
assert (Par F K H G) by (conclude_def PG ).
assert (nCol K H G) by (forward_using lemma_parallelNC).
assert (nCol H G K) by (forward_using lemma_NCorder).
assert (nCol G H K) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists M L e, (PG G H M L /\\ CongA G H M J E N /\\ EF D B e C G H M L /\\ Midpoint B e C /\\ TS M G H K)) by (conclude proposition_44);destruct Tf as [M[L[e]]];spliter.
assert (BetS B e C) by (conclude_def Midpoint ).
assert (CongA J E N G H M) by (conclude lemma_equalanglessymmetric).
assert (CongA H K F G H M) by (conclude lemma_equalanglestransitive).
assert (Par F K H G) by (conclude_def PG ).
assert (Par K F H G) by (forward_using lemma_parallelflip).
assert (neq H K) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists s, (BetS H K s /\\ Cong K s H K)) by (conclude lemma_extension);destruct Tf as [s];spliter.
assert (Par F G K H) by (conclude_def PG ).
assert (Par K H F G) by (conclude lemma_parallelsymmetric).
assert (TP K H F G) by (conclude lemma_paralleldef2B).
assert (OS F G K H) by (conclude_def TP ).
assert (RT F K H K H G) by (conclude proposition_29C).
assert (CongA G H M H K F) by (conclude lemma_equalanglessymmetric).
assert (nCol H K F) by (conclude lemma_equalanglesNC).
assert (nCol F K H) by (forward_using lemma_NCorder).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H G H M) by (conclude lemma_equalanglestransitive).
assert (RT G H M K H G) by (conclude lemma_RTcongruence).
assert (RT K H G G H M) by (conclude lemma_RTsymmetric).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (neq H G) by (forward_using lemma_NCdistinct).
assert (Out H G G) by (conclude lemma_ray4).
assert (BetS K H M) by (conclude proposition_14).
assert (neq F K) by (forward_using lemma_NCdistinct).
assert (nCol G H M) by (conclude lemma_equalanglesNC).
assert (neq G H) by (forward_using lemma_NCdistinct).
assert (Par G H M L) by (conclude_def PG ).
assert (nCol H M L) by (forward_using lemma_parallelNC).
assert (neq L M) by (forward_using lemma_NCdistinct).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (eq H H) by (conclude cn_equalityreflexive).
assert (eq M M) by (conclude cn_equalityreflexive).
assert (Col F K K) by (conclude_def Col ).
assert (Col G H H) by (conclude_def Col ).
assert (Col L M M) by (conclude_def Col ).
assert (Par F K G H) by (forward_using lemma_parallelflip).
assert (Par M L G H) by (conclude lemma_parallelsymmetric).
assert (Par L M G H) by (forward_using lemma_parallelflip).
assert (Par F K L M) by (conclude proposition_30).
assert (Par F K M L) by (forward_using lemma_parallelflip).
assert (Par F G K H) by (conclude_def PG ).
assert (Par G L H M) by (conclude_def PG ).
assert (Par F G H K) by (forward_using lemma_parallelflip).
assert (Col K H M) by (conclude_def Col ).
assert (Col H K M) by (forward_using lemma_collinearorder).
assert (neq K M) by (forward_using lemma_betweennotequal).
assert (neq M K) by (conclude lemma_inequalitysymmetric).
assert (Par F G M K) by (conclude lemma_collinearparallel).
assert (Col H M K) by (forward_using lemma_collinearorder).
assert (Par G L K M) by (conclude lemma_collinearparallel).
assert (Par G L M K) by (forward_using lemma_parallelflip).
assert (Par M K G L) by (conclude lemma_parallelsymmetric).
assert (Par M K F G) by (conclude lemma_parallelsymmetric).
assert (Par M K G F) by (forward_using lemma_parallelflip).
assert (Col G L F) by (conclude lemma_Playfair).
assert (Col G F L) by (forward_using lemma_collinearorder).
assert (nCol F L M) by (forward_using lemma_parallelNC).
assert (neq L F) by (forward_using lemma_NCdistinct).
assert (Par M K L F) by (conclude lemma_collinearparallel).
assert (Par L F M K) by (conclude lemma_parallelsymmetric).
assert (Par F L K M) by (forward_using lemma_parallelflip).
assert (PG F K M L) by (conclude_def PG ).
assert (nCol F K H) by (forward_using lemma_parallelNC).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H J E N) by (conclude lemma_equalanglestransitive).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (Out K H M) by (conclude lemma_ray4).
assert (Out K M H) by (conclude lemma_ray5).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (neq K F) by (forward_using lemma_NCdistinct).
assert (Out K F F) by (conclude lemma_ray4).
assert (nCol F K M) by (forward_using lemma_parallelNC).
assert (CongA F K M F K M) by (conclude lemma_equalanglesreflexive).
assert (CongA F K M F K H) by (conclude lemma_equalangleshelper).
assert (CongA F K M J E N) by (conclude lemma_equalanglestransitive).
assert (Col B O D) by (conclude_def Col ).
assert (Col B D O) by (forward_using lemma_collinearorder).
assert (nCol B D A) by (forward_using lemma_NCorder).
assert (TS A B D C) by (conclude_def TS ).
assert (Par G H L M) by (forward_using lemma_parallelflip).
assert (TP G H L M) by (conclude lemma_paralleldef2B).
assert (OS L M G H) by (conclude_def TP ).
assert (Par F K G H) by (forward_using lemma_parallelflip).
assert (Par G H F K) by (conclude lemma_parallelsymmetric).
assert (TP G H F K) by (conclude lemma_paralleldef2B).
assert (OS F K G H) by (conclude_def TP ).
assert (eq H H) by (conclude cn_equalityreflexive).
assert (Col G H H) by (conclude_def Col ).
assert (TS K G H M) by (conclude_def TS ).
assert (TS F G H M) by (conclude lemma_planeseparation).
assert (TS M G H F) by (conclude lemma_oppositesidesymmetric).
assert (TS L G H F) by (conclude lemma_planeseparation).
let Tf:=fresh in assert (Tf:exists t, (BetS L t F /\\ Col G H t /\\ nCol G H L)) by (conclude_def TS );destruct Tf as [t];spliter.
assert (Col F L G) by (forward_using lemma_collinearorder).
assert (Col L t F) by (conclude_def Col ).
assert (Col F L t) by (forward_using lemma_collinearorder).
assert (neq F L) by (forward_using lemma_NCdistinct).
assert (Col L G t) by (conclude lemma_collinear4).
assert (Col t G L) by (forward_using lemma_collinearorder).
assert (Col t G H) by (forward_using lemma_collinearorder).
assert (~ neq t G).
assert (BetS L G F) by (conclude cn_equalitysub).
assert (BetS F G L) by (conclude axiom_betweennesssymmetry).
let Tf:=fresh in assert (Tf:exists j, (BetS F j M /\\ BetS K j L)) by (conclude lemma_diagonalsmeet);destruct Tf as [j];spliter.
assert (EF A B C D F K M L) by (conclude axiom_paste4).
assert (EF F K M L A B C D) by (conclude axiom_EFsymmetric).
assert (BetS P K M) by (conclude lemma_3_7b).
assert (Out K R M) by (conclude_def Out ).
assert (OS F S K H) by (forward_using lemma_samesidesymmetric).
assert (Col K H M) by (conclude_def Col ).

*****
H167 : Col K H M
H166 : OS F S K H
H165 : Out K R M
H164 : BetS P K M
H163 : EF F K M L A B C D
H162 : EF A B C D F K M L
H161 : BetS K j L
H160 : BetS F j M
j : Point
H159 : BetS F G L
H158 : BetS L G F
H157 : not (neq t G)
H156 : Col t G H
H155 : Col t G L
H154 : Col L G t
H153 : neq F L
H152 : Col F L t
H151 : Col L t F
H150 : Col F L G
H149 : nCol G H L
H148 : Col G H t
H147 : BetS L t F
t : Point
H146 : TS L G H F
H145 : TS M G H F
H144 : TS F G H M
H143 : TS K G H M
H142 : Col G H H
H141 : eq H H
H140 : OS F K G H
H139 : TP G H F K
H138 : Par G H F K
H137 : Par F K G H
H136 : OS L M G H
H135 : TP G H L M
H134 : Par G H L M
H133 : TS A B D C
H132 : nCol B D A
H131 : Col B D O
H130 : Col B O D
H129 : CongA F K M J E N
H128 : CongA F K M F K H
H127 : CongA F K M F K M
H126 : nCol F K M
H125 : Out K F F
H124 : neq K F
H123 : eq F F
H122 : Out K M H
H121 : Out K H M
H120 : neq K H
H119 : CongA F K H J E N
H118 : CongA F K H H K F
H117 : nCol F K H
H116 : PG F K M L
H115 : Par F L K M
H114 : Par L F M K
H113 : Par M K L F
H112 : neq L F
H111 : nCol F L M
H110 : Col G F L
H109 : Col G L F
H108 : Par M K G F
H107 : Par M K F G
H106 : Par M K G L
H105 : Par G L M K
H104 : Par G L K M
H103 : Col H M K
H102 : Par F G M K
H101 : neq M K
H100 : neq K M
H99 : Col H K M
H98 : Col K H M
H97 : Par F G H K
H96 : Par G L H M
H95 : Par F G K H
H94 : Par F K M L
H93 : Par F K L M
H92 : Par L M G H
H91 : Par M L G H
H90 : Par F K G H
H89 : Col L M M
H88 : Col G H H
H87 : Col F K K
H86 : eq M M
H85 : eq H H
H84 : eq K K
H83 : neq L M
H82 : nCol H M L
H81 : Par G H M L
H80 : neq G H
H79 : nCol G H M
H78 : neq F K
H77 : BetS K H M
H76 : Out H G G
H75 : neq H G
H74 : eq G G
H73 : RT K H G G H M
H72 : RT G H M K H G
H71 : CongA F K H G H M
H70 : CongA F K H H K F
H69 : nCol F K H
H68 : nCol H K F
H67 : CongA G H M H K F
H66 : RT F K H K H G
H65 : OS F G K H
H64 : TP K H F G
H63 : Par K H F G
H62 : Par F G K H
H61 : Cong K s H K
H60 : BetS H K s
s : Point
H59 : neq H K
H58 : Par K F H G
H57 : Par F K H G
H56 : CongA H K F G H M
H55 : CongA J E N G H M
H54 : BetS B e C
H53 : TS M G H K
H52 : Midpoint B e C
H51 : EF D B e C G H M L
H50 : CongA G H M J E N
H49 : PG G H M L
M,L,e : Point
H48 : nCol G H K
H47 : nCol H G K
H46 : nCol K H G
H45 : Par F K H G
H44 : Triangle D B C
H43 : nCol D B C
H42 : OS S F K H
H41 : CongA H K F J E N
H40 : EF A B m D F K H G
H39 : PG F K H G
F,G : Point
H38 : nCol S K H
H37 : nCol H K S
H36 : neq H K
H35 : neq K H
H34 : Col R K K
H33 : eq K K
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
assert (OS F S K M) by (conclude lemma_samesidecollinear).
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (Col R K K) by (conclude_def Col ).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (neq H K) by (conclude lemma_inequalitysymmetric).
assert (nCol H K S) by (conclude lemma_NChelper).
assert (nCol S K H) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F G, (PG F K H G /\\ EF A B m D F K H G /\\ CongA H K F J E N /\\ OS S F K H)) by (conclude proposition_42B);destruct Tf as [F[G]];spliter.
assert (nCol D B C) by (forward_using lemma_NCorder).
assert (Triangle D B C) by (conclude_def Triangle ).
assert (Par F K H G) by (conclude_def PG ).
assert (nCol K H G) by (forward_using lemma_parallelNC).
assert (nCol H G K) by (forward_using lemma_NCorder).
assert (nCol G H K) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists M L e, (PG G H M L /\\ CongA G H M J E N /\\ EF D B e C G H M L /\\ Midpoint B e C /\\ TS M G H K)) by (conclude proposition_44);destruct Tf as [M[L[e]]];spliter.
assert (BetS B e C) by (conclude_def Midpoint ).
assert (CongA J E N G H M) by (conclude lemma_equalanglessymmetric).
assert (CongA H K F G H M) by (conclude lemma_equalanglestransitive).
assert (Par F K H G) by (conclude_def PG ).
assert (Par K F H G) by (forward_using lemma_parallelflip).
assert (neq H K) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists s, (BetS H K s /\\ Cong K s H K)) by (conclude lemma_extension);destruct Tf as [s];spliter.
assert (Par F G K H) by (conclude_def PG ).
assert (Par K H F G) by (conclude lemma_parallelsymmetric).
assert (TP K H F G) by (conclude lemma_paralleldef2B).
assert (OS F G K H) by (conclude_def TP ).
assert (RT F K H K H G) by (conclude proposition_29C).
assert (CongA G H M H K F) by (conclude lemma_equalanglessymmetric).
assert (nCol H K F) by (conclude lemma_equalanglesNC).
assert (nCol F K H) by (forward_using lemma_NCorder).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H G H M) by (conclude lemma_equalanglestransitive).
assert (RT G H M K H G) by (conclude lemma_RTcongruence).
assert (RT K H G G H M) by (conclude lemma_RTsymmetric).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (neq H G) by (forward_using lemma_NCdistinct).
assert (Out H G G) by (conclude lemma_ray4).
assert (BetS K H M) by (conclude proposition_14).
assert (neq F K) by (forward_using lemma_NCdistinct).
assert (nCol G H M) by (conclude lemma_equalanglesNC).
assert (neq G H) by (forward_using lemma_NCdistinct).
assert (Par G H M L) by (conclude_def PG ).
assert (nCol H M L) by (forward_using lemma_parallelNC).
assert (neq L M) by (forward_using lemma_NCdistinct).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (eq H H) by (conclude cn_equalityreflexive).
assert (eq M M) by (conclude cn_equalityreflexive).
assert (Col F K K) by (conclude_def Col ).
assert (Col G H H) by (conclude_def Col ).
assert (Col L M M) by (conclude_def Col ).
assert (Par F K G H) by (forward_using lemma_parallelflip).
assert (Par M L G H) by (conclude lemma_parallelsymmetric).
assert (Par L M G H) by (forward_using lemma_parallelflip).
assert (Par F K L M) by (conclude proposition_30).
assert (Par F K M L) by (forward_using lemma_parallelflip).
assert (Par F G K H) by (conclude_def PG ).
assert (Par G L H M) by (conclude_def PG ).
assert (Par F G H K) by (forward_using lemma_parallelflip).
assert (Col K H M) by (conclude_def Col ).
assert (Col H K M) by (forward_using lemma_collinearorder).
assert (neq K M) by (forward_using lemma_betweennotequal).
assert (neq M K) by (conclude lemma_inequalitysymmetric).
assert (Par F G M K) by (conclude lemma_collinearparallel).
assert (Col H M K) by (forward_using lemma_collinearorder).
assert (Par G L K M) by (conclude lemma_collinearparallel).
assert (Par G L M K) by (forward_using lemma_parallelflip).
assert (Par M K G L) by (conclude lemma_parallelsymmetric).
assert (Par M K F G) by (conclude lemma_parallelsymmetric).
assert (Par M K G F) by (forward_using lemma_parallelflip).
assert (Col G L F) by (conclude lemma_Playfair).
assert (Col G F L) by (forward_using lemma_collinearorder).
assert (nCol F L M) by (forward_using lemma_parallelNC).
assert (neq L F) by (forward_using lemma_NCdistinct).
assert (Par M K L F) by (conclude lemma_collinearparallel).
assert (Par L F M K) by (conclude lemma_parallelsymmetric).
assert (Par F L K M) by (forward_using lemma_parallelflip).
assert (PG F K M L) by (conclude_def PG ).
assert (nCol F K H) by (forward_using lemma_parallelNC).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H J E N) by (conclude lemma_equalanglestransitive).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (Out K H M) by (conclude lemma_ray4).
assert (Out K M H) by (conclude lemma_ray5).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (neq K F) by (forward_using lemma_NCdistinct).
assert (Out K F F) by (conclude lemma_ray4).
assert (nCol F K M) by (forward_using lemma_parallelNC).
assert (CongA F K M F K M) by (conclude lemma_equalanglesreflexive).
assert (CongA F K M F K H) by (conclude lemma_equalangleshelper).
assert (CongA F K M J E N) by (conclude lemma_equalanglestransitive).
assert (Col B O D) by (conclude_def Col ).
assert (Col B D O) by (forward_using lemma_collinearorder).
assert (nCol B D A) by (forward_using lemma_NCorder).
assert (TS A B D C) by (conclude_def TS ).
assert (Par G H L M) by (forward_using lemma_parallelflip).
assert (TP G H L M) by (conclude lemma_paralleldef2B).
assert (OS L M G H) by (conclude_def TP ).
assert (Par F K G H) by (forward_using lemma_parallelflip).
assert (Par G H F K) by (conclude lemma_parallelsymmetric).
assert (TP G H F K) by (conclude lemma_paralleldef2B).
assert (OS F K G H) by (conclude_def TP ).
assert (eq H H) by (conclude cn_equalityreflexive).
assert (Col G H H) by (conclude_def Col ).
assert (TS K G H M) by (conclude_def TS ).
assert (TS F G H M) by (conclude lemma_planeseparation).
assert (TS M G H F) by (conclude lemma_oppositesidesymmetric).
assert (TS L G H F) by (conclude lemma_planeseparation).
let Tf:=fresh in assert (Tf:exists t, (BetS L t F /\\ Col G H t /\\ nCol G H L)) by (conclude_def TS );destruct Tf as [t];spliter.
assert (Col F L G) by (forward_using lemma_collinearorder).
assert (Col L t F) by (conclude_def Col ).
assert (Col F L t) by (forward_using lemma_collinearorder).
assert (neq F L) by (forward_using lemma_NCdistinct).
assert (Col L G t) by (conclude lemma_collinear4).
assert (Col t G L) by (forward_using lemma_collinearorder).
assert (Col t G H) by (forward_using lemma_collinearorder).
assert (~ neq t G).
assert (BetS L G F) by (conclude cn_equalitysub).
assert (BetS F G L) by (conclude axiom_betweennesssymmetry).
let Tf:=fresh in assert (Tf:exists j, (BetS F j M /\\ BetS K j L)) by (conclude lemma_diagonalsmeet);destruct Tf as [j];spliter.
assert (EF A B C D F K M L) by (conclude axiom_paste4).
assert (EF F K M L A B C D) by (conclude axiom_EFsymmetric).
assert (BetS P K M) by (conclude lemma_3_7b).
assert (Out K R M) by (conclude_def Out ).
assert (OS F S K H) by (forward_using lemma_samesidesymmetric).
assert (Col K H M) by (conclude_def Col ).
assert (OS F S K M) by (conclude lemma_samesidecollinear).

*****
H168 : OS F S K M
H167 : Col K H M
H166 : OS F S K H
H165 : Out K R M
H164 : BetS P K M
H163 : EF F K M L A B C D
H162 : EF A B C D F K M L
H161 : BetS K j L
H160 : BetS F j M
j : Point
H159 : BetS F G L
H158 : BetS L G F
H157 : not (neq t G)
H156 : Col t G H
H155 : Col t G L
H154 : Col L G t
H153 : neq F L
H152 : Col F L t
H151 : Col L t F
H150 : Col F L G
H149 : nCol G H L
H148 : Col G H t
H147 : BetS L t F
t : Point
H146 : TS L G H F
H145 : TS M G H F
H144 : TS F G H M
H143 : TS K G H M
H142 : Col G H H
H141 : eq H H
H140 : OS F K G H
H139 : TP G H F K
H138 : Par G H F K
H137 : Par F K G H
H136 : OS L M G H
H135 : TP G H L M
H134 : Par G H L M
H133 : TS A B D C
H132 : nCol B D A
H131 : Col B D O
H130 : Col B O D
H129 : CongA F K M J E N
H128 : CongA F K M F K H
H127 : CongA F K M F K M
H126 : nCol F K M
H125 : Out K F F
H124 : neq K F
H123 : eq F F
H122 : Out K M H
H121 : Out K H M
H120 : neq K H
H119 : CongA F K H J E N
H118 : CongA F K H H K F
H117 : nCol F K H
H116 : PG F K M L
H115 : Par F L K M
H114 : Par L F M K
H113 : Par M K L F
H112 : neq L F
H111 : nCol F L M
H110 : Col G F L
H109 : Col G L F
H108 : Par M K G F
H107 : Par M K F G
H106 : Par M K G L
H105 : Par G L M K
H104 : Par G L K M
H103 : Col H M K
H102 : Par F G M K
H101 : neq M K
H100 : neq K M
H99 : Col H K M
H98 : Col K H M
H97 : Par F G H K
H96 : Par G L H M
H95 : Par F G K H
H94 : Par F K M L
H93 : Par F K L M
H92 : Par L M G H
H91 : Par M L G H
H90 : Par F K G H
H89 : Col L M M
H88 : Col G H H
H87 : Col F K K
H86 : eq M M
H85 : eq H H
H84 : eq K K
H83 : neq L M
H82 : nCol H M L
H81 : Par G H M L
H80 : neq G H
H79 : nCol G H M
H78 : neq F K
H77 : BetS K H M
H76 : Out H G G
H75 : neq H G
H74 : eq G G
H73 : RT K H G G H M
H72 : RT G H M K H G
H71 : CongA F K H G H M
H70 : CongA F K H H K F
H69 : nCol F K H
H68 : nCol H K F
H67 : CongA G H M H K F
H66 : RT F K H K H G
H65 : OS F G K H
H64 : TP K H F G
H63 : Par K H F G
H62 : Par F G K H
H61 : Cong K s H K
H60 : BetS H K s
s : Point
H59 : neq H K
H58 : Par K F H G
H57 : Par F K H G
H56 : CongA H K F G H M
H55 : CongA J E N G H M
H54 : BetS B e C
H53 : TS M G H K
H52 : Midpoint B e C
H51 : EF D B e C G H M L
H50 : CongA G H M J E N
H49 : PG G H M L
M,L,e : Point
H48 : nCol G H K
H47 : nCol H G K
H46 : nCol K H G
H45 : Par F K H G
H44 : Triangle D B C
H43 : nCol D B C
H42 : OS S F K H
H41 : CongA H K F J E N
H40 : EF A B m D F K H G
H39 : PG F K H G
F,G : Point
H38 : nCol S K H
H37 : nCol H K S
H36 : neq H K
H35 : neq K H
H34 : Col R K K
H33 : eq K K
H32 : nCol R K S
H31 : Col R K H
H30 : Col K H R
H29 : neq P K
H28 : Col P K R
H27 : Col P K H
H26 : BetS P K R
H25 : Cong K H m D
H24 : Cong B m m D
H23 : Cong K H B m
H22 : Cong P K B m
H21 : Midpoint P K H
H20 : Cong P K K H
H19 : Cong K H P K
H18 : BetS P K H
H : Point
H16 : neq P K
H15 : neq K P
H14 : Triangle A B D
H13 : Cong K P B m
H12 : BetS R K P
P : Point
H11 : neq B m
H10 : Midpoint B m D
H9 : Cong B m m D
H8 : Cong m B m D
H7 : BetS B m D
m : Point
H6 : neq B D
H5 : nCol K R S
H4 : neq R K
H3 : BetS B O D
H2 : BetS A O C
H1 : nCol C B D
H0 : nCol A B D
H17 : nCol J E N
A,B,C,D,E,J,K,N,O,R,S : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => ex (fun U : Point => and (PG X K Z U) (and (CongA X K Z J E N) (and (EF X K Z U A B C D) (and (Out K R Z) (OS X S K Z)))))))
+++++
close.
-----
Lemma proposition_45 : forall A B C D E J K N O R S, nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S -> exists X Z U, PG X K Z U /\\ CongA X K Z J E N /\\ EF X K Z U A B C D /\\ Out K R Z /\\ OS X S K Z.
Proof.
intros.
assert (neq B D) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists m, (BetS B m D /\\ Cong m B m D)) by (conclude proposition_10);destruct Tf as [m];spliter.
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Midpoint B m D) by (conclude_def Midpoint ).
assert (neq B m) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS R K P /\\ Cong K P B m)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Triangle A B D) by (conclude_def Triangle ).
assert (neq K P) by (forward_using lemma_betweennotequal).
assert (neq P K) by (conclude lemma_inequalitysymmetric).
rename_H H;let Tf:=fresh in assert (Tf:exists H, (BetS P K H /\\ Cong K H P K)) by (conclude lemma_extension);destruct Tf as [H];spliter.
assert (Cong P K K H) by (conclude lemma_congruencesymmetric).
assert (Midpoint P K H) by (conclude_def Midpoint ).
assert (Cong P K B m) by (forward_using lemma_congruenceflip).
assert (Cong K H B m) by (conclude lemma_congruencetransitive).
assert (Cong B m m D) by (forward_using lemma_congruenceflip).
assert (Cong K H m D) by (conclude lemma_congruencetransitive).
assert (BetS P K R) by (conclude axiom_betweennesssymmetry).
assert (Col P K H) by (conclude_def Col ).
assert (Col P K R) by (conclude_def Col ).
assert (neq P K) by (forward_using lemma_betweennotequal).
assert (Col K H R) by (conclude lemma_collinear4).
assert (Col R K H) by (forward_using lemma_collinearorder).
assert (nCol R K S) by (forward_using lemma_NCorder).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (Col R K K) by (conclude_def Col ).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (neq H K) by (conclude lemma_inequalitysymmetric).
assert (nCol H K S) by (conclude lemma_NChelper).
assert (nCol S K H) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F G, (PG F K H G /\\ EF A B m D F K H G /\\ CongA H K F J E N /\\ OS S F K H)) by (conclude proposition_42B);destruct Tf as [F[G]];spliter.
assert (nCol D B C) by (forward_using lemma_NCorder).
assert (Triangle D B C) by (conclude_def Triangle ).
assert (Par F K H G) by (conclude_def PG ).
assert (nCol K H G) by (forward_using lemma_parallelNC).
assert (nCol H G K) by (forward_using lemma_NCorder).
assert (nCol G H K) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists M L e, (PG G H M L /\\ CongA G H M J E N /\\ EF D B e C G H M L /\\ Midpoint B e C /\\ TS M G H K)) by (conclude proposition_44);destruct Tf as [M[L[e]]];spliter.
assert (BetS B e C) by (conclude_def Midpoint ).
assert (CongA J E N G H M) by (conclude lemma_equalanglessymmetric).
assert (CongA H K F G H M) by (conclude lemma_equalanglestransitive).
assert (Par F K H G) by (conclude_def PG ).
assert (Par K F H G) by (forward_using lemma_parallelflip).
assert (neq H K) by (forward_using lemma_NCdistinct).
let Tf:=fresh in assert (Tf:exists s, (BetS H K s /\\ Cong K s H K)) by (conclude lemma_extension);destruct Tf as [s];spliter.
assert (Par F G K H) by (conclude_def PG ).
assert (Par K H F G) by (conclude lemma_parallelsymmetric).
assert (TP K H F G) by (conclude lemma_paralleldef2B).
assert (OS F G K H) by (conclude_def TP ).
assert (RT F K H K H G) by (conclude proposition_29C).
assert (CongA G H M H K F) by (conclude lemma_equalanglessymmetric).
assert (nCol H K F) by (conclude lemma_equalanglesNC).
assert (nCol F K H) by (forward_using lemma_NCorder).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H G H M) by (conclude lemma_equalanglestransitive).
assert (RT G H M K H G) by (conclude lemma_RTcongruence).
assert (RT K H G G H M) by (conclude lemma_RTsymmetric).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (neq H G) by (forward_using lemma_NCdistinct).
assert (Out H G G) by (conclude lemma_ray4).
assert (BetS K H M) by (conclude proposition_14).
assert (neq F K) by (forward_using lemma_NCdistinct).
assert (nCol G H M) by (conclude lemma_equalanglesNC).
assert (neq G H) by (forward_using lemma_NCdistinct).
assert (Par G H M L) by (conclude_def PG ).
assert (nCol H M L) by (forward_using lemma_parallelNC).
assert (neq L M) by (forward_using lemma_NCdistinct).
assert (eq K K) by (conclude cn_equalityreflexive).
assert (eq H H) by (conclude cn_equalityreflexive).
assert (eq M M) by (conclude cn_equalityreflexive).
assert (Col F K K) by (conclude_def Col ).
assert (Col G H H) by (conclude_def Col ).
assert (Col L M M) by (conclude_def Col ).
assert (Par F K G H) by (forward_using lemma_parallelflip).
assert (Par M L G H) by (conclude lemma_parallelsymmetric).
assert (Par L M G H) by (forward_using lemma_parallelflip).
assert (Par F K L M) by (conclude proposition_30).
assert (Par F K M L) by (forward_using lemma_parallelflip).
assert (Par F G K H) by (conclude_def PG ).
assert (Par G L H M) by (conclude_def PG ).
assert (Par F G H K) by (forward_using lemma_parallelflip).
assert (Col K H M) by (conclude_def Col ).
assert (Col H K M) by (forward_using lemma_collinearorder).
assert (neq K M) by (forward_using lemma_betweennotequal).
assert (neq M K) by (conclude lemma_inequalitysymmetric).
assert (Par F G M K) by (conclude lemma_collinearparallel).
assert (Col H M K) by (forward_using lemma_collinearorder).
assert (Par G L K M) by (conclude lemma_collinearparallel).
assert (Par G L M K) by (forward_using lemma_parallelflip).
assert (Par M K G L) by (conclude lemma_parallelsymmetric).
assert (Par M K F G) by (conclude lemma_parallelsymmetric).
assert (Par M K G F) by (forward_using lemma_parallelflip).
assert (Col G L F) by (conclude lemma_Playfair).
assert (Col G F L) by (forward_using lemma_collinearorder).
assert (nCol F L M) by (forward_using lemma_parallelNC).
assert (neq L F) by (forward_using lemma_NCdistinct).
assert (Par M K L F) by (conclude lemma_collinearparallel).
assert (Par L F M K) by (conclude lemma_parallelsymmetric).
assert (Par F L K M) by (forward_using lemma_parallelflip).
assert (PG F K M L) by (conclude_def PG ).
assert (nCol F K H) by (forward_using lemma_parallelNC).
assert (CongA F K H H K F) by (conclude lemma_ABCequalsCBA).
assert (CongA F K H J E N) by (conclude lemma_equalanglestransitive).
assert (neq K H) by (forward_using lemma_betweennotequal).
assert (Out K H M) by (conclude lemma_ray4).
assert (Out K M H) by (conclude lemma_ray5).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (neq K F) by (forward_using lemma_NCdistinct).
assert (Out K F F) by (conclude lemma_ray4).
assert (nCol F K M) by (forward_using lemma_parallelNC).
assert (CongA F K M F K M) by (conclude lemma_equalanglesreflexive).
assert (CongA F K M F K H) by (conclude lemma_equalangleshelper).
assert (CongA F K M J E N) by (conclude lemma_equalanglestransitive).
assert (Col B O D) by (conclude_def Col ).
assert (Col B D O) by (forward_using lemma_collinearorder).
assert (nCol B D A) by (forward_using lemma_NCorder).
assert (TS A B D C) by (conclude_def TS ).
assert (Par G H L M) by (forward_using lemma_parallelflip).
assert (TP G H L M) by (conclude lemma_paralleldef2B).
assert (OS L M G H) by (conclude_def TP ).
assert (Par F K G H) by (forward_using lemma_parallelflip).
assert (Par G H F K) by (conclude lemma_parallelsymmetric).
assert (TP G H F K) by (conclude lemma_paralleldef2B).
assert (OS F K G H) by (conclude_def TP ).
assert (eq H H) by (conclude cn_equalityreflexive).
assert (Col G H H) by (conclude_def Col ).
assert (TS K G H M) by (conclude_def TS ).
assert (TS F G H M) by (conclude lemma_planeseparation).
assert (TS M G H F) by (conclude lemma_oppositesidesymmetric).
assert (TS L G H F) by (conclude lemma_planeseparation).
let Tf:=fresh in assert (Tf:exists t, (BetS L t F /\\ Col G H t /\\ nCol G H L)) by (conclude_def TS );destruct Tf as [t];spliter.
assert (Col F L G) by (forward_using lemma_collinearorder).
assert (Col L t F) by (conclude_def Col ).
assert (Col F L t) by (forward_using lemma_collinearorder).
assert (neq F L) by (forward_using lemma_NCdistinct).
assert (Col L G t) by (conclude lemma_collinear4).
assert (Col t G L) by (forward_using lemma_collinearorder).
assert (Col t G H) by (forward_using lemma_collinearorder).
assert (~ neq t G).
assert (BetS L G F) by (conclude cn_equalitysub).
assert (BetS F G L) by (conclude axiom_betweennesssymmetry).
let Tf:=fresh in assert (Tf:exists j, (BetS F j M /\\ BetS K j L)) by (conclude lemma_diagonalsmeet);destruct Tf as [j];spliter.
assert (EF A B C D F K M L) by (conclude axiom_paste4).
assert (EF F K M L A B C D) by (conclude axiom_EFsymmetric).
assert (BetS P K M) by (conclude lemma_3_7b).
assert (Out K R M) by (conclude_def Out ).
assert (OS F S K H) by (forward_using lemma_samesidesymmetric).
assert (Col K H M) by (conclude_def Col ).
assert (OS F S K M) by (conclude lemma_samesidecollinear).
close.

*****

*****

+++++
Qed.
-----
End Euclid.
-----
