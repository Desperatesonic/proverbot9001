Require Import ExtLib.Structures.Monads.
-----
Require Import ExtLib.Structures.Monoid.
-----
Require Import ExtLib.Data.PPair.
-----
Require Import ExtLib.Data.Monads.IdentityMonad.
-----
Require Import Coq.Program.Basics.
-----
Set Implicit Arguments.
-----
Set Maximal Implicit Insertion.
-----
Set Universe Polymorphism.
-----
Set Printing Universes.
-----
Section WriterType.
-----
Polymorphic Universe s d c.
-----
Variable S : Type@{s}.
-----
Record writerT (Monoid_S : Monoid@{s} S) (m : Type@{d} -> Type@{c})\n         (t : Type@{d}) : Type := mkWriterT\n  { runWriterT : m (pprod t S)%type }.
-----
Variable Monoid_S : Monoid S.
-----
Variable m : Type@{d} -> Type@{c}.
-----
Context {M : Monad m}.
-----
Arguments mkWriterT _ [_ _] _.
-----
Definition execWriterT {T} (c : writerT Monoid_S m T) : m S :=\n    bind (runWriterT c) (fun (x : pprod T S) => ret (psnd x)).
-----
Definition evalWriterT {T} (c : writerT Monoid_S m T) : m T :=\n    bind (runWriterT c) (fun (x : pprod T S) => ret (pfst x)).
-----
Local Notation "( x , y )" := (ppair x y).
-----
Global Instance Monad_writerT : Monad (writerT Monoid_S m) :=\n  { ret := fun _ x => mkWriterT _ (@ret _ M _ (x, monoid_unit Monoid_S))\n  ; bind := fun _ _ c1 c2 =>\n    mkWriterT _ (\n      @bind _ M _ _ (runWriterT c1) (fun v =>\n        bind (runWriterT (c2 (pfst v))) (fun v' =>\n        ret (pfst v', monoid_plus Monoid_S (psnd v) (psnd v')))))\n  }.
-----
Global Instance Writer_writerT : MonadWriter Monoid_S (writerT Monoid_S m) :=\n  { tell   := fun x => mkWriterT _ (ret (tt, x))\n  ; listen := fun _ c => mkWriterT _ (bind (runWriterT c)\n                                        (fun x => ret (pair (pfst x) (psnd x), psnd x)))\n  ; pass   := fun _ c => mkWriterT _ (bind (runWriterT c)\n                                        (fun x => ret (let '(ppair (pair x ss) s) := x in (x, ss s))))\n  }.
-----
Global Instance MonadT_writerT : MonadT (writerT Monoid_S m) m :=\n  { lift := fun _ c => mkWriterT _ (bind c (fun x => ret (x, monoid_unit Monoid_S)))\n  }.
-----
Global Instance Reader_writerT {S'} (MR : MonadReader S' m) : MonadReader S' (writerT Monoid_S m) :=\n  { ask := mkWriterT _ (bind ask (fun v => @ret _ M _ (v, monoid_unit Monoid_S)))\n  ; local := fun _ f c =>\n    mkWriterT _ (local f (runWriterT c))\n  }.
-----
Global Instance State_writerT {S'} (MR : MonadState S' m) : MonadState S' (writerT Monoid_S m) :=\n  { get := lift get\n  ; put := fun v => lift (put v)\n  }.
-----
Global Instance Zero_writerT (MZ : MonadZero m) : MonadZero (writerT Monoid_S m) :=\n  { mzero := fun _ => lift mzero }.
-----
Global Instance Exception_writerT {E} (ME : MonadExc E m) : MonadExc E (writerT Monoid_S m) :=\n  { raise := fun _ v => lift (raise v)\n  ; catch := fun _ c h => mkWriterT _ (catch (runWriterT c) (fun x => runWriterT (h x)))\n  }.
-----
Global Instance Writer_writerT_pass {T} {MonT : Monoid T} {M : Monad m} {MW : MonadWriter MonT m}\n  : MonadWriter MonT (writerT Monoid_S m) :=\n  { tell   := fun x => mkWriterT _ (bind (tell x)\n                                             (fun x => ret (x, monoid_unit Monoid_S)))\n  ; listen := fun _ c => mkWriterT _ (bind (m:=m) (@listen _ _ _ MW  _ (runWriterT c))\n                                        (fun x => let '(pair (ppair a t) s) := x in\n                                               ret (m:=m) (pair a s,t)))\n  ; pass   := fun _ c => mkWriterT _ (@pass _ _ _ MW _\n                                         (bind (m:=m) (runWriterT c)\n                                               (fun x => let '(ppair (pair a t) s) := x in\n                                                      ret (m:=m) (pair (ppair a s) t))))\n  }.
-----
End WriterType.
-----
Arguments mkWriterT {_} _ {_ _} _.
-----
Arguments runWriterT {S} {Monoid_S} {m} {t} _.
-----
Arguments evalWriterT {S} {Monoid_S} {m} {M} {T} _.
-----
Arguments execWriterT {S} {Monoid_S} {m} {M} {T} _.
-----
Local Open Scope program_scope.
-----
Section MapWriterT.
-----
Variable W W': Type.
-----
Variable Monoid_W : Monoid W.
-----
Variable Monoid_W' : Monoid W'.
-----
Variable m n : Type -> Type.
-----
Variable A B: Type.
-----
Definition mapWriterT (f: m (pprod A W) -> n (pprod B W'))\n  : writerT Monoid_W m A -> writerT Monoid_W' n B :=\n    mkWriterT Monoid_W' ∘ f ∘ runWriterT.
-----
End MapWriterT.
-----
Section CastWriterT.
-----
Variable W : Type.
-----
Variable Monoid_W Monoid_W': Monoid W.
-----
Variable m : Type -> Type.
-----
Variable A : Type.
-----
Definition castWriterT\n  : writerT Monoid_W m A -> writerT Monoid_W' m A :=\n    mkWriterT Monoid_W' ∘ runWriterT.
-----
End CastWriterT.
-----
Section WriterMonad.
-----
Variable W: Type.
-----
Variable Monoid_W : Monoid W.
-----
Variable A: Type.
-----
Definition writer : Type -> Type :=\n    writerT Monoid_W ident.
-----
Definition runWriter : writer A -> pprod A W :=\n    unIdent ∘ (@runWriterT W Monoid_W ident A).
-----
Definition execWriter : writer A -> W :=\n    psnd ∘ runWriter.
-----
Definition evalWriter : writer A -> A :=\n    pfst ∘ runWriter.
-----
End WriterMonad.
-----
Section MapWriter.
-----
Variable W W' : Type.
-----
Variable Monoid_W: Monoid W.
-----
Variable Monoid_W': Monoid W'.
-----
Variable A B: Type.
-----
Definition mapWriter (f: pprod A W -> pprod B W')\n  : writer Monoid_W A -> writer Monoid_W' B :=\n    mapWriterT Monoid_W' ident B (mkIdent ∘ f ∘ unIdent).
-----
End MapWriter.
-----
Section CastWriter.
-----
Variable W : Type.
-----
Variable Monoid_W Monoid_W': Monoid W.
-----
Variable A : Type.
-----
Definition castWriter\n  : writer Monoid_W A -> writer Monoid_W' A :=\n    castWriterT Monoid_W' (m:=ident).
-----
End CastWriter.
-----
