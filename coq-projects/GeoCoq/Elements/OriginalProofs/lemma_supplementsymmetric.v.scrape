Require Export GeoCoq.Elements.OriginalProofs.lemma_ray5.
-----
Section Euclid.
-----
Context `{Ax1:euclidean_neutral_ruler_compass}.
-----
Lemma lemma_supplementsymmetric : \n   forall A B C D E, \n   Supp A B C E D ->\n   Supp D B E C A.
-----
Lemma lemma_supplementsymmetric : forall A B C D E, Supp A B C E D -> Supp D B E C A.

*****
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
forall (A B C D E : Point) (_ : Supp A B C E D), Supp D B E C A
+++++
Proof.
-----
Lemma lemma_supplementsymmetric : forall A B C D E, Supp A B C E D -> Supp D B E C A.
Proof.

*****
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
forall (A B C D E : Point) (_ : Supp A B C E D), Supp D B E C A
+++++
intros.
-----
Lemma lemma_supplementsymmetric : forall A B C D E, Supp A B C E D -> Supp D B E C A.
Proof.
intros.

*****
H : Supp A B C E D
A,B,C,D,E : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
Supp D B E C A
+++++
assert ((Out B C E /\ BetS A B D)).
-----
Lemma lemma_supplementsymmetric : forall A B C D E, Supp A B C E D -> Supp D B E C A.
Proof.
intros.
assert ((Out B C E /\\ BetS A B D)).

*****
H : Supp A B C E D
A,B,C,D,E : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
and (Out B C E) (BetS A B D)
+++++
conclude_def Supp .
-----
Lemma lemma_supplementsymmetric : forall A B C D E, Supp A B C E D -> Supp D B E C A.
Proof.
intros.
assert ((Out B C E /\\ BetS A B D)).

*****
H0 : and (Out B C E) (BetS A B D)
H : Supp A B C E D
A,B,C,D,E : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
Supp D B E C A
+++++
idtac.
-----
Lemma lemma_supplementsymmetric : forall A B C D E, Supp A B C E D -> Supp D B E C A.
Proof.
intros.
assert ((Out B C E /\\ BetS A B D)).
idtac.

*****
H0 : and (Out B C E) (BetS A B D)
H : Supp A B C E D
A,B,C,D,E : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
Supp D B E C A
+++++
assert (BetS D B A).
-----
Lemma lemma_supplementsymmetric : forall A B C D E, Supp A B C E D -> Supp D B E C A.
Proof.
intros.
assert ((Out B C E /\\ BetS A B D)).
idtac.
assert (BetS D B A).

*****
H0 : and (Out B C E) (BetS A B D)
H : Supp A B C E D
A,B,C,D,E : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
BetS D B A
+++++
conclude axiom_betweennesssymmetry.
-----
Lemma lemma_supplementsymmetric : forall A B C D E, Supp A B C E D -> Supp D B E C A.
Proof.
intros.
assert ((Out B C E /\\ BetS A B D)).
idtac.
assert (BetS D B A).

*****
H1 : BetS D B A
H0 : and (Out B C E) (BetS A B D)
H : Supp A B C E D
A,B,C,D,E : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
Supp D B E C A
+++++
idtac.
-----
Lemma lemma_supplementsymmetric : forall A B C D E, Supp A B C E D -> Supp D B E C A.
Proof.
intros.
assert ((Out B C E /\\ BetS A B D)).
idtac.
assert (BetS D B A).
idtac.

*****
H1 : BetS D B A
H0 : and (Out B C E) (BetS A B D)
H : Supp A B C E D
A,B,C,D,E : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
Supp D B E C A
+++++
assert (Out B E C).
-----
Lemma lemma_supplementsymmetric : forall A B C D E, Supp A B C E D -> Supp D B E C A.
Proof.
intros.
assert ((Out B C E /\\ BetS A B D)).
idtac.
assert (BetS D B A).
idtac.
assert (Out B E C).

*****
H1 : BetS D B A
H0 : and (Out B C E) (BetS A B D)
H : Supp A B C E D
A,B,C,D,E : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
Out B E C
+++++
conclude lemma_ray5.
-----
Lemma lemma_supplementsymmetric : forall A B C D E, Supp A B C E D -> Supp D B E C A.
Proof.
intros.
assert ((Out B C E /\\ BetS A B D)).
idtac.
assert (BetS D B A).
idtac.
assert (Out B E C).

*****
H2 : Out B E C
H1 : BetS D B A
H0 : and (Out B C E) (BetS A B D)
H : Supp A B C E D
A,B,C,D,E : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
Supp D B E C A
+++++
idtac.
-----
Lemma lemma_supplementsymmetric : forall A B C D E, Supp A B C E D -> Supp D B E C A.
Proof.
intros.
assert ((Out B C E /\\ BetS A B D)).
idtac.
assert (BetS D B A).
idtac.
assert (Out B E C).
idtac.

*****
H2 : Out B E C
H1 : BetS D B A
H0 : and (Out B C E) (BetS A B D)
H : Supp A B C E D
A,B,C,D,E : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
Supp D B E C A
+++++
assert (Supp D B E C A).
-----
Lemma lemma_supplementsymmetric : forall A B C D E, Supp A B C E D -> Supp D B E C A.
Proof.
intros.
assert ((Out B C E /\\ BetS A B D)).
idtac.
assert (BetS D B A).
idtac.
assert (Out B E C).
idtac.
assert (Supp D B E C A).

*****
H2 : Out B E C
H1 : BetS D B A
H0 : and (Out B C E) (BetS A B D)
H : Supp A B C E D
A,B,C,D,E : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
Supp D B E C A
+++++
conclude_def Supp .
-----
Lemma lemma_supplementsymmetric : forall A B C D E, Supp A B C E D -> Supp D B E C A.
Proof.
intros.
assert ((Out B C E /\\ BetS A B D)).
idtac.
assert (BetS D B A).
idtac.
assert (Out B E C).
idtac.
assert (Supp D B E C A).

*****
H3 : Supp D B E C A
H2 : Out B E C
H1 : BetS D B A
H0 : and (Out B C E) (BetS A B D)
H : Supp A B C E D
A,B,C,D,E : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
Supp D B E C A
+++++
idtac.
-----
Lemma lemma_supplementsymmetric : forall A B C D E, Supp A B C E D -> Supp D B E C A.
Proof.
intros.
assert ((Out B C E /\\ BetS A B D)).
idtac.
assert (BetS D B A).
idtac.
assert (Out B E C).
idtac.
assert (Supp D B E C A).
idtac.

*****
H3 : Supp D B E C A
H2 : Out B E C
H1 : BetS D B A
H0 : and (Out B C E) (BetS A B D)
H : Supp A B C E D
A,B,C,D,E : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
Supp D B E C A
+++++
close.
-----
Lemma lemma_supplementsymmetric : forall A B C D E, Supp A B C E D -> Supp D B E C A.
Proof.
intros.
assert ((Out B C E /\\ BetS A B D)).

*****

*****

+++++
Qed.
-----
End Euclid.
-----
