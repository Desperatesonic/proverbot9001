Require Import GeoCoq.Axioms.parallel_postulates.
-----
Require Import GeoCoq.Tarski_dev.Ch13_1.
-----
Section alternate_interior_angles_playfair_bis.
-----
Context `{TnEQD:Tarski_neutral_dimensionless_with_decidable_point_equality}.
-----
Lemma alternate_interior__playfair_aux : alternate_interior_angles_postulate ->\n   forall A1 A2 B1 B2 C1 C2 P,\n   Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 ->\n   Par A1 A2 C1 C2 -> Col P C1 C2 ->\n   Col C1 B1 B2.
-----
Lemma alternate_interior__playfair_aux : alternate_interior_angles_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (_ : alternate_interior_angles_postulate) (A1 A2 B1 B2 C1 C2 P : Tpoint) (_ : Perp2 A1 A2 B1 B2 P) (_ : not (Col A1 A2 P)) (_ : Col P B1 B2) (_ : Coplanar A1 A2 B1 B2) (_ : Par A1 A2 C1 C2) (_ : Col P C1 C2), Col C1 B1 B2
+++++
Proof.
-----
Lemma alternate_interior__playfair_aux : alternate_interior_angles_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.
Proof.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (_ : alternate_interior_angles_postulate) (A1 A2 B1 B2 C1 C2 P : Tpoint) (_ : Perp2 A1 A2 B1 B2 P) (_ : not (Col A1 A2 P)) (_ : Col P B1 B2) (_ : Coplanar A1 A2 B1 B2) (_ : Par A1 A2 C1 C2) (_ : Col P C1 C2), Col C1 B1 B2
+++++
intros aip A1 A2 B1 B2 C1 C2 P HPerp2 HNC1 HPB HCop HParAC HPC.
-----
Lemma alternate_interior__playfair_aux : alternate_interior_angles_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.
Proof.
intros aip A1 A2 B1 B2 C1 C2 P HPerp2 HNC1 HPB HCop HParAC HPC.

*****
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC1 : not (Col A1 A2 P)
HPerp2 : Perp2 A1 A2 B1 B2 P
A1,A2,B1,B2,C1,C2,P : Tpoint
aip : alternate_interior_angles_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col C1 B1 B2
+++++
elim(eq_dec_points P C1).
-----
Lemma alternate_interior__playfair_aux : alternate_interior_angles_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.
Proof.
intros aip A1 A2 B1 B2 C1 C2 P HPerp2 HNC1 HPB HCop HParAC HPC.
elim(eq_dec_points P C1).

*****
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC1 : not (Col A1 A2 P)
HPerp2 : Perp2 A1 A2 B1 B2 P
A1,A2,B1,B2,C1,C2,P : Tpoint
aip : alternate_interior_angles_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : eq P C1, Col C1 B1 B2
+++++
intro; subst C1; auto.
-----
Lemma alternate_interior__playfair_aux : alternate_interior_angles_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.
Proof.
intros aip A1 A2 B1 B2 C1 C2 P HPerp2 HNC1 HPB HCop HParAC HPC.
elim(eq_dec_points P C1).
intro; subst C1; auto.

*****
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC1 : not (Col A1 A2 P)
HPerp2 : Perp2 A1 A2 B1 B2 P
A1,A2,B1,B2,C1,C2,P : Tpoint
aip : alternate_interior_angles_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : not (eq P C1), Col C1 B1 B2
+++++
intro.
-----
Lemma alternate_interior__playfair_aux : alternate_interior_angles_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.
Proof.
intros aip A1 A2 B1 B2 C1 C2 P HPerp2 HNC1 HPB HCop HParAC HPC.
elim(eq_dec_points P C1).
intro; subst C1; auto.
intro.

*****
H : not (eq P C1)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC1 : not (Col A1 A2 P)
HPerp2 : Perp2 A1 A2 B1 B2 P
A1,A2,B1,B2,C1,C2,P : Tpoint
aip : alternate_interior_angles_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col C1 B1 B2
+++++
assert(HParAB : Par A1 A2 B1 B2).
-----
Lemma alternate_interior__playfair_aux : alternate_interior_angles_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.
Proof.
intros aip A1 A2 B1 B2 C1 C2 P HPerp2 HNC1 HPB HCop HParAC HPC.
elim(eq_dec_points P C1).
intro; subst C1; auto.
intro.
assert(HParAB : Par A1 A2 B1 B2).

*****
H : not (eq P C1)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC1 : not (Col A1 A2 P)
HPerp2 : Perp2 A1 A2 B1 B2 P
A1,A2,B1,B2,C1,C2,P : Tpoint
aip : alternate_interior_angles_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par A1 A2 B1 B2
+++++
assert (Par_strict A1 A2 B1 B2); [|Par].
-----
Lemma alternate_interior__playfair_aux : alternate_interior_angles_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.
Proof.
intros aip A1 A2 B1 B2 C1 C2 P HPerp2 HNC1 HPB HCop HParAC HPC.
elim(eq_dec_points P C1).
intro; subst C1; auto.
intro.
assert(HParAB : Par A1 A2 B1 B2).
assert (Par_strict A1 A2 B1 B2); [|Par].

*****
H : not (eq P C1)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC1 : not (Col A1 A2 P)
HPerp2 : Perp2 A1 A2 B1 B2 P
A1,A2,B1,B2,C1,C2,P : Tpoint
aip : alternate_interior_angles_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par_strict A1 A2 B1 B2
+++++
apply (par_not_col_strict _ _ _ _ P); Col.
-----
Lemma alternate_interior__playfair_aux : alternate_interior_angles_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.
Proof.
intros aip A1 A2 B1 B2 C1 C2 P HPerp2 HNC1 HPB HCop HParAC HPC.
elim(eq_dec_points P C1).
intro; subst C1; auto.
intro.
assert(HParAB : Par A1 A2 B1 B2).
assert (Par_strict A1 A2 B1 B2); [|Par].
apply (par_not_col_strict _ _ _ _ P); Col.

*****
H : not (eq P C1)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC1 : not (Col A1 A2 P)
HPerp2 : Perp2 A1 A2 B1 B2 P
A1,A2,B1,B2,C1,C2,P : Tpoint
aip : alternate_interior_angles_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par A1 A2 B1 B2
+++++
apply par_symmetry.
-----
Lemma alternate_interior__playfair_aux : alternate_interior_angles_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.
Proof.
intros aip A1 A2 B1 B2 C1 C2 P HPerp2 HNC1 HPB HCop HParAC HPC.
elim(eq_dec_points P C1).
intro; subst C1; auto.
intro.
assert(HParAB : Par A1 A2 B1 B2).
assert (Par_strict A1 A2 B1 B2); [|Par].
apply (par_not_col_strict _ _ _ _ P); Col.
apply par_symmetry.

*****
H : not (eq P C1)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC1 : not (Col A1 A2 P)
HPerp2 : Perp2 A1 A2 B1 B2 P
A1,A2,B1,B2,C1,C2,P : Tpoint
aip : alternate_interior_angles_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par B1 B2 A1 A2
+++++
destruct HPerp2 as [X [Y [HCol1 [HPerp1 HPerp2]]]].
-----
Lemma alternate_interior__playfair_aux : alternate_interior_angles_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.
Proof.
intros aip A1 A2 B1 B2 C1 C2 P HPerp2 HNC1 HPB HCop HParAC HPC.
elim(eq_dec_points P C1).
intro; subst C1; auto.
intro.
assert(HParAB : Par A1 A2 B1 B2).
assert (Par_strict A1 A2 B1 B2); [|Par].
apply (par_not_col_strict _ _ _ _ P); Col.
apply par_symmetry.
destruct HPerp2 as [X [Y [HCol1 [HPerp1 HPerp2]]]].

*****
H : not (eq P C1)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC1 : not (Col A1 A2 P)
HPerp2 : Perp X Y B1 B2
HPerp1 : Perp X Y A1 A2
HCol1 : Col P X Y
A1,A2,B1,B2,C1,C2,P,X,Y : Tpoint
aip : alternate_interior_angles_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par B1 B2 A1 A2
+++++
assert (HI1 := HPerp1); assert (HI2 := HPerp2).
-----
Lemma alternate_interior__playfair_aux : alternate_interior_angles_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.
Proof.
intros aip A1 A2 B1 B2 C1 C2 P HPerp2 HNC1 HPB HCop HParAC HPC.
elim(eq_dec_points P C1).
intro; subst C1; auto.
intro.
assert(HParAB : Par A1 A2 B1 B2).
assert (Par_strict A1 A2 B1 B2); [|Par].
apply (par_not_col_strict _ _ _ _ P); Col.
apply par_symmetry.
destruct HPerp2 as [X [Y [HCol1 [HPerp1 HPerp2]]]].
assert (HI1 := HPerp1); assert (HI2 := HPerp2).

*****
HI2 : Perp X Y B1 B2
HI1 : Perp X Y A1 A2
H : not (eq P C1)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC1 : not (Col A1 A2 P)
HPerp2 : Perp X Y B1 B2
HPerp1 : Perp X Y A1 A2
HCol1 : Col P X Y
A1,A2,B1,B2,C1,C2,P,X,Y : Tpoint
aip : alternate_interior_angles_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par B1 B2 A1 A2
+++++
destruct HI1 as [I1 H1]; destruct HI2 as [I2 H2].
-----
Lemma alternate_interior__playfair_aux : alternate_interior_angles_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.
Proof.
intros aip A1 A2 B1 B2 C1 C2 P HPerp2 HNC1 HPB HCop HParAC HPC.
elim(eq_dec_points P C1).
intro; subst C1; auto.
intro.
assert(HParAB : Par A1 A2 B1 B2).
assert (Par_strict A1 A2 B1 B2); [|Par].
apply (par_not_col_strict _ _ _ _ P); Col.
apply par_symmetry.
destruct HPerp2 as [X [Y [HCol1 [HPerp1 HPerp2]]]].
assert (HI1 := HPerp1); assert (HI2 := HPerp2).
destruct HI1 as [I1 H1]; destruct HI2 as [I2 H2].

*****
H2 : Perp_at I2 X Y B1 B2
I2 : Tpoint
H1 : Perp_at I1 X Y A1 A2
I1 : Tpoint
H : not (eq P C1)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC1 : not (Col A1 A2 P)
HPerp2 : Perp X Y B1 B2
HPerp1 : Perp X Y A1 A2
HCol1 : Col P X Y
A1,A2,B1,B2,C1,C2,P,X,Y : Tpoint
aip : alternate_interior_angles_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par B1 B2 A1 A2
+++++
apply perp_in_col in H1; apply perp_in_col in H2.
-----
Lemma alternate_interior__playfair_aux : alternate_interior_angles_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.
Proof.
intros aip A1 A2 B1 B2 C1 C2 P HPerp2 HNC1 HPB HCop HParAC HPC.
elim(eq_dec_points P C1).
intro; subst C1; auto.
intro.
assert(HParAB : Par A1 A2 B1 B2).
assert (Par_strict A1 A2 B1 B2); [|Par].
apply (par_not_col_strict _ _ _ _ P); Col.
apply par_symmetry.
destruct HPerp2 as [X [Y [HCol1 [HPerp1 HPerp2]]]].
assert (HI1 := HPerp1); assert (HI2 := HPerp2).
destruct HI1 as [I1 H1]; destruct HI2 as [I2 H2].
apply perp_in_col in H1; apply perp_in_col in H2.

*****
H2 : and (Col X Y I2) (Col B1 B2 I2)
I2 : Tpoint
H1 : and (Col X Y I1) (Col A1 A2 I1)
I1 : Tpoint
H : not (eq P C1)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC1 : not (Col A1 A2 P)
HPerp2 : Perp X Y B1 B2
HPerp1 : Perp X Y A1 A2
HCol1 : Col P X Y
A1,A2,B1,B2,C1,C2,P,X,Y : Tpoint
aip : alternate_interior_angles_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par B1 B2 A1 A2
+++++
destruct H1 as [HCol2 HCol3]; destruct H2 as [HCol4 HCol5].
-----
Lemma alternate_interior__playfair_aux : alternate_interior_angles_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.
Proof.
intros aip A1 A2 B1 B2 C1 C2 P HPerp2 HNC1 HPB HCop HParAC HPC.
elim(eq_dec_points P C1).
intro; subst C1; auto.
intro.
assert(HParAB : Par A1 A2 B1 B2).
assert (Par_strict A1 A2 B1 B2); [|Par].
apply (par_not_col_strict _ _ _ _ P); Col.
apply par_symmetry.
destruct HPerp2 as [X [Y [HCol1 [HPerp1 HPerp2]]]].
assert (HI1 := HPerp1); assert (HI2 := HPerp2).
destruct HI1 as [I1 H1]; destruct HI2 as [I2 H2].
apply perp_in_col in H1; apply perp_in_col in H2.
destruct H1 as [HCol2 HCol3]; destruct H2 as [HCol4 HCol5].

*****
HCol5 : Col B1 B2 I2
HCol4 : Col X Y I2
I2 : Tpoint
HCol3 : Col A1 A2 I1
HCol2 : Col X Y I1
I1 : Tpoint
H : not (eq P C1)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC1 : not (Col A1 A2 P)
HPerp2 : Perp X Y B1 B2
HPerp1 : Perp X Y A1 A2
HCol1 : Col P X Y
A1,A2,B1,B2,C1,C2,P,X,Y : Tpoint
aip : alternate_interior_angles_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par B1 B2 A1 A2
+++++
assert (P = I2); [|treat_equalities; rename I1 into R].
-----
Lemma alternate_interior__playfair_aux : alternate_interior_angles_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.
Proof.
intros aip A1 A2 B1 B2 C1 C2 P HPerp2 HNC1 HPB HCop HParAC HPC.
elim(eq_dec_points P C1).
intro; subst C1; auto.
intro.
assert(HParAB : Par A1 A2 B1 B2).
assert (Par_strict A1 A2 B1 B2); [|Par].
apply (par_not_col_strict _ _ _ _ P); Col.
apply par_symmetry.
destruct HPerp2 as [X [Y [HCol1 [HPerp1 HPerp2]]]].
assert (HI1 := HPerp1); assert (HI2 := HPerp2).
destruct HI1 as [I1 H1]; destruct HI2 as [I2 H2].
apply perp_in_col in H1; apply perp_in_col in H2.
destruct H1 as [HCol2 HCol3]; destruct H2 as [HCol4 HCol5].
assert (P = I2); [|treat_equalities; rename I1 into R].

*****
HCol5 : Col B1 B2 I2
HCol4 : Col X Y I2
I2 : Tpoint
HCol3 : Col A1 A2 I1
HCol2 : Col X Y I1
I1 : Tpoint
H : not (eq P C1)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC1 : not (Col A1 A2 P)
HPerp2 : Perp X Y B1 B2
HPerp1 : Perp X Y A1 A2
HCol1 : Col P X Y
A1,A2,B1,B2,C1,C2,P,X,Y : Tpoint
aip : alternate_interior_angles_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
eq P I2
+++++
elim (perp_not_col2 _ _ _ _ (perp_sym _ _ _ _ HPerp2)); intro; [apply l6_21 with B1 B2 X Y|apply l6_21 with B1 B2 Y X]; assert_diffs; Col.
-----
Lemma alternate_interior__playfair_aux : alternate_interior_angles_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.
Proof.
intros aip A1 A2 B1 B2 C1 C2 P HPerp2 HNC1 HPB HCop HParAC HPC.
elim(eq_dec_points P C1).
intro; subst C1; auto.
intro.
assert(HParAB : Par A1 A2 B1 B2).
assert (Par_strict A1 A2 B1 B2); [|Par].
apply (par_not_col_strict _ _ _ _ P); Col.
apply par_symmetry.
destruct HPerp2 as [X [Y [HCol1 [HPerp1 HPerp2]]]].
assert (HI1 := HPerp1); assert (HI2 := HPerp2).
destruct HI1 as [I1 H1]; destruct HI2 as [I2 H2].
apply perp_in_col in H1; apply perp_in_col in H2.
destruct H1 as [HCol2 HCol3]; destruct H2 as [HCol4 HCol5].
assert (P = I2); [|treat_equalities; rename I1 into R].

*****
HCol3 : Col A1 A2 R
HCol2 : Col X Y R
R : Tpoint
H : not (eq P C1)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC1 : not (Col A1 A2 P)
HPerp2 : Perp X Y B1 B2
HPerp1 : Perp X Y A1 A2
HCol1 : Col P X Y
A1,A2,B1,B2,C1,C2,P,X,Y : Tpoint
aip : alternate_interior_angles_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par B1 B2 A1 A2
+++++
elim (eq_dec_points P R); intro HNE; treat_equalities; [exfalso; Col|].
-----
Lemma alternate_interior__playfair_aux : alternate_interior_angles_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.
Proof.
intros aip A1 A2 B1 B2 C1 C2 P HPerp2 HNC1 HPB HCop HParAC HPC.
elim(eq_dec_points P C1).
intro; subst C1; auto.
intro.
assert(HParAB : Par A1 A2 B1 B2).
assert (Par_strict A1 A2 B1 B2); [|Par].
apply (par_not_col_strict _ _ _ _ P); Col.
apply par_symmetry.
destruct HPerp2 as [X [Y [HCol1 [HPerp1 HPerp2]]]].
assert (HI1 := HPerp1); assert (HI2 := HPerp2).
destruct HI1 as [I1 H1]; destruct HI2 as [I2 H2].
apply perp_in_col in H1; apply perp_in_col in H2.
destruct H1 as [HCol2 HCol3]; destruct H2 as [HCol4 HCol5].
assert (P = I2); [|treat_equalities; rename I1 into R].
elim (eq_dec_points P R); intro HNE; treat_equalities; [exfalso; Col|].

*****
HNE : not (eq P R)
HCol3 : Col A1 A2 R
HCol2 : Col X Y R
R : Tpoint
H : not (eq P C1)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC1 : not (Col A1 A2 P)
HPerp2 : Perp X Y B1 B2
HPerp1 : Perp X Y A1 A2
HCol1 : Col P X Y
A1,A2,B1,B2,C1,C2,P,X,Y : Tpoint
aip : alternate_interior_angles_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par B1 B2 A1 A2
+++++
apply (l12_9 _ _ _ _ X Y); Perp; apply coplanar_perm_16; apply col2_cop__cop with P R; try solve [assert_diffs; ColR]; apply coplanar_perm_2; [apply col_cop__cop with A2|apply col_cop__cop with A1| apply col_cop__cop with A2|apply col_cop__cop with A1]; Col; try solve [assert_diffs; auto]; apply coplanar_perm_16; [apply col_cop__cop with B2|apply col_cop__cop with B2| apply col_cop__cop with B1|apply col_cop__cop with B1]; assert_diffs; Col; Cop.
-----
Lemma alternate_interior__playfair_aux : alternate_interior_angles_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.
Proof.
intros aip A1 A2 B1 B2 C1 C2 P HPerp2 HNC1 HPB HCop HParAC HPC.
elim(eq_dec_points P C1).
intro; subst C1; auto.
intro.
assert(HParAB : Par A1 A2 B1 B2).

*****
HParAB : Par A1 A2 B1 B2
H : not (eq P C1)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC1 : not (Col A1 A2 P)
HPerp2 : Perp2 A1 A2 B1 B2 P
A1,A2,B1,B2,C1,C2,P : Tpoint
aip : alternate_interior_angles_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col C1 B1 B2
+++++
elim(col_dec P A1 A2).
-----
Lemma alternate_interior__playfair_aux : alternate_interior_angles_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.
Proof.
intros aip A1 A2 B1 B2 C1 C2 P HPerp2 HNC1 HPB HCop HParAC HPC.
elim(eq_dec_points P C1).
intro; subst C1; auto.
intro.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).

*****
HParAB : Par A1 A2 B1 B2
H : not (eq P C1)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC1 : not (Col A1 A2 P)
HPerp2 : Perp2 A1 A2 B1 B2 P
A1,A2,B1,B2,C1,C2,P : Tpoint
aip : alternate_interior_angles_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : Col P A1 A2, Col C1 B1 B2
+++++
intro.
-----
Lemma alternate_interior__playfair_aux : alternate_interior_angles_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.
Proof.
intros aip A1 A2 B1 B2 C1 C2 P HPerp2 HNC1 HPB HCop HParAC HPC.
elim(eq_dec_points P C1).
intro; subst C1; auto.
intro.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro.

*****
H0 : Col P A1 A2
HParAB : Par A1 A2 B1 B2
H : not (eq P C1)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC1 : not (Col A1 A2 P)
HPerp2 : Perp2 A1 A2 B1 B2 P
A1,A2,B1,B2,C1,C2,P : Tpoint
aip : alternate_interior_angles_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col C1 B1 B2
+++++
assert_diffs.
-----
Lemma alternate_interior__playfair_aux : alternate_interior_angles_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.
Proof.
intros aip A1 A2 B1 B2 C1 C2 P HPerp2 HNC1 HPB HCop HParAC HPC.
elim(eq_dec_points P C1).
intro; subst C1; auto.
intro.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro.
assert_diffs.

*****
H2 : not (eq C1 C2)
H1 : not (eq B1 B2)
H6 : not (eq A1 P)
H3 : not (eq A2 P)
H4 : not (eq A1 A2)
H0 : Col P A1 A2
HParAB : Par A1 A2 B1 B2
H : not (eq P C1)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC1 : not (Col A1 A2 P)
HPerp2 : Perp2 A1 A2 B1 B2 P
A1,A2,B1,B2,C1,C2,P : Tpoint
aip : alternate_interior_angles_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col C1 B1 B2
+++++
apply (not_strict_par _ _ _ _ P) in HParAB; Col.
-----
Lemma alternate_interior__playfair_aux : alternate_interior_angles_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.
Proof.
intros aip A1 A2 B1 B2 C1 C2 P HPerp2 HNC1 HPB HCop HParAC HPC.
elim(eq_dec_points P C1).
intro; subst C1; auto.
intro.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro.
assert_diffs.
apply (not_strict_par _ _ _ _ P) in HParAB; Col.

*****
H2 : not (eq C1 C2)
H1 : not (eq B1 B2)
H6 : not (eq A1 P)
H3 : not (eq A2 P)
H4 : not (eq A1 A2)
H0 : Col P A1 A2
HParAB : and (Col A1 A2 B1) (Col A1 A2 B2)
H : not (eq P C1)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC1 : not (Col A1 A2 P)
HPerp2 : Perp2 A1 A2 B1 B2 P
A1,A2,B1,B2,C1,C2,P : Tpoint
aip : alternate_interior_angles_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col C1 B1 B2
+++++
apply (not_strict_par _ _ _ _ P) in HParAC; Col.
-----
Lemma alternate_interior__playfair_aux : alternate_interior_angles_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.
Proof.
intros aip A1 A2 B1 B2 C1 C2 P HPerp2 HNC1 HPB HCop HParAC HPC.
elim(eq_dec_points P C1).
intro; subst C1; auto.
intro.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro.
assert_diffs.
apply (not_strict_par _ _ _ _ P) in HParAB; Col.
apply (not_strict_par _ _ _ _ P) in HParAC; Col.

*****
H2 : not (eq C1 C2)
H1 : not (eq B1 B2)
H6 : not (eq A1 P)
H3 : not (eq A2 P)
H4 : not (eq A1 A2)
H0 : Col P A1 A2
HParAB : and (Col A1 A2 B1) (Col A1 A2 B2)
H : not (eq P C1)
HPC : Col P C1 C2
HParAC : and (Col A1 A2 C1) (Col A1 A2 C2)
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC1 : not (Col A1 A2 P)
HPerp2 : Perp2 A1 A2 B1 B2 P
A1,A2,B1,B2,C1,C2,P : Tpoint
aip : alternate_interior_angles_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col C1 B1 B2
+++++
spliter.
-----
Lemma alternate_interior__playfair_aux : alternate_interior_angles_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.
Proof.
intros aip A1 A2 B1 B2 C1 C2 P HPerp2 HNC1 HPB HCop HParAC HPC.
elim(eq_dec_points P C1).
intro; subst C1; auto.
intro.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro.
assert_diffs.
apply (not_strict_par _ _ _ _ P) in HParAB; Col.
apply (not_strict_par _ _ _ _ P) in HParAC; Col.
spliter.

*****
H2 : not (eq C1 C2)
H1 : not (eq B1 B2)
H6 : not (eq A1 P)
H3 : not (eq A2 P)
H4 : not (eq A1 A2)
H0 : Col P A1 A2
H7 : Col A1 A2 B2
H5 : Col A1 A2 B1
H : not (eq P C1)
HPC : Col P C1 C2
H9 : Col A1 A2 C2
H8 : Col A1 A2 C1
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC1 : not (Col A1 A2 P)
HPerp2 : Perp2 A1 A2 B1 B2 P
A1,A2,B1,B2,C1,C2,P : Tpoint
aip : alternate_interior_angles_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col C1 B1 B2
+++++
ColR.
-----
Lemma alternate_interior__playfair_aux : alternate_interior_angles_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.
Proof.
intros aip A1 A2 B1 B2 C1 C2 P HPerp2 HNC1 HPB HCop HParAC HPC.
elim(eq_dec_points P C1).
intro; subst C1; auto.
intro.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).

*****
HParAB : Par A1 A2 B1 B2
H : not (eq P C1)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC1 : not (Col A1 A2 P)
HPerp2 : Perp2 A1 A2 B1 B2 P
A1,A2,B1,B2,C1,C2,P : Tpoint
aip : alternate_interior_angles_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : not (Col P A1 A2), Col C1 B1 B2
+++++
intro HStrict.
-----
Lemma alternate_interior__playfair_aux : alternate_interior_angles_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.
Proof.
intros aip A1 A2 B1 B2 C1 C2 P HPerp2 HNC1 HPB HCop HParAC HPC.
elim(eq_dec_points P C1).
intro; subst C1; auto.
intro.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.

*****
HStrict : not (Col P A1 A2)
HParAB : Par A1 A2 B1 B2
H : not (eq P C1)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC1 : not (Col A1 A2 P)
HPerp2 : Perp2 A1 A2 B1 B2 P
A1,A2,B1,B2,C1,C2,P : Tpoint
aip : alternate_interior_angles_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col C1 B1 B2
+++++
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
-----
Lemma alternate_interior__playfair_aux : alternate_interior_angles_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.
Proof.
intros aip A1 A2 B1 B2 C1 C2 P HPerp2 HNC1 HPB HCop HParAC HPC.
elim(eq_dec_points P C1).
intro; subst C1; auto.
intro.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.

*****
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
H : not (eq P C1)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC1 : not (Col A1 A2 P)
HPerp2 : Perp2 A1 A2 B1 B2 P
A1,A2,B1,B2,C1,C2,P : Tpoint
aip : alternate_interior_angles_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col C1 B1 B2
+++++
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
-----
Lemma alternate_interior__playfair_aux : alternate_interior_angles_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.
Proof.
intros aip A1 A2 B1 B2 C1 C2 P HPerp2 HNC1 HPB HCop HParAC HPC.
elim(eq_dec_points P C1).
intro; subst C1; auto.
intro.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.

*****
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
H : not (eq P C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC1 : not (Col A1 A2 P)
HPerp2 : Perp2 A1 A2 B1 B2 P
A1,A2,B1,B2,C1,C2,P : Tpoint
aip : alternate_interior_angles_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col C1 B1 B2
+++++
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
-----
Lemma alternate_interior__playfair_aux : alternate_interior_angles_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.
Proof.
intros aip A1 A2 B1 B2 C1 C2 P HPerp2 HNC1 HPB HCop HParAC HPC.
elim(eq_dec_points P C1).
intro; subst C1; auto.
intro.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].

*****
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
H : not (eq P C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC1 : not (Col A1 A2 P)
HPerpBP : Perp P1 P2 B1 B2
HPerpAP : Perp P1 P2 A1 A2
HP : Col P P1 P2
A1,A2,B1,B2,C1,C2,P,P1,P2 : Tpoint
aip : alternate_interior_angles_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col C1 B1 B2
+++++
assert(HQ := HPerpAP); auto.
-----
Lemma alternate_interior__playfair_aux : alternate_interior_angles_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.
Proof.
intros aip A1 A2 B1 B2 C1 C2 P HPerp2 HNC1 HPB HCop HParAC HPC.
elim(eq_dec_points P C1).
intro; subst C1; auto.
intro.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.

*****
HQ : Perp P1 P2 A1 A2
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
H : not (eq P C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC1 : not (Col A1 A2 P)
HPerpBP : Perp P1 P2 B1 B2
HPerpAP : Perp P1 P2 A1 A2
HP : Col P P1 P2
A1,A2,B1,B2,C1,C2,P,P1,P2 : Tpoint
aip : alternate_interior_angles_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col C1 B1 B2
+++++
destruct HQ as [Q [_ [_ [HQP[HQL _]]]]].
-----
Lemma alternate_interior__playfair_aux : alternate_interior_angles_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.
Proof.
intros aip A1 A2 B1 B2 C1 C2 P HPerp2 HNC1 HPB HCop HParAC HPC.
elim(eq_dec_points P C1).
intro; subst C1; auto.
intro.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQL _]]]]].

*****
HQL : Col Q A1 A2
HQP : Col Q P1 P2
Q : Tpoint
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
H : not (eq P C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC1 : not (Col A1 A2 P)
HPerpBP : Perp P1 P2 B1 B2
HPerpAP : Perp P1 P2 A1 A2
HP : Col P P1 P2
A1,A2,B1,B2,C1,C2,P,P1,P2 : Tpoint
aip : alternate_interior_angles_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col C1 B1 B2
+++++
assert(HP' := HPerpBP); auto.
-----
Lemma alternate_interior__playfair_aux : alternate_interior_angles_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.
Proof.
intros aip A1 A2 B1 B2 C1 C2 P HPerp2 HNC1 HPB HCop HParAC HPC.
elim(eq_dec_points P C1).
intro; subst C1; auto.
intro.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQL _]]]]].
assert(HP' := HPerpBP); auto.

*****
HP' : Perp P1 P2 B1 B2
HQL : Col Q A1 A2
HQP : Col Q P1 P2
Q : Tpoint
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
H : not (eq P C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC1 : not (Col A1 A2 P)
HPerpBP : Perp P1 P2 B1 B2
HPerpAP : Perp P1 P2 A1 A2
HP : Col P P1 P2
A1,A2,B1,B2,C1,C2,P,P1,P2 : Tpoint
aip : alternate_interior_angles_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col C1 B1 B2
+++++
destruct HP' as [P' HPerpP].
-----
Lemma alternate_interior__playfair_aux : alternate_interior_angles_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.
Proof.
intros aip A1 A2 B1 B2 C1 C2 P HPerp2 HNC1 HPB HCop HParAC HPC.
elim(eq_dec_points P C1).
intro; subst C1; auto.
intro.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQL _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].

*****
HPerpP : Perp_at P' P1 P2 B1 B2
P' : Tpoint
HQL : Col Q A1 A2
HQP : Col Q P1 P2
Q : Tpoint
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
H : not (eq P C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC1 : not (Col A1 A2 P)
HPerpBP : Perp P1 P2 B1 B2
HPerpAP : Perp P1 P2 A1 A2
HP : Col P P1 P2
A1,A2,B1,B2,C1,C2,P,P1,P2 : Tpoint
aip : alternate_interior_angles_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col C1 B1 B2
+++++
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
-----
Lemma alternate_interior__playfair_aux : alternate_interior_angles_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.
Proof.
intros aip A1 A2 B1 B2 C1 C2 P HPerp2 HNC1 HPB HCop HParAC HPC.
elim(eq_dec_points P C1).
intro; subst C1; auto.
intro.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQL _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).

*****
H0 : eq P' P
HPerpP : Perp_at P' P1 P2 B1 B2
P' : Tpoint
HQL : Col Q A1 A2
HQP : Col Q P1 P2
Q : Tpoint
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
H : not (eq P C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC1 : not (Col A1 A2 P)
HPerpBP : Perp P1 P2 B1 B2
HPerpAP : Perp P1 P2 A1 A2
HP : Col P P1 P2
A1,A2,B1,B2,C1,C2,P,P1,P2 : Tpoint
aip : alternate_interior_angles_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col C1 B1 B2
+++++
subst P'.
-----
Lemma alternate_interior__playfair_aux : alternate_interior_angles_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.
Proof.
intros aip A1 A2 B1 B2 C1 C2 P HPerp2 HNC1 HPB HCop HParAC HPC.
elim(eq_dec_points P C1).
intro; subst C1; auto.
intro.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQL _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.

*****
HPerpP : Perp_at P P1 P2 B1 B2
HQL : Col Q A1 A2
HQP : Col Q P1 P2
Q : Tpoint
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
H : not (eq P C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC1 : not (Col A1 A2 P)
HPerpBP : Perp P1 P2 B1 B2
HPerpAP : Perp P1 P2 A1 A2
HP : Col P P1 P2
A1,A2,B1,B2,C1,C2,P,P1,P2 : Tpoint
aip : alternate_interior_angles_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col C1 B1 B2
+++++
destruct HPerpP as [_ [_ [HPP _]]].
-----
Lemma alternate_interior__playfair_aux : alternate_interior_angles_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.
Proof.
intros aip A1 A2 B1 B2 C1 C2 P HPerp2 HNC1 HPB HCop HParAC HPC.
elim(eq_dec_points P C1).
intro; subst C1; auto.
intro.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQL _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].

*****
HPP : Col P P1 P2
HQL : Col Q A1 A2
HQP : Col Q P1 P2
Q : Tpoint
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
H : not (eq P C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC1 : not (Col A1 A2 P)
HPerpBP : Perp P1 P2 B1 B2
HPerpAP : Perp P1 P2 A1 A2
HP : Col P P1 P2
A1,A2,B1,B2,C1,C2,P,P1,P2 : Tpoint
aip : alternate_interior_angles_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col C1 B1 B2
+++++
assert(P<>Q) by (intro; subst Q; auto).
-----
Lemma alternate_interior__playfair_aux : alternate_interior_angles_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.
Proof.
intros aip A1 A2 B1 B2 C1 C2 P HPerp2 HNC1 HPB HCop HParAC HPC.
elim(eq_dec_points P C1).
intro; subst C1; auto.
intro.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQL _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).

*****
H0 : not (eq P Q)
HPP : Col P P1 P2
HQL : Col Q A1 A2
HQP : Col Q P1 P2
Q : Tpoint
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
H : not (eq P C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC1 : not (Col A1 A2 P)
HPerpBP : Perp P1 P2 B1 B2
HPerpAP : Perp P1 P2 A1 A2
HP : Col P P1 P2
A1,A2,B1,B2,C1,C2,P,P1,P2 : Tpoint
aip : alternate_interior_angles_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col C1 B1 B2
+++++
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
-----
Lemma alternate_interior__playfair_aux : alternate_interior_angles_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.
Proof.
intros aip A1 A2 B1 B2 C1 C2 P HPerp2 HNC1 HPB HCop HParAC HPC.
elim(eq_dec_points P C1).
intro; subst C1; auto.
intro.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQL _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.

*****
H0 : not (eq P Q)
HPP : Col P P1 P2
HQL : Col Q A1 A2
HQP : Col Q P1 P2
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
H : not (eq P C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC1 : not (Col A1 A2 P)
HPerpBP : Perp P1 P2 B1 B2
HPerpAP : Perp A1 A2 P Q
Q : Tpoint
HP : Col P P1 P2
A1,A2,B1,B2,C1,C2,P,P1,P2 : Tpoint
aip : alternate_interior_angles_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col C1 B1 B2
+++++
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
-----
Lemma alternate_interior__playfair_aux : alternate_interior_angles_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.
Proof.
intros aip A1 A2 B1 B2 C1 C2 P HPerp2 HNC1 HPB HCop HParAC HPC.
elim(eq_dec_points P C1).
intro; subst C1; auto.
intro.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQL _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.

*****
H0 : not (eq P Q)
HPP : Col P P1 P2
HQL : Col Q A1 A2
HQP : Col Q P1 P2
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
H : not (eq P C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC1 : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
Q : Tpoint
HP : Col P P1 P2
A1,A2,B1,B2,C1,C2,P,P1,P2 : Tpoint
aip : alternate_interior_angles_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col C1 B1 B2
+++++
clear dependent P1.
-----
Lemma alternate_interior__playfair_aux : alternate_interior_angles_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.
Proof.
intros aip A1 A2 B1 B2 C1 C2 P HPerp2 HNC1 HPB HCop HParAC HPC.
elim(eq_dec_points P C1).
intro; subst C1; auto.
intro.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQL _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.

*****
H0 : not (eq P Q)
HQL : Col Q A1 A2
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
H : not (eq P C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC1 : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,P2,Q : Tpoint
aip : alternate_interior_angles_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col C1 B1 B2
+++++
clear dependent P2.
-----
Lemma alternate_interior__playfair_aux : alternate_interior_angles_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.
Proof.
intros aip A1 A2 B1 B2 C1 C2 P HPerp2 HNC1 HPB HCop HParAC HPC.
elim(eq_dec_points P C1).
intro; subst C1; auto.
intro.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQL _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.

*****
H0 : not (eq P Q)
HQL : Col Q A1 A2
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
H : not (eq P C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC1 : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
aip : alternate_interior_angles_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col C1 B1 B2
+++++
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
-----
Lemma alternate_interior__playfair_aux : alternate_interior_angles_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.
Proof.
intros aip A1 A2 B1 B2 C1 C2 P HPerp2 HNC1 HPB HCop HParAC HPC.
elim(eq_dec_points P C1).
intro; subst C1; auto.
intro.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQL _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).

*****
H1 : not (Col Q C1 P)
H0 : not (eq P Q)
HQL : Col Q A1 A2
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
H : not (eq P C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC1 : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
aip : alternate_interior_angles_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col C1 B1 B2
+++++
assert_diffs.
-----
Lemma alternate_interior__playfair_aux : alternate_interior_angles_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.
Proof.
intros aip A1 A2 B1 B2 C1 C2 P HPerp2 HNC1 HPB HCop HParAC HPC.
elim(eq_dec_points P C1).
intro; subst C1; auto.
intro.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQL _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert_diffs.

*****
H2 : not (eq C1 C2)
H3 : not (eq B1 B2)
H8 : not (eq P A2)
H4 : not (eq A1 A2)
H6 : not (eq P A1)
H5 : not (eq Q C1)
H1 : not (Col Q C1 P)
H0 : not (eq P Q)
HQL : Col Q A1 A2
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
H : not (eq P C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC1 : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
aip : alternate_interior_angles_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col C1 B1 B2
+++++
assert(HB3 : exists B3, Col B1 B2 B3 /\ B3 <> P).
-----
Lemma alternate_interior__playfair_aux : alternate_interior_angles_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.
Proof.
intros aip A1 A2 B1 B2 C1 C2 P HPerp2 HNC1 HPB HCop HParAC HPC.
elim(eq_dec_points P C1).
intro; subst C1; auto.
intro.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQL _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert_diffs.
assert(HB3 : exists B3, Col B1 B2 B3 /\\ B3 <> P).

*****
H2 : not (eq C1 C2)
H3 : not (eq B1 B2)
H8 : not (eq P A2)
H4 : not (eq A1 A2)
H6 : not (eq P A1)
H5 : not (eq Q C1)
H1 : not (Col Q C1 P)
H0 : not (eq P Q)
HQL : Col Q A1 A2
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
H : not (eq P C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC1 : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
aip : alternate_interior_angles_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun B3 : Tpoint => and (Col B1 B2 B3) (not (eq B3 P)))
+++++
elim(eq_dec_points B1 P).
-----
Lemma alternate_interior__playfair_aux : alternate_interior_angles_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.
Proof.
intros aip A1 A2 B1 B2 C1 C2 P HPerp2 HNC1 HPB HCop HParAC HPC.
elim(eq_dec_points P C1).
intro; subst C1; auto.
intro.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQL _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert_diffs.
assert(HB3 : exists B3, Col B1 B2 B3 /\\ B3 <> P).
elim(eq_dec_points B1 P).

*****
H2 : not (eq C1 C2)
H3 : not (eq B1 B2)
H8 : not (eq P A2)
H4 : not (eq A1 A2)
H6 : not (eq P A1)
H5 : not (eq Q C1)
H1 : not (Col Q C1 P)
H0 : not (eq P Q)
HQL : Col Q A1 A2
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
H : not (eq P C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC1 : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
aip : alternate_interior_angles_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : eq B1 P, ex (fun B3 : Tpoint => and (Col B1 B2 B3) (not (eq B3 P)))
+++++
intro; subst B1; exists B2; Col.
-----
Lemma alternate_interior__playfair_aux : alternate_interior_angles_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.
Proof.
intros aip A1 A2 B1 B2 C1 C2 P HPerp2 HNC1 HPB HCop HParAC HPC.
elim(eq_dec_points P C1).
intro; subst C1; auto.
intro.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQL _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert_diffs.
assert(HB3 : exists B3, Col B1 B2 B3 /\\ B3 <> P).
elim(eq_dec_points B1 P).
intro; subst B1; exists B2; Col.

*****
H2 : not (eq C1 C2)
H3 : not (eq B1 B2)
H8 : not (eq P A2)
H4 : not (eq A1 A2)
H6 : not (eq P A1)
H5 : not (eq Q C1)
H1 : not (Col Q C1 P)
H0 : not (eq P Q)
HQL : Col Q A1 A2
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
H : not (eq P C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC1 : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
aip : alternate_interior_angles_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : not (eq B1 P), ex (fun B3 : Tpoint => and (Col B1 B2 B3) (not (eq B3 P)))
+++++
intro; exists B1; Col.
-----
Lemma alternate_interior__playfair_aux : alternate_interior_angles_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.
Proof.
intros aip A1 A2 B1 B2 C1 C2 P HPerp2 HNC1 HPB HCop HParAC HPC.
elim(eq_dec_points P C1).
intro; subst C1; auto.
intro.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQL _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert_diffs.
assert(HB3 : exists B3, Col B1 B2 B3 /\\ B3 <> P).

*****
HB3 : ex (fun B3 : Tpoint => and (Col B1 B2 B3) (not (eq B3 P)))
H2 : not (eq C1 C2)
H3 : not (eq B1 B2)
H8 : not (eq P A2)
H4 : not (eq A1 A2)
H6 : not (eq P A1)
H5 : not (eq Q C1)
H1 : not (Col Q C1 P)
H0 : not (eq P Q)
HQL : Col Q A1 A2
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
H : not (eq P C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC1 : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
aip : alternate_interior_angles_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col C1 B1 B2
+++++
destruct HB3 as [B3 []].
-----
Lemma alternate_interior__playfair_aux : alternate_interior_angles_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.
Proof.
intros aip A1 A2 B1 B2 C1 C2 P HPerp2 HNC1 HPB HCop HParAC HPC.
elim(eq_dec_points P C1).
intro; subst C1; auto.
intro.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQL _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert_diffs.
assert(HB3 : exists B3, Col B1 B2 B3 /\\ B3 <> P).
destruct HB3 as [B3 []].

*****
H9 : not (eq B3 P)
H7 : Col B1 B2 B3
B3 : Tpoint
H2 : not (eq C1 C2)
H3 : not (eq B1 B2)
H8 : not (eq P A2)
H4 : not (eq A1 A2)
H6 : not (eq P A1)
H5 : not (eq Q C1)
H1 : not (Col Q C1 P)
H0 : not (eq P Q)
HQL : Col Q A1 A2
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
H : not (eq P C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC1 : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
aip : alternate_interior_angles_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col C1 B1 B2
+++++
assert(Col P C1 B3); [|ColR].
-----
Lemma alternate_interior__playfair_aux : alternate_interior_angles_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.
Proof.
intros aip A1 A2 B1 B2 C1 C2 P HPerp2 HNC1 HPB HCop HParAC HPC.
elim(eq_dec_points P C1).
intro; subst C1; auto.
intro.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQL _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert_diffs.
assert(HB3 : exists B3, Col B1 B2 B3 /\\ B3 <> P).
destruct HB3 as [B3 []].
assert(Col P C1 B3); [|ColR].

*****
H9 : not (eq B3 P)
H7 : Col B1 B2 B3
B3 : Tpoint
H2 : not (eq C1 C2)
H3 : not (eq B1 B2)
H8 : not (eq P A2)
H4 : not (eq A1 A2)
H6 : not (eq P A1)
H5 : not (eq Q C1)
H1 : not (Col Q C1 P)
H0 : not (eq P Q)
HQL : Col Q A1 A2
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
H : not (eq P C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC1 : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
aip : alternate_interior_angles_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P C1 B3
+++++
assert_diffs.
-----
Lemma alternate_interior__playfair_aux : alternate_interior_angles_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.
Proof.
intros aip A1 A2 B1 B2 C1 C2 P HPerp2 HNC1 HPB HCop HParAC HPC.
elim(eq_dec_points P C1).
intro; subst C1; auto.
intro.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQL _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert_diffs.
assert(HB3 : exists B3, Col B1 B2 B3 /\\ B3 <> P).
destruct HB3 as [B3 []].
assert(Col P C1 B3); [|ColR].
assert_diffs.

*****
H9 : not (eq B3 P)
H7 : Col B1 B2 B3
B3 : Tpoint
H2 : not (eq C1 C2)
H3 : not (eq B1 B2)
H8 : not (eq P A2)
H4 : not (eq A1 A2)
H6 : not (eq P A1)
H5 : not (eq Q C1)
H1 : not (Col Q C1 P)
H0 : not (eq P Q)
HQL : Col Q A1 A2
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
H : not (eq P C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC1 : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
aip : alternate_interior_angles_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P C1 B3
+++++
apply (cop_perp2__col _ _ _ P Q); auto; [| |apply (perp_col2 B1 B2); Col].
-----
Lemma alternate_interior__playfair_aux : alternate_interior_angles_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.
Proof.
intros aip A1 A2 B1 B2 C1 C2 P HPerp2 HNC1 HPB HCop HParAC HPC.
elim(eq_dec_points P C1).
intro; subst C1; auto.
intro.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQL _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert_diffs.
assert(HB3 : exists B3, Col B1 B2 B3 /\\ B3 <> P).
destruct HB3 as [B3 []].
assert(Col P C1 B3); [|ColR].
assert_diffs.
apply (cop_perp2__col _ _ _ P Q); auto; [| |apply (perp_col2 B1 B2); Col].

*****
H9 : not (eq B3 P)
H7 : Col B1 B2 B3
B3 : Tpoint
H2 : not (eq C1 C2)
H3 : not (eq B1 B2)
H8 : not (eq P A2)
H4 : not (eq A1 A2)
H6 : not (eq P A1)
H5 : not (eq Q C1)
H1 : not (Col Q C1 P)
H0 : not (eq P Q)
HQL : Col Q A1 A2
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
H : not (eq P C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC1 : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
aip : alternate_interior_angles_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar P Q C1 B3
+++++
assert (Coplanar A1 A2 P B3) by (apply col2_cop__cop with B1 B2; Col; Cop).
-----
Lemma alternate_interior__playfair_aux : alternate_interior_angles_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.
Proof.
intros aip A1 A2 B1 B2 C1 C2 P HPerp2 HNC1 HPB HCop HParAC HPC.
elim(eq_dec_points P C1).
intro; subst C1; auto.
intro.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQL _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert_diffs.
assert(HB3 : exists B3, Col B1 B2 B3 /\\ B3 <> P).
destruct HB3 as [B3 []].
assert(Col P C1 B3); [|ColR].
assert_diffs.
apply (cop_perp2__col _ _ _ P Q); auto; [| |apply (perp_col2 B1 B2); Col].
assert (Coplanar A1 A2 P B3) by (apply col2_cop__cop with B1 B2; Col; Cop).

*****
H10 : Coplanar A1 A2 P B3
H9 : not (eq B3 P)
H7 : Col B1 B2 B3
B3 : Tpoint
H2 : not (eq C1 C2)
H3 : not (eq B1 B2)
H8 : not (eq P A2)
H4 : not (eq A1 A2)
H6 : not (eq P A1)
H5 : not (eq Q C1)
H1 : not (Col Q C1 P)
H0 : not (eq P Q)
HQL : Col Q A1 A2
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
H : not (eq P C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC1 : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
aip : alternate_interior_angles_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar P Q C1 B3
+++++
assert (Coplanar A1 A2 C1 C2) by (apply pars__coplanar; auto).
-----
Lemma alternate_interior__playfair_aux : alternate_interior_angles_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.
Proof.
intros aip A1 A2 B1 B2 C1 C2 P HPerp2 HNC1 HPB HCop HParAC HPC.
elim(eq_dec_points P C1).
intro; subst C1; auto.
intro.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQL _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert_diffs.
assert(HB3 : exists B3, Col B1 B2 B3 /\\ B3 <> P).
destruct HB3 as [B3 []].
assert(Col P C1 B3); [|ColR].
assert_diffs.
apply (cop_perp2__col _ _ _ P Q); auto; [| |apply (perp_col2 B1 B2); Col].
assert (Coplanar A1 A2 P B3) by (apply col2_cop__cop with B1 B2; Col; Cop).
assert (Coplanar A1 A2 C1 C2) by (apply pars__coplanar; auto).

*****
H11 : Coplanar A1 A2 C1 C2
H10 : Coplanar A1 A2 P B3
H9 : not (eq B3 P)
H7 : Col B1 B2 B3
B3 : Tpoint
H2 : not (eq C1 C2)
H3 : not (eq B1 B2)
H8 : not (eq P A2)
H4 : not (eq A1 A2)
H6 : not (eq P A1)
H5 : not (eq Q C1)
H1 : not (Col Q C1 P)
H0 : not (eq P Q)
HQL : Col Q A1 A2
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
H : not (eq P C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC1 : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
aip : alternate_interior_angles_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar P Q C1 B3
+++++
assert (Coplanar A1 A2 P C1) by (apply col2_cop__cop with C1 C2; Col; Cop).
-----
Lemma alternate_interior__playfair_aux : alternate_interior_angles_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.
Proof.
intros aip A1 A2 B1 B2 C1 C2 P HPerp2 HNC1 HPB HCop HParAC HPC.
elim(eq_dec_points P C1).
intro; subst C1; auto.
intro.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQL _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert_diffs.
assert(HB3 : exists B3, Col B1 B2 B3 /\\ B3 <> P).
destruct HB3 as [B3 []].
assert(Col P C1 B3); [|ColR].
assert_diffs.
apply (cop_perp2__col _ _ _ P Q); auto; [| |apply (perp_col2 B1 B2); Col].
assert (Coplanar A1 A2 P B3) by (apply col2_cop__cop with B1 B2; Col; Cop).
assert (Coplanar A1 A2 C1 C2) by (apply pars__coplanar; auto).
assert (Coplanar A1 A2 P C1) by (apply col2_cop__cop with C1 C2; Col; Cop).

*****
H12 : Coplanar A1 A2 P C1
H11 : Coplanar A1 A2 C1 C2
H10 : Coplanar A1 A2 P B3
H9 : not (eq B3 P)
H7 : Col B1 B2 B3
B3 : Tpoint
H2 : not (eq C1 C2)
H3 : not (eq B1 B2)
H8 : not (eq P A2)
H4 : not (eq A1 A2)
H6 : not (eq P A1)
H5 : not (eq Q C1)
H1 : not (Col Q C1 P)
H0 : not (eq P Q)
HQL : Col Q A1 A2
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
H : not (eq P C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC1 : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
aip : alternate_interior_angles_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar P Q C1 B3
+++++
assert (Coplanar A1 A2 P Q) by (apply coplanar_perm_1, col__coplanar; Col).
-----
Lemma alternate_interior__playfair_aux : alternate_interior_angles_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.
Proof.
intros aip A1 A2 B1 B2 C1 C2 P HPerp2 HNC1 HPB HCop HParAC HPC.
elim(eq_dec_points P C1).
intro; subst C1; auto.
intro.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQL _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert_diffs.
assert(HB3 : exists B3, Col B1 B2 B3 /\\ B3 <> P).
destruct HB3 as [B3 []].
assert(Col P C1 B3); [|ColR].
assert_diffs.
apply (cop_perp2__col _ _ _ P Q); auto; [| |apply (perp_col2 B1 B2); Col].
assert (Coplanar A1 A2 P B3) by (apply col2_cop__cop with B1 B2; Col; Cop).
assert (Coplanar A1 A2 C1 C2) by (apply pars__coplanar; auto).
assert (Coplanar A1 A2 P C1) by (apply col2_cop__cop with C1 C2; Col; Cop).
assert (Coplanar A1 A2 P Q) by (apply coplanar_perm_1, col__coplanar; Col).

*****
H13 : Coplanar A1 A2 P Q
H12 : Coplanar A1 A2 P C1
H11 : Coplanar A1 A2 C1 C2
H10 : Coplanar A1 A2 P B3
H9 : not (eq B3 P)
H7 : Col B1 B2 B3
B3 : Tpoint
H2 : not (eq C1 C2)
H3 : not (eq B1 B2)
H8 : not (eq P A2)
H4 : not (eq A1 A2)
H6 : not (eq P A1)
H5 : not (eq Q C1)
H1 : not (Col Q C1 P)
H0 : not (eq P Q)
HQL : Col Q A1 A2
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
H : not (eq P C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC1 : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
aip : alternate_interior_angles_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar P Q C1 B3
+++++
CopR.
-----
Lemma alternate_interior__playfair_aux : alternate_interior_angles_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.
Proof.
intros aip A1 A2 B1 B2 C1 C2 P HPerp2 HNC1 HPB HCop HParAC HPC.
elim(eq_dec_points P C1).
intro; subst C1; auto.
intro.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQL _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert_diffs.
assert(HB3 : exists B3, Col B1 B2 B3 /\\ B3 <> P).
destruct HB3 as [B3 []].
assert(Col P C1 B3); [|ColR].
assert_diffs.
apply (cop_perp2__col _ _ _ P Q); auto; [| |apply (perp_col2 B1 B2); Col].
assert (Coplanar A1 A2 P B3) by (apply col2_cop__cop with B1 B2; Col; Cop).
assert (Coplanar A1 A2 C1 C2) by (apply pars__coplanar; auto).
assert (Coplanar A1 A2 P C1) by (apply col2_cop__cop with C1 C2; Col; Cop).
assert (Coplanar A1 A2 P Q) by (apply coplanar_perm_1, col__coplanar; Col).
CopR.

*****
H9 : not (eq B3 P)
H7 : Col B1 B2 B3
B3 : Tpoint
H2 : not (eq C1 C2)
H3 : not (eq B1 B2)
H8 : not (eq P A2)
H4 : not (eq A1 A2)
H6 : not (eq P A1)
H5 : not (eq Q C1)
H1 : not (Col Q C1 P)
H0 : not (eq P Q)
HQL : Col Q A1 A2
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
H : not (eq P C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC1 : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
aip : alternate_interior_angles_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp P C1 P Q
+++++
apply perp_left_comm.
-----
Lemma alternate_interior__playfair_aux : alternate_interior_angles_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.
Proof.
intros aip A1 A2 B1 B2 C1 C2 P HPerp2 HNC1 HPB HCop HParAC HPC.
elim(eq_dec_points P C1).
intro; subst C1; auto.
intro.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQL _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert_diffs.
assert(HB3 : exists B3, Col B1 B2 B3 /\\ B3 <> P).
destruct HB3 as [B3 []].
assert(Col P C1 B3); [|ColR].
assert_diffs.
apply (cop_perp2__col _ _ _ P Q); auto; [| |apply (perp_col2 B1 B2); Col].
assert (Coplanar A1 A2 P B3) by (apply col2_cop__cop with B1 B2; Col; Cop).
assert (Coplanar A1 A2 C1 C2) by (apply pars__coplanar; auto).
assert (Coplanar A1 A2 P C1) by (apply col2_cop__cop with C1 C2; Col; Cop).
assert (Coplanar A1 A2 P Q) by (apply coplanar_perm_1, col__coplanar; Col).
CopR.
apply perp_left_comm.

*****
H9 : not (eq B3 P)
H7 : Col B1 B2 B3
B3 : Tpoint
H2 : not (eq C1 C2)
H3 : not (eq B1 B2)
H8 : not (eq P A2)
H4 : not (eq A1 A2)
H6 : not (eq P A1)
H5 : not (eq Q C1)
H1 : not (Col Q C1 P)
H0 : not (eq P Q)
HQL : Col Q A1 A2
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
H : not (eq P C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC1 : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
aip : alternate_interior_angles_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp C1 P P Q
+++++
apply per_perp; auto.
-----
Lemma alternate_interior__playfair_aux : alternate_interior_angles_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.
Proof.
intros aip A1 A2 B1 B2 C1 C2 P HPerp2 HNC1 HPB HCop HParAC HPC.
elim(eq_dec_points P C1).
intro; subst C1; auto.
intro.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQL _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert_diffs.
assert(HB3 : exists B3, Col B1 B2 B3 /\\ B3 <> P).
destruct HB3 as [B3 []].
assert(Col P C1 B3); [|ColR].
assert_diffs.
apply (cop_perp2__col _ _ _ P Q); auto; [| |apply (perp_col2 B1 B2); Col].
assert (Coplanar A1 A2 P B3) by (apply col2_cop__cop with B1 B2; Col; Cop).
assert (Coplanar A1 A2 C1 C2) by (apply pars__coplanar; auto).
assert (Coplanar A1 A2 P C1) by (apply col2_cop__cop with C1 C2; Col; Cop).
assert (Coplanar A1 A2 P Q) by (apply coplanar_perm_1, col__coplanar; Col).
CopR.
apply perp_left_comm.
apply per_perp; auto.

*****
H9 : not (eq B3 P)
H7 : Col B1 B2 B3
B3 : Tpoint
H2 : not (eq C1 C2)
H3 : not (eq B1 B2)
H8 : not (eq P A2)
H4 : not (eq A1 A2)
H6 : not (eq P A1)
H5 : not (eq Q C1)
H1 : not (Col Q C1 P)
H0 : not (eq P Q)
HQL : Col Q A1 A2
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
H : not (eq P C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC1 : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
aip : alternate_interior_angles_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per C1 P Q
+++++
assert(HA3 : exists A3, Col A1 A2 A3 /\ TS P Q C1 A3).
-----
Lemma alternate_interior__playfair_aux : alternate_interior_angles_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.
Proof.
intros aip A1 A2 B1 B2 C1 C2 P HPerp2 HNC1 HPB HCop HParAC HPC.
elim(eq_dec_points P C1).
intro; subst C1; auto.
intro.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQL _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert_diffs.
assert(HB3 : exists B3, Col B1 B2 B3 /\\ B3 <> P).
destruct HB3 as [B3 []].
assert(Col P C1 B3); [|ColR].
assert_diffs.
apply (cop_perp2__col _ _ _ P Q); auto; [| |apply (perp_col2 B1 B2); Col].
assert (Coplanar A1 A2 P B3) by (apply col2_cop__cop with B1 B2; Col; Cop).
assert (Coplanar A1 A2 C1 C2) by (apply pars__coplanar; auto).
assert (Coplanar A1 A2 P C1) by (apply col2_cop__cop with C1 C2; Col; Cop).
assert (Coplanar A1 A2 P Q) by (apply coplanar_perm_1, col__coplanar; Col).
CopR.
apply perp_left_comm.
apply per_perp; auto.
assert(HA3 : exists A3, Col A1 A2 A3 /\\ TS P Q C1 A3).

*****
H9 : not (eq B3 P)
H7 : Col B1 B2 B3
B3 : Tpoint
H2 : not (eq C1 C2)
H3 : not (eq B1 B2)
H8 : not (eq P A2)
H4 : not (eq A1 A2)
H6 : not (eq P A1)
H5 : not (eq Q C1)
H1 : not (Col Q C1 P)
H0 : not (eq P Q)
HQL : Col Q A1 A2
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
H : not (eq P C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC1 : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
aip : alternate_interior_angles_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun A3 : Tpoint => and (Col A1 A2 A3) (TS P Q C1 A3))
+++++
elim(col_dec P Q A1); [|intro; apply (cop_not_par_other_side _ _ _ _ Q); Col].
-----
Lemma alternate_interior__playfair_aux : alternate_interior_angles_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.
Proof.
intros aip A1 A2 B1 B2 C1 C2 P HPerp2 HNC1 HPB HCop HParAC HPC.
elim(eq_dec_points P C1).
intro; subst C1; auto.
intro.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQL _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert_diffs.
assert(HB3 : exists B3, Col B1 B2 B3 /\\ B3 <> P).
destruct HB3 as [B3 []].
assert(Col P C1 B3); [|ColR].
assert_diffs.
apply (cop_perp2__col _ _ _ P Q); auto; [| |apply (perp_col2 B1 B2); Col].
assert (Coplanar A1 A2 P B3) by (apply col2_cop__cop with B1 B2; Col; Cop).
assert (Coplanar A1 A2 C1 C2) by (apply pars__coplanar; auto).
assert (Coplanar A1 A2 P C1) by (apply col2_cop__cop with C1 C2; Col; Cop).
assert (Coplanar A1 A2 P Q) by (apply coplanar_perm_1, col__coplanar; Col).
CopR.
apply perp_left_comm.
apply per_perp; auto.
assert(HA3 : exists A3, Col A1 A2 A3 /\\ TS P Q C1 A3).
elim(col_dec P Q A1); [|intro; apply (cop_not_par_other_side _ _ _ _ Q); Col].

*****
H9 : not (eq B3 P)
H7 : Col B1 B2 B3
B3 : Tpoint
H2 : not (eq C1 C2)
H3 : not (eq B1 B2)
H8 : not (eq P A2)
H4 : not (eq A1 A2)
H6 : not (eq P A1)
H5 : not (eq Q C1)
H1 : not (Col Q C1 P)
H0 : not (eq P Q)
HQL : Col Q A1 A2
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
H : not (eq P C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC1 : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
aip : alternate_interior_angles_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : Col P Q A1, ex (fun A3 : Tpoint => and (Col A1 A2 A3) (TS P Q C1 A3))
+++++
intro.
-----
Lemma alternate_interior__playfair_aux : alternate_interior_angles_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.
Proof.
intros aip A1 A2 B1 B2 C1 C2 P HPerp2 HNC1 HPB HCop HParAC HPC.
elim(eq_dec_points P C1).
intro; subst C1; auto.
intro.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQL _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert_diffs.
assert(HB3 : exists B3, Col B1 B2 B3 /\\ B3 <> P).
destruct HB3 as [B3 []].
assert(Col P C1 B3); [|ColR].
assert_diffs.
apply (cop_perp2__col _ _ _ P Q); auto; [| |apply (perp_col2 B1 B2); Col].
assert (Coplanar A1 A2 P B3) by (apply col2_cop__cop with B1 B2; Col; Cop).
assert (Coplanar A1 A2 C1 C2) by (apply pars__coplanar; auto).
assert (Coplanar A1 A2 P C1) by (apply col2_cop__cop with C1 C2; Col; Cop).
assert (Coplanar A1 A2 P Q) by (apply coplanar_perm_1, col__coplanar; Col).
CopR.
apply perp_left_comm.
apply per_perp; auto.
assert(HA3 : exists A3, Col A1 A2 A3 /\\ TS P Q C1 A3).
elim(col_dec P Q A1); [|intro; apply (cop_not_par_other_side _ _ _ _ Q); Col].
intro.

*****
H10 : Col P Q A1
H9 : not (eq B3 P)
H7 : Col B1 B2 B3
B3 : Tpoint
H2 : not (eq C1 C2)
H3 : not (eq B1 B2)
H8 : not (eq P A2)
H4 : not (eq A1 A2)
H6 : not (eq P A1)
H5 : not (eq Q C1)
H1 : not (Col Q C1 P)
H0 : not (eq P Q)
HQL : Col Q A1 A2
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
H : not (eq P C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC1 : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
aip : alternate_interior_angles_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun A3 : Tpoint => and (Col A1 A2 A3) (TS P Q C1 A3))
+++++
assert(HA3 := cop_not_par_other_side P Q A2 A1 Q C1).
-----
Lemma alternate_interior__playfair_aux : alternate_interior_angles_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.
Proof.
intros aip A1 A2 B1 B2 C1 C2 P HPerp2 HNC1 HPB HCop HParAC HPC.
elim(eq_dec_points P C1).
intro; subst C1; auto.
intro.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQL _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert_diffs.
assert(HB3 : exists B3, Col B1 B2 B3 /\\ B3 <> P).
destruct HB3 as [B3 []].
assert(Col P C1 B3); [|ColR].
assert_diffs.
apply (cop_perp2__col _ _ _ P Q); auto; [| |apply (perp_col2 B1 B2); Col].
assert (Coplanar A1 A2 P B3) by (apply col2_cop__cop with B1 B2; Col; Cop).
assert (Coplanar A1 A2 C1 C2) by (apply pars__coplanar; auto).
assert (Coplanar A1 A2 P C1) by (apply col2_cop__cop with C1 C2; Col; Cop).
assert (Coplanar A1 A2 P Q) by (apply coplanar_perm_1, col__coplanar; Col).
CopR.
apply perp_left_comm.
apply per_perp; auto.
assert(HA3 : exists A3, Col A1 A2 A3 /\\ TS P Q C1 A3).
elim(col_dec P Q A1); [|intro; apply (cop_not_par_other_side _ _ _ _ Q); Col].
intro.
assert(HA3 := cop_not_par_other_side P Q A2 A1 Q C1).

*****
HA3 : forall (_ : not (eq A2 A1)) (_ : Col P Q Q) (_ : Col A2 A1 Q)\n (_ : not (Col P Q A2)) (_ : not (Col P Q C1))\n (_ : Coplanar P Q A2 C1),\nex (fun Q0 : Tpoint => and (Col A2 A1 Q0) (TS P Q C1 Q0))
H10 : Col P Q A1
H9 : not (eq B3 P)
H7 : Col B1 B2 B3
B3 : Tpoint
H2 : not (eq C1 C2)
H3 : not (eq B1 B2)
H8 : not (eq P A2)
H4 : not (eq A1 A2)
H6 : not (eq P A1)
H5 : not (eq Q C1)
H1 : not (Col Q C1 P)
H0 : not (eq P Q)
HQL : Col Q A1 A2
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
H : not (eq P C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC1 : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
aip : alternate_interior_angles_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun A3 : Tpoint => and (Col A1 A2 A3) (TS P Q C1 A3))
+++++
destruct HA3 as [A3 []]; Col; [intro; apply HStrict; ColR| |].
-----
Lemma alternate_interior__playfair_aux : alternate_interior_angles_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.
Proof.
intros aip A1 A2 B1 B2 C1 C2 P HPerp2 HNC1 HPB HCop HParAC HPC.
elim(eq_dec_points P C1).
intro; subst C1; auto.
intro.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQL _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert_diffs.
assert(HB3 : exists B3, Col B1 B2 B3 /\\ B3 <> P).
destruct HB3 as [B3 []].
assert(Col P C1 B3); [|ColR].
assert_diffs.
apply (cop_perp2__col _ _ _ P Q); auto; [| |apply (perp_col2 B1 B2); Col].
assert (Coplanar A1 A2 P B3) by (apply col2_cop__cop with B1 B2; Col; Cop).
assert (Coplanar A1 A2 C1 C2) by (apply pars__coplanar; auto).
assert (Coplanar A1 A2 P C1) by (apply col2_cop__cop with C1 C2; Col; Cop).
assert (Coplanar A1 A2 P Q) by (apply coplanar_perm_1, col__coplanar; Col).
CopR.
apply perp_left_comm.
apply per_perp; auto.
assert(HA3 : exists A3, Col A1 A2 A3 /\\ TS P Q C1 A3).
elim(col_dec P Q A1); [|intro; apply (cop_not_par_other_side _ _ _ _ Q); Col].
intro.
assert(HA3 := cop_not_par_other_side P Q A2 A1 Q C1).
destruct HA3 as [A3 []]; Col; [intro; apply HStrict; ColR| |].

*****
H10 : Col P Q A1
H9 : not (eq B3 P)
H7 : Col B1 B2 B3
B3 : Tpoint
H2 : not (eq C1 C2)
H3 : not (eq B1 B2)
H8 : not (eq P A2)
H4 : not (eq A1 A2)
H6 : not (eq P A1)
H5 : not (eq Q C1)
H1 : not (Col Q C1 P)
H0 : not (eq P Q)
HQL : Col Q A1 A2
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
H : not (eq P C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC1 : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
aip : alternate_interior_angles_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar P Q A2 C1
+++++
assert (Coplanar A1 A2 C1 C2) by (apply pars__coplanar; auto).
-----
Lemma alternate_interior__playfair_aux : alternate_interior_angles_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.
Proof.
intros aip A1 A2 B1 B2 C1 C2 P HPerp2 HNC1 HPB HCop HParAC HPC.
elim(eq_dec_points P C1).
intro; subst C1; auto.
intro.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQL _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert_diffs.
assert(HB3 : exists B3, Col B1 B2 B3 /\\ B3 <> P).
destruct HB3 as [B3 []].
assert(Col P C1 B3); [|ColR].
assert_diffs.
apply (cop_perp2__col _ _ _ P Q); auto; [| |apply (perp_col2 B1 B2); Col].
assert (Coplanar A1 A2 P B3) by (apply col2_cop__cop with B1 B2; Col; Cop).
assert (Coplanar A1 A2 C1 C2) by (apply pars__coplanar; auto).
assert (Coplanar A1 A2 P C1) by (apply col2_cop__cop with C1 C2; Col; Cop).
assert (Coplanar A1 A2 P Q) by (apply coplanar_perm_1, col__coplanar; Col).
CopR.
apply perp_left_comm.
apply per_perp; auto.
assert(HA3 : exists A3, Col A1 A2 A3 /\\ TS P Q C1 A3).
elim(col_dec P Q A1); [|intro; apply (cop_not_par_other_side _ _ _ _ Q); Col].
intro.
assert(HA3 := cop_not_par_other_side P Q A2 A1 Q C1).
destruct HA3 as [A3 []]; Col; [intro; apply HStrict; ColR| |].
assert (Coplanar A1 A2 C1 C2) by (apply pars__coplanar; auto).

*****
H11 : Coplanar A1 A2 C1 C2
H10 : Col P Q A1
H9 : not (eq B3 P)
H7 : Col B1 B2 B3
B3 : Tpoint
H2 : not (eq C1 C2)
H3 : not (eq B1 B2)
H8 : not (eq P A2)
H4 : not (eq A1 A2)
H6 : not (eq P A1)
H5 : not (eq Q C1)
H1 : not (Col Q C1 P)
H0 : not (eq P Q)
HQL : Col Q A1 A2
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
H : not (eq P C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC1 : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
aip : alternate_interior_angles_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar P Q A2 C1
+++++
assert (Coplanar A1 A2 P C1) by (apply col2_cop__cop with C1 C2; Col; Cop).
-----
Lemma alternate_interior__playfair_aux : alternate_interior_angles_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.
Proof.
intros aip A1 A2 B1 B2 C1 C2 P HPerp2 HNC1 HPB HCop HParAC HPC.
elim(eq_dec_points P C1).
intro; subst C1; auto.
intro.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQL _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert_diffs.
assert(HB3 : exists B3, Col B1 B2 B3 /\\ B3 <> P).
destruct HB3 as [B3 []].
assert(Col P C1 B3); [|ColR].
assert_diffs.
apply (cop_perp2__col _ _ _ P Q); auto; [| |apply (perp_col2 B1 B2); Col].
assert (Coplanar A1 A2 P B3) by (apply col2_cop__cop with B1 B2; Col; Cop).
assert (Coplanar A1 A2 C1 C2) by (apply pars__coplanar; auto).
assert (Coplanar A1 A2 P C1) by (apply col2_cop__cop with C1 C2; Col; Cop).
assert (Coplanar A1 A2 P Q) by (apply coplanar_perm_1, col__coplanar; Col).
CopR.
apply perp_left_comm.
apply per_perp; auto.
assert(HA3 : exists A3, Col A1 A2 A3 /\\ TS P Q C1 A3).
elim(col_dec P Q A1); [|intro; apply (cop_not_par_other_side _ _ _ _ Q); Col].
intro.
assert(HA3 := cop_not_par_other_side P Q A2 A1 Q C1).
destruct HA3 as [A3 []]; Col; [intro; apply HStrict; ColR| |].
assert (Coplanar A1 A2 C1 C2) by (apply pars__coplanar; auto).
assert (Coplanar A1 A2 P C1) by (apply col2_cop__cop with C1 C2; Col; Cop).

*****
H12 : Coplanar A1 A2 P C1
H11 : Coplanar A1 A2 C1 C2
H10 : Col P Q A1
H9 : not (eq B3 P)
H7 : Col B1 B2 B3
B3 : Tpoint
H2 : not (eq C1 C2)
H3 : not (eq B1 B2)
H8 : not (eq P A2)
H4 : not (eq A1 A2)
H6 : not (eq P A1)
H5 : not (eq Q C1)
H1 : not (Col Q C1 P)
H0 : not (eq P Q)
HQL : Col Q A1 A2
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
H : not (eq P C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC1 : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
aip : alternate_interior_angles_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar P Q A2 C1
+++++
assert (Coplanar A1 A2 P Q) by (apply coplanar_perm_1, col__coplanar; Col).
-----
Lemma alternate_interior__playfair_aux : alternate_interior_angles_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.
Proof.
intros aip A1 A2 B1 B2 C1 C2 P HPerp2 HNC1 HPB HCop HParAC HPC.
elim(eq_dec_points P C1).
intro; subst C1; auto.
intro.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQL _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert_diffs.
assert(HB3 : exists B3, Col B1 B2 B3 /\\ B3 <> P).
destruct HB3 as [B3 []].
assert(Col P C1 B3); [|ColR].
assert_diffs.
apply (cop_perp2__col _ _ _ P Q); auto; [| |apply (perp_col2 B1 B2); Col].
assert (Coplanar A1 A2 P B3) by (apply col2_cop__cop with B1 B2; Col; Cop).
assert (Coplanar A1 A2 C1 C2) by (apply pars__coplanar; auto).
assert (Coplanar A1 A2 P C1) by (apply col2_cop__cop with C1 C2; Col; Cop).
assert (Coplanar A1 A2 P Q) by (apply coplanar_perm_1, col__coplanar; Col).
CopR.
apply perp_left_comm.
apply per_perp; auto.
assert(HA3 : exists A3, Col A1 A2 A3 /\\ TS P Q C1 A3).
elim(col_dec P Q A1); [|intro; apply (cop_not_par_other_side _ _ _ _ Q); Col].
intro.
assert(HA3 := cop_not_par_other_side P Q A2 A1 Q C1).
destruct HA3 as [A3 []]; Col; [intro; apply HStrict; ColR| |].
assert (Coplanar A1 A2 C1 C2) by (apply pars__coplanar; auto).
assert (Coplanar A1 A2 P C1) by (apply col2_cop__cop with C1 C2; Col; Cop).
assert (Coplanar A1 A2 P Q) by (apply coplanar_perm_1, col__coplanar; Col).

*****
H13 : Coplanar A1 A2 P Q
H12 : Coplanar A1 A2 P C1
H11 : Coplanar A1 A2 C1 C2
H10 : Col P Q A1
H9 : not (eq B3 P)
H7 : Col B1 B2 B3
B3 : Tpoint
H2 : not (eq C1 C2)
H3 : not (eq B1 B2)
H8 : not (eq P A2)
H4 : not (eq A1 A2)
H6 : not (eq P A1)
H5 : not (eq Q C1)
H1 : not (Col Q C1 P)
H0 : not (eq P Q)
HQL : Col Q A1 A2
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
H : not (eq P C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC1 : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
aip : alternate_interior_angles_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar P Q A2 C1
+++++
CopR.
-----
Lemma alternate_interior__playfair_aux : alternate_interior_angles_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.
Proof.
intros aip A1 A2 B1 B2 C1 C2 P HPerp2 HNC1 HPB HCop HParAC HPC.
elim(eq_dec_points P C1).
intro; subst C1; auto.
intro.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQL _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert_diffs.
assert(HB3 : exists B3, Col B1 B2 B3 /\\ B3 <> P).
destruct HB3 as [B3 []].
assert(Col P C1 B3); [|ColR].
assert_diffs.
apply (cop_perp2__col _ _ _ P Q); auto; [| |apply (perp_col2 B1 B2); Col].
assert (Coplanar A1 A2 P B3) by (apply col2_cop__cop with B1 B2; Col; Cop).
assert (Coplanar A1 A2 C1 C2) by (apply pars__coplanar; auto).
assert (Coplanar A1 A2 P C1) by (apply col2_cop__cop with C1 C2; Col; Cop).
assert (Coplanar A1 A2 P Q) by (apply coplanar_perm_1, col__coplanar; Col).
CopR.
apply perp_left_comm.
apply per_perp; auto.
assert(HA3 : exists A3, Col A1 A2 A3 /\\ TS P Q C1 A3).
elim(col_dec P Q A1); [|intro; apply (cop_not_par_other_side _ _ _ _ Q); Col].
intro.
assert(HA3 := cop_not_par_other_side P Q A2 A1 Q C1).
destruct HA3 as [A3 []]; Col; [intro; apply HStrict; ColR| |].
assert (Coplanar A1 A2 C1 C2) by (apply pars__coplanar; auto).
assert (Coplanar A1 A2 P C1) by (apply col2_cop__cop with C1 C2; Col; Cop).
assert (Coplanar A1 A2 P Q) by (apply coplanar_perm_1, col__coplanar; Col).
CopR.

*****
H12 : TS P Q C1 A3
H11 : Col A2 A1 A3
A3 : Tpoint
H10 : Col P Q A1
H9 : not (eq B3 P)
H7 : Col B1 B2 B3
B3 : Tpoint
H2 : not (eq C1 C2)
H3 : not (eq B1 B2)
H8 : not (eq P A2)
H4 : not (eq A1 A2)
H6 : not (eq P A1)
H5 : not (eq Q C1)
H1 : not (Col Q C1 P)
H0 : not (eq P Q)
HQL : Col Q A1 A2
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
H : not (eq P C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC1 : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
aip : alternate_interior_angles_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun A3 : Tpoint => and (Col A1 A2 A3) (TS P Q C1 A3))
+++++
exists A3; split; Col.
-----
Lemma alternate_interior__playfair_aux : alternate_interior_angles_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.
Proof.
intros aip A1 A2 B1 B2 C1 C2 P HPerp2 HNC1 HPB HCop HParAC HPC.
elim(eq_dec_points P C1).
intro; subst C1; auto.
intro.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQL _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert_diffs.
assert(HB3 : exists B3, Col B1 B2 B3 /\\ B3 <> P).
destruct HB3 as [B3 []].
assert(Col P C1 B3); [|ColR].
assert_diffs.
apply (cop_perp2__col _ _ _ P Q); auto; [| |apply (perp_col2 B1 B2); Col].
assert (Coplanar A1 A2 P B3) by (apply col2_cop__cop with B1 B2; Col; Cop).
assert (Coplanar A1 A2 C1 C2) by (apply pars__coplanar; auto).
assert (Coplanar A1 A2 P C1) by (apply col2_cop__cop with C1 C2; Col; Cop).
assert (Coplanar A1 A2 P Q) by (apply coplanar_perm_1, col__coplanar; Col).
CopR.
apply perp_left_comm.
apply per_perp; auto.
assert(HA3 : exists A3, Col A1 A2 A3 /\\ TS P Q C1 A3).
elim(col_dec P Q A1); [|intro; apply (cop_not_par_other_side _ _ _ _ Q); Col].

*****
H10 : not (Col P Q A1)
H9 : not (eq B3 P)
H7 : Col B1 B2 B3
B3 : Tpoint
H2 : not (eq C1 C2)
H3 : not (eq B1 B2)
H8 : not (eq P A2)
H4 : not (eq A1 A2)
H6 : not (eq P A1)
H5 : not (eq Q C1)
H1 : not (Col Q C1 P)
H0 : not (eq P Q)
HQL : Col Q A1 A2
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
H : not (eq P C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC1 : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
aip : alternate_interior_angles_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar P Q A1 C1
+++++
assert (Coplanar A1 A2 C1 C2) by (apply pars__coplanar; auto).
-----
Lemma alternate_interior__playfair_aux : alternate_interior_angles_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.
Proof.
intros aip A1 A2 B1 B2 C1 C2 P HPerp2 HNC1 HPB HCop HParAC HPC.
elim(eq_dec_points P C1).
intro; subst C1; auto.
intro.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQL _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert_diffs.
assert(HB3 : exists B3, Col B1 B2 B3 /\\ B3 <> P).
destruct HB3 as [B3 []].
assert(Col P C1 B3); [|ColR].
assert_diffs.
apply (cop_perp2__col _ _ _ P Q); auto; [| |apply (perp_col2 B1 B2); Col].
assert (Coplanar A1 A2 P B3) by (apply col2_cop__cop with B1 B2; Col; Cop).
assert (Coplanar A1 A2 C1 C2) by (apply pars__coplanar; auto).
assert (Coplanar A1 A2 P C1) by (apply col2_cop__cop with C1 C2; Col; Cop).
assert (Coplanar A1 A2 P Q) by (apply coplanar_perm_1, col__coplanar; Col).
CopR.
apply perp_left_comm.
apply per_perp; auto.
assert(HA3 : exists A3, Col A1 A2 A3 /\\ TS P Q C1 A3).
elim(col_dec P Q A1); [|intro; apply (cop_not_par_other_side _ _ _ _ Q); Col].
assert (Coplanar A1 A2 C1 C2) by (apply pars__coplanar; auto).

*****
H11 : Coplanar A1 A2 C1 C2
H10 : not (Col P Q A1)
H9 : not (eq B3 P)
H7 : Col B1 B2 B3
B3 : Tpoint
H2 : not (eq C1 C2)
H3 : not (eq B1 B2)
H8 : not (eq P A2)
H4 : not (eq A1 A2)
H6 : not (eq P A1)
H5 : not (eq Q C1)
H1 : not (Col Q C1 P)
H0 : not (eq P Q)
HQL : Col Q A1 A2
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
H : not (eq P C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC1 : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
aip : alternate_interior_angles_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar P Q A1 C1
+++++
assert (Coplanar A1 A2 P C1) by (apply col2_cop__cop with C1 C2; Col; Cop).
-----
Lemma alternate_interior__playfair_aux : alternate_interior_angles_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.
Proof.
intros aip A1 A2 B1 B2 C1 C2 P HPerp2 HNC1 HPB HCop HParAC HPC.
elim(eq_dec_points P C1).
intro; subst C1; auto.
intro.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQL _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert_diffs.
assert(HB3 : exists B3, Col B1 B2 B3 /\\ B3 <> P).
destruct HB3 as [B3 []].
assert(Col P C1 B3); [|ColR].
assert_diffs.
apply (cop_perp2__col _ _ _ P Q); auto; [| |apply (perp_col2 B1 B2); Col].
assert (Coplanar A1 A2 P B3) by (apply col2_cop__cop with B1 B2; Col; Cop).
assert (Coplanar A1 A2 C1 C2) by (apply pars__coplanar; auto).
assert (Coplanar A1 A2 P C1) by (apply col2_cop__cop with C1 C2; Col; Cop).
assert (Coplanar A1 A2 P Q) by (apply coplanar_perm_1, col__coplanar; Col).
CopR.
apply perp_left_comm.
apply per_perp; auto.
assert(HA3 : exists A3, Col A1 A2 A3 /\\ TS P Q C1 A3).
elim(col_dec P Q A1); [|intro; apply (cop_not_par_other_side _ _ _ _ Q); Col].
assert (Coplanar A1 A2 C1 C2) by (apply pars__coplanar; auto).
assert (Coplanar A1 A2 P C1) by (apply col2_cop__cop with C1 C2; Col; Cop).

*****
H12 : Coplanar A1 A2 P C1
H11 : Coplanar A1 A2 C1 C2
H10 : not (Col P Q A1)
H9 : not (eq B3 P)
H7 : Col B1 B2 B3
B3 : Tpoint
H2 : not (eq C1 C2)
H3 : not (eq B1 B2)
H8 : not (eq P A2)
H4 : not (eq A1 A2)
H6 : not (eq P A1)
H5 : not (eq Q C1)
H1 : not (Col Q C1 P)
H0 : not (eq P Q)
HQL : Col Q A1 A2
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
H : not (eq P C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC1 : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
aip : alternate_interior_angles_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar P Q A1 C1
+++++
assert (Coplanar A1 A2 P Q) by (apply coplanar_perm_1, col__coplanar; Col).
-----
Lemma alternate_interior__playfair_aux : alternate_interior_angles_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.
Proof.
intros aip A1 A2 B1 B2 C1 C2 P HPerp2 HNC1 HPB HCop HParAC HPC.
elim(eq_dec_points P C1).
intro; subst C1; auto.
intro.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQL _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert_diffs.
assert(HB3 : exists B3, Col B1 B2 B3 /\\ B3 <> P).
destruct HB3 as [B3 []].
assert(Col P C1 B3); [|ColR].
assert_diffs.
apply (cop_perp2__col _ _ _ P Q); auto; [| |apply (perp_col2 B1 B2); Col].
assert (Coplanar A1 A2 P B3) by (apply col2_cop__cop with B1 B2; Col; Cop).
assert (Coplanar A1 A2 C1 C2) by (apply pars__coplanar; auto).
assert (Coplanar A1 A2 P C1) by (apply col2_cop__cop with C1 C2; Col; Cop).
assert (Coplanar A1 A2 P Q) by (apply coplanar_perm_1, col__coplanar; Col).
CopR.
apply perp_left_comm.
apply per_perp; auto.
assert(HA3 : exists A3, Col A1 A2 A3 /\\ TS P Q C1 A3).
elim(col_dec P Q A1); [|intro; apply (cop_not_par_other_side _ _ _ _ Q); Col].
assert (Coplanar A1 A2 C1 C2) by (apply pars__coplanar; auto).
assert (Coplanar A1 A2 P C1) by (apply col2_cop__cop with C1 C2; Col; Cop).
assert (Coplanar A1 A2 P Q) by (apply coplanar_perm_1, col__coplanar; Col).

*****
H13 : Coplanar A1 A2 P Q
H12 : Coplanar A1 A2 P C1
H11 : Coplanar A1 A2 C1 C2
H10 : not (Col P Q A1)
H9 : not (eq B3 P)
H7 : Col B1 B2 B3
B3 : Tpoint
H2 : not (eq C1 C2)
H3 : not (eq B1 B2)
H8 : not (eq P A2)
H4 : not (eq A1 A2)
H6 : not (eq P A1)
H5 : not (eq Q C1)
H1 : not (Col Q C1 P)
H0 : not (eq P Q)
HQL : Col Q A1 A2
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
H : not (eq P C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC1 : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
aip : alternate_interior_angles_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar P Q A1 C1
+++++
CopR.
-----
Lemma alternate_interior__playfair_aux : alternate_interior_angles_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.
Proof.
intros aip A1 A2 B1 B2 C1 C2 P HPerp2 HNC1 HPB HCop HParAC HPC.
elim(eq_dec_points P C1).
intro; subst C1; auto.
intro.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQL _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert_diffs.
assert(HB3 : exists B3, Col B1 B2 B3 /\\ B3 <> P).
destruct HB3 as [B3 []].
assert(Col P C1 B3); [|ColR].
assert_diffs.
apply (cop_perp2__col _ _ _ P Q); auto; [| |apply (perp_col2 B1 B2); Col].
assert (Coplanar A1 A2 P B3) by (apply col2_cop__cop with B1 B2; Col; Cop).
assert (Coplanar A1 A2 C1 C2) by (apply pars__coplanar; auto).
assert (Coplanar A1 A2 P C1) by (apply col2_cop__cop with C1 C2; Col; Cop).
assert (Coplanar A1 A2 P Q) by (apply coplanar_perm_1, col__coplanar; Col).
CopR.
apply perp_left_comm.
apply per_perp; auto.
assert(HA3 : exists A3, Col A1 A2 A3 /\\ TS P Q C1 A3).

*****
HA3 : ex (fun A3 : Tpoint => and (Col A1 A2 A3) (TS P Q C1 A3))
H9 : not (eq B3 P)
H7 : Col B1 B2 B3
B3 : Tpoint
H2 : not (eq C1 C2)
H3 : not (eq B1 B2)
H8 : not (eq P A2)
H4 : not (eq A1 A2)
H6 : not (eq P A1)
H5 : not (eq Q C1)
H1 : not (Col Q C1 P)
H0 : not (eq P Q)
HQL : Col Q A1 A2
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
H : not (eq P C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC1 : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
aip : alternate_interior_angles_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per C1 P Q
+++++
destruct HA3 as [A3 [HA3 Hts]].
-----
Lemma alternate_interior__playfair_aux : alternate_interior_angles_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.
Proof.
intros aip A1 A2 B1 B2 C1 C2 P HPerp2 HNC1 HPB HCop HParAC HPC.
elim(eq_dec_points P C1).
intro; subst C1; auto.
intro.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQL _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert_diffs.
assert(HB3 : exists B3, Col B1 B2 B3 /\\ B3 <> P).
destruct HB3 as [B3 []].
assert(Col P C1 B3); [|ColR].
assert_diffs.
apply (cop_perp2__col _ _ _ P Q); auto; [| |apply (perp_col2 B1 B2); Col].
assert (Coplanar A1 A2 P B3) by (apply col2_cop__cop with B1 B2; Col; Cop).
assert (Coplanar A1 A2 C1 C2) by (apply pars__coplanar; auto).
assert (Coplanar A1 A2 P C1) by (apply col2_cop__cop with C1 C2; Col; Cop).
assert (Coplanar A1 A2 P Q) by (apply coplanar_perm_1, col__coplanar; Col).
CopR.
apply perp_left_comm.
apply per_perp; auto.
assert(HA3 : exists A3, Col A1 A2 A3 /\\ TS P Q C1 A3).
destruct HA3 as [A3 [HA3 Hts]].

*****
Hts : TS P Q C1 A3
HA3 : Col A1 A2 A3
A3 : Tpoint
H9 : not (eq B3 P)
H7 : Col B1 B2 B3
B3 : Tpoint
H2 : not (eq C1 C2)
H3 : not (eq B1 B2)
H8 : not (eq P A2)
H4 : not (eq A1 A2)
H6 : not (eq P A1)
H5 : not (eq Q C1)
H1 : not (Col Q C1 P)
H0 : not (eq P Q)
HQL : Col Q A1 A2
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
H : not (eq P C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC1 : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
aip : alternate_interior_angles_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per C1 P Q
+++++
assert(~ Col A3 P Q) by (destruct Hts as [_ []]; auto).
-----
Lemma alternate_interior__playfair_aux : alternate_interior_angles_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.
Proof.
intros aip A1 A2 B1 B2 C1 C2 P HPerp2 HNC1 HPB HCop HParAC HPC.
elim(eq_dec_points P C1).
intro; subst C1; auto.
intro.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQL _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert_diffs.
assert(HB3 : exists B3, Col B1 B2 B3 /\\ B3 <> P).
destruct HB3 as [B3 []].
assert(Col P C1 B3); [|ColR].
assert_diffs.
apply (cop_perp2__col _ _ _ P Q); auto; [| |apply (perp_col2 B1 B2); Col].
assert (Coplanar A1 A2 P B3) by (apply col2_cop__cop with B1 B2; Col; Cop).
assert (Coplanar A1 A2 C1 C2) by (apply pars__coplanar; auto).
assert (Coplanar A1 A2 P C1) by (apply col2_cop__cop with C1 C2; Col; Cop).
assert (Coplanar A1 A2 P Q) by (apply coplanar_perm_1, col__coplanar; Col).
CopR.
apply perp_left_comm.
apply per_perp; auto.
assert(HA3 : exists A3, Col A1 A2 A3 /\\ TS P Q C1 A3).
destruct HA3 as [A3 [HA3 Hts]].
assert(~ Col A3 P Q) by (destruct Hts as [_ []]; auto).

*****
H10 : not (Col A3 P Q)
Hts : TS P Q C1 A3
HA3 : Col A1 A2 A3
A3 : Tpoint
H9 : not (eq B3 P)
H7 : Col B1 B2 B3
B3 : Tpoint
H2 : not (eq C1 C2)
H3 : not (eq B1 B2)
H8 : not (eq P A2)
H4 : not (eq A1 A2)
H6 : not (eq P A1)
H5 : not (eq Q C1)
H1 : not (Col Q C1 P)
H0 : not (eq P Q)
HQL : Col Q A1 A2
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
H : not (eq P C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC1 : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
aip : alternate_interior_angles_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per C1 P Q
+++++
assert_diffs.
-----
Lemma alternate_interior__playfair_aux : alternate_interior_angles_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.
Proof.
intros aip A1 A2 B1 B2 C1 C2 P HPerp2 HNC1 HPB HCop HParAC HPC.
elim(eq_dec_points P C1).
intro; subst C1; auto.
intro.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQL _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert_diffs.
assert(HB3 : exists B3, Col B1 B2 B3 /\\ B3 <> P).
destruct HB3 as [B3 []].
assert(Col P C1 B3); [|ColR].
assert_diffs.
apply (cop_perp2__col _ _ _ P Q); auto; [| |apply (perp_col2 B1 B2); Col].
assert (Coplanar A1 A2 P B3) by (apply col2_cop__cop with B1 B2; Col; Cop).
assert (Coplanar A1 A2 C1 C2) by (apply pars__coplanar; auto).
assert (Coplanar A1 A2 P C1) by (apply col2_cop__cop with C1 C2; Col; Cop).
assert (Coplanar A1 A2 P Q) by (apply coplanar_perm_1, col__coplanar; Col).
CopR.
apply perp_left_comm.
apply per_perp; auto.
assert(HA3 : exists A3, Col A1 A2 A3 /\\ TS P Q C1 A3).
destruct HA3 as [A3 [HA3 Hts]].
assert(~ Col A3 P Q) by (destruct Hts as [_ []]; auto).
assert_diffs.

*****
H20 : not (eq C1 A3)
H16 : not (eq A3 Q)
H14 : not (eq A3 P)
H10 : not (Col A3 P Q)
Hts : TS P Q C1 A3
HA3 : Col A1 A2 A3
A3 : Tpoint
H9 : not (eq B3 P)
H7 : Col B1 B2 B3
B3 : Tpoint
H2 : not (eq C1 C2)
H3 : not (eq B1 B2)
H8 : not (eq P A2)
H4 : not (eq A1 A2)
H6 : not (eq P A1)
H5 : not (eq Q C1)
H1 : not (Col Q C1 P)
H0 : not (eq P Q)
HQL : Col Q A1 A2
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
H : not (eq P C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC1 : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
aip : alternate_interior_angles_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per C1 P Q
+++++
apply (l11_17 A3 Q P).
-----
Lemma alternate_interior__playfair_aux : alternate_interior_angles_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.
Proof.
intros aip A1 A2 B1 B2 C1 C2 P HPerp2 HNC1 HPB HCop HParAC HPC.
elim(eq_dec_points P C1).
intro; subst C1; auto.
intro.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQL _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert_diffs.
assert(HB3 : exists B3, Col B1 B2 B3 /\\ B3 <> P).
destruct HB3 as [B3 []].
assert(Col P C1 B3); [|ColR].
assert_diffs.
apply (cop_perp2__col _ _ _ P Q); auto; [| |apply (perp_col2 B1 B2); Col].
assert (Coplanar A1 A2 P B3) by (apply col2_cop__cop with B1 B2; Col; Cop).
assert (Coplanar A1 A2 C1 C2) by (apply pars__coplanar; auto).
assert (Coplanar A1 A2 P C1) by (apply col2_cop__cop with C1 C2; Col; Cop).
assert (Coplanar A1 A2 P Q) by (apply coplanar_perm_1, col__coplanar; Col).
CopR.
apply perp_left_comm.
apply per_perp; auto.
assert(HA3 : exists A3, Col A1 A2 A3 /\\ TS P Q C1 A3).
destruct HA3 as [A3 [HA3 Hts]].
assert(~ Col A3 P Q) by (destruct Hts as [_ []]; auto).
assert_diffs.
apply (l11_17 A3 Q P).

*****
H20 : not (eq C1 A3)
H16 : not (eq A3 Q)
H14 : not (eq A3 P)
H10 : not (Col A3 P Q)
Hts : TS P Q C1 A3
HA3 : Col A1 A2 A3
A3 : Tpoint
H9 : not (eq B3 P)
H7 : Col B1 B2 B3
B3 : Tpoint
H2 : not (eq C1 C2)
H3 : not (eq B1 B2)
H8 : not (eq P A2)
H4 : not (eq A1 A2)
H6 : not (eq P A1)
H5 : not (eq Q C1)
H1 : not (Col Q C1 P)
H0 : not (eq P Q)
HQL : Col Q A1 A2
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
H : not (eq P C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC1 : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
aip : alternate_interior_angles_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per A3 Q P
+++++
apply perp_per_1; auto; apply (perp_col2 A1 A2); Col.
-----
Lemma alternate_interior__playfair_aux : alternate_interior_angles_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.
Proof.
intros aip A1 A2 B1 B2 C1 C2 P HPerp2 HNC1 HPB HCop HParAC HPC.
elim(eq_dec_points P C1).
intro; subst C1; auto.
intro.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQL _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert_diffs.
assert(HB3 : exists B3, Col B1 B2 B3 /\\ B3 <> P).
destruct HB3 as [B3 []].
assert(Col P C1 B3); [|ColR].
assert_diffs.
apply (cop_perp2__col _ _ _ P Q); auto; [| |apply (perp_col2 B1 B2); Col].
assert (Coplanar A1 A2 P B3) by (apply col2_cop__cop with B1 B2; Col; Cop).
assert (Coplanar A1 A2 C1 C2) by (apply pars__coplanar; auto).
assert (Coplanar A1 A2 P C1) by (apply col2_cop__cop with C1 C2; Col; Cop).
assert (Coplanar A1 A2 P Q) by (apply coplanar_perm_1, col__coplanar; Col).
CopR.
apply perp_left_comm.
apply per_perp; auto.
assert(HA3 : exists A3, Col A1 A2 A3 /\\ TS P Q C1 A3).
destruct HA3 as [A3 [HA3 Hts]].
assert(~ Col A3 P Q) by (destruct Hts as [_ []]; auto).
assert_diffs.
apply (l11_17 A3 Q P).
apply perp_per_1; auto; apply (perp_col2 A1 A2); Col.

*****
H20 : not (eq C1 A3)
H16 : not (eq A3 Q)
H14 : not (eq A3 P)
H10 : not (Col A3 P Q)
Hts : TS P Q C1 A3
HA3 : Col A1 A2 A3
A3 : Tpoint
H9 : not (eq B3 P)
H7 : Col B1 B2 B3
B3 : Tpoint
H2 : not (eq C1 C2)
H3 : not (eq B1 B2)
H8 : not (eq P A2)
H4 : not (eq A1 A2)
H6 : not (eq P A1)
H5 : not (eq Q C1)
H1 : not (Col Q C1 P)
H0 : not (eq P Q)
HQL : Col Q A1 A2
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
H : not (eq P C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC1 : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
aip : alternate_interior_angles_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
CongA A3 Q P C1 P Q
+++++
apply conga_sym.
-----
Lemma alternate_interior__playfair_aux : alternate_interior_angles_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.
Proof.
intros aip A1 A2 B1 B2 C1 C2 P HPerp2 HNC1 HPB HCop HParAC HPC.
elim(eq_dec_points P C1).
intro; subst C1; auto.
intro.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQL _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert_diffs.
assert(HB3 : exists B3, Col B1 B2 B3 /\\ B3 <> P).
destruct HB3 as [B3 []].
assert(Col P C1 B3); [|ColR].
assert_diffs.
apply (cop_perp2__col _ _ _ P Q); auto; [| |apply (perp_col2 B1 B2); Col].
assert (Coplanar A1 A2 P B3) by (apply col2_cop__cop with B1 B2; Col; Cop).
assert (Coplanar A1 A2 C1 C2) by (apply pars__coplanar; auto).
assert (Coplanar A1 A2 P C1) by (apply col2_cop__cop with C1 C2; Col; Cop).
assert (Coplanar A1 A2 P Q) by (apply coplanar_perm_1, col__coplanar; Col).
CopR.
apply perp_left_comm.
apply per_perp; auto.
assert(HA3 : exists A3, Col A1 A2 A3 /\\ TS P Q C1 A3).
destruct HA3 as [A3 [HA3 Hts]].
assert(~ Col A3 P Q) by (destruct Hts as [_ []]; auto).
assert_diffs.
apply (l11_17 A3 Q P).
apply perp_per_1; auto; apply (perp_col2 A1 A2); Col.
apply conga_sym.

*****
H20 : not (eq C1 A3)
H16 : not (eq A3 Q)
H14 : not (eq A3 P)
H10 : not (Col A3 P Q)
Hts : TS P Q C1 A3
HA3 : Col A1 A2 A3
A3 : Tpoint
H9 : not (eq B3 P)
H7 : Col B1 B2 B3
B3 : Tpoint
H2 : not (eq C1 C2)
H3 : not (eq B1 B2)
H8 : not (eq P A2)
H4 : not (eq A1 A2)
H6 : not (eq P A1)
H5 : not (eq Q C1)
H1 : not (Col Q C1 P)
H0 : not (eq P Q)
HQL : Col Q A1 A2
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
H : not (eq P C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC1 : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
aip : alternate_interior_angles_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
CongA C1 P Q A3 Q P
+++++
apply aip; auto.
-----
Lemma alternate_interior__playfair_aux : alternate_interior_angles_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.
Proof.
intros aip A1 A2 B1 B2 C1 C2 P HPerp2 HNC1 HPB HCop HParAC HPC.
elim(eq_dec_points P C1).
intro; subst C1; auto.
intro.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQL _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert_diffs.
assert(HB3 : exists B3, Col B1 B2 B3 /\\ B3 <> P).
destruct HB3 as [B3 []].
assert(Col P C1 B3); [|ColR].
assert_diffs.
apply (cop_perp2__col _ _ _ P Q); auto; [| |apply (perp_col2 B1 B2); Col].
assert (Coplanar A1 A2 P B3) by (apply col2_cop__cop with B1 B2; Col; Cop).
assert (Coplanar A1 A2 C1 C2) by (apply pars__coplanar; auto).
assert (Coplanar A1 A2 P C1) by (apply col2_cop__cop with C1 C2; Col; Cop).
assert (Coplanar A1 A2 P Q) by (apply coplanar_perm_1, col__coplanar; Col).
CopR.
apply perp_left_comm.
apply per_perp; auto.
assert(HA3 : exists A3, Col A1 A2 A3 /\\ TS P Q C1 A3).
destruct HA3 as [A3 [HA3 Hts]].
assert(~ Col A3 P Q) by (destruct Hts as [_ []]; auto).
assert_diffs.
apply (l11_17 A3 Q P).
apply perp_per_1; auto; apply (perp_col2 A1 A2); Col.
apply conga_sym.
apply aip; auto.

*****
H20 : not (eq C1 A3)
H16 : not (eq A3 Q)
H14 : not (eq A3 P)
H10 : not (Col A3 P Q)
Hts : TS P Q C1 A3
HA3 : Col A1 A2 A3
A3 : Tpoint
H9 : not (eq B3 P)
H7 : Col B1 B2 B3
B3 : Tpoint
H2 : not (eq C1 C2)
H3 : not (eq B1 B2)
H8 : not (eq P A2)
H4 : not (eq A1 A2)
H6 : not (eq P A1)
H5 : not (eq Q C1)
H1 : not (Col Q C1 P)
H0 : not (eq P Q)
HQL : Col Q A1 A2
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
H : not (eq P C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC1 : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
aip : alternate_interior_angles_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par P C1 Q A3
+++++
apply (par_col4__par C1 C2 A1 A2); Col.
-----
Lemma alternate_interior__playfair_aux : alternate_interior_angles_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.
Proof.
intros aip A1 A2 B1 B2 C1 C2 P HPerp2 HNC1 HPB HCop HParAC HPC.
elim(eq_dec_points P C1).
intro; subst C1; auto.
intro.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQL _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert_diffs.
assert(HB3 : exists B3, Col B1 B2 B3 /\\ B3 <> P).
destruct HB3 as [B3 []].
assert(Col P C1 B3); [|ColR].
assert_diffs.
apply (cop_perp2__col _ _ _ P Q); auto; [| |apply (perp_col2 B1 B2); Col].
assert (Coplanar A1 A2 P B3) by (apply col2_cop__cop with B1 B2; Col; Cop).
assert (Coplanar A1 A2 C1 C2) by (apply pars__coplanar; auto).
assert (Coplanar A1 A2 P C1) by (apply col2_cop__cop with C1 C2; Col; Cop).
assert (Coplanar A1 A2 P Q) by (apply coplanar_perm_1, col__coplanar; Col).
CopR.
apply perp_left_comm.
apply per_perp; auto.
assert(HA3 : exists A3, Col A1 A2 A3 /\\ TS P Q C1 A3).
destruct HA3 as [A3 [HA3 Hts]].
assert(~ Col A3 P Q) by (destruct Hts as [_ []]; auto).
assert_diffs.
apply (l11_17 A3 Q P).
apply perp_per_1; auto; apply (perp_col2 A1 A2); Col.
apply conga_sym.
apply aip; auto.
apply (par_col4__par C1 C2 A1 A2); Col.

*****
H20 : not (eq C1 A3)
H16 : not (eq A3 Q)
H14 : not (eq A3 P)
H10 : not (Col A3 P Q)
Hts : TS P Q C1 A3
HA3 : Col A1 A2 A3
A3 : Tpoint
H9 : not (eq B3 P)
H7 : Col B1 B2 B3
B3 : Tpoint
H2 : not (eq C1 C2)
H3 : not (eq B1 B2)
H8 : not (eq P A2)
H4 : not (eq A1 A2)
H6 : not (eq P A1)
H5 : not (eq Q C1)
H1 : not (Col Q C1 P)
H0 : not (eq P Q)
HQL : Col Q A1 A2
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
H : not (eq P C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC1 : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
aip : alternate_interior_angles_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par C1 C2 A1 A2
+++++
apply par_strict_par; Par.
-----
Lemma alternate_interior__playfair_aux : alternate_interior_angles_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.
Proof.
intros aip A1 A2 B1 B2 C1 C2 P HPerp2 HNC1 HPB HCop HParAC HPC.
elim(eq_dec_points P C1).
intro; subst C1; auto.
intro.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQL _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert_diffs.
assert(HB3 : exists B3, Col B1 B2 B3 /\\ B3 <> P).
destruct HB3 as [B3 []].
assert(Col P C1 B3); [|ColR].
assert_diffs.
apply (cop_perp2__col _ _ _ P Q); auto; [| |apply (perp_col2 B1 B2); Col].
assert (Coplanar A1 A2 P B3) by (apply col2_cop__cop with B1 B2; Col; Cop).
assert (Coplanar A1 A2 C1 C2) by (apply pars__coplanar; auto).
assert (Coplanar A1 A2 P C1) by (apply col2_cop__cop with C1 C2; Col; Cop).
assert (Coplanar A1 A2 P Q) by (apply coplanar_perm_1, col__coplanar; Col).
CopR.
apply perp_left_comm.
apply per_perp; auto.
assert(HA3 : exists A3, Col A1 A2 A3 /\\ TS P Q C1 A3).
destruct HA3 as [A3 [HA3 Hts]].
assert(~ Col A3 P Q) by (destruct Hts as [_ []]; auto).
assert_diffs.
apply (l11_17 A3 Q P).
apply perp_per_1; auto; apply (perp_col2 A1 A2); Col.
apply conga_sym.
apply aip; auto.
apply (par_col4__par C1 C2 A1 A2); Col.
apply par_strict_par; Par.

*****

*****

+++++
Qed.
-----
Lemma alternate_interior__playfair_bis : alternate_interior_angles_postulate -> alternative_playfair_s_postulate.
-----
Lemma alternate_interior__playfair_bis : alternate_interior_angles_postulate -> alternative_playfair_s_postulate.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : alternate_interior_angles_postulate, alternative_playfair_s_postulate
+++++
Proof.
-----
Lemma alternate_interior__playfair_bis : alternate_interior_angles_postulate -> alternative_playfair_s_postulate.
Proof.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : alternate_interior_angles_postulate, alternative_playfair_s_postulate
+++++
intros aia.
-----
Lemma alternate_interior__playfair_bis : alternate_interior_angles_postulate -> alternative_playfair_s_postulate.
Proof.
intros aia.

*****
aia : alternate_interior_angles_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
alternative_playfair_s_postulate
+++++
intros A1 A2 B1 B2 C1 C2 P HPerp2 HPB HCop HParAC HPC.
-----
Lemma alternate_interior__playfair_bis : alternate_interior_angles_postulate -> alternative_playfair_s_postulate.
Proof.
intros aia.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HPB HCop HParAC HPC.

*****
HPC : Par A1 A2 C1 C2
HParAC : Coplanar A1 A2 B1 B2
HCop : Col P B1 B2
HPB : not (Col A1 A2 P)
HPerp2 : Perp2 A1 A2 B1 B2 P
A1,A2,B1,B2,C1,C2,P : Tpoint
aia : alternate_interior_angles_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : Col P C1 C2, and (Col C1 B1 B2) (Col C2 B1 B2)
+++++
split.
-----
Lemma alternate_interior__playfair_bis : alternate_interior_angles_postulate -> alternative_playfair_s_postulate.
Proof.
intros aia.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HPB HCop HParAC HPC.
split.

*****
H : Col P C1 C2
HPC : Par A1 A2 C1 C2
HParAC : Coplanar A1 A2 B1 B2
HCop : Col P B1 B2
HPB : not (Col A1 A2 P)
HPerp2 : Perp2 A1 A2 B1 B2 P
A1,A2,B1,B2,C1,C2,P : Tpoint
aia : alternate_interior_angles_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col C1 B1 B2
+++++
apply (alternate_interior__playfair_aux aia A1 A2 _ _ _ C2 P).
-----
Lemma alternate_interior__playfair_bis : alternate_interior_angles_postulate -> alternative_playfair_s_postulate.
Proof.
intros aia.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HPB HCop HParAC HPC.
split.
apply (alternate_interior__playfair_aux aia A1 A2 _ _ _ C2 P).

*****
H : Col P C1 C2
HPC : Par A1 A2 C1 C2
HParAC : Coplanar A1 A2 B1 B2
HCop : Col P B1 B2
HPB : not (Col A1 A2 P)
HPerp2 : Perp2 A1 A2 B1 B2 P
A1,A2,B1,B2,C1,C2,P : Tpoint
aia : alternate_interior_angles_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp2 A1 A2 B1 B2 P
+++++
auto.
-----
Lemma alternate_interior__playfair_bis : alternate_interior_angles_postulate -> alternative_playfair_s_postulate.
Proof.
intros aia.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HPB HCop HParAC HPC.
split.
apply (alternate_interior__playfair_aux aia A1 A2 _ _ _ C2 P).

*****
H : Col P C1 C2
HPC : Par A1 A2 C1 C2
HParAC : Coplanar A1 A2 B1 B2
HCop : Col P B1 B2
HPB : not (Col A1 A2 P)
HPerp2 : Perp2 A1 A2 B1 B2 P
A1,A2,B1,B2,C1,C2,P : Tpoint
aia : alternate_interior_angles_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col A1 A2 P)
+++++
auto.
-----
Lemma alternate_interior__playfair_bis : alternate_interior_angles_postulate -> alternative_playfair_s_postulate.
Proof.
intros aia.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HPB HCop HParAC HPC.
split.
apply (alternate_interior__playfair_aux aia A1 A2 _ _ _ C2 P).

*****
H : Col P C1 C2
HPC : Par A1 A2 C1 C2
HParAC : Coplanar A1 A2 B1 B2
HCop : Col P B1 B2
HPB : not (Col A1 A2 P)
HPerp2 : Perp2 A1 A2 B1 B2 P
A1,A2,B1,B2,C1,C2,P : Tpoint
aia : alternate_interior_angles_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P B1 B2
+++++
auto.
-----
Lemma alternate_interior__playfair_bis : alternate_interior_angles_postulate -> alternative_playfair_s_postulate.
Proof.
intros aia.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HPB HCop HParAC HPC.
split.
apply (alternate_interior__playfair_aux aia A1 A2 _ _ _ C2 P).

*****
H : Col P C1 C2
HPC : Par A1 A2 C1 C2
HParAC : Coplanar A1 A2 B1 B2
HCop : Col P B1 B2
HPB : not (Col A1 A2 P)
HPerp2 : Perp2 A1 A2 B1 B2 P
A1,A2,B1,B2,C1,C2,P : Tpoint
aia : alternate_interior_angles_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A1 A2 B1 B2
+++++
auto.
-----
Lemma alternate_interior__playfair_bis : alternate_interior_angles_postulate -> alternative_playfair_s_postulate.
Proof.
intros aia.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HPB HCop HParAC HPC.
split.
apply (alternate_interior__playfair_aux aia A1 A2 _ _ _ C2 P).

*****
H : Col P C1 C2
HPC : Par A1 A2 C1 C2
HParAC : Coplanar A1 A2 B1 B2
HCop : Col P B1 B2
HPB : not (Col A1 A2 P)
HPerp2 : Perp2 A1 A2 B1 B2 P
A1,A2,B1,B2,C1,C2,P : Tpoint
aia : alternate_interior_angles_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par A1 A2 C1 C2
+++++
auto.
-----
Lemma alternate_interior__playfair_bis : alternate_interior_angles_postulate -> alternative_playfair_s_postulate.
Proof.
intros aia.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HPB HCop HParAC HPC.
split.
apply (alternate_interior__playfair_aux aia A1 A2 _ _ _ C2 P).

*****
H : Col P C1 C2
HPC : Par A1 A2 C1 C2
HParAC : Coplanar A1 A2 B1 B2
HCop : Col P B1 B2
HPB : not (Col A1 A2 P)
HPerp2 : Perp2 A1 A2 B1 B2 P
A1,A2,B1,B2,C1,C2,P : Tpoint
aia : alternate_interior_angles_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P C1 C2
+++++
auto.
-----
Lemma alternate_interior__playfair_bis : alternate_interior_angles_postulate -> alternative_playfair_s_postulate.
Proof.
intros aia.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HPB HCop HParAC HPC.
split.

*****
H : Col P C1 C2
HPC : Par A1 A2 C1 C2
HParAC : Coplanar A1 A2 B1 B2
HCop : Col P B1 B2
HPB : not (Col A1 A2 P)
HPerp2 : Perp2 A1 A2 B1 B2 P
A1,A2,B1,B2,C1,C2,P : Tpoint
aia : alternate_interior_angles_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col C2 B1 B2
+++++
apply (alternate_interior__playfair_aux aia A1 A2 _ _ _ C1 P).
-----
Lemma alternate_interior__playfair_bis : alternate_interior_angles_postulate -> alternative_playfair_s_postulate.
Proof.
intros aia.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HPB HCop HParAC HPC.
split.
apply (alternate_interior__playfair_aux aia A1 A2 _ _ _ C1 P).

*****
H : Col P C1 C2
HPC : Par A1 A2 C1 C2
HParAC : Coplanar A1 A2 B1 B2
HCop : Col P B1 B2
HPB : not (Col A1 A2 P)
HPerp2 : Perp2 A1 A2 B1 B2 P
A1,A2,B1,B2,C1,C2,P : Tpoint
aia : alternate_interior_angles_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp2 A1 A2 B1 B2 P
+++++
Col.
-----
Lemma alternate_interior__playfair_bis : alternate_interior_angles_postulate -> alternative_playfair_s_postulate.
Proof.
intros aia.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HPB HCop HParAC HPC.
split.
apply (alternate_interior__playfair_aux aia A1 A2 _ _ _ C1 P).

*****
H : Col P C1 C2
HPC : Par A1 A2 C1 C2
HParAC : Coplanar A1 A2 B1 B2
HCop : Col P B1 B2
HPB : not (Col A1 A2 P)
HPerp2 : Perp2 A1 A2 B1 B2 P
A1,A2,B1,B2,C1,C2,P : Tpoint
aia : alternate_interior_angles_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col A1 A2 P)
+++++
Col.
-----
Lemma alternate_interior__playfair_bis : alternate_interior_angles_postulate -> alternative_playfair_s_postulate.
Proof.
intros aia.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HPB HCop HParAC HPC.
split.
apply (alternate_interior__playfair_aux aia A1 A2 _ _ _ C1 P).

*****
H : Col P C1 C2
HPC : Par A1 A2 C1 C2
HParAC : Coplanar A1 A2 B1 B2
HCop : Col P B1 B2
HPB : not (Col A1 A2 P)
HPerp2 : Perp2 A1 A2 B1 B2 P
A1,A2,B1,B2,C1,C2,P : Tpoint
aia : alternate_interior_angles_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P B1 B2
+++++
Col.
-----
Lemma alternate_interior__playfair_bis : alternate_interior_angles_postulate -> alternative_playfair_s_postulate.
Proof.
intros aia.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HPB HCop HParAC HPC.
split.
apply (alternate_interior__playfair_aux aia A1 A2 _ _ _ C1 P).

*****
H : Col P C1 C2
HPC : Par A1 A2 C1 C2
HParAC : Coplanar A1 A2 B1 B2
HCop : Col P B1 B2
HPB : not (Col A1 A2 P)
HPerp2 : Perp2 A1 A2 B1 B2 P
A1,A2,B1,B2,C1,C2,P : Tpoint
aia : alternate_interior_angles_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A1 A2 B1 B2
+++++
Col.
-----
Lemma alternate_interior__playfair_bis : alternate_interior_angles_postulate -> alternative_playfair_s_postulate.
Proof.
intros aia.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HPB HCop HParAC HPC.
split.
apply (alternate_interior__playfair_aux aia A1 A2 _ _ _ C1 P).

*****
H : Col P C1 C2
HPC : Par A1 A2 C1 C2
HParAC : Coplanar A1 A2 B1 B2
HCop : Col P B1 B2
HPB : not (Col A1 A2 P)
HPerp2 : Perp2 A1 A2 B1 B2 P
A1,A2,B1,B2,C1,C2,P : Tpoint
aia : alternate_interior_angles_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par A1 A2 C2 C1
+++++
Col.
-----
Lemma alternate_interior__playfair_bis : alternate_interior_angles_postulate -> alternative_playfair_s_postulate.
Proof.
intros aia.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HPB HCop HParAC HPC.
split.
apply (alternate_interior__playfair_aux aia A1 A2 _ _ _ C1 P).
Col.

*****
H : Col P C1 C2
HPC : Par A1 A2 C1 C2
HParAC : Coplanar A1 A2 B1 B2
HCop : Col P B1 B2
HPB : not (Col A1 A2 P)
HPerp2 : Perp2 A1 A2 B1 B2 P
A1,A2,B1,B2,C1,C2,P : Tpoint
aia : alternate_interior_angles_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par A1 A2 C2 C1
+++++
Par.
-----
Lemma alternate_interior__playfair_bis : alternate_interior_angles_postulate -> alternative_playfair_s_postulate.
Proof.
intros aia.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HPB HCop HParAC HPC.
split.
apply (alternate_interior__playfair_aux aia A1 A2 _ _ _ C1 P).

*****
H : Col P C1 C2
HPC : Par A1 A2 C1 C2
HParAC : Coplanar A1 A2 B1 B2
HCop : Col P B1 B2
HPB : not (Col A1 A2 P)
HPerp2 : Perp2 A1 A2 B1 B2 P
A1,A2,B1,B2,C1,C2,P : Tpoint
aia : alternate_interior_angles_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P C2 C1
+++++
Col.
-----
Lemma alternate_interior__playfair_bis : alternate_interior_angles_postulate -> alternative_playfair_s_postulate.
Proof.
intros aia.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HPB HCop HParAC HPC.
split.

*****

*****

+++++
Qed.
-----
End alternate_interior_angles_playfair_bis.
-----
