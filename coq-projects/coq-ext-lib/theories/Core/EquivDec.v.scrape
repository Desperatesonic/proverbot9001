Require Import Coq.Classes.EquivDec.
-----
Theorem EquivDec_refl_left {T : Type} {c : EqDec T (@eq T)} :\n  forall (n : T), equiv_dec n n = left (refl_equal _).
-----
Theorem EquivDec_refl_left {T : Type} {c : EqDec T (@eq T)} : forall (n : T), equiv_dec n n = left (refl_equal _).

*****
c : EqDec T eq
T : Type
*****
forall n : T, eq (equiv_dec n n) (left eq_refl)
+++++
Proof.
-----
Theorem EquivDec_refl_left {T : Type} {c : EqDec T (@eq T)} : forall (n : T), equiv_dec n n = left (refl_equal _).
Proof.

*****
c : EqDec T eq
T : Type
*****
forall n : T, eq (equiv_dec n n) (left eq_refl)
+++++
intros.
-----
Theorem EquivDec_refl_left {T : Type} {c : EqDec T (@eq T)} : forall (n : T), equiv_dec n n = left (refl_equal _).
Proof.
intros.

*****
n : T
c : EqDec T eq
T : Type
*****
eq (equiv_dec n n) (left eq_refl)
+++++
destruct (equiv_dec n n).
-----
Theorem EquivDec_refl_left {T : Type} {c : EqDec T (@eq T)} : forall (n : T), equiv_dec n n = left (refl_equal _).
Proof.
intros.
destruct (equiv_dec n n).

*****
e : equiv n n
n : T
c : EqDec T eq
T : Type
*****
eq (left e) (left eq_refl)
+++++
try congruence.
-----
Theorem EquivDec_refl_left {T : Type} {c : EqDec T (@eq T)} : forall (n : T), equiv_dec n n = left (refl_equal _).
Proof.
intros.
destruct (equiv_dec n n).
try congruence.

*****
e : equiv n n
n : T
c : EqDec T eq
T : Type
*****
eq (left e) (left eq_refl)
+++++
From Coq Require Eqdep_dec.
-----
Theorem EquivDec_refl_left {T : Type} {c : EqDec T (@eq T)} : forall (n : T), equiv_dec n n = left (refl_equal _).
Proof.
intros.
destruct (equiv_dec n n).
try congruence.
From Coq Require Eqdep_dec.

*****
e : equiv n n
n : T
c : EqDec T eq
T : Type
*****
eq (left e) (left eq_refl)
+++++
rewrite (Eqdep_dec.UIP_dec (A := T) (@equiv_dec _ _ _ c) e (refl_equal _)).
-----
Theorem EquivDec_refl_left {T : Type} {c : EqDec T (@eq T)} : forall (n : T), equiv_dec n n = left (refl_equal _).
Proof.
intros.
destruct (equiv_dec n n).
try congruence.
From Coq Require Eqdep_dec.
rewrite (Eqdep_dec.UIP_dec (A := T) (@equiv_dec _ _ _ c) e (refl_equal _)).

*****
e : equiv n n
n : T
c : EqDec T eq
T : Type
*****
eq (left eq_refl) (left eq_refl)
+++++
reflexivity.
-----
Theorem EquivDec_refl_left {T : Type} {c : EqDec T (@eq T)} : forall (n : T), equiv_dec n n = left (refl_equal _).
Proof.
intros.
destruct (equiv_dec n n).

*****
c0 : complement equiv n n
n : T
c : EqDec T eq
T : Type
*****
eq (right c0) (left eq_refl)
+++++
try congruence.
-----
Theorem EquivDec_refl_left {T : Type} {c : EqDec T (@eq T)} : forall (n : T), equiv_dec n n = left (refl_equal _).
Proof.
intros.
destruct (equiv_dec n n).

*****

*****

+++++
Qed.
-----
Export Coq.Classes.EquivDec.
-----
