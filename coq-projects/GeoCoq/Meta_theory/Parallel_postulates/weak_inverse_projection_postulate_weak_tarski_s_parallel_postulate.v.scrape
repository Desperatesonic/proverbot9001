Require Import GeoCoq.Axioms.parallel_postulates.
-----
Require Import GeoCoq.Tarski_dev.Annexes.suma.
-----
Require Import GeoCoq.Tarski_dev.Ch12_parallel.
-----
Section weak_inverse_projection_postulate_weak_tarski_s_parallel_postulate.
-----
Context `{TnEQD:Tarski_neutral_dimensionless_with_decidable_point_equality}.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux :\n  forall A B C P T,\n    Per A B C -> InAngle T A B C ->\n    CongA P B A P B C -> Per B P T -> Coplanar A B C P ->\n    InAngle P A B C.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C) (_ : CongA P B A P B C) (_ : Per B P T) (_ : Coplanar A B C P), InAngle P A B C
+++++
Proof.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C) (_ : CongA P B A P B C) (_ : Per B P T) (_ : Coplanar A B C P), InAngle P A B C
+++++
intros A B C P T HPer HInangle HConga HPerP HCop.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.

*****
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
InAngle P A B C
+++++
destruct (eq_dec_points P T).
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).

*****
H : eq P T
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
InAngle P A B C
+++++
subst.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
subst.

*****
HConga : CongA T B A T B C
HPerP : Per B T T
HCop : Coplanar A B C T
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
InAngle T A B C
+++++
apply HInangle.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).

*****
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
InAngle P A B C
+++++
assert_diffs.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.

*****
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
InAngle P A B C
+++++
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].

*****
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq A B)
+++++
auto.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].

*****
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq C B)
+++++
auto.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].

*****
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
InAngle P A B C
+++++
auto.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.

*****
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
InAngle P A B C
+++++
assert_diffs.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.

*****
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
InAngle P A B C
+++++
assert (HAcute : Acute P' B A).
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).

*****
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Acute P' B A
+++++
apply acute_sym, conga_inangle_per__acute with C.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply acute_sym, conga_inangle_per__acute with C.

*****
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per A B C
+++++
trivial.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply acute_sym, conga_inangle_per__acute with C.

*****
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
InAngle P' A B C
+++++
trivial.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply acute_sym, conga_inangle_per__acute with C.

*****
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
CongA P' B A P' B C
+++++
trivial.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).

*****
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
InAngle P A B C
+++++
apply l11_25 with P' A C.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.

*****
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
InAngle P' A B C
+++++
try (apply out_trivial).
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).

*****
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
InAngle P' A B C
+++++
auto.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.

*****
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Out B A A
+++++
try (apply out_trivial).
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).

*****
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq A B)
+++++
auto.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.

*****
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Out B C C
+++++
try (apply out_trivial).
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).

*****
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq C B)
+++++
auto.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.

*****
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Out B P P'
+++++
try (apply out_trivial).
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).

*****
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Out B P P'
+++++
auto.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.

*****
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Out B P P'
+++++
assert (HNCol1 : ~ Col A B C).
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).

*****
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col A B C)
+++++
apply per_not_col.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
apply per_not_col.

*****
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq A B)
+++++
auto.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
apply per_not_col.

*****
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq B C)
+++++
auto.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
apply per_not_col.

*****
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per A B C
+++++
auto.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).

*****
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Out B P P'
+++++
idtac.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.

*****
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Out B P P'
+++++
assert (HCol : Col B P P').
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').

*****
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col B P P'
+++++
assert (Coplanar A B C P').
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
assert (Coplanar A B C P').

*****
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B C P'
+++++
Cop.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
assert (Coplanar A B C P').

*****
H6 : Coplanar A B C P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col B P P'
+++++
idtac.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
assert (Coplanar A B C P').
idtac.

*****
H6 : Coplanar A B C P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col B P P'
+++++
apply conga2_cop2__col with A C.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
assert (Coplanar A B C P').
idtac.
apply conga2_cop2__col with A C.

*****
H6 : Coplanar A B C P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Out B A C)
+++++
trivial.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
assert (Coplanar A B C P').
idtac.
apply conga2_cop2__col with A C.
trivial.

*****
H6 : Coplanar A B C P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Out B A C)
+++++
try CopR.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
assert (Coplanar A B C P').
idtac.
apply conga2_cop2__col with A C.
trivial.
try CopR.

*****
H6 : Coplanar A B C P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Out B A C)
+++++
intro.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
assert (Coplanar A B C P').
idtac.
apply conga2_cop2__col with A C.
trivial.
try CopR.
intro.

*****
H7 : Out B A C
H6 : Coplanar A B C P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply HNCol1.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
assert (Coplanar A B C P').
idtac.
apply conga2_cop2__col with A C.
trivial.
try CopR.
intro.
apply HNCol1.

*****
H7 : Out B A C
H6 : Coplanar A B C P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A B C
+++++
Col.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
assert (Coplanar A B C P').
idtac.
apply conga2_cop2__col with A C.

*****
H6 : Coplanar A B C P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
CongA P B A P B C
+++++
trivial.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
assert (Coplanar A B C P').
idtac.
apply conga2_cop2__col with A C.

*****
H6 : Coplanar A B C P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
CongA P' B A P' B C
+++++
trivial.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
assert (Coplanar A B C P').
idtac.
apply conga2_cop2__col with A C.

*****
H6 : Coplanar A B C P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B P P'
+++++
trivial.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
assert (Coplanar A B C P').
idtac.
apply conga2_cop2__col with A C.
trivial.

*****
H6 : Coplanar A B C P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B P P'
+++++
try CopR.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
assert (Coplanar A B C P').
idtac.
apply conga2_cop2__col with A C.

*****
H6 : Coplanar A B C P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar B C P P'
+++++
trivial.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
assert (Coplanar A B C P').
idtac.
apply conga2_cop2__col with A C.
trivial.

*****
H6 : Coplanar A B C P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar B C P P'
+++++
try CopR.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').

*****
HCol : Col B P P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Out B P P'
+++++
apply (acute_col_perp__out T).
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
apply (acute_col_perp__out T).

*****
HCol : Col B P P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Acute T B P'
+++++
Col.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
apply (acute_col_perp__out T).
Col.

*****
HCol : Col B P P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Acute T B P'
+++++
apply acute_lea_acute with P' B A.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
apply (acute_col_perp__out T).
Col.
apply acute_lea_acute with P' B A.

*****
HCol : Col B P P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Acute P' B A
+++++
trivial.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
apply (acute_col_perp__out T).
Col.
apply acute_lea_acute with P' B A.

*****
HCol : Col B P P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
LeA T B P' P' B A
+++++
trivial.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
apply (acute_col_perp__out T).
Col.
apply acute_lea_acute with P' B A.
trivial.

*****
HCol : Col B P P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
LeA T B P' P' B A
+++++
assert (HNCol2 : ~ Col P' B A).
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
apply (acute_col_perp__out T).
Col.
apply acute_lea_acute with P' B A.
trivial.
assert (HNCol2 : ~ Col P' B A).

*****
HCol : Col B P P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col P' B A)
+++++
intro.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
apply (acute_col_perp__out T).
Col.
apply acute_lea_acute with P' B A.
trivial.
assert (HNCol2 : ~ Col P' B A).
intro.

*****
H6 : Col P' B A
HCol : Col B P P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert (Col P' B C).
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
apply (acute_col_perp__out T).
Col.
apply acute_lea_acute with P' B A.
trivial.
assert (HNCol2 : ~ Col P' B A).
intro.
assert (Col P' B C).

*****
H6 : Col P' B A
HCol : Col B P P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P' B C
+++++
apply (col_conga_col P' B A).
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
apply (acute_col_perp__out T).
Col.
apply acute_lea_acute with P' B A.
trivial.
assert (HNCol2 : ~ Col P' B A).
intro.
assert (Col P' B C).
apply (col_conga_col P' B A).

*****
H6 : Col P' B A
HCol : Col B P P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P' B A
+++++
assumption.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
apply (acute_col_perp__out T).
Col.
apply acute_lea_acute with P' B A.
trivial.
assert (HNCol2 : ~ Col P' B A).
intro.
assert (Col P' B C).
apply (col_conga_col P' B A).

*****
H6 : Col P' B A
HCol : Col B P P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
CongA P' B A P' B C
+++++
assumption.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
apply (acute_col_perp__out T).
Col.
apply acute_lea_acute with P' B A.
trivial.
assert (HNCol2 : ~ Col P' B A).
intro.
assert (Col P' B C).

*****
H7 : Col P' B C
H6 : Col P' B A
HCol : Col B P P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
idtac.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
apply (acute_col_perp__out T).
Col.
apply acute_lea_acute with P' B A.
trivial.
assert (HNCol2 : ~ Col P' B A).
intro.
assert (Col P' B C).
idtac.

*****
H7 : Col P' B C
H6 : Col P' B A
HCol : Col B P P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply HNCol1.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
apply (acute_col_perp__out T).
Col.
apply acute_lea_acute with P' B A.
trivial.
assert (HNCol2 : ~ Col P' B A).
intro.
assert (Col P' B C).
idtac.
apply HNCol1.

*****
H7 : Col P' B C
H6 : Col P' B A
HCol : Col B P P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A B C
+++++
ColR.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
apply (acute_col_perp__out T).
Col.
apply acute_lea_acute with P' B A.
trivial.
assert (HNCol2 : ~ Col P' B A).

*****
HNCol2 : not (Col P' B A)
HCol : Col B P P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
LeA T B P' P' B A
+++++
destruct (col_dec T B P').
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
apply (acute_col_perp__out T).
Col.
apply acute_lea_acute with P' B A.
trivial.
assert (HNCol2 : ~ Col P' B A).
destruct (col_dec T B P').

*****
H6 : Col T B P'
HNCol2 : not (Col P' B A)
HCol : Col B P P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
LeA T B P' P' B A
+++++
idtac.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
apply (acute_col_perp__out T).
Col.
apply acute_lea_acute with P' B A.
trivial.
assert (HNCol2 : ~ Col P' B A).
destruct (col_dec T B P').
idtac.

*****
H6 : Col T B P'
HNCol2 : not (Col P' B A)
HCol : Col B P P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
LeA T B P' P' B A
+++++
apply l11_31_1.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
apply (acute_col_perp__out T).
Col.
apply acute_lea_acute with P' B A.
trivial.
assert (HNCol2 : ~ Col P' B A).
destruct (col_dec T B P').
idtac.
apply l11_31_1.

*****
H6 : Col T B P'
HNCol2 : not (Col P' B A)
HCol : Col B P P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Out B T P'
+++++
auto.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
apply (acute_col_perp__out T).
Col.
apply acute_lea_acute with P' B A.
trivial.
assert (HNCol2 : ~ Col P' B A).
destruct (col_dec T B P').
idtac.
apply l11_31_1.
auto.

*****
H6 : Col T B P'
HNCol2 : not (Col P' B A)
HCol : Col B P P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Out B T P'
+++++
apply col_one_side_out with A.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
apply (acute_col_perp__out T).
Col.
apply acute_lea_acute with P' B A.
trivial.
assert (HNCol2 : ~ Col P' B A).
destruct (col_dec T B P').
idtac.
apply l11_31_1.
auto.
apply col_one_side_out with A.

*****
H6 : Col T B P'
HNCol2 : not (Col P' B A)
HCol : Col B P P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col B T P'
+++++
Col.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
apply (acute_col_perp__out T).
Col.
apply acute_lea_acute with P' B A.
trivial.
assert (HNCol2 : ~ Col P' B A).
destruct (col_dec T B P').
idtac.
apply l11_31_1.
auto.
apply col_one_side_out with A.

*****
H6 : Col T B P'
HNCol2 : not (Col P' B A)
HCol : Col B P P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS B A T P'
+++++
Col.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
apply (acute_col_perp__out T).
Col.
apply acute_lea_acute with P' B A.
trivial.
assert (HNCol2 : ~ Col P' B A).
destruct (col_dec T B P').
idtac.
apply l11_31_1.
auto.
apply col_one_side_out with A.
Col.

*****
H6 : Col T B P'
HNCol2 : not (Col P' B A)
HCol : Col B P P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS B A T P'
+++++
apply invert_one_side, inangle_one_side with C.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
apply (acute_col_perp__out T).
Col.
apply acute_lea_acute with P' B A.
trivial.
assert (HNCol2 : ~ Col P' B A).
destruct (col_dec T B P').
idtac.
apply l11_31_1.
auto.
apply col_one_side_out with A.
Col.
apply invert_one_side, inangle_one_side with C.

*****
H6 : Col T B P'
HNCol2 : not (Col P' B A)
HCol : Col B P P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col A B C)
+++++
Col.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
apply (acute_col_perp__out T).
Col.
apply acute_lea_acute with P' B A.
trivial.
assert (HNCol2 : ~ Col P' B A).
destruct (col_dec T B P').
idtac.
apply l11_31_1.
auto.
apply col_one_side_out with A.
Col.
apply invert_one_side, inangle_one_side with C.

*****
H6 : Col T B P'
HNCol2 : not (Col P' B A)
HCol : Col B P P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col A B T)
+++++
Col.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
apply (acute_col_perp__out T).
Col.
apply acute_lea_acute with P' B A.
trivial.
assert (HNCol2 : ~ Col P' B A).
destruct (col_dec T B P').
idtac.
apply l11_31_1.
auto.
apply col_one_side_out with A.
Col.
apply invert_one_side, inangle_one_side with C.
Col.

*****
H6 : Col T B P'
HNCol2 : not (Col P' B A)
HCol : Col B P P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col A B T)
+++++
assert (~ Col B P T).
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
apply (acute_col_perp__out T).
Col.
apply acute_lea_acute with P' B A.
trivial.
assert (HNCol2 : ~ Col P' B A).
destruct (col_dec T B P').
idtac.
apply l11_31_1.
auto.
apply col_one_side_out with A.
Col.
apply invert_one_side, inangle_one_side with C.
Col.
assert (~ Col B P T).

*****
H6 : Col T B P'
HNCol2 : not (Col P' B A)
HCol : Col B P P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col B P T)
+++++
apply per_not_col.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
apply (acute_col_perp__out T).
Col.
apply acute_lea_acute with P' B A.
trivial.
assert (HNCol2 : ~ Col P' B A).
destruct (col_dec T B P').
idtac.
apply l11_31_1.
auto.
apply col_one_side_out with A.
Col.
apply invert_one_side, inangle_one_side with C.
Col.
assert (~ Col B P T).
apply per_not_col.

*****
H6 : Col T B P'
HNCol2 : not (Col P' B A)
HCol : Col B P P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq B P)
+++++
auto.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
apply (acute_col_perp__out T).
Col.
apply acute_lea_acute with P' B A.
trivial.
assert (HNCol2 : ~ Col P' B A).
destruct (col_dec T B P').
idtac.
apply l11_31_1.
auto.
apply col_one_side_out with A.
Col.
apply invert_one_side, inangle_one_side with C.
Col.
assert (~ Col B P T).
apply per_not_col.

*****
H6 : Col T B P'
HNCol2 : not (Col P' B A)
HCol : Col B P P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq P T)
+++++
auto.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
apply (acute_col_perp__out T).
Col.
apply acute_lea_acute with P' B A.
trivial.
assert (HNCol2 : ~ Col P' B A).
destruct (col_dec T B P').
idtac.
apply l11_31_1.
auto.
apply col_one_side_out with A.
Col.
apply invert_one_side, inangle_one_side with C.
Col.
assert (~ Col B P T).
apply per_not_col.

*****
H6 : Col T B P'
HNCol2 : not (Col P' B A)
HCol : Col B P P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per B P T
+++++
auto.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
apply (acute_col_perp__out T).
Col.
apply acute_lea_acute with P' B A.
trivial.
assert (HNCol2 : ~ Col P' B A).
destruct (col_dec T B P').
idtac.
apply l11_31_1.
auto.
apply col_one_side_out with A.
Col.
apply invert_one_side, inangle_one_side with C.
Col.
assert (~ Col B P T).

*****
H7 : not (Col B P T)
H6 : Col T B P'
HNCol2 : not (Col P' B A)
HCol : Col B P P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col A B T)
+++++
idtac.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
apply (acute_col_perp__out T).
Col.
apply acute_lea_acute with P' B A.
trivial.
assert (HNCol2 : ~ Col P' B A).
destruct (col_dec T B P').
idtac.
apply l11_31_1.
auto.
apply col_one_side_out with A.
Col.
apply invert_one_side, inangle_one_side with C.
Col.
assert (~ Col B P T).
idtac.

*****
H7 : not (Col B P T)
H6 : Col T B P'
HNCol2 : not (Col P' B A)
HCol : Col B P P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col A B T)
+++++
intro.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
apply (acute_col_perp__out T).
Col.
apply acute_lea_acute with P' B A.
trivial.
assert (HNCol2 : ~ Col P' B A).
destruct (col_dec T B P').
idtac.
apply l11_31_1.
auto.
apply col_one_side_out with A.
Col.
apply invert_one_side, inangle_one_side with C.
Col.
assert (~ Col B P T).
idtac.
intro.

*****
H8 : Col A B T
H7 : not (Col B P T)
H6 : Col T B P'
HNCol2 : not (Col P' B A)
HCol : Col B P P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert_diffs.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
apply (acute_col_perp__out T).
Col.
apply acute_lea_acute with P' B A.
trivial.
assert (HNCol2 : ~ Col P' B A).
destruct (col_dec T B P').
idtac.
apply l11_31_1.
auto.
apply col_one_side_out with A.
Col.
apply invert_one_side, inangle_one_side with C.
Col.
assert (~ Col B P T).
idtac.
intro.
assert_diffs.

*****
H14 : not (eq P' A)
H8 : Col A B T
H7 : not (Col B P T)
H6 : Col T B P'
HNCol2 : not (Col P' B A)
HCol : Col B P P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply HNCol2.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
apply (acute_col_perp__out T).
Col.
apply acute_lea_acute with P' B A.
trivial.
assert (HNCol2 : ~ Col P' B A).
destruct (col_dec T B P').
idtac.
apply l11_31_1.
auto.
apply col_one_side_out with A.
Col.
apply invert_one_side, inangle_one_side with C.
Col.
assert (~ Col B P T).
idtac.
intro.
assert_diffs.
apply HNCol2.

*****
H14 : not (eq P' A)
H8 : Col A B T
H7 : not (Col B P T)
H6 : Col T B P'
HNCol2 : not (Col P' B A)
HCol : Col B P P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P' B A
+++++
ColR.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
apply (acute_col_perp__out T).
Col.
apply acute_lea_acute with P' B A.
trivial.
assert (HNCol2 : ~ Col P' B A).
destruct (col_dec T B P').
idtac.
apply l11_31_1.
auto.
apply col_one_side_out with A.
Col.
apply invert_one_side, inangle_one_side with C.

*****
H6 : Col T B P'
HNCol2 : not (Col P' B A)
HCol : Col B P P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col A B P')
+++++
Col.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
apply (acute_col_perp__out T).
Col.
apply acute_lea_acute with P' B A.
trivial.
assert (HNCol2 : ~ Col P' B A).
destruct (col_dec T B P').
idtac.
apply l11_31_1.
auto.
apply col_one_side_out with A.
Col.
apply invert_one_side, inangle_one_side with C.

*****
H6 : Col T B P'
HNCol2 : not (Col P' B A)
HCol : Col B P P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
InAngle T A B C
+++++
Col.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
apply (acute_col_perp__out T).
Col.
apply acute_lea_acute with P' B A.
trivial.
assert (HNCol2 : ~ Col P' B A).
destruct (col_dec T B P').
idtac.
apply l11_31_1.
auto.
apply col_one_side_out with A.
Col.
apply invert_one_side, inangle_one_side with C.

*****
H6 : Col T B P'
HNCol2 : not (Col P' B A)
HCol : Col B P P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
InAngle P' A B C
+++++
Col.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
apply (acute_col_perp__out T).
Col.
apply acute_lea_acute with P' B A.
trivial.
assert (HNCol2 : ~ Col P' B A).
destruct (col_dec T B P').
idtac.
apply l11_31_1.

*****
H6 : Col T B P'
HNCol2 : not (Col P' B A)
HCol : Col B P P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq P' B)
+++++
auto.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
apply (acute_col_perp__out T).
Col.
apply acute_lea_acute with P' B A.
trivial.
assert (HNCol2 : ~ Col P' B A).
destruct (col_dec T B P').
idtac.
apply l11_31_1.

*****
H6 : Col T B P'
HNCol2 : not (Col P' B A)
HCol : Col B P P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq A B)
+++++
auto.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
apply (acute_col_perp__out T).
Col.
apply acute_lea_acute with P' B A.
trivial.
assert (HNCol2 : ~ Col P' B A).
destruct (col_dec T B P').

*****
H6 : not (Col T B P')
HNCol2 : not (Col P' B A)
HCol : Col B P P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
LeA T B P' P' B A
+++++
assert_diffs.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
apply (acute_col_perp__out T).
Col.
apply acute_lea_acute with P' B A.
trivial.
assert (HNCol2 : ~ Col P' B A).
destruct (col_dec T B P').
assert_diffs.

*****
H13 : not (eq P' A)
H12 : not (eq T P')
H6 : not (Col T B P')
HNCol2 : not (Col P' B A)
HCol : Col B P P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
LeA T B P' P' B A
+++++
destruct (cop__one_or_two_sides B P' A T).
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
apply (acute_col_perp__out T).
Col.
apply acute_lea_acute with P' B A.
trivial.
assert (HNCol2 : ~ Col P' B A).
destruct (col_dec T B P').
assert_diffs.
destruct (cop__one_or_two_sides B P' A T).

*****
H13 : not (eq P' A)
H12 : not (eq T P')
H6 : not (Col T B P')
HNCol2 : not (Col P' B A)
HCol : Col B P P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar B P' A T
+++++
Col.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
apply (acute_col_perp__out T).
Col.
apply acute_lea_acute with P' B A.
trivial.
assert (HNCol2 : ~ Col P' B A).
destruct (col_dec T B P').
assert_diffs.
destruct (cop__one_or_two_sides B P' A T).
Col.

*****
H13 : not (eq P' A)
H12 : not (eq T P')
H6 : not (Col T B P')
HNCol2 : not (Col P' B A)
HCol : Col B P P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar B P' A T
+++++
assert (Coplanar A B C P').
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
apply (acute_col_perp__out T).
Col.
apply acute_lea_acute with P' B A.
trivial.
assert (HNCol2 : ~ Col P' B A).
destruct (col_dec T B P').
assert_diffs.
destruct (cop__one_or_two_sides B P' A T).
Col.
assert (Coplanar A B C P').

*****
H13 : not (eq P' A)
H12 : not (eq T P')
H6 : not (Col T B P')
HNCol2 : not (Col P' B A)
HCol : Col B P P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B C P'
+++++
Cop.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
apply (acute_col_perp__out T).
Col.
apply acute_lea_acute with P' B A.
trivial.
assert (HNCol2 : ~ Col P' B A).
destruct (col_dec T B P').
assert_diffs.
destruct (cop__one_or_two_sides B P' A T).
Col.
assert (Coplanar A B C P').

*****
H7 : Coplanar A B C P'
H13 : not (eq P' A)
H12 : not (eq T P')
H6 : not (Col T B P')
HNCol2 : not (Col P' B A)
HCol : Col B P P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar B P' A T
+++++
idtac.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
apply (acute_col_perp__out T).
Col.
apply acute_lea_acute with P' B A.
trivial.
assert (HNCol2 : ~ Col P' B A).
destruct (col_dec T B P').
assert_diffs.
destruct (cop__one_or_two_sides B P' A T).
Col.
assert (Coplanar A B C P').
idtac.

*****
H7 : Coplanar A B C P'
H13 : not (eq P' A)
H12 : not (eq T P')
H6 : not (Col T B P')
HNCol2 : not (Col P' B A)
HCol : Col B P P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar B P' A T
+++++
assert (Coplanar A B C T).
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
apply (acute_col_perp__out T).
Col.
apply acute_lea_acute with P' B A.
trivial.
assert (HNCol2 : ~ Col P' B A).
destruct (col_dec T B P').
assert_diffs.
destruct (cop__one_or_two_sides B P' A T).
Col.
assert (Coplanar A B C P').
idtac.
assert (Coplanar A B C T).

*****
H7 : Coplanar A B C P'
H13 : not (eq P' A)
H12 : not (eq T P')
H6 : not (Col T B P')
HNCol2 : not (Col P' B A)
HCol : Col B P P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B C T
+++++
Cop.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
apply (acute_col_perp__out T).
Col.
apply acute_lea_acute with P' B A.
trivial.
assert (HNCol2 : ~ Col P' B A).
destruct (col_dec T B P').
assert_diffs.
destruct (cop__one_or_two_sides B P' A T).
Col.
assert (Coplanar A B C P').
idtac.
assert (Coplanar A B C T).

*****
H8 : Coplanar A B C T
H7 : Coplanar A B C P'
H13 : not (eq P' A)
H12 : not (eq T P')
H6 : not (Col T B P')
HNCol2 : not (Col P' B A)
HCol : Col B P P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar B P' A T
+++++
idtac.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
apply (acute_col_perp__out T).
Col.
apply acute_lea_acute with P' B A.
trivial.
assert (HNCol2 : ~ Col P' B A).
destruct (col_dec T B P').
assert_diffs.
destruct (cop__one_or_two_sides B P' A T).
Col.
assert (Coplanar A B C P').
idtac.
assert (Coplanar A B C T).
idtac.

*****
H8 : Coplanar A B C T
H7 : Coplanar A B C P'
H13 : not (eq P' A)
H12 : not (eq T P')
H6 : not (Col T B P')
HNCol2 : not (Col P' B A)
HCol : Col B P P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar B P' A T
+++++
CopR.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
apply (acute_col_perp__out T).
Col.
apply acute_lea_acute with P' B A.
trivial.
assert (HNCol2 : ~ Col P' B A).
destruct (col_dec T B P').
assert_diffs.
destruct (cop__one_or_two_sides B P' A T).

*****
H13 : not (eq P' A)
H12 : not (eq T P')
H6 : not (Col T B P')
HNCol2 : not (Col P' B A)
HCol : Col B P P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col A B P')
+++++
Col.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
apply (acute_col_perp__out T).
Col.
apply acute_lea_acute with P' B A.
trivial.
assert (HNCol2 : ~ Col P' B A).
destruct (col_dec T B P').
assert_diffs.
destruct (cop__one_or_two_sides B P' A T).

*****
H13 : not (eq P' A)
H12 : not (eq T P')
H6 : not (Col T B P')
HNCol2 : not (Col P' B A)
HCol : Col B P P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col T B P')
+++++
Col.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
apply (acute_col_perp__out T).
Col.
apply acute_lea_acute with P' B A.
trivial.
assert (HNCol2 : ~ Col P' B A).
destruct (col_dec T B P').
assert_diffs.
destruct (cop__one_or_two_sides B P' A T).

*****
H7 : TS B P' A T
H13 : not (eq P' A)
H12 : not (eq T P')
H6 : not (Col T B P')
HNCol2 : not (Col P' B A)
HCol : Col B P P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
LeA T B P' P' B A
+++++
Col.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
apply (acute_col_perp__out T).
Col.
apply acute_lea_acute with P' B A.
trivial.
assert (HNCol2 : ~ Col P' B A).
destruct (col_dec T B P').
assert_diffs.
destruct (cop__one_or_two_sides B P' A T).
Col.

*****
H7 : TS B P' A T
H13 : not (eq P' A)
H12 : not (eq T P')
H6 : not (Col T B P')
HNCol2 : not (Col P' B A)
HCol : Col B P P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
LeA T B P' P' B A
+++++
apply (l11_30 P' B T P' B C).
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
apply (acute_col_perp__out T).
Col.
apply acute_lea_acute with P' B A.
trivial.
assert (HNCol2 : ~ Col P' B A).
destruct (col_dec T B P').
assert_diffs.
destruct (cop__one_or_two_sides B P' A T).
Col.
apply (l11_30 P' B T P' B C).

*****
H7 : TS B P' A T
H13 : not (eq P' A)
H12 : not (eq T P')
H6 : not (Col T B P')
HNCol2 : not (Col P' B A)
HCol : Col B P P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
LeA P' B T P' B C
+++++
CongA.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
apply (acute_col_perp__out T).
Col.
apply acute_lea_acute with P' B A.
trivial.
assert (HNCol2 : ~ Col P' B A).
destruct (col_dec T B P').
assert_diffs.
destruct (cop__one_or_two_sides B P' A T).
Col.
apply (l11_30 P' B T P' B C).
CongA.

*****
H7 : TS B P' A T
H13 : not (eq P' A)
H12 : not (eq T P')
H6 : not (Col T B P')
HNCol2 : not (Col P' B A)
HCol : Col B P P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
LeA P' B T P' B C
+++++
exists T.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
apply (acute_col_perp__out T).
Col.
apply acute_lea_acute with P' B A.
trivial.
assert (HNCol2 : ~ Col P' B A).
destruct (col_dec T B P').
assert_diffs.
destruct (cop__one_or_two_sides B P' A T).
Col.
apply (l11_30 P' B T P' B C).
CongA.
exists T.

*****
H7 : TS B P' A T
H13 : not (eq P' A)
H12 : not (eq T P')
H6 : not (Col T B P')
HNCol2 : not (Col P' B A)
HCol : Col B P P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (InAngle T P' B C) (CongA P' B T P' B T)
+++++
split.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
apply (acute_col_perp__out T).
Col.
apply acute_lea_acute with P' B A.
trivial.
assert (HNCol2 : ~ Col P' B A).
destruct (col_dec T B P').
assert_diffs.
destruct (cop__one_or_two_sides B P' A T).
Col.
apply (l11_30 P' B T P' B C).
CongA.
exists T.
split.

*****
H7 : TS B P' A T
H13 : not (eq P' A)
H12 : not (eq T P')
H6 : not (Col T B P')
HNCol2 : not (Col P' B A)
HCol : Col B P P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
InAngle T P' B C
+++++
CongA.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
apply (acute_col_perp__out T).
Col.
apply acute_lea_acute with P' B A.
trivial.
assert (HNCol2 : ~ Col P' B A).
destruct (col_dec T B P').
assert_diffs.
destruct (cop__one_or_two_sides B P' A T).
Col.
apply (l11_30 P' B T P' B C).
CongA.
exists T.
split.
CongA.

*****
H7 : TS B P' A T
H13 : not (eq P' A)
H12 : not (eq T P')
H6 : not (Col T B P')
HNCol2 : not (Col P' B A)
HCol : Col B P P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
InAngle T P' B C
+++++
apply l11_24 in HInangle.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
apply (acute_col_perp__out T).
Col.
apply acute_lea_acute with P' B A.
trivial.
assert (HNCol2 : ~ Col P' B A).
destruct (col_dec T B P').
assert_diffs.
destruct (cop__one_or_two_sides B P' A T).
Col.
apply (l11_30 P' B T P' B C).
CongA.
exists T.
split.
CongA.
apply l11_24 in HInangle.

*****
H7 : TS B P' A T
H13 : not (eq P' A)
H12 : not (eq T P')
H6 : not (Col T B P')
HNCol2 : not (Col P' B A)
HCol : Col B P P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T C B A
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
InAngle T P' B C
+++++
apply l11_24 in HInangle'.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
apply (acute_col_perp__out T).
Col.
apply acute_lea_acute with P' B A.
trivial.
assert (HNCol2 : ~ Col P' B A).
destruct (col_dec T B P').
assert_diffs.
destruct (cop__one_or_two_sides B P' A T).
Col.
apply (l11_30 P' B T P' B C).
CongA.
exists T.
split.
CongA.
apply l11_24 in HInangle.
apply l11_24 in HInangle'.

*****
H7 : TS B P' A T
H13 : not (eq P' A)
H12 : not (eq T P')
H6 : not (Col T B P')
HNCol2 : not (Col P' B A)
HCol : Col B P P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' C B A
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T C B A
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
InAngle T P' B C
+++++
destruct (col_dec B C T).
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
apply (acute_col_perp__out T).
Col.
apply acute_lea_acute with P' B A.
trivial.
assert (HNCol2 : ~ Col P' B A).
destruct (col_dec T B P').
assert_diffs.
destruct (cop__one_or_two_sides B P' A T).
Col.
apply (l11_30 P' B T P' B C).
CongA.
exists T.
split.
CongA.
apply l11_24 in HInangle.
apply l11_24 in HInangle'.
destruct (col_dec B C T).

*****
H8 : Col B C T
H7 : TS B P' A T
H13 : not (eq P' A)
H12 : not (eq T P')
H6 : not (Col T B P')
HNCol2 : not (Col P' B A)
HCol : Col B P P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' C B A
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T C B A
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
InAngle T P' B C
+++++
apply out341__inangle.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
apply (acute_col_perp__out T).
Col.
apply acute_lea_acute with P' B A.
trivial.
assert (HNCol2 : ~ Col P' B A).
destruct (col_dec T B P').
assert_diffs.
destruct (cop__one_or_two_sides B P' A T).
Col.
apply (l11_30 P' B T P' B C).
CongA.
exists T.
split.
CongA.
apply l11_24 in HInangle.
apply l11_24 in HInangle'.
destruct (col_dec B C T).
apply out341__inangle.

*****
H8 : Col B C T
H7 : TS B P' A T
H13 : not (eq P' A)
H12 : not (eq T P')
H6 : not (Col T B P')
HNCol2 : not (Col P' B A)
HCol : Col B P P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' C B A
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T C B A
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq P' B)
+++++
auto.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
apply (acute_col_perp__out T).
Col.
apply acute_lea_acute with P' B A.
trivial.
assert (HNCol2 : ~ Col P' B A).
destruct (col_dec T B P').
assert_diffs.
destruct (cop__one_or_two_sides B P' A T).
Col.
apply (l11_30 P' B T P' B C).
CongA.
exists T.
split.
CongA.
apply l11_24 in HInangle.
apply l11_24 in HInangle'.
destruct (col_dec B C T).
apply out341__inangle.

*****
H8 : Col B C T
H7 : TS B P' A T
H13 : not (eq P' A)
H12 : not (eq T P')
H6 : not (Col T B P')
HNCol2 : not (Col P' B A)
HCol : Col B P P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' C B A
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T C B A
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Out B C T
+++++
auto.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
apply (acute_col_perp__out T).
Col.
apply acute_lea_acute with P' B A.
trivial.
assert (HNCol2 : ~ Col P' B A).
destruct (col_dec T B P').
assert_diffs.
destruct (cop__one_or_two_sides B P' A T).
Col.
apply (l11_30 P' B T P' B C).
CongA.
exists T.
split.
CongA.
apply l11_24 in HInangle.
apply l11_24 in HInangle'.
destruct (col_dec B C T).
apply out341__inangle.
auto.

*****
H8 : Col B C T
H7 : TS B P' A T
H13 : not (eq P' A)
H12 : not (eq T P')
H6 : not (Col T B P')
HNCol2 : not (Col P' B A)
HCol : Col B P P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' C B A
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T C B A
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Out B C T
+++++
apply col_in_angle_out with A.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
apply (acute_col_perp__out T).
Col.
apply acute_lea_acute with P' B A.
trivial.
assert (HNCol2 : ~ Col P' B A).
destruct (col_dec T B P').
assert_diffs.
destruct (cop__one_or_two_sides B P' A T).
Col.
apply (l11_30 P' B T P' B C).
CongA.
exists T.
split.
CongA.
apply l11_24 in HInangle.
apply l11_24 in HInangle'.
destruct (col_dec B C T).
apply out341__inangle.
auto.
apply col_in_angle_out with A.

*****
H8 : Col B C T
H7 : TS B P' A T
H13 : not (eq P' A)
H12 : not (eq T P')
H6 : not (Col T B P')
HNCol2 : not (Col P' B A)
HCol : Col B P P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' C B A
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T C B A
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col B C T
+++++
Col.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
apply (acute_col_perp__out T).
Col.
apply acute_lea_acute with P' B A.
trivial.
assert (HNCol2 : ~ Col P' B A).
destruct (col_dec T B P').
assert_diffs.
destruct (cop__one_or_two_sides B P' A T).
Col.
apply (l11_30 P' B T P' B C).
CongA.
exists T.
split.
CongA.
apply l11_24 in HInangle.
apply l11_24 in HInangle'.
destruct (col_dec B C T).
apply out341__inangle.
auto.
apply col_in_angle_out with A.

*****
H8 : Col B C T
H7 : TS B P' A T
H13 : not (eq P' A)
H12 : not (eq T P')
H6 : not (Col T B P')
HNCol2 : not (Col P' B A)
HCol : Col B P P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' C B A
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T C B A
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Bet C B A)
+++++
Col.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
apply (acute_col_perp__out T).
Col.
apply acute_lea_acute with P' B A.
trivial.
assert (HNCol2 : ~ Col P' B A).
destruct (col_dec T B P').
assert_diffs.
destruct (cop__one_or_two_sides B P' A T).
Col.
apply (l11_30 P' B T P' B C).
CongA.
exists T.
split.
CongA.
apply l11_24 in HInangle.
apply l11_24 in HInangle'.
destruct (col_dec B C T).
apply out341__inangle.
auto.
apply col_in_angle_out with A.
Col.

*****
H8 : Col B C T
H7 : TS B P' A T
H13 : not (eq P' A)
H12 : not (eq T P')
H6 : not (Col T B P')
HNCol2 : not (Col P' B A)
HCol : Col B P P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' C B A
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T C B A
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Bet C B A)
+++++
intro.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
apply (acute_col_perp__out T).
Col.
apply acute_lea_acute with P' B A.
trivial.
assert (HNCol2 : ~ Col P' B A).
destruct (col_dec T B P').
assert_diffs.
destruct (cop__one_or_two_sides B P' A T).
Col.
apply (l11_30 P' B T P' B C).
CongA.
exists T.
split.
CongA.
apply l11_24 in HInangle.
apply l11_24 in HInangle'.
destruct (col_dec B C T).
apply out341__inangle.
auto.
apply col_in_angle_out with A.
Col.
intro.

*****
H9 : Bet C B A
H8 : Col B C T
H7 : TS B P' A T
H13 : not (eq P' A)
H12 : not (eq T P')
H6 : not (Col T B P')
HNCol2 : not (Col P' B A)
HCol : Col B P P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' C B A
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T C B A
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply HNCol1.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
apply (acute_col_perp__out T).
Col.
apply acute_lea_acute with P' B A.
trivial.
assert (HNCol2 : ~ Col P' B A).
destruct (col_dec T B P').
assert_diffs.
destruct (cop__one_or_two_sides B P' A T).
Col.
apply (l11_30 P' B T P' B C).
CongA.
exists T.
split.
CongA.
apply l11_24 in HInangle.
apply l11_24 in HInangle'.
destruct (col_dec B C T).
apply out341__inangle.
auto.
apply col_in_angle_out with A.
Col.
intro.
apply HNCol1.

*****
H9 : Bet C B A
H8 : Col B C T
H7 : TS B P' A T
H13 : not (eq P' A)
H12 : not (eq T P')
H6 : not (Col T B P')
HNCol2 : not (Col P' B A)
HCol : Col B P P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' C B A
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T C B A
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A B C
+++++
Col.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
apply (acute_col_perp__out T).
Col.
apply acute_lea_acute with P' B A.
trivial.
assert (HNCol2 : ~ Col P' B A).
destruct (col_dec T B P').
assert_diffs.
destruct (cop__one_or_two_sides B P' A T).
Col.
apply (l11_30 P' B T P' B C).
CongA.
exists T.
split.
CongA.
apply l11_24 in HInangle.
apply l11_24 in HInangle'.
destruct (col_dec B C T).
apply out341__inangle.
auto.
apply col_in_angle_out with A.

*****
H8 : Col B C T
H7 : TS B P' A T
H13 : not (eq P' A)
H12 : not (eq T P')
H6 : not (Col T B P')
HNCol2 : not (Col P' B A)
HCol : Col B P P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' C B A
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T C B A
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
InAngle T C B A
+++++
Col.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
apply (acute_col_perp__out T).
Col.
apply acute_lea_acute with P' B A.
trivial.
assert (HNCol2 : ~ Col P' B A).
destruct (col_dec T B P').
assert_diffs.
destruct (cop__one_or_two_sides B P' A T).
Col.
apply (l11_30 P' B T P' B C).
CongA.
exists T.
split.
CongA.
apply l11_24 in HInangle.
apply l11_24 in HInangle'.
destruct (col_dec B C T).

*****
H8 : not (Col B C T)
H7 : TS B P' A T
H13 : not (eq P' A)
H12 : not (eq T P')
H6 : not (Col T B P')
HNCol2 : not (Col P' B A)
HCol : Col B P P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' C B A
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T C B A
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
InAngle T P' B C
+++++
assert (HNCol3 : ~ Col P' B C).
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
apply (acute_col_perp__out T).
Col.
apply acute_lea_acute with P' B A.
trivial.
assert (HNCol2 : ~ Col P' B A).
destruct (col_dec T B P').
assert_diffs.
destruct (cop__one_or_two_sides B P' A T).
Col.
apply (l11_30 P' B T P' B C).
CongA.
exists T.
split.
CongA.
apply l11_24 in HInangle.
apply l11_24 in HInangle'.
destruct (col_dec B C T).
assert (HNCol3 : ~ Col P' B C).

*****
H8 : not (Col B C T)
H7 : TS B P' A T
H13 : not (eq P' A)
H12 : not (eq T P')
H6 : not (Col T B P')
HNCol2 : not (Col P' B A)
HCol : Col B P P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' C B A
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T C B A
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col P' B C)
+++++
apply (ncol_conga_ncol P' B A).
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
apply (acute_col_perp__out T).
Col.
apply acute_lea_acute with P' B A.
trivial.
assert (HNCol2 : ~ Col P' B A).
destruct (col_dec T B P').
assert_diffs.
destruct (cop__one_or_two_sides B P' A T).
Col.
apply (l11_30 P' B T P' B C).
CongA.
exists T.
split.
CongA.
apply l11_24 in HInangle.
apply l11_24 in HInangle'.
destruct (col_dec B C T).
assert (HNCol3 : ~ Col P' B C).
apply (ncol_conga_ncol P' B A).

*****
H8 : not (Col B C T)
H7 : TS B P' A T
H13 : not (eq P' A)
H12 : not (eq T P')
H6 : not (Col T B P')
HNCol2 : not (Col P' B A)
HCol : Col B P P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' C B A
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T C B A
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col P' B A)
+++++
assumption.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
apply (acute_col_perp__out T).
Col.
apply acute_lea_acute with P' B A.
trivial.
assert (HNCol2 : ~ Col P' B A).
destruct (col_dec T B P').
assert_diffs.
destruct (cop__one_or_two_sides B P' A T).
Col.
apply (l11_30 P' B T P' B C).
CongA.
exists T.
split.
CongA.
apply l11_24 in HInangle.
apply l11_24 in HInangle'.
destruct (col_dec B C T).
assert (HNCol3 : ~ Col P' B C).
apply (ncol_conga_ncol P' B A).

*****
H8 : not (Col B C T)
H7 : TS B P' A T
H13 : not (eq P' A)
H12 : not (eq T P')
H6 : not (Col T B P')
HNCol2 : not (Col P' B A)
HCol : Col B P P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' C B A
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T C B A
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
CongA P' B A P' B C
+++++
assumption.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
apply (acute_col_perp__out T).
Col.
apply acute_lea_acute with P' B A.
trivial.
assert (HNCol2 : ~ Col P' B A).
destruct (col_dec T B P').
assert_diffs.
destruct (cop__one_or_two_sides B P' A T).
Col.
apply (l11_30 P' B T P' B C).
CongA.
exists T.
split.
CongA.
apply l11_24 in HInangle.
apply l11_24 in HInangle'.
destruct (col_dec B C T).
assert (HNCol3 : ~ Col P' B C).

*****
HNCol3 : not (Col P' B C)
H8 : not (Col B C T)
H7 : TS B P' A T
H13 : not (eq P' A)
H12 : not (eq T P')
H6 : not (Col T B P')
HNCol2 : not (Col P' B A)
HCol : Col B P P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' C B A
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T C B A
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
InAngle T P' B C
+++++
idtac.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
apply (acute_col_perp__out T).
Col.
apply acute_lea_acute with P' B A.
trivial.
assert (HNCol2 : ~ Col P' B A).
destruct (col_dec T B P').
assert_diffs.
destruct (cop__one_or_two_sides B P' A T).
Col.
apply (l11_30 P' B T P' B C).
CongA.
exists T.
split.
CongA.
apply l11_24 in HInangle.
apply l11_24 in HInangle'.
destruct (col_dec B C T).
assert (HNCol3 : ~ Col P' B C).
idtac.

*****
HNCol3 : not (Col P' B C)
H8 : not (Col B C T)
H7 : TS B P' A T
H13 : not (eq P' A)
H12 : not (eq T P')
H6 : not (Col T B P')
HNCol2 : not (Col P' B A)
HCol : Col B P P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' C B A
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T C B A
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
InAngle T P' B C
+++++
apply os2__inangle.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
apply (acute_col_perp__out T).
Col.
apply acute_lea_acute with P' B A.
trivial.
assert (HNCol2 : ~ Col P' B A).
destruct (col_dec T B P').
assert_diffs.
destruct (cop__one_or_two_sides B P' A T).
Col.
apply (l11_30 P' B T P' B C).
CongA.
exists T.
split.
CongA.
apply l11_24 in HInangle.
apply l11_24 in HInangle'.
destruct (col_dec B C T).
assert (HNCol3 : ~ Col P' B C).
idtac.
apply os2__inangle.

*****
HNCol3 : not (Col P' B C)
H8 : not (Col B C T)
H7 : TS B P' A T
H13 : not (eq P' A)
H12 : not (eq T P')
H6 : not (Col T B P')
HNCol2 : not (Col P' B A)
HCol : Col B P P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' C B A
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T C B A
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS B P' C T
+++++
exists A.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
apply (acute_col_perp__out T).
Col.
apply acute_lea_acute with P' B A.
trivial.
assert (HNCol2 : ~ Col P' B A).
destruct (col_dec T B P').
assert_diffs.
destruct (cop__one_or_two_sides B P' A T).
Col.
apply (l11_30 P' B T P' B C).
CongA.
exists T.
split.
CongA.
apply l11_24 in HInangle.
apply l11_24 in HInangle'.
destruct (col_dec B C T).
assert (HNCol3 : ~ Col P' B C).
idtac.
apply os2__inangle.
exists A.

*****
HNCol3 : not (Col P' B C)
H8 : not (Col B C T)
H7 : TS B P' A T
H13 : not (eq P' A)
H12 : not (eq T P')
H6 : not (Col T B P')
HNCol2 : not (Col P' B A)
HCol : Col B P P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' C B A
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T C B A
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (TS B P' C A) (TS B P' T A)
+++++
split.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
apply (acute_col_perp__out T).
Col.
apply acute_lea_acute with P' B A.
trivial.
assert (HNCol2 : ~ Col P' B A).
destruct (col_dec T B P').
assert_diffs.
destruct (cop__one_or_two_sides B P' A T).
Col.
apply (l11_30 P' B T P' B C).
CongA.
exists T.
split.
CongA.
apply l11_24 in HInangle.
apply l11_24 in HInangle'.
destruct (col_dec B C T).
assert (HNCol3 : ~ Col P' B C).
idtac.
apply os2__inangle.
exists A.
split.

*****
HNCol3 : not (Col P' B C)
H8 : not (Col B C T)
H7 : TS B P' A T
H13 : not (eq P' A)
H12 : not (eq T P')
H6 : not (Col T B P')
HNCol2 : not (Col P' B A)
HCol : Col B P P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' C B A
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T C B A
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
TS B P' C A
+++++
Side.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
apply (acute_col_perp__out T).
Col.
apply acute_lea_acute with P' B A.
trivial.
assert (HNCol2 : ~ Col P' B A).
destruct (col_dec T B P').
assert_diffs.
destruct (cop__one_or_two_sides B P' A T).
Col.
apply (l11_30 P' B T P' B C).
CongA.
exists T.
split.
CongA.
apply l11_24 in HInangle.
apply l11_24 in HInangle'.
destruct (col_dec B C T).
assert (HNCol3 : ~ Col P' B C).
idtac.
apply os2__inangle.
exists A.
split.
Side.

*****
HNCol3 : not (Col P' B C)
H8 : not (Col B C T)
H7 : TS B P' A T
H13 : not (eq P' A)
H12 : not (eq T P')
H6 : not (Col T B P')
HNCol2 : not (Col P' B A)
HCol : Col B P P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' C B A
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T C B A
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
TS B P' C A
+++++
apply invert_two_sides, in_angle_two_sides.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
apply (acute_col_perp__out T).
Col.
apply acute_lea_acute with P' B A.
trivial.
assert (HNCol2 : ~ Col P' B A).
destruct (col_dec T B P').
assert_diffs.
destruct (cop__one_or_two_sides B P' A T).
Col.
apply (l11_30 P' B T P' B C).
CongA.
exists T.
split.
CongA.
apply l11_24 in HInangle.
apply l11_24 in HInangle'.
destruct (col_dec B C T).
assert (HNCol3 : ~ Col P' B C).
idtac.
apply os2__inangle.
exists A.
split.
Side.
apply invert_two_sides, in_angle_two_sides.

*****
HNCol3 : not (Col P' B C)
H8 : not (Col B C T)
H7 : TS B P' A T
H13 : not (eq P' A)
H12 : not (eq T P')
H6 : not (Col T B P')
HNCol2 : not (Col P' B A)
HCol : Col B P P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' C B A
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T C B A
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col B C P')
+++++
Col.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
apply (acute_col_perp__out T).
Col.
apply acute_lea_acute with P' B A.
trivial.
assert (HNCol2 : ~ Col P' B A).
destruct (col_dec T B P').
assert_diffs.
destruct (cop__one_or_two_sides B P' A T).
Col.
apply (l11_30 P' B T P' B C).
CongA.
exists T.
split.
CongA.
apply l11_24 in HInangle.
apply l11_24 in HInangle'.
destruct (col_dec B C T).
assert (HNCol3 : ~ Col P' B C).
idtac.
apply os2__inangle.
exists A.
split.
Side.
apply invert_two_sides, in_angle_two_sides.

*****
HNCol3 : not (Col P' B C)
H8 : not (Col B C T)
H7 : TS B P' A T
H13 : not (eq P' A)
H12 : not (eq T P')
H6 : not (Col T B P')
HNCol2 : not (Col P' B A)
HCol : Col B P P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' C B A
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T C B A
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col B A P')
+++++
Col.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
apply (acute_col_perp__out T).
Col.
apply acute_lea_acute with P' B A.
trivial.
assert (HNCol2 : ~ Col P' B A).
destruct (col_dec T B P').
assert_diffs.
destruct (cop__one_or_two_sides B P' A T).
Col.
apply (l11_30 P' B T P' B C).
CongA.
exists T.
split.
CongA.
apply l11_24 in HInangle.
apply l11_24 in HInangle'.
destruct (col_dec B C T).
assert (HNCol3 : ~ Col P' B C).
idtac.
apply os2__inangle.
exists A.
split.
Side.
apply invert_two_sides, in_angle_two_sides.

*****
HNCol3 : not (Col P' B C)
H8 : not (Col B C T)
H7 : TS B P' A T
H13 : not (eq P' A)
H12 : not (eq T P')
H6 : not (Col T B P')
HNCol2 : not (Col P' B A)
HCol : Col B P P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' C B A
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T C B A
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
InAngle P' C B A
+++++
Col.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
apply (acute_col_perp__out T).
Col.
apply acute_lea_acute with P' B A.
trivial.
assert (HNCol2 : ~ Col P' B A).
destruct (col_dec T B P').
assert_diffs.
destruct (cop__one_or_two_sides B P' A T).
Col.
apply (l11_30 P' B T P' B C).
CongA.
exists T.
split.
CongA.
apply l11_24 in HInangle.
apply l11_24 in HInangle'.
destruct (col_dec B C T).
assert (HNCol3 : ~ Col P' B C).
idtac.
apply os2__inangle.
exists A.
split.

*****
HNCol3 : not (Col P' B C)
H8 : not (Col B C T)
H7 : TS B P' A T
H13 : not (eq P' A)
H12 : not (eq T P')
H6 : not (Col T B P')
HNCol2 : not (Col P' B A)
HCol : Col B P P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' C B A
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T C B A
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
TS B P' T A
+++++
Side.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
apply (acute_col_perp__out T).
Col.
apply acute_lea_acute with P' B A.
trivial.
assert (HNCol2 : ~ Col P' B A).
destruct (col_dec T B P').
assert_diffs.
destruct (cop__one_or_two_sides B P' A T).
Col.
apply (l11_30 P' B T P' B C).
CongA.
exists T.
split.
CongA.
apply l11_24 in HInangle.
apply l11_24 in HInangle'.
destruct (col_dec B C T).
assert (HNCol3 : ~ Col P' B C).
idtac.
apply os2__inangle.

*****
HNCol3 : not (Col P' B C)
H8 : not (Col B C T)
H7 : TS B P' A T
H13 : not (eq P' A)
H12 : not (eq T P')
H6 : not (Col T B P')
HNCol2 : not (Col P' B A)
HCol : Col B P P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' C B A
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T C B A
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS B C P' T
+++++
apply invert_one_side, inangle_one_side with A.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
apply (acute_col_perp__out T).
Col.
apply acute_lea_acute with P' B A.
trivial.
assert (HNCol2 : ~ Col P' B A).
destruct (col_dec T B P').
assert_diffs.
destruct (cop__one_or_two_sides B P' A T).
Col.
apply (l11_30 P' B T P' B C).
CongA.
exists T.
split.
CongA.
apply l11_24 in HInangle.
apply l11_24 in HInangle'.
destruct (col_dec B C T).
assert (HNCol3 : ~ Col P' B C).
idtac.
apply os2__inangle.
apply invert_one_side, inangle_one_side with A.

*****
HNCol3 : not (Col P' B C)
H8 : not (Col B C T)
H7 : TS B P' A T
H13 : not (eq P' A)
H12 : not (eq T P')
H6 : not (Col T B P')
HNCol2 : not (Col P' B A)
HCol : Col B P P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' C B A
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T C B A
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col C B A)
+++++
Col.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
apply (acute_col_perp__out T).
Col.
apply acute_lea_acute with P' B A.
trivial.
assert (HNCol2 : ~ Col P' B A).
destruct (col_dec T B P').
assert_diffs.
destruct (cop__one_or_two_sides B P' A T).
Col.
apply (l11_30 P' B T P' B C).
CongA.
exists T.
split.
CongA.
apply l11_24 in HInangle.
apply l11_24 in HInangle'.
destruct (col_dec B C T).
assert (HNCol3 : ~ Col P' B C).
idtac.
apply os2__inangle.
apply invert_one_side, inangle_one_side with A.

*****
HNCol3 : not (Col P' B C)
H8 : not (Col B C T)
H7 : TS B P' A T
H13 : not (eq P' A)
H12 : not (eq T P')
H6 : not (Col T B P')
HNCol2 : not (Col P' B A)
HCol : Col B P P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' C B A
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T C B A
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col C B P')
+++++
Col.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
apply (acute_col_perp__out T).
Col.
apply acute_lea_acute with P' B A.
trivial.
assert (HNCol2 : ~ Col P' B A).
destruct (col_dec T B P').
assert_diffs.
destruct (cop__one_or_two_sides B P' A T).
Col.
apply (l11_30 P' B T P' B C).
CongA.
exists T.
split.
CongA.
apply l11_24 in HInangle.
apply l11_24 in HInangle'.
destruct (col_dec B C T).
assert (HNCol3 : ~ Col P' B C).
idtac.
apply os2__inangle.
apply invert_one_side, inangle_one_side with A.

*****
HNCol3 : not (Col P' B C)
H8 : not (Col B C T)
H7 : TS B P' A T
H13 : not (eq P' A)
H12 : not (eq T P')
H6 : not (Col T B P')
HNCol2 : not (Col P' B A)
HCol : Col B P P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' C B A
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T C B A
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col C B T)
+++++
Col.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
apply (acute_col_perp__out T).
Col.
apply acute_lea_acute with P' B A.
trivial.
assert (HNCol2 : ~ Col P' B A).
destruct (col_dec T B P').
assert_diffs.
destruct (cop__one_or_two_sides B P' A T).
Col.
apply (l11_30 P' B T P' B C).
CongA.
exists T.
split.
CongA.
apply l11_24 in HInangle.
apply l11_24 in HInangle'.
destruct (col_dec B C T).
assert (HNCol3 : ~ Col P' B C).
idtac.
apply os2__inangle.
apply invert_one_side, inangle_one_side with A.

*****
HNCol3 : not (Col P' B C)
H8 : not (Col B C T)
H7 : TS B P' A T
H13 : not (eq P' A)
H12 : not (eq T P')
H6 : not (Col T B P')
HNCol2 : not (Col P' B A)
HCol : Col B P P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' C B A
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T C B A
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
InAngle P' C B A
+++++
Col.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
apply (acute_col_perp__out T).
Col.
apply acute_lea_acute with P' B A.
trivial.
assert (HNCol2 : ~ Col P' B A).
destruct (col_dec T B P').
assert_diffs.
destruct (cop__one_or_two_sides B P' A T).
Col.
apply (l11_30 P' B T P' B C).
CongA.
exists T.
split.
CongA.
apply l11_24 in HInangle.
apply l11_24 in HInangle'.
destruct (col_dec B C T).
assert (HNCol3 : ~ Col P' B C).
idtac.
apply os2__inangle.
apply invert_one_side, inangle_one_side with A.

*****
HNCol3 : not (Col P' B C)
H8 : not (Col B C T)
H7 : TS B P' A T
H13 : not (eq P' A)
H12 : not (eq T P')
H6 : not (Col T B P')
HNCol2 : not (Col P' B A)
HCol : Col B P P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' C B A
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T C B A
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
InAngle T C B A
+++++
Col.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
apply (acute_col_perp__out T).
Col.
apply acute_lea_acute with P' B A.
trivial.
assert (HNCol2 : ~ Col P' B A).
destruct (col_dec T B P').
assert_diffs.
destruct (cop__one_or_two_sides B P' A T).
Col.
apply (l11_30 P' B T P' B C).
CongA.
exists T.
split.

*****
H7 : TS B P' A T
H13 : not (eq P' A)
H12 : not (eq T P')
H6 : not (Col T B P')
HNCol2 : not (Col P' B A)
HCol : Col B P P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
CongA P' B T P' B T
+++++
CongA.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
apply (acute_col_perp__out T).
Col.
apply acute_lea_acute with P' B A.
trivial.
assert (HNCol2 : ~ Col P' B A).
destruct (col_dec T B P').
assert_diffs.
destruct (cop__one_or_two_sides B P' A T).
Col.
apply (l11_30 P' B T P' B C).

*****
H7 : TS B P' A T
H13 : not (eq P' A)
H12 : not (eq T P')
H6 : not (Col T B P')
HNCol2 : not (Col P' B A)
HCol : Col B P P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
CongA P' B T T B P'
+++++
CongA.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
apply (acute_col_perp__out T).
Col.
apply acute_lea_acute with P' B A.
trivial.
assert (HNCol2 : ~ Col P' B A).
destruct (col_dec T B P').
assert_diffs.
destruct (cop__one_or_two_sides B P' A T).
Col.
apply (l11_30 P' B T P' B C).

*****
H7 : TS B P' A T
H13 : not (eq P' A)
H12 : not (eq T P')
H6 : not (Col T B P')
HNCol2 : not (Col P' B A)
HCol : Col B P P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
CongA P' B C P' B A
+++++
CongA.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
apply (acute_col_perp__out T).
Col.
apply acute_lea_acute with P' B A.
trivial.
assert (HNCol2 : ~ Col P' B A).
destruct (col_dec T B P').
assert_diffs.
destruct (cop__one_or_two_sides B P' A T).

*****
H7 : OS B P' A T
H13 : not (eq P' A)
H12 : not (eq T P')
H6 : not (Col T B P')
HNCol2 : not (Col P' B A)
HCol : Col B P P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
LeA T B P' P' B A
+++++
Col.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
apply (acute_col_perp__out T).
Col.
apply acute_lea_acute with P' B A.
trivial.
assert (HNCol2 : ~ Col P' B A).
destruct (col_dec T B P').
assert_diffs.
destruct (cop__one_or_two_sides B P' A T).
Col.

*****
H7 : OS B P' A T
H13 : not (eq P' A)
H12 : not (eq T P')
H6 : not (Col T B P')
HNCol2 : not (Col P' B A)
HCol : Col B P P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
LeA T B P' P' B A
+++++
exists T.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
apply (acute_col_perp__out T).
Col.
apply acute_lea_acute with P' B A.
trivial.
assert (HNCol2 : ~ Col P' B A).
destruct (col_dec T B P').
assert_diffs.
destruct (cop__one_or_two_sides B P' A T).
Col.
exists T.

*****
H7 : OS B P' A T
H13 : not (eq P' A)
H12 : not (eq T P')
H6 : not (Col T B P')
HNCol2 : not (Col P' B A)
HCol : Col B P P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (InAngle T P' B A) (CongA T B P' P' B T)
+++++
split.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
apply (acute_col_perp__out T).
Col.
apply acute_lea_acute with P' B A.
trivial.
assert (HNCol2 : ~ Col P' B A).
destruct (col_dec T B P').
assert_diffs.
destruct (cop__one_or_two_sides B P' A T).
Col.
exists T.
split.

*****
H7 : OS B P' A T
H13 : not (eq P' A)
H12 : not (eq T P')
H6 : not (Col T B P')
HNCol2 : not (Col P' B A)
HCol : Col B P P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
InAngle T P' B A
+++++
CongA.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
apply (acute_col_perp__out T).
Col.
apply acute_lea_acute with P' B A.
trivial.
assert (HNCol2 : ~ Col P' B A).
destruct (col_dec T B P').
assert_diffs.
destruct (cop__one_or_two_sides B P' A T).
Col.
exists T.
split.
CongA.

*****
H7 : OS B P' A T
H13 : not (eq P' A)
H12 : not (eq T P')
H6 : not (Col T B P')
HNCol2 : not (Col P' B A)
HCol : Col B P P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
InAngle T P' B A
+++++
destruct (col_dec B A T).
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
apply (acute_col_perp__out T).
Col.
apply acute_lea_acute with P' B A.
trivial.
assert (HNCol2 : ~ Col P' B A).
destruct (col_dec T B P').
assert_diffs.
destruct (cop__one_or_two_sides B P' A T).
Col.
exists T.
split.
CongA.
destruct (col_dec B A T).

*****
H8 : Col B A T
H7 : OS B P' A T
H13 : not (eq P' A)
H12 : not (eq T P')
H6 : not (Col T B P')
HNCol2 : not (Col P' B A)
HCol : Col B P P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
InAngle T P' B A
+++++
apply out341__inangle.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
apply (acute_col_perp__out T).
Col.
apply acute_lea_acute with P' B A.
trivial.
assert (HNCol2 : ~ Col P' B A).
destruct (col_dec T B P').
assert_diffs.
destruct (cop__one_or_two_sides B P' A T).
Col.
exists T.
split.
CongA.
destruct (col_dec B A T).
apply out341__inangle.

*****
H8 : Col B A T
H7 : OS B P' A T
H13 : not (eq P' A)
H12 : not (eq T P')
H6 : not (Col T B P')
HNCol2 : not (Col P' B A)
HCol : Col B P P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq P' B)
+++++
auto.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
apply (acute_col_perp__out T).
Col.
apply acute_lea_acute with P' B A.
trivial.
assert (HNCol2 : ~ Col P' B A).
destruct (col_dec T B P').
assert_diffs.
destruct (cop__one_or_two_sides B P' A T).
Col.
exists T.
split.
CongA.
destruct (col_dec B A T).
apply out341__inangle.

*****
H8 : Col B A T
H7 : OS B P' A T
H13 : not (eq P' A)
H12 : not (eq T P')
H6 : not (Col T B P')
HNCol2 : not (Col P' B A)
HCol : Col B P P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Out B A T
+++++
auto.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
apply (acute_col_perp__out T).
Col.
apply acute_lea_acute with P' B A.
trivial.
assert (HNCol2 : ~ Col P' B A).
destruct (col_dec T B P').
assert_diffs.
destruct (cop__one_or_two_sides B P' A T).
Col.
exists T.
split.
CongA.
destruct (col_dec B A T).
apply out341__inangle.
auto.

*****
H8 : Col B A T
H7 : OS B P' A T
H13 : not (eq P' A)
H12 : not (eq T P')
H6 : not (Col T B P')
HNCol2 : not (Col P' B A)
HCol : Col B P P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Out B A T
+++++
apply col_in_angle_out with C.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
apply (acute_col_perp__out T).
Col.
apply acute_lea_acute with P' B A.
trivial.
assert (HNCol2 : ~ Col P' B A).
destruct (col_dec T B P').
assert_diffs.
destruct (cop__one_or_two_sides B P' A T).
Col.
exists T.
split.
CongA.
destruct (col_dec B A T).
apply out341__inangle.
auto.
apply col_in_angle_out with C.

*****
H8 : Col B A T
H7 : OS B P' A T
H13 : not (eq P' A)
H12 : not (eq T P')
H6 : not (Col T B P')
HNCol2 : not (Col P' B A)
HCol : Col B P P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col B A T
+++++
Col.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
apply (acute_col_perp__out T).
Col.
apply acute_lea_acute with P' B A.
trivial.
assert (HNCol2 : ~ Col P' B A).
destruct (col_dec T B P').
assert_diffs.
destruct (cop__one_or_two_sides B P' A T).
Col.
exists T.
split.
CongA.
destruct (col_dec B A T).
apply out341__inangle.
auto.
apply col_in_angle_out with C.

*****
H8 : Col B A T
H7 : OS B P' A T
H13 : not (eq P' A)
H12 : not (eq T P')
H6 : not (Col T B P')
HNCol2 : not (Col P' B A)
HCol : Col B P P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Bet A B C)
+++++
Col.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
apply (acute_col_perp__out T).
Col.
apply acute_lea_acute with P' B A.
trivial.
assert (HNCol2 : ~ Col P' B A).
destruct (col_dec T B P').
assert_diffs.
destruct (cop__one_or_two_sides B P' A T).
Col.
exists T.
split.
CongA.
destruct (col_dec B A T).
apply out341__inangle.
auto.
apply col_in_angle_out with C.
Col.

*****
H8 : Col B A T
H7 : OS B P' A T
H13 : not (eq P' A)
H12 : not (eq T P')
H6 : not (Col T B P')
HNCol2 : not (Col P' B A)
HCol : Col B P P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Bet A B C)
+++++
intro.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
apply (acute_col_perp__out T).
Col.
apply acute_lea_acute with P' B A.
trivial.
assert (HNCol2 : ~ Col P' B A).
destruct (col_dec T B P').
assert_diffs.
destruct (cop__one_or_two_sides B P' A T).
Col.
exists T.
split.
CongA.
destruct (col_dec B A T).
apply out341__inangle.
auto.
apply col_in_angle_out with C.
Col.
intro.

*****
H9 : Bet A B C
H8 : Col B A T
H7 : OS B P' A T
H13 : not (eq P' A)
H12 : not (eq T P')
H6 : not (Col T B P')
HNCol2 : not (Col P' B A)
HCol : Col B P P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply HNCol1.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
apply (acute_col_perp__out T).
Col.
apply acute_lea_acute with P' B A.
trivial.
assert (HNCol2 : ~ Col P' B A).
destruct (col_dec T B P').
assert_diffs.
destruct (cop__one_or_two_sides B P' A T).
Col.
exists T.
split.
CongA.
destruct (col_dec B A T).
apply out341__inangle.
auto.
apply col_in_angle_out with C.
Col.
intro.
apply HNCol1.

*****
H9 : Bet A B C
H8 : Col B A T
H7 : OS B P' A T
H13 : not (eq P' A)
H12 : not (eq T P')
H6 : not (Col T B P')
HNCol2 : not (Col P' B A)
HCol : Col B P P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A B C
+++++
Col.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
apply (acute_col_perp__out T).
Col.
apply acute_lea_acute with P' B A.
trivial.
assert (HNCol2 : ~ Col P' B A).
destruct (col_dec T B P').
assert_diffs.
destruct (cop__one_or_two_sides B P' A T).
Col.
exists T.
split.
CongA.
destruct (col_dec B A T).
apply out341__inangle.
auto.
apply col_in_angle_out with C.

*****
H8 : Col B A T
H7 : OS B P' A T
H13 : not (eq P' A)
H12 : not (eq T P')
H6 : not (Col T B P')
HNCol2 : not (Col P' B A)
HCol : Col B P P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
InAngle T A B C
+++++
Col.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
apply (acute_col_perp__out T).
Col.
apply acute_lea_acute with P' B A.
trivial.
assert (HNCol2 : ~ Col P' B A).
destruct (col_dec T B P').
assert_diffs.
destruct (cop__one_or_two_sides B P' A T).
Col.
exists T.
split.
CongA.
destruct (col_dec B A T).

*****
H8 : not (Col B A T)
H7 : OS B P' A T
H13 : not (eq P' A)
H12 : not (eq T P')
H6 : not (Col T B P')
HNCol2 : not (Col P' B A)
HCol : Col B P P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
InAngle T P' B A
+++++
apply os2__inangle.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
apply (acute_col_perp__out T).
Col.
apply acute_lea_acute with P' B A.
trivial.
assert (HNCol2 : ~ Col P' B A).
destruct (col_dec T B P').
assert_diffs.
destruct (cop__one_or_two_sides B P' A T).
Col.
exists T.
split.
CongA.
destruct (col_dec B A T).
apply os2__inangle.

*****
H8 : not (Col B A T)
H7 : OS B P' A T
H13 : not (eq P' A)
H12 : not (eq T P')
H6 : not (Col T B P')
HNCol2 : not (Col P' B A)
HCol : Col B P P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS B P' A T
+++++
trivial.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
apply (acute_col_perp__out T).
Col.
apply acute_lea_acute with P' B A.
trivial.
assert (HNCol2 : ~ Col P' B A).
destruct (col_dec T B P').
assert_diffs.
destruct (cop__one_or_two_sides B P' A T).
Col.
exists T.
split.
CongA.
destruct (col_dec B A T).
apply os2__inangle.

*****
H8 : not (Col B A T)
H7 : OS B P' A T
H13 : not (eq P' A)
H12 : not (eq T P')
H6 : not (Col T B P')
HNCol2 : not (Col P' B A)
HCol : Col B P P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS B A P' T
+++++
trivial.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
apply (acute_col_perp__out T).
Col.
apply acute_lea_acute with P' B A.
trivial.
assert (HNCol2 : ~ Col P' B A).
destruct (col_dec T B P').
assert_diffs.
destruct (cop__one_or_two_sides B P' A T).
Col.
exists T.
split.
CongA.
destruct (col_dec B A T).
apply os2__inangle.
trivial.

*****
H8 : not (Col B A T)
H7 : OS B P' A T
H13 : not (eq P' A)
H12 : not (eq T P')
H6 : not (Col T B P')
HNCol2 : not (Col P' B A)
HCol : Col B P P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS B A P' T
+++++
apply invert_one_side, inangle_one_side with C.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
apply (acute_col_perp__out T).
Col.
apply acute_lea_acute with P' B A.
trivial.
assert (HNCol2 : ~ Col P' B A).
destruct (col_dec T B P').
assert_diffs.
destruct (cop__one_or_two_sides B P' A T).
Col.
exists T.
split.
CongA.
destruct (col_dec B A T).
apply os2__inangle.
trivial.
apply invert_one_side, inangle_one_side with C.

*****
H8 : not (Col B A T)
H7 : OS B P' A T
H13 : not (eq P' A)
H12 : not (eq T P')
H6 : not (Col T B P')
HNCol2 : not (Col P' B A)
HCol : Col B P P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col A B C)
+++++
Col.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
apply (acute_col_perp__out T).
Col.
apply acute_lea_acute with P' B A.
trivial.
assert (HNCol2 : ~ Col P' B A).
destruct (col_dec T B P').
assert_diffs.
destruct (cop__one_or_two_sides B P' A T).
Col.
exists T.
split.
CongA.
destruct (col_dec B A T).
apply os2__inangle.
trivial.
apply invert_one_side, inangle_one_side with C.

*****
H8 : not (Col B A T)
H7 : OS B P' A T
H13 : not (eq P' A)
H12 : not (eq T P')
H6 : not (Col T B P')
HNCol2 : not (Col P' B A)
HCol : Col B P P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col A B P')
+++++
Col.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
apply (acute_col_perp__out T).
Col.
apply acute_lea_acute with P' B A.
trivial.
assert (HNCol2 : ~ Col P' B A).
destruct (col_dec T B P').
assert_diffs.
destruct (cop__one_or_two_sides B P' A T).
Col.
exists T.
split.
CongA.
destruct (col_dec B A T).
apply os2__inangle.
trivial.
apply invert_one_side, inangle_one_side with C.

*****
H8 : not (Col B A T)
H7 : OS B P' A T
H13 : not (eq P' A)
H12 : not (eq T P')
H6 : not (Col T B P')
HNCol2 : not (Col P' B A)
HCol : Col B P P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col A B T)
+++++
Col.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
apply (acute_col_perp__out T).
Col.
apply acute_lea_acute with P' B A.
trivial.
assert (HNCol2 : ~ Col P' B A).
destruct (col_dec T B P').
assert_diffs.
destruct (cop__one_or_two_sides B P' A T).
Col.
exists T.
split.
CongA.
destruct (col_dec B A T).
apply os2__inangle.
trivial.
apply invert_one_side, inangle_one_side with C.

*****
H8 : not (Col B A T)
H7 : OS B P' A T
H13 : not (eq P' A)
H12 : not (eq T P')
H6 : not (Col T B P')
HNCol2 : not (Col P' B A)
HCol : Col B P P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
InAngle P' A B C
+++++
Col.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
apply (acute_col_perp__out T).
Col.
apply acute_lea_acute with P' B A.
trivial.
assert (HNCol2 : ~ Col P' B A).
destruct (col_dec T B P').
assert_diffs.
destruct (cop__one_or_two_sides B P' A T).
Col.
exists T.
split.
CongA.
destruct (col_dec B A T).
apply os2__inangle.
trivial.
apply invert_one_side, inangle_one_side with C.

*****
H8 : not (Col B A T)
H7 : OS B P' A T
H13 : not (eq P' A)
H12 : not (eq T P')
H6 : not (Col T B P')
HNCol2 : not (Col P' B A)
HCol : Col B P P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
InAngle T A B C
+++++
Col.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
apply (acute_col_perp__out T).
Col.
apply acute_lea_acute with P' B A.
trivial.
assert (HNCol2 : ~ Col P' B A).
destruct (col_dec T B P').
assert_diffs.
destruct (cop__one_or_two_sides B P' A T).
Col.
exists T.
split.

*****
H7 : OS B P' A T
H13 : not (eq P' A)
H12 : not (eq T P')
H6 : not (Col T B P')
HNCol2 : not (Col P' B A)
HCol : Col B P P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
CongA T B P' P' B T
+++++
CongA.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
apply (acute_col_perp__out T).

*****
HCol : Col B P P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col B P' P
+++++
Col.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
apply (acute_col_perp__out T).

*****
HCol : Col B P P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp B P' T P
+++++
Col.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
apply (acute_col_perp__out T).
Col.

*****
HCol : Col B P P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp B P' T P
+++++
apply perp_col with P.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
apply (acute_col_perp__out T).
Col.
apply perp_col with P.

*****
HCol : Col B P P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq B P')
+++++
Col.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
apply (acute_col_perp__out T).
Col.
apply perp_col with P.

*****
HCol : Col B P P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp B P T P
+++++
Col.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
apply (acute_col_perp__out T).
Col.
apply perp_col with P.
Col.

*****
HCol : Col B P P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp B P T P
+++++
apply perp_right_comm, per_perp.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
apply (acute_col_perp__out T).
Col.
apply perp_col with P.
Col.
apply perp_right_comm, per_perp.

*****
HCol : Col B P P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq B P)
+++++
auto.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
apply (acute_col_perp__out T).
Col.
apply perp_col with P.
Col.
apply perp_right_comm, per_perp.

*****
HCol : Col B P P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq P T)
+++++
auto.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
apply (acute_col_perp__out T).
Col.
apply perp_col with P.
Col.
apply perp_right_comm, per_perp.

*****
HCol : Col B P P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per B P T
+++++
auto.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).
assert_diffs.
destruct (angle_bisector A B C) as [P' [HInangle' HConga']].
auto.
assert_diffs.
assert (HAcute : Acute P' B A).
apply l11_25 with P' A C.
try (apply out_trivial).
auto.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HCol : Col B P P').
apply (acute_col_perp__out T).
Col.
apply perp_col with P.

*****
HCol : Col B P P'
HNCol1 : not (Col A B C)
HAcute : Acute P' B A
H5 : not (eq P' B)
HConga' : CongA P' B A P' B C
HInangle' : InAngle P' A B C
P' : Tpoint
H4 : not (eq C B)
H3 : not (eq A C)
H2 : not (eq A B)
H1 : not (eq P B)
H0 : not (eq B T)
H : not (eq P T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col B P P'
+++++
Col.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate_aux : forall A B C P T, Per A B C -> InAngle T A B C -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> InAngle P A B C.
Proof.
intros A B C P T HPer HInangle HConga HPerP HCop.
destruct (eq_dec_points P T).

*****

*****

+++++
Qed.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate :\n  weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : weak_inverse_projection_postulate, weak_tarski_s_parallel_postulate
+++++
Proof.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : weak_inverse_projection_postulate, weak_tarski_s_parallel_postulate
+++++
intro wipp.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.

*****
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
weak_tarski_s_parallel_postulate
+++++
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\ Col T P X /\ Out B C Y /\ Col T P Y).
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).

*****
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C) (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T) (_ : Coplanar A B C P), ex (fun X : Tpoint => ex (fun Y : Tpoint => and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y))))), weak_tarski_s_parallel_postulate
+++++
intros rabp A B C T HPer HInAngle.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.

*****
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => ex (fun Y : Tpoint => and (Out B A X) (and (Out B C Y) (Bet X T Y))))
+++++
assert_diffs.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.

*****
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => ex (fun Y : Tpoint => and (Out B A X) (and (Out B C Y) (Bet X T Y))))
+++++
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].

*****
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq A B)
+++++
auto.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].

*****
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq C B)
+++++
auto.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].

*****
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => ex (fun Y : Tpoint => and (Out B A X) (and (Out B C Y) (Bet X T Y))))
+++++
auto.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.

*****
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => ex (fun Y : Tpoint => and (Out B A X) (and (Out B C Y) (Bet X T Y))))
+++++
assert_diffs.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.

*****
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => ex (fun Y : Tpoint => and (Out B A X) (and (Out B C Y) (Bet X T Y))))
+++++
assert (HNCol1 : ~ Col A B C).
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).

*****
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col A B C)
+++++
apply per_not_col.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
apply per_not_col.

*****
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq A B)
+++++
auto.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
apply per_not_col.

*****
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq B C)
+++++
auto.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
apply per_not_col.

*****
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per A B C
+++++
auto.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).

*****
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => ex (fun Y : Tpoint => and (Out B A X) (and (Out B C Y) (Bet X T Y))))
+++++
idtac.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.

*****
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => ex (fun Y : Tpoint => and (Out B A X) (and (Out B C Y) (Bet X T Y))))
+++++
assert (HNCol2 : ~ Col P0 B A).
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).

*****
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col P0 B A)
+++++
assert (SumA P0 B A P0 B A A B C).
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (SumA P0 B A P0 B A A B C).

*****
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
SumA P0 B A P0 B A A B C
+++++
apply (conga3_suma__suma A B P0 P0 B C A B C).
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (SumA P0 B A P0 B A A B C).
apply (conga3_suma__suma A B P0 P0 B C A B C).

*****
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
SumA A B P0 P0 B C A B C
+++++
CongA.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (SumA P0 B A P0 B A A B C).
apply (conga3_suma__suma A B P0 P0 B C A B C).
CongA.

*****
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
SumA A B P0 P0 B C A B C
+++++
SumA.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (SumA P0 B A P0 B A A B C).
apply (conga3_suma__suma A B P0 P0 B C A B C).

*****
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
CongA A B P0 P0 B A
+++++
CongA.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (SumA P0 B A P0 B A A B C).
apply (conga3_suma__suma A B P0 P0 B C A B C).

*****
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
CongA P0 B C P0 B A
+++++
CongA.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (SumA P0 B A P0 B A A B C).
apply (conga3_suma__suma A B P0 P0 B C A B C).

*****
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
CongA A B C A B C
+++++
CongA.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (SumA P0 B A P0 B A A B C).

*****
H4 : SumA P0 B A P0 B A A B C
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col P0 B A)
+++++
idtac.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (SumA P0 B A P0 B A A B C).
idtac.

*****
H4 : SumA P0 B A P0 B A A B C
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col P0 B A)
+++++
intro.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (SumA P0 B A P0 B A A B C).
idtac.
intro.

*****
H5 : Col P0 B A
H4 : SumA P0 B A P0 B A A B C
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply HNCol1, (col2_suma__col P0 B A P0 B A).
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (SumA P0 B A P0 B A A B C).
idtac.
intro.
apply HNCol1, (col2_suma__col P0 B A P0 B A).

*****
H5 : Col P0 B A
H4 : SumA P0 B A P0 B A A B C
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P0 B A
+++++
assumption.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (SumA P0 B A P0 B A A B C).
idtac.
intro.
apply HNCol1, (col2_suma__col P0 B A P0 B A).

*****
H5 : Col P0 B A
H4 : SumA P0 B A P0 B A A B C
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P0 B A
+++++
assumption.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (SumA P0 B A P0 B A A B C).
idtac.
intro.
apply HNCol1, (col2_suma__col P0 B A P0 B A).

*****
H5 : Col P0 B A
H4 : SumA P0 B A P0 B A A B C
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
SumA P0 B A P0 B A A B C
+++++
assumption.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).

*****
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => ex (fun Y : Tpoint => and (Out B A X) (and (Out B C Y) (Bet X T Y))))
+++++
assert (HXY : exists X Y, Out B A X /\ Out B C Y /\ Col X T Y).
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).

*****
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => ex (fun Y : Tpoint => and (Out B A X) (and (Out B C Y) (Col X T Y))))
+++++
destruct (col_dec B P0 T).
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct (col_dec B P0 T).

*****
H4 : Col B P0 T
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => ex (fun Y : Tpoint => and (Out B A X) (and (Out B C Y) (Col X T Y))))
+++++
assert (HT' : exists T', InAngle T' A B C /\ Perp B T T T').
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct (col_dec B P0 T).
assert (HT' : exists T', InAngle T' A B C /\\ Perp B T T T').

*****
H4 : Col B P0 T
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun T' : Tpoint => and (InAngle T' A B C) (Perp B T T T'))
+++++
destruct (l10_15 B P0 T A) as [T0 [HPerp HOS]].
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct (col_dec B P0 T).
assert (HT' : exists T', InAngle T' A B C /\\ Perp B T T T').
destruct (l10_15 B P0 T A) as [T0 [HPerp HOS]].

*****
H4 : Col B P0 T
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col B P0 T
+++++
Col.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct (col_dec B P0 T).
assert (HT' : exists T', InAngle T' A B C /\\ Perp B T T T').
destruct (l10_15 B P0 T A) as [T0 [HPerp HOS]].

*****
H4 : Col B P0 T
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col B P0 A)
+++++
Col.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct (col_dec B P0 T).
assert (HT' : exists T', InAngle T' A B C /\\ Perp B T T T').
destruct (l10_15 B P0 T A) as [T0 [HPerp HOS]].

*****
HOS : OS B P0 A T0
HPerp : Perp B P0 T0 T
T0 : Tpoint
H4 : Col B P0 T
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun T' : Tpoint => and (InAngle T' A B C) (Perp B T T T'))
+++++
Col.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct (col_dec B P0 T).
assert (HT' : exists T', InAngle T' A B C /\\ Perp B T T T').
destruct (l10_15 B P0 T A) as [T0 [HPerp HOS]].
Col.

*****
HOS : OS B P0 A T0
HPerp : Perp B P0 T0 T
T0 : Tpoint
H4 : Col B P0 T
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun T' : Tpoint => and (InAngle T' A B C) (Perp B T T T'))
+++++
destruct (cop_inangle__ex_col_inangle A B C T T0) as [T' [HT1 [HT2 HT3]]].
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct (col_dec B P0 T).
assert (HT' : exists T', InAngle T' A B C /\\ Perp B T T T').
destruct (l10_15 B P0 T A) as [T0 [HPerp HOS]].
Col.
destruct (cop_inangle__ex_col_inangle A B C T T0) as [T' [HT1 [HT2 HT3]]].

*****
HOS : OS B P0 A T0
HPerp : Perp B P0 T0 T
T0 : Tpoint
H4 : Col B P0 T
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Out B A C)
+++++
trivial.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct (col_dec B P0 T).
assert (HT' : exists T', InAngle T' A B C /\\ Perp B T T T').
destruct (l10_15 B P0 T A) as [T0 [HPerp HOS]].
Col.
destruct (cop_inangle__ex_col_inangle A B C T T0) as [T' [HT1 [HT2 HT3]]].
trivial.

*****
HOS : OS B P0 A T0
HPerp : Perp B P0 T0 T
T0 : Tpoint
H4 : Col B P0 T
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Out B A C)
+++++
intro.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct (col_dec B P0 T).
assert (HT' : exists T', InAngle T' A B C /\\ Perp B T T T').
destruct (l10_15 B P0 T A) as [T0 [HPerp HOS]].
Col.
destruct (cop_inangle__ex_col_inangle A B C T T0) as [T' [HT1 [HT2 HT3]]].
trivial.
intro.

*****
H5 : Out B A C
HOS : OS B P0 A T0
HPerp : Perp B P0 T0 T
T0 : Tpoint
H4 : Col B P0 T
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply HNCol1.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct (col_dec B P0 T).
assert (HT' : exists T', InAngle T' A B C /\\ Perp B T T T').
destruct (l10_15 B P0 T A) as [T0 [HPerp HOS]].
Col.
destruct (cop_inangle__ex_col_inangle A B C T T0) as [T' [HT1 [HT2 HT3]]].
trivial.
intro.
apply HNCol1.

*****
H5 : Out B A C
HOS : OS B P0 A T0
HPerp : Perp B P0 T0 T
T0 : Tpoint
H4 : Col B P0 T
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A B C
+++++
Col.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct (col_dec B P0 T).
assert (HT' : exists T', InAngle T' A B C /\\ Perp B T T T').
destruct (l10_15 B P0 T A) as [T0 [HPerp HOS]].
Col.
destruct (cop_inangle__ex_col_inangle A B C T T0) as [T' [HT1 [HT2 HT3]]].

*****
HOS : OS B P0 A T0
HPerp : Perp B P0 T0 T
T0 : Tpoint
H4 : Col B P0 T
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
InAngle T A B C
+++++
trivial.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct (col_dec B P0 T).
assert (HT' : exists T', InAngle T' A B C /\\ Perp B T T T').
destruct (l10_15 B P0 T A) as [T0 [HPerp HOS]].
Col.
destruct (cop_inangle__ex_col_inangle A B C T T0) as [T' [HT1 [HT2 HT3]]].

*****
HOS : OS B P0 A T0
HPerp : Perp B P0 T0 T
T0 : Tpoint
H4 : Col B P0 T
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B C T0
+++++
trivial.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct (col_dec B P0 T).
assert (HT' : exists T', InAngle T' A B C /\\ Perp B T T T').
destruct (l10_15 B P0 T A) as [T0 [HPerp HOS]].
Col.
destruct (cop_inangle__ex_col_inangle A B C T T0) as [T' [HT1 [HT2 HT3]]].
trivial.

*****
HOS : OS B P0 A T0
HPerp : Perp B P0 T0 T
T0 : Tpoint
H4 : Col B P0 T
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B C T0
+++++
assert (Coplanar P0 A B C).
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct (col_dec B P0 T).
assert (HT' : exists T', InAngle T' A B C /\\ Perp B T T T').
destruct (l10_15 B P0 T A) as [T0 [HPerp HOS]].
Col.
destruct (cop_inangle__ex_col_inangle A B C T T0) as [T' [HT1 [HT2 HT3]]].
trivial.
assert (Coplanar P0 A B C).

*****
HOS : OS B P0 A T0
HPerp : Perp B P0 T0 T
T0 : Tpoint
H4 : Col B P0 T
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar P0 A B C
+++++
Cop.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct (col_dec B P0 T).
assert (HT' : exists T', InAngle T' A B C /\\ Perp B T T T').
destruct (l10_15 B P0 T A) as [T0 [HPerp HOS]].
Col.
destruct (cop_inangle__ex_col_inangle A B C T T0) as [T' [HT1 [HT2 HT3]]].
trivial.
assert (Coplanar P0 A B C).

*****
H5 : Coplanar P0 A B C
HOS : OS B P0 A T0
HPerp : Perp B P0 T0 T
T0 : Tpoint
H4 : Col B P0 T
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B C T0
+++++
idtac.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct (col_dec B P0 T).
assert (HT' : exists T', InAngle T' A B C /\\ Perp B T T T').
destruct (l10_15 B P0 T A) as [T0 [HPerp HOS]].
Col.
destruct (cop_inangle__ex_col_inangle A B C T T0) as [T' [HT1 [HT2 HT3]]].
trivial.
assert (Coplanar P0 A B C).
idtac.

*****
H5 : Coplanar P0 A B C
HOS : OS B P0 A T0
HPerp : Perp B P0 T0 T
T0 : Tpoint
H4 : Col B P0 T
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B C T0
+++++
assert (Coplanar P0 A B T0).
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct (col_dec B P0 T).
assert (HT' : exists T', InAngle T' A B C /\\ Perp B T T T').
destruct (l10_15 B P0 T A) as [T0 [HPerp HOS]].
Col.
destruct (cop_inangle__ex_col_inangle A B C T T0) as [T' [HT1 [HT2 HT3]]].
trivial.
assert (Coplanar P0 A B C).
idtac.
assert (Coplanar P0 A B T0).

*****
H5 : Coplanar P0 A B C
HOS : OS B P0 A T0
HPerp : Perp B P0 T0 T
T0 : Tpoint
H4 : Col B P0 T
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar P0 A B T0
+++++
Cop.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct (col_dec B P0 T).
assert (HT' : exists T', InAngle T' A B C /\\ Perp B T T T').
destruct (l10_15 B P0 T A) as [T0 [HPerp HOS]].
Col.
destruct (cop_inangle__ex_col_inangle A B C T T0) as [T' [HT1 [HT2 HT3]]].
trivial.
assert (Coplanar P0 A B C).
idtac.
assert (Coplanar P0 A B T0).

*****
H6 : Coplanar P0 A B T0
H5 : Coplanar P0 A B C
HOS : OS B P0 A T0
HPerp : Perp B P0 T0 T
T0 : Tpoint
H4 : Col B P0 T
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B C T0
+++++
idtac.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct (col_dec B P0 T).
assert (HT' : exists T', InAngle T' A B C /\\ Perp B T T T').
destruct (l10_15 B P0 T A) as [T0 [HPerp HOS]].
Col.
destruct (cop_inangle__ex_col_inangle A B C T T0) as [T' [HT1 [HT2 HT3]]].
trivial.
assert (Coplanar P0 A B C).
idtac.
assert (Coplanar P0 A B T0).
idtac.

*****
H6 : Coplanar P0 A B T0
H5 : Coplanar P0 A B C
HOS : OS B P0 A T0
HPerp : Perp B P0 T0 T
T0 : Tpoint
H4 : Col B P0 T
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B C T0
+++++
CopR.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct (col_dec B P0 T).
assert (HT' : exists T', InAngle T' A B C /\\ Perp B T T T').
destruct (l10_15 B P0 T A) as [T0 [HPerp HOS]].
Col.
destruct (cop_inangle__ex_col_inangle A B C T T0) as [T' [HT1 [HT2 HT3]]].

*****
HT3 : Col T T0 T'
HT2 : not (eq T T')
HT1 : InAngle T' A B C
T' : Tpoint
HOS : OS B P0 A T0
HPerp : Perp B P0 T0 T
T0 : Tpoint
H4 : Col B P0 T
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun T' : Tpoint => and (InAngle T' A B C) (Perp B T T T'))
+++++
trivial.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct (col_dec B P0 T).
assert (HT' : exists T', InAngle T' A B C /\\ Perp B T T T').
destruct (l10_15 B P0 T A) as [T0 [HPerp HOS]].
Col.
destruct (cop_inangle__ex_col_inangle A B C T T0) as [T' [HT1 [HT2 HT3]]].
trivial.

*****
HT3 : Col T T0 T'
HT2 : not (eq T T')
HT1 : InAngle T' A B C
T' : Tpoint
HOS : OS B P0 A T0
HPerp : Perp B P0 T0 T
T0 : Tpoint
H4 : Col B P0 T
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun T' : Tpoint => and (InAngle T' A B C) (Perp B T T T'))
+++++
exists T'.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct (col_dec B P0 T).
assert (HT' : exists T', InAngle T' A B C /\\ Perp B T T T').
destruct (l10_15 B P0 T A) as [T0 [HPerp HOS]].
Col.
destruct (cop_inangle__ex_col_inangle A B C T T0) as [T' [HT1 [HT2 HT3]]].
trivial.
exists T'.

*****
HT3 : Col T T0 T'
HT2 : not (eq T T')
HT1 : InAngle T' A B C
T' : Tpoint
HOS : OS B P0 A T0
HPerp : Perp B P0 T0 T
T0 : Tpoint
H4 : Col B P0 T
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (InAngle T' A B C) (Perp B T T T')
+++++
split.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct (col_dec B P0 T).
assert (HT' : exists T', InAngle T' A B C /\\ Perp B T T T').
destruct (l10_15 B P0 T A) as [T0 [HPerp HOS]].
Col.
destruct (cop_inangle__ex_col_inangle A B C T T0) as [T' [HT1 [HT2 HT3]]].
trivial.
exists T'.
split.

*****
HT3 : Col T T0 T'
HT2 : not (eq T T')
HT1 : InAngle T' A B C
T' : Tpoint
HOS : OS B P0 A T0
HPerp : Perp B P0 T0 T
T0 : Tpoint
H4 : Col B P0 T
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
InAngle T' A B C
+++++
trivial.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct (col_dec B P0 T).
assert (HT' : exists T', InAngle T' A B C /\\ Perp B T T T').
destruct (l10_15 B P0 T A) as [T0 [HPerp HOS]].
Col.
destruct (cop_inangle__ex_col_inangle A B C T T0) as [T' [HT1 [HT2 HT3]]].
trivial.
exists T'.
split.

*****
HT3 : Col T T0 T'
HT2 : not (eq T T')
HT1 : InAngle T' A B C
T' : Tpoint
HOS : OS B P0 A T0
HPerp : Perp B P0 T0 T
T0 : Tpoint
H4 : Col B P0 T
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp B T T T'
+++++
trivial.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct (col_dec B P0 T).
assert (HT' : exists T', InAngle T' A B C /\\ Perp B T T T').
destruct (l10_15 B P0 T A) as [T0 [HPerp HOS]].
Col.
destruct (cop_inangle__ex_col_inangle A B C T T0) as [T' [HT1 [HT2 HT3]]].
trivial.
exists T'.
split.
trivial.

*****
HT3 : Col T T0 T'
HT2 : not (eq T T')
HT1 : InAngle T' A B C
T' : Tpoint
HOS : OS B P0 A T0
HPerp : Perp B P0 T0 T
T0 : Tpoint
H4 : Col B P0 T
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp B T T T'
+++++
assert_diffs.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct (col_dec B P0 T).
assert (HT' : exists T', InAngle T' A B C /\\ Perp B T T T').
destruct (l10_15 B P0 T A) as [T0 [HPerp HOS]].
Col.
destruct (cop_inangle__ex_col_inangle A B C T T0) as [T' [HT1 [HT2 HT3]]].
trivial.
exists T'.
split.
trivial.
assert_diffs.

*****
H12 : not (eq T' B)
H13 : not (eq P0 T0)
H8 : not (eq B T0)
H7 : not (eq T0 T)
H10 : not (eq P0 A)
HT3 : Col T T0 T'
HT2 : not (eq T T')
HT1 : InAngle T' A B C
T' : Tpoint
HOS : OS B P0 A T0
HPerp : Perp B P0 T0 T
T0 : Tpoint
H4 : Col B P0 T
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp B T T T'
+++++
apply perp_col with P0.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct (col_dec B P0 T).
assert (HT' : exists T', InAngle T' A B C /\\ Perp B T T T').
destruct (l10_15 B P0 T A) as [T0 [HPerp HOS]].
Col.
destruct (cop_inangle__ex_col_inangle A B C T T0) as [T' [HT1 [HT2 HT3]]].
trivial.
exists T'.
split.
trivial.
assert_diffs.
apply perp_col with P0.

*****
H12 : not (eq T' B)
H13 : not (eq P0 T0)
H8 : not (eq B T0)
H7 : not (eq T0 T)
H10 : not (eq P0 A)
HT3 : Col T T0 T'
HT2 : not (eq T T')
HT1 : InAngle T' A B C
T' : Tpoint
HOS : OS B P0 A T0
HPerp : Perp B P0 T0 T
T0 : Tpoint
H4 : Col B P0 T
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq B T)
+++++
Col.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct (col_dec B P0 T).
assert (HT' : exists T', InAngle T' A B C /\\ Perp B T T T').
destruct (l10_15 B P0 T A) as [T0 [HPerp HOS]].
Col.
destruct (cop_inangle__ex_col_inangle A B C T T0) as [T' [HT1 [HT2 HT3]]].
trivial.
exists T'.
split.
trivial.
assert_diffs.
apply perp_col with P0.

*****
H12 : not (eq T' B)
H13 : not (eq P0 T0)
H8 : not (eq B T0)
H7 : not (eq T0 T)
H10 : not (eq P0 A)
HT3 : Col T T0 T'
HT2 : not (eq T T')
HT1 : InAngle T' A B C
T' : Tpoint
HOS : OS B P0 A T0
HPerp : Perp B P0 T0 T
T0 : Tpoint
H4 : Col B P0 T
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp B P0 T T'
+++++
Col.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct (col_dec B P0 T).
assert (HT' : exists T', InAngle T' A B C /\\ Perp B T T T').
destruct (l10_15 B P0 T A) as [T0 [HPerp HOS]].
Col.
destruct (cop_inangle__ex_col_inangle A B C T T0) as [T' [HT1 [HT2 HT3]]].
trivial.
exists T'.
split.
trivial.
assert_diffs.
apply perp_col with P0.
Col.

*****
H12 : not (eq T' B)
H13 : not (eq P0 T0)
H8 : not (eq B T0)
H7 : not (eq T0 T)
H10 : not (eq P0 A)
HT3 : Col T T0 T'
HT2 : not (eq T T')
HT1 : InAngle T' A B C
T' : Tpoint
HOS : OS B P0 A T0
HPerp : Perp B P0 T0 T
T0 : Tpoint
H4 : Col B P0 T
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp B P0 T T'
+++++
apply perp_col1 with T0.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct (col_dec B P0 T).
assert (HT' : exists T', InAngle T' A B C /\\ Perp B T T T').
destruct (l10_15 B P0 T A) as [T0 [HPerp HOS]].
Col.
destruct (cop_inangle__ex_col_inangle A B C T T0) as [T' [HT1 [HT2 HT3]]].
trivial.
exists T'.
split.
trivial.
assert_diffs.
apply perp_col with P0.
Col.
apply perp_col1 with T0.

*****
H12 : not (eq T' B)
H13 : not (eq P0 T0)
H8 : not (eq B T0)
H7 : not (eq T0 T)
H10 : not (eq P0 A)
HT3 : Col T T0 T'
HT2 : not (eq T T')
HT1 : InAngle T' A B C
T' : Tpoint
HOS : OS B P0 A T0
HPerp : Perp B P0 T0 T
T0 : Tpoint
H4 : Col B P0 T
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq T T')
+++++
Perp.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct (col_dec B P0 T).
assert (HT' : exists T', InAngle T' A B C /\\ Perp B T T T').
destruct (l10_15 B P0 T A) as [T0 [HPerp HOS]].
Col.
destruct (cop_inangle__ex_col_inangle A B C T T0) as [T' [HT1 [HT2 HT3]]].
trivial.
exists T'.
split.
trivial.
assert_diffs.
apply perp_col with P0.
Col.
apply perp_col1 with T0.

*****
H12 : not (eq T' B)
H13 : not (eq P0 T0)
H8 : not (eq B T0)
H7 : not (eq T0 T)
H10 : not (eq P0 A)
HT3 : Col T T0 T'
HT2 : not (eq T T')
HT1 : InAngle T' A B C
T' : Tpoint
HOS : OS B P0 A T0
HPerp : Perp B P0 T0 T
T0 : Tpoint
H4 : Col B P0 T
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp B P0 T T0
+++++
Perp.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct (col_dec B P0 T).
assert (HT' : exists T', InAngle T' A B C /\\ Perp B T T T').
destruct (l10_15 B P0 T A) as [T0 [HPerp HOS]].
Col.
destruct (cop_inangle__ex_col_inangle A B C T T0) as [T' [HT1 [HT2 HT3]]].
trivial.
exists T'.
split.
trivial.
assert_diffs.
apply perp_col with P0.
Col.
apply perp_col1 with T0.

*****
H12 : not (eq T' B)
H13 : not (eq P0 T0)
H8 : not (eq B T0)
H7 : not (eq T0 T)
H10 : not (eq P0 A)
HT3 : Col T T0 T'
HT2 : not (eq T T')
HT1 : InAngle T' A B C
T' : Tpoint
HOS : OS B P0 A T0
HPerp : Perp B P0 T0 T
T0 : Tpoint
H4 : Col B P0 T
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col T T0 T'
+++++
Perp.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct (col_dec B P0 T).
assert (HT' : exists T', InAngle T' A B C /\\ Perp B T T T').
destruct (l10_15 B P0 T A) as [T0 [HPerp HOS]].
Col.
destruct (cop_inangle__ex_col_inangle A B C T T0) as [T' [HT1 [HT2 HT3]]].
trivial.
exists T'.
split.
trivial.
assert_diffs.
apply perp_col with P0.

*****
H12 : not (eq T' B)
H13 : not (eq P0 T0)
H8 : not (eq B T0)
H7 : not (eq T0 T)
H10 : not (eq P0 A)
HT3 : Col T T0 T'
HT2 : not (eq T T')
HT1 : InAngle T' A B C
T' : Tpoint
HOS : OS B P0 A T0
HPerp : Perp B P0 T0 T
T0 : Tpoint
H4 : Col B P0 T
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col B P0 T
+++++
Col.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct (col_dec B P0 T).
assert (HT' : exists T', InAngle T' A B C /\\ Perp B T T T').

*****
HT' : ex (fun T' : Tpoint => and (InAngle T' A B C) (Perp B T T T'))
H4 : Col B P0 T
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => ex (fun Y : Tpoint => and (Out B A X) (and (Out B C Y) (Col X T Y))))
+++++
destruct HT' as [T' []].
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct (col_dec B P0 T).
assert (HT' : exists T', InAngle T' A B C /\\ Perp B T T T').
destruct HT' as [T' []].

*****
H6 : Perp B T T T'
H5 : InAngle T' A B C
T' : Tpoint
H4 : Col B P0 T
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => ex (fun Y : Tpoint => and (Out B A X) (and (Out B C Y) (Col X T Y))))
+++++
assert_diffs.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct (col_dec B P0 T).
assert (HT' : exists T', InAngle T' A B C /\\ Perp B T T T').
destruct HT' as [T' []].
assert_diffs.

*****
H13 : not (eq T' B)
H9 : not (eq T T')
H12 : not (eq P0 A)
H6 : Perp B T T T'
H5 : InAngle T' A B C
T' : Tpoint
H4 : Col B P0 T
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => ex (fun Y : Tpoint => and (Out B A X) (and (Out B C Y) (Col X T Y))))
+++++
destruct (rabp A B C T T') as [X [Y]].
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct (col_dec B P0 T).
assert (HT' : exists T', InAngle T' A B C /\\ Perp B T T T').
destruct HT' as [T' []].
assert_diffs.
destruct (rabp A B C T T') as [X [Y]].

*****
H13 : not (eq T' B)
H9 : not (eq T T')
H12 : not (eq P0 A)
H6 : Perp B T T T'
H5 : InAngle T' A B C
T' : Tpoint
H4 : Col B P0 T
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per A B C
+++++
Perp.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct (col_dec B P0 T).
assert (HT' : exists T', InAngle T' A B C /\\ Perp B T T T').
destruct HT' as [T' []].
assert_diffs.
destruct (rabp A B C T T') as [X [Y]].

*****
H13 : not (eq T' B)
H9 : not (eq T T')
H12 : not (eq P0 A)
H6 : Perp B T T T'
H5 : InAngle T' A B C
T' : Tpoint
H4 : Col B P0 T
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
InAngle T' A B C
+++++
Perp.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct (col_dec B P0 T).
assert (HT' : exists T', InAngle T' A B C /\\ Perp B T T T').
destruct HT' as [T' []].
assert_diffs.
destruct (rabp A B C T T') as [X [Y]].

*****
H13 : not (eq T' B)
H9 : not (eq T T')
H12 : not (eq P0 A)
H6 : Perp B T T T'
H5 : InAngle T' A B C
T' : Tpoint
H4 : Col B P0 T
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq T T')
+++++
Perp.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct (col_dec B P0 T).
assert (HT' : exists T', InAngle T' A B C /\\ Perp B T T T').
destruct HT' as [T' []].
assert_diffs.
destruct (rabp A B C T T') as [X [Y]].

*****
H13 : not (eq T' B)
H9 : not (eq T T')
H12 : not (eq P0 A)
H6 : Perp B T T T'
H5 : InAngle T' A B C
T' : Tpoint
H4 : Col B P0 T
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
CongA T B A T B C
+++++
Perp.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct (col_dec B P0 T).
assert (HT' : exists T', InAngle T' A B C /\\ Perp B T T T').
destruct HT' as [T' []].
assert_diffs.
destruct (rabp A B C T T') as [X [Y]].
Perp.

*****
H13 : not (eq T' B)
H9 : not (eq T T')
H12 : not (eq P0 A)
H6 : Perp B T T T'
H5 : InAngle T' A B C
T' : Tpoint
H4 : Col B P0 T
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
CongA T B A T B C
+++++
Cop.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct (col_dec B P0 T).
assert (HT' : exists T', InAngle T' A B C /\\ Perp B T T T').
destruct HT' as [T' []].
assert_diffs.
destruct (rabp A B C T T') as [X [Y]].
Perp.
Cop.

*****
H13 : not (eq T' B)
H9 : not (eq T T')
H12 : not (eq P0 A)
H6 : Perp B T T T'
H5 : InAngle T' A B C
T' : Tpoint
H4 : Col B P0 T
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
CongA T B A T B C
+++++
apply col_conga__conga with P0.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct (col_dec B P0 T).
assert (HT' : exists T', InAngle T' A B C /\\ Perp B T T T').
destruct HT' as [T' []].
assert_diffs.
destruct (rabp A B C T T') as [X [Y]].
Perp.
Cop.
apply col_conga__conga with P0.

*****
H13 : not (eq T' B)
H9 : not (eq T T')
H12 : not (eq P0 A)
H6 : Perp B T T T'
H5 : InAngle T' A B C
T' : Tpoint
H4 : Col B P0 T
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
CongA P0 B A P0 B C
+++++
auto.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct (col_dec B P0 T).
assert (HT' : exists T', InAngle T' A B C /\\ Perp B T T T').
destruct HT' as [T' []].
assert_diffs.
destruct (rabp A B C T T') as [X [Y]].
Perp.
Cop.
apply col_conga__conga with P0.

*****
H13 : not (eq T' B)
H9 : not (eq T T')
H12 : not (eq P0 A)
H6 : Perp B T T T'
H5 : InAngle T' A B C
T' : Tpoint
H4 : Col B P0 T
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col B P0 T
+++++
auto.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct (col_dec B P0 T).
assert (HT' : exists T', InAngle T' A B C /\\ Perp B T T T').
destruct HT' as [T' []].
assert_diffs.
destruct (rabp A B C T T') as [X [Y]].
Perp.
Cop.
apply col_conga__conga with P0.

*****
H13 : not (eq T' B)
H9 : not (eq T T')
H12 : not (eq P0 A)
H6 : Perp B T T T'
H5 : InAngle T' A B C
T' : Tpoint
H4 : Col B P0 T
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq B T)
+++++
auto.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct (col_dec B P0 T).
assert (HT' : exists T', InAngle T' A B C /\\ Perp B T T T').
destruct HT' as [T' []].
assert_diffs.
destruct (rabp A B C T T') as [X [Y]].

*****
H13 : not (eq T' B)
H9 : not (eq T T')
H12 : not (eq P0 A)
H6 : Perp B T T T'
H5 : InAngle T' A B C
T' : Tpoint
H4 : Col B P0 T
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per B T T'
+++++
Perp.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct (col_dec B P0 T).
assert (HT' : exists T', InAngle T' A B C /\\ Perp B T T T').
destruct HT' as [T' []].
assert_diffs.
destruct (rabp A B C T T') as [X [Y]].

*****
H13 : not (eq T' B)
H9 : not (eq T T')
H12 : not (eq P0 A)
H6 : Perp B T T T'
H5 : InAngle T' A B C
T' : Tpoint
H4 : Col B P0 T
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B C T
+++++
Perp.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct (col_dec B P0 T).
assert (HT' : exists T', InAngle T' A B C /\\ Perp B T T T').
destruct HT' as [T' []].
assert_diffs.
destruct (rabp A B C T T') as [X [Y]].
Perp.

*****
H13 : not (eq T' B)
H9 : not (eq T T')
H12 : not (eq P0 A)
H6 : Perp B T T T'
H5 : InAngle T' A B C
T' : Tpoint
H4 : Col B P0 T
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B C T
+++++
Cop.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct (col_dec B P0 T).
assert (HT' : exists T', InAngle T' A B C /\\ Perp B T T T').
destruct HT' as [T' []].
assert_diffs.
destruct (rabp A B C T T') as [X [Y]].

*****
H7 : and (Out B A X) (and (Col T' T X) (and (Out B C Y) (Col T' T Y)))
X,Y : Tpoint
H13 : not (eq T' B)
H9 : not (eq T T')
H12 : not (eq P0 A)
H6 : Perp B T T T'
H5 : InAngle T' A B C
T' : Tpoint
H4 : Col B P0 T
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => ex (fun Y : Tpoint => and (Out B A X) (and (Out B C Y) (Col X T Y))))
+++++
Perp.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct (col_dec B P0 T).
assert (HT' : exists T', InAngle T' A B C /\\ Perp B T T T').
destruct HT' as [T' []].
assert_diffs.
destruct (rabp A B C T T') as [X [Y]].
Perp.

*****
H7 : and (Out B A X) (and (Col T' T X) (and (Out B C Y) (Col T' T Y)))
X,Y : Tpoint
H13 : not (eq T' B)
H9 : not (eq T T')
H12 : not (eq P0 A)
H6 : Perp B T T T'
H5 : InAngle T' A B C
T' : Tpoint
H4 : Col B P0 T
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => ex (fun Y : Tpoint => and (Out B A X) (and (Out B C Y) (Col X T Y))))
+++++
Cop.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct (col_dec B P0 T).
assert (HT' : exists T', InAngle T' A B C /\\ Perp B T T T').
destruct HT' as [T' []].
assert_diffs.
destruct (rabp A B C T T') as [X [Y]].
Perp.
Cop.

*****
H7 : and (Out B A X) (and (Col T' T X) (and (Out B C Y) (Col T' T Y)))
X,Y : Tpoint
H13 : not (eq T' B)
H9 : not (eq T T')
H12 : not (eq P0 A)
H6 : Perp B T T T'
H5 : InAngle T' A B C
T' : Tpoint
H4 : Col B P0 T
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => ex (fun Y : Tpoint => and (Out B A X) (and (Out B C Y) (Col X T Y))))
+++++
spliter.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct (col_dec B P0 T).
assert (HT' : exists T', InAngle T' A B C /\\ Perp B T T T').
destruct HT' as [T' []].
assert_diffs.
destruct (rabp A B C T T') as [X [Y]].
Perp.
Cop.
spliter.

*****
H11 : Col T' T Y
H10 : Out B C Y
H8 : Col T' T X
H7 : Out B A X
X,Y : Tpoint
H13 : not (eq T' B)
H9 : not (eq T T')
H12 : not (eq P0 A)
H6 : Perp B T T T'
H5 : InAngle T' A B C
T' : Tpoint
H4 : Col B P0 T
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => ex (fun Y : Tpoint => and (Out B A X) (and (Out B C Y) (Col X T Y))))
+++++
exists X, Y.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct (col_dec B P0 T).
assert (HT' : exists T', InAngle T' A B C /\\ Perp B T T T').
destruct HT' as [T' []].
assert_diffs.
destruct (rabp A B C T T') as [X [Y]].
Perp.
Cop.
spliter.
exists X, Y.

*****
H11 : Col T' T Y
H10 : Out B C Y
H8 : Col T' T X
H7 : Out B A X
X,Y : Tpoint
H13 : not (eq T' B)
H9 : not (eq T T')
H12 : not (eq P0 A)
H6 : Perp B T T T'
H5 : InAngle T' A B C
T' : Tpoint
H4 : Col B P0 T
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Out B A X) (and (Out B C Y) (Col X T Y))
+++++
repeat (split; trivial).
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct (col_dec B P0 T).
assert (HT' : exists T', InAngle T' A B C /\\ Perp B T T T').
destruct HT' as [T' []].
assert_diffs.
destruct (rabp A B C T T') as [X [Y]].
Perp.
Cop.
spliter.
exists X, Y.
repeat (split; trivial).

*****
H11 : Col T' T Y
H10 : Out B C Y
H8 : Col T' T X
H7 : Out B A X
X,Y : Tpoint
H13 : not (eq T' B)
H9 : not (eq T T')
H12 : not (eq P0 A)
H6 : Perp B T T T'
H5 : InAngle T' A B C
T' : Tpoint
H4 : Col B P0 T
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col X T Y
+++++
ColR.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct (col_dec B P0 T).

*****
H4 : not (Col B P0 T)
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => ex (fun Y : Tpoint => and (Out B A X) (and (Out B C Y) (Col X T Y))))
+++++
destruct (l8_18_existence B P0 T) as [P [HP1 HP2]].
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct (col_dec B P0 T).
destruct (l8_18_existence B P0 T) as [P [HP1 HP2]].

*****
H4 : not (Col B P0 T)
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col B P0 T)
+++++
trivial.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct (col_dec B P0 T).
destruct (l8_18_existence B P0 T) as [P [HP1 HP2]].

*****
HP2 : Perp B P0 T P
HP1 : Col B P0 P
P : Tpoint
H4 : not (Col B P0 T)
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => ex (fun Y : Tpoint => and (Out B A X) (and (Out B C Y) (Col X T Y))))
+++++
trivial.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct (col_dec B P0 T).
destruct (l8_18_existence B P0 T) as [P [HP1 HP2]].
trivial.

*****
HP2 : Perp B P0 T P
HP1 : Col B P0 P
P : Tpoint
H4 : not (Col B P0 T)
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => ex (fun Y : Tpoint => and (Out B A X) (and (Out B C Y) (Col X T Y))))
+++++
assert (Out B P P0).
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct (col_dec B P0 T).
destruct (l8_18_existence B P0 T) as [P [HP1 HP2]].
trivial.
assert (Out B P P0).

*****
HP2 : Perp B P0 T P
HP1 : Col B P0 P
P : Tpoint
H4 : not (Col B P0 T)
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Out B P P0
+++++
apply (acute_col_perp__out T).
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct (col_dec B P0 T).
destruct (l8_18_existence B P0 T) as [P [HP1 HP2]].
trivial.
assert (Out B P P0).
apply (acute_col_perp__out T).

*****
HP2 : Perp B P0 T P
HP1 : Col B P0 P
P : Tpoint
H4 : not (Col B P0 T)
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Acute T B P0
+++++
trivial.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct (col_dec B P0 T).
destruct (l8_18_existence B P0 T) as [P [HP1 HP2]].
trivial.
assert (Out B P P0).
apply (acute_col_perp__out T).
trivial.

*****
HP2 : Perp B P0 T P
HP1 : Col B P0 P
P : Tpoint
H4 : not (Col B P0 T)
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Acute T B P0
+++++
apply acute_sym, conga_inangle2_per__acute with A C.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct (col_dec B P0 T).
destruct (l8_18_existence B P0 T) as [P [HP1 HP2]].
trivial.
assert (Out B P P0).
apply (acute_col_perp__out T).
trivial.
apply acute_sym, conga_inangle2_per__acute with A C.

*****
HP2 : Perp B P0 T P
HP1 : Col B P0 P
P : Tpoint
H4 : not (Col B P0 T)
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per A B C
+++++
trivial.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct (col_dec B P0 T).
destruct (l8_18_existence B P0 T) as [P [HP1 HP2]].
trivial.
assert (Out B P P0).
apply (acute_col_perp__out T).
trivial.
apply acute_sym, conga_inangle2_per__acute with A C.

*****
HP2 : Perp B P0 T P
HP1 : Col B P0 P
P : Tpoint
H4 : not (Col B P0 T)
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
InAngle P0 A B C
+++++
trivial.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct (col_dec B P0 T).
destruct (l8_18_existence B P0 T) as [P [HP1 HP2]].
trivial.
assert (Out B P P0).
apply (acute_col_perp__out T).
trivial.
apply acute_sym, conga_inangle2_per__acute with A C.

*****
HP2 : Perp B P0 T P
HP1 : Col B P0 P
P : Tpoint
H4 : not (Col B P0 T)
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
CongA P0 B A P0 B C
+++++
trivial.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct (col_dec B P0 T).
destruct (l8_18_existence B P0 T) as [P [HP1 HP2]].
trivial.
assert (Out B P P0).
apply (acute_col_perp__out T).
trivial.
apply acute_sym, conga_inangle2_per__acute with A C.

*****
HP2 : Perp B P0 T P
HP1 : Col B P0 P
P : Tpoint
H4 : not (Col B P0 T)
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
InAngle T A B C
+++++
trivial.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct (col_dec B P0 T).
destruct (l8_18_existence B P0 T) as [P [HP1 HP2]].
trivial.
assert (Out B P P0).
apply (acute_col_perp__out T).

*****
HP2 : Perp B P0 T P
HP1 : Col B P0 P
P : Tpoint
H4 : not (Col B P0 T)
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col B P0 P
+++++
trivial.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct (col_dec B P0 T).
destruct (l8_18_existence B P0 T) as [P [HP1 HP2]].
trivial.
assert (Out B P P0).
apply (acute_col_perp__out T).

*****
HP2 : Perp B P0 T P
HP1 : Col B P0 P
P : Tpoint
H4 : not (Col B P0 T)
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp B P0 T P
+++++
trivial.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct (col_dec B P0 T).
destruct (l8_18_existence B P0 T) as [P [HP1 HP2]].
trivial.
assert (Out B P P0).

*****
H5 : Out B P P0
HP2 : Perp B P0 T P
HP1 : Col B P0 P
P : Tpoint
H4 : not (Col B P0 T)
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => ex (fun Y : Tpoint => and (Out B A X) (and (Out B C Y) (Col X T Y))))
+++++
assert_diffs.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct (col_dec B P0 T).
destruct (l8_18_existence B P0 T) as [P [HP1 HP2]].
trivial.
assert (Out B P P0).
assert_diffs.

*****
H7 : not (eq P B)
H9 : not (eq T P)
H12 : not (eq P0 A)
H8 : not (eq P0 T)
H5 : Out B P P0
HP2 : Perp B P0 T P
HP1 : Col B P0 P
P : Tpoint
H4 : not (Col B P0 T)
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => ex (fun Y : Tpoint => and (Out B A X) (and (Out B C Y) (Col X T Y))))
+++++
destruct (rabp A B C P T) as [X [Y]].
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct (col_dec B P0 T).
destruct (l8_18_existence B P0 T) as [P [HP1 HP2]].
trivial.
assert (Out B P P0).
assert_diffs.
destruct (rabp A B C P T) as [X [Y]].

*****
H7 : not (eq P B)
H9 : not (eq T P)
H12 : not (eq P0 A)
H8 : not (eq P0 T)
H5 : Out B P P0
HP2 : Perp B P0 T P
HP1 : Col B P0 P
P : Tpoint
H4 : not (Col B P0 T)
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per A B C
+++++
auto.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct (col_dec B P0 T).
destruct (l8_18_existence B P0 T) as [P [HP1 HP2]].
trivial.
assert (Out B P P0).
assert_diffs.
destruct (rabp A B C P T) as [X [Y]].

*****
H7 : not (eq P B)
H9 : not (eq T P)
H12 : not (eq P0 A)
H8 : not (eq P0 T)
H5 : Out B P P0
HP2 : Perp B P0 T P
HP1 : Col B P0 P
P : Tpoint
H4 : not (Col B P0 T)
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
InAngle T A B C
+++++
auto.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct (col_dec B P0 T).
destruct (l8_18_existence B P0 T) as [P [HP1 HP2]].
trivial.
assert (Out B P P0).
assert_diffs.
destruct (rabp A B C P T) as [X [Y]].

*****
H7 : not (eq P B)
H9 : not (eq T P)
H12 : not (eq P0 A)
H8 : not (eq P0 T)
H5 : Out B P P0
HP2 : Perp B P0 T P
HP1 : Col B P0 P
P : Tpoint
H4 : not (Col B P0 T)
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq P T)
+++++
auto.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct (col_dec B P0 T).
destruct (l8_18_existence B P0 T) as [P [HP1 HP2]].
trivial.
assert (Out B P P0).
assert_diffs.
destruct (rabp A B C P T) as [X [Y]].

*****
H7 : not (eq P B)
H9 : not (eq T P)
H12 : not (eq P0 A)
H8 : not (eq P0 T)
H5 : Out B P P0
HP2 : Perp B P0 T P
HP1 : Col B P0 P
P : Tpoint
H4 : not (Col B P0 T)
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
CongA P B A P B C
+++++
auto.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct (col_dec B P0 T).
destruct (l8_18_existence B P0 T) as [P [HP1 HP2]].
trivial.
assert (Out B P P0).
assert_diffs.
destruct (rabp A B C P T) as [X [Y]].
auto.

*****
H7 : not (eq P B)
H9 : not (eq T P)
H12 : not (eq P0 A)
H8 : not (eq P0 T)
H5 : Out B P P0
HP2 : Perp B P0 T P
HP1 : Col B P0 P
P : Tpoint
H4 : not (Col B P0 T)
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
CongA P B A P B C
+++++
apply col_conga__conga with P0.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct (col_dec B P0 T).
destruct (l8_18_existence B P0 T) as [P [HP1 HP2]].
trivial.
assert (Out B P P0).
assert_diffs.
destruct (rabp A B C P T) as [X [Y]].
auto.
apply col_conga__conga with P0.

*****
H7 : not (eq P B)
H9 : not (eq T P)
H12 : not (eq P0 A)
H8 : not (eq P0 T)
H5 : Out B P P0
HP2 : Perp B P0 T P
HP1 : Col B P0 P
P : Tpoint
H4 : not (Col B P0 T)
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
CongA P0 B A P0 B C
+++++
auto.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct (col_dec B P0 T).
destruct (l8_18_existence B P0 T) as [P [HP1 HP2]].
trivial.
assert (Out B P P0).
assert_diffs.
destruct (rabp A B C P T) as [X [Y]].
auto.
apply col_conga__conga with P0.

*****
H7 : not (eq P B)
H9 : not (eq T P)
H12 : not (eq P0 A)
H8 : not (eq P0 T)
H5 : Out B P P0
HP2 : Perp B P0 T P
HP1 : Col B P0 P
P : Tpoint
H4 : not (Col B P0 T)
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col B P0 P
+++++
auto.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct (col_dec B P0 T).
destruct (l8_18_existence B P0 T) as [P [HP1 HP2]].
trivial.
assert (Out B P P0).
assert_diffs.
destruct (rabp A B C P T) as [X [Y]].
auto.
apply col_conga__conga with P0.

*****
H7 : not (eq P B)
H9 : not (eq T P)
H12 : not (eq P0 A)
H8 : not (eq P0 T)
H5 : Out B P P0
HP2 : Perp B P0 T P
HP1 : Col B P0 P
P : Tpoint
H4 : not (Col B P0 T)
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq B P)
+++++
auto.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct (col_dec B P0 T).
destruct (l8_18_existence B P0 T) as [P [HP1 HP2]].
trivial.
assert (Out B P P0).
assert_diffs.
destruct (rabp A B C P T) as [X [Y]].

*****
H7 : not (eq P B)
H9 : not (eq T P)
H12 : not (eq P0 A)
H8 : not (eq P0 T)
H5 : Out B P P0
HP2 : Perp B P0 T P
HP1 : Col B P0 P
P : Tpoint
H4 : not (Col B P0 T)
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per B P T
+++++
auto.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct (col_dec B P0 T).
destruct (l8_18_existence B P0 T) as [P [HP1 HP2]].
trivial.
assert (Out B P P0).
assert_diffs.
destruct (rabp A B C P T) as [X [Y]].
auto.

*****
H7 : not (eq P B)
H9 : not (eq T P)
H12 : not (eq P0 A)
H8 : not (eq P0 T)
H5 : Out B P P0
HP2 : Perp B P0 T P
HP1 : Col B P0 P
P : Tpoint
H4 : not (Col B P0 T)
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per B P T
+++++
apply perp_per_1, perp_left_comm, perp_col with P0.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct (col_dec B P0 T).
destruct (l8_18_existence B P0 T) as [P [HP1 HP2]].
trivial.
assert (Out B P P0).
assert_diffs.
destruct (rabp A B C P T) as [X [Y]].
auto.
apply perp_per_1, perp_left_comm, perp_col with P0.

*****
H7 : not (eq P B)
H9 : not (eq T P)
H12 : not (eq P0 A)
H8 : not (eq P0 T)
H5 : Out B P P0
HP2 : Perp B P0 T P
HP1 : Col B P0 P
P : Tpoint
H4 : not (Col B P0 T)
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq B P)
+++++
auto.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct (col_dec B P0 T).
destruct (l8_18_existence B P0 T) as [P [HP1 HP2]].
trivial.
assert (Out B P P0).
assert_diffs.
destruct (rabp A B C P T) as [X [Y]].
auto.
apply perp_per_1, perp_left_comm, perp_col with P0.

*****
H7 : not (eq P B)
H9 : not (eq T P)
H12 : not (eq P0 A)
H8 : not (eq P0 T)
H5 : Out B P P0
HP2 : Perp B P0 T P
HP1 : Col B P0 P
P : Tpoint
H4 : not (Col B P0 T)
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp B P0 T P
+++++
auto.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct (col_dec B P0 T).
destruct (l8_18_existence B P0 T) as [P [HP1 HP2]].
trivial.
assert (Out B P P0).
assert_diffs.
destruct (rabp A B C P T) as [X [Y]].
auto.
apply perp_per_1, perp_left_comm, perp_col with P0.

*****
H7 : not (eq P B)
H9 : not (eq T P)
H12 : not (eq P0 A)
H8 : not (eq P0 T)
H5 : Out B P P0
HP2 : Perp B P0 T P
HP1 : Col B P0 P
P : Tpoint
H4 : not (Col B P0 T)
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col B P0 P
+++++
auto.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct (col_dec B P0 T).
destruct (l8_18_existence B P0 T) as [P [HP1 HP2]].
trivial.
assert (Out B P P0).
assert_diffs.
destruct (rabp A B C P T) as [X [Y]].

*****
H7 : not (eq P B)
H9 : not (eq T P)
H12 : not (eq P0 A)
H8 : not (eq P0 T)
H5 : Out B P P0
HP2 : Perp B P0 T P
HP1 : Col B P0 P
P : Tpoint
H4 : not (Col B P0 T)
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B C P
+++++
auto.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct (col_dec B P0 T).
destruct (l8_18_existence B P0 T) as [P [HP1 HP2]].
trivial.
assert (Out B P P0).
assert_diffs.
destruct (rabp A B C P T) as [X [Y]].
auto.

*****
H7 : not (eq P B)
H9 : not (eq T P)
H12 : not (eq P0 A)
H8 : not (eq P0 T)
H5 : Out B P P0
HP2 : Perp B P0 T P
HP1 : Col B P0 P
P : Tpoint
H4 : not (Col B P0 T)
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B C P
+++++
assert (Coplanar P0 A B C).
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct (col_dec B P0 T).
destruct (l8_18_existence B P0 T) as [P [HP1 HP2]].
trivial.
assert (Out B P P0).
assert_diffs.
destruct (rabp A B C P T) as [X [Y]].
auto.
assert (Coplanar P0 A B C).

*****
H7 : not (eq P B)
H9 : not (eq T P)
H12 : not (eq P0 A)
H8 : not (eq P0 T)
H5 : Out B P P0
HP2 : Perp B P0 T P
HP1 : Col B P0 P
P : Tpoint
H4 : not (Col B P0 T)
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar P0 A B C
+++++
Cop.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct (col_dec B P0 T).
destruct (l8_18_existence B P0 T) as [P [HP1 HP2]].
trivial.
assert (Out B P P0).
assert_diffs.
destruct (rabp A B C P T) as [X [Y]].
auto.
assert (Coplanar P0 A B C).

*****
H6 : Coplanar P0 A B C
H7 : not (eq P B)
H9 : not (eq T P)
H12 : not (eq P0 A)
H8 : not (eq P0 T)
H5 : Out B P P0
HP2 : Perp B P0 T P
HP1 : Col B P0 P
P : Tpoint
H4 : not (Col B P0 T)
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B C P
+++++
idtac.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct (col_dec B P0 T).
destruct (l8_18_existence B P0 T) as [P [HP1 HP2]].
trivial.
assert (Out B P P0).
assert_diffs.
destruct (rabp A B C P T) as [X [Y]].
auto.
assert (Coplanar P0 A B C).
idtac.

*****
H6 : Coplanar P0 A B C
H7 : not (eq P B)
H9 : not (eq T P)
H12 : not (eq P0 A)
H8 : not (eq P0 T)
H5 : Out B P P0
HP2 : Perp B P0 T P
HP1 : Col B P0 P
P : Tpoint
H4 : not (Col B P0 T)
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B C P
+++++
assert (Coplanar B P0 P A).
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct (col_dec B P0 T).
destruct (l8_18_existence B P0 T) as [P [HP1 HP2]].
trivial.
assert (Out B P P0).
assert_diffs.
destruct (rabp A B C P T) as [X [Y]].
auto.
assert (Coplanar P0 A B C).
idtac.
assert (Coplanar B P0 P A).

*****
H6 : Coplanar P0 A B C
H7 : not (eq P B)
H9 : not (eq T P)
H12 : not (eq P0 A)
H8 : not (eq P0 T)
H5 : Out B P P0
HP2 : Perp B P0 T P
HP1 : Col B P0 P
P : Tpoint
H4 : not (Col B P0 T)
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar B P0 P A
+++++
Cop.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct (col_dec B P0 T).
destruct (l8_18_existence B P0 T) as [P [HP1 HP2]].
trivial.
assert (Out B P P0).
assert_diffs.
destruct (rabp A B C P T) as [X [Y]].
auto.
assert (Coplanar P0 A B C).
idtac.
assert (Coplanar B P0 P A).

*****
H10 : Coplanar B P0 P A
H6 : Coplanar P0 A B C
H7 : not (eq P B)
H9 : not (eq T P)
H12 : not (eq P0 A)
H8 : not (eq P0 T)
H5 : Out B P P0
HP2 : Perp B P0 T P
HP1 : Col B P0 P
P : Tpoint
H4 : not (Col B P0 T)
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B C P
+++++
idtac.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct (col_dec B P0 T).
destruct (l8_18_existence B P0 T) as [P [HP1 HP2]].
trivial.
assert (Out B P P0).
assert_diffs.
destruct (rabp A B C P T) as [X [Y]].
auto.
assert (Coplanar P0 A B C).
idtac.
assert (Coplanar B P0 P A).
idtac.

*****
H10 : Coplanar B P0 P A
H6 : Coplanar P0 A B C
H7 : not (eq P B)
H9 : not (eq T P)
H12 : not (eq P0 A)
H8 : not (eq P0 T)
H5 : Out B P P0
HP2 : Perp B P0 T P
HP1 : Col B P0 P
P : Tpoint
H4 : not (Col B P0 T)
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B C P
+++++
CopR.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct (col_dec B P0 T).
destruct (l8_18_existence B P0 T) as [P [HP1 HP2]].
trivial.
assert (Out B P P0).
assert_diffs.
destruct (rabp A B C P T) as [X [Y]].

*****
H6 : and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))
X,Y : Tpoint
H7 : not (eq P B)
H9 : not (eq T P)
H12 : not (eq P0 A)
H8 : not (eq P0 T)
H5 : Out B P P0
HP2 : Perp B P0 T P
HP1 : Col B P0 P
P : Tpoint
H4 : not (Col B P0 T)
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => ex (fun Y : Tpoint => and (Out B A X) (and (Out B C Y) (Col X T Y))))
+++++
auto.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct (col_dec B P0 T).
destruct (l8_18_existence B P0 T) as [P [HP1 HP2]].
trivial.
assert (Out B P P0).
assert_diffs.
destruct (rabp A B C P T) as [X [Y]].
auto.

*****
H6 : and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))
X,Y : Tpoint
H7 : not (eq P B)
H9 : not (eq T P)
H12 : not (eq P0 A)
H8 : not (eq P0 T)
H5 : Out B P P0
HP2 : Perp B P0 T P
HP1 : Col B P0 P
P : Tpoint
H4 : not (Col B P0 T)
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => ex (fun Y : Tpoint => and (Out B A X) (and (Out B C Y) (Col X T Y))))
+++++
spliter.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct (col_dec B P0 T).
destruct (l8_18_existence B P0 T) as [P [HP1 HP2]].
trivial.
assert (Out B P P0).
assert_diffs.
destruct (rabp A B C P T) as [X [Y]].
auto.
spliter.

*****
H13 : Col T P Y
H11 : Out B C Y
H10 : Col T P X
H6 : Out B A X
X,Y : Tpoint
H7 : not (eq P B)
H9 : not (eq T P)
H12 : not (eq P0 A)
H8 : not (eq P0 T)
H5 : Out B P P0
HP2 : Perp B P0 T P
HP1 : Col B P0 P
P : Tpoint
H4 : not (Col B P0 T)
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => ex (fun Y : Tpoint => and (Out B A X) (and (Out B C Y) (Col X T Y))))
+++++
exists X, Y.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct (col_dec B P0 T).
destruct (l8_18_existence B P0 T) as [P [HP1 HP2]].
trivial.
assert (Out B P P0).
assert_diffs.
destruct (rabp A B C P T) as [X [Y]].
auto.
spliter.
exists X, Y.

*****
H13 : Col T P Y
H11 : Out B C Y
H10 : Col T P X
H6 : Out B A X
X,Y : Tpoint
H7 : not (eq P B)
H9 : not (eq T P)
H12 : not (eq P0 A)
H8 : not (eq P0 T)
H5 : Out B P P0
HP2 : Perp B P0 T P
HP1 : Col B P0 P
P : Tpoint
H4 : not (Col B P0 T)
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Out B A X) (and (Out B C Y) (Col X T Y))
+++++
repeat (split; trivial).
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct (col_dec B P0 T).
destruct (l8_18_existence B P0 T) as [P [HP1 HP2]].
trivial.
assert (Out B P P0).
assert_diffs.
destruct (rabp A B C P T) as [X [Y]].
auto.
spliter.
exists X, Y.
repeat (split; trivial).

*****
H13 : Col T P Y
H11 : Out B C Y
H10 : Col T P X
H6 : Out B A X
X,Y : Tpoint
H7 : not (eq P B)
H9 : not (eq T P)
H12 : not (eq P0 A)
H8 : not (eq P0 T)
H5 : Out B P P0
HP2 : Perp B P0 T P
HP1 : Col B P0 P
P : Tpoint
H4 : not (Col B P0 T)
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col X T Y
+++++
ColR.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).

*****
HXY : ex\n (fun X : Tpoint =>\n ex (fun Y : Tpoint => and (Out B A X) (and (Out B C Y) (Col X T Y))))
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => ex (fun Y : Tpoint => and (Out B A X) (and (Out B C Y) (Bet X T Y))))
+++++
destruct HXY as [X [Y [HOutX [HOutY HCol]]]].
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct HXY as [X [Y [HOutX [HOutY HCol]]]].

*****
HCol : Col X T Y
HOutY : Out B C Y
HOutX : Out B A X
X,Y : Tpoint
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => ex (fun Y : Tpoint => and (Out B A X) (and (Out B C Y) (Bet X T Y))))
+++++
assert_diffs.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct HXY as [X [Y [HOutX [HOutY HCol]]]].
assert_diffs.

*****
H7 : not (eq X B)
H6 : not (eq Y B)
H9 : not (eq P0 A)
HCol : Col X T Y
HOutY : Out B C Y
HOutX : Out B A X
X,Y : Tpoint
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => ex (fun Y : Tpoint => and (Out B A X) (and (Out B C Y) (Bet X T Y))))
+++++
assert (X <> Y).
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct HXY as [X [Y [HOutX [HOutY HCol]]]].
assert_diffs.
assert (X <> Y).

*****
H7 : not (eq X B)
H6 : not (eq Y B)
H9 : not (eq P0 A)
HCol : Col X T Y
HOutY : Out B C Y
HOutX : Out B A X
X,Y : Tpoint
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq X Y)
+++++
intro.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct HXY as [X [Y [HOutX [HOutY HCol]]]].
assert_diffs.
assert (X <> Y).
intro.

*****
H4 : eq X Y
H7 : not (eq X B)
H6 : not (eq Y B)
H9 : not (eq P0 A)
HCol : Col X T Y
HOutY : Out B C Y
HOutX : Out B A X
X,Y : Tpoint
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
subst.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct HXY as [X [Y [HOutX [HOutY HCol]]]].
assert_diffs.
assert (X <> Y).
intro.
subst.

*****
H6,H7 : not (eq Y B)
H9 : not (eq P0 A)
HCol : Col Y T Y
HOutY : Out B C Y
HOutX : Out B A Y
Y : Tpoint
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply HNCol1.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct HXY as [X [Y [HOutX [HOutY HCol]]]].
assert_diffs.
assert (X <> Y).
intro.
subst.
apply HNCol1.

*****
H6,H7 : not (eq Y B)
H9 : not (eq P0 A)
HCol : Col Y T Y
HOutY : Out B C Y
HOutX : Out B A Y
Y : Tpoint
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A B C
+++++
ColR.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct HXY as [X [Y [HOutX [HOutY HCol]]]].
assert_diffs.
assert (X <> Y).

*****
H4 : not (eq X Y)
H7 : not (eq X B)
H6 : not (eq Y B)
H9 : not (eq P0 A)
HCol : Col X T Y
HOutY : Out B C Y
HOutX : Out B A X
X,Y : Tpoint
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => ex (fun Y : Tpoint => and (Out B A X) (and (Out B C Y) (Bet X T Y))))
+++++
idtac.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct HXY as [X [Y [HOutX [HOutY HCol]]]].
assert_diffs.
assert (X <> Y).
idtac.

*****
H4 : not (eq X Y)
H7 : not (eq X B)
H6 : not (eq Y B)
H9 : not (eq P0 A)
HCol : Col X T Y
HOutY : Out B C Y
HOutX : Out B A X
X,Y : Tpoint
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => ex (fun Y : Tpoint => and (Out B A X) (and (Out B C Y) (Bet X T Y))))
+++++
exists X, Y.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct HXY as [X [Y [HOutX [HOutY HCol]]]].
assert_diffs.
assert (X <> Y).
idtac.
exists X, Y.

*****
H4 : not (eq X Y)
H7 : not (eq X B)
H6 : not (eq Y B)
H9 : not (eq P0 A)
HCol : Col X T Y
HOutY : Out B C Y
HOutX : Out B A X
X,Y : Tpoint
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Out B A X) (and (Out B C Y) (Bet X T Y))
+++++
repeat (split; trivial).
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct HXY as [X [Y [HOutX [HOutY HCol]]]].
assert_diffs.
assert (X <> Y).
idtac.
exists X, Y.
repeat (split; trivial).

*****
H4 : not (eq X Y)
H7 : not (eq X B)
H6 : not (eq Y B)
H9 : not (eq P0 A)
HCol : Col X T Y
HOutY : Out B C Y
HOutX : Out B A X
X,Y : Tpoint
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet X T Y
+++++
destruct (eq_dec_points T X) as [HTX|HTX].
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct HXY as [X [Y [HOutX [HOutY HCol]]]].
assert_diffs.
assert (X <> Y).
idtac.
exists X, Y.
repeat (split; trivial).
destruct (eq_dec_points T X) as [HTX|HTX].

*****
HTX : eq T X
H4 : not (eq X Y)
H7 : not (eq X B)
H6 : not (eq Y B)
H9 : not (eq P0 A)
HCol : Col X T Y
HOutY : Out B C Y
HOutX : Out B A X
X,Y : Tpoint
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet X T Y
+++++
try (subst; Between).
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct HXY as [X [Y [HOutX [HOutY HCol]]]].
assert_diffs.
assert (X <> Y).
idtac.
exists X, Y.
repeat (split; trivial).
destruct (eq_dec_points T X) as [HTX|HTX].

*****
HTX : not (eq T X)
H4 : not (eq X Y)
H7 : not (eq X B)
H6 : not (eq Y B)
H9 : not (eq P0 A)
HCol : Col X T Y
HOutY : Out B C Y
HOutX : Out B A X
X,Y : Tpoint
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet X T Y
+++++
try (subst; Between).
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct HXY as [X [Y [HOutX [HOutY HCol]]]].
assert_diffs.
assert (X <> Y).
idtac.
exists X, Y.
repeat (split; trivial).
destruct (eq_dec_points T X) as [HTX|HTX].
try (subst; Between).

*****
HTX : not (eq T X)
H4 : not (eq X Y)
H7 : not (eq X B)
H6 : not (eq Y B)
H9 : not (eq P0 A)
HCol : Col X T Y
HOutY : Out B C Y
HOutX : Out B A X
X,Y : Tpoint
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet X T Y
+++++
destruct (eq_dec_points T Y) as [HTY|HTY].
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct HXY as [X [Y [HOutX [HOutY HCol]]]].
assert_diffs.
assert (X <> Y).
idtac.
exists X, Y.
repeat (split; trivial).
destruct (eq_dec_points T X) as [HTX|HTX].
try (subst; Between).
destruct (eq_dec_points T Y) as [HTY|HTY].

*****
HTY : eq T Y
HTX : not (eq T X)
H4 : not (eq X Y)
H7 : not (eq X B)
H6 : not (eq Y B)
H9 : not (eq P0 A)
HCol : Col X T Y
HOutY : Out B C Y
HOutX : Out B A X
X,Y : Tpoint
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet X T Y
+++++
try (subst; Between).
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct HXY as [X [Y [HOutX [HOutY HCol]]]].
assert_diffs.
assert (X <> Y).
idtac.
exists X, Y.
repeat (split; trivial).
destruct (eq_dec_points T X) as [HTX|HTX].
try (subst; Between).
destruct (eq_dec_points T Y) as [HTY|HTY].

*****
HTY : not (eq T Y)
HTX : not (eq T X)
H4 : not (eq X Y)
H7 : not (eq X B)
H6 : not (eq Y B)
H9 : not (eq P0 A)
HCol : Col X T Y
HOutY : Out B C Y
HOutX : Out B A X
X,Y : Tpoint
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet X T Y
+++++
try (subst; Between).
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct HXY as [X [Y [HOutX [HOutY HCol]]]].
assert_diffs.
assert (X <> Y).
idtac.
exists X, Y.
repeat (split; trivial).
destruct (eq_dec_points T X) as [HTX|HTX].
try (subst; Between).
destruct (eq_dec_points T Y) as [HTY|HTY].
try (subst; Between).

*****
HTY : not (eq T Y)
HTX : not (eq T X)
H4 : not (eq X Y)
H7 : not (eq X B)
H6 : not (eq Y B)
H9 : not (eq P0 A)
HCol : Col X T Y
HOutY : Out B C Y
HOutX : Out B A X
X,Y : Tpoint
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet X T Y
+++++
apply out2__bet.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct HXY as [X [Y [HOutX [HOutY HCol]]]].
assert_diffs.
assert (X <> Y).
idtac.
exists X, Y.
repeat (split; trivial).
destruct (eq_dec_points T X) as [HTX|HTX].
try (subst; Between).
destruct (eq_dec_points T Y) as [HTY|HTY].
try (subst; Between).
apply out2__bet.

*****
HTY : not (eq T Y)
HTX : not (eq T X)
H4 : not (eq X Y)
H7 : not (eq X B)
H6 : not (eq Y B)
H9 : not (eq P0 A)
HCol : Col X T Y
HOutY : Out B C Y
HOutX : Out B A X
X,Y : Tpoint
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Out X T Y
+++++
apply col_one_side_out with B.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct HXY as [X [Y [HOutX [HOutY HCol]]]].
assert_diffs.
assert (X <> Y).
idtac.
exists X, Y.
repeat (split; trivial).
destruct (eq_dec_points T X) as [HTX|HTX].
try (subst; Between).
destruct (eq_dec_points T Y) as [HTY|HTY].
try (subst; Between).
apply out2__bet.
apply col_one_side_out with B.

*****
HTY : not (eq T Y)
HTX : not (eq T X)
H4 : not (eq X Y)
H7 : not (eq X B)
H6 : not (eq Y B)
H9 : not (eq P0 A)
HCol : Col X T Y
HOutY : Out B C Y
HOutX : Out B A X
X,Y : Tpoint
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col X T Y
+++++
trivial.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct HXY as [X [Y [HOutX [HOutY HCol]]]].
assert_diffs.
assert (X <> Y).
idtac.
exists X, Y.
repeat (split; trivial).
destruct (eq_dec_points T X) as [HTX|HTX].
try (subst; Between).
destruct (eq_dec_points T Y) as [HTY|HTY].
try (subst; Between).
apply out2__bet.
apply col_one_side_out with B.

*****
HTY : not (eq T Y)
HTX : not (eq T X)
H4 : not (eq X Y)
H7 : not (eq X B)
H6 : not (eq Y B)
H9 : not (eq P0 A)
HCol : Col X T Y
HOutY : Out B C Y
HOutX : Out B A X
X,Y : Tpoint
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS X B T Y
+++++
trivial.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct HXY as [X [Y [HOutX [HOutY HCol]]]].
assert_diffs.
assert (X <> Y).
idtac.
exists X, Y.
repeat (split; trivial).
destruct (eq_dec_points T X) as [HTX|HTX].
try (subst; Between).
destruct (eq_dec_points T Y) as [HTY|HTY].
try (subst; Between).
apply out2__bet.
apply col_one_side_out with B.
trivial.

*****
HTY : not (eq T Y)
HTX : not (eq T X)
H4 : not (eq X Y)
H7 : not (eq X B)
H6 : not (eq Y B)
H9 : not (eq P0 A)
HCol : Col X T Y
HOutY : Out B C Y
HOutX : Out B A X
X,Y : Tpoint
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS X B T Y
+++++
apply invert_one_side, col_one_side with A.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct HXY as [X [Y [HOutX [HOutY HCol]]]].
assert_diffs.
assert (X <> Y).
idtac.
exists X, Y.
repeat (split; trivial).
destruct (eq_dec_points T X) as [HTX|HTX].
try (subst; Between).
destruct (eq_dec_points T Y) as [HTY|HTY].
try (subst; Between).
apply out2__bet.
apply col_one_side_out with B.
trivial.
apply invert_one_side, col_one_side with A.

*****
HTY : not (eq T Y)
HTX : not (eq T X)
H4 : not (eq X Y)
H7 : not (eq X B)
H6 : not (eq Y B)
H9 : not (eq P0 A)
HCol : Col X T Y
HOutY : Out B C Y
HOutX : Out B A X
X,Y : Tpoint
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col B A X
+++++
Col.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct HXY as [X [Y [HOutX [HOutY HCol]]]].
assert_diffs.
assert (X <> Y).
idtac.
exists X, Y.
repeat (split; trivial).
destruct (eq_dec_points T X) as [HTX|HTX].
try (subst; Between).
destruct (eq_dec_points T Y) as [HTY|HTY].
try (subst; Between).
apply out2__bet.
apply col_one_side_out with B.
trivial.
apply invert_one_side, col_one_side with A.

*****
HTY : not (eq T Y)
HTX : not (eq T X)
H4 : not (eq X Y)
H7 : not (eq X B)
H6 : not (eq Y B)
H9 : not (eq P0 A)
HCol : Col X T Y
HOutY : Out B C Y
HOutX : Out B A X
X,Y : Tpoint
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq B X)
+++++
Col.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct HXY as [X [Y [HOutX [HOutY HCol]]]].
assert_diffs.
assert (X <> Y).
idtac.
exists X, Y.
repeat (split; trivial).
destruct (eq_dec_points T X) as [HTX|HTX].
try (subst; Between).
destruct (eq_dec_points T Y) as [HTY|HTY].
try (subst; Between).
apply out2__bet.
apply col_one_side_out with B.
trivial.
apply invert_one_side, col_one_side with A.

*****
HTY : not (eq T Y)
HTX : not (eq T X)
H4 : not (eq X Y)
H7 : not (eq X B)
H6 : not (eq Y B)
H9 : not (eq P0 A)
HCol : Col X T Y
HOutY : Out B C Y
HOutX : Out B A X
X,Y : Tpoint
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS B A T Y
+++++
Col.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct HXY as [X [Y [HOutX [HOutY HCol]]]].
assert_diffs.
assert (X <> Y).
idtac.
exists X, Y.
repeat (split; trivial).
destruct (eq_dec_points T X) as [HTX|HTX].
try (subst; Between).
destruct (eq_dec_points T Y) as [HTY|HTY].
try (subst; Between).
apply out2__bet.
apply col_one_side_out with B.
trivial.
apply invert_one_side, col_one_side with A.
Col.

*****
HTY : not (eq T Y)
HTX : not (eq T X)
H4 : not (eq X Y)
H7 : not (eq X B)
H6 : not (eq Y B)
H9 : not (eq P0 A)
HCol : Col X T Y
HOutY : Out B C Y
HOutX : Out B A X
X,Y : Tpoint
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS B A T Y
+++++
apply out_out_one_side with C.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct HXY as [X [Y [HOutX [HOutY HCol]]]].
assert_diffs.
assert (X <> Y).
idtac.
exists X, Y.
repeat (split; trivial).
destruct (eq_dec_points T X) as [HTX|HTX].
try (subst; Between).
destruct (eq_dec_points T Y) as [HTY|HTY].
try (subst; Between).
apply out2__bet.
apply col_one_side_out with B.
trivial.
apply invert_one_side, col_one_side with A.
Col.
apply out_out_one_side with C.

*****
HTY : not (eq T Y)
HTX : not (eq T X)
H4 : not (eq X Y)
H7 : not (eq X B)
H6 : not (eq Y B)
H9 : not (eq P0 A)
HCol : Col X T Y
HOutY : Out B C Y
HOutX : Out B A X
X,Y : Tpoint
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS B A T C
+++++
trivial.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct HXY as [X [Y [HOutX [HOutY HCol]]]].
assert_diffs.
assert (X <> Y).
idtac.
exists X, Y.
repeat (split; trivial).
destruct (eq_dec_points T X) as [HTX|HTX].
try (subst; Between).
destruct (eq_dec_points T Y) as [HTY|HTY].
try (subst; Between).
apply out2__bet.
apply col_one_side_out with B.
trivial.
apply invert_one_side, col_one_side with A.
Col.
apply out_out_one_side with C.
trivial.

*****
HTY : not (eq T Y)
HTX : not (eq T X)
H4 : not (eq X Y)
H7 : not (eq X B)
H6 : not (eq Y B)
H9 : not (eq P0 A)
HCol : Col X T Y
HOutY : Out B C Y
HOutX : Out B A X
X,Y : Tpoint
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS B A T C
+++++
apply invert_one_side, in_angle_one_side.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct HXY as [X [Y [HOutX [HOutY HCol]]]].
assert_diffs.
assert (X <> Y).
idtac.
exists X, Y.
repeat (split; trivial).
destruct (eq_dec_points T X) as [HTX|HTX].
try (subst; Between).
destruct (eq_dec_points T Y) as [HTY|HTY].
try (subst; Between).
apply out2__bet.
apply col_one_side_out with B.
trivial.
apply invert_one_side, col_one_side with A.
Col.
apply out_out_one_side with C.
trivial.
apply invert_one_side, in_angle_one_side.

*****
HTY : not (eq T Y)
HTX : not (eq T X)
H4 : not (eq X Y)
H7 : not (eq X B)
H6 : not (eq Y B)
H9 : not (eq P0 A)
HCol : Col X T Y
HOutY : Out B C Y
HOutX : Out B A X
X,Y : Tpoint
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col A B C)
+++++
Col.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct HXY as [X [Y [HOutX [HOutY HCol]]]].
assert_diffs.
assert (X <> Y).
idtac.
exists X, Y.
repeat (split; trivial).
destruct (eq_dec_points T X) as [HTX|HTX].
try (subst; Between).
destruct (eq_dec_points T Y) as [HTY|HTY].
try (subst; Between).
apply out2__bet.
apply col_one_side_out with B.
trivial.
apply invert_one_side, col_one_side with A.
Col.
apply out_out_one_side with C.
trivial.
apply invert_one_side, in_angle_one_side.

*****
HTY : not (eq T Y)
HTX : not (eq T X)
H4 : not (eq X Y)
H7 : not (eq X B)
H6 : not (eq Y B)
H9 : not (eq P0 A)
HCol : Col X T Y
HOutY : Out B C Y
HOutX : Out B A X
X,Y : Tpoint
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col B A T)
+++++
Col.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct HXY as [X [Y [HOutX [HOutY HCol]]]].
assert_diffs.
assert (X <> Y).
idtac.
exists X, Y.
repeat (split; trivial).
destruct (eq_dec_points T X) as [HTX|HTX].
try (subst; Between).
destruct (eq_dec_points T Y) as [HTY|HTY].
try (subst; Between).
apply out2__bet.
apply col_one_side_out with B.
trivial.
apply invert_one_side, col_one_side with A.
Col.
apply out_out_one_side with C.
trivial.
apply invert_one_side, in_angle_one_side.
Col.

*****
HTY : not (eq T Y)
HTX : not (eq T X)
H4 : not (eq X Y)
H7 : not (eq X B)
H6 : not (eq Y B)
H9 : not (eq P0 A)
HCol : Col X T Y
HOutY : Out B C Y
HOutX : Out B A X
X,Y : Tpoint
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col B A T)
+++++
intro.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct HXY as [X [Y [HOutX [HOutY HCol]]]].
assert_diffs.
assert (X <> Y).
idtac.
exists X, Y.
repeat (split; trivial).
destruct (eq_dec_points T X) as [HTX|HTX].
try (subst; Between).
destruct (eq_dec_points T Y) as [HTY|HTY].
try (subst; Between).
apply out2__bet.
apply col_one_side_out with B.
trivial.
apply invert_one_side, col_one_side with A.
Col.
apply out_out_one_side with C.
trivial.
apply invert_one_side, in_angle_one_side.
Col.
intro.

*****
H5 : Col B A T
HTY : not (eq T Y)
HTX : not (eq T X)
H4 : not (eq X Y)
H7 : not (eq X B)
H6 : not (eq Y B)
H9 : not (eq P0 A)
HCol : Col X T Y
HOutY : Out B C Y
HOutX : Out B A X
X,Y : Tpoint
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply HTX, (l6_21 A B Y X).
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct HXY as [X [Y [HOutX [HOutY HCol]]]].
assert_diffs.
assert (X <> Y).
idtac.
exists X, Y.
repeat (split; trivial).
destruct (eq_dec_points T X) as [HTX|HTX].
try (subst; Between).
destruct (eq_dec_points T Y) as [HTY|HTY].
try (subst; Between).
apply out2__bet.
apply col_one_side_out with B.
trivial.
apply invert_one_side, col_one_side with A.
Col.
apply out_out_one_side with C.
trivial.
apply invert_one_side, in_angle_one_side.
Col.
intro.
apply HTX, (l6_21 A B Y X).

*****
H5 : Col B A T
HTY : not (eq T Y)
HTX : not (eq T X)
H4 : not (eq X Y)
H7 : not (eq X B)
H6 : not (eq Y B)
H9 : not (eq P0 A)
HCol : Col X T Y
HOutY : Out B C Y
HOutX : Out B A X
X,Y : Tpoint
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col A B Y)
+++++
Col.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct HXY as [X [Y [HOutX [HOutY HCol]]]].
assert_diffs.
assert (X <> Y).
idtac.
exists X, Y.
repeat (split; trivial).
destruct (eq_dec_points T X) as [HTX|HTX].
try (subst; Between).
destruct (eq_dec_points T Y) as [HTY|HTY].
try (subst; Between).
apply out2__bet.
apply col_one_side_out with B.
trivial.
apply invert_one_side, col_one_side with A.
Col.
apply out_out_one_side with C.
trivial.
apply invert_one_side, in_angle_one_side.
Col.
intro.
apply HTX, (l6_21 A B Y X).
Col.

*****
H5 : Col B A T
HTY : not (eq T Y)
HTX : not (eq T X)
H4 : not (eq X Y)
H7 : not (eq X B)
H6 : not (eq Y B)
H9 : not (eq P0 A)
HCol : Col X T Y
HOutY : Out B C Y
HOutX : Out B A X
X,Y : Tpoint
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col A B Y)
+++++
intro.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct HXY as [X [Y [HOutX [HOutY HCol]]]].
assert_diffs.
assert (X <> Y).
idtac.
exists X, Y.
repeat (split; trivial).
destruct (eq_dec_points T X) as [HTX|HTX].
try (subst; Between).
destruct (eq_dec_points T Y) as [HTY|HTY].
try (subst; Between).
apply out2__bet.
apply col_one_side_out with B.
trivial.
apply invert_one_side, col_one_side with A.
Col.
apply out_out_one_side with C.
trivial.
apply invert_one_side, in_angle_one_side.
Col.
intro.
apply HTX, (l6_21 A B Y X).
Col.
intro.

*****
H8 : Col A B Y
H5 : Col B A T
HTY : not (eq T Y)
HTX : not (eq T X)
H4 : not (eq X Y)
H7 : not (eq X B)
H6 : not (eq Y B)
H9 : not (eq P0 A)
HCol : Col X T Y
HOutY : Out B C Y
HOutX : Out B A X
X,Y : Tpoint
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
subst.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct HXY as [X [Y [HOutX [HOutY HCol]]]].
assert_diffs.
assert (X <> Y).
idtac.
exists X, Y.
repeat (split; trivial).
destruct (eq_dec_points T X) as [HTX|HTX].
try (subst; Between).
destruct (eq_dec_points T Y) as [HTY|HTY].
try (subst; Between).
apply out2__bet.
apply col_one_side_out with B.
trivial.
apply invert_one_side, col_one_side with A.
Col.
apply out_out_one_side with C.
trivial.
apply invert_one_side, in_angle_one_side.
Col.
intro.
apply HTX, (l6_21 A B Y X).
Col.
intro.
subst.

*****
H8 : Col A B Y
H5 : Col B A T
HTY : not (eq T Y)
HTX : not (eq T X)
H4 : not (eq X Y)
H7 : not (eq X B)
H6 : not (eq Y B)
H9 : not (eq P0 A)
HCol : Col X T Y
HOutY : Out B C Y
HOutX : Out B A X
X,Y : Tpoint
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply HNCol1.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct HXY as [X [Y [HOutX [HOutY HCol]]]].
assert_diffs.
assert (X <> Y).
idtac.
exists X, Y.
repeat (split; trivial).
destruct (eq_dec_points T X) as [HTX|HTX].
try (subst; Between).
destruct (eq_dec_points T Y) as [HTY|HTY].
try (subst; Between).
apply out2__bet.
apply col_one_side_out with B.
trivial.
apply invert_one_side, col_one_side with A.
Col.
apply out_out_one_side with C.
trivial.
apply invert_one_side, in_angle_one_side.
Col.
intro.
apply HTX, (l6_21 A B Y X).
Col.
intro.
subst.
apply HNCol1.

*****
H8 : Col A B Y
H5 : Col B A T
HTY : not (eq T Y)
HTX : not (eq T X)
H4 : not (eq X Y)
H7 : not (eq X B)
H6 : not (eq Y B)
H9 : not (eq P0 A)
HCol : Col X T Y
HOutY : Out B C Y
HOutX : Out B A X
X,Y : Tpoint
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A B C
+++++
ColR.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct HXY as [X [Y [HOutX [HOutY HCol]]]].
assert_diffs.
assert (X <> Y).
idtac.
exists X, Y.
repeat (split; trivial).
destruct (eq_dec_points T X) as [HTX|HTX].
try (subst; Between).
destruct (eq_dec_points T Y) as [HTY|HTY].
try (subst; Between).
apply out2__bet.
apply col_one_side_out with B.
trivial.
apply invert_one_side, col_one_side with A.
Col.
apply out_out_one_side with C.
trivial.
apply invert_one_side, in_angle_one_side.
Col.
intro.
apply HTX, (l6_21 A B Y X).

*****
H5 : Col B A T
HTY : not (eq T Y)
HTX : not (eq T X)
H4 : not (eq X Y)
H7 : not (eq X B)
H6 : not (eq Y B)
H9 : not (eq P0 A)
HCol : Col X T Y
HOutY : Out B C Y
HOutX : Out B A X
X,Y : Tpoint
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq Y X)
+++++
Col.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct HXY as [X [Y [HOutX [HOutY HCol]]]].
assert_diffs.
assert (X <> Y).
idtac.
exists X, Y.
repeat (split; trivial).
destruct (eq_dec_points T X) as [HTX|HTX].
try (subst; Between).
destruct (eq_dec_points T Y) as [HTY|HTY].
try (subst; Between).
apply out2__bet.
apply col_one_side_out with B.
trivial.
apply invert_one_side, col_one_side with A.
Col.
apply out_out_one_side with C.
trivial.
apply invert_one_side, in_angle_one_side.
Col.
intro.
apply HTX, (l6_21 A B Y X).

*****
H5 : Col B A T
HTY : not (eq T Y)
HTX : not (eq T X)
H4 : not (eq X Y)
H7 : not (eq X B)
H6 : not (eq Y B)
H9 : not (eq P0 A)
HCol : Col X T Y
HOutY : Out B C Y
HOutX : Out B A X
X,Y : Tpoint
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A B T
+++++
Col.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct HXY as [X [Y [HOutX [HOutY HCol]]]].
assert_diffs.
assert (X <> Y).
idtac.
exists X, Y.
repeat (split; trivial).
destruct (eq_dec_points T X) as [HTX|HTX].
try (subst; Between).
destruct (eq_dec_points T Y) as [HTY|HTY].
try (subst; Between).
apply out2__bet.
apply col_one_side_out with B.
trivial.
apply invert_one_side, col_one_side with A.
Col.
apply out_out_one_side with C.
trivial.
apply invert_one_side, in_angle_one_side.
Col.
intro.
apply HTX, (l6_21 A B Y X).

*****
H5 : Col B A T
HTY : not (eq T Y)
HTX : not (eq T X)
H4 : not (eq X Y)
H7 : not (eq X B)
H6 : not (eq Y B)
H9 : not (eq P0 A)
HCol : Col X T Y
HOutY : Out B C Y
HOutX : Out B A X
X,Y : Tpoint
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A B X
+++++
Col.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct HXY as [X [Y [HOutX [HOutY HCol]]]].
assert_diffs.
assert (X <> Y).
idtac.
exists X, Y.
repeat (split; trivial).
destruct (eq_dec_points T X) as [HTX|HTX].
try (subst; Between).
destruct (eq_dec_points T Y) as [HTY|HTY].
try (subst; Between).
apply out2__bet.
apply col_one_side_out with B.
trivial.
apply invert_one_side, col_one_side with A.
Col.
apply out_out_one_side with C.
trivial.
apply invert_one_side, in_angle_one_side.
Col.
intro.
apply HTX, (l6_21 A B Y X).

*****
H5 : Col B A T
HTY : not (eq T Y)
HTX : not (eq T X)
H4 : not (eq X Y)
H7 : not (eq X B)
H6 : not (eq Y B)
H9 : not (eq P0 A)
HCol : Col X T Y
HOutY : Out B C Y
HOutX : Out B A X
X,Y : Tpoint
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col Y X T
+++++
Col.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct HXY as [X [Y [HOutX [HOutY HCol]]]].
assert_diffs.
assert (X <> Y).
idtac.
exists X, Y.
repeat (split; trivial).
destruct (eq_dec_points T X) as [HTX|HTX].
try (subst; Between).
destruct (eq_dec_points T Y) as [HTY|HTY].
try (subst; Between).
apply out2__bet.
apply col_one_side_out with B.
trivial.
apply invert_one_side, col_one_side with A.
Col.
apply out_out_one_side with C.
trivial.
apply invert_one_side, in_angle_one_side.
Col.
intro.
apply HTX, (l6_21 A B Y X).

*****
H5 : Col B A T
HTY : not (eq T Y)
HTX : not (eq T X)
H4 : not (eq X Y)
H7 : not (eq X B)
H6 : not (eq Y B)
H9 : not (eq P0 A)
HCol : Col X T Y
HOutY : Out B C Y
HOutX : Out B A X
X,Y : Tpoint
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col Y X X
+++++
Col.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct HXY as [X [Y [HOutX [HOutY HCol]]]].
assert_diffs.
assert (X <> Y).
idtac.
exists X, Y.
repeat (split; trivial).
destruct (eq_dec_points T X) as [HTX|HTX].
try (subst; Between).
destruct (eq_dec_points T Y) as [HTY|HTY].
try (subst; Between).
apply out2__bet.
apply col_one_side_out with B.
trivial.
apply invert_one_side, col_one_side with A.
Col.
apply out_out_one_side with C.
trivial.
apply invert_one_side, in_angle_one_side.

*****
HTY : not (eq T Y)
HTX : not (eq T X)
H4 : not (eq X Y)
H7 : not (eq X B)
H6 : not (eq Y B)
H9 : not (eq P0 A)
HCol : Col X T Y
HOutY : Out B C Y
HOutX : Out B A X
X,Y : Tpoint
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
InAngle T A B C
+++++
Col.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct HXY as [X [Y [HOutX [HOutY HCol]]]].
assert_diffs.
assert (X <> Y).
idtac.
exists X, Y.
repeat (split; trivial).
destruct (eq_dec_points T X) as [HTX|HTX].
try (subst; Between).
destruct (eq_dec_points T Y) as [HTY|HTY].
try (subst; Between).
apply out2__bet.
apply col_one_side_out with B.
trivial.
apply invert_one_side, col_one_side with A.
Col.
apply out_out_one_side with C.

*****
HTY : not (eq T Y)
HTX : not (eq T X)
H4 : not (eq X Y)
H7 : not (eq X B)
H6 : not (eq Y B)
H9 : not (eq P0 A)
HCol : Col X T Y
HOutY : Out B C Y
HOutX : Out B A X
X,Y : Tpoint
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Out B C Y
+++++
trivial.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct HXY as [X [Y [HOutX [HOutY HCol]]]].
assert_diffs.
assert (X <> Y).
idtac.
exists X, Y.
repeat (split; trivial).
destruct (eq_dec_points T X) as [HTX|HTX].
try (subst; Between).
destruct (eq_dec_points T Y) as [HTY|HTY].
try (subst; Between).
apply out2__bet.

*****
HTY : not (eq T Y)
HTX : not (eq T X)
H4 : not (eq X Y)
H7 : not (eq X B)
H6 : not (eq Y B)
H9 : not (eq P0 A)
HCol : Col X T Y
HOutY : Out B C Y
HOutX : Out B A X
X,Y : Tpoint
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Out Y X T
+++++
apply col_one_side_out with B.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct HXY as [X [Y [HOutX [HOutY HCol]]]].
assert_diffs.
assert (X <> Y).
idtac.
exists X, Y.
repeat (split; trivial).
destruct (eq_dec_points T X) as [HTX|HTX].
try (subst; Between).
destruct (eq_dec_points T Y) as [HTY|HTY].
try (subst; Between).
apply out2__bet.
apply col_one_side_out with B.

*****
HTY : not (eq T Y)
HTX : not (eq T X)
H4 : not (eq X Y)
H7 : not (eq X B)
H6 : not (eq Y B)
H9 : not (eq P0 A)
HCol : Col X T Y
HOutY : Out B C Y
HOutX : Out B A X
X,Y : Tpoint
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col Y X T
+++++
Col.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct HXY as [X [Y [HOutX [HOutY HCol]]]].
assert_diffs.
assert (X <> Y).
idtac.
exists X, Y.
repeat (split; trivial).
destruct (eq_dec_points T X) as [HTX|HTX].
try (subst; Between).
destruct (eq_dec_points T Y) as [HTY|HTY].
try (subst; Between).
apply out2__bet.
apply col_one_side_out with B.

*****
HTY : not (eq T Y)
HTX : not (eq T X)
H4 : not (eq X Y)
H7 : not (eq X B)
H6 : not (eq Y B)
H9 : not (eq P0 A)
HCol : Col X T Y
HOutY : Out B C Y
HOutX : Out B A X
X,Y : Tpoint
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS Y B X T
+++++
Col.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct HXY as [X [Y [HOutX [HOutY HCol]]]].
assert_diffs.
assert (X <> Y).
idtac.
exists X, Y.
repeat (split; trivial).
destruct (eq_dec_points T X) as [HTX|HTX].
try (subst; Between).
destruct (eq_dec_points T Y) as [HTY|HTY].
try (subst; Between).
apply out2__bet.
apply col_one_side_out with B.
Col.

*****
HTY : not (eq T Y)
HTX : not (eq T X)
H4 : not (eq X Y)
H7 : not (eq X B)
H6 : not (eq Y B)
H9 : not (eq P0 A)
HCol : Col X T Y
HOutY : Out B C Y
HOutX : Out B A X
X,Y : Tpoint
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS Y B X T
+++++
apply invert_one_side, col_one_side with C.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct HXY as [X [Y [HOutX [HOutY HCol]]]].
assert_diffs.
assert (X <> Y).
idtac.
exists X, Y.
repeat (split; trivial).
destruct (eq_dec_points T X) as [HTX|HTX].
try (subst; Between).
destruct (eq_dec_points T Y) as [HTY|HTY].
try (subst; Between).
apply out2__bet.
apply col_one_side_out with B.
Col.
apply invert_one_side, col_one_side with C.

*****
HTY : not (eq T Y)
HTX : not (eq T X)
H4 : not (eq X Y)
H7 : not (eq X B)
H6 : not (eq Y B)
H9 : not (eq P0 A)
HCol : Col X T Y
HOutY : Out B C Y
HOutX : Out B A X
X,Y : Tpoint
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col B C Y
+++++
Col.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct HXY as [X [Y [HOutX [HOutY HCol]]]].
assert_diffs.
assert (X <> Y).
idtac.
exists X, Y.
repeat (split; trivial).
destruct (eq_dec_points T X) as [HTX|HTX].
try (subst; Between).
destruct (eq_dec_points T Y) as [HTY|HTY].
try (subst; Between).
apply out2__bet.
apply col_one_side_out with B.
Col.
apply invert_one_side, col_one_side with C.

*****
HTY : not (eq T Y)
HTX : not (eq T X)
H4 : not (eq X Y)
H7 : not (eq X B)
H6 : not (eq Y B)
H9 : not (eq P0 A)
HCol : Col X T Y
HOutY : Out B C Y
HOutX : Out B A X
X,Y : Tpoint
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq B Y)
+++++
Col.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct HXY as [X [Y [HOutX [HOutY HCol]]]].
assert_diffs.
assert (X <> Y).
idtac.
exists X, Y.
repeat (split; trivial).
destruct (eq_dec_points T X) as [HTX|HTX].
try (subst; Between).
destruct (eq_dec_points T Y) as [HTY|HTY].
try (subst; Between).
apply out2__bet.
apply col_one_side_out with B.
Col.
apply invert_one_side, col_one_side with C.

*****
HTY : not (eq T Y)
HTX : not (eq T X)
H4 : not (eq X Y)
H7 : not (eq X B)
H6 : not (eq Y B)
H9 : not (eq P0 A)
HCol : Col X T Y
HOutY : Out B C Y
HOutX : Out B A X
X,Y : Tpoint
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS B C X T
+++++
Col.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct HXY as [X [Y [HOutX [HOutY HCol]]]].
assert_diffs.
assert (X <> Y).
idtac.
exists X, Y.
repeat (split; trivial).
destruct (eq_dec_points T X) as [HTX|HTX].
try (subst; Between).
destruct (eq_dec_points T Y) as [HTY|HTY].
try (subst; Between).
apply out2__bet.
apply col_one_side_out with B.
Col.
apply invert_one_side, col_one_side with C.
Col.

*****
HTY : not (eq T Y)
HTX : not (eq T X)
H4 : not (eq X Y)
H7 : not (eq X B)
H6 : not (eq Y B)
H9 : not (eq P0 A)
HCol : Col X T Y
HOutY : Out B C Y
HOutX : Out B A X
X,Y : Tpoint
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS B C X T
+++++
apply one_side_symmetry, out_out_one_side with A.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct HXY as [X [Y [HOutX [HOutY HCol]]]].
assert_diffs.
assert (X <> Y).
idtac.
exists X, Y.
repeat (split; trivial).
destruct (eq_dec_points T X) as [HTX|HTX].
try (subst; Between).
destruct (eq_dec_points T Y) as [HTY|HTY].
try (subst; Between).
apply out2__bet.
apply col_one_side_out with B.
Col.
apply invert_one_side, col_one_side with C.
Col.
apply one_side_symmetry, out_out_one_side with A.

*****
HTY : not (eq T Y)
HTX : not (eq T X)
H4 : not (eq X Y)
H7 : not (eq X B)
H6 : not (eq Y B)
H9 : not (eq P0 A)
HCol : Col X T Y
HOutY : Out B C Y
HOutX : Out B A X
X,Y : Tpoint
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS B C T A
+++++
trivial.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct HXY as [X [Y [HOutX [HOutY HCol]]]].
assert_diffs.
assert (X <> Y).
idtac.
exists X, Y.
repeat (split; trivial).
destruct (eq_dec_points T X) as [HTX|HTX].
try (subst; Between).
destruct (eq_dec_points T Y) as [HTY|HTY].
try (subst; Between).
apply out2__bet.
apply col_one_side_out with B.
Col.
apply invert_one_side, col_one_side with C.
Col.
apply one_side_symmetry, out_out_one_side with A.
trivial.

*****
HTY : not (eq T Y)
HTX : not (eq T X)
H4 : not (eq X Y)
H7 : not (eq X B)
H6 : not (eq Y B)
H9 : not (eq P0 A)
HCol : Col X T Y
HOutY : Out B C Y
HOutX : Out B A X
X,Y : Tpoint
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS B C T A
+++++
apply invert_one_side, in_angle_one_side.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct HXY as [X [Y [HOutX [HOutY HCol]]]].
assert_diffs.
assert (X <> Y).
idtac.
exists X, Y.
repeat (split; trivial).
destruct (eq_dec_points T X) as [HTX|HTX].
try (subst; Between).
destruct (eq_dec_points T Y) as [HTY|HTY].
try (subst; Between).
apply out2__bet.
apply col_one_side_out with B.
Col.
apply invert_one_side, col_one_side with C.
Col.
apply one_side_symmetry, out_out_one_side with A.
trivial.
apply invert_one_side, in_angle_one_side.

*****
HTY : not (eq T Y)
HTX : not (eq T X)
H4 : not (eq X Y)
H7 : not (eq X B)
H6 : not (eq Y B)
H9 : not (eq P0 A)
HCol : Col X T Y
HOutY : Out B C Y
HOutX : Out B A X
X,Y : Tpoint
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col C B A)
+++++
try apply l11_24.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct HXY as [X [Y [HOutX [HOutY HCol]]]].
assert_diffs.
assert (X <> Y).
idtac.
exists X, Y.
repeat (split; trivial).
destruct (eq_dec_points T X) as [HTX|HTX].
try (subst; Between).
destruct (eq_dec_points T Y) as [HTY|HTY].
try (subst; Between).
apply out2__bet.
apply col_one_side_out with B.
Col.
apply invert_one_side, col_one_side with C.
Col.
apply one_side_symmetry, out_out_one_side with A.
trivial.
apply invert_one_side, in_angle_one_side.
try apply l11_24.

*****
HTY : not (eq T Y)
HTX : not (eq T X)
H4 : not (eq X Y)
H7 : not (eq X B)
H6 : not (eq Y B)
H9 : not (eq P0 A)
HCol : Col X T Y
HOutY : Out B C Y
HOutX : Out B A X
X,Y : Tpoint
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col C B A)
+++++
Col.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct HXY as [X [Y [HOutX [HOutY HCol]]]].
assert_diffs.
assert (X <> Y).
idtac.
exists X, Y.
repeat (split; trivial).
destruct (eq_dec_points T X) as [HTX|HTX].
try (subst; Between).
destruct (eq_dec_points T Y) as [HTY|HTY].
try (subst; Between).
apply out2__bet.
apply col_one_side_out with B.
Col.
apply invert_one_side, col_one_side with C.
Col.
apply one_side_symmetry, out_out_one_side with A.
trivial.
apply invert_one_side, in_angle_one_side.

*****
HTY : not (eq T Y)
HTX : not (eq T X)
H4 : not (eq X Y)
H7 : not (eq X B)
H6 : not (eq Y B)
H9 : not (eq P0 A)
HCol : Col X T Y
HOutY : Out B C Y
HOutX : Out B A X
X,Y : Tpoint
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col B C T)
+++++
try apply l11_24.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct HXY as [X [Y [HOutX [HOutY HCol]]]].
assert_diffs.
assert (X <> Y).
idtac.
exists X, Y.
repeat (split; trivial).
destruct (eq_dec_points T X) as [HTX|HTX].
try (subst; Between).
destruct (eq_dec_points T Y) as [HTY|HTY].
try (subst; Between).
apply out2__bet.
apply col_one_side_out with B.
Col.
apply invert_one_side, col_one_side with C.
Col.
apply one_side_symmetry, out_out_one_side with A.
trivial.
apply invert_one_side, in_angle_one_side.
try apply l11_24.

*****
HTY : not (eq T Y)
HTX : not (eq T X)
H4 : not (eq X Y)
H7 : not (eq X B)
H6 : not (eq Y B)
H9 : not (eq P0 A)
HCol : Col X T Y
HOutY : Out B C Y
HOutX : Out B A X
X,Y : Tpoint
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col B C T)
+++++
Col.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct HXY as [X [Y [HOutX [HOutY HCol]]]].
assert_diffs.
assert (X <> Y).
idtac.
exists X, Y.
repeat (split; trivial).
destruct (eq_dec_points T X) as [HTX|HTX].
try (subst; Between).
destruct (eq_dec_points T Y) as [HTY|HTY].
try (subst; Between).
apply out2__bet.
apply col_one_side_out with B.
Col.
apply invert_one_side, col_one_side with C.
Col.
apply one_side_symmetry, out_out_one_side with A.
trivial.
apply invert_one_side, in_angle_one_side.
try apply l11_24.
Col.

*****
HTY : not (eq T Y)
HTX : not (eq T X)
H4 : not (eq X Y)
H7 : not (eq X B)
H6 : not (eq Y B)
H9 : not (eq P0 A)
HCol : Col X T Y
HOutY : Out B C Y
HOutX : Out B A X
X,Y : Tpoint
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col B C T)
+++++
intro.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct HXY as [X [Y [HOutX [HOutY HCol]]]].
assert_diffs.
assert (X <> Y).
idtac.
exists X, Y.
repeat (split; trivial).
destruct (eq_dec_points T X) as [HTX|HTX].
try (subst; Between).
destruct (eq_dec_points T Y) as [HTY|HTY].
try (subst; Between).
apply out2__bet.
apply col_one_side_out with B.
Col.
apply invert_one_side, col_one_side with C.
Col.
apply one_side_symmetry, out_out_one_side with A.
trivial.
apply invert_one_side, in_angle_one_side.
try apply l11_24.
Col.
intro.

*****
H5 : Col B C T
HTY : not (eq T Y)
HTX : not (eq T X)
H4 : not (eq X Y)
H7 : not (eq X B)
H6 : not (eq Y B)
H9 : not (eq P0 A)
HCol : Col X T Y
HOutY : Out B C Y
HOutX : Out B A X
X,Y : Tpoint
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply HTY, (l6_21 B C X Y).
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct HXY as [X [Y [HOutX [HOutY HCol]]]].
assert_diffs.
assert (X <> Y).
idtac.
exists X, Y.
repeat (split; trivial).
destruct (eq_dec_points T X) as [HTX|HTX].
try (subst; Between).
destruct (eq_dec_points T Y) as [HTY|HTY].
try (subst; Between).
apply out2__bet.
apply col_one_side_out with B.
Col.
apply invert_one_side, col_one_side with C.
Col.
apply one_side_symmetry, out_out_one_side with A.
trivial.
apply invert_one_side, in_angle_one_side.
try apply l11_24.
Col.
intro.
apply HTY, (l6_21 B C X Y).

*****
H5 : Col B C T
HTY : not (eq T Y)
HTX : not (eq T X)
H4 : not (eq X Y)
H7 : not (eq X B)
H6 : not (eq Y B)
H9 : not (eq P0 A)
HCol : Col X T Y
HOutY : Out B C Y
HOutX : Out B A X
X,Y : Tpoint
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col B C X)
+++++
Col.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct HXY as [X [Y [HOutX [HOutY HCol]]]].
assert_diffs.
assert (X <> Y).
idtac.
exists X, Y.
repeat (split; trivial).
destruct (eq_dec_points T X) as [HTX|HTX].
try (subst; Between).
destruct (eq_dec_points T Y) as [HTY|HTY].
try (subst; Between).
apply out2__bet.
apply col_one_side_out with B.
Col.
apply invert_one_side, col_one_side with C.
Col.
apply one_side_symmetry, out_out_one_side with A.
trivial.
apply invert_one_side, in_angle_one_side.
try apply l11_24.
Col.
intro.
apply HTY, (l6_21 B C X Y).
Col.

*****
H5 : Col B C T
HTY : not (eq T Y)
HTX : not (eq T X)
H4 : not (eq X Y)
H7 : not (eq X B)
H6 : not (eq Y B)
H9 : not (eq P0 A)
HCol : Col X T Y
HOutY : Out B C Y
HOutX : Out B A X
X,Y : Tpoint
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col B C X)
+++++
intro.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct HXY as [X [Y [HOutX [HOutY HCol]]]].
assert_diffs.
assert (X <> Y).
idtac.
exists X, Y.
repeat (split; trivial).
destruct (eq_dec_points T X) as [HTX|HTX].
try (subst; Between).
destruct (eq_dec_points T Y) as [HTY|HTY].
try (subst; Between).
apply out2__bet.
apply col_one_side_out with B.
Col.
apply invert_one_side, col_one_side with C.
Col.
apply one_side_symmetry, out_out_one_side with A.
trivial.
apply invert_one_side, in_angle_one_side.
try apply l11_24.
Col.
intro.
apply HTY, (l6_21 B C X Y).
Col.
intro.

*****
H8 : Col B C X
H5 : Col B C T
HTY : not (eq T Y)
HTX : not (eq T X)
H4 : not (eq X Y)
H7 : not (eq X B)
H6 : not (eq Y B)
H9 : not (eq P0 A)
HCol : Col X T Y
HOutY : Out B C Y
HOutX : Out B A X
X,Y : Tpoint
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
subst.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct HXY as [X [Y [HOutX [HOutY HCol]]]].
assert_diffs.
assert (X <> Y).
idtac.
exists X, Y.
repeat (split; trivial).
destruct (eq_dec_points T X) as [HTX|HTX].
try (subst; Between).
destruct (eq_dec_points T Y) as [HTY|HTY].
try (subst; Between).
apply out2__bet.
apply col_one_side_out with B.
Col.
apply invert_one_side, col_one_side with C.
Col.
apply one_side_symmetry, out_out_one_side with A.
trivial.
apply invert_one_side, in_angle_one_side.
try apply l11_24.
Col.
intro.
apply HTY, (l6_21 B C X Y).
Col.
intro.
subst.

*****
H8 : Col B C X
H5 : Col B C T
HTY : not (eq T Y)
HTX : not (eq T X)
H4 : not (eq X Y)
H7 : not (eq X B)
H6 : not (eq Y B)
H9 : not (eq P0 A)
HCol : Col X T Y
HOutY : Out B C Y
HOutX : Out B A X
X,Y : Tpoint
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply HNCol1.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct HXY as [X [Y [HOutX [HOutY HCol]]]].
assert_diffs.
assert (X <> Y).
idtac.
exists X, Y.
repeat (split; trivial).
destruct (eq_dec_points T X) as [HTX|HTX].
try (subst; Between).
destruct (eq_dec_points T Y) as [HTY|HTY].
try (subst; Between).
apply out2__bet.
apply col_one_side_out with B.
Col.
apply invert_one_side, col_one_side with C.
Col.
apply one_side_symmetry, out_out_one_side with A.
trivial.
apply invert_one_side, in_angle_one_side.
try apply l11_24.
Col.
intro.
apply HTY, (l6_21 B C X Y).
Col.
intro.
subst.
apply HNCol1.

*****
H8 : Col B C X
H5 : Col B C T
HTY : not (eq T Y)
HTX : not (eq T X)
H4 : not (eq X Y)
H7 : not (eq X B)
H6 : not (eq Y B)
H9 : not (eq P0 A)
HCol : Col X T Y
HOutY : Out B C Y
HOutX : Out B A X
X,Y : Tpoint
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A B C
+++++
ColR.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct HXY as [X [Y [HOutX [HOutY HCol]]]].
assert_diffs.
assert (X <> Y).
idtac.
exists X, Y.
repeat (split; trivial).
destruct (eq_dec_points T X) as [HTX|HTX].
try (subst; Between).
destruct (eq_dec_points T Y) as [HTY|HTY].
try (subst; Between).
apply out2__bet.
apply col_one_side_out with B.
Col.
apply invert_one_side, col_one_side with C.
Col.
apply one_side_symmetry, out_out_one_side with A.
trivial.
apply invert_one_side, in_angle_one_side.
try apply l11_24.
Col.
intro.
apply HTY, (l6_21 B C X Y).

*****
H5 : Col B C T
HTY : not (eq T Y)
HTX : not (eq T X)
H4 : not (eq X Y)
H7 : not (eq X B)
H6 : not (eq Y B)
H9 : not (eq P0 A)
HCol : Col X T Y
HOutY : Out B C Y
HOutX : Out B A X
X,Y : Tpoint
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq X Y)
+++++
Col.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct HXY as [X [Y [HOutX [HOutY HCol]]]].
assert_diffs.
assert (X <> Y).
idtac.
exists X, Y.
repeat (split; trivial).
destruct (eq_dec_points T X) as [HTX|HTX].
try (subst; Between).
destruct (eq_dec_points T Y) as [HTY|HTY].
try (subst; Between).
apply out2__bet.
apply col_one_side_out with B.
Col.
apply invert_one_side, col_one_side with C.
Col.
apply one_side_symmetry, out_out_one_side with A.
trivial.
apply invert_one_side, in_angle_one_side.
try apply l11_24.
Col.
intro.
apply HTY, (l6_21 B C X Y).

*****
H5 : Col B C T
HTY : not (eq T Y)
HTX : not (eq T X)
H4 : not (eq X Y)
H7 : not (eq X B)
H6 : not (eq Y B)
H9 : not (eq P0 A)
HCol : Col X T Y
HOutY : Out B C Y
HOutX : Out B A X
X,Y : Tpoint
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col B C T
+++++
Col.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct HXY as [X [Y [HOutX [HOutY HCol]]]].
assert_diffs.
assert (X <> Y).
idtac.
exists X, Y.
repeat (split; trivial).
destruct (eq_dec_points T X) as [HTX|HTX].
try (subst; Between).
destruct (eq_dec_points T Y) as [HTY|HTY].
try (subst; Between).
apply out2__bet.
apply col_one_side_out with B.
Col.
apply invert_one_side, col_one_side with C.
Col.
apply one_side_symmetry, out_out_one_side with A.
trivial.
apply invert_one_side, in_angle_one_side.
try apply l11_24.
Col.
intro.
apply HTY, (l6_21 B C X Y).

*****
H5 : Col B C T
HTY : not (eq T Y)
HTX : not (eq T X)
H4 : not (eq X Y)
H7 : not (eq X B)
H6 : not (eq Y B)
H9 : not (eq P0 A)
HCol : Col X T Y
HOutY : Out B C Y
HOutX : Out B A X
X,Y : Tpoint
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col B C Y
+++++
Col.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct HXY as [X [Y [HOutX [HOutY HCol]]]].
assert_diffs.
assert (X <> Y).
idtac.
exists X, Y.
repeat (split; trivial).
destruct (eq_dec_points T X) as [HTX|HTX].
try (subst; Between).
destruct (eq_dec_points T Y) as [HTY|HTY].
try (subst; Between).
apply out2__bet.
apply col_one_side_out with B.
Col.
apply invert_one_side, col_one_side with C.
Col.
apply one_side_symmetry, out_out_one_side with A.
trivial.
apply invert_one_side, in_angle_one_side.
try apply l11_24.
Col.
intro.
apply HTY, (l6_21 B C X Y).

*****
H5 : Col B C T
HTY : not (eq T Y)
HTX : not (eq T X)
H4 : not (eq X Y)
H7 : not (eq X B)
H6 : not (eq Y B)
H9 : not (eq P0 A)
HCol : Col X T Y
HOutY : Out B C Y
HOutX : Out B A X
X,Y : Tpoint
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col X Y T
+++++
Col.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct HXY as [X [Y [HOutX [HOutY HCol]]]].
assert_diffs.
assert (X <> Y).
idtac.
exists X, Y.
repeat (split; trivial).
destruct (eq_dec_points T X) as [HTX|HTX].
try (subst; Between).
destruct (eq_dec_points T Y) as [HTY|HTY].
try (subst; Between).
apply out2__bet.
apply col_one_side_out with B.
Col.
apply invert_one_side, col_one_side with C.
Col.
apply one_side_symmetry, out_out_one_side with A.
trivial.
apply invert_one_side, in_angle_one_side.
try apply l11_24.
Col.
intro.
apply HTY, (l6_21 B C X Y).

*****
H5 : Col B C T
HTY : not (eq T Y)
HTX : not (eq T X)
H4 : not (eq X Y)
H7 : not (eq X B)
H6 : not (eq Y B)
H9 : not (eq P0 A)
HCol : Col X T Y
HOutY : Out B C Y
HOutX : Out B A X
X,Y : Tpoint
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col X Y Y
+++++
Col.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct HXY as [X [Y [HOutX [HOutY HCol]]]].
assert_diffs.
assert (X <> Y).
idtac.
exists X, Y.
repeat (split; trivial).
destruct (eq_dec_points T X) as [HTX|HTX].
try (subst; Between).
destruct (eq_dec_points T Y) as [HTY|HTY].
try (subst; Between).
apply out2__bet.
apply col_one_side_out with B.
Col.
apply invert_one_side, col_one_side with C.
Col.
apply one_side_symmetry, out_out_one_side with A.
trivial.
apply invert_one_side, in_angle_one_side.

*****
HTY : not (eq T Y)
HTX : not (eq T X)
H4 : not (eq X Y)
H7 : not (eq X B)
H6 : not (eq Y B)
H9 : not (eq P0 A)
HCol : Col X T Y
HOutY : Out B C Y
HOutX : Out B A X
X,Y : Tpoint
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
InAngle T C B A
+++++
try apply l11_24.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct HXY as [X [Y [HOutX [HOutY HCol]]]].
assert_diffs.
assert (X <> Y).
idtac.
exists X, Y.
repeat (split; trivial).
destruct (eq_dec_points T X) as [HTX|HTX].
try (subst; Between).
destruct (eq_dec_points T Y) as [HTY|HTY].
try (subst; Between).
apply out2__bet.
apply col_one_side_out with B.
Col.
apply invert_one_side, col_one_side with C.
Col.
apply one_side_symmetry, out_out_one_side with A.
trivial.
apply invert_one_side, in_angle_one_side.
try apply l11_24.

*****
HTY : not (eq T Y)
HTX : not (eq T X)
H4 : not (eq X Y)
H7 : not (eq X B)
H6 : not (eq Y B)
H9 : not (eq P0 A)
HCol : Col X T Y
HOutY : Out B C Y
HOutX : Out B A X
X,Y : Tpoint
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
InAngle T A B C
+++++
Col.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C T HPer HInAngle.
assert_diffs.
destruct (angle_bisector A B C) as [P0 [HIn HConga]].
auto.
assert_diffs.
assert (HNCol1 : ~ Col A B C).
idtac.
assert (HNCol2 : ~ Col P0 B A).
assert (HXY : exists X Y, Out B A X /\\ Out B C Y /\\ Col X T Y).
destruct HXY as [X [Y [HOutX [HOutY HCol]]]].
assert_diffs.
assert (X <> Y).
idtac.
exists X, Y.
repeat (split; trivial).
destruct (eq_dec_points T X) as [HTX|HTX].
try (subst; Between).
destruct (eq_dec_points T Y) as [HTY|HTY].
try (subst; Between).
apply out2__bet.
apply col_one_side_out with B.
Col.
apply invert_one_side, col_one_side with C.
Col.
apply one_side_symmetry, out_out_one_side with A.

*****
HTY : not (eq T Y)
HTX : not (eq T X)
H4 : not (eq X Y)
H7 : not (eq X B)
H6 : not (eq Y B)
H9 : not (eq P0 A)
HCol : Col X T Y
HOutY : Out B C Y
HOutX : Out B A X
X,Y : Tpoint
HNCol2 : not (Col P0 B A)
HNCol1 : not (Col A B C)
H1 : not (eq P0 B)
HConga : CongA P0 B A P0 B C
HIn : InAngle P0 A B C
P0 : Tpoint
H : not (eq A C)
H3 : not (eq T B)
H2 : not (eq C B)
H0 : not (eq A B)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,T : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T)\n (_ : Coplanar A B C P),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Out B A X
+++++
trivial.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).

*****
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C) (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T) (_ : Coplanar A B C P), ex (fun X : Tpoint => ex (fun Y : Tpoint => and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
+++++
intros A B C P T HPer HInangle HPT HConga HPerP HCop.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros A B C P T HPer HInangle HPT HConga HPerP HCop.

*****
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HPT : not (eq P T)
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => ex (fun Y : Tpoint => and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
+++++
assert_diffs.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros A B C P T HPer HInangle HPT HConga HPerP HCop.
assert_diffs.

*****
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HPT : not (eq P T)
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => ex (fun Y : Tpoint => and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
+++++
assert (HIn : InAngle P A B C).
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros A B C P T HPer HInangle HPT HConga HPerP HCop.
assert_diffs.
assert (HIn : InAngle P A B C).

*****
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HPT : not (eq P T)
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
InAngle P A B C
+++++
apply conga_cop_inangle_per2__inangle with T.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros A B C P T HPer HInangle HPT HConga HPerP HCop.
assert_diffs.
assert (HIn : InAngle P A B C).
apply conga_cop_inangle_per2__inangle with T.

*****
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HPT : not (eq P T)
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per A B C
+++++
assumption.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros A B C P T HPer HInangle HPT HConga HPerP HCop.
assert_diffs.
assert (HIn : InAngle P A B C).
apply conga_cop_inangle_per2__inangle with T.

*****
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HPT : not (eq P T)
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
InAngle T A B C
+++++
assumption.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros A B C P T HPer HInangle HPT HConga HPerP HCop.
assert_diffs.
assert (HIn : InAngle P A B C).
apply conga_cop_inangle_per2__inangle with T.

*****
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HPT : not (eq P T)
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
CongA P B A P B C
+++++
assumption.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros A B C P T HPer HInangle HPT HConga HPerP HCop.
assert_diffs.
assert (HIn : InAngle P A B C).
apply conga_cop_inangle_per2__inangle with T.

*****
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HPT : not (eq P T)
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per B P T
+++++
assumption.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros A B C P T HPer HInangle HPT HConga HPerP HCop.
assert_diffs.
assert (HIn : InAngle P A B C).
apply conga_cop_inangle_per2__inangle with T.

*****
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HPT : not (eq P T)
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B C P
+++++
assumption.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros A B C P T HPer HInangle HPT HConga HPerP HCop.
assert_diffs.
assert (HIn : InAngle P A B C).

*****
HIn : InAngle P A B C
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HPT : not (eq P T)
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => ex (fun Y : Tpoint => and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
+++++
idtac.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros A B C P T HPer HInangle HPT HConga HPerP HCop.
assert_diffs.
assert (HIn : InAngle P A B C).
idtac.

*****
HIn : InAngle P A B C
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HPT : not (eq P T)
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => ex (fun Y : Tpoint => and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
+++++
assert (HSumA : SumA P B A P B A A B C).
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros A B C P T HPer HInangle HPT HConga HPerP HCop.
assert_diffs.
assert (HIn : InAngle P A B C).
idtac.
assert (HSumA : SumA P B A P B A A B C).

*****
HIn : InAngle P A B C
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HPT : not (eq P T)
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
SumA P B A P B A A B C
+++++
apply (conga3_suma__suma A B P P B C A B C).
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros A B C P T HPer HInangle HPT HConga HPerP HCop.
assert_diffs.
assert (HIn : InAngle P A B C).
idtac.
assert (HSumA : SumA P B A P B A A B C).
apply (conga3_suma__suma A B P P B C A B C).

*****
HIn : InAngle P A B C
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HPT : not (eq P T)
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
SumA A B P P B C A B C
+++++
CongA.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros A B C P T HPer HInangle HPT HConga HPerP HCop.
assert_diffs.
assert (HIn : InAngle P A B C).
idtac.
assert (HSumA : SumA P B A P B A A B C).
apply (conga3_suma__suma A B P P B C A B C).
CongA.

*****
HIn : InAngle P A B C
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HPT : not (eq P T)
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
SumA A B P P B C A B C
+++++
SumA.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros A B C P T HPer HInangle HPT HConga HPerP HCop.
assert_diffs.
assert (HIn : InAngle P A B C).
idtac.
assert (HSumA : SumA P B A P B A A B C).
apply (conga3_suma__suma A B P P B C A B C).

*****
HIn : InAngle P A B C
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HPT : not (eq P T)
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
CongA A B P P B A
+++++
CongA.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros A B C P T HPer HInangle HPT HConga HPerP HCop.
assert_diffs.
assert (HIn : InAngle P A B C).
idtac.
assert (HSumA : SumA P B A P B A A B C).
apply (conga3_suma__suma A B P P B C A B C).

*****
HIn : InAngle P A B C
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HPT : not (eq P T)
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
CongA P B C P B A
+++++
CongA.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros A B C P T HPer HInangle HPT HConga HPerP HCop.
assert_diffs.
assert (HIn : InAngle P A B C).
idtac.
assert (HSumA : SumA P B A P B A A B C).
apply (conga3_suma__suma A B P P B C A B C).

*****
HIn : InAngle P A B C
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HPT : not (eq P T)
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
CongA A B C A B C
+++++
CongA.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros A B C P T HPer HInangle HPT HConga HPerP HCop.
assert_diffs.
assert (HIn : InAngle P A B C).
idtac.
assert (HSumA : SumA P B A P B A A B C).

*****
HSumA : SumA P B A P B A A B C
HIn : InAngle P A B C
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HPT : not (eq P T)
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => ex (fun Y : Tpoint => and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
+++++
assert (HAcute : Acute P B A).
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros A B C P T HPer HInangle HPT HConga HPerP HCop.
assert_diffs.
assert (HIn : InAngle P A B C).
idtac.
assert (HSumA : SumA P B A P B A A B C).
assert (HAcute : Acute P B A).

*****
HSumA : SumA P B A P B A A B C
HIn : InAngle P A B C
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HPT : not (eq P T)
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Acute P B A
+++++
apply acute_sym, conga_inangle_per__acute with C.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros A B C P T HPer HInangle HPT HConga HPerP HCop.
assert_diffs.
assert (HIn : InAngle P A B C).
idtac.
assert (HSumA : SumA P B A P B A A B C).
assert (HAcute : Acute P B A).
apply acute_sym, conga_inangle_per__acute with C.

*****
HSumA : SumA P B A P B A A B C
HIn : InAngle P A B C
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HPT : not (eq P T)
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per A B C
+++++
assumption.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros A B C P T HPer HInangle HPT HConga HPerP HCop.
assert_diffs.
assert (HIn : InAngle P A B C).
idtac.
assert (HSumA : SumA P B A P B A A B C).
assert (HAcute : Acute P B A).
apply acute_sym, conga_inangle_per__acute with C.

*****
HSumA : SumA P B A P B A A B C
HIn : InAngle P A B C
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HPT : not (eq P T)
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
InAngle P A B C
+++++
assumption.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros A B C P T HPer HInangle HPT HConga HPerP HCop.
assert_diffs.
assert (HIn : InAngle P A B C).
idtac.
assert (HSumA : SumA P B A P B A A B C).
assert (HAcute : Acute P B A).
apply acute_sym, conga_inangle_per__acute with C.

*****
HSumA : SumA P B A P B A A B C
HIn : InAngle P A B C
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HPT : not (eq P T)
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
CongA P B A P B C
+++++
assumption.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros A B C P T HPer HInangle HPT HConga HPerP HCop.
assert_diffs.
assert (HIn : InAngle P A B C).
idtac.
assert (HSumA : SumA P B A P B A A B C).
assert (HAcute : Acute P B A).

*****
HAcute : Acute P B A
HSumA : SumA P B A P B A A B C
HIn : InAngle P A B C
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HPT : not (eq P T)
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => ex (fun Y : Tpoint => and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
+++++
idtac.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros A B C P T HPer HInangle HPT HConga HPerP HCop.
assert_diffs.
assert (HIn : InAngle P A B C).
idtac.
assert (HSumA : SumA P B A P B A A B C).
assert (HAcute : Acute P B A).
idtac.

*****
HAcute : Acute P B A
HSumA : SumA P B A P B A A B C
HIn : InAngle P A B C
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HPT : not (eq P T)
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => ex (fun Y : Tpoint => and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
+++++
assert (HOut : Out B P P).
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros A B C P T HPer HInangle HPT HConga HPerP HCop.
assert_diffs.
assert (HIn : InAngle P A B C).
idtac.
assert (HSumA : SumA P B A P B A A B C).
assert (HAcute : Acute P B A).
idtac.
assert (HOut : Out B P P).

*****
HAcute : Acute P B A
HSumA : SumA P B A P B A A B C
HIn : InAngle P A B C
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HPT : not (eq P T)
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Out B P P
+++++
apply out_trivial.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros A B C P T HPer HInangle HPT HConga HPerP HCop.
assert_diffs.
assert (HIn : InAngle P A B C).
idtac.
assert (HSumA : SumA P B A P B A A B C).
assert (HAcute : Acute P B A).
idtac.
assert (HOut : Out B P P).
apply out_trivial.

*****
HAcute : Acute P B A
HSumA : SumA P B A P B A A B C
HIn : InAngle P A B C
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HPT : not (eq P T)
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq P B)
+++++
auto.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros A B C P T HPer HInangle HPT HConga HPerP HCop.
assert_diffs.
assert (HIn : InAngle P A B C).
idtac.
assert (HSumA : SumA P B A P B A A B C).
assert (HAcute : Acute P B A).
idtac.
assert (HOut : Out B P P).

*****
HOut : Out B P P
HAcute : Acute P B A
HSumA : SumA P B A P B A A B C
HIn : InAngle P A B C
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HPT : not (eq P T)
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => ex (fun Y : Tpoint => and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
+++++
idtac.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros A B C P T HPer HInangle HPT HConga HPerP HCop.
assert_diffs.
assert (HIn : InAngle P A B C).
idtac.
assert (HSumA : SumA P B A P B A A B C).
assert (HAcute : Acute P B A).
idtac.
assert (HOut : Out B P P).
idtac.

*****
HOut : Out B P P
HAcute : Acute P B A
HSumA : SumA P B A P B A A B C
HIn : InAngle P A B C
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HPT : not (eq P T)
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => ex (fun Y : Tpoint => and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
+++++
destruct (wipp P B A A B C P T) as [X [HX1 HX2]].
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros A B C P T HPer HInangle HPT HConga HPerP HCop.
assert_diffs.
assert (HIn : InAngle P A B C).
idtac.
assert (HSumA : SumA P B A P B A A B C).
assert (HAcute : Acute P B A).
idtac.
assert (HOut : Out B P P).
idtac.
destruct (wipp P B A A B C P T) as [X [HX1 HX2]].

*****
HOut : Out B P P
HAcute : Acute P B A
HSumA : SumA P B A P B A A B C
HIn : InAngle P A B C
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HPT : not (eq P T)
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Acute P B A
+++++
trivial.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros A B C P T HPer HInangle HPT HConga HPerP HCop.
assert_diffs.
assert (HIn : InAngle P A B C).
idtac.
assert (HSumA : SumA P B A P B A A B C).
assert (HAcute : Acute P B A).
idtac.
assert (HOut : Out B P P).
idtac.
destruct (wipp P B A A B C P T) as [X [HX1 HX2]].

*****
HOut : Out B P P
HAcute : Acute P B A
HSumA : SumA P B A P B A A B C
HIn : InAngle P A B C
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HPT : not (eq P T)
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per A B C
+++++
trivial.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros A B C P T HPer HInangle HPT HConga HPerP HCop.
assert_diffs.
assert (HIn : InAngle P A B C).
idtac.
assert (HSumA : SumA P B A P B A A B C).
assert (HAcute : Acute P B A).
idtac.
assert (HOut : Out B P P).
idtac.
destruct (wipp P B A A B C P T) as [X [HX1 HX2]].

*****
HOut : Out B P P
HAcute : Acute P B A
HSumA : SumA P B A P B A A B C
HIn : InAngle P A B C
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HPT : not (eq P T)
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
SumA P B A P B A A B C
+++++
trivial.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros A B C P T HPer HInangle HPT HConga HPerP HCop.
assert_diffs.
assert (HIn : InAngle P A B C).
idtac.
assert (HSumA : SumA P B A P B A A B C).
assert (HAcute : Acute P B A).
idtac.
assert (HOut : Out B P P).
idtac.
destruct (wipp P B A A B C P T) as [X [HX1 HX2]].

*****
HOut : Out B P P
HAcute : Acute P B A
HSumA : SumA P B A P B A A B C
HIn : InAngle P A B C
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HPT : not (eq P T)
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Out B P P
+++++
trivial.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros A B C P T HPer HInangle HPT HConga HPerP HCop.
assert_diffs.
assert (HIn : InAngle P A B C).
idtac.
assert (HSumA : SumA P B A P B A A B C).
assert (HAcute : Acute P B A).
idtac.
assert (HOut : Out B P P).
idtac.
destruct (wipp P B A A B C P T) as [X [HX1 HX2]].

*****
HOut : Out B P P
HAcute : Acute P B A
HSumA : SumA P B A P B A A B C
HIn : InAngle P A B C
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HPT : not (eq P T)
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq P T)
+++++
trivial.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros A B C P T HPer HInangle HPT HConga HPerP HCop.
assert_diffs.
assert (HIn : InAngle P A B C).
idtac.
assert (HSumA : SumA P B A P B A A B C).
assert (HAcute : Acute P B A).
idtac.
assert (HOut : Out B P P).
idtac.
destruct (wipp P B A A B C P T) as [X [HX1 HX2]].

*****
HOut : Out B P P
HAcute : Acute P B A
HSumA : SumA P B A P B A A B C
HIn : InAngle P A B C
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HPT : not (eq P T)
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per B P T
+++++
trivial.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros A B C P T HPer HInangle HPT HConga HPerP HCop.
assert_diffs.
assert (HIn : InAngle P A B C).
idtac.
assert (HSumA : SumA P B A P B A A B C).
assert (HAcute : Acute P B A).
idtac.
assert (HOut : Out B P P).
idtac.
destruct (wipp P B A A B C P T) as [X [HX1 HX2]].

*****
HOut : Out B P P
HAcute : Acute P B A
HSumA : SumA P B A P B A A B C
HIn : InAngle P A B C
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HPT : not (eq P T)
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar P B A T
+++++
trivial.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros A B C P T HPer HInangle HPT HConga HPerP HCop.
assert_diffs.
assert (HIn : InAngle P A B C).
idtac.
assert (HSumA : SumA P B A P B A A B C).
assert (HAcute : Acute P B A).
idtac.
assert (HOut : Out B P P).
idtac.
destruct (wipp P B A A B C P T) as [X [HX1 HX2]].
trivial.

*****
HOut : Out B P P
HAcute : Acute P B A
HSumA : SumA P B A P B A A B C
HIn : InAngle P A B C
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HPT : not (eq P T)
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar P B A T
+++++
assert (Coplanar A B C T).
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros A B C P T HPer HInangle HPT HConga HPerP HCop.
assert_diffs.
assert (HIn : InAngle P A B C).
idtac.
assert (HSumA : SumA P B A P B A A B C).
assert (HAcute : Acute P B A).
idtac.
assert (HOut : Out B P P).
idtac.
destruct (wipp P B A A B C P T) as [X [HX1 HX2]].
trivial.
assert (Coplanar A B C T).

*****
HOut : Out B P P
HAcute : Acute P B A
HSumA : SumA P B A P B A A B C
HIn : InAngle P A B C
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HPT : not (eq P T)
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B C T
+++++
Cop.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros A B C P T HPer HInangle HPT HConga HPerP HCop.
assert_diffs.
assert (HIn : InAngle P A B C).
idtac.
assert (HSumA : SumA P B A P B A A B C).
assert (HAcute : Acute P B A).
idtac.
assert (HOut : Out B P P).
idtac.
destruct (wipp P B A A B C P T) as [X [HX1 HX2]].
trivial.
assert (Coplanar A B C T).

*****
H4 : Coplanar A B C T
HOut : Out B P P
HAcute : Acute P B A
HSumA : SumA P B A P B A A B C
HIn : InAngle P A B C
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HPT : not (eq P T)
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar P B A T
+++++
idtac.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros A B C P T HPer HInangle HPT HConga HPerP HCop.
assert_diffs.
assert (HIn : InAngle P A B C).
idtac.
assert (HSumA : SumA P B A P B A A B C).
assert (HAcute : Acute P B A).
idtac.
assert (HOut : Out B P P).
idtac.
destruct (wipp P B A A B C P T) as [X [HX1 HX2]].
trivial.
assert (Coplanar A B C T).
idtac.

*****
H4 : Coplanar A B C T
HOut : Out B P P
HAcute : Acute P B A
HSumA : SumA P B A P B A A B C
HIn : InAngle P A B C
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HPT : not (eq P T)
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar P B A T
+++++
assert (~ Col A B C).
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros A B C P T HPer HInangle HPT HConga HPerP HCop.
assert_diffs.
assert (HIn : InAngle P A B C).
idtac.
assert (HSumA : SumA P B A P B A A B C).
assert (HAcute : Acute P B A).
idtac.
assert (HOut : Out B P P).
idtac.
destruct (wipp P B A A B C P T) as [X [HX1 HX2]].
trivial.
assert (Coplanar A B C T).
idtac.
assert (~ Col A B C).

*****
H4 : Coplanar A B C T
HOut : Out B P P
HAcute : Acute P B A
HSumA : SumA P B A P B A A B C
HIn : InAngle P A B C
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HPT : not (eq P T)
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col A B C)
+++++
apply per_not_col.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros A B C P T HPer HInangle HPT HConga HPerP HCop.
assert_diffs.
assert (HIn : InAngle P A B C).
idtac.
assert (HSumA : SumA P B A P B A A B C).
assert (HAcute : Acute P B A).
idtac.
assert (HOut : Out B P P).
idtac.
destruct (wipp P B A A B C P T) as [X [HX1 HX2]].
trivial.
assert (Coplanar A B C T).
idtac.
assert (~ Col A B C).
apply per_not_col.

*****
H4 : Coplanar A B C T
HOut : Out B P P
HAcute : Acute P B A
HSumA : SumA P B A P B A A B C
HIn : InAngle P A B C
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HPT : not (eq P T)
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq A B)
+++++
auto.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros A B C P T HPer HInangle HPT HConga HPerP HCop.
assert_diffs.
assert (HIn : InAngle P A B C).
idtac.
assert (HSumA : SumA P B A P B A A B C).
assert (HAcute : Acute P B A).
idtac.
assert (HOut : Out B P P).
idtac.
destruct (wipp P B A A B C P T) as [X [HX1 HX2]].
trivial.
assert (Coplanar A B C T).
idtac.
assert (~ Col A B C).
apply per_not_col.

*****
H4 : Coplanar A B C T
HOut : Out B P P
HAcute : Acute P B A
HSumA : SumA P B A P B A A B C
HIn : InAngle P A B C
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HPT : not (eq P T)
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq B C)
+++++
auto.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros A B C P T HPer HInangle HPT HConga HPerP HCop.
assert_diffs.
assert (HIn : InAngle P A B C).
idtac.
assert (HSumA : SumA P B A P B A A B C).
assert (HAcute : Acute P B A).
idtac.
assert (HOut : Out B P P).
idtac.
destruct (wipp P B A A B C P T) as [X [HX1 HX2]].
trivial.
assert (Coplanar A B C T).
idtac.
assert (~ Col A B C).
apply per_not_col.

*****
H4 : Coplanar A B C T
HOut : Out B P P
HAcute : Acute P B A
HSumA : SumA P B A P B A A B C
HIn : InAngle P A B C
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HPT : not (eq P T)
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per A B C
+++++
auto.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros A B C P T HPer HInangle HPT HConga HPerP HCop.
assert_diffs.
assert (HIn : InAngle P A B C).
idtac.
assert (HSumA : SumA P B A P B A A B C).
assert (HAcute : Acute P B A).
idtac.
assert (HOut : Out B P P).
idtac.
destruct (wipp P B A A B C P T) as [X [HX1 HX2]].
trivial.
assert (Coplanar A B C T).
idtac.
assert (~ Col A B C).

*****
H5 : not (Col A B C)
H4 : Coplanar A B C T
HOut : Out B P P
HAcute : Acute P B A
HSumA : SumA P B A P B A A B C
HIn : InAngle P A B C
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HPT : not (eq P T)
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar P B A T
+++++
idtac.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros A B C P T HPer HInangle HPT HConga HPerP HCop.
assert_diffs.
assert (HIn : InAngle P A B C).
idtac.
assert (HSumA : SumA P B A P B A A B C).
assert (HAcute : Acute P B A).
idtac.
assert (HOut : Out B P P).
idtac.
destruct (wipp P B A A B C P T) as [X [HX1 HX2]].
trivial.
assert (Coplanar A B C T).
idtac.
assert (~ Col A B C).
idtac.

*****
H5 : not (Col A B C)
H4 : Coplanar A B C T
HOut : Out B P P
HAcute : Acute P B A
HSumA : SumA P B A P B A A B C
HIn : InAngle P A B C
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HPT : not (eq P T)
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar P B A T
+++++
CopR.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros A B C P T HPer HInangle HPT HConga HPerP HCop.
assert_diffs.
assert (HIn : InAngle P A B C).
idtac.
assert (HSumA : SumA P B A P B A A B C).
assert (HAcute : Acute P B A).
idtac.
assert (HOut : Out B P P).
idtac.
destruct (wipp P B A A B C P T) as [X [HX1 HX2]].

*****
HX2 : Col P T X
HX1 : Out B A X
X : Tpoint
HOut : Out B P P
HAcute : Acute P B A
HSumA : SumA P B A P B A A B C
HIn : InAngle P A B C
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HPT : not (eq P T)
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => ex (fun Y : Tpoint => and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
+++++
trivial.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros A B C P T HPer HInangle HPT HConga HPerP HCop.
assert_diffs.
assert (HIn : InAngle P A B C).
idtac.
assert (HSumA : SumA P B A P B A A B C).
assert (HAcute : Acute P B A).
idtac.
assert (HOut : Out B P P).
idtac.
destruct (wipp P B A A B C P T) as [X [HX1 HX2]].
trivial.

*****
HX2 : Col P T X
HX1 : Out B A X
X : Tpoint
HOut : Out B P P
HAcute : Acute P B A
HSumA : SumA P B A P B A A B C
HIn : InAngle P A B C
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HPT : not (eq P T)
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => ex (fun Y : Tpoint => and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
+++++
destruct (wipp P B C C B A P T) as [Y [HY1 HY2]].
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros A B C P T HPer HInangle HPT HConga HPerP HCop.
assert_diffs.
assert (HIn : InAngle P A B C).
idtac.
assert (HSumA : SumA P B A P B A A B C).
assert (HAcute : Acute P B A).
idtac.
assert (HOut : Out B P P).
idtac.
destruct (wipp P B A A B C P T) as [X [HX1 HX2]].
trivial.
destruct (wipp P B C C B A P T) as [Y [HY1 HY2]].

*****
HX2 : Col P T X
HX1 : Out B A X
X : Tpoint
HOut : Out B P P
HAcute : Acute P B A
HSumA : SumA P B A P B A A B C
HIn : InAngle P A B C
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HPT : not (eq P T)
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Acute P B C
+++++
Perp.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros A B C P T HPer HInangle HPT HConga HPerP HCop.
assert_diffs.
assert (HIn : InAngle P A B C).
idtac.
assert (HSumA : SumA P B A P B A A B C).
assert (HAcute : Acute P B A).
idtac.
assert (HOut : Out B P P).
idtac.
destruct (wipp P B A A B C P T) as [X [HX1 HX2]].
trivial.
destruct (wipp P B C C B A P T) as [Y [HY1 HY2]].
Perp.

*****
HX2 : Col P T X
HX1 : Out B A X
X : Tpoint
HOut : Out B P P
HAcute : Acute P B A
HSumA : SumA P B A P B A A B C
HIn : InAngle P A B C
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HPT : not (eq P T)
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Acute P B C
+++++
apply (acute_conga__acute P B A).
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros A B C P T HPer HInangle HPT HConga HPerP HCop.
assert_diffs.
assert (HIn : InAngle P A B C).
idtac.
assert (HSumA : SumA P B A P B A A B C).
assert (HAcute : Acute P B A).
idtac.
assert (HOut : Out B P P).
idtac.
destruct (wipp P B A A B C P T) as [X [HX1 HX2]].
trivial.
destruct (wipp P B C C B A P T) as [Y [HY1 HY2]].
Perp.
apply (acute_conga__acute P B A).

*****
HX2 : Col P T X
HX1 : Out B A X
X : Tpoint
HOut : Out B P P
HAcute : Acute P B A
HSumA : SumA P B A P B A A B C
HIn : InAngle P A B C
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HPT : not (eq P T)
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Acute P B A
+++++
assumption.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros A B C P T HPer HInangle HPT HConga HPerP HCop.
assert_diffs.
assert (HIn : InAngle P A B C).
idtac.
assert (HSumA : SumA P B A P B A A B C).
assert (HAcute : Acute P B A).
idtac.
assert (HOut : Out B P P).
idtac.
destruct (wipp P B A A B C P T) as [X [HX1 HX2]].
trivial.
destruct (wipp P B C C B A P T) as [Y [HY1 HY2]].
Perp.
apply (acute_conga__acute P B A).

*****
HX2 : Col P T X
HX1 : Out B A X
X : Tpoint
HOut : Out B P P
HAcute : Acute P B A
HSumA : SumA P B A P B A A B C
HIn : InAngle P A B C
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HPT : not (eq P T)
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
CongA P B A P B C
+++++
assumption.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros A B C P T HPer HInangle HPT HConga HPerP HCop.
assert_diffs.
assert (HIn : InAngle P A B C).
idtac.
assert (HSumA : SumA P B A P B A A B C).
assert (HAcute : Acute P B A).
idtac.
assert (HOut : Out B P P).
idtac.
destruct (wipp P B A A B C P T) as [X [HX1 HX2]].
trivial.
destruct (wipp P B C C B A P T) as [Y [HY1 HY2]].

*****
HX2 : Col P T X
HX1 : Out B A X
X : Tpoint
HOut : Out B P P
HAcute : Acute P B A
HSumA : SumA P B A P B A A B C
HIn : InAngle P A B C
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HPT : not (eq P T)
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per C B A
+++++
Perp.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros A B C P T HPer HInangle HPT HConga HPerP HCop.
assert_diffs.
assert (HIn : InAngle P A B C).
idtac.
assert (HSumA : SumA P B A P B A A B C).
assert (HAcute : Acute P B A).
idtac.
assert (HOut : Out B P P).
idtac.
destruct (wipp P B A A B C P T) as [X [HX1 HX2]].
trivial.
destruct (wipp P B C C B A P T) as [Y [HY1 HY2]].

*****
HX2 : Col P T X
HX1 : Out B A X
X : Tpoint
HOut : Out B P P
HAcute : Acute P B A
HSumA : SumA P B A P B A A B C
HIn : InAngle P A B C
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HPT : not (eq P T)
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
SumA P B C P B C C B A
+++++
Perp.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros A B C P T HPer HInangle HPT HConga HPerP HCop.
assert_diffs.
assert (HIn : InAngle P A B C).
idtac.
assert (HSumA : SumA P B A P B A A B C).
assert (HAcute : Acute P B A).
idtac.
assert (HOut : Out B P P).
idtac.
destruct (wipp P B A A B C P T) as [X [HX1 HX2]].
trivial.
destruct (wipp P B C C B A P T) as [Y [HY1 HY2]].
Perp.

*****
HX2 : Col P T X
HX1 : Out B A X
X : Tpoint
HOut : Out B P P
HAcute : Acute P B A
HSumA : SumA P B A P B A A B C
HIn : InAngle P A B C
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HPT : not (eq P T)
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
SumA P B C P B C C B A
+++++
apply (conga3_suma__suma P B A P B A A B C).
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros A B C P T HPer HInangle HPT HConga HPerP HCop.
assert_diffs.
assert (HIn : InAngle P A B C).
idtac.
assert (HSumA : SumA P B A P B A A B C).
assert (HAcute : Acute P B A).
idtac.
assert (HOut : Out B P P).
idtac.
destruct (wipp P B A A B C P T) as [X [HX1 HX2]].
trivial.
destruct (wipp P B C C B A P T) as [Y [HY1 HY2]].
Perp.
apply (conga3_suma__suma P B A P B A A B C).

*****
HX2 : Col P T X
HX1 : Out B A X
X : Tpoint
HOut : Out B P P
HAcute : Acute P B A
HSumA : SumA P B A P B A A B C
HIn : InAngle P A B C
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HPT : not (eq P T)
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
SumA P B A P B A A B C
+++++
CongA.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros A B C P T HPer HInangle HPT HConga HPerP HCop.
assert_diffs.
assert (HIn : InAngle P A B C).
idtac.
assert (HSumA : SumA P B A P B A A B C).
assert (HAcute : Acute P B A).
idtac.
assert (HOut : Out B P P).
idtac.
destruct (wipp P B A A B C P T) as [X [HX1 HX2]].
trivial.
destruct (wipp P B C C B A P T) as [Y [HY1 HY2]].
Perp.
apply (conga3_suma__suma P B A P B A A B C).

*****
HX2 : Col P T X
HX1 : Out B A X
X : Tpoint
HOut : Out B P P
HAcute : Acute P B A
HSumA : SumA P B A P B A A B C
HIn : InAngle P A B C
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HPT : not (eq P T)
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
CongA P B A P B C
+++++
CongA.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros A B C P T HPer HInangle HPT HConga HPerP HCop.
assert_diffs.
assert (HIn : InAngle P A B C).
idtac.
assert (HSumA : SumA P B A P B A A B C).
assert (HAcute : Acute P B A).
idtac.
assert (HOut : Out B P P).
idtac.
destruct (wipp P B A A B C P T) as [X [HX1 HX2]].
trivial.
destruct (wipp P B C C B A P T) as [Y [HY1 HY2]].
Perp.
apply (conga3_suma__suma P B A P B A A B C).

*****
HX2 : Col P T X
HX1 : Out B A X
X : Tpoint
HOut : Out B P P
HAcute : Acute P B A
HSumA : SumA P B A P B A A B C
HIn : InAngle P A B C
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HPT : not (eq P T)
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
CongA P B A P B C
+++++
CongA.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros A B C P T HPer HInangle HPT HConga HPerP HCop.
assert_diffs.
assert (HIn : InAngle P A B C).
idtac.
assert (HSumA : SumA P B A P B A A B C).
assert (HAcute : Acute P B A).
idtac.
assert (HOut : Out B P P).
idtac.
destruct (wipp P B A A B C P T) as [X [HX1 HX2]].
trivial.
destruct (wipp P B C C B A P T) as [Y [HY1 HY2]].
Perp.
apply (conga3_suma__suma P B A P B A A B C).

*****
HX2 : Col P T X
HX1 : Out B A X
X : Tpoint
HOut : Out B P P
HAcute : Acute P B A
HSumA : SumA P B A P B A A B C
HIn : InAngle P A B C
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HPT : not (eq P T)
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
CongA A B C C B A
+++++
CongA.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros A B C P T HPer HInangle HPT HConga HPerP HCop.
assert_diffs.
assert (HIn : InAngle P A B C).
idtac.
assert (HSumA : SumA P B A P B A A B C).
assert (HAcute : Acute P B A).
idtac.
assert (HOut : Out B P P).
idtac.
destruct (wipp P B A A B C P T) as [X [HX1 HX2]].
trivial.
destruct (wipp P B C C B A P T) as [Y [HY1 HY2]].

*****
HX2 : Col P T X
HX1 : Out B A X
X : Tpoint
HOut : Out B P P
HAcute : Acute P B A
HSumA : SumA P B A P B A A B C
HIn : InAngle P A B C
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HPT : not (eq P T)
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Out B P P
+++++
Perp.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros A B C P T HPer HInangle HPT HConga HPerP HCop.
assert_diffs.
assert (HIn : InAngle P A B C).
idtac.
assert (HSumA : SumA P B A P B A A B C).
assert (HAcute : Acute P B A).
idtac.
assert (HOut : Out B P P).
idtac.
destruct (wipp P B A A B C P T) as [X [HX1 HX2]].
trivial.
destruct (wipp P B C C B A P T) as [Y [HY1 HY2]].

*****
HX2 : Col P T X
HX1 : Out B A X
X : Tpoint
HOut : Out B P P
HAcute : Acute P B A
HSumA : SumA P B A P B A A B C
HIn : InAngle P A B C
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HPT : not (eq P T)
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq P T)
+++++
Perp.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros A B C P T HPer HInangle HPT HConga HPerP HCop.
assert_diffs.
assert (HIn : InAngle P A B C).
idtac.
assert (HSumA : SumA P B A P B A A B C).
assert (HAcute : Acute P B A).
idtac.
assert (HOut : Out B P P).
idtac.
destruct (wipp P B A A B C P T) as [X [HX1 HX2]].
trivial.
destruct (wipp P B C C B A P T) as [Y [HY1 HY2]].

*****
HX2 : Col P T X
HX1 : Out B A X
X : Tpoint
HOut : Out B P P
HAcute : Acute P B A
HSumA : SumA P B A P B A A B C
HIn : InAngle P A B C
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HPT : not (eq P T)
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per B P T
+++++
Perp.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros A B C P T HPer HInangle HPT HConga HPerP HCop.
assert_diffs.
assert (HIn : InAngle P A B C).
idtac.
assert (HSumA : SumA P B A P B A A B C).
assert (HAcute : Acute P B A).
idtac.
assert (HOut : Out B P P).
idtac.
destruct (wipp P B A A B C P T) as [X [HX1 HX2]].
trivial.
destruct (wipp P B C C B A P T) as [Y [HY1 HY2]].

*****
HX2 : Col P T X
HX1 : Out B A X
X : Tpoint
HOut : Out B P P
HAcute : Acute P B A
HSumA : SumA P B A P B A A B C
HIn : InAngle P A B C
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HPT : not (eq P T)
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar P B C T
+++++
Perp.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros A B C P T HPer HInangle HPT HConga HPerP HCop.
assert_diffs.
assert (HIn : InAngle P A B C).
idtac.
assert (HSumA : SumA P B A P B A A B C).
assert (HAcute : Acute P B A).
idtac.
assert (HOut : Out B P P).
idtac.
destruct (wipp P B A A B C P T) as [X [HX1 HX2]].
trivial.
destruct (wipp P B C C B A P T) as [Y [HY1 HY2]].
Perp.

*****
HX2 : Col P T X
HX1 : Out B A X
X : Tpoint
HOut : Out B P P
HAcute : Acute P B A
HSumA : SumA P B A P B A A B C
HIn : InAngle P A B C
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HPT : not (eq P T)
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar P B C T
+++++
assert (Coplanar A B C T).
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros A B C P T HPer HInangle HPT HConga HPerP HCop.
assert_diffs.
assert (HIn : InAngle P A B C).
idtac.
assert (HSumA : SumA P B A P B A A B C).
assert (HAcute : Acute P B A).
idtac.
assert (HOut : Out B P P).
idtac.
destruct (wipp P B A A B C P T) as [X [HX1 HX2]].
trivial.
destruct (wipp P B C C B A P T) as [Y [HY1 HY2]].
Perp.
assert (Coplanar A B C T).

*****
HX2 : Col P T X
HX1 : Out B A X
X : Tpoint
HOut : Out B P P
HAcute : Acute P B A
HSumA : SumA P B A P B A A B C
HIn : InAngle P A B C
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HPT : not (eq P T)
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B C T
+++++
Cop.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros A B C P T HPer HInangle HPT HConga HPerP HCop.
assert_diffs.
assert (HIn : InAngle P A B C).
idtac.
assert (HSumA : SumA P B A P B A A B C).
assert (HAcute : Acute P B A).
idtac.
assert (HOut : Out B P P).
idtac.
destruct (wipp P B A A B C P T) as [X [HX1 HX2]].
trivial.
destruct (wipp P B C C B A P T) as [Y [HY1 HY2]].
Perp.
assert (Coplanar A B C T).

*****
H4 : Coplanar A B C T
HX2 : Col P T X
HX1 : Out B A X
X : Tpoint
HOut : Out B P P
HAcute : Acute P B A
HSumA : SumA P B A P B A A B C
HIn : InAngle P A B C
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HPT : not (eq P T)
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar P B C T
+++++
idtac.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros A B C P T HPer HInangle HPT HConga HPerP HCop.
assert_diffs.
assert (HIn : InAngle P A B C).
idtac.
assert (HSumA : SumA P B A P B A A B C).
assert (HAcute : Acute P B A).
idtac.
assert (HOut : Out B P P).
idtac.
destruct (wipp P B A A B C P T) as [X [HX1 HX2]].
trivial.
destruct (wipp P B C C B A P T) as [Y [HY1 HY2]].
Perp.
assert (Coplanar A B C T).
idtac.

*****
H4 : Coplanar A B C T
HX2 : Col P T X
HX1 : Out B A X
X : Tpoint
HOut : Out B P P
HAcute : Acute P B A
HSumA : SumA P B A P B A A B C
HIn : InAngle P A B C
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HPT : not (eq P T)
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar P B C T
+++++
assert (~ Col A B C).
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros A B C P T HPer HInangle HPT HConga HPerP HCop.
assert_diffs.
assert (HIn : InAngle P A B C).
idtac.
assert (HSumA : SumA P B A P B A A B C).
assert (HAcute : Acute P B A).
idtac.
assert (HOut : Out B P P).
idtac.
destruct (wipp P B A A B C P T) as [X [HX1 HX2]].
trivial.
destruct (wipp P B C C B A P T) as [Y [HY1 HY2]].
Perp.
assert (Coplanar A B C T).
idtac.
assert (~ Col A B C).

*****
H4 : Coplanar A B C T
HX2 : Col P T X
HX1 : Out B A X
X : Tpoint
HOut : Out B P P
HAcute : Acute P B A
HSumA : SumA P B A P B A A B C
HIn : InAngle P A B C
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HPT : not (eq P T)
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col A B C)
+++++
apply per_not_col.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros A B C P T HPer HInangle HPT HConga HPerP HCop.
assert_diffs.
assert (HIn : InAngle P A B C).
idtac.
assert (HSumA : SumA P B A P B A A B C).
assert (HAcute : Acute P B A).
idtac.
assert (HOut : Out B P P).
idtac.
destruct (wipp P B A A B C P T) as [X [HX1 HX2]].
trivial.
destruct (wipp P B C C B A P T) as [Y [HY1 HY2]].
Perp.
assert (Coplanar A B C T).
idtac.
assert (~ Col A B C).
apply per_not_col.

*****
H4 : Coplanar A B C T
HX2 : Col P T X
HX1 : Out B A X
X : Tpoint
HOut : Out B P P
HAcute : Acute P B A
HSumA : SumA P B A P B A A B C
HIn : InAngle P A B C
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HPT : not (eq P T)
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq A B)
+++++
auto.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros A B C P T HPer HInangle HPT HConga HPerP HCop.
assert_diffs.
assert (HIn : InAngle P A B C).
idtac.
assert (HSumA : SumA P B A P B A A B C).
assert (HAcute : Acute P B A).
idtac.
assert (HOut : Out B P P).
idtac.
destruct (wipp P B A A B C P T) as [X [HX1 HX2]].
trivial.
destruct (wipp P B C C B A P T) as [Y [HY1 HY2]].
Perp.
assert (Coplanar A B C T).
idtac.
assert (~ Col A B C).
apply per_not_col.

*****
H4 : Coplanar A B C T
HX2 : Col P T X
HX1 : Out B A X
X : Tpoint
HOut : Out B P P
HAcute : Acute P B A
HSumA : SumA P B A P B A A B C
HIn : InAngle P A B C
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HPT : not (eq P T)
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq B C)
+++++
auto.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros A B C P T HPer HInangle HPT HConga HPerP HCop.
assert_diffs.
assert (HIn : InAngle P A B C).
idtac.
assert (HSumA : SumA P B A P B A A B C).
assert (HAcute : Acute P B A).
idtac.
assert (HOut : Out B P P).
idtac.
destruct (wipp P B A A B C P T) as [X [HX1 HX2]].
trivial.
destruct (wipp P B C C B A P T) as [Y [HY1 HY2]].
Perp.
assert (Coplanar A B C T).
idtac.
assert (~ Col A B C).
apply per_not_col.

*****
H4 : Coplanar A B C T
HX2 : Col P T X
HX1 : Out B A X
X : Tpoint
HOut : Out B P P
HAcute : Acute P B A
HSumA : SumA P B A P B A A B C
HIn : InAngle P A B C
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HPT : not (eq P T)
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per A B C
+++++
auto.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros A B C P T HPer HInangle HPT HConga HPerP HCop.
assert_diffs.
assert (HIn : InAngle P A B C).
idtac.
assert (HSumA : SumA P B A P B A A B C).
assert (HAcute : Acute P B A).
idtac.
assert (HOut : Out B P P).
idtac.
destruct (wipp P B A A B C P T) as [X [HX1 HX2]].
trivial.
destruct (wipp P B C C B A P T) as [Y [HY1 HY2]].
Perp.
assert (Coplanar A B C T).
idtac.
assert (~ Col A B C).

*****
H5 : not (Col A B C)
H4 : Coplanar A B C T
HX2 : Col P T X
HX1 : Out B A X
X : Tpoint
HOut : Out B P P
HAcute : Acute P B A
HSumA : SumA P B A P B A A B C
HIn : InAngle P A B C
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HPT : not (eq P T)
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar P B C T
+++++
idtac.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros A B C P T HPer HInangle HPT HConga HPerP HCop.
assert_diffs.
assert (HIn : InAngle P A B C).
idtac.
assert (HSumA : SumA P B A P B A A B C).
assert (HAcute : Acute P B A).
idtac.
assert (HOut : Out B P P).
idtac.
destruct (wipp P B A A B C P T) as [X [HX1 HX2]].
trivial.
destruct (wipp P B C C B A P T) as [Y [HY1 HY2]].
Perp.
assert (Coplanar A B C T).
idtac.
assert (~ Col A B C).
idtac.

*****
H5 : not (Col A B C)
H4 : Coplanar A B C T
HX2 : Col P T X
HX1 : Out B A X
X : Tpoint
HOut : Out B P P
HAcute : Acute P B A
HSumA : SumA P B A P B A A B C
HIn : InAngle P A B C
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HPT : not (eq P T)
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar P B C T
+++++
CopR.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros A B C P T HPer HInangle HPT HConga HPerP HCop.
assert_diffs.
assert (HIn : InAngle P A B C).
idtac.
assert (HSumA : SumA P B A P B A A B C).
assert (HAcute : Acute P B A).
idtac.
assert (HOut : Out B P P).
idtac.
destruct (wipp P B A A B C P T) as [X [HX1 HX2]].
trivial.
destruct (wipp P B C C B A P T) as [Y [HY1 HY2]].

*****
HY2 : Col P T Y
HY1 : Out B C Y
Y : Tpoint
HX2 : Col P T X
HX1 : Out B A X
X : Tpoint
HOut : Out B P P
HAcute : Acute P B A
HSumA : SumA P B A P B A A B C
HIn : InAngle P A B C
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HPT : not (eq P T)
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => ex (fun Y : Tpoint => and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
+++++
Perp.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros A B C P T HPer HInangle HPT HConga HPerP HCop.
assert_diffs.
assert (HIn : InAngle P A B C).
idtac.
assert (HSumA : SumA P B A P B A A B C).
assert (HAcute : Acute P B A).
idtac.
assert (HOut : Out B P P).
idtac.
destruct (wipp P B A A B C P T) as [X [HX1 HX2]].
trivial.
destruct (wipp P B C C B A P T) as [Y [HY1 HY2]].
Perp.

*****
HY2 : Col P T Y
HY1 : Out B C Y
Y : Tpoint
HX2 : Col P T X
HX1 : Out B A X
X : Tpoint
HOut : Out B P P
HAcute : Acute P B A
HSumA : SumA P B A P B A A B C
HIn : InAngle P A B C
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HPT : not (eq P T)
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => ex (fun Y : Tpoint => and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
+++++
exists X, Y.
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros A B C P T HPer HInangle HPT HConga HPerP HCop.
assert_diffs.
assert (HIn : InAngle P A B C).
idtac.
assert (HSumA : SumA P B A P B A A B C).
assert (HAcute : Acute P B A).
idtac.
assert (HOut : Out B P P).
idtac.
destruct (wipp P B A A B C P T) as [X [HX1 HX2]].
trivial.
destruct (wipp P B C C B A P T) as [Y [HY1 HY2]].
Perp.
exists X, Y.

*****
HY2 : Col P T Y
HY1 : Out B C Y
Y : Tpoint
HX2 : Col P T X
HX1 : Out B A X
X : Tpoint
HOut : Out B P P
HAcute : Acute P B A
HSumA : SumA P B A P B A A B C
HIn : InAngle P A B C
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HCop : Coplanar A B C P
HPerP : Per B P T
HConga : CongA P B A P B C
HPT : not (eq P T)
HInangle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
wipp : weak_inverse_projection_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))
+++++
repeat (split; Col).
-----
Lemma weak_inverse_projection_postulate__weak_tarski_s_parallel_postulate : weak_inverse_projection_postulate -> weak_tarski_s_parallel_postulate.
Proof.
intro wipp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).

*****

*****

+++++
Qed.
-----
End weak_inverse_projection_postulate_weak_tarski_s_parallel_postulate.
-----
