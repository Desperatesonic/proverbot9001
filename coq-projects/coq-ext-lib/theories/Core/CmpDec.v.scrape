Require Import Coq.Bool.Bool.
-----
Require Import Coq.Classes.RelationClasses.
-----
Require Import ExtLib.Tactics.Consider.
-----
Set Implicit Arguments.
-----
Set Strict Implicit.
-----
Class CmpDec (T : Type) (equ : T -> T -> Prop) (ltu : T -> T -> Prop) : Type :=\n{ cmp_dec : T -> T -> comparison }.
-----
Class CmpDec_Correct T (equ ltu : T -> T -> Prop) (ED : CmpDec equ ltu) : Prop :=\n{ cmp_dec_correct : forall x y : T, \n  match cmp_dec x y with\n    | Eq => equ x y\n    | Lt => ltu x y\n    | Gt => ltu y x\n  end }.
-----
Inductive cmp_case (P Q R : Prop) : comparison -> Prop :=\n| CaseEq : P -> cmp_case P Q R Eq\n| CaseLt : Q -> cmp_case P Q R Lt\n| CaseGt : R -> cmp_case P Q R Gt.
-----
Section pair.
-----
Variable T U : Type.
-----
Variables eqt ltt : T -> T -> Prop.
-----
Variables equ ltu : U -> U -> Prop.
-----
Definition eq_pair (a b : T * U) : Prop :=\n    eqt (fst a) (fst b) /\ equ (snd a) (snd b).
-----
Definition lt_pair (a b : T * U) : Prop :=\n    ltt (fst a) (fst b) \/ (eqt (fst a) (fst b) /\ ltu (snd a) (snd b)).
-----
Variable cdt : CmpDec eqt ltt.
-----
Variable cdu : CmpDec equ ltu.
-----
Instance CmpDec_pair : CmpDec eq_pair lt_pair :=\n  { cmp_dec := fun a b =>\n    let '(al,ar) := a in\n    let '(bl,br) := b in\n    match cmp_dec al bl with\n      | Eq => cmp_dec ar br \n      | x => x \n    end }.
-----
Variable cdtC : CmpDec_Correct cdt.
-----
Variable cduC : CmpDec_Correct cdu.
-----
Variable Symmetric_eqt : Symmetric eqt.
-----
Instance CmpDec_Correct_pair : CmpDec_Correct CmpDec_pair.
-----
Instance CmpDec_Correct_pair : CmpDec_Correct CmpDec_pair.

*****
Symmetric_eqt : Symmetric eqt
cduC : CmpDec_Correct cdu
cdtC : CmpDec_Correct cdt
cdu : CmpDec equ ltu
cdt : CmpDec eqt ltt
equ,ltu : forall (_ : U) (_ : U), Prop
eqt,ltt : forall (_ : T) (_ : T), Prop
T,U : Type
*****
CmpDec_Correct CmpDec_pair
+++++
Proof.
-----
Instance CmpDec_Correct_pair : CmpDec_Correct CmpDec_pair.
Proof.

*****
Symmetric_eqt : Symmetric eqt
cduC : CmpDec_Correct cdu
cdtC : CmpDec_Correct cdt
cdu : CmpDec equ ltu
cdt : CmpDec eqt ltt
equ,ltu : forall (_ : U) (_ : U), Prop
eqt,ltt : forall (_ : T) (_ : T), Prop
T,U : Type
*****
CmpDec_Correct CmpDec_pair
+++++
constructor.
-----
Instance CmpDec_Correct_pair : CmpDec_Correct CmpDec_pair.
Proof.
constructor.

*****
Symmetric_eqt : Symmetric eqt
cduC : CmpDec_Correct cdu
cdtC : CmpDec_Correct cdt
cdu : CmpDec equ ltu
cdt : CmpDec eqt ltt
equ,ltu : forall (_ : U) (_ : U), Prop
eqt,ltt : forall (_ : T) (_ : T), Prop
T,U : Type
*****
forall x y : prod T U, match cmp_dec x y with | Eq => eq_pair x y | Lt => lt_pair x y | Gt => lt_pair y x end
+++++
destruct x.
-----
Instance CmpDec_Correct_pair : CmpDec_Correct CmpDec_pair.
Proof.
constructor.
destruct x.

*****
u : U
t : T
Symmetric_eqt : Symmetric eqt
cduC : CmpDec_Correct cdu
cdtC : CmpDec_Correct cdt
cdu : CmpDec equ ltu
cdt : CmpDec eqt ltt
equ,ltu : forall (_ : U) (_ : U), Prop
eqt,ltt : forall (_ : T) (_ : T), Prop
T,U : Type
*****
forall y : prod T U, match cmp_dec (pair t u) y with | Eq => eq_pair (pair t u) y | Lt => lt_pair (pair t u) y | Gt => lt_pair y (pair t u) end
+++++
destruct y.
-----
Instance CmpDec_Correct_pair : CmpDec_Correct CmpDec_pair.
Proof.
constructor.
destruct x.
destruct y.

*****
u0 : U
t0 : T
u : U
t : T
Symmetric_eqt : Symmetric eqt
cduC : CmpDec_Correct cdu
cdtC : CmpDec_Correct cdt
cdu : CmpDec equ ltu
cdt : CmpDec eqt ltt
equ,ltu : forall (_ : U) (_ : U), Prop
eqt,ltt : forall (_ : T) (_ : T), Prop
T,U : Type
*****
match cmp_dec (pair t u) (pair t0 u0) with | Eq => eq_pair (pair t u) (pair t0 u0) | Lt => lt_pair (pair t u) (pair t0 u0) | Gt => lt_pair (pair t0 u0) (pair t u) end
+++++
unfold eq_pair.
-----
Instance CmpDec_Correct_pair : CmpDec_Correct CmpDec_pair.
Proof.
constructor.
destruct x.
destruct y.
unfold eq_pair.

*****
u0 : U
t0 : T
u : U
t : T
Symmetric_eqt : Symmetric eqt
cduC : CmpDec_Correct cdu
cdtC : CmpDec_Correct cdt
cdu : CmpDec equ ltu
cdt : CmpDec eqt ltt
equ,ltu : forall (_ : U) (_ : U), Prop
eqt,ltt : forall (_ : T) (_ : T), Prop
T,U : Type
*****
match cmp_dec (pair t u) (pair t0 u0) with | Eq => and (eqt (fst (pair t u)) (fst (pair t0 u0))) (equ (snd (pair t u)) (snd (pair t0 u0))) | Lt => lt_pair (pair t u) (pair t0 u0) | Gt => lt_pair (pair t0 u0) (pair t u) end
+++++
unfold lt_pair.
-----
Instance CmpDec_Correct_pair : CmpDec_Correct CmpDec_pair.
Proof.
constructor.
destruct x.
destruct y.
unfold eq_pair.
unfold lt_pair.

*****
u0 : U
t0 : T
u : U
t : T
Symmetric_eqt : Symmetric eqt
cduC : CmpDec_Correct cdu
cdtC : CmpDec_Correct cdt
cdu : CmpDec equ ltu
cdt : CmpDec eqt ltt
equ,ltu : forall (_ : U) (_ : U), Prop
eqt,ltt : forall (_ : T) (_ : T), Prop
T,U : Type
*****
match cmp_dec (pair t u) (pair t0 u0) with | Eq => and (eqt (fst (pair t u)) (fst (pair t0 u0))) (equ (snd (pair t u)) (snd (pair t0 u0))) | Lt => or (ltt (fst (pair t u)) (fst (pair t0 u0))) (and (eqt (fst (pair t u)) (fst (pair t0 u0))) (ltu (snd (pair t u)) (snd (pair t0 u0)))) | Gt => or (ltt (fst (pair t0 u0)) (fst (pair t u))) (and (eqt (fst (pair t0 u0)) (fst (pair t u))) (ltu (snd (pair t0 u0)) (snd (pair t u)))) end
+++++
simpl in *.
-----
Instance CmpDec_Correct_pair : CmpDec_Correct CmpDec_pair.
Proof.
constructor.
destruct x.
destruct y.
unfold eq_pair.
unfold lt_pair.
simpl in *.

*****
u0 : U
t0 : T
u : U
t : T
Symmetric_eqt : Symmetric eqt
cduC : CmpDec_Correct cdu
cdtC : CmpDec_Correct cdt
cdu : CmpDec equ ltu
cdt : CmpDec eqt ltt
equ,ltu : forall (_ : U) (_ : U), Prop
eqt,ltt : forall (_ : T) (_ : T), Prop
T,U : Type
*****
match match cmp_dec t t0 with | Eq => cmp_dec u u0 | Lt => Lt | Gt => Gt end with | Eq => and (eqt t t0) (equ u u0) | Lt => or (ltt t t0) (and (eqt t t0) (ltu u u0)) | Gt => or (ltt t0 t) (and (eqt t0 t) (ltu u0 u)) end
+++++
generalize (cmp_dec_correct t t0).
-----
Instance CmpDec_Correct_pair : CmpDec_Correct CmpDec_pair.
Proof.
constructor.
destruct x.
destruct y.
unfold eq_pair.
unfold lt_pair.
simpl in *.
generalize (cmp_dec_correct t t0).

*****
u0 : U
t0 : T
u : U
t : T
Symmetric_eqt : Symmetric eqt
cduC : CmpDec_Correct cdu
cdtC : CmpDec_Correct cdt
cdu : CmpDec equ ltu
cdt : CmpDec eqt ltt
equ,ltu : forall (_ : U) (_ : U), Prop
eqt,ltt : forall (_ : T) (_ : T), Prop
T,U : Type
*****
forall _ : match cmp_dec t t0 with | Eq => eqt t t0 | Lt => ltt t t0 | Gt => ltt t0 t end, match match cmp_dec t t0 with | Eq => cmp_dec u u0 | Lt => Lt | Gt => Gt end with | Eq => and (eqt t t0) (equ u u0) | Lt => or (ltt t t0) (and (eqt t t0) (ltu u u0)) | Gt => or (ltt t0 t) (and (eqt t0 t) (ltu u0 u)) end
+++++
destruct (cmp_dec t t0).
-----
Instance CmpDec_Correct_pair : CmpDec_Correct CmpDec_pair.
Proof.
constructor.
destruct x.
destruct y.
unfold eq_pair.
unfold lt_pair.
simpl in *.
generalize (cmp_dec_correct t t0).
destruct (cmp_dec t t0).

*****
u0 : U
t0 : T
u : U
t : T
Symmetric_eqt : Symmetric eqt
cduC : CmpDec_Correct cdu
cdtC : CmpDec_Correct cdt
cdu : CmpDec equ ltu
cdt : CmpDec eqt ltt
equ,ltu : forall (_ : U) (_ : U), Prop
eqt,ltt : forall (_ : T) (_ : T), Prop
T,U : Type
*****
forall _ : eqt t t0, match cmp_dec u u0 with | Eq => and (eqt t t0) (equ u u0) | Lt => or (ltt t t0) (and (eqt t t0) (ltu u u0)) | Gt => or (ltt t0 t) (and (eqt t0 t) (ltu u0 u)) end
+++++
simpl.
-----
Instance CmpDec_Correct_pair : CmpDec_Correct CmpDec_pair.
Proof.
constructor.
destruct x.
destruct y.
unfold eq_pair.
unfold lt_pair.
simpl in *.
generalize (cmp_dec_correct t t0).
destruct (cmp_dec t t0).
simpl.

*****
u0 : U
t0 : T
u : U
t : T
Symmetric_eqt : Symmetric eqt
cduC : CmpDec_Correct cdu
cdtC : CmpDec_Correct cdt
cdu : CmpDec equ ltu
cdt : CmpDec eqt ltt
equ,ltu : forall (_ : U) (_ : U), Prop
eqt,ltt : forall (_ : T) (_ : T), Prop
T,U : Type
*****
forall _ : eqt t t0, match cmp_dec u u0 with | Eq => and (eqt t t0) (equ u u0) | Lt => or (ltt t t0) (and (eqt t t0) (ltu u u0)) | Gt => or (ltt t0 t) (and (eqt t0 t) (ltu u0 u)) end
+++++
intros.
-----
Instance CmpDec_Correct_pair : CmpDec_Correct CmpDec_pair.
Proof.
constructor.
destruct x.
destruct y.
unfold eq_pair.
unfold lt_pair.
simpl in *.
generalize (cmp_dec_correct t t0).
destruct (cmp_dec t t0).
simpl.
intros.

*****
H : eqt t t0
u0 : U
t0 : T
u : U
t : T
Symmetric_eqt : Symmetric eqt
cduC : CmpDec_Correct cdu
cdtC : CmpDec_Correct cdt
cdu : CmpDec equ ltu
cdt : CmpDec eqt ltt
equ,ltu : forall (_ : U) (_ : U), Prop
eqt,ltt : forall (_ : T) (_ : T), Prop
T,U : Type
*****
match cmp_dec u u0 with | Eq => and (eqt t t0) (equ u u0) | Lt => or (ltt t t0) (and (eqt t t0) (ltu u u0)) | Gt => or (ltt t0 t) (and (eqt t0 t) (ltu u0 u)) end
+++++
auto.
-----
Instance CmpDec_Correct_pair : CmpDec_Correct CmpDec_pair.
Proof.
constructor.
destruct x.
destruct y.
unfold eq_pair.
unfold lt_pair.
simpl in *.
generalize (cmp_dec_correct t t0).
destruct (cmp_dec t t0).
simpl.
intros.
auto.

*****
H : eqt t t0
u0 : U
t0 : T
u : U
t : T
Symmetric_eqt : Symmetric eqt
cduC : CmpDec_Correct cdu
cdtC : CmpDec_Correct cdt
cdu : CmpDec equ ltu
cdt : CmpDec eqt ltt
equ,ltu : forall (_ : U) (_ : U), Prop
eqt,ltt : forall (_ : T) (_ : T), Prop
T,U : Type
*****
match cmp_dec u u0 with | Eq => and (eqt t t0) (equ u u0) | Lt => or (ltt t t0) (and (eqt t t0) (ltu u u0)) | Gt => or (ltt t0 t) (and (eqt t0 t) (ltu u0 u)) end
+++++
generalize (cmp_dec_correct u u0).
-----
Instance CmpDec_Correct_pair : CmpDec_Correct CmpDec_pair.
Proof.
constructor.
destruct x.
destruct y.
unfold eq_pair.
unfold lt_pair.
simpl in *.
generalize (cmp_dec_correct t t0).
destruct (cmp_dec t t0).
simpl.
intros.
auto.
generalize (cmp_dec_correct u u0).

*****
H : eqt t t0
u0 : U
t0 : T
u : U
t : T
Symmetric_eqt : Symmetric eqt
cduC : CmpDec_Correct cdu
cdtC : CmpDec_Correct cdt
cdu : CmpDec equ ltu
cdt : CmpDec eqt ltt
equ,ltu : forall (_ : U) (_ : U), Prop
eqt,ltt : forall (_ : T) (_ : T), Prop
T,U : Type
*****
forall _ : match cmp_dec u u0 with | Eq => equ u u0 | Lt => ltu u u0 | Gt => ltu u0 u end, match cmp_dec u u0 with | Eq => and (eqt t t0) (equ u u0) | Lt => or (ltt t t0) (and (eqt t t0) (ltu u u0)) | Gt => or (ltt t0 t) (and (eqt t0 t) (ltu u0 u)) end
+++++
destruct (cmp_dec u u0).
-----
Instance CmpDec_Correct_pair : CmpDec_Correct CmpDec_pair.
Proof.
constructor.
destruct x.
destruct y.
unfold eq_pair.
unfold lt_pair.
simpl in *.
generalize (cmp_dec_correct t t0).
destruct (cmp_dec t t0).
simpl.
intros.
auto.
generalize (cmp_dec_correct u u0).
destruct (cmp_dec u u0).

*****
H : eqt t t0
u0 : U
t0 : T
u : U
t : T
Symmetric_eqt : Symmetric eqt
cduC : CmpDec_Correct cdu
cdtC : CmpDec_Correct cdt
cdu : CmpDec equ ltu
cdt : CmpDec eqt ltt
equ,ltu : forall (_ : U) (_ : U), Prop
eqt,ltt : forall (_ : T) (_ : T), Prop
T,U : Type
*****
forall _ : equ u u0, and (eqt t t0) (equ u u0)
+++++
simpl.
-----
Instance CmpDec_Correct_pair : CmpDec_Correct CmpDec_pair.
Proof.
constructor.
destruct x.
destruct y.
unfold eq_pair.
unfold lt_pair.
simpl in *.
generalize (cmp_dec_correct t t0).
destruct (cmp_dec t t0).
simpl.
intros.
auto.
generalize (cmp_dec_correct u u0).
destruct (cmp_dec u u0).
simpl.

*****
H : eqt t t0
u0 : U
t0 : T
u : U
t : T
Symmetric_eqt : Symmetric eqt
cduC : CmpDec_Correct cdu
cdtC : CmpDec_Correct cdt
cdu : CmpDec equ ltu
cdt : CmpDec eqt ltt
equ,ltu : forall (_ : U) (_ : U), Prop
eqt,ltt : forall (_ : T) (_ : T), Prop
T,U : Type
*****
forall _ : equ u u0, and (eqt t t0) (equ u u0)
+++++
intros.
-----
Instance CmpDec_Correct_pair : CmpDec_Correct CmpDec_pair.
Proof.
constructor.
destruct x.
destruct y.
unfold eq_pair.
unfold lt_pair.
simpl in *.
generalize (cmp_dec_correct t t0).
destruct (cmp_dec t t0).
simpl.
intros.
auto.
generalize (cmp_dec_correct u u0).
destruct (cmp_dec u u0).
simpl.
intros.

*****
H0 : equ u u0
H : eqt t t0
u0 : U
t0 : T
u : U
t : T
Symmetric_eqt : Symmetric eqt
cduC : CmpDec_Correct cdu
cdtC : CmpDec_Correct cdt
cdu : CmpDec equ ltu
cdt : CmpDec eqt ltt
equ,ltu : forall (_ : U) (_ : U), Prop
eqt,ltt : forall (_ : T) (_ : T), Prop
T,U : Type
*****
and (eqt t t0) (equ u u0)
+++++
auto.
-----
Instance CmpDec_Correct_pair : CmpDec_Correct CmpDec_pair.
Proof.
constructor.
destruct x.
destruct y.
unfold eq_pair.
unfold lt_pair.
simpl in *.
generalize (cmp_dec_correct t t0).
destruct (cmp_dec t t0).
simpl.
intros.
auto.
generalize (cmp_dec_correct u u0).
destruct (cmp_dec u u0).

*****
H : eqt t t0
u0 : U
t0 : T
u : U
t : T
Symmetric_eqt : Symmetric eqt
cduC : CmpDec_Correct cdu
cdtC : CmpDec_Correct cdt
cdu : CmpDec equ ltu
cdt : CmpDec eqt ltt
equ,ltu : forall (_ : U) (_ : U), Prop
eqt,ltt : forall (_ : T) (_ : T), Prop
T,U : Type
*****
forall _ : ltu u u0, or (ltt t t0) (and (eqt t t0) (ltu u u0))
+++++
simpl.
-----
Instance CmpDec_Correct_pair : CmpDec_Correct CmpDec_pair.
Proof.
constructor.
destruct x.
destruct y.
unfold eq_pair.
unfold lt_pair.
simpl in *.
generalize (cmp_dec_correct t t0).
destruct (cmp_dec t t0).
simpl.
intros.
auto.
generalize (cmp_dec_correct u u0).
destruct (cmp_dec u u0).
simpl.

*****
H : eqt t t0
u0 : U
t0 : T
u : U
t : T
Symmetric_eqt : Symmetric eqt
cduC : CmpDec_Correct cdu
cdtC : CmpDec_Correct cdt
cdu : CmpDec equ ltu
cdt : CmpDec eqt ltt
equ,ltu : forall (_ : U) (_ : U), Prop
eqt,ltt : forall (_ : T) (_ : T), Prop
T,U : Type
*****
forall _ : ltu u u0, or (ltt t t0) (and (eqt t t0) (ltu u u0))
+++++
intros.
-----
Instance CmpDec_Correct_pair : CmpDec_Correct CmpDec_pair.
Proof.
constructor.
destruct x.
destruct y.
unfold eq_pair.
unfold lt_pair.
simpl in *.
generalize (cmp_dec_correct t t0).
destruct (cmp_dec t t0).
simpl.
intros.
auto.
generalize (cmp_dec_correct u u0).
destruct (cmp_dec u u0).
simpl.
intros.

*****
H0 : ltu u u0
H : eqt t t0
u0 : U
t0 : T
u : U
t : T
Symmetric_eqt : Symmetric eqt
cduC : CmpDec_Correct cdu
cdtC : CmpDec_Correct cdt
cdu : CmpDec equ ltu
cdt : CmpDec eqt ltt
equ,ltu : forall (_ : U) (_ : U), Prop
eqt,ltt : forall (_ : T) (_ : T), Prop
T,U : Type
*****
or (ltt t t0) (and (eqt t t0) (ltu u u0))
+++++
auto.
-----
Instance CmpDec_Correct_pair : CmpDec_Correct CmpDec_pair.
Proof.
constructor.
destruct x.
destruct y.
unfold eq_pair.
unfold lt_pair.
simpl in *.
generalize (cmp_dec_correct t t0).
destruct (cmp_dec t t0).
simpl.
intros.
auto.
generalize (cmp_dec_correct u u0).
destruct (cmp_dec u u0).

*****
H : eqt t t0
u0 : U
t0 : T
u : U
t : T
Symmetric_eqt : Symmetric eqt
cduC : CmpDec_Correct cdu
cdtC : CmpDec_Correct cdt
cdu : CmpDec equ ltu
cdt : CmpDec eqt ltt
equ,ltu : forall (_ : U) (_ : U), Prop
eqt,ltt : forall (_ : T) (_ : T), Prop
T,U : Type
*****
forall _ : ltu u0 u, or (ltt t0 t) (and (eqt t0 t) (ltu u0 u))
+++++
simpl.
-----
Instance CmpDec_Correct_pair : CmpDec_Correct CmpDec_pair.
Proof.
constructor.
destruct x.
destruct y.
unfold eq_pair.
unfold lt_pair.
simpl in *.
generalize (cmp_dec_correct t t0).
destruct (cmp_dec t t0).
simpl.
intros.
auto.
generalize (cmp_dec_correct u u0).
destruct (cmp_dec u u0).
simpl.

*****
H : eqt t t0
u0 : U
t0 : T
u : U
t : T
Symmetric_eqt : Symmetric eqt
cduC : CmpDec_Correct cdu
cdtC : CmpDec_Correct cdt
cdu : CmpDec equ ltu
cdt : CmpDec eqt ltt
equ,ltu : forall (_ : U) (_ : U), Prop
eqt,ltt : forall (_ : T) (_ : T), Prop
T,U : Type
*****
forall _ : ltu u0 u, or (ltt t0 t) (and (eqt t0 t) (ltu u0 u))
+++++
intros.
-----
Instance CmpDec_Correct_pair : CmpDec_Correct CmpDec_pair.
Proof.
constructor.
destruct x.
destruct y.
unfold eq_pair.
unfold lt_pair.
simpl in *.
generalize (cmp_dec_correct t t0).
destruct (cmp_dec t t0).
simpl.
intros.
auto.
generalize (cmp_dec_correct u u0).
destruct (cmp_dec u u0).
simpl.
intros.

*****
H0 : ltu u0 u
H : eqt t t0
u0 : U
t0 : T
u : U
t : T
Symmetric_eqt : Symmetric eqt
cduC : CmpDec_Correct cdu
cdtC : CmpDec_Correct cdt
cdu : CmpDec equ ltu
cdt : CmpDec eqt ltt
equ,ltu : forall (_ : U) (_ : U), Prop
eqt,ltt : forall (_ : T) (_ : T), Prop
T,U : Type
*****
or (ltt t0 t) (and (eqt t0 t) (ltu u0 u))
+++++
auto.
-----
Instance CmpDec_Correct_pair : CmpDec_Correct CmpDec_pair.
Proof.
constructor.
destruct x.
destruct y.
unfold eq_pair.
unfold lt_pair.
simpl in *.
generalize (cmp_dec_correct t t0).
destruct (cmp_dec t t0).

*****
u0 : U
t0 : T
u : U
t : T
Symmetric_eqt : Symmetric eqt
cduC : CmpDec_Correct cdu
cdtC : CmpDec_Correct cdt
cdu : CmpDec equ ltu
cdt : CmpDec eqt ltt
equ,ltu : forall (_ : U) (_ : U), Prop
eqt,ltt : forall (_ : T) (_ : T), Prop
T,U : Type
*****
forall _ : ltt t t0, or (ltt t t0) (and (eqt t t0) (ltu u u0))
+++++
simpl.
-----
Instance CmpDec_Correct_pair : CmpDec_Correct CmpDec_pair.
Proof.
constructor.
destruct x.
destruct y.
unfold eq_pair.
unfold lt_pair.
simpl in *.
generalize (cmp_dec_correct t t0).
destruct (cmp_dec t t0).
simpl.

*****
u0 : U
t0 : T
u : U
t : T
Symmetric_eqt : Symmetric eqt
cduC : CmpDec_Correct cdu
cdtC : CmpDec_Correct cdt
cdu : CmpDec equ ltu
cdt : CmpDec eqt ltt
equ,ltu : forall (_ : U) (_ : U), Prop
eqt,ltt : forall (_ : T) (_ : T), Prop
T,U : Type
*****
forall _ : ltt t t0, or (ltt t t0) (and (eqt t t0) (ltu u u0))
+++++
intros.
-----
Instance CmpDec_Correct_pair : CmpDec_Correct CmpDec_pair.
Proof.
constructor.
destruct x.
destruct y.
unfold eq_pair.
unfold lt_pair.
simpl in *.
generalize (cmp_dec_correct t t0).
destruct (cmp_dec t t0).
simpl.
intros.

*****
H : ltt t t0
u0 : U
t0 : T
u : U
t : T
Symmetric_eqt : Symmetric eqt
cduC : CmpDec_Correct cdu
cdtC : CmpDec_Correct cdt
cdu : CmpDec equ ltu
cdt : CmpDec eqt ltt
equ,ltu : forall (_ : U) (_ : U), Prop
eqt,ltt : forall (_ : T) (_ : T), Prop
T,U : Type
*****
or (ltt t t0) (and (eqt t t0) (ltu u u0))
+++++
auto.
-----
Instance CmpDec_Correct_pair : CmpDec_Correct CmpDec_pair.
Proof.
constructor.
destruct x.
destruct y.
unfold eq_pair.
unfold lt_pair.
simpl in *.
generalize (cmp_dec_correct t t0).
destruct (cmp_dec t t0).

*****
u0 : U
t0 : T
u : U
t : T
Symmetric_eqt : Symmetric eqt
cduC : CmpDec_Correct cdu
cdtC : CmpDec_Correct cdt
cdu : CmpDec equ ltu
cdt : CmpDec eqt ltt
equ,ltu : forall (_ : U) (_ : U), Prop
eqt,ltt : forall (_ : T) (_ : T), Prop
T,U : Type
*****
forall _ : ltt t0 t, or (ltt t0 t) (and (eqt t0 t) (ltu u0 u))
+++++
simpl.
-----
Instance CmpDec_Correct_pair : CmpDec_Correct CmpDec_pair.
Proof.
constructor.
destruct x.
destruct y.
unfold eq_pair.
unfold lt_pair.
simpl in *.
generalize (cmp_dec_correct t t0).
destruct (cmp_dec t t0).
simpl.

*****
u0 : U
t0 : T
u : U
t : T
Symmetric_eqt : Symmetric eqt
cduC : CmpDec_Correct cdu
cdtC : CmpDec_Correct cdt
cdu : CmpDec equ ltu
cdt : CmpDec eqt ltt
equ,ltu : forall (_ : U) (_ : U), Prop
eqt,ltt : forall (_ : T) (_ : T), Prop
T,U : Type
*****
forall _ : ltt t0 t, or (ltt t0 t) (and (eqt t0 t) (ltu u0 u))
+++++
intros.
-----
Instance CmpDec_Correct_pair : CmpDec_Correct CmpDec_pair.
Proof.
constructor.
destruct x.
destruct y.
unfold eq_pair.
unfold lt_pair.
simpl in *.
generalize (cmp_dec_correct t t0).
destruct (cmp_dec t t0).
simpl.
intros.

*****
H : ltt t0 t
u0 : U
t0 : T
u : U
t : T
Symmetric_eqt : Symmetric eqt
cduC : CmpDec_Correct cdu
cdtC : CmpDec_Correct cdt
cdu : CmpDec equ ltu
cdt : CmpDec eqt ltt
equ,ltu : forall (_ : U) (_ : U), Prop
eqt,ltt : forall (_ : T) (_ : T), Prop
T,U : Type
*****
or (ltt t0 t) (and (eqt t0 t) (ltu u0 u))
+++++
auto.
-----
Instance CmpDec_Correct_pair : CmpDec_Correct CmpDec_pair.
Proof.
constructor.
destruct x.
destruct y.
unfold eq_pair.
unfold lt_pair.
simpl in *.
generalize (cmp_dec_correct t t0).
destruct (cmp_dec t t0).

*****

*****

+++++
Qed.
-----
End pair.
-----
