Require Export GeoCoq.Tarski_dev.Annexes.midpoint_theorems.
-----
Require Export GeoCoq.Highschool.varignon.
-----
Section GravityCenter.
-----
Context `{TE:Tarski_euclidean}.
-----
Lemma intersection_two_medians_exist :\nforall A B C I J,\n ~Col A B C ->\n Midpoint I B C -> Midpoint J A C ->\n exists G, Col G A I /\ Col G B J.
-----
Lemma intersection_two_medians_exist : forall A B C I J, ~Col A B C -> Midpoint I B C -> Midpoint J A C -> exists G, Col G A I /\\ Col G B J.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C I J : Tpoint) (_ : not (Col A B C)) (_ : Midpoint I B C) (_ : Midpoint J A C), ex (fun G : Tpoint => and (Col G A I) (Col G B J))
+++++
Proof with finish.
-----
Lemma intersection_two_medians_exist : forall A B C I J, ~Col A B C -> Midpoint I B C -> Midpoint J A C -> exists G, Col G A I /\\ Col G B J.
Proof with finish.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C I J : Tpoint) (_ : not (Col A B C)) (_ : Midpoint I B C) (_ : Midpoint J A C), ex (fun G : Tpoint => and (Col G A I) (Col G B J))
+++++
intros.
-----
Lemma intersection_two_medians_exist : forall A B C I J, ~Col A B C -> Midpoint I B C -> Midpoint J A C -> exists G, Col G A I /\\ Col G B J.
Proof with finish.
intros.

*****
H1 : Midpoint J A C
H0 : Midpoint I B C
H : not (Col A B C)
A,B,C,I,J : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun G : Tpoint => and (Col G A I) (Col G B J))
+++++
assert_bets.
-----
Lemma intersection_two_medians_exist : forall A B C I J, ~Col A B C -> Midpoint I B C -> Midpoint J A C -> exists G, Col G A I /\\ Col G B J.
Proof with finish.
intros.
assert_bets.

*****
H3 : Bet B I C
H2 : Bet A J C
H1 : Midpoint J A C
H0 : Midpoint I B C
H : not (Col A B C)
A,B,C,I,J : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun G : Tpoint => and (Col G A I) (Col G B J))
+++++
elim (inner_pasch A B C J I)...
-----
Lemma intersection_two_medians_exist : forall A B C I J, ~Col A B C -> Midpoint I B C -> Midpoint J A C -> exists G, Col G A I /\\ Col G B J.
Proof with finish.
intros.
assert_bets.
elim (inner_pasch A B C J I)...

*****
H3 : Bet B I C
H2 : Bet A J C
H1 : Midpoint J A C
H0 : Midpoint I B C
H : not (Col A B C)
A,B,C,I,J : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (x : Tpoint) (_ : and (Bet J x B) (Bet I x A)), ex (fun G : Tpoint => and (Col G A I) (Col G B J))
+++++
intro G;intros.
-----
Lemma intersection_two_medians_exist : forall A B C I J, ~Col A B C -> Midpoint I B C -> Midpoint J A C -> exists G, Col G A I /\\ Col G B J.
Proof with finish.
intros.
assert_bets.
elim (inner_pasch A B C J I)...
intro G;intros.

*****
H4 : and (Bet J G B) (Bet I G A)
G : Tpoint
H3 : Bet B I C
H2 : Bet A J C
H1 : Midpoint J A C
H0 : Midpoint I B C
H : not (Col A B C)
A,B,C,I,J : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun G : Tpoint => and (Col G A I) (Col G B J))
+++++
exists G.
-----
Lemma intersection_two_medians_exist : forall A B C I J, ~Col A B C -> Midpoint I B C -> Midpoint J A C -> exists G, Col G A I /\\ Col G B J.
Proof with finish.
intros.
assert_bets.
elim (inner_pasch A B C J I)...
intro G;intros.
exists G.

*****
H4 : and (Bet J G B) (Bet I G A)
G : Tpoint
H3 : Bet B I C
H2 : Bet A J C
H1 : Midpoint J A C
H0 : Midpoint I B C
H : not (Col A B C)
A,B,C,I,J : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col G A I) (Col G B J)
+++++
spliter;assert_cols;split...
-----
Lemma intersection_two_medians_exist : forall A B C I J, ~Col A B C -> Midpoint I B C -> Midpoint J A C -> exists G, Col G A I /\\ Col G B J.
Proof with finish.
intros.
assert_bets.
elim (inner_pasch A B C J I)...
intro G;intros.
exists G.
spliter;assert_cols;split...

*****

*****

+++++
Qed.
-----
Lemma intersection_two_medians_exist_unique :\nforall A B C I J,\n ~Col A B C ->\n Midpoint I B C -> Midpoint J A C ->\n exists! G, Col G A I /\ Col G B J.
-----
Lemma intersection_two_medians_exist_unique : forall A B C I J, ~Col A B C -> Midpoint I B C -> Midpoint J A C -> exists! G, Col G A I /\\ Col G B J.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C I J : Tpoint) (_ : not (Col A B C)) (_ : Midpoint I B C) (_ : Midpoint J A C), ex (unique (fun G : Tpoint => and (Col G A I) (Col G B J)))
+++++
Proof with finish.
-----
Lemma intersection_two_medians_exist_unique : forall A B C I J, ~Col A B C -> Midpoint I B C -> Midpoint J A C -> exists! G, Col G A I /\\ Col G B J.
Proof with finish.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C I J : Tpoint) (_ : not (Col A B C)) (_ : Midpoint I B C) (_ : Midpoint J A C), ex (unique (fun G : Tpoint => and (Col G A I) (Col G B J)))
+++++
intros.
-----
Lemma intersection_two_medians_exist_unique : forall A B C I J, ~Col A B C -> Midpoint I B C -> Midpoint J A C -> exists! G, Col G A I /\\ Col G B J.
Proof with finish.
intros.

*****
H1 : Midpoint J A C
H0 : Midpoint I B C
H : not (Col A B C)
A,B,C,I,J : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (unique (fun G : Tpoint => and (Col G A I) (Col G B J)))
+++++
elim (intersection_two_medians_exist A B C I J H H0 H1); intros G HG; spliter.
-----
Lemma intersection_two_medians_exist_unique : forall A B C I J, ~Col A B C -> Midpoint I B C -> Midpoint J A C -> exists! G, Col G A I /\\ Col G B J.
Proof with finish.
intros.
elim (intersection_two_medians_exist A B C I J H H0 H1); intros G HG; spliter.

*****
H3 : Col G B J
H2 : Col G A I
G : Tpoint
H1 : Midpoint J A C
H0 : Midpoint I B C
H : not (Col A B C)
A,B,C,I,J : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (unique (fun G : Tpoint => and (Col G A I) (Col G B J)))
+++++
exists G.
-----
Lemma intersection_two_medians_exist_unique : forall A B C I J, ~Col A B C -> Midpoint I B C -> Midpoint J A C -> exists! G, Col G A I /\\ Col G B J.
Proof with finish.
intros.
elim (intersection_two_medians_exist A B C I J H H0 H1); intros G HG; spliter.
exists G.

*****
H3 : Col G B J
H2 : Col G A I
G : Tpoint
H1 : Midpoint J A C
H0 : Midpoint I B C
H : not (Col A B C)
A,B,C,I,J : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
unique (fun G : Tpoint => and (Col G A I) (Col G B J)) G
+++++
unfold unique.
-----
Lemma intersection_two_medians_exist_unique : forall A B C I J, ~Col A B C -> Midpoint I B C -> Midpoint J A C -> exists! G, Col G A I /\\ Col G B J.
Proof with finish.
intros.
elim (intersection_two_medians_exist A B C I J H H0 H1); intros G HG; spliter.
exists G.
unfold unique.

*****
H3 : Col G B J
H2 : Col G A I
G : Tpoint
H1 : Midpoint J A C
H0 : Midpoint I B C
H : not (Col A B C)
A,B,C,I,J : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (and (Col G A I) (Col G B J)) (forall (x' : Tpoint) (_ : and (Col x' A I) (Col x' B J)), eq G x')
+++++
assert_all.
-----
Lemma intersection_two_medians_exist_unique : forall A B C I J, ~Col A B C -> Midpoint I B C -> Midpoint J A C -> exists! G, Col G A I /\\ Col G B J.
Proof with finish.
intros.
elim (intersection_two_medians_exist A B C I J H H0 H1); intros G HG; spliter.
exists G.
unfold unique.
assert_all.

*****
H48 : Cong C I I B
H47 : Cong C J J A
H9 : not (eq I C)
H8 : not (eq I B)
H6 : not (eq J C)
H3 : not (eq J A)
H7 : not (eq A C)
H4 : not (eq B C)
H5 : not (eq A B)
H23 : Col B I C
H28 : Col A J C
H33 : Col B J G
H38 : Col A I G
G : Tpoint
H1 : Midpoint J A C
H0 : Midpoint I B C
H : not (Col A B C)
A,B,C,I,J : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (and (Col G A I) (Col G B J)) (forall (x' : Tpoint) (_ : and (Col x' A I) (Col x' B J)), eq G x')
+++++
repeat split...
-----
Lemma intersection_two_medians_exist_unique : forall A B C I J, ~Col A B C -> Midpoint I B C -> Midpoint J A C -> exists! G, Col G A I /\\ Col G B J.
Proof with finish.
intros.
elim (intersection_two_medians_exist A B C I J H H0 H1); intros G HG; spliter.
exists G.
unfold unique.
assert_all.
repeat split...

*****
H48 : Cong C I I B
H47 : Cong C J J A
H9 : not (eq I C)
H8 : not (eq I B)
H6 : not (eq J C)
H3 : not (eq J A)
H7 : not (eq A C)
H4 : not (eq B C)
H5 : not (eq A B)
H23 : Col B I C
H28 : Col A J C
H33 : Col B J G
H38 : Col A I G
G : Tpoint
H1 : Midpoint J A C
H0 : Midpoint I B C
H : not (Col A B C)
A,B,C,I,J : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (x' : Tpoint) (_ : and (Col x' A I) (Col x' B J)), eq G x'
+++++
intros G' HG'; spliter.
-----
Lemma intersection_two_medians_exist_unique : forall A B C I J, ~Col A B C -> Midpoint I B C -> Midpoint J A C -> exists! G, Col G A I /\\ Col G B J.
Proof with finish.
intros.
elim (intersection_two_medians_exist A B C I J H H0 H1); intros G HG; spliter.
exists G.
unfold unique.
assert_all.
repeat split...
intros G' HG'; spliter.

*****
H10 : Col G' B J
H2 : Col G' A I
G' : Tpoint
H48 : Cong C I I B
H47 : Cong C J J A
H9 : not (eq I C)
H8 : not (eq I B)
H6 : not (eq J C)
H3 : not (eq J A)
H7 : not (eq A C)
H4 : not (eq B C)
H5 : not (eq A B)
H23 : Col B I C
H28 : Col A J C
H33 : Col B J G
H38 : Col A I G
G : Tpoint
H1 : Midpoint J A C
H0 : Midpoint I B C
H : not (Col A B C)
A,B,C,I,J : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
eq G G'
+++++
apply l6_21 with A I B J...
-----
Lemma intersection_two_medians_exist_unique : forall A B C I J, ~Col A B C -> Midpoint I B C -> Midpoint J A C -> exists! G, Col G A I /\\ Col G B J.
Proof with finish.
intros.
elim (intersection_two_medians_exist A B C I J H H0 H1); intros G HG; spliter.
exists G.
unfold unique.
assert_all.
repeat split...
intros G' HG'; spliter.
apply l6_21 with A I B J...

*****
H10 : Col G' B J
H2 : Col G' A I
G' : Tpoint
H48 : Cong C I I B
H47 : Cong C J J A
H9 : not (eq I C)
H8 : not (eq I B)
H6 : not (eq J C)
H3 : not (eq J A)
H7 : not (eq A C)
H4 : not (eq B C)
H5 : not (eq A B)
H23 : Col B I C
H28 : Col A J C
H33 : Col B J G
H38 : Col A I G
G : Tpoint
H1 : Midpoint J A C
H0 : Midpoint I B C
H : not (Col A B C)
A,B,C,I,J : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col A I B)
+++++
intro; search_contradiction.
-----
Lemma intersection_two_medians_exist_unique : forall A B C I J, ~Col A B C -> Midpoint I B C -> Midpoint J A C -> exists! G, Col G A I /\\ Col G B J.
Proof with finish.
intros.
elim (intersection_two_medians_exist A B C I J H H0 H1); intros G HG; spliter.
exists G.
unfold unique.
assert_all.
repeat split...
intros G' HG'; spliter.
apply l6_21 with A I B J...
intro; search_contradiction.

*****
H10 : Col G' B J
H2 : Col G' A I
G' : Tpoint
H48 : Cong C I I B
H47 : Cong C J J A
H9 : not (eq I C)
H8 : not (eq I B)
H6 : not (eq J C)
H3 : not (eq J A)
H7 : not (eq A C)
H4 : not (eq B C)
H5 : not (eq A B)
H23 : Col B I C
H28 : Col A J C
H33 : Col B J G
H38 : Col A I G
G : Tpoint
H1 : Midpoint J A C
H0 : Midpoint I B C
H : not (Col A B C)
A,B,C,I,J : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq B J)
+++++
show_distinct' B J...
-----
Lemma intersection_two_medians_exist_unique : forall A B C I J, ~Col A B C -> Midpoint I B C -> Midpoint J A C -> exists! G, Col G A I /\\ Col G B J.
Proof with finish.
intros.
elim (intersection_two_medians_exist A B C I J H H0 H1); intros G HG; spliter.
exists G.
unfold unique.
assert_all.
repeat split...
intros G' HG'; spliter.
apply l6_21 with A I B J...
intro; search_contradiction.
show_distinct' B J...

*****

*****

+++++
Qed.
-----
Definition is_gravity_center G A B C :=\n ~ Col A B C /\\n exists I, exists J, Midpoint I B C /\ Midpoint J A C /\ Col G A I /\ Col G B J.
-----
Lemma is_gravity_center_coplanar : forall A B C G,\n  is_gravity_center G A B C -> Coplanar G A B C.
-----
Lemma is_gravity_center_coplanar : forall A B C G, is_gravity_center G A B C -> Coplanar G A B C.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C G : Tpoint) (_ : is_gravity_center G A B C), Coplanar G A B C
+++++
Proof.
-----
Lemma is_gravity_center_coplanar : forall A B C G, is_gravity_center G A B C -> Coplanar G A B C.
Proof.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C G : Tpoint) (_ : is_gravity_center G A B C), Coplanar G A B C
+++++
intros.
-----
Lemma is_gravity_center_coplanar : forall A B C G, is_gravity_center G A B C -> Coplanar G A B C.
Proof.
intros.

*****
H : is_gravity_center G A B C
A,B,C,G : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar G A B C
+++++
destruct H as [HNCol [I [J]]]; spliter.
-----
Lemma is_gravity_center_coplanar : forall A B C G, is_gravity_center G A B C -> Coplanar G A B C.
Proof.
intros.
destruct H as [HNCol [I [J]]]; spliter.

*****
H2 : Col G B J
H1 : Col G A I
H0 : Midpoint J A C
H : Midpoint I B C
I,J : Tpoint
HNCol : not (Col A B C)
A,B,C,G : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar G A B C
+++++
exists I; left; split; Col.
-----
Lemma is_gravity_center_coplanar : forall A B C G, is_gravity_center G A B C -> Coplanar G A B C.
Proof.
intros.
destruct H as [HNCol [I [J]]]; spliter.
exists I; left; split; Col.

*****

*****

+++++
Qed.
-----
Lemma is_gravity_center_exist_unique : forall A B C,\n  ~ Col A B C ->\n  exists! G, is_gravity_center G A B C.
-----
Lemma is_gravity_center_exist_unique : forall A B C, ~ Col A B C -> exists! G, is_gravity_center G A B C.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C : Tpoint) (_ : not (Col A B C)), ex (unique (fun G : Tpoint => is_gravity_center G A B C))
+++++
Proof with finish.
-----
Lemma is_gravity_center_exist_unique : forall A B C, ~ Col A B C -> exists! G, is_gravity_center G A B C.
Proof with finish.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C : Tpoint) (_ : not (Col A B C)), ex (unique (fun G : Tpoint => is_gravity_center G A B C))
+++++
intros.
-----
Lemma is_gravity_center_exist_unique : forall A B C, ~ Col A B C -> exists! G, is_gravity_center G A B C.
Proof with finish.
intros.

*****
H : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (unique (fun G : Tpoint => is_gravity_center G A B C))
+++++
assert_diffs.
-----
Lemma is_gravity_center_exist_unique : forall A B C, ~ Col A B C -> exists! G, is_gravity_center G A B C.
Proof with finish.
intros.
assert_diffs.

*****
H5 : not (eq A C)
H2 : not (eq B C)
H3 : not (eq A B)
H : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (unique (fun G : Tpoint => is_gravity_center G A B C))
+++++
Name I the midpoint of B and C.
-----
Lemma is_gravity_center_exist_unique : forall A B C, ~ Col A B C -> exists! G, is_gravity_center G A B C.
Proof with finish.
intros.
assert_diffs.
Name I the midpoint of B and C.

*****
H1 : Midpoint I B C
I : Tpoint
H5 : not (eq A C)
H2 : not (eq B C)
H3 : not (eq A B)
H : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (unique (fun G : Tpoint => is_gravity_center G A B C))
+++++
Name J the midpoint of A and C.
-----
Lemma is_gravity_center_exist_unique : forall A B C, ~ Col A B C -> exists! G, is_gravity_center G A B C.
Proof with finish.
intros.
assert_diffs.
Name I the midpoint of B and C.
Name J the midpoint of A and C.

*****
H4 : Midpoint J A C
J : Tpoint
H1 : Midpoint I B C
I : Tpoint
H5 : not (eq A C)
H2 : not (eq B C)
H3 : not (eq A B)
H : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (unique (fun G : Tpoint => is_gravity_center G A B C))
+++++
elim (intersection_two_medians_exist A B C I J H H1 H4); intros G HG; spliter.
-----
Lemma is_gravity_center_exist_unique : forall A B C, ~ Col A B C -> exists! G, is_gravity_center G A B C.
Proof with finish.
intros.
assert_diffs.
Name I the midpoint of B and C.
Name J the midpoint of A and C.
elim (intersection_two_medians_exist A B C I J H H1 H4); intros G HG; spliter.

*****
H6 : Col G B J
H0 : Col G A I
G : Tpoint
H4 : Midpoint J A C
J : Tpoint
H1 : Midpoint I B C
I : Tpoint
H5 : not (eq A C)
H2 : not (eq B C)
H3 : not (eq A B)
H : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (unique (fun G : Tpoint => is_gravity_center G A B C))
+++++
exists G; unfold unique; unfold is_gravity_center; repeat split...
-----
Lemma is_gravity_center_exist_unique : forall A B C, ~ Col A B C -> exists! G, is_gravity_center G A B C.
Proof with finish.
intros.
assert_diffs.
Name I the midpoint of B and C.
Name J the midpoint of A and C.
elim (intersection_two_medians_exist A B C I J H H1 H4); intros G HG; spliter.
exists G; unfold unique; unfold is_gravity_center; repeat split...

*****
H6 : Col G B J
H0 : Col G A I
G : Tpoint
H4 : Midpoint J A C
J : Tpoint
H1 : Midpoint I B C
I : Tpoint
H5 : not (eq A C)
H2 : not (eq B C)
H3 : not (eq A B)
H : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun I : Tpoint => ex (fun J : Tpoint => and (Midpoint I B C) (and (Midpoint J A C) (and (Col G A I) (Col G B J)))))
+++++
exists I; exists J; do 3 (split; finish).
-----
Lemma is_gravity_center_exist_unique : forall A B C, ~ Col A B C -> exists! G, is_gravity_center G A B C.
Proof with finish.
intros.
assert_diffs.
Name I the midpoint of B and C.
Name J the midpoint of A and C.
elim (intersection_two_medians_exist A B C I J H H1 H4); intros G HG; spliter.
exists G; unfold unique; unfold is_gravity_center; repeat split...
exists I; exists J; do 3 (split; finish).

*****
H6 : Col G B J
H0 : Col G A I
G : Tpoint
H4 : Midpoint J A C
J : Tpoint
H1 : Midpoint I B C
I : Tpoint
H5 : not (eq A C)
H2 : not (eq B C)
H3 : not (eq A B)
H : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (x' : Tpoint) (_ : and (not (Col A B C)) (ex (fun I : Tpoint => ex (fun J : Tpoint => and (Midpoint I B C) (and (Midpoint J A C) (and (Col x' A I) (Col x' B J))))))), eq G x'
+++++
intros G' HG'; spliter; decompose [ex and] H8;clear H8.
-----
Lemma is_gravity_center_exist_unique : forall A B C, ~ Col A B C -> exists! G, is_gravity_center G A B C.
Proof with finish.
intros.
assert_diffs.
Name I the midpoint of B and C.
Name J the midpoint of A and C.
elim (intersection_two_medians_exist A B C I J H H1 H4); intros G HG; spliter.
exists G; unfold unique; unfold is_gravity_center; repeat split...
exists I; exists J; do 3 (split; finish).
intros G' HG'; spliter; decompose [ex and] H8;clear H8.

*****
H13 : Col G' B x0
H11 : Col G' A x
H10 : Midpoint x0 A C
H9 : Midpoint x B C
x,x0 : Tpoint
H7 : not (Col A B C)
G' : Tpoint
H6 : Col G B J
H0 : Col G A I
G : Tpoint
H4 : Midpoint J A C
J : Tpoint
H1 : Midpoint I B C
I : Tpoint
H5 : not (eq A C)
H2 : not (eq B C)
H3 : not (eq A B)
H : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
eq G G'
+++++
assert_all.
-----
Lemma is_gravity_center_exist_unique : forall A B C, ~ Col A B C -> exists! G, is_gravity_center G A B C.
Proof with finish.
intros.
assert_diffs.
Name I the midpoint of B and C.
Name J the midpoint of A and C.
elim (intersection_two_medians_exist A B C I J H H1 H4); intros G HG; spliter.
exists G; unfold unique; unfold is_gravity_center; repeat split...
exists I; exists J; do 3 (split; finish).
intros G' HG'; spliter; decompose [ex and] H8;clear H8.
assert_all.

*****
H60 : Cong C x x B
H59 : Cong C x0 x0 A
H9 : not (eq x C)
H8 : not (eq x B)
H7 : not (eq x0 C)
H6 : not (eq x0 A)
H21 : Col B x C
H28 : Col A x0 C
H35 : Col B x0 G'
H40 : Col A x G'
G' : Tpoint
H45 : Col B x0 G
H50 : Col A x G
G : Tpoint
H0 : Midpoint x0 A C
x0 : Tpoint
H1 : Midpoint x B C
x : Tpoint
H5 : not (eq A C)
H2 : not (eq B C)
H3 : not (eq A B)
H : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
eq G G'
+++++
apply l6_21 with A x B x0...
-----
Lemma is_gravity_center_exist_unique : forall A B C, ~ Col A B C -> exists! G, is_gravity_center G A B C.
Proof with finish.
intros.
assert_diffs.
Name I the midpoint of B and C.
Name J the midpoint of A and C.
elim (intersection_two_medians_exist A B C I J H H1 H4); intros G HG; spliter.
exists G; unfold unique; unfold is_gravity_center; repeat split...
exists I; exists J; do 3 (split; finish).
intros G' HG'; spliter; decompose [ex and] H8;clear H8.
assert_all.
apply l6_21 with A x B x0...

*****
H60 : Cong C x x B
H59 : Cong C x0 x0 A
H9 : not (eq x C)
H8 : not (eq x B)
H7 : not (eq x0 C)
H6 : not (eq x0 A)
H21 : Col B x C
H28 : Col A x0 C
H35 : Col B x0 G'
H40 : Col A x G'
G' : Tpoint
H45 : Col B x0 G
H50 : Col A x G
G : Tpoint
H0 : Midpoint x0 A C
x0 : Tpoint
H1 : Midpoint x B C
x : Tpoint
H5 : not (eq A C)
H2 : not (eq B C)
H3 : not (eq A B)
H : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col A x B)
+++++
intro;search_contradiction.
-----
Lemma is_gravity_center_exist_unique : forall A B C, ~ Col A B C -> exists! G, is_gravity_center G A B C.
Proof with finish.
intros.
assert_diffs.
Name I the midpoint of B and C.
Name J the midpoint of A and C.
elim (intersection_two_medians_exist A B C I J H H1 H4); intros G HG; spliter.
exists G; unfold unique; unfold is_gravity_center; repeat split...
exists I; exists J; do 3 (split; finish).
intros G' HG'; spliter; decompose [ex and] H8;clear H8.
assert_all.
apply l6_21 with A x B x0...
intro;search_contradiction.

*****
H60 : Cong C x x B
H59 : Cong C x0 x0 A
H9 : not (eq x C)
H8 : not (eq x B)
H7 : not (eq x0 C)
H6 : not (eq x0 A)
H21 : Col B x C
H28 : Col A x0 C
H35 : Col B x0 G'
H40 : Col A x G'
G' : Tpoint
H45 : Col B x0 G
H50 : Col A x G
G : Tpoint
H0 : Midpoint x0 A C
x0 : Tpoint
H1 : Midpoint x B C
x : Tpoint
H5 : not (eq A C)
H2 : not (eq B C)
H3 : not (eq A B)
H : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq B x0)
+++++
show_distinct' B x0...
-----
Lemma is_gravity_center_exist_unique : forall A B C, ~ Col A B C -> exists! G, is_gravity_center G A B C.
Proof with finish.
intros.
assert_diffs.
Name I the midpoint of B and C.
Name J the midpoint of A and C.
elim (intersection_two_medians_exist A B C I J H H1 H4); intros G HG; spliter.
exists G; unfold unique; unfold is_gravity_center; repeat split...
exists I; exists J; do 3 (split; finish).
intros G' HG'; spliter; decompose [ex and] H8;clear H8.
assert_all.
apply l6_21 with A x B x0...
intro;search_contradiction.
show_distinct' B x0...

*****

*****

+++++
Qed.
-----
Ltac intersection_medians G A B C I J H1 H2 H3 :=\n let T := fresh in assert(T:= intersection_two_medians_exist A B C I J H1 H2 H3);\n ex_and T G.
-----
Tactic Notation "Name" ident(G) "the" "intersection" "of" "the" "medians" "(" ident(A) ident(I) ")" "which" "is" "a" "median" "since" ident(H2) "and" "(" ident(B) ident(J) ")" "which" "is" "a" "median" "since" ident(H3) "of" "the" "non-flat" "triangle" ident(A) ident(B) ident(C) ident(H1) :=\n intersection_medians G A B C I J H1 H2 H3.
-----
Lemma three_medians_intersect:\n forall A B C I J K,\n ~Col A B C ->\n Midpoint I B C ->\n Midpoint J A C ->\n Midpoint K A B ->\n exists G, Col G A I /\ Col G B J /\Col G C K.
-----
Lemma three_medians_intersect: forall A B C I J K, ~Col A B C -> Midpoint I B C -> Midpoint J A C -> Midpoint K A B -> exists G, Col G A I /\\ Col G B J /\\Col G C K.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C I J K : Tpoint) (_ : not (Col A B C)) (_ : Midpoint I B C) (_ : Midpoint J A C) (_ : Midpoint K A B), ex (fun G : Tpoint => and (Col G A I) (and (Col G B J) (Col G C K)))
+++++
Proof with assert_all.
-----
Lemma three_medians_intersect: forall A B C I J K, ~Col A B C -> Midpoint I B C -> Midpoint J A C -> Midpoint K A B -> exists G, Col G A I /\\ Col G B J /\\Col G C K.
Proof with assert_all.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C I J K : Tpoint) (_ : not (Col A B C)) (_ : Midpoint I B C) (_ : Midpoint J A C) (_ : Midpoint K A B), ex (fun G : Tpoint => and (Col G A I) (and (Col G B J) (Col G C K)))
+++++
intros.
-----
Lemma three_medians_intersect: forall A B C I J K, ~Col A B C -> Midpoint I B C -> Midpoint J A C -> Midpoint K A B -> exists G, Col G A I /\\ Col G B J /\\Col G C K.
Proof with assert_all.
intros.

*****
H2 : Midpoint K A B
H1 : Midpoint J A C
H0 : Midpoint I B C
H : not (Col A B C)
A,B,C,I,J,K : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun G : Tpoint => and (Col G A I) (and (Col G B J) (Col G C K)))
+++++
assert_diffs.
-----
Lemma three_medians_intersect: forall A B C I J K, ~Col A B C -> Midpoint I B C -> Midpoint J A C -> Midpoint K A B -> exists G, Col G A I /\\ Col G B J /\\Col G C K.
Proof with assert_all.
intros.
assert_diffs.

*****
H12 : not (eq K B)
H11 : not (eq K A)
H10 : not (eq I C)
H9 : not (eq I B)
H7 : not (eq J C)
H4 : not (eq J A)
H8 : not (eq A C)
H5 : not (eq B C)
H6 : not (eq A B)
H2 : Midpoint K A B
H1 : Midpoint J A C
H0 : Midpoint I B C
H : not (Col A B C)
A,B,C,I,J,K : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun G : Tpoint => and (Col G A I) (and (Col G B J) (Col G C K)))
+++++
Name G the intersection of the medians (A I) which is a median since H0 and (B J) which is a median since H1 of the non-flat triangle A B C H.
-----
Lemma three_medians_intersect: forall A B C I J K, ~Col A B C -> Midpoint I B C -> Midpoint J A C -> Midpoint K A B -> exists G, Col G A I /\\ Col G B J /\\Col G C K.
Proof with assert_all.
intros.
assert_diffs.
Name G the intersection of the medians (A I) which is a median since H0 and (B J) which is a median since H1 of the non-flat triangle A B C H.

*****
H13 : Col G B J
H3 : Col G A I
G : Tpoint
H12 : not (eq K B)
H11 : not (eq K A)
H10 : not (eq I C)
H9 : not (eq I B)
H7 : not (eq J C)
H4 : not (eq J A)
H8 : not (eq A C)
H5 : not (eq B C)
H6 : not (eq A B)
H2 : Midpoint K A B
H1 : Midpoint J A C
H0 : Midpoint I B C
H : not (Col A B C)
A,B,C,I,J,K : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun G : Tpoint => and (Col G A I) (and (Col G B J) (Col G C K)))
+++++
exists G; repeat split; try assumption.
-----
Lemma three_medians_intersect: forall A B C I J K, ~Col A B C -> Midpoint I B C -> Midpoint J A C -> Midpoint K A B -> exists G, Col G A I /\\ Col G B J /\\Col G C K.
Proof with assert_all.
intros.
assert_diffs.
Name G the intersection of the medians (A I) which is a median since H0 and (B J) which is a median since H1 of the non-flat triangle A B C H.
exists G; repeat split; try assumption.

*****
H13 : Col G B J
H3 : Col G A I
G : Tpoint
H12 : not (eq K B)
H11 : not (eq K A)
H10 : not (eq I C)
H9 : not (eq I B)
H7 : not (eq J C)
H4 : not (eq J A)
H8 : not (eq A C)
H5 : not (eq B C)
H6 : not (eq A B)
H2 : Midpoint K A B
H1 : Midpoint J A C
H0 : Midpoint I B C
H : not (Col A B C)
A,B,C,I,J,K : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col G C K
+++++
Name D the symmetric of C wrt G.
-----
Lemma three_medians_intersect: forall A B C I J K, ~Col A B C -> Midpoint I B C -> Midpoint J A C -> Midpoint K A B -> exists G, Col G A I /\\ Col G B J /\\Col G C K.
Proof with assert_all.
intros.
assert_diffs.
Name G the intersection of the medians (A I) which is a median since H0 and (B J) which is a median since H1 of the non-flat triangle A B C H.
exists G; repeat split; try assumption.
Name D the symmetric of C wrt G.

*****
H15 : Midpoint G C D
D : Tpoint
H13 : Col G B J
H3 : Col G A I
G : Tpoint
H12 : not (eq K B)
H11 : not (eq K A)
H10 : not (eq I C)
H9 : not (eq I B)
H7 : not (eq J C)
H4 : not (eq J A)
H8 : not (eq A C)
H5 : not (eq B C)
H6 : not (eq A B)
H2 : Midpoint K A B
H1 : Midpoint J A C
H0 : Midpoint I B C
H : not (Col A B C)
A,B,C,I,J,K : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col G C K
+++++
assert_all.
-----
Lemma three_medians_intersect: forall A B C I J K, ~Col A B C -> Midpoint I B C -> Midpoint J A C -> Midpoint K A B -> exists G, Col G A I /\\ Col G B J /\\Col G C K.
Proof with assert_all.
intros.
assert_diffs.
Name G the intersection of the medians (A I) which is a median since H0 and (B J) which is a median since H1 of the non-flat triangle A B C H.
exists G; repeat split; try assumption.
Name D the symmetric of C wrt G.
assert_all.

*****
H70 : Cong C I I B
H69 : Cong C J J A
H68 : Cong B K K A
H67 : Cong D G G C
H26 : Col B I C
H34 : Col A J C
H40 : Col A K B
H46 : Col C G D
H3 : Midpoint G C D
D : Tpoint
H51 : Col B J G
H56 : Col A I G
G : Tpoint
H12 : not (eq K B)
H11 : not (eq K A)
H10 : not (eq I C)
H9 : not (eq I B)
H7 : not (eq J C)
H4 : not (eq J A)
H8 : not (eq A C)
H5 : not (eq B C)
H6 : not (eq A B)
H2 : Midpoint K A B
H1 : Midpoint J A C
H0 : Midpoint I B C
H : not (Col A B C)
A,B,C,I,J,K : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col G C K
+++++
show_distinct' A D.
-----
Lemma three_medians_intersect: forall A B C I J K, ~Col A B C -> Midpoint I B C -> Midpoint J A C -> Midpoint K A B -> exists G, Col G A I /\\ Col G B J /\\Col G C K.
Proof with assert_all.
intros.
assert_diffs.
Name G the intersection of the medians (A I) which is a median since H0 and (B J) which is a median since H1 of the non-flat triangle A B C H.
exists G; repeat split; try assumption.
Name D the symmetric of C wrt G.
assert_all.
show_distinct' A D.

*****
H13 : not (eq A D)
H70 : Cong C I I B
H69 : Cong C J J A
H68 : Cong B K K A
H67 : Cong D G G C
H26 : Col B I C
H34 : Col A J C
H40 : Col A K B
H46 : Col C G D
H3 : Midpoint G C D
D : Tpoint
H51 : Col B J G
H56 : Col A I G
G : Tpoint
H12 : not (eq K B)
H11 : not (eq K A)
H10 : not (eq I C)
H9 : not (eq I B)
H7 : not (eq J C)
H4 : not (eq J A)
H8 : not (eq A C)
H5 : not (eq B C)
H6 : not (eq A B)
H2 : Midpoint K A B
H1 : Midpoint J A C
H0 : Midpoint I B C
H : not (Col A B C)
A,B,C,I,J,K : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col G C K
+++++
permutation_intro_in_hyps.
-----
Lemma three_medians_intersect: forall A B C I J K, ~Col A B C -> Midpoint I B C -> Midpoint J A C -> Midpoint K A B -> exists G, Col G A I /\\ Col G B J /\\Col G C K.
Proof with assert_all.
intros.
assert_diffs.
Name G the intersection of the medians (A I) which is a median since H0 and (B J) which is a median since H1 of the non-flat triangle A B C H.
exists G; repeat split; try assumption.
Name D the symmetric of C wrt G.
assert_all.
show_distinct' A D.
permutation_intro_in_hyps.

*****
H91 : not (eq D A)
H13 : not (eq A D)
H66 : Cong B I I C
H65 : Cong B I C I
H64 : Cong I B I C
H63 : Cong I B C I
H62 : Cong I C B I
H61 : Cong I C I B
H60 : Cong C I B I
H59 : Cong C I I B
H76 : Cong A J J C
H75 : Cong A J C J
H74 : Cong J A J C
H73 : Cong J A C J
H72 : Cong J C A J
H71 : Cong J C J A
H70 : Cong C J A J
H69 : Cong C J J A
H83 : Cong A K K B
H82 : Cong A K B K
H81 : Cong K A K B
H80 : Cong K A B K
H79 : Cong K B A K
H78 : Cong K B K A
H77 : Cong B K A K
H68 : Cong B K K A
H90 : Cong C G G D
H89 : Cong C G D G
H88 : Cong G C G D
H87 : Cong G C D G
H86 : Cong G D C G
H85 : Cong G D G C
H84 : Cong D G C G
H67 : Cong D G G C
H28 : Col C I B
H27 : Col C B I
H26 : Col I C B
H25 : Col I B C
H24 : Col B C I
H23 : Col B I C
H34 : Col C J A
H33 : Col C A J
H32 : Col J C A
H31 : Col J A C
H30 : Col A C J
H29 : Col A J C
H40 : Col B K A
H39 : Col B A K
H38 : Col K B A
H37 : Col K A B
H36 : Col A B K
H35 : Col A K B
H46 : Col D G C
H45 : Col D C G
H44 : Col G D C
H43 : Col G C D
H42 : Col C D G
H41 : Col C G D
H14 : Midpoint G D C
H3 : Midpoint G C D
D : Tpoint
H52 : Col G J B
H51 : Col G B J
H50 : Col J G B
H49 : Col J B G
H48 : Col B G J
H47 : Col B J G
H58 : Col G I A
H57 : Col G A I
H56 : Col I G A
H55 : Col I A G
H54 : Col A G I
H53 : Col A I G
G : Tpoint
H92 : not (eq B K)
H12 : not (eq K B)
H93 : not (eq A K)
H11 : not (eq K A)
H94 : not (eq C I)
H10 : not (eq I C)
H95 : not (eq B I)
H9 : not (eq I B)
H96 : not (eq C J)
H7 : not (eq J C)
H97 : not (eq A J)
H4 : not (eq J A)
H98 : not (eq C A)
H8 : not (eq A C)
H99 : not (eq C B)
H5 : not (eq B C)
H100 : not (eq B A)
H6 : not (eq A B)
H15 : Midpoint K B A
H2 : Midpoint K A B
H16 : Midpoint J C A
H1 : Midpoint J A C
H17 : Midpoint I C B
H0 : Midpoint I B C
H22 : not (Col C B A)
H21 : not (Col C A B)
H20 : not (Col B C A)
H19 : not (Col B A C)
H18 : not (Col A C B)
H : not (Col A B C)
A,B,C,I,J,K : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col G C K
+++++
assert (Par A D J G) by (apply (triangle_mid_par A D C G J H13 H14 H1)).
-----
Lemma three_medians_intersect: forall A B C I J K, ~Col A B C -> Midpoint I B C -> Midpoint J A C -> Midpoint K A B -> exists G, Col G A I /\\ Col G B J /\\Col G C K.
Proof with assert_all.
intros.
assert_diffs.
Name G the intersection of the medians (A I) which is a median since H0 and (B J) which is a median since H1 of the non-flat triangle A B C H.
exists G; repeat split; try assumption.
Name D the symmetric of C wrt G.
assert_all.
show_distinct' A D.
permutation_intro_in_hyps.
assert (Par A D J G) by (apply (triangle_mid_par A D C G J H13 H14 H1)).

*****
H101 : Par A D J G
H91 : not (eq D A)
H13 : not (eq A D)
H66 : Cong B I I C
H65 : Cong B I C I
H64 : Cong I B I C
H63 : Cong I B C I
H62 : Cong I C B I
H61 : Cong I C I B
H60 : Cong C I B I
H59 : Cong C I I B
H76 : Cong A J J C
H75 : Cong A J C J
H74 : Cong J A J C
H73 : Cong J A C J
H72 : Cong J C A J
H71 : Cong J C J A
H70 : Cong C J A J
H69 : Cong C J J A
H83 : Cong A K K B
H82 : Cong A K B K
H81 : Cong K A K B
H80 : Cong K A B K
H79 : Cong K B A K
H78 : Cong K B K A
H77 : Cong B K A K
H68 : Cong B K K A
H90 : Cong C G G D
H89 : Cong C G D G
H88 : Cong G C G D
H87 : Cong G C D G
H86 : Cong G D C G
H85 : Cong G D G C
H84 : Cong D G C G
H67 : Cong D G G C
H28 : Col C I B
H27 : Col C B I
H26 : Col I C B
H25 : Col I B C
H24 : Col B C I
H23 : Col B I C
H34 : Col C J A
H33 : Col C A J
H32 : Col J C A
H31 : Col J A C
H30 : Col A C J
H29 : Col A J C
H40 : Col B K A
H39 : Col B A K
H38 : Col K B A
H37 : Col K A B
H36 : Col A B K
H35 : Col A K B
H46 : Col D G C
H45 : Col D C G
H44 : Col G D C
H43 : Col G C D
H42 : Col C D G
H41 : Col C G D
H14 : Midpoint G D C
H3 : Midpoint G C D
D : Tpoint
H52 : Col G J B
H51 : Col G B J
H50 : Col J G B
H49 : Col J B G
H48 : Col B G J
H47 : Col B J G
H58 : Col G I A
H57 : Col G A I
H56 : Col I G A
H55 : Col I A G
H54 : Col A G I
H53 : Col A I G
G : Tpoint
H92 : not (eq B K)
H12 : not (eq K B)
H93 : not (eq A K)
H11 : not (eq K A)
H94 : not (eq C I)
H10 : not (eq I C)
H95 : not (eq B I)
H9 : not (eq I B)
H96 : not (eq C J)
H7 : not (eq J C)
H97 : not (eq A J)
H4 : not (eq J A)
H98 : not (eq C A)
H8 : not (eq A C)
H99 : not (eq C B)
H5 : not (eq B C)
H100 : not (eq B A)
H6 : not (eq A B)
H15 : Midpoint K B A
H2 : Midpoint K A B
H16 : Midpoint J C A
H1 : Midpoint J A C
H17 : Midpoint I C B
H0 : Midpoint I B C
H22 : not (Col C B A)
H21 : not (Col C A B)
H20 : not (Col B C A)
H19 : not (Col B A C)
H18 : not (Col A C B)
H : not (Col A B C)
A,B,C,I,J,K : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col G C K
+++++
show_distinct' B G.
-----
Lemma three_medians_intersect: forall A B C I J K, ~Col A B C -> Midpoint I B C -> Midpoint J A C -> Midpoint K A B -> exists G, Col G A I /\\ Col G B J /\\Col G C K.
Proof with assert_all.
intros.
assert_diffs.
Name G the intersection of the medians (A I) which is a median since H0 and (B J) which is a median since H1 of the non-flat triangle A B C H.
exists G; repeat split; try assumption.
Name D the symmetric of C wrt G.
assert_all.
show_distinct' A D.
permutation_intro_in_hyps.
assert (Par A D J G) by (apply (triangle_mid_par A D C G J H13 H14 H1)).
show_distinct' B G.

*****
H102 : not (eq B G)
H101 : Par A D J G
H91 : not (eq D A)
H13 : not (eq A D)
H66 : Cong B I I C
H65 : Cong B I C I
H64 : Cong I B I C
H63 : Cong I B C I
H62 : Cong I C B I
H61 : Cong I C I B
H60 : Cong C I B I
H59 : Cong C I I B
H76 : Cong A J J C
H75 : Cong A J C J
H74 : Cong J A J C
H73 : Cong J A C J
H72 : Cong J C A J
H71 : Cong J C J A
H70 : Cong C J A J
H69 : Cong C J J A
H83 : Cong A K K B
H82 : Cong A K B K
H81 : Cong K A K B
H80 : Cong K A B K
H79 : Cong K B A K
H78 : Cong K B K A
H77 : Cong B K A K
H68 : Cong B K K A
H90 : Cong C G G D
H89 : Cong C G D G
H88 : Cong G C G D
H87 : Cong G C D G
H86 : Cong G D C G
H85 : Cong G D G C
H84 : Cong D G C G
H67 : Cong D G G C
H28 : Col C I B
H27 : Col C B I
H26 : Col I C B
H25 : Col I B C
H24 : Col B C I
H23 : Col B I C
H34 : Col C J A
H33 : Col C A J
H32 : Col J C A
H31 : Col J A C
H30 : Col A C J
H29 : Col A J C
H40 : Col B K A
H39 : Col B A K
H38 : Col K B A
H37 : Col K A B
H36 : Col A B K
H35 : Col A K B
H46 : Col D G C
H45 : Col D C G
H44 : Col G D C
H43 : Col G C D
H42 : Col C D G
H41 : Col C G D
H14 : Midpoint G D C
H3 : Midpoint G C D
D : Tpoint
H52 : Col G J B
H51 : Col G B J
H50 : Col J G B
H49 : Col J B G
H48 : Col B G J
H47 : Col B J G
H58 : Col G I A
H57 : Col G A I
H56 : Col I G A
H55 : Col I A G
H54 : Col A G I
H53 : Col A I G
G : Tpoint
H92 : not (eq B K)
H12 : not (eq K B)
H93 : not (eq A K)
H11 : not (eq K A)
H94 : not (eq C I)
H10 : not (eq I C)
H95 : not (eq B I)
H9 : not (eq I B)
H96 : not (eq C J)
H7 : not (eq J C)
H97 : not (eq A J)
H4 : not (eq J A)
H98 : not (eq C A)
H8 : not (eq A C)
H99 : not (eq C B)
H5 : not (eq B C)
H100 : not (eq B A)
H6 : not (eq A B)
H15 : Midpoint K B A
H2 : Midpoint K A B
H16 : Midpoint J C A
H1 : Midpoint J A C
H17 : Midpoint I C B
H0 : Midpoint I B C
H22 : not (Col C B A)
H21 : not (Col C A B)
H20 : not (Col B C A)
H19 : not (Col B A C)
H18 : not (Col A C B)
H : not (Col A B C)
A,B,C,I,J,K : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col G C K
+++++
assert (Par G B A D) by (perm_apply (par_col_par A D G J B)).
-----
Lemma three_medians_intersect: forall A B C I J K, ~Col A B C -> Midpoint I B C -> Midpoint J A C -> Midpoint K A B -> exists G, Col G A I /\\ Col G B J /\\Col G C K.
Proof with assert_all.
intros.
assert_diffs.
Name G the intersection of the medians (A I) which is a median since H0 and (B J) which is a median since H1 of the non-flat triangle A B C H.
exists G; repeat split; try assumption.
Name D the symmetric of C wrt G.
assert_all.
show_distinct' A D.
permutation_intro_in_hyps.
assert (Par A D J G) by (apply (triangle_mid_par A D C G J H13 H14 H1)).
show_distinct' B G.
assert (Par G B A D) by (perm_apply (par_col_par A D G J B)).

*****
H103 : Par G B A D
H102 : not (eq B G)
H101 : Par A D J G
H91 : not (eq D A)
H13 : not (eq A D)
H66 : Cong B I I C
H65 : Cong B I C I
H64 : Cong I B I C
H63 : Cong I B C I
H62 : Cong I C B I
H61 : Cong I C I B
H60 : Cong C I B I
H59 : Cong C I I B
H76 : Cong A J J C
H75 : Cong A J C J
H74 : Cong J A J C
H73 : Cong J A C J
H72 : Cong J C A J
H71 : Cong J C J A
H70 : Cong C J A J
H69 : Cong C J J A
H83 : Cong A K K B
H82 : Cong A K B K
H81 : Cong K A K B
H80 : Cong K A B K
H79 : Cong K B A K
H78 : Cong K B K A
H77 : Cong B K A K
H68 : Cong B K K A
H90 : Cong C G G D
H89 : Cong C G D G
H88 : Cong G C G D
H87 : Cong G C D G
H86 : Cong G D C G
H85 : Cong G D G C
H84 : Cong D G C G
H67 : Cong D G G C
H28 : Col C I B
H27 : Col C B I
H26 : Col I C B
H25 : Col I B C
H24 : Col B C I
H23 : Col B I C
H34 : Col C J A
H33 : Col C A J
H32 : Col J C A
H31 : Col J A C
H30 : Col A C J
H29 : Col A J C
H40 : Col B K A
H39 : Col B A K
H38 : Col K B A
H37 : Col K A B
H36 : Col A B K
H35 : Col A K B
H46 : Col D G C
H45 : Col D C G
H44 : Col G D C
H43 : Col G C D
H42 : Col C D G
H41 : Col C G D
H14 : Midpoint G D C
H3 : Midpoint G C D
D : Tpoint
H52 : Col G J B
H51 : Col G B J
H50 : Col J G B
H49 : Col J B G
H48 : Col B G J
H47 : Col B J G
H58 : Col G I A
H57 : Col G A I
H56 : Col I G A
H55 : Col I A G
H54 : Col A G I
H53 : Col A I G
G : Tpoint
H92 : not (eq B K)
H12 : not (eq K B)
H93 : not (eq A K)
H11 : not (eq K A)
H94 : not (eq C I)
H10 : not (eq I C)
H95 : not (eq B I)
H9 : not (eq I B)
H96 : not (eq C J)
H7 : not (eq J C)
H97 : not (eq A J)
H4 : not (eq J A)
H98 : not (eq C A)
H8 : not (eq A C)
H99 : not (eq C B)
H5 : not (eq B C)
H100 : not (eq B A)
H6 : not (eq A B)
H15 : Midpoint K B A
H2 : Midpoint K A B
H16 : Midpoint J C A
H1 : Midpoint J A C
H17 : Midpoint I C B
H0 : Midpoint I B C
H22 : not (Col C B A)
H21 : not (Col C A B)
H20 : not (Col B C A)
H19 : not (Col B A C)
H18 : not (Col A C B)
H : not (Col A B C)
A,B,C,I,J,K : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col G C K
+++++
show_distinct' B D.
-----
Lemma three_medians_intersect: forall A B C I J K, ~Col A B C -> Midpoint I B C -> Midpoint J A C -> Midpoint K A B -> exists G, Col G A I /\\ Col G B J /\\Col G C K.
Proof with assert_all.
intros.
assert_diffs.
Name G the intersection of the medians (A I) which is a median since H0 and (B J) which is a median since H1 of the non-flat triangle A B C H.
exists G; repeat split; try assumption.
Name D the symmetric of C wrt G.
assert_all.
show_distinct' A D.
permutation_intro_in_hyps.
assert (Par A D J G) by (apply (triangle_mid_par A D C G J H13 H14 H1)).
show_distinct' B G.
assert (Par G B A D) by (perm_apply (par_col_par A D G J B)).
show_distinct' B D.

*****
H104 : not (eq B D)
H103 : Par G B A D
H102 : not (eq B G)
H101 : Par A D J G
H91 : not (eq D A)
H13 : not (eq A D)
H66 : Cong B I I C
H65 : Cong B I C I
H64 : Cong I B I C
H63 : Cong I B C I
H62 : Cong I C B I
H61 : Cong I C I B
H60 : Cong C I B I
H59 : Cong C I I B
H76 : Cong A J J C
H75 : Cong A J C J
H74 : Cong J A J C
H73 : Cong J A C J
H72 : Cong J C A J
H71 : Cong J C J A
H70 : Cong C J A J
H69 : Cong C J J A
H83 : Cong A K K B
H82 : Cong A K B K
H81 : Cong K A K B
H80 : Cong K A B K
H79 : Cong K B A K
H78 : Cong K B K A
H77 : Cong B K A K
H68 : Cong B K K A
H90 : Cong C G G D
H89 : Cong C G D G
H88 : Cong G C G D
H87 : Cong G C D G
H86 : Cong G D C G
H85 : Cong G D G C
H84 : Cong D G C G
H67 : Cong D G G C
H28 : Col C I B
H27 : Col C B I
H26 : Col I C B
H25 : Col I B C
H24 : Col B C I
H23 : Col B I C
H34 : Col C J A
H33 : Col C A J
H32 : Col J C A
H31 : Col J A C
H30 : Col A C J
H29 : Col A J C
H40 : Col B K A
H39 : Col B A K
H38 : Col K B A
H37 : Col K A B
H36 : Col A B K
H35 : Col A K B
H46 : Col D G C
H45 : Col D C G
H44 : Col G D C
H43 : Col G C D
H42 : Col C D G
H41 : Col C G D
H14 : Midpoint G D C
H3 : Midpoint G C D
D : Tpoint
H52 : Col G J B
H51 : Col G B J
H50 : Col J G B
H49 : Col J B G
H48 : Col B G J
H47 : Col B J G
H58 : Col G I A
H57 : Col G A I
H56 : Col I G A
H55 : Col I A G
H54 : Col A G I
H53 : Col A I G
G : Tpoint
H92 : not (eq B K)
H12 : not (eq K B)
H93 : not (eq A K)
H11 : not (eq K A)
H94 : not (eq C I)
H10 : not (eq I C)
H95 : not (eq B I)
H9 : not (eq I B)
H96 : not (eq C J)
H7 : not (eq J C)
H97 : not (eq A J)
H4 : not (eq J A)
H98 : not (eq C A)
H8 : not (eq A C)
H99 : not (eq C B)
H5 : not (eq B C)
H100 : not (eq B A)
H6 : not (eq A B)
H15 : Midpoint K B A
H2 : Midpoint K A B
H16 : Midpoint J C A
H1 : Midpoint J A C
H17 : Midpoint I C B
H0 : Midpoint I B C
H22 : not (Col C B A)
H21 : not (Col C A B)
H20 : not (Col B C A)
H19 : not (Col B A C)
H18 : not (Col A C B)
H : not (Col A B C)
A,B,C,I,J,K : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col G C K
+++++
assert (Par B D I G) by (apply (triangle_mid_par B D C G I H104 H14 H0)).
-----
Lemma three_medians_intersect: forall A B C I J K, ~Col A B C -> Midpoint I B C -> Midpoint J A C -> Midpoint K A B -> exists G, Col G A I /\\ Col G B J /\\Col G C K.
Proof with assert_all.
intros.
assert_diffs.
Name G the intersection of the medians (A I) which is a median since H0 and (B J) which is a median since H1 of the non-flat triangle A B C H.
exists G; repeat split; try assumption.
Name D the symmetric of C wrt G.
assert_all.
show_distinct' A D.
permutation_intro_in_hyps.
assert (Par A D J G) by (apply (triangle_mid_par A D C G J H13 H14 H1)).
show_distinct' B G.
assert (Par G B A D) by (perm_apply (par_col_par A D G J B)).
show_distinct' B D.
assert (Par B D I G) by (apply (triangle_mid_par B D C G I H104 H14 H0)).

*****
H105 : Par B D I G
H104 : not (eq B D)
H103 : Par G B A D
H102 : not (eq B G)
H101 : Par A D J G
H91 : not (eq D A)
H13 : not (eq A D)
H66 : Cong B I I C
H65 : Cong B I C I
H64 : Cong I B I C
H63 : Cong I B C I
H62 : Cong I C B I
H61 : Cong I C I B
H60 : Cong C I B I
H59 : Cong C I I B
H76 : Cong A J J C
H75 : Cong A J C J
H74 : Cong J A J C
H73 : Cong J A C J
H72 : Cong J C A J
H71 : Cong J C J A
H70 : Cong C J A J
H69 : Cong C J J A
H83 : Cong A K K B
H82 : Cong A K B K
H81 : Cong K A K B
H80 : Cong K A B K
H79 : Cong K B A K
H78 : Cong K B K A
H77 : Cong B K A K
H68 : Cong B K K A
H90 : Cong C G G D
H89 : Cong C G D G
H88 : Cong G C G D
H87 : Cong G C D G
H86 : Cong G D C G
H85 : Cong G D G C
H84 : Cong D G C G
H67 : Cong D G G C
H28 : Col C I B
H27 : Col C B I
H26 : Col I C B
H25 : Col I B C
H24 : Col B C I
H23 : Col B I C
H34 : Col C J A
H33 : Col C A J
H32 : Col J C A
H31 : Col J A C
H30 : Col A C J
H29 : Col A J C
H40 : Col B K A
H39 : Col B A K
H38 : Col K B A
H37 : Col K A B
H36 : Col A B K
H35 : Col A K B
H46 : Col D G C
H45 : Col D C G
H44 : Col G D C
H43 : Col G C D
H42 : Col C D G
H41 : Col C G D
H14 : Midpoint G D C
H3 : Midpoint G C D
D : Tpoint
H52 : Col G J B
H51 : Col G B J
H50 : Col J G B
H49 : Col J B G
H48 : Col B G J
H47 : Col B J G
H58 : Col G I A
H57 : Col G A I
H56 : Col I G A
H55 : Col I A G
H54 : Col A G I
H53 : Col A I G
G : Tpoint
H92 : not (eq B K)
H12 : not (eq K B)
H93 : not (eq A K)
H11 : not (eq K A)
H94 : not (eq C I)
H10 : not (eq I C)
H95 : not (eq B I)
H9 : not (eq I B)
H96 : not (eq C J)
H7 : not (eq J C)
H97 : not (eq A J)
H4 : not (eq J A)
H98 : not (eq C A)
H8 : not (eq A C)
H99 : not (eq C B)
H5 : not (eq B C)
H100 : not (eq B A)
H6 : not (eq A B)
H15 : Midpoint K B A
H2 : Midpoint K A B
H16 : Midpoint J C A
H1 : Midpoint J A C
H17 : Midpoint I C B
H0 : Midpoint I B C
H22 : not (Col C B A)
H21 : not (Col C A B)
H20 : not (Col B C A)
H19 : not (Col B A C)
H18 : not (Col A C B)
H : not (Col A B C)
A,B,C,I,J,K : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col G C K
+++++
show_distinct' A G.
-----
Lemma three_medians_intersect: forall A B C I J K, ~Col A B C -> Midpoint I B C -> Midpoint J A C -> Midpoint K A B -> exists G, Col G A I /\\ Col G B J /\\Col G C K.
Proof with assert_all.
intros.
assert_diffs.
Name G the intersection of the medians (A I) which is a median since H0 and (B J) which is a median since H1 of the non-flat triangle A B C H.
exists G; repeat split; try assumption.
Name D the symmetric of C wrt G.
assert_all.
show_distinct' A D.
permutation_intro_in_hyps.
assert (Par A D J G) by (apply (triangle_mid_par A D C G J H13 H14 H1)).
show_distinct' B G.
assert (Par G B A D) by (perm_apply (par_col_par A D G J B)).
show_distinct' B D.
assert (Par B D I G) by (apply (triangle_mid_par B D C G I H104 H14 H0)).
show_distinct' A G.

*****
H106 : not (eq A G)
H105 : Par B D I G
H104 : not (eq B D)
H103 : Par G B A D
H102 : not (eq B G)
H101 : Par A D J G
H91 : not (eq D A)
H13 : not (eq A D)
H66 : Cong B I I C
H65 : Cong B I C I
H64 : Cong I B I C
H63 : Cong I B C I
H62 : Cong I C B I
H61 : Cong I C I B
H60 : Cong C I B I
H59 : Cong C I I B
H76 : Cong A J J C
H75 : Cong A J C J
H74 : Cong J A J C
H73 : Cong J A C J
H72 : Cong J C A J
H71 : Cong J C J A
H70 : Cong C J A J
H69 : Cong C J J A
H83 : Cong A K K B
H82 : Cong A K B K
H81 : Cong K A K B
H80 : Cong K A B K
H79 : Cong K B A K
H78 : Cong K B K A
H77 : Cong B K A K
H68 : Cong B K K A
H90 : Cong C G G D
H89 : Cong C G D G
H88 : Cong G C G D
H87 : Cong G C D G
H86 : Cong G D C G
H85 : Cong G D G C
H84 : Cong D G C G
H67 : Cong D G G C
H28 : Col C I B
H27 : Col C B I
H26 : Col I C B
H25 : Col I B C
H24 : Col B C I
H23 : Col B I C
H34 : Col C J A
H33 : Col C A J
H32 : Col J C A
H31 : Col J A C
H30 : Col A C J
H29 : Col A J C
H40 : Col B K A
H39 : Col B A K
H38 : Col K B A
H37 : Col K A B
H36 : Col A B K
H35 : Col A K B
H46 : Col D G C
H45 : Col D C G
H44 : Col G D C
H43 : Col G C D
H42 : Col C D G
H41 : Col C G D
H14 : Midpoint G D C
H3 : Midpoint G C D
D : Tpoint
H52 : Col G J B
H51 : Col G B J
H50 : Col J G B
H49 : Col J B G
H48 : Col B G J
H47 : Col B J G
H58 : Col G I A
H57 : Col G A I
H56 : Col I G A
H55 : Col I A G
H54 : Col A G I
H53 : Col A I G
G : Tpoint
H92 : not (eq B K)
H12 : not (eq K B)
H93 : not (eq A K)
H11 : not (eq K A)
H94 : not (eq C I)
H10 : not (eq I C)
H95 : not (eq B I)
H9 : not (eq I B)
H96 : not (eq C J)
H7 : not (eq J C)
H97 : not (eq A J)
H4 : not (eq J A)
H98 : not (eq C A)
H8 : not (eq A C)
H99 : not (eq C B)
H5 : not (eq B C)
H100 : not (eq B A)
H6 : not (eq A B)
H15 : Midpoint K B A
H2 : Midpoint K A B
H16 : Midpoint J C A
H1 : Midpoint J A C
H17 : Midpoint I C B
H0 : Midpoint I B C
H22 : not (Col C B A)
H21 : not (Col C A B)
H20 : not (Col B C A)
H19 : not (Col B A C)
H18 : not (Col A C B)
H : not (Col A B C)
A,B,C,I,J,K : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col G C K
+++++
assert (Par G A D B) by (perm_apply (par_col_par B D G I A))...
-----
Lemma three_medians_intersect: forall A B C I J K, ~Col A B C -> Midpoint I B C -> Midpoint J A C -> Midpoint K A B -> exists G, Col G A I /\\ Col G B J /\\Col G C K.
Proof with assert_all.
intros.
assert_diffs.
Name G the intersection of the medians (A I) which is a median since H0 and (B J) which is a median since H1 of the non-flat triangle A B C H.
exists G; repeat split; try assumption.
Name D the symmetric of C wrt G.
assert_all.
show_distinct' A D.
permutation_intro_in_hyps.
assert (Par A D J G) by (apply (triangle_mid_par A D C G J H13 H14 H1)).
show_distinct' B G.
assert (Par G B A D) by (perm_apply (par_col_par A D G J B)).
show_distinct' B D.
assert (Par B D I G) by (apply (triangle_mid_par B D C G I H104 H14 H0)).
show_distinct' A G.
assert (Par G A D B) by (perm_apply (par_col_par B D G I A))...

*****
H20 : not (eq J G)
H19 : not (eq I G)
H15 : Par G A D B
H106 : not (eq A G)
H25 : Par B D I G
H104 : not (eq B D)
H33 : Par G B A D
H102 : not (eq B G)
H41 : Par A D J G
H13 : not (eq A D)
H95 : Cong I C I B
H105 : Cong J C J A
H114 : Cong K B K A
H122 : Cong G D G C
H61 : Col B I C
H67 : Col A J C
H73 : Col A K B
H79 : Col C G D
H3 : Midpoint G C D
D : Tpoint
H85 : Col B J G
H91 : Col A I G
G : Tpoint
H12 : not (eq K B)
H11 : not (eq K A)
H10 : not (eq I C)
H9 : not (eq I B)
H7 : not (eq J C)
H4 : not (eq J A)
H8 : not (eq A C)
H5 : not (eq B C)
H6 : not (eq A B)
H2 : Midpoint K A B
H1 : Midpoint J A C
H0 : Midpoint I B C
H : not (Col A B C)
A,B,C,I,J,K : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col G C K
+++++
show_distinct' D G.
-----
Lemma three_medians_intersect: forall A B C I J K, ~Col A B C -> Midpoint I B C -> Midpoint J A C -> Midpoint K A B -> exists G, Col G A I /\\ Col G B J /\\Col G C K.
Proof with assert_all.
intros.
assert_diffs.
Name G the intersection of the medians (A I) which is a median since H0 and (B J) which is a median since H1 of the non-flat triangle A B C H.
exists G; repeat split; try assumption.
Name D the symmetric of C wrt G.
assert_all.
show_distinct' A D.
permutation_intro_in_hyps.
assert (Par A D J G) by (apply (triangle_mid_par A D C G J H13 H14 H1)).
show_distinct' B G.
assert (Par G B A D) by (perm_apply (par_col_par A D G J B)).
show_distinct' B D.
assert (Par B D I G) by (apply (triangle_mid_par B D C G I H104 H14 H0)).
show_distinct' A G.
assert (Par G A D B) by (perm_apply (par_col_par B D G I A))...
show_distinct' D G.

*****
H14 : not (eq D G)
H20 : not (eq J G)
H19 : not (eq I G)
H15 : Par G A D B
H106 : not (eq A G)
H25 : Par B D I G
H104 : not (eq B D)
H33 : Par G B A D
H102 : not (eq B G)
H41 : Par A D J G
H13 : not (eq A D)
H95 : Cong I C I B
H105 : Cong J C J A
H114 : Cong K B K A
H122 : Cong G D G C
H61 : Col B I C
H67 : Col A J C
H73 : Col A K B
H79 : Col C G D
H3 : Midpoint G C D
D : Tpoint
H85 : Col B J G
H91 : Col A I G
G : Tpoint
H12 : not (eq K B)
H11 : not (eq K A)
H10 : not (eq I C)
H9 : not (eq I B)
H7 : not (eq J C)
H4 : not (eq J A)
H8 : not (eq A C)
H5 : not (eq B C)
H6 : not (eq A B)
H2 : Midpoint K A B
H1 : Midpoint J A C
H0 : Midpoint I B C
H : not (Col A B C)
A,B,C,I,J,K : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col G C K
+++++
assert (~ Col G A D) by (intro; search_contradiction).
-----
Lemma three_medians_intersect: forall A B C I J K, ~Col A B C -> Midpoint I B C -> Midpoint J A C -> Midpoint K A B -> exists G, Col G A I /\\ Col G B J /\\Col G C K.
Proof with assert_all.
intros.
assert_diffs.
Name G the intersection of the medians (A I) which is a median since H0 and (B J) which is a median since H1 of the non-flat triangle A B C H.
exists G; repeat split; try assumption.
Name D the symmetric of C wrt G.
assert_all.
show_distinct' A D.
permutation_intro_in_hyps.
assert (Par A D J G) by (apply (triangle_mid_par A D C G J H13 H14 H1)).
show_distinct' B G.
assert (Par G B A D) by (perm_apply (par_col_par A D G J B)).
show_distinct' B D.
assert (Par B D I G) by (apply (triangle_mid_par B D C G I H104 H14 H0)).
show_distinct' A G.
assert (Par G A D B) by (perm_apply (par_col_par B D G I A))...
show_distinct' D G.
assert (~ Col G A D) by (intro; search_contradiction).

*****
H16 : not (Col G A D)
H14 : not (eq D G)
H20 : not (eq J G)
H19 : not (eq I G)
H15 : Par G A D B
H106 : not (eq A G)
H25 : Par B D I G
H104 : not (eq B D)
H33 : Par G B A D
H102 : not (eq B G)
H41 : Par A D J G
H13 : not (eq A D)
H95 : Cong I C I B
H105 : Cong J C J A
H114 : Cong K B K A
H122 : Cong G D G C
H61 : Col B I C
H67 : Col A J C
H73 : Col A K B
H79 : Col C G D
H3 : Midpoint G C D
D : Tpoint
H85 : Col B J G
H91 : Col A I G
G : Tpoint
H12 : not (eq K B)
H11 : not (eq K A)
H10 : not (eq I C)
H9 : not (eq I B)
H7 : not (eq J C)
H4 : not (eq J A)
H8 : not (eq A C)
H5 : not (eq B C)
H6 : not (eq A B)
H2 : Midpoint K A B
H1 : Midpoint J A C
H0 : Midpoint I B C
H : not (Col A B C)
A,B,C,I,J,K : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col G C K
+++++
assert (Parallelogram G A D B) by (apply (par_2_plg G A D B); finish).
-----
Lemma three_medians_intersect: forall A B C I J K, ~Col A B C -> Midpoint I B C -> Midpoint J A C -> Midpoint K A B -> exists G, Col G A I /\\ Col G B J /\\Col G C K.
Proof with assert_all.
intros.
assert_diffs.
Name G the intersection of the medians (A I) which is a median since H0 and (B J) which is a median since H1 of the non-flat triangle A B C H.
exists G; repeat split; try assumption.
Name D the symmetric of C wrt G.
assert_all.
show_distinct' A D.
permutation_intro_in_hyps.
assert (Par A D J G) by (apply (triangle_mid_par A D C G J H13 H14 H1)).
show_distinct' B G.
assert (Par G B A D) by (perm_apply (par_col_par A D G J B)).
show_distinct' B D.
assert (Par B D I G) by (apply (triangle_mid_par B D C G I H104 H14 H0)).
show_distinct' A G.
assert (Par G A D B) by (perm_apply (par_col_par B D G I A))...
show_distinct' D G.
assert (~ Col G A D) by (intro; search_contradiction).
assert (Parallelogram G A D B) by (apply (par_2_plg G A D B); finish).

*****
H17 : Parallelogram G A D B
H16 : not (Col G A D)
H14 : not (eq D G)
H20 : not (eq J G)
H19 : not (eq I G)
H15 : Par G A D B
H106 : not (eq A G)
H25 : Par B D I G
H104 : not (eq B D)
H33 : Par G B A D
H102 : not (eq B G)
H41 : Par A D J G
H13 : not (eq A D)
H95 : Cong I C I B
H105 : Cong J C J A
H114 : Cong K B K A
H122 : Cong G D G C
H61 : Col B I C
H67 : Col A J C
H73 : Col A K B
H79 : Col C G D
H3 : Midpoint G C D
D : Tpoint
H85 : Col B J G
H91 : Col A I G
G : Tpoint
H12 : not (eq K B)
H11 : not (eq K A)
H10 : not (eq I C)
H9 : not (eq I B)
H7 : not (eq J C)
H4 : not (eq J A)
H8 : not (eq A C)
H5 : not (eq B C)
H6 : not (eq A B)
H2 : Midpoint K A B
H1 : Midpoint J A C
H0 : Midpoint I B C
H : not (Col A B C)
A,B,C,I,J,K : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col G C K
+++++
Name Z the intersection of the diagonals (G D) and (A B) of the parallelogram H17...
-----
Lemma three_medians_intersect: forall A B C I J K, ~Col A B C -> Midpoint I B C -> Midpoint J A C -> Midpoint K A B -> exists G, Col G A I /\\ Col G B J /\\Col G C K.
Proof with assert_all.
intros.
assert_diffs.
Name G the intersection of the medians (A I) which is a median since H0 and (B J) which is a median since H1 of the non-flat triangle A B C H.
exists G; repeat split; try assumption.
Name D the symmetric of C wrt G.
assert_all.
show_distinct' A D.
permutation_intro_in_hyps.
assert (Par A D J G) by (apply (triangle_mid_par A D C G J H13 H14 H1)).
show_distinct' B G.
assert (Par G B A D) by (perm_apply (par_col_par A D G J B)).
show_distinct' B D.
assert (Par B D I G) by (apply (triangle_mid_par B D C G I H104 H14 H0)).
show_distinct' A G.
assert (Par G A D B) by (perm_apply (par_col_par B D G I A))...
show_distinct' D G.
assert (~ Col G A D) by (intro; search_contradiction).
assert (Parallelogram G A D B) by (apply (par_2_plg G A D B); finish).
Name Z the intersection of the diagonals (G D) and (A B) of the parallelogram H17...

*****
H177 : Cong D A G B
H176 : Cong A G B D
H175 : Cong D Z Z G
H24 : not (eq C D)
H23 : not (eq Z D)
H22 : not (eq Z G)
H15 : not (eq G C)
H83 : Col G Z D
H18 : Midpoint Z G D
H17 : Parallelogram G A D B
H16 : not (Col G A D)
H14 : not (eq D G)
H20 : not (eq J G)
H19 : not (eq I G)
H32 : Par G A D B
H106 : not (eq A G)
H40 : Par B D I G
H104 : not (eq B D)
H48 : Par G B A D
H102 : not (eq B G)
H56 : Par A D J G
H13 : not (eq A D)
H126 : Cong I C I B
H134 : Cong J C J A
H142 : Cong Z B Z A
H149 : Cong G D G C
H89 : Col I C B
H95 : Col J C A
H101 : Col Z B A
H110 : Col G D C
H3 : Midpoint G C D
D : Tpoint
H116 : Col J G B
H122 : Col I G A
G : Tpoint
H11 : not (eq Z A)
H12 : not (eq Z B)
H10 : not (eq I C)
H9 : not (eq I B)
H7 : not (eq J C)
H4 : not (eq J A)
H8 : not (eq A C)
H5 : not (eq B C)
H6 : not (eq A B)
H2 : Midpoint Z A B
Z : Tpoint
H1 : Midpoint J A C
H0 : Midpoint I B C
H : not (Col A B C)
A,B,C,I,J : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col G C Z
+++++
ColR.
-----
Lemma three_medians_intersect: forall A B C I J K, ~Col A B C -> Midpoint I B C -> Midpoint J A C -> Midpoint K A B -> exists G, Col G A I /\\ Col G B J /\\Col G C K.
Proof with assert_all.
intros.
assert_diffs.
Name G the intersection of the medians (A I) which is a median since H0 and (B J) which is a median since H1 of the non-flat triangle A B C H.
exists G; repeat split; try assumption.
Name D the symmetric of C wrt G.
assert_all.
show_distinct' A D.
permutation_intro_in_hyps.
assert (Par A D J G) by (apply (triangle_mid_par A D C G J H13 H14 H1)).
show_distinct' B G.
assert (Par G B A D) by (perm_apply (par_col_par A D G J B)).
show_distinct' B D.
assert (Par B D I G) by (apply (triangle_mid_par B D C G I H104 H14 H0)).
show_distinct' A G.
assert (Par G A D B) by (perm_apply (par_col_par B D G I A))...
show_distinct' D G.
assert (~ Col G A D) by (intro; search_contradiction).
assert (Parallelogram G A D B) by (apply (par_2_plg G A D B); finish).
Name Z the intersection of the diagonals (G D) and (A B) of the parallelogram H17...
ColR.

*****

*****

+++++
Qed.
-----
Lemma is_gravity_center_col : forall A B C G I,\n  is_gravity_center G A B C ->\n  Midpoint I A B ->\n  Col G I C.
-----
Lemma is_gravity_center_col : forall A B C G I, is_gravity_center G A B C -> Midpoint I A B -> Col G I C.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C G I : Tpoint) (_ : is_gravity_center G A B C) (_ : Midpoint I A B), Col G I C
+++++
Proof.
-----
Lemma is_gravity_center_col : forall A B C G I, is_gravity_center G A B C -> Midpoint I A B -> Col G I C.
Proof.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C G I : Tpoint) (_ : is_gravity_center G A B C) (_ : Midpoint I A B), Col G I C
+++++
intros.
-----
Lemma is_gravity_center_col : forall A B C G I, is_gravity_center G A B C -> Midpoint I A B -> Col G I C.
Proof.
intros.

*****
H0 : Midpoint I A B
H : is_gravity_center G A B C
A,B,C,G,I : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col G I C
+++++
unfold is_gravity_center in *.
-----
Lemma is_gravity_center_col : forall A B C G I, is_gravity_center G A B C -> Midpoint I A B -> Col G I C.
Proof.
intros.
unfold is_gravity_center in *.

*****
H0 : Midpoint I A B
H : and (not (Col A B C))\n (ex\n (fun I : Tpoint =>\n ex\n (fun J : Tpoint =>\n and (Midpoint I B C)\n (and (Midpoint J A C) (and (Col G A I) (Col G B J))))))
A,B,C,G,I : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col G I C
+++++
spliter.
-----
Lemma is_gravity_center_col : forall A B C G I, is_gravity_center G A B C -> Midpoint I A B -> Col G I C.
Proof.
intros.
unfold is_gravity_center in *.
spliter.

*****
H0 : Midpoint I A B
H1 : ex\n (fun I : Tpoint =>\n ex\n (fun J : Tpoint =>\n and (Midpoint I B C)\n (and (Midpoint J A C) (and (Col G A I) (Col G B J)))))
H : not (Col A B C)
A,B,C,G,I : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col G I C
+++++
destruct H1 as [J [K [Ha [Hb [Hc Hd]]]]].
-----
Lemma is_gravity_center_col : forall A B C G I, is_gravity_center G A B C -> Midpoint I A B -> Col G I C.
Proof.
intros.
unfold is_gravity_center in *.
spliter.
destruct H1 as [J [K [Ha [Hb [Hc Hd]]]]].

*****
H0 : Midpoint I A B
Hd : Col G B K
Hc : Col G A J
Hb : Midpoint K A C
Ha : Midpoint J B C
J,K : Tpoint
H : not (Col A B C)
A,B,C,G,I : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col G I C
+++++
elim (three_medians_intersect A B C J K I H);try assumption.
-----
Lemma is_gravity_center_col : forall A B C G I, is_gravity_center G A B C -> Midpoint I A B -> Col G I C.
Proof.
intros.
unfold is_gravity_center in *.
spliter.
destruct H1 as [J [K [Ha [Hb [Hc Hd]]]]].
elim (three_medians_intersect A B C J K I H);try assumption.

*****
H0 : Midpoint I A B
Hd : Col G B K
Hc : Col G A J
Hb : Midpoint K A C
Ha : Midpoint J B C
J,K : Tpoint
H : not (Col A B C)
A,B,C,G,I : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (x : Tpoint) (_ : and (Col x A J) (and (Col x B K) (Col x C I))), Col G I C
+++++
intro G';intros.
-----
Lemma is_gravity_center_col : forall A B C G I, is_gravity_center G A B C -> Midpoint I A B -> Col G I C.
Proof.
intros.
unfold is_gravity_center in *.
spliter.
destruct H1 as [J [K [Ha [Hb [Hc Hd]]]]].
elim (three_medians_intersect A B C J K I H);try assumption.
intro G';intros.

*****
H1 : and (Col G' A J) (and (Col G' B K) (Col G' C I))
G' : Tpoint
H0 : Midpoint I A B
Hd : Col G B K
Hc : Col G A J
Hb : Midpoint K A C
Ha : Midpoint J B C
J,K : Tpoint
H : not (Col A B C)
A,B,C,G,I : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col G I C
+++++
spliter.
-----
Lemma is_gravity_center_col : forall A B C G I, is_gravity_center G A B C -> Midpoint I A B -> Col G I C.
Proof.
intros.
unfold is_gravity_center in *.
spliter.
destruct H1 as [J [K [Ha [Hb [Hc Hd]]]]].
elim (three_medians_intersect A B C J K I H);try assumption.
intro G';intros.
spliter.

*****
H3 : Col G' C I
H2 : Col G' B K
H1 : Col G' A J
G' : Tpoint
H0 : Midpoint I A B
Hd : Col G B K
Hc : Col G A J
Hb : Midpoint K A C
Ha : Midpoint J B C
J,K : Tpoint
H : not (Col A B C)
A,B,C,G,I : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col G I C
+++++
assert (T:=is_gravity_center_exist_unique A B C H).
-----
Lemma is_gravity_center_col : forall A B C G I, is_gravity_center G A B C -> Midpoint I A B -> Col G I C.
Proof.
intros.
unfold is_gravity_center in *.
spliter.
destruct H1 as [J [K [Ha [Hb [Hc Hd]]]]].
elim (three_medians_intersect A B C J K I H);try assumption.
intro G';intros.
spliter.
assert (T:=is_gravity_center_exist_unique A B C H).

*****
T : ex (unique (fun G : Tpoint => is_gravity_center G A B C))
H3 : Col G' C I
H2 : Col G' B K
H1 : Col G' A J
G' : Tpoint
H0 : Midpoint I A B
Hd : Col G B K
Hc : Col G A J
Hb : Midpoint K A C
Ha : Midpoint J B C
J,K : Tpoint
H : not (Col A B C)
A,B,C,G,I : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col G I C
+++++
elim T.
-----
Lemma is_gravity_center_col : forall A B C G I, is_gravity_center G A B C -> Midpoint I A B -> Col G I C.
Proof.
intros.
unfold is_gravity_center in *.
spliter.
destruct H1 as [J [K [Ha [Hb [Hc Hd]]]]].
elim (three_medians_intersect A B C J K I H);try assumption.
intro G';intros.
spliter.
assert (T:=is_gravity_center_exist_unique A B C H).
elim T.

*****
T : ex (unique (fun G : Tpoint => is_gravity_center G A B C))
H3 : Col G' C I
H2 : Col G' B K
H1 : Col G' A J
G' : Tpoint
H0 : Midpoint I A B
Hd : Col G B K
Hc : Col G A J
Hb : Midpoint K A C
Ha : Midpoint J B C
J,K : Tpoint
H : not (Col A B C)
A,B,C,G,I : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (x : Tpoint) (_ : unique (fun G : Tpoint => is_gravity_center G A B C) x), Col G I C
+++++
intros G''.
-----
Lemma is_gravity_center_col : forall A B C G I, is_gravity_center G A B C -> Midpoint I A B -> Col G I C.
Proof.
intros.
unfold is_gravity_center in *.
spliter.
destruct H1 as [J [K [Ha [Hb [Hc Hd]]]]].
elim (three_medians_intersect A B C J K I H);try assumption.
intro G';intros.
spliter.
assert (T:=is_gravity_center_exist_unique A B C H).
elim T.
intros G''.

*****
G'' : Tpoint
T : ex (unique (fun G : Tpoint => is_gravity_center G A B C))
H3 : Col G' C I
H2 : Col G' B K
H1 : Col G' A J
G' : Tpoint
H0 : Midpoint I A B
Hd : Col G B K
Hc : Col G A J
Hb : Midpoint K A C
Ha : Midpoint J B C
J,K : Tpoint
H : not (Col A B C)
A,B,C,G,I : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : unique (fun G : Tpoint => is_gravity_center G A B C) G'', Col G I C
+++++
intros.
-----
Lemma is_gravity_center_col : forall A B C G I, is_gravity_center G A B C -> Midpoint I A B -> Col G I C.
Proof.
intros.
unfold is_gravity_center in *.
spliter.
destruct H1 as [J [K [Ha [Hb [Hc Hd]]]]].
elim (three_medians_intersect A B C J K I H);try assumption.
intro G';intros.
spliter.
assert (T:=is_gravity_center_exist_unique A B C H).
elim T.
intros G''.
intros.

*****
H4 : unique (fun G : Tpoint => is_gravity_center G A B C) G''
G'' : Tpoint
T : ex (unique (fun G : Tpoint => is_gravity_center G A B C))
H3 : Col G' C I
H2 : Col G' B K
H1 : Col G' A J
G' : Tpoint
H0 : Midpoint I A B
Hd : Col G B K
Hc : Col G A J
Hb : Midpoint K A C
Ha : Midpoint J B C
J,K : Tpoint
H : not (Col A B C)
A,B,C,G,I : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col G I C
+++++
unfold unique in *.
-----
Lemma is_gravity_center_col : forall A B C G I, is_gravity_center G A B C -> Midpoint I A B -> Col G I C.
Proof.
intros.
unfold is_gravity_center in *.
spliter.
destruct H1 as [J [K [Ha [Hb [Hc Hd]]]]].
elim (three_medians_intersect A B C J K I H);try assumption.
intro G';intros.
spliter.
assert (T:=is_gravity_center_exist_unique A B C H).
elim T.
intros G''.
intros.
unfold unique in *.

*****
H4 : and (is_gravity_center G'' A B C)\n (forall (x' : Tpoint) (_ : is_gravity_center x' A B C), eq G'' x')
G'' : Tpoint
T : ex\n (fun x : Tpoint =>\n and (is_gravity_center x A B C)\n (forall (x' : Tpoint) (_ : is_gravity_center x' A B C), eq x x'))
H3 : Col G' C I
H2 : Col G' B K
H1 : Col G' A J
G' : Tpoint
H0 : Midpoint I A B
Hd : Col G B K
Hc : Col G A J
Hb : Midpoint K A C
Ha : Midpoint J B C
J,K : Tpoint
H : not (Col A B C)
A,B,C,G,I : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col G I C
+++++
spliter.
-----
Lemma is_gravity_center_col : forall A B C G I, is_gravity_center G A B C -> Midpoint I A B -> Col G I C.
Proof.
intros.
unfold is_gravity_center in *.
spliter.
destruct H1 as [J [K [Ha [Hb [Hc Hd]]]]].
elim (three_medians_intersect A B C J K I H);try assumption.
intro G';intros.
spliter.
assert (T:=is_gravity_center_exist_unique A B C H).
elim T.
intros G''.
intros.
unfold unique in *.
spliter.

*****
H5 : forall (x' : Tpoint) (_ : is_gravity_center x' A B C), eq G'' x'
H4 : is_gravity_center G'' A B C
G'' : Tpoint
T : ex\n (fun x : Tpoint =>\n and (is_gravity_center x A B C)\n (forall (x' : Tpoint) (_ : is_gravity_center x' A B C), eq x x'))
H3 : Col G' C I
H2 : Col G' B K
H1 : Col G' A J
G' : Tpoint
H0 : Midpoint I A B
Hd : Col G B K
Hc : Col G A J
Hb : Midpoint K A C
Ha : Midpoint J B C
J,K : Tpoint
H : not (Col A B C)
A,B,C,G,I : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col G I C
+++++
assert (G''=G).
-----
Lemma is_gravity_center_col : forall A B C G I, is_gravity_center G A B C -> Midpoint I A B -> Col G I C.
Proof.
intros.
unfold is_gravity_center in *.
spliter.
destruct H1 as [J [K [Ha [Hb [Hc Hd]]]]].
elim (three_medians_intersect A B C J K I H);try assumption.
intro G';intros.
spliter.
assert (T:=is_gravity_center_exist_unique A B C H).
elim T.
intros G''.
intros.
unfold unique in *.
spliter.
assert (G''=G).

*****
H5 : forall (x' : Tpoint) (_ : is_gravity_center x' A B C), eq G'' x'
H4 : is_gravity_center G'' A B C
G'' : Tpoint
T : ex\n (fun x : Tpoint =>\n and (is_gravity_center x A B C)\n (forall (x' : Tpoint) (_ : is_gravity_center x' A B C), eq x x'))
H3 : Col G' C I
H2 : Col G' B K
H1 : Col G' A J
G' : Tpoint
H0 : Midpoint I A B
Hd : Col G B K
Hc : Col G A J
Hb : Midpoint K A C
Ha : Midpoint J B C
J,K : Tpoint
H : not (Col A B C)
A,B,C,G,I : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
eq G'' G
+++++
apply H5.
-----
Lemma is_gravity_center_col : forall A B C G I, is_gravity_center G A B C -> Midpoint I A B -> Col G I C.
Proof.
intros.
unfold is_gravity_center in *.
spliter.
destruct H1 as [J [K [Ha [Hb [Hc Hd]]]]].
elim (three_medians_intersect A B C J K I H);try assumption.
intro G';intros.
spliter.
assert (T:=is_gravity_center_exist_unique A B C H).
elim T.
intros G''.
intros.
unfold unique in *.
spliter.
assert (G''=G).
apply H5.

*****
H5 : forall (x' : Tpoint) (_ : is_gravity_center x' A B C), eq G'' x'
H4 : is_gravity_center G'' A B C
G'' : Tpoint
T : ex\n (fun x : Tpoint =>\n and (is_gravity_center x A B C)\n (forall (x' : Tpoint) (_ : is_gravity_center x' A B C), eq x x'))
H3 : Col G' C I
H2 : Col G' B K
H1 : Col G' A J
G' : Tpoint
H0 : Midpoint I A B
Hd : Col G B K
Hc : Col G A J
Hb : Midpoint K A C
Ha : Midpoint J B C
J,K : Tpoint
H : not (Col A B C)
A,B,C,G,I : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
is_gravity_center G A B C
+++++
unfold is_gravity_center.
-----
Lemma is_gravity_center_col : forall A B C G I, is_gravity_center G A B C -> Midpoint I A B -> Col G I C.
Proof.
intros.
unfold is_gravity_center in *.
spliter.
destruct H1 as [J [K [Ha [Hb [Hc Hd]]]]].
elim (three_medians_intersect A B C J K I H);try assumption.
intro G';intros.
spliter.
assert (T:=is_gravity_center_exist_unique A B C H).
elim T.
intros G''.
intros.
unfold unique in *.
spliter.
assert (G''=G).
apply H5.
unfold is_gravity_center.

*****
H5 : forall (x' : Tpoint) (_ : is_gravity_center x' A B C), eq G'' x'
H4 : is_gravity_center G'' A B C
G'' : Tpoint
T : ex\n (fun x : Tpoint =>\n and (is_gravity_center x A B C)\n (forall (x' : Tpoint) (_ : is_gravity_center x' A B C), eq x x'))
H3 : Col G' C I
H2 : Col G' B K
H1 : Col G' A J
G' : Tpoint
H0 : Midpoint I A B
Hd : Col G B K
Hc : Col G A J
Hb : Midpoint K A C
Ha : Midpoint J B C
J,K : Tpoint
H : not (Col A B C)
A,B,C,G,I : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (not (Col A B C)) (ex (fun I : Tpoint => ex (fun J : Tpoint => and (Midpoint I B C) (and (Midpoint J A C) (and (Col G A I) (Col G B J))))))
+++++
split;auto.
-----
Lemma is_gravity_center_col : forall A B C G I, is_gravity_center G A B C -> Midpoint I A B -> Col G I C.
Proof.
intros.
unfold is_gravity_center in *.
spliter.
destruct H1 as [J [K [Ha [Hb [Hc Hd]]]]].
elim (three_medians_intersect A B C J K I H);try assumption.
intro G';intros.
spliter.
assert (T:=is_gravity_center_exist_unique A B C H).
elim T.
intros G''.
intros.
unfold unique in *.
spliter.
assert (G''=G).
apply H5.
unfold is_gravity_center.
split;auto.

*****
H5 : forall (x' : Tpoint) (_ : is_gravity_center x' A B C), eq G'' x'
H4 : is_gravity_center G'' A B C
G'' : Tpoint
T : ex\n (fun x : Tpoint =>\n and (is_gravity_center x A B C)\n (forall (x' : Tpoint) (_ : is_gravity_center x' A B C), eq x x'))
H3 : Col G' C I
H2 : Col G' B K
H1 : Col G' A J
G' : Tpoint
H0 : Midpoint I A B
Hd : Col G B K
Hc : Col G A J
Hb : Midpoint K A C
Ha : Midpoint J B C
J,K : Tpoint
H : not (Col A B C)
A,B,C,G,I : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun I : Tpoint => ex (fun J : Tpoint => and (Midpoint I B C) (and (Midpoint J A C) (and (Col G A I) (Col G B J)))))
+++++
exists J.
-----
Lemma is_gravity_center_col : forall A B C G I, is_gravity_center G A B C -> Midpoint I A B -> Col G I C.
Proof.
intros.
unfold is_gravity_center in *.
spliter.
destruct H1 as [J [K [Ha [Hb [Hc Hd]]]]].
elim (three_medians_intersect A B C J K I H);try assumption.
intro G';intros.
spliter.
assert (T:=is_gravity_center_exist_unique A B C H).
elim T.
intros G''.
intros.
unfold unique in *.
spliter.
assert (G''=G).
apply H5.
unfold is_gravity_center.
split;auto.
exists J.

*****
H5 : forall (x' : Tpoint) (_ : is_gravity_center x' A B C), eq G'' x'
H4 : is_gravity_center G'' A B C
G'' : Tpoint
T : ex\n (fun x : Tpoint =>\n and (is_gravity_center x A B C)\n (forall (x' : Tpoint) (_ : is_gravity_center x' A B C), eq x x'))
H3 : Col G' C I
H2 : Col G' B K
H1 : Col G' A J
G' : Tpoint
H0 : Midpoint I A B
Hd : Col G B K
Hc : Col G A J
Hb : Midpoint K A C
Ha : Midpoint J B C
J,K : Tpoint
H : not (Col A B C)
A,B,C,G,I : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun J0 : Tpoint => and (Midpoint J B C) (and (Midpoint J0 A C) (and (Col G A J) (Col G B J0))))
+++++
exists K;auto.
-----
Lemma is_gravity_center_col : forall A B C G I, is_gravity_center G A B C -> Midpoint I A B -> Col G I C.
Proof.
intros.
unfold is_gravity_center in *.
spliter.
destruct H1 as [J [K [Ha [Hb [Hc Hd]]]]].
elim (three_medians_intersect A B C J K I H);try assumption.
intro G';intros.
spliter.
assert (T:=is_gravity_center_exist_unique A B C H).
elim T.
intros G''.
intros.
unfold unique in *.
spliter.
assert (G''=G).
apply H5.
unfold is_gravity_center.
split;auto.
exists J.
exists K;auto.

*****
H6 : eq G'' G
H5 : forall (x' : Tpoint) (_ : is_gravity_center x' A B C), eq G'' x'
H4 : is_gravity_center G'' A B C
G'' : Tpoint
T : ex\n (fun x : Tpoint =>\n and (is_gravity_center x A B C)\n (forall (x' : Tpoint) (_ : is_gravity_center x' A B C), eq x x'))
H3 : Col G' C I
H2 : Col G' B K
H1 : Col G' A J
G' : Tpoint
H0 : Midpoint I A B
Hd : Col G B K
Hc : Col G A J
Hb : Midpoint K A C
Ha : Midpoint J B C
J,K : Tpoint
H : not (Col A B C)
A,B,C,G,I : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col G I C
+++++
assert (G''=G').
-----
Lemma is_gravity_center_col : forall A B C G I, is_gravity_center G A B C -> Midpoint I A B -> Col G I C.
Proof.
intros.
unfold is_gravity_center in *.
spliter.
destruct H1 as [J [K [Ha [Hb [Hc Hd]]]]].
elim (three_medians_intersect A B C J K I H);try assumption.
intro G';intros.
spliter.
assert (T:=is_gravity_center_exist_unique A B C H).
elim T.
intros G''.
intros.
unfold unique in *.
spliter.
assert (G''=G).
apply H5.
unfold is_gravity_center.
split;auto.
exists J.
exists K;auto.
assert (G''=G').

*****
H6 : eq G'' G
H5 : forall (x' : Tpoint) (_ : is_gravity_center x' A B C), eq G'' x'
H4 : is_gravity_center G'' A B C
G'' : Tpoint
T : ex\n (fun x : Tpoint =>\n and (is_gravity_center x A B C)\n (forall (x' : Tpoint) (_ : is_gravity_center x' A B C), eq x x'))
H3 : Col G' C I
H2 : Col G' B K
H1 : Col G' A J
G' : Tpoint
H0 : Midpoint I A B
Hd : Col G B K
Hc : Col G A J
Hb : Midpoint K A C
Ha : Midpoint J B C
J,K : Tpoint
H : not (Col A B C)
A,B,C,G,I : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
eq G'' G'
+++++
apply H5.
-----
Lemma is_gravity_center_col : forall A B C G I, is_gravity_center G A B C -> Midpoint I A B -> Col G I C.
Proof.
intros.
unfold is_gravity_center in *.
spliter.
destruct H1 as [J [K [Ha [Hb [Hc Hd]]]]].
elim (three_medians_intersect A B C J K I H);try assumption.
intro G';intros.
spliter.
assert (T:=is_gravity_center_exist_unique A B C H).
elim T.
intros G''.
intros.
unfold unique in *.
spliter.
assert (G''=G).
apply H5.
unfold is_gravity_center.
split;auto.
exists J.
exists K;auto.
assert (G''=G').
apply H5.

*****
H6 : eq G'' G
H5 : forall (x' : Tpoint) (_ : is_gravity_center x' A B C), eq G'' x'
H4 : is_gravity_center G'' A B C
G'' : Tpoint
T : ex\n (fun x : Tpoint =>\n and (is_gravity_center x A B C)\n (forall (x' : Tpoint) (_ : is_gravity_center x' A B C), eq x x'))
H3 : Col G' C I
H2 : Col G' B K
H1 : Col G' A J
G' : Tpoint
H0 : Midpoint I A B
Hd : Col G B K
Hc : Col G A J
Hb : Midpoint K A C
Ha : Midpoint J B C
J,K : Tpoint
H : not (Col A B C)
A,B,C,G,I : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
is_gravity_center G' A B C
+++++
unfold is_gravity_center.
-----
Lemma is_gravity_center_col : forall A B C G I, is_gravity_center G A B C -> Midpoint I A B -> Col G I C.
Proof.
intros.
unfold is_gravity_center in *.
spliter.
destruct H1 as [J [K [Ha [Hb [Hc Hd]]]]].
elim (three_medians_intersect A B C J K I H);try assumption.
intro G';intros.
spliter.
assert (T:=is_gravity_center_exist_unique A B C H).
elim T.
intros G''.
intros.
unfold unique in *.
spliter.
assert (G''=G).
apply H5.
unfold is_gravity_center.
split;auto.
exists J.
exists K;auto.
assert (G''=G').
apply H5.
unfold is_gravity_center.

*****
H6 : eq G'' G
H5 : forall (x' : Tpoint) (_ : is_gravity_center x' A B C), eq G'' x'
H4 : is_gravity_center G'' A B C
G'' : Tpoint
T : ex\n (fun x : Tpoint =>\n and (is_gravity_center x A B C)\n (forall (x' : Tpoint) (_ : is_gravity_center x' A B C), eq x x'))
H3 : Col G' C I
H2 : Col G' B K
H1 : Col G' A J
G' : Tpoint
H0 : Midpoint I A B
Hd : Col G B K
Hc : Col G A J
Hb : Midpoint K A C
Ha : Midpoint J B C
J,K : Tpoint
H : not (Col A B C)
A,B,C,G,I : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (not (Col A B C)) (ex (fun I : Tpoint => ex (fun J : Tpoint => and (Midpoint I B C) (and (Midpoint J A C) (and (Col G' A I) (Col G' B J))))))
+++++
split;auto.
-----
Lemma is_gravity_center_col : forall A B C G I, is_gravity_center G A B C -> Midpoint I A B -> Col G I C.
Proof.
intros.
unfold is_gravity_center in *.
spliter.
destruct H1 as [J [K [Ha [Hb [Hc Hd]]]]].
elim (three_medians_intersect A B C J K I H);try assumption.
intro G';intros.
spliter.
assert (T:=is_gravity_center_exist_unique A B C H).
elim T.
intros G''.
intros.
unfold unique in *.
spliter.
assert (G''=G).
apply H5.
unfold is_gravity_center.
split;auto.
exists J.
exists K;auto.
assert (G''=G').
apply H5.
unfold is_gravity_center.
split;auto.

*****
H6 : eq G'' G
H5 : forall (x' : Tpoint) (_ : is_gravity_center x' A B C), eq G'' x'
H4 : is_gravity_center G'' A B C
G'' : Tpoint
T : ex\n (fun x : Tpoint =>\n and (is_gravity_center x A B C)\n (forall (x' : Tpoint) (_ : is_gravity_center x' A B C), eq x x'))
H3 : Col G' C I
H2 : Col G' B K
H1 : Col G' A J
G' : Tpoint
H0 : Midpoint I A B
Hd : Col G B K
Hc : Col G A J
Hb : Midpoint K A C
Ha : Midpoint J B C
J,K : Tpoint
H : not (Col A B C)
A,B,C,G,I : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun I : Tpoint => ex (fun J : Tpoint => and (Midpoint I B C) (and (Midpoint J A C) (and (Col G' A I) (Col G' B J)))))
+++++
exists J.
-----
Lemma is_gravity_center_col : forall A B C G I, is_gravity_center G A B C -> Midpoint I A B -> Col G I C.
Proof.
intros.
unfold is_gravity_center in *.
spliter.
destruct H1 as [J [K [Ha [Hb [Hc Hd]]]]].
elim (three_medians_intersect A B C J K I H);try assumption.
intro G';intros.
spliter.
assert (T:=is_gravity_center_exist_unique A B C H).
elim T.
intros G''.
intros.
unfold unique in *.
spliter.
assert (G''=G).
apply H5.
unfold is_gravity_center.
split;auto.
exists J.
exists K;auto.
assert (G''=G').
apply H5.
unfold is_gravity_center.
split;auto.
exists J.

*****
H6 : eq G'' G
H5 : forall (x' : Tpoint) (_ : is_gravity_center x' A B C), eq G'' x'
H4 : is_gravity_center G'' A B C
G'' : Tpoint
T : ex\n (fun x : Tpoint =>\n and (is_gravity_center x A B C)\n (forall (x' : Tpoint) (_ : is_gravity_center x' A B C), eq x x'))
H3 : Col G' C I
H2 : Col G' B K
H1 : Col G' A J
G' : Tpoint
H0 : Midpoint I A B
Hd : Col G B K
Hc : Col G A J
Hb : Midpoint K A C
Ha : Midpoint J B C
J,K : Tpoint
H : not (Col A B C)
A,B,C,G,I : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun J0 : Tpoint => and (Midpoint J B C) (and (Midpoint J0 A C) (and (Col G' A J) (Col G' B J0))))
+++++
exists K;auto.
-----
Lemma is_gravity_center_col : forall A B C G I, is_gravity_center G A B C -> Midpoint I A B -> Col G I C.
Proof.
intros.
unfold is_gravity_center in *.
spliter.
destruct H1 as [J [K [Ha [Hb [Hc Hd]]]]].
elim (three_medians_intersect A B C J K I H);try assumption.
intro G';intros.
spliter.
assert (T:=is_gravity_center_exist_unique A B C H).
elim T.
intros G''.
intros.
unfold unique in *.
spliter.
assert (G''=G).
apply H5.
unfold is_gravity_center.
split;auto.
exists J.
exists K;auto.
assert (G''=G').
apply H5.
unfold is_gravity_center.
split;auto.
exists J.
exists K;auto.

*****
H7 : eq G'' G'
H6 : eq G'' G
H5 : forall (x' : Tpoint) (_ : is_gravity_center x' A B C), eq G'' x'
H4 : is_gravity_center G'' A B C
G'' : Tpoint
T : ex\n (fun x : Tpoint =>\n and (is_gravity_center x A B C)\n (forall (x' : Tpoint) (_ : is_gravity_center x' A B C), eq x x'))
H3 : Col G' C I
H2 : Col G' B K
H1 : Col G' A J
G' : Tpoint
H0 : Midpoint I A B
Hd : Col G B K
Hc : Col G A J
Hb : Midpoint K A C
Ha : Midpoint J B C
J,K : Tpoint
H : not (Col A B C)
A,B,C,G,I : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col G I C
+++++
subst.
-----
Lemma is_gravity_center_col : forall A B C G I, is_gravity_center G A B C -> Midpoint I A B -> Col G I C.
Proof.
intros.
unfold is_gravity_center in *.
spliter.
destruct H1 as [J [K [Ha [Hb [Hc Hd]]]]].
elim (three_medians_intersect A B C J K I H);try assumption.
intro G';intros.
spliter.
assert (T:=is_gravity_center_exist_unique A B C H).
elim T.
intros G''.
intros.
unfold unique in *.
spliter.
assert (G''=G).
apply H5.
unfold is_gravity_center.
split;auto.
exists J.
exists K;auto.
assert (G''=G').
apply H5.
unfold is_gravity_center.
split;auto.
exists J.
exists K;auto.
subst.

*****
H5 : forall (x' : Tpoint) (_ : is_gravity_center x' A B C), eq G' x'
H4 : is_gravity_center G' A B C
T : ex\n (fun x : Tpoint =>\n and (is_gravity_center x A B C)\n (forall (x' : Tpoint) (_ : is_gravity_center x' A B C), eq x x'))
H3 : Col G' C I
H2 : Col G' B K
H1 : Col G' A J
H0 : Midpoint I A B
Hc : Col G' A J
Hd : Col G' B K
G' : Tpoint
Hb : Midpoint K A C
Ha : Midpoint J B C
J,K : Tpoint
H : not (Col A B C)
A,B,C,I : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col G' I C
+++++
subst.
-----
Lemma is_gravity_center_col : forall A B C G I, is_gravity_center G A B C -> Midpoint I A B -> Col G I C.
Proof.
intros.
unfold is_gravity_center in *.
spliter.
destruct H1 as [J [K [Ha [Hb [Hc Hd]]]]].
elim (three_medians_intersect A B C J K I H);try assumption.
intro G';intros.
spliter.
assert (T:=is_gravity_center_exist_unique A B C H).
elim T.
intros G''.
intros.
unfold unique in *.
spliter.
assert (G''=G).
apply H5.
unfold is_gravity_center.
split;auto.
exists J.
exists K;auto.
assert (G''=G').
apply H5.
unfold is_gravity_center.
split;auto.
exists J.
exists K;auto.
subst.
subst.

*****
H5 : forall (x' : Tpoint) (_ : is_gravity_center x' A B C), eq G' x'
H4 : is_gravity_center G' A B C
T : ex\n (fun x : Tpoint =>\n and (is_gravity_center x A B C)\n (forall (x' : Tpoint) (_ : is_gravity_center x' A B C), eq x x'))
H3 : Col G' C I
H2 : Col G' B K
H1 : Col G' A J
H0 : Midpoint I A B
Hc : Col G' A J
Hd : Col G' B K
G' : Tpoint
Hb : Midpoint K A C
Ha : Midpoint J B C
J,K : Tpoint
H : not (Col A B C)
A,B,C,I : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col G' I C
+++++
Col.
-----
Lemma is_gravity_center_col : forall A B C G I, is_gravity_center G A B C -> Midpoint I A B -> Col G I C.
Proof.
intros.
unfold is_gravity_center in *.
spliter.
destruct H1 as [J [K [Ha [Hb [Hc Hd]]]]].
elim (three_medians_intersect A B C J K I H);try assumption.
intro G';intros.
spliter.
assert (T:=is_gravity_center_exist_unique A B C H).
elim T.
intros G''.
intros.
unfold unique in *.
spliter.
assert (G''=G).
apply H5.
unfold is_gravity_center.
split;auto.
exists J.
exists K;auto.
assert (G''=G').
apply H5.
unfold is_gravity_center.
split;auto.
exists J.
exists K;auto.
subst.
subst.
Col.

*****

*****

+++++
Qed.
-----
Lemma is_gravity_center_diff_1 :\n forall A B C G,\n is_gravity_center G A B C ->\n G<>A.
-----
Lemma is_gravity_center_diff_1 : forall A B C G, is_gravity_center G A B C -> G<>A.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C G : Tpoint) (_ : is_gravity_center G A B C), not (eq G A)
+++++
Proof.
-----
Lemma is_gravity_center_diff_1 : forall A B C G, is_gravity_center G A B C -> G<>A.
Proof.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C G : Tpoint) (_ : is_gravity_center G A B C), not (eq G A)
+++++
intros.
-----
Lemma is_gravity_center_diff_1 : forall A B C G, is_gravity_center G A B C -> G<>A.
Proof.
intros.

*****
H : is_gravity_center G A B C
A,B,C,G : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq G A)
+++++
intro.
-----
Lemma is_gravity_center_diff_1 : forall A B C G, is_gravity_center G A B C -> G<>A.
Proof.
intros.
intro.

*****
H0 : eq G A
H : is_gravity_center G A B C
A,B,C,G : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
unfold is_gravity_center in *.
-----
Lemma is_gravity_center_diff_1 : forall A B C G, is_gravity_center G A B C -> G<>A.
Proof.
intros.
intro.
unfold is_gravity_center in *.

*****
H0 : eq G A
H : and (not (Col A B C))\n (ex\n (fun I : Tpoint =>\n ex\n (fun J : Tpoint =>\n and (Midpoint I B C)\n (and (Midpoint J A C) (and (Col G A I) (Col G B J))))))
A,B,C,G : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
spliter.
-----
Lemma is_gravity_center_diff_1 : forall A B C G, is_gravity_center G A B C -> G<>A.
Proof.
intros.
intro.
unfold is_gravity_center in *.
spliter.

*****
H0 : eq G A
H1 : ex\n (fun I : Tpoint =>\n ex\n (fun J : Tpoint =>\n and (Midpoint I B C)\n (and (Midpoint J A C) (and (Col G A I) (Col G B J)))))
H : not (Col A B C)
A,B,C,G : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
decompose [ex and] H1.
-----
Lemma is_gravity_center_diff_1 : forall A B C G, is_gravity_center G A B C -> G<>A.
Proof.
intros.
intro.
unfold is_gravity_center in *.
spliter.
decompose [ex and] H1.

*****
H6 : Col G B x0
H4 : Col G A x
H3 : Midpoint x0 A C
H2 : Midpoint x B C
x,x0 : Tpoint
H0 : eq G A
H1 : ex\n (fun I : Tpoint =>\n ex\n (fun J : Tpoint =>\n and (Midpoint I B C)\n (and (Midpoint J A C) (and (Col G A I) (Col G B J)))))
H : not (Col A B C)
A,B,C,G : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert_cols.
-----
Lemma is_gravity_center_diff_1 : forall A B C G, is_gravity_center G A B C -> G<>A.
Proof.
intros.
intro.
unfold is_gravity_center in *.
spliter.
decompose [ex and] H1.
assert_cols.

*****
H7 : Col x B C
H5 : Col x0 A C
H6 : Col G B x0
H4 : Col G A x
H3 : Midpoint x0 A C
H2 : Midpoint x B C
x,x0 : Tpoint
H0 : eq G A
H1 : ex\n (fun I : Tpoint =>\n ex\n (fun J : Tpoint =>\n and (Midpoint I B C)\n (and (Midpoint J A C) (and (Col G A I) (Col G B J)))))
H : not (Col A B C)
A,B,C,G : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply H.
-----
Lemma is_gravity_center_diff_1 : forall A B C G, is_gravity_center G A B C -> G<>A.
Proof.
intros.
intro.
unfold is_gravity_center in *.
spliter.
decompose [ex and] H1.
assert_cols.
apply H.

*****
H7 : Col x B C
H5 : Col x0 A C
H6 : Col G B x0
H4 : Col G A x
H3 : Midpoint x0 A C
H2 : Midpoint x B C
x,x0 : Tpoint
H0 : eq G A
H1 : ex\n (fun I : Tpoint =>\n ex\n (fun J : Tpoint =>\n and (Midpoint I B C)\n (and (Midpoint J A C) (and (Col G A I) (Col G B J)))))
H : not (Col A B C)
A,B,C,G : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A B C
+++++
treat_equalities.
-----
Lemma is_gravity_center_diff_1 : forall A B C G, is_gravity_center G A B C -> G<>A.
Proof.
intros.
intro.
unfold is_gravity_center in *.
spliter.
decompose [ex and] H1.
assert_cols.
apply H.
treat_equalities.

*****
H7 : Col x B C
H5 : Col x0 G C
H6 : Col G B x0
H3 : Midpoint x0 G C
H2 : Midpoint x B C
x,x0 : Tpoint
H : not (Col G B C)
H1 : ex\n (fun I : Tpoint =>\n ex\n (fun J : Tpoint =>\n and (Midpoint I B C)\n (and (Midpoint J G C) (and (Col G G I) (Col G B J)))))
B,C,G : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col G B C
+++++
assert_diffs.
-----
Lemma is_gravity_center_diff_1 : forall A B C G, is_gravity_center G A B C -> G<>A.
Proof.
intros.
intro.
unfold is_gravity_center in *.
spliter.
decompose [ex and] H1.
assert_cols.
apply H.
treat_equalities.
assert_diffs.

*****
H13 : not (eq x C)
H12 : not (eq x B)
H10 : not (eq x0 C)
H4 : not (eq x0 G)
H11 : not (eq G C)
H8 : not (eq B C)
H9 : not (eq G B)
H7 : Col x B C
H5 : Col x0 G C
H6 : Col G B x0
H3 : Midpoint x0 G C
H2 : Midpoint x B C
x,x0 : Tpoint
H : not (Col G B C)
H1 : ex\n (fun I : Tpoint =>\n ex\n (fun J : Tpoint =>\n and (Midpoint I B C)\n (and (Midpoint J G C) (and (Col G G I) (Col G B J)))))
B,C,G : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col G B C
+++++
ColR.
-----
Lemma is_gravity_center_diff_1 : forall A B C G, is_gravity_center G A B C -> G<>A.
Proof.
intros.
intro.
unfold is_gravity_center in *.
spliter.
decompose [ex and] H1.
assert_cols.
apply H.
treat_equalities.
assert_diffs.
ColR.

*****

*****

+++++
Qed.
-----
Lemma is_gravity_center_diff_2 :\n forall A B C G,\n is_gravity_center G A B C ->\n G<>B.
-----
Lemma is_gravity_center_diff_2 : forall A B C G, is_gravity_center G A B C -> G<>B.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C G : Tpoint) (_ : is_gravity_center G A B C), not (eq G B)
+++++
Proof.
-----
Lemma is_gravity_center_diff_2 : forall A B C G, is_gravity_center G A B C -> G<>B.
Proof.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C G : Tpoint) (_ : is_gravity_center G A B C), not (eq G B)
+++++
intros.
-----
Lemma is_gravity_center_diff_2 : forall A B C G, is_gravity_center G A B C -> G<>B.
Proof.
intros.

*****
H : is_gravity_center G A B C
A,B,C,G : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq G B)
+++++
intro.
-----
Lemma is_gravity_center_diff_2 : forall A B C G, is_gravity_center G A B C -> G<>B.
Proof.
intros.
intro.

*****
H0 : eq G B
H : is_gravity_center G A B C
A,B,C,G : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
unfold is_gravity_center in *.
-----
Lemma is_gravity_center_diff_2 : forall A B C G, is_gravity_center G A B C -> G<>B.
Proof.
intros.
intro.
unfold is_gravity_center in *.

*****
H0 : eq G B
H : and (not (Col A B C))\n (ex\n (fun I : Tpoint =>\n ex\n (fun J : Tpoint =>\n and (Midpoint I B C)\n (and (Midpoint J A C) (and (Col G A I) (Col G B J))))))
A,B,C,G : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
spliter.
-----
Lemma is_gravity_center_diff_2 : forall A B C G, is_gravity_center G A B C -> G<>B.
Proof.
intros.
intro.
unfold is_gravity_center in *.
spliter.

*****
H0 : eq G B
H1 : ex\n (fun I : Tpoint =>\n ex\n (fun J : Tpoint =>\n and (Midpoint I B C)\n (and (Midpoint J A C) (and (Col G A I) (Col G B J)))))
H : not (Col A B C)
A,B,C,G : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
decompose [ex and] H1.
-----
Lemma is_gravity_center_diff_2 : forall A B C G, is_gravity_center G A B C -> G<>B.
Proof.
intros.
intro.
unfold is_gravity_center in *.
spliter.
decompose [ex and] H1.

*****
H6 : Col G B x0
H4 : Col G A x
H3 : Midpoint x0 A C
H2 : Midpoint x B C
x,x0 : Tpoint
H0 : eq G B
H1 : ex\n (fun I : Tpoint =>\n ex\n (fun J : Tpoint =>\n and (Midpoint I B C)\n (and (Midpoint J A C) (and (Col G A I) (Col G B J)))))
H : not (Col A B C)
A,B,C,G : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert_cols.
-----
Lemma is_gravity_center_diff_2 : forall A B C G, is_gravity_center G A B C -> G<>B.
Proof.
intros.
intro.
unfold is_gravity_center in *.
spliter.
decompose [ex and] H1.
assert_cols.

*****
H7 : Col x B C
H5 : Col x0 A C
H6 : Col G B x0
H4 : Col G A x
H3 : Midpoint x0 A C
H2 : Midpoint x B C
x,x0 : Tpoint
H0 : eq G B
H1 : ex\n (fun I : Tpoint =>\n ex\n (fun J : Tpoint =>\n and (Midpoint I B C)\n (and (Midpoint J A C) (and (Col G A I) (Col G B J)))))
H : not (Col A B C)
A,B,C,G : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply H.
-----
Lemma is_gravity_center_diff_2 : forall A B C G, is_gravity_center G A B C -> G<>B.
Proof.
intros.
intro.
unfold is_gravity_center in *.
spliter.
decompose [ex and] H1.
assert_cols.
apply H.

*****
H7 : Col x B C
H5 : Col x0 A C
H6 : Col G B x0
H4 : Col G A x
H3 : Midpoint x0 A C
H2 : Midpoint x B C
x,x0 : Tpoint
H0 : eq G B
H1 : ex\n (fun I : Tpoint =>\n ex\n (fun J : Tpoint =>\n and (Midpoint I B C)\n (and (Midpoint J A C) (and (Col G A I) (Col G B J)))))
H : not (Col A B C)
A,B,C,G : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A B C
+++++
treat_equalities.
-----
Lemma is_gravity_center_diff_2 : forall A B C G, is_gravity_center G A B C -> G<>B.
Proof.
intros.
intro.
unfold is_gravity_center in *.
spliter.
decompose [ex and] H1.
assert_cols.
apply H.
treat_equalities.

*****
H7 : Col x G C
H5 : Col x0 A C
H4 : Col G A x
H3 : Midpoint x0 A C
H2 : Midpoint x G C
x,x0 : Tpoint
H : not (Col A G C)
H1 : ex\n (fun I : Tpoint =>\n ex\n (fun J : Tpoint =>\n and (Midpoint I G C)\n (and (Midpoint J A C) (and (Col G A I) (Col G G J)))))
A,C,G : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A G C
+++++
assert_diffs.
-----
Lemma is_gravity_center_diff_2 : forall A B C G, is_gravity_center G A B C -> G<>B.
Proof.
intros.
intro.
unfold is_gravity_center in *.
spliter.
decompose [ex and] H1.
assert_cols.
apply H.
treat_equalities.
assert_diffs.

*****
H13 : not (eq x C)
H12 : not (eq x G)
H10 : not (eq x0 C)
H6 : not (eq x0 A)
H11 : not (eq A C)
H8 : not (eq G C)
H9 : not (eq A G)
H7 : Col x G C
H5 : Col x0 A C
H4 : Col G A x
H3 : Midpoint x0 A C
H2 : Midpoint x G C
x,x0 : Tpoint
H : not (Col A G C)
H1 : ex\n (fun I : Tpoint =>\n ex\n (fun J : Tpoint =>\n and (Midpoint I G C)\n (and (Midpoint J A C) (and (Col G A I) (Col G G J)))))
A,C,G : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A G C
+++++
ColR.
-----
Lemma is_gravity_center_diff_2 : forall A B C G, is_gravity_center G A B C -> G<>B.
Proof.
intros.
intro.
unfold is_gravity_center in *.
spliter.
decompose [ex and] H1.
assert_cols.
apply H.
treat_equalities.
assert_diffs.
ColR.

*****

*****

+++++
Qed.
-----
Lemma is_gravity_center_diff_3 :\n forall A B C G,\n is_gravity_center G A B C ->\n G<>C.
-----
Lemma is_gravity_center_diff_3 : forall A B C G, is_gravity_center G A B C -> G<>C.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C G : Tpoint) (_ : is_gravity_center G A B C), not (eq G C)
+++++
Proof.
-----
Lemma is_gravity_center_diff_3 : forall A B C G, is_gravity_center G A B C -> G<>C.
Proof.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C G : Tpoint) (_ : is_gravity_center G A B C), not (eq G C)
+++++
intros.
-----
Lemma is_gravity_center_diff_3 : forall A B C G, is_gravity_center G A B C -> G<>C.
Proof.
intros.

*****
H : is_gravity_center G A B C
A,B,C,G : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq G C)
+++++
intro.
-----
Lemma is_gravity_center_diff_3 : forall A B C G, is_gravity_center G A B C -> G<>C.
Proof.
intros.
intro.

*****
H0 : eq G C
H : is_gravity_center G A B C
A,B,C,G : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
unfold is_gravity_center in *.
-----
Lemma is_gravity_center_diff_3 : forall A B C G, is_gravity_center G A B C -> G<>C.
Proof.
intros.
intro.
unfold is_gravity_center in *.

*****
H0 : eq G C
H : and (not (Col A B C))\n (ex\n (fun I : Tpoint =>\n ex\n (fun J : Tpoint =>\n and (Midpoint I B C)\n (and (Midpoint J A C) (and (Col G A I) (Col G B J))))))
A,B,C,G : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
spliter.
-----
Lemma is_gravity_center_diff_3 : forall A B C G, is_gravity_center G A B C -> G<>C.
Proof.
intros.
intro.
unfold is_gravity_center in *.
spliter.

*****
H0 : eq G C
H1 : ex\n (fun I : Tpoint =>\n ex\n (fun J : Tpoint =>\n and (Midpoint I B C)\n (and (Midpoint J A C) (and (Col G A I) (Col G B J)))))
H : not (Col A B C)
A,B,C,G : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
decompose [ex and] H1.
-----
Lemma is_gravity_center_diff_3 : forall A B C G, is_gravity_center G A B C -> G<>C.
Proof.
intros.
intro.
unfold is_gravity_center in *.
spliter.
decompose [ex and] H1.

*****
H6 : Col G B x0
H4 : Col G A x
H3 : Midpoint x0 A C
H2 : Midpoint x B C
x,x0 : Tpoint
H0 : eq G C
H1 : ex\n (fun I : Tpoint =>\n ex\n (fun J : Tpoint =>\n and (Midpoint I B C)\n (and (Midpoint J A C) (and (Col G A I) (Col G B J)))))
H : not (Col A B C)
A,B,C,G : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert_cols.
-----
Lemma is_gravity_center_diff_3 : forall A B C G, is_gravity_center G A B C -> G<>C.
Proof.
intros.
intro.
unfold is_gravity_center in *.
spliter.
decompose [ex and] H1.
assert_cols.

*****
H7 : Col x B C
H5 : Col x0 A C
H6 : Col G B x0
H4 : Col G A x
H3 : Midpoint x0 A C
H2 : Midpoint x B C
x,x0 : Tpoint
H0 : eq G C
H1 : ex\n (fun I : Tpoint =>\n ex\n (fun J : Tpoint =>\n and (Midpoint I B C)\n (and (Midpoint J A C) (and (Col G A I) (Col G B J)))))
H : not (Col A B C)
A,B,C,G : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply H.
-----
Lemma is_gravity_center_diff_3 : forall A B C G, is_gravity_center G A B C -> G<>C.
Proof.
intros.
intro.
unfold is_gravity_center in *.
spliter.
decompose [ex and] H1.
assert_cols.
apply H.

*****
H7 : Col x B C
H5 : Col x0 A C
H6 : Col G B x0
H4 : Col G A x
H3 : Midpoint x0 A C
H2 : Midpoint x B C
x,x0 : Tpoint
H0 : eq G C
H1 : ex\n (fun I : Tpoint =>\n ex\n (fun J : Tpoint =>\n and (Midpoint I B C)\n (and (Midpoint J A C) (and (Col G A I) (Col G B J)))))
H : not (Col A B C)
A,B,C,G : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A B C
+++++
treat_equalities.
-----
Lemma is_gravity_center_diff_3 : forall A B C G, is_gravity_center G A B C -> G<>C.
Proof.
intros.
intro.
unfold is_gravity_center in *.
spliter.
decompose [ex and] H1.
assert_cols.
apply H.
treat_equalities.

*****
H5 : Col x0 A G
H7 : Col x B G
H6 : Col G B x0
H4 : Col G A x
H2 : Midpoint x B G
H3 : Midpoint x0 A G
x,x0 : Tpoint
H : not (Col A B G)
H1 : ex\n (fun I : Tpoint =>\n ex\n (fun J : Tpoint =>\n and (Midpoint I B G)\n (and (Midpoint J A G) (and (Col G A I) (Col G B J)))))
A,B,G : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A B G
+++++
assert_diffs.
-----
Lemma is_gravity_center_diff_3 : forall A B C G, is_gravity_center G A B C -> G<>C.
Proof.
intros.
intro.
unfold is_gravity_center in *.
spliter.
decompose [ex and] H1.
assert_cols.
apply H.
treat_equalities.
assert_diffs.

*****
H14 : not (eq x G)
H13 : not (eq x B)
H11 : not (eq x0 G)
H8 : not (eq x0 A)
H12 : not (eq A G)
H9 : not (eq B G)
H10 : not (eq A B)
H5 : Col x0 A G
H7 : Col x B G
H6 : Col G B x0
H4 : Col G A x
H2 : Midpoint x B G
H3 : Midpoint x0 A G
x,x0 : Tpoint
H : not (Col A B G)
H1 : ex\n (fun I : Tpoint =>\n ex\n (fun J : Tpoint =>\n and (Midpoint I B G)\n (and (Midpoint J A G) (and (Col G A I) (Col G B J)))))
A,B,G : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A B G
+++++
ColR.
-----
Lemma is_gravity_center_diff_3 : forall A B C G, is_gravity_center G A B C -> G<>C.
Proof.
intros.
intro.
unfold is_gravity_center in *.
spliter.
decompose [ex and] H1.
assert_cols.
apply H.
treat_equalities.
assert_diffs.
ColR.

*****

*****

+++++
Qed.
-----
Lemma is_gravity_center_third :\n forall A B C G G' A',\n is_gravity_center G A B C ->\n Midpoint G' A G ->\n Midpoint A' B C ->\n Midpoint G A' G'.
-----
Lemma is_gravity_center_third : forall A B C G G' A', is_gravity_center G A B C -> Midpoint G' A G -> Midpoint A' B C -> Midpoint G A' G'.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C G G' A' : Tpoint) (_ : is_gravity_center G A B C) (_ : Midpoint G' A G) (_ : Midpoint A' B C), Midpoint G A' G'
+++++
Proof.
-----
Lemma is_gravity_center_third : forall A B C G G' A', is_gravity_center G A B C -> Midpoint G' A G -> Midpoint A' B C -> Midpoint G A' G'.
Proof.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C G G' A' : Tpoint) (_ : is_gravity_center G A B C) (_ : Midpoint G' A G) (_ : Midpoint A' B C), Midpoint G A' G'
+++++
intros.
-----
Lemma is_gravity_center_third : forall A B C G G' A', is_gravity_center G A B C -> Midpoint G' A G -> Midpoint A' B C -> Midpoint G A' G'.
Proof.
intros.

*****
H1 : Midpoint A' B C
H0 : Midpoint G' A G
H : is_gravity_center G A B C
A,B,C,G,G',A' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Midpoint G A' G'
+++++
Name C' the midpoint of A and B.
-----
Lemma is_gravity_center_third : forall A B C G G' A', is_gravity_center G A B C -> Midpoint G' A G -> Midpoint A' B C -> Midpoint G A' G'.
Proof.
intros.
Name C' the midpoint of A and B.

*****
H3 : Midpoint C' A B
C' : Tpoint
H1 : Midpoint A' B C
H0 : Midpoint G' A G
H : is_gravity_center G A B C
A,B,C,G,G',A' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Midpoint G A' G'
+++++
assert (Col G C' C) by (apply is_gravity_center_col with A B; Col).
-----
Lemma is_gravity_center_third : forall A B C G G' A', is_gravity_center G A B C -> Midpoint G' A G -> Midpoint A' B C -> Midpoint G A' G'.
Proof.
intros.
Name C' the midpoint of A and B.
assert (Col G C' C) by (apply is_gravity_center_col with A B; Col).

*****
H2 : Col G C' C
H3 : Midpoint C' A B
C' : Tpoint
H1 : Midpoint A' B C
H0 : Midpoint G' A G
H : is_gravity_center G A B C
A,B,C,G,G',A' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Midpoint G A' G'
+++++
unfold is_gravity_center in *.
-----
Lemma is_gravity_center_third : forall A B C G G' A', is_gravity_center G A B C -> Midpoint G' A G -> Midpoint A' B C -> Midpoint G A' G'.
Proof.
intros.
Name C' the midpoint of A and B.
assert (Col G C' C) by (apply is_gravity_center_col with A B; Col).
unfold is_gravity_center in *.

*****
H2 : Col G C' C
H3 : Midpoint C' A B
C' : Tpoint
H1 : Midpoint A' B C
H0 : Midpoint G' A G
H : and (not (Col A B C))\n (ex\n (fun I : Tpoint =>\n ex\n (fun J : Tpoint =>\n and (Midpoint I B C)\n (and (Midpoint J A C) (and (Col G A I) (Col G B J))))))
A,B,C,G,G',A' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Midpoint G A' G'
+++++
spliter.
-----
Lemma is_gravity_center_third : forall A B C G G' A', is_gravity_center G A B C -> Midpoint G' A G -> Midpoint A' B C -> Midpoint G A' G'.
Proof.
intros.
Name C' the midpoint of A and B.
assert (Col G C' C) by (apply is_gravity_center_col with A B; Col).
unfold is_gravity_center in *.
spliter.

*****
H2 : Col G C' C
H3 : Midpoint C' A B
C' : Tpoint
H1 : Midpoint A' B C
H0 : Midpoint G' A G
H4 : ex\n (fun I : Tpoint =>\n ex\n (fun J : Tpoint =>\n and (Midpoint I B C)\n (and (Midpoint J A C) (and (Col G A I) (Col G B J)))))
H : not (Col A B C)
A,B,C,G,G',A' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Midpoint G A' G'
+++++
destruct H4 as [A'' [B' HIJ]].
-----
Lemma is_gravity_center_third : forall A B C G G' A', is_gravity_center G A B C -> Midpoint G' A G -> Midpoint A' B C -> Midpoint G A' G'.
Proof.
intros.
Name C' the midpoint of A and B.
assert (Col G C' C) by (apply is_gravity_center_col with A B; Col).
unfold is_gravity_center in *.
spliter.
destruct H4 as [A'' [B' HIJ]].

*****
H2 : Col G C' C
H3 : Midpoint C' A B
C' : Tpoint
H1 : Midpoint A' B C
H0 : Midpoint G' A G
HIJ : and (Midpoint A'' B C)\n (and (Midpoint B' A C) (and (Col G A A'') (Col G B B')))
A'',B' : Tpoint
H : not (Col A B C)
A,B,C,G,G',A' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Midpoint G A' G'
+++++
spliter.
-----
Lemma is_gravity_center_third : forall A B C G G' A', is_gravity_center G A B C -> Midpoint G' A G -> Midpoint A' B C -> Midpoint G A' G'.
Proof.
intros.
Name C' the midpoint of A and B.
assert (Col G C' C) by (apply is_gravity_center_col with A B; Col).
unfold is_gravity_center in *.
spliter.
destruct H4 as [A'' [B' HIJ]].
spliter.

*****
H2 : Col G C' C
H3 : Midpoint C' A B
C' : Tpoint
H1 : Midpoint A' B C
H0 : Midpoint G' A G
H7 : Col G B B'
H6 : Col G A A''
H5 : Midpoint B' A C
H4 : Midpoint A'' B C
A'',B' : Tpoint
H : not (Col A B C)
A,B,C,G,G',A' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Midpoint G A' G'
+++++
treat_equalities.
-----
Lemma is_gravity_center_third : forall A B C G G' A', is_gravity_center G A B C -> Midpoint G' A G -> Midpoint A' B C -> Midpoint G A' G'.
Proof.
intros.
Name C' the midpoint of A and B.
assert (Col G C' C) by (apply is_gravity_center_col with A B; Col).
unfold is_gravity_center in *.
spliter.
destruct H4 as [A'' [B' HIJ]].
spliter.
treat_equalities.

*****
H2 : Col G C' C
H3 : Midpoint C' A B
C' : Tpoint
H0 : Midpoint G' A G
H7 : Col G B B'
H6 : Col G A A'
H5 : Midpoint B' A C
H4 : Midpoint A' B C
B' : Tpoint
H : not (Col A B C)
A,B,C,G,G',A' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Midpoint G A' G'
+++++
assert_diffs.
-----
Lemma is_gravity_center_third : forall A B C G G' A', is_gravity_center G A B C -> Midpoint G' A G -> Midpoint A' B C -> Midpoint G A' G'.
Proof.
intros.
Name C' the midpoint of A and B.
assert (Col G C' C) by (apply is_gravity_center_col with A B; Col).
unfold is_gravity_center in *.
spliter.
destruct H4 as [A'' [B' HIJ]].
spliter.
treat_equalities.
assert_diffs.

*****
H16 : not (eq C' B)
H15 : not (eq C' A)
H14 : not (eq A' C)
H13 : not (eq A' B)
H11 : not (eq B' C)
H8 : not (eq B' A)
H12 : not (eq A C)
H9 : not (eq B C)
H10 : not (eq A B)
H2 : Col G C' C
H3 : Midpoint C' A B
C' : Tpoint
H0 : Midpoint G' A G
H7 : Col G B B'
H6 : Col G A A'
H5 : Midpoint B' A C
H4 : Midpoint A' B C
B' : Tpoint
H : not (Col A B C)
A,B,C,G,G',A' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Midpoint G A' G'
+++++
Name G'' the midpoint of C and G.
-----
Lemma is_gravity_center_third : forall A B C G G' A', is_gravity_center G A B C -> Midpoint G' A G -> Midpoint A' B C -> Midpoint G A' G'.
Proof.
intros.
Name C' the midpoint of A and B.
assert (Col G C' C) by (apply is_gravity_center_col with A B; Col).
unfold is_gravity_center in *.
spliter.
destruct H4 as [A'' [B' HIJ]].
spliter.
treat_equalities.
assert_diffs.
Name G'' the midpoint of C and G.

*****
H17 : Midpoint G'' C G
G'' : Tpoint
H16 : not (eq C' B)
H15 : not (eq C' A)
H14 : not (eq A' C)
H13 : not (eq A' B)
H11 : not (eq B' C)
H8 : not (eq B' A)
H12 : not (eq A C)
H9 : not (eq B C)
H10 : not (eq A B)
H2 : Col G C' C
H3 : Midpoint C' A B
C' : Tpoint
H0 : Midpoint G' A G
H7 : Col G B B'
H6 : Col G A A'
H5 : Midpoint B' A C
H4 : Midpoint A' B C
B' : Tpoint
H : not (Col A B C)
A,B,C,G,G',A' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Midpoint G A' G'
+++++
assert (HPar : Parallelogram C' A' G'' G').
-----
Lemma is_gravity_center_third : forall A B C G G' A', is_gravity_center G A B C -> Midpoint G' A G -> Midpoint A' B C -> Midpoint G A' G'.
Proof.
intros.
Name C' the midpoint of A and B.
assert (Col G C' C) by (apply is_gravity_center_col with A B; Col).
unfold is_gravity_center in *.
spliter.
destruct H4 as [A'' [B' HIJ]].
spliter.
treat_equalities.
assert_diffs.
Name G'' the midpoint of C and G.
assert (HPar : Parallelogram C' A' G'' G').

*****
H17 : Midpoint G'' C G
G'' : Tpoint
H16 : not (eq C' B)
H15 : not (eq C' A)
H14 : not (eq A' C)
H13 : not (eq A' B)
H11 : not (eq B' C)
H8 : not (eq B' A)
H12 : not (eq A C)
H9 : not (eq B C)
H10 : not (eq A B)
H2 : Col G C' C
H3 : Midpoint C' A B
C' : Tpoint
H0 : Midpoint G' A G
H7 : Col G B B'
H6 : Col G A A'
H5 : Midpoint B' A C
H4 : Midpoint A' B C
B' : Tpoint
H : not (Col A B C)
A,B,C,G,G',A' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Parallelogram C' A' G'' G'
+++++
apply (varignon' A B C G C' A' G'' G'); finish.
-----
Lemma is_gravity_center_third : forall A B C G G' A', is_gravity_center G A B C -> Midpoint G' A G -> Midpoint A' B C -> Midpoint G A' G'.
Proof.
intros.
Name C' the midpoint of A and B.
assert (Col G C' C) by (apply is_gravity_center_col with A B; Col).
unfold is_gravity_center in *.
spliter.
destruct H4 as [A'' [B' HIJ]].
spliter.
treat_equalities.
assert_diffs.
Name G'' the midpoint of C and G.
assert (HPar : Parallelogram C' A' G'' G').
apply (varignon' A B C G C' A' G'' G'); finish.

*****
HPar : Parallelogram C' A' G'' G'
H17 : Midpoint G'' C G
G'' : Tpoint
H16 : not (eq C' B)
H15 : not (eq C' A)
H14 : not (eq A' C)
H13 : not (eq A' B)
H11 : not (eq B' C)
H8 : not (eq B' A)
H12 : not (eq A C)
H9 : not (eq B C)
H10 : not (eq A B)
H2 : Col G C' C
H3 : Midpoint C' A B
C' : Tpoint
H0 : Midpoint G' A G
H7 : Col G B B'
H6 : Col G A A'
H5 : Midpoint B' A C
H4 : Midpoint A' B C
B' : Tpoint
H : not (Col A B C)
A,B,C,G,G',A' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Midpoint G A' G'
+++++
apply parallelogram_to_plg in HPar.
-----
Lemma is_gravity_center_third : forall A B C G G' A', is_gravity_center G A B C -> Midpoint G' A G -> Midpoint A' B C -> Midpoint G A' G'.
Proof.
intros.
Name C' the midpoint of A and B.
assert (Col G C' C) by (apply is_gravity_center_col with A B; Col).
unfold is_gravity_center in *.
spliter.
destruct H4 as [A'' [B' HIJ]].
spliter.
treat_equalities.
assert_diffs.
Name G'' the midpoint of C and G.
assert (HPar : Parallelogram C' A' G'' G').
apply (varignon' A B C G C' A' G'' G'); finish.
apply parallelogram_to_plg in HPar.

*****
HPar : Plg C' A' G'' G'
H17 : Midpoint G'' C G
G'' : Tpoint
H16 : not (eq C' B)
H15 : not (eq C' A)
H14 : not (eq A' C)
H13 : not (eq A' B)
H11 : not (eq B' C)
H8 : not (eq B' A)
H12 : not (eq A C)
H9 : not (eq B C)
H10 : not (eq A B)
H2 : Col G C' C
H3 : Midpoint C' A B
C' : Tpoint
H0 : Midpoint G' A G
H7 : Col G B B'
H6 : Col G A A'
H5 : Midpoint B' A C
H4 : Midpoint A' B C
B' : Tpoint
H : not (Col A B C)
A,B,C,G,G',A' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Midpoint G A' G'
+++++
destruct HPar as [HDiff [I [HCol1 HCol2]]].
-----
Lemma is_gravity_center_third : forall A B C G G' A', is_gravity_center G A B C -> Midpoint G' A G -> Midpoint A' B C -> Midpoint G A' G'.
Proof.
intros.
Name C' the midpoint of A and B.
assert (Col G C' C) by (apply is_gravity_center_col with A B; Col).
unfold is_gravity_center in *.
spliter.
destruct H4 as [A'' [B' HIJ]].
spliter.
treat_equalities.
assert_diffs.
Name G'' the midpoint of C and G.
assert (HPar : Parallelogram C' A' G'' G').
apply (varignon' A B C G C' A' G'' G'); finish.
apply parallelogram_to_plg in HPar.
destruct HPar as [HDiff [I [HCol1 HCol2]]].

*****
HCol2 : Midpoint I A' G'
HCol1 : Midpoint I C' G''
I : Tpoint
HDiff : or (not (eq C' G'')) (not (eq A' G'))
H17 : Midpoint G'' C G
G'' : Tpoint
H16 : not (eq C' B)
H15 : not (eq C' A)
H14 : not (eq A' C)
H13 : not (eq A' B)
H11 : not (eq B' C)
H8 : not (eq B' A)
H12 : not (eq A C)
H9 : not (eq B C)
H10 : not (eq A B)
H2 : Col G C' C
H3 : Midpoint C' A B
C' : Tpoint
H0 : Midpoint G' A G
H7 : Col G B B'
H6 : Col G A A'
H5 : Midpoint B' A C
H4 : Midpoint A' B C
B' : Tpoint
H : not (Col A B C)
A,B,C,G,G',A' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Midpoint G A' G'
+++++
assert (G = I); try (treat_equalities; unfold Midpoint in *; spliter; eCong).
-----
Lemma is_gravity_center_third : forall A B C G G' A', is_gravity_center G A B C -> Midpoint G' A G -> Midpoint A' B C -> Midpoint G A' G'.
Proof.
intros.
Name C' the midpoint of A and B.
assert (Col G C' C) by (apply is_gravity_center_col with A B; Col).
unfold is_gravity_center in *.
spliter.
destruct H4 as [A'' [B' HIJ]].
spliter.
treat_equalities.
assert_diffs.
Name G'' the midpoint of C and G.
assert (HPar : Parallelogram C' A' G'' G').
apply (varignon' A B C G C' A' G'' G'); finish.
apply parallelogram_to_plg in HPar.
destruct HPar as [HDiff [I [HCol1 HCol2]]].
assert (G = I); try (treat_equalities; unfold Midpoint in *; spliter; eCong).

*****
H18 : Cong A' I I G'
H1 : Bet A' I G'
H20 : Cong C' I I G''
H19 : Bet C' I G''
I : Tpoint
HDiff : or (not (eq C' G'')) (not (eq A' G'))
H21 : Cong C G'' G'' G
H17 : Bet C G'' G
G'' : Tpoint
H16 : not (eq C' B)
H15 : not (eq C' A)
H14 : not (eq A' C)
H13 : not (eq A' B)
H11 : not (eq B' C)
H8 : not (eq B' A)
H12 : not (eq A C)
H9 : not (eq B C)
H10 : not (eq A B)
H2 : Col G C' C
H22 : Cong A C' C' B
H3 : Bet A C' B
C' : Tpoint
H23 : Cong A G' G' G
H0 : Bet A G' G
H7 : Col G B B'
H6 : Col G A A'
H24 : Cong A B' B' C
H5 : Bet A B' C
H25 : Cong B A' A' C
H4 : Bet B A' C
B' : Tpoint
H : not (Col A B C)
A,B,C,G,G',A' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
eq G I
+++++
show_distinct G A; assert_diffs; try (apply H; assert_cols; ColR).
-----
Lemma is_gravity_center_third : forall A B C G G' A', is_gravity_center G A B C -> Midpoint G' A G -> Midpoint A' B C -> Midpoint G A' G'.
Proof.
intros.
Name C' the midpoint of A and B.
assert (Col G C' C) by (apply is_gravity_center_col with A B; Col).
unfold is_gravity_center in *.
spliter.
destruct H4 as [A'' [B' HIJ]].
spliter.
treat_equalities.
assert_diffs.
Name G'' the midpoint of C and G.
assert (HPar : Parallelogram C' A' G'' G').
apply (varignon' A B C G C' A' G'' G'); finish.
apply parallelogram_to_plg in HPar.
destruct HPar as [HDiff [I [HCol1 HCol2]]].
assert (G = I); try (treat_equalities; unfold Midpoint in *; spliter; eCong).
show_distinct G A; assert_diffs; try (apply H; assert_cols; ColR).

*****
H26 : not (eq G A)
H18 : Cong A' I I G'
H1 : Bet A' I G'
H20 : Cong C' I I G''
H19 : Bet C' I G''
I : Tpoint
HDiff : or (not (eq C' G'')) (not (eq A' G'))
H21 : Cong C G'' G'' G
H17 : Bet C G'' G
G'' : Tpoint
H16 : not (eq C' B)
H15 : not (eq C' A)
H14 : not (eq A' C)
H13 : not (eq A' B)
H11 : not (eq B' C)
H8 : not (eq B' A)
H12 : not (eq A C)
H9 : not (eq B C)
H10 : not (eq A B)
H2 : Col G C' C
H22 : Cong A C' C' B
H3 : Bet A C' B
C' : Tpoint
H23 : Cong A G' G' G
H0 : Bet A G' G
H7 : Col G B B'
H6 : Col G A A'
H24 : Cong A B' B' C
H5 : Bet A B' C
H25 : Cong B A' A' C
H4 : Bet B A' C
B' : Tpoint
H : not (Col A B C)
A,B,C,G,G',A' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
eq G I
+++++
assert_diffs; assert_cols.
-----
Lemma is_gravity_center_third : forall A B C G G' A', is_gravity_center G A B C -> Midpoint G' A G -> Midpoint A' B C -> Midpoint G A' G'.
Proof.
intros.
Name C' the midpoint of A and B.
assert (Col G C' C) by (apply is_gravity_center_col with A B; Col).
unfold is_gravity_center in *.
spliter.
destruct H4 as [A'' [B' HIJ]].
spliter.
treat_equalities.
assert_diffs.
Name G'' the midpoint of C and G.
assert (HPar : Parallelogram C' A' G'' G').
apply (varignon' A B C G C' A' G'' G'); finish.
apply parallelogram_to_plg in HPar.
destruct HPar as [HDiff [I [HCol1 HCol2]]].
assert (G = I); try (treat_equalities; unfold Midpoint in *; spliter; eCong).
show_distinct G A; assert_diffs; try (apply H; assert_cols; ColR).
assert_diffs; assert_cols.

*****
H33 : Col B A' C
H32 : Col A B' C
H31 : Col A G' G
H30 : Col A C' B
H29 : Col C G'' G
H28 : Col C' I G''
H27 : Col A' I G'
H26 : not (eq G A)
H18 : Cong A' I I G'
H1 : Bet A' I G'
H20 : Cong C' I I G''
H19 : Bet C' I G''
I : Tpoint
HDiff : or (not (eq C' G'')) (not (eq A' G'))
H21 : Cong C G'' G'' G
H17 : Bet C G'' G
G'' : Tpoint
H16 : not (eq C' B)
H15 : not (eq C' A)
H14 : not (eq A' C)
H13 : not (eq A' B)
H11 : not (eq B' C)
H8 : not (eq B' A)
H12 : not (eq A C)
H9 : not (eq B C)
H10 : not (eq A B)
H2 : Col G C' C
H22 : Cong A C' C' B
H3 : Bet A C' B
C' : Tpoint
H23 : Cong A G' G' G
H0 : Bet A G' G
H7 : Col G B B'
H6 : Col G A A'
H24 : Cong A B' B' C
H5 : Bet A B' C
H25 : Cong B A' A' C
H4 : Bet B A' C
B' : Tpoint
H : not (Col A B C)
A,B,C,G,G',A' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
eq G I
+++++
assert (~ Col A C G) by (intro; apply H; ColR).
-----
Lemma is_gravity_center_third : forall A B C G G' A', is_gravity_center G A B C -> Midpoint G' A G -> Midpoint A' B C -> Midpoint G A' G'.
Proof.
intros.
Name C' the midpoint of A and B.
assert (Col G C' C) by (apply is_gravity_center_col with A B; Col).
unfold is_gravity_center in *.
spliter.
destruct H4 as [A'' [B' HIJ]].
spliter.
treat_equalities.
assert_diffs.
Name G'' the midpoint of C and G.
assert (HPar : Parallelogram C' A' G'' G').
apply (varignon' A B C G C' A' G'' G'); finish.
apply parallelogram_to_plg in HPar.
destruct HPar as [HDiff [I [HCol1 HCol2]]].
assert (G = I); try (treat_equalities; unfold Midpoint in *; spliter; eCong).
show_distinct G A; assert_diffs; try (apply H; assert_cols; ColR).
assert_diffs; assert_cols.
assert (~ Col A C G) by (intro; apply H; ColR).

*****
H34 : not (Col A C G)
H33 : Col B A' C
H32 : Col A B' C
H31 : Col A G' G
H30 : Col A C' B
H29 : Col C G'' G
H28 : Col C' I G''
H27 : Col A' I G'
H26 : not (eq G A)
H18 : Cong A' I I G'
H1 : Bet A' I G'
H20 : Cong C' I I G''
H19 : Bet C' I G''
I : Tpoint
HDiff : or (not (eq C' G'')) (not (eq A' G'))
H21 : Cong C G'' G'' G
H17 : Bet C G'' G
G'' : Tpoint
H16 : not (eq C' B)
H15 : not (eq C' A)
H14 : not (eq A' C)
H13 : not (eq A' B)
H11 : not (eq B' C)
H8 : not (eq B' A)
H12 : not (eq A C)
H9 : not (eq B C)
H10 : not (eq A B)
H2 : Col G C' C
H22 : Cong A C' C' B
H3 : Bet A C' B
C' : Tpoint
H23 : Cong A G' G' G
H0 : Bet A G' G
H7 : Col G B B'
H6 : Col G A A'
H24 : Cong A B' B' C
H5 : Bet A B' C
H25 : Cong B A' A' C
H4 : Bet B A' C
B' : Tpoint
H : not (Col A B C)
A,B,C,G,G',A' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
eq G I
+++++
elim HDiff; clear HDiff; intro; show_distinct A' G'; show_distinct C' G''; Col; assert_diffs; assert_cols; try (apply H; ColR); apply l6_21 with A G C G; assert_diffs; Col; ColR.
-----
Lemma is_gravity_center_third : forall A B C G G' A', is_gravity_center G A B C -> Midpoint G' A G -> Midpoint A' B C -> Midpoint G A' G'.
Proof.
intros.
Name C' the midpoint of A and B.
assert (Col G C' C) by (apply is_gravity_center_col with A B; Col).
unfold is_gravity_center in *.
spliter.
destruct H4 as [A'' [B' HIJ]].
spliter.
treat_equalities.
assert_diffs.
Name G'' the midpoint of C and G.
assert (HPar : Parallelogram C' A' G'' G').
apply (varignon' A B C G C' A' G'' G'); finish.
apply parallelogram_to_plg in HPar.
destruct HPar as [HDiff [I [HCol1 HCol2]]].
assert (G = I); try (treat_equalities; unfold Midpoint in *; spliter; eCong).
show_distinct G A; assert_diffs; try (apply H; assert_cols; ColR).
assert_diffs; assert_cols.
assert (~ Col A C G) by (intro; apply H; ColR).
elim HDiff; clear HDiff; intro; show_distinct A' G'; show_distinct C' G''; Col; assert_diffs; assert_cols; try (apply H; ColR); apply l6_21 with A G C G; assert_diffs; Col; ColR.

*****

*****

+++++
Qed.
-----
Lemma is_gravity_center_third_reci :\n forall A B C G A' A'',\n Midpoint A' B C ->\n Midpoint A'' A G ->\n Midpoint G A' A'' ->\n ~ Col A B C ->\n is_gravity_center G A B C.
-----
Lemma is_gravity_center_third_reci : forall A B C G A' A'', Midpoint A' B C -> Midpoint A'' A G -> Midpoint G A' A'' -> ~ Col A B C -> is_gravity_center G A B C.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C G A' A'' : Tpoint) (_ : Midpoint A' B C) (_ : Midpoint A'' A G) (_ : Midpoint G A' A'') (_ : not (Col A B C)), is_gravity_center G A B C
+++++
Proof.
-----
Lemma is_gravity_center_third_reci : forall A B C G A' A'', Midpoint A' B C -> Midpoint A'' A G -> Midpoint G A' A'' -> ~ Col A B C -> is_gravity_center G A B C.
Proof.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C G A' A'' : Tpoint) (_ : Midpoint A' B C) (_ : Midpoint A'' A G) (_ : Midpoint G A' A'') (_ : not (Col A B C)), is_gravity_center G A B C
+++++
intros A B C G A' A'' HMid1 HMid2 HMid3 HNC.
-----
Lemma is_gravity_center_third_reci : forall A B C G A' A'', Midpoint A' B C -> Midpoint A'' A G -> Midpoint G A' A'' -> ~ Col A B C -> is_gravity_center G A B C.
Proof.
intros A B C G A' A'' HMid1 HMid2 HMid3 HNC.

*****
HNC : not (Col A B C)
HMid3 : Midpoint G A' A''
HMid2 : Midpoint A'' A G
HMid1 : Midpoint A' B C
A,B,C,G,A',A'' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
is_gravity_center G A B C
+++++
split; Col.
-----
Lemma is_gravity_center_third_reci : forall A B C G A' A'', Midpoint A' B C -> Midpoint A'' A G -> Midpoint G A' A'' -> ~ Col A B C -> is_gravity_center G A B C.
Proof.
intros A B C G A' A'' HMid1 HMid2 HMid3 HNC.
split; Col.

*****
HNC : not (Col A B C)
HMid3 : Midpoint G A' A''
HMid2 : Midpoint A'' A G
HMid1 : Midpoint A' B C
A,B,C,G,A',A'' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun I : Tpoint => ex (fun J : Tpoint => and (Midpoint I B C) (and (Midpoint J A C) (and (Col G A I) (Col G B J)))))
+++++
Name B' the midpoint of A and C.
-----
Lemma is_gravity_center_third_reci : forall A B C G A' A'', Midpoint A' B C -> Midpoint A'' A G -> Midpoint G A' A'' -> ~ Col A B C -> is_gravity_center G A B C.
Proof.
intros A B C G A' A'' HMid1 HMid2 HMid3 HNC.
split; Col.
Name B' the midpoint of A and C.

*****
H0 : Midpoint B' A C
B' : Tpoint
HNC : not (Col A B C)
HMid3 : Midpoint G A' A''
HMid2 : Midpoint A'' A G
HMid1 : Midpoint A' B C
A,B,C,G,A',A'' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun I : Tpoint => ex (fun J : Tpoint => and (Midpoint I B C) (and (Midpoint J A C) (and (Col G A I) (Col G B J)))))
+++++
Name C' the midpoint of A and B.
-----
Lemma is_gravity_center_third_reci : forall A B C G A' A'', Midpoint A' B C -> Midpoint A'' A G -> Midpoint G A' A'' -> ~ Col A B C -> is_gravity_center G A B C.
Proof.
intros A B C G A' A'' HMid1 HMid2 HMid3 HNC.
split; Col.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.

*****
H1 : Midpoint C' A B
C' : Tpoint
H0 : Midpoint B' A C
B' : Tpoint
HNC : not (Col A B C)
HMid3 : Midpoint G A' A''
HMid2 : Midpoint A'' A G
HMid1 : Midpoint A' B C
A,B,C,G,A',A'' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun I : Tpoint => ex (fun J : Tpoint => and (Midpoint I B C) (and (Midpoint J A C) (and (Col G A I) (Col G B J)))))
+++++
exists A'; exists B'; split; Col; try split; Col; split; try (assert (A <> G) by (intro; treat_equalities; assert_cols; Col); assert_diffs; assert_cols; ColR).
-----
Lemma is_gravity_center_third_reci : forall A B C G A' A'', Midpoint A' B C -> Midpoint A'' A G -> Midpoint G A' A'' -> ~ Col A B C -> is_gravity_center G A B C.
Proof.
intros A B C G A' A'' HMid1 HMid2 HMid3 HNC.
split; Col.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
exists A'; exists B'; split; Col; try split; Col; split; try (assert (A <> G) by (intro; treat_equalities; assert_cols; Col); assert_diffs; assert_cols; ColR).

*****
H1 : Midpoint C' A B
C' : Tpoint
H0 : Midpoint B' A C
B' : Tpoint
HNC : not (Col A B C)
HMid3 : Midpoint G A' A''
HMid2 : Midpoint A'' A G
HMid1 : Midpoint A' B C
A,B,C,G,A',A'' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col G B B'
+++++
Name B'' the midpoint of B and G.
-----
Lemma is_gravity_center_third_reci : forall A B C G A' A'', Midpoint A' B C -> Midpoint A'' A G -> Midpoint G A' A'' -> ~ Col A B C -> is_gravity_center G A B C.
Proof.
intros A B C G A' A'' HMid1 HMid2 HMid3 HNC.
split; Col.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
exists A'; exists B'; split; Col; try split; Col; split; try (assert (A <> G) by (intro; treat_equalities; assert_cols; Col); assert_diffs; assert_cols; ColR).
Name B'' the midpoint of B and G.

*****
H2 : Midpoint B'' B G
B'' : Tpoint
H1 : Midpoint C' A B
C' : Tpoint
H0 : Midpoint B' A C
B' : Tpoint
HNC : not (Col A B C)
HMid3 : Midpoint G A' A''
HMid2 : Midpoint A'' A G
HMid1 : Midpoint A' B C
A,B,C,G,A',A'' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col G B B'
+++++
assert (HB' := symmetric_point_construction B'' G).
-----
Lemma is_gravity_center_third_reci : forall A B C G A' A'', Midpoint A' B C -> Midpoint A'' A G -> Midpoint G A' A'' -> ~ Col A B C -> is_gravity_center G A B C.
Proof.
intros A B C G A' A'' HMid1 HMid2 HMid3 HNC.
split; Col.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
exists A'; exists B'; split; Col; try split; Col; split; try (assert (A <> G) by (intro; treat_equalities; assert_cols; Col); assert_diffs; assert_cols; ColR).
Name B'' the midpoint of B and G.
assert (HB' := symmetric_point_construction B'' G).

*****
HB' : ex (fun P' : Tpoint => Midpoint G B'' P')
H2 : Midpoint B'' B G
B'' : Tpoint
H1 : Midpoint C' A B
C' : Tpoint
H0 : Midpoint B' A C
B' : Tpoint
HNC : not (Col A B C)
HMid3 : Midpoint G A' A''
HMid2 : Midpoint A'' A G
HMid1 : Midpoint A' B C
A,B,C,G,A',A'' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col G B B'
+++++
destruct HB' as [B''' HB'].
-----
Lemma is_gravity_center_third_reci : forall A B C G A' A'', Midpoint A' B C -> Midpoint A'' A G -> Midpoint G A' A'' -> ~ Col A B C -> is_gravity_center G A B C.
Proof.
intros A B C G A' A'' HMid1 HMid2 HMid3 HNC.
split; Col.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
exists A'; exists B'; split; Col; try split; Col; split; try (assert (A <> G) by (intro; treat_equalities; assert_cols; Col); assert_diffs; assert_cols; ColR).
Name B'' the midpoint of B and G.
assert (HB' := symmetric_point_construction B'' G).
destruct HB' as [B''' HB'].

*****
HB' : Midpoint G B'' B'''
B''' : Tpoint
H2 : Midpoint B'' B G
B'' : Tpoint
H1 : Midpoint C' A B
C' : Tpoint
H0 : Midpoint B' A C
B' : Tpoint
HNC : not (Col A B C)
HMid3 : Midpoint G A' A''
HMid2 : Midpoint A'' A G
HMid1 : Midpoint A' B C
A,B,C,G,A',A'' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col G B B'
+++++
assert (HPar1 : Par B A A' B').
-----
Lemma is_gravity_center_third_reci : forall A B C G A' A'', Midpoint A' B C -> Midpoint A'' A G -> Midpoint G A' A'' -> ~ Col A B C -> is_gravity_center G A B C.
Proof.
intros A B C G A' A'' HMid1 HMid2 HMid3 HNC.
split; Col.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
exists A'; exists B'; split; Col; try split; Col; split; try (assert (A <> G) by (intro; treat_equalities; assert_cols; Col); assert_diffs; assert_cols; ColR).
Name B'' the midpoint of B and G.
assert (HB' := symmetric_point_construction B'' G).
destruct HB' as [B''' HB'].
assert (HPar1 : Par B A A' B').

*****
HB' : Midpoint G B'' B'''
B''' : Tpoint
H2 : Midpoint B'' B G
B'' : Tpoint
H1 : Midpoint C' A B
C' : Tpoint
H0 : Midpoint B' A C
B' : Tpoint
HNC : not (Col A B C)
HMid3 : Midpoint G A' A''
HMid2 : Midpoint A'' A G
HMid1 : Midpoint A' B C
A,B,C,G,A',A'' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par B A A' B'
+++++
apply triangle_mid_par with C; assert_diffs; try split; unfold Midpoint in *; spliter; Between; Cong.
-----
Lemma is_gravity_center_third_reci : forall A B C G A' A'', Midpoint A' B C -> Midpoint A'' A G -> Midpoint G A' A'' -> ~ Col A B C -> is_gravity_center G A B C.
Proof.
intros A B C G A' A'' HMid1 HMid2 HMid3 HNC.
split; Col.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
exists A'; exists B'; split; Col; try split; Col; split; try (assert (A <> G) by (intro; treat_equalities; assert_cols; Col); assert_diffs; assert_cols; ColR).
Name B'' the midpoint of B and G.
assert (HB' := symmetric_point_construction B'' G).
destruct HB' as [B''' HB'].
assert (HPar1 : Par B A A' B').

*****
HPar1 : Par B A A' B'
HB' : Midpoint G B'' B'''
B''' : Tpoint
H2 : Midpoint B'' B G
B'' : Tpoint
H1 : Midpoint C' A B
C' : Tpoint
H0 : Midpoint B' A C
B' : Tpoint
HNC : not (Col A B C)
HMid3 : Midpoint G A' A''
HMid2 : Midpoint A'' A G
HMid1 : Midpoint A' B C
A,B,C,G,A',A'' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col G B B'
+++++
assert (HCong1 : Cong A C' A' B').
-----
Lemma is_gravity_center_third_reci : forall A B C G A' A'', Midpoint A' B C -> Midpoint A'' A G -> Midpoint G A' A'' -> ~ Col A B C -> is_gravity_center G A B C.
Proof.
intros A B C G A' A'' HMid1 HMid2 HMid3 HNC.
split; Col.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
exists A'; exists B'; split; Col; try split; Col; split; try (assert (A <> G) by (intro; treat_equalities; assert_cols; Col); assert_diffs; assert_cols; ColR).
Name B'' the midpoint of B and G.
assert (HB' := symmetric_point_construction B'' G).
destruct HB' as [B''' HB'].
assert (HPar1 : Par B A A' B').
assert (HCong1 : Cong A C' A' B').

*****
HPar1 : Par B A A' B'
HB' : Midpoint G B'' B'''
B''' : Tpoint
H2 : Midpoint B'' B G
B'' : Tpoint
H1 : Midpoint C' A B
C' : Tpoint
H0 : Midpoint B' A C
B' : Tpoint
HNC : not (Col A B C)
HMid3 : Midpoint G A' A''
HMid2 : Midpoint A'' A G
HMid1 : Midpoint A' B C
A,B,C,G,A',A'' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong A C' A' B'
+++++
assert (H := triangle_mid_par_cong A B C A' B' C'); destruct H as [Hc1 [Hc2 [Hc3 [H Hc4]]]]; assert_diffs; Cong.
-----
Lemma is_gravity_center_third_reci : forall A B C G A' A'', Midpoint A' B C -> Midpoint A'' A G -> Midpoint G A' A'' -> ~ Col A B C -> is_gravity_center G A B C.
Proof.
intros A B C G A' A'' HMid1 HMid2 HMid3 HNC.
split; Col.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
exists A'; exists B'; split; Col; try split; Col; split; try (assert (A <> G) by (intro; treat_equalities; assert_cols; Col); assert_diffs; assert_cols; ColR).
Name B'' the midpoint of B and G.
assert (HB' := symmetric_point_construction B'' G).
destruct HB' as [B''' HB'].
assert (HPar1 : Par B A A' B').
assert (HCong1 : Cong A C' A' B').

*****
HCong1 : Cong A C' A' B'
HPar1 : Par B A A' B'
HB' : Midpoint G B'' B'''
B''' : Tpoint
H2 : Midpoint B'' B G
B'' : Tpoint
H1 : Midpoint C' A B
C' : Tpoint
H0 : Midpoint B' A C
B' : Tpoint
HNC : not (Col A B C)
HMid3 : Midpoint G A' A''
HMid2 : Midpoint A'' A G
HMid1 : Midpoint A' B C
A,B,C,G,A',A'' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col G B B'
+++++
assert (HPar2 : Par A B A'' B'').
-----
Lemma is_gravity_center_third_reci : forall A B C G A' A'', Midpoint A' B C -> Midpoint A'' A G -> Midpoint G A' A'' -> ~ Col A B C -> is_gravity_center G A B C.
Proof.
intros A B C G A' A'' HMid1 HMid2 HMid3 HNC.
split; Col.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
exists A'; exists B'; split; Col; try split; Col; split; try (assert (A <> G) by (intro; treat_equalities; assert_cols; Col); assert_diffs; assert_cols; ColR).
Name B'' the midpoint of B and G.
assert (HB' := symmetric_point_construction B'' G).
destruct HB' as [B''' HB'].
assert (HPar1 : Par B A A' B').
assert (HCong1 : Cong A C' A' B').
assert (HPar2 : Par A B A'' B'').

*****
HCong1 : Cong A C' A' B'
HPar1 : Par B A A' B'
HB' : Midpoint G B'' B'''
B''' : Tpoint
H2 : Midpoint B'' B G
B'' : Tpoint
H1 : Midpoint C' A B
C' : Tpoint
H0 : Midpoint B' A C
B' : Tpoint
HNC : not (Col A B C)
HMid3 : Midpoint G A' A''
HMid2 : Midpoint A'' A G
HMid1 : Midpoint A' B C
A,B,C,G,A',A'' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par A B A'' B''
+++++
apply triangle_mid_par with G; assert_diffs; try split; unfold Midpoint in *; spliter; Between; Cong.
-----
Lemma is_gravity_center_third_reci : forall A B C G A' A'', Midpoint A' B C -> Midpoint A'' A G -> Midpoint G A' A'' -> ~ Col A B C -> is_gravity_center G A B C.
Proof.
intros A B C G A' A'' HMid1 HMid2 HMid3 HNC.
split; Col.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
exists A'; exists B'; split; Col; try split; Col; split; try (assert (A <> G) by (intro; treat_equalities; assert_cols; Col); assert_diffs; assert_cols; ColR).
Name B'' the midpoint of B and G.
assert (HB' := symmetric_point_construction B'' G).
destruct HB' as [B''' HB'].
assert (HPar1 : Par B A A' B').
assert (HCong1 : Cong A C' A' B').
assert (HPar2 : Par A B A'' B'').

*****
HPar2 : Par A B A'' B''
HCong1 : Cong A C' A' B'
HPar1 : Par B A A' B'
HB' : Midpoint G B'' B'''
B''' : Tpoint
H2 : Midpoint B'' B G
B'' : Tpoint
H1 : Midpoint C' A B
C' : Tpoint
H0 : Midpoint B' A C
B' : Tpoint
HNC : not (Col A B C)
HMid3 : Midpoint G A' A''
HMid2 : Midpoint A'' A G
HMid1 : Midpoint A' B C
A,B,C,G,A',A'' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col G B B'
+++++
assert (HCong2 : Cong A C' A'' B'').
-----
Lemma is_gravity_center_third_reci : forall A B C G A' A'', Midpoint A' B C -> Midpoint A'' A G -> Midpoint G A' A'' -> ~ Col A B C -> is_gravity_center G A B C.
Proof.
intros A B C G A' A'' HMid1 HMid2 HMid3 HNC.
split; Col.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
exists A'; exists B'; split; Col; try split; Col; split; try (assert (A <> G) by (intro; treat_equalities; assert_cols; Col); assert_diffs; assert_cols; ColR).
Name B'' the midpoint of B and G.
assert (HB' := symmetric_point_construction B'' G).
destruct HB' as [B''' HB'].
assert (HPar1 : Par B A A' B').
assert (HCong1 : Cong A C' A' B').
assert (HPar2 : Par A B A'' B'').
assert (HCong2 : Cong A C' A'' B'').

*****
HPar2 : Par A B A'' B''
HCong1 : Cong A C' A' B'
HPar1 : Par B A A' B'
HB' : Midpoint G B'' B'''
B''' : Tpoint
H2 : Midpoint B'' B G
B'' : Tpoint
H1 : Midpoint C' A B
C' : Tpoint
H0 : Midpoint B' A C
B' : Tpoint
HNC : not (Col A B C)
HMid3 : Midpoint G A' A''
HMid2 : Midpoint A'' A G
HMid1 : Midpoint A' B C
A,B,C,G,A',A'' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong A C' A'' B''
+++++
assert (H := triangle_mid_par_cong A B G B'' A'' C'); destruct H as [Hc1 [Hc2 [Hc3 [H Hc4]]]]; assert_diffs; Cong; intro; treat_equalities; assert_cols; Col.
-----
Lemma is_gravity_center_third_reci : forall A B C G A' A'', Midpoint A' B C -> Midpoint A'' A G -> Midpoint G A' A'' -> ~ Col A B C -> is_gravity_center G A B C.
Proof.
intros A B C G A' A'' HMid1 HMid2 HMid3 HNC.
split; Col.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
exists A'; exists B'; split; Col; try split; Col; split; try (assert (A <> G) by (intro; treat_equalities; assert_cols; Col); assert_diffs; assert_cols; ColR).
Name B'' the midpoint of B and G.
assert (HB' := symmetric_point_construction B'' G).
destruct HB' as [B''' HB'].
assert (HPar1 : Par B A A' B').
assert (HCong1 : Cong A C' A' B').
assert (HPar2 : Par A B A'' B'').
assert (HCong2 : Cong A C' A'' B'').
assert (H := triangle_mid_par_cong A B G B'' A'' C'); destruct H as [Hc1 [Hc2 [Hc3 [H Hc4]]]]; assert_diffs; Cong; intro; treat_equalities; assert_cols; Col.

*****
H14 : Col B''' B''' B'''
H13 : Col A' B''' C
H12 : Col B''' A' C'
H2 : Col C' A B'''
H1 : Col B' A C
H : not (eq A' B')
H11 : not (eq C' B''')
H10 : not (eq C' A)
H9 : not (eq A' C)
H8 : not (eq A' B''')
H6 : not (eq B' C)
H3 : not (eq B' A)
H7 : not (eq A C)
HPar2 : Par A B''' C' B'''
H5 : not (eq A B''')
H4 : not (eq B''' C)
HCong1 : Cong A C' A' B'
H0 : Midpoint B' A C
HMid2 : Midpoint C' A B'''
HMid3 : Midpoint B''' A' C'
HMid1 : Midpoint A' B''' C
C' : Tpoint
HNC : not (Col A B''' C)
HPar1 : Par B''' A A' B'
B' : Tpoint
HB' : Midpoint B''' B''' B'''
A,C,A',B''' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert_diffs; apply HNC; ColR.
-----
Lemma is_gravity_center_third_reci : forall A B C G A' A'', Midpoint A' B C -> Midpoint A'' A G -> Midpoint G A' A'' -> ~ Col A B C -> is_gravity_center G A B C.
Proof.
intros A B C G A' A'' HMid1 HMid2 HMid3 HNC.
split; Col.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
exists A'; exists B'; split; Col; try split; Col; split; try (assert (A <> G) by (intro; treat_equalities; assert_cols; Col); assert_diffs; assert_cols; ColR).
Name B'' the midpoint of B and G.
assert (HB' := symmetric_point_construction B'' G).
destruct HB' as [B''' HB'].
assert (HPar1 : Par B A A' B').
assert (HCong1 : Cong A C' A' B').
assert (HPar2 : Par A B A'' B'').
assert (HCong2 : Cong A C' A'' B'').

*****
HCong2 : Cong A C' A'' B''
HPar2 : Par A B A'' B''
HCong1 : Cong A C' A' B'
HPar1 : Par B A A' B'
HB' : Midpoint G B'' B'''
B''' : Tpoint
H2 : Midpoint B'' B G
B'' : Tpoint
H1 : Midpoint C' A B
C' : Tpoint
H0 : Midpoint B' A C
B' : Tpoint
HNC : not (Col A B C)
HMid3 : Midpoint G A' A''
HMid2 : Midpoint A'' A G
HMid1 : Midpoint A' B C
A,B,C,G,A',A'' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col G B B'
+++++
assert (HPar3 : Par A'' B'' A' B''').
-----
Lemma is_gravity_center_third_reci : forall A B C G A' A'', Midpoint A' B C -> Midpoint A'' A G -> Midpoint G A' A'' -> ~ Col A B C -> is_gravity_center G A B C.
Proof.
intros A B C G A' A'' HMid1 HMid2 HMid3 HNC.
split; Col.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
exists A'; exists B'; split; Col; try split; Col; split; try (assert (A <> G) by (intro; treat_equalities; assert_cols; Col); assert_diffs; assert_cols; ColR).
Name B'' the midpoint of B and G.
assert (HB' := symmetric_point_construction B'' G).
destruct HB' as [B''' HB'].
assert (HPar1 : Par B A A' B').
assert (HCong1 : Cong A C' A' B').
assert (HPar2 : Par A B A'' B'').
assert (HCong2 : Cong A C' A'' B'').
assert (HPar3 : Par A'' B'' A' B''').

*****
HCong2 : Cong A C' A'' B''
HPar2 : Par A B A'' B''
HCong1 : Cong A C' A' B'
HPar1 : Par B A A' B'
HB' : Midpoint G B'' B'''
B''' : Tpoint
H2 : Midpoint B'' B G
B'' : Tpoint
H1 : Midpoint C' A B
C' : Tpoint
H0 : Midpoint B' A C
B' : Tpoint
HNC : not (Col A B C)
HMid3 : Midpoint G A' A''
HMid2 : Midpoint A'' A G
HMid1 : Midpoint A' B C
A,B,C,G,A',A'' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par A'' B'' A' B'''
+++++
apply plg_par_1; try (intro; treat_equalities; Col; assert_diffs; assert_cols; apply HNC; ColR).
-----
Lemma is_gravity_center_third_reci : forall A B C G A' A'', Midpoint A' B C -> Midpoint A'' A G -> Midpoint G A' A'' -> ~ Col A B C -> is_gravity_center G A B C.
Proof.
intros A B C G A' A'' HMid1 HMid2 HMid3 HNC.
split; Col.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
exists A'; exists B'; split; Col; try split; Col; split; try (assert (A <> G) by (intro; treat_equalities; assert_cols; Col); assert_diffs; assert_cols; ColR).
Name B'' the midpoint of B and G.
assert (HB' := symmetric_point_construction B'' G).
destruct HB' as [B''' HB'].
assert (HPar1 : Par B A A' B').
assert (HCong1 : Cong A C' A' B').
assert (HPar2 : Par A B A'' B'').
assert (HCong2 : Cong A C' A'' B'').
assert (HPar3 : Par A'' B'' A' B''').
apply plg_par_1; try (intro; treat_equalities; Col; assert_diffs; assert_cols; apply HNC; ColR).

*****
HCong2 : Cong A C' A'' B''
HPar2 : Par A B A'' B''
HCong1 : Cong A C' A' B'
HPar1 : Par B A A' B'
HB' : Midpoint G B'' B'''
B''' : Tpoint
H2 : Midpoint B'' B G
B'' : Tpoint
H1 : Midpoint C' A B
C' : Tpoint
H0 : Midpoint B' A C
B' : Tpoint
HNC : not (Col A B C)
HMid3 : Midpoint G A' A''
HMid2 : Midpoint A'' A G
HMid1 : Midpoint A' B C
A,B,C,G,A',A'' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Parallelogram A'' B'' A' B'''
+++++
apply mid_plg_1 with G; try (intro; treat_equalities; assert_cols; Col); unfold Midpoint in *; spliter; split; Between; Cong.
-----
Lemma is_gravity_center_third_reci : forall A B C G A' A'', Midpoint A' B C -> Midpoint A'' A G -> Midpoint G A' A'' -> ~ Col A B C -> is_gravity_center G A B C.
Proof.
intros A B C G A' A'' HMid1 HMid2 HMid3 HNC.
split; Col.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
exists A'; exists B'; split; Col; try split; Col; split; try (assert (A <> G) by (intro; treat_equalities; assert_cols; Col); assert_diffs; assert_cols; ColR).
Name B'' the midpoint of B and G.
assert (HB' := symmetric_point_construction B'' G).
destruct HB' as [B''' HB'].
assert (HPar1 : Par B A A' B').
assert (HCong1 : Cong A C' A' B').
assert (HPar2 : Par A B A'' B'').
assert (HCong2 : Cong A C' A'' B'').
assert (HPar3 : Par A'' B'' A' B''').

*****
HPar3 : Par A'' B'' A' B'''
HCong2 : Cong A C' A'' B''
HPar2 : Par A B A'' B''
HCong1 : Cong A C' A' B'
HPar1 : Par B A A' B'
HB' : Midpoint G B'' B'''
B''' : Tpoint
H2 : Midpoint B'' B G
B'' : Tpoint
H1 : Midpoint C' A B
C' : Tpoint
H0 : Midpoint B' A C
B' : Tpoint
HNC : not (Col A B C)
HMid3 : Midpoint G A' A''
HMid2 : Midpoint A'' A G
HMid1 : Midpoint A' B C
A,B,C,G,A',A'' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col G B B'
+++++
assert (Cong3 : Cong A'' B'' A' B''').
-----
Lemma is_gravity_center_third_reci : forall A B C G A' A'', Midpoint A' B C -> Midpoint A'' A G -> Midpoint G A' A'' -> ~ Col A B C -> is_gravity_center G A B C.
Proof.
intros A B C G A' A'' HMid1 HMid2 HMid3 HNC.
split; Col.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
exists A'; exists B'; split; Col; try split; Col; split; try (assert (A <> G) by (intro; treat_equalities; assert_cols; Col); assert_diffs; assert_cols; ColR).
Name B'' the midpoint of B and G.
assert (HB' := symmetric_point_construction B'' G).
destruct HB' as [B''' HB'].
assert (HPar1 : Par B A A' B').
assert (HCong1 : Cong A C' A' B').
assert (HPar2 : Par A B A'' B'').
assert (HCong2 : Cong A C' A'' B'').
assert (HPar3 : Par A'' B'' A' B''').
assert (Cong3 : Cong A'' B'' A' B''').

*****
HPar3 : Par A'' B'' A' B'''
HCong2 : Cong A C' A'' B''
HPar2 : Par A B A'' B''
HCong1 : Cong A C' A' B'
HPar1 : Par B A A' B'
HB' : Midpoint G B'' B'''
B''' : Tpoint
H2 : Midpoint B'' B G
B'' : Tpoint
H1 : Midpoint C' A B
C' : Tpoint
H0 : Midpoint B' A C
B' : Tpoint
HNC : not (Col A B C)
HMid3 : Midpoint G A' A''
HMid2 : Midpoint A'' A G
HMid1 : Midpoint A' B C
A,B,C,G,A',A'' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong A'' B'' A' B'''
+++++
apply plg_cong_1.
-----
Lemma is_gravity_center_third_reci : forall A B C G A' A'', Midpoint A' B C -> Midpoint A'' A G -> Midpoint G A' A'' -> ~ Col A B C -> is_gravity_center G A B C.
Proof.
intros A B C G A' A'' HMid1 HMid2 HMid3 HNC.
split; Col.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
exists A'; exists B'; split; Col; try split; Col; split; try (assert (A <> G) by (intro; treat_equalities; assert_cols; Col); assert_diffs; assert_cols; ColR).
Name B'' the midpoint of B and G.
assert (HB' := symmetric_point_construction B'' G).
destruct HB' as [B''' HB'].
assert (HPar1 : Par B A A' B').
assert (HCong1 : Cong A C' A' B').
assert (HPar2 : Par A B A'' B'').
assert (HCong2 : Cong A C' A'' B'').
assert (HPar3 : Par A'' B'' A' B''').
assert (Cong3 : Cong A'' B'' A' B''').
apply plg_cong_1.

*****
HPar3 : Par A'' B'' A' B'''
HCong2 : Cong A C' A'' B''
HPar2 : Par A B A'' B''
HCong1 : Cong A C' A' B'
HPar1 : Par B A A' B'
HB' : Midpoint G B'' B'''
B''' : Tpoint
H2 : Midpoint B'' B G
B'' : Tpoint
H1 : Midpoint C' A B
C' : Tpoint
H0 : Midpoint B' A C
B' : Tpoint
HNC : not (Col A B C)
HMid3 : Midpoint G A' A''
HMid2 : Midpoint A'' A G
HMid1 : Midpoint A' B C
A,B,C,G,A',A'' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Parallelogram A'' B'' A' B'''
+++++
apply mid_plg_1 with G; try (intro; treat_equalities; assert_cols; Col); unfold Midpoint in *; spliter; split; Between; Cong.
-----
Lemma is_gravity_center_third_reci : forall A B C G A' A'', Midpoint A' B C -> Midpoint A'' A G -> Midpoint G A' A'' -> ~ Col A B C -> is_gravity_center G A B C.
Proof.
intros A B C G A' A'' HMid1 HMid2 HMid3 HNC.
split; Col.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
exists A'; exists B'; split; Col; try split; Col; split; try (assert (A <> G) by (intro; treat_equalities; assert_cols; Col); assert_diffs; assert_cols; ColR).
Name B'' the midpoint of B and G.
assert (HB' := symmetric_point_construction B'' G).
destruct HB' as [B''' HB'].
assert (HPar1 : Par B A A' B').
assert (HCong1 : Cong A C' A' B').
assert (HPar2 : Par A B A'' B'').
assert (HCong2 : Cong A C' A'' B'').
assert (HPar3 : Par A'' B'' A' B''').
assert (Cong3 : Cong A'' B'' A' B''').

*****
Cong3 : Cong A'' B'' A' B'''
HPar3 : Par A'' B'' A' B'''
HCong2 : Cong A C' A'' B''
HPar2 : Par A B A'' B''
HCong1 : Cong A C' A' B'
HPar1 : Par B A A' B'
HB' : Midpoint G B'' B'''
B''' : Tpoint
H2 : Midpoint B'' B G
B'' : Tpoint
H1 : Midpoint C' A B
C' : Tpoint
H0 : Midpoint B' A C
B' : Tpoint
HNC : not (Col A B C)
HMid3 : Midpoint G A' A''
HMid2 : Midpoint A'' A G
HMid1 : Midpoint A' B C
A,B,C,G,A',A'' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col G B B'
+++++
assert (HCol : Col A' B' B''').
-----
Lemma is_gravity_center_third_reci : forall A B C G A' A'', Midpoint A' B C -> Midpoint A'' A G -> Midpoint G A' A'' -> ~ Col A B C -> is_gravity_center G A B C.
Proof.
intros A B C G A' A'' HMid1 HMid2 HMid3 HNC.
split; Col.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
exists A'; exists B'; split; Col; try split; Col; split; try (assert (A <> G) by (intro; treat_equalities; assert_cols; Col); assert_diffs; assert_cols; ColR).
Name B'' the midpoint of B and G.
assert (HB' := symmetric_point_construction B'' G).
destruct HB' as [B''' HB'].
assert (HPar1 : Par B A A' B').
assert (HCong1 : Cong A C' A' B').
assert (HPar2 : Par A B A'' B'').
assert (HCong2 : Cong A C' A'' B'').
assert (HPar3 : Par A'' B'' A' B''').
assert (Cong3 : Cong A'' B'' A' B''').
assert (HCol : Col A' B' B''').

*****
Cong3 : Cong A'' B'' A' B'''
HPar3 : Par A'' B'' A' B'''
HCong2 : Cong A C' A'' B''
HPar2 : Par A B A'' B''
HCong1 : Cong A C' A' B'
HPar1 : Par B A A' B'
HB' : Midpoint G B'' B'''
B''' : Tpoint
H2 : Midpoint B'' B G
B'' : Tpoint
H1 : Midpoint C' A B
C' : Tpoint
H0 : Midpoint B' A C
B' : Tpoint
HNC : not (Col A B C)
HMid3 : Midpoint G A' A''
HMid2 : Midpoint A'' A G
HMid1 : Midpoint A' B C
A,B,C,G,A',A'' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A' B' B'''
+++++
assert (H := parallel_uniqueness A B A' B' A' B''' A'); destruct H as [HCol1 HCol2]; Col; Par.
-----
Lemma is_gravity_center_third_reci : forall A B C G A' A'', Midpoint A' B C -> Midpoint A'' A G -> Midpoint G A' A'' -> ~ Col A B C -> is_gravity_center G A B C.
Proof.
intros A B C G A' A'' HMid1 HMid2 HMid3 HNC.
split; Col.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
exists A'; exists B'; split; Col; try split; Col; split; try (assert (A <> G) by (intro; treat_equalities; assert_cols; Col); assert_diffs; assert_cols; ColR).
Name B'' the midpoint of B and G.
assert (HB' := symmetric_point_construction B'' G).
destruct HB' as [B''' HB'].
assert (HPar1 : Par B A A' B').
assert (HCong1 : Cong A C' A' B').
assert (HPar2 : Par A B A'' B'').
assert (HCong2 : Cong A C' A'' B'').
assert (HPar3 : Par A'' B'' A' B''').
assert (Cong3 : Cong A'' B'' A' B''').
assert (HCol : Col A' B' B''').
assert (H := parallel_uniqueness A B A' B' A' B''' A'); destruct H as [HCol1 HCol2]; Col; Par.

*****
Cong3 : Cong A'' B'' A' B'''
HPar3 : Par A'' B'' A' B'''
HCong2 : Cong A C' A'' B''
HPar2 : Par A B A'' B''
HCong1 : Cong A C' A' B'
HPar1 : Par B A A' B'
HB' : Midpoint G B'' B'''
B''' : Tpoint
H2 : Midpoint B'' B G
B'' : Tpoint
H1 : Midpoint C' A B
C' : Tpoint
H0 : Midpoint B' A C
B' : Tpoint
HNC : not (Col A B C)
HMid3 : Midpoint G A' A''
HMid2 : Midpoint A'' A G
HMid1 : Midpoint A' B C
A,B,C,G,A',A'' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par A B A' B'''
+++++
apply par_trans with A'' B''; Par.
-----
Lemma is_gravity_center_third_reci : forall A B C G A' A'', Midpoint A' B C -> Midpoint A'' A G -> Midpoint G A' A'' -> ~ Col A B C -> is_gravity_center G A B C.
Proof.
intros A B C G A' A'' HMid1 HMid2 HMid3 HNC.
split; Col.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
exists A'; exists B'; split; Col; try split; Col; split; try (assert (A <> G) by (intro; treat_equalities; assert_cols; Col); assert_diffs; assert_cols; ColR).
Name B'' the midpoint of B and G.
assert (HB' := symmetric_point_construction B'' G).
destruct HB' as [B''' HB'].
assert (HPar1 : Par B A A' B').
assert (HCong1 : Cong A C' A' B').
assert (HPar2 : Par A B A'' B'').
assert (HCong2 : Cong A C' A'' B'').
assert (HPar3 : Par A'' B'' A' B''').
assert (Cong3 : Cong A'' B'' A' B''').
assert (HCol : Col A' B' B''').

*****
HCol : Col A' B' B'''
Cong3 : Cong A'' B'' A' B'''
HPar3 : Par A'' B'' A' B'''
HCong2 : Cong A C' A'' B''
HPar2 : Par A B A'' B''
HCong1 : Cong A C' A' B'
HPar1 : Par B A A' B'
HB' : Midpoint G B'' B'''
B''' : Tpoint
H2 : Midpoint B'' B G
B'' : Tpoint
H1 : Midpoint C' A B
C' : Tpoint
H0 : Midpoint B' A C
B' : Tpoint
HNC : not (Col A B C)
HMid3 : Midpoint G A' A''
HMid2 : Midpoint A'' A G
HMid1 : Midpoint A' B C
A,B,C,G,A',A'' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col G B B'
+++++
assert (HElim := l7_20 A' B' B'''); elim HElim; clear HElim; try intro HElim; Col; eCong.
-----
Lemma is_gravity_center_third_reci : forall A B C G A' A'', Midpoint A' B C -> Midpoint A'' A G -> Midpoint G A' A'' -> ~ Col A B C -> is_gravity_center G A B C.
Proof.
intros A B C G A' A'' HMid1 HMid2 HMid3 HNC.
split; Col.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
exists A'; exists B'; split; Col; try split; Col; split; try (assert (A <> G) by (intro; treat_equalities; assert_cols; Col); assert_diffs; assert_cols; ColR).
Name B'' the midpoint of B and G.
assert (HB' := symmetric_point_construction B'' G).
destruct HB' as [B''' HB'].
assert (HPar1 : Par B A A' B').
assert (HCong1 : Cong A C' A' B').
assert (HPar2 : Par A B A'' B'').
assert (HCong2 : Cong A C' A'' B'').
assert (HPar3 : Par A'' B'' A' B''').
assert (Cong3 : Cong A'' B'' A' B''').
assert (HCol : Col A' B' B''').
assert (HElim := l7_20 A' B' B'''); elim HElim; clear HElim; try intro HElim; Col; eCong.

*****
HElim : eq B' B'''
HCol : Col A' B' B'''
Cong3 : Cong A'' B'' A' B'''
HPar3 : Par A'' B'' A' B'''
HCong2 : Cong A C' A'' B''
HPar2 : Par A B A'' B''
HCong1 : Cong A C' A' B'
HPar1 : Par B A A' B'
HB' : Midpoint G B'' B'''
B''' : Tpoint
H2 : Midpoint B'' B G
B'' : Tpoint
H1 : Midpoint C' A B
C' : Tpoint
H0 : Midpoint B' A C
B' : Tpoint
HNC : not (Col A B C)
HMid3 : Midpoint G A' A''
HMid2 : Midpoint A'' A G
HMid1 : Midpoint A' B C
A,B,C,G,A',A'' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col G B B'
+++++
treat_equalities; assert_diffs; assert_cols.
-----
Lemma is_gravity_center_third_reci : forall A B C G A' A'', Midpoint A' B C -> Midpoint A'' A G -> Midpoint G A' A'' -> ~ Col A B C -> is_gravity_center G A B C.
Proof.
intros A B C G A' A'' HMid1 HMid2 HMid3 HNC.
split; Col.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
exists A'; exists B'; split; Col; try split; Col; split; try (assert (A <> G) by (intro; treat_equalities; assert_cols; Col); assert_diffs; assert_cols; ColR).
Name B'' the midpoint of B and G.
assert (HB' := symmetric_point_construction B'' G).
destruct HB' as [B''' HB'].
assert (HPar1 : Par B A A' B').
assert (HCong1 : Cong A C' A' B').
assert (HPar2 : Par A B A'' B'').
assert (HCong2 : Cong A C' A'' B'').
assert (HPar3 : Par A'' B'' A' B''').
assert (Cong3 : Cong A'' B'' A' B''').
assert (HCol : Col A' B' B''').
assert (HElim := l7_20 A' B' B'''); elim HElim; clear HElim; try intro HElim; Col; eCong.
treat_equalities; assert_diffs; assert_cols.

*****
H19 : Col A' B C
H18 : Col A'' A G
H17 : Col G A' A''
H16 : Col B' A C
H15 : Col C' A B
H14 : Col B'' B G
H13 : Col G B'' B'
H12 : not (eq A' B')
H : not (eq A'' B'')
H11 : not (eq C' B)
H10 : not (eq C' A)
H9 : not (eq A' C)
H8 : not (eq A' B)
H6 : not (eq B' C)
H3 : not (eq B' A)
H7 : not (eq A C)
H4 : not (eq B C)
H5 : not (eq A B)
HPar3 : Par A'' B'' A' B'
Cong3 : Cong A'' B'' A' B'
HCong2 : Cong A C' A'' B''
HPar2 : Par A B A'' B''
HCong1 : Cong A C' A' B'
HPar1 : Par B A A' B'
HB' : Midpoint G B'' B'
H2 : Midpoint B'' B G
B'' : Tpoint
H1 : Midpoint C' A B
C' : Tpoint
H0 : Midpoint B' A C
B' : Tpoint
HNC : not (Col A B C)
HMid3 : Midpoint G A' A''
HMid2 : Midpoint A'' A G
HMid1 : Midpoint A' B C
A,B,C,G,A',A'' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col G B B'
+++++
assert (G <> B'') by (intro; treat_equalities; Col); ColR.
-----
Lemma is_gravity_center_third_reci : forall A B C G A' A'', Midpoint A' B C -> Midpoint A'' A G -> Midpoint G A' A'' -> ~ Col A B C -> is_gravity_center G A B C.
Proof.
intros A B C G A' A'' HMid1 HMid2 HMid3 HNC.
split; Col.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
exists A'; exists B'; split; Col; try split; Col; split; try (assert (A <> G) by (intro; treat_equalities; assert_cols; Col); assert_diffs; assert_cols; ColR).
Name B'' the midpoint of B and G.
assert (HB' := symmetric_point_construction B'' G).
destruct HB' as [B''' HB'].
assert (HPar1 : Par B A A' B').
assert (HCong1 : Cong A C' A' B').
assert (HPar2 : Par A B A'' B'').
assert (HCong2 : Cong A C' A'' B'').
assert (HPar3 : Par A'' B'' A' B''').
assert (Cong3 : Cong A'' B'' A' B''').
assert (HCol : Col A' B' B''').
assert (HElim := l7_20 A' B' B'''); elim HElim; clear HElim; try intro HElim; Col; eCong.

*****
HElim : Midpoint A' B' B'''
HCol : Col A' B' B'''
Cong3 : Cong A'' B'' A' B'''
HPar3 : Par A'' B'' A' B'''
HCong2 : Cong A C' A'' B''
HPar2 : Par A B A'' B''
HCong1 : Cong A C' A' B'
HPar1 : Par B A A' B'
HB' : Midpoint G B'' B'''
B''' : Tpoint
H2 : Midpoint B'' B G
B'' : Tpoint
H1 : Midpoint C' A B
C' : Tpoint
H0 : Midpoint B' A C
B' : Tpoint
HNC : not (Col A B C)
HMid3 : Midpoint G A' A''
HMid2 : Midpoint A'' A G
HMid1 : Midpoint A' B C
A,B,C,G,A',A'' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col G B B'
+++++
assert (HFalse : OS A' B'' A'' B''').
-----
Lemma is_gravity_center_third_reci : forall A B C G A' A'', Midpoint A' B C -> Midpoint A'' A G -> Midpoint G A' A'' -> ~ Col A B C -> is_gravity_center G A B C.
Proof.
intros A B C G A' A'' HMid1 HMid2 HMid3 HNC.
split; Col.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
exists A'; exists B'; split; Col; try split; Col; split; try (assert (A <> G) by (intro; treat_equalities; assert_cols; Col); assert_diffs; assert_cols; ColR).
Name B'' the midpoint of B and G.
assert (HB' := symmetric_point_construction B'' G).
destruct HB' as [B''' HB'].
assert (HPar1 : Par B A A' B').
assert (HCong1 : Cong A C' A' B').
assert (HPar2 : Par A B A'' B'').
assert (HCong2 : Cong A C' A'' B'').
assert (HPar3 : Par A'' B'' A' B''').
assert (Cong3 : Cong A'' B'' A' B''').
assert (HCol : Col A' B' B''').
assert (HElim := l7_20 A' B' B'''); elim HElim; clear HElim; try intro HElim; Col; eCong.
assert (HFalse : OS A' B'' A'' B''').

*****
HElim : Midpoint A' B' B'''
HCol : Col A' B' B'''
Cong3 : Cong A'' B'' A' B'''
HPar3 : Par A'' B'' A' B'''
HCong2 : Cong A C' A'' B''
HPar2 : Par A B A'' B''
HCong1 : Cong A C' A' B'
HPar1 : Par B A A' B'
HB' : Midpoint G B'' B'''
B''' : Tpoint
H2 : Midpoint B'' B G
B'' : Tpoint
H1 : Midpoint C' A B
C' : Tpoint
H0 : Midpoint B' A C
B' : Tpoint
HNC : not (Col A B C)
HMid3 : Midpoint G A' A''
HMid2 : Midpoint A'' A G
HMid1 : Midpoint A' B C
A,B,C,G,A',A'' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS A' B'' A'' B'''
+++++
apply one_side_transitivity with G.
-----
Lemma is_gravity_center_third_reci : forall A B C G A' A'', Midpoint A' B C -> Midpoint A'' A G -> Midpoint G A' A'' -> ~ Col A B C -> is_gravity_center G A B C.
Proof.
intros A B C G A' A'' HMid1 HMid2 HMid3 HNC.
split; Col.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
exists A'; exists B'; split; Col; try split; Col; split; try (assert (A <> G) by (intro; treat_equalities; assert_cols; Col); assert_diffs; assert_cols; ColR).
Name B'' the midpoint of B and G.
assert (HB' := symmetric_point_construction B'' G).
destruct HB' as [B''' HB'].
assert (HPar1 : Par B A A' B').
assert (HCong1 : Cong A C' A' B').
assert (HPar2 : Par A B A'' B'').
assert (HCong2 : Cong A C' A'' B'').
assert (HPar3 : Par A'' B'' A' B''').
assert (Cong3 : Cong A'' B'' A' B''').
assert (HCol : Col A' B' B''').
assert (HElim := l7_20 A' B' B'''); elim HElim; clear HElim; try intro HElim; Col; eCong.
assert (HFalse : OS A' B'' A'' B''').
apply one_side_transitivity with G.

*****
HElim : Midpoint A' B' B'''
HCol : Col A' B' B'''
Cong3 : Cong A'' B'' A' B'''
HPar3 : Par A'' B'' A' B'''
HCong2 : Cong A C' A'' B''
HPar2 : Par A B A'' B''
HCong1 : Cong A C' A' B'
HPar1 : Par B A A' B'
HB' : Midpoint G B'' B'''
B''' : Tpoint
H2 : Midpoint B'' B G
B'' : Tpoint
H1 : Midpoint C' A B
C' : Tpoint
H0 : Midpoint B' A C
B' : Tpoint
HNC : not (Col A B C)
HMid3 : Midpoint G A' A''
HMid2 : Midpoint A'' A G
HMid1 : Midpoint A' B C
A,B,C,G,A',A'' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS A' B'' A'' G
+++++
apply one_side_symmetry.
-----
Lemma is_gravity_center_third_reci : forall A B C G A' A'', Midpoint A' B C -> Midpoint A'' A G -> Midpoint G A' A'' -> ~ Col A B C -> is_gravity_center G A B C.
Proof.
intros A B C G A' A'' HMid1 HMid2 HMid3 HNC.
split; Col.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
exists A'; exists B'; split; Col; try split; Col; split; try (assert (A <> G) by (intro; treat_equalities; assert_cols; Col); assert_diffs; assert_cols; ColR).
Name B'' the midpoint of B and G.
assert (HB' := symmetric_point_construction B'' G).
destruct HB' as [B''' HB'].
assert (HPar1 : Par B A A' B').
assert (HCong1 : Cong A C' A' B').
assert (HPar2 : Par A B A'' B'').
assert (HCong2 : Cong A C' A'' B'').
assert (HPar3 : Par A'' B'' A' B''').
assert (Cong3 : Cong A'' B'' A' B''').
assert (HCol : Col A' B' B''').
assert (HElim := l7_20 A' B' B'''); elim HElim; clear HElim; try intro HElim; Col; eCong.
assert (HFalse : OS A' B'' A'' B''').
apply one_side_transitivity with G.
apply one_side_symmetry.

*****
HElim : Midpoint A' B' B'''
HCol : Col A' B' B'''
Cong3 : Cong A'' B'' A' B'''
HPar3 : Par A'' B'' A' B'''
HCong2 : Cong A C' A'' B''
HPar2 : Par A B A'' B''
HCong1 : Cong A C' A' B'
HPar1 : Par B A A' B'
HB' : Midpoint G B'' B'''
B''' : Tpoint
H2 : Midpoint B'' B G
B'' : Tpoint
H1 : Midpoint C' A B
C' : Tpoint
H0 : Midpoint B' A C
B' : Tpoint
HNC : not (Col A B C)
HMid3 : Midpoint G A' A''
HMid2 : Midpoint A'' A G
HMid1 : Midpoint A' B C
A,B,C,G,A',A'' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS A' B'' G A''
+++++
assert (HH1 : A' <> B'') by (intro; treat_equalities; Col).
-----
Lemma is_gravity_center_third_reci : forall A B C G A' A'', Midpoint A' B C -> Midpoint A'' A G -> Midpoint G A' A'' -> ~ Col A B C -> is_gravity_center G A B C.
Proof.
intros A B C G A' A'' HMid1 HMid2 HMid3 HNC.
split; Col.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
exists A'; exists B'; split; Col; try split; Col; split; try (assert (A <> G) by (intro; treat_equalities; assert_cols; Col); assert_diffs; assert_cols; ColR).
Name B'' the midpoint of B and G.
assert (HB' := symmetric_point_construction B'' G).
destruct HB' as [B''' HB'].
assert (HPar1 : Par B A A' B').
assert (HCong1 : Cong A C' A' B').
assert (HPar2 : Par A B A'' B'').
assert (HCong2 : Cong A C' A'' B'').
assert (HPar3 : Par A'' B'' A' B''').
assert (Cong3 : Cong A'' B'' A' B''').
assert (HCol : Col A' B' B''').
assert (HElim := l7_20 A' B' B'''); elim HElim; clear HElim; try intro HElim; Col; eCong.
assert (HFalse : OS A' B'' A'' B''').
apply one_side_transitivity with G.
apply one_side_symmetry.
assert (HH1 : A' <> B'') by (intro; treat_equalities; Col).

*****
HH1 : not (eq A' B'')
HElim : Midpoint A' B' B'''
HCol : Col A' B' B'''
Cong3 : Cong A'' B'' A' B'''
HPar3 : Par A'' B'' A' B'''
HCong2 : Cong A C' A'' B''
HPar2 : Par A B A'' B''
HCong1 : Cong A C' A' B'
HPar1 : Par B A A' B'
HB' : Midpoint G B'' B'''
B''' : Tpoint
H2 : Midpoint B'' B G
B'' : Tpoint
H1 : Midpoint C' A B
C' : Tpoint
H0 : Midpoint B' A C
B' : Tpoint
HNC : not (Col A B C)
HMid3 : Midpoint G A' A''
HMid2 : Midpoint A'' A G
HMid1 : Midpoint A' B C
A,B,C,G,A',A'' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS A' B'' G A''
+++++
assert (HH2 : Col A' B'' A') by Col.
-----
Lemma is_gravity_center_third_reci : forall A B C G A' A'', Midpoint A' B C -> Midpoint A'' A G -> Midpoint G A' A'' -> ~ Col A B C -> is_gravity_center G A B C.
Proof.
intros A B C G A' A'' HMid1 HMid2 HMid3 HNC.
split; Col.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
exists A'; exists B'; split; Col; try split; Col; split; try (assert (A <> G) by (intro; treat_equalities; assert_cols; Col); assert_diffs; assert_cols; ColR).
Name B'' the midpoint of B and G.
assert (HB' := symmetric_point_construction B'' G).
destruct HB' as [B''' HB'].
assert (HPar1 : Par B A A' B').
assert (HCong1 : Cong A C' A' B').
assert (HPar2 : Par A B A'' B'').
assert (HCong2 : Cong A C' A'' B'').
assert (HPar3 : Par A'' B'' A' B''').
assert (Cong3 : Cong A'' B'' A' B''').
assert (HCol : Col A' B' B''').
assert (HElim := l7_20 A' B' B'''); elim HElim; clear HElim; try intro HElim; Col; eCong.
assert (HFalse : OS A' B'' A'' B''').
apply one_side_transitivity with G.
apply one_side_symmetry.
assert (HH1 : A' <> B'') by (intro; treat_equalities; Col).
assert (HH2 : Col A' B'' A') by Col.

*****
HH2 : Col A' B'' A'
HH1 : not (eq A' B'')
HElim : Midpoint A' B' B'''
HCol : Col A' B' B'''
Cong3 : Cong A'' B'' A' B'''
HPar3 : Par A'' B'' A' B'''
HCong2 : Cong A C' A'' B''
HPar2 : Par A B A'' B''
HCong1 : Cong A C' A' B'
HPar1 : Par B A A' B'
HB' : Midpoint G B'' B'''
B''' : Tpoint
H2 : Midpoint B'' B G
B'' : Tpoint
H1 : Midpoint C' A B
C' : Tpoint
H0 : Midpoint B' A C
B' : Tpoint
HNC : not (Col A B C)
HMid3 : Midpoint G A' A''
HMid2 : Midpoint A'' A G
HMid1 : Midpoint A' B C
A,B,C,G,A',A'' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS A' B'' G A''
+++++
assert (HH3 : Col G A'' A') by (assert_cols; Col).
-----
Lemma is_gravity_center_third_reci : forall A B C G A' A'', Midpoint A' B C -> Midpoint A'' A G -> Midpoint G A' A'' -> ~ Col A B C -> is_gravity_center G A B C.
Proof.
intros A B C G A' A'' HMid1 HMid2 HMid3 HNC.
split; Col.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
exists A'; exists B'; split; Col; try split; Col; split; try (assert (A <> G) by (intro; treat_equalities; assert_cols; Col); assert_diffs; assert_cols; ColR).
Name B'' the midpoint of B and G.
assert (HB' := symmetric_point_construction B'' G).
destruct HB' as [B''' HB'].
assert (HPar1 : Par B A A' B').
assert (HCong1 : Cong A C' A' B').
assert (HPar2 : Par A B A'' B'').
assert (HCong2 : Cong A C' A'' B'').
assert (HPar3 : Par A'' B'' A' B''').
assert (Cong3 : Cong A'' B'' A' B''').
assert (HCol : Col A' B' B''').
assert (HElim := l7_20 A' B' B'''); elim HElim; clear HElim; try intro HElim; Col; eCong.
assert (HFalse : OS A' B'' A'' B''').
apply one_side_transitivity with G.
apply one_side_symmetry.
assert (HH1 : A' <> B'') by (intro; treat_equalities; Col).
assert (HH2 : Col A' B'' A') by Col.
assert (HH3 : Col G A'' A') by (assert_cols; Col).

*****
HH3 : Col G A'' A'
HH2 : Col A' B'' A'
HH1 : not (eq A' B'')
HElim : Midpoint A' B' B'''
HCol : Col A' B' B'''
Cong3 : Cong A'' B'' A' B'''
HPar3 : Par A'' B'' A' B'''
HCong2 : Cong A C' A'' B''
HPar2 : Par A B A'' B''
HCong1 : Cong A C' A' B'
HPar1 : Par B A A' B'
HB' : Midpoint G B'' B'''
B''' : Tpoint
H2 : Midpoint B'' B G
B'' : Tpoint
H1 : Midpoint C' A B
C' : Tpoint
H0 : Midpoint B' A C
B' : Tpoint
HNC : not (Col A B C)
HMid3 : Midpoint G A' A''
HMid2 : Midpoint A'' A G
HMid1 : Midpoint A' B C
A,B,C,G,A',A'' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS A' B'' G A''
+++++
assert (HH := l9_19 A' B'' G A'' A' HH2 HH3); rewrite HH.
-----
Lemma is_gravity_center_third_reci : forall A B C G A' A'', Midpoint A' B C -> Midpoint A'' A G -> Midpoint G A' A'' -> ~ Col A B C -> is_gravity_center G A B C.
Proof.
intros A B C G A' A'' HMid1 HMid2 HMid3 HNC.
split; Col.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
exists A'; exists B'; split; Col; try split; Col; split; try (assert (A <> G) by (intro; treat_equalities; assert_cols; Col); assert_diffs; assert_cols; ColR).
Name B'' the midpoint of B and G.
assert (HB' := symmetric_point_construction B'' G).
destruct HB' as [B''' HB'].
assert (HPar1 : Par B A A' B').
assert (HCong1 : Cong A C' A' B').
assert (HPar2 : Par A B A'' B'').
assert (HCong2 : Cong A C' A'' B'').
assert (HPar3 : Par A'' B'' A' B''').
assert (Cong3 : Cong A'' B'' A' B''').
assert (HCol : Col A' B' B''').
assert (HElim := l7_20 A' B' B'''); elim HElim; clear HElim; try intro HElim; Col; eCong.
assert (HFalse : OS A' B'' A'' B''').
apply one_side_transitivity with G.
apply one_side_symmetry.
assert (HH1 : A' <> B'') by (intro; treat_equalities; Col).
assert (HH2 : Col A' B'' A') by Col.
assert (HH3 : Col G A'' A') by (assert_cols; Col).
assert (HH := l9_19 A' B'' G A'' A' HH2 HH3); rewrite HH.

*****
HH : iff (OS A' B'' G A'') (and (Out A' G A'') (not (Col A' B'' G)))
HH3 : Col G A'' A'
HH2 : Col A' B'' A'
HH1 : not (eq A' B'')
HElim : Midpoint A' B' B'''
HCol : Col A' B' B'''
Cong3 : Cong A'' B'' A' B'''
HPar3 : Par A'' B'' A' B'''
HCong2 : Cong A C' A'' B''
HPar2 : Par A B A'' B''
HCong1 : Cong A C' A' B'
HPar1 : Par B A A' B'
HB' : Midpoint G B'' B'''
B''' : Tpoint
H2 : Midpoint B'' B G
B'' : Tpoint
H1 : Midpoint C' A B
C' : Tpoint
H0 : Midpoint B' A C
B' : Tpoint
HNC : not (Col A B C)
HMid3 : Midpoint G A' A''
HMid2 : Midpoint A'' A G
HMid1 : Midpoint A' B C
A,B,C,G,A',A'' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Out A' G A'') (not (Col A' B'' G))
+++++
assert_diffs; assert_cols; show_distinct G A'; treat_equalities; Col.
-----
Lemma is_gravity_center_third_reci : forall A B C G A' A'', Midpoint A' B C -> Midpoint A'' A G -> Midpoint G A' A'' -> ~ Col A B C -> is_gravity_center G A B C.
Proof.
intros A B C G A' A'' HMid1 HMid2 HMid3 HNC.
split; Col.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
exists A'; exists B'; split; Col; try split; Col; split; try (assert (A <> G) by (intro; treat_equalities; assert_cols; Col); assert_diffs; assert_cols; ColR).
Name B'' the midpoint of B and G.
assert (HB' := symmetric_point_construction B'' G).
destruct HB' as [B''' HB'].
assert (HPar1 : Par B A A' B').
assert (HCong1 : Cong A C' A' B').
assert (HPar2 : Par A B A'' B'').
assert (HCong2 : Cong A C' A'' B'').
assert (HPar3 : Par A'' B'' A' B''').
assert (Cong3 : Cong A'' B'' A' B''').
assert (HCol : Col A' B' B''').
assert (HElim := l7_20 A' B' B'''); elim HElim; clear HElim; try intro HElim; Col; eCong.
assert (HFalse : OS A' B'' A'' B''').
apply one_side_transitivity with G.
apply one_side_symmetry.
assert (HH1 : A' <> B'') by (intro; treat_equalities; Col).
assert (HH2 : Col A' B'' A') by Col.
assert (HH3 : Col G A'' A') by (assert_cols; Col).
assert (HH := l9_19 A' B'' G A'' A' HH2 HH3); rewrite HH.
assert_diffs; assert_cols; show_distinct G A'; treat_equalities; Col.

*****
H21 : not (eq G A')
H20 : Col A' B C
H19 : Col A'' A G
H18 : Col B' A C
H17 : Col C' A B
H16 : Col B'' B G
H14 : Col G B'' B'''
H15 : not (eq B' B''')
H13 : not (eq A' B')
H12 : not (eq A' B''')
H : not (eq A'' B'')
H11 : not (eq C' B)
H10 : not (eq C' A)
H9 : not (eq A' C)
H8 : not (eq A' B)
H6 : not (eq B' C)
H3 : not (eq B' A)
H7 : not (eq A C)
H4 : not (eq B C)
H5 : not (eq A B)
HH : iff (OS A' B'' G A'') (and (Out A' G A'') (not (Col A' B'' G)))
HH3 : Col G A'' A'
HH2 : Col A' B'' A'
HH1 : not (eq A' B'')
HElim : Midpoint A' B' B'''
HCol : Col A' B' B'''
Cong3 : Cong A'' B'' A' B'''
HPar3 : Par A'' B'' A' B'''
HCong2 : Cong A C' A'' B''
HPar2 : Par A B A'' B''
HCong1 : Cong A C' A' B'
HPar1 : Par B A A' B'
HB' : Midpoint G B'' B'''
B''' : Tpoint
H2 : Midpoint B'' B G
B'' : Tpoint
H1 : Midpoint C' A B
C' : Tpoint
H0 : Midpoint B' A C
B' : Tpoint
HNC : not (Col A B C)
HMid3 : Midpoint G A' A''
HMid2 : Midpoint A'' A G
HMid1 : Midpoint A' B C
A,B,C,G,A',A'' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Out A' G A'') (not (Col A' B'' G))
+++++
show_distinct G A''; treat_equalities; Col.
-----
Lemma is_gravity_center_third_reci : forall A B C G A' A'', Midpoint A' B C -> Midpoint A'' A G -> Midpoint G A' A'' -> ~ Col A B C -> is_gravity_center G A B C.
Proof.
intros A B C G A' A'' HMid1 HMid2 HMid3 HNC.
split; Col.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
exists A'; exists B'; split; Col; try split; Col; split; try (assert (A <> G) by (intro; treat_equalities; assert_cols; Col); assert_diffs; assert_cols; ColR).
Name B'' the midpoint of B and G.
assert (HB' := symmetric_point_construction B'' G).
destruct HB' as [B''' HB'].
assert (HPar1 : Par B A A' B').
assert (HCong1 : Cong A C' A' B').
assert (HPar2 : Par A B A'' B'').
assert (HCong2 : Cong A C' A'' B'').
assert (HPar3 : Par A'' B'' A' B''').
assert (Cong3 : Cong A'' B'' A' B''').
assert (HCol : Col A' B' B''').
assert (HElim := l7_20 A' B' B'''); elim HElim; clear HElim; try intro HElim; Col; eCong.
assert (HFalse : OS A' B'' A'' B''').
apply one_side_transitivity with G.
apply one_side_symmetry.
assert (HH1 : A' <> B'') by (intro; treat_equalities; Col).
assert (HH2 : Col A' B'' A') by Col.
assert (HH3 : Col G A'' A') by (assert_cols; Col).
assert (HH := l9_19 A' B'' G A'' A' HH2 HH3); rewrite HH.
assert_diffs; assert_cols; show_distinct G A'; treat_equalities; Col.
show_distinct G A''; treat_equalities; Col.

*****
H22 : not (eq G A'')
H21 : not (eq G A')
H20 : Col A' B C
H19 : Col A'' A G
H18 : Col B' A C
H17 : Col C' A B
H16 : Col B'' B G
H14 : Col G B'' B'''
H15 : not (eq B' B''')
H13 : not (eq A' B')
H12 : not (eq A' B''')
H : not (eq A'' B'')
H11 : not (eq C' B)
H10 : not (eq C' A)
H9 : not (eq A' C)
H8 : not (eq A' B)
H6 : not (eq B' C)
H3 : not (eq B' A)
H7 : not (eq A C)
H4 : not (eq B C)
H5 : not (eq A B)
HH : iff (OS A' B'' G A'') (and (Out A' G A'') (not (Col A' B'' G)))
HH3 : Col G A'' A'
HH2 : Col A' B'' A'
HH1 : not (eq A' B'')
HElim : Midpoint A' B' B'''
HCol : Col A' B' B'''
Cong3 : Cong A'' B'' A' B'''
HPar3 : Par A'' B'' A' B'''
HCong2 : Cong A C' A'' B''
HPar2 : Par A B A'' B''
HCong1 : Cong A C' A' B'
HPar1 : Par B A A' B'
HB' : Midpoint G B'' B'''
B''' : Tpoint
H2 : Midpoint B'' B G
B'' : Tpoint
H1 : Midpoint C' A B
C' : Tpoint
H0 : Midpoint B' A C
B' : Tpoint
HNC : not (Col A B C)
HMid3 : Midpoint G A' A''
HMid2 : Midpoint A'' A G
HMid1 : Midpoint A' B C
A,B,C,G,A',A'' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Out A' G A'') (not (Col A' B'' G))
+++++
show_distinct G B''; treat_equalities; Col.
-----
Lemma is_gravity_center_third_reci : forall A B C G A' A'', Midpoint A' B C -> Midpoint A'' A G -> Midpoint G A' A'' -> ~ Col A B C -> is_gravity_center G A B C.
Proof.
intros A B C G A' A'' HMid1 HMid2 HMid3 HNC.
split; Col.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
exists A'; exists B'; split; Col; try split; Col; split; try (assert (A <> G) by (intro; treat_equalities; assert_cols; Col); assert_diffs; assert_cols; ColR).
Name B'' the midpoint of B and G.
assert (HB' := symmetric_point_construction B'' G).
destruct HB' as [B''' HB'].
assert (HPar1 : Par B A A' B').
assert (HCong1 : Cong A C' A' B').
assert (HPar2 : Par A B A'' B'').
assert (HCong2 : Cong A C' A'' B'').
assert (HPar3 : Par A'' B'' A' B''').
assert (Cong3 : Cong A'' B'' A' B''').
assert (HCol : Col A' B' B''').
assert (HElim := l7_20 A' B' B'''); elim HElim; clear HElim; try intro HElim; Col; eCong.
assert (HFalse : OS A' B'' A'' B''').
apply one_side_transitivity with G.
apply one_side_symmetry.
assert (HH1 : A' <> B'') by (intro; treat_equalities; Col).
assert (HH2 : Col A' B'' A') by Col.
assert (HH3 : Col G A'' A') by (assert_cols; Col).
assert (HH := l9_19 A' B'' G A'' A' HH2 HH3); rewrite HH.
assert_diffs; assert_cols; show_distinct G A'; treat_equalities; Col.
show_distinct G A''; treat_equalities; Col.
show_distinct G B''; treat_equalities; Col.

*****
H23 : not (eq G B'')
H22 : not (eq G A'')
H21 : not (eq G A')
H20 : Col A' B C
H19 : Col A'' A G
H18 : Col B' A C
H17 : Col C' A B
H16 : Col B'' B G
H14 : Col G B'' B'''
H15 : not (eq B' B''')
H13 : not (eq A' B')
H12 : not (eq A' B''')
H : not (eq A'' B'')
H11 : not (eq C' B)
H10 : not (eq C' A)
H9 : not (eq A' C)
H8 : not (eq A' B)
H6 : not (eq B' C)
H3 : not (eq B' A)
H7 : not (eq A C)
H4 : not (eq B C)
H5 : not (eq A B)
HH : iff (OS A' B'' G A'') (and (Out A' G A'') (not (Col A' B'' G)))
HH3 : Col G A'' A'
HH2 : Col A' B'' A'
HH1 : not (eq A' B'')
HElim : Midpoint A' B' B'''
HCol : Col A' B' B'''
Cong3 : Cong A'' B'' A' B'''
HPar3 : Par A'' B'' A' B'''
HCong2 : Cong A C' A'' B''
HPar2 : Par A B A'' B''
HCong1 : Cong A C' A' B'
HPar1 : Par B A A' B'
HB' : Midpoint G B'' B'''
B''' : Tpoint
H2 : Midpoint B'' B G
B'' : Tpoint
H1 : Midpoint C' A B
C' : Tpoint
H0 : Midpoint B' A C
B' : Tpoint
HNC : not (Col A B C)
HMid3 : Midpoint G A' A''
HMid2 : Midpoint A'' A G
HMid1 : Midpoint A' B C
A,B,C,G,A',A'' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Out A' G A'') (not (Col A' B'' G))
+++++
assert_diffs; assert_cols; assert (HABG : ~ Col A B G) by (intro; apply HNC; ColR).
-----
Lemma is_gravity_center_third_reci : forall A B C G A' A'', Midpoint A' B C -> Midpoint A'' A G -> Midpoint G A' A'' -> ~ Col A B C -> is_gravity_center G A B C.
Proof.
intros A B C G A' A'' HMid1 HMid2 HMid3 HNC.
split; Col.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
exists A'; exists B'; split; Col; try split; Col; split; try (assert (A <> G) by (intro; treat_equalities; assert_cols; Col); assert_diffs; assert_cols; ColR).
Name B'' the midpoint of B and G.
assert (HB' := symmetric_point_construction B'' G).
destruct HB' as [B''' HB'].
assert (HPar1 : Par B A A' B').
assert (HCong1 : Cong A C' A' B').
assert (HPar2 : Par A B A'' B'').
assert (HCong2 : Cong A C' A'' B'').
assert (HPar3 : Par A'' B'' A' B''').
assert (Cong3 : Cong A'' B'' A' B''').
assert (HCol : Col A' B' B''').
assert (HElim := l7_20 A' B' B'''); elim HElim; clear HElim; try intro HElim; Col; eCong.
assert (HFalse : OS A' B'' A'' B''').
apply one_side_transitivity with G.
apply one_side_symmetry.
assert (HH1 : A' <> B'') by (intro; treat_equalities; Col).
assert (HH2 : Col A' B'' A') by Col.
assert (HH3 : Col G A'' A') by (assert_cols; Col).
assert (HH := l9_19 A' B'' G A'' A' HH2 HH3); rewrite HH.
assert_diffs; assert_cols; show_distinct G A'; treat_equalities; Col.
show_distinct G A''; treat_equalities; Col.
show_distinct G B''; treat_equalities; Col.
assert_diffs; assert_cols; assert (HABG : ~ Col A B G) by (intro; apply HNC; ColR).

*****
HABG : not (Col A B G)
H31 : not (eq A'' A)
H30 : not (eq A G)
H29 : not (eq B'' B)
H28 : not (eq B G)
H27 : not (eq A' A'')
H26 : not (eq G B''')
H25 : not (eq B'' B''')
H23 : not (eq G B'')
H22 : not (eq G A'')
H21 : not (eq G A')
H20 : Col A' B C
H19 : Col A'' A G
H18 : Col B' A C
H17 : Col C' A B
H16 : Col B'' B G
H14 : Col G B'' B'''
H15 : not (eq B' B''')
H13 : not (eq A' B')
H12 : not (eq A' B''')
H : not (eq A'' B'')
H11 : not (eq C' B)
H10 : not (eq C' A)
H9 : not (eq A' C)
H8 : not (eq A' B)
H6 : not (eq B' C)
H3 : not (eq B' A)
H7 : not (eq A C)
H4 : not (eq B C)
H5 : not (eq A B)
HH : iff (OS A' B'' G A'') (and (Out A' G A'') (not (Col A' B'' G)))
HH3 : Col G A'' A'
HH2 : Col A' B'' A'
HH1 : not (eq A' B'')
HElim : Midpoint A' B' B'''
HCol : Col A' B' B'''
Cong3 : Cong A'' B'' A' B'''
HPar3 : Par A'' B'' A' B'''
HCong2 : Cong A C' A'' B''
HPar2 : Par A B A'' B''
HCong1 : Cong A C' A' B'
HPar1 : Par B A A' B'
HB' : Midpoint G B'' B'''
B''' : Tpoint
H2 : Midpoint B'' B G
B'' : Tpoint
H1 : Midpoint C' A B
C' : Tpoint
H0 : Midpoint B' A C
B' : Tpoint
HNC : not (Col A B C)
HMid3 : Midpoint G A' A''
HMid2 : Midpoint A'' A G
HMid1 : Midpoint A' B C
A,B,C,G,A',A'' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Out A' G A'') (not (Col A' B'' G))
+++++
split; try (intro; apply HABG; ColR).
-----
Lemma is_gravity_center_third_reci : forall A B C G A' A'', Midpoint A' B C -> Midpoint A'' A G -> Midpoint G A' A'' -> ~ Col A B C -> is_gravity_center G A B C.
Proof.
intros A B C G A' A'' HMid1 HMid2 HMid3 HNC.
split; Col.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
exists A'; exists B'; split; Col; try split; Col; split; try (assert (A <> G) by (intro; treat_equalities; assert_cols; Col); assert_diffs; assert_cols; ColR).
Name B'' the midpoint of B and G.
assert (HB' := symmetric_point_construction B'' G).
destruct HB' as [B''' HB'].
assert (HPar1 : Par B A A' B').
assert (HCong1 : Cong A C' A' B').
assert (HPar2 : Par A B A'' B'').
assert (HCong2 : Cong A C' A'' B'').
assert (HPar3 : Par A'' B'' A' B''').
assert (Cong3 : Cong A'' B'' A' B''').
assert (HCol : Col A' B' B''').
assert (HElim := l7_20 A' B' B'''); elim HElim; clear HElim; try intro HElim; Col; eCong.
assert (HFalse : OS A' B'' A'' B''').
apply one_side_transitivity with G.
apply one_side_symmetry.
assert (HH1 : A' <> B'') by (intro; treat_equalities; Col).
assert (HH2 : Col A' B'' A') by Col.
assert (HH3 : Col G A'' A') by (assert_cols; Col).
assert (HH := l9_19 A' B'' G A'' A' HH2 HH3); rewrite HH.
assert_diffs; assert_cols; show_distinct G A'; treat_equalities; Col.
show_distinct G A''; treat_equalities; Col.
show_distinct G B''; treat_equalities; Col.
assert_diffs; assert_cols; assert (HABG : ~ Col A B G) by (intro; apply HNC; ColR).
split; try (intro; apply HABG; ColR).

*****
HABG : not (Col A B G)
H31 : not (eq A'' A)
H30 : not (eq A G)
H29 : not (eq B'' B)
H28 : not (eq B G)
H27 : not (eq A' A'')
H26 : not (eq G B''')
H25 : not (eq B'' B''')
H23 : not (eq G B'')
H22 : not (eq G A'')
H21 : not (eq G A')
H20 : Col A' B C
H19 : Col A'' A G
H18 : Col B' A C
H17 : Col C' A B
H16 : Col B'' B G
H14 : Col G B'' B'''
H15 : not (eq B' B''')
H13 : not (eq A' B')
H12 : not (eq A' B''')
H : not (eq A'' B'')
H11 : not (eq C' B)
H10 : not (eq C' A)
H9 : not (eq A' C)
H8 : not (eq A' B)
H6 : not (eq B' C)
H3 : not (eq B' A)
H7 : not (eq A C)
H4 : not (eq B C)
H5 : not (eq A B)
HH : iff (OS A' B'' G A'') (and (Out A' G A'') (not (Col A' B'' G)))
HH3 : Col G A'' A'
HH2 : Col A' B'' A'
HH1 : not (eq A' B'')
HElim : Midpoint A' B' B'''
HCol : Col A' B' B'''
Cong3 : Cong A'' B'' A' B'''
HPar3 : Par A'' B'' A' B'''
HCong2 : Cong A C' A'' B''
HPar2 : Par A B A'' B''
HCong1 : Cong A C' A' B'
HPar1 : Par B A A' B'
HB' : Midpoint G B'' B'''
B''' : Tpoint
H2 : Midpoint B'' B G
B'' : Tpoint
H1 : Midpoint C' A B
C' : Tpoint
H0 : Midpoint B' A C
B' : Tpoint
HNC : not (Col A B C)
HMid3 : Midpoint G A' A''
HMid2 : Midpoint A'' A G
HMid1 : Midpoint A' B C
A,B,C,G,A',A'' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Out A' G A''
+++++
split; Col.
-----
Lemma is_gravity_center_third_reci : forall A B C G A' A'', Midpoint A' B C -> Midpoint A'' A G -> Midpoint G A' A'' -> ~ Col A B C -> is_gravity_center G A B C.
Proof.
intros A B C G A' A'' HMid1 HMid2 HMid3 HNC.
split; Col.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
exists A'; exists B'; split; Col; try split; Col; split; try (assert (A <> G) by (intro; treat_equalities; assert_cols; Col); assert_diffs; assert_cols; ColR).
Name B'' the midpoint of B and G.
assert (HB' := symmetric_point_construction B'' G).
destruct HB' as [B''' HB'].
assert (HPar1 : Par B A A' B').
assert (HCong1 : Cong A C' A' B').
assert (HPar2 : Par A B A'' B'').
assert (HCong2 : Cong A C' A'' B'').
assert (HPar3 : Par A'' B'' A' B''').
assert (Cong3 : Cong A'' B'' A' B''').
assert (HCol : Col A' B' B''').
assert (HElim := l7_20 A' B' B'''); elim HElim; clear HElim; try intro HElim; Col; eCong.
assert (HFalse : OS A' B'' A'' B''').
apply one_side_transitivity with G.
apply one_side_symmetry.
assert (HH1 : A' <> B'') by (intro; treat_equalities; Col).
assert (HH2 : Col A' B'' A') by Col.
assert (HH3 : Col G A'' A') by (assert_cols; Col).
assert (HH := l9_19 A' B'' G A'' A' HH2 HH3); rewrite HH.
assert_diffs; assert_cols; show_distinct G A'; treat_equalities; Col.
show_distinct G A''; treat_equalities; Col.
show_distinct G B''; treat_equalities; Col.
assert_diffs; assert_cols; assert (HABG : ~ Col A B G) by (intro; apply HNC; ColR).
split; try (intro; apply HABG; ColR).
split; Col.

*****
HABG : not (Col A B G)
H31 : not (eq A'' A)
H30 : not (eq A G)
H29 : not (eq B'' B)
H28 : not (eq B G)
H27 : not (eq A' A'')
H26 : not (eq G B''')
H25 : not (eq B'' B''')
H23 : not (eq G B'')
H22 : not (eq G A'')
H21 : not (eq G A')
H20 : Col A' B C
H19 : Col A'' A G
H18 : Col B' A C
H17 : Col C' A B
H16 : Col B'' B G
H14 : Col G B'' B'''
H15 : not (eq B' B''')
H13 : not (eq A' B')
H12 : not (eq A' B''')
H : not (eq A'' B'')
H11 : not (eq C' B)
H10 : not (eq C' A)
H9 : not (eq A' C)
H8 : not (eq A' B)
H6 : not (eq B' C)
H3 : not (eq B' A)
H7 : not (eq A C)
H4 : not (eq B C)
H5 : not (eq A B)
HH : iff (OS A' B'' G A'') (and (Out A' G A'') (not (Col A' B'' G)))
HH3 : Col G A'' A'
HH2 : Col A' B'' A'
HH1 : not (eq A' B'')
HElim : Midpoint A' B' B'''
HCol : Col A' B' B'''
Cong3 : Cong A'' B'' A' B'''
HPar3 : Par A'' B'' A' B'''
HCong2 : Cong A C' A'' B''
HPar2 : Par A B A'' B''
HCong1 : Cong A C' A' B'
HPar1 : Par B A A' B'
HB' : Midpoint G B'' B'''
B''' : Tpoint
H2 : Midpoint B'' B G
B'' : Tpoint
H1 : Midpoint C' A B
C' : Tpoint
H0 : Midpoint B' A C
B' : Tpoint
HNC : not (Col A B C)
HMid3 : Midpoint G A' A''
HMid2 : Midpoint A'' A G
HMid1 : Midpoint A' B C
A,B,C,G,A',A'' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (not (eq A'' A')) (or (Bet A' G A'') (Bet A' A'' G))
+++++
split; try (intro; treat_equalities; Col).
-----
Lemma is_gravity_center_third_reci : forall A B C G A' A'', Midpoint A' B C -> Midpoint A'' A G -> Midpoint G A' A'' -> ~ Col A B C -> is_gravity_center G A B C.
Proof.
intros A B C G A' A'' HMid1 HMid2 HMid3 HNC.
split; Col.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
exists A'; exists B'; split; Col; try split; Col; split; try (assert (A <> G) by (intro; treat_equalities; assert_cols; Col); assert_diffs; assert_cols; ColR).
Name B'' the midpoint of B and G.
assert (HB' := symmetric_point_construction B'' G).
destruct HB' as [B''' HB'].
assert (HPar1 : Par B A A' B').
assert (HCong1 : Cong A C' A' B').
assert (HPar2 : Par A B A'' B'').
assert (HCong2 : Cong A C' A'' B'').
assert (HPar3 : Par A'' B'' A' B''').
assert (Cong3 : Cong A'' B'' A' B''').
assert (HCol : Col A' B' B''').
assert (HElim := l7_20 A' B' B'''); elim HElim; clear HElim; try intro HElim; Col; eCong.
assert (HFalse : OS A' B'' A'' B''').
apply one_side_transitivity with G.
apply one_side_symmetry.
assert (HH1 : A' <> B'') by (intro; treat_equalities; Col).
assert (HH2 : Col A' B'' A') by Col.
assert (HH3 : Col G A'' A') by (assert_cols; Col).
assert (HH := l9_19 A' B'' G A'' A' HH2 HH3); rewrite HH.
assert_diffs; assert_cols; show_distinct G A'; treat_equalities; Col.
show_distinct G A''; treat_equalities; Col.
show_distinct G B''; treat_equalities; Col.
assert_diffs; assert_cols; assert (HABG : ~ Col A B G) by (intro; apply HNC; ColR).
split; try (intro; apply HABG; ColR).
split; Col.
split; try (intro; treat_equalities; Col).

*****
HABG : not (Col A B G)
H31 : not (eq A'' A)
H30 : not (eq A G)
H29 : not (eq B'' B)
H28 : not (eq B G)
H27 : not (eq A' A'')
H26 : not (eq G B''')
H25 : not (eq B'' B''')
H23 : not (eq G B'')
H22 : not (eq G A'')
H21 : not (eq G A')
H20 : Col A' B C
H19 : Col A'' A G
H18 : Col B' A C
H17 : Col C' A B
H16 : Col B'' B G
H14 : Col G B'' B'''
H15 : not (eq B' B''')
H13 : not (eq A' B')
H12 : not (eq A' B''')
H : not (eq A'' B'')
H11 : not (eq C' B)
H10 : not (eq C' A)
H9 : not (eq A' C)
H8 : not (eq A' B)
H6 : not (eq B' C)
H3 : not (eq B' A)
H7 : not (eq A C)
H4 : not (eq B C)
H5 : not (eq A B)
HH : iff (OS A' B'' G A'') (and (Out A' G A'') (not (Col A' B'' G)))
HH3 : Col G A'' A'
HH2 : Col A' B'' A'
HH1 : not (eq A' B'')
HElim : Midpoint A' B' B'''
HCol : Col A' B' B'''
Cong3 : Cong A'' B'' A' B'''
HPar3 : Par A'' B'' A' B'''
HCong2 : Cong A C' A'' B''
HPar2 : Par A B A'' B''
HCong1 : Cong A C' A' B'
HPar1 : Par B A A' B'
HB' : Midpoint G B'' B'''
B''' : Tpoint
H2 : Midpoint B'' B G
B'' : Tpoint
H1 : Midpoint C' A B
C' : Tpoint
H0 : Midpoint B' A C
B' : Tpoint
HNC : not (Col A B C)
HMid3 : Midpoint G A' A''
HMid2 : Midpoint A'' A G
HMid1 : Midpoint A' B C
A,B,C,G,A',A'' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (Bet A' G A'') (Bet A' A'' G)
+++++
unfold Midpoint in *; spliter; Between.
-----
Lemma is_gravity_center_third_reci : forall A B C G A' A'', Midpoint A' B C -> Midpoint A'' A G -> Midpoint G A' A'' -> ~ Col A B C -> is_gravity_center G A B C.
Proof.
intros A B C G A' A'' HMid1 HMid2 HMid3 HNC.
split; Col.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
exists A'; exists B'; split; Col; try split; Col; split; try (assert (A <> G) by (intro; treat_equalities; assert_cols; Col); assert_diffs; assert_cols; ColR).
Name B'' the midpoint of B and G.
assert (HB' := symmetric_point_construction B'' G).
destruct HB' as [B''' HB'].
assert (HPar1 : Par B A A' B').
assert (HCong1 : Cong A C' A' B').
assert (HPar2 : Par A B A'' B'').
assert (HCong2 : Cong A C' A'' B'').
assert (HPar3 : Par A'' B'' A' B''').
assert (Cong3 : Cong A'' B'' A' B''').
assert (HCol : Col A' B' B''').
assert (HElim := l7_20 A' B' B'''); elim HElim; clear HElim; try intro HElim; Col; eCong.
assert (HFalse : OS A' B'' A'' B''').
apply one_side_transitivity with G.

*****
HElim : Midpoint A' B' B'''
HCol : Col A' B' B'''
Cong3 : Cong A'' B'' A' B'''
HPar3 : Par A'' B'' A' B'''
HCong2 : Cong A C' A'' B''
HPar2 : Par A B A'' B''
HCong1 : Cong A C' A' B'
HPar1 : Par B A A' B'
HB' : Midpoint G B'' B'''
B''' : Tpoint
H2 : Midpoint B'' B G
B'' : Tpoint
H1 : Midpoint C' A B
C' : Tpoint
H0 : Midpoint B' A C
B' : Tpoint
HNC : not (Col A B C)
HMid3 : Midpoint G A' A''
HMid2 : Midpoint A'' A G
HMid1 : Midpoint A' B C
A,B,C,G,A',A'' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS A' B'' G B'''
+++++
assert (HH1 : A' <> B'') by (intro; treat_equalities; Col).
-----
Lemma is_gravity_center_third_reci : forall A B C G A' A'', Midpoint A' B C -> Midpoint A'' A G -> Midpoint G A' A'' -> ~ Col A B C -> is_gravity_center G A B C.
Proof.
intros A B C G A' A'' HMid1 HMid2 HMid3 HNC.
split; Col.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
exists A'; exists B'; split; Col; try split; Col; split; try (assert (A <> G) by (intro; treat_equalities; assert_cols; Col); assert_diffs; assert_cols; ColR).
Name B'' the midpoint of B and G.
assert (HB' := symmetric_point_construction B'' G).
destruct HB' as [B''' HB'].
assert (HPar1 : Par B A A' B').
assert (HCong1 : Cong A C' A' B').
assert (HPar2 : Par A B A'' B'').
assert (HCong2 : Cong A C' A'' B'').
assert (HPar3 : Par A'' B'' A' B''').
assert (Cong3 : Cong A'' B'' A' B''').
assert (HCol : Col A' B' B''').
assert (HElim := l7_20 A' B' B'''); elim HElim; clear HElim; try intro HElim; Col; eCong.
assert (HFalse : OS A' B'' A'' B''').
apply one_side_transitivity with G.
assert (HH1 : A' <> B'') by (intro; treat_equalities; Col).

*****
HH1 : not (eq A' B'')
HElim : Midpoint A' B' B'''
HCol : Col A' B' B'''
Cong3 : Cong A'' B'' A' B'''
HPar3 : Par A'' B'' A' B'''
HCong2 : Cong A C' A'' B''
HPar2 : Par A B A'' B''
HCong1 : Cong A C' A' B'
HPar1 : Par B A A' B'
HB' : Midpoint G B'' B'''
B''' : Tpoint
H2 : Midpoint B'' B G
B'' : Tpoint
H1 : Midpoint C' A B
C' : Tpoint
H0 : Midpoint B' A C
B' : Tpoint
HNC : not (Col A B C)
HMid3 : Midpoint G A' A''
HMid2 : Midpoint A'' A G
HMid1 : Midpoint A' B C
A,B,C,G,A',A'' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS A' B'' G B'''
+++++
assert (HH2 : Col A' B'' B'') by Col.
-----
Lemma is_gravity_center_third_reci : forall A B C G A' A'', Midpoint A' B C -> Midpoint A'' A G -> Midpoint G A' A'' -> ~ Col A B C -> is_gravity_center G A B C.
Proof.
intros A B C G A' A'' HMid1 HMid2 HMid3 HNC.
split; Col.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
exists A'; exists B'; split; Col; try split; Col; split; try (assert (A <> G) by (intro; treat_equalities; assert_cols; Col); assert_diffs; assert_cols; ColR).
Name B'' the midpoint of B and G.
assert (HB' := symmetric_point_construction B'' G).
destruct HB' as [B''' HB'].
assert (HPar1 : Par B A A' B').
assert (HCong1 : Cong A C' A' B').
assert (HPar2 : Par A B A'' B'').
assert (HCong2 : Cong A C' A'' B'').
assert (HPar3 : Par A'' B'' A' B''').
assert (Cong3 : Cong A'' B'' A' B''').
assert (HCol : Col A' B' B''').
assert (HElim := l7_20 A' B' B'''); elim HElim; clear HElim; try intro HElim; Col; eCong.
assert (HFalse : OS A' B'' A'' B''').
apply one_side_transitivity with G.
assert (HH1 : A' <> B'') by (intro; treat_equalities; Col).
assert (HH2 : Col A' B'' B'') by Col.

*****
HH2 : Col A' B'' B''
HH1 : not (eq A' B'')
HElim : Midpoint A' B' B'''
HCol : Col A' B' B'''
Cong3 : Cong A'' B'' A' B'''
HPar3 : Par A'' B'' A' B'''
HCong2 : Cong A C' A'' B''
HPar2 : Par A B A'' B''
HCong1 : Cong A C' A' B'
HPar1 : Par B A A' B'
HB' : Midpoint G B'' B'''
B''' : Tpoint
H2 : Midpoint B'' B G
B'' : Tpoint
H1 : Midpoint C' A B
C' : Tpoint
H0 : Midpoint B' A C
B' : Tpoint
HNC : not (Col A B C)
HMid3 : Midpoint G A' A''
HMid2 : Midpoint A'' A G
HMid1 : Midpoint A' B C
A,B,C,G,A',A'' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS A' B'' G B'''
+++++
assert (HH3 : Col G B''' B'') by (assert_cols; Col).
-----
Lemma is_gravity_center_third_reci : forall A B C G A' A'', Midpoint A' B C -> Midpoint A'' A G -> Midpoint G A' A'' -> ~ Col A B C -> is_gravity_center G A B C.
Proof.
intros A B C G A' A'' HMid1 HMid2 HMid3 HNC.
split; Col.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
exists A'; exists B'; split; Col; try split; Col; split; try (assert (A <> G) by (intro; treat_equalities; assert_cols; Col); assert_diffs; assert_cols; ColR).
Name B'' the midpoint of B and G.
assert (HB' := symmetric_point_construction B'' G).
destruct HB' as [B''' HB'].
assert (HPar1 : Par B A A' B').
assert (HCong1 : Cong A C' A' B').
assert (HPar2 : Par A B A'' B'').
assert (HCong2 : Cong A C' A'' B'').
assert (HPar3 : Par A'' B'' A' B''').
assert (Cong3 : Cong A'' B'' A' B''').
assert (HCol : Col A' B' B''').
assert (HElim := l7_20 A' B' B'''); elim HElim; clear HElim; try intro HElim; Col; eCong.
assert (HFalse : OS A' B'' A'' B''').
apply one_side_transitivity with G.
assert (HH1 : A' <> B'') by (intro; treat_equalities; Col).
assert (HH2 : Col A' B'' B'') by Col.
assert (HH3 : Col G B''' B'') by (assert_cols; Col).

*****
HH3 : Col G B''' B''
HH2 : Col A' B'' B''
HH1 : not (eq A' B'')
HElim : Midpoint A' B' B'''
HCol : Col A' B' B'''
Cong3 : Cong A'' B'' A' B'''
HPar3 : Par A'' B'' A' B'''
HCong2 : Cong A C' A'' B''
HPar2 : Par A B A'' B''
HCong1 : Cong A C' A' B'
HPar1 : Par B A A' B'
HB' : Midpoint G B'' B'''
B''' : Tpoint
H2 : Midpoint B'' B G
B'' : Tpoint
H1 : Midpoint C' A B
C' : Tpoint
H0 : Midpoint B' A C
B' : Tpoint
HNC : not (Col A B C)
HMid3 : Midpoint G A' A''
HMid2 : Midpoint A'' A G
HMid1 : Midpoint A' B C
A,B,C,G,A',A'' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS A' B'' G B'''
+++++
assert (HH := l9_19 A' B'' G B''' B'' HH2 HH3); rewrite HH.
-----
Lemma is_gravity_center_third_reci : forall A B C G A' A'', Midpoint A' B C -> Midpoint A'' A G -> Midpoint G A' A'' -> ~ Col A B C -> is_gravity_center G A B C.
Proof.
intros A B C G A' A'' HMid1 HMid2 HMid3 HNC.
split; Col.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
exists A'; exists B'; split; Col; try split; Col; split; try (assert (A <> G) by (intro; treat_equalities; assert_cols; Col); assert_diffs; assert_cols; ColR).
Name B'' the midpoint of B and G.
assert (HB' := symmetric_point_construction B'' G).
destruct HB' as [B''' HB'].
assert (HPar1 : Par B A A' B').
assert (HCong1 : Cong A C' A' B').
assert (HPar2 : Par A B A'' B'').
assert (HCong2 : Cong A C' A'' B'').
assert (HPar3 : Par A'' B'' A' B''').
assert (Cong3 : Cong A'' B'' A' B''').
assert (HCol : Col A' B' B''').
assert (HElim := l7_20 A' B' B'''); elim HElim; clear HElim; try intro HElim; Col; eCong.
assert (HFalse : OS A' B'' A'' B''').
apply one_side_transitivity with G.
assert (HH1 : A' <> B'') by (intro; treat_equalities; Col).
assert (HH2 : Col A' B'' B'') by Col.
assert (HH3 : Col G B''' B'') by (assert_cols; Col).
assert (HH := l9_19 A' B'' G B''' B'' HH2 HH3); rewrite HH.

*****
HH : iff (OS A' B'' G B''') (and (Out B'' G B''') (not (Col A' B'' G)))
HH3 : Col G B''' B''
HH2 : Col A' B'' B''
HH1 : not (eq A' B'')
HElim : Midpoint A' B' B'''
HCol : Col A' B' B'''
Cong3 : Cong A'' B'' A' B'''
HPar3 : Par A'' B'' A' B'''
HCong2 : Cong A C' A'' B''
HPar2 : Par A B A'' B''
HCong1 : Cong A C' A' B'
HPar1 : Par B A A' B'
HB' : Midpoint G B'' B'''
B''' : Tpoint
H2 : Midpoint B'' B G
B'' : Tpoint
H1 : Midpoint C' A B
C' : Tpoint
H0 : Midpoint B' A C
B' : Tpoint
HNC : not (Col A B C)
HMid3 : Midpoint G A' A''
HMid2 : Midpoint A'' A G
HMid1 : Midpoint A' B C
A,B,C,G,A',A'' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Out B'' G B''') (not (Col A' B'' G))
+++++
assert_diffs; assert_cols; show_distinct G A'; treat_equalities; Col.
-----
Lemma is_gravity_center_third_reci : forall A B C G A' A'', Midpoint A' B C -> Midpoint A'' A G -> Midpoint G A' A'' -> ~ Col A B C -> is_gravity_center G A B C.
Proof.
intros A B C G A' A'' HMid1 HMid2 HMid3 HNC.
split; Col.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
exists A'; exists B'; split; Col; try split; Col; split; try (assert (A <> G) by (intro; treat_equalities; assert_cols; Col); assert_diffs; assert_cols; ColR).
Name B'' the midpoint of B and G.
assert (HB' := symmetric_point_construction B'' G).
destruct HB' as [B''' HB'].
assert (HPar1 : Par B A A' B').
assert (HCong1 : Cong A C' A' B').
assert (HPar2 : Par A B A'' B'').
assert (HCong2 : Cong A C' A'' B'').
assert (HPar3 : Par A'' B'' A' B''').
assert (Cong3 : Cong A'' B'' A' B''').
assert (HCol : Col A' B' B''').
assert (HElim := l7_20 A' B' B'''); elim HElim; clear HElim; try intro HElim; Col; eCong.
assert (HFalse : OS A' B'' A'' B''').
apply one_side_transitivity with G.
assert (HH1 : A' <> B'') by (intro; treat_equalities; Col).
assert (HH2 : Col A' B'' B'') by Col.
assert (HH3 : Col G B''' B'') by (assert_cols; Col).
assert (HH := l9_19 A' B'' G B''' B'' HH2 HH3); rewrite HH.
assert_diffs; assert_cols; show_distinct G A'; treat_equalities; Col.

*****
H21 : not (eq G A')
H20 : Col A' B C
H19 : Col A'' A G
H18 : Col G A' A''
H17 : Col B' A C
H16 : Col C' A B
H14 : Col B'' B G
H15 : not (eq B' B''')
H13 : not (eq A' B')
H12 : not (eq A' B''')
H : not (eq A'' B'')
H11 : not (eq C' B)
H10 : not (eq C' A)
H9 : not (eq A' C)
H8 : not (eq A' B)
H6 : not (eq B' C)
H3 : not (eq B' A)
H7 : not (eq A C)
H4 : not (eq B C)
H5 : not (eq A B)
HH : iff (OS A' B'' G B''') (and (Out B'' G B''') (not (Col A' B'' G)))
HH3 : Col G B''' B''
HH2 : Col A' B'' B''
HH1 : not (eq A' B'')
HElim : Midpoint A' B' B'''
HCol : Col A' B' B'''
Cong3 : Cong A'' B'' A' B'''
HPar3 : Par A'' B'' A' B'''
HCong2 : Cong A C' A'' B''
HPar2 : Par A B A'' B''
HCong1 : Cong A C' A' B'
HPar1 : Par B A A' B'
HB' : Midpoint G B'' B'''
B''' : Tpoint
H2 : Midpoint B'' B G
B'' : Tpoint
H1 : Midpoint C' A B
C' : Tpoint
H0 : Midpoint B' A C
B' : Tpoint
HNC : not (Col A B C)
HMid3 : Midpoint G A' A''
HMid2 : Midpoint A'' A G
HMid1 : Midpoint A' B C
A,B,C,G,A',A'' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Out B'' G B''') (not (Col A' B'' G))
+++++
show_distinct G A''; treat_equalities; Col.
-----
Lemma is_gravity_center_third_reci : forall A B C G A' A'', Midpoint A' B C -> Midpoint A'' A G -> Midpoint G A' A'' -> ~ Col A B C -> is_gravity_center G A B C.
Proof.
intros A B C G A' A'' HMid1 HMid2 HMid3 HNC.
split; Col.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
exists A'; exists B'; split; Col; try split; Col; split; try (assert (A <> G) by (intro; treat_equalities; assert_cols; Col); assert_diffs; assert_cols; ColR).
Name B'' the midpoint of B and G.
assert (HB' := symmetric_point_construction B'' G).
destruct HB' as [B''' HB'].
assert (HPar1 : Par B A A' B').
assert (HCong1 : Cong A C' A' B').
assert (HPar2 : Par A B A'' B'').
assert (HCong2 : Cong A C' A'' B'').
assert (HPar3 : Par A'' B'' A' B''').
assert (Cong3 : Cong A'' B'' A' B''').
assert (HCol : Col A' B' B''').
assert (HElim := l7_20 A' B' B'''); elim HElim; clear HElim; try intro HElim; Col; eCong.
assert (HFalse : OS A' B'' A'' B''').
apply one_side_transitivity with G.
assert (HH1 : A' <> B'') by (intro; treat_equalities; Col).
assert (HH2 : Col A' B'' B'') by Col.
assert (HH3 : Col G B''' B'') by (assert_cols; Col).
assert (HH := l9_19 A' B'' G B''' B'' HH2 HH3); rewrite HH.
assert_diffs; assert_cols; show_distinct G A'; treat_equalities; Col.
show_distinct G A''; treat_equalities; Col.

*****
H22 : not (eq G A'')
H21 : not (eq G A')
H20 : Col A' B C
H19 : Col A'' A G
H18 : Col G A' A''
H17 : Col B' A C
H16 : Col C' A B
H14 : Col B'' B G
H15 : not (eq B' B''')
H13 : not (eq A' B')
H12 : not (eq A' B''')
H : not (eq A'' B'')
H11 : not (eq C' B)
H10 : not (eq C' A)
H9 : not (eq A' C)
H8 : not (eq A' B)
H6 : not (eq B' C)
H3 : not (eq B' A)
H7 : not (eq A C)
H4 : not (eq B C)
H5 : not (eq A B)
HH : iff (OS A' B'' G B''') (and (Out B'' G B''') (not (Col A' B'' G)))
HH3 : Col G B''' B''
HH2 : Col A' B'' B''
HH1 : not (eq A' B'')
HElim : Midpoint A' B' B'''
HCol : Col A' B' B'''
Cong3 : Cong A'' B'' A' B'''
HPar3 : Par A'' B'' A' B'''
HCong2 : Cong A C' A'' B''
HPar2 : Par A B A'' B''
HCong1 : Cong A C' A' B'
HPar1 : Par B A A' B'
HB' : Midpoint G B'' B'''
B''' : Tpoint
H2 : Midpoint B'' B G
B'' : Tpoint
H1 : Midpoint C' A B
C' : Tpoint
H0 : Midpoint B' A C
B' : Tpoint
HNC : not (Col A B C)
HMid3 : Midpoint G A' A''
HMid2 : Midpoint A'' A G
HMid1 : Midpoint A' B C
A,B,C,G,A',A'' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Out B'' G B''') (not (Col A' B'' G))
+++++
show_distinct G B''; treat_equalities; Col.
-----
Lemma is_gravity_center_third_reci : forall A B C G A' A'', Midpoint A' B C -> Midpoint A'' A G -> Midpoint G A' A'' -> ~ Col A B C -> is_gravity_center G A B C.
Proof.
intros A B C G A' A'' HMid1 HMid2 HMid3 HNC.
split; Col.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
exists A'; exists B'; split; Col; try split; Col; split; try (assert (A <> G) by (intro; treat_equalities; assert_cols; Col); assert_diffs; assert_cols; ColR).
Name B'' the midpoint of B and G.
assert (HB' := symmetric_point_construction B'' G).
destruct HB' as [B''' HB'].
assert (HPar1 : Par B A A' B').
assert (HCong1 : Cong A C' A' B').
assert (HPar2 : Par A B A'' B'').
assert (HCong2 : Cong A C' A'' B'').
assert (HPar3 : Par A'' B'' A' B''').
assert (Cong3 : Cong A'' B'' A' B''').
assert (HCol : Col A' B' B''').
assert (HElim := l7_20 A' B' B'''); elim HElim; clear HElim; try intro HElim; Col; eCong.
assert (HFalse : OS A' B'' A'' B''').
apply one_side_transitivity with G.
assert (HH1 : A' <> B'') by (intro; treat_equalities; Col).
assert (HH2 : Col A' B'' B'') by Col.
assert (HH3 : Col G B''' B'') by (assert_cols; Col).
assert (HH := l9_19 A' B'' G B''' B'' HH2 HH3); rewrite HH.
assert_diffs; assert_cols; show_distinct G A'; treat_equalities; Col.
show_distinct G A''; treat_equalities; Col.
show_distinct G B''; treat_equalities; Col.

*****
H23 : not (eq G B'')
H22 : not (eq G A'')
H21 : not (eq G A')
H20 : Col A' B C
H19 : Col A'' A G
H18 : Col G A' A''
H17 : Col B' A C
H16 : Col C' A B
H14 : Col B'' B G
H15 : not (eq B' B''')
H13 : not (eq A' B')
H12 : not (eq A' B''')
H : not (eq A'' B'')
H11 : not (eq C' B)
H10 : not (eq C' A)
H9 : not (eq A' C)
H8 : not (eq A' B)
H6 : not (eq B' C)
H3 : not (eq B' A)
H7 : not (eq A C)
H4 : not (eq B C)
H5 : not (eq A B)
HH : iff (OS A' B'' G B''') (and (Out B'' G B''') (not (Col A' B'' G)))
HH3 : Col G B''' B''
HH2 : Col A' B'' B''
HH1 : not (eq A' B'')
HElim : Midpoint A' B' B'''
HCol : Col A' B' B'''
Cong3 : Cong A'' B'' A' B'''
HPar3 : Par A'' B'' A' B'''
HCong2 : Cong A C' A'' B''
HPar2 : Par A B A'' B''
HCong1 : Cong A C' A' B'
HPar1 : Par B A A' B'
HB' : Midpoint G B'' B'''
B''' : Tpoint
H2 : Midpoint B'' B G
B'' : Tpoint
H1 : Midpoint C' A B
C' : Tpoint
H0 : Midpoint B' A C
B' : Tpoint
HNC : not (Col A B C)
HMid3 : Midpoint G A' A''
HMid2 : Midpoint A'' A G
HMid1 : Midpoint A' B C
A,B,C,G,A',A'' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Out B'' G B''') (not (Col A' B'' G))
+++++
assert_diffs; assert_cols; assert (HABG : ~ Col A B G) by (intro; apply HNC; ColR).
-----
Lemma is_gravity_center_third_reci : forall A B C G A' A'', Midpoint A' B C -> Midpoint A'' A G -> Midpoint G A' A'' -> ~ Col A B C -> is_gravity_center G A B C.
Proof.
intros A B C G A' A'' HMid1 HMid2 HMid3 HNC.
split; Col.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
exists A'; exists B'; split; Col; try split; Col; split; try (assert (A <> G) by (intro; treat_equalities; assert_cols; Col); assert_diffs; assert_cols; ColR).
Name B'' the midpoint of B and G.
assert (HB' := symmetric_point_construction B'' G).
destruct HB' as [B''' HB'].
assert (HPar1 : Par B A A' B').
assert (HCong1 : Cong A C' A' B').
assert (HPar2 : Par A B A'' B'').
assert (HCong2 : Cong A C' A'' B'').
assert (HPar3 : Par A'' B'' A' B''').
assert (Cong3 : Cong A'' B'' A' B''').
assert (HCol : Col A' B' B''').
assert (HElim := l7_20 A' B' B'''); elim HElim; clear HElim; try intro HElim; Col; eCong.
assert (HFalse : OS A' B'' A'' B''').
apply one_side_transitivity with G.
assert (HH1 : A' <> B'') by (intro; treat_equalities; Col).
assert (HH2 : Col A' B'' B'') by Col.
assert (HH3 : Col G B''' B'') by (assert_cols; Col).
assert (HH := l9_19 A' B'' G B''' B'' HH2 HH3); rewrite HH.
assert_diffs; assert_cols; show_distinct G A'; treat_equalities; Col.
show_distinct G A''; treat_equalities; Col.
show_distinct G B''; treat_equalities; Col.
assert_diffs; assert_cols; assert (HABG : ~ Col A B G) by (intro; apply HNC; ColR).

*****
HABG : not (Col A B G)
H31 : not (eq A'' A)
H30 : not (eq A G)
H29 : not (eq B'' B)
H28 : not (eq B G)
H27 : not (eq A' A'')
H26 : not (eq G B''')
H25 : not (eq B'' B''')
H23 : not (eq G B'')
H22 : not (eq G A'')
H21 : not (eq G A')
H20 : Col A' B C
H19 : Col A'' A G
H18 : Col G A' A''
H17 : Col B' A C
H16 : Col C' A B
H14 : Col B'' B G
H15 : not (eq B' B''')
H13 : not (eq A' B')
H12 : not (eq A' B''')
H : not (eq A'' B'')
H11 : not (eq C' B)
H10 : not (eq C' A)
H9 : not (eq A' C)
H8 : not (eq A' B)
H6 : not (eq B' C)
H3 : not (eq B' A)
H7 : not (eq A C)
H4 : not (eq B C)
H5 : not (eq A B)
HH : iff (OS A' B'' G B''') (and (Out B'' G B''') (not (Col A' B'' G)))
HH3 : Col G B''' B''
HH2 : Col A' B'' B''
HH1 : not (eq A' B'')
HElim : Midpoint A' B' B'''
HCol : Col A' B' B'''
Cong3 : Cong A'' B'' A' B'''
HPar3 : Par A'' B'' A' B'''
HCong2 : Cong A C' A'' B''
HPar2 : Par A B A'' B''
HCong1 : Cong A C' A' B'
HPar1 : Par B A A' B'
HB' : Midpoint G B'' B'''
B''' : Tpoint
H2 : Midpoint B'' B G
B'' : Tpoint
H1 : Midpoint C' A B
C' : Tpoint
H0 : Midpoint B' A C
B' : Tpoint
HNC : not (Col A B C)
HMid3 : Midpoint G A' A''
HMid2 : Midpoint A'' A G
HMid1 : Midpoint A' B C
A,B,C,G,A',A'' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Out B'' G B''') (not (Col A' B'' G))
+++++
split; try (intro; apply HABG; ColR).
-----
Lemma is_gravity_center_third_reci : forall A B C G A' A'', Midpoint A' B C -> Midpoint A'' A G -> Midpoint G A' A'' -> ~ Col A B C -> is_gravity_center G A B C.
Proof.
intros A B C G A' A'' HMid1 HMid2 HMid3 HNC.
split; Col.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
exists A'; exists B'; split; Col; try split; Col; split; try (assert (A <> G) by (intro; treat_equalities; assert_cols; Col); assert_diffs; assert_cols; ColR).
Name B'' the midpoint of B and G.
assert (HB' := symmetric_point_construction B'' G).
destruct HB' as [B''' HB'].
assert (HPar1 : Par B A A' B').
assert (HCong1 : Cong A C' A' B').
assert (HPar2 : Par A B A'' B'').
assert (HCong2 : Cong A C' A'' B'').
assert (HPar3 : Par A'' B'' A' B''').
assert (Cong3 : Cong A'' B'' A' B''').
assert (HCol : Col A' B' B''').
assert (HElim := l7_20 A' B' B'''); elim HElim; clear HElim; try intro HElim; Col; eCong.
assert (HFalse : OS A' B'' A'' B''').
apply one_side_transitivity with G.
assert (HH1 : A' <> B'') by (intro; treat_equalities; Col).
assert (HH2 : Col A' B'' B'') by Col.
assert (HH3 : Col G B''' B'') by (assert_cols; Col).
assert (HH := l9_19 A' B'' G B''' B'' HH2 HH3); rewrite HH.
assert_diffs; assert_cols; show_distinct G A'; treat_equalities; Col.
show_distinct G A''; treat_equalities; Col.
show_distinct G B''; treat_equalities; Col.
assert_diffs; assert_cols; assert (HABG : ~ Col A B G) by (intro; apply HNC; ColR).
split; try (intro; apply HABG; ColR).

*****
HABG : not (Col A B G)
H31 : not (eq A'' A)
H30 : not (eq A G)
H29 : not (eq B'' B)
H28 : not (eq B G)
H27 : not (eq A' A'')
H26 : not (eq G B''')
H25 : not (eq B'' B''')
H23 : not (eq G B'')
H22 : not (eq G A'')
H21 : not (eq G A')
H20 : Col A' B C
H19 : Col A'' A G
H18 : Col G A' A''
H17 : Col B' A C
H16 : Col C' A B
H14 : Col B'' B G
H15 : not (eq B' B''')
H13 : not (eq A' B')
H12 : not (eq A' B''')
H : not (eq A'' B'')
H11 : not (eq C' B)
H10 : not (eq C' A)
H9 : not (eq A' C)
H8 : not (eq A' B)
H6 : not (eq B' C)
H3 : not (eq B' A)
H7 : not (eq A C)
H4 : not (eq B C)
H5 : not (eq A B)
HH : iff (OS A' B'' G B''') (and (Out B'' G B''') (not (Col A' B'' G)))
HH3 : Col G B''' B''
HH2 : Col A' B'' B''
HH1 : not (eq A' B'')
HElim : Midpoint A' B' B'''
HCol : Col A' B' B'''
Cong3 : Cong A'' B'' A' B'''
HPar3 : Par A'' B'' A' B'''
HCong2 : Cong A C' A'' B''
HPar2 : Par A B A'' B''
HCong1 : Cong A C' A' B'
HPar1 : Par B A A' B'
HB' : Midpoint G B'' B'''
B''' : Tpoint
H2 : Midpoint B'' B G
B'' : Tpoint
H1 : Midpoint C' A B
C' : Tpoint
H0 : Midpoint B' A C
B' : Tpoint
HNC : not (Col A B C)
HMid3 : Midpoint G A' A''
HMid2 : Midpoint A'' A G
HMid1 : Midpoint A' B C
A,B,C,G,A',A'' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Out B'' G B'''
+++++
split; Col.
-----
Lemma is_gravity_center_third_reci : forall A B C G A' A'', Midpoint A' B C -> Midpoint A'' A G -> Midpoint G A' A'' -> ~ Col A B C -> is_gravity_center G A B C.
Proof.
intros A B C G A' A'' HMid1 HMid2 HMid3 HNC.
split; Col.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
exists A'; exists B'; split; Col; try split; Col; split; try (assert (A <> G) by (intro; treat_equalities; assert_cols; Col); assert_diffs; assert_cols; ColR).
Name B'' the midpoint of B and G.
assert (HB' := symmetric_point_construction B'' G).
destruct HB' as [B''' HB'].
assert (HPar1 : Par B A A' B').
assert (HCong1 : Cong A C' A' B').
assert (HPar2 : Par A B A'' B'').
assert (HCong2 : Cong A C' A'' B'').
assert (HPar3 : Par A'' B'' A' B''').
assert (Cong3 : Cong A'' B'' A' B''').
assert (HCol : Col A' B' B''').
assert (HElim := l7_20 A' B' B'''); elim HElim; clear HElim; try intro HElim; Col; eCong.
assert (HFalse : OS A' B'' A'' B''').
apply one_side_transitivity with G.
assert (HH1 : A' <> B'') by (intro; treat_equalities; Col).
assert (HH2 : Col A' B'' B'') by Col.
assert (HH3 : Col G B''' B'') by (assert_cols; Col).
assert (HH := l9_19 A' B'' G B''' B'' HH2 HH3); rewrite HH.
assert_diffs; assert_cols; show_distinct G A'; treat_equalities; Col.
show_distinct G A''; treat_equalities; Col.
show_distinct G B''; treat_equalities; Col.
assert_diffs; assert_cols; assert (HABG : ~ Col A B G) by (intro; apply HNC; ColR).
split; try (intro; apply HABG; ColR).
split; Col.

*****
HABG : not (Col A B G)
H31 : not (eq A'' A)
H30 : not (eq A G)
H29 : not (eq B'' B)
H28 : not (eq B G)
H27 : not (eq A' A'')
H26 : not (eq G B''')
H25 : not (eq B'' B''')
H23 : not (eq G B'')
H22 : not (eq G A'')
H21 : not (eq G A')
H20 : Col A' B C
H19 : Col A'' A G
H18 : Col G A' A''
H17 : Col B' A C
H16 : Col C' A B
H14 : Col B'' B G
H15 : not (eq B' B''')
H13 : not (eq A' B')
H12 : not (eq A' B''')
H : not (eq A'' B'')
H11 : not (eq C' B)
H10 : not (eq C' A)
H9 : not (eq A' C)
H8 : not (eq A' B)
H6 : not (eq B' C)
H3 : not (eq B' A)
H7 : not (eq A C)
H4 : not (eq B C)
H5 : not (eq A B)
HH : iff (OS A' B'' G B''') (and (Out B'' G B''') (not (Col A' B'' G)))
HH3 : Col G B''' B''
HH2 : Col A' B'' B''
HH1 : not (eq A' B'')
HElim : Midpoint A' B' B'''
HCol : Col A' B' B'''
Cong3 : Cong A'' B'' A' B'''
HPar3 : Par A'' B'' A' B'''
HCong2 : Cong A C' A'' B''
HPar2 : Par A B A'' B''
HCong1 : Cong A C' A' B'
HPar1 : Par B A A' B'
HB' : Midpoint G B'' B'''
B''' : Tpoint
H2 : Midpoint B'' B G
B'' : Tpoint
H1 : Midpoint C' A B
C' : Tpoint
H0 : Midpoint B' A C
B' : Tpoint
HNC : not (Col A B C)
HMid3 : Midpoint G A' A''
HMid2 : Midpoint A'' A G
HMid1 : Midpoint A' B C
A,B,C,G,A',A'' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (not (eq B''' B'')) (or (Bet B'' G B''') (Bet B'' B''' G))
+++++
split; try (intro; treat_equalities; Col).
-----
Lemma is_gravity_center_third_reci : forall A B C G A' A'', Midpoint A' B C -> Midpoint A'' A G -> Midpoint G A' A'' -> ~ Col A B C -> is_gravity_center G A B C.
Proof.
intros A B C G A' A'' HMid1 HMid2 HMid3 HNC.
split; Col.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
exists A'; exists B'; split; Col; try split; Col; split; try (assert (A <> G) by (intro; treat_equalities; assert_cols; Col); assert_diffs; assert_cols; ColR).
Name B'' the midpoint of B and G.
assert (HB' := symmetric_point_construction B'' G).
destruct HB' as [B''' HB'].
assert (HPar1 : Par B A A' B').
assert (HCong1 : Cong A C' A' B').
assert (HPar2 : Par A B A'' B'').
assert (HCong2 : Cong A C' A'' B'').
assert (HPar3 : Par A'' B'' A' B''').
assert (Cong3 : Cong A'' B'' A' B''').
assert (HCol : Col A' B' B''').
assert (HElim := l7_20 A' B' B'''); elim HElim; clear HElim; try intro HElim; Col; eCong.
assert (HFalse : OS A' B'' A'' B''').
apply one_side_transitivity with G.
assert (HH1 : A' <> B'') by (intro; treat_equalities; Col).
assert (HH2 : Col A' B'' B'') by Col.
assert (HH3 : Col G B''' B'') by (assert_cols; Col).
assert (HH := l9_19 A' B'' G B''' B'' HH2 HH3); rewrite HH.
assert_diffs; assert_cols; show_distinct G A'; treat_equalities; Col.
show_distinct G A''; treat_equalities; Col.
show_distinct G B''; treat_equalities; Col.
assert_diffs; assert_cols; assert (HABG : ~ Col A B G) by (intro; apply HNC; ColR).
split; try (intro; apply HABG; ColR).
split; Col.
split; try (intro; treat_equalities; Col).

*****
HABG : not (Col A B G)
H31 : not (eq A'' A)
H30 : not (eq A G)
H29 : not (eq B'' B)
H28 : not (eq B G)
H27 : not (eq A' A'')
H26 : not (eq G B''')
H25 : not (eq B'' B''')
H23 : not (eq G B'')
H22 : not (eq G A'')
H21 : not (eq G A')
H20 : Col A' B C
H19 : Col A'' A G
H18 : Col G A' A''
H17 : Col B' A C
H16 : Col C' A B
H14 : Col B'' B G
H15 : not (eq B' B''')
H13 : not (eq A' B')
H12 : not (eq A' B''')
H : not (eq A'' B'')
H11 : not (eq C' B)
H10 : not (eq C' A)
H9 : not (eq A' C)
H8 : not (eq A' B)
H6 : not (eq B' C)
H3 : not (eq B' A)
H7 : not (eq A C)
H4 : not (eq B C)
H5 : not (eq A B)
HH : iff (OS A' B'' G B''') (and (Out B'' G B''') (not (Col A' B'' G)))
HH3 : Col G B''' B''
HH2 : Col A' B'' B''
HH1 : not (eq A' B'')
HElim : Midpoint A' B' B'''
HCol : Col A' B' B'''
Cong3 : Cong A'' B'' A' B'''
HPar3 : Par A'' B'' A' B'''
HCong2 : Cong A C' A'' B''
HPar2 : Par A B A'' B''
HCong1 : Cong A C' A' B'
HPar1 : Par B A A' B'
HB' : Midpoint G B'' B'''
B''' : Tpoint
H2 : Midpoint B'' B G
B'' : Tpoint
H1 : Midpoint C' A B
C' : Tpoint
H0 : Midpoint B' A C
B' : Tpoint
HNC : not (Col A B C)
HMid3 : Midpoint G A' A''
HMid2 : Midpoint A'' A G
HMid1 : Midpoint A' B C
A,B,C,G,A',A'' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (Bet B'' G B''') (Bet B'' B''' G)
+++++
unfold Midpoint in *; spliter; Between.
-----
Lemma is_gravity_center_third_reci : forall A B C G A' A'', Midpoint A' B C -> Midpoint A'' A G -> Midpoint G A' A'' -> ~ Col A B C -> is_gravity_center G A B C.
Proof.
intros A B C G A' A'' HMid1 HMid2 HMid3 HNC.
split; Col.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
exists A'; exists B'; split; Col; try split; Col; split; try (assert (A <> G) by (intro; treat_equalities; assert_cols; Col); assert_diffs; assert_cols; ColR).
Name B'' the midpoint of B and G.
assert (HB' := symmetric_point_construction B'' G).
destruct HB' as [B''' HB'].
assert (HPar1 : Par B A A' B').
assert (HCong1 : Cong A C' A' B').
assert (HPar2 : Par A B A'' B'').
assert (HCong2 : Cong A C' A'' B'').
assert (HPar3 : Par A'' B'' A' B''').
assert (Cong3 : Cong A'' B'' A' B''').
assert (HCol : Col A' B' B''').
assert (HElim := l7_20 A' B' B'''); elim HElim; clear HElim; try intro HElim; Col; eCong.
assert (HFalse : OS A' B'' A'' B''').

*****
HFalse : OS A' B'' A'' B'''
HElim : Midpoint A' B' B'''
HCol : Col A' B' B'''
Cong3 : Cong A'' B'' A' B'''
HPar3 : Par A'' B'' A' B'''
HCong2 : Cong A C' A'' B''
HPar2 : Par A B A'' B''
HCong1 : Cong A C' A' B'
HPar1 : Par B A A' B'
HB' : Midpoint G B'' B'''
B''' : Tpoint
H2 : Midpoint B'' B G
B'' : Tpoint
H1 : Midpoint C' A B
C' : Tpoint
H0 : Midpoint B' A C
B' : Tpoint
HNC : not (Col A B C)
HMid3 : Midpoint G A' A''
HMid2 : Midpoint A'' A G
HMid1 : Midpoint A' B C
A,B,C,G,A',A'' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col G B B'
+++++
apply l9_9_bis in HFalse; exfalso; apply HFalse; clear HFalse.
-----
Lemma is_gravity_center_third_reci : forall A B C G A' A'', Midpoint A' B C -> Midpoint A'' A G -> Midpoint G A' A'' -> ~ Col A B C -> is_gravity_center G A B C.
Proof.
intros A B C G A' A'' HMid1 HMid2 HMid3 HNC.
split; Col.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
exists A'; exists B'; split; Col; try split; Col; split; try (assert (A <> G) by (intro; treat_equalities; assert_cols; Col); assert_diffs; assert_cols; ColR).
Name B'' the midpoint of B and G.
assert (HB' := symmetric_point_construction B'' G).
destruct HB' as [B''' HB'].
assert (HPar1 : Par B A A' B').
assert (HCong1 : Cong A C' A' B').
assert (HPar2 : Par A B A'' B'').
assert (HCong2 : Cong A C' A'' B'').
assert (HPar3 : Par A'' B'' A' B''').
assert (Cong3 : Cong A'' B'' A' B''').
assert (HCol : Col A' B' B''').
assert (HElim := l7_20 A' B' B'''); elim HElim; clear HElim; try intro HElim; Col; eCong.
assert (HFalse : OS A' B'' A'' B''').
apply l9_9_bis in HFalse; exfalso; apply HFalse; clear HFalse.

*****
HElim : Midpoint A' B' B'''
HCol : Col A' B' B'''
Cong3 : Cong A'' B'' A' B'''
HPar3 : Par A'' B'' A' B'''
HCong2 : Cong A C' A'' B''
HPar2 : Par A B A'' B''
HCong1 : Cong A C' A' B'
HPar1 : Par B A A' B'
HB' : Midpoint G B'' B'''
B''' : Tpoint
H2 : Midpoint B'' B G
B'' : Tpoint
H1 : Midpoint C' A B
C' : Tpoint
H0 : Midpoint B' A C
B' : Tpoint
HNC : not (Col A B C)
HMid3 : Midpoint G A' A''
HMid2 : Midpoint A'' A G
HMid1 : Midpoint A' B C
A,B,C,G,A',A'' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
TS A' B'' A'' B'''
+++++
apply l9_8_2 with B'.
-----
Lemma is_gravity_center_third_reci : forall A B C G A' A'', Midpoint A' B C -> Midpoint A'' A G -> Midpoint G A' A'' -> ~ Col A B C -> is_gravity_center G A B C.
Proof.
intros A B C G A' A'' HMid1 HMid2 HMid3 HNC.
split; Col.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
exists A'; exists B'; split; Col; try split; Col; split; try (assert (A <> G) by (intro; treat_equalities; assert_cols; Col); assert_diffs; assert_cols; ColR).
Name B'' the midpoint of B and G.
assert (HB' := symmetric_point_construction B'' G).
destruct HB' as [B''' HB'].
assert (HPar1 : Par B A A' B').
assert (HCong1 : Cong A C' A' B').
assert (HPar2 : Par A B A'' B'').
assert (HCong2 : Cong A C' A'' B'').
assert (HPar3 : Par A'' B'' A' B''').
assert (Cong3 : Cong A'' B'' A' B''').
assert (HCol : Col A' B' B''').
assert (HElim := l7_20 A' B' B'''); elim HElim; clear HElim; try intro HElim; Col; eCong.
assert (HFalse : OS A' B'' A'' B''').
apply l9_9_bis in HFalse; exfalso; apply HFalse; clear HFalse.
apply l9_8_2 with B'.

*****
HElim : Midpoint A' B' B'''
HCol : Col A' B' B'''
Cong3 : Cong A'' B'' A' B'''
HPar3 : Par A'' B'' A' B'''
HCong2 : Cong A C' A'' B''
HPar2 : Par A B A'' B''
HCong1 : Cong A C' A' B'
HPar1 : Par B A A' B'
HB' : Midpoint G B'' B'''
B''' : Tpoint
H2 : Midpoint B'' B G
B'' : Tpoint
H1 : Midpoint C' A B
C' : Tpoint
H0 : Midpoint B' A C
B' : Tpoint
HNC : not (Col A B C)
HMid3 : Midpoint G A' A''
HMid2 : Midpoint A'' A G
HMid1 : Midpoint A' B C
A,B,C,G,A',A'' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
TS A' B'' B' B'''
+++++
assert (A' <> B'') by (intro; treat_equalities; Col).
-----
Lemma is_gravity_center_third_reci : forall A B C G A' A'', Midpoint A' B C -> Midpoint A'' A G -> Midpoint G A' A'' -> ~ Col A B C -> is_gravity_center G A B C.
Proof.
intros A B C G A' A'' HMid1 HMid2 HMid3 HNC.
split; Col.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
exists A'; exists B'; split; Col; try split; Col; split; try (assert (A <> G) by (intro; treat_equalities; assert_cols; Col); assert_diffs; assert_cols; ColR).
Name B'' the midpoint of B and G.
assert (HB' := symmetric_point_construction B'' G).
destruct HB' as [B''' HB'].
assert (HPar1 : Par B A A' B').
assert (HCong1 : Cong A C' A' B').
assert (HPar2 : Par A B A'' B'').
assert (HCong2 : Cong A C' A'' B'').
assert (HPar3 : Par A'' B'' A' B''').
assert (Cong3 : Cong A'' B'' A' B''').
assert (HCol : Col A' B' B''').
assert (HElim := l7_20 A' B' B'''); elim HElim; clear HElim; try intro HElim; Col; eCong.
assert (HFalse : OS A' B'' A'' B''').
apply l9_9_bis in HFalse; exfalso; apply HFalse; clear HFalse.
apply l9_8_2 with B'.
assert (A' <> B'') by (intro; treat_equalities; Col).

*****
H : not (eq A' B'')
HElim : Midpoint A' B' B'''
HCol : Col A' B' B'''
Cong3 : Cong A'' B'' A' B'''
HPar3 : Par A'' B'' A' B'''
HCong2 : Cong A C' A'' B''
HPar2 : Par A B A'' B''
HCong1 : Cong A C' A' B'
HPar1 : Par B A A' B'
HB' : Midpoint G B'' B'''
B''' : Tpoint
H2 : Midpoint B'' B G
B'' : Tpoint
H1 : Midpoint C' A B
C' : Tpoint
H0 : Midpoint B' A C
B' : Tpoint
HNC : not (Col A B C)
HMid3 : Midpoint G A' A''
HMid2 : Midpoint A'' A G
HMid1 : Midpoint A' B C
A,B,C,G,A',A'' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
TS A' B'' B' B'''
+++++
assert_diffs; assert_cols; show_distinct G A'; treat_equalities; Col.
-----
Lemma is_gravity_center_third_reci : forall A B C G A' A'', Midpoint A' B C -> Midpoint A'' A G -> Midpoint G A' A'' -> ~ Col A B C -> is_gravity_center G A B C.
Proof.
intros A B C G A' A'' HMid1 HMid2 HMid3 HNC.
split; Col.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
exists A'; exists B'; split; Col; try split; Col; split; try (assert (A <> G) by (intro; treat_equalities; assert_cols; Col); assert_diffs; assert_cols; ColR).
Name B'' the midpoint of B and G.
assert (HB' := symmetric_point_construction B'' G).
destruct HB' as [B''' HB'].
assert (HPar1 : Par B A A' B').
assert (HCong1 : Cong A C' A' B').
assert (HPar2 : Par A B A'' B'').
assert (HCong2 : Cong A C' A'' B'').
assert (HPar3 : Par A'' B'' A' B''').
assert (Cong3 : Cong A'' B'' A' B''').
assert (HCol : Col A' B' B''').
assert (HElim := l7_20 A' B' B'''); elim HElim; clear HElim; try intro HElim; Col; eCong.
assert (HFalse : OS A' B'' A'' B''').
apply l9_9_bis in HFalse; exfalso; apply HFalse; clear HFalse.
apply l9_8_2 with B'.
assert (A' <> B'') by (intro; treat_equalities; Col).
assert_diffs; assert_cols; show_distinct G A'; treat_equalities; Col.

*****
H23 : not (eq G A')
H22 : Col A' B C
H21 : Col A'' A G
H20 : Col G A' A''
H19 : Col B' A C
H18 : Col C' A B
H17 : Col B'' B G
H15 : Col G B'' B'''
H16 : not (eq B' B''')
H14 : not (eq A' B')
H13 : not (eq A' B''')
H3 : not (eq A'' B'')
H12 : not (eq C' B)
H11 : not (eq C' A)
H10 : not (eq A' C)
H9 : not (eq A' B)
H7 : not (eq B' C)
H4 : not (eq B' A)
H8 : not (eq A C)
H5 : not (eq B C)
H6 : not (eq A B)
H : not (eq A' B'')
HElim : Midpoint A' B' B'''
HCol : Col A' B' B'''
Cong3 : Cong A'' B'' A' B'''
HPar3 : Par A'' B'' A' B'''
HCong2 : Cong A C' A'' B''
HPar2 : Par A B A'' B''
HCong1 : Cong A C' A' B'
HPar1 : Par B A A' B'
HB' : Midpoint G B'' B'''
B''' : Tpoint
H2 : Midpoint B'' B G
B'' : Tpoint
H1 : Midpoint C' A B
C' : Tpoint
H0 : Midpoint B' A C
B' : Tpoint
HNC : not (Col A B C)
HMid3 : Midpoint G A' A''
HMid2 : Midpoint A'' A G
HMid1 : Midpoint A' B C
A,B,C,G,A',A'' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
TS A' B'' B' B'''
+++++
show_distinct G A''; treat_equalities; Col.
-----
Lemma is_gravity_center_third_reci : forall A B C G A' A'', Midpoint A' B C -> Midpoint A'' A G -> Midpoint G A' A'' -> ~ Col A B C -> is_gravity_center G A B C.
Proof.
intros A B C G A' A'' HMid1 HMid2 HMid3 HNC.
split; Col.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
exists A'; exists B'; split; Col; try split; Col; split; try (assert (A <> G) by (intro; treat_equalities; assert_cols; Col); assert_diffs; assert_cols; ColR).
Name B'' the midpoint of B and G.
assert (HB' := symmetric_point_construction B'' G).
destruct HB' as [B''' HB'].
assert (HPar1 : Par B A A' B').
assert (HCong1 : Cong A C' A' B').
assert (HPar2 : Par A B A'' B'').
assert (HCong2 : Cong A C' A'' B'').
assert (HPar3 : Par A'' B'' A' B''').
assert (Cong3 : Cong A'' B'' A' B''').
assert (HCol : Col A' B' B''').
assert (HElim := l7_20 A' B' B'''); elim HElim; clear HElim; try intro HElim; Col; eCong.
assert (HFalse : OS A' B'' A'' B''').
apply l9_9_bis in HFalse; exfalso; apply HFalse; clear HFalse.
apply l9_8_2 with B'.
assert (A' <> B'') by (intro; treat_equalities; Col).
assert_diffs; assert_cols; show_distinct G A'; treat_equalities; Col.
show_distinct G A''; treat_equalities; Col.

*****
H24 : not (eq G A'')
H23 : not (eq G A')
H22 : Col A' B C
H21 : Col A'' A G
H20 : Col G A' A''
H19 : Col B' A C
H18 : Col C' A B
H17 : Col B'' B G
H15 : Col G B'' B'''
H16 : not (eq B' B''')
H14 : not (eq A' B')
H13 : not (eq A' B''')
H3 : not (eq A'' B'')
H12 : not (eq C' B)
H11 : not (eq C' A)
H10 : not (eq A' C)
H9 : not (eq A' B)
H7 : not (eq B' C)
H4 : not (eq B' A)
H8 : not (eq A C)
H5 : not (eq B C)
H6 : not (eq A B)
H : not (eq A' B'')
HElim : Midpoint A' B' B'''
HCol : Col A' B' B'''
Cong3 : Cong A'' B'' A' B'''
HPar3 : Par A'' B'' A' B'''
HCong2 : Cong A C' A'' B''
HPar2 : Par A B A'' B''
HCong1 : Cong A C' A' B'
HPar1 : Par B A A' B'
HB' : Midpoint G B'' B'''
B''' : Tpoint
H2 : Midpoint B'' B G
B'' : Tpoint
H1 : Midpoint C' A B
C' : Tpoint
H0 : Midpoint B' A C
B' : Tpoint
HNC : not (Col A B C)
HMid3 : Midpoint G A' A''
HMid2 : Midpoint A'' A G
HMid1 : Midpoint A' B C
A,B,C,G,A',A'' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
TS A' B'' B' B'''
+++++
show_distinct G B''; treat_equalities; Col.
-----
Lemma is_gravity_center_third_reci : forall A B C G A' A'', Midpoint A' B C -> Midpoint A'' A G -> Midpoint G A' A'' -> ~ Col A B C -> is_gravity_center G A B C.
Proof.
intros A B C G A' A'' HMid1 HMid2 HMid3 HNC.
split; Col.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
exists A'; exists B'; split; Col; try split; Col; split; try (assert (A <> G) by (intro; treat_equalities; assert_cols; Col); assert_diffs; assert_cols; ColR).
Name B'' the midpoint of B and G.
assert (HB' := symmetric_point_construction B'' G).
destruct HB' as [B''' HB'].
assert (HPar1 : Par B A A' B').
assert (HCong1 : Cong A C' A' B').
assert (HPar2 : Par A B A'' B'').
assert (HCong2 : Cong A C' A'' B'').
assert (HPar3 : Par A'' B'' A' B''').
assert (Cong3 : Cong A'' B'' A' B''').
assert (HCol : Col A' B' B''').
assert (HElim := l7_20 A' B' B'''); elim HElim; clear HElim; try intro HElim; Col; eCong.
assert (HFalse : OS A' B'' A'' B''').
apply l9_9_bis in HFalse; exfalso; apply HFalse; clear HFalse.
apply l9_8_2 with B'.
assert (A' <> B'') by (intro; treat_equalities; Col).
assert_diffs; assert_cols; show_distinct G A'; treat_equalities; Col.
show_distinct G A''; treat_equalities; Col.
show_distinct G B''; treat_equalities; Col.

*****
H25 : not (eq G B'')
H24 : not (eq G A'')
H23 : not (eq G A')
H22 : Col A' B C
H21 : Col A'' A G
H20 : Col G A' A''
H19 : Col B' A C
H18 : Col C' A B
H17 : Col B'' B G
H15 : Col G B'' B'''
H16 : not (eq B' B''')
H14 : not (eq A' B')
H13 : not (eq A' B''')
H3 : not (eq A'' B'')
H12 : not (eq C' B)
H11 : not (eq C' A)
H10 : not (eq A' C)
H9 : not (eq A' B)
H7 : not (eq B' C)
H4 : not (eq B' A)
H8 : not (eq A C)
H5 : not (eq B C)
H6 : not (eq A B)
H : not (eq A' B'')
HElim : Midpoint A' B' B'''
HCol : Col A' B' B'''
Cong3 : Cong A'' B'' A' B'''
HPar3 : Par A'' B'' A' B'''
HCong2 : Cong A C' A'' B''
HPar2 : Par A B A'' B''
HCong1 : Cong A C' A' B'
HPar1 : Par B A A' B'
HB' : Midpoint G B'' B'''
B''' : Tpoint
H2 : Midpoint B'' B G
B'' : Tpoint
H1 : Midpoint C' A B
C' : Tpoint
H0 : Midpoint B' A C
B' : Tpoint
HNC : not (Col A B C)
HMid3 : Midpoint G A' A''
HMid2 : Midpoint A'' A G
HMid1 : Midpoint A' B C
A,B,C,G,A',A'' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
TS A' B'' B' B'''
+++++
assert_diffs; assert_cols; assert (HABG : ~ Col A B G) by (intro; apply HNC; ColR).
-----
Lemma is_gravity_center_third_reci : forall A B C G A' A'', Midpoint A' B C -> Midpoint A'' A G -> Midpoint G A' A'' -> ~ Col A B C -> is_gravity_center G A B C.
Proof.
intros A B C G A' A'' HMid1 HMid2 HMid3 HNC.
split; Col.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
exists A'; exists B'; split; Col; try split; Col; split; try (assert (A <> G) by (intro; treat_equalities; assert_cols; Col); assert_diffs; assert_cols; ColR).
Name B'' the midpoint of B and G.
assert (HB' := symmetric_point_construction B'' G).
destruct HB' as [B''' HB'].
assert (HPar1 : Par B A A' B').
assert (HCong1 : Cong A C' A' B').
assert (HPar2 : Par A B A'' B'').
assert (HCong2 : Cong A C' A'' B'').
assert (HPar3 : Par A'' B'' A' B''').
assert (Cong3 : Cong A'' B'' A' B''').
assert (HCol : Col A' B' B''').
assert (HElim := l7_20 A' B' B'''); elim HElim; clear HElim; try intro HElim; Col; eCong.
assert (HFalse : OS A' B'' A'' B''').
apply l9_9_bis in HFalse; exfalso; apply HFalse; clear HFalse.
apply l9_8_2 with B'.
assert (A' <> B'') by (intro; treat_equalities; Col).
assert_diffs; assert_cols; show_distinct G A'; treat_equalities; Col.
show_distinct G A''; treat_equalities; Col.
show_distinct G B''; treat_equalities; Col.
assert_diffs; assert_cols; assert (HABG : ~ Col A B G) by (intro; apply HNC; ColR).

*****
HABG : not (Col A B G)
H33 : not (eq A'' A)
H32 : not (eq A G)
H31 : not (eq B'' B)
H30 : not (eq B G)
H29 : not (eq A' A'')
H28 : not (eq G B''')
H27 : not (eq B'' B''')
H25 : not (eq G B'')
H24 : not (eq G A'')
H23 : not (eq G A')
H22 : Col A' B C
H21 : Col A'' A G
H20 : Col G A' A''
H19 : Col B' A C
H18 : Col C' A B
H17 : Col B'' B G
H15 : Col G B'' B'''
H16 : not (eq B' B''')
H14 : not (eq A' B')
H13 : not (eq A' B''')
H3 : not (eq A'' B'')
H12 : not (eq C' B)
H11 : not (eq C' A)
H10 : not (eq A' C)
H9 : not (eq A' B)
H7 : not (eq B' C)
H4 : not (eq B' A)
H8 : not (eq A C)
H5 : not (eq B C)
H6 : not (eq A B)
H : not (eq A' B'')
HElim : Midpoint A' B' B'''
HCol : Col A' B' B'''
Cong3 : Cong A'' B'' A' B'''
HPar3 : Par A'' B'' A' B'''
HCong2 : Cong A C' A'' B''
HPar2 : Par A B A'' B''
HCong1 : Cong A C' A' B'
HPar1 : Par B A A' B'
HB' : Midpoint G B'' B'''
B''' : Tpoint
H2 : Midpoint B'' B G
B'' : Tpoint
H1 : Midpoint C' A B
C' : Tpoint
H0 : Midpoint B' A C
B' : Tpoint
HNC : not (Col A B C)
HMid3 : Midpoint G A' A''
HMid2 : Midpoint A'' A G
HMid1 : Midpoint A' B C
A,B,C,G,A',A'' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
TS A' B'' B' B'''
+++++
split; try (intro; apply HABG; ColR).
-----
Lemma is_gravity_center_third_reci : forall A B C G A' A'', Midpoint A' B C -> Midpoint A'' A G -> Midpoint G A' A'' -> ~ Col A B C -> is_gravity_center G A B C.
Proof.
intros A B C G A' A'' HMid1 HMid2 HMid3 HNC.
split; Col.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
exists A'; exists B'; split; Col; try split; Col; split; try (assert (A <> G) by (intro; treat_equalities; assert_cols; Col); assert_diffs; assert_cols; ColR).
Name B'' the midpoint of B and G.
assert (HB' := symmetric_point_construction B'' G).
destruct HB' as [B''' HB'].
assert (HPar1 : Par B A A' B').
assert (HCong1 : Cong A C' A' B').
assert (HPar2 : Par A B A'' B'').
assert (HCong2 : Cong A C' A'' B'').
assert (HPar3 : Par A'' B'' A' B''').
assert (Cong3 : Cong A'' B'' A' B''').
assert (HCol : Col A' B' B''').
assert (HElim := l7_20 A' B' B'''); elim HElim; clear HElim; try intro HElim; Col; eCong.
assert (HFalse : OS A' B'' A'' B''').
apply l9_9_bis in HFalse; exfalso; apply HFalse; clear HFalse.
apply l9_8_2 with B'.
assert (A' <> B'') by (intro; treat_equalities; Col).
assert_diffs; assert_cols; show_distinct G A'; treat_equalities; Col.
show_distinct G A''; treat_equalities; Col.
show_distinct G B''; treat_equalities; Col.
assert_diffs; assert_cols; assert (HABG : ~ Col A B G) by (intro; apply HNC; ColR).
split; try (intro; apply HABG; ColR).

*****
HABG : not (Col A B G)
H33 : not (eq A'' A)
H32 : not (eq A G)
H31 : not (eq B'' B)
H30 : not (eq B G)
H29 : not (eq A' A'')
H28 : not (eq G B''')
H27 : not (eq B'' B''')
H25 : not (eq G B'')
H24 : not (eq G A'')
H23 : not (eq G A')
H22 : Col A' B C
H21 : Col A'' A G
H20 : Col G A' A''
H19 : Col B' A C
H18 : Col C' A B
H17 : Col B'' B G
H15 : Col G B'' B'''
H16 : not (eq B' B''')
H14 : not (eq A' B')
H13 : not (eq A' B''')
H3 : not (eq A'' B'')
H12 : not (eq C' B)
H11 : not (eq C' A)
H10 : not (eq A' C)
H9 : not (eq A' B)
H7 : not (eq B' C)
H4 : not (eq B' A)
H8 : not (eq A C)
H5 : not (eq B C)
H6 : not (eq A B)
H : not (eq A' B'')
HElim : Midpoint A' B' B'''
HCol : Col A' B' B'''
Cong3 : Cong A'' B'' A' B'''
HPar3 : Par A'' B'' A' B'''
HCong2 : Cong A C' A'' B''
HPar2 : Par A B A'' B''
HCong1 : Cong A C' A' B'
HPar1 : Par B A A' B'
HB' : Midpoint G B'' B'''
B''' : Tpoint
H2 : Midpoint B'' B G
B'' : Tpoint
H1 : Midpoint C' A B
C' : Tpoint
H0 : Midpoint B' A C
B' : Tpoint
HNC : not (Col A B C)
HMid3 : Midpoint G A' A''
HMid2 : Midpoint A'' A G
HMid1 : Midpoint A' B C
A,B,C,G,A',A'' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (not (Col B''' A' B'')) (ex (fun T : Tpoint => and (Col T A' B'') (Bet B' T B''')))
+++++
split; try (intro; apply HABG; ColR).
-----
Lemma is_gravity_center_third_reci : forall A B C G A' A'', Midpoint A' B C -> Midpoint A'' A G -> Midpoint G A' A'' -> ~ Col A B C -> is_gravity_center G A B C.
Proof.
intros A B C G A' A'' HMid1 HMid2 HMid3 HNC.
split; Col.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
exists A'; exists B'; split; Col; try split; Col; split; try (assert (A <> G) by (intro; treat_equalities; assert_cols; Col); assert_diffs; assert_cols; ColR).
Name B'' the midpoint of B and G.
assert (HB' := symmetric_point_construction B'' G).
destruct HB' as [B''' HB'].
assert (HPar1 : Par B A A' B').
assert (HCong1 : Cong A C' A' B').
assert (HPar2 : Par A B A'' B'').
assert (HCong2 : Cong A C' A'' B'').
assert (HPar3 : Par A'' B'' A' B''').
assert (Cong3 : Cong A'' B'' A' B''').
assert (HCol : Col A' B' B''').
assert (HElim := l7_20 A' B' B'''); elim HElim; clear HElim; try intro HElim; Col; eCong.
assert (HFalse : OS A' B'' A'' B''').
apply l9_9_bis in HFalse; exfalso; apply HFalse; clear HFalse.
apply l9_8_2 with B'.
assert (A' <> B'') by (intro; treat_equalities; Col).
assert_diffs; assert_cols; show_distinct G A'; treat_equalities; Col.
show_distinct G A''; treat_equalities; Col.
show_distinct G B''; treat_equalities; Col.
assert_diffs; assert_cols; assert (HABG : ~ Col A B G) by (intro; apply HNC; ColR).
split; try (intro; apply HABG; ColR).
split; try (intro; apply HABG; ColR).

*****
HABG : not (Col A B G)
H33 : not (eq A'' A)
H32 : not (eq A G)
H31 : not (eq B'' B)
H30 : not (eq B G)
H29 : not (eq A' A'')
H28 : not (eq G B''')
H27 : not (eq B'' B''')
H25 : not (eq G B'')
H24 : not (eq G A'')
H23 : not (eq G A')
H22 : Col A' B C
H21 : Col A'' A G
H20 : Col G A' A''
H19 : Col B' A C
H18 : Col C' A B
H17 : Col B'' B G
H15 : Col G B'' B'''
H16 : not (eq B' B''')
H14 : not (eq A' B')
H13 : not (eq A' B''')
H3 : not (eq A'' B'')
H12 : not (eq C' B)
H11 : not (eq C' A)
H10 : not (eq A' C)
H9 : not (eq A' B)
H7 : not (eq B' C)
H4 : not (eq B' A)
H8 : not (eq A C)
H5 : not (eq B C)
H6 : not (eq A B)
H : not (eq A' B'')
HElim : Midpoint A' B' B'''
HCol : Col A' B' B'''
Cong3 : Cong A'' B'' A' B'''
HPar3 : Par A'' B'' A' B'''
HCong2 : Cong A C' A'' B''
HPar2 : Par A B A'' B''
HCong1 : Cong A C' A' B'
HPar1 : Par B A A' B'
HB' : Midpoint G B'' B'''
B''' : Tpoint
H2 : Midpoint B'' B G
B'' : Tpoint
H1 : Midpoint C' A B
C' : Tpoint
H0 : Midpoint B' A C
B' : Tpoint
HNC : not (Col A B C)
HMid3 : Midpoint G A' A''
HMid2 : Midpoint A'' A G
HMid1 : Midpoint A' B C
A,B,C,G,A',A'' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun T : Tpoint => and (Col T A' B'') (Bet B' T B'''))
+++++
exists A'; unfold Midpoint in *; spliter; split; Col; Between.
-----
Lemma is_gravity_center_third_reci : forall A B C G A' A'', Midpoint A' B C -> Midpoint A'' A G -> Midpoint G A' A'' -> ~ Col A B C -> is_gravity_center G A B C.
Proof.
intros A B C G A' A'' HMid1 HMid2 HMid3 HNC.
split; Col.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
exists A'; exists B'; split; Col; try split; Col; split; try (assert (A <> G) by (intro; treat_equalities; assert_cols; Col); assert_diffs; assert_cols; ColR).
Name B'' the midpoint of B and G.
assert (HB' := symmetric_point_construction B'' G).
destruct HB' as [B''' HB'].
assert (HPar1 : Par B A A' B').
assert (HCong1 : Cong A C' A' B').
assert (HPar2 : Par A B A'' B'').
assert (HCong2 : Cong A C' A'' B'').
assert (HPar3 : Par A'' B'' A' B''').
assert (Cong3 : Cong A'' B'' A' B''').
assert (HCol : Col A' B' B''').
assert (HElim := l7_20 A' B' B'''); elim HElim; clear HElim; try intro HElim; Col; eCong.
assert (HFalse : OS A' B'' A'' B''').
apply l9_9_bis in HFalse; exfalso; apply HFalse; clear HFalse.
apply l9_8_2 with B'.

*****
HElim : Midpoint A' B' B'''
HCol : Col A' B' B'''
Cong3 : Cong A'' B'' A' B'''
HPar3 : Par A'' B'' A' B'''
HCong2 : Cong A C' A'' B''
HPar2 : Par A B A'' B''
HCong1 : Cong A C' A' B'
HPar1 : Par B A A' B'
HB' : Midpoint G B'' B'''
B''' : Tpoint
H2 : Midpoint B'' B G
B'' : Tpoint
H1 : Midpoint C' A B
C' : Tpoint
H0 : Midpoint B' A C
B' : Tpoint
HNC : not (Col A B C)
HMid3 : Midpoint G A' A''
HMid2 : Midpoint A'' A G
HMid1 : Midpoint A' B C
A,B,C,G,A',A'' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS A' B'' B' A''
+++++
apply one_side_transitivity with A.
-----
Lemma is_gravity_center_third_reci : forall A B C G A' A'', Midpoint A' B C -> Midpoint A'' A G -> Midpoint G A' A'' -> ~ Col A B C -> is_gravity_center G A B C.
Proof.
intros A B C G A' A'' HMid1 HMid2 HMid3 HNC.
split; Col.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
exists A'; exists B'; split; Col; try split; Col; split; try (assert (A <> G) by (intro; treat_equalities; assert_cols; Col); assert_diffs; assert_cols; ColR).
Name B'' the midpoint of B and G.
assert (HB' := symmetric_point_construction B'' G).
destruct HB' as [B''' HB'].
assert (HPar1 : Par B A A' B').
assert (HCong1 : Cong A C' A' B').
assert (HPar2 : Par A B A'' B'').
assert (HCong2 : Cong A C' A'' B'').
assert (HPar3 : Par A'' B'' A' B''').
assert (Cong3 : Cong A'' B'' A' B''').
assert (HCol : Col A' B' B''').
assert (HElim := l7_20 A' B' B'''); elim HElim; clear HElim; try intro HElim; Col; eCong.
assert (HFalse : OS A' B'' A'' B''').
apply l9_9_bis in HFalse; exfalso; apply HFalse; clear HFalse.
apply l9_8_2 with B'.
apply one_side_transitivity with A.

*****
HElim : Midpoint A' B' B'''
HCol : Col A' B' B'''
Cong3 : Cong A'' B'' A' B'''
HPar3 : Par A'' B'' A' B'''
HCong2 : Cong A C' A'' B''
HPar2 : Par A B A'' B''
HCong1 : Cong A C' A' B'
HPar1 : Par B A A' B'
HB' : Midpoint G B'' B'''
B''' : Tpoint
H2 : Midpoint B'' B G
B'' : Tpoint
H1 : Midpoint C' A B
C' : Tpoint
H0 : Midpoint B' A C
B' : Tpoint
HNC : not (Col A B C)
HMid3 : Midpoint G A' A''
HMid2 : Midpoint A'' A G
HMid1 : Midpoint A' B C
A,B,C,G,A',A'' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS A' B'' B' A
+++++
apply one_side_symmetry; apply l9_17 with C; try (unfold Midpoint in *; spliter; assumption).
-----
Lemma is_gravity_center_third_reci : forall A B C G A' A'', Midpoint A' B C -> Midpoint A'' A G -> Midpoint G A' A'' -> ~ Col A B C -> is_gravity_center G A B C.
Proof.
intros A B C G A' A'' HMid1 HMid2 HMid3 HNC.
split; Col.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
exists A'; exists B'; split; Col; try split; Col; split; try (assert (A <> G) by (intro; treat_equalities; assert_cols; Col); assert_diffs; assert_cols; ColR).
Name B'' the midpoint of B and G.
assert (HB' := symmetric_point_construction B'' G).
destruct HB' as [B''' HB'].
assert (HPar1 : Par B A A' B').
assert (HCong1 : Cong A C' A' B').
assert (HPar2 : Par A B A'' B'').
assert (HCong2 : Cong A C' A'' B'').
assert (HPar3 : Par A'' B'' A' B''').
assert (Cong3 : Cong A'' B'' A' B''').
assert (HCol : Col A' B' B''').
assert (HElim := l7_20 A' B' B'''); elim HElim; clear HElim; try intro HElim; Col; eCong.
assert (HFalse : OS A' B'' A'' B''').
apply l9_9_bis in HFalse; exfalso; apply HFalse; clear HFalse.
apply l9_8_2 with B'.
apply one_side_transitivity with A.
apply one_side_symmetry; apply l9_17 with C; try (unfold Midpoint in *; spliter; assumption).

*****
HElim : Midpoint A' B' B'''
HCol : Col A' B' B'''
Cong3 : Cong A'' B'' A' B'''
HPar3 : Par A'' B'' A' B'''
HCong2 : Cong A C' A'' B''
HPar2 : Par A B A'' B''
HCong1 : Cong A C' A' B'
HPar1 : Par B A A' B'
HB' : Midpoint G B'' B'''
B''' : Tpoint
H2 : Midpoint B'' B G
B'' : Tpoint
H1 : Midpoint C' A B
C' : Tpoint
H0 : Midpoint B' A C
B' : Tpoint
HNC : not (Col A B C)
HMid3 : Midpoint G A' A''
HMid2 : Midpoint A'' A G
HMid1 : Midpoint A' B C
A,B,C,G,A',A'' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS A' B'' A C
+++++
apply one_side_transitivity with G.
-----
Lemma is_gravity_center_third_reci : forall A B C G A' A'', Midpoint A' B C -> Midpoint A'' A G -> Midpoint G A' A'' -> ~ Col A B C -> is_gravity_center G A B C.
Proof.
intros A B C G A' A'' HMid1 HMid2 HMid3 HNC.
split; Col.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
exists A'; exists B'; split; Col; try split; Col; split; try (assert (A <> G) by (intro; treat_equalities; assert_cols; Col); assert_diffs; assert_cols; ColR).
Name B'' the midpoint of B and G.
assert (HB' := symmetric_point_construction B'' G).
destruct HB' as [B''' HB'].
assert (HPar1 : Par B A A' B').
assert (HCong1 : Cong A C' A' B').
assert (HPar2 : Par A B A'' B'').
assert (HCong2 : Cong A C' A'' B'').
assert (HPar3 : Par A'' B'' A' B''').
assert (Cong3 : Cong A'' B'' A' B''').
assert (HCol : Col A' B' B''').
assert (HElim := l7_20 A' B' B'''); elim HElim; clear HElim; try intro HElim; Col; eCong.
assert (HFalse : OS A' B'' A'' B''').
apply l9_9_bis in HFalse; exfalso; apply HFalse; clear HFalse.
apply l9_8_2 with B'.
apply one_side_transitivity with A.
apply one_side_symmetry; apply l9_17 with C; try (unfold Midpoint in *; spliter; assumption).
apply one_side_transitivity with G.

*****
HElim : Midpoint A' B' B'''
HCol : Col A' B' B'''
Cong3 : Cong A'' B'' A' B'''
HPar3 : Par A'' B'' A' B'''
HCong2 : Cong A C' A'' B''
HPar2 : Par A B A'' B''
HCong1 : Cong A C' A' B'
HPar1 : Par B A A' B'
HB' : Midpoint G B'' B'''
B''' : Tpoint
H2 : Midpoint B'' B G
B'' : Tpoint
H1 : Midpoint C' A B
C' : Tpoint
H0 : Midpoint B' A C
B' : Tpoint
HNC : not (Col A B C)
HMid3 : Midpoint G A' A''
HMid2 : Midpoint A'' A G
HMid1 : Midpoint A' B C
A,B,C,G,A',A'' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS A' B'' A G
+++++
apply one_side_symmetry.
-----
Lemma is_gravity_center_third_reci : forall A B C G A' A'', Midpoint A' B C -> Midpoint A'' A G -> Midpoint G A' A'' -> ~ Col A B C -> is_gravity_center G A B C.
Proof.
intros A B C G A' A'' HMid1 HMid2 HMid3 HNC.
split; Col.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
exists A'; exists B'; split; Col; try split; Col; split; try (assert (A <> G) by (intro; treat_equalities; assert_cols; Col); assert_diffs; assert_cols; ColR).
Name B'' the midpoint of B and G.
assert (HB' := symmetric_point_construction B'' G).
destruct HB' as [B''' HB'].
assert (HPar1 : Par B A A' B').
assert (HCong1 : Cong A C' A' B').
assert (HPar2 : Par A B A'' B'').
assert (HCong2 : Cong A C' A'' B'').
assert (HPar3 : Par A'' B'' A' B''').
assert (Cong3 : Cong A'' B'' A' B''').
assert (HCol : Col A' B' B''').
assert (HElim := l7_20 A' B' B'''); elim HElim; clear HElim; try intro HElim; Col; eCong.
assert (HFalse : OS A' B'' A'' B''').
apply l9_9_bis in HFalse; exfalso; apply HFalse; clear HFalse.
apply l9_8_2 with B'.
apply one_side_transitivity with A.
apply one_side_symmetry; apply l9_17 with C; try (unfold Midpoint in *; spliter; assumption).
apply one_side_transitivity with G.
apply one_side_symmetry.

*****
HElim : Midpoint A' B' B'''
HCol : Col A' B' B'''
Cong3 : Cong A'' B'' A' B'''
HPar3 : Par A'' B'' A' B'''
HCong2 : Cong A C' A'' B''
HPar2 : Par A B A'' B''
HCong1 : Cong A C' A' B'
HPar1 : Par B A A' B'
HB' : Midpoint G B'' B'''
B''' : Tpoint
H2 : Midpoint B'' B G
B'' : Tpoint
H1 : Midpoint C' A B
C' : Tpoint
H0 : Midpoint B' A C
B' : Tpoint
HNC : not (Col A B C)
HMid3 : Midpoint G A' A''
HMid2 : Midpoint A'' A G
HMid1 : Midpoint A' B C
A,B,C,G,A',A'' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS A' B'' G A
+++++
assert_diffs; assert_cols; show_distinct G A'; treat_equalities; Col.
-----
Lemma is_gravity_center_third_reci : forall A B C G A' A'', Midpoint A' B C -> Midpoint A'' A G -> Midpoint G A' A'' -> ~ Col A B C -> is_gravity_center G A B C.
Proof.
intros A B C G A' A'' HMid1 HMid2 HMid3 HNC.
split; Col.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
exists A'; exists B'; split; Col; try split; Col; split; try (assert (A <> G) by (intro; treat_equalities; assert_cols; Col); assert_diffs; assert_cols; ColR).
Name B'' the midpoint of B and G.
assert (HB' := symmetric_point_construction B'' G).
destruct HB' as [B''' HB'].
assert (HPar1 : Par B A A' B').
assert (HCong1 : Cong A C' A' B').
assert (HPar2 : Par A B A'' B'').
assert (HCong2 : Cong A C' A'' B'').
assert (HPar3 : Par A'' B'' A' B''').
assert (Cong3 : Cong A'' B'' A' B''').
assert (HCol : Col A' B' B''').
assert (HElim := l7_20 A' B' B'''); elim HElim; clear HElim; try intro HElim; Col; eCong.
assert (HFalse : OS A' B'' A'' B''').
apply l9_9_bis in HFalse; exfalso; apply HFalse; clear HFalse.
apply l9_8_2 with B'.
apply one_side_transitivity with A.
apply one_side_symmetry; apply l9_17 with C; try (unfold Midpoint in *; spliter; assumption).
apply one_side_transitivity with G.
apply one_side_symmetry.
assert_diffs; assert_cols; show_distinct G A'; treat_equalities; Col.

*****
H22 : not (eq G A')
H21 : Col A' B C
H20 : Col A'' A G
H19 : Col G A' A''
H18 : Col B' A C
H17 : Col C' A B
H16 : Col B'' B G
H14 : Col G B'' B'''
H15 : not (eq B' B''')
H13 : not (eq A' B')
H12 : not (eq A' B''')
H : not (eq A'' B'')
H11 : not (eq C' B)
H10 : not (eq C' A)
H9 : not (eq A' C)
H8 : not (eq A' B)
H6 : not (eq B' C)
H3 : not (eq B' A)
H7 : not (eq A C)
H4 : not (eq B C)
H5 : not (eq A B)
HElim : Midpoint A' B' B'''
HCol : Col A' B' B'''
Cong3 : Cong A'' B'' A' B'''
HPar3 : Par A'' B'' A' B'''
HCong2 : Cong A C' A'' B''
HPar2 : Par A B A'' B''
HCong1 : Cong A C' A' B'
HPar1 : Par B A A' B'
HB' : Midpoint G B'' B'''
B''' : Tpoint
H2 : Midpoint B'' B G
B'' : Tpoint
H1 : Midpoint C' A B
C' : Tpoint
H0 : Midpoint B' A C
B' : Tpoint
HNC : not (Col A B C)
HMid3 : Midpoint G A' A''
HMid2 : Midpoint A'' A G
HMid1 : Midpoint A' B C
A,B,C,G,A',A'' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS A' B'' G A
+++++
show_distinct G A''; treat_equalities; Col.
-----
Lemma is_gravity_center_third_reci : forall A B C G A' A'', Midpoint A' B C -> Midpoint A'' A G -> Midpoint G A' A'' -> ~ Col A B C -> is_gravity_center G A B C.
Proof.
intros A B C G A' A'' HMid1 HMid2 HMid3 HNC.
split; Col.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
exists A'; exists B'; split; Col; try split; Col; split; try (assert (A <> G) by (intro; treat_equalities; assert_cols; Col); assert_diffs; assert_cols; ColR).
Name B'' the midpoint of B and G.
assert (HB' := symmetric_point_construction B'' G).
destruct HB' as [B''' HB'].
assert (HPar1 : Par B A A' B').
assert (HCong1 : Cong A C' A' B').
assert (HPar2 : Par A B A'' B'').
assert (HCong2 : Cong A C' A'' B'').
assert (HPar3 : Par A'' B'' A' B''').
assert (Cong3 : Cong A'' B'' A' B''').
assert (HCol : Col A' B' B''').
assert (HElim := l7_20 A' B' B'''); elim HElim; clear HElim; try intro HElim; Col; eCong.
assert (HFalse : OS A' B'' A'' B''').
apply l9_9_bis in HFalse; exfalso; apply HFalse; clear HFalse.
apply l9_8_2 with B'.
apply one_side_transitivity with A.
apply one_side_symmetry; apply l9_17 with C; try (unfold Midpoint in *; spliter; assumption).
apply one_side_transitivity with G.
apply one_side_symmetry.
assert_diffs; assert_cols; show_distinct G A'; treat_equalities; Col.
show_distinct G A''; treat_equalities; Col.

*****
H23 : not (eq G A'')
H22 : not (eq G A')
H21 : Col A' B C
H20 : Col A'' A G
H19 : Col G A' A''
H18 : Col B' A C
H17 : Col C' A B
H16 : Col B'' B G
H14 : Col G B'' B'''
H15 : not (eq B' B''')
H13 : not (eq A' B')
H12 : not (eq A' B''')
H : not (eq A'' B'')
H11 : not (eq C' B)
H10 : not (eq C' A)
H9 : not (eq A' C)
H8 : not (eq A' B)
H6 : not (eq B' C)
H3 : not (eq B' A)
H7 : not (eq A C)
H4 : not (eq B C)
H5 : not (eq A B)
HElim : Midpoint A' B' B'''
HCol : Col A' B' B'''
Cong3 : Cong A'' B'' A' B'''
HPar3 : Par A'' B'' A' B'''
HCong2 : Cong A C' A'' B''
HPar2 : Par A B A'' B''
HCong1 : Cong A C' A' B'
HPar1 : Par B A A' B'
HB' : Midpoint G B'' B'''
B''' : Tpoint
H2 : Midpoint B'' B G
B'' : Tpoint
H1 : Midpoint C' A B
C' : Tpoint
H0 : Midpoint B' A C
B' : Tpoint
HNC : not (Col A B C)
HMid3 : Midpoint G A' A''
HMid2 : Midpoint A'' A G
HMid1 : Midpoint A' B C
A,B,C,G,A',A'' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS A' B'' G A
+++++
show_distinct G B''; treat_equalities; Col.
-----
Lemma is_gravity_center_third_reci : forall A B C G A' A'', Midpoint A' B C -> Midpoint A'' A G -> Midpoint G A' A'' -> ~ Col A B C -> is_gravity_center G A B C.
Proof.
intros A B C G A' A'' HMid1 HMid2 HMid3 HNC.
split; Col.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
exists A'; exists B'; split; Col; try split; Col; split; try (assert (A <> G) by (intro; treat_equalities; assert_cols; Col); assert_diffs; assert_cols; ColR).
Name B'' the midpoint of B and G.
assert (HB' := symmetric_point_construction B'' G).
destruct HB' as [B''' HB'].
assert (HPar1 : Par B A A' B').
assert (HCong1 : Cong A C' A' B').
assert (HPar2 : Par A B A'' B'').
assert (HCong2 : Cong A C' A'' B'').
assert (HPar3 : Par A'' B'' A' B''').
assert (Cong3 : Cong A'' B'' A' B''').
assert (HCol : Col A' B' B''').
assert (HElim := l7_20 A' B' B'''); elim HElim; clear HElim; try intro HElim; Col; eCong.
assert (HFalse : OS A' B'' A'' B''').
apply l9_9_bis in HFalse; exfalso; apply HFalse; clear HFalse.
apply l9_8_2 with B'.
apply one_side_transitivity with A.
apply one_side_symmetry; apply l9_17 with C; try (unfold Midpoint in *; spliter; assumption).
apply one_side_transitivity with G.
apply one_side_symmetry.
assert_diffs; assert_cols; show_distinct G A'; treat_equalities; Col.
show_distinct G A''; treat_equalities; Col.
show_distinct G B''; treat_equalities; Col.

*****
H24 : not (eq G B'')
H23 : not (eq G A'')
H22 : not (eq G A')
H21 : Col A' B C
H20 : Col A'' A G
H19 : Col G A' A''
H18 : Col B' A C
H17 : Col C' A B
H16 : Col B'' B G
H14 : Col G B'' B'''
H15 : not (eq B' B''')
H13 : not (eq A' B')
H12 : not (eq A' B''')
H : not (eq A'' B'')
H11 : not (eq C' B)
H10 : not (eq C' A)
H9 : not (eq A' C)
H8 : not (eq A' B)
H6 : not (eq B' C)
H3 : not (eq B' A)
H7 : not (eq A C)
H4 : not (eq B C)
H5 : not (eq A B)
HElim : Midpoint A' B' B'''
HCol : Col A' B' B'''
Cong3 : Cong A'' B'' A' B'''
HPar3 : Par A'' B'' A' B'''
HCong2 : Cong A C' A'' B''
HPar2 : Par A B A'' B''
HCong1 : Cong A C' A' B'
HPar1 : Par B A A' B'
HB' : Midpoint G B'' B'''
B''' : Tpoint
H2 : Midpoint B'' B G
B'' : Tpoint
H1 : Midpoint C' A B
C' : Tpoint
H0 : Midpoint B' A C
B' : Tpoint
HNC : not (Col A B C)
HMid3 : Midpoint G A' A''
HMid2 : Midpoint A'' A G
HMid1 : Midpoint A' B C
A,B,C,G,A',A'' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS A' B'' G A
+++++
assert (HH1 : A' <> B'') by (intro; treat_equalities; Col).
-----
Lemma is_gravity_center_third_reci : forall A B C G A' A'', Midpoint A' B C -> Midpoint A'' A G -> Midpoint G A' A'' -> ~ Col A B C -> is_gravity_center G A B C.
Proof.
intros A B C G A' A'' HMid1 HMid2 HMid3 HNC.
split; Col.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
exists A'; exists B'; split; Col; try split; Col; split; try (assert (A <> G) by (intro; treat_equalities; assert_cols; Col); assert_diffs; assert_cols; ColR).
Name B'' the midpoint of B and G.
assert (HB' := symmetric_point_construction B'' G).
destruct HB' as [B''' HB'].
assert (HPar1 : Par B A A' B').
assert (HCong1 : Cong A C' A' B').
assert (HPar2 : Par A B A'' B'').
assert (HCong2 : Cong A C' A'' B'').
assert (HPar3 : Par A'' B'' A' B''').
assert (Cong3 : Cong A'' B'' A' B''').
assert (HCol : Col A' B' B''').
assert (HElim := l7_20 A' B' B'''); elim HElim; clear HElim; try intro HElim; Col; eCong.
assert (HFalse : OS A' B'' A'' B''').
apply l9_9_bis in HFalse; exfalso; apply HFalse; clear HFalse.
apply l9_8_2 with B'.
apply one_side_transitivity with A.
apply one_side_symmetry; apply l9_17 with C; try (unfold Midpoint in *; spliter; assumption).
apply one_side_transitivity with G.
apply one_side_symmetry.
assert_diffs; assert_cols; show_distinct G A'; treat_equalities; Col.
show_distinct G A''; treat_equalities; Col.
show_distinct G B''; treat_equalities; Col.
assert (HH1 : A' <> B'') by (intro; treat_equalities; Col).

*****
HH1 : not (eq A' B'')
H24 : not (eq G B'')
H23 : not (eq G A'')
H22 : not (eq G A')
H21 : Col A' B C
H20 : Col A'' A G
H19 : Col G A' A''
H18 : Col B' A C
H17 : Col C' A B
H16 : Col B'' B G
H14 : Col G B'' B'''
H15 : not (eq B' B''')
H13 : not (eq A' B')
H12 : not (eq A' B''')
H : not (eq A'' B'')
H11 : not (eq C' B)
H10 : not (eq C' A)
H9 : not (eq A' C)
H8 : not (eq A' B)
H6 : not (eq B' C)
H3 : not (eq B' A)
H7 : not (eq A C)
H4 : not (eq B C)
H5 : not (eq A B)
HElim : Midpoint A' B' B'''
HCol : Col A' B' B'''
Cong3 : Cong A'' B'' A' B'''
HPar3 : Par A'' B'' A' B'''
HCong2 : Cong A C' A'' B''
HPar2 : Par A B A'' B''
HCong1 : Cong A C' A' B'
HPar1 : Par B A A' B'
HB' : Midpoint G B'' B'''
B''' : Tpoint
H2 : Midpoint B'' B G
B'' : Tpoint
H1 : Midpoint C' A B
C' : Tpoint
H0 : Midpoint B' A C
B' : Tpoint
HNC : not (Col A B C)
HMid3 : Midpoint G A' A''
HMid2 : Midpoint A'' A G
HMid1 : Midpoint A' B C
A,B,C,G,A',A'' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS A' B'' G A
+++++
assert (HH2 : Col A' B'' A') by Col.
-----
Lemma is_gravity_center_third_reci : forall A B C G A' A'', Midpoint A' B C -> Midpoint A'' A G -> Midpoint G A' A'' -> ~ Col A B C -> is_gravity_center G A B C.
Proof.
intros A B C G A' A'' HMid1 HMid2 HMid3 HNC.
split; Col.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
exists A'; exists B'; split; Col; try split; Col; split; try (assert (A <> G) by (intro; treat_equalities; assert_cols; Col); assert_diffs; assert_cols; ColR).
Name B'' the midpoint of B and G.
assert (HB' := symmetric_point_construction B'' G).
destruct HB' as [B''' HB'].
assert (HPar1 : Par B A A' B').
assert (HCong1 : Cong A C' A' B').
assert (HPar2 : Par A B A'' B'').
assert (HCong2 : Cong A C' A'' B'').
assert (HPar3 : Par A'' B'' A' B''').
assert (Cong3 : Cong A'' B'' A' B''').
assert (HCol : Col A' B' B''').
assert (HElim := l7_20 A' B' B'''); elim HElim; clear HElim; try intro HElim; Col; eCong.
assert (HFalse : OS A' B'' A'' B''').
apply l9_9_bis in HFalse; exfalso; apply HFalse; clear HFalse.
apply l9_8_2 with B'.
apply one_side_transitivity with A.
apply one_side_symmetry; apply l9_17 with C; try (unfold Midpoint in *; spliter; assumption).
apply one_side_transitivity with G.
apply one_side_symmetry.
assert_diffs; assert_cols; show_distinct G A'; treat_equalities; Col.
show_distinct G A''; treat_equalities; Col.
show_distinct G B''; treat_equalities; Col.
assert (HH1 : A' <> B'') by (intro; treat_equalities; Col).
assert (HH2 : Col A' B'' A') by Col.

*****
HH2 : Col A' B'' A'
HH1 : not (eq A' B'')
H24 : not (eq G B'')
H23 : not (eq G A'')
H22 : not (eq G A')
H21 : Col A' B C
H20 : Col A'' A G
H19 : Col G A' A''
H18 : Col B' A C
H17 : Col C' A B
H16 : Col B'' B G
H14 : Col G B'' B'''
H15 : not (eq B' B''')
H13 : not (eq A' B')
H12 : not (eq A' B''')
H : not (eq A'' B'')
H11 : not (eq C' B)
H10 : not (eq C' A)
H9 : not (eq A' C)
H8 : not (eq A' B)
H6 : not (eq B' C)
H3 : not (eq B' A)
H7 : not (eq A C)
H4 : not (eq B C)
H5 : not (eq A B)
HElim : Midpoint A' B' B'''
HCol : Col A' B' B'''
Cong3 : Cong A'' B'' A' B'''
HPar3 : Par A'' B'' A' B'''
HCong2 : Cong A C' A'' B''
HPar2 : Par A B A'' B''
HCong1 : Cong A C' A' B'
HPar1 : Par B A A' B'
HB' : Midpoint G B'' B'''
B''' : Tpoint
H2 : Midpoint B'' B G
B'' : Tpoint
H1 : Midpoint C' A B
C' : Tpoint
H0 : Midpoint B' A C
B' : Tpoint
HNC : not (Col A B C)
HMid3 : Midpoint G A' A''
HMid2 : Midpoint A'' A G
HMid1 : Midpoint A' B C
A,B,C,G,A',A'' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS A' B'' G A
+++++
assert (HH3 : Col G A A') by ColR.
-----
Lemma is_gravity_center_third_reci : forall A B C G A' A'', Midpoint A' B C -> Midpoint A'' A G -> Midpoint G A' A'' -> ~ Col A B C -> is_gravity_center G A B C.
Proof.
intros A B C G A' A'' HMid1 HMid2 HMid3 HNC.
split; Col.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
exists A'; exists B'; split; Col; try split; Col; split; try (assert (A <> G) by (intro; treat_equalities; assert_cols; Col); assert_diffs; assert_cols; ColR).
Name B'' the midpoint of B and G.
assert (HB' := symmetric_point_construction B'' G).
destruct HB' as [B''' HB'].
assert (HPar1 : Par B A A' B').
assert (HCong1 : Cong A C' A' B').
assert (HPar2 : Par A B A'' B'').
assert (HCong2 : Cong A C' A'' B'').
assert (HPar3 : Par A'' B'' A' B''').
assert (Cong3 : Cong A'' B'' A' B''').
assert (HCol : Col A' B' B''').
assert (HElim := l7_20 A' B' B'''); elim HElim; clear HElim; try intro HElim; Col; eCong.
assert (HFalse : OS A' B'' A'' B''').
apply l9_9_bis in HFalse; exfalso; apply HFalse; clear HFalse.
apply l9_8_2 with B'.
apply one_side_transitivity with A.
apply one_side_symmetry; apply l9_17 with C; try (unfold Midpoint in *; spliter; assumption).
apply one_side_transitivity with G.
apply one_side_symmetry.
assert_diffs; assert_cols; show_distinct G A'; treat_equalities; Col.
show_distinct G A''; treat_equalities; Col.
show_distinct G B''; treat_equalities; Col.
assert (HH1 : A' <> B'') by (intro; treat_equalities; Col).
assert (HH2 : Col A' B'' A') by Col.
assert (HH3 : Col G A A') by ColR.

*****
HH3 : Col G A A'
HH2 : Col A' B'' A'
HH1 : not (eq A' B'')
H24 : not (eq G B'')
H23 : not (eq G A'')
H22 : not (eq G A')
H21 : Col A' B C
H20 : Col A'' A G
H19 : Col G A' A''
H18 : Col B' A C
H17 : Col C' A B
H16 : Col B'' B G
H14 : Col G B'' B'''
H15 : not (eq B' B''')
H13 : not (eq A' B')
H12 : not (eq A' B''')
H : not (eq A'' B'')
H11 : not (eq C' B)
H10 : not (eq C' A)
H9 : not (eq A' C)
H8 : not (eq A' B)
H6 : not (eq B' C)
H3 : not (eq B' A)
H7 : not (eq A C)
H4 : not (eq B C)
H5 : not (eq A B)
HElim : Midpoint A' B' B'''
HCol : Col A' B' B'''
Cong3 : Cong A'' B'' A' B'''
HPar3 : Par A'' B'' A' B'''
HCong2 : Cong A C' A'' B''
HPar2 : Par A B A'' B''
HCong1 : Cong A C' A' B'
HPar1 : Par B A A' B'
HB' : Midpoint G B'' B'''
B''' : Tpoint
H2 : Midpoint B'' B G
B'' : Tpoint
H1 : Midpoint C' A B
C' : Tpoint
H0 : Midpoint B' A C
B' : Tpoint
HNC : not (Col A B C)
HMid3 : Midpoint G A' A''
HMid2 : Midpoint A'' A G
HMid1 : Midpoint A' B C
A,B,C,G,A',A'' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS A' B'' G A
+++++
assert (HH := l9_19 A' B'' G A A' HH2 HH3); rewrite HH.
-----
Lemma is_gravity_center_third_reci : forall A B C G A' A'', Midpoint A' B C -> Midpoint A'' A G -> Midpoint G A' A'' -> ~ Col A B C -> is_gravity_center G A B C.
Proof.
intros A B C G A' A'' HMid1 HMid2 HMid3 HNC.
split; Col.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
exists A'; exists B'; split; Col; try split; Col; split; try (assert (A <> G) by (intro; treat_equalities; assert_cols; Col); assert_diffs; assert_cols; ColR).
Name B'' the midpoint of B and G.
assert (HB' := symmetric_point_construction B'' G).
destruct HB' as [B''' HB'].
assert (HPar1 : Par B A A' B').
assert (HCong1 : Cong A C' A' B').
assert (HPar2 : Par A B A'' B'').
assert (HCong2 : Cong A C' A'' B'').
assert (HPar3 : Par A'' B'' A' B''').
assert (Cong3 : Cong A'' B'' A' B''').
assert (HCol : Col A' B' B''').
assert (HElim := l7_20 A' B' B'''); elim HElim; clear HElim; try intro HElim; Col; eCong.
assert (HFalse : OS A' B'' A'' B''').
apply l9_9_bis in HFalse; exfalso; apply HFalse; clear HFalse.
apply l9_8_2 with B'.
apply one_side_transitivity with A.
apply one_side_symmetry; apply l9_17 with C; try (unfold Midpoint in *; spliter; assumption).
apply one_side_transitivity with G.
apply one_side_symmetry.
assert_diffs; assert_cols; show_distinct G A'; treat_equalities; Col.
show_distinct G A''; treat_equalities; Col.
show_distinct G B''; treat_equalities; Col.
assert (HH1 : A' <> B'') by (intro; treat_equalities; Col).
assert (HH2 : Col A' B'' A') by Col.
assert (HH3 : Col G A A') by ColR.
assert (HH := l9_19 A' B'' G A A' HH2 HH3); rewrite HH.

*****
HH : iff (OS A' B'' G A) (and (Out A' G A) (not (Col A' B'' G)))
HH3 : Col G A A'
HH2 : Col A' B'' A'
HH1 : not (eq A' B'')
H24 : not (eq G B'')
H23 : not (eq G A'')
H22 : not (eq G A')
H21 : Col A' B C
H20 : Col A'' A G
H19 : Col G A' A''
H18 : Col B' A C
H17 : Col C' A B
H16 : Col B'' B G
H14 : Col G B'' B'''
H15 : not (eq B' B''')
H13 : not (eq A' B')
H12 : not (eq A' B''')
H : not (eq A'' B'')
H11 : not (eq C' B)
H10 : not (eq C' A)
H9 : not (eq A' C)
H8 : not (eq A' B)
H6 : not (eq B' C)
H3 : not (eq B' A)
H7 : not (eq A C)
H4 : not (eq B C)
H5 : not (eq A B)
HElim : Midpoint A' B' B'''
HCol : Col A' B' B'''
Cong3 : Cong A'' B'' A' B'''
HPar3 : Par A'' B'' A' B'''
HCong2 : Cong A C' A'' B''
HPar2 : Par A B A'' B''
HCong1 : Cong A C' A' B'
HPar1 : Par B A A' B'
HB' : Midpoint G B'' B'''
B''' : Tpoint
H2 : Midpoint B'' B G
B'' : Tpoint
H1 : Midpoint C' A B
C' : Tpoint
H0 : Midpoint B' A C
B' : Tpoint
HNC : not (Col A B C)
HMid3 : Midpoint G A' A''
HMid2 : Midpoint A'' A G
HMid1 : Midpoint A' B C
A,B,C,G,A',A'' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Out A' G A) (not (Col A' B'' G))
+++++
assert_diffs; assert_cols; assert (HABG : ~ Col A B G) by (intro; apply HNC; ColR).
-----
Lemma is_gravity_center_third_reci : forall A B C G A' A'', Midpoint A' B C -> Midpoint A'' A G -> Midpoint G A' A'' -> ~ Col A B C -> is_gravity_center G A B C.
Proof.
intros A B C G A' A'' HMid1 HMid2 HMid3 HNC.
split; Col.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
exists A'; exists B'; split; Col; try split; Col; split; try (assert (A <> G) by (intro; treat_equalities; assert_cols; Col); assert_diffs; assert_cols; ColR).
Name B'' the midpoint of B and G.
assert (HB' := symmetric_point_construction B'' G).
destruct HB' as [B''' HB'].
assert (HPar1 : Par B A A' B').
assert (HCong1 : Cong A C' A' B').
assert (HPar2 : Par A B A'' B'').
assert (HCong2 : Cong A C' A'' B'').
assert (HPar3 : Par A'' B'' A' B''').
assert (Cong3 : Cong A'' B'' A' B''').
assert (HCol : Col A' B' B''').
assert (HElim := l7_20 A' B' B'''); elim HElim; clear HElim; try intro HElim; Col; eCong.
assert (HFalse : OS A' B'' A'' B''').
apply l9_9_bis in HFalse; exfalso; apply HFalse; clear HFalse.
apply l9_8_2 with B'.
apply one_side_transitivity with A.
apply one_side_symmetry; apply l9_17 with C; try (unfold Midpoint in *; spliter; assumption).
apply one_side_transitivity with G.
apply one_side_symmetry.
assert_diffs; assert_cols; show_distinct G A'; treat_equalities; Col.
show_distinct G A''; treat_equalities; Col.
show_distinct G B''; treat_equalities; Col.
assert (HH1 : A' <> B'') by (intro; treat_equalities; Col).
assert (HH2 : Col A' B'' A') by Col.
assert (HH3 : Col G A A') by ColR.
assert (HH := l9_19 A' B'' G A A' HH2 HH3); rewrite HH.
assert_diffs; assert_cols; assert (HABG : ~ Col A B G) by (intro; apply HNC; ColR).

*****
HABG : not (Col A B G)
H32 : not (eq A'' A)
H31 : not (eq A G)
H30 : not (eq B'' B)
H29 : not (eq B G)
H28 : not (eq A' A'')
H27 : not (eq G B''')
H26 : not (eq B'' B''')
HH : iff (OS A' B'' G A) (and (Out A' G A) (not (Col A' B'' G)))
HH3 : Col G A A'
HH2 : Col A' B'' A'
HH1 : not (eq A' B'')
H24 : not (eq G B'')
H23 : not (eq G A'')
H22 : not (eq G A')
H21 : Col A' B C
H20 : Col A'' A G
H19 : Col G A' A''
H18 : Col B' A C
H17 : Col C' A B
H16 : Col B'' B G
H14 : Col G B'' B'''
H15 : not (eq B' B''')
H13 : not (eq A' B')
H12 : not (eq A' B''')
H : not (eq A'' B'')
H11 : not (eq C' B)
H10 : not (eq C' A)
H9 : not (eq A' C)
H8 : not (eq A' B)
H6 : not (eq B' C)
H3 : not (eq B' A)
H7 : not (eq A C)
H4 : not (eq B C)
H5 : not (eq A B)
HElim : Midpoint A' B' B'''
HCol : Col A' B' B'''
Cong3 : Cong A'' B'' A' B'''
HPar3 : Par A'' B'' A' B'''
HCong2 : Cong A C' A'' B''
HPar2 : Par A B A'' B''
HCong1 : Cong A C' A' B'
HPar1 : Par B A A' B'
HB' : Midpoint G B'' B'''
B''' : Tpoint
H2 : Midpoint B'' B G
B'' : Tpoint
H1 : Midpoint C' A B
C' : Tpoint
H0 : Midpoint B' A C
B' : Tpoint
HNC : not (Col A B C)
HMid3 : Midpoint G A' A''
HMid2 : Midpoint A'' A G
HMid1 : Midpoint A' B C
A,B,C,G,A',A'' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Out A' G A) (not (Col A' B'' G))
+++++
split; try (intro; apply HABG; ColR).
-----
Lemma is_gravity_center_third_reci : forall A B C G A' A'', Midpoint A' B C -> Midpoint A'' A G -> Midpoint G A' A'' -> ~ Col A B C -> is_gravity_center G A B C.
Proof.
intros A B C G A' A'' HMid1 HMid2 HMid3 HNC.
split; Col.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
exists A'; exists B'; split; Col; try split; Col; split; try (assert (A <> G) by (intro; treat_equalities; assert_cols; Col); assert_diffs; assert_cols; ColR).
Name B'' the midpoint of B and G.
assert (HB' := symmetric_point_construction B'' G).
destruct HB' as [B''' HB'].
assert (HPar1 : Par B A A' B').
assert (HCong1 : Cong A C' A' B').
assert (HPar2 : Par A B A'' B'').
assert (HCong2 : Cong A C' A'' B'').
assert (HPar3 : Par A'' B'' A' B''').
assert (Cong3 : Cong A'' B'' A' B''').
assert (HCol : Col A' B' B''').
assert (HElim := l7_20 A' B' B'''); elim HElim; clear HElim; try intro HElim; Col; eCong.
assert (HFalse : OS A' B'' A'' B''').
apply l9_9_bis in HFalse; exfalso; apply HFalse; clear HFalse.
apply l9_8_2 with B'.
apply one_side_transitivity with A.
apply one_side_symmetry; apply l9_17 with C; try (unfold Midpoint in *; spliter; assumption).
apply one_side_transitivity with G.
apply one_side_symmetry.
assert_diffs; assert_cols; show_distinct G A'; treat_equalities; Col.
show_distinct G A''; treat_equalities; Col.
show_distinct G B''; treat_equalities; Col.
assert (HH1 : A' <> B'') by (intro; treat_equalities; Col).
assert (HH2 : Col A' B'' A') by Col.
assert (HH3 : Col G A A') by ColR.
assert (HH := l9_19 A' B'' G A A' HH2 HH3); rewrite HH.
assert_diffs; assert_cols; assert (HABG : ~ Col A B G) by (intro; apply HNC; ColR).
split; try (intro; apply HABG; ColR).

*****
HABG : not (Col A B G)
H32 : not (eq A'' A)
H31 : not (eq A G)
H30 : not (eq B'' B)
H29 : not (eq B G)
H28 : not (eq A' A'')
H27 : not (eq G B''')
H26 : not (eq B'' B''')
HH : iff (OS A' B'' G A) (and (Out A' G A) (not (Col A' B'' G)))
HH3 : Col G A A'
HH2 : Col A' B'' A'
HH1 : not (eq A' B'')
H24 : not (eq G B'')
H23 : not (eq G A'')
H22 : not (eq G A')
H21 : Col A' B C
H20 : Col A'' A G
H19 : Col G A' A''
H18 : Col B' A C
H17 : Col C' A B
H16 : Col B'' B G
H14 : Col G B'' B'''
H15 : not (eq B' B''')
H13 : not (eq A' B')
H12 : not (eq A' B''')
H : not (eq A'' B'')
H11 : not (eq C' B)
H10 : not (eq C' A)
H9 : not (eq A' C)
H8 : not (eq A' B)
H6 : not (eq B' C)
H3 : not (eq B' A)
H7 : not (eq A C)
H4 : not (eq B C)
H5 : not (eq A B)
HElim : Midpoint A' B' B'''
HCol : Col A' B' B'''
Cong3 : Cong A'' B'' A' B'''
HPar3 : Par A'' B'' A' B'''
HCong2 : Cong A C' A'' B''
HPar2 : Par A B A'' B''
HCong1 : Cong A C' A' B'
HPar1 : Par B A A' B'
HB' : Midpoint G B'' B'''
B''' : Tpoint
H2 : Midpoint B'' B G
B'' : Tpoint
H1 : Midpoint C' A B
C' : Tpoint
H0 : Midpoint B' A C
B' : Tpoint
HNC : not (Col A B C)
HMid3 : Midpoint G A' A''
HMid2 : Midpoint A'' A G
HMid1 : Midpoint A' B C
A,B,C,G,A',A'' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Out A' G A
+++++
split; Col.
-----
Lemma is_gravity_center_third_reci : forall A B C G A' A'', Midpoint A' B C -> Midpoint A'' A G -> Midpoint G A' A'' -> ~ Col A B C -> is_gravity_center G A B C.
Proof.
intros A B C G A' A'' HMid1 HMid2 HMid3 HNC.
split; Col.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
exists A'; exists B'; split; Col; try split; Col; split; try (assert (A <> G) by (intro; treat_equalities; assert_cols; Col); assert_diffs; assert_cols; ColR).
Name B'' the midpoint of B and G.
assert (HB' := symmetric_point_construction B'' G).
destruct HB' as [B''' HB'].
assert (HPar1 : Par B A A' B').
assert (HCong1 : Cong A C' A' B').
assert (HPar2 : Par A B A'' B'').
assert (HCong2 : Cong A C' A'' B'').
assert (HPar3 : Par A'' B'' A' B''').
assert (Cong3 : Cong A'' B'' A' B''').
assert (HCol : Col A' B' B''').
assert (HElim := l7_20 A' B' B'''); elim HElim; clear HElim; try intro HElim; Col; eCong.
assert (HFalse : OS A' B'' A'' B''').
apply l9_9_bis in HFalse; exfalso; apply HFalse; clear HFalse.
apply l9_8_2 with B'.
apply one_side_transitivity with A.
apply one_side_symmetry; apply l9_17 with C; try (unfold Midpoint in *; spliter; assumption).
apply one_side_transitivity with G.
apply one_side_symmetry.
assert_diffs; assert_cols; show_distinct G A'; treat_equalities; Col.
show_distinct G A''; treat_equalities; Col.
show_distinct G B''; treat_equalities; Col.
assert (HH1 : A' <> B'') by (intro; treat_equalities; Col).
assert (HH2 : Col A' B'' A') by Col.
assert (HH3 : Col G A A') by ColR.
assert (HH := l9_19 A' B'' G A A' HH2 HH3); rewrite HH.
assert_diffs; assert_cols; assert (HABG : ~ Col A B G) by (intro; apply HNC; ColR).
split; try (intro; apply HABG; ColR).
split; Col.

*****
HABG : not (Col A B G)
H32 : not (eq A'' A)
H31 : not (eq A G)
H30 : not (eq B'' B)
H29 : not (eq B G)
H28 : not (eq A' A'')
H27 : not (eq G B''')
H26 : not (eq B'' B''')
HH : iff (OS A' B'' G A) (and (Out A' G A) (not (Col A' B'' G)))
HH3 : Col G A A'
HH2 : Col A' B'' A'
HH1 : not (eq A' B'')
H24 : not (eq G B'')
H23 : not (eq G A'')
H22 : not (eq G A')
H21 : Col A' B C
H20 : Col A'' A G
H19 : Col G A' A''
H18 : Col B' A C
H17 : Col C' A B
H16 : Col B'' B G
H14 : Col G B'' B'''
H15 : not (eq B' B''')
H13 : not (eq A' B')
H12 : not (eq A' B''')
H : not (eq A'' B'')
H11 : not (eq C' B)
H10 : not (eq C' A)
H9 : not (eq A' C)
H8 : not (eq A' B)
H6 : not (eq B' C)
H3 : not (eq B' A)
H7 : not (eq A C)
H4 : not (eq B C)
H5 : not (eq A B)
HElim : Midpoint A' B' B'''
HCol : Col A' B' B'''
Cong3 : Cong A'' B'' A' B'''
HPar3 : Par A'' B'' A' B'''
HCong2 : Cong A C' A'' B''
HPar2 : Par A B A'' B''
HCong1 : Cong A C' A' B'
HPar1 : Par B A A' B'
HB' : Midpoint G B'' B'''
B''' : Tpoint
H2 : Midpoint B'' B G
B'' : Tpoint
H1 : Midpoint C' A B
C' : Tpoint
H0 : Midpoint B' A C
B' : Tpoint
HNC : not (Col A B C)
HMid3 : Midpoint G A' A''
HMid2 : Midpoint A'' A G
HMid1 : Midpoint A' B C
A,B,C,G,A',A'' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (not (eq A A')) (or (Bet A' G A) (Bet A' A G))
+++++
split; try (intro; treat_equalities; Col).
-----
Lemma is_gravity_center_third_reci : forall A B C G A' A'', Midpoint A' B C -> Midpoint A'' A G -> Midpoint G A' A'' -> ~ Col A B C -> is_gravity_center G A B C.
Proof.
intros A B C G A' A'' HMid1 HMid2 HMid3 HNC.
split; Col.
Name B' the midpoint of A and C.
Name C' the midpoint of A and B.
exists A'; exists B'; split; Col; try split; Col; split; try (assert (A <> G) by (intro; treat_equalities; assert_cols; Col); assert_diffs; assert_cols; ColR).
Name B'' the midpoint of B and G.
assert (HB' := symmetric_point_construction B'' G).
destruct HB' as [B''' HB'].
assert (HPar1 : Par B A A' B').
assert (HCong1 : Cong A C' A' B').
assert (HPar2 : Par A B A'' B'').
assert (HCong2 : Cong A C' A'' B'').
assert (HPar3 : Par A'' B'' A' B''').
assert (Cong3 : Cong A'' B'' A' B''').
assert (HCol : Col A' B' B''').
assert (HElim := l7_20 A' B' B'''); elim HElim; clear HElim; try intro HElim; Col; eCong.
assert (HFalse : OS A' B'' A'' B''').
apply l9_9_bis in HFalse; exfalso; apply HFalse; clear HFalse.
apply l9_8_2 with B'.
apply one_side_transitivity with A.
apply one_side_symmetry; apply l9_17 with C; try (unfold Midpoint in *; spliter; assumption).
apply one_side_transitivity with G.
apply one_side_symmetry.
assert_diffs; assert_cols; show_distinct G A'; treat_equalities; Col.
show_distinct G A''; treat_equalities; Col.
show_distinct G B''; treat_equalities; Col.
assert (HH1 : A' <> B'') by (intro; treat_equalities; Col).
assert (HH2 : Col A' B'' A') by Col.
assert (HH3 : Col G A A') by ColR.
assert (HH := l9_19 A' B'' G A A' HH2 HH3); rewrite HH.
assert_diffs; assert_cols; assert (HABG : ~ Col A B G) by (intro; apply HNC; ColR).
split; try (intro; apply HABG; ColR).
split; Col.
split; try (intro; treat_equalities; Col).

*****
HABG : not (Col A B G)
H32 : not (eq A'' A)
H31 : not (eq A G)
H30 : not (eq B'' B)
H29 : not (eq B G)
H28 : not (eq A' A'')
H27 : not (eq G B''')
H26 : not (eq B'' B''')
HH : iff (OS A' B'' G A) (and (Out A' G A) (not (Col A' B'' G)))
HH3 : Col G A A'
HH2 : Col A' B'' A'
HH1 : not (eq A' B'')
H24 : not (eq G B'')
H23 : not (eq G A'')
H22 : not (eq G A')
H21 : Col A' B C
H20 : Col A'' A G
H19 : Col G A' A''
H18 : Col B' A C
H17 : Col C' A B
H16 : Col B'' B G
H14 : Col G B'' B'''
H15 : not (eq B' B''')
H13 : not (eq A' B')
H12 : not (eq A' B''')
H : not (eq A'' B'')
H11 : not (eq C' B)
H10 : not (eq C' A)
H9 : not (eq A' C)
H8 : not (eq A' B)
H6 : not (eq B' C)
H3 : not (eq B' A)
H7 : not (eq A C)
H4 : not (eq B C)
H5 : not (eq A B)
HElim : Midpoint A' B' B'''
HCol : Col A' B' B'''
Cong3 : Cong A'' B'' A' B'''
HPar3 : Par A'' B'' A' B'''
HCong2 : Cong A C' A'' B''
HPar2 : Par A B A'' B''
HCong1 : Cong A C' A' B'
HPar1 : Par B A A' B'
HB' : Midpoint G B'' B'''
B''' : Tpoint
H2 : Midpoint B'' B G
B'' : Tpoint
H1 : Midpoint C' A B
C' : Tpoint
H0 : Midpoint B' A C
B' : Tpoint
HNC : not (Col A B C)
HMid3 : Midpoint G A' A''
HMid2 : Midpoint A'' A G
HMid1 : Midpoint A' B C
A,B,C,G,A',A'' : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (Bet A' G A) (Bet A' A G)
+++++
unfold Midpoint in *; spliter; eBetween.
-----
