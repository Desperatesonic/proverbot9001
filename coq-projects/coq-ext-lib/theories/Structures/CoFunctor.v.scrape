Require Import ExtLib.Core.Any.
-----
Set Implicit Arguments.
-----
Set Strict Implicit.
-----
Section functor.
-----
Polymorphic Class CoFunctor@{d c} (F : Type@{d} -> Type@{c}) : Type :=\n  { cofmap : forall {A B : Type@{d}}, (B -> A) -> F A -> F B }.
-----
Polymorphic Class CoPFunctor@{d c p} (F : Type@{d} -> Type@{c}) : Type :=\n  { CoFunP : Type@{d} -> Type@{p}\n  ; copfmap : forall {A B : Type@{d}} {P : CoFunP B}, (B -> A) -> F A -> F B\n  }.
-----
Existing Class CoFunP.
-----
Hint Extern 0 (@CoFunP _ _ _) => progress (simpl CoFunP) : typeclass_instances.
-----
Polymorphic Definition CoPFunctor_From_CoFunctor@{d c p} (F : Type@{d} -> Type@{c}) (F_ : CoFunctor@{d c} F) : CoPFunctor@{d c p} F :=\n  {| CoFunP := Any@{p}\n   ; copfmap := fun _ _ _ f x => cofmap f x\n   |}.
-----
Global Existing Instance CoPFunctor_From_CoFunctor.
-----
End functor.
-----
