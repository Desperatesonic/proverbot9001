Require Export GeoCoq.Elements.OriginalProofs.lemma_collinearbetween.
-----
Require Export GeoCoq.Elements.OriginalProofs.lemma_NChelper.
-----
Require Export GeoCoq.Elements.OriginalProofs.lemma_NCorder.
-----
Section Euclid.
-----
Context `{Ax:euclidean_neutral_ruler_compass}.
-----
Lemma lemma_parallelcollinear1 : \n   forall A B C c d, \n   TP A B c d -> BetS C c d ->\n   TP A B C d.
-----
Lemma lemma_parallelcollinear1 : forall A B C c d, TP A B c d -> BetS C c d -> TP A B C d.

*****
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
forall (A B C c d : Point) (_ : TP A B c d) (_ : BetS C c d), TP A B C d
+++++
Proof.
-----
Lemma lemma_parallelcollinear1 : forall A B C c d, TP A B c d -> BetS C c d -> TP A B C d.
Proof.

*****
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
forall (A B C c d : Point) (_ : TP A B c d) (_ : BetS C c d), TP A B C d
+++++
intros.
-----
Lemma lemma_parallelcollinear1 : forall A B C c d, TP A B c d -> BetS C c d -> TP A B C d.
Proof.
intros.

*****
H0 : BetS C c d
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
TP A B C d
+++++
assert (Col C c d) by (conclude_def Col ).
-----
Lemma lemma_parallelcollinear1 : forall A B C c d, TP A B c d -> BetS C c d -> TP A B C d.
Proof.
intros.
assert (Col C c d) by (conclude_def Col ).

*****
H1 : Col C c d
H0 : BetS C c d
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
TP A B C d
+++++
assert (neq C c) by (forward_using lemma_betweennotequal).
-----
Lemma lemma_parallelcollinear1 : forall A B C c d, TP A B c d -> BetS C c d -> TP A B C d.
Proof.
intros.
assert (Col C c d) by (conclude_def Col ).
assert (neq C c) by (forward_using lemma_betweennotequal).

*****
H2 : neq C c
H1 : Col C c d
H0 : BetS C c d
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
TP A B C d
+++++
assert (neq c d) by (forward_using lemma_betweennotequal).
-----
Lemma lemma_parallelcollinear1 : forall A B C c d, TP A B c d -> BetS C c d -> TP A B C d.
Proof.
intros.
assert (Col C c d) by (conclude_def Col ).
assert (neq C c) by (forward_using lemma_betweennotequal).
assert (neq c d) by (forward_using lemma_betweennotequal).

*****
H3 : neq c d
H2 : neq C c
H1 : Col C c d
H0 : BetS C c d
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
TP A B C d
+++++
assert (neq C d) by (forward_using lemma_betweennotequal).
-----
Lemma lemma_parallelcollinear1 : forall A B C c d, TP A B c d -> BetS C c d -> TP A B C d.
Proof.
intros.
assert (Col C c d) by (conclude_def Col ).
assert (neq C c) by (forward_using lemma_betweennotequal).
assert (neq c d) by (forward_using lemma_betweennotequal).
assert (neq C d) by (forward_using lemma_betweennotequal).

*****
H4 : neq C d
H3 : neq c d
H2 : neq C c
H1 : Col C c d
H0 : BetS C c d
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
TP A B C d
+++++
assert ((neq A B /\ neq c d /\ ~ Meet A B c d /\ OS c d A B)) by (conclude_def TP ).
-----
Lemma lemma_parallelcollinear1 : forall A B C c d, TP A B c d -> BetS C c d -> TP A B C d.
Proof.
intros.
assert (Col C c d) by (conclude_def Col ).
assert (neq C c) by (forward_using lemma_betweennotequal).
assert (neq c d) by (forward_using lemma_betweennotequal).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)) by (conclude_def TP ).

*****
H5 : and (neq A B) (and (neq c d) (and (not (Meet A B c d)) (OS c d A B)))
H4 : neq C d
H3 : neq c d
H2 : neq C c
H1 : Col C c d
H0 : BetS C c d
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
TP A B C d
+++++
let Tf:=fresh in assert (Tf:exists p q r, (Col A B p /\ Col A B r /\ BetS c p q /\ BetS d r q /\ nCol A B c /\ nCol A B d)) by (conclude_def OS );destruct Tf as [p[q[r]]];spliter.
-----
Lemma lemma_parallelcollinear1 : forall A B C c d, TP A B c d -> BetS C c d -> TP A B C d.
Proof.
intros.
assert (Col C c d) by (conclude_def Col ).
assert (neq C c) by (forward_using lemma_betweennotequal).
assert (neq c d) by (forward_using lemma_betweennotequal).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)) by (conclude_def TP ).
let Tf:=fresh in assert (Tf:exists p q r, (Col A B p /\\ Col A B r /\\ BetS c p q /\\ BetS d r q /\\ nCol A B c /\\ nCol A B d)) by (conclude_def OS );destruct Tf as [p[q[r]]];spliter.

*****
H11 : nCol A B d
H10 : nCol A B c
H9 : BetS d r q
H8 : BetS c p q
H7 : Col A B r
H6 : Col A B p
p,q,r : Point
H14 : OS c d A B
H13 : not (Meet A B c d)
H12 : neq c d
H5 : neq A B
H4 : neq C d
H3 : neq c d
H2 : neq C c
H1 : Col C c d
H0 : BetS C c d
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
TP A B C d
+++++
assert (BetS q r d) by (conclude axiom_betweennesssymmetry).
-----
Lemma lemma_parallelcollinear1 : forall A B C c d, TP A B c d -> BetS C c d -> TP A B C d.
Proof.
intros.
assert (Col C c d) by (conclude_def Col ).
assert (neq C c) by (forward_using lemma_betweennotequal).
assert (neq c d) by (forward_using lemma_betweennotequal).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)) by (conclude_def TP ).
let Tf:=fresh in assert (Tf:exists p q r, (Col A B p /\\ Col A B r /\\ BetS c p q /\\ BetS d r q /\\ nCol A B c /\\ nCol A B d)) by (conclude_def OS );destruct Tf as [p[q[r]]];spliter.
assert (BetS q r d) by (conclude axiom_betweennesssymmetry).

*****
H15 : BetS q r d
H11 : nCol A B d
H10 : nCol A B c
H9 : BetS d r q
H8 : BetS c p q
H7 : Col A B r
H6 : Col A B p
p,q,r : Point
H14 : OS c d A B
H13 : not (Meet A B c d)
H12 : neq c d
H5 : neq A B
H4 : neq C d
H3 : neq c d
H2 : neq C c
H1 : Col C c d
H0 : BetS C c d
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
TP A B C d
+++++
assert (Col C c d) by (conclude_def Col ).
-----
Lemma lemma_parallelcollinear1 : forall A B C c d, TP A B c d -> BetS C c d -> TP A B C d.
Proof.
intros.
assert (Col C c d) by (conclude_def Col ).
assert (neq C c) by (forward_using lemma_betweennotequal).
assert (neq c d) by (forward_using lemma_betweennotequal).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)) by (conclude_def TP ).
let Tf:=fresh in assert (Tf:exists p q r, (Col A B p /\\ Col A B r /\\ BetS c p q /\\ BetS d r q /\\ nCol A B c /\\ nCol A B d)) by (conclude_def OS );destruct Tf as [p[q[r]]];spliter.
assert (BetS q r d) by (conclude axiom_betweennesssymmetry).
assert (Col C c d) by (conclude_def Col ).

*****
H16 : Col C c d
H15 : BetS q r d
H11 : nCol A B d
H10 : nCol A B c
H9 : BetS d r q
H8 : BetS c p q
H7 : Col A B r
H6 : Col A B p
p,q,r : Point
H14 : OS c d A B
H13 : not (Meet A B c d)
H12 : neq c d
H5 : neq A B
H4 : neq C d
H3 : neq c d
H2 : neq C c
H1 : Col C c d
H0 : BetS C c d
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
TP A B C d
+++++
assert (Col c d C) by (forward_using lemma_collinearorder).
-----
Lemma lemma_parallelcollinear1 : forall A B C c d, TP A B c d -> BetS C c d -> TP A B C d.
Proof.
intros.
assert (Col C c d) by (conclude_def Col ).
assert (neq C c) by (forward_using lemma_betweennotequal).
assert (neq c d) by (forward_using lemma_betweennotequal).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)) by (conclude_def TP ).
let Tf:=fresh in assert (Tf:exists p q r, (Col A B p /\\ Col A B r /\\ BetS c p q /\\ BetS d r q /\\ nCol A B c /\\ nCol A B d)) by (conclude_def OS );destruct Tf as [p[q[r]]];spliter.
assert (BetS q r d) by (conclude axiom_betweennesssymmetry).
assert (Col C c d) by (conclude_def Col ).
assert (Col c d C) by (forward_using lemma_collinearorder).

*****
H17 : Col c d C
H16 : Col C c d
H15 : BetS q r d
H11 : nCol A B d
H10 : nCol A B c
H9 : BetS d r q
H8 : BetS c p q
H7 : Col A B r
H6 : Col A B p
p,q,r : Point
H14 : OS c d A B
H13 : not (Meet A B c d)
H12 : neq c d
H5 : neq A B
H4 : neq C d
H3 : neq c d
H2 : neq C c
H1 : Col C c d
H0 : BetS C c d
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
TP A B C d
+++++
assert (BetS d c C) by (conclude axiom_betweennesssymmetry).
-----
Lemma lemma_parallelcollinear1 : forall A B C c d, TP A B c d -> BetS C c d -> TP A B C d.
Proof.
intros.
assert (Col C c d) by (conclude_def Col ).
assert (neq C c) by (forward_using lemma_betweennotequal).
assert (neq c d) by (forward_using lemma_betweennotequal).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)) by (conclude_def TP ).
let Tf:=fresh in assert (Tf:exists p q r, (Col A B p /\\ Col A B r /\\ BetS c p q /\\ BetS d r q /\\ nCol A B c /\\ nCol A B d)) by (conclude_def OS );destruct Tf as [p[q[r]]];spliter.
assert (BetS q r d) by (conclude axiom_betweennesssymmetry).
assert (Col C c d) by (conclude_def Col ).
assert (Col c d C) by (forward_using lemma_collinearorder).
assert (BetS d c C) by (conclude axiom_betweennesssymmetry).

*****
H18 : BetS d c C
H17 : Col c d C
H16 : Col C c d
H15 : BetS q r d
H11 : nCol A B d
H10 : nCol A B c
H9 : BetS d r q
H8 : BetS c p q
H7 : Col A B r
H6 : Col A B p
p,q,r : Point
H14 : OS c d A B
H13 : not (Meet A B c d)
H12 : neq c d
H5 : neq A B
H4 : neq C d
H3 : neq c d
H2 : neq C c
H1 : Col C c d
H0 : BetS C c d
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
TP A B C d
+++++
assert (BetS q p c) by (conclude axiom_betweennesssymmetry).
-----
Lemma lemma_parallelcollinear1 : forall A B C c d, TP A B c d -> BetS C c d -> TP A B C d.
Proof.
intros.
assert (Col C c d) by (conclude_def Col ).
assert (neq C c) by (forward_using lemma_betweennotequal).
assert (neq c d) by (forward_using lemma_betweennotequal).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)) by (conclude_def TP ).
let Tf:=fresh in assert (Tf:exists p q r, (Col A B p /\\ Col A B r /\\ BetS c p q /\\ BetS d r q /\\ nCol A B c /\\ nCol A B d)) by (conclude_def OS );destruct Tf as [p[q[r]]];spliter.
assert (BetS q r d) by (conclude axiom_betweennesssymmetry).
assert (Col C c d) by (conclude_def Col ).
assert (Col c d C) by (forward_using lemma_collinearorder).
assert (BetS d c C) by (conclude axiom_betweennesssymmetry).
assert (BetS q p c) by (conclude axiom_betweennesssymmetry).

*****
H19 : BetS q p c
H18 : BetS d c C
H17 : Col c d C
H16 : Col C c d
H15 : BetS q r d
H11 : nCol A B d
H10 : nCol A B c
H9 : BetS d r q
H8 : BetS c p q
H7 : Col A B r
H6 : Col A B p
p,q,r : Point
H14 : OS c d A B
H13 : not (Meet A B c d)
H12 : neq c d
H5 : neq A B
H4 : neq C d
H3 : neq c d
H2 : neq C c
H1 : Col C c d
H0 : BetS C c d
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
TP A B C d
+++++
assert (~ eq p r).
-----
Lemma lemma_parallelcollinear1 : forall A B C c d, TP A B c d -> BetS C c d -> TP A B C d.
Proof.
intros.
assert (Col C c d) by (conclude_def Col ).
assert (neq C c) by (forward_using lemma_betweennotequal).
assert (neq c d) by (forward_using lemma_betweennotequal).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)) by (conclude_def TP ).
let Tf:=fresh in assert (Tf:exists p q r, (Col A B p /\\ Col A B r /\\ BetS c p q /\\ BetS d r q /\\ nCol A B c /\\ nCol A B d)) by (conclude_def OS );destruct Tf as [p[q[r]]];spliter.
assert (BetS q r d) by (conclude axiom_betweennesssymmetry).
assert (Col C c d) by (conclude_def Col ).
assert (Col c d C) by (forward_using lemma_collinearorder).
assert (BetS d c C) by (conclude axiom_betweennesssymmetry).
assert (BetS q p c) by (conclude axiom_betweennesssymmetry).
assert (~ eq p r).

*****
H19 : BetS q p c
H18 : BetS d c C
H17 : Col c d C
H16 : Col C c d
H15 : BetS q r d
H11 : nCol A B d
H10 : nCol A B c
H9 : BetS d r q
H8 : BetS c p q
H7 : Col A B r
H6 : Col A B p
p,q,r : Point
H14 : OS c d A B
H13 : not (Meet A B c d)
H12 : neq c d
H5 : neq A B
H4 : neq C d
H3 : neq c d
H2 : neq C c
H1 : Col C c d
H0 : BetS C c d
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (eq p r)
+++++
intro.
-----
Lemma lemma_parallelcollinear1 : forall A B C c d, TP A B c d -> BetS C c d -> TP A B C d.
Proof.
intros.
assert (Col C c d) by (conclude_def Col ).
assert (neq C c) by (forward_using lemma_betweennotequal).
assert (neq c d) by (forward_using lemma_betweennotequal).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)) by (conclude_def TP ).
let Tf:=fresh in assert (Tf:exists p q r, (Col A B p /\\ Col A B r /\\ BetS c p q /\\ BetS d r q /\\ nCol A B c /\\ nCol A B d)) by (conclude_def OS );destruct Tf as [p[q[r]]];spliter.
assert (BetS q r d) by (conclude axiom_betweennesssymmetry).
assert (Col C c d) by (conclude_def Col ).
assert (Col c d C) by (forward_using lemma_collinearorder).
assert (BetS d c C) by (conclude axiom_betweennesssymmetry).
assert (BetS q p c) by (conclude axiom_betweennesssymmetry).
assert (~ eq p r).
intro.

*****
H20 : eq p r
H19 : BetS q p c
H18 : BetS d c C
H17 : Col c d C
H16 : Col C c d
H15 : BetS q r d
H11 : nCol A B d
H10 : nCol A B c
H9 : BetS d r q
H8 : BetS c p q
H7 : Col A B r
H6 : Col A B p
p,q,r : Point
H14 : OS c d A B
H13 : not (Meet A B c d)
H12 : neq c d
H5 : neq A B
H4 : neq C d
H3 : neq c d
H2 : neq C c
H1 : Col C c d
H0 : BetS C c d
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col q r d) by (conclude_def Col ).
-----
Lemma lemma_parallelcollinear1 : forall A B C c d, TP A B c d -> BetS C c d -> TP A B C d.
Proof.
intros.
assert (Col C c d) by (conclude_def Col ).
assert (neq C c) by (forward_using lemma_betweennotequal).
assert (neq c d) by (forward_using lemma_betweennotequal).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)) by (conclude_def TP ).
let Tf:=fresh in assert (Tf:exists p q r, (Col A B p /\\ Col A B r /\\ BetS c p q /\\ BetS d r q /\\ nCol A B c /\\ nCol A B d)) by (conclude_def OS );destruct Tf as [p[q[r]]];spliter.
assert (BetS q r d) by (conclude axiom_betweennesssymmetry).
assert (Col C c d) by (conclude_def Col ).
assert (Col c d C) by (forward_using lemma_collinearorder).
assert (BetS d c C) by (conclude axiom_betweennesssymmetry).
assert (BetS q p c) by (conclude axiom_betweennesssymmetry).
assert (~ eq p r).
intro.
assert (Col q r d) by (conclude_def Col ).

*****
H21 : Col q r d
H20 : eq p r
H19 : BetS q p c
H18 : BetS d c C
H17 : Col c d C
H16 : Col C c d
H15 : BetS q r d
H11 : nCol A B d
H10 : nCol A B c
H9 : BetS d r q
H8 : BetS c p q
H7 : Col A B r
H6 : Col A B p
p,q,r : Point
H14 : OS c d A B
H13 : not (Meet A B c d)
H12 : neq c d
H5 : neq A B
H4 : neq C d
H3 : neq c d
H2 : neq C c
H1 : Col C c d
H0 : BetS C c d
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col q p c) by (conclude_def Col ).
-----
Lemma lemma_parallelcollinear1 : forall A B C c d, TP A B c d -> BetS C c d -> TP A B C d.
Proof.
intros.
assert (Col C c d) by (conclude_def Col ).
assert (neq C c) by (forward_using lemma_betweennotequal).
assert (neq c d) by (forward_using lemma_betweennotequal).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)) by (conclude_def TP ).
let Tf:=fresh in assert (Tf:exists p q r, (Col A B p /\\ Col A B r /\\ BetS c p q /\\ BetS d r q /\\ nCol A B c /\\ nCol A B d)) by (conclude_def OS );destruct Tf as [p[q[r]]];spliter.
assert (BetS q r d) by (conclude axiom_betweennesssymmetry).
assert (Col C c d) by (conclude_def Col ).
assert (Col c d C) by (forward_using lemma_collinearorder).
assert (BetS d c C) by (conclude axiom_betweennesssymmetry).
assert (BetS q p c) by (conclude axiom_betweennesssymmetry).
assert (~ eq p r).
intro.
assert (Col q r d) by (conclude_def Col ).
assert (Col q p c) by (conclude_def Col ).

*****
H22 : Col q p c
H21 : Col q r d
H20 : eq p r
H19 : BetS q p c
H18 : BetS d c C
H17 : Col c d C
H16 : Col C c d
H15 : BetS q r d
H11 : nCol A B d
H10 : nCol A B c
H9 : BetS d r q
H8 : BetS c p q
H7 : Col A B r
H6 : Col A B p
p,q,r : Point
H14 : OS c d A B
H13 : not (Meet A B c d)
H12 : neq c d
H5 : neq A B
H4 : neq C d
H3 : neq c d
H2 : neq C c
H1 : Col C c d
H0 : BetS C c d
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col q p d) by (conclude cn_equalitysub).
-----
Lemma lemma_parallelcollinear1 : forall A B C c d, TP A B c d -> BetS C c d -> TP A B C d.
Proof.
intros.
assert (Col C c d) by (conclude_def Col ).
assert (neq C c) by (forward_using lemma_betweennotequal).
assert (neq c d) by (forward_using lemma_betweennotequal).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)) by (conclude_def TP ).
let Tf:=fresh in assert (Tf:exists p q r, (Col A B p /\\ Col A B r /\\ BetS c p q /\\ BetS d r q /\\ nCol A B c /\\ nCol A B d)) by (conclude_def OS );destruct Tf as [p[q[r]]];spliter.
assert (BetS q r d) by (conclude axiom_betweennesssymmetry).
assert (Col C c d) by (conclude_def Col ).
assert (Col c d C) by (forward_using lemma_collinearorder).
assert (BetS d c C) by (conclude axiom_betweennesssymmetry).
assert (BetS q p c) by (conclude axiom_betweennesssymmetry).
assert (~ eq p r).
intro.
assert (Col q r d) by (conclude_def Col ).
assert (Col q p c) by (conclude_def Col ).
assert (Col q p d) by (conclude cn_equalitysub).

*****
H23 : Col q p d
H22 : Col q p c
H21 : Col q r d
H20 : eq p r
H19 : BetS q p c
H18 : BetS d c C
H17 : Col c d C
H16 : Col C c d
H15 : BetS q r d
H11 : nCol A B d
H10 : nCol A B c
H9 : BetS d r q
H8 : BetS c p q
H7 : Col A B r
H6 : Col A B p
p,q,r : Point
H14 : OS c d A B
H13 : not (Meet A B c d)
H12 : neq c d
H5 : neq A B
H4 : neq C d
H3 : neq c d
H2 : neq C c
H1 : Col C c d
H0 : BetS C c d
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (neq q p) by (forward_using lemma_betweennotequal).
-----
Lemma lemma_parallelcollinear1 : forall A B C c d, TP A B c d -> BetS C c d -> TP A B C d.
Proof.
intros.
assert (Col C c d) by (conclude_def Col ).
assert (neq C c) by (forward_using lemma_betweennotequal).
assert (neq c d) by (forward_using lemma_betweennotequal).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)) by (conclude_def TP ).
let Tf:=fresh in assert (Tf:exists p q r, (Col A B p /\\ Col A B r /\\ BetS c p q /\\ BetS d r q /\\ nCol A B c /\\ nCol A B d)) by (conclude_def OS );destruct Tf as [p[q[r]]];spliter.
assert (BetS q r d) by (conclude axiom_betweennesssymmetry).
assert (Col C c d) by (conclude_def Col ).
assert (Col c d C) by (forward_using lemma_collinearorder).
assert (BetS d c C) by (conclude axiom_betweennesssymmetry).
assert (BetS q p c) by (conclude axiom_betweennesssymmetry).
assert (~ eq p r).
intro.
assert (Col q r d) by (conclude_def Col ).
assert (Col q p c) by (conclude_def Col ).
assert (Col q p d) by (conclude cn_equalitysub).
assert (neq q p) by (forward_using lemma_betweennotequal).

*****
H24 : neq q p
H23 : Col q p d
H22 : Col q p c
H21 : Col q r d
H20 : eq p r
H19 : BetS q p c
H18 : BetS d c C
H17 : Col c d C
H16 : Col C c d
H15 : BetS q r d
H11 : nCol A B d
H10 : nCol A B c
H9 : BetS d r q
H8 : BetS c p q
H7 : Col A B r
H6 : Col A B p
p,q,r : Point
H14 : OS c d A B
H13 : not (Meet A B c d)
H12 : neq c d
H5 : neq A B
H4 : neq C d
H3 : neq c d
H2 : neq C c
H1 : Col C c d
H0 : BetS C c d
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col p c d) by (conclude lemma_collinear4).
-----
Lemma lemma_parallelcollinear1 : forall A B C c d, TP A B c d -> BetS C c d -> TP A B C d.
Proof.
intros.
assert (Col C c d) by (conclude_def Col ).
assert (neq C c) by (forward_using lemma_betweennotequal).
assert (neq c d) by (forward_using lemma_betweennotequal).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)) by (conclude_def TP ).
let Tf:=fresh in assert (Tf:exists p q r, (Col A B p /\\ Col A B r /\\ BetS c p q /\\ BetS d r q /\\ nCol A B c /\\ nCol A B d)) by (conclude_def OS );destruct Tf as [p[q[r]]];spliter.
assert (BetS q r d) by (conclude axiom_betweennesssymmetry).
assert (Col C c d) by (conclude_def Col ).
assert (Col c d C) by (forward_using lemma_collinearorder).
assert (BetS d c C) by (conclude axiom_betweennesssymmetry).
assert (BetS q p c) by (conclude axiom_betweennesssymmetry).
assert (~ eq p r).
intro.
assert (Col q r d) by (conclude_def Col ).
assert (Col q p c) by (conclude_def Col ).
assert (Col q p d) by (conclude cn_equalitysub).
assert (neq q p) by (forward_using lemma_betweennotequal).
assert (Col p c d) by (conclude lemma_collinear4).

*****
H25 : Col p c d
H24 : neq q p
H23 : Col q p d
H22 : Col q p c
H21 : Col q r d
H20 : eq p r
H19 : BetS q p c
H18 : BetS d c C
H17 : Col c d C
H16 : Col C c d
H15 : BetS q r d
H11 : nCol A B d
H10 : nCol A B c
H9 : BetS d r q
H8 : BetS c p q
H7 : Col A B r
H6 : Col A B p
p,q,r : Point
H14 : OS c d A B
H13 : not (Meet A B c d)
H12 : neq c d
H5 : neq A B
H4 : neq C d
H3 : neq c d
H2 : neq C c
H1 : Col C c d
H0 : BetS C c d
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col c d p) by (forward_using lemma_collinearorder).
-----
Lemma lemma_parallelcollinear1 : forall A B C c d, TP A B c d -> BetS C c d -> TP A B C d.
Proof.
intros.
assert (Col C c d) by (conclude_def Col ).
assert (neq C c) by (forward_using lemma_betweennotequal).
assert (neq c d) by (forward_using lemma_betweennotequal).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)) by (conclude_def TP ).
let Tf:=fresh in assert (Tf:exists p q r, (Col A B p /\\ Col A B r /\\ BetS c p q /\\ BetS d r q /\\ nCol A B c /\\ nCol A B d)) by (conclude_def OS );destruct Tf as [p[q[r]]];spliter.
assert (BetS q r d) by (conclude axiom_betweennesssymmetry).
assert (Col C c d) by (conclude_def Col ).
assert (Col c d C) by (forward_using lemma_collinearorder).
assert (BetS d c C) by (conclude axiom_betweennesssymmetry).
assert (BetS q p c) by (conclude axiom_betweennesssymmetry).
assert (~ eq p r).
intro.
assert (Col q r d) by (conclude_def Col ).
assert (Col q p c) by (conclude_def Col ).
assert (Col q p d) by (conclude cn_equalitysub).
assert (neq q p) by (forward_using lemma_betweennotequal).
assert (Col p c d) by (conclude lemma_collinear4).
assert (Col c d p) by (forward_using lemma_collinearorder).

*****
H26 : Col c d p
H25 : Col p c d
H24 : neq q p
H23 : Col q p d
H22 : Col q p c
H21 : Col q r d
H20 : eq p r
H19 : BetS q p c
H18 : BetS d c C
H17 : Col c d C
H16 : Col C c d
H15 : BetS q r d
H11 : nCol A B d
H10 : nCol A B c
H9 : BetS d r q
H8 : BetS c p q
H7 : Col A B r
H6 : Col A B p
p,q,r : Point
H14 : OS c d A B
H13 : not (Meet A B c d)
H12 : neq c d
H5 : neq A B
H4 : neq C d
H3 : neq c d
H2 : neq C c
H1 : Col C c d
H0 : BetS C c d
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Meet A B c d) by (conclude_def Meet ).
-----
Lemma lemma_parallelcollinear1 : forall A B C c d, TP A B c d -> BetS C c d -> TP A B C d.
Proof.
intros.
assert (Col C c d) by (conclude_def Col ).
assert (neq C c) by (forward_using lemma_betweennotequal).
assert (neq c d) by (forward_using lemma_betweennotequal).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)) by (conclude_def TP ).
let Tf:=fresh in assert (Tf:exists p q r, (Col A B p /\\ Col A B r /\\ BetS c p q /\\ BetS d r q /\\ nCol A B c /\\ nCol A B d)) by (conclude_def OS );destruct Tf as [p[q[r]]];spliter.
assert (BetS q r d) by (conclude axiom_betweennesssymmetry).
assert (Col C c d) by (conclude_def Col ).
assert (Col c d C) by (forward_using lemma_collinearorder).
assert (BetS d c C) by (conclude axiom_betweennesssymmetry).
assert (BetS q p c) by (conclude axiom_betweennesssymmetry).
assert (~ eq p r).
intro.
assert (Col q r d) by (conclude_def Col ).
assert (Col q p c) by (conclude_def Col ).
assert (Col q p d) by (conclude cn_equalitysub).
assert (neq q p) by (forward_using lemma_betweennotequal).
assert (Col p c d) by (conclude lemma_collinear4).
assert (Col c d p) by (forward_using lemma_collinearorder).
assert (Meet A B c d) by (conclude_def Meet ).

*****
H27 : Meet A B c d
H26 : Col c d p
H25 : Col p c d
H24 : neq q p
H23 : Col q p d
H22 : Col q p c
H21 : Col q r d
H20 : eq p r
H19 : BetS q p c
H18 : BetS d c C
H17 : Col c d C
H16 : Col C c d
H15 : BetS q r d
H11 : nCol A B d
H10 : nCol A B c
H9 : BetS d r q
H8 : BetS c p q
H7 : Col A B r
H6 : Col A B p
p,q,r : Point
H14 : OS c d A B
H13 : not (Meet A B c d)
H12 : neq c d
H5 : neq A B
H4 : neq C d
H3 : neq c d
H2 : neq C c
H1 : Col C c d
H0 : BetS C c d
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma lemma_parallelcollinear1 : forall A B C c d, TP A B c d -> BetS C c d -> TP A B C d.
Proof.
intros.
assert (Col C c d) by (conclude_def Col ).
assert (neq C c) by (forward_using lemma_betweennotequal).
assert (neq c d) by (forward_using lemma_betweennotequal).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)) by (conclude_def TP ).
let Tf:=fresh in assert (Tf:exists p q r, (Col A B p /\\ Col A B r /\\ BetS c p q /\\ BetS d r q /\\ nCol A B c /\\ nCol A B d)) by (conclude_def OS );destruct Tf as [p[q[r]]];spliter.
assert (BetS q r d) by (conclude axiom_betweennesssymmetry).
assert (Col C c d) by (conclude_def Col ).
assert (Col c d C) by (forward_using lemma_collinearorder).
assert (BetS d c C) by (conclude axiom_betweennesssymmetry).
assert (BetS q p c) by (conclude axiom_betweennesssymmetry).
assert (~ eq p r).

*****
H20 : not (eq p r)
H19 : BetS q p c
H18 : BetS d c C
H17 : Col c d C
H16 : Col C c d
H15 : BetS q r d
H11 : nCol A B d
H10 : nCol A B c
H9 : BetS d r q
H8 : BetS c p q
H7 : Col A B r
H6 : Col A B p
p,q,r : Point
H14 : OS c d A B
H13 : not (Meet A B c d)
H12 : neq c d
H5 : neq A B
H4 : neq C d
H3 : neq c d
H2 : neq C c
H1 : Col C c d
H0 : BetS C c d
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
TP A B C d
+++++
assert (Col q p c) by (conclude_def Col ).
-----
Lemma lemma_parallelcollinear1 : forall A B C c d, TP A B c d -> BetS C c d -> TP A B C d.
Proof.
intros.
assert (Col C c d) by (conclude_def Col ).
assert (neq C c) by (forward_using lemma_betweennotequal).
assert (neq c d) by (forward_using lemma_betweennotequal).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)) by (conclude_def TP ).
let Tf:=fresh in assert (Tf:exists p q r, (Col A B p /\\ Col A B r /\\ BetS c p q /\\ BetS d r q /\\ nCol A B c /\\ nCol A B d)) by (conclude_def OS );destruct Tf as [p[q[r]]];spliter.
assert (BetS q r d) by (conclude axiom_betweennesssymmetry).
assert (Col C c d) by (conclude_def Col ).
assert (Col c d C) by (forward_using lemma_collinearorder).
assert (BetS d c C) by (conclude axiom_betweennesssymmetry).
assert (BetS q p c) by (conclude axiom_betweennesssymmetry).
assert (~ eq p r).
assert (Col q p c) by (conclude_def Col ).

*****
H21 : Col q p c
H20 : not (eq p r)
H19 : BetS q p c
H18 : BetS d c C
H17 : Col c d C
H16 : Col C c d
H15 : BetS q r d
H11 : nCol A B d
H10 : nCol A B c
H9 : BetS d r q
H8 : BetS c p q
H7 : Col A B r
H6 : Col A B p
p,q,r : Point
H14 : OS c d A B
H13 : not (Meet A B c d)
H12 : neq c d
H5 : neq A B
H4 : neq C d
H3 : neq c d
H2 : neq C c
H1 : Col C c d
H0 : BetS C c d
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
TP A B C d
+++++
assert (~ Col q d C).
-----
Lemma lemma_parallelcollinear1 : forall A B C c d, TP A B c d -> BetS C c d -> TP A B C d.
Proof.
intros.
assert (Col C c d) by (conclude_def Col ).
assert (neq C c) by (forward_using lemma_betweennotequal).
assert (neq c d) by (forward_using lemma_betweennotequal).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)) by (conclude_def TP ).
let Tf:=fresh in assert (Tf:exists p q r, (Col A B p /\\ Col A B r /\\ BetS c p q /\\ BetS d r q /\\ nCol A B c /\\ nCol A B d)) by (conclude_def OS );destruct Tf as [p[q[r]]];spliter.
assert (BetS q r d) by (conclude axiom_betweennesssymmetry).
assert (Col C c d) by (conclude_def Col ).
assert (Col c d C) by (forward_using lemma_collinearorder).
assert (BetS d c C) by (conclude axiom_betweennesssymmetry).
assert (BetS q p c) by (conclude axiom_betweennesssymmetry).
assert (~ eq p r).
assert (Col q p c) by (conclude_def Col ).
assert (~ Col q d C).

*****
H21 : Col q p c
H20 : not (eq p r)
H19 : BetS q p c
H18 : BetS d c C
H17 : Col c d C
H16 : Col C c d
H15 : BetS q r d
H11 : nCol A B d
H10 : nCol A B c
H9 : BetS d r q
H8 : BetS c p q
H7 : Col A B r
H6 : Col A B p
p,q,r : Point
H14 : OS c d A B
H13 : not (Meet A B c d)
H12 : neq c d
H5 : neq A B
H4 : neq C d
H3 : neq c d
H2 : neq C c
H1 : Col C c d
H0 : BetS C c d
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (Col q d C)
+++++
intro.
-----
Lemma lemma_parallelcollinear1 : forall A B C c d, TP A B c d -> BetS C c d -> TP A B C d.
Proof.
intros.
assert (Col C c d) by (conclude_def Col ).
assert (neq C c) by (forward_using lemma_betweennotequal).
assert (neq c d) by (forward_using lemma_betweennotequal).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)) by (conclude_def TP ).
let Tf:=fresh in assert (Tf:exists p q r, (Col A B p /\\ Col A B r /\\ BetS c p q /\\ BetS d r q /\\ nCol A B c /\\ nCol A B d)) by (conclude_def OS );destruct Tf as [p[q[r]]];spliter.
assert (BetS q r d) by (conclude axiom_betweennesssymmetry).
assert (Col C c d) by (conclude_def Col ).
assert (Col c d C) by (forward_using lemma_collinearorder).
assert (BetS d c C) by (conclude axiom_betweennesssymmetry).
assert (BetS q p c) by (conclude axiom_betweennesssymmetry).
assert (~ eq p r).
assert (Col q p c) by (conclude_def Col ).
assert (~ Col q d C).
intro.

*****
H22 : Col q d C
H21 : Col q p c
H20 : not (eq p r)
H19 : BetS q p c
H18 : BetS d c C
H17 : Col c d C
H16 : Col C c d
H15 : BetS q r d
H11 : nCol A B d
H10 : nCol A B c
H9 : BetS d r q
H8 : BetS c p q
H7 : Col A B r
H6 : Col A B p
p,q,r : Point
H14 : OS c d A B
H13 : not (Meet A B c d)
H12 : neq c d
H5 : neq A B
H4 : neq C d
H3 : neq c d
H2 : neq C c
H1 : Col C c d
H0 : BetS C c d
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col d c C) by (conclude_def Col ).
-----
Lemma lemma_parallelcollinear1 : forall A B C c d, TP A B c d -> BetS C c d -> TP A B C d.
Proof.
intros.
assert (Col C c d) by (conclude_def Col ).
assert (neq C c) by (forward_using lemma_betweennotequal).
assert (neq c d) by (forward_using lemma_betweennotequal).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)) by (conclude_def TP ).
let Tf:=fresh in assert (Tf:exists p q r, (Col A B p /\\ Col A B r /\\ BetS c p q /\\ BetS d r q /\\ nCol A B c /\\ nCol A B d)) by (conclude_def OS );destruct Tf as [p[q[r]]];spliter.
assert (BetS q r d) by (conclude axiom_betweennesssymmetry).
assert (Col C c d) by (conclude_def Col ).
assert (Col c d C) by (forward_using lemma_collinearorder).
assert (BetS d c C) by (conclude axiom_betweennesssymmetry).
assert (BetS q p c) by (conclude axiom_betweennesssymmetry).
assert (~ eq p r).
assert (Col q p c) by (conclude_def Col ).
assert (~ Col q d C).
intro.
assert (Col d c C) by (conclude_def Col ).

*****
H23 : Col d c C
H22 : Col q d C
H21 : Col q p c
H20 : not (eq p r)
H19 : BetS q p c
H18 : BetS d c C
H17 : Col c d C
H16 : Col C c d
H15 : BetS q r d
H11 : nCol A B d
H10 : nCol A B c
H9 : BetS d r q
H8 : BetS c p q
H7 : Col A B r
H6 : Col A B p
p,q,r : Point
H14 : OS c d A B
H13 : not (Meet A B c d)
H12 : neq c d
H5 : neq A B
H4 : neq C d
H3 : neq c d
H2 : neq C c
H1 : Col C c d
H0 : BetS C c d
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col C d c) by (forward_using lemma_collinearorder).
-----
Lemma lemma_parallelcollinear1 : forall A B C c d, TP A B c d -> BetS C c d -> TP A B C d.
Proof.
intros.
assert (Col C c d) by (conclude_def Col ).
assert (neq C c) by (forward_using lemma_betweennotequal).
assert (neq c d) by (forward_using lemma_betweennotequal).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)) by (conclude_def TP ).
let Tf:=fresh in assert (Tf:exists p q r, (Col A B p /\\ Col A B r /\\ BetS c p q /\\ BetS d r q /\\ nCol A B c /\\ nCol A B d)) by (conclude_def OS );destruct Tf as [p[q[r]]];spliter.
assert (BetS q r d) by (conclude axiom_betweennesssymmetry).
assert (Col C c d) by (conclude_def Col ).
assert (Col c d C) by (forward_using lemma_collinearorder).
assert (BetS d c C) by (conclude axiom_betweennesssymmetry).
assert (BetS q p c) by (conclude axiom_betweennesssymmetry).
assert (~ eq p r).
assert (Col q p c) by (conclude_def Col ).
assert (~ Col q d C).
intro.
assert (Col d c C) by (conclude_def Col ).
assert (Col C d c) by (forward_using lemma_collinearorder).

*****
H24 : Col C d c
H23 : Col d c C
H22 : Col q d C
H21 : Col q p c
H20 : not (eq p r)
H19 : BetS q p c
H18 : BetS d c C
H17 : Col c d C
H16 : Col C c d
H15 : BetS q r d
H11 : nCol A B d
H10 : nCol A B c
H9 : BetS d r q
H8 : BetS c p q
H7 : Col A B r
H6 : Col A B p
p,q,r : Point
H14 : OS c d A B
H13 : not (Meet A B c d)
H12 : neq c d
H5 : neq A B
H4 : neq C d
H3 : neq c d
H2 : neq C c
H1 : Col C c d
H0 : BetS C c d
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col C d q) by (forward_using lemma_collinearorder).
-----
Lemma lemma_parallelcollinear1 : forall A B C c d, TP A B c d -> BetS C c d -> TP A B C d.
Proof.
intros.
assert (Col C c d) by (conclude_def Col ).
assert (neq C c) by (forward_using lemma_betweennotequal).
assert (neq c d) by (forward_using lemma_betweennotequal).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)) by (conclude_def TP ).
let Tf:=fresh in assert (Tf:exists p q r, (Col A B p /\\ Col A B r /\\ BetS c p q /\\ BetS d r q /\\ nCol A B c /\\ nCol A B d)) by (conclude_def OS );destruct Tf as [p[q[r]]];spliter.
assert (BetS q r d) by (conclude axiom_betweennesssymmetry).
assert (Col C c d) by (conclude_def Col ).
assert (Col c d C) by (forward_using lemma_collinearorder).
assert (BetS d c C) by (conclude axiom_betweennesssymmetry).
assert (BetS q p c) by (conclude axiom_betweennesssymmetry).
assert (~ eq p r).
assert (Col q p c) by (conclude_def Col ).
assert (~ Col q d C).
intro.
assert (Col d c C) by (conclude_def Col ).
assert (Col C d c) by (forward_using lemma_collinearorder).
assert (Col C d q) by (forward_using lemma_collinearorder).

*****
H25 : Col C d q
H24 : Col C d c
H23 : Col d c C
H22 : Col q d C
H21 : Col q p c
H20 : not (eq p r)
H19 : BetS q p c
H18 : BetS d c C
H17 : Col c d C
H16 : Col C c d
H15 : BetS q r d
H11 : nCol A B d
H10 : nCol A B c
H9 : BetS d r q
H8 : BetS c p q
H7 : Col A B r
H6 : Col A B p
p,q,r : Point
H14 : OS c d A B
H13 : not (Meet A B c d)
H12 : neq c d
H5 : neq A B
H4 : neq C d
H3 : neq c d
H2 : neq C c
H1 : Col C c d
H0 : BetS C c d
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (neq C d) by (forward_using lemma_betweennotequal).
-----
Lemma lemma_parallelcollinear1 : forall A B C c d, TP A B c d -> BetS C c d -> TP A B C d.
Proof.
intros.
assert (Col C c d) by (conclude_def Col ).
assert (neq C c) by (forward_using lemma_betweennotequal).
assert (neq c d) by (forward_using lemma_betweennotequal).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)) by (conclude_def TP ).
let Tf:=fresh in assert (Tf:exists p q r, (Col A B p /\\ Col A B r /\\ BetS c p q /\\ BetS d r q /\\ nCol A B c /\\ nCol A B d)) by (conclude_def OS );destruct Tf as [p[q[r]]];spliter.
assert (BetS q r d) by (conclude axiom_betweennesssymmetry).
assert (Col C c d) by (conclude_def Col ).
assert (Col c d C) by (forward_using lemma_collinearorder).
assert (BetS d c C) by (conclude axiom_betweennesssymmetry).
assert (BetS q p c) by (conclude axiom_betweennesssymmetry).
assert (~ eq p r).
assert (Col q p c) by (conclude_def Col ).
assert (~ Col q d C).
intro.
assert (Col d c C) by (conclude_def Col ).
assert (Col C d c) by (forward_using lemma_collinearorder).
assert (Col C d q) by (forward_using lemma_collinearorder).
assert (neq C d) by (forward_using lemma_betweennotequal).

*****
H26 : neq C d
H25 : Col C d q
H24 : Col C d c
H23 : Col d c C
H22 : Col q d C
H21 : Col q p c
H20 : not (eq p r)
H19 : BetS q p c
H18 : BetS d c C
H17 : Col c d C
H16 : Col C c d
H15 : BetS q r d
H11 : nCol A B d
H10 : nCol A B c
H9 : BetS d r q
H8 : BetS c p q
H7 : Col A B r
H6 : Col A B p
p,q,r : Point
H14 : OS c d A B
H13 : not (Meet A B c d)
H12 : neq c d
H5 : neq A B
H4 : neq C d
H3 : neq c d
H2 : neq C c
H1 : Col C c d
H0 : BetS C c d
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col d c q) by (conclude lemma_collinear4).
-----
Lemma lemma_parallelcollinear1 : forall A B C c d, TP A B c d -> BetS C c d -> TP A B C d.
Proof.
intros.
assert (Col C c d) by (conclude_def Col ).
assert (neq C c) by (forward_using lemma_betweennotequal).
assert (neq c d) by (forward_using lemma_betweennotequal).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)) by (conclude_def TP ).
let Tf:=fresh in assert (Tf:exists p q r, (Col A B p /\\ Col A B r /\\ BetS c p q /\\ BetS d r q /\\ nCol A B c /\\ nCol A B d)) by (conclude_def OS );destruct Tf as [p[q[r]]];spliter.
assert (BetS q r d) by (conclude axiom_betweennesssymmetry).
assert (Col C c d) by (conclude_def Col ).
assert (Col c d C) by (forward_using lemma_collinearorder).
assert (BetS d c C) by (conclude axiom_betweennesssymmetry).
assert (BetS q p c) by (conclude axiom_betweennesssymmetry).
assert (~ eq p r).
assert (Col q p c) by (conclude_def Col ).
assert (~ Col q d C).
intro.
assert (Col d c C) by (conclude_def Col ).
assert (Col C d c) by (forward_using lemma_collinearorder).
assert (Col C d q) by (forward_using lemma_collinearorder).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert (Col d c q) by (conclude lemma_collinear4).

*****
H27 : Col d c q
H26 : neq C d
H25 : Col C d q
H24 : Col C d c
H23 : Col d c C
H22 : Col q d C
H21 : Col q p c
H20 : not (eq p r)
H19 : BetS q p c
H18 : BetS d c C
H17 : Col c d C
H16 : Col C c d
H15 : BetS q r d
H11 : nCol A B d
H10 : nCol A B c
H9 : BetS d r q
H8 : BetS c p q
H7 : Col A B r
H6 : Col A B p
p,q,r : Point
H14 : OS c d A B
H13 : not (Meet A B c d)
H12 : neq c d
H5 : neq A B
H4 : neq C d
H3 : neq c d
H2 : neq C c
H1 : Col C c d
H0 : BetS C c d
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col c q d) by (forward_using lemma_collinearorder).
-----
Lemma lemma_parallelcollinear1 : forall A B C c d, TP A B c d -> BetS C c d -> TP A B C d.
Proof.
intros.
assert (Col C c d) by (conclude_def Col ).
assert (neq C c) by (forward_using lemma_betweennotequal).
assert (neq c d) by (forward_using lemma_betweennotequal).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)) by (conclude_def TP ).
let Tf:=fresh in assert (Tf:exists p q r, (Col A B p /\\ Col A B r /\\ BetS c p q /\\ BetS d r q /\\ nCol A B c /\\ nCol A B d)) by (conclude_def OS );destruct Tf as [p[q[r]]];spliter.
assert (BetS q r d) by (conclude axiom_betweennesssymmetry).
assert (Col C c d) by (conclude_def Col ).
assert (Col c d C) by (forward_using lemma_collinearorder).
assert (BetS d c C) by (conclude axiom_betweennesssymmetry).
assert (BetS q p c) by (conclude axiom_betweennesssymmetry).
assert (~ eq p r).
assert (Col q p c) by (conclude_def Col ).
assert (~ Col q d C).
intro.
assert (Col d c C) by (conclude_def Col ).
assert (Col C d c) by (forward_using lemma_collinearorder).
assert (Col C d q) by (forward_using lemma_collinearorder).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert (Col d c q) by (conclude lemma_collinear4).
assert (Col c q d) by (forward_using lemma_collinearorder).

*****
H28 : Col c q d
H27 : Col d c q
H26 : neq C d
H25 : Col C d q
H24 : Col C d c
H23 : Col d c C
H22 : Col q d C
H21 : Col q p c
H20 : not (eq p r)
H19 : BetS q p c
H18 : BetS d c C
H17 : Col c d C
H16 : Col C c d
H15 : BetS q r d
H11 : nCol A B d
H10 : nCol A B c
H9 : BetS d r q
H8 : BetS c p q
H7 : Col A B r
H6 : Col A B p
p,q,r : Point
H14 : OS c d A B
H13 : not (Meet A B c d)
H12 : neq c d
H5 : neq A B
H4 : neq C d
H3 : neq c d
H2 : neq C c
H1 : Col C c d
H0 : BetS C c d
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col c q p) by (forward_using lemma_collinearorder).
-----
Lemma lemma_parallelcollinear1 : forall A B C c d, TP A B c d -> BetS C c d -> TP A B C d.
Proof.
intros.
assert (Col C c d) by (conclude_def Col ).
assert (neq C c) by (forward_using lemma_betweennotequal).
assert (neq c d) by (forward_using lemma_betweennotequal).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)) by (conclude_def TP ).
let Tf:=fresh in assert (Tf:exists p q r, (Col A B p /\\ Col A B r /\\ BetS c p q /\\ BetS d r q /\\ nCol A B c /\\ nCol A B d)) by (conclude_def OS );destruct Tf as [p[q[r]]];spliter.
assert (BetS q r d) by (conclude axiom_betweennesssymmetry).
assert (Col C c d) by (conclude_def Col ).
assert (Col c d C) by (forward_using lemma_collinearorder).
assert (BetS d c C) by (conclude axiom_betweennesssymmetry).
assert (BetS q p c) by (conclude axiom_betweennesssymmetry).
assert (~ eq p r).
assert (Col q p c) by (conclude_def Col ).
assert (~ Col q d C).
intro.
assert (Col d c C) by (conclude_def Col ).
assert (Col C d c) by (forward_using lemma_collinearorder).
assert (Col C d q) by (forward_using lemma_collinearorder).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert (Col d c q) by (conclude lemma_collinear4).
assert (Col c q d) by (forward_using lemma_collinearorder).
assert (Col c q p) by (forward_using lemma_collinearorder).

*****
H29 : Col c q p
H28 : Col c q d
H27 : Col d c q
H26 : neq C d
H25 : Col C d q
H24 : Col C d c
H23 : Col d c C
H22 : Col q d C
H21 : Col q p c
H20 : not (eq p r)
H19 : BetS q p c
H18 : BetS d c C
H17 : Col c d C
H16 : Col C c d
H15 : BetS q r d
H11 : nCol A B d
H10 : nCol A B c
H9 : BetS d r q
H8 : BetS c p q
H7 : Col A B r
H6 : Col A B p
p,q,r : Point
H14 : OS c d A B
H13 : not (Meet A B c d)
H12 : neq c d
H5 : neq A B
H4 : neq C d
H3 : neq c d
H2 : neq C c
H1 : Col C c d
H0 : BetS C c d
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (neq q c) by (forward_using lemma_betweennotequal).
-----
Lemma lemma_parallelcollinear1 : forall A B C c d, TP A B c d -> BetS C c d -> TP A B C d.
Proof.
intros.
assert (Col C c d) by (conclude_def Col ).
assert (neq C c) by (forward_using lemma_betweennotequal).
assert (neq c d) by (forward_using lemma_betweennotequal).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)) by (conclude_def TP ).
let Tf:=fresh in assert (Tf:exists p q r, (Col A B p /\\ Col A B r /\\ BetS c p q /\\ BetS d r q /\\ nCol A B c /\\ nCol A B d)) by (conclude_def OS );destruct Tf as [p[q[r]]];spliter.
assert (BetS q r d) by (conclude axiom_betweennesssymmetry).
assert (Col C c d) by (conclude_def Col ).
assert (Col c d C) by (forward_using lemma_collinearorder).
assert (BetS d c C) by (conclude axiom_betweennesssymmetry).
assert (BetS q p c) by (conclude axiom_betweennesssymmetry).
assert (~ eq p r).
assert (Col q p c) by (conclude_def Col ).
assert (~ Col q d C).
intro.
assert (Col d c C) by (conclude_def Col ).
assert (Col C d c) by (forward_using lemma_collinearorder).
assert (Col C d q) by (forward_using lemma_collinearorder).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert (Col d c q) by (conclude lemma_collinear4).
assert (Col c q d) by (forward_using lemma_collinearorder).
assert (Col c q p) by (forward_using lemma_collinearorder).
assert (neq q c) by (forward_using lemma_betweennotequal).

*****
H30 : neq q c
H29 : Col c q p
H28 : Col c q d
H27 : Col d c q
H26 : neq C d
H25 : Col C d q
H24 : Col C d c
H23 : Col d c C
H22 : Col q d C
H21 : Col q p c
H20 : not (eq p r)
H19 : BetS q p c
H18 : BetS d c C
H17 : Col c d C
H16 : Col C c d
H15 : BetS q r d
H11 : nCol A B d
H10 : nCol A B c
H9 : BetS d r q
H8 : BetS c p q
H7 : Col A B r
H6 : Col A B p
p,q,r : Point
H14 : OS c d A B
H13 : not (Meet A B c d)
H12 : neq c d
H5 : neq A B
H4 : neq C d
H3 : neq c d
H2 : neq C c
H1 : Col C c d
H0 : BetS C c d
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (neq c q) by (conclude lemma_inequalitysymmetric).
-----
Lemma lemma_parallelcollinear1 : forall A B C c d, TP A B c d -> BetS C c d -> TP A B C d.
Proof.
intros.
assert (Col C c d) by (conclude_def Col ).
assert (neq C c) by (forward_using lemma_betweennotequal).
assert (neq c d) by (forward_using lemma_betweennotequal).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)) by (conclude_def TP ).
let Tf:=fresh in assert (Tf:exists p q r, (Col A B p /\\ Col A B r /\\ BetS c p q /\\ BetS d r q /\\ nCol A B c /\\ nCol A B d)) by (conclude_def OS );destruct Tf as [p[q[r]]];spliter.
assert (BetS q r d) by (conclude axiom_betweennesssymmetry).
assert (Col C c d) by (conclude_def Col ).
assert (Col c d C) by (forward_using lemma_collinearorder).
assert (BetS d c C) by (conclude axiom_betweennesssymmetry).
assert (BetS q p c) by (conclude axiom_betweennesssymmetry).
assert (~ eq p r).
assert (Col q p c) by (conclude_def Col ).
assert (~ Col q d C).
intro.
assert (Col d c C) by (conclude_def Col ).
assert (Col C d c) by (forward_using lemma_collinearorder).
assert (Col C d q) by (forward_using lemma_collinearorder).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert (Col d c q) by (conclude lemma_collinear4).
assert (Col c q d) by (forward_using lemma_collinearorder).
assert (Col c q p) by (forward_using lemma_collinearorder).
assert (neq q c) by (forward_using lemma_betweennotequal).
assert (neq c q) by (conclude lemma_inequalitysymmetric).

*****
H31 : neq c q
H30 : neq q c
H29 : Col c q p
H28 : Col c q d
H27 : Col d c q
H26 : neq C d
H25 : Col C d q
H24 : Col C d c
H23 : Col d c C
H22 : Col q d C
H21 : Col q p c
H20 : not (eq p r)
H19 : BetS q p c
H18 : BetS d c C
H17 : Col c d C
H16 : Col C c d
H15 : BetS q r d
H11 : nCol A B d
H10 : nCol A B c
H9 : BetS d r q
H8 : BetS c p q
H7 : Col A B r
H6 : Col A B p
p,q,r : Point
H14 : OS c d A B
H13 : not (Meet A B c d)
H12 : neq c d
H5 : neq A B
H4 : neq C d
H3 : neq c d
H2 : neq C c
H1 : Col C c d
H0 : BetS C c d
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col q d p) by (conclude lemma_collinear4).
-----
Lemma lemma_parallelcollinear1 : forall A B C c d, TP A B c d -> BetS C c d -> TP A B C d.
Proof.
intros.
assert (Col C c d) by (conclude_def Col ).
assert (neq C c) by (forward_using lemma_betweennotequal).
assert (neq c d) by (forward_using lemma_betweennotequal).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)) by (conclude_def TP ).
let Tf:=fresh in assert (Tf:exists p q r, (Col A B p /\\ Col A B r /\\ BetS c p q /\\ BetS d r q /\\ nCol A B c /\\ nCol A B d)) by (conclude_def OS );destruct Tf as [p[q[r]]];spliter.
assert (BetS q r d) by (conclude axiom_betweennesssymmetry).
assert (Col C c d) by (conclude_def Col ).
assert (Col c d C) by (forward_using lemma_collinearorder).
assert (BetS d c C) by (conclude axiom_betweennesssymmetry).
assert (BetS q p c) by (conclude axiom_betweennesssymmetry).
assert (~ eq p r).
assert (Col q p c) by (conclude_def Col ).
assert (~ Col q d C).
intro.
assert (Col d c C) by (conclude_def Col ).
assert (Col C d c) by (forward_using lemma_collinearorder).
assert (Col C d q) by (forward_using lemma_collinearorder).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert (Col d c q) by (conclude lemma_collinear4).
assert (Col c q d) by (forward_using lemma_collinearorder).
assert (Col c q p) by (forward_using lemma_collinearorder).
assert (neq q c) by (forward_using lemma_betweennotequal).
assert (neq c q) by (conclude lemma_inequalitysymmetric).
assert (Col q d p) by (conclude lemma_collinear4).

*****
H32 : Col q d p
H31 : neq c q
H30 : neq q c
H29 : Col c q p
H28 : Col c q d
H27 : Col d c q
H26 : neq C d
H25 : Col C d q
H24 : Col C d c
H23 : Col d c C
H22 : Col q d C
H21 : Col q p c
H20 : not (eq p r)
H19 : BetS q p c
H18 : BetS d c C
H17 : Col c d C
H16 : Col C c d
H15 : BetS q r d
H11 : nCol A B d
H10 : nCol A B c
H9 : BetS d r q
H8 : BetS c p q
H7 : Col A B r
H6 : Col A B p
p,q,r : Point
H14 : OS c d A B
H13 : not (Meet A B c d)
H12 : neq c d
H5 : neq A B
H4 : neq C d
H3 : neq c d
H2 : neq C c
H1 : Col C c d
H0 : BetS C c d
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col q r d) by (conclude_def Col ).
-----
Lemma lemma_parallelcollinear1 : forall A B C c d, TP A B c d -> BetS C c d -> TP A B C d.
Proof.
intros.
assert (Col C c d) by (conclude_def Col ).
assert (neq C c) by (forward_using lemma_betweennotequal).
assert (neq c d) by (forward_using lemma_betweennotequal).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)) by (conclude_def TP ).
let Tf:=fresh in assert (Tf:exists p q r, (Col A B p /\\ Col A B r /\\ BetS c p q /\\ BetS d r q /\\ nCol A B c /\\ nCol A B d)) by (conclude_def OS );destruct Tf as [p[q[r]]];spliter.
assert (BetS q r d) by (conclude axiom_betweennesssymmetry).
assert (Col C c d) by (conclude_def Col ).
assert (Col c d C) by (forward_using lemma_collinearorder).
assert (BetS d c C) by (conclude axiom_betweennesssymmetry).
assert (BetS q p c) by (conclude axiom_betweennesssymmetry).
assert (~ eq p r).
assert (Col q p c) by (conclude_def Col ).
assert (~ Col q d C).
intro.
assert (Col d c C) by (conclude_def Col ).
assert (Col C d c) by (forward_using lemma_collinearorder).
assert (Col C d q) by (forward_using lemma_collinearorder).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert (Col d c q) by (conclude lemma_collinear4).
assert (Col c q d) by (forward_using lemma_collinearorder).
assert (Col c q p) by (forward_using lemma_collinearorder).
assert (neq q c) by (forward_using lemma_betweennotequal).
assert (neq c q) by (conclude lemma_inequalitysymmetric).
assert (Col q d p) by (conclude lemma_collinear4).
assert (Col q r d) by (conclude_def Col ).

*****
H33 : Col q r d
H32 : Col q d p
H31 : neq c q
H30 : neq q c
H29 : Col c q p
H28 : Col c q d
H27 : Col d c q
H26 : neq C d
H25 : Col C d q
H24 : Col C d c
H23 : Col d c C
H22 : Col q d C
H21 : Col q p c
H20 : not (eq p r)
H19 : BetS q p c
H18 : BetS d c C
H17 : Col c d C
H16 : Col C c d
H15 : BetS q r d
H11 : nCol A B d
H10 : nCol A B c
H9 : BetS d r q
H8 : BetS c p q
H7 : Col A B r
H6 : Col A B p
p,q,r : Point
H14 : OS c d A B
H13 : not (Meet A B c d)
H12 : neq c d
H5 : neq A B
H4 : neq C d
H3 : neq c d
H2 : neq C c
H1 : Col C c d
H0 : BetS C c d
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col q d r) by (forward_using lemma_collinearorder).
-----
Lemma lemma_parallelcollinear1 : forall A B C c d, TP A B c d -> BetS C c d -> TP A B C d.
Proof.
intros.
assert (Col C c d) by (conclude_def Col ).
assert (neq C c) by (forward_using lemma_betweennotequal).
assert (neq c d) by (forward_using lemma_betweennotequal).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)) by (conclude_def TP ).
let Tf:=fresh in assert (Tf:exists p q r, (Col A B p /\\ Col A B r /\\ BetS c p q /\\ BetS d r q /\\ nCol A B c /\\ nCol A B d)) by (conclude_def OS );destruct Tf as [p[q[r]]];spliter.
assert (BetS q r d) by (conclude axiom_betweennesssymmetry).
assert (Col C c d) by (conclude_def Col ).
assert (Col c d C) by (forward_using lemma_collinearorder).
assert (BetS d c C) by (conclude axiom_betweennesssymmetry).
assert (BetS q p c) by (conclude axiom_betweennesssymmetry).
assert (~ eq p r).
assert (Col q p c) by (conclude_def Col ).
assert (~ Col q d C).
intro.
assert (Col d c C) by (conclude_def Col ).
assert (Col C d c) by (forward_using lemma_collinearorder).
assert (Col C d q) by (forward_using lemma_collinearorder).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert (Col d c q) by (conclude lemma_collinear4).
assert (Col c q d) by (forward_using lemma_collinearorder).
assert (Col c q p) by (forward_using lemma_collinearorder).
assert (neq q c) by (forward_using lemma_betweennotequal).
assert (neq c q) by (conclude lemma_inequalitysymmetric).
assert (Col q d p) by (conclude lemma_collinear4).
assert (Col q r d) by (conclude_def Col ).
assert (Col q d r) by (forward_using lemma_collinearorder).

*****
H34 : Col q d r
H33 : Col q r d
H32 : Col q d p
H31 : neq c q
H30 : neq q c
H29 : Col c q p
H28 : Col c q d
H27 : Col d c q
H26 : neq C d
H25 : Col C d q
H24 : Col C d c
H23 : Col d c C
H22 : Col q d C
H21 : Col q p c
H20 : not (eq p r)
H19 : BetS q p c
H18 : BetS d c C
H17 : Col c d C
H16 : Col C c d
H15 : BetS q r d
H11 : nCol A B d
H10 : nCol A B c
H9 : BetS d r q
H8 : BetS c p q
H7 : Col A B r
H6 : Col A B p
p,q,r : Point
H14 : OS c d A B
H13 : not (Meet A B c d)
H12 : neq c d
H5 : neq A B
H4 : neq C d
H3 : neq c d
H2 : neq C c
H1 : Col C c d
H0 : BetS C c d
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (neq q d) by (forward_using lemma_betweennotequal).
-----
Lemma lemma_parallelcollinear1 : forall A B C c d, TP A B c d -> BetS C c d -> TP A B C d.
Proof.
intros.
assert (Col C c d) by (conclude_def Col ).
assert (neq C c) by (forward_using lemma_betweennotequal).
assert (neq c d) by (forward_using lemma_betweennotequal).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)) by (conclude_def TP ).
let Tf:=fresh in assert (Tf:exists p q r, (Col A B p /\\ Col A B r /\\ BetS c p q /\\ BetS d r q /\\ nCol A B c /\\ nCol A B d)) by (conclude_def OS );destruct Tf as [p[q[r]]];spliter.
assert (BetS q r d) by (conclude axiom_betweennesssymmetry).
assert (Col C c d) by (conclude_def Col ).
assert (Col c d C) by (forward_using lemma_collinearorder).
assert (BetS d c C) by (conclude axiom_betweennesssymmetry).
assert (BetS q p c) by (conclude axiom_betweennesssymmetry).
assert (~ eq p r).
assert (Col q p c) by (conclude_def Col ).
assert (~ Col q d C).
intro.
assert (Col d c C) by (conclude_def Col ).
assert (Col C d c) by (forward_using lemma_collinearorder).
assert (Col C d q) by (forward_using lemma_collinearorder).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert (Col d c q) by (conclude lemma_collinear4).
assert (Col c q d) by (forward_using lemma_collinearorder).
assert (Col c q p) by (forward_using lemma_collinearorder).
assert (neq q c) by (forward_using lemma_betweennotequal).
assert (neq c q) by (conclude lemma_inequalitysymmetric).
assert (Col q d p) by (conclude lemma_collinear4).
assert (Col q r d) by (conclude_def Col ).
assert (Col q d r) by (forward_using lemma_collinearorder).
assert (neq q d) by (forward_using lemma_betweennotequal).

*****
H35 : neq q d
H34 : Col q d r
H33 : Col q r d
H32 : Col q d p
H31 : neq c q
H30 : neq q c
H29 : Col c q p
H28 : Col c q d
H27 : Col d c q
H26 : neq C d
H25 : Col C d q
H24 : Col C d c
H23 : Col d c C
H22 : Col q d C
H21 : Col q p c
H20 : not (eq p r)
H19 : BetS q p c
H18 : BetS d c C
H17 : Col c d C
H16 : Col C c d
H15 : BetS q r d
H11 : nCol A B d
H10 : nCol A B c
H9 : BetS d r q
H8 : BetS c p q
H7 : Col A B r
H6 : Col A B p
p,q,r : Point
H14 : OS c d A B
H13 : not (Meet A B c d)
H12 : neq c d
H5 : neq A B
H4 : neq C d
H3 : neq c d
H2 : neq C c
H1 : Col C c d
H0 : BetS C c d
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col d p r) by (conclude lemma_collinear4).
-----
Lemma lemma_parallelcollinear1 : forall A B C c d, TP A B c d -> BetS C c d -> TP A B C d.
Proof.
intros.
assert (Col C c d) by (conclude_def Col ).
assert (neq C c) by (forward_using lemma_betweennotequal).
assert (neq c d) by (forward_using lemma_betweennotequal).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)) by (conclude_def TP ).
let Tf:=fresh in assert (Tf:exists p q r, (Col A B p /\\ Col A B r /\\ BetS c p q /\\ BetS d r q /\\ nCol A B c /\\ nCol A B d)) by (conclude_def OS );destruct Tf as [p[q[r]]];spliter.
assert (BetS q r d) by (conclude axiom_betweennesssymmetry).
assert (Col C c d) by (conclude_def Col ).
assert (Col c d C) by (forward_using lemma_collinearorder).
assert (BetS d c C) by (conclude axiom_betweennesssymmetry).
assert (BetS q p c) by (conclude axiom_betweennesssymmetry).
assert (~ eq p r).
assert (Col q p c) by (conclude_def Col ).
assert (~ Col q d C).
intro.
assert (Col d c C) by (conclude_def Col ).
assert (Col C d c) by (forward_using lemma_collinearorder).
assert (Col C d q) by (forward_using lemma_collinearorder).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert (Col d c q) by (conclude lemma_collinear4).
assert (Col c q d) by (forward_using lemma_collinearorder).
assert (Col c q p) by (forward_using lemma_collinearorder).
assert (neq q c) by (forward_using lemma_betweennotequal).
assert (neq c q) by (conclude lemma_inequalitysymmetric).
assert (Col q d p) by (conclude lemma_collinear4).
assert (Col q r d) by (conclude_def Col ).
assert (Col q d r) by (forward_using lemma_collinearorder).
assert (neq q d) by (forward_using lemma_betweennotequal).
assert (Col d p r) by (conclude lemma_collinear4).

*****
H36 : Col d p r
H35 : neq q d
H34 : Col q d r
H33 : Col q r d
H32 : Col q d p
H31 : neq c q
H30 : neq q c
H29 : Col c q p
H28 : Col c q d
H27 : Col d c q
H26 : neq C d
H25 : Col C d q
H24 : Col C d c
H23 : Col d c C
H22 : Col q d C
H21 : Col q p c
H20 : not (eq p r)
H19 : BetS q p c
H18 : BetS d c C
H17 : Col c d C
H16 : Col C c d
H15 : BetS q r d
H11 : nCol A B d
H10 : nCol A B c
H9 : BetS d r q
H8 : BetS c p q
H7 : Col A B r
H6 : Col A B p
p,q,r : Point
H14 : OS c d A B
H13 : not (Meet A B c d)
H12 : neq c d
H5 : neq A B
H4 : neq C d
H3 : neq c d
H2 : neq C c
H1 : Col C c d
H0 : BetS C c d
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col B p r) by (conclude lemma_collinear4).
-----
Lemma lemma_parallelcollinear1 : forall A B C c d, TP A B c d -> BetS C c d -> TP A B C d.
Proof.
intros.
assert (Col C c d) by (conclude_def Col ).
assert (neq C c) by (forward_using lemma_betweennotequal).
assert (neq c d) by (forward_using lemma_betweennotequal).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)) by (conclude_def TP ).
let Tf:=fresh in assert (Tf:exists p q r, (Col A B p /\\ Col A B r /\\ BetS c p q /\\ BetS d r q /\\ nCol A B c /\\ nCol A B d)) by (conclude_def OS );destruct Tf as [p[q[r]]];spliter.
assert (BetS q r d) by (conclude axiom_betweennesssymmetry).
assert (Col C c d) by (conclude_def Col ).
assert (Col c d C) by (forward_using lemma_collinearorder).
assert (BetS d c C) by (conclude axiom_betweennesssymmetry).
assert (BetS q p c) by (conclude axiom_betweennesssymmetry).
assert (~ eq p r).
assert (Col q p c) by (conclude_def Col ).
assert (~ Col q d C).
intro.
assert (Col d c C) by (conclude_def Col ).
assert (Col C d c) by (forward_using lemma_collinearorder).
assert (Col C d q) by (forward_using lemma_collinearorder).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert (Col d c q) by (conclude lemma_collinear4).
assert (Col c q d) by (forward_using lemma_collinearorder).
assert (Col c q p) by (forward_using lemma_collinearorder).
assert (neq q c) by (forward_using lemma_betweennotequal).
assert (neq c q) by (conclude lemma_inequalitysymmetric).
assert (Col q d p) by (conclude lemma_collinear4).
assert (Col q r d) by (conclude_def Col ).
assert (Col q d r) by (forward_using lemma_collinearorder).
assert (neq q d) by (forward_using lemma_betweennotequal).
assert (Col d p r) by (conclude lemma_collinear4).
assert (Col B p r) by (conclude lemma_collinear4).

*****
H37 : Col B p r
H36 : Col d p r
H35 : neq q d
H34 : Col q d r
H33 : Col q r d
H32 : Col q d p
H31 : neq c q
H30 : neq q c
H29 : Col c q p
H28 : Col c q d
H27 : Col d c q
H26 : neq C d
H25 : Col C d q
H24 : Col C d c
H23 : Col d c C
H22 : Col q d C
H21 : Col q p c
H20 : not (eq p r)
H19 : BetS q p c
H18 : BetS d c C
H17 : Col c d C
H16 : Col C c d
H15 : BetS q r d
H11 : nCol A B d
H10 : nCol A B c
H9 : BetS d r q
H8 : BetS c p q
H7 : Col A B r
H6 : Col A B p
p,q,r : Point
H14 : OS c d A B
H13 : not (Meet A B c d)
H12 : neq c d
H5 : neq A B
H4 : neq C d
H3 : neq c d
H2 : neq C c
H1 : Col C c d
H0 : BetS C c d
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col B A p) by (forward_using lemma_collinearorder).
-----
Lemma lemma_parallelcollinear1 : forall A B C c d, TP A B c d -> BetS C c d -> TP A B C d.
Proof.
intros.
assert (Col C c d) by (conclude_def Col ).
assert (neq C c) by (forward_using lemma_betweennotequal).
assert (neq c d) by (forward_using lemma_betweennotequal).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)) by (conclude_def TP ).
let Tf:=fresh in assert (Tf:exists p q r, (Col A B p /\\ Col A B r /\\ BetS c p q /\\ BetS d r q /\\ nCol A B c /\\ nCol A B d)) by (conclude_def OS );destruct Tf as [p[q[r]]];spliter.
assert (BetS q r d) by (conclude axiom_betweennesssymmetry).
assert (Col C c d) by (conclude_def Col ).
assert (Col c d C) by (forward_using lemma_collinearorder).
assert (BetS d c C) by (conclude axiom_betweennesssymmetry).
assert (BetS q p c) by (conclude axiom_betweennesssymmetry).
assert (~ eq p r).
assert (Col q p c) by (conclude_def Col ).
assert (~ Col q d C).
intro.
assert (Col d c C) by (conclude_def Col ).
assert (Col C d c) by (forward_using lemma_collinearorder).
assert (Col C d q) by (forward_using lemma_collinearorder).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert (Col d c q) by (conclude lemma_collinear4).
assert (Col c q d) by (forward_using lemma_collinearorder).
assert (Col c q p) by (forward_using lemma_collinearorder).
assert (neq q c) by (forward_using lemma_betweennotequal).
assert (neq c q) by (conclude lemma_inequalitysymmetric).
assert (Col q d p) by (conclude lemma_collinear4).
assert (Col q r d) by (conclude_def Col ).
assert (Col q d r) by (forward_using lemma_collinearorder).
assert (neq q d) by (forward_using lemma_betweennotequal).
assert (Col d p r) by (conclude lemma_collinear4).
assert (Col B p r) by (conclude lemma_collinear4).
assert (Col B A p) by (forward_using lemma_collinearorder).

*****
H38 : Col B A p
H37 : Col B p r
H36 : Col d p r
H35 : neq q d
H34 : Col q d r
H33 : Col q r d
H32 : Col q d p
H31 : neq c q
H30 : neq q c
H29 : Col c q p
H28 : Col c q d
H27 : Col d c q
H26 : neq C d
H25 : Col C d q
H24 : Col C d c
H23 : Col d c C
H22 : Col q d C
H21 : Col q p c
H20 : not (eq p r)
H19 : BetS q p c
H18 : BetS d c C
H17 : Col c d C
H16 : Col C c d
H15 : BetS q r d
H11 : nCol A B d
H10 : nCol A B c
H9 : BetS d r q
H8 : BetS c p q
H7 : Col A B r
H6 : Col A B p
p,q,r : Point
H14 : OS c d A B
H13 : not (Meet A B c d)
H12 : neq c d
H5 : neq A B
H4 : neq C d
H3 : neq c d
H2 : neq C c
H1 : Col C c d
H0 : BetS C c d
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col B p A) by (forward_using lemma_collinearorder).
-----
Lemma lemma_parallelcollinear1 : forall A B C c d, TP A B c d -> BetS C c d -> TP A B C d.
Proof.
intros.
assert (Col C c d) by (conclude_def Col ).
assert (neq C c) by (forward_using lemma_betweennotequal).
assert (neq c d) by (forward_using lemma_betweennotequal).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)) by (conclude_def TP ).
let Tf:=fresh in assert (Tf:exists p q r, (Col A B p /\\ Col A B r /\\ BetS c p q /\\ BetS d r q /\\ nCol A B c /\\ nCol A B d)) by (conclude_def OS );destruct Tf as [p[q[r]]];spliter.
assert (BetS q r d) by (conclude axiom_betweennesssymmetry).
assert (Col C c d) by (conclude_def Col ).
assert (Col c d C) by (forward_using lemma_collinearorder).
assert (BetS d c C) by (conclude axiom_betweennesssymmetry).
assert (BetS q p c) by (conclude axiom_betweennesssymmetry).
assert (~ eq p r).
assert (Col q p c) by (conclude_def Col ).
assert (~ Col q d C).
intro.
assert (Col d c C) by (conclude_def Col ).
assert (Col C d c) by (forward_using lemma_collinearorder).
assert (Col C d q) by (forward_using lemma_collinearorder).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert (Col d c q) by (conclude lemma_collinear4).
assert (Col c q d) by (forward_using lemma_collinearorder).
assert (Col c q p) by (forward_using lemma_collinearorder).
assert (neq q c) by (forward_using lemma_betweennotequal).
assert (neq c q) by (conclude lemma_inequalitysymmetric).
assert (Col q d p) by (conclude lemma_collinear4).
assert (Col q r d) by (conclude_def Col ).
assert (Col q d r) by (forward_using lemma_collinearorder).
assert (neq q d) by (forward_using lemma_betweennotequal).
assert (Col d p r) by (conclude lemma_collinear4).
assert (Col B p r) by (conclude lemma_collinear4).
assert (Col B A p) by (forward_using lemma_collinearorder).
assert (Col B p A) by (forward_using lemma_collinearorder).

*****
H39 : Col B p A
H38 : Col B A p
H37 : Col B p r
H36 : Col d p r
H35 : neq q d
H34 : Col q d r
H33 : Col q r d
H32 : Col q d p
H31 : neq c q
H30 : neq q c
H29 : Col c q p
H28 : Col c q d
H27 : Col d c q
H26 : neq C d
H25 : Col C d q
H24 : Col C d c
H23 : Col d c C
H22 : Col q d C
H21 : Col q p c
H20 : not (eq p r)
H19 : BetS q p c
H18 : BetS d c C
H17 : Col c d C
H16 : Col C c d
H15 : BetS q r d
H11 : nCol A B d
H10 : nCol A B c
H9 : BetS d r q
H8 : BetS c p q
H7 : Col A B r
H6 : Col A B p
p,q,r : Point
H14 : OS c d A B
H13 : not (Meet A B c d)
H12 : neq c d
H5 : neq A B
H4 : neq C d
H3 : neq c d
H2 : neq C c
H1 : Col C c d
H0 : BetS C c d
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col B A r) by (forward_using lemma_collinearorder).
-----
Lemma lemma_parallelcollinear1 : forall A B C c d, TP A B c d -> BetS C c d -> TP A B C d.
Proof.
intros.
assert (Col C c d) by (conclude_def Col ).
assert (neq C c) by (forward_using lemma_betweennotequal).
assert (neq c d) by (forward_using lemma_betweennotequal).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)) by (conclude_def TP ).
let Tf:=fresh in assert (Tf:exists p q r, (Col A B p /\\ Col A B r /\\ BetS c p q /\\ BetS d r q /\\ nCol A B c /\\ nCol A B d)) by (conclude_def OS );destruct Tf as [p[q[r]]];spliter.
assert (BetS q r d) by (conclude axiom_betweennesssymmetry).
assert (Col C c d) by (conclude_def Col ).
assert (Col c d C) by (forward_using lemma_collinearorder).
assert (BetS d c C) by (conclude axiom_betweennesssymmetry).
assert (BetS q p c) by (conclude axiom_betweennesssymmetry).
assert (~ eq p r).
assert (Col q p c) by (conclude_def Col ).
assert (~ Col q d C).
intro.
assert (Col d c C) by (conclude_def Col ).
assert (Col C d c) by (forward_using lemma_collinearorder).
assert (Col C d q) by (forward_using lemma_collinearorder).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert (Col d c q) by (conclude lemma_collinear4).
assert (Col c q d) by (forward_using lemma_collinearorder).
assert (Col c q p) by (forward_using lemma_collinearorder).
assert (neq q c) by (forward_using lemma_betweennotequal).
assert (neq c q) by (conclude lemma_inequalitysymmetric).
assert (Col q d p) by (conclude lemma_collinear4).
assert (Col q r d) by (conclude_def Col ).
assert (Col q d r) by (forward_using lemma_collinearorder).
assert (neq q d) by (forward_using lemma_betweennotequal).
assert (Col d p r) by (conclude lemma_collinear4).
assert (Col B p r) by (conclude lemma_collinear4).
assert (Col B A p) by (forward_using lemma_collinearorder).
assert (Col B p A) by (forward_using lemma_collinearorder).
assert (Col B A r) by (forward_using lemma_collinearorder).

*****
H40 : Col B A r
H39 : Col B p A
H38 : Col B A p
H37 : Col B p r
H36 : Col d p r
H35 : neq q d
H34 : Col q d r
H33 : Col q r d
H32 : Col q d p
H31 : neq c q
H30 : neq q c
H29 : Col c q p
H28 : Col c q d
H27 : Col d c q
H26 : neq C d
H25 : Col C d q
H24 : Col C d c
H23 : Col d c C
H22 : Col q d C
H21 : Col q p c
H20 : not (eq p r)
H19 : BetS q p c
H18 : BetS d c C
H17 : Col c d C
H16 : Col C c d
H15 : BetS q r d
H11 : nCol A B d
H10 : nCol A B c
H9 : BetS d r q
H8 : BetS c p q
H7 : Col A B r
H6 : Col A B p
p,q,r : Point
H14 : OS c d A B
H13 : not (Meet A B c d)
H12 : neq c d
H5 : neq A B
H4 : neq C d
H3 : neq c d
H2 : neq C c
H1 : Col C c d
H0 : BetS C c d
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (neq B A) by (conclude lemma_inequalitysymmetric).
-----
Lemma lemma_parallelcollinear1 : forall A B C c d, TP A B c d -> BetS C c d -> TP A B C d.
Proof.
intros.
assert (Col C c d) by (conclude_def Col ).
assert (neq C c) by (forward_using lemma_betweennotequal).
assert (neq c d) by (forward_using lemma_betweennotequal).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)) by (conclude_def TP ).
let Tf:=fresh in assert (Tf:exists p q r, (Col A B p /\\ Col A B r /\\ BetS c p q /\\ BetS d r q /\\ nCol A B c /\\ nCol A B d)) by (conclude_def OS );destruct Tf as [p[q[r]]];spliter.
assert (BetS q r d) by (conclude axiom_betweennesssymmetry).
assert (Col C c d) by (conclude_def Col ).
assert (Col c d C) by (forward_using lemma_collinearorder).
assert (BetS d c C) by (conclude axiom_betweennesssymmetry).
assert (BetS q p c) by (conclude axiom_betweennesssymmetry).
assert (~ eq p r).
assert (Col q p c) by (conclude_def Col ).
assert (~ Col q d C).
intro.
assert (Col d c C) by (conclude_def Col ).
assert (Col C d c) by (forward_using lemma_collinearorder).
assert (Col C d q) by (forward_using lemma_collinearorder).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert (Col d c q) by (conclude lemma_collinear4).
assert (Col c q d) by (forward_using lemma_collinearorder).
assert (Col c q p) by (forward_using lemma_collinearorder).
assert (neq q c) by (forward_using lemma_betweennotequal).
assert (neq c q) by (conclude lemma_inequalitysymmetric).
assert (Col q d p) by (conclude lemma_collinear4).
assert (Col q r d) by (conclude_def Col ).
assert (Col q d r) by (forward_using lemma_collinearorder).
assert (neq q d) by (forward_using lemma_betweennotequal).
assert (Col d p r) by (conclude lemma_collinear4).
assert (Col B p r) by (conclude lemma_collinear4).
assert (Col B A p) by (forward_using lemma_collinearorder).
assert (Col B p A) by (forward_using lemma_collinearorder).
assert (Col B A r) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).

*****
H41 : neq B A
H40 : Col B A r
H39 : Col B p A
H38 : Col B A p
H37 : Col B p r
H36 : Col d p r
H35 : neq q d
H34 : Col q d r
H33 : Col q r d
H32 : Col q d p
H31 : neq c q
H30 : neq q c
H29 : Col c q p
H28 : Col c q d
H27 : Col d c q
H26 : neq C d
H25 : Col C d q
H24 : Col C d c
H23 : Col d c C
H22 : Col q d C
H21 : Col q p c
H20 : not (eq p r)
H19 : BetS q p c
H18 : BetS d c C
H17 : Col c d C
H16 : Col C c d
H15 : BetS q r d
H11 : nCol A B d
H10 : nCol A B c
H9 : BetS d r q
H8 : BetS c p q
H7 : Col A B r
H6 : Col A B p
p,q,r : Point
H14 : OS c d A B
H13 : not (Meet A B c d)
H12 : neq c d
H5 : neq A B
H4 : neq C d
H3 : neq c d
H2 : neq C c
H1 : Col C c d
H0 : BetS C c d
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col A p r) by (conclude lemma_collinear4).
-----
Lemma lemma_parallelcollinear1 : forall A B C c d, TP A B c d -> BetS C c d -> TP A B C d.
Proof.
intros.
assert (Col C c d) by (conclude_def Col ).
assert (neq C c) by (forward_using lemma_betweennotequal).
assert (neq c d) by (forward_using lemma_betweennotequal).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)) by (conclude_def TP ).
let Tf:=fresh in assert (Tf:exists p q r, (Col A B p /\\ Col A B r /\\ BetS c p q /\\ BetS d r q /\\ nCol A B c /\\ nCol A B d)) by (conclude_def OS );destruct Tf as [p[q[r]]];spliter.
assert (BetS q r d) by (conclude axiom_betweennesssymmetry).
assert (Col C c d) by (conclude_def Col ).
assert (Col c d C) by (forward_using lemma_collinearorder).
assert (BetS d c C) by (conclude axiom_betweennesssymmetry).
assert (BetS q p c) by (conclude axiom_betweennesssymmetry).
assert (~ eq p r).
assert (Col q p c) by (conclude_def Col ).
assert (~ Col q d C).
intro.
assert (Col d c C) by (conclude_def Col ).
assert (Col C d c) by (forward_using lemma_collinearorder).
assert (Col C d q) by (forward_using lemma_collinearorder).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert (Col d c q) by (conclude lemma_collinear4).
assert (Col c q d) by (forward_using lemma_collinearorder).
assert (Col c q p) by (forward_using lemma_collinearorder).
assert (neq q c) by (forward_using lemma_betweennotequal).
assert (neq c q) by (conclude lemma_inequalitysymmetric).
assert (Col q d p) by (conclude lemma_collinear4).
assert (Col q r d) by (conclude_def Col ).
assert (Col q d r) by (forward_using lemma_collinearorder).
assert (neq q d) by (forward_using lemma_betweennotequal).
assert (Col d p r) by (conclude lemma_collinear4).
assert (Col B p r) by (conclude lemma_collinear4).
assert (Col B A p) by (forward_using lemma_collinearorder).
assert (Col B p A) by (forward_using lemma_collinearorder).
assert (Col B A r) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A p r) by (conclude lemma_collinear4).

*****
H42 : Col A p r
H41 : neq B A
H40 : Col B A r
H39 : Col B p A
H38 : Col B A p
H37 : Col B p r
H36 : Col d p r
H35 : neq q d
H34 : Col q d r
H33 : Col q r d
H32 : Col q d p
H31 : neq c q
H30 : neq q c
H29 : Col c q p
H28 : Col c q d
H27 : Col d c q
H26 : neq C d
H25 : Col C d q
H24 : Col C d c
H23 : Col d c C
H22 : Col q d C
H21 : Col q p c
H20 : not (eq p r)
H19 : BetS q p c
H18 : BetS d c C
H17 : Col c d C
H16 : Col C c d
H15 : BetS q r d
H11 : nCol A B d
H10 : nCol A B c
H9 : BetS d r q
H8 : BetS c p q
H7 : Col A B r
H6 : Col A B p
p,q,r : Point
H14 : OS c d A B
H13 : not (Meet A B c d)
H12 : neq c d
H5 : neq A B
H4 : neq C d
H3 : neq c d
H2 : neq C c
H1 : Col C c d
H0 : BetS C c d
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (~ neq B p).
-----
Lemma lemma_parallelcollinear1 : forall A B C c d, TP A B c d -> BetS C c d -> TP A B C d.
Proof.
intros.
assert (Col C c d) by (conclude_def Col ).
assert (neq C c) by (forward_using lemma_betweennotequal).
assert (neq c d) by (forward_using lemma_betweennotequal).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)) by (conclude_def TP ).
let Tf:=fresh in assert (Tf:exists p q r, (Col A B p /\\ Col A B r /\\ BetS c p q /\\ BetS d r q /\\ nCol A B c /\\ nCol A B d)) by (conclude_def OS );destruct Tf as [p[q[r]]];spliter.
assert (BetS q r d) by (conclude axiom_betweennesssymmetry).
assert (Col C c d) by (conclude_def Col ).
assert (Col c d C) by (forward_using lemma_collinearorder).
assert (BetS d c C) by (conclude axiom_betweennesssymmetry).
assert (BetS q p c) by (conclude axiom_betweennesssymmetry).
assert (~ eq p r).
assert (Col q p c) by (conclude_def Col ).
assert (~ Col q d C).
intro.
assert (Col d c C) by (conclude_def Col ).
assert (Col C d c) by (forward_using lemma_collinearorder).
assert (Col C d q) by (forward_using lemma_collinearorder).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert (Col d c q) by (conclude lemma_collinear4).
assert (Col c q d) by (forward_using lemma_collinearorder).
assert (Col c q p) by (forward_using lemma_collinearorder).
assert (neq q c) by (forward_using lemma_betweennotequal).
assert (neq c q) by (conclude lemma_inequalitysymmetric).
assert (Col q d p) by (conclude lemma_collinear4).
assert (Col q r d) by (conclude_def Col ).
assert (Col q d r) by (forward_using lemma_collinearorder).
assert (neq q d) by (forward_using lemma_betweennotequal).
assert (Col d p r) by (conclude lemma_collinear4).
assert (Col B p r) by (conclude lemma_collinear4).
assert (Col B A p) by (forward_using lemma_collinearorder).
assert (Col B p A) by (forward_using lemma_collinearorder).
assert (Col B A r) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A p r) by (conclude lemma_collinear4).
assert (~ neq B p).

*****
H42 : Col A p r
H41 : neq B A
H40 : Col B A r
H39 : Col B p A
H38 : Col B A p
H37 : Col B p r
H36 : Col d p r
H35 : neq q d
H34 : Col q d r
H33 : Col q r d
H32 : Col q d p
H31 : neq c q
H30 : neq q c
H29 : Col c q p
H28 : Col c q d
H27 : Col d c q
H26 : neq C d
H25 : Col C d q
H24 : Col C d c
H23 : Col d c C
H22 : Col q d C
H21 : Col q p c
H20 : not (eq p r)
H19 : BetS q p c
H18 : BetS d c C
H17 : Col c d C
H16 : Col C c d
H15 : BetS q r d
H11 : nCol A B d
H10 : nCol A B c
H9 : BetS d r q
H8 : BetS c p q
H7 : Col A B r
H6 : Col A B p
p,q,r : Point
H14 : OS c d A B
H13 : not (Meet A B c d)
H12 : neq c d
H5 : neq A B
H4 : neq C d
H3 : neq c d
H2 : neq C c
H1 : Col C c d
H0 : BetS C c d
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (neq B p)
+++++
intro.
-----
Lemma lemma_parallelcollinear1 : forall A B C c d, TP A B c d -> BetS C c d -> TP A B C d.
Proof.
intros.
assert (Col C c d) by (conclude_def Col ).
assert (neq C c) by (forward_using lemma_betweennotequal).
assert (neq c d) by (forward_using lemma_betweennotequal).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)) by (conclude_def TP ).
let Tf:=fresh in assert (Tf:exists p q r, (Col A B p /\\ Col A B r /\\ BetS c p q /\\ BetS d r q /\\ nCol A B c /\\ nCol A B d)) by (conclude_def OS );destruct Tf as [p[q[r]]];spliter.
assert (BetS q r d) by (conclude axiom_betweennesssymmetry).
assert (Col C c d) by (conclude_def Col ).
assert (Col c d C) by (forward_using lemma_collinearorder).
assert (BetS d c C) by (conclude axiom_betweennesssymmetry).
assert (BetS q p c) by (conclude axiom_betweennesssymmetry).
assert (~ eq p r).
assert (Col q p c) by (conclude_def Col ).
assert (~ Col q d C).
intro.
assert (Col d c C) by (conclude_def Col ).
assert (Col C d c) by (forward_using lemma_collinearorder).
assert (Col C d q) by (forward_using lemma_collinearorder).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert (Col d c q) by (conclude lemma_collinear4).
assert (Col c q d) by (forward_using lemma_collinearorder).
assert (Col c q p) by (forward_using lemma_collinearorder).
assert (neq q c) by (forward_using lemma_betweennotequal).
assert (neq c q) by (conclude lemma_inequalitysymmetric).
assert (Col q d p) by (conclude lemma_collinear4).
assert (Col q r d) by (conclude_def Col ).
assert (Col q d r) by (forward_using lemma_collinearorder).
assert (neq q d) by (forward_using lemma_betweennotequal).
assert (Col d p r) by (conclude lemma_collinear4).
assert (Col B p r) by (conclude lemma_collinear4).
assert (Col B A p) by (forward_using lemma_collinearorder).
assert (Col B p A) by (forward_using lemma_collinearorder).
assert (Col B A r) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A p r) by (conclude lemma_collinear4).
assert (~ neq B p).
intro.

*****
H43 : neq B p
H42 : Col A p r
H41 : neq B A
H40 : Col B A r
H39 : Col B p A
H38 : Col B A p
H37 : Col B p r
H36 : Col d p r
H35 : neq q d
H34 : Col q d r
H33 : Col q r d
H32 : Col q d p
H31 : neq c q
H30 : neq q c
H29 : Col c q p
H28 : Col c q d
H27 : Col d c q
H26 : neq C d
H25 : Col C d q
H24 : Col C d c
H23 : Col d c C
H22 : Col q d C
H21 : Col q p c
H20 : not (eq p r)
H19 : BetS q p c
H18 : BetS d c C
H17 : Col c d C
H16 : Col C c d
H15 : BetS q r d
H11 : nCol A B d
H10 : nCol A B c
H9 : BetS d r q
H8 : BetS c p q
H7 : Col A B r
H6 : Col A B p
p,q,r : Point
H14 : OS c d A B
H13 : not (Meet A B c d)
H12 : neq c d
H5 : neq A B
H4 : neq C d
H3 : neq c d
H2 : neq C c
H1 : Col C c d
H0 : BetS C c d
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col p r A) by (conclude lemma_collinear4).
-----
Lemma lemma_parallelcollinear1 : forall A B C c d, TP A B c d -> BetS C c d -> TP A B C d.
Proof.
intros.
assert (Col C c d) by (conclude_def Col ).
assert (neq C c) by (forward_using lemma_betweennotequal).
assert (neq c d) by (forward_using lemma_betweennotequal).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)) by (conclude_def TP ).
let Tf:=fresh in assert (Tf:exists p q r, (Col A B p /\\ Col A B r /\\ BetS c p q /\\ BetS d r q /\\ nCol A B c /\\ nCol A B d)) by (conclude_def OS );destruct Tf as [p[q[r]]];spliter.
assert (BetS q r d) by (conclude axiom_betweennesssymmetry).
assert (Col C c d) by (conclude_def Col ).
assert (Col c d C) by (forward_using lemma_collinearorder).
assert (BetS d c C) by (conclude axiom_betweennesssymmetry).
assert (BetS q p c) by (conclude axiom_betweennesssymmetry).
assert (~ eq p r).
assert (Col q p c) by (conclude_def Col ).
assert (~ Col q d C).
intro.
assert (Col d c C) by (conclude_def Col ).
assert (Col C d c) by (forward_using lemma_collinearorder).
assert (Col C d q) by (forward_using lemma_collinearorder).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert (Col d c q) by (conclude lemma_collinear4).
assert (Col c q d) by (forward_using lemma_collinearorder).
assert (Col c q p) by (forward_using lemma_collinearorder).
assert (neq q c) by (forward_using lemma_betweennotequal).
assert (neq c q) by (conclude lemma_inequalitysymmetric).
assert (Col q d p) by (conclude lemma_collinear4).
assert (Col q r d) by (conclude_def Col ).
assert (Col q d r) by (forward_using lemma_collinearorder).
assert (neq q d) by (forward_using lemma_betweennotequal).
assert (Col d p r) by (conclude lemma_collinear4).
assert (Col B p r) by (conclude lemma_collinear4).
assert (Col B A p) by (forward_using lemma_collinearorder).
assert (Col B p A) by (forward_using lemma_collinearorder).
assert (Col B A r) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A p r) by (conclude lemma_collinear4).
assert (~ neq B p).
intro.
assert (Col p r A) by (conclude lemma_collinear4).

*****
H44 : Col p r A
H43 : neq B p
H42 : Col A p r
H41 : neq B A
H40 : Col B A r
H39 : Col B p A
H38 : Col B A p
H37 : Col B p r
H36 : Col d p r
H35 : neq q d
H34 : Col q d r
H33 : Col q r d
H32 : Col q d p
H31 : neq c q
H30 : neq q c
H29 : Col c q p
H28 : Col c q d
H27 : Col d c q
H26 : neq C d
H25 : Col C d q
H24 : Col C d c
H23 : Col d c C
H22 : Col q d C
H21 : Col q p c
H20 : not (eq p r)
H19 : BetS q p c
H18 : BetS d c C
H17 : Col c d C
H16 : Col C c d
H15 : BetS q r d
H11 : nCol A B d
H10 : nCol A B c
H9 : BetS d r q
H8 : BetS c p q
H7 : Col A B r
H6 : Col A B p
p,q,r : Point
H14 : OS c d A B
H13 : not (Meet A B c d)
H12 : neq c d
H5 : neq A B
H4 : neq C d
H3 : neq c d
H2 : neq C c
H1 : Col C c d
H0 : BetS C c d
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col p r d) by (forward_using lemma_collinearorder).
-----
Lemma lemma_parallelcollinear1 : forall A B C c d, TP A B c d -> BetS C c d -> TP A B C d.
Proof.
intros.
assert (Col C c d) by (conclude_def Col ).
assert (neq C c) by (forward_using lemma_betweennotequal).
assert (neq c d) by (forward_using lemma_betweennotequal).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)) by (conclude_def TP ).
let Tf:=fresh in assert (Tf:exists p q r, (Col A B p /\\ Col A B r /\\ BetS c p q /\\ BetS d r q /\\ nCol A B c /\\ nCol A B d)) by (conclude_def OS );destruct Tf as [p[q[r]]];spliter.
assert (BetS q r d) by (conclude axiom_betweennesssymmetry).
assert (Col C c d) by (conclude_def Col ).
assert (Col c d C) by (forward_using lemma_collinearorder).
assert (BetS d c C) by (conclude axiom_betweennesssymmetry).
assert (BetS q p c) by (conclude axiom_betweennesssymmetry).
assert (~ eq p r).
assert (Col q p c) by (conclude_def Col ).
assert (~ Col q d C).
intro.
assert (Col d c C) by (conclude_def Col ).
assert (Col C d c) by (forward_using lemma_collinearorder).
assert (Col C d q) by (forward_using lemma_collinearorder).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert (Col d c q) by (conclude lemma_collinear4).
assert (Col c q d) by (forward_using lemma_collinearorder).
assert (Col c q p) by (forward_using lemma_collinearorder).
assert (neq q c) by (forward_using lemma_betweennotequal).
assert (neq c q) by (conclude lemma_inequalitysymmetric).
assert (Col q d p) by (conclude lemma_collinear4).
assert (Col q r d) by (conclude_def Col ).
assert (Col q d r) by (forward_using lemma_collinearorder).
assert (neq q d) by (forward_using lemma_betweennotequal).
assert (Col d p r) by (conclude lemma_collinear4).
assert (Col B p r) by (conclude lemma_collinear4).
assert (Col B A p) by (forward_using lemma_collinearorder).
assert (Col B p A) by (forward_using lemma_collinearorder).
assert (Col B A r) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A p r) by (conclude lemma_collinear4).
assert (~ neq B p).
intro.
assert (Col p r A) by (conclude lemma_collinear4).
assert (Col p r d) by (forward_using lemma_collinearorder).

*****
H45 : Col p r d
H44 : Col p r A
H43 : neq B p
H42 : Col A p r
H41 : neq B A
H40 : Col B A r
H39 : Col B p A
H38 : Col B A p
H37 : Col B p r
H36 : Col d p r
H35 : neq q d
H34 : Col q d r
H33 : Col q r d
H32 : Col q d p
H31 : neq c q
H30 : neq q c
H29 : Col c q p
H28 : Col c q d
H27 : Col d c q
H26 : neq C d
H25 : Col C d q
H24 : Col C d c
H23 : Col d c C
H22 : Col q d C
H21 : Col q p c
H20 : not (eq p r)
H19 : BetS q p c
H18 : BetS d c C
H17 : Col c d C
H16 : Col C c d
H15 : BetS q r d
H11 : nCol A B d
H10 : nCol A B c
H9 : BetS d r q
H8 : BetS c p q
H7 : Col A B r
H6 : Col A B p
p,q,r : Point
H14 : OS c d A B
H13 : not (Meet A B c d)
H12 : neq c d
H5 : neq A B
H4 : neq C d
H3 : neq c d
H2 : neq C c
H1 : Col C c d
H0 : BetS C c d
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col r A d) by (conclude lemma_collinear4).
-----
Lemma lemma_parallelcollinear1 : forall A B C c d, TP A B c d -> BetS C c d -> TP A B C d.
Proof.
intros.
assert (Col C c d) by (conclude_def Col ).
assert (neq C c) by (forward_using lemma_betweennotequal).
assert (neq c d) by (forward_using lemma_betweennotequal).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)) by (conclude_def TP ).
let Tf:=fresh in assert (Tf:exists p q r, (Col A B p /\\ Col A B r /\\ BetS c p q /\\ BetS d r q /\\ nCol A B c /\\ nCol A B d)) by (conclude_def OS );destruct Tf as [p[q[r]]];spliter.
assert (BetS q r d) by (conclude axiom_betweennesssymmetry).
assert (Col C c d) by (conclude_def Col ).
assert (Col c d C) by (forward_using lemma_collinearorder).
assert (BetS d c C) by (conclude axiom_betweennesssymmetry).
assert (BetS q p c) by (conclude axiom_betweennesssymmetry).
assert (~ eq p r).
assert (Col q p c) by (conclude_def Col ).
assert (~ Col q d C).
intro.
assert (Col d c C) by (conclude_def Col ).
assert (Col C d c) by (forward_using lemma_collinearorder).
assert (Col C d q) by (forward_using lemma_collinearorder).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert (Col d c q) by (conclude lemma_collinear4).
assert (Col c q d) by (forward_using lemma_collinearorder).
assert (Col c q p) by (forward_using lemma_collinearorder).
assert (neq q c) by (forward_using lemma_betweennotequal).
assert (neq c q) by (conclude lemma_inequalitysymmetric).
assert (Col q d p) by (conclude lemma_collinear4).
assert (Col q r d) by (conclude_def Col ).
assert (Col q d r) by (forward_using lemma_collinearorder).
assert (neq q d) by (forward_using lemma_betweennotequal).
assert (Col d p r) by (conclude lemma_collinear4).
assert (Col B p r) by (conclude lemma_collinear4).
assert (Col B A p) by (forward_using lemma_collinearorder).
assert (Col B p A) by (forward_using lemma_collinearorder).
assert (Col B A r) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A p r) by (conclude lemma_collinear4).
assert (~ neq B p).
intro.
assert (Col p r A) by (conclude lemma_collinear4).
assert (Col p r d) by (forward_using lemma_collinearorder).
assert (Col r A d) by (conclude lemma_collinear4).

*****
H46 : Col r A d
H45 : Col p r d
H44 : Col p r A
H43 : neq B p
H42 : Col A p r
H41 : neq B A
H40 : Col B A r
H39 : Col B p A
H38 : Col B A p
H37 : Col B p r
H36 : Col d p r
H35 : neq q d
H34 : Col q d r
H33 : Col q r d
H32 : Col q d p
H31 : neq c q
H30 : neq q c
H29 : Col c q p
H28 : Col c q d
H27 : Col d c q
H26 : neq C d
H25 : Col C d q
H24 : Col C d c
H23 : Col d c C
H22 : Col q d C
H21 : Col q p c
H20 : not (eq p r)
H19 : BetS q p c
H18 : BetS d c C
H17 : Col c d C
H16 : Col C c d
H15 : BetS q r d
H11 : nCol A B d
H10 : nCol A B c
H9 : BetS d r q
H8 : BetS c p q
H7 : Col A B r
H6 : Col A B p
p,q,r : Point
H14 : OS c d A B
H13 : not (Meet A B c d)
H12 : neq c d
H5 : neq A B
H4 : neq C d
H3 : neq c d
H2 : neq C c
H1 : Col C c d
H0 : BetS C c d
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col r A B) by (forward_using lemma_collinearorder).
-----
Lemma lemma_parallelcollinear1 : forall A B C c d, TP A B c d -> BetS C c d -> TP A B C d.
Proof.
intros.
assert (Col C c d) by (conclude_def Col ).
assert (neq C c) by (forward_using lemma_betweennotequal).
assert (neq c d) by (forward_using lemma_betweennotequal).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)) by (conclude_def TP ).
let Tf:=fresh in assert (Tf:exists p q r, (Col A B p /\\ Col A B r /\\ BetS c p q /\\ BetS d r q /\\ nCol A B c /\\ nCol A B d)) by (conclude_def OS );destruct Tf as [p[q[r]]];spliter.
assert (BetS q r d) by (conclude axiom_betweennesssymmetry).
assert (Col C c d) by (conclude_def Col ).
assert (Col c d C) by (forward_using lemma_collinearorder).
assert (BetS d c C) by (conclude axiom_betweennesssymmetry).
assert (BetS q p c) by (conclude axiom_betweennesssymmetry).
assert (~ eq p r).
assert (Col q p c) by (conclude_def Col ).
assert (~ Col q d C).
intro.
assert (Col d c C) by (conclude_def Col ).
assert (Col C d c) by (forward_using lemma_collinearorder).
assert (Col C d q) by (forward_using lemma_collinearorder).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert (Col d c q) by (conclude lemma_collinear4).
assert (Col c q d) by (forward_using lemma_collinearorder).
assert (Col c q p) by (forward_using lemma_collinearorder).
assert (neq q c) by (forward_using lemma_betweennotequal).
assert (neq c q) by (conclude lemma_inequalitysymmetric).
assert (Col q d p) by (conclude lemma_collinear4).
assert (Col q r d) by (conclude_def Col ).
assert (Col q d r) by (forward_using lemma_collinearorder).
assert (neq q d) by (forward_using lemma_betweennotequal).
assert (Col d p r) by (conclude lemma_collinear4).
assert (Col B p r) by (conclude lemma_collinear4).
assert (Col B A p) by (forward_using lemma_collinearorder).
assert (Col B p A) by (forward_using lemma_collinearorder).
assert (Col B A r) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A p r) by (conclude lemma_collinear4).
assert (~ neq B p).
intro.
assert (Col p r A) by (conclude lemma_collinear4).
assert (Col p r d) by (forward_using lemma_collinearorder).
assert (Col r A d) by (conclude lemma_collinear4).
assert (Col r A B) by (forward_using lemma_collinearorder).

*****
H47 : Col r A B
H46 : Col r A d
H45 : Col p r d
H44 : Col p r A
H43 : neq B p
H42 : Col A p r
H41 : neq B A
H40 : Col B A r
H39 : Col B p A
H38 : Col B A p
H37 : Col B p r
H36 : Col d p r
H35 : neq q d
H34 : Col q d r
H33 : Col q r d
H32 : Col q d p
H31 : neq c q
H30 : neq q c
H29 : Col c q p
H28 : Col c q d
H27 : Col d c q
H26 : neq C d
H25 : Col C d q
H24 : Col C d c
H23 : Col d c C
H22 : Col q d C
H21 : Col q p c
H20 : not (eq p r)
H19 : BetS q p c
H18 : BetS d c C
H17 : Col c d C
H16 : Col C c d
H15 : BetS q r d
H11 : nCol A B d
H10 : nCol A B c
H9 : BetS d r q
H8 : BetS c p q
H7 : Col A B r
H6 : Col A B p
p,q,r : Point
H14 : OS c d A B
H13 : not (Meet A B c d)
H12 : neq c d
H5 : neq A B
H4 : neq C d
H3 : neq c d
H2 : neq C c
H1 : Col C c d
H0 : BetS C c d
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (~ neq r A).
-----
Lemma lemma_parallelcollinear1 : forall A B C c d, TP A B c d -> BetS C c d -> TP A B C d.
Proof.
intros.
assert (Col C c d) by (conclude_def Col ).
assert (neq C c) by (forward_using lemma_betweennotequal).
assert (neq c d) by (forward_using lemma_betweennotequal).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)) by (conclude_def TP ).
let Tf:=fresh in assert (Tf:exists p q r, (Col A B p /\\ Col A B r /\\ BetS c p q /\\ BetS d r q /\\ nCol A B c /\\ nCol A B d)) by (conclude_def OS );destruct Tf as [p[q[r]]];spliter.
assert (BetS q r d) by (conclude axiom_betweennesssymmetry).
assert (Col C c d) by (conclude_def Col ).
assert (Col c d C) by (forward_using lemma_collinearorder).
assert (BetS d c C) by (conclude axiom_betweennesssymmetry).
assert (BetS q p c) by (conclude axiom_betweennesssymmetry).
assert (~ eq p r).
assert (Col q p c) by (conclude_def Col ).
assert (~ Col q d C).
intro.
assert (Col d c C) by (conclude_def Col ).
assert (Col C d c) by (forward_using lemma_collinearorder).
assert (Col C d q) by (forward_using lemma_collinearorder).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert (Col d c q) by (conclude lemma_collinear4).
assert (Col c q d) by (forward_using lemma_collinearorder).
assert (Col c q p) by (forward_using lemma_collinearorder).
assert (neq q c) by (forward_using lemma_betweennotequal).
assert (neq c q) by (conclude lemma_inequalitysymmetric).
assert (Col q d p) by (conclude lemma_collinear4).
assert (Col q r d) by (conclude_def Col ).
assert (Col q d r) by (forward_using lemma_collinearorder).
assert (neq q d) by (forward_using lemma_betweennotequal).
assert (Col d p r) by (conclude lemma_collinear4).
assert (Col B p r) by (conclude lemma_collinear4).
assert (Col B A p) by (forward_using lemma_collinearorder).
assert (Col B p A) by (forward_using lemma_collinearorder).
assert (Col B A r) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A p r) by (conclude lemma_collinear4).
assert (~ neq B p).
intro.
assert (Col p r A) by (conclude lemma_collinear4).
assert (Col p r d) by (forward_using lemma_collinearorder).
assert (Col r A d) by (conclude lemma_collinear4).
assert (Col r A B) by (forward_using lemma_collinearorder).
assert (~ neq r A).

*****
H47 : Col r A B
H46 : Col r A d
H45 : Col p r d
H44 : Col p r A
H43 : neq B p
H42 : Col A p r
H41 : neq B A
H40 : Col B A r
H39 : Col B p A
H38 : Col B A p
H37 : Col B p r
H36 : Col d p r
H35 : neq q d
H34 : Col q d r
H33 : Col q r d
H32 : Col q d p
H31 : neq c q
H30 : neq q c
H29 : Col c q p
H28 : Col c q d
H27 : Col d c q
H26 : neq C d
H25 : Col C d q
H24 : Col C d c
H23 : Col d c C
H22 : Col q d C
H21 : Col q p c
H20 : not (eq p r)
H19 : BetS q p c
H18 : BetS d c C
H17 : Col c d C
H16 : Col C c d
H15 : BetS q r d
H11 : nCol A B d
H10 : nCol A B c
H9 : BetS d r q
H8 : BetS c p q
H7 : Col A B r
H6 : Col A B p
p,q,r : Point
H14 : OS c d A B
H13 : not (Meet A B c d)
H12 : neq c d
H5 : neq A B
H4 : neq C d
H3 : neq c d
H2 : neq C c
H1 : Col C c d
H0 : BetS C c d
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (neq r A)
+++++
intro.
-----
Lemma lemma_parallelcollinear1 : forall A B C c d, TP A B c d -> BetS C c d -> TP A B C d.
Proof.
intros.
assert (Col C c d) by (conclude_def Col ).
assert (neq C c) by (forward_using lemma_betweennotequal).
assert (neq c d) by (forward_using lemma_betweennotequal).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)) by (conclude_def TP ).
let Tf:=fresh in assert (Tf:exists p q r, (Col A B p /\\ Col A B r /\\ BetS c p q /\\ BetS d r q /\\ nCol A B c /\\ nCol A B d)) by (conclude_def OS );destruct Tf as [p[q[r]]];spliter.
assert (BetS q r d) by (conclude axiom_betweennesssymmetry).
assert (Col C c d) by (conclude_def Col ).
assert (Col c d C) by (forward_using lemma_collinearorder).
assert (BetS d c C) by (conclude axiom_betweennesssymmetry).
assert (BetS q p c) by (conclude axiom_betweennesssymmetry).
assert (~ eq p r).
assert (Col q p c) by (conclude_def Col ).
assert (~ Col q d C).
intro.
assert (Col d c C) by (conclude_def Col ).
assert (Col C d c) by (forward_using lemma_collinearorder).
assert (Col C d q) by (forward_using lemma_collinearorder).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert (Col d c q) by (conclude lemma_collinear4).
assert (Col c q d) by (forward_using lemma_collinearorder).
assert (Col c q p) by (forward_using lemma_collinearorder).
assert (neq q c) by (forward_using lemma_betweennotequal).
assert (neq c q) by (conclude lemma_inequalitysymmetric).
assert (Col q d p) by (conclude lemma_collinear4).
assert (Col q r d) by (conclude_def Col ).
assert (Col q d r) by (forward_using lemma_collinearorder).
assert (neq q d) by (forward_using lemma_betweennotequal).
assert (Col d p r) by (conclude lemma_collinear4).
assert (Col B p r) by (conclude lemma_collinear4).
assert (Col B A p) by (forward_using lemma_collinearorder).
assert (Col B p A) by (forward_using lemma_collinearorder).
assert (Col B A r) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A p r) by (conclude lemma_collinear4).
assert (~ neq B p).
intro.
assert (Col p r A) by (conclude lemma_collinear4).
assert (Col p r d) by (forward_using lemma_collinearorder).
assert (Col r A d) by (conclude lemma_collinear4).
assert (Col r A B) by (forward_using lemma_collinearorder).
assert (~ neq r A).
intro.

*****
H48 : neq r A
H47 : Col r A B
H46 : Col r A d
H45 : Col p r d
H44 : Col p r A
H43 : neq B p
H42 : Col A p r
H41 : neq B A
H40 : Col B A r
H39 : Col B p A
H38 : Col B A p
H37 : Col B p r
H36 : Col d p r
H35 : neq q d
H34 : Col q d r
H33 : Col q r d
H32 : Col q d p
H31 : neq c q
H30 : neq q c
H29 : Col c q p
H28 : Col c q d
H27 : Col d c q
H26 : neq C d
H25 : Col C d q
H24 : Col C d c
H23 : Col d c C
H22 : Col q d C
H21 : Col q p c
H20 : not (eq p r)
H19 : BetS q p c
H18 : BetS d c C
H17 : Col c d C
H16 : Col C c d
H15 : BetS q r d
H11 : nCol A B d
H10 : nCol A B c
H9 : BetS d r q
H8 : BetS c p q
H7 : Col A B r
H6 : Col A B p
p,q,r : Point
H14 : OS c d A B
H13 : not (Meet A B c d)
H12 : neq c d
H5 : neq A B
H4 : neq C d
H3 : neq c d
H2 : neq C c
H1 : Col C c d
H0 : BetS C c d
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col A d B) by (conclude lemma_collinear4).
-----
Lemma lemma_parallelcollinear1 : forall A B C c d, TP A B c d -> BetS C c d -> TP A B C d.
Proof.
intros.
assert (Col C c d) by (conclude_def Col ).
assert (neq C c) by (forward_using lemma_betweennotequal).
assert (neq c d) by (forward_using lemma_betweennotequal).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)) by (conclude_def TP ).
let Tf:=fresh in assert (Tf:exists p q r, (Col A B p /\\ Col A B r /\\ BetS c p q /\\ BetS d r q /\\ nCol A B c /\\ nCol A B d)) by (conclude_def OS );destruct Tf as [p[q[r]]];spliter.
assert (BetS q r d) by (conclude axiom_betweennesssymmetry).
assert (Col C c d) by (conclude_def Col ).
assert (Col c d C) by (forward_using lemma_collinearorder).
assert (BetS d c C) by (conclude axiom_betweennesssymmetry).
assert (BetS q p c) by (conclude axiom_betweennesssymmetry).
assert (~ eq p r).
assert (Col q p c) by (conclude_def Col ).
assert (~ Col q d C).
intro.
assert (Col d c C) by (conclude_def Col ).
assert (Col C d c) by (forward_using lemma_collinearorder).
assert (Col C d q) by (forward_using lemma_collinearorder).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert (Col d c q) by (conclude lemma_collinear4).
assert (Col c q d) by (forward_using lemma_collinearorder).
assert (Col c q p) by (forward_using lemma_collinearorder).
assert (neq q c) by (forward_using lemma_betweennotequal).
assert (neq c q) by (conclude lemma_inequalitysymmetric).
assert (Col q d p) by (conclude lemma_collinear4).
assert (Col q r d) by (conclude_def Col ).
assert (Col q d r) by (forward_using lemma_collinearorder).
assert (neq q d) by (forward_using lemma_betweennotequal).
assert (Col d p r) by (conclude lemma_collinear4).
assert (Col B p r) by (conclude lemma_collinear4).
assert (Col B A p) by (forward_using lemma_collinearorder).
assert (Col B p A) by (forward_using lemma_collinearorder).
assert (Col B A r) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A p r) by (conclude lemma_collinear4).
assert (~ neq B p).
intro.
assert (Col p r A) by (conclude lemma_collinear4).
assert (Col p r d) by (forward_using lemma_collinearorder).
assert (Col r A d) by (conclude lemma_collinear4).
assert (Col r A B) by (forward_using lemma_collinearorder).
assert (~ neq r A).
intro.
assert (Col A d B) by (conclude lemma_collinear4).

*****
H49 : Col A d B
H48 : neq r A
H47 : Col r A B
H46 : Col r A d
H45 : Col p r d
H44 : Col p r A
H43 : neq B p
H42 : Col A p r
H41 : neq B A
H40 : Col B A r
H39 : Col B p A
H38 : Col B A p
H37 : Col B p r
H36 : Col d p r
H35 : neq q d
H34 : Col q d r
H33 : Col q r d
H32 : Col q d p
H31 : neq c q
H30 : neq q c
H29 : Col c q p
H28 : Col c q d
H27 : Col d c q
H26 : neq C d
H25 : Col C d q
H24 : Col C d c
H23 : Col d c C
H22 : Col q d C
H21 : Col q p c
H20 : not (eq p r)
H19 : BetS q p c
H18 : BetS d c C
H17 : Col c d C
H16 : Col C c d
H15 : BetS q r d
H11 : nCol A B d
H10 : nCol A B c
H9 : BetS d r q
H8 : BetS c p q
H7 : Col A B r
H6 : Col A B p
p,q,r : Point
H14 : OS c d A B
H13 : not (Meet A B c d)
H12 : neq c d
H5 : neq A B
H4 : neq C d
H3 : neq c d
H2 : neq C c
H1 : Col C c d
H0 : BetS C c d
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col A B d) by (forward_using lemma_collinearorder).
-----
Lemma lemma_parallelcollinear1 : forall A B C c d, TP A B c d -> BetS C c d -> TP A B C d.
Proof.
intros.
assert (Col C c d) by (conclude_def Col ).
assert (neq C c) by (forward_using lemma_betweennotequal).
assert (neq c d) by (forward_using lemma_betweennotequal).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)) by (conclude_def TP ).
let Tf:=fresh in assert (Tf:exists p q r, (Col A B p /\\ Col A B r /\\ BetS c p q /\\ BetS d r q /\\ nCol A B c /\\ nCol A B d)) by (conclude_def OS );destruct Tf as [p[q[r]]];spliter.
assert (BetS q r d) by (conclude axiom_betweennesssymmetry).
assert (Col C c d) by (conclude_def Col ).
assert (Col c d C) by (forward_using lemma_collinearorder).
assert (BetS d c C) by (conclude axiom_betweennesssymmetry).
assert (BetS q p c) by (conclude axiom_betweennesssymmetry).
assert (~ eq p r).
assert (Col q p c) by (conclude_def Col ).
assert (~ Col q d C).
intro.
assert (Col d c C) by (conclude_def Col ).
assert (Col C d c) by (forward_using lemma_collinearorder).
assert (Col C d q) by (forward_using lemma_collinearorder).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert (Col d c q) by (conclude lemma_collinear4).
assert (Col c q d) by (forward_using lemma_collinearorder).
assert (Col c q p) by (forward_using lemma_collinearorder).
assert (neq q c) by (forward_using lemma_betweennotequal).
assert (neq c q) by (conclude lemma_inequalitysymmetric).
assert (Col q d p) by (conclude lemma_collinear4).
assert (Col q r d) by (conclude_def Col ).
assert (Col q d r) by (forward_using lemma_collinearorder).
assert (neq q d) by (forward_using lemma_betweennotequal).
assert (Col d p r) by (conclude lemma_collinear4).
assert (Col B p r) by (conclude lemma_collinear4).
assert (Col B A p) by (forward_using lemma_collinearorder).
assert (Col B p A) by (forward_using lemma_collinearorder).
assert (Col B A r) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A p r) by (conclude lemma_collinear4).
assert (~ neq B p).
intro.
assert (Col p r A) by (conclude lemma_collinear4).
assert (Col p r d) by (forward_using lemma_collinearorder).
assert (Col r A d) by (conclude lemma_collinear4).
assert (Col r A B) by (forward_using lemma_collinearorder).
assert (~ neq r A).
intro.
assert (Col A d B) by (conclude lemma_collinear4).
assert (Col A B d) by (forward_using lemma_collinearorder).

*****
H50 : Col A B d
H49 : Col A d B
H48 : neq r A
H47 : Col r A B
H46 : Col r A d
H45 : Col p r d
H44 : Col p r A
H43 : neq B p
H42 : Col A p r
H41 : neq B A
H40 : Col B A r
H39 : Col B p A
H38 : Col B A p
H37 : Col B p r
H36 : Col d p r
H35 : neq q d
H34 : Col q d r
H33 : Col q r d
H32 : Col q d p
H31 : neq c q
H30 : neq q c
H29 : Col c q p
H28 : Col c q d
H27 : Col d c q
H26 : neq C d
H25 : Col C d q
H24 : Col C d c
H23 : Col d c C
H22 : Col q d C
H21 : Col q p c
H20 : not (eq p r)
H19 : BetS q p c
H18 : BetS d c C
H17 : Col c d C
H16 : Col C c d
H15 : BetS q r d
H11 : nCol A B d
H10 : nCol A B c
H9 : BetS d r q
H8 : BetS c p q
H7 : Col A B r
H6 : Col A B p
p,q,r : Point
H14 : OS c d A B
H13 : not (Meet A B c d)
H12 : neq c d
H5 : neq A B
H4 : neq C d
H3 : neq c d
H2 : neq C c
H1 : Col C c d
H0 : BetS C c d
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma lemma_parallelcollinear1 : forall A B C c d, TP A B c d -> BetS C c d -> TP A B C d.
Proof.
intros.
assert (Col C c d) by (conclude_def Col ).
assert (neq C c) by (forward_using lemma_betweennotequal).
assert (neq c d) by (forward_using lemma_betweennotequal).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)) by (conclude_def TP ).
let Tf:=fresh in assert (Tf:exists p q r, (Col A B p /\\ Col A B r /\\ BetS c p q /\\ BetS d r q /\\ nCol A B c /\\ nCol A B d)) by (conclude_def OS );destruct Tf as [p[q[r]]];spliter.
assert (BetS q r d) by (conclude axiom_betweennesssymmetry).
assert (Col C c d) by (conclude_def Col ).
assert (Col c d C) by (forward_using lemma_collinearorder).
assert (BetS d c C) by (conclude axiom_betweennesssymmetry).
assert (BetS q p c) by (conclude axiom_betweennesssymmetry).
assert (~ eq p r).
assert (Col q p c) by (conclude_def Col ).
assert (~ Col q d C).
intro.
assert (Col d c C) by (conclude_def Col ).
assert (Col C d c) by (forward_using lemma_collinearorder).
assert (Col C d q) by (forward_using lemma_collinearorder).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert (Col d c q) by (conclude lemma_collinear4).
assert (Col c q d) by (forward_using lemma_collinearorder).
assert (Col c q p) by (forward_using lemma_collinearorder).
assert (neq q c) by (forward_using lemma_betweennotequal).
assert (neq c q) by (conclude lemma_inequalitysymmetric).
assert (Col q d p) by (conclude lemma_collinear4).
assert (Col q r d) by (conclude_def Col ).
assert (Col q d r) by (forward_using lemma_collinearorder).
assert (neq q d) by (forward_using lemma_betweennotequal).
assert (Col d p r) by (conclude lemma_collinear4).
assert (Col B p r) by (conclude lemma_collinear4).
assert (Col B A p) by (forward_using lemma_collinearorder).
assert (Col B p A) by (forward_using lemma_collinearorder).
assert (Col B A r) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A p r) by (conclude lemma_collinear4).
assert (~ neq B p).
intro.
assert (Col p r A) by (conclude lemma_collinear4).
assert (Col p r d) by (forward_using lemma_collinearorder).
assert (Col r A d) by (conclude lemma_collinear4).
assert (Col r A B) by (forward_using lemma_collinearorder).
assert (~ neq r A).

*****
H48 : not (neq r A)
H47 : Col r A B
H46 : Col r A d
H45 : Col p r d
H44 : Col p r A
H43 : neq B p
H42 : Col A p r
H41 : neq B A
H40 : Col B A r
H39 : Col B p A
H38 : Col B A p
H37 : Col B p r
H36 : Col d p r
H35 : neq q d
H34 : Col q d r
H33 : Col q r d
H32 : Col q d p
H31 : neq c q
H30 : neq q c
H29 : Col c q p
H28 : Col c q d
H27 : Col d c q
H26 : neq C d
H25 : Col C d q
H24 : Col C d c
H23 : Col d c C
H22 : Col q d C
H21 : Col q p c
H20 : not (eq p r)
H19 : BetS q p c
H18 : BetS d c C
H17 : Col c d C
H16 : Col C c d
H15 : BetS q r d
H11 : nCol A B d
H10 : nCol A B c
H9 : BetS d r q
H8 : BetS c p q
H7 : Col A B r
H6 : Col A B p
p,q,r : Point
H14 : OS c d A B
H13 : not (Meet A B c d)
H12 : neq c d
H5 : neq A B
H4 : neq C d
H3 : neq c d
H2 : neq C c
H1 : Col C c d
H0 : BetS C c d
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col p A d) by (conclude cn_equalitysub).
-----
Lemma lemma_parallelcollinear1 : forall A B C c d, TP A B c d -> BetS C c d -> TP A B C d.
Proof.
intros.
assert (Col C c d) by (conclude_def Col ).
assert (neq C c) by (forward_using lemma_betweennotequal).
assert (neq c d) by (forward_using lemma_betweennotequal).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)) by (conclude_def TP ).
let Tf:=fresh in assert (Tf:exists p q r, (Col A B p /\\ Col A B r /\\ BetS c p q /\\ BetS d r q /\\ nCol A B c /\\ nCol A B d)) by (conclude_def OS );destruct Tf as [p[q[r]]];spliter.
assert (BetS q r d) by (conclude axiom_betweennesssymmetry).
assert (Col C c d) by (conclude_def Col ).
assert (Col c d C) by (forward_using lemma_collinearorder).
assert (BetS d c C) by (conclude axiom_betweennesssymmetry).
assert (BetS q p c) by (conclude axiom_betweennesssymmetry).
assert (~ eq p r).
assert (Col q p c) by (conclude_def Col ).
assert (~ Col q d C).
intro.
assert (Col d c C) by (conclude_def Col ).
assert (Col C d c) by (forward_using lemma_collinearorder).
assert (Col C d q) by (forward_using lemma_collinearorder).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert (Col d c q) by (conclude lemma_collinear4).
assert (Col c q d) by (forward_using lemma_collinearorder).
assert (Col c q p) by (forward_using lemma_collinearorder).
assert (neq q c) by (forward_using lemma_betweennotequal).
assert (neq c q) by (conclude lemma_inequalitysymmetric).
assert (Col q d p) by (conclude lemma_collinear4).
assert (Col q r d) by (conclude_def Col ).
assert (Col q d r) by (forward_using lemma_collinearorder).
assert (neq q d) by (forward_using lemma_betweennotequal).
assert (Col d p r) by (conclude lemma_collinear4).
assert (Col B p r) by (conclude lemma_collinear4).
assert (Col B A p) by (forward_using lemma_collinearorder).
assert (Col B p A) by (forward_using lemma_collinearorder).
assert (Col B A r) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A p r) by (conclude lemma_collinear4).
assert (~ neq B p).
intro.
assert (Col p r A) by (conclude lemma_collinear4).
assert (Col p r d) by (forward_using lemma_collinearorder).
assert (Col r A d) by (conclude lemma_collinear4).
assert (Col r A B) by (forward_using lemma_collinearorder).
assert (~ neq r A).
assert (Col p A d) by (conclude cn_equalitysub).

*****
H49 : Col p A d
H48 : not (neq r A)
H47 : Col r A B
H46 : Col r A d
H45 : Col p r d
H44 : Col p r A
H43 : neq B p
H42 : Col A p r
H41 : neq B A
H40 : Col B A r
H39 : Col B p A
H38 : Col B A p
H37 : Col B p r
H36 : Col d p r
H35 : neq q d
H34 : Col q d r
H33 : Col q r d
H32 : Col q d p
H31 : neq c q
H30 : neq q c
H29 : Col c q p
H28 : Col c q d
H27 : Col d c q
H26 : neq C d
H25 : Col C d q
H24 : Col C d c
H23 : Col d c C
H22 : Col q d C
H21 : Col q p c
H20 : not (eq p r)
H19 : BetS q p c
H18 : BetS d c C
H17 : Col c d C
H16 : Col C c d
H15 : BetS q r d
H11 : nCol A B d
H10 : nCol A B c
H9 : BetS d r q
H8 : BetS c p q
H7 : Col A B r
H6 : Col A B p
p,q,r : Point
H14 : OS c d A B
H13 : not (Meet A B c d)
H12 : neq c d
H5 : neq A B
H4 : neq C d
H3 : neq c d
H2 : neq C c
H1 : Col C c d
H0 : BetS C c d
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col p A B) by (forward_using lemma_collinearorder).
-----
Lemma lemma_parallelcollinear1 : forall A B C c d, TP A B c d -> BetS C c d -> TP A B C d.
Proof.
intros.
assert (Col C c d) by (conclude_def Col ).
assert (neq C c) by (forward_using lemma_betweennotequal).
assert (neq c d) by (forward_using lemma_betweennotequal).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)) by (conclude_def TP ).
let Tf:=fresh in assert (Tf:exists p q r, (Col A B p /\\ Col A B r /\\ BetS c p q /\\ BetS d r q /\\ nCol A B c /\\ nCol A B d)) by (conclude_def OS );destruct Tf as [p[q[r]]];spliter.
assert (BetS q r d) by (conclude axiom_betweennesssymmetry).
assert (Col C c d) by (conclude_def Col ).
assert (Col c d C) by (forward_using lemma_collinearorder).
assert (BetS d c C) by (conclude axiom_betweennesssymmetry).
assert (BetS q p c) by (conclude axiom_betweennesssymmetry).
assert (~ eq p r).
assert (Col q p c) by (conclude_def Col ).
assert (~ Col q d C).
intro.
assert (Col d c C) by (conclude_def Col ).
assert (Col C d c) by (forward_using lemma_collinearorder).
assert (Col C d q) by (forward_using lemma_collinearorder).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert (Col d c q) by (conclude lemma_collinear4).
assert (Col c q d) by (forward_using lemma_collinearorder).
assert (Col c q p) by (forward_using lemma_collinearorder).
assert (neq q c) by (forward_using lemma_betweennotequal).
assert (neq c q) by (conclude lemma_inequalitysymmetric).
assert (Col q d p) by (conclude lemma_collinear4).
assert (Col q r d) by (conclude_def Col ).
assert (Col q d r) by (forward_using lemma_collinearorder).
assert (neq q d) by (forward_using lemma_betweennotequal).
assert (Col d p r) by (conclude lemma_collinear4).
assert (Col B p r) by (conclude lemma_collinear4).
assert (Col B A p) by (forward_using lemma_collinearorder).
assert (Col B p A) by (forward_using lemma_collinearorder).
assert (Col B A r) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A p r) by (conclude lemma_collinear4).
assert (~ neq B p).
intro.
assert (Col p r A) by (conclude lemma_collinear4).
assert (Col p r d) by (forward_using lemma_collinearorder).
assert (Col r A d) by (conclude lemma_collinear4).
assert (Col r A B) by (forward_using lemma_collinearorder).
assert (~ neq r A).
assert (Col p A d) by (conclude cn_equalitysub).
assert (Col p A B) by (forward_using lemma_collinearorder).

*****
H50 : Col p A B
H49 : Col p A d
H48 : not (neq r A)
H47 : Col r A B
H46 : Col r A d
H45 : Col p r d
H44 : Col p r A
H43 : neq B p
H42 : Col A p r
H41 : neq B A
H40 : Col B A r
H39 : Col B p A
H38 : Col B A p
H37 : Col B p r
H36 : Col d p r
H35 : neq q d
H34 : Col q d r
H33 : Col q r d
H32 : Col q d p
H31 : neq c q
H30 : neq q c
H29 : Col c q p
H28 : Col c q d
H27 : Col d c q
H26 : neq C d
H25 : Col C d q
H24 : Col C d c
H23 : Col d c C
H22 : Col q d C
H21 : Col q p c
H20 : not (eq p r)
H19 : BetS q p c
H18 : BetS d c C
H17 : Col c d C
H16 : Col C c d
H15 : BetS q r d
H11 : nCol A B d
H10 : nCol A B c
H9 : BetS d r q
H8 : BetS c p q
H7 : Col A B r
H6 : Col A B p
p,q,r : Point
H14 : OS c d A B
H13 : not (Meet A B c d)
H12 : neq c d
H5 : neq A B
H4 : neq C d
H3 : neq c d
H2 : neq C c
H1 : Col C c d
H0 : BetS C c d
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (~ neq p A).
-----
Lemma lemma_parallelcollinear1 : forall A B C c d, TP A B c d -> BetS C c d -> TP A B C d.
Proof.
intros.
assert (Col C c d) by (conclude_def Col ).
assert (neq C c) by (forward_using lemma_betweennotequal).
assert (neq c d) by (forward_using lemma_betweennotequal).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)) by (conclude_def TP ).
let Tf:=fresh in assert (Tf:exists p q r, (Col A B p /\\ Col A B r /\\ BetS c p q /\\ BetS d r q /\\ nCol A B c /\\ nCol A B d)) by (conclude_def OS );destruct Tf as [p[q[r]]];spliter.
assert (BetS q r d) by (conclude axiom_betweennesssymmetry).
assert (Col C c d) by (conclude_def Col ).
assert (Col c d C) by (forward_using lemma_collinearorder).
assert (BetS d c C) by (conclude axiom_betweennesssymmetry).
assert (BetS q p c) by (conclude axiom_betweennesssymmetry).
assert (~ eq p r).
assert (Col q p c) by (conclude_def Col ).
assert (~ Col q d C).
intro.
assert (Col d c C) by (conclude_def Col ).
assert (Col C d c) by (forward_using lemma_collinearorder).
assert (Col C d q) by (forward_using lemma_collinearorder).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert (Col d c q) by (conclude lemma_collinear4).
assert (Col c q d) by (forward_using lemma_collinearorder).
assert (Col c q p) by (forward_using lemma_collinearorder).
assert (neq q c) by (forward_using lemma_betweennotequal).
assert (neq c q) by (conclude lemma_inequalitysymmetric).
assert (Col q d p) by (conclude lemma_collinear4).
assert (Col q r d) by (conclude_def Col ).
assert (Col q d r) by (forward_using lemma_collinearorder).
assert (neq q d) by (forward_using lemma_betweennotequal).
assert (Col d p r) by (conclude lemma_collinear4).
assert (Col B p r) by (conclude lemma_collinear4).
assert (Col B A p) by (forward_using lemma_collinearorder).
assert (Col B p A) by (forward_using lemma_collinearorder).
assert (Col B A r) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A p r) by (conclude lemma_collinear4).
assert (~ neq B p).
intro.
assert (Col p r A) by (conclude lemma_collinear4).
assert (Col p r d) by (forward_using lemma_collinearorder).
assert (Col r A d) by (conclude lemma_collinear4).
assert (Col r A B) by (forward_using lemma_collinearorder).
assert (~ neq r A).
assert (Col p A d) by (conclude cn_equalitysub).
assert (Col p A B) by (forward_using lemma_collinearorder).
assert (~ neq p A).

*****
H50 : Col p A B
H49 : Col p A d
H48 : not (neq r A)
H47 : Col r A B
H46 : Col r A d
H45 : Col p r d
H44 : Col p r A
H43 : neq B p
H42 : Col A p r
H41 : neq B A
H40 : Col B A r
H39 : Col B p A
H38 : Col B A p
H37 : Col B p r
H36 : Col d p r
H35 : neq q d
H34 : Col q d r
H33 : Col q r d
H32 : Col q d p
H31 : neq c q
H30 : neq q c
H29 : Col c q p
H28 : Col c q d
H27 : Col d c q
H26 : neq C d
H25 : Col C d q
H24 : Col C d c
H23 : Col d c C
H22 : Col q d C
H21 : Col q p c
H20 : not (eq p r)
H19 : BetS q p c
H18 : BetS d c C
H17 : Col c d C
H16 : Col C c d
H15 : BetS q r d
H11 : nCol A B d
H10 : nCol A B c
H9 : BetS d r q
H8 : BetS c p q
H7 : Col A B r
H6 : Col A B p
p,q,r : Point
H14 : OS c d A B
H13 : not (Meet A B c d)
H12 : neq c d
H5 : neq A B
H4 : neq C d
H3 : neq c d
H2 : neq C c
H1 : Col C c d
H0 : BetS C c d
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (neq p A)
+++++
intro.
-----
Lemma lemma_parallelcollinear1 : forall A B C c d, TP A B c d -> BetS C c d -> TP A B C d.
Proof.
intros.
assert (Col C c d) by (conclude_def Col ).
assert (neq C c) by (forward_using lemma_betweennotequal).
assert (neq c d) by (forward_using lemma_betweennotequal).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)) by (conclude_def TP ).
let Tf:=fresh in assert (Tf:exists p q r, (Col A B p /\\ Col A B r /\\ BetS c p q /\\ BetS d r q /\\ nCol A B c /\\ nCol A B d)) by (conclude_def OS );destruct Tf as [p[q[r]]];spliter.
assert (BetS q r d) by (conclude axiom_betweennesssymmetry).
assert (Col C c d) by (conclude_def Col ).
assert (Col c d C) by (forward_using lemma_collinearorder).
assert (BetS d c C) by (conclude axiom_betweennesssymmetry).
assert (BetS q p c) by (conclude axiom_betweennesssymmetry).
assert (~ eq p r).
assert (Col q p c) by (conclude_def Col ).
assert (~ Col q d C).
intro.
assert (Col d c C) by (conclude_def Col ).
assert (Col C d c) by (forward_using lemma_collinearorder).
assert (Col C d q) by (forward_using lemma_collinearorder).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert (Col d c q) by (conclude lemma_collinear4).
assert (Col c q d) by (forward_using lemma_collinearorder).
assert (Col c q p) by (forward_using lemma_collinearorder).
assert (neq q c) by (forward_using lemma_betweennotequal).
assert (neq c q) by (conclude lemma_inequalitysymmetric).
assert (Col q d p) by (conclude lemma_collinear4).
assert (Col q r d) by (conclude_def Col ).
assert (Col q d r) by (forward_using lemma_collinearorder).
assert (neq q d) by (forward_using lemma_betweennotequal).
assert (Col d p r) by (conclude lemma_collinear4).
assert (Col B p r) by (conclude lemma_collinear4).
assert (Col B A p) by (forward_using lemma_collinearorder).
assert (Col B p A) by (forward_using lemma_collinearorder).
assert (Col B A r) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A p r) by (conclude lemma_collinear4).
assert (~ neq B p).
intro.
assert (Col p r A) by (conclude lemma_collinear4).
assert (Col p r d) by (forward_using lemma_collinearorder).
assert (Col r A d) by (conclude lemma_collinear4).
assert (Col r A B) by (forward_using lemma_collinearorder).
assert (~ neq r A).
assert (Col p A d) by (conclude cn_equalitysub).
assert (Col p A B) by (forward_using lemma_collinearorder).
assert (~ neq p A).
intro.

*****
H51 : neq p A
H50 : Col p A B
H49 : Col p A d
H48 : not (neq r A)
H47 : Col r A B
H46 : Col r A d
H45 : Col p r d
H44 : Col p r A
H43 : neq B p
H42 : Col A p r
H41 : neq B A
H40 : Col B A r
H39 : Col B p A
H38 : Col B A p
H37 : Col B p r
H36 : Col d p r
H35 : neq q d
H34 : Col q d r
H33 : Col q r d
H32 : Col q d p
H31 : neq c q
H30 : neq q c
H29 : Col c q p
H28 : Col c q d
H27 : Col d c q
H26 : neq C d
H25 : Col C d q
H24 : Col C d c
H23 : Col d c C
H22 : Col q d C
H21 : Col q p c
H20 : not (eq p r)
H19 : BetS q p c
H18 : BetS d c C
H17 : Col c d C
H16 : Col C c d
H15 : BetS q r d
H11 : nCol A B d
H10 : nCol A B c
H9 : BetS d r q
H8 : BetS c p q
H7 : Col A B r
H6 : Col A B p
p,q,r : Point
H14 : OS c d A B
H13 : not (Meet A B c d)
H12 : neq c d
H5 : neq A B
H4 : neq C d
H3 : neq c d
H2 : neq C c
H1 : Col C c d
H0 : BetS C c d
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col A d B) by (conclude lemma_collinear4).
-----
Lemma lemma_parallelcollinear1 : forall A B C c d, TP A B c d -> BetS C c d -> TP A B C d.
Proof.
intros.
assert (Col C c d) by (conclude_def Col ).
assert (neq C c) by (forward_using lemma_betweennotequal).
assert (neq c d) by (forward_using lemma_betweennotequal).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)) by (conclude_def TP ).
let Tf:=fresh in assert (Tf:exists p q r, (Col A B p /\\ Col A B r /\\ BetS c p q /\\ BetS d r q /\\ nCol A B c /\\ nCol A B d)) by (conclude_def OS );destruct Tf as [p[q[r]]];spliter.
assert (BetS q r d) by (conclude axiom_betweennesssymmetry).
assert (Col C c d) by (conclude_def Col ).
assert (Col c d C) by (forward_using lemma_collinearorder).
assert (BetS d c C) by (conclude axiom_betweennesssymmetry).
assert (BetS q p c) by (conclude axiom_betweennesssymmetry).
assert (~ eq p r).
assert (Col q p c) by (conclude_def Col ).
assert (~ Col q d C).
intro.
assert (Col d c C) by (conclude_def Col ).
assert (Col C d c) by (forward_using lemma_collinearorder).
assert (Col C d q) by (forward_using lemma_collinearorder).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert (Col d c q) by (conclude lemma_collinear4).
assert (Col c q d) by (forward_using lemma_collinearorder).
assert (Col c q p) by (forward_using lemma_collinearorder).
assert (neq q c) by (forward_using lemma_betweennotequal).
assert (neq c q) by (conclude lemma_inequalitysymmetric).
assert (Col q d p) by (conclude lemma_collinear4).
assert (Col q r d) by (conclude_def Col ).
assert (Col q d r) by (forward_using lemma_collinearorder).
assert (neq q d) by (forward_using lemma_betweennotequal).
assert (Col d p r) by (conclude lemma_collinear4).
assert (Col B p r) by (conclude lemma_collinear4).
assert (Col B A p) by (forward_using lemma_collinearorder).
assert (Col B p A) by (forward_using lemma_collinearorder).
assert (Col B A r) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A p r) by (conclude lemma_collinear4).
assert (~ neq B p).
intro.
assert (Col p r A) by (conclude lemma_collinear4).
assert (Col p r d) by (forward_using lemma_collinearorder).
assert (Col r A d) by (conclude lemma_collinear4).
assert (Col r A B) by (forward_using lemma_collinearorder).
assert (~ neq r A).
assert (Col p A d) by (conclude cn_equalitysub).
assert (Col p A B) by (forward_using lemma_collinearorder).
assert (~ neq p A).
intro.
assert (Col A d B) by (conclude lemma_collinear4).

*****
H52 : Col A d B
H51 : neq p A
H50 : Col p A B
H49 : Col p A d
H48 : not (neq r A)
H47 : Col r A B
H46 : Col r A d
H45 : Col p r d
H44 : Col p r A
H43 : neq B p
H42 : Col A p r
H41 : neq B A
H40 : Col B A r
H39 : Col B p A
H38 : Col B A p
H37 : Col B p r
H36 : Col d p r
H35 : neq q d
H34 : Col q d r
H33 : Col q r d
H32 : Col q d p
H31 : neq c q
H30 : neq q c
H29 : Col c q p
H28 : Col c q d
H27 : Col d c q
H26 : neq C d
H25 : Col C d q
H24 : Col C d c
H23 : Col d c C
H22 : Col q d C
H21 : Col q p c
H20 : not (eq p r)
H19 : BetS q p c
H18 : BetS d c C
H17 : Col c d C
H16 : Col C c d
H15 : BetS q r d
H11 : nCol A B d
H10 : nCol A B c
H9 : BetS d r q
H8 : BetS c p q
H7 : Col A B r
H6 : Col A B p
p,q,r : Point
H14 : OS c d A B
H13 : not (Meet A B c d)
H12 : neq c d
H5 : neq A B
H4 : neq C d
H3 : neq c d
H2 : neq C c
H1 : Col C c d
H0 : BetS C c d
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col A B d) by (forward_using lemma_collinearorder).
-----
Lemma lemma_parallelcollinear1 : forall A B C c d, TP A B c d -> BetS C c d -> TP A B C d.
Proof.
intros.
assert (Col C c d) by (conclude_def Col ).
assert (neq C c) by (forward_using lemma_betweennotequal).
assert (neq c d) by (forward_using lemma_betweennotequal).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)) by (conclude_def TP ).
let Tf:=fresh in assert (Tf:exists p q r, (Col A B p /\\ Col A B r /\\ BetS c p q /\\ BetS d r q /\\ nCol A B c /\\ nCol A B d)) by (conclude_def OS );destruct Tf as [p[q[r]]];spliter.
assert (BetS q r d) by (conclude axiom_betweennesssymmetry).
assert (Col C c d) by (conclude_def Col ).
assert (Col c d C) by (forward_using lemma_collinearorder).
assert (BetS d c C) by (conclude axiom_betweennesssymmetry).
assert (BetS q p c) by (conclude axiom_betweennesssymmetry).
assert (~ eq p r).
assert (Col q p c) by (conclude_def Col ).
assert (~ Col q d C).
intro.
assert (Col d c C) by (conclude_def Col ).
assert (Col C d c) by (forward_using lemma_collinearorder).
assert (Col C d q) by (forward_using lemma_collinearorder).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert (Col d c q) by (conclude lemma_collinear4).
assert (Col c q d) by (forward_using lemma_collinearorder).
assert (Col c q p) by (forward_using lemma_collinearorder).
assert (neq q c) by (forward_using lemma_betweennotequal).
assert (neq c q) by (conclude lemma_inequalitysymmetric).
assert (Col q d p) by (conclude lemma_collinear4).
assert (Col q r d) by (conclude_def Col ).
assert (Col q d r) by (forward_using lemma_collinearorder).
assert (neq q d) by (forward_using lemma_betweennotequal).
assert (Col d p r) by (conclude lemma_collinear4).
assert (Col B p r) by (conclude lemma_collinear4).
assert (Col B A p) by (forward_using lemma_collinearorder).
assert (Col B p A) by (forward_using lemma_collinearorder).
assert (Col B A r) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A p r) by (conclude lemma_collinear4).
assert (~ neq B p).
intro.
assert (Col p r A) by (conclude lemma_collinear4).
assert (Col p r d) by (forward_using lemma_collinearorder).
assert (Col r A d) by (conclude lemma_collinear4).
assert (Col r A B) by (forward_using lemma_collinearorder).
assert (~ neq r A).
assert (Col p A d) by (conclude cn_equalitysub).
assert (Col p A B) by (forward_using lemma_collinearorder).
assert (~ neq p A).
intro.
assert (Col A d B) by (conclude lemma_collinear4).
assert (Col A B d) by (forward_using lemma_collinearorder).

*****
H53 : Col A B d
H52 : Col A d B
H51 : neq p A
H50 : Col p A B
H49 : Col p A d
H48 : not (neq r A)
H47 : Col r A B
H46 : Col r A d
H45 : Col p r d
H44 : Col p r A
H43 : neq B p
H42 : Col A p r
H41 : neq B A
H40 : Col B A r
H39 : Col B p A
H38 : Col B A p
H37 : Col B p r
H36 : Col d p r
H35 : neq q d
H34 : Col q d r
H33 : Col q r d
H32 : Col q d p
H31 : neq c q
H30 : neq q c
H29 : Col c q p
H28 : Col c q d
H27 : Col d c q
H26 : neq C d
H25 : Col C d q
H24 : Col C d c
H23 : Col d c C
H22 : Col q d C
H21 : Col q p c
H20 : not (eq p r)
H19 : BetS q p c
H18 : BetS d c C
H17 : Col c d C
H16 : Col C c d
H15 : BetS q r d
H11 : nCol A B d
H10 : nCol A B c
H9 : BetS d r q
H8 : BetS c p q
H7 : Col A B r
H6 : Col A B p
p,q,r : Point
H14 : OS c d A B
H13 : not (Meet A B c d)
H12 : neq c d
H5 : neq A B
H4 : neq C d
H3 : neq c d
H2 : neq C c
H1 : Col C c d
H0 : BetS C c d
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma lemma_parallelcollinear1 : forall A B C c d, TP A B c d -> BetS C c d -> TP A B C d.
Proof.
intros.
assert (Col C c d) by (conclude_def Col ).
assert (neq C c) by (forward_using lemma_betweennotequal).
assert (neq c d) by (forward_using lemma_betweennotequal).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)) by (conclude_def TP ).
let Tf:=fresh in assert (Tf:exists p q r, (Col A B p /\\ Col A B r /\\ BetS c p q /\\ BetS d r q /\\ nCol A B c /\\ nCol A B d)) by (conclude_def OS );destruct Tf as [p[q[r]]];spliter.
assert (BetS q r d) by (conclude axiom_betweennesssymmetry).
assert (Col C c d) by (conclude_def Col ).
assert (Col c d C) by (forward_using lemma_collinearorder).
assert (BetS d c C) by (conclude axiom_betweennesssymmetry).
assert (BetS q p c) by (conclude axiom_betweennesssymmetry).
assert (~ eq p r).
assert (Col q p c) by (conclude_def Col ).
assert (~ Col q d C).
intro.
assert (Col d c C) by (conclude_def Col ).
assert (Col C d c) by (forward_using lemma_collinearorder).
assert (Col C d q) by (forward_using lemma_collinearorder).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert (Col d c q) by (conclude lemma_collinear4).
assert (Col c q d) by (forward_using lemma_collinearorder).
assert (Col c q p) by (forward_using lemma_collinearorder).
assert (neq q c) by (forward_using lemma_betweennotequal).
assert (neq c q) by (conclude lemma_inequalitysymmetric).
assert (Col q d p) by (conclude lemma_collinear4).
assert (Col q r d) by (conclude_def Col ).
assert (Col q d r) by (forward_using lemma_collinearorder).
assert (neq q d) by (forward_using lemma_betweennotequal).
assert (Col d p r) by (conclude lemma_collinear4).
assert (Col B p r) by (conclude lemma_collinear4).
assert (Col B A p) by (forward_using lemma_collinearorder).
assert (Col B p A) by (forward_using lemma_collinearorder).
assert (Col B A r) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A p r) by (conclude lemma_collinear4).
assert (~ neq B p).
intro.
assert (Col p r A) by (conclude lemma_collinear4).
assert (Col p r d) by (forward_using lemma_collinearorder).
assert (Col r A d) by (conclude lemma_collinear4).
assert (Col r A B) by (forward_using lemma_collinearorder).
assert (~ neq r A).
assert (Col p A d) by (conclude cn_equalitysub).
assert (Col p A B) by (forward_using lemma_collinearorder).
assert (~ neq p A).

*****
H51 : not (neq p A)
H50 : Col p A B
H49 : Col p A d
H48 : not (neq r A)
H47 : Col r A B
H46 : Col r A d
H45 : Col p r d
H44 : Col p r A
H43 : neq B p
H42 : Col A p r
H41 : neq B A
H40 : Col B A r
H39 : Col B p A
H38 : Col B A p
H37 : Col B p r
H36 : Col d p r
H35 : neq q d
H34 : Col q d r
H33 : Col q r d
H32 : Col q d p
H31 : neq c q
H30 : neq q c
H29 : Col c q p
H28 : Col c q d
H27 : Col d c q
H26 : neq C d
H25 : Col C d q
H24 : Col C d c
H23 : Col d c C
H22 : Col q d C
H21 : Col q p c
H20 : not (eq p r)
H19 : BetS q p c
H18 : BetS d c C
H17 : Col c d C
H16 : Col C c d
H15 : BetS q r d
H11 : nCol A B d
H10 : nCol A B c
H9 : BetS d r q
H8 : BetS c p q
H7 : Col A B r
H6 : Col A B p
p,q,r : Point
H14 : OS c d A B
H13 : not (Meet A B c d)
H12 : neq c d
H5 : neq A B
H4 : neq C d
H3 : neq c d
H2 : neq C c
H1 : Col C c d
H0 : BetS C c d
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (eq A p) by (conclude lemma_equalitysymmetric).
-----
Lemma lemma_parallelcollinear1 : forall A B C c d, TP A B c d -> BetS C c d -> TP A B C d.
Proof.
intros.
assert (Col C c d) by (conclude_def Col ).
assert (neq C c) by (forward_using lemma_betweennotequal).
assert (neq c d) by (forward_using lemma_betweennotequal).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)) by (conclude_def TP ).
let Tf:=fresh in assert (Tf:exists p q r, (Col A B p /\\ Col A B r /\\ BetS c p q /\\ BetS d r q /\\ nCol A B c /\\ nCol A B d)) by (conclude_def OS );destruct Tf as [p[q[r]]];spliter.
assert (BetS q r d) by (conclude axiom_betweennesssymmetry).
assert (Col C c d) by (conclude_def Col ).
assert (Col c d C) by (forward_using lemma_collinearorder).
assert (BetS d c C) by (conclude axiom_betweennesssymmetry).
assert (BetS q p c) by (conclude axiom_betweennesssymmetry).
assert (~ eq p r).
assert (Col q p c) by (conclude_def Col ).
assert (~ Col q d C).
intro.
assert (Col d c C) by (conclude_def Col ).
assert (Col C d c) by (forward_using lemma_collinearorder).
assert (Col C d q) by (forward_using lemma_collinearorder).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert (Col d c q) by (conclude lemma_collinear4).
assert (Col c q d) by (forward_using lemma_collinearorder).
assert (Col c q p) by (forward_using lemma_collinearorder).
assert (neq q c) by (forward_using lemma_betweennotequal).
assert (neq c q) by (conclude lemma_inequalitysymmetric).
assert (Col q d p) by (conclude lemma_collinear4).
assert (Col q r d) by (conclude_def Col ).
assert (Col q d r) by (forward_using lemma_collinearorder).
assert (neq q d) by (forward_using lemma_betweennotequal).
assert (Col d p r) by (conclude lemma_collinear4).
assert (Col B p r) by (conclude lemma_collinear4).
assert (Col B A p) by (forward_using lemma_collinearorder).
assert (Col B p A) by (forward_using lemma_collinearorder).
assert (Col B A r) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A p r) by (conclude lemma_collinear4).
assert (~ neq B p).
intro.
assert (Col p r A) by (conclude lemma_collinear4).
assert (Col p r d) by (forward_using lemma_collinearorder).
assert (Col r A d) by (conclude lemma_collinear4).
assert (Col r A B) by (forward_using lemma_collinearorder).
assert (~ neq r A).
assert (Col p A d) by (conclude cn_equalitysub).
assert (Col p A B) by (forward_using lemma_collinearorder).
assert (~ neq p A).
assert (eq A p) by (conclude lemma_equalitysymmetric).

*****
H52 : eq A p
H51 : not (neq p A)
H50 : Col p A B
H49 : Col p A d
H48 : not (neq r A)
H47 : Col r A B
H46 : Col r A d
H45 : Col p r d
H44 : Col p r A
H43 : neq B p
H42 : Col A p r
H41 : neq B A
H40 : Col B A r
H39 : Col B p A
H38 : Col B A p
H37 : Col B p r
H36 : Col d p r
H35 : neq q d
H34 : Col q d r
H33 : Col q r d
H32 : Col q d p
H31 : neq c q
H30 : neq q c
H29 : Col c q p
H28 : Col c q d
H27 : Col d c q
H26 : neq C d
H25 : Col C d q
H24 : Col C d c
H23 : Col d c C
H22 : Col q d C
H21 : Col q p c
H20 : not (eq p r)
H19 : BetS q p c
H18 : BetS d c C
H17 : Col c d C
H16 : Col C c d
H15 : BetS q r d
H11 : nCol A B d
H10 : nCol A B c
H9 : BetS d r q
H8 : BetS c p q
H7 : Col A B r
H6 : Col A B p
p,q,r : Point
H14 : OS c d A B
H13 : not (Meet A B c d)
H12 : neq c d
H5 : neq A B
H4 : neq C d
H3 : neq c d
H2 : neq C c
H1 : Col C c d
H0 : BetS C c d
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (eq r p) by (conclude cn_equalitytransitive).
-----
Lemma lemma_parallelcollinear1 : forall A B C c d, TP A B c d -> BetS C c d -> TP A B C d.
Proof.
intros.
assert (Col C c d) by (conclude_def Col ).
assert (neq C c) by (forward_using lemma_betweennotequal).
assert (neq c d) by (forward_using lemma_betweennotequal).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)) by (conclude_def TP ).
let Tf:=fresh in assert (Tf:exists p q r, (Col A B p /\\ Col A B r /\\ BetS c p q /\\ BetS d r q /\\ nCol A B c /\\ nCol A B d)) by (conclude_def OS );destruct Tf as [p[q[r]]];spliter.
assert (BetS q r d) by (conclude axiom_betweennesssymmetry).
assert (Col C c d) by (conclude_def Col ).
assert (Col c d C) by (forward_using lemma_collinearorder).
assert (BetS d c C) by (conclude axiom_betweennesssymmetry).
assert (BetS q p c) by (conclude axiom_betweennesssymmetry).
assert (~ eq p r).
assert (Col q p c) by (conclude_def Col ).
assert (~ Col q d C).
intro.
assert (Col d c C) by (conclude_def Col ).
assert (Col C d c) by (forward_using lemma_collinearorder).
assert (Col C d q) by (forward_using lemma_collinearorder).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert (Col d c q) by (conclude lemma_collinear4).
assert (Col c q d) by (forward_using lemma_collinearorder).
assert (Col c q p) by (forward_using lemma_collinearorder).
assert (neq q c) by (forward_using lemma_betweennotequal).
assert (neq c q) by (conclude lemma_inequalitysymmetric).
assert (Col q d p) by (conclude lemma_collinear4).
assert (Col q r d) by (conclude_def Col ).
assert (Col q d r) by (forward_using lemma_collinearorder).
assert (neq q d) by (forward_using lemma_betweennotequal).
assert (Col d p r) by (conclude lemma_collinear4).
assert (Col B p r) by (conclude lemma_collinear4).
assert (Col B A p) by (forward_using lemma_collinearorder).
assert (Col B p A) by (forward_using lemma_collinearorder).
assert (Col B A r) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A p r) by (conclude lemma_collinear4).
assert (~ neq B p).
intro.
assert (Col p r A) by (conclude lemma_collinear4).
assert (Col p r d) by (forward_using lemma_collinearorder).
assert (Col r A d) by (conclude lemma_collinear4).
assert (Col r A B) by (forward_using lemma_collinearorder).
assert (~ neq r A).
assert (Col p A d) by (conclude cn_equalitysub).
assert (Col p A B) by (forward_using lemma_collinearorder).
assert (~ neq p A).
assert (eq A p) by (conclude lemma_equalitysymmetric).
assert (eq r p) by (conclude cn_equalitytransitive).

*****
H53 : eq r p
H52 : eq A p
H51 : not (neq p A)
H50 : Col p A B
H49 : Col p A d
H48 : not (neq r A)
H47 : Col r A B
H46 : Col r A d
H45 : Col p r d
H44 : Col p r A
H43 : neq B p
H42 : Col A p r
H41 : neq B A
H40 : Col B A r
H39 : Col B p A
H38 : Col B A p
H37 : Col B p r
H36 : Col d p r
H35 : neq q d
H34 : Col q d r
H33 : Col q r d
H32 : Col q d p
H31 : neq c q
H30 : neq q c
H29 : Col c q p
H28 : Col c q d
H27 : Col d c q
H26 : neq C d
H25 : Col C d q
H24 : Col C d c
H23 : Col d c C
H22 : Col q d C
H21 : Col q p c
H20 : not (eq p r)
H19 : BetS q p c
H18 : BetS d c C
H17 : Col c d C
H16 : Col C c d
H15 : BetS q r d
H11 : nCol A B d
H10 : nCol A B c
H9 : BetS d r q
H8 : BetS c p q
H7 : Col A B r
H6 : Col A B p
p,q,r : Point
H14 : OS c d A B
H13 : not (Meet A B c d)
H12 : neq c d
H5 : neq A B
H4 : neq C d
H3 : neq c d
H2 : neq C c
H1 : Col C c d
H0 : BetS C c d
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col q p d) by (conclude cn_equalitysub).
-----
Lemma lemma_parallelcollinear1 : forall A B C c d, TP A B c d -> BetS C c d -> TP A B C d.
Proof.
intros.
assert (Col C c d) by (conclude_def Col ).
assert (neq C c) by (forward_using lemma_betweennotequal).
assert (neq c d) by (forward_using lemma_betweennotequal).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)) by (conclude_def TP ).
let Tf:=fresh in assert (Tf:exists p q r, (Col A B p /\\ Col A B r /\\ BetS c p q /\\ BetS d r q /\\ nCol A B c /\\ nCol A B d)) by (conclude_def OS );destruct Tf as [p[q[r]]];spliter.
assert (BetS q r d) by (conclude axiom_betweennesssymmetry).
assert (Col C c d) by (conclude_def Col ).
assert (Col c d C) by (forward_using lemma_collinearorder).
assert (BetS d c C) by (conclude axiom_betweennesssymmetry).
assert (BetS q p c) by (conclude axiom_betweennesssymmetry).
assert (~ eq p r).
assert (Col q p c) by (conclude_def Col ).
assert (~ Col q d C).
intro.
assert (Col d c C) by (conclude_def Col ).
assert (Col C d c) by (forward_using lemma_collinearorder).
assert (Col C d q) by (forward_using lemma_collinearorder).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert (Col d c q) by (conclude lemma_collinear4).
assert (Col c q d) by (forward_using lemma_collinearorder).
assert (Col c q p) by (forward_using lemma_collinearorder).
assert (neq q c) by (forward_using lemma_betweennotequal).
assert (neq c q) by (conclude lemma_inequalitysymmetric).
assert (Col q d p) by (conclude lemma_collinear4).
assert (Col q r d) by (conclude_def Col ).
assert (Col q d r) by (forward_using lemma_collinearorder).
assert (neq q d) by (forward_using lemma_betweennotequal).
assert (Col d p r) by (conclude lemma_collinear4).
assert (Col B p r) by (conclude lemma_collinear4).
assert (Col B A p) by (forward_using lemma_collinearorder).
assert (Col B p A) by (forward_using lemma_collinearorder).
assert (Col B A r) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A p r) by (conclude lemma_collinear4).
assert (~ neq B p).
intro.
assert (Col p r A) by (conclude lemma_collinear4).
assert (Col p r d) by (forward_using lemma_collinearorder).
assert (Col r A d) by (conclude lemma_collinear4).
assert (Col r A B) by (forward_using lemma_collinearorder).
assert (~ neq r A).
assert (Col p A d) by (conclude cn_equalitysub).
assert (Col p A B) by (forward_using lemma_collinearorder).
assert (~ neq p A).
assert (eq A p) by (conclude lemma_equalitysymmetric).
assert (eq r p) by (conclude cn_equalitytransitive).
assert (Col q p d) by (conclude cn_equalitysub).

*****
H54 : Col q p d
H53 : eq r p
H52 : eq A p
H51 : not (neq p A)
H50 : Col p A B
H49 : Col p A d
H48 : not (neq r A)
H47 : Col r A B
H46 : Col r A d
H45 : Col p r d
H44 : Col p r A
H43 : neq B p
H42 : Col A p r
H41 : neq B A
H40 : Col B A r
H39 : Col B p A
H38 : Col B A p
H37 : Col B p r
H36 : Col d p r
H35 : neq q d
H34 : Col q d r
H33 : Col q r d
H32 : Col q d p
H31 : neq c q
H30 : neq q c
H29 : Col c q p
H28 : Col c q d
H27 : Col d c q
H26 : neq C d
H25 : Col C d q
H24 : Col C d c
H23 : Col d c C
H22 : Col q d C
H21 : Col q p c
H20 : not (eq p r)
H19 : BetS q p c
H18 : BetS d c C
H17 : Col c d C
H16 : Col C c d
H15 : BetS q r d
H11 : nCol A B d
H10 : nCol A B c
H9 : BetS d r q
H8 : BetS c p q
H7 : Col A B r
H6 : Col A B p
p,q,r : Point
H14 : OS c d A B
H13 : not (Meet A B c d)
H12 : neq c d
H5 : neq A B
H4 : neq C d
H3 : neq c d
H2 : neq C c
H1 : Col C c d
H0 : BetS C c d
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (neq q p) by (forward_using lemma_betweennotequal).
-----
Lemma lemma_parallelcollinear1 : forall A B C c d, TP A B c d -> BetS C c d -> TP A B C d.
Proof.
intros.
assert (Col C c d) by (conclude_def Col ).
assert (neq C c) by (forward_using lemma_betweennotequal).
assert (neq c d) by (forward_using lemma_betweennotequal).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)) by (conclude_def TP ).
let Tf:=fresh in assert (Tf:exists p q r, (Col A B p /\\ Col A B r /\\ BetS c p q /\\ BetS d r q /\\ nCol A B c /\\ nCol A B d)) by (conclude_def OS );destruct Tf as [p[q[r]]];spliter.
assert (BetS q r d) by (conclude axiom_betweennesssymmetry).
assert (Col C c d) by (conclude_def Col ).
assert (Col c d C) by (forward_using lemma_collinearorder).
assert (BetS d c C) by (conclude axiom_betweennesssymmetry).
assert (BetS q p c) by (conclude axiom_betweennesssymmetry).
assert (~ eq p r).
assert (Col q p c) by (conclude_def Col ).
assert (~ Col q d C).
intro.
assert (Col d c C) by (conclude_def Col ).
assert (Col C d c) by (forward_using lemma_collinearorder).
assert (Col C d q) by (forward_using lemma_collinearorder).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert (Col d c q) by (conclude lemma_collinear4).
assert (Col c q d) by (forward_using lemma_collinearorder).
assert (Col c q p) by (forward_using lemma_collinearorder).
assert (neq q c) by (forward_using lemma_betweennotequal).
assert (neq c q) by (conclude lemma_inequalitysymmetric).
assert (Col q d p) by (conclude lemma_collinear4).
assert (Col q r d) by (conclude_def Col ).
assert (Col q d r) by (forward_using lemma_collinearorder).
assert (neq q d) by (forward_using lemma_betweennotequal).
assert (Col d p r) by (conclude lemma_collinear4).
assert (Col B p r) by (conclude lemma_collinear4).
assert (Col B A p) by (forward_using lemma_collinearorder).
assert (Col B p A) by (forward_using lemma_collinearorder).
assert (Col B A r) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A p r) by (conclude lemma_collinear4).
assert (~ neq B p).
intro.
assert (Col p r A) by (conclude lemma_collinear4).
assert (Col p r d) by (forward_using lemma_collinearorder).
assert (Col r A d) by (conclude lemma_collinear4).
assert (Col r A B) by (forward_using lemma_collinearorder).
assert (~ neq r A).
assert (Col p A d) by (conclude cn_equalitysub).
assert (Col p A B) by (forward_using lemma_collinearorder).
assert (~ neq p A).
assert (eq A p) by (conclude lemma_equalitysymmetric).
assert (eq r p) by (conclude cn_equalitytransitive).
assert (Col q p d) by (conclude cn_equalitysub).
assert (neq q p) by (forward_using lemma_betweennotequal).

*****
H55 : neq q p
H54 : Col q p d
H53 : eq r p
H52 : eq A p
H51 : not (neq p A)
H50 : Col p A B
H49 : Col p A d
H48 : not (neq r A)
H47 : Col r A B
H46 : Col r A d
H45 : Col p r d
H44 : Col p r A
H43 : neq B p
H42 : Col A p r
H41 : neq B A
H40 : Col B A r
H39 : Col B p A
H38 : Col B A p
H37 : Col B p r
H36 : Col d p r
H35 : neq q d
H34 : Col q d r
H33 : Col q r d
H32 : Col q d p
H31 : neq c q
H30 : neq q c
H29 : Col c q p
H28 : Col c q d
H27 : Col d c q
H26 : neq C d
H25 : Col C d q
H24 : Col C d c
H23 : Col d c C
H22 : Col q d C
H21 : Col q p c
H20 : not (eq p r)
H19 : BetS q p c
H18 : BetS d c C
H17 : Col c d C
H16 : Col C c d
H15 : BetS q r d
H11 : nCol A B d
H10 : nCol A B c
H9 : BetS d r q
H8 : BetS c p q
H7 : Col A B r
H6 : Col A B p
p,q,r : Point
H14 : OS c d A B
H13 : not (Meet A B c d)
H12 : neq c d
H5 : neq A B
H4 : neq C d
H3 : neq c d
H2 : neq C c
H1 : Col C c d
H0 : BetS C c d
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col p c d) by (conclude lemma_collinear4).
-----
Lemma lemma_parallelcollinear1 : forall A B C c d, TP A B c d -> BetS C c d -> TP A B C d.
Proof.
intros.
assert (Col C c d) by (conclude_def Col ).
assert (neq C c) by (forward_using lemma_betweennotequal).
assert (neq c d) by (forward_using lemma_betweennotequal).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)) by (conclude_def TP ).
let Tf:=fresh in assert (Tf:exists p q r, (Col A B p /\\ Col A B r /\\ BetS c p q /\\ BetS d r q /\\ nCol A B c /\\ nCol A B d)) by (conclude_def OS );destruct Tf as [p[q[r]]];spliter.
assert (BetS q r d) by (conclude axiom_betweennesssymmetry).
assert (Col C c d) by (conclude_def Col ).
assert (Col c d C) by (forward_using lemma_collinearorder).
assert (BetS d c C) by (conclude axiom_betweennesssymmetry).
assert (BetS q p c) by (conclude axiom_betweennesssymmetry).
assert (~ eq p r).
assert (Col q p c) by (conclude_def Col ).
assert (~ Col q d C).
intro.
assert (Col d c C) by (conclude_def Col ).
assert (Col C d c) by (forward_using lemma_collinearorder).
assert (Col C d q) by (forward_using lemma_collinearorder).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert (Col d c q) by (conclude lemma_collinear4).
assert (Col c q d) by (forward_using lemma_collinearorder).
assert (Col c q p) by (forward_using lemma_collinearorder).
assert (neq q c) by (forward_using lemma_betweennotequal).
assert (neq c q) by (conclude lemma_inequalitysymmetric).
assert (Col q d p) by (conclude lemma_collinear4).
assert (Col q r d) by (conclude_def Col ).
assert (Col q d r) by (forward_using lemma_collinearorder).
assert (neq q d) by (forward_using lemma_betweennotequal).
assert (Col d p r) by (conclude lemma_collinear4).
assert (Col B p r) by (conclude lemma_collinear4).
assert (Col B A p) by (forward_using lemma_collinearorder).
assert (Col B p A) by (forward_using lemma_collinearorder).
assert (Col B A r) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A p r) by (conclude lemma_collinear4).
assert (~ neq B p).
intro.
assert (Col p r A) by (conclude lemma_collinear4).
assert (Col p r d) by (forward_using lemma_collinearorder).
assert (Col r A d) by (conclude lemma_collinear4).
assert (Col r A B) by (forward_using lemma_collinearorder).
assert (~ neq r A).
assert (Col p A d) by (conclude cn_equalitysub).
assert (Col p A B) by (forward_using lemma_collinearorder).
assert (~ neq p A).
assert (eq A p) by (conclude lemma_equalitysymmetric).
assert (eq r p) by (conclude cn_equalitytransitive).
assert (Col q p d) by (conclude cn_equalitysub).
assert (neq q p) by (forward_using lemma_betweennotequal).
assert (Col p c d) by (conclude lemma_collinear4).

*****
H56 : Col p c d
H55 : neq q p
H54 : Col q p d
H53 : eq r p
H52 : eq A p
H51 : not (neq p A)
H50 : Col p A B
H49 : Col p A d
H48 : not (neq r A)
H47 : Col r A B
H46 : Col r A d
H45 : Col p r d
H44 : Col p r A
H43 : neq B p
H42 : Col A p r
H41 : neq B A
H40 : Col B A r
H39 : Col B p A
H38 : Col B A p
H37 : Col B p r
H36 : Col d p r
H35 : neq q d
H34 : Col q d r
H33 : Col q r d
H32 : Col q d p
H31 : neq c q
H30 : neq q c
H29 : Col c q p
H28 : Col c q d
H27 : Col d c q
H26 : neq C d
H25 : Col C d q
H24 : Col C d c
H23 : Col d c C
H22 : Col q d C
H21 : Col q p c
H20 : not (eq p r)
H19 : BetS q p c
H18 : BetS d c C
H17 : Col c d C
H16 : Col C c d
H15 : BetS q r d
H11 : nCol A B d
H10 : nCol A B c
H9 : BetS d r q
H8 : BetS c p q
H7 : Col A B r
H6 : Col A B p
p,q,r : Point
H14 : OS c d A B
H13 : not (Meet A B c d)
H12 : neq c d
H5 : neq A B
H4 : neq C d
H3 : neq c d
H2 : neq C c
H1 : Col C c d
H0 : BetS C c d
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col c d p) by (forward_using lemma_collinearorder).
-----
Lemma lemma_parallelcollinear1 : forall A B C c d, TP A B c d -> BetS C c d -> TP A B C d.
Proof.
intros.
assert (Col C c d) by (conclude_def Col ).
assert (neq C c) by (forward_using lemma_betweennotequal).
assert (neq c d) by (forward_using lemma_betweennotequal).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)) by (conclude_def TP ).
let Tf:=fresh in assert (Tf:exists p q r, (Col A B p /\\ Col A B r /\\ BetS c p q /\\ BetS d r q /\\ nCol A B c /\\ nCol A B d)) by (conclude_def OS );destruct Tf as [p[q[r]]];spliter.
assert (BetS q r d) by (conclude axiom_betweennesssymmetry).
assert (Col C c d) by (conclude_def Col ).
assert (Col c d C) by (forward_using lemma_collinearorder).
assert (BetS d c C) by (conclude axiom_betweennesssymmetry).
assert (BetS q p c) by (conclude axiom_betweennesssymmetry).
assert (~ eq p r).
assert (Col q p c) by (conclude_def Col ).
assert (~ Col q d C).
intro.
assert (Col d c C) by (conclude_def Col ).
assert (Col C d c) by (forward_using lemma_collinearorder).
assert (Col C d q) by (forward_using lemma_collinearorder).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert (Col d c q) by (conclude lemma_collinear4).
assert (Col c q d) by (forward_using lemma_collinearorder).
assert (Col c q p) by (forward_using lemma_collinearorder).
assert (neq q c) by (forward_using lemma_betweennotequal).
assert (neq c q) by (conclude lemma_inequalitysymmetric).
assert (Col q d p) by (conclude lemma_collinear4).
assert (Col q r d) by (conclude_def Col ).
assert (Col q d r) by (forward_using lemma_collinearorder).
assert (neq q d) by (forward_using lemma_betweennotequal).
assert (Col d p r) by (conclude lemma_collinear4).
assert (Col B p r) by (conclude lemma_collinear4).
assert (Col B A p) by (forward_using lemma_collinearorder).
assert (Col B p A) by (forward_using lemma_collinearorder).
assert (Col B A r) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A p r) by (conclude lemma_collinear4).
assert (~ neq B p).
intro.
assert (Col p r A) by (conclude lemma_collinear4).
assert (Col p r d) by (forward_using lemma_collinearorder).
assert (Col r A d) by (conclude lemma_collinear4).
assert (Col r A B) by (forward_using lemma_collinearorder).
assert (~ neq r A).
assert (Col p A d) by (conclude cn_equalitysub).
assert (Col p A B) by (forward_using lemma_collinearorder).
assert (~ neq p A).
assert (eq A p) by (conclude lemma_equalitysymmetric).
assert (eq r p) by (conclude cn_equalitytransitive).
assert (Col q p d) by (conclude cn_equalitysub).
assert (neq q p) by (forward_using lemma_betweennotequal).
assert (Col p c d) by (conclude lemma_collinear4).
assert (Col c d p) by (forward_using lemma_collinearorder).

*****
H57 : Col c d p
H56 : Col p c d
H55 : neq q p
H54 : Col q p d
H53 : eq r p
H52 : eq A p
H51 : not (neq p A)
H50 : Col p A B
H49 : Col p A d
H48 : not (neq r A)
H47 : Col r A B
H46 : Col r A d
H45 : Col p r d
H44 : Col p r A
H43 : neq B p
H42 : Col A p r
H41 : neq B A
H40 : Col B A r
H39 : Col B p A
H38 : Col B A p
H37 : Col B p r
H36 : Col d p r
H35 : neq q d
H34 : Col q d r
H33 : Col q r d
H32 : Col q d p
H31 : neq c q
H30 : neq q c
H29 : Col c q p
H28 : Col c q d
H27 : Col d c q
H26 : neq C d
H25 : Col C d q
H24 : Col C d c
H23 : Col d c C
H22 : Col q d C
H21 : Col q p c
H20 : not (eq p r)
H19 : BetS q p c
H18 : BetS d c C
H17 : Col c d C
H16 : Col C c d
H15 : BetS q r d
H11 : nCol A B d
H10 : nCol A B c
H9 : BetS d r q
H8 : BetS c p q
H7 : Col A B r
H6 : Col A B p
p,q,r : Point
H14 : OS c d A B
H13 : not (Meet A B c d)
H12 : neq c d
H5 : neq A B
H4 : neq C d
H3 : neq c d
H2 : neq C c
H1 : Col C c d
H0 : BetS C c d
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Meet A B c d) by (conclude_def Meet ).
-----
Lemma lemma_parallelcollinear1 : forall A B C c d, TP A B c d -> BetS C c d -> TP A B C d.
Proof.
intros.
assert (Col C c d) by (conclude_def Col ).
assert (neq C c) by (forward_using lemma_betweennotequal).
assert (neq c d) by (forward_using lemma_betweennotequal).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)) by (conclude_def TP ).
let Tf:=fresh in assert (Tf:exists p q r, (Col A B p /\\ Col A B r /\\ BetS c p q /\\ BetS d r q /\\ nCol A B c /\\ nCol A B d)) by (conclude_def OS );destruct Tf as [p[q[r]]];spliter.
assert (BetS q r d) by (conclude axiom_betweennesssymmetry).
assert (Col C c d) by (conclude_def Col ).
assert (Col c d C) by (forward_using lemma_collinearorder).
assert (BetS d c C) by (conclude axiom_betweennesssymmetry).
assert (BetS q p c) by (conclude axiom_betweennesssymmetry).
assert (~ eq p r).
assert (Col q p c) by (conclude_def Col ).
assert (~ Col q d C).
intro.
assert (Col d c C) by (conclude_def Col ).
assert (Col C d c) by (forward_using lemma_collinearorder).
assert (Col C d q) by (forward_using lemma_collinearorder).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert (Col d c q) by (conclude lemma_collinear4).
assert (Col c q d) by (forward_using lemma_collinearorder).
assert (Col c q p) by (forward_using lemma_collinearorder).
assert (neq q c) by (forward_using lemma_betweennotequal).
assert (neq c q) by (conclude lemma_inequalitysymmetric).
assert (Col q d p) by (conclude lemma_collinear4).
assert (Col q r d) by (conclude_def Col ).
assert (Col q d r) by (forward_using lemma_collinearorder).
assert (neq q d) by (forward_using lemma_betweennotequal).
assert (Col d p r) by (conclude lemma_collinear4).
assert (Col B p r) by (conclude lemma_collinear4).
assert (Col B A p) by (forward_using lemma_collinearorder).
assert (Col B p A) by (forward_using lemma_collinearorder).
assert (Col B A r) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A p r) by (conclude lemma_collinear4).
assert (~ neq B p).
intro.
assert (Col p r A) by (conclude lemma_collinear4).
assert (Col p r d) by (forward_using lemma_collinearorder).
assert (Col r A d) by (conclude lemma_collinear4).
assert (Col r A B) by (forward_using lemma_collinearorder).
assert (~ neq r A).
assert (Col p A d) by (conclude cn_equalitysub).
assert (Col p A B) by (forward_using lemma_collinearorder).
assert (~ neq p A).
assert (eq A p) by (conclude lemma_equalitysymmetric).
assert (eq r p) by (conclude cn_equalitytransitive).
assert (Col q p d) by (conclude cn_equalitysub).
assert (neq q p) by (forward_using lemma_betweennotequal).
assert (Col p c d) by (conclude lemma_collinear4).
assert (Col c d p) by (forward_using lemma_collinearorder).
assert (Meet A B c d) by (conclude_def Meet ).

*****
H58 : Meet A B c d
H57 : Col c d p
H56 : Col p c d
H55 : neq q p
H54 : Col q p d
H53 : eq r p
H52 : eq A p
H51 : not (neq p A)
H50 : Col p A B
H49 : Col p A d
H48 : not (neq r A)
H47 : Col r A B
H46 : Col r A d
H45 : Col p r d
H44 : Col p r A
H43 : neq B p
H42 : Col A p r
H41 : neq B A
H40 : Col B A r
H39 : Col B p A
H38 : Col B A p
H37 : Col B p r
H36 : Col d p r
H35 : neq q d
H34 : Col q d r
H33 : Col q r d
H32 : Col q d p
H31 : neq c q
H30 : neq q c
H29 : Col c q p
H28 : Col c q d
H27 : Col d c q
H26 : neq C d
H25 : Col C d q
H24 : Col C d c
H23 : Col d c C
H22 : Col q d C
H21 : Col q p c
H20 : not (eq p r)
H19 : BetS q p c
H18 : BetS d c C
H17 : Col c d C
H16 : Col C c d
H15 : BetS q r d
H11 : nCol A B d
H10 : nCol A B c
H9 : BetS d r q
H8 : BetS c p q
H7 : Col A B r
H6 : Col A B p
p,q,r : Point
H14 : OS c d A B
H13 : not (Meet A B c d)
H12 : neq c d
H5 : neq A B
H4 : neq C d
H3 : neq c d
H2 : neq C c
H1 : Col C c d
H0 : BetS C c d
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma lemma_parallelcollinear1 : forall A B C c d, TP A B c d -> BetS C c d -> TP A B C d.
Proof.
intros.
assert (Col C c d) by (conclude_def Col ).
assert (neq C c) by (forward_using lemma_betweennotequal).
assert (neq c d) by (forward_using lemma_betweennotequal).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)) by (conclude_def TP ).
let Tf:=fresh in assert (Tf:exists p q r, (Col A B p /\\ Col A B r /\\ BetS c p q /\\ BetS d r q /\\ nCol A B c /\\ nCol A B d)) by (conclude_def OS );destruct Tf as [p[q[r]]];spliter.
assert (BetS q r d) by (conclude axiom_betweennesssymmetry).
assert (Col C c d) by (conclude_def Col ).
assert (Col c d C) by (forward_using lemma_collinearorder).
assert (BetS d c C) by (conclude axiom_betweennesssymmetry).
assert (BetS q p c) by (conclude axiom_betweennesssymmetry).
assert (~ eq p r).
assert (Col q p c) by (conclude_def Col ).
assert (~ Col q d C).
intro.
assert (Col d c C) by (conclude_def Col ).
assert (Col C d c) by (forward_using lemma_collinearorder).
assert (Col C d q) by (forward_using lemma_collinearorder).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert (Col d c q) by (conclude lemma_collinear4).
assert (Col c q d) by (forward_using lemma_collinearorder).
assert (Col c q p) by (forward_using lemma_collinearorder).
assert (neq q c) by (forward_using lemma_betweennotequal).
assert (neq c q) by (conclude lemma_inequalitysymmetric).
assert (Col q d p) by (conclude lemma_collinear4).
assert (Col q r d) by (conclude_def Col ).
assert (Col q d r) by (forward_using lemma_collinearorder).
assert (neq q d) by (forward_using lemma_betweennotequal).
assert (Col d p r) by (conclude lemma_collinear4).
assert (Col B p r) by (conclude lemma_collinear4).
assert (Col B A p) by (forward_using lemma_collinearorder).
assert (Col B p A) by (forward_using lemma_collinearorder).
assert (Col B A r) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A p r) by (conclude lemma_collinear4).
assert (~ neq B p).

*****
H43 : not (neq B p)
H42 : Col A p r
H41 : neq B A
H40 : Col B A r
H39 : Col B p A
H38 : Col B A p
H37 : Col B p r
H36 : Col d p r
H35 : neq q d
H34 : Col q d r
H33 : Col q r d
H32 : Col q d p
H31 : neq c q
H30 : neq q c
H29 : Col c q p
H28 : Col c q d
H27 : Col d c q
H26 : neq C d
H25 : Col C d q
H24 : Col C d c
H23 : Col d c C
H22 : Col q d C
H21 : Col q p c
H20 : not (eq p r)
H19 : BetS q p c
H18 : BetS d c C
H17 : Col c d C
H16 : Col C c d
H15 : BetS q r d
H11 : nCol A B d
H10 : nCol A B c
H9 : BetS d r q
H8 : BetS c p q
H7 : Col A B r
H6 : Col A B p
p,q,r : Point
H14 : OS c d A B
H13 : not (Meet A B c d)
H12 : neq c d
H5 : neq A B
H4 : neq C d
H3 : neq c d
H2 : neq C c
H1 : Col C c d
H0 : BetS C c d
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (neq A p) by (conclude cn_equalitysub).
-----
Lemma lemma_parallelcollinear1 : forall A B C c d, TP A B c d -> BetS C c d -> TP A B C d.
Proof.
intros.
assert (Col C c d) by (conclude_def Col ).
assert (neq C c) by (forward_using lemma_betweennotequal).
assert (neq c d) by (forward_using lemma_betweennotequal).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)) by (conclude_def TP ).
let Tf:=fresh in assert (Tf:exists p q r, (Col A B p /\\ Col A B r /\\ BetS c p q /\\ BetS d r q /\\ nCol A B c /\\ nCol A B d)) by (conclude_def OS );destruct Tf as [p[q[r]]];spliter.
assert (BetS q r d) by (conclude axiom_betweennesssymmetry).
assert (Col C c d) by (conclude_def Col ).
assert (Col c d C) by (forward_using lemma_collinearorder).
assert (BetS d c C) by (conclude axiom_betweennesssymmetry).
assert (BetS q p c) by (conclude axiom_betweennesssymmetry).
assert (~ eq p r).
assert (Col q p c) by (conclude_def Col ).
assert (~ Col q d C).
intro.
assert (Col d c C) by (conclude_def Col ).
assert (Col C d c) by (forward_using lemma_collinearorder).
assert (Col C d q) by (forward_using lemma_collinearorder).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert (Col d c q) by (conclude lemma_collinear4).
assert (Col c q d) by (forward_using lemma_collinearorder).
assert (Col c q p) by (forward_using lemma_collinearorder).
assert (neq q c) by (forward_using lemma_betweennotequal).
assert (neq c q) by (conclude lemma_inequalitysymmetric).
assert (Col q d p) by (conclude lemma_collinear4).
assert (Col q r d) by (conclude_def Col ).
assert (Col q d r) by (forward_using lemma_collinearorder).
assert (neq q d) by (forward_using lemma_betweennotequal).
assert (Col d p r) by (conclude lemma_collinear4).
assert (Col B p r) by (conclude lemma_collinear4).
assert (Col B A p) by (forward_using lemma_collinearorder).
assert (Col B p A) by (forward_using lemma_collinearorder).
assert (Col B A r) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A p r) by (conclude lemma_collinear4).
assert (~ neq B p).
assert (neq A p) by (conclude cn_equalitysub).

*****
H44 : neq A p
H43 : not (neq B p)
H42 : Col A p r
H41 : neq B A
H40 : Col B A r
H39 : Col B p A
H38 : Col B A p
H37 : Col B p r
H36 : Col d p r
H35 : neq q d
H34 : Col q d r
H33 : Col q r d
H32 : Col q d p
H31 : neq c q
H30 : neq q c
H29 : Col c q p
H28 : Col c q d
H27 : Col d c q
H26 : neq C d
H25 : Col C d q
H24 : Col C d c
H23 : Col d c C
H22 : Col q d C
H21 : Col q p c
H20 : not (eq p r)
H19 : BetS q p c
H18 : BetS d c C
H17 : Col c d C
H16 : Col C c d
H15 : BetS q r d
H11 : nCol A B d
H10 : nCol A B c
H9 : BetS d r q
H8 : BetS c p q
H7 : Col A B r
H6 : Col A B p
p,q,r : Point
H14 : OS c d A B
H13 : not (Meet A B c d)
H12 : neq c d
H5 : neq A B
H4 : neq C d
H3 : neq c d
H2 : neq C c
H1 : Col C c d
H0 : BetS C c d
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col A p B) by (forward_using lemma_collinearorder).
-----
Lemma lemma_parallelcollinear1 : forall A B C c d, TP A B c d -> BetS C c d -> TP A B C d.
Proof.
intros.
assert (Col C c d) by (conclude_def Col ).
assert (neq C c) by (forward_using lemma_betweennotequal).
assert (neq c d) by (forward_using lemma_betweennotequal).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)) by (conclude_def TP ).
let Tf:=fresh in assert (Tf:exists p q r, (Col A B p /\\ Col A B r /\\ BetS c p q /\\ BetS d r q /\\ nCol A B c /\\ nCol A B d)) by (conclude_def OS );destruct Tf as [p[q[r]]];spliter.
assert (BetS q r d) by (conclude axiom_betweennesssymmetry).
assert (Col C c d) by (conclude_def Col ).
assert (Col c d C) by (forward_using lemma_collinearorder).
assert (BetS d c C) by (conclude axiom_betweennesssymmetry).
assert (BetS q p c) by (conclude axiom_betweennesssymmetry).
assert (~ eq p r).
assert (Col q p c) by (conclude_def Col ).
assert (~ Col q d C).
intro.
assert (Col d c C) by (conclude_def Col ).
assert (Col C d c) by (forward_using lemma_collinearorder).
assert (Col C d q) by (forward_using lemma_collinearorder).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert (Col d c q) by (conclude lemma_collinear4).
assert (Col c q d) by (forward_using lemma_collinearorder).
assert (Col c q p) by (forward_using lemma_collinearorder).
assert (neq q c) by (forward_using lemma_betweennotequal).
assert (neq c q) by (conclude lemma_inequalitysymmetric).
assert (Col q d p) by (conclude lemma_collinear4).
assert (Col q r d) by (conclude_def Col ).
assert (Col q d r) by (forward_using lemma_collinearorder).
assert (neq q d) by (forward_using lemma_betweennotequal).
assert (Col d p r) by (conclude lemma_collinear4).
assert (Col B p r) by (conclude lemma_collinear4).
assert (Col B A p) by (forward_using lemma_collinearorder).
assert (Col B p A) by (forward_using lemma_collinearorder).
assert (Col B A r) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A p r) by (conclude lemma_collinear4).
assert (~ neq B p).
assert (neq A p) by (conclude cn_equalitysub).
assert (Col A p B) by (forward_using lemma_collinearorder).

*****
H45 : Col A p B
H44 : neq A p
H43 : not (neq B p)
H42 : Col A p r
H41 : neq B A
H40 : Col B A r
H39 : Col B p A
H38 : Col B A p
H37 : Col B p r
H36 : Col d p r
H35 : neq q d
H34 : Col q d r
H33 : Col q r d
H32 : Col q d p
H31 : neq c q
H30 : neq q c
H29 : Col c q p
H28 : Col c q d
H27 : Col d c q
H26 : neq C d
H25 : Col C d q
H24 : Col C d c
H23 : Col d c C
H22 : Col q d C
H21 : Col q p c
H20 : not (eq p r)
H19 : BetS q p c
H18 : BetS d c C
H17 : Col c d C
H16 : Col C c d
H15 : BetS q r d
H11 : nCol A B d
H10 : nCol A B c
H9 : BetS d r q
H8 : BetS c p q
H7 : Col A B r
H6 : Col A B p
p,q,r : Point
H14 : OS c d A B
H13 : not (Meet A B c d)
H12 : neq c d
H5 : neq A B
H4 : neq C d
H3 : neq c d
H2 : neq C c
H1 : Col C c d
H0 : BetS C c d
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (~ eq r A).
-----
Lemma lemma_parallelcollinear1 : forall A B C c d, TP A B c d -> BetS C c d -> TP A B C d.
Proof.
intros.
assert (Col C c d) by (conclude_def Col ).
assert (neq C c) by (forward_using lemma_betweennotequal).
assert (neq c d) by (forward_using lemma_betweennotequal).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)) by (conclude_def TP ).
let Tf:=fresh in assert (Tf:exists p q r, (Col A B p /\\ Col A B r /\\ BetS c p q /\\ BetS d r q /\\ nCol A B c /\\ nCol A B d)) by (conclude_def OS );destruct Tf as [p[q[r]]];spliter.
assert (BetS q r d) by (conclude axiom_betweennesssymmetry).
assert (Col C c d) by (conclude_def Col ).
assert (Col c d C) by (forward_using lemma_collinearorder).
assert (BetS d c C) by (conclude axiom_betweennesssymmetry).
assert (BetS q p c) by (conclude axiom_betweennesssymmetry).
assert (~ eq p r).
assert (Col q p c) by (conclude_def Col ).
assert (~ Col q d C).
intro.
assert (Col d c C) by (conclude_def Col ).
assert (Col C d c) by (forward_using lemma_collinearorder).
assert (Col C d q) by (forward_using lemma_collinearorder).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert (Col d c q) by (conclude lemma_collinear4).
assert (Col c q d) by (forward_using lemma_collinearorder).
assert (Col c q p) by (forward_using lemma_collinearorder).
assert (neq q c) by (forward_using lemma_betweennotequal).
assert (neq c q) by (conclude lemma_inequalitysymmetric).
assert (Col q d p) by (conclude lemma_collinear4).
assert (Col q r d) by (conclude_def Col ).
assert (Col q d r) by (forward_using lemma_collinearorder).
assert (neq q d) by (forward_using lemma_betweennotequal).
assert (Col d p r) by (conclude lemma_collinear4).
assert (Col B p r) by (conclude lemma_collinear4).
assert (Col B A p) by (forward_using lemma_collinearorder).
assert (Col B p A) by (forward_using lemma_collinearorder).
assert (Col B A r) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A p r) by (conclude lemma_collinear4).
assert (~ neq B p).
assert (neq A p) by (conclude cn_equalitysub).
assert (Col A p B) by (forward_using lemma_collinearorder).
assert (~ eq r A).

*****
H45 : Col A p B
H44 : neq A p
H43 : not (neq B p)
H42 : Col A p r
H41 : neq B A
H40 : Col B A r
H39 : Col B p A
H38 : Col B A p
H37 : Col B p r
H36 : Col d p r
H35 : neq q d
H34 : Col q d r
H33 : Col q r d
H32 : Col q d p
H31 : neq c q
H30 : neq q c
H29 : Col c q p
H28 : Col c q d
H27 : Col d c q
H26 : neq C d
H25 : Col C d q
H24 : Col C d c
H23 : Col d c C
H22 : Col q d C
H21 : Col q p c
H20 : not (eq p r)
H19 : BetS q p c
H18 : BetS d c C
H17 : Col c d C
H16 : Col C c d
H15 : BetS q r d
H11 : nCol A B d
H10 : nCol A B c
H9 : BetS d r q
H8 : BetS c p q
H7 : Col A B r
H6 : Col A B p
p,q,r : Point
H14 : OS c d A B
H13 : not (Meet A B c d)
H12 : neq c d
H5 : neq A B
H4 : neq C d
H3 : neq c d
H2 : neq C c
H1 : Col C c d
H0 : BetS C c d
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (eq r A)
+++++
intro.
-----
Lemma lemma_parallelcollinear1 : forall A B C c d, TP A B c d -> BetS C c d -> TP A B C d.
Proof.
intros.
assert (Col C c d) by (conclude_def Col ).
assert (neq C c) by (forward_using lemma_betweennotequal).
assert (neq c d) by (forward_using lemma_betweennotequal).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)) by (conclude_def TP ).
let Tf:=fresh in assert (Tf:exists p q r, (Col A B p /\\ Col A B r /\\ BetS c p q /\\ BetS d r q /\\ nCol A B c /\\ nCol A B d)) by (conclude_def OS );destruct Tf as [p[q[r]]];spliter.
assert (BetS q r d) by (conclude axiom_betweennesssymmetry).
assert (Col C c d) by (conclude_def Col ).
assert (Col c d C) by (forward_using lemma_collinearorder).
assert (BetS d c C) by (conclude axiom_betweennesssymmetry).
assert (BetS q p c) by (conclude axiom_betweennesssymmetry).
assert (~ eq p r).
assert (Col q p c) by (conclude_def Col ).
assert (~ Col q d C).
intro.
assert (Col d c C) by (conclude_def Col ).
assert (Col C d c) by (forward_using lemma_collinearorder).
assert (Col C d q) by (forward_using lemma_collinearorder).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert (Col d c q) by (conclude lemma_collinear4).
assert (Col c q d) by (forward_using lemma_collinearorder).
assert (Col c q p) by (forward_using lemma_collinearorder).
assert (neq q c) by (forward_using lemma_betweennotequal).
assert (neq c q) by (conclude lemma_inequalitysymmetric).
assert (Col q d p) by (conclude lemma_collinear4).
assert (Col q r d) by (conclude_def Col ).
assert (Col q d r) by (forward_using lemma_collinearorder).
assert (neq q d) by (forward_using lemma_betweennotequal).
assert (Col d p r) by (conclude lemma_collinear4).
assert (Col B p r) by (conclude lemma_collinear4).
assert (Col B A p) by (forward_using lemma_collinearorder).
assert (Col B p A) by (forward_using lemma_collinearorder).
assert (Col B A r) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A p r) by (conclude lemma_collinear4).
assert (~ neq B p).
assert (neq A p) by (conclude cn_equalitysub).
assert (Col A p B) by (forward_using lemma_collinearorder).
assert (~ eq r A).
intro.

*****
H46 : eq r A
H45 : Col A p B
H44 : neq A p
H43 : not (neq B p)
H42 : Col A p r
H41 : neq B A
H40 : Col B A r
H39 : Col B p A
H38 : Col B A p
H37 : Col B p r
H36 : Col d p r
H35 : neq q d
H34 : Col q d r
H33 : Col q r d
H32 : Col q d p
H31 : neq c q
H30 : neq q c
H29 : Col c q p
H28 : Col c q d
H27 : Col d c q
H26 : neq C d
H25 : Col C d q
H24 : Col C d c
H23 : Col d c C
H22 : Col q d C
H21 : Col q p c
H20 : not (eq p r)
H19 : BetS q p c
H18 : BetS d c C
H17 : Col c d C
H16 : Col C c d
H15 : BetS q r d
H11 : nCol A B d
H10 : nCol A B c
H9 : BetS d r q
H8 : BetS c p q
H7 : Col A B r
H6 : Col A B p
p,q,r : Point
H14 : OS c d A B
H13 : not (Meet A B c d)
H12 : neq c d
H5 : neq A B
H4 : neq C d
H3 : neq c d
H2 : neq C c
H1 : Col C c d
H0 : BetS C c d
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col d p A) by (conclude cn_equalitysub).
-----
Lemma lemma_parallelcollinear1 : forall A B C c d, TP A B c d -> BetS C c d -> TP A B C d.
Proof.
intros.
assert (Col C c d) by (conclude_def Col ).
assert (neq C c) by (forward_using lemma_betweennotequal).
assert (neq c d) by (forward_using lemma_betweennotequal).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)) by (conclude_def TP ).
let Tf:=fresh in assert (Tf:exists p q r, (Col A B p /\\ Col A B r /\\ BetS c p q /\\ BetS d r q /\\ nCol A B c /\\ nCol A B d)) by (conclude_def OS );destruct Tf as [p[q[r]]];spliter.
assert (BetS q r d) by (conclude axiom_betweennesssymmetry).
assert (Col C c d) by (conclude_def Col ).
assert (Col c d C) by (forward_using lemma_collinearorder).
assert (BetS d c C) by (conclude axiom_betweennesssymmetry).
assert (BetS q p c) by (conclude axiom_betweennesssymmetry).
assert (~ eq p r).
assert (Col q p c) by (conclude_def Col ).
assert (~ Col q d C).
intro.
assert (Col d c C) by (conclude_def Col ).
assert (Col C d c) by (forward_using lemma_collinearorder).
assert (Col C d q) by (forward_using lemma_collinearorder).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert (Col d c q) by (conclude lemma_collinear4).
assert (Col c q d) by (forward_using lemma_collinearorder).
assert (Col c q p) by (forward_using lemma_collinearorder).
assert (neq q c) by (forward_using lemma_betweennotequal).
assert (neq c q) by (conclude lemma_inequalitysymmetric).
assert (Col q d p) by (conclude lemma_collinear4).
assert (Col q r d) by (conclude_def Col ).
assert (Col q d r) by (forward_using lemma_collinearorder).
assert (neq q d) by (forward_using lemma_betweennotequal).
assert (Col d p r) by (conclude lemma_collinear4).
assert (Col B p r) by (conclude lemma_collinear4).
assert (Col B A p) by (forward_using lemma_collinearorder).
assert (Col B p A) by (forward_using lemma_collinearorder).
assert (Col B A r) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A p r) by (conclude lemma_collinear4).
assert (~ neq B p).
assert (neq A p) by (conclude cn_equalitysub).
assert (Col A p B) by (forward_using lemma_collinearorder).
assert (~ eq r A).
intro.
assert (Col d p A) by (conclude cn_equalitysub).

*****
H47 : Col d p A
H46 : eq r A
H45 : Col A p B
H44 : neq A p
H43 : not (neq B p)
H42 : Col A p r
H41 : neq B A
H40 : Col B A r
H39 : Col B p A
H38 : Col B A p
H37 : Col B p r
H36 : Col d p r
H35 : neq q d
H34 : Col q d r
H33 : Col q r d
H32 : Col q d p
H31 : neq c q
H30 : neq q c
H29 : Col c q p
H28 : Col c q d
H27 : Col d c q
H26 : neq C d
H25 : Col C d q
H24 : Col C d c
H23 : Col d c C
H22 : Col q d C
H21 : Col q p c
H20 : not (eq p r)
H19 : BetS q p c
H18 : BetS d c C
H17 : Col c d C
H16 : Col C c d
H15 : BetS q r d
H11 : nCol A B d
H10 : nCol A B c
H9 : BetS d r q
H8 : BetS c p q
H7 : Col A B r
H6 : Col A B p
p,q,r : Point
H14 : OS c d A B
H13 : not (Meet A B c d)
H12 : neq c d
H5 : neq A B
H4 : neq C d
H3 : neq c d
H2 : neq C c
H1 : Col C c d
H0 : BetS C c d
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col d B A) by (conclude cn_equalitysub).
-----
Lemma lemma_parallelcollinear1 : forall A B C c d, TP A B c d -> BetS C c d -> TP A B C d.
Proof.
intros.
assert (Col C c d) by (conclude_def Col ).
assert (neq C c) by (forward_using lemma_betweennotequal).
assert (neq c d) by (forward_using lemma_betweennotequal).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)) by (conclude_def TP ).
let Tf:=fresh in assert (Tf:exists p q r, (Col A B p /\\ Col A B r /\\ BetS c p q /\\ BetS d r q /\\ nCol A B c /\\ nCol A B d)) by (conclude_def OS );destruct Tf as [p[q[r]]];spliter.
assert (BetS q r d) by (conclude axiom_betweennesssymmetry).
assert (Col C c d) by (conclude_def Col ).
assert (Col c d C) by (forward_using lemma_collinearorder).
assert (BetS d c C) by (conclude axiom_betweennesssymmetry).
assert (BetS q p c) by (conclude axiom_betweennesssymmetry).
assert (~ eq p r).
assert (Col q p c) by (conclude_def Col ).
assert (~ Col q d C).
intro.
assert (Col d c C) by (conclude_def Col ).
assert (Col C d c) by (forward_using lemma_collinearorder).
assert (Col C d q) by (forward_using lemma_collinearorder).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert (Col d c q) by (conclude lemma_collinear4).
assert (Col c q d) by (forward_using lemma_collinearorder).
assert (Col c q p) by (forward_using lemma_collinearorder).
assert (neq q c) by (forward_using lemma_betweennotequal).
assert (neq c q) by (conclude lemma_inequalitysymmetric).
assert (Col q d p) by (conclude lemma_collinear4).
assert (Col q r d) by (conclude_def Col ).
assert (Col q d r) by (forward_using lemma_collinearorder).
assert (neq q d) by (forward_using lemma_betweennotequal).
assert (Col d p r) by (conclude lemma_collinear4).
assert (Col B p r) by (conclude lemma_collinear4).
assert (Col B A p) by (forward_using lemma_collinearorder).
assert (Col B p A) by (forward_using lemma_collinearorder).
assert (Col B A r) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A p r) by (conclude lemma_collinear4).
assert (~ neq B p).
assert (neq A p) by (conclude cn_equalitysub).
assert (Col A p B) by (forward_using lemma_collinearorder).
assert (~ eq r A).
intro.
assert (Col d p A) by (conclude cn_equalitysub).
assert (Col d B A) by (conclude cn_equalitysub).

*****
H48 : Col d B A
H47 : Col d p A
H46 : eq r A
H45 : Col A p B
H44 : neq A p
H43 : not (neq B p)
H42 : Col A p r
H41 : neq B A
H40 : Col B A r
H39 : Col B p A
H38 : Col B A p
H37 : Col B p r
H36 : Col d p r
H35 : neq q d
H34 : Col q d r
H33 : Col q r d
H32 : Col q d p
H31 : neq c q
H30 : neq q c
H29 : Col c q p
H28 : Col c q d
H27 : Col d c q
H26 : neq C d
H25 : Col C d q
H24 : Col C d c
H23 : Col d c C
H22 : Col q d C
H21 : Col q p c
H20 : not (eq p r)
H19 : BetS q p c
H18 : BetS d c C
H17 : Col c d C
H16 : Col C c d
H15 : BetS q r d
H11 : nCol A B d
H10 : nCol A B c
H9 : BetS d r q
H8 : BetS c p q
H7 : Col A B r
H6 : Col A B p
p,q,r : Point
H14 : OS c d A B
H13 : not (Meet A B c d)
H12 : neq c d
H5 : neq A B
H4 : neq C d
H3 : neq c d
H2 : neq C c
H1 : Col C c d
H0 : BetS C c d
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col A B d) by (forward_using lemma_collinearorder).
-----
Lemma lemma_parallelcollinear1 : forall A B C c d, TP A B c d -> BetS C c d -> TP A B C d.
Proof.
intros.
assert (Col C c d) by (conclude_def Col ).
assert (neq C c) by (forward_using lemma_betweennotequal).
assert (neq c d) by (forward_using lemma_betweennotequal).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)) by (conclude_def TP ).
let Tf:=fresh in assert (Tf:exists p q r, (Col A B p /\\ Col A B r /\\ BetS c p q /\\ BetS d r q /\\ nCol A B c /\\ nCol A B d)) by (conclude_def OS );destruct Tf as [p[q[r]]];spliter.
assert (BetS q r d) by (conclude axiom_betweennesssymmetry).
assert (Col C c d) by (conclude_def Col ).
assert (Col c d C) by (forward_using lemma_collinearorder).
assert (BetS d c C) by (conclude axiom_betweennesssymmetry).
assert (BetS q p c) by (conclude axiom_betweennesssymmetry).
assert (~ eq p r).
assert (Col q p c) by (conclude_def Col ).
assert (~ Col q d C).
intro.
assert (Col d c C) by (conclude_def Col ).
assert (Col C d c) by (forward_using lemma_collinearorder).
assert (Col C d q) by (forward_using lemma_collinearorder).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert (Col d c q) by (conclude lemma_collinear4).
assert (Col c q d) by (forward_using lemma_collinearorder).
assert (Col c q p) by (forward_using lemma_collinearorder).
assert (neq q c) by (forward_using lemma_betweennotequal).
assert (neq c q) by (conclude lemma_inequalitysymmetric).
assert (Col q d p) by (conclude lemma_collinear4).
assert (Col q r d) by (conclude_def Col ).
assert (Col q d r) by (forward_using lemma_collinearorder).
assert (neq q d) by (forward_using lemma_betweennotequal).
assert (Col d p r) by (conclude lemma_collinear4).
assert (Col B p r) by (conclude lemma_collinear4).
assert (Col B A p) by (forward_using lemma_collinearorder).
assert (Col B p A) by (forward_using lemma_collinearorder).
assert (Col B A r) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A p r) by (conclude lemma_collinear4).
assert (~ neq B p).
assert (neq A p) by (conclude cn_equalitysub).
assert (Col A p B) by (forward_using lemma_collinearorder).
assert (~ eq r A).
intro.
assert (Col d p A) by (conclude cn_equalitysub).
assert (Col d B A) by (conclude cn_equalitysub).
assert (Col A B d) by (forward_using lemma_collinearorder).

*****
H49 : Col A B d
H48 : Col d B A
H47 : Col d p A
H46 : eq r A
H45 : Col A p B
H44 : neq A p
H43 : not (neq B p)
H42 : Col A p r
H41 : neq B A
H40 : Col B A r
H39 : Col B p A
H38 : Col B A p
H37 : Col B p r
H36 : Col d p r
H35 : neq q d
H34 : Col q d r
H33 : Col q r d
H32 : Col q d p
H31 : neq c q
H30 : neq q c
H29 : Col c q p
H28 : Col c q d
H27 : Col d c q
H26 : neq C d
H25 : Col C d q
H24 : Col C d c
H23 : Col d c C
H22 : Col q d C
H21 : Col q p c
H20 : not (eq p r)
H19 : BetS q p c
H18 : BetS d c C
H17 : Col c d C
H16 : Col C c d
H15 : BetS q r d
H11 : nCol A B d
H10 : nCol A B c
H9 : BetS d r q
H8 : BetS c p q
H7 : Col A B r
H6 : Col A B p
p,q,r : Point
H14 : OS c d A B
H13 : not (Meet A B c d)
H12 : neq c d
H5 : neq A B
H4 : neq C d
H3 : neq c d
H2 : neq C c
H1 : Col C c d
H0 : BetS C c d
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma lemma_parallelcollinear1 : forall A B C c d, TP A B c d -> BetS C c d -> TP A B C d.
Proof.
intros.
assert (Col C c d) by (conclude_def Col ).
assert (neq C c) by (forward_using lemma_betweennotequal).
assert (neq c d) by (forward_using lemma_betweennotequal).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)) by (conclude_def TP ).
let Tf:=fresh in assert (Tf:exists p q r, (Col A B p /\\ Col A B r /\\ BetS c p q /\\ BetS d r q /\\ nCol A B c /\\ nCol A B d)) by (conclude_def OS );destruct Tf as [p[q[r]]];spliter.
assert (BetS q r d) by (conclude axiom_betweennesssymmetry).
assert (Col C c d) by (conclude_def Col ).
assert (Col c d C) by (forward_using lemma_collinearorder).
assert (BetS d c C) by (conclude axiom_betweennesssymmetry).
assert (BetS q p c) by (conclude axiom_betweennesssymmetry).
assert (~ eq p r).
assert (Col q p c) by (conclude_def Col ).
assert (~ Col q d C).
intro.
assert (Col d c C) by (conclude_def Col ).
assert (Col C d c) by (forward_using lemma_collinearorder).
assert (Col C d q) by (forward_using lemma_collinearorder).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert (Col d c q) by (conclude lemma_collinear4).
assert (Col c q d) by (forward_using lemma_collinearorder).
assert (Col c q p) by (forward_using lemma_collinearorder).
assert (neq q c) by (forward_using lemma_betweennotequal).
assert (neq c q) by (conclude lemma_inequalitysymmetric).
assert (Col q d p) by (conclude lemma_collinear4).
assert (Col q r d) by (conclude_def Col ).
assert (Col q d r) by (forward_using lemma_collinearorder).
assert (neq q d) by (forward_using lemma_betweennotequal).
assert (Col d p r) by (conclude lemma_collinear4).
assert (Col B p r) by (conclude lemma_collinear4).
assert (Col B A p) by (forward_using lemma_collinearorder).
assert (Col B p A) by (forward_using lemma_collinearorder).
assert (Col B A r) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A p r) by (conclude lemma_collinear4).
assert (~ neq B p).
assert (neq A p) by (conclude cn_equalitysub).
assert (Col A p B) by (forward_using lemma_collinearorder).
assert (~ eq r A).

*****
H46 : not (eq r A)
H45 : Col A p B
H44 : neq A p
H43 : not (neq B p)
H42 : Col A p r
H41 : neq B A
H40 : Col B A r
H39 : Col B p A
H38 : Col B A p
H37 : Col B p r
H36 : Col d p r
H35 : neq q d
H34 : Col q d r
H33 : Col q r d
H32 : Col q d p
H31 : neq c q
H30 : neq q c
H29 : Col c q p
H28 : Col c q d
H27 : Col d c q
H26 : neq C d
H25 : Col C d q
H24 : Col C d c
H23 : Col d c C
H22 : Col q d C
H21 : Col q p c
H20 : not (eq p r)
H19 : BetS q p c
H18 : BetS d c C
H17 : Col c d C
H16 : Col C c d
H15 : BetS q r d
H11 : nCol A B d
H10 : nCol A B c
H9 : BetS d r q
H8 : BetS c p q
H7 : Col A B r
H6 : Col A B p
p,q,r : Point
H14 : OS c d A B
H13 : not (Meet A B c d)
H12 : neq c d
H5 : neq A B
H4 : neq C d
H3 : neq c d
H2 : neq C c
H1 : Col C c d
H0 : BetS C c d
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col r A B) by (forward_using lemma_collinearorder).
-----
Lemma lemma_parallelcollinear1 : forall A B C c d, TP A B c d -> BetS C c d -> TP A B C d.
Proof.
intros.
assert (Col C c d) by (conclude_def Col ).
assert (neq C c) by (forward_using lemma_betweennotequal).
assert (neq c d) by (forward_using lemma_betweennotequal).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)) by (conclude_def TP ).
let Tf:=fresh in assert (Tf:exists p q r, (Col A B p /\\ Col A B r /\\ BetS c p q /\\ BetS d r q /\\ nCol A B c /\\ nCol A B d)) by (conclude_def OS );destruct Tf as [p[q[r]]];spliter.
assert (BetS q r d) by (conclude axiom_betweennesssymmetry).
assert (Col C c d) by (conclude_def Col ).
assert (Col c d C) by (forward_using lemma_collinearorder).
assert (BetS d c C) by (conclude axiom_betweennesssymmetry).
assert (BetS q p c) by (conclude axiom_betweennesssymmetry).
assert (~ eq p r).
assert (Col q p c) by (conclude_def Col ).
assert (~ Col q d C).
intro.
assert (Col d c C) by (conclude_def Col ).
assert (Col C d c) by (forward_using lemma_collinearorder).
assert (Col C d q) by (forward_using lemma_collinearorder).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert (Col d c q) by (conclude lemma_collinear4).
assert (Col c q d) by (forward_using lemma_collinearorder).
assert (Col c q p) by (forward_using lemma_collinearorder).
assert (neq q c) by (forward_using lemma_betweennotequal).
assert (neq c q) by (conclude lemma_inequalitysymmetric).
assert (Col q d p) by (conclude lemma_collinear4).
assert (Col q r d) by (conclude_def Col ).
assert (Col q d r) by (forward_using lemma_collinearorder).
assert (neq q d) by (forward_using lemma_betweennotequal).
assert (Col d p r) by (conclude lemma_collinear4).
assert (Col B p r) by (conclude lemma_collinear4).
assert (Col B A p) by (forward_using lemma_collinearorder).
assert (Col B p A) by (forward_using lemma_collinearorder).
assert (Col B A r) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A p r) by (conclude lemma_collinear4).
assert (~ neq B p).
assert (neq A p) by (conclude cn_equalitysub).
assert (Col A p B) by (forward_using lemma_collinearorder).
assert (~ eq r A).
assert (Col r A B) by (forward_using lemma_collinearorder).

*****
H47 : Col r A B
H46 : not (eq r A)
H45 : Col A p B
H44 : neq A p
H43 : not (neq B p)
H42 : Col A p r
H41 : neq B A
H40 : Col B A r
H39 : Col B p A
H38 : Col B A p
H37 : Col B p r
H36 : Col d p r
H35 : neq q d
H34 : Col q d r
H33 : Col q r d
H32 : Col q d p
H31 : neq c q
H30 : neq q c
H29 : Col c q p
H28 : Col c q d
H27 : Col d c q
H26 : neq C d
H25 : Col C d q
H24 : Col C d c
H23 : Col d c C
H22 : Col q d C
H21 : Col q p c
H20 : not (eq p r)
H19 : BetS q p c
H18 : BetS d c C
H17 : Col c d C
H16 : Col C c d
H15 : BetS q r d
H11 : nCol A B d
H10 : nCol A B c
H9 : BetS d r q
H8 : BetS c p q
H7 : Col A B r
H6 : Col A B p
p,q,r : Point
H14 : OS c d A B
H13 : not (Meet A B c d)
H12 : neq c d
H5 : neq A B
H4 : neq C d
H3 : neq c d
H2 : neq C c
H1 : Col C c d
H0 : BetS C c d
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col d B r) by (conclude cn_equalitysub).
-----
Lemma lemma_parallelcollinear1 : forall A B C c d, TP A B c d -> BetS C c d -> TP A B C d.
Proof.
intros.
assert (Col C c d) by (conclude_def Col ).
assert (neq C c) by (forward_using lemma_betweennotequal).
assert (neq c d) by (forward_using lemma_betweennotequal).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)) by (conclude_def TP ).
let Tf:=fresh in assert (Tf:exists p q r, (Col A B p /\\ Col A B r /\\ BetS c p q /\\ BetS d r q /\\ nCol A B c /\\ nCol A B d)) by (conclude_def OS );destruct Tf as [p[q[r]]];spliter.
assert (BetS q r d) by (conclude axiom_betweennesssymmetry).
assert (Col C c d) by (conclude_def Col ).
assert (Col c d C) by (forward_using lemma_collinearorder).
assert (BetS d c C) by (conclude axiom_betweennesssymmetry).
assert (BetS q p c) by (conclude axiom_betweennesssymmetry).
assert (~ eq p r).
assert (Col q p c) by (conclude_def Col ).
assert (~ Col q d C).
intro.
assert (Col d c C) by (conclude_def Col ).
assert (Col C d c) by (forward_using lemma_collinearorder).
assert (Col C d q) by (forward_using lemma_collinearorder).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert (Col d c q) by (conclude lemma_collinear4).
assert (Col c q d) by (forward_using lemma_collinearorder).
assert (Col c q p) by (forward_using lemma_collinearorder).
assert (neq q c) by (forward_using lemma_betweennotequal).
assert (neq c q) by (conclude lemma_inequalitysymmetric).
assert (Col q d p) by (conclude lemma_collinear4).
assert (Col q r d) by (conclude_def Col ).
assert (Col q d r) by (forward_using lemma_collinearorder).
assert (neq q d) by (forward_using lemma_betweennotequal).
assert (Col d p r) by (conclude lemma_collinear4).
assert (Col B p r) by (conclude lemma_collinear4).
assert (Col B A p) by (forward_using lemma_collinearorder).
assert (Col B p A) by (forward_using lemma_collinearorder).
assert (Col B A r) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A p r) by (conclude lemma_collinear4).
assert (~ neq B p).
assert (neq A p) by (conclude cn_equalitysub).
assert (Col A p B) by (forward_using lemma_collinearorder).
assert (~ eq r A).
assert (Col r A B) by (forward_using lemma_collinearorder).
assert (Col d B r) by (conclude cn_equalitysub).

*****
H48 : Col d B r
H47 : Col r A B
H46 : not (eq r A)
H45 : Col A p B
H44 : neq A p
H43 : not (neq B p)
H42 : Col A p r
H41 : neq B A
H40 : Col B A r
H39 : Col B p A
H38 : Col B A p
H37 : Col B p r
H36 : Col d p r
H35 : neq q d
H34 : Col q d r
H33 : Col q r d
H32 : Col q d p
H31 : neq c q
H30 : neq q c
H29 : Col c q p
H28 : Col c q d
H27 : Col d c q
H26 : neq C d
H25 : Col C d q
H24 : Col C d c
H23 : Col d c C
H22 : Col q d C
H21 : Col q p c
H20 : not (eq p r)
H19 : BetS q p c
H18 : BetS d c C
H17 : Col c d C
H16 : Col C c d
H15 : BetS q r d
H11 : nCol A B d
H10 : nCol A B c
H9 : BetS d r q
H8 : BetS c p q
H7 : Col A B r
H6 : Col A B p
p,q,r : Point
H14 : OS c d A B
H13 : not (Meet A B c d)
H12 : neq c d
H5 : neq A B
H4 : neq C d
H3 : neq c d
H2 : neq C c
H1 : Col C c d
H0 : BetS C c d
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col r B d) by (forward_using lemma_collinearorder).
-----
Lemma lemma_parallelcollinear1 : forall A B C c d, TP A B c d -> BetS C c d -> TP A B C d.
Proof.
intros.
assert (Col C c d) by (conclude_def Col ).
assert (neq C c) by (forward_using lemma_betweennotequal).
assert (neq c d) by (forward_using lemma_betweennotequal).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)) by (conclude_def TP ).
let Tf:=fresh in assert (Tf:exists p q r, (Col A B p /\\ Col A B r /\\ BetS c p q /\\ BetS d r q /\\ nCol A B c /\\ nCol A B d)) by (conclude_def OS );destruct Tf as [p[q[r]]];spliter.
assert (BetS q r d) by (conclude axiom_betweennesssymmetry).
assert (Col C c d) by (conclude_def Col ).
assert (Col c d C) by (forward_using lemma_collinearorder).
assert (BetS d c C) by (conclude axiom_betweennesssymmetry).
assert (BetS q p c) by (conclude axiom_betweennesssymmetry).
assert (~ eq p r).
assert (Col q p c) by (conclude_def Col ).
assert (~ Col q d C).
intro.
assert (Col d c C) by (conclude_def Col ).
assert (Col C d c) by (forward_using lemma_collinearorder).
assert (Col C d q) by (forward_using lemma_collinearorder).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert (Col d c q) by (conclude lemma_collinear4).
assert (Col c q d) by (forward_using lemma_collinearorder).
assert (Col c q p) by (forward_using lemma_collinearorder).
assert (neq q c) by (forward_using lemma_betweennotequal).
assert (neq c q) by (conclude lemma_inequalitysymmetric).
assert (Col q d p) by (conclude lemma_collinear4).
assert (Col q r d) by (conclude_def Col ).
assert (Col q d r) by (forward_using lemma_collinearorder).
assert (neq q d) by (forward_using lemma_betweennotequal).
assert (Col d p r) by (conclude lemma_collinear4).
assert (Col B p r) by (conclude lemma_collinear4).
assert (Col B A p) by (forward_using lemma_collinearorder).
assert (Col B p A) by (forward_using lemma_collinearorder).
assert (Col B A r) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A p r) by (conclude lemma_collinear4).
assert (~ neq B p).
assert (neq A p) by (conclude cn_equalitysub).
assert (Col A p B) by (forward_using lemma_collinearorder).
assert (~ eq r A).
assert (Col r A B) by (forward_using lemma_collinearorder).
assert (Col d B r) by (conclude cn_equalitysub).
assert (Col r B d) by (forward_using lemma_collinearorder).

*****
H49 : Col r B d
H48 : Col d B r
H47 : Col r A B
H46 : not (eq r A)
H45 : Col A p B
H44 : neq A p
H43 : not (neq B p)
H42 : Col A p r
H41 : neq B A
H40 : Col B A r
H39 : Col B p A
H38 : Col B A p
H37 : Col B p r
H36 : Col d p r
H35 : neq q d
H34 : Col q d r
H33 : Col q r d
H32 : Col q d p
H31 : neq c q
H30 : neq q c
H29 : Col c q p
H28 : Col c q d
H27 : Col d c q
H26 : neq C d
H25 : Col C d q
H24 : Col C d c
H23 : Col d c C
H22 : Col q d C
H21 : Col q p c
H20 : not (eq p r)
H19 : BetS q p c
H18 : BetS d c C
H17 : Col c d C
H16 : Col C c d
H15 : BetS q r d
H11 : nCol A B d
H10 : nCol A B c
H9 : BetS d r q
H8 : BetS c p q
H7 : Col A B r
H6 : Col A B p
p,q,r : Point
H14 : OS c d A B
H13 : not (Meet A B c d)
H12 : neq c d
H5 : neq A B
H4 : neq C d
H3 : neq c d
H2 : neq C c
H1 : Col C c d
H0 : BetS C c d
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col r B A) by (forward_using lemma_collinearorder).
-----
Lemma lemma_parallelcollinear1 : forall A B C c d, TP A B c d -> BetS C c d -> TP A B C d.
Proof.
intros.
assert (Col C c d) by (conclude_def Col ).
assert (neq C c) by (forward_using lemma_betweennotequal).
assert (neq c d) by (forward_using lemma_betweennotequal).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)) by (conclude_def TP ).
let Tf:=fresh in assert (Tf:exists p q r, (Col A B p /\\ Col A B r /\\ BetS c p q /\\ BetS d r q /\\ nCol A B c /\\ nCol A B d)) by (conclude_def OS );destruct Tf as [p[q[r]]];spliter.
assert (BetS q r d) by (conclude axiom_betweennesssymmetry).
assert (Col C c d) by (conclude_def Col ).
assert (Col c d C) by (forward_using lemma_collinearorder).
assert (BetS d c C) by (conclude axiom_betweennesssymmetry).
assert (BetS q p c) by (conclude axiom_betweennesssymmetry).
assert (~ eq p r).
assert (Col q p c) by (conclude_def Col ).
assert (~ Col q d C).
intro.
assert (Col d c C) by (conclude_def Col ).
assert (Col C d c) by (forward_using lemma_collinearorder).
assert (Col C d q) by (forward_using lemma_collinearorder).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert (Col d c q) by (conclude lemma_collinear4).
assert (Col c q d) by (forward_using lemma_collinearorder).
assert (Col c q p) by (forward_using lemma_collinearorder).
assert (neq q c) by (forward_using lemma_betweennotequal).
assert (neq c q) by (conclude lemma_inequalitysymmetric).
assert (Col q d p) by (conclude lemma_collinear4).
assert (Col q r d) by (conclude_def Col ).
assert (Col q d r) by (forward_using lemma_collinearorder).
assert (neq q d) by (forward_using lemma_betweennotequal).
assert (Col d p r) by (conclude lemma_collinear4).
assert (Col B p r) by (conclude lemma_collinear4).
assert (Col B A p) by (forward_using lemma_collinearorder).
assert (Col B p A) by (forward_using lemma_collinearorder).
assert (Col B A r) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A p r) by (conclude lemma_collinear4).
assert (~ neq B p).
assert (neq A p) by (conclude cn_equalitysub).
assert (Col A p B) by (forward_using lemma_collinearorder).
assert (~ eq r A).
assert (Col r A B) by (forward_using lemma_collinearorder).
assert (Col d B r) by (conclude cn_equalitysub).
assert (Col r B d) by (forward_using lemma_collinearorder).
assert (Col r B A) by (forward_using lemma_collinearorder).

*****
H50 : Col r B A
H49 : Col r B d
H48 : Col d B r
H47 : Col r A B
H46 : not (eq r A)
H45 : Col A p B
H44 : neq A p
H43 : not (neq B p)
H42 : Col A p r
H41 : neq B A
H40 : Col B A r
H39 : Col B p A
H38 : Col B A p
H37 : Col B p r
H36 : Col d p r
H35 : neq q d
H34 : Col q d r
H33 : Col q r d
H32 : Col q d p
H31 : neq c q
H30 : neq q c
H29 : Col c q p
H28 : Col c q d
H27 : Col d c q
H26 : neq C d
H25 : Col C d q
H24 : Col C d c
H23 : Col d c C
H22 : Col q d C
H21 : Col q p c
H20 : not (eq p r)
H19 : BetS q p c
H18 : BetS d c C
H17 : Col c d C
H16 : Col C c d
H15 : BetS q r d
H11 : nCol A B d
H10 : nCol A B c
H9 : BetS d r q
H8 : BetS c p q
H7 : Col A B r
H6 : Col A B p
p,q,r : Point
H14 : OS c d A B
H13 : not (Meet A B c d)
H12 : neq c d
H5 : neq A B
H4 : neq C d
H3 : neq c d
H2 : neq C c
H1 : Col C c d
H0 : BetS C c d
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (~ neq r B).
-----
Lemma lemma_parallelcollinear1 : forall A B C c d, TP A B c d -> BetS C c d -> TP A B C d.
Proof.
intros.
assert (Col C c d) by (conclude_def Col ).
assert (neq C c) by (forward_using lemma_betweennotequal).
assert (neq c d) by (forward_using lemma_betweennotequal).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)) by (conclude_def TP ).
let Tf:=fresh in assert (Tf:exists p q r, (Col A B p /\\ Col A B r /\\ BetS c p q /\\ BetS d r q /\\ nCol A B c /\\ nCol A B d)) by (conclude_def OS );destruct Tf as [p[q[r]]];spliter.
assert (BetS q r d) by (conclude axiom_betweennesssymmetry).
assert (Col C c d) by (conclude_def Col ).
assert (Col c d C) by (forward_using lemma_collinearorder).
assert (BetS d c C) by (conclude axiom_betweennesssymmetry).
assert (BetS q p c) by (conclude axiom_betweennesssymmetry).
assert (~ eq p r).
assert (Col q p c) by (conclude_def Col ).
assert (~ Col q d C).
intro.
assert (Col d c C) by (conclude_def Col ).
assert (Col C d c) by (forward_using lemma_collinearorder).
assert (Col C d q) by (forward_using lemma_collinearorder).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert (Col d c q) by (conclude lemma_collinear4).
assert (Col c q d) by (forward_using lemma_collinearorder).
assert (Col c q p) by (forward_using lemma_collinearorder).
assert (neq q c) by (forward_using lemma_betweennotequal).
assert (neq c q) by (conclude lemma_inequalitysymmetric).
assert (Col q d p) by (conclude lemma_collinear4).
assert (Col q r d) by (conclude_def Col ).
assert (Col q d r) by (forward_using lemma_collinearorder).
assert (neq q d) by (forward_using lemma_betweennotequal).
assert (Col d p r) by (conclude lemma_collinear4).
assert (Col B p r) by (conclude lemma_collinear4).
assert (Col B A p) by (forward_using lemma_collinearorder).
assert (Col B p A) by (forward_using lemma_collinearorder).
assert (Col B A r) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A p r) by (conclude lemma_collinear4).
assert (~ neq B p).
assert (neq A p) by (conclude cn_equalitysub).
assert (Col A p B) by (forward_using lemma_collinearorder).
assert (~ eq r A).
assert (Col r A B) by (forward_using lemma_collinearorder).
assert (Col d B r) by (conclude cn_equalitysub).
assert (Col r B d) by (forward_using lemma_collinearorder).
assert (Col r B A) by (forward_using lemma_collinearorder).
assert (~ neq r B).

*****
H50 : Col r B A
H49 : Col r B d
H48 : Col d B r
H47 : Col r A B
H46 : not (eq r A)
H45 : Col A p B
H44 : neq A p
H43 : not (neq B p)
H42 : Col A p r
H41 : neq B A
H40 : Col B A r
H39 : Col B p A
H38 : Col B A p
H37 : Col B p r
H36 : Col d p r
H35 : neq q d
H34 : Col q d r
H33 : Col q r d
H32 : Col q d p
H31 : neq c q
H30 : neq q c
H29 : Col c q p
H28 : Col c q d
H27 : Col d c q
H26 : neq C d
H25 : Col C d q
H24 : Col C d c
H23 : Col d c C
H22 : Col q d C
H21 : Col q p c
H20 : not (eq p r)
H19 : BetS q p c
H18 : BetS d c C
H17 : Col c d C
H16 : Col C c d
H15 : BetS q r d
H11 : nCol A B d
H10 : nCol A B c
H9 : BetS d r q
H8 : BetS c p q
H7 : Col A B r
H6 : Col A B p
p,q,r : Point
H14 : OS c d A B
H13 : not (Meet A B c d)
H12 : neq c d
H5 : neq A B
H4 : neq C d
H3 : neq c d
H2 : neq C c
H1 : Col C c d
H0 : BetS C c d
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (neq r B)
+++++
intro.
-----
Lemma lemma_parallelcollinear1 : forall A B C c d, TP A B c d -> BetS C c d -> TP A B C d.
Proof.
intros.
assert (Col C c d) by (conclude_def Col ).
assert (neq C c) by (forward_using lemma_betweennotequal).
assert (neq c d) by (forward_using lemma_betweennotequal).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)) by (conclude_def TP ).
let Tf:=fresh in assert (Tf:exists p q r, (Col A B p /\\ Col A B r /\\ BetS c p q /\\ BetS d r q /\\ nCol A B c /\\ nCol A B d)) by (conclude_def OS );destruct Tf as [p[q[r]]];spliter.
assert (BetS q r d) by (conclude axiom_betweennesssymmetry).
assert (Col C c d) by (conclude_def Col ).
assert (Col c d C) by (forward_using lemma_collinearorder).
assert (BetS d c C) by (conclude axiom_betweennesssymmetry).
assert (BetS q p c) by (conclude axiom_betweennesssymmetry).
assert (~ eq p r).
assert (Col q p c) by (conclude_def Col ).
assert (~ Col q d C).
intro.
assert (Col d c C) by (conclude_def Col ).
assert (Col C d c) by (forward_using lemma_collinearorder).
assert (Col C d q) by (forward_using lemma_collinearorder).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert (Col d c q) by (conclude lemma_collinear4).
assert (Col c q d) by (forward_using lemma_collinearorder).
assert (Col c q p) by (forward_using lemma_collinearorder).
assert (neq q c) by (forward_using lemma_betweennotequal).
assert (neq c q) by (conclude lemma_inequalitysymmetric).
assert (Col q d p) by (conclude lemma_collinear4).
assert (Col q r d) by (conclude_def Col ).
assert (Col q d r) by (forward_using lemma_collinearorder).
assert (neq q d) by (forward_using lemma_betweennotequal).
assert (Col d p r) by (conclude lemma_collinear4).
assert (Col B p r) by (conclude lemma_collinear4).
assert (Col B A p) by (forward_using lemma_collinearorder).
assert (Col B p A) by (forward_using lemma_collinearorder).
assert (Col B A r) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A p r) by (conclude lemma_collinear4).
assert (~ neq B p).
assert (neq A p) by (conclude cn_equalitysub).
assert (Col A p B) by (forward_using lemma_collinearorder).
assert (~ eq r A).
assert (Col r A B) by (forward_using lemma_collinearorder).
assert (Col d B r) by (conclude cn_equalitysub).
assert (Col r B d) by (forward_using lemma_collinearorder).
assert (Col r B A) by (forward_using lemma_collinearorder).
assert (~ neq r B).
intro.

*****
H51 : neq r B
H50 : Col r B A
H49 : Col r B d
H48 : Col d B r
H47 : Col r A B
H46 : not (eq r A)
H45 : Col A p B
H44 : neq A p
H43 : not (neq B p)
H42 : Col A p r
H41 : neq B A
H40 : Col B A r
H39 : Col B p A
H38 : Col B A p
H37 : Col B p r
H36 : Col d p r
H35 : neq q d
H34 : Col q d r
H33 : Col q r d
H32 : Col q d p
H31 : neq c q
H30 : neq q c
H29 : Col c q p
H28 : Col c q d
H27 : Col d c q
H26 : neq C d
H25 : Col C d q
H24 : Col C d c
H23 : Col d c C
H22 : Col q d C
H21 : Col q p c
H20 : not (eq p r)
H19 : BetS q p c
H18 : BetS d c C
H17 : Col c d C
H16 : Col C c d
H15 : BetS q r d
H11 : nCol A B d
H10 : nCol A B c
H9 : BetS d r q
H8 : BetS c p q
H7 : Col A B r
H6 : Col A B p
p,q,r : Point
H14 : OS c d A B
H13 : not (Meet A B c d)
H12 : neq c d
H5 : neq A B
H4 : neq C d
H3 : neq c d
H2 : neq C c
H1 : Col C c d
H0 : BetS C c d
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col B d A) by (conclude lemma_collinear4).
-----
Lemma lemma_parallelcollinear1 : forall A B C c d, TP A B c d -> BetS C c d -> TP A B C d.
Proof.
intros.
assert (Col C c d) by (conclude_def Col ).
assert (neq C c) by (forward_using lemma_betweennotequal).
assert (neq c d) by (forward_using lemma_betweennotequal).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)) by (conclude_def TP ).
let Tf:=fresh in assert (Tf:exists p q r, (Col A B p /\\ Col A B r /\\ BetS c p q /\\ BetS d r q /\\ nCol A B c /\\ nCol A B d)) by (conclude_def OS );destruct Tf as [p[q[r]]];spliter.
assert (BetS q r d) by (conclude axiom_betweennesssymmetry).
assert (Col C c d) by (conclude_def Col ).
assert (Col c d C) by (forward_using lemma_collinearorder).
assert (BetS d c C) by (conclude axiom_betweennesssymmetry).
assert (BetS q p c) by (conclude axiom_betweennesssymmetry).
assert (~ eq p r).
assert (Col q p c) by (conclude_def Col ).
assert (~ Col q d C).
intro.
assert (Col d c C) by (conclude_def Col ).
assert (Col C d c) by (forward_using lemma_collinearorder).
assert (Col C d q) by (forward_using lemma_collinearorder).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert (Col d c q) by (conclude lemma_collinear4).
assert (Col c q d) by (forward_using lemma_collinearorder).
assert (Col c q p) by (forward_using lemma_collinearorder).
assert (neq q c) by (forward_using lemma_betweennotequal).
assert (neq c q) by (conclude lemma_inequalitysymmetric).
assert (Col q d p) by (conclude lemma_collinear4).
assert (Col q r d) by (conclude_def Col ).
assert (Col q d r) by (forward_using lemma_collinearorder).
assert (neq q d) by (forward_using lemma_betweennotequal).
assert (Col d p r) by (conclude lemma_collinear4).
assert (Col B p r) by (conclude lemma_collinear4).
assert (Col B A p) by (forward_using lemma_collinearorder).
assert (Col B p A) by (forward_using lemma_collinearorder).
assert (Col B A r) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A p r) by (conclude lemma_collinear4).
assert (~ neq B p).
assert (neq A p) by (conclude cn_equalitysub).
assert (Col A p B) by (forward_using lemma_collinearorder).
assert (~ eq r A).
assert (Col r A B) by (forward_using lemma_collinearorder).
assert (Col d B r) by (conclude cn_equalitysub).
assert (Col r B d) by (forward_using lemma_collinearorder).
assert (Col r B A) by (forward_using lemma_collinearorder).
assert (~ neq r B).
intro.
assert (Col B d A) by (conclude lemma_collinear4).

*****
H52 : Col B d A
H51 : neq r B
H50 : Col r B A
H49 : Col r B d
H48 : Col d B r
H47 : Col r A B
H46 : not (eq r A)
H45 : Col A p B
H44 : neq A p
H43 : not (neq B p)
H42 : Col A p r
H41 : neq B A
H40 : Col B A r
H39 : Col B p A
H38 : Col B A p
H37 : Col B p r
H36 : Col d p r
H35 : neq q d
H34 : Col q d r
H33 : Col q r d
H32 : Col q d p
H31 : neq c q
H30 : neq q c
H29 : Col c q p
H28 : Col c q d
H27 : Col d c q
H26 : neq C d
H25 : Col C d q
H24 : Col C d c
H23 : Col d c C
H22 : Col q d C
H21 : Col q p c
H20 : not (eq p r)
H19 : BetS q p c
H18 : BetS d c C
H17 : Col c d C
H16 : Col C c d
H15 : BetS q r d
H11 : nCol A B d
H10 : nCol A B c
H9 : BetS d r q
H8 : BetS c p q
H7 : Col A B r
H6 : Col A B p
p,q,r : Point
H14 : OS c d A B
H13 : not (Meet A B c d)
H12 : neq c d
H5 : neq A B
H4 : neq C d
H3 : neq c d
H2 : neq C c
H1 : Col C c d
H0 : BetS C c d
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col A B d) by (forward_using lemma_collinearorder).
-----
Lemma lemma_parallelcollinear1 : forall A B C c d, TP A B c d -> BetS C c d -> TP A B C d.
Proof.
intros.
assert (Col C c d) by (conclude_def Col ).
assert (neq C c) by (forward_using lemma_betweennotequal).
assert (neq c d) by (forward_using lemma_betweennotequal).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)) by (conclude_def TP ).
let Tf:=fresh in assert (Tf:exists p q r, (Col A B p /\\ Col A B r /\\ BetS c p q /\\ BetS d r q /\\ nCol A B c /\\ nCol A B d)) by (conclude_def OS );destruct Tf as [p[q[r]]];spliter.
assert (BetS q r d) by (conclude axiom_betweennesssymmetry).
assert (Col C c d) by (conclude_def Col ).
assert (Col c d C) by (forward_using lemma_collinearorder).
assert (BetS d c C) by (conclude axiom_betweennesssymmetry).
assert (BetS q p c) by (conclude axiom_betweennesssymmetry).
assert (~ eq p r).
assert (Col q p c) by (conclude_def Col ).
assert (~ Col q d C).
intro.
assert (Col d c C) by (conclude_def Col ).
assert (Col C d c) by (forward_using lemma_collinearorder).
assert (Col C d q) by (forward_using lemma_collinearorder).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert (Col d c q) by (conclude lemma_collinear4).
assert (Col c q d) by (forward_using lemma_collinearorder).
assert (Col c q p) by (forward_using lemma_collinearorder).
assert (neq q c) by (forward_using lemma_betweennotequal).
assert (neq c q) by (conclude lemma_inequalitysymmetric).
assert (Col q d p) by (conclude lemma_collinear4).
assert (Col q r d) by (conclude_def Col ).
assert (Col q d r) by (forward_using lemma_collinearorder).
assert (neq q d) by (forward_using lemma_betweennotequal).
assert (Col d p r) by (conclude lemma_collinear4).
assert (Col B p r) by (conclude lemma_collinear4).
assert (Col B A p) by (forward_using lemma_collinearorder).
assert (Col B p A) by (forward_using lemma_collinearorder).
assert (Col B A r) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A p r) by (conclude lemma_collinear4).
assert (~ neq B p).
assert (neq A p) by (conclude cn_equalitysub).
assert (Col A p B) by (forward_using lemma_collinearorder).
assert (~ eq r A).
assert (Col r A B) by (forward_using lemma_collinearorder).
assert (Col d B r) by (conclude cn_equalitysub).
assert (Col r B d) by (forward_using lemma_collinearorder).
assert (Col r B A) by (forward_using lemma_collinearorder).
assert (~ neq r B).
intro.
assert (Col B d A) by (conclude lemma_collinear4).
assert (Col A B d) by (forward_using lemma_collinearorder).

*****
H53 : Col A B d
H52 : Col B d A
H51 : neq r B
H50 : Col r B A
H49 : Col r B d
H48 : Col d B r
H47 : Col r A B
H46 : not (eq r A)
H45 : Col A p B
H44 : neq A p
H43 : not (neq B p)
H42 : Col A p r
H41 : neq B A
H40 : Col B A r
H39 : Col B p A
H38 : Col B A p
H37 : Col B p r
H36 : Col d p r
H35 : neq q d
H34 : Col q d r
H33 : Col q r d
H32 : Col q d p
H31 : neq c q
H30 : neq q c
H29 : Col c q p
H28 : Col c q d
H27 : Col d c q
H26 : neq C d
H25 : Col C d q
H24 : Col C d c
H23 : Col d c C
H22 : Col q d C
H21 : Col q p c
H20 : not (eq p r)
H19 : BetS q p c
H18 : BetS d c C
H17 : Col c d C
H16 : Col C c d
H15 : BetS q r d
H11 : nCol A B d
H10 : nCol A B c
H9 : BetS d r q
H8 : BetS c p q
H7 : Col A B r
H6 : Col A B p
p,q,r : Point
H14 : OS c d A B
H13 : not (Meet A B c d)
H12 : neq c d
H5 : neq A B
H4 : neq C d
H3 : neq c d
H2 : neq C c
H1 : Col C c d
H0 : BetS C c d
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma lemma_parallelcollinear1 : forall A B C c d, TP A B c d -> BetS C c d -> TP A B C d.
Proof.
intros.
assert (Col C c d) by (conclude_def Col ).
assert (neq C c) by (forward_using lemma_betweennotequal).
assert (neq c d) by (forward_using lemma_betweennotequal).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert ((neq A B /\\ neq c d /\\ ~ Meet A B c d /\\ OS c d A B)) by (conclude_def TP ).
let Tf:=fresh in assert (Tf:exists p q r, (Col A B p /\\ Col A B r /\\ BetS c p q /\\ BetS d r q /\\ nCol A B c /\\ nCol A B d)) by (conclude_def OS );destruct Tf as [p[q[r]]];spliter.
assert (BetS q r d) by (conclude axiom_betweennesssymmetry).
assert (Col C c d) by (conclude_def Col ).
assert (Col c d C) by (forward_using lemma_collinearorder).
assert (BetS d c C) by (conclude axiom_betweennesssymmetry).
assert (BetS q p c) by (conclude axiom_betweennesssymmetry).
assert (~ eq p r).
assert (Col q p c) by (conclude_def Col ).
assert (~ Col q d C).
intro.
assert (Col d c C) by (conclude_def Col ).
assert (Col C d c) by (forward_using lemma_collinearorder).
assert (Col C d q) by (forward_using lemma_collinearorder).
assert (neq C d) by (forward_using lemma_betweennotequal).
assert (Col d c q) by (conclude lemma_collinear4).
assert (Col c q d) by (forward_using lemma_collinearorder).
assert (Col c q p) by (forward_using lemma_collinearorder).
assert (neq q c) by (forward_using lemma_betweennotequal).
assert (neq c q) by (conclude lemma_inequalitysymmetric).
assert (Col q d p) by (conclude lemma_collinear4).
assert (Col q r d) by (conclude_def Col ).
assert (Col q d r) by (forward_using lemma_collinearorder).
assert (neq q d) by (forward_using lemma_betweennotequal).
assert (Col d p r) by (conclude lemma_collinear4).
assert (Col B p r) by (conclude lemma_collinear4).
assert (Col B A p) by (forward_using lemma_collinearorder).
assert (Col B p A) by (forward_using lemma_collinearorder).
assert (Col B A r) by (forward_using lemma_collinearorder).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Col A p r) by (conclude lemma_collinear4).
assert (~ neq B p).
assert (neq A p) by (conclude cn_equalitysub).
assert (Col A p B) by (forward_using lemma_collinearorder).
assert (~ eq r A).
assert (Col r A B) by (forward_using lemma_collinearorder).
assert (Col d B r) by (conclude cn_equalitysub).
assert (Col r B d) by (forward_using lemma_collinearorder).
assert (Col r B A) by (forward_using lemma_collinearorder).
assert (~ neq r B).

*****
H51 : not (neq r B)
H50 : Col r B A
H49 : Col r B d
H48 : Col d B r
H47 : Col r A B
H46 : not (eq r A)
H45 : Col A p B
H44 : neq A p
H43 : not (neq B p)
H42 : Col A p r
H41 : neq B A
H40 : Col B A r
H39 : Col B p A
H38 : Col B A p
H37 : Col B p r
H36 : Col d p r
H35 : neq q d
H34 : Col q d r
H33 : Col q r d
H32 : Col q d p
H31 : neq c q
H30 : neq q c
H29 : Col c q p
H28 : Col c q d
H27 : Col d c q
H26 : neq C d
H25 : Col C d q
H24 : Col C d c
H23 : Col d c C
H22 : Col q d C
H21 : Col q p c
H20 : not (eq p r)
H19 : BetS q p c
H18 : BetS d c C
H17 : Col c d C
H16 : Col C c d
H15 : BetS q r d
H11 : nCol A B d
H10 : nCol A B c
H9 : BetS d r q
H8 : BetS c p q
H7 : Col A B r
H6 : Col A B p
p,q,r : Point
H14 : OS c d A B
H13 : not (Meet A B c d)
H12 : neq c d
H5 : neq A B
H4 : neq C d
H3 : neq c d
H2 : neq C c
H1 : Col C c d
H0 : BetS C c d
H : TP A B c d
A,B,C,c,d : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
