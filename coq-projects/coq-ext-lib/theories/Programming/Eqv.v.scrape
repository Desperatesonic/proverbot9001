From Coq Require Import Equivalence.
-----
Require Import ExtLib.Core.RelDec.
-----
Class Eqv T := eqv : T -> T -> Prop.
-----
Definition neg_eqv {T} {E:Eqv T} (x:T) (y:T) : Prop := not (eqv x y).
-----
Class EqvWF T :=\n{ eqvWFEqv :> Eqv T\n; eqvWFEquivalence :> Equivalence eqv\n}.
-----
Instance EqvWF_Build {T} {E:Eqv T} {EV:Equivalence eqv} : EqvWF T :=\n  { eqvWFEqv := E ; eqvWFEquivalence := EV }.
-----
Definition eqv_dec {T} {E:Eqv T} {R:RelDec eqv} := rel_dec.
-----
Definition neg_eqv_dec {T} {E:Eqv T} {R:RelDec eqv} x y := negb (rel_dec x y).
-----
Section eqv_decP.
-----
Context {T} {E:Eqv T}.
-----
Context {RD:RelDec eqv} {RDC:RelDec_Correct RD}.
-----
Definition eqv_dec_p (x:T) (y:T) : {eqv x y} + {~eqv x y} := rel_dec_p x y.
-----
Definition neg_eqv_dec_p (x:T) (y:T) : {~eqv x y} + {eqv x y} := neg_rel_dec_p x y.
-----
End eqv_decP.
-----
Module EqvNotation.
-----
Infix "~=!" := eqv_dec (at level 35, no associativity).
-----
Infix "/~=!" := neg_eqv_dec (at level 35, no associativity).
-----
Infix "~=?" := eqv_dec_p (at level 35, no associativity).
-----
Infix "/~=?" := neg_eqv_dec_p (at level 35, no associativity).
-----
Infix "~=" := eqv (at level 70, no associativity).
-----
Infix "/~=" := neg_eqv (at level 70, no associativity).
-----
End EqvNotation.
-----
Import EqvNotation.
-----
Section injection_eqv_equivalence.
-----
Context {T U:Type}.
-----
Context {TE:EqvWF T}.
-----
Context {UE:Eqv U}.
-----
Variable (inj:U -> T).
-----
Variable injResp : forall u1 u2, u1 ~= u2 <-> inj u1 ~= inj u2.
-----
Definition injection_eqv_equivalence : Equivalence (eqv (T:=U)).
-----
Definition injection_eqv_equivalence : Equivalence (eqv (T:=U)).

*****
injResp : forall u1 u2 : U, iff (eqv u1 u2) (eqv (inj u1) (inj u2))
inj : forall _ : U, T
UE : Eqv U
TE : EqvWF T
U : Type
T : Type
*****
Equivalence eqv
+++++
Proof.
-----
Definition injection_eqv_equivalence : Equivalence (eqv (T:=U)).
Proof.

*****
injResp : forall u1 u2 : U, iff (eqv u1 u2) (eqv (inj u1) (inj u2))
inj : forall _ : U, T
UE : Eqv U
TE : EqvWF T
U : Type
T : Type
*****
Equivalence eqv
+++++
repeat constructor.
-----
Definition injection_eqv_equivalence : Equivalence (eqv (T:=U)).
Proof.
repeat constructor.

*****
injResp : forall u1 u2 : U, iff (eqv u1 u2) (eqv (inj u1) (inj u2))
inj : forall _ : U, T
UE : Eqv U
TE : EqvWF T
U : Type
T : Type
*****
Reflexive eqv
+++++
unfold Reflexive.
-----
Definition injection_eqv_equivalence : Equivalence (eqv (T:=U)).
Proof.
repeat constructor.
unfold Reflexive.

*****
injResp : forall u1 u2 : U, iff (eqv u1 u2) (eqv (inj u1) (inj u2))
inj : forall _ : U, T
UE : Eqv U
TE : EqvWF T
U : Type
T : Type
*****
forall x : U, eqv x x
+++++
unfold Symmetric.
-----
Definition injection_eqv_equivalence : Equivalence (eqv (T:=U)).
Proof.
repeat constructor.
unfold Reflexive.
unfold Symmetric.

*****
injResp : forall u1 u2 : U, iff (eqv u1 u2) (eqv (inj u1) (inj u2))
inj : forall _ : U, T
UE : Eqv U
TE : EqvWF T
U : Type
T : Type
*****
forall x : U, eqv x x
+++++
unfold Transitive.
-----
Definition injection_eqv_equivalence : Equivalence (eqv (T:=U)).
Proof.
repeat constructor.
unfold Reflexive.
unfold Symmetric.
unfold Transitive.

*****
injResp : forall u1 u2 : U, iff (eqv u1 u2) (eqv (inj u1) (inj u2))
inj : forall _ : U, T
UE : Eqv U
TE : EqvWF T
U : Type
T : Type
*****
forall x : U, eqv x x
+++++
intros.
-----
Definition injection_eqv_equivalence : Equivalence (eqv (T:=U)).
Proof.
repeat constructor.
unfold Reflexive.
unfold Symmetric.
unfold Transitive.
intros.

*****
x : U
injResp : forall u1 u2 : U, iff (eqv u1 u2) (eqv (inj u1) (inj u2))
inj : forall _ : U, T
UE : Eqv U
TE : EqvWF T
U : Type
T : Type
*****
eqv x x
+++++
apply injResp.
-----
Definition injection_eqv_equivalence : Equivalence (eqv (T:=U)).
Proof.
repeat constructor.
unfold Reflexive.
unfold Symmetric.
unfold Transitive.
intros.
apply injResp.

*****
x : U
injResp : forall u1 u2 : U, iff (eqv u1 u2) (eqv (inj u1) (inj u2))
inj : forall _ : U, T
UE : Eqv U
TE : EqvWF T
U : Type
T : Type
*****
eqv (inj x) (inj x)
+++++
reflexivity.
-----
Definition injection_eqv_equivalence : Equivalence (eqv (T:=U)).
Proof.
repeat constructor.

*****
injResp : forall u1 u2 : U, iff (eqv u1 u2) (eqv (inj u1) (inj u2))
inj : forall _ : U, T
UE : Eqv U
TE : EqvWF T
U : Type
T : Type
*****
Symmetric eqv
+++++
unfold Reflexive.
-----
Definition injection_eqv_equivalence : Equivalence (eqv (T:=U)).
Proof.
repeat constructor.
unfold Reflexive.

*****
injResp : forall u1 u2 : U, iff (eqv u1 u2) (eqv (inj u1) (inj u2))
inj : forall _ : U, T
UE : Eqv U
TE : EqvWF T
U : Type
T : Type
*****
Symmetric eqv
+++++
unfold Symmetric.
-----
Definition injection_eqv_equivalence : Equivalence (eqv (T:=U)).
Proof.
repeat constructor.
unfold Reflexive.
unfold Symmetric.

*****
injResp : forall u1 u2 : U, iff (eqv u1 u2) (eqv (inj u1) (inj u2))
inj : forall _ : U, T
UE : Eqv U
TE : EqvWF T
U : Type
T : Type
*****
forall (x y : U) (_ : eqv x y), eqv y x
+++++
unfold Transitive.
-----
Definition injection_eqv_equivalence : Equivalence (eqv (T:=U)).
Proof.
repeat constructor.
unfold Reflexive.
unfold Symmetric.
unfold Transitive.

*****
injResp : forall u1 u2 : U, iff (eqv u1 u2) (eqv (inj u1) (inj u2))
inj : forall _ : U, T
UE : Eqv U
TE : EqvWF T
U : Type
T : Type
*****
forall (x y : U) (_ : eqv x y), eqv y x
+++++
intros.
-----
Definition injection_eqv_equivalence : Equivalence (eqv (T:=U)).
Proof.
repeat constructor.
unfold Reflexive.
unfold Symmetric.
unfold Transitive.
intros.

*****
H : eqv x y
x,y : U
injResp : forall u1 u2 : U, iff (eqv u1 u2) (eqv (inj u1) (inj u2))
inj : forall _ : U, T
UE : Eqv U
TE : EqvWF T
U : Type
T : Type
*****
eqv y x
+++++
apply injResp.
-----
Definition injection_eqv_equivalence : Equivalence (eqv (T:=U)).
Proof.
repeat constructor.
unfold Reflexive.
unfold Symmetric.
unfold Transitive.
intros.
apply injResp.

*****
H : eqv x y
x,y : U
injResp : forall u1 u2 : U, iff (eqv u1 u2) (eqv (inj u1) (inj u2))
inj : forall _ : U, T
UE : Eqv U
TE : EqvWF T
U : Type
T : Type
*****
eqv (inj y) (inj x)
+++++
apply injResp in H.
-----
Definition injection_eqv_equivalence : Equivalence (eqv (T:=U)).
Proof.
repeat constructor.
unfold Reflexive.
unfold Symmetric.
unfold Transitive.
intros.
apply injResp.
apply injResp in H.

*****
H : eqv (inj x) (inj y)
x,y : U
injResp : forall u1 u2 : U, iff (eqv u1 u2) (eqv (inj u1) (inj u2))
inj : forall _ : U, T
UE : Eqv U
TE : EqvWF T
U : Type
T : Type
*****
eqv (inj y) (inj x)
+++++
symmetry.
-----
Definition injection_eqv_equivalence : Equivalence (eqv (T:=U)).
Proof.
repeat constructor.
unfold Reflexive.
unfold Symmetric.
unfold Transitive.
intros.
apply injResp.
apply injResp in H.
symmetry.

*****
H : eqv (inj x) (inj y)
x,y : U
injResp : forall u1 u2 : U, iff (eqv u1 u2) (eqv (inj u1) (inj u2))
inj : forall _ : U, T
UE : Eqv U
TE : EqvWF T
U : Type
T : Type
*****
eqv (inj x) (inj y)
+++++
auto.
-----
Definition injection_eqv_equivalence : Equivalence (eqv (T:=U)).
Proof.
repeat constructor.

*****
injResp : forall u1 u2 : U, iff (eqv u1 u2) (eqv (inj u1) (inj u2))
inj : forall _ : U, T
UE : Eqv U
TE : EqvWF T
U : Type
T : Type
*****
Transitive eqv
+++++
unfold Reflexive.
-----
Definition injection_eqv_equivalence : Equivalence (eqv (T:=U)).
Proof.
repeat constructor.
unfold Reflexive.

*****
injResp : forall u1 u2 : U, iff (eqv u1 u2) (eqv (inj u1) (inj u2))
inj : forall _ : U, T
UE : Eqv U
TE : EqvWF T
U : Type
T : Type
*****
Transitive eqv
+++++
unfold Symmetric.
-----
Definition injection_eqv_equivalence : Equivalence (eqv (T:=U)).
Proof.
repeat constructor.
unfold Reflexive.
unfold Symmetric.

*****
injResp : forall u1 u2 : U, iff (eqv u1 u2) (eqv (inj u1) (inj u2))
inj : forall _ : U, T
UE : Eqv U
TE : EqvWF T
U : Type
T : Type
*****
Transitive eqv
+++++
unfold Transitive.
-----
Definition injection_eqv_equivalence : Equivalence (eqv (T:=U)).
Proof.
repeat constructor.
unfold Reflexive.
unfold Symmetric.
unfold Transitive.

*****
injResp : forall u1 u2 : U, iff (eqv u1 u2) (eqv (inj u1) (inj u2))
inj : forall _ : U, T
UE : Eqv U
TE : EqvWF T
U : Type
T : Type
*****
forall (x y z : U) (_ : eqv x y) (_ : eqv y z), eqv x z
+++++
intros.
-----
Definition injection_eqv_equivalence : Equivalence (eqv (T:=U)).
Proof.
repeat constructor.
unfold Reflexive.
unfold Symmetric.
unfold Transitive.
intros.

*****
H0 : eqv y z
H : eqv x y
x,y,z : U
injResp : forall u1 u2 : U, iff (eqv u1 u2) (eqv (inj u1) (inj u2))
inj : forall _ : U, T
UE : Eqv U
TE : EqvWF T
U : Type
T : Type
*****
eqv x z
+++++
apply injResp.
-----
Definition injection_eqv_equivalence : Equivalence (eqv (T:=U)).
Proof.
repeat constructor.
unfold Reflexive.
unfold Symmetric.
unfold Transitive.
intros.
apply injResp.

*****
H0 : eqv y z
H : eqv x y
x,y,z : U
injResp : forall u1 u2 : U, iff (eqv u1 u2) (eqv (inj u1) (inj u2))
inj : forall _ : U, T
UE : Eqv U
TE : EqvWF T
U : Type
T : Type
*****
eqv (inj x) (inj z)
+++++
apply injResp in H.
-----
Definition injection_eqv_equivalence : Equivalence (eqv (T:=U)).
Proof.
repeat constructor.
unfold Reflexive.
unfold Symmetric.
unfold Transitive.
intros.
apply injResp.
apply injResp in H.

*****
H0 : eqv y z
H : eqv (inj x) (inj y)
x,y,z : U
injResp : forall u1 u2 : U, iff (eqv u1 u2) (eqv (inj u1) (inj u2))
inj : forall _ : U, T
UE : Eqv U
TE : EqvWF T
U : Type
T : Type
*****
eqv (inj x) (inj z)
+++++
apply injResp in H0.
-----
Definition injection_eqv_equivalence : Equivalence (eqv (T:=U)).
Proof.
repeat constructor.
unfold Reflexive.
unfold Symmetric.
unfold Transitive.
intros.
apply injResp.
apply injResp in H.
apply injResp in H0.

*****
H0 : eqv (inj y) (inj z)
H : eqv (inj x) (inj y)
x,y,z : U
injResp : forall u1 u2 : U, iff (eqv u1 u2) (eqv (inj u1) (inj u2))
inj : forall _ : U, T
UE : Eqv U
TE : EqvWF T
U : Type
T : Type
*****
eqv (inj x) (inj z)
+++++
transitivity (inj y).
-----
Definition injection_eqv_equivalence : Equivalence (eqv (T:=U)).
Proof.
repeat constructor.
unfold Reflexive.
unfold Symmetric.
unfold Transitive.
intros.
apply injResp.
apply injResp in H.
apply injResp in H0.
transitivity (inj y).

*****
H0 : eqv (inj y) (inj z)
H : eqv (inj x) (inj y)
x,y,z : U
injResp : forall u1 u2 : U, iff (eqv u1 u2) (eqv (inj u1) (inj u2))
inj : forall _ : U, T
UE : Eqv U
TE : EqvWF T
U : Type
T : Type
*****
eqv (inj x) (inj y)
+++++
auto.
-----
Definition injection_eqv_equivalence : Equivalence (eqv (T:=U)).
Proof.
repeat constructor.
unfold Reflexive.
unfold Symmetric.
unfold Transitive.
intros.
apply injResp.
apply injResp in H.
apply injResp in H0.
transitivity (inj y).

*****
H0 : eqv (inj y) (inj z)
H : eqv (inj x) (inj y)
x,y,z : U
injResp : forall u1 u2 : U, iff (eqv u1 u2) (eqv (inj u1) (inj u2))
inj : forall _ : U, T
UE : Eqv U
TE : EqvWF T
U : Type
T : Type
*****
eqv (inj y) (inj z)
+++++
auto.
-----
Definition injection_eqv_equivalence : Equivalence (eqv (T:=U)).
Proof.
repeat constructor.

*****

*****

+++++
Qed.
-----
End injection_eqv_equivalence.
-----
