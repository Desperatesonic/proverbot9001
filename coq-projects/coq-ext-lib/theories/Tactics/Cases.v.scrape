Require Import ExtLib.Tactics.Consider.
-----
Set Implicit Arguments.
-----
Set Strict Implicit.
-----
Ltac forward' dst sol :=\n  let check X :=\n    match X with\n      | match _ with _ => _ end => fail 1\n      | if _ then _ else _ => fail 1\n      | _ => idtac\n    end\n  in\n  let go X :=\n    first [ (dst X; try solve [ sol ]); [ intros ]\n          | dst X; solve [ sol ] ]\n  in\n  repeat match goal with\n           | [ H : context [ match ?X with _ => _ end ] |- _ ] =>\n             go X\n           | [ H : context [ if ?X then _ else _ ] |- _ ] =>\n             go X\n           | [ |- context [ match ?X with _ => _ end ] ] =>\n             go X\n           | [ |- context [ if ?X then _ else _ ] ] =>\n             go X\n         end.
-----
Ltac forward :=\n  forward'\n    ltac:(fun x => consider x; intros)\n    ltac:(intuition congruence).
-----
Ltac forward_unsafe' dst sol :=\n  let check X :=\n    match X with\n      | match _ with _ => _ end => fail 1\n      | if _ then _ else _ => fail 1\n      | _ => idtac\n    end\n  in\n  let go X :=\n      dst X; try solve [ sol ]\n  in\n  repeat match goal with\n           | [ H : context [ match ?X with _ => _ end ] |- _ ] =>\n             go X\n           | [ H : context [ if ?X then _ else _ ] |- _ ] =>\n             go X\n           | [ |- context [ match ?X with _ => _ end ] ] =>\n             go X\n           | [ |- context [ if ?X then _ else _ ] ] =>\n             go X\n         end.
-----
Ltac forward_unsafe :=\n  forward_unsafe'\n    ltac:(fun x => consider x; intros)\n    ltac:(intuition congruence).
-----
Ltac change_rewrite H :=\n  match type of H with\n    | ?X = _ =>\n      match goal with\n        | |- context [ ?Y ] =>\n          change Y with X ; rewrite H\n      end\n  end.
-----
Ltac change_rewrite_in H H' :=\n  match type of H with\n    | ?X = _ =>\n      match type of H' with\n        | context [ ?Y ] =>\n          change Y with X in H' ; rewrite H in H'\n      end\n  end.
-----
Tactic Notation "change_rewrite" hyp(H) := (change_rewrite H).
-----
Tactic Notation "change_rewrite" hyp(H) "in" hyp(H') := (change_rewrite_in H H').
-----
Ltac rewrite_all_goal :=\n  repeat match goal with\n           | [ H : _ |- _ ] =>\n             progress (erewrite H by eauto with typeclass_instances)\n         end.
-----
Ltac rewrite_all_in H' :=\n  repeat match goal with\n           | [ H : _ |- _ ] =>\n             progress (erewrite H in H' by eauto with typeclass_instances)\n         end.
-----
Ltac rewrite_all_star :=\n  repeat match goal with\n           | [ H : _ |- _ ] =>\n             progress (erewrite H in * by eauto with typeclass_instances)\n         end.
-----
