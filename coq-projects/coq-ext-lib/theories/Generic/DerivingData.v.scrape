From Coq Require Import String.
-----
From Coq Require Import List.
-----
Require Import ExtLib.Data.HList.
-----
Set Implicit Arguments.
-----
Set Strict Implicit.
-----
Inductive data T : (T -> Type) -> Type :=\n| Inj   : forall X, Type -> data X\n| Get   : forall X, T -> data X\n| Prod  : forall X, data X -> data X -> data X\n| Sigma : forall X (S : Type), (S -> data X) -> data X\n| Pi    : forall X (S : Type), (S -> data X) -> data X.
-----
Fixpoint dataD (T : Type) (X : T -> Type) (d : data X) : Type :=\n  match d with\n    | Inj _X x => x\n    | Get X i => X i\n    | Prod l r => prod (dataD l) (dataD r)\n    | @Sigma _ _ i s => @sigT i (fun v => dataD (s v))\n    | @Pi _ _ i s => forall v : i, dataD (s v)\n  end.
-----
Definition dataList (a : Type) : @data unit (fun _ => list a) :=\n  @Sigma _ _ bool (fun x => match x with \n                              | true => @Inj _ _ unit\n                              | false => @Prod _ _ (Inj _ a) (Get _ tt)\n                            end).
-----
Theorem dataList_to_list : forall T (x : dataD (dataList T)), list T.
-----
Theorem dataList_to_list : forall T (x : dataD (dataList T)), list T.

*****

*****
forall (T : Type) (_ : dataD (dataList T)), list T
+++++
simpl.
-----
Theorem dataList_to_list : forall T (x : dataD (dataList T)), list T.
simpl.

*****

*****
forall (T : Type) (_ : sigT (fun v : bool => dataD (if v then Inj (fun _ : unit => list T) unit else Prod (Inj (fun _ : unit => list T) T) (Get (fun _ : unit => list T) tt)))), list T
+++++
intros.
-----
Theorem dataList_to_list : forall T (x : dataD (dataList T)), list T.
simpl.
intros.

*****
x : sigT\n (fun v : bool =>\n dataD\n (if v\n then Inj (fun _ : unit => list T) unit\n else\n Prod (Inj (fun _ : unit => list T) T)\n (Get (fun _ : unit => list T) tt)))
T : Type
*****
list T
+++++
destruct x.
-----
Theorem dataList_to_list : forall T (x : dataD (dataList T)), list T.
simpl.
intros.
destruct x.

*****
d : dataD\n (if x\n then Inj (fun _ : unit => list T) unit\n else\n Prod (Inj (fun _ : unit => list T) T)\n (Get (fun _ : unit => list T) tt))
x : bool
T : Type
*****
list T
+++++
destruct x.
-----
Theorem dataList_to_list : forall T (x : dataD (dataList T)), list T.
simpl.
intros.
destruct x.
destruct x.

*****
d : dataD (Inj (fun _ : unit => list T) unit)
T : Type
*****
list T
+++++
apply nil.
-----
Theorem dataList_to_list : forall T (x : dataD (dataList T)), list T.
simpl.
intros.
destruct x.
destruct x.

*****
d : dataD\n (Prod (Inj (fun _ : unit => list T) T)\n (Get (fun _ : unit => list T) tt))
T : Type
*****
list T
+++++
simpl in *.
-----
Theorem dataList_to_list : forall T (x : dataD (dataList T)), list T.
simpl.
intros.
destruct x.
destruct x.
simpl in *.

*****
d : prod T (list T)
T : Type
*****
list T
+++++
apply (fst d :: snd d).
-----
Theorem dataList_to_list : forall T (x : dataD (dataList T)), list T.
simpl.
intros.
destruct x.
destruct x.

*****

*****

+++++
Defined.
-----
Theorem list_to_dataList : forall T (ls : list T), dataD (dataList T).
-----
Theorem list_to_dataList : forall T (ls : list T), dataD (dataList T).

*****

*****
forall (T : Type) (_ : list T), dataD (dataList T)
+++++
simpl.
-----
Theorem list_to_dataList : forall T (ls : list T), dataD (dataList T).
simpl.

*****

*****
forall (T : Type) (_ : list T), sigT (fun v : bool => dataD (if v then Inj (fun _ : unit => list T) unit else Prod (Inj (fun _ : unit => list T) T) (Get (fun _ : unit => list T) tt)))
+++++
destruct 1.
-----
Theorem list_to_dataList : forall T (ls : list T), dataD (dataList T).
simpl.
destruct 1.

*****
T : Type
*****
sigT (fun v : bool => dataD (if v then Inj (fun _ : unit => list T) unit else Prod (Inj (fun _ : unit => list T) T) (Get (fun _ : unit => list T) tt)))
+++++
exists true.
-----
Theorem list_to_dataList : forall T (ls : list T), dataD (dataList T).
simpl.
destruct 1.
exists true.

*****
T : Type
*****
dataD (Inj (fun _ : unit => list T) unit)
+++++
apply tt.
-----
Theorem list_to_dataList : forall T (ls : list T), dataD (dataList T).
simpl.
destruct 1.

*****
ls : list T
t : T
T : Type
*****
sigT (fun v : bool => dataD (if v then Inj (fun _ : unit => list T) unit else Prod (Inj (fun _ : unit => list T) T) (Get (fun _ : unit => list T) tt)))
+++++
exists false.
-----
Theorem list_to_dataList : forall T (ls : list T), dataD (dataList T).
simpl.
destruct 1.
exists false.

*****
ls : list T
t : T
T : Type
*****
dataD (Prod (Inj (fun _ : unit => list T) T) (Get (fun _ : unit => list T) tt))
+++++
apply (t, ls).
-----
Theorem list_to_dataList : forall T (ls : list T), dataD (dataList T).
simpl.
destruct 1.

*****

*****

+++++
Defined.
-----
Fixpoint dataP (T : Type) (X : T -> Type) (d : data X) (R : Type) : Type :=\n  match d with\n    | Inj _X x => x -> R\n    | Get X x => X x -> R\n    | @Prod _ _ l r => dataP l (dataP r R)\n    | @Sigma _ _ i s => forall i, dataP (s i) R\n    | @Pi _ _ i s => (forall i, dataD (s i)) -> R\n  end.
-----
Fixpoint dataMatch (T : Type) (X : T -> Type) (d : data X) {struct d} \n  : forall (R : Type), dataP d R -> dataD d -> R :=\n    match d as d return forall (R : Type), dataP d R -> dataD d -> R with\n      | Inj _ _ => fun _ p => p\n      | Get X x => fun _ p => p\n      | @Prod _ _ l r => fun _ p v => \n        dataMatch r _ (dataMatch l _ p (fst v)) (snd v)\n      | @Sigma _ _ i d => fun _ p v => \n        match v with\n        | existT _ x y => dataMatch (d x) _ (p _) y\n        end\n      | @Pi _ _ i d => fun _ p v => p v\n    end.
-----
