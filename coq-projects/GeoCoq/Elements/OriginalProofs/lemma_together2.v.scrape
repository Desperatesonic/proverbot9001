Require Export GeoCoq.Elements.OriginalProofs.lemma_tworays.
-----
Require Export GeoCoq.Elements.OriginalProofs.lemma_together.
-----
Require Export GeoCoq.Elements.OriginalProofs.lemma_lessthanadditive.
-----
Require Export GeoCoq.Elements.OriginalProofs.lemma_lessthantransitive.
-----
Require Export GeoCoq.Elements.OriginalProofs.lemma_rayimpliescollinear.
-----
Section Euclid.
-----
Context `{Ax1:euclidean_neutral_ruler_compass}.
-----
Lemma lemma_together2 : \n   forall A B C F G M N a b c, \n   TG A a C c B b -> Cong F G B b -> Out F G M -> Cong F M A a -> Out G F N -> Cong G N C c ->\n   Out M F N.
-----
Lemma lemma_together2 : forall A B C F G M N a b c, TG A a C c B b -> Cong F G B b -> Out F G M -> Cong F M A a -> Out G F N -> Cong G N C c -> Out M F N.

*****
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
forall (A B C F G M N a b c : Point) (_ : TG A a C c B b) (_ : Cong F G B b) (_ : Out F G M) (_ : Cong F M A a) (_ : Out G F N) (_ : Cong G N C c), Out M F N
+++++
Proof.
-----
Lemma lemma_together2 : forall A B C F G M N a b c, TG A a C c B b -> Cong F G B b -> Out F G M -> Cong F M A a -> Out G F N -> Cong G N C c -> Out M F N.
Proof.

*****
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
forall (A B C F G M N a b c : Point) (_ : TG A a C c B b) (_ : Cong F G B b) (_ : Out F G M) (_ : Cong F M A a) (_ : Out G F N) (_ : Cong G N C c), Out M F N
+++++
intros.
-----
Lemma lemma_together2 : forall A B C F G M N a b c, TG A a C c B b -> Cong F G B b -> Out F G M -> Cong F M A a -> Out G F N -> Cong G N C c -> Out M F N.
Proof.
intros.

*****
H4 : Cong G N C c
H3 : Out G F N
H2 : Cong F M A a
H1 : Out F G M
H0 : Cong F G B b
H : TG A a C c B b
A,B,C,F,G,M,N,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
Out M F N
+++++
let Tf:=fresh in assert (Tf:exists J, (BetS A a J /\ Cong a J C c /\ Lt B b A J)) by (conclude_def TG );destruct Tf as [J];spliter.
-----
Lemma lemma_together2 : forall A B C F G M N a b c, TG A a C c B b -> Cong F G B b -> Out F G M -> Cong F M A a -> Out G F N -> Cong G N C c -> Out M F N.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists J, (BetS A a J /\\ Cong a J C c /\\ Lt B b A J)) by (conclude_def TG );destruct Tf as [J];spliter.

*****
H7 : Lt B b A J
H6 : Cong a J C c
H5 : BetS A a J
J : Point
H4 : Cong G N C c
H3 : Out G F N
H2 : Cong F M A a
H1 : Out F G M
H0 : Cong F G B b
H : TG A a C c B b
A,B,C,F,G,M,N,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
Out M F N
+++++
assert (neq a J) by (forward_using lemma_betweennotequal).
-----
Lemma lemma_together2 : forall A B C F G M N a b c, TG A a C c B b -> Cong F G B b -> Out F G M -> Cong F M A a -> Out G F N -> Cong G N C c -> Out M F N.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists J, (BetS A a J /\\ Cong a J C c /\\ Lt B b A J)) by (conclude_def TG );destruct Tf as [J];spliter.
assert (neq a J) by (forward_using lemma_betweennotequal).

*****
H8 : neq a J
H7 : Lt B b A J
H6 : Cong a J C c
H5 : BetS A a J
J : Point
H4 : Cong G N C c
H3 : Out G F N
H2 : Cong F M A a
H1 : Out F G M
H0 : Cong F G B b
H : TG A a C c B b
A,B,C,F,G,M,N,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
Out M F N
+++++
assert (neq C c) by (conclude axiom_nocollapse).
-----
Lemma lemma_together2 : forall A B C F G M N a b c, TG A a C c B b -> Cong F G B b -> Out F G M -> Cong F M A a -> Out G F N -> Cong G N C c -> Out M F N.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists J, (BetS A a J /\\ Cong a J C c /\\ Lt B b A J)) by (conclude_def TG );destruct Tf as [J];spliter.
assert (neq a J) by (forward_using lemma_betweennotequal).
assert (neq C c) by (conclude axiom_nocollapse).

*****
H9 : neq C c
H8 : neq a J
H7 : Lt B b A J
H6 : Cong a J C c
H5 : BetS A a J
J : Point
H4 : Cong G N C c
H3 : Out G F N
H2 : Cong F M A a
H1 : Out F G M
H0 : Cong F G B b
H : TG A a C c B b
A,B,C,F,G,M,N,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
Out M F N
+++++
assert (~ eq M N).
-----
Lemma lemma_together2 : forall A B C F G M N a b c, TG A a C c B b -> Cong F G B b -> Out F G M -> Cong F M A a -> Out G F N -> Cong G N C c -> Out M F N.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists J, (BetS A a J /\\ Cong a J C c /\\ Lt B b A J)) by (conclude_def TG );destruct Tf as [J];spliter.
assert (neq a J) by (forward_using lemma_betweennotequal).
assert (neq C c) by (conclude axiom_nocollapse).
assert (~ eq M N).

*****
H9 : neq C c
H8 : neq a J
H7 : Lt B b A J
H6 : Cong a J C c
H5 : BetS A a J
J : Point
H4 : Cong G N C c
H3 : Out G F N
H2 : Cong F M A a
H1 : Out F G M
H0 : Cong F G B b
H : TG A a C c B b
A,B,C,F,G,M,N,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
not (eq M N)
+++++
intro.
-----
Lemma lemma_together2 : forall A B C F G M N a b c, TG A a C c B b -> Cong F G B b -> Out F G M -> Cong F M A a -> Out G F N -> Cong G N C c -> Out M F N.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists J, (BetS A a J /\\ Cong a J C c /\\ Lt B b A J)) by (conclude_def TG );destruct Tf as [J];spliter.
assert (neq a J) by (forward_using lemma_betweennotequal).
assert (neq C c) by (conclude axiom_nocollapse).
assert (~ eq M N).
intro.

*****
H10 : eq M N
H9 : neq C c
H8 : neq a J
H7 : Lt B b A J
H6 : Cong a J C c
H5 : BetS A a J
J : Point
H4 : Cong G N C c
H3 : Out G F N
H2 : Cong F M A a
H1 : Out F G M
H0 : Cong F G B b
H : TG A a C c B b
A,B,C,F,G,M,N,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
False
+++++
assert (Out F G N) by (conclude cn_equalitysub).
-----
Lemma lemma_together2 : forall A B C F G M N a b c, TG A a C c B b -> Cong F G B b -> Out F G M -> Cong F M A a -> Out G F N -> Cong G N C c -> Out M F N.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists J, (BetS A a J /\\ Cong a J C c /\\ Lt B b A J)) by (conclude_def TG );destruct Tf as [J];spliter.
assert (neq a J) by (forward_using lemma_betweennotequal).
assert (neq C c) by (conclude axiom_nocollapse).
assert (~ eq M N).
intro.
assert (Out F G N) by (conclude cn_equalitysub).

*****
H11 : Out F G N
H10 : eq M N
H9 : neq C c
H8 : neq a J
H7 : Lt B b A J
H6 : Cong a J C c
H5 : BetS A a J
J : Point
H4 : Cong G N C c
H3 : Out G F N
H2 : Cong F M A a
H1 : Out F G M
H0 : Cong F G B b
H : TG A a C c B b
A,B,C,F,G,M,N,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
False
+++++
assert (Out G F M) by (conclude cn_equalitysub).
-----
Lemma lemma_together2 : forall A B C F G M N a b c, TG A a C c B b -> Cong F G B b -> Out F G M -> Cong F M A a -> Out G F N -> Cong G N C c -> Out M F N.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists J, (BetS A a J /\\ Cong a J C c /\\ Lt B b A J)) by (conclude_def TG );destruct Tf as [J];spliter.
assert (neq a J) by (forward_using lemma_betweennotequal).
assert (neq C c) by (conclude axiom_nocollapse).
assert (~ eq M N).
intro.
assert (Out F G N) by (conclude cn_equalitysub).
assert (Out G F M) by (conclude cn_equalitysub).

*****
H12 : Out G F M
H11 : Out F G N
H10 : eq M N
H9 : neq C c
H8 : neq a J
H7 : Lt B b A J
H6 : Cong a J C c
H5 : BetS A a J
J : Point
H4 : Cong G N C c
H3 : Out G F N
H2 : Cong F M A a
H1 : Out F G M
H0 : Cong F G B b
H : TG A a C c B b
A,B,C,F,G,M,N,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
False
+++++
assert (BetS F M G) by (conclude lemma_tworays).
-----
Lemma lemma_together2 : forall A B C F G M N a b c, TG A a C c B b -> Cong F G B b -> Out F G M -> Cong F M A a -> Out G F N -> Cong G N C c -> Out M F N.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists J, (BetS A a J /\\ Cong a J C c /\\ Lt B b A J)) by (conclude_def TG );destruct Tf as [J];spliter.
assert (neq a J) by (forward_using lemma_betweennotequal).
assert (neq C c) by (conclude axiom_nocollapse).
assert (~ eq M N).
intro.
assert (Out F G N) by (conclude cn_equalitysub).
assert (Out G F M) by (conclude cn_equalitysub).
assert (BetS F M G) by (conclude lemma_tworays).

*****
H13 : BetS F M G
H12 : Out G F M
H11 : Out F G N
H10 : eq M N
H9 : neq C c
H8 : neq a J
H7 : Lt B b A J
H6 : Cong a J C c
H5 : BetS A a J
J : Point
H4 : Cong G N C c
H3 : Out G F N
H2 : Cong F M A a
H1 : Out F G M
H0 : Cong F G B b
H : TG A a C c B b
A,B,C,F,G,M,N,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
False
+++++
assert (Cong G M C c) by (conclude cn_equalitysub).
-----
Lemma lemma_together2 : forall A B C F G M N a b c, TG A a C c B b -> Cong F G B b -> Out F G M -> Cong F M A a -> Out G F N -> Cong G N C c -> Out M F N.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists J, (BetS A a J /\\ Cong a J C c /\\ Lt B b A J)) by (conclude_def TG );destruct Tf as [J];spliter.
assert (neq a J) by (forward_using lemma_betweennotequal).
assert (neq C c) by (conclude axiom_nocollapse).
assert (~ eq M N).
intro.
assert (Out F G N) by (conclude cn_equalitysub).
assert (Out G F M) by (conclude cn_equalitysub).
assert (BetS F M G) by (conclude lemma_tworays).
assert (Cong G M C c) by (conclude cn_equalitysub).

*****
H14 : Cong G M C c
H13 : BetS F M G
H12 : Out G F M
H11 : Out F G N
H10 : eq M N
H9 : neq C c
H8 : neq a J
H7 : Lt B b A J
H6 : Cong a J C c
H5 : BetS A a J
J : Point
H4 : Cong G N C c
H3 : Out G F N
H2 : Cong F M A a
H1 : Out F G M
H0 : Cong F G B b
H : TG A a C c B b
A,B,C,F,G,M,N,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
False
+++++
assert (Cong M G C c) by (forward_using lemma_congruenceflip).
-----
Lemma lemma_together2 : forall A B C F G M N a b c, TG A a C c B b -> Cong F G B b -> Out F G M -> Cong F M A a -> Out G F N -> Cong G N C c -> Out M F N.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists J, (BetS A a J /\\ Cong a J C c /\\ Lt B b A J)) by (conclude_def TG );destruct Tf as [J];spliter.
assert (neq a J) by (forward_using lemma_betweennotequal).
assert (neq C c) by (conclude axiom_nocollapse).
assert (~ eq M N).
intro.
assert (Out F G N) by (conclude cn_equalitysub).
assert (Out G F M) by (conclude cn_equalitysub).
assert (BetS F M G) by (conclude lemma_tworays).
assert (Cong G M C c) by (conclude cn_equalitysub).
assert (Cong M G C c) by (forward_using lemma_congruenceflip).

*****
H15 : Cong M G C c
H14 : Cong G M C c
H13 : BetS F M G
H12 : Out G F M
H11 : Out F G N
H10 : eq M N
H9 : neq C c
H8 : neq a J
H7 : Lt B b A J
H6 : Cong a J C c
H5 : BetS A a J
J : Point
H4 : Cong G N C c
H3 : Out G F N
H2 : Cong F M A a
H1 : Out F G M
H0 : Cong F G B b
H : TG A a C c B b
A,B,C,F,G,M,N,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
False
+++++
assert (Lt F G F G) by (conclude lemma_together).
-----
Lemma lemma_together2 : forall A B C F G M N a b c, TG A a C c B b -> Cong F G B b -> Out F G M -> Cong F M A a -> Out G F N -> Cong G N C c -> Out M F N.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists J, (BetS A a J /\\ Cong a J C c /\\ Lt B b A J)) by (conclude_def TG );destruct Tf as [J];spliter.
assert (neq a J) by (forward_using lemma_betweennotequal).
assert (neq C c) by (conclude axiom_nocollapse).
assert (~ eq M N).
intro.
assert (Out F G N) by (conclude cn_equalitysub).
assert (Out G F M) by (conclude cn_equalitysub).
assert (BetS F M G) by (conclude lemma_tworays).
assert (Cong G M C c) by (conclude cn_equalitysub).
assert (Cong M G C c) by (forward_using lemma_congruenceflip).
assert (Lt F G F G) by (conclude lemma_together).

*****
H16 : Lt F G F G
H15 : Cong M G C c
H14 : Cong G M C c
H13 : BetS F M G
H12 : Out G F M
H11 : Out F G N
H10 : eq M N
H9 : neq C c
H8 : neq a J
H7 : Lt B b A J
H6 : Cong a J C c
H5 : BetS A a J
J : Point
H4 : Cong G N C c
H3 : Out G F N
H2 : Cong F M A a
H1 : Out F G M
H0 : Cong F G B b
H : TG A a C c B b
A,B,C,F,G,M,N,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
False
+++++
assert (~ Lt F G F G) by (conclude lemma_trichotomy2).
-----
Lemma lemma_together2 : forall A B C F G M N a b c, TG A a C c B b -> Cong F G B b -> Out F G M -> Cong F M A a -> Out G F N -> Cong G N C c -> Out M F N.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists J, (BetS A a J /\\ Cong a J C c /\\ Lt B b A J)) by (conclude_def TG );destruct Tf as [J];spliter.
assert (neq a J) by (forward_using lemma_betweennotequal).
assert (neq C c) by (conclude axiom_nocollapse).
assert (~ eq M N).
intro.
assert (Out F G N) by (conclude cn_equalitysub).
assert (Out G F M) by (conclude cn_equalitysub).
assert (BetS F M G) by (conclude lemma_tworays).
assert (Cong G M C c) by (conclude cn_equalitysub).
assert (Cong M G C c) by (forward_using lemma_congruenceflip).
assert (Lt F G F G) by (conclude lemma_together).
assert (~ Lt F G F G) by (conclude lemma_trichotomy2).

*****
H17 : not (Lt F G F G)
H16 : Lt F G F G
H15 : Cong M G C c
H14 : Cong G M C c
H13 : BetS F M G
H12 : Out G F M
H11 : Out F G N
H10 : eq M N
H9 : neq C c
H8 : neq a J
H7 : Lt B b A J
H6 : Cong a J C c
H5 : BetS A a J
J : Point
H4 : Cong G N C c
H3 : Out G F N
H2 : Cong F M A a
H1 : Out F G M
H0 : Cong F G B b
H : TG A a C c B b
A,B,C,F,G,M,N,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma lemma_together2 : forall A B C F G M N a b c, TG A a C c B b -> Cong F G B b -> Out F G M -> Cong F M A a -> Out G F N -> Cong G N C c -> Out M F N.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists J, (BetS A a J /\\ Cong a J C c /\\ Lt B b A J)) by (conclude_def TG );destruct Tf as [J];spliter.
assert (neq a J) by (forward_using lemma_betweennotequal).
assert (neq C c) by (conclude axiom_nocollapse).
assert (~ eq M N).

*****
H10 : not (eq M N)
H9 : neq C c
H8 : neq a J
H7 : Lt B b A J
H6 : Cong a J C c
H5 : BetS A a J
J : Point
H4 : Cong G N C c
H3 : Out G F N
H2 : Cong F M A a
H1 : Out F G M
H0 : Cong F G B b
H : TG A a C c B b
A,B,C,F,G,M,N,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
Out M F N
+++++
assert (neq F M) by (conclude lemma_raystrict).
-----
Lemma lemma_together2 : forall A B C F G M N a b c, TG A a C c B b -> Cong F G B b -> Out F G M -> Cong F M A a -> Out G F N -> Cong G N C c -> Out M F N.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists J, (BetS A a J /\\ Cong a J C c /\\ Lt B b A J)) by (conclude_def TG );destruct Tf as [J];spliter.
assert (neq a J) by (forward_using lemma_betweennotequal).
assert (neq C c) by (conclude axiom_nocollapse).
assert (~ eq M N).
assert (neq F M) by (conclude lemma_raystrict).

*****
H11 : neq F M
H10 : not (eq M N)
H9 : neq C c
H8 : neq a J
H7 : Lt B b A J
H6 : Cong a J C c
H5 : BetS A a J
J : Point
H4 : Cong G N C c
H3 : Out G F N
H2 : Cong F M A a
H1 : Out F G M
H0 : Cong F G B b
H : TG A a C c B b
A,B,C,F,G,M,N,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
Out M F N
+++++
assert (neq M F) by (conclude lemma_inequalitysymmetric).
-----
Lemma lemma_together2 : forall A B C F G M N a b c, TG A a C c B b -> Cong F G B b -> Out F G M -> Cong F M A a -> Out G F N -> Cong G N C c -> Out M F N.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists J, (BetS A a J /\\ Cong a J C c /\\ Lt B b A J)) by (conclude_def TG );destruct Tf as [J];spliter.
assert (neq a J) by (forward_using lemma_betweennotequal).
assert (neq C c) by (conclude axiom_nocollapse).
assert (~ eq M N).
assert (neq F M) by (conclude lemma_raystrict).
assert (neq M F) by (conclude lemma_inequalitysymmetric).

*****
H12 : neq M F
H11 : neq F M
H10 : not (eq M N)
H9 : neq C c
H8 : neq a J
H7 : Lt B b A J
H6 : Cong a J C c
H5 : BetS A a J
J : Point
H4 : Cong G N C c
H3 : Out G F N
H2 : Cong F M A a
H1 : Out F G M
H0 : Cong F G B b
H : TG A a C c B b
A,B,C,F,G,M,N,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
Out M F N
+++++
let Tf:=fresh in assert (Tf:exists D, (BetS M F D /\ Cong F D M F)) by (conclude lemma_extension);destruct Tf as [D];spliter.
-----
Lemma lemma_together2 : forall A B C F G M N a b c, TG A a C c B b -> Cong F G B b -> Out F G M -> Cong F M A a -> Out G F N -> Cong G N C c -> Out M F N.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists J, (BetS A a J /\\ Cong a J C c /\\ Lt B b A J)) by (conclude_def TG );destruct Tf as [J];spliter.
assert (neq a J) by (forward_using lemma_betweennotequal).
assert (neq C c) by (conclude axiom_nocollapse).
assert (~ eq M N).
assert (neq F M) by (conclude lemma_raystrict).
assert (neq M F) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists D, (BetS M F D /\\ Cong F D M F)) by (conclude lemma_extension);destruct Tf as [D];spliter.

*****
H14 : Cong F D M F
H13 : BetS M F D
D : Point
H12 : neq M F
H11 : neq F M
H10 : not (eq M N)
H9 : neq C c
H8 : neq a J
H7 : Lt B b A J
H6 : Cong a J C c
H5 : BetS A a J
J : Point
H4 : Cong G N C c
H3 : Out G F N
H2 : Cong F M A a
H1 : Out F G M
H0 : Cong F G B b
H : TG A a C c B b
A,B,C,F,G,M,N,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
Out M F N
+++++
assert ((BetS F M G \/ eq G M \/ BetS F G M)) by (conclude lemma_ray1).
-----
Lemma lemma_together2 : forall A B C F G M N a b c, TG A a C c B b -> Cong F G B b -> Out F G M -> Cong F M A a -> Out G F N -> Cong G N C c -> Out M F N.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists J, (BetS A a J /\\ Cong a J C c /\\ Lt B b A J)) by (conclude_def TG );destruct Tf as [J];spliter.
assert (neq a J) by (forward_using lemma_betweennotequal).
assert (neq C c) by (conclude axiom_nocollapse).
assert (~ eq M N).
assert (neq F M) by (conclude lemma_raystrict).
assert (neq M F) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists D, (BetS M F D /\\ Cong F D M F)) by (conclude lemma_extension);destruct Tf as [D];spliter.
assert ((BetS F M G \\/ eq G M \\/ BetS F G M)) by (conclude lemma_ray1).

*****
H15 : or (BetS F M G) (or (eq G M) (BetS F G M))
H14 : Cong F D M F
H13 : BetS M F D
D : Point
H12 : neq M F
H11 : neq F M
H10 : not (eq M N)
H9 : neq C c
H8 : neq a J
H7 : Lt B b A J
H6 : Cong a J C c
H5 : BetS A a J
J : Point
H4 : Cong G N C c
H3 : Out G F N
H2 : Cong F M A a
H1 : Out F G M
H0 : Cong F G B b
H : TG A a C c B b
A,B,C,F,G,M,N,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
Out M F N
+++++
assert (BetS G F D).
-----
Lemma lemma_together2 : forall A B C F G M N a b c, TG A a C c B b -> Cong F G B b -> Out F G M -> Cong F M A a -> Out G F N -> Cong G N C c -> Out M F N.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists J, (BetS A a J /\\ Cong a J C c /\\ Lt B b A J)) by (conclude_def TG );destruct Tf as [J];spliter.
assert (neq a J) by (forward_using lemma_betweennotequal).
assert (neq C c) by (conclude axiom_nocollapse).
assert (~ eq M N).
assert (neq F M) by (conclude lemma_raystrict).
assert (neq M F) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists D, (BetS M F D /\\ Cong F D M F)) by (conclude lemma_extension);destruct Tf as [D];spliter.
assert ((BetS F M G \\/ eq G M \\/ BetS F G M)) by (conclude lemma_ray1).
assert (BetS G F D).

*****
H15 : or (BetS F M G) (or (eq G M) (BetS F G M))
H14 : Cong F D M F
H13 : BetS M F D
D : Point
H12 : neq M F
H11 : neq F M
H10 : not (eq M N)
H9 : neq C c
H8 : neq a J
H7 : Lt B b A J
H6 : Cong a J C c
H5 : BetS A a J
J : Point
H4 : Cong G N C c
H3 : Out G F N
H2 : Cong F M A a
H1 : Out F G M
H0 : Cong F G B b
H : TG A a C c B b
A,B,C,F,G,M,N,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
BetS G F D
+++++
by cases on (BetS F M G \/ eq G M \/ BetS F G M).
-----
Lemma lemma_together2 : forall A B C F G M N a b c, TG A a C c B b -> Cong F G B b -> Out F G M -> Cong F M A a -> Out G F N -> Cong G N C c -> Out M F N.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists J, (BetS A a J /\\ Cong a J C c /\\ Lt B b A J)) by (conclude_def TG );destruct Tf as [J];spliter.
assert (neq a J) by (forward_using lemma_betweennotequal).
assert (neq C c) by (conclude axiom_nocollapse).
assert (~ eq M N).
assert (neq F M) by (conclude lemma_raystrict).
assert (neq M F) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists D, (BetS M F D /\\ Cong F D M F)) by (conclude lemma_extension);destruct Tf as [D];spliter.
assert ((BetS F M G \\/ eq G M \\/ BetS F G M)) by (conclude lemma_ray1).
assert (BetS G F D).
by cases on (BetS F M G \\/ eq G M \\/ BetS F G M).

*****
H16 : BetS F M G
H14 : Cong F D M F
H13 : BetS M F D
D : Point
H12 : neq M F
H11 : neq F M
H10 : not (eq M N)
H9 : neq C c
H8 : neq a J
H7 : Lt B b A J
H6 : Cong a J C c
H5 : BetS A a J
J : Point
H4 : Cong G N C c
H3 : Out G F N
H2 : Cong F M A a
H1 : Out F G M
H0 : Cong F G B b
H : TG A a C c B b
A,B,C,F,G,M,N,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
BetS G F D
+++++
assert (BetS G M F) by (conclude axiom_betweennesssymmetry).
-----
Lemma lemma_together2 : forall A B C F G M N a b c, TG A a C c B b -> Cong F G B b -> Out F G M -> Cong F M A a -> Out G F N -> Cong G N C c -> Out M F N.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists J, (BetS A a J /\\ Cong a J C c /\\ Lt B b A J)) by (conclude_def TG );destruct Tf as [J];spliter.
assert (neq a J) by (forward_using lemma_betweennotequal).
assert (neq C c) by (conclude axiom_nocollapse).
assert (~ eq M N).
assert (neq F M) by (conclude lemma_raystrict).
assert (neq M F) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists D, (BetS M F D /\\ Cong F D M F)) by (conclude lemma_extension);destruct Tf as [D];spliter.
assert ((BetS F M G \\/ eq G M \\/ BetS F G M)) by (conclude lemma_ray1).
assert (BetS G F D).
by cases on (BetS F M G \\/ eq G M \\/ BetS F G M).
assert (BetS G M F) by (conclude axiom_betweennesssymmetry).

*****
H15 : BetS G M F
H16 : BetS F M G
H14 : Cong F D M F
H13 : BetS M F D
D : Point
H12 : neq M F
H11 : neq F M
H10 : not (eq M N)
H9 : neq C c
H8 : neq a J
H7 : Lt B b A J
H6 : Cong a J C c
H5 : BetS A a J
J : Point
H4 : Cong G N C c
H3 : Out G F N
H2 : Cong F M A a
H1 : Out F G M
H0 : Cong F G B b
H : TG A a C c B b
A,B,C,F,G,M,N,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
BetS G F D
+++++
assert (BetS G F D) by (conclude lemma_3_7a).
-----
Lemma lemma_together2 : forall A B C F G M N a b c, TG A a C c B b -> Cong F G B b -> Out F G M -> Cong F M A a -> Out G F N -> Cong G N C c -> Out M F N.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists J, (BetS A a J /\\ Cong a J C c /\\ Lt B b A J)) by (conclude_def TG );destruct Tf as [J];spliter.
assert (neq a J) by (forward_using lemma_betweennotequal).
assert (neq C c) by (conclude axiom_nocollapse).
assert (~ eq M N).
assert (neq F M) by (conclude lemma_raystrict).
assert (neq M F) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists D, (BetS M F D /\\ Cong F D M F)) by (conclude lemma_extension);destruct Tf as [D];spliter.
assert ((BetS F M G \\/ eq G M \\/ BetS F G M)) by (conclude lemma_ray1).
assert (BetS G F D).
by cases on (BetS F M G \\/ eq G M \\/ BetS F G M).
assert (BetS G M F) by (conclude axiom_betweennesssymmetry).
assert (BetS G F D) by (conclude lemma_3_7a).

*****
H17 : BetS G F D
H15 : BetS G M F
H16 : BetS F M G
H14 : Cong F D M F
H13 : BetS M F D
D : Point
H12 : neq M F
H11 : neq F M
H10 : not (eq M N)
H9 : neq C c
H8 : neq a J
H7 : Lt B b A J
H6 : Cong a J C c
H5 : BetS A a J
J : Point
H4 : Cong G N C c
H3 : Out G F N
H2 : Cong F M A a
H1 : Out F G M
H0 : Cong F G B b
H : TG A a C c B b
A,B,C,F,G,M,N,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
BetS G F D
+++++
close.
-----
Lemma lemma_together2 : forall A B C F G M N a b c, TG A a C c B b -> Cong F G B b -> Out F G M -> Cong F M A a -> Out G F N -> Cong G N C c -> Out M F N.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists J, (BetS A a J /\\ Cong a J C c /\\ Lt B b A J)) by (conclude_def TG );destruct Tf as [J];spliter.
assert (neq a J) by (forward_using lemma_betweennotequal).
assert (neq C c) by (conclude axiom_nocollapse).
assert (~ eq M N).
assert (neq F M) by (conclude lemma_raystrict).
assert (neq M F) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists D, (BetS M F D /\\ Cong F D M F)) by (conclude lemma_extension);destruct Tf as [D];spliter.
assert ((BetS F M G \\/ eq G M \\/ BetS F G M)) by (conclude lemma_ray1).
assert (BetS G F D).
by cases on (BetS F M G \\/ eq G M \\/ BetS F G M).

*****
H17 : eq G M
H14 : Cong F D M F
H13 : BetS M F D
D : Point
H12 : neq M F
H11 : neq F M
H10 : not (eq M N)
H9 : neq C c
H8 : neq a J
H7 : Lt B b A J
H6 : Cong a J C c
H5 : BetS A a J
J : Point
H4 : Cong G N C c
H3 : Out G F N
H2 : Cong F M A a
H1 : Out F G M
H0 : Cong F G B b
H : TG A a C c B b
A,B,C,F,G,M,N,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
BetS G F D
+++++
assert (BetS G F D) by (conclude cn_equalitysub).
-----
Lemma lemma_together2 : forall A B C F G M N a b c, TG A a C c B b -> Cong F G B b -> Out F G M -> Cong F M A a -> Out G F N -> Cong G N C c -> Out M F N.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists J, (BetS A a J /\\ Cong a J C c /\\ Lt B b A J)) by (conclude_def TG );destruct Tf as [J];spliter.
assert (neq a J) by (forward_using lemma_betweennotequal).
assert (neq C c) by (conclude axiom_nocollapse).
assert (~ eq M N).
assert (neq F M) by (conclude lemma_raystrict).
assert (neq M F) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists D, (BetS M F D /\\ Cong F D M F)) by (conclude lemma_extension);destruct Tf as [D];spliter.
assert ((BetS F M G \\/ eq G M \\/ BetS F G M)) by (conclude lemma_ray1).
assert (BetS G F D).
by cases on (BetS F M G \\/ eq G M \\/ BetS F G M).
assert (BetS G F D) by (conclude cn_equalitysub).

*****
H15 : BetS G F D
H17 : eq G M
H14 : Cong F D M F
H13 : BetS M F D
D : Point
H12 : neq M F
H11 : neq F M
H10 : not (eq M N)
H9 : neq C c
H8 : neq a J
H7 : Lt B b A J
H6 : Cong a J C c
H5 : BetS A a J
J : Point
H4 : Cong G N C c
H3 : Out G F N
H2 : Cong F M A a
H1 : Out F G M
H0 : Cong F G B b
H : TG A a C c B b
A,B,C,F,G,M,N,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
BetS G F D
+++++
close.
-----
Lemma lemma_together2 : forall A B C F G M N a b c, TG A a C c B b -> Cong F G B b -> Out F G M -> Cong F M A a -> Out G F N -> Cong G N C c -> Out M F N.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists J, (BetS A a J /\\ Cong a J C c /\\ Lt B b A J)) by (conclude_def TG );destruct Tf as [J];spliter.
assert (neq a J) by (forward_using lemma_betweennotequal).
assert (neq C c) by (conclude axiom_nocollapse).
assert (~ eq M N).
assert (neq F M) by (conclude lemma_raystrict).
assert (neq M F) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists D, (BetS M F D /\\ Cong F D M F)) by (conclude lemma_extension);destruct Tf as [D];spliter.
assert ((BetS F M G \\/ eq G M \\/ BetS F G M)) by (conclude lemma_ray1).
assert (BetS G F D).
by cases on (BetS F M G \\/ eq G M \\/ BetS F G M).

*****
H17 : BetS F G M
H14 : Cong F D M F
H13 : BetS M F D
D : Point
H12 : neq M F
H11 : neq F M
H10 : not (eq M N)
H9 : neq C c
H8 : neq a J
H7 : Lt B b A J
H6 : Cong a J C c
H5 : BetS A a J
J : Point
H4 : Cong G N C c
H3 : Out G F N
H2 : Cong F M A a
H1 : Out F G M
H0 : Cong F G B b
H : TG A a C c B b
A,B,C,F,G,M,N,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
BetS G F D
+++++
assert (BetS M G F) by (conclude axiom_betweennesssymmetry).
-----
Lemma lemma_together2 : forall A B C F G M N a b c, TG A a C c B b -> Cong F G B b -> Out F G M -> Cong F M A a -> Out G F N -> Cong G N C c -> Out M F N.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists J, (BetS A a J /\\ Cong a J C c /\\ Lt B b A J)) by (conclude_def TG );destruct Tf as [J];spliter.
assert (neq a J) by (forward_using lemma_betweennotequal).
assert (neq C c) by (conclude axiom_nocollapse).
assert (~ eq M N).
assert (neq F M) by (conclude lemma_raystrict).
assert (neq M F) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists D, (BetS M F D /\\ Cong F D M F)) by (conclude lemma_extension);destruct Tf as [D];spliter.
assert ((BetS F M G \\/ eq G M \\/ BetS F G M)) by (conclude lemma_ray1).
assert (BetS G F D).
by cases on (BetS F M G \\/ eq G M \\/ BetS F G M).
assert (BetS M G F) by (conclude axiom_betweennesssymmetry).

*****
H15 : BetS M G F
H17 : BetS F G M
H14 : Cong F D M F
H13 : BetS M F D
D : Point
H12 : neq M F
H11 : neq F M
H10 : not (eq M N)
H9 : neq C c
H8 : neq a J
H7 : Lt B b A J
H6 : Cong a J C c
H5 : BetS A a J
J : Point
H4 : Cong G N C c
H3 : Out G F N
H2 : Cong F M A a
H1 : Out F G M
H0 : Cong F G B b
H : TG A a C c B b
A,B,C,F,G,M,N,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
BetS G F D
+++++
assert (BetS G F D) by (conclude lemma_3_6a).
-----
Lemma lemma_together2 : forall A B C F G M N a b c, TG A a C c B b -> Cong F G B b -> Out F G M -> Cong F M A a -> Out G F N -> Cong G N C c -> Out M F N.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists J, (BetS A a J /\\ Cong a J C c /\\ Lt B b A J)) by (conclude_def TG );destruct Tf as [J];spliter.
assert (neq a J) by (forward_using lemma_betweennotequal).
assert (neq C c) by (conclude axiom_nocollapse).
assert (~ eq M N).
assert (neq F M) by (conclude lemma_raystrict).
assert (neq M F) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists D, (BetS M F D /\\ Cong F D M F)) by (conclude lemma_extension);destruct Tf as [D];spliter.
assert ((BetS F M G \\/ eq G M \\/ BetS F G M)) by (conclude lemma_ray1).
assert (BetS G F D).
by cases on (BetS F M G \\/ eq G M \\/ BetS F G M).
assert (BetS M G F) by (conclude axiom_betweennesssymmetry).
assert (BetS G F D) by (conclude lemma_3_6a).

*****
H16 : BetS G F D
H15 : BetS M G F
H17 : BetS F G M
H14 : Cong F D M F
H13 : BetS M F D
D : Point
H12 : neq M F
H11 : neq F M
H10 : not (eq M N)
H9 : neq C c
H8 : neq a J
H7 : Lt B b A J
H6 : Cong a J C c
H5 : BetS A a J
J : Point
H4 : Cong G N C c
H3 : Out G F N
H2 : Cong F M A a
H1 : Out F G M
H0 : Cong F G B b
H : TG A a C c B b
A,B,C,F,G,M,N,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
BetS G F D
+++++
close.
-----
Lemma lemma_together2 : forall A B C F G M N a b c, TG A a C c B b -> Cong F G B b -> Out F G M -> Cong F M A a -> Out G F N -> Cong G N C c -> Out M F N.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists J, (BetS A a J /\\ Cong a J C c /\\ Lt B b A J)) by (conclude_def TG );destruct Tf as [J];spliter.
assert (neq a J) by (forward_using lemma_betweennotequal).
assert (neq C c) by (conclude axiom_nocollapse).
assert (~ eq M N).
assert (neq F M) by (conclude lemma_raystrict).
assert (neq M F) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists D, (BetS M F D /\\ Cong F D M F)) by (conclude lemma_extension);destruct Tf as [D];spliter.
assert ((BetS F M G \\/ eq G M \\/ BetS F G M)) by (conclude lemma_ray1).
assert (BetS G F D).
by cases on (BetS F M G \\/ eq G M \\/ BetS F G M).

*****
H16 : BetS G F D
H15 : or (BetS F M G) (or (eq G M) (BetS F G M))
H14 : Cong F D M F
H13 : BetS M F D
D : Point
H12 : neq M F
H11 : neq F M
H10 : not (eq M N)
H9 : neq C c
H8 : neq a J
H7 : Lt B b A J
H6 : Cong a J C c
H5 : BetS A a J
J : Point
H4 : Cong G N C c
H3 : Out G F N
H2 : Cong F M A a
H1 : Out F G M
H0 : Cong F G B b
H : TG A a C c B b
A,B,C,F,G,M,N,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
Out M F N
+++++
assert (BetS D F M) by (conclude axiom_betweennesssymmetry).
-----
Lemma lemma_together2 : forall A B C F G M N a b c, TG A a C c B b -> Cong F G B b -> Out F G M -> Cong F M A a -> Out G F N -> Cong G N C c -> Out M F N.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists J, (BetS A a J /\\ Cong a J C c /\\ Lt B b A J)) by (conclude_def TG );destruct Tf as [J];spliter.
assert (neq a J) by (forward_using lemma_betweennotequal).
assert (neq C c) by (conclude axiom_nocollapse).
assert (~ eq M N).
assert (neq F M) by (conclude lemma_raystrict).
assert (neq M F) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists D, (BetS M F D /\\ Cong F D M F)) by (conclude lemma_extension);destruct Tf as [D];spliter.
assert ((BetS F M G \\/ eq G M \\/ BetS F G M)) by (conclude lemma_ray1).
assert (BetS G F D).
by cases on (BetS F M G \\/ eq G M \\/ BetS F G M).
assert (BetS D F M) by (conclude axiom_betweennesssymmetry).

*****
H17 : BetS D F M
H16 : BetS G F D
H15 : or (BetS F M G) (or (eq G M) (BetS F G M))
H14 : Cong F D M F
H13 : BetS M F D
D : Point
H12 : neq M F
H11 : neq F M
H10 : not (eq M N)
H9 : neq C c
H8 : neq a J
H7 : Lt B b A J
H6 : Cong a J C c
H5 : BetS A a J
J : Point
H4 : Cong G N C c
H3 : Out G F N
H2 : Cong F M A a
H1 : Out F G M
H0 : Cong F G B b
H : TG A a C c B b
A,B,C,F,G,M,N,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
Out M F N
+++++
assert (BetS D F G) by (conclude axiom_betweennesssymmetry).
-----
Lemma lemma_together2 : forall A B C F G M N a b c, TG A a C c B b -> Cong F G B b -> Out F G M -> Cong F M A a -> Out G F N -> Cong G N C c -> Out M F N.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists J, (BetS A a J /\\ Cong a J C c /\\ Lt B b A J)) by (conclude_def TG );destruct Tf as [J];spliter.
assert (neq a J) by (forward_using lemma_betweennotequal).
assert (neq C c) by (conclude axiom_nocollapse).
assert (~ eq M N).
assert (neq F M) by (conclude lemma_raystrict).
assert (neq M F) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists D, (BetS M F D /\\ Cong F D M F)) by (conclude lemma_extension);destruct Tf as [D];spliter.
assert ((BetS F M G \\/ eq G M \\/ BetS F G M)) by (conclude lemma_ray1).
assert (BetS G F D).
by cases on (BetS F M G \\/ eq G M \\/ BetS F G M).
assert (BetS D F M) by (conclude axiom_betweennesssymmetry).
assert (BetS D F G) by (conclude axiom_betweennesssymmetry).

*****
H18 : BetS D F G
H17 : BetS D F M
H16 : BetS G F D
H15 : or (BetS F M G) (or (eq G M) (BetS F G M))
H14 : Cong F D M F
H13 : BetS M F D
D : Point
H12 : neq M F
H11 : neq F M
H10 : not (eq M N)
H9 : neq C c
H8 : neq a J
H7 : Lt B b A J
H6 : Cong a J C c
H5 : BetS A a J
J : Point
H4 : Cong G N C c
H3 : Out G F N
H2 : Cong F M A a
H1 : Out F G M
H0 : Cong F G B b
H : TG A a C c B b
A,B,C,F,G,M,N,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
Out M F N
+++++
assert (~ BetS F M N).
-----
Lemma lemma_together2 : forall A B C F G M N a b c, TG A a C c B b -> Cong F G B b -> Out F G M -> Cong F M A a -> Out G F N -> Cong G N C c -> Out M F N.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists J, (BetS A a J /\\ Cong a J C c /\\ Lt B b A J)) by (conclude_def TG );destruct Tf as [J];spliter.
assert (neq a J) by (forward_using lemma_betweennotequal).
assert (neq C c) by (conclude axiom_nocollapse).
assert (~ eq M N).
assert (neq F M) by (conclude lemma_raystrict).
assert (neq M F) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists D, (BetS M F D /\\ Cong F D M F)) by (conclude lemma_extension);destruct Tf as [D];spliter.
assert ((BetS F M G \\/ eq G M \\/ BetS F G M)) by (conclude lemma_ray1).
assert (BetS G F D).
by cases on (BetS F M G \\/ eq G M \\/ BetS F G M).
assert (BetS D F M) by (conclude axiom_betweennesssymmetry).
assert (BetS D F G) by (conclude axiom_betweennesssymmetry).
assert (~ BetS F M N).

*****
H18 : BetS D F G
H17 : BetS D F M
H16 : BetS G F D
H15 : or (BetS F M G) (or (eq G M) (BetS F G M))
H14 : Cong F D M F
H13 : BetS M F D
D : Point
H12 : neq M F
H11 : neq F M
H10 : not (eq M N)
H9 : neq C c
H8 : neq a J
H7 : Lt B b A J
H6 : Cong a J C c
H5 : BetS A a J
J : Point
H4 : Cong G N C c
H3 : Out G F N
H2 : Cong F M A a
H1 : Out F G M
H0 : Cong F G B b
H : TG A a C c B b
A,B,C,F,G,M,N,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
not (BetS F M N)
+++++
intro.
-----
Lemma lemma_together2 : forall A B C F G M N a b c, TG A a C c B b -> Cong F G B b -> Out F G M -> Cong F M A a -> Out G F N -> Cong G N C c -> Out M F N.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists J, (BetS A a J /\\ Cong a J C c /\\ Lt B b A J)) by (conclude_def TG );destruct Tf as [J];spliter.
assert (neq a J) by (forward_using lemma_betweennotequal).
assert (neq C c) by (conclude axiom_nocollapse).
assert (~ eq M N).
assert (neq F M) by (conclude lemma_raystrict).
assert (neq M F) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists D, (BetS M F D /\\ Cong F D M F)) by (conclude lemma_extension);destruct Tf as [D];spliter.
assert ((BetS F M G \\/ eq G M \\/ BetS F G M)) by (conclude lemma_ray1).
assert (BetS G F D).
by cases on (BetS F M G \\/ eq G M \\/ BetS F G M).
assert (BetS D F M) by (conclude axiom_betweennesssymmetry).
assert (BetS D F G) by (conclude axiom_betweennesssymmetry).
assert (~ BetS F M N).
intro.

*****
H19 : BetS F M N
H18 : BetS D F G
H17 : BetS D F M
H16 : BetS G F D
H15 : or (BetS F M G) (or (eq G M) (BetS F G M))
H14 : Cong F D M F
H13 : BetS M F D
D : Point
H12 : neq M F
H11 : neq F M
H10 : not (eq M N)
H9 : neq C c
H8 : neq a J
H7 : Lt B b A J
H6 : Cong a J C c
H5 : BetS A a J
J : Point
H4 : Cong G N C c
H3 : Out G F N
H2 : Cong F M A a
H1 : Out F G M
H0 : Cong F G B b
H : TG A a C c B b
A,B,C,F,G,M,N,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
False
+++++
assert (neq F M) by (forward_using lemma_betweennotequal).
-----
Lemma lemma_together2 : forall A B C F G M N a b c, TG A a C c B b -> Cong F G B b -> Out F G M -> Cong F M A a -> Out G F N -> Cong G N C c -> Out M F N.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists J, (BetS A a J /\\ Cong a J C c /\\ Lt B b A J)) by (conclude_def TG );destruct Tf as [J];spliter.
assert (neq a J) by (forward_using lemma_betweennotequal).
assert (neq C c) by (conclude axiom_nocollapse).
assert (~ eq M N).
assert (neq F M) by (conclude lemma_raystrict).
assert (neq M F) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists D, (BetS M F D /\\ Cong F D M F)) by (conclude lemma_extension);destruct Tf as [D];spliter.
assert ((BetS F M G \\/ eq G M \\/ BetS F G M)) by (conclude lemma_ray1).
assert (BetS G F D).
by cases on (BetS F M G \\/ eq G M \\/ BetS F G M).
assert (BetS D F M) by (conclude axiom_betweennesssymmetry).
assert (BetS D F G) by (conclude axiom_betweennesssymmetry).
assert (~ BetS F M N).
intro.
assert (neq F M) by (forward_using lemma_betweennotequal).

*****
H20 : neq F M
H19 : BetS F M N
H18 : BetS D F G
H17 : BetS D F M
H16 : BetS G F D
H15 : or (BetS F M G) (or (eq G M) (BetS F G M))
H14 : Cong F D M F
H13 : BetS M F D
D : Point
H12 : neq M F
H11 : neq F M
H10 : not (eq M N)
H9 : neq C c
H8 : neq a J
H7 : Lt B b A J
H6 : Cong a J C c
H5 : BetS A a J
J : Point
H4 : Cong G N C c
H3 : Out G F N
H2 : Cong F M A a
H1 : Out F G M
H0 : Cong F G B b
H : TG A a C c B b
A,B,C,F,G,M,N,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
False
+++++
let Tf:=fresh in assert (Tf:exists P, (BetS F M P /\ Cong M P C c)) by (conclude lemma_extension);destruct Tf as [P];spliter.
-----
Lemma lemma_together2 : forall A B C F G M N a b c, TG A a C c B b -> Cong F G B b -> Out F G M -> Cong F M A a -> Out G F N -> Cong G N C c -> Out M F N.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists J, (BetS A a J /\\ Cong a J C c /\\ Lt B b A J)) by (conclude_def TG );destruct Tf as [J];spliter.
assert (neq a J) by (forward_using lemma_betweennotequal).
assert (neq C c) by (conclude axiom_nocollapse).
assert (~ eq M N).
assert (neq F M) by (conclude lemma_raystrict).
assert (neq M F) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists D, (BetS M F D /\\ Cong F D M F)) by (conclude lemma_extension);destruct Tf as [D];spliter.
assert ((BetS F M G \\/ eq G M \\/ BetS F G M)) by (conclude lemma_ray1).
assert (BetS G F D).
by cases on (BetS F M G \\/ eq G M \\/ BetS F G M).
assert (BetS D F M) by (conclude axiom_betweennesssymmetry).
assert (BetS D F G) by (conclude axiom_betweennesssymmetry).
assert (~ BetS F M N).
intro.
assert (neq F M) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS F M P /\\ Cong M P C c)) by (conclude lemma_extension);destruct Tf as [P];spliter.

*****
H22 : Cong M P C c
H21 : BetS F M P
P : Point
H20 : neq F M
H19 : BetS F M N
H18 : BetS D F G
H17 : BetS D F M
H16 : BetS G F D
H15 : or (BetS F M G) (or (eq G M) (BetS F G M))
H14 : Cong F D M F
H13 : BetS M F D
D : Point
H12 : neq M F
H11 : neq F M
H10 : not (eq M N)
H9 : neq C c
H8 : neq a J
H7 : Lt B b A J
H6 : Cong a J C c
H5 : BetS A a J
J : Point
H4 : Cong G N C c
H3 : Out G F N
H2 : Cong F M A a
H1 : Out F G M
H0 : Cong F G B b
H : TG A a C c B b
A,B,C,F,G,M,N,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
False
+++++
assert (Lt F G F P) by (conclude lemma_together).
-----
Lemma lemma_together2 : forall A B C F G M N a b c, TG A a C c B b -> Cong F G B b -> Out F G M -> Cong F M A a -> Out G F N -> Cong G N C c -> Out M F N.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists J, (BetS A a J /\\ Cong a J C c /\\ Lt B b A J)) by (conclude_def TG );destruct Tf as [J];spliter.
assert (neq a J) by (forward_using lemma_betweennotequal).
assert (neq C c) by (conclude axiom_nocollapse).
assert (~ eq M N).
assert (neq F M) by (conclude lemma_raystrict).
assert (neq M F) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists D, (BetS M F D /\\ Cong F D M F)) by (conclude lemma_extension);destruct Tf as [D];spliter.
assert ((BetS F M G \\/ eq G M \\/ BetS F G M)) by (conclude lemma_ray1).
assert (BetS G F D).
by cases on (BetS F M G \\/ eq G M \\/ BetS F G M).
assert (BetS D F M) by (conclude axiom_betweennesssymmetry).
assert (BetS D F G) by (conclude axiom_betweennesssymmetry).
assert (~ BetS F M N).
intro.
assert (neq F M) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS F M P /\\ Cong M P C c)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Lt F G F P) by (conclude lemma_together).

*****
H23 : Lt F G F P
H22 : Cong M P C c
H21 : BetS F M P
P : Point
H20 : neq F M
H19 : BetS F M N
H18 : BetS D F G
H17 : BetS D F M
H16 : BetS G F D
H15 : or (BetS F M G) (or (eq G M) (BetS F G M))
H14 : Cong F D M F
H13 : BetS M F D
D : Point
H12 : neq M F
H11 : neq F M
H10 : not (eq M N)
H9 : neq C c
H8 : neq a J
H7 : Lt B b A J
H6 : Cong a J C c
H5 : BetS A a J
J : Point
H4 : Cong G N C c
H3 : Out G F N
H2 : Cong F M A a
H1 : Out F G M
H0 : Cong F G B b
H : TG A a C c B b
A,B,C,F,G,M,N,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
False
+++++
assert (Cong C c G N) by (conclude lemma_congruencesymmetric).
-----
Lemma lemma_together2 : forall A B C F G M N a b c, TG A a C c B b -> Cong F G B b -> Out F G M -> Cong F M A a -> Out G F N -> Cong G N C c -> Out M F N.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists J, (BetS A a J /\\ Cong a J C c /\\ Lt B b A J)) by (conclude_def TG );destruct Tf as [J];spliter.
assert (neq a J) by (forward_using lemma_betweennotequal).
assert (neq C c) by (conclude axiom_nocollapse).
assert (~ eq M N).
assert (neq F M) by (conclude lemma_raystrict).
assert (neq M F) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists D, (BetS M F D /\\ Cong F D M F)) by (conclude lemma_extension);destruct Tf as [D];spliter.
assert ((BetS F M G \\/ eq G M \\/ BetS F G M)) by (conclude lemma_ray1).
assert (BetS G F D).
by cases on (BetS F M G \\/ eq G M \\/ BetS F G M).
assert (BetS D F M) by (conclude axiom_betweennesssymmetry).
assert (BetS D F G) by (conclude axiom_betweennesssymmetry).
assert (~ BetS F M N).
intro.
assert (neq F M) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS F M P /\\ Cong M P C c)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Lt F G F P) by (conclude lemma_together).
assert (Cong C c G N) by (conclude lemma_congruencesymmetric).

*****
H24 : Cong C c G N
H23 : Lt F G F P
H22 : Cong M P C c
H21 : BetS F M P
P : Point
H20 : neq F M
H19 : BetS F M N
H18 : BetS D F G
H17 : BetS D F M
H16 : BetS G F D
H15 : or (BetS F M G) (or (eq G M) (BetS F G M))
H14 : Cong F D M F
H13 : BetS M F D
D : Point
H12 : neq M F
H11 : neq F M
H10 : not (eq M N)
H9 : neq C c
H8 : neq a J
H7 : Lt B b A J
H6 : Cong a J C c
H5 : BetS A a J
J : Point
H4 : Cong G N C c
H3 : Out G F N
H2 : Cong F M A a
H1 : Out F G M
H0 : Cong F G B b
H : TG A a C c B b
A,B,C,F,G,M,N,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
False
+++++
assert (Cong C c N G) by (forward_using lemma_congruenceflip).
-----
Lemma lemma_together2 : forall A B C F G M N a b c, TG A a C c B b -> Cong F G B b -> Out F G M -> Cong F M A a -> Out G F N -> Cong G N C c -> Out M F N.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists J, (BetS A a J /\\ Cong a J C c /\\ Lt B b A J)) by (conclude_def TG );destruct Tf as [J];spliter.
assert (neq a J) by (forward_using lemma_betweennotequal).
assert (neq C c) by (conclude axiom_nocollapse).
assert (~ eq M N).
assert (neq F M) by (conclude lemma_raystrict).
assert (neq M F) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists D, (BetS M F D /\\ Cong F D M F)) by (conclude lemma_extension);destruct Tf as [D];spliter.
assert ((BetS F M G \\/ eq G M \\/ BetS F G M)) by (conclude lemma_ray1).
assert (BetS G F D).
by cases on (BetS F M G \\/ eq G M \\/ BetS F G M).
assert (BetS D F M) by (conclude axiom_betweennesssymmetry).
assert (BetS D F G) by (conclude axiom_betweennesssymmetry).
assert (~ BetS F M N).
intro.
assert (neq F M) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS F M P /\\ Cong M P C c)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Lt F G F P) by (conclude lemma_together).
assert (Cong C c G N) by (conclude lemma_congruencesymmetric).
assert (Cong C c N G) by (forward_using lemma_congruenceflip).

*****
H25 : Cong C c N G
H24 : Cong C c G N
H23 : Lt F G F P
H22 : Cong M P C c
H21 : BetS F M P
P : Point
H20 : neq F M
H19 : BetS F M N
H18 : BetS D F G
H17 : BetS D F M
H16 : BetS G F D
H15 : or (BetS F M G) (or (eq G M) (BetS F G M))
H14 : Cong F D M F
H13 : BetS M F D
D : Point
H12 : neq M F
H11 : neq F M
H10 : not (eq M N)
H9 : neq C c
H8 : neq a J
H7 : Lt B b A J
H6 : Cong a J C c
H5 : BetS A a J
J : Point
H4 : Cong G N C c
H3 : Out G F N
H2 : Cong F M A a
H1 : Out F G M
H0 : Cong F G B b
H : TG A a C c B b
A,B,C,F,G,M,N,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
False
+++++
assert (Cong M P N G) by (conclude lemma_congruencetransitive).
-----
Lemma lemma_together2 : forall A B C F G M N a b c, TG A a C c B b -> Cong F G B b -> Out F G M -> Cong F M A a -> Out G F N -> Cong G N C c -> Out M F N.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists J, (BetS A a J /\\ Cong a J C c /\\ Lt B b A J)) by (conclude_def TG );destruct Tf as [J];spliter.
assert (neq a J) by (forward_using lemma_betweennotequal).
assert (neq C c) by (conclude axiom_nocollapse).
assert (~ eq M N).
assert (neq F M) by (conclude lemma_raystrict).
assert (neq M F) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists D, (BetS M F D /\\ Cong F D M F)) by (conclude lemma_extension);destruct Tf as [D];spliter.
assert ((BetS F M G \\/ eq G M \\/ BetS F G M)) by (conclude lemma_ray1).
assert (BetS G F D).
by cases on (BetS F M G \\/ eq G M \\/ BetS F G M).
assert (BetS D F M) by (conclude axiom_betweennesssymmetry).
assert (BetS D F G) by (conclude axiom_betweennesssymmetry).
assert (~ BetS F M N).
intro.
assert (neq F M) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS F M P /\\ Cong M P C c)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Lt F G F P) by (conclude lemma_together).
assert (Cong C c G N) by (conclude lemma_congruencesymmetric).
assert (Cong C c N G) by (forward_using lemma_congruenceflip).
assert (Cong M P N G) by (conclude lemma_congruencetransitive).

*****
H26 : Cong M P N G
H25 : Cong C c N G
H24 : Cong C c G N
H23 : Lt F G F P
H22 : Cong M P C c
H21 : BetS F M P
P : Point
H20 : neq F M
H19 : BetS F M N
H18 : BetS D F G
H17 : BetS D F M
H16 : BetS G F D
H15 : or (BetS F M G) (or (eq G M) (BetS F G M))
H14 : Cong F D M F
H13 : BetS M F D
D : Point
H12 : neq M F
H11 : neq F M
H10 : not (eq M N)
H9 : neq C c
H8 : neq a J
H7 : Lt B b A J
H6 : Cong a J C c
H5 : BetS A a J
J : Point
H4 : Cong G N C c
H3 : Out G F N
H2 : Cong F M A a
H1 : Out F G M
H0 : Cong F G B b
H : TG A a C c B b
A,B,C,F,G,M,N,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
False
+++++
assert (Cong F M F M) by (conclude cn_congruencereflexive).
-----
Lemma lemma_together2 : forall A B C F G M N a b c, TG A a C c B b -> Cong F G B b -> Out F G M -> Cong F M A a -> Out G F N -> Cong G N C c -> Out M F N.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists J, (BetS A a J /\\ Cong a J C c /\\ Lt B b A J)) by (conclude_def TG );destruct Tf as [J];spliter.
assert (neq a J) by (forward_using lemma_betweennotequal).
assert (neq C c) by (conclude axiom_nocollapse).
assert (~ eq M N).
assert (neq F M) by (conclude lemma_raystrict).
assert (neq M F) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists D, (BetS M F D /\\ Cong F D M F)) by (conclude lemma_extension);destruct Tf as [D];spliter.
assert ((BetS F M G \\/ eq G M \\/ BetS F G M)) by (conclude lemma_ray1).
assert (BetS G F D).
by cases on (BetS F M G \\/ eq G M \\/ BetS F G M).
assert (BetS D F M) by (conclude axiom_betweennesssymmetry).
assert (BetS D F G) by (conclude axiom_betweennesssymmetry).
assert (~ BetS F M N).
intro.
assert (neq F M) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS F M P /\\ Cong M P C c)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Lt F G F P) by (conclude lemma_together).
assert (Cong C c G N) by (conclude lemma_congruencesymmetric).
assert (Cong C c N G) by (forward_using lemma_congruenceflip).
assert (Cong M P N G) by (conclude lemma_congruencetransitive).
assert (Cong F M F M) by (conclude cn_congruencereflexive).

*****
H27 : Cong F M F M
H26 : Cong M P N G
H25 : Cong C c N G
H24 : Cong C c G N
H23 : Lt F G F P
H22 : Cong M P C c
H21 : BetS F M P
P : Point
H20 : neq F M
H19 : BetS F M N
H18 : BetS D F G
H17 : BetS D F M
H16 : BetS G F D
H15 : or (BetS F M G) (or (eq G M) (BetS F G M))
H14 : Cong F D M F
H13 : BetS M F D
D : Point
H12 : neq M F
H11 : neq F M
H10 : not (eq M N)
H9 : neq C c
H8 : neq a J
H7 : Lt B b A J
H6 : Cong a J C c
H5 : BetS A a J
J : Point
H4 : Cong G N C c
H3 : Out G F N
H2 : Cong F M A a
H1 : Out F G M
H0 : Cong F G B b
H : TG A a C c B b
A,B,C,F,G,M,N,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
False
+++++
assert (Lt F M F N) by (conclude_def Lt ).
-----
Lemma lemma_together2 : forall A B C F G M N a b c, TG A a C c B b -> Cong F G B b -> Out F G M -> Cong F M A a -> Out G F N -> Cong G N C c -> Out M F N.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists J, (BetS A a J /\\ Cong a J C c /\\ Lt B b A J)) by (conclude_def TG );destruct Tf as [J];spliter.
assert (neq a J) by (forward_using lemma_betweennotequal).
assert (neq C c) by (conclude axiom_nocollapse).
assert (~ eq M N).
assert (neq F M) by (conclude lemma_raystrict).
assert (neq M F) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists D, (BetS M F D /\\ Cong F D M F)) by (conclude lemma_extension);destruct Tf as [D];spliter.
assert ((BetS F M G \\/ eq G M \\/ BetS F G M)) by (conclude lemma_ray1).
assert (BetS G F D).
by cases on (BetS F M G \\/ eq G M \\/ BetS F G M).
assert (BetS D F M) by (conclude axiom_betweennesssymmetry).
assert (BetS D F G) by (conclude axiom_betweennesssymmetry).
assert (~ BetS F M N).
intro.
assert (neq F M) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS F M P /\\ Cong M P C c)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Lt F G F P) by (conclude lemma_together).
assert (Cong C c G N) by (conclude lemma_congruencesymmetric).
assert (Cong C c N G) by (forward_using lemma_congruenceflip).
assert (Cong M P N G) by (conclude lemma_congruencetransitive).
assert (Cong F M F M) by (conclude cn_congruencereflexive).
assert (Lt F M F N) by (conclude_def Lt ).

*****
H28 : Lt F M F N
H27 : Cong F M F M
H26 : Cong M P N G
H25 : Cong C c N G
H24 : Cong C c G N
H23 : Lt F G F P
H22 : Cong M P C c
H21 : BetS F M P
P : Point
H20 : neq F M
H19 : BetS F M N
H18 : BetS D F G
H17 : BetS D F M
H16 : BetS G F D
H15 : or (BetS F M G) (or (eq G M) (BetS F G M))
H14 : Cong F D M F
H13 : BetS M F D
D : Point
H12 : neq M F
H11 : neq F M
H10 : not (eq M N)
H9 : neq C c
H8 : neq a J
H7 : Lt B b A J
H6 : Cong a J C c
H5 : BetS A a J
J : Point
H4 : Cong G N C c
H3 : Out G F N
H2 : Cong F M A a
H1 : Out F G M
H0 : Cong F G B b
H : TG A a C c B b
A,B,C,F,G,M,N,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
False
+++++
assert (~ BetS F N G).
-----
Lemma lemma_together2 : forall A B C F G M N a b c, TG A a C c B b -> Cong F G B b -> Out F G M -> Cong F M A a -> Out G F N -> Cong G N C c -> Out M F N.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists J, (BetS A a J /\\ Cong a J C c /\\ Lt B b A J)) by (conclude_def TG );destruct Tf as [J];spliter.
assert (neq a J) by (forward_using lemma_betweennotequal).
assert (neq C c) by (conclude axiom_nocollapse).
assert (~ eq M N).
assert (neq F M) by (conclude lemma_raystrict).
assert (neq M F) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists D, (BetS M F D /\\ Cong F D M F)) by (conclude lemma_extension);destruct Tf as [D];spliter.
assert ((BetS F M G \\/ eq G M \\/ BetS F G M)) by (conclude lemma_ray1).
assert (BetS G F D).
by cases on (BetS F M G \\/ eq G M \\/ BetS F G M).
assert (BetS D F M) by (conclude axiom_betweennesssymmetry).
assert (BetS D F G) by (conclude axiom_betweennesssymmetry).
assert (~ BetS F M N).
intro.
assert (neq F M) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS F M P /\\ Cong M P C c)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Lt F G F P) by (conclude lemma_together).
assert (Cong C c G N) by (conclude lemma_congruencesymmetric).
assert (Cong C c N G) by (forward_using lemma_congruenceflip).
assert (Cong M P N G) by (conclude lemma_congruencetransitive).
assert (Cong F M F M) by (conclude cn_congruencereflexive).
assert (Lt F M F N) by (conclude_def Lt ).
assert (~ BetS F N G).

*****
H28 : Lt F M F N
H27 : Cong F M F M
H26 : Cong M P N G
H25 : Cong C c N G
H24 : Cong C c G N
H23 : Lt F G F P
H22 : Cong M P C c
H21 : BetS F M P
P : Point
H20 : neq F M
H19 : BetS F M N
H18 : BetS D F G
H17 : BetS D F M
H16 : BetS G F D
H15 : or (BetS F M G) (or (eq G M) (BetS F G M))
H14 : Cong F D M F
H13 : BetS M F D
D : Point
H12 : neq M F
H11 : neq F M
H10 : not (eq M N)
H9 : neq C c
H8 : neq a J
H7 : Lt B b A J
H6 : Cong a J C c
H5 : BetS A a J
J : Point
H4 : Cong G N C c
H3 : Out G F N
H2 : Cong F M A a
H1 : Out F G M
H0 : Cong F G B b
H : TG A a C c B b
A,B,C,F,G,M,N,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
not (BetS F N G)
+++++
intro.
-----
Lemma lemma_together2 : forall A B C F G M N a b c, TG A a C c B b -> Cong F G B b -> Out F G M -> Cong F M A a -> Out G F N -> Cong G N C c -> Out M F N.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists J, (BetS A a J /\\ Cong a J C c /\\ Lt B b A J)) by (conclude_def TG );destruct Tf as [J];spliter.
assert (neq a J) by (forward_using lemma_betweennotequal).
assert (neq C c) by (conclude axiom_nocollapse).
assert (~ eq M N).
assert (neq F M) by (conclude lemma_raystrict).
assert (neq M F) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists D, (BetS M F D /\\ Cong F D M F)) by (conclude lemma_extension);destruct Tf as [D];spliter.
assert ((BetS F M G \\/ eq G M \\/ BetS F G M)) by (conclude lemma_ray1).
assert (BetS G F D).
by cases on (BetS F M G \\/ eq G M \\/ BetS F G M).
assert (BetS D F M) by (conclude axiom_betweennesssymmetry).
assert (BetS D F G) by (conclude axiom_betweennesssymmetry).
assert (~ BetS F M N).
intro.
assert (neq F M) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS F M P /\\ Cong M P C c)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Lt F G F P) by (conclude lemma_together).
assert (Cong C c G N) by (conclude lemma_congruencesymmetric).
assert (Cong C c N G) by (forward_using lemma_congruenceflip).
assert (Cong M P N G) by (conclude lemma_congruencetransitive).
assert (Cong F M F M) by (conclude cn_congruencereflexive).
assert (Lt F M F N) by (conclude_def Lt ).
assert (~ BetS F N G).
intro.

*****
H29 : BetS F N G
H28 : Lt F M F N
H27 : Cong F M F M
H26 : Cong M P N G
H25 : Cong C c N G
H24 : Cong C c G N
H23 : Lt F G F P
H22 : Cong M P C c
H21 : BetS F M P
P : Point
H20 : neq F M
H19 : BetS F M N
H18 : BetS D F G
H17 : BetS D F M
H16 : BetS G F D
H15 : or (BetS F M G) (or (eq G M) (BetS F G M))
H14 : Cong F D M F
H13 : BetS M F D
D : Point
H12 : neq M F
H11 : neq F M
H10 : not (eq M N)
H9 : neq C c
H8 : neq a J
H7 : Lt B b A J
H6 : Cong a J C c
H5 : BetS A a J
J : Point
H4 : Cong G N C c
H3 : Out G F N
H2 : Cong F M A a
H1 : Out F G M
H0 : Cong F G B b
H : TG A a C c B b
A,B,C,F,G,M,N,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
False
+++++
assert (Lt F P F G) by (conclude lemma_lessthanadditive).
-----
Lemma lemma_together2 : forall A B C F G M N a b c, TG A a C c B b -> Cong F G B b -> Out F G M -> Cong F M A a -> Out G F N -> Cong G N C c -> Out M F N.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists J, (BetS A a J /\\ Cong a J C c /\\ Lt B b A J)) by (conclude_def TG );destruct Tf as [J];spliter.
assert (neq a J) by (forward_using lemma_betweennotequal).
assert (neq C c) by (conclude axiom_nocollapse).
assert (~ eq M N).
assert (neq F M) by (conclude lemma_raystrict).
assert (neq M F) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists D, (BetS M F D /\\ Cong F D M F)) by (conclude lemma_extension);destruct Tf as [D];spliter.
assert ((BetS F M G \\/ eq G M \\/ BetS F G M)) by (conclude lemma_ray1).
assert (BetS G F D).
by cases on (BetS F M G \\/ eq G M \\/ BetS F G M).
assert (BetS D F M) by (conclude axiom_betweennesssymmetry).
assert (BetS D F G) by (conclude axiom_betweennesssymmetry).
assert (~ BetS F M N).
intro.
assert (neq F M) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS F M P /\\ Cong M P C c)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Lt F G F P) by (conclude lemma_together).
assert (Cong C c G N) by (conclude lemma_congruencesymmetric).
assert (Cong C c N G) by (forward_using lemma_congruenceflip).
assert (Cong M P N G) by (conclude lemma_congruencetransitive).
assert (Cong F M F M) by (conclude cn_congruencereflexive).
assert (Lt F M F N) by (conclude_def Lt ).
assert (~ BetS F N G).
intro.
assert (Lt F P F G) by (conclude lemma_lessthanadditive).

*****
H30 : Lt F P F G
H29 : BetS F N G
H28 : Lt F M F N
H27 : Cong F M F M
H26 : Cong M P N G
H25 : Cong C c N G
H24 : Cong C c G N
H23 : Lt F G F P
H22 : Cong M P C c
H21 : BetS F M P
P : Point
H20 : neq F M
H19 : BetS F M N
H18 : BetS D F G
H17 : BetS D F M
H16 : BetS G F D
H15 : or (BetS F M G) (or (eq G M) (BetS F G M))
H14 : Cong F D M F
H13 : BetS M F D
D : Point
H12 : neq M F
H11 : neq F M
H10 : not (eq M N)
H9 : neq C c
H8 : neq a J
H7 : Lt B b A J
H6 : Cong a J C c
H5 : BetS A a J
J : Point
H4 : Cong G N C c
H3 : Out G F N
H2 : Cong F M A a
H1 : Out F G M
H0 : Cong F G B b
H : TG A a C c B b
A,B,C,F,G,M,N,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
False
+++++
assert (Lt F G F G) by (conclude lemma_lessthantransitive).
-----
Lemma lemma_together2 : forall A B C F G M N a b c, TG A a C c B b -> Cong F G B b -> Out F G M -> Cong F M A a -> Out G F N -> Cong G N C c -> Out M F N.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists J, (BetS A a J /\\ Cong a J C c /\\ Lt B b A J)) by (conclude_def TG );destruct Tf as [J];spliter.
assert (neq a J) by (forward_using lemma_betweennotequal).
assert (neq C c) by (conclude axiom_nocollapse).
assert (~ eq M N).
assert (neq F M) by (conclude lemma_raystrict).
assert (neq M F) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists D, (BetS M F D /\\ Cong F D M F)) by (conclude lemma_extension);destruct Tf as [D];spliter.
assert ((BetS F M G \\/ eq G M \\/ BetS F G M)) by (conclude lemma_ray1).
assert (BetS G F D).
by cases on (BetS F M G \\/ eq G M \\/ BetS F G M).
assert (BetS D F M) by (conclude axiom_betweennesssymmetry).
assert (BetS D F G) by (conclude axiom_betweennesssymmetry).
assert (~ BetS F M N).
intro.
assert (neq F M) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS F M P /\\ Cong M P C c)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Lt F G F P) by (conclude lemma_together).
assert (Cong C c G N) by (conclude lemma_congruencesymmetric).
assert (Cong C c N G) by (forward_using lemma_congruenceflip).
assert (Cong M P N G) by (conclude lemma_congruencetransitive).
assert (Cong F M F M) by (conclude cn_congruencereflexive).
assert (Lt F M F N) by (conclude_def Lt ).
assert (~ BetS F N G).
intro.
assert (Lt F P F G) by (conclude lemma_lessthanadditive).
assert (Lt F G F G) by (conclude lemma_lessthantransitive).

*****
H31 : Lt F G F G
H30 : Lt F P F G
H29 : BetS F N G
H28 : Lt F M F N
H27 : Cong F M F M
H26 : Cong M P N G
H25 : Cong C c N G
H24 : Cong C c G N
H23 : Lt F G F P
H22 : Cong M P C c
H21 : BetS F M P
P : Point
H20 : neq F M
H19 : BetS F M N
H18 : BetS D F G
H17 : BetS D F M
H16 : BetS G F D
H15 : or (BetS F M G) (or (eq G M) (BetS F G M))
H14 : Cong F D M F
H13 : BetS M F D
D : Point
H12 : neq M F
H11 : neq F M
H10 : not (eq M N)
H9 : neq C c
H8 : neq a J
H7 : Lt B b A J
H6 : Cong a J C c
H5 : BetS A a J
J : Point
H4 : Cong G N C c
H3 : Out G F N
H2 : Cong F M A a
H1 : Out F G M
H0 : Cong F G B b
H : TG A a C c B b
A,B,C,F,G,M,N,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
False
+++++
assert (~ Lt F G F G) by (conclude lemma_trichotomy2).
-----
Lemma lemma_together2 : forall A B C F G M N a b c, TG A a C c B b -> Cong F G B b -> Out F G M -> Cong F M A a -> Out G F N -> Cong G N C c -> Out M F N.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists J, (BetS A a J /\\ Cong a J C c /\\ Lt B b A J)) by (conclude_def TG );destruct Tf as [J];spliter.
assert (neq a J) by (forward_using lemma_betweennotequal).
assert (neq C c) by (conclude axiom_nocollapse).
assert (~ eq M N).
assert (neq F M) by (conclude lemma_raystrict).
assert (neq M F) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists D, (BetS M F D /\\ Cong F D M F)) by (conclude lemma_extension);destruct Tf as [D];spliter.
assert ((BetS F M G \\/ eq G M \\/ BetS F G M)) by (conclude lemma_ray1).
assert (BetS G F D).
by cases on (BetS F M G \\/ eq G M \\/ BetS F G M).
assert (BetS D F M) by (conclude axiom_betweennesssymmetry).
assert (BetS D F G) by (conclude axiom_betweennesssymmetry).
assert (~ BetS F M N).
intro.
assert (neq F M) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS F M P /\\ Cong M P C c)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Lt F G F P) by (conclude lemma_together).
assert (Cong C c G N) by (conclude lemma_congruencesymmetric).
assert (Cong C c N G) by (forward_using lemma_congruenceflip).
assert (Cong M P N G) by (conclude lemma_congruencetransitive).
assert (Cong F M F M) by (conclude cn_congruencereflexive).
assert (Lt F M F N) by (conclude_def Lt ).
assert (~ BetS F N G).
intro.
assert (Lt F P F G) by (conclude lemma_lessthanadditive).
assert (Lt F G F G) by (conclude lemma_lessthantransitive).
assert (~ Lt F G F G) by (conclude lemma_trichotomy2).

*****
H32 : not (Lt F G F G)
H31 : Lt F G F G
H30 : Lt F P F G
H29 : BetS F N G
H28 : Lt F M F N
H27 : Cong F M F M
H26 : Cong M P N G
H25 : Cong C c N G
H24 : Cong C c G N
H23 : Lt F G F P
H22 : Cong M P C c
H21 : BetS F M P
P : Point
H20 : neq F M
H19 : BetS F M N
H18 : BetS D F G
H17 : BetS D F M
H16 : BetS G F D
H15 : or (BetS F M G) (or (eq G M) (BetS F G M))
H14 : Cong F D M F
H13 : BetS M F D
D : Point
H12 : neq M F
H11 : neq F M
H10 : not (eq M N)
H9 : neq C c
H8 : neq a J
H7 : Lt B b A J
H6 : Cong a J C c
H5 : BetS A a J
J : Point
H4 : Cong G N C c
H3 : Out G F N
H2 : Cong F M A a
H1 : Out F G M
H0 : Cong F G B b
H : TG A a C c B b
A,B,C,F,G,M,N,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma lemma_together2 : forall A B C F G M N a b c, TG A a C c B b -> Cong F G B b -> Out F G M -> Cong F M A a -> Out G F N -> Cong G N C c -> Out M F N.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists J, (BetS A a J /\\ Cong a J C c /\\ Lt B b A J)) by (conclude_def TG );destruct Tf as [J];spliter.
assert (neq a J) by (forward_using lemma_betweennotequal).
assert (neq C c) by (conclude axiom_nocollapse).
assert (~ eq M N).
assert (neq F M) by (conclude lemma_raystrict).
assert (neq M F) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists D, (BetS M F D /\\ Cong F D M F)) by (conclude lemma_extension);destruct Tf as [D];spliter.
assert ((BetS F M G \\/ eq G M \\/ BetS F G M)) by (conclude lemma_ray1).
assert (BetS G F D).
by cases on (BetS F M G \\/ eq G M \\/ BetS F G M).
assert (BetS D F M) by (conclude axiom_betweennesssymmetry).
assert (BetS D F G) by (conclude axiom_betweennesssymmetry).
assert (~ BetS F M N).
intro.
assert (neq F M) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS F M P /\\ Cong M P C c)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Lt F G F P) by (conclude lemma_together).
assert (Cong C c G N) by (conclude lemma_congruencesymmetric).
assert (Cong C c N G) by (forward_using lemma_congruenceflip).
assert (Cong M P N G) by (conclude lemma_congruencetransitive).
assert (Cong F M F M) by (conclude cn_congruencereflexive).
assert (Lt F M F N) by (conclude_def Lt ).
assert (~ BetS F N G).

*****
H29 : not (BetS F N G)
H28 : Lt F M F N
H27 : Cong F M F M
H26 : Cong M P N G
H25 : Cong C c N G
H24 : Cong C c G N
H23 : Lt F G F P
H22 : Cong M P C c
H21 : BetS F M P
P : Point
H20 : neq F M
H19 : BetS F M N
H18 : BetS D F G
H17 : BetS D F M
H16 : BetS G F D
H15 : or (BetS F M G) (or (eq G M) (BetS F G M))
H14 : Cong F D M F
H13 : BetS M F D
D : Point
H12 : neq M F
H11 : neq F M
H10 : not (eq M N)
H9 : neq C c
H8 : neq a J
H7 : Lt B b A J
H6 : Cong a J C c
H5 : BetS A a J
J : Point
H4 : Cong G N C c
H3 : Out G F N
H2 : Cong F M A a
H1 : Out F G M
H0 : Cong F G B b
H : TG A a C c B b
A,B,C,F,G,M,N,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
False
+++++
assert (~ BetS G N F).
-----
Lemma lemma_together2 : forall A B C F G M N a b c, TG A a C c B b -> Cong F G B b -> Out F G M -> Cong F M A a -> Out G F N -> Cong G N C c -> Out M F N.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists J, (BetS A a J /\\ Cong a J C c /\\ Lt B b A J)) by (conclude_def TG );destruct Tf as [J];spliter.
assert (neq a J) by (forward_using lemma_betweennotequal).
assert (neq C c) by (conclude axiom_nocollapse).
assert (~ eq M N).
assert (neq F M) by (conclude lemma_raystrict).
assert (neq M F) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists D, (BetS M F D /\\ Cong F D M F)) by (conclude lemma_extension);destruct Tf as [D];spliter.
assert ((BetS F M G \\/ eq G M \\/ BetS F G M)) by (conclude lemma_ray1).
assert (BetS G F D).
by cases on (BetS F M G \\/ eq G M \\/ BetS F G M).
assert (BetS D F M) by (conclude axiom_betweennesssymmetry).
assert (BetS D F G) by (conclude axiom_betweennesssymmetry).
assert (~ BetS F M N).
intro.
assert (neq F M) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS F M P /\\ Cong M P C c)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Lt F G F P) by (conclude lemma_together).
assert (Cong C c G N) by (conclude lemma_congruencesymmetric).
assert (Cong C c N G) by (forward_using lemma_congruenceflip).
assert (Cong M P N G) by (conclude lemma_congruencetransitive).
assert (Cong F M F M) by (conclude cn_congruencereflexive).
assert (Lt F M F N) by (conclude_def Lt ).
assert (~ BetS F N G).
assert (~ BetS G N F).

*****
H29 : not (BetS F N G)
H28 : Lt F M F N
H27 : Cong F M F M
H26 : Cong M P N G
H25 : Cong C c N G
H24 : Cong C c G N
H23 : Lt F G F P
H22 : Cong M P C c
H21 : BetS F M P
P : Point
H20 : neq F M
H19 : BetS F M N
H18 : BetS D F G
H17 : BetS D F M
H16 : BetS G F D
H15 : or (BetS F M G) (or (eq G M) (BetS F G M))
H14 : Cong F D M F
H13 : BetS M F D
D : Point
H12 : neq M F
H11 : neq F M
H10 : not (eq M N)
H9 : neq C c
H8 : neq a J
H7 : Lt B b A J
H6 : Cong a J C c
H5 : BetS A a J
J : Point
H4 : Cong G N C c
H3 : Out G F N
H2 : Cong F M A a
H1 : Out F G M
H0 : Cong F G B b
H : TG A a C c B b
A,B,C,F,G,M,N,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
not (BetS G N F)
+++++
intro.
-----
Lemma lemma_together2 : forall A B C F G M N a b c, TG A a C c B b -> Cong F G B b -> Out F G M -> Cong F M A a -> Out G F N -> Cong G N C c -> Out M F N.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists J, (BetS A a J /\\ Cong a J C c /\\ Lt B b A J)) by (conclude_def TG );destruct Tf as [J];spliter.
assert (neq a J) by (forward_using lemma_betweennotequal).
assert (neq C c) by (conclude axiom_nocollapse).
assert (~ eq M N).
assert (neq F M) by (conclude lemma_raystrict).
assert (neq M F) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists D, (BetS M F D /\\ Cong F D M F)) by (conclude lemma_extension);destruct Tf as [D];spliter.
assert ((BetS F M G \\/ eq G M \\/ BetS F G M)) by (conclude lemma_ray1).
assert (BetS G F D).
by cases on (BetS F M G \\/ eq G M \\/ BetS F G M).
assert (BetS D F M) by (conclude axiom_betweennesssymmetry).
assert (BetS D F G) by (conclude axiom_betweennesssymmetry).
assert (~ BetS F M N).
intro.
assert (neq F M) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS F M P /\\ Cong M P C c)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Lt F G F P) by (conclude lemma_together).
assert (Cong C c G N) by (conclude lemma_congruencesymmetric).
assert (Cong C c N G) by (forward_using lemma_congruenceflip).
assert (Cong M P N G) by (conclude lemma_congruencetransitive).
assert (Cong F M F M) by (conclude cn_congruencereflexive).
assert (Lt F M F N) by (conclude_def Lt ).
assert (~ BetS F N G).
assert (~ BetS G N F).
intro.

*****
H30 : BetS G N F
H29 : not (BetS F N G)
H28 : Lt F M F N
H27 : Cong F M F M
H26 : Cong M P N G
H25 : Cong C c N G
H24 : Cong C c G N
H23 : Lt F G F P
H22 : Cong M P C c
H21 : BetS F M P
P : Point
H20 : neq F M
H19 : BetS F M N
H18 : BetS D F G
H17 : BetS D F M
H16 : BetS G F D
H15 : or (BetS F M G) (or (eq G M) (BetS F G M))
H14 : Cong F D M F
H13 : BetS M F D
D : Point
H12 : neq M F
H11 : neq F M
H10 : not (eq M N)
H9 : neq C c
H8 : neq a J
H7 : Lt B b A J
H6 : Cong a J C c
H5 : BetS A a J
J : Point
H4 : Cong G N C c
H3 : Out G F N
H2 : Cong F M A a
H1 : Out F G M
H0 : Cong F G B b
H : TG A a C c B b
A,B,C,F,G,M,N,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
False
+++++
assert (BetS F N G) by (conclude axiom_betweennesssymmetry).
-----
Lemma lemma_together2 : forall A B C F G M N a b c, TG A a C c B b -> Cong F G B b -> Out F G M -> Cong F M A a -> Out G F N -> Cong G N C c -> Out M F N.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists J, (BetS A a J /\\ Cong a J C c /\\ Lt B b A J)) by (conclude_def TG );destruct Tf as [J];spliter.
assert (neq a J) by (forward_using lemma_betweennotequal).
assert (neq C c) by (conclude axiom_nocollapse).
assert (~ eq M N).
assert (neq F M) by (conclude lemma_raystrict).
assert (neq M F) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists D, (BetS M F D /\\ Cong F D M F)) by (conclude lemma_extension);destruct Tf as [D];spliter.
assert ((BetS F M G \\/ eq G M \\/ BetS F G M)) by (conclude lemma_ray1).
assert (BetS G F D).
by cases on (BetS F M G \\/ eq G M \\/ BetS F G M).
assert (BetS D F M) by (conclude axiom_betweennesssymmetry).
assert (BetS D F G) by (conclude axiom_betweennesssymmetry).
assert (~ BetS F M N).
intro.
assert (neq F M) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS F M P /\\ Cong M P C c)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Lt F G F P) by (conclude lemma_together).
assert (Cong C c G N) by (conclude lemma_congruencesymmetric).
assert (Cong C c N G) by (forward_using lemma_congruenceflip).
assert (Cong M P N G) by (conclude lemma_congruencetransitive).
assert (Cong F M F M) by (conclude cn_congruencereflexive).
assert (Lt F M F N) by (conclude_def Lt ).
assert (~ BetS F N G).
assert (~ BetS G N F).
intro.
assert (BetS F N G) by (conclude axiom_betweennesssymmetry).

*****
H31 : BetS F N G
H30 : BetS G N F
H29 : not (BetS F N G)
H28 : Lt F M F N
H27 : Cong F M F M
H26 : Cong M P N G
H25 : Cong C c N G
H24 : Cong C c G N
H23 : Lt F G F P
H22 : Cong M P C c
H21 : BetS F M P
P : Point
H20 : neq F M
H19 : BetS F M N
H18 : BetS D F G
H17 : BetS D F M
H16 : BetS G F D
H15 : or (BetS F M G) (or (eq G M) (BetS F G M))
H14 : Cong F D M F
H13 : BetS M F D
D : Point
H12 : neq M F
H11 : neq F M
H10 : not (eq M N)
H9 : neq C c
H8 : neq a J
H7 : Lt B b A J
H6 : Cong a J C c
H5 : BetS A a J
J : Point
H4 : Cong G N C c
H3 : Out G F N
H2 : Cong F M A a
H1 : Out F G M
H0 : Cong F G B b
H : TG A a C c B b
A,B,C,F,G,M,N,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma lemma_together2 : forall A B C F G M N a b c, TG A a C c B b -> Cong F G B b -> Out F G M -> Cong F M A a -> Out G F N -> Cong G N C c -> Out M F N.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists J, (BetS A a J /\\ Cong a J C c /\\ Lt B b A J)) by (conclude_def TG );destruct Tf as [J];spliter.
assert (neq a J) by (forward_using lemma_betweennotequal).
assert (neq C c) by (conclude axiom_nocollapse).
assert (~ eq M N).
assert (neq F M) by (conclude lemma_raystrict).
assert (neq M F) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists D, (BetS M F D /\\ Cong F D M F)) by (conclude lemma_extension);destruct Tf as [D];spliter.
assert ((BetS F M G \\/ eq G M \\/ BetS F G M)) by (conclude lemma_ray1).
assert (BetS G F D).
by cases on (BetS F M G \\/ eq G M \\/ BetS F G M).
assert (BetS D F M) by (conclude axiom_betweennesssymmetry).
assert (BetS D F G) by (conclude axiom_betweennesssymmetry).
assert (~ BetS F M N).
intro.
assert (neq F M) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS F M P /\\ Cong M P C c)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Lt F G F P) by (conclude lemma_together).
assert (Cong C c G N) by (conclude lemma_congruencesymmetric).
assert (Cong C c N G) by (forward_using lemma_congruenceflip).
assert (Cong M P N G) by (conclude lemma_congruencetransitive).
assert (Cong F M F M) by (conclude cn_congruencereflexive).
assert (Lt F M F N) by (conclude_def Lt ).
assert (~ BetS F N G).
assert (~ BetS G N F).

*****
H30 : not (BetS G N F)
H29 : not (BetS F N G)
H28 : Lt F M F N
H27 : Cong F M F M
H26 : Cong M P N G
H25 : Cong C c N G
H24 : Cong C c G N
H23 : Lt F G F P
H22 : Cong M P C c
H21 : BetS F M P
P : Point
H20 : neq F M
H19 : BetS F M N
H18 : BetS D F G
H17 : BetS D F M
H16 : BetS G F D
H15 : or (BetS F M G) (or (eq G M) (BetS F G M))
H14 : Cong F D M F
H13 : BetS M F D
D : Point
H12 : neq M F
H11 : neq F M
H10 : not (eq M N)
H9 : neq C c
H8 : neq a J
H7 : Lt B b A J
H6 : Cong a J C c
H5 : BetS A a J
J : Point
H4 : Cong G N C c
H3 : Out G F N
H2 : Cong F M A a
H1 : Out F G M
H0 : Cong F G B b
H : TG A a C c B b
A,B,C,F,G,M,N,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
False
+++++
assert ((BetS G N F \/ eq F N \/ BetS G F N)) by (conclude lemma_ray1).
-----
Lemma lemma_together2 : forall A B C F G M N a b c, TG A a C c B b -> Cong F G B b -> Out F G M -> Cong F M A a -> Out G F N -> Cong G N C c -> Out M F N.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists J, (BetS A a J /\\ Cong a J C c /\\ Lt B b A J)) by (conclude_def TG );destruct Tf as [J];spliter.
assert (neq a J) by (forward_using lemma_betweennotequal).
assert (neq C c) by (conclude axiom_nocollapse).
assert (~ eq M N).
assert (neq F M) by (conclude lemma_raystrict).
assert (neq M F) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists D, (BetS M F D /\\ Cong F D M F)) by (conclude lemma_extension);destruct Tf as [D];spliter.
assert ((BetS F M G \\/ eq G M \\/ BetS F G M)) by (conclude lemma_ray1).
assert (BetS G F D).
by cases on (BetS F M G \\/ eq G M \\/ BetS F G M).
assert (BetS D F M) by (conclude axiom_betweennesssymmetry).
assert (BetS D F G) by (conclude axiom_betweennesssymmetry).
assert (~ BetS F M N).
intro.
assert (neq F M) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS F M P /\\ Cong M P C c)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Lt F G F P) by (conclude lemma_together).
assert (Cong C c G N) by (conclude lemma_congruencesymmetric).
assert (Cong C c N G) by (forward_using lemma_congruenceflip).
assert (Cong M P N G) by (conclude lemma_congruencetransitive).
assert (Cong F M F M) by (conclude cn_congruencereflexive).
assert (Lt F M F N) by (conclude_def Lt ).
assert (~ BetS F N G).
assert (~ BetS G N F).
assert ((BetS G N F \\/ eq F N \\/ BetS G F N)) by (conclude lemma_ray1).

*****
H31 : or (BetS G N F) (or (eq F N) (BetS G F N))
H30 : not (BetS G N F)
H29 : not (BetS F N G)
H28 : Lt F M F N
H27 : Cong F M F M
H26 : Cong M P N G
H25 : Cong C c N G
H24 : Cong C c G N
H23 : Lt F G F P
H22 : Cong M P C c
H21 : BetS F M P
P : Point
H20 : neq F M
H19 : BetS F M N
H18 : BetS D F G
H17 : BetS D F M
H16 : BetS G F D
H15 : or (BetS F M G) (or (eq G M) (BetS F G M))
H14 : Cong F D M F
H13 : BetS M F D
D : Point
H12 : neq M F
H11 : neq F M
H10 : not (eq M N)
H9 : neq C c
H8 : neq a J
H7 : Lt B b A J
H6 : Cong a J C c
H5 : BetS A a J
J : Point
H4 : Cong G N C c
H3 : Out G F N
H2 : Cong F M A a
H1 : Out F G M
H0 : Cong F G B b
H : TG A a C c B b
A,B,C,F,G,M,N,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
False
+++++
assert (neq F N) by (forward_using lemma_betweennotequal).
-----
Lemma lemma_together2 : forall A B C F G M N a b c, TG A a C c B b -> Cong F G B b -> Out F G M -> Cong F M A a -> Out G F N -> Cong G N C c -> Out M F N.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists J, (BetS A a J /\\ Cong a J C c /\\ Lt B b A J)) by (conclude_def TG );destruct Tf as [J];spliter.
assert (neq a J) by (forward_using lemma_betweennotequal).
assert (neq C c) by (conclude axiom_nocollapse).
assert (~ eq M N).
assert (neq F M) by (conclude lemma_raystrict).
assert (neq M F) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists D, (BetS M F D /\\ Cong F D M F)) by (conclude lemma_extension);destruct Tf as [D];spliter.
assert ((BetS F M G \\/ eq G M \\/ BetS F G M)) by (conclude lemma_ray1).
assert (BetS G F D).
by cases on (BetS F M G \\/ eq G M \\/ BetS F G M).
assert (BetS D F M) by (conclude axiom_betweennesssymmetry).
assert (BetS D F G) by (conclude axiom_betweennesssymmetry).
assert (~ BetS F M N).
intro.
assert (neq F M) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS F M P /\\ Cong M P C c)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Lt F G F P) by (conclude lemma_together).
assert (Cong C c G N) by (conclude lemma_congruencesymmetric).
assert (Cong C c N G) by (forward_using lemma_congruenceflip).
assert (Cong M P N G) by (conclude lemma_congruencetransitive).
assert (Cong F M F M) by (conclude cn_congruencereflexive).
assert (Lt F M F N) by (conclude_def Lt ).
assert (~ BetS F N G).
assert (~ BetS G N F).
assert ((BetS G N F \\/ eq F N \\/ BetS G F N)) by (conclude lemma_ray1).
assert (neq F N) by (forward_using lemma_betweennotequal).

*****
H32 : neq F N
H31 : or (BetS G N F) (or (eq F N) (BetS G F N))
H30 : not (BetS G N F)
H29 : not (BetS F N G)
H28 : Lt F M F N
H27 : Cong F M F M
H26 : Cong M P N G
H25 : Cong C c N G
H24 : Cong C c G N
H23 : Lt F G F P
H22 : Cong M P C c
H21 : BetS F M P
P : Point
H20 : neq F M
H19 : BetS F M N
H18 : BetS D F G
H17 : BetS D F M
H16 : BetS G F D
H15 : or (BetS F M G) (or (eq G M) (BetS F G M))
H14 : Cong F D M F
H13 : BetS M F D
D : Point
H12 : neq M F
H11 : neq F M
H10 : not (eq M N)
H9 : neq C c
H8 : neq a J
H7 : Lt B b A J
H6 : Cong a J C c
H5 : BetS A a J
J : Point
H4 : Cong G N C c
H3 : Out G F N
H2 : Cong F M A a
H1 : Out F G M
H0 : Cong F G B b
H : TG A a C c B b
A,B,C,F,G,M,N,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
False
+++++
assert (~ ~ BetS G F N).
-----
Lemma lemma_together2 : forall A B C F G M N a b c, TG A a C c B b -> Cong F G B b -> Out F G M -> Cong F M A a -> Out G F N -> Cong G N C c -> Out M F N.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists J, (BetS A a J /\\ Cong a J C c /\\ Lt B b A J)) by (conclude_def TG );destruct Tf as [J];spliter.
assert (neq a J) by (forward_using lemma_betweennotequal).
assert (neq C c) by (conclude axiom_nocollapse).
assert (~ eq M N).
assert (neq F M) by (conclude lemma_raystrict).
assert (neq M F) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists D, (BetS M F D /\\ Cong F D M F)) by (conclude lemma_extension);destruct Tf as [D];spliter.
assert ((BetS F M G \\/ eq G M \\/ BetS F G M)) by (conclude lemma_ray1).
assert (BetS G F D).
by cases on (BetS F M G \\/ eq G M \\/ BetS F G M).
assert (BetS D F M) by (conclude axiom_betweennesssymmetry).
assert (BetS D F G) by (conclude axiom_betweennesssymmetry).
assert (~ BetS F M N).
intro.
assert (neq F M) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS F M P /\\ Cong M P C c)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Lt F G F P) by (conclude lemma_together).
assert (Cong C c G N) by (conclude lemma_congruencesymmetric).
assert (Cong C c N G) by (forward_using lemma_congruenceflip).
assert (Cong M P N G) by (conclude lemma_congruencetransitive).
assert (Cong F M F M) by (conclude cn_congruencereflexive).
assert (Lt F M F N) by (conclude_def Lt ).
assert (~ BetS F N G).
assert (~ BetS G N F).
assert ((BetS G N F \\/ eq F N \\/ BetS G F N)) by (conclude lemma_ray1).
assert (neq F N) by (forward_using lemma_betweennotequal).
assert (~ ~ BetS G F N).

*****
H32 : neq F N
H31 : or (BetS G N F) (or (eq F N) (BetS G F N))
H30 : not (BetS G N F)
H29 : not (BetS F N G)
H28 : Lt F M F N
H27 : Cong F M F M
H26 : Cong M P N G
H25 : Cong C c N G
H24 : Cong C c G N
H23 : Lt F G F P
H22 : Cong M P C c
H21 : BetS F M P
P : Point
H20 : neq F M
H19 : BetS F M N
H18 : BetS D F G
H17 : BetS D F M
H16 : BetS G F D
H15 : or (BetS F M G) (or (eq G M) (BetS F G M))
H14 : Cong F D M F
H13 : BetS M F D
D : Point
H12 : neq M F
H11 : neq F M
H10 : not (eq M N)
H9 : neq C c
H8 : neq a J
H7 : Lt B b A J
H6 : Cong a J C c
H5 : BetS A a J
J : Point
H4 : Cong G N C c
H3 : Out G F N
H2 : Cong F M A a
H1 : Out F G M
H0 : Cong F G B b
H : TG A a C c B b
A,B,C,F,G,M,N,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
not (not (BetS G F N))
+++++
intro.
-----
Lemma lemma_together2 : forall A B C F G M N a b c, TG A a C c B b -> Cong F G B b -> Out F G M -> Cong F M A a -> Out G F N -> Cong G N C c -> Out M F N.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists J, (BetS A a J /\\ Cong a J C c /\\ Lt B b A J)) by (conclude_def TG );destruct Tf as [J];spliter.
assert (neq a J) by (forward_using lemma_betweennotequal).
assert (neq C c) by (conclude axiom_nocollapse).
assert (~ eq M N).
assert (neq F M) by (conclude lemma_raystrict).
assert (neq M F) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists D, (BetS M F D /\\ Cong F D M F)) by (conclude lemma_extension);destruct Tf as [D];spliter.
assert ((BetS F M G \\/ eq G M \\/ BetS F G M)) by (conclude lemma_ray1).
assert (BetS G F D).
by cases on (BetS F M G \\/ eq G M \\/ BetS F G M).
assert (BetS D F M) by (conclude axiom_betweennesssymmetry).
assert (BetS D F G) by (conclude axiom_betweennesssymmetry).
assert (~ BetS F M N).
intro.
assert (neq F M) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS F M P /\\ Cong M P C c)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Lt F G F P) by (conclude lemma_together).
assert (Cong C c G N) by (conclude lemma_congruencesymmetric).
assert (Cong C c N G) by (forward_using lemma_congruenceflip).
assert (Cong M P N G) by (conclude lemma_congruencetransitive).
assert (Cong F M F M) by (conclude cn_congruencereflexive).
assert (Lt F M F N) by (conclude_def Lt ).
assert (~ BetS F N G).
assert (~ BetS G N F).
assert ((BetS G N F \\/ eq F N \\/ BetS G F N)) by (conclude lemma_ray1).
assert (neq F N) by (forward_using lemma_betweennotequal).
assert (~ ~ BetS G F N).
intro.

*****
H33 : not (BetS G F N)
H32 : neq F N
H31 : or (BetS G N F) (or (eq F N) (BetS G F N))
H30 : not (BetS G N F)
H29 : not (BetS F N G)
H28 : Lt F M F N
H27 : Cong F M F M
H26 : Cong M P N G
H25 : Cong C c N G
H24 : Cong C c G N
H23 : Lt F G F P
H22 : Cong M P C c
H21 : BetS F M P
P : Point
H20 : neq F M
H19 : BetS F M N
H18 : BetS D F G
H17 : BetS D F M
H16 : BetS G F D
H15 : or (BetS F M G) (or (eq G M) (BetS F G M))
H14 : Cong F D M F
H13 : BetS M F D
D : Point
H12 : neq M F
H11 : neq F M
H10 : not (eq M N)
H9 : neq C c
H8 : neq a J
H7 : Lt B b A J
H6 : Cong a J C c
H5 : BetS A a J
J : Point
H4 : Cong G N C c
H3 : Out G F N
H2 : Cong F M A a
H1 : Out F G M
H0 : Cong F G B b
H : TG A a C c B b
A,B,C,F,G,M,N,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma lemma_together2 : forall A B C F G M N a b c, TG A a C c B b -> Cong F G B b -> Out F G M -> Cong F M A a -> Out G F N -> Cong G N C c -> Out M F N.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists J, (BetS A a J /\\ Cong a J C c /\\ Lt B b A J)) by (conclude_def TG );destruct Tf as [J];spliter.
assert (neq a J) by (forward_using lemma_betweennotequal).
assert (neq C c) by (conclude axiom_nocollapse).
assert (~ eq M N).
assert (neq F M) by (conclude lemma_raystrict).
assert (neq M F) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists D, (BetS M F D /\\ Cong F D M F)) by (conclude lemma_extension);destruct Tf as [D];spliter.
assert ((BetS F M G \\/ eq G M \\/ BetS F G M)) by (conclude lemma_ray1).
assert (BetS G F D).
by cases on (BetS F M G \\/ eq G M \\/ BetS F G M).
assert (BetS D F M) by (conclude axiom_betweennesssymmetry).
assert (BetS D F G) by (conclude axiom_betweennesssymmetry).
assert (~ BetS F M N).
intro.
assert (neq F M) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS F M P /\\ Cong M P C c)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Lt F G F P) by (conclude lemma_together).
assert (Cong C c G N) by (conclude lemma_congruencesymmetric).
assert (Cong C c N G) by (forward_using lemma_congruenceflip).
assert (Cong M P N G) by (conclude lemma_congruencetransitive).
assert (Cong F M F M) by (conclude cn_congruencereflexive).
assert (Lt F M F N) by (conclude_def Lt ).
assert (~ BetS F N G).
assert (~ BetS G N F).
assert ((BetS G N F \\/ eq F N \\/ BetS G F N)) by (conclude lemma_ray1).
assert (neq F N) by (forward_using lemma_betweennotequal).
assert (~ ~ BetS G F N).

*****
H33 : not (not (BetS G F N))
H32 : neq F N
H31 : or (BetS G N F) (or (eq F N) (BetS G F N))
H30 : not (BetS G N F)
H29 : not (BetS F N G)
H28 : Lt F M F N
H27 : Cong F M F M
H26 : Cong M P N G
H25 : Cong C c N G
H24 : Cong C c G N
H23 : Lt F G F P
H22 : Cong M P C c
H21 : BetS F M P
P : Point
H20 : neq F M
H19 : BetS F M N
H18 : BetS D F G
H17 : BetS D F M
H16 : BetS G F D
H15 : or (BetS F M G) (or (eq G M) (BetS F G M))
H14 : Cong F D M F
H13 : BetS M F D
D : Point
H12 : neq M F
H11 : neq F M
H10 : not (eq M N)
H9 : neq C c
H8 : neq a J
H7 : Lt B b A J
H6 : Cong a J C c
H5 : BetS A a J
J : Point
H4 : Cong G N C c
H3 : Out G F N
H2 : Cong F M A a
H1 : Out F G M
H0 : Cong F G B b
H : TG A a C c B b
A,B,C,F,G,M,N,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
False
+++++
assert (BetS N F G) by (conclude axiom_betweennesssymmetry).
-----
Lemma lemma_together2 : forall A B C F G M N a b c, TG A a C c B b -> Cong F G B b -> Out F G M -> Cong F M A a -> Out G F N -> Cong G N C c -> Out M F N.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists J, (BetS A a J /\\ Cong a J C c /\\ Lt B b A J)) by (conclude_def TG );destruct Tf as [J];spliter.
assert (neq a J) by (forward_using lemma_betweennotequal).
assert (neq C c) by (conclude axiom_nocollapse).
assert (~ eq M N).
assert (neq F M) by (conclude lemma_raystrict).
assert (neq M F) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists D, (BetS M F D /\\ Cong F D M F)) by (conclude lemma_extension);destruct Tf as [D];spliter.
assert ((BetS F M G \\/ eq G M \\/ BetS F G M)) by (conclude lemma_ray1).
assert (BetS G F D).
by cases on (BetS F M G \\/ eq G M \\/ BetS F G M).
assert (BetS D F M) by (conclude axiom_betweennesssymmetry).
assert (BetS D F G) by (conclude axiom_betweennesssymmetry).
assert (~ BetS F M N).
intro.
assert (neq F M) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS F M P /\\ Cong M P C c)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Lt F G F P) by (conclude lemma_together).
assert (Cong C c G N) by (conclude lemma_congruencesymmetric).
assert (Cong C c N G) by (forward_using lemma_congruenceflip).
assert (Cong M P N G) by (conclude lemma_congruencetransitive).
assert (Cong F M F M) by (conclude cn_congruencereflexive).
assert (Lt F M F N) by (conclude_def Lt ).
assert (~ BetS F N G).
assert (~ BetS G N F).
assert ((BetS G N F \\/ eq F N \\/ BetS G F N)) by (conclude lemma_ray1).
assert (neq F N) by (forward_using lemma_betweennotequal).
assert (~ ~ BetS G F N).
assert (BetS N F G) by (conclude axiom_betweennesssymmetry).

*****
H34 : BetS N F G
H33 : not (not (BetS G F N))
H32 : neq F N
H31 : or (BetS G N F) (or (eq F N) (BetS G F N))
H30 : not (BetS G N F)
H29 : not (BetS F N G)
H28 : Lt F M F N
H27 : Cong F M F M
H26 : Cong M P N G
H25 : Cong C c N G
H24 : Cong C c G N
H23 : Lt F G F P
H22 : Cong M P C c
H21 : BetS F M P
P : Point
H20 : neq F M
H19 : BetS F M N
H18 : BetS D F G
H17 : BetS D F M
H16 : BetS G F D
H15 : or (BetS F M G) (or (eq G M) (BetS F G M))
H14 : Cong F D M F
H13 : BetS M F D
D : Point
H12 : neq M F
H11 : neq F M
H10 : not (eq M N)
H9 : neq C c
H8 : neq a J
H7 : Lt B b A J
H6 : Cong a J C c
H5 : BetS A a J
J : Point
H4 : Cong G N C c
H3 : Out G F N
H2 : Cong F M A a
H1 : Out F G M
H0 : Cong F G B b
H : TG A a C c B b
A,B,C,F,G,M,N,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
False
+++++
assert (~ ~ BetS N F M).
-----
Lemma lemma_together2 : forall A B C F G M N a b c, TG A a C c B b -> Cong F G B b -> Out F G M -> Cong F M A a -> Out G F N -> Cong G N C c -> Out M F N.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists J, (BetS A a J /\\ Cong a J C c /\\ Lt B b A J)) by (conclude_def TG );destruct Tf as [J];spliter.
assert (neq a J) by (forward_using lemma_betweennotequal).
assert (neq C c) by (conclude axiom_nocollapse).
assert (~ eq M N).
assert (neq F M) by (conclude lemma_raystrict).
assert (neq M F) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists D, (BetS M F D /\\ Cong F D M F)) by (conclude lemma_extension);destruct Tf as [D];spliter.
assert ((BetS F M G \\/ eq G M \\/ BetS F G M)) by (conclude lemma_ray1).
assert (BetS G F D).
by cases on (BetS F M G \\/ eq G M \\/ BetS F G M).
assert (BetS D F M) by (conclude axiom_betweennesssymmetry).
assert (BetS D F G) by (conclude axiom_betweennesssymmetry).
assert (~ BetS F M N).
intro.
assert (neq F M) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS F M P /\\ Cong M P C c)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Lt F G F P) by (conclude lemma_together).
assert (Cong C c G N) by (conclude lemma_congruencesymmetric).
assert (Cong C c N G) by (forward_using lemma_congruenceflip).
assert (Cong M P N G) by (conclude lemma_congruencetransitive).
assert (Cong F M F M) by (conclude cn_congruencereflexive).
assert (Lt F M F N) by (conclude_def Lt ).
assert (~ BetS F N G).
assert (~ BetS G N F).
assert ((BetS G N F \\/ eq F N \\/ BetS G F N)) by (conclude lemma_ray1).
assert (neq F N) by (forward_using lemma_betweennotequal).
assert (~ ~ BetS G F N).
assert (BetS N F G) by (conclude axiom_betweennesssymmetry).
assert (~ ~ BetS N F M).

*****
H34 : BetS N F G
H33 : not (not (BetS G F N))
H32 : neq F N
H31 : or (BetS G N F) (or (eq F N) (BetS G F N))
H30 : not (BetS G N F)
H29 : not (BetS F N G)
H28 : Lt F M F N
H27 : Cong F M F M
H26 : Cong M P N G
H25 : Cong C c N G
H24 : Cong C c G N
H23 : Lt F G F P
H22 : Cong M P C c
H21 : BetS F M P
P : Point
H20 : neq F M
H19 : BetS F M N
H18 : BetS D F G
H17 : BetS D F M
H16 : BetS G F D
H15 : or (BetS F M G) (or (eq G M) (BetS F G M))
H14 : Cong F D M F
H13 : BetS M F D
D : Point
H12 : neq M F
H11 : neq F M
H10 : not (eq M N)
H9 : neq C c
H8 : neq a J
H7 : Lt B b A J
H6 : Cong a J C c
H5 : BetS A a J
J : Point
H4 : Cong G N C c
H3 : Out G F N
H2 : Cong F M A a
H1 : Out F G M
H0 : Cong F G B b
H : TG A a C c B b
A,B,C,F,G,M,N,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
not (not (BetS N F M))
+++++
intro.
-----
Lemma lemma_together2 : forall A B C F G M N a b c, TG A a C c B b -> Cong F G B b -> Out F G M -> Cong F M A a -> Out G F N -> Cong G N C c -> Out M F N.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists J, (BetS A a J /\\ Cong a J C c /\\ Lt B b A J)) by (conclude_def TG );destruct Tf as [J];spliter.
assert (neq a J) by (forward_using lemma_betweennotequal).
assert (neq C c) by (conclude axiom_nocollapse).
assert (~ eq M N).
assert (neq F M) by (conclude lemma_raystrict).
assert (neq M F) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists D, (BetS M F D /\\ Cong F D M F)) by (conclude lemma_extension);destruct Tf as [D];spliter.
assert ((BetS F M G \\/ eq G M \\/ BetS F G M)) by (conclude lemma_ray1).
assert (BetS G F D).
by cases on (BetS F M G \\/ eq G M \\/ BetS F G M).
assert (BetS D F M) by (conclude axiom_betweennesssymmetry).
assert (BetS D F G) by (conclude axiom_betweennesssymmetry).
assert (~ BetS F M N).
intro.
assert (neq F M) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS F M P /\\ Cong M P C c)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Lt F G F P) by (conclude lemma_together).
assert (Cong C c G N) by (conclude lemma_congruencesymmetric).
assert (Cong C c N G) by (forward_using lemma_congruenceflip).
assert (Cong M P N G) by (conclude lemma_congruencetransitive).
assert (Cong F M F M) by (conclude cn_congruencereflexive).
assert (Lt F M F N) by (conclude_def Lt ).
assert (~ BetS F N G).
assert (~ BetS G N F).
assert ((BetS G N F \\/ eq F N \\/ BetS G F N)) by (conclude lemma_ray1).
assert (neq F N) by (forward_using lemma_betweennotequal).
assert (~ ~ BetS G F N).
assert (BetS N F G) by (conclude axiom_betweennesssymmetry).
assert (~ ~ BetS N F M).
intro.

*****
H35 : not (BetS N F M)
H34 : BetS N F G
H33 : not (not (BetS G F N))
H32 : neq F N
H31 : or (BetS G N F) (or (eq F N) (BetS G F N))
H30 : not (BetS G N F)
H29 : not (BetS F N G)
H28 : Lt F M F N
H27 : Cong F M F M
H26 : Cong M P N G
H25 : Cong C c N G
H24 : Cong C c G N
H23 : Lt F G F P
H22 : Cong M P C c
H21 : BetS F M P
P : Point
H20 : neq F M
H19 : BetS F M N
H18 : BetS D F G
H17 : BetS D F M
H16 : BetS G F D
H15 : or (BetS F M G) (or (eq G M) (BetS F G M))
H14 : Cong F D M F
H13 : BetS M F D
D : Point
H12 : neq M F
H11 : neq F M
H10 : not (eq M N)
H9 : neq C c
H8 : neq a J
H7 : Lt B b A J
H6 : Cong a J C c
H5 : BetS A a J
J : Point
H4 : Cong G N C c
H3 : Out G F N
H2 : Cong F M A a
H1 : Out F G M
H0 : Cong F G B b
H : TG A a C c B b
A,B,C,F,G,M,N,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
False
+++++
assert (~ BetS F M G).
-----
Lemma lemma_together2 : forall A B C F G M N a b c, TG A a C c B b -> Cong F G B b -> Out F G M -> Cong F M A a -> Out G F N -> Cong G N C c -> Out M F N.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists J, (BetS A a J /\\ Cong a J C c /\\ Lt B b A J)) by (conclude_def TG );destruct Tf as [J];spliter.
assert (neq a J) by (forward_using lemma_betweennotequal).
assert (neq C c) by (conclude axiom_nocollapse).
assert (~ eq M N).
assert (neq F M) by (conclude lemma_raystrict).
assert (neq M F) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists D, (BetS M F D /\\ Cong F D M F)) by (conclude lemma_extension);destruct Tf as [D];spliter.
assert ((BetS F M G \\/ eq G M \\/ BetS F G M)) by (conclude lemma_ray1).
assert (BetS G F D).
by cases on (BetS F M G \\/ eq G M \\/ BetS F G M).
assert (BetS D F M) by (conclude axiom_betweennesssymmetry).
assert (BetS D F G) by (conclude axiom_betweennesssymmetry).
assert (~ BetS F M N).
intro.
assert (neq F M) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS F M P /\\ Cong M P C c)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Lt F G F P) by (conclude lemma_together).
assert (Cong C c G N) by (conclude lemma_congruencesymmetric).
assert (Cong C c N G) by (forward_using lemma_congruenceflip).
assert (Cong M P N G) by (conclude lemma_congruencetransitive).
assert (Cong F M F M) by (conclude cn_congruencereflexive).
assert (Lt F M F N) by (conclude_def Lt ).
assert (~ BetS F N G).
assert (~ BetS G N F).
assert ((BetS G N F \\/ eq F N \\/ BetS G F N)) by (conclude lemma_ray1).
assert (neq F N) by (forward_using lemma_betweennotequal).
assert (~ ~ BetS G F N).
assert (BetS N F G) by (conclude axiom_betweennesssymmetry).
assert (~ ~ BetS N F M).
intro.
assert (~ BetS F M G).

*****
H35 : not (BetS N F M)
H34 : BetS N F G
H33 : not (not (BetS G F N))
H32 : neq F N
H31 : or (BetS G N F) (or (eq F N) (BetS G F N))
H30 : not (BetS G N F)
H29 : not (BetS F N G)
H28 : Lt F M F N
H27 : Cong F M F M
H26 : Cong M P N G
H25 : Cong C c N G
H24 : Cong C c G N
H23 : Lt F G F P
H22 : Cong M P C c
H21 : BetS F M P
P : Point
H20 : neq F M
H19 : BetS F M N
H18 : BetS D F G
H17 : BetS D F M
H16 : BetS G F D
H15 : or (BetS F M G) (or (eq G M) (BetS F G M))
H14 : Cong F D M F
H13 : BetS M F D
D : Point
H12 : neq M F
H11 : neq F M
H10 : not (eq M N)
H9 : neq C c
H8 : neq a J
H7 : Lt B b A J
H6 : Cong a J C c
H5 : BetS A a J
J : Point
H4 : Cong G N C c
H3 : Out G F N
H2 : Cong F M A a
H1 : Out F G M
H0 : Cong F G B b
H : TG A a C c B b
A,B,C,F,G,M,N,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
not (BetS F M G)
+++++
intro.
-----
Lemma lemma_together2 : forall A B C F G M N a b c, TG A a C c B b -> Cong F G B b -> Out F G M -> Cong F M A a -> Out G F N -> Cong G N C c -> Out M F N.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists J, (BetS A a J /\\ Cong a J C c /\\ Lt B b A J)) by (conclude_def TG );destruct Tf as [J];spliter.
assert (neq a J) by (forward_using lemma_betweennotequal).
assert (neq C c) by (conclude axiom_nocollapse).
assert (~ eq M N).
assert (neq F M) by (conclude lemma_raystrict).
assert (neq M F) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists D, (BetS M F D /\\ Cong F D M F)) by (conclude lemma_extension);destruct Tf as [D];spliter.
assert ((BetS F M G \\/ eq G M \\/ BetS F G M)) by (conclude lemma_ray1).
assert (BetS G F D).
by cases on (BetS F M G \\/ eq G M \\/ BetS F G M).
assert (BetS D F M) by (conclude axiom_betweennesssymmetry).
assert (BetS D F G) by (conclude axiom_betweennesssymmetry).
assert (~ BetS F M N).
intro.
assert (neq F M) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS F M P /\\ Cong M P C c)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Lt F G F P) by (conclude lemma_together).
assert (Cong C c G N) by (conclude lemma_congruencesymmetric).
assert (Cong C c N G) by (forward_using lemma_congruenceflip).
assert (Cong M P N G) by (conclude lemma_congruencetransitive).
assert (Cong F M F M) by (conclude cn_congruencereflexive).
assert (Lt F M F N) by (conclude_def Lt ).
assert (~ BetS F N G).
assert (~ BetS G N F).
assert ((BetS G N F \\/ eq F N \\/ BetS G F N)) by (conclude lemma_ray1).
assert (neq F N) by (forward_using lemma_betweennotequal).
assert (~ ~ BetS G F N).
assert (BetS N F G) by (conclude axiom_betweennesssymmetry).
assert (~ ~ BetS N F M).
intro.
assert (~ BetS F M G).
intro.

*****
H36 : BetS F M G
H35 : not (BetS N F M)
H34 : BetS N F G
H33 : not (not (BetS G F N))
H32 : neq F N
H31 : or (BetS G N F) (or (eq F N) (BetS G F N))
H30 : not (BetS G N F)
H29 : not (BetS F N G)
H28 : Lt F M F N
H27 : Cong F M F M
H26 : Cong M P N G
H25 : Cong C c N G
H24 : Cong C c G N
H23 : Lt F G F P
H22 : Cong M P C c
H21 : BetS F M P
P : Point
H20 : neq F M
H19 : BetS F M N
H18 : BetS D F G
H17 : BetS D F M
H16 : BetS G F D
H15 : or (BetS F M G) (or (eq G M) (BetS F G M))
H14 : Cong F D M F
H13 : BetS M F D
D : Point
H12 : neq M F
H11 : neq F M
H10 : not (eq M N)
H9 : neq C c
H8 : neq a J
H7 : Lt B b A J
H6 : Cong a J C c
H5 : BetS A a J
J : Point
H4 : Cong G N C c
H3 : Out G F N
H2 : Cong F M A a
H1 : Out F G M
H0 : Cong F G B b
H : TG A a C c B b
A,B,C,F,G,M,N,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
False
+++++
assert (BetS N F M) by (conclude axiom_innertransitivity).
-----
Lemma lemma_together2 : forall A B C F G M N a b c, TG A a C c B b -> Cong F G B b -> Out F G M -> Cong F M A a -> Out G F N -> Cong G N C c -> Out M F N.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists J, (BetS A a J /\\ Cong a J C c /\\ Lt B b A J)) by (conclude_def TG );destruct Tf as [J];spliter.
assert (neq a J) by (forward_using lemma_betweennotequal).
assert (neq C c) by (conclude axiom_nocollapse).
assert (~ eq M N).
assert (neq F M) by (conclude lemma_raystrict).
assert (neq M F) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists D, (BetS M F D /\\ Cong F D M F)) by (conclude lemma_extension);destruct Tf as [D];spliter.
assert ((BetS F M G \\/ eq G M \\/ BetS F G M)) by (conclude lemma_ray1).
assert (BetS G F D).
by cases on (BetS F M G \\/ eq G M \\/ BetS F G M).
assert (BetS D F M) by (conclude axiom_betweennesssymmetry).
assert (BetS D F G) by (conclude axiom_betweennesssymmetry).
assert (~ BetS F M N).
intro.
assert (neq F M) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS F M P /\\ Cong M P C c)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Lt F G F P) by (conclude lemma_together).
assert (Cong C c G N) by (conclude lemma_congruencesymmetric).
assert (Cong C c N G) by (forward_using lemma_congruenceflip).
assert (Cong M P N G) by (conclude lemma_congruencetransitive).
assert (Cong F M F M) by (conclude cn_congruencereflexive).
assert (Lt F M F N) by (conclude_def Lt ).
assert (~ BetS F N G).
assert (~ BetS G N F).
assert ((BetS G N F \\/ eq F N \\/ BetS G F N)) by (conclude lemma_ray1).
assert (neq F N) by (forward_using lemma_betweennotequal).
assert (~ ~ BetS G F N).
assert (BetS N F G) by (conclude axiom_betweennesssymmetry).
assert (~ ~ BetS N F M).
intro.
assert (~ BetS F M G).
intro.
assert (BetS N F M) by (conclude axiom_innertransitivity).

*****
H37 : BetS N F M
H36 : BetS F M G
H35 : not (BetS N F M)
H34 : BetS N F G
H33 : not (not (BetS G F N))
H32 : neq F N
H31 : or (BetS G N F) (or (eq F N) (BetS G F N))
H30 : not (BetS G N F)
H29 : not (BetS F N G)
H28 : Lt F M F N
H27 : Cong F M F M
H26 : Cong M P N G
H25 : Cong C c N G
H24 : Cong C c G N
H23 : Lt F G F P
H22 : Cong M P C c
H21 : BetS F M P
P : Point
H20 : neq F M
H19 : BetS F M N
H18 : BetS D F G
H17 : BetS D F M
H16 : BetS G F D
H15 : or (BetS F M G) (or (eq G M) (BetS F G M))
H14 : Cong F D M F
H13 : BetS M F D
D : Point
H12 : neq M F
H11 : neq F M
H10 : not (eq M N)
H9 : neq C c
H8 : neq a J
H7 : Lt B b A J
H6 : Cong a J C c
H5 : BetS A a J
J : Point
H4 : Cong G N C c
H3 : Out G F N
H2 : Cong F M A a
H1 : Out F G M
H0 : Cong F G B b
H : TG A a C c B b
A,B,C,F,G,M,N,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma lemma_together2 : forall A B C F G M N a b c, TG A a C c B b -> Cong F G B b -> Out F G M -> Cong F M A a -> Out G F N -> Cong G N C c -> Out M F N.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists J, (BetS A a J /\\ Cong a J C c /\\ Lt B b A J)) by (conclude_def TG );destruct Tf as [J];spliter.
assert (neq a J) by (forward_using lemma_betweennotequal).
assert (neq C c) by (conclude axiom_nocollapse).
assert (~ eq M N).
assert (neq F M) by (conclude lemma_raystrict).
assert (neq M F) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists D, (BetS M F D /\\ Cong F D M F)) by (conclude lemma_extension);destruct Tf as [D];spliter.
assert ((BetS F M G \\/ eq G M \\/ BetS F G M)) by (conclude lemma_ray1).
assert (BetS G F D).
by cases on (BetS F M G \\/ eq G M \\/ BetS F G M).
assert (BetS D F M) by (conclude axiom_betweennesssymmetry).
assert (BetS D F G) by (conclude axiom_betweennesssymmetry).
assert (~ BetS F M N).
intro.
assert (neq F M) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS F M P /\\ Cong M P C c)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Lt F G F P) by (conclude lemma_together).
assert (Cong C c G N) by (conclude lemma_congruencesymmetric).
assert (Cong C c N G) by (forward_using lemma_congruenceflip).
assert (Cong M P N G) by (conclude lemma_congruencetransitive).
assert (Cong F M F M) by (conclude cn_congruencereflexive).
assert (Lt F M F N) by (conclude_def Lt ).
assert (~ BetS F N G).
assert (~ BetS G N F).
assert ((BetS G N F \\/ eq F N \\/ BetS G F N)) by (conclude lemma_ray1).
assert (neq F N) by (forward_using lemma_betweennotequal).
assert (~ ~ BetS G F N).
assert (BetS N F G) by (conclude axiom_betweennesssymmetry).
assert (~ ~ BetS N F M).
intro.
assert (~ BetS F M G).

*****
H36 : not (BetS F M G)
H35 : not (BetS N F M)
H34 : BetS N F G
H33 : not (not (BetS G F N))
H32 : neq F N
H31 : or (BetS G N F) (or (eq F N) (BetS G F N))
H30 : not (BetS G N F)
H29 : not (BetS F N G)
H28 : Lt F M F N
H27 : Cong F M F M
H26 : Cong M P N G
H25 : Cong C c N G
H24 : Cong C c G N
H23 : Lt F G F P
H22 : Cong M P C c
H21 : BetS F M P
P : Point
H20 : neq F M
H19 : BetS F M N
H18 : BetS D F G
H17 : BetS D F M
H16 : BetS G F D
H15 : or (BetS F M G) (or (eq G M) (BetS F G M))
H14 : Cong F D M F
H13 : BetS M F D
D : Point
H12 : neq M F
H11 : neq F M
H10 : not (eq M N)
H9 : neq C c
H8 : neq a J
H7 : Lt B b A J
H6 : Cong a J C c
H5 : BetS A a J
J : Point
H4 : Cong G N C c
H3 : Out G F N
H2 : Cong F M A a
H1 : Out F G M
H0 : Cong F G B b
H : TG A a C c B b
A,B,C,F,G,M,N,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
False
+++++
assert (~ BetS F G M).
-----
Lemma lemma_together2 : forall A B C F G M N a b c, TG A a C c B b -> Cong F G B b -> Out F G M -> Cong F M A a -> Out G F N -> Cong G N C c -> Out M F N.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists J, (BetS A a J /\\ Cong a J C c /\\ Lt B b A J)) by (conclude_def TG );destruct Tf as [J];spliter.
assert (neq a J) by (forward_using lemma_betweennotequal).
assert (neq C c) by (conclude axiom_nocollapse).
assert (~ eq M N).
assert (neq F M) by (conclude lemma_raystrict).
assert (neq M F) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists D, (BetS M F D /\\ Cong F D M F)) by (conclude lemma_extension);destruct Tf as [D];spliter.
assert ((BetS F M G \\/ eq G M \\/ BetS F G M)) by (conclude lemma_ray1).
assert (BetS G F D).
by cases on (BetS F M G \\/ eq G M \\/ BetS F G M).
assert (BetS D F M) by (conclude axiom_betweennesssymmetry).
assert (BetS D F G) by (conclude axiom_betweennesssymmetry).
assert (~ BetS F M N).
intro.
assert (neq F M) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS F M P /\\ Cong M P C c)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Lt F G F P) by (conclude lemma_together).
assert (Cong C c G N) by (conclude lemma_congruencesymmetric).
assert (Cong C c N G) by (forward_using lemma_congruenceflip).
assert (Cong M P N G) by (conclude lemma_congruencetransitive).
assert (Cong F M F M) by (conclude cn_congruencereflexive).
assert (Lt F M F N) by (conclude_def Lt ).
assert (~ BetS F N G).
assert (~ BetS G N F).
assert ((BetS G N F \\/ eq F N \\/ BetS G F N)) by (conclude lemma_ray1).
assert (neq F N) by (forward_using lemma_betweennotequal).
assert (~ ~ BetS G F N).
assert (BetS N F G) by (conclude axiom_betweennesssymmetry).
assert (~ ~ BetS N F M).
intro.
assert (~ BetS F M G).
assert (~ BetS F G M).

*****
H36 : not (BetS F M G)
H35 : not (BetS N F M)
H34 : BetS N F G
H33 : not (not (BetS G F N))
H32 : neq F N
H31 : or (BetS G N F) (or (eq F N) (BetS G F N))
H30 : not (BetS G N F)
H29 : not (BetS F N G)
H28 : Lt F M F N
H27 : Cong F M F M
H26 : Cong M P N G
H25 : Cong C c N G
H24 : Cong C c G N
H23 : Lt F G F P
H22 : Cong M P C c
H21 : BetS F M P
P : Point
H20 : neq F M
H19 : BetS F M N
H18 : BetS D F G
H17 : BetS D F M
H16 : BetS G F D
H15 : or (BetS F M G) (or (eq G M) (BetS F G M))
H14 : Cong F D M F
H13 : BetS M F D
D : Point
H12 : neq M F
H11 : neq F M
H10 : not (eq M N)
H9 : neq C c
H8 : neq a J
H7 : Lt B b A J
H6 : Cong a J C c
H5 : BetS A a J
J : Point
H4 : Cong G N C c
H3 : Out G F N
H2 : Cong F M A a
H1 : Out F G M
H0 : Cong F G B b
H : TG A a C c B b
A,B,C,F,G,M,N,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
not (BetS F G M)
+++++
intro.
-----
Lemma lemma_together2 : forall A B C F G M N a b c, TG A a C c B b -> Cong F G B b -> Out F G M -> Cong F M A a -> Out G F N -> Cong G N C c -> Out M F N.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists J, (BetS A a J /\\ Cong a J C c /\\ Lt B b A J)) by (conclude_def TG );destruct Tf as [J];spliter.
assert (neq a J) by (forward_using lemma_betweennotequal).
assert (neq C c) by (conclude axiom_nocollapse).
assert (~ eq M N).
assert (neq F M) by (conclude lemma_raystrict).
assert (neq M F) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists D, (BetS M F D /\\ Cong F D M F)) by (conclude lemma_extension);destruct Tf as [D];spliter.
assert ((BetS F M G \\/ eq G M \\/ BetS F G M)) by (conclude lemma_ray1).
assert (BetS G F D).
by cases on (BetS F M G \\/ eq G M \\/ BetS F G M).
assert (BetS D F M) by (conclude axiom_betweennesssymmetry).
assert (BetS D F G) by (conclude axiom_betweennesssymmetry).
assert (~ BetS F M N).
intro.
assert (neq F M) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS F M P /\\ Cong M P C c)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Lt F G F P) by (conclude lemma_together).
assert (Cong C c G N) by (conclude lemma_congruencesymmetric).
assert (Cong C c N G) by (forward_using lemma_congruenceflip).
assert (Cong M P N G) by (conclude lemma_congruencetransitive).
assert (Cong F M F M) by (conclude cn_congruencereflexive).
assert (Lt F M F N) by (conclude_def Lt ).
assert (~ BetS F N G).
assert (~ BetS G N F).
assert ((BetS G N F \\/ eq F N \\/ BetS G F N)) by (conclude lemma_ray1).
assert (neq F N) by (forward_using lemma_betweennotequal).
assert (~ ~ BetS G F N).
assert (BetS N F G) by (conclude axiom_betweennesssymmetry).
assert (~ ~ BetS N F M).
intro.
assert (~ BetS F M G).
assert (~ BetS F G M).
intro.

*****
H37 : BetS F G M
H36 : not (BetS F M G)
H35 : not (BetS N F M)
H34 : BetS N F G
H33 : not (not (BetS G F N))
H32 : neq F N
H31 : or (BetS G N F) (or (eq F N) (BetS G F N))
H30 : not (BetS G N F)
H29 : not (BetS F N G)
H28 : Lt F M F N
H27 : Cong F M F M
H26 : Cong M P N G
H25 : Cong C c N G
H24 : Cong C c G N
H23 : Lt F G F P
H22 : Cong M P C c
H21 : BetS F M P
P : Point
H20 : neq F M
H19 : BetS F M N
H18 : BetS D F G
H17 : BetS D F M
H16 : BetS G F D
H15 : or (BetS F M G) (or (eq G M) (BetS F G M))
H14 : Cong F D M F
H13 : BetS M F D
D : Point
H12 : neq M F
H11 : neq F M
H10 : not (eq M N)
H9 : neq C c
H8 : neq a J
H7 : Lt B b A J
H6 : Cong a J C c
H5 : BetS A a J
J : Point
H4 : Cong G N C c
H3 : Out G F N
H2 : Cong F M A a
H1 : Out F G M
H0 : Cong F G B b
H : TG A a C c B b
A,B,C,F,G,M,N,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
False
+++++
assert (BetS N F M) by (conclude lemma_3_7b).
-----
Lemma lemma_together2 : forall A B C F G M N a b c, TG A a C c B b -> Cong F G B b -> Out F G M -> Cong F M A a -> Out G F N -> Cong G N C c -> Out M F N.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists J, (BetS A a J /\\ Cong a J C c /\\ Lt B b A J)) by (conclude_def TG );destruct Tf as [J];spliter.
assert (neq a J) by (forward_using lemma_betweennotequal).
assert (neq C c) by (conclude axiom_nocollapse).
assert (~ eq M N).
assert (neq F M) by (conclude lemma_raystrict).
assert (neq M F) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists D, (BetS M F D /\\ Cong F D M F)) by (conclude lemma_extension);destruct Tf as [D];spliter.
assert ((BetS F M G \\/ eq G M \\/ BetS F G M)) by (conclude lemma_ray1).
assert (BetS G F D).
by cases on (BetS F M G \\/ eq G M \\/ BetS F G M).
assert (BetS D F M) by (conclude axiom_betweennesssymmetry).
assert (BetS D F G) by (conclude axiom_betweennesssymmetry).
assert (~ BetS F M N).
intro.
assert (neq F M) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS F M P /\\ Cong M P C c)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Lt F G F P) by (conclude lemma_together).
assert (Cong C c G N) by (conclude lemma_congruencesymmetric).
assert (Cong C c N G) by (forward_using lemma_congruenceflip).
assert (Cong M P N G) by (conclude lemma_congruencetransitive).
assert (Cong F M F M) by (conclude cn_congruencereflexive).
assert (Lt F M F N) by (conclude_def Lt ).
assert (~ BetS F N G).
assert (~ BetS G N F).
assert ((BetS G N F \\/ eq F N \\/ BetS G F N)) by (conclude lemma_ray1).
assert (neq F N) by (forward_using lemma_betweennotequal).
assert (~ ~ BetS G F N).
assert (BetS N F G) by (conclude axiom_betweennesssymmetry).
assert (~ ~ BetS N F M).
intro.
assert (~ BetS F M G).
assert (~ BetS F G M).
intro.
assert (BetS N F M) by (conclude lemma_3_7b).

*****
H38 : BetS N F M
H37 : BetS F G M
H36 : not (BetS F M G)
H35 : not (BetS N F M)
H34 : BetS N F G
H33 : not (not (BetS G F N))
H32 : neq F N
H31 : or (BetS G N F) (or (eq F N) (BetS G F N))
H30 : not (BetS G N F)
H29 : not (BetS F N G)
H28 : Lt F M F N
H27 : Cong F M F M
H26 : Cong M P N G
H25 : Cong C c N G
H24 : Cong C c G N
H23 : Lt F G F P
H22 : Cong M P C c
H21 : BetS F M P
P : Point
H20 : neq F M
H19 : BetS F M N
H18 : BetS D F G
H17 : BetS D F M
H16 : BetS G F D
H15 : or (BetS F M G) (or (eq G M) (BetS F G M))
H14 : Cong F D M F
H13 : BetS M F D
D : Point
H12 : neq M F
H11 : neq F M
H10 : not (eq M N)
H9 : neq C c
H8 : neq a J
H7 : Lt B b A J
H6 : Cong a J C c
H5 : BetS A a J
J : Point
H4 : Cong G N C c
H3 : Out G F N
H2 : Cong F M A a
H1 : Out F G M
H0 : Cong F G B b
H : TG A a C c B b
A,B,C,F,G,M,N,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma lemma_together2 : forall A B C F G M N a b c, TG A a C c B b -> Cong F G B b -> Out F G M -> Cong F M A a -> Out G F N -> Cong G N C c -> Out M F N.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists J, (BetS A a J /\\ Cong a J C c /\\ Lt B b A J)) by (conclude_def TG );destruct Tf as [J];spliter.
assert (neq a J) by (forward_using lemma_betweennotequal).
assert (neq C c) by (conclude axiom_nocollapse).
assert (~ eq M N).
assert (neq F M) by (conclude lemma_raystrict).
assert (neq M F) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists D, (BetS M F D /\\ Cong F D M F)) by (conclude lemma_extension);destruct Tf as [D];spliter.
assert ((BetS F M G \\/ eq G M \\/ BetS F G M)) by (conclude lemma_ray1).
assert (BetS G F D).
by cases on (BetS F M G \\/ eq G M \\/ BetS F G M).
assert (BetS D F M) by (conclude axiom_betweennesssymmetry).
assert (BetS D F G) by (conclude axiom_betweennesssymmetry).
assert (~ BetS F M N).
intro.
assert (neq F M) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS F M P /\\ Cong M P C c)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Lt F G F P) by (conclude lemma_together).
assert (Cong C c G N) by (conclude lemma_congruencesymmetric).
assert (Cong C c N G) by (forward_using lemma_congruenceflip).
assert (Cong M P N G) by (conclude lemma_congruencetransitive).
assert (Cong F M F M) by (conclude cn_congruencereflexive).
assert (Lt F M F N) by (conclude_def Lt ).
assert (~ BetS F N G).
assert (~ BetS G N F).
assert ((BetS G N F \\/ eq F N \\/ BetS G F N)) by (conclude lemma_ray1).
assert (neq F N) by (forward_using lemma_betweennotequal).
assert (~ ~ BetS G F N).
assert (BetS N F G) by (conclude axiom_betweennesssymmetry).
assert (~ ~ BetS N F M).
intro.
assert (~ BetS F M G).
assert (~ BetS F G M).

*****
H37 : not (BetS F G M)
H36 : not (BetS F M G)
H35 : not (BetS N F M)
H34 : BetS N F G
H33 : not (not (BetS G F N))
H32 : neq F N
H31 : or (BetS G N F) (or (eq F N) (BetS G F N))
H30 : not (BetS G N F)
H29 : not (BetS F N G)
H28 : Lt F M F N
H27 : Cong F M F M
H26 : Cong M P N G
H25 : Cong C c N G
H24 : Cong C c G N
H23 : Lt F G F P
H22 : Cong M P C c
H21 : BetS F M P
P : Point
H20 : neq F M
H19 : BetS F M N
H18 : BetS D F G
H17 : BetS D F M
H16 : BetS G F D
H15 : or (BetS F M G) (or (eq G M) (BetS F G M))
H14 : Cong F D M F
H13 : BetS M F D
D : Point
H12 : neq M F
H11 : neq F M
H10 : not (eq M N)
H9 : neq C c
H8 : neq a J
H7 : Lt B b A J
H6 : Cong a J C c
H5 : BetS A a J
J : Point
H4 : Cong G N C c
H3 : Out G F N
H2 : Cong F M A a
H1 : Out F G M
H0 : Cong F G B b
H : TG A a C c B b
A,B,C,F,G,M,N,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
False
+++++
assert (eq G M) by (conclude lemma_outerconnectivity).
-----
Lemma lemma_together2 : forall A B C F G M N a b c, TG A a C c B b -> Cong F G B b -> Out F G M -> Cong F M A a -> Out G F N -> Cong G N C c -> Out M F N.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists J, (BetS A a J /\\ Cong a J C c /\\ Lt B b A J)) by (conclude_def TG );destruct Tf as [J];spliter.
assert (neq a J) by (forward_using lemma_betweennotequal).
assert (neq C c) by (conclude axiom_nocollapse).
assert (~ eq M N).
assert (neq F M) by (conclude lemma_raystrict).
assert (neq M F) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists D, (BetS M F D /\\ Cong F D M F)) by (conclude lemma_extension);destruct Tf as [D];spliter.
assert ((BetS F M G \\/ eq G M \\/ BetS F G M)) by (conclude lemma_ray1).
assert (BetS G F D).
by cases on (BetS F M G \\/ eq G M \\/ BetS F G M).
assert (BetS D F M) by (conclude axiom_betweennesssymmetry).
assert (BetS D F G) by (conclude axiom_betweennesssymmetry).
assert (~ BetS F M N).
intro.
assert (neq F M) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS F M P /\\ Cong M P C c)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Lt F G F P) by (conclude lemma_together).
assert (Cong C c G N) by (conclude lemma_congruencesymmetric).
assert (Cong C c N G) by (forward_using lemma_congruenceflip).
assert (Cong M P N G) by (conclude lemma_congruencetransitive).
assert (Cong F M F M) by (conclude cn_congruencereflexive).
assert (Lt F M F N) by (conclude_def Lt ).
assert (~ BetS F N G).
assert (~ BetS G N F).
assert ((BetS G N F \\/ eq F N \\/ BetS G F N)) by (conclude lemma_ray1).
assert (neq F N) by (forward_using lemma_betweennotequal).
assert (~ ~ BetS G F N).
assert (BetS N F G) by (conclude axiom_betweennesssymmetry).
assert (~ ~ BetS N F M).
intro.
assert (~ BetS F M G).
assert (~ BetS F G M).
assert (eq G M) by (conclude lemma_outerconnectivity).

*****
H38 : eq G M
H37 : not (BetS F G M)
H36 : not (BetS F M G)
H35 : not (BetS N F M)
H34 : BetS N F G
H33 : not (not (BetS G F N))
H32 : neq F N
H31 : or (BetS G N F) (or (eq F N) (BetS G F N))
H30 : not (BetS G N F)
H29 : not (BetS F N G)
H28 : Lt F M F N
H27 : Cong F M F M
H26 : Cong M P N G
H25 : Cong C c N G
H24 : Cong C c G N
H23 : Lt F G F P
H22 : Cong M P C c
H21 : BetS F M P
P : Point
H20 : neq F M
H19 : BetS F M N
H18 : BetS D F G
H17 : BetS D F M
H16 : BetS G F D
H15 : or (BetS F M G) (or (eq G M) (BetS F G M))
H14 : Cong F D M F
H13 : BetS M F D
D : Point
H12 : neq M F
H11 : neq F M
H10 : not (eq M N)
H9 : neq C c
H8 : neq a J
H7 : Lt B b A J
H6 : Cong a J C c
H5 : BetS A a J
J : Point
H4 : Cong G N C c
H3 : Out G F N
H2 : Cong F M A a
H1 : Out F G M
H0 : Cong F G B b
H : TG A a C c B b
A,B,C,F,G,M,N,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
False
+++++
assert (BetS N F M) by (conclude cn_equalitysub).
-----
Lemma lemma_together2 : forall A B C F G M N a b c, TG A a C c B b -> Cong F G B b -> Out F G M -> Cong F M A a -> Out G F N -> Cong G N C c -> Out M F N.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists J, (BetS A a J /\\ Cong a J C c /\\ Lt B b A J)) by (conclude_def TG );destruct Tf as [J];spliter.
assert (neq a J) by (forward_using lemma_betweennotequal).
assert (neq C c) by (conclude axiom_nocollapse).
assert (~ eq M N).
assert (neq F M) by (conclude lemma_raystrict).
assert (neq M F) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists D, (BetS M F D /\\ Cong F D M F)) by (conclude lemma_extension);destruct Tf as [D];spliter.
assert ((BetS F M G \\/ eq G M \\/ BetS F G M)) by (conclude lemma_ray1).
assert (BetS G F D).
by cases on (BetS F M G \\/ eq G M \\/ BetS F G M).
assert (BetS D F M) by (conclude axiom_betweennesssymmetry).
assert (BetS D F G) by (conclude axiom_betweennesssymmetry).
assert (~ BetS F M N).
intro.
assert (neq F M) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS F M P /\\ Cong M P C c)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Lt F G F P) by (conclude lemma_together).
assert (Cong C c G N) by (conclude lemma_congruencesymmetric).
assert (Cong C c N G) by (forward_using lemma_congruenceflip).
assert (Cong M P N G) by (conclude lemma_congruencetransitive).
assert (Cong F M F M) by (conclude cn_congruencereflexive).
assert (Lt F M F N) by (conclude_def Lt ).
assert (~ BetS F N G).
assert (~ BetS G N F).
assert ((BetS G N F \\/ eq F N \\/ BetS G F N)) by (conclude lemma_ray1).
assert (neq F N) by (forward_using lemma_betweennotequal).
assert (~ ~ BetS G F N).
assert (BetS N F G) by (conclude axiom_betweennesssymmetry).
assert (~ ~ BetS N F M).
intro.
assert (~ BetS F M G).
assert (~ BetS F G M).
assert (eq G M) by (conclude lemma_outerconnectivity).
assert (BetS N F M) by (conclude cn_equalitysub).

*****
H39 : BetS N F M
H38 : eq G M
H37 : not (BetS F G M)
H36 : not (BetS F M G)
H35 : not (BetS N F M)
H34 : BetS N F G
H33 : not (not (BetS G F N))
H32 : neq F N
H31 : or (BetS G N F) (or (eq F N) (BetS G F N))
H30 : not (BetS G N F)
H29 : not (BetS F N G)
H28 : Lt F M F N
H27 : Cong F M F M
H26 : Cong M P N G
H25 : Cong C c N G
H24 : Cong C c G N
H23 : Lt F G F P
H22 : Cong M P C c
H21 : BetS F M P
P : Point
H20 : neq F M
H19 : BetS F M N
H18 : BetS D F G
H17 : BetS D F M
H16 : BetS G F D
H15 : or (BetS F M G) (or (eq G M) (BetS F G M))
H14 : Cong F D M F
H13 : BetS M F D
D : Point
H12 : neq M F
H11 : neq F M
H10 : not (eq M N)
H9 : neq C c
H8 : neq a J
H7 : Lt B b A J
H6 : Cong a J C c
H5 : BetS A a J
J : Point
H4 : Cong G N C c
H3 : Out G F N
H2 : Cong F M A a
H1 : Out F G M
H0 : Cong F G B b
H : TG A a C c B b
A,B,C,F,G,M,N,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma lemma_together2 : forall A B C F G M N a b c, TG A a C c B b -> Cong F G B b -> Out F G M -> Cong F M A a -> Out G F N -> Cong G N C c -> Out M F N.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists J, (BetS A a J /\\ Cong a J C c /\\ Lt B b A J)) by (conclude_def TG );destruct Tf as [J];spliter.
assert (neq a J) by (forward_using lemma_betweennotequal).
assert (neq C c) by (conclude axiom_nocollapse).
assert (~ eq M N).
assert (neq F M) by (conclude lemma_raystrict).
assert (neq M F) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists D, (BetS M F D /\\ Cong F D M F)) by (conclude lemma_extension);destruct Tf as [D];spliter.
assert ((BetS F M G \\/ eq G M \\/ BetS F G M)) by (conclude lemma_ray1).
assert (BetS G F D).
by cases on (BetS F M G \\/ eq G M \\/ BetS F G M).
assert (BetS D F M) by (conclude axiom_betweennesssymmetry).
assert (BetS D F G) by (conclude axiom_betweennesssymmetry).
assert (~ BetS F M N).
intro.
assert (neq F M) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS F M P /\\ Cong M P C c)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Lt F G F P) by (conclude lemma_together).
assert (Cong C c G N) by (conclude lemma_congruencesymmetric).
assert (Cong C c N G) by (forward_using lemma_congruenceflip).
assert (Cong M P N G) by (conclude lemma_congruencetransitive).
assert (Cong F M F M) by (conclude cn_congruencereflexive).
assert (Lt F M F N) by (conclude_def Lt ).
assert (~ BetS F N G).
assert (~ BetS G N F).
assert ((BetS G N F \\/ eq F N \\/ BetS G F N)) by (conclude lemma_ray1).
assert (neq F N) by (forward_using lemma_betweennotequal).
assert (~ ~ BetS G F N).
assert (BetS N F G) by (conclude axiom_betweennesssymmetry).
assert (~ ~ BetS N F M).

*****
H35 : not (not (BetS N F M))
H34 : BetS N F G
H33 : not (not (BetS G F N))
H32 : neq F N
H31 : or (BetS G N F) (or (eq F N) (BetS G F N))
H30 : not (BetS G N F)
H29 : not (BetS F N G)
H28 : Lt F M F N
H27 : Cong F M F M
H26 : Cong M P N G
H25 : Cong C c N G
H24 : Cong C c G N
H23 : Lt F G F P
H22 : Cong M P C c
H21 : BetS F M P
P : Point
H20 : neq F M
H19 : BetS F M N
H18 : BetS D F G
H17 : BetS D F M
H16 : BetS G F D
H15 : or (BetS F M G) (or (eq G M) (BetS F G M))
H14 : Cong F D M F
H13 : BetS M F D
D : Point
H12 : neq M F
H11 : neq F M
H10 : not (eq M N)
H9 : neq C c
H8 : neq a J
H7 : Lt B b A J
H6 : Cong a J C c
H5 : BetS A a J
J : Point
H4 : Cong G N C c
H3 : Out G F N
H2 : Cong F M A a
H1 : Out F G M
H0 : Cong F G B b
H : TG A a C c B b
A,B,C,F,G,M,N,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
False
+++++
assert (BetS N F N) by (conclude lemma_3_7b).
-----
Lemma lemma_together2 : forall A B C F G M N a b c, TG A a C c B b -> Cong F G B b -> Out F G M -> Cong F M A a -> Out G F N -> Cong G N C c -> Out M F N.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists J, (BetS A a J /\\ Cong a J C c /\\ Lt B b A J)) by (conclude_def TG );destruct Tf as [J];spliter.
assert (neq a J) by (forward_using lemma_betweennotequal).
assert (neq C c) by (conclude axiom_nocollapse).
assert (~ eq M N).
assert (neq F M) by (conclude lemma_raystrict).
assert (neq M F) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists D, (BetS M F D /\\ Cong F D M F)) by (conclude lemma_extension);destruct Tf as [D];spliter.
assert ((BetS F M G \\/ eq G M \\/ BetS F G M)) by (conclude lemma_ray1).
assert (BetS G F D).
by cases on (BetS F M G \\/ eq G M \\/ BetS F G M).
assert (BetS D F M) by (conclude axiom_betweennesssymmetry).
assert (BetS D F G) by (conclude axiom_betweennesssymmetry).
assert (~ BetS F M N).
intro.
assert (neq F M) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS F M P /\\ Cong M P C c)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Lt F G F P) by (conclude lemma_together).
assert (Cong C c G N) by (conclude lemma_congruencesymmetric).
assert (Cong C c N G) by (forward_using lemma_congruenceflip).
assert (Cong M P N G) by (conclude lemma_congruencetransitive).
assert (Cong F M F M) by (conclude cn_congruencereflexive).
assert (Lt F M F N) by (conclude_def Lt ).
assert (~ BetS F N G).
assert (~ BetS G N F).
assert ((BetS G N F \\/ eq F N \\/ BetS G F N)) by (conclude lemma_ray1).
assert (neq F N) by (forward_using lemma_betweennotequal).
assert (~ ~ BetS G F N).
assert (BetS N F G) by (conclude axiom_betweennesssymmetry).
assert (~ ~ BetS N F M).
assert (BetS N F N) by (conclude lemma_3_7b).

*****
H36 : BetS N F N
H35 : not (not (BetS N F M))
H34 : BetS N F G
H33 : not (not (BetS G F N))
H32 : neq F N
H31 : or (BetS G N F) (or (eq F N) (BetS G F N))
H30 : not (BetS G N F)
H29 : not (BetS F N G)
H28 : Lt F M F N
H27 : Cong F M F M
H26 : Cong M P N G
H25 : Cong C c N G
H24 : Cong C c G N
H23 : Lt F G F P
H22 : Cong M P C c
H21 : BetS F M P
P : Point
H20 : neq F M
H19 : BetS F M N
H18 : BetS D F G
H17 : BetS D F M
H16 : BetS G F D
H15 : or (BetS F M G) (or (eq G M) (BetS F G M))
H14 : Cong F D M F
H13 : BetS M F D
D : Point
H12 : neq M F
H11 : neq F M
H10 : not (eq M N)
H9 : neq C c
H8 : neq a J
H7 : Lt B b A J
H6 : Cong a J C c
H5 : BetS A a J
J : Point
H4 : Cong G N C c
H3 : Out G F N
H2 : Cong F M A a
H1 : Out F G M
H0 : Cong F G B b
H : TG A a C c B b
A,B,C,F,G,M,N,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
False
+++++
assert (~ BetS N F N) by (conclude axiom_betweennessidentity).
-----
Lemma lemma_together2 : forall A B C F G M N a b c, TG A a C c B b -> Cong F G B b -> Out F G M -> Cong F M A a -> Out G F N -> Cong G N C c -> Out M F N.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists J, (BetS A a J /\\ Cong a J C c /\\ Lt B b A J)) by (conclude_def TG );destruct Tf as [J];spliter.
assert (neq a J) by (forward_using lemma_betweennotequal).
assert (neq C c) by (conclude axiom_nocollapse).
assert (~ eq M N).
assert (neq F M) by (conclude lemma_raystrict).
assert (neq M F) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists D, (BetS M F D /\\ Cong F D M F)) by (conclude lemma_extension);destruct Tf as [D];spliter.
assert ((BetS F M G \\/ eq G M \\/ BetS F G M)) by (conclude lemma_ray1).
assert (BetS G F D).
by cases on (BetS F M G \\/ eq G M \\/ BetS F G M).
assert (BetS D F M) by (conclude axiom_betweennesssymmetry).
assert (BetS D F G) by (conclude axiom_betweennesssymmetry).
assert (~ BetS F M N).
intro.
assert (neq F M) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists P, (BetS F M P /\\ Cong M P C c)) by (conclude lemma_extension);destruct Tf as [P];spliter.
assert (Lt F G F P) by (conclude lemma_together).
assert (Cong C c G N) by (conclude lemma_congruencesymmetric).
assert (Cong C c N G) by (forward_using lemma_congruenceflip).
assert (Cong M P N G) by (conclude lemma_congruencetransitive).
assert (Cong F M F M) by (conclude cn_congruencereflexive).
assert (Lt F M F N) by (conclude_def Lt ).
assert (~ BetS F N G).
assert (~ BetS G N F).
assert ((BetS G N F \\/ eq F N \\/ BetS G F N)) by (conclude lemma_ray1).
assert (neq F N) by (forward_using lemma_betweennotequal).
assert (~ ~ BetS G F N).
assert (BetS N F G) by (conclude axiom_betweennesssymmetry).
assert (~ ~ BetS N F M).
assert (BetS N F N) by (conclude lemma_3_7b).
assert (~ BetS N F N) by (conclude axiom_betweennessidentity).

*****
H37 : not (BetS N F N)
H36 : BetS N F N
H35 : not (not (BetS N F M))
H34 : BetS N F G
H33 : not (not (BetS G F N))
H32 : neq F N
H31 : or (BetS G N F) (or (eq F N) (BetS G F N))
H30 : not (BetS G N F)
H29 : not (BetS F N G)
H28 : Lt F M F N
H27 : Cong F M F M
H26 : Cong M P N G
H25 : Cong C c N G
H24 : Cong C c G N
H23 : Lt F G F P
H22 : Cong M P C c
H21 : BetS F M P
P : Point
H20 : neq F M
H19 : BetS F M N
H18 : BetS D F G
H17 : BetS D F M
H16 : BetS G F D
H15 : or (BetS F M G) (or (eq G M) (BetS F G M))
H14 : Cong F D M F
H13 : BetS M F D
D : Point
H12 : neq M F
H11 : neq F M
H10 : not (eq M N)
H9 : neq C c
H8 : neq a J
H7 : Lt B b A J
H6 : Cong a J C c
H5 : BetS A a J
J : Point
H4 : Cong G N C c
H3 : Out G F N
H2 : Cong F M A a
H1 : Out F G M
H0 : Cong F G B b
H : TG A a C c B b
A,B,C,F,G,M,N,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma lemma_together2 : forall A B C F G M N a b c, TG A a C c B b -> Cong F G B b -> Out F G M -> Cong F M A a -> Out G F N -> Cong G N C c -> Out M F N.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists J, (BetS A a J /\\ Cong a J C c /\\ Lt B b A J)) by (conclude_def TG );destruct Tf as [J];spliter.
assert (neq a J) by (forward_using lemma_betweennotequal).
assert (neq C c) by (conclude axiom_nocollapse).
assert (~ eq M N).
assert (neq F M) by (conclude lemma_raystrict).
assert (neq M F) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists D, (BetS M F D /\\ Cong F D M F)) by (conclude lemma_extension);destruct Tf as [D];spliter.
assert ((BetS F M G \\/ eq G M \\/ BetS F G M)) by (conclude lemma_ray1).
assert (BetS G F D).
by cases on (BetS F M G \\/ eq G M \\/ BetS F G M).
assert (BetS D F M) by (conclude axiom_betweennesssymmetry).
assert (BetS D F G) by (conclude axiom_betweennesssymmetry).
assert (~ BetS F M N).

*****
H19 : not (BetS F M N)
H18 : BetS D F G
H17 : BetS D F M
H16 : BetS G F D
H15 : or (BetS F M G) (or (eq G M) (BetS F G M))
H14 : Cong F D M F
H13 : BetS M F D
D : Point
H12 : neq M F
H11 : neq F M
H10 : not (eq M N)
H9 : neq C c
H8 : neq a J
H7 : Lt B b A J
H6 : Cong a J C c
H5 : BetS A a J
J : Point
H4 : Cong G N C c
H3 : Out G F N
H2 : Cong F M A a
H1 : Out F G M
H0 : Cong F G B b
H : TG A a C c B b
A,B,C,F,G,M,N,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
Out M F N
+++++
assert (Col G F N) by (conclude lemma_rayimpliescollinear).
-----
Lemma lemma_together2 : forall A B C F G M N a b c, TG A a C c B b -> Cong F G B b -> Out F G M -> Cong F M A a -> Out G F N -> Cong G N C c -> Out M F N.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists J, (BetS A a J /\\ Cong a J C c /\\ Lt B b A J)) by (conclude_def TG );destruct Tf as [J];spliter.
assert (neq a J) by (forward_using lemma_betweennotequal).
assert (neq C c) by (conclude axiom_nocollapse).
assert (~ eq M N).
assert (neq F M) by (conclude lemma_raystrict).
assert (neq M F) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists D, (BetS M F D /\\ Cong F D M F)) by (conclude lemma_extension);destruct Tf as [D];spliter.
assert ((BetS F M G \\/ eq G M \\/ BetS F G M)) by (conclude lemma_ray1).
assert (BetS G F D).
by cases on (BetS F M G \\/ eq G M \\/ BetS F G M).
assert (BetS D F M) by (conclude axiom_betweennesssymmetry).
assert (BetS D F G) by (conclude axiom_betweennesssymmetry).
assert (~ BetS F M N).
assert (Col G F N) by (conclude lemma_rayimpliescollinear).

*****
H20 : Col G F N
H19 : not (BetS F M N)
H18 : BetS D F G
H17 : BetS D F M
H16 : BetS G F D
H15 : or (BetS F M G) (or (eq G M) (BetS F G M))
H14 : Cong F D M F
H13 : BetS M F D
D : Point
H12 : neq M F
H11 : neq F M
H10 : not (eq M N)
H9 : neq C c
H8 : neq a J
H7 : Lt B b A J
H6 : Cong a J C c
H5 : BetS A a J
J : Point
H4 : Cong G N C c
H3 : Out G F N
H2 : Cong F M A a
H1 : Out F G M
H0 : Cong F G B b
H : TG A a C c B b
A,B,C,F,G,M,N,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
Out M F N
+++++
assert (Col F G M) by (conclude lemma_rayimpliescollinear).
-----
Lemma lemma_together2 : forall A B C F G M N a b c, TG A a C c B b -> Cong F G B b -> Out F G M -> Cong F M A a -> Out G F N -> Cong G N C c -> Out M F N.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists J, (BetS A a J /\\ Cong a J C c /\\ Lt B b A J)) by (conclude_def TG );destruct Tf as [J];spliter.
assert (neq a J) by (forward_using lemma_betweennotequal).
assert (neq C c) by (conclude axiom_nocollapse).
assert (~ eq M N).
assert (neq F M) by (conclude lemma_raystrict).
assert (neq M F) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists D, (BetS M F D /\\ Cong F D M F)) by (conclude lemma_extension);destruct Tf as [D];spliter.
assert ((BetS F M G \\/ eq G M \\/ BetS F G M)) by (conclude lemma_ray1).
assert (BetS G F D).
by cases on (BetS F M G \\/ eq G M \\/ BetS F G M).
assert (BetS D F M) by (conclude axiom_betweennesssymmetry).
assert (BetS D F G) by (conclude axiom_betweennesssymmetry).
assert (~ BetS F M N).
assert (Col G F N) by (conclude lemma_rayimpliescollinear).
assert (Col F G M) by (conclude lemma_rayimpliescollinear).

*****
H21 : Col F G M
H20 : Col G F N
H19 : not (BetS F M N)
H18 : BetS D F G
H17 : BetS D F M
H16 : BetS G F D
H15 : or (BetS F M G) (or (eq G M) (BetS F G M))
H14 : Cong F D M F
H13 : BetS M F D
D : Point
H12 : neq M F
H11 : neq F M
H10 : not (eq M N)
H9 : neq C c
H8 : neq a J
H7 : Lt B b A J
H6 : Cong a J C c
H5 : BetS A a J
J : Point
H4 : Cong G N C c
H3 : Out G F N
H2 : Cong F M A a
H1 : Out F G M
H0 : Cong F G B b
H : TG A a C c B b
A,B,C,F,G,M,N,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
Out M F N
+++++
assert (Col G F M) by (forward_using lemma_collinearorder).
-----
Lemma lemma_together2 : forall A B C F G M N a b c, TG A a C c B b -> Cong F G B b -> Out F G M -> Cong F M A a -> Out G F N -> Cong G N C c -> Out M F N.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists J, (BetS A a J /\\ Cong a J C c /\\ Lt B b A J)) by (conclude_def TG );destruct Tf as [J];spliter.
assert (neq a J) by (forward_using lemma_betweennotequal).
assert (neq C c) by (conclude axiom_nocollapse).
assert (~ eq M N).
assert (neq F M) by (conclude lemma_raystrict).
assert (neq M F) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists D, (BetS M F D /\\ Cong F D M F)) by (conclude lemma_extension);destruct Tf as [D];spliter.
assert ((BetS F M G \\/ eq G M \\/ BetS F G M)) by (conclude lemma_ray1).
assert (BetS G F D).
by cases on (BetS F M G \\/ eq G M \\/ BetS F G M).
assert (BetS D F M) by (conclude axiom_betweennesssymmetry).
assert (BetS D F G) by (conclude axiom_betweennesssymmetry).
assert (~ BetS F M N).
assert (Col G F N) by (conclude lemma_rayimpliescollinear).
assert (Col F G M) by (conclude lemma_rayimpliescollinear).
assert (Col G F M) by (forward_using lemma_collinearorder).

*****
H22 : Col G F M
H21 : Col F G M
H20 : Col G F N
H19 : not (BetS F M N)
H18 : BetS D F G
H17 : BetS D F M
H16 : BetS G F D
H15 : or (BetS F M G) (or (eq G M) (BetS F G M))
H14 : Cong F D M F
H13 : BetS M F D
D : Point
H12 : neq M F
H11 : neq F M
H10 : not (eq M N)
H9 : neq C c
H8 : neq a J
H7 : Lt B b A J
H6 : Cong a J C c
H5 : BetS A a J
J : Point
H4 : Cong G N C c
H3 : Out G F N
H2 : Cong F M A a
H1 : Out F G M
H0 : Cong F G B b
H : TG A a C c B b
A,B,C,F,G,M,N,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
Out M F N
+++++
assert (neq F G) by (forward_using lemma_betweennotequal).
-----
Lemma lemma_together2 : forall A B C F G M N a b c, TG A a C c B b -> Cong F G B b -> Out F G M -> Cong F M A a -> Out G F N -> Cong G N C c -> Out M F N.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists J, (BetS A a J /\\ Cong a J C c /\\ Lt B b A J)) by (conclude_def TG );destruct Tf as [J];spliter.
assert (neq a J) by (forward_using lemma_betweennotequal).
assert (neq C c) by (conclude axiom_nocollapse).
assert (~ eq M N).
assert (neq F M) by (conclude lemma_raystrict).
assert (neq M F) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists D, (BetS M F D /\\ Cong F D M F)) by (conclude lemma_extension);destruct Tf as [D];spliter.
assert ((BetS F M G \\/ eq G M \\/ BetS F G M)) by (conclude lemma_ray1).
assert (BetS G F D).
by cases on (BetS F M G \\/ eq G M \\/ BetS F G M).
assert (BetS D F M) by (conclude axiom_betweennesssymmetry).
assert (BetS D F G) by (conclude axiom_betweennesssymmetry).
assert (~ BetS F M N).
assert (Col G F N) by (conclude lemma_rayimpliescollinear).
assert (Col F G M) by (conclude lemma_rayimpliescollinear).
assert (Col G F M) by (forward_using lemma_collinearorder).
assert (neq F G) by (forward_using lemma_betweennotequal).

*****
H23 : neq F G
H22 : Col G F M
H21 : Col F G M
H20 : Col G F N
H19 : not (BetS F M N)
H18 : BetS D F G
H17 : BetS D F M
H16 : BetS G F D
H15 : or (BetS F M G) (or (eq G M) (BetS F G M))
H14 : Cong F D M F
H13 : BetS M F D
D : Point
H12 : neq M F
H11 : neq F M
H10 : not (eq M N)
H9 : neq C c
H8 : neq a J
H7 : Lt B b A J
H6 : Cong a J C c
H5 : BetS A a J
J : Point
H4 : Cong G N C c
H3 : Out G F N
H2 : Cong F M A a
H1 : Out F G M
H0 : Cong F G B b
H : TG A a C c B b
A,B,C,F,G,M,N,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
Out M F N
+++++
assert (neq G F) by (conclude lemma_inequalitysymmetric).
-----
Lemma lemma_together2 : forall A B C F G M N a b c, TG A a C c B b -> Cong F G B b -> Out F G M -> Cong F M A a -> Out G F N -> Cong G N C c -> Out M F N.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists J, (BetS A a J /\\ Cong a J C c /\\ Lt B b A J)) by (conclude_def TG );destruct Tf as [J];spliter.
assert (neq a J) by (forward_using lemma_betweennotequal).
assert (neq C c) by (conclude axiom_nocollapse).
assert (~ eq M N).
assert (neq F M) by (conclude lemma_raystrict).
assert (neq M F) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists D, (BetS M F D /\\ Cong F D M F)) by (conclude lemma_extension);destruct Tf as [D];spliter.
assert ((BetS F M G \\/ eq G M \\/ BetS F G M)) by (conclude lemma_ray1).
assert (BetS G F D).
by cases on (BetS F M G \\/ eq G M \\/ BetS F G M).
assert (BetS D F M) by (conclude axiom_betweennesssymmetry).
assert (BetS D F G) by (conclude axiom_betweennesssymmetry).
assert (~ BetS F M N).
assert (Col G F N) by (conclude lemma_rayimpliescollinear).
assert (Col F G M) by (conclude lemma_rayimpliescollinear).
assert (Col G F M) by (forward_using lemma_collinearorder).
assert (neq F G) by (forward_using lemma_betweennotequal).
assert (neq G F) by (conclude lemma_inequalitysymmetric).

*****
H24 : neq G F
H23 : neq F G
H22 : Col G F M
H21 : Col F G M
H20 : Col G F N
H19 : not (BetS F M N)
H18 : BetS D F G
H17 : BetS D F M
H16 : BetS G F D
H15 : or (BetS F M G) (or (eq G M) (BetS F G M))
H14 : Cong F D M F
H13 : BetS M F D
D : Point
H12 : neq M F
H11 : neq F M
H10 : not (eq M N)
H9 : neq C c
H8 : neq a J
H7 : Lt B b A J
H6 : Cong a J C c
H5 : BetS A a J
J : Point
H4 : Cong G N C c
H3 : Out G F N
H2 : Cong F M A a
H1 : Out F G M
H0 : Cong F G B b
H : TG A a C c B b
A,B,C,F,G,M,N,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
Out M F N
+++++
assert (Col F N M) by (conclude lemma_collinear4).
-----
Lemma lemma_together2 : forall A B C F G M N a b c, TG A a C c B b -> Cong F G B b -> Out F G M -> Cong F M A a -> Out G F N -> Cong G N C c -> Out M F N.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists J, (BetS A a J /\\ Cong a J C c /\\ Lt B b A J)) by (conclude_def TG );destruct Tf as [J];spliter.
assert (neq a J) by (forward_using lemma_betweennotequal).
assert (neq C c) by (conclude axiom_nocollapse).
assert (~ eq M N).
assert (neq F M) by (conclude lemma_raystrict).
assert (neq M F) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists D, (BetS M F D /\\ Cong F D M F)) by (conclude lemma_extension);destruct Tf as [D];spliter.
assert ((BetS F M G \\/ eq G M \\/ BetS F G M)) by (conclude lemma_ray1).
assert (BetS G F D).
by cases on (BetS F M G \\/ eq G M \\/ BetS F G M).
assert (BetS D F M) by (conclude axiom_betweennesssymmetry).
assert (BetS D F G) by (conclude axiom_betweennesssymmetry).
assert (~ BetS F M N).
assert (Col G F N) by (conclude lemma_rayimpliescollinear).
assert (Col F G M) by (conclude lemma_rayimpliescollinear).
assert (Col G F M) by (forward_using lemma_collinearorder).
assert (neq F G) by (forward_using lemma_betweennotequal).
assert (neq G F) by (conclude lemma_inequalitysymmetric).
assert (Col F N M) by (conclude lemma_collinear4).

*****
H25 : Col F N M
H24 : neq G F
H23 : neq F G
H22 : Col G F M
H21 : Col F G M
H20 : Col G F N
H19 : not (BetS F M N)
H18 : BetS D F G
H17 : BetS D F M
H16 : BetS G F D
H15 : or (BetS F M G) (or (eq G M) (BetS F G M))
H14 : Cong F D M F
H13 : BetS M F D
D : Point
H12 : neq M F
H11 : neq F M
H10 : not (eq M N)
H9 : neq C c
H8 : neq a J
H7 : Lt B b A J
H6 : Cong a J C c
H5 : BetS A a J
J : Point
H4 : Cong G N C c
H3 : Out G F N
H2 : Cong F M A a
H1 : Out F G M
H0 : Cong F G B b
H : TG A a C c B b
A,B,C,F,G,M,N,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
Out M F N
+++++
assert (Col M F N) by (forward_using lemma_collinearorder).
-----
Lemma lemma_together2 : forall A B C F G M N a b c, TG A a C c B b -> Cong F G B b -> Out F G M -> Cong F M A a -> Out G F N -> Cong G N C c -> Out M F N.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists J, (BetS A a J /\\ Cong a J C c /\\ Lt B b A J)) by (conclude_def TG );destruct Tf as [J];spliter.
assert (neq a J) by (forward_using lemma_betweennotequal).
assert (neq C c) by (conclude axiom_nocollapse).
assert (~ eq M N).
assert (neq F M) by (conclude lemma_raystrict).
assert (neq M F) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists D, (BetS M F D /\\ Cong F D M F)) by (conclude lemma_extension);destruct Tf as [D];spliter.
assert ((BetS F M G \\/ eq G M \\/ BetS F G M)) by (conclude lemma_ray1).
assert (BetS G F D).
by cases on (BetS F M G \\/ eq G M \\/ BetS F G M).
assert (BetS D F M) by (conclude axiom_betweennesssymmetry).
assert (BetS D F G) by (conclude axiom_betweennesssymmetry).
assert (~ BetS F M N).
assert (Col G F N) by (conclude lemma_rayimpliescollinear).
assert (Col F G M) by (conclude lemma_rayimpliescollinear).
assert (Col G F M) by (forward_using lemma_collinearorder).
assert (neq F G) by (forward_using lemma_betweennotequal).
assert (neq G F) by (conclude lemma_inequalitysymmetric).
assert (Col F N M) by (conclude lemma_collinear4).
assert (Col M F N) by (forward_using lemma_collinearorder).

*****
H26 : Col M F N
H25 : Col F N M
H24 : neq G F
H23 : neq F G
H22 : Col G F M
H21 : Col F G M
H20 : Col G F N
H19 : not (BetS F M N)
H18 : BetS D F G
H17 : BetS D F M
H16 : BetS G F D
H15 : or (BetS F M G) (or (eq G M) (BetS F G M))
H14 : Cong F D M F
H13 : BetS M F D
D : Point
H12 : neq M F
H11 : neq F M
H10 : not (eq M N)
H9 : neq C c
H8 : neq a J
H7 : Lt B b A J
H6 : Cong a J C c
H5 : BetS A a J
J : Point
H4 : Cong G N C c
H3 : Out G F N
H2 : Cong F M A a
H1 : Out F G M
H0 : Cong F G B b
H : TG A a C c B b
A,B,C,F,G,M,N,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
Out M F N
+++++
assert ((eq M F \/ eq M N \/ eq F N \/ BetS F M N \/ BetS M F N \/ BetS M N F)) by (conclude_def Col ).
-----
Lemma lemma_together2 : forall A B C F G M N a b c, TG A a C c B b -> Cong F G B b -> Out F G M -> Cong F M A a -> Out G F N -> Cong G N C c -> Out M F N.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists J, (BetS A a J /\\ Cong a J C c /\\ Lt B b A J)) by (conclude_def TG );destruct Tf as [J];spliter.
assert (neq a J) by (forward_using lemma_betweennotequal).
assert (neq C c) by (conclude axiom_nocollapse).
assert (~ eq M N).
assert (neq F M) by (conclude lemma_raystrict).
assert (neq M F) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists D, (BetS M F D /\\ Cong F D M F)) by (conclude lemma_extension);destruct Tf as [D];spliter.
assert ((BetS F M G \\/ eq G M \\/ BetS F G M)) by (conclude lemma_ray1).
assert (BetS G F D).
by cases on (BetS F M G \\/ eq G M \\/ BetS F G M).
assert (BetS D F M) by (conclude axiom_betweennesssymmetry).
assert (BetS D F G) by (conclude axiom_betweennesssymmetry).
assert (~ BetS F M N).
assert (Col G F N) by (conclude lemma_rayimpliescollinear).
assert (Col F G M) by (conclude lemma_rayimpliescollinear).
assert (Col G F M) by (forward_using lemma_collinearorder).
assert (neq F G) by (forward_using lemma_betweennotequal).
assert (neq G F) by (conclude lemma_inequalitysymmetric).
assert (Col F N M) by (conclude lemma_collinear4).
assert (Col M F N) by (forward_using lemma_collinearorder).
assert ((eq M F \\/ eq M N \\/ eq F N \\/ BetS F M N \\/ BetS M F N \\/ BetS M N F)) by (conclude_def Col ).

*****
H27 : or (eq M F)\n (or (eq M N)\n (or (eq F N) (or (BetS F M N) (or (BetS M F N) (BetS M N F)))))
H26 : Col M F N
H25 : Col F N M
H24 : neq G F
H23 : neq F G
H22 : Col G F M
H21 : Col F G M
H20 : Col G F N
H19 : not (BetS F M N)
H18 : BetS D F G
H17 : BetS D F M
H16 : BetS G F D
H15 : or (BetS F M G) (or (eq G M) (BetS F G M))
H14 : Cong F D M F
H13 : BetS M F D
D : Point
H12 : neq M F
H11 : neq F M
H10 : not (eq M N)
H9 : neq C c
H8 : neq a J
H7 : Lt B b A J
H6 : Cong a J C c
H5 : BetS A a J
J : Point
H4 : Cong G N C c
H3 : Out G F N
H2 : Cong F M A a
H1 : Out F G M
H0 : Cong F G B b
H : TG A a C c B b
A,B,C,F,G,M,N,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
Out M F N
+++++
assert (Out M F N).
-----
Lemma lemma_together2 : forall A B C F G M N a b c, TG A a C c B b -> Cong F G B b -> Out F G M -> Cong F M A a -> Out G F N -> Cong G N C c -> Out M F N.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists J, (BetS A a J /\\ Cong a J C c /\\ Lt B b A J)) by (conclude_def TG );destruct Tf as [J];spliter.
assert (neq a J) by (forward_using lemma_betweennotequal).
assert (neq C c) by (conclude axiom_nocollapse).
assert (~ eq M N).
assert (neq F M) by (conclude lemma_raystrict).
assert (neq M F) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists D, (BetS M F D /\\ Cong F D M F)) by (conclude lemma_extension);destruct Tf as [D];spliter.
assert ((BetS F M G \\/ eq G M \\/ BetS F G M)) by (conclude lemma_ray1).
assert (BetS G F D).
by cases on (BetS F M G \\/ eq G M \\/ BetS F G M).
assert (BetS D F M) by (conclude axiom_betweennesssymmetry).
assert (BetS D F G) by (conclude axiom_betweennesssymmetry).
assert (~ BetS F M N).
assert (Col G F N) by (conclude lemma_rayimpliescollinear).
assert (Col F G M) by (conclude lemma_rayimpliescollinear).
assert (Col G F M) by (forward_using lemma_collinearorder).
assert (neq F G) by (forward_using lemma_betweennotequal).
assert (neq G F) by (conclude lemma_inequalitysymmetric).
assert (Col F N M) by (conclude lemma_collinear4).
assert (Col M F N) by (forward_using lemma_collinearorder).
assert ((eq M F \\/ eq M N \\/ eq F N \\/ BetS F M N \\/ BetS M F N \\/ BetS M N F)) by (conclude_def Col ).
assert (Out M F N).

*****
H27 : or (eq M F)\n (or (eq M N)\n (or (eq F N) (or (BetS F M N) (or (BetS M F N) (BetS M N F)))))
H26 : Col M F N
H25 : Col F N M
H24 : neq G F
H23 : neq F G
H22 : Col G F M
H21 : Col F G M
H20 : Col G F N
H19 : not (BetS F M N)
H18 : BetS D F G
H17 : BetS D F M
H16 : BetS G F D
H15 : or (BetS F M G) (or (eq G M) (BetS F G M))
H14 : Cong F D M F
H13 : BetS M F D
D : Point
H12 : neq M F
H11 : neq F M
H10 : not (eq M N)
H9 : neq C c
H8 : neq a J
H7 : Lt B b A J
H6 : Cong a J C c
H5 : BetS A a J
J : Point
H4 : Cong G N C c
H3 : Out G F N
H2 : Cong F M A a
H1 : Out F G M
H0 : Cong F G B b
H : TG A a C c B b
A,B,C,F,G,M,N,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
Out M F N
+++++
by cases on (eq M F \/ eq M N \/ eq F N \/ BetS F M N \/ BetS M F N \/ BetS M N F).
-----
Lemma lemma_together2 : forall A B C F G M N a b c, TG A a C c B b -> Cong F G B b -> Out F G M -> Cong F M A a -> Out G F N -> Cong G N C c -> Out M F N.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists J, (BetS A a J /\\ Cong a J C c /\\ Lt B b A J)) by (conclude_def TG );destruct Tf as [J];spliter.
assert (neq a J) by (forward_using lemma_betweennotequal).
assert (neq C c) by (conclude axiom_nocollapse).
assert (~ eq M N).
assert (neq F M) by (conclude lemma_raystrict).
assert (neq M F) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists D, (BetS M F D /\\ Cong F D M F)) by (conclude lemma_extension);destruct Tf as [D];spliter.
assert ((BetS F M G \\/ eq G M \\/ BetS F G M)) by (conclude lemma_ray1).
assert (BetS G F D).
by cases on (BetS F M G \\/ eq G M \\/ BetS F G M).
assert (BetS D F M) by (conclude axiom_betweennesssymmetry).
assert (BetS D F G) by (conclude axiom_betweennesssymmetry).
assert (~ BetS F M N).
assert (Col G F N) by (conclude lemma_rayimpliescollinear).
assert (Col F G M) by (conclude lemma_rayimpliescollinear).
assert (Col G F M) by (forward_using lemma_collinearorder).
assert (neq F G) by (forward_using lemma_betweennotequal).
assert (neq G F) by (conclude lemma_inequalitysymmetric).
assert (Col F N M) by (conclude lemma_collinear4).
assert (Col M F N) by (forward_using lemma_collinearorder).
assert ((eq M F \\/ eq M N \\/ eq F N \\/ BetS F M N \\/ BetS M F N \\/ BetS M N F)) by (conclude_def Col ).
assert (Out M F N).
by cases on (eq M F \\/ eq M N \\/ eq F N \\/ BetS F M N \\/ BetS M F N \\/ BetS M N F).

*****
H28 : eq M F
H26 : Col M F N
H25 : Col F N M
H24 : neq G F
H23 : neq F G
H22 : Col G F M
H21 : Col F G M
H20 : Col G F N
H19 : not (BetS F M N)
H18 : BetS D F G
H17 : BetS D F M
H16 : BetS G F D
H15 : or (BetS F M G) (or (eq G M) (BetS F G M))
H14 : Cong F D M F
H13 : BetS M F D
D : Point
H12 : neq M F
H11 : neq F M
H10 : not (eq M N)
H9 : neq C c
H8 : neq a J
H7 : Lt B b A J
H6 : Cong a J C c
H5 : BetS A a J
J : Point
H4 : Cong G N C c
H3 : Out G F N
H2 : Cong F M A a
H1 : Out F G M
H0 : Cong F G B b
H : TG A a C c B b
A,B,C,F,G,M,N,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
Out M F N
+++++
assert (~ ~ Out M F N).
-----
Lemma lemma_together2 : forall A B C F G M N a b c, TG A a C c B b -> Cong F G B b -> Out F G M -> Cong F M A a -> Out G F N -> Cong G N C c -> Out M F N.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists J, (BetS A a J /\\ Cong a J C c /\\ Lt B b A J)) by (conclude_def TG );destruct Tf as [J];spliter.
assert (neq a J) by (forward_using lemma_betweennotequal).
assert (neq C c) by (conclude axiom_nocollapse).
assert (~ eq M N).
assert (neq F M) by (conclude lemma_raystrict).
assert (neq M F) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists D, (BetS M F D /\\ Cong F D M F)) by (conclude lemma_extension);destruct Tf as [D];spliter.
assert ((BetS F M G \\/ eq G M \\/ BetS F G M)) by (conclude lemma_ray1).
assert (BetS G F D).
by cases on (BetS F M G \\/ eq G M \\/ BetS F G M).
assert (BetS D F M) by (conclude axiom_betweennesssymmetry).
assert (BetS D F G) by (conclude axiom_betweennesssymmetry).
assert (~ BetS F M N).
assert (Col G F N) by (conclude lemma_rayimpliescollinear).
assert (Col F G M) by (conclude lemma_rayimpliescollinear).
assert (Col G F M) by (forward_using lemma_collinearorder).
assert (neq F G) by (forward_using lemma_betweennotequal).
assert (neq G F) by (conclude lemma_inequalitysymmetric).
assert (Col F N M) by (conclude lemma_collinear4).
assert (Col M F N) by (forward_using lemma_collinearorder).
assert ((eq M F \\/ eq M N \\/ eq F N \\/ BetS F M N \\/ BetS M F N \\/ BetS M N F)) by (conclude_def Col ).
assert (Out M F N).
by cases on (eq M F \\/ eq M N \\/ eq F N \\/ BetS F M N \\/ BetS M F N \\/ BetS M N F).
assert (~ ~ Out M F N).

*****
H28 : eq M F
H26 : Col M F N
H25 : Col F N M
H24 : neq G F
H23 : neq F G
H22 : Col G F M
H21 : Col F G M
H20 : Col G F N
H19 : not (BetS F M N)
H18 : BetS D F G
H17 : BetS D F M
H16 : BetS G F D
H15 : or (BetS F M G) (or (eq G M) (BetS F G M))
H14 : Cong F D M F
H13 : BetS M F D
D : Point
H12 : neq M F
H11 : neq F M
H10 : not (eq M N)
H9 : neq C c
H8 : neq a J
H7 : Lt B b A J
H6 : Cong a J C c
H5 : BetS A a J
J : Point
H4 : Cong G N C c
H3 : Out G F N
H2 : Cong F M A a
H1 : Out F G M
H0 : Cong F G B b
H : TG A a C c B b
A,B,C,F,G,M,N,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
not (not (Out M F N))
+++++
intro.
-----
Lemma lemma_together2 : forall A B C F G M N a b c, TG A a C c B b -> Cong F G B b -> Out F G M -> Cong F M A a -> Out G F N -> Cong G N C c -> Out M F N.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists J, (BetS A a J /\\ Cong a J C c /\\ Lt B b A J)) by (conclude_def TG );destruct Tf as [J];spliter.
assert (neq a J) by (forward_using lemma_betweennotequal).
assert (neq C c) by (conclude axiom_nocollapse).
assert (~ eq M N).
assert (neq F M) by (conclude lemma_raystrict).
assert (neq M F) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists D, (BetS M F D /\\ Cong F D M F)) by (conclude lemma_extension);destruct Tf as [D];spliter.
assert ((BetS F M G \\/ eq G M \\/ BetS F G M)) by (conclude lemma_ray1).
assert (BetS G F D).
by cases on (BetS F M G \\/ eq G M \\/ BetS F G M).
assert (BetS D F M) by (conclude axiom_betweennesssymmetry).
assert (BetS D F G) by (conclude axiom_betweennesssymmetry).
assert (~ BetS F M N).
assert (Col G F N) by (conclude lemma_rayimpliescollinear).
assert (Col F G M) by (conclude lemma_rayimpliescollinear).
assert (Col G F M) by (forward_using lemma_collinearorder).
assert (neq F G) by (forward_using lemma_betweennotequal).
assert (neq G F) by (conclude lemma_inequalitysymmetric).
assert (Col F N M) by (conclude lemma_collinear4).
assert (Col M F N) by (forward_using lemma_collinearorder).
assert ((eq M F \\/ eq M N \\/ eq F N \\/ BetS F M N \\/ BetS M F N \\/ BetS M N F)) by (conclude_def Col ).
assert (Out M F N).
by cases on (eq M F \\/ eq M N \\/ eq F N \\/ BetS F M N \\/ BetS M F N \\/ BetS M N F).
assert (~ ~ Out M F N).
intro.

*****
H27 : not (Out M F N)
H28 : eq M F
H26 : Col M F N
H25 : Col F N M
H24 : neq G F
H23 : neq F G
H22 : Col G F M
H21 : Col F G M
H20 : Col G F N
H19 : not (BetS F M N)
H18 : BetS D F G
H17 : BetS D F M
H16 : BetS G F D
H15 : or (BetS F M G) (or (eq G M) (BetS F G M))
H14 : Cong F D M F
H13 : BetS M F D
D : Point
H12 : neq M F
H11 : neq F M
H10 : not (eq M N)
H9 : neq C c
H8 : neq a J
H7 : Lt B b A J
H6 : Cong a J C c
H5 : BetS A a J
J : Point
H4 : Cong G N C c
H3 : Out G F N
H2 : Cong F M A a
H1 : Out F G M
H0 : Cong F G B b
H : TG A a C c B b
A,B,C,F,G,M,N,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma lemma_together2 : forall A B C F G M N a b c, TG A a C c B b -> Cong F G B b -> Out F G M -> Cong F M A a -> Out G F N -> Cong G N C c -> Out M F N.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists J, (BetS A a J /\\ Cong a J C c /\\ Lt B b A J)) by (conclude_def TG );destruct Tf as [J];spliter.
assert (neq a J) by (forward_using lemma_betweennotequal).
assert (neq C c) by (conclude axiom_nocollapse).
assert (~ eq M N).
assert (neq F M) by (conclude lemma_raystrict).
assert (neq M F) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists D, (BetS M F D /\\ Cong F D M F)) by (conclude lemma_extension);destruct Tf as [D];spliter.
assert ((BetS F M G \\/ eq G M \\/ BetS F G M)) by (conclude lemma_ray1).
assert (BetS G F D).
by cases on (BetS F M G \\/ eq G M \\/ BetS F G M).
assert (BetS D F M) by (conclude axiom_betweennesssymmetry).
assert (BetS D F G) by (conclude axiom_betweennesssymmetry).
assert (~ BetS F M N).
assert (Col G F N) by (conclude lemma_rayimpliescollinear).
assert (Col F G M) by (conclude lemma_rayimpliescollinear).
assert (Col G F M) by (forward_using lemma_collinearorder).
assert (neq F G) by (forward_using lemma_betweennotequal).
assert (neq G F) by (conclude lemma_inequalitysymmetric).
assert (Col F N M) by (conclude lemma_collinear4).
assert (Col M F N) by (forward_using lemma_collinearorder).
assert ((eq M F \\/ eq M N \\/ eq F N \\/ BetS F M N \\/ BetS M F N \\/ BetS M N F)) by (conclude_def Col ).
assert (Out M F N).
by cases on (eq M F \\/ eq M N \\/ eq F N \\/ BetS F M N \\/ BetS M F N \\/ BetS M N F).
assert (~ ~ Out M F N).

*****
H27 : not (not (Out M F N))
H28 : eq M F
H26 : Col M F N
H25 : Col F N M
H24 : neq G F
H23 : neq F G
H22 : Col G F M
H21 : Col F G M
H20 : Col G F N
H19 : not (BetS F M N)
H18 : BetS D F G
H17 : BetS D F M
H16 : BetS G F D
H15 : or (BetS F M G) (or (eq G M) (BetS F G M))
H14 : Cong F D M F
H13 : BetS M F D
D : Point
H12 : neq M F
H11 : neq F M
H10 : not (eq M N)
H9 : neq C c
H8 : neq a J
H7 : Lt B b A J
H6 : Cong a J C c
H5 : BetS A a J
J : Point
H4 : Cong G N C c
H3 : Out G F N
H2 : Cong F M A a
H1 : Out F G M
H0 : Cong F G B b
H : TG A a C c B b
A,B,C,F,G,M,N,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
Out M F N
+++++
close.
-----
Lemma lemma_together2 : forall A B C F G M N a b c, TG A a C c B b -> Cong F G B b -> Out F G M -> Cong F M A a -> Out G F N -> Cong G N C c -> Out M F N.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists J, (BetS A a J /\\ Cong a J C c /\\ Lt B b A J)) by (conclude_def TG );destruct Tf as [J];spliter.
assert (neq a J) by (forward_using lemma_betweennotequal).
assert (neq C c) by (conclude axiom_nocollapse).
assert (~ eq M N).
assert (neq F M) by (conclude lemma_raystrict).
assert (neq M F) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists D, (BetS M F D /\\ Cong F D M F)) by (conclude lemma_extension);destruct Tf as [D];spliter.
assert ((BetS F M G \\/ eq G M \\/ BetS F G M)) by (conclude lemma_ray1).
assert (BetS G F D).
by cases on (BetS F M G \\/ eq G M \\/ BetS F G M).
assert (BetS D F M) by (conclude axiom_betweennesssymmetry).
assert (BetS D F G) by (conclude axiom_betweennesssymmetry).
assert (~ BetS F M N).
assert (Col G F N) by (conclude lemma_rayimpliescollinear).
assert (Col F G M) by (conclude lemma_rayimpliescollinear).
assert (Col G F M) by (forward_using lemma_collinearorder).
assert (neq F G) by (forward_using lemma_betweennotequal).
assert (neq G F) by (conclude lemma_inequalitysymmetric).
assert (Col F N M) by (conclude lemma_collinear4).
assert (Col M F N) by (forward_using lemma_collinearorder).
assert ((eq M F \\/ eq M N \\/ eq F N \\/ BetS F M N \\/ BetS M F N \\/ BetS M N F)) by (conclude_def Col ).
assert (Out M F N).
by cases on (eq M F \\/ eq M N \\/ eq F N \\/ BetS F M N \\/ BetS M F N \\/ BetS M N F).

*****
H29 : eq M N
H26 : Col M F N
H25 : Col F N M
H24 : neq G F
H23 : neq F G
H22 : Col G F M
H21 : Col F G M
H20 : Col G F N
H19 : not (BetS F M N)
H18 : BetS D F G
H17 : BetS D F M
H16 : BetS G F D
H15 : or (BetS F M G) (or (eq G M) (BetS F G M))
H14 : Cong F D M F
H13 : BetS M F D
D : Point
H12 : neq M F
H11 : neq F M
H10 : not (eq M N)
H9 : neq C c
H8 : neq a J
H7 : Lt B b A J
H6 : Cong a J C c
H5 : BetS A a J
J : Point
H4 : Cong G N C c
H3 : Out G F N
H2 : Cong F M A a
H1 : Out F G M
H0 : Cong F G B b
H : TG A a C c B b
A,B,C,F,G,M,N,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
Out M F N
+++++
assert (~ ~ Out M F N).
-----
Lemma lemma_together2 : forall A B C F G M N a b c, TG A a C c B b -> Cong F G B b -> Out F G M -> Cong F M A a -> Out G F N -> Cong G N C c -> Out M F N.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists J, (BetS A a J /\\ Cong a J C c /\\ Lt B b A J)) by (conclude_def TG );destruct Tf as [J];spliter.
assert (neq a J) by (forward_using lemma_betweennotequal).
assert (neq C c) by (conclude axiom_nocollapse).
assert (~ eq M N).
assert (neq F M) by (conclude lemma_raystrict).
assert (neq M F) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists D, (BetS M F D /\\ Cong F D M F)) by (conclude lemma_extension);destruct Tf as [D];spliter.
assert ((BetS F M G \\/ eq G M \\/ BetS F G M)) by (conclude lemma_ray1).
assert (BetS G F D).
by cases on (BetS F M G \\/ eq G M \\/ BetS F G M).
assert (BetS D F M) by (conclude axiom_betweennesssymmetry).
assert (BetS D F G) by (conclude axiom_betweennesssymmetry).
assert (~ BetS F M N).
assert (Col G F N) by (conclude lemma_rayimpliescollinear).
assert (Col F G M) by (conclude lemma_rayimpliescollinear).
assert (Col G F M) by (forward_using lemma_collinearorder).
assert (neq F G) by (forward_using lemma_betweennotequal).
assert (neq G F) by (conclude lemma_inequalitysymmetric).
assert (Col F N M) by (conclude lemma_collinear4).
assert (Col M F N) by (forward_using lemma_collinearorder).
assert ((eq M F \\/ eq M N \\/ eq F N \\/ BetS F M N \\/ BetS M F N \\/ BetS M N F)) by (conclude_def Col ).
assert (Out M F N).
by cases on (eq M F \\/ eq M N \\/ eq F N \\/ BetS F M N \\/ BetS M F N \\/ BetS M N F).
assert (~ ~ Out M F N).

*****
H29 : eq M N
H26 : Col M F N
H25 : Col F N M
H24 : neq G F
H23 : neq F G
H22 : Col G F M
H21 : Col F G M
H20 : Col G F N
H19 : not (BetS F M N)
H18 : BetS D F G
H17 : BetS D F M
H16 : BetS G F D
H15 : or (BetS F M G) (or (eq G M) (BetS F G M))
H14 : Cong F D M F
H13 : BetS M F D
D : Point
H12 : neq M F
H11 : neq F M
H10 : not (eq M N)
H9 : neq C c
H8 : neq a J
H7 : Lt B b A J
H6 : Cong a J C c
H5 : BetS A a J
J : Point
H4 : Cong G N C c
H3 : Out G F N
H2 : Cong F M A a
H1 : Out F G M
H0 : Cong F G B b
H : TG A a C c B b
A,B,C,F,G,M,N,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
not (not (Out M F N))
+++++
intro.
-----
Lemma lemma_together2 : forall A B C F G M N a b c, TG A a C c B b -> Cong F G B b -> Out F G M -> Cong F M A a -> Out G F N -> Cong G N C c -> Out M F N.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists J, (BetS A a J /\\ Cong a J C c /\\ Lt B b A J)) by (conclude_def TG );destruct Tf as [J];spliter.
assert (neq a J) by (forward_using lemma_betweennotequal).
assert (neq C c) by (conclude axiom_nocollapse).
assert (~ eq M N).
assert (neq F M) by (conclude lemma_raystrict).
assert (neq M F) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists D, (BetS M F D /\\ Cong F D M F)) by (conclude lemma_extension);destruct Tf as [D];spliter.
assert ((BetS F M G \\/ eq G M \\/ BetS F G M)) by (conclude lemma_ray1).
assert (BetS G F D).
by cases on (BetS F M G \\/ eq G M \\/ BetS F G M).
assert (BetS D F M) by (conclude axiom_betweennesssymmetry).
assert (BetS D F G) by (conclude axiom_betweennesssymmetry).
assert (~ BetS F M N).
assert (Col G F N) by (conclude lemma_rayimpliescollinear).
assert (Col F G M) by (conclude lemma_rayimpliescollinear).
assert (Col G F M) by (forward_using lemma_collinearorder).
assert (neq F G) by (forward_using lemma_betweennotequal).
assert (neq G F) by (conclude lemma_inequalitysymmetric).
assert (Col F N M) by (conclude lemma_collinear4).
assert (Col M F N) by (forward_using lemma_collinearorder).
assert ((eq M F \\/ eq M N \\/ eq F N \\/ BetS F M N \\/ BetS M F N \\/ BetS M N F)) by (conclude_def Col ).
assert (Out M F N).
by cases on (eq M F \\/ eq M N \\/ eq F N \\/ BetS F M N \\/ BetS M F N \\/ BetS M N F).
assert (~ ~ Out M F N).
intro.

*****
H27 : not (Out M F N)
H29 : eq M N
H26 : Col M F N
H25 : Col F N M
H24 : neq G F
H23 : neq F G
H22 : Col G F M
H21 : Col F G M
H20 : Col G F N
H19 : not (BetS F M N)
H18 : BetS D F G
H17 : BetS D F M
H16 : BetS G F D
H15 : or (BetS F M G) (or (eq G M) (BetS F G M))
H14 : Cong F D M F
H13 : BetS M F D
D : Point
H12 : neq M F
H11 : neq F M
H10 : not (eq M N)
H9 : neq C c
H8 : neq a J
H7 : Lt B b A J
H6 : Cong a J C c
H5 : BetS A a J
J : Point
H4 : Cong G N C c
H3 : Out G F N
H2 : Cong F M A a
H1 : Out F G M
H0 : Cong F G B b
H : TG A a C c B b
A,B,C,F,G,M,N,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma lemma_together2 : forall A B C F G M N a b c, TG A a C c B b -> Cong F G B b -> Out F G M -> Cong F M A a -> Out G F N -> Cong G N C c -> Out M F N.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists J, (BetS A a J /\\ Cong a J C c /\\ Lt B b A J)) by (conclude_def TG );destruct Tf as [J];spliter.
assert (neq a J) by (forward_using lemma_betweennotequal).
assert (neq C c) by (conclude axiom_nocollapse).
assert (~ eq M N).
assert (neq F M) by (conclude lemma_raystrict).
assert (neq M F) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists D, (BetS M F D /\\ Cong F D M F)) by (conclude lemma_extension);destruct Tf as [D];spliter.
assert ((BetS F M G \\/ eq G M \\/ BetS F G M)) by (conclude lemma_ray1).
assert (BetS G F D).
by cases on (BetS F M G \\/ eq G M \\/ BetS F G M).
assert (BetS D F M) by (conclude axiom_betweennesssymmetry).
assert (BetS D F G) by (conclude axiom_betweennesssymmetry).
assert (~ BetS F M N).
assert (Col G F N) by (conclude lemma_rayimpliescollinear).
assert (Col F G M) by (conclude lemma_rayimpliescollinear).
assert (Col G F M) by (forward_using lemma_collinearorder).
assert (neq F G) by (forward_using lemma_betweennotequal).
assert (neq G F) by (conclude lemma_inequalitysymmetric).
assert (Col F N M) by (conclude lemma_collinear4).
assert (Col M F N) by (forward_using lemma_collinearorder).
assert ((eq M F \\/ eq M N \\/ eq F N \\/ BetS F M N \\/ BetS M F N \\/ BetS M N F)) by (conclude_def Col ).
assert (Out M F N).
by cases on (eq M F \\/ eq M N \\/ eq F N \\/ BetS F M N \\/ BetS M F N \\/ BetS M N F).
assert (~ ~ Out M F N).

*****
H27 : not (not (Out M F N))
H29 : eq M N
H26 : Col M F N
H25 : Col F N M
H24 : neq G F
H23 : neq F G
H22 : Col G F M
H21 : Col F G M
H20 : Col G F N
H19 : not (BetS F M N)
H18 : BetS D F G
H17 : BetS D F M
H16 : BetS G F D
H15 : or (BetS F M G) (or (eq G M) (BetS F G M))
H14 : Cong F D M F
H13 : BetS M F D
D : Point
H12 : neq M F
H11 : neq F M
H10 : not (eq M N)
H9 : neq C c
H8 : neq a J
H7 : Lt B b A J
H6 : Cong a J C c
H5 : BetS A a J
J : Point
H4 : Cong G N C c
H3 : Out G F N
H2 : Cong F M A a
H1 : Out F G M
H0 : Cong F G B b
H : TG A a C c B b
A,B,C,F,G,M,N,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
Out M F N
+++++
close.
-----
Lemma lemma_together2 : forall A B C F G M N a b c, TG A a C c B b -> Cong F G B b -> Out F G M -> Cong F M A a -> Out G F N -> Cong G N C c -> Out M F N.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists J, (BetS A a J /\\ Cong a J C c /\\ Lt B b A J)) by (conclude_def TG );destruct Tf as [J];spliter.
assert (neq a J) by (forward_using lemma_betweennotequal).
assert (neq C c) by (conclude axiom_nocollapse).
assert (~ eq M N).
assert (neq F M) by (conclude lemma_raystrict).
assert (neq M F) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists D, (BetS M F D /\\ Cong F D M F)) by (conclude lemma_extension);destruct Tf as [D];spliter.
assert ((BetS F M G \\/ eq G M \\/ BetS F G M)) by (conclude lemma_ray1).
assert (BetS G F D).
by cases on (BetS F M G \\/ eq G M \\/ BetS F G M).
assert (BetS D F M) by (conclude axiom_betweennesssymmetry).
assert (BetS D F G) by (conclude axiom_betweennesssymmetry).
assert (~ BetS F M N).
assert (Col G F N) by (conclude lemma_rayimpliescollinear).
assert (Col F G M) by (conclude lemma_rayimpliescollinear).
assert (Col G F M) by (forward_using lemma_collinearorder).
assert (neq F G) by (forward_using lemma_betweennotequal).
assert (neq G F) by (conclude lemma_inequalitysymmetric).
assert (Col F N M) by (conclude lemma_collinear4).
assert (Col M F N) by (forward_using lemma_collinearorder).
assert ((eq M F \\/ eq M N \\/ eq F N \\/ BetS F M N \\/ BetS M F N \\/ BetS M N F)) by (conclude_def Col ).
assert (Out M F N).
by cases on (eq M F \\/ eq M N \\/ eq F N \\/ BetS F M N \\/ BetS M F N \\/ BetS M N F).

*****
H28 : eq F N
H26 : Col M F N
H25 : Col F N M
H24 : neq G F
H23 : neq F G
H22 : Col G F M
H21 : Col F G M
H20 : Col G F N
H19 : not (BetS F M N)
H18 : BetS D F G
H17 : BetS D F M
H16 : BetS G F D
H15 : or (BetS F M G) (or (eq G M) (BetS F G M))
H14 : Cong F D M F
H13 : BetS M F D
D : Point
H12 : neq M F
H11 : neq F M
H10 : not (eq M N)
H9 : neq C c
H8 : neq a J
H7 : Lt B b A J
H6 : Cong a J C c
H5 : BetS A a J
J : Point
H4 : Cong G N C c
H3 : Out G F N
H2 : Cong F M A a
H1 : Out F G M
H0 : Cong F G B b
H : TG A a C c B b
A,B,C,F,G,M,N,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
Out M F N
+++++
assert (eq N F) by (conclude lemma_equalitysymmetric).
-----
Lemma lemma_together2 : forall A B C F G M N a b c, TG A a C c B b -> Cong F G B b -> Out F G M -> Cong F M A a -> Out G F N -> Cong G N C c -> Out M F N.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists J, (BetS A a J /\\ Cong a J C c /\\ Lt B b A J)) by (conclude_def TG );destruct Tf as [J];spliter.
assert (neq a J) by (forward_using lemma_betweennotequal).
assert (neq C c) by (conclude axiom_nocollapse).
assert (~ eq M N).
assert (neq F M) by (conclude lemma_raystrict).
assert (neq M F) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists D, (BetS M F D /\\ Cong F D M F)) by (conclude lemma_extension);destruct Tf as [D];spliter.
assert ((BetS F M G \\/ eq G M \\/ BetS F G M)) by (conclude lemma_ray1).
assert (BetS G F D).
by cases on (BetS F M G \\/ eq G M \\/ BetS F G M).
assert (BetS D F M) by (conclude axiom_betweennesssymmetry).
assert (BetS D F G) by (conclude axiom_betweennesssymmetry).
assert (~ BetS F M N).
assert (Col G F N) by (conclude lemma_rayimpliescollinear).
assert (Col F G M) by (conclude lemma_rayimpliescollinear).
assert (Col G F M) by (forward_using lemma_collinearorder).
assert (neq F G) by (forward_using lemma_betweennotequal).
assert (neq G F) by (conclude lemma_inequalitysymmetric).
assert (Col F N M) by (conclude lemma_collinear4).
assert (Col M F N) by (forward_using lemma_collinearorder).
assert ((eq M F \\/ eq M N \\/ eq F N \\/ BetS F M N \\/ BetS M F N \\/ BetS M N F)) by (conclude_def Col ).
assert (Out M F N).
by cases on (eq M F \\/ eq M N \\/ eq F N \\/ BetS F M N \\/ BetS M F N \\/ BetS M N F).
assert (eq N F) by (conclude lemma_equalitysymmetric).

*****
H27 : eq N F
H28 : eq F N
H26 : Col M F N
H25 : Col F N M
H24 : neq G F
H23 : neq F G
H22 : Col G F M
H21 : Col F G M
H20 : Col G F N
H19 : not (BetS F M N)
H18 : BetS D F G
H17 : BetS D F M
H16 : BetS G F D
H15 : or (BetS F M G) (or (eq G M) (BetS F G M))
H14 : Cong F D M F
H13 : BetS M F D
D : Point
H12 : neq M F
H11 : neq F M
H10 : not (eq M N)
H9 : neq C c
H8 : neq a J
H7 : Lt B b A J
H6 : Cong a J C c
H5 : BetS A a J
J : Point
H4 : Cong G N C c
H3 : Out G F N
H2 : Cong F M A a
H1 : Out F G M
H0 : Cong F G B b
H : TG A a C c B b
A,B,C,F,G,M,N,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
Out M F N
+++++
assert (Out M F N) by (conclude lemma_ray4).
-----
Lemma lemma_together2 : forall A B C F G M N a b c, TG A a C c B b -> Cong F G B b -> Out F G M -> Cong F M A a -> Out G F N -> Cong G N C c -> Out M F N.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists J, (BetS A a J /\\ Cong a J C c /\\ Lt B b A J)) by (conclude_def TG );destruct Tf as [J];spliter.
assert (neq a J) by (forward_using lemma_betweennotequal).
assert (neq C c) by (conclude axiom_nocollapse).
assert (~ eq M N).
assert (neq F M) by (conclude lemma_raystrict).
assert (neq M F) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists D, (BetS M F D /\\ Cong F D M F)) by (conclude lemma_extension);destruct Tf as [D];spliter.
assert ((BetS F M G \\/ eq G M \\/ BetS F G M)) by (conclude lemma_ray1).
assert (BetS G F D).
by cases on (BetS F M G \\/ eq G M \\/ BetS F G M).
assert (BetS D F M) by (conclude axiom_betweennesssymmetry).
assert (BetS D F G) by (conclude axiom_betweennesssymmetry).
assert (~ BetS F M N).
assert (Col G F N) by (conclude lemma_rayimpliescollinear).
assert (Col F G M) by (conclude lemma_rayimpliescollinear).
assert (Col G F M) by (forward_using lemma_collinearorder).
assert (neq F G) by (forward_using lemma_betweennotequal).
assert (neq G F) by (conclude lemma_inequalitysymmetric).
assert (Col F N M) by (conclude lemma_collinear4).
assert (Col M F N) by (forward_using lemma_collinearorder).
assert ((eq M F \\/ eq M N \\/ eq F N \\/ BetS F M N \\/ BetS M F N \\/ BetS M N F)) by (conclude_def Col ).
assert (Out M F N).
by cases on (eq M F \\/ eq M N \\/ eq F N \\/ BetS F M N \\/ BetS M F N \\/ BetS M N F).
assert (eq N F) by (conclude lemma_equalitysymmetric).
assert (Out M F N) by (conclude lemma_ray4).

*****
H29 : Out M F N
H27 : eq N F
H28 : eq F N
H26 : Col M F N
H25 : Col F N M
H24 : neq G F
H23 : neq F G
H22 : Col G F M
H21 : Col F G M
H20 : Col G F N
H19 : not (BetS F M N)
H18 : BetS D F G
H17 : BetS D F M
H16 : BetS G F D
H15 : or (BetS F M G) (or (eq G M) (BetS F G M))
H14 : Cong F D M F
H13 : BetS M F D
D : Point
H12 : neq M F
H11 : neq F M
H10 : not (eq M N)
H9 : neq C c
H8 : neq a J
H7 : Lt B b A J
H6 : Cong a J C c
H5 : BetS A a J
J : Point
H4 : Cong G N C c
H3 : Out G F N
H2 : Cong F M A a
H1 : Out F G M
H0 : Cong F G B b
H : TG A a C c B b
A,B,C,F,G,M,N,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
Out M F N
+++++
close.
-----
Lemma lemma_together2 : forall A B C F G M N a b c, TG A a C c B b -> Cong F G B b -> Out F G M -> Cong F M A a -> Out G F N -> Cong G N C c -> Out M F N.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists J, (BetS A a J /\\ Cong a J C c /\\ Lt B b A J)) by (conclude_def TG );destruct Tf as [J];spliter.
assert (neq a J) by (forward_using lemma_betweennotequal).
assert (neq C c) by (conclude axiom_nocollapse).
assert (~ eq M N).
assert (neq F M) by (conclude lemma_raystrict).
assert (neq M F) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists D, (BetS M F D /\\ Cong F D M F)) by (conclude lemma_extension);destruct Tf as [D];spliter.
assert ((BetS F M G \\/ eq G M \\/ BetS F G M)) by (conclude lemma_ray1).
assert (BetS G F D).
by cases on (BetS F M G \\/ eq G M \\/ BetS F G M).
assert (BetS D F M) by (conclude axiom_betweennesssymmetry).
assert (BetS D F G) by (conclude axiom_betweennesssymmetry).
assert (~ BetS F M N).
assert (Col G F N) by (conclude lemma_rayimpliescollinear).
assert (Col F G M) by (conclude lemma_rayimpliescollinear).
assert (Col G F M) by (forward_using lemma_collinearorder).
assert (neq F G) by (forward_using lemma_betweennotequal).
assert (neq G F) by (conclude lemma_inequalitysymmetric).
assert (Col F N M) by (conclude lemma_collinear4).
assert (Col M F N) by (forward_using lemma_collinearorder).
assert ((eq M F \\/ eq M N \\/ eq F N \\/ BetS F M N \\/ BetS M F N \\/ BetS M N F)) by (conclude_def Col ).
assert (Out M F N).
by cases on (eq M F \\/ eq M N \\/ eq F N \\/ BetS F M N \\/ BetS M F N \\/ BetS M N F).

*****
H29 : BetS F M N
H26 : Col M F N
H25 : Col F N M
H24 : neq G F
H23 : neq F G
H22 : Col G F M
H21 : Col F G M
H20 : Col G F N
H19 : not (BetS F M N)
H18 : BetS D F G
H17 : BetS D F M
H16 : BetS G F D
H15 : or (BetS F M G) (or (eq G M) (BetS F G M))
H14 : Cong F D M F
H13 : BetS M F D
D : Point
H12 : neq M F
H11 : neq F M
H10 : not (eq M N)
H9 : neq C c
H8 : neq a J
H7 : Lt B b A J
H6 : Cong a J C c
H5 : BetS A a J
J : Point
H4 : Cong G N C c
H3 : Out G F N
H2 : Cong F M A a
H1 : Out F G M
H0 : Cong F G B b
H : TG A a C c B b
A,B,C,F,G,M,N,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
Out M F N
+++++
assert (~ ~ Out M F N).
-----
Lemma lemma_together2 : forall A B C F G M N a b c, TG A a C c B b -> Cong F G B b -> Out F G M -> Cong F M A a -> Out G F N -> Cong G N C c -> Out M F N.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists J, (BetS A a J /\\ Cong a J C c /\\ Lt B b A J)) by (conclude_def TG );destruct Tf as [J];spliter.
assert (neq a J) by (forward_using lemma_betweennotequal).
assert (neq C c) by (conclude axiom_nocollapse).
assert (~ eq M N).
assert (neq F M) by (conclude lemma_raystrict).
assert (neq M F) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists D, (BetS M F D /\\ Cong F D M F)) by (conclude lemma_extension);destruct Tf as [D];spliter.
assert ((BetS F M G \\/ eq G M \\/ BetS F G M)) by (conclude lemma_ray1).
assert (BetS G F D).
by cases on (BetS F M G \\/ eq G M \\/ BetS F G M).
assert (BetS D F M) by (conclude axiom_betweennesssymmetry).
assert (BetS D F G) by (conclude axiom_betweennesssymmetry).
assert (~ BetS F M N).
assert (Col G F N) by (conclude lemma_rayimpliescollinear).
assert (Col F G M) by (conclude lemma_rayimpliescollinear).
assert (Col G F M) by (forward_using lemma_collinearorder).
assert (neq F G) by (forward_using lemma_betweennotequal).
assert (neq G F) by (conclude lemma_inequalitysymmetric).
assert (Col F N M) by (conclude lemma_collinear4).
assert (Col M F N) by (forward_using lemma_collinearorder).
assert ((eq M F \\/ eq M N \\/ eq F N \\/ BetS F M N \\/ BetS M F N \\/ BetS M N F)) by (conclude_def Col ).
assert (Out M F N).
by cases on (eq M F \\/ eq M N \\/ eq F N \\/ BetS F M N \\/ BetS M F N \\/ BetS M N F).
assert (~ ~ Out M F N).

*****
H29 : BetS F M N
H26 : Col M F N
H25 : Col F N M
H24 : neq G F
H23 : neq F G
H22 : Col G F M
H21 : Col F G M
H20 : Col G F N
H19 : not (BetS F M N)
H18 : BetS D F G
H17 : BetS D F M
H16 : BetS G F D
H15 : or (BetS F M G) (or (eq G M) (BetS F G M))
H14 : Cong F D M F
H13 : BetS M F D
D : Point
H12 : neq M F
H11 : neq F M
H10 : not (eq M N)
H9 : neq C c
H8 : neq a J
H7 : Lt B b A J
H6 : Cong a J C c
H5 : BetS A a J
J : Point
H4 : Cong G N C c
H3 : Out G F N
H2 : Cong F M A a
H1 : Out F G M
H0 : Cong F G B b
H : TG A a C c B b
A,B,C,F,G,M,N,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
not (not (Out M F N))
+++++
intro.
-----
Lemma lemma_together2 : forall A B C F G M N a b c, TG A a C c B b -> Cong F G B b -> Out F G M -> Cong F M A a -> Out G F N -> Cong G N C c -> Out M F N.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists J, (BetS A a J /\\ Cong a J C c /\\ Lt B b A J)) by (conclude_def TG );destruct Tf as [J];spliter.
assert (neq a J) by (forward_using lemma_betweennotequal).
assert (neq C c) by (conclude axiom_nocollapse).
assert (~ eq M N).
assert (neq F M) by (conclude lemma_raystrict).
assert (neq M F) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists D, (BetS M F D /\\ Cong F D M F)) by (conclude lemma_extension);destruct Tf as [D];spliter.
assert ((BetS F M G \\/ eq G M \\/ BetS F G M)) by (conclude lemma_ray1).
assert (BetS G F D).
by cases on (BetS F M G \\/ eq G M \\/ BetS F G M).
assert (BetS D F M) by (conclude axiom_betweennesssymmetry).
assert (BetS D F G) by (conclude axiom_betweennesssymmetry).
assert (~ BetS F M N).
assert (Col G F N) by (conclude lemma_rayimpliescollinear).
assert (Col F G M) by (conclude lemma_rayimpliescollinear).
assert (Col G F M) by (forward_using lemma_collinearorder).
assert (neq F G) by (forward_using lemma_betweennotequal).
assert (neq G F) by (conclude lemma_inequalitysymmetric).
assert (Col F N M) by (conclude lemma_collinear4).
assert (Col M F N) by (forward_using lemma_collinearorder).
assert ((eq M F \\/ eq M N \\/ eq F N \\/ BetS F M N \\/ BetS M F N \\/ BetS M N F)) by (conclude_def Col ).
assert (Out M F N).
by cases on (eq M F \\/ eq M N \\/ eq F N \\/ BetS F M N \\/ BetS M F N \\/ BetS M N F).
assert (~ ~ Out M F N).
intro.

*****
H27 : not (Out M F N)
H29 : BetS F M N
H26 : Col M F N
H25 : Col F N M
H24 : neq G F
H23 : neq F G
H22 : Col G F M
H21 : Col F G M
H20 : Col G F N
H19 : not (BetS F M N)
H18 : BetS D F G
H17 : BetS D F M
H16 : BetS G F D
H15 : or (BetS F M G) (or (eq G M) (BetS F G M))
H14 : Cong F D M F
H13 : BetS M F D
D : Point
H12 : neq M F
H11 : neq F M
H10 : not (eq M N)
H9 : neq C c
H8 : neq a J
H7 : Lt B b A J
H6 : Cong a J C c
H5 : BetS A a J
J : Point
H4 : Cong G N C c
H3 : Out G F N
H2 : Cong F M A a
H1 : Out F G M
H0 : Cong F G B b
H : TG A a C c B b
A,B,C,F,G,M,N,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma lemma_together2 : forall A B C F G M N a b c, TG A a C c B b -> Cong F G B b -> Out F G M -> Cong F M A a -> Out G F N -> Cong G N C c -> Out M F N.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists J, (BetS A a J /\\ Cong a J C c /\\ Lt B b A J)) by (conclude_def TG );destruct Tf as [J];spliter.
assert (neq a J) by (forward_using lemma_betweennotequal).
assert (neq C c) by (conclude axiom_nocollapse).
assert (~ eq M N).
assert (neq F M) by (conclude lemma_raystrict).
assert (neq M F) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists D, (BetS M F D /\\ Cong F D M F)) by (conclude lemma_extension);destruct Tf as [D];spliter.
assert ((BetS F M G \\/ eq G M \\/ BetS F G M)) by (conclude lemma_ray1).
assert (BetS G F D).
by cases on (BetS F M G \\/ eq G M \\/ BetS F G M).
assert (BetS D F M) by (conclude axiom_betweennesssymmetry).
assert (BetS D F G) by (conclude axiom_betweennesssymmetry).
assert (~ BetS F M N).
assert (Col G F N) by (conclude lemma_rayimpliescollinear).
assert (Col F G M) by (conclude lemma_rayimpliescollinear).
assert (Col G F M) by (forward_using lemma_collinearorder).
assert (neq F G) by (forward_using lemma_betweennotequal).
assert (neq G F) by (conclude lemma_inequalitysymmetric).
assert (Col F N M) by (conclude lemma_collinear4).
assert (Col M F N) by (forward_using lemma_collinearorder).
assert ((eq M F \\/ eq M N \\/ eq F N \\/ BetS F M N \\/ BetS M F N \\/ BetS M N F)) by (conclude_def Col ).
assert (Out M F N).
by cases on (eq M F \\/ eq M N \\/ eq F N \\/ BetS F M N \\/ BetS M F N \\/ BetS M N F).
assert (~ ~ Out M F N).

*****
H27 : not (not (Out M F N))
H29 : BetS F M N
H26 : Col M F N
H25 : Col F N M
H24 : neq G F
H23 : neq F G
H22 : Col G F M
H21 : Col F G M
H20 : Col G F N
H19 : not (BetS F M N)
H18 : BetS D F G
H17 : BetS D F M
H16 : BetS G F D
H15 : or (BetS F M G) (or (eq G M) (BetS F G M))
H14 : Cong F D M F
H13 : BetS M F D
D : Point
H12 : neq M F
H11 : neq F M
H10 : not (eq M N)
H9 : neq C c
H8 : neq a J
H7 : Lt B b A J
H6 : Cong a J C c
H5 : BetS A a J
J : Point
H4 : Cong G N C c
H3 : Out G F N
H2 : Cong F M A a
H1 : Out F G M
H0 : Cong F G B b
H : TG A a C c B b
A,B,C,F,G,M,N,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
Out M F N
+++++
close.
-----
Lemma lemma_together2 : forall A B C F G M N a b c, TG A a C c B b -> Cong F G B b -> Out F G M -> Cong F M A a -> Out G F N -> Cong G N C c -> Out M F N.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists J, (BetS A a J /\\ Cong a J C c /\\ Lt B b A J)) by (conclude_def TG );destruct Tf as [J];spliter.
assert (neq a J) by (forward_using lemma_betweennotequal).
assert (neq C c) by (conclude axiom_nocollapse).
assert (~ eq M N).
assert (neq F M) by (conclude lemma_raystrict).
assert (neq M F) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists D, (BetS M F D /\\ Cong F D M F)) by (conclude lemma_extension);destruct Tf as [D];spliter.
assert ((BetS F M G \\/ eq G M \\/ BetS F G M)) by (conclude lemma_ray1).
assert (BetS G F D).
by cases on (BetS F M G \\/ eq G M \\/ BetS F G M).
assert (BetS D F M) by (conclude axiom_betweennesssymmetry).
assert (BetS D F G) by (conclude axiom_betweennesssymmetry).
assert (~ BetS F M N).
assert (Col G F N) by (conclude lemma_rayimpliescollinear).
assert (Col F G M) by (conclude lemma_rayimpliescollinear).
assert (Col G F M) by (forward_using lemma_collinearorder).
assert (neq F G) by (forward_using lemma_betweennotequal).
assert (neq G F) by (conclude lemma_inequalitysymmetric).
assert (Col F N M) by (conclude lemma_collinear4).
assert (Col M F N) by (forward_using lemma_collinearorder).
assert ((eq M F \\/ eq M N \\/ eq F N \\/ BetS F M N \\/ BetS M F N \\/ BetS M N F)) by (conclude_def Col ).
assert (Out M F N).
by cases on (eq M F \\/ eq M N \\/ eq F N \\/ BetS F M N \\/ BetS M F N \\/ BetS M N F).

*****
H28 : BetS M F N
H26 : Col M F N
H25 : Col F N M
H24 : neq G F
H23 : neq F G
H22 : Col G F M
H21 : Col F G M
H20 : Col G F N
H19 : not (BetS F M N)
H18 : BetS D F G
H17 : BetS D F M
H16 : BetS G F D
H15 : or (BetS F M G) (or (eq G M) (BetS F G M))
H14 : Cong F D M F
H13 : BetS M F D
D : Point
H12 : neq M F
H11 : neq F M
H10 : not (eq M N)
H9 : neq C c
H8 : neq a J
H7 : Lt B b A J
H6 : Cong a J C c
H5 : BetS A a J
J : Point
H4 : Cong G N C c
H3 : Out G F N
H2 : Cong F M A a
H1 : Out F G M
H0 : Cong F G B b
H : TG A a C c B b
A,B,C,F,G,M,N,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
Out M F N
+++++
assert (Out M F N) by (conclude lemma_ray4).
-----
Lemma lemma_together2 : forall A B C F G M N a b c, TG A a C c B b -> Cong F G B b -> Out F G M -> Cong F M A a -> Out G F N -> Cong G N C c -> Out M F N.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists J, (BetS A a J /\\ Cong a J C c /\\ Lt B b A J)) by (conclude_def TG );destruct Tf as [J];spliter.
assert (neq a J) by (forward_using lemma_betweennotequal).
assert (neq C c) by (conclude axiom_nocollapse).
assert (~ eq M N).
assert (neq F M) by (conclude lemma_raystrict).
assert (neq M F) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists D, (BetS M F D /\\ Cong F D M F)) by (conclude lemma_extension);destruct Tf as [D];spliter.
assert ((BetS F M G \\/ eq G M \\/ BetS F G M)) by (conclude lemma_ray1).
assert (BetS G F D).
by cases on (BetS F M G \\/ eq G M \\/ BetS F G M).
assert (BetS D F M) by (conclude axiom_betweennesssymmetry).
assert (BetS D F G) by (conclude axiom_betweennesssymmetry).
assert (~ BetS F M N).
assert (Col G F N) by (conclude lemma_rayimpliescollinear).
assert (Col F G M) by (conclude lemma_rayimpliescollinear).
assert (Col G F M) by (forward_using lemma_collinearorder).
assert (neq F G) by (forward_using lemma_betweennotequal).
assert (neq G F) by (conclude lemma_inequalitysymmetric).
assert (Col F N M) by (conclude lemma_collinear4).
assert (Col M F N) by (forward_using lemma_collinearorder).
assert ((eq M F \\/ eq M N \\/ eq F N \\/ BetS F M N \\/ BetS M F N \\/ BetS M N F)) by (conclude_def Col ).
assert (Out M F N).
by cases on (eq M F \\/ eq M N \\/ eq F N \\/ BetS F M N \\/ BetS M F N \\/ BetS M N F).
assert (Out M F N) by (conclude lemma_ray4).

*****
H27 : Out M F N
H28 : BetS M F N
H26 : Col M F N
H25 : Col F N M
H24 : neq G F
H23 : neq F G
H22 : Col G F M
H21 : Col F G M
H20 : Col G F N
H19 : not (BetS F M N)
H18 : BetS D F G
H17 : BetS D F M
H16 : BetS G F D
H15 : or (BetS F M G) (or (eq G M) (BetS F G M))
H14 : Cong F D M F
H13 : BetS M F D
D : Point
H12 : neq M F
H11 : neq F M
H10 : not (eq M N)
H9 : neq C c
H8 : neq a J
H7 : Lt B b A J
H6 : Cong a J C c
H5 : BetS A a J
J : Point
H4 : Cong G N C c
H3 : Out G F N
H2 : Cong F M A a
H1 : Out F G M
H0 : Cong F G B b
H : TG A a C c B b
A,B,C,F,G,M,N,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
Out M F N
+++++
close.
-----
Lemma lemma_together2 : forall A B C F G M N a b c, TG A a C c B b -> Cong F G B b -> Out F G M -> Cong F M A a -> Out G F N -> Cong G N C c -> Out M F N.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists J, (BetS A a J /\\ Cong a J C c /\\ Lt B b A J)) by (conclude_def TG );destruct Tf as [J];spliter.
assert (neq a J) by (forward_using lemma_betweennotequal).
assert (neq C c) by (conclude axiom_nocollapse).
assert (~ eq M N).
assert (neq F M) by (conclude lemma_raystrict).
assert (neq M F) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists D, (BetS M F D /\\ Cong F D M F)) by (conclude lemma_extension);destruct Tf as [D];spliter.
assert ((BetS F M G \\/ eq G M \\/ BetS F G M)) by (conclude lemma_ray1).
assert (BetS G F D).
by cases on (BetS F M G \\/ eq G M \\/ BetS F G M).
assert (BetS D F M) by (conclude axiom_betweennesssymmetry).
assert (BetS D F G) by (conclude axiom_betweennesssymmetry).
assert (~ BetS F M N).
assert (Col G F N) by (conclude lemma_rayimpliescollinear).
assert (Col F G M) by (conclude lemma_rayimpliescollinear).
assert (Col G F M) by (forward_using lemma_collinearorder).
assert (neq F G) by (forward_using lemma_betweennotequal).
assert (neq G F) by (conclude lemma_inequalitysymmetric).
assert (Col F N M) by (conclude lemma_collinear4).
assert (Col M F N) by (forward_using lemma_collinearorder).
assert ((eq M F \\/ eq M N \\/ eq F N \\/ BetS F M N \\/ BetS M F N \\/ BetS M N F)) by (conclude_def Col ).
assert (Out M F N).
by cases on (eq M F \\/ eq M N \\/ eq F N \\/ BetS F M N \\/ BetS M F N \\/ BetS M N F).

*****
H28 : BetS M N F
H26 : Col M F N
H25 : Col F N M
H24 : neq G F
H23 : neq F G
H22 : Col G F M
H21 : Col F G M
H20 : Col G F N
H19 : not (BetS F M N)
H18 : BetS D F G
H17 : BetS D F M
H16 : BetS G F D
H15 : or (BetS F M G) (or (eq G M) (BetS F G M))
H14 : Cong F D M F
H13 : BetS M F D
D : Point
H12 : neq M F
H11 : neq F M
H10 : not (eq M N)
H9 : neq C c
H8 : neq a J
H7 : Lt B b A J
H6 : Cong a J C c
H5 : BetS A a J
J : Point
H4 : Cong G N C c
H3 : Out G F N
H2 : Cong F M A a
H1 : Out F G M
H0 : Cong F G B b
H : TG A a C c B b
A,B,C,F,G,M,N,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
Out M F N
+++++
assert (Out M F N) by (conclude lemma_ray4).
-----
Lemma lemma_together2 : forall A B C F G M N a b c, TG A a C c B b -> Cong F G B b -> Out F G M -> Cong F M A a -> Out G F N -> Cong G N C c -> Out M F N.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists J, (BetS A a J /\\ Cong a J C c /\\ Lt B b A J)) by (conclude_def TG );destruct Tf as [J];spliter.
assert (neq a J) by (forward_using lemma_betweennotequal).
assert (neq C c) by (conclude axiom_nocollapse).
assert (~ eq M N).
assert (neq F M) by (conclude lemma_raystrict).
assert (neq M F) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists D, (BetS M F D /\\ Cong F D M F)) by (conclude lemma_extension);destruct Tf as [D];spliter.
assert ((BetS F M G \\/ eq G M \\/ BetS F G M)) by (conclude lemma_ray1).
assert (BetS G F D).
by cases on (BetS F M G \\/ eq G M \\/ BetS F G M).
assert (BetS D F M) by (conclude axiom_betweennesssymmetry).
assert (BetS D F G) by (conclude axiom_betweennesssymmetry).
assert (~ BetS F M N).
assert (Col G F N) by (conclude lemma_rayimpliescollinear).
assert (Col F G M) by (conclude lemma_rayimpliescollinear).
assert (Col G F M) by (forward_using lemma_collinearorder).
assert (neq F G) by (forward_using lemma_betweennotequal).
assert (neq G F) by (conclude lemma_inequalitysymmetric).
assert (Col F N M) by (conclude lemma_collinear4).
assert (Col M F N) by (forward_using lemma_collinearorder).
assert ((eq M F \\/ eq M N \\/ eq F N \\/ BetS F M N \\/ BetS M F N \\/ BetS M N F)) by (conclude_def Col ).
assert (Out M F N).
by cases on (eq M F \\/ eq M N \\/ eq F N \\/ BetS F M N \\/ BetS M F N \\/ BetS M N F).
assert (Out M F N) by (conclude lemma_ray4).

*****
H27 : Out M F N
H28 : BetS M N F
H26 : Col M F N
H25 : Col F N M
H24 : neq G F
H23 : neq F G
H22 : Col G F M
H21 : Col F G M
H20 : Col G F N
H19 : not (BetS F M N)
H18 : BetS D F G
H17 : BetS D F M
H16 : BetS G F D
H15 : or (BetS F M G) (or (eq G M) (BetS F G M))
H14 : Cong F D M F
H13 : BetS M F D
D : Point
H12 : neq M F
H11 : neq F M
H10 : not (eq M N)
H9 : neq C c
H8 : neq a J
H7 : Lt B b A J
H6 : Cong a J C c
H5 : BetS A a J
J : Point
H4 : Cong G N C c
H3 : Out G F N
H2 : Cong F M A a
H1 : Out F G M
H0 : Cong F G B b
H : TG A a C c B b
A,B,C,F,G,M,N,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
Out M F N
+++++
close.
-----
Lemma lemma_together2 : forall A B C F G M N a b c, TG A a C c B b -> Cong F G B b -> Out F G M -> Cong F M A a -> Out G F N -> Cong G N C c -> Out M F N.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists J, (BetS A a J /\\ Cong a J C c /\\ Lt B b A J)) by (conclude_def TG );destruct Tf as [J];spliter.
assert (neq a J) by (forward_using lemma_betweennotequal).
assert (neq C c) by (conclude axiom_nocollapse).
assert (~ eq M N).
assert (neq F M) by (conclude lemma_raystrict).
assert (neq M F) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists D, (BetS M F D /\\ Cong F D M F)) by (conclude lemma_extension);destruct Tf as [D];spliter.
assert ((BetS F M G \\/ eq G M \\/ BetS F G M)) by (conclude lemma_ray1).
assert (BetS G F D).
by cases on (BetS F M G \\/ eq G M \\/ BetS F G M).
assert (BetS D F M) by (conclude axiom_betweennesssymmetry).
assert (BetS D F G) by (conclude axiom_betweennesssymmetry).
assert (~ BetS F M N).
assert (Col G F N) by (conclude lemma_rayimpliescollinear).
assert (Col F G M) by (conclude lemma_rayimpliescollinear).
assert (Col G F M) by (forward_using lemma_collinearorder).
assert (neq F G) by (forward_using lemma_betweennotequal).
assert (neq G F) by (conclude lemma_inequalitysymmetric).
assert (Col F N M) by (conclude lemma_collinear4).
assert (Col M F N) by (forward_using lemma_collinearorder).
assert ((eq M F \\/ eq M N \\/ eq F N \\/ BetS F M N \\/ BetS M F N \\/ BetS M N F)) by (conclude_def Col ).
assert (Out M F N).
by cases on (eq M F \\/ eq M N \\/ eq F N \\/ BetS F M N \\/ BetS M F N \\/ BetS M N F).

*****
H28 : Out M F N
H27 : or (eq M F)\n (or (eq M N)\n (or (eq F N) (or (BetS F M N) (or (BetS M F N) (BetS M N F)))))
H26 : Col M F N
H25 : Col F N M
H24 : neq G F
H23 : neq F G
H22 : Col G F M
H21 : Col F G M
H20 : Col G F N
H19 : not (BetS F M N)
H18 : BetS D F G
H17 : BetS D F M
H16 : BetS G F D
H15 : or (BetS F M G) (or (eq G M) (BetS F G M))
H14 : Cong F D M F
H13 : BetS M F D
D : Point
H12 : neq M F
H11 : neq F M
H10 : not (eq M N)
H9 : neq C c
H8 : neq a J
H7 : Lt B b A J
H6 : Cong a J C c
H5 : BetS A a J
J : Point
H4 : Cong G N C c
H3 : Out G F N
H2 : Cong F M A a
H1 : Out F G M
H0 : Cong F G B b
H : TG A a C c B b
A,B,C,F,G,M,N,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
Out M F N
+++++
close.
-----
Lemma lemma_together2 : forall A B C F G M N a b c, TG A a C c B b -> Cong F G B b -> Out F G M -> Cong F M A a -> Out G F N -> Cong G N C c -> Out M F N.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists J, (BetS A a J /\\ Cong a J C c /\\ Lt B b A J)) by (conclude_def TG );destruct Tf as [J];spliter.
assert (neq a J) by (forward_using lemma_betweennotequal).
assert (neq C c) by (conclude axiom_nocollapse).
assert (~ eq M N).
assert (neq F M) by (conclude lemma_raystrict).
assert (neq M F) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists D, (BetS M F D /\\ Cong F D M F)) by (conclude lemma_extension);destruct Tf as [D];spliter.
assert ((BetS F M G \\/ eq G M \\/ BetS F G M)) by (conclude lemma_ray1).
assert (BetS G F D).
by cases on (BetS F M G \\/ eq G M \\/ BetS F G M).
assert (BetS D F M) by (conclude axiom_betweennesssymmetry).
assert (BetS D F G) by (conclude axiom_betweennesssymmetry).
assert (~ BetS F M N).
assert (Col G F N) by (conclude lemma_rayimpliescollinear).
assert (Col F G M) by (conclude lemma_rayimpliescollinear).
assert (Col G F M) by (forward_using lemma_collinearorder).
assert (neq F G) by (forward_using lemma_betweennotequal).
assert (neq G F) by (conclude lemma_inequalitysymmetric).
assert (Col F N M) by (conclude lemma_collinear4).
assert (Col M F N) by (forward_using lemma_collinearorder).
assert ((eq M F \\/ eq M N \\/ eq F N \\/ BetS F M N \\/ BetS M F N \\/ BetS M N F)) by (conclude_def Col ).
assert (Out M F N).
by cases on (eq M F \\/ eq M N \\/ eq F N \\/ BetS F M N \\/ BetS M F N \\/ BetS M N F).
close.

*****

*****

+++++
Qed.
-----
End Euclid.
-----
