Require Export GeoCoq.Elements.OriginalProofs.lemma_equalanglestransitive.
-----
Section Euclid.
-----
Context `{Ax:euclidean_neutral_ruler_compass}.
-----
Lemma lemma_angleorderrespectscongruence2 : \n   forall A B C D E F a b c, \n   LtA A B C D E F -> CongA a b c A B C ->\n   LtA a b c D E F.
-----
Lemma lemma_angleorderrespectscongruence2 : forall A B C D E F a b c, LtA A B C D E F -> CongA a b c A B C -> LtA a b c D E F.

*****
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
forall (A B C D E F a b c : Point) (_ : LtA A B C D E F) (_ : CongA a b c A B C), LtA a b c D E F
+++++
Proof.
-----
Lemma lemma_angleorderrespectscongruence2 : forall A B C D E F a b c, LtA A B C D E F -> CongA a b c A B C -> LtA a b c D E F.
Proof.

*****
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
forall (A B C D E F a b c : Point) (_ : LtA A B C D E F) (_ : CongA a b c A B C), LtA a b c D E F
+++++
intros.
-----
Lemma lemma_angleorderrespectscongruence2 : forall A B C D E F a b c, LtA A B C D E F -> CongA a b c A B C -> LtA a b c D E F.
Proof.
intros.

*****
H0 : CongA a b c A B C
H : LtA A B C D E F
A,B,C,D,E,F,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
LtA a b c D E F
+++++
let Tf:=fresh in assert (Tf:exists P Q R, (BetS P Q R /\ Out E D P /\ Out E F R /\ CongA A B C D E Q)) by (conclude_def LtA );destruct Tf as [P[Q[R]]];spliter.
-----
Lemma lemma_angleorderrespectscongruence2 : forall A B C D E F a b c, LtA A B C D E F -> CongA a b c A B C -> LtA a b c D E F.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists P Q R, (BetS P Q R /\\ Out E D P /\\ Out E F R /\\ CongA A B C D E Q)) by (conclude_def LtA );destruct Tf as [P[Q[R]]];spliter.

*****
H4 : CongA A B C D E Q
H3 : Out E F R
H2 : Out E D P
H1 : BetS P Q R
P,Q,R : Point
H0 : CongA a b c A B C
H : LtA A B C D E F
A,B,C,D,E,F,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
LtA a b c D E F
+++++
assert (CongA a b c D E Q) by (conclude lemma_equalanglestransitive).
-----
Lemma lemma_angleorderrespectscongruence2 : forall A B C D E F a b c, LtA A B C D E F -> CongA a b c A B C -> LtA a b c D E F.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists P Q R, (BetS P Q R /\\ Out E D P /\\ Out E F R /\\ CongA A B C D E Q)) by (conclude_def LtA );destruct Tf as [P[Q[R]]];spliter.
assert (CongA a b c D E Q) by (conclude lemma_equalanglestransitive).

*****
H5 : CongA a b c D E Q
H4 : CongA A B C D E Q
H3 : Out E F R
H2 : Out E D P
H1 : BetS P Q R
P,Q,R : Point
H0 : CongA a b c A B C
H : LtA A B C D E F
A,B,C,D,E,F,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
LtA a b c D E F
+++++
assert (LtA a b c D E F) by (conclude_def LtA ).
-----
Lemma lemma_angleorderrespectscongruence2 : forall A B C D E F a b c, LtA A B C D E F -> CongA a b c A B C -> LtA a b c D E F.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists P Q R, (BetS P Q R /\\ Out E D P /\\ Out E F R /\\ CongA A B C D E Q)) by (conclude_def LtA );destruct Tf as [P[Q[R]]];spliter.
assert (CongA a b c D E Q) by (conclude lemma_equalanglestransitive).
assert (LtA a b c D E F) by (conclude_def LtA ).

*****
H6 : LtA a b c D E F
H5 : CongA a b c D E Q
H4 : CongA A B C D E Q
H3 : Out E F R
H2 : Out E D P
H1 : BetS P Q R
P,Q,R : Point
H0 : CongA a b c A B C
H : LtA A B C D E F
A,B,C,D,E,F,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
LtA a b c D E F
+++++
close.
-----
Lemma lemma_angleorderrespectscongruence2 : forall A B C D E F a b c, LtA A B C D E F -> CongA a b c A B C -> LtA a b c D E F.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists P Q R, (BetS P Q R /\\ Out E D P /\\ Out E F R /\\ CongA A B C D E Q)) by (conclude_def LtA );destruct Tf as [P[Q[R]]];spliter.
assert (CongA a b c D E Q) by (conclude lemma_equalanglestransitive).
assert (LtA a b c D E F) by (conclude_def LtA ).
close.

*****

*****

+++++
Qed.
-----
End Euclid.
-----
