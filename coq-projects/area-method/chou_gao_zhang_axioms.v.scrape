Require Export field.
-----
From Coq Require Import Classical.
-----
Ltac Geometry := auto with Geom field_hints.
-----
Parameter Point : Set.
-----
Parameter S : Point -> Point -> Point -> F.
-----
Parameter DSeg : Point -> Point -> F.
-----
Infix "**" := DSeg (left associativity, at level 20) : F_scope.
-----
Definition Col (A B C : Point) : Prop := S A B C = 0.
-----
Definition S4 (A B C D : Point) : F := S A B C + S A C D.
-----
Definition parallel (A B C D : Point) : Prop := S4 A C B D = 0.
-----
Axiom A1b : forall A B : Point, A ** B = 0 <-> A = B.
-----
Axiom A2a : forall (A B : Point) (r : F),\n    {P : Point | Col A B P /\ A ** P = r * A ** B}.
-----
Axiom  A2b : forall (A B P P' : Point) (r : F),\n    A <> B ->\n    Col A B P ->\n    A ** P = r * A ** B -> Col A B P' -> A ** P' = r * A ** B -> P = P'.
-----
Axiom chasles : forall A B C : Point, Col A B C -> A ** B + B ** C = A ** C.
-----
Axiom A3a : forall A B C : Point, S A B C = S C A B.
-----
Axiom A3b : forall A B C : Point, S A B C = - S B A C.
-----
Axiom A4 : {A : Point &  {B : Point &  {C : Point | ~ Col A B C}}}.
-----
Axiom A5 : forall A B C D : Point, S A B C = S A B D + S A D C + S D B C.
-----
Axiom A6 : forall A B C P : Point,\n    A <> C -> ~ Col P A C -> Col A B C -> A ** B / A ** C = S P A B / S P A C.
-----
Axiom parallel_side_eq_parallel : forall P Q C D,\n  parallel P Q C D -> P**Q=C**D -> C<>D -> parallel D Q P C.
-----
Axiom chara_not_2 : 2 <> 0.
-----
Hint Unfold S4 parallel Col: Geom.
-----
Hint Resolve chara_not_2 chasles A2a A2b A3a A3b A5 A6: Geom.
-----
Lemma eq_dec_points : forall A B:Point, A=B \/ A<>B.
-----
Lemma eq_dec_points : forall A B:Point, A=B \\/ A<>B.

*****

*****
forall A B : Point, or (eq A B) (not (eq A B))
+++++
Proof.
-----
Lemma eq_dec_points : forall A B:Point, A=B \\/ A<>B.
Proof.

*****

*****
forall A B : Point, or (eq A B) (not (eq A B))
+++++
intros.
-----
Lemma eq_dec_points : forall A B:Point, A=B \\/ A<>B.
Proof.
intros.

*****
A,B : Point
*****
or (eq A B) (not (eq A B))
+++++
apply classic.
-----
Lemma eq_dec_points : forall A B:Point, A=B \\/ A<>B.
Proof.
intros.
apply classic.

*****

*****

+++++
Qed.
-----
Lemma col_dec : forall A B C:Point, Col A B C \/ ~ Col A B C.
-----
Lemma col_dec : forall A B C:Point, Col A B C \\/ ~ Col A B C.

*****

*****
forall A B C : Point, or (Col A B C) (not (Col A B C))
+++++
Proof.
-----
Lemma col_dec : forall A B C:Point, Col A B C \\/ ~ Col A B C.
Proof.

*****

*****
forall A B C : Point, or (Col A B C) (not (Col A B C))
+++++
intros.
-----
Lemma col_dec : forall A B C:Point, Col A B C \\/ ~ Col A B C.
Proof.
intros.

*****
A,B,C : Point
*****
or (Col A B C) (not (Col A B C))
+++++
apply classic.
-----
Lemma col_dec : forall A B C:Point, Col A B C \\/ ~ Col A B C.
Proof.
intros.
apply classic.

*****

*****

+++++
Qed.
-----
Lemma parallel_dec : forall A B C D, parallel A B C D \/ ~ parallel A B C D.
-----
Lemma parallel_dec : forall A B C D, parallel A B C D \\/ ~ parallel A B C D.

*****

*****
forall A B C D : Point, or (parallel A B C D) (not (parallel A B C D))
+++++
Proof.
-----
Lemma parallel_dec : forall A B C D, parallel A B C D \\/ ~ parallel A B C D.
Proof.

*****

*****
forall A B C D : Point, or (parallel A B C D) (not (parallel A B C D))
+++++
intros.
-----
Lemma parallel_dec : forall A B C D, parallel A B C D \\/ ~ parallel A B C D.
Proof.
intros.

*****
A,B,C,D : Point
*****
or (parallel A B C D) (not (parallel A B C D))
+++++
apply classic.
-----
Lemma parallel_dec : forall A B C D, parallel A B C D \\/ ~ parallel A B C D.
Proof.
intros.
apply classic.

*****

*****

+++++
Qed.
-----
Lemma number_dec : forall r: F, r=0 \/ r<>0.
-----
Lemma number_dec : forall r: F, r=0 \\/ r<>0.

*****

*****
forall r : F, or (eq r F0) (not (eq r F0))
+++++
Proof.
-----
Lemma number_dec : forall r: F, r=0 \\/ r<>0.
Proof.

*****

*****
forall r : F, or (eq r F0) (not (eq r F0))
+++++
intros.
-----
Lemma number_dec : forall r: F, r=0 \\/ r<>0.
Proof.
intros.

*****
r : F
*****
or (eq r F0) (not (eq r F0))
+++++
apply classic.
-----
Lemma number_dec : forall r: F, r=0 \\/ r<>0.
Proof.
intros.
apply classic.

*****

*****

+++++
Qed.
-----
Ltac cases_equality A B := elim (eq_dec_points A B);intros.
-----
Ltac cases_col A B C := elim (col_dec A B C);intros.
-----
Ltac cases_parallel A B C D := elim (parallel_dec A B C D);intros.
-----
Ltac cases_equality_f r := elim (number_dec r);intros.
-----
Ltac named_cases_equality A B H := elim (eq_dec_points A B);intro H.
-----
Ltac named_cases_col A B C H := elim (col_dec A B C);intro H.
-----
Ltac named_cases_parallel A B C D H := elim (parallel_dec A B C D);intro H.
-----
