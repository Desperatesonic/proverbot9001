Require Import GeoCoq.Axioms.beeson_s_axioms.
-----
Require Import GeoCoq.Tarski_dev.Ch08_orthogonality.
-----
Section Tarski_to_intuitionistic_Tarski.
-----
Context `{TnEQD:Tarski_neutral_dimensionless_with_decidable_point_equality}.
-----
Lemma cong_stability : forall A B C D, ~ ~ Cong A B C D -> Cong A B C D.
-----
Lemma cong_stability : forall A B C D, ~ ~ Cong A B C D -> Cong A B C D.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C D : Tpoint) (_ : not (not (Cong A B C D))), Cong A B C D
+++++
Proof.
-----
Lemma cong_stability : forall A B C D, ~ ~ Cong A B C D -> Cong A B C D.
Proof.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C D : Tpoint) (_ : not (not (Cong A B C D))), Cong A B C D
+++++
intros.
-----
Lemma cong_stability : forall A B C D, ~ ~ Cong A B C D -> Cong A B C D.
Proof.
intros.

*****
H : not (not (Cong A B C D))
A,B,C,D : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong A B C D
+++++
elim (cong_dec A B C D).
-----
Lemma cong_stability : forall A B C D, ~ ~ Cong A B C D -> Cong A B C D.
Proof.
intros.
elim (cong_dec A B C D).

*****
H : not (not (Cong A B C D))
A,B,C,D : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : Cong A B C D, Cong A B C D
+++++
intro HCong.
-----
Lemma cong_stability : forall A B C D, ~ ~ Cong A B C D -> Cong A B C D.
Proof.
intros.
elim (cong_dec A B C D).
intro HCong.

*****
HCong : Cong A B C D
H : not (not (Cong A B C D))
A,B,C,D : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong A B C D
+++++
apply HCong.
-----
Lemma cong_stability : forall A B C D, ~ ~ Cong A B C D -> Cong A B C D.
Proof.
intros.
elim (cong_dec A B C D).

*****
H : not (not (Cong A B C D))
A,B,C,D : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : not (Cong A B C D), Cong A B C D
+++++
intro HCong.
-----
Lemma cong_stability : forall A B C D, ~ ~ Cong A B C D -> Cong A B C D.
Proof.
intros.
elim (cong_dec A B C D).
intro HCong.

*****
HCong : not (Cong A B C D)
H : not (not (Cong A B C D))
A,B,C,D : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong A B C D
+++++
contradiction.
-----
Lemma cong_stability : forall A B C D, ~ ~ Cong A B C D -> Cong A B C D.
Proof.
intros.
elim (cong_dec A B C D).

*****

*****

+++++
Qed.
-----
Definition BetH A B C : Prop := Bet A B C /\ A <> B /\ B <> C.
-----
Lemma bet_stability : forall A B C, ~ ~ BetH A B C -> BetH A B C.
-----
Lemma bet_stability : forall A B C, ~ ~ BetH A B C -> BetH A B C.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C : Tpoint) (_ : not (not (BetH A B C))), BetH A B C
+++++
Proof.
-----
Lemma bet_stability : forall A B C, ~ ~ BetH A B C -> BetH A B C.
Proof.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C : Tpoint) (_ : not (not (BetH A B C))), BetH A B C
+++++
intros A B C HNNBet.
-----
Lemma bet_stability : forall A B C, ~ ~ BetH A B C -> BetH A B C.
Proof.
intros A B C HNNBet.

*****
HNNBet : not (not (BetH A B C))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
BetH A B C
+++++
unfold BetH in *.
-----
Lemma bet_stability : forall A B C, ~ ~ BetH A B C -> BetH A B C.
Proof.
intros A B C HNNBet.
unfold BetH in *.

*****
HNNBet : not (not (and (Bet A B C) (and (not (eq A B)) (not (eq B C)))))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Bet A B C) (and (not (eq A B)) (not (eq B C)))
+++++
elim (bet_dec A B C).
-----
Lemma bet_stability : forall A B C, ~ ~ BetH A B C -> BetH A B C.
Proof.
intros A B C HNNBet.
unfold BetH in *.
elim (bet_dec A B C).

*****
HNNBet : not (not (and (Bet A B C) (and (not (eq A B)) (not (eq B C)))))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : Bet A B C, and (Bet A B C) (and (not (eq A B)) (not (eq B C)))
+++++
intro HBet.
-----
Lemma bet_stability : forall A B C, ~ ~ BetH A B C -> BetH A B C.
Proof.
intros A B C HNNBet.
unfold BetH in *.
elim (bet_dec A B C).
intro HBet.

*****
HBet : Bet A B C
HNNBet : not (not (and (Bet A B C) (and (not (eq A B)) (not (eq B C)))))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Bet A B C) (and (not (eq A B)) (not (eq B C)))
+++++
elim (eq_dec_points A B).
-----
Lemma bet_stability : forall A B C, ~ ~ BetH A B C -> BetH A B C.
Proof.
intros A B C HNNBet.
unfold BetH in *.
elim (bet_dec A B C).
intro HBet.
elim (eq_dec_points A B).

*****
HBet : Bet A B C
HNNBet : not (not (and (Bet A B C) (and (not (eq A B)) (not (eq B C)))))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : eq A B, and (Bet A B C) (and (not (eq A B)) (not (eq B C)))
+++++
intro HAB.
-----
Lemma bet_stability : forall A B C, ~ ~ BetH A B C -> BetH A B C.
Proof.
intros A B C HNNBet.
unfold BetH in *.
elim (bet_dec A B C).
intro HBet.
elim (eq_dec_points A B).
intro HAB.

*****
HAB : eq A B
HBet : Bet A B C
HNNBet : not (not (and (Bet A B C) (and (not (eq A B)) (not (eq B C)))))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Bet A B C) (and (not (eq A B)) (not (eq B C)))
+++++
elim (eq_dec_points B C).
-----
Lemma bet_stability : forall A B C, ~ ~ BetH A B C -> BetH A B C.
Proof.
intros A B C HNNBet.
unfold BetH in *.
elim (bet_dec A B C).
intro HBet.
elim (eq_dec_points A B).
intro HAB.
elim (eq_dec_points B C).

*****
HAB : eq A B
HBet : Bet A B C
HNNBet : not (not (and (Bet A B C) (and (not (eq A B)) (not (eq B C)))))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : eq B C, and (Bet A B C) (and (not (eq A B)) (not (eq B C)))
+++++
intro HBC.
-----
Lemma bet_stability : forall A B C, ~ ~ BetH A B C -> BetH A B C.
Proof.
intros A B C HNNBet.
unfold BetH in *.
elim (bet_dec A B C).
intro HBet.
elim (eq_dec_points A B).
intro HAB.
elim (eq_dec_points B C).
intro HBC.

*****
HBC : eq B C
HAB : eq A B
HBet : Bet A B C
HNNBet : not (not (and (Bet A B C) (and (not (eq A B)) (not (eq B C)))))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Bet A B C) (and (not (eq A B)) (not (eq B C)))
+++++
subst.
-----
Lemma bet_stability : forall A B C, ~ ~ BetH A B C -> BetH A B C.
Proof.
intros A B C HNNBet.
unfold BetH in *.
elim (bet_dec A B C).
intro HBet.
elim (eq_dec_points A B).
intro HAB.
elim (eq_dec_points B C).
intro HBC.
subst.

*****
HBet : Bet C C C
HNNBet : not (not (and (Bet C C C) (and (not (eq C C)) (not (eq C C)))))
C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Bet C C C) (and (not (eq C C)) (not (eq C C)))
+++++
exfalso.
-----
Lemma bet_stability : forall A B C, ~ ~ BetH A B C -> BetH A B C.
Proof.
intros A B C HNNBet.
unfold BetH in *.
elim (bet_dec A B C).
intro HBet.
elim (eq_dec_points A B).
intro HAB.
elim (eq_dec_points B C).
intro HBC.
subst.
exfalso.

*****
HBet : Bet C C C
HNNBet : not (not (and (Bet C C C) (and (not (eq C C)) (not (eq C C)))))
C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply HNNBet.
-----
Lemma bet_stability : forall A B C, ~ ~ BetH A B C -> BetH A B C.
Proof.
intros A B C HNNBet.
unfold BetH in *.
elim (bet_dec A B C).
intro HBet.
elim (eq_dec_points A B).
intro HAB.
elim (eq_dec_points B C).
intro HBC.
subst.
exfalso.
apply HNNBet.

*****
HBet : Bet C C C
HNNBet : not (not (and (Bet C C C) (and (not (eq C C)) (not (eq C C)))))
C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (and (Bet C C C) (and (not (eq C C)) (not (eq C C))))
+++++
intro.
-----
Lemma bet_stability : forall A B C, ~ ~ BetH A B C -> BetH A B C.
Proof.
intros A B C HNNBet.
unfold BetH in *.
elim (bet_dec A B C).
intro HBet.
elim (eq_dec_points A B).
intro HAB.
elim (eq_dec_points B C).
intro HBC.
subst.
exfalso.
apply HNNBet.
intro.

*****
H : and (Bet C C C) (and (not (eq C C)) (not (eq C C)))
HBet : Bet C C C
HNNBet : not (not (and (Bet C C C) (and (not (eq C C)) (not (eq C C)))))
C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
spliter.
-----
Lemma bet_stability : forall A B C, ~ ~ BetH A B C -> BetH A B C.
Proof.
intros A B C HNNBet.
unfold BetH in *.
elim (bet_dec A B C).
intro HBet.
elim (eq_dec_points A B).
intro HAB.
elim (eq_dec_points B C).
intro HBC.
subst.
exfalso.
apply HNNBet.
intro.
spliter.

*****
H0,H1 : not (eq C C)
HBet,H : Bet C C C
HNNBet : not (not (and (Bet C C C) (and (not (eq C C)) (not (eq C C)))))
C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
intuition.
-----
Lemma bet_stability : forall A B C, ~ ~ BetH A B C -> BetH A B C.
Proof.
intros A B C HNNBet.
unfold BetH in *.
elim (bet_dec A B C).
intro HBet.
elim (eq_dec_points A B).
intro HAB.
elim (eq_dec_points B C).

*****
HAB : eq A B
HBet : Bet A B C
HNNBet : not (not (and (Bet A B C) (and (not (eq A B)) (not (eq B C)))))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : not (eq B C), and (Bet A B C) (and (not (eq A B)) (not (eq B C)))
+++++
intro HBC.
-----
Lemma bet_stability : forall A B C, ~ ~ BetH A B C -> BetH A B C.
Proof.
intros A B C HNNBet.
unfold BetH in *.
elim (bet_dec A B C).
intro HBet.
elim (eq_dec_points A B).
intro HAB.
elim (eq_dec_points B C).
intro HBC.

*****
HBC : not (eq B C)
HAB : eq A B
HBet : Bet A B C
HNNBet : not (not (and (Bet A B C) (and (not (eq A B)) (not (eq B C)))))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Bet A B C) (and (not (eq A B)) (not (eq B C)))
+++++
subst.
-----
Lemma bet_stability : forall A B C, ~ ~ BetH A B C -> BetH A B C.
Proof.
intros A B C HNNBet.
unfold BetH in *.
elim (bet_dec A B C).
intro HBet.
elim (eq_dec_points A B).
intro HAB.
elim (eq_dec_points B C).
intro HBC.
subst.

*****
HBC : not (eq B C)
HNNBet : not (not (and (Bet B B C) (and (not (eq B B)) (not (eq B C)))))
HBet : Bet B B C
B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Bet B B C) (and (not (eq B B)) (not (eq B C)))
+++++
exfalso.
-----
Lemma bet_stability : forall A B C, ~ ~ BetH A B C -> BetH A B C.
Proof.
intros A B C HNNBet.
unfold BetH in *.
elim (bet_dec A B C).
intro HBet.
elim (eq_dec_points A B).
intro HAB.
elim (eq_dec_points B C).
intro HBC.
subst.
exfalso.

*****
HBC : not (eq B C)
HNNBet : not (not (and (Bet B B C) (and (not (eq B B)) (not (eq B C)))))
HBet : Bet B B C
B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply HNNBet.
-----
Lemma bet_stability : forall A B C, ~ ~ BetH A B C -> BetH A B C.
Proof.
intros A B C HNNBet.
unfold BetH in *.
elim (bet_dec A B C).
intro HBet.
elim (eq_dec_points A B).
intro HAB.
elim (eq_dec_points B C).
intro HBC.
subst.
exfalso.
apply HNNBet.

*****
HBC : not (eq B C)
HNNBet : not (not (and (Bet B B C) (and (not (eq B B)) (not (eq B C)))))
HBet : Bet B B C
B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (and (Bet B B C) (and (not (eq B B)) (not (eq B C))))
+++++
intro.
-----
Lemma bet_stability : forall A B C, ~ ~ BetH A B C -> BetH A B C.
Proof.
intros A B C HNNBet.
unfold BetH in *.
elim (bet_dec A B C).
intro HBet.
elim (eq_dec_points A B).
intro HAB.
elim (eq_dec_points B C).
intro HBC.
subst.
exfalso.
apply HNNBet.
intro.

*****
H : and (Bet B B C) (and (not (eq B B)) (not (eq B C)))
HBC : not (eq B C)
HNNBet : not (not (and (Bet B B C) (and (not (eq B B)) (not (eq B C)))))
HBet : Bet B B C
B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
spliter.
-----
Lemma bet_stability : forall A B C, ~ ~ BetH A B C -> BetH A B C.
Proof.
intros A B C HNNBet.
unfold BetH in *.
elim (bet_dec A B C).
intro HBet.
elim (eq_dec_points A B).
intro HAB.
elim (eq_dec_points B C).
intro HBC.
subst.
exfalso.
apply HNNBet.
intro.
spliter.

*****
H1 : not (eq B C)
H0 : not (eq B B)
H : Bet B B C
HBC : not (eq B C)
HNNBet : not (not (and (Bet B B C) (and (not (eq B B)) (not (eq B C)))))
HBet : Bet B B C
B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
intuition.
-----
Lemma bet_stability : forall A B C, ~ ~ BetH A B C -> BetH A B C.
Proof.
intros A B C HNNBet.
unfold BetH in *.
elim (bet_dec A B C).
intro HBet.
elim (eq_dec_points A B).

*****
HBet : Bet A B C
HNNBet : not (not (and (Bet A B C) (and (not (eq A B)) (not (eq B C)))))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : not (eq A B), and (Bet A B C) (and (not (eq A B)) (not (eq B C)))
+++++
intro HAB.
-----
Lemma bet_stability : forall A B C, ~ ~ BetH A B C -> BetH A B C.
Proof.
intros A B C HNNBet.
unfold BetH in *.
elim (bet_dec A B C).
intro HBet.
elim (eq_dec_points A B).
intro HAB.

*****
HAB : not (eq A B)
HBet : Bet A B C
HNNBet : not (not (and (Bet A B C) (and (not (eq A B)) (not (eq B C)))))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Bet A B C) (and (not (eq A B)) (not (eq B C)))
+++++
elim (eq_dec_points B C).
-----
Lemma bet_stability : forall A B C, ~ ~ BetH A B C -> BetH A B C.
Proof.
intros A B C HNNBet.
unfold BetH in *.
elim (bet_dec A B C).
intro HBet.
elim (eq_dec_points A B).
intro HAB.
elim (eq_dec_points B C).

*****
HAB : not (eq A B)
HBet : Bet A B C
HNNBet : not (not (and (Bet A B C) (and (not (eq A B)) (not (eq B C)))))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : eq B C, and (Bet A B C) (and (not (eq A B)) (not (eq B C)))
+++++
intro HBC.
-----
Lemma bet_stability : forall A B C, ~ ~ BetH A B C -> BetH A B C.
Proof.
intros A B C HNNBet.
unfold BetH in *.
elim (bet_dec A B C).
intro HBet.
elim (eq_dec_points A B).
intro HAB.
elim (eq_dec_points B C).
intro HBC.

*****
HBC : eq B C
HAB : not (eq A B)
HBet : Bet A B C
HNNBet : not (not (and (Bet A B C) (and (not (eq A B)) (not (eq B C)))))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Bet A B C) (and (not (eq A B)) (not (eq B C)))
+++++
subst.
-----
Lemma bet_stability : forall A B C, ~ ~ BetH A B C -> BetH A B C.
Proof.
intros A B C HNNBet.
unfold BetH in *.
elim (bet_dec A B C).
intro HBet.
elim (eq_dec_points A B).
intro HAB.
elim (eq_dec_points B C).
intro HBC.
subst.

*****
HNNBet : not (not (and (Bet A C C) (and (not (eq A C)) (not (eq C C)))))
HBet : Bet A C C
HAB : not (eq A C)
A,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Bet A C C) (and (not (eq A C)) (not (eq C C)))
+++++
exfalso.
-----
Lemma bet_stability : forall A B C, ~ ~ BetH A B C -> BetH A B C.
Proof.
intros A B C HNNBet.
unfold BetH in *.
elim (bet_dec A B C).
intro HBet.
elim (eq_dec_points A B).
intro HAB.
elim (eq_dec_points B C).
intro HBC.
subst.
exfalso.

*****
HNNBet : not (not (and (Bet A C C) (and (not (eq A C)) (not (eq C C)))))
HBet : Bet A C C
HAB : not (eq A C)
A,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply HNNBet.
-----
Lemma bet_stability : forall A B C, ~ ~ BetH A B C -> BetH A B C.
Proof.
intros A B C HNNBet.
unfold BetH in *.
elim (bet_dec A B C).
intro HBet.
elim (eq_dec_points A B).
intro HAB.
elim (eq_dec_points B C).
intro HBC.
subst.
exfalso.
apply HNNBet.

*****
HNNBet : not (not (and (Bet A C C) (and (not (eq A C)) (not (eq C C)))))
HBet : Bet A C C
HAB : not (eq A C)
A,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (and (Bet A C C) (and (not (eq A C)) (not (eq C C))))
+++++
intro.
-----
Lemma bet_stability : forall A B C, ~ ~ BetH A B C -> BetH A B C.
Proof.
intros A B C HNNBet.
unfold BetH in *.
elim (bet_dec A B C).
intro HBet.
elim (eq_dec_points A B).
intro HAB.
elim (eq_dec_points B C).
intro HBC.
subst.
exfalso.
apply HNNBet.
intro.

*****
H : and (Bet A C C) (and (not (eq A C)) (not (eq C C)))
HNNBet : not (not (and (Bet A C C) (and (not (eq A C)) (not (eq C C)))))
HBet : Bet A C C
HAB : not (eq A C)
A,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
spliter.
-----
Lemma bet_stability : forall A B C, ~ ~ BetH A B C -> BetH A B C.
Proof.
intros A B C HNNBet.
unfold BetH in *.
elim (bet_dec A B C).
intro HBet.
elim (eq_dec_points A B).
intro HAB.
elim (eq_dec_points B C).
intro HBC.
subst.
exfalso.
apply HNNBet.
intro.
spliter.

*****
H1 : not (eq C C)
H0 : not (eq A C)
H : Bet A C C
HNNBet : not (not (and (Bet A C C) (and (not (eq A C)) (not (eq C C)))))
HBet : Bet A C C
HAB : not (eq A C)
A,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
intuition.
-----
Lemma bet_stability : forall A B C, ~ ~ BetH A B C -> BetH A B C.
Proof.
intros A B C HNNBet.
unfold BetH in *.
elim (bet_dec A B C).
intro HBet.
elim (eq_dec_points A B).
intro HAB.
elim (eq_dec_points B C).

*****
HAB : not (eq A B)
HBet : Bet A B C
HNNBet : not (not (and (Bet A B C) (and (not (eq A B)) (not (eq B C)))))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : not (eq B C), and (Bet A B C) (and (not (eq A B)) (not (eq B C)))
+++++
intro HBC.
-----
Lemma bet_stability : forall A B C, ~ ~ BetH A B C -> BetH A B C.
Proof.
intros A B C HNNBet.
unfold BetH in *.
elim (bet_dec A B C).
intro HBet.
elim (eq_dec_points A B).
intro HAB.
elim (eq_dec_points B C).
intro HBC.

*****
HBC : not (eq B C)
HAB : not (eq A B)
HBet : Bet A B C
HNNBet : not (not (and (Bet A B C) (and (not (eq A B)) (not (eq B C)))))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Bet A B C) (and (not (eq A B)) (not (eq B C)))
+++++
repeat split.
-----
Lemma bet_stability : forall A B C, ~ ~ BetH A B C -> BetH A B C.
Proof.
intros A B C HNNBet.
unfold BetH in *.
elim (bet_dec A B C).
intro HBet.
elim (eq_dec_points A B).
intro HAB.
elim (eq_dec_points B C).
intro HBC.
repeat split.

*****
HBC : not (eq B C)
HAB : not (eq A B)
HBet : Bet A B C
HNNBet : not (not (and (Bet A B C) (and (not (eq A B)) (not (eq B C)))))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet A B C
+++++
assumption.
-----
Lemma bet_stability : forall A B C, ~ ~ BetH A B C -> BetH A B C.
Proof.
intros A B C HNNBet.
unfold BetH in *.
elim (bet_dec A B C).
intro HBet.
elim (eq_dec_points A B).
intro HAB.
elim (eq_dec_points B C).
intro HBC.
repeat split.

*****
HBC : not (eq B C)
HAB : not (eq A B)
HBet : Bet A B C
HNNBet : not (not (and (Bet A B C) (and (not (eq A B)) (not (eq B C)))))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq A B)
+++++
assumption.
-----
Lemma bet_stability : forall A B C, ~ ~ BetH A B C -> BetH A B C.
Proof.
intros A B C HNNBet.
unfold BetH in *.
elim (bet_dec A B C).
intro HBet.
elim (eq_dec_points A B).
intro HAB.
elim (eq_dec_points B C).
intro HBC.
repeat split.

*****
HBC : not (eq B C)
HAB : not (eq A B)
HBet : Bet A B C
HNNBet : not (not (and (Bet A B C) (and (not (eq A B)) (not (eq B C)))))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq B C)
+++++
assumption.
-----
Lemma bet_stability : forall A B C, ~ ~ BetH A B C -> BetH A B C.
Proof.
intros A B C HNNBet.
unfold BetH in *.
elim (bet_dec A B C).

*****
HNNBet : not (not (and (Bet A B C) (and (not (eq A B)) (not (eq B C)))))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : not (Bet A B C), and (Bet A B C) (and (not (eq A B)) (not (eq B C)))
+++++
intro HBet.
-----
Lemma bet_stability : forall A B C, ~ ~ BetH A B C -> BetH A B C.
Proof.
intros A B C HNNBet.
unfold BetH in *.
elim (bet_dec A B C).
intro HBet.

*****
HBet : not (Bet A B C)
HNNBet : not (not (and (Bet A B C) (and (not (eq A B)) (not (eq B C)))))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Bet A B C) (and (not (eq A B)) (not (eq B C)))
+++++
elim (eq_dec_points A B).
-----
Lemma bet_stability : forall A B C, ~ ~ BetH A B C -> BetH A B C.
Proof.
intros A B C HNNBet.
unfold BetH in *.
elim (bet_dec A B C).
intro HBet.
elim (eq_dec_points A B).

*****
HBet : not (Bet A B C)
HNNBet : not (not (and (Bet A B C) (and (not (eq A B)) (not (eq B C)))))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : eq A B, and (Bet A B C) (and (not (eq A B)) (not (eq B C)))
+++++
intro HAB.
-----
Lemma bet_stability : forall A B C, ~ ~ BetH A B C -> BetH A B C.
Proof.
intros A B C HNNBet.
unfold BetH in *.
elim (bet_dec A B C).
intro HBet.
elim (eq_dec_points A B).
intro HAB.

*****
HAB : eq A B
HBet : not (Bet A B C)
HNNBet : not (not (and (Bet A B C) (and (not (eq A B)) (not (eq B C)))))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Bet A B C) (and (not (eq A B)) (not (eq B C)))
+++++
elim (eq_dec_points B C).
-----
Lemma bet_stability : forall A B C, ~ ~ BetH A B C -> BetH A B C.
Proof.
intros A B C HNNBet.
unfold BetH in *.
elim (bet_dec A B C).
intro HBet.
elim (eq_dec_points A B).
intro HAB.
elim (eq_dec_points B C).

*****
HAB : eq A B
HBet : not (Bet A B C)
HNNBet : not (not (and (Bet A B C) (and (not (eq A B)) (not (eq B C)))))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : eq B C, and (Bet A B C) (and (not (eq A B)) (not (eq B C)))
+++++
intro HBC.
-----
Lemma bet_stability : forall A B C, ~ ~ BetH A B C -> BetH A B C.
Proof.
intros A B C HNNBet.
unfold BetH in *.
elim (bet_dec A B C).
intro HBet.
elim (eq_dec_points A B).
intro HAB.
elim (eq_dec_points B C).
intro HBC.

*****
HBC : eq B C
HAB : eq A B
HBet : not (Bet A B C)
HNNBet : not (not (and (Bet A B C) (and (not (eq A B)) (not (eq B C)))))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Bet A B C) (and (not (eq A B)) (not (eq B C)))
+++++
exfalso.
-----
Lemma bet_stability : forall A B C, ~ ~ BetH A B C -> BetH A B C.
Proof.
intros A B C HNNBet.
unfold BetH in *.
elim (bet_dec A B C).
intro HBet.
elim (eq_dec_points A B).
intro HAB.
elim (eq_dec_points B C).
intro HBC.
exfalso.

*****
HBC : eq B C
HAB : eq A B
HBet : not (Bet A B C)
HNNBet : not (not (and (Bet A B C) (and (not (eq A B)) (not (eq B C)))))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply HNNBet.
-----
Lemma bet_stability : forall A B C, ~ ~ BetH A B C -> BetH A B C.
Proof.
intros A B C HNNBet.
unfold BetH in *.
elim (bet_dec A B C).
intro HBet.
elim (eq_dec_points A B).
intro HAB.
elim (eq_dec_points B C).
intro HBC.
exfalso.
apply HNNBet.

*****
HBC : eq B C
HAB : eq A B
HBet : not (Bet A B C)
HNNBet : not (not (and (Bet A B C) (and (not (eq A B)) (not (eq B C)))))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (and (Bet A B C) (and (not (eq A B)) (not (eq B C))))
+++++
intro.
-----
Lemma bet_stability : forall A B C, ~ ~ BetH A B C -> BetH A B C.
Proof.
intros A B C HNNBet.
unfold BetH in *.
elim (bet_dec A B C).
intro HBet.
elim (eq_dec_points A B).
intro HAB.
elim (eq_dec_points B C).
intro HBC.
exfalso.
apply HNNBet.
intro.

*****
H : and (Bet A B C) (and (not (eq A B)) (not (eq B C)))
HBC : eq B C
HAB : eq A B
HBet : not (Bet A B C)
HNNBet : not (not (and (Bet A B C) (and (not (eq A B)) (not (eq B C)))))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
spliter.
-----
Lemma bet_stability : forall A B C, ~ ~ BetH A B C -> BetH A B C.
Proof.
intros A B C HNNBet.
unfold BetH in *.
elim (bet_dec A B C).
intro HBet.
elim (eq_dec_points A B).
intro HAB.
elim (eq_dec_points B C).
intro HBC.
exfalso.
apply HNNBet.
intro.
spliter.

*****
H1 : not (eq B C)
H0 : not (eq A B)
H : Bet A B C
HBC : eq B C
HAB : eq A B
HBet : not (Bet A B C)
HNNBet : not (not (and (Bet A B C) (and (not (eq A B)) (not (eq B C)))))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
contradiction.
-----
Lemma bet_stability : forall A B C, ~ ~ BetH A B C -> BetH A B C.
Proof.
intros A B C HNNBet.
unfold BetH in *.
elim (bet_dec A B C).
intro HBet.
elim (eq_dec_points A B).
intro HAB.
elim (eq_dec_points B C).

*****
HAB : eq A B
HBet : not (Bet A B C)
HNNBet : not (not (and (Bet A B C) (and (not (eq A B)) (not (eq B C)))))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : not (eq B C), and (Bet A B C) (and (not (eq A B)) (not (eq B C)))
+++++
intro HBC.
-----
Lemma bet_stability : forall A B C, ~ ~ BetH A B C -> BetH A B C.
Proof.
intros A B C HNNBet.
unfold BetH in *.
elim (bet_dec A B C).
intro HBet.
elim (eq_dec_points A B).
intro HAB.
elim (eq_dec_points B C).
intro HBC.

*****
HBC : not (eq B C)
HAB : eq A B
HBet : not (Bet A B C)
HNNBet : not (not (and (Bet A B C) (and (not (eq A B)) (not (eq B C)))))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Bet A B C) (and (not (eq A B)) (not (eq B C)))
+++++
exfalso.
-----
Lemma bet_stability : forall A B C, ~ ~ BetH A B C -> BetH A B C.
Proof.
intros A B C HNNBet.
unfold BetH in *.
elim (bet_dec A B C).
intro HBet.
elim (eq_dec_points A B).
intro HAB.
elim (eq_dec_points B C).
intro HBC.
exfalso.

*****
HBC : not (eq B C)
HAB : eq A B
HBet : not (Bet A B C)
HNNBet : not (not (and (Bet A B C) (and (not (eq A B)) (not (eq B C)))))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply HNNBet.
-----
Lemma bet_stability : forall A B C, ~ ~ BetH A B C -> BetH A B C.
Proof.
intros A B C HNNBet.
unfold BetH in *.
elim (bet_dec A B C).
intro HBet.
elim (eq_dec_points A B).
intro HAB.
elim (eq_dec_points B C).
intro HBC.
exfalso.
apply HNNBet.

*****
HBC : not (eq B C)
HAB : eq A B
HBet : not (Bet A B C)
HNNBet : not (not (and (Bet A B C) (and (not (eq A B)) (not (eq B C)))))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (and (Bet A B C) (and (not (eq A B)) (not (eq B C))))
+++++
intro.
-----
Lemma bet_stability : forall A B C, ~ ~ BetH A B C -> BetH A B C.
Proof.
intros A B C HNNBet.
unfold BetH in *.
elim (bet_dec A B C).
intro HBet.
elim (eq_dec_points A B).
intro HAB.
elim (eq_dec_points B C).
intro HBC.
exfalso.
apply HNNBet.
intro.

*****
H : and (Bet A B C) (and (not (eq A B)) (not (eq B C)))
HBC : not (eq B C)
HAB : eq A B
HBet : not (Bet A B C)
HNNBet : not (not (and (Bet A B C) (and (not (eq A B)) (not (eq B C)))))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
spliter.
-----
Lemma bet_stability : forall A B C, ~ ~ BetH A B C -> BetH A B C.
Proof.
intros A B C HNNBet.
unfold BetH in *.
elim (bet_dec A B C).
intro HBet.
elim (eq_dec_points A B).
intro HAB.
elim (eq_dec_points B C).
intro HBC.
exfalso.
apply HNNBet.
intro.
spliter.

*****
H1 : not (eq B C)
H0 : not (eq A B)
H : Bet A B C
HBC : not (eq B C)
HAB : eq A B
HBet : not (Bet A B C)
HNNBet : not (not (and (Bet A B C) (and (not (eq A B)) (not (eq B C)))))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
contradiction.
-----
Lemma bet_stability : forall A B C, ~ ~ BetH A B C -> BetH A B C.
Proof.
intros A B C HNNBet.
unfold BetH in *.
elim (bet_dec A B C).
intro HBet.
elim (eq_dec_points A B).

*****
HBet : not (Bet A B C)
HNNBet : not (not (and (Bet A B C) (and (not (eq A B)) (not (eq B C)))))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : not (eq A B), and (Bet A B C) (and (not (eq A B)) (not (eq B C)))
+++++
intro HAB.
-----
Lemma bet_stability : forall A B C, ~ ~ BetH A B C -> BetH A B C.
Proof.
intros A B C HNNBet.
unfold BetH in *.
elim (bet_dec A B C).
intro HBet.
elim (eq_dec_points A B).
intro HAB.

*****
HAB : not (eq A B)
HBet : not (Bet A B C)
HNNBet : not (not (and (Bet A B C) (and (not (eq A B)) (not (eq B C)))))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Bet A B C) (and (not (eq A B)) (not (eq B C)))
+++++
elim (eq_dec_points B C).
-----
Lemma bet_stability : forall A B C, ~ ~ BetH A B C -> BetH A B C.
Proof.
intros A B C HNNBet.
unfold BetH in *.
elim (bet_dec A B C).
intro HBet.
elim (eq_dec_points A B).
intro HAB.
elim (eq_dec_points B C).

*****
HAB : not (eq A B)
HBet : not (Bet A B C)
HNNBet : not (not (and (Bet A B C) (and (not (eq A B)) (not (eq B C)))))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : eq B C, and (Bet A B C) (and (not (eq A B)) (not (eq B C)))
+++++
intro HBC.
-----
Lemma bet_stability : forall A B C, ~ ~ BetH A B C -> BetH A B C.
Proof.
intros A B C HNNBet.
unfold BetH in *.
elim (bet_dec A B C).
intro HBet.
elim (eq_dec_points A B).
intro HAB.
elim (eq_dec_points B C).
intro HBC.

*****
HBC : eq B C
HAB : not (eq A B)
HBet : not (Bet A B C)
HNNBet : not (not (and (Bet A B C) (and (not (eq A B)) (not (eq B C)))))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Bet A B C) (and (not (eq A B)) (not (eq B C)))
+++++
exfalso.
-----
Lemma bet_stability : forall A B C, ~ ~ BetH A B C -> BetH A B C.
Proof.
intros A B C HNNBet.
unfold BetH in *.
elim (bet_dec A B C).
intro HBet.
elim (eq_dec_points A B).
intro HAB.
elim (eq_dec_points B C).
intro HBC.
exfalso.

*****
HBC : eq B C
HAB : not (eq A B)
HBet : not (Bet A B C)
HNNBet : not (not (and (Bet A B C) (and (not (eq A B)) (not (eq B C)))))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply HNNBet.
-----
Lemma bet_stability : forall A B C, ~ ~ BetH A B C -> BetH A B C.
Proof.
intros A B C HNNBet.
unfold BetH in *.
elim (bet_dec A B C).
intro HBet.
elim (eq_dec_points A B).
intro HAB.
elim (eq_dec_points B C).
intro HBC.
exfalso.
apply HNNBet.

*****
HBC : eq B C
HAB : not (eq A B)
HBet : not (Bet A B C)
HNNBet : not (not (and (Bet A B C) (and (not (eq A B)) (not (eq B C)))))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (and (Bet A B C) (and (not (eq A B)) (not (eq B C))))
+++++
intro.
-----
Lemma bet_stability : forall A B C, ~ ~ BetH A B C -> BetH A B C.
Proof.
intros A B C HNNBet.
unfold BetH in *.
elim (bet_dec A B C).
intro HBet.
elim (eq_dec_points A B).
intro HAB.
elim (eq_dec_points B C).
intro HBC.
exfalso.
apply HNNBet.
intro.

*****
H : and (Bet A B C) (and (not (eq A B)) (not (eq B C)))
HBC : eq B C
HAB : not (eq A B)
HBet : not (Bet A B C)
HNNBet : not (not (and (Bet A B C) (and (not (eq A B)) (not (eq B C)))))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
spliter.
-----
Lemma bet_stability : forall A B C, ~ ~ BetH A B C -> BetH A B C.
Proof.
intros A B C HNNBet.
unfold BetH in *.
elim (bet_dec A B C).
intro HBet.
elim (eq_dec_points A B).
intro HAB.
elim (eq_dec_points B C).
intro HBC.
exfalso.
apply HNNBet.
intro.
spliter.

*****
H1 : not (eq B C)
H0 : not (eq A B)
H : Bet A B C
HBC : eq B C
HAB : not (eq A B)
HBet : not (Bet A B C)
HNNBet : not (not (and (Bet A B C) (and (not (eq A B)) (not (eq B C)))))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
contradiction.
-----
Lemma bet_stability : forall A B C, ~ ~ BetH A B C -> BetH A B C.
Proof.
intros A B C HNNBet.
unfold BetH in *.
elim (bet_dec A B C).
intro HBet.
elim (eq_dec_points A B).
intro HAB.
elim (eq_dec_points B C).

*****
HAB : not (eq A B)
HBet : not (Bet A B C)
HNNBet : not (not (and (Bet A B C) (and (not (eq A B)) (not (eq B C)))))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : not (eq B C), and (Bet A B C) (and (not (eq A B)) (not (eq B C)))
+++++
intro HBC.
-----
Lemma bet_stability : forall A B C, ~ ~ BetH A B C -> BetH A B C.
Proof.
intros A B C HNNBet.
unfold BetH in *.
elim (bet_dec A B C).
intro HBet.
elim (eq_dec_points A B).
intro HAB.
elim (eq_dec_points B C).
intro HBC.

*****
HBC : not (eq B C)
HAB : not (eq A B)
HBet : not (Bet A B C)
HNNBet : not (not (and (Bet A B C) (and (not (eq A B)) (not (eq B C)))))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Bet A B C) (and (not (eq A B)) (not (eq B C)))
+++++
exfalso.
-----
Lemma bet_stability : forall A B C, ~ ~ BetH A B C -> BetH A B C.
Proof.
intros A B C HNNBet.
unfold BetH in *.
elim (bet_dec A B C).
intro HBet.
elim (eq_dec_points A B).
intro HAB.
elim (eq_dec_points B C).
intro HBC.
exfalso.

*****
HBC : not (eq B C)
HAB : not (eq A B)
HBet : not (Bet A B C)
HNNBet : not (not (and (Bet A B C) (and (not (eq A B)) (not (eq B C)))))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply HNNBet.
-----
Lemma bet_stability : forall A B C, ~ ~ BetH A B C -> BetH A B C.
Proof.
intros A B C HNNBet.
unfold BetH in *.
elim (bet_dec A B C).
intro HBet.
elim (eq_dec_points A B).
intro HAB.
elim (eq_dec_points B C).
intro HBC.
exfalso.
apply HNNBet.

*****
HBC : not (eq B C)
HAB : not (eq A B)
HBet : not (Bet A B C)
HNNBet : not (not (and (Bet A B C) (and (not (eq A B)) (not (eq B C)))))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (and (Bet A B C) (and (not (eq A B)) (not (eq B C))))
+++++
intro.
-----
Lemma bet_stability : forall A B C, ~ ~ BetH A B C -> BetH A B C.
Proof.
intros A B C HNNBet.
unfold BetH in *.
elim (bet_dec A B C).
intro HBet.
elim (eq_dec_points A B).
intro HAB.
elim (eq_dec_points B C).
intro HBC.
exfalso.
apply HNNBet.
intro.

*****
H : and (Bet A B C) (and (not (eq A B)) (not (eq B C)))
HBC : not (eq B C)
HAB : not (eq A B)
HBet : not (Bet A B C)
HNNBet : not (not (and (Bet A B C) (and (not (eq A B)) (not (eq B C)))))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
spliter.
-----
Lemma bet_stability : forall A B C, ~ ~ BetH A B C -> BetH A B C.
Proof.
intros A B C HNNBet.
unfold BetH in *.
elim (bet_dec A B C).
intro HBet.
elim (eq_dec_points A B).
intro HAB.
elim (eq_dec_points B C).
intro HBC.
exfalso.
apply HNNBet.
intro.
spliter.

*****
H1 : not (eq B C)
H0 : not (eq A B)
H : Bet A B C
HBC : not (eq B C)
HAB : not (eq A B)
HBet : not (Bet A B C)
HNNBet : not (not (and (Bet A B C) (and (not (eq A B)) (not (eq B C)))))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
contradiction.
-----
Lemma bet_stability : forall A B C, ~ ~ BetH A B C -> BetH A B C.
Proof.
intros A B C HNNBet.
unfold BetH in *.
elim (bet_dec A B C).

*****

*****

+++++
Qed.
-----
Definition T A B C : Prop := ~ (A<>B /\ B<>C /\ ~ BetH A B C).
-----
Definition ColB A B C := ~ (~ T C A B /\ ~ T A C B /\ ~ T A B C).
-----
Lemma between_identity_B : forall A B, ~ BetH A B A.
-----
Lemma between_identity_B : forall A B, ~ BetH A B A.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall A B : Tpoint, not (BetH A B A)
+++++
Proof.
-----
Lemma between_identity_B : forall A B, ~ BetH A B A.
Proof.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall A B : Tpoint, not (BetH A B A)
+++++
intros A B HNBet.
-----
Lemma between_identity_B : forall A B, ~ BetH A B A.
Proof.
intros A B HNBet.

*****
HNBet : BetH A B A
A,B : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
unfold BetH in *.
-----
Lemma between_identity_B : forall A B, ~ BetH A B A.
Proof.
intros A B HNBet.
unfold BetH in *.

*****
HNBet : and (Bet A B A) (and (not (eq A B)) (not (eq B A)))
A,B : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
destruct HNBet as [HBet [HAB HBA]].
-----
Lemma between_identity_B : forall A B, ~ BetH A B A.
Proof.
intros A B HNBet.
unfold BetH in *.
destruct HNBet as [HBet [HAB HBA]].

*****
HBA : not (eq B A)
HAB : not (eq A B)
HBet : Bet A B A
A,B : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply between_identity in HBet.
-----
Lemma between_identity_B : forall A B, ~ BetH A B A.
Proof.
intros A B HNBet.
unfold BetH in *.
destruct HNBet as [HBet [HAB HBA]].
apply between_identity in HBet.

*****
HBA : not (eq B A)
HAB : not (eq A B)
HBet : eq A B
A,B : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
subst.
-----
Lemma between_identity_B : forall A B, ~ BetH A B A.
Proof.
intros A B HNBet.
unfold BetH in *.
destruct HNBet as [HBet [HAB HBA]].
apply between_identity in HBet.
subst.

*****
HBA,HAB : not (eq B B)
B : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
intuition.
-----
Lemma between_identity_B : forall A B, ~ BetH A B A.
Proof.
intros A B HNBet.
unfold BetH in *.
destruct HNBet as [HBet [HAB HBA]].
apply between_identity in HBet.
subst.
intuition.

*****

*****

+++++
Qed.
-----
Lemma Bet_T : forall A B C, Bet A B C -> T A B C.
-----
Lemma Bet_T : forall A B C, Bet A B C -> T A B C.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C : Tpoint) (_ : Bet A B C), T A B C
+++++
Proof.
-----
Lemma Bet_T : forall A B C, Bet A B C -> T A B C.
Proof.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C : Tpoint) (_ : Bet A B C), T A B C
+++++
intros A B C HBet.
-----
Lemma Bet_T : forall A B C, Bet A B C -> T A B C.
Proof.
intros A B C HBet.

*****
HBet : Bet A B C
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
T A B C
+++++
unfold T.
-----
Lemma Bet_T : forall A B C, Bet A B C -> T A B C.
Proof.
intros A B C HBet.
unfold T.

*****
HBet : Bet A B C
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (and (not (eq A B)) (and (not (eq B C)) (not (BetH A B C))))
+++++
intro HT.
-----
Lemma Bet_T : forall A B C, Bet A B C -> T A B C.
Proof.
intros A B C HBet.
unfold T.
intro HT.

*****
HT : and (not (eq A B)) (and (not (eq B C)) (not (BetH A B C)))
HBet : Bet A B C
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
destruct HT as [HAB [HBC HNBet]].
-----
Lemma Bet_T : forall A B C, Bet A B C -> T A B C.
Proof.
intros A B C HBet.
unfold T.
intro HT.
destruct HT as [HAB [HBC HNBet]].

*****
HNBet : not (BetH A B C)
HBC : not (eq B C)
HAB : not (eq A B)
HBet : Bet A B C
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply HNBet.
-----
Lemma Bet_T : forall A B C, Bet A B C -> T A B C.
Proof.
intros A B C HBet.
unfold T.
intro HT.
destruct HT as [HAB [HBC HNBet]].
apply HNBet.

*****
HNBet : not (BetH A B C)
HBC : not (eq B C)
HAB : not (eq A B)
HBet : Bet A B C
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
BetH A B C
+++++
unfold BetH.
-----
Lemma Bet_T : forall A B C, Bet A B C -> T A B C.
Proof.
intros A B C HBet.
unfold T.
intro HT.
destruct HT as [HAB [HBC HNBet]].
apply HNBet.
unfold BetH.

*****
HNBet : not (BetH A B C)
HBC : not (eq B C)
HAB : not (eq A B)
HBet : Bet A B C
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Bet A B C) (and (not (eq A B)) (not (eq B C)))
+++++
intuition.
-----
Lemma Bet_T : forall A B C, Bet A B C -> T A B C.
Proof.
intros A B C HBet.
unfold T.
intro HT.
destruct HT as [HAB [HBC HNBet]].
apply HNBet.
unfold BetH.
intuition.

*****

*****

+++++
Qed.
-----
Lemma BetH_Bet : forall A B C, BetH A B C -> Bet A B C.
-----
Lemma BetH_Bet : forall A B C, BetH A B C -> Bet A B C.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C : Tpoint) (_ : BetH A B C), Bet A B C
+++++
Proof.
-----
Lemma BetH_Bet : forall A B C, BetH A B C -> Bet A B C.
Proof.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C : Tpoint) (_ : BetH A B C), Bet A B C
+++++
unfold BetH.
-----
Lemma BetH_Bet : forall A B C, BetH A B C -> Bet A B C.
Proof.
unfold BetH.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C : Tpoint) (_ : and (Bet A B C) (and (not (eq A B)) (not (eq B C)))), Bet A B C
+++++
intuition.
-----
Lemma BetH_Bet : forall A B C, BetH A B C -> Bet A B C.
Proof.
unfold BetH.
intuition.

*****

*****

+++++
Qed.
-----
Lemma T_Bet : forall A B C, T A B C -> Bet A B C.
-----
Lemma T_Bet : forall A B C, T A B C -> Bet A B C.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C : Tpoint) (_ : T A B C), Bet A B C
+++++
Proof.
-----
Lemma T_Bet : forall A B C, T A B C -> Bet A B C.
Proof.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C : Tpoint) (_ : T A B C), Bet A B C
+++++
intros A B C HT.
-----
Lemma T_Bet : forall A B C, T A B C -> Bet A B C.
Proof.
intros A B C HT.

*****
HT : T A B C
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet A B C
+++++
unfold T in HT.
-----
Lemma T_Bet : forall A B C, T A B C -> Bet A B C.
Proof.
intros A B C HT.
unfold T in HT.

*****
HT : not (and (not (eq A B)) (and (not (eq B C)) (not (BetH A B C))))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet A B C
+++++
elim (bet_dec A B C).
-----
Lemma T_Bet : forall A B C, T A B C -> Bet A B C.
Proof.
intros A B C HT.
unfold T in HT.
elim (bet_dec A B C).

*****
HT : not (and (not (eq A B)) (and (not (eq B C)) (not (BetH A B C))))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : Bet A B C, Bet A B C
+++++
intro HBet.
-----
Lemma T_Bet : forall A B C, T A B C -> Bet A B C.
Proof.
intros A B C HT.
unfold T in HT.
elim (bet_dec A B C).
intro HBet.

*****
HBet : Bet A B C
HT : not (and (not (eq A B)) (and (not (eq B C)) (not (BetH A B C))))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet A B C
+++++
assumption.
-----
Lemma T_Bet : forall A B C, T A B C -> Bet A B C.
Proof.
intros A B C HT.
unfold T in HT.
elim (bet_dec A B C).

*****
HT : not (and (not (eq A B)) (and (not (eq B C)) (not (BetH A B C))))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : not (Bet A B C), Bet A B C
+++++
intro HBet.
-----
Lemma T_Bet : forall A B C, T A B C -> Bet A B C.
Proof.
intros A B C HT.
unfold T in HT.
elim (bet_dec A B C).
intro HBet.

*****
HBet : not (Bet A B C)
HT : not (and (not (eq A B)) (and (not (eq B C)) (not (BetH A B C))))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet A B C
+++++
exfalso.
-----
Lemma T_Bet : forall A B C, T A B C -> Bet A B C.
Proof.
intros A B C HT.
unfold T in HT.
elim (bet_dec A B C).
intro HBet.
exfalso.

*****
HBet : not (Bet A B C)
HT : not (and (not (eq A B)) (and (not (eq B C)) (not (BetH A B C))))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply HT.
-----
Lemma T_Bet : forall A B C, T A B C -> Bet A B C.
Proof.
intros A B C HT.
unfold T in HT.
elim (bet_dec A B C).
intro HBet.
exfalso.
apply HT.

*****
HBet : not (Bet A B C)
HT : not (and (not (eq A B)) (and (not (eq B C)) (not (BetH A B C))))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (not (eq A B)) (and (not (eq B C)) (not (BetH A B C)))
+++++
split.
-----
Lemma T_Bet : forall A B C, T A B C -> Bet A B C.
Proof.
intros A B C HT.
unfold T in HT.
elim (bet_dec A B C).
intro HBet.
exfalso.
apply HT.
split.

*****
HBet : not (Bet A B C)
HT : not (and (not (eq A B)) (and (not (eq B C)) (not (BetH A B C))))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq A B)
+++++
intro.
-----
Lemma T_Bet : forall A B C, T A B C -> Bet A B C.
Proof.
intros A B C HT.
unfold T in HT.
elim (bet_dec A B C).
intro HBet.
exfalso.
apply HT.
split.
intro.

*****
H : eq A B
HBet : not (Bet A B C)
HT : not (and (not (eq A B)) (and (not (eq B C)) (not (BetH A B C))))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
subst.
-----
Lemma T_Bet : forall A B C, T A B C -> Bet A B C.
Proof.
intros A B C HT.
unfold T in HT.
elim (bet_dec A B C).
intro HBet.
exfalso.
apply HT.
split.
intro.
subst.

*****
HT : not (and (not (eq B B)) (and (not (eq B C)) (not (BetH B B C))))
HBet : not (Bet B B C)
B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply HBet.
-----
Lemma T_Bet : forall A B C, T A B C -> Bet A B C.
Proof.
intros A B C HT.
unfold T in HT.
elim (bet_dec A B C).
intro HBet.
exfalso.
apply HT.
split.
intro.
subst.
apply HBet.

*****
HT : not (and (not (eq B B)) (and (not (eq B C)) (not (BetH B B C))))
HBet : not (Bet B B C)
B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet B B C
+++++
apply between_trivial2.
-----
Lemma T_Bet : forall A B C, T A B C -> Bet A B C.
Proof.
intros A B C HT.
unfold T in HT.
elim (bet_dec A B C).
intro HBet.
exfalso.
apply HT.
split.

*****
HBet : not (Bet A B C)
HT : not (and (not (eq A B)) (and (not (eq B C)) (not (BetH A B C))))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (not (eq B C)) (not (BetH A B C))
+++++
split.
-----
Lemma T_Bet : forall A B C, T A B C -> Bet A B C.
Proof.
intros A B C HT.
unfold T in HT.
elim (bet_dec A B C).
intro HBet.
exfalso.
apply HT.
split.
split.

*****
HBet : not (Bet A B C)
HT : not (and (not (eq A B)) (and (not (eq B C)) (not (BetH A B C))))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq B C)
+++++
intro.
-----
Lemma T_Bet : forall A B C, T A B C -> Bet A B C.
Proof.
intros A B C HT.
unfold T in HT.
elim (bet_dec A B C).
intro HBet.
exfalso.
apply HT.
split.
split.
intro.

*****
H : eq B C
HBet : not (Bet A B C)
HT : not (and (not (eq A B)) (and (not (eq B C)) (not (BetH A B C))))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
subst.
-----
Lemma T_Bet : forall A B C, T A B C -> Bet A B C.
Proof.
intros A B C HT.
unfold T in HT.
elim (bet_dec A B C).
intro HBet.
exfalso.
apply HT.
split.
split.
intro.
subst.

*****
HT : not (and (not (eq A C)) (and (not (eq C C)) (not (BetH A C C))))
HBet : not (Bet A C C)
A,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply HBet.
-----
Lemma T_Bet : forall A B C, T A B C -> Bet A B C.
Proof.
intros A B C HT.
unfold T in HT.
elim (bet_dec A B C).
intro HBet.
exfalso.
apply HT.
split.
split.
intro.
subst.
apply HBet.

*****
HT : not (and (not (eq A C)) (and (not (eq C C)) (not (BetH A C C))))
HBet : not (Bet A C C)
A,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet A C C
+++++
apply between_trivial.
-----
Lemma T_Bet : forall A B C, T A B C -> Bet A B C.
Proof.
intros A B C HT.
unfold T in HT.
elim (bet_dec A B C).
intro HBet.
exfalso.
apply HT.
split.
split.

*****
HBet : not (Bet A B C)
HT : not (and (not (eq A B)) (and (not (eq B C)) (not (BetH A B C))))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (BetH A B C)
+++++
intro HBetH.
-----
Lemma T_Bet : forall A B C, T A B C -> Bet A B C.
Proof.
intros A B C HT.
unfold T in HT.
elim (bet_dec A B C).
intro HBet.
exfalso.
apply HT.
split.
split.
intro HBetH.

*****
HBetH : BetH A B C
HBet : not (Bet A B C)
HT : not (and (not (eq A B)) (and (not (eq B C)) (not (BetH A B C))))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply HBet.
-----
Lemma T_Bet : forall A B C, T A B C -> Bet A B C.
Proof.
intros A B C HT.
unfold T in HT.
elim (bet_dec A B C).
intro HBet.
exfalso.
apply HT.
split.
split.
intro HBetH.
apply HBet.

*****
HBetH : BetH A B C
HBet : not (Bet A B C)
HT : not (and (not (eq A B)) (and (not (eq B C)) (not (BetH A B C))))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet A B C
+++++
apply BetH_Bet in HBetH.
-----
Lemma T_Bet : forall A B C, T A B C -> Bet A B C.
Proof.
intros A B C HT.
unfold T in HT.
elim (bet_dec A B C).
intro HBet.
exfalso.
apply HT.
split.
split.
intro HBetH.
apply HBet.
apply BetH_Bet in HBetH.

*****
HBetH : Bet A B C
HBet : not (Bet A B C)
HT : not (and (not (eq A B)) (and (not (eq B C)) (not (BetH A B C))))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet A B C
+++++
assumption.
-----
Lemma T_Bet : forall A B C, T A B C -> Bet A B C.
Proof.
intros A B C HT.
unfold T in HT.
elim (bet_dec A B C).

*****

*****

+++++
Qed.
-----
Lemma NT_NBet : forall A B C, ~ T A B C -> ~ Bet A B C.
-----
Lemma NT_NBet : forall A B C, ~ T A B C -> ~ Bet A B C.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C : Tpoint) (_ : not (T A B C)), not (Bet A B C)
+++++
Proof.
-----
Lemma NT_NBet : forall A B C, ~ T A B C -> ~ Bet A B C.
Proof.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C : Tpoint) (_ : not (T A B C)), not (Bet A B C)
+++++
intros A B C HNT.
-----
Lemma NT_NBet : forall A B C, ~ T A B C -> ~ Bet A B C.
Proof.
intros A B C HNT.

*****
HNT : not (T A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Bet A B C)
+++++
intro HNBet.
-----
Lemma NT_NBet : forall A B C, ~ T A B C -> ~ Bet A B C.
Proof.
intros A B C HNT.
intro HNBet.

*****
HNBet : Bet A B C
HNT : not (T A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply HNT.
-----
Lemma NT_NBet : forall A B C, ~ T A B C -> ~ Bet A B C.
Proof.
intros A B C HNT.
intro HNBet.
apply HNT.

*****
HNBet : Bet A B C
HNT : not (T A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
T A B C
+++++
apply Bet_T.
-----
Lemma NT_NBet : forall A B C, ~ T A B C -> ~ Bet A B C.
Proof.
intros A B C HNT.
intro HNBet.
apply HNT.
apply Bet_T.

*****
HNBet : Bet A B C
HNT : not (T A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet A B C
+++++
assumption.
-----
Lemma NT_NBet : forall A B C, ~ T A B C -> ~ Bet A B C.
Proof.
intros A B C HNT.
intro HNBet.
apply HNT.
apply Bet_T.
assumption.

*****

*****

+++++
Qed.
-----
Lemma T_dec : forall A B C, T A B C \/ ~ T A B C.
-----
Lemma T_dec : forall A B C, T A B C \\/ ~ T A B C.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall A B C : Tpoint, or (T A B C) (not (T A B C))
+++++
Proof.
-----
Lemma T_dec : forall A B C, T A B C \\/ ~ T A B C.
Proof.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall A B C : Tpoint, or (T A B C) (not (T A B C))
+++++
intros A B C.
-----
Lemma T_dec : forall A B C, T A B C \\/ ~ T A B C.
Proof.
intros A B C.

*****
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (T A B C) (not (T A B C))
+++++
elim (bet_dec A B C).
-----
Lemma T_dec : forall A B C, T A B C \\/ ~ T A B C.
Proof.
intros A B C.
elim (bet_dec A B C).

*****
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : Bet A B C, or (T A B C) (not (T A B C))
+++++
intro HBet.
-----
Lemma T_dec : forall A B C, T A B C \\/ ~ T A B C.
Proof.
intros A B C.
elim (bet_dec A B C).
intro HBet.

*****
HBet : Bet A B C
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (T A B C) (not (T A B C))
+++++
left.
-----
Lemma T_dec : forall A B C, T A B C \\/ ~ T A B C.
Proof.
intros A B C.
elim (bet_dec A B C).
intro HBet.
left.

*****
HBet : Bet A B C
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
T A B C
+++++
apply Bet_T.
-----
Lemma T_dec : forall A B C, T A B C \\/ ~ T A B C.
Proof.
intros A B C.
elim (bet_dec A B C).
intro HBet.
left.
apply Bet_T.

*****
HBet : Bet A B C
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet A B C
+++++
assumption.
-----
Lemma T_dec : forall A B C, T A B C \\/ ~ T A B C.
Proof.
intros A B C.
elim (bet_dec A B C).

*****
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : not (Bet A B C), or (T A B C) (not (T A B C))
+++++
intro HBet.
-----
Lemma T_dec : forall A B C, T A B C \\/ ~ T A B C.
Proof.
intros A B C.
elim (bet_dec A B C).
intro HBet.

*****
HBet : not (Bet A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (T A B C) (not (T A B C))
+++++
right.
-----
Lemma T_dec : forall A B C, T A B C \\/ ~ T A B C.
Proof.
intros A B C.
elim (bet_dec A B C).
intro HBet.
right.

*****
HBet : not (Bet A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (T A B C)
+++++
intro HT.
-----
Lemma T_dec : forall A B C, T A B C \\/ ~ T A B C.
Proof.
intros A B C.
elim (bet_dec A B C).
intro HBet.
right.
intro HT.

*****
HT : T A B C
HBet : not (Bet A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply HBet.
-----
Lemma T_dec : forall A B C, T A B C \\/ ~ T A B C.
Proof.
intros A B C.
elim (bet_dec A B C).
intro HBet.
right.
intro HT.
apply HBet.

*****
HT : T A B C
HBet : not (Bet A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet A B C
+++++
apply T_Bet in HT.
-----
Lemma T_dec : forall A B C, T A B C \\/ ~ T A B C.
Proof.
intros A B C.
elim (bet_dec A B C).
intro HBet.
right.
intro HT.
apply HBet.
apply T_Bet in HT.

*****
HT : Bet A B C
HBet : not (Bet A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet A B C
+++++
assumption.
-----
Lemma T_dec : forall A B C, T A B C \\/ ~ T A B C.
Proof.
intros A B C.
elim (bet_dec A B C).

*****

*****

+++++
Qed.
-----
Lemma between_inner_transitivity_B : forall A B C D : Tpoint, BetH A B D -> BetH B C D -> BetH A B C.
-----
Lemma between_inner_transitivity_B : forall A B C D : Tpoint, BetH A B D -> BetH B C D -> BetH A B C.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C D : Tpoint) (_ : BetH A B D) (_ : BetH B C D), BetH A B C
+++++
Proof.
-----
Lemma between_inner_transitivity_B : forall A B C D : Tpoint, BetH A B D -> BetH B C D -> BetH A B C.
Proof.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C D : Tpoint) (_ : BetH A B D) (_ : BetH B C D), BetH A B C
+++++
intros A B C D HBet1 HBet2.
-----
Lemma between_inner_transitivity_B : forall A B C D : Tpoint, BetH A B D -> BetH B C D -> BetH A B C.
Proof.
intros A B C D HBet1 HBet2.

*****
HBet2 : BetH B C D
HBet1 : BetH A B D
A,B,C,D : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
BetH A B C
+++++
unfold BetH.
-----
Lemma between_inner_transitivity_B : forall A B C D : Tpoint, BetH A B D -> BetH B C D -> BetH A B C.
Proof.
intros A B C D HBet1 HBet2.
unfold BetH.

*****
HBet2 : BetH B C D
HBet1 : BetH A B D
A,B,C,D : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Bet A B C) (and (not (eq A B)) (not (eq B C)))
+++++
repeat split.
-----
Lemma between_inner_transitivity_B : forall A B C D : Tpoint, BetH A B D -> BetH B C D -> BetH A B C.
Proof.
intros A B C D HBet1 HBet2.
unfold BetH.
repeat split.

*****
HBet2 : BetH B C D
HBet1 : BetH A B D
A,B,C,D : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet A B C
+++++
apply BetH_Bet in HBet1.
-----
Lemma between_inner_transitivity_B : forall A B C D : Tpoint, BetH A B D -> BetH B C D -> BetH A B C.
Proof.
intros A B C D HBet1 HBet2.
unfold BetH.
repeat split.
apply BetH_Bet in HBet1.

*****
HBet2 : BetH B C D
HBet1 : Bet A B D
A,B,C,D : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet A B C
+++++
apply BetH_Bet in HBet2.
-----
Lemma between_inner_transitivity_B : forall A B C D : Tpoint, BetH A B D -> BetH B C D -> BetH A B C.
Proof.
intros A B C D HBet1 HBet2.
unfold BetH.
repeat split.
apply BetH_Bet in HBet1.
apply BetH_Bet in HBet2.

*****
HBet2 : Bet B C D
HBet1 : Bet A B D
A,B,C,D : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet A B C
+++++
apply between_inner_transitivity with D.
-----
Lemma between_inner_transitivity_B : forall A B C D : Tpoint, BetH A B D -> BetH B C D -> BetH A B C.
Proof.
intros A B C D HBet1 HBet2.
unfold BetH.
repeat split.
apply BetH_Bet in HBet1.
apply BetH_Bet in HBet2.
apply between_inner_transitivity with D.

*****
HBet2 : Bet B C D
HBet1 : Bet A B D
A,B,C,D : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet A B D
+++++
assumption.
-----
Lemma between_inner_transitivity_B : forall A B C D : Tpoint, BetH A B D -> BetH B C D -> BetH A B C.
Proof.
intros A B C D HBet1 HBet2.
unfold BetH.
repeat split.
apply BetH_Bet in HBet1.
apply BetH_Bet in HBet2.
apply between_inner_transitivity with D.

*****
HBet2 : Bet B C D
HBet1 : Bet A B D
A,B,C,D : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet B C D
+++++
assumption.
-----
Lemma between_inner_transitivity_B : forall A B C D : Tpoint, BetH A B D -> BetH B C D -> BetH A B C.
Proof.
intros A B C D HBet1 HBet2.
unfold BetH.
repeat split.

*****
HBet2 : BetH B C D
HBet1 : BetH A B D
A,B,C,D : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq A B)
+++++
unfold BetH in HBet1.
-----
Lemma between_inner_transitivity_B : forall A B C D : Tpoint, BetH A B D -> BetH B C D -> BetH A B C.
Proof.
intros A B C D HBet1 HBet2.
unfold BetH.
repeat split.
unfold BetH in HBet1.

*****
HBet2 : BetH B C D
HBet1 : and (Bet A B D) (and (not (eq A B)) (not (eq B D)))
A,B,C,D : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq A B)
+++++
spliter.
-----
Lemma between_inner_transitivity_B : forall A B C D : Tpoint, BetH A B D -> BetH B C D -> BetH A B C.
Proof.
intros A B C D HBet1 HBet2.
unfold BetH.
repeat split.
unfold BetH in HBet1.
spliter.

*****
HBet2 : BetH B C D
H1 : not (eq B D)
H0 : not (eq A B)
H : Bet A B D
A,B,C,D : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq A B)
+++++
assumption.
-----
Lemma between_inner_transitivity_B : forall A B C D : Tpoint, BetH A B D -> BetH B C D -> BetH A B C.
Proof.
intros A B C D HBet1 HBet2.
unfold BetH.
repeat split.

*****
HBet2 : BetH B C D
HBet1 : BetH A B D
A,B,C,D : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq B C)
+++++
unfold BetH in HBet2.
-----
Lemma between_inner_transitivity_B : forall A B C D : Tpoint, BetH A B D -> BetH B C D -> BetH A B C.
Proof.
intros A B C D HBet1 HBet2.
unfold BetH.
repeat split.
unfold BetH in HBet2.

*****
HBet2 : and (Bet B C D) (and (not (eq B C)) (not (eq C D)))
HBet1 : BetH A B D
A,B,C,D : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq B C)
+++++
spliter.
-----
Lemma between_inner_transitivity_B : forall A B C D : Tpoint, BetH A B D -> BetH B C D -> BetH A B C.
Proof.
intros A B C D HBet1 HBet2.
unfold BetH.
repeat split.
unfold BetH in HBet2.
spliter.

*****
H1 : not (eq C D)
H0 : not (eq B C)
H : Bet B C D
HBet1 : BetH A B D
A,B,C,D : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq B C)
+++++
assumption.
-----
Lemma between_inner_transitivity_B : forall A B C D : Tpoint, BetH A B D -> BetH B C D -> BetH A B C.
Proof.
intros A B C D HBet1 HBet2.
unfold BetH.
repeat split.

*****

*****

+++++
Qed.
-----
Lemma ColB_Col : forall A B C, ColB A B C -> Col A B C.
-----
Lemma ColB_Col : forall A B C, ColB A B C -> Col A B C.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C : Tpoint) (_ : ColB A B C), Col A B C
+++++
Proof.
-----
Lemma ColB_Col : forall A B C, ColB A B C -> Col A B C.
Proof.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C : Tpoint) (_ : ColB A B C), Col A B C
+++++
intros A B C HCol.
-----
Lemma ColB_Col : forall A B C, ColB A B C -> Col A B C.
Proof.
intros A B C HCol.

*****
HCol : ColB A B C
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A B C
+++++
unfold ColB in HCol.
-----
Lemma ColB_Col : forall A B C, ColB A B C -> Col A B C.
Proof.
intros A B C HCol.
unfold ColB in HCol.

*****
HCol : not (and (not (T C A B)) (and (not (T A C B)) (not (T A B C))))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A B C
+++++
unfold Col.
-----
Lemma ColB_Col : forall A B C, ColB A B C -> Col A B C.
Proof.
intros A B C HCol.
unfold ColB in HCol.
unfold Col.

*****
HCol : not (and (not (T C A B)) (and (not (T A C B)) (not (T A B C))))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
elim (T_dec A B C).
-----
Lemma ColB_Col : forall A B C, ColB A B C -> Col A B C.
Proof.
intros A B C HCol.
unfold ColB in HCol.
unfold Col.
elim (T_dec A B C).

*****
HCol : not (and (not (T C A B)) (and (not (T A C B)) (not (T A B C))))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : T A B C, or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
intro HT1.
-----
Lemma ColB_Col : forall A B C, ColB A B C -> Col A B C.
Proof.
intros A B C HCol.
unfold ColB in HCol.
unfold Col.
elim (T_dec A B C).
intro HT1.

*****
HT1 : T A B C
HCol : not (and (not (T C A B)) (and (not (T A C B)) (not (T A B C))))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
elim (T_dec A C B).
-----
Lemma ColB_Col : forall A B C, ColB A B C -> Col A B C.
Proof.
intros A B C HCol.
unfold ColB in HCol.
unfold Col.
elim (T_dec A B C).
intro HT1.
elim (T_dec A C B).

*****
HT1 : T A B C
HCol : not (and (not (T C A B)) (and (not (T A C B)) (not (T A B C))))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : T A C B, or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
intro HT2.
-----
Lemma ColB_Col : forall A B C, ColB A B C -> Col A B C.
Proof.
intros A B C HCol.
unfold ColB in HCol.
unfold Col.
elim (T_dec A B C).
intro HT1.
elim (T_dec A C B).
intro HT2.

*****
HT2 : T A C B
HT1 : T A B C
HCol : not (and (not (T C A B)) (and (not (T A C B)) (not (T A B C))))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
elim (T_dec C A B).
-----
Lemma ColB_Col : forall A B C, ColB A B C -> Col A B C.
Proof.
intros A B C HCol.
unfold ColB in HCol.
unfold Col.
elim (T_dec A B C).
intro HT1.
elim (T_dec A C B).
intro HT2.
elim (T_dec C A B).

*****
HT2 : T A C B
HT1 : T A B C
HCol : not (and (not (T C A B)) (and (not (T A C B)) (not (T A B C))))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : T C A B, or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
intro HT3.
-----
Lemma ColB_Col : forall A B C, ColB A B C -> Col A B C.
Proof.
intros A B C HCol.
unfold ColB in HCol.
unfold Col.
elim (T_dec A B C).
intro HT1.
elim (T_dec A C B).
intro HT2.
elim (T_dec C A B).
intro HT3.

*****
HT3 : T C A B
HT2 : T A C B
HT1 : T A B C
HCol : not (and (not (T C A B)) (and (not (T A C B)) (not (T A B C))))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
apply T_Bet in HT1.
-----
Lemma ColB_Col : forall A B C, ColB A B C -> Col A B C.
Proof.
intros A B C HCol.
unfold ColB in HCol.
unfold Col.
elim (T_dec A B C).
intro HT1.
elim (T_dec A C B).
intro HT2.
elim (T_dec C A B).
intro HT3.
apply T_Bet in HT1.

*****
HT3 : T C A B
HT2 : T A C B
HT1 : Bet A B C
HCol : not (and (not (T C A B)) (and (not (T A C B)) (not (T A B C))))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
intuition.
-----
Lemma ColB_Col : forall A B C, ColB A B C -> Col A B C.
Proof.
intros A B C HCol.
unfold ColB in HCol.
unfold Col.
elim (T_dec A B C).
intro HT1.
elim (T_dec A C B).
intro HT2.
elim (T_dec C A B).

*****
HT2 : T A C B
HT1 : T A B C
HCol : not (and (not (T C A B)) (and (not (T A C B)) (not (T A B C))))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : not (T C A B), or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
intro HT3.
-----
Lemma ColB_Col : forall A B C, ColB A B C -> Col A B C.
Proof.
intros A B C HCol.
unfold ColB in HCol.
unfold Col.
elim (T_dec A B C).
intro HT1.
elim (T_dec A C B).
intro HT2.
elim (T_dec C A B).
intro HT3.

*****
HT3 : not (T C A B)
HT2 : T A C B
HT1 : T A B C
HCol : not (and (not (T C A B)) (and (not (T A C B)) (not (T A B C))))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
apply T_Bet in HT1.
-----
Lemma ColB_Col : forall A B C, ColB A B C -> Col A B C.
Proof.
intros A B C HCol.
unfold ColB in HCol.
unfold Col.
elim (T_dec A B C).
intro HT1.
elim (T_dec A C B).
intro HT2.
elim (T_dec C A B).
intro HT3.
apply T_Bet in HT1.

*****
HT3 : not (T C A B)
HT2 : T A C B
HT1 : Bet A B C
HCol : not (and (not (T C A B)) (and (not (T A C B)) (not (T A B C))))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
intuition.
-----
Lemma ColB_Col : forall A B C, ColB A B C -> Col A B C.
Proof.
intros A B C HCol.
unfold ColB in HCol.
unfold Col.
elim (T_dec A B C).
intro HT1.
elim (T_dec A C B).

*****
HT1 : T A B C
HCol : not (and (not (T C A B)) (and (not (T A C B)) (not (T A B C))))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : not (T A C B), or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
intro HT2.
-----
Lemma ColB_Col : forall A B C, ColB A B C -> Col A B C.
Proof.
intros A B C HCol.
unfold ColB in HCol.
unfold Col.
elim (T_dec A B C).
intro HT1.
elim (T_dec A C B).
intro HT2.

*****
HT2 : not (T A C B)
HT1 : T A B C
HCol : not (and (not (T C A B)) (and (not (T A C B)) (not (T A B C))))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
elim (T_dec C A B).
-----
Lemma ColB_Col : forall A B C, ColB A B C -> Col A B C.
Proof.
intros A B C HCol.
unfold ColB in HCol.
unfold Col.
elim (T_dec A B C).
intro HT1.
elim (T_dec A C B).
intro HT2.
elim (T_dec C A B).

*****
HT2 : not (T A C B)
HT1 : T A B C
HCol : not (and (not (T C A B)) (and (not (T A C B)) (not (T A B C))))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : T C A B, or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
intro HT3.
-----
Lemma ColB_Col : forall A B C, ColB A B C -> Col A B C.
Proof.
intros A B C HCol.
unfold ColB in HCol.
unfold Col.
elim (T_dec A B C).
intro HT1.
elim (T_dec A C B).
intro HT2.
elim (T_dec C A B).
intro HT3.

*****
HT3 : T C A B
HT2 : not (T A C B)
HT1 : T A B C
HCol : not (and (not (T C A B)) (and (not (T A C B)) (not (T A B C))))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
apply T_Bet in HT1.
-----
Lemma ColB_Col : forall A B C, ColB A B C -> Col A B C.
Proof.
intros A B C HCol.
unfold ColB in HCol.
unfold Col.
elim (T_dec A B C).
intro HT1.
elim (T_dec A C B).
intro HT2.
elim (T_dec C A B).
intro HT3.
apply T_Bet in HT1.

*****
HT3 : T C A B
HT2 : not (T A C B)
HT1 : Bet A B C
HCol : not (and (not (T C A B)) (and (not (T A C B)) (not (T A B C))))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
intuition.
-----
Lemma ColB_Col : forall A B C, ColB A B C -> Col A B C.
Proof.
intros A B C HCol.
unfold ColB in HCol.
unfold Col.
elim (T_dec A B C).
intro HT1.
elim (T_dec A C B).
intro HT2.
elim (T_dec C A B).

*****
HT2 : not (T A C B)
HT1 : T A B C
HCol : not (and (not (T C A B)) (and (not (T A C B)) (not (T A B C))))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : not (T C A B), or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
intro HT3.
-----
Lemma ColB_Col : forall A B C, ColB A B C -> Col A B C.
Proof.
intros A B C HCol.
unfold ColB in HCol.
unfold Col.
elim (T_dec A B C).
intro HT1.
elim (T_dec A C B).
intro HT2.
elim (T_dec C A B).
intro HT3.

*****
HT3 : not (T C A B)
HT2 : not (T A C B)
HT1 : T A B C
HCol : not (and (not (T C A B)) (and (not (T A C B)) (not (T A B C))))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
apply T_Bet in HT1.
-----
Lemma ColB_Col : forall A B C, ColB A B C -> Col A B C.
Proof.
intros A B C HCol.
unfold ColB in HCol.
unfold Col.
elim (T_dec A B C).
intro HT1.
elim (T_dec A C B).
intro HT2.
elim (T_dec C A B).
intro HT3.
apply T_Bet in HT1.

*****
HT3 : not (T C A B)
HT2 : not (T A C B)
HT1 : Bet A B C
HCol : not (and (not (T C A B)) (and (not (T A C B)) (not (T A B C))))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
intuition.
-----
Lemma ColB_Col : forall A B C, ColB A B C -> Col A B C.
Proof.
intros A B C HCol.
unfold ColB in HCol.
unfold Col.
elim (T_dec A B C).

*****
HCol : not (and (not (T C A B)) (and (not (T A C B)) (not (T A B C))))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : not (T A B C), or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
intro HT1.
-----
Lemma ColB_Col : forall A B C, ColB A B C -> Col A B C.
Proof.
intros A B C HCol.
unfold ColB in HCol.
unfold Col.
elim (T_dec A B C).
intro HT1.

*****
HT1 : not (T A B C)
HCol : not (and (not (T C A B)) (and (not (T A C B)) (not (T A B C))))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
elim (T_dec A C B).
-----
Lemma ColB_Col : forall A B C, ColB A B C -> Col A B C.
Proof.
intros A B C HCol.
unfold ColB in HCol.
unfold Col.
elim (T_dec A B C).
intro HT1.
elim (T_dec A C B).

*****
HT1 : not (T A B C)
HCol : not (and (not (T C A B)) (and (not (T A C B)) (not (T A B C))))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : T A C B, or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
intro HT2.
-----
Lemma ColB_Col : forall A B C, ColB A B C -> Col A B C.
Proof.
intros A B C HCol.
unfold ColB in HCol.
unfold Col.
elim (T_dec A B C).
intro HT1.
elim (T_dec A C B).
intro HT2.

*****
HT2 : T A C B
HT1 : not (T A B C)
HCol : not (and (not (T C A B)) (and (not (T A C B)) (not (T A B C))))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
elim (T_dec C A B).
-----
Lemma ColB_Col : forall A B C, ColB A B C -> Col A B C.
Proof.
intros A B C HCol.
unfold ColB in HCol.
unfold Col.
elim (T_dec A B C).
intro HT1.
elim (T_dec A C B).
intro HT2.
elim (T_dec C A B).

*****
HT2 : T A C B
HT1 : not (T A B C)
HCol : not (and (not (T C A B)) (and (not (T A C B)) (not (T A B C))))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : T C A B, or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
intro HT3.
-----
Lemma ColB_Col : forall A B C, ColB A B C -> Col A B C.
Proof.
intros A B C HCol.
unfold ColB in HCol.
unfold Col.
elim (T_dec A B C).
intro HT1.
elim (T_dec A C B).
intro HT2.
elim (T_dec C A B).
intro HT3.

*****
HT3 : T C A B
HT2 : T A C B
HT1 : not (T A B C)
HCol : not (and (not (T C A B)) (and (not (T A C B)) (not (T A B C))))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
apply T_Bet in HT2.
-----
Lemma ColB_Col : forall A B C, ColB A B C -> Col A B C.
Proof.
intros A B C HCol.
unfold ColB in HCol.
unfold Col.
elim (T_dec A B C).
intro HT1.
elim (T_dec A C B).
intro HT2.
elim (T_dec C A B).
intro HT3.
apply T_Bet in HT2.

*****
HT3 : T C A B
HT2 : Bet A C B
HT1 : not (T A B C)
HCol : not (and (not (T C A B)) (and (not (T A C B)) (not (T A B C))))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
intuition.
-----
Lemma ColB_Col : forall A B C, ColB A B C -> Col A B C.
Proof.
intros A B C HCol.
unfold ColB in HCol.
unfold Col.
elim (T_dec A B C).
intro HT1.
elim (T_dec A C B).
intro HT2.
elim (T_dec C A B).

*****
HT2 : T A C B
HT1 : not (T A B C)
HCol : not (and (not (T C A B)) (and (not (T A C B)) (not (T A B C))))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : not (T C A B), or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
intro HT3.
-----
Lemma ColB_Col : forall A B C, ColB A B C -> Col A B C.
Proof.
intros A B C HCol.
unfold ColB in HCol.
unfold Col.
elim (T_dec A B C).
intro HT1.
elim (T_dec A C B).
intro HT2.
elim (T_dec C A B).
intro HT3.

*****
HT3 : not (T C A B)
HT2 : T A C B
HT1 : not (T A B C)
HCol : not (and (not (T C A B)) (and (not (T A C B)) (not (T A B C))))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
apply T_Bet in HT2.
-----
Lemma ColB_Col : forall A B C, ColB A B C -> Col A B C.
Proof.
intros A B C HCol.
unfold ColB in HCol.
unfold Col.
elim (T_dec A B C).
intro HT1.
elim (T_dec A C B).
intro HT2.
elim (T_dec C A B).
intro HT3.
apply T_Bet in HT2.

*****
HT3 : not (T C A B)
HT2 : Bet A C B
HT1 : not (T A B C)
HCol : not (and (not (T C A B)) (and (not (T A C B)) (not (T A B C))))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
intuition.
-----
Lemma ColB_Col : forall A B C, ColB A B C -> Col A B C.
Proof.
intros A B C HCol.
unfold ColB in HCol.
unfold Col.
elim (T_dec A B C).
intro HT1.
elim (T_dec A C B).

*****
HT1 : not (T A B C)
HCol : not (and (not (T C A B)) (and (not (T A C B)) (not (T A B C))))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : not (T A C B), or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
intro HT2.
-----
Lemma ColB_Col : forall A B C, ColB A B C -> Col A B C.
Proof.
intros A B C HCol.
unfold ColB in HCol.
unfold Col.
elim (T_dec A B C).
intro HT1.
elim (T_dec A C B).
intro HT2.

*****
HT2 : not (T A C B)
HT1 : not (T A B C)
HCol : not (and (not (T C A B)) (and (not (T A C B)) (not (T A B C))))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
elim (T_dec C A B).
-----
Lemma ColB_Col : forall A B C, ColB A B C -> Col A B C.
Proof.
intros A B C HCol.
unfold ColB in HCol.
unfold Col.
elim (T_dec A B C).
intro HT1.
elim (T_dec A C B).
intro HT2.
elim (T_dec C A B).

*****
HT2 : not (T A C B)
HT1 : not (T A B C)
HCol : not (and (not (T C A B)) (and (not (T A C B)) (not (T A B C))))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : T C A B, or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
intro HT3.
-----
Lemma ColB_Col : forall A B C, ColB A B C -> Col A B C.
Proof.
intros A B C HCol.
unfold ColB in HCol.
unfold Col.
elim (T_dec A B C).
intro HT1.
elim (T_dec A C B).
intro HT2.
elim (T_dec C A B).
intro HT3.

*****
HT3 : T C A B
HT2 : not (T A C B)
HT1 : not (T A B C)
HCol : not (and (not (T C A B)) (and (not (T A C B)) (not (T A B C))))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
apply T_Bet in HT3.
-----
Lemma ColB_Col : forall A B C, ColB A B C -> Col A B C.
Proof.
intros A B C HCol.
unfold ColB in HCol.
unfold Col.
elim (T_dec A B C).
intro HT1.
elim (T_dec A C B).
intro HT2.
elim (T_dec C A B).
intro HT3.
apply T_Bet in HT3.

*****
HT3 : Bet C A B
HT2 : not (T A C B)
HT1 : not (T A B C)
HCol : not (and (not (T C A B)) (and (not (T A C B)) (not (T A B C))))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
intuition.
-----
Lemma ColB_Col : forall A B C, ColB A B C -> Col A B C.
Proof.
intros A B C HCol.
unfold ColB in HCol.
unfold Col.
elim (T_dec A B C).
intro HT1.
elim (T_dec A C B).
intro HT2.
elim (T_dec C A B).

*****
HT2 : not (T A C B)
HT1 : not (T A B C)
HCol : not (and (not (T C A B)) (and (not (T A C B)) (not (T A B C))))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : not (T C A B), or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
intro HT3.
-----
Lemma ColB_Col : forall A B C, ColB A B C -> Col A B C.
Proof.
intros A B C HCol.
unfold ColB in HCol.
unfold Col.
elim (T_dec A B C).
intro HT1.
elim (T_dec A C B).
intro HT2.
elim (T_dec C A B).
intro HT3.

*****
HT3 : not (T C A B)
HT2 : not (T A C B)
HT1 : not (T A B C)
HCol : not (and (not (T C A B)) (and (not (T A C B)) (not (T A B C))))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
exfalso.
-----
Lemma ColB_Col : forall A B C, ColB A B C -> Col A B C.
Proof.
intros A B C HCol.
unfold ColB in HCol.
unfold Col.
elim (T_dec A B C).
intro HT1.
elim (T_dec A C B).
intro HT2.
elim (T_dec C A B).
intro HT3.
exfalso.

*****
HT3 : not (T C A B)
HT2 : not (T A C B)
HT1 : not (T A B C)
HCol : not (and (not (T C A B)) (and (not (T A C B)) (not (T A B C))))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply HCol.
-----
Lemma ColB_Col : forall A B C, ColB A B C -> Col A B C.
Proof.
intros A B C HCol.
unfold ColB in HCol.
unfold Col.
elim (T_dec A B C).
intro HT1.
elim (T_dec A C B).
intro HT2.
elim (T_dec C A B).
intro HT3.
exfalso.
apply HCol.

*****
HT3 : not (T C A B)
HT2 : not (T A C B)
HT1 : not (T A B C)
HCol : not (and (not (T C A B)) (and (not (T A C B)) (not (T A B C))))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (not (T C A B)) (and (not (T A C B)) (not (T A B C)))
+++++
intuition.
-----
Lemma ColB_Col : forall A B C, ColB A B C -> Col A B C.
Proof.
intros A B C HCol.
unfold ColB in HCol.
unfold Col.
elim (T_dec A B C).

*****

*****

+++++
Qed.
-----
Lemma Diff_Col_ColB : forall A B C, Col A B C -> ColB A B C.
-----
Lemma Diff_Col_ColB : forall A B C, Col A B C -> ColB A B C.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C : Tpoint) (_ : Col A B C), ColB A B C
+++++
Proof.
-----
Lemma Diff_Col_ColB : forall A B C, Col A B C -> ColB A B C.
Proof.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C : Tpoint) (_ : Col A B C), ColB A B C
+++++
intros A B C H.
-----
Lemma Diff_Col_ColB : forall A B C, Col A B C -> ColB A B C.
Proof.
intros A B C H.

*****
H : Col A B C
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ColB A B C
+++++
unfold Col in H.
-----
Lemma Diff_Col_ColB : forall A B C, Col A B C -> ColB A B C.
Proof.
intros A B C H.
unfold Col in H.

*****
H : or (Bet A B C) (or (Bet B C A) (Bet C A B))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ColB A B C
+++++
unfold ColB.
-----
Lemma Diff_Col_ColB : forall A B C, Col A B C -> ColB A B C.
Proof.
intros A B C H.
unfold Col in H.
unfold ColB.

*****
H : or (Bet A B C) (or (Bet B C A) (Bet C A B))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (and (not (T C A B)) (and (not (T A C B)) (not (T A B C))))
+++++
intro HColB.
-----
Lemma Diff_Col_ColB : forall A B C, Col A B C -> ColB A B C.
Proof.
intros A B C H.
unfold Col in H.
unfold ColB.
intro HColB.

*****
HColB : and (not (T C A B)) (and (not (T A C B)) (not (T A B C)))
H : or (Bet A B C) (or (Bet B C A) (Bet C A B))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
destruct HColB as [HNT1 [HNT2 HNT3]].
-----
Lemma Diff_Col_ColB : forall A B C, Col A B C -> ColB A B C.
Proof.
intros A B C H.
unfold Col in H.
unfold ColB.
intro HColB.
destruct HColB as [HNT1 [HNT2 HNT3]].

*****
HNT3 : not (T A B C)
HNT2 : not (T A C B)
HNT1 : not (T C A B)
H : or (Bet A B C) (or (Bet B C A) (Bet C A B))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply NT_NBet in HNT1.
-----
Lemma Diff_Col_ColB : forall A B C, Col A B C -> ColB A B C.
Proof.
intros A B C H.
unfold Col in H.
unfold ColB.
intro HColB.
destruct HColB as [HNT1 [HNT2 HNT3]].
apply NT_NBet in HNT1.

*****
HNT3 : not (T A B C)
HNT2 : not (T A C B)
HNT1 : not (Bet C A B)
H : or (Bet A B C) (or (Bet B C A) (Bet C A B))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply NT_NBet in HNT2.
-----
Lemma Diff_Col_ColB : forall A B C, Col A B C -> ColB A B C.
Proof.
intros A B C H.
unfold Col in H.
unfold ColB.
intro HColB.
destruct HColB as [HNT1 [HNT2 HNT3]].
apply NT_NBet in HNT1.
apply NT_NBet in HNT2.

*****
HNT3 : not (T A B C)
HNT2 : not (Bet A C B)
HNT1 : not (Bet C A B)
H : or (Bet A B C) (or (Bet B C A) (Bet C A B))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply NT_NBet in HNT3.
-----
Lemma Diff_Col_ColB : forall A B C, Col A B C -> ColB A B C.
Proof.
intros A B C H.
unfold Col in H.
unfold ColB.
intro HColB.
destruct HColB as [HNT1 [HNT2 HNT3]].
apply NT_NBet in HNT1.
apply NT_NBet in HNT2.
apply NT_NBet in HNT3.

*****
HNT3 : not (Bet A B C)
HNT2 : not (Bet A C B)
HNT1 : not (Bet C A B)
H : or (Bet A B C) (or (Bet B C A) (Bet C A B))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
elim H.
-----
Lemma Diff_Col_ColB : forall A B C, Col A B C -> ColB A B C.
Proof.
intros A B C H.
unfold Col in H.
unfold ColB.
intro HColB.
destruct HColB as [HNT1 [HNT2 HNT3]].
apply NT_NBet in HNT1.
apply NT_NBet in HNT2.
apply NT_NBet in HNT3.
elim H.

*****
HNT3 : not (Bet A B C)
HNT2 : not (Bet A C B)
HNT1 : not (Bet C A B)
H : or (Bet A B C) (or (Bet B C A) (Bet C A B))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : Bet A B C, False
+++++
intro HBet.
-----
Lemma Diff_Col_ColB : forall A B C, Col A B C -> ColB A B C.
Proof.
intros A B C H.
unfold Col in H.
unfold ColB.
intro HColB.
destruct HColB as [HNT1 [HNT2 HNT3]].
apply NT_NBet in HNT1.
apply NT_NBet in HNT2.
apply NT_NBet in HNT3.
elim H.
intro HBet.

*****
HBet : Bet A B C
HNT3 : not (Bet A B C)
HNT2 : not (Bet A C B)
HNT1 : not (Bet C A B)
H : or (Bet A B C) (or (Bet B C A) (Bet C A B))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
contradiction.
-----
Lemma Diff_Col_ColB : forall A B C, Col A B C -> ColB A B C.
Proof.
intros A B C H.
unfold Col in H.
unfold ColB.
intro HColB.
destruct HColB as [HNT1 [HNT2 HNT3]].
apply NT_NBet in HNT1.
apply NT_NBet in HNT2.
apply NT_NBet in HNT3.
elim H.

*****
HNT3 : not (Bet A B C)
HNT2 : not (Bet A C B)
HNT1 : not (Bet C A B)
H : or (Bet A B C) (or (Bet B C A) (Bet C A B))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : or (Bet B C A) (Bet C A B), False
+++++
intro HColAux.
-----
Lemma Diff_Col_ColB : forall A B C, Col A B C -> ColB A B C.
Proof.
intros A B C H.
unfold Col in H.
unfold ColB.
intro HColB.
destruct HColB as [HNT1 [HNT2 HNT3]].
apply NT_NBet in HNT1.
apply NT_NBet in HNT2.
apply NT_NBet in HNT3.
elim H.
intro HColAux.

*****
HColAux : or (Bet B C A) (Bet C A B)
HNT3 : not (Bet A B C)
HNT2 : not (Bet A C B)
HNT1 : not (Bet C A B)
H : or (Bet A B C) (or (Bet B C A) (Bet C A B))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
elim HColAux.
-----
Lemma Diff_Col_ColB : forall A B C, Col A B C -> ColB A B C.
Proof.
intros A B C H.
unfold Col in H.
unfold ColB.
intro HColB.
destruct HColB as [HNT1 [HNT2 HNT3]].
apply NT_NBet in HNT1.
apply NT_NBet in HNT2.
apply NT_NBet in HNT3.
elim H.
intro HColAux.
elim HColAux.

*****
HColAux : or (Bet B C A) (Bet C A B)
HNT3 : not (Bet A B C)
HNT2 : not (Bet A C B)
HNT1 : not (Bet C A B)
H : or (Bet A B C) (or (Bet B C A) (Bet C A B))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : Bet B C A, False
+++++
intro HBet.
-----
Lemma Diff_Col_ColB : forall A B C, Col A B C -> ColB A B C.
Proof.
intros A B C H.
unfold Col in H.
unfold ColB.
intro HColB.
destruct HColB as [HNT1 [HNT2 HNT3]].
apply NT_NBet in HNT1.
apply NT_NBet in HNT2.
apply NT_NBet in HNT3.
elim H.
intro HColAux.
elim HColAux.
intro HBet.

*****
HBet : Bet B C A
HColAux : or (Bet B C A) (Bet C A B)
HNT3 : not (Bet A B C)
HNT2 : not (Bet A C B)
HNT1 : not (Bet C A B)
H : or (Bet A B C) (or (Bet B C A) (Bet C A B))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
clear HColAux.
-----
Lemma Diff_Col_ColB : forall A B C, Col A B C -> ColB A B C.
Proof.
intros A B C H.
unfold Col in H.
unfold ColB.
intro HColB.
destruct HColB as [HNT1 [HNT2 HNT3]].
apply NT_NBet in HNT1.
apply NT_NBet in HNT2.
apply NT_NBet in HNT3.
elim H.
intro HColAux.
elim HColAux.
intro HBet.
clear HColAux.

*****
HBet : Bet B C A
HNT3 : not (Bet A B C)
HNT2 : not (Bet A C B)
HNT1 : not (Bet C A B)
H : or (Bet A B C) (or (Bet B C A) (Bet C A B))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply between_symmetry in HBet.
-----
Lemma Diff_Col_ColB : forall A B C, Col A B C -> ColB A B C.
Proof.
intros A B C H.
unfold Col in H.
unfold ColB.
intro HColB.
destruct HColB as [HNT1 [HNT2 HNT3]].
apply NT_NBet in HNT1.
apply NT_NBet in HNT2.
apply NT_NBet in HNT3.
elim H.
intro HColAux.
elim HColAux.
intro HBet.
clear HColAux.
apply between_symmetry in HBet.

*****
HBet : Bet A C B
HNT3 : not (Bet A B C)
HNT2 : not (Bet A C B)
HNT1 : not (Bet C A B)
H : or (Bet A B C) (or (Bet B C A) (Bet C A B))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
contradiction.
-----
Lemma Diff_Col_ColB : forall A B C, Col A B C -> ColB A B C.
Proof.
intros A B C H.
unfold Col in H.
unfold ColB.
intro HColB.
destruct HColB as [HNT1 [HNT2 HNT3]].
apply NT_NBet in HNT1.
apply NT_NBet in HNT2.
apply NT_NBet in HNT3.
elim H.
intro HColAux.
elim HColAux.

*****
HColAux : or (Bet B C A) (Bet C A B)
HNT3 : not (Bet A B C)
HNT2 : not (Bet A C B)
HNT1 : not (Bet C A B)
H : or (Bet A B C) (or (Bet B C A) (Bet C A B))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : Bet C A B, False
+++++
intro HBet.
-----
Lemma Diff_Col_ColB : forall A B C, Col A B C -> ColB A B C.
Proof.
intros A B C H.
unfold Col in H.
unfold ColB.
intro HColB.
destruct HColB as [HNT1 [HNT2 HNT3]].
apply NT_NBet in HNT1.
apply NT_NBet in HNT2.
apply NT_NBet in HNT3.
elim H.
intro HColAux.
elim HColAux.
intro HBet.

*****
HBet : Bet C A B
HColAux : or (Bet B C A) (Bet C A B)
HNT3 : not (Bet A B C)
HNT2 : not (Bet A C B)
HNT1 : not (Bet C A B)
H : or (Bet A B C) (or (Bet B C A) (Bet C A B))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
clear HColAux.
-----
Lemma Diff_Col_ColB : forall A B C, Col A B C -> ColB A B C.
Proof.
intros A B C H.
unfold Col in H.
unfold ColB.
intro HColB.
destruct HColB as [HNT1 [HNT2 HNT3]].
apply NT_NBet in HNT1.
apply NT_NBet in HNT2.
apply NT_NBet in HNT3.
elim H.
intro HColAux.
elim HColAux.
intro HBet.
clear HColAux.

*****
HBet : Bet C A B
HNT3 : not (Bet A B C)
HNT2 : not (Bet A C B)
HNT1 : not (Bet C A B)
H : or (Bet A B C) (or (Bet B C A) (Bet C A B))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
contradiction.
-----
Lemma Diff_Col_ColB : forall A B C, Col A B C -> ColB A B C.
Proof.
intros A B C H.
unfold Col in H.
unfold ColB.
intro HColB.
destruct HColB as [HNT1 [HNT2 HNT3]].
apply NT_NBet in HNT1.
apply NT_NBet in HNT2.
apply NT_NBet in HNT3.
elim H.

*****

*****

+++++
Qed.
-----
Lemma NColB_NDiffCol : forall A B C, ~ ColB A B C -> ~ Col A B C.
-----
Lemma NColB_NDiffCol : forall A B C, ~ ColB A B C -> ~ Col A B C.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C : Tpoint) (_ : not (ColB A B C)), not (Col A B C)
+++++
Proof.
-----
Lemma NColB_NDiffCol : forall A B C, ~ ColB A B C -> ~ Col A B C.
Proof.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C : Tpoint) (_ : not (ColB A B C)), not (Col A B C)
+++++
intros A B C HNCB.
-----
Lemma NColB_NDiffCol : forall A B C, ~ ColB A B C -> ~ Col A B C.
Proof.
intros A B C HNCB.

*****
HNCB : not (ColB A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col A B C)
+++++
intro HNC.
-----
Lemma NColB_NDiffCol : forall A B C, ~ ColB A B C -> ~ Col A B C.
Proof.
intros A B C HNCB.
intro HNC.

*****
HNC : Col A B C
HNCB : not (ColB A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply HNCB.
-----
Lemma NColB_NDiffCol : forall A B C, ~ ColB A B C -> ~ Col A B C.
Proof.
intros A B C HNCB.
intro HNC.
apply HNCB.

*****
HNC : Col A B C
HNCB : not (ColB A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ColB A B C
+++++
apply Diff_Col_ColB.
-----
Lemma NColB_NDiffCol : forall A B C, ~ ColB A B C -> ~ Col A B C.
Proof.
intros A B C HNCB.
intro HNC.
apply HNCB.
apply Diff_Col_ColB.

*****
HNC : Col A B C
HNCB : not (ColB A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A B C
+++++
assumption.
-----
Lemma NColB_NDiffCol : forall A B C, ~ ColB A B C -> ~ Col A B C.
Proof.
intros A B C HNCB.
intro HNC.
apply HNCB.
apply Diff_Col_ColB.
assumption.

*****

*****

+++++
Qed.
-----
Lemma NColB_NColOrEq : forall A B C, ~ ColB A B C -> ~ Col A B C.
-----
Lemma NColB_NColOrEq : forall A B C, ~ ColB A B C -> ~ Col A B C.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C : Tpoint) (_ : not (ColB A B C)), not (Col A B C)
+++++
Proof.
-----
Lemma NColB_NColOrEq : forall A B C, ~ ColB A B C -> ~ Col A B C.
Proof.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C : Tpoint) (_ : not (ColB A B C)), not (Col A B C)
+++++
intros A B C HNCB.
-----
Lemma NColB_NColOrEq : forall A B C, ~ ColB A B C -> ~ Col A B C.
Proof.
intros A B C HNCB.

*****
HNCB : not (ColB A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col A B C)
+++++
apply NColB_NDiffCol in HNCB.
-----
Lemma NColB_NColOrEq : forall A B C, ~ ColB A B C -> ~ Col A B C.
Proof.
intros A B C HNCB.
apply NColB_NDiffCol in HNCB.

*****
HNCB : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col A B C)
+++++
assumption.
-----
Lemma NColB_NColOrEq : forall A B C, ~ ColB A B C -> ~ Col A B C.
Proof.
intros A B C HNCB.
apply NColB_NDiffCol in HNCB.
assumption.

*****

*****

+++++
Qed.
-----
Lemma inner_pasch_B : forall A B C P Q,\n  BetH A P C -> BetH B Q C -> ~ ColB A B C ->\n  exists x, BetH P x B /\ BetH Q x A.
-----
Lemma inner_pasch_B : forall A B C P Q, BetH A P C -> BetH B Q C -> ~ ColB A B C -> exists x, BetH P x B /\\ BetH Q x A.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C P Q : Tpoint) (_ : BetH A P C) (_ : BetH B Q C) (_ : not (ColB A B C)), ex (fun x : Tpoint => and (BetH P x B) (BetH Q x A))
+++++
Proof.
-----
Lemma inner_pasch_B : forall A B C P Q, BetH A P C -> BetH B Q C -> ~ ColB A B C -> exists x, BetH P x B /\\ BetH Q x A.
Proof.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C P Q : Tpoint) (_ : BetH A P C) (_ : BetH B Q C) (_ : not (ColB A B C)), ex (fun x : Tpoint => and (BetH P x B) (BetH Q x A))
+++++
intros A B C P Q HBetH1 HBetH2 HNC.
-----
Lemma inner_pasch_B : forall A B C P Q, BetH A P C -> BetH B Q C -> ~ ColB A B C -> exists x, BetH P x B /\\ BetH Q x A.
Proof.
intros A B C P Q HBetH1 HBetH2 HNC.

*****
HNC : not (ColB A B C)
HBetH2 : BetH B Q C
HBetH1 : BetH A P C
A,B,C,P,Q : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun x : Tpoint => and (BetH P x B) (BetH Q x A))
+++++
unfold BetH in HBetH1.
-----
Lemma inner_pasch_B : forall A B C P Q, BetH A P C -> BetH B Q C -> ~ ColB A B C -> exists x, BetH P x B /\\ BetH Q x A.
Proof.
intros A B C P Q HBetH1 HBetH2 HNC.
unfold BetH in HBetH1.

*****
HNC : not (ColB A B C)
HBetH2 : BetH B Q C
HBetH1 : and (Bet A P C) (and (not (eq A P)) (not (eq P C)))
A,B,C,P,Q : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun x : Tpoint => and (BetH P x B) (BetH Q x A))
+++++
destruct HBetH1 as [HBet1 [HAP HPC]].
-----
Lemma inner_pasch_B : forall A B C P Q, BetH A P C -> BetH B Q C -> ~ ColB A B C -> exists x, BetH P x B /\\ BetH Q x A.
Proof.
intros A B C P Q HBetH1 HBetH2 HNC.
unfold BetH in HBetH1.
destruct HBetH1 as [HBet1 [HAP HPC]].

*****
HNC : not (ColB A B C)
HBetH2 : BetH B Q C
HPC : not (eq P C)
HAP : not (eq A P)
HBet1 : Bet A P C
A,B,C,P,Q : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun x : Tpoint => and (BetH P x B) (BetH Q x A))
+++++
unfold BetH in HBetH2.
-----
Lemma inner_pasch_B : forall A B C P Q, BetH A P C -> BetH B Q C -> ~ ColB A B C -> exists x, BetH P x B /\\ BetH Q x A.
Proof.
intros A B C P Q HBetH1 HBetH2 HNC.
unfold BetH in HBetH1.
destruct HBetH1 as [HBet1 [HAP HPC]].
unfold BetH in HBetH2.

*****
HNC : not (ColB A B C)
HBetH2 : and (Bet B Q C) (and (not (eq B Q)) (not (eq Q C)))
HPC : not (eq P C)
HAP : not (eq A P)
HBet1 : Bet A P C
A,B,C,P,Q : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun x : Tpoint => and (BetH P x B) (BetH Q x A))
+++++
destruct HBetH2 as [HBet2 [HBQ HQC]].
-----
Lemma inner_pasch_B : forall A B C P Q, BetH A P C -> BetH B Q C -> ~ ColB A B C -> exists x, BetH P x B /\\ BetH Q x A.
Proof.
intros A B C P Q HBetH1 HBetH2 HNC.
unfold BetH in HBetH1.
destruct HBetH1 as [HBet1 [HAP HPC]].
unfold BetH in HBetH2.
destruct HBetH2 as [HBet2 [HBQ HQC]].

*****
HNC : not (ColB A B C)
HQC : not (eq Q C)
HBQ : not (eq B Q)
HBet2 : Bet B Q C
HPC : not (eq P C)
HAP : not (eq A P)
HBet1 : Bet A P C
A,B,C,P,Q : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun x : Tpoint => and (BetH P x B) (BetH Q x A))
+++++
apply NColB_NColOrEq in HNC.
-----
Lemma inner_pasch_B : forall A B C P Q, BetH A P C -> BetH B Q C -> ~ ColB A B C -> exists x, BetH P x B /\\ BetH Q x A.
Proof.
intros A B C P Q HBetH1 HBetH2 HNC.
unfold BetH in HBetH1.
destruct HBetH1 as [HBet1 [HAP HPC]].
unfold BetH in HBetH2.
destruct HBetH2 as [HBet2 [HBQ HQC]].
apply NColB_NColOrEq in HNC.

*****
HNC : not (Col A B C)
HQC : not (eq Q C)
HBQ : not (eq B Q)
HBet2 : Bet B Q C
HPC : not (eq P C)
HAP : not (eq A P)
HBet1 : Bet A P C
A,B,C,P,Q : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun x : Tpoint => and (BetH P x B) (BetH Q x A))
+++++
assert (HIP := inner_pasch A B C P Q HBet1 HBet2).
-----
Lemma inner_pasch_B : forall A B C P Q, BetH A P C -> BetH B Q C -> ~ ColB A B C -> exists x, BetH P x B /\\ BetH Q x A.
Proof.
intros A B C P Q HBetH1 HBetH2 HNC.
unfold BetH in HBetH1.
destruct HBetH1 as [HBet1 [HAP HPC]].
unfold BetH in HBetH2.
destruct HBetH2 as [HBet2 [HBQ HQC]].
apply NColB_NColOrEq in HNC.
assert (HIP := inner_pasch A B C P Q HBet1 HBet2).

*****
HIP : ex (fun X : Tpoint => and (Bet P X B) (Bet Q X A))
HNC : not (Col A B C)
HQC : not (eq Q C)
HBQ : not (eq B Q)
HBet2 : Bet B Q C
HPC : not (eq P C)
HAP : not (eq A P)
HBet1 : Bet A P C
A,B,C,P,Q : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun x : Tpoint => and (BetH P x B) (BetH Q x A))
+++++
destruct HIP as [x [HBet3 HBet4]].
-----
Lemma inner_pasch_B : forall A B C P Q, BetH A P C -> BetH B Q C -> ~ ColB A B C -> exists x, BetH P x B /\\ BetH Q x A.
Proof.
intros A B C P Q HBetH1 HBetH2 HNC.
unfold BetH in HBetH1.
destruct HBetH1 as [HBet1 [HAP HPC]].
unfold BetH in HBetH2.
destruct HBetH2 as [HBet2 [HBQ HQC]].
apply NColB_NColOrEq in HNC.
assert (HIP := inner_pasch A B C P Q HBet1 HBet2).
destruct HIP as [x [HBet3 HBet4]].

*****
HBet4 : Bet Q x A
HBet3 : Bet P x B
x : Tpoint
HNC : not (Col A B C)
HQC : not (eq Q C)
HBQ : not (eq B Q)
HBet2 : Bet B Q C
HPC : not (eq P C)
HAP : not (eq A P)
HBet1 : Bet A P C
A,B,C,P,Q : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun x : Tpoint => and (BetH P x B) (BetH Q x A))
+++++
exists x.
-----
Lemma inner_pasch_B : forall A B C P Q, BetH A P C -> BetH B Q C -> ~ ColB A B C -> exists x, BetH P x B /\\ BetH Q x A.
Proof.
intros A B C P Q HBetH1 HBetH2 HNC.
unfold BetH in HBetH1.
destruct HBetH1 as [HBet1 [HAP HPC]].
unfold BetH in HBetH2.
destruct HBetH2 as [HBet2 [HBQ HQC]].
apply NColB_NColOrEq in HNC.
assert (HIP := inner_pasch A B C P Q HBet1 HBet2).
destruct HIP as [x [HBet3 HBet4]].
exists x.

*****
HBet4 : Bet Q x A
HBet3 : Bet P x B
x : Tpoint
HNC : not (Col A B C)
HQC : not (eq Q C)
HBQ : not (eq B Q)
HBet2 : Bet B Q C
HPC : not (eq P C)
HAP : not (eq A P)
HBet1 : Bet A P C
A,B,C,P,Q : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (BetH P x B) (BetH Q x A)
+++++
split.
-----
Lemma inner_pasch_B : forall A B C P Q, BetH A P C -> BetH B Q C -> ~ ColB A B C -> exists x, BetH P x B /\\ BetH Q x A.
Proof.
intros A B C P Q HBetH1 HBetH2 HNC.
unfold BetH in HBetH1.
destruct HBetH1 as [HBet1 [HAP HPC]].
unfold BetH in HBetH2.
destruct HBetH2 as [HBet2 [HBQ HQC]].
apply NColB_NColOrEq in HNC.
assert (HIP := inner_pasch A B C P Q HBet1 HBet2).
destruct HIP as [x [HBet3 HBet4]].
exists x.
split.

*****
HBet4 : Bet Q x A
HBet3 : Bet P x B
x : Tpoint
HNC : not (Col A B C)
HQC : not (eq Q C)
HBQ : not (eq B Q)
HBet2 : Bet B Q C
HPC : not (eq P C)
HAP : not (eq A P)
HBet1 : Bet A P C
A,B,C,P,Q : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
BetH P x B
+++++
split.
-----
Lemma inner_pasch_B : forall A B C P Q, BetH A P C -> BetH B Q C -> ~ ColB A B C -> exists x, BetH P x B /\\ BetH Q x A.
Proof.
intros A B C P Q HBetH1 HBetH2 HNC.
unfold BetH in HBetH1.
destruct HBetH1 as [HBet1 [HAP HPC]].
unfold BetH in HBetH2.
destruct HBetH2 as [HBet2 [HBQ HQC]].
apply NColB_NColOrEq in HNC.
assert (HIP := inner_pasch A B C P Q HBet1 HBet2).
destruct HIP as [x [HBet3 HBet4]].
exists x.
split.
split.

*****
HBet4 : Bet Q x A
HBet3 : Bet P x B
x : Tpoint
HNC : not (Col A B C)
HQC : not (eq Q C)
HBQ : not (eq B Q)
HBet2 : Bet B Q C
HPC : not (eq P C)
HAP : not (eq A P)
HBet1 : Bet A P C
A,B,C,P,Q : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet P x B
+++++
try assumption.
-----
Lemma inner_pasch_B : forall A B C P Q, BetH A P C -> BetH B Q C -> ~ ColB A B C -> exists x, BetH P x B /\\ BetH Q x A.
Proof.
intros A B C P Q HBetH1 HBetH2 HNC.
unfold BetH in HBetH1.
destruct HBetH1 as [HBet1 [HAP HPC]].
unfold BetH in HBetH2.
destruct HBetH2 as [HBet2 [HBQ HQC]].
apply NColB_NColOrEq in HNC.
assert (HIP := inner_pasch A B C P Q HBet1 HBet2).
destruct HIP as [x [HBet3 HBet4]].
exists x.
split.
split.

*****
HBet4 : Bet Q x A
HBet3 : Bet P x B
x : Tpoint
HNC : not (Col A B C)
HQC : not (eq Q C)
HBQ : not (eq B Q)
HBet2 : Bet B Q C
HPC : not (eq P C)
HAP : not (eq A P)
HBet1 : Bet A P C
A,B,C,P,Q : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (not (eq P x)) (not (eq x B))
+++++
try assumption.
-----
Lemma inner_pasch_B : forall A B C P Q, BetH A P C -> BetH B Q C -> ~ ColB A B C -> exists x, BetH P x B /\\ BetH Q x A.
Proof.
intros A B C P Q HBetH1 HBetH2 HNC.
unfold BetH in HBetH1.
destruct HBetH1 as [HBet1 [HAP HPC]].
unfold BetH in HBetH2.
destruct HBetH2 as [HBet2 [HBQ HQC]].
apply NColB_NColOrEq in HNC.
assert (HIP := inner_pasch A B C P Q HBet1 HBet2).
destruct HIP as [x [HBet3 HBet4]].
exists x.
split.
split.
try assumption.

*****
HBet4 : Bet Q x A
HBet3 : Bet P x B
x : Tpoint
HNC : not (Col A B C)
HQC : not (eq Q C)
HBQ : not (eq B Q)
HBet2 : Bet B Q C
HPC : not (eq P C)
HAP : not (eq A P)
HBet1 : Bet A P C
A,B,C,P,Q : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (not (eq P x)) (not (eq x B))
+++++
split.
-----
Lemma inner_pasch_B : forall A B C P Q, BetH A P C -> BetH B Q C -> ~ ColB A B C -> exists x, BetH P x B /\\ BetH Q x A.
Proof.
intros A B C P Q HBetH1 HBetH2 HNC.
unfold BetH in HBetH1.
destruct HBetH1 as [HBet1 [HAP HPC]].
unfold BetH in HBetH2.
destruct HBetH2 as [HBet2 [HBQ HQC]].
apply NColB_NColOrEq in HNC.
assert (HIP := inner_pasch A B C P Q HBet1 HBet2).
destruct HIP as [x [HBet3 HBet4]].
exists x.
split.
split.
try assumption.
split.

*****
HBet4 : Bet Q x A
HBet3 : Bet P x B
x : Tpoint
HNC : not (Col A B C)
HQC : not (eq Q C)
HBQ : not (eq B Q)
HBet2 : Bet B Q C
HPC : not (eq P C)
HAP : not (eq A P)
HBet1 : Bet A P C
A,B,C,P,Q : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq P x)
+++++
intro.
-----
Lemma inner_pasch_B : forall A B C P Q, BetH A P C -> BetH B Q C -> ~ ColB A B C -> exists x, BetH P x B /\\ BetH Q x A.
Proof.
intros A B C P Q HBetH1 HBetH2 HNC.
unfold BetH in HBetH1.
destruct HBetH1 as [HBet1 [HAP HPC]].
unfold BetH in HBetH2.
destruct HBetH2 as [HBet2 [HBQ HQC]].
apply NColB_NColOrEq in HNC.
assert (HIP := inner_pasch A B C P Q HBet1 HBet2).
destruct HIP as [x [HBet3 HBet4]].
exists x.
split.
split.
try assumption.
split.
intro.

*****
H : eq P x
HBet4 : Bet Q x A
HBet3 : Bet P x B
x : Tpoint
HNC : not (Col A B C)
HQC : not (eq Q C)
HBQ : not (eq B Q)
HBet2 : Bet B Q C
HPC : not (eq P C)
HAP : not (eq A P)
HBet1 : Bet A P C
A,B,C,P,Q : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
subst.
-----
Lemma inner_pasch_B : forall A B C P Q, BetH A P C -> BetH B Q C -> ~ ColB A B C -> exists x, BetH P x B /\\ BetH Q x A.
Proof.
intros A B C P Q HBetH1 HBetH2 HNC.
unfold BetH in HBetH1.
destruct HBetH1 as [HBet1 [HAP HPC]].
unfold BetH in HBetH2.
destruct HBetH2 as [HBet2 [HBQ HQC]].
apply NColB_NColOrEq in HNC.
assert (HIP := inner_pasch A B C P Q HBet1 HBet2).
destruct HIP as [x [HBet3 HBet4]].
exists x.
split.
split.
try assumption.
split.
intro.
subst.

*****
HBet4 : Bet Q x A
HNC : not (Col A B C)
HQC : not (eq Q C)
HBQ : not (eq B Q)
HBet2 : Bet B Q C
HBet1 : Bet A x C
HAP : not (eq A x)
HPC : not (eq x C)
HBet3 : Bet x x B
A,B,C,Q,x : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply HNC.
-----
Lemma inner_pasch_B : forall A B C P Q, BetH A P C -> BetH B Q C -> ~ ColB A B C -> exists x, BetH P x B /\\ BetH Q x A.
Proof.
intros A B C P Q HBetH1 HBetH2 HNC.
unfold BetH in HBetH1.
destruct HBetH1 as [HBet1 [HAP HPC]].
unfold BetH in HBetH2.
destruct HBetH2 as [HBet2 [HBQ HQC]].
apply NColB_NColOrEq in HNC.
assert (HIP := inner_pasch A B C P Q HBet1 HBet2).
destruct HIP as [x [HBet3 HBet4]].
exists x.
split.
split.
try assumption.
split.
intro.
subst.
apply HNC.

*****
HBet4 : Bet Q x A
HNC : not (Col A B C)
HQC : not (eq Q C)
HBQ : not (eq B Q)
HBet2 : Bet B Q C
HBet1 : Bet A x C
HAP : not (eq A x)
HPC : not (eq x C)
HBet3 : Bet x x B
A,B,C,Q,x : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A B C
+++++
assert_cols.
-----
Lemma inner_pasch_B : forall A B C P Q, BetH A P C -> BetH B Q C -> ~ ColB A B C -> exists x, BetH P x B /\\ BetH Q x A.
Proof.
intros A B C P Q HBetH1 HBetH2 HNC.
unfold BetH in HBetH1.
destruct HBetH1 as [HBet1 [HAP HPC]].
unfold BetH in HBetH2.
destruct HBetH2 as [HBet2 [HBQ HQC]].
apply NColB_NColOrEq in HNC.
assert (HIP := inner_pasch A B C P Q HBet1 HBet2).
destruct HIP as [x [HBet3 HBet4]].
exists x.
split.
split.
try assumption.
split.
intro.
subst.
apply HNC.
assert_cols.

*****
H2 : Col x x B
H1 : Col A x C
H0 : Col B Q C
H : Col Q x A
HBet4 : Bet Q x A
HNC : not (Col A B C)
HQC : not (eq Q C)
HBQ : not (eq B Q)
HBet2 : Bet B Q C
HBet1 : Bet A x C
HAP : not (eq A x)
HPC : not (eq x C)
HBet3 : Bet x x B
A,B,C,Q,x : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A B C
+++++
ColR.
-----
Lemma inner_pasch_B : forall A B C P Q, BetH A P C -> BetH B Q C -> ~ ColB A B C -> exists x, BetH P x B /\\ BetH Q x A.
Proof.
intros A B C P Q HBetH1 HBetH2 HNC.
unfold BetH in HBetH1.
destruct HBetH1 as [HBet1 [HAP HPC]].
unfold BetH in HBetH2.
destruct HBetH2 as [HBet2 [HBQ HQC]].
apply NColB_NColOrEq in HNC.
assert (HIP := inner_pasch A B C P Q HBet1 HBet2).
destruct HIP as [x [HBet3 HBet4]].
exists x.
split.
split.
try assumption.
split.

*****
HBet4 : Bet Q x A
HBet3 : Bet P x B
x : Tpoint
HNC : not (Col A B C)
HQC : not (eq Q C)
HBQ : not (eq B Q)
HBet2 : Bet B Q C
HPC : not (eq P C)
HAP : not (eq A P)
HBet1 : Bet A P C
A,B,C,P,Q : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq x B)
+++++
intro.
-----
Lemma inner_pasch_B : forall A B C P Q, BetH A P C -> BetH B Q C -> ~ ColB A B C -> exists x, BetH P x B /\\ BetH Q x A.
Proof.
intros A B C P Q HBetH1 HBetH2 HNC.
unfold BetH in HBetH1.
destruct HBetH1 as [HBet1 [HAP HPC]].
unfold BetH in HBetH2.
destruct HBetH2 as [HBet2 [HBQ HQC]].
apply NColB_NColOrEq in HNC.
assert (HIP := inner_pasch A B C P Q HBet1 HBet2).
destruct HIP as [x [HBet3 HBet4]].
exists x.
split.
split.
try assumption.
split.
intro.

*****
H : eq x B
HBet4 : Bet Q x A
HBet3 : Bet P x B
x : Tpoint
HNC : not (Col A B C)
HQC : not (eq Q C)
HBQ : not (eq B Q)
HBet2 : Bet B Q C
HPC : not (eq P C)
HAP : not (eq A P)
HBet1 : Bet A P C
A,B,C,P,Q : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
subst.
-----
Lemma inner_pasch_B : forall A B C P Q, BetH A P C -> BetH B Q C -> ~ ColB A B C -> exists x, BetH P x B /\\ BetH Q x A.
Proof.
intros A B C P Q HBetH1 HBetH2 HNC.
unfold BetH in HBetH1.
destruct HBetH1 as [HBet1 [HAP HPC]].
unfold BetH in HBetH2.
destruct HBetH2 as [HBet2 [HBQ HQC]].
apply NColB_NColOrEq in HNC.
assert (HIP := inner_pasch A B C P Q HBet1 HBet2).
destruct HIP as [x [HBet3 HBet4]].
exists x.
split.
split.
try assumption.
split.
intro.
subst.

*****
HBet3 : Bet P B B
HBet4 : Bet Q B A
HNC : not (Col A B C)
HQC : not (eq Q C)
HBQ : not (eq B Q)
HBet2 : Bet B Q C
HPC : not (eq P C)
HAP : not (eq A P)
HBet1 : Bet A P C
A,B,C,P,Q : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply HNC.
-----
Lemma inner_pasch_B : forall A B C P Q, BetH A P C -> BetH B Q C -> ~ ColB A B C -> exists x, BetH P x B /\\ BetH Q x A.
Proof.
intros A B C P Q HBetH1 HBetH2 HNC.
unfold BetH in HBetH1.
destruct HBetH1 as [HBet1 [HAP HPC]].
unfold BetH in HBetH2.
destruct HBetH2 as [HBet2 [HBQ HQC]].
apply NColB_NColOrEq in HNC.
assert (HIP := inner_pasch A B C P Q HBet1 HBet2).
destruct HIP as [x [HBet3 HBet4]].
exists x.
split.
split.
try assumption.
split.
intro.
subst.
apply HNC.

*****
HBet3 : Bet P B B
HBet4 : Bet Q B A
HNC : not (Col A B C)
HQC : not (eq Q C)
HBQ : not (eq B Q)
HBet2 : Bet B Q C
HPC : not (eq P C)
HAP : not (eq A P)
HBet1 : Bet A P C
A,B,C,P,Q : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A B C
+++++
assert_cols.
-----
Lemma inner_pasch_B : forall A B C P Q, BetH A P C -> BetH B Q C -> ~ ColB A B C -> exists x, BetH P x B /\\ BetH Q x A.
Proof.
intros A B C P Q HBetH1 HBetH2 HNC.
unfold BetH in HBetH1.
destruct HBetH1 as [HBet1 [HAP HPC]].
unfold BetH in HBetH2.
destruct HBetH2 as [HBet2 [HBQ HQC]].
apply NColB_NColOrEq in HNC.
assert (HIP := inner_pasch A B C P Q HBet1 HBet2).
destruct HIP as [x [HBet3 HBet4]].
exists x.
split.
split.
try assumption.
split.
intro.
subst.
apply HNC.
assert_cols.

*****
H2 : Col A P C
H1 : Col B Q C
H0 : Col Q B A
H : Col P B B
HBet3 : Bet P B B
HBet4 : Bet Q B A
HNC : not (Col A B C)
HQC : not (eq Q C)
HBQ : not (eq B Q)
HBet2 : Bet B Q C
HPC : not (eq P C)
HAP : not (eq A P)
HBet1 : Bet A P C
A,B,C,P,Q : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A B C
+++++
ColR.
-----
Lemma inner_pasch_B : forall A B C P Q, BetH A P C -> BetH B Q C -> ~ ColB A B C -> exists x, BetH P x B /\\ BetH Q x A.
Proof.
intros A B C P Q HBetH1 HBetH2 HNC.
unfold BetH in HBetH1.
destruct HBetH1 as [HBet1 [HAP HPC]].
unfold BetH in HBetH2.
destruct HBetH2 as [HBet2 [HBQ HQC]].
apply NColB_NColOrEq in HNC.
assert (HIP := inner_pasch A B C P Q HBet1 HBet2).
destruct HIP as [x [HBet3 HBet4]].
exists x.
split.

*****
HBet4 : Bet Q x A
HBet3 : Bet P x B
x : Tpoint
HNC : not (Col A B C)
HQC : not (eq Q C)
HBQ : not (eq B Q)
HBet2 : Bet B Q C
HPC : not (eq P C)
HAP : not (eq A P)
HBet1 : Bet A P C
A,B,C,P,Q : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
BetH Q x A
+++++
split.
-----
Lemma inner_pasch_B : forall A B C P Q, BetH A P C -> BetH B Q C -> ~ ColB A B C -> exists x, BetH P x B /\\ BetH Q x A.
Proof.
intros A B C P Q HBetH1 HBetH2 HNC.
unfold BetH in HBetH1.
destruct HBetH1 as [HBet1 [HAP HPC]].
unfold BetH in HBetH2.
destruct HBetH2 as [HBet2 [HBQ HQC]].
apply NColB_NColOrEq in HNC.
assert (HIP := inner_pasch A B C P Q HBet1 HBet2).
destruct HIP as [x [HBet3 HBet4]].
exists x.
split.
split.

*****
HBet4 : Bet Q x A
HBet3 : Bet P x B
x : Tpoint
HNC : not (Col A B C)
HQC : not (eq Q C)
HBQ : not (eq B Q)
HBet2 : Bet B Q C
HPC : not (eq P C)
HAP : not (eq A P)
HBet1 : Bet A P C
A,B,C,P,Q : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet Q x A
+++++
try assumption.
-----
Lemma inner_pasch_B : forall A B C P Q, BetH A P C -> BetH B Q C -> ~ ColB A B C -> exists x, BetH P x B /\\ BetH Q x A.
Proof.
intros A B C P Q HBetH1 HBetH2 HNC.
unfold BetH in HBetH1.
destruct HBetH1 as [HBet1 [HAP HPC]].
unfold BetH in HBetH2.
destruct HBetH2 as [HBet2 [HBQ HQC]].
apply NColB_NColOrEq in HNC.
assert (HIP := inner_pasch A B C P Q HBet1 HBet2).
destruct HIP as [x [HBet3 HBet4]].
exists x.
split.
split.

*****
HBet4 : Bet Q x A
HBet3 : Bet P x B
x : Tpoint
HNC : not (Col A B C)
HQC : not (eq Q C)
HBQ : not (eq B Q)
HBet2 : Bet B Q C
HPC : not (eq P C)
HAP : not (eq A P)
HBet1 : Bet A P C
A,B,C,P,Q : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (not (eq Q x)) (not (eq x A))
+++++
try assumption.
-----
Lemma inner_pasch_B : forall A B C P Q, BetH A P C -> BetH B Q C -> ~ ColB A B C -> exists x, BetH P x B /\\ BetH Q x A.
Proof.
intros A B C P Q HBetH1 HBetH2 HNC.
unfold BetH in HBetH1.
destruct HBetH1 as [HBet1 [HAP HPC]].
unfold BetH in HBetH2.
destruct HBetH2 as [HBet2 [HBQ HQC]].
apply NColB_NColOrEq in HNC.
assert (HIP := inner_pasch A B C P Q HBet1 HBet2).
destruct HIP as [x [HBet3 HBet4]].
exists x.
split.
split.
try assumption.

*****
HBet4 : Bet Q x A
HBet3 : Bet P x B
x : Tpoint
HNC : not (Col A B C)
HQC : not (eq Q C)
HBQ : not (eq B Q)
HBet2 : Bet B Q C
HPC : not (eq P C)
HAP : not (eq A P)
HBet1 : Bet A P C
A,B,C,P,Q : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (not (eq Q x)) (not (eq x A))
+++++
split.
-----
Lemma inner_pasch_B : forall A B C P Q, BetH A P C -> BetH B Q C -> ~ ColB A B C -> exists x, BetH P x B /\\ BetH Q x A.
Proof.
intros A B C P Q HBetH1 HBetH2 HNC.
unfold BetH in HBetH1.
destruct HBetH1 as [HBet1 [HAP HPC]].
unfold BetH in HBetH2.
destruct HBetH2 as [HBet2 [HBQ HQC]].
apply NColB_NColOrEq in HNC.
assert (HIP := inner_pasch A B C P Q HBet1 HBet2).
destruct HIP as [x [HBet3 HBet4]].
exists x.
split.
split.
try assumption.
split.

*****
HBet4 : Bet Q x A
HBet3 : Bet P x B
x : Tpoint
HNC : not (Col A B C)
HQC : not (eq Q C)
HBQ : not (eq B Q)
HBet2 : Bet B Q C
HPC : not (eq P C)
HAP : not (eq A P)
HBet1 : Bet A P C
A,B,C,P,Q : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq Q x)
+++++
intro.
-----
Lemma inner_pasch_B : forall A B C P Q, BetH A P C -> BetH B Q C -> ~ ColB A B C -> exists x, BetH P x B /\\ BetH Q x A.
Proof.
intros A B C P Q HBetH1 HBetH2 HNC.
unfold BetH in HBetH1.
destruct HBetH1 as [HBet1 [HAP HPC]].
unfold BetH in HBetH2.
destruct HBetH2 as [HBet2 [HBQ HQC]].
apply NColB_NColOrEq in HNC.
assert (HIP := inner_pasch A B C P Q HBet1 HBet2).
destruct HIP as [x [HBet3 HBet4]].
exists x.
split.
split.
try assumption.
split.
intro.

*****
H : eq Q x
HBet4 : Bet Q x A
HBet3 : Bet P x B
x : Tpoint
HNC : not (Col A B C)
HQC : not (eq Q C)
HBQ : not (eq B Q)
HBet2 : Bet B Q C
HPC : not (eq P C)
HAP : not (eq A P)
HBet1 : Bet A P C
A,B,C,P,Q : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
subst.
-----
Lemma inner_pasch_B : forall A B C P Q, BetH A P C -> BetH B Q C -> ~ ColB A B C -> exists x, BetH P x B /\\ BetH Q x A.
Proof.
intros A B C P Q HBetH1 HBetH2 HNC.
unfold BetH in HBetH1.
destruct HBetH1 as [HBet1 [HAP HPC]].
unfold BetH in HBetH2.
destruct HBetH2 as [HBet2 [HBQ HQC]].
apply NColB_NColOrEq in HNC.
assert (HIP := inner_pasch A B C P Q HBet1 HBet2).
destruct HIP as [x [HBet3 HBet4]].
exists x.
split.
split.
try assumption.
split.
intro.
subst.

*****
HBet4 : Bet x x A
HBet3 : Bet P x B
HNC : not (Col A B C)
HBet2 : Bet B x C
HBQ : not (eq B x)
HQC : not (eq x C)
x : Tpoint
HPC : not (eq P C)
HAP : not (eq A P)
HBet1 : Bet A P C
A,B,C,P : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply HNC.
-----
Lemma inner_pasch_B : forall A B C P Q, BetH A P C -> BetH B Q C -> ~ ColB A B C -> exists x, BetH P x B /\\ BetH Q x A.
Proof.
intros A B C P Q HBetH1 HBetH2 HNC.
unfold BetH in HBetH1.
destruct HBetH1 as [HBet1 [HAP HPC]].
unfold BetH in HBetH2.
destruct HBetH2 as [HBet2 [HBQ HQC]].
apply NColB_NColOrEq in HNC.
assert (HIP := inner_pasch A B C P Q HBet1 HBet2).
destruct HIP as [x [HBet3 HBet4]].
exists x.
split.
split.
try assumption.
split.
intro.
subst.
apply HNC.

*****
HBet4 : Bet x x A
HBet3 : Bet P x B
HNC : not (Col A B C)
HBet2 : Bet B x C
HBQ : not (eq B x)
HQC : not (eq x C)
x : Tpoint
HPC : not (eq P C)
HAP : not (eq A P)
HBet1 : Bet A P C
A,B,C,P : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A B C
+++++
assert_cols.
-----
Lemma inner_pasch_B : forall A B C P Q, BetH A P C -> BetH B Q C -> ~ ColB A B C -> exists x, BetH P x B /\\ BetH Q x A.
Proof.
intros A B C P Q HBetH1 HBetH2 HNC.
unfold BetH in HBetH1.
destruct HBetH1 as [HBet1 [HAP HPC]].
unfold BetH in HBetH2.
destruct HBetH2 as [HBet2 [HBQ HQC]].
apply NColB_NColOrEq in HNC.
assert (HIP := inner_pasch A B C P Q HBet1 HBet2).
destruct HIP as [x [HBet3 HBet4]].
exists x.
split.
split.
try assumption.
split.
intro.
subst.
apply HNC.
assert_cols.

*****
H2 : Col A P C
H1 : Col B x C
H0 : Col P x B
H : Col x x A
HBet4 : Bet x x A
HBet3 : Bet P x B
HNC : not (Col A B C)
HBet2 : Bet B x C
HBQ : not (eq B x)
HQC : not (eq x C)
x : Tpoint
HPC : not (eq P C)
HAP : not (eq A P)
HBet1 : Bet A P C
A,B,C,P : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A B C
+++++
ColR.
-----
Lemma inner_pasch_B : forall A B C P Q, BetH A P C -> BetH B Q C -> ~ ColB A B C -> exists x, BetH P x B /\\ BetH Q x A.
Proof.
intros A B C P Q HBetH1 HBetH2 HNC.
unfold BetH in HBetH1.
destruct HBetH1 as [HBet1 [HAP HPC]].
unfold BetH in HBetH2.
destruct HBetH2 as [HBet2 [HBQ HQC]].
apply NColB_NColOrEq in HNC.
assert (HIP := inner_pasch A B C P Q HBet1 HBet2).
destruct HIP as [x [HBet3 HBet4]].
exists x.
split.
split.
try assumption.
split.

*****
HBet4 : Bet Q x A
HBet3 : Bet P x B
x : Tpoint
HNC : not (Col A B C)
HQC : not (eq Q C)
HBQ : not (eq B Q)
HBet2 : Bet B Q C
HPC : not (eq P C)
HAP : not (eq A P)
HBet1 : Bet A P C
A,B,C,P,Q : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq x A)
+++++
intro.
-----
Lemma inner_pasch_B : forall A B C P Q, BetH A P C -> BetH B Q C -> ~ ColB A B C -> exists x, BetH P x B /\\ BetH Q x A.
Proof.
intros A B C P Q HBetH1 HBetH2 HNC.
unfold BetH in HBetH1.
destruct HBetH1 as [HBet1 [HAP HPC]].
unfold BetH in HBetH2.
destruct HBetH2 as [HBet2 [HBQ HQC]].
apply NColB_NColOrEq in HNC.
assert (HIP := inner_pasch A B C P Q HBet1 HBet2).
destruct HIP as [x [HBet3 HBet4]].
exists x.
split.
split.
try assumption.
split.
intro.

*****
H : eq x A
HBet4 : Bet Q x A
HBet3 : Bet P x B
x : Tpoint
HNC : not (Col A B C)
HQC : not (eq Q C)
HBQ : not (eq B Q)
HBet2 : Bet B Q C
HPC : not (eq P C)
HAP : not (eq A P)
HBet1 : Bet A P C
A,B,C,P,Q : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
subst.
-----
Lemma inner_pasch_B : forall A B C P Q, BetH A P C -> BetH B Q C -> ~ ColB A B C -> exists x, BetH P x B /\\ BetH Q x A.
Proof.
intros A B C P Q HBetH1 HBetH2 HNC.
unfold BetH in HBetH1.
destruct HBetH1 as [HBet1 [HAP HPC]].
unfold BetH in HBetH2.
destruct HBetH2 as [HBet2 [HBQ HQC]].
apply NColB_NColOrEq in HNC.
assert (HIP := inner_pasch A B C P Q HBet1 HBet2).
destruct HIP as [x [HBet3 HBet4]].
exists x.
split.
split.
try assumption.
split.
intro.
subst.

*****
HBet3 : Bet P A B
HBet4 : Bet Q A A
HNC : not (Col A B C)
HQC : not (eq Q C)
HBQ : not (eq B Q)
HBet2 : Bet B Q C
HPC : not (eq P C)
HAP : not (eq A P)
HBet1 : Bet A P C
A,B,C,P,Q : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply HNC.
-----
Lemma inner_pasch_B : forall A B C P Q, BetH A P C -> BetH B Q C -> ~ ColB A B C -> exists x, BetH P x B /\\ BetH Q x A.
Proof.
intros A B C P Q HBetH1 HBetH2 HNC.
unfold BetH in HBetH1.
destruct HBetH1 as [HBet1 [HAP HPC]].
unfold BetH in HBetH2.
destruct HBetH2 as [HBet2 [HBQ HQC]].
apply NColB_NColOrEq in HNC.
assert (HIP := inner_pasch A B C P Q HBet1 HBet2).
destruct HIP as [x [HBet3 HBet4]].
exists x.
split.
split.
try assumption.
split.
intro.
subst.
apply HNC.

*****
HBet3 : Bet P A B
HBet4 : Bet Q A A
HNC : not (Col A B C)
HQC : not (eq Q C)
HBQ : not (eq B Q)
HBet2 : Bet B Q C
HPC : not (eq P C)
HAP : not (eq A P)
HBet1 : Bet A P C
A,B,C,P,Q : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A B C
+++++
assert_cols.
-----
Lemma inner_pasch_B : forall A B C P Q, BetH A P C -> BetH B Q C -> ~ ColB A B C -> exists x, BetH P x B /\\ BetH Q x A.
Proof.
intros A B C P Q HBetH1 HBetH2 HNC.
unfold BetH in HBetH1.
destruct HBetH1 as [HBet1 [HAP HPC]].
unfold BetH in HBetH2.
destruct HBetH2 as [HBet2 [HBQ HQC]].
apply NColB_NColOrEq in HNC.
assert (HIP := inner_pasch A B C P Q HBet1 HBet2).
destruct HIP as [x [HBet3 HBet4]].
exists x.
split.
split.
try assumption.
split.
intro.
subst.
apply HNC.
assert_cols.

*****
H2 : Col A P C
H1 : Col B Q C
H0 : Col Q A A
H : Col P A B
HBet3 : Bet P A B
HBet4 : Bet Q A A
HNC : not (Col A B C)
HQC : not (eq Q C)
HBQ : not (eq B Q)
HBet2 : Bet B Q C
HPC : not (eq P C)
HAP : not (eq A P)
HBet1 : Bet A P C
A,B,C,P,Q : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A B C
+++++
ColR.
-----
Lemma inner_pasch_B : forall A B C P Q, BetH A P C -> BetH B Q C -> ~ ColB A B C -> exists x, BetH P x B /\\ BetH Q x A.
Proof.
intros A B C P Q HBetH1 HBetH2 HNC.
unfold BetH in HBetH1.
destruct HBetH1 as [HBet1 [HAP HPC]].
unfold BetH in HBetH2.
destruct HBetH2 as [HBet2 [HBQ HQC]].
apply NColB_NColOrEq in HNC.
assert (HIP := inner_pasch A B C P Q HBet1 HBet2).
destruct HIP as [x [HBet3 HBet4]].
exists x.
split.

*****

*****

+++++
Qed.
-----
Lemma between_symmetry_B : forall A B C, BetH A B C -> BetH C B A.
-----
Lemma between_symmetry_B : forall A B C, BetH A B C -> BetH C B A.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C : Tpoint) (_ : BetH A B C), BetH C B A
+++++
Proof.
-----
Lemma between_symmetry_B : forall A B C, BetH A B C -> BetH C B A.
Proof.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C : Tpoint) (_ : BetH A B C), BetH C B A
+++++
unfold BetH.
-----
Lemma between_symmetry_B : forall A B C, BetH A B C -> BetH C B A.
Proof.
unfold BetH.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C : Tpoint) (_ : and (Bet A B C) (and (not (eq A B)) (not (eq B C)))), and (Bet C B A) (and (not (eq C B)) (not (eq B A)))
+++++
intros A B C HBet.
-----
Lemma between_symmetry_B : forall A B C, BetH A B C -> BetH C B A.
Proof.
unfold BetH.
intros A B C HBet.

*****
HBet : and (Bet A B C) (and (not (eq A B)) (not (eq B C)))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Bet C B A) (and (not (eq C B)) (not (eq B A)))
+++++
repeat split.
-----
Lemma between_symmetry_B : forall A B C, BetH A B C -> BetH C B A.
Proof.
unfold BetH.
intros A B C HBet.
repeat split.

*****
HBet : and (Bet A B C) (and (not (eq A B)) (not (eq B C)))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet C B A
+++++
intuition.
-----
Lemma between_symmetry_B : forall A B C, BetH A B C -> BetH C B A.
Proof.
unfold BetH.
intros A B C HBet.
repeat split.

*****
HBet : and (Bet A B C) (and (not (eq A B)) (not (eq B C)))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq C B)
+++++
intuition.
-----
Lemma between_symmetry_B : forall A B C, BetH A B C -> BetH C B A.
Proof.
unfold BetH.
intros A B C HBet.
repeat split.

*****
HBet : and (Bet A B C) (and (not (eq A B)) (not (eq B C)))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq B A)
+++++
intuition.
-----
Lemma between_symmetry_B : forall A B C, BetH A B C -> BetH C B A.
Proof.
unfold BetH.
intros A B C HBet.
repeat split.

*****

*****

+++++
Qed.
-----
Lemma five_segment_B : forall A A' B B' C C' D D' : Tpoint,\n    Cong A B A' B' ->\n    Cong B C B' C' ->\n    Cong A D A' D' ->\n    Cong B D B' D' ->\n    ~ (A <> B /\ B <> C /\ ~ BetH A B C) ->\n    ~ (A' <> B' /\ B' <> C' /\ ~ BetH A' B' C') ->\n    A <> B -> Cong C D C' D'.
-----
Lemma five_segment_B : forall A A' B B' C C' D D' : Tpoint, Cong A B A' B' -> Cong B C B' C' -> Cong A D A' D' -> Cong B D B' D' -> ~ (A <> B /\\ B <> C /\\ ~ BetH A B C) -> ~ (A' <> B' /\\ B' <> C' /\\ ~ BetH A' B' C') -> A <> B -> Cong C D C' D'.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A A' B B' C C' D D' : Tpoint) (_ : Cong A B A' B') (_ : Cong B C B' C') (_ : Cong A D A' D') (_ : Cong B D B' D') (_ : not (and (not (eq A B)) (and (not (eq B C)) (not (BetH A B C))))) (_ : not (and (not (eq A' B')) (and (not (eq B' C')) (not (BetH A' B' C'))))) (_ : not (eq A B)), Cong C D C' D'
+++++
Proof.
-----
Lemma five_segment_B : forall A A' B B' C C' D D' : Tpoint, Cong A B A' B' -> Cong B C B' C' -> Cong A D A' D' -> Cong B D B' D' -> ~ (A <> B /\\ B <> C /\\ ~ BetH A B C) -> ~ (A' <> B' /\\ B' <> C' /\\ ~ BetH A' B' C') -> A <> B -> Cong C D C' D'.
Proof.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A A' B B' C C' D D' : Tpoint) (_ : Cong A B A' B') (_ : Cong B C B' C') (_ : Cong A D A' D') (_ : Cong B D B' D') (_ : not (and (not (eq A B)) (and (not (eq B C)) (not (BetH A B C))))) (_ : not (and (not (eq A' B')) (and (not (eq B' C')) (not (BetH A' B' C'))))) (_ : not (eq A B)), Cong C D C' D'
+++++
intros.
-----
Lemma five_segment_B : forall A A' B B' C C' D D' : Tpoint, Cong A B A' B' -> Cong B C B' C' -> Cong A D A' D' -> Cong B D B' D' -> ~ (A <> B /\\ B <> C /\\ ~ BetH A B C) -> ~ (A' <> B' /\\ B' <> C' /\\ ~ BetH A' B' C') -> A <> B -> Cong C D C' D'.
Proof.
intros.

*****
H5 : not (eq A B)
H4 : not (and (not (eq A' B')) (and (not (eq B' C')) (not (BetH A' B' C'))))
H3 : not (and (not (eq A B)) (and (not (eq B C)) (not (BetH A B C))))
H2 : Cong B D B' D'
H1 : Cong A D A' D'
H0 : Cong B C B' C'
H : Cong A B A' B'
A,A',B,B',C,C',D,D' : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong C D C' D'
+++++
assert (HBet1 : T A B C).
-----
Lemma five_segment_B : forall A A' B B' C C' D D' : Tpoint, Cong A B A' B' -> Cong B C B' C' -> Cong A D A' D' -> Cong B D B' D' -> ~ (A <> B /\\ B <> C /\\ ~ BetH A B C) -> ~ (A' <> B' /\\ B' <> C' /\\ ~ BetH A' B' C') -> A <> B -> Cong C D C' D'.
Proof.
intros.
assert (HBet1 : T A B C).

*****
H5 : not (eq A B)
H4 : not (and (not (eq A' B')) (and (not (eq B' C')) (not (BetH A' B' C'))))
H3 : not (and (not (eq A B)) (and (not (eq B C)) (not (BetH A B C))))
H2 : Cong B D B' D'
H1 : Cong A D A' D'
H0 : Cong B C B' C'
H : Cong A B A' B'
A,A',B,B',C,C',D,D' : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
T A B C
+++++
unfold T.
-----
Lemma five_segment_B : forall A A' B B' C C' D D' : Tpoint, Cong A B A' B' -> Cong B C B' C' -> Cong A D A' D' -> Cong B D B' D' -> ~ (A <> B /\\ B <> C /\\ ~ BetH A B C) -> ~ (A' <> B' /\\ B' <> C' /\\ ~ BetH A' B' C') -> A <> B -> Cong C D C' D'.
Proof.
intros.
assert (HBet1 : T A B C).
unfold T.

*****
H5 : not (eq A B)
H4 : not (and (not (eq A' B')) (and (not (eq B' C')) (not (BetH A' B' C'))))
H3 : not (and (not (eq A B)) (and (not (eq B C)) (not (BetH A B C))))
H2 : Cong B D B' D'
H1 : Cong A D A' D'
H0 : Cong B C B' C'
H : Cong A B A' B'
A,A',B,B',C,C',D,D' : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (and (not (eq A B)) (and (not (eq B C)) (not (BetH A B C))))
+++++
assumption.
-----
Lemma five_segment_B : forall A A' B B' C C' D D' : Tpoint, Cong A B A' B' -> Cong B C B' C' -> Cong A D A' D' -> Cong B D B' D' -> ~ (A <> B /\\ B <> C /\\ ~ BetH A B C) -> ~ (A' <> B' /\\ B' <> C' /\\ ~ BetH A' B' C') -> A <> B -> Cong C D C' D'.
Proof.
intros.
assert (HBet1 : T A B C).

*****
HBet1 : T A B C
H5 : not (eq A B)
H4 : not (and (not (eq A' B')) (and (not (eq B' C')) (not (BetH A' B' C'))))
H3 : not (and (not (eq A B)) (and (not (eq B C)) (not (BetH A B C))))
H2 : Cong B D B' D'
H1 : Cong A D A' D'
H0 : Cong B C B' C'
H : Cong A B A' B'
A,A',B,B',C,C',D,D' : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong C D C' D'
+++++
idtac.
-----
Lemma five_segment_B : forall A A' B B' C C' D D' : Tpoint, Cong A B A' B' -> Cong B C B' C' -> Cong A D A' D' -> Cong B D B' D' -> ~ (A <> B /\\ B <> C /\\ ~ BetH A B C) -> ~ (A' <> B' /\\ B' <> C' /\\ ~ BetH A' B' C') -> A <> B -> Cong C D C' D'.
Proof.
intros.
assert (HBet1 : T A B C).
idtac.

*****
HBet1 : T A B C
H5 : not (eq A B)
H4 : not (and (not (eq A' B')) (and (not (eq B' C')) (not (BetH A' B' C'))))
H3 : not (and (not (eq A B)) (and (not (eq B C)) (not (BetH A B C))))
H2 : Cong B D B' D'
H1 : Cong A D A' D'
H0 : Cong B C B' C'
H : Cong A B A' B'
A,A',B,B',C,C',D,D' : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong C D C' D'
+++++
assert (HBet2 : T A' B' C').
-----
Lemma five_segment_B : forall A A' B B' C C' D D' : Tpoint, Cong A B A' B' -> Cong B C B' C' -> Cong A D A' D' -> Cong B D B' D' -> ~ (A <> B /\\ B <> C /\\ ~ BetH A B C) -> ~ (A' <> B' /\\ B' <> C' /\\ ~ BetH A' B' C') -> A <> B -> Cong C D C' D'.
Proof.
intros.
assert (HBet1 : T A B C).
idtac.
assert (HBet2 : T A' B' C').

*****
HBet1 : T A B C
H5 : not (eq A B)
H4 : not (and (not (eq A' B')) (and (not (eq B' C')) (not (BetH A' B' C'))))
H3 : not (and (not (eq A B)) (and (not (eq B C)) (not (BetH A B C))))
H2 : Cong B D B' D'
H1 : Cong A D A' D'
H0 : Cong B C B' C'
H : Cong A B A' B'
A,A',B,B',C,C',D,D' : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
T A' B' C'
+++++
unfold T.
-----
Lemma five_segment_B : forall A A' B B' C C' D D' : Tpoint, Cong A B A' B' -> Cong B C B' C' -> Cong A D A' D' -> Cong B D B' D' -> ~ (A <> B /\\ B <> C /\\ ~ BetH A B C) -> ~ (A' <> B' /\\ B' <> C' /\\ ~ BetH A' B' C') -> A <> B -> Cong C D C' D'.
Proof.
intros.
assert (HBet1 : T A B C).
idtac.
assert (HBet2 : T A' B' C').
unfold T.

*****
HBet1 : T A B C
H5 : not (eq A B)
H4 : not (and (not (eq A' B')) (and (not (eq B' C')) (not (BetH A' B' C'))))
H3 : not (and (not (eq A B)) (and (not (eq B C)) (not (BetH A B C))))
H2 : Cong B D B' D'
H1 : Cong A D A' D'
H0 : Cong B C B' C'
H : Cong A B A' B'
A,A',B,B',C,C',D,D' : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (and (not (eq A' B')) (and (not (eq B' C')) (not (BetH A' B' C'))))
+++++
assumption.
-----
Lemma five_segment_B : forall A A' B B' C C' D D' : Tpoint, Cong A B A' B' -> Cong B C B' C' -> Cong A D A' D' -> Cong B D B' D' -> ~ (A <> B /\\ B <> C /\\ ~ BetH A B C) -> ~ (A' <> B' /\\ B' <> C' /\\ ~ BetH A' B' C') -> A <> B -> Cong C D C' D'.
Proof.
intros.
assert (HBet1 : T A B C).
idtac.
assert (HBet2 : T A' B' C').

*****
HBet2 : T A' B' C'
HBet1 : T A B C
H5 : not (eq A B)
H4 : not (and (not (eq A' B')) (and (not (eq B' C')) (not (BetH A' B' C'))))
H3 : not (and (not (eq A B)) (and (not (eq B C)) (not (BetH A B C))))
H2 : Cong B D B' D'
H1 : Cong A D A' D'
H0 : Cong B C B' C'
H : Cong A B A' B'
A,A',B,B',C,C',D,D' : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong C D C' D'
+++++
idtac.
-----
Lemma five_segment_B : forall A A' B B' C C' D D' : Tpoint, Cong A B A' B' -> Cong B C B' C' -> Cong A D A' D' -> Cong B D B' D' -> ~ (A <> B /\\ B <> C /\\ ~ BetH A B C) -> ~ (A' <> B' /\\ B' <> C' /\\ ~ BetH A' B' C') -> A <> B -> Cong C D C' D'.
Proof.
intros.
assert (HBet1 : T A B C).
idtac.
assert (HBet2 : T A' B' C').
idtac.

*****
HBet2 : T A' B' C'
HBet1 : T A B C
H5 : not (eq A B)
H4 : not (and (not (eq A' B')) (and (not (eq B' C')) (not (BetH A' B' C'))))
H3 : not (and (not (eq A B)) (and (not (eq B C)) (not (BetH A B C))))
H2 : Cong B D B' D'
H1 : Cong A D A' D'
H0 : Cong B C B' C'
H : Cong A B A' B'
A,A',B,B',C,C',D,D' : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong C D C' D'
+++++
apply T_Bet in H3.
-----
Lemma five_segment_B : forall A A' B B' C C' D D' : Tpoint, Cong A B A' B' -> Cong B C B' C' -> Cong A D A' D' -> Cong B D B' D' -> ~ (A <> B /\\ B <> C /\\ ~ BetH A B C) -> ~ (A' <> B' /\\ B' <> C' /\\ ~ BetH A' B' C') -> A <> B -> Cong C D C' D'.
Proof.
intros.
assert (HBet1 : T A B C).
idtac.
assert (HBet2 : T A' B' C').
idtac.
apply T_Bet in H3.

*****
HBet2 : T A' B' C'
HBet1 : T A B C
H5 : not (eq A B)
H4 : not (and (not (eq A' B')) (and (not (eq B' C')) (not (BetH A' B' C'))))
H3 : Bet A B C
H2 : Cong B D B' D'
H1 : Cong A D A' D'
H0 : Cong B C B' C'
H : Cong A B A' B'
A,A',B,B',C,C',D,D' : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong C D C' D'
+++++
apply T_Bet in H4.
-----
Lemma five_segment_B : forall A A' B B' C C' D D' : Tpoint, Cong A B A' B' -> Cong B C B' C' -> Cong A D A' D' -> Cong B D B' D' -> ~ (A <> B /\\ B <> C /\\ ~ BetH A B C) -> ~ (A' <> B' /\\ B' <> C' /\\ ~ BetH A' B' C') -> A <> B -> Cong C D C' D'.
Proof.
intros.
assert (HBet1 : T A B C).
idtac.
assert (HBet2 : T A' B' C').
idtac.
apply T_Bet in H3.
apply T_Bet in H4.

*****
HBet2 : T A' B' C'
HBet1 : T A B C
H5 : not (eq A B)
H4 : Bet A' B' C'
H3 : Bet A B C
H2 : Cong B D B' D'
H1 : Cong A D A' D'
H0 : Cong B C B' C'
H : Cong A B A' B'
A,A',B,B',C,C',D,D' : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong C D C' D'
+++++
apply five_segment with A A' B B'.
-----
Lemma five_segment_B : forall A A' B B' C C' D D' : Tpoint, Cong A B A' B' -> Cong B C B' C' -> Cong A D A' D' -> Cong B D B' D' -> ~ (A <> B /\\ B <> C /\\ ~ BetH A B C) -> ~ (A' <> B' /\\ B' <> C' /\\ ~ BetH A' B' C') -> A <> B -> Cong C D C' D'.
Proof.
intros.
assert (HBet1 : T A B C).
idtac.
assert (HBet2 : T A' B' C').
idtac.
apply T_Bet in H3.
apply T_Bet in H4.
apply five_segment with A A' B B'.

*****
HBet2 : T A' B' C'
HBet1 : T A B C
H5 : not (eq A B)
H4 : Bet A' B' C'
H3 : Bet A B C
H2 : Cong B D B' D'
H1 : Cong A D A' D'
H0 : Cong B C B' C'
H : Cong A B A' B'
A,A',B,B',C,C',D,D' : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong A B A' B'
+++++
assumption.
-----
Lemma five_segment_B : forall A A' B B' C C' D D' : Tpoint, Cong A B A' B' -> Cong B C B' C' -> Cong A D A' D' -> Cong B D B' D' -> ~ (A <> B /\\ B <> C /\\ ~ BetH A B C) -> ~ (A' <> B' /\\ B' <> C' /\\ ~ BetH A' B' C') -> A <> B -> Cong C D C' D'.
Proof.
intros.
assert (HBet1 : T A B C).
idtac.
assert (HBet2 : T A' B' C').
idtac.
apply T_Bet in H3.
apply T_Bet in H4.
apply five_segment with A A' B B'.

*****
HBet2 : T A' B' C'
HBet1 : T A B C
H5 : not (eq A B)
H4 : Bet A' B' C'
H3 : Bet A B C
H2 : Cong B D B' D'
H1 : Cong A D A' D'
H0 : Cong B C B' C'
H : Cong A B A' B'
A,A',B,B',C,C',D,D' : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong B C B' C'
+++++
assumption.
-----
Lemma five_segment_B : forall A A' B B' C C' D D' : Tpoint, Cong A B A' B' -> Cong B C B' C' -> Cong A D A' D' -> Cong B D B' D' -> ~ (A <> B /\\ B <> C /\\ ~ BetH A B C) -> ~ (A' <> B' /\\ B' <> C' /\\ ~ BetH A' B' C') -> A <> B -> Cong C D C' D'.
Proof.
intros.
assert (HBet1 : T A B C).
idtac.
assert (HBet2 : T A' B' C').
idtac.
apply T_Bet in H3.
apply T_Bet in H4.
apply five_segment with A A' B B'.

*****
HBet2 : T A' B' C'
HBet1 : T A B C
H5 : not (eq A B)
H4 : Bet A' B' C'
H3 : Bet A B C
H2 : Cong B D B' D'
H1 : Cong A D A' D'
H0 : Cong B C B' C'
H : Cong A B A' B'
A,A',B,B',C,C',D,D' : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong A D A' D'
+++++
assumption.
-----
Lemma five_segment_B : forall A A' B B' C C' D D' : Tpoint, Cong A B A' B' -> Cong B C B' C' -> Cong A D A' D' -> Cong B D B' D' -> ~ (A <> B /\\ B <> C /\\ ~ BetH A B C) -> ~ (A' <> B' /\\ B' <> C' /\\ ~ BetH A' B' C') -> A <> B -> Cong C D C' D'.
Proof.
intros.
assert (HBet1 : T A B C).
idtac.
assert (HBet2 : T A' B' C').
idtac.
apply T_Bet in H3.
apply T_Bet in H4.
apply five_segment with A A' B B'.

*****
HBet2 : T A' B' C'
HBet1 : T A B C
H5 : not (eq A B)
H4 : Bet A' B' C'
H3 : Bet A B C
H2 : Cong B D B' D'
H1 : Cong A D A' D'
H0 : Cong B C B' C'
H : Cong A B A' B'
A,A',B,B',C,C',D,D' : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong B D B' D'
+++++
assumption.
-----
Lemma five_segment_B : forall A A' B B' C C' D D' : Tpoint, Cong A B A' B' -> Cong B C B' C' -> Cong A D A' D' -> Cong B D B' D' -> ~ (A <> B /\\ B <> C /\\ ~ BetH A B C) -> ~ (A' <> B' /\\ B' <> C' /\\ ~ BetH A' B' C') -> A <> B -> Cong C D C' D'.
Proof.
intros.
assert (HBet1 : T A B C).
idtac.
assert (HBet2 : T A' B' C').
idtac.
apply T_Bet in H3.
apply T_Bet in H4.
apply five_segment with A A' B B'.

*****
HBet2 : T A' B' C'
HBet1 : T A B C
H5 : not (eq A B)
H4 : Bet A' B' C'
H3 : Bet A B C
H2 : Cong B D B' D'
H1 : Cong A D A' D'
H0 : Cong B C B' C'
H : Cong A B A' B'
A,A',B,B',C,C',D,D' : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet A B C
+++++
assumption.
-----
Lemma five_segment_B : forall A A' B B' C C' D D' : Tpoint, Cong A B A' B' -> Cong B C B' C' -> Cong A D A' D' -> Cong B D B' D' -> ~ (A <> B /\\ B <> C /\\ ~ BetH A B C) -> ~ (A' <> B' /\\ B' <> C' /\\ ~ BetH A' B' C') -> A <> B -> Cong C D C' D'.
Proof.
intros.
assert (HBet1 : T A B C).
idtac.
assert (HBet2 : T A' B' C').
idtac.
apply T_Bet in H3.
apply T_Bet in H4.
apply five_segment with A A' B B'.

*****
HBet2 : T A' B' C'
HBet1 : T A B C
H5 : not (eq A B)
H4 : Bet A' B' C'
H3 : Bet A B C
H2 : Cong B D B' D'
H1 : Cong A D A' D'
H0 : Cong B C B' C'
H : Cong A B A' B'
A,A',B,B',C,C',D,D' : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet A' B' C'
+++++
assumption.
-----
Lemma five_segment_B : forall A A' B B' C C' D D' : Tpoint, Cong A B A' B' -> Cong B C B' C' -> Cong A D A' D' -> Cong B D B' D' -> ~ (A <> B /\\ B <> C /\\ ~ BetH A B C) -> ~ (A' <> B' /\\ B' <> C' /\\ ~ BetH A' B' C') -> A <> B -> Cong C D C' D'.
Proof.
intros.
assert (HBet1 : T A B C).
idtac.
assert (HBet2 : T A' B' C').
idtac.
apply T_Bet in H3.
apply T_Bet in H4.
apply five_segment with A A' B B'.

*****
HBet2 : T A' B' C'
HBet1 : T A B C
H5 : not (eq A B)
H4 : Bet A' B' C'
H3 : Bet A B C
H2 : Cong B D B' D'
H1 : Cong A D A' D'
H0 : Cong B C B' C'
H : Cong A B A' B'
A,A',B,B',C,C',D,D' : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq A B)
+++++
assumption.
-----
Lemma five_segment_B : forall A A' B B' C C' D D' : Tpoint, Cong A B A' B' -> Cong B C B' C' -> Cong A D A' D' -> Cong B D B' D' -> ~ (A <> B /\\ B <> C /\\ ~ BetH A B C) -> ~ (A' <> B' /\\ B' <> C' /\\ ~ BetH A' B' C') -> A <> B -> Cong C D C' D'.
Proof.
intros.
assert (HBet1 : T A B C).

*****

*****

+++++
Qed.
-----
Lemma segment_construction_B : forall A B C D, A<>B -> exists E, T A B E /\ Cong B E C D.
-----
Lemma segment_construction_B : forall A B C D, A<>B -> exists E, T A B E /\\ Cong B E C D.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C D : Tpoint) (_ : not (eq A B)), ex (fun E : Tpoint => and (T A B E) (Cong B E C D))
+++++
Proof.
-----
Lemma segment_construction_B : forall A B C D, A<>B -> exists E, T A B E /\\ Cong B E C D.
Proof.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C D : Tpoint) (_ : not (eq A B)), ex (fun E : Tpoint => and (T A B E) (Cong B E C D))
+++++
intros A B C D HDiff.
-----
Lemma segment_construction_B : forall A B C D, A<>B -> exists E, T A B E /\\ Cong B E C D.
Proof.
intros A B C D HDiff.

*****
HDiff : not (eq A B)
A,B,C,D : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun E : Tpoint => and (T A B E) (Cong B E C D))
+++++
assert (T := segment_construction A B C D).
-----
Lemma segment_construction_B : forall A B C D, A<>B -> exists E, T A B E /\\ Cong B E C D.
Proof.
intros A B C D HDiff.
assert (T := segment_construction A B C D).

*****
T : ex (fun E : Tpoint => and (Bet A B E) (Cong B E C D))
HDiff : not (eq A B)
A,B,C,D : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun E : Tpoint => and (T A B E) (Cong B E C D))
+++++
destruct T as [E [HBet HCong]].
-----
Lemma segment_construction_B : forall A B C D, A<>B -> exists E, T A B E /\\ Cong B E C D.
Proof.
intros A B C D HDiff.
assert (T := segment_construction A B C D).
destruct T as [E [HBet HCong]].

*****
HCong : Cong B E C D
HBet : Bet A B E
E : Tpoint
HDiff : not (eq A B)
A,B,C,D : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun E : Tpoint => and (T A B E) (Cong B E C D))
+++++
apply Bet_T in HBet.
-----
Lemma segment_construction_B : forall A B C D, A<>B -> exists E, T A B E /\\ Cong B E C D.
Proof.
intros A B C D HDiff.
assert (T := segment_construction A B C D).
destruct T as [E [HBet HCong]].
apply Bet_T in HBet.

*****
HCong : Cong B E C D
HBet : T A B E
E : Tpoint
HDiff : not (eq A B)
A,B,C,D : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun E : Tpoint => and (T A B E) (Cong B E C D))
+++++
exists E.
-----
Lemma segment_construction_B : forall A B C D, A<>B -> exists E, T A B E /\\ Cong B E C D.
Proof.
intros A B C D HDiff.
assert (T := segment_construction A B C D).
destruct T as [E [HBet HCong]].
apply Bet_T in HBet.
exists E.

*****
HCong : Cong B E C D
HBet : T A B E
E : Tpoint
HDiff : not (eq A B)
A,B,C,D : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (T A B E) (Cong B E C D)
+++++
intuition.
-----
Lemma segment_construction_B : forall A B C D, A<>B -> exists E, T A B E /\\ Cong B E C D.
Proof.
intros A B C D HDiff.
assert (T := segment_construction A B C D).
destruct T as [E [HBet HCong]].
apply Bet_T in HBet.
exists E.
intuition.

*****

*****

+++++
Qed.
-----
Lemma lower_dim_B : ~ T PC PA PB /\ ~ T PA PC PB /\ ~ T PA PB PC.
-----
Lemma lower_dim_B : ~ T PC PA PB /\\ ~ T PA PC PB /\\ ~ T PA PB PC.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (not (T PC PA PB)) (and (not (T PA PC PB)) (not (T PA PB PC)))
+++++
Proof.
-----
Lemma lower_dim_B : ~ T PC PA PB /\\ ~ T PA PC PB /\\ ~ T PA PB PC.
Proof.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (not (T PC PA PB)) (and (not (T PA PC PB)) (not (T PA PB PC)))
+++++
assert (HNBet := lower_dim).
-----
Lemma lower_dim_B : ~ T PC PA PB /\\ ~ T PA PC PB /\\ ~ T PA PB PC.
Proof.
assert (HNBet := lower_dim).

*****
HNBet : not (or (Bet PA PB PC) (or (Bet PB PC PA) (Bet PC PA PB)))
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (not (T PC PA PB)) (and (not (T PA PC PB)) (not (T PA PB PC)))
+++++
elim (T_dec PC PA PB).
-----
Lemma lower_dim_B : ~ T PC PA PB /\\ ~ T PA PC PB /\\ ~ T PA PB PC.
Proof.
assert (HNBet := lower_dim).
elim (T_dec PC PA PB).

*****
HNBet : not (or (Bet PA PB PC) (or (Bet PB PC PA) (Bet PC PA PB)))
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : T PC PA PB, and (not (T PC PA PB)) (and (not (T PA PC PB)) (not (T PA PB PC)))
+++++
intro HT1.
-----
Lemma lower_dim_B : ~ T PC PA PB /\\ ~ T PA PC PB /\\ ~ T PA PB PC.
Proof.
assert (HNBet := lower_dim).
elim (T_dec PC PA PB).
intro HT1.

*****
HT1 : T PC PA PB
HNBet : not (or (Bet PA PB PC) (or (Bet PB PC PA) (Bet PC PA PB)))
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (not (T PC PA PB)) (and (not (T PA PC PB)) (not (T PA PB PC)))
+++++
elim (T_dec PA PC PB).
-----
Lemma lower_dim_B : ~ T PC PA PB /\\ ~ T PA PC PB /\\ ~ T PA PB PC.
Proof.
assert (HNBet := lower_dim).
elim (T_dec PC PA PB).
intro HT1.
elim (T_dec PA PC PB).

*****
HT1 : T PC PA PB
HNBet : not (or (Bet PA PB PC) (or (Bet PB PC PA) (Bet PC PA PB)))
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : T PA PC PB, and (not (T PC PA PB)) (and (not (T PA PC PB)) (not (T PA PB PC)))
+++++
intro HT2.
-----
Lemma lower_dim_B : ~ T PC PA PB /\\ ~ T PA PC PB /\\ ~ T PA PB PC.
Proof.
assert (HNBet := lower_dim).
elim (T_dec PC PA PB).
intro HT1.
elim (T_dec PA PC PB).
intro HT2.

*****
HT2 : T PA PC PB
HT1 : T PC PA PB
HNBet : not (or (Bet PA PB PC) (or (Bet PB PC PA) (Bet PC PA PB)))
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (not (T PC PA PB)) (and (not (T PA PC PB)) (not (T PA PB PC)))
+++++
elim (T_dec PA PB PC).
-----
Lemma lower_dim_B : ~ T PC PA PB /\\ ~ T PA PC PB /\\ ~ T PA PB PC.
Proof.
assert (HNBet := lower_dim).
elim (T_dec PC PA PB).
intro HT1.
elim (T_dec PA PC PB).
intro HT2.
elim (T_dec PA PB PC).

*****
HT2 : T PA PC PB
HT1 : T PC PA PB
HNBet : not (or (Bet PA PB PC) (or (Bet PB PC PA) (Bet PC PA PB)))
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : T PA PB PC, and (not (T PC PA PB)) (and (not (T PA PC PB)) (not (T PA PB PC)))
+++++
intro HT3.
-----
Lemma lower_dim_B : ~ T PC PA PB /\\ ~ T PA PC PB /\\ ~ T PA PB PC.
Proof.
assert (HNBet := lower_dim).
elim (T_dec PC PA PB).
intro HT1.
elim (T_dec PA PC PB).
intro HT2.
elim (T_dec PA PB PC).
intro HT3.

*****
HT3 : T PA PB PC
HT2 : T PA PC PB
HT1 : T PC PA PB
HNBet : not (or (Bet PA PB PC) (or (Bet PB PC PA) (Bet PC PA PB)))
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (not (T PC PA PB)) (and (not (T PA PC PB)) (not (T PA PB PC)))
+++++
exfalso.
-----
Lemma lower_dim_B : ~ T PC PA PB /\\ ~ T PA PC PB /\\ ~ T PA PB PC.
Proof.
assert (HNBet := lower_dim).
elim (T_dec PC PA PB).
intro HT1.
elim (T_dec PA PC PB).
intro HT2.
elim (T_dec PA PB PC).
intro HT3.
exfalso.

*****
HT3 : T PA PB PC
HT2 : T PA PC PB
HT1 : T PC PA PB
HNBet : not (or (Bet PA PB PC) (or (Bet PB PC PA) (Bet PC PA PB)))
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply HNBet.
-----
Lemma lower_dim_B : ~ T PC PA PB /\\ ~ T PA PC PB /\\ ~ T PA PB PC.
Proof.
assert (HNBet := lower_dim).
elim (T_dec PC PA PB).
intro HT1.
elim (T_dec PA PC PB).
intro HT2.
elim (T_dec PA PB PC).
intro HT3.
exfalso.
apply HNBet.

*****
HT3 : T PA PB PC
HT2 : T PA PC PB
HT1 : T PC PA PB
HNBet : not (or (Bet PA PB PC) (or (Bet PB PC PA) (Bet PC PA PB)))
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (Bet PA PB PC) (or (Bet PB PC PA) (Bet PC PA PB))
+++++
left.
-----
Lemma lower_dim_B : ~ T PC PA PB /\\ ~ T PA PC PB /\\ ~ T PA PB PC.
Proof.
assert (HNBet := lower_dim).
elim (T_dec PC PA PB).
intro HT1.
elim (T_dec PA PC PB).
intro HT2.
elim (T_dec PA PB PC).
intro HT3.
exfalso.
apply HNBet.
left.

*****
HT3 : T PA PB PC
HT2 : T PA PC PB
HT1 : T PC PA PB
HNBet : not (or (Bet PA PB PC) (or (Bet PB PC PA) (Bet PC PA PB)))
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet PA PB PC
+++++
apply T_Bet.
-----
Lemma lower_dim_B : ~ T PC PA PB /\\ ~ T PA PC PB /\\ ~ T PA PB PC.
Proof.
assert (HNBet := lower_dim).
elim (T_dec PC PA PB).
intro HT1.
elim (T_dec PA PC PB).
intro HT2.
elim (T_dec PA PB PC).
intro HT3.
exfalso.
apply HNBet.
left.
apply T_Bet.

*****
HT3 : T PA PB PC
HT2 : T PA PC PB
HT1 : T PC PA PB
HNBet : not (or (Bet PA PB PC) (or (Bet PB PC PA) (Bet PC PA PB)))
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
T PA PB PC
+++++
assumption.
-----
Lemma lower_dim_B : ~ T PC PA PB /\\ ~ T PA PC PB /\\ ~ T PA PB PC.
Proof.
assert (HNBet := lower_dim).
elim (T_dec PC PA PB).
intro HT1.
elim (T_dec PA PC PB).
intro HT2.
elim (T_dec PA PB PC).

*****
HT2 : T PA PC PB
HT1 : T PC PA PB
HNBet : not (or (Bet PA PB PC) (or (Bet PB PC PA) (Bet PC PA PB)))
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : not (T PA PB PC), and (not (T PC PA PB)) (and (not (T PA PC PB)) (not (T PA PB PC)))
+++++
intro HT3.
-----
Lemma lower_dim_B : ~ T PC PA PB /\\ ~ T PA PC PB /\\ ~ T PA PB PC.
Proof.
assert (HNBet := lower_dim).
elim (T_dec PC PA PB).
intro HT1.
elim (T_dec PA PC PB).
intro HT2.
elim (T_dec PA PB PC).
intro HT3.

*****
HT3 : not (T PA PB PC)
HT2 : T PA PC PB
HT1 : T PC PA PB
HNBet : not (or (Bet PA PB PC) (or (Bet PB PC PA) (Bet PC PA PB)))
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (not (T PC PA PB)) (and (not (T PA PC PB)) (not (T PA PB PC)))
+++++
exfalso.
-----
Lemma lower_dim_B : ~ T PC PA PB /\\ ~ T PA PC PB /\\ ~ T PA PB PC.
Proof.
assert (HNBet := lower_dim).
elim (T_dec PC PA PB).
intro HT1.
elim (T_dec PA PC PB).
intro HT2.
elim (T_dec PA PB PC).
intro HT3.
exfalso.

*****
HT3 : not (T PA PB PC)
HT2 : T PA PC PB
HT1 : T PC PA PB
HNBet : not (or (Bet PA PB PC) (or (Bet PB PC PA) (Bet PC PA PB)))
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply HNBet.
-----
Lemma lower_dim_B : ~ T PC PA PB /\\ ~ T PA PC PB /\\ ~ T PA PB PC.
Proof.
assert (HNBet := lower_dim).
elim (T_dec PC PA PB).
intro HT1.
elim (T_dec PA PC PB).
intro HT2.
elim (T_dec PA PB PC).
intro HT3.
exfalso.
apply HNBet.

*****
HT3 : not (T PA PB PC)
HT2 : T PA PC PB
HT1 : T PC PA PB
HNBet : not (or (Bet PA PB PC) (or (Bet PB PC PA) (Bet PC PA PB)))
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (Bet PA PB PC) (or (Bet PB PC PA) (Bet PC PA PB))
+++++
right.
-----
Lemma lower_dim_B : ~ T PC PA PB /\\ ~ T PA PC PB /\\ ~ T PA PB PC.
Proof.
assert (HNBet := lower_dim).
elim (T_dec PC PA PB).
intro HT1.
elim (T_dec PA PC PB).
intro HT2.
elim (T_dec PA PB PC).
intro HT3.
exfalso.
apply HNBet.
right.

*****
HT3 : not (T PA PB PC)
HT2 : T PA PC PB
HT1 : T PC PA PB
HNBet : not (or (Bet PA PB PC) (or (Bet PB PC PA) (Bet PC PA PB)))
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (Bet PB PC PA) (Bet PC PA PB)
+++++
right.
-----
Lemma lower_dim_B : ~ T PC PA PB /\\ ~ T PA PC PB /\\ ~ T PA PB PC.
Proof.
assert (HNBet := lower_dim).
elim (T_dec PC PA PB).
intro HT1.
elim (T_dec PA PC PB).
intro HT2.
elim (T_dec PA PB PC).
intro HT3.
exfalso.
apply HNBet.
right.
right.

*****
HT3 : not (T PA PB PC)
HT2 : T PA PC PB
HT1 : T PC PA PB
HNBet : not (or (Bet PA PB PC) (or (Bet PB PC PA) (Bet PC PA PB)))
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet PC PA PB
+++++
apply T_Bet.
-----
Lemma lower_dim_B : ~ T PC PA PB /\\ ~ T PA PC PB /\\ ~ T PA PB PC.
Proof.
assert (HNBet := lower_dim).
elim (T_dec PC PA PB).
intro HT1.
elim (T_dec PA PC PB).
intro HT2.
elim (T_dec PA PB PC).
intro HT3.
exfalso.
apply HNBet.
right.
right.
apply T_Bet.

*****
HT3 : not (T PA PB PC)
HT2 : T PA PC PB
HT1 : T PC PA PB
HNBet : not (or (Bet PA PB PC) (or (Bet PB PC PA) (Bet PC PA PB)))
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
T PC PA PB
+++++
assumption.
-----
Lemma lower_dim_B : ~ T PC PA PB /\\ ~ T PA PC PB /\\ ~ T PA PB PC.
Proof.
assert (HNBet := lower_dim).
elim (T_dec PC PA PB).
intro HT1.
elim (T_dec PA PC PB).

*****
HT1 : T PC PA PB
HNBet : not (or (Bet PA PB PC) (or (Bet PB PC PA) (Bet PC PA PB)))
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : not (T PA PC PB), and (not (T PC PA PB)) (and (not (T PA PC PB)) (not (T PA PB PC)))
+++++
intro HT2.
-----
Lemma lower_dim_B : ~ T PC PA PB /\\ ~ T PA PC PB /\\ ~ T PA PB PC.
Proof.
assert (HNBet := lower_dim).
elim (T_dec PC PA PB).
intro HT1.
elim (T_dec PA PC PB).
intro HT2.

*****
HT2 : not (T PA PC PB)
HT1 : T PC PA PB
HNBet : not (or (Bet PA PB PC) (or (Bet PB PC PA) (Bet PC PA PB)))
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (not (T PC PA PB)) (and (not (T PA PC PB)) (not (T PA PB PC)))
+++++
elim (T_dec PA PB PC).
-----
Lemma lower_dim_B : ~ T PC PA PB /\\ ~ T PA PC PB /\\ ~ T PA PB PC.
Proof.
assert (HNBet := lower_dim).
elim (T_dec PC PA PB).
intro HT1.
elim (T_dec PA PC PB).
intro HT2.
elim (T_dec PA PB PC).

*****
HT2 : not (T PA PC PB)
HT1 : T PC PA PB
HNBet : not (or (Bet PA PB PC) (or (Bet PB PC PA) (Bet PC PA PB)))
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : T PA PB PC, and (not (T PC PA PB)) (and (not (T PA PC PB)) (not (T PA PB PC)))
+++++
intro HT3.
-----
Lemma lower_dim_B : ~ T PC PA PB /\\ ~ T PA PC PB /\\ ~ T PA PB PC.
Proof.
assert (HNBet := lower_dim).
elim (T_dec PC PA PB).
intro HT1.
elim (T_dec PA PC PB).
intro HT2.
elim (T_dec PA PB PC).
intro HT3.

*****
HT3 : T PA PB PC
HT2 : not (T PA PC PB)
HT1 : T PC PA PB
HNBet : not (or (Bet PA PB PC) (or (Bet PB PC PA) (Bet PC PA PB)))
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (not (T PC PA PB)) (and (not (T PA PC PB)) (not (T PA PB PC)))
+++++
exfalso.
-----
Lemma lower_dim_B : ~ T PC PA PB /\\ ~ T PA PC PB /\\ ~ T PA PB PC.
Proof.
assert (HNBet := lower_dim).
elim (T_dec PC PA PB).
intro HT1.
elim (T_dec PA PC PB).
intro HT2.
elim (T_dec PA PB PC).
intro HT3.
exfalso.

*****
HT3 : T PA PB PC
HT2 : not (T PA PC PB)
HT1 : T PC PA PB
HNBet : not (or (Bet PA PB PC) (or (Bet PB PC PA) (Bet PC PA PB)))
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply HNBet.
-----
Lemma lower_dim_B : ~ T PC PA PB /\\ ~ T PA PC PB /\\ ~ T PA PB PC.
Proof.
assert (HNBet := lower_dim).
elim (T_dec PC PA PB).
intro HT1.
elim (T_dec PA PC PB).
intro HT2.
elim (T_dec PA PB PC).
intro HT3.
exfalso.
apply HNBet.

*****
HT3 : T PA PB PC
HT2 : not (T PA PC PB)
HT1 : T PC PA PB
HNBet : not (or (Bet PA PB PC) (or (Bet PB PC PA) (Bet PC PA PB)))
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (Bet PA PB PC) (or (Bet PB PC PA) (Bet PC PA PB))
+++++
left.
-----
Lemma lower_dim_B : ~ T PC PA PB /\\ ~ T PA PC PB /\\ ~ T PA PB PC.
Proof.
assert (HNBet := lower_dim).
elim (T_dec PC PA PB).
intro HT1.
elim (T_dec PA PC PB).
intro HT2.
elim (T_dec PA PB PC).
intro HT3.
exfalso.
apply HNBet.
left.

*****
HT3 : T PA PB PC
HT2 : not (T PA PC PB)
HT1 : T PC PA PB
HNBet : not (or (Bet PA PB PC) (or (Bet PB PC PA) (Bet PC PA PB)))
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet PA PB PC
+++++
apply T_Bet.
-----
Lemma lower_dim_B : ~ T PC PA PB /\\ ~ T PA PC PB /\\ ~ T PA PB PC.
Proof.
assert (HNBet := lower_dim).
elim (T_dec PC PA PB).
intro HT1.
elim (T_dec PA PC PB).
intro HT2.
elim (T_dec PA PB PC).
intro HT3.
exfalso.
apply HNBet.
left.
apply T_Bet.

*****
HT3 : T PA PB PC
HT2 : not (T PA PC PB)
HT1 : T PC PA PB
HNBet : not (or (Bet PA PB PC) (or (Bet PB PC PA) (Bet PC PA PB)))
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
T PA PB PC
+++++
assumption.
-----
Lemma lower_dim_B : ~ T PC PA PB /\\ ~ T PA PC PB /\\ ~ T PA PB PC.
Proof.
assert (HNBet := lower_dim).
elim (T_dec PC PA PB).
intro HT1.
elim (T_dec PA PC PB).
intro HT2.
elim (T_dec PA PB PC).

*****
HT2 : not (T PA PC PB)
HT1 : T PC PA PB
HNBet : not (or (Bet PA PB PC) (or (Bet PB PC PA) (Bet PC PA PB)))
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : not (T PA PB PC), and (not (T PC PA PB)) (and (not (T PA PC PB)) (not (T PA PB PC)))
+++++
intro HT3.
-----
Lemma lower_dim_B : ~ T PC PA PB /\\ ~ T PA PC PB /\\ ~ T PA PB PC.
Proof.
assert (HNBet := lower_dim).
elim (T_dec PC PA PB).
intro HT1.
elim (T_dec PA PC PB).
intro HT2.
elim (T_dec PA PB PC).
intro HT3.

*****
HT3 : not (T PA PB PC)
HT2 : not (T PA PC PB)
HT1 : T PC PA PB
HNBet : not (or (Bet PA PB PC) (or (Bet PB PC PA) (Bet PC PA PB)))
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (not (T PC PA PB)) (and (not (T PA PC PB)) (not (T PA PB PC)))
+++++
exfalso.
-----
Lemma lower_dim_B : ~ T PC PA PB /\\ ~ T PA PC PB /\\ ~ T PA PB PC.
Proof.
assert (HNBet := lower_dim).
elim (T_dec PC PA PB).
intro HT1.
elim (T_dec PA PC PB).
intro HT2.
elim (T_dec PA PB PC).
intro HT3.
exfalso.

*****
HT3 : not (T PA PB PC)
HT2 : not (T PA PC PB)
HT1 : T PC PA PB
HNBet : not (or (Bet PA PB PC) (or (Bet PB PC PA) (Bet PC PA PB)))
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply HNBet.
-----
Lemma lower_dim_B : ~ T PC PA PB /\\ ~ T PA PC PB /\\ ~ T PA PB PC.
Proof.
assert (HNBet := lower_dim).
elim (T_dec PC PA PB).
intro HT1.
elim (T_dec PA PC PB).
intro HT2.
elim (T_dec PA PB PC).
intro HT3.
exfalso.
apply HNBet.

*****
HT3 : not (T PA PB PC)
HT2 : not (T PA PC PB)
HT1 : T PC PA PB
HNBet : not (or (Bet PA PB PC) (or (Bet PB PC PA) (Bet PC PA PB)))
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (Bet PA PB PC) (or (Bet PB PC PA) (Bet PC PA PB))
+++++
right.
-----
Lemma lower_dim_B : ~ T PC PA PB /\\ ~ T PA PC PB /\\ ~ T PA PB PC.
Proof.
assert (HNBet := lower_dim).
elim (T_dec PC PA PB).
intro HT1.
elim (T_dec PA PC PB).
intro HT2.
elim (T_dec PA PB PC).
intro HT3.
exfalso.
apply HNBet.
right.

*****
HT3 : not (T PA PB PC)
HT2 : not (T PA PC PB)
HT1 : T PC PA PB
HNBet : not (or (Bet PA PB PC) (or (Bet PB PC PA) (Bet PC PA PB)))
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (Bet PB PC PA) (Bet PC PA PB)
+++++
right.
-----
Lemma lower_dim_B : ~ T PC PA PB /\\ ~ T PA PC PB /\\ ~ T PA PB PC.
Proof.
assert (HNBet := lower_dim).
elim (T_dec PC PA PB).
intro HT1.
elim (T_dec PA PC PB).
intro HT2.
elim (T_dec PA PB PC).
intro HT3.
exfalso.
apply HNBet.
right.
right.

*****
HT3 : not (T PA PB PC)
HT2 : not (T PA PC PB)
HT1 : T PC PA PB
HNBet : not (or (Bet PA PB PC) (or (Bet PB PC PA) (Bet PC PA PB)))
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet PC PA PB
+++++
apply T_Bet.
-----
Lemma lower_dim_B : ~ T PC PA PB /\\ ~ T PA PC PB /\\ ~ T PA PB PC.
Proof.
assert (HNBet := lower_dim).
elim (T_dec PC PA PB).
intro HT1.
elim (T_dec PA PC PB).
intro HT2.
elim (T_dec PA PB PC).
intro HT3.
exfalso.
apply HNBet.
right.
right.
apply T_Bet.

*****
HT3 : not (T PA PB PC)
HT2 : not (T PA PC PB)
HT1 : T PC PA PB
HNBet : not (or (Bet PA PB PC) (or (Bet PB PC PA) (Bet PC PA PB)))
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
T PC PA PB
+++++
assumption.
-----
Lemma lower_dim_B : ~ T PC PA PB /\\ ~ T PA PC PB /\\ ~ T PA PB PC.
Proof.
assert (HNBet := lower_dim).
elim (T_dec PC PA PB).

*****
HNBet : not (or (Bet PA PB PC) (or (Bet PB PC PA) (Bet PC PA PB)))
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : not (T PC PA PB), and (not (T PC PA PB)) (and (not (T PA PC PB)) (not (T PA PB PC)))
+++++
intro HT1.
-----
Lemma lower_dim_B : ~ T PC PA PB /\\ ~ T PA PC PB /\\ ~ T PA PB PC.
Proof.
assert (HNBet := lower_dim).
elim (T_dec PC PA PB).
intro HT1.

*****
HT1 : not (T PC PA PB)
HNBet : not (or (Bet PA PB PC) (or (Bet PB PC PA) (Bet PC PA PB)))
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (not (T PC PA PB)) (and (not (T PA PC PB)) (not (T PA PB PC)))
+++++
elim (T_dec PA PC PB).
-----
Lemma lower_dim_B : ~ T PC PA PB /\\ ~ T PA PC PB /\\ ~ T PA PB PC.
Proof.
assert (HNBet := lower_dim).
elim (T_dec PC PA PB).
intro HT1.
elim (T_dec PA PC PB).

*****
HT1 : not (T PC PA PB)
HNBet : not (or (Bet PA PB PC) (or (Bet PB PC PA) (Bet PC PA PB)))
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : T PA PC PB, and (not (T PC PA PB)) (and (not (T PA PC PB)) (not (T PA PB PC)))
+++++
intro HT2.
-----
Lemma lower_dim_B : ~ T PC PA PB /\\ ~ T PA PC PB /\\ ~ T PA PB PC.
Proof.
assert (HNBet := lower_dim).
elim (T_dec PC PA PB).
intro HT1.
elim (T_dec PA PC PB).
intro HT2.

*****
HT2 : T PA PC PB
HT1 : not (T PC PA PB)
HNBet : not (or (Bet PA PB PC) (or (Bet PB PC PA) (Bet PC PA PB)))
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (not (T PC PA PB)) (and (not (T PA PC PB)) (not (T PA PB PC)))
+++++
elim (T_dec PA PB PC).
-----
Lemma lower_dim_B : ~ T PC PA PB /\\ ~ T PA PC PB /\\ ~ T PA PB PC.
Proof.
assert (HNBet := lower_dim).
elim (T_dec PC PA PB).
intro HT1.
elim (T_dec PA PC PB).
intro HT2.
elim (T_dec PA PB PC).

*****
HT2 : T PA PC PB
HT1 : not (T PC PA PB)
HNBet : not (or (Bet PA PB PC) (or (Bet PB PC PA) (Bet PC PA PB)))
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : T PA PB PC, and (not (T PC PA PB)) (and (not (T PA PC PB)) (not (T PA PB PC)))
+++++
intro HT3.
-----
Lemma lower_dim_B : ~ T PC PA PB /\\ ~ T PA PC PB /\\ ~ T PA PB PC.
Proof.
assert (HNBet := lower_dim).
elim (T_dec PC PA PB).
intro HT1.
elim (T_dec PA PC PB).
intro HT2.
elim (T_dec PA PB PC).
intro HT3.

*****
HT3 : T PA PB PC
HT2 : T PA PC PB
HT1 : not (T PC PA PB)
HNBet : not (or (Bet PA PB PC) (or (Bet PB PC PA) (Bet PC PA PB)))
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (not (T PC PA PB)) (and (not (T PA PC PB)) (not (T PA PB PC)))
+++++
exfalso.
-----
Lemma lower_dim_B : ~ T PC PA PB /\\ ~ T PA PC PB /\\ ~ T PA PB PC.
Proof.
assert (HNBet := lower_dim).
elim (T_dec PC PA PB).
intro HT1.
elim (T_dec PA PC PB).
intro HT2.
elim (T_dec PA PB PC).
intro HT3.
exfalso.

*****
HT3 : T PA PB PC
HT2 : T PA PC PB
HT1 : not (T PC PA PB)
HNBet : not (or (Bet PA PB PC) (or (Bet PB PC PA) (Bet PC PA PB)))
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply HNBet.
-----
Lemma lower_dim_B : ~ T PC PA PB /\\ ~ T PA PC PB /\\ ~ T PA PB PC.
Proof.
assert (HNBet := lower_dim).
elim (T_dec PC PA PB).
intro HT1.
elim (T_dec PA PC PB).
intro HT2.
elim (T_dec PA PB PC).
intro HT3.
exfalso.
apply HNBet.

*****
HT3 : T PA PB PC
HT2 : T PA PC PB
HT1 : not (T PC PA PB)
HNBet : not (or (Bet PA PB PC) (or (Bet PB PC PA) (Bet PC PA PB)))
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (Bet PA PB PC) (or (Bet PB PC PA) (Bet PC PA PB))
+++++
left.
-----
Lemma lower_dim_B : ~ T PC PA PB /\\ ~ T PA PC PB /\\ ~ T PA PB PC.
Proof.
assert (HNBet := lower_dim).
elim (T_dec PC PA PB).
intro HT1.
elim (T_dec PA PC PB).
intro HT2.
elim (T_dec PA PB PC).
intro HT3.
exfalso.
apply HNBet.
left.

*****
HT3 : T PA PB PC
HT2 : T PA PC PB
HT1 : not (T PC PA PB)
HNBet : not (or (Bet PA PB PC) (or (Bet PB PC PA) (Bet PC PA PB)))
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet PA PB PC
+++++
apply T_Bet.
-----
Lemma lower_dim_B : ~ T PC PA PB /\\ ~ T PA PC PB /\\ ~ T PA PB PC.
Proof.
assert (HNBet := lower_dim).
elim (T_dec PC PA PB).
intro HT1.
elim (T_dec PA PC PB).
intro HT2.
elim (T_dec PA PB PC).
intro HT3.
exfalso.
apply HNBet.
left.
apply T_Bet.

*****
HT3 : T PA PB PC
HT2 : T PA PC PB
HT1 : not (T PC PA PB)
HNBet : not (or (Bet PA PB PC) (or (Bet PB PC PA) (Bet PC PA PB)))
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
T PA PB PC
+++++
assumption.
-----
Lemma lower_dim_B : ~ T PC PA PB /\\ ~ T PA PC PB /\\ ~ T PA PB PC.
Proof.
assert (HNBet := lower_dim).
elim (T_dec PC PA PB).
intro HT1.
elim (T_dec PA PC PB).
intro HT2.
elim (T_dec PA PB PC).

*****
HT2 : T PA PC PB
HT1 : not (T PC PA PB)
HNBet : not (or (Bet PA PB PC) (or (Bet PB PC PA) (Bet PC PA PB)))
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : not (T PA PB PC), and (not (T PC PA PB)) (and (not (T PA PC PB)) (not (T PA PB PC)))
+++++
intro HT3.
-----
Lemma lower_dim_B : ~ T PC PA PB /\\ ~ T PA PC PB /\\ ~ T PA PB PC.
Proof.
assert (HNBet := lower_dim).
elim (T_dec PC PA PB).
intro HT1.
elim (T_dec PA PC PB).
intro HT2.
elim (T_dec PA PB PC).
intro HT3.

*****
HT3 : not (T PA PB PC)
HT2 : T PA PC PB
HT1 : not (T PC PA PB)
HNBet : not (or (Bet PA PB PC) (or (Bet PB PC PA) (Bet PC PA PB)))
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (not (T PC PA PB)) (and (not (T PA PC PB)) (not (T PA PB PC)))
+++++
exfalso.
-----
Lemma lower_dim_B : ~ T PC PA PB /\\ ~ T PA PC PB /\\ ~ T PA PB PC.
Proof.
assert (HNBet := lower_dim).
elim (T_dec PC PA PB).
intro HT1.
elim (T_dec PA PC PB).
intro HT2.
elim (T_dec PA PB PC).
intro HT3.
exfalso.

*****
HT3 : not (T PA PB PC)
HT2 : T PA PC PB
HT1 : not (T PC PA PB)
HNBet : not (or (Bet PA PB PC) (or (Bet PB PC PA) (Bet PC PA PB)))
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply HNBet.
-----
Lemma lower_dim_B : ~ T PC PA PB /\\ ~ T PA PC PB /\\ ~ T PA PB PC.
Proof.
assert (HNBet := lower_dim).
elim (T_dec PC PA PB).
intro HT1.
elim (T_dec PA PC PB).
intro HT2.
elim (T_dec PA PB PC).
intro HT3.
exfalso.
apply HNBet.

*****
HT3 : not (T PA PB PC)
HT2 : T PA PC PB
HT1 : not (T PC PA PB)
HNBet : not (or (Bet PA PB PC) (or (Bet PB PC PA) (Bet PC PA PB)))
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (Bet PA PB PC) (or (Bet PB PC PA) (Bet PC PA PB))
+++++
right.
-----
Lemma lower_dim_B : ~ T PC PA PB /\\ ~ T PA PC PB /\\ ~ T PA PB PC.
Proof.
assert (HNBet := lower_dim).
elim (T_dec PC PA PB).
intro HT1.
elim (T_dec PA PC PB).
intro HT2.
elim (T_dec PA PB PC).
intro HT3.
exfalso.
apply HNBet.
right.

*****
HT3 : not (T PA PB PC)
HT2 : T PA PC PB
HT1 : not (T PC PA PB)
HNBet : not (or (Bet PA PB PC) (or (Bet PB PC PA) (Bet PC PA PB)))
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (Bet PB PC PA) (Bet PC PA PB)
+++++
left.
-----
Lemma lower_dim_B : ~ T PC PA PB /\\ ~ T PA PC PB /\\ ~ T PA PB PC.
Proof.
assert (HNBet := lower_dim).
elim (T_dec PC PA PB).
intro HT1.
elim (T_dec PA PC PB).
intro HT2.
elim (T_dec PA PB PC).
intro HT3.
exfalso.
apply HNBet.
right.
left.

*****
HT3 : not (T PA PB PC)
HT2 : T PA PC PB
HT1 : not (T PC PA PB)
HNBet : not (or (Bet PA PB PC) (or (Bet PB PC PA) (Bet PC PA PB)))
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet PB PC PA
+++++
apply between_symmetry.
-----
Lemma lower_dim_B : ~ T PC PA PB /\\ ~ T PA PC PB /\\ ~ T PA PB PC.
Proof.
assert (HNBet := lower_dim).
elim (T_dec PC PA PB).
intro HT1.
elim (T_dec PA PC PB).
intro HT2.
elim (T_dec PA PB PC).
intro HT3.
exfalso.
apply HNBet.
right.
left.
apply between_symmetry.

*****
HT3 : not (T PA PB PC)
HT2 : T PA PC PB
HT1 : not (T PC PA PB)
HNBet : not (or (Bet PA PB PC) (or (Bet PB PC PA) (Bet PC PA PB)))
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet PA PC PB
+++++
apply T_Bet.
-----
Lemma lower_dim_B : ~ T PC PA PB /\\ ~ T PA PC PB /\\ ~ T PA PB PC.
Proof.
assert (HNBet := lower_dim).
elim (T_dec PC PA PB).
intro HT1.
elim (T_dec PA PC PB).
intro HT2.
elim (T_dec PA PB PC).
intro HT3.
exfalso.
apply HNBet.
right.
left.
apply between_symmetry.
apply T_Bet.

*****
HT3 : not (T PA PB PC)
HT2 : T PA PC PB
HT1 : not (T PC PA PB)
HNBet : not (or (Bet PA PB PC) (or (Bet PB PC PA) (Bet PC PA PB)))
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
T PA PC PB
+++++
assumption.
-----
Lemma lower_dim_B : ~ T PC PA PB /\\ ~ T PA PC PB /\\ ~ T PA PB PC.
Proof.
assert (HNBet := lower_dim).
elim (T_dec PC PA PB).
intro HT1.
elim (T_dec PA PC PB).

*****
HT1 : not (T PC PA PB)
HNBet : not (or (Bet PA PB PC) (or (Bet PB PC PA) (Bet PC PA PB)))
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : not (T PA PC PB), and (not (T PC PA PB)) (and (not (T PA PC PB)) (not (T PA PB PC)))
+++++
intro HT2.
-----
Lemma lower_dim_B : ~ T PC PA PB /\\ ~ T PA PC PB /\\ ~ T PA PB PC.
Proof.
assert (HNBet := lower_dim).
elim (T_dec PC PA PB).
intro HT1.
elim (T_dec PA PC PB).
intro HT2.

*****
HT2 : not (T PA PC PB)
HT1 : not (T PC PA PB)
HNBet : not (or (Bet PA PB PC) (or (Bet PB PC PA) (Bet PC PA PB)))
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (not (T PC PA PB)) (and (not (T PA PC PB)) (not (T PA PB PC)))
+++++
elim (T_dec PA PB PC).
-----
Lemma lower_dim_B : ~ T PC PA PB /\\ ~ T PA PC PB /\\ ~ T PA PB PC.
Proof.
assert (HNBet := lower_dim).
elim (T_dec PC PA PB).
intro HT1.
elim (T_dec PA PC PB).
intro HT2.
elim (T_dec PA PB PC).

*****
HT2 : not (T PA PC PB)
HT1 : not (T PC PA PB)
HNBet : not (or (Bet PA PB PC) (or (Bet PB PC PA) (Bet PC PA PB)))
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : T PA PB PC, and (not (T PC PA PB)) (and (not (T PA PC PB)) (not (T PA PB PC)))
+++++
intro HT3.
-----
Lemma lower_dim_B : ~ T PC PA PB /\\ ~ T PA PC PB /\\ ~ T PA PB PC.
Proof.
assert (HNBet := lower_dim).
elim (T_dec PC PA PB).
intro HT1.
elim (T_dec PA PC PB).
intro HT2.
elim (T_dec PA PB PC).
intro HT3.

*****
HT3 : T PA PB PC
HT2 : not (T PA PC PB)
HT1 : not (T PC PA PB)
HNBet : not (or (Bet PA PB PC) (or (Bet PB PC PA) (Bet PC PA PB)))
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (not (T PC PA PB)) (and (not (T PA PC PB)) (not (T PA PB PC)))
+++++
exfalso.
-----
Lemma lower_dim_B : ~ T PC PA PB /\\ ~ T PA PC PB /\\ ~ T PA PB PC.
Proof.
assert (HNBet := lower_dim).
elim (T_dec PC PA PB).
intro HT1.
elim (T_dec PA PC PB).
intro HT2.
elim (T_dec PA PB PC).
intro HT3.
exfalso.

*****
HT3 : T PA PB PC
HT2 : not (T PA PC PB)
HT1 : not (T PC PA PB)
HNBet : not (or (Bet PA PB PC) (or (Bet PB PC PA) (Bet PC PA PB)))
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply HNBet.
-----
Lemma lower_dim_B : ~ T PC PA PB /\\ ~ T PA PC PB /\\ ~ T PA PB PC.
Proof.
assert (HNBet := lower_dim).
elim (T_dec PC PA PB).
intro HT1.
elim (T_dec PA PC PB).
intro HT2.
elim (T_dec PA PB PC).
intro HT3.
exfalso.
apply HNBet.

*****
HT3 : T PA PB PC
HT2 : not (T PA PC PB)
HT1 : not (T PC PA PB)
HNBet : not (or (Bet PA PB PC) (or (Bet PB PC PA) (Bet PC PA PB)))
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (Bet PA PB PC) (or (Bet PB PC PA) (Bet PC PA PB))
+++++
left.
-----
Lemma lower_dim_B : ~ T PC PA PB /\\ ~ T PA PC PB /\\ ~ T PA PB PC.
Proof.
assert (HNBet := lower_dim).
elim (T_dec PC PA PB).
intro HT1.
elim (T_dec PA PC PB).
intro HT2.
elim (T_dec PA PB PC).
intro HT3.
exfalso.
apply HNBet.
left.

*****
HT3 : T PA PB PC
HT2 : not (T PA PC PB)
HT1 : not (T PC PA PB)
HNBet : not (or (Bet PA PB PC) (or (Bet PB PC PA) (Bet PC PA PB)))
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet PA PB PC
+++++
apply T_Bet.
-----
Lemma lower_dim_B : ~ T PC PA PB /\\ ~ T PA PC PB /\\ ~ T PA PB PC.
Proof.
assert (HNBet := lower_dim).
elim (T_dec PC PA PB).
intro HT1.
elim (T_dec PA PC PB).
intro HT2.
elim (T_dec PA PB PC).
intro HT3.
exfalso.
apply HNBet.
left.
apply T_Bet.

*****
HT3 : T PA PB PC
HT2 : not (T PA PC PB)
HT1 : not (T PC PA PB)
HNBet : not (or (Bet PA PB PC) (or (Bet PB PC PA) (Bet PC PA PB)))
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
T PA PB PC
+++++
assumption.
-----
Lemma lower_dim_B : ~ T PC PA PB /\\ ~ T PA PC PB /\\ ~ T PA PB PC.
Proof.
assert (HNBet := lower_dim).
elim (T_dec PC PA PB).
intro HT1.
elim (T_dec PA PC PB).
intro HT2.
elim (T_dec PA PB PC).

*****
HT2 : not (T PA PC PB)
HT1 : not (T PC PA PB)
HNBet : not (or (Bet PA PB PC) (or (Bet PB PC PA) (Bet PC PA PB)))
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : not (T PA PB PC), and (not (T PC PA PB)) (and (not (T PA PC PB)) (not (T PA PB PC)))
+++++
intro HT3.
-----
Lemma lower_dim_B : ~ T PC PA PB /\\ ~ T PA PC PB /\\ ~ T PA PB PC.
Proof.
assert (HNBet := lower_dim).
elim (T_dec PC PA PB).
intro HT1.
elim (T_dec PA PC PB).
intro HT2.
elim (T_dec PA PB PC).
intro HT3.

*****
HT3 : not (T PA PB PC)
HT2 : not (T PA PC PB)
HT1 : not (T PC PA PB)
HNBet : not (or (Bet PA PB PC) (or (Bet PB PC PA) (Bet PC PA PB)))
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (not (T PC PA PB)) (and (not (T PA PC PB)) (not (T PA PB PC)))
+++++
tauto.
-----
Lemma lower_dim_B : ~ T PC PA PB /\\ ~ T PA PC PB /\\ ~ T PA PB PC.
Proof.
assert (HNBet := lower_dim).
elim (T_dec PC PA PB).

*****

*****

+++++
Qed.
-----
Instance Beeson_follows_from_Tarski : intuitionistic_Tarski_neutral_dimensionless.
-----
Instance Beeson_follows_from_Tarski : intuitionistic_Tarski_neutral_dimensionless.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
intuitionistic_Tarski_neutral_dimensionless
+++++
Proof.
-----
Instance Beeson_follows_from_Tarski : intuitionistic_Tarski_neutral_dimensionless.
Proof.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
intuitionistic_Tarski_neutral_dimensionless
+++++
exact (Build_intuitionistic_Tarski_neutral_dimensionless Tpoint BetH Cong cong_stability bet_stability cong_identity cong_inner_transitivity cong_pseudo_reflexivity segment_construction_B five_segment_B between_identity_B between_symmetry_B between_inner_transitivity_B inner_pasch_B PA PB PC lower_dim_B).
-----
Instance Beeson_follows_from_Tarski : intuitionistic_Tarski_neutral_dimensionless.
Proof.
exact (Build_intuitionistic_Tarski_neutral_dimensionless Tpoint BetH Cong cong_stability bet_stability cong_identity cong_inner_transitivity cong_pseudo_reflexivity segment_construction_B five_segment_B between_identity_B between_symmetry_B between_inner_transitivity_B inner_pasch_B PA PB PC lower_dim_B).

*****

*****

+++++
Qed.
-----
End Tarski_to_intuitionistic_Tarski.
-----
