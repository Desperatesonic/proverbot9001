Require Export general_tactics.
-----
Require Export Rgeometry_tools.
-----
Require Export constructed_points_elimination.
-----
Require Export free_points_elimination.
-----
Require Export simplify_constructions.
-----
Require Export construction_tactics.
-----
Require Export my_field_tac.
-----
Ltac decomp_non_zero_mult_div H := \n  (apply (multnonzero) in H || apply (divnonzero) in H; use H).
-----
Ltac decomp_all_non_zero_mult_div := repeat match goal with\n H: ?X <> 0 |- _ => decomp_non_zero_mult_div H\nend.
-----
Ltac field_and_conclude := \n  (abstract (field;decomp_all_non_zero_mult_div;solve_conds)) ||\n  (abstract (Ffield)).
-----
Ltac DecomposeMratio :=\n  repeat\n   match goal with\n   | H:(mratio _ _ _ _) |- _ =>\n       unfold mratio in H; decompose [and] H; clear H\n   end.
-----
Ltac prepare_half_free_construction :=\nrepeat  match goal with\n   | H:(on_line ?X1 ?X2 ?X3) |- _ => \n    let T:= fresh in \n    (assert (T:=(on_line_to_on_line_d X1 X2 X3 H));clear H;set ((X2**X1)/(X2**X3)) in * )\n   | H:(on_parallel ?X1 ?X2 ?X3 ?X4) |- _ =>    \n    let T:= fresh in \n    (assert (T:=(on_parallel_to_on_parallel_d X1 X2 X3 X4 H));clear H;set ((X2**X1)/(X3**X4)) in * )\n   | H:(on_perp ?X1 ?X2 ?X3 ) |- _ => \n    let T:= fresh in \n    (assert (T:=(on_perp_to_on_perp_d X1 X2 X3 H));clear H;set ((2 + 2) * S X2 X3 X1 / Py X2 X3 X2) in * )\n\nend.
-----
Ltac add_non_zero_hyps :=\n repeat\n match goal with \n   | H:?A<>?B |- _ =>  \n           assert_if_not_exist (A**B<>0);[apply neq_not_zero;assumption|revert H]\nend;intros.
-----
Ltac check_ratio_hyps_aux A B C D :=\n    ((match goal with\n | H : parallel A B C D , H2 : C<>D |- _ => fail 2 \nend) || fail 3 "Error, one the following hypotheses are missing : parallel" A B C D ", " C "<>" D) || idtac.
-----
Ltac check_ratio_hyps :=\n try    match goal with\n| H : _ |- context [?A**?B/?C**?D] => check_ratio_hyps_aux A B C D\nend.
-----
Lemma test_check_ratio_hyp : forall A B C D, \n   parallel A B C D -> \nC<>D ->\n A**B / C**D = A**B/C**D.
-----
Lemma test_check_ratio_hyp : forall A B C D, parallel A B C D -> C<>D -> A**B / C**D = A**B/C**D.

*****

*****
forall (A B C D : Point) (_ : parallel A B C D) (_ : not (eq C D)), eq (Fdiv (DSeg A B) (DSeg C D)) (Fdiv (DSeg A B) (DSeg C D))
+++++
Proof.
-----
Lemma test_check_ratio_hyp : forall A B C D, parallel A B C D -> C<>D -> A**B / C**D = A**B/C**D.
Proof.

*****

*****
forall (A B C D : Point) (_ : parallel A B C D) (_ : not (eq C D)), eq (Fdiv (DSeg A B) (DSeg C D)) (Fdiv (DSeg A B) (DSeg C D))
+++++
intros.
-----
Lemma test_check_ratio_hyp : forall A B C D, parallel A B C D -> C<>D -> A**B / C**D = A**B/C**D.
Proof.
intros.

*****
H0 : not (eq C D)
H : parallel A B C D
A,B,C,D : Point
*****
eq (Fdiv (DSeg A B) (DSeg C D)) (Fdiv (DSeg A B) (DSeg C D))
+++++
check_ratio_hyps.
-----
Lemma test_check_ratio_hyp : forall A B C D, parallel A B C D -> C<>D -> A**B / C**D = A**B/C**D.
Proof.
intros.
check_ratio_hyps.

*****
H0 : not (eq C D)
H : parallel A B C D
A,B,C,D : Point
*****
eq (Fdiv (DSeg A B) (DSeg C D)) (Fdiv (DSeg A B) (DSeg C D))
+++++
reflexivity.
-----
Lemma test_check_ratio_hyp : forall A B C D, parallel A B C D -> C<>D -> A**B / C**D = A**B/C**D.
Proof.
intros.
check_ratio_hyps.
reflexivity.

*****

*****

+++++
Qed.
-----
Ltac unfold_non_primitive_constructions := \n unfold is_midpoint, m_ratio, on_circle, inter_lc,\n  inversion, eq_angle, eq_distance, co_circle, harmonic in *.
-----
Definition parallel_s (A B C D : Point) : Prop := S A C B = S B A D.
-----
Lemma parallel_equiv : forall A B C D, parallel_s A B C D <-> parallel A B C D.
-----
Lemma parallel_equiv : forall A B C D, parallel_s A B C D <-> parallel A B C D.

*****

*****
forall A B C D : Point, iff (parallel_s A B C D) (parallel A B C D)
+++++
Proof.
-----
Lemma parallel_equiv : forall A B C D, parallel_s A B C D <-> parallel A B C D.
Proof.

*****

*****
forall A B C D : Point, iff (parallel_s A B C D) (parallel A B C D)
+++++
intros.
-----
Lemma parallel_equiv : forall A B C D, parallel_s A B C D <-> parallel A B C D.
Proof.
intros.

*****
A,B,C,D : Point
*****
iff (parallel_s A B C D) (parallel A B C D)
+++++
unfold parallel_s.
-----
Lemma parallel_equiv : forall A B C D, parallel_s A B C D <-> parallel A B C D.
Proof.
intros.
unfold parallel_s.

*****
A,B,C,D : Point
*****
iff (eq (S A C B) (S B A D)) (parallel A B C D)
+++++
unfold parallel.
-----
Lemma parallel_equiv : forall A B C D, parallel_s A B C D <-> parallel A B C D.
Proof.
intros.
unfold parallel_s.
unfold parallel.

*****
A,B,C,D : Point
*****
iff (eq (S A C B) (S B A D)) (eq (S4 A C B D) F0)
+++++
unfold S4.
-----
Lemma parallel_equiv : forall A B C D, parallel_s A B C D <-> parallel A B C D.
Proof.
intros.
unfold parallel_s.
unfold parallel.
unfold S4.

*****
A,B,C,D : Point
*****
iff (eq (S A C B) (S B A D)) (eq (Fplus (S A C B) (S A B D)) F0)
+++++
split.
-----
Lemma parallel_equiv : forall A B C D, parallel_s A B C D <-> parallel A B C D.
Proof.
intros.
unfold parallel_s.
unfold parallel.
unfold S4.
split.

*****
A,B,C,D : Point
*****
forall _ : eq (S A C B) (S B A D), eq (Fplus (S A C B) (S A B D)) F0
+++++
intro.
-----
Lemma parallel_equiv : forall A B C D, parallel_s A B C D <-> parallel A B C D.
Proof.
intros.
unfold parallel_s.
unfold parallel.
unfold S4.
split.
intro.

*****
H : eq (S A C B) (S B A D)
A,B,C,D : Point
*****
eq (Fplus (S A C B) (S A B D)) F0
+++++
rewrite H.
-----
Lemma parallel_equiv : forall A B C D, parallel_s A B C D <-> parallel A B C D.
Proof.
intros.
unfold parallel_s.
unfold parallel.
unfold S4.
split.
intro.
rewrite H.

*****
H : eq (S A C B) (S B A D)
A,B,C,D : Point
*****
eq (Fplus (S B A D) (S A B D)) F0
+++++
uniformize_signed_areas.
-----
Lemma parallel_equiv : forall A B C D, parallel_s A B C D <-> parallel A B C D.
Proof.
intros.
unfold parallel_s.
unfold parallel.
unfold S4.
split.
intro.
rewrite H.
uniformize_signed_areas.

*****
H : eq (S A C B) (S B A D)
A,B,C,D : Point
*****
eq (Fplus (S B A D) (Fopp (S B A D))) F0
+++++
ring.
-----
Lemma parallel_equiv : forall A B C D, parallel_s A B C D <-> parallel A B C D.
Proof.
intros.
unfold parallel_s.
unfold parallel.
unfold S4.
split.

*****
A,B,C,D : Point
*****
forall _ : eq (Fplus (S A C B) (S A B D)) F0, eq (S A C B) (S B A D)
+++++
intro.
-----
Lemma parallel_equiv : forall A B C D, parallel_s A B C D <-> parallel A B C D.
Proof.
intros.
unfold parallel_s.
unfold parallel.
unfold S4.
split.
intro.

*****
H : eq (Fplus (S A C B) (S A B D)) F0
A,B,C,D : Point
*****
eq (S A C B) (S B A D)
+++++
IsoleVar (S A C B) H.
-----
Lemma parallel_equiv : forall A B C D, parallel_s A B C D <-> parallel A B C D.
Proof.
intros.
unfold parallel_s.
unfold parallel.
unfold S4.
split.
intro.
IsoleVar (S A C B) H.

*****
H : eq (S A C B) (Fminus F0 (S A B D))
A,B,C,D : Point
*****
eq (S A C B) (S B A D)
+++++
rewrite H.
-----
Lemma parallel_equiv : forall A B C D, parallel_s A B C D <-> parallel A B C D.
Proof.
intros.
unfold parallel_s.
unfold parallel.
unfold S4.
split.
intro.
IsoleVar (S A C B) H.
rewrite H.

*****
H : eq (S A C B) (Fminus F0 (S A B D))
A,B,C,D : Point
*****
eq (Fminus F0 (S A B D)) (S B A D)
+++++
uniformize_signed_areas.
-----
Lemma parallel_equiv : forall A B C D, parallel_s A B C D <-> parallel A B C D.
Proof.
intros.
unfold parallel_s.
unfold parallel.
unfold S4.
split.
intro.
IsoleVar (S A C B) H.
rewrite H.
uniformize_signed_areas.

*****
H : eq (S A C B) (Fminus F0 (S A B D))
A,B,C,D : Point
*****
eq (Fminus F0 (S A B D)) (Fopp (S A B D))
+++++
ring.
-----
Lemma parallel_equiv : forall A B C D, parallel_s A B C D <-> parallel A B C D.
Proof.
intros.
unfold parallel_s.
unfold parallel.
unfold S4.
split.

*****

*****

+++++
Qed.
-----
Ltac assert_non_zero_hyps_circum_ortho_center :=\n  repeat\n( match goal with \n| H: is_circumcenter ?O ?A ?B ?C |- _ => \n assert_if_not_exist (2 * (Py A B A * Py A C A - Py B A C * Py B A C) <> 0);\n [(apply  (is_circumcenter_non_zero O A B C H))|idtac]\n| H: is_orthocenter ?O ?A ?B ?C |- _ => \n assert_if_not_exist ((Py A B A * Py A C A - Py B A C * Py B A C) <> 0);\n [(apply  (is_orthocenter_non_zero O A B C H))|idtac]\nend).
-----
Ltac geoInit :=\n  unfold_non_primitive_constructions; intros; \n  unfold perp, S4, Py4 in |- *; \n  unfold Col in *; DecomposeMratio;\n  prepare_half_free_construction;\n  DecompAndAll;\n  check_ratio_hyps;\n  assert_non_zero_hyps_circum_ortho_center;\n  unfold is_circumcenter,  is_orthocenter, is_centroid, is_Lemoine in *;\n  add_non_zero_hyps; \n  put_on_inter_line_parallel;repeat split;\n  try (apply -> parallel_equiv);\n  unfold parallel_s.
-----
Ltac simpl_left  := apply f_equal2;[solve [ring] | idtac];idtac "simpl gauche".
-----
Ltac simpl_right := apply f_equal2;[idtac | solve[ring]];idtac "simpl droite".
-----
Ltac simpl_left_right := repeat (simpl_left || simpl_right).
-----
Lemma f_equal2_sym: \n  forall (f : F -> F -> F), \n  (forall x y, f x y = f y x) ->\n  forall (x1 y1 : F) (x2 y2 : F),\n       x1 = y1 -> x2 = y2 -> f x1 x2 = f y2 y1.
-----
Lemma f_equal2_sym: forall (f : F -> F -> F), (forall x y, f x y = f y x) -> forall (x1 y1 : F) (x2 y2 : F), x1 = y1 -> x2 = y2 -> f x1 x2 = f y2 y1.

*****

*****
forall (f : forall (_ : F) (_ : F), F) (_ : forall x y : F, eq (f x y) (f y x)) (x1 y1 x2 y2 : F) (_ : eq x1 y1) (_ : eq x2 y2), eq (f x1 x2) (f y2 y1)
+++++
Proof.
-----
Lemma f_equal2_sym: forall (f : F -> F -> F), (forall x y, f x y = f y x) -> forall (x1 y1 : F) (x2 y2 : F), x1 = y1 -> x2 = y2 -> f x1 x2 = f y2 y1.
Proof.

*****

*****
forall (f : forall (_ : F) (_ : F), F) (_ : forall x y : F, eq (f x y) (f y x)) (x1 y1 x2 y2 : F) (_ : eq x1 y1) (_ : eq x2 y2), eq (f x1 x2) (f y2 y1)
+++++
intros.
-----
Lemma f_equal2_sym: forall (f : F -> F -> F), (forall x y, f x y = f y x) -> forall (x1 y1 : F) (x2 y2 : F), x1 = y1 -> x2 = y2 -> f x1 x2 = f y2 y1.
Proof.
intros.

*****
H1 : eq x2 y2
H0 : eq x1 y1
x1,y1,x2,y2 : F
H : forall x y : F, eq (f x y) (f y x)
f : forall (_ : F) (_ : F), F
*****
eq (f x1 x2) (f y2 y1)
+++++
rewrite H.
-----
Lemma f_equal2_sym: forall (f : F -> F -> F), (forall x y, f x y = f y x) -> forall (x1 y1 : F) (x2 y2 : F), x1 = y1 -> x2 = y2 -> f x1 x2 = f y2 y1.
Proof.
intros.
rewrite H.

*****
H1 : eq x2 y2
H0 : eq x1 y1
x1,y1,x2,y2 : F
H : forall x y : F, eq (f x y) (f y x)
f : forall (_ : F) (_ : F), F
*****
eq (f x2 x1) (f y2 y1)
+++++
apply f_equal2.
-----
Lemma f_equal2_sym: forall (f : F -> F -> F), (forall x y, f x y = f y x) -> forall (x1 y1 : F) (x2 y2 : F), x1 = y1 -> x2 = y2 -> f x1 x2 = f y2 y1.
Proof.
intros.
rewrite H.
apply f_equal2.

*****
H1 : eq x2 y2
H0 : eq x1 y1
x1,y1,x2,y2 : F
H : forall x y : F, eq (f x y) (f y x)
f : forall (_ : F) (_ : F), F
*****
eq x2 y2
+++++
auto.
-----
Lemma f_equal2_sym: forall (f : F -> F -> F), (forall x y, f x y = f y x) -> forall (x1 y1 : F) (x2 y2 : F), x1 = y1 -> x2 = y2 -> f x1 x2 = f y2 y1.
Proof.
intros.
rewrite H.
apply f_equal2.

*****
H1 : eq x2 y2
H0 : eq x1 y1
x1,y1,x2,y2 : F
H : forall x y : F, eq (f x y) (f y x)
f : forall (_ : F) (_ : F), F
*****
eq x1 y1
+++++
auto.
-----
Lemma f_equal2_sym: forall (f : F -> F -> F), (forall x y, f x y = f y x) -> forall (x1 y1 : F) (x2 y2 : F), x1 = y1 -> x2 = y2 -> f x1 x2 = f y2 y1.
Proof.
intros.
rewrite H.
apply f_equal2.

*****

*****

+++++
Qed.
-----
Ltac simpl_left_sym := \n  apply (f_equal2_sym Fplus Fplus_sym);[solve [ring] | idtac];idtac "simpl gauche sym".
-----
Ltac simpl_right_sym := \n  apply (f_equal2_sym Fplus Fplus_sym);[idtac | solve[ring]];idtac "simpl droite sym".
-----
Ltac simpl_left_right_sym := repeat (simpl_left_sym || simpl_right_sym).
-----
Ltac simpl_eq :=  simpl_left_right;simpl_left_right_sym.
-----
Lemma eq_simpl_1 : forall a b c,\n	b=c -> a+b = a+c.
-----
Lemma eq_simpl_1 : forall a b c, b=c -> a+b = a+c.

*****

*****
forall (a b c : F) (_ : eq b c), eq (Fplus a b) (Fplus a c)
+++++
Proof.
-----
Lemma eq_simpl_1 : forall a b c, b=c -> a+b = a+c.
Proof.

*****

*****
forall (a b c : F) (_ : eq b c), eq (Fplus a b) (Fplus a c)
+++++
intros.
-----
Lemma eq_simpl_1 : forall a b c, b=c -> a+b = a+c.
Proof.
intros.

*****
H : eq b c
a,b,c : F
*****
eq (Fplus a b) (Fplus a c)
+++++
subst.
-----
Lemma eq_simpl_1 : forall a b c, b=c -> a+b = a+c.
Proof.
intros.
subst.

*****
a,c : F
*****
eq (Fplus a c) (Fplus a c)
+++++
auto.
-----
Lemma eq_simpl_1 : forall a b c, b=c -> a+b = a+c.
Proof.
intros.
subst.
auto.

*****

*****

+++++
Qed.
-----
Lemma eq_simpl_2 : forall a b c,\n	b=c -> b+a = c+a.
-----
Lemma eq_simpl_2 : forall a b c, b=c -> b+a = c+a.

*****

*****
forall (a b c : F) (_ : eq b c), eq (Fplus b a) (Fplus c a)
+++++
Proof.
-----
Lemma eq_simpl_2 : forall a b c, b=c -> b+a = c+a.
Proof.

*****

*****
forall (a b c : F) (_ : eq b c), eq (Fplus b a) (Fplus c a)
+++++
intros.
-----
Lemma eq_simpl_2 : forall a b c, b=c -> b+a = c+a.
Proof.
intros.

*****
H : eq b c
a,b,c : F
*****
eq (Fplus b a) (Fplus c a)
+++++
subst.
-----
Lemma eq_simpl_2 : forall a b c, b=c -> b+a = c+a.
Proof.
intros.
subst.

*****
a,c : F
*****
eq (Fplus c a) (Fplus c a)
+++++
auto.
-----
Lemma eq_simpl_2 : forall a b c, b=c -> b+a = c+a.
Proof.
intros.
subst.
auto.

*****

*****

+++++
Qed.
-----
Lemma eq_simpl_3 : forall a b c,\n	b=c -> a+b = c+a.
-----
Lemma eq_simpl_3 : forall a b c, b=c -> a+b = c+a.

*****

*****
forall (a b c : F) (_ : eq b c), eq (Fplus a b) (Fplus c a)
+++++
Proof.
-----
Lemma eq_simpl_3 : forall a b c, b=c -> a+b = c+a.
Proof.

*****

*****
forall (a b c : F) (_ : eq b c), eq (Fplus a b) (Fplus c a)
+++++
intros.
-----
Lemma eq_simpl_3 : forall a b c, b=c -> a+b = c+a.
Proof.
intros.

*****
H : eq b c
a,b,c : F
*****
eq (Fplus a b) (Fplus c a)
+++++
subst.
-----
Lemma eq_simpl_3 : forall a b c, b=c -> a+b = c+a.
Proof.
intros.
subst.

*****
a,c : F
*****
eq (Fplus a c) (Fplus c a)
+++++
ring.
-----
Lemma eq_simpl_3 : forall a b c, b=c -> a+b = c+a.
Proof.
intros.
subst.
ring.

*****

*****

+++++
Qed.
-----
Lemma eq_simpl_4 : forall a b c,\n	b=c -> b+a = a+c.
-----
Lemma eq_simpl_4 : forall a b c, b=c -> b+a = a+c.

*****

*****
forall (a b c : F) (_ : eq b c), eq (Fplus b a) (Fplus a c)
+++++
Proof.
-----
Lemma eq_simpl_4 : forall a b c, b=c -> b+a = a+c.
Proof.

*****

*****
forall (a b c : F) (_ : eq b c), eq (Fplus b a) (Fplus a c)
+++++
intros.
-----
Lemma eq_simpl_4 : forall a b c, b=c -> b+a = a+c.
Proof.
intros.

*****
H : eq b c
a,b,c : F
*****
eq (Fplus b a) (Fplus a c)
+++++
subst.
-----
Lemma eq_simpl_4 : forall a b c, b=c -> b+a = a+c.
Proof.
intros.
subst.

*****
a,c : F
*****
eq (Fplus c a) (Fplus a c)
+++++
ring.
-----
Lemma eq_simpl_4 : forall a b c, b=c -> b+a = a+c.
Proof.
intros.
subst.
ring.

*****

*****

+++++
Qed.
-----
Lemma eq_simpl_5 : forall a b c,\n	b=c -> a*b = a*c.
-----
Lemma eq_simpl_5 : forall a b c, b=c -> a*b = a*c.

*****

*****
forall (a b c : F) (_ : eq b c), eq (Fmult a b) (Fmult a c)
+++++
Proof.
-----
Lemma eq_simpl_5 : forall a b c, b=c -> a*b = a*c.
Proof.

*****

*****
forall (a b c : F) (_ : eq b c), eq (Fmult a b) (Fmult a c)
+++++
intros.
-----
Lemma eq_simpl_5 : forall a b c, b=c -> a*b = a*c.
Proof.
intros.

*****
H : eq b c
a,b,c : F
*****
eq (Fmult a b) (Fmult a c)
+++++
subst.
-----
Lemma eq_simpl_5 : forall a b c, b=c -> a*b = a*c.
Proof.
intros.
subst.

*****
a,c : F
*****
eq (Fmult a c) (Fmult a c)
+++++
auto.
-----
Lemma eq_simpl_5 : forall a b c, b=c -> a*b = a*c.
Proof.
intros.
subst.
auto.

*****

*****

+++++
Qed.
-----
Lemma eq_simpl_6 : forall a b c,\n	b=c -> b*a = c*a.
-----
Lemma eq_simpl_6 : forall a b c, b=c -> b*a = c*a.

*****

*****
forall (a b c : F) (_ : eq b c), eq (Fmult b a) (Fmult c a)
+++++
Proof.
-----
Lemma eq_simpl_6 : forall a b c, b=c -> b*a = c*a.
Proof.

*****

*****
forall (a b c : F) (_ : eq b c), eq (Fmult b a) (Fmult c a)
+++++
intros.
-----
Lemma eq_simpl_6 : forall a b c, b=c -> b*a = c*a.
Proof.
intros.

*****
H : eq b c
a,b,c : F
*****
eq (Fmult b a) (Fmult c a)
+++++
subst.
-----
Lemma eq_simpl_6 : forall a b c, b=c -> b*a = c*a.
Proof.
intros.
subst.

*****
a,c : F
*****
eq (Fmult c a) (Fmult c a)
+++++
auto.
-----
Lemma eq_simpl_6 : forall a b c, b=c -> b*a = c*a.
Proof.
intros.
subst.
auto.

*****

*****

+++++
Qed.
-----
Lemma eq_simpl_7 : forall a b c,\n	b=c -> a*b = c*a.
-----
Lemma eq_simpl_7 : forall a b c, b=c -> a*b = c*a.

*****

*****
forall (a b c : F) (_ : eq b c), eq (Fmult a b) (Fmult c a)
+++++
Proof.
-----
Lemma eq_simpl_7 : forall a b c, b=c -> a*b = c*a.
Proof.

*****

*****
forall (a b c : F) (_ : eq b c), eq (Fmult a b) (Fmult c a)
+++++
intros.
-----
Lemma eq_simpl_7 : forall a b c, b=c -> a*b = c*a.
Proof.
intros.

*****
H : eq b c
a,b,c : F
*****
eq (Fmult a b) (Fmult c a)
+++++
subst.
-----
Lemma eq_simpl_7 : forall a b c, b=c -> a*b = c*a.
Proof.
intros.
subst.

*****
a,c : F
*****
eq (Fmult a c) (Fmult c a)
+++++
ring.
-----
Lemma eq_simpl_7 : forall a b c, b=c -> a*b = c*a.
Proof.
intros.
subst.
ring.

*****

*****

+++++
Qed.
-----
Lemma eq_simpl_8 : forall a b c,\n	b=c -> b/a = c/a.
-----
Lemma eq_simpl_8 : forall a b c, b=c -> b/a = c/a.

*****

*****
forall (a b c : F) (_ : eq b c), eq (Fdiv b a) (Fdiv c a)
+++++
Proof.
-----
Lemma eq_simpl_8 : forall a b c, b=c -> b/a = c/a.
Proof.

*****

*****
forall (a b c : F) (_ : eq b c), eq (Fdiv b a) (Fdiv c a)
+++++
intros.
-----
Lemma eq_simpl_8 : forall a b c, b=c -> b/a = c/a.
Proof.
intros.

*****
H : eq b c
a,b,c : F
*****
eq (Fdiv b a) (Fdiv c a)
+++++
subst.
-----
Lemma eq_simpl_8 : forall a b c, b=c -> b/a = c/a.
Proof.
intros.
subst.

*****
a,c : F
*****
eq (Fdiv c a) (Fdiv c a)
+++++
ring.
-----
Lemma eq_simpl_8 : forall a b c, b=c -> b/a = c/a.
Proof.
intros.
subst.
ring.

*****

*****

+++++
Qed.
-----
Lemma eq_simpl_9 : forall b c,\n	b=c -> -b = -c.
-----
Lemma eq_simpl_9 : forall b c, b=c -> -b = -c.

*****

*****
forall (b c : F) (_ : eq b c), eq (Fopp b) (Fopp c)
+++++
Proof.
-----
Lemma eq_simpl_9 : forall b c, b=c -> -b = -c.
Proof.

*****

*****
forall (b c : F) (_ : eq b c), eq (Fopp b) (Fopp c)
+++++
intros.
-----
Lemma eq_simpl_9 : forall b c, b=c -> -b = -c.
Proof.
intros.

*****
H : eq b c
b,c : F
*****
eq (Fopp b) (Fopp c)
+++++
subst.
-----
Lemma eq_simpl_9 : forall b c, b=c -> -b = -c.
Proof.
intros.
subst.

*****
c : F
*****
eq (Fopp c) (Fopp c)
+++++
ring.
-----
Lemma eq_simpl_9 : forall b c, b=c -> -b = -c.
Proof.
intros.
subst.
ring.

*****

*****

+++++
Qed.
-----
Lemma eq_simpl_10 : forall a b c,\n	b=c -> a-b = a-c.
-----
Lemma eq_simpl_10 : forall a b c, b=c -> a-b = a-c.

*****

*****
forall (a b c : F) (_ : eq b c), eq (Fminus a b) (Fminus a c)
+++++
Proof.
-----
Lemma eq_simpl_10 : forall a b c, b=c -> a-b = a-c.
Proof.

*****

*****
forall (a b c : F) (_ : eq b c), eq (Fminus a b) (Fminus a c)
+++++
intros.
-----
Lemma eq_simpl_10 : forall a b c, b=c -> a-b = a-c.
Proof.
intros.

*****
H : eq b c
a,b,c : F
*****
eq (Fminus a b) (Fminus a c)
+++++
subst.
-----
Lemma eq_simpl_10 : forall a b c, b=c -> a-b = a-c.
Proof.
intros.
subst.

*****
a,c : F
*****
eq (Fminus a c) (Fminus a c)
+++++
auto.
-----
Lemma eq_simpl_10 : forall a b c, b=c -> a-b = a-c.
Proof.
intros.
subst.
auto.

*****

*****

+++++
Qed.
-----
Lemma test_simpl_left_right_1 : forall a b c, \n(a)+(c+b) = (a+a-a)+(b+c).
-----
Lemma test_simpl_left_right_1 : forall a b c, (a)+(c+b) = (a+a-a)+(b+c).

*****

*****
forall a b c : F, eq (Fplus a (Fplus c b)) (Fplus (Fminus (Fplus a a) a) (Fplus b c))
+++++
Proof.
-----
Lemma test_simpl_left_right_1 : forall a b c, (a)+(c+b) = (a+a-a)+(b+c).
Proof.

*****

*****
forall a b c : F, eq (Fplus a (Fplus c b)) (Fplus (Fminus (Fplus a a) a) (Fplus b c))
+++++
intros.
-----
Lemma test_simpl_left_right_1 : forall a b c, (a)+(c+b) = (a+a-a)+(b+c).
Proof.
intros.

*****
a,b,c : F
*****
eq (Fplus a (Fplus c b)) (Fplus (Fminus (Fplus a a) a) (Fplus b c))
+++++
simpl_eq.
-----
Lemma test_simpl_left_right_1 : forall a b c, (a)+(c+b) = (a+a-a)+(b+c).
Proof.
intros.
simpl_eq.

*****
a,b,c : F
*****
eq b b
+++++
ring.
-----
Lemma test_simpl_left_right_1 : forall a b c, (a)+(c+b) = (a+a-a)+(b+c).
Proof.
intros.
simpl_eq.
ring.

*****

*****

+++++
Qed.
-----
Lemma test_simpl_left_right_2 : forall a b c, \n(c+b)+((a)+(c+b)) = (c+b)+ ((a+a-a)+(b+c)).
-----
Lemma test_simpl_left_right_2 : forall a b c, (c+b)+((a)+(c+b)) = (c+b)+ ((a+a-a)+(b+c)).

*****

*****
forall a b c : F, eq (Fplus (Fplus c b) (Fplus a (Fplus c b))) (Fplus (Fplus c b) (Fplus (Fminus (Fplus a a) a) (Fplus b c)))
+++++
Proof.
-----
Lemma test_simpl_left_right_2 : forall a b c, (c+b)+((a)+(c+b)) = (c+b)+ ((a+a-a)+(b+c)).
Proof.

*****

*****
forall a b c : F, eq (Fplus (Fplus c b) (Fplus a (Fplus c b))) (Fplus (Fplus c b) (Fplus (Fminus (Fplus a a) a) (Fplus b c)))
+++++
intros.
-----
Lemma test_simpl_left_right_2 : forall a b c, (c+b)+((a)+(c+b)) = (c+b)+ ((a+a-a)+(b+c)).
Proof.
intros.

*****
a,b,c : F
*****
eq (Fplus (Fplus c b) (Fplus a (Fplus c b))) (Fplus (Fplus c b) (Fplus (Fminus (Fplus a a) a) (Fplus b c)))
+++++
simpl_eq.
-----
Lemma test_simpl_left_right_2 : forall a b c, (c+b)+((a)+(c+b)) = (c+b)+ ((a+a-a)+(b+c)).
Proof.
intros.
simpl_eq.

*****
a,b,c : F
*****
eq b b
+++++
ring.
-----
Lemma test_simpl_left_right_2 : forall a b c, (c+b)+((a)+(c+b)) = (c+b)+ ((a+a-a)+(b+c)).
Proof.
intros.
simpl_eq.
ring.

*****

*****

+++++
Qed.
-----
Lemma test_simpl_left_right_3 : forall a b c, \na+(b+c) = (c+b)+a.
-----
Lemma test_simpl_left_right_3 : forall a b c, a+(b+c) = (c+b)+a.

*****

*****
forall a b c : F, eq (Fplus a (Fplus b c)) (Fplus (Fplus c b) a)
+++++
Proof.
-----
Lemma test_simpl_left_right_3 : forall a b c, a+(b+c) = (c+b)+a.
Proof.

*****

*****
forall a b c : F, eq (Fplus a (Fplus b c)) (Fplus (Fplus c b) a)
+++++
intros.
-----
Lemma test_simpl_left_right_3 : forall a b c, a+(b+c) = (c+b)+a.
Proof.
intros.

*****
a,b,c : F
*****
eq (Fplus a (Fplus b c)) (Fplus (Fplus c b) a)
+++++
simpl_eq.
-----
Lemma test_simpl_left_right_3 : forall a b c, a+(b+c) = (c+b)+a.
Proof.
intros.
simpl_eq.

*****
a,b,c : F
*****
eq c c
+++++
ring.
-----
Lemma test_simpl_left_right_3 : forall a b c, a+(b+c) = (c+b)+a.
Proof.
intros.
simpl_eq.
ring.

*****

*****

+++++
Qed.
-----
Ltac turn_into_ring_eq := \n  try (field_simplify_eq;\n  [idtac|solve [repeat split; repeat apply nonzeromult;auto with Geom]]).
-----
Ltac am_before_field :=  idtac "   initialisation...";geoInit;idtac "   elimination..."; eliminate_All; idtac "   uniformize areas...";\n  uniformize_pys;Runiformize_signed_areas;idtac "   simplification...";basic_simpl.
-----
Ltac set_all := repeat\n   match goal with\n   | H:context[(S ?X1 ?X2 ?X3)] |- _ => set (S X1 X2 X3) in *\n   | _:_ |- context[(S ?X1 ?X2 ?X3)] => set (S X1 X2 X3) in *\n   end.
-----
Ltac unfold_Py :=\n repeat (rewrite pyth_simpl_3 in *); unfold Py in *.
-----
Ltac area_method := \n  idtac "Area method:";\n  am_before_field;\n  idtac "   before field...";\n \n  (solve [set_all; unfold_Py; basic_simpl; uniformize_dir_seg; field_and_conclude ] ||\n  (idtac "   we need to make geometric quantities independant...";\n  only_use_area_coordinates;set_all; field_and_conclude)).
-----
