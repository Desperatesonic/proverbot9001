Require  Import area_method.
-----
Theorem Pappus : forall A B C A' B' C' P Q R :Point,\n  on_line C A B ->\n  on_line C' A' B' ->\n  inter_ll P A' B A B' ->\n  inter_ll Q A C' A' C ->\n  inter_ll R B' C B C' ->\n  Col P Q R.
-----
Theorem Pappus : forall A B C A' B' C' P Q R :Point, on_line C A B -> on_line C' A' B' -> inter_ll P A' B A B' -> inter_ll Q A C' A' C -> inter_ll R B' C B C' -> Col P Q R.

*****

*****
forall (A B C A' B' C' P Q R : Point) (_ : on_line C A B) (_ : on_line C' A' B') (_ : inter_ll P A' B A B') (_ : inter_ll Q A C' A' C) (_ : inter_ll R B' C B C'), Col P Q R
+++++
Proof.
-----
Theorem Pappus : forall A B C A' B' C' P Q R :Point, on_line C A B -> on_line C' A' B' -> inter_ll P A' B A B' -> inter_ll Q A C' A' C -> inter_ll R B' C B C' -> Col P Q R.
Proof.

*****

*****
forall (A B C A' B' C' P Q R : Point) (_ : on_line C A B) (_ : on_line C' A' B') (_ : inter_ll P A' B A B') (_ : inter_ll Q A C' A' C) (_ : inter_ll R B' C B C'), Col P Q R
+++++
area_method.
-----
Theorem Pappus : forall A B C A' B' C' P Q R :Point, on_line C A B -> on_line C' A' B' -> inter_ll P A' B A B' -> inter_ll Q A C' A' C -> inter_ll R B' C B C' -> Col P Q R.
Proof.
area_method.

*****

*****

+++++
Qed.
-----
Theorem Pappus_2 : forall A B C A' B' C' P Q R T:Point,\n  on_line C A B ->\n  on_line C' A' B' ->\n  inter_ll P A' B A B' ->\n  inter_ll Q A C' A' C ->\n  inter_ll R B' C B C' ->\n  inter_ll T B' C P Q ->\n  C<>R -> C<>T ->\n  parallel B' R C R ->\n  parallel B' T C T ->\n  B'**R / C**R = B'**T / C**T.
-----
Theorem Pappus_2 : forall A B C A' B' C' P Q R T:Point, on_line C A B -> on_line C' A' B' -> inter_ll P A' B A B' -> inter_ll Q A C' A' C -> inter_ll R B' C B C' -> inter_ll T B' C P Q -> C<>R -> C<>T -> parallel B' R C R -> parallel B' T C T -> B'**R / C**R = B'**T / C**T.

*****

*****
forall (A B C A' B' C' P Q R T : Point) (_ : on_line C A B) (_ : on_line C' A' B') (_ : inter_ll P A' B A B') (_ : inter_ll Q A C' A' C) (_ : inter_ll R B' C B C') (_ : inter_ll T B' C P Q) (_ : not (eq C R)) (_ : not (eq C T)) (_ : parallel B' R C R) (_ : parallel B' T C T), eq (Fdiv (DSeg B' R) (DSeg C R)) (Fdiv (DSeg B' T) (DSeg C T))
+++++
Proof.
-----
Theorem Pappus_2 : forall A B C A' B' C' P Q R T:Point, on_line C A B -> on_line C' A' B' -> inter_ll P A' B A B' -> inter_ll Q A C' A' C -> inter_ll R B' C B C' -> inter_ll T B' C P Q -> C<>R -> C<>T -> parallel B' R C R -> parallel B' T C T -> B'**R / C**R = B'**T / C**T.
Proof.

*****

*****
forall (A B C A' B' C' P Q R T : Point) (_ : on_line C A B) (_ : on_line C' A' B') (_ : inter_ll P A' B A B') (_ : inter_ll Q A C' A' C) (_ : inter_ll R B' C B C') (_ : inter_ll T B' C P Q) (_ : not (eq C R)) (_ : not (eq C T)) (_ : parallel B' R C R) (_ : parallel B' T C T), eq (Fdiv (DSeg B' R) (DSeg C R)) (Fdiv (DSeg B' T) (DSeg C T))
+++++
area_method.
-----
Theorem Pappus_2 : forall A B C A' B' C' P Q R T:Point, on_line C A B -> on_line C' A' B' -> inter_ll P A' B A B' -> inter_ll Q A C' A' C -> inter_ll R B' C B C' -> inter_ll T B' C P Q -> C<>R -> C<>T -> parallel B' R C R -> parallel B' T C T -> B'**R / C**R = B'**T / C**T.
Proof.
area_method.

*****

*****

+++++
Qed.
-----
