Require Import GeoCoq.Axioms.continuity_axioms.
-----
Require Import GeoCoq.Tarski_dev.Annexes.saccheri.
-----
Section Aristotle.
-----
Context `{TnEQD:Tarski_neutral_dimensionless_with_decidable_point_equality}.
-----
Lemma aristotle__greenberg : aristotle_s_axiom -> greenberg_s_axiom.
-----
Lemma aristotle__greenberg : aristotle_s_axiom -> greenberg_s_axiom.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : aristotle_s_axiom, greenberg_s_axiom
+++++
Proof.
-----
Lemma aristotle__greenberg : aristotle_s_axiom -> greenberg_s_axiom.
Proof.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : aristotle_s_axiom, greenberg_s_axiom
+++++
intros aristotle P Q R A B C.
-----
Lemma aristotle__greenberg : aristotle_s_axiom -> greenberg_s_axiom.
Proof.
intros aristotle P Q R A B C.

*****
P,Q,R,A,B,C : Tpoint
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (_ : not (Col A B C)) (_ : Acute A B C) (_ : not (eq Q R)) (_ : Per P Q R), ex (fun S : Tpoint => and (LtA P S Q A B C) (Out Q S R))
+++++
intros HNColB HABCacute HQRdiff HQright.
-----
Lemma aristotle__greenberg : aristotle_s_axiom -> greenberg_s_axiom.
Proof.
intros aristotle P Q R A B C.
intros HNColB HABCacute HQRdiff HQright.

*****
HQright : Per P Q R
HQRdiff : not (eq Q R)
HABCacute : Acute A B C
HNColB : not (Col A B C)
P,Q,R,A,B,C : Tpoint
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun S : Tpoint => and (LtA P S Q A B C) (Out Q S R))
+++++
elim (eq_dec_points P Q); intro HPQdiff.
-----
Lemma aristotle__greenberg : aristotle_s_axiom -> greenberg_s_axiom.
Proof.
intros aristotle P Q R A B C.
intros HNColB HABCacute HQRdiff HQright.
elim (eq_dec_points P Q); intro HPQdiff.

*****
HPQdiff : eq P Q
HQright : Per P Q R
HQRdiff : not (eq Q R)
HABCacute : Acute A B C
HNColB : not (Col A B C)
P,Q,R,A,B,C : Tpoint
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun S : Tpoint => and (LtA P S Q A B C) (Out Q S R))
+++++
treat_equalities.
-----
Lemma aristotle__greenberg : aristotle_s_axiom -> greenberg_s_axiom.
Proof.
intros aristotle P Q R A B C.
intros HNColB HABCacute HQRdiff HQright.
elim (eq_dec_points P Q); intro HPQdiff.
treat_equalities.

*****
HQRdiff : not (eq P R)
HQright : Per P P R
HABCacute : Acute A B C
HNColB : not (Col A B C)
P,R,A,B,C : Tpoint
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun S : Tpoint => and (LtA P S P A B C) (Out P S R))
+++++
assert_diffs.
-----
Lemma aristotle__greenberg : aristotle_s_axiom -> greenberg_s_axiom.
Proof.
intros aristotle P Q R A B C.
intros HNColB HABCacute HQRdiff HQright.
elim (eq_dec_points P Q); intro HPQdiff.
treat_equalities.
assert_diffs.

*****
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
HQRdiff : not (eq P R)
HQright : Per P P R
HABCacute : Acute A B C
HNColB : not (Col A B C)
P,R,A,B,C : Tpoint
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun S : Tpoint => and (LtA P S P A B C) (Out P S R))
+++++
exists R.
-----
Lemma aristotle__greenberg : aristotle_s_axiom -> greenberg_s_axiom.
Proof.
intros aristotle P Q R A B C.
intros HNColB HABCacute HQRdiff HQright.
elim (eq_dec_points P Q); intro HPQdiff.
treat_equalities.
assert_diffs.
exists R.

*****
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
HQRdiff : not (eq P R)
HQright : Per P P R
HABCacute : Acute A B C
HNColB : not (Col A B C)
P,R,A,B,C : Tpoint
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (LtA P R P A B C) (Out P R R)
+++++
split; [|apply out_trivial; auto].
-----
Lemma aristotle__greenberg : aristotle_s_axiom -> greenberg_s_axiom.
Proof.
intros aristotle P Q R A B C.
intros HNColB HABCacute HQRdiff HQright.
elim (eq_dec_points P Q); intro HPQdiff.
treat_equalities.
assert_diffs.
exists R.
split; [|apply out_trivial; auto].

*****
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
HQRdiff : not (eq P R)
HQright : Per P P R
HABCacute : Acute A B C
HNColB : not (Col A B C)
P,R,A,B,C : Tpoint
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
LtA P R P A B C
+++++
split.
-----
Lemma aristotle__greenberg : aristotle_s_axiom -> greenberg_s_axiom.
Proof.
intros aristotle P Q R A B C.
intros HNColB HABCacute HQRdiff HQright.
elim (eq_dec_points P Q); intro HPQdiff.
treat_equalities.
assert_diffs.
exists R.
split; [|apply out_trivial; auto].
split.

*****
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
HQRdiff : not (eq P R)
HQright : Per P P R
HABCacute : Acute A B C
HNColB : not (Col A B C)
P,R,A,B,C : Tpoint
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
LeA P R P A B C
+++++
apply lea121345; auto.
-----
Lemma aristotle__greenberg : aristotle_s_axiom -> greenberg_s_axiom.
Proof.
intros aristotle P Q R A B C.
intros HNColB HABCacute HQRdiff HQright.
elim (eq_dec_points P Q); intro HPQdiff.
treat_equalities.
assert_diffs.
exists R.
split; [|apply out_trivial; auto].
split.
apply lea121345; auto.

*****
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
HQRdiff : not (eq P R)
HQright : Per P P R
HABCacute : Acute A B C
HNColB : not (Col A B C)
P,R,A,B,C : Tpoint
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (CongA P R P A B C)
+++++
intro.
-----
Lemma aristotle__greenberg : aristotle_s_axiom -> greenberg_s_axiom.
Proof.
intros aristotle P Q R A B C.
intros HNColB HABCacute HQRdiff HQright.
elim (eq_dec_points P Q); intro HPQdiff.
treat_equalities.
assert_diffs.
exists R.
split; [|apply out_trivial; auto].
split.
apply lea121345; auto.
intro.

*****
H : CongA P R P A B C
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
HQRdiff : not (eq P R)
HQright : Per P P R
HABCacute : Acute A B C
HNColB : not (Col A B C)
P,R,A,B,C : Tpoint
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply HNColB.
-----
Lemma aristotle__greenberg : aristotle_s_axiom -> greenberg_s_axiom.
Proof.
intros aristotle P Q R A B C.
intros HNColB HABCacute HQRdiff HQright.
elim (eq_dec_points P Q); intro HPQdiff.
treat_equalities.
assert_diffs.
exists R.
split; [|apply out_trivial; auto].
split.
apply lea121345; auto.
intro.
apply HNColB.

*****
H : CongA P R P A B C
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
HQRdiff : not (eq P R)
HQright : Per P P R
HABCacute : Acute A B C
HNColB : not (Col A B C)
P,R,A,B,C : Tpoint
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A B C
+++++
apply col_permutation_4.
-----
Lemma aristotle__greenberg : aristotle_s_axiom -> greenberg_s_axiom.
Proof.
intros aristotle P Q R A B C.
intros HNColB HABCacute HQRdiff HQright.
elim (eq_dec_points P Q); intro HPQdiff.
treat_equalities.
assert_diffs.
exists R.
split; [|apply out_trivial; auto].
split.
apply lea121345; auto.
intro.
apply HNColB.
apply col_permutation_4.

*****
H : CongA P R P A B C
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
HQRdiff : not (eq P R)
HQright : Per P P R
HABCacute : Acute A B C
HNColB : not (Col A B C)
P,R,A,B,C : Tpoint
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col B A C
+++++
apply out_col.
-----
Lemma aristotle__greenberg : aristotle_s_axiom -> greenberg_s_axiom.
Proof.
intros aristotle P Q R A B C.
intros HNColB HABCacute HQRdiff HQright.
elim (eq_dec_points P Q); intro HPQdiff.
treat_equalities.
assert_diffs.
exists R.
split; [|apply out_trivial; auto].
split.
apply lea121345; auto.
intro.
apply HNColB.
apply col_permutation_4.
apply out_col.

*****
H : CongA P R P A B C
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
HQRdiff : not (eq P R)
HQright : Per P P R
HABCacute : Acute A B C
HNColB : not (Col A B C)
P,R,A,B,C : Tpoint
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Out B A C
+++++
apply (eq_conga_out P R); auto.
-----
Lemma aristotle__greenberg : aristotle_s_axiom -> greenberg_s_axiom.
Proof.
intros aristotle P Q R A B C.
intros HNColB HABCacute HQRdiff HQright.
elim (eq_dec_points P Q); intro HPQdiff.

*****
HPQdiff : not (eq P Q)
HQright : Per P Q R
HQRdiff : not (eq Q R)
HABCacute : Acute A B C
HNColB : not (Col A B C)
P,Q,R,A,B,C : Tpoint
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun S : Tpoint => and (LtA P S Q A B C) (Out Q S R))
+++++
assert (HXY : (exists X Y, Out B A X /\ Out B C Y /\ Per B X Y /\ Lt P Q X Y)) by (apply aristotle; assumption).
-----
Lemma aristotle__greenberg : aristotle_s_axiom -> greenberg_s_axiom.
Proof.
intros aristotle P Q R A B C.
intros HNColB HABCacute HQRdiff HQright.
elim (eq_dec_points P Q); intro HPQdiff.
assert (HXY : (exists X Y, Out B A X /\\ Out B C Y /\\ Per B X Y /\\ Lt P Q X Y)) by (apply aristotle; assumption).

*****
HXY : ex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Out B C Y) (and (Per B X Y) (Lt P Q X Y)))))
HPQdiff : not (eq P Q)
HQright : Per P Q R
HQRdiff : not (eq Q R)
HABCacute : Acute A B C
HNColB : not (Col A B C)
P,Q,R,A,B,C : Tpoint
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun S : Tpoint => and (LtA P S Q A B C) (Out Q S R))
+++++
destruct HXY as [X [Y [PX [PY [HXright [Hle HNcong]]]]]].
-----
Lemma aristotle__greenberg : aristotle_s_axiom -> greenberg_s_axiom.
Proof.
intros aristotle P Q R A B C.
intros HNColB HABCacute HQRdiff HQright.
elim (eq_dec_points P Q); intro HPQdiff.
assert (HXY : (exists X Y, Out B A X /\\ Out B C Y /\\ Per B X Y /\\ Lt P Q X Y)) by (apply aristotle; assumption).
destruct HXY as [X [Y [PX [PY [HXright [Hle HNcong]]]]]].

*****
HNcong : not (Cong P Q X Y)
Hle : Le P Q X Y
HXright : Per B X Y
PY : Out B C Y
PX : Out B A X
X,Y : Tpoint
HPQdiff : not (eq P Q)
HQright : Per P Q R
HQRdiff : not (eq Q R)
HABCacute : Acute A B C
HNColB : not (Col A B C)
P,Q,R,A,B,C : Tpoint
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun S : Tpoint => and (LtA P S Q A B C) (Out Q S R))
+++++
assert_diffs.
-----
Lemma aristotle__greenberg : aristotle_s_axiom -> greenberg_s_axiom.
Proof.
intros aristotle P Q R A B C.
intros HNColB HABCacute HQRdiff HQright.
elim (eq_dec_points P Q); intro HPQdiff.
assert (HXY : (exists X Y, Out B A X /\\ Out B C Y /\\ Per B X Y /\\ Lt P Q X Y)) by (apply aristotle; assumption).
destruct HXY as [X [Y [PX [PY [HXright [Hle HNcong]]]]]].
assert_diffs.

*****
H7 : not (eq X B)
H3 : not (eq B Y)
H0 : not (eq P R)
H : not (eq X Y)
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
HNcong : not (Cong P Q X Y)
Hle : Le P Q X Y
HXright : Per B X Y
PY : Out B C Y
PX : Out B A X
X,Y : Tpoint
HPQdiff : not (eq P Q)
HQright : Per P Q R
HQRdiff : not (eq Q R)
HABCacute : Acute A B C
HNColB : not (Col A B C)
P,Q,R,A,B,C : Tpoint
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun S : Tpoint => and (LtA P S Q A B C) (Out Q S R))
+++++
assert (HXYdiff : X <> Y) by (intro; treat_equalities; auto).
-----
Lemma aristotle__greenberg : aristotle_s_axiom -> greenberg_s_axiom.
Proof.
intros aristotle P Q R A B C.
intros HNColB HABCacute HQRdiff HQright.
elim (eq_dec_points P Q); intro HPQdiff.
assert (HXY : (exists X Y, Out B A X /\\ Out B C Y /\\ Per B X Y /\\ Lt P Q X Y)) by (apply aristotle; assumption).
destruct HXY as [X [Y [PX [PY [HXright [Hle HNcong]]]]]].
assert_diffs.
assert (HXYdiff : X <> Y) by (intro; treat_equalities; auto).

*****
HXYdiff : not (eq X Y)
H7 : not (eq X B)
H3 : not (eq B Y)
H0 : not (eq P R)
H : not (eq X Y)
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
HNcong : not (Cong P Q X Y)
Hle : Le P Q X Y
HXright : Per B X Y
PY : Out B C Y
PX : Out B A X
X,Y : Tpoint
HPQdiff : not (eq P Q)
HQright : Per P Q R
HQRdiff : not (eq Q R)
HABCacute : Acute A B C
HNColB : not (Col A B C)
P,Q,R,A,B,C : Tpoint
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun S : Tpoint => and (LtA P S Q A B C) (Out Q S R))
+++++
assert (HT : (exists T, Out Q T P /\ Cong Q T X Y)) by (apply l6_11_existence; auto).
-----
Lemma aristotle__greenberg : aristotle_s_axiom -> greenberg_s_axiom.
Proof.
intros aristotle P Q R A B C.
intros HNColB HABCacute HQRdiff HQright.
elim (eq_dec_points P Q); intro HPQdiff.
assert (HXY : (exists X Y, Out B A X /\\ Out B C Y /\\ Per B X Y /\\ Lt P Q X Y)) by (apply aristotle; assumption).
destruct HXY as [X [Y [PX [PY [HXright [Hle HNcong]]]]]].
assert_diffs.
assert (HXYdiff : X <> Y) by (intro; treat_equalities; auto).
assert (HT : (exists T, Out Q T P /\\ Cong Q T X Y)) by (apply l6_11_existence; auto).

*****
HT : ex (fun T : Tpoint => and (Out Q T P) (Cong Q T X Y))
HXYdiff : not (eq X Y)
H7 : not (eq X B)
H3 : not (eq B Y)
H0 : not (eq P R)
H : not (eq X Y)
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
HNcong : not (Cong P Q X Y)
Hle : Le P Q X Y
HXright : Per B X Y
PY : Out B C Y
PX : Out B A X
X,Y : Tpoint
HPQdiff : not (eq P Q)
HQright : Per P Q R
HQRdiff : not (eq Q R)
HABCacute : Acute A B C
HNColB : not (Col A B C)
P,Q,R,A,B,C : Tpoint
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun S : Tpoint => and (LtA P S Q A B C) (Out Q S R))
+++++
destruct HT as [T []].
-----
Lemma aristotle__greenberg : aristotle_s_axiom -> greenberg_s_axiom.
Proof.
intros aristotle P Q R A B C.
intros HNColB HABCacute HQRdiff HQright.
elim (eq_dec_points P Q); intro HPQdiff.
assert (HXY : (exists X Y, Out B A X /\\ Out B C Y /\\ Per B X Y /\\ Lt P Q X Y)) by (apply aristotle; assumption).
destruct HXY as [X [Y [PX [PY [HXright [Hle HNcong]]]]]].
assert_diffs.
assert (HXYdiff : X <> Y) by (intro; treat_equalities; auto).
assert (HT : (exists T, Out Q T P /\\ Cong Q T X Y)) by (apply l6_11_existence; auto).
destruct HT as [T []].

*****
H6 : Cong Q T X Y
H5 : Out Q T P
T : Tpoint
HXYdiff : not (eq X Y)
H7 : not (eq X B)
H3 : not (eq B Y)
H0 : not (eq P R)
H : not (eq X Y)
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
HNcong : not (Cong P Q X Y)
Hle : Le P Q X Y
HXright : Per B X Y
PY : Out B C Y
PX : Out B A X
X,Y : Tpoint
HPQdiff : not (eq P Q)
HQright : Per P Q R
HQRdiff : not (eq Q R)
HABCacute : Acute A B C
HNColB : not (Col A B C)
P,Q,R,A,B,C : Tpoint
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun S : Tpoint => and (LtA P S Q A B C) (Out Q S R))
+++++
assert (HS : (exists S, Out Q S R /\ Cong Q S X B)) by (apply l6_11_existence; auto).
-----
Lemma aristotle__greenberg : aristotle_s_axiom -> greenberg_s_axiom.
Proof.
intros aristotle P Q R A B C.
intros HNColB HABCacute HQRdiff HQright.
elim (eq_dec_points P Q); intro HPQdiff.
assert (HXY : (exists X Y, Out B A X /\\ Out B C Y /\\ Per B X Y /\\ Lt P Q X Y)) by (apply aristotle; assumption).
destruct HXY as [X [Y [PX [PY [HXright [Hle HNcong]]]]]].
assert_diffs.
assert (HXYdiff : X <> Y) by (intro; treat_equalities; auto).
assert (HT : (exists T, Out Q T P /\\ Cong Q T X Y)) by (apply l6_11_existence; auto).
destruct HT as [T []].
assert (HS : (exists S, Out Q S R /\\ Cong Q S X B)) by (apply l6_11_existence; auto).

*****
HS : ex (fun S : Tpoint => and (Out Q S R) (Cong Q S X B))
H6 : Cong Q T X Y
H5 : Out Q T P
T : Tpoint
HXYdiff : not (eq X Y)
H7 : not (eq X B)
H3 : not (eq B Y)
H0 : not (eq P R)
H : not (eq X Y)
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
HNcong : not (Cong P Q X Y)
Hle : Le P Q X Y
HXright : Per B X Y
PY : Out B C Y
PX : Out B A X
X,Y : Tpoint
HPQdiff : not (eq P Q)
HQright : Per P Q R
HQRdiff : not (eq Q R)
HABCacute : Acute A B C
HNColB : not (Col A B C)
P,Q,R,A,B,C : Tpoint
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun S : Tpoint => and (LtA P S Q A B C) (Out Q S R))
+++++
destruct HS as [S []].
-----
Lemma aristotle__greenberg : aristotle_s_axiom -> greenberg_s_axiom.
Proof.
intros aristotle P Q R A B C.
intros HNColB HABCacute HQRdiff HQright.
elim (eq_dec_points P Q); intro HPQdiff.
assert (HXY : (exists X Y, Out B A X /\\ Out B C Y /\\ Per B X Y /\\ Lt P Q X Y)) by (apply aristotle; assumption).
destruct HXY as [X [Y [PX [PY [HXright [Hle HNcong]]]]]].
assert_diffs.
assert (HXYdiff : X <> Y) by (intro; treat_equalities; auto).
assert (HT : (exists T, Out Q T P /\\ Cong Q T X Y)) by (apply l6_11_existence; auto).
destruct HT as [T []].
assert (HS : (exists S, Out Q S R /\\ Cong Q S X B)) by (apply l6_11_existence; auto).
destruct HS as [S []].

*****
H9 : Cong Q S X B
H8 : Out Q S R
S : Tpoint
H6 : Cong Q T X Y
H5 : Out Q T P
T : Tpoint
HXYdiff : not (eq X Y)
H7 : not (eq X B)
H3 : not (eq B Y)
H0 : not (eq P R)
H : not (eq X Y)
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
HNcong : not (Cong P Q X Y)
Hle : Le P Q X Y
HXright : Per B X Y
PY : Out B C Y
PX : Out B A X
X,Y : Tpoint
HPQdiff : not (eq P Q)
HQright : Per P Q R
HQRdiff : not (eq Q R)
HABCacute : Acute A B C
HNColB : not (Col A B C)
P,Q,R,A,B,C : Tpoint
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun S : Tpoint => and (LtA P S Q A B C) (Out Q S R))
+++++
assert_diffs.
-----
Lemma aristotle__greenberg : aristotle_s_axiom -> greenberg_s_axiom.
Proof.
intros aristotle P Q R A B C.
intros HNColB HABCacute HQRdiff HQright.
elim (eq_dec_points P Q); intro HPQdiff.
assert (HXY : (exists X Y, Out B A X /\\ Out B C Y /\\ Per B X Y /\\ Lt P Q X Y)) by (apply aristotle; assumption).
destruct HXY as [X [Y [PX [PY [HXright [Hle HNcong]]]]]].
assert_diffs.
assert (HXYdiff : X <> Y) by (intro; treat_equalities; auto).
assert (HT : (exists T, Out Q T P /\\ Cong Q T X Y)) by (apply l6_11_existence; auto).
destruct HT as [T []].
assert (HS : (exists S, Out Q S R /\\ Cong Q S X B)) by (apply l6_11_existence; auto).
destruct HS as [S []].
assert_diffs.

*****
H11 : not (eq Q S)
H10 : not (eq Q T)
H9 : Cong Q S X B
H8 : Out Q S R
S : Tpoint
H6 : Cong Q T X Y
H5 : Out Q T P
T : Tpoint
H7 : not (eq X B)
H3 : not (eq B Y)
H0 : not (eq P R)
H : not (eq X Y)
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
HNcong : not (Cong P Q X Y)
Hle : Le P Q X Y
HXright : Per B X Y
PY : Out B C Y
PX : Out B A X
X,Y : Tpoint
HPQdiff : not (eq P Q)
HQright : Per P Q R
HQRdiff : not (eq Q R)
HABCacute : Acute A B C
HNColB : not (Col A B C)
P,Q,R,A,B,C : Tpoint
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun S : Tpoint => and (LtA P S Q A B C) (Out Q S R))
+++++
exists S.
-----
Lemma aristotle__greenberg : aristotle_s_axiom -> greenberg_s_axiom.
Proof.
intros aristotle P Q R A B C.
intros HNColB HABCacute HQRdiff HQright.
elim (eq_dec_points P Q); intro HPQdiff.
assert (HXY : (exists X Y, Out B A X /\\ Out B C Y /\\ Per B X Y /\\ Lt P Q X Y)) by (apply aristotle; assumption).
destruct HXY as [X [Y [PX [PY [HXright [Hle HNcong]]]]]].
assert_diffs.
assert (HXYdiff : X <> Y) by (intro; treat_equalities; auto).
assert (HT : (exists T, Out Q T P /\\ Cong Q T X Y)) by (apply l6_11_existence; auto).
destruct HT as [T []].
assert (HS : (exists S, Out Q S R /\\ Cong Q S X B)) by (apply l6_11_existence; auto).
destruct HS as [S []].
assert_diffs.
exists S.

*****
H11 : not (eq Q S)
H10 : not (eq Q T)
H9 : Cong Q S X B
H8 : Out Q S R
S : Tpoint
H6 : Cong Q T X Y
H5 : Out Q T P
T : Tpoint
H7 : not (eq X B)
H3 : not (eq B Y)
H0 : not (eq P R)
H : not (eq X Y)
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
HNcong : not (Cong P Q X Y)
Hle : Le P Q X Y
HXright : Per B X Y
PY : Out B C Y
PX : Out B A X
X,Y : Tpoint
HPQdiff : not (eq P Q)
HQright : Per P Q R
HQRdiff : not (eq Q R)
HABCacute : Acute A B C
HNColB : not (Col A B C)
P,Q,R,A,B,C : Tpoint
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (LtA P S Q A B C) (Out Q S R)
+++++
split; auto.
-----
Lemma aristotle__greenberg : aristotle_s_axiom -> greenberg_s_axiom.
Proof.
intros aristotle P Q R A B C.
intros HNColB HABCacute HQRdiff HQright.
elim (eq_dec_points P Q); intro HPQdiff.
assert (HXY : (exists X Y, Out B A X /\\ Out B C Y /\\ Per B X Y /\\ Lt P Q X Y)) by (apply aristotle; assumption).
destruct HXY as [X [Y [PX [PY [HXright [Hle HNcong]]]]]].
assert_diffs.
assert (HXYdiff : X <> Y) by (intro; treat_equalities; auto).
assert (HT : (exists T, Out Q T P /\\ Cong Q T X Y)) by (apply l6_11_existence; auto).
destruct HT as [T []].
assert (HS : (exists S, Out Q S R /\\ Cong Q S X B)) by (apply l6_11_existence; auto).
destruct HS as [S []].
assert_diffs.
exists S.
split; auto.

*****
H11 : not (eq Q S)
H10 : not (eq Q T)
H9 : Cong Q S X B
H8 : Out Q S R
S : Tpoint
H6 : Cong Q T X Y
H5 : Out Q T P
T : Tpoint
H7 : not (eq X B)
H3 : not (eq B Y)
H0 : not (eq P R)
H : not (eq X Y)
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
HNcong : not (Cong P Q X Y)
Hle : Le P Q X Y
HXright : Per B X Y
PY : Out B C Y
PX : Out B A X
X,Y : Tpoint
HPQdiff : not (eq P Q)
HQright : Per P Q R
HQRdiff : not (eq Q R)
HABCacute : Acute A B C
HNColB : not (Col A B C)
P,Q,R,A,B,C : Tpoint
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
LtA P S Q A B C
+++++
assert_cols.
-----
Lemma aristotle__greenberg : aristotle_s_axiom -> greenberg_s_axiom.
Proof.
intros aristotle P Q R A B C.
intros HNColB HABCacute HQRdiff HQright.
elim (eq_dec_points P Q); intro HPQdiff.
assert (HXY : (exists X Y, Out B A X /\\ Out B C Y /\\ Per B X Y /\\ Lt P Q X Y)) by (apply aristotle; assumption).
destruct HXY as [X [Y [PX [PY [HXright [Hle HNcong]]]]]].
assert_diffs.
assert (HXYdiff : X <> Y) by (intro; treat_equalities; auto).
assert (HT : (exists T, Out Q T P /\\ Cong Q T X Y)) by (apply l6_11_existence; auto).
destruct HT as [T []].
assert (HS : (exists S, Out Q S R /\\ Cong Q S X B)) by (apply l6_11_existence; auto).
destruct HS as [S []].
assert_diffs.
exists S.
split; auto.
assert_cols.

*****
H15 : Col B A X
H14 : Col B C Y
H13 : Col Q T P
H12 : Col Q S R
H11 : not (eq Q S)
H10 : not (eq Q T)
H9 : Cong Q S X B
H8 : Out Q S R
S : Tpoint
H6 : Cong Q T X Y
H5 : Out Q T P
T : Tpoint
H7 : not (eq X B)
H3 : not (eq B Y)
H0 : not (eq P R)
H : not (eq X Y)
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
HNcong : not (Cong P Q X Y)
Hle : Le P Q X Y
HXright : Per B X Y
PY : Out B C Y
PX : Out B A X
X,Y : Tpoint
HPQdiff : not (eq P Q)
HQright : Per P Q R
HQRdiff : not (eq Q R)
HABCacute : Acute A B C
HNColB : not (Col A B C)
P,Q,R,A,B,C : Tpoint
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
LtA P S Q A B C
+++++
assert (Per S Q P) by (apply (l8_3 R); Perp; Col).
-----
Lemma aristotle__greenberg : aristotle_s_axiom -> greenberg_s_axiom.
Proof.
intros aristotle P Q R A B C.
intros HNColB HABCacute HQRdiff HQright.
elim (eq_dec_points P Q); intro HPQdiff.
assert (HXY : (exists X Y, Out B A X /\\ Out B C Y /\\ Per B X Y /\\ Lt P Q X Y)) by (apply aristotle; assumption).
destruct HXY as [X [Y [PX [PY [HXright [Hle HNcong]]]]]].
assert_diffs.
assert (HXYdiff : X <> Y) by (intro; treat_equalities; auto).
assert (HT : (exists T, Out Q T P /\\ Cong Q T X Y)) by (apply l6_11_existence; auto).
destruct HT as [T []].
assert (HS : (exists S, Out Q S R /\\ Cong Q S X B)) by (apply l6_11_existence; auto).
destruct HS as [S []].
assert_diffs.
exists S.
split; auto.
assert_cols.
assert (Per S Q P) by (apply (l8_3 R); Perp; Col).

*****
H16 : Per S Q P
H15 : Col B A X
H14 : Col B C Y
H13 : Col Q T P
H12 : Col Q S R
H11 : not (eq Q S)
H10 : not (eq Q T)
H9 : Cong Q S X B
H8 : Out Q S R
S : Tpoint
H6 : Cong Q T X Y
H5 : Out Q T P
T : Tpoint
H7 : not (eq X B)
H3 : not (eq B Y)
H0 : not (eq P R)
H : not (eq X Y)
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
HNcong : not (Cong P Q X Y)
Hle : Le P Q X Y
HXright : Per B X Y
PY : Out B C Y
PX : Out B A X
X,Y : Tpoint
HPQdiff : not (eq P Q)
HQright : Per P Q R
HQRdiff : not (eq Q R)
HABCacute : Acute A B C
HNColB : not (Col A B C)
P,Q,R,A,B,C : Tpoint
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
LtA P S Q A B C
+++++
assert (Per T Q S) by (apply (l8_3 P); Perp; Col).
-----
Lemma aristotle__greenberg : aristotle_s_axiom -> greenberg_s_axiom.
Proof.
intros aristotle P Q R A B C.
intros HNColB HABCacute HQRdiff HQright.
elim (eq_dec_points P Q); intro HPQdiff.
assert (HXY : (exists X Y, Out B A X /\\ Out B C Y /\\ Per B X Y /\\ Lt P Q X Y)) by (apply aristotle; assumption).
destruct HXY as [X [Y [PX [PY [HXright [Hle HNcong]]]]]].
assert_diffs.
assert (HXYdiff : X <> Y) by (intro; treat_equalities; auto).
assert (HT : (exists T, Out Q T P /\\ Cong Q T X Y)) by (apply l6_11_existence; auto).
destruct HT as [T []].
assert (HS : (exists S, Out Q S R /\\ Cong Q S X B)) by (apply l6_11_existence; auto).
destruct HS as [S []].
assert_diffs.
exists S.
split; auto.
assert_cols.
assert (Per S Q P) by (apply (l8_3 R); Perp; Col).
assert (Per T Q S) by (apply (l8_3 P); Perp; Col).

*****
H17 : Per T Q S
H16 : Per S Q P
H15 : Col B A X
H14 : Col B C Y
H13 : Col Q T P
H12 : Col Q S R
H11 : not (eq Q S)
H10 : not (eq Q T)
H9 : Cong Q S X B
H8 : Out Q S R
S : Tpoint
H6 : Cong Q T X Y
H5 : Out Q T P
T : Tpoint
H7 : not (eq X B)
H3 : not (eq B Y)
H0 : not (eq P R)
H : not (eq X Y)
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
HNcong : not (Cong P Q X Y)
Hle : Le P Q X Y
HXright : Per B X Y
PY : Out B C Y
PX : Out B A X
X,Y : Tpoint
HPQdiff : not (eq P Q)
HQright : Per P Q R
HQRdiff : not (eq Q R)
HABCacute : Acute A B C
HNColB : not (Col A B C)
P,Q,R,A,B,C : Tpoint
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
LtA P S Q A B C
+++++
assert (P<>S).
-----
Lemma aristotle__greenberg : aristotle_s_axiom -> greenberg_s_axiom.
Proof.
intros aristotle P Q R A B C.
intros HNColB HABCacute HQRdiff HQright.
elim (eq_dec_points P Q); intro HPQdiff.
assert (HXY : (exists X Y, Out B A X /\\ Out B C Y /\\ Per B X Y /\\ Lt P Q X Y)) by (apply aristotle; assumption).
destruct HXY as [X [Y [PX [PY [HXright [Hle HNcong]]]]]].
assert_diffs.
assert (HXYdiff : X <> Y) by (intro; treat_equalities; auto).
assert (HT : (exists T, Out Q T P /\\ Cong Q T X Y)) by (apply l6_11_existence; auto).
destruct HT as [T []].
assert (HS : (exists S, Out Q S R /\\ Cong Q S X B)) by (apply l6_11_existence; auto).
destruct HS as [S []].
assert_diffs.
exists S.
split; auto.
assert_cols.
assert (Per S Q P) by (apply (l8_3 R); Perp; Col).
assert (Per T Q S) by (apply (l8_3 P); Perp; Col).
assert (P<>S).

*****
H17 : Per T Q S
H16 : Per S Q P
H15 : Col B A X
H14 : Col B C Y
H13 : Col Q T P
H12 : Col Q S R
H11 : not (eq Q S)
H10 : not (eq Q T)
H9 : Cong Q S X B
H8 : Out Q S R
S : Tpoint
H6 : Cong Q T X Y
H5 : Out Q T P
T : Tpoint
H7 : not (eq X B)
H3 : not (eq B Y)
H0 : not (eq P R)
H : not (eq X Y)
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
HNcong : not (Cong P Q X Y)
Hle : Le P Q X Y
HXright : Per B X Y
PY : Out B C Y
PX : Out B A X
X,Y : Tpoint
HPQdiff : not (eq P Q)
HQright : Per P Q R
HQRdiff : not (eq Q R)
HABCacute : Acute A B C
HNColB : not (Col A B C)
P,Q,R,A,B,C : Tpoint
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq P S)
+++++
intro; treat_equalities.
-----
Lemma aristotle__greenberg : aristotle_s_axiom -> greenberg_s_axiom.
Proof.
intros aristotle P Q R A B C.
intros HNColB HABCacute HQRdiff HQright.
elim (eq_dec_points P Q); intro HPQdiff.
assert (HXY : (exists X Y, Out B A X /\\ Out B C Y /\\ Per B X Y /\\ Lt P Q X Y)) by (apply aristotle; assumption).
destruct HXY as [X [Y [PX [PY [HXright [Hle HNcong]]]]]].
assert_diffs.
assert (HXYdiff : X <> Y) by (intro; treat_equalities; auto).
assert (HT : (exists T, Out Q T P /\\ Cong Q T X Y)) by (apply l6_11_existence; auto).
destruct HT as [T []].
assert (HS : (exists S, Out Q S R /\\ Cong Q S X B)) by (apply l6_11_existence; auto).
destruct HS as [S []].
assert_diffs.
exists S.
split; auto.
assert_cols.
assert (Per S Q P) by (apply (l8_3 R); Perp; Col).
assert (Per T Q S) by (apply (l8_3 P); Perp; Col).
assert (P<>S).
intro; treat_equalities.

*****
H16 : Per P Q P
H17 : Per T Q P
H15 : Col B A X
H14 : Col B C Y
H13 : Col Q T P
H12 : Col Q P R
H10 : not (eq Q T)
H8 : Out Q P R
H9 : Cong Q P X B
H6 : Cong Q T X Y
H5 : Out Q T P
T : Tpoint
H7 : not (eq X B)
H3 : not (eq B Y)
H0 : not (eq P R)
H : not (eq X Y)
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
HNcong : not (Cong P Q X Y)
Hle : Le P Q X Y
HXright : Per B X Y
PY : Out B C Y
PX : Out B A X
X,Y : Tpoint
HPQdiff : not (eq P Q)
HQright : Per P Q R
HQRdiff : not (eq Q R)
HABCacute : Acute A B C
HNColB : not (Col A B C)
P,Q,R,A,B,C : Tpoint
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert (P=Q) by (apply l8_8; auto); treat_equalities; absurde.
-----
Lemma aristotle__greenberg : aristotle_s_axiom -> greenberg_s_axiom.
Proof.
intros aristotle P Q R A B C.
intros HNColB HABCacute HQRdiff HQright.
elim (eq_dec_points P Q); intro HPQdiff.
assert (HXY : (exists X Y, Out B A X /\\ Out B C Y /\\ Per B X Y /\\ Lt P Q X Y)) by (apply aristotle; assumption).
destruct HXY as [X [Y [PX [PY [HXright [Hle HNcong]]]]]].
assert_diffs.
assert (HXYdiff : X <> Y) by (intro; treat_equalities; auto).
assert (HT : (exists T, Out Q T P /\\ Cong Q T X Y)) by (apply l6_11_existence; auto).
destruct HT as [T []].
assert (HS : (exists S, Out Q S R /\\ Cong Q S X B)) by (apply l6_11_existence; auto).
destruct HS as [S []].
assert_diffs.
exists S.
split; auto.
assert_cols.
assert (Per S Q P) by (apply (l8_3 R); Perp; Col).
assert (Per T Q S) by (apply (l8_3 P); Perp; Col).
assert (P<>S).

*****
H18 : not (eq P S)
H17 : Per T Q S
H16 : Per S Q P
H15 : Col B A X
H14 : Col B C Y
H13 : Col Q T P
H12 : Col Q S R
H11 : not (eq Q S)
H10 : not (eq Q T)
H9 : Cong Q S X B
H8 : Out Q S R
S : Tpoint
H6 : Cong Q T X Y
H5 : Out Q T P
T : Tpoint
H7 : not (eq X B)
H3 : not (eq B Y)
H0 : not (eq P R)
H : not (eq X Y)
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
HNcong : not (Cong P Q X Y)
Hle : Le P Q X Y
HXright : Per B X Y
PY : Out B C Y
PX : Out B A X
X,Y : Tpoint
HPQdiff : not (eq P Q)
HQright : Per P Q R
HQRdiff : not (eq Q R)
HABCacute : Acute A B C
HNColB : not (Col A B C)
P,Q,R,A,B,C : Tpoint
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
LtA P S Q A B C
+++++
assert (T<>S).
-----
Lemma aristotle__greenberg : aristotle_s_axiom -> greenberg_s_axiom.
Proof.
intros aristotle P Q R A B C.
intros HNColB HABCacute HQRdiff HQright.
elim (eq_dec_points P Q); intro HPQdiff.
assert (HXY : (exists X Y, Out B A X /\\ Out B C Y /\\ Per B X Y /\\ Lt P Q X Y)) by (apply aristotle; assumption).
destruct HXY as [X [Y [PX [PY [HXright [Hle HNcong]]]]]].
assert_diffs.
assert (HXYdiff : X <> Y) by (intro; treat_equalities; auto).
assert (HT : (exists T, Out Q T P /\\ Cong Q T X Y)) by (apply l6_11_existence; auto).
destruct HT as [T []].
assert (HS : (exists S, Out Q S R /\\ Cong Q S X B)) by (apply l6_11_existence; auto).
destruct HS as [S []].
assert_diffs.
exists S.
split; auto.
assert_cols.
assert (Per S Q P) by (apply (l8_3 R); Perp; Col).
assert (Per T Q S) by (apply (l8_3 P); Perp; Col).
assert (P<>S).
assert (T<>S).

*****
H18 : not (eq P S)
H17 : Per T Q S
H16 : Per S Q P
H15 : Col B A X
H14 : Col B C Y
H13 : Col Q T P
H12 : Col Q S R
H11 : not (eq Q S)
H10 : not (eq Q T)
H9 : Cong Q S X B
H8 : Out Q S R
S : Tpoint
H6 : Cong Q T X Y
H5 : Out Q T P
T : Tpoint
H7 : not (eq X B)
H3 : not (eq B Y)
H0 : not (eq P R)
H : not (eq X Y)
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
HNcong : not (Cong P Q X Y)
Hle : Le P Q X Y
HXright : Per B X Y
PY : Out B C Y
PX : Out B A X
X,Y : Tpoint
HPQdiff : not (eq P Q)
HQright : Per P Q R
HQRdiff : not (eq Q R)
HABCacute : Acute A B C
HNColB : not (Col A B C)
P,Q,R,A,B,C : Tpoint
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq T S)
+++++
intro; treat_equalities.
-----
Lemma aristotle__greenberg : aristotle_s_axiom -> greenberg_s_axiom.
Proof.
intros aristotle P Q R A B C.
intros HNColB HABCacute HQRdiff HQright.
elim (eq_dec_points P Q); intro HPQdiff.
assert (HXY : (exists X Y, Out B A X /\\ Out B C Y /\\ Per B X Y /\\ Lt P Q X Y)) by (apply aristotle; assumption).
destruct HXY as [X [Y [PX [PY [HXright [Hle HNcong]]]]]].
assert_diffs.
assert (HXYdiff : X <> Y) by (intro; treat_equalities; auto).
assert (HT : (exists T, Out Q T P /\\ Cong Q T X Y)) by (apply l6_11_existence; auto).
destruct HT as [T []].
assert (HS : (exists S, Out Q S R /\\ Cong Q S X B)) by (apply l6_11_existence; auto).
destruct HS as [S []].
assert_diffs.
exists S.
split; auto.
assert_cols.
assert (Per S Q P) by (apply (l8_3 R); Perp; Col).
assert (Per T Q S) by (apply (l8_3 P); Perp; Col).
assert (P<>S).
assert (T<>S).
intro; treat_equalities.

*****
H16 : Per T Q P
H17 : Per T Q T
H18 : not (eq P T)
H15 : Col B A X
H14 : Col B C Y
H13 : Col Q T P
H12 : Col Q T R
H10 : not (eq Q T)
H8 : Out Q T R
H9 : Cong Q T X B
H6 : Cong Q T X Y
H5 : Out Q T P
T : Tpoint
H7 : not (eq X B)
H3 : not (eq B Y)
H0 : not (eq P R)
H : not (eq X Y)
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
HNcong : not (Cong P Q X Y)
Hle : Le P Q X Y
HXright : Per B X Y
PY : Out B C Y
PX : Out B A X
X,Y : Tpoint
HPQdiff : not (eq P Q)
HQright : Per P Q R
HQRdiff : not (eq Q R)
HABCacute : Acute A B C
HNColB : not (Col A B C)
P,Q,R,A,B,C : Tpoint
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert (T=Q) by (apply l8_8; auto); treat_equalities; absurde.
-----
Lemma aristotle__greenberg : aristotle_s_axiom -> greenberg_s_axiom.
Proof.
intros aristotle P Q R A B C.
intros HNColB HABCacute HQRdiff HQright.
elim (eq_dec_points P Q); intro HPQdiff.
assert (HXY : (exists X Y, Out B A X /\\ Out B C Y /\\ Per B X Y /\\ Lt P Q X Y)) by (apply aristotle; assumption).
destruct HXY as [X [Y [PX [PY [HXright [Hle HNcong]]]]]].
assert_diffs.
assert (HXYdiff : X <> Y) by (intro; treat_equalities; auto).
assert (HT : (exists T, Out Q T P /\\ Cong Q T X Y)) by (apply l6_11_existence; auto).
destruct HT as [T []].
assert (HS : (exists S, Out Q S R /\\ Cong Q S X B)) by (apply l6_11_existence; auto).
destruct HS as [S []].
assert_diffs.
exists S.
split; auto.
assert_cols.
assert (Per S Q P) by (apply (l8_3 R); Perp; Col).
assert (Per T Q S) by (apply (l8_3 P); Perp; Col).
assert (P<>S).
assert (T<>S).

*****
H19 : not (eq T S)
H18 : not (eq P S)
H17 : Per T Q S
H16 : Per S Q P
H15 : Col B A X
H14 : Col B C Y
H13 : Col Q T P
H12 : Col Q S R
H11 : not (eq Q S)
H10 : not (eq Q T)
H9 : Cong Q S X B
H8 : Out Q S R
S : Tpoint
H6 : Cong Q T X Y
H5 : Out Q T P
T : Tpoint
H7 : not (eq X B)
H3 : not (eq B Y)
H0 : not (eq P R)
H : not (eq X Y)
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
HNcong : not (Cong P Q X Y)
Hle : Le P Q X Y
HXright : Per B X Y
PY : Out B C Y
PX : Out B A X
X,Y : Tpoint
HPQdiff : not (eq P Q)
HQright : Per P Q R
HQRdiff : not (eq Q R)
HABCacute : Acute A B C
HNColB : not (Col A B C)
P,Q,R,A,B,C : Tpoint
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
LtA P S Q A B C
+++++
apply conga_preserves_lta with P S Q T S Q; try (apply conga_refl; auto); [|split].
-----
Lemma aristotle__greenberg : aristotle_s_axiom -> greenberg_s_axiom.
Proof.
intros aristotle P Q R A B C.
intros HNColB HABCacute HQRdiff HQright.
elim (eq_dec_points P Q); intro HPQdiff.
assert (HXY : (exists X Y, Out B A X /\\ Out B C Y /\\ Per B X Y /\\ Lt P Q X Y)) by (apply aristotle; assumption).
destruct HXY as [X [Y [PX [PY [HXright [Hle HNcong]]]]]].
assert_diffs.
assert (HXYdiff : X <> Y) by (intro; treat_equalities; auto).
assert (HT : (exists T, Out Q T P /\\ Cong Q T X Y)) by (apply l6_11_existence; auto).
destruct HT as [T []].
assert (HS : (exists S, Out Q S R /\\ Cong Q S X B)) by (apply l6_11_existence; auto).
destruct HS as [S []].
assert_diffs.
exists S.
split; auto.
assert_cols.
assert (Per S Q P) by (apply (l8_3 R); Perp; Col).
assert (Per T Q S) by (apply (l8_3 P); Perp; Col).
assert (P<>S).
assert (T<>S).
apply conga_preserves_lta with P S Q T S Q; try (apply conga_refl; auto); [|split].

*****
H19 : not (eq T S)
H18 : not (eq P S)
H17 : Per T Q S
H16 : Per S Q P
H15 : Col B A X
H14 : Col B C Y
H13 : Col Q T P
H12 : Col Q S R
H11 : not (eq Q S)
H10 : not (eq Q T)
H9 : Cong Q S X B
H8 : Out Q S R
S : Tpoint
H6 : Cong Q T X Y
H5 : Out Q T P
T : Tpoint
H7 : not (eq X B)
H3 : not (eq B Y)
H0 : not (eq P R)
H : not (eq X Y)
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
HNcong : not (Cong P Q X Y)
Hle : Le P Q X Y
HXright : Per B X Y
PY : Out B C Y
PX : Out B A X
X,Y : Tpoint
HPQdiff : not (eq P Q)
HQright : Per P Q R
HQRdiff : not (eq Q R)
HABCacute : Acute A B C
HNColB : not (Col A B C)
P,Q,R,A,B,C : Tpoint
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
CongA T S Q A B C
+++++
-
-----
Lemma aristotle__greenberg : aristotle_s_axiom -> greenberg_s_axiom.
Proof.
intros aristotle P Q R A B C.
intros HNColB HABCacute HQRdiff HQright.
elim (eq_dec_points P Q); intro HPQdiff.
assert (HXY : (exists X Y, Out B A X /\\ Out B C Y /\\ Per B X Y /\\ Lt P Q X Y)) by (apply aristotle; assumption).
destruct HXY as [X [Y [PX [PY [HXright [Hle HNcong]]]]]].
assert_diffs.
assert (HXYdiff : X <> Y) by (intro; treat_equalities; auto).
assert (HT : (exists T, Out Q T P /\\ Cong Q T X Y)) by (apply l6_11_existence; auto).
destruct HT as [T []].
assert (HS : (exists S, Out Q S R /\\ Cong Q S X B)) by (apply l6_11_existence; auto).
destruct HS as [S []].
assert_diffs.
exists S.
split; auto.
assert_cols.
assert (Per S Q P) by (apply (l8_3 R); Perp; Col).
assert (Per T Q S) by (apply (l8_3 P); Perp; Col).
assert (P<>S).
assert (T<>S).
apply conga_preserves_lta with P S Q T S Q; try (apply conga_refl; auto); [|split].
-

*****
H19 : not (eq T S)
H18 : not (eq P S)
H17 : Per T Q S
H16 : Per S Q P
H15 : Col B A X
H14 : Col B C Y
H13 : Col Q T P
H12 : Col Q S R
H11 : not (eq Q S)
H10 : not (eq Q T)
H9 : Cong Q S X B
H8 : Out Q S R
S : Tpoint
H6 : Cong Q T X Y
H5 : Out Q T P
T : Tpoint
H7 : not (eq X B)
H3 : not (eq B Y)
H0 : not (eq P R)
H : not (eq X Y)
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
HNcong : not (Cong P Q X Y)
Hle : Le P Q X Y
HXright : Per B X Y
PY : Out B C Y
PX : Out B A X
X,Y : Tpoint
HPQdiff : not (eq P Q)
HQright : Per P Q R
HQRdiff : not (eq Q R)
HABCacute : Acute A B C
HNColB : not (Col A B C)
P,Q,R,A,B,C : Tpoint
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
CongA T S Q A B C
+++++
apply conga_trans with X B Y.
-----
Lemma aristotle__greenberg : aristotle_s_axiom -> greenberg_s_axiom.
Proof.
intros aristotle P Q R A B C.
intros HNColB HABCacute HQRdiff HQright.
elim (eq_dec_points P Q); intro HPQdiff.
assert (HXY : (exists X Y, Out B A X /\\ Out B C Y /\\ Per B X Y /\\ Lt P Q X Y)) by (apply aristotle; assumption).
destruct HXY as [X [Y [PX [PY [HXright [Hle HNcong]]]]]].
assert_diffs.
assert (HXYdiff : X <> Y) by (intro; treat_equalities; auto).
assert (HT : (exists T, Out Q T P /\\ Cong Q T X Y)) by (apply l6_11_existence; auto).
destruct HT as [T []].
assert (HS : (exists S, Out Q S R /\\ Cong Q S X B)) by (apply l6_11_existence; auto).
destruct HS as [S []].
assert_diffs.
exists S.
split; auto.
assert_cols.
assert (Per S Q P) by (apply (l8_3 R); Perp; Col).
assert (Per T Q S) by (apply (l8_3 P); Perp; Col).
assert (P<>S).
assert (T<>S).
apply conga_preserves_lta with P S Q T S Q; try (apply conga_refl; auto); [|split].
-
apply conga_trans with X B Y.

*****
H19 : not (eq T S)
H18 : not (eq P S)
H17 : Per T Q S
H16 : Per S Q P
H15 : Col B A X
H14 : Col B C Y
H13 : Col Q T P
H12 : Col Q S R
H11 : not (eq Q S)
H10 : not (eq Q T)
H9 : Cong Q S X B
H8 : Out Q S R
S : Tpoint
H6 : Cong Q T X Y
H5 : Out Q T P
T : Tpoint
H7 : not (eq X B)
H3 : not (eq B Y)
H0 : not (eq P R)
H : not (eq X Y)
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
HNcong : not (Cong P Q X Y)
Hle : Le P Q X Y
HXright : Per B X Y
PY : Out B C Y
PX : Out B A X
X,Y : Tpoint
HPQdiff : not (eq P Q)
HQright : Per P Q R
HQRdiff : not (eq Q R)
HABCacute : Acute A B C
HNColB : not (Col A B C)
P,Q,R,A,B,C : Tpoint
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
CongA T S Q X B Y
+++++
2: apply (out_conga A B C A B C); CongA; apply out_trivial; auto.
-----
Lemma aristotle__greenberg : aristotle_s_axiom -> greenberg_s_axiom.
Proof.
intros aristotle P Q R A B C.
intros HNColB HABCacute HQRdiff HQright.
elim (eq_dec_points P Q); intro HPQdiff.
assert (HXY : (exists X Y, Out B A X /\\ Out B C Y /\\ Per B X Y /\\ Lt P Q X Y)) by (apply aristotle; assumption).
destruct HXY as [X [Y [PX [PY [HXright [Hle HNcong]]]]]].
assert_diffs.
assert (HXYdiff : X <> Y) by (intro; treat_equalities; auto).
assert (HT : (exists T, Out Q T P /\\ Cong Q T X Y)) by (apply l6_11_existence; auto).
destruct HT as [T []].
assert (HS : (exists S, Out Q S R /\\ Cong Q S X B)) by (apply l6_11_existence; auto).
destruct HS as [S []].
assert_diffs.
exists S.
split; auto.
assert_cols.
assert (Per S Q P) by (apply (l8_3 R); Perp; Col).
assert (Per T Q S) by (apply (l8_3 P); Perp; Col).
assert (P<>S).
assert (T<>S).
apply conga_preserves_lta with P S Q T S Q; try (apply conga_refl; auto); [|split].
-
apply conga_trans with X B Y.
2: apply (out_conga A B C A B C); CongA; apply out_trivial; auto.

*****
H19 : not (eq T S)
H18 : not (eq P S)
H17 : Per T Q S
H16 : Per S Q P
H15 : Col B A X
H14 : Col B C Y
H13 : Col Q T P
H12 : Col Q S R
H11 : not (eq Q S)
H10 : not (eq Q T)
H9 : Cong Q S X B
H8 : Out Q S R
S : Tpoint
H6 : Cong Q T X Y
H5 : Out Q T P
T : Tpoint
H7 : not (eq X B)
H3 : not (eq B Y)
H0 : not (eq P R)
H : not (eq X Y)
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
HNcong : not (Cong P Q X Y)
Hle : Le P Q X Y
HXright : Per B X Y
PY : Out B C Y
PX : Out B A X
X,Y : Tpoint
HPQdiff : not (eq P Q)
HQright : Per P Q R
HQRdiff : not (eq Q R)
HABCacute : Acute A B C
HNColB : not (Col A B C)
P,Q,R,A,B,C : Tpoint
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
CongA T S Q X B Y
+++++
assert (HInter : (Cong T S Y B /\ (T <> S -> CongA Q T S X Y B /\ CongA Q S T X B Y))).
-----
Lemma aristotle__greenberg : aristotle_s_axiom -> greenberg_s_axiom.
Proof.
intros aristotle P Q R A B C.
intros HNColB HABCacute HQRdiff HQright.
elim (eq_dec_points P Q); intro HPQdiff.
assert (HXY : (exists X Y, Out B A X /\\ Out B C Y /\\ Per B X Y /\\ Lt P Q X Y)) by (apply aristotle; assumption).
destruct HXY as [X [Y [PX [PY [HXright [Hle HNcong]]]]]].
assert_diffs.
assert (HXYdiff : X <> Y) by (intro; treat_equalities; auto).
assert (HT : (exists T, Out Q T P /\\ Cong Q T X Y)) by (apply l6_11_existence; auto).
destruct HT as [T []].
assert (HS : (exists S, Out Q S R /\\ Cong Q S X B)) by (apply l6_11_existence; auto).
destruct HS as [S []].
assert_diffs.
exists S.
split; auto.
assert_cols.
assert (Per S Q P) by (apply (l8_3 R); Perp; Col).
assert (Per T Q S) by (apply (l8_3 P); Perp; Col).
assert (P<>S).
assert (T<>S).
apply conga_preserves_lta with P S Q T S Q; try (apply conga_refl; auto); [|split].
-
apply conga_trans with X B Y.
2: apply (out_conga A B C A B C); CongA; apply out_trivial; auto.
assert (HInter : (Cong T S Y B /\\ (T <> S -> CongA Q T S X Y B /\\ CongA Q S T X B Y))).

*****
H19 : not (eq T S)
H18 : not (eq P S)
H17 : Per T Q S
H16 : Per S Q P
H15 : Col B A X
H14 : Col B C Y
H13 : Col Q T P
H12 : Col Q S R
H11 : not (eq Q S)
H10 : not (eq Q T)
H9 : Cong Q S X B
H8 : Out Q S R
S : Tpoint
H6 : Cong Q T X Y
H5 : Out Q T P
T : Tpoint
H7 : not (eq X B)
H3 : not (eq B Y)
H0 : not (eq P R)
H : not (eq X Y)
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
HNcong : not (Cong P Q X Y)
Hle : Le P Q X Y
HXright : Per B X Y
PY : Out B C Y
PX : Out B A X
X,Y : Tpoint
HPQdiff : not (eq P Q)
HQright : Per P Q R
HQRdiff : not (eq Q R)
HABCacute : Acute A B C
HNColB : not (Col A B C)
P,Q,R,A,B,C : Tpoint
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Cong T S Y B) (forall _ : not (eq T S), and (CongA Q T S X Y B) (CongA Q S T X B Y))
+++++
apply (l11_49 T Q S Y X B); Cong.
-----
Lemma aristotle__greenberg : aristotle_s_axiom -> greenberg_s_axiom.
Proof.
intros aristotle P Q R A B C.
intros HNColB HABCacute HQRdiff HQright.
elim (eq_dec_points P Q); intro HPQdiff.
assert (HXY : (exists X Y, Out B A X /\\ Out B C Y /\\ Per B X Y /\\ Lt P Q X Y)) by (apply aristotle; assumption).
destruct HXY as [X [Y [PX [PY [HXright [Hle HNcong]]]]]].
assert_diffs.
assert (HXYdiff : X <> Y) by (intro; treat_equalities; auto).
assert (HT : (exists T, Out Q T P /\\ Cong Q T X Y)) by (apply l6_11_existence; auto).
destruct HT as [T []].
assert (HS : (exists S, Out Q S R /\\ Cong Q S X B)) by (apply l6_11_existence; auto).
destruct HS as [S []].
assert_diffs.
exists S.
split; auto.
assert_cols.
assert (Per S Q P) by (apply (l8_3 R); Perp; Col).
assert (Per T Q S) by (apply (l8_3 P); Perp; Col).
assert (P<>S).
assert (T<>S).
apply conga_preserves_lta with P S Q T S Q; try (apply conga_refl; auto); [|split].
-
apply conga_trans with X B Y.
2: apply (out_conga A B C A B C); CongA; apply out_trivial; auto.
assert (HInter : (Cong T S Y B /\\ (T <> S -> CongA Q T S X Y B /\\ CongA Q S T X B Y))).
apply (l11_49 T Q S Y X B); Cong.

*****
H19 : not (eq T S)
H18 : not (eq P S)
H17 : Per T Q S
H16 : Per S Q P
H15 : Col B A X
H14 : Col B C Y
H13 : Col Q T P
H12 : Col Q S R
H11 : not (eq Q S)
H10 : not (eq Q T)
H9 : Cong Q S X B
H8 : Out Q S R
S : Tpoint
H6 : Cong Q T X Y
H5 : Out Q T P
T : Tpoint
H7 : not (eq X B)
H3 : not (eq B Y)
H0 : not (eq P R)
H : not (eq X Y)
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
HNcong : not (Cong P Q X Y)
Hle : Le P Q X Y
HXright : Per B X Y
PY : Out B C Y
PX : Out B A X
X,Y : Tpoint
HPQdiff : not (eq P Q)
HQright : Per P Q R
HQRdiff : not (eq Q R)
HABCacute : Acute A B C
HNColB : not (Col A B C)
P,Q,R,A,B,C : Tpoint
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
CongA T Q S Y X B
+++++
apply l11_16; Perp.
-----
Lemma aristotle__greenberg : aristotle_s_axiom -> greenberg_s_axiom.
Proof.
intros aristotle P Q R A B C.
intros HNColB HABCacute HQRdiff HQright.
elim (eq_dec_points P Q); intro HPQdiff.
assert (HXY : (exists X Y, Out B A X /\\ Out B C Y /\\ Per B X Y /\\ Lt P Q X Y)) by (apply aristotle; assumption).
destruct HXY as [X [Y [PX [PY [HXright [Hle HNcong]]]]]].
assert_diffs.
assert (HXYdiff : X <> Y) by (intro; treat_equalities; auto).
assert (HT : (exists T, Out Q T P /\\ Cong Q T X Y)) by (apply l6_11_existence; auto).
destruct HT as [T []].
assert (HS : (exists S, Out Q S R /\\ Cong Q S X B)) by (apply l6_11_existence; auto).
destruct HS as [S []].
assert_diffs.
exists S.
split; auto.
assert_cols.
assert (Per S Q P) by (apply (l8_3 R); Perp; Col).
assert (Per T Q S) by (apply (l8_3 P); Perp; Col).
assert (P<>S).
assert (T<>S).
apply conga_preserves_lta with P S Q T S Q; try (apply conga_refl; auto); [|split].
-
apply conga_trans with X B Y.
2: apply (out_conga A B C A B C); CongA; apply out_trivial; auto.
assert (HInter : (Cong T S Y B /\\ (T <> S -> CongA Q T S X Y B /\\ CongA Q S T X B Y))).

*****
HInter : and (Cong T S Y B)\n (forall _ : not (eq T S), and (CongA Q T S X Y B) (CongA Q S T X B Y))
H19 : not (eq T S)
H18 : not (eq P S)
H17 : Per T Q S
H16 : Per S Q P
H15 : Col B A X
H14 : Col B C Y
H13 : Col Q T P
H12 : Col Q S R
H11 : not (eq Q S)
H10 : not (eq Q T)
H9 : Cong Q S X B
H8 : Out Q S R
S : Tpoint
H6 : Cong Q T X Y
H5 : Out Q T P
T : Tpoint
H7 : not (eq X B)
H3 : not (eq B Y)
H0 : not (eq P R)
H : not (eq X Y)
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
HNcong : not (Cong P Q X Y)
Hle : Le P Q X Y
HXright : Per B X Y
PY : Out B C Y
PX : Out B A X
X,Y : Tpoint
HPQdiff : not (eq P Q)
HQright : Per P Q R
HQRdiff : not (eq Q R)
HABCacute : Acute A B C
HNColB : not (Col A B C)
P,Q,R,A,B,C : Tpoint
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
CongA T S Q X B Y
+++++
destruct HInter as [_ [_ HConga]]; auto.
-----
Lemma aristotle__greenberg : aristotle_s_axiom -> greenberg_s_axiom.
Proof.
intros aristotle P Q R A B C.
intros HNColB HABCacute HQRdiff HQright.
elim (eq_dec_points P Q); intro HPQdiff.
assert (HXY : (exists X Y, Out B A X /\\ Out B C Y /\\ Per B X Y /\\ Lt P Q X Y)) by (apply aristotle; assumption).
destruct HXY as [X [Y [PX [PY [HXright [Hle HNcong]]]]]].
assert_diffs.
assert (HXYdiff : X <> Y) by (intro; treat_equalities; auto).
assert (HT : (exists T, Out Q T P /\\ Cong Q T X Y)) by (apply l6_11_existence; auto).
destruct HT as [T []].
assert (HS : (exists S, Out Q S R /\\ Cong Q S X B)) by (apply l6_11_existence; auto).
destruct HS as [S []].
assert_diffs.
exists S.
split; auto.
assert_cols.
assert (Per S Q P) by (apply (l8_3 R); Perp; Col).
assert (Per T Q S) by (apply (l8_3 P); Perp; Col).
assert (P<>S).
assert (T<>S).
apply conga_preserves_lta with P S Q T S Q; try (apply conga_refl; auto); [|split].
-
apply conga_trans with X B Y.
2: apply (out_conga A B C A B C); CongA; apply out_trivial; auto.
assert (HInter : (Cong T S Y B /\\ (T <> S -> CongA Q T S X Y B /\\ CongA Q S T X B Y))).
destruct HInter as [_ [_ HConga]]; auto.

*****
HConga : CongA Q S T X B Y
H19 : not (eq T S)
H18 : not (eq P S)
H17 : Per T Q S
H16 : Per S Q P
H15 : Col B A X
H14 : Col B C Y
H13 : Col Q T P
H12 : Col Q S R
H11 : not (eq Q S)
H10 : not (eq Q T)
H9 : Cong Q S X B
H8 : Out Q S R
S : Tpoint
H6 : Cong Q T X Y
H5 : Out Q T P
T : Tpoint
H7 : not (eq X B)
H3 : not (eq B Y)
H0 : not (eq P R)
H : not (eq X Y)
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
HNcong : not (Cong P Q X Y)
Hle : Le P Q X Y
HXright : Per B X Y
PY : Out B C Y
PX : Out B A X
X,Y : Tpoint
HPQdiff : not (eq P Q)
HQright : Per P Q R
HQRdiff : not (eq Q R)
HABCacute : Acute A B C
HNColB : not (Col A B C)
P,Q,R,A,B,C : Tpoint
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
CongA T S Q X B Y
+++++
apply conga_left_comm; auto.
-----
Lemma aristotle__greenberg : aristotle_s_axiom -> greenberg_s_axiom.
Proof.
intros aristotle P Q R A B C.
intros HNColB HABCacute HQRdiff HQright.
elim (eq_dec_points P Q); intro HPQdiff.
assert (HXY : (exists X Y, Out B A X /\\ Out B C Y /\\ Per B X Y /\\ Lt P Q X Y)) by (apply aristotle; assumption).
destruct HXY as [X [Y [PX [PY [HXright [Hle HNcong]]]]]].
assert_diffs.
assert (HXYdiff : X <> Y) by (intro; treat_equalities; auto).
assert (HT : (exists T, Out Q T P /\\ Cong Q T X Y)) by (apply l6_11_existence; auto).
destruct HT as [T []].
assert (HS : (exists S, Out Q S R /\\ Cong Q S X B)) by (apply l6_11_existence; auto).
destruct HS as [S []].
assert_diffs.
exists S.
split; auto.
assert_cols.
assert (Per S Q P) by (apply (l8_3 R); Perp; Col).
assert (Per T Q S) by (apply (l8_3 P); Perp; Col).
assert (P<>S).
assert (T<>S).
apply conga_preserves_lta with P S Q T S Q; try (apply conga_refl; auto); [|split].
-
apply conga_trans with X B Y.
2: apply (out_conga A B C A B C); CongA; apply out_trivial; auto.
assert (HInter : (Cong T S Y B /\\ (T <> S -> CongA Q T S X Y B /\\ CongA Q S T X B Y))).
destruct HInter as [_ [_ HConga]]; auto.
apply conga_left_comm; auto.

*****

*****

+++++
-
-----
Lemma aristotle__greenberg : aristotle_s_axiom -> greenberg_s_axiom.
Proof.
intros aristotle P Q R A B C.
intros HNColB HABCacute HQRdiff HQright.
elim (eq_dec_points P Q); intro HPQdiff.
assert (HXY : (exists X Y, Out B A X /\\ Out B C Y /\\ Per B X Y /\\ Lt P Q X Y)) by (apply aristotle; assumption).
destruct HXY as [X [Y [PX [PY [HXright [Hle HNcong]]]]]].
assert_diffs.
assert (HXYdiff : X <> Y) by (intro; treat_equalities; auto).
assert (HT : (exists T, Out Q T P /\\ Cong Q T X Y)) by (apply l6_11_existence; auto).
destruct HT as [T []].
assert (HS : (exists S, Out Q S R /\\ Cong Q S X B)) by (apply l6_11_existence; auto).
destruct HS as [S []].
assert_diffs.
exists S.
split; auto.
assert_cols.
assert (Per S Q P) by (apply (l8_3 R); Perp; Col).
assert (Per T Q S) by (apply (l8_3 P); Perp; Col).
assert (P<>S).
assert (T<>S).
apply conga_preserves_lta with P S Q T S Q; try (apply conga_refl; auto); [|split].
-
apply conga_trans with X B Y.
2: apply (out_conga A B C A B C); CongA; apply out_trivial; auto.
assert (HInter : (Cong T S Y B /\\ (T <> S -> CongA Q T S X Y B /\\ CongA Q S T X B Y))).
destruct HInter as [_ [_ HConga]]; auto.
apply conga_left_comm; auto.
-

*****
H19 : not (eq T S)
H18 : not (eq P S)
H17 : Per T Q S
H16 : Per S Q P
H15 : Col B A X
H14 : Col B C Y
H13 : Col Q T P
H12 : Col Q S R
H11 : not (eq Q S)
H10 : not (eq Q T)
H9 : Cong Q S X B
H8 : Out Q S R
S : Tpoint
H6 : Cong Q T X Y
H5 : Out Q T P
T : Tpoint
H7 : not (eq X B)
H3 : not (eq B Y)
H0 : not (eq P R)
H : not (eq X Y)
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
HNcong : not (Cong P Q X Y)
Hle : Le P Q X Y
HXright : Per B X Y
PY : Out B C Y
PX : Out B A X
X,Y : Tpoint
HPQdiff : not (eq P Q)
HQright : Per P Q R
HQRdiff : not (eq Q R)
HABCacute : Acute A B C
HNColB : not (Col A B C)
P,Q,R,A,B,C : Tpoint
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
LeA P S Q T S Q
+++++
apply lea_comm.
-----
Lemma aristotle__greenberg : aristotle_s_axiom -> greenberg_s_axiom.
Proof.
intros aristotle P Q R A B C.
intros HNColB HABCacute HQRdiff HQright.
elim (eq_dec_points P Q); intro HPQdiff.
assert (HXY : (exists X Y, Out B A X /\\ Out B C Y /\\ Per B X Y /\\ Lt P Q X Y)) by (apply aristotle; assumption).
destruct HXY as [X [Y [PX [PY [HXright [Hle HNcong]]]]]].
assert_diffs.
assert (HXYdiff : X <> Y) by (intro; treat_equalities; auto).
assert (HT : (exists T, Out Q T P /\\ Cong Q T X Y)) by (apply l6_11_existence; auto).
destruct HT as [T []].
assert (HS : (exists S, Out Q S R /\\ Cong Q S X B)) by (apply l6_11_existence; auto).
destruct HS as [S []].
assert_diffs.
exists S.
split; auto.
assert_cols.
assert (Per S Q P) by (apply (l8_3 R); Perp; Col).
assert (Per T Q S) by (apply (l8_3 P); Perp; Col).
assert (P<>S).
assert (T<>S).
apply conga_preserves_lta with P S Q T S Q; try (apply conga_refl; auto); [|split].
-
apply conga_trans with X B Y.
2: apply (out_conga A B C A B C); CongA; apply out_trivial; auto.
assert (HInter : (Cong T S Y B /\\ (T <> S -> CongA Q T S X Y B /\\ CongA Q S T X B Y))).
destruct HInter as [_ [_ HConga]]; auto.
apply conga_left_comm; auto.
-
apply lea_comm.

*****
H19 : not (eq T S)
H18 : not (eq P S)
H17 : Per T Q S
H16 : Per S Q P
H15 : Col B A X
H14 : Col B C Y
H13 : Col Q T P
H12 : Col Q S R
H11 : not (eq Q S)
H10 : not (eq Q T)
H9 : Cong Q S X B
H8 : Out Q S R
S : Tpoint
H6 : Cong Q T X Y
H5 : Out Q T P
T : Tpoint
H7 : not (eq X B)
H3 : not (eq B Y)
H0 : not (eq P R)
H : not (eq X Y)
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
HNcong : not (Cong P Q X Y)
Hle : Le P Q X Y
HXright : Per B X Y
PY : Out B C Y
PX : Out B A X
X,Y : Tpoint
HPQdiff : not (eq P Q)
HQright : Per P Q R
HQRdiff : not (eq Q R)
HABCacute : Acute A B C
HNColB : not (Col A B C)
P,Q,R,A,B,C : Tpoint
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
LeA Q S P Q S T
+++++
apply (l11_29_b Q S P Q S T).
-----
Lemma aristotle__greenberg : aristotle_s_axiom -> greenberg_s_axiom.
Proof.
intros aristotle P Q R A B C.
intros HNColB HABCacute HQRdiff HQright.
elim (eq_dec_points P Q); intro HPQdiff.
assert (HXY : (exists X Y, Out B A X /\\ Out B C Y /\\ Per B X Y /\\ Lt P Q X Y)) by (apply aristotle; assumption).
destruct HXY as [X [Y [PX [PY [HXright [Hle HNcong]]]]]].
assert_diffs.
assert (HXYdiff : X <> Y) by (intro; treat_equalities; auto).
assert (HT : (exists T, Out Q T P /\\ Cong Q T X Y)) by (apply l6_11_existence; auto).
destruct HT as [T []].
assert (HS : (exists S, Out Q S R /\\ Cong Q S X B)) by (apply l6_11_existence; auto).
destruct HS as [S []].
assert_diffs.
exists S.
split; auto.
assert_cols.
assert (Per S Q P) by (apply (l8_3 R); Perp; Col).
assert (Per T Q S) by (apply (l8_3 P); Perp; Col).
assert (P<>S).
assert (T<>S).
apply conga_preserves_lta with P S Q T S Q; try (apply conga_refl; auto); [|split].
-
apply conga_trans with X B Y.
2: apply (out_conga A B C A B C); CongA; apply out_trivial; auto.
assert (HInter : (Cong T S Y B /\\ (T <> S -> CongA Q T S X Y B /\\ CongA Q S T X B Y))).
destruct HInter as [_ [_ HConga]]; auto.
apply conga_left_comm; auto.
-
apply lea_comm.
apply (l11_29_b Q S P Q S T).

*****
H19 : not (eq T S)
H18 : not (eq P S)
H17 : Per T Q S
H16 : Per S Q P
H15 : Col B A X
H14 : Col B C Y
H13 : Col Q T P
H12 : Col Q S R
H11 : not (eq Q S)
H10 : not (eq Q T)
H9 : Cong Q S X B
H8 : Out Q S R
S : Tpoint
H6 : Cong Q T X Y
H5 : Out Q T P
T : Tpoint
H7 : not (eq X B)
H3 : not (eq B Y)
H0 : not (eq P R)
H : not (eq X Y)
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
HNcong : not (Cong P Q X Y)
Hle : Le P Q X Y
HXright : Per B X Y
PY : Out B C Y
PX : Out B A X
X,Y : Tpoint
HPQdiff : not (eq P Q)
HQright : Per P Q R
HQRdiff : not (eq Q R)
HABCacute : Acute A B C
HNColB : not (Col A B C)
P,Q,R,A,B,C : Tpoint
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun Q0 : Tpoint => and (InAngle P Q S Q0) (CongA Q S Q0 Q S T))
+++++
exists T.
-----
Lemma aristotle__greenberg : aristotle_s_axiom -> greenberg_s_axiom.
Proof.
intros aristotle P Q R A B C.
intros HNColB HABCacute HQRdiff HQright.
elim (eq_dec_points P Q); intro HPQdiff.
assert (HXY : (exists X Y, Out B A X /\\ Out B C Y /\\ Per B X Y /\\ Lt P Q X Y)) by (apply aristotle; assumption).
destruct HXY as [X [Y [PX [PY [HXright [Hle HNcong]]]]]].
assert_diffs.
assert (HXYdiff : X <> Y) by (intro; treat_equalities; auto).
assert (HT : (exists T, Out Q T P /\\ Cong Q T X Y)) by (apply l6_11_existence; auto).
destruct HT as [T []].
assert (HS : (exists S, Out Q S R /\\ Cong Q S X B)) by (apply l6_11_existence; auto).
destruct HS as [S []].
assert_diffs.
exists S.
split; auto.
assert_cols.
assert (Per S Q P) by (apply (l8_3 R); Perp; Col).
assert (Per T Q S) by (apply (l8_3 P); Perp; Col).
assert (P<>S).
assert (T<>S).
apply conga_preserves_lta with P S Q T S Q; try (apply conga_refl; auto); [|split].
-
apply conga_trans with X B Y.
2: apply (out_conga A B C A B C); CongA; apply out_trivial; auto.
assert (HInter : (Cong T S Y B /\\ (T <> S -> CongA Q T S X Y B /\\ CongA Q S T X B Y))).
destruct HInter as [_ [_ HConga]]; auto.
apply conga_left_comm; auto.
-
apply lea_comm.
apply (l11_29_b Q S P Q S T).
exists T.

*****
H19 : not (eq T S)
H18 : not (eq P S)
H17 : Per T Q S
H16 : Per S Q P
H15 : Col B A X
H14 : Col B C Y
H13 : Col Q T P
H12 : Col Q S R
H11 : not (eq Q S)
H10 : not (eq Q T)
H9 : Cong Q S X B
H8 : Out Q S R
S : Tpoint
H6 : Cong Q T X Y
H5 : Out Q T P
T : Tpoint
H7 : not (eq X B)
H3 : not (eq B Y)
H0 : not (eq P R)
H : not (eq X Y)
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
HNcong : not (Cong P Q X Y)
Hle : Le P Q X Y
HXright : Per B X Y
PY : Out B C Y
PX : Out B A X
X,Y : Tpoint
HPQdiff : not (eq P Q)
HQright : Per P Q R
HQRdiff : not (eq Q R)
HABCacute : Acute A B C
HNColB : not (Col A B C)
P,Q,R,A,B,C : Tpoint
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (InAngle P Q S T) (CongA Q S T Q S T)
+++++
split; CongA.
-----
Lemma aristotle__greenberg : aristotle_s_axiom -> greenberg_s_axiom.
Proof.
intros aristotle P Q R A B C.
intros HNColB HABCacute HQRdiff HQright.
elim (eq_dec_points P Q); intro HPQdiff.
assert (HXY : (exists X Y, Out B A X /\\ Out B C Y /\\ Per B X Y /\\ Lt P Q X Y)) by (apply aristotle; assumption).
destruct HXY as [X [Y [PX [PY [HXright [Hle HNcong]]]]]].
assert_diffs.
assert (HXYdiff : X <> Y) by (intro; treat_equalities; auto).
assert (HT : (exists T, Out Q T P /\\ Cong Q T X Y)) by (apply l6_11_existence; auto).
destruct HT as [T []].
assert (HS : (exists S, Out Q S R /\\ Cong Q S X B)) by (apply l6_11_existence; auto).
destruct HS as [S []].
assert_diffs.
exists S.
split; auto.
assert_cols.
assert (Per S Q P) by (apply (l8_3 R); Perp; Col).
assert (Per T Q S) by (apply (l8_3 P); Perp; Col).
assert (P<>S).
assert (T<>S).
apply conga_preserves_lta with P S Q T S Q; try (apply conga_refl; auto); [|split].
-
apply conga_trans with X B Y.
2: apply (out_conga A B C A B C); CongA; apply out_trivial; auto.
assert (HInter : (Cong T S Y B /\\ (T <> S -> CongA Q T S X Y B /\\ CongA Q S T X B Y))).
destruct HInter as [_ [_ HConga]]; auto.
apply conga_left_comm; auto.
-
apply lea_comm.
apply (l11_29_b Q S P Q S T).
exists T.
split; CongA.

*****
H19 : not (eq T S)
H18 : not (eq P S)
H17 : Per T Q S
H16 : Per S Q P
H15 : Col B A X
H14 : Col B C Y
H13 : Col Q T P
H12 : Col Q S R
H11 : not (eq Q S)
H10 : not (eq Q T)
H9 : Cong Q S X B
H8 : Out Q S R
S : Tpoint
H6 : Cong Q T X Y
H5 : Out Q T P
T : Tpoint
H7 : not (eq X B)
H3 : not (eq B Y)
H0 : not (eq P R)
H : not (eq X Y)
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
HNcong : not (Cong P Q X Y)
Hle : Le P Q X Y
HXright : Per B X Y
PY : Out B C Y
PX : Out B A X
X,Y : Tpoint
HPQdiff : not (eq P Q)
HQright : Per P Q R
HQRdiff : not (eq Q R)
HABCacute : Acute A B C
HNColB : not (Col A B C)
P,Q,R,A,B,C : Tpoint
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
InAngle P Q S T
+++++
repeat split; auto.
-----
Lemma aristotle__greenberg : aristotle_s_axiom -> greenberg_s_axiom.
Proof.
intros aristotle P Q R A B C.
intros HNColB HABCacute HQRdiff HQright.
elim (eq_dec_points P Q); intro HPQdiff.
assert (HXY : (exists X Y, Out B A X /\\ Out B C Y /\\ Per B X Y /\\ Lt P Q X Y)) by (apply aristotle; assumption).
destruct HXY as [X [Y [PX [PY [HXright [Hle HNcong]]]]]].
assert_diffs.
assert (HXYdiff : X <> Y) by (intro; treat_equalities; auto).
assert (HT : (exists T, Out Q T P /\\ Cong Q T X Y)) by (apply l6_11_existence; auto).
destruct HT as [T []].
assert (HS : (exists S, Out Q S R /\\ Cong Q S X B)) by (apply l6_11_existence; auto).
destruct HS as [S []].
assert_diffs.
exists S.
split; auto.
assert_cols.
assert (Per S Q P) by (apply (l8_3 R); Perp; Col).
assert (Per T Q S) by (apply (l8_3 P); Perp; Col).
assert (P<>S).
assert (T<>S).
apply conga_preserves_lta with P S Q T S Q; try (apply conga_refl; auto); [|split].
-
apply conga_trans with X B Y.
2: apply (out_conga A B C A B C); CongA; apply out_trivial; auto.
assert (HInter : (Cong T S Y B /\\ (T <> S -> CongA Q T S X Y B /\\ CongA Q S T X B Y))).
destruct HInter as [_ [_ HConga]]; auto.
apply conga_left_comm; auto.
-
apply lea_comm.
apply (l11_29_b Q S P Q S T).
exists T.
split; CongA.
repeat split; auto.

*****
H19 : not (eq T S)
H18 : not (eq P S)
H17 : Per T Q S
H16 : Per S Q P
H15 : Col B A X
H14 : Col B C Y
H13 : Col Q T P
H12 : Col Q S R
H11 : not (eq Q S)
H10 : not (eq Q T)
H9 : Cong Q S X B
H8 : Out Q S R
S : Tpoint
H6 : Cong Q T X Y
H5 : Out Q T P
T : Tpoint
H7 : not (eq X B)
H3 : not (eq B Y)
H0 : not (eq P R)
H : not (eq X Y)
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
HNcong : not (Cong P Q X Y)
Hle : Le P Q X Y
HXright : Per B X Y
PY : Out B C Y
PX : Out B A X
X,Y : Tpoint
HPQdiff : not (eq P Q)
HQright : Per P Q R
HQRdiff : not (eq Q R)
HABCacute : Acute A B C
HNColB : not (Col A B C)
P,Q,R,A,B,C : Tpoint
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => and (Bet Q X T) (or (eq X S) (Out S X P)))
+++++
exists P.
-----
Lemma aristotle__greenberg : aristotle_s_axiom -> greenberg_s_axiom.
Proof.
intros aristotle P Q R A B C.
intros HNColB HABCacute HQRdiff HQright.
elim (eq_dec_points P Q); intro HPQdiff.
assert (HXY : (exists X Y, Out B A X /\\ Out B C Y /\\ Per B X Y /\\ Lt P Q X Y)) by (apply aristotle; assumption).
destruct HXY as [X [Y [PX [PY [HXright [Hle HNcong]]]]]].
assert_diffs.
assert (HXYdiff : X <> Y) by (intro; treat_equalities; auto).
assert (HT : (exists T, Out Q T P /\\ Cong Q T X Y)) by (apply l6_11_existence; auto).
destruct HT as [T []].
assert (HS : (exists S, Out Q S R /\\ Cong Q S X B)) by (apply l6_11_existence; auto).
destruct HS as [S []].
assert_diffs.
exists S.
split; auto.
assert_cols.
assert (Per S Q P) by (apply (l8_3 R); Perp; Col).
assert (Per T Q S) by (apply (l8_3 P); Perp; Col).
assert (P<>S).
assert (T<>S).
apply conga_preserves_lta with P S Q T S Q; try (apply conga_refl; auto); [|split].
-
apply conga_trans with X B Y.
2: apply (out_conga A B C A B C); CongA; apply out_trivial; auto.
assert (HInter : (Cong T S Y B /\\ (T <> S -> CongA Q T S X Y B /\\ CongA Q S T X B Y))).
destruct HInter as [_ [_ HConga]]; auto.
apply conga_left_comm; auto.
-
apply lea_comm.
apply (l11_29_b Q S P Q S T).
exists T.
split; CongA.
repeat split; auto.
exists P.

*****
H19 : not (eq T S)
H18 : not (eq P S)
H17 : Per T Q S
H16 : Per S Q P
H15 : Col B A X
H14 : Col B C Y
H13 : Col Q T P
H12 : Col Q S R
H11 : not (eq Q S)
H10 : not (eq Q T)
H9 : Cong Q S X B
H8 : Out Q S R
S : Tpoint
H6 : Cong Q T X Y
H5 : Out Q T P
T : Tpoint
H7 : not (eq X B)
H3 : not (eq B Y)
H0 : not (eq P R)
H : not (eq X Y)
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
HNcong : not (Cong P Q X Y)
Hle : Le P Q X Y
HXright : Per B X Y
PY : Out B C Y
PX : Out B A X
X,Y : Tpoint
HPQdiff : not (eq P Q)
HQright : Per P Q R
HQRdiff : not (eq Q R)
HABCacute : Acute A B C
HNColB : not (Col A B C)
P,Q,R,A,B,C : Tpoint
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Bet Q P T) (or (eq P S) (Out S P P))
+++++
split; [|right; apply out_trivial; auto].
-----
Lemma aristotle__greenberg : aristotle_s_axiom -> greenberg_s_axiom.
Proof.
intros aristotle P Q R A B C.
intros HNColB HABCacute HQRdiff HQright.
elim (eq_dec_points P Q); intro HPQdiff.
assert (HXY : (exists X Y, Out B A X /\\ Out B C Y /\\ Per B X Y /\\ Lt P Q X Y)) by (apply aristotle; assumption).
destruct HXY as [X [Y [PX [PY [HXright [Hle HNcong]]]]]].
assert_diffs.
assert (HXYdiff : X <> Y) by (intro; treat_equalities; auto).
assert (HT : (exists T, Out Q T P /\\ Cong Q T X Y)) by (apply l6_11_existence; auto).
destruct HT as [T []].
assert (HS : (exists S, Out Q S R /\\ Cong Q S X B)) by (apply l6_11_existence; auto).
destruct HS as [S []].
assert_diffs.
exists S.
split; auto.
assert_cols.
assert (Per S Q P) by (apply (l8_3 R); Perp; Col).
assert (Per T Q S) by (apply (l8_3 P); Perp; Col).
assert (P<>S).
assert (T<>S).
apply conga_preserves_lta with P S Q T S Q; try (apply conga_refl; auto); [|split].
-
apply conga_trans with X B Y.
2: apply (out_conga A B C A B C); CongA; apply out_trivial; auto.
assert (HInter : (Cong T S Y B /\\ (T <> S -> CongA Q T S X Y B /\\ CongA Q S T X B Y))).
destruct HInter as [_ [_ HConga]]; auto.
apply conga_left_comm; auto.
-
apply lea_comm.
apply (l11_29_b Q S P Q S T).
exists T.
split; CongA.
repeat split; auto.
exists P.
split; [|right; apply out_trivial; auto].

*****
H19 : not (eq T S)
H18 : not (eq P S)
H17 : Per T Q S
H16 : Per S Q P
H15 : Col B A X
H14 : Col B C Y
H13 : Col Q T P
H12 : Col Q S R
H11 : not (eq Q S)
H10 : not (eq Q T)
H9 : Cong Q S X B
H8 : Out Q S R
S : Tpoint
H6 : Cong Q T X Y
H5 : Out Q T P
T : Tpoint
H7 : not (eq X B)
H3 : not (eq B Y)
H0 : not (eq P R)
H : not (eq X Y)
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
HNcong : not (Cong P Q X Y)
Hle : Le P Q X Y
HXright : Per B X Y
PY : Out B C Y
PX : Out B A X
X,Y : Tpoint
HPQdiff : not (eq P Q)
HQright : Per P Q R
HQRdiff : not (eq Q R)
HABCacute : Acute A B C
HNColB : not (Col A B C)
P,Q,R,A,B,C : Tpoint
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet Q P T
+++++
apply l6_13_1.
-----
Lemma aristotle__greenberg : aristotle_s_axiom -> greenberg_s_axiom.
Proof.
intros aristotle P Q R A B C.
intros HNColB HABCacute HQRdiff HQright.
elim (eq_dec_points P Q); intro HPQdiff.
assert (HXY : (exists X Y, Out B A X /\\ Out B C Y /\\ Per B X Y /\\ Lt P Q X Y)) by (apply aristotle; assumption).
destruct HXY as [X [Y [PX [PY [HXright [Hle HNcong]]]]]].
assert_diffs.
assert (HXYdiff : X <> Y) by (intro; treat_equalities; auto).
assert (HT : (exists T, Out Q T P /\\ Cong Q T X Y)) by (apply l6_11_existence; auto).
destruct HT as [T []].
assert (HS : (exists S, Out Q S R /\\ Cong Q S X B)) by (apply l6_11_existence; auto).
destruct HS as [S []].
assert_diffs.
exists S.
split; auto.
assert_cols.
assert (Per S Q P) by (apply (l8_3 R); Perp; Col).
assert (Per T Q S) by (apply (l8_3 P); Perp; Col).
assert (P<>S).
assert (T<>S).
apply conga_preserves_lta with P S Q T S Q; try (apply conga_refl; auto); [|split].
-
apply conga_trans with X B Y.
2: apply (out_conga A B C A B C); CongA; apply out_trivial; auto.
assert (HInter : (Cong T S Y B /\\ (T <> S -> CongA Q T S X Y B /\\ CongA Q S T X B Y))).
destruct HInter as [_ [_ HConga]]; auto.
apply conga_left_comm; auto.
-
apply lea_comm.
apply (l11_29_b Q S P Q S T).
exists T.
split; CongA.
repeat split; auto.
exists P.
split; [|right; apply out_trivial; auto].
apply l6_13_1.

*****
H19 : not (eq T S)
H18 : not (eq P S)
H17 : Per T Q S
H16 : Per S Q P
H15 : Col B A X
H14 : Col B C Y
H13 : Col Q T P
H12 : Col Q S R
H11 : not (eq Q S)
H10 : not (eq Q T)
H9 : Cong Q S X B
H8 : Out Q S R
S : Tpoint
H6 : Cong Q T X Y
H5 : Out Q T P
T : Tpoint
H7 : not (eq X B)
H3 : not (eq B Y)
H0 : not (eq P R)
H : not (eq X Y)
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
HNcong : not (Cong P Q X Y)
Hle : Le P Q X Y
HXright : Per B X Y
PY : Out B C Y
PX : Out B A X
X,Y : Tpoint
HPQdiff : not (eq P Q)
HQright : Per P Q R
HQRdiff : not (eq Q R)
HABCacute : Acute A B C
HNColB : not (Col A B C)
P,Q,R,A,B,C : Tpoint
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Out Q P T
+++++
apply l6_6; auto.
-----
Lemma aristotle__greenberg : aristotle_s_axiom -> greenberg_s_axiom.
Proof.
intros aristotle P Q R A B C.
intros HNColB HABCacute HQRdiff HQright.
elim (eq_dec_points P Q); intro HPQdiff.
assert (HXY : (exists X Y, Out B A X /\\ Out B C Y /\\ Per B X Y /\\ Lt P Q X Y)) by (apply aristotle; assumption).
destruct HXY as [X [Y [PX [PY [HXright [Hle HNcong]]]]]].
assert_diffs.
assert (HXYdiff : X <> Y) by (intro; treat_equalities; auto).
assert (HT : (exists T, Out Q T P /\\ Cong Q T X Y)) by (apply l6_11_existence; auto).
destruct HT as [T []].
assert (HS : (exists S, Out Q S R /\\ Cong Q S X B)) by (apply l6_11_existence; auto).
destruct HS as [S []].
assert_diffs.
exists S.
split; auto.
assert_cols.
assert (Per S Q P) by (apply (l8_3 R); Perp; Col).
assert (Per T Q S) by (apply (l8_3 P); Perp; Col).
assert (P<>S).
assert (T<>S).
apply conga_preserves_lta with P S Q T S Q; try (apply conga_refl; auto); [|split].
-
apply conga_trans with X B Y.
2: apply (out_conga A B C A B C); CongA; apply out_trivial; auto.
assert (HInter : (Cong T S Y B /\\ (T <> S -> CongA Q T S X Y B /\\ CongA Q S T X B Y))).
destruct HInter as [_ [_ HConga]]; auto.
apply conga_left_comm; auto.
-
apply lea_comm.
apply (l11_29_b Q S P Q S T).
exists T.
split; CongA.
repeat split; auto.
exists P.
split; [|right; apply out_trivial; auto].
apply l6_13_1.
apply l6_6; auto.

*****
H19 : not (eq T S)
H18 : not (eq P S)
H17 : Per T Q S
H16 : Per S Q P
H15 : Col B A X
H14 : Col B C Y
H13 : Col Q T P
H12 : Col Q S R
H11 : not (eq Q S)
H10 : not (eq Q T)
H9 : Cong Q S X B
H8 : Out Q S R
S : Tpoint
H6 : Cong Q T X Y
H5 : Out Q T P
T : Tpoint
H7 : not (eq X B)
H3 : not (eq B Y)
H0 : not (eq P R)
H : not (eq X Y)
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
HNcong : not (Cong P Q X Y)
Hle : Le P Q X Y
HXright : Per B X Y
PY : Out B C Y
PX : Out B A X
X,Y : Tpoint
HPQdiff : not (eq P Q)
HQright : Per P Q R
HQRdiff : not (eq Q R)
HABCacute : Acute A B C
HNColB : not (Col A B C)
P,Q,R,A,B,C : Tpoint
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Le Q P Q T
+++++
apply (le_transitivity Q P X Y).
-----
Lemma aristotle__greenberg : aristotle_s_axiom -> greenberg_s_axiom.
Proof.
intros aristotle P Q R A B C.
intros HNColB HABCacute HQRdiff HQright.
elim (eq_dec_points P Q); intro HPQdiff.
assert (HXY : (exists X Y, Out B A X /\\ Out B C Y /\\ Per B X Y /\\ Lt P Q X Y)) by (apply aristotle; assumption).
destruct HXY as [X [Y [PX [PY [HXright [Hle HNcong]]]]]].
assert_diffs.
assert (HXYdiff : X <> Y) by (intro; treat_equalities; auto).
assert (HT : (exists T, Out Q T P /\\ Cong Q T X Y)) by (apply l6_11_existence; auto).
destruct HT as [T []].
assert (HS : (exists S, Out Q S R /\\ Cong Q S X B)) by (apply l6_11_existence; auto).
destruct HS as [S []].
assert_diffs.
exists S.
split; auto.
assert_cols.
assert (Per S Q P) by (apply (l8_3 R); Perp; Col).
assert (Per T Q S) by (apply (l8_3 P); Perp; Col).
assert (P<>S).
assert (T<>S).
apply conga_preserves_lta with P S Q T S Q; try (apply conga_refl; auto); [|split].
-
apply conga_trans with X B Y.
2: apply (out_conga A B C A B C); CongA; apply out_trivial; auto.
assert (HInter : (Cong T S Y B /\\ (T <> S -> CongA Q T S X Y B /\\ CongA Q S T X B Y))).
destruct HInter as [_ [_ HConga]]; auto.
apply conga_left_comm; auto.
-
apply lea_comm.
apply (l11_29_b Q S P Q S T).
exists T.
split; CongA.
repeat split; auto.
exists P.
split; [|right; apply out_trivial; auto].
apply l6_13_1.
apply l6_6; auto.
apply (le_transitivity Q P X Y).

*****
H19 : not (eq T S)
H18 : not (eq P S)
H17 : Per T Q S
H16 : Per S Q P
H15 : Col B A X
H14 : Col B C Y
H13 : Col Q T P
H12 : Col Q S R
H11 : not (eq Q S)
H10 : not (eq Q T)
H9 : Cong Q S X B
H8 : Out Q S R
S : Tpoint
H6 : Cong Q T X Y
H5 : Out Q T P
T : Tpoint
H7 : not (eq X B)
H3 : not (eq B Y)
H0 : not (eq P R)
H : not (eq X Y)
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
HNcong : not (Cong P Q X Y)
Hle : Le P Q X Y
HXright : Per B X Y
PY : Out B C Y
PX : Out B A X
X,Y : Tpoint
HPQdiff : not (eq P Q)
HQright : Per P Q R
HQRdiff : not (eq Q R)
HABCacute : Acute A B C
HNColB : not (Col A B C)
P,Q,R,A,B,C : Tpoint
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Le Q P X Y
+++++
apply (le_transitivity Q P P Q); Le.
-----
Lemma aristotle__greenberg : aristotle_s_axiom -> greenberg_s_axiom.
Proof.
intros aristotle P Q R A B C.
intros HNColB HABCacute HQRdiff HQright.
elim (eq_dec_points P Q); intro HPQdiff.
assert (HXY : (exists X Y, Out B A X /\\ Out B C Y /\\ Per B X Y /\\ Lt P Q X Y)) by (apply aristotle; assumption).
destruct HXY as [X [Y [PX [PY [HXright [Hle HNcong]]]]]].
assert_diffs.
assert (HXYdiff : X <> Y) by (intro; treat_equalities; auto).
assert (HT : (exists T, Out Q T P /\\ Cong Q T X Y)) by (apply l6_11_existence; auto).
destruct HT as [T []].
assert (HS : (exists S, Out Q S R /\\ Cong Q S X B)) by (apply l6_11_existence; auto).
destruct HS as [S []].
assert_diffs.
exists S.
split; auto.
assert_cols.
assert (Per S Q P) by (apply (l8_3 R); Perp; Col).
assert (Per T Q S) by (apply (l8_3 P); Perp; Col).
assert (P<>S).
assert (T<>S).
apply conga_preserves_lta with P S Q T S Q; try (apply conga_refl; auto); [|split].
-
apply conga_trans with X B Y.
2: apply (out_conga A B C A B C); CongA; apply out_trivial; auto.
assert (HInter : (Cong T S Y B /\\ (T <> S -> CongA Q T S X Y B /\\ CongA Q S T X B Y))).
destruct HInter as [_ [_ HConga]]; auto.
apply conga_left_comm; auto.
-
apply lea_comm.
apply (l11_29_b Q S P Q S T).
exists T.
split; CongA.
repeat split; auto.
exists P.
split; [|right; apply out_trivial; auto].
apply l6_13_1.
apply l6_6; auto.
apply (le_transitivity Q P X Y).
apply (le_transitivity Q P P Q); Le.

*****
H19 : not (eq T S)
H18 : not (eq P S)
H17 : Per T Q S
H16 : Per S Q P
H15 : Col B A X
H14 : Col B C Y
H13 : Col Q T P
H12 : Col Q S R
H11 : not (eq Q S)
H10 : not (eq Q T)
H9 : Cong Q S X B
H8 : Out Q S R
S : Tpoint
H6 : Cong Q T X Y
H5 : Out Q T P
T : Tpoint
H7 : not (eq X B)
H3 : not (eq B Y)
H0 : not (eq P R)
H : not (eq X Y)
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
HNcong : not (Cong P Q X Y)
Hle : Le P Q X Y
HXright : Per B X Y
PY : Out B C Y
PX : Out B A X
X,Y : Tpoint
HPQdiff : not (eq P Q)
HQright : Per P Q R
HQRdiff : not (eq Q R)
HABCacute : Acute A B C
HNColB : not (Col A B C)
P,Q,R,A,B,C : Tpoint
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Le X Y Q T
+++++
apply (cong__le); Cong.
-----
Lemma aristotle__greenberg : aristotle_s_axiom -> greenberg_s_axiom.
Proof.
intros aristotle P Q R A B C.
intros HNColB HABCacute HQRdiff HQright.
elim (eq_dec_points P Q); intro HPQdiff.
assert (HXY : (exists X Y, Out B A X /\\ Out B C Y /\\ Per B X Y /\\ Lt P Q X Y)) by (apply aristotle; assumption).
destruct HXY as [X [Y [PX [PY [HXright [Hle HNcong]]]]]].
assert_diffs.
assert (HXYdiff : X <> Y) by (intro; treat_equalities; auto).
assert (HT : (exists T, Out Q T P /\\ Cong Q T X Y)) by (apply l6_11_existence; auto).
destruct HT as [T []].
assert (HS : (exists S, Out Q S R /\\ Cong Q S X B)) by (apply l6_11_existence; auto).
destruct HS as [S []].
assert_diffs.
exists S.
split; auto.
assert_cols.
assert (Per S Q P) by (apply (l8_3 R); Perp; Col).
assert (Per T Q S) by (apply (l8_3 P); Perp; Col).
assert (P<>S).
assert (T<>S).
apply conga_preserves_lta with P S Q T S Q; try (apply conga_refl; auto); [|split].
-
apply conga_trans with X B Y.
2: apply (out_conga A B C A B C); CongA; apply out_trivial; auto.
assert (HInter : (Cong T S Y B /\\ (T <> S -> CongA Q T S X Y B /\\ CongA Q S T X B Y))).
destruct HInter as [_ [_ HConga]]; auto.
apply conga_left_comm; auto.
-
apply lea_comm.
apply (l11_29_b Q S P Q S T).
exists T.
split; CongA.
repeat split; auto.
exists P.
split; [|right; apply out_trivial; auto].
apply l6_13_1.
apply l6_6; auto.
apply (le_transitivity Q P X Y).
apply (le_transitivity Q P P Q); Le.
apply (cong__le); Cong.

*****

*****

+++++
-
-----
Lemma aristotle__greenberg : aristotle_s_axiom -> greenberg_s_axiom.
Proof.
intros aristotle P Q R A B C.
intros HNColB HABCacute HQRdiff HQright.
elim (eq_dec_points P Q); intro HPQdiff.
assert (HXY : (exists X Y, Out B A X /\\ Out B C Y /\\ Per B X Y /\\ Lt P Q X Y)) by (apply aristotle; assumption).
destruct HXY as [X [Y [PX [PY [HXright [Hle HNcong]]]]]].
assert_diffs.
assert (HXYdiff : X <> Y) by (intro; treat_equalities; auto).
assert (HT : (exists T, Out Q T P /\\ Cong Q T X Y)) by (apply l6_11_existence; auto).
destruct HT as [T []].
assert (HS : (exists S, Out Q S R /\\ Cong Q S X B)) by (apply l6_11_existence; auto).
destruct HS as [S []].
assert_diffs.
exists S.
split; auto.
assert_cols.
assert (Per S Q P) by (apply (l8_3 R); Perp; Col).
assert (Per T Q S) by (apply (l8_3 P); Perp; Col).
assert (P<>S).
assert (T<>S).
apply conga_preserves_lta with P S Q T S Q; try (apply conga_refl; auto); [|split].
-
apply conga_trans with X B Y.
2: apply (out_conga A B C A B C); CongA; apply out_trivial; auto.
assert (HInter : (Cong T S Y B /\\ (T <> S -> CongA Q T S X Y B /\\ CongA Q S T X B Y))).
destruct HInter as [_ [_ HConga]]; auto.
apply conga_left_comm; auto.
-
apply lea_comm.
apply (l11_29_b Q S P Q S T).
exists T.
split; CongA.
repeat split; auto.
exists P.
split; [|right; apply out_trivial; auto].
apply l6_13_1.
apply l6_6; auto.
apply (le_transitivity Q P X Y).
apply (le_transitivity Q P P Q); Le.
apply (cong__le); Cong.
-

*****
H19 : not (eq T S)
H18 : not (eq P S)
H17 : Per T Q S
H16 : Per S Q P
H15 : Col B A X
H14 : Col B C Y
H13 : Col Q T P
H12 : Col Q S R
H11 : not (eq Q S)
H10 : not (eq Q T)
H9 : Cong Q S X B
H8 : Out Q S R
S : Tpoint
H6 : Cong Q T X Y
H5 : Out Q T P
T : Tpoint
H7 : not (eq X B)
H3 : not (eq B Y)
H0 : not (eq P R)
H : not (eq X Y)
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
HNcong : not (Cong P Q X Y)
Hle : Le P Q X Y
HXright : Per B X Y
PY : Out B C Y
PX : Out B A X
X,Y : Tpoint
HPQdiff : not (eq P Q)
HQright : Per P Q R
HQRdiff : not (eq Q R)
HABCacute : Acute A B C
HNColB : not (Col A B C)
P,Q,R,A,B,C : Tpoint
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (CongA P S Q T S Q)
+++++
intro HConga.
-----
Lemma aristotle__greenberg : aristotle_s_axiom -> greenberg_s_axiom.
Proof.
intros aristotle P Q R A B C.
intros HNColB HABCacute HQRdiff HQright.
elim (eq_dec_points P Q); intro HPQdiff.
assert (HXY : (exists X Y, Out B A X /\\ Out B C Y /\\ Per B X Y /\\ Lt P Q X Y)) by (apply aristotle; assumption).
destruct HXY as [X [Y [PX [PY [HXright [Hle HNcong]]]]]].
assert_diffs.
assert (HXYdiff : X <> Y) by (intro; treat_equalities; auto).
assert (HT : (exists T, Out Q T P /\\ Cong Q T X Y)) by (apply l6_11_existence; auto).
destruct HT as [T []].
assert (HS : (exists S, Out Q S R /\\ Cong Q S X B)) by (apply l6_11_existence; auto).
destruct HS as [S []].
assert_diffs.
exists S.
split; auto.
assert_cols.
assert (Per S Q P) by (apply (l8_3 R); Perp; Col).
assert (Per T Q S) by (apply (l8_3 P); Perp; Col).
assert (P<>S).
assert (T<>S).
apply conga_preserves_lta with P S Q T S Q; try (apply conga_refl; auto); [|split].
-
apply conga_trans with X B Y.
2: apply (out_conga A B C A B C); CongA; apply out_trivial; auto.
assert (HInter : (Cong T S Y B /\\ (T <> S -> CongA Q T S X Y B /\\ CongA Q S T X B Y))).
destruct HInter as [_ [_ HConga]]; auto.
apply conga_left_comm; auto.
-
apply lea_comm.
apply (l11_29_b Q S P Q S T).
exists T.
split; CongA.
repeat split; auto.
exists P.
split; [|right; apply out_trivial; auto].
apply l6_13_1.
apply l6_6; auto.
apply (le_transitivity Q P X Y).
apply (le_transitivity Q P P Q); Le.
apply (cong__le); Cong.
-
intro HConga.

*****
HConga : CongA P S Q T S Q
H19 : not (eq T S)
H18 : not (eq P S)
H17 : Per T Q S
H16 : Per S Q P
H15 : Col B A X
H14 : Col B C Y
H13 : Col Q T P
H12 : Col Q S R
H11 : not (eq Q S)
H10 : not (eq Q T)
H9 : Cong Q S X B
H8 : Out Q S R
S : Tpoint
H6 : Cong Q T X Y
H5 : Out Q T P
T : Tpoint
H7 : not (eq X B)
H3 : not (eq B Y)
H0 : not (eq P R)
H : not (eq X Y)
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
HNcong : not (Cong P Q X Y)
Hle : Le P Q X Y
HXright : Per B X Y
PY : Out B C Y
PX : Out B A X
X,Y : Tpoint
HPQdiff : not (eq P Q)
HQright : Per P Q R
HQRdiff : not (eq Q R)
HABCacute : Acute A B C
HNColB : not (Col A B C)
P,Q,R,A,B,C : Tpoint
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert (HInter : Cong Q P Q T /\ Cong S P S T /\ CongA Q P S Q T S).
-----
Lemma aristotle__greenberg : aristotle_s_axiom -> greenberg_s_axiom.
Proof.
intros aristotle P Q R A B C.
intros HNColB HABCacute HQRdiff HQright.
elim (eq_dec_points P Q); intro HPQdiff.
assert (HXY : (exists X Y, Out B A X /\\ Out B C Y /\\ Per B X Y /\\ Lt P Q X Y)) by (apply aristotle; assumption).
destruct HXY as [X [Y [PX [PY [HXright [Hle HNcong]]]]]].
assert_diffs.
assert (HXYdiff : X <> Y) by (intro; treat_equalities; auto).
assert (HT : (exists T, Out Q T P /\\ Cong Q T X Y)) by (apply l6_11_existence; auto).
destruct HT as [T []].
assert (HS : (exists S, Out Q S R /\\ Cong Q S X B)) by (apply l6_11_existence; auto).
destruct HS as [S []].
assert_diffs.
exists S.
split; auto.
assert_cols.
assert (Per S Q P) by (apply (l8_3 R); Perp; Col).
assert (Per T Q S) by (apply (l8_3 P); Perp; Col).
assert (P<>S).
assert (T<>S).
apply conga_preserves_lta with P S Q T S Q; try (apply conga_refl; auto); [|split].
-
apply conga_trans with X B Y.
2: apply (out_conga A B C A B C); CongA; apply out_trivial; auto.
assert (HInter : (Cong T S Y B /\\ (T <> S -> CongA Q T S X Y B /\\ CongA Q S T X B Y))).
destruct HInter as [_ [_ HConga]]; auto.
apply conga_left_comm; auto.
-
apply lea_comm.
apply (l11_29_b Q S P Q S T).
exists T.
split; CongA.
repeat split; auto.
exists P.
split; [|right; apply out_trivial; auto].
apply l6_13_1.
apply l6_6; auto.
apply (le_transitivity Q P X Y).
apply (le_transitivity Q P P Q); Le.
apply (cong__le); Cong.
-
intro HConga.
assert (HInter : Cong Q P Q T /\\ Cong S P S T /\\ CongA Q P S Q T S).

*****
HConga : CongA P S Q T S Q
H19 : not (eq T S)
H18 : not (eq P S)
H17 : Per T Q S
H16 : Per S Q P
H15 : Col B A X
H14 : Col B C Y
H13 : Col Q T P
H12 : Col Q S R
H11 : not (eq Q S)
H10 : not (eq Q T)
H9 : Cong Q S X B
H8 : Out Q S R
S : Tpoint
H6 : Cong Q T X Y
H5 : Out Q T P
T : Tpoint
H7 : not (eq X B)
H3 : not (eq B Y)
H0 : not (eq P R)
H : not (eq X Y)
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
HNcong : not (Cong P Q X Y)
Hle : Le P Q X Y
HXright : Per B X Y
PY : Out B C Y
PX : Out B A X
X,Y : Tpoint
HPQdiff : not (eq P Q)
HQright : Per P Q R
HQRdiff : not (eq Q R)
HABCacute : Acute A B C
HNColB : not (Col A B C)
P,Q,R,A,B,C : Tpoint
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Cong Q P Q T) (and (Cong S P S T) (CongA Q P S Q T S))
+++++
apply l11_50_1; Cong.
-----
Lemma aristotle__greenberg : aristotle_s_axiom -> greenberg_s_axiom.
Proof.
intros aristotle P Q R A B C.
intros HNColB HABCacute HQRdiff HQright.
elim (eq_dec_points P Q); intro HPQdiff.
assert (HXY : (exists X Y, Out B A X /\\ Out B C Y /\\ Per B X Y /\\ Lt P Q X Y)) by (apply aristotle; assumption).
destruct HXY as [X [Y [PX [PY [HXright [Hle HNcong]]]]]].
assert_diffs.
assert (HXYdiff : X <> Y) by (intro; treat_equalities; auto).
assert (HT : (exists T, Out Q T P /\\ Cong Q T X Y)) by (apply l6_11_existence; auto).
destruct HT as [T []].
assert (HS : (exists S, Out Q S R /\\ Cong Q S X B)) by (apply l6_11_existence; auto).
destruct HS as [S []].
assert_diffs.
exists S.
split; auto.
assert_cols.
assert (Per S Q P) by (apply (l8_3 R); Perp; Col).
assert (Per T Q S) by (apply (l8_3 P); Perp; Col).
assert (P<>S).
assert (T<>S).
apply conga_preserves_lta with P S Q T S Q; try (apply conga_refl; auto); [|split].
-
apply conga_trans with X B Y.
2: apply (out_conga A B C A B C); CongA; apply out_trivial; auto.
assert (HInter : (Cong T S Y B /\\ (T <> S -> CongA Q T S X Y B /\\ CongA Q S T X B Y))).
destruct HInter as [_ [_ HConga]]; auto.
apply conga_left_comm; auto.
-
apply lea_comm.
apply (l11_29_b Q S P Q S T).
exists T.
split; CongA.
repeat split; auto.
exists P.
split; [|right; apply out_trivial; auto].
apply l6_13_1.
apply l6_6; auto.
apply (le_transitivity Q P X Y).
apply (le_transitivity Q P P Q); Le.
apply (cong__le); Cong.
-
intro HConga.
assert (HInter : Cong Q P Q T /\\ Cong S P S T /\\ CongA Q P S Q T S).
apply l11_50_1; Cong.

*****
HConga : CongA P S Q T S Q
H19 : not (eq T S)
H18 : not (eq P S)
H17 : Per T Q S
H16 : Per S Q P
H15 : Col B A X
H14 : Col B C Y
H13 : Col Q T P
H12 : Col Q S R
H11 : not (eq Q S)
H10 : not (eq Q T)
H9 : Cong Q S X B
H8 : Out Q S R
S : Tpoint
H6 : Cong Q T X Y
H5 : Out Q T P
T : Tpoint
H7 : not (eq X B)
H3 : not (eq B Y)
H0 : not (eq P R)
H : not (eq X Y)
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
HNcong : not (Cong P Q X Y)
Hle : Le P Q X Y
HXright : Per B X Y
PY : Out B C Y
PX : Out B A X
X,Y : Tpoint
HPQdiff : not (eq P Q)
HQright : Per P Q R
HQRdiff : not (eq Q R)
HABCacute : Acute A B C
HNColB : not (Col A B C)
P,Q,R,A,B,C : Tpoint
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col Q S P)
+++++
intro.
-----
Lemma aristotle__greenberg : aristotle_s_axiom -> greenberg_s_axiom.
Proof.
intros aristotle P Q R A B C.
intros HNColB HABCacute HQRdiff HQright.
elim (eq_dec_points P Q); intro HPQdiff.
assert (HXY : (exists X Y, Out B A X /\\ Out B C Y /\\ Per B X Y /\\ Lt P Q X Y)) by (apply aristotle; assumption).
destruct HXY as [X [Y [PX [PY [HXright [Hle HNcong]]]]]].
assert_diffs.
assert (HXYdiff : X <> Y) by (intro; treat_equalities; auto).
assert (HT : (exists T, Out Q T P /\\ Cong Q T X Y)) by (apply l6_11_existence; auto).
destruct HT as [T []].
assert (HS : (exists S, Out Q S R /\\ Cong Q S X B)) by (apply l6_11_existence; auto).
destruct HS as [S []].
assert_diffs.
exists S.
split; auto.
assert_cols.
assert (Per S Q P) by (apply (l8_3 R); Perp; Col).
assert (Per T Q S) by (apply (l8_3 P); Perp; Col).
assert (P<>S).
assert (T<>S).
apply conga_preserves_lta with P S Q T S Q; try (apply conga_refl; auto); [|split].
-
apply conga_trans with X B Y.
2: apply (out_conga A B C A B C); CongA; apply out_trivial; auto.
assert (HInter : (Cong T S Y B /\\ (T <> S -> CongA Q T S X Y B /\\ CongA Q S T X B Y))).
destruct HInter as [_ [_ HConga]]; auto.
apply conga_left_comm; auto.
-
apply lea_comm.
apply (l11_29_b Q S P Q S T).
exists T.
split; CongA.
repeat split; auto.
exists P.
split; [|right; apply out_trivial; auto].
apply l6_13_1.
apply l6_6; auto.
apply (le_transitivity Q P X Y).
apply (le_transitivity Q P P Q); Le.
apply (cong__le); Cong.
-
intro HConga.
assert (HInter : Cong Q P Q T /\\ Cong S P S T /\\ CongA Q P S Q T S).
apply l11_50_1; Cong.
intro.

*****
H20 : Col Q S P
HConga : CongA P S Q T S Q
H19 : not (eq T S)
H18 : not (eq P S)
H17 : Per T Q S
H16 : Per S Q P
H15 : Col B A X
H14 : Col B C Y
H13 : Col Q T P
H12 : Col Q S R
H11 : not (eq Q S)
H10 : not (eq Q T)
H9 : Cong Q S X B
H8 : Out Q S R
S : Tpoint
H6 : Cong Q T X Y
H5 : Out Q T P
T : Tpoint
H7 : not (eq X B)
H3 : not (eq B Y)
H0 : not (eq P R)
H : not (eq X Y)
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
HNcong : not (Cong P Q X Y)
Hle : Le P Q X Y
HXright : Per B X Y
PY : Out B C Y
PX : Out B A X
X,Y : Tpoint
HPQdiff : not (eq P Q)
HQright : Per P Q R
HQRdiff : not (eq Q R)
HABCacute : Acute A B C
HNColB : not (Col A B C)
P,Q,R,A,B,C : Tpoint
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert (HUn : S=Q\/P=Q) by (apply l8_9; Col).
-----
Lemma aristotle__greenberg : aristotle_s_axiom -> greenberg_s_axiom.
Proof.
intros aristotle P Q R A B C.
intros HNColB HABCacute HQRdiff HQright.
elim (eq_dec_points P Q); intro HPQdiff.
assert (HXY : (exists X Y, Out B A X /\\ Out B C Y /\\ Per B X Y /\\ Lt P Q X Y)) by (apply aristotle; assumption).
destruct HXY as [X [Y [PX [PY [HXright [Hle HNcong]]]]]].
assert_diffs.
assert (HXYdiff : X <> Y) by (intro; treat_equalities; auto).
assert (HT : (exists T, Out Q T P /\\ Cong Q T X Y)) by (apply l6_11_existence; auto).
destruct HT as [T []].
assert (HS : (exists S, Out Q S R /\\ Cong Q S X B)) by (apply l6_11_existence; auto).
destruct HS as [S []].
assert_diffs.
exists S.
split; auto.
assert_cols.
assert (Per S Q P) by (apply (l8_3 R); Perp; Col).
assert (Per T Q S) by (apply (l8_3 P); Perp; Col).
assert (P<>S).
assert (T<>S).
apply conga_preserves_lta with P S Q T S Q; try (apply conga_refl; auto); [|split].
-
apply conga_trans with X B Y.
2: apply (out_conga A B C A B C); CongA; apply out_trivial; auto.
assert (HInter : (Cong T S Y B /\\ (T <> S -> CongA Q T S X Y B /\\ CongA Q S T X B Y))).
destruct HInter as [_ [_ HConga]]; auto.
apply conga_left_comm; auto.
-
apply lea_comm.
apply (l11_29_b Q S P Q S T).
exists T.
split; CongA.
repeat split; auto.
exists P.
split; [|right; apply out_trivial; auto].
apply l6_13_1.
apply l6_6; auto.
apply (le_transitivity Q P X Y).
apply (le_transitivity Q P P Q); Le.
apply (cong__le); Cong.
-
intro HConga.
assert (HInter : Cong Q P Q T /\\ Cong S P S T /\\ CongA Q P S Q T S).
apply l11_50_1; Cong.
intro.
assert (HUn : S=Q\\/P=Q) by (apply l8_9; Col).

*****
HUn : or (eq S Q) (eq P Q)
H20 : Col Q S P
HConga : CongA P S Q T S Q
H19 : not (eq T S)
H18 : not (eq P S)
H17 : Per T Q S
H16 : Per S Q P
H15 : Col B A X
H14 : Col B C Y
H13 : Col Q T P
H12 : Col Q S R
H11 : not (eq Q S)
H10 : not (eq Q T)
H9 : Cong Q S X B
H8 : Out Q S R
S : Tpoint
H6 : Cong Q T X Y
H5 : Out Q T P
T : Tpoint
H7 : not (eq X B)
H3 : not (eq B Y)
H0 : not (eq P R)
H : not (eq X Y)
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
HNcong : not (Cong P Q X Y)
Hle : Le P Q X Y
HXright : Per B X Y
PY : Out B C Y
PX : Out B A X
X,Y : Tpoint
HPQdiff : not (eq P Q)
HQright : Per P Q R
HQRdiff : not (eq Q R)
HABCacute : Acute A B C
HNColB : not (Col A B C)
P,Q,R,A,B,C : Tpoint
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
destruct HUn; treat_equalities; absurde.
-----
Lemma aristotle__greenberg : aristotle_s_axiom -> greenberg_s_axiom.
Proof.
intros aristotle P Q R A B C.
intros HNColB HABCacute HQRdiff HQright.
elim (eq_dec_points P Q); intro HPQdiff.
assert (HXY : (exists X Y, Out B A X /\\ Out B C Y /\\ Per B X Y /\\ Lt P Q X Y)) by (apply aristotle; assumption).
destruct HXY as [X [Y [PX [PY [HXright [Hle HNcong]]]]]].
assert_diffs.
assert (HXYdiff : X <> Y) by (intro; treat_equalities; auto).
assert (HT : (exists T, Out Q T P /\\ Cong Q T X Y)) by (apply l6_11_existence; auto).
destruct HT as [T []].
assert (HS : (exists S, Out Q S R /\\ Cong Q S X B)) by (apply l6_11_existence; auto).
destruct HS as [S []].
assert_diffs.
exists S.
split; auto.
assert_cols.
assert (Per S Q P) by (apply (l8_3 R); Perp; Col).
assert (Per T Q S) by (apply (l8_3 P); Perp; Col).
assert (P<>S).
assert (T<>S).
apply conga_preserves_lta with P S Q T S Q; try (apply conga_refl; auto); [|split].
-
apply conga_trans with X B Y.
2: apply (out_conga A B C A B C); CongA; apply out_trivial; auto.
assert (HInter : (Cong T S Y B /\\ (T <> S -> CongA Q T S X Y B /\\ CongA Q S T X B Y))).
destruct HInter as [_ [_ HConga]]; auto.
apply conga_left_comm; auto.
-
apply lea_comm.
apply (l11_29_b Q S P Q S T).
exists T.
split; CongA.
repeat split; auto.
exists P.
split; [|right; apply out_trivial; auto].
apply l6_13_1.
apply l6_6; auto.
apply (le_transitivity Q P X Y).
apply (le_transitivity Q P P Q); Le.
apply (cong__le); Cong.
-
intro HConga.
assert (HInter : Cong Q P Q T /\\ Cong S P S T /\\ CongA Q P S Q T S).
apply l11_50_1; Cong.

*****
HConga : CongA P S Q T S Q
H19 : not (eq T S)
H18 : not (eq P S)
H17 : Per T Q S
H16 : Per S Q P
H15 : Col B A X
H14 : Col B C Y
H13 : Col Q T P
H12 : Col Q S R
H11 : not (eq Q S)
H10 : not (eq Q T)
H9 : Cong Q S X B
H8 : Out Q S R
S : Tpoint
H6 : Cong Q T X Y
H5 : Out Q T P
T : Tpoint
H7 : not (eq X B)
H3 : not (eq B Y)
H0 : not (eq P R)
H : not (eq X Y)
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
HNcong : not (Cong P Q X Y)
Hle : Le P Q X Y
HXright : Per B X Y
PY : Out B C Y
PX : Out B A X
X,Y : Tpoint
HPQdiff : not (eq P Q)
HQright : Per P Q R
HQRdiff : not (eq Q R)
HABCacute : Acute A B C
HNColB : not (Col A B C)
P,Q,R,A,B,C : Tpoint
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
CongA S Q P S Q T
+++++
apply l11_16; Perp.
-----
Lemma aristotle__greenberg : aristotle_s_axiom -> greenberg_s_axiom.
Proof.
intros aristotle P Q R A B C.
intros HNColB HABCacute HQRdiff HQright.
elim (eq_dec_points P Q); intro HPQdiff.
assert (HXY : (exists X Y, Out B A X /\\ Out B C Y /\\ Per B X Y /\\ Lt P Q X Y)) by (apply aristotle; assumption).
destruct HXY as [X [Y [PX [PY [HXright [Hle HNcong]]]]]].
assert_diffs.
assert (HXYdiff : X <> Y) by (intro; treat_equalities; auto).
assert (HT : (exists T, Out Q T P /\\ Cong Q T X Y)) by (apply l6_11_existence; auto).
destruct HT as [T []].
assert (HS : (exists S, Out Q S R /\\ Cong Q S X B)) by (apply l6_11_existence; auto).
destruct HS as [S []].
assert_diffs.
exists S.
split; auto.
assert_cols.
assert (Per S Q P) by (apply (l8_3 R); Perp; Col).
assert (Per T Q S) by (apply (l8_3 P); Perp; Col).
assert (P<>S).
assert (T<>S).
apply conga_preserves_lta with P S Q T S Q; try (apply conga_refl; auto); [|split].
-
apply conga_trans with X B Y.
2: apply (out_conga A B C A B C); CongA; apply out_trivial; auto.
assert (HInter : (Cong T S Y B /\\ (T <> S -> CongA Q T S X Y B /\\ CongA Q S T X B Y))).
destruct HInter as [_ [_ HConga]]; auto.
apply conga_left_comm; auto.
-
apply lea_comm.
apply (l11_29_b Q S P Q S T).
exists T.
split; CongA.
repeat split; auto.
exists P.
split; [|right; apply out_trivial; auto].
apply l6_13_1.
apply l6_6; auto.
apply (le_transitivity Q P X Y).
apply (le_transitivity Q P P Q); Le.
apply (cong__le); Cong.
-
intro HConga.
assert (HInter : Cong Q P Q T /\\ Cong S P S T /\\ CongA Q P S Q T S).
apply l11_50_1; Cong.
apply l11_16; Perp.

*****
HConga : CongA P S Q T S Q
H19 : not (eq T S)
H18 : not (eq P S)
H17 : Per T Q S
H16 : Per S Q P
H15 : Col B A X
H14 : Col B C Y
H13 : Col Q T P
H12 : Col Q S R
H11 : not (eq Q S)
H10 : not (eq Q T)
H9 : Cong Q S X B
H8 : Out Q S R
S : Tpoint
H6 : Cong Q T X Y
H5 : Out Q T P
T : Tpoint
H7 : not (eq X B)
H3 : not (eq B Y)
H0 : not (eq P R)
H : not (eq X Y)
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
HNcong : not (Cong P Q X Y)
Hle : Le P Q X Y
HXright : Per B X Y
PY : Out B C Y
PX : Out B A X
X,Y : Tpoint
HPQdiff : not (eq P Q)
HQright : Per P Q R
HQRdiff : not (eq Q R)
HABCacute : Acute A B C
HNColB : not (Col A B C)
P,Q,R,A,B,C : Tpoint
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
CongA Q S P Q S T
+++++
CongA.
-----
Lemma aristotle__greenberg : aristotle_s_axiom -> greenberg_s_axiom.
Proof.
intros aristotle P Q R A B C.
intros HNColB HABCacute HQRdiff HQright.
elim (eq_dec_points P Q); intro HPQdiff.
assert (HXY : (exists X Y, Out B A X /\\ Out B C Y /\\ Per B X Y /\\ Lt P Q X Y)) by (apply aristotle; assumption).
destruct HXY as [X [Y [PX [PY [HXright [Hle HNcong]]]]]].
assert_diffs.
assert (HXYdiff : X <> Y) by (intro; treat_equalities; auto).
assert (HT : (exists T, Out Q T P /\\ Cong Q T X Y)) by (apply l6_11_existence; auto).
destruct HT as [T []].
assert (HS : (exists S, Out Q S R /\\ Cong Q S X B)) by (apply l6_11_existence; auto).
destruct HS as [S []].
assert_diffs.
exists S.
split; auto.
assert_cols.
assert (Per S Q P) by (apply (l8_3 R); Perp; Col).
assert (Per T Q S) by (apply (l8_3 P); Perp; Col).
assert (P<>S).
assert (T<>S).
apply conga_preserves_lta with P S Q T S Q; try (apply conga_refl; auto); [|split].
-
apply conga_trans with X B Y.
2: apply (out_conga A B C A B C); CongA; apply out_trivial; auto.
assert (HInter : (Cong T S Y B /\\ (T <> S -> CongA Q T S X Y B /\\ CongA Q S T X B Y))).
destruct HInter as [_ [_ HConga]]; auto.
apply conga_left_comm; auto.
-
apply lea_comm.
apply (l11_29_b Q S P Q S T).
exists T.
split; CongA.
repeat split; auto.
exists P.
split; [|right; apply out_trivial; auto].
apply l6_13_1.
apply l6_6; auto.
apply (le_transitivity Q P X Y).
apply (le_transitivity Q P P Q); Le.
apply (cong__le); Cong.
-
intro HConga.
assert (HInter : Cong Q P Q T /\\ Cong S P S T /\\ CongA Q P S Q T S).

*****
HInter : and (Cong Q P Q T) (and (Cong S P S T) (CongA Q P S Q T S))
HConga : CongA P S Q T S Q
H19 : not (eq T S)
H18 : not (eq P S)
H17 : Per T Q S
H16 : Per S Q P
H15 : Col B A X
H14 : Col B C Y
H13 : Col Q T P
H12 : Col Q S R
H11 : not (eq Q S)
H10 : not (eq Q T)
H9 : Cong Q S X B
H8 : Out Q S R
S : Tpoint
H6 : Cong Q T X Y
H5 : Out Q T P
T : Tpoint
H7 : not (eq X B)
H3 : not (eq B Y)
H0 : not (eq P R)
H : not (eq X Y)
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
HNcong : not (Cong P Q X Y)
Hle : Le P Q X Y
HXright : Per B X Y
PY : Out B C Y
PX : Out B A X
X,Y : Tpoint
HPQdiff : not (eq P Q)
HQright : Per P Q R
HQRdiff : not (eq Q R)
HABCacute : Acute A B C
HNColB : not (Col A B C)
P,Q,R,A,B,C : Tpoint
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
destruct HInter as [HCong _].
-----
Lemma aristotle__greenberg : aristotle_s_axiom -> greenberg_s_axiom.
Proof.
intros aristotle P Q R A B C.
intros HNColB HABCacute HQRdiff HQright.
elim (eq_dec_points P Q); intro HPQdiff.
assert (HXY : (exists X Y, Out B A X /\\ Out B C Y /\\ Per B X Y /\\ Lt P Q X Y)) by (apply aristotle; assumption).
destruct HXY as [X [Y [PX [PY [HXright [Hle HNcong]]]]]].
assert_diffs.
assert (HXYdiff : X <> Y) by (intro; treat_equalities; auto).
assert (HT : (exists T, Out Q T P /\\ Cong Q T X Y)) by (apply l6_11_existence; auto).
destruct HT as [T []].
assert (HS : (exists S, Out Q S R /\\ Cong Q S X B)) by (apply l6_11_existence; auto).
destruct HS as [S []].
assert_diffs.
exists S.
split; auto.
assert_cols.
assert (Per S Q P) by (apply (l8_3 R); Perp; Col).
assert (Per T Q S) by (apply (l8_3 P); Perp; Col).
assert (P<>S).
assert (T<>S).
apply conga_preserves_lta with P S Q T S Q; try (apply conga_refl; auto); [|split].
-
apply conga_trans with X B Y.
2: apply (out_conga A B C A B C); CongA; apply out_trivial; auto.
assert (HInter : (Cong T S Y B /\\ (T <> S -> CongA Q T S X Y B /\\ CongA Q S T X B Y))).
destruct HInter as [_ [_ HConga]]; auto.
apply conga_left_comm; auto.
-
apply lea_comm.
apply (l11_29_b Q S P Q S T).
exists T.
split; CongA.
repeat split; auto.
exists P.
split; [|right; apply out_trivial; auto].
apply l6_13_1.
apply l6_6; auto.
apply (le_transitivity Q P X Y).
apply (le_transitivity Q P P Q); Le.
apply (cong__le); Cong.
-
intro HConga.
assert (HInter : Cong Q P Q T /\\ Cong S P S T /\\ CongA Q P S Q T S).
destruct HInter as [HCong _].

*****
HCong : Cong Q P Q T
HConga : CongA P S Q T S Q
H19 : not (eq T S)
H18 : not (eq P S)
H17 : Per T Q S
H16 : Per S Q P
H15 : Col B A X
H14 : Col B C Y
H13 : Col Q T P
H12 : Col Q S R
H11 : not (eq Q S)
H10 : not (eq Q T)
H9 : Cong Q S X B
H8 : Out Q S R
S : Tpoint
H6 : Cong Q T X Y
H5 : Out Q T P
T : Tpoint
H7 : not (eq X B)
H3 : not (eq B Y)
H0 : not (eq P R)
H : not (eq X Y)
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
HNcong : not (Cong P Q X Y)
Hle : Le P Q X Y
HXright : Per B X Y
PY : Out B C Y
PX : Out B A X
X,Y : Tpoint
HPQdiff : not (eq P Q)
HQright : Per P Q R
HQRdiff : not (eq Q R)
HABCacute : Acute A B C
HNColB : not (Col A B C)
P,Q,R,A,B,C : Tpoint
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply HNcong.
-----
Lemma aristotle__greenberg : aristotle_s_axiom -> greenberg_s_axiom.
Proof.
intros aristotle P Q R A B C.
intros HNColB HABCacute HQRdiff HQright.
elim (eq_dec_points P Q); intro HPQdiff.
assert (HXY : (exists X Y, Out B A X /\\ Out B C Y /\\ Per B X Y /\\ Lt P Q X Y)) by (apply aristotle; assumption).
destruct HXY as [X [Y [PX [PY [HXright [Hle HNcong]]]]]].
assert_diffs.
assert (HXYdiff : X <> Y) by (intro; treat_equalities; auto).
assert (HT : (exists T, Out Q T P /\\ Cong Q T X Y)) by (apply l6_11_existence; auto).
destruct HT as [T []].
assert (HS : (exists S, Out Q S R /\\ Cong Q S X B)) by (apply l6_11_existence; auto).
destruct HS as [S []].
assert_diffs.
exists S.
split; auto.
assert_cols.
assert (Per S Q P) by (apply (l8_3 R); Perp; Col).
assert (Per T Q S) by (apply (l8_3 P); Perp; Col).
assert (P<>S).
assert (T<>S).
apply conga_preserves_lta with P S Q T S Q; try (apply conga_refl; auto); [|split].
-
apply conga_trans with X B Y.
2: apply (out_conga A B C A B C); CongA; apply out_trivial; auto.
assert (HInter : (Cong T S Y B /\\ (T <> S -> CongA Q T S X Y B /\\ CongA Q S T X B Y))).
destruct HInter as [_ [_ HConga]]; auto.
apply conga_left_comm; auto.
-
apply lea_comm.
apply (l11_29_b Q S P Q S T).
exists T.
split; CongA.
repeat split; auto.
exists P.
split; [|right; apply out_trivial; auto].
apply l6_13_1.
apply l6_6; auto.
apply (le_transitivity Q P X Y).
apply (le_transitivity Q P P Q); Le.
apply (cong__le); Cong.
-
intro HConga.
assert (HInter : Cong Q P Q T /\\ Cong S P S T /\\ CongA Q P S Q T S).
destruct HInter as [HCong _].
apply HNcong.

*****
HCong : Cong Q P Q T
HConga : CongA P S Q T S Q
H19 : not (eq T S)
H18 : not (eq P S)
H17 : Per T Q S
H16 : Per S Q P
H15 : Col B A X
H14 : Col B C Y
H13 : Col Q T P
H12 : Col Q S R
H11 : not (eq Q S)
H10 : not (eq Q T)
H9 : Cong Q S X B
H8 : Out Q S R
S : Tpoint
H6 : Cong Q T X Y
H5 : Out Q T P
T : Tpoint
H7 : not (eq X B)
H3 : not (eq B Y)
H0 : not (eq P R)
H : not (eq X Y)
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
HNcong : not (Cong P Q X Y)
Hle : Le P Q X Y
HXright : Per B X Y
PY : Out B C Y
PX : Out B A X
X,Y : Tpoint
HPQdiff : not (eq P Q)
HQright : Per P Q R
HQRdiff : not (eq Q R)
HABCacute : Acute A B C
HNColB : not (Col A B C)
P,Q,R,A,B,C : Tpoint
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong P Q X Y
+++++
apply (cong_transitivity P Q T Q); Cong.
-----
Lemma aristotle__greenberg : aristotle_s_axiom -> greenberg_s_axiom.
Proof.
intros aristotle P Q R A B C.
intros HNColB HABCacute HQRdiff HQright.
elim (eq_dec_points P Q); intro HPQdiff.
assert (HXY : (exists X Y, Out B A X /\\ Out B C Y /\\ Per B X Y /\\ Lt P Q X Y)) by (apply aristotle; assumption).
destruct HXY as [X [Y [PX [PY [HXright [Hle HNcong]]]]]].
assert_diffs.
assert (HXYdiff : X <> Y) by (intro; treat_equalities; auto).
assert (HT : (exists T, Out Q T P /\\ Cong Q T X Y)) by (apply l6_11_existence; auto).
destruct HT as [T []].
assert (HS : (exists S, Out Q S R /\\ Cong Q S X B)) by (apply l6_11_existence; auto).
destruct HS as [S []].
assert_diffs.
exists S.
split; auto.
assert_cols.
assert (Per S Q P) by (apply (l8_3 R); Perp; Col).
assert (Per T Q S) by (apply (l8_3 P); Perp; Col).
assert (P<>S).
assert (T<>S).
apply conga_preserves_lta with P S Q T S Q; try (apply conga_refl; auto); [|split].
-
apply conga_trans with X B Y.
2: apply (out_conga A B C A B C); CongA; apply out_trivial; auto.
assert (HInter : (Cong T S Y B /\\ (T <> S -> CongA Q T S X Y B /\\ CongA Q S T X B Y))).
destruct HInter as [_ [_ HConga]]; auto.
apply conga_left_comm; auto.
-
apply lea_comm.
apply (l11_29_b Q S P Q S T).
exists T.
split; CongA.
repeat split; auto.
exists P.
split; [|right; apply out_trivial; auto].
apply l6_13_1.
apply l6_6; auto.
apply (le_transitivity Q P X Y).
apply (le_transitivity Q P P Q); Le.
apply (cong__le); Cong.
-
intro HConga.
assert (HInter : Cong Q P Q T /\\ Cong S P S T /\\ CongA Q P S Q T S).
destruct HInter as [HCong _].
apply HNcong.
apply (cong_transitivity P Q T Q); Cong.

*****

*****

+++++
Qed.
-----
Lemma aristotle__obtuse_case_elimination :\n  aristotle_s_axiom ->\n  ~ hypothesis_of_obtuse_saccheri_quadrilaterals.
-----
Lemma aristotle__obtuse_case_elimination : aristotle_s_axiom -> ~ hypothesis_of_obtuse_saccheri_quadrilaterals.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : aristotle_s_axiom, not hypothesis_of_obtuse_saccheri_quadrilaterals
+++++
Proof.
-----
Lemma aristotle__obtuse_case_elimination : aristotle_s_axiom -> ~ hypothesis_of_obtuse_saccheri_quadrilaterals.
Proof.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : aristotle_s_axiom, not hypothesis_of_obtuse_saccheri_quadrilaterals
+++++
intros aristotle obtuse.
-----
Lemma aristotle__obtuse_case_elimination : aristotle_s_axiom -> ~ hypothesis_of_obtuse_saccheri_quadrilaterals.
Proof.
intros aristotle obtuse.

*****
obtuse : hypothesis_of_obtuse_saccheri_quadrilaterals
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
destruct ex_lambert as [Q' [C' [P [Q HLam]]]].
-----
Lemma aristotle__obtuse_case_elimination : aristotle_s_axiom -> ~ hypothesis_of_obtuse_saccheri_quadrilaterals.
Proof.
intros aristotle obtuse.
destruct ex_lambert as [Q' [C' [P [Q HLam]]]].

*****
HLam : Lambert Q' C' P Q
Q',C',P,Q : Tpoint
obtuse : hypothesis_of_obtuse_saccheri_quadrilaterals
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert (HObtuse : Obtuse C' P Q) by (apply <- (lam_obtuse__oah Q'); trivial).
-----
Lemma aristotle__obtuse_case_elimination : aristotle_s_axiom -> ~ hypothesis_of_obtuse_saccheri_quadrilaterals.
Proof.
intros aristotle obtuse.
destruct ex_lambert as [Q' [C' [P [Q HLam]]]].
assert (HObtuse : Obtuse C' P Q) by (apply <- (lam_obtuse__oah Q'); trivial).

*****
HObtuse : Obtuse C' P Q
HLam : Lambert Q' C' P Q
Q',C',P,Q : Tpoint
obtuse : hypothesis_of_obtuse_saccheri_quadrilaterals
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert (HPar : Par_strict Q' Q C' P) by (apply lam__par_strict1423, HLam).
-----
Lemma aristotle__obtuse_case_elimination : aristotle_s_axiom -> ~ hypothesis_of_obtuse_saccheri_quadrilaterals.
Proof.
intros aristotle obtuse.
destruct ex_lambert as [Q' [C' [P [Q HLam]]]].
assert (HObtuse : Obtuse C' P Q) by (apply <- (lam_obtuse__oah Q'); trivial).
assert (HPar : Par_strict Q' Q C' P) by (apply lam__par_strict1423, HLam).

*****
HPar : Par_strict Q' Q C' P
HObtuse : Obtuse C' P Q
HLam : Lambert Q' C' P Q
Q',C',P,Q : Tpoint
obtuse : hypothesis_of_obtuse_saccheri_quadrilaterals
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
destruct HLam; spliter.
-----
Lemma aristotle__obtuse_case_elimination : aristotle_s_axiom -> ~ hypothesis_of_obtuse_saccheri_quadrilaterals.
Proof.
intros aristotle obtuse.
destruct ex_lambert as [Q' [C' [P [Q HLam]]]].
assert (HObtuse : Obtuse C' P Q) by (apply <- (lam_obtuse__oah Q'); trivial).
assert (HPar : Par_strict Q' Q C' P) by (apply lam__par_strict1423, HLam).
destruct HLam; spliter.

*****
HPar : Par_strict Q' Q C' P
HObtuse : Obtuse C' P Q
H6 : Coplanar Q' C' P Q
H5 : Per Q' C' P
H4 : Per Q' Q P
H3 : Per C' Q' Q
H2 : not (eq Q' Q)
H1 : not (eq P Q)
H0 : not (eq C' P)
H : not (eq Q' C')
Q',C',P,Q : Tpoint
obtuse : hypothesis_of_obtuse_saccheri_quadrilaterals
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
destruct (l10_15 P Q P C') as [A' [HPerp HOS]]; Col.
-----
Lemma aristotle__obtuse_case_elimination : aristotle_s_axiom -> ~ hypothesis_of_obtuse_saccheri_quadrilaterals.
Proof.
intros aristotle obtuse.
destruct ex_lambert as [Q' [C' [P [Q HLam]]]].
assert (HObtuse : Obtuse C' P Q) by (apply <- (lam_obtuse__oah Q'); trivial).
assert (HPar : Par_strict Q' Q C' P) by (apply lam__par_strict1423, HLam).
destruct HLam; spliter.
destruct (l10_15 P Q P C') as [A' [HPerp HOS]]; Col.

*****
HPar : Par_strict Q' Q C' P
HObtuse : Obtuse C' P Q
H6 : Coplanar Q' C' P Q
H5 : Per Q' C' P
H4 : Per Q' Q P
H3 : Per C' Q' Q
H2 : not (eq Q' Q)
H1 : not (eq P Q)
H0 : not (eq C' P)
H : not (eq Q' C')
Q',C',P,Q : Tpoint
obtuse : hypothesis_of_obtuse_saccheri_quadrilaterals
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col P Q C')
+++++
apply not_col_permutation_1.
-----
Lemma aristotle__obtuse_case_elimination : aristotle_s_axiom -> ~ hypothesis_of_obtuse_saccheri_quadrilaterals.
Proof.
intros aristotle obtuse.
destruct ex_lambert as [Q' [C' [P [Q HLam]]]].
assert (HObtuse : Obtuse C' P Q) by (apply <- (lam_obtuse__oah Q'); trivial).
assert (HPar : Par_strict Q' Q C' P) by (apply lam__par_strict1423, HLam).
destruct HLam; spliter.
destruct (l10_15 P Q P C') as [A' [HPerp HOS]]; Col.
apply not_col_permutation_1.

*****
HPar : Par_strict Q' Q C' P
HObtuse : Obtuse C' P Q
H6 : Coplanar Q' C' P Q
H5 : Per Q' C' P
H4 : Per Q' Q P
H3 : Per C' Q' Q
H2 : not (eq Q' Q)
H1 : not (eq P Q)
H0 : not (eq C' P)
H : not (eq Q' C')
Q',C',P,Q : Tpoint
obtuse : hypothesis_of_obtuse_saccheri_quadrilaterals
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col C' P Q)
+++++
apply par_strict_not_col_1 with Q'; Par.
-----
Lemma aristotle__obtuse_case_elimination : aristotle_s_axiom -> ~ hypothesis_of_obtuse_saccheri_quadrilaterals.
Proof.
intros aristotle obtuse.
destruct ex_lambert as [Q' [C' [P [Q HLam]]]].
assert (HObtuse : Obtuse C' P Q) by (apply <- (lam_obtuse__oah Q'); trivial).
assert (HPar : Par_strict Q' Q C' P) by (apply lam__par_strict1423, HLam).
destruct HLam; spliter.
destruct (l10_15 P Q P C') as [A' [HPerp HOS]]; Col.
apply not_col_permutation_1.
apply par_strict_not_col_1 with Q'; Par.

*****
HOS : OS P Q C' A'
HPerp : Perp P Q A' P
A' : Tpoint
HPar : Par_strict Q' Q C' P
HObtuse : Obtuse C' P Q
H6 : Coplanar Q' C' P Q
H5 : Per Q' C' P
H4 : Per Q' Q P
H3 : Per C' Q' Q
H2 : not (eq Q' Q)
H1 : not (eq P Q)
H0 : not (eq C' P)
H : not (eq Q' C')
Q',C',P,Q : Tpoint
obtuse : hypothesis_of_obtuse_saccheri_quadrilaterals
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert_diffs.
-----
Lemma aristotle__obtuse_case_elimination : aristotle_s_axiom -> ~ hypothesis_of_obtuse_saccheri_quadrilaterals.
Proof.
intros aristotle obtuse.
destruct ex_lambert as [Q' [C' [P [Q HLam]]]].
assert (HObtuse : Obtuse C' P Q) by (apply <- (lam_obtuse__oah Q'); trivial).
assert (HPar : Par_strict Q' Q C' P) by (apply lam__par_strict1423, HLam).
destruct HLam; spliter.
destruct (l10_15 P Q P C') as [A' [HPerp HOS]]; Col.
apply not_col_permutation_1.
apply par_strict_not_col_1 with Q'; Par.
assert_diffs.

*****
H16 : not (eq Q A')
H11 : not (eq A' P)
H8 : not (eq C' Q)
H7 : not (eq Q' P)
HOS : OS P Q C' A'
HPerp : Perp P Q A' P
A' : Tpoint
HPar : Par_strict Q' Q C' P
HObtuse : Obtuse C' P Q
H6 : Coplanar Q' C' P Q
H5 : Per Q' C' P
H4 : Per Q' Q P
H3 : Per C' Q' Q
H2 : not (eq Q' Q)
H1 : not (eq P Q)
H0 : not (eq C' P)
H : not (eq Q' C')
Q',C',P,Q : Tpoint
obtuse : hypothesis_of_obtuse_saccheri_quadrilaterals
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert (HLtA : LtA Q P A' C' P Q) by (apply obtuse_per__lta; Perp).
-----
Lemma aristotle__obtuse_case_elimination : aristotle_s_axiom -> ~ hypothesis_of_obtuse_saccheri_quadrilaterals.
Proof.
intros aristotle obtuse.
destruct ex_lambert as [Q' [C' [P [Q HLam]]]].
assert (HObtuse : Obtuse C' P Q) by (apply <- (lam_obtuse__oah Q'); trivial).
assert (HPar : Par_strict Q' Q C' P) by (apply lam__par_strict1423, HLam).
destruct HLam; spliter.
destruct (l10_15 P Q P C') as [A' [HPerp HOS]]; Col.
apply not_col_permutation_1.
apply par_strict_not_col_1 with Q'; Par.
assert_diffs.
assert (HLtA : LtA Q P A' C' P Q) by (apply obtuse_per__lta; Perp).

*****
HLtA : LtA Q P A' C' P Q
H16 : not (eq Q A')
H11 : not (eq A' P)
H8 : not (eq C' Q)
H7 : not (eq Q' P)
HOS : OS P Q C' A'
HPerp : Perp P Q A' P
A' : Tpoint
HPar : Par_strict Q' Q C' P
HObtuse : Obtuse C' P Q
H6 : Coplanar Q' C' P Q
H5 : Per Q' C' P
H4 : Per Q' Q P
H3 : Per C' Q' Q
H2 : not (eq Q' Q)
H1 : not (eq P Q)
H0 : not (eq C' P)
H : not (eq Q' C')
Q',C',P,Q : Tpoint
obtuse : hypothesis_of_obtuse_saccheri_quadrilaterals
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
destruct HLtA as [HLeA HNCongA].
-----
Lemma aristotle__obtuse_case_elimination : aristotle_s_axiom -> ~ hypothesis_of_obtuse_saccheri_quadrilaterals.
Proof.
intros aristotle obtuse.
destruct ex_lambert as [Q' [C' [P [Q HLam]]]].
assert (HObtuse : Obtuse C' P Q) by (apply <- (lam_obtuse__oah Q'); trivial).
assert (HPar : Par_strict Q' Q C' P) by (apply lam__par_strict1423, HLam).
destruct HLam; spliter.
destruct (l10_15 P Q P C') as [A' [HPerp HOS]]; Col.
apply not_col_permutation_1.
apply par_strict_not_col_1 with Q'; Par.
assert_diffs.
assert (HLtA : LtA Q P A' C' P Q) by (apply obtuse_per__lta; Perp).
destruct HLtA as [HLeA HNCongA].

*****
HNCongA : not (CongA Q P A' C' P Q)
HLeA : LeA Q P A' C' P Q
H16 : not (eq Q A')
H11 : not (eq A' P)
H8 : not (eq C' Q)
H7 : not (eq Q' P)
HOS : OS P Q C' A'
HPerp : Perp P Q A' P
A' : Tpoint
HPar : Par_strict Q' Q C' P
HObtuse : Obtuse C' P Q
H6 : Coplanar Q' C' P Q
H5 : Per Q' C' P
H4 : Per Q' Q P
H3 : Per C' Q' Q
H2 : not (eq Q' Q)
H1 : not (eq P Q)
H0 : not (eq C' P)
H : not (eq Q' C')
Q',C',P,Q : Tpoint
obtuse : hypothesis_of_obtuse_saccheri_quadrilaterals
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert (HInAngle : InAngle A' Q P C').
-----
Lemma aristotle__obtuse_case_elimination : aristotle_s_axiom -> ~ hypothesis_of_obtuse_saccheri_quadrilaterals.
Proof.
intros aristotle obtuse.
destruct ex_lambert as [Q' [C' [P [Q HLam]]]].
assert (HObtuse : Obtuse C' P Q) by (apply <- (lam_obtuse__oah Q'); trivial).
assert (HPar : Par_strict Q' Q C' P) by (apply lam__par_strict1423, HLam).
destruct HLam; spliter.
destruct (l10_15 P Q P C') as [A' [HPerp HOS]]; Col.
apply not_col_permutation_1.
apply par_strict_not_col_1 with Q'; Par.
assert_diffs.
assert (HLtA : LtA Q P A' C' P Q) by (apply obtuse_per__lta; Perp).
destruct HLtA as [HLeA HNCongA].
assert (HInAngle : InAngle A' Q P C').

*****
HNCongA : not (CongA Q P A' C' P Q)
HLeA : LeA Q P A' C' P Q
H16 : not (eq Q A')
H11 : not (eq A' P)
H8 : not (eq C' Q)
H7 : not (eq Q' P)
HOS : OS P Q C' A'
HPerp : Perp P Q A' P
A' : Tpoint
HPar : Par_strict Q' Q C' P
HObtuse : Obtuse C' P Q
H6 : Coplanar Q' C' P Q
H5 : Per Q' C' P
H4 : Per Q' Q P
H3 : Per C' Q' Q
H2 : not (eq Q' Q)
H1 : not (eq P Q)
H0 : not (eq C' P)
H : not (eq Q' C')
Q',C',P,Q : Tpoint
obtuse : hypothesis_of_obtuse_saccheri_quadrilaterals
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
InAngle A' Q P C'
+++++
apply lea_in_angle; Side; apply lea_right_comm; trivial.
-----
Lemma aristotle__obtuse_case_elimination : aristotle_s_axiom -> ~ hypothesis_of_obtuse_saccheri_quadrilaterals.
Proof.
intros aristotle obtuse.
destruct ex_lambert as [Q' [C' [P [Q HLam]]]].
assert (HObtuse : Obtuse C' P Q) by (apply <- (lam_obtuse__oah Q'); trivial).
assert (HPar : Par_strict Q' Q C' P) by (apply lam__par_strict1423, HLam).
destruct HLam; spliter.
destruct (l10_15 P Q P C') as [A' [HPerp HOS]]; Col.
apply not_col_permutation_1.
apply par_strict_not_col_1 with Q'; Par.
assert_diffs.
assert (HLtA : LtA Q P A' C' P Q) by (apply obtuse_per__lta; Perp).
destruct HLtA as [HLeA HNCongA].
assert (HInAngle : InAngle A' Q P C').
apply lea_in_angle; Side; apply lea_right_comm; trivial.

*****
HInAngle : InAngle A' Q P C'
HNCongA : not (CongA Q P A' C' P Q)
HLeA : LeA Q P A' C' P Q
H16 : not (eq Q A')
H11 : not (eq A' P)
H8 : not (eq C' Q)
H7 : not (eq Q' P)
HOS : OS P Q C' A'
HPerp : Perp P Q A' P
A' : Tpoint
HPar : Par_strict Q' Q C' P
HObtuse : Obtuse C' P Q
H6 : Coplanar Q' C' P Q
H5 : Per Q' C' P
H4 : Per Q' Q P
H3 : Per C' Q' Q
H2 : not (eq Q' Q)
H1 : not (eq P Q)
H0 : not (eq C' P)
H : not (eq Q' C')
Q',C',P,Q : Tpoint
obtuse : hypothesis_of_obtuse_saccheri_quadrilaterals
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
destruct (segment_construction C' P C' P) as [C [HC1 HC2]].
-----
Lemma aristotle__obtuse_case_elimination : aristotle_s_axiom -> ~ hypothesis_of_obtuse_saccheri_quadrilaterals.
Proof.
intros aristotle obtuse.
destruct ex_lambert as [Q' [C' [P [Q HLam]]]].
assert (HObtuse : Obtuse C' P Q) by (apply <- (lam_obtuse__oah Q'); trivial).
assert (HPar : Par_strict Q' Q C' P) by (apply lam__par_strict1423, HLam).
destruct HLam; spliter.
destruct (l10_15 P Q P C') as [A' [HPerp HOS]]; Col.
apply not_col_permutation_1.
apply par_strict_not_col_1 with Q'; Par.
assert_diffs.
assert (HLtA : LtA Q P A' C' P Q) by (apply obtuse_per__lta; Perp).
destruct HLtA as [HLeA HNCongA].
assert (HInAngle : InAngle A' Q P C').
apply lea_in_angle; Side; apply lea_right_comm; trivial.
destruct (segment_construction C' P C' P) as [C [HC1 HC2]].

*****
HC2 : Cong P C C' P
HC1 : Bet C' P C
C : Tpoint
HInAngle : InAngle A' Q P C'
HNCongA : not (CongA Q P A' C' P Q)
HLeA : LeA Q P A' C' P Q
H16 : not (eq Q A')
H11 : not (eq A' P)
H8 : not (eq C' Q)
H7 : not (eq Q' P)
HOS : OS P Q C' A'
HPerp : Perp P Q A' P
A' : Tpoint
HPar : Par_strict Q' Q C' P
HObtuse : Obtuse C' P Q
H6 : Coplanar Q' C' P Q
H5 : Per Q' C' P
H4 : Per Q' Q P
H3 : Per C' Q' Q
H2 : not (eq Q' Q)
H1 : not (eq P Q)
H0 : not (eq C' P)
H : not (eq Q' C')
Q',C',P,Q : Tpoint
obtuse : hypothesis_of_obtuse_saccheri_quadrilaterals
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
destruct (segment_construction A' P A' P) as [A [HA1 HA2]].
-----
Lemma aristotle__obtuse_case_elimination : aristotle_s_axiom -> ~ hypothesis_of_obtuse_saccheri_quadrilaterals.
Proof.
intros aristotle obtuse.
destruct ex_lambert as [Q' [C' [P [Q HLam]]]].
assert (HObtuse : Obtuse C' P Q) by (apply <- (lam_obtuse__oah Q'); trivial).
assert (HPar : Par_strict Q' Q C' P) by (apply lam__par_strict1423, HLam).
destruct HLam; spliter.
destruct (l10_15 P Q P C') as [A' [HPerp HOS]]; Col.
apply not_col_permutation_1.
apply par_strict_not_col_1 with Q'; Par.
assert_diffs.
assert (HLtA : LtA Q P A' C' P Q) by (apply obtuse_per__lta; Perp).
destruct HLtA as [HLeA HNCongA].
assert (HInAngle : InAngle A' Q P C').
apply lea_in_angle; Side; apply lea_right_comm; trivial.
destruct (segment_construction C' P C' P) as [C [HC1 HC2]].
destruct (segment_construction A' P A' P) as [A [HA1 HA2]].

*****
HA2 : Cong P A A' P
HA1 : Bet A' P A
A : Tpoint
HC2 : Cong P C C' P
HC1 : Bet C' P C
C : Tpoint
HInAngle : InAngle A' Q P C'
HNCongA : not (CongA Q P A' C' P Q)
HLeA : LeA Q P A' C' P Q
H16 : not (eq Q A')
H11 : not (eq A' P)
H8 : not (eq C' Q)
H7 : not (eq Q' P)
HOS : OS P Q C' A'
HPerp : Perp P Q A' P
A' : Tpoint
HPar : Par_strict Q' Q C' P
HObtuse : Obtuse C' P Q
H6 : Coplanar Q' C' P Q
H5 : Per Q' C' P
H4 : Per Q' Q P
H3 : Per C' Q' Q
H2 : not (eq Q' Q)
H1 : not (eq P Q)
H0 : not (eq C' P)
H : not (eq Q' C')
Q',C',P,Q : Tpoint
obtuse : hypothesis_of_obtuse_saccheri_quadrilaterals
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert_diffs.
-----
Lemma aristotle__obtuse_case_elimination : aristotle_s_axiom -> ~ hypothesis_of_obtuse_saccheri_quadrilaterals.
Proof.
intros aristotle obtuse.
destruct ex_lambert as [Q' [C' [P [Q HLam]]]].
assert (HObtuse : Obtuse C' P Q) by (apply <- (lam_obtuse__oah Q'); trivial).
assert (HPar : Par_strict Q' Q C' P) by (apply lam__par_strict1423, HLam).
destruct HLam; spliter.
destruct (l10_15 P Q P C') as [A' [HPerp HOS]]; Col.
apply not_col_permutation_1.
apply par_strict_not_col_1 with Q'; Par.
assert_diffs.
assert (HLtA : LtA Q P A' C' P Q) by (apply obtuse_per__lta; Perp).
destruct HLtA as [HLeA HNCongA].
assert (HInAngle : InAngle A' Q P C').
apply lea_in_angle; Side; apply lea_right_comm; trivial.
destruct (segment_construction C' P C' P) as [C [HC1 HC2]].
destruct (segment_construction A' P A' P) as [A [HA1 HA2]].
assert_diffs.

*****
H13 : not (eq P C)
H12 : not (eq P A)
H10 : not (eq C' C)
H9 : not (eq A' A)
HA2 : Cong P A A' P
HA1 : Bet A' P A
A : Tpoint
HC2 : Cong P C C' P
HC1 : Bet C' P C
C : Tpoint
HInAngle : InAngle A' Q P C'
HNCongA : not (CongA Q P A' C' P Q)
HLeA : LeA Q P A' C' P Q
H16 : not (eq Q A')
H11 : not (eq A' P)
H8 : not (eq C' Q)
H7 : not (eq Q' P)
HOS : OS P Q C' A'
HPerp : Perp P Q A' P
A' : Tpoint
HPar : Par_strict Q' Q C' P
HObtuse : Obtuse C' P Q
H6 : Coplanar Q' C' P Q
H5 : Per Q' C' P
H4 : Per Q' Q P
H3 : Per C' Q' Q
H2 : not (eq Q' Q)
H1 : not (eq P Q)
H0 : not (eq C' P)
H : not (eq Q' C')
Q',C',P,Q : Tpoint
obtuse : hypothesis_of_obtuse_saccheri_quadrilaterals
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert (HInAngle1 : InAngle C A P Q).
-----
Lemma aristotle__obtuse_case_elimination : aristotle_s_axiom -> ~ hypothesis_of_obtuse_saccheri_quadrilaterals.
Proof.
intros aristotle obtuse.
destruct ex_lambert as [Q' [C' [P [Q HLam]]]].
assert (HObtuse : Obtuse C' P Q) by (apply <- (lam_obtuse__oah Q'); trivial).
assert (HPar : Par_strict Q' Q C' P) by (apply lam__par_strict1423, HLam).
destruct HLam; spliter.
destruct (l10_15 P Q P C') as [A' [HPerp HOS]]; Col.
apply not_col_permutation_1.
apply par_strict_not_col_1 with Q'; Par.
assert_diffs.
assert (HLtA : LtA Q P A' C' P Q) by (apply obtuse_per__lta; Perp).
destruct HLtA as [HLeA HNCongA].
assert (HInAngle : InAngle A' Q P C').
apply lea_in_angle; Side; apply lea_right_comm; trivial.
destruct (segment_construction C' P C' P) as [C [HC1 HC2]].
destruct (segment_construction A' P A' P) as [A [HA1 HA2]].
assert_diffs.
assert (HInAngle1 : InAngle C A P Q).

*****
H13 : not (eq P C)
H12 : not (eq P A)
H10 : not (eq C' C)
H9 : not (eq A' A)
HA2 : Cong P A A' P
HA1 : Bet A' P A
A : Tpoint
HC2 : Cong P C C' P
HC1 : Bet C' P C
C : Tpoint
HInAngle : InAngle A' Q P C'
HNCongA : not (CongA Q P A' C' P Q)
HLeA : LeA Q P A' C' P Q
H16 : not (eq Q A')
H11 : not (eq A' P)
H8 : not (eq C' Q)
H7 : not (eq Q' P)
HOS : OS P Q C' A'
HPerp : Perp P Q A' P
A' : Tpoint
HPar : Par_strict Q' Q C' P
HObtuse : Obtuse C' P Q
H6 : Coplanar Q' C' P Q
H5 : Per Q' C' P
H4 : Per Q' Q P
H3 : Per C' Q' Q
H2 : not (eq Q' Q)
H1 : not (eq P Q)
H0 : not (eq C' P)
H : not (eq Q' C')
Q',C',P,Q : Tpoint
obtuse : hypothesis_of_obtuse_saccheri_quadrilaterals
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
InAngle C A P Q
+++++
apply in_angle_reverse with A'; auto.
-----
Lemma aristotle__obtuse_case_elimination : aristotle_s_axiom -> ~ hypothesis_of_obtuse_saccheri_quadrilaterals.
Proof.
intros aristotle obtuse.
destruct ex_lambert as [Q' [C' [P [Q HLam]]]].
assert (HObtuse : Obtuse C' P Q) by (apply <- (lam_obtuse__oah Q'); trivial).
assert (HPar : Par_strict Q' Q C' P) by (apply lam__par_strict1423, HLam).
destruct HLam; spliter.
destruct (l10_15 P Q P C') as [A' [HPerp HOS]]; Col.
apply not_col_permutation_1.
apply par_strict_not_col_1 with Q'; Par.
assert_diffs.
assert (HLtA : LtA Q P A' C' P Q) by (apply obtuse_per__lta; Perp).
destruct HLtA as [HLeA HNCongA].
assert (HInAngle : InAngle A' Q P C').
apply lea_in_angle; Side; apply lea_right_comm; trivial.
destruct (segment_construction C' P C' P) as [C [HC1 HC2]].
destruct (segment_construction A' P A' P) as [A [HA1 HA2]].
assert_diffs.
assert (HInAngle1 : InAngle C A P Q).
apply in_angle_reverse with A'; auto.

*****
H13 : not (eq P C)
H12 : not (eq P A)
H10 : not (eq C' C)
H9 : not (eq A' A)
HA2 : Cong P A A' P
HA1 : Bet A' P A
A : Tpoint
HC2 : Cong P C C' P
HC1 : Bet C' P C
C : Tpoint
HInAngle : InAngle A' Q P C'
HNCongA : not (CongA Q P A' C' P Q)
HLeA : LeA Q P A' C' P Q
H16 : not (eq Q A')
H11 : not (eq A' P)
H8 : not (eq C' Q)
H7 : not (eq Q' P)
HOS : OS P Q C' A'
HPerp : Perp P Q A' P
A' : Tpoint
HPar : Par_strict Q' Q C' P
HObtuse : Obtuse C' P Q
H6 : Coplanar Q' C' P Q
H5 : Per Q' C' P
H4 : Per Q' Q P
H3 : Per C' Q' Q
H2 : not (eq Q' Q)
H1 : not (eq P Q)
H0 : not (eq C' P)
H : not (eq Q' C')
Q',C',P,Q : Tpoint
obtuse : hypothesis_of_obtuse_saccheri_quadrilaterals
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
InAngle Q A' P C
+++++
apply l11_24, in_angle_reverse with C'; auto.
-----
Lemma aristotle__obtuse_case_elimination : aristotle_s_axiom -> ~ hypothesis_of_obtuse_saccheri_quadrilaterals.
Proof.
intros aristotle obtuse.
destruct ex_lambert as [Q' [C' [P [Q HLam]]]].
assert (HObtuse : Obtuse C' P Q) by (apply <- (lam_obtuse__oah Q'); trivial).
assert (HPar : Par_strict Q' Q C' P) by (apply lam__par_strict1423, HLam).
destruct HLam; spliter.
destruct (l10_15 P Q P C') as [A' [HPerp HOS]]; Col.
apply not_col_permutation_1.
apply par_strict_not_col_1 with Q'; Par.
assert_diffs.
assert (HLtA : LtA Q P A' C' P Q) by (apply obtuse_per__lta; Perp).
destruct HLtA as [HLeA HNCongA].
assert (HInAngle : InAngle A' Q P C').
apply lea_in_angle; Side; apply lea_right_comm; trivial.
destruct (segment_construction C' P C' P) as [C [HC1 HC2]].
destruct (segment_construction A' P A' P) as [A [HA1 HA2]].
assert_diffs.
assert (HInAngle1 : InAngle C A P Q).
apply in_angle_reverse with A'; auto.
apply l11_24, in_angle_reverse with C'; auto.

*****
H13 : not (eq P C)
H12 : not (eq P A)
H10 : not (eq C' C)
H9 : not (eq A' A)
HA2 : Cong P A A' P
HA1 : Bet A' P A
A : Tpoint
HC2 : Cong P C C' P
HC1 : Bet C' P C
C : Tpoint
HInAngle : InAngle A' Q P C'
HNCongA : not (CongA Q P A' C' P Q)
HLeA : LeA Q P A' C' P Q
H16 : not (eq Q A')
H11 : not (eq A' P)
H8 : not (eq C' Q)
H7 : not (eq Q' P)
HOS : OS P Q C' A'
HPerp : Perp P Q A' P
A' : Tpoint
HPar : Par_strict Q' Q C' P
HObtuse : Obtuse C' P Q
H6 : Coplanar Q' C' P Q
H5 : Per Q' C' P
H4 : Per Q' Q P
H3 : Per C' Q' Q
H2 : not (eq Q' Q)
H1 : not (eq P Q)
H0 : not (eq C' P)
H : not (eq Q' C')
Q',C',P,Q : Tpoint
obtuse : hypothesis_of_obtuse_saccheri_quadrilaterals
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
InAngle A' C' P Q
+++++
apply l11_24; trivial.
-----
Lemma aristotle__obtuse_case_elimination : aristotle_s_axiom -> ~ hypothesis_of_obtuse_saccheri_quadrilaterals.
Proof.
intros aristotle obtuse.
destruct ex_lambert as [Q' [C' [P [Q HLam]]]].
assert (HObtuse : Obtuse C' P Q) by (apply <- (lam_obtuse__oah Q'); trivial).
assert (HPar : Par_strict Q' Q C' P) by (apply lam__par_strict1423, HLam).
destruct HLam; spliter.
destruct (l10_15 P Q P C') as [A' [HPerp HOS]]; Col.
apply not_col_permutation_1.
apply par_strict_not_col_1 with Q'; Par.
assert_diffs.
assert (HLtA : LtA Q P A' C' P Q) by (apply obtuse_per__lta; Perp).
destruct HLtA as [HLeA HNCongA].
assert (HInAngle : InAngle A' Q P C').
apply lea_in_angle; Side; apply lea_right_comm; trivial.
destruct (segment_construction C' P C' P) as [C [HC1 HC2]].
destruct (segment_construction A' P A' P) as [A [HA1 HA2]].
assert_diffs.
assert (HInAngle1 : InAngle C A P Q).
apply in_angle_reverse with A'; auto.
apply l11_24, in_angle_reverse with C'; auto.
apply l11_24; trivial.

*****
HInAngle1 : InAngle C A P Q
H13 : not (eq P C)
H12 : not (eq P A)
H10 : not (eq C' C)
H9 : not (eq A' A)
HA2 : Cong P A A' P
HA1 : Bet A' P A
A : Tpoint
HC2 : Cong P C C' P
HC1 : Bet C' P C
C : Tpoint
HInAngle : InAngle A' Q P C'
HNCongA : not (CongA Q P A' C' P Q)
HLeA : LeA Q P A' C' P Q
H16 : not (eq Q A')
H11 : not (eq A' P)
H8 : not (eq C' Q)
H7 : not (eq Q' P)
HOS : OS P Q C' A'
HPerp : Perp P Q A' P
A' : Tpoint
HPar : Par_strict Q' Q C' P
HObtuse : Obtuse C' P Q
H6 : Coplanar Q' C' P Q
H5 : Per Q' C' P
H4 : Per Q' Q P
H3 : Per C' Q' Q
H2 : not (eq Q' Q)
H1 : not (eq P Q)
H0 : not (eq C' P)
H : not (eq Q' C')
Q',C',P,Q : Tpoint
obtuse : hypothesis_of_obtuse_saccheri_quadrilaterals
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert (HNCol : ~ Col P C' A').
-----
Lemma aristotle__obtuse_case_elimination : aristotle_s_axiom -> ~ hypothesis_of_obtuse_saccheri_quadrilaterals.
Proof.
intros aristotle obtuse.
destruct ex_lambert as [Q' [C' [P [Q HLam]]]].
assert (HObtuse : Obtuse C' P Q) by (apply <- (lam_obtuse__oah Q'); trivial).
assert (HPar : Par_strict Q' Q C' P) by (apply lam__par_strict1423, HLam).
destruct HLam; spliter.
destruct (l10_15 P Q P C') as [A' [HPerp HOS]]; Col.
apply not_col_permutation_1.
apply par_strict_not_col_1 with Q'; Par.
assert_diffs.
assert (HLtA : LtA Q P A' C' P Q) by (apply obtuse_per__lta; Perp).
destruct HLtA as [HLeA HNCongA].
assert (HInAngle : InAngle A' Q P C').
apply lea_in_angle; Side; apply lea_right_comm; trivial.
destruct (segment_construction C' P C' P) as [C [HC1 HC2]].
destruct (segment_construction A' P A' P) as [A [HA1 HA2]].
assert_diffs.
assert (HInAngle1 : InAngle C A P Q).
apply in_angle_reverse with A'; auto.
apply l11_24, in_angle_reverse with C'; auto.
apply l11_24; trivial.
assert (HNCol : ~ Col P C' A').

*****
HInAngle1 : InAngle C A P Q
H13 : not (eq P C)
H12 : not (eq P A)
H10 : not (eq C' C)
H9 : not (eq A' A)
HA2 : Cong P A A' P
HA1 : Bet A' P A
A : Tpoint
HC2 : Cong P C C' P
HC1 : Bet C' P C
C : Tpoint
HInAngle : InAngle A' Q P C'
HNCongA : not (CongA Q P A' C' P Q)
HLeA : LeA Q P A' C' P Q
H16 : not (eq Q A')
H11 : not (eq A' P)
H8 : not (eq C' Q)
H7 : not (eq Q' P)
HOS : OS P Q C' A'
HPerp : Perp P Q A' P
A' : Tpoint
HPar : Par_strict Q' Q C' P
HObtuse : Obtuse C' P Q
H6 : Coplanar Q' C' P Q
H5 : Per Q' C' P
H4 : Per Q' Q P
H3 : Per C' Q' Q
H2 : not (eq Q' Q)
H1 : not (eq P Q)
H0 : not (eq C' P)
H : not (eq Q' C')
Q',C',P,Q : Tpoint
obtuse : hypothesis_of_obtuse_saccheri_quadrilaterals
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col P C' A')
+++++
intro Habs.
-----
Lemma aristotle__obtuse_case_elimination : aristotle_s_axiom -> ~ hypothesis_of_obtuse_saccheri_quadrilaterals.
Proof.
intros aristotle obtuse.
destruct ex_lambert as [Q' [C' [P [Q HLam]]]].
assert (HObtuse : Obtuse C' P Q) by (apply <- (lam_obtuse__oah Q'); trivial).
assert (HPar : Par_strict Q' Q C' P) by (apply lam__par_strict1423, HLam).
destruct HLam; spliter.
destruct (l10_15 P Q P C') as [A' [HPerp HOS]]; Col.
apply not_col_permutation_1.
apply par_strict_not_col_1 with Q'; Par.
assert_diffs.
assert (HLtA : LtA Q P A' C' P Q) by (apply obtuse_per__lta; Perp).
destruct HLtA as [HLeA HNCongA].
assert (HInAngle : InAngle A' Q P C').
apply lea_in_angle; Side; apply lea_right_comm; trivial.
destruct (segment_construction C' P C' P) as [C [HC1 HC2]].
destruct (segment_construction A' P A' P) as [A [HA1 HA2]].
assert_diffs.
assert (HInAngle1 : InAngle C A P Q).
apply in_angle_reverse with A'; auto.
apply l11_24, in_angle_reverse with C'; auto.
apply l11_24; trivial.
assert (HNCol : ~ Col P C' A').
intro Habs.

*****
Habs : Col P C' A'
HInAngle1 : InAngle C A P Q
H13 : not (eq P C)
H12 : not (eq P A)
H10 : not (eq C' C)
H9 : not (eq A' A)
HA2 : Cong P A A' P
HA1 : Bet A' P A
A : Tpoint
HC2 : Cong P C C' P
HC1 : Bet C' P C
C : Tpoint
HInAngle : InAngle A' Q P C'
HNCongA : not (CongA Q P A' C' P Q)
HLeA : LeA Q P A' C' P Q
H16 : not (eq Q A')
H11 : not (eq A' P)
H8 : not (eq C' Q)
H7 : not (eq Q' P)
HOS : OS P Q C' A'
HPerp : Perp P Q A' P
A' : Tpoint
HPar : Par_strict Q' Q C' P
HObtuse : Obtuse C' P Q
H6 : Coplanar Q' C' P Q
H5 : Per Q' C' P
H4 : Per Q' Q P
H3 : Per C' Q' Q
H2 : not (eq Q' Q)
H1 : not (eq P Q)
H0 : not (eq C' P)
H : not (eq Q' C')
Q',C',P,Q : Tpoint
obtuse : hypothesis_of_obtuse_saccheri_quadrilaterals
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply HNCongA, conga_right_comm, out2__conga.
-----
Lemma aristotle__obtuse_case_elimination : aristotle_s_axiom -> ~ hypothesis_of_obtuse_saccheri_quadrilaterals.
Proof.
intros aristotle obtuse.
destruct ex_lambert as [Q' [C' [P [Q HLam]]]].
assert (HObtuse : Obtuse C' P Q) by (apply <- (lam_obtuse__oah Q'); trivial).
assert (HPar : Par_strict Q' Q C' P) by (apply lam__par_strict1423, HLam).
destruct HLam; spliter.
destruct (l10_15 P Q P C') as [A' [HPerp HOS]]; Col.
apply not_col_permutation_1.
apply par_strict_not_col_1 with Q'; Par.
assert_diffs.
assert (HLtA : LtA Q P A' C' P Q) by (apply obtuse_per__lta; Perp).
destruct HLtA as [HLeA HNCongA].
assert (HInAngle : InAngle A' Q P C').
apply lea_in_angle; Side; apply lea_right_comm; trivial.
destruct (segment_construction C' P C' P) as [C [HC1 HC2]].
destruct (segment_construction A' P A' P) as [A [HA1 HA2]].
assert_diffs.
assert (HInAngle1 : InAngle C A P Q).
apply in_angle_reverse with A'; auto.
apply l11_24, in_angle_reverse with C'; auto.
apply l11_24; trivial.
assert (HNCol : ~ Col P C' A').
intro Habs.
apply HNCongA, conga_right_comm, out2__conga.

*****
Habs : Col P C' A'
HInAngle1 : InAngle C A P Q
H13 : not (eq P C)
H12 : not (eq P A)
H10 : not (eq C' C)
H9 : not (eq A' A)
HA2 : Cong P A A' P
HA1 : Bet A' P A
A : Tpoint
HC2 : Cong P C C' P
HC1 : Bet C' P C
C : Tpoint
HInAngle : InAngle A' Q P C'
HNCongA : not (CongA Q P A' C' P Q)
HLeA : LeA Q P A' C' P Q
H16 : not (eq Q A')
H11 : not (eq A' P)
H8 : not (eq C' Q)
H7 : not (eq Q' P)
HOS : OS P Q C' A'
HPerp : Perp P Q A' P
A' : Tpoint
HPar : Par_strict Q' Q C' P
HObtuse : Obtuse C' P Q
H6 : Coplanar Q' C' P Q
H5 : Per Q' C' P
H4 : Per Q' Q P
H3 : Per C' Q' Q
H2 : not (eq Q' Q)
H1 : not (eq P Q)
H0 : not (eq C' P)
H : not (eq Q' C')
Q',C',P,Q : Tpoint
obtuse : hypothesis_of_obtuse_saccheri_quadrilaterals
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Out P Q Q
+++++
apply out_trivial; auto.
-----
Lemma aristotle__obtuse_case_elimination : aristotle_s_axiom -> ~ hypothesis_of_obtuse_saccheri_quadrilaterals.
Proof.
intros aristotle obtuse.
destruct ex_lambert as [Q' [C' [P [Q HLam]]]].
assert (HObtuse : Obtuse C' P Q) by (apply <- (lam_obtuse__oah Q'); trivial).
assert (HPar : Par_strict Q' Q C' P) by (apply lam__par_strict1423, HLam).
destruct HLam; spliter.
destruct (l10_15 P Q P C') as [A' [HPerp HOS]]; Col.
apply not_col_permutation_1.
apply par_strict_not_col_1 with Q'; Par.
assert_diffs.
assert (HLtA : LtA Q P A' C' P Q) by (apply obtuse_per__lta; Perp).
destruct HLtA as [HLeA HNCongA].
assert (HInAngle : InAngle A' Q P C').
apply lea_in_angle; Side; apply lea_right_comm; trivial.
destruct (segment_construction C' P C' P) as [C [HC1 HC2]].
destruct (segment_construction A' P A' P) as [A [HA1 HA2]].
assert_diffs.
assert (HInAngle1 : InAngle C A P Q).
apply in_angle_reverse with A'; auto.
apply l11_24, in_angle_reverse with C'; auto.
apply l11_24; trivial.
assert (HNCol : ~ Col P C' A').
intro Habs.
apply HNCongA, conga_right_comm, out2__conga.
apply out_trivial; auto.

*****
Habs : Col P C' A'
HInAngle1 : InAngle C A P Q
H13 : not (eq P C)
H12 : not (eq P A)
H10 : not (eq C' C)
H9 : not (eq A' A)
HA2 : Cong P A A' P
HA1 : Bet A' P A
A : Tpoint
HC2 : Cong P C C' P
HC1 : Bet C' P C
C : Tpoint
HInAngle : InAngle A' Q P C'
HNCongA : not (CongA Q P A' C' P Q)
HLeA : LeA Q P A' C' P Q
H16 : not (eq Q A')
H11 : not (eq A' P)
H8 : not (eq C' Q)
H7 : not (eq Q' P)
HOS : OS P Q C' A'
HPerp : Perp P Q A' P
A' : Tpoint
HPar : Par_strict Q' Q C' P
HObtuse : Obtuse C' P Q
H6 : Coplanar Q' C' P Q
H5 : Per Q' C' P
H4 : Per Q' Q P
H3 : Per C' Q' Q
H2 : not (eq Q' Q)
H1 : not (eq P Q)
H0 : not (eq C' P)
H : not (eq Q' C')
Q',C',P,Q : Tpoint
obtuse : hypothesis_of_obtuse_saccheri_quadrilaterals
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Out P C' A'
+++++
apply col_one_side_out with Q; trivial.
-----
Lemma aristotle__obtuse_case_elimination : aristotle_s_axiom -> ~ hypothesis_of_obtuse_saccheri_quadrilaterals.
Proof.
intros aristotle obtuse.
destruct ex_lambert as [Q' [C' [P [Q HLam]]]].
assert (HObtuse : Obtuse C' P Q) by (apply <- (lam_obtuse__oah Q'); trivial).
assert (HPar : Par_strict Q' Q C' P) by (apply lam__par_strict1423, HLam).
destruct HLam; spliter.
destruct (l10_15 P Q P C') as [A' [HPerp HOS]]; Col.
apply not_col_permutation_1.
apply par_strict_not_col_1 with Q'; Par.
assert_diffs.
assert (HLtA : LtA Q P A' C' P Q) by (apply obtuse_per__lta; Perp).
destruct HLtA as [HLeA HNCongA].
assert (HInAngle : InAngle A' Q P C').
apply lea_in_angle; Side; apply lea_right_comm; trivial.
destruct (segment_construction C' P C' P) as [C [HC1 HC2]].
destruct (segment_construction A' P A' P) as [A [HA1 HA2]].
assert_diffs.
assert (HInAngle1 : InAngle C A P Q).
apply in_angle_reverse with A'; auto.
apply l11_24, in_angle_reverse with C'; auto.
apply l11_24; trivial.
assert (HNCol : ~ Col P C' A').

*****
HNCol : not (Col P C' A')
HInAngle1 : InAngle C A P Q
H13 : not (eq P C)
H12 : not (eq P A)
H10 : not (eq C' C)
H9 : not (eq A' A)
HA2 : Cong P A A' P
HA1 : Bet A' P A
A : Tpoint
HC2 : Cong P C C' P
HC1 : Bet C' P C
C : Tpoint
HInAngle : InAngle A' Q P C'
HNCongA : not (CongA Q P A' C' P Q)
HLeA : LeA Q P A' C' P Q
H16 : not (eq Q A')
H11 : not (eq A' P)
H8 : not (eq C' Q)
H7 : not (eq Q' P)
HOS : OS P Q C' A'
HPerp : Perp P Q A' P
A' : Tpoint
HPar : Par_strict Q' Q C' P
HObtuse : Obtuse C' P Q
H6 : Coplanar Q' C' P Q
H5 : Per Q' C' P
H4 : Per Q' Q P
H3 : Per C' Q' Q
H2 : not (eq Q' Q)
H1 : not (eq P Q)
H0 : not (eq C' P)
H : not (eq Q' C')
Q',C',P,Q : Tpoint
obtuse : hypothesis_of_obtuse_saccheri_quadrilaterals
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert (HNCol1 : ~ Col P C A) by (intro; apply HNCol; ColR).
-----
Lemma aristotle__obtuse_case_elimination : aristotle_s_axiom -> ~ hypothesis_of_obtuse_saccheri_quadrilaterals.
Proof.
intros aristotle obtuse.
destruct ex_lambert as [Q' [C' [P [Q HLam]]]].
assert (HObtuse : Obtuse C' P Q) by (apply <- (lam_obtuse__oah Q'); trivial).
assert (HPar : Par_strict Q' Q C' P) by (apply lam__par_strict1423, HLam).
destruct HLam; spliter.
destruct (l10_15 P Q P C') as [A' [HPerp HOS]]; Col.
apply not_col_permutation_1.
apply par_strict_not_col_1 with Q'; Par.
assert_diffs.
assert (HLtA : LtA Q P A' C' P Q) by (apply obtuse_per__lta; Perp).
destruct HLtA as [HLeA HNCongA].
assert (HInAngle : InAngle A' Q P C').
apply lea_in_angle; Side; apply lea_right_comm; trivial.
destruct (segment_construction C' P C' P) as [C [HC1 HC2]].
destruct (segment_construction A' P A' P) as [A [HA1 HA2]].
assert_diffs.
assert (HInAngle1 : InAngle C A P Q).
apply in_angle_reverse with A'; auto.
apply l11_24, in_angle_reverse with C'; auto.
apply l11_24; trivial.
assert (HNCol : ~ Col P C' A').
assert (HNCol1 : ~ Col P C A) by (intro; apply HNCol; ColR).

*****
HNCol1 : not (Col P C A)
HNCol : not (Col P C' A')
HInAngle1 : InAngle C A P Q
H13 : not (eq P C)
H12 : not (eq P A)
H10 : not (eq C' C)
H9 : not (eq A' A)
HA2 : Cong P A A' P
HA1 : Bet A' P A
A : Tpoint
HC2 : Cong P C C' P
HC1 : Bet C' P C
C : Tpoint
HInAngle : InAngle A' Q P C'
HNCongA : not (CongA Q P A' C' P Q)
HLeA : LeA Q P A' C' P Q
H16 : not (eq Q A')
H11 : not (eq A' P)
H8 : not (eq C' Q)
H7 : not (eq Q' P)
HOS : OS P Q C' A'
HPerp : Perp P Q A' P
A' : Tpoint
HPar : Par_strict Q' Q C' P
HObtuse : Obtuse C' P Q
H6 : Coplanar Q' C' P Q
H5 : Per Q' C' P
H4 : Per Q' Q P
H3 : Per C' Q' Q
H2 : not (eq Q' Q)
H1 : not (eq P Q)
H0 : not (eq C' P)
H : not (eq Q' C')
Q',C',P,Q : Tpoint
obtuse : hypothesis_of_obtuse_saccheri_quadrilaterals
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert (HNCol2 : ~ Col P Q C) by (intro; apply (par_strict_not_col_2 Q' Q C' P); ColR).
-----
Lemma aristotle__obtuse_case_elimination : aristotle_s_axiom -> ~ hypothesis_of_obtuse_saccheri_quadrilaterals.
Proof.
intros aristotle obtuse.
destruct ex_lambert as [Q' [C' [P [Q HLam]]]].
assert (HObtuse : Obtuse C' P Q) by (apply <- (lam_obtuse__oah Q'); trivial).
assert (HPar : Par_strict Q' Q C' P) by (apply lam__par_strict1423, HLam).
destruct HLam; spliter.
destruct (l10_15 P Q P C') as [A' [HPerp HOS]]; Col.
apply not_col_permutation_1.
apply par_strict_not_col_1 with Q'; Par.
assert_diffs.
assert (HLtA : LtA Q P A' C' P Q) by (apply obtuse_per__lta; Perp).
destruct HLtA as [HLeA HNCongA].
assert (HInAngle : InAngle A' Q P C').
apply lea_in_angle; Side; apply lea_right_comm; trivial.
destruct (segment_construction C' P C' P) as [C [HC1 HC2]].
destruct (segment_construction A' P A' P) as [A [HA1 HA2]].
assert_diffs.
assert (HInAngle1 : InAngle C A P Q).
apply in_angle_reverse with A'; auto.
apply l11_24, in_angle_reverse with C'; auto.
apply l11_24; trivial.
assert (HNCol : ~ Col P C' A').
assert (HNCol1 : ~ Col P C A) by (intro; apply HNCol; ColR).
assert (HNCol2 : ~ Col P Q C) by (intro; apply (par_strict_not_col_2 Q' Q C' P); ColR).

*****
HNCol2 : not (Col P Q C)
HNCol1 : not (Col P C A)
HNCol : not (Col P C' A')
HInAngle1 : InAngle C A P Q
H13 : not (eq P C)
H12 : not (eq P A)
H10 : not (eq C' C)
H9 : not (eq A' A)
HA2 : Cong P A A' P
HA1 : Bet A' P A
A : Tpoint
HC2 : Cong P C C' P
HC1 : Bet C' P C
C : Tpoint
HInAngle : InAngle A' Q P C'
HNCongA : not (CongA Q P A' C' P Q)
HLeA : LeA Q P A' C' P Q
H16 : not (eq Q A')
H11 : not (eq A' P)
H8 : not (eq C' Q)
H7 : not (eq Q' P)
HOS : OS P Q C' A'
HPerp : Perp P Q A' P
A' : Tpoint
HPar : Par_strict Q' Q C' P
HObtuse : Obtuse C' P Q
H6 : Coplanar Q' C' P Q
H5 : Per Q' C' P
H4 : Per Q' Q P
H3 : Per C' Q' Q
H2 : not (eq Q' Q)
H1 : not (eq P Q)
H0 : not (eq C' P)
H : not (eq Q' C')
Q',C',P,Q : Tpoint
obtuse : hypothesis_of_obtuse_saccheri_quadrilaterals
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert (HPer : Per A P Q) by (apply l8_2, per_col with A'; Perp; Col).
-----
Lemma aristotle__obtuse_case_elimination : aristotle_s_axiom -> ~ hypothesis_of_obtuse_saccheri_quadrilaterals.
Proof.
intros aristotle obtuse.
destruct ex_lambert as [Q' [C' [P [Q HLam]]]].
assert (HObtuse : Obtuse C' P Q) by (apply <- (lam_obtuse__oah Q'); trivial).
assert (HPar : Par_strict Q' Q C' P) by (apply lam__par_strict1423, HLam).
destruct HLam; spliter.
destruct (l10_15 P Q P C') as [A' [HPerp HOS]]; Col.
apply not_col_permutation_1.
apply par_strict_not_col_1 with Q'; Par.
assert_diffs.
assert (HLtA : LtA Q P A' C' P Q) by (apply obtuse_per__lta; Perp).
destruct HLtA as [HLeA HNCongA].
assert (HInAngle : InAngle A' Q P C').
apply lea_in_angle; Side; apply lea_right_comm; trivial.
destruct (segment_construction C' P C' P) as [C [HC1 HC2]].
destruct (segment_construction A' P A' P) as [A [HA1 HA2]].
assert_diffs.
assert (HInAngle1 : InAngle C A P Q).
apply in_angle_reverse with A'; auto.
apply l11_24, in_angle_reverse with C'; auto.
apply l11_24; trivial.
assert (HNCol : ~ Col P C' A').
assert (HNCol1 : ~ Col P C A) by (intro; apply HNCol; ColR).
assert (HNCol2 : ~ Col P Q C) by (intro; apply (par_strict_not_col_2 Q' Q C' P); ColR).
assert (HPer : Per A P Q) by (apply l8_2, per_col with A'; Perp; Col).

*****
HPer : Per A P Q
HNCol2 : not (Col P Q C)
HNCol1 : not (Col P C A)
HNCol : not (Col P C' A')
HInAngle1 : InAngle C A P Q
H13 : not (eq P C)
H12 : not (eq P A)
H10 : not (eq C' C)
H9 : not (eq A' A)
HA2 : Cong P A A' P
HA1 : Bet A' P A
A : Tpoint
HC2 : Cong P C C' P
HC1 : Bet C' P C
C : Tpoint
HInAngle : InAngle A' Q P C'
HNCongA : not (CongA Q P A' C' P Q)
HLeA : LeA Q P A' C' P Q
H16 : not (eq Q A')
H11 : not (eq A' P)
H8 : not (eq C' Q)
H7 : not (eq Q' P)
HOS : OS P Q C' A'
HPerp : Perp P Q A' P
A' : Tpoint
HPar : Par_strict Q' Q C' P
HObtuse : Obtuse C' P Q
H6 : Coplanar Q' C' P Q
H5 : Per Q' C' P
H4 : Per Q' Q P
H3 : Per C' Q' Q
H2 : not (eq Q' Q)
H1 : not (eq P Q)
H0 : not (eq C' P)
H : not (eq Q' C')
Q',C',P,Q : Tpoint
obtuse : hypothesis_of_obtuse_saccheri_quadrilaterals
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert (HOS1 : OS A P C Q).
-----
Lemma aristotle__obtuse_case_elimination : aristotle_s_axiom -> ~ hypothesis_of_obtuse_saccheri_quadrilaterals.
Proof.
intros aristotle obtuse.
destruct ex_lambert as [Q' [C' [P [Q HLam]]]].
assert (HObtuse : Obtuse C' P Q) by (apply <- (lam_obtuse__oah Q'); trivial).
assert (HPar : Par_strict Q' Q C' P) by (apply lam__par_strict1423, HLam).
destruct HLam; spliter.
destruct (l10_15 P Q P C') as [A' [HPerp HOS]]; Col.
apply not_col_permutation_1.
apply par_strict_not_col_1 with Q'; Par.
assert_diffs.
assert (HLtA : LtA Q P A' C' P Q) by (apply obtuse_per__lta; Perp).
destruct HLtA as [HLeA HNCongA].
assert (HInAngle : InAngle A' Q P C').
apply lea_in_angle; Side; apply lea_right_comm; trivial.
destruct (segment_construction C' P C' P) as [C [HC1 HC2]].
destruct (segment_construction A' P A' P) as [A [HA1 HA2]].
assert_diffs.
assert (HInAngle1 : InAngle C A P Q).
apply in_angle_reverse with A'; auto.
apply l11_24, in_angle_reverse with C'; auto.
apply l11_24; trivial.
assert (HNCol : ~ Col P C' A').
assert (HNCol1 : ~ Col P C A) by (intro; apply HNCol; ColR).
assert (HNCol2 : ~ Col P Q C) by (intro; apply (par_strict_not_col_2 Q' Q C' P); ColR).
assert (HPer : Per A P Q) by (apply l8_2, per_col with A'; Perp; Col).
assert (HOS1 : OS A P C Q).

*****
HPer : Per A P Q
HNCol2 : not (Col P Q C)
HNCol1 : not (Col P C A)
HNCol : not (Col P C' A')
HInAngle1 : InAngle C A P Q
H13 : not (eq P C)
H12 : not (eq P A)
H10 : not (eq C' C)
H9 : not (eq A' A)
HA2 : Cong P A A' P
HA1 : Bet A' P A
A : Tpoint
HC2 : Cong P C C' P
HC1 : Bet C' P C
C : Tpoint
HInAngle : InAngle A' Q P C'
HNCongA : not (CongA Q P A' C' P Q)
HLeA : LeA Q P A' C' P Q
H16 : not (eq Q A')
H11 : not (eq A' P)
H8 : not (eq C' Q)
H7 : not (eq Q' P)
HOS : OS P Q C' A'
HPerp : Perp P Q A' P
A' : Tpoint
HPar : Par_strict Q' Q C' P
HObtuse : Obtuse C' P Q
H6 : Coplanar Q' C' P Q
H5 : Per Q' C' P
H4 : Per Q' Q P
H3 : Per C' Q' Q
H2 : not (eq Q' Q)
H1 : not (eq P Q)
H0 : not (eq C' P)
H : not (eq Q' C')
Q',C',P,Q : Tpoint
obtuse : hypothesis_of_obtuse_saccheri_quadrilaterals
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS A P C Q
+++++
apply in_angle_one_side; Col.
-----
Lemma aristotle__obtuse_case_elimination : aristotle_s_axiom -> ~ hypothesis_of_obtuse_saccheri_quadrilaterals.
Proof.
intros aristotle obtuse.
destruct ex_lambert as [Q' [C' [P [Q HLam]]]].
assert (HObtuse : Obtuse C' P Q) by (apply <- (lam_obtuse__oah Q'); trivial).
assert (HPar : Par_strict Q' Q C' P) by (apply lam__par_strict1423, HLam).
destruct HLam; spliter.
destruct (l10_15 P Q P C') as [A' [HPerp HOS]]; Col.
apply not_col_permutation_1.
apply par_strict_not_col_1 with Q'; Par.
assert_diffs.
assert (HLtA : LtA Q P A' C' P Q) by (apply obtuse_per__lta; Perp).
destruct HLtA as [HLeA HNCongA].
assert (HInAngle : InAngle A' Q P C').
apply lea_in_angle; Side; apply lea_right_comm; trivial.
destruct (segment_construction C' P C' P) as [C [HC1 HC2]].
destruct (segment_construction A' P A' P) as [A [HA1 HA2]].
assert_diffs.
assert (HInAngle1 : InAngle C A P Q).
apply in_angle_reverse with A'; auto.
apply l11_24, in_angle_reverse with C'; auto.
apply l11_24; trivial.
assert (HNCol : ~ Col P C' A').
assert (HNCol1 : ~ Col P C A) by (intro; apply HNCol; ColR).
assert (HNCol2 : ~ Col P Q C) by (intro; apply (par_strict_not_col_2 Q' Q C' P); ColR).
assert (HPer : Per A P Q) by (apply l8_2, per_col with A'; Perp; Col).
assert (HOS1 : OS A P C Q).
apply in_angle_one_side; Col.

*****
HPer : Per A P Q
HNCol2 : not (Col P Q C)
HNCol1 : not (Col P C A)
HNCol : not (Col P C' A')
HInAngle1 : InAngle C A P Q
H13 : not (eq P C)
H12 : not (eq P A)
H10 : not (eq C' C)
H9 : not (eq A' A)
HA2 : Cong P A A' P
HA1 : Bet A' P A
A : Tpoint
HC2 : Cong P C C' P
HC1 : Bet C' P C
C : Tpoint
HInAngle : InAngle A' Q P C'
HNCongA : not (CongA Q P A' C' P Q)
HLeA : LeA Q P A' C' P Q
H16 : not (eq Q A')
H11 : not (eq A' P)
H8 : not (eq C' Q)
H7 : not (eq Q' P)
HOS : OS P Q C' A'
HPerp : Perp P Q A' P
A' : Tpoint
HPar : Par_strict Q' Q C' P
HObtuse : Obtuse C' P Q
H6 : Coplanar Q' C' P Q
H5 : Per Q' C' P
H4 : Per Q' Q P
H3 : Per C' Q' Q
H2 : not (eq Q' Q)
H1 : not (eq P Q)
H0 : not (eq C' P)
H : not (eq Q' C')
Q',C',P,Q : Tpoint
obtuse : hypothesis_of_obtuse_saccheri_quadrilaterals
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col A P Q)
+++++
apply per_not_col; auto.
-----
Lemma aristotle__obtuse_case_elimination : aristotle_s_axiom -> ~ hypothesis_of_obtuse_saccheri_quadrilaterals.
Proof.
intros aristotle obtuse.
destruct ex_lambert as [Q' [C' [P [Q HLam]]]].
assert (HObtuse : Obtuse C' P Q) by (apply <- (lam_obtuse__oah Q'); trivial).
assert (HPar : Par_strict Q' Q C' P) by (apply lam__par_strict1423, HLam).
destruct HLam; spliter.
destruct (l10_15 P Q P C') as [A' [HPerp HOS]]; Col.
apply not_col_permutation_1.
apply par_strict_not_col_1 with Q'; Par.
assert_diffs.
assert (HLtA : LtA Q P A' C' P Q) by (apply obtuse_per__lta; Perp).
destruct HLtA as [HLeA HNCongA].
assert (HInAngle : InAngle A' Q P C').
apply lea_in_angle; Side; apply lea_right_comm; trivial.
destruct (segment_construction C' P C' P) as [C [HC1 HC2]].
destruct (segment_construction A' P A' P) as [A [HA1 HA2]].
assert_diffs.
assert (HInAngle1 : InAngle C A P Q).
apply in_angle_reverse with A'; auto.
apply l11_24, in_angle_reverse with C'; auto.
apply l11_24; trivial.
assert (HNCol : ~ Col P C' A').
assert (HNCol1 : ~ Col P C A) by (intro; apply HNCol; ColR).
assert (HNCol2 : ~ Col P Q C) by (intro; apply (par_strict_not_col_2 Q' Q C' P); ColR).
assert (HPer : Per A P Q) by (apply l8_2, per_col with A'; Perp; Col).
assert (HOS1 : OS A P C Q).
apply in_angle_one_side; Col.
apply per_not_col; auto.

*****
HOS1 : OS A P C Q
HPer : Per A P Q
HNCol2 : not (Col P Q C)
HNCol1 : not (Col P C A)
HNCol : not (Col P C' A')
HInAngle1 : InAngle C A P Q
H13 : not (eq P C)
H12 : not (eq P A)
H10 : not (eq C' C)
H9 : not (eq A' A)
HA2 : Cong P A A' P
HA1 : Bet A' P A
A : Tpoint
HC2 : Cong P C C' P
HC1 : Bet C' P C
C : Tpoint
HInAngle : InAngle A' Q P C'
HNCongA : not (CongA Q P A' C' P Q)
HLeA : LeA Q P A' C' P Q
H16 : not (eq Q A')
H11 : not (eq A' P)
H8 : not (eq C' Q)
H7 : not (eq Q' P)
HOS : OS P Q C' A'
HPerp : Perp P Q A' P
A' : Tpoint
HPar : Par_strict Q' Q C' P
HObtuse : Obtuse C' P Q
H6 : Coplanar Q' C' P Q
H5 : Per Q' C' P
H4 : Per Q' Q P
H3 : Per C' Q' Q
H2 : not (eq Q' Q)
H1 : not (eq P Q)
H0 : not (eq C' P)
H : not (eq Q' C')
Q',C',P,Q : Tpoint
obtuse : hypothesis_of_obtuse_saccheri_quadrilaterals
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
destruct (aristotle P Q A P C) as [X [Y]]; Col.
-----
Lemma aristotle__obtuse_case_elimination : aristotle_s_axiom -> ~ hypothesis_of_obtuse_saccheri_quadrilaterals.
Proof.
intros aristotle obtuse.
destruct ex_lambert as [Q' [C' [P [Q HLam]]]].
assert (HObtuse : Obtuse C' P Q) by (apply <- (lam_obtuse__oah Q'); trivial).
assert (HPar : Par_strict Q' Q C' P) by (apply lam__par_strict1423, HLam).
destruct HLam; spliter.
destruct (l10_15 P Q P C') as [A' [HPerp HOS]]; Col.
apply not_col_permutation_1.
apply par_strict_not_col_1 with Q'; Par.
assert_diffs.
assert (HLtA : LtA Q P A' C' P Q) by (apply obtuse_per__lta; Perp).
destruct HLtA as [HLeA HNCongA].
assert (HInAngle : InAngle A' Q P C').
apply lea_in_angle; Side; apply lea_right_comm; trivial.
destruct (segment_construction C' P C' P) as [C [HC1 HC2]].
destruct (segment_construction A' P A' P) as [A [HA1 HA2]].
assert_diffs.
assert (HInAngle1 : InAngle C A P Q).
apply in_angle_reverse with A'; auto.
apply l11_24, in_angle_reverse with C'; auto.
apply l11_24; trivial.
assert (HNCol : ~ Col P C' A').
assert (HNCol1 : ~ Col P C A) by (intro; apply HNCol; ColR).
assert (HNCol2 : ~ Col P Q C) by (intro; apply (par_strict_not_col_2 Q' Q C' P); ColR).
assert (HPer : Per A P Q) by (apply l8_2, per_col with A'; Perp; Col).
assert (HOS1 : OS A P C Q).
apply in_angle_one_side; Col.
apply per_not_col; auto.
destruct (aristotle P Q A P C) as [X [Y]]; Col.

*****
HOS1 : OS A P C Q
HPer : Per A P Q
HNCol2 : not (Col P Q C)
HNCol1 : not (Col P C A)
HNCol : not (Col P C' A')
HInAngle1 : InAngle C A P Q
H13 : not (eq P C)
H12 : not (eq P A)
H10 : not (eq C' C)
H9 : not (eq A' A)
HA2 : Cong P A A' P
HA1 : Bet A' P A
A : Tpoint
HC2 : Cong P C C' P
HC1 : Bet C' P C
C : Tpoint
HInAngle : InAngle A' Q P C'
HNCongA : not (CongA Q P A' C' P Q)
HLeA : LeA Q P A' C' P Q
H16 : not (eq Q A')
H11 : not (eq A' P)
H8 : not (eq C' Q)
H7 : not (eq Q' P)
HOS : OS P Q C' A'
HPerp : Perp P Q A' P
A' : Tpoint
HPar : Par_strict Q' Q C' P
HObtuse : Obtuse C' P Q
H6 : Coplanar Q' C' P Q
H5 : Per Q' C' P
H4 : Per Q' Q P
H3 : Per C' Q' Q
H2 : not (eq Q' Q)
H1 : not (eq P Q)
H0 : not (eq C' P)
H : not (eq Q' C')
Q',C',P,Q : Tpoint
obtuse : hypothesis_of_obtuse_saccheri_quadrilaterals
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Acute A P C
+++++
exists A, P, Q; split; Perp; split.
-----
Lemma aristotle__obtuse_case_elimination : aristotle_s_axiom -> ~ hypothesis_of_obtuse_saccheri_quadrilaterals.
Proof.
intros aristotle obtuse.
destruct ex_lambert as [Q' [C' [P [Q HLam]]]].
assert (HObtuse : Obtuse C' P Q) by (apply <- (lam_obtuse__oah Q'); trivial).
assert (HPar : Par_strict Q' Q C' P) by (apply lam__par_strict1423, HLam).
destruct HLam; spliter.
destruct (l10_15 P Q P C') as [A' [HPerp HOS]]; Col.
apply not_col_permutation_1.
apply par_strict_not_col_1 with Q'; Par.
assert_diffs.
assert (HLtA : LtA Q P A' C' P Q) by (apply obtuse_per__lta; Perp).
destruct HLtA as [HLeA HNCongA].
assert (HInAngle : InAngle A' Q P C').
apply lea_in_angle; Side; apply lea_right_comm; trivial.
destruct (segment_construction C' P C' P) as [C [HC1 HC2]].
destruct (segment_construction A' P A' P) as [A [HA1 HA2]].
assert_diffs.
assert (HInAngle1 : InAngle C A P Q).
apply in_angle_reverse with A'; auto.
apply l11_24, in_angle_reverse with C'; auto.
apply l11_24; trivial.
assert (HNCol : ~ Col P C' A').
assert (HNCol1 : ~ Col P C A) by (intro; apply HNCol; ColR).
assert (HNCol2 : ~ Col P Q C) by (intro; apply (par_strict_not_col_2 Q' Q C' P); ColR).
assert (HPer : Per A P Q) by (apply l8_2, per_col with A'; Perp; Col).
assert (HOS1 : OS A P C Q).
apply in_angle_one_side; Col.
apply per_not_col; auto.
destruct (aristotle P Q A P C) as [X [Y]]; Col.
exists A, P, Q; split; Perp; split.

*****
HOS1 : OS A P C Q
HPer : Per A P Q
HNCol2 : not (Col P Q C)
HNCol1 : not (Col P C A)
HNCol : not (Col P C' A')
HInAngle1 : InAngle C A P Q
H13 : not (eq P C)
H12 : not (eq P A)
H10 : not (eq C' C)
H9 : not (eq A' A)
HA2 : Cong P A A' P
HA1 : Bet A' P A
A : Tpoint
HC2 : Cong P C C' P
HC1 : Bet C' P C
C : Tpoint
HInAngle : InAngle A' Q P C'
HNCongA : not (CongA Q P A' C' P Q)
HLeA : LeA Q P A' C' P Q
H16 : not (eq Q A')
H11 : not (eq A' P)
H8 : not (eq C' Q)
H7 : not (eq Q' P)
HOS : OS P Q C' A'
HPerp : Perp P Q A' P
A' : Tpoint
HPar : Par_strict Q' Q C' P
HObtuse : Obtuse C' P Q
H6 : Coplanar Q' C' P Q
H5 : Per Q' C' P
H4 : Per Q' Q P
H3 : Per C' Q' Q
H2 : not (eq Q' Q)
H1 : not (eq P Q)
H0 : not (eq C' P)
H : not (eq Q' C')
Q',C',P,Q : Tpoint
obtuse : hypothesis_of_obtuse_saccheri_quadrilaterals
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
LeA A P C A P Q
+++++
apply inangle__lea; trivial.
-----
Lemma aristotle__obtuse_case_elimination : aristotle_s_axiom -> ~ hypothesis_of_obtuse_saccheri_quadrilaterals.
Proof.
intros aristotle obtuse.
destruct ex_lambert as [Q' [C' [P [Q HLam]]]].
assert (HObtuse : Obtuse C' P Q) by (apply <- (lam_obtuse__oah Q'); trivial).
assert (HPar : Par_strict Q' Q C' P) by (apply lam__par_strict1423, HLam).
destruct HLam; spliter.
destruct (l10_15 P Q P C') as [A' [HPerp HOS]]; Col.
apply not_col_permutation_1.
apply par_strict_not_col_1 with Q'; Par.
assert_diffs.
assert (HLtA : LtA Q P A' C' P Q) by (apply obtuse_per__lta; Perp).
destruct HLtA as [HLeA HNCongA].
assert (HInAngle : InAngle A' Q P C').
apply lea_in_angle; Side; apply lea_right_comm; trivial.
destruct (segment_construction C' P C' P) as [C [HC1 HC2]].
destruct (segment_construction A' P A' P) as [A [HA1 HA2]].
assert_diffs.
assert (HInAngle1 : InAngle C A P Q).
apply in_angle_reverse with A'; auto.
apply l11_24, in_angle_reverse with C'; auto.
apply l11_24; trivial.
assert (HNCol : ~ Col P C' A').
assert (HNCol1 : ~ Col P C A) by (intro; apply HNCol; ColR).
assert (HNCol2 : ~ Col P Q C) by (intro; apply (par_strict_not_col_2 Q' Q C' P); ColR).
assert (HPer : Per A P Q) by (apply l8_2, per_col with A'; Perp; Col).
assert (HOS1 : OS A P C Q).
apply in_angle_one_side; Col.
apply per_not_col; auto.
destruct (aristotle P Q A P C) as [X [Y]]; Col.
exists A, P, Q; split; Perp; split.
apply inangle__lea; trivial.

*****
HOS1 : OS A P C Q
HPer : Per A P Q
HNCol2 : not (Col P Q C)
HNCol1 : not (Col P C A)
HNCol : not (Col P C' A')
HInAngle1 : InAngle C A P Q
H13 : not (eq P C)
H12 : not (eq P A)
H10 : not (eq C' C)
H9 : not (eq A' A)
HA2 : Cong P A A' P
HA1 : Bet A' P A
A : Tpoint
HC2 : Cong P C C' P
HC1 : Bet C' P C
C : Tpoint
HInAngle : InAngle A' Q P C'
HNCongA : not (CongA Q P A' C' P Q)
HLeA : LeA Q P A' C' P Q
H16 : not (eq Q A')
H11 : not (eq A' P)
H8 : not (eq C' Q)
H7 : not (eq Q' P)
HOS : OS P Q C' A'
HPerp : Perp P Q A' P
A' : Tpoint
HPar : Par_strict Q' Q C' P
HObtuse : Obtuse C' P Q
H6 : Coplanar Q' C' P Q
H5 : Per Q' C' P
H4 : Per Q' Q P
H3 : Per C' Q' Q
H2 : not (eq Q' Q)
H1 : not (eq P Q)
H0 : not (eq C' P)
H : not (eq Q' C')
Q',C',P,Q : Tpoint
obtuse : hypothesis_of_obtuse_saccheri_quadrilaterals
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (CongA A P C A P Q)
+++++
intro HCongA.
-----
Lemma aristotle__obtuse_case_elimination : aristotle_s_axiom -> ~ hypothesis_of_obtuse_saccheri_quadrilaterals.
Proof.
intros aristotle obtuse.
destruct ex_lambert as [Q' [C' [P [Q HLam]]]].
assert (HObtuse : Obtuse C' P Q) by (apply <- (lam_obtuse__oah Q'); trivial).
assert (HPar : Par_strict Q' Q C' P) by (apply lam__par_strict1423, HLam).
destruct HLam; spliter.
destruct (l10_15 P Q P C') as [A' [HPerp HOS]]; Col.
apply not_col_permutation_1.
apply par_strict_not_col_1 with Q'; Par.
assert_diffs.
assert (HLtA : LtA Q P A' C' P Q) by (apply obtuse_per__lta; Perp).
destruct HLtA as [HLeA HNCongA].
assert (HInAngle : InAngle A' Q P C').
apply lea_in_angle; Side; apply lea_right_comm; trivial.
destruct (segment_construction C' P C' P) as [C [HC1 HC2]].
destruct (segment_construction A' P A' P) as [A [HA1 HA2]].
assert_diffs.
assert (HInAngle1 : InAngle C A P Q).
apply in_angle_reverse with A'; auto.
apply l11_24, in_angle_reverse with C'; auto.
apply l11_24; trivial.
assert (HNCol : ~ Col P C' A').
assert (HNCol1 : ~ Col P C A) by (intro; apply HNCol; ColR).
assert (HNCol2 : ~ Col P Q C) by (intro; apply (par_strict_not_col_2 Q' Q C' P); ColR).
assert (HPer : Per A P Q) by (apply l8_2, per_col with A'; Perp; Col).
assert (HOS1 : OS A P C Q).
apply in_angle_one_side; Col.
apply per_not_col; auto.
destruct (aristotle P Q A P C) as [X [Y]]; Col.
exists A, P, Q; split; Perp; split.
apply inangle__lea; trivial.
intro HCongA.

*****
HCongA : CongA A P C A P Q
HOS1 : OS A P C Q
HPer : Per A P Q
HNCol2 : not (Col P Q C)
HNCol1 : not (Col P C A)
HNCol : not (Col P C' A')
HInAngle1 : InAngle C A P Q
H13 : not (eq P C)
H12 : not (eq P A)
H10 : not (eq C' C)
H9 : not (eq A' A)
HA2 : Cong P A A' P
HA1 : Bet A' P A
A : Tpoint
HC2 : Cong P C C' P
HC1 : Bet C' P C
C : Tpoint
HInAngle : InAngle A' Q P C'
HNCongA : not (CongA Q P A' C' P Q)
HLeA : LeA Q P A' C' P Q
H16 : not (eq Q A')
H11 : not (eq A' P)
H8 : not (eq C' Q)
H7 : not (eq Q' P)
HOS : OS P Q C' A'
HPerp : Perp P Q A' P
A' : Tpoint
HPar : Par_strict Q' Q C' P
HObtuse : Obtuse C' P Q
H6 : Coplanar Q' C' P Q
H5 : Per Q' C' P
H4 : Per Q' Q P
H3 : Per C' Q' Q
H2 : not (eq Q' Q)
H1 : not (eq P Q)
H0 : not (eq C' P)
H : not (eq Q' C')
Q',C',P,Q : Tpoint
obtuse : hypothesis_of_obtuse_saccheri_quadrilaterals
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
destruct (conga_cop__or_out_ts A P C Q); CongA; Cop.
-----
Lemma aristotle__obtuse_case_elimination : aristotle_s_axiom -> ~ hypothesis_of_obtuse_saccheri_quadrilaterals.
Proof.
intros aristotle obtuse.
destruct ex_lambert as [Q' [C' [P [Q HLam]]]].
assert (HObtuse : Obtuse C' P Q) by (apply <- (lam_obtuse__oah Q'); trivial).
assert (HPar : Par_strict Q' Q C' P) by (apply lam__par_strict1423, HLam).
destruct HLam; spliter.
destruct (l10_15 P Q P C') as [A' [HPerp HOS]]; Col.
apply not_col_permutation_1.
apply par_strict_not_col_1 with Q'; Par.
assert_diffs.
assert (HLtA : LtA Q P A' C' P Q) by (apply obtuse_per__lta; Perp).
destruct HLtA as [HLeA HNCongA].
assert (HInAngle : InAngle A' Q P C').
apply lea_in_angle; Side; apply lea_right_comm; trivial.
destruct (segment_construction C' P C' P) as [C [HC1 HC2]].
destruct (segment_construction A' P A' P) as [A [HA1 HA2]].
assert_diffs.
assert (HInAngle1 : InAngle C A P Q).
apply in_angle_reverse with A'; auto.
apply l11_24, in_angle_reverse with C'; auto.
apply l11_24; trivial.
assert (HNCol : ~ Col P C' A').
assert (HNCol1 : ~ Col P C A) by (intro; apply HNCol; ColR).
assert (HNCol2 : ~ Col P Q C) by (intro; apply (par_strict_not_col_2 Q' Q C' P); ColR).
assert (HPer : Per A P Q) by (apply l8_2, per_col with A'; Perp; Col).
assert (HOS1 : OS A P C Q).
apply in_angle_one_side; Col.
apply per_not_col; auto.
destruct (aristotle P Q A P C) as [X [Y]]; Col.
exists A, P, Q; split; Perp; split.
apply inangle__lea; trivial.
intro HCongA.
destruct (conga_cop__or_out_ts A P C Q); CongA; Cop.

*****
H14 : Out P C Q
HCongA : CongA A P C A P Q
HOS1 : OS A P C Q
HPer : Per A P Q
HNCol2 : not (Col P Q C)
HNCol1 : not (Col P C A)
HNCol : not (Col P C' A')
HInAngle1 : InAngle C A P Q
H13 : not (eq P C)
H12 : not (eq P A)
H10 : not (eq C' C)
H9 : not (eq A' A)
HA2 : Cong P A A' P
HA1 : Bet A' P A
A : Tpoint
HC2 : Cong P C C' P
HC1 : Bet C' P C
C : Tpoint
HInAngle : InAngle A' Q P C'
HNCongA : not (CongA Q P A' C' P Q)
HLeA : LeA Q P A' C' P Q
H16 : not (eq Q A')
H11 : not (eq A' P)
H8 : not (eq C' Q)
H7 : not (eq Q' P)
HOS : OS P Q C' A'
HPerp : Perp P Q A' P
A' : Tpoint
HPar : Par_strict Q' Q C' P
HObtuse : Obtuse C' P Q
H6 : Coplanar Q' C' P Q
H5 : Per Q' C' P
H4 : Per Q' Q P
H3 : Per C' Q' Q
H2 : not (eq Q' Q)
H1 : not (eq P Q)
H0 : not (eq C' P)
H : not (eq Q' C')
Q',C',P,Q : Tpoint
obtuse : hypothesis_of_obtuse_saccheri_quadrilaterals
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert_cols; Col.
-----
Lemma aristotle__obtuse_case_elimination : aristotle_s_axiom -> ~ hypothesis_of_obtuse_saccheri_quadrilaterals.
Proof.
intros aristotle obtuse.
destruct ex_lambert as [Q' [C' [P [Q HLam]]]].
assert (HObtuse : Obtuse C' P Q) by (apply <- (lam_obtuse__oah Q'); trivial).
assert (HPar : Par_strict Q' Q C' P) by (apply lam__par_strict1423, HLam).
destruct HLam; spliter.
destruct (l10_15 P Q P C') as [A' [HPerp HOS]]; Col.
apply not_col_permutation_1.
apply par_strict_not_col_1 with Q'; Par.
assert_diffs.
assert (HLtA : LtA Q P A' C' P Q) by (apply obtuse_per__lta; Perp).
destruct HLtA as [HLeA HNCongA].
assert (HInAngle : InAngle A' Q P C').
apply lea_in_angle; Side; apply lea_right_comm; trivial.
destruct (segment_construction C' P C' P) as [C [HC1 HC2]].
destruct (segment_construction A' P A' P) as [A [HA1 HA2]].
assert_diffs.
assert (HInAngle1 : InAngle C A P Q).
apply in_angle_reverse with A'; auto.
apply l11_24, in_angle_reverse with C'; auto.
apply l11_24; trivial.
assert (HNCol : ~ Col P C' A').
assert (HNCol1 : ~ Col P C A) by (intro; apply HNCol; ColR).
assert (HNCol2 : ~ Col P Q C) by (intro; apply (par_strict_not_col_2 Q' Q C' P); ColR).
assert (HPer : Per A P Q) by (apply l8_2, per_col with A'; Perp; Col).
assert (HOS1 : OS A P C Q).
apply in_angle_one_side; Col.
apply per_not_col; auto.
destruct (aristotle P Q A P C) as [X [Y]]; Col.
exists A, P, Q; split; Perp; split.
apply inangle__lea; trivial.
intro HCongA.
destruct (conga_cop__or_out_ts A P C Q); CongA; Cop.
assert_cols; Col.

*****
H14 : TS A P C Q
HCongA : CongA A P C A P Q
HOS1 : OS A P C Q
HPer : Per A P Q
HNCol2 : not (Col P Q C)
HNCol1 : not (Col P C A)
HNCol : not (Col P C' A')
HInAngle1 : InAngle C A P Q
H13 : not (eq P C)
H12 : not (eq P A)
H10 : not (eq C' C)
H9 : not (eq A' A)
HA2 : Cong P A A' P
HA1 : Bet A' P A
A : Tpoint
HC2 : Cong P C C' P
HC1 : Bet C' P C
C : Tpoint
HInAngle : InAngle A' Q P C'
HNCongA : not (CongA Q P A' C' P Q)
HLeA : LeA Q P A' C' P Q
H16 : not (eq Q A')
H11 : not (eq A' P)
H8 : not (eq C' Q)
H7 : not (eq Q' P)
HOS : OS P Q C' A'
HPerp : Perp P Q A' P
A' : Tpoint
HPar : Par_strict Q' Q C' P
HObtuse : Obtuse C' P Q
H6 : Coplanar Q' C' P Q
H5 : Per Q' C' P
H4 : Per Q' Q P
H3 : Per C' Q' Q
H2 : not (eq Q' Q)
H1 : not (eq P Q)
H0 : not (eq C' P)
H : not (eq Q' C')
Q',C',P,Q : Tpoint
obtuse : hypothesis_of_obtuse_saccheri_quadrilaterals
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply (l9_9 A P C Q); trivial.
-----
Lemma aristotle__obtuse_case_elimination : aristotle_s_axiom -> ~ hypothesis_of_obtuse_saccheri_quadrilaterals.
Proof.
intros aristotle obtuse.
destruct ex_lambert as [Q' [C' [P [Q HLam]]]].
assert (HObtuse : Obtuse C' P Q) by (apply <- (lam_obtuse__oah Q'); trivial).
assert (HPar : Par_strict Q' Q C' P) by (apply lam__par_strict1423, HLam).
destruct HLam; spliter.
destruct (l10_15 P Q P C') as [A' [HPerp HOS]]; Col.
apply not_col_permutation_1.
apply par_strict_not_col_1 with Q'; Par.
assert_diffs.
assert (HLtA : LtA Q P A' C' P Q) by (apply obtuse_per__lta; Perp).
destruct HLtA as [HLeA HNCongA].
assert (HInAngle : InAngle A' Q P C').
apply lea_in_angle; Side; apply lea_right_comm; trivial.
destruct (segment_construction C' P C' P) as [C [HC1 HC2]].
destruct (segment_construction A' P A' P) as [A [HA1 HA2]].
assert_diffs.
assert (HInAngle1 : InAngle C A P Q).
apply in_angle_reverse with A'; auto.
apply l11_24, in_angle_reverse with C'; auto.
apply l11_24; trivial.
assert (HNCol : ~ Col P C' A').
assert (HNCol1 : ~ Col P C A) by (intro; apply HNCol; ColR).
assert (HNCol2 : ~ Col P Q C) by (intro; apply (par_strict_not_col_2 Q' Q C' P); ColR).
assert (HPer : Per A P Q) by (apply l8_2, per_col with A'; Perp; Col).
assert (HOS1 : OS A P C Q).
apply in_angle_one_side; Col.
apply per_not_col; auto.
destruct (aristotle P Q A P C) as [X [Y]]; Col.

*****
H14 : and (Out P A X) (and (Out P C Y) (and (Per P X Y) (Lt P Q X Y)))
X,Y : Tpoint
HOS1 : OS A P C Q
HPer : Per A P Q
HNCol2 : not (Col P Q C)
HNCol1 : not (Col P C A)
HNCol : not (Col P C' A')
HInAngle1 : InAngle C A P Q
H13 : not (eq P C)
H12 : not (eq P A)
H10 : not (eq C' C)
H9 : not (eq A' A)
HA2 : Cong P A A' P
HA1 : Bet A' P A
A : Tpoint
HC2 : Cong P C C' P
HC1 : Bet C' P C
C : Tpoint
HInAngle : InAngle A' Q P C'
HNCongA : not (CongA Q P A' C' P Q)
HLeA : LeA Q P A' C' P Q
H16 : not (eq Q A')
H11 : not (eq A' P)
H8 : not (eq C' Q)
H7 : not (eq Q' P)
HOS : OS P Q C' A'
HPerp : Perp P Q A' P
A' : Tpoint
HPar : Par_strict Q' Q C' P
HObtuse : Obtuse C' P Q
H6 : Coplanar Q' C' P Q
H5 : Per Q' C' P
H4 : Per Q' Q P
H3 : Per C' Q' Q
H2 : not (eq Q' Q)
H1 : not (eq P Q)
H0 : not (eq C' P)
H : not (eq Q' C')
Q',C',P,Q : Tpoint
obtuse : hypothesis_of_obtuse_saccheri_quadrilaterals
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
spliter.
-----
Lemma aristotle__obtuse_case_elimination : aristotle_s_axiom -> ~ hypothesis_of_obtuse_saccheri_quadrilaterals.
Proof.
intros aristotle obtuse.
destruct ex_lambert as [Q' [C' [P [Q HLam]]]].
assert (HObtuse : Obtuse C' P Q) by (apply <- (lam_obtuse__oah Q'); trivial).
assert (HPar : Par_strict Q' Q C' P) by (apply lam__par_strict1423, HLam).
destruct HLam; spliter.
destruct (l10_15 P Q P C') as [A' [HPerp HOS]]; Col.
apply not_col_permutation_1.
apply par_strict_not_col_1 with Q'; Par.
assert_diffs.
assert (HLtA : LtA Q P A' C' P Q) by (apply obtuse_per__lta; Perp).
destruct HLtA as [HLeA HNCongA].
assert (HInAngle : InAngle A' Q P C').
apply lea_in_angle; Side; apply lea_right_comm; trivial.
destruct (segment_construction C' P C' P) as [C [HC1 HC2]].
destruct (segment_construction A' P A' P) as [A [HA1 HA2]].
assert_diffs.
assert (HInAngle1 : InAngle C A P Q).
apply in_angle_reverse with A'; auto.
apply l11_24, in_angle_reverse with C'; auto.
apply l11_24; trivial.
assert (HNCol : ~ Col P C' A').
assert (HNCol1 : ~ Col P C A) by (intro; apply HNCol; ColR).
assert (HNCol2 : ~ Col P Q C) by (intro; apply (par_strict_not_col_2 Q' Q C' P); ColR).
assert (HPer : Per A P Q) by (apply l8_2, per_col with A'; Perp; Col).
assert (HOS1 : OS A P C Q).
apply in_angle_one_side; Col.
apply per_not_col; auto.
destruct (aristotle P Q A P C) as [X [Y]]; Col.
spliter.

*****
H18 : Lt P Q X Y
H17 : Per P X Y
H15 : Out P C Y
H14 : Out P A X
X,Y : Tpoint
HOS1 : OS A P C Q
HPer : Per A P Q
HNCol2 : not (Col P Q C)
HNCol1 : not (Col P C A)
HNCol : not (Col P C' A')
HInAngle1 : InAngle C A P Q
H13 : not (eq P C)
H12 : not (eq P A)
H10 : not (eq C' C)
H9 : not (eq A' A)
HA2 : Cong P A A' P
HA1 : Bet A' P A
A : Tpoint
HC2 : Cong P C C' P
HC1 : Bet C' P C
C : Tpoint
HInAngle : InAngle A' Q P C'
HNCongA : not (CongA Q P A' C' P Q)
HLeA : LeA Q P A' C' P Q
H16 : not (eq Q A')
H11 : not (eq A' P)
H8 : not (eq C' Q)
H7 : not (eq Q' P)
HOS : OS P Q C' A'
HPerp : Perp P Q A' P
A' : Tpoint
HPar : Par_strict Q' Q C' P
HObtuse : Obtuse C' P Q
H6 : Coplanar Q' C' P Q
H5 : Per Q' C' P
H4 : Per Q' Q P
H3 : Per C' Q' Q
H2 : not (eq Q' Q)
H1 : not (eq P Q)
H0 : not (eq C' P)
H : not (eq Q' C')
Q',C',P,Q : Tpoint
obtuse : hypothesis_of_obtuse_saccheri_quadrilaterals
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply (not_and_lt P Q X Y).
-----
Lemma aristotle__obtuse_case_elimination : aristotle_s_axiom -> ~ hypothesis_of_obtuse_saccheri_quadrilaterals.
Proof.
intros aristotle obtuse.
destruct ex_lambert as [Q' [C' [P [Q HLam]]]].
assert (HObtuse : Obtuse C' P Q) by (apply <- (lam_obtuse__oah Q'); trivial).
assert (HPar : Par_strict Q' Q C' P) by (apply lam__par_strict1423, HLam).
destruct HLam; spliter.
destruct (l10_15 P Q P C') as [A' [HPerp HOS]]; Col.
apply not_col_permutation_1.
apply par_strict_not_col_1 with Q'; Par.
assert_diffs.
assert (HLtA : LtA Q P A' C' P Q) by (apply obtuse_per__lta; Perp).
destruct HLtA as [HLeA HNCongA].
assert (HInAngle : InAngle A' Q P C').
apply lea_in_angle; Side; apply lea_right_comm; trivial.
destruct (segment_construction C' P C' P) as [C [HC1 HC2]].
destruct (segment_construction A' P A' P) as [A [HA1 HA2]].
assert_diffs.
assert (HInAngle1 : InAngle C A P Q).
apply in_angle_reverse with A'; auto.
apply l11_24, in_angle_reverse with C'; auto.
apply l11_24; trivial.
assert (HNCol : ~ Col P C' A').
assert (HNCol1 : ~ Col P C A) by (intro; apply HNCol; ColR).
assert (HNCol2 : ~ Col P Q C) by (intro; apply (par_strict_not_col_2 Q' Q C' P); ColR).
assert (HPer : Per A P Q) by (apply l8_2, per_col with A'; Perp; Col).
assert (HOS1 : OS A P C Q).
apply in_angle_one_side; Col.
apply per_not_col; auto.
destruct (aristotle P Q A P C) as [X [Y]]; Col.
spliter.
apply (not_and_lt P Q X Y).

*****
H18 : Lt P Q X Y
H17 : Per P X Y
H15 : Out P C Y
H14 : Out P A X
X,Y : Tpoint
HOS1 : OS A P C Q
HPer : Per A P Q
HNCol2 : not (Col P Q C)
HNCol1 : not (Col P C A)
HNCol : not (Col P C' A')
HInAngle1 : InAngle C A P Q
H13 : not (eq P C)
H12 : not (eq P A)
H10 : not (eq C' C)
H9 : not (eq A' A)
HA2 : Cong P A A' P
HA1 : Bet A' P A
A : Tpoint
HC2 : Cong P C C' P
HC1 : Bet C' P C
C : Tpoint
HInAngle : InAngle A' Q P C'
HNCongA : not (CongA Q P A' C' P Q)
HLeA : LeA Q P A' C' P Q
H16 : not (eq Q A')
H11 : not (eq A' P)
H8 : not (eq C' Q)
H7 : not (eq Q' P)
HOS : OS P Q C' A'
HPerp : Perp P Q A' P
A' : Tpoint
HPar : Par_strict Q' Q C' P
HObtuse : Obtuse C' P Q
H6 : Coplanar Q' C' P Q
H5 : Per Q' C' P
H4 : Per Q' Q P
H3 : Per C' Q' Q
H2 : not (eq Q' Q)
H1 : not (eq P Q)
H0 : not (eq C' P)
H : not (eq Q' C')
Q',C',P,Q : Tpoint
obtuse : hypothesis_of_obtuse_saccheri_quadrilaterals
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Lt P Q X Y) (Lt X Y P Q)
+++++
split; trivial.
-----
Lemma aristotle__obtuse_case_elimination : aristotle_s_axiom -> ~ hypothesis_of_obtuse_saccheri_quadrilaterals.
Proof.
intros aristotle obtuse.
destruct ex_lambert as [Q' [C' [P [Q HLam]]]].
assert (HObtuse : Obtuse C' P Q) by (apply <- (lam_obtuse__oah Q'); trivial).
assert (HPar : Par_strict Q' Q C' P) by (apply lam__par_strict1423, HLam).
destruct HLam; spliter.
destruct (l10_15 P Q P C') as [A' [HPerp HOS]]; Col.
apply not_col_permutation_1.
apply par_strict_not_col_1 with Q'; Par.
assert_diffs.
assert (HLtA : LtA Q P A' C' P Q) by (apply obtuse_per__lta; Perp).
destruct HLtA as [HLeA HNCongA].
assert (HInAngle : InAngle A' Q P C').
apply lea_in_angle; Side; apply lea_right_comm; trivial.
destruct (segment_construction C' P C' P) as [C [HC1 HC2]].
destruct (segment_construction A' P A' P) as [A [HA1 HA2]].
assert_diffs.
assert (HInAngle1 : InAngle C A P Q).
apply in_angle_reverse with A'; auto.
apply l11_24, in_angle_reverse with C'; auto.
apply l11_24; trivial.
assert (HNCol : ~ Col P C' A').
assert (HNCol1 : ~ Col P C A) by (intro; apply HNCol; ColR).
assert (HNCol2 : ~ Col P Q C) by (intro; apply (par_strict_not_col_2 Q' Q C' P); ColR).
assert (HPer : Per A P Q) by (apply l8_2, per_col with A'; Perp; Col).
assert (HOS1 : OS A P C Q).
apply in_angle_one_side; Col.
apply per_not_col; auto.
destruct (aristotle P Q A P C) as [X [Y]]; Col.
spliter.
apply (not_and_lt P Q X Y).
split; trivial.

*****
H18 : Lt P Q X Y
H17 : Per P X Y
H15 : Out P C Y
H14 : Out P A X
X,Y : Tpoint
HOS1 : OS A P C Q
HPer : Per A P Q
HNCol2 : not (Col P Q C)
HNCol1 : not (Col P C A)
HNCol : not (Col P C' A')
HInAngle1 : InAngle C A P Q
H13 : not (eq P C)
H12 : not (eq P A)
H10 : not (eq C' C)
H9 : not (eq A' A)
HA2 : Cong P A A' P
HA1 : Bet A' P A
A : Tpoint
HC2 : Cong P C C' P
HC1 : Bet C' P C
C : Tpoint
HInAngle : InAngle A' Q P C'
HNCongA : not (CongA Q P A' C' P Q)
HLeA : LeA Q P A' C' P Q
H16 : not (eq Q A')
H11 : not (eq A' P)
H8 : not (eq C' Q)
H7 : not (eq Q' P)
HOS : OS P Q C' A'
HPerp : Perp P Q A' P
A' : Tpoint
HPar : Par_strict Q' Q C' P
HObtuse : Obtuse C' P Q
H6 : Coplanar Q' C' P Q
H5 : Per Q' C' P
H4 : Per Q' Q P
H3 : Per C' Q' Q
H2 : not (eq Q' Q)
H1 : not (eq P Q)
H0 : not (eq C' P)
H : not (eq Q' C')
Q',C',P,Q : Tpoint
obtuse : hypothesis_of_obtuse_saccheri_quadrilaterals
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Lt X Y P Q
+++++
destruct (l8_18_existence P Q Y) as [Z [HZ1 HZ2]].
-----
Lemma aristotle__obtuse_case_elimination : aristotle_s_axiom -> ~ hypothesis_of_obtuse_saccheri_quadrilaterals.
Proof.
intros aristotle obtuse.
destruct ex_lambert as [Q' [C' [P [Q HLam]]]].
assert (HObtuse : Obtuse C' P Q) by (apply <- (lam_obtuse__oah Q'); trivial).
assert (HPar : Par_strict Q' Q C' P) by (apply lam__par_strict1423, HLam).
destruct HLam; spliter.
destruct (l10_15 P Q P C') as [A' [HPerp HOS]]; Col.
apply not_col_permutation_1.
apply par_strict_not_col_1 with Q'; Par.
assert_diffs.
assert (HLtA : LtA Q P A' C' P Q) by (apply obtuse_per__lta; Perp).
destruct HLtA as [HLeA HNCongA].
assert (HInAngle : InAngle A' Q P C').
apply lea_in_angle; Side; apply lea_right_comm; trivial.
destruct (segment_construction C' P C' P) as [C [HC1 HC2]].
destruct (segment_construction A' P A' P) as [A [HA1 HA2]].
assert_diffs.
assert (HInAngle1 : InAngle C A P Q).
apply in_angle_reverse with A'; auto.
apply l11_24, in_angle_reverse with C'; auto.
apply l11_24; trivial.
assert (HNCol : ~ Col P C' A').
assert (HNCol1 : ~ Col P C A) by (intro; apply HNCol; ColR).
assert (HNCol2 : ~ Col P Q C) by (intro; apply (par_strict_not_col_2 Q' Q C' P); ColR).
assert (HPer : Per A P Q) by (apply l8_2, per_col with A'; Perp; Col).
assert (HOS1 : OS A P C Q).
apply in_angle_one_side; Col.
apply per_not_col; auto.
destruct (aristotle P Q A P C) as [X [Y]]; Col.
spliter.
apply (not_and_lt P Q X Y).
split; trivial.
destruct (l8_18_existence P Q Y) as [Z [HZ1 HZ2]].

*****
H18 : Lt P Q X Y
H17 : Per P X Y
H15 : Out P C Y
H14 : Out P A X
X,Y : Tpoint
HOS1 : OS A P C Q
HPer : Per A P Q
HNCol2 : not (Col P Q C)
HNCol1 : not (Col P C A)
HNCol : not (Col P C' A')
HInAngle1 : InAngle C A P Q
H13 : not (eq P C)
H12 : not (eq P A)
H10 : not (eq C' C)
H9 : not (eq A' A)
HA2 : Cong P A A' P
HA1 : Bet A' P A
A : Tpoint
HC2 : Cong P C C' P
HC1 : Bet C' P C
C : Tpoint
HInAngle : InAngle A' Q P C'
HNCongA : not (CongA Q P A' C' P Q)
HLeA : LeA Q P A' C' P Q
H16 : not (eq Q A')
H11 : not (eq A' P)
H8 : not (eq C' Q)
H7 : not (eq Q' P)
HOS : OS P Q C' A'
HPerp : Perp P Q A' P
A' : Tpoint
HPar : Par_strict Q' Q C' P
HObtuse : Obtuse C' P Q
H6 : Coplanar Q' C' P Q
H5 : Per Q' C' P
H4 : Per Q' Q P
H3 : Per C' Q' Q
H2 : not (eq Q' Q)
H1 : not (eq P Q)
H0 : not (eq C' P)
H : not (eq Q' C')
Q',C',P,Q : Tpoint
obtuse : hypothesis_of_obtuse_saccheri_quadrilaterals
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col P Q Y)
+++++
intro; assert_diffs; apply HNCol2; ColR.
-----
Lemma aristotle__obtuse_case_elimination : aristotle_s_axiom -> ~ hypothesis_of_obtuse_saccheri_quadrilaterals.
Proof.
intros aristotle obtuse.
destruct ex_lambert as [Q' [C' [P [Q HLam]]]].
assert (HObtuse : Obtuse C' P Q) by (apply <- (lam_obtuse__oah Q'); trivial).
assert (HPar : Par_strict Q' Q C' P) by (apply lam__par_strict1423, HLam).
destruct HLam; spliter.
destruct (l10_15 P Q P C') as [A' [HPerp HOS]]; Col.
apply not_col_permutation_1.
apply par_strict_not_col_1 with Q'; Par.
assert_diffs.
assert (HLtA : LtA Q P A' C' P Q) by (apply obtuse_per__lta; Perp).
destruct HLtA as [HLeA HNCongA].
assert (HInAngle : InAngle A' Q P C').
apply lea_in_angle; Side; apply lea_right_comm; trivial.
destruct (segment_construction C' P C' P) as [C [HC1 HC2]].
destruct (segment_construction A' P A' P) as [A [HA1 HA2]].
assert_diffs.
assert (HInAngle1 : InAngle C A P Q).
apply in_angle_reverse with A'; auto.
apply l11_24, in_angle_reverse with C'; auto.
apply l11_24; trivial.
assert (HNCol : ~ Col P C' A').
assert (HNCol1 : ~ Col P C A) by (intro; apply HNCol; ColR).
assert (HNCol2 : ~ Col P Q C) by (intro; apply (par_strict_not_col_2 Q' Q C' P); ColR).
assert (HPer : Per A P Q) by (apply l8_2, per_col with A'; Perp; Col).
assert (HOS1 : OS A P C Q).
apply in_angle_one_side; Col.
apply per_not_col; auto.
destruct (aristotle P Q A P C) as [X [Y]]; Col.
spliter.
apply (not_and_lt P Q X Y).
split; trivial.
destruct (l8_18_existence P Q Y) as [Z [HZ1 HZ2]].
intro; assert_diffs; apply HNCol2; ColR.

*****
HZ2 : Perp P Q Y Z
HZ1 : Col P Q Z
Z : Tpoint
H18 : Lt P Q X Y
H17 : Per P X Y
H15 : Out P C Y
H14 : Out P A X
X,Y : Tpoint
HOS1 : OS A P C Q
HPer : Per A P Q
HNCol2 : not (Col P Q C)
HNCol1 : not (Col P C A)
HNCol : not (Col P C' A')
HInAngle1 : InAngle C A P Q
H13 : not (eq P C)
H12 : not (eq P A)
H10 : not (eq C' C)
H9 : not (eq A' A)
HA2 : Cong P A A' P
HA1 : Bet A' P A
A : Tpoint
HC2 : Cong P C C' P
HC1 : Bet C' P C
C : Tpoint
HInAngle : InAngle A' Q P C'
HNCongA : not (CongA Q P A' C' P Q)
HLeA : LeA Q P A' C' P Q
H16 : not (eq Q A')
H11 : not (eq A' P)
H8 : not (eq C' Q)
H7 : not (eq Q' P)
HOS : OS P Q C' A'
HPerp : Perp P Q A' P
A' : Tpoint
HPar : Par_strict Q' Q C' P
HObtuse : Obtuse C' P Q
H6 : Coplanar Q' C' P Q
H5 : Per Q' C' P
H4 : Per Q' Q P
H3 : Per C' Q' Q
H2 : not (eq Q' Q)
H1 : not (eq P Q)
H0 : not (eq C' P)
H : not (eq Q' C')
Q',C',P,Q : Tpoint
obtuse : hypothesis_of_obtuse_saccheri_quadrilaterals
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Lt X Y P Q
+++++
apply lt_transitivity with P Z.
-----
Lemma aristotle__obtuse_case_elimination : aristotle_s_axiom -> ~ hypothesis_of_obtuse_saccheri_quadrilaterals.
Proof.
intros aristotle obtuse.
destruct ex_lambert as [Q' [C' [P [Q HLam]]]].
assert (HObtuse : Obtuse C' P Q) by (apply <- (lam_obtuse__oah Q'); trivial).
assert (HPar : Par_strict Q' Q C' P) by (apply lam__par_strict1423, HLam).
destruct HLam; spliter.
destruct (l10_15 P Q P C') as [A' [HPerp HOS]]; Col.
apply not_col_permutation_1.
apply par_strict_not_col_1 with Q'; Par.
assert_diffs.
assert (HLtA : LtA Q P A' C' P Q) by (apply obtuse_per__lta; Perp).
destruct HLtA as [HLeA HNCongA].
assert (HInAngle : InAngle A' Q P C').
apply lea_in_angle; Side; apply lea_right_comm; trivial.
destruct (segment_construction C' P C' P) as [C [HC1 HC2]].
destruct (segment_construction A' P A' P) as [A [HA1 HA2]].
assert_diffs.
assert (HInAngle1 : InAngle C A P Q).
apply in_angle_reverse with A'; auto.
apply l11_24, in_angle_reverse with C'; auto.
apply l11_24; trivial.
assert (HNCol : ~ Col P C' A').
assert (HNCol1 : ~ Col P C A) by (intro; apply HNCol; ColR).
assert (HNCol2 : ~ Col P Q C) by (intro; apply (par_strict_not_col_2 Q' Q C' P); ColR).
assert (HPer : Per A P Q) by (apply l8_2, per_col with A'; Perp; Col).
assert (HOS1 : OS A P C Q).
apply in_angle_one_side; Col.
apply per_not_col; auto.
destruct (aristotle P Q A P C) as [X [Y]]; Col.
spliter.
apply (not_and_lt P Q X Y).
split; trivial.
destruct (l8_18_existence P Q Y) as [Z [HZ1 HZ2]].
intro; assert_diffs; apply HNCol2; ColR.
apply lt_transitivity with P Z.

*****
HZ2 : Perp P Q Y Z
HZ1 : Col P Q Z
Z : Tpoint
H18 : Lt P Q X Y
H17 : Per P X Y
H15 : Out P C Y
H14 : Out P A X
X,Y : Tpoint
HOS1 : OS A P C Q
HPer : Per A P Q
HNCol2 : not (Col P Q C)
HNCol1 : not (Col P C A)
HNCol : not (Col P C' A')
HInAngle1 : InAngle C A P Q
H13 : not (eq P C)
H12 : not (eq P A)
H10 : not (eq C' C)
H9 : not (eq A' A)
HA2 : Cong P A A' P
HA1 : Bet A' P A
A : Tpoint
HC2 : Cong P C C' P
HC1 : Bet C' P C
C : Tpoint
HInAngle : InAngle A' Q P C'
HNCongA : not (CongA Q P A' C' P Q)
HLeA : LeA Q P A' C' P Q
H16 : not (eq Q A')
H11 : not (eq A' P)
H8 : not (eq C' Q)
H7 : not (eq Q' P)
HOS : OS P Q C' A'
HPerp : Perp P Q A' P
A' : Tpoint
HPar : Par_strict Q' Q C' P
HObtuse : Obtuse C' P Q
H6 : Coplanar Q' C' P Q
H5 : Per Q' C' P
H4 : Per Q' Q P
H3 : Per C' Q' Q
H2 : not (eq Q' Q)
H1 : not (eq P Q)
H0 : not (eq C' P)
H : not (eq Q' C')
Q',C',P,Q : Tpoint
obtuse : hypothesis_of_obtuse_saccheri_quadrilaterals
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Lt X Y P Z
+++++
-
-----
Lemma aristotle__obtuse_case_elimination : aristotle_s_axiom -> ~ hypothesis_of_obtuse_saccheri_quadrilaterals.
Proof.
intros aristotle obtuse.
destruct ex_lambert as [Q' [C' [P [Q HLam]]]].
assert (HObtuse : Obtuse C' P Q) by (apply <- (lam_obtuse__oah Q'); trivial).
assert (HPar : Par_strict Q' Q C' P) by (apply lam__par_strict1423, HLam).
destruct HLam; spliter.
destruct (l10_15 P Q P C') as [A' [HPerp HOS]]; Col.
apply not_col_permutation_1.
apply par_strict_not_col_1 with Q'; Par.
assert_diffs.
assert (HLtA : LtA Q P A' C' P Q) by (apply obtuse_per__lta; Perp).
destruct HLtA as [HLeA HNCongA].
assert (HInAngle : InAngle A' Q P C').
apply lea_in_angle; Side; apply lea_right_comm; trivial.
destruct (segment_construction C' P C' P) as [C [HC1 HC2]].
destruct (segment_construction A' P A' P) as [A [HA1 HA2]].
assert_diffs.
assert (HInAngle1 : InAngle C A P Q).
apply in_angle_reverse with A'; auto.
apply l11_24, in_angle_reverse with C'; auto.
apply l11_24; trivial.
assert (HNCol : ~ Col P C' A').
assert (HNCol1 : ~ Col P C A) by (intro; apply HNCol; ColR).
assert (HNCol2 : ~ Col P Q C) by (intro; apply (par_strict_not_col_2 Q' Q C' P); ColR).
assert (HPer : Per A P Q) by (apply l8_2, per_col with A'; Perp; Col).
assert (HOS1 : OS A P C Q).
apply in_angle_one_side; Col.
apply per_not_col; auto.
destruct (aristotle P Q A P C) as [X [Y]]; Col.
spliter.
apply (not_and_lt P Q X Y).
split; trivial.
destruct (l8_18_existence P Q Y) as [Z [HZ1 HZ2]].
intro; assert_diffs; apply HNCol2; ColR.
apply lt_transitivity with P Z.
-

*****
HZ2 : Perp P Q Y Z
HZ1 : Col P Q Z
Z : Tpoint
H18 : Lt P Q X Y
H17 : Per P X Y
H15 : Out P C Y
H14 : Out P A X
X,Y : Tpoint
HOS1 : OS A P C Q
HPer : Per A P Q
HNCol2 : not (Col P Q C)
HNCol1 : not (Col P C A)
HNCol : not (Col P C' A')
HInAngle1 : InAngle C A P Q
H13 : not (eq P C)
H12 : not (eq P A)
H10 : not (eq C' C)
H9 : not (eq A' A)
HA2 : Cong P A A' P
HA1 : Bet A' P A
A : Tpoint
HC2 : Cong P C C' P
HC1 : Bet C' P C
C : Tpoint
HInAngle : InAngle A' Q P C'
HNCongA : not (CongA Q P A' C' P Q)
HLeA : LeA Q P A' C' P Q
H16 : not (eq Q A')
H11 : not (eq A' P)
H8 : not (eq C' Q)
H7 : not (eq Q' P)
HOS : OS P Q C' A'
HPerp : Perp P Q A' P
A' : Tpoint
HPar : Par_strict Q' Q C' P
HObtuse : Obtuse C' P Q
H6 : Coplanar Q' C' P Q
H5 : Per Q' C' P
H4 : Per Q' Q P
H3 : Per C' Q' Q
H2 : not (eq Q' Q)
H1 : not (eq P Q)
H0 : not (eq C' P)
H : not (eq Q' C')
Q',C',P,Q : Tpoint
obtuse : hypothesis_of_obtuse_saccheri_quadrilaterals
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Lt X Y P Z
+++++
assert (P <> Z).
-----
Lemma aristotle__obtuse_case_elimination : aristotle_s_axiom -> ~ hypothesis_of_obtuse_saccheri_quadrilaterals.
Proof.
intros aristotle obtuse.
destruct ex_lambert as [Q' [C' [P [Q HLam]]]].
assert (HObtuse : Obtuse C' P Q) by (apply <- (lam_obtuse__oah Q'); trivial).
assert (HPar : Par_strict Q' Q C' P) by (apply lam__par_strict1423, HLam).
destruct HLam; spliter.
destruct (l10_15 P Q P C') as [A' [HPerp HOS]]; Col.
apply not_col_permutation_1.
apply par_strict_not_col_1 with Q'; Par.
assert_diffs.
assert (HLtA : LtA Q P A' C' P Q) by (apply obtuse_per__lta; Perp).
destruct HLtA as [HLeA HNCongA].
assert (HInAngle : InAngle A' Q P C').
apply lea_in_angle; Side; apply lea_right_comm; trivial.
destruct (segment_construction C' P C' P) as [C [HC1 HC2]].
destruct (segment_construction A' P A' P) as [A [HA1 HA2]].
assert_diffs.
assert (HInAngle1 : InAngle C A P Q).
apply in_angle_reverse with A'; auto.
apply l11_24, in_angle_reverse with C'; auto.
apply l11_24; trivial.
assert (HNCol : ~ Col P C' A').
assert (HNCol1 : ~ Col P C A) by (intro; apply HNCol; ColR).
assert (HNCol2 : ~ Col P Q C) by (intro; apply (par_strict_not_col_2 Q' Q C' P); ColR).
assert (HPer : Per A P Q) by (apply l8_2, per_col with A'; Perp; Col).
assert (HOS1 : OS A P C Q).
apply in_angle_one_side; Col.
apply per_not_col; auto.
destruct (aristotle P Q A P C) as [X [Y]]; Col.
spliter.
apply (not_and_lt P Q X Y).
split; trivial.
destruct (l8_18_existence P Q Y) as [Z [HZ1 HZ2]].
intro; assert_diffs; apply HNCol2; ColR.
apply lt_transitivity with P Z.
-
assert (P <> Z).

*****
HZ2 : Perp P Q Y Z
HZ1 : Col P Q Z
Z : Tpoint
H18 : Lt P Q X Y
H17 : Per P X Y
H15 : Out P C Y
H14 : Out P A X
X,Y : Tpoint
HOS1 : OS A P C Q
HPer : Per A P Q
HNCol2 : not (Col P Q C)
HNCol1 : not (Col P C A)
HNCol : not (Col P C' A')
HInAngle1 : InAngle C A P Q
H13 : not (eq P C)
H12 : not (eq P A)
H10 : not (eq C' C)
H9 : not (eq A' A)
HA2 : Cong P A A' P
HA1 : Bet A' P A
A : Tpoint
HC2 : Cong P C C' P
HC1 : Bet C' P C
C : Tpoint
HInAngle : InAngle A' Q P C'
HNCongA : not (CongA Q P A' C' P Q)
HLeA : LeA Q P A' C' P Q
H16 : not (eq Q A')
H11 : not (eq A' P)
H8 : not (eq C' Q)
H7 : not (eq Q' P)
HOS : OS P Q C' A'
HPerp : Perp P Q A' P
A' : Tpoint
HPar : Par_strict Q' Q C' P
HObtuse : Obtuse C' P Q
H6 : Coplanar Q' C' P Q
H5 : Per Q' C' P
H4 : Per Q' Q P
H3 : Per C' Q' Q
H2 : not (eq Q' Q)
H1 : not (eq P Q)
H0 : not (eq C' P)
H : not (eq Q' C')
Q',C',P,Q : Tpoint
obtuse : hypothesis_of_obtuse_saccheri_quadrilaterals
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq P Z)
+++++
intro; subst Z.
-----
Lemma aristotle__obtuse_case_elimination : aristotle_s_axiom -> ~ hypothesis_of_obtuse_saccheri_quadrilaterals.
Proof.
intros aristotle obtuse.
destruct ex_lambert as [Q' [C' [P [Q HLam]]]].
assert (HObtuse : Obtuse C' P Q) by (apply <- (lam_obtuse__oah Q'); trivial).
assert (HPar : Par_strict Q' Q C' P) by (apply lam__par_strict1423, HLam).
destruct HLam; spliter.
destruct (l10_15 P Q P C') as [A' [HPerp HOS]]; Col.
apply not_col_permutation_1.
apply par_strict_not_col_1 with Q'; Par.
assert_diffs.
assert (HLtA : LtA Q P A' C' P Q) by (apply obtuse_per__lta; Perp).
destruct HLtA as [HLeA HNCongA].
assert (HInAngle : InAngle A' Q P C').
apply lea_in_angle; Side; apply lea_right_comm; trivial.
destruct (segment_construction C' P C' P) as [C [HC1 HC2]].
destruct (segment_construction A' P A' P) as [A [HA1 HA2]].
assert_diffs.
assert (HInAngle1 : InAngle C A P Q).
apply in_angle_reverse with A'; auto.
apply l11_24, in_angle_reverse with C'; auto.
apply l11_24; trivial.
assert (HNCol : ~ Col P C' A').
assert (HNCol1 : ~ Col P C A) by (intro; apply HNCol; ColR).
assert (HNCol2 : ~ Col P Q C) by (intro; apply (par_strict_not_col_2 Q' Q C' P); ColR).
assert (HPer : Per A P Q) by (apply l8_2, per_col with A'; Perp; Col).
assert (HOS1 : OS A P C Q).
apply in_angle_one_side; Col.
apply per_not_col; auto.
destruct (aristotle P Q A P C) as [X [Y]]; Col.
spliter.
apply (not_and_lt P Q X Y).
split; trivial.
destruct (l8_18_existence P Q Y) as [Z [HZ1 HZ2]].
intro; assert_diffs; apply HNCol2; ColR.
apply lt_transitivity with P Z.
-
assert (P <> Z).
intro; subst Z.

*****
HZ1 : Col P Q P
HZ2 : Perp P Q Y P
H18 : Lt P Q X Y
H17 : Per P X Y
H15 : Out P C Y
H14 : Out P A X
X,Y : Tpoint
HOS1 : OS A P C Q
HPer : Per A P Q
HNCol2 : not (Col P Q C)
HNCol1 : not (Col P C A)
HNCol : not (Col P C' A')
HInAngle1 : InAngle C A P Q
H13 : not (eq P C)
H12 : not (eq P A)
H10 : not (eq C' C)
H9 : not (eq A' A)
HA2 : Cong P A A' P
HA1 : Bet A' P A
A : Tpoint
HC2 : Cong P C C' P
HC1 : Bet C' P C
C : Tpoint
HInAngle : InAngle A' Q P C'
HNCongA : not (CongA Q P A' C' P Q)
HLeA : LeA Q P A' C' P Q
H16 : not (eq Q A')
H11 : not (eq A' P)
H8 : not (eq C' Q)
H7 : not (eq Q' P)
HOS : OS P Q C' A'
HPerp : Perp P Q A' P
A' : Tpoint
HPar : Par_strict Q' Q C' P
HObtuse : Obtuse C' P Q
H6 : Coplanar Q' C' P Q
H5 : Per Q' C' P
H4 : Per Q' Q P
H3 : Per C' Q' Q
H2 : not (eq Q' Q)
H1 : not (eq P Q)
H0 : not (eq C' P)
H : not (eq Q' C')
Q',C',P,Q : Tpoint
obtuse : hypothesis_of_obtuse_saccheri_quadrilaterals
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert_diffs.
-----
Lemma aristotle__obtuse_case_elimination : aristotle_s_axiom -> ~ hypothesis_of_obtuse_saccheri_quadrilaterals.
Proof.
intros aristotle obtuse.
destruct ex_lambert as [Q' [C' [P [Q HLam]]]].
assert (HObtuse : Obtuse C' P Q) by (apply <- (lam_obtuse__oah Q'); trivial).
assert (HPar : Par_strict Q' Q C' P) by (apply lam__par_strict1423, HLam).
destruct HLam; spliter.
destruct (l10_15 P Q P C') as [A' [HPerp HOS]]; Col.
apply not_col_permutation_1.
apply par_strict_not_col_1 with Q'; Par.
assert_diffs.
assert (HLtA : LtA Q P A' C' P Q) by (apply obtuse_per__lta; Perp).
destruct HLtA as [HLeA HNCongA].
assert (HInAngle : InAngle A' Q P C').
apply lea_in_angle; Side; apply lea_right_comm; trivial.
destruct (segment_construction C' P C' P) as [C [HC1 HC2]].
destruct (segment_construction A' P A' P) as [A [HA1 HA2]].
assert_diffs.
assert (HInAngle1 : InAngle C A P Q).
apply in_angle_reverse with A'; auto.
apply l11_24, in_angle_reverse with C'; auto.
apply l11_24; trivial.
assert (HNCol : ~ Col P C' A').
assert (HNCol1 : ~ Col P C A) by (intro; apply HNCol; ColR).
assert (HNCol2 : ~ Col P Q C) by (intro; apply (par_strict_not_col_2 Q' Q C' P); ColR).
assert (HPer : Per A P Q) by (apply l8_2, per_col with A'; Perp; Col).
assert (HOS1 : OS A P C Q).
apply in_angle_one_side; Col.
apply per_not_col; auto.
destruct (aristotle P Q A P C) as [X [Y]]; Col.
spliter.
apply (not_and_lt P Q X Y).
split; trivial.
destruct (l8_18_existence P Q Y) as [Z [HZ1 HZ2]].
intro; assert_diffs; apply HNCol2; ColR.
apply lt_transitivity with P Z.
-
assert (P <> Z).
intro; subst Z.
assert_diffs.

*****
H27 : not (eq X P)
H24 : not (eq P Y)
H20 : not (eq A Q)
H19 : not (eq X Y)
H23 : not (eq C' A')
H22 : not (eq C A)
H21 : not (eq Q C)
HZ1 : Col P Q P
HZ2 : Perp P Q Y P
H18 : Lt P Q X Y
H17 : Per P X Y
H15 : Out P C Y
H14 : Out P A X
X,Y : Tpoint
HOS1 : OS A P C Q
HPer : Per A P Q
HNCol2 : not (Col P Q C)
HNCol1 : not (Col P C A)
HNCol : not (Col P C' A')
HInAngle1 : InAngle C A P Q
H13 : not (eq P C)
H12 : not (eq P A)
H10 : not (eq C' C)
H9 : not (eq A' A)
HA2 : Cong P A A' P
HA1 : Bet A' P A
A : Tpoint
HC2 : Cong P C C' P
HC1 : Bet C' P C
C : Tpoint
HInAngle : InAngle A' Q P C'
HNCongA : not (CongA Q P A' C' P Q)
HLeA : LeA Q P A' C' P Q
H16 : not (eq Q A')
H11 : not (eq A' P)
H8 : not (eq C' Q)
H7 : not (eq Q' P)
HOS : OS P Q C' A'
HPerp : Perp P Q A' P
A' : Tpoint
HPar : Par_strict Q' Q C' P
HObtuse : Obtuse C' P Q
H6 : Coplanar Q' C' P Q
H5 : Per Q' C' P
H4 : Per Q' Q P
H3 : Per C' Q' Q
H2 : not (eq Q' Q)
H1 : not (eq P Q)
H0 : not (eq C' P)
H : not (eq Q' C')
Q',C',P,Q : Tpoint
obtuse : hypothesis_of_obtuse_saccheri_quadrilaterals
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert (Per Q P C) by (apply per_col with Y; Col; Perp).
-----
Lemma aristotle__obtuse_case_elimination : aristotle_s_axiom -> ~ hypothesis_of_obtuse_saccheri_quadrilaterals.
Proof.
intros aristotle obtuse.
destruct ex_lambert as [Q' [C' [P [Q HLam]]]].
assert (HObtuse : Obtuse C' P Q) by (apply <- (lam_obtuse__oah Q'); trivial).
assert (HPar : Par_strict Q' Q C' P) by (apply lam__par_strict1423, HLam).
destruct HLam; spliter.
destruct (l10_15 P Q P C') as [A' [HPerp HOS]]; Col.
apply not_col_permutation_1.
apply par_strict_not_col_1 with Q'; Par.
assert_diffs.
assert (HLtA : LtA Q P A' C' P Q) by (apply obtuse_per__lta; Perp).
destruct HLtA as [HLeA HNCongA].
assert (HInAngle : InAngle A' Q P C').
apply lea_in_angle; Side; apply lea_right_comm; trivial.
destruct (segment_construction C' P C' P) as [C [HC1 HC2]].
destruct (segment_construction A' P A' P) as [A [HA1 HA2]].
assert_diffs.
assert (HInAngle1 : InAngle C A P Q).
apply in_angle_reverse with A'; auto.
apply l11_24, in_angle_reverse with C'; auto.
apply l11_24; trivial.
assert (HNCol : ~ Col P C' A').
assert (HNCol1 : ~ Col P C A) by (intro; apply HNCol; ColR).
assert (HNCol2 : ~ Col P Q C) by (intro; apply (par_strict_not_col_2 Q' Q C' P); ColR).
assert (HPer : Per A P Q) by (apply l8_2, per_col with A'; Perp; Col).
assert (HOS1 : OS A P C Q).
apply in_angle_one_side; Col.
apply per_not_col; auto.
destruct (aristotle P Q A P C) as [X [Y]]; Col.
spliter.
apply (not_and_lt P Q X Y).
split; trivial.
destruct (l8_18_existence P Q Y) as [Z [HZ1 HZ2]].
intro; assert_diffs; apply HNCol2; ColR.
apply lt_transitivity with P Z.
-
assert (P <> Z).
intro; subst Z.
assert_diffs.
assert (Per Q P C) by (apply per_col with Y; Col; Perp).

*****
H25 : Per Q P C
H27 : not (eq X P)
H24 : not (eq P Y)
H20 : not (eq A Q)
H19 : not (eq X Y)
H23 : not (eq C' A')
H22 : not (eq C A)
H21 : not (eq Q C)
HZ1 : Col P Q P
HZ2 : Perp P Q Y P
H18 : Lt P Q X Y
H17 : Per P X Y
H15 : Out P C Y
H14 : Out P A X
X,Y : Tpoint
HOS1 : OS A P C Q
HPer : Per A P Q
HNCol2 : not (Col P Q C)
HNCol1 : not (Col P C A)
HNCol : not (Col P C' A')
HInAngle1 : InAngle C A P Q
H13 : not (eq P C)
H12 : not (eq P A)
H10 : not (eq C' C)
H9 : not (eq A' A)
HA2 : Cong P A A' P
HA1 : Bet A' P A
A : Tpoint
HC2 : Cong P C C' P
HC1 : Bet C' P C
C : Tpoint
HInAngle : InAngle A' Q P C'
HNCongA : not (CongA Q P A' C' P Q)
HLeA : LeA Q P A' C' P Q
H16 : not (eq Q A')
H11 : not (eq A' P)
H8 : not (eq C' Q)
H7 : not (eq Q' P)
HOS : OS P Q C' A'
HPerp : Perp P Q A' P
A' : Tpoint
HPar : Par_strict Q' Q C' P
HObtuse : Obtuse C' P Q
H6 : Coplanar Q' C' P Q
H5 : Per Q' C' P
H4 : Per Q' Q P
H3 : Per C' Q' Q
H2 : not (eq Q' Q)
H1 : not (eq P Q)
H0 : not (eq C' P)
H : not (eq Q' C')
Q',C',P,Q : Tpoint
obtuse : hypothesis_of_obtuse_saccheri_quadrilaterals
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply HNCol1, cop_perp2__col with P Q; Perp; Cop.
-----
Lemma aristotle__obtuse_case_elimination : aristotle_s_axiom -> ~ hypothesis_of_obtuse_saccheri_quadrilaterals.
Proof.
intros aristotle obtuse.
destruct ex_lambert as [Q' [C' [P [Q HLam]]]].
assert (HObtuse : Obtuse C' P Q) by (apply <- (lam_obtuse__oah Q'); trivial).
assert (HPar : Par_strict Q' Q C' P) by (apply lam__par_strict1423, HLam).
destruct HLam; spliter.
destruct (l10_15 P Q P C') as [A' [HPerp HOS]]; Col.
apply not_col_permutation_1.
apply par_strict_not_col_1 with Q'; Par.
assert_diffs.
assert (HLtA : LtA Q P A' C' P Q) by (apply obtuse_per__lta; Perp).
destruct HLtA as [HLeA HNCongA].
assert (HInAngle : InAngle A' Q P C').
apply lea_in_angle; Side; apply lea_right_comm; trivial.
destruct (segment_construction C' P C' P) as [C [HC1 HC2]].
destruct (segment_construction A' P A' P) as [A [HA1 HA2]].
assert_diffs.
assert (HInAngle1 : InAngle C A P Q).
apply in_angle_reverse with A'; auto.
apply l11_24, in_angle_reverse with C'; auto.
apply l11_24; trivial.
assert (HNCol : ~ Col P C' A').
assert (HNCol1 : ~ Col P C A) by (intro; apply HNCol; ColR).
assert (HNCol2 : ~ Col P Q C) by (intro; apply (par_strict_not_col_2 Q' Q C' P); ColR).
assert (HPer : Per A P Q) by (apply l8_2, per_col with A'; Perp; Col).
assert (HOS1 : OS A P C Q).
apply in_angle_one_side; Col.
apply per_not_col; auto.
destruct (aristotle P Q A P C) as [X [Y]]; Col.
spliter.
apply (not_and_lt P Q X Y).
split; trivial.
destruct (l8_18_existence P Q Y) as [Z [HZ1 HZ2]].
intro; assert_diffs; apply HNCol2; ColR.
apply lt_transitivity with P Z.
-
assert (P <> Z).

*****
H19 : not (eq P Z)
HZ2 : Perp P Q Y Z
HZ1 : Col P Q Z
Z : Tpoint
H18 : Lt P Q X Y
H17 : Per P X Y
H15 : Out P C Y
H14 : Out P A X
X,Y : Tpoint
HOS1 : OS A P C Q
HPer : Per A P Q
HNCol2 : not (Col P Q C)
HNCol1 : not (Col P C A)
HNCol : not (Col P C' A')
HInAngle1 : InAngle C A P Q
H13 : not (eq P C)
H12 : not (eq P A)
H10 : not (eq C' C)
H9 : not (eq A' A)
HA2 : Cong P A A' P
HA1 : Bet A' P A
A : Tpoint
HC2 : Cong P C C' P
HC1 : Bet C' P C
C : Tpoint
HInAngle : InAngle A' Q P C'
HNCongA : not (CongA Q P A' C' P Q)
HLeA : LeA Q P A' C' P Q
H16 : not (eq Q A')
H11 : not (eq A' P)
H8 : not (eq C' Q)
H7 : not (eq Q' P)
HOS : OS P Q C' A'
HPerp : Perp P Q A' P
A' : Tpoint
HPar : Par_strict Q' Q C' P
HObtuse : Obtuse C' P Q
H6 : Coplanar Q' C' P Q
H5 : Per Q' C' P
H4 : Per Q' Q P
H3 : Per C' Q' Q
H2 : not (eq Q' Q)
H1 : not (eq P Q)
H0 : not (eq C' P)
H : not (eq Q' C')
Q',C',P,Q : Tpoint
obtuse : hypothesis_of_obtuse_saccheri_quadrilaterals
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Lt X Y P Z
+++++
assert (HLam : Lambert P X Y Z).
-----
Lemma aristotle__obtuse_case_elimination : aristotle_s_axiom -> ~ hypothesis_of_obtuse_saccheri_quadrilaterals.
Proof.
intros aristotle obtuse.
destruct ex_lambert as [Q' [C' [P [Q HLam]]]].
assert (HObtuse : Obtuse C' P Q) by (apply <- (lam_obtuse__oah Q'); trivial).
assert (HPar : Par_strict Q' Q C' P) by (apply lam__par_strict1423, HLam).
destruct HLam; spliter.
destruct (l10_15 P Q P C') as [A' [HPerp HOS]]; Col.
apply not_col_permutation_1.
apply par_strict_not_col_1 with Q'; Par.
assert_diffs.
assert (HLtA : LtA Q P A' C' P Q) by (apply obtuse_per__lta; Perp).
destruct HLtA as [HLeA HNCongA].
assert (HInAngle : InAngle A' Q P C').
apply lea_in_angle; Side; apply lea_right_comm; trivial.
destruct (segment_construction C' P C' P) as [C [HC1 HC2]].
destruct (segment_construction A' P A' P) as [A [HA1 HA2]].
assert_diffs.
assert (HInAngle1 : InAngle C A P Q).
apply in_angle_reverse with A'; auto.
apply l11_24, in_angle_reverse with C'; auto.
apply l11_24; trivial.
assert (HNCol : ~ Col P C' A').
assert (HNCol1 : ~ Col P C A) by (intro; apply HNCol; ColR).
assert (HNCol2 : ~ Col P Q C) by (intro; apply (par_strict_not_col_2 Q' Q C' P); ColR).
assert (HPer : Per A P Q) by (apply l8_2, per_col with A'; Perp; Col).
assert (HOS1 : OS A P C Q).
apply in_angle_one_side; Col.
apply per_not_col; auto.
destruct (aristotle P Q A P C) as [X [Y]]; Col.
spliter.
apply (not_and_lt P Q X Y).
split; trivial.
destruct (l8_18_existence P Q Y) as [Z [HZ1 HZ2]].
intro; assert_diffs; apply HNCol2; ColR.
apply lt_transitivity with P Z.
-
assert (P <> Z).
assert (HLam : Lambert P X Y Z).

*****
H19 : not (eq P Z)
HZ2 : Perp P Q Y Z
HZ1 : Col P Q Z
Z : Tpoint
H18 : Lt P Q X Y
H17 : Per P X Y
H15 : Out P C Y
H14 : Out P A X
X,Y : Tpoint
HOS1 : OS A P C Q
HPer : Per A P Q
HNCol2 : not (Col P Q C)
HNCol1 : not (Col P C A)
HNCol : not (Col P C' A')
HInAngle1 : InAngle C A P Q
H13 : not (eq P C)
H12 : not (eq P A)
H10 : not (eq C' C)
H9 : not (eq A' A)
HA2 : Cong P A A' P
HA1 : Bet A' P A
A : Tpoint
HC2 : Cong P C C' P
HC1 : Bet C' P C
C : Tpoint
HInAngle : InAngle A' Q P C'
HNCongA : not (CongA Q P A' C' P Q)
HLeA : LeA Q P A' C' P Q
H16 : not (eq Q A')
H11 : not (eq A' P)
H8 : not (eq C' Q)
H7 : not (eq Q' P)
HOS : OS P Q C' A'
HPerp : Perp P Q A' P
A' : Tpoint
HPar : Par_strict Q' Q C' P
HObtuse : Obtuse C' P Q
H6 : Coplanar Q' C' P Q
H5 : Per Q' C' P
H4 : Per Q' Q P
H3 : Per C' Q' Q
H2 : not (eq Q' Q)
H1 : not (eq P Q)
H0 : not (eq C' P)
H : not (eq Q' C')
Q',C',P,Q : Tpoint
obtuse : hypothesis_of_obtuse_saccheri_quadrilaterals
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Lambert P X Y Z
+++++
assert_diffs.
-----
Lemma aristotle__obtuse_case_elimination : aristotle_s_axiom -> ~ hypothesis_of_obtuse_saccheri_quadrilaterals.
Proof.
intros aristotle obtuse.
destruct ex_lambert as [Q' [C' [P [Q HLam]]]].
assert (HObtuse : Obtuse C' P Q) by (apply <- (lam_obtuse__oah Q'); trivial).
assert (HPar : Par_strict Q' Q C' P) by (apply lam__par_strict1423, HLam).
destruct HLam; spliter.
destruct (l10_15 P Q P C') as [A' [HPerp HOS]]; Col.
apply not_col_permutation_1.
apply par_strict_not_col_1 with Q'; Par.
assert_diffs.
assert (HLtA : LtA Q P A' C' P Q) by (apply obtuse_per__lta; Perp).
destruct HLtA as [HLeA HNCongA].
assert (HInAngle : InAngle A' Q P C').
apply lea_in_angle; Side; apply lea_right_comm; trivial.
destruct (segment_construction C' P C' P) as [C [HC1 HC2]].
destruct (segment_construction A' P A' P) as [A [HA1 HA2]].
assert_diffs.
assert (HInAngle1 : InAngle C A P Q).
apply in_angle_reverse with A'; auto.
apply l11_24, in_angle_reverse with C'; auto.
apply l11_24; trivial.
assert (HNCol : ~ Col P C' A').
assert (HNCol1 : ~ Col P C A) by (intro; apply HNCol; ColR).
assert (HNCol2 : ~ Col P Q C) by (intro; apply (par_strict_not_col_2 Q' Q C' P); ColR).
assert (HPer : Per A P Q) by (apply l8_2, per_col with A'; Perp; Col).
assert (HOS1 : OS A P C Q).
apply in_angle_one_side; Col.
apply per_not_col; auto.
destruct (aristotle P Q A P C) as [X [Y]]; Col.
spliter.
apply (not_and_lt P Q X Y).
split; trivial.
destruct (l8_18_existence P Q Y) as [Z [HZ1 HZ2]].
intro; assert_diffs; apply HNCol2; ColR.
apply lt_transitivity with P Z.
-
assert (P <> Z).
assert (HLam : Lambert P X Y Z).
assert_diffs.

*****
H29 : not (eq X P)
H28 : not (eq Y Z)
H25 : not (eq P Y)
H21 : not (eq A Q)
H20 : not (eq X Y)
H24 : not (eq C' A')
H23 : not (eq C A)
H22 : not (eq Q C)
H19 : not (eq P Z)
HZ2 : Perp P Q Y Z
HZ1 : Col P Q Z
Z : Tpoint
H18 : Lt P Q X Y
H17 : Per P X Y
H15 : Out P C Y
H14 : Out P A X
X,Y : Tpoint
HOS1 : OS A P C Q
HPer : Per A P Q
HNCol2 : not (Col P Q C)
HNCol1 : not (Col P C A)
HNCol : not (Col P C' A')
HInAngle1 : InAngle C A P Q
H13 : not (eq P C)
H12 : not (eq P A)
H10 : not (eq C' C)
H9 : not (eq A' A)
HA2 : Cong P A A' P
HA1 : Bet A' P A
A : Tpoint
HC2 : Cong P C C' P
HC1 : Bet C' P C
C : Tpoint
HInAngle : InAngle A' Q P C'
HNCongA : not (CongA Q P A' C' P Q)
HLeA : LeA Q P A' C' P Q
H16 : not (eq Q A')
H11 : not (eq A' P)
H8 : not (eq C' Q)
H7 : not (eq Q' P)
HOS : OS P Q C' A'
HPerp : Perp P Q A' P
A' : Tpoint
HPar : Par_strict Q' Q C' P
HObtuse : Obtuse C' P Q
H6 : Coplanar Q' C' P Q
H5 : Per Q' C' P
H4 : Per Q' Q P
H3 : Per C' Q' Q
H2 : not (eq Q' Q)
H1 : not (eq P Q)
H0 : not (eq C' P)
H : not (eq Q' C')
Q',C',P,Q : Tpoint
obtuse : hypothesis_of_obtuse_saccheri_quadrilaterals
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Lambert P X Y Z
+++++
repeat split; auto.
-----
Lemma aristotle__obtuse_case_elimination : aristotle_s_axiom -> ~ hypothesis_of_obtuse_saccheri_quadrilaterals.
Proof.
intros aristotle obtuse.
destruct ex_lambert as [Q' [C' [P [Q HLam]]]].
assert (HObtuse : Obtuse C' P Q) by (apply <- (lam_obtuse__oah Q'); trivial).
assert (HPar : Par_strict Q' Q C' P) by (apply lam__par_strict1423, HLam).
destruct HLam; spliter.
destruct (l10_15 P Q P C') as [A' [HPerp HOS]]; Col.
apply not_col_permutation_1.
apply par_strict_not_col_1 with Q'; Par.
assert_diffs.
assert (HLtA : LtA Q P A' C' P Q) by (apply obtuse_per__lta; Perp).
destruct HLtA as [HLeA HNCongA].
assert (HInAngle : InAngle A' Q P C').
apply lea_in_angle; Side; apply lea_right_comm; trivial.
destruct (segment_construction C' P C' P) as [C [HC1 HC2]].
destruct (segment_construction A' P A' P) as [A [HA1 HA2]].
assert_diffs.
assert (HInAngle1 : InAngle C A P Q).
apply in_angle_reverse with A'; auto.
apply l11_24, in_angle_reverse with C'; auto.
apply l11_24; trivial.
assert (HNCol : ~ Col P C' A').
assert (HNCol1 : ~ Col P C A) by (intro; apply HNCol; ColR).
assert (HNCol2 : ~ Col P Q C) by (intro; apply (par_strict_not_col_2 Q' Q C' P); ColR).
assert (HPer : Per A P Q) by (apply l8_2, per_col with A'; Perp; Col).
assert (HOS1 : OS A P C Q).
apply in_angle_one_side; Col.
apply per_not_col; auto.
destruct (aristotle P Q A P C) as [X [Y]]; Col.
spliter.
apply (not_and_lt P Q X Y).
split; trivial.
destruct (l8_18_existence P Q Y) as [Z [HZ1 HZ2]].
intro; assert_diffs; apply HNCol2; ColR.
apply lt_transitivity with P Z.
-
assert (P <> Z).
assert (HLam : Lambert P X Y Z).
assert_diffs.
repeat split; auto.

*****
H29 : not (eq X P)
H28 : not (eq Y Z)
H25 : not (eq P Y)
H21 : not (eq A Q)
H20 : not (eq X Y)
H24 : not (eq C' A')
H23 : not (eq C A)
H22 : not (eq Q C)
H19 : not (eq P Z)
HZ2 : Perp P Q Y Z
HZ1 : Col P Q Z
Z : Tpoint
H18 : Lt P Q X Y
H17 : Per P X Y
H15 : Out P C Y
H14 : Out P A X
X,Y : Tpoint
HOS1 : OS A P C Q
HPer : Per A P Q
HNCol2 : not (Col P Q C)
HNCol1 : not (Col P C A)
HNCol : not (Col P C' A')
HInAngle1 : InAngle C A P Q
H13 : not (eq P C)
H12 : not (eq P A)
H10 : not (eq C' C)
H9 : not (eq A' A)
HA2 : Cong P A A' P
HA1 : Bet A' P A
A : Tpoint
HC2 : Cong P C C' P
HC1 : Bet C' P C
C : Tpoint
HInAngle : InAngle A' Q P C'
HNCongA : not (CongA Q P A' C' P Q)
HLeA : LeA Q P A' C' P Q
H16 : not (eq Q A')
H11 : not (eq A' P)
H8 : not (eq C' Q)
H7 : not (eq Q' P)
HOS : OS P Q C' A'
HPerp : Perp P Q A' P
A' : Tpoint
HPar : Par_strict Q' Q C' P
HObtuse : Obtuse C' P Q
H6 : Coplanar Q' C' P Q
H5 : Per Q' C' P
H4 : Per Q' Q P
H3 : Per C' Q' Q
H2 : not (eq Q' Q)
H1 : not (eq P Q)
H0 : not (eq C' P)
H : not (eq Q' C')
Q',C',P,Q : Tpoint
obtuse : hypothesis_of_obtuse_saccheri_quadrilaterals
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per X P Z
+++++
apply per_col with Q; Col.
-----
Lemma aristotle__obtuse_case_elimination : aristotle_s_axiom -> ~ hypothesis_of_obtuse_saccheri_quadrilaterals.
Proof.
intros aristotle obtuse.
destruct ex_lambert as [Q' [C' [P [Q HLam]]]].
assert (HObtuse : Obtuse C' P Q) by (apply <- (lam_obtuse__oah Q'); trivial).
assert (HPar : Par_strict Q' Q C' P) by (apply lam__par_strict1423, HLam).
destruct HLam; spliter.
destruct (l10_15 P Q P C') as [A' [HPerp HOS]]; Col.
apply not_col_permutation_1.
apply par_strict_not_col_1 with Q'; Par.
assert_diffs.
assert (HLtA : LtA Q P A' C' P Q) by (apply obtuse_per__lta; Perp).
destruct HLtA as [HLeA HNCongA].
assert (HInAngle : InAngle A' Q P C').
apply lea_in_angle; Side; apply lea_right_comm; trivial.
destruct (segment_construction C' P C' P) as [C [HC1 HC2]].
destruct (segment_construction A' P A' P) as [A [HA1 HA2]].
assert_diffs.
assert (HInAngle1 : InAngle C A P Q).
apply in_angle_reverse with A'; auto.
apply l11_24, in_angle_reverse with C'; auto.
apply l11_24; trivial.
assert (HNCol : ~ Col P C' A').
assert (HNCol1 : ~ Col P C A) by (intro; apply HNCol; ColR).
assert (HNCol2 : ~ Col P Q C) by (intro; apply (par_strict_not_col_2 Q' Q C' P); ColR).
assert (HPer : Per A P Q) by (apply l8_2, per_col with A'; Perp; Col).
assert (HOS1 : OS A P C Q).
apply in_angle_one_side; Col.
apply per_not_col; auto.
destruct (aristotle P Q A P C) as [X [Y]]; Col.
spliter.
apply (not_and_lt P Q X Y).
split; trivial.
destruct (l8_18_existence P Q Y) as [Z [HZ1 HZ2]].
intro; assert_diffs; apply HNCol2; ColR.
apply lt_transitivity with P Z.
-
assert (P <> Z).
assert (HLam : Lambert P X Y Z).
assert_diffs.
repeat split; auto.
apply per_col with Q; Col.

*****
H29 : not (eq X P)
H28 : not (eq Y Z)
H25 : not (eq P Y)
H21 : not (eq A Q)
H20 : not (eq X Y)
H24 : not (eq C' A')
H23 : not (eq C A)
H22 : not (eq Q C)
H19 : not (eq P Z)
HZ2 : Perp P Q Y Z
HZ1 : Col P Q Z
Z : Tpoint
H18 : Lt P Q X Y
H17 : Per P X Y
H15 : Out P C Y
H14 : Out P A X
X,Y : Tpoint
HOS1 : OS A P C Q
HPer : Per A P Q
HNCol2 : not (Col P Q C)
HNCol1 : not (Col P C A)
HNCol : not (Col P C' A')
HInAngle1 : InAngle C A P Q
H13 : not (eq P C)
H12 : not (eq P A)
H10 : not (eq C' C)
H9 : not (eq A' A)
HA2 : Cong P A A' P
HA1 : Bet A' P A
A : Tpoint
HC2 : Cong P C C' P
HC1 : Bet C' P C
C : Tpoint
HInAngle : InAngle A' Q P C'
HNCongA : not (CongA Q P A' C' P Q)
HLeA : LeA Q P A' C' P Q
H16 : not (eq Q A')
H11 : not (eq A' P)
H8 : not (eq C' Q)
H7 : not (eq Q' P)
HOS : OS P Q C' A'
HPerp : Perp P Q A' P
A' : Tpoint
HPar : Par_strict Q' Q C' P
HObtuse : Obtuse C' P Q
H6 : Coplanar Q' C' P Q
H5 : Per Q' C' P
H4 : Per Q' Q P
H3 : Per C' Q' Q
H2 : not (eq Q' Q)
H1 : not (eq P Q)
H0 : not (eq C' P)
H : not (eq Q' C')
Q',C',P,Q : Tpoint
obtuse : hypothesis_of_obtuse_saccheri_quadrilaterals
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per X P Q
+++++
apply l8_2, per_col with A; Perp; Col.
-----
Lemma aristotle__obtuse_case_elimination : aristotle_s_axiom -> ~ hypothesis_of_obtuse_saccheri_quadrilaterals.
Proof.
intros aristotle obtuse.
destruct ex_lambert as [Q' [C' [P [Q HLam]]]].
assert (HObtuse : Obtuse C' P Q) by (apply <- (lam_obtuse__oah Q'); trivial).
assert (HPar : Par_strict Q' Q C' P) by (apply lam__par_strict1423, HLam).
destruct HLam; spliter.
destruct (l10_15 P Q P C') as [A' [HPerp HOS]]; Col.
apply not_col_permutation_1.
apply par_strict_not_col_1 with Q'; Par.
assert_diffs.
assert (HLtA : LtA Q P A' C' P Q) by (apply obtuse_per__lta; Perp).
destruct HLtA as [HLeA HNCongA].
assert (HInAngle : InAngle A' Q P C').
apply lea_in_angle; Side; apply lea_right_comm; trivial.
destruct (segment_construction C' P C' P) as [C [HC1 HC2]].
destruct (segment_construction A' P A' P) as [A [HA1 HA2]].
assert_diffs.
assert (HInAngle1 : InAngle C A P Q).
apply in_angle_reverse with A'; auto.
apply l11_24, in_angle_reverse with C'; auto.
apply l11_24; trivial.
assert (HNCol : ~ Col P C' A').
assert (HNCol1 : ~ Col P C A) by (intro; apply HNCol; ColR).
assert (HNCol2 : ~ Col P Q C) by (intro; apply (par_strict_not_col_2 Q' Q C' P); ColR).
assert (HPer : Per A P Q) by (apply l8_2, per_col with A'; Perp; Col).
assert (HOS1 : OS A P C Q).
apply in_angle_one_side; Col.
apply per_not_col; auto.
destruct (aristotle P Q A P C) as [X [Y]]; Col.
spliter.
apply (not_and_lt P Q X Y).
split; trivial.
destruct (l8_18_existence P Q Y) as [Z [HZ1 HZ2]].
intro; assert_diffs; apply HNCol2; ColR.
apply lt_transitivity with P Z.
-
assert (P <> Z).
assert (HLam : Lambert P X Y Z).
assert_diffs.
repeat split; auto.
apply per_col with Q; Col.
apply l8_2, per_col with A; Perp; Col.

*****
H29 : not (eq X P)
H28 : not (eq Y Z)
H25 : not (eq P Y)
H21 : not (eq A Q)
H20 : not (eq X Y)
H24 : not (eq C' A')
H23 : not (eq C A)
H22 : not (eq Q C)
H19 : not (eq P Z)
HZ2 : Perp P Q Y Z
HZ1 : Col P Q Z
Z : Tpoint
H18 : Lt P Q X Y
H17 : Per P X Y
H15 : Out P C Y
H14 : Out P A X
X,Y : Tpoint
HOS1 : OS A P C Q
HPer : Per A P Q
HNCol2 : not (Col P Q C)
HNCol1 : not (Col P C A)
HNCol : not (Col P C' A')
HInAngle1 : InAngle C A P Q
H13 : not (eq P C)
H12 : not (eq P A)
H10 : not (eq C' C)
H9 : not (eq A' A)
HA2 : Cong P A A' P
HA1 : Bet A' P A
A : Tpoint
HC2 : Cong P C C' P
HC1 : Bet C' P C
C : Tpoint
HInAngle : InAngle A' Q P C'
HNCongA : not (CongA Q P A' C' P Q)
HLeA : LeA Q P A' C' P Q
H16 : not (eq Q A')
H11 : not (eq A' P)
H8 : not (eq C' Q)
H7 : not (eq Q' P)
HOS : OS P Q C' A'
HPerp : Perp P Q A' P
A' : Tpoint
HPar : Par_strict Q' Q C' P
HObtuse : Obtuse C' P Q
H6 : Coplanar Q' C' P Q
H5 : Per Q' C' P
H4 : Per Q' Q P
H3 : Per C' Q' Q
H2 : not (eq Q' Q)
H1 : not (eq P Q)
H0 : not (eq C' P)
H : not (eq Q' C')
Q',C',P,Q : Tpoint
obtuse : hypothesis_of_obtuse_saccheri_quadrilaterals
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per P Z Y
+++++
apply perp_per_1, perp_left_comm, perp_col with Q; auto.
-----
Lemma aristotle__obtuse_case_elimination : aristotle_s_axiom -> ~ hypothesis_of_obtuse_saccheri_quadrilaterals.
Proof.
intros aristotle obtuse.
destruct ex_lambert as [Q' [C' [P [Q HLam]]]].
assert (HObtuse : Obtuse C' P Q) by (apply <- (lam_obtuse__oah Q'); trivial).
assert (HPar : Par_strict Q' Q C' P) by (apply lam__par_strict1423, HLam).
destruct HLam; spliter.
destruct (l10_15 P Q P C') as [A' [HPerp HOS]]; Col.
apply not_col_permutation_1.
apply par_strict_not_col_1 with Q'; Par.
assert_diffs.
assert (HLtA : LtA Q P A' C' P Q) by (apply obtuse_per__lta; Perp).
destruct HLtA as [HLeA HNCongA].
assert (HInAngle : InAngle A' Q P C').
apply lea_in_angle; Side; apply lea_right_comm; trivial.
destruct (segment_construction C' P C' P) as [C [HC1 HC2]].
destruct (segment_construction A' P A' P) as [A [HA1 HA2]].
assert_diffs.
assert (HInAngle1 : InAngle C A P Q).
apply in_angle_reverse with A'; auto.
apply l11_24, in_angle_reverse with C'; auto.
apply l11_24; trivial.
assert (HNCol : ~ Col P C' A').
assert (HNCol1 : ~ Col P C A) by (intro; apply HNCol; ColR).
assert (HNCol2 : ~ Col P Q C) by (intro; apply (par_strict_not_col_2 Q' Q C' P); ColR).
assert (HPer : Per A P Q) by (apply l8_2, per_col with A'; Perp; Col).
assert (HOS1 : OS A P C Q).
apply in_angle_one_side; Col.
apply per_not_col; auto.
destruct (aristotle P Q A P C) as [X [Y]]; Col.
spliter.
apply (not_and_lt P Q X Y).
split; trivial.
destruct (l8_18_existence P Q Y) as [Z [HZ1 HZ2]].
intro; assert_diffs; apply HNCol2; ColR.
apply lt_transitivity with P Z.
-
assert (P <> Z).
assert (HLam : Lambert P X Y Z).
assert_diffs.
repeat split; auto.
apply per_col with Q; Col.
apply l8_2, per_col with A; Perp; Col.
apply perp_per_1, perp_left_comm, perp_col with Q; auto.

*****
H29 : not (eq X P)
H28 : not (eq Y Z)
H25 : not (eq P Y)
H21 : not (eq A Q)
H20 : not (eq X Y)
H24 : not (eq C' A')
H23 : not (eq C A)
H22 : not (eq Q C)
H19 : not (eq P Z)
HZ2 : Perp P Q Y Z
HZ1 : Col P Q Z
Z : Tpoint
H18 : Lt P Q X Y
H17 : Per P X Y
H15 : Out P C Y
H14 : Out P A X
X,Y : Tpoint
HOS1 : OS A P C Q
HPer : Per A P Q
HNCol2 : not (Col P Q C)
HNCol1 : not (Col P C A)
HNCol : not (Col P C' A')
HInAngle1 : InAngle C A P Q
H13 : not (eq P C)
H12 : not (eq P A)
H10 : not (eq C' C)
H9 : not (eq A' A)
HA2 : Cong P A A' P
HA1 : Bet A' P A
A : Tpoint
HC2 : Cong P C C' P
HC1 : Bet C' P C
C : Tpoint
HInAngle : InAngle A' Q P C'
HNCongA : not (CongA Q P A' C' P Q)
HLeA : LeA Q P A' C' P Q
H16 : not (eq Q A')
H11 : not (eq A' P)
H8 : not (eq C' Q)
H7 : not (eq Q' P)
HOS : OS P Q C' A'
HPerp : Perp P Q A' P
A' : Tpoint
HPar : Par_strict Q' Q C' P
HObtuse : Obtuse C' P Q
H6 : Coplanar Q' C' P Q
H5 : Per Q' C' P
H4 : Per Q' Q P
H3 : Per C' Q' Q
H2 : not (eq Q' Q)
H1 : not (eq P Q)
H0 : not (eq C' P)
H : not (eq Q' C')
Q',C',P,Q : Tpoint
obtuse : hypothesis_of_obtuse_saccheri_quadrilaterals
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar P X Y Z
+++++
assert (InAngle Y X P Q).
-----
Lemma aristotle__obtuse_case_elimination : aristotle_s_axiom -> ~ hypothesis_of_obtuse_saccheri_quadrilaterals.
Proof.
intros aristotle obtuse.
destruct ex_lambert as [Q' [C' [P [Q HLam]]]].
assert (HObtuse : Obtuse C' P Q) by (apply <- (lam_obtuse__oah Q'); trivial).
assert (HPar : Par_strict Q' Q C' P) by (apply lam__par_strict1423, HLam).
destruct HLam; spliter.
destruct (l10_15 P Q P C') as [A' [HPerp HOS]]; Col.
apply not_col_permutation_1.
apply par_strict_not_col_1 with Q'; Par.
assert_diffs.
assert (HLtA : LtA Q P A' C' P Q) by (apply obtuse_per__lta; Perp).
destruct HLtA as [HLeA HNCongA].
assert (HInAngle : InAngle A' Q P C').
apply lea_in_angle; Side; apply lea_right_comm; trivial.
destruct (segment_construction C' P C' P) as [C [HC1 HC2]].
destruct (segment_construction A' P A' P) as [A [HA1 HA2]].
assert_diffs.
assert (HInAngle1 : InAngle C A P Q).
apply in_angle_reverse with A'; auto.
apply l11_24, in_angle_reverse with C'; auto.
apply l11_24; trivial.
assert (HNCol : ~ Col P C' A').
assert (HNCol1 : ~ Col P C A) by (intro; apply HNCol; ColR).
assert (HNCol2 : ~ Col P Q C) by (intro; apply (par_strict_not_col_2 Q' Q C' P); ColR).
assert (HPer : Per A P Q) by (apply l8_2, per_col with A'; Perp; Col).
assert (HOS1 : OS A P C Q).
apply in_angle_one_side; Col.
apply per_not_col; auto.
destruct (aristotle P Q A P C) as [X [Y]]; Col.
spliter.
apply (not_and_lt P Q X Y).
split; trivial.
destruct (l8_18_existence P Q Y) as [Z [HZ1 HZ2]].
intro; assert_diffs; apply HNCol2; ColR.
apply lt_transitivity with P Z.
-
assert (P <> Z).
assert (HLam : Lambert P X Y Z).
assert_diffs.
repeat split; auto.
apply per_col with Q; Col.
apply l8_2, per_col with A; Perp; Col.
apply perp_per_1, perp_left_comm, perp_col with Q; auto.
assert (InAngle Y X P Q).

*****
H29 : not (eq X P)
H28 : not (eq Y Z)
H25 : not (eq P Y)
H21 : not (eq A Q)
H20 : not (eq X Y)
H24 : not (eq C' A')
H23 : not (eq C A)
H22 : not (eq Q C)
H19 : not (eq P Z)
HZ2 : Perp P Q Y Z
HZ1 : Col P Q Z
Z : Tpoint
H18 : Lt P Q X Y
H17 : Per P X Y
H15 : Out P C Y
H14 : Out P A X
X,Y : Tpoint
HOS1 : OS A P C Q
HPer : Per A P Q
HNCol2 : not (Col P Q C)
HNCol1 : not (Col P C A)
HNCol : not (Col P C' A')
HInAngle1 : InAngle C A P Q
H13 : not (eq P C)
H12 : not (eq P A)
H10 : not (eq C' C)
H9 : not (eq A' A)
HA2 : Cong P A A' P
HA1 : Bet A' P A
A : Tpoint
HC2 : Cong P C C' P
HC1 : Bet C' P C
C : Tpoint
HInAngle : InAngle A' Q P C'
HNCongA : not (CongA Q P A' C' P Q)
HLeA : LeA Q P A' C' P Q
H16 : not (eq Q A')
H11 : not (eq A' P)
H8 : not (eq C' Q)
H7 : not (eq Q' P)
HOS : OS P Q C' A'
HPerp : Perp P Q A' P
A' : Tpoint
HPar : Par_strict Q' Q C' P
HObtuse : Obtuse C' P Q
H6 : Coplanar Q' C' P Q
H5 : Per Q' C' P
H4 : Per Q' Q P
H3 : Per C' Q' Q
H2 : not (eq Q' Q)
H1 : not (eq P Q)
H0 : not (eq C' P)
H : not (eq Q' C')
Q',C',P,Q : Tpoint
obtuse : hypothesis_of_obtuse_saccheri_quadrilaterals
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
InAngle Y X P Q
+++++
apply l11_25 with C A Q; try (apply l6_6); trivial; apply out_trivial; auto.
-----
Lemma aristotle__obtuse_case_elimination : aristotle_s_axiom -> ~ hypothesis_of_obtuse_saccheri_quadrilaterals.
Proof.
intros aristotle obtuse.
destruct ex_lambert as [Q' [C' [P [Q HLam]]]].
assert (HObtuse : Obtuse C' P Q) by (apply <- (lam_obtuse__oah Q'); trivial).
assert (HPar : Par_strict Q' Q C' P) by (apply lam__par_strict1423, HLam).
destruct HLam; spliter.
destruct (l10_15 P Q P C') as [A' [HPerp HOS]]; Col.
apply not_col_permutation_1.
apply par_strict_not_col_1 with Q'; Par.
assert_diffs.
assert (HLtA : LtA Q P A' C' P Q) by (apply obtuse_per__lta; Perp).
destruct HLtA as [HLeA HNCongA].
assert (HInAngle : InAngle A' Q P C').
apply lea_in_angle; Side; apply lea_right_comm; trivial.
destruct (segment_construction C' P C' P) as [C [HC1 HC2]].
destruct (segment_construction A' P A' P) as [A [HA1 HA2]].
assert_diffs.
assert (HInAngle1 : InAngle C A P Q).
apply in_angle_reverse with A'; auto.
apply l11_24, in_angle_reverse with C'; auto.
apply l11_24; trivial.
assert (HNCol : ~ Col P C' A').
assert (HNCol1 : ~ Col P C A) by (intro; apply HNCol; ColR).
assert (HNCol2 : ~ Col P Q C) by (intro; apply (par_strict_not_col_2 Q' Q C' P); ColR).
assert (HPer : Per A P Q) by (apply l8_2, per_col with A'; Perp; Col).
assert (HOS1 : OS A P C Q).
apply in_angle_one_side; Col.
apply per_not_col; auto.
destruct (aristotle P Q A P C) as [X [Y]]; Col.
spliter.
apply (not_and_lt P Q X Y).
split; trivial.
destruct (l8_18_existence P Q Y) as [Z [HZ1 HZ2]].
intro; assert_diffs; apply HNCol2; ColR.
apply lt_transitivity with P Z.
-
assert (P <> Z).
assert (HLam : Lambert P X Y Z).
assert_diffs.
repeat split; auto.
apply per_col with Q; Col.
apply l8_2, per_col with A; Perp; Col.
apply perp_per_1, perp_left_comm, perp_col with Q; auto.
assert (InAngle Y X P Q).
apply l11_25 with C A Q; try (apply l6_6); trivial; apply out_trivial; auto.

*****
H26 : InAngle Y X P Q
H29 : not (eq X P)
H28 : not (eq Y Z)
H25 : not (eq P Y)
H21 : not (eq A Q)
H20 : not (eq X Y)
H24 : not (eq C' A')
H23 : not (eq C A)
H22 : not (eq Q C)
H19 : not (eq P Z)
HZ2 : Perp P Q Y Z
HZ1 : Col P Q Z
Z : Tpoint
H18 : Lt P Q X Y
H17 : Per P X Y
H15 : Out P C Y
H14 : Out P A X
X,Y : Tpoint
HOS1 : OS A P C Q
HPer : Per A P Q
HNCol2 : not (Col P Q C)
HNCol1 : not (Col P C A)
HNCol : not (Col P C' A')
HInAngle1 : InAngle C A P Q
H13 : not (eq P C)
H12 : not (eq P A)
H10 : not (eq C' C)
H9 : not (eq A' A)
HA2 : Cong P A A' P
HA1 : Bet A' P A
A : Tpoint
HC2 : Cong P C C' P
HC1 : Bet C' P C
C : Tpoint
HInAngle : InAngle A' Q P C'
HNCongA : not (CongA Q P A' C' P Q)
HLeA : LeA Q P A' C' P Q
H16 : not (eq Q A')
H11 : not (eq A' P)
H8 : not (eq C' Q)
H7 : not (eq Q' P)
HOS : OS P Q C' A'
HPerp : Perp P Q A' P
A' : Tpoint
HPar : Par_strict Q' Q C' P
HObtuse : Obtuse C' P Q
H6 : Coplanar Q' C' P Q
H5 : Per Q' C' P
H4 : Per Q' Q P
H3 : Per C' Q' Q
H2 : not (eq Q' Q)
H1 : not (eq P Q)
H0 : not (eq C' P)
H : not (eq Q' C')
Q',C',P,Q : Tpoint
obtuse : hypothesis_of_obtuse_saccheri_quadrilaterals
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar P X Y Z
+++++
apply coplanar_perm_12, col_cop__cop with Q; Col; Cop.
-----
Lemma aristotle__obtuse_case_elimination : aristotle_s_axiom -> ~ hypothesis_of_obtuse_saccheri_quadrilaterals.
Proof.
intros aristotle obtuse.
destruct ex_lambert as [Q' [C' [P [Q HLam]]]].
assert (HObtuse : Obtuse C' P Q) by (apply <- (lam_obtuse__oah Q'); trivial).
assert (HPar : Par_strict Q' Q C' P) by (apply lam__par_strict1423, HLam).
destruct HLam; spliter.
destruct (l10_15 P Q P C') as [A' [HPerp HOS]]; Col.
apply not_col_permutation_1.
apply par_strict_not_col_1 with Q'; Par.
assert_diffs.
assert (HLtA : LtA Q P A' C' P Q) by (apply obtuse_per__lta; Perp).
destruct HLtA as [HLeA HNCongA].
assert (HInAngle : InAngle A' Q P C').
apply lea_in_angle; Side; apply lea_right_comm; trivial.
destruct (segment_construction C' P C' P) as [C [HC1 HC2]].
destruct (segment_construction A' P A' P) as [A [HA1 HA2]].
assert_diffs.
assert (HInAngle1 : InAngle C A P Q).
apply in_angle_reverse with A'; auto.
apply l11_24, in_angle_reverse with C'; auto.
apply l11_24; trivial.
assert (HNCol : ~ Col P C' A').
assert (HNCol1 : ~ Col P C A) by (intro; apply HNCol; ColR).
assert (HNCol2 : ~ Col P Q C) by (intro; apply (par_strict_not_col_2 Q' Q C' P); ColR).
assert (HPer : Per A P Q) by (apply l8_2, per_col with A'; Perp; Col).
assert (HOS1 : OS A P C Q).
apply in_angle_one_side; Col.
apply per_not_col; auto.
destruct (aristotle P Q A P C) as [X [Y]]; Col.
spliter.
apply (not_and_lt P Q X Y).
split; trivial.
destruct (l8_18_existence P Q Y) as [Z [HZ1 HZ2]].
intro; assert_diffs; apply HNCol2; ColR.
apply lt_transitivity with P Z.
-
assert (P <> Z).
assert (HLam : Lambert P X Y Z).

*****
HLam : Lambert P X Y Z
H19 : not (eq P Z)
HZ2 : Perp P Q Y Z
HZ1 : Col P Q Z
Z : Tpoint
H18 : Lt P Q X Y
H17 : Per P X Y
H15 : Out P C Y
H14 : Out P A X
X,Y : Tpoint
HOS1 : OS A P C Q
HPer : Per A P Q
HNCol2 : not (Col P Q C)
HNCol1 : not (Col P C A)
HNCol : not (Col P C' A')
HInAngle1 : InAngle C A P Q
H13 : not (eq P C)
H12 : not (eq P A)
H10 : not (eq C' C)
H9 : not (eq A' A)
HA2 : Cong P A A' P
HA1 : Bet A' P A
A : Tpoint
HC2 : Cong P C C' P
HC1 : Bet C' P C
C : Tpoint
HInAngle : InAngle A' Q P C'
HNCongA : not (CongA Q P A' C' P Q)
HLeA : LeA Q P A' C' P Q
H16 : not (eq Q A')
H11 : not (eq A' P)
H8 : not (eq C' Q)
H7 : not (eq Q' P)
HOS : OS P Q C' A'
HPerp : Perp P Q A' P
A' : Tpoint
HPar : Par_strict Q' Q C' P
HObtuse : Obtuse C' P Q
H6 : Coplanar Q' C' P Q
H5 : Per Q' C' P
H4 : Per Q' Q P
H3 : Per C' Q' Q
H2 : not (eq Q' Q)
H1 : not (eq P Q)
H0 : not (eq C' P)
H : not (eq Q' C')
Q',C',P,Q : Tpoint
obtuse : hypothesis_of_obtuse_saccheri_quadrilaterals
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Lt X Y P Z
+++++
apply lam_obtuse__lt; trivial.
-----
Lemma aristotle__obtuse_case_elimination : aristotle_s_axiom -> ~ hypothesis_of_obtuse_saccheri_quadrilaterals.
Proof.
intros aristotle obtuse.
destruct ex_lambert as [Q' [C' [P [Q HLam]]]].
assert (HObtuse : Obtuse C' P Q) by (apply <- (lam_obtuse__oah Q'); trivial).
assert (HPar : Par_strict Q' Q C' P) by (apply lam__par_strict1423, HLam).
destruct HLam; spliter.
destruct (l10_15 P Q P C') as [A' [HPerp HOS]]; Col.
apply not_col_permutation_1.
apply par_strict_not_col_1 with Q'; Par.
assert_diffs.
assert (HLtA : LtA Q P A' C' P Q) by (apply obtuse_per__lta; Perp).
destruct HLtA as [HLeA HNCongA].
assert (HInAngle : InAngle A' Q P C').
apply lea_in_angle; Side; apply lea_right_comm; trivial.
destruct (segment_construction C' P C' P) as [C [HC1 HC2]].
destruct (segment_construction A' P A' P) as [A [HA1 HA2]].
assert_diffs.
assert (HInAngle1 : InAngle C A P Q).
apply in_angle_reverse with A'; auto.
apply l11_24, in_angle_reverse with C'; auto.
apply l11_24; trivial.
assert (HNCol : ~ Col P C' A').
assert (HNCol1 : ~ Col P C A) by (intro; apply HNCol; ColR).
assert (HNCol2 : ~ Col P Q C) by (intro; apply (par_strict_not_col_2 Q' Q C' P); ColR).
assert (HPer : Per A P Q) by (apply l8_2, per_col with A'; Perp; Col).
assert (HOS1 : OS A P C Q).
apply in_angle_one_side; Col.
apply per_not_col; auto.
destruct (aristotle P Q A P C) as [X [Y]]; Col.
spliter.
apply (not_and_lt P Q X Y).
split; trivial.
destruct (l8_18_existence P Q Y) as [Z [HZ1 HZ2]].
intro; assert_diffs; apply HNCol2; ColR.
apply lt_transitivity with P Z.
-
assert (P <> Z).
assert (HLam : Lambert P X Y Z).
apply lam_obtuse__lt; trivial.

*****
HLam : Lambert P X Y Z
H19 : not (eq P Z)
HZ2 : Perp P Q Y Z
HZ1 : Col P Q Z
Z : Tpoint
H18 : Lt P Q X Y
H17 : Per P X Y
H15 : Out P C Y
H14 : Out P A X
X,Y : Tpoint
HOS1 : OS A P C Q
HPer : Per A P Q
HNCol2 : not (Col P Q C)
HNCol1 : not (Col P C A)
HNCol : not (Col P C' A')
HInAngle1 : InAngle C A P Q
H13 : not (eq P C)
H12 : not (eq P A)
H10 : not (eq C' C)
H9 : not (eq A' A)
HA2 : Cong P A A' P
HA1 : Bet A' P A
A : Tpoint
HC2 : Cong P C C' P
HC1 : Bet C' P C
C : Tpoint
HInAngle : InAngle A' Q P C'
HNCongA : not (CongA Q P A' C' P Q)
HLeA : LeA Q P A' C' P Q
H16 : not (eq Q A')
H11 : not (eq A' P)
H8 : not (eq C' Q)
H7 : not (eq Q' P)
HOS : OS P Q C' A'
HPerp : Perp P Q A' P
A' : Tpoint
HPar : Par_strict Q' Q C' P
HObtuse : Obtuse C' P Q
H6 : Coplanar Q' C' P Q
H5 : Per Q' C' P
H4 : Per Q' Q P
H3 : Per C' Q' Q
H2 : not (eq Q' Q)
H1 : not (eq P Q)
H0 : not (eq C' P)
H : not (eq Q' C')
Q',C',P,Q : Tpoint
obtuse : hypothesis_of_obtuse_saccheri_quadrilaterals
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Obtuse X Y Z
+++++
apply <- (lam_obtuse__oah P); trivial.
-----
Lemma aristotle__obtuse_case_elimination : aristotle_s_axiom -> ~ hypothesis_of_obtuse_saccheri_quadrilaterals.
Proof.
intros aristotle obtuse.
destruct ex_lambert as [Q' [C' [P [Q HLam]]]].
assert (HObtuse : Obtuse C' P Q) by (apply <- (lam_obtuse__oah Q'); trivial).
assert (HPar : Par_strict Q' Q C' P) by (apply lam__par_strict1423, HLam).
destruct HLam; spliter.
destruct (l10_15 P Q P C') as [A' [HPerp HOS]]; Col.
apply not_col_permutation_1.
apply par_strict_not_col_1 with Q'; Par.
assert_diffs.
assert (HLtA : LtA Q P A' C' P Q) by (apply obtuse_per__lta; Perp).
destruct HLtA as [HLeA HNCongA].
assert (HInAngle : InAngle A' Q P C').
apply lea_in_angle; Side; apply lea_right_comm; trivial.
destruct (segment_construction C' P C' P) as [C [HC1 HC2]].
destruct (segment_construction A' P A' P) as [A [HA1 HA2]].
assert_diffs.
assert (HInAngle1 : InAngle C A P Q).
apply in_angle_reverse with A'; auto.
apply l11_24, in_angle_reverse with C'; auto.
apply l11_24; trivial.
assert (HNCol : ~ Col P C' A').
assert (HNCol1 : ~ Col P C A) by (intro; apply HNCol; ColR).
assert (HNCol2 : ~ Col P Q C) by (intro; apply (par_strict_not_col_2 Q' Q C' P); ColR).
assert (HPer : Per A P Q) by (apply l8_2, per_col with A'; Perp; Col).
assert (HOS1 : OS A P C Q).
apply in_angle_one_side; Col.
apply per_not_col; auto.
destruct (aristotle P Q A P C) as [X [Y]]; Col.
spliter.
apply (not_and_lt P Q X Y).
split; trivial.
destruct (l8_18_existence P Q Y) as [Z [HZ1 HZ2]].
intro; assert_diffs; apply HNCol2; ColR.
apply lt_transitivity with P Z.
-
assert (P <> Z).
assert (HLam : Lambert P X Y Z).
apply lam_obtuse__lt; trivial.
apply <- (lam_obtuse__oah P); trivial.

*****

*****

+++++
-
-----
Lemma aristotle__obtuse_case_elimination : aristotle_s_axiom -> ~ hypothesis_of_obtuse_saccheri_quadrilaterals.
Proof.
intros aristotle obtuse.
destruct ex_lambert as [Q' [C' [P [Q HLam]]]].
assert (HObtuse : Obtuse C' P Q) by (apply <- (lam_obtuse__oah Q'); trivial).
assert (HPar : Par_strict Q' Q C' P) by (apply lam__par_strict1423, HLam).
destruct HLam; spliter.
destruct (l10_15 P Q P C') as [A' [HPerp HOS]]; Col.
apply not_col_permutation_1.
apply par_strict_not_col_1 with Q'; Par.
assert_diffs.
assert (HLtA : LtA Q P A' C' P Q) by (apply obtuse_per__lta; Perp).
destruct HLtA as [HLeA HNCongA].
assert (HInAngle : InAngle A' Q P C').
apply lea_in_angle; Side; apply lea_right_comm; trivial.
destruct (segment_construction C' P C' P) as [C [HC1 HC2]].
destruct (segment_construction A' P A' P) as [A [HA1 HA2]].
assert_diffs.
assert (HInAngle1 : InAngle C A P Q).
apply in_angle_reverse with A'; auto.
apply l11_24, in_angle_reverse with C'; auto.
apply l11_24; trivial.
assert (HNCol : ~ Col P C' A').
assert (HNCol1 : ~ Col P C A) by (intro; apply HNCol; ColR).
assert (HNCol2 : ~ Col P Q C) by (intro; apply (par_strict_not_col_2 Q' Q C' P); ColR).
assert (HPer : Per A P Q) by (apply l8_2, per_col with A'; Perp; Col).
assert (HOS1 : OS A P C Q).
apply in_angle_one_side; Col.
apply per_not_col; auto.
destruct (aristotle P Q A P C) as [X [Y]]; Col.
spliter.
apply (not_and_lt P Q X Y).
split; trivial.
destruct (l8_18_existence P Q Y) as [Z [HZ1 HZ2]].
intro; assert_diffs; apply HNCol2; ColR.
apply lt_transitivity with P Z.
-
assert (P <> Z).
assert (HLam : Lambert P X Y Z).
apply lam_obtuse__lt; trivial.
apply <- (lam_obtuse__oah P); trivial.
-

*****
HZ2 : Perp P Q Y Z
HZ1 : Col P Q Z
Z : Tpoint
H18 : Lt P Q X Y
H17 : Per P X Y
H15 : Out P C Y
H14 : Out P A X
X,Y : Tpoint
HOS1 : OS A P C Q
HPer : Per A P Q
HNCol2 : not (Col P Q C)
HNCol1 : not (Col P C A)
HNCol : not (Col P C' A')
HInAngle1 : InAngle C A P Q
H13 : not (eq P C)
H12 : not (eq P A)
H10 : not (eq C' C)
H9 : not (eq A' A)
HA2 : Cong P A A' P
HA1 : Bet A' P A
A : Tpoint
HC2 : Cong P C C' P
HC1 : Bet C' P C
C : Tpoint
HInAngle : InAngle A' Q P C'
HNCongA : not (CongA Q P A' C' P Q)
HLeA : LeA Q P A' C' P Q
H16 : not (eq Q A')
H11 : not (eq A' P)
H8 : not (eq C' Q)
H7 : not (eq Q' P)
HOS : OS P Q C' A'
HPerp : Perp P Q A' P
A' : Tpoint
HPar : Par_strict Q' Q C' P
HObtuse : Obtuse C' P Q
H6 : Coplanar Q' C' P Q
H5 : Per Q' C' P
H4 : Per Q' Q P
H3 : Per C' Q' Q
H2 : not (eq Q' Q)
H1 : not (eq P Q)
H0 : not (eq C' P)
H : not (eq Q' C')
Q',C',P,Q : Tpoint
obtuse : hypothesis_of_obtuse_saccheri_quadrilaterals
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Lt P Z P Q
+++++
assert (HOut : Out Q P Z).
-----
Lemma aristotle__obtuse_case_elimination : aristotle_s_axiom -> ~ hypothesis_of_obtuse_saccheri_quadrilaterals.
Proof.
intros aristotle obtuse.
destruct ex_lambert as [Q' [C' [P [Q HLam]]]].
assert (HObtuse : Obtuse C' P Q) by (apply <- (lam_obtuse__oah Q'); trivial).
assert (HPar : Par_strict Q' Q C' P) by (apply lam__par_strict1423, HLam).
destruct HLam; spliter.
destruct (l10_15 P Q P C') as [A' [HPerp HOS]]; Col.
apply not_col_permutation_1.
apply par_strict_not_col_1 with Q'; Par.
assert_diffs.
assert (HLtA : LtA Q P A' C' P Q) by (apply obtuse_per__lta; Perp).
destruct HLtA as [HLeA HNCongA].
assert (HInAngle : InAngle A' Q P C').
apply lea_in_angle; Side; apply lea_right_comm; trivial.
destruct (segment_construction C' P C' P) as [C [HC1 HC2]].
destruct (segment_construction A' P A' P) as [A [HA1 HA2]].
assert_diffs.
assert (HInAngle1 : InAngle C A P Q).
apply in_angle_reverse with A'; auto.
apply l11_24, in_angle_reverse with C'; auto.
apply l11_24; trivial.
assert (HNCol : ~ Col P C' A').
assert (HNCol1 : ~ Col P C A) by (intro; apply HNCol; ColR).
assert (HNCol2 : ~ Col P Q C) by (intro; apply (par_strict_not_col_2 Q' Q C' P); ColR).
assert (HPer : Per A P Q) by (apply l8_2, per_col with A'; Perp; Col).
assert (HOS1 : OS A P C Q).
apply in_angle_one_side; Col.
apply per_not_col; auto.
destruct (aristotle P Q A P C) as [X [Y]]; Col.
spliter.
apply (not_and_lt P Q X Y).
split; trivial.
destruct (l8_18_existence P Q Y) as [Z [HZ1 HZ2]].
intro; assert_diffs; apply HNCol2; ColR.
apply lt_transitivity with P Z.
-
assert (P <> Z).
assert (HLam : Lambert P X Y Z).
apply lam_obtuse__lt; trivial.
apply <- (lam_obtuse__oah P); trivial.
-
assert (HOut : Out Q P Z).

*****
HZ2 : Perp P Q Y Z
HZ1 : Col P Q Z
Z : Tpoint
H18 : Lt P Q X Y
H17 : Per P X Y
H15 : Out P C Y
H14 : Out P A X
X,Y : Tpoint
HOS1 : OS A P C Q
HPer : Per A P Q
HNCol2 : not (Col P Q C)
HNCol1 : not (Col P C A)
HNCol : not (Col P C' A')
HInAngle1 : InAngle C A P Q
H13 : not (eq P C)
H12 : not (eq P A)
H10 : not (eq C' C)
H9 : not (eq A' A)
HA2 : Cong P A A' P
HA1 : Bet A' P A
A : Tpoint
HC2 : Cong P C C' P
HC1 : Bet C' P C
C : Tpoint
HInAngle : InAngle A' Q P C'
HNCongA : not (CongA Q P A' C' P Q)
HLeA : LeA Q P A' C' P Q
H16 : not (eq Q A')
H11 : not (eq A' P)
H8 : not (eq C' Q)
H7 : not (eq Q' P)
HOS : OS P Q C' A'
HPerp : Perp P Q A' P
A' : Tpoint
HPar : Par_strict Q' Q C' P
HObtuse : Obtuse C' P Q
H6 : Coplanar Q' C' P Q
H5 : Per Q' C' P
H4 : Per Q' Q P
H3 : Per C' Q' Q
H2 : not (eq Q' Q)
H1 : not (eq P Q)
H0 : not (eq C' P)
H : not (eq Q' C')
Q',C',P,Q : Tpoint
obtuse : hypothesis_of_obtuse_saccheri_quadrilaterals
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Out Q P Z
+++++
apply col_one_side_out with Q'; Col.
-----
Lemma aristotle__obtuse_case_elimination : aristotle_s_axiom -> ~ hypothesis_of_obtuse_saccheri_quadrilaterals.
Proof.
intros aristotle obtuse.
destruct ex_lambert as [Q' [C' [P [Q HLam]]]].
assert (HObtuse : Obtuse C' P Q) by (apply <- (lam_obtuse__oah Q'); trivial).
assert (HPar : Par_strict Q' Q C' P) by (apply lam__par_strict1423, HLam).
destruct HLam; spliter.
destruct (l10_15 P Q P C') as [A' [HPerp HOS]]; Col.
apply not_col_permutation_1.
apply par_strict_not_col_1 with Q'; Par.
assert_diffs.
assert (HLtA : LtA Q P A' C' P Q) by (apply obtuse_per__lta; Perp).
destruct HLtA as [HLeA HNCongA].
assert (HInAngle : InAngle A' Q P C').
apply lea_in_angle; Side; apply lea_right_comm; trivial.
destruct (segment_construction C' P C' P) as [C [HC1 HC2]].
destruct (segment_construction A' P A' P) as [A [HA1 HA2]].
assert_diffs.
assert (HInAngle1 : InAngle C A P Q).
apply in_angle_reverse with A'; auto.
apply l11_24, in_angle_reverse with C'; auto.
apply l11_24; trivial.
assert (HNCol : ~ Col P C' A').
assert (HNCol1 : ~ Col P C A) by (intro; apply HNCol; ColR).
assert (HNCol2 : ~ Col P Q C) by (intro; apply (par_strict_not_col_2 Q' Q C' P); ColR).
assert (HPer : Per A P Q) by (apply l8_2, per_col with A'; Perp; Col).
assert (HOS1 : OS A P C Q).
apply in_angle_one_side; Col.
apply per_not_col; auto.
destruct (aristotle P Q A P C) as [X [Y]]; Col.
spliter.
apply (not_and_lt P Q X Y).
split; trivial.
destruct (l8_18_existence P Q Y) as [Z [HZ1 HZ2]].
intro; assert_diffs; apply HNCol2; ColR.
apply lt_transitivity with P Z.
-
assert (P <> Z).
assert (HLam : Lambert P X Y Z).
apply lam_obtuse__lt; trivial.
apply <- (lam_obtuse__oah P); trivial.
-
assert (HOut : Out Q P Z).
apply col_one_side_out with Q'; Col.

*****
HZ2 : Perp P Q Y Z
HZ1 : Col P Q Z
Z : Tpoint
H18 : Lt P Q X Y
H17 : Per P X Y
H15 : Out P C Y
H14 : Out P A X
X,Y : Tpoint
HOS1 : OS A P C Q
HPer : Per A P Q
HNCol2 : not (Col P Q C)
HNCol1 : not (Col P C A)
HNCol : not (Col P C' A')
HInAngle1 : InAngle C A P Q
H13 : not (eq P C)
H12 : not (eq P A)
H10 : not (eq C' C)
H9 : not (eq A' A)
HA2 : Cong P A A' P
HA1 : Bet A' P A
A : Tpoint
HC2 : Cong P C C' P
HC1 : Bet C' P C
C : Tpoint
HInAngle : InAngle A' Q P C'
HNCongA : not (CongA Q P A' C' P Q)
HLeA : LeA Q P A' C' P Q
H16 : not (eq Q A')
H11 : not (eq A' P)
H8 : not (eq C' Q)
H7 : not (eq Q' P)
HOS : OS P Q C' A'
HPerp : Perp P Q A' P
A' : Tpoint
HPar : Par_strict Q' Q C' P
HObtuse : Obtuse C' P Q
H6 : Coplanar Q' C' P Q
H5 : Per Q' C' P
H4 : Per Q' Q P
H3 : Per C' Q' Q
H2 : not (eq Q' Q)
H1 : not (eq P Q)
H0 : not (eq C' P)
H : not (eq Q' C')
Q',C',P,Q : Tpoint
obtuse : hypothesis_of_obtuse_saccheri_quadrilaterals
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS Q Q' P Z
+++++
apply one_side_transitivity with Y.
-----
Lemma aristotle__obtuse_case_elimination : aristotle_s_axiom -> ~ hypothesis_of_obtuse_saccheri_quadrilaterals.
Proof.
intros aristotle obtuse.
destruct ex_lambert as [Q' [C' [P [Q HLam]]]].
assert (HObtuse : Obtuse C' P Q) by (apply <- (lam_obtuse__oah Q'); trivial).
assert (HPar : Par_strict Q' Q C' P) by (apply lam__par_strict1423, HLam).
destruct HLam; spliter.
destruct (l10_15 P Q P C') as [A' [HPerp HOS]]; Col.
apply not_col_permutation_1.
apply par_strict_not_col_1 with Q'; Par.
assert_diffs.
assert (HLtA : LtA Q P A' C' P Q) by (apply obtuse_per__lta; Perp).
destruct HLtA as [HLeA HNCongA].
assert (HInAngle : InAngle A' Q P C').
apply lea_in_angle; Side; apply lea_right_comm; trivial.
destruct (segment_construction C' P C' P) as [C [HC1 HC2]].
destruct (segment_construction A' P A' P) as [A [HA1 HA2]].
assert_diffs.
assert (HInAngle1 : InAngle C A P Q).
apply in_angle_reverse with A'; auto.
apply l11_24, in_angle_reverse with C'; auto.
apply l11_24; trivial.
assert (HNCol : ~ Col P C' A').
assert (HNCol1 : ~ Col P C A) by (intro; apply HNCol; ColR).
assert (HNCol2 : ~ Col P Q C) by (intro; apply (par_strict_not_col_2 Q' Q C' P); ColR).
assert (HPer : Per A P Q) by (apply l8_2, per_col with A'; Perp; Col).
assert (HOS1 : OS A P C Q).
apply in_angle_one_side; Col.
apply per_not_col; auto.
destruct (aristotle P Q A P C) as [X [Y]]; Col.
spliter.
apply (not_and_lt P Q X Y).
split; trivial.
destruct (l8_18_existence P Q Y) as [Z [HZ1 HZ2]].
intro; assert_diffs; apply HNCol2; ColR.
apply lt_transitivity with P Z.
-
assert (P <> Z).
assert (HLam : Lambert P X Y Z).
apply lam_obtuse__lt; trivial.
apply <- (lam_obtuse__oah P); trivial.
-
assert (HOut : Out Q P Z).
apply col_one_side_out with Q'; Col.
apply one_side_transitivity with Y.

*****
HZ2 : Perp P Q Y Z
HZ1 : Col P Q Z
Z : Tpoint
H18 : Lt P Q X Y
H17 : Per P X Y
H15 : Out P C Y
H14 : Out P A X
X,Y : Tpoint
HOS1 : OS A P C Q
HPer : Per A P Q
HNCol2 : not (Col P Q C)
HNCol1 : not (Col P C A)
HNCol : not (Col P C' A')
HInAngle1 : InAngle C A P Q
H13 : not (eq P C)
H12 : not (eq P A)
H10 : not (eq C' C)
H9 : not (eq A' A)
HA2 : Cong P A A' P
HA1 : Bet A' P A
A : Tpoint
HC2 : Cong P C C' P
HC1 : Bet C' P C
C : Tpoint
HInAngle : InAngle A' Q P C'
HNCongA : not (CongA Q P A' C' P Q)
HLeA : LeA Q P A' C' P Q
H16 : not (eq Q A')
H11 : not (eq A' P)
H8 : not (eq C' Q)
H7 : not (eq Q' P)
HOS : OS P Q C' A'
HPerp : Perp P Q A' P
A' : Tpoint
HPar : Par_strict Q' Q C' P
HObtuse : Obtuse C' P Q
H6 : Coplanar Q' C' P Q
H5 : Per Q' C' P
H4 : Per Q' Q P
H3 : Per C' Q' Q
H2 : not (eq Q' Q)
H1 : not (eq P Q)
H0 : not (eq C' P)
H : not (eq Q' C')
Q',C',P,Q : Tpoint
obtuse : hypothesis_of_obtuse_saccheri_quadrilaterals
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS Q Q' P Y
+++++
apply l12_6, par_strict_col_par_strict with C'; Par; ColR.
-----
Lemma aristotle__obtuse_case_elimination : aristotle_s_axiom -> ~ hypothesis_of_obtuse_saccheri_quadrilaterals.
Proof.
intros aristotle obtuse.
destruct ex_lambert as [Q' [C' [P [Q HLam]]]].
assert (HObtuse : Obtuse C' P Q) by (apply <- (lam_obtuse__oah Q'); trivial).
assert (HPar : Par_strict Q' Q C' P) by (apply lam__par_strict1423, HLam).
destruct HLam; spliter.
destruct (l10_15 P Q P C') as [A' [HPerp HOS]]; Col.
apply not_col_permutation_1.
apply par_strict_not_col_1 with Q'; Par.
assert_diffs.
assert (HLtA : LtA Q P A' C' P Q) by (apply obtuse_per__lta; Perp).
destruct HLtA as [HLeA HNCongA].
assert (HInAngle : InAngle A' Q P C').
apply lea_in_angle; Side; apply lea_right_comm; trivial.
destruct (segment_construction C' P C' P) as [C [HC1 HC2]].
destruct (segment_construction A' P A' P) as [A [HA1 HA2]].
assert_diffs.
assert (HInAngle1 : InAngle C A P Q).
apply in_angle_reverse with A'; auto.
apply l11_24, in_angle_reverse with C'; auto.
apply l11_24; trivial.
assert (HNCol : ~ Col P C' A').
assert (HNCol1 : ~ Col P C A) by (intro; apply HNCol; ColR).
assert (HNCol2 : ~ Col P Q C) by (intro; apply (par_strict_not_col_2 Q' Q C' P); ColR).
assert (HPer : Per A P Q) by (apply l8_2, per_col with A'; Perp; Col).
assert (HOS1 : OS A P C Q).
apply in_angle_one_side; Col.
apply per_not_col; auto.
destruct (aristotle P Q A P C) as [X [Y]]; Col.
spliter.
apply (not_and_lt P Q X Y).
split; trivial.
destruct (l8_18_existence P Q Y) as [Z [HZ1 HZ2]].
intro; assert_diffs; apply HNCol2; ColR.
apply lt_transitivity with P Z.
-
assert (P <> Z).
assert (HLam : Lambert P X Y Z).
apply lam_obtuse__lt; trivial.
apply <- (lam_obtuse__oah P); trivial.
-
assert (HOut : Out Q P Z).
apply col_one_side_out with Q'; Col.
apply one_side_transitivity with Y.
apply l12_6, par_strict_col_par_strict with C'; Par; ColR.

*****
HZ2 : Perp P Q Y Z
HZ1 : Col P Q Z
Z : Tpoint
H18 : Lt P Q X Y
H17 : Per P X Y
H15 : Out P C Y
H14 : Out P A X
X,Y : Tpoint
HOS1 : OS A P C Q
HPer : Per A P Q
HNCol2 : not (Col P Q C)
HNCol1 : not (Col P C A)
HNCol : not (Col P C' A')
HInAngle1 : InAngle C A P Q
H13 : not (eq P C)
H12 : not (eq P A)
H10 : not (eq C' C)
H9 : not (eq A' A)
HA2 : Cong P A A' P
HA1 : Bet A' P A
A : Tpoint
HC2 : Cong P C C' P
HC1 : Bet C' P C
C : Tpoint
HInAngle : InAngle A' Q P C'
HNCongA : not (CongA Q P A' C' P Q)
HLeA : LeA Q P A' C' P Q
H16 : not (eq Q A')
H11 : not (eq A' P)
H8 : not (eq C' Q)
H7 : not (eq Q' P)
HOS : OS P Q C' A'
HPerp : Perp P Q A' P
A' : Tpoint
HPar : Par_strict Q' Q C' P
HObtuse : Obtuse C' P Q
H6 : Coplanar Q' C' P Q
H5 : Per Q' C' P
H4 : Per Q' Q P
H3 : Per C' Q' Q
H2 : not (eq Q' Q)
H1 : not (eq P Q)
H0 : not (eq C' P)
H : not (eq Q' C')
Q',C',P,Q : Tpoint
obtuse : hypothesis_of_obtuse_saccheri_quadrilaterals
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS Q Q' Y Z
+++++
apply l12_6, par_not_col_strict with Y; Col.
-----
Lemma aristotle__obtuse_case_elimination : aristotle_s_axiom -> ~ hypothesis_of_obtuse_saccheri_quadrilaterals.
Proof.
intros aristotle obtuse.
destruct ex_lambert as [Q' [C' [P [Q HLam]]]].
assert (HObtuse : Obtuse C' P Q) by (apply <- (lam_obtuse__oah Q'); trivial).
assert (HPar : Par_strict Q' Q C' P) by (apply lam__par_strict1423, HLam).
destruct HLam; spliter.
destruct (l10_15 P Q P C') as [A' [HPerp HOS]]; Col.
apply not_col_permutation_1.
apply par_strict_not_col_1 with Q'; Par.
assert_diffs.
assert (HLtA : LtA Q P A' C' P Q) by (apply obtuse_per__lta; Perp).
destruct HLtA as [HLeA HNCongA].
assert (HInAngle : InAngle A' Q P C').
apply lea_in_angle; Side; apply lea_right_comm; trivial.
destruct (segment_construction C' P C' P) as [C [HC1 HC2]].
destruct (segment_construction A' P A' P) as [A [HA1 HA2]].
assert_diffs.
assert (HInAngle1 : InAngle C A P Q).
apply in_angle_reverse with A'; auto.
apply l11_24, in_angle_reverse with C'; auto.
apply l11_24; trivial.
assert (HNCol : ~ Col P C' A').
assert (HNCol1 : ~ Col P C A) by (intro; apply HNCol; ColR).
assert (HNCol2 : ~ Col P Q C) by (intro; apply (par_strict_not_col_2 Q' Q C' P); ColR).
assert (HPer : Per A P Q) by (apply l8_2, per_col with A'; Perp; Col).
assert (HOS1 : OS A P C Q).
apply in_angle_one_side; Col.
apply per_not_col; auto.
destruct (aristotle P Q A P C) as [X [Y]]; Col.
spliter.
apply (not_and_lt P Q X Y).
split; trivial.
destruct (l8_18_existence P Q Y) as [Z [HZ1 HZ2]].
intro; assert_diffs; apply HNCol2; ColR.
apply lt_transitivity with P Z.
-
assert (P <> Z).
assert (HLam : Lambert P X Y Z).
apply lam_obtuse__lt; trivial.
apply <- (lam_obtuse__oah P); trivial.
-
assert (HOut : Out Q P Z).
apply col_one_side_out with Q'; Col.
apply one_side_transitivity with Y.
apply l12_6, par_strict_col_par_strict with C'; Par; ColR.
apply l12_6, par_not_col_strict with Y; Col.

*****
HZ2 : Perp P Q Y Z
HZ1 : Col P Q Z
Z : Tpoint
H18 : Lt P Q X Y
H17 : Per P X Y
H15 : Out P C Y
H14 : Out P A X
X,Y : Tpoint
HOS1 : OS A P C Q
HPer : Per A P Q
HNCol2 : not (Col P Q C)
HNCol1 : not (Col P C A)
HNCol : not (Col P C' A')
HInAngle1 : InAngle C A P Q
H13 : not (eq P C)
H12 : not (eq P A)
H10 : not (eq C' C)
H9 : not (eq A' A)
HA2 : Cong P A A' P
HA1 : Bet A' P A
A : Tpoint
HC2 : Cong P C C' P
HC1 : Bet C' P C
C : Tpoint
HInAngle : InAngle A' Q P C'
HNCongA : not (CongA Q P A' C' P Q)
HLeA : LeA Q P A' C' P Q
H16 : not (eq Q A')
H11 : not (eq A' P)
H8 : not (eq C' Q)
H7 : not (eq Q' P)
HOS : OS P Q C' A'
HPerp : Perp P Q A' P
A' : Tpoint
HPar : Par_strict Q' Q C' P
HObtuse : Obtuse C' P Q
H6 : Coplanar Q' C' P Q
H5 : Per Q' C' P
H4 : Per Q' Q P
H3 : Per C' Q' Q
H2 : not (eq Q' Q)
H1 : not (eq P Q)
H0 : not (eq C' P)
H : not (eq Q' C')
Q',C',P,Q : Tpoint
obtuse : hypothesis_of_obtuse_saccheri_quadrilaterals
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par Q Q' Y Z
+++++
apply l12_9 with P Q; Perp; [Cop..| |Cop].
-----
Lemma aristotle__obtuse_case_elimination : aristotle_s_axiom -> ~ hypothesis_of_obtuse_saccheri_quadrilaterals.
Proof.
intros aristotle obtuse.
destruct ex_lambert as [Q' [C' [P [Q HLam]]]].
assert (HObtuse : Obtuse C' P Q) by (apply <- (lam_obtuse__oah Q'); trivial).
assert (HPar : Par_strict Q' Q C' P) by (apply lam__par_strict1423, HLam).
destruct HLam; spliter.
destruct (l10_15 P Q P C') as [A' [HPerp HOS]]; Col.
apply not_col_permutation_1.
apply par_strict_not_col_1 with Q'; Par.
assert_diffs.
assert (HLtA : LtA Q P A' C' P Q) by (apply obtuse_per__lta; Perp).
destruct HLtA as [HLeA HNCongA].
assert (HInAngle : InAngle A' Q P C').
apply lea_in_angle; Side; apply lea_right_comm; trivial.
destruct (segment_construction C' P C' P) as [C [HC1 HC2]].
destruct (segment_construction A' P A' P) as [A [HA1 HA2]].
assert_diffs.
assert (HInAngle1 : InAngle C A P Q).
apply in_angle_reverse with A'; auto.
apply l11_24, in_angle_reverse with C'; auto.
apply l11_24; trivial.
assert (HNCol : ~ Col P C' A').
assert (HNCol1 : ~ Col P C A) by (intro; apply HNCol; ColR).
assert (HNCol2 : ~ Col P Q C) by (intro; apply (par_strict_not_col_2 Q' Q C' P); ColR).
assert (HPer : Per A P Q) by (apply l8_2, per_col with A'; Perp; Col).
assert (HOS1 : OS A P C Q).
apply in_angle_one_side; Col.
apply per_not_col; auto.
destruct (aristotle P Q A P C) as [X [Y]]; Col.
spliter.
apply (not_and_lt P Q X Y).
split; trivial.
destruct (l8_18_existence P Q Y) as [Z [HZ1 HZ2]].
intro; assert_diffs; apply HNCol2; ColR.
apply lt_transitivity with P Z.
-
assert (P <> Z).
assert (HLam : Lambert P X Y Z).
apply lam_obtuse__lt; trivial.
apply <- (lam_obtuse__oah P); trivial.
-
assert (HOut : Out Q P Z).
apply col_one_side_out with Q'; Col.
apply one_side_transitivity with Y.
apply l12_6, par_strict_col_par_strict with C'; Par; ColR.
apply l12_6, par_not_col_strict with Y; Col.
apply l12_9 with P Q; Perp; [Cop..| |Cop].

*****
HZ2 : Perp P Q Y Z
HZ1 : Col P Q Z
Z : Tpoint
H18 : Lt P Q X Y
H17 : Per P X Y
H15 : Out P C Y
H14 : Out P A X
X,Y : Tpoint
HOS1 : OS A P C Q
HPer : Per A P Q
HNCol2 : not (Col P Q C)
HNCol1 : not (Col P C A)
HNCol : not (Col P C' A')
HInAngle1 : InAngle C A P Q
H13 : not (eq P C)
H12 : not (eq P A)
H10 : not (eq C' C)
H9 : not (eq A' A)
HA2 : Cong P A A' P
HA1 : Bet A' P A
A : Tpoint
HC2 : Cong P C C' P
HC1 : Bet C' P C
C : Tpoint
HInAngle : InAngle A' Q P C'
HNCongA : not (CongA Q P A' C' P Q)
HLeA : LeA Q P A' C' P Q
H16 : not (eq Q A')
H11 : not (eq A' P)
H8 : not (eq C' Q)
H7 : not (eq Q' P)
HOS : OS P Q C' A'
HPerp : Perp P Q A' P
A' : Tpoint
HPar : Par_strict Q' Q C' P
HObtuse : Obtuse C' P Q
H6 : Coplanar Q' C' P Q
H5 : Per Q' C' P
H4 : Per Q' Q P
H3 : Per C' Q' Q
H2 : not (eq Q' Q)
H1 : not (eq P Q)
H0 : not (eq C' P)
H : not (eq Q' C')
Q',C',P,Q : Tpoint
obtuse : hypothesis_of_obtuse_saccheri_quadrilaterals
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar P Q Q' Y
+++++
apply coplanar_perm_12, col_cop__cop with C; Col.
-----
Lemma aristotle__obtuse_case_elimination : aristotle_s_axiom -> ~ hypothesis_of_obtuse_saccheri_quadrilaterals.
Proof.
intros aristotle obtuse.
destruct ex_lambert as [Q' [C' [P [Q HLam]]]].
assert (HObtuse : Obtuse C' P Q) by (apply <- (lam_obtuse__oah Q'); trivial).
assert (HPar : Par_strict Q' Q C' P) by (apply lam__par_strict1423, HLam).
destruct HLam; spliter.
destruct (l10_15 P Q P C') as [A' [HPerp HOS]]; Col.
apply not_col_permutation_1.
apply par_strict_not_col_1 with Q'; Par.
assert_diffs.
assert (HLtA : LtA Q P A' C' P Q) by (apply obtuse_per__lta; Perp).
destruct HLtA as [HLeA HNCongA].
assert (HInAngle : InAngle A' Q P C').
apply lea_in_angle; Side; apply lea_right_comm; trivial.
destruct (segment_construction C' P C' P) as [C [HC1 HC2]].
destruct (segment_construction A' P A' P) as [A [HA1 HA2]].
assert_diffs.
assert (HInAngle1 : InAngle C A P Q).
apply in_angle_reverse with A'; auto.
apply l11_24, in_angle_reverse with C'; auto.
apply l11_24; trivial.
assert (HNCol : ~ Col P C' A').
assert (HNCol1 : ~ Col P C A) by (intro; apply HNCol; ColR).
assert (HNCol2 : ~ Col P Q C) by (intro; apply (par_strict_not_col_2 Q' Q C' P); ColR).
assert (HPer : Per A P Q) by (apply l8_2, per_col with A'; Perp; Col).
assert (HOS1 : OS A P C Q).
apply in_angle_one_side; Col.
apply per_not_col; auto.
destruct (aristotle P Q A P C) as [X [Y]]; Col.
spliter.
apply (not_and_lt P Q X Y).
split; trivial.
destruct (l8_18_existence P Q Y) as [Z [HZ1 HZ2]].
intro; assert_diffs; apply HNCol2; ColR.
apply lt_transitivity with P Z.
-
assert (P <> Z).
assert (HLam : Lambert P X Y Z).
apply lam_obtuse__lt; trivial.
apply <- (lam_obtuse__oah P); trivial.
-
assert (HOut : Out Q P Z).
apply col_one_side_out with Q'; Col.
apply one_side_transitivity with Y.
apply l12_6, par_strict_col_par_strict with C'; Par; ColR.
apply l12_6, par_not_col_strict with Y; Col.
apply l12_9 with P Q; Perp; [Cop..| |Cop].
apply coplanar_perm_12, col_cop__cop with C; Col.

*****
HZ2 : Perp P Q Y Z
HZ1 : Col P Q Z
Z : Tpoint
H18 : Lt P Q X Y
H17 : Per P X Y
H15 : Out P C Y
H14 : Out P A X
X,Y : Tpoint
HOS1 : OS A P C Q
HPer : Per A P Q
HNCol2 : not (Col P Q C)
HNCol1 : not (Col P C A)
HNCol : not (Col P C' A')
HInAngle1 : InAngle C A P Q
H13 : not (eq P C)
H12 : not (eq P A)
H10 : not (eq C' C)
H9 : not (eq A' A)
HA2 : Cong P A A' P
HA1 : Bet A' P A
A : Tpoint
HC2 : Cong P C C' P
HC1 : Bet C' P C
C : Tpoint
HInAngle : InAngle A' Q P C'
HNCongA : not (CongA Q P A' C' P Q)
HLeA : LeA Q P A' C' P Q
H16 : not (eq Q A')
H11 : not (eq A' P)
H8 : not (eq C' Q)
H7 : not (eq Q' P)
HOS : OS P Q C' A'
HPerp : Perp P Q A' P
A' : Tpoint
HPar : Par_strict Q' Q C' P
HObtuse : Obtuse C' P Q
H6 : Coplanar Q' C' P Q
H5 : Per Q' C' P
H4 : Per Q' Q P
H3 : Per C' Q' Q
H2 : not (eq Q' Q)
H1 : not (eq P Q)
H0 : not (eq C' P)
H : not (eq Q' C')
Q',C',P,Q : Tpoint
obtuse : hypothesis_of_obtuse_saccheri_quadrilaterals
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar Q Q' P C
+++++
apply col_cop__cop with C'; Col; Cop.
-----
Lemma aristotle__obtuse_case_elimination : aristotle_s_axiom -> ~ hypothesis_of_obtuse_saccheri_quadrilaterals.
Proof.
intros aristotle obtuse.
destruct ex_lambert as [Q' [C' [P [Q HLam]]]].
assert (HObtuse : Obtuse C' P Q) by (apply <- (lam_obtuse__oah Q'); trivial).
assert (HPar : Par_strict Q' Q C' P) by (apply lam__par_strict1423, HLam).
destruct HLam; spliter.
destruct (l10_15 P Q P C') as [A' [HPerp HOS]]; Col.
apply not_col_permutation_1.
apply par_strict_not_col_1 with Q'; Par.
assert_diffs.
assert (HLtA : LtA Q P A' C' P Q) by (apply obtuse_per__lta; Perp).
destruct HLtA as [HLeA HNCongA].
assert (HInAngle : InAngle A' Q P C').
apply lea_in_angle; Side; apply lea_right_comm; trivial.
destruct (segment_construction C' P C' P) as [C [HC1 HC2]].
destruct (segment_construction A' P A' P) as [A [HA1 HA2]].
assert_diffs.
assert (HInAngle1 : InAngle C A P Q).
apply in_angle_reverse with A'; auto.
apply l11_24, in_angle_reverse with C'; auto.
apply l11_24; trivial.
assert (HNCol : ~ Col P C' A').
assert (HNCol1 : ~ Col P C A) by (intro; apply HNCol; ColR).
assert (HNCol2 : ~ Col P Q C) by (intro; apply (par_strict_not_col_2 Q' Q C' P); ColR).
assert (HPer : Per A P Q) by (apply l8_2, per_col with A'; Perp; Col).
assert (HOS1 : OS A P C Q).
apply in_angle_one_side; Col.
apply per_not_col; auto.
destruct (aristotle P Q A P C) as [X [Y]]; Col.
spliter.
apply (not_and_lt P Q X Y).
split; trivial.
destruct (l8_18_existence P Q Y) as [Z [HZ1 HZ2]].
intro; assert_diffs; apply HNCol2; ColR.
apply lt_transitivity with P Z.
-
assert (P <> Z).
assert (HLam : Lambert P X Y Z).
apply lam_obtuse__lt; trivial.
apply <- (lam_obtuse__oah P); trivial.
-
assert (HOut : Out Q P Z).
apply col_one_side_out with Q'; Col.
apply one_side_transitivity with Y.
apply l12_6, par_strict_col_par_strict with C'; Par; ColR.
apply l12_6, par_not_col_strict with Y; Col.

*****
HZ2 : Perp P Q Y Z
HZ1 : Col P Q Z
Z : Tpoint
H18 : Lt P Q X Y
H17 : Per P X Y
H15 : Out P C Y
H14 : Out P A X
X,Y : Tpoint
HOS1 : OS A P C Q
HPer : Per A P Q
HNCol2 : not (Col P Q C)
HNCol1 : not (Col P C A)
HNCol : not (Col P C' A')
HInAngle1 : InAngle C A P Q
H13 : not (eq P C)
H12 : not (eq P A)
H10 : not (eq C' C)
H9 : not (eq A' A)
HA2 : Cong P A A' P
HA1 : Bet A' P A
A : Tpoint
HC2 : Cong P C C' P
HC1 : Bet C' P C
C : Tpoint
HInAngle : InAngle A' Q P C'
HNCongA : not (CongA Q P A' C' P Q)
HLeA : LeA Q P A' C' P Q
H16 : not (eq Q A')
H11 : not (eq A' P)
H8 : not (eq C' Q)
H7 : not (eq Q' P)
HOS : OS P Q C' A'
HPerp : Perp P Q A' P
A' : Tpoint
HPar : Par_strict Q' Q C' P
HObtuse : Obtuse C' P Q
H6 : Coplanar Q' C' P Q
H5 : Per Q' C' P
H4 : Per Q' Q P
H3 : Per C' Q' Q
H2 : not (eq Q' Q)
H1 : not (eq P Q)
H0 : not (eq C' P)
H : not (eq Q' C')
Q',C',P,Q : Tpoint
obtuse : hypothesis_of_obtuse_saccheri_quadrilaterals
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col Q Q' Y)
+++++
apply not_col_permutation_1, par_not_col with P C'; Par; ColR.
-----
Lemma aristotle__obtuse_case_elimination : aristotle_s_axiom -> ~ hypothesis_of_obtuse_saccheri_quadrilaterals.
Proof.
intros aristotle obtuse.
destruct ex_lambert as [Q' [C' [P [Q HLam]]]].
assert (HObtuse : Obtuse C' P Q) by (apply <- (lam_obtuse__oah Q'); trivial).
assert (HPar : Par_strict Q' Q C' P) by (apply lam__par_strict1423, HLam).
destruct HLam; spliter.
destruct (l10_15 P Q P C') as [A' [HPerp HOS]]; Col.
apply not_col_permutation_1.
apply par_strict_not_col_1 with Q'; Par.
assert_diffs.
assert (HLtA : LtA Q P A' C' P Q) by (apply obtuse_per__lta; Perp).
destruct HLtA as [HLeA HNCongA].
assert (HInAngle : InAngle A' Q P C').
apply lea_in_angle; Side; apply lea_right_comm; trivial.
destruct (segment_construction C' P C' P) as [C [HC1 HC2]].
destruct (segment_construction A' P A' P) as [A [HA1 HA2]].
assert_diffs.
assert (HInAngle1 : InAngle C A P Q).
apply in_angle_reverse with A'; auto.
apply l11_24, in_angle_reverse with C'; auto.
apply l11_24; trivial.
assert (HNCol : ~ Col P C' A').
assert (HNCol1 : ~ Col P C A) by (intro; apply HNCol; ColR).
assert (HNCol2 : ~ Col P Q C) by (intro; apply (par_strict_not_col_2 Q' Q C' P); ColR).
assert (HPer : Per A P Q) by (apply l8_2, per_col with A'; Perp; Col).
assert (HOS1 : OS A P C Q).
apply in_angle_one_side; Col.
apply per_not_col; auto.
destruct (aristotle P Q A P C) as [X [Y]]; Col.
spliter.
apply (not_and_lt P Q X Y).
split; trivial.
destruct (l8_18_existence P Q Y) as [Z [HZ1 HZ2]].
intro; assert_diffs; apply HNCol2; ColR.
apply lt_transitivity with P Z.
-
assert (P <> Z).
assert (HLam : Lambert P X Y Z).
apply lam_obtuse__lt; trivial.
apply <- (lam_obtuse__oah P); trivial.
-
assert (HOut : Out Q P Z).

*****
HOut : Out Q P Z
HZ2 : Perp P Q Y Z
HZ1 : Col P Q Z
Z : Tpoint
H18 : Lt P Q X Y
H17 : Per P X Y
H15 : Out P C Y
H14 : Out P A X
X,Y : Tpoint
HOS1 : OS A P C Q
HPer : Per A P Q
HNCol2 : not (Col P Q C)
HNCol1 : not (Col P C A)
HNCol : not (Col P C' A')
HInAngle1 : InAngle C A P Q
H13 : not (eq P C)
H12 : not (eq P A)
H10 : not (eq C' C)
H9 : not (eq A' A)
HA2 : Cong P A A' P
HA1 : Bet A' P A
A : Tpoint
HC2 : Cong P C C' P
HC1 : Bet C' P C
C : Tpoint
HInAngle : InAngle A' Q P C'
HNCongA : not (CongA Q P A' C' P Q)
HLeA : LeA Q P A' C' P Q
H16 : not (eq Q A')
H11 : not (eq A' P)
H8 : not (eq C' Q)
H7 : not (eq Q' P)
HOS : OS P Q C' A'
HPerp : Perp P Q A' P
A' : Tpoint
HPar : Par_strict Q' Q C' P
HObtuse : Obtuse C' P Q
H6 : Coplanar Q' C' P Q
H5 : Per Q' C' P
H4 : Per Q' Q P
H3 : Per C' Q' Q
H2 : not (eq Q' Q)
H1 : not (eq P Q)
H0 : not (eq C' P)
H : not (eq Q' C')
Q',C',P,Q : Tpoint
obtuse : hypothesis_of_obtuse_saccheri_quadrilaterals
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Lt P Z P Q
+++++
assert_diffs.
-----
Lemma aristotle__obtuse_case_elimination : aristotle_s_axiom -> ~ hypothesis_of_obtuse_saccheri_quadrilaterals.
Proof.
intros aristotle obtuse.
destruct ex_lambert as [Q' [C' [P [Q HLam]]]].
assert (HObtuse : Obtuse C' P Q) by (apply <- (lam_obtuse__oah Q'); trivial).
assert (HPar : Par_strict Q' Q C' P) by (apply lam__par_strict1423, HLam).
destruct HLam; spliter.
destruct (l10_15 P Q P C') as [A' [HPerp HOS]]; Col.
apply not_col_permutation_1.
apply par_strict_not_col_1 with Q'; Par.
assert_diffs.
assert (HLtA : LtA Q P A' C' P Q) by (apply obtuse_per__lta; Perp).
destruct HLtA as [HLeA HNCongA].
assert (HInAngle : InAngle A' Q P C').
apply lea_in_angle; Side; apply lea_right_comm; trivial.
destruct (segment_construction C' P C' P) as [C [HC1 HC2]].
destruct (segment_construction A' P A' P) as [A [HA1 HA2]].
assert_diffs.
assert (HInAngle1 : InAngle C A P Q).
apply in_angle_reverse with A'; auto.
apply l11_24, in_angle_reverse with C'; auto.
apply l11_24; trivial.
assert (HNCol : ~ Col P C' A').
assert (HNCol1 : ~ Col P C A) by (intro; apply HNCol; ColR).
assert (HNCol2 : ~ Col P Q C) by (intro; apply (par_strict_not_col_2 Q' Q C' P); ColR).
assert (HPer : Per A P Q) by (apply l8_2, per_col with A'; Perp; Col).
assert (HOS1 : OS A P C Q).
apply in_angle_one_side; Col.
apply per_not_col; auto.
destruct (aristotle P Q A P C) as [X [Y]]; Col.
spliter.
apply (not_and_lt P Q X Y).
split; trivial.
destruct (l8_18_existence P Q Y) as [Z [HZ1 HZ2]].
intro; assert_diffs; apply HNCol2; ColR.
apply lt_transitivity with P Z.
-
assert (P <> Z).
assert (HLam : Lambert P X Y Z).
apply lam_obtuse__lt; trivial.
apply <- (lam_obtuse__oah P); trivial.
-
assert (HOut : Out Q P Z).
assert_diffs.

*****
H29 : not (eq X P)
H28 : not (eq Z Q)
H27 : not (eq Y Z)
H24 : not (eq P Y)
H20 : not (eq A Q)
H19 : not (eq X Y)
H23 : not (eq C' A')
H22 : not (eq C A)
H21 : not (eq Q C)
HOut : Out Q P Z
HZ2 : Perp P Q Y Z
HZ1 : Col P Q Z
Z : Tpoint
H18 : Lt P Q X Y
H17 : Per P X Y
H15 : Out P C Y
H14 : Out P A X
X,Y : Tpoint
HOS1 : OS A P C Q
HPer : Per A P Q
HNCol2 : not (Col P Q C)
HNCol1 : not (Col P C A)
HNCol : not (Col P C' A')
HInAngle1 : InAngle C A P Q
H13 : not (eq P C)
H12 : not (eq P A)
H10 : not (eq C' C)
H9 : not (eq A' A)
HA2 : Cong P A A' P
HA1 : Bet A' P A
A : Tpoint
HC2 : Cong P C C' P
HC1 : Bet C' P C
C : Tpoint
HInAngle : InAngle A' Q P C'
HNCongA : not (CongA Q P A' C' P Q)
HLeA : LeA Q P A' C' P Q
H16 : not (eq Q A')
H11 : not (eq A' P)
H8 : not (eq C' Q)
H7 : not (eq Q' P)
HOS : OS P Q C' A'
HPerp : Perp P Q A' P
A' : Tpoint
HPar : Par_strict Q' Q C' P
HObtuse : Obtuse C' P Q
H6 : Coplanar Q' C' P Q
H5 : Per Q' C' P
H4 : Per Q' Q P
H3 : Per C' Q' Q
H2 : not (eq Q' Q)
H1 : not (eq P Q)
H0 : not (eq C' P)
H : not (eq Q' C')
Q',C',P,Q : Tpoint
obtuse : hypothesis_of_obtuse_saccheri_quadrilaterals
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Lt P Z P Q
+++++
apply bet__lt1213; auto.
-----
Lemma aristotle__obtuse_case_elimination : aristotle_s_axiom -> ~ hypothesis_of_obtuse_saccheri_quadrilaterals.
Proof.
intros aristotle obtuse.
destruct ex_lambert as [Q' [C' [P [Q HLam]]]].
assert (HObtuse : Obtuse C' P Q) by (apply <- (lam_obtuse__oah Q'); trivial).
assert (HPar : Par_strict Q' Q C' P) by (apply lam__par_strict1423, HLam).
destruct HLam; spliter.
destruct (l10_15 P Q P C') as [A' [HPerp HOS]]; Col.
apply not_col_permutation_1.
apply par_strict_not_col_1 with Q'; Par.
assert_diffs.
assert (HLtA : LtA Q P A' C' P Q) by (apply obtuse_per__lta; Perp).
destruct HLtA as [HLeA HNCongA].
assert (HInAngle : InAngle A' Q P C').
apply lea_in_angle; Side; apply lea_right_comm; trivial.
destruct (segment_construction C' P C' P) as [C [HC1 HC2]].
destruct (segment_construction A' P A' P) as [A [HA1 HA2]].
assert_diffs.
assert (HInAngle1 : InAngle C A P Q).
apply in_angle_reverse with A'; auto.
apply l11_24, in_angle_reverse with C'; auto.
apply l11_24; trivial.
assert (HNCol : ~ Col P C' A').
assert (HNCol1 : ~ Col P C A) by (intro; apply HNCol; ColR).
assert (HNCol2 : ~ Col P Q C) by (intro; apply (par_strict_not_col_2 Q' Q C' P); ColR).
assert (HPer : Per A P Q) by (apply l8_2, per_col with A'; Perp; Col).
assert (HOS1 : OS A P C Q).
apply in_angle_one_side; Col.
apply per_not_col; auto.
destruct (aristotle P Q A P C) as [X [Y]]; Col.
spliter.
apply (not_and_lt P Q X Y).
split; trivial.
destruct (l8_18_existence P Q Y) as [Z [HZ1 HZ2]].
intro; assert_diffs; apply HNCol2; ColR.
apply lt_transitivity with P Z.
-
assert (P <> Z).
assert (HLam : Lambert P X Y Z).
apply lam_obtuse__lt; trivial.
apply <- (lam_obtuse__oah P); trivial.
-
assert (HOut : Out Q P Z).
assert_diffs.
apply bet__lt1213; auto.

*****
H29 : not (eq X P)
H28 : not (eq Z Q)
H27 : not (eq Y Z)
H24 : not (eq P Y)
H20 : not (eq A Q)
H19 : not (eq X Y)
H23 : not (eq C' A')
H22 : not (eq C A)
H21 : not (eq Q C)
HOut : Out Q P Z
HZ2 : Perp P Q Y Z
HZ1 : Col P Q Z
Z : Tpoint
H18 : Lt P Q X Y
H17 : Per P X Y
H15 : Out P C Y
H14 : Out P A X
X,Y : Tpoint
HOS1 : OS A P C Q
HPer : Per A P Q
HNCol2 : not (Col P Q C)
HNCol1 : not (Col P C A)
HNCol : not (Col P C' A')
HInAngle1 : InAngle C A P Q
H13 : not (eq P C)
H12 : not (eq P A)
H10 : not (eq C' C)
H9 : not (eq A' A)
HA2 : Cong P A A' P
HA1 : Bet A' P A
A : Tpoint
HC2 : Cong P C C' P
HC1 : Bet C' P C
C : Tpoint
HInAngle : InAngle A' Q P C'
HNCongA : not (CongA Q P A' C' P Q)
HLeA : LeA Q P A' C' P Q
H16 : not (eq Q A')
H11 : not (eq A' P)
H8 : not (eq C' Q)
H7 : not (eq Q' P)
HOS : OS P Q C' A'
HPerp : Perp P Q A' P
A' : Tpoint
HPar : Par_strict Q' Q C' P
HObtuse : Obtuse C' P Q
H6 : Coplanar Q' C' P Q
H5 : Per Q' C' P
H4 : Per Q' Q P
H3 : Per C' Q' Q
H2 : not (eq Q' Q)
H1 : not (eq P Q)
H0 : not (eq C' P)
H : not (eq Q' C')
Q',C',P,Q : Tpoint
obtuse : hypothesis_of_obtuse_saccheri_quadrilaterals
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet P Z Q
+++++
apply out2__bet; trivial.
-----
Lemma aristotle__obtuse_case_elimination : aristotle_s_axiom -> ~ hypothesis_of_obtuse_saccheri_quadrilaterals.
Proof.
intros aristotle obtuse.
destruct ex_lambert as [Q' [C' [P [Q HLam]]]].
assert (HObtuse : Obtuse C' P Q) by (apply <- (lam_obtuse__oah Q'); trivial).
assert (HPar : Par_strict Q' Q C' P) by (apply lam__par_strict1423, HLam).
destruct HLam; spliter.
destruct (l10_15 P Q P C') as [A' [HPerp HOS]]; Col.
apply not_col_permutation_1.
apply par_strict_not_col_1 with Q'; Par.
assert_diffs.
assert (HLtA : LtA Q P A' C' P Q) by (apply obtuse_per__lta; Perp).
destruct HLtA as [HLeA HNCongA].
assert (HInAngle : InAngle A' Q P C').
apply lea_in_angle; Side; apply lea_right_comm; trivial.
destruct (segment_construction C' P C' P) as [C [HC1 HC2]].
destruct (segment_construction A' P A' P) as [A [HA1 HA2]].
assert_diffs.
assert (HInAngle1 : InAngle C A P Q).
apply in_angle_reverse with A'; auto.
apply l11_24, in_angle_reverse with C'; auto.
apply l11_24; trivial.
assert (HNCol : ~ Col P C' A').
assert (HNCol1 : ~ Col P C A) by (intro; apply HNCol; ColR).
assert (HNCol2 : ~ Col P Q C) by (intro; apply (par_strict_not_col_2 Q' Q C' P); ColR).
assert (HPer : Per A P Q) by (apply l8_2, per_col with A'; Perp; Col).
assert (HOS1 : OS A P C Q).
apply in_angle_one_side; Col.
apply per_not_col; auto.
destruct (aristotle P Q A P C) as [X [Y]]; Col.
spliter.
apply (not_and_lt P Q X Y).
split; trivial.
destruct (l8_18_existence P Q Y) as [Z [HZ1 HZ2]].
intro; assert_diffs; apply HNCol2; ColR.
apply lt_transitivity with P Z.
-
assert (P <> Z).
assert (HLam : Lambert P X Y Z).
apply lam_obtuse__lt; trivial.
apply <- (lam_obtuse__oah P); trivial.
-
assert (HOut : Out Q P Z).
assert_diffs.
apply bet__lt1213; auto.
apply out2__bet; trivial.

*****
H29 : not (eq X P)
H28 : not (eq Z Q)
H27 : not (eq Y Z)
H24 : not (eq P Y)
H20 : not (eq A Q)
H19 : not (eq X Y)
H23 : not (eq C' A')
H22 : not (eq C A)
H21 : not (eq Q C)
HOut : Out Q P Z
HZ2 : Perp P Q Y Z
HZ1 : Col P Q Z
Z : Tpoint
H18 : Lt P Q X Y
H17 : Per P X Y
H15 : Out P C Y
H14 : Out P A X
X,Y : Tpoint
HOS1 : OS A P C Q
HPer : Per A P Q
HNCol2 : not (Col P Q C)
HNCol1 : not (Col P C A)
HNCol : not (Col P C' A')
HInAngle1 : InAngle C A P Q
H13 : not (eq P C)
H12 : not (eq P A)
H10 : not (eq C' C)
H9 : not (eq A' A)
HA2 : Cong P A A' P
HA1 : Bet A' P A
A : Tpoint
HC2 : Cong P C C' P
HC1 : Bet C' P C
C : Tpoint
HInAngle : InAngle A' Q P C'
HNCongA : not (CongA Q P A' C' P Q)
HLeA : LeA Q P A' C' P Q
H16 : not (eq Q A')
H11 : not (eq A' P)
H8 : not (eq C' Q)
H7 : not (eq Q' P)
HOS : OS P Q C' A'
HPerp : Perp P Q A' P
A' : Tpoint
HPar : Par_strict Q' Q C' P
HObtuse : Obtuse C' P Q
H6 : Coplanar Q' C' P Q
H5 : Per Q' C' P
H4 : Per Q' Q P
H3 : Per C' Q' Q
H2 : not (eq Q' Q)
H1 : not (eq P Q)
H0 : not (eq C' P)
H : not (eq Q' C')
Q',C',P,Q : Tpoint
obtuse : hypothesis_of_obtuse_saccheri_quadrilaterals
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Out P Z Q
+++++
apply col_one_side_out with A; Col.
-----
Lemma aristotle__obtuse_case_elimination : aristotle_s_axiom -> ~ hypothesis_of_obtuse_saccheri_quadrilaterals.
Proof.
intros aristotle obtuse.
destruct ex_lambert as [Q' [C' [P [Q HLam]]]].
assert (HObtuse : Obtuse C' P Q) by (apply <- (lam_obtuse__oah Q'); trivial).
assert (HPar : Par_strict Q' Q C' P) by (apply lam__par_strict1423, HLam).
destruct HLam; spliter.
destruct (l10_15 P Q P C') as [A' [HPerp HOS]]; Col.
apply not_col_permutation_1.
apply par_strict_not_col_1 with Q'; Par.
assert_diffs.
assert (HLtA : LtA Q P A' C' P Q) by (apply obtuse_per__lta; Perp).
destruct HLtA as [HLeA HNCongA].
assert (HInAngle : InAngle A' Q P C').
apply lea_in_angle; Side; apply lea_right_comm; trivial.
destruct (segment_construction C' P C' P) as [C [HC1 HC2]].
destruct (segment_construction A' P A' P) as [A [HA1 HA2]].
assert_diffs.
assert (HInAngle1 : InAngle C A P Q).
apply in_angle_reverse with A'; auto.
apply l11_24, in_angle_reverse with C'; auto.
apply l11_24; trivial.
assert (HNCol : ~ Col P C' A').
assert (HNCol1 : ~ Col P C A) by (intro; apply HNCol; ColR).
assert (HNCol2 : ~ Col P Q C) by (intro; apply (par_strict_not_col_2 Q' Q C' P); ColR).
assert (HPer : Per A P Q) by (apply l8_2, per_col with A'; Perp; Col).
assert (HOS1 : OS A P C Q).
apply in_angle_one_side; Col.
apply per_not_col; auto.
destruct (aristotle P Q A P C) as [X [Y]]; Col.
spliter.
apply (not_and_lt P Q X Y).
split; trivial.
destruct (l8_18_existence P Q Y) as [Z [HZ1 HZ2]].
intro; assert_diffs; apply HNCol2; ColR.
apply lt_transitivity with P Z.
-
assert (P <> Z).
assert (HLam : Lambert P X Y Z).
apply lam_obtuse__lt; trivial.
apply <- (lam_obtuse__oah P); trivial.
-
assert (HOut : Out Q P Z).
assert_diffs.
apply bet__lt1213; auto.
apply out2__bet; trivial.
apply col_one_side_out with A; Col.

*****
H29 : not (eq X P)
H28 : not (eq Z Q)
H27 : not (eq Y Z)
H24 : not (eq P Y)
H20 : not (eq A Q)
H19 : not (eq X Y)
H23 : not (eq C' A')
H22 : not (eq C A)
H21 : not (eq Q C)
HOut : Out Q P Z
HZ2 : Perp P Q Y Z
HZ1 : Col P Q Z
Z : Tpoint
H18 : Lt P Q X Y
H17 : Per P X Y
H15 : Out P C Y
H14 : Out P A X
X,Y : Tpoint
HOS1 : OS A P C Q
HPer : Per A P Q
HNCol2 : not (Col P Q C)
HNCol1 : not (Col P C A)
HNCol : not (Col P C' A')
HInAngle1 : InAngle C A P Q
H13 : not (eq P C)
H12 : not (eq P A)
H10 : not (eq C' C)
H9 : not (eq A' A)
HA2 : Cong P A A' P
HA1 : Bet A' P A
A : Tpoint
HC2 : Cong P C C' P
HC1 : Bet C' P C
C : Tpoint
HInAngle : InAngle A' Q P C'
HNCongA : not (CongA Q P A' C' P Q)
HLeA : LeA Q P A' C' P Q
H16 : not (eq Q A')
H11 : not (eq A' P)
H8 : not (eq C' Q)
H7 : not (eq Q' P)
HOS : OS P Q C' A'
HPerp : Perp P Q A' P
A' : Tpoint
HPar : Par_strict Q' Q C' P
HObtuse : Obtuse C' P Q
H6 : Coplanar Q' C' P Q
H5 : Per Q' C' P
H4 : Per Q' Q P
H3 : Per C' Q' Q
H2 : not (eq Q' Q)
H1 : not (eq P Q)
H0 : not (eq C' P)
H : not (eq Q' C')
Q',C',P,Q : Tpoint
obtuse : hypothesis_of_obtuse_saccheri_quadrilaterals
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS P A Z Q
+++++
apply one_side_transitivity with Y.
-----
Lemma aristotle__obtuse_case_elimination : aristotle_s_axiom -> ~ hypothesis_of_obtuse_saccheri_quadrilaterals.
Proof.
intros aristotle obtuse.
destruct ex_lambert as [Q' [C' [P [Q HLam]]]].
assert (HObtuse : Obtuse C' P Q) by (apply <- (lam_obtuse__oah Q'); trivial).
assert (HPar : Par_strict Q' Q C' P) by (apply lam__par_strict1423, HLam).
destruct HLam; spliter.
destruct (l10_15 P Q P C') as [A' [HPerp HOS]]; Col.
apply not_col_permutation_1.
apply par_strict_not_col_1 with Q'; Par.
assert_diffs.
assert (HLtA : LtA Q P A' C' P Q) by (apply obtuse_per__lta; Perp).
destruct HLtA as [HLeA HNCongA].
assert (HInAngle : InAngle A' Q P C').
apply lea_in_angle; Side; apply lea_right_comm; trivial.
destruct (segment_construction C' P C' P) as [C [HC1 HC2]].
destruct (segment_construction A' P A' P) as [A [HA1 HA2]].
assert_diffs.
assert (HInAngle1 : InAngle C A P Q).
apply in_angle_reverse with A'; auto.
apply l11_24, in_angle_reverse with C'; auto.
apply l11_24; trivial.
assert (HNCol : ~ Col P C' A').
assert (HNCol1 : ~ Col P C A) by (intro; apply HNCol; ColR).
assert (HNCol2 : ~ Col P Q C) by (intro; apply (par_strict_not_col_2 Q' Q C' P); ColR).
assert (HPer : Per A P Q) by (apply l8_2, per_col with A'; Perp; Col).
assert (HOS1 : OS A P C Q).
apply in_angle_one_side; Col.
apply per_not_col; auto.
destruct (aristotle P Q A P C) as [X [Y]]; Col.
spliter.
apply (not_and_lt P Q X Y).
split; trivial.
destruct (l8_18_existence P Q Y) as [Z [HZ1 HZ2]].
intro; assert_diffs; apply HNCol2; ColR.
apply lt_transitivity with P Z.
-
assert (P <> Z).
assert (HLam : Lambert P X Y Z).
apply lam_obtuse__lt; trivial.
apply <- (lam_obtuse__oah P); trivial.
-
assert (HOut : Out Q P Z).
assert_diffs.
apply bet__lt1213; auto.
apply out2__bet; trivial.
apply col_one_side_out with A; Col.
apply one_side_transitivity with Y.

*****
H29 : not (eq X P)
H28 : not (eq Z Q)
H27 : not (eq Y Z)
H24 : not (eq P Y)
H20 : not (eq A Q)
H19 : not (eq X Y)
H23 : not (eq C' A')
H22 : not (eq C A)
H21 : not (eq Q C)
HOut : Out Q P Z
HZ2 : Perp P Q Y Z
HZ1 : Col P Q Z
Z : Tpoint
H18 : Lt P Q X Y
H17 : Per P X Y
H15 : Out P C Y
H14 : Out P A X
X,Y : Tpoint
HOS1 : OS A P C Q
HPer : Per A P Q
HNCol2 : not (Col P Q C)
HNCol1 : not (Col P C A)
HNCol : not (Col P C' A')
HInAngle1 : InAngle C A P Q
H13 : not (eq P C)
H12 : not (eq P A)
H10 : not (eq C' C)
H9 : not (eq A' A)
HA2 : Cong P A A' P
HA1 : Bet A' P A
A : Tpoint
HC2 : Cong P C C' P
HC1 : Bet C' P C
C : Tpoint
HInAngle : InAngle A' Q P C'
HNCongA : not (CongA Q P A' C' P Q)
HLeA : LeA Q P A' C' P Q
H16 : not (eq Q A')
H11 : not (eq A' P)
H8 : not (eq C' Q)
H7 : not (eq Q' P)
HOS : OS P Q C' A'
HPerp : Perp P Q A' P
A' : Tpoint
HPar : Par_strict Q' Q C' P
HObtuse : Obtuse C' P Q
H6 : Coplanar Q' C' P Q
H5 : Per Q' C' P
H4 : Per Q' Q P
H3 : Per C' Q' Q
H2 : not (eq Q' Q)
H1 : not (eq P Q)
H0 : not (eq C' P)
H : not (eq Q' C')
Q',C',P,Q : Tpoint
obtuse : hypothesis_of_obtuse_saccheri_quadrilaterals
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS P A Z Y
+++++
apply l12_6, par_not_col_strict with Y; Col.
-----
Lemma aristotle__obtuse_case_elimination : aristotle_s_axiom -> ~ hypothesis_of_obtuse_saccheri_quadrilaterals.
Proof.
intros aristotle obtuse.
destruct ex_lambert as [Q' [C' [P [Q HLam]]]].
assert (HObtuse : Obtuse C' P Q) by (apply <- (lam_obtuse__oah Q'); trivial).
assert (HPar : Par_strict Q' Q C' P) by (apply lam__par_strict1423, HLam).
destruct HLam; spliter.
destruct (l10_15 P Q P C') as [A' [HPerp HOS]]; Col.
apply not_col_permutation_1.
apply par_strict_not_col_1 with Q'; Par.
assert_diffs.
assert (HLtA : LtA Q P A' C' P Q) by (apply obtuse_per__lta; Perp).
destruct HLtA as [HLeA HNCongA].
assert (HInAngle : InAngle A' Q P C').
apply lea_in_angle; Side; apply lea_right_comm; trivial.
destruct (segment_construction C' P C' P) as [C [HC1 HC2]].
destruct (segment_construction A' P A' P) as [A [HA1 HA2]].
assert_diffs.
assert (HInAngle1 : InAngle C A P Q).
apply in_angle_reverse with A'; auto.
apply l11_24, in_angle_reverse with C'; auto.
apply l11_24; trivial.
assert (HNCol : ~ Col P C' A').
assert (HNCol1 : ~ Col P C A) by (intro; apply HNCol; ColR).
assert (HNCol2 : ~ Col P Q C) by (intro; apply (par_strict_not_col_2 Q' Q C' P); ColR).
assert (HPer : Per A P Q) by (apply l8_2, per_col with A'; Perp; Col).
assert (HOS1 : OS A P C Q).
apply in_angle_one_side; Col.
apply per_not_col; auto.
destruct (aristotle P Q A P C) as [X [Y]]; Col.
spliter.
apply (not_and_lt P Q X Y).
split; trivial.
destruct (l8_18_existence P Q Y) as [Z [HZ1 HZ2]].
intro; assert_diffs; apply HNCol2; ColR.
apply lt_transitivity with P Z.
-
assert (P <> Z).
assert (HLam : Lambert P X Y Z).
apply lam_obtuse__lt; trivial.
apply <- (lam_obtuse__oah P); trivial.
-
assert (HOut : Out Q P Z).
assert_diffs.
apply bet__lt1213; auto.
apply out2__bet; trivial.
apply col_one_side_out with A; Col.
apply one_side_transitivity with Y.
apply l12_6, par_not_col_strict with Y; Col.

*****
H29 : not (eq X P)
H28 : not (eq Z Q)
H27 : not (eq Y Z)
H24 : not (eq P Y)
H20 : not (eq A Q)
H19 : not (eq X Y)
H23 : not (eq C' A')
H22 : not (eq C A)
H21 : not (eq Q C)
HOut : Out Q P Z
HZ2 : Perp P Q Y Z
HZ1 : Col P Q Z
Z : Tpoint
H18 : Lt P Q X Y
H17 : Per P X Y
H15 : Out P C Y
H14 : Out P A X
X,Y : Tpoint
HOS1 : OS A P C Q
HPer : Per A P Q
HNCol2 : not (Col P Q C)
HNCol1 : not (Col P C A)
HNCol : not (Col P C' A')
HInAngle1 : InAngle C A P Q
H13 : not (eq P C)
H12 : not (eq P A)
H10 : not (eq C' C)
H9 : not (eq A' A)
HA2 : Cong P A A' P
HA1 : Bet A' P A
A : Tpoint
HC2 : Cong P C C' P
HC1 : Bet C' P C
C : Tpoint
HInAngle : InAngle A' Q P C'
HNCongA : not (CongA Q P A' C' P Q)
HLeA : LeA Q P A' C' P Q
H16 : not (eq Q A')
H11 : not (eq A' P)
H8 : not (eq C' Q)
H7 : not (eq Q' P)
HOS : OS P Q C' A'
HPerp : Perp P Q A' P
A' : Tpoint
HPar : Par_strict Q' Q C' P
HObtuse : Obtuse C' P Q
H6 : Coplanar Q' C' P Q
H5 : Per Q' C' P
H4 : Per Q' Q P
H3 : Per C' Q' Q
H2 : not (eq Q' Q)
H1 : not (eq P Q)
H0 : not (eq C' P)
H : not (eq Q' C')
Q',C',P,Q : Tpoint
obtuse : hypothesis_of_obtuse_saccheri_quadrilaterals
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par P A Z Y
+++++
apply l12_9 with P Q; Perp; [Cop..|].
-----
Lemma aristotle__obtuse_case_elimination : aristotle_s_axiom -> ~ hypothesis_of_obtuse_saccheri_quadrilaterals.
Proof.
intros aristotle obtuse.
destruct ex_lambert as [Q' [C' [P [Q HLam]]]].
assert (HObtuse : Obtuse C' P Q) by (apply <- (lam_obtuse__oah Q'); trivial).
assert (HPar : Par_strict Q' Q C' P) by (apply lam__par_strict1423, HLam).
destruct HLam; spliter.
destruct (l10_15 P Q P C') as [A' [HPerp HOS]]; Col.
apply not_col_permutation_1.
apply par_strict_not_col_1 with Q'; Par.
assert_diffs.
assert (HLtA : LtA Q P A' C' P Q) by (apply obtuse_per__lta; Perp).
destruct HLtA as [HLeA HNCongA].
assert (HInAngle : InAngle A' Q P C').
apply lea_in_angle; Side; apply lea_right_comm; trivial.
destruct (segment_construction C' P C' P) as [C [HC1 HC2]].
destruct (segment_construction A' P A' P) as [A [HA1 HA2]].
assert_diffs.
assert (HInAngle1 : InAngle C A P Q).
apply in_angle_reverse with A'; auto.
apply l11_24, in_angle_reverse with C'; auto.
apply l11_24; trivial.
assert (HNCol : ~ Col P C' A').
assert (HNCol1 : ~ Col P C A) by (intro; apply HNCol; ColR).
assert (HNCol2 : ~ Col P Q C) by (intro; apply (par_strict_not_col_2 Q' Q C' P); ColR).
assert (HPer : Per A P Q) by (apply l8_2, per_col with A'; Perp; Col).
assert (HOS1 : OS A P C Q).
apply in_angle_one_side; Col.
apply per_not_col; auto.
destruct (aristotle P Q A P C) as [X [Y]]; Col.
spliter.
apply (not_and_lt P Q X Y).
split; trivial.
destruct (l8_18_existence P Q Y) as [Z [HZ1 HZ2]].
intro; assert_diffs; apply HNCol2; ColR.
apply lt_transitivity with P Z.
-
assert (P <> Z).
assert (HLam : Lambert P X Y Z).
apply lam_obtuse__lt; trivial.
apply <- (lam_obtuse__oah P); trivial.
-
assert (HOut : Out Q P Z).
assert_diffs.
apply bet__lt1213; auto.
apply out2__bet; trivial.
apply col_one_side_out with A; Col.
apply one_side_transitivity with Y.
apply l12_6, par_not_col_strict with Y; Col.
apply l12_9 with P Q; Perp; [Cop..|].

*****
H29 : not (eq X P)
H28 : not (eq Z Q)
H27 : not (eq Y Z)
H24 : not (eq P Y)
H20 : not (eq A Q)
H19 : not (eq X Y)
H23 : not (eq C' A')
H22 : not (eq C A)
H21 : not (eq Q C)
HOut : Out Q P Z
HZ2 : Perp P Q Y Z
HZ1 : Col P Q Z
Z : Tpoint
H18 : Lt P Q X Y
H17 : Per P X Y
H15 : Out P C Y
H14 : Out P A X
X,Y : Tpoint
HOS1 : OS A P C Q
HPer : Per A P Q
HNCol2 : not (Col P Q C)
HNCol1 : not (Col P C A)
HNCol : not (Col P C' A')
HInAngle1 : InAngle C A P Q
H13 : not (eq P C)
H12 : not (eq P A)
H10 : not (eq C' C)
H9 : not (eq A' A)
HA2 : Cong P A A' P
HA1 : Bet A' P A
A : Tpoint
HC2 : Cong P C C' P
HC1 : Bet C' P C
C : Tpoint
HInAngle : InAngle A' Q P C'
HNCongA : not (CongA Q P A' C' P Q)
HLeA : LeA Q P A' C' P Q
H16 : not (eq Q A')
H11 : not (eq A' P)
H8 : not (eq C' Q)
H7 : not (eq Q' P)
HOS : OS P Q C' A'
HPerp : Perp P Q A' P
A' : Tpoint
HPar : Par_strict Q' Q C' P
HObtuse : Obtuse C' P Q
H6 : Coplanar Q' C' P Q
H5 : Per Q' C' P
H4 : Per Q' Q P
H3 : Per C' Q' Q
H2 : not (eq Q' Q)
H1 : not (eq P Q)
H0 : not (eq C' P)
H : not (eq Q' C')
Q',C',P,Q : Tpoint
obtuse : hypothesis_of_obtuse_saccheri_quadrilaterals
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar P Q A Y
+++++
apply coplanar_perm_12, col_cop__cop with C; Col; Cop.
-----
Lemma aristotle__obtuse_case_elimination : aristotle_s_axiom -> ~ hypothesis_of_obtuse_saccheri_quadrilaterals.
Proof.
intros aristotle obtuse.
destruct ex_lambert as [Q' [C' [P [Q HLam]]]].
assert (HObtuse : Obtuse C' P Q) by (apply <- (lam_obtuse__oah Q'); trivial).
assert (HPar : Par_strict Q' Q C' P) by (apply lam__par_strict1423, HLam).
destruct HLam; spliter.
destruct (l10_15 P Q P C') as [A' [HPerp HOS]]; Col.
apply not_col_permutation_1.
apply par_strict_not_col_1 with Q'; Par.
assert_diffs.
assert (HLtA : LtA Q P A' C' P Q) by (apply obtuse_per__lta; Perp).
destruct HLtA as [HLeA HNCongA].
assert (HInAngle : InAngle A' Q P C').
apply lea_in_angle; Side; apply lea_right_comm; trivial.
destruct (segment_construction C' P C' P) as [C [HC1 HC2]].
destruct (segment_construction A' P A' P) as [A [HA1 HA2]].
assert_diffs.
assert (HInAngle1 : InAngle C A P Q).
apply in_angle_reverse with A'; auto.
apply l11_24, in_angle_reverse with C'; auto.
apply l11_24; trivial.
assert (HNCol : ~ Col P C' A').
assert (HNCol1 : ~ Col P C A) by (intro; apply HNCol; ColR).
assert (HNCol2 : ~ Col P Q C) by (intro; apply (par_strict_not_col_2 Q' Q C' P); ColR).
assert (HPer : Per A P Q) by (apply l8_2, per_col with A'; Perp; Col).
assert (HOS1 : OS A P C Q).
apply in_angle_one_side; Col.
apply per_not_col; auto.
destruct (aristotle P Q A P C) as [X [Y]]; Col.
spliter.
apply (not_and_lt P Q X Y).
split; trivial.
destruct (l8_18_existence P Q Y) as [Z [HZ1 HZ2]].
intro; assert_diffs; apply HNCol2; ColR.
apply lt_transitivity with P Z.
-
assert (P <> Z).
assert (HLam : Lambert P X Y Z).
apply lam_obtuse__lt; trivial.
apply <- (lam_obtuse__oah P); trivial.
-
assert (HOut : Out Q P Z).
assert_diffs.
apply bet__lt1213; auto.
apply out2__bet; trivial.
apply col_one_side_out with A; Col.
apply one_side_transitivity with Y.
apply l12_6, par_not_col_strict with Y; Col.
apply l12_9 with P Q; Perp; [Cop..|].
apply coplanar_perm_12, col_cop__cop with C; Col; Cop.

*****
H29 : not (eq X P)
H28 : not (eq Z Q)
H27 : not (eq Y Z)
H24 : not (eq P Y)
H20 : not (eq A Q)
H19 : not (eq X Y)
H23 : not (eq C' A')
H22 : not (eq C A)
H21 : not (eq Q C)
HOut : Out Q P Z
HZ2 : Perp P Q Y Z
HZ1 : Col P Q Z
Z : Tpoint
H18 : Lt P Q X Y
H17 : Per P X Y
H15 : Out P C Y
H14 : Out P A X
X,Y : Tpoint
HOS1 : OS A P C Q
HPer : Per A P Q
HNCol2 : not (Col P Q C)
HNCol1 : not (Col P C A)
HNCol : not (Col P C' A')
HInAngle1 : InAngle C A P Q
H13 : not (eq P C)
H12 : not (eq P A)
H10 : not (eq C' C)
H9 : not (eq A' A)
HA2 : Cong P A A' P
HA1 : Bet A' P A
A : Tpoint
HC2 : Cong P C C' P
HC1 : Bet C' P C
C : Tpoint
HInAngle : InAngle A' Q P C'
HNCongA : not (CongA Q P A' C' P Q)
HLeA : LeA Q P A' C' P Q
H16 : not (eq Q A')
H11 : not (eq A' P)
H8 : not (eq C' Q)
H7 : not (eq Q' P)
HOS : OS P Q C' A'
HPerp : Perp P Q A' P
A' : Tpoint
HPar : Par_strict Q' Q C' P
HObtuse : Obtuse C' P Q
H6 : Coplanar Q' C' P Q
H5 : Per Q' C' P
H4 : Per Q' Q P
H3 : Per C' Q' Q
H2 : not (eq Q' Q)
H1 : not (eq P Q)
H0 : not (eq C' P)
H : not (eq Q' C')
Q',C',P,Q : Tpoint
obtuse : hypothesis_of_obtuse_saccheri_quadrilaterals
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col P A Y)
+++++
intro; apply HNCol1; ColR.
-----
Lemma aristotle__obtuse_case_elimination : aristotle_s_axiom -> ~ hypothesis_of_obtuse_saccheri_quadrilaterals.
Proof.
intros aristotle obtuse.
destruct ex_lambert as [Q' [C' [P [Q HLam]]]].
assert (HObtuse : Obtuse C' P Q) by (apply <- (lam_obtuse__oah Q'); trivial).
assert (HPar : Par_strict Q' Q C' P) by (apply lam__par_strict1423, HLam).
destruct HLam; spliter.
destruct (l10_15 P Q P C') as [A' [HPerp HOS]]; Col.
apply not_col_permutation_1.
apply par_strict_not_col_1 with Q'; Par.
assert_diffs.
assert (HLtA : LtA Q P A' C' P Q) by (apply obtuse_per__lta; Perp).
destruct HLtA as [HLeA HNCongA].
assert (HInAngle : InAngle A' Q P C').
apply lea_in_angle; Side; apply lea_right_comm; trivial.
destruct (segment_construction C' P C' P) as [C [HC1 HC2]].
destruct (segment_construction A' P A' P) as [A [HA1 HA2]].
assert_diffs.
assert (HInAngle1 : InAngle C A P Q).
apply in_angle_reverse with A'; auto.
apply l11_24, in_angle_reverse with C'; auto.
apply l11_24; trivial.
assert (HNCol : ~ Col P C' A').
assert (HNCol1 : ~ Col P C A) by (intro; apply HNCol; ColR).
assert (HNCol2 : ~ Col P Q C) by (intro; apply (par_strict_not_col_2 Q' Q C' P); ColR).
assert (HPer : Per A P Q) by (apply l8_2, per_col with A'; Perp; Col).
assert (HOS1 : OS A P C Q).
apply in_angle_one_side; Col.
apply per_not_col; auto.
destruct (aristotle P Q A P C) as [X [Y]]; Col.
spliter.
apply (not_and_lt P Q X Y).
split; trivial.
destruct (l8_18_existence P Q Y) as [Z [HZ1 HZ2]].
intro; assert_diffs; apply HNCol2; ColR.
apply lt_transitivity with P Z.
-
assert (P <> Z).
assert (HLam : Lambert P X Y Z).
apply lam_obtuse__lt; trivial.
apply <- (lam_obtuse__oah P); trivial.
-
assert (HOut : Out Q P Z).
assert_diffs.
apply bet__lt1213; auto.
apply out2__bet; trivial.
apply col_one_side_out with A; Col.
apply one_side_transitivity with Y.

*****
H29 : not (eq X P)
H28 : not (eq Z Q)
H27 : not (eq Y Z)
H24 : not (eq P Y)
H20 : not (eq A Q)
H19 : not (eq X Y)
H23 : not (eq C' A')
H22 : not (eq C A)
H21 : not (eq Q C)
HOut : Out Q P Z
HZ2 : Perp P Q Y Z
HZ1 : Col P Q Z
Z : Tpoint
H18 : Lt P Q X Y
H17 : Per P X Y
H15 : Out P C Y
H14 : Out P A X
X,Y : Tpoint
HOS1 : OS A P C Q
HPer : Per A P Q
HNCol2 : not (Col P Q C)
HNCol1 : not (Col P C A)
HNCol : not (Col P C' A')
HInAngle1 : InAngle C A P Q
H13 : not (eq P C)
H12 : not (eq P A)
H10 : not (eq C' C)
H9 : not (eq A' A)
HA2 : Cong P A A' P
HA1 : Bet A' P A
A : Tpoint
HC2 : Cong P C C' P
HC1 : Bet C' P C
C : Tpoint
HInAngle : InAngle A' Q P C'
HNCongA : not (CongA Q P A' C' P Q)
HLeA : LeA Q P A' C' P Q
H16 : not (eq Q A')
H11 : not (eq A' P)
H8 : not (eq C' Q)
H7 : not (eq Q' P)
HOS : OS P Q C' A'
HPerp : Perp P Q A' P
A' : Tpoint
HPar : Par_strict Q' Q C' P
HObtuse : Obtuse C' P Q
H6 : Coplanar Q' C' P Q
H5 : Per Q' C' P
H4 : Per Q' Q P
H3 : Per C' Q' Q
H2 : not (eq Q' Q)
H1 : not (eq P Q)
H0 : not (eq C' P)
H : not (eq Q' C')
Q',C',P,Q : Tpoint
obtuse : hypothesis_of_obtuse_saccheri_quadrilaterals
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS P A Y Q
+++++
apply one_side_symmetry, out_out_one_side with C; Side.
-----
Lemma aristotle__obtuse_case_elimination : aristotle_s_axiom -> ~ hypothesis_of_obtuse_saccheri_quadrilaterals.
Proof.
intros aristotle obtuse.
destruct ex_lambert as [Q' [C' [P [Q HLam]]]].
assert (HObtuse : Obtuse C' P Q) by (apply <- (lam_obtuse__oah Q'); trivial).
assert (HPar : Par_strict Q' Q C' P) by (apply lam__par_strict1423, HLam).
destruct HLam; spliter.
destruct (l10_15 P Q P C') as [A' [HPerp HOS]]; Col.
apply not_col_permutation_1.
apply par_strict_not_col_1 with Q'; Par.
assert_diffs.
assert (HLtA : LtA Q P A' C' P Q) by (apply obtuse_per__lta; Perp).
destruct HLtA as [HLeA HNCongA].
assert (HInAngle : InAngle A' Q P C').
apply lea_in_angle; Side; apply lea_right_comm; trivial.
destruct (segment_construction C' P C' P) as [C [HC1 HC2]].
destruct (segment_construction A' P A' P) as [A [HA1 HA2]].
assert_diffs.
assert (HInAngle1 : InAngle C A P Q).
apply in_angle_reverse with A'; auto.
apply l11_24, in_angle_reverse with C'; auto.
apply l11_24; trivial.
assert (HNCol : ~ Col P C' A').
assert (HNCol1 : ~ Col P C A) by (intro; apply HNCol; ColR).
assert (HNCol2 : ~ Col P Q C) by (intro; apply (par_strict_not_col_2 Q' Q C' P); ColR).
assert (HPer : Per A P Q) by (apply l8_2, per_col with A'; Perp; Col).
assert (HOS1 : OS A P C Q).
apply in_angle_one_side; Col.
apply per_not_col; auto.
destruct (aristotle P Q A P C) as [X [Y]]; Col.
spliter.
apply (not_and_lt P Q X Y).
split; trivial.
destruct (l8_18_existence P Q Y) as [Z [HZ1 HZ2]].
intro; assert_diffs; apply HNCol2; ColR.
apply lt_transitivity with P Z.
-
assert (P <> Z).
assert (HLam : Lambert P X Y Z).
apply lam_obtuse__lt; trivial.
apply <- (lam_obtuse__oah P); trivial.
-
assert (HOut : Out Q P Z).
assert_diffs.
apply bet__lt1213; auto.
apply out2__bet; trivial.
apply col_one_side_out with A; Col.
apply one_side_transitivity with Y.
apply one_side_symmetry, out_out_one_side with C; Side.

*****

*****

+++++
Qed.
-----
Lemma aristotle__acute_or_right :\n  aristotle_s_axiom ->\n  hypothesis_of_acute_saccheri_quadrilaterals \/ hypothesis_of_right_saccheri_quadrilaterals.
-----
Lemma aristotle__acute_or_right : aristotle_s_axiom -> hypothesis_of_acute_saccheri_quadrilaterals \\/ hypothesis_of_right_saccheri_quadrilaterals.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : aristotle_s_axiom, or hypothesis_of_acute_saccheri_quadrilaterals hypothesis_of_right_saccheri_quadrilaterals
+++++
Proof.
-----
Lemma aristotle__acute_or_right : aristotle_s_axiom -> hypothesis_of_acute_saccheri_quadrilaterals \\/ hypothesis_of_right_saccheri_quadrilaterals.
Proof.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : aristotle_s_axiom, or hypothesis_of_acute_saccheri_quadrilaterals hypothesis_of_right_saccheri_quadrilaterals
+++++
intros aristotle.
-----
Lemma aristotle__acute_or_right : aristotle_s_axiom -> hypothesis_of_acute_saccheri_quadrilaterals \\/ hypothesis_of_right_saccheri_quadrilaterals.
Proof.
intros aristotle.

*****
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or hypothesis_of_acute_saccheri_quadrilaterals hypothesis_of_right_saccheri_quadrilaterals
+++++
destruct saccheri_s_three_hypotheses as [Ha|[Hr|Ho]].
-----
Lemma aristotle__acute_or_right : aristotle_s_axiom -> hypothesis_of_acute_saccheri_quadrilaterals \\/ hypothesis_of_right_saccheri_quadrilaterals.
Proof.
intros aristotle.
destruct saccheri_s_three_hypotheses as [Ha|[Hr|Ho]].

*****
Ha : hypothesis_of_acute_saccheri_quadrilaterals
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or hypothesis_of_acute_saccheri_quadrilaterals hypothesis_of_right_saccheri_quadrilaterals
+++++
auto.
-----
Lemma aristotle__acute_or_right : aristotle_s_axiom -> hypothesis_of_acute_saccheri_quadrilaterals \\/ hypothesis_of_right_saccheri_quadrilaterals.
Proof.
intros aristotle.
destruct saccheri_s_three_hypotheses as [Ha|[Hr|Ho]].

*****
Hr : hypothesis_of_right_saccheri_quadrilaterals
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or hypothesis_of_acute_saccheri_quadrilaterals hypothesis_of_right_saccheri_quadrilaterals
+++++
auto.
-----
Lemma aristotle__acute_or_right : aristotle_s_axiom -> hypothesis_of_acute_saccheri_quadrilaterals \\/ hypothesis_of_right_saccheri_quadrilaterals.
Proof.
intros aristotle.
destruct saccheri_s_three_hypotheses as [Ha|[Hr|Ho]].

*****
Ho : hypothesis_of_obtuse_saccheri_quadrilaterals
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or hypothesis_of_acute_saccheri_quadrilaterals hypothesis_of_right_saccheri_quadrilaterals
+++++
auto.
-----
Lemma aristotle__acute_or_right : aristotle_s_axiom -> hypothesis_of_acute_saccheri_quadrilaterals \\/ hypothesis_of_right_saccheri_quadrilaterals.
Proof.
intros aristotle.
destruct saccheri_s_three_hypotheses as [Ha|[Hr|Ho]].
auto.

*****
Ho : hypothesis_of_obtuse_saccheri_quadrilaterals
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or hypothesis_of_acute_saccheri_quadrilaterals hypothesis_of_right_saccheri_quadrilaterals
+++++
exfalso.
-----
Lemma aristotle__acute_or_right : aristotle_s_axiom -> hypothesis_of_acute_saccheri_quadrilaterals \\/ hypothesis_of_right_saccheri_quadrilaterals.
Proof.
intros aristotle.
destruct saccheri_s_three_hypotheses as [Ha|[Hr|Ho]].
auto.
exfalso.

*****
Ho : hypothesis_of_obtuse_saccheri_quadrilaterals
aristotle : aristotle_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply aristotle__obtuse_case_elimination in aristotle.
-----
Lemma aristotle__acute_or_right : aristotle_s_axiom -> hypothesis_of_acute_saccheri_quadrilaterals \\/ hypothesis_of_right_saccheri_quadrilaterals.
Proof.
intros aristotle.
destruct saccheri_s_three_hypotheses as [Ha|[Hr|Ho]].
auto.
exfalso.
apply aristotle__obtuse_case_elimination in aristotle.

*****
Ho : hypothesis_of_obtuse_saccheri_quadrilaterals
aristotle : not hypothesis_of_obtuse_saccheri_quadrilaterals
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
auto.
-----
Lemma aristotle__acute_or_right : aristotle_s_axiom -> hypothesis_of_acute_saccheri_quadrilaterals \\/ hypothesis_of_right_saccheri_quadrilaterals.
Proof.
intros aristotle.
destruct saccheri_s_three_hypotheses as [Ha|[Hr|Ho]].

*****

*****

+++++
Qed.
-----
End Aristotle.
-----
