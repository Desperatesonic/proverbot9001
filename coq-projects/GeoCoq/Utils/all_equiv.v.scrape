From Coq Require Export List.
-----
Definition all_equiv (l: list Prop) :=\n  forall x y, In x l -> In y l -> (x <-> y).
-----
Lemma all_equiv_chara : forall l,\n  all_equiv l <-> forall x y, In x l -> In y l -> x -> y.
-----
Lemma all_equiv_chara : forall l, all_equiv l <-> forall x y, In x l -> In y l -> x -> y.

*****

*****
forall l : list Prop, iff (all_equiv l) (forall (x y : Prop) (_ : In x l) (_ : In y l) (_ : x), y)
+++++
Proof.
-----
Lemma all_equiv_chara : forall l, all_equiv l <-> forall x y, In x l -> In y l -> x -> y.
Proof.

*****

*****
forall l : list Prop, iff (all_equiv l) (forall (x y : Prop) (_ : In x l) (_ : In y l) (_ : x), y)
+++++
unfold all_equiv.
-----
Lemma all_equiv_chara : forall l, all_equiv l <-> forall x y, In x l -> In y l -> x -> y.
Proof.
unfold all_equiv.

*****

*****
forall l : list Prop, iff (forall (x y : Prop) (_ : In x l) (_ : In y l), iff x y) (forall (x y : Prop) (_ : In x l) (_ : In y l) (_ : x), y)
+++++
intro l.
-----
Lemma all_equiv_chara : forall l, all_equiv l <-> forall x y, In x l -> In y l -> x -> y.
Proof.
unfold all_equiv.
intro l.

*****
l : list Prop
*****
iff (forall (x y : Prop) (_ : In x l) (_ : In y l), iff x y) (forall (x y : Prop) (_ : In x l) (_ : In y l) (_ : x), y)
+++++
split.
-----
Lemma all_equiv_chara : forall l, all_equiv l <-> forall x y, In x l -> In y l -> x -> y.
Proof.
unfold all_equiv.
intro l.
split.

*****
l : list Prop
*****
forall (_ : forall (x y : Prop) (_ : In x l) (_ : In y l), iff x y) (x y : Prop) (_ : In x l) (_ : In y l) (_ : x), y
+++++
intros He x y Hx Hy.
-----
Lemma all_equiv_chara : forall l, all_equiv l <-> forall x y, In x l -> In y l -> x -> y.
Proof.
unfold all_equiv.
intro l.
split.
intros He x y Hx Hy.

*****
Hy : In y l
Hx : In x l
x,y : Prop
He : forall (x y : Prop) (_ : In x l) (_ : In y l), iff x y
l : list Prop
*****
forall _ : x, y
+++++
rewrite (He x y).
-----
Lemma all_equiv_chara : forall l, all_equiv l <-> forall x y, In x l -> In y l -> x -> y.
Proof.
unfold all_equiv.
intro l.
split.
intros He x y Hx Hy.
rewrite (He x y).

*****
Hy : In y l
Hx : In x l
x,y : Prop
He : forall (x y : Prop) (_ : In x l) (_ : In y l), iff x y
l : list Prop
*****
forall _ : y, y
+++++
auto.
-----
Lemma all_equiv_chara : forall l, all_equiv l <-> forall x y, In x l -> In y l -> x -> y.
Proof.
unfold all_equiv.
intro l.
split.
intros He x y Hx Hy.
rewrite (He x y).

*****
Hy : In y l
Hx : In x l
x,y : Prop
He : forall (x y : Prop) (_ : In x l) (_ : In y l), iff x y
l : list Prop
*****
In x l
+++++
auto.
-----
Lemma all_equiv_chara : forall l, all_equiv l <-> forall x y, In x l -> In y l -> x -> y.
Proof.
unfold all_equiv.
intro l.
split.
intros He x y Hx Hy.
rewrite (He x y).

*****
Hy : In y l
Hx : In x l
x,y : Prop
He : forall (x y : Prop) (_ : In x l) (_ : In y l), iff x y
l : list Prop
*****
In y l
+++++
auto.
-----
Lemma all_equiv_chara : forall l, all_equiv l <-> forall x y, In x l -> In y l -> x -> y.
Proof.
unfold all_equiv.
intro l.
split.

*****
l : list Prop
*****
forall (_ : forall (x y : Prop) (_ : In x l) (_ : In y l) (_ : x), y) (x y : Prop) (_ : In x l) (_ : In y l), iff x y
+++++
idtac.
-----
Lemma all_equiv_chara : forall l, all_equiv l <-> forall x y, In x l -> In y l -> x -> y.
Proof.
unfold all_equiv.
intro l.
split.
idtac.

*****
l : list Prop
*****
forall (_ : forall (x y : Prop) (_ : In x l) (_ : In y l) (_ : x), y) (x y : Prop) (_ : In x l) (_ : In y l), iff x y
+++++
intros Himp x y Hxl Hyl.
-----
Lemma all_equiv_chara : forall l, all_equiv l <-> forall x y, In x l -> In y l -> x -> y.
Proof.
unfold all_equiv.
intro l.
split.
idtac.
intros Himp x y Hxl Hyl.

*****
Hyl : In y l
Hxl : In x l
x,y : Prop
Himp : forall (x y : Prop) (_ : In x l) (_ : In y l) (_ : x), y
l : list Prop
*****
iff x y
+++++
split.
-----
Lemma all_equiv_chara : forall l, all_equiv l <-> forall x y, In x l -> In y l -> x -> y.
Proof.
unfold all_equiv.
intro l.
split.
idtac.
intros Himp x y Hxl Hyl.
split.

*****
Hyl : In y l
Hxl : In x l
x,y : Prop
Himp : forall (x y : Prop) (_ : In x l) (_ : In y l) (_ : x), y
l : list Prop
*****
forall _ : x, y
+++++
apply Himp.
-----
Lemma all_equiv_chara : forall l, all_equiv l <-> forall x y, In x l -> In y l -> x -> y.
Proof.
unfold all_equiv.
intro l.
split.
idtac.
intros Himp x y Hxl Hyl.
split.
apply Himp.

*****
Hyl : In y l
Hxl : In x l
x,y : Prop
Himp : forall (x y : Prop) (_ : In x l) (_ : In y l) (_ : x), y
l : list Prop
*****
In x l
+++++
assumption.
-----
Lemma all_equiv_chara : forall l, all_equiv l <-> forall x y, In x l -> In y l -> x -> y.
Proof.
unfold all_equiv.
intro l.
split.
idtac.
intros Himp x y Hxl Hyl.
split.
apply Himp.

*****
Hyl : In y l
Hxl : In x l
x,y : Prop
Himp : forall (x y : Prop) (_ : In x l) (_ : In y l) (_ : x), y
l : list Prop
*****
In y l
+++++
assumption.
-----
Lemma all_equiv_chara : forall l, all_equiv l <-> forall x y, In x l -> In y l -> x -> y.
Proof.
unfold all_equiv.
intro l.
split.
idtac.
intros Himp x y Hxl Hyl.
split.

*****
Hyl : In y l
Hxl : In x l
x,y : Prop
Himp : forall (x y : Prop) (_ : In x l) (_ : In y l) (_ : x), y
l : list Prop
*****
forall _ : y, x
+++++
apply Himp.
-----
Lemma all_equiv_chara : forall l, all_equiv l <-> forall x y, In x l -> In y l -> x -> y.
Proof.
unfold all_equiv.
intro l.
split.
idtac.
intros Himp x y Hxl Hyl.
split.
apply Himp.

*****
Hyl : In y l
Hxl : In x l
x,y : Prop
Himp : forall (x y : Prop) (_ : In x l) (_ : In y l) (_ : x), y
l : list Prop
*****
In y l
+++++
assumption.
-----
Lemma all_equiv_chara : forall l, all_equiv l <-> forall x y, In x l -> In y l -> x -> y.
Proof.
unfold all_equiv.
intro l.
split.
idtac.
intros Himp x y Hxl Hyl.
split.
apply Himp.

*****
Hyl : In y l
Hxl : In x l
x,y : Prop
Himp : forall (x y : Prop) (_ : In x l) (_ : In y l) (_ : x), y
l : list Prop
*****
In x l
+++++
assumption.
-----
Lemma all_equiv_chara : forall l, all_equiv l <-> forall x y, In x l -> In y l -> x -> y.
Proof.
unfold all_equiv.
intro l.
split.

*****

*****

+++++
Qed.
-----
Definition all_equiv'_aux (l: list Prop) : Prop.
-----
Definition all_equiv'_aux (l: list Prop) : Prop.

*****
l : list Prop
*****
Prop
+++++
induction l.
-----
Definition all_equiv'_aux (l: list Prop) : Prop.
induction l.

*****

*****
Prop
+++++
exact True.
-----
Definition all_equiv'_aux (l: list Prop) : Prop.
induction l.

*****
IHl : Prop
l : list Prop
a : Prop
*****
Prop
+++++
idtac.
-----
Definition all_equiv'_aux (l: list Prop) : Prop.
induction l.
idtac.

*****
IHl : Prop
l : list Prop
a : Prop
*****
Prop
+++++
induction l.
-----
Definition all_equiv'_aux (l: list Prop) : Prop.
induction l.
idtac.
induction l.

*****
a,IHl : Prop
*****
Prop
+++++
exact True.
-----
Definition all_equiv'_aux (l: list Prop) : Prop.
induction l.
idtac.
induction l.

*****
IHl,IHl0 : Prop
l : list Prop
a,a0 : Prop
*****
Prop
+++++
idtac.
-----
Definition all_equiv'_aux (l: list Prop) : Prop.
induction l.
idtac.
induction l.
idtac.

*****
IHl,IHl0 : Prop
l : list Prop
a,a0 : Prop
*****
Prop
+++++
exact ((a -> a0) /\ IHl).
-----
Definition all_equiv'_aux (l: list Prop) : Prop.
induction l.

*****

*****

+++++
Defined.
-----
Lemma all_equiv'_auxP : forall l n1 n2 d1 d2,\n  l <> nil -> all_equiv'_aux l ->\n  n1 < length l -> n2 < length l -> n1 <= n2 ->\n  nth n1 l d1 -> nth n2 l d2.
-----
Lemma all_equiv'_auxP : forall l n1 n2 d1 d2, l <> nil -> all_equiv'_aux l -> n1 < length l -> n2 < length l -> n1 <= n2 -> nth n1 l d1 -> nth n2 l d2.

*****

*****
forall (l : list Prop) (n1 n2 : nat) (d1 d2 : Prop) (_ : not (eq l nil)) (_ : all_equiv'_aux l) (_ : lt n1 (length l)) (_ : lt n2 (length l)) (_ : le n1 n2) (_ : nth n1 l d1), nth n2 l d2
+++++
Proof.
-----
Lemma all_equiv'_auxP : forall l n1 n2 d1 d2, l <> nil -> all_equiv'_aux l -> n1 < length l -> n2 < length l -> n1 <= n2 -> nth n1 l d1 -> nth n2 l d2.
Proof.

*****

*****
forall (l : list Prop) (n1 n2 : nat) (d1 d2 : Prop) (_ : not (eq l nil)) (_ : all_equiv'_aux l) (_ : lt n1 (length l)) (_ : lt n2 (length l)) (_ : le n1 n2) (_ : nth n1 l d1), nth n2 l d2
+++++
intro l; elim l; [intros ? ? ? ? H; exfalso; apply H; auto| clear l; intros a l _; revert a].
-----
Lemma all_equiv'_auxP : forall l n1 n2 d1 d2, l <> nil -> all_equiv'_aux l -> n1 < length l -> n2 < length l -> n1 <= n2 -> nth n1 l d1 -> nth n2 l d2.
Proof.
intro l; elim l; [intros ? ? ? ? H; exfalso; apply H; auto| clear l; intros a l _; revert a].

*****
l : list Prop
*****
forall (a : Prop) (n1 n2 : nat) (d1 d2 : Prop) (_ : not (eq (cons a l) nil)) (_ : all_equiv'_aux (cons a l)) (_ : lt n1 (length (cons a l))) (_ : lt n2 (length (cons a l))) (_ : le n1 n2) (_ : nth n1 (cons a l) d1), nth n2 (cons a l) d2
+++++
elim l; [intro a|clear l; intros b l IHl a]; intros n1 n2 d1 d2 _ H Hn1 Hn2 Hn.
-----
Lemma all_equiv'_auxP : forall l n1 n2 d1 d2, l <> nil -> all_equiv'_aux l -> n1 < length l -> n2 < length l -> n1 <= n2 -> nth n1 l d1 -> nth n2 l d2.
Proof.
intro l; elim l; [intros ? ? ? ? H; exfalso; apply H; auto| clear l; intros a l _; revert a].
elim l; [intro a|clear l; intros b l IHl a]; intros n1 n2 d1 d2 _ H Hn1 Hn2 Hn.

*****
Hn : le n1 n2
Hn2 : lt n2 (length (cons a nil))
Hn1 : lt n1 (length (cons a nil))
H : all_equiv'_aux (cons a nil)
d1,d2 : Prop
n1,n2 : nat
a : Prop
l : list Prop
*****
forall _ : nth n1 (cons a nil) d1, nth n2 (cons a nil) d2
+++++
simpl in Hn1, Hn2.
-----
Lemma all_equiv'_auxP : forall l n1 n2 d1 d2, l <> nil -> all_equiv'_aux l -> n1 < length l -> n2 < length l -> n1 <= n2 -> nth n1 l d1 -> nth n2 l d2.
Proof.
intro l; elim l; [intros ? ? ? ? H; exfalso; apply H; auto| clear l; intros a l _; revert a].
elim l; [intro a|clear l; intros b l IHl a]; intros n1 n2 d1 d2 _ H Hn1 Hn2 Hn.
simpl in Hn1, Hn2.

*****
Hn : le n1 n2
Hn2 : lt n2 (S O)
Hn1 : lt n1 (S O)
H : all_equiv'_aux (cons a nil)
d1,d2 : Prop
n1,n2 : nat
a : Prop
l : list Prop
*****
forall _ : nth n1 (cons a nil) d1, nth n2 (cons a nil) d2
+++++
apply PeanoNat.Nat.lt_1_r in Hn1; rewrite Hn1.
-----
Lemma all_equiv'_auxP : forall l n1 n2 d1 d2, l <> nil -> all_equiv'_aux l -> n1 < length l -> n2 < length l -> n1 <= n2 -> nth n1 l d1 -> nth n2 l d2.
Proof.
intro l; elim l; [intros ? ? ? ? H; exfalso; apply H; auto| clear l; intros a l _; revert a].
elim l; [intro a|clear l; intros b l IHl a]; intros n1 n2 d1 d2 _ H Hn1 Hn2 Hn.
simpl in Hn1, Hn2.
apply PeanoNat.Nat.lt_1_r in Hn1; rewrite Hn1.

*****
Hn : le n1 n2
Hn2 : lt n2 (S O)
Hn1 : eq n1 O
H : all_equiv'_aux (cons a nil)
d1,d2 : Prop
n1,n2 : nat
a : Prop
l : list Prop
*****
forall _ : nth O (cons a nil) d1, nth n2 (cons a nil) d2
+++++
apply PeanoNat.Nat.lt_1_r in Hn2; rewrite Hn2; simpl; auto.
-----
Lemma all_equiv'_auxP : forall l n1 n2 d1 d2, l <> nil -> all_equiv'_aux l -> n1 < length l -> n2 < length l -> n1 <= n2 -> nth n1 l d1 -> nth n2 l d2.
Proof.
intro l; elim l; [intros ? ? ? ? H; exfalso; apply H; auto| clear l; intros a l _; revert a].
elim l; [intro a|clear l; intros b l IHl a]; intros n1 n2 d1 d2 _ H Hn1 Hn2 Hn.

*****
Hn : le n1 n2
Hn2 : lt n2 (length (cons a (cons b l)))
Hn1 : lt n1 (length (cons a (cons b l)))
H : all_equiv'_aux (cons a (cons b l))
d1,d2 : Prop
n1,n2 : nat
a : Prop
IHl : forall (a : Prop) (n1 n2 : nat) (d1 d2 : Prop)\n (_ : not (eq (cons a l) nil)) (_ : all_equiv'_aux (cons a l))\n (_ : lt n1 (length (cons a l))) (_ : lt n2 (length (cons a l)))\n (_ : le n1 n2) (_ : nth n1 (cons a l) d1), nth n2 (cons a l) d2
l : list Prop
b : Prop
*****
forall _ : nth n1 (cons a (cons b l)) d1, nth n2 (cons a (cons b l)) d2
+++++
destruct H as [HI H].
-----
Lemma all_equiv'_auxP : forall l n1 n2 d1 d2, l <> nil -> all_equiv'_aux l -> n1 < length l -> n2 < length l -> n1 <= n2 -> nth n1 l d1 -> nth n2 l d2.
Proof.
intro l; elim l; [intros ? ? ? ? H; exfalso; apply H; auto| clear l; intros a l _; revert a].
elim l; [intro a|clear l; intros b l IHl a]; intros n1 n2 d1 d2 _ H Hn1 Hn2 Hn.
destruct H as [HI H].

*****
Hn : le n1 n2
Hn2 : lt n2 (length (cons a (cons b l)))
Hn1 : lt n1 (length (cons a (cons b l)))
H : all_equiv'_aux (cons b l)
HI : forall _ : a, b
d1,d2 : Prop
n1,n2 : nat
a : Prop
IHl : forall (a : Prop) (n1 n2 : nat) (d1 d2 : Prop)\n (_ : not (eq (cons a l) nil)) (_ : all_equiv'_aux (cons a l))\n (_ : lt n1 (length (cons a l))) (_ : lt n2 (length (cons a l)))\n (_ : le n1 n2) (_ : nth n1 (cons a l) d1), nth n2 (cons a l) d2
l : list Prop
b : Prop
*****
forall _ : nth n1 (cons a (cons b l)) d1, nth n2 (cons a (cons b l)) d2
+++++
revert dependent n2.
-----
Lemma all_equiv'_auxP : forall l n1 n2 d1 d2, l <> nil -> all_equiv'_aux l -> n1 < length l -> n2 < length l -> n1 <= n2 -> nth n1 l d1 -> nth n2 l d2.
Proof.
intro l; elim l; [intros ? ? ? ? H; exfalso; apply H; auto| clear l; intros a l _; revert a].
elim l; [intro a|clear l; intros b l IHl a]; intros n1 n2 d1 d2 _ H Hn1 Hn2 Hn.
destruct H as [HI H].
revert dependent n2.

*****
Hn1 : lt n1 (length (cons a (cons b l)))
H : all_equiv'_aux (cons b l)
HI : forall _ : a, b
d1,d2 : Prop
n1 : nat
a : Prop
IHl : forall (a : Prop) (n1 n2 : nat) (d1 d2 : Prop)\n (_ : not (eq (cons a l) nil)) (_ : all_equiv'_aux (cons a l))\n (_ : lt n1 (length (cons a l))) (_ : lt n2 (length (cons a l)))\n (_ : le n1 n2) (_ : nth n1 (cons a l) d1), nth n2 (cons a l) d2
l : list Prop
b : Prop
*****
forall (n2 : nat) (_ : lt n2 (length (cons a (cons b l)))) (_ : le n1 n2) (_ : nth n1 (cons a (cons b l)) d1), nth n2 (cons a (cons b l)) d2
+++++
revert dependent n1; intro n1.
-----
Lemma all_equiv'_auxP : forall l n1 n2 d1 d2, l <> nil -> all_equiv'_aux l -> n1 < length l -> n2 < length l -> n1 <= n2 -> nth n1 l d1 -> nth n2 l d2.
Proof.
intro l; elim l; [intros ? ? ? ? H; exfalso; apply H; auto| clear l; intros a l _; revert a].
elim l; [intro a|clear l; intros b l IHl a]; intros n1 n2 d1 d2 _ H Hn1 Hn2 Hn.
destruct H as [HI H].
revert dependent n2.
revert dependent n1; intro n1.

*****
n1 : nat
H : all_equiv'_aux (cons b l)
HI : forall _ : a, b
a,d1,d2 : Prop
IHl : forall (a : Prop) (n1 n2 : nat) (d1 d2 : Prop)\n (_ : not (eq (cons a l) nil)) (_ : all_equiv'_aux (cons a l))\n (_ : lt n1 (length (cons a l))) (_ : lt n2 (length (cons a l)))\n (_ : le n1 n2) (_ : nth n1 (cons a l) d1), nth n2 (cons a l) d2
l : list Prop
b : Prop
*****
forall (_ : lt n1 (length (cons a (cons b l)))) (n2 : nat) (_ : lt n2 (length (cons a (cons b l)))) (_ : le n1 n2) (_ : nth n1 (cons a (cons b l)) d1), nth n2 (cons a (cons b l)) d2
+++++
elim n1; [|clear n1; intros n1 IHn1]; intro Hn1.
-----
Lemma all_equiv'_auxP : forall l n1 n2 d1 d2, l <> nil -> all_equiv'_aux l -> n1 < length l -> n2 < length l -> n1 <= n2 -> nth n1 l d1 -> nth n2 l d2.
Proof.
intro l; elim l; [intros ? ? ? ? H; exfalso; apply H; auto| clear l; intros a l _; revert a].
elim l; [intro a|clear l; intros b l IHl a]; intros n1 n2 d1 d2 _ H Hn1 Hn2 Hn.
destruct H as [HI H].
revert dependent n2.
revert dependent n1; intro n1.
elim n1; [|clear n1; intros n1 IHn1]; intro Hn1.

*****
Hn1 : lt O (length (cons a (cons b l)))
n1 : nat
H : all_equiv'_aux (cons b l)
HI : forall _ : a, b
a,d1,d2 : Prop
IHl : forall (a : Prop) (n1 n2 : nat) (d1 d2 : Prop)\n (_ : not (eq (cons a l) nil)) (_ : all_equiv'_aux (cons a l))\n (_ : lt n1 (length (cons a l))) (_ : lt n2 (length (cons a l)))\n (_ : le n1 n2) (_ : nth n1 (cons a l) d1), nth n2 (cons a l) d2
l : list Prop
b : Prop
*****
forall (n2 : nat) (_ : lt n2 (length (cons a (cons b l)))) (_ : le O n2) (_ : nth O (cons a (cons b l)) d1), nth n2 (cons a (cons b l)) d2
+++++
intro n2; elim n2; [simpl; auto|clear n2; intros n2 IHn2 Hn2 _ Ha].
-----
Lemma all_equiv'_auxP : forall l n1 n2 d1 d2, l <> nil -> all_equiv'_aux l -> n1 < length l -> n2 < length l -> n1 <= n2 -> nth n1 l d1 -> nth n2 l d2.
Proof.
intro l; elim l; [intros ? ? ? ? H; exfalso; apply H; auto| clear l; intros a l _; revert a].
elim l; [intro a|clear l; intros b l IHl a]; intros n1 n2 d1 d2 _ H Hn1 Hn2 Hn.
destruct H as [HI H].
revert dependent n2.
revert dependent n1; intro n1.
elim n1; [|clear n1; intros n1 IHn1]; intro Hn1.
intro n2; elim n2; [simpl; auto|clear n2; intros n2 IHn2 Hn2 _ Ha].

*****
Ha : nth O (cons a (cons b l)) d1
Hn2 : lt (S n2) (length (cons a (cons b l)))
IHn2 : forall (_ : lt n2 (length (cons a (cons b l)))) (_ : le O n2)\n (_ : nth O (cons a (cons b l)) d1), nth n2 (cons a (cons b l)) d2
n2 : nat
Hn1 : lt O (length (cons a (cons b l)))
n1 : nat
H : all_equiv'_aux (cons b l)
HI : forall _ : a, b
a,d1,d2 : Prop
IHl : forall (a : Prop) (n1 n2 : nat) (d1 d2 : Prop)\n (_ : not (eq (cons a l) nil)) (_ : all_equiv'_aux (cons a l))\n (_ : lt n1 (length (cons a l))) (_ : lt n2 (length (cons a l)))\n (_ : le n1 n2) (_ : nth n1 (cons a l) d1), nth n2 (cons a l) d2
l : list Prop
b : Prop
*****
nth (S n2) (cons a (cons b l)) d2
+++++
simpl in Ha; apply HI in Ha; apply IHl with 0 d1; auto; simpl in *; [discriminate|apply PeanoNat.Nat.lt_0_succ| apply Lt.lt_S_n; auto|apply le_0_n].
-----
Lemma all_equiv'_auxP : forall l n1 n2 d1 d2, l <> nil -> all_equiv'_aux l -> n1 < length l -> n2 < length l -> n1 <= n2 -> nth n1 l d1 -> nth n2 l d2.
Proof.
intro l; elim l; [intros ? ? ? ? H; exfalso; apply H; auto| clear l; intros a l _; revert a].
elim l; [intro a|clear l; intros b l IHl a]; intros n1 n2 d1 d2 _ H Hn1 Hn2 Hn.
destruct H as [HI H].
revert dependent n2.
revert dependent n1; intro n1.
elim n1; [|clear n1; intros n1 IHn1]; intro Hn1.

*****
Hn1 : lt (S n1) (length (cons a (cons b l)))
IHn1 : forall (_ : lt n1 (length (cons a (cons b l)))) (n2 : nat)\n (_ : lt n2 (length (cons a (cons b l)))) (_ : le n1 n2)\n (_ : nth n1 (cons a (cons b l)) d1), nth n2 (cons a (cons b l)) d2
n1 : nat
H : all_equiv'_aux (cons b l)
HI : forall _ : a, b
a,d1,d2 : Prop
IHl : forall (a : Prop) (n1 n2 : nat) (d1 d2 : Prop)\n (_ : not (eq (cons a l) nil)) (_ : all_equiv'_aux (cons a l))\n (_ : lt n1 (length (cons a l))) (_ : lt n2 (length (cons a l)))\n (_ : le n1 n2) (_ : nth n1 (cons a l) d1), nth n2 (cons a l) d2
l : list Prop
b : Prop
*****
forall (n2 : nat) (_ : lt n2 (length (cons a (cons b l)))) (_ : le (S n1) n2) (_ : nth (S n1) (cons a (cons b l)) d1), nth n2 (cons a (cons b l)) d2
+++++
intro n2; elim n2; [intros _ HF; apply PeanoNat.Nat.nle_succ_0 in HF; intuition| clear n2; intros n2 IHn2 Hn2 HLe H'].
-----
Lemma all_equiv'_auxP : forall l n1 n2 d1 d2, l <> nil -> all_equiv'_aux l -> n1 < length l -> n2 < length l -> n1 <= n2 -> nth n1 l d1 -> nth n2 l d2.
Proof.
intro l; elim l; [intros ? ? ? ? H; exfalso; apply H; auto| clear l; intros a l _; revert a].
elim l; [intro a|clear l; intros b l IHl a]; intros n1 n2 d1 d2 _ H Hn1 Hn2 Hn.
destruct H as [HI H].
revert dependent n2.
revert dependent n1; intro n1.
elim n1; [|clear n1; intros n1 IHn1]; intro Hn1.
intro n2; elim n2; [intros _ HF; apply PeanoNat.Nat.nle_succ_0 in HF; intuition| clear n2; intros n2 IHn2 Hn2 HLe H'].

*****
H' : nth (S n1) (cons a (cons b l)) d1
HLe : le (S n1) (S n2)
Hn2 : lt (S n2) (length (cons a (cons b l)))
IHn2 : forall (_ : lt n2 (length (cons a (cons b l)))) (_ : le (S n1) n2)\n (_ : nth (S n1) (cons a (cons b l)) d1),\nnth n2 (cons a (cons b l)) d2
n2 : nat
Hn1 : lt (S n1) (length (cons a (cons b l)))
IHn1 : forall (_ : lt n1 (length (cons a (cons b l)))) (n2 : nat)\n (_ : lt n2 (length (cons a (cons b l)))) (_ : le n1 n2)\n (_ : nth n1 (cons a (cons b l)) d1), nth n2 (cons a (cons b l)) d2
n1 : nat
H : all_equiv'_aux (cons b l)
HI : forall _ : a, b
a,d1,d2 : Prop
IHl : forall (a : Prop) (n1 n2 : nat) (d1 d2 : Prop)\n (_ : not (eq (cons a l) nil)) (_ : all_equiv'_aux (cons a l))\n (_ : lt n1 (length (cons a l))) (_ : lt n2 (length (cons a l)))\n (_ : le n1 n2) (_ : nth n1 (cons a l) d1), nth n2 (cons a l) d2
l : list Prop
b : Prop
*****
nth (S n2) (cons a (cons b l)) d2
+++++
assert (Hnth : forall n (l : list Prop) a d, nth (S n) (a :: l) d = nth n l d) by (intro n; induction n; simpl; auto).
-----
Lemma all_equiv'_auxP : forall l n1 n2 d1 d2, l <> nil -> all_equiv'_aux l -> n1 < length l -> n2 < length l -> n1 <= n2 -> nth n1 l d1 -> nth n2 l d2.
Proof.
intro l; elim l; [intros ? ? ? ? H; exfalso; apply H; auto| clear l; intros a l _; revert a].
elim l; [intro a|clear l; intros b l IHl a]; intros n1 n2 d1 d2 _ H Hn1 Hn2 Hn.
destruct H as [HI H].
revert dependent n2.
revert dependent n1; intro n1.
elim n1; [|clear n1; intros n1 IHn1]; intro Hn1.
intro n2; elim n2; [intros _ HF; apply PeanoNat.Nat.nle_succ_0 in HF; intuition| clear n2; intros n2 IHn2 Hn2 HLe H'].
assert (Hnth : forall n (l : list Prop) a d, nth (S n) (a :: l) d = nth n l d) by (intro n; induction n; simpl; auto).

*****
Hnth : forall (n : nat) (l : list Prop) (a d : Prop),\neq (nth (S n) (cons a l) d) (nth n l d)
H' : nth (S n1) (cons a (cons b l)) d1
HLe : le (S n1) (S n2)
Hn2 : lt (S n2) (length (cons a (cons b l)))
IHn2 : forall (_ : lt n2 (length (cons a (cons b l)))) (_ : le (S n1) n2)\n (_ : nth (S n1) (cons a (cons b l)) d1),\nnth n2 (cons a (cons b l)) d2
n2 : nat
Hn1 : lt (S n1) (length (cons a (cons b l)))
IHn1 : forall (_ : lt n1 (length (cons a (cons b l)))) (n2 : nat)\n (_ : lt n2 (length (cons a (cons b l)))) (_ : le n1 n2)\n (_ : nth n1 (cons a (cons b l)) d1), nth n2 (cons a (cons b l)) d2
n1 : nat
H : all_equiv'_aux (cons b l)
HI : forall _ : a, b
a,d1,d2 : Prop
IHl : forall (a : Prop) (n1 n2 : nat) (d1 d2 : Prop)\n (_ : not (eq (cons a l) nil)) (_ : all_equiv'_aux (cons a l))\n (_ : lt n1 (length (cons a l))) (_ : lt n2 (length (cons a l)))\n (_ : le n1 n2) (_ : nth n1 (cons a l) d1), nth n2 (cons a l) d2
l : list Prop
b : Prop
*****
nth (S n2) (cons a (cons b l)) d2
+++++
rewrite Hnth; rewrite Hnth in H'; clear Hnth; apply IHl with n1 d1; auto; [discriminate|simpl in Hn1|simpl in Hn2|apply Le.le_S_n]; auto; apply Lt.lt_S_n; auto.
-----
Lemma all_equiv'_auxP : forall l n1 n2 d1 d2, l <> nil -> all_equiv'_aux l -> n1 < length l -> n2 < length l -> n1 <= n2 -> nth n1 l d1 -> nth n2 l d2.
Proof.
intro l; elim l; [intros ? ? ? ? H; exfalso; apply H; auto| clear l; intros a l _; revert a].
elim l; [intro a|clear l; intros b l IHl a]; intros n1 n2 d1 d2 _ H Hn1 Hn2 Hn.

*****

*****

+++++
Qed.
-----
Definition all_equiv' (l: list Prop) : Prop.
-----
Definition all_equiv' (l: list Prop) : Prop.

*****
l : list Prop
*****
Prop
+++++
induction l.
-----
Definition all_equiv' (l: list Prop) : Prop.
induction l.

*****

*****
Prop
+++++
exact True.
-----
Definition all_equiv' (l: list Prop) : Prop.
induction l.

*****
IHl : Prop
l : list Prop
a : Prop
*****
Prop
+++++
idtac.
-----
Definition all_equiv' (l: list Prop) : Prop.
induction l.
idtac.

*****
IHl : Prop
l : list Prop
a : Prop
*****
Prop
+++++
exact ((last l a -> a) /\ all_equiv'_aux (a::l)).
-----
Definition all_equiv' (l: list Prop) : Prop.
induction l.

*****

*****

+++++
Defined.
-----
Lemma all_equiv__equiv : forall l, all_equiv l <-> all_equiv' l.
-----
Lemma all_equiv__equiv : forall l, all_equiv l <-> all_equiv' l.

*****

*****
forall l : list Prop, iff (all_equiv l) (all_equiv' l)
+++++
Proof.
-----
Lemma all_equiv__equiv : forall l, all_equiv l <-> all_equiv' l.
Proof.

*****

*****
forall l : list Prop, iff (all_equiv l) (all_equiv' l)
+++++
intro l; split.
-----
Lemma all_equiv__equiv : forall l, all_equiv l <-> all_equiv' l.
Proof.
intro l; split.

*****
l : list Prop
*****
forall _ : all_equiv l, all_equiv' l
+++++
elim l; [simpl; auto|clear l; intros a l _; revert a].
-----
Lemma all_equiv__equiv : forall l, all_equiv l <-> all_equiv' l.
Proof.
intro l; split.
elim l; [simpl; auto|clear l; intros a l _; revert a].

*****
l : list Prop
*****
forall (a : Prop) (_ : all_equiv (cons a l)), all_equiv' (cons a l)
+++++
elim l; [simpl; intros; split; auto|clear l; intros b l _ a H; split].
-----
Lemma all_equiv__equiv : forall l, all_equiv l <-> all_equiv' l.
Proof.
intro l; split.
elim l; [simpl; auto|clear l; intros a l _; revert a].
elim l; [simpl; intros; split; auto|clear l; intros b l _ a H; split].

*****
H : all_equiv (cons a (cons b l))
a : Prop
l : list Prop
b : Prop
*****
forall _ : last (cons b l) a, a
+++++
apply H; [apply in_eq|clear H; apply in_cons; revert b; revert a].
-----
Lemma all_equiv__equiv : forall l, all_equiv l <-> all_equiv' l.
Proof.
intro l; split.
elim l; [simpl; auto|clear l; intros a l _; revert a].
elim l; [simpl; intros; split; auto|clear l; intros b l _ a H; split].
apply H; [apply in_eq|clear H; apply in_cons; revert b; revert a].

*****
l : list Prop
*****
forall a b : Prop, In (last (cons b l) a) (cons b l)
+++++
elim l; [simpl; auto|clear l; intros b l IHl d a].
-----
Lemma all_equiv__equiv : forall l, all_equiv l <-> all_equiv' l.
Proof.
intro l; split.
elim l; [simpl; auto|clear l; intros a l _; revert a].
elim l; [simpl; intros; split; auto|clear l; intros b l _ a H; split].
apply H; [apply in_eq|clear H; apply in_cons; revert b; revert a].
elim l; [simpl; auto|clear l; intros b l IHl d a].

*****
d,a : Prop
IHl : forall a b : Prop, In (last (cons b l) a) (cons b l)
l : list Prop
b : Prop
*****
In (last (cons a (cons b l)) d) (cons a (cons b l))
+++++
assert (H : last (a :: b :: l) = last (b :: l)) by (induction l; simpl; auto); rewrite H; apply in_cons; auto.
-----
Lemma all_equiv__equiv : forall l, all_equiv l <-> all_equiv' l.
Proof.
intro l; split.
elim l; [simpl; auto|clear l; intros a l _; revert a].
elim l; [simpl; intros; split; auto|clear l; intros b l _ a H; split].

*****
H : all_equiv (cons a (cons b l))
a : Prop
l : list Prop
b : Prop
*****
all_equiv'_aux (cons a (cons b l))
+++++
revert H; revert b; revert a; elim l; [|clear l; intros c l IHl a b H]; [simpl; intros a b H; split; auto; apply H; [apply in_cons|]; apply in_eq|].
-----
Lemma all_equiv__equiv : forall l, all_equiv l <-> all_equiv' l.
Proof.
intro l; split.
elim l; [simpl; auto|clear l; intros a l _; revert a].
elim l; [simpl; intros; split; auto|clear l; intros b l _ a H; split].
revert H; revert b; revert a; elim l; [|clear l; intros c l IHl a b H]; [simpl; intros a b H; split; auto; apply H; [apply in_cons|]; apply in_eq|].

*****
H : all_equiv (cons a (cons b (cons c l)))
a,b : Prop
IHl : forall (a b : Prop) (_ : all_equiv (cons a (cons b l))),\nall_equiv'_aux (cons a (cons b l))
l : list Prop
c : Prop
*****
all_equiv'_aux (cons a (cons b (cons c l)))
+++++
split; [apply H; [apply in_cons|]; apply in_eq|].
-----
Lemma all_equiv__equiv : forall l, all_equiv l <-> all_equiv' l.
Proof.
intro l; split.
elim l; [simpl; auto|clear l; intros a l _; revert a].
elim l; [simpl; intros; split; auto|clear l; intros b l _ a H; split].
revert H; revert b; revert a; elim l; [|clear l; intros c l IHl a b H]; [simpl; intros a b H; split; auto; apply H; [apply in_cons|]; apply in_eq|].
split; [apply H; [apply in_cons|]; apply in_eq|].

*****
H : all_equiv (cons a (cons b (cons c l)))
a,b : Prop
IHl : forall (a b : Prop) (_ : all_equiv (cons a (cons b l))),\nall_equiv'_aux (cons a (cons b l))
l : list Prop
c : Prop
*****
all_equiv'_aux (cons b (cons c l))
+++++
apply IHl; intros x y Hx Hy; apply H; apply in_cons; auto.
-----
Lemma all_equiv__equiv : forall l, all_equiv l <-> all_equiv' l.
Proof.
intro l; split.

*****
l : list Prop
*****
forall _ : all_equiv' l, all_equiv l
+++++
elim l; [unfold all_equiv; simpl; tauto|clear l; intros a l _; revert a].
-----
Lemma all_equiv__equiv : forall l, all_equiv l <-> all_equiv' l.
Proof.
intro l; split.
elim l; [unfold all_equiv; simpl; tauto|clear l; intros a l _; revert a].

*****
l : list Prop
*****
forall (a : Prop) (_ : all_equiv' (cons a l)), all_equiv (cons a l)
+++++
elim l;[ unfold all_equiv; simpl; intros a _ x y Hx Hy; elim Hx; [clear Hx; intro Hx|tauto]; elim Hy; [clear Hy; intro Hy|tauto]; rewrite <- Hx; rewrite Hy; tauto|clear l; intros b l _ a H].
-----
Lemma all_equiv__equiv : forall l, all_equiv l <-> all_equiv' l.
Proof.
intro l; split.
elim l; [unfold all_equiv; simpl; tauto|clear l; intros a l _; revert a].
elim l;[ unfold all_equiv; simpl; intros a _ x y Hx Hy; elim Hx; [clear Hx; intro Hx|tauto]; elim Hy; [clear Hy; intro Hy|tauto]; rewrite <- Hx; rewrite Hy; tauto|clear l; intros b l _ a H].

*****
H : all_equiv' (cons a (cons b l))
a : Prop
l : list Prop
b : Prop
*****
all_equiv (cons a (cons b l))
+++++
intros x y Hx Hy; destruct H as [Hend Hbeg].
-----
Lemma all_equiv__equiv : forall l, all_equiv l <-> all_equiv' l.
Proof.
intro l; split.
elim l; [unfold all_equiv; simpl; tauto|clear l; intros a l _; revert a].
elim l;[ unfold all_equiv; simpl; intros a _ x y Hx Hy; elim Hx; [clear Hx; intro Hx|tauto]; elim Hy; [clear Hy; intro Hy|tauto]; rewrite <- Hx; rewrite Hy; tauto|clear l; intros b l _ a H].
intros x y Hx Hy; destruct H as [Hend Hbeg].

*****
Hy : In y (cons a (cons b l))
Hx : In x (cons a (cons b l))
x,y : Prop
Hbeg : all_equiv'_aux (cons a (cons b l))
Hend : forall _ : last (cons b l) a, a
a : Prop
l : list Prop
b : Prop
*****
iff x y
+++++
destruct (In_nth _ _ a Hx) as [n1 Hn1]; clear Hx; destruct Hn1 as [Hn1 Hx].
-----
Lemma all_equiv__equiv : forall l, all_equiv l <-> all_equiv' l.
Proof.
intro l; split.
elim l; [unfold all_equiv; simpl; tauto|clear l; intros a l _; revert a].
elim l;[ unfold all_equiv; simpl; intros a _ x y Hx Hy; elim Hx; [clear Hx; intro Hx|tauto]; elim Hy; [clear Hy; intro Hy|tauto]; rewrite <- Hx; rewrite Hy; tauto|clear l; intros b l _ a H].
intros x y Hx Hy; destruct H as [Hend Hbeg].
destruct (In_nth _ _ a Hx) as [n1 Hn1]; clear Hx; destruct Hn1 as [Hn1 Hx].

*****
Hx : eq (nth n1 (cons a (cons b l)) a) x
Hn1 : lt n1 (length (cons a (cons b l)))
n1 : nat
Hy : In y (cons a (cons b l))
x,y : Prop
Hbeg : all_equiv'_aux (cons a (cons b l))
Hend : forall _ : last (cons b l) a, a
a : Prop
l : list Prop
b : Prop
*****
iff x y
+++++
destruct (In_nth _ _ a Hy) as [n2 Hn2]; clear Hy; destruct Hn2 as [Hn2 Hy].
-----
Lemma all_equiv__equiv : forall l, all_equiv l <-> all_equiv' l.
Proof.
intro l; split.
elim l; [unfold all_equiv; simpl; tauto|clear l; intros a l _; revert a].
elim l;[ unfold all_equiv; simpl; intros a _ x y Hx Hy; elim Hx; [clear Hx; intro Hx|tauto]; elim Hy; [clear Hy; intro Hy|tauto]; rewrite <- Hx; rewrite Hy; tauto|clear l; intros b l _ a H].
intros x y Hx Hy; destruct H as [Hend Hbeg].
destruct (In_nth _ _ a Hx) as [n1 Hn1]; clear Hx; destruct Hn1 as [Hn1 Hx].
destruct (In_nth _ _ a Hy) as [n2 Hn2]; clear Hy; destruct Hn2 as [Hn2 Hy].

*****
Hy : eq (nth n2 (cons a (cons b l)) a) y
Hn2 : lt n2 (length (cons a (cons b l)))
n2 : nat
Hx : eq (nth n1 (cons a (cons b l)) a) x
Hn1 : lt n1 (length (cons a (cons b l)))
n1 : nat
x,y : Prop
Hbeg : all_equiv'_aux (cons a (cons b l))
Hend : forall _ : last (cons b l) a, a
a : Prop
l : list Prop
b : Prop
*****
iff x y
+++++
assert (Hlast : nth (S (length l)) (a :: b :: l) a = last (b :: l) a).
-----
Lemma all_equiv__equiv : forall l, all_equiv l <-> all_equiv' l.
Proof.
intro l; split.
elim l; [unfold all_equiv; simpl; tauto|clear l; intros a l _; revert a].
elim l;[ unfold all_equiv; simpl; intros a _ x y Hx Hy; elim Hx; [clear Hx; intro Hx|tauto]; elim Hy; [clear Hy; intro Hy|tauto]; rewrite <- Hx; rewrite Hy; tauto|clear l; intros b l _ a H].
intros x y Hx Hy; destruct H as [Hend Hbeg].
destruct (In_nth _ _ a Hx) as [n1 Hn1]; clear Hx; destruct Hn1 as [Hn1 Hx].
destruct (In_nth _ _ a Hy) as [n2 Hn2]; clear Hy; destruct Hn2 as [Hn2 Hy].
assert (Hlast : nth (S (length l)) (a :: b :: l) a = last (b :: l) a).

*****
Hy : eq (nth n2 (cons a (cons b l)) a) y
Hn2 : lt n2 (length (cons a (cons b l)))
n2 : nat
Hx : eq (nth n1 (cons a (cons b l)) a) x
Hn1 : lt n1 (length (cons a (cons b l)))
n1 : nat
x,y : Prop
Hbeg : all_equiv'_aux (cons a (cons b l))
Hend : forall _ : last (cons b l) a, a
a : Prop
l : list Prop
b : Prop
*****
eq (nth (S (length l)) (cons a (cons b l)) a) (last (cons b l) a)
+++++
transitivity (nth (length l) (b :: l) a); [simpl; auto|].
-----
Lemma all_equiv__equiv : forall l, all_equiv l <-> all_equiv' l.
Proof.
intro l; split.
elim l; [unfold all_equiv; simpl; tauto|clear l; intros a l _; revert a].
elim l;[ unfold all_equiv; simpl; intros a _ x y Hx Hy; elim Hx; [clear Hx; intro Hx|tauto]; elim Hy; [clear Hy; intro Hy|tauto]; rewrite <- Hx; rewrite Hy; tauto|clear l; intros b l _ a H].
intros x y Hx Hy; destruct H as [Hend Hbeg].
destruct (In_nth _ _ a Hx) as [n1 Hn1]; clear Hx; destruct Hn1 as [Hn1 Hx].
destruct (In_nth _ _ a Hy) as [n2 Hn2]; clear Hy; destruct Hn2 as [Hn2 Hy].
assert (Hlast : nth (S (length l)) (a :: b :: l) a = last (b :: l) a).
transitivity (nth (length l) (b :: l) a); [simpl; auto|].

*****
Hy : eq (nth n2 (cons a (cons b l)) a) y
Hn2 : lt n2 (length (cons a (cons b l)))
n2 : nat
Hx : eq (nth n1 (cons a (cons b l)) a) x
Hn1 : lt n1 (length (cons a (cons b l)))
n1 : nat
x,y : Prop
Hbeg : all_equiv'_aux (cons a (cons b l))
Hend : forall _ : last (cons b l) a, a
a : Prop
l : list Prop
b : Prop
*****
eq (nth (length l) (cons b l) a) (last (cons b l) a)
+++++
revert dependent b.
-----
Lemma all_equiv__equiv : forall l, all_equiv l <-> all_equiv' l.
Proof.
intro l; split.
elim l; [unfold all_equiv; simpl; tauto|clear l; intros a l _; revert a].
elim l;[ unfold all_equiv; simpl; intros a _ x y Hx Hy; elim Hx; [clear Hx; intro Hx|tauto]; elim Hy; [clear Hy; intro Hy|tauto]; rewrite <- Hx; rewrite Hy; tauto|clear l; intros b l _ a H].
intros x y Hx Hy; destruct H as [Hend Hbeg].
destruct (In_nth _ _ a Hx) as [n1 Hn1]; clear Hx; destruct Hn1 as [Hn1 Hx].
destruct (In_nth _ _ a Hy) as [n2 Hn2]; clear Hy; destruct Hn2 as [Hn2 Hy].
assert (Hlast : nth (S (length l)) (a :: b :: l) a = last (b :: l) a).
transitivity (nth (length l) (b :: l) a); [simpl; auto|].
revert dependent b.

*****
n1,n2 : nat
a,x,y : Prop
l : list Prop
*****
forall (b : Prop) (_ : forall _ : last (cons b l) a, a) (_ : all_equiv'_aux (cons a (cons b l))) (_ : lt n1 (length (cons a (cons b l)))) (_ : eq (nth n1 (cons a (cons b l)) a) x) (_ : lt n2 (length (cons a (cons b l)))) (_ : eq (nth n2 (cons a (cons b l)) a) y), eq (nth (length l) (cons b l) a) (last (cons b l) a)
+++++
intros b _ _ _ _ _ _; clear n1 n2 x y.
-----
Lemma all_equiv__equiv : forall l, all_equiv l <-> all_equiv' l.
Proof.
intro l; split.
elim l; [unfold all_equiv; simpl; tauto|clear l; intros a l _; revert a].
elim l;[ unfold all_equiv; simpl; intros a _ x y Hx Hy; elim Hx; [clear Hx; intro Hx|tauto]; elim Hy; [clear Hy; intro Hy|tauto]; rewrite <- Hx; rewrite Hy; tauto|clear l; intros b l _ a H].
intros x y Hx Hy; destruct H as [Hend Hbeg].
destruct (In_nth _ _ a Hx) as [n1 Hn1]; clear Hx; destruct Hn1 as [Hn1 Hx].
destruct (In_nth _ _ a Hy) as [n2 Hn2]; clear Hy; destruct Hn2 as [Hn2 Hy].
assert (Hlast : nth (S (length l)) (a :: b :: l) a = last (b :: l) a).
transitivity (nth (length l) (b :: l) a); [simpl; auto|].
revert dependent b.
intros b _ _ _ _ _ _; clear n1 n2 x y.

*****
a,b : Prop
l : list Prop
*****
eq (nth (length l) (cons b l) a) (last (cons b l) a)
+++++
revert b; revert a; elim l; [simpl; auto|clear l; intros b l IHl d a].
-----
Lemma all_equiv__equiv : forall l, all_equiv l <-> all_equiv' l.
Proof.
intro l; split.
elim l; [unfold all_equiv; simpl; tauto|clear l; intros a l _; revert a].
elim l;[ unfold all_equiv; simpl; intros a _ x y Hx Hy; elim Hx; [clear Hx; intro Hx|tauto]; elim Hy; [clear Hy; intro Hy|tauto]; rewrite <- Hx; rewrite Hy; tauto|clear l; intros b l _ a H].
intros x y Hx Hy; destruct H as [Hend Hbeg].
destruct (In_nth _ _ a Hx) as [n1 Hn1]; clear Hx; destruct Hn1 as [Hn1 Hx].
destruct (In_nth _ _ a Hy) as [n2 Hn2]; clear Hy; destruct Hn2 as [Hn2 Hy].
assert (Hlast : nth (S (length l)) (a :: b :: l) a = last (b :: l) a).
transitivity (nth (length l) (b :: l) a); [simpl; auto|].
revert dependent b.
intros b _ _ _ _ _ _; clear n1 n2 x y.
revert b; revert a; elim l; [simpl; auto|clear l; intros b l IHl d a].

*****
d,a : Prop
IHl : forall a b : Prop, eq (nth (length l) (cons b l) a) (last (cons b l) a)
l : list Prop
b : Prop
*****
eq (nth (length (cons b l)) (cons a (cons b l)) d) (last (cons a (cons b l)) d)
+++++
transitivity (nth (S (length l)) (a :: b :: l) d); [simpl; auto|].
-----
Lemma all_equiv__equiv : forall l, all_equiv l <-> all_equiv' l.
Proof.
intro l; split.
elim l; [unfold all_equiv; simpl; tauto|clear l; intros a l _; revert a].
elim l;[ unfold all_equiv; simpl; intros a _ x y Hx Hy; elim Hx; [clear Hx; intro Hx|tauto]; elim Hy; [clear Hy; intro Hy|tauto]; rewrite <- Hx; rewrite Hy; tauto|clear l; intros b l _ a H].
intros x y Hx Hy; destruct H as [Hend Hbeg].
destruct (In_nth _ _ a Hx) as [n1 Hn1]; clear Hx; destruct Hn1 as [Hn1 Hx].
destruct (In_nth _ _ a Hy) as [n2 Hn2]; clear Hy; destruct Hn2 as [Hn2 Hy].
assert (Hlast : nth (S (length l)) (a :: b :: l) a = last (b :: l) a).
transitivity (nth (length l) (b :: l) a); [simpl; auto|].
revert dependent b.
intros b _ _ _ _ _ _; clear n1 n2 x y.
revert b; revert a; elim l; [simpl; auto|clear l; intros b l IHl d a].
transitivity (nth (S (length l)) (a :: b :: l) d); [simpl; auto|].

*****
d,a : Prop
IHl : forall a b : Prop, eq (nth (length l) (cons b l) a) (last (cons b l) a)
l : list Prop
b : Prop
*****
eq (nth (S (length l)) (cons a (cons b l)) d) (last (cons a (cons b l)) d)
+++++
transitivity (nth (length l) (b :: l) d); [simpl; auto|].
-----
Lemma all_equiv__equiv : forall l, all_equiv l <-> all_equiv' l.
Proof.
intro l; split.
elim l; [unfold all_equiv; simpl; tauto|clear l; intros a l _; revert a].
elim l;[ unfold all_equiv; simpl; intros a _ x y Hx Hy; elim Hx; [clear Hx; intro Hx|tauto]; elim Hy; [clear Hy; intro Hy|tauto]; rewrite <- Hx; rewrite Hy; tauto|clear l; intros b l _ a H].
intros x y Hx Hy; destruct H as [Hend Hbeg].
destruct (In_nth _ _ a Hx) as [n1 Hn1]; clear Hx; destruct Hn1 as [Hn1 Hx].
destruct (In_nth _ _ a Hy) as [n2 Hn2]; clear Hy; destruct Hn2 as [Hn2 Hy].
assert (Hlast : nth (S (length l)) (a :: b :: l) a = last (b :: l) a).
transitivity (nth (length l) (b :: l) a); [simpl; auto|].
revert dependent b.
intros b _ _ _ _ _ _; clear n1 n2 x y.
revert b; revert a; elim l; [simpl; auto|clear l; intros b l IHl d a].
transitivity (nth (S (length l)) (a :: b :: l) d); [simpl; auto|].
transitivity (nth (length l) (b :: l) d); [simpl; auto|].

*****
d,a : Prop
IHl : forall a b : Prop, eq (nth (length l) (cons b l) a) (last (cons b l) a)
l : list Prop
b : Prop
*****
eq (nth (length l) (cons b l) d) (last (cons a (cons b l)) d)
+++++
rewrite IHl; simpl; auto.
-----
Lemma all_equiv__equiv : forall l, all_equiv l <-> all_equiv' l.
Proof.
intro l; split.
elim l; [unfold all_equiv; simpl; tauto|clear l; intros a l _; revert a].
elim l;[ unfold all_equiv; simpl; intros a _ x y Hx Hy; elim Hx; [clear Hx; intro Hx|tauto]; elim Hy; [clear Hy; intro Hy|tauto]; rewrite <- Hx; rewrite Hy; tauto|clear l; intros b l _ a H].
intros x y Hx Hy; destruct H as [Hend Hbeg].
destruct (In_nth _ _ a Hx) as [n1 Hn1]; clear Hx; destruct Hn1 as [Hn1 Hx].
destruct (In_nth _ _ a Hy) as [n2 Hn2]; clear Hy; destruct Hn2 as [Hn2 Hy].
assert (Hlast : nth (S (length l)) (a :: b :: l) a = last (b :: l) a).

*****
Hlast : eq (nth (S (length l)) (cons a (cons b l)) a) (last (cons b l) a)
Hy : eq (nth n2 (cons a (cons b l)) a) y
Hn2 : lt n2 (length (cons a (cons b l)))
n2 : nat
Hx : eq (nth n1 (cons a (cons b l)) a) x
Hn1 : lt n1 (length (cons a (cons b l)))
n1 : nat
x,y : Prop
Hbeg : all_equiv'_aux (cons a (cons b l))
Hend : forall _ : last (cons b l) a, a
a : Prop
l : list Prop
b : Prop
*****
iff x y
+++++
assert (HaE : a = nth 0 (a :: b :: l) a) by (simpl; auto).
-----
Lemma all_equiv__equiv : forall l, all_equiv l <-> all_equiv' l.
Proof.
intro l; split.
elim l; [unfold all_equiv; simpl; tauto|clear l; intros a l _; revert a].
elim l;[ unfold all_equiv; simpl; intros a _ x y Hx Hy; elim Hx; [clear Hx; intro Hx|tauto]; elim Hy; [clear Hy; intro Hy|tauto]; rewrite <- Hx; rewrite Hy; tauto|clear l; intros b l _ a H].
intros x y Hx Hy; destruct H as [Hend Hbeg].
destruct (In_nth _ _ a Hx) as [n1 Hn1]; clear Hx; destruct Hn1 as [Hn1 Hx].
destruct (In_nth _ _ a Hy) as [n2 Hn2]; clear Hy; destruct Hn2 as [Hn2 Hy].
assert (Hlast : nth (S (length l)) (a :: b :: l) a = last (b :: l) a).
assert (HaE : a = nth 0 (a :: b :: l) a) by (simpl; auto).

*****
HaE : eq a (nth O (cons a (cons b l)) a)
Hlast : eq (nth (S (length l)) (cons a (cons b l)) a) (last (cons b l) a)
Hy : eq (nth n2 (cons a (cons b l)) a) y
Hn2 : lt n2 (length (cons a (cons b l)))
n2 : nat
Hx : eq (nth n1 (cons a (cons b l)) a) x
Hn1 : lt n1 (length (cons a (cons b l)))
n1 : nat
x,y : Prop
Hbeg : all_equiv'_aux (cons a (cons b l))
Hend : forall _ : last (cons b l) a, a
a : Prop
l : list Prop
b : Prop
*****
iff x y
+++++
rewrite <- Hlast in Hend; clear Hlast; rewrite <- Hx; rewrite <- Hy.
-----
Lemma all_equiv__equiv : forall l, all_equiv l <-> all_equiv' l.
Proof.
intro l; split.
elim l; [unfold all_equiv; simpl; tauto|clear l; intros a l _; revert a].
elim l;[ unfold all_equiv; simpl; intros a _ x y Hx Hy; elim Hx; [clear Hx; intro Hx|tauto]; elim Hy; [clear Hy; intro Hy|tauto]; rewrite <- Hx; rewrite Hy; tauto|clear l; intros b l _ a H].
intros x y Hx Hy; destruct H as [Hend Hbeg].
destruct (In_nth _ _ a Hx) as [n1 Hn1]; clear Hx; destruct Hn1 as [Hn1 Hx].
destruct (In_nth _ _ a Hy) as [n2 Hn2]; clear Hy; destruct Hn2 as [Hn2 Hy].
assert (Hlast : nth (S (length l)) (a :: b :: l) a = last (b :: l) a).
assert (HaE : a = nth 0 (a :: b :: l) a) by (simpl; auto).
rewrite <- Hlast in Hend; clear Hlast; rewrite <- Hx; rewrite <- Hy.

*****
HaE : eq a (nth O (cons a (cons b l)) a)
Hy : eq (nth n2 (cons a (cons b l)) a) y
Hn2 : lt n2 (length (cons a (cons b l)))
n2 : nat
Hx : eq (nth n1 (cons a (cons b l)) a) x
Hn1 : lt n1 (length (cons a (cons b l)))
n1 : nat
x,y : Prop
Hbeg : all_equiv'_aux (cons a (cons b l))
Hend : forall _ : nth (S (length l)) (cons a (cons b l)) a, a
a : Prop
l : list Prop
b : Prop
*****
iff (nth n1 (cons a (cons b l)) a) (nth n2 (cons a (cons b l)) a)
+++++
elim (PeanoNat.Nat.lt_ge_cases n1 n2); intro HLe; split; try solve[apply all_equiv'_auxP; auto; try apply PeanoNat.Nat.lt_le_incl; auto; discriminate]; intro H; cut a; try (intro Ha; rewrite HaE in Ha; revert Ha); try(apply Hend; revert H); apply all_equiv'_auxP; auto; try discriminate; try apply PeanoNat.Nat.le_0_l; simpl in *; try apply PeanoNat.Nat.lt_0_succ; apply PeanoNat.Nat.lt_succ_r; auto.
-----
Lemma all_equiv__equiv : forall l, all_equiv l <-> all_equiv' l.
Proof.
intro l; split.

*****

*****

+++++
Qed.
-----
Definition stronger (l1 l2 : list Prop) :=\n  forall x y, In x l1 -> In y l2 -> (x -> y).
-----
Definition all_equiv_under (l1 l2 : list Prop) :=\n  forall x y z, In x l1 -> In y l2 -> In z l2 -> (x -> (y <-> z)).
-----
Lemma all_equiv_under_chara : forall l1 l2,\n  all_equiv_under l1 l2 <-> forall x, In x l1 -> x -> all_equiv l2.
-----
Lemma all_equiv_under_chara : forall l1 l2, all_equiv_under l1 l2 <-> forall x, In x l1 -> x -> all_equiv l2.

*****

*****
forall l1 l2 : list Prop, iff (all_equiv_under l1 l2) (forall (x : Prop) (_ : In x l1) (_ : x), all_equiv l2)
+++++
Proof.
-----
Lemma all_equiv_under_chara : forall l1 l2, all_equiv_under l1 l2 <-> forall x, In x l1 -> x -> all_equiv l2.
Proof.

*****

*****
forall l1 l2 : list Prop, iff (all_equiv_under l1 l2) (forall (x : Prop) (_ : In x l1) (_ : x), all_equiv l2)
+++++
unfold all_equiv_under.
-----
Lemma all_equiv_under_chara : forall l1 l2, all_equiv_under l1 l2 <-> forall x, In x l1 -> x -> all_equiv l2.
Proof.
unfold all_equiv_under.

*****

*****
forall l1 l2 : list Prop, iff (forall (x y z : Prop) (_ : In x l1) (_ : In y l2) (_ : In z l2) (_ : x), iff y z) (forall (x : Prop) (_ : In x l1) (_ : x), all_equiv l2)
+++++
unfold all_equiv.
-----
Lemma all_equiv_under_chara : forall l1 l2, all_equiv_under l1 l2 <-> forall x, In x l1 -> x -> all_equiv l2.
Proof.
unfold all_equiv_under.
unfold all_equiv.

*****

*****
forall l1 l2 : list Prop, iff (forall (x y z : Prop) (_ : In x l1) (_ : In y l2) (_ : In z l2) (_ : x), iff y z) (forall (x : Prop) (_ : In x l1) (_ : x) (x0 y : Prop) (_ : In x0 l2) (_ : In y l2), iff x0 y)
+++++
intros.
-----
Lemma all_equiv_under_chara : forall l1 l2, all_equiv_under l1 l2 <-> forall x, In x l1 -> x -> all_equiv l2.
Proof.
unfold all_equiv_under.
unfold all_equiv.
intros.

*****
l1,l2 : list Prop
*****
iff (forall (x y z : Prop) (_ : In x l1) (_ : In y l2) (_ : In z l2) (_ : x), iff y z) (forall (x : Prop) (_ : In x l1) (_ : x) (x0 y : Prop) (_ : In x0 l2) (_ : In y l2), iff x0 y)
+++++
split.
-----
Lemma all_equiv_under_chara : forall l1 l2, all_equiv_under l1 l2 <-> forall x, In x l1 -> x -> all_equiv l2.
Proof.
unfold all_equiv_under.
unfold all_equiv.
intros.
split.

*****
l1,l2 : list Prop
*****
forall (_ : forall (x y z : Prop) (_ : In x l1) (_ : In y l2) (_ : In z l2) (_ : x), iff y z) (x : Prop) (_ : In x l1) (_ : x) (x0 y : Prop) (_ : In x0 l2) (_ : In y l2), iff x0 y
+++++
intros.
-----
Lemma all_equiv_under_chara : forall l1 l2, all_equiv_under l1 l2 <-> forall x, In x l1 -> x -> all_equiv l2.
Proof.
unfold all_equiv_under.
unfold all_equiv.
intros.
split.
intros.

*****
H3 : In y l2
H2 : In x0 l2
x0,y : Prop
H1 : x
H0 : In x l1
x : Prop
H : forall (x y z : Prop) (_ : In x l1) (_ : In y l2) (_ : In z l2) (_ : x),\niff y z
l1,l2 : list Prop
*****
iff x0 y
+++++
eauto.
-----
Lemma all_equiv_under_chara : forall l1 l2, all_equiv_under l1 l2 <-> forall x, In x l1 -> x -> all_equiv l2.
Proof.
unfold all_equiv_under.
unfold all_equiv.
intros.
split.

*****
l1,l2 : list Prop
*****
forall (_ : forall (x : Prop) (_ : In x l1) (_ : x) (x0 y : Prop) (_ : In x0 l2) (_ : In y l2), iff x0 y) (x y z : Prop) (_ : In x l1) (_ : In y l2) (_ : In z l2) (_ : x), iff y z
+++++
intros.
-----
Lemma all_equiv_under_chara : forall l1 l2, all_equiv_under l1 l2 <-> forall x, In x l1 -> x -> all_equiv l2.
Proof.
unfold all_equiv_under.
unfold all_equiv.
intros.
split.
intros.

*****
H3 : x
H2 : In z l2
H1 : In y l2
H0 : In x l1
x,y,z : Prop
H : forall (x : Prop) (_ : In x l1) (_ : x) (x0 y : Prop) \n (_ : In x0 l2) (_ : In y l2), iff x0 y
l1,l2 : list Prop
*****
iff y z
+++++
eauto.
-----
Lemma all_equiv_under_chara : forall l1 l2, all_equiv_under l1 l2 <-> forall x, In x l1 -> x -> all_equiv l2.
Proof.
unfold all_equiv_under.
unfold all_equiv.
intros.
split.

*****

*****

+++++
Qed.
-----
Lemma all_equiv2_impl__stronger : forall l1 l2 x y,\n  all_equiv l1 -> all_equiv l2 -> In x l1 -> In y l2 -> (x -> y) -> stronger l1 l2.
-----
Lemma all_equiv2_impl__stronger : forall l1 l2 x y, all_equiv l1 -> all_equiv l2 -> In x l1 -> In y l2 -> (x -> y) -> stronger l1 l2.

*****

*****
forall (l1 l2 : list Prop) (x y : Prop) (_ : all_equiv l1) (_ : all_equiv l2) (_ : In x l1) (_ : In y l2) (_ : forall _ : x, y), stronger l1 l2
+++++
Proof.
-----
Lemma all_equiv2_impl__stronger : forall l1 l2 x y, all_equiv l1 -> all_equiv l2 -> In x l1 -> In y l2 -> (x -> y) -> stronger l1 l2.
Proof.

*****

*****
forall (l1 l2 : list Prop) (x y : Prop) (_ : all_equiv l1) (_ : all_equiv l2) (_ : In x l1) (_ : In y l2) (_ : forall _ : x, y), stronger l1 l2
+++++
intros l1 l2 x y Heq1 Heq2 HxIn HyIn Hxy x1 y1 Hx1In Hy1In.
-----
Lemma all_equiv2_impl__stronger : forall l1 l2 x y, all_equiv l1 -> all_equiv l2 -> In x l1 -> In y l2 -> (x -> y) -> stronger l1 l2.
Proof.
intros l1 l2 x y Heq1 Heq2 HxIn HyIn Hxy x1 y1 Hx1In Hy1In.

*****
Hy1In : In y1 l2
Hx1In : In x1 l1
x1,y1 : Prop
Hxy : forall _ : x, y
HyIn : In y l2
HxIn : In x l1
Heq2 : all_equiv l2
Heq1 : all_equiv l1
x,y : Prop
l1,l2 : list Prop
*****
forall _ : x1, y1
+++++
rewrite (Heq1 x1 x).
-----
Lemma all_equiv2_impl__stronger : forall l1 l2 x y, all_equiv l1 -> all_equiv l2 -> In x l1 -> In y l2 -> (x -> y) -> stronger l1 l2.
Proof.
intros l1 l2 x y Heq1 Heq2 HxIn HyIn Hxy x1 y1 Hx1In Hy1In.
rewrite (Heq1 x1 x).

*****
Hy1In : In y1 l2
Hx1In : In x1 l1
x1,y1 : Prop
Hxy : forall _ : x, y
HyIn : In y l2
HxIn : In x l1
Heq2 : all_equiv l2
Heq1 : all_equiv l1
x,y : Prop
l1,l2 : list Prop
*****
forall _ : x, y1
+++++
rewrite (Heq2 y1 y).
-----
Lemma all_equiv2_impl__stronger : forall l1 l2 x y, all_equiv l1 -> all_equiv l2 -> In x l1 -> In y l2 -> (x -> y) -> stronger l1 l2.
Proof.
intros l1 l2 x y Heq1 Heq2 HxIn HyIn Hxy x1 y1 Hx1In Hy1In.
rewrite (Heq1 x1 x).
rewrite (Heq2 y1 y).

*****
Hy1In : In y1 l2
Hx1In : In x1 l1
x1,y1 : Prop
Hxy : forall _ : x, y
HyIn : In y l2
HxIn : In x l1
Heq2 : all_equiv l2
Heq1 : all_equiv l1
x,y : Prop
l1,l2 : list Prop
*****
forall _ : x, y
+++++
assumption.
-----
Lemma all_equiv2_impl__stronger : forall l1 l2 x y, all_equiv l1 -> all_equiv l2 -> In x l1 -> In y l2 -> (x -> y) -> stronger l1 l2.
Proof.
intros l1 l2 x y Heq1 Heq2 HxIn HyIn Hxy x1 y1 Hx1In Hy1In.
rewrite (Heq1 x1 x).
rewrite (Heq2 y1 y).

*****
Hy1In : In y1 l2
Hx1In : In x1 l1
x1,y1 : Prop
Hxy : forall _ : x, y
HyIn : In y l2
HxIn : In x l1
Heq2 : all_equiv l2
Heq1 : all_equiv l1
x,y : Prop
l1,l2 : list Prop
*****
In y1 l2
+++++
assumption.
-----
Lemma all_equiv2_impl__stronger : forall l1 l2 x y, all_equiv l1 -> all_equiv l2 -> In x l1 -> In y l2 -> (x -> y) -> stronger l1 l2.
Proof.
intros l1 l2 x y Heq1 Heq2 HxIn HyIn Hxy x1 y1 Hx1In Hy1In.
rewrite (Heq1 x1 x).
rewrite (Heq2 y1 y).

*****
Hy1In : In y1 l2
Hx1In : In x1 l1
x1,y1 : Prop
Hxy : forall _ : x, y
HyIn : In y l2
HxIn : In x l1
Heq2 : all_equiv l2
Heq1 : all_equiv l1
x,y : Prop
l1,l2 : list Prop
*****
In y l2
+++++
assumption.
-----
Lemma all_equiv2_impl__stronger : forall l1 l2 x y, all_equiv l1 -> all_equiv l2 -> In x l1 -> In y l2 -> (x -> y) -> stronger l1 l2.
Proof.
intros l1 l2 x y Heq1 Heq2 HxIn HyIn Hxy x1 y1 Hx1In Hy1In.
rewrite (Heq1 x1 x).

*****
Hy1In : In y1 l2
Hx1In : In x1 l1
x1,y1 : Prop
Hxy : forall _ : x, y
HyIn : In y l2
HxIn : In x l1
Heq2 : all_equiv l2
Heq1 : all_equiv l1
x,y : Prop
l1,l2 : list Prop
*****
In x1 l1
+++++
idtac.
-----
Lemma all_equiv2_impl__stronger : forall l1 l2 x y, all_equiv l1 -> all_equiv l2 -> In x l1 -> In y l2 -> (x -> y) -> stronger l1 l2.
Proof.
intros l1 l2 x y Heq1 Heq2 HxIn HyIn Hxy x1 y1 Hx1In Hy1In.
rewrite (Heq1 x1 x).
idtac.

*****
Hy1In : In y1 l2
Hx1In : In x1 l1
x1,y1 : Prop
Hxy : forall _ : x, y
HyIn : In y l2
HxIn : In x l1
Heq2 : all_equiv l2
Heq1 : all_equiv l1
x,y : Prop
l1,l2 : list Prop
*****
In x1 l1
+++++
assumption.
-----
Lemma all_equiv2_impl__stronger : forall l1 l2 x y, all_equiv l1 -> all_equiv l2 -> In x l1 -> In y l2 -> (x -> y) -> stronger l1 l2.
Proof.
intros l1 l2 x y Heq1 Heq2 HxIn HyIn Hxy x1 y1 Hx1In Hy1In.
rewrite (Heq1 x1 x).

*****
Hy1In : In y1 l2
Hx1In : In x1 l1
x1,y1 : Prop
Hxy : forall _ : x, y
HyIn : In y l2
HxIn : In x l1
Heq2 : all_equiv l2
Heq1 : all_equiv l1
x,y : Prop
l1,l2 : list Prop
*****
In x l1
+++++
idtac.
-----
Lemma all_equiv2_impl__stronger : forall l1 l2 x y, all_equiv l1 -> all_equiv l2 -> In x l1 -> In y l2 -> (x -> y) -> stronger l1 l2.
Proof.
intros l1 l2 x y Heq1 Heq2 HxIn HyIn Hxy x1 y1 Hx1In Hy1In.
rewrite (Heq1 x1 x).
idtac.

*****
Hy1In : In y1 l2
Hx1In : In x1 l1
x1,y1 : Prop
Hxy : forall _ : x, y
HyIn : In y l2
HxIn : In x l1
Heq2 : all_equiv l2
Heq1 : all_equiv l1
x,y : Prop
l1,l2 : list Prop
*****
In x l1
+++++
assumption.
-----
Lemma all_equiv2_impl__stronger : forall l1 l2 x y, all_equiv l1 -> all_equiv l2 -> In x l1 -> In y l2 -> (x -> y) -> stronger l1 l2.
Proof.
intros l1 l2 x y Heq1 Heq2 HxIn HyIn Hxy x1 y1 Hx1In Hy1In.
rewrite (Heq1 x1 x).

*****

*****

+++++
Qed.
-----
Lemma stronger2__stronger_right : forall l1 l2 l2',\n  stronger l1 l2 -> stronger l1 l2' -> stronger l1 (l2++l2').
-----
Lemma stronger2__stronger_right : forall l1 l2 l2', stronger l1 l2 -> stronger l1 l2' -> stronger l1 (l2++l2').

*****

*****
forall (l1 l2 l2' : list Prop) (_ : stronger l1 l2) (_ : stronger l1 l2'), stronger l1 (app l2 l2')
+++++
Proof.
-----
Lemma stronger2__stronger_right : forall l1 l2 l2', stronger l1 l2 -> stronger l1 l2' -> stronger l1 (l2++l2').
Proof.

*****

*****
forall (l1 l2 l2' : list Prop) (_ : stronger l1 l2) (_ : stronger l1 l2'), stronger l1 (app l2 l2')
+++++
intros l1 l2 l2' Hs Hs' x y Hx Hy.
-----
Lemma stronger2__stronger_right : forall l1 l2 l2', stronger l1 l2 -> stronger l1 l2' -> stronger l1 (l2++l2').
Proof.
intros l1 l2 l2' Hs Hs' x y Hx Hy.

*****
Hy : In y (app l2 l2')
Hx : In x l1
x,y : Prop
Hs' : stronger l1 l2'
Hs : stronger l1 l2
l1,l2,l2' : list Prop
*****
forall _ : x, y
+++++
apply in_app_or in Hy.
-----
Lemma stronger2__stronger_right : forall l1 l2 l2', stronger l1 l2 -> stronger l1 l2' -> stronger l1 (l2++l2').
Proof.
intros l1 l2 l2' Hs Hs' x y Hx Hy.
apply in_app_or in Hy.

*****
Hy : or (In y l2) (In y l2')
Hx : In x l1
x,y : Prop
Hs' : stronger l1 l2'
Hs : stronger l1 l2
l1,l2,l2' : list Prop
*****
forall _ : x, y
+++++
destruct Hy.
-----
Lemma stronger2__stronger_right : forall l1 l2 l2', stronger l1 l2 -> stronger l1 l2' -> stronger l1 (l2++l2').
Proof.
intros l1 l2 l2' Hs Hs' x y Hx Hy.
apply in_app_or in Hy.
destruct Hy.

*****
H : In y l2
Hx : In x l1
x,y : Prop
Hs' : stronger l1 l2'
Hs : stronger l1 l2
l1,l2,l2' : list Prop
*****
forall _ : x, y
+++++
apply Hs.
-----
Lemma stronger2__stronger_right : forall l1 l2 l2', stronger l1 l2 -> stronger l1 l2' -> stronger l1 (l2++l2').
Proof.
intros l1 l2 l2' Hs Hs' x y Hx Hy.
apply in_app_or in Hy.
destruct Hy.
apply Hs.

*****
H : In y l2
Hx : In x l1
x,y : Prop
Hs' : stronger l1 l2'
Hs : stronger l1 l2
l1,l2,l2' : list Prop
*****
In x l1
+++++
assumption.
-----
Lemma stronger2__stronger_right : forall l1 l2 l2', stronger l1 l2 -> stronger l1 l2' -> stronger l1 (l2++l2').
Proof.
intros l1 l2 l2' Hs Hs' x y Hx Hy.
apply in_app_or in Hy.
destruct Hy.
apply Hs.

*****
H : In y l2
Hx : In x l1
x,y : Prop
Hs' : stronger l1 l2'
Hs : stronger l1 l2
l1,l2,l2' : list Prop
*****
In y l2
+++++
assumption.
-----
Lemma stronger2__stronger_right : forall l1 l2 l2', stronger l1 l2 -> stronger l1 l2' -> stronger l1 (l2++l2').
Proof.
intros l1 l2 l2' Hs Hs' x y Hx Hy.
apply in_app_or in Hy.
destruct Hy.

*****
H : In y l2'
Hx : In x l1
x,y : Prop
Hs' : stronger l1 l2'
Hs : stronger l1 l2
l1,l2,l2' : list Prop
*****
forall _ : x, y
+++++
apply Hs'.
-----
Lemma stronger2__stronger_right : forall l1 l2 l2', stronger l1 l2 -> stronger l1 l2' -> stronger l1 (l2++l2').
Proof.
intros l1 l2 l2' Hs Hs' x y Hx Hy.
apply in_app_or in Hy.
destruct Hy.
apply Hs'.

*****
H : In y l2'
Hx : In x l1
x,y : Prop
Hs' : stronger l1 l2'
Hs : stronger l1 l2
l1,l2,l2' : list Prop
*****
In x l1
+++++
assumption.
-----
Lemma stronger2__stronger_right : forall l1 l2 l2', stronger l1 l2 -> stronger l1 l2' -> stronger l1 (l2++l2').
Proof.
intros l1 l2 l2' Hs Hs' x y Hx Hy.
apply in_app_or in Hy.
destruct Hy.
apply Hs'.

*****
H : In y l2'
Hx : In x l1
x,y : Prop
Hs' : stronger l1 l2'
Hs : stronger l1 l2
l1,l2,l2' : list Prop
*****
In y l2'
+++++
assumption.
-----
Lemma stronger2__stronger_right : forall l1 l2 l2', stronger l1 l2 -> stronger l1 l2' -> stronger l1 (l2++l2').
Proof.
intros l1 l2 l2' Hs Hs' x y Hx Hy.
apply in_app_or in Hy.
destruct Hy.

*****

*****

+++++
Qed.
-----
Lemma stronger2__stronger_left : forall l1 l1' l2,\n  stronger l1 l2 -> stronger l1' l2 -> stronger (l1++l1') l2.
-----
Lemma stronger2__stronger_left : forall l1 l1' l2, stronger l1 l2 -> stronger l1' l2 -> stronger (l1++l1') l2.

*****

*****
forall (l1 l1' l2 : list Prop) (_ : stronger l1 l2) (_ : stronger l1' l2), stronger (app l1 l1') l2
+++++
Proof.
-----
Lemma stronger2__stronger_left : forall l1 l1' l2, stronger l1 l2 -> stronger l1' l2 -> stronger (l1++l1') l2.
Proof.

*****

*****
forall (l1 l1' l2 : list Prop) (_ : stronger l1 l2) (_ : stronger l1' l2), stronger (app l1 l1') l2
+++++
intros l1 l1' l2 Hs Hs' x y Hx Hy.
-----
Lemma stronger2__stronger_left : forall l1 l1' l2, stronger l1 l2 -> stronger l1' l2 -> stronger (l1++l1') l2.
Proof.
intros l1 l1' l2 Hs Hs' x y Hx Hy.

*****
Hy : In y l2
Hx : In x (app l1 l1')
x,y : Prop
Hs' : stronger l1' l2
Hs : stronger l1 l2
l1,l1',l2 : list Prop
*****
forall _ : x, y
+++++
apply in_app_or in Hx.
-----
Lemma stronger2__stronger_left : forall l1 l1' l2, stronger l1 l2 -> stronger l1' l2 -> stronger (l1++l1') l2.
Proof.
intros l1 l1' l2 Hs Hs' x y Hx Hy.
apply in_app_or in Hx.

*****
Hy : In y l2
Hx : or (In x l1) (In x l1')
x,y : Prop
Hs' : stronger l1' l2
Hs : stronger l1 l2
l1,l1',l2 : list Prop
*****
forall _ : x, y
+++++
destruct Hx.
-----
Lemma stronger2__stronger_left : forall l1 l1' l2, stronger l1 l2 -> stronger l1' l2 -> stronger (l1++l1') l2.
Proof.
intros l1 l1' l2 Hs Hs' x y Hx Hy.
apply in_app_or in Hx.
destruct Hx.

*****
Hy : In y l2
H : In x l1
x,y : Prop
Hs' : stronger l1' l2
Hs : stronger l1 l2
l1,l1',l2 : list Prop
*****
forall _ : x, y
+++++
apply Hs.
-----
Lemma stronger2__stronger_left : forall l1 l1' l2, stronger l1 l2 -> stronger l1' l2 -> stronger (l1++l1') l2.
Proof.
intros l1 l1' l2 Hs Hs' x y Hx Hy.
apply in_app_or in Hx.
destruct Hx.
apply Hs.

*****
Hy : In y l2
H : In x l1
x,y : Prop
Hs' : stronger l1' l2
Hs : stronger l1 l2
l1,l1',l2 : list Prop
*****
In x l1
+++++
assumption.
-----
Lemma stronger2__stronger_left : forall l1 l1' l2, stronger l1 l2 -> stronger l1' l2 -> stronger (l1++l1') l2.
Proof.
intros l1 l1' l2 Hs Hs' x y Hx Hy.
apply in_app_or in Hx.
destruct Hx.
apply Hs.

*****
Hy : In y l2
H : In x l1
x,y : Prop
Hs' : stronger l1' l2
Hs : stronger l1 l2
l1,l1',l2 : list Prop
*****
In y l2
+++++
assumption.
-----
Lemma stronger2__stronger_left : forall l1 l1' l2, stronger l1 l2 -> stronger l1' l2 -> stronger (l1++l1') l2.
Proof.
intros l1 l1' l2 Hs Hs' x y Hx Hy.
apply in_app_or in Hx.
destruct Hx.

*****
Hy : In y l2
H : In x l1'
x,y : Prop
Hs' : stronger l1' l2
Hs : stronger l1 l2
l1,l1',l2 : list Prop
*****
forall _ : x, y
+++++
apply Hs'.
-----
Lemma stronger2__stronger_left : forall l1 l1' l2, stronger l1 l2 -> stronger l1' l2 -> stronger (l1++l1') l2.
Proof.
intros l1 l1' l2 Hs Hs' x y Hx Hy.
apply in_app_or in Hx.
destruct Hx.
apply Hs'.

*****
Hy : In y l2
H : In x l1'
x,y : Prop
Hs' : stronger l1' l2
Hs : stronger l1 l2
l1,l1',l2 : list Prop
*****
In x l1'
+++++
assumption.
-----
Lemma stronger2__stronger_left : forall l1 l1' l2, stronger l1 l2 -> stronger l1' l2 -> stronger (l1++l1') l2.
Proof.
intros l1 l1' l2 Hs Hs' x y Hx Hy.
apply in_app_or in Hx.
destruct Hx.
apply Hs'.

*****
Hy : In y l2
H : In x l1'
x,y : Prop
Hs' : stronger l1' l2
Hs : stronger l1 l2
l1,l1',l2 : list Prop
*****
In y l2
+++++
assumption.
-----
Lemma stronger2__stronger_left : forall l1 l1' l2, stronger l1 l2 -> stronger l1' l2 -> stronger (l1++l1') l2.
Proof.
intros l1 l1' l2 Hs Hs' x y Hx Hy.
apply in_app_or in Hx.
destruct Hx.

*****

*****

+++++
Qed.
-----
Lemma stronger_transitivity : forall l1 l2 l3,\n  stronger l1 l2 -> stronger l2 l3 -> l2 <> nil -> stronger l1 l3.
-----
Lemma stronger_transitivity : forall l1 l2 l3, stronger l1 l2 -> stronger l2 l3 -> l2 <> nil -> stronger l1 l3.

*****

*****
forall (l1 l2 l3 : list Prop) (_ : stronger l1 l2) (_ : stronger l2 l3) (_ : not (eq l2 nil)), stronger l1 l3
+++++
Proof.
-----
Lemma stronger_transitivity : forall l1 l2 l3, stronger l1 l2 -> stronger l2 l3 -> l2 <> nil -> stronger l1 l3.
Proof.

*****

*****
forall (l1 l2 l3 : list Prop) (_ : stronger l1 l2) (_ : stronger l2 l3) (_ : not (eq l2 nil)), stronger l1 l3
+++++
intros l1 l2 l3 Hs1 Hs2 Hl2 x z Hx Hz.
-----
Lemma stronger_transitivity : forall l1 l2 l3, stronger l1 l2 -> stronger l2 l3 -> l2 <> nil -> stronger l1 l3.
Proof.
intros l1 l2 l3 Hs1 Hs2 Hl2 x z Hx Hz.

*****
Hz : In z l3
Hx : In x l1
x,z : Prop
Hl2 : not (eq l2 nil)
Hs2 : stronger l2 l3
Hs1 : stronger l1 l2
l1,l2,l3 : list Prop
*****
forall _ : x, z
+++++
destruct l2.
-----
Lemma stronger_transitivity : forall l1 l2 l3, stronger l1 l2 -> stronger l2 l3 -> l2 <> nil -> stronger l1 l3.
Proof.
intros l1 l2 l3 Hs1 Hs2 Hl2 x z Hx Hz.
destruct l2.

*****
Hz : In z l3
Hx : In x l1
x,z : Prop
Hl2 : not (eq nil nil)
Hs2 : stronger nil l3
Hs1 : stronger l1 nil
l1,l3 : list Prop
*****
forall _ : x, z
+++++
intuition.
-----
Lemma stronger_transitivity : forall l1 l2 l3, stronger l1 l2 -> stronger l2 l3 -> l2 <> nil -> stronger l1 l3.
Proof.
intros l1 l2 l3 Hs1 Hs2 Hl2 x z Hx Hz.
destruct l2.

*****
Hz : In z l3
Hx : In x l1
x,z : Prop
Hl2 : not (eq (cons P l2) nil)
Hs2 : stronger (cons P l2) l3
Hs1 : stronger l1 (cons P l2)
l2,l3 : list Prop
P : Prop
l1 : list Prop
*****
forall _ : x, z
+++++
unfold stronger in *.
-----
Lemma stronger_transitivity : forall l1 l2 l3, stronger l1 l2 -> stronger l2 l3 -> l2 <> nil -> stronger l1 l3.
Proof.
intros l1 l2 l3 Hs1 Hs2 Hl2 x z Hx Hz.
destruct l2.
unfold stronger in *.

*****
Hz : In z l3
Hx : In x l1
x,z : Prop
Hl2 : not (eq (cons P l2) nil)
Hs2 : forall (x y : Prop) (_ : In x (cons P l2)) (_ : In y l3) (_ : x), y
Hs1 : forall (x y : Prop) (_ : In x l1) (_ : In y (cons P l2)) (_ : x), y
l2,l3 : list Prop
P : Prop
l1 : list Prop
*****
forall _ : x, z
+++++
specialize Hs1 with x P.
-----
Lemma stronger_transitivity : forall l1 l2 l3, stronger l1 l2 -> stronger l2 l3 -> l2 <> nil -> stronger l1 l3.
Proof.
intros l1 l2 l3 Hs1 Hs2 Hl2 x z Hx Hz.
destruct l2.
unfold stronger in *.
specialize Hs1 with x P.

*****
Hz : In z l3
Hx : In x l1
z : Prop
Hl2 : not (eq (cons P l2) nil)
Hs2 : forall (x y : Prop) (_ : In x (cons P l2)) (_ : In y l3) (_ : x), y
Hs1 : forall (_ : In x l1) (_ : In P (cons P l2)) (_ : x), P
x : Prop
l2,l3 : list Prop
P : Prop
l1 : list Prop
*****
forall _ : x, z
+++++
specialize Hs2 with P z.
-----
Lemma stronger_transitivity : forall l1 l2 l3, stronger l1 l2 -> stronger l2 l3 -> l2 <> nil -> stronger l1 l3.
Proof.
intros l1 l2 l3 Hs1 Hs2 Hl2 x z Hx Hz.
destruct l2.
unfold stronger in *.
specialize Hs1 with x P.
specialize Hs2 with P z.

*****
Hz : In z l3
Hx : In x l1
Hl2 : not (eq (cons P l2) nil)
Hs2 : forall (_ : In P (cons P l2)) (_ : In z l3) (_ : P), z
z : Prop
Hs1 : forall (_ : In x l1) (_ : In P (cons P l2)) (_ : x), P
x : Prop
l2,l3 : list Prop
P : Prop
l1 : list Prop
*****
forall _ : x, z
+++++
simpl in *.
-----
Lemma stronger_transitivity : forall l1 l2 l3, stronger l1 l2 -> stronger l2 l3 -> l2 <> nil -> stronger l1 l3.
Proof.
intros l1 l2 l3 Hs1 Hs2 Hl2 x z Hx Hz.
destruct l2.
unfold stronger in *.
specialize Hs1 with x P.
specialize Hs2 with P z.
simpl in *.

*****
Hz : In z l3
Hx : In x l1
Hl2 : not (eq (cons P l2) nil)
Hs2 : forall (_ : or (eq P P) (In P l2)) (_ : In z l3) (_ : P), z
z : Prop
Hs1 : forall (_ : In x l1) (_ : or (eq P P) (In P l2)) (_ : x), P
x : Prop
l2,l3 : list Prop
P : Prop
l1 : list Prop
*****
forall _ : x, z
+++++
auto.
-----
Lemma stronger_transitivity : forall l1 l2 l3, stronger l1 l2 -> stronger l2 l3 -> l2 <> nil -> stronger l1 l3.
Proof.
intros l1 l2 l3 Hs1 Hs2 Hl2 x z Hx Hz.
destruct l2.

*****

*****

+++++
Qed.
-----
Lemma all_equiv2_stronger2__all_equiv : forall l1 l2,\n  all_equiv l1 -> all_equiv l2 ->\n  stronger l1 l2 -> stronger l2 l1 ->\n  all_equiv (l1++l2).
-----
Lemma all_equiv2_stronger2__all_equiv : forall l1 l2, all_equiv l1 -> all_equiv l2 -> stronger l1 l2 -> stronger l2 l1 -> all_equiv (l1++l2).

*****

*****
forall (l1 l2 : list Prop) (_ : all_equiv l1) (_ : all_equiv l2) (_ : stronger l1 l2) (_ : stronger l2 l1), all_equiv (app l1 l2)
+++++
Proof.
-----
Lemma all_equiv2_stronger2__all_equiv : forall l1 l2, all_equiv l1 -> all_equiv l2 -> stronger l1 l2 -> stronger l2 l1 -> all_equiv (l1++l2).
Proof.

*****

*****
forall (l1 l2 : list Prop) (_ : all_equiv l1) (_ : all_equiv l2) (_ : stronger l1 l2) (_ : stronger l2 l1), all_equiv (app l1 l2)
+++++
intros l1 l2 He1 He2 Hs1 Hs2 x y Hx Hy.
-----
Lemma all_equiv2_stronger2__all_equiv : forall l1 l2, all_equiv l1 -> all_equiv l2 -> stronger l1 l2 -> stronger l2 l1 -> all_equiv (l1++l2).
Proof.
intros l1 l2 He1 He2 Hs1 Hs2 x y Hx Hy.

*****
Hy : In y (app l1 l2)
Hx : In x (app l1 l2)
x,y : Prop
Hs2 : stronger l2 l1
Hs1 : stronger l1 l2
He2 : all_equiv l2
He1 : all_equiv l1
l1,l2 : list Prop
*****
iff x y
+++++
apply in_app_or in Hx.
-----
Lemma all_equiv2_stronger2__all_equiv : forall l1 l2, all_equiv l1 -> all_equiv l2 -> stronger l1 l2 -> stronger l2 l1 -> all_equiv (l1++l2).
Proof.
intros l1 l2 He1 He2 Hs1 Hs2 x y Hx Hy.
apply in_app_or in Hx.

*****
Hy : In y (app l1 l2)
Hx : or (In x l1) (In x l2)
x,y : Prop
Hs2 : stronger l2 l1
Hs1 : stronger l1 l2
He2 : all_equiv l2
He1 : all_equiv l1
l1,l2 : list Prop
*****
iff x y
+++++
apply in_app_or in Hy.
-----
Lemma all_equiv2_stronger2__all_equiv : forall l1 l2, all_equiv l1 -> all_equiv l2 -> stronger l1 l2 -> stronger l2 l1 -> all_equiv (l1++l2).
Proof.
intros l1 l2 He1 He2 Hs1 Hs2 x y Hx Hy.
apply in_app_or in Hx.
apply in_app_or in Hy.

*****
Hy : or (In y l1) (In y l2)
Hx : or (In x l1) (In x l2)
x,y : Prop
Hs2 : stronger l2 l1
Hs1 : stronger l1 l2
He2 : all_equiv l2
He1 : all_equiv l1
l1,l2 : list Prop
*****
iff x y
+++++
destruct Hx.
-----
Lemma all_equiv2_stronger2__all_equiv : forall l1 l2, all_equiv l1 -> all_equiv l2 -> stronger l1 l2 -> stronger l2 l1 -> all_equiv (l1++l2).
Proof.
intros l1 l2 He1 He2 Hs1 Hs2 x y Hx Hy.
apply in_app_or in Hx.
apply in_app_or in Hy.
destruct Hx.

*****
Hy : or (In y l1) (In y l2)
H : In x l1
x,y : Prop
Hs2 : stronger l2 l1
Hs1 : stronger l1 l2
He2 : all_equiv l2
He1 : all_equiv l1
l1,l2 : list Prop
*****
iff x y
+++++
destruct Hy.
-----
Lemma all_equiv2_stronger2__all_equiv : forall l1 l2, all_equiv l1 -> all_equiv l2 -> stronger l1 l2 -> stronger l2 l1 -> all_equiv (l1++l2).
Proof.
intros l1 l2 He1 He2 Hs1 Hs2 x y Hx Hy.
apply in_app_or in Hx.
apply in_app_or in Hy.
destruct Hx.
destruct Hy.

*****
H0 : In y l1
H : In x l1
x,y : Prop
Hs2 : stronger l2 l1
Hs1 : stronger l1 l2
He2 : all_equiv l2
He1 : all_equiv l1
l1,l2 : list Prop
*****
iff x y
+++++
auto.
-----
Lemma all_equiv2_stronger2__all_equiv : forall l1 l2, all_equiv l1 -> all_equiv l2 -> stronger l1 l2 -> stronger l2 l1 -> all_equiv (l1++l2).
Proof.
intros l1 l2 He1 He2 Hs1 Hs2 x y Hx Hy.
apply in_app_or in Hx.
apply in_app_or in Hy.
destruct Hx.
destruct Hy.

*****
H0 : In y l2
H : In x l1
x,y : Prop
Hs2 : stronger l2 l1
Hs1 : stronger l1 l2
He2 : all_equiv l2
He1 : all_equiv l1
l1,l2 : list Prop
*****
iff x y
+++++
auto.
-----
Lemma all_equiv2_stronger2__all_equiv : forall l1 l2, all_equiv l1 -> all_equiv l2 -> stronger l1 l2 -> stronger l2 l1 -> all_equiv (l1++l2).
Proof.
intros l1 l2 He1 He2 Hs1 Hs2 x y Hx Hy.
apply in_app_or in Hx.
apply in_app_or in Hy.
destruct Hx.
destruct Hy.
auto.

*****
H0 : In y l2
H : In x l1
x,y : Prop
Hs2 : stronger l2 l1
Hs1 : stronger l1 l2
He2 : all_equiv l2
He1 : all_equiv l1
l1,l2 : list Prop
*****
iff x y
+++++
split.
-----
Lemma all_equiv2_stronger2__all_equiv : forall l1 l2, all_equiv l1 -> all_equiv l2 -> stronger l1 l2 -> stronger l2 l1 -> all_equiv (l1++l2).
Proof.
intros l1 l2 He1 He2 Hs1 Hs2 x y Hx Hy.
apply in_app_or in Hx.
apply in_app_or in Hy.
destruct Hx.
destruct Hy.
auto.
split.

*****
H0 : In y l2
H : In x l1
x,y : Prop
Hs2 : stronger l2 l1
Hs1 : stronger l1 l2
He2 : all_equiv l2
He1 : all_equiv l1
l1,l2 : list Prop
*****
forall _ : x, y
+++++
apply Hs1.
-----
Lemma all_equiv2_stronger2__all_equiv : forall l1 l2, all_equiv l1 -> all_equiv l2 -> stronger l1 l2 -> stronger l2 l1 -> all_equiv (l1++l2).
Proof.
intros l1 l2 He1 He2 Hs1 Hs2 x y Hx Hy.
apply in_app_or in Hx.
apply in_app_or in Hy.
destruct Hx.
destruct Hy.
auto.
split.
apply Hs1.

*****
H0 : In y l2
H : In x l1
x,y : Prop
Hs2 : stronger l2 l1
Hs1 : stronger l1 l2
He2 : all_equiv l2
He1 : all_equiv l1
l1,l2 : list Prop
*****
In x l1
+++++
assumption.
-----
Lemma all_equiv2_stronger2__all_equiv : forall l1 l2, all_equiv l1 -> all_equiv l2 -> stronger l1 l2 -> stronger l2 l1 -> all_equiv (l1++l2).
Proof.
intros l1 l2 He1 He2 Hs1 Hs2 x y Hx Hy.
apply in_app_or in Hx.
apply in_app_or in Hy.
destruct Hx.
destruct Hy.
auto.
split.
apply Hs1.

*****
H0 : In y l2
H : In x l1
x,y : Prop
Hs2 : stronger l2 l1
Hs1 : stronger l1 l2
He2 : all_equiv l2
He1 : all_equiv l1
l1,l2 : list Prop
*****
In y l2
+++++
assumption.
-----
Lemma all_equiv2_stronger2__all_equiv : forall l1 l2, all_equiv l1 -> all_equiv l2 -> stronger l1 l2 -> stronger l2 l1 -> all_equiv (l1++l2).
Proof.
intros l1 l2 He1 He2 Hs1 Hs2 x y Hx Hy.
apply in_app_or in Hx.
apply in_app_or in Hy.
destruct Hx.
destruct Hy.
auto.
split.

*****
H0 : In y l2
H : In x l1
x,y : Prop
Hs2 : stronger l2 l1
Hs1 : stronger l1 l2
He2 : all_equiv l2
He1 : all_equiv l1
l1,l2 : list Prop
*****
forall _ : y, x
+++++
apply Hs2.
-----
Lemma all_equiv2_stronger2__all_equiv : forall l1 l2, all_equiv l1 -> all_equiv l2 -> stronger l1 l2 -> stronger l2 l1 -> all_equiv (l1++l2).
Proof.
intros l1 l2 He1 He2 Hs1 Hs2 x y Hx Hy.
apply in_app_or in Hx.
apply in_app_or in Hy.
destruct Hx.
destruct Hy.
auto.
split.
apply Hs2.

*****
H0 : In y l2
H : In x l1
x,y : Prop
Hs2 : stronger l2 l1
Hs1 : stronger l1 l2
He2 : all_equiv l2
He1 : all_equiv l1
l1,l2 : list Prop
*****
In y l2
+++++
assumption.
-----
Lemma all_equiv2_stronger2__all_equiv : forall l1 l2, all_equiv l1 -> all_equiv l2 -> stronger l1 l2 -> stronger l2 l1 -> all_equiv (l1++l2).
Proof.
intros l1 l2 He1 He2 Hs1 Hs2 x y Hx Hy.
apply in_app_or in Hx.
apply in_app_or in Hy.
destruct Hx.
destruct Hy.
auto.
split.
apply Hs2.

*****
H0 : In y l2
H : In x l1
x,y : Prop
Hs2 : stronger l2 l1
Hs1 : stronger l1 l2
He2 : all_equiv l2
He1 : all_equiv l1
l1,l2 : list Prop
*****
In x l1
+++++
assumption.
-----
Lemma all_equiv2_stronger2__all_equiv : forall l1 l2, all_equiv l1 -> all_equiv l2 -> stronger l1 l2 -> stronger l2 l1 -> all_equiv (l1++l2).
Proof.
intros l1 l2 He1 He2 Hs1 Hs2 x y Hx Hy.
apply in_app_or in Hx.
apply in_app_or in Hy.
destruct Hx.

*****
Hy : or (In y l1) (In y l2)
H : In x l2
x,y : Prop
Hs2 : stronger l2 l1
Hs1 : stronger l1 l2
He2 : all_equiv l2
He1 : all_equiv l1
l1,l2 : list Prop
*****
iff x y
+++++
destruct Hy.
-----
Lemma all_equiv2_stronger2__all_equiv : forall l1 l2, all_equiv l1 -> all_equiv l2 -> stronger l1 l2 -> stronger l2 l1 -> all_equiv (l1++l2).
Proof.
intros l1 l2 He1 He2 Hs1 Hs2 x y Hx Hy.
apply in_app_or in Hx.
apply in_app_or in Hy.
destruct Hx.
destruct Hy.

*****
H0 : In y l1
H : In x l2
x,y : Prop
Hs2 : stronger l2 l1
Hs1 : stronger l1 l2
He2 : all_equiv l2
He1 : all_equiv l1
l1,l2 : list Prop
*****
iff x y
+++++
auto.
-----
Lemma all_equiv2_stronger2__all_equiv : forall l1 l2, all_equiv l1 -> all_equiv l2 -> stronger l1 l2 -> stronger l2 l1 -> all_equiv (l1++l2).
Proof.
intros l1 l2 He1 He2 Hs1 Hs2 x y Hx Hy.
apply in_app_or in Hx.
apply in_app_or in Hy.
destruct Hx.
destruct Hy.
auto.

*****
H0 : In y l1
H : In x l2
x,y : Prop
Hs2 : stronger l2 l1
Hs1 : stronger l1 l2
He2 : all_equiv l2
He1 : all_equiv l1
l1,l2 : list Prop
*****
iff x y
+++++
split.
-----
Lemma all_equiv2_stronger2__all_equiv : forall l1 l2, all_equiv l1 -> all_equiv l2 -> stronger l1 l2 -> stronger l2 l1 -> all_equiv (l1++l2).
Proof.
intros l1 l2 He1 He2 Hs1 Hs2 x y Hx Hy.
apply in_app_or in Hx.
apply in_app_or in Hy.
destruct Hx.
destruct Hy.
auto.
split.

*****
H0 : In y l1
H : In x l2
x,y : Prop
Hs2 : stronger l2 l1
Hs1 : stronger l1 l2
He2 : all_equiv l2
He1 : all_equiv l1
l1,l2 : list Prop
*****
forall _ : x, y
+++++
apply Hs2.
-----
Lemma all_equiv2_stronger2__all_equiv : forall l1 l2, all_equiv l1 -> all_equiv l2 -> stronger l1 l2 -> stronger l2 l1 -> all_equiv (l1++l2).
Proof.
intros l1 l2 He1 He2 Hs1 Hs2 x y Hx Hy.
apply in_app_or in Hx.
apply in_app_or in Hy.
destruct Hx.
destruct Hy.
auto.
split.
apply Hs2.

*****
H0 : In y l1
H : In x l2
x,y : Prop
Hs2 : stronger l2 l1
Hs1 : stronger l1 l2
He2 : all_equiv l2
He1 : all_equiv l1
l1,l2 : list Prop
*****
In x l2
+++++
assumption.
-----
Lemma all_equiv2_stronger2__all_equiv : forall l1 l2, all_equiv l1 -> all_equiv l2 -> stronger l1 l2 -> stronger l2 l1 -> all_equiv (l1++l2).
Proof.
intros l1 l2 He1 He2 Hs1 Hs2 x y Hx Hy.
apply in_app_or in Hx.
apply in_app_or in Hy.
destruct Hx.
destruct Hy.
auto.
split.
apply Hs2.

*****
H0 : In y l1
H : In x l2
x,y : Prop
Hs2 : stronger l2 l1
Hs1 : stronger l1 l2
He2 : all_equiv l2
He1 : all_equiv l1
l1,l2 : list Prop
*****
In y l1
+++++
assumption.
-----
Lemma all_equiv2_stronger2__all_equiv : forall l1 l2, all_equiv l1 -> all_equiv l2 -> stronger l1 l2 -> stronger l2 l1 -> all_equiv (l1++l2).
Proof.
intros l1 l2 He1 He2 Hs1 Hs2 x y Hx Hy.
apply in_app_or in Hx.
apply in_app_or in Hy.
destruct Hx.
destruct Hy.
auto.
split.

*****
H0 : In y l1
H : In x l2
x,y : Prop
Hs2 : stronger l2 l1
Hs1 : stronger l1 l2
He2 : all_equiv l2
He1 : all_equiv l1
l1,l2 : list Prop
*****
forall _ : y, x
+++++
apply Hs1.
-----
Lemma all_equiv2_stronger2__all_equiv : forall l1 l2, all_equiv l1 -> all_equiv l2 -> stronger l1 l2 -> stronger l2 l1 -> all_equiv (l1++l2).
Proof.
intros l1 l2 He1 He2 Hs1 Hs2 x y Hx Hy.
apply in_app_or in Hx.
apply in_app_or in Hy.
destruct Hx.
destruct Hy.
auto.
split.
apply Hs1.

*****
H0 : In y l1
H : In x l2
x,y : Prop
Hs2 : stronger l2 l1
Hs1 : stronger l1 l2
He2 : all_equiv l2
He1 : all_equiv l1
l1,l2 : list Prop
*****
In y l1
+++++
assumption.
-----
Lemma all_equiv2_stronger2__all_equiv : forall l1 l2, all_equiv l1 -> all_equiv l2 -> stronger l1 l2 -> stronger l2 l1 -> all_equiv (l1++l2).
Proof.
intros l1 l2 He1 He2 Hs1 Hs2 x y Hx Hy.
apply in_app_or in Hx.
apply in_app_or in Hy.
destruct Hx.
destruct Hy.
auto.
split.
apply Hs1.

*****
H0 : In y l1
H : In x l2
x,y : Prop
Hs2 : stronger l2 l1
Hs1 : stronger l1 l2
He2 : all_equiv l2
He1 : all_equiv l1
l1,l2 : list Prop
*****
In x l2
+++++
assumption.
-----
Lemma all_equiv2_stronger2__all_equiv : forall l1 l2, all_equiv l1 -> all_equiv l2 -> stronger l1 l2 -> stronger l2 l1 -> all_equiv (l1++l2).
Proof.
intros l1 l2 He1 He2 Hs1 Hs2 x y Hx Hy.
apply in_app_or in Hx.
apply in_app_or in Hy.
destruct Hx.
destruct Hy.

*****
H0 : In y l2
H : In x l2
x,y : Prop
Hs2 : stronger l2 l1
Hs1 : stronger l1 l2
He2 : all_equiv l2
He1 : all_equiv l1
l1,l2 : list Prop
*****
iff x y
+++++
auto.
-----
Lemma all_equiv2_stronger2__all_equiv : forall l1 l2, all_equiv l1 -> all_equiv l2 -> stronger l1 l2 -> stronger l2 l1 -> all_equiv (l1++l2).
Proof.
intros l1 l2 He1 He2 Hs1 Hs2 x y Hx Hy.
apply in_app_or in Hx.
apply in_app_or in Hy.
destruct Hx.

*****

*****

+++++
Qed.
-----
Lemma all_equiv3_stronger3__all_equiv : forall l1 l2 l3,\n  l1 <> nil -> l2 <> nil -> l3 <> nil ->\n  all_equiv l1 -> all_equiv l2 -> all_equiv l3 ->\n  stronger l1 l2 -> stronger l2 l3 ->  stronger l3 l1 ->\n  all_equiv (l1++l2++l3).
-----
Lemma all_equiv3_stronger3__all_equiv : forall l1 l2 l3, l1 <> nil -> l2 <> nil -> l3 <> nil -> all_equiv l1 -> all_equiv l2 -> all_equiv l3 -> stronger l1 l2 -> stronger l2 l3 -> stronger l3 l1 -> all_equiv (l1++l2++l3).

*****

*****
forall (l1 l2 l3 : list Prop) (_ : not (eq l1 nil)) (_ : not (eq l2 nil)) (_ : not (eq l3 nil)) (_ : all_equiv l1) (_ : all_equiv l2) (_ : all_equiv l3) (_ : stronger l1 l2) (_ : stronger l2 l3) (_ : stronger l3 l1), all_equiv (app l1 (app l2 l3))
+++++
Proof.
-----
Lemma all_equiv3_stronger3__all_equiv : forall l1 l2 l3, l1 <> nil -> l2 <> nil -> l3 <> nil -> all_equiv l1 -> all_equiv l2 -> all_equiv l3 -> stronger l1 l2 -> stronger l2 l3 -> stronger l3 l1 -> all_equiv (l1++l2++l3).
Proof.

*****

*****
forall (l1 l2 l3 : list Prop) (_ : not (eq l1 nil)) (_ : not (eq l2 nil)) (_ : not (eq l3 nil)) (_ : all_equiv l1) (_ : all_equiv l2) (_ : all_equiv l3) (_ : stronger l1 l2) (_ : stronger l2 l3) (_ : stronger l3 l1), all_equiv (app l1 (app l2 l3))
+++++
intros l1 l2 l3 H1 H2 H3 He1 He2 He3 Hs1 Hs2 Hs3.
-----
Lemma all_equiv3_stronger3__all_equiv : forall l1 l2 l3, l1 <> nil -> l2 <> nil -> l3 <> nil -> all_equiv l1 -> all_equiv l2 -> all_equiv l3 -> stronger l1 l2 -> stronger l2 l3 -> stronger l3 l1 -> all_equiv (l1++l2++l3).
Proof.
intros l1 l2 l3 H1 H2 H3 He1 He2 He3 Hs1 Hs2 Hs3.

*****
Hs3 : stronger l3 l1
Hs2 : stronger l2 l3
Hs1 : stronger l1 l2
He3 : all_equiv l3
He2 : all_equiv l2
He1 : all_equiv l1
H3 : not (eq l3 nil)
H2 : not (eq l2 nil)
H1 : not (eq l1 nil)
l1,l2,l3 : list Prop
*****
all_equiv (app l1 (app l2 l3))
+++++
apply all_equiv2_stronger2__all_equiv.
-----
Lemma all_equiv3_stronger3__all_equiv : forall l1 l2 l3, l1 <> nil -> l2 <> nil -> l3 <> nil -> all_equiv l1 -> all_equiv l2 -> all_equiv l3 -> stronger l1 l2 -> stronger l2 l3 -> stronger l3 l1 -> all_equiv (l1++l2++l3).
Proof.
intros l1 l2 l3 H1 H2 H3 He1 He2 He3 Hs1 Hs2 Hs3.
apply all_equiv2_stronger2__all_equiv.

*****
Hs3 : stronger l3 l1
Hs2 : stronger l2 l3
Hs1 : stronger l1 l2
He3 : all_equiv l3
He2 : all_equiv l2
He1 : all_equiv l1
H3 : not (eq l3 nil)
H2 : not (eq l2 nil)
H1 : not (eq l1 nil)
l1,l2,l3 : list Prop
*****
all_equiv l1
+++++
assumption.
-----
Lemma all_equiv3_stronger3__all_equiv : forall l1 l2 l3, l1 <> nil -> l2 <> nil -> l3 <> nil -> all_equiv l1 -> all_equiv l2 -> all_equiv l3 -> stronger l1 l2 -> stronger l2 l3 -> stronger l3 l1 -> all_equiv (l1++l2++l3).
Proof.
intros l1 l2 l3 H1 H2 H3 He1 He2 He3 Hs1 Hs2 Hs3.
apply all_equiv2_stronger2__all_equiv.

*****
Hs3 : stronger l3 l1
Hs2 : stronger l2 l3
Hs1 : stronger l1 l2
He3 : all_equiv l3
He2 : all_equiv l2
He1 : all_equiv l1
H3 : not (eq l3 nil)
H2 : not (eq l2 nil)
H1 : not (eq l1 nil)
l1,l2,l3 : list Prop
*****
all_equiv (app l2 l3)
+++++
apply all_equiv2_stronger2__all_equiv.
-----
Lemma all_equiv3_stronger3__all_equiv : forall l1 l2 l3, l1 <> nil -> l2 <> nil -> l3 <> nil -> all_equiv l1 -> all_equiv l2 -> all_equiv l3 -> stronger l1 l2 -> stronger l2 l3 -> stronger l3 l1 -> all_equiv (l1++l2++l3).
Proof.
intros l1 l2 l3 H1 H2 H3 He1 He2 He3 Hs1 Hs2 Hs3.
apply all_equiv2_stronger2__all_equiv.
apply all_equiv2_stronger2__all_equiv.

*****
Hs3 : stronger l3 l1
Hs2 : stronger l2 l3
Hs1 : stronger l1 l2
He3 : all_equiv l3
He2 : all_equiv l2
He1 : all_equiv l1
H3 : not (eq l3 nil)
H2 : not (eq l2 nil)
H1 : not (eq l1 nil)
l1,l2,l3 : list Prop
*****
all_equiv l2
+++++
idtac.
-----
Lemma all_equiv3_stronger3__all_equiv : forall l1 l2 l3, l1 <> nil -> l2 <> nil -> l3 <> nil -> all_equiv l1 -> all_equiv l2 -> all_equiv l3 -> stronger l1 l2 -> stronger l2 l3 -> stronger l3 l1 -> all_equiv (l1++l2++l3).
Proof.
intros l1 l2 l3 H1 H2 H3 He1 He2 He3 Hs1 Hs2 Hs3.
apply all_equiv2_stronger2__all_equiv.
apply all_equiv2_stronger2__all_equiv.
idtac.

*****
Hs3 : stronger l3 l1
Hs2 : stronger l2 l3
Hs1 : stronger l1 l2
He3 : all_equiv l3
He2 : all_equiv l2
He1 : all_equiv l1
H3 : not (eq l3 nil)
H2 : not (eq l2 nil)
H1 : not (eq l1 nil)
l1,l2,l3 : list Prop
*****
all_equiv l2
+++++
assumption.
-----
Lemma all_equiv3_stronger3__all_equiv : forall l1 l2 l3, l1 <> nil -> l2 <> nil -> l3 <> nil -> all_equiv l1 -> all_equiv l2 -> all_equiv l3 -> stronger l1 l2 -> stronger l2 l3 -> stronger l3 l1 -> all_equiv (l1++l2++l3).
Proof.
intros l1 l2 l3 H1 H2 H3 He1 He2 He3 Hs1 Hs2 Hs3.
apply all_equiv2_stronger2__all_equiv.
apply all_equiv2_stronger2__all_equiv.

*****
Hs3 : stronger l3 l1
Hs2 : stronger l2 l3
Hs1 : stronger l1 l2
He3 : all_equiv l3
He2 : all_equiv l2
He1 : all_equiv l1
H3 : not (eq l3 nil)
H2 : not (eq l2 nil)
H1 : not (eq l1 nil)
l1,l2,l3 : list Prop
*****
all_equiv l3
+++++
idtac.
-----
Lemma all_equiv3_stronger3__all_equiv : forall l1 l2 l3, l1 <> nil -> l2 <> nil -> l3 <> nil -> all_equiv l1 -> all_equiv l2 -> all_equiv l3 -> stronger l1 l2 -> stronger l2 l3 -> stronger l3 l1 -> all_equiv (l1++l2++l3).
Proof.
intros l1 l2 l3 H1 H2 H3 He1 He2 He3 Hs1 Hs2 Hs3.
apply all_equiv2_stronger2__all_equiv.
apply all_equiv2_stronger2__all_equiv.
idtac.

*****
Hs3 : stronger l3 l1
Hs2 : stronger l2 l3
Hs1 : stronger l1 l2
He3 : all_equiv l3
He2 : all_equiv l2
He1 : all_equiv l1
H3 : not (eq l3 nil)
H2 : not (eq l2 nil)
H1 : not (eq l1 nil)
l1,l2,l3 : list Prop
*****
all_equiv l3
+++++
assumption.
-----
Lemma all_equiv3_stronger3__all_equiv : forall l1 l2 l3, l1 <> nil -> l2 <> nil -> l3 <> nil -> all_equiv l1 -> all_equiv l2 -> all_equiv l3 -> stronger l1 l2 -> stronger l2 l3 -> stronger l3 l1 -> all_equiv (l1++l2++l3).
Proof.
intros l1 l2 l3 H1 H2 H3 He1 He2 He3 Hs1 Hs2 Hs3.
apply all_equiv2_stronger2__all_equiv.
apply all_equiv2_stronger2__all_equiv.

*****
Hs3 : stronger l3 l1
Hs2 : stronger l2 l3
Hs1 : stronger l1 l2
He3 : all_equiv l3
He2 : all_equiv l2
He1 : all_equiv l1
H3 : not (eq l3 nil)
H2 : not (eq l2 nil)
H1 : not (eq l1 nil)
l1,l2,l3 : list Prop
*****
stronger l2 l3
+++++
idtac.
-----
Lemma all_equiv3_stronger3__all_equiv : forall l1 l2 l3, l1 <> nil -> l2 <> nil -> l3 <> nil -> all_equiv l1 -> all_equiv l2 -> all_equiv l3 -> stronger l1 l2 -> stronger l2 l3 -> stronger l3 l1 -> all_equiv (l1++l2++l3).
Proof.
intros l1 l2 l3 H1 H2 H3 He1 He2 He3 Hs1 Hs2 Hs3.
apply all_equiv2_stronger2__all_equiv.
apply all_equiv2_stronger2__all_equiv.
idtac.

*****
Hs3 : stronger l3 l1
Hs2 : stronger l2 l3
Hs1 : stronger l1 l2
He3 : all_equiv l3
He2 : all_equiv l2
He1 : all_equiv l1
H3 : not (eq l3 nil)
H2 : not (eq l2 nil)
H1 : not (eq l1 nil)
l1,l2,l3 : list Prop
*****
stronger l2 l3
+++++
assumption.
-----
Lemma all_equiv3_stronger3__all_equiv : forall l1 l2 l3, l1 <> nil -> l2 <> nil -> l3 <> nil -> all_equiv l1 -> all_equiv l2 -> all_equiv l3 -> stronger l1 l2 -> stronger l2 l3 -> stronger l3 l1 -> all_equiv (l1++l2++l3).
Proof.
intros l1 l2 l3 H1 H2 H3 He1 He2 He3 Hs1 Hs2 Hs3.
apply all_equiv2_stronger2__all_equiv.
apply all_equiv2_stronger2__all_equiv.

*****
Hs3 : stronger l3 l1
Hs2 : stronger l2 l3
Hs1 : stronger l1 l2
He3 : all_equiv l3
He2 : all_equiv l2
He1 : all_equiv l1
H3 : not (eq l3 nil)
H2 : not (eq l2 nil)
H1 : not (eq l1 nil)
l1,l2,l3 : list Prop
*****
stronger l3 l2
+++++
apply stronger_transitivity with l1.
-----
Lemma all_equiv3_stronger3__all_equiv : forall l1 l2 l3, l1 <> nil -> l2 <> nil -> l3 <> nil -> all_equiv l1 -> all_equiv l2 -> all_equiv l3 -> stronger l1 l2 -> stronger l2 l3 -> stronger l3 l1 -> all_equiv (l1++l2++l3).
Proof.
intros l1 l2 l3 H1 H2 H3 He1 He2 He3 Hs1 Hs2 Hs3.
apply all_equiv2_stronger2__all_equiv.
apply all_equiv2_stronger2__all_equiv.
apply stronger_transitivity with l1.

*****
Hs3 : stronger l3 l1
Hs2 : stronger l2 l3
Hs1 : stronger l1 l2
He3 : all_equiv l3
He2 : all_equiv l2
He1 : all_equiv l1
H3 : not (eq l3 nil)
H2 : not (eq l2 nil)
H1 : not (eq l1 nil)
l1,l2,l3 : list Prop
*****
stronger l3 l1
+++++
assumption.
-----
Lemma all_equiv3_stronger3__all_equiv : forall l1 l2 l3, l1 <> nil -> l2 <> nil -> l3 <> nil -> all_equiv l1 -> all_equiv l2 -> all_equiv l3 -> stronger l1 l2 -> stronger l2 l3 -> stronger l3 l1 -> all_equiv (l1++l2++l3).
Proof.
intros l1 l2 l3 H1 H2 H3 He1 He2 He3 Hs1 Hs2 Hs3.
apply all_equiv2_stronger2__all_equiv.
apply all_equiv2_stronger2__all_equiv.
apply stronger_transitivity with l1.

*****
Hs3 : stronger l3 l1
Hs2 : stronger l2 l3
Hs1 : stronger l1 l2
He3 : all_equiv l3
He2 : all_equiv l2
He1 : all_equiv l1
H3 : not (eq l3 nil)
H2 : not (eq l2 nil)
H1 : not (eq l1 nil)
l1,l2,l3 : list Prop
*****
stronger l1 l2
+++++
assumption.
-----
Lemma all_equiv3_stronger3__all_equiv : forall l1 l2 l3, l1 <> nil -> l2 <> nil -> l3 <> nil -> all_equiv l1 -> all_equiv l2 -> all_equiv l3 -> stronger l1 l2 -> stronger l2 l3 -> stronger l3 l1 -> all_equiv (l1++l2++l3).
Proof.
intros l1 l2 l3 H1 H2 H3 He1 He2 He3 Hs1 Hs2 Hs3.
apply all_equiv2_stronger2__all_equiv.
apply all_equiv2_stronger2__all_equiv.
apply stronger_transitivity with l1.

*****
Hs3 : stronger l3 l1
Hs2 : stronger l2 l3
Hs1 : stronger l1 l2
He3 : all_equiv l3
He2 : all_equiv l2
He1 : all_equiv l1
H3 : not (eq l3 nil)
H2 : not (eq l2 nil)
H1 : not (eq l1 nil)
l1,l2,l3 : list Prop
*****
not (eq l1 nil)
+++++
assumption.
-----
Lemma all_equiv3_stronger3__all_equiv : forall l1 l2 l3, l1 <> nil -> l2 <> nil -> l3 <> nil -> all_equiv l1 -> all_equiv l2 -> all_equiv l3 -> stronger l1 l2 -> stronger l2 l3 -> stronger l3 l1 -> all_equiv (l1++l2++l3).
Proof.
intros l1 l2 l3 H1 H2 H3 He1 He2 He3 Hs1 Hs2 Hs3.
apply all_equiv2_stronger2__all_equiv.

*****
Hs3 : stronger l3 l1
Hs2 : stronger l2 l3
Hs1 : stronger l1 l2
He3 : all_equiv l3
He2 : all_equiv l2
He1 : all_equiv l1
H3 : not (eq l3 nil)
H2 : not (eq l2 nil)
H1 : not (eq l1 nil)
l1,l2,l3 : list Prop
*****
stronger l1 (app l2 l3)
+++++
apply stronger2__stronger_right.
-----
Lemma all_equiv3_stronger3__all_equiv : forall l1 l2 l3, l1 <> nil -> l2 <> nil -> l3 <> nil -> all_equiv l1 -> all_equiv l2 -> all_equiv l3 -> stronger l1 l2 -> stronger l2 l3 -> stronger l3 l1 -> all_equiv (l1++l2++l3).
Proof.
intros l1 l2 l3 H1 H2 H3 He1 He2 He3 Hs1 Hs2 Hs3.
apply all_equiv2_stronger2__all_equiv.
apply stronger2__stronger_right.

*****
Hs3 : stronger l3 l1
Hs2 : stronger l2 l3
Hs1 : stronger l1 l2
He3 : all_equiv l3
He2 : all_equiv l2
He1 : all_equiv l1
H3 : not (eq l3 nil)
H2 : not (eq l2 nil)
H1 : not (eq l1 nil)
l1,l2,l3 : list Prop
*****
stronger l1 l2
+++++
idtac.
-----
Lemma all_equiv3_stronger3__all_equiv : forall l1 l2 l3, l1 <> nil -> l2 <> nil -> l3 <> nil -> all_equiv l1 -> all_equiv l2 -> all_equiv l3 -> stronger l1 l2 -> stronger l2 l3 -> stronger l3 l1 -> all_equiv (l1++l2++l3).
Proof.
intros l1 l2 l3 H1 H2 H3 He1 He2 He3 Hs1 Hs2 Hs3.
apply all_equiv2_stronger2__all_equiv.
apply stronger2__stronger_right.
idtac.

*****
Hs3 : stronger l3 l1
Hs2 : stronger l2 l3
Hs1 : stronger l1 l2
He3 : all_equiv l3
He2 : all_equiv l2
He1 : all_equiv l1
H3 : not (eq l3 nil)
H2 : not (eq l2 nil)
H1 : not (eq l1 nil)
l1,l2,l3 : list Prop
*****
stronger l1 l2
+++++
assumption.
-----
Lemma all_equiv3_stronger3__all_equiv : forall l1 l2 l3, l1 <> nil -> l2 <> nil -> l3 <> nil -> all_equiv l1 -> all_equiv l2 -> all_equiv l3 -> stronger l1 l2 -> stronger l2 l3 -> stronger l3 l1 -> all_equiv (l1++l2++l3).
Proof.
intros l1 l2 l3 H1 H2 H3 He1 He2 He3 Hs1 Hs2 Hs3.
apply all_equiv2_stronger2__all_equiv.
apply stronger2__stronger_right.

*****
Hs3 : stronger l3 l1
Hs2 : stronger l2 l3
Hs1 : stronger l1 l2
He3 : all_equiv l3
He2 : all_equiv l2
He1 : all_equiv l1
H3 : not (eq l3 nil)
H2 : not (eq l2 nil)
H1 : not (eq l1 nil)
l1,l2,l3 : list Prop
*****
stronger l1 l3
+++++
apply stronger_transitivity with l2.
-----
Lemma all_equiv3_stronger3__all_equiv : forall l1 l2 l3, l1 <> nil -> l2 <> nil -> l3 <> nil -> all_equiv l1 -> all_equiv l2 -> all_equiv l3 -> stronger l1 l2 -> stronger l2 l3 -> stronger l3 l1 -> all_equiv (l1++l2++l3).
Proof.
intros l1 l2 l3 H1 H2 H3 He1 He2 He3 Hs1 Hs2 Hs3.
apply all_equiv2_stronger2__all_equiv.
apply stronger2__stronger_right.
apply stronger_transitivity with l2.

*****
Hs3 : stronger l3 l1
Hs2 : stronger l2 l3
Hs1 : stronger l1 l2
He3 : all_equiv l3
He2 : all_equiv l2
He1 : all_equiv l1
H3 : not (eq l3 nil)
H2 : not (eq l2 nil)
H1 : not (eq l1 nil)
l1,l2,l3 : list Prop
*****
stronger l1 l2
+++++
assumption.
-----
Lemma all_equiv3_stronger3__all_equiv : forall l1 l2 l3, l1 <> nil -> l2 <> nil -> l3 <> nil -> all_equiv l1 -> all_equiv l2 -> all_equiv l3 -> stronger l1 l2 -> stronger l2 l3 -> stronger l3 l1 -> all_equiv (l1++l2++l3).
Proof.
intros l1 l2 l3 H1 H2 H3 He1 He2 He3 Hs1 Hs2 Hs3.
apply all_equiv2_stronger2__all_equiv.
apply stronger2__stronger_right.
apply stronger_transitivity with l2.

*****
Hs3 : stronger l3 l1
Hs2 : stronger l2 l3
Hs1 : stronger l1 l2
He3 : all_equiv l3
He2 : all_equiv l2
He1 : all_equiv l1
H3 : not (eq l3 nil)
H2 : not (eq l2 nil)
H1 : not (eq l1 nil)
l1,l2,l3 : list Prop
*****
stronger l2 l3
+++++
assumption.
-----
Lemma all_equiv3_stronger3__all_equiv : forall l1 l2 l3, l1 <> nil -> l2 <> nil -> l3 <> nil -> all_equiv l1 -> all_equiv l2 -> all_equiv l3 -> stronger l1 l2 -> stronger l2 l3 -> stronger l3 l1 -> all_equiv (l1++l2++l3).
Proof.
intros l1 l2 l3 H1 H2 H3 He1 He2 He3 Hs1 Hs2 Hs3.
apply all_equiv2_stronger2__all_equiv.
apply stronger2__stronger_right.
apply stronger_transitivity with l2.

*****
Hs3 : stronger l3 l1
Hs2 : stronger l2 l3
Hs1 : stronger l1 l2
He3 : all_equiv l3
He2 : all_equiv l2
He1 : all_equiv l1
H3 : not (eq l3 nil)
H2 : not (eq l2 nil)
H1 : not (eq l1 nil)
l1,l2,l3 : list Prop
*****
not (eq l2 nil)
+++++
assumption.
-----
Lemma all_equiv3_stronger3__all_equiv : forall l1 l2 l3, l1 <> nil -> l2 <> nil -> l3 <> nil -> all_equiv l1 -> all_equiv l2 -> all_equiv l3 -> stronger l1 l2 -> stronger l2 l3 -> stronger l3 l1 -> all_equiv (l1++l2++l3).
Proof.
intros l1 l2 l3 H1 H2 H3 He1 He2 He3 Hs1 Hs2 Hs3.
apply all_equiv2_stronger2__all_equiv.

*****
Hs3 : stronger l3 l1
Hs2 : stronger l2 l3
Hs1 : stronger l1 l2
He3 : all_equiv l3
He2 : all_equiv l2
He1 : all_equiv l1
H3 : not (eq l3 nil)
H2 : not (eq l2 nil)
H1 : not (eq l1 nil)
l1,l2,l3 : list Prop
*****
stronger (app l2 l3) l1
+++++
apply stronger2__stronger_left.
-----
Lemma all_equiv3_stronger3__all_equiv : forall l1 l2 l3, l1 <> nil -> l2 <> nil -> l3 <> nil -> all_equiv l1 -> all_equiv l2 -> all_equiv l3 -> stronger l1 l2 -> stronger l2 l3 -> stronger l3 l1 -> all_equiv (l1++l2++l3).
Proof.
intros l1 l2 l3 H1 H2 H3 He1 He2 He3 Hs1 Hs2 Hs3.
apply all_equiv2_stronger2__all_equiv.
apply stronger2__stronger_left.

*****
Hs3 : stronger l3 l1
Hs2 : stronger l2 l3
Hs1 : stronger l1 l2
He3 : all_equiv l3
He2 : all_equiv l2
He1 : all_equiv l1
H3 : not (eq l3 nil)
H2 : not (eq l2 nil)
H1 : not (eq l1 nil)
l1,l2,l3 : list Prop
*****
stronger l2 l1
+++++
apply stronger_transitivity with l3.
-----
Lemma all_equiv3_stronger3__all_equiv : forall l1 l2 l3, l1 <> nil -> l2 <> nil -> l3 <> nil -> all_equiv l1 -> all_equiv l2 -> all_equiv l3 -> stronger l1 l2 -> stronger l2 l3 -> stronger l3 l1 -> all_equiv (l1++l2++l3).
Proof.
intros l1 l2 l3 H1 H2 H3 He1 He2 He3 Hs1 Hs2 Hs3.
apply all_equiv2_stronger2__all_equiv.
apply stronger2__stronger_left.
apply stronger_transitivity with l3.

*****
Hs3 : stronger l3 l1
Hs2 : stronger l2 l3
Hs1 : stronger l1 l2
He3 : all_equiv l3
He2 : all_equiv l2
He1 : all_equiv l1
H3 : not (eq l3 nil)
H2 : not (eq l2 nil)
H1 : not (eq l1 nil)
l1,l2,l3 : list Prop
*****
stronger l2 l3
+++++
assumption.
-----
Lemma all_equiv3_stronger3__all_equiv : forall l1 l2 l3, l1 <> nil -> l2 <> nil -> l3 <> nil -> all_equiv l1 -> all_equiv l2 -> all_equiv l3 -> stronger l1 l2 -> stronger l2 l3 -> stronger l3 l1 -> all_equiv (l1++l2++l3).
Proof.
intros l1 l2 l3 H1 H2 H3 He1 He2 He3 Hs1 Hs2 Hs3.
apply all_equiv2_stronger2__all_equiv.
apply stronger2__stronger_left.
apply stronger_transitivity with l3.

*****
Hs3 : stronger l3 l1
Hs2 : stronger l2 l3
Hs1 : stronger l1 l2
He3 : all_equiv l3
He2 : all_equiv l2
He1 : all_equiv l1
H3 : not (eq l3 nil)
H2 : not (eq l2 nil)
H1 : not (eq l1 nil)
l1,l2,l3 : list Prop
*****
stronger l3 l1
+++++
assumption.
-----
Lemma all_equiv3_stronger3__all_equiv : forall l1 l2 l3, l1 <> nil -> l2 <> nil -> l3 <> nil -> all_equiv l1 -> all_equiv l2 -> all_equiv l3 -> stronger l1 l2 -> stronger l2 l3 -> stronger l3 l1 -> all_equiv (l1++l2++l3).
Proof.
intros l1 l2 l3 H1 H2 H3 He1 He2 He3 Hs1 Hs2 Hs3.
apply all_equiv2_stronger2__all_equiv.
apply stronger2__stronger_left.
apply stronger_transitivity with l3.

*****
Hs3 : stronger l3 l1
Hs2 : stronger l2 l3
Hs1 : stronger l1 l2
He3 : all_equiv l3
He2 : all_equiv l2
He1 : all_equiv l1
H3 : not (eq l3 nil)
H2 : not (eq l2 nil)
H1 : not (eq l1 nil)
l1,l2,l3 : list Prop
*****
not (eq l3 nil)
+++++
assumption.
-----
Lemma all_equiv3_stronger3__all_equiv : forall l1 l2 l3, l1 <> nil -> l2 <> nil -> l3 <> nil -> all_equiv l1 -> all_equiv l2 -> all_equiv l3 -> stronger l1 l2 -> stronger l2 l3 -> stronger l3 l1 -> all_equiv (l1++l2++l3).
Proof.
intros l1 l2 l3 H1 H2 H3 He1 He2 He3 Hs1 Hs2 Hs3.
apply all_equiv2_stronger2__all_equiv.
apply stronger2__stronger_left.

*****
Hs3 : stronger l3 l1
Hs2 : stronger l2 l3
Hs1 : stronger l1 l2
He3 : all_equiv l3
He2 : all_equiv l2
He1 : all_equiv l1
H3 : not (eq l3 nil)
H2 : not (eq l2 nil)
H1 : not (eq l1 nil)
l1,l2,l3 : list Prop
*****
stronger l3 l1
+++++
idtac.
-----
Lemma all_equiv3_stronger3__all_equiv : forall l1 l2 l3, l1 <> nil -> l2 <> nil -> l3 <> nil -> all_equiv l1 -> all_equiv l2 -> all_equiv l3 -> stronger l1 l2 -> stronger l2 l3 -> stronger l3 l1 -> all_equiv (l1++l2++l3).
Proof.
intros l1 l2 l3 H1 H2 H3 He1 He2 He3 Hs1 Hs2 Hs3.
apply all_equiv2_stronger2__all_equiv.
apply stronger2__stronger_left.
idtac.

*****
Hs3 : stronger l3 l1
Hs2 : stronger l2 l3
Hs1 : stronger l1 l2
He3 : all_equiv l3
He2 : all_equiv l2
He1 : all_equiv l1
H3 : not (eq l3 nil)
H2 : not (eq l2 nil)
H1 : not (eq l1 nil)
l1,l2,l3 : list Prop
*****
stronger l3 l1
+++++
assumption.
-----
Lemma all_equiv3_stronger3__all_equiv : forall l1 l2 l3, l1 <> nil -> l2 <> nil -> l3 <> nil -> all_equiv l1 -> all_equiv l2 -> all_equiv l3 -> stronger l1 l2 -> stronger l2 l3 -> stronger l3 l1 -> all_equiv (l1++l2++l3).
Proof.
intros l1 l2 l3 H1 H2 H3 He1 He2 He3 Hs1 Hs2 Hs3.
apply all_equiv2_stronger2__all_equiv.

*****

*****

+++++
Qed.
-----
Lemma all_equiv2_impl2__all_equiv : forall l1 l2 x y x' y',\n  all_equiv l1 -> all_equiv l2 ->\n  In x l1 -> In y l2 -> (x -> y) ->\n  In x' l2 -> In y' l1 -> (x' -> y') ->\n  all_equiv (l1++l2).
-----
Lemma all_equiv2_impl2__all_equiv : forall l1 l2 x y x' y', all_equiv l1 -> all_equiv l2 -> In x l1 -> In y l2 -> (x -> y) -> In x' l2 -> In y' l1 -> (x' -> y') -> all_equiv (l1++l2).

*****

*****
forall (l1 l2 : list Prop) (x y x' y' : Prop) (_ : all_equiv l1) (_ : all_equiv l2) (_ : In x l1) (_ : In y l2) (_ : forall _ : x, y) (_ : In x' l2) (_ : In y' l1) (_ : forall _ : x', y'), all_equiv (app l1 l2)
+++++
Proof.
-----
Lemma all_equiv2_impl2__all_equiv : forall l1 l2 x y x' y', all_equiv l1 -> all_equiv l2 -> In x l1 -> In y l2 -> (x -> y) -> In x' l2 -> In y' l1 -> (x' -> y') -> all_equiv (l1++l2).
Proof.

*****

*****
forall (l1 l2 : list Prop) (x y x' y' : Prop) (_ : all_equiv l1) (_ : all_equiv l2) (_ : In x l1) (_ : In y l2) (_ : forall _ : x, y) (_ : In x' l2) (_ : In y' l1) (_ : forall _ : x', y'), all_equiv (app l1 l2)
+++++
intros l1 l2 x y x' y'.
-----
Lemma all_equiv2_impl2__all_equiv : forall l1 l2 x y x' y', all_equiv l1 -> all_equiv l2 -> In x l1 -> In y l2 -> (x -> y) -> In x' l2 -> In y' l1 -> (x' -> y') -> all_equiv (l1++l2).
Proof.
intros l1 l2 x y x' y'.

*****
x,y,x',y' : Prop
l1,l2 : list Prop
*****
forall (_ : all_equiv l1) (_ : all_equiv l2) (_ : In x l1) (_ : In y l2) (_ : forall _ : x, y) (_ : In x' l2) (_ : In y' l1) (_ : forall _ : x', y'), all_equiv (app l1 l2)
+++++
intros.
-----
Lemma all_equiv2_impl2__all_equiv : forall l1 l2 x y x' y', all_equiv l1 -> all_equiv l2 -> In x l1 -> In y l2 -> (x -> y) -> In x' l2 -> In y' l1 -> (x' -> y') -> all_equiv (l1++l2).
Proof.
intros l1 l2 x y x' y'.
intros.

*****
H6 : forall _ : x', y'
H5 : In y' l1
H4 : In x' l2
H3 : forall _ : x, y
H2 : In y l2
H1 : In x l1
H0 : all_equiv l2
H : all_equiv l1
x,y,x',y' : Prop
l1,l2 : list Prop
*****
all_equiv (app l1 l2)
+++++
apply all_equiv2_stronger2__all_equiv.
-----
Lemma all_equiv2_impl2__all_equiv : forall l1 l2 x y x' y', all_equiv l1 -> all_equiv l2 -> In x l1 -> In y l2 -> (x -> y) -> In x' l2 -> In y' l1 -> (x' -> y') -> all_equiv (l1++l2).
Proof.
intros l1 l2 x y x' y'.
intros.
apply all_equiv2_stronger2__all_equiv.

*****
H6 : forall _ : x', y'
H5 : In y' l1
H4 : In x' l2
H3 : forall _ : x, y
H2 : In y l2
H1 : In x l1
H0 : all_equiv l2
H : all_equiv l1
x,y,x',y' : Prop
l1,l2 : list Prop
*****
all_equiv l1
+++++
trivial.
-----
Lemma all_equiv2_impl2__all_equiv : forall l1 l2 x y x' y', all_equiv l1 -> all_equiv l2 -> In x l1 -> In y l2 -> (x -> y) -> In x' l2 -> In y' l1 -> (x' -> y') -> all_equiv (l1++l2).
Proof.
intros l1 l2 x y x' y'.
intros.
apply all_equiv2_stronger2__all_equiv.

*****
H6 : forall _ : x', y'
H5 : In y' l1
H4 : In x' l2
H3 : forall _ : x, y
H2 : In y l2
H1 : In x l1
H0 : all_equiv l2
H : all_equiv l1
x,y,x',y' : Prop
l1,l2 : list Prop
*****
all_equiv l2
+++++
trivial.
-----
Lemma all_equiv2_impl2__all_equiv : forall l1 l2 x y x' y', all_equiv l1 -> all_equiv l2 -> In x l1 -> In y l2 -> (x -> y) -> In x' l2 -> In y' l1 -> (x' -> y') -> all_equiv (l1++l2).
Proof.
intros l1 l2 x y x' y'.
intros.
apply all_equiv2_stronger2__all_equiv.

*****
H6 : forall _ : x', y'
H5 : In y' l1
H4 : In x' l2
H3 : forall _ : x, y
H2 : In y l2
H1 : In x l1
H0 : all_equiv l2
H : all_equiv l1
x,y,x',y' : Prop
l1,l2 : list Prop
*****
stronger l1 l2
+++++
trivial.
-----
Lemma all_equiv2_impl2__all_equiv : forall l1 l2 x y x' y', all_equiv l1 -> all_equiv l2 -> In x l1 -> In y l2 -> (x -> y) -> In x' l2 -> In y' l1 -> (x' -> y') -> all_equiv (l1++l2).
Proof.
intros l1 l2 x y x' y'.
intros.
apply all_equiv2_stronger2__all_equiv.
trivial.

*****
H6 : forall _ : x', y'
H5 : In y' l1
H4 : In x' l2
H3 : forall _ : x, y
H2 : In y l2
H1 : In x l1
H0 : all_equiv l2
H : all_equiv l1
x,y,x',y' : Prop
l1,l2 : list Prop
*****
stronger l1 l2
+++++
apply all_equiv2_impl__stronger with x y.
-----
Lemma all_equiv2_impl2__all_equiv : forall l1 l2 x y x' y', all_equiv l1 -> all_equiv l2 -> In x l1 -> In y l2 -> (x -> y) -> In x' l2 -> In y' l1 -> (x' -> y') -> all_equiv (l1++l2).
Proof.
intros l1 l2 x y x' y'.
intros.
apply all_equiv2_stronger2__all_equiv.
trivial.
apply all_equiv2_impl__stronger with x y.

*****
H6 : forall _ : x', y'
H5 : In y' l1
H4 : In x' l2
H3 : forall _ : x, y
H2 : In y l2
H1 : In x l1
H0 : all_equiv l2
H : all_equiv l1
x,y,x',y' : Prop
l1,l2 : list Prop
*****
all_equiv l1
+++++
assumption.
-----
Lemma all_equiv2_impl2__all_equiv : forall l1 l2 x y x' y', all_equiv l1 -> all_equiv l2 -> In x l1 -> In y l2 -> (x -> y) -> In x' l2 -> In y' l1 -> (x' -> y') -> all_equiv (l1++l2).
Proof.
intros l1 l2 x y x' y'.
intros.
apply all_equiv2_stronger2__all_equiv.
trivial.
apply all_equiv2_impl__stronger with x y.

*****
H6 : forall _ : x', y'
H5 : In y' l1
H4 : In x' l2
H3 : forall _ : x, y
H2 : In y l2
H1 : In x l1
H0 : all_equiv l2
H : all_equiv l1
x,y,x',y' : Prop
l1,l2 : list Prop
*****
all_equiv l2
+++++
assumption.
-----
Lemma all_equiv2_impl2__all_equiv : forall l1 l2 x y x' y', all_equiv l1 -> all_equiv l2 -> In x l1 -> In y l2 -> (x -> y) -> In x' l2 -> In y' l1 -> (x' -> y') -> all_equiv (l1++l2).
Proof.
intros l1 l2 x y x' y'.
intros.
apply all_equiv2_stronger2__all_equiv.
trivial.
apply all_equiv2_impl__stronger with x y.

*****
H6 : forall _ : x', y'
H5 : In y' l1
H4 : In x' l2
H3 : forall _ : x, y
H2 : In y l2
H1 : In x l1
H0 : all_equiv l2
H : all_equiv l1
x,y,x',y' : Prop
l1,l2 : list Prop
*****
In x l1
+++++
assumption.
-----
Lemma all_equiv2_impl2__all_equiv : forall l1 l2 x y x' y', all_equiv l1 -> all_equiv l2 -> In x l1 -> In y l2 -> (x -> y) -> In x' l2 -> In y' l1 -> (x' -> y') -> all_equiv (l1++l2).
Proof.
intros l1 l2 x y x' y'.
intros.
apply all_equiv2_stronger2__all_equiv.
trivial.
apply all_equiv2_impl__stronger with x y.

*****
H6 : forall _ : x', y'
H5 : In y' l1
H4 : In x' l2
H3 : forall _ : x, y
H2 : In y l2
H1 : In x l1
H0 : all_equiv l2
H : all_equiv l1
x,y,x',y' : Prop
l1,l2 : list Prop
*****
In y l2
+++++
assumption.
-----
Lemma all_equiv2_impl2__all_equiv : forall l1 l2 x y x' y', all_equiv l1 -> all_equiv l2 -> In x l1 -> In y l2 -> (x -> y) -> In x' l2 -> In y' l1 -> (x' -> y') -> all_equiv (l1++l2).
Proof.
intros l1 l2 x y x' y'.
intros.
apply all_equiv2_stronger2__all_equiv.
trivial.
apply all_equiv2_impl__stronger with x y.

*****
H6 : forall _ : x', y'
H5 : In y' l1
H4 : In x' l2
H3 : forall _ : x, y
H2 : In y l2
H1 : In x l1
H0 : all_equiv l2
H : all_equiv l1
x,y,x',y' : Prop
l1,l2 : list Prop
*****
forall _ : x, y
+++++
assumption.
-----
Lemma all_equiv2_impl2__all_equiv : forall l1 l2 x y x' y', all_equiv l1 -> all_equiv l2 -> In x l1 -> In y l2 -> (x -> y) -> In x' l2 -> In y' l1 -> (x' -> y') -> all_equiv (l1++l2).
Proof.
intros l1 l2 x y x' y'.
intros.
apply all_equiv2_stronger2__all_equiv.

*****
H6 : forall _ : x', y'
H5 : In y' l1
H4 : In x' l2
H3 : forall _ : x, y
H2 : In y l2
H1 : In x l1
H0 : all_equiv l2
H : all_equiv l1
x,y,x',y' : Prop
l1,l2 : list Prop
*****
stronger l2 l1
+++++
trivial.
-----
Lemma all_equiv2_impl2__all_equiv : forall l1 l2 x y x' y', all_equiv l1 -> all_equiv l2 -> In x l1 -> In y l2 -> (x -> y) -> In x' l2 -> In y' l1 -> (x' -> y') -> all_equiv (l1++l2).
Proof.
intros l1 l2 x y x' y'.
intros.
apply all_equiv2_stronger2__all_equiv.
trivial.

*****
H6 : forall _ : x', y'
H5 : In y' l1
H4 : In x' l2
H3 : forall _ : x, y
H2 : In y l2
H1 : In x l1
H0 : all_equiv l2
H : all_equiv l1
x,y,x',y' : Prop
l1,l2 : list Prop
*****
stronger l2 l1
+++++
apply all_equiv2_impl__stronger with x' y'.
-----
Lemma all_equiv2_impl2__all_equiv : forall l1 l2 x y x' y', all_equiv l1 -> all_equiv l2 -> In x l1 -> In y l2 -> (x -> y) -> In x' l2 -> In y' l1 -> (x' -> y') -> all_equiv (l1++l2).
Proof.
intros l1 l2 x y x' y'.
intros.
apply all_equiv2_stronger2__all_equiv.
trivial.
apply all_equiv2_impl__stronger with x' y'.

*****
H6 : forall _ : x', y'
H5 : In y' l1
H4 : In x' l2
H3 : forall _ : x, y
H2 : In y l2
H1 : In x l1
H0 : all_equiv l2
H : all_equiv l1
x,y,x',y' : Prop
l1,l2 : list Prop
*****
all_equiv l2
+++++
assumption.
-----
Lemma all_equiv2_impl2__all_equiv : forall l1 l2 x y x' y', all_equiv l1 -> all_equiv l2 -> In x l1 -> In y l2 -> (x -> y) -> In x' l2 -> In y' l1 -> (x' -> y') -> all_equiv (l1++l2).
Proof.
intros l1 l2 x y x' y'.
intros.
apply all_equiv2_stronger2__all_equiv.
trivial.
apply all_equiv2_impl__stronger with x' y'.

*****
H6 : forall _ : x', y'
H5 : In y' l1
H4 : In x' l2
H3 : forall _ : x, y
H2 : In y l2
H1 : In x l1
H0 : all_equiv l2
H : all_equiv l1
x,y,x',y' : Prop
l1,l2 : list Prop
*****
all_equiv l1
+++++
assumption.
-----
Lemma all_equiv2_impl2__all_equiv : forall l1 l2 x y x' y', all_equiv l1 -> all_equiv l2 -> In x l1 -> In y l2 -> (x -> y) -> In x' l2 -> In y' l1 -> (x' -> y') -> all_equiv (l1++l2).
Proof.
intros l1 l2 x y x' y'.
intros.
apply all_equiv2_stronger2__all_equiv.
trivial.
apply all_equiv2_impl__stronger with x' y'.

*****
H6 : forall _ : x', y'
H5 : In y' l1
H4 : In x' l2
H3 : forall _ : x, y
H2 : In y l2
H1 : In x l1
H0 : all_equiv l2
H : all_equiv l1
x,y,x',y' : Prop
l1,l2 : list Prop
*****
In x' l2
+++++
assumption.
-----
Lemma all_equiv2_impl2__all_equiv : forall l1 l2 x y x' y', all_equiv l1 -> all_equiv l2 -> In x l1 -> In y l2 -> (x -> y) -> In x' l2 -> In y' l1 -> (x' -> y') -> all_equiv (l1++l2).
Proof.
intros l1 l2 x y x' y'.
intros.
apply all_equiv2_stronger2__all_equiv.
trivial.
apply all_equiv2_impl__stronger with x' y'.

*****
H6 : forall _ : x', y'
H5 : In y' l1
H4 : In x' l2
H3 : forall _ : x, y
H2 : In y l2
H1 : In x l1
H0 : all_equiv l2
H : all_equiv l1
x,y,x',y' : Prop
l1,l2 : list Prop
*****
In y' l1
+++++
assumption.
-----
Lemma all_equiv2_impl2__all_equiv : forall l1 l2 x y x' y', all_equiv l1 -> all_equiv l2 -> In x l1 -> In y l2 -> (x -> y) -> In x' l2 -> In y' l1 -> (x' -> y') -> all_equiv (l1++l2).
Proof.
intros l1 l2 x y x' y'.
intros.
apply all_equiv2_stronger2__all_equiv.
trivial.
apply all_equiv2_impl__stronger with x' y'.

*****
H6 : forall _ : x', y'
H5 : In y' l1
H4 : In x' l2
H3 : forall _ : x, y
H2 : In y l2
H1 : In x l1
H0 : all_equiv l2
H : all_equiv l1
x,y,x',y' : Prop
l1,l2 : list Prop
*****
forall _ : x', y'
+++++
assumption.
-----
Lemma all_equiv2_impl2__all_equiv : forall l1 l2 x y x' y', all_equiv l1 -> all_equiv l2 -> In x l1 -> In y l2 -> (x -> y) -> In x' l2 -> In y' l1 -> (x' -> y') -> all_equiv (l1++l2).
Proof.
intros l1 l2 x y x' y'.
intros.
apply all_equiv2_stronger2__all_equiv.

*****

*****

+++++
Qed.
-----
Lemma all_equiv3_impl3__all_equiv : forall l1 l2 l3 x y x' y' x'' y'',\n  all_equiv l1 -> all_equiv l2 -> all_equiv l3 ->\n  In x l1 -> In y l2 -> (x -> y) ->\n  In x' l2 -> In y' l3 -> (x' -> y') ->\n  In x'' l3 -> In y'' l1 -> (x'' -> y'') ->\n  all_equiv (l1++l2++l3).
-----
Lemma all_equiv3_impl3__all_equiv : forall l1 l2 l3 x y x' y' x'' y'', all_equiv l1 -> all_equiv l2 -> all_equiv l3 -> In x l1 -> In y l2 -> (x -> y) -> In x' l2 -> In y' l3 -> (x' -> y') -> In x'' l3 -> In y'' l1 -> (x'' -> y'') -> all_equiv (l1++l2++l3).

*****

*****
forall (l1 l2 l3 : list Prop) (x y x' y' x'' y'' : Prop) (_ : all_equiv l1) (_ : all_equiv l2) (_ : all_equiv l3) (_ : In x l1) (_ : In y l2) (_ : forall _ : x, y) (_ : In x' l2) (_ : In y' l3) (_ : forall _ : x', y') (_ : In x'' l3) (_ : In y'' l1) (_ : forall _ : x'', y''), all_equiv (app l1 (app l2 l3))
+++++
Proof.
-----
Lemma all_equiv3_impl3__all_equiv : forall l1 l2 l3 x y x' y' x'' y'', all_equiv l1 -> all_equiv l2 -> all_equiv l3 -> In x l1 -> In y l2 -> (x -> y) -> In x' l2 -> In y' l3 -> (x' -> y') -> In x'' l3 -> In y'' l1 -> (x'' -> y'') -> all_equiv (l1++l2++l3).
Proof.

*****

*****
forall (l1 l2 l3 : list Prop) (x y x' y' x'' y'' : Prop) (_ : all_equiv l1) (_ : all_equiv l2) (_ : all_equiv l3) (_ : In x l1) (_ : In y l2) (_ : forall _ : x, y) (_ : In x' l2) (_ : In y' l3) (_ : forall _ : x', y') (_ : In x'' l3) (_ : In y'' l1) (_ : forall _ : x'', y''), all_equiv (app l1 (app l2 l3))
+++++
intros l1 l2 l3 x y x' y' x'' y''.
-----
Lemma all_equiv3_impl3__all_equiv : forall l1 l2 l3 x y x' y' x'' y'', all_equiv l1 -> all_equiv l2 -> all_equiv l3 -> In x l1 -> In y l2 -> (x -> y) -> In x' l2 -> In y' l3 -> (x' -> y') -> In x'' l3 -> In y'' l1 -> (x'' -> y'') -> all_equiv (l1++l2++l3).
Proof.
intros l1 l2 l3 x y x' y' x'' y''.

*****
x,y,x',y',x'',y'' : Prop
l1,l2,l3 : list Prop
*****
forall (_ : all_equiv l1) (_ : all_equiv l2) (_ : all_equiv l3) (_ : In x l1) (_ : In y l2) (_ : forall _ : x, y) (_ : In x' l2) (_ : In y' l3) (_ : forall _ : x', y') (_ : In x'' l3) (_ : In y'' l1) (_ : forall _ : x'', y''), all_equiv (app l1 (app l2 l3))
+++++
intros.
-----
Lemma all_equiv3_impl3__all_equiv : forall l1 l2 l3 x y x' y' x'' y'', all_equiv l1 -> all_equiv l2 -> all_equiv l3 -> In x l1 -> In y l2 -> (x -> y) -> In x' l2 -> In y' l3 -> (x' -> y') -> In x'' l3 -> In y'' l1 -> (x'' -> y'') -> all_equiv (l1++l2++l3).
Proof.
intros l1 l2 l3 x y x' y' x'' y''.
intros.

*****
H10 : forall _ : x'', y''
H9 : In y'' l1
H8 : In x'' l3
H7 : forall _ : x', y'
H6 : In y' l3
H5 : In x' l2
H4 : forall _ : x, y
H3 : In y l2
H2 : In x l1
H1 : all_equiv l3
H0 : all_equiv l2
H : all_equiv l1
x,y,x',y',x'',y'' : Prop
l1,l2,l3 : list Prop
*****
all_equiv (app l1 (app l2 l3))
+++++
apply all_equiv3_stronger3__all_equiv.
-----
Lemma all_equiv3_impl3__all_equiv : forall l1 l2 l3 x y x' y' x'' y'', all_equiv l1 -> all_equiv l2 -> all_equiv l3 -> In x l1 -> In y l2 -> (x -> y) -> In x' l2 -> In y' l3 -> (x' -> y') -> In x'' l3 -> In y'' l1 -> (x'' -> y'') -> all_equiv (l1++l2++l3).
Proof.
intros l1 l2 l3 x y x' y' x'' y''.
intros.
apply all_equiv3_stronger3__all_equiv.

*****
H10 : forall _ : x'', y''
H9 : In y'' l1
H8 : In x'' l3
H7 : forall _ : x', y'
H6 : In y' l3
H5 : In x' l2
H4 : forall _ : x, y
H3 : In y l2
H2 : In x l1
H1 : all_equiv l3
H0 : all_equiv l2
H : all_equiv l1
x,y,x',y',x'',y'' : Prop
l1,l2,l3 : list Prop
*****
not (eq l1 nil)
+++++
trivial.
-----
Lemma all_equiv3_impl3__all_equiv : forall l1 l2 l3 x y x' y' x'' y'', all_equiv l1 -> all_equiv l2 -> all_equiv l3 -> In x l1 -> In y l2 -> (x -> y) -> In x' l2 -> In y' l3 -> (x' -> y') -> In x'' l3 -> In y'' l1 -> (x'' -> y'') -> all_equiv (l1++l2++l3).
Proof.
intros l1 l2 l3 x y x' y' x'' y''.
intros.
apply all_equiv3_stronger3__all_equiv.
trivial.

*****
H10 : forall _ : x'', y''
H9 : In y'' l1
H8 : In x'' l3
H7 : forall _ : x', y'
H6 : In y' l3
H5 : In x' l2
H4 : forall _ : x, y
H3 : In y l2
H2 : In x l1
H1 : all_equiv l3
H0 : all_equiv l2
H : all_equiv l1
x,y,x',y',x'',y'' : Prop
l1,l2,l3 : list Prop
*****
not (eq l1 nil)
+++++
try (intro He; rewrite He in *; auto).
-----
Lemma all_equiv3_impl3__all_equiv : forall l1 l2 l3 x y x' y' x'' y'', all_equiv l1 -> all_equiv l2 -> all_equiv l3 -> In x l1 -> In y l2 -> (x -> y) -> In x' l2 -> In y' l3 -> (x' -> y') -> In x'' l3 -> In y'' l1 -> (x'' -> y'') -> all_equiv (l1++l2++l3).
Proof.
intros l1 l2 l3 x y x' y' x'' y''.
intros.
apply all_equiv3_stronger3__all_equiv.

*****
H10 : forall _ : x'', y''
H9 : In y'' l1
H8 : In x'' l3
H7 : forall _ : x', y'
H6 : In y' l3
H5 : In x' l2
H4 : forall _ : x, y
H3 : In y l2
H2 : In x l1
H1 : all_equiv l3
H0 : all_equiv l2
H : all_equiv l1
x,y,x',y',x'',y'' : Prop
l1,l2,l3 : list Prop
*****
not (eq l2 nil)
+++++
trivial.
-----
Lemma all_equiv3_impl3__all_equiv : forall l1 l2 l3 x y x' y' x'' y'', all_equiv l1 -> all_equiv l2 -> all_equiv l3 -> In x l1 -> In y l2 -> (x -> y) -> In x' l2 -> In y' l3 -> (x' -> y') -> In x'' l3 -> In y'' l1 -> (x'' -> y'') -> all_equiv (l1++l2++l3).
Proof.
intros l1 l2 l3 x y x' y' x'' y''.
intros.
apply all_equiv3_stronger3__all_equiv.
trivial.

*****
H10 : forall _ : x'', y''
H9 : In y'' l1
H8 : In x'' l3
H7 : forall _ : x', y'
H6 : In y' l3
H5 : In x' l2
H4 : forall _ : x, y
H3 : In y l2
H2 : In x l1
H1 : all_equiv l3
H0 : all_equiv l2
H : all_equiv l1
x,y,x',y',x'',y'' : Prop
l1,l2,l3 : list Prop
*****
not (eq l2 nil)
+++++
try (intro He; rewrite He in *; auto).
-----
Lemma all_equiv3_impl3__all_equiv : forall l1 l2 l3 x y x' y' x'' y'', all_equiv l1 -> all_equiv l2 -> all_equiv l3 -> In x l1 -> In y l2 -> (x -> y) -> In x' l2 -> In y' l3 -> (x' -> y') -> In x'' l3 -> In y'' l1 -> (x'' -> y'') -> all_equiv (l1++l2++l3).
Proof.
intros l1 l2 l3 x y x' y' x'' y''.
intros.
apply all_equiv3_stronger3__all_equiv.

*****
H10 : forall _ : x'', y''
H9 : In y'' l1
H8 : In x'' l3
H7 : forall _ : x', y'
H6 : In y' l3
H5 : In x' l2
H4 : forall _ : x, y
H3 : In y l2
H2 : In x l1
H1 : all_equiv l3
H0 : all_equiv l2
H : all_equiv l1
x,y,x',y',x'',y'' : Prop
l1,l2,l3 : list Prop
*****
not (eq l3 nil)
+++++
trivial.
-----
Lemma all_equiv3_impl3__all_equiv : forall l1 l2 l3 x y x' y' x'' y'', all_equiv l1 -> all_equiv l2 -> all_equiv l3 -> In x l1 -> In y l2 -> (x -> y) -> In x' l2 -> In y' l3 -> (x' -> y') -> In x'' l3 -> In y'' l1 -> (x'' -> y'') -> all_equiv (l1++l2++l3).
Proof.
intros l1 l2 l3 x y x' y' x'' y''.
intros.
apply all_equiv3_stronger3__all_equiv.
trivial.

*****
H10 : forall _ : x'', y''
H9 : In y'' l1
H8 : In x'' l3
H7 : forall _ : x', y'
H6 : In y' l3
H5 : In x' l2
H4 : forall _ : x, y
H3 : In y l2
H2 : In x l1
H1 : all_equiv l3
H0 : all_equiv l2
H : all_equiv l1
x,y,x',y',x'',y'' : Prop
l1,l2,l3 : list Prop
*****
not (eq l3 nil)
+++++
try (intro He; rewrite He in *; auto).
-----
Lemma all_equiv3_impl3__all_equiv : forall l1 l2 l3 x y x' y' x'' y'', all_equiv l1 -> all_equiv l2 -> all_equiv l3 -> In x l1 -> In y l2 -> (x -> y) -> In x' l2 -> In y' l3 -> (x' -> y') -> In x'' l3 -> In y'' l1 -> (x'' -> y'') -> all_equiv (l1++l2++l3).
Proof.
intros l1 l2 l3 x y x' y' x'' y''.
intros.
apply all_equiv3_stronger3__all_equiv.

*****
H10 : forall _ : x'', y''
H9 : In y'' l1
H8 : In x'' l3
H7 : forall _ : x', y'
H6 : In y' l3
H5 : In x' l2
H4 : forall _ : x, y
H3 : In y l2
H2 : In x l1
H1 : all_equiv l3
H0 : all_equiv l2
H : all_equiv l1
x,y,x',y',x'',y'' : Prop
l1,l2,l3 : list Prop
*****
all_equiv l1
+++++
trivial.
-----
Lemma all_equiv3_impl3__all_equiv : forall l1 l2 l3 x y x' y' x'' y'', all_equiv l1 -> all_equiv l2 -> all_equiv l3 -> In x l1 -> In y l2 -> (x -> y) -> In x' l2 -> In y' l3 -> (x' -> y') -> In x'' l3 -> In y'' l1 -> (x'' -> y'') -> all_equiv (l1++l2++l3).
Proof.
intros l1 l2 l3 x y x' y' x'' y''.
intros.
apply all_equiv3_stronger3__all_equiv.

*****
H10 : forall _ : x'', y''
H9 : In y'' l1
H8 : In x'' l3
H7 : forall _ : x', y'
H6 : In y' l3
H5 : In x' l2
H4 : forall _ : x, y
H3 : In y l2
H2 : In x l1
H1 : all_equiv l3
H0 : all_equiv l2
H : all_equiv l1
x,y,x',y',x'',y'' : Prop
l1,l2,l3 : list Prop
*****
all_equiv l2
+++++
trivial.
-----
Lemma all_equiv3_impl3__all_equiv : forall l1 l2 l3 x y x' y' x'' y'', all_equiv l1 -> all_equiv l2 -> all_equiv l3 -> In x l1 -> In y l2 -> (x -> y) -> In x' l2 -> In y' l3 -> (x' -> y') -> In x'' l3 -> In y'' l1 -> (x'' -> y'') -> all_equiv (l1++l2++l3).
Proof.
intros l1 l2 l3 x y x' y' x'' y''.
intros.
apply all_equiv3_stronger3__all_equiv.

*****
H10 : forall _ : x'', y''
H9 : In y'' l1
H8 : In x'' l3
H7 : forall _ : x', y'
H6 : In y' l3
H5 : In x' l2
H4 : forall _ : x, y
H3 : In y l2
H2 : In x l1
H1 : all_equiv l3
H0 : all_equiv l2
H : all_equiv l1
x,y,x',y',x'',y'' : Prop
l1,l2,l3 : list Prop
*****
all_equiv l3
+++++
trivial.
-----
Lemma all_equiv3_impl3__all_equiv : forall l1 l2 l3 x y x' y' x'' y'', all_equiv l1 -> all_equiv l2 -> all_equiv l3 -> In x l1 -> In y l2 -> (x -> y) -> In x' l2 -> In y' l3 -> (x' -> y') -> In x'' l3 -> In y'' l1 -> (x'' -> y'') -> all_equiv (l1++l2++l3).
Proof.
intros l1 l2 l3 x y x' y' x'' y''.
intros.
apply all_equiv3_stronger3__all_equiv.

*****
H10 : forall _ : x'', y''
H9 : In y'' l1
H8 : In x'' l3
H7 : forall _ : x', y'
H6 : In y' l3
H5 : In x' l2
H4 : forall _ : x, y
H3 : In y l2
H2 : In x l1
H1 : all_equiv l3
H0 : all_equiv l2
H : all_equiv l1
x,y,x',y',x'',y'' : Prop
l1,l2,l3 : list Prop
*****
stronger l1 l2
+++++
trivial.
-----
Lemma all_equiv3_impl3__all_equiv : forall l1 l2 l3 x y x' y' x'' y'', all_equiv l1 -> all_equiv l2 -> all_equiv l3 -> In x l1 -> In y l2 -> (x -> y) -> In x' l2 -> In y' l3 -> (x' -> y') -> In x'' l3 -> In y'' l1 -> (x'' -> y'') -> all_equiv (l1++l2++l3).
Proof.
intros l1 l2 l3 x y x' y' x'' y''.
intros.
apply all_equiv3_stronger3__all_equiv.
trivial.

*****
H10 : forall _ : x'', y''
H9 : In y'' l1
H8 : In x'' l3
H7 : forall _ : x', y'
H6 : In y' l3
H5 : In x' l2
H4 : forall _ : x, y
H3 : In y l2
H2 : In x l1
H1 : all_equiv l3
H0 : all_equiv l2
H : all_equiv l1
x,y,x',y',x'',y'' : Prop
l1,l2,l3 : list Prop
*****
stronger l1 l2
+++++
try (intro He; rewrite He in *; auto).
-----
Lemma all_equiv3_impl3__all_equiv : forall l1 l2 l3 x y x' y' x'' y'', all_equiv l1 -> all_equiv l2 -> all_equiv l3 -> In x l1 -> In y l2 -> (x -> y) -> In x' l2 -> In y' l3 -> (x' -> y') -> In x'' l3 -> In y'' l1 -> (x'' -> y'') -> all_equiv (l1++l2++l3).
Proof.
intros l1 l2 l3 x y x' y' x'' y''.
intros.
apply all_equiv3_stronger3__all_equiv.
trivial.
try (intro He; rewrite He in *; auto).

*****
H10 : forall _ : x'', y''
H9 : In y'' l1
H8 : In x'' l3
H7 : forall _ : x', y'
H6 : In y' l3
H5 : In x' l2
H4 : forall _ : x, y
H3 : In y l2
H2 : In x l1
H1 : all_equiv l3
H0 : all_equiv l2
H : all_equiv l1
x,y,x',y',x'',y'' : Prop
l1,l2,l3 : list Prop
*****
stronger l1 l2
+++++
apply all_equiv2_impl__stronger with x y.
-----
Lemma all_equiv3_impl3__all_equiv : forall l1 l2 l3 x y x' y' x'' y'', all_equiv l1 -> all_equiv l2 -> all_equiv l3 -> In x l1 -> In y l2 -> (x -> y) -> In x' l2 -> In y' l3 -> (x' -> y') -> In x'' l3 -> In y'' l1 -> (x'' -> y'') -> all_equiv (l1++l2++l3).
Proof.
intros l1 l2 l3 x y x' y' x'' y''.
intros.
apply all_equiv3_stronger3__all_equiv.
trivial.
try (intro He; rewrite He in *; auto).
apply all_equiv2_impl__stronger with x y.

*****
H10 : forall _ : x'', y''
H9 : In y'' l1
H8 : In x'' l3
H7 : forall _ : x', y'
H6 : In y' l3
H5 : In x' l2
H4 : forall _ : x, y
H3 : In y l2
H2 : In x l1
H1 : all_equiv l3
H0 : all_equiv l2
H : all_equiv l1
x,y,x',y',x'',y'' : Prop
l1,l2,l3 : list Prop
*****
all_equiv l1
+++++
assumption.
-----
Lemma all_equiv3_impl3__all_equiv : forall l1 l2 l3 x y x' y' x'' y'', all_equiv l1 -> all_equiv l2 -> all_equiv l3 -> In x l1 -> In y l2 -> (x -> y) -> In x' l2 -> In y' l3 -> (x' -> y') -> In x'' l3 -> In y'' l1 -> (x'' -> y'') -> all_equiv (l1++l2++l3).
Proof.
intros l1 l2 l3 x y x' y' x'' y''.
intros.
apply all_equiv3_stronger3__all_equiv.
trivial.
try (intro He; rewrite He in *; auto).
apply all_equiv2_impl__stronger with x y.

*****
H10 : forall _ : x'', y''
H9 : In y'' l1
H8 : In x'' l3
H7 : forall _ : x', y'
H6 : In y' l3
H5 : In x' l2
H4 : forall _ : x, y
H3 : In y l2
H2 : In x l1
H1 : all_equiv l3
H0 : all_equiv l2
H : all_equiv l1
x,y,x',y',x'',y'' : Prop
l1,l2,l3 : list Prop
*****
all_equiv l2
+++++
assumption.
-----
Lemma all_equiv3_impl3__all_equiv : forall l1 l2 l3 x y x' y' x'' y'', all_equiv l1 -> all_equiv l2 -> all_equiv l3 -> In x l1 -> In y l2 -> (x -> y) -> In x' l2 -> In y' l3 -> (x' -> y') -> In x'' l3 -> In y'' l1 -> (x'' -> y'') -> all_equiv (l1++l2++l3).
Proof.
intros l1 l2 l3 x y x' y' x'' y''.
intros.
apply all_equiv3_stronger3__all_equiv.
trivial.
try (intro He; rewrite He in *; auto).
apply all_equiv2_impl__stronger with x y.

*****
H10 : forall _ : x'', y''
H9 : In y'' l1
H8 : In x'' l3
H7 : forall _ : x', y'
H6 : In y' l3
H5 : In x' l2
H4 : forall _ : x, y
H3 : In y l2
H2 : In x l1
H1 : all_equiv l3
H0 : all_equiv l2
H : all_equiv l1
x,y,x',y',x'',y'' : Prop
l1,l2,l3 : list Prop
*****
In x l1
+++++
assumption.
-----
Lemma all_equiv3_impl3__all_equiv : forall l1 l2 l3 x y x' y' x'' y'', all_equiv l1 -> all_equiv l2 -> all_equiv l3 -> In x l1 -> In y l2 -> (x -> y) -> In x' l2 -> In y' l3 -> (x' -> y') -> In x'' l3 -> In y'' l1 -> (x'' -> y'') -> all_equiv (l1++l2++l3).
Proof.
intros l1 l2 l3 x y x' y' x'' y''.
intros.
apply all_equiv3_stronger3__all_equiv.
trivial.
try (intro He; rewrite He in *; auto).
apply all_equiv2_impl__stronger with x y.

*****
H10 : forall _ : x'', y''
H9 : In y'' l1
H8 : In x'' l3
H7 : forall _ : x', y'
H6 : In y' l3
H5 : In x' l2
H4 : forall _ : x, y
H3 : In y l2
H2 : In x l1
H1 : all_equiv l3
H0 : all_equiv l2
H : all_equiv l1
x,y,x',y',x'',y'' : Prop
l1,l2,l3 : list Prop
*****
In y l2
+++++
assumption.
-----
Lemma all_equiv3_impl3__all_equiv : forall l1 l2 l3 x y x' y' x'' y'', all_equiv l1 -> all_equiv l2 -> all_equiv l3 -> In x l1 -> In y l2 -> (x -> y) -> In x' l2 -> In y' l3 -> (x' -> y') -> In x'' l3 -> In y'' l1 -> (x'' -> y'') -> all_equiv (l1++l2++l3).
Proof.
intros l1 l2 l3 x y x' y' x'' y''.
intros.
apply all_equiv3_stronger3__all_equiv.
trivial.
try (intro He; rewrite He in *; auto).
apply all_equiv2_impl__stronger with x y.

*****
H10 : forall _ : x'', y''
H9 : In y'' l1
H8 : In x'' l3
H7 : forall _ : x', y'
H6 : In y' l3
H5 : In x' l2
H4 : forall _ : x, y
H3 : In y l2
H2 : In x l1
H1 : all_equiv l3
H0 : all_equiv l2
H : all_equiv l1
x,y,x',y',x'',y'' : Prop
l1,l2,l3 : list Prop
*****
forall _ : x, y
+++++
assumption.
-----
Lemma all_equiv3_impl3__all_equiv : forall l1 l2 l3 x y x' y' x'' y'', all_equiv l1 -> all_equiv l2 -> all_equiv l3 -> In x l1 -> In y l2 -> (x -> y) -> In x' l2 -> In y' l3 -> (x' -> y') -> In x'' l3 -> In y'' l1 -> (x'' -> y'') -> all_equiv (l1++l2++l3).
Proof.
intros l1 l2 l3 x y x' y' x'' y''.
intros.
apply all_equiv3_stronger3__all_equiv.

*****
H10 : forall _ : x'', y''
H9 : In y'' l1
H8 : In x'' l3
H7 : forall _ : x', y'
H6 : In y' l3
H5 : In x' l2
H4 : forall _ : x, y
H3 : In y l2
H2 : In x l1
H1 : all_equiv l3
H0 : all_equiv l2
H : all_equiv l1
x,y,x',y',x'',y'' : Prop
l1,l2,l3 : list Prop
*****
stronger l2 l3
+++++
trivial.
-----
Lemma all_equiv3_impl3__all_equiv : forall l1 l2 l3 x y x' y' x'' y'', all_equiv l1 -> all_equiv l2 -> all_equiv l3 -> In x l1 -> In y l2 -> (x -> y) -> In x' l2 -> In y' l3 -> (x' -> y') -> In x'' l3 -> In y'' l1 -> (x'' -> y'') -> all_equiv (l1++l2++l3).
Proof.
intros l1 l2 l3 x y x' y' x'' y''.
intros.
apply all_equiv3_stronger3__all_equiv.
trivial.

*****
H10 : forall _ : x'', y''
H9 : In y'' l1
H8 : In x'' l3
H7 : forall _ : x', y'
H6 : In y' l3
H5 : In x' l2
H4 : forall _ : x, y
H3 : In y l2
H2 : In x l1
H1 : all_equiv l3
H0 : all_equiv l2
H : all_equiv l1
x,y,x',y',x'',y'' : Prop
l1,l2,l3 : list Prop
*****
stronger l2 l3
+++++
try (intro He; rewrite He in *; auto).
-----
Lemma all_equiv3_impl3__all_equiv : forall l1 l2 l3 x y x' y' x'' y'', all_equiv l1 -> all_equiv l2 -> all_equiv l3 -> In x l1 -> In y l2 -> (x -> y) -> In x' l2 -> In y' l3 -> (x' -> y') -> In x'' l3 -> In y'' l1 -> (x'' -> y'') -> all_equiv (l1++l2++l3).
Proof.
intros l1 l2 l3 x y x' y' x'' y''.
intros.
apply all_equiv3_stronger3__all_equiv.
trivial.
try (intro He; rewrite He in *; auto).

*****
H10 : forall _ : x'', y''
H9 : In y'' l1
H8 : In x'' l3
H7 : forall _ : x', y'
H6 : In y' l3
H5 : In x' l2
H4 : forall _ : x, y
H3 : In y l2
H2 : In x l1
H1 : all_equiv l3
H0 : all_equiv l2
H : all_equiv l1
x,y,x',y',x'',y'' : Prop
l1,l2,l3 : list Prop
*****
stronger l2 l3
+++++
apply all_equiv2_impl__stronger with x' y'.
-----
Lemma all_equiv3_impl3__all_equiv : forall l1 l2 l3 x y x' y' x'' y'', all_equiv l1 -> all_equiv l2 -> all_equiv l3 -> In x l1 -> In y l2 -> (x -> y) -> In x' l2 -> In y' l3 -> (x' -> y') -> In x'' l3 -> In y'' l1 -> (x'' -> y'') -> all_equiv (l1++l2++l3).
Proof.
intros l1 l2 l3 x y x' y' x'' y''.
intros.
apply all_equiv3_stronger3__all_equiv.
trivial.
try (intro He; rewrite He in *; auto).
apply all_equiv2_impl__stronger with x' y'.

*****
H10 : forall _ : x'', y''
H9 : In y'' l1
H8 : In x'' l3
H7 : forall _ : x', y'
H6 : In y' l3
H5 : In x' l2
H4 : forall _ : x, y
H3 : In y l2
H2 : In x l1
H1 : all_equiv l3
H0 : all_equiv l2
H : all_equiv l1
x,y,x',y',x'',y'' : Prop
l1,l2,l3 : list Prop
*****
all_equiv l2
+++++
assumption.
-----
Lemma all_equiv3_impl3__all_equiv : forall l1 l2 l3 x y x' y' x'' y'', all_equiv l1 -> all_equiv l2 -> all_equiv l3 -> In x l1 -> In y l2 -> (x -> y) -> In x' l2 -> In y' l3 -> (x' -> y') -> In x'' l3 -> In y'' l1 -> (x'' -> y'') -> all_equiv (l1++l2++l3).
Proof.
intros l1 l2 l3 x y x' y' x'' y''.
intros.
apply all_equiv3_stronger3__all_equiv.
trivial.
try (intro He; rewrite He in *; auto).
apply all_equiv2_impl__stronger with x' y'.

*****
H10 : forall _ : x'', y''
H9 : In y'' l1
H8 : In x'' l3
H7 : forall _ : x', y'
H6 : In y' l3
H5 : In x' l2
H4 : forall _ : x, y
H3 : In y l2
H2 : In x l1
H1 : all_equiv l3
H0 : all_equiv l2
H : all_equiv l1
x,y,x',y',x'',y'' : Prop
l1,l2,l3 : list Prop
*****
all_equiv l3
+++++
assumption.
-----
Lemma all_equiv3_impl3__all_equiv : forall l1 l2 l3 x y x' y' x'' y'', all_equiv l1 -> all_equiv l2 -> all_equiv l3 -> In x l1 -> In y l2 -> (x -> y) -> In x' l2 -> In y' l3 -> (x' -> y') -> In x'' l3 -> In y'' l1 -> (x'' -> y'') -> all_equiv (l1++l2++l3).
Proof.
intros l1 l2 l3 x y x' y' x'' y''.
intros.
apply all_equiv3_stronger3__all_equiv.
trivial.
try (intro He; rewrite He in *; auto).
apply all_equiv2_impl__stronger with x' y'.

*****
H10 : forall _ : x'', y''
H9 : In y'' l1
H8 : In x'' l3
H7 : forall _ : x', y'
H6 : In y' l3
H5 : In x' l2
H4 : forall _ : x, y
H3 : In y l2
H2 : In x l1
H1 : all_equiv l3
H0 : all_equiv l2
H : all_equiv l1
x,y,x',y',x'',y'' : Prop
l1,l2,l3 : list Prop
*****
In x' l2
+++++
assumption.
-----
Lemma all_equiv3_impl3__all_equiv : forall l1 l2 l3 x y x' y' x'' y'', all_equiv l1 -> all_equiv l2 -> all_equiv l3 -> In x l1 -> In y l2 -> (x -> y) -> In x' l2 -> In y' l3 -> (x' -> y') -> In x'' l3 -> In y'' l1 -> (x'' -> y'') -> all_equiv (l1++l2++l3).
Proof.
intros l1 l2 l3 x y x' y' x'' y''.
intros.
apply all_equiv3_stronger3__all_equiv.
trivial.
try (intro He; rewrite He in *; auto).
apply all_equiv2_impl__stronger with x' y'.

*****
H10 : forall _ : x'', y''
H9 : In y'' l1
H8 : In x'' l3
H7 : forall _ : x', y'
H6 : In y' l3
H5 : In x' l2
H4 : forall _ : x, y
H3 : In y l2
H2 : In x l1
H1 : all_equiv l3
H0 : all_equiv l2
H : all_equiv l1
x,y,x',y',x'',y'' : Prop
l1,l2,l3 : list Prop
*****
In y' l3
+++++
assumption.
-----
Lemma all_equiv3_impl3__all_equiv : forall l1 l2 l3 x y x' y' x'' y'', all_equiv l1 -> all_equiv l2 -> all_equiv l3 -> In x l1 -> In y l2 -> (x -> y) -> In x' l2 -> In y' l3 -> (x' -> y') -> In x'' l3 -> In y'' l1 -> (x'' -> y'') -> all_equiv (l1++l2++l3).
Proof.
intros l1 l2 l3 x y x' y' x'' y''.
intros.
apply all_equiv3_stronger3__all_equiv.
trivial.
try (intro He; rewrite He in *; auto).
apply all_equiv2_impl__stronger with x' y'.

*****
H10 : forall _ : x'', y''
H9 : In y'' l1
H8 : In x'' l3
H7 : forall _ : x', y'
H6 : In y' l3
H5 : In x' l2
H4 : forall _ : x, y
H3 : In y l2
H2 : In x l1
H1 : all_equiv l3
H0 : all_equiv l2
H : all_equiv l1
x,y,x',y',x'',y'' : Prop
l1,l2,l3 : list Prop
*****
forall _ : x', y'
+++++
assumption.
-----
Lemma all_equiv3_impl3__all_equiv : forall l1 l2 l3 x y x' y' x'' y'', all_equiv l1 -> all_equiv l2 -> all_equiv l3 -> In x l1 -> In y l2 -> (x -> y) -> In x' l2 -> In y' l3 -> (x' -> y') -> In x'' l3 -> In y'' l1 -> (x'' -> y'') -> all_equiv (l1++l2++l3).
Proof.
intros l1 l2 l3 x y x' y' x'' y''.
intros.
apply all_equiv3_stronger3__all_equiv.

*****
H10 : forall _ : x'', y''
H9 : In y'' l1
H8 : In x'' l3
H7 : forall _ : x', y'
H6 : In y' l3
H5 : In x' l2
H4 : forall _ : x, y
H3 : In y l2
H2 : In x l1
H1 : all_equiv l3
H0 : all_equiv l2
H : all_equiv l1
x,y,x',y',x'',y'' : Prop
l1,l2,l3 : list Prop
*****
stronger l3 l1
+++++
trivial.
-----
Lemma all_equiv3_impl3__all_equiv : forall l1 l2 l3 x y x' y' x'' y'', all_equiv l1 -> all_equiv l2 -> all_equiv l3 -> In x l1 -> In y l2 -> (x -> y) -> In x' l2 -> In y' l3 -> (x' -> y') -> In x'' l3 -> In y'' l1 -> (x'' -> y'') -> all_equiv (l1++l2++l3).
Proof.
intros l1 l2 l3 x y x' y' x'' y''.
intros.
apply all_equiv3_stronger3__all_equiv.
trivial.

*****
H10 : forall _ : x'', y''
H9 : In y'' l1
H8 : In x'' l3
H7 : forall _ : x', y'
H6 : In y' l3
H5 : In x' l2
H4 : forall _ : x, y
H3 : In y l2
H2 : In x l1
H1 : all_equiv l3
H0 : all_equiv l2
H : all_equiv l1
x,y,x',y',x'',y'' : Prop
l1,l2,l3 : list Prop
*****
stronger l3 l1
+++++
try (intro He; rewrite He in *; auto).
-----
Lemma all_equiv3_impl3__all_equiv : forall l1 l2 l3 x y x' y' x'' y'', all_equiv l1 -> all_equiv l2 -> all_equiv l3 -> In x l1 -> In y l2 -> (x -> y) -> In x' l2 -> In y' l3 -> (x' -> y') -> In x'' l3 -> In y'' l1 -> (x'' -> y'') -> all_equiv (l1++l2++l3).
Proof.
intros l1 l2 l3 x y x' y' x'' y''.
intros.
apply all_equiv3_stronger3__all_equiv.
trivial.
try (intro He; rewrite He in *; auto).

*****
H10 : forall _ : x'', y''
H9 : In y'' l1
H8 : In x'' l3
H7 : forall _ : x', y'
H6 : In y' l3
H5 : In x' l2
H4 : forall _ : x, y
H3 : In y l2
H2 : In x l1
H1 : all_equiv l3
H0 : all_equiv l2
H : all_equiv l1
x,y,x',y',x'',y'' : Prop
l1,l2,l3 : list Prop
*****
stronger l3 l1
+++++
apply all_equiv2_impl__stronger with x'' y''.
-----
Lemma all_equiv3_impl3__all_equiv : forall l1 l2 l3 x y x' y' x'' y'', all_equiv l1 -> all_equiv l2 -> all_equiv l3 -> In x l1 -> In y l2 -> (x -> y) -> In x' l2 -> In y' l3 -> (x' -> y') -> In x'' l3 -> In y'' l1 -> (x'' -> y'') -> all_equiv (l1++l2++l3).
Proof.
intros l1 l2 l3 x y x' y' x'' y''.
intros.
apply all_equiv3_stronger3__all_equiv.
trivial.
try (intro He; rewrite He in *; auto).
apply all_equiv2_impl__stronger with x'' y''.

*****
H10 : forall _ : x'', y''
H9 : In y'' l1
H8 : In x'' l3
H7 : forall _ : x', y'
H6 : In y' l3
H5 : In x' l2
H4 : forall _ : x, y
H3 : In y l2
H2 : In x l1
H1 : all_equiv l3
H0 : all_equiv l2
H : all_equiv l1
x,y,x',y',x'',y'' : Prop
l1,l2,l3 : list Prop
*****
all_equiv l3
+++++
assumption.
-----
Lemma all_equiv3_impl3__all_equiv : forall l1 l2 l3 x y x' y' x'' y'', all_equiv l1 -> all_equiv l2 -> all_equiv l3 -> In x l1 -> In y l2 -> (x -> y) -> In x' l2 -> In y' l3 -> (x' -> y') -> In x'' l3 -> In y'' l1 -> (x'' -> y'') -> all_equiv (l1++l2++l3).
Proof.
intros l1 l2 l3 x y x' y' x'' y''.
intros.
apply all_equiv3_stronger3__all_equiv.
trivial.
try (intro He; rewrite He in *; auto).
apply all_equiv2_impl__stronger with x'' y''.

*****
H10 : forall _ : x'', y''
H9 : In y'' l1
H8 : In x'' l3
H7 : forall _ : x', y'
H6 : In y' l3
H5 : In x' l2
H4 : forall _ : x, y
H3 : In y l2
H2 : In x l1
H1 : all_equiv l3
H0 : all_equiv l2
H : all_equiv l1
x,y,x',y',x'',y'' : Prop
l1,l2,l3 : list Prop
*****
all_equiv l1
+++++
assumption.
-----
Lemma all_equiv3_impl3__all_equiv : forall l1 l2 l3 x y x' y' x'' y'', all_equiv l1 -> all_equiv l2 -> all_equiv l3 -> In x l1 -> In y l2 -> (x -> y) -> In x' l2 -> In y' l3 -> (x' -> y') -> In x'' l3 -> In y'' l1 -> (x'' -> y'') -> all_equiv (l1++l2++l3).
Proof.
intros l1 l2 l3 x y x' y' x'' y''.
intros.
apply all_equiv3_stronger3__all_equiv.
trivial.
try (intro He; rewrite He in *; auto).
apply all_equiv2_impl__stronger with x'' y''.

*****
H10 : forall _ : x'', y''
H9 : In y'' l1
H8 : In x'' l3
H7 : forall _ : x', y'
H6 : In y' l3
H5 : In x' l2
H4 : forall _ : x, y
H3 : In y l2
H2 : In x l1
H1 : all_equiv l3
H0 : all_equiv l2
H : all_equiv l1
x,y,x',y',x'',y'' : Prop
l1,l2,l3 : list Prop
*****
In x'' l3
+++++
assumption.
-----
Lemma all_equiv3_impl3__all_equiv : forall l1 l2 l3 x y x' y' x'' y'', all_equiv l1 -> all_equiv l2 -> all_equiv l3 -> In x l1 -> In y l2 -> (x -> y) -> In x' l2 -> In y' l3 -> (x' -> y') -> In x'' l3 -> In y'' l1 -> (x'' -> y'') -> all_equiv (l1++l2++l3).
Proof.
intros l1 l2 l3 x y x' y' x'' y''.
intros.
apply all_equiv3_stronger3__all_equiv.
trivial.
try (intro He; rewrite He in *; auto).
apply all_equiv2_impl__stronger with x'' y''.

*****
H10 : forall _ : x'', y''
H9 : In y'' l1
H8 : In x'' l3
H7 : forall _ : x', y'
H6 : In y' l3
H5 : In x' l2
H4 : forall _ : x, y
H3 : In y l2
H2 : In x l1
H1 : all_equiv l3
H0 : all_equiv l2
H : all_equiv l1
x,y,x',y',x'',y'' : Prop
l1,l2,l3 : list Prop
*****
In y'' l1
+++++
assumption.
-----
Lemma all_equiv3_impl3__all_equiv : forall l1 l2 l3 x y x' y' x'' y'', all_equiv l1 -> all_equiv l2 -> all_equiv l3 -> In x l1 -> In y l2 -> (x -> y) -> In x' l2 -> In y' l3 -> (x' -> y') -> In x'' l3 -> In y'' l1 -> (x'' -> y'') -> all_equiv (l1++l2++l3).
Proof.
intros l1 l2 l3 x y x' y' x'' y''.
intros.
apply all_equiv3_stronger3__all_equiv.
trivial.
try (intro He; rewrite He in *; auto).
apply all_equiv2_impl__stronger with x'' y''.

*****
H10 : forall _ : x'', y''
H9 : In y'' l1
H8 : In x'' l3
H7 : forall _ : x', y'
H6 : In y' l3
H5 : In x' l2
H4 : forall _ : x, y
H3 : In y l2
H2 : In x l1
H1 : all_equiv l3
H0 : all_equiv l2
H : all_equiv l1
x,y,x',y',x'',y'' : Prop
l1,l2,l3 : list Prop
*****
forall _ : x'', y''
+++++
assumption.
-----
Lemma all_equiv3_impl3__all_equiv : forall l1 l2 l3 x y x' y' x'' y'', all_equiv l1 -> all_equiv l2 -> all_equiv l3 -> In x l1 -> In y l2 -> (x -> y) -> In x' l2 -> In y' l3 -> (x' -> y') -> In x'' l3 -> In y'' l1 -> (x'' -> y'') -> all_equiv (l1++l2++l3).
Proof.
intros l1 l2 l3 x y x' y' x'' y''.
intros.
apply all_equiv3_stronger3__all_equiv.

*****

*****

+++++
Qed.
-----
Lemma all_equiv_trivial : forall x, all_equiv (x::nil).
-----
Lemma all_equiv_trivial : forall x, all_equiv (x::nil).

*****

*****
forall x : Prop, all_equiv (cons x nil)
+++++
Proof.
-----
Lemma all_equiv_trivial : forall x, all_equiv (x::nil).
Proof.

*****

*****
forall x : Prop, all_equiv (cons x nil)
+++++
unfold all_equiv.
-----
Lemma all_equiv_trivial : forall x, all_equiv (x::nil).
Proof.
unfold all_equiv.

*****

*****
forall (x x0 y : Prop) (_ : In x0 (cons x nil)) (_ : In y (cons x nil)), iff x0 y
+++++
simpl.
-----
Lemma all_equiv_trivial : forall x, all_equiv (x::nil).
Proof.
unfold all_equiv.
simpl.

*****

*****
forall (x x0 y : Prop) (_ : or (eq x x0) False) (_ : or (eq x y) False), iff x0 y
+++++
induction 1.
-----
Lemma all_equiv_trivial : forall x, all_equiv (x::nil).
Proof.
unfold all_equiv.
simpl.
induction 1.

*****
H : eq x x0
x,x0,y : Prop
*****
forall _ : or (eq x y) False, iff x0 y
+++++
idtac.
-----
Lemma all_equiv_trivial : forall x, all_equiv (x::nil).
Proof.
unfold all_equiv.
simpl.
induction 1.
idtac.

*****
H : eq x x0
x,x0,y : Prop
*****
forall _ : or (eq x y) False, iff x0 y
+++++
induction 1.
-----
Lemma all_equiv_trivial : forall x, all_equiv (x::nil).
Proof.
unfold all_equiv.
simpl.
induction 1.
idtac.
induction 1.

*****
H0 : eq x y
H : eq x x0
x,x0,y : Prop
*****
iff x0 y
+++++
idtac.
-----
Lemma all_equiv_trivial : forall x, all_equiv (x::nil).
Proof.
unfold all_equiv.
simpl.
induction 1.
idtac.
induction 1.
idtac.

*****
H0 : eq x y
H : eq x x0
x,x0,y : Prop
*****
iff x0 y
+++++
subst.
-----
Lemma all_equiv_trivial : forall x, all_equiv (x::nil).
Proof.
unfold all_equiv.
simpl.
induction 1.
idtac.
induction 1.
idtac.
subst.

*****
y : Prop
*****
iff y y
+++++
reflexivity.
-----
Lemma all_equiv_trivial : forall x, all_equiv (x::nil).
Proof.
unfold all_equiv.
simpl.
induction 1.
idtac.
induction 1.

*****
H0 : False
H : eq x x0
x,x0,y : Prop
*****
iff x0 y
+++++
contradiction.
-----
Lemma all_equiv_trivial : forall x, all_equiv (x::nil).
Proof.
unfold all_equiv.
simpl.
induction 1.

*****
H : False
x,x0,y : Prop
*****
forall _ : or (eq x y) False, iff x0 y
+++++
contradiction.
-----
Lemma all_equiv_trivial : forall x, all_equiv (x::nil).
Proof.
unfold all_equiv.
simpl.
induction 1.

*****

*****

+++++
Qed.
-----
Lemma incl_preserves_all_equiv : forall l1 l2,\n  incl l1 l2 -> all_equiv l2 -> all_equiv l1.
-----
Lemma incl_preserves_all_equiv : forall l1 l2, incl l1 l2 -> all_equiv l2 -> all_equiv l1.

*****

*****
forall (l1 l2 : list Prop) (_ : incl l1 l2) (_ : all_equiv l2), all_equiv l1
+++++
Proof.
-----
Lemma incl_preserves_all_equiv : forall l1 l2, incl l1 l2 -> all_equiv l2 -> all_equiv l1.
Proof.

*****

*****
forall (l1 l2 : list Prop) (_ : incl l1 l2) (_ : all_equiv l2), all_equiv l1
+++++
unfold all_equiv.
-----
Lemma incl_preserves_all_equiv : forall l1 l2, incl l1 l2 -> all_equiv l2 -> all_equiv l1.
Proof.
unfold all_equiv.

*****

*****
forall (l1 l2 : list Prop) (_ : incl l1 l2) (_ : forall (x y : Prop) (_ : In x l2) (_ : In y l2), iff x y) (x y : Prop) (_ : In x l1) (_ : In y l1), iff x y
+++++
intros.
-----
Lemma incl_preserves_all_equiv : forall l1 l2, incl l1 l2 -> all_equiv l2 -> all_equiv l1.
Proof.
unfold all_equiv.
intros.

*****
H2 : In y l1
H1 : In x l1
x,y : Prop
H0 : forall (x y : Prop) (_ : In x l2) (_ : In y l2), iff x y
H : incl l1 l2
l1,l2 : list Prop
*****
iff x y
+++++
eauto.
-----
Lemma incl_preserves_all_equiv : forall l1 l2, incl l1 l2 -> all_equiv l2 -> all_equiv l1.
Proof.
unfold all_equiv.
intros.
eauto.

*****

*****

+++++
Qed.
-----
Lemma incl_preserves_stronger : forall l1 l2 l1' l2',\n  incl l1 l1' -> incl l2 l2' -> stronger l1' l2' -> stronger l1 l2.
-----
Lemma incl_preserves_stronger : forall l1 l2 l1' l2', incl l1 l1' -> incl l2 l2' -> stronger l1' l2' -> stronger l1 l2.

*****

*****
forall (l1 l2 l1' l2' : list Prop) (_ : incl l1 l1') (_ : incl l2 l2') (_ : stronger l1' l2'), stronger l1 l2
+++++
Proof.
-----
Lemma incl_preserves_stronger : forall l1 l2 l1' l2', incl l1 l1' -> incl l2 l2' -> stronger l1' l2' -> stronger l1 l2.
Proof.

*****

*****
forall (l1 l2 l1' l2' : list Prop) (_ : incl l1 l1') (_ : incl l2 l2') (_ : stronger l1' l2'), stronger l1 l2
+++++
intros l1 l2 l1' l2' Hi1 Hi2 Hs x y Hxl1 Hyl2.
-----
Lemma incl_preserves_stronger : forall l1 l2 l1' l2', incl l1 l1' -> incl l2 l2' -> stronger l1' l2' -> stronger l1 l2.
Proof.
intros l1 l2 l1' l2' Hi1 Hi2 Hs x y Hxl1 Hyl2.

*****
Hyl2 : In y l2
Hxl1 : In x l1
x,y : Prop
Hs : stronger l1' l2'
Hi2 : incl l2 l2'
Hi1 : incl l1 l1'
l1,l2,l1',l2' : list Prop
*****
forall _ : x, y
+++++
apply Hs.
-----
Lemma incl_preserves_stronger : forall l1 l2 l1' l2', incl l1 l1' -> incl l2 l2' -> stronger l1' l2' -> stronger l1 l2.
Proof.
intros l1 l2 l1' l2' Hi1 Hi2 Hs x y Hxl1 Hyl2.
apply Hs.

*****
Hyl2 : In y l2
Hxl1 : In x l1
x,y : Prop
Hs : stronger l1' l2'
Hi2 : incl l2 l2'
Hi1 : incl l1 l1'
l1,l2,l1',l2' : list Prop
*****
In x l1'
+++++
auto.
-----
Lemma incl_preserves_stronger : forall l1 l2 l1' l2', incl l1 l1' -> incl l2 l2' -> stronger l1' l2' -> stronger l1 l2.
Proof.
intros l1 l2 l1' l2' Hi1 Hi2 Hs x y Hxl1 Hyl2.
apply Hs.

*****
Hyl2 : In y l2
Hxl1 : In x l1
x,y : Prop
Hs : stronger l1' l2'
Hi2 : incl l2 l2'
Hi1 : incl l1 l1'
l1,l2,l1',l2' : list Prop
*****
In y l2'
+++++
auto.
-----
Lemma incl_preserves_stronger : forall l1 l2 l1' l2', incl l1 l1' -> incl l2 l2' -> stronger l1' l2' -> stronger l1 l2.
Proof.
intros l1 l2 l1' l2' Hi1 Hi2 Hs x y Hxl1 Hyl2.
apply Hs.

*****

*****

+++++
Qed.
-----
Ltac inlist := simpl; repeat (try (left; reflexivity); right).
-----
