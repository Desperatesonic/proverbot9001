Require Export GeoCoq.Elements.OriginalProofs.lemma_paralleldef2B.
-----
Require Export GeoCoq.Elements.OriginalProofs.lemma_samesideflip.
-----
Require Export GeoCoq.Elements.OriginalProofs.proposition_29C.
-----
Require Export GeoCoq.Elements.OriginalProofs.lemma_supplements2.
-----
Require Export GeoCoq.Elements.OriginalProofs.lemma_samesidecollinear.
-----
Require Export GeoCoq.Elements.OriginalProofs.lemma_samesidetransitive.
-----
Require Export GeoCoq.Elements.OriginalProofs.proposition_28D.
-----
Section Euclid.
-----
Context `{Ax:area}.
-----
Lemma proposition_43B : \n   forall A B C D E F G H K, \n   PG A B C D -> BetS A H D -> BetS A E B -> BetS D F C -> BetS B G C -> PG E A H K -> PG G K F C ->\n   PG E K G B.
-----
Lemma proposition_43B : forall A B C D E F G H K, PG A B C D -> BetS A H D -> BetS A E B -> BetS D F C -> BetS B G C -> PG E A H K -> PG G K F C -> PG E K G B.

*****
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
forall (A B C D E F G H K : Point) (_ : PG A B C D) (_ : BetS A H D) (_ : BetS A E B) (_ : BetS D F C) (_ : BetS B G C) (_ : PG E A H K) (_ : PG G K F C), PG E K G B
+++++
Proof.
-----
Lemma proposition_43B : forall A B C D E F G H K, PG A B C D -> BetS A H D -> BetS A E B -> BetS D F C -> BetS B G C -> PG E A H K -> PG G K F C -> PG E K G B.
Proof.

*****
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
forall (A B C D E F G H K : Point) (_ : PG A B C D) (_ : BetS A H D) (_ : BetS A E B) (_ : BetS D F C) (_ : BetS B G C) (_ : PG E A H K) (_ : PG G K F C), PG E K G B
+++++
intros.
-----
Lemma proposition_43B : forall A B C D E F G H K, PG A B C D -> BetS A H D -> BetS A E B -> BetS D F C -> BetS B G C -> PG E A H K -> PG G K F C -> PG E K G B.
Proof.
intros.

*****
H6 : PG G K F C
H5 : PG E A H K
H4 : BetS B G C
H3 : BetS D F C
H2 : BetS A E B
H1 : BetS A H D
H0 : PG A B C D
A,B,C,D,E,F,G,H,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
PG E K G B
+++++
assert (Par A D B C) by (conclude_def PG ).
-----
Lemma proposition_43B : forall A B C D E F G H K, PG A B C D -> BetS A H D -> BetS A E B -> BetS D F C -> BetS B G C -> PG E A H K -> PG G K F C -> PG E K G B.
Proof.
intros.
assert (Par A D B C) by (conclude_def PG ).

*****
H7 : Par A D B C
H6 : PG G K F C
H5 : PG E A H K
H4 : BetS B G C
H3 : BetS D F C
H2 : BetS A E B
H1 : BetS A H D
H0 : PG A B C D
A,B,C,D,E,F,G,H,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
PG E K G B
+++++
assert (Par A B C D) by (conclude_def PG ).
-----
Lemma proposition_43B : forall A B C D E F G H K, PG A B C D -> BetS A H D -> BetS A E B -> BetS D F C -> BetS B G C -> PG E A H K -> PG G K F C -> PG E K G B.
Proof.
intros.
assert (Par A D B C) by (conclude_def PG ).
assert (Par A B C D) by (conclude_def PG ).

*****
H8 : Par A B C D
H7 : Par A D B C
H6 : PG G K F C
H5 : PG E A H K
H4 : BetS B G C
H3 : BetS D F C
H2 : BetS A E B
H1 : BetS A H D
H0 : PG A B C D
A,B,C,D,E,F,G,H,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
PG E K G B
+++++
assert (Par E A H K) by (conclude_def PG ).
-----
Lemma proposition_43B : forall A B C D E F G H K, PG A B C D -> BetS A H D -> BetS A E B -> BetS D F C -> BetS B G C -> PG E A H K -> PG G K F C -> PG E K G B.
Proof.
intros.
assert (Par A D B C) by (conclude_def PG ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par E A H K) by (conclude_def PG ).

*****
H9 : Par E A H K
H8 : Par A B C D
H7 : Par A D B C
H6 : PG G K F C
H5 : PG E A H K
H4 : BetS B G C
H3 : BetS D F C
H2 : BetS A E B
H1 : BetS A H D
H0 : PG A B C D
A,B,C,D,E,F,G,H,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
PG E K G B
+++++
assert (Par E K A H) by (conclude_def PG ).
-----
Lemma proposition_43B : forall A B C D E F G H K, PG A B C D -> BetS A H D -> BetS A E B -> BetS D F C -> BetS B G C -> PG E A H K -> PG G K F C -> PG E K G B.
Proof.
intros.
assert (Par A D B C) by (conclude_def PG ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par E A H K) by (conclude_def PG ).
assert (Par E K A H) by (conclude_def PG ).

*****
H10 : Par E K A H
H9 : Par E A H K
H8 : Par A B C D
H7 : Par A D B C
H6 : PG G K F C
H5 : PG E A H K
H4 : BetS B G C
H3 : BetS D F C
H2 : BetS A E B
H1 : BetS A H D
H0 : PG A B C D
A,B,C,D,E,F,G,H,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
PG E K G B
+++++
assert (Par G K F C) by (conclude_def PG ).
-----
Lemma proposition_43B : forall A B C D E F G H K, PG A B C D -> BetS A H D -> BetS A E B -> BetS D F C -> BetS B G C -> PG E A H K -> PG G K F C -> PG E K G B.
Proof.
intros.
assert (Par A D B C) by (conclude_def PG ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par E A H K) by (conclude_def PG ).
assert (Par E K A H) by (conclude_def PG ).
assert (Par G K F C) by (conclude_def PG ).

*****
H11 : Par G K F C
H10 : Par E K A H
H9 : Par E A H K
H8 : Par A B C D
H7 : Par A D B C
H6 : PG G K F C
H5 : PG E A H K
H4 : BetS B G C
H3 : BetS D F C
H2 : BetS A E B
H1 : BetS A H D
H0 : PG A B C D
A,B,C,D,E,F,G,H,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
PG E K G B
+++++
assert (Par F C G K) by (conclude lemma_parallelsymmetric).
-----
Lemma proposition_43B : forall A B C D E F G H K, PG A B C D -> BetS A H D -> BetS A E B -> BetS D F C -> BetS B G C -> PG E A H K -> PG G K F C -> PG E K G B.
Proof.
intros.
assert (Par A D B C) by (conclude_def PG ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par E A H K) by (conclude_def PG ).
assert (Par E K A H) by (conclude_def PG ).
assert (Par G K F C) by (conclude_def PG ).
assert (Par F C G K) by (conclude lemma_parallelsymmetric).

*****
H12 : Par F C G K
H11 : Par G K F C
H10 : Par E K A H
H9 : Par E A H K
H8 : Par A B C D
H7 : Par A D B C
H6 : PG G K F C
H5 : PG E A H K
H4 : BetS B G C
H3 : BetS D F C
H2 : BetS A E B
H1 : BetS A H D
H0 : PG A B C D
A,B,C,D,E,F,G,H,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
PG E K G B
+++++
assert (Par C F G K) by (forward_using lemma_parallelflip).
-----
Lemma proposition_43B : forall A B C D E F G H K, PG A B C D -> BetS A H D -> BetS A E B -> BetS D F C -> BetS B G C -> PG E A H K -> PG G K F C -> PG E K G B.
Proof.
intros.
assert (Par A D B C) by (conclude_def PG ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par E A H K) by (conclude_def PG ).
assert (Par E K A H) by (conclude_def PG ).
assert (Par G K F C) by (conclude_def PG ).
assert (Par F C G K) by (conclude lemma_parallelsymmetric).
assert (Par C F G K) by (forward_using lemma_parallelflip).

*****
H13 : Par C F G K
H12 : Par F C G K
H11 : Par G K F C
H10 : Par E K A H
H9 : Par E A H K
H8 : Par A B C D
H7 : Par A D B C
H6 : PG G K F C
H5 : PG E A H K
H4 : BetS B G C
H3 : BetS D F C
H2 : BetS A E B
H1 : BetS A H D
H0 : PG A B C D
A,B,C,D,E,F,G,H,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
PG E K G B
+++++
assert (Par G C K F) by (conclude_def PG ).
-----
Lemma proposition_43B : forall A B C D E F G H K, PG A B C D -> BetS A H D -> BetS A E B -> BetS D F C -> BetS B G C -> PG E A H K -> PG G K F C -> PG E K G B.
Proof.
intros.
assert (Par A D B C) by (conclude_def PG ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par E A H K) by (conclude_def PG ).
assert (Par E K A H) by (conclude_def PG ).
assert (Par G K F C) by (conclude_def PG ).
assert (Par F C G K) by (conclude lemma_parallelsymmetric).
assert (Par C F G K) by (forward_using lemma_parallelflip).
assert (Par G C K F) by (conclude_def PG ).

*****
H14 : Par G C K F
H13 : Par C F G K
H12 : Par F C G K
H11 : Par G K F C
H10 : Par E K A H
H9 : Par E A H K
H8 : Par A B C D
H7 : Par A D B C
H6 : PG G K F C
H5 : PG E A H K
H4 : BetS B G C
H3 : BetS D F C
H2 : BetS A E B
H1 : BetS A H D
H0 : PG A B C D
A,B,C,D,E,F,G,H,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
PG E K G B
+++++
assert (Par B C A D) by (conclude lemma_parallelsymmetric).
-----
Lemma proposition_43B : forall A B C D E F G H K, PG A B C D -> BetS A H D -> BetS A E B -> BetS D F C -> BetS B G C -> PG E A H K -> PG G K F C -> PG E K G B.
Proof.
intros.
assert (Par A D B C) by (conclude_def PG ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par E A H K) by (conclude_def PG ).
assert (Par E K A H) by (conclude_def PG ).
assert (Par G K F C) by (conclude_def PG ).
assert (Par F C G K) by (conclude lemma_parallelsymmetric).
assert (Par C F G K) by (forward_using lemma_parallelflip).
assert (Par G C K F) by (conclude_def PG ).
assert (Par B C A D) by (conclude lemma_parallelsymmetric).

*****
H15 : Par B C A D
H14 : Par G C K F
H13 : Par C F G K
H12 : Par F C G K
H11 : Par G K F C
H10 : Par E K A H
H9 : Par E A H K
H8 : Par A B C D
H7 : Par A D B C
H6 : PG G K F C
H5 : PG E A H K
H4 : BetS B G C
H3 : BetS D F C
H2 : BetS A E B
H1 : BetS A H D
H0 : PG A B C D
A,B,C,D,E,F,G,H,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
PG E K G B
+++++
assert (Par C D A B) by (conclude lemma_parallelsymmetric).
-----
Lemma proposition_43B : forall A B C D E F G H K, PG A B C D -> BetS A H D -> BetS A E B -> BetS D F C -> BetS B G C -> PG E A H K -> PG G K F C -> PG E K G B.
Proof.
intros.
assert (Par A D B C) by (conclude_def PG ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par E A H K) by (conclude_def PG ).
assert (Par E K A H) by (conclude_def PG ).
assert (Par G K F C) by (conclude_def PG ).
assert (Par F C G K) by (conclude lemma_parallelsymmetric).
assert (Par C F G K) by (forward_using lemma_parallelflip).
assert (Par G C K F) by (conclude_def PG ).
assert (Par B C A D) by (conclude lemma_parallelsymmetric).
assert (Par C D A B) by (conclude lemma_parallelsymmetric).

*****
H16 : Par C D A B
H15 : Par B C A D
H14 : Par G C K F
H13 : Par C F G K
H12 : Par F C G K
H11 : Par G K F C
H10 : Par E K A H
H9 : Par E A H K
H8 : Par A B C D
H7 : Par A D B C
H6 : PG G K F C
H5 : PG E A H K
H4 : BetS B G C
H3 : BetS D F C
H2 : BetS A E B
H1 : BetS A H D
H0 : PG A B C D
A,B,C,D,E,F,G,H,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
PG E K G B
+++++
assert (Par A H E K) by (conclude lemma_parallelsymmetric).
-----
Lemma proposition_43B : forall A B C D E F G H K, PG A B C D -> BetS A H D -> BetS A E B -> BetS D F C -> BetS B G C -> PG E A H K -> PG G K F C -> PG E K G B.
Proof.
intros.
assert (Par A D B C) by (conclude_def PG ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par E A H K) by (conclude_def PG ).
assert (Par E K A H) by (conclude_def PG ).
assert (Par G K F C) by (conclude_def PG ).
assert (Par F C G K) by (conclude lemma_parallelsymmetric).
assert (Par C F G K) by (forward_using lemma_parallelflip).
assert (Par G C K F) by (conclude_def PG ).
assert (Par B C A D) by (conclude lemma_parallelsymmetric).
assert (Par C D A B) by (conclude lemma_parallelsymmetric).
assert (Par A H E K) by (conclude lemma_parallelsymmetric).

*****
H17 : Par A H E K
H16 : Par C D A B
H15 : Par B C A D
H14 : Par G C K F
H13 : Par C F G K
H12 : Par F C G K
H11 : Par G K F C
H10 : Par E K A H
H9 : Par E A H K
H8 : Par A B C D
H7 : Par A D B C
H6 : PG G K F C
H5 : PG E A H K
H4 : BetS B G C
H3 : BetS D F C
H2 : BetS A E B
H1 : BetS A H D
H0 : PG A B C D
A,B,C,D,E,F,G,H,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
PG E K G B
+++++
assert (TP A B C D) by (conclude lemma_paralleldef2B).
-----
Lemma proposition_43B : forall A B C D E F G H K, PG A B C D -> BetS A H D -> BetS A E B -> BetS D F C -> BetS B G C -> PG E A H K -> PG G K F C -> PG E K G B.
Proof.
intros.
assert (Par A D B C) by (conclude_def PG ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par E A H K) by (conclude_def PG ).
assert (Par E K A H) by (conclude_def PG ).
assert (Par G K F C) by (conclude_def PG ).
assert (Par F C G K) by (conclude lemma_parallelsymmetric).
assert (Par C F G K) by (forward_using lemma_parallelflip).
assert (Par G C K F) by (conclude_def PG ).
assert (Par B C A D) by (conclude lemma_parallelsymmetric).
assert (Par C D A B) by (conclude lemma_parallelsymmetric).
assert (Par A H E K) by (conclude lemma_parallelsymmetric).
assert (TP A B C D) by (conclude lemma_paralleldef2B).

*****
H18 : TP A B C D
H17 : Par A H E K
H16 : Par C D A B
H15 : Par B C A D
H14 : Par G C K F
H13 : Par C F G K
H12 : Par F C G K
H11 : Par G K F C
H10 : Par E K A H
H9 : Par E A H K
H8 : Par A B C D
H7 : Par A D B C
H6 : PG G K F C
H5 : PG E A H K
H4 : BetS B G C
H3 : BetS D F C
H2 : BetS A E B
H1 : BetS A H D
H0 : PG A B C D
A,B,C,D,E,F,G,H,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
PG E K G B
+++++
assert (TP E A H K) by (conclude lemma_paralleldef2B).
-----
Lemma proposition_43B : forall A B C D E F G H K, PG A B C D -> BetS A H D -> BetS A E B -> BetS D F C -> BetS B G C -> PG E A H K -> PG G K F C -> PG E K G B.
Proof.
intros.
assert (Par A D B C) by (conclude_def PG ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par E A H K) by (conclude_def PG ).
assert (Par E K A H) by (conclude_def PG ).
assert (Par G K F C) by (conclude_def PG ).
assert (Par F C G K) by (conclude lemma_parallelsymmetric).
assert (Par C F G K) by (forward_using lemma_parallelflip).
assert (Par G C K F) by (conclude_def PG ).
assert (Par B C A D) by (conclude lemma_parallelsymmetric).
assert (Par C D A B) by (conclude lemma_parallelsymmetric).
assert (Par A H E K) by (conclude lemma_parallelsymmetric).
assert (TP A B C D) by (conclude lemma_paralleldef2B).
assert (TP E A H K) by (conclude lemma_paralleldef2B).

*****
H19 : TP E A H K
H18 : TP A B C D
H17 : Par A H E K
H16 : Par C D A B
H15 : Par B C A D
H14 : Par G C K F
H13 : Par C F G K
H12 : Par F C G K
H11 : Par G K F C
H10 : Par E K A H
H9 : Par E A H K
H8 : Par A B C D
H7 : Par A D B C
H6 : PG G K F C
H5 : PG E A H K
H4 : BetS B G C
H3 : BetS D F C
H2 : BetS A E B
H1 : BetS A H D
H0 : PG A B C D
A,B,C,D,E,F,G,H,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
PG E K G B
+++++
assert (TP G C K F) by (conclude lemma_paralleldef2B).
-----
Lemma proposition_43B : forall A B C D E F G H K, PG A B C D -> BetS A H D -> BetS A E B -> BetS D F C -> BetS B G C -> PG E A H K -> PG G K F C -> PG E K G B.
Proof.
intros.
assert (Par A D B C) by (conclude_def PG ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par E A H K) by (conclude_def PG ).
assert (Par E K A H) by (conclude_def PG ).
assert (Par G K F C) by (conclude_def PG ).
assert (Par F C G K) by (conclude lemma_parallelsymmetric).
assert (Par C F G K) by (forward_using lemma_parallelflip).
assert (Par G C K F) by (conclude_def PG ).
assert (Par B C A D) by (conclude lemma_parallelsymmetric).
assert (Par C D A B) by (conclude lemma_parallelsymmetric).
assert (Par A H E K) by (conclude lemma_parallelsymmetric).
assert (TP A B C D) by (conclude lemma_paralleldef2B).
assert (TP E A H K) by (conclude lemma_paralleldef2B).
assert (TP G C K F) by (conclude lemma_paralleldef2B).

*****
H20 : TP G C K F
H19 : TP E A H K
H18 : TP A B C D
H17 : Par A H E K
H16 : Par C D A B
H15 : Par B C A D
H14 : Par G C K F
H13 : Par C F G K
H12 : Par F C G K
H11 : Par G K F C
H10 : Par E K A H
H9 : Par E A H K
H8 : Par A B C D
H7 : Par A D B C
H6 : PG G K F C
H5 : PG E A H K
H4 : BetS B G C
H3 : BetS D F C
H2 : BetS A E B
H1 : BetS A H D
H0 : PG A B C D
A,B,C,D,E,F,G,H,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
PG E K G B
+++++
assert (TP B C A D) by (conclude lemma_paralleldef2B).
-----
Lemma proposition_43B : forall A B C D E F G H K, PG A B C D -> BetS A H D -> BetS A E B -> BetS D F C -> BetS B G C -> PG E A H K -> PG G K F C -> PG E K G B.
Proof.
intros.
assert (Par A D B C) by (conclude_def PG ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par E A H K) by (conclude_def PG ).
assert (Par E K A H) by (conclude_def PG ).
assert (Par G K F C) by (conclude_def PG ).
assert (Par F C G K) by (conclude lemma_parallelsymmetric).
assert (Par C F G K) by (forward_using lemma_parallelflip).
assert (Par G C K F) by (conclude_def PG ).
assert (Par B C A D) by (conclude lemma_parallelsymmetric).
assert (Par C D A B) by (conclude lemma_parallelsymmetric).
assert (Par A H E K) by (conclude lemma_parallelsymmetric).
assert (TP A B C D) by (conclude lemma_paralleldef2B).
assert (TP E A H K) by (conclude lemma_paralleldef2B).
assert (TP G C K F) by (conclude lemma_paralleldef2B).
assert (TP B C A D) by (conclude lemma_paralleldef2B).

*****
H21 : TP B C A D
H20 : TP G C K F
H19 : TP E A H K
H18 : TP A B C D
H17 : Par A H E K
H16 : Par C D A B
H15 : Par B C A D
H14 : Par G C K F
H13 : Par C F G K
H12 : Par F C G K
H11 : Par G K F C
H10 : Par E K A H
H9 : Par E A H K
H8 : Par A B C D
H7 : Par A D B C
H6 : PG G K F C
H5 : PG E A H K
H4 : BetS B G C
H3 : BetS D F C
H2 : BetS A E B
H1 : BetS A H D
H0 : PG A B C D
A,B,C,D,E,F,G,H,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
PG E K G B
+++++
assert (OS A D B C) by (conclude_def TP ).
-----
Lemma proposition_43B : forall A B C D E F G H K, PG A B C D -> BetS A H D -> BetS A E B -> BetS D F C -> BetS B G C -> PG E A H K -> PG G K F C -> PG E K G B.
Proof.
intros.
assert (Par A D B C) by (conclude_def PG ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par E A H K) by (conclude_def PG ).
assert (Par E K A H) by (conclude_def PG ).
assert (Par G K F C) by (conclude_def PG ).
assert (Par F C G K) by (conclude lemma_parallelsymmetric).
assert (Par C F G K) by (forward_using lemma_parallelflip).
assert (Par G C K F) by (conclude_def PG ).
assert (Par B C A D) by (conclude lemma_parallelsymmetric).
assert (Par C D A B) by (conclude lemma_parallelsymmetric).
assert (Par A H E K) by (conclude lemma_parallelsymmetric).
assert (TP A B C D) by (conclude lemma_paralleldef2B).
assert (TP E A H K) by (conclude lemma_paralleldef2B).
assert (TP G C K F) by (conclude lemma_paralleldef2B).
assert (TP B C A D) by (conclude lemma_paralleldef2B).
assert (OS A D B C) by (conclude_def TP ).

*****
H22 : OS A D B C
H21 : TP B C A D
H20 : TP G C K F
H19 : TP E A H K
H18 : TP A B C D
H17 : Par A H E K
H16 : Par C D A B
H15 : Par B C A D
H14 : Par G C K F
H13 : Par C F G K
H12 : Par F C G K
H11 : Par G K F C
H10 : Par E K A H
H9 : Par E A H K
H8 : Par A B C D
H7 : Par A D B C
H6 : PG G K F C
H5 : PG E A H K
H4 : BetS B G C
H3 : BetS D F C
H2 : BetS A E B
H1 : BetS A H D
H0 : PG A B C D
A,B,C,D,E,F,G,H,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
PG E K G B
+++++
assert (OS A D C B) by (conclude lemma_samesideflip).
-----
Lemma proposition_43B : forall A B C D E F G H K, PG A B C D -> BetS A H D -> BetS A E B -> BetS D F C -> BetS B G C -> PG E A H K -> PG G K F C -> PG E K G B.
Proof.
intros.
assert (Par A D B C) by (conclude_def PG ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par E A H K) by (conclude_def PG ).
assert (Par E K A H) by (conclude_def PG ).
assert (Par G K F C) by (conclude_def PG ).
assert (Par F C G K) by (conclude lemma_parallelsymmetric).
assert (Par C F G K) by (forward_using lemma_parallelflip).
assert (Par G C K F) by (conclude_def PG ).
assert (Par B C A D) by (conclude lemma_parallelsymmetric).
assert (Par C D A B) by (conclude lemma_parallelsymmetric).
assert (Par A H E K) by (conclude lemma_parallelsymmetric).
assert (TP A B C D) by (conclude lemma_paralleldef2B).
assert (TP E A H K) by (conclude lemma_paralleldef2B).
assert (TP G C K F) by (conclude lemma_paralleldef2B).
assert (TP B C A D) by (conclude lemma_paralleldef2B).
assert (OS A D B C) by (conclude_def TP ).
assert (OS A D C B) by (conclude lemma_samesideflip).

*****
H23 : OS A D C B
H22 : OS A D B C
H21 : TP B C A D
H20 : TP G C K F
H19 : TP E A H K
H18 : TP A B C D
H17 : Par A H E K
H16 : Par C D A B
H15 : Par B C A D
H14 : Par G C K F
H13 : Par C F G K
H12 : Par F C G K
H11 : Par G K F C
H10 : Par E K A H
H9 : Par E A H K
H8 : Par A B C D
H7 : Par A D B C
H6 : PG G K F C
H5 : PG E A H K
H4 : BetS B G C
H3 : BetS D F C
H2 : BetS A E B
H1 : BetS A H D
H0 : PG A B C D
A,B,C,D,E,F,G,H,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
PG E K G B
+++++
assert (OS D A C B) by (forward_using lemma_samesidesymmetric).
-----
Lemma proposition_43B : forall A B C D E F G H K, PG A B C D -> BetS A H D -> BetS A E B -> BetS D F C -> BetS B G C -> PG E A H K -> PG G K F C -> PG E K G B.
Proof.
intros.
assert (Par A D B C) by (conclude_def PG ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par E A H K) by (conclude_def PG ).
assert (Par E K A H) by (conclude_def PG ).
assert (Par G K F C) by (conclude_def PG ).
assert (Par F C G K) by (conclude lemma_parallelsymmetric).
assert (Par C F G K) by (forward_using lemma_parallelflip).
assert (Par G C K F) by (conclude_def PG ).
assert (Par B C A D) by (conclude lemma_parallelsymmetric).
assert (Par C D A B) by (conclude lemma_parallelsymmetric).
assert (Par A H E K) by (conclude lemma_parallelsymmetric).
assert (TP A B C D) by (conclude lemma_paralleldef2B).
assert (TP E A H K) by (conclude lemma_paralleldef2B).
assert (TP G C K F) by (conclude lemma_paralleldef2B).
assert (TP B C A D) by (conclude lemma_paralleldef2B).
assert (OS A D B C) by (conclude_def TP ).
assert (OS A D C B) by (conclude lemma_samesideflip).
assert (OS D A C B) by (forward_using lemma_samesidesymmetric).

*****
H24 : OS D A C B
H23 : OS A D C B
H22 : OS A D B C
H21 : TP B C A D
H20 : TP G C K F
H19 : TP E A H K
H18 : TP A B C D
H17 : Par A H E K
H16 : Par C D A B
H15 : Par B C A D
H14 : Par G C K F
H13 : Par C F G K
H12 : Par F C G K
H11 : Par G K F C
H10 : Par E K A H
H9 : Par E A H K
H8 : Par A B C D
H7 : Par A D B C
H6 : PG G K F C
H5 : PG E A H K
H4 : BetS B G C
H3 : BetS D F C
H2 : BetS A E B
H1 : BetS A H D
H0 : PG A B C D
A,B,C,D,E,F,G,H,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
PG E K G B
+++++
assert (OS C D A B) by (conclude_def TP ).
-----
Lemma proposition_43B : forall A B C D E F G H K, PG A B C D -> BetS A H D -> BetS A E B -> BetS D F C -> BetS B G C -> PG E A H K -> PG G K F C -> PG E K G B.
Proof.
intros.
assert (Par A D B C) by (conclude_def PG ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par E A H K) by (conclude_def PG ).
assert (Par E K A H) by (conclude_def PG ).
assert (Par G K F C) by (conclude_def PG ).
assert (Par F C G K) by (conclude lemma_parallelsymmetric).
assert (Par C F G K) by (forward_using lemma_parallelflip).
assert (Par G C K F) by (conclude_def PG ).
assert (Par B C A D) by (conclude lemma_parallelsymmetric).
assert (Par C D A B) by (conclude lemma_parallelsymmetric).
assert (Par A H E K) by (conclude lemma_parallelsymmetric).
assert (TP A B C D) by (conclude lemma_paralleldef2B).
assert (TP E A H K) by (conclude lemma_paralleldef2B).
assert (TP G C K F) by (conclude lemma_paralleldef2B).
assert (TP B C A D) by (conclude lemma_paralleldef2B).
assert (OS A D B C) by (conclude_def TP ).
assert (OS A D C B) by (conclude lemma_samesideflip).
assert (OS D A C B) by (forward_using lemma_samesidesymmetric).
assert (OS C D A B) by (conclude_def TP ).

*****
H25 : OS C D A B
H24 : OS D A C B
H23 : OS A D C B
H22 : OS A D B C
H21 : TP B C A D
H20 : TP G C K F
H19 : TP E A H K
H18 : TP A B C D
H17 : Par A H E K
H16 : Par C D A B
H15 : Par B C A D
H14 : Par G C K F
H13 : Par C F G K
H12 : Par F C G K
H11 : Par G K F C
H10 : Par E K A H
H9 : Par E A H K
H8 : Par A B C D
H7 : Par A D B C
H6 : PG G K F C
H5 : PG E A H K
H4 : BetS B G C
H3 : BetS D F C
H2 : BetS A E B
H1 : BetS A H D
H0 : PG A B C D
A,B,C,D,E,F,G,H,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
PG E K G B
+++++
assert (OS H K E A) by (conclude_def TP ).
-----
Lemma proposition_43B : forall A B C D E F G H K, PG A B C D -> BetS A H D -> BetS A E B -> BetS D F C -> BetS B G C -> PG E A H K -> PG G K F C -> PG E K G B.
Proof.
intros.
assert (Par A D B C) by (conclude_def PG ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par E A H K) by (conclude_def PG ).
assert (Par E K A H) by (conclude_def PG ).
assert (Par G K F C) by (conclude_def PG ).
assert (Par F C G K) by (conclude lemma_parallelsymmetric).
assert (Par C F G K) by (forward_using lemma_parallelflip).
assert (Par G C K F) by (conclude_def PG ).
assert (Par B C A D) by (conclude lemma_parallelsymmetric).
assert (Par C D A B) by (conclude lemma_parallelsymmetric).
assert (Par A H E K) by (conclude lemma_parallelsymmetric).
assert (TP A B C D) by (conclude lemma_paralleldef2B).
assert (TP E A H K) by (conclude lemma_paralleldef2B).
assert (TP G C K F) by (conclude lemma_paralleldef2B).
assert (TP B C A D) by (conclude lemma_paralleldef2B).
assert (OS A D B C) by (conclude_def TP ).
assert (OS A D C B) by (conclude lemma_samesideflip).
assert (OS D A C B) by (forward_using lemma_samesidesymmetric).
assert (OS C D A B) by (conclude_def TP ).
assert (OS H K E A) by (conclude_def TP ).

*****
H26 : OS H K E A
H25 : OS C D A B
H24 : OS D A C B
H23 : OS A D C B
H22 : OS A D B C
H21 : TP B C A D
H20 : TP G C K F
H19 : TP E A H K
H18 : TP A B C D
H17 : Par A H E K
H16 : Par C D A B
H15 : Par B C A D
H14 : Par G C K F
H13 : Par C F G K
H12 : Par F C G K
H11 : Par G K F C
H10 : Par E K A H
H9 : Par E A H K
H8 : Par A B C D
H7 : Par A D B C
H6 : PG G K F C
H5 : PG E A H K
H4 : BetS B G C
H3 : BetS D F C
H2 : BetS A E B
H1 : BetS A H D
H0 : PG A B C D
A,B,C,D,E,F,G,H,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
PG E K G B
+++++
assert (OS K F G C) by (conclude_def TP ).
-----
Lemma proposition_43B : forall A B C D E F G H K, PG A B C D -> BetS A H D -> BetS A E B -> BetS D F C -> BetS B G C -> PG E A H K -> PG G K F C -> PG E K G B.
Proof.
intros.
assert (Par A D B C) by (conclude_def PG ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par E A H K) by (conclude_def PG ).
assert (Par E K A H) by (conclude_def PG ).
assert (Par G K F C) by (conclude_def PG ).
assert (Par F C G K) by (conclude lemma_parallelsymmetric).
assert (Par C F G K) by (forward_using lemma_parallelflip).
assert (Par G C K F) by (conclude_def PG ).
assert (Par B C A D) by (conclude lemma_parallelsymmetric).
assert (Par C D A B) by (conclude lemma_parallelsymmetric).
assert (Par A H E K) by (conclude lemma_parallelsymmetric).
assert (TP A B C D) by (conclude lemma_paralleldef2B).
assert (TP E A H K) by (conclude lemma_paralleldef2B).
assert (TP G C K F) by (conclude lemma_paralleldef2B).
assert (TP B C A D) by (conclude lemma_paralleldef2B).
assert (OS A D B C) by (conclude_def TP ).
assert (OS A D C B) by (conclude lemma_samesideflip).
assert (OS D A C B) by (forward_using lemma_samesidesymmetric).
assert (OS C D A B) by (conclude_def TP ).
assert (OS H K E A) by (conclude_def TP ).
assert (OS K F G C) by (conclude_def TP ).

*****
H27 : OS K F G C
H26 : OS H K E A
H25 : OS C D A B
H24 : OS D A C B
H23 : OS A D C B
H22 : OS A D B C
H21 : TP B C A D
H20 : TP G C K F
H19 : TP E A H K
H18 : TP A B C D
H17 : Par A H E K
H16 : Par C D A B
H15 : Par B C A D
H14 : Par G C K F
H13 : Par C F G K
H12 : Par F C G K
H11 : Par G K F C
H10 : Par E K A H
H9 : Par E A H K
H8 : Par A B C D
H7 : Par A D B C
H6 : PG G K F C
H5 : PG E A H K
H4 : BetS B G C
H3 : BetS D F C
H2 : BetS A E B
H1 : BetS A H D
H0 : PG A B C D
A,B,C,D,E,F,G,H,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
PG E K G B
+++++
assert (neq A E) by (forward_using lemma_betweennotequal).
-----
Lemma proposition_43B : forall A B C D E F G H K, PG A B C D -> BetS A H D -> BetS A E B -> BetS D F C -> BetS B G C -> PG E A H K -> PG G K F C -> PG E K G B.
Proof.
intros.
assert (Par A D B C) by (conclude_def PG ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par E A H K) by (conclude_def PG ).
assert (Par E K A H) by (conclude_def PG ).
assert (Par G K F C) by (conclude_def PG ).
assert (Par F C G K) by (conclude lemma_parallelsymmetric).
assert (Par C F G K) by (forward_using lemma_parallelflip).
assert (Par G C K F) by (conclude_def PG ).
assert (Par B C A D) by (conclude lemma_parallelsymmetric).
assert (Par C D A B) by (conclude lemma_parallelsymmetric).
assert (Par A H E K) by (conclude lemma_parallelsymmetric).
assert (TP A B C D) by (conclude lemma_paralleldef2B).
assert (TP E A H K) by (conclude lemma_paralleldef2B).
assert (TP G C K F) by (conclude lemma_paralleldef2B).
assert (TP B C A D) by (conclude lemma_paralleldef2B).
assert (OS A D B C) by (conclude_def TP ).
assert (OS A D C B) by (conclude lemma_samesideflip).
assert (OS D A C B) by (forward_using lemma_samesidesymmetric).
assert (OS C D A B) by (conclude_def TP ).
assert (OS H K E A) by (conclude_def TP ).
assert (OS K F G C) by (conclude_def TP ).
assert (neq A E) by (forward_using lemma_betweennotequal).

*****
H28 : neq A E
H27 : OS K F G C
H26 : OS H K E A
H25 : OS C D A B
H24 : OS D A C B
H23 : OS A D C B
H22 : OS A D B C
H21 : TP B C A D
H20 : TP G C K F
H19 : TP E A H K
H18 : TP A B C D
H17 : Par A H E K
H16 : Par C D A B
H15 : Par B C A D
H14 : Par G C K F
H13 : Par C F G K
H12 : Par F C G K
H11 : Par G K F C
H10 : Par E K A H
H9 : Par E A H K
H8 : Par A B C D
H7 : Par A D B C
H6 : PG G K F C
H5 : PG E A H K
H4 : BetS B G C
H3 : BetS D F C
H2 : BetS A E B
H1 : BetS A H D
H0 : PG A B C D
A,B,C,D,E,F,G,H,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
PG E K G B
+++++
assert (neq A H) by (forward_using lemma_betweennotequal).
-----
Lemma proposition_43B : forall A B C D E F G H K, PG A B C D -> BetS A H D -> BetS A E B -> BetS D F C -> BetS B G C -> PG E A H K -> PG G K F C -> PG E K G B.
Proof.
intros.
assert (Par A D B C) by (conclude_def PG ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par E A H K) by (conclude_def PG ).
assert (Par E K A H) by (conclude_def PG ).
assert (Par G K F C) by (conclude_def PG ).
assert (Par F C G K) by (conclude lemma_parallelsymmetric).
assert (Par C F G K) by (forward_using lemma_parallelflip).
assert (Par G C K F) by (conclude_def PG ).
assert (Par B C A D) by (conclude lemma_parallelsymmetric).
assert (Par C D A B) by (conclude lemma_parallelsymmetric).
assert (Par A H E K) by (conclude lemma_parallelsymmetric).
assert (TP A B C D) by (conclude lemma_paralleldef2B).
assert (TP E A H K) by (conclude lemma_paralleldef2B).
assert (TP G C K F) by (conclude lemma_paralleldef2B).
assert (TP B C A D) by (conclude lemma_paralleldef2B).
assert (OS A D B C) by (conclude_def TP ).
assert (OS A D C B) by (conclude lemma_samesideflip).
assert (OS D A C B) by (forward_using lemma_samesidesymmetric).
assert (OS C D A B) by (conclude_def TP ).
assert (OS H K E A) by (conclude_def TP ).
assert (OS K F G C) by (conclude_def TP ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (neq A H) by (forward_using lemma_betweennotequal).

*****
H29 : neq A H
H28 : neq A E
H27 : OS K F G C
H26 : OS H K E A
H25 : OS C D A B
H24 : OS D A C B
H23 : OS A D C B
H22 : OS A D B C
H21 : TP B C A D
H20 : TP G C K F
H19 : TP E A H K
H18 : TP A B C D
H17 : Par A H E K
H16 : Par C D A B
H15 : Par B C A D
H14 : Par G C K F
H13 : Par C F G K
H12 : Par F C G K
H11 : Par G K F C
H10 : Par E K A H
H9 : Par E A H K
H8 : Par A B C D
H7 : Par A D B C
H6 : PG G K F C
H5 : PG E A H K
H4 : BetS B G C
H3 : BetS D F C
H2 : BetS A E B
H1 : BetS A H D
H0 : PG A B C D
A,B,C,D,E,F,G,H,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
PG E K G B
+++++
assert (neq B G) by (forward_using lemma_betweennotequal).
-----
Lemma proposition_43B : forall A B C D E F G H K, PG A B C D -> BetS A H D -> BetS A E B -> BetS D F C -> BetS B G C -> PG E A H K -> PG G K F C -> PG E K G B.
Proof.
intros.
assert (Par A D B C) by (conclude_def PG ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par E A H K) by (conclude_def PG ).
assert (Par E K A H) by (conclude_def PG ).
assert (Par G K F C) by (conclude_def PG ).
assert (Par F C G K) by (conclude lemma_parallelsymmetric).
assert (Par C F G K) by (forward_using lemma_parallelflip).
assert (Par G C K F) by (conclude_def PG ).
assert (Par B C A D) by (conclude lemma_parallelsymmetric).
assert (Par C D A B) by (conclude lemma_parallelsymmetric).
assert (Par A H E K) by (conclude lemma_parallelsymmetric).
assert (TP A B C D) by (conclude lemma_paralleldef2B).
assert (TP E A H K) by (conclude lemma_paralleldef2B).
assert (TP G C K F) by (conclude lemma_paralleldef2B).
assert (TP B C A D) by (conclude lemma_paralleldef2B).
assert (OS A D B C) by (conclude_def TP ).
assert (OS A D C B) by (conclude lemma_samesideflip).
assert (OS D A C B) by (forward_using lemma_samesidesymmetric).
assert (OS C D A B) by (conclude_def TP ).
assert (OS H K E A) by (conclude_def TP ).
assert (OS K F G C) by (conclude_def TP ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (neq A H) by (forward_using lemma_betweennotequal).
assert (neq B G) by (forward_using lemma_betweennotequal).

*****
H30 : neq B G
H29 : neq A H
H28 : neq A E
H27 : OS K F G C
H26 : OS H K E A
H25 : OS C D A B
H24 : OS D A C B
H23 : OS A D C B
H22 : OS A D B C
H21 : TP B C A D
H20 : TP G C K F
H19 : TP E A H K
H18 : TP A B C D
H17 : Par A H E K
H16 : Par C D A B
H15 : Par B C A D
H14 : Par G C K F
H13 : Par C F G K
H12 : Par F C G K
H11 : Par G K F C
H10 : Par E K A H
H9 : Par E A H K
H8 : Par A B C D
H7 : Par A D B C
H6 : PG G K F C
H5 : PG E A H K
H4 : BetS B G C
H3 : BetS D F C
H2 : BetS A E B
H1 : BetS A H D
H0 : PG A B C D
A,B,C,D,E,F,G,H,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
PG E K G B
+++++
assert (neq A B) by (forward_using lemma_betweennotequal).
-----
Lemma proposition_43B : forall A B C D E F G H K, PG A B C D -> BetS A H D -> BetS A E B -> BetS D F C -> BetS B G C -> PG E A H K -> PG G K F C -> PG E K G B.
Proof.
intros.
assert (Par A D B C) by (conclude_def PG ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par E A H K) by (conclude_def PG ).
assert (Par E K A H) by (conclude_def PG ).
assert (Par G K F C) by (conclude_def PG ).
assert (Par F C G K) by (conclude lemma_parallelsymmetric).
assert (Par C F G K) by (forward_using lemma_parallelflip).
assert (Par G C K F) by (conclude_def PG ).
assert (Par B C A D) by (conclude lemma_parallelsymmetric).
assert (Par C D A B) by (conclude lemma_parallelsymmetric).
assert (Par A H E K) by (conclude lemma_parallelsymmetric).
assert (TP A B C D) by (conclude lemma_paralleldef2B).
assert (TP E A H K) by (conclude lemma_paralleldef2B).
assert (TP G C K F) by (conclude lemma_paralleldef2B).
assert (TP B C A D) by (conclude lemma_paralleldef2B).
assert (OS A D B C) by (conclude_def TP ).
assert (OS A D C B) by (conclude lemma_samesideflip).
assert (OS D A C B) by (forward_using lemma_samesidesymmetric).
assert (OS C D A B) by (conclude_def TP ).
assert (OS H K E A) by (conclude_def TP ).
assert (OS K F G C) by (conclude_def TP ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (neq A H) by (forward_using lemma_betweennotequal).
assert (neq B G) by (forward_using lemma_betweennotequal).
assert (neq A B) by (forward_using lemma_betweennotequal).

*****
H31 : neq A B
H30 : neq B G
H29 : neq A H
H28 : neq A E
H27 : OS K F G C
H26 : OS H K E A
H25 : OS C D A B
H24 : OS D A C B
H23 : OS A D C B
H22 : OS A D B C
H21 : TP B C A D
H20 : TP G C K F
H19 : TP E A H K
H18 : TP A B C D
H17 : Par A H E K
H16 : Par C D A B
H15 : Par B C A D
H14 : Par G C K F
H13 : Par C F G K
H12 : Par F C G K
H11 : Par G K F C
H10 : Par E K A H
H9 : Par E A H K
H8 : Par A B C D
H7 : Par A D B C
H6 : PG G K F C
H5 : PG E A H K
H4 : BetS B G C
H3 : BetS D F C
H2 : BetS A E B
H1 : BetS A H D
H0 : PG A B C D
A,B,C,D,E,F,G,H,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
PG E K G B
+++++
assert (neq B A) by (conclude lemma_inequalitysymmetric).
-----
Lemma proposition_43B : forall A B C D E F G H K, PG A B C D -> BetS A H D -> BetS A E B -> BetS D F C -> BetS B G C -> PG E A H K -> PG G K F C -> PG E K G B.
Proof.
intros.
assert (Par A D B C) by (conclude_def PG ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par E A H K) by (conclude_def PG ).
assert (Par E K A H) by (conclude_def PG ).
assert (Par G K F C) by (conclude_def PG ).
assert (Par F C G K) by (conclude lemma_parallelsymmetric).
assert (Par C F G K) by (forward_using lemma_parallelflip).
assert (Par G C K F) by (conclude_def PG ).
assert (Par B C A D) by (conclude lemma_parallelsymmetric).
assert (Par C D A B) by (conclude lemma_parallelsymmetric).
assert (Par A H E K) by (conclude lemma_parallelsymmetric).
assert (TP A B C D) by (conclude lemma_paralleldef2B).
assert (TP E A H K) by (conclude lemma_paralleldef2B).
assert (TP G C K F) by (conclude lemma_paralleldef2B).
assert (TP B C A D) by (conclude lemma_paralleldef2B).
assert (OS A D B C) by (conclude_def TP ).
assert (OS A D C B) by (conclude lemma_samesideflip).
assert (OS D A C B) by (forward_using lemma_samesidesymmetric).
assert (OS C D A B) by (conclude_def TP ).
assert (OS H K E A) by (conclude_def TP ).
assert (OS K F G C) by (conclude_def TP ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (neq A H) by (forward_using lemma_betweennotequal).
assert (neq B G) by (forward_using lemma_betweennotequal).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).

*****
H32 : neq B A
H31 : neq A B
H30 : neq B G
H29 : neq A H
H28 : neq A E
H27 : OS K F G C
H26 : OS H K E A
H25 : OS C D A B
H24 : OS D A C B
H23 : OS A D C B
H22 : OS A D B C
H21 : TP B C A D
H20 : TP G C K F
H19 : TP E A H K
H18 : TP A B C D
H17 : Par A H E K
H16 : Par C D A B
H15 : Par B C A D
H14 : Par G C K F
H13 : Par C F G K
H12 : Par F C G K
H11 : Par G K F C
H10 : Par E K A H
H9 : Par E A H K
H8 : Par A B C D
H7 : Par A D B C
H6 : PG G K F C
H5 : PG E A H K
H4 : BetS B G C
H3 : BetS D F C
H2 : BetS A E B
H1 : BetS A H D
H0 : PG A B C D
A,B,C,D,E,F,G,H,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
PG E K G B
+++++
let Tf:=fresh in assert (Tf:exists e, (BetS B A e /\ Cong A e B A)) by (conclude lemma_extension);destruct Tf as [e];spliter.
-----
Lemma proposition_43B : forall A B C D E F G H K, PG A B C D -> BetS A H D -> BetS A E B -> BetS D F C -> BetS B G C -> PG E A H K -> PG G K F C -> PG E K G B.
Proof.
intros.
assert (Par A D B C) by (conclude_def PG ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par E A H K) by (conclude_def PG ).
assert (Par E K A H) by (conclude_def PG ).
assert (Par G K F C) by (conclude_def PG ).
assert (Par F C G K) by (conclude lemma_parallelsymmetric).
assert (Par C F G K) by (forward_using lemma_parallelflip).
assert (Par G C K F) by (conclude_def PG ).
assert (Par B C A D) by (conclude lemma_parallelsymmetric).
assert (Par C D A B) by (conclude lemma_parallelsymmetric).
assert (Par A H E K) by (conclude lemma_parallelsymmetric).
assert (TP A B C D) by (conclude lemma_paralleldef2B).
assert (TP E A H K) by (conclude lemma_paralleldef2B).
assert (TP G C K F) by (conclude lemma_paralleldef2B).
assert (TP B C A D) by (conclude lemma_paralleldef2B).
assert (OS A D B C) by (conclude_def TP ).
assert (OS A D C B) by (conclude lemma_samesideflip).
assert (OS D A C B) by (forward_using lemma_samesidesymmetric).
assert (OS C D A B) by (conclude_def TP ).
assert (OS H K E A) by (conclude_def TP ).
assert (OS K F G C) by (conclude_def TP ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (neq A H) by (forward_using lemma_betweennotequal).
assert (neq B G) by (forward_using lemma_betweennotequal).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists e, (BetS B A e /\\ Cong A e B A)) by (conclude lemma_extension);destruct Tf as [e];spliter.

*****
H34 : Cong A e B A
H33 : BetS B A e
e : Point
H32 : neq B A
H31 : neq A B
H30 : neq B G
H29 : neq A H
H28 : neq A E
H27 : OS K F G C
H26 : OS H K E A
H25 : OS C D A B
H24 : OS D A C B
H23 : OS A D C B
H22 : OS A D B C
H21 : TP B C A D
H20 : TP G C K F
H19 : TP E A H K
H18 : TP A B C D
H17 : Par A H E K
H16 : Par C D A B
H15 : Par B C A D
H14 : Par G C K F
H13 : Par C F G K
H12 : Par F C G K
H11 : Par G K F C
H10 : Par E K A H
H9 : Par E A H K
H8 : Par A B C D
H7 : Par A D B C
H6 : PG G K F C
H5 : PG E A H K
H4 : BetS B G C
H3 : BetS D F C
H2 : BetS A E B
H1 : BetS A H D
H0 : PG A B C D
A,B,C,D,E,F,G,H,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
PG E K G B
+++++
assert (BetS e A B) by (conclude axiom_betweennesssymmetry).
-----
Lemma proposition_43B : forall A B C D E F G H K, PG A B C D -> BetS A H D -> BetS A E B -> BetS D F C -> BetS B G C -> PG E A H K -> PG G K F C -> PG E K G B.
Proof.
intros.
assert (Par A D B C) by (conclude_def PG ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par E A H K) by (conclude_def PG ).
assert (Par E K A H) by (conclude_def PG ).
assert (Par G K F C) by (conclude_def PG ).
assert (Par F C G K) by (conclude lemma_parallelsymmetric).
assert (Par C F G K) by (forward_using lemma_parallelflip).
assert (Par G C K F) by (conclude_def PG ).
assert (Par B C A D) by (conclude lemma_parallelsymmetric).
assert (Par C D A B) by (conclude lemma_parallelsymmetric).
assert (Par A H E K) by (conclude lemma_parallelsymmetric).
assert (TP A B C D) by (conclude lemma_paralleldef2B).
assert (TP E A H K) by (conclude lemma_paralleldef2B).
assert (TP G C K F) by (conclude lemma_paralleldef2B).
assert (TP B C A D) by (conclude lemma_paralleldef2B).
assert (OS A D B C) by (conclude_def TP ).
assert (OS A D C B) by (conclude lemma_samesideflip).
assert (OS D A C B) by (forward_using lemma_samesidesymmetric).
assert (OS C D A B) by (conclude_def TP ).
assert (OS H K E A) by (conclude_def TP ).
assert (OS K F G C) by (conclude_def TP ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (neq A H) by (forward_using lemma_betweennotequal).
assert (neq B G) by (forward_using lemma_betweennotequal).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists e, (BetS B A e /\\ Cong A e B A)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (BetS e A B) by (conclude axiom_betweennesssymmetry).

*****
H35 : BetS e A B
H34 : Cong A e B A
H33 : BetS B A e
e : Point
H32 : neq B A
H31 : neq A B
H30 : neq B G
H29 : neq A H
H28 : neq A E
H27 : OS K F G C
H26 : OS H K E A
H25 : OS C D A B
H24 : OS D A C B
H23 : OS A D C B
H22 : OS A D B C
H21 : TP B C A D
H20 : TP G C K F
H19 : TP E A H K
H18 : TP A B C D
H17 : Par A H E K
H16 : Par C D A B
H15 : Par B C A D
H14 : Par G C K F
H13 : Par C F G K
H12 : Par F C G K
H11 : Par G K F C
H10 : Par E K A H
H9 : Par E A H K
H8 : Par A B C D
H7 : Par A D B C
H6 : PG G K F C
H5 : PG E A H K
H4 : BetS B G C
H3 : BetS D F C
H2 : BetS A E B
H1 : BetS A H D
H0 : PG A B C D
A,B,C,D,E,F,G,H,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
PG E K G B
+++++
assert (OS D C A B) by (forward_using lemma_samesidesymmetric).
-----
Lemma proposition_43B : forall A B C D E F G H K, PG A B C D -> BetS A H D -> BetS A E B -> BetS D F C -> BetS B G C -> PG E A H K -> PG G K F C -> PG E K G B.
Proof.
intros.
assert (Par A D B C) by (conclude_def PG ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par E A H K) by (conclude_def PG ).
assert (Par E K A H) by (conclude_def PG ).
assert (Par G K F C) by (conclude_def PG ).
assert (Par F C G K) by (conclude lemma_parallelsymmetric).
assert (Par C F G K) by (forward_using lemma_parallelflip).
assert (Par G C K F) by (conclude_def PG ).
assert (Par B C A D) by (conclude lemma_parallelsymmetric).
assert (Par C D A B) by (conclude lemma_parallelsymmetric).
assert (Par A H E K) by (conclude lemma_parallelsymmetric).
assert (TP A B C D) by (conclude lemma_paralleldef2B).
assert (TP E A H K) by (conclude lemma_paralleldef2B).
assert (TP G C K F) by (conclude lemma_paralleldef2B).
assert (TP B C A D) by (conclude lemma_paralleldef2B).
assert (OS A D B C) by (conclude_def TP ).
assert (OS A D C B) by (conclude lemma_samesideflip).
assert (OS D A C B) by (forward_using lemma_samesidesymmetric).
assert (OS C D A B) by (conclude_def TP ).
assert (OS H K E A) by (conclude_def TP ).
assert (OS K F G C) by (conclude_def TP ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (neq A H) by (forward_using lemma_betweennotequal).
assert (neq B G) by (forward_using lemma_betweennotequal).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists e, (BetS B A e /\\ Cong A e B A)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (BetS e A B) by (conclude axiom_betweennesssymmetry).
assert (OS D C A B) by (forward_using lemma_samesidesymmetric).

*****
H36 : OS D C A B
H35 : BetS e A B
H34 : Cong A e B A
H33 : BetS B A e
e : Point
H32 : neq B A
H31 : neq A B
H30 : neq B G
H29 : neq A H
H28 : neq A E
H27 : OS K F G C
H26 : OS H K E A
H25 : OS C D A B
H24 : OS D A C B
H23 : OS A D C B
H22 : OS A D B C
H21 : TP B C A D
H20 : TP G C K F
H19 : TP E A H K
H18 : TP A B C D
H17 : Par A H E K
H16 : Par C D A B
H15 : Par B C A D
H14 : Par G C K F
H13 : Par C F G K
H12 : Par F C G K
H11 : Par G K F C
H10 : Par E K A H
H9 : Par E A H K
H8 : Par A B C D
H7 : Par A D B C
H6 : PG G K F C
H5 : PG E A H K
H4 : BetS B G C
H3 : BetS D F C
H2 : BetS A E B
H1 : BetS A H D
H0 : PG A B C D
A,B,C,D,E,F,G,H,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
PG E K G B
+++++
assert (RT D A B A B C) by (conclude proposition_29C).
-----
Lemma proposition_43B : forall A B C D E F G H K, PG A B C D -> BetS A H D -> BetS A E B -> BetS D F C -> BetS B G C -> PG E A H K -> PG G K F C -> PG E K G B.
Proof.
intros.
assert (Par A D B C) by (conclude_def PG ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par E A H K) by (conclude_def PG ).
assert (Par E K A H) by (conclude_def PG ).
assert (Par G K F C) by (conclude_def PG ).
assert (Par F C G K) by (conclude lemma_parallelsymmetric).
assert (Par C F G K) by (forward_using lemma_parallelflip).
assert (Par G C K F) by (conclude_def PG ).
assert (Par B C A D) by (conclude lemma_parallelsymmetric).
assert (Par C D A B) by (conclude lemma_parallelsymmetric).
assert (Par A H E K) by (conclude lemma_parallelsymmetric).
assert (TP A B C D) by (conclude lemma_paralleldef2B).
assert (TP E A H K) by (conclude lemma_paralleldef2B).
assert (TP G C K F) by (conclude lemma_paralleldef2B).
assert (TP B C A D) by (conclude lemma_paralleldef2B).
assert (OS A D B C) by (conclude_def TP ).
assert (OS A D C B) by (conclude lemma_samesideflip).
assert (OS D A C B) by (forward_using lemma_samesidesymmetric).
assert (OS C D A B) by (conclude_def TP ).
assert (OS H K E A) by (conclude_def TP ).
assert (OS K F G C) by (conclude_def TP ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (neq A H) by (forward_using lemma_betweennotequal).
assert (neq B G) by (forward_using lemma_betweennotequal).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists e, (BetS B A e /\\ Cong A e B A)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (BetS e A B) by (conclude axiom_betweennesssymmetry).
assert (OS D C A B) by (forward_using lemma_samesidesymmetric).
assert (RT D A B A B C) by (conclude proposition_29C).

*****
H37 : RT D A B A B C
H36 : OS D C A B
H35 : BetS e A B
H34 : Cong A e B A
H33 : BetS B A e
e : Point
H32 : neq B A
H31 : neq A B
H30 : neq B G
H29 : neq A H
H28 : neq A E
H27 : OS K F G C
H26 : OS H K E A
H25 : OS C D A B
H24 : OS D A C B
H23 : OS A D C B
H22 : OS A D B C
H21 : TP B C A D
H20 : TP G C K F
H19 : TP E A H K
H18 : TP A B C D
H17 : Par A H E K
H16 : Par C D A B
H15 : Par B C A D
H14 : Par G C K F
H13 : Par C F G K
H12 : Par F C G K
H11 : Par G K F C
H10 : Par E K A H
H9 : Par E A H K
H8 : Par A B C D
H7 : Par A D B C
H6 : PG G K F C
H5 : PG E A H K
H4 : BetS B G C
H3 : BetS D F C
H2 : BetS A E B
H1 : BetS A H D
H0 : PG A B C D
A,B,C,D,E,F,G,H,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
PG E K G B
+++++
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
-----
Lemma proposition_43B : forall A B C D E F G H K, PG A B C D -> BetS A H D -> BetS A E B -> BetS D F C -> BetS B G C -> PG E A H K -> PG G K F C -> PG E K G B.
Proof.
intros.
assert (Par A D B C) by (conclude_def PG ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par E A H K) by (conclude_def PG ).
assert (Par E K A H) by (conclude_def PG ).
assert (Par G K F C) by (conclude_def PG ).
assert (Par F C G K) by (conclude lemma_parallelsymmetric).
assert (Par C F G K) by (forward_using lemma_parallelflip).
assert (Par G C K F) by (conclude_def PG ).
assert (Par B C A D) by (conclude lemma_parallelsymmetric).
assert (Par C D A B) by (conclude lemma_parallelsymmetric).
assert (Par A H E K) by (conclude lemma_parallelsymmetric).
assert (TP A B C D) by (conclude lemma_paralleldef2B).
assert (TP E A H K) by (conclude lemma_paralleldef2B).
assert (TP G C K F) by (conclude lemma_paralleldef2B).
assert (TP B C A D) by (conclude lemma_paralleldef2B).
assert (OS A D B C) by (conclude_def TP ).
assert (OS A D C B) by (conclude lemma_samesideflip).
assert (OS D A C B) by (forward_using lemma_samesidesymmetric).
assert (OS C D A B) by (conclude_def TP ).
assert (OS H K E A) by (conclude_def TP ).
assert (OS K F G C) by (conclude_def TP ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (neq A H) by (forward_using lemma_betweennotequal).
assert (neq B G) by (forward_using lemma_betweennotequal).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists e, (BetS B A e /\\ Cong A e B A)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (BetS e A B) by (conclude axiom_betweennesssymmetry).
assert (OS D C A B) by (forward_using lemma_samesidesymmetric).
assert (RT D A B A B C) by (conclude proposition_29C).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).

*****
H38 : BetS B E A
H37 : RT D A B A B C
H36 : OS D C A B
H35 : BetS e A B
H34 : Cong A e B A
H33 : BetS B A e
e : Point
H32 : neq B A
H31 : neq A B
H30 : neq B G
H29 : neq A H
H28 : neq A E
H27 : OS K F G C
H26 : OS H K E A
H25 : OS C D A B
H24 : OS D A C B
H23 : OS A D C B
H22 : OS A D B C
H21 : TP B C A D
H20 : TP G C K F
H19 : TP E A H K
H18 : TP A B C D
H17 : Par A H E K
H16 : Par C D A B
H15 : Par B C A D
H14 : Par G C K F
H13 : Par C F G K
H12 : Par F C G K
H11 : Par G K F C
H10 : Par E K A H
H9 : Par E A H K
H8 : Par A B C D
H7 : Par A D B C
H6 : PG G K F C
H5 : PG E A H K
H4 : BetS B G C
H3 : BetS D F C
H2 : BetS A E B
H1 : BetS A H D
H0 : PG A B C D
A,B,C,D,E,F,G,H,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
PG E K G B
+++++
assert (BetS E A e) by (conclude lemma_3_6a).
-----
Lemma proposition_43B : forall A B C D E F G H K, PG A B C D -> BetS A H D -> BetS A E B -> BetS D F C -> BetS B G C -> PG E A H K -> PG G K F C -> PG E K G B.
Proof.
intros.
assert (Par A D B C) by (conclude_def PG ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par E A H K) by (conclude_def PG ).
assert (Par E K A H) by (conclude_def PG ).
assert (Par G K F C) by (conclude_def PG ).
assert (Par F C G K) by (conclude lemma_parallelsymmetric).
assert (Par C F G K) by (forward_using lemma_parallelflip).
assert (Par G C K F) by (conclude_def PG ).
assert (Par B C A D) by (conclude lemma_parallelsymmetric).
assert (Par C D A B) by (conclude lemma_parallelsymmetric).
assert (Par A H E K) by (conclude lemma_parallelsymmetric).
assert (TP A B C D) by (conclude lemma_paralleldef2B).
assert (TP E A H K) by (conclude lemma_paralleldef2B).
assert (TP G C K F) by (conclude lemma_paralleldef2B).
assert (TP B C A D) by (conclude lemma_paralleldef2B).
assert (OS A D B C) by (conclude_def TP ).
assert (OS A D C B) by (conclude lemma_samesideflip).
assert (OS D A C B) by (forward_using lemma_samesidesymmetric).
assert (OS C D A B) by (conclude_def TP ).
assert (OS H K E A) by (conclude_def TP ).
assert (OS K F G C) by (conclude_def TP ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (neq A H) by (forward_using lemma_betweennotequal).
assert (neq B G) by (forward_using lemma_betweennotequal).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists e, (BetS B A e /\\ Cong A e B A)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (BetS e A B) by (conclude axiom_betweennesssymmetry).
assert (OS D C A B) by (forward_using lemma_samesidesymmetric).
assert (RT D A B A B C) by (conclude proposition_29C).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert (BetS E A e) by (conclude lemma_3_6a).

*****
H39 : BetS E A e
H38 : BetS B E A
H37 : RT D A B A B C
H36 : OS D C A B
H35 : BetS e A B
H34 : Cong A e B A
H33 : BetS B A e
e : Point
H32 : neq B A
H31 : neq A B
H30 : neq B G
H29 : neq A H
H28 : neq A E
H27 : OS K F G C
H26 : OS H K E A
H25 : OS C D A B
H24 : OS D A C B
H23 : OS A D C B
H22 : OS A D B C
H21 : TP B C A D
H20 : TP G C K F
H19 : TP E A H K
H18 : TP A B C D
H17 : Par A H E K
H16 : Par C D A B
H15 : Par B C A D
H14 : Par G C K F
H13 : Par C F G K
H12 : Par F C G K
H11 : Par G K F C
H10 : Par E K A H
H9 : Par E A H K
H8 : Par A B C D
H7 : Par A D B C
H6 : PG G K F C
H5 : PG E A H K
H4 : BetS B G C
H3 : BetS D F C
H2 : BetS A E B
H1 : BetS A H D
H0 : PG A B C D
A,B,C,D,E,F,G,H,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
PG E K G B
+++++
assert (BetS e A E) by (conclude axiom_betweennesssymmetry).
-----
Lemma proposition_43B : forall A B C D E F G H K, PG A B C D -> BetS A H D -> BetS A E B -> BetS D F C -> BetS B G C -> PG E A H K -> PG G K F C -> PG E K G B.
Proof.
intros.
assert (Par A D B C) by (conclude_def PG ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par E A H K) by (conclude_def PG ).
assert (Par E K A H) by (conclude_def PG ).
assert (Par G K F C) by (conclude_def PG ).
assert (Par F C G K) by (conclude lemma_parallelsymmetric).
assert (Par C F G K) by (forward_using lemma_parallelflip).
assert (Par G C K F) by (conclude_def PG ).
assert (Par B C A D) by (conclude lemma_parallelsymmetric).
assert (Par C D A B) by (conclude lemma_parallelsymmetric).
assert (Par A H E K) by (conclude lemma_parallelsymmetric).
assert (TP A B C D) by (conclude lemma_paralleldef2B).
assert (TP E A H K) by (conclude lemma_paralleldef2B).
assert (TP G C K F) by (conclude lemma_paralleldef2B).
assert (TP B C A D) by (conclude lemma_paralleldef2B).
assert (OS A D B C) by (conclude_def TP ).
assert (OS A D C B) by (conclude lemma_samesideflip).
assert (OS D A C B) by (forward_using lemma_samesidesymmetric).
assert (OS C D A B) by (conclude_def TP ).
assert (OS H K E A) by (conclude_def TP ).
assert (OS K F G C) by (conclude_def TP ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (neq A H) by (forward_using lemma_betweennotequal).
assert (neq B G) by (forward_using lemma_betweennotequal).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists e, (BetS B A e /\\ Cong A e B A)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (BetS e A B) by (conclude axiom_betweennesssymmetry).
assert (OS D C A B) by (forward_using lemma_samesidesymmetric).
assert (RT D A B A B C) by (conclude proposition_29C).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert (BetS E A e) by (conclude lemma_3_6a).
assert (BetS e A E) by (conclude axiom_betweennesssymmetry).

*****
H40 : BetS e A E
H39 : BetS E A e
H38 : BetS B E A
H37 : RT D A B A B C
H36 : OS D C A B
H35 : BetS e A B
H34 : Cong A e B A
H33 : BetS B A e
e : Point
H32 : neq B A
H31 : neq A B
H30 : neq B G
H29 : neq A H
H28 : neq A E
H27 : OS K F G C
H26 : OS H K E A
H25 : OS C D A B
H24 : OS D A C B
H23 : OS A D C B
H22 : OS A D B C
H21 : TP B C A D
H20 : TP G C K F
H19 : TP E A H K
H18 : TP A B C D
H17 : Par A H E K
H16 : Par C D A B
H15 : Par B C A D
H14 : Par G C K F
H13 : Par C F G K
H12 : Par F C G K
H11 : Par G K F C
H10 : Par E K A H
H9 : Par E A H K
H8 : Par A B C D
H7 : Par A D B C
H6 : PG G K F C
H5 : PG E A H K
H4 : BetS B G C
H3 : BetS D F C
H2 : BetS A E B
H1 : BetS A H D
H0 : PG A B C D
A,B,C,D,E,F,G,H,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
PG E K G B
+++++
assert (OS H K A E) by (forward_using lemma_samesidesymmetric).
-----
Lemma proposition_43B : forall A B C D E F G H K, PG A B C D -> BetS A H D -> BetS A E B -> BetS D F C -> BetS B G C -> PG E A H K -> PG G K F C -> PG E K G B.
Proof.
intros.
assert (Par A D B C) by (conclude_def PG ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par E A H K) by (conclude_def PG ).
assert (Par E K A H) by (conclude_def PG ).
assert (Par G K F C) by (conclude_def PG ).
assert (Par F C G K) by (conclude lemma_parallelsymmetric).
assert (Par C F G K) by (forward_using lemma_parallelflip).
assert (Par G C K F) by (conclude_def PG ).
assert (Par B C A D) by (conclude lemma_parallelsymmetric).
assert (Par C D A B) by (conclude lemma_parallelsymmetric).
assert (Par A H E K) by (conclude lemma_parallelsymmetric).
assert (TP A B C D) by (conclude lemma_paralleldef2B).
assert (TP E A H K) by (conclude lemma_paralleldef2B).
assert (TP G C K F) by (conclude lemma_paralleldef2B).
assert (TP B C A D) by (conclude lemma_paralleldef2B).
assert (OS A D B C) by (conclude_def TP ).
assert (OS A D C B) by (conclude lemma_samesideflip).
assert (OS D A C B) by (forward_using lemma_samesidesymmetric).
assert (OS C D A B) by (conclude_def TP ).
assert (OS H K E A) by (conclude_def TP ).
assert (OS K F G C) by (conclude_def TP ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (neq A H) by (forward_using lemma_betweennotequal).
assert (neq B G) by (forward_using lemma_betweennotequal).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists e, (BetS B A e /\\ Cong A e B A)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (BetS e A B) by (conclude axiom_betweennesssymmetry).
assert (OS D C A B) by (forward_using lemma_samesidesymmetric).
assert (RT D A B A B C) by (conclude proposition_29C).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert (BetS E A e) by (conclude lemma_3_6a).
assert (BetS e A E) by (conclude axiom_betweennesssymmetry).
assert (OS H K A E) by (forward_using lemma_samesidesymmetric).

*****
H41 : OS H K A E
H40 : BetS e A E
H39 : BetS E A e
H38 : BetS B E A
H37 : RT D A B A B C
H36 : OS D C A B
H35 : BetS e A B
H34 : Cong A e B A
H33 : BetS B A e
e : Point
H32 : neq B A
H31 : neq A B
H30 : neq B G
H29 : neq A H
H28 : neq A E
H27 : OS K F G C
H26 : OS H K E A
H25 : OS C D A B
H24 : OS D A C B
H23 : OS A D C B
H22 : OS A D B C
H21 : TP B C A D
H20 : TP G C K F
H19 : TP E A H K
H18 : TP A B C D
H17 : Par A H E K
H16 : Par C D A B
H15 : Par B C A D
H14 : Par G C K F
H13 : Par C F G K
H12 : Par F C G K
H11 : Par G K F C
H10 : Par E K A H
H9 : Par E A H K
H8 : Par A B C D
H7 : Par A D B C
H6 : PG G K F C
H5 : PG E A H K
H4 : BetS B G C
H3 : BetS D F C
H2 : BetS A E B
H1 : BetS A H D
H0 : PG A B C D
A,B,C,D,E,F,G,H,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
PG E K G B
+++++
assert (RT H A E A E K) by (conclude proposition_29C).
-----
Lemma proposition_43B : forall A B C D E F G H K, PG A B C D -> BetS A H D -> BetS A E B -> BetS D F C -> BetS B G C -> PG E A H K -> PG G K F C -> PG E K G B.
Proof.
intros.
assert (Par A D B C) by (conclude_def PG ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par E A H K) by (conclude_def PG ).
assert (Par E K A H) by (conclude_def PG ).
assert (Par G K F C) by (conclude_def PG ).
assert (Par F C G K) by (conclude lemma_parallelsymmetric).
assert (Par C F G K) by (forward_using lemma_parallelflip).
assert (Par G C K F) by (conclude_def PG ).
assert (Par B C A D) by (conclude lemma_parallelsymmetric).
assert (Par C D A B) by (conclude lemma_parallelsymmetric).
assert (Par A H E K) by (conclude lemma_parallelsymmetric).
assert (TP A B C D) by (conclude lemma_paralleldef2B).
assert (TP E A H K) by (conclude lemma_paralleldef2B).
assert (TP G C K F) by (conclude lemma_paralleldef2B).
assert (TP B C A D) by (conclude lemma_paralleldef2B).
assert (OS A D B C) by (conclude_def TP ).
assert (OS A D C B) by (conclude lemma_samesideflip).
assert (OS D A C B) by (forward_using lemma_samesidesymmetric).
assert (OS C D A B) by (conclude_def TP ).
assert (OS H K E A) by (conclude_def TP ).
assert (OS K F G C) by (conclude_def TP ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (neq A H) by (forward_using lemma_betweennotequal).
assert (neq B G) by (forward_using lemma_betweennotequal).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists e, (BetS B A e /\\ Cong A e B A)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (BetS e A B) by (conclude axiom_betweennesssymmetry).
assert (OS D C A B) by (forward_using lemma_samesidesymmetric).
assert (RT D A B A B C) by (conclude proposition_29C).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert (BetS E A e) by (conclude lemma_3_6a).
assert (BetS e A E) by (conclude axiom_betweennesssymmetry).
assert (OS H K A E) by (forward_using lemma_samesidesymmetric).
assert (RT H A E A E K) by (conclude proposition_29C).

*****
H42 : RT H A E A E K
H41 : OS H K A E
H40 : BetS e A E
H39 : BetS E A e
H38 : BetS B E A
H37 : RT D A B A B C
H36 : OS D C A B
H35 : BetS e A B
H34 : Cong A e B A
H33 : BetS B A e
e : Point
H32 : neq B A
H31 : neq A B
H30 : neq B G
H29 : neq A H
H28 : neq A E
H27 : OS K F G C
H26 : OS H K E A
H25 : OS C D A B
H24 : OS D A C B
H23 : OS A D C B
H22 : OS A D B C
H21 : TP B C A D
H20 : TP G C K F
H19 : TP E A H K
H18 : TP A B C D
H17 : Par A H E K
H16 : Par C D A B
H15 : Par B C A D
H14 : Par G C K F
H13 : Par C F G K
H12 : Par F C G K
H11 : Par G K F C
H10 : Par E K A H
H9 : Par E A H K
H8 : Par A B C D
H7 : Par A D B C
H6 : PG G K F C
H5 : PG E A H K
H4 : BetS B G C
H3 : BetS D F C
H2 : BetS A E B
H1 : BetS A H D
H0 : PG A B C D
A,B,C,D,E,F,G,H,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
PG E K G B
+++++
assert (Out A E B) by (conclude lemma_ray4).
-----
Lemma proposition_43B : forall A B C D E F G H K, PG A B C D -> BetS A H D -> BetS A E B -> BetS D F C -> BetS B G C -> PG E A H K -> PG G K F C -> PG E K G B.
Proof.
intros.
assert (Par A D B C) by (conclude_def PG ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par E A H K) by (conclude_def PG ).
assert (Par E K A H) by (conclude_def PG ).
assert (Par G K F C) by (conclude_def PG ).
assert (Par F C G K) by (conclude lemma_parallelsymmetric).
assert (Par C F G K) by (forward_using lemma_parallelflip).
assert (Par G C K F) by (conclude_def PG ).
assert (Par B C A D) by (conclude lemma_parallelsymmetric).
assert (Par C D A B) by (conclude lemma_parallelsymmetric).
assert (Par A H E K) by (conclude lemma_parallelsymmetric).
assert (TP A B C D) by (conclude lemma_paralleldef2B).
assert (TP E A H K) by (conclude lemma_paralleldef2B).
assert (TP G C K F) by (conclude lemma_paralleldef2B).
assert (TP B C A D) by (conclude lemma_paralleldef2B).
assert (OS A D B C) by (conclude_def TP ).
assert (OS A D C B) by (conclude lemma_samesideflip).
assert (OS D A C B) by (forward_using lemma_samesidesymmetric).
assert (OS C D A B) by (conclude_def TP ).
assert (OS H K E A) by (conclude_def TP ).
assert (OS K F G C) by (conclude_def TP ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (neq A H) by (forward_using lemma_betweennotequal).
assert (neq B G) by (forward_using lemma_betweennotequal).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists e, (BetS B A e /\\ Cong A e B A)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (BetS e A B) by (conclude axiom_betweennesssymmetry).
assert (OS D C A B) by (forward_using lemma_samesidesymmetric).
assert (RT D A B A B C) by (conclude proposition_29C).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert (BetS E A e) by (conclude lemma_3_6a).
assert (BetS e A E) by (conclude axiom_betweennesssymmetry).
assert (OS H K A E) by (forward_using lemma_samesidesymmetric).
assert (RT H A E A E K) by (conclude proposition_29C).
assert (Out A E B) by (conclude lemma_ray4).

*****
H43 : Out A E B
H42 : RT H A E A E K
H41 : OS H K A E
H40 : BetS e A E
H39 : BetS E A e
H38 : BetS B E A
H37 : RT D A B A B C
H36 : OS D C A B
H35 : BetS e A B
H34 : Cong A e B A
H33 : BetS B A e
e : Point
H32 : neq B A
H31 : neq A B
H30 : neq B G
H29 : neq A H
H28 : neq A E
H27 : OS K F G C
H26 : OS H K E A
H25 : OS C D A B
H24 : OS D A C B
H23 : OS A D C B
H22 : OS A D B C
H21 : TP B C A D
H20 : TP G C K F
H19 : TP E A H K
H18 : TP A B C D
H17 : Par A H E K
H16 : Par C D A B
H15 : Par B C A D
H14 : Par G C K F
H13 : Par C F G K
H12 : Par F C G K
H11 : Par G K F C
H10 : Par E K A H
H9 : Par E A H K
H8 : Par A B C D
H7 : Par A D B C
H6 : PG G K F C
H5 : PG E A H K
H4 : BetS B G C
H3 : BetS D F C
H2 : BetS A E B
H1 : BetS A H D
H0 : PG A B C D
A,B,C,D,E,F,G,H,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
PG E K G B
+++++
assert (Out A H D) by (conclude lemma_ray4).
-----
Lemma proposition_43B : forall A B C D E F G H K, PG A B C D -> BetS A H D -> BetS A E B -> BetS D F C -> BetS B G C -> PG E A H K -> PG G K F C -> PG E K G B.
Proof.
intros.
assert (Par A D B C) by (conclude_def PG ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par E A H K) by (conclude_def PG ).
assert (Par E K A H) by (conclude_def PG ).
assert (Par G K F C) by (conclude_def PG ).
assert (Par F C G K) by (conclude lemma_parallelsymmetric).
assert (Par C F G K) by (forward_using lemma_parallelflip).
assert (Par G C K F) by (conclude_def PG ).
assert (Par B C A D) by (conclude lemma_parallelsymmetric).
assert (Par C D A B) by (conclude lemma_parallelsymmetric).
assert (Par A H E K) by (conclude lemma_parallelsymmetric).
assert (TP A B C D) by (conclude lemma_paralleldef2B).
assert (TP E A H K) by (conclude lemma_paralleldef2B).
assert (TP G C K F) by (conclude lemma_paralleldef2B).
assert (TP B C A D) by (conclude lemma_paralleldef2B).
assert (OS A D B C) by (conclude_def TP ).
assert (OS A D C B) by (conclude lemma_samesideflip).
assert (OS D A C B) by (forward_using lemma_samesidesymmetric).
assert (OS C D A B) by (conclude_def TP ).
assert (OS H K E A) by (conclude_def TP ).
assert (OS K F G C) by (conclude_def TP ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (neq A H) by (forward_using lemma_betweennotequal).
assert (neq B G) by (forward_using lemma_betweennotequal).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists e, (BetS B A e /\\ Cong A e B A)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (BetS e A B) by (conclude axiom_betweennesssymmetry).
assert (OS D C A B) by (forward_using lemma_samesidesymmetric).
assert (RT D A B A B C) by (conclude proposition_29C).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert (BetS E A e) by (conclude lemma_3_6a).
assert (BetS e A E) by (conclude axiom_betweennesssymmetry).
assert (OS H K A E) by (forward_using lemma_samesidesymmetric).
assert (RT H A E A E K) by (conclude proposition_29C).
assert (Out A E B) by (conclude lemma_ray4).
assert (Out A H D) by (conclude lemma_ray4).

*****
H44 : Out A H D
H43 : Out A E B
H42 : RT H A E A E K
H41 : OS H K A E
H40 : BetS e A E
H39 : BetS E A e
H38 : BetS B E A
H37 : RT D A B A B C
H36 : OS D C A B
H35 : BetS e A B
H34 : Cong A e B A
H33 : BetS B A e
e : Point
H32 : neq B A
H31 : neq A B
H30 : neq B G
H29 : neq A H
H28 : neq A E
H27 : OS K F G C
H26 : OS H K E A
H25 : OS C D A B
H24 : OS D A C B
H23 : OS A D C B
H22 : OS A D B C
H21 : TP B C A D
H20 : TP G C K F
H19 : TP E A H K
H18 : TP A B C D
H17 : Par A H E K
H16 : Par C D A B
H15 : Par B C A D
H14 : Par G C K F
H13 : Par C F G K
H12 : Par F C G K
H11 : Par G K F C
H10 : Par E K A H
H9 : Par E A H K
H8 : Par A B C D
H7 : Par A D B C
H6 : PG G K F C
H5 : PG E A H K
H4 : BetS B G C
H3 : BetS D F C
H2 : BetS A E B
H1 : BetS A H D
H0 : PG A B C D
A,B,C,D,E,F,G,H,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
PG E K G B
+++++
assert (nCol A H E) by (forward_using lemma_parallelNC).
-----
Lemma proposition_43B : forall A B C D E F G H K, PG A B C D -> BetS A H D -> BetS A E B -> BetS D F C -> BetS B G C -> PG E A H K -> PG G K F C -> PG E K G B.
Proof.
intros.
assert (Par A D B C) by (conclude_def PG ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par E A H K) by (conclude_def PG ).
assert (Par E K A H) by (conclude_def PG ).
assert (Par G K F C) by (conclude_def PG ).
assert (Par F C G K) by (conclude lemma_parallelsymmetric).
assert (Par C F G K) by (forward_using lemma_parallelflip).
assert (Par G C K F) by (conclude_def PG ).
assert (Par B C A D) by (conclude lemma_parallelsymmetric).
assert (Par C D A B) by (conclude lemma_parallelsymmetric).
assert (Par A H E K) by (conclude lemma_parallelsymmetric).
assert (TP A B C D) by (conclude lemma_paralleldef2B).
assert (TP E A H K) by (conclude lemma_paralleldef2B).
assert (TP G C K F) by (conclude lemma_paralleldef2B).
assert (TP B C A D) by (conclude lemma_paralleldef2B).
assert (OS A D B C) by (conclude_def TP ).
assert (OS A D C B) by (conclude lemma_samesideflip).
assert (OS D A C B) by (forward_using lemma_samesidesymmetric).
assert (OS C D A B) by (conclude_def TP ).
assert (OS H K E A) by (conclude_def TP ).
assert (OS K F G C) by (conclude_def TP ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (neq A H) by (forward_using lemma_betweennotequal).
assert (neq B G) by (forward_using lemma_betweennotequal).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists e, (BetS B A e /\\ Cong A e B A)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (BetS e A B) by (conclude axiom_betweennesssymmetry).
assert (OS D C A B) by (forward_using lemma_samesidesymmetric).
assert (RT D A B A B C) by (conclude proposition_29C).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert (BetS E A e) by (conclude lemma_3_6a).
assert (BetS e A E) by (conclude axiom_betweennesssymmetry).
assert (OS H K A E) by (forward_using lemma_samesidesymmetric).
assert (RT H A E A E K) by (conclude proposition_29C).
assert (Out A E B) by (conclude lemma_ray4).
assert (Out A H D) by (conclude lemma_ray4).
assert (nCol A H E) by (forward_using lemma_parallelNC).

*****
H45 : nCol A H E
H44 : Out A H D
H43 : Out A E B
H42 : RT H A E A E K
H41 : OS H K A E
H40 : BetS e A E
H39 : BetS E A e
H38 : BetS B E A
H37 : RT D A B A B C
H36 : OS D C A B
H35 : BetS e A B
H34 : Cong A e B A
H33 : BetS B A e
e : Point
H32 : neq B A
H31 : neq A B
H30 : neq B G
H29 : neq A H
H28 : neq A E
H27 : OS K F G C
H26 : OS H K E A
H25 : OS C D A B
H24 : OS D A C B
H23 : OS A D C B
H22 : OS A D B C
H21 : TP B C A D
H20 : TP G C K F
H19 : TP E A H K
H18 : TP A B C D
H17 : Par A H E K
H16 : Par C D A B
H15 : Par B C A D
H14 : Par G C K F
H13 : Par C F G K
H12 : Par F C G K
H11 : Par G K F C
H10 : Par E K A H
H9 : Par E A H K
H8 : Par A B C D
H7 : Par A D B C
H6 : PG G K F C
H5 : PG E A H K
H4 : BetS B G C
H3 : BetS D F C
H2 : BetS A E B
H1 : BetS A H D
H0 : PG A B C D
A,B,C,D,E,F,G,H,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
PG E K G B
+++++
assert (nCol E A H) by (forward_using lemma_NCorder).
-----
Lemma proposition_43B : forall A B C D E F G H K, PG A B C D -> BetS A H D -> BetS A E B -> BetS D F C -> BetS B G C -> PG E A H K -> PG G K F C -> PG E K G B.
Proof.
intros.
assert (Par A D B C) by (conclude_def PG ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par E A H K) by (conclude_def PG ).
assert (Par E K A H) by (conclude_def PG ).
assert (Par G K F C) by (conclude_def PG ).
assert (Par F C G K) by (conclude lemma_parallelsymmetric).
assert (Par C F G K) by (forward_using lemma_parallelflip).
assert (Par G C K F) by (conclude_def PG ).
assert (Par B C A D) by (conclude lemma_parallelsymmetric).
assert (Par C D A B) by (conclude lemma_parallelsymmetric).
assert (Par A H E K) by (conclude lemma_parallelsymmetric).
assert (TP A B C D) by (conclude lemma_paralleldef2B).
assert (TP E A H K) by (conclude lemma_paralleldef2B).
assert (TP G C K F) by (conclude lemma_paralleldef2B).
assert (TP B C A D) by (conclude lemma_paralleldef2B).
assert (OS A D B C) by (conclude_def TP ).
assert (OS A D C B) by (conclude lemma_samesideflip).
assert (OS D A C B) by (forward_using lemma_samesidesymmetric).
assert (OS C D A B) by (conclude_def TP ).
assert (OS H K E A) by (conclude_def TP ).
assert (OS K F G C) by (conclude_def TP ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (neq A H) by (forward_using lemma_betweennotequal).
assert (neq B G) by (forward_using lemma_betweennotequal).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists e, (BetS B A e /\\ Cong A e B A)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (BetS e A B) by (conclude axiom_betweennesssymmetry).
assert (OS D C A B) by (forward_using lemma_samesidesymmetric).
assert (RT D A B A B C) by (conclude proposition_29C).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert (BetS E A e) by (conclude lemma_3_6a).
assert (BetS e A E) by (conclude axiom_betweennesssymmetry).
assert (OS H K A E) by (forward_using lemma_samesidesymmetric).
assert (RT H A E A E K) by (conclude proposition_29C).
assert (Out A E B) by (conclude lemma_ray4).
assert (Out A H D) by (conclude lemma_ray4).
assert (nCol A H E) by (forward_using lemma_parallelNC).
assert (nCol E A H) by (forward_using lemma_NCorder).

*****
H46 : nCol E A H
H45 : nCol A H E
H44 : Out A H D
H43 : Out A E B
H42 : RT H A E A E K
H41 : OS H K A E
H40 : BetS e A E
H39 : BetS E A e
H38 : BetS B E A
H37 : RT D A B A B C
H36 : OS D C A B
H35 : BetS e A B
H34 : Cong A e B A
H33 : BetS B A e
e : Point
H32 : neq B A
H31 : neq A B
H30 : neq B G
H29 : neq A H
H28 : neq A E
H27 : OS K F G C
H26 : OS H K E A
H25 : OS C D A B
H24 : OS D A C B
H23 : OS A D C B
H22 : OS A D B C
H21 : TP B C A D
H20 : TP G C K F
H19 : TP E A H K
H18 : TP A B C D
H17 : Par A H E K
H16 : Par C D A B
H15 : Par B C A D
H14 : Par G C K F
H13 : Par C F G K
H12 : Par F C G K
H11 : Par G K F C
H10 : Par E K A H
H9 : Par E A H K
H8 : Par A B C D
H7 : Par A D B C
H6 : PG G K F C
H5 : PG E A H K
H4 : BetS B G C
H3 : BetS D F C
H2 : BetS A E B
H1 : BetS A H D
H0 : PG A B C D
A,B,C,D,E,F,G,H,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
PG E K G B
+++++
assert (CongA E A H E A H) by (conclude lemma_equalanglesreflexive).
-----
Lemma proposition_43B : forall A B C D E F G H K, PG A B C D -> BetS A H D -> BetS A E B -> BetS D F C -> BetS B G C -> PG E A H K -> PG G K F C -> PG E K G B.
Proof.
intros.
assert (Par A D B C) by (conclude_def PG ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par E A H K) by (conclude_def PG ).
assert (Par E K A H) by (conclude_def PG ).
assert (Par G K F C) by (conclude_def PG ).
assert (Par F C G K) by (conclude lemma_parallelsymmetric).
assert (Par C F G K) by (forward_using lemma_parallelflip).
assert (Par G C K F) by (conclude_def PG ).
assert (Par B C A D) by (conclude lemma_parallelsymmetric).
assert (Par C D A B) by (conclude lemma_parallelsymmetric).
assert (Par A H E K) by (conclude lemma_parallelsymmetric).
assert (TP A B C D) by (conclude lemma_paralleldef2B).
assert (TP E A H K) by (conclude lemma_paralleldef2B).
assert (TP G C K F) by (conclude lemma_paralleldef2B).
assert (TP B C A D) by (conclude lemma_paralleldef2B).
assert (OS A D B C) by (conclude_def TP ).
assert (OS A D C B) by (conclude lemma_samesideflip).
assert (OS D A C B) by (forward_using lemma_samesidesymmetric).
assert (OS C D A B) by (conclude_def TP ).
assert (OS H K E A) by (conclude_def TP ).
assert (OS K F G C) by (conclude_def TP ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (neq A H) by (forward_using lemma_betweennotequal).
assert (neq B G) by (forward_using lemma_betweennotequal).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists e, (BetS B A e /\\ Cong A e B A)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (BetS e A B) by (conclude axiom_betweennesssymmetry).
assert (OS D C A B) by (forward_using lemma_samesidesymmetric).
assert (RT D A B A B C) by (conclude proposition_29C).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert (BetS E A e) by (conclude lemma_3_6a).
assert (BetS e A E) by (conclude axiom_betweennesssymmetry).
assert (OS H K A E) by (forward_using lemma_samesidesymmetric).
assert (RT H A E A E K) by (conclude proposition_29C).
assert (Out A E B) by (conclude lemma_ray4).
assert (Out A H D) by (conclude lemma_ray4).
assert (nCol A H E) by (forward_using lemma_parallelNC).
assert (nCol E A H) by (forward_using lemma_NCorder).
assert (CongA E A H E A H) by (conclude lemma_equalanglesreflexive).

*****
H47 : CongA E A H E A H
H46 : nCol E A H
H45 : nCol A H E
H44 : Out A H D
H43 : Out A E B
H42 : RT H A E A E K
H41 : OS H K A E
H40 : BetS e A E
H39 : BetS E A e
H38 : BetS B E A
H37 : RT D A B A B C
H36 : OS D C A B
H35 : BetS e A B
H34 : Cong A e B A
H33 : BetS B A e
e : Point
H32 : neq B A
H31 : neq A B
H30 : neq B G
H29 : neq A H
H28 : neq A E
H27 : OS K F G C
H26 : OS H K E A
H25 : OS C D A B
H24 : OS D A C B
H23 : OS A D C B
H22 : OS A D B C
H21 : TP B C A D
H20 : TP G C K F
H19 : TP E A H K
H18 : TP A B C D
H17 : Par A H E K
H16 : Par C D A B
H15 : Par B C A D
H14 : Par G C K F
H13 : Par C F G K
H12 : Par F C G K
H11 : Par G K F C
H10 : Par E K A H
H9 : Par E A H K
H8 : Par A B C D
H7 : Par A D B C
H6 : PG G K F C
H5 : PG E A H K
H4 : BetS B G C
H3 : BetS D F C
H2 : BetS A E B
H1 : BetS A H D
H0 : PG A B C D
A,B,C,D,E,F,G,H,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
PG E K G B
+++++
assert (CongA E A H B A D) by (conclude lemma_equalangleshelper).
-----
Lemma proposition_43B : forall A B C D E F G H K, PG A B C D -> BetS A H D -> BetS A E B -> BetS D F C -> BetS B G C -> PG E A H K -> PG G K F C -> PG E K G B.
Proof.
intros.
assert (Par A D B C) by (conclude_def PG ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par E A H K) by (conclude_def PG ).
assert (Par E K A H) by (conclude_def PG ).
assert (Par G K F C) by (conclude_def PG ).
assert (Par F C G K) by (conclude lemma_parallelsymmetric).
assert (Par C F G K) by (forward_using lemma_parallelflip).
assert (Par G C K F) by (conclude_def PG ).
assert (Par B C A D) by (conclude lemma_parallelsymmetric).
assert (Par C D A B) by (conclude lemma_parallelsymmetric).
assert (Par A H E K) by (conclude lemma_parallelsymmetric).
assert (TP A B C D) by (conclude lemma_paralleldef2B).
assert (TP E A H K) by (conclude lemma_paralleldef2B).
assert (TP G C K F) by (conclude lemma_paralleldef2B).
assert (TP B C A D) by (conclude lemma_paralleldef2B).
assert (OS A D B C) by (conclude_def TP ).
assert (OS A D C B) by (conclude lemma_samesideflip).
assert (OS D A C B) by (forward_using lemma_samesidesymmetric).
assert (OS C D A B) by (conclude_def TP ).
assert (OS H K E A) by (conclude_def TP ).
assert (OS K F G C) by (conclude_def TP ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (neq A H) by (forward_using lemma_betweennotequal).
assert (neq B G) by (forward_using lemma_betweennotequal).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists e, (BetS B A e /\\ Cong A e B A)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (BetS e A B) by (conclude axiom_betweennesssymmetry).
assert (OS D C A B) by (forward_using lemma_samesidesymmetric).
assert (RT D A B A B C) by (conclude proposition_29C).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert (BetS E A e) by (conclude lemma_3_6a).
assert (BetS e A E) by (conclude axiom_betweennesssymmetry).
assert (OS H K A E) by (forward_using lemma_samesidesymmetric).
assert (RT H A E A E K) by (conclude proposition_29C).
assert (Out A E B) by (conclude lemma_ray4).
assert (Out A H D) by (conclude lemma_ray4).
assert (nCol A H E) by (forward_using lemma_parallelNC).
assert (nCol E A H) by (forward_using lemma_NCorder).
assert (CongA E A H E A H) by (conclude lemma_equalanglesreflexive).
assert (CongA E A H B A D) by (conclude lemma_equalangleshelper).

*****
H48 : CongA E A H B A D
H47 : CongA E A H E A H
H46 : nCol E A H
H45 : nCol A H E
H44 : Out A H D
H43 : Out A E B
H42 : RT H A E A E K
H41 : OS H K A E
H40 : BetS e A E
H39 : BetS E A e
H38 : BetS B E A
H37 : RT D A B A B C
H36 : OS D C A B
H35 : BetS e A B
H34 : Cong A e B A
H33 : BetS B A e
e : Point
H32 : neq B A
H31 : neq A B
H30 : neq B G
H29 : neq A H
H28 : neq A E
H27 : OS K F G C
H26 : OS H K E A
H25 : OS C D A B
H24 : OS D A C B
H23 : OS A D C B
H22 : OS A D B C
H21 : TP B C A D
H20 : TP G C K F
H19 : TP E A H K
H18 : TP A B C D
H17 : Par A H E K
H16 : Par C D A B
H15 : Par B C A D
H14 : Par G C K F
H13 : Par C F G K
H12 : Par F C G K
H11 : Par G K F C
H10 : Par E K A H
H9 : Par E A H K
H8 : Par A B C D
H7 : Par A D B C
H6 : PG G K F C
H5 : PG E A H K
H4 : BetS B G C
H3 : BetS D F C
H2 : BetS A E B
H1 : BetS A H D
H0 : PG A B C D
A,B,C,D,E,F,G,H,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
PG E K G B
+++++
assert (CongA H A E D A B) by (conclude lemma_equalanglesflip).
-----
Lemma proposition_43B : forall A B C D E F G H K, PG A B C D -> BetS A H D -> BetS A E B -> BetS D F C -> BetS B G C -> PG E A H K -> PG G K F C -> PG E K G B.
Proof.
intros.
assert (Par A D B C) by (conclude_def PG ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par E A H K) by (conclude_def PG ).
assert (Par E K A H) by (conclude_def PG ).
assert (Par G K F C) by (conclude_def PG ).
assert (Par F C G K) by (conclude lemma_parallelsymmetric).
assert (Par C F G K) by (forward_using lemma_parallelflip).
assert (Par G C K F) by (conclude_def PG ).
assert (Par B C A D) by (conclude lemma_parallelsymmetric).
assert (Par C D A B) by (conclude lemma_parallelsymmetric).
assert (Par A H E K) by (conclude lemma_parallelsymmetric).
assert (TP A B C D) by (conclude lemma_paralleldef2B).
assert (TP E A H K) by (conclude lemma_paralleldef2B).
assert (TP G C K F) by (conclude lemma_paralleldef2B).
assert (TP B C A D) by (conclude lemma_paralleldef2B).
assert (OS A D B C) by (conclude_def TP ).
assert (OS A D C B) by (conclude lemma_samesideflip).
assert (OS D A C B) by (forward_using lemma_samesidesymmetric).
assert (OS C D A B) by (conclude_def TP ).
assert (OS H K E A) by (conclude_def TP ).
assert (OS K F G C) by (conclude_def TP ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (neq A H) by (forward_using lemma_betweennotequal).
assert (neq B G) by (forward_using lemma_betweennotequal).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists e, (BetS B A e /\\ Cong A e B A)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (BetS e A B) by (conclude axiom_betweennesssymmetry).
assert (OS D C A B) by (forward_using lemma_samesidesymmetric).
assert (RT D A B A B C) by (conclude proposition_29C).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert (BetS E A e) by (conclude lemma_3_6a).
assert (BetS e A E) by (conclude axiom_betweennesssymmetry).
assert (OS H K A E) by (forward_using lemma_samesidesymmetric).
assert (RT H A E A E K) by (conclude proposition_29C).
assert (Out A E B) by (conclude lemma_ray4).
assert (Out A H D) by (conclude lemma_ray4).
assert (nCol A H E) by (forward_using lemma_parallelNC).
assert (nCol E A H) by (forward_using lemma_NCorder).
assert (CongA E A H E A H) by (conclude lemma_equalanglesreflexive).
assert (CongA E A H B A D) by (conclude lemma_equalangleshelper).
assert (CongA H A E D A B) by (conclude lemma_equalanglesflip).

*****
H49 : CongA H A E D A B
H48 : CongA E A H B A D
H47 : CongA E A H E A H
H46 : nCol E A H
H45 : nCol A H E
H44 : Out A H D
H43 : Out A E B
H42 : RT H A E A E K
H41 : OS H K A E
H40 : BetS e A E
H39 : BetS E A e
H38 : BetS B E A
H37 : RT D A B A B C
H36 : OS D C A B
H35 : BetS e A B
H34 : Cong A e B A
H33 : BetS B A e
e : Point
H32 : neq B A
H31 : neq A B
H30 : neq B G
H29 : neq A H
H28 : neq A E
H27 : OS K F G C
H26 : OS H K E A
H25 : OS C D A B
H24 : OS D A C B
H23 : OS A D C B
H22 : OS A D B C
H21 : TP B C A D
H20 : TP G C K F
H19 : TP E A H K
H18 : TP A B C D
H17 : Par A H E K
H16 : Par C D A B
H15 : Par B C A D
H14 : Par G C K F
H13 : Par C F G K
H12 : Par F C G K
H11 : Par G K F C
H10 : Par E K A H
H9 : Par E A H K
H8 : Par A B C D
H7 : Par A D B C
H6 : PG G K F C
H5 : PG E A H K
H4 : BetS B G C
H3 : BetS D F C
H2 : BetS A E B
H1 : BetS A H D
H0 : PG A B C D
A,B,C,D,E,F,G,H,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
PG E K G B
+++++
assert (CongA A E K A B C) by (apply (lemma_supplements2 H A E A B C D A B A E K);eauto).
-----
Lemma proposition_43B : forall A B C D E F G H K, PG A B C D -> BetS A H D -> BetS A E B -> BetS D F C -> BetS B G C -> PG E A H K -> PG G K F C -> PG E K G B.
Proof.
intros.
assert (Par A D B C) by (conclude_def PG ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par E A H K) by (conclude_def PG ).
assert (Par E K A H) by (conclude_def PG ).
assert (Par G K F C) by (conclude_def PG ).
assert (Par F C G K) by (conclude lemma_parallelsymmetric).
assert (Par C F G K) by (forward_using lemma_parallelflip).
assert (Par G C K F) by (conclude_def PG ).
assert (Par B C A D) by (conclude lemma_parallelsymmetric).
assert (Par C D A B) by (conclude lemma_parallelsymmetric).
assert (Par A H E K) by (conclude lemma_parallelsymmetric).
assert (TP A B C D) by (conclude lemma_paralleldef2B).
assert (TP E A H K) by (conclude lemma_paralleldef2B).
assert (TP G C K F) by (conclude lemma_paralleldef2B).
assert (TP B C A D) by (conclude lemma_paralleldef2B).
assert (OS A D B C) by (conclude_def TP ).
assert (OS A D C B) by (conclude lemma_samesideflip).
assert (OS D A C B) by (forward_using lemma_samesidesymmetric).
assert (OS C D A B) by (conclude_def TP ).
assert (OS H K E A) by (conclude_def TP ).
assert (OS K F G C) by (conclude_def TP ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (neq A H) by (forward_using lemma_betweennotequal).
assert (neq B G) by (forward_using lemma_betweennotequal).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists e, (BetS B A e /\\ Cong A e B A)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (BetS e A B) by (conclude axiom_betweennesssymmetry).
assert (OS D C A B) by (forward_using lemma_samesidesymmetric).
assert (RT D A B A B C) by (conclude proposition_29C).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert (BetS E A e) by (conclude lemma_3_6a).
assert (BetS e A E) by (conclude axiom_betweennesssymmetry).
assert (OS H K A E) by (forward_using lemma_samesidesymmetric).
assert (RT H A E A E K) by (conclude proposition_29C).
assert (Out A E B) by (conclude lemma_ray4).
assert (Out A H D) by (conclude lemma_ray4).
assert (nCol A H E) by (forward_using lemma_parallelNC).
assert (nCol E A H) by (forward_using lemma_NCorder).
assert (CongA E A H E A H) by (conclude lemma_equalanglesreflexive).
assert (CongA E A H B A D) by (conclude lemma_equalangleshelper).
assert (CongA H A E D A B) by (conclude lemma_equalanglesflip).
assert (CongA A E K A B C) by (apply (lemma_supplements2 H A E A B C D A B A E K);eauto).

*****
H50 : CongA A E K A B C
H49 : CongA H A E D A B
H48 : CongA E A H B A D
H47 : CongA E A H E A H
H46 : nCol E A H
H45 : nCol A H E
H44 : Out A H D
H43 : Out A E B
H42 : RT H A E A E K
H41 : OS H K A E
H40 : BetS e A E
H39 : BetS E A e
H38 : BetS B E A
H37 : RT D A B A B C
H36 : OS D C A B
H35 : BetS e A B
H34 : Cong A e B A
H33 : BetS B A e
e : Point
H32 : neq B A
H31 : neq A B
H30 : neq B G
H29 : neq A H
H28 : neq A E
H27 : OS K F G C
H26 : OS H K E A
H25 : OS C D A B
H24 : OS D A C B
H23 : OS A D C B
H22 : OS A D B C
H21 : TP B C A D
H20 : TP G C K F
H19 : TP E A H K
H18 : TP A B C D
H17 : Par A H E K
H16 : Par C D A B
H15 : Par B C A D
H14 : Par G C K F
H13 : Par C F G K
H12 : Par F C G K
H11 : Par G K F C
H10 : Par E K A H
H9 : Par E A H K
H8 : Par A B C D
H7 : Par A D B C
H6 : PG G K F C
H5 : PG E A H K
H4 : BetS B G C
H3 : BetS D F C
H2 : BetS A E B
H1 : BetS A H D
H0 : PG A B C D
A,B,C,D,E,F,G,H,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
PG E K G B
+++++
assert (OS C D B A) by (conclude lemma_samesideflip).
-----
Lemma proposition_43B : forall A B C D E F G H K, PG A B C D -> BetS A H D -> BetS A E B -> BetS D F C -> BetS B G C -> PG E A H K -> PG G K F C -> PG E K G B.
Proof.
intros.
assert (Par A D B C) by (conclude_def PG ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par E A H K) by (conclude_def PG ).
assert (Par E K A H) by (conclude_def PG ).
assert (Par G K F C) by (conclude_def PG ).
assert (Par F C G K) by (conclude lemma_parallelsymmetric).
assert (Par C F G K) by (forward_using lemma_parallelflip).
assert (Par G C K F) by (conclude_def PG ).
assert (Par B C A D) by (conclude lemma_parallelsymmetric).
assert (Par C D A B) by (conclude lemma_parallelsymmetric).
assert (Par A H E K) by (conclude lemma_parallelsymmetric).
assert (TP A B C D) by (conclude lemma_paralleldef2B).
assert (TP E A H K) by (conclude lemma_paralleldef2B).
assert (TP G C K F) by (conclude lemma_paralleldef2B).
assert (TP B C A D) by (conclude lemma_paralleldef2B).
assert (OS A D B C) by (conclude_def TP ).
assert (OS A D C B) by (conclude lemma_samesideflip).
assert (OS D A C B) by (forward_using lemma_samesidesymmetric).
assert (OS C D A B) by (conclude_def TP ).
assert (OS H K E A) by (conclude_def TP ).
assert (OS K F G C) by (conclude_def TP ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (neq A H) by (forward_using lemma_betweennotequal).
assert (neq B G) by (forward_using lemma_betweennotequal).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists e, (BetS B A e /\\ Cong A e B A)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (BetS e A B) by (conclude axiom_betweennesssymmetry).
assert (OS D C A B) by (forward_using lemma_samesidesymmetric).
assert (RT D A B A B C) by (conclude proposition_29C).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert (BetS E A e) by (conclude lemma_3_6a).
assert (BetS e A E) by (conclude axiom_betweennesssymmetry).
assert (OS H K A E) by (forward_using lemma_samesidesymmetric).
assert (RT H A E A E K) by (conclude proposition_29C).
assert (Out A E B) by (conclude lemma_ray4).
assert (Out A H D) by (conclude lemma_ray4).
assert (nCol A H E) by (forward_using lemma_parallelNC).
assert (nCol E A H) by (forward_using lemma_NCorder).
assert (CongA E A H E A H) by (conclude lemma_equalanglesreflexive).
assert (CongA E A H B A D) by (conclude lemma_equalangleshelper).
assert (CongA H A E D A B) by (conclude lemma_equalanglesflip).
assert (CongA A E K A B C) by (apply (lemma_supplements2 H A E A B C D A B A E K);eauto).
assert (OS C D B A) by (conclude lemma_samesideflip).

*****
H51 : OS C D B A
H50 : CongA A E K A B C
H49 : CongA H A E D A B
H48 : CongA E A H B A D
H47 : CongA E A H E A H
H46 : nCol E A H
H45 : nCol A H E
H44 : Out A H D
H43 : Out A E B
H42 : RT H A E A E K
H41 : OS H K A E
H40 : BetS e A E
H39 : BetS E A e
H38 : BetS B E A
H37 : RT D A B A B C
H36 : OS D C A B
H35 : BetS e A B
H34 : Cong A e B A
H33 : BetS B A e
e : Point
H32 : neq B A
H31 : neq A B
H30 : neq B G
H29 : neq A H
H28 : neq A E
H27 : OS K F G C
H26 : OS H K E A
H25 : OS C D A B
H24 : OS D A C B
H23 : OS A D C B
H22 : OS A D B C
H21 : TP B C A D
H20 : TP G C K F
H19 : TP E A H K
H18 : TP A B C D
H17 : Par A H E K
H16 : Par C D A B
H15 : Par B C A D
H14 : Par G C K F
H13 : Par C F G K
H12 : Par F C G K
H11 : Par G K F C
H10 : Par E K A H
H9 : Par E A H K
H8 : Par A B C D
H7 : Par A D B C
H6 : PG G K F C
H5 : PG E A H K
H4 : BetS B G C
H3 : BetS D F C
H2 : BetS A E B
H1 : BetS A H D
H0 : PG A B C D
A,B,C,D,E,F,G,H,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
PG E K G B
+++++
assert (Col A E B) by (conclude_def Col ).
-----
Lemma proposition_43B : forall A B C D E F G H K, PG A B C D -> BetS A H D -> BetS A E B -> BetS D F C -> BetS B G C -> PG E A H K -> PG G K F C -> PG E K G B.
Proof.
intros.
assert (Par A D B C) by (conclude_def PG ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par E A H K) by (conclude_def PG ).
assert (Par E K A H) by (conclude_def PG ).
assert (Par G K F C) by (conclude_def PG ).
assert (Par F C G K) by (conclude lemma_parallelsymmetric).
assert (Par C F G K) by (forward_using lemma_parallelflip).
assert (Par G C K F) by (conclude_def PG ).
assert (Par B C A D) by (conclude lemma_parallelsymmetric).
assert (Par C D A B) by (conclude lemma_parallelsymmetric).
assert (Par A H E K) by (conclude lemma_parallelsymmetric).
assert (TP A B C D) by (conclude lemma_paralleldef2B).
assert (TP E A H K) by (conclude lemma_paralleldef2B).
assert (TP G C K F) by (conclude lemma_paralleldef2B).
assert (TP B C A D) by (conclude lemma_paralleldef2B).
assert (OS A D B C) by (conclude_def TP ).
assert (OS A D C B) by (conclude lemma_samesideflip).
assert (OS D A C B) by (forward_using lemma_samesidesymmetric).
assert (OS C D A B) by (conclude_def TP ).
assert (OS H K E A) by (conclude_def TP ).
assert (OS K F G C) by (conclude_def TP ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (neq A H) by (forward_using lemma_betweennotequal).
assert (neq B G) by (forward_using lemma_betweennotequal).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists e, (BetS B A e /\\ Cong A e B A)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (BetS e A B) by (conclude axiom_betweennesssymmetry).
assert (OS D C A B) by (forward_using lemma_samesidesymmetric).
assert (RT D A B A B C) by (conclude proposition_29C).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert (BetS E A e) by (conclude lemma_3_6a).
assert (BetS e A E) by (conclude axiom_betweennesssymmetry).
assert (OS H K A E) by (forward_using lemma_samesidesymmetric).
assert (RT H A E A E K) by (conclude proposition_29C).
assert (Out A E B) by (conclude lemma_ray4).
assert (Out A H D) by (conclude lemma_ray4).
assert (nCol A H E) by (forward_using lemma_parallelNC).
assert (nCol E A H) by (forward_using lemma_NCorder).
assert (CongA E A H E A H) by (conclude lemma_equalanglesreflexive).
assert (CongA E A H B A D) by (conclude lemma_equalangleshelper).
assert (CongA H A E D A B) by (conclude lemma_equalanglesflip).
assert (CongA A E K A B C) by (apply (lemma_supplements2 H A E A B C D A B A E K);eauto).
assert (OS C D B A) by (conclude lemma_samesideflip).
assert (Col A E B) by (conclude_def Col ).

*****
H52 : Col A E B
H51 : OS C D B A
H50 : CongA A E K A B C
H49 : CongA H A E D A B
H48 : CongA E A H B A D
H47 : CongA E A H E A H
H46 : nCol E A H
H45 : nCol A H E
H44 : Out A H D
H43 : Out A E B
H42 : RT H A E A E K
H41 : OS H K A E
H40 : BetS e A E
H39 : BetS E A e
H38 : BetS B E A
H37 : RT D A B A B C
H36 : OS D C A B
H35 : BetS e A B
H34 : Cong A e B A
H33 : BetS B A e
e : Point
H32 : neq B A
H31 : neq A B
H30 : neq B G
H29 : neq A H
H28 : neq A E
H27 : OS K F G C
H26 : OS H K E A
H25 : OS C D A B
H24 : OS D A C B
H23 : OS A D C B
H22 : OS A D B C
H21 : TP B C A D
H20 : TP G C K F
H19 : TP E A H K
H18 : TP A B C D
H17 : Par A H E K
H16 : Par C D A B
H15 : Par B C A D
H14 : Par G C K F
H13 : Par C F G K
H12 : Par F C G K
H11 : Par G K F C
H10 : Par E K A H
H9 : Par E A H K
H8 : Par A B C D
H7 : Par A D B C
H6 : PG G K F C
H5 : PG E A H K
H4 : BetS B G C
H3 : BetS D F C
H2 : BetS A E B
H1 : BetS A H D
H0 : PG A B C D
A,B,C,D,E,F,G,H,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
PG E K G B
+++++
assert (Col B A E) by (forward_using lemma_collinearorder).
-----
Lemma proposition_43B : forall A B C D E F G H K, PG A B C D -> BetS A H D -> BetS A E B -> BetS D F C -> BetS B G C -> PG E A H K -> PG G K F C -> PG E K G B.
Proof.
intros.
assert (Par A D B C) by (conclude_def PG ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par E A H K) by (conclude_def PG ).
assert (Par E K A H) by (conclude_def PG ).
assert (Par G K F C) by (conclude_def PG ).
assert (Par F C G K) by (conclude lemma_parallelsymmetric).
assert (Par C F G K) by (forward_using lemma_parallelflip).
assert (Par G C K F) by (conclude_def PG ).
assert (Par B C A D) by (conclude lemma_parallelsymmetric).
assert (Par C D A B) by (conclude lemma_parallelsymmetric).
assert (Par A H E K) by (conclude lemma_parallelsymmetric).
assert (TP A B C D) by (conclude lemma_paralleldef2B).
assert (TP E A H K) by (conclude lemma_paralleldef2B).
assert (TP G C K F) by (conclude lemma_paralleldef2B).
assert (TP B C A D) by (conclude lemma_paralleldef2B).
assert (OS A D B C) by (conclude_def TP ).
assert (OS A D C B) by (conclude lemma_samesideflip).
assert (OS D A C B) by (forward_using lemma_samesidesymmetric).
assert (OS C D A B) by (conclude_def TP ).
assert (OS H K E A) by (conclude_def TP ).
assert (OS K F G C) by (conclude_def TP ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (neq A H) by (forward_using lemma_betweennotequal).
assert (neq B G) by (forward_using lemma_betweennotequal).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists e, (BetS B A e /\\ Cong A e B A)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (BetS e A B) by (conclude axiom_betweennesssymmetry).
assert (OS D C A B) by (forward_using lemma_samesidesymmetric).
assert (RT D A B A B C) by (conclude proposition_29C).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert (BetS E A e) by (conclude lemma_3_6a).
assert (BetS e A E) by (conclude axiom_betweennesssymmetry).
assert (OS H K A E) by (forward_using lemma_samesidesymmetric).
assert (RT H A E A E K) by (conclude proposition_29C).
assert (Out A E B) by (conclude lemma_ray4).
assert (Out A H D) by (conclude lemma_ray4).
assert (nCol A H E) by (forward_using lemma_parallelNC).
assert (nCol E A H) by (forward_using lemma_NCorder).
assert (CongA E A H E A H) by (conclude lemma_equalanglesreflexive).
assert (CongA E A H B A D) by (conclude lemma_equalangleshelper).
assert (CongA H A E D A B) by (conclude lemma_equalanglesflip).
assert (CongA A E K A B C) by (apply (lemma_supplements2 H A E A B C D A B A E K);eauto).
assert (OS C D B A) by (conclude lemma_samesideflip).
assert (Col A E B) by (conclude_def Col ).
assert (Col B A E) by (forward_using lemma_collinearorder).

*****
H53 : Col B A E
H52 : Col A E B
H51 : OS C D B A
H50 : CongA A E K A B C
H49 : CongA H A E D A B
H48 : CongA E A H B A D
H47 : CongA E A H E A H
H46 : nCol E A H
H45 : nCol A H E
H44 : Out A H D
H43 : Out A E B
H42 : RT H A E A E K
H41 : OS H K A E
H40 : BetS e A E
H39 : BetS E A e
H38 : BetS B E A
H37 : RT D A B A B C
H36 : OS D C A B
H35 : BetS e A B
H34 : Cong A e B A
H33 : BetS B A e
e : Point
H32 : neq B A
H31 : neq A B
H30 : neq B G
H29 : neq A H
H28 : neq A E
H27 : OS K F G C
H26 : OS H K E A
H25 : OS C D A B
H24 : OS D A C B
H23 : OS A D C B
H22 : OS A D B C
H21 : TP B C A D
H20 : TP G C K F
H19 : TP E A H K
H18 : TP A B C D
H17 : Par A H E K
H16 : Par C D A B
H15 : Par B C A D
H14 : Par G C K F
H13 : Par C F G K
H12 : Par F C G K
H11 : Par G K F C
H10 : Par E K A H
H9 : Par E A H K
H8 : Par A B C D
H7 : Par A D B C
H6 : PG G K F C
H5 : PG E A H K
H4 : BetS B G C
H3 : BetS D F C
H2 : BetS A E B
H1 : BetS A H D
H0 : PG A B C D
A,B,C,D,E,F,G,H,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
PG E K G B
+++++
assert (neq E B) by (forward_using lemma_betweennotequal).
-----
Lemma proposition_43B : forall A B C D E F G H K, PG A B C D -> BetS A H D -> BetS A E B -> BetS D F C -> BetS B G C -> PG E A H K -> PG G K F C -> PG E K G B.
Proof.
intros.
assert (Par A D B C) by (conclude_def PG ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par E A H K) by (conclude_def PG ).
assert (Par E K A H) by (conclude_def PG ).
assert (Par G K F C) by (conclude_def PG ).
assert (Par F C G K) by (conclude lemma_parallelsymmetric).
assert (Par C F G K) by (forward_using lemma_parallelflip).
assert (Par G C K F) by (conclude_def PG ).
assert (Par B C A D) by (conclude lemma_parallelsymmetric).
assert (Par C D A B) by (conclude lemma_parallelsymmetric).
assert (Par A H E K) by (conclude lemma_parallelsymmetric).
assert (TP A B C D) by (conclude lemma_paralleldef2B).
assert (TP E A H K) by (conclude lemma_paralleldef2B).
assert (TP G C K F) by (conclude lemma_paralleldef2B).
assert (TP B C A D) by (conclude lemma_paralleldef2B).
assert (OS A D B C) by (conclude_def TP ).
assert (OS A D C B) by (conclude lemma_samesideflip).
assert (OS D A C B) by (forward_using lemma_samesidesymmetric).
assert (OS C D A B) by (conclude_def TP ).
assert (OS H K E A) by (conclude_def TP ).
assert (OS K F G C) by (conclude_def TP ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (neq A H) by (forward_using lemma_betweennotequal).
assert (neq B G) by (forward_using lemma_betweennotequal).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists e, (BetS B A e /\\ Cong A e B A)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (BetS e A B) by (conclude axiom_betweennesssymmetry).
assert (OS D C A B) by (forward_using lemma_samesidesymmetric).
assert (RT D A B A B C) by (conclude proposition_29C).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert (BetS E A e) by (conclude lemma_3_6a).
assert (BetS e A E) by (conclude axiom_betweennesssymmetry).
assert (OS H K A E) by (forward_using lemma_samesidesymmetric).
assert (RT H A E A E K) by (conclude proposition_29C).
assert (Out A E B) by (conclude lemma_ray4).
assert (Out A H D) by (conclude lemma_ray4).
assert (nCol A H E) by (forward_using lemma_parallelNC).
assert (nCol E A H) by (forward_using lemma_NCorder).
assert (CongA E A H E A H) by (conclude lemma_equalanglesreflexive).
assert (CongA E A H B A D) by (conclude lemma_equalangleshelper).
assert (CongA H A E D A B) by (conclude lemma_equalanglesflip).
assert (CongA A E K A B C) by (apply (lemma_supplements2 H A E A B C D A B A E K);eauto).
assert (OS C D B A) by (conclude lemma_samesideflip).
assert (Col A E B) by (conclude_def Col ).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq E B) by (forward_using lemma_betweennotequal).

*****
H54 : neq E B
H53 : Col B A E
H52 : Col A E B
H51 : OS C D B A
H50 : CongA A E K A B C
H49 : CongA H A E D A B
H48 : CongA E A H B A D
H47 : CongA E A H E A H
H46 : nCol E A H
H45 : nCol A H E
H44 : Out A H D
H43 : Out A E B
H42 : RT H A E A E K
H41 : OS H K A E
H40 : BetS e A E
H39 : BetS E A e
H38 : BetS B E A
H37 : RT D A B A B C
H36 : OS D C A B
H35 : BetS e A B
H34 : Cong A e B A
H33 : BetS B A e
e : Point
H32 : neq B A
H31 : neq A B
H30 : neq B G
H29 : neq A H
H28 : neq A E
H27 : OS K F G C
H26 : OS H K E A
H25 : OS C D A B
H24 : OS D A C B
H23 : OS A D C B
H22 : OS A D B C
H21 : TP B C A D
H20 : TP G C K F
H19 : TP E A H K
H18 : TP A B C D
H17 : Par A H E K
H16 : Par C D A B
H15 : Par B C A D
H14 : Par G C K F
H13 : Par C F G K
H12 : Par F C G K
H11 : Par G K F C
H10 : Par E K A H
H9 : Par E A H K
H8 : Par A B C D
H7 : Par A D B C
H6 : PG G K F C
H5 : PG E A H K
H4 : BetS B G C
H3 : BetS D F C
H2 : BetS A E B
H1 : BetS A H D
H0 : PG A B C D
A,B,C,D,E,F,G,H,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
PG E K G B
+++++
assert (neq B E) by (conclude lemma_inequalitysymmetric).
-----
Lemma proposition_43B : forall A B C D E F G H K, PG A B C D -> BetS A H D -> BetS A E B -> BetS D F C -> BetS B G C -> PG E A H K -> PG G K F C -> PG E K G B.
Proof.
intros.
assert (Par A D B C) by (conclude_def PG ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par E A H K) by (conclude_def PG ).
assert (Par E K A H) by (conclude_def PG ).
assert (Par G K F C) by (conclude_def PG ).
assert (Par F C G K) by (conclude lemma_parallelsymmetric).
assert (Par C F G K) by (forward_using lemma_parallelflip).
assert (Par G C K F) by (conclude_def PG ).
assert (Par B C A D) by (conclude lemma_parallelsymmetric).
assert (Par C D A B) by (conclude lemma_parallelsymmetric).
assert (Par A H E K) by (conclude lemma_parallelsymmetric).
assert (TP A B C D) by (conclude lemma_paralleldef2B).
assert (TP E A H K) by (conclude lemma_paralleldef2B).
assert (TP G C K F) by (conclude lemma_paralleldef2B).
assert (TP B C A D) by (conclude lemma_paralleldef2B).
assert (OS A D B C) by (conclude_def TP ).
assert (OS A D C B) by (conclude lemma_samesideflip).
assert (OS D A C B) by (forward_using lemma_samesidesymmetric).
assert (OS C D A B) by (conclude_def TP ).
assert (OS H K E A) by (conclude_def TP ).
assert (OS K F G C) by (conclude_def TP ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (neq A H) by (forward_using lemma_betweennotequal).
assert (neq B G) by (forward_using lemma_betweennotequal).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists e, (BetS B A e /\\ Cong A e B A)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (BetS e A B) by (conclude axiom_betweennesssymmetry).
assert (OS D C A B) by (forward_using lemma_samesidesymmetric).
assert (RT D A B A B C) by (conclude proposition_29C).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert (BetS E A e) by (conclude lemma_3_6a).
assert (BetS e A E) by (conclude axiom_betweennesssymmetry).
assert (OS H K A E) by (forward_using lemma_samesidesymmetric).
assert (RT H A E A E K) by (conclude proposition_29C).
assert (Out A E B) by (conclude lemma_ray4).
assert (Out A H D) by (conclude lemma_ray4).
assert (nCol A H E) by (forward_using lemma_parallelNC).
assert (nCol E A H) by (forward_using lemma_NCorder).
assert (CongA E A H E A H) by (conclude lemma_equalanglesreflexive).
assert (CongA E A H B A D) by (conclude lemma_equalangleshelper).
assert (CongA H A E D A B) by (conclude lemma_equalanglesflip).
assert (CongA A E K A B C) by (apply (lemma_supplements2 H A E A B C D A B A E K);eauto).
assert (OS C D B A) by (conclude lemma_samesideflip).
assert (Col A E B) by (conclude_def Col ).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq E B) by (forward_using lemma_betweennotequal).
assert (neq B E) by (conclude lemma_inequalitysymmetric).

*****
H55 : neq B E
H54 : neq E B
H53 : Col B A E
H52 : Col A E B
H51 : OS C D B A
H50 : CongA A E K A B C
H49 : CongA H A E D A B
H48 : CongA E A H B A D
H47 : CongA E A H E A H
H46 : nCol E A H
H45 : nCol A H E
H44 : Out A H D
H43 : Out A E B
H42 : RT H A E A E K
H41 : OS H K A E
H40 : BetS e A E
H39 : BetS E A e
H38 : BetS B E A
H37 : RT D A B A B C
H36 : OS D C A B
H35 : BetS e A B
H34 : Cong A e B A
H33 : BetS B A e
e : Point
H32 : neq B A
H31 : neq A B
H30 : neq B G
H29 : neq A H
H28 : neq A E
H27 : OS K F G C
H26 : OS H K E A
H25 : OS C D A B
H24 : OS D A C B
H23 : OS A D C B
H22 : OS A D B C
H21 : TP B C A D
H20 : TP G C K F
H19 : TP E A H K
H18 : TP A B C D
H17 : Par A H E K
H16 : Par C D A B
H15 : Par B C A D
H14 : Par G C K F
H13 : Par C F G K
H12 : Par F C G K
H11 : Par G K F C
H10 : Par E K A H
H9 : Par E A H K
H8 : Par A B C D
H7 : Par A D B C
H6 : PG G K F C
H5 : PG E A H K
H4 : BetS B G C
H3 : BetS D F C
H2 : BetS A E B
H1 : BetS A H D
H0 : PG A B C D
A,B,C,D,E,F,G,H,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
PG E K G B
+++++
assert (OS C D B E) by (conclude lemma_samesidecollinear).
-----
Lemma proposition_43B : forall A B C D E F G H K, PG A B C D -> BetS A H D -> BetS A E B -> BetS D F C -> BetS B G C -> PG E A H K -> PG G K F C -> PG E K G B.
Proof.
intros.
assert (Par A D B C) by (conclude_def PG ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par E A H K) by (conclude_def PG ).
assert (Par E K A H) by (conclude_def PG ).
assert (Par G K F C) by (conclude_def PG ).
assert (Par F C G K) by (conclude lemma_parallelsymmetric).
assert (Par C F G K) by (forward_using lemma_parallelflip).
assert (Par G C K F) by (conclude_def PG ).
assert (Par B C A D) by (conclude lemma_parallelsymmetric).
assert (Par C D A B) by (conclude lemma_parallelsymmetric).
assert (Par A H E K) by (conclude lemma_parallelsymmetric).
assert (TP A B C D) by (conclude lemma_paralleldef2B).
assert (TP E A H K) by (conclude lemma_paralleldef2B).
assert (TP G C K F) by (conclude lemma_paralleldef2B).
assert (TP B C A D) by (conclude lemma_paralleldef2B).
assert (OS A D B C) by (conclude_def TP ).
assert (OS A D C B) by (conclude lemma_samesideflip).
assert (OS D A C B) by (forward_using lemma_samesidesymmetric).
assert (OS C D A B) by (conclude_def TP ).
assert (OS H K E A) by (conclude_def TP ).
assert (OS K F G C) by (conclude_def TP ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (neq A H) by (forward_using lemma_betweennotequal).
assert (neq B G) by (forward_using lemma_betweennotequal).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists e, (BetS B A e /\\ Cong A e B A)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (BetS e A B) by (conclude axiom_betweennesssymmetry).
assert (OS D C A B) by (forward_using lemma_samesidesymmetric).
assert (RT D A B A B C) by (conclude proposition_29C).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert (BetS E A e) by (conclude lemma_3_6a).
assert (BetS e A E) by (conclude axiom_betweennesssymmetry).
assert (OS H K A E) by (forward_using lemma_samesidesymmetric).
assert (RT H A E A E K) by (conclude proposition_29C).
assert (Out A E B) by (conclude lemma_ray4).
assert (Out A H D) by (conclude lemma_ray4).
assert (nCol A H E) by (forward_using lemma_parallelNC).
assert (nCol E A H) by (forward_using lemma_NCorder).
assert (CongA E A H E A H) by (conclude lemma_equalanglesreflexive).
assert (CongA E A H B A D) by (conclude lemma_equalangleshelper).
assert (CongA H A E D A B) by (conclude lemma_equalanglesflip).
assert (CongA A E K A B C) by (apply (lemma_supplements2 H A E A B C D A B A E K);eauto).
assert (OS C D B A) by (conclude lemma_samesideflip).
assert (Col A E B) by (conclude_def Col ).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq E B) by (forward_using lemma_betweennotequal).
assert (neq B E) by (conclude lemma_inequalitysymmetric).
assert (OS C D B E) by (conclude lemma_samesidecollinear).

*****
H56 : OS C D B E
H55 : neq B E
H54 : neq E B
H53 : Col B A E
H52 : Col A E B
H51 : OS C D B A
H50 : CongA A E K A B C
H49 : CongA H A E D A B
H48 : CongA E A H B A D
H47 : CongA E A H E A H
H46 : nCol E A H
H45 : nCol A H E
H44 : Out A H D
H43 : Out A E B
H42 : RT H A E A E K
H41 : OS H K A E
H40 : BetS e A E
H39 : BetS E A e
H38 : BetS B E A
H37 : RT D A B A B C
H36 : OS D C A B
H35 : BetS e A B
H34 : Cong A e B A
H33 : BetS B A e
e : Point
H32 : neq B A
H31 : neq A B
H30 : neq B G
H29 : neq A H
H28 : neq A E
H27 : OS K F G C
H26 : OS H K E A
H25 : OS C D A B
H24 : OS D A C B
H23 : OS A D C B
H22 : OS A D B C
H21 : TP B C A D
H20 : TP G C K F
H19 : TP E A H K
H18 : TP A B C D
H17 : Par A H E K
H16 : Par C D A B
H15 : Par B C A D
H14 : Par G C K F
H13 : Par C F G K
H12 : Par F C G K
H11 : Par G K F C
H10 : Par E K A H
H9 : Par E A H K
H8 : Par A B C D
H7 : Par A D B C
H6 : PG G K F C
H5 : PG E A H K
H4 : BetS B G C
H3 : BetS D F C
H2 : BetS A E B
H1 : BetS A H D
H0 : PG A B C D
A,B,C,D,E,F,G,H,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
PG E K G B
+++++
assert (Out A H D) by (conclude lemma_ray4).
-----
Lemma proposition_43B : forall A B C D E F G H K, PG A B C D -> BetS A H D -> BetS A E B -> BetS D F C -> BetS B G C -> PG E A H K -> PG G K F C -> PG E K G B.
Proof.
intros.
assert (Par A D B C) by (conclude_def PG ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par E A H K) by (conclude_def PG ).
assert (Par E K A H) by (conclude_def PG ).
assert (Par G K F C) by (conclude_def PG ).
assert (Par F C G K) by (conclude lemma_parallelsymmetric).
assert (Par C F G K) by (forward_using lemma_parallelflip).
assert (Par G C K F) by (conclude_def PG ).
assert (Par B C A D) by (conclude lemma_parallelsymmetric).
assert (Par C D A B) by (conclude lemma_parallelsymmetric).
assert (Par A H E K) by (conclude lemma_parallelsymmetric).
assert (TP A B C D) by (conclude lemma_paralleldef2B).
assert (TP E A H K) by (conclude lemma_paralleldef2B).
assert (TP G C K F) by (conclude lemma_paralleldef2B).
assert (TP B C A D) by (conclude lemma_paralleldef2B).
assert (OS A D B C) by (conclude_def TP ).
assert (OS A D C B) by (conclude lemma_samesideflip).
assert (OS D A C B) by (forward_using lemma_samesidesymmetric).
assert (OS C D A B) by (conclude_def TP ).
assert (OS H K E A) by (conclude_def TP ).
assert (OS K F G C) by (conclude_def TP ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (neq A H) by (forward_using lemma_betweennotequal).
assert (neq B G) by (forward_using lemma_betweennotequal).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists e, (BetS B A e /\\ Cong A e B A)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (BetS e A B) by (conclude axiom_betweennesssymmetry).
assert (OS D C A B) by (forward_using lemma_samesidesymmetric).
assert (RT D A B A B C) by (conclude proposition_29C).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert (BetS E A e) by (conclude lemma_3_6a).
assert (BetS e A E) by (conclude axiom_betweennesssymmetry).
assert (OS H K A E) by (forward_using lemma_samesidesymmetric).
assert (RT H A E A E K) by (conclude proposition_29C).
assert (Out A E B) by (conclude lemma_ray4).
assert (Out A H D) by (conclude lemma_ray4).
assert (nCol A H E) by (forward_using lemma_parallelNC).
assert (nCol E A H) by (forward_using lemma_NCorder).
assert (CongA E A H E A H) by (conclude lemma_equalanglesreflexive).
assert (CongA E A H B A D) by (conclude lemma_equalangleshelper).
assert (CongA H A E D A B) by (conclude lemma_equalanglesflip).
assert (CongA A E K A B C) by (apply (lemma_supplements2 H A E A B C D A B A E K);eauto).
assert (OS C D B A) by (conclude lemma_samesideflip).
assert (Col A E B) by (conclude_def Col ).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq E B) by (forward_using lemma_betweennotequal).
assert (neq B E) by (conclude lemma_inequalitysymmetric).
assert (OS C D B E) by (conclude lemma_samesidecollinear).
assert (Out A H D) by (conclude lemma_ray4).

*****
H57 : Out A H D
H56 : OS C D B E
H55 : neq B E
H54 : neq E B
H53 : Col B A E
H52 : Col A E B
H51 : OS C D B A
H50 : CongA A E K A B C
H49 : CongA H A E D A B
H48 : CongA E A H B A D
H47 : CongA E A H E A H
H46 : nCol E A H
H45 : nCol A H E
H44 : Out A H D
H43 : Out A E B
H42 : RT H A E A E K
H41 : OS H K A E
H40 : BetS e A E
H39 : BetS E A e
H38 : BetS B E A
H37 : RT D A B A B C
H36 : OS D C A B
H35 : BetS e A B
H34 : Cong A e B A
H33 : BetS B A e
e : Point
H32 : neq B A
H31 : neq A B
H30 : neq B G
H29 : neq A H
H28 : neq A E
H27 : OS K F G C
H26 : OS H K E A
H25 : OS C D A B
H24 : OS D A C B
H23 : OS A D C B
H22 : OS A D B C
H21 : TP B C A D
H20 : TP G C K F
H19 : TP E A H K
H18 : TP A B C D
H17 : Par A H E K
H16 : Par C D A B
H15 : Par B C A D
H14 : Par G C K F
H13 : Par C F G K
H12 : Par F C G K
H11 : Par G K F C
H10 : Par E K A H
H9 : Par E A H K
H8 : Par A B C D
H7 : Par A D B C
H6 : PG G K F C
H5 : PG E A H K
H4 : BetS B G C
H3 : BetS D F C
H2 : BetS A E B
H1 : BetS A H D
H0 : PG A B C D
A,B,C,D,E,F,G,H,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
PG E K G B
+++++
assert (Out A D H) by (conclude lemma_ray5).
-----
Lemma proposition_43B : forall A B C D E F G H K, PG A B C D -> BetS A H D -> BetS A E B -> BetS D F C -> BetS B G C -> PG E A H K -> PG G K F C -> PG E K G B.
Proof.
intros.
assert (Par A D B C) by (conclude_def PG ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par E A H K) by (conclude_def PG ).
assert (Par E K A H) by (conclude_def PG ).
assert (Par G K F C) by (conclude_def PG ).
assert (Par F C G K) by (conclude lemma_parallelsymmetric).
assert (Par C F G K) by (forward_using lemma_parallelflip).
assert (Par G C K F) by (conclude_def PG ).
assert (Par B C A D) by (conclude lemma_parallelsymmetric).
assert (Par C D A B) by (conclude lemma_parallelsymmetric).
assert (Par A H E K) by (conclude lemma_parallelsymmetric).
assert (TP A B C D) by (conclude lemma_paralleldef2B).
assert (TP E A H K) by (conclude lemma_paralleldef2B).
assert (TP G C K F) by (conclude lemma_paralleldef2B).
assert (TP B C A D) by (conclude lemma_paralleldef2B).
assert (OS A D B C) by (conclude_def TP ).
assert (OS A D C B) by (conclude lemma_samesideflip).
assert (OS D A C B) by (forward_using lemma_samesidesymmetric).
assert (OS C D A B) by (conclude_def TP ).
assert (OS H K E A) by (conclude_def TP ).
assert (OS K F G C) by (conclude_def TP ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (neq A H) by (forward_using lemma_betweennotequal).
assert (neq B G) by (forward_using lemma_betweennotequal).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists e, (BetS B A e /\\ Cong A e B A)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (BetS e A B) by (conclude axiom_betweennesssymmetry).
assert (OS D C A B) by (forward_using lemma_samesidesymmetric).
assert (RT D A B A B C) by (conclude proposition_29C).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert (BetS E A e) by (conclude lemma_3_6a).
assert (BetS e A E) by (conclude axiom_betweennesssymmetry).
assert (OS H K A E) by (forward_using lemma_samesidesymmetric).
assert (RT H A E A E K) by (conclude proposition_29C).
assert (Out A E B) by (conclude lemma_ray4).
assert (Out A H D) by (conclude lemma_ray4).
assert (nCol A H E) by (forward_using lemma_parallelNC).
assert (nCol E A H) by (forward_using lemma_NCorder).
assert (CongA E A H E A H) by (conclude lemma_equalanglesreflexive).
assert (CongA E A H B A D) by (conclude lemma_equalangleshelper).
assert (CongA H A E D A B) by (conclude lemma_equalanglesflip).
assert (CongA A E K A B C) by (apply (lemma_supplements2 H A E A B C D A B A E K);eauto).
assert (OS C D B A) by (conclude lemma_samesideflip).
assert (Col A E B) by (conclude_def Col ).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq E B) by (forward_using lemma_betweennotequal).
assert (neq B E) by (conclude lemma_inequalitysymmetric).
assert (OS C D B E) by (conclude lemma_samesidecollinear).
assert (Out A H D) by (conclude lemma_ray4).
assert (Out A D H) by (conclude lemma_ray5).

*****
H58 : Out A D H
H57 : Out A H D
H56 : OS C D B E
H55 : neq B E
H54 : neq E B
H53 : Col B A E
H52 : Col A E B
H51 : OS C D B A
H50 : CongA A E K A B C
H49 : CongA H A E D A B
H48 : CongA E A H B A D
H47 : CongA E A H E A H
H46 : nCol E A H
H45 : nCol A H E
H44 : Out A H D
H43 : Out A E B
H42 : RT H A E A E K
H41 : OS H K A E
H40 : BetS e A E
H39 : BetS E A e
H38 : BetS B E A
H37 : RT D A B A B C
H36 : OS D C A B
H35 : BetS e A B
H34 : Cong A e B A
H33 : BetS B A e
e : Point
H32 : neq B A
H31 : neq A B
H30 : neq B G
H29 : neq A H
H28 : neq A E
H27 : OS K F G C
H26 : OS H K E A
H25 : OS C D A B
H24 : OS D A C B
H23 : OS A D C B
H22 : OS A D B C
H21 : TP B C A D
H20 : TP G C K F
H19 : TP E A H K
H18 : TP A B C D
H17 : Par A H E K
H16 : Par C D A B
H15 : Par B C A D
H14 : Par G C K F
H13 : Par C F G K
H12 : Par F C G K
H11 : Par G K F C
H10 : Par E K A H
H9 : Par E A H K
H8 : Par A B C D
H7 : Par A D B C
H6 : PG G K F C
H5 : PG E A H K
H4 : BetS B G C
H3 : BetS D F C
H2 : BetS A E B
H1 : BetS A H D
H0 : PG A B C D
A,B,C,D,E,F,G,H,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
PG E K G B
+++++
assert (OS C H B E) by (conclude lemma_sameside2).
-----
Lemma proposition_43B : forall A B C D E F G H K, PG A B C D -> BetS A H D -> BetS A E B -> BetS D F C -> BetS B G C -> PG E A H K -> PG G K F C -> PG E K G B.
Proof.
intros.
assert (Par A D B C) by (conclude_def PG ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par E A H K) by (conclude_def PG ).
assert (Par E K A H) by (conclude_def PG ).
assert (Par G K F C) by (conclude_def PG ).
assert (Par F C G K) by (conclude lemma_parallelsymmetric).
assert (Par C F G K) by (forward_using lemma_parallelflip).
assert (Par G C K F) by (conclude_def PG ).
assert (Par B C A D) by (conclude lemma_parallelsymmetric).
assert (Par C D A B) by (conclude lemma_parallelsymmetric).
assert (Par A H E K) by (conclude lemma_parallelsymmetric).
assert (TP A B C D) by (conclude lemma_paralleldef2B).
assert (TP E A H K) by (conclude lemma_paralleldef2B).
assert (TP G C K F) by (conclude lemma_paralleldef2B).
assert (TP B C A D) by (conclude lemma_paralleldef2B).
assert (OS A D B C) by (conclude_def TP ).
assert (OS A D C B) by (conclude lemma_samesideflip).
assert (OS D A C B) by (forward_using lemma_samesidesymmetric).
assert (OS C D A B) by (conclude_def TP ).
assert (OS H K E A) by (conclude_def TP ).
assert (OS K F G C) by (conclude_def TP ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (neq A H) by (forward_using lemma_betweennotequal).
assert (neq B G) by (forward_using lemma_betweennotequal).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists e, (BetS B A e /\\ Cong A e B A)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (BetS e A B) by (conclude axiom_betweennesssymmetry).
assert (OS D C A B) by (forward_using lemma_samesidesymmetric).
assert (RT D A B A B C) by (conclude proposition_29C).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert (BetS E A e) by (conclude lemma_3_6a).
assert (BetS e A E) by (conclude axiom_betweennesssymmetry).
assert (OS H K A E) by (forward_using lemma_samesidesymmetric).
assert (RT H A E A E K) by (conclude proposition_29C).
assert (Out A E B) by (conclude lemma_ray4).
assert (Out A H D) by (conclude lemma_ray4).
assert (nCol A H E) by (forward_using lemma_parallelNC).
assert (nCol E A H) by (forward_using lemma_NCorder).
assert (CongA E A H E A H) by (conclude lemma_equalanglesreflexive).
assert (CongA E A H B A D) by (conclude lemma_equalangleshelper).
assert (CongA H A E D A B) by (conclude lemma_equalanglesflip).
assert (CongA A E K A B C) by (apply (lemma_supplements2 H A E A B C D A B A E K);eauto).
assert (OS C D B A) by (conclude lemma_samesideflip).
assert (Col A E B) by (conclude_def Col ).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq E B) by (forward_using lemma_betweennotequal).
assert (neq B E) by (conclude lemma_inequalitysymmetric).
assert (OS C D B E) by (conclude lemma_samesidecollinear).
assert (Out A H D) by (conclude lemma_ray4).
assert (Out A D H) by (conclude lemma_ray5).
assert (OS C H B E) by (conclude lemma_sameside2).

*****
H59 : OS C H B E
H58 : Out A D H
H57 : Out A H D
H56 : OS C D B E
H55 : neq B E
H54 : neq E B
H53 : Col B A E
H52 : Col A E B
H51 : OS C D B A
H50 : CongA A E K A B C
H49 : CongA H A E D A B
H48 : CongA E A H B A D
H47 : CongA E A H E A H
H46 : nCol E A H
H45 : nCol A H E
H44 : Out A H D
H43 : Out A E B
H42 : RT H A E A E K
H41 : OS H K A E
H40 : BetS e A E
H39 : BetS E A e
H38 : BetS B E A
H37 : RT D A B A B C
H36 : OS D C A B
H35 : BetS e A B
H34 : Cong A e B A
H33 : BetS B A e
e : Point
H32 : neq B A
H31 : neq A B
H30 : neq B G
H29 : neq A H
H28 : neq A E
H27 : OS K F G C
H26 : OS H K E A
H25 : OS C D A B
H24 : OS D A C B
H23 : OS A D C B
H22 : OS A D B C
H21 : TP B C A D
H20 : TP G C K F
H19 : TP E A H K
H18 : TP A B C D
H17 : Par A H E K
H16 : Par C D A B
H15 : Par B C A D
H14 : Par G C K F
H13 : Par C F G K
H12 : Par F C G K
H11 : Par G K F C
H10 : Par E K A H
H9 : Par E A H K
H8 : Par A B C D
H7 : Par A D B C
H6 : PG G K F C
H5 : PG E A H K
H4 : BetS B G C
H3 : BetS D F C
H2 : BetS A E B
H1 : BetS A H D
H0 : PG A B C D
A,B,C,D,E,F,G,H,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
PG E K G B
+++++
assert (Col E A B) by (forward_using lemma_collinearorder).
-----
Lemma proposition_43B : forall A B C D E F G H K, PG A B C D -> BetS A H D -> BetS A E B -> BetS D F C -> BetS B G C -> PG E A H K -> PG G K F C -> PG E K G B.
Proof.
intros.
assert (Par A D B C) by (conclude_def PG ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par E A H K) by (conclude_def PG ).
assert (Par E K A H) by (conclude_def PG ).
assert (Par G K F C) by (conclude_def PG ).
assert (Par F C G K) by (conclude lemma_parallelsymmetric).
assert (Par C F G K) by (forward_using lemma_parallelflip).
assert (Par G C K F) by (conclude_def PG ).
assert (Par B C A D) by (conclude lemma_parallelsymmetric).
assert (Par C D A B) by (conclude lemma_parallelsymmetric).
assert (Par A H E K) by (conclude lemma_parallelsymmetric).
assert (TP A B C D) by (conclude lemma_paralleldef2B).
assert (TP E A H K) by (conclude lemma_paralleldef2B).
assert (TP G C K F) by (conclude lemma_paralleldef2B).
assert (TP B C A D) by (conclude lemma_paralleldef2B).
assert (OS A D B C) by (conclude_def TP ).
assert (OS A D C B) by (conclude lemma_samesideflip).
assert (OS D A C B) by (forward_using lemma_samesidesymmetric).
assert (OS C D A B) by (conclude_def TP ).
assert (OS H K E A) by (conclude_def TP ).
assert (OS K F G C) by (conclude_def TP ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (neq A H) by (forward_using lemma_betweennotequal).
assert (neq B G) by (forward_using lemma_betweennotequal).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists e, (BetS B A e /\\ Cong A e B A)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (BetS e A B) by (conclude axiom_betweennesssymmetry).
assert (OS D C A B) by (forward_using lemma_samesidesymmetric).
assert (RT D A B A B C) by (conclude proposition_29C).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert (BetS E A e) by (conclude lemma_3_6a).
assert (BetS e A E) by (conclude axiom_betweennesssymmetry).
assert (OS H K A E) by (forward_using lemma_samesidesymmetric).
assert (RT H A E A E K) by (conclude proposition_29C).
assert (Out A E B) by (conclude lemma_ray4).
assert (Out A H D) by (conclude lemma_ray4).
assert (nCol A H E) by (forward_using lemma_parallelNC).
assert (nCol E A H) by (forward_using lemma_NCorder).
assert (CongA E A H E A H) by (conclude lemma_equalanglesreflexive).
assert (CongA E A H B A D) by (conclude lemma_equalangleshelper).
assert (CongA H A E D A B) by (conclude lemma_equalanglesflip).
assert (CongA A E K A B C) by (apply (lemma_supplements2 H A E A B C D A B A E K);eauto).
assert (OS C D B A) by (conclude lemma_samesideflip).
assert (Col A E B) by (conclude_def Col ).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq E B) by (forward_using lemma_betweennotequal).
assert (neq B E) by (conclude lemma_inequalitysymmetric).
assert (OS C D B E) by (conclude lemma_samesidecollinear).
assert (Out A H D) by (conclude lemma_ray4).
assert (Out A D H) by (conclude lemma_ray5).
assert (OS C H B E) by (conclude lemma_sameside2).
assert (Col E A B) by (forward_using lemma_collinearorder).

*****
H60 : Col E A B
H59 : OS C H B E
H58 : Out A D H
H57 : Out A H D
H56 : OS C D B E
H55 : neq B E
H54 : neq E B
H53 : Col B A E
H52 : Col A E B
H51 : OS C D B A
H50 : CongA A E K A B C
H49 : CongA H A E D A B
H48 : CongA E A H B A D
H47 : CongA E A H E A H
H46 : nCol E A H
H45 : nCol A H E
H44 : Out A H D
H43 : Out A E B
H42 : RT H A E A E K
H41 : OS H K A E
H40 : BetS e A E
H39 : BetS E A e
H38 : BetS B E A
H37 : RT D A B A B C
H36 : OS D C A B
H35 : BetS e A B
H34 : Cong A e B A
H33 : BetS B A e
e : Point
H32 : neq B A
H31 : neq A B
H30 : neq B G
H29 : neq A H
H28 : neq A E
H27 : OS K F G C
H26 : OS H K E A
H25 : OS C D A B
H24 : OS D A C B
H23 : OS A D C B
H22 : OS A D B C
H21 : TP B C A D
H20 : TP G C K F
H19 : TP E A H K
H18 : TP A B C D
H17 : Par A H E K
H16 : Par C D A B
H15 : Par B C A D
H14 : Par G C K F
H13 : Par C F G K
H12 : Par F C G K
H11 : Par G K F C
H10 : Par E K A H
H9 : Par E A H K
H8 : Par A B C D
H7 : Par A D B C
H6 : PG G K F C
H5 : PG E A H K
H4 : BetS B G C
H3 : BetS D F C
H2 : BetS A E B
H1 : BetS A H D
H0 : PG A B C D
A,B,C,D,E,F,G,H,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
PG E K G B
+++++
assert (OS H K E B) by (conclude lemma_samesidecollinear).
-----
Lemma proposition_43B : forall A B C D E F G H K, PG A B C D -> BetS A H D -> BetS A E B -> BetS D F C -> BetS B G C -> PG E A H K -> PG G K F C -> PG E K G B.
Proof.
intros.
assert (Par A D B C) by (conclude_def PG ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par E A H K) by (conclude_def PG ).
assert (Par E K A H) by (conclude_def PG ).
assert (Par G K F C) by (conclude_def PG ).
assert (Par F C G K) by (conclude lemma_parallelsymmetric).
assert (Par C F G K) by (forward_using lemma_parallelflip).
assert (Par G C K F) by (conclude_def PG ).
assert (Par B C A D) by (conclude lemma_parallelsymmetric).
assert (Par C D A B) by (conclude lemma_parallelsymmetric).
assert (Par A H E K) by (conclude lemma_parallelsymmetric).
assert (TP A B C D) by (conclude lemma_paralleldef2B).
assert (TP E A H K) by (conclude lemma_paralleldef2B).
assert (TP G C K F) by (conclude lemma_paralleldef2B).
assert (TP B C A D) by (conclude lemma_paralleldef2B).
assert (OS A D B C) by (conclude_def TP ).
assert (OS A D C B) by (conclude lemma_samesideflip).
assert (OS D A C B) by (forward_using lemma_samesidesymmetric).
assert (OS C D A B) by (conclude_def TP ).
assert (OS H K E A) by (conclude_def TP ).
assert (OS K F G C) by (conclude_def TP ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (neq A H) by (forward_using lemma_betweennotequal).
assert (neq B G) by (forward_using lemma_betweennotequal).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists e, (BetS B A e /\\ Cong A e B A)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (BetS e A B) by (conclude axiom_betweennesssymmetry).
assert (OS D C A B) by (forward_using lemma_samesidesymmetric).
assert (RT D A B A B C) by (conclude proposition_29C).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert (BetS E A e) by (conclude lemma_3_6a).
assert (BetS e A E) by (conclude axiom_betweennesssymmetry).
assert (OS H K A E) by (forward_using lemma_samesidesymmetric).
assert (RT H A E A E K) by (conclude proposition_29C).
assert (Out A E B) by (conclude lemma_ray4).
assert (Out A H D) by (conclude lemma_ray4).
assert (nCol A H E) by (forward_using lemma_parallelNC).
assert (nCol E A H) by (forward_using lemma_NCorder).
assert (CongA E A H E A H) by (conclude lemma_equalanglesreflexive).
assert (CongA E A H B A D) by (conclude lemma_equalangleshelper).
assert (CongA H A E D A B) by (conclude lemma_equalanglesflip).
assert (CongA A E K A B C) by (apply (lemma_supplements2 H A E A B C D A B A E K);eauto).
assert (OS C D B A) by (conclude lemma_samesideflip).
assert (Col A E B) by (conclude_def Col ).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq E B) by (forward_using lemma_betweennotequal).
assert (neq B E) by (conclude lemma_inequalitysymmetric).
assert (OS C D B E) by (conclude lemma_samesidecollinear).
assert (Out A H D) by (conclude lemma_ray4).
assert (Out A D H) by (conclude lemma_ray5).
assert (OS C H B E) by (conclude lemma_sameside2).
assert (Col E A B) by (forward_using lemma_collinearorder).
assert (OS H K E B) by (conclude lemma_samesidecollinear).

*****
H61 : OS H K E B
H60 : Col E A B
H59 : OS C H B E
H58 : Out A D H
H57 : Out A H D
H56 : OS C D B E
H55 : neq B E
H54 : neq E B
H53 : Col B A E
H52 : Col A E B
H51 : OS C D B A
H50 : CongA A E K A B C
H49 : CongA H A E D A B
H48 : CongA E A H B A D
H47 : CongA E A H E A H
H46 : nCol E A H
H45 : nCol A H E
H44 : Out A H D
H43 : Out A E B
H42 : RT H A E A E K
H41 : OS H K A E
H40 : BetS e A E
H39 : BetS E A e
H38 : BetS B E A
H37 : RT D A B A B C
H36 : OS D C A B
H35 : BetS e A B
H34 : Cong A e B A
H33 : BetS B A e
e : Point
H32 : neq B A
H31 : neq A B
H30 : neq B G
H29 : neq A H
H28 : neq A E
H27 : OS K F G C
H26 : OS H K E A
H25 : OS C D A B
H24 : OS D A C B
H23 : OS A D C B
H22 : OS A D B C
H21 : TP B C A D
H20 : TP G C K F
H19 : TP E A H K
H18 : TP A B C D
H17 : Par A H E K
H16 : Par C D A B
H15 : Par B C A D
H14 : Par G C K F
H13 : Par C F G K
H12 : Par F C G K
H11 : Par G K F C
H10 : Par E K A H
H9 : Par E A H K
H8 : Par A B C D
H7 : Par A D B C
H6 : PG G K F C
H5 : PG E A H K
H4 : BetS B G C
H3 : BetS D F C
H2 : BetS A E B
H1 : BetS A H D
H0 : PG A B C D
A,B,C,D,E,F,G,H,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
PG E K G B
+++++
assert (OS H K B E) by (conclude lemma_samesideflip).
-----
Lemma proposition_43B : forall A B C D E F G H K, PG A B C D -> BetS A H D -> BetS A E B -> BetS D F C -> BetS B G C -> PG E A H K -> PG G K F C -> PG E K G B.
Proof.
intros.
assert (Par A D B C) by (conclude_def PG ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par E A H K) by (conclude_def PG ).
assert (Par E K A H) by (conclude_def PG ).
assert (Par G K F C) by (conclude_def PG ).
assert (Par F C G K) by (conclude lemma_parallelsymmetric).
assert (Par C F G K) by (forward_using lemma_parallelflip).
assert (Par G C K F) by (conclude_def PG ).
assert (Par B C A D) by (conclude lemma_parallelsymmetric).
assert (Par C D A B) by (conclude lemma_parallelsymmetric).
assert (Par A H E K) by (conclude lemma_parallelsymmetric).
assert (TP A B C D) by (conclude lemma_paralleldef2B).
assert (TP E A H K) by (conclude lemma_paralleldef2B).
assert (TP G C K F) by (conclude lemma_paralleldef2B).
assert (TP B C A D) by (conclude lemma_paralleldef2B).
assert (OS A D B C) by (conclude_def TP ).
assert (OS A D C B) by (conclude lemma_samesideflip).
assert (OS D A C B) by (forward_using lemma_samesidesymmetric).
assert (OS C D A B) by (conclude_def TP ).
assert (OS H K E A) by (conclude_def TP ).
assert (OS K F G C) by (conclude_def TP ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (neq A H) by (forward_using lemma_betweennotequal).
assert (neq B G) by (forward_using lemma_betweennotequal).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists e, (BetS B A e /\\ Cong A e B A)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (BetS e A B) by (conclude axiom_betweennesssymmetry).
assert (OS D C A B) by (forward_using lemma_samesidesymmetric).
assert (RT D A B A B C) by (conclude proposition_29C).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert (BetS E A e) by (conclude lemma_3_6a).
assert (BetS e A E) by (conclude axiom_betweennesssymmetry).
assert (OS H K A E) by (forward_using lemma_samesidesymmetric).
assert (RT H A E A E K) by (conclude proposition_29C).
assert (Out A E B) by (conclude lemma_ray4).
assert (Out A H D) by (conclude lemma_ray4).
assert (nCol A H E) by (forward_using lemma_parallelNC).
assert (nCol E A H) by (forward_using lemma_NCorder).
assert (CongA E A H E A H) by (conclude lemma_equalanglesreflexive).
assert (CongA E A H B A D) by (conclude lemma_equalangleshelper).
assert (CongA H A E D A B) by (conclude lemma_equalanglesflip).
assert (CongA A E K A B C) by (apply (lemma_supplements2 H A E A B C D A B A E K);eauto).
assert (OS C D B A) by (conclude lemma_samesideflip).
assert (Col A E B) by (conclude_def Col ).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq E B) by (forward_using lemma_betweennotequal).
assert (neq B E) by (conclude lemma_inequalitysymmetric).
assert (OS C D B E) by (conclude lemma_samesidecollinear).
assert (Out A H D) by (conclude lemma_ray4).
assert (Out A D H) by (conclude lemma_ray5).
assert (OS C H B E) by (conclude lemma_sameside2).
assert (Col E A B) by (forward_using lemma_collinearorder).
assert (OS H K E B) by (conclude lemma_samesidecollinear).
assert (OS H K B E) by (conclude lemma_samesideflip).

*****
H62 : OS H K B E
H61 : OS H K E B
H60 : Col E A B
H59 : OS C H B E
H58 : Out A D H
H57 : Out A H D
H56 : OS C D B E
H55 : neq B E
H54 : neq E B
H53 : Col B A E
H52 : Col A E B
H51 : OS C D B A
H50 : CongA A E K A B C
H49 : CongA H A E D A B
H48 : CongA E A H B A D
H47 : CongA E A H E A H
H46 : nCol E A H
H45 : nCol A H E
H44 : Out A H D
H43 : Out A E B
H42 : RT H A E A E K
H41 : OS H K A E
H40 : BetS e A E
H39 : BetS E A e
H38 : BetS B E A
H37 : RT D A B A B C
H36 : OS D C A B
H35 : BetS e A B
H34 : Cong A e B A
H33 : BetS B A e
e : Point
H32 : neq B A
H31 : neq A B
H30 : neq B G
H29 : neq A H
H28 : neq A E
H27 : OS K F G C
H26 : OS H K E A
H25 : OS C D A B
H24 : OS D A C B
H23 : OS A D C B
H22 : OS A D B C
H21 : TP B C A D
H20 : TP G C K F
H19 : TP E A H K
H18 : TP A B C D
H17 : Par A H E K
H16 : Par C D A B
H15 : Par B C A D
H14 : Par G C K F
H13 : Par C F G K
H12 : Par F C G K
H11 : Par G K F C
H10 : Par E K A H
H9 : Par E A H K
H8 : Par A B C D
H7 : Par A D B C
H6 : PG G K F C
H5 : PG E A H K
H4 : BetS B G C
H3 : BetS D F C
H2 : BetS A E B
H1 : BetS A H D
H0 : PG A B C D
A,B,C,D,E,F,G,H,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
PG E K G B
+++++
assert (OS C K B E) by (conclude lemma_samesidetransitive).
-----
Lemma proposition_43B : forall A B C D E F G H K, PG A B C D -> BetS A H D -> BetS A E B -> BetS D F C -> BetS B G C -> PG E A H K -> PG G K F C -> PG E K G B.
Proof.
intros.
assert (Par A D B C) by (conclude_def PG ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par E A H K) by (conclude_def PG ).
assert (Par E K A H) by (conclude_def PG ).
assert (Par G K F C) by (conclude_def PG ).
assert (Par F C G K) by (conclude lemma_parallelsymmetric).
assert (Par C F G K) by (forward_using lemma_parallelflip).
assert (Par G C K F) by (conclude_def PG ).
assert (Par B C A D) by (conclude lemma_parallelsymmetric).
assert (Par C D A B) by (conclude lemma_parallelsymmetric).
assert (Par A H E K) by (conclude lemma_parallelsymmetric).
assert (TP A B C D) by (conclude lemma_paralleldef2B).
assert (TP E A H K) by (conclude lemma_paralleldef2B).
assert (TP G C K F) by (conclude lemma_paralleldef2B).
assert (TP B C A D) by (conclude lemma_paralleldef2B).
assert (OS A D B C) by (conclude_def TP ).
assert (OS A D C B) by (conclude lemma_samesideflip).
assert (OS D A C B) by (forward_using lemma_samesidesymmetric).
assert (OS C D A B) by (conclude_def TP ).
assert (OS H K E A) by (conclude_def TP ).
assert (OS K F G C) by (conclude_def TP ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (neq A H) by (forward_using lemma_betweennotequal).
assert (neq B G) by (forward_using lemma_betweennotequal).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists e, (BetS B A e /\\ Cong A e B A)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (BetS e A B) by (conclude axiom_betweennesssymmetry).
assert (OS D C A B) by (forward_using lemma_samesidesymmetric).
assert (RT D A B A B C) by (conclude proposition_29C).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert (BetS E A e) by (conclude lemma_3_6a).
assert (BetS e A E) by (conclude axiom_betweennesssymmetry).
assert (OS H K A E) by (forward_using lemma_samesidesymmetric).
assert (RT H A E A E K) by (conclude proposition_29C).
assert (Out A E B) by (conclude lemma_ray4).
assert (Out A H D) by (conclude lemma_ray4).
assert (nCol A H E) by (forward_using lemma_parallelNC).
assert (nCol E A H) by (forward_using lemma_NCorder).
assert (CongA E A H E A H) by (conclude lemma_equalanglesreflexive).
assert (CongA E A H B A D) by (conclude lemma_equalangleshelper).
assert (CongA H A E D A B) by (conclude lemma_equalanglesflip).
assert (CongA A E K A B C) by (apply (lemma_supplements2 H A E A B C D A B A E K);eauto).
assert (OS C D B A) by (conclude lemma_samesideflip).
assert (Col A E B) by (conclude_def Col ).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq E B) by (forward_using lemma_betweennotequal).
assert (neq B E) by (conclude lemma_inequalitysymmetric).
assert (OS C D B E) by (conclude lemma_samesidecollinear).
assert (Out A H D) by (conclude lemma_ray4).
assert (Out A D H) by (conclude lemma_ray5).
assert (OS C H B E) by (conclude lemma_sameside2).
assert (Col E A B) by (forward_using lemma_collinearorder).
assert (OS H K E B) by (conclude lemma_samesidecollinear).
assert (OS H K B E) by (conclude lemma_samesideflip).
assert (OS C K B E) by (conclude lemma_samesidetransitive).

*****
H63 : OS C K B E
H62 : OS H K B E
H61 : OS H K E B
H60 : Col E A B
H59 : OS C H B E
H58 : Out A D H
H57 : Out A H D
H56 : OS C D B E
H55 : neq B E
H54 : neq E B
H53 : Col B A E
H52 : Col A E B
H51 : OS C D B A
H50 : CongA A E K A B C
H49 : CongA H A E D A B
H48 : CongA E A H B A D
H47 : CongA E A H E A H
H46 : nCol E A H
H45 : nCol A H E
H44 : Out A H D
H43 : Out A E B
H42 : RT H A E A E K
H41 : OS H K A E
H40 : BetS e A E
H39 : BetS E A e
H38 : BetS B E A
H37 : RT D A B A B C
H36 : OS D C A B
H35 : BetS e A B
H34 : Cong A e B A
H33 : BetS B A e
e : Point
H32 : neq B A
H31 : neq A B
H30 : neq B G
H29 : neq A H
H28 : neq A E
H27 : OS K F G C
H26 : OS H K E A
H25 : OS C D A B
H24 : OS D A C B
H23 : OS A D C B
H22 : OS A D B C
H21 : TP B C A D
H20 : TP G C K F
H19 : TP E A H K
H18 : TP A B C D
H17 : Par A H E K
H16 : Par C D A B
H15 : Par B C A D
H14 : Par G C K F
H13 : Par C F G K
H12 : Par F C G K
H11 : Par G K F C
H10 : Par E K A H
H9 : Par E A H K
H8 : Par A B C D
H7 : Par A D B C
H6 : PG G K F C
H5 : PG E A H K
H4 : BetS B G C
H3 : BetS D F C
H2 : BetS A E B
H1 : BetS A H D
H0 : PG A B C D
A,B,C,D,E,F,G,H,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
PG E K G B
+++++
assert (OS K C B E) by (forward_using lemma_samesidesymmetric).
-----
Lemma proposition_43B : forall A B C D E F G H K, PG A B C D -> BetS A H D -> BetS A E B -> BetS D F C -> BetS B G C -> PG E A H K -> PG G K F C -> PG E K G B.
Proof.
intros.
assert (Par A D B C) by (conclude_def PG ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par E A H K) by (conclude_def PG ).
assert (Par E K A H) by (conclude_def PG ).
assert (Par G K F C) by (conclude_def PG ).
assert (Par F C G K) by (conclude lemma_parallelsymmetric).
assert (Par C F G K) by (forward_using lemma_parallelflip).
assert (Par G C K F) by (conclude_def PG ).
assert (Par B C A D) by (conclude lemma_parallelsymmetric).
assert (Par C D A B) by (conclude lemma_parallelsymmetric).
assert (Par A H E K) by (conclude lemma_parallelsymmetric).
assert (TP A B C D) by (conclude lemma_paralleldef2B).
assert (TP E A H K) by (conclude lemma_paralleldef2B).
assert (TP G C K F) by (conclude lemma_paralleldef2B).
assert (TP B C A D) by (conclude lemma_paralleldef2B).
assert (OS A D B C) by (conclude_def TP ).
assert (OS A D C B) by (conclude lemma_samesideflip).
assert (OS D A C B) by (forward_using lemma_samesidesymmetric).
assert (OS C D A B) by (conclude_def TP ).
assert (OS H K E A) by (conclude_def TP ).
assert (OS K F G C) by (conclude_def TP ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (neq A H) by (forward_using lemma_betweennotequal).
assert (neq B G) by (forward_using lemma_betweennotequal).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists e, (BetS B A e /\\ Cong A e B A)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (BetS e A B) by (conclude axiom_betweennesssymmetry).
assert (OS D C A B) by (forward_using lemma_samesidesymmetric).
assert (RT D A B A B C) by (conclude proposition_29C).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert (BetS E A e) by (conclude lemma_3_6a).
assert (BetS e A E) by (conclude axiom_betweennesssymmetry).
assert (OS H K A E) by (forward_using lemma_samesidesymmetric).
assert (RT H A E A E K) by (conclude proposition_29C).
assert (Out A E B) by (conclude lemma_ray4).
assert (Out A H D) by (conclude lemma_ray4).
assert (nCol A H E) by (forward_using lemma_parallelNC).
assert (nCol E A H) by (forward_using lemma_NCorder).
assert (CongA E A H E A H) by (conclude lemma_equalanglesreflexive).
assert (CongA E A H B A D) by (conclude lemma_equalangleshelper).
assert (CongA H A E D A B) by (conclude lemma_equalanglesflip).
assert (CongA A E K A B C) by (apply (lemma_supplements2 H A E A B C D A B A E K);eauto).
assert (OS C D B A) by (conclude lemma_samesideflip).
assert (Col A E B) by (conclude_def Col ).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq E B) by (forward_using lemma_betweennotequal).
assert (neq B E) by (conclude lemma_inequalitysymmetric).
assert (OS C D B E) by (conclude lemma_samesidecollinear).
assert (Out A H D) by (conclude lemma_ray4).
assert (Out A D H) by (conclude lemma_ray5).
assert (OS C H B E) by (conclude lemma_sameside2).
assert (Col E A B) by (forward_using lemma_collinearorder).
assert (OS H K E B) by (conclude lemma_samesidecollinear).
assert (OS H K B E) by (conclude lemma_samesideflip).
assert (OS C K B E) by (conclude lemma_samesidetransitive).
assert (OS K C B E) by (forward_using lemma_samesidesymmetric).

*****
H64 : OS K C B E
H63 : OS C K B E
H62 : OS H K B E
H61 : OS H K E B
H60 : Col E A B
H59 : OS C H B E
H58 : Out A D H
H57 : Out A H D
H56 : OS C D B E
H55 : neq B E
H54 : neq E B
H53 : Col B A E
H52 : Col A E B
H51 : OS C D B A
H50 : CongA A E K A B C
H49 : CongA H A E D A B
H48 : CongA E A H B A D
H47 : CongA E A H E A H
H46 : nCol E A H
H45 : nCol A H E
H44 : Out A H D
H43 : Out A E B
H42 : RT H A E A E K
H41 : OS H K A E
H40 : BetS e A E
H39 : BetS E A e
H38 : BetS B E A
H37 : RT D A B A B C
H36 : OS D C A B
H35 : BetS e A B
H34 : Cong A e B A
H33 : BetS B A e
e : Point
H32 : neq B A
H31 : neq A B
H30 : neq B G
H29 : neq A H
H28 : neq A E
H27 : OS K F G C
H26 : OS H K E A
H25 : OS C D A B
H24 : OS D A C B
H23 : OS A D C B
H22 : OS A D B C
H21 : TP B C A D
H20 : TP G C K F
H19 : TP E A H K
H18 : TP A B C D
H17 : Par A H E K
H16 : Par C D A B
H15 : Par B C A D
H14 : Par G C K F
H13 : Par C F G K
H12 : Par F C G K
H11 : Par G K F C
H10 : Par E K A H
H9 : Par E A H K
H8 : Par A B C D
H7 : Par A D B C
H6 : PG G K F C
H5 : PG E A H K
H4 : BetS B G C
H3 : BetS D F C
H2 : BetS A E B
H1 : BetS A H D
H0 : PG A B C D
A,B,C,D,E,F,G,H,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
PG E K G B
+++++
assert (Out B G C) by (conclude lemma_ray4).
-----
Lemma proposition_43B : forall A B C D E F G H K, PG A B C D -> BetS A H D -> BetS A E B -> BetS D F C -> BetS B G C -> PG E A H K -> PG G K F C -> PG E K G B.
Proof.
intros.
assert (Par A D B C) by (conclude_def PG ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par E A H K) by (conclude_def PG ).
assert (Par E K A H) by (conclude_def PG ).
assert (Par G K F C) by (conclude_def PG ).
assert (Par F C G K) by (conclude lemma_parallelsymmetric).
assert (Par C F G K) by (forward_using lemma_parallelflip).
assert (Par G C K F) by (conclude_def PG ).
assert (Par B C A D) by (conclude lemma_parallelsymmetric).
assert (Par C D A B) by (conclude lemma_parallelsymmetric).
assert (Par A H E K) by (conclude lemma_parallelsymmetric).
assert (TP A B C D) by (conclude lemma_paralleldef2B).
assert (TP E A H K) by (conclude lemma_paralleldef2B).
assert (TP G C K F) by (conclude lemma_paralleldef2B).
assert (TP B C A D) by (conclude lemma_paralleldef2B).
assert (OS A D B C) by (conclude_def TP ).
assert (OS A D C B) by (conclude lemma_samesideflip).
assert (OS D A C B) by (forward_using lemma_samesidesymmetric).
assert (OS C D A B) by (conclude_def TP ).
assert (OS H K E A) by (conclude_def TP ).
assert (OS K F G C) by (conclude_def TP ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (neq A H) by (forward_using lemma_betweennotequal).
assert (neq B G) by (forward_using lemma_betweennotequal).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists e, (BetS B A e /\\ Cong A e B A)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (BetS e A B) by (conclude axiom_betweennesssymmetry).
assert (OS D C A B) by (forward_using lemma_samesidesymmetric).
assert (RT D A B A B C) by (conclude proposition_29C).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert (BetS E A e) by (conclude lemma_3_6a).
assert (BetS e A E) by (conclude axiom_betweennesssymmetry).
assert (OS H K A E) by (forward_using lemma_samesidesymmetric).
assert (RT H A E A E K) by (conclude proposition_29C).
assert (Out A E B) by (conclude lemma_ray4).
assert (Out A H D) by (conclude lemma_ray4).
assert (nCol A H E) by (forward_using lemma_parallelNC).
assert (nCol E A H) by (forward_using lemma_NCorder).
assert (CongA E A H E A H) by (conclude lemma_equalanglesreflexive).
assert (CongA E A H B A D) by (conclude lemma_equalangleshelper).
assert (CongA H A E D A B) by (conclude lemma_equalanglesflip).
assert (CongA A E K A B C) by (apply (lemma_supplements2 H A E A B C D A B A E K);eauto).
assert (OS C D B A) by (conclude lemma_samesideflip).
assert (Col A E B) by (conclude_def Col ).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq E B) by (forward_using lemma_betweennotequal).
assert (neq B E) by (conclude lemma_inequalitysymmetric).
assert (OS C D B E) by (conclude lemma_samesidecollinear).
assert (Out A H D) by (conclude lemma_ray4).
assert (Out A D H) by (conclude lemma_ray5).
assert (OS C H B E) by (conclude lemma_sameside2).
assert (Col E A B) by (forward_using lemma_collinearorder).
assert (OS H K E B) by (conclude lemma_samesidecollinear).
assert (OS H K B E) by (conclude lemma_samesideflip).
assert (OS C K B E) by (conclude lemma_samesidetransitive).
assert (OS K C B E) by (forward_using lemma_samesidesymmetric).
assert (Out B G C) by (conclude lemma_ray4).

*****
H65 : Out B G C
H64 : OS K C B E
H63 : OS C K B E
H62 : OS H K B E
H61 : OS H K E B
H60 : Col E A B
H59 : OS C H B E
H58 : Out A D H
H57 : Out A H D
H56 : OS C D B E
H55 : neq B E
H54 : neq E B
H53 : Col B A E
H52 : Col A E B
H51 : OS C D B A
H50 : CongA A E K A B C
H49 : CongA H A E D A B
H48 : CongA E A H B A D
H47 : CongA E A H E A H
H46 : nCol E A H
H45 : nCol A H E
H44 : Out A H D
H43 : Out A E B
H42 : RT H A E A E K
H41 : OS H K A E
H40 : BetS e A E
H39 : BetS E A e
H38 : BetS B E A
H37 : RT D A B A B C
H36 : OS D C A B
H35 : BetS e A B
H34 : Cong A e B A
H33 : BetS B A e
e : Point
H32 : neq B A
H31 : neq A B
H30 : neq B G
H29 : neq A H
H28 : neq A E
H27 : OS K F G C
H26 : OS H K E A
H25 : OS C D A B
H24 : OS D A C B
H23 : OS A D C B
H22 : OS A D B C
H21 : TP B C A D
H20 : TP G C K F
H19 : TP E A H K
H18 : TP A B C D
H17 : Par A H E K
H16 : Par C D A B
H15 : Par B C A D
H14 : Par G C K F
H13 : Par C F G K
H12 : Par F C G K
H11 : Par G K F C
H10 : Par E K A H
H9 : Par E A H K
H8 : Par A B C D
H7 : Par A D B C
H6 : PG G K F C
H5 : PG E A H K
H4 : BetS B G C
H3 : BetS D F C
H2 : BetS A E B
H1 : BetS A H D
H0 : PG A B C D
A,B,C,D,E,F,G,H,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
PG E K G B
+++++
assert (Out B C G) by (conclude lemma_ray5).
-----
Lemma proposition_43B : forall A B C D E F G H K, PG A B C D -> BetS A H D -> BetS A E B -> BetS D F C -> BetS B G C -> PG E A H K -> PG G K F C -> PG E K G B.
Proof.
intros.
assert (Par A D B C) by (conclude_def PG ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par E A H K) by (conclude_def PG ).
assert (Par E K A H) by (conclude_def PG ).
assert (Par G K F C) by (conclude_def PG ).
assert (Par F C G K) by (conclude lemma_parallelsymmetric).
assert (Par C F G K) by (forward_using lemma_parallelflip).
assert (Par G C K F) by (conclude_def PG ).
assert (Par B C A D) by (conclude lemma_parallelsymmetric).
assert (Par C D A B) by (conclude lemma_parallelsymmetric).
assert (Par A H E K) by (conclude lemma_parallelsymmetric).
assert (TP A B C D) by (conclude lemma_paralleldef2B).
assert (TP E A H K) by (conclude lemma_paralleldef2B).
assert (TP G C K F) by (conclude lemma_paralleldef2B).
assert (TP B C A D) by (conclude lemma_paralleldef2B).
assert (OS A D B C) by (conclude_def TP ).
assert (OS A D C B) by (conclude lemma_samesideflip).
assert (OS D A C B) by (forward_using lemma_samesidesymmetric).
assert (OS C D A B) by (conclude_def TP ).
assert (OS H K E A) by (conclude_def TP ).
assert (OS K F G C) by (conclude_def TP ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (neq A H) by (forward_using lemma_betweennotequal).
assert (neq B G) by (forward_using lemma_betweennotequal).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists e, (BetS B A e /\\ Cong A e B A)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (BetS e A B) by (conclude axiom_betweennesssymmetry).
assert (OS D C A B) by (forward_using lemma_samesidesymmetric).
assert (RT D A B A B C) by (conclude proposition_29C).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert (BetS E A e) by (conclude lemma_3_6a).
assert (BetS e A E) by (conclude axiom_betweennesssymmetry).
assert (OS H K A E) by (forward_using lemma_samesidesymmetric).
assert (RT H A E A E K) by (conclude proposition_29C).
assert (Out A E B) by (conclude lemma_ray4).
assert (Out A H D) by (conclude lemma_ray4).
assert (nCol A H E) by (forward_using lemma_parallelNC).
assert (nCol E A H) by (forward_using lemma_NCorder).
assert (CongA E A H E A H) by (conclude lemma_equalanglesreflexive).
assert (CongA E A H B A D) by (conclude lemma_equalangleshelper).
assert (CongA H A E D A B) by (conclude lemma_equalanglesflip).
assert (CongA A E K A B C) by (apply (lemma_supplements2 H A E A B C D A B A E K);eauto).
assert (OS C D B A) by (conclude lemma_samesideflip).
assert (Col A E B) by (conclude_def Col ).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq E B) by (forward_using lemma_betweennotequal).
assert (neq B E) by (conclude lemma_inequalitysymmetric).
assert (OS C D B E) by (conclude lemma_samesidecollinear).
assert (Out A H D) by (conclude lemma_ray4).
assert (Out A D H) by (conclude lemma_ray5).
assert (OS C H B E) by (conclude lemma_sameside2).
assert (Col E A B) by (forward_using lemma_collinearorder).
assert (OS H K E B) by (conclude lemma_samesidecollinear).
assert (OS H K B E) by (conclude lemma_samesideflip).
assert (OS C K B E) by (conclude lemma_samesidetransitive).
assert (OS K C B E) by (forward_using lemma_samesidesymmetric).
assert (Out B G C) by (conclude lemma_ray4).
assert (Out B C G) by (conclude lemma_ray5).

*****
H66 : Out B C G
H65 : Out B G C
H64 : OS K C B E
H63 : OS C K B E
H62 : OS H K B E
H61 : OS H K E B
H60 : Col E A B
H59 : OS C H B E
H58 : Out A D H
H57 : Out A H D
H56 : OS C D B E
H55 : neq B E
H54 : neq E B
H53 : Col B A E
H52 : Col A E B
H51 : OS C D B A
H50 : CongA A E K A B C
H49 : CongA H A E D A B
H48 : CongA E A H B A D
H47 : CongA E A H E A H
H46 : nCol E A H
H45 : nCol A H E
H44 : Out A H D
H43 : Out A E B
H42 : RT H A E A E K
H41 : OS H K A E
H40 : BetS e A E
H39 : BetS E A e
H38 : BetS B E A
H37 : RT D A B A B C
H36 : OS D C A B
H35 : BetS e A B
H34 : Cong A e B A
H33 : BetS B A e
e : Point
H32 : neq B A
H31 : neq A B
H30 : neq B G
H29 : neq A H
H28 : neq A E
H27 : OS K F G C
H26 : OS H K E A
H25 : OS C D A B
H24 : OS D A C B
H23 : OS A D C B
H22 : OS A D B C
H21 : TP B C A D
H20 : TP G C K F
H19 : TP E A H K
H18 : TP A B C D
H17 : Par A H E K
H16 : Par C D A B
H15 : Par B C A D
H14 : Par G C K F
H13 : Par C F G K
H12 : Par F C G K
H11 : Par G K F C
H10 : Par E K A H
H9 : Par E A H K
H8 : Par A B C D
H7 : Par A D B C
H6 : PG G K F C
H5 : PG E A H K
H4 : BetS B G C
H3 : BetS D F C
H2 : BetS A E B
H1 : BetS A H D
H0 : PG A B C D
A,B,C,D,E,F,G,H,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
PG E K G B
+++++
assert (eq B B) by (conclude cn_equalityreflexive).
-----
Lemma proposition_43B : forall A B C D E F G H K, PG A B C D -> BetS A H D -> BetS A E B -> BetS D F C -> BetS B G C -> PG E A H K -> PG G K F C -> PG E K G B.
Proof.
intros.
assert (Par A D B C) by (conclude_def PG ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par E A H K) by (conclude_def PG ).
assert (Par E K A H) by (conclude_def PG ).
assert (Par G K F C) by (conclude_def PG ).
assert (Par F C G K) by (conclude lemma_parallelsymmetric).
assert (Par C F G K) by (forward_using lemma_parallelflip).
assert (Par G C K F) by (conclude_def PG ).
assert (Par B C A D) by (conclude lemma_parallelsymmetric).
assert (Par C D A B) by (conclude lemma_parallelsymmetric).
assert (Par A H E K) by (conclude lemma_parallelsymmetric).
assert (TP A B C D) by (conclude lemma_paralleldef2B).
assert (TP E A H K) by (conclude lemma_paralleldef2B).
assert (TP G C K F) by (conclude lemma_paralleldef2B).
assert (TP B C A D) by (conclude lemma_paralleldef2B).
assert (OS A D B C) by (conclude_def TP ).
assert (OS A D C B) by (conclude lemma_samesideflip).
assert (OS D A C B) by (forward_using lemma_samesidesymmetric).
assert (OS C D A B) by (conclude_def TP ).
assert (OS H K E A) by (conclude_def TP ).
assert (OS K F G C) by (conclude_def TP ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (neq A H) by (forward_using lemma_betweennotequal).
assert (neq B G) by (forward_using lemma_betweennotequal).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists e, (BetS B A e /\\ Cong A e B A)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (BetS e A B) by (conclude axiom_betweennesssymmetry).
assert (OS D C A B) by (forward_using lemma_samesidesymmetric).
assert (RT D A B A B C) by (conclude proposition_29C).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert (BetS E A e) by (conclude lemma_3_6a).
assert (BetS e A E) by (conclude axiom_betweennesssymmetry).
assert (OS H K A E) by (forward_using lemma_samesidesymmetric).
assert (RT H A E A E K) by (conclude proposition_29C).
assert (Out A E B) by (conclude lemma_ray4).
assert (Out A H D) by (conclude lemma_ray4).
assert (nCol A H E) by (forward_using lemma_parallelNC).
assert (nCol E A H) by (forward_using lemma_NCorder).
assert (CongA E A H E A H) by (conclude lemma_equalanglesreflexive).
assert (CongA E A H B A D) by (conclude lemma_equalangleshelper).
assert (CongA H A E D A B) by (conclude lemma_equalanglesflip).
assert (CongA A E K A B C) by (apply (lemma_supplements2 H A E A B C D A B A E K);eauto).
assert (OS C D B A) by (conclude lemma_samesideflip).
assert (Col A E B) by (conclude_def Col ).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq E B) by (forward_using lemma_betweennotequal).
assert (neq B E) by (conclude lemma_inequalitysymmetric).
assert (OS C D B E) by (conclude lemma_samesidecollinear).
assert (Out A H D) by (conclude lemma_ray4).
assert (Out A D H) by (conclude lemma_ray5).
assert (OS C H B E) by (conclude lemma_sameside2).
assert (Col E A B) by (forward_using lemma_collinearorder).
assert (OS H K E B) by (conclude lemma_samesidecollinear).
assert (OS H K B E) by (conclude lemma_samesideflip).
assert (OS C K B E) by (conclude lemma_samesidetransitive).
assert (OS K C B E) by (forward_using lemma_samesidesymmetric).
assert (Out B G C) by (conclude lemma_ray4).
assert (Out B C G) by (conclude lemma_ray5).
assert (eq B B) by (conclude cn_equalityreflexive).

*****
H67 : eq B B
H66 : Out B C G
H65 : Out B G C
H64 : OS K C B E
H63 : OS C K B E
H62 : OS H K B E
H61 : OS H K E B
H60 : Col E A B
H59 : OS C H B E
H58 : Out A D H
H57 : Out A H D
H56 : OS C D B E
H55 : neq B E
H54 : neq E B
H53 : Col B A E
H52 : Col A E B
H51 : OS C D B A
H50 : CongA A E K A B C
H49 : CongA H A E D A B
H48 : CongA E A H B A D
H47 : CongA E A H E A H
H46 : nCol E A H
H45 : nCol A H E
H44 : Out A H D
H43 : Out A E B
H42 : RT H A E A E K
H41 : OS H K A E
H40 : BetS e A E
H39 : BetS E A e
H38 : BetS B E A
H37 : RT D A B A B C
H36 : OS D C A B
H35 : BetS e A B
H34 : Cong A e B A
H33 : BetS B A e
e : Point
H32 : neq B A
H31 : neq A B
H30 : neq B G
H29 : neq A H
H28 : neq A E
H27 : OS K F G C
H26 : OS H K E A
H25 : OS C D A B
H24 : OS D A C B
H23 : OS A D C B
H22 : OS A D B C
H21 : TP B C A D
H20 : TP G C K F
H19 : TP E A H K
H18 : TP A B C D
H17 : Par A H E K
H16 : Par C D A B
H15 : Par B C A D
H14 : Par G C K F
H13 : Par C F G K
H12 : Par F C G K
H11 : Par G K F C
H10 : Par E K A H
H9 : Par E A H K
H8 : Par A B C D
H7 : Par A D B C
H6 : PG G K F C
H5 : PG E A H K
H4 : BetS B G C
H3 : BetS D F C
H2 : BetS A E B
H1 : BetS A H D
H0 : PG A B C D
A,B,C,D,E,F,G,H,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
PG E K G B
+++++
assert (Col B B E) by (conclude_def Col ).
-----
Lemma proposition_43B : forall A B C D E F G H K, PG A B C D -> BetS A H D -> BetS A E B -> BetS D F C -> BetS B G C -> PG E A H K -> PG G K F C -> PG E K G B.
Proof.
intros.
assert (Par A D B C) by (conclude_def PG ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par E A H K) by (conclude_def PG ).
assert (Par E K A H) by (conclude_def PG ).
assert (Par G K F C) by (conclude_def PG ).
assert (Par F C G K) by (conclude lemma_parallelsymmetric).
assert (Par C F G K) by (forward_using lemma_parallelflip).
assert (Par G C K F) by (conclude_def PG ).
assert (Par B C A D) by (conclude lemma_parallelsymmetric).
assert (Par C D A B) by (conclude lemma_parallelsymmetric).
assert (Par A H E K) by (conclude lemma_parallelsymmetric).
assert (TP A B C D) by (conclude lemma_paralleldef2B).
assert (TP E A H K) by (conclude lemma_paralleldef2B).
assert (TP G C K F) by (conclude lemma_paralleldef2B).
assert (TP B C A D) by (conclude lemma_paralleldef2B).
assert (OS A D B C) by (conclude_def TP ).
assert (OS A D C B) by (conclude lemma_samesideflip).
assert (OS D A C B) by (forward_using lemma_samesidesymmetric).
assert (OS C D A B) by (conclude_def TP ).
assert (OS H K E A) by (conclude_def TP ).
assert (OS K F G C) by (conclude_def TP ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (neq A H) by (forward_using lemma_betweennotequal).
assert (neq B G) by (forward_using lemma_betweennotequal).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists e, (BetS B A e /\\ Cong A e B A)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (BetS e A B) by (conclude axiom_betweennesssymmetry).
assert (OS D C A B) by (forward_using lemma_samesidesymmetric).
assert (RT D A B A B C) by (conclude proposition_29C).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert (BetS E A e) by (conclude lemma_3_6a).
assert (BetS e A E) by (conclude axiom_betweennesssymmetry).
assert (OS H K A E) by (forward_using lemma_samesidesymmetric).
assert (RT H A E A E K) by (conclude proposition_29C).
assert (Out A E B) by (conclude lemma_ray4).
assert (Out A H D) by (conclude lemma_ray4).
assert (nCol A H E) by (forward_using lemma_parallelNC).
assert (nCol E A H) by (forward_using lemma_NCorder).
assert (CongA E A H E A H) by (conclude lemma_equalanglesreflexive).
assert (CongA E A H B A D) by (conclude lemma_equalangleshelper).
assert (CongA H A E D A B) by (conclude lemma_equalanglesflip).
assert (CongA A E K A B C) by (apply (lemma_supplements2 H A E A B C D A B A E K);eauto).
assert (OS C D B A) by (conclude lemma_samesideflip).
assert (Col A E B) by (conclude_def Col ).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq E B) by (forward_using lemma_betweennotequal).
assert (neq B E) by (conclude lemma_inequalitysymmetric).
assert (OS C D B E) by (conclude lemma_samesidecollinear).
assert (Out A H D) by (conclude lemma_ray4).
assert (Out A D H) by (conclude lemma_ray5).
assert (OS C H B E) by (conclude lemma_sameside2).
assert (Col E A B) by (forward_using lemma_collinearorder).
assert (OS H K E B) by (conclude lemma_samesidecollinear).
assert (OS H K B E) by (conclude lemma_samesideflip).
assert (OS C K B E) by (conclude lemma_samesidetransitive).
assert (OS K C B E) by (forward_using lemma_samesidesymmetric).
assert (Out B G C) by (conclude lemma_ray4).
assert (Out B C G) by (conclude lemma_ray5).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (Col B B E) by (conclude_def Col ).

*****
H68 : Col B B E
H67 : eq B B
H66 : Out B C G
H65 : Out B G C
H64 : OS K C B E
H63 : OS C K B E
H62 : OS H K B E
H61 : OS H K E B
H60 : Col E A B
H59 : OS C H B E
H58 : Out A D H
H57 : Out A H D
H56 : OS C D B E
H55 : neq B E
H54 : neq E B
H53 : Col B A E
H52 : Col A E B
H51 : OS C D B A
H50 : CongA A E K A B C
H49 : CongA H A E D A B
H48 : CongA E A H B A D
H47 : CongA E A H E A H
H46 : nCol E A H
H45 : nCol A H E
H44 : Out A H D
H43 : Out A E B
H42 : RT H A E A E K
H41 : OS H K A E
H40 : BetS e A E
H39 : BetS E A e
H38 : BetS B E A
H37 : RT D A B A B C
H36 : OS D C A B
H35 : BetS e A B
H34 : Cong A e B A
H33 : BetS B A e
e : Point
H32 : neq B A
H31 : neq A B
H30 : neq B G
H29 : neq A H
H28 : neq A E
H27 : OS K F G C
H26 : OS H K E A
H25 : OS C D A B
H24 : OS D A C B
H23 : OS A D C B
H22 : OS A D B C
H21 : TP B C A D
H20 : TP G C K F
H19 : TP E A H K
H18 : TP A B C D
H17 : Par A H E K
H16 : Par C D A B
H15 : Par B C A D
H14 : Par G C K F
H13 : Par C F G K
H12 : Par F C G K
H11 : Par G K F C
H10 : Par E K A H
H9 : Par E A H K
H8 : Par A B C D
H7 : Par A D B C
H6 : PG G K F C
H5 : PG E A H K
H4 : BetS B G C
H3 : BetS D F C
H2 : BetS A E B
H1 : BetS A H D
H0 : PG A B C D
A,B,C,D,E,F,G,H,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
PG E K G B
+++++
assert (OS K G B E) by (conclude lemma_sameside2).
-----
Lemma proposition_43B : forall A B C D E F G H K, PG A B C D -> BetS A H D -> BetS A E B -> BetS D F C -> BetS B G C -> PG E A H K -> PG G K F C -> PG E K G B.
Proof.
intros.
assert (Par A D B C) by (conclude_def PG ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par E A H K) by (conclude_def PG ).
assert (Par E K A H) by (conclude_def PG ).
assert (Par G K F C) by (conclude_def PG ).
assert (Par F C G K) by (conclude lemma_parallelsymmetric).
assert (Par C F G K) by (forward_using lemma_parallelflip).
assert (Par G C K F) by (conclude_def PG ).
assert (Par B C A D) by (conclude lemma_parallelsymmetric).
assert (Par C D A B) by (conclude lemma_parallelsymmetric).
assert (Par A H E K) by (conclude lemma_parallelsymmetric).
assert (TP A B C D) by (conclude lemma_paralleldef2B).
assert (TP E A H K) by (conclude lemma_paralleldef2B).
assert (TP G C K F) by (conclude lemma_paralleldef2B).
assert (TP B C A D) by (conclude lemma_paralleldef2B).
assert (OS A D B C) by (conclude_def TP ).
assert (OS A D C B) by (conclude lemma_samesideflip).
assert (OS D A C B) by (forward_using lemma_samesidesymmetric).
assert (OS C D A B) by (conclude_def TP ).
assert (OS H K E A) by (conclude_def TP ).
assert (OS K F G C) by (conclude_def TP ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (neq A H) by (forward_using lemma_betweennotequal).
assert (neq B G) by (forward_using lemma_betweennotequal).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists e, (BetS B A e /\\ Cong A e B A)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (BetS e A B) by (conclude axiom_betweennesssymmetry).
assert (OS D C A B) by (forward_using lemma_samesidesymmetric).
assert (RT D A B A B C) by (conclude proposition_29C).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert (BetS E A e) by (conclude lemma_3_6a).
assert (BetS e A E) by (conclude axiom_betweennesssymmetry).
assert (OS H K A E) by (forward_using lemma_samesidesymmetric).
assert (RT H A E A E K) by (conclude proposition_29C).
assert (Out A E B) by (conclude lemma_ray4).
assert (Out A H D) by (conclude lemma_ray4).
assert (nCol A H E) by (forward_using lemma_parallelNC).
assert (nCol E A H) by (forward_using lemma_NCorder).
assert (CongA E A H E A H) by (conclude lemma_equalanglesreflexive).
assert (CongA E A H B A D) by (conclude lemma_equalangleshelper).
assert (CongA H A E D A B) by (conclude lemma_equalanglesflip).
assert (CongA A E K A B C) by (apply (lemma_supplements2 H A E A B C D A B A E K);eauto).
assert (OS C D B A) by (conclude lemma_samesideflip).
assert (Col A E B) by (conclude_def Col ).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq E B) by (forward_using lemma_betweennotequal).
assert (neq B E) by (conclude lemma_inequalitysymmetric).
assert (OS C D B E) by (conclude lemma_samesidecollinear).
assert (Out A H D) by (conclude lemma_ray4).
assert (Out A D H) by (conclude lemma_ray5).
assert (OS C H B E) by (conclude lemma_sameside2).
assert (Col E A B) by (forward_using lemma_collinearorder).
assert (OS H K E B) by (conclude lemma_samesidecollinear).
assert (OS H K B E) by (conclude lemma_samesideflip).
assert (OS C K B E) by (conclude lemma_samesidetransitive).
assert (OS K C B E) by (forward_using lemma_samesidesymmetric).
assert (Out B G C) by (conclude lemma_ray4).
assert (Out B C G) by (conclude lemma_ray5).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (Col B B E) by (conclude_def Col ).
assert (OS K G B E) by (conclude lemma_sameside2).

*****
H69 : OS K G B E
H68 : Col B B E
H67 : eq B B
H66 : Out B C G
H65 : Out B G C
H64 : OS K C B E
H63 : OS C K B E
H62 : OS H K B E
H61 : OS H K E B
H60 : Col E A B
H59 : OS C H B E
H58 : Out A D H
H57 : Out A H D
H56 : OS C D B E
H55 : neq B E
H54 : neq E B
H53 : Col B A E
H52 : Col A E B
H51 : OS C D B A
H50 : CongA A E K A B C
H49 : CongA H A E D A B
H48 : CongA E A H B A D
H47 : CongA E A H E A H
H46 : nCol E A H
H45 : nCol A H E
H44 : Out A H D
H43 : Out A E B
H42 : RT H A E A E K
H41 : OS H K A E
H40 : BetS e A E
H39 : BetS E A e
H38 : BetS B E A
H37 : RT D A B A B C
H36 : OS D C A B
H35 : BetS e A B
H34 : Cong A e B A
H33 : BetS B A e
e : Point
H32 : neq B A
H31 : neq A B
H30 : neq B G
H29 : neq A H
H28 : neq A E
H27 : OS K F G C
H26 : OS H K E A
H25 : OS C D A B
H24 : OS D A C B
H23 : OS A D C B
H22 : OS A D B C
H21 : TP B C A D
H20 : TP G C K F
H19 : TP E A H K
H18 : TP A B C D
H17 : Par A H E K
H16 : Par C D A B
H15 : Par B C A D
H14 : Par G C K F
H13 : Par C F G K
H12 : Par F C G K
H11 : Par G K F C
H10 : Par E K A H
H9 : Par E A H K
H8 : Par A B C D
H7 : Par A D B C
H6 : PG G K F C
H5 : PG E A H K
H4 : BetS B G C
H3 : BetS D F C
H2 : BetS A E B
H1 : BetS A H D
H0 : PG A B C D
A,B,C,D,E,F,G,H,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
PG E K G B
+++++
assert (OS K G E B) by (conclude lemma_samesideflip).
-----
Lemma proposition_43B : forall A B C D E F G H K, PG A B C D -> BetS A H D -> BetS A E B -> BetS D F C -> BetS B G C -> PG E A H K -> PG G K F C -> PG E K G B.
Proof.
intros.
assert (Par A D B C) by (conclude_def PG ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par E A H K) by (conclude_def PG ).
assert (Par E K A H) by (conclude_def PG ).
assert (Par G K F C) by (conclude_def PG ).
assert (Par F C G K) by (conclude lemma_parallelsymmetric).
assert (Par C F G K) by (forward_using lemma_parallelflip).
assert (Par G C K F) by (conclude_def PG ).
assert (Par B C A D) by (conclude lemma_parallelsymmetric).
assert (Par C D A B) by (conclude lemma_parallelsymmetric).
assert (Par A H E K) by (conclude lemma_parallelsymmetric).
assert (TP A B C D) by (conclude lemma_paralleldef2B).
assert (TP E A H K) by (conclude lemma_paralleldef2B).
assert (TP G C K F) by (conclude lemma_paralleldef2B).
assert (TP B C A D) by (conclude lemma_paralleldef2B).
assert (OS A D B C) by (conclude_def TP ).
assert (OS A D C B) by (conclude lemma_samesideflip).
assert (OS D A C B) by (forward_using lemma_samesidesymmetric).
assert (OS C D A B) by (conclude_def TP ).
assert (OS H K E A) by (conclude_def TP ).
assert (OS K F G C) by (conclude_def TP ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (neq A H) by (forward_using lemma_betweennotequal).
assert (neq B G) by (forward_using lemma_betweennotequal).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists e, (BetS B A e /\\ Cong A e B A)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (BetS e A B) by (conclude axiom_betweennesssymmetry).
assert (OS D C A B) by (forward_using lemma_samesidesymmetric).
assert (RT D A B A B C) by (conclude proposition_29C).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert (BetS E A e) by (conclude lemma_3_6a).
assert (BetS e A E) by (conclude axiom_betweennesssymmetry).
assert (OS H K A E) by (forward_using lemma_samesidesymmetric).
assert (RT H A E A E K) by (conclude proposition_29C).
assert (Out A E B) by (conclude lemma_ray4).
assert (Out A H D) by (conclude lemma_ray4).
assert (nCol A H E) by (forward_using lemma_parallelNC).
assert (nCol E A H) by (forward_using lemma_NCorder).
assert (CongA E A H E A H) by (conclude lemma_equalanglesreflexive).
assert (CongA E A H B A D) by (conclude lemma_equalangleshelper).
assert (CongA H A E D A B) by (conclude lemma_equalanglesflip).
assert (CongA A E K A B C) by (apply (lemma_supplements2 H A E A B C D A B A E K);eauto).
assert (OS C D B A) by (conclude lemma_samesideflip).
assert (Col A E B) by (conclude_def Col ).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq E B) by (forward_using lemma_betweennotequal).
assert (neq B E) by (conclude lemma_inequalitysymmetric).
assert (OS C D B E) by (conclude lemma_samesidecollinear).
assert (Out A H D) by (conclude lemma_ray4).
assert (Out A D H) by (conclude lemma_ray5).
assert (OS C H B E) by (conclude lemma_sameside2).
assert (Col E A B) by (forward_using lemma_collinearorder).
assert (OS H K E B) by (conclude lemma_samesidecollinear).
assert (OS H K B E) by (conclude lemma_samesideflip).
assert (OS C K B E) by (conclude lemma_samesidetransitive).
assert (OS K C B E) by (forward_using lemma_samesidesymmetric).
assert (Out B G C) by (conclude lemma_ray4).
assert (Out B C G) by (conclude lemma_ray5).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (Col B B E) by (conclude_def Col ).
assert (OS K G B E) by (conclude lemma_sameside2).
assert (OS K G E B) by (conclude lemma_samesideflip).

*****
H70 : OS K G E B
H69 : OS K G B E
H68 : Col B B E
H67 : eq B B
H66 : Out B C G
H65 : Out B G C
H64 : OS K C B E
H63 : OS C K B E
H62 : OS H K B E
H61 : OS H K E B
H60 : Col E A B
H59 : OS C H B E
H58 : Out A D H
H57 : Out A H D
H56 : OS C D B E
H55 : neq B E
H54 : neq E B
H53 : Col B A E
H52 : Col A E B
H51 : OS C D B A
H50 : CongA A E K A B C
H49 : CongA H A E D A B
H48 : CongA E A H B A D
H47 : CongA E A H E A H
H46 : nCol E A H
H45 : nCol A H E
H44 : Out A H D
H43 : Out A E B
H42 : RT H A E A E K
H41 : OS H K A E
H40 : BetS e A E
H39 : BetS E A e
H38 : BetS B E A
H37 : RT D A B A B C
H36 : OS D C A B
H35 : BetS e A B
H34 : Cong A e B A
H33 : BetS B A e
e : Point
H32 : neq B A
H31 : neq A B
H30 : neq B G
H29 : neq A H
H28 : neq A E
H27 : OS K F G C
H26 : OS H K E A
H25 : OS C D A B
H24 : OS D A C B
H23 : OS A D C B
H22 : OS A D B C
H21 : TP B C A D
H20 : TP G C K F
H19 : TP E A H K
H18 : TP A B C D
H17 : Par A H E K
H16 : Par C D A B
H15 : Par B C A D
H14 : Par G C K F
H13 : Par C F G K
H12 : Par F C G K
H11 : Par G K F C
H10 : Par E K A H
H9 : Par E A H K
H8 : Par A B C D
H7 : Par A D B C
H6 : PG G K F C
H5 : PG E A H K
H4 : BetS B G C
H3 : BetS D F C
H2 : BetS A E B
H1 : BetS A H D
H0 : PG A B C D
A,B,C,D,E,F,G,H,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
PG E K G B
+++++
assert (Out B E A) by (conclude lemma_ray4).
-----
Lemma proposition_43B : forall A B C D E F G H K, PG A B C D -> BetS A H D -> BetS A E B -> BetS D F C -> BetS B G C -> PG E A H K -> PG G K F C -> PG E K G B.
Proof.
intros.
assert (Par A D B C) by (conclude_def PG ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par E A H K) by (conclude_def PG ).
assert (Par E K A H) by (conclude_def PG ).
assert (Par G K F C) by (conclude_def PG ).
assert (Par F C G K) by (conclude lemma_parallelsymmetric).
assert (Par C F G K) by (forward_using lemma_parallelflip).
assert (Par G C K F) by (conclude_def PG ).
assert (Par B C A D) by (conclude lemma_parallelsymmetric).
assert (Par C D A B) by (conclude lemma_parallelsymmetric).
assert (Par A H E K) by (conclude lemma_parallelsymmetric).
assert (TP A B C D) by (conclude lemma_paralleldef2B).
assert (TP E A H K) by (conclude lemma_paralleldef2B).
assert (TP G C K F) by (conclude lemma_paralleldef2B).
assert (TP B C A D) by (conclude lemma_paralleldef2B).
assert (OS A D B C) by (conclude_def TP ).
assert (OS A D C B) by (conclude lemma_samesideflip).
assert (OS D A C B) by (forward_using lemma_samesidesymmetric).
assert (OS C D A B) by (conclude_def TP ).
assert (OS H K E A) by (conclude_def TP ).
assert (OS K F G C) by (conclude_def TP ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (neq A H) by (forward_using lemma_betweennotequal).
assert (neq B G) by (forward_using lemma_betweennotequal).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists e, (BetS B A e /\\ Cong A e B A)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (BetS e A B) by (conclude axiom_betweennesssymmetry).
assert (OS D C A B) by (forward_using lemma_samesidesymmetric).
assert (RT D A B A B C) by (conclude proposition_29C).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert (BetS E A e) by (conclude lemma_3_6a).
assert (BetS e A E) by (conclude axiom_betweennesssymmetry).
assert (OS H K A E) by (forward_using lemma_samesidesymmetric).
assert (RT H A E A E K) by (conclude proposition_29C).
assert (Out A E B) by (conclude lemma_ray4).
assert (Out A H D) by (conclude lemma_ray4).
assert (nCol A H E) by (forward_using lemma_parallelNC).
assert (nCol E A H) by (forward_using lemma_NCorder).
assert (CongA E A H E A H) by (conclude lemma_equalanglesreflexive).
assert (CongA E A H B A D) by (conclude lemma_equalangleshelper).
assert (CongA H A E D A B) by (conclude lemma_equalanglesflip).
assert (CongA A E K A B C) by (apply (lemma_supplements2 H A E A B C D A B A E K);eauto).
assert (OS C D B A) by (conclude lemma_samesideflip).
assert (Col A E B) by (conclude_def Col ).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq E B) by (forward_using lemma_betweennotequal).
assert (neq B E) by (conclude lemma_inequalitysymmetric).
assert (OS C D B E) by (conclude lemma_samesidecollinear).
assert (Out A H D) by (conclude lemma_ray4).
assert (Out A D H) by (conclude lemma_ray5).
assert (OS C H B E) by (conclude lemma_sameside2).
assert (Col E A B) by (forward_using lemma_collinearorder).
assert (OS H K E B) by (conclude lemma_samesidecollinear).
assert (OS H K B E) by (conclude lemma_samesideflip).
assert (OS C K B E) by (conclude lemma_samesidetransitive).
assert (OS K C B E) by (forward_using lemma_samesidesymmetric).
assert (Out B G C) by (conclude lemma_ray4).
assert (Out B C G) by (conclude lemma_ray5).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (Col B B E) by (conclude_def Col ).
assert (OS K G B E) by (conclude lemma_sameside2).
assert (OS K G E B) by (conclude lemma_samesideflip).
assert (Out B E A) by (conclude lemma_ray4).

*****
H71 : Out B E A
H70 : OS K G E B
H69 : OS K G B E
H68 : Col B B E
H67 : eq B B
H66 : Out B C G
H65 : Out B G C
H64 : OS K C B E
H63 : OS C K B E
H62 : OS H K B E
H61 : OS H K E B
H60 : Col E A B
H59 : OS C H B E
H58 : Out A D H
H57 : Out A H D
H56 : OS C D B E
H55 : neq B E
H54 : neq E B
H53 : Col B A E
H52 : Col A E B
H51 : OS C D B A
H50 : CongA A E K A B C
H49 : CongA H A E D A B
H48 : CongA E A H B A D
H47 : CongA E A H E A H
H46 : nCol E A H
H45 : nCol A H E
H44 : Out A H D
H43 : Out A E B
H42 : RT H A E A E K
H41 : OS H K A E
H40 : BetS e A E
H39 : BetS E A e
H38 : BetS B E A
H37 : RT D A B A B C
H36 : OS D C A B
H35 : BetS e A B
H34 : Cong A e B A
H33 : BetS B A e
e : Point
H32 : neq B A
H31 : neq A B
H30 : neq B G
H29 : neq A H
H28 : neq A E
H27 : OS K F G C
H26 : OS H K E A
H25 : OS C D A B
H24 : OS D A C B
H23 : OS A D C B
H22 : OS A D B C
H21 : TP B C A D
H20 : TP G C K F
H19 : TP E A H K
H18 : TP A B C D
H17 : Par A H E K
H16 : Par C D A B
H15 : Par B C A D
H14 : Par G C K F
H13 : Par C F G K
H12 : Par F C G K
H11 : Par G K F C
H10 : Par E K A H
H9 : Par E A H K
H8 : Par A B C D
H7 : Par A D B C
H6 : PG G K F C
H5 : PG E A H K
H4 : BetS B G C
H3 : BetS D F C
H2 : BetS A E B
H1 : BetS A H D
H0 : PG A B C D
A,B,C,D,E,F,G,H,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
PG E K G B
+++++
assert (Out B A E) by (conclude lemma_ray5).
-----
Lemma proposition_43B : forall A B C D E F G H K, PG A B C D -> BetS A H D -> BetS A E B -> BetS D F C -> BetS B G C -> PG E A H K -> PG G K F C -> PG E K G B.
Proof.
intros.
assert (Par A D B C) by (conclude_def PG ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par E A H K) by (conclude_def PG ).
assert (Par E K A H) by (conclude_def PG ).
assert (Par G K F C) by (conclude_def PG ).
assert (Par F C G K) by (conclude lemma_parallelsymmetric).
assert (Par C F G K) by (forward_using lemma_parallelflip).
assert (Par G C K F) by (conclude_def PG ).
assert (Par B C A D) by (conclude lemma_parallelsymmetric).
assert (Par C D A B) by (conclude lemma_parallelsymmetric).
assert (Par A H E K) by (conclude lemma_parallelsymmetric).
assert (TP A B C D) by (conclude lemma_paralleldef2B).
assert (TP E A H K) by (conclude lemma_paralleldef2B).
assert (TP G C K F) by (conclude lemma_paralleldef2B).
assert (TP B C A D) by (conclude lemma_paralleldef2B).
assert (OS A D B C) by (conclude_def TP ).
assert (OS A D C B) by (conclude lemma_samesideflip).
assert (OS D A C B) by (forward_using lemma_samesidesymmetric).
assert (OS C D A B) by (conclude_def TP ).
assert (OS H K E A) by (conclude_def TP ).
assert (OS K F G C) by (conclude_def TP ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (neq A H) by (forward_using lemma_betweennotequal).
assert (neq B G) by (forward_using lemma_betweennotequal).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists e, (BetS B A e /\\ Cong A e B A)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (BetS e A B) by (conclude axiom_betweennesssymmetry).
assert (OS D C A B) by (forward_using lemma_samesidesymmetric).
assert (RT D A B A B C) by (conclude proposition_29C).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert (BetS E A e) by (conclude lemma_3_6a).
assert (BetS e A E) by (conclude axiom_betweennesssymmetry).
assert (OS H K A E) by (forward_using lemma_samesidesymmetric).
assert (RT H A E A E K) by (conclude proposition_29C).
assert (Out A E B) by (conclude lemma_ray4).
assert (Out A H D) by (conclude lemma_ray4).
assert (nCol A H E) by (forward_using lemma_parallelNC).
assert (nCol E A H) by (forward_using lemma_NCorder).
assert (CongA E A H E A H) by (conclude lemma_equalanglesreflexive).
assert (CongA E A H B A D) by (conclude lemma_equalangleshelper).
assert (CongA H A E D A B) by (conclude lemma_equalanglesflip).
assert (CongA A E K A B C) by (apply (lemma_supplements2 H A E A B C D A B A E K);eauto).
assert (OS C D B A) by (conclude lemma_samesideflip).
assert (Col A E B) by (conclude_def Col ).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq E B) by (forward_using lemma_betweennotequal).
assert (neq B E) by (conclude lemma_inequalitysymmetric).
assert (OS C D B E) by (conclude lemma_samesidecollinear).
assert (Out A H D) by (conclude lemma_ray4).
assert (Out A D H) by (conclude lemma_ray5).
assert (OS C H B E) by (conclude lemma_sameside2).
assert (Col E A B) by (forward_using lemma_collinearorder).
assert (OS H K E B) by (conclude lemma_samesidecollinear).
assert (OS H K B E) by (conclude lemma_samesideflip).
assert (OS C K B E) by (conclude lemma_samesidetransitive).
assert (OS K C B E) by (forward_using lemma_samesidesymmetric).
assert (Out B G C) by (conclude lemma_ray4).
assert (Out B C G) by (conclude lemma_ray5).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (Col B B E) by (conclude_def Col ).
assert (OS K G B E) by (conclude lemma_sameside2).
assert (OS K G E B) by (conclude lemma_samesideflip).
assert (Out B E A) by (conclude lemma_ray4).
assert (Out B A E) by (conclude lemma_ray5).

*****
H72 : Out B A E
H71 : Out B E A
H70 : OS K G E B
H69 : OS K G B E
H68 : Col B B E
H67 : eq B B
H66 : Out B C G
H65 : Out B G C
H64 : OS K C B E
H63 : OS C K B E
H62 : OS H K B E
H61 : OS H K E B
H60 : Col E A B
H59 : OS C H B E
H58 : Out A D H
H57 : Out A H D
H56 : OS C D B E
H55 : neq B E
H54 : neq E B
H53 : Col B A E
H52 : Col A E B
H51 : OS C D B A
H50 : CongA A E K A B C
H49 : CongA H A E D A B
H48 : CongA E A H B A D
H47 : CongA E A H E A H
H46 : nCol E A H
H45 : nCol A H E
H44 : Out A H D
H43 : Out A E B
H42 : RT H A E A E K
H41 : OS H K A E
H40 : BetS e A E
H39 : BetS E A e
H38 : BetS B E A
H37 : RT D A B A B C
H36 : OS D C A B
H35 : BetS e A B
H34 : Cong A e B A
H33 : BetS B A e
e : Point
H32 : neq B A
H31 : neq A B
H30 : neq B G
H29 : neq A H
H28 : neq A E
H27 : OS K F G C
H26 : OS H K E A
H25 : OS C D A B
H24 : OS D A C B
H23 : OS A D C B
H22 : OS A D B C
H21 : TP B C A D
H20 : TP G C K F
H19 : TP E A H K
H18 : TP A B C D
H17 : Par A H E K
H16 : Par C D A B
H15 : Par B C A D
H14 : Par G C K F
H13 : Par C F G K
H12 : Par F C G K
H11 : Par G K F C
H10 : Par E K A H
H9 : Par E A H K
H8 : Par A B C D
H7 : Par A D B C
H6 : PG G K F C
H5 : PG E A H K
H4 : BetS B G C
H3 : BetS D F C
H2 : BetS A E B
H1 : BetS A H D
H0 : PG A B C D
A,B,C,D,E,F,G,H,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
PG E K G B
+++++
assert (CongA A E K E B G) by (conclude lemma_equalangleshelper).
-----
Lemma proposition_43B : forall A B C D E F G H K, PG A B C D -> BetS A H D -> BetS A E B -> BetS D F C -> BetS B G C -> PG E A H K -> PG G K F C -> PG E K G B.
Proof.
intros.
assert (Par A D B C) by (conclude_def PG ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par E A H K) by (conclude_def PG ).
assert (Par E K A H) by (conclude_def PG ).
assert (Par G K F C) by (conclude_def PG ).
assert (Par F C G K) by (conclude lemma_parallelsymmetric).
assert (Par C F G K) by (forward_using lemma_parallelflip).
assert (Par G C K F) by (conclude_def PG ).
assert (Par B C A D) by (conclude lemma_parallelsymmetric).
assert (Par C D A B) by (conclude lemma_parallelsymmetric).
assert (Par A H E K) by (conclude lemma_parallelsymmetric).
assert (TP A B C D) by (conclude lemma_paralleldef2B).
assert (TP E A H K) by (conclude lemma_paralleldef2B).
assert (TP G C K F) by (conclude lemma_paralleldef2B).
assert (TP B C A D) by (conclude lemma_paralleldef2B).
assert (OS A D B C) by (conclude_def TP ).
assert (OS A D C B) by (conclude lemma_samesideflip).
assert (OS D A C B) by (forward_using lemma_samesidesymmetric).
assert (OS C D A B) by (conclude_def TP ).
assert (OS H K E A) by (conclude_def TP ).
assert (OS K F G C) by (conclude_def TP ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (neq A H) by (forward_using lemma_betweennotequal).
assert (neq B G) by (forward_using lemma_betweennotequal).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists e, (BetS B A e /\\ Cong A e B A)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (BetS e A B) by (conclude axiom_betweennesssymmetry).
assert (OS D C A B) by (forward_using lemma_samesidesymmetric).
assert (RT D A B A B C) by (conclude proposition_29C).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert (BetS E A e) by (conclude lemma_3_6a).
assert (BetS e A E) by (conclude axiom_betweennesssymmetry).
assert (OS H K A E) by (forward_using lemma_samesidesymmetric).
assert (RT H A E A E K) by (conclude proposition_29C).
assert (Out A E B) by (conclude lemma_ray4).
assert (Out A H D) by (conclude lemma_ray4).
assert (nCol A H E) by (forward_using lemma_parallelNC).
assert (nCol E A H) by (forward_using lemma_NCorder).
assert (CongA E A H E A H) by (conclude lemma_equalanglesreflexive).
assert (CongA E A H B A D) by (conclude lemma_equalangleshelper).
assert (CongA H A E D A B) by (conclude lemma_equalanglesflip).
assert (CongA A E K A B C) by (apply (lemma_supplements2 H A E A B C D A B A E K);eauto).
assert (OS C D B A) by (conclude lemma_samesideflip).
assert (Col A E B) by (conclude_def Col ).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq E B) by (forward_using lemma_betweennotequal).
assert (neq B E) by (conclude lemma_inequalitysymmetric).
assert (OS C D B E) by (conclude lemma_samesidecollinear).
assert (Out A H D) by (conclude lemma_ray4).
assert (Out A D H) by (conclude lemma_ray5).
assert (OS C H B E) by (conclude lemma_sameside2).
assert (Col E A B) by (forward_using lemma_collinearorder).
assert (OS H K E B) by (conclude lemma_samesidecollinear).
assert (OS H K B E) by (conclude lemma_samesideflip).
assert (OS C K B E) by (conclude lemma_samesidetransitive).
assert (OS K C B E) by (forward_using lemma_samesidesymmetric).
assert (Out B G C) by (conclude lemma_ray4).
assert (Out B C G) by (conclude lemma_ray5).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (Col B B E) by (conclude_def Col ).
assert (OS K G B E) by (conclude lemma_sameside2).
assert (OS K G E B) by (conclude lemma_samesideflip).
assert (Out B E A) by (conclude lemma_ray4).
assert (Out B A E) by (conclude lemma_ray5).
assert (CongA A E K E B G) by (conclude lemma_equalangleshelper).

*****
H73 : CongA A E K E B G
H72 : Out B A E
H71 : Out B E A
H70 : OS K G E B
H69 : OS K G B E
H68 : Col B B E
H67 : eq B B
H66 : Out B C G
H65 : Out B G C
H64 : OS K C B E
H63 : OS C K B E
H62 : OS H K B E
H61 : OS H K E B
H60 : Col E A B
H59 : OS C H B E
H58 : Out A D H
H57 : Out A H D
H56 : OS C D B E
H55 : neq B E
H54 : neq E B
H53 : Col B A E
H52 : Col A E B
H51 : OS C D B A
H50 : CongA A E K A B C
H49 : CongA H A E D A B
H48 : CongA E A H B A D
H47 : CongA E A H E A H
H46 : nCol E A H
H45 : nCol A H E
H44 : Out A H D
H43 : Out A E B
H42 : RT H A E A E K
H41 : OS H K A E
H40 : BetS e A E
H39 : BetS E A e
H38 : BetS B E A
H37 : RT D A B A B C
H36 : OS D C A B
H35 : BetS e A B
H34 : Cong A e B A
H33 : BetS B A e
e : Point
H32 : neq B A
H31 : neq A B
H30 : neq B G
H29 : neq A H
H28 : neq A E
H27 : OS K F G C
H26 : OS H K E A
H25 : OS C D A B
H24 : OS D A C B
H23 : OS A D C B
H22 : OS A D B C
H21 : TP B C A D
H20 : TP G C K F
H19 : TP E A H K
H18 : TP A B C D
H17 : Par A H E K
H16 : Par C D A B
H15 : Par B C A D
H14 : Par G C K F
H13 : Par C F G K
H12 : Par F C G K
H11 : Par G K F C
H10 : Par E K A H
H9 : Par E A H K
H8 : Par A B C D
H7 : Par A D B C
H6 : PG G K F C
H5 : PG E A H K
H4 : BetS B G C
H3 : BetS D F C
H2 : BetS A E B
H1 : BetS A H D
H0 : PG A B C D
A,B,C,D,E,F,G,H,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
PG E K G B
+++++
assert (Par E K B G) by (conclude proposition_28D).
-----
Lemma proposition_43B : forall A B C D E F G H K, PG A B C D -> BetS A H D -> BetS A E B -> BetS D F C -> BetS B G C -> PG E A H K -> PG G K F C -> PG E K G B.
Proof.
intros.
assert (Par A D B C) by (conclude_def PG ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par E A H K) by (conclude_def PG ).
assert (Par E K A H) by (conclude_def PG ).
assert (Par G K F C) by (conclude_def PG ).
assert (Par F C G K) by (conclude lemma_parallelsymmetric).
assert (Par C F G K) by (forward_using lemma_parallelflip).
assert (Par G C K F) by (conclude_def PG ).
assert (Par B C A D) by (conclude lemma_parallelsymmetric).
assert (Par C D A B) by (conclude lemma_parallelsymmetric).
assert (Par A H E K) by (conclude lemma_parallelsymmetric).
assert (TP A B C D) by (conclude lemma_paralleldef2B).
assert (TP E A H K) by (conclude lemma_paralleldef2B).
assert (TP G C K F) by (conclude lemma_paralleldef2B).
assert (TP B C A D) by (conclude lemma_paralleldef2B).
assert (OS A D B C) by (conclude_def TP ).
assert (OS A D C B) by (conclude lemma_samesideflip).
assert (OS D A C B) by (forward_using lemma_samesidesymmetric).
assert (OS C D A B) by (conclude_def TP ).
assert (OS H K E A) by (conclude_def TP ).
assert (OS K F G C) by (conclude_def TP ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (neq A H) by (forward_using lemma_betweennotequal).
assert (neq B G) by (forward_using lemma_betweennotequal).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists e, (BetS B A e /\\ Cong A e B A)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (BetS e A B) by (conclude axiom_betweennesssymmetry).
assert (OS D C A B) by (forward_using lemma_samesidesymmetric).
assert (RT D A B A B C) by (conclude proposition_29C).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert (BetS E A e) by (conclude lemma_3_6a).
assert (BetS e A E) by (conclude axiom_betweennesssymmetry).
assert (OS H K A E) by (forward_using lemma_samesidesymmetric).
assert (RT H A E A E K) by (conclude proposition_29C).
assert (Out A E B) by (conclude lemma_ray4).
assert (Out A H D) by (conclude lemma_ray4).
assert (nCol A H E) by (forward_using lemma_parallelNC).
assert (nCol E A H) by (forward_using lemma_NCorder).
assert (CongA E A H E A H) by (conclude lemma_equalanglesreflexive).
assert (CongA E A H B A D) by (conclude lemma_equalangleshelper).
assert (CongA H A E D A B) by (conclude lemma_equalanglesflip).
assert (CongA A E K A B C) by (apply (lemma_supplements2 H A E A B C D A B A E K);eauto).
assert (OS C D B A) by (conclude lemma_samesideflip).
assert (Col A E B) by (conclude_def Col ).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq E B) by (forward_using lemma_betweennotequal).
assert (neq B E) by (conclude lemma_inequalitysymmetric).
assert (OS C D B E) by (conclude lemma_samesidecollinear).
assert (Out A H D) by (conclude lemma_ray4).
assert (Out A D H) by (conclude lemma_ray5).
assert (OS C H B E) by (conclude lemma_sameside2).
assert (Col E A B) by (forward_using lemma_collinearorder).
assert (OS H K E B) by (conclude lemma_samesidecollinear).
assert (OS H K B E) by (conclude lemma_samesideflip).
assert (OS C K B E) by (conclude lemma_samesidetransitive).
assert (OS K C B E) by (forward_using lemma_samesidesymmetric).
assert (Out B G C) by (conclude lemma_ray4).
assert (Out B C G) by (conclude lemma_ray5).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (Col B B E) by (conclude_def Col ).
assert (OS K G B E) by (conclude lemma_sameside2).
assert (OS K G E B) by (conclude lemma_samesideflip).
assert (Out B E A) by (conclude lemma_ray4).
assert (Out B A E) by (conclude lemma_ray5).
assert (CongA A E K E B G) by (conclude lemma_equalangleshelper).
assert (Par E K B G) by (conclude proposition_28D).

*****
H74 : Par E K B G
H73 : CongA A E K E B G
H72 : Out B A E
H71 : Out B E A
H70 : OS K G E B
H69 : OS K G B E
H68 : Col B B E
H67 : eq B B
H66 : Out B C G
H65 : Out B G C
H64 : OS K C B E
H63 : OS C K B E
H62 : OS H K B E
H61 : OS H K E B
H60 : Col E A B
H59 : OS C H B E
H58 : Out A D H
H57 : Out A H D
H56 : OS C D B E
H55 : neq B E
H54 : neq E B
H53 : Col B A E
H52 : Col A E B
H51 : OS C D B A
H50 : CongA A E K A B C
H49 : CongA H A E D A B
H48 : CongA E A H B A D
H47 : CongA E A H E A H
H46 : nCol E A H
H45 : nCol A H E
H44 : Out A H D
H43 : Out A E B
H42 : RT H A E A E K
H41 : OS H K A E
H40 : BetS e A E
H39 : BetS E A e
H38 : BetS B E A
H37 : RT D A B A B C
H36 : OS D C A B
H35 : BetS e A B
H34 : Cong A e B A
H33 : BetS B A e
e : Point
H32 : neq B A
H31 : neq A B
H30 : neq B G
H29 : neq A H
H28 : neq A E
H27 : OS K F G C
H26 : OS H K E A
H25 : OS C D A B
H24 : OS D A C B
H23 : OS A D C B
H22 : OS A D B C
H21 : TP B C A D
H20 : TP G C K F
H19 : TP E A H K
H18 : TP A B C D
H17 : Par A H E K
H16 : Par C D A B
H15 : Par B C A D
H14 : Par G C K F
H13 : Par C F G K
H12 : Par F C G K
H11 : Par G K F C
H10 : Par E K A H
H9 : Par E A H K
H8 : Par A B C D
H7 : Par A D B C
H6 : PG G K F C
H5 : PG E A H K
H4 : BetS B G C
H3 : BetS D F C
H2 : BetS A E B
H1 : BetS A H D
H0 : PG A B C D
A,B,C,D,E,F,G,H,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
PG E K G B
+++++
assert (Par E K G B) by (forward_using lemma_parallelflip).
-----
Lemma proposition_43B : forall A B C D E F G H K, PG A B C D -> BetS A H D -> BetS A E B -> BetS D F C -> BetS B G C -> PG E A H K -> PG G K F C -> PG E K G B.
Proof.
intros.
assert (Par A D B C) by (conclude_def PG ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par E A H K) by (conclude_def PG ).
assert (Par E K A H) by (conclude_def PG ).
assert (Par G K F C) by (conclude_def PG ).
assert (Par F C G K) by (conclude lemma_parallelsymmetric).
assert (Par C F G K) by (forward_using lemma_parallelflip).
assert (Par G C K F) by (conclude_def PG ).
assert (Par B C A D) by (conclude lemma_parallelsymmetric).
assert (Par C D A B) by (conclude lemma_parallelsymmetric).
assert (Par A H E K) by (conclude lemma_parallelsymmetric).
assert (TP A B C D) by (conclude lemma_paralleldef2B).
assert (TP E A H K) by (conclude lemma_paralleldef2B).
assert (TP G C K F) by (conclude lemma_paralleldef2B).
assert (TP B C A D) by (conclude lemma_paralleldef2B).
assert (OS A D B C) by (conclude_def TP ).
assert (OS A D C B) by (conclude lemma_samesideflip).
assert (OS D A C B) by (forward_using lemma_samesidesymmetric).
assert (OS C D A B) by (conclude_def TP ).
assert (OS H K E A) by (conclude_def TP ).
assert (OS K F G C) by (conclude_def TP ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (neq A H) by (forward_using lemma_betweennotequal).
assert (neq B G) by (forward_using lemma_betweennotequal).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists e, (BetS B A e /\\ Cong A e B A)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (BetS e A B) by (conclude axiom_betweennesssymmetry).
assert (OS D C A B) by (forward_using lemma_samesidesymmetric).
assert (RT D A B A B C) by (conclude proposition_29C).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert (BetS E A e) by (conclude lemma_3_6a).
assert (BetS e A E) by (conclude axiom_betweennesssymmetry).
assert (OS H K A E) by (forward_using lemma_samesidesymmetric).
assert (RT H A E A E K) by (conclude proposition_29C).
assert (Out A E B) by (conclude lemma_ray4).
assert (Out A H D) by (conclude lemma_ray4).
assert (nCol A H E) by (forward_using lemma_parallelNC).
assert (nCol E A H) by (forward_using lemma_NCorder).
assert (CongA E A H E A H) by (conclude lemma_equalanglesreflexive).
assert (CongA E A H B A D) by (conclude lemma_equalangleshelper).
assert (CongA H A E D A B) by (conclude lemma_equalanglesflip).
assert (CongA A E K A B C) by (apply (lemma_supplements2 H A E A B C D A B A E K);eauto).
assert (OS C D B A) by (conclude lemma_samesideflip).
assert (Col A E B) by (conclude_def Col ).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq E B) by (forward_using lemma_betweennotequal).
assert (neq B E) by (conclude lemma_inequalitysymmetric).
assert (OS C D B E) by (conclude lemma_samesidecollinear).
assert (Out A H D) by (conclude lemma_ray4).
assert (Out A D H) by (conclude lemma_ray5).
assert (OS C H B E) by (conclude lemma_sameside2).
assert (Col E A B) by (forward_using lemma_collinearorder).
assert (OS H K E B) by (conclude lemma_samesidecollinear).
assert (OS H K B E) by (conclude lemma_samesideflip).
assert (OS C K B E) by (conclude lemma_samesidetransitive).
assert (OS K C B E) by (forward_using lemma_samesidesymmetric).
assert (Out B G C) by (conclude lemma_ray4).
assert (Out B C G) by (conclude lemma_ray5).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (Col B B E) by (conclude_def Col ).
assert (OS K G B E) by (conclude lemma_sameside2).
assert (OS K G E B) by (conclude lemma_samesideflip).
assert (Out B E A) by (conclude lemma_ray4).
assert (Out B A E) by (conclude lemma_ray5).
assert (CongA A E K E B G) by (conclude lemma_equalangleshelper).
assert (Par E K B G) by (conclude proposition_28D).
assert (Par E K G B) by (forward_using lemma_parallelflip).

*****
H75 : Par E K G B
H74 : Par E K B G
H73 : CongA A E K E B G
H72 : Out B A E
H71 : Out B E A
H70 : OS K G E B
H69 : OS K G B E
H68 : Col B B E
H67 : eq B B
H66 : Out B C G
H65 : Out B G C
H64 : OS K C B E
H63 : OS C K B E
H62 : OS H K B E
H61 : OS H K E B
H60 : Col E A B
H59 : OS C H B E
H58 : Out A D H
H57 : Out A H D
H56 : OS C D B E
H55 : neq B E
H54 : neq E B
H53 : Col B A E
H52 : Col A E B
H51 : OS C D B A
H50 : CongA A E K A B C
H49 : CongA H A E D A B
H48 : CongA E A H B A D
H47 : CongA E A H E A H
H46 : nCol E A H
H45 : nCol A H E
H44 : Out A H D
H43 : Out A E B
H42 : RT H A E A E K
H41 : OS H K A E
H40 : BetS e A E
H39 : BetS E A e
H38 : BetS B E A
H37 : RT D A B A B C
H36 : OS D C A B
H35 : BetS e A B
H34 : Cong A e B A
H33 : BetS B A e
e : Point
H32 : neq B A
H31 : neq A B
H30 : neq B G
H29 : neq A H
H28 : neq A E
H27 : OS K F G C
H26 : OS H K E A
H25 : OS C D A B
H24 : OS D A C B
H23 : OS A D C B
H22 : OS A D B C
H21 : TP B C A D
H20 : TP G C K F
H19 : TP E A H K
H18 : TP A B C D
H17 : Par A H E K
H16 : Par C D A B
H15 : Par B C A D
H14 : Par G C K F
H13 : Par C F G K
H12 : Par F C G K
H11 : Par G K F C
H10 : Par E K A H
H9 : Par E A H K
H8 : Par A B C D
H7 : Par A D B C
H6 : PG G K F C
H5 : PG E A H K
H4 : BetS B G C
H3 : BetS D F C
H2 : BetS A E B
H1 : BetS A H D
H0 : PG A B C D
A,B,C,D,E,F,G,H,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
PG E K G B
+++++
assert (neq B C) by (forward_using lemma_betweennotequal).
-----
Lemma proposition_43B : forall A B C D E F G H K, PG A B C D -> BetS A H D -> BetS A E B -> BetS D F C -> BetS B G C -> PG E A H K -> PG G K F C -> PG E K G B.
Proof.
intros.
assert (Par A D B C) by (conclude_def PG ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par E A H K) by (conclude_def PG ).
assert (Par E K A H) by (conclude_def PG ).
assert (Par G K F C) by (conclude_def PG ).
assert (Par F C G K) by (conclude lemma_parallelsymmetric).
assert (Par C F G K) by (forward_using lemma_parallelflip).
assert (Par G C K F) by (conclude_def PG ).
assert (Par B C A D) by (conclude lemma_parallelsymmetric).
assert (Par C D A B) by (conclude lemma_parallelsymmetric).
assert (Par A H E K) by (conclude lemma_parallelsymmetric).
assert (TP A B C D) by (conclude lemma_paralleldef2B).
assert (TP E A H K) by (conclude lemma_paralleldef2B).
assert (TP G C K F) by (conclude lemma_paralleldef2B).
assert (TP B C A D) by (conclude lemma_paralleldef2B).
assert (OS A D B C) by (conclude_def TP ).
assert (OS A D C B) by (conclude lemma_samesideflip).
assert (OS D A C B) by (forward_using lemma_samesidesymmetric).
assert (OS C D A B) by (conclude_def TP ).
assert (OS H K E A) by (conclude_def TP ).
assert (OS K F G C) by (conclude_def TP ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (neq A H) by (forward_using lemma_betweennotequal).
assert (neq B G) by (forward_using lemma_betweennotequal).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists e, (BetS B A e /\\ Cong A e B A)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (BetS e A B) by (conclude axiom_betweennesssymmetry).
assert (OS D C A B) by (forward_using lemma_samesidesymmetric).
assert (RT D A B A B C) by (conclude proposition_29C).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert (BetS E A e) by (conclude lemma_3_6a).
assert (BetS e A E) by (conclude axiom_betweennesssymmetry).
assert (OS H K A E) by (forward_using lemma_samesidesymmetric).
assert (RT H A E A E K) by (conclude proposition_29C).
assert (Out A E B) by (conclude lemma_ray4).
assert (Out A H D) by (conclude lemma_ray4).
assert (nCol A H E) by (forward_using lemma_parallelNC).
assert (nCol E A H) by (forward_using lemma_NCorder).
assert (CongA E A H E A H) by (conclude lemma_equalanglesreflexive).
assert (CongA E A H B A D) by (conclude lemma_equalangleshelper).
assert (CongA H A E D A B) by (conclude lemma_equalanglesflip).
assert (CongA A E K A B C) by (apply (lemma_supplements2 H A E A B C D A B A E K);eauto).
assert (OS C D B A) by (conclude lemma_samesideflip).
assert (Col A E B) by (conclude_def Col ).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq E B) by (forward_using lemma_betweennotequal).
assert (neq B E) by (conclude lemma_inequalitysymmetric).
assert (OS C D B E) by (conclude lemma_samesidecollinear).
assert (Out A H D) by (conclude lemma_ray4).
assert (Out A D H) by (conclude lemma_ray5).
assert (OS C H B E) by (conclude lemma_sameside2).
assert (Col E A B) by (forward_using lemma_collinearorder).
assert (OS H K E B) by (conclude lemma_samesidecollinear).
assert (OS H K B E) by (conclude lemma_samesideflip).
assert (OS C K B E) by (conclude lemma_samesidetransitive).
assert (OS K C B E) by (forward_using lemma_samesidesymmetric).
assert (Out B G C) by (conclude lemma_ray4).
assert (Out B C G) by (conclude lemma_ray5).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (Col B B E) by (conclude_def Col ).
assert (OS K G B E) by (conclude lemma_sameside2).
assert (OS K G E B) by (conclude lemma_samesideflip).
assert (Out B E A) by (conclude lemma_ray4).
assert (Out B A E) by (conclude lemma_ray5).
assert (CongA A E K E B G) by (conclude lemma_equalangleshelper).
assert (Par E K B G) by (conclude proposition_28D).
assert (Par E K G B) by (forward_using lemma_parallelflip).
assert (neq B C) by (forward_using lemma_betweennotequal).

*****
H76 : neq B C
H75 : Par E K G B
H74 : Par E K B G
H73 : CongA A E K E B G
H72 : Out B A E
H71 : Out B E A
H70 : OS K G E B
H69 : OS K G B E
H68 : Col B B E
H67 : eq B B
H66 : Out B C G
H65 : Out B G C
H64 : OS K C B E
H63 : OS C K B E
H62 : OS H K B E
H61 : OS H K E B
H60 : Col E A B
H59 : OS C H B E
H58 : Out A D H
H57 : Out A H D
H56 : OS C D B E
H55 : neq B E
H54 : neq E B
H53 : Col B A E
H52 : Col A E B
H51 : OS C D B A
H50 : CongA A E K A B C
H49 : CongA H A E D A B
H48 : CongA E A H B A D
H47 : CongA E A H E A H
H46 : nCol E A H
H45 : nCol A H E
H44 : Out A H D
H43 : Out A E B
H42 : RT H A E A E K
H41 : OS H K A E
H40 : BetS e A E
H39 : BetS E A e
H38 : BetS B E A
H37 : RT D A B A B C
H36 : OS D C A B
H35 : BetS e A B
H34 : Cong A e B A
H33 : BetS B A e
e : Point
H32 : neq B A
H31 : neq A B
H30 : neq B G
H29 : neq A H
H28 : neq A E
H27 : OS K F G C
H26 : OS H K E A
H25 : OS C D A B
H24 : OS D A C B
H23 : OS A D C B
H22 : OS A D B C
H21 : TP B C A D
H20 : TP G C K F
H19 : TP E A H K
H18 : TP A B C D
H17 : Par A H E K
H16 : Par C D A B
H15 : Par B C A D
H14 : Par G C K F
H13 : Par C F G K
H12 : Par F C G K
H11 : Par G K F C
H10 : Par E K A H
H9 : Par E A H K
H8 : Par A B C D
H7 : Par A D B C
H6 : PG G K F C
H5 : PG E A H K
H4 : BetS B G C
H3 : BetS D F C
H2 : BetS A E B
H1 : BetS A H D
H0 : PG A B C D
A,B,C,D,E,F,G,H,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
PG E K G B
+++++
let Tf:=fresh in assert (Tf:exists c, (BetS B C c /\ Cong C c B C)) by (conclude lemma_extension);destruct Tf as [c];spliter.
-----
Lemma proposition_43B : forall A B C D E F G H K, PG A B C D -> BetS A H D -> BetS A E B -> BetS D F C -> BetS B G C -> PG E A H K -> PG G K F C -> PG E K G B.
Proof.
intros.
assert (Par A D B C) by (conclude_def PG ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par E A H K) by (conclude_def PG ).
assert (Par E K A H) by (conclude_def PG ).
assert (Par G K F C) by (conclude_def PG ).
assert (Par F C G K) by (conclude lemma_parallelsymmetric).
assert (Par C F G K) by (forward_using lemma_parallelflip).
assert (Par G C K F) by (conclude_def PG ).
assert (Par B C A D) by (conclude lemma_parallelsymmetric).
assert (Par C D A B) by (conclude lemma_parallelsymmetric).
assert (Par A H E K) by (conclude lemma_parallelsymmetric).
assert (TP A B C D) by (conclude lemma_paralleldef2B).
assert (TP E A H K) by (conclude lemma_paralleldef2B).
assert (TP G C K F) by (conclude lemma_paralleldef2B).
assert (TP B C A D) by (conclude lemma_paralleldef2B).
assert (OS A D B C) by (conclude_def TP ).
assert (OS A D C B) by (conclude lemma_samesideflip).
assert (OS D A C B) by (forward_using lemma_samesidesymmetric).
assert (OS C D A B) by (conclude_def TP ).
assert (OS H K E A) by (conclude_def TP ).
assert (OS K F G C) by (conclude_def TP ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (neq A H) by (forward_using lemma_betweennotequal).
assert (neq B G) by (forward_using lemma_betweennotequal).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists e, (BetS B A e /\\ Cong A e B A)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (BetS e A B) by (conclude axiom_betweennesssymmetry).
assert (OS D C A B) by (forward_using lemma_samesidesymmetric).
assert (RT D A B A B C) by (conclude proposition_29C).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert (BetS E A e) by (conclude lemma_3_6a).
assert (BetS e A E) by (conclude axiom_betweennesssymmetry).
assert (OS H K A E) by (forward_using lemma_samesidesymmetric).
assert (RT H A E A E K) by (conclude proposition_29C).
assert (Out A E B) by (conclude lemma_ray4).
assert (Out A H D) by (conclude lemma_ray4).
assert (nCol A H E) by (forward_using lemma_parallelNC).
assert (nCol E A H) by (forward_using lemma_NCorder).
assert (CongA E A H E A H) by (conclude lemma_equalanglesreflexive).
assert (CongA E A H B A D) by (conclude lemma_equalangleshelper).
assert (CongA H A E D A B) by (conclude lemma_equalanglesflip).
assert (CongA A E K A B C) by (apply (lemma_supplements2 H A E A B C D A B A E K);eauto).
assert (OS C D B A) by (conclude lemma_samesideflip).
assert (Col A E B) by (conclude_def Col ).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq E B) by (forward_using lemma_betweennotequal).
assert (neq B E) by (conclude lemma_inequalitysymmetric).
assert (OS C D B E) by (conclude lemma_samesidecollinear).
assert (Out A H D) by (conclude lemma_ray4).
assert (Out A D H) by (conclude lemma_ray5).
assert (OS C H B E) by (conclude lemma_sameside2).
assert (Col E A B) by (forward_using lemma_collinearorder).
assert (OS H K E B) by (conclude lemma_samesidecollinear).
assert (OS H K B E) by (conclude lemma_samesideflip).
assert (OS C K B E) by (conclude lemma_samesidetransitive).
assert (OS K C B E) by (forward_using lemma_samesidesymmetric).
assert (Out B G C) by (conclude lemma_ray4).
assert (Out B C G) by (conclude lemma_ray5).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (Col B B E) by (conclude_def Col ).
assert (OS K G B E) by (conclude lemma_sameside2).
assert (OS K G E B) by (conclude lemma_samesideflip).
assert (Out B E A) by (conclude lemma_ray4).
assert (Out B A E) by (conclude lemma_ray5).
assert (CongA A E K E B G) by (conclude lemma_equalangleshelper).
assert (Par E K B G) by (conclude proposition_28D).
assert (Par E K G B) by (forward_using lemma_parallelflip).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists c, (BetS B C c /\\ Cong C c B C)) by (conclude lemma_extension);destruct Tf as [c];spliter.

*****
H78 : Cong C c B C
H77 : BetS B C c
c : Point
H76 : neq B C
H75 : Par E K G B
H74 : Par E K B G
H73 : CongA A E K E B G
H72 : Out B A E
H71 : Out B E A
H70 : OS K G E B
H69 : OS K G B E
H68 : Col B B E
H67 : eq B B
H66 : Out B C G
H65 : Out B G C
H64 : OS K C B E
H63 : OS C K B E
H62 : OS H K B E
H61 : OS H K E B
H60 : Col E A B
H59 : OS C H B E
H58 : Out A D H
H57 : Out A H D
H56 : OS C D B E
H55 : neq B E
H54 : neq E B
H53 : Col B A E
H52 : Col A E B
H51 : OS C D B A
H50 : CongA A E K A B C
H49 : CongA H A E D A B
H48 : CongA E A H B A D
H47 : CongA E A H E A H
H46 : nCol E A H
H45 : nCol A H E
H44 : Out A H D
H43 : Out A E B
H42 : RT H A E A E K
H41 : OS H K A E
H40 : BetS e A E
H39 : BetS E A e
H38 : BetS B E A
H37 : RT D A B A B C
H36 : OS D C A B
H35 : BetS e A B
H34 : Cong A e B A
H33 : BetS B A e
e : Point
H32 : neq B A
H31 : neq A B
H30 : neq B G
H29 : neq A H
H28 : neq A E
H27 : OS K F G C
H26 : OS H K E A
H25 : OS C D A B
H24 : OS D A C B
H23 : OS A D C B
H22 : OS A D B C
H21 : TP B C A D
H20 : TP G C K F
H19 : TP E A H K
H18 : TP A B C D
H17 : Par A H E K
H16 : Par C D A B
H15 : Par B C A D
H14 : Par G C K F
H13 : Par C F G K
H12 : Par F C G K
H11 : Par G K F C
H10 : Par E K A H
H9 : Par E A H K
H8 : Par A B C D
H7 : Par A D B C
H6 : PG G K F C
H5 : PG E A H K
H4 : BetS B G C
H3 : BetS D F C
H2 : BetS A E B
H1 : BetS A H D
H0 : PG A B C D
A,B,C,D,E,F,G,H,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
PG E K G B
+++++
assert (BetS c C B) by (conclude axiom_betweennesssymmetry).
-----
Lemma proposition_43B : forall A B C D E F G H K, PG A B C D -> BetS A H D -> BetS A E B -> BetS D F C -> BetS B G C -> PG E A H K -> PG G K F C -> PG E K G B.
Proof.
intros.
assert (Par A D B C) by (conclude_def PG ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par E A H K) by (conclude_def PG ).
assert (Par E K A H) by (conclude_def PG ).
assert (Par G K F C) by (conclude_def PG ).
assert (Par F C G K) by (conclude lemma_parallelsymmetric).
assert (Par C F G K) by (forward_using lemma_parallelflip).
assert (Par G C K F) by (conclude_def PG ).
assert (Par B C A D) by (conclude lemma_parallelsymmetric).
assert (Par C D A B) by (conclude lemma_parallelsymmetric).
assert (Par A H E K) by (conclude lemma_parallelsymmetric).
assert (TP A B C D) by (conclude lemma_paralleldef2B).
assert (TP E A H K) by (conclude lemma_paralleldef2B).
assert (TP G C K F) by (conclude lemma_paralleldef2B).
assert (TP B C A D) by (conclude lemma_paralleldef2B).
assert (OS A D B C) by (conclude_def TP ).
assert (OS A D C B) by (conclude lemma_samesideflip).
assert (OS D A C B) by (forward_using lemma_samesidesymmetric).
assert (OS C D A B) by (conclude_def TP ).
assert (OS H K E A) by (conclude_def TP ).
assert (OS K F G C) by (conclude_def TP ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (neq A H) by (forward_using lemma_betweennotequal).
assert (neq B G) by (forward_using lemma_betweennotequal).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists e, (BetS B A e /\\ Cong A e B A)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (BetS e A B) by (conclude axiom_betweennesssymmetry).
assert (OS D C A B) by (forward_using lemma_samesidesymmetric).
assert (RT D A B A B C) by (conclude proposition_29C).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert (BetS E A e) by (conclude lemma_3_6a).
assert (BetS e A E) by (conclude axiom_betweennesssymmetry).
assert (OS H K A E) by (forward_using lemma_samesidesymmetric).
assert (RT H A E A E K) by (conclude proposition_29C).
assert (Out A E B) by (conclude lemma_ray4).
assert (Out A H D) by (conclude lemma_ray4).
assert (nCol A H E) by (forward_using lemma_parallelNC).
assert (nCol E A H) by (forward_using lemma_NCorder).
assert (CongA E A H E A H) by (conclude lemma_equalanglesreflexive).
assert (CongA E A H B A D) by (conclude lemma_equalangleshelper).
assert (CongA H A E D A B) by (conclude lemma_equalanglesflip).
assert (CongA A E K A B C) by (apply (lemma_supplements2 H A E A B C D A B A E K);eauto).
assert (OS C D B A) by (conclude lemma_samesideflip).
assert (Col A E B) by (conclude_def Col ).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq E B) by (forward_using lemma_betweennotequal).
assert (neq B E) by (conclude lemma_inequalitysymmetric).
assert (OS C D B E) by (conclude lemma_samesidecollinear).
assert (Out A H D) by (conclude lemma_ray4).
assert (Out A D H) by (conclude lemma_ray5).
assert (OS C H B E) by (conclude lemma_sameside2).
assert (Col E A B) by (forward_using lemma_collinearorder).
assert (OS H K E B) by (conclude lemma_samesidecollinear).
assert (OS H K B E) by (conclude lemma_samesideflip).
assert (OS C K B E) by (conclude lemma_samesidetransitive).
assert (OS K C B E) by (forward_using lemma_samesidesymmetric).
assert (Out B G C) by (conclude lemma_ray4).
assert (Out B C G) by (conclude lemma_ray5).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (Col B B E) by (conclude_def Col ).
assert (OS K G B E) by (conclude lemma_sameside2).
assert (OS K G E B) by (conclude lemma_samesideflip).
assert (Out B E A) by (conclude lemma_ray4).
assert (Out B A E) by (conclude lemma_ray5).
assert (CongA A E K E B G) by (conclude lemma_equalangleshelper).
assert (Par E K B G) by (conclude proposition_28D).
assert (Par E K G B) by (forward_using lemma_parallelflip).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists c, (BetS B C c /\\ Cong C c B C)) by (conclude lemma_extension);destruct Tf as [c];spliter.
assert (BetS c C B) by (conclude axiom_betweennesssymmetry).

*****
H79 : BetS c C B
H78 : Cong C c B C
H77 : BetS B C c
c : Point
H76 : neq B C
H75 : Par E K G B
H74 : Par E K B G
H73 : CongA A E K E B G
H72 : Out B A E
H71 : Out B E A
H70 : OS K G E B
H69 : OS K G B E
H68 : Col B B E
H67 : eq B B
H66 : Out B C G
H65 : Out B G C
H64 : OS K C B E
H63 : OS C K B E
H62 : OS H K B E
H61 : OS H K E B
H60 : Col E A B
H59 : OS C H B E
H58 : Out A D H
H57 : Out A H D
H56 : OS C D B E
H55 : neq B E
H54 : neq E B
H53 : Col B A E
H52 : Col A E B
H51 : OS C D B A
H50 : CongA A E K A B C
H49 : CongA H A E D A B
H48 : CongA E A H B A D
H47 : CongA E A H E A H
H46 : nCol E A H
H45 : nCol A H E
H44 : Out A H D
H43 : Out A E B
H42 : RT H A E A E K
H41 : OS H K A E
H40 : BetS e A E
H39 : BetS E A e
H38 : BetS B E A
H37 : RT D A B A B C
H36 : OS D C A B
H35 : BetS e A B
H34 : Cong A e B A
H33 : BetS B A e
e : Point
H32 : neq B A
H31 : neq A B
H30 : neq B G
H29 : neq A H
H28 : neq A E
H27 : OS K F G C
H26 : OS H K E A
H25 : OS C D A B
H24 : OS D A C B
H23 : OS A D C B
H22 : OS A D B C
H21 : TP B C A D
H20 : TP G C K F
H19 : TP E A H K
H18 : TP A B C D
H17 : Par A H E K
H16 : Par C D A B
H15 : Par B C A D
H14 : Par G C K F
H13 : Par C F G K
H12 : Par F C G K
H11 : Par G K F C
H10 : Par E K A H
H9 : Par E A H K
H8 : Par A B C D
H7 : Par A D B C
H6 : PG G K F C
H5 : PG E A H K
H4 : BetS B G C
H3 : BetS D F C
H2 : BetS A E B
H1 : BetS A H D
H0 : PG A B C D
A,B,C,D,E,F,G,H,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
PG E K G B
+++++
assert (Par C D B A) by (forward_using lemma_parallelflip).
-----
Lemma proposition_43B : forall A B C D E F G H K, PG A B C D -> BetS A H D -> BetS A E B -> BetS D F C -> BetS B G C -> PG E A H K -> PG G K F C -> PG E K G B.
Proof.
intros.
assert (Par A D B C) by (conclude_def PG ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par E A H K) by (conclude_def PG ).
assert (Par E K A H) by (conclude_def PG ).
assert (Par G K F C) by (conclude_def PG ).
assert (Par F C G K) by (conclude lemma_parallelsymmetric).
assert (Par C F G K) by (forward_using lemma_parallelflip).
assert (Par G C K F) by (conclude_def PG ).
assert (Par B C A D) by (conclude lemma_parallelsymmetric).
assert (Par C D A B) by (conclude lemma_parallelsymmetric).
assert (Par A H E K) by (conclude lemma_parallelsymmetric).
assert (TP A B C D) by (conclude lemma_paralleldef2B).
assert (TP E A H K) by (conclude lemma_paralleldef2B).
assert (TP G C K F) by (conclude lemma_paralleldef2B).
assert (TP B C A D) by (conclude lemma_paralleldef2B).
assert (OS A D B C) by (conclude_def TP ).
assert (OS A D C B) by (conclude lemma_samesideflip).
assert (OS D A C B) by (forward_using lemma_samesidesymmetric).
assert (OS C D A B) by (conclude_def TP ).
assert (OS H K E A) by (conclude_def TP ).
assert (OS K F G C) by (conclude_def TP ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (neq A H) by (forward_using lemma_betweennotequal).
assert (neq B G) by (forward_using lemma_betweennotequal).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists e, (BetS B A e /\\ Cong A e B A)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (BetS e A B) by (conclude axiom_betweennesssymmetry).
assert (OS D C A B) by (forward_using lemma_samesidesymmetric).
assert (RT D A B A B C) by (conclude proposition_29C).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert (BetS E A e) by (conclude lemma_3_6a).
assert (BetS e A E) by (conclude axiom_betweennesssymmetry).
assert (OS H K A E) by (forward_using lemma_samesidesymmetric).
assert (RT H A E A E K) by (conclude proposition_29C).
assert (Out A E B) by (conclude lemma_ray4).
assert (Out A H D) by (conclude lemma_ray4).
assert (nCol A H E) by (forward_using lemma_parallelNC).
assert (nCol E A H) by (forward_using lemma_NCorder).
assert (CongA E A H E A H) by (conclude lemma_equalanglesreflexive).
assert (CongA E A H B A D) by (conclude lemma_equalangleshelper).
assert (CongA H A E D A B) by (conclude lemma_equalanglesflip).
assert (CongA A E K A B C) by (apply (lemma_supplements2 H A E A B C D A B A E K);eauto).
assert (OS C D B A) by (conclude lemma_samesideflip).
assert (Col A E B) by (conclude_def Col ).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq E B) by (forward_using lemma_betweennotequal).
assert (neq B E) by (conclude lemma_inequalitysymmetric).
assert (OS C D B E) by (conclude lemma_samesidecollinear).
assert (Out A H D) by (conclude lemma_ray4).
assert (Out A D H) by (conclude lemma_ray5).
assert (OS C H B E) by (conclude lemma_sameside2).
assert (Col E A B) by (forward_using lemma_collinearorder).
assert (OS H K E B) by (conclude lemma_samesidecollinear).
assert (OS H K B E) by (conclude lemma_samesideflip).
assert (OS C K B E) by (conclude lemma_samesidetransitive).
assert (OS K C B E) by (forward_using lemma_samesidesymmetric).
assert (Out B G C) by (conclude lemma_ray4).
assert (Out B C G) by (conclude lemma_ray5).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (Col B B E) by (conclude_def Col ).
assert (OS K G B E) by (conclude lemma_sameside2).
assert (OS K G E B) by (conclude lemma_samesideflip).
assert (Out B E A) by (conclude lemma_ray4).
assert (Out B A E) by (conclude lemma_ray5).
assert (CongA A E K E B G) by (conclude lemma_equalangleshelper).
assert (Par E K B G) by (conclude proposition_28D).
assert (Par E K G B) by (forward_using lemma_parallelflip).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists c, (BetS B C c /\\ Cong C c B C)) by (conclude lemma_extension);destruct Tf as [c];spliter.
assert (BetS c C B) by (conclude axiom_betweennesssymmetry).
assert (Par C D B A) by (forward_using lemma_parallelflip).

*****
H80 : Par C D B A
H79 : BetS c C B
H78 : Cong C c B C
H77 : BetS B C c
c : Point
H76 : neq B C
H75 : Par E K G B
H74 : Par E K B G
H73 : CongA A E K E B G
H72 : Out B A E
H71 : Out B E A
H70 : OS K G E B
H69 : OS K G B E
H68 : Col B B E
H67 : eq B B
H66 : Out B C G
H65 : Out B G C
H64 : OS K C B E
H63 : OS C K B E
H62 : OS H K B E
H61 : OS H K E B
H60 : Col E A B
H59 : OS C H B E
H58 : Out A D H
H57 : Out A H D
H56 : OS C D B E
H55 : neq B E
H54 : neq E B
H53 : Col B A E
H52 : Col A E B
H51 : OS C D B A
H50 : CongA A E K A B C
H49 : CongA H A E D A B
H48 : CongA E A H B A D
H47 : CongA E A H E A H
H46 : nCol E A H
H45 : nCol A H E
H44 : Out A H D
H43 : Out A E B
H42 : RT H A E A E K
H41 : OS H K A E
H40 : BetS e A E
H39 : BetS E A e
H38 : BetS B E A
H37 : RT D A B A B C
H36 : OS D C A B
H35 : BetS e A B
H34 : Cong A e B A
H33 : BetS B A e
e : Point
H32 : neq B A
H31 : neq A B
H30 : neq B G
H29 : neq A H
H28 : neq A E
H27 : OS K F G C
H26 : OS H K E A
H25 : OS C D A B
H24 : OS D A C B
H23 : OS A D C B
H22 : OS A D B C
H21 : TP B C A D
H20 : TP G C K F
H19 : TP E A H K
H18 : TP A B C D
H17 : Par A H E K
H16 : Par C D A B
H15 : Par B C A D
H14 : Par G C K F
H13 : Par C F G K
H12 : Par F C G K
H11 : Par G K F C
H10 : Par E K A H
H9 : Par E A H K
H8 : Par A B C D
H7 : Par A D B C
H6 : PG G K F C
H5 : PG E A H K
H4 : BetS B G C
H3 : BetS D F C
H2 : BetS A E B
H1 : BetS A H D
H0 : PG A B C D
A,B,C,D,E,F,G,H,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
PG E K G B
+++++
assert (RT D C B C B A) by (conclude proposition_29C).
-----
Lemma proposition_43B : forall A B C D E F G H K, PG A B C D -> BetS A H D -> BetS A E B -> BetS D F C -> BetS B G C -> PG E A H K -> PG G K F C -> PG E K G B.
Proof.
intros.
assert (Par A D B C) by (conclude_def PG ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par E A H K) by (conclude_def PG ).
assert (Par E K A H) by (conclude_def PG ).
assert (Par G K F C) by (conclude_def PG ).
assert (Par F C G K) by (conclude lemma_parallelsymmetric).
assert (Par C F G K) by (forward_using lemma_parallelflip).
assert (Par G C K F) by (conclude_def PG ).
assert (Par B C A D) by (conclude lemma_parallelsymmetric).
assert (Par C D A B) by (conclude lemma_parallelsymmetric).
assert (Par A H E K) by (conclude lemma_parallelsymmetric).
assert (TP A B C D) by (conclude lemma_paralleldef2B).
assert (TP E A H K) by (conclude lemma_paralleldef2B).
assert (TP G C K F) by (conclude lemma_paralleldef2B).
assert (TP B C A D) by (conclude lemma_paralleldef2B).
assert (OS A D B C) by (conclude_def TP ).
assert (OS A D C B) by (conclude lemma_samesideflip).
assert (OS D A C B) by (forward_using lemma_samesidesymmetric).
assert (OS C D A B) by (conclude_def TP ).
assert (OS H K E A) by (conclude_def TP ).
assert (OS K F G C) by (conclude_def TP ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (neq A H) by (forward_using lemma_betweennotequal).
assert (neq B G) by (forward_using lemma_betweennotequal).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists e, (BetS B A e /\\ Cong A e B A)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (BetS e A B) by (conclude axiom_betweennesssymmetry).
assert (OS D C A B) by (forward_using lemma_samesidesymmetric).
assert (RT D A B A B C) by (conclude proposition_29C).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert (BetS E A e) by (conclude lemma_3_6a).
assert (BetS e A E) by (conclude axiom_betweennesssymmetry).
assert (OS H K A E) by (forward_using lemma_samesidesymmetric).
assert (RT H A E A E K) by (conclude proposition_29C).
assert (Out A E B) by (conclude lemma_ray4).
assert (Out A H D) by (conclude lemma_ray4).
assert (nCol A H E) by (forward_using lemma_parallelNC).
assert (nCol E A H) by (forward_using lemma_NCorder).
assert (CongA E A H E A H) by (conclude lemma_equalanglesreflexive).
assert (CongA E A H B A D) by (conclude lemma_equalangleshelper).
assert (CongA H A E D A B) by (conclude lemma_equalanglesflip).
assert (CongA A E K A B C) by (apply (lemma_supplements2 H A E A B C D A B A E K);eauto).
assert (OS C D B A) by (conclude lemma_samesideflip).
assert (Col A E B) by (conclude_def Col ).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq E B) by (forward_using lemma_betweennotequal).
assert (neq B E) by (conclude lemma_inequalitysymmetric).
assert (OS C D B E) by (conclude lemma_samesidecollinear).
assert (Out A H D) by (conclude lemma_ray4).
assert (Out A D H) by (conclude lemma_ray5).
assert (OS C H B E) by (conclude lemma_sameside2).
assert (Col E A B) by (forward_using lemma_collinearorder).
assert (OS H K E B) by (conclude lemma_samesidecollinear).
assert (OS H K B E) by (conclude lemma_samesideflip).
assert (OS C K B E) by (conclude lemma_samesidetransitive).
assert (OS K C B E) by (forward_using lemma_samesidesymmetric).
assert (Out B G C) by (conclude lemma_ray4).
assert (Out B C G) by (conclude lemma_ray5).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (Col B B E) by (conclude_def Col ).
assert (OS K G B E) by (conclude lemma_sameside2).
assert (OS K G E B) by (conclude lemma_samesideflip).
assert (Out B E A) by (conclude lemma_ray4).
assert (Out B A E) by (conclude lemma_ray5).
assert (CongA A E K E B G) by (conclude lemma_equalangleshelper).
assert (Par E K B G) by (conclude proposition_28D).
assert (Par E K G B) by (forward_using lemma_parallelflip).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists c, (BetS B C c /\\ Cong C c B C)) by (conclude lemma_extension);destruct Tf as [c];spliter.
assert (BetS c C B) by (conclude axiom_betweennesssymmetry).
assert (Par C D B A) by (forward_using lemma_parallelflip).
assert (RT D C B C B A) by (conclude proposition_29C).

*****
H81 : RT D C B C B A
H80 : Par C D B A
H79 : BetS c C B
H78 : Cong C c B C
H77 : BetS B C c
c : Point
H76 : neq B C
H75 : Par E K G B
H74 : Par E K B G
H73 : CongA A E K E B G
H72 : Out B A E
H71 : Out B E A
H70 : OS K G E B
H69 : OS K G B E
H68 : Col B B E
H67 : eq B B
H66 : Out B C G
H65 : Out B G C
H64 : OS K C B E
H63 : OS C K B E
H62 : OS H K B E
H61 : OS H K E B
H60 : Col E A B
H59 : OS C H B E
H58 : Out A D H
H57 : Out A H D
H56 : OS C D B E
H55 : neq B E
H54 : neq E B
H53 : Col B A E
H52 : Col A E B
H51 : OS C D B A
H50 : CongA A E K A B C
H49 : CongA H A E D A B
H48 : CongA E A H B A D
H47 : CongA E A H E A H
H46 : nCol E A H
H45 : nCol A H E
H44 : Out A H D
H43 : Out A E B
H42 : RT H A E A E K
H41 : OS H K A E
H40 : BetS e A E
H39 : BetS E A e
H38 : BetS B E A
H37 : RT D A B A B C
H36 : OS D C A B
H35 : BetS e A B
H34 : Cong A e B A
H33 : BetS B A e
e : Point
H32 : neq B A
H31 : neq A B
H30 : neq B G
H29 : neq A H
H28 : neq A E
H27 : OS K F G C
H26 : OS H K E A
H25 : OS C D A B
H24 : OS D A C B
H23 : OS A D C B
H22 : OS A D B C
H21 : TP B C A D
H20 : TP G C K F
H19 : TP E A H K
H18 : TP A B C D
H17 : Par A H E K
H16 : Par C D A B
H15 : Par B C A D
H14 : Par G C K F
H13 : Par C F G K
H12 : Par F C G K
H11 : Par G K F C
H10 : Par E K A H
H9 : Par E A H K
H8 : Par A B C D
H7 : Par A D B C
H6 : PG G K F C
H5 : PG E A H K
H4 : BetS B G C
H3 : BetS D F C
H2 : BetS A E B
H1 : BetS A H D
H0 : PG A B C D
A,B,C,D,E,F,G,H,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
PG E K G B
+++++
assert (OS K F C G) by (conclude lemma_samesideflip).
-----
Lemma proposition_43B : forall A B C D E F G H K, PG A B C D -> BetS A H D -> BetS A E B -> BetS D F C -> BetS B G C -> PG E A H K -> PG G K F C -> PG E K G B.
Proof.
intros.
assert (Par A D B C) by (conclude_def PG ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par E A H K) by (conclude_def PG ).
assert (Par E K A H) by (conclude_def PG ).
assert (Par G K F C) by (conclude_def PG ).
assert (Par F C G K) by (conclude lemma_parallelsymmetric).
assert (Par C F G K) by (forward_using lemma_parallelflip).
assert (Par G C K F) by (conclude_def PG ).
assert (Par B C A D) by (conclude lemma_parallelsymmetric).
assert (Par C D A B) by (conclude lemma_parallelsymmetric).
assert (Par A H E K) by (conclude lemma_parallelsymmetric).
assert (TP A B C D) by (conclude lemma_paralleldef2B).
assert (TP E A H K) by (conclude lemma_paralleldef2B).
assert (TP G C K F) by (conclude lemma_paralleldef2B).
assert (TP B C A D) by (conclude lemma_paralleldef2B).
assert (OS A D B C) by (conclude_def TP ).
assert (OS A D C B) by (conclude lemma_samesideflip).
assert (OS D A C B) by (forward_using lemma_samesidesymmetric).
assert (OS C D A B) by (conclude_def TP ).
assert (OS H K E A) by (conclude_def TP ).
assert (OS K F G C) by (conclude_def TP ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (neq A H) by (forward_using lemma_betweennotequal).
assert (neq B G) by (forward_using lemma_betweennotequal).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists e, (BetS B A e /\\ Cong A e B A)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (BetS e A B) by (conclude axiom_betweennesssymmetry).
assert (OS D C A B) by (forward_using lemma_samesidesymmetric).
assert (RT D A B A B C) by (conclude proposition_29C).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert (BetS E A e) by (conclude lemma_3_6a).
assert (BetS e A E) by (conclude axiom_betweennesssymmetry).
assert (OS H K A E) by (forward_using lemma_samesidesymmetric).
assert (RT H A E A E K) by (conclude proposition_29C).
assert (Out A E B) by (conclude lemma_ray4).
assert (Out A H D) by (conclude lemma_ray4).
assert (nCol A H E) by (forward_using lemma_parallelNC).
assert (nCol E A H) by (forward_using lemma_NCorder).
assert (CongA E A H E A H) by (conclude lemma_equalanglesreflexive).
assert (CongA E A H B A D) by (conclude lemma_equalangleshelper).
assert (CongA H A E D A B) by (conclude lemma_equalanglesflip).
assert (CongA A E K A B C) by (apply (lemma_supplements2 H A E A B C D A B A E K);eauto).
assert (OS C D B A) by (conclude lemma_samesideflip).
assert (Col A E B) by (conclude_def Col ).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq E B) by (forward_using lemma_betweennotequal).
assert (neq B E) by (conclude lemma_inequalitysymmetric).
assert (OS C D B E) by (conclude lemma_samesidecollinear).
assert (Out A H D) by (conclude lemma_ray4).
assert (Out A D H) by (conclude lemma_ray5).
assert (OS C H B E) by (conclude lemma_sameside2).
assert (Col E A B) by (forward_using lemma_collinearorder).
assert (OS H K E B) by (conclude lemma_samesidecollinear).
assert (OS H K B E) by (conclude lemma_samesideflip).
assert (OS C K B E) by (conclude lemma_samesidetransitive).
assert (OS K C B E) by (forward_using lemma_samesidesymmetric).
assert (Out B G C) by (conclude lemma_ray4).
assert (Out B C G) by (conclude lemma_ray5).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (Col B B E) by (conclude_def Col ).
assert (OS K G B E) by (conclude lemma_sameside2).
assert (OS K G E B) by (conclude lemma_samesideflip).
assert (Out B E A) by (conclude lemma_ray4).
assert (Out B A E) by (conclude lemma_ray5).
assert (CongA A E K E B G) by (conclude lemma_equalangleshelper).
assert (Par E K B G) by (conclude proposition_28D).
assert (Par E K G B) by (forward_using lemma_parallelflip).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists c, (BetS B C c /\\ Cong C c B C)) by (conclude lemma_extension);destruct Tf as [c];spliter.
assert (BetS c C B) by (conclude axiom_betweennesssymmetry).
assert (Par C D B A) by (forward_using lemma_parallelflip).
assert (RT D C B C B A) by (conclude proposition_29C).
assert (OS K F C G) by (conclude lemma_samesideflip).

*****
H82 : OS K F C G
H81 : RT D C B C B A
H80 : Par C D B A
H79 : BetS c C B
H78 : Cong C c B C
H77 : BetS B C c
c : Point
H76 : neq B C
H75 : Par E K G B
H74 : Par E K B G
H73 : CongA A E K E B G
H72 : Out B A E
H71 : Out B E A
H70 : OS K G E B
H69 : OS K G B E
H68 : Col B B E
H67 : eq B B
H66 : Out B C G
H65 : Out B G C
H64 : OS K C B E
H63 : OS C K B E
H62 : OS H K B E
H61 : OS H K E B
H60 : Col E A B
H59 : OS C H B E
H58 : Out A D H
H57 : Out A H D
H56 : OS C D B E
H55 : neq B E
H54 : neq E B
H53 : Col B A E
H52 : Col A E B
H51 : OS C D B A
H50 : CongA A E K A B C
H49 : CongA H A E D A B
H48 : CongA E A H B A D
H47 : CongA E A H E A H
H46 : nCol E A H
H45 : nCol A H E
H44 : Out A H D
H43 : Out A E B
H42 : RT H A E A E K
H41 : OS H K A E
H40 : BetS e A E
H39 : BetS E A e
H38 : BetS B E A
H37 : RT D A B A B C
H36 : OS D C A B
H35 : BetS e A B
H34 : Cong A e B A
H33 : BetS B A e
e : Point
H32 : neq B A
H31 : neq A B
H30 : neq B G
H29 : neq A H
H28 : neq A E
H27 : OS K F G C
H26 : OS H K E A
H25 : OS C D A B
H24 : OS D A C B
H23 : OS A D C B
H22 : OS A D B C
H21 : TP B C A D
H20 : TP G C K F
H19 : TP E A H K
H18 : TP A B C D
H17 : Par A H E K
H16 : Par C D A B
H15 : Par B C A D
H14 : Par G C K F
H13 : Par C F G K
H12 : Par F C G K
H11 : Par G K F C
H10 : Par E K A H
H9 : Par E A H K
H8 : Par A B C D
H7 : Par A D B C
H6 : PG G K F C
H5 : PG E A H K
H4 : BetS B G C
H3 : BetS D F C
H2 : BetS A E B
H1 : BetS A H D
H0 : PG A B C D
A,B,C,D,E,F,G,H,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
PG E K G B
+++++
assert (OS F K C G) by (forward_using lemma_samesidesymmetric).
-----
Lemma proposition_43B : forall A B C D E F G H K, PG A B C D -> BetS A H D -> BetS A E B -> BetS D F C -> BetS B G C -> PG E A H K -> PG G K F C -> PG E K G B.
Proof.
intros.
assert (Par A D B C) by (conclude_def PG ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par E A H K) by (conclude_def PG ).
assert (Par E K A H) by (conclude_def PG ).
assert (Par G K F C) by (conclude_def PG ).
assert (Par F C G K) by (conclude lemma_parallelsymmetric).
assert (Par C F G K) by (forward_using lemma_parallelflip).
assert (Par G C K F) by (conclude_def PG ).
assert (Par B C A D) by (conclude lemma_parallelsymmetric).
assert (Par C D A B) by (conclude lemma_parallelsymmetric).
assert (Par A H E K) by (conclude lemma_parallelsymmetric).
assert (TP A B C D) by (conclude lemma_paralleldef2B).
assert (TP E A H K) by (conclude lemma_paralleldef2B).
assert (TP G C K F) by (conclude lemma_paralleldef2B).
assert (TP B C A D) by (conclude lemma_paralleldef2B).
assert (OS A D B C) by (conclude_def TP ).
assert (OS A D C B) by (conclude lemma_samesideflip).
assert (OS D A C B) by (forward_using lemma_samesidesymmetric).
assert (OS C D A B) by (conclude_def TP ).
assert (OS H K E A) by (conclude_def TP ).
assert (OS K F G C) by (conclude_def TP ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (neq A H) by (forward_using lemma_betweennotequal).
assert (neq B G) by (forward_using lemma_betweennotequal).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists e, (BetS B A e /\\ Cong A e B A)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (BetS e A B) by (conclude axiom_betweennesssymmetry).
assert (OS D C A B) by (forward_using lemma_samesidesymmetric).
assert (RT D A B A B C) by (conclude proposition_29C).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert (BetS E A e) by (conclude lemma_3_6a).
assert (BetS e A E) by (conclude axiom_betweennesssymmetry).
assert (OS H K A E) by (forward_using lemma_samesidesymmetric).
assert (RT H A E A E K) by (conclude proposition_29C).
assert (Out A E B) by (conclude lemma_ray4).
assert (Out A H D) by (conclude lemma_ray4).
assert (nCol A H E) by (forward_using lemma_parallelNC).
assert (nCol E A H) by (forward_using lemma_NCorder).
assert (CongA E A H E A H) by (conclude lemma_equalanglesreflexive).
assert (CongA E A H B A D) by (conclude lemma_equalangleshelper).
assert (CongA H A E D A B) by (conclude lemma_equalanglesflip).
assert (CongA A E K A B C) by (apply (lemma_supplements2 H A E A B C D A B A E K);eauto).
assert (OS C D B A) by (conclude lemma_samesideflip).
assert (Col A E B) by (conclude_def Col ).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq E B) by (forward_using lemma_betweennotequal).
assert (neq B E) by (conclude lemma_inequalitysymmetric).
assert (OS C D B E) by (conclude lemma_samesidecollinear).
assert (Out A H D) by (conclude lemma_ray4).
assert (Out A D H) by (conclude lemma_ray5).
assert (OS C H B E) by (conclude lemma_sameside2).
assert (Col E A B) by (forward_using lemma_collinearorder).
assert (OS H K E B) by (conclude lemma_samesidecollinear).
assert (OS H K B E) by (conclude lemma_samesideflip).
assert (OS C K B E) by (conclude lemma_samesidetransitive).
assert (OS K C B E) by (forward_using lemma_samesidesymmetric).
assert (Out B G C) by (conclude lemma_ray4).
assert (Out B C G) by (conclude lemma_ray5).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (Col B B E) by (conclude_def Col ).
assert (OS K G B E) by (conclude lemma_sameside2).
assert (OS K G E B) by (conclude lemma_samesideflip).
assert (Out B E A) by (conclude lemma_ray4).
assert (Out B A E) by (conclude lemma_ray5).
assert (CongA A E K E B G) by (conclude lemma_equalangleshelper).
assert (Par E K B G) by (conclude proposition_28D).
assert (Par E K G B) by (forward_using lemma_parallelflip).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists c, (BetS B C c /\\ Cong C c B C)) by (conclude lemma_extension);destruct Tf as [c];spliter.
assert (BetS c C B) by (conclude axiom_betweennesssymmetry).
assert (Par C D B A) by (forward_using lemma_parallelflip).
assert (RT D C B C B A) by (conclude proposition_29C).
assert (OS K F C G) by (conclude lemma_samesideflip).
assert (OS F K C G) by (forward_using lemma_samesidesymmetric).

*****
H83 : OS F K C G
H82 : OS K F C G
H81 : RT D C B C B A
H80 : Par C D B A
H79 : BetS c C B
H78 : Cong C c B C
H77 : BetS B C c
c : Point
H76 : neq B C
H75 : Par E K G B
H74 : Par E K B G
H73 : CongA A E K E B G
H72 : Out B A E
H71 : Out B E A
H70 : OS K G E B
H69 : OS K G B E
H68 : Col B B E
H67 : eq B B
H66 : Out B C G
H65 : Out B G C
H64 : OS K C B E
H63 : OS C K B E
H62 : OS H K B E
H61 : OS H K E B
H60 : Col E A B
H59 : OS C H B E
H58 : Out A D H
H57 : Out A H D
H56 : OS C D B E
H55 : neq B E
H54 : neq E B
H53 : Col B A E
H52 : Col A E B
H51 : OS C D B A
H50 : CongA A E K A B C
H49 : CongA H A E D A B
H48 : CongA E A H B A D
H47 : CongA E A H E A H
H46 : nCol E A H
H45 : nCol A H E
H44 : Out A H D
H43 : Out A E B
H42 : RT H A E A E K
H41 : OS H K A E
H40 : BetS e A E
H39 : BetS E A e
H38 : BetS B E A
H37 : RT D A B A B C
H36 : OS D C A B
H35 : BetS e A B
H34 : Cong A e B A
H33 : BetS B A e
e : Point
H32 : neq B A
H31 : neq A B
H30 : neq B G
H29 : neq A H
H28 : neq A E
H27 : OS K F G C
H26 : OS H K E A
H25 : OS C D A B
H24 : OS D A C B
H23 : OS A D C B
H22 : OS A D B C
H21 : TP B C A D
H20 : TP G C K F
H19 : TP E A H K
H18 : TP A B C D
H17 : Par A H E K
H16 : Par C D A B
H15 : Par B C A D
H14 : Par G C K F
H13 : Par C F G K
H12 : Par F C G K
H11 : Par G K F C
H10 : Par E K A H
H9 : Par E A H K
H8 : Par A B C D
H7 : Par A D B C
H6 : PG G K F C
H5 : PG E A H K
H4 : BetS B G C
H3 : BetS D F C
H2 : BetS A E B
H1 : BetS A H D
H0 : PG A B C D
A,B,C,D,E,F,G,H,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
PG E K G B
+++++
assert (BetS C G B) by (conclude axiom_betweennesssymmetry).
-----
Lemma proposition_43B : forall A B C D E F G H K, PG A B C D -> BetS A H D -> BetS A E B -> BetS D F C -> BetS B G C -> PG E A H K -> PG G K F C -> PG E K G B.
Proof.
intros.
assert (Par A D B C) by (conclude_def PG ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par E A H K) by (conclude_def PG ).
assert (Par E K A H) by (conclude_def PG ).
assert (Par G K F C) by (conclude_def PG ).
assert (Par F C G K) by (conclude lemma_parallelsymmetric).
assert (Par C F G K) by (forward_using lemma_parallelflip).
assert (Par G C K F) by (conclude_def PG ).
assert (Par B C A D) by (conclude lemma_parallelsymmetric).
assert (Par C D A B) by (conclude lemma_parallelsymmetric).
assert (Par A H E K) by (conclude lemma_parallelsymmetric).
assert (TP A B C D) by (conclude lemma_paralleldef2B).
assert (TP E A H K) by (conclude lemma_paralleldef2B).
assert (TP G C K F) by (conclude lemma_paralleldef2B).
assert (TP B C A D) by (conclude lemma_paralleldef2B).
assert (OS A D B C) by (conclude_def TP ).
assert (OS A D C B) by (conclude lemma_samesideflip).
assert (OS D A C B) by (forward_using lemma_samesidesymmetric).
assert (OS C D A B) by (conclude_def TP ).
assert (OS H K E A) by (conclude_def TP ).
assert (OS K F G C) by (conclude_def TP ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (neq A H) by (forward_using lemma_betweennotequal).
assert (neq B G) by (forward_using lemma_betweennotequal).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists e, (BetS B A e /\\ Cong A e B A)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (BetS e A B) by (conclude axiom_betweennesssymmetry).
assert (OS D C A B) by (forward_using lemma_samesidesymmetric).
assert (RT D A B A B C) by (conclude proposition_29C).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert (BetS E A e) by (conclude lemma_3_6a).
assert (BetS e A E) by (conclude axiom_betweennesssymmetry).
assert (OS H K A E) by (forward_using lemma_samesidesymmetric).
assert (RT H A E A E K) by (conclude proposition_29C).
assert (Out A E B) by (conclude lemma_ray4).
assert (Out A H D) by (conclude lemma_ray4).
assert (nCol A H E) by (forward_using lemma_parallelNC).
assert (nCol E A H) by (forward_using lemma_NCorder).
assert (CongA E A H E A H) by (conclude lemma_equalanglesreflexive).
assert (CongA E A H B A D) by (conclude lemma_equalangleshelper).
assert (CongA H A E D A B) by (conclude lemma_equalanglesflip).
assert (CongA A E K A B C) by (apply (lemma_supplements2 H A E A B C D A B A E K);eauto).
assert (OS C D B A) by (conclude lemma_samesideflip).
assert (Col A E B) by (conclude_def Col ).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq E B) by (forward_using lemma_betweennotequal).
assert (neq B E) by (conclude lemma_inequalitysymmetric).
assert (OS C D B E) by (conclude lemma_samesidecollinear).
assert (Out A H D) by (conclude lemma_ray4).
assert (Out A D H) by (conclude lemma_ray5).
assert (OS C H B E) by (conclude lemma_sameside2).
assert (Col E A B) by (forward_using lemma_collinearorder).
assert (OS H K E B) by (conclude lemma_samesidecollinear).
assert (OS H K B E) by (conclude lemma_samesideflip).
assert (OS C K B E) by (conclude lemma_samesidetransitive).
assert (OS K C B E) by (forward_using lemma_samesidesymmetric).
assert (Out B G C) by (conclude lemma_ray4).
assert (Out B C G) by (conclude lemma_ray5).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (Col B B E) by (conclude_def Col ).
assert (OS K G B E) by (conclude lemma_sameside2).
assert (OS K G E B) by (conclude lemma_samesideflip).
assert (Out B E A) by (conclude lemma_ray4).
assert (Out B A E) by (conclude lemma_ray5).
assert (CongA A E K E B G) by (conclude lemma_equalangleshelper).
assert (Par E K B G) by (conclude proposition_28D).
assert (Par E K G B) by (forward_using lemma_parallelflip).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists c, (BetS B C c /\\ Cong C c B C)) by (conclude lemma_extension);destruct Tf as [c];spliter.
assert (BetS c C B) by (conclude axiom_betweennesssymmetry).
assert (Par C D B A) by (forward_using lemma_parallelflip).
assert (RT D C B C B A) by (conclude proposition_29C).
assert (OS K F C G) by (conclude lemma_samesideflip).
assert (OS F K C G) by (forward_using lemma_samesidesymmetric).
assert (BetS C G B) by (conclude axiom_betweennesssymmetry).

*****
H84 : BetS C G B
H83 : OS F K C G
H82 : OS K F C G
H81 : RT D C B C B A
H80 : Par C D B A
H79 : BetS c C B
H78 : Cong C c B C
H77 : BetS B C c
c : Point
H76 : neq B C
H75 : Par E K G B
H74 : Par E K B G
H73 : CongA A E K E B G
H72 : Out B A E
H71 : Out B E A
H70 : OS K G E B
H69 : OS K G B E
H68 : Col B B E
H67 : eq B B
H66 : Out B C G
H65 : Out B G C
H64 : OS K C B E
H63 : OS C K B E
H62 : OS H K B E
H61 : OS H K E B
H60 : Col E A B
H59 : OS C H B E
H58 : Out A D H
H57 : Out A H D
H56 : OS C D B E
H55 : neq B E
H54 : neq E B
H53 : Col B A E
H52 : Col A E B
H51 : OS C D B A
H50 : CongA A E K A B C
H49 : CongA H A E D A B
H48 : CongA E A H B A D
H47 : CongA E A H E A H
H46 : nCol E A H
H45 : nCol A H E
H44 : Out A H D
H43 : Out A E B
H42 : RT H A E A E K
H41 : OS H K A E
H40 : BetS e A E
H39 : BetS E A e
H38 : BetS B E A
H37 : RT D A B A B C
H36 : OS D C A B
H35 : BetS e A B
H34 : Cong A e B A
H33 : BetS B A e
e : Point
H32 : neq B A
H31 : neq A B
H30 : neq B G
H29 : neq A H
H28 : neq A E
H27 : OS K F G C
H26 : OS H K E A
H25 : OS C D A B
H24 : OS D A C B
H23 : OS A D C B
H22 : OS A D B C
H21 : TP B C A D
H20 : TP G C K F
H19 : TP E A H K
H18 : TP A B C D
H17 : Par A H E K
H16 : Par C D A B
H15 : Par B C A D
H14 : Par G C K F
H13 : Par C F G K
H12 : Par F C G K
H11 : Par G K F C
H10 : Par E K A H
H9 : Par E A H K
H8 : Par A B C D
H7 : Par A D B C
H6 : PG G K F C
H5 : PG E A H K
H4 : BetS B G C
H3 : BetS D F C
H2 : BetS A E B
H1 : BetS A H D
H0 : PG A B C D
A,B,C,D,E,F,G,H,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
PG E K G B
+++++
assert (BetS c C G) by (conclude axiom_innertransitivity).
-----
Lemma proposition_43B : forall A B C D E F G H K, PG A B C D -> BetS A H D -> BetS A E B -> BetS D F C -> BetS B G C -> PG E A H K -> PG G K F C -> PG E K G B.
Proof.
intros.
assert (Par A D B C) by (conclude_def PG ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par E A H K) by (conclude_def PG ).
assert (Par E K A H) by (conclude_def PG ).
assert (Par G K F C) by (conclude_def PG ).
assert (Par F C G K) by (conclude lemma_parallelsymmetric).
assert (Par C F G K) by (forward_using lemma_parallelflip).
assert (Par G C K F) by (conclude_def PG ).
assert (Par B C A D) by (conclude lemma_parallelsymmetric).
assert (Par C D A B) by (conclude lemma_parallelsymmetric).
assert (Par A H E K) by (conclude lemma_parallelsymmetric).
assert (TP A B C D) by (conclude lemma_paralleldef2B).
assert (TP E A H K) by (conclude lemma_paralleldef2B).
assert (TP G C K F) by (conclude lemma_paralleldef2B).
assert (TP B C A D) by (conclude lemma_paralleldef2B).
assert (OS A D B C) by (conclude_def TP ).
assert (OS A D C B) by (conclude lemma_samesideflip).
assert (OS D A C B) by (forward_using lemma_samesidesymmetric).
assert (OS C D A B) by (conclude_def TP ).
assert (OS H K E A) by (conclude_def TP ).
assert (OS K F G C) by (conclude_def TP ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (neq A H) by (forward_using lemma_betweennotequal).
assert (neq B G) by (forward_using lemma_betweennotequal).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists e, (BetS B A e /\\ Cong A e B A)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (BetS e A B) by (conclude axiom_betweennesssymmetry).
assert (OS D C A B) by (forward_using lemma_samesidesymmetric).
assert (RT D A B A B C) by (conclude proposition_29C).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert (BetS E A e) by (conclude lemma_3_6a).
assert (BetS e A E) by (conclude axiom_betweennesssymmetry).
assert (OS H K A E) by (forward_using lemma_samesidesymmetric).
assert (RT H A E A E K) by (conclude proposition_29C).
assert (Out A E B) by (conclude lemma_ray4).
assert (Out A H D) by (conclude lemma_ray4).
assert (nCol A H E) by (forward_using lemma_parallelNC).
assert (nCol E A H) by (forward_using lemma_NCorder).
assert (CongA E A H E A H) by (conclude lemma_equalanglesreflexive).
assert (CongA E A H B A D) by (conclude lemma_equalangleshelper).
assert (CongA H A E D A B) by (conclude lemma_equalanglesflip).
assert (CongA A E K A B C) by (apply (lemma_supplements2 H A E A B C D A B A E K);eauto).
assert (OS C D B A) by (conclude lemma_samesideflip).
assert (Col A E B) by (conclude_def Col ).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq E B) by (forward_using lemma_betweennotequal).
assert (neq B E) by (conclude lemma_inequalitysymmetric).
assert (OS C D B E) by (conclude lemma_samesidecollinear).
assert (Out A H D) by (conclude lemma_ray4).
assert (Out A D H) by (conclude lemma_ray5).
assert (OS C H B E) by (conclude lemma_sameside2).
assert (Col E A B) by (forward_using lemma_collinearorder).
assert (OS H K E B) by (conclude lemma_samesidecollinear).
assert (OS H K B E) by (conclude lemma_samesideflip).
assert (OS C K B E) by (conclude lemma_samesidetransitive).
assert (OS K C B E) by (forward_using lemma_samesidesymmetric).
assert (Out B G C) by (conclude lemma_ray4).
assert (Out B C G) by (conclude lemma_ray5).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (Col B B E) by (conclude_def Col ).
assert (OS K G B E) by (conclude lemma_sameside2).
assert (OS K G E B) by (conclude lemma_samesideflip).
assert (Out B E A) by (conclude lemma_ray4).
assert (Out B A E) by (conclude lemma_ray5).
assert (CongA A E K E B G) by (conclude lemma_equalangleshelper).
assert (Par E K B G) by (conclude proposition_28D).
assert (Par E K G B) by (forward_using lemma_parallelflip).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists c, (BetS B C c /\\ Cong C c B C)) by (conclude lemma_extension);destruct Tf as [c];spliter.
assert (BetS c C B) by (conclude axiom_betweennesssymmetry).
assert (Par C D B A) by (forward_using lemma_parallelflip).
assert (RT D C B C B A) by (conclude proposition_29C).
assert (OS K F C G) by (conclude lemma_samesideflip).
assert (OS F K C G) by (forward_using lemma_samesidesymmetric).
assert (BetS C G B) by (conclude axiom_betweennesssymmetry).
assert (BetS c C G) by (conclude axiom_innertransitivity).

*****
H85 : BetS c C G
H84 : BetS C G B
H83 : OS F K C G
H82 : OS K F C G
H81 : RT D C B C B A
H80 : Par C D B A
H79 : BetS c C B
H78 : Cong C c B C
H77 : BetS B C c
c : Point
H76 : neq B C
H75 : Par E K G B
H74 : Par E K B G
H73 : CongA A E K E B G
H72 : Out B A E
H71 : Out B E A
H70 : OS K G E B
H69 : OS K G B E
H68 : Col B B E
H67 : eq B B
H66 : Out B C G
H65 : Out B G C
H64 : OS K C B E
H63 : OS C K B E
H62 : OS H K B E
H61 : OS H K E B
H60 : Col E A B
H59 : OS C H B E
H58 : Out A D H
H57 : Out A H D
H56 : OS C D B E
H55 : neq B E
H54 : neq E B
H53 : Col B A E
H52 : Col A E B
H51 : OS C D B A
H50 : CongA A E K A B C
H49 : CongA H A E D A B
H48 : CongA E A H B A D
H47 : CongA E A H E A H
H46 : nCol E A H
H45 : nCol A H E
H44 : Out A H D
H43 : Out A E B
H42 : RT H A E A E K
H41 : OS H K A E
H40 : BetS e A E
H39 : BetS E A e
H38 : BetS B E A
H37 : RT D A B A B C
H36 : OS D C A B
H35 : BetS e A B
H34 : Cong A e B A
H33 : BetS B A e
e : Point
H32 : neq B A
H31 : neq A B
H30 : neq B G
H29 : neq A H
H28 : neq A E
H27 : OS K F G C
H26 : OS H K E A
H25 : OS C D A B
H24 : OS D A C B
H23 : OS A D C B
H22 : OS A D B C
H21 : TP B C A D
H20 : TP G C K F
H19 : TP E A H K
H18 : TP A B C D
H17 : Par A H E K
H16 : Par C D A B
H15 : Par B C A D
H14 : Par G C K F
H13 : Par C F G K
H12 : Par F C G K
H11 : Par G K F C
H10 : Par E K A H
H9 : Par E A H K
H8 : Par A B C D
H7 : Par A D B C
H6 : PG G K F C
H5 : PG E A H K
H4 : BetS B G C
H3 : BetS D F C
H2 : BetS A E B
H1 : BetS A H D
H0 : PG A B C D
A,B,C,D,E,F,G,H,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
PG E K G B
+++++
assert (RT F C G C G K) by (conclude proposition_29C).
-----
Lemma proposition_43B : forall A B C D E F G H K, PG A B C D -> BetS A H D -> BetS A E B -> BetS D F C -> BetS B G C -> PG E A H K -> PG G K F C -> PG E K G B.
Proof.
intros.
assert (Par A D B C) by (conclude_def PG ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par E A H K) by (conclude_def PG ).
assert (Par E K A H) by (conclude_def PG ).
assert (Par G K F C) by (conclude_def PG ).
assert (Par F C G K) by (conclude lemma_parallelsymmetric).
assert (Par C F G K) by (forward_using lemma_parallelflip).
assert (Par G C K F) by (conclude_def PG ).
assert (Par B C A D) by (conclude lemma_parallelsymmetric).
assert (Par C D A B) by (conclude lemma_parallelsymmetric).
assert (Par A H E K) by (conclude lemma_parallelsymmetric).
assert (TP A B C D) by (conclude lemma_paralleldef2B).
assert (TP E A H K) by (conclude lemma_paralleldef2B).
assert (TP G C K F) by (conclude lemma_paralleldef2B).
assert (TP B C A D) by (conclude lemma_paralleldef2B).
assert (OS A D B C) by (conclude_def TP ).
assert (OS A D C B) by (conclude lemma_samesideflip).
assert (OS D A C B) by (forward_using lemma_samesidesymmetric).
assert (OS C D A B) by (conclude_def TP ).
assert (OS H K E A) by (conclude_def TP ).
assert (OS K F G C) by (conclude_def TP ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (neq A H) by (forward_using lemma_betweennotequal).
assert (neq B G) by (forward_using lemma_betweennotequal).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists e, (BetS B A e /\\ Cong A e B A)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (BetS e A B) by (conclude axiom_betweennesssymmetry).
assert (OS D C A B) by (forward_using lemma_samesidesymmetric).
assert (RT D A B A B C) by (conclude proposition_29C).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert (BetS E A e) by (conclude lemma_3_6a).
assert (BetS e A E) by (conclude axiom_betweennesssymmetry).
assert (OS H K A E) by (forward_using lemma_samesidesymmetric).
assert (RT H A E A E K) by (conclude proposition_29C).
assert (Out A E B) by (conclude lemma_ray4).
assert (Out A H D) by (conclude lemma_ray4).
assert (nCol A H E) by (forward_using lemma_parallelNC).
assert (nCol E A H) by (forward_using lemma_NCorder).
assert (CongA E A H E A H) by (conclude lemma_equalanglesreflexive).
assert (CongA E A H B A D) by (conclude lemma_equalangleshelper).
assert (CongA H A E D A B) by (conclude lemma_equalanglesflip).
assert (CongA A E K A B C) by (apply (lemma_supplements2 H A E A B C D A B A E K);eauto).
assert (OS C D B A) by (conclude lemma_samesideflip).
assert (Col A E B) by (conclude_def Col ).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq E B) by (forward_using lemma_betweennotequal).
assert (neq B E) by (conclude lemma_inequalitysymmetric).
assert (OS C D B E) by (conclude lemma_samesidecollinear).
assert (Out A H D) by (conclude lemma_ray4).
assert (Out A D H) by (conclude lemma_ray5).
assert (OS C H B E) by (conclude lemma_sameside2).
assert (Col E A B) by (forward_using lemma_collinearorder).
assert (OS H K E B) by (conclude lemma_samesidecollinear).
assert (OS H K B E) by (conclude lemma_samesideflip).
assert (OS C K B E) by (conclude lemma_samesidetransitive).
assert (OS K C B E) by (forward_using lemma_samesidesymmetric).
assert (Out B G C) by (conclude lemma_ray4).
assert (Out B C G) by (conclude lemma_ray5).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (Col B B E) by (conclude_def Col ).
assert (OS K G B E) by (conclude lemma_sameside2).
assert (OS K G E B) by (conclude lemma_samesideflip).
assert (Out B E A) by (conclude lemma_ray4).
assert (Out B A E) by (conclude lemma_ray5).
assert (CongA A E K E B G) by (conclude lemma_equalangleshelper).
assert (Par E K B G) by (conclude proposition_28D).
assert (Par E K G B) by (forward_using lemma_parallelflip).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists c, (BetS B C c /\\ Cong C c B C)) by (conclude lemma_extension);destruct Tf as [c];spliter.
assert (BetS c C B) by (conclude axiom_betweennesssymmetry).
assert (Par C D B A) by (forward_using lemma_parallelflip).
assert (RT D C B C B A) by (conclude proposition_29C).
assert (OS K F C G) by (conclude lemma_samesideflip).
assert (OS F K C G) by (forward_using lemma_samesidesymmetric).
assert (BetS C G B) by (conclude axiom_betweennesssymmetry).
assert (BetS c C G) by (conclude axiom_innertransitivity).
assert (RT F C G C G K) by (conclude proposition_29C).

*****
H86 : RT F C G C G K
H85 : BetS c C G
H84 : BetS C G B
H83 : OS F K C G
H82 : OS K F C G
H81 : RT D C B C B A
H80 : Par C D B A
H79 : BetS c C B
H78 : Cong C c B C
H77 : BetS B C c
c : Point
H76 : neq B C
H75 : Par E K G B
H74 : Par E K B G
H73 : CongA A E K E B G
H72 : Out B A E
H71 : Out B E A
H70 : OS K G E B
H69 : OS K G B E
H68 : Col B B E
H67 : eq B B
H66 : Out B C G
H65 : Out B G C
H64 : OS K C B E
H63 : OS C K B E
H62 : OS H K B E
H61 : OS H K E B
H60 : Col E A B
H59 : OS C H B E
H58 : Out A D H
H57 : Out A H D
H56 : OS C D B E
H55 : neq B E
H54 : neq E B
H53 : Col B A E
H52 : Col A E B
H51 : OS C D B A
H50 : CongA A E K A B C
H49 : CongA H A E D A B
H48 : CongA E A H B A D
H47 : CongA E A H E A H
H46 : nCol E A H
H45 : nCol A H E
H44 : Out A H D
H43 : Out A E B
H42 : RT H A E A E K
H41 : OS H K A E
H40 : BetS e A E
H39 : BetS E A e
H38 : BetS B E A
H37 : RT D A B A B C
H36 : OS D C A B
H35 : BetS e A B
H34 : Cong A e B A
H33 : BetS B A e
e : Point
H32 : neq B A
H31 : neq A B
H30 : neq B G
H29 : neq A H
H28 : neq A E
H27 : OS K F G C
H26 : OS H K E A
H25 : OS C D A B
H24 : OS D A C B
H23 : OS A D C B
H22 : OS A D B C
H21 : TP B C A D
H20 : TP G C K F
H19 : TP E A H K
H18 : TP A B C D
H17 : Par A H E K
H16 : Par C D A B
H15 : Par B C A D
H14 : Par G C K F
H13 : Par C F G K
H12 : Par F C G K
H11 : Par G K F C
H10 : Par E K A H
H9 : Par E A H K
H8 : Par A B C D
H7 : Par A D B C
H6 : PG G K F C
H5 : PG E A H K
H4 : BetS B G C
H3 : BetS D F C
H2 : BetS A E B
H1 : BetS A H D
H0 : PG A B C D
A,B,C,D,E,F,G,H,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
PG E K G B
+++++
assert (nCol D B C) by (forward_using lemma_parallelNC).
-----
Lemma proposition_43B : forall A B C D E F G H K, PG A B C D -> BetS A H D -> BetS A E B -> BetS D F C -> BetS B G C -> PG E A H K -> PG G K F C -> PG E K G B.
Proof.
intros.
assert (Par A D B C) by (conclude_def PG ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par E A H K) by (conclude_def PG ).
assert (Par E K A H) by (conclude_def PG ).
assert (Par G K F C) by (conclude_def PG ).
assert (Par F C G K) by (conclude lemma_parallelsymmetric).
assert (Par C F G K) by (forward_using lemma_parallelflip).
assert (Par G C K F) by (conclude_def PG ).
assert (Par B C A D) by (conclude lemma_parallelsymmetric).
assert (Par C D A B) by (conclude lemma_parallelsymmetric).
assert (Par A H E K) by (conclude lemma_parallelsymmetric).
assert (TP A B C D) by (conclude lemma_paralleldef2B).
assert (TP E A H K) by (conclude lemma_paralleldef2B).
assert (TP G C K F) by (conclude lemma_paralleldef2B).
assert (TP B C A D) by (conclude lemma_paralleldef2B).
assert (OS A D B C) by (conclude_def TP ).
assert (OS A D C B) by (conclude lemma_samesideflip).
assert (OS D A C B) by (forward_using lemma_samesidesymmetric).
assert (OS C D A B) by (conclude_def TP ).
assert (OS H K E A) by (conclude_def TP ).
assert (OS K F G C) by (conclude_def TP ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (neq A H) by (forward_using lemma_betweennotequal).
assert (neq B G) by (forward_using lemma_betweennotequal).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists e, (BetS B A e /\\ Cong A e B A)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (BetS e A B) by (conclude axiom_betweennesssymmetry).
assert (OS D C A B) by (forward_using lemma_samesidesymmetric).
assert (RT D A B A B C) by (conclude proposition_29C).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert (BetS E A e) by (conclude lemma_3_6a).
assert (BetS e A E) by (conclude axiom_betweennesssymmetry).
assert (OS H K A E) by (forward_using lemma_samesidesymmetric).
assert (RT H A E A E K) by (conclude proposition_29C).
assert (Out A E B) by (conclude lemma_ray4).
assert (Out A H D) by (conclude lemma_ray4).
assert (nCol A H E) by (forward_using lemma_parallelNC).
assert (nCol E A H) by (forward_using lemma_NCorder).
assert (CongA E A H E A H) by (conclude lemma_equalanglesreflexive).
assert (CongA E A H B A D) by (conclude lemma_equalangleshelper).
assert (CongA H A E D A B) by (conclude lemma_equalanglesflip).
assert (CongA A E K A B C) by (apply (lemma_supplements2 H A E A B C D A B A E K);eauto).
assert (OS C D B A) by (conclude lemma_samesideflip).
assert (Col A E B) by (conclude_def Col ).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq E B) by (forward_using lemma_betweennotequal).
assert (neq B E) by (conclude lemma_inequalitysymmetric).
assert (OS C D B E) by (conclude lemma_samesidecollinear).
assert (Out A H D) by (conclude lemma_ray4).
assert (Out A D H) by (conclude lemma_ray5).
assert (OS C H B E) by (conclude lemma_sameside2).
assert (Col E A B) by (forward_using lemma_collinearorder).
assert (OS H K E B) by (conclude lemma_samesidecollinear).
assert (OS H K B E) by (conclude lemma_samesideflip).
assert (OS C K B E) by (conclude lemma_samesidetransitive).
assert (OS K C B E) by (forward_using lemma_samesidesymmetric).
assert (Out B G C) by (conclude lemma_ray4).
assert (Out B C G) by (conclude lemma_ray5).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (Col B B E) by (conclude_def Col ).
assert (OS K G B E) by (conclude lemma_sameside2).
assert (OS K G E B) by (conclude lemma_samesideflip).
assert (Out B E A) by (conclude lemma_ray4).
assert (Out B A E) by (conclude lemma_ray5).
assert (CongA A E K E B G) by (conclude lemma_equalangleshelper).
assert (Par E K B G) by (conclude proposition_28D).
assert (Par E K G B) by (forward_using lemma_parallelflip).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists c, (BetS B C c /\\ Cong C c B C)) by (conclude lemma_extension);destruct Tf as [c];spliter.
assert (BetS c C B) by (conclude axiom_betweennesssymmetry).
assert (Par C D B A) by (forward_using lemma_parallelflip).
assert (RT D C B C B A) by (conclude proposition_29C).
assert (OS K F C G) by (conclude lemma_samesideflip).
assert (OS F K C G) by (forward_using lemma_samesidesymmetric).
assert (BetS C G B) by (conclude axiom_betweennesssymmetry).
assert (BetS c C G) by (conclude axiom_innertransitivity).
assert (RT F C G C G K) by (conclude proposition_29C).
assert (nCol D B C) by (forward_using lemma_parallelNC).

*****
H87 : nCol D B C
H86 : RT F C G C G K
H85 : BetS c C G
H84 : BetS C G B
H83 : OS F K C G
H82 : OS K F C G
H81 : RT D C B C B A
H80 : Par C D B A
H79 : BetS c C B
H78 : Cong C c B C
H77 : BetS B C c
c : Point
H76 : neq B C
H75 : Par E K G B
H74 : Par E K B G
H73 : CongA A E K E B G
H72 : Out B A E
H71 : Out B E A
H70 : OS K G E B
H69 : OS K G B E
H68 : Col B B E
H67 : eq B B
H66 : Out B C G
H65 : Out B G C
H64 : OS K C B E
H63 : OS C K B E
H62 : OS H K B E
H61 : OS H K E B
H60 : Col E A B
H59 : OS C H B E
H58 : Out A D H
H57 : Out A H D
H56 : OS C D B E
H55 : neq B E
H54 : neq E B
H53 : Col B A E
H52 : Col A E B
H51 : OS C D B A
H50 : CongA A E K A B C
H49 : CongA H A E D A B
H48 : CongA E A H B A D
H47 : CongA E A H E A H
H46 : nCol E A H
H45 : nCol A H E
H44 : Out A H D
H43 : Out A E B
H42 : RT H A E A E K
H41 : OS H K A E
H40 : BetS e A E
H39 : BetS E A e
H38 : BetS B E A
H37 : RT D A B A B C
H36 : OS D C A B
H35 : BetS e A B
H34 : Cong A e B A
H33 : BetS B A e
e : Point
H32 : neq B A
H31 : neq A B
H30 : neq B G
H29 : neq A H
H28 : neq A E
H27 : OS K F G C
H26 : OS H K E A
H25 : OS C D A B
H24 : OS D A C B
H23 : OS A D C B
H22 : OS A D B C
H21 : TP B C A D
H20 : TP G C K F
H19 : TP E A H K
H18 : TP A B C D
H17 : Par A H E K
H16 : Par C D A B
H15 : Par B C A D
H14 : Par G C K F
H13 : Par C F G K
H12 : Par F C G K
H11 : Par G K F C
H10 : Par E K A H
H9 : Par E A H K
H8 : Par A B C D
H7 : Par A D B C
H6 : PG G K F C
H5 : PG E A H K
H4 : BetS B G C
H3 : BetS D F C
H2 : BetS A E B
H1 : BetS A H D
H0 : PG A B C D
A,B,C,D,E,F,G,H,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
PG E K G B
+++++
assert (nCol D C B) by (forward_using lemma_NCorder).
-----
Lemma proposition_43B : forall A B C D E F G H K, PG A B C D -> BetS A H D -> BetS A E B -> BetS D F C -> BetS B G C -> PG E A H K -> PG G K F C -> PG E K G B.
Proof.
intros.
assert (Par A D B C) by (conclude_def PG ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par E A H K) by (conclude_def PG ).
assert (Par E K A H) by (conclude_def PG ).
assert (Par G K F C) by (conclude_def PG ).
assert (Par F C G K) by (conclude lemma_parallelsymmetric).
assert (Par C F G K) by (forward_using lemma_parallelflip).
assert (Par G C K F) by (conclude_def PG ).
assert (Par B C A D) by (conclude lemma_parallelsymmetric).
assert (Par C D A B) by (conclude lemma_parallelsymmetric).
assert (Par A H E K) by (conclude lemma_parallelsymmetric).
assert (TP A B C D) by (conclude lemma_paralleldef2B).
assert (TP E A H K) by (conclude lemma_paralleldef2B).
assert (TP G C K F) by (conclude lemma_paralleldef2B).
assert (TP B C A D) by (conclude lemma_paralleldef2B).
assert (OS A D B C) by (conclude_def TP ).
assert (OS A D C B) by (conclude lemma_samesideflip).
assert (OS D A C B) by (forward_using lemma_samesidesymmetric).
assert (OS C D A B) by (conclude_def TP ).
assert (OS H K E A) by (conclude_def TP ).
assert (OS K F G C) by (conclude_def TP ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (neq A H) by (forward_using lemma_betweennotequal).
assert (neq B G) by (forward_using lemma_betweennotequal).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists e, (BetS B A e /\\ Cong A e B A)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (BetS e A B) by (conclude axiom_betweennesssymmetry).
assert (OS D C A B) by (forward_using lemma_samesidesymmetric).
assert (RT D A B A B C) by (conclude proposition_29C).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert (BetS E A e) by (conclude lemma_3_6a).
assert (BetS e A E) by (conclude axiom_betweennesssymmetry).
assert (OS H K A E) by (forward_using lemma_samesidesymmetric).
assert (RT H A E A E K) by (conclude proposition_29C).
assert (Out A E B) by (conclude lemma_ray4).
assert (Out A H D) by (conclude lemma_ray4).
assert (nCol A H E) by (forward_using lemma_parallelNC).
assert (nCol E A H) by (forward_using lemma_NCorder).
assert (CongA E A H E A H) by (conclude lemma_equalanglesreflexive).
assert (CongA E A H B A D) by (conclude lemma_equalangleshelper).
assert (CongA H A E D A B) by (conclude lemma_equalanglesflip).
assert (CongA A E K A B C) by (apply (lemma_supplements2 H A E A B C D A B A E K);eauto).
assert (OS C D B A) by (conclude lemma_samesideflip).
assert (Col A E B) by (conclude_def Col ).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq E B) by (forward_using lemma_betweennotequal).
assert (neq B E) by (conclude lemma_inequalitysymmetric).
assert (OS C D B E) by (conclude lemma_samesidecollinear).
assert (Out A H D) by (conclude lemma_ray4).
assert (Out A D H) by (conclude lemma_ray5).
assert (OS C H B E) by (conclude lemma_sameside2).
assert (Col E A B) by (forward_using lemma_collinearorder).
assert (OS H K E B) by (conclude lemma_samesidecollinear).
assert (OS H K B E) by (conclude lemma_samesideflip).
assert (OS C K B E) by (conclude lemma_samesidetransitive).
assert (OS K C B E) by (forward_using lemma_samesidesymmetric).
assert (Out B G C) by (conclude lemma_ray4).
assert (Out B C G) by (conclude lemma_ray5).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (Col B B E) by (conclude_def Col ).
assert (OS K G B E) by (conclude lemma_sameside2).
assert (OS K G E B) by (conclude lemma_samesideflip).
assert (Out B E A) by (conclude lemma_ray4).
assert (Out B A E) by (conclude lemma_ray5).
assert (CongA A E K E B G) by (conclude lemma_equalangleshelper).
assert (Par E K B G) by (conclude proposition_28D).
assert (Par E K G B) by (forward_using lemma_parallelflip).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists c, (BetS B C c /\\ Cong C c B C)) by (conclude lemma_extension);destruct Tf as [c];spliter.
assert (BetS c C B) by (conclude axiom_betweennesssymmetry).
assert (Par C D B A) by (forward_using lemma_parallelflip).
assert (RT D C B C B A) by (conclude proposition_29C).
assert (OS K F C G) by (conclude lemma_samesideflip).
assert (OS F K C G) by (forward_using lemma_samesidesymmetric).
assert (BetS C G B) by (conclude axiom_betweennesssymmetry).
assert (BetS c C G) by (conclude axiom_innertransitivity).
assert (RT F C G C G K) by (conclude proposition_29C).
assert (nCol D B C) by (forward_using lemma_parallelNC).
assert (nCol D C B) by (forward_using lemma_NCorder).

*****
H88 : nCol D C B
H87 : nCol D B C
H86 : RT F C G C G K
H85 : BetS c C G
H84 : BetS C G B
H83 : OS F K C G
H82 : OS K F C G
H81 : RT D C B C B A
H80 : Par C D B A
H79 : BetS c C B
H78 : Cong C c B C
H77 : BetS B C c
c : Point
H76 : neq B C
H75 : Par E K G B
H74 : Par E K B G
H73 : CongA A E K E B G
H72 : Out B A E
H71 : Out B E A
H70 : OS K G E B
H69 : OS K G B E
H68 : Col B B E
H67 : eq B B
H66 : Out B C G
H65 : Out B G C
H64 : OS K C B E
H63 : OS C K B E
H62 : OS H K B E
H61 : OS H K E B
H60 : Col E A B
H59 : OS C H B E
H58 : Out A D H
H57 : Out A H D
H56 : OS C D B E
H55 : neq B E
H54 : neq E B
H53 : Col B A E
H52 : Col A E B
H51 : OS C D B A
H50 : CongA A E K A B C
H49 : CongA H A E D A B
H48 : CongA E A H B A D
H47 : CongA E A H E A H
H46 : nCol E A H
H45 : nCol A H E
H44 : Out A H D
H43 : Out A E B
H42 : RT H A E A E K
H41 : OS H K A E
H40 : BetS e A E
H39 : BetS E A e
H38 : BetS B E A
H37 : RT D A B A B C
H36 : OS D C A B
H35 : BetS e A B
H34 : Cong A e B A
H33 : BetS B A e
e : Point
H32 : neq B A
H31 : neq A B
H30 : neq B G
H29 : neq A H
H28 : neq A E
H27 : OS K F G C
H26 : OS H K E A
H25 : OS C D A B
H24 : OS D A C B
H23 : OS A D C B
H22 : OS A D B C
H21 : TP B C A D
H20 : TP G C K F
H19 : TP E A H K
H18 : TP A B C D
H17 : Par A H E K
H16 : Par C D A B
H15 : Par B C A D
H14 : Par G C K F
H13 : Par C F G K
H12 : Par F C G K
H11 : Par G K F C
H10 : Par E K A H
H9 : Par E A H K
H8 : Par A B C D
H7 : Par A D B C
H6 : PG G K F C
H5 : PG E A H K
H4 : BetS B G C
H3 : BetS D F C
H2 : BetS A E B
H1 : BetS A H D
H0 : PG A B C D
A,B,C,D,E,F,G,H,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
PG E K G B
+++++
assert (CongA D C B D C B) by (conclude lemma_equalanglesreflexive).
-----
Lemma proposition_43B : forall A B C D E F G H K, PG A B C D -> BetS A H D -> BetS A E B -> BetS D F C -> BetS B G C -> PG E A H K -> PG G K F C -> PG E K G B.
Proof.
intros.
assert (Par A D B C) by (conclude_def PG ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par E A H K) by (conclude_def PG ).
assert (Par E K A H) by (conclude_def PG ).
assert (Par G K F C) by (conclude_def PG ).
assert (Par F C G K) by (conclude lemma_parallelsymmetric).
assert (Par C F G K) by (forward_using lemma_parallelflip).
assert (Par G C K F) by (conclude_def PG ).
assert (Par B C A D) by (conclude lemma_parallelsymmetric).
assert (Par C D A B) by (conclude lemma_parallelsymmetric).
assert (Par A H E K) by (conclude lemma_parallelsymmetric).
assert (TP A B C D) by (conclude lemma_paralleldef2B).
assert (TP E A H K) by (conclude lemma_paralleldef2B).
assert (TP G C K F) by (conclude lemma_paralleldef2B).
assert (TP B C A D) by (conclude lemma_paralleldef2B).
assert (OS A D B C) by (conclude_def TP ).
assert (OS A D C B) by (conclude lemma_samesideflip).
assert (OS D A C B) by (forward_using lemma_samesidesymmetric).
assert (OS C D A B) by (conclude_def TP ).
assert (OS H K E A) by (conclude_def TP ).
assert (OS K F G C) by (conclude_def TP ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (neq A H) by (forward_using lemma_betweennotequal).
assert (neq B G) by (forward_using lemma_betweennotequal).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists e, (BetS B A e /\\ Cong A e B A)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (BetS e A B) by (conclude axiom_betweennesssymmetry).
assert (OS D C A B) by (forward_using lemma_samesidesymmetric).
assert (RT D A B A B C) by (conclude proposition_29C).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert (BetS E A e) by (conclude lemma_3_6a).
assert (BetS e A E) by (conclude axiom_betweennesssymmetry).
assert (OS H K A E) by (forward_using lemma_samesidesymmetric).
assert (RT H A E A E K) by (conclude proposition_29C).
assert (Out A E B) by (conclude lemma_ray4).
assert (Out A H D) by (conclude lemma_ray4).
assert (nCol A H E) by (forward_using lemma_parallelNC).
assert (nCol E A H) by (forward_using lemma_NCorder).
assert (CongA E A H E A H) by (conclude lemma_equalanglesreflexive).
assert (CongA E A H B A D) by (conclude lemma_equalangleshelper).
assert (CongA H A E D A B) by (conclude lemma_equalanglesflip).
assert (CongA A E K A B C) by (apply (lemma_supplements2 H A E A B C D A B A E K);eauto).
assert (OS C D B A) by (conclude lemma_samesideflip).
assert (Col A E B) by (conclude_def Col ).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq E B) by (forward_using lemma_betweennotequal).
assert (neq B E) by (conclude lemma_inequalitysymmetric).
assert (OS C D B E) by (conclude lemma_samesidecollinear).
assert (Out A H D) by (conclude lemma_ray4).
assert (Out A D H) by (conclude lemma_ray5).
assert (OS C H B E) by (conclude lemma_sameside2).
assert (Col E A B) by (forward_using lemma_collinearorder).
assert (OS H K E B) by (conclude lemma_samesidecollinear).
assert (OS H K B E) by (conclude lemma_samesideflip).
assert (OS C K B E) by (conclude lemma_samesidetransitive).
assert (OS K C B E) by (forward_using lemma_samesidesymmetric).
assert (Out B G C) by (conclude lemma_ray4).
assert (Out B C G) by (conclude lemma_ray5).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (Col B B E) by (conclude_def Col ).
assert (OS K G B E) by (conclude lemma_sameside2).
assert (OS K G E B) by (conclude lemma_samesideflip).
assert (Out B E A) by (conclude lemma_ray4).
assert (Out B A E) by (conclude lemma_ray5).
assert (CongA A E K E B G) by (conclude lemma_equalangleshelper).
assert (Par E K B G) by (conclude proposition_28D).
assert (Par E K G B) by (forward_using lemma_parallelflip).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists c, (BetS B C c /\\ Cong C c B C)) by (conclude lemma_extension);destruct Tf as [c];spliter.
assert (BetS c C B) by (conclude axiom_betweennesssymmetry).
assert (Par C D B A) by (forward_using lemma_parallelflip).
assert (RT D C B C B A) by (conclude proposition_29C).
assert (OS K F C G) by (conclude lemma_samesideflip).
assert (OS F K C G) by (forward_using lemma_samesidesymmetric).
assert (BetS C G B) by (conclude axiom_betweennesssymmetry).
assert (BetS c C G) by (conclude axiom_innertransitivity).
assert (RT F C G C G K) by (conclude proposition_29C).
assert (nCol D B C) by (forward_using lemma_parallelNC).
assert (nCol D C B) by (forward_using lemma_NCorder).
assert (CongA D C B D C B) by (conclude lemma_equalanglesreflexive).

*****
H89 : CongA D C B D C B
H88 : nCol D C B
H87 : nCol D B C
H86 : RT F C G C G K
H85 : BetS c C G
H84 : BetS C G B
H83 : OS F K C G
H82 : OS K F C G
H81 : RT D C B C B A
H80 : Par C D B A
H79 : BetS c C B
H78 : Cong C c B C
H77 : BetS B C c
c : Point
H76 : neq B C
H75 : Par E K G B
H74 : Par E K B G
H73 : CongA A E K E B G
H72 : Out B A E
H71 : Out B E A
H70 : OS K G E B
H69 : OS K G B E
H68 : Col B B E
H67 : eq B B
H66 : Out B C G
H65 : Out B G C
H64 : OS K C B E
H63 : OS C K B E
H62 : OS H K B E
H61 : OS H K E B
H60 : Col E A B
H59 : OS C H B E
H58 : Out A D H
H57 : Out A H D
H56 : OS C D B E
H55 : neq B E
H54 : neq E B
H53 : Col B A E
H52 : Col A E B
H51 : OS C D B A
H50 : CongA A E K A B C
H49 : CongA H A E D A B
H48 : CongA E A H B A D
H47 : CongA E A H E A H
H46 : nCol E A H
H45 : nCol A H E
H44 : Out A H D
H43 : Out A E B
H42 : RT H A E A E K
H41 : OS H K A E
H40 : BetS e A E
H39 : BetS E A e
H38 : BetS B E A
H37 : RT D A B A B C
H36 : OS D C A B
H35 : BetS e A B
H34 : Cong A e B A
H33 : BetS B A e
e : Point
H32 : neq B A
H31 : neq A B
H30 : neq B G
H29 : neq A H
H28 : neq A E
H27 : OS K F G C
H26 : OS H K E A
H25 : OS C D A B
H24 : OS D A C B
H23 : OS A D C B
H22 : OS A D B C
H21 : TP B C A D
H20 : TP G C K F
H19 : TP E A H K
H18 : TP A B C D
H17 : Par A H E K
H16 : Par C D A B
H15 : Par B C A D
H14 : Par G C K F
H13 : Par C F G K
H12 : Par F C G K
H11 : Par G K F C
H10 : Par E K A H
H9 : Par E A H K
H8 : Par A B C D
H7 : Par A D B C
H6 : PG G K F C
H5 : PG E A H K
H4 : BetS B G C
H3 : BetS D F C
H2 : BetS A E B
H1 : BetS A H D
H0 : PG A B C D
A,B,C,D,E,F,G,H,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
PG E K G B
+++++
assert (BetS C F D) by (conclude axiom_betweennesssymmetry).
-----
Lemma proposition_43B : forall A B C D E F G H K, PG A B C D -> BetS A H D -> BetS A E B -> BetS D F C -> BetS B G C -> PG E A H K -> PG G K F C -> PG E K G B.
Proof.
intros.
assert (Par A D B C) by (conclude_def PG ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par E A H K) by (conclude_def PG ).
assert (Par E K A H) by (conclude_def PG ).
assert (Par G K F C) by (conclude_def PG ).
assert (Par F C G K) by (conclude lemma_parallelsymmetric).
assert (Par C F G K) by (forward_using lemma_parallelflip).
assert (Par G C K F) by (conclude_def PG ).
assert (Par B C A D) by (conclude lemma_parallelsymmetric).
assert (Par C D A B) by (conclude lemma_parallelsymmetric).
assert (Par A H E K) by (conclude lemma_parallelsymmetric).
assert (TP A B C D) by (conclude lemma_paralleldef2B).
assert (TP E A H K) by (conclude lemma_paralleldef2B).
assert (TP G C K F) by (conclude lemma_paralleldef2B).
assert (TP B C A D) by (conclude lemma_paralleldef2B).
assert (OS A D B C) by (conclude_def TP ).
assert (OS A D C B) by (conclude lemma_samesideflip).
assert (OS D A C B) by (forward_using lemma_samesidesymmetric).
assert (OS C D A B) by (conclude_def TP ).
assert (OS H K E A) by (conclude_def TP ).
assert (OS K F G C) by (conclude_def TP ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (neq A H) by (forward_using lemma_betweennotequal).
assert (neq B G) by (forward_using lemma_betweennotequal).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists e, (BetS B A e /\\ Cong A e B A)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (BetS e A B) by (conclude axiom_betweennesssymmetry).
assert (OS D C A B) by (forward_using lemma_samesidesymmetric).
assert (RT D A B A B C) by (conclude proposition_29C).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert (BetS E A e) by (conclude lemma_3_6a).
assert (BetS e A E) by (conclude axiom_betweennesssymmetry).
assert (OS H K A E) by (forward_using lemma_samesidesymmetric).
assert (RT H A E A E K) by (conclude proposition_29C).
assert (Out A E B) by (conclude lemma_ray4).
assert (Out A H D) by (conclude lemma_ray4).
assert (nCol A H E) by (forward_using lemma_parallelNC).
assert (nCol E A H) by (forward_using lemma_NCorder).
assert (CongA E A H E A H) by (conclude lemma_equalanglesreflexive).
assert (CongA E A H B A D) by (conclude lemma_equalangleshelper).
assert (CongA H A E D A B) by (conclude lemma_equalanglesflip).
assert (CongA A E K A B C) by (apply (lemma_supplements2 H A E A B C D A B A E K);eauto).
assert (OS C D B A) by (conclude lemma_samesideflip).
assert (Col A E B) by (conclude_def Col ).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq E B) by (forward_using lemma_betweennotequal).
assert (neq B E) by (conclude lemma_inequalitysymmetric).
assert (OS C D B E) by (conclude lemma_samesidecollinear).
assert (Out A H D) by (conclude lemma_ray4).
assert (Out A D H) by (conclude lemma_ray5).
assert (OS C H B E) by (conclude lemma_sameside2).
assert (Col E A B) by (forward_using lemma_collinearorder).
assert (OS H K E B) by (conclude lemma_samesidecollinear).
assert (OS H K B E) by (conclude lemma_samesideflip).
assert (OS C K B E) by (conclude lemma_samesidetransitive).
assert (OS K C B E) by (forward_using lemma_samesidesymmetric).
assert (Out B G C) by (conclude lemma_ray4).
assert (Out B C G) by (conclude lemma_ray5).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (Col B B E) by (conclude_def Col ).
assert (OS K G B E) by (conclude lemma_sameside2).
assert (OS K G E B) by (conclude lemma_samesideflip).
assert (Out B E A) by (conclude lemma_ray4).
assert (Out B A E) by (conclude lemma_ray5).
assert (CongA A E K E B G) by (conclude lemma_equalangleshelper).
assert (Par E K B G) by (conclude proposition_28D).
assert (Par E K G B) by (forward_using lemma_parallelflip).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists c, (BetS B C c /\\ Cong C c B C)) by (conclude lemma_extension);destruct Tf as [c];spliter.
assert (BetS c C B) by (conclude axiom_betweennesssymmetry).
assert (Par C D B A) by (forward_using lemma_parallelflip).
assert (RT D C B C B A) by (conclude proposition_29C).
assert (OS K F C G) by (conclude lemma_samesideflip).
assert (OS F K C G) by (forward_using lemma_samesidesymmetric).
assert (BetS C G B) by (conclude axiom_betweennesssymmetry).
assert (BetS c C G) by (conclude axiom_innertransitivity).
assert (RT F C G C G K) by (conclude proposition_29C).
assert (nCol D B C) by (forward_using lemma_parallelNC).
assert (nCol D C B) by (forward_using lemma_NCorder).
assert (CongA D C B D C B) by (conclude lemma_equalanglesreflexive).
assert (BetS C F D) by (conclude axiom_betweennesssymmetry).

*****
H90 : BetS C F D
H89 : CongA D C B D C B
H88 : nCol D C B
H87 : nCol D B C
H86 : RT F C G C G K
H85 : BetS c C G
H84 : BetS C G B
H83 : OS F K C G
H82 : OS K F C G
H81 : RT D C B C B A
H80 : Par C D B A
H79 : BetS c C B
H78 : Cong C c B C
H77 : BetS B C c
c : Point
H76 : neq B C
H75 : Par E K G B
H74 : Par E K B G
H73 : CongA A E K E B G
H72 : Out B A E
H71 : Out B E A
H70 : OS K G E B
H69 : OS K G B E
H68 : Col B B E
H67 : eq B B
H66 : Out B C G
H65 : Out B G C
H64 : OS K C B E
H63 : OS C K B E
H62 : OS H K B E
H61 : OS H K E B
H60 : Col E A B
H59 : OS C H B E
H58 : Out A D H
H57 : Out A H D
H56 : OS C D B E
H55 : neq B E
H54 : neq E B
H53 : Col B A E
H52 : Col A E B
H51 : OS C D B A
H50 : CongA A E K A B C
H49 : CongA H A E D A B
H48 : CongA E A H B A D
H47 : CongA E A H E A H
H46 : nCol E A H
H45 : nCol A H E
H44 : Out A H D
H43 : Out A E B
H42 : RT H A E A E K
H41 : OS H K A E
H40 : BetS e A E
H39 : BetS E A e
H38 : BetS B E A
H37 : RT D A B A B C
H36 : OS D C A B
H35 : BetS e A B
H34 : Cong A e B A
H33 : BetS B A e
e : Point
H32 : neq B A
H31 : neq A B
H30 : neq B G
H29 : neq A H
H28 : neq A E
H27 : OS K F G C
H26 : OS H K E A
H25 : OS C D A B
H24 : OS D A C B
H23 : OS A D C B
H22 : OS A D B C
H21 : TP B C A D
H20 : TP G C K F
H19 : TP E A H K
H18 : TP A B C D
H17 : Par A H E K
H16 : Par C D A B
H15 : Par B C A D
H14 : Par G C K F
H13 : Par C F G K
H12 : Par F C G K
H11 : Par G K F C
H10 : Par E K A H
H9 : Par E A H K
H8 : Par A B C D
H7 : Par A D B C
H6 : PG G K F C
H5 : PG E A H K
H4 : BetS B G C
H3 : BetS D F C
H2 : BetS A E B
H1 : BetS A H D
H0 : PG A B C D
A,B,C,D,E,F,G,H,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
PG E K G B
+++++
assert (neq C F) by (forward_using lemma_betweennotequal).
-----
Lemma proposition_43B : forall A B C D E F G H K, PG A B C D -> BetS A H D -> BetS A E B -> BetS D F C -> BetS B G C -> PG E A H K -> PG G K F C -> PG E K G B.
Proof.
intros.
assert (Par A D B C) by (conclude_def PG ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par E A H K) by (conclude_def PG ).
assert (Par E K A H) by (conclude_def PG ).
assert (Par G K F C) by (conclude_def PG ).
assert (Par F C G K) by (conclude lemma_parallelsymmetric).
assert (Par C F G K) by (forward_using lemma_parallelflip).
assert (Par G C K F) by (conclude_def PG ).
assert (Par B C A D) by (conclude lemma_parallelsymmetric).
assert (Par C D A B) by (conclude lemma_parallelsymmetric).
assert (Par A H E K) by (conclude lemma_parallelsymmetric).
assert (TP A B C D) by (conclude lemma_paralleldef2B).
assert (TP E A H K) by (conclude lemma_paralleldef2B).
assert (TP G C K F) by (conclude lemma_paralleldef2B).
assert (TP B C A D) by (conclude lemma_paralleldef2B).
assert (OS A D B C) by (conclude_def TP ).
assert (OS A D C B) by (conclude lemma_samesideflip).
assert (OS D A C B) by (forward_using lemma_samesidesymmetric).
assert (OS C D A B) by (conclude_def TP ).
assert (OS H K E A) by (conclude_def TP ).
assert (OS K F G C) by (conclude_def TP ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (neq A H) by (forward_using lemma_betweennotequal).
assert (neq B G) by (forward_using lemma_betweennotequal).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists e, (BetS B A e /\\ Cong A e B A)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (BetS e A B) by (conclude axiom_betweennesssymmetry).
assert (OS D C A B) by (forward_using lemma_samesidesymmetric).
assert (RT D A B A B C) by (conclude proposition_29C).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert (BetS E A e) by (conclude lemma_3_6a).
assert (BetS e A E) by (conclude axiom_betweennesssymmetry).
assert (OS H K A E) by (forward_using lemma_samesidesymmetric).
assert (RT H A E A E K) by (conclude proposition_29C).
assert (Out A E B) by (conclude lemma_ray4).
assert (Out A H D) by (conclude lemma_ray4).
assert (nCol A H E) by (forward_using lemma_parallelNC).
assert (nCol E A H) by (forward_using lemma_NCorder).
assert (CongA E A H E A H) by (conclude lemma_equalanglesreflexive).
assert (CongA E A H B A D) by (conclude lemma_equalangleshelper).
assert (CongA H A E D A B) by (conclude lemma_equalanglesflip).
assert (CongA A E K A B C) by (apply (lemma_supplements2 H A E A B C D A B A E K);eauto).
assert (OS C D B A) by (conclude lemma_samesideflip).
assert (Col A E B) by (conclude_def Col ).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq E B) by (forward_using lemma_betweennotequal).
assert (neq B E) by (conclude lemma_inequalitysymmetric).
assert (OS C D B E) by (conclude lemma_samesidecollinear).
assert (Out A H D) by (conclude lemma_ray4).
assert (Out A D H) by (conclude lemma_ray5).
assert (OS C H B E) by (conclude lemma_sameside2).
assert (Col E A B) by (forward_using lemma_collinearorder).
assert (OS H K E B) by (conclude lemma_samesidecollinear).
assert (OS H K B E) by (conclude lemma_samesideflip).
assert (OS C K B E) by (conclude lemma_samesidetransitive).
assert (OS K C B E) by (forward_using lemma_samesidesymmetric).
assert (Out B G C) by (conclude lemma_ray4).
assert (Out B C G) by (conclude lemma_ray5).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (Col B B E) by (conclude_def Col ).
assert (OS K G B E) by (conclude lemma_sameside2).
assert (OS K G E B) by (conclude lemma_samesideflip).
assert (Out B E A) by (conclude lemma_ray4).
assert (Out B A E) by (conclude lemma_ray5).
assert (CongA A E K E B G) by (conclude lemma_equalangleshelper).
assert (Par E K B G) by (conclude proposition_28D).
assert (Par E K G B) by (forward_using lemma_parallelflip).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists c, (BetS B C c /\\ Cong C c B C)) by (conclude lemma_extension);destruct Tf as [c];spliter.
assert (BetS c C B) by (conclude axiom_betweennesssymmetry).
assert (Par C D B A) by (forward_using lemma_parallelflip).
assert (RT D C B C B A) by (conclude proposition_29C).
assert (OS K F C G) by (conclude lemma_samesideflip).
assert (OS F K C G) by (forward_using lemma_samesidesymmetric).
assert (BetS C G B) by (conclude axiom_betweennesssymmetry).
assert (BetS c C G) by (conclude axiom_innertransitivity).
assert (RT F C G C G K) by (conclude proposition_29C).
assert (nCol D B C) by (forward_using lemma_parallelNC).
assert (nCol D C B) by (forward_using lemma_NCorder).
assert (CongA D C B D C B) by (conclude lemma_equalanglesreflexive).
assert (BetS C F D) by (conclude axiom_betweennesssymmetry).
assert (neq C F) by (forward_using lemma_betweennotequal).

*****
H91 : neq C F
H90 : BetS C F D
H89 : CongA D C B D C B
H88 : nCol D C B
H87 : nCol D B C
H86 : RT F C G C G K
H85 : BetS c C G
H84 : BetS C G B
H83 : OS F K C G
H82 : OS K F C G
H81 : RT D C B C B A
H80 : Par C D B A
H79 : BetS c C B
H78 : Cong C c B C
H77 : BetS B C c
c : Point
H76 : neq B C
H75 : Par E K G B
H74 : Par E K B G
H73 : CongA A E K E B G
H72 : Out B A E
H71 : Out B E A
H70 : OS K G E B
H69 : OS K G B E
H68 : Col B B E
H67 : eq B B
H66 : Out B C G
H65 : Out B G C
H64 : OS K C B E
H63 : OS C K B E
H62 : OS H K B E
H61 : OS H K E B
H60 : Col E A B
H59 : OS C H B E
H58 : Out A D H
H57 : Out A H D
H56 : OS C D B E
H55 : neq B E
H54 : neq E B
H53 : Col B A E
H52 : Col A E B
H51 : OS C D B A
H50 : CongA A E K A B C
H49 : CongA H A E D A B
H48 : CongA E A H B A D
H47 : CongA E A H E A H
H46 : nCol E A H
H45 : nCol A H E
H44 : Out A H D
H43 : Out A E B
H42 : RT H A E A E K
H41 : OS H K A E
H40 : BetS e A E
H39 : BetS E A e
H38 : BetS B E A
H37 : RT D A B A B C
H36 : OS D C A B
H35 : BetS e A B
H34 : Cong A e B A
H33 : BetS B A e
e : Point
H32 : neq B A
H31 : neq A B
H30 : neq B G
H29 : neq A H
H28 : neq A E
H27 : OS K F G C
H26 : OS H K E A
H25 : OS C D A B
H24 : OS D A C B
H23 : OS A D C B
H22 : OS A D B C
H21 : TP B C A D
H20 : TP G C K F
H19 : TP E A H K
H18 : TP A B C D
H17 : Par A H E K
H16 : Par C D A B
H15 : Par B C A D
H14 : Par G C K F
H13 : Par C F G K
H12 : Par F C G K
H11 : Par G K F C
H10 : Par E K A H
H9 : Par E A H K
H8 : Par A B C D
H7 : Par A D B C
H6 : PG G K F C
H5 : PG E A H K
H4 : BetS B G C
H3 : BetS D F C
H2 : BetS A E B
H1 : BetS A H D
H0 : PG A B C D
A,B,C,D,E,F,G,H,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
PG E K G B
+++++
assert (Out C F D) by (conclude lemma_ray4).
-----
Lemma proposition_43B : forall A B C D E F G H K, PG A B C D -> BetS A H D -> BetS A E B -> BetS D F C -> BetS B G C -> PG E A H K -> PG G K F C -> PG E K G B.
Proof.
intros.
assert (Par A D B C) by (conclude_def PG ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par E A H K) by (conclude_def PG ).
assert (Par E K A H) by (conclude_def PG ).
assert (Par G K F C) by (conclude_def PG ).
assert (Par F C G K) by (conclude lemma_parallelsymmetric).
assert (Par C F G K) by (forward_using lemma_parallelflip).
assert (Par G C K F) by (conclude_def PG ).
assert (Par B C A D) by (conclude lemma_parallelsymmetric).
assert (Par C D A B) by (conclude lemma_parallelsymmetric).
assert (Par A H E K) by (conclude lemma_parallelsymmetric).
assert (TP A B C D) by (conclude lemma_paralleldef2B).
assert (TP E A H K) by (conclude lemma_paralleldef2B).
assert (TP G C K F) by (conclude lemma_paralleldef2B).
assert (TP B C A D) by (conclude lemma_paralleldef2B).
assert (OS A D B C) by (conclude_def TP ).
assert (OS A D C B) by (conclude lemma_samesideflip).
assert (OS D A C B) by (forward_using lemma_samesidesymmetric).
assert (OS C D A B) by (conclude_def TP ).
assert (OS H K E A) by (conclude_def TP ).
assert (OS K F G C) by (conclude_def TP ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (neq A H) by (forward_using lemma_betweennotequal).
assert (neq B G) by (forward_using lemma_betweennotequal).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists e, (BetS B A e /\\ Cong A e B A)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (BetS e A B) by (conclude axiom_betweennesssymmetry).
assert (OS D C A B) by (forward_using lemma_samesidesymmetric).
assert (RT D A B A B C) by (conclude proposition_29C).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert (BetS E A e) by (conclude lemma_3_6a).
assert (BetS e A E) by (conclude axiom_betweennesssymmetry).
assert (OS H K A E) by (forward_using lemma_samesidesymmetric).
assert (RT H A E A E K) by (conclude proposition_29C).
assert (Out A E B) by (conclude lemma_ray4).
assert (Out A H D) by (conclude lemma_ray4).
assert (nCol A H E) by (forward_using lemma_parallelNC).
assert (nCol E A H) by (forward_using lemma_NCorder).
assert (CongA E A H E A H) by (conclude lemma_equalanglesreflexive).
assert (CongA E A H B A D) by (conclude lemma_equalangleshelper).
assert (CongA H A E D A B) by (conclude lemma_equalanglesflip).
assert (CongA A E K A B C) by (apply (lemma_supplements2 H A E A B C D A B A E K);eauto).
assert (OS C D B A) by (conclude lemma_samesideflip).
assert (Col A E B) by (conclude_def Col ).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq E B) by (forward_using lemma_betweennotequal).
assert (neq B E) by (conclude lemma_inequalitysymmetric).
assert (OS C D B E) by (conclude lemma_samesidecollinear).
assert (Out A H D) by (conclude lemma_ray4).
assert (Out A D H) by (conclude lemma_ray5).
assert (OS C H B E) by (conclude lemma_sameside2).
assert (Col E A B) by (forward_using lemma_collinearorder).
assert (OS H K E B) by (conclude lemma_samesidecollinear).
assert (OS H K B E) by (conclude lemma_samesideflip).
assert (OS C K B E) by (conclude lemma_samesidetransitive).
assert (OS K C B E) by (forward_using lemma_samesidesymmetric).
assert (Out B G C) by (conclude lemma_ray4).
assert (Out B C G) by (conclude lemma_ray5).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (Col B B E) by (conclude_def Col ).
assert (OS K G B E) by (conclude lemma_sameside2).
assert (OS K G E B) by (conclude lemma_samesideflip).
assert (Out B E A) by (conclude lemma_ray4).
assert (Out B A E) by (conclude lemma_ray5).
assert (CongA A E K E B G) by (conclude lemma_equalangleshelper).
assert (Par E K B G) by (conclude proposition_28D).
assert (Par E K G B) by (forward_using lemma_parallelflip).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists c, (BetS B C c /\\ Cong C c B C)) by (conclude lemma_extension);destruct Tf as [c];spliter.
assert (BetS c C B) by (conclude axiom_betweennesssymmetry).
assert (Par C D B A) by (forward_using lemma_parallelflip).
assert (RT D C B C B A) by (conclude proposition_29C).
assert (OS K F C G) by (conclude lemma_samesideflip).
assert (OS F K C G) by (forward_using lemma_samesidesymmetric).
assert (BetS C G B) by (conclude axiom_betweennesssymmetry).
assert (BetS c C G) by (conclude axiom_innertransitivity).
assert (RT F C G C G K) by (conclude proposition_29C).
assert (nCol D B C) by (forward_using lemma_parallelNC).
assert (nCol D C B) by (forward_using lemma_NCorder).
assert (CongA D C B D C B) by (conclude lemma_equalanglesreflexive).
assert (BetS C F D) by (conclude axiom_betweennesssymmetry).
assert (neq C F) by (forward_using lemma_betweennotequal).
assert (Out C F D) by (conclude lemma_ray4).

*****
H92 : Out C F D
H91 : neq C F
H90 : BetS C F D
H89 : CongA D C B D C B
H88 : nCol D C B
H87 : nCol D B C
H86 : RT F C G C G K
H85 : BetS c C G
H84 : BetS C G B
H83 : OS F K C G
H82 : OS K F C G
H81 : RT D C B C B A
H80 : Par C D B A
H79 : BetS c C B
H78 : Cong C c B C
H77 : BetS B C c
c : Point
H76 : neq B C
H75 : Par E K G B
H74 : Par E K B G
H73 : CongA A E K E B G
H72 : Out B A E
H71 : Out B E A
H70 : OS K G E B
H69 : OS K G B E
H68 : Col B B E
H67 : eq B B
H66 : Out B C G
H65 : Out B G C
H64 : OS K C B E
H63 : OS C K B E
H62 : OS H K B E
H61 : OS H K E B
H60 : Col E A B
H59 : OS C H B E
H58 : Out A D H
H57 : Out A H D
H56 : OS C D B E
H55 : neq B E
H54 : neq E B
H53 : Col B A E
H52 : Col A E B
H51 : OS C D B A
H50 : CongA A E K A B C
H49 : CongA H A E D A B
H48 : CongA E A H B A D
H47 : CongA E A H E A H
H46 : nCol E A H
H45 : nCol A H E
H44 : Out A H D
H43 : Out A E B
H42 : RT H A E A E K
H41 : OS H K A E
H40 : BetS e A E
H39 : BetS E A e
H38 : BetS B E A
H37 : RT D A B A B C
H36 : OS D C A B
H35 : BetS e A B
H34 : Cong A e B A
H33 : BetS B A e
e : Point
H32 : neq B A
H31 : neq A B
H30 : neq B G
H29 : neq A H
H28 : neq A E
H27 : OS K F G C
H26 : OS H K E A
H25 : OS C D A B
H24 : OS D A C B
H23 : OS A D C B
H22 : OS A D B C
H21 : TP B C A D
H20 : TP G C K F
H19 : TP E A H K
H18 : TP A B C D
H17 : Par A H E K
H16 : Par C D A B
H15 : Par B C A D
H14 : Par G C K F
H13 : Par C F G K
H12 : Par F C G K
H11 : Par G K F C
H10 : Par E K A H
H9 : Par E A H K
H8 : Par A B C D
H7 : Par A D B C
H6 : PG G K F C
H5 : PG E A H K
H4 : BetS B G C
H3 : BetS D F C
H2 : BetS A E B
H1 : BetS A H D
H0 : PG A B C D
A,B,C,D,E,F,G,H,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
PG E K G B
+++++
assert (Out C D F) by (conclude lemma_ray5).
-----
Lemma proposition_43B : forall A B C D E F G H K, PG A B C D -> BetS A H D -> BetS A E B -> BetS D F C -> BetS B G C -> PG E A H K -> PG G K F C -> PG E K G B.
Proof.
intros.
assert (Par A D B C) by (conclude_def PG ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par E A H K) by (conclude_def PG ).
assert (Par E K A H) by (conclude_def PG ).
assert (Par G K F C) by (conclude_def PG ).
assert (Par F C G K) by (conclude lemma_parallelsymmetric).
assert (Par C F G K) by (forward_using lemma_parallelflip).
assert (Par G C K F) by (conclude_def PG ).
assert (Par B C A D) by (conclude lemma_parallelsymmetric).
assert (Par C D A B) by (conclude lemma_parallelsymmetric).
assert (Par A H E K) by (conclude lemma_parallelsymmetric).
assert (TP A B C D) by (conclude lemma_paralleldef2B).
assert (TP E A H K) by (conclude lemma_paralleldef2B).
assert (TP G C K F) by (conclude lemma_paralleldef2B).
assert (TP B C A D) by (conclude lemma_paralleldef2B).
assert (OS A D B C) by (conclude_def TP ).
assert (OS A D C B) by (conclude lemma_samesideflip).
assert (OS D A C B) by (forward_using lemma_samesidesymmetric).
assert (OS C D A B) by (conclude_def TP ).
assert (OS H K E A) by (conclude_def TP ).
assert (OS K F G C) by (conclude_def TP ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (neq A H) by (forward_using lemma_betweennotequal).
assert (neq B G) by (forward_using lemma_betweennotequal).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists e, (BetS B A e /\\ Cong A e B A)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (BetS e A B) by (conclude axiom_betweennesssymmetry).
assert (OS D C A B) by (forward_using lemma_samesidesymmetric).
assert (RT D A B A B C) by (conclude proposition_29C).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert (BetS E A e) by (conclude lemma_3_6a).
assert (BetS e A E) by (conclude axiom_betweennesssymmetry).
assert (OS H K A E) by (forward_using lemma_samesidesymmetric).
assert (RT H A E A E K) by (conclude proposition_29C).
assert (Out A E B) by (conclude lemma_ray4).
assert (Out A H D) by (conclude lemma_ray4).
assert (nCol A H E) by (forward_using lemma_parallelNC).
assert (nCol E A H) by (forward_using lemma_NCorder).
assert (CongA E A H E A H) by (conclude lemma_equalanglesreflexive).
assert (CongA E A H B A D) by (conclude lemma_equalangleshelper).
assert (CongA H A E D A B) by (conclude lemma_equalanglesflip).
assert (CongA A E K A B C) by (apply (lemma_supplements2 H A E A B C D A B A E K);eauto).
assert (OS C D B A) by (conclude lemma_samesideflip).
assert (Col A E B) by (conclude_def Col ).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq E B) by (forward_using lemma_betweennotequal).
assert (neq B E) by (conclude lemma_inequalitysymmetric).
assert (OS C D B E) by (conclude lemma_samesidecollinear).
assert (Out A H D) by (conclude lemma_ray4).
assert (Out A D H) by (conclude lemma_ray5).
assert (OS C H B E) by (conclude lemma_sameside2).
assert (Col E A B) by (forward_using lemma_collinearorder).
assert (OS H K E B) by (conclude lemma_samesidecollinear).
assert (OS H K B E) by (conclude lemma_samesideflip).
assert (OS C K B E) by (conclude lemma_samesidetransitive).
assert (OS K C B E) by (forward_using lemma_samesidesymmetric).
assert (Out B G C) by (conclude lemma_ray4).
assert (Out B C G) by (conclude lemma_ray5).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (Col B B E) by (conclude_def Col ).
assert (OS K G B E) by (conclude lemma_sameside2).
assert (OS K G E B) by (conclude lemma_samesideflip).
assert (Out B E A) by (conclude lemma_ray4).
assert (Out B A E) by (conclude lemma_ray5).
assert (CongA A E K E B G) by (conclude lemma_equalangleshelper).
assert (Par E K B G) by (conclude proposition_28D).
assert (Par E K G B) by (forward_using lemma_parallelflip).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists c, (BetS B C c /\\ Cong C c B C)) by (conclude lemma_extension);destruct Tf as [c];spliter.
assert (BetS c C B) by (conclude axiom_betweennesssymmetry).
assert (Par C D B A) by (forward_using lemma_parallelflip).
assert (RT D C B C B A) by (conclude proposition_29C).
assert (OS K F C G) by (conclude lemma_samesideflip).
assert (OS F K C G) by (forward_using lemma_samesidesymmetric).
assert (BetS C G B) by (conclude axiom_betweennesssymmetry).
assert (BetS c C G) by (conclude axiom_innertransitivity).
assert (RT F C G C G K) by (conclude proposition_29C).
assert (nCol D B C) by (forward_using lemma_parallelNC).
assert (nCol D C B) by (forward_using lemma_NCorder).
assert (CongA D C B D C B) by (conclude lemma_equalanglesreflexive).
assert (BetS C F D) by (conclude axiom_betweennesssymmetry).
assert (neq C F) by (forward_using lemma_betweennotequal).
assert (Out C F D) by (conclude lemma_ray4).
assert (Out C D F) by (conclude lemma_ray5).

*****
H93 : Out C D F
H92 : Out C F D
H91 : neq C F
H90 : BetS C F D
H89 : CongA D C B D C B
H88 : nCol D C B
H87 : nCol D B C
H86 : RT F C G C G K
H85 : BetS c C G
H84 : BetS C G B
H83 : OS F K C G
H82 : OS K F C G
H81 : RT D C B C B A
H80 : Par C D B A
H79 : BetS c C B
H78 : Cong C c B C
H77 : BetS B C c
c : Point
H76 : neq B C
H75 : Par E K G B
H74 : Par E K B G
H73 : CongA A E K E B G
H72 : Out B A E
H71 : Out B E A
H70 : OS K G E B
H69 : OS K G B E
H68 : Col B B E
H67 : eq B B
H66 : Out B C G
H65 : Out B G C
H64 : OS K C B E
H63 : OS C K B E
H62 : OS H K B E
H61 : OS H K E B
H60 : Col E A B
H59 : OS C H B E
H58 : Out A D H
H57 : Out A H D
H56 : OS C D B E
H55 : neq B E
H54 : neq E B
H53 : Col B A E
H52 : Col A E B
H51 : OS C D B A
H50 : CongA A E K A B C
H49 : CongA H A E D A B
H48 : CongA E A H B A D
H47 : CongA E A H E A H
H46 : nCol E A H
H45 : nCol A H E
H44 : Out A H D
H43 : Out A E B
H42 : RT H A E A E K
H41 : OS H K A E
H40 : BetS e A E
H39 : BetS E A e
H38 : BetS B E A
H37 : RT D A B A B C
H36 : OS D C A B
H35 : BetS e A B
H34 : Cong A e B A
H33 : BetS B A e
e : Point
H32 : neq B A
H31 : neq A B
H30 : neq B G
H29 : neq A H
H28 : neq A E
H27 : OS K F G C
H26 : OS H K E A
H25 : OS C D A B
H24 : OS D A C B
H23 : OS A D C B
H22 : OS A D B C
H21 : TP B C A D
H20 : TP G C K F
H19 : TP E A H K
H18 : TP A B C D
H17 : Par A H E K
H16 : Par C D A B
H15 : Par B C A D
H14 : Par G C K F
H13 : Par C F G K
H12 : Par F C G K
H11 : Par G K F C
H10 : Par E K A H
H9 : Par E A H K
H8 : Par A B C D
H7 : Par A D B C
H6 : PG G K F C
H5 : PG E A H K
H4 : BetS B G C
H3 : BetS D F C
H2 : BetS A E B
H1 : BetS A H D
H0 : PG A B C D
A,B,C,D,E,F,G,H,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
PG E K G B
+++++
assert (BetS C G B) by (conclude axiom_betweennesssymmetry).
-----
Lemma proposition_43B : forall A B C D E F G H K, PG A B C D -> BetS A H D -> BetS A E B -> BetS D F C -> BetS B G C -> PG E A H K -> PG G K F C -> PG E K G B.
Proof.
intros.
assert (Par A D B C) by (conclude_def PG ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par E A H K) by (conclude_def PG ).
assert (Par E K A H) by (conclude_def PG ).
assert (Par G K F C) by (conclude_def PG ).
assert (Par F C G K) by (conclude lemma_parallelsymmetric).
assert (Par C F G K) by (forward_using lemma_parallelflip).
assert (Par G C K F) by (conclude_def PG ).
assert (Par B C A D) by (conclude lemma_parallelsymmetric).
assert (Par C D A B) by (conclude lemma_parallelsymmetric).
assert (Par A H E K) by (conclude lemma_parallelsymmetric).
assert (TP A B C D) by (conclude lemma_paralleldef2B).
assert (TP E A H K) by (conclude lemma_paralleldef2B).
assert (TP G C K F) by (conclude lemma_paralleldef2B).
assert (TP B C A D) by (conclude lemma_paralleldef2B).
assert (OS A D B C) by (conclude_def TP ).
assert (OS A D C B) by (conclude lemma_samesideflip).
assert (OS D A C B) by (forward_using lemma_samesidesymmetric).
assert (OS C D A B) by (conclude_def TP ).
assert (OS H K E A) by (conclude_def TP ).
assert (OS K F G C) by (conclude_def TP ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (neq A H) by (forward_using lemma_betweennotequal).
assert (neq B G) by (forward_using lemma_betweennotequal).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists e, (BetS B A e /\\ Cong A e B A)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (BetS e A B) by (conclude axiom_betweennesssymmetry).
assert (OS D C A B) by (forward_using lemma_samesidesymmetric).
assert (RT D A B A B C) by (conclude proposition_29C).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert (BetS E A e) by (conclude lemma_3_6a).
assert (BetS e A E) by (conclude axiom_betweennesssymmetry).
assert (OS H K A E) by (forward_using lemma_samesidesymmetric).
assert (RT H A E A E K) by (conclude proposition_29C).
assert (Out A E B) by (conclude lemma_ray4).
assert (Out A H D) by (conclude lemma_ray4).
assert (nCol A H E) by (forward_using lemma_parallelNC).
assert (nCol E A H) by (forward_using lemma_NCorder).
assert (CongA E A H E A H) by (conclude lemma_equalanglesreflexive).
assert (CongA E A H B A D) by (conclude lemma_equalangleshelper).
assert (CongA H A E D A B) by (conclude lemma_equalanglesflip).
assert (CongA A E K A B C) by (apply (lemma_supplements2 H A E A B C D A B A E K);eauto).
assert (OS C D B A) by (conclude lemma_samesideflip).
assert (Col A E B) by (conclude_def Col ).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq E B) by (forward_using lemma_betweennotequal).
assert (neq B E) by (conclude lemma_inequalitysymmetric).
assert (OS C D B E) by (conclude lemma_samesidecollinear).
assert (Out A H D) by (conclude lemma_ray4).
assert (Out A D H) by (conclude lemma_ray5).
assert (OS C H B E) by (conclude lemma_sameside2).
assert (Col E A B) by (forward_using lemma_collinearorder).
assert (OS H K E B) by (conclude lemma_samesidecollinear).
assert (OS H K B E) by (conclude lemma_samesideflip).
assert (OS C K B E) by (conclude lemma_samesidetransitive).
assert (OS K C B E) by (forward_using lemma_samesidesymmetric).
assert (Out B G C) by (conclude lemma_ray4).
assert (Out B C G) by (conclude lemma_ray5).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (Col B B E) by (conclude_def Col ).
assert (OS K G B E) by (conclude lemma_sameside2).
assert (OS K G E B) by (conclude lemma_samesideflip).
assert (Out B E A) by (conclude lemma_ray4).
assert (Out B A E) by (conclude lemma_ray5).
assert (CongA A E K E B G) by (conclude lemma_equalangleshelper).
assert (Par E K B G) by (conclude proposition_28D).
assert (Par E K G B) by (forward_using lemma_parallelflip).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists c, (BetS B C c /\\ Cong C c B C)) by (conclude lemma_extension);destruct Tf as [c];spliter.
assert (BetS c C B) by (conclude axiom_betweennesssymmetry).
assert (Par C D B A) by (forward_using lemma_parallelflip).
assert (RT D C B C B A) by (conclude proposition_29C).
assert (OS K F C G) by (conclude lemma_samesideflip).
assert (OS F K C G) by (forward_using lemma_samesidesymmetric).
assert (BetS C G B) by (conclude axiom_betweennesssymmetry).
assert (BetS c C G) by (conclude axiom_innertransitivity).
assert (RT F C G C G K) by (conclude proposition_29C).
assert (nCol D B C) by (forward_using lemma_parallelNC).
assert (nCol D C B) by (forward_using lemma_NCorder).
assert (CongA D C B D C B) by (conclude lemma_equalanglesreflexive).
assert (BetS C F D) by (conclude axiom_betweennesssymmetry).
assert (neq C F) by (forward_using lemma_betweennotequal).
assert (Out C F D) by (conclude lemma_ray4).
assert (Out C D F) by (conclude lemma_ray5).
assert (BetS C G B) by (conclude axiom_betweennesssymmetry).

*****
H94 : BetS C G B
H93 : Out C D F
H92 : Out C F D
H91 : neq C F
H90 : BetS C F D
H89 : CongA D C B D C B
H88 : nCol D C B
H87 : nCol D B C
H86 : RT F C G C G K
H85 : BetS c C G
H84 : BetS C G B
H83 : OS F K C G
H82 : OS K F C G
H81 : RT D C B C B A
H80 : Par C D B A
H79 : BetS c C B
H78 : Cong C c B C
H77 : BetS B C c
c : Point
H76 : neq B C
H75 : Par E K G B
H74 : Par E K B G
H73 : CongA A E K E B G
H72 : Out B A E
H71 : Out B E A
H70 : OS K G E B
H69 : OS K G B E
H68 : Col B B E
H67 : eq B B
H66 : Out B C G
H65 : Out B G C
H64 : OS K C B E
H63 : OS C K B E
H62 : OS H K B E
H61 : OS H K E B
H60 : Col E A B
H59 : OS C H B E
H58 : Out A D H
H57 : Out A H D
H56 : OS C D B E
H55 : neq B E
H54 : neq E B
H53 : Col B A E
H52 : Col A E B
H51 : OS C D B A
H50 : CongA A E K A B C
H49 : CongA H A E D A B
H48 : CongA E A H B A D
H47 : CongA E A H E A H
H46 : nCol E A H
H45 : nCol A H E
H44 : Out A H D
H43 : Out A E B
H42 : RT H A E A E K
H41 : OS H K A E
H40 : BetS e A E
H39 : BetS E A e
H38 : BetS B E A
H37 : RT D A B A B C
H36 : OS D C A B
H35 : BetS e A B
H34 : Cong A e B A
H33 : BetS B A e
e : Point
H32 : neq B A
H31 : neq A B
H30 : neq B G
H29 : neq A H
H28 : neq A E
H27 : OS K F G C
H26 : OS H K E A
H25 : OS C D A B
H24 : OS D A C B
H23 : OS A D C B
H22 : OS A D B C
H21 : TP B C A D
H20 : TP G C K F
H19 : TP E A H K
H18 : TP A B C D
H17 : Par A H E K
H16 : Par C D A B
H15 : Par B C A D
H14 : Par G C K F
H13 : Par C F G K
H12 : Par F C G K
H11 : Par G K F C
H10 : Par E K A H
H9 : Par E A H K
H8 : Par A B C D
H7 : Par A D B C
H6 : PG G K F C
H5 : PG E A H K
H4 : BetS B G C
H3 : BetS D F C
H2 : BetS A E B
H1 : BetS A H D
H0 : PG A B C D
A,B,C,D,E,F,G,H,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
PG E K G B
+++++
assert (neq C G) by (forward_using lemma_betweennotequal).
-----
Lemma proposition_43B : forall A B C D E F G H K, PG A B C D -> BetS A H D -> BetS A E B -> BetS D F C -> BetS B G C -> PG E A H K -> PG G K F C -> PG E K G B.
Proof.
intros.
assert (Par A D B C) by (conclude_def PG ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par E A H K) by (conclude_def PG ).
assert (Par E K A H) by (conclude_def PG ).
assert (Par G K F C) by (conclude_def PG ).
assert (Par F C G K) by (conclude lemma_parallelsymmetric).
assert (Par C F G K) by (forward_using lemma_parallelflip).
assert (Par G C K F) by (conclude_def PG ).
assert (Par B C A D) by (conclude lemma_parallelsymmetric).
assert (Par C D A B) by (conclude lemma_parallelsymmetric).
assert (Par A H E K) by (conclude lemma_parallelsymmetric).
assert (TP A B C D) by (conclude lemma_paralleldef2B).
assert (TP E A H K) by (conclude lemma_paralleldef2B).
assert (TP G C K F) by (conclude lemma_paralleldef2B).
assert (TP B C A D) by (conclude lemma_paralleldef2B).
assert (OS A D B C) by (conclude_def TP ).
assert (OS A D C B) by (conclude lemma_samesideflip).
assert (OS D A C B) by (forward_using lemma_samesidesymmetric).
assert (OS C D A B) by (conclude_def TP ).
assert (OS H K E A) by (conclude_def TP ).
assert (OS K F G C) by (conclude_def TP ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (neq A H) by (forward_using lemma_betweennotequal).
assert (neq B G) by (forward_using lemma_betweennotequal).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists e, (BetS B A e /\\ Cong A e B A)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (BetS e A B) by (conclude axiom_betweennesssymmetry).
assert (OS D C A B) by (forward_using lemma_samesidesymmetric).
assert (RT D A B A B C) by (conclude proposition_29C).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert (BetS E A e) by (conclude lemma_3_6a).
assert (BetS e A E) by (conclude axiom_betweennesssymmetry).
assert (OS H K A E) by (forward_using lemma_samesidesymmetric).
assert (RT H A E A E K) by (conclude proposition_29C).
assert (Out A E B) by (conclude lemma_ray4).
assert (Out A H D) by (conclude lemma_ray4).
assert (nCol A H E) by (forward_using lemma_parallelNC).
assert (nCol E A H) by (forward_using lemma_NCorder).
assert (CongA E A H E A H) by (conclude lemma_equalanglesreflexive).
assert (CongA E A H B A D) by (conclude lemma_equalangleshelper).
assert (CongA H A E D A B) by (conclude lemma_equalanglesflip).
assert (CongA A E K A B C) by (apply (lemma_supplements2 H A E A B C D A B A E K);eauto).
assert (OS C D B A) by (conclude lemma_samesideflip).
assert (Col A E B) by (conclude_def Col ).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq E B) by (forward_using lemma_betweennotequal).
assert (neq B E) by (conclude lemma_inequalitysymmetric).
assert (OS C D B E) by (conclude lemma_samesidecollinear).
assert (Out A H D) by (conclude lemma_ray4).
assert (Out A D H) by (conclude lemma_ray5).
assert (OS C H B E) by (conclude lemma_sameside2).
assert (Col E A B) by (forward_using lemma_collinearorder).
assert (OS H K E B) by (conclude lemma_samesidecollinear).
assert (OS H K B E) by (conclude lemma_samesideflip).
assert (OS C K B E) by (conclude lemma_samesidetransitive).
assert (OS K C B E) by (forward_using lemma_samesidesymmetric).
assert (Out B G C) by (conclude lemma_ray4).
assert (Out B C G) by (conclude lemma_ray5).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (Col B B E) by (conclude_def Col ).
assert (OS K G B E) by (conclude lemma_sameside2).
assert (OS K G E B) by (conclude lemma_samesideflip).
assert (Out B E A) by (conclude lemma_ray4).
assert (Out B A E) by (conclude lemma_ray5).
assert (CongA A E K E B G) by (conclude lemma_equalangleshelper).
assert (Par E K B G) by (conclude proposition_28D).
assert (Par E K G B) by (forward_using lemma_parallelflip).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists c, (BetS B C c /\\ Cong C c B C)) by (conclude lemma_extension);destruct Tf as [c];spliter.
assert (BetS c C B) by (conclude axiom_betweennesssymmetry).
assert (Par C D B A) by (forward_using lemma_parallelflip).
assert (RT D C B C B A) by (conclude proposition_29C).
assert (OS K F C G) by (conclude lemma_samesideflip).
assert (OS F K C G) by (forward_using lemma_samesidesymmetric).
assert (BetS C G B) by (conclude axiom_betweennesssymmetry).
assert (BetS c C G) by (conclude axiom_innertransitivity).
assert (RT F C G C G K) by (conclude proposition_29C).
assert (nCol D B C) by (forward_using lemma_parallelNC).
assert (nCol D C B) by (forward_using lemma_NCorder).
assert (CongA D C B D C B) by (conclude lemma_equalanglesreflexive).
assert (BetS C F D) by (conclude axiom_betweennesssymmetry).
assert (neq C F) by (forward_using lemma_betweennotequal).
assert (Out C F D) by (conclude lemma_ray4).
assert (Out C D F) by (conclude lemma_ray5).
assert (BetS C G B) by (conclude axiom_betweennesssymmetry).
assert (neq C G) by (forward_using lemma_betweennotequal).

*****
H95 : neq C G
H94 : BetS C G B
H93 : Out C D F
H92 : Out C F D
H91 : neq C F
H90 : BetS C F D
H89 : CongA D C B D C B
H88 : nCol D C B
H87 : nCol D B C
H86 : RT F C G C G K
H85 : BetS c C G
H84 : BetS C G B
H83 : OS F K C G
H82 : OS K F C G
H81 : RT D C B C B A
H80 : Par C D B A
H79 : BetS c C B
H78 : Cong C c B C
H77 : BetS B C c
c : Point
H76 : neq B C
H75 : Par E K G B
H74 : Par E K B G
H73 : CongA A E K E B G
H72 : Out B A E
H71 : Out B E A
H70 : OS K G E B
H69 : OS K G B E
H68 : Col B B E
H67 : eq B B
H66 : Out B C G
H65 : Out B G C
H64 : OS K C B E
H63 : OS C K B E
H62 : OS H K B E
H61 : OS H K E B
H60 : Col E A B
H59 : OS C H B E
H58 : Out A D H
H57 : Out A H D
H56 : OS C D B E
H55 : neq B E
H54 : neq E B
H53 : Col B A E
H52 : Col A E B
H51 : OS C D B A
H50 : CongA A E K A B C
H49 : CongA H A E D A B
H48 : CongA E A H B A D
H47 : CongA E A H E A H
H46 : nCol E A H
H45 : nCol A H E
H44 : Out A H D
H43 : Out A E B
H42 : RT H A E A E K
H41 : OS H K A E
H40 : BetS e A E
H39 : BetS E A e
H38 : BetS B E A
H37 : RT D A B A B C
H36 : OS D C A B
H35 : BetS e A B
H34 : Cong A e B A
H33 : BetS B A e
e : Point
H32 : neq B A
H31 : neq A B
H30 : neq B G
H29 : neq A H
H28 : neq A E
H27 : OS K F G C
H26 : OS H K E A
H25 : OS C D A B
H24 : OS D A C B
H23 : OS A D C B
H22 : OS A D B C
H21 : TP B C A D
H20 : TP G C K F
H19 : TP E A H K
H18 : TP A B C D
H17 : Par A H E K
H16 : Par C D A B
H15 : Par B C A D
H14 : Par G C K F
H13 : Par C F G K
H12 : Par F C G K
H11 : Par G K F C
H10 : Par E K A H
H9 : Par E A H K
H8 : Par A B C D
H7 : Par A D B C
H6 : PG G K F C
H5 : PG E A H K
H4 : BetS B G C
H3 : BetS D F C
H2 : BetS A E B
H1 : BetS A H D
H0 : PG A B C D
A,B,C,D,E,F,G,H,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
PG E K G B
+++++
assert (Out C G B) by (conclude lemma_ray4).
-----
Lemma proposition_43B : forall A B C D E F G H K, PG A B C D -> BetS A H D -> BetS A E B -> BetS D F C -> BetS B G C -> PG E A H K -> PG G K F C -> PG E K G B.
Proof.
intros.
assert (Par A D B C) by (conclude_def PG ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par E A H K) by (conclude_def PG ).
assert (Par E K A H) by (conclude_def PG ).
assert (Par G K F C) by (conclude_def PG ).
assert (Par F C G K) by (conclude lemma_parallelsymmetric).
assert (Par C F G K) by (forward_using lemma_parallelflip).
assert (Par G C K F) by (conclude_def PG ).
assert (Par B C A D) by (conclude lemma_parallelsymmetric).
assert (Par C D A B) by (conclude lemma_parallelsymmetric).
assert (Par A H E K) by (conclude lemma_parallelsymmetric).
assert (TP A B C D) by (conclude lemma_paralleldef2B).
assert (TP E A H K) by (conclude lemma_paralleldef2B).
assert (TP G C K F) by (conclude lemma_paralleldef2B).
assert (TP B C A D) by (conclude lemma_paralleldef2B).
assert (OS A D B C) by (conclude_def TP ).
assert (OS A D C B) by (conclude lemma_samesideflip).
assert (OS D A C B) by (forward_using lemma_samesidesymmetric).
assert (OS C D A B) by (conclude_def TP ).
assert (OS H K E A) by (conclude_def TP ).
assert (OS K F G C) by (conclude_def TP ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (neq A H) by (forward_using lemma_betweennotequal).
assert (neq B G) by (forward_using lemma_betweennotequal).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists e, (BetS B A e /\\ Cong A e B A)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (BetS e A B) by (conclude axiom_betweennesssymmetry).
assert (OS D C A B) by (forward_using lemma_samesidesymmetric).
assert (RT D A B A B C) by (conclude proposition_29C).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert (BetS E A e) by (conclude lemma_3_6a).
assert (BetS e A E) by (conclude axiom_betweennesssymmetry).
assert (OS H K A E) by (forward_using lemma_samesidesymmetric).
assert (RT H A E A E K) by (conclude proposition_29C).
assert (Out A E B) by (conclude lemma_ray4).
assert (Out A H D) by (conclude lemma_ray4).
assert (nCol A H E) by (forward_using lemma_parallelNC).
assert (nCol E A H) by (forward_using lemma_NCorder).
assert (CongA E A H E A H) by (conclude lemma_equalanglesreflexive).
assert (CongA E A H B A D) by (conclude lemma_equalangleshelper).
assert (CongA H A E D A B) by (conclude lemma_equalanglesflip).
assert (CongA A E K A B C) by (apply (lemma_supplements2 H A E A B C D A B A E K);eauto).
assert (OS C D B A) by (conclude lemma_samesideflip).
assert (Col A E B) by (conclude_def Col ).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq E B) by (forward_using lemma_betweennotequal).
assert (neq B E) by (conclude lemma_inequalitysymmetric).
assert (OS C D B E) by (conclude lemma_samesidecollinear).
assert (Out A H D) by (conclude lemma_ray4).
assert (Out A D H) by (conclude lemma_ray5).
assert (OS C H B E) by (conclude lemma_sameside2).
assert (Col E A B) by (forward_using lemma_collinearorder).
assert (OS H K E B) by (conclude lemma_samesidecollinear).
assert (OS H K B E) by (conclude lemma_samesideflip).
assert (OS C K B E) by (conclude lemma_samesidetransitive).
assert (OS K C B E) by (forward_using lemma_samesidesymmetric).
assert (Out B G C) by (conclude lemma_ray4).
assert (Out B C G) by (conclude lemma_ray5).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (Col B B E) by (conclude_def Col ).
assert (OS K G B E) by (conclude lemma_sameside2).
assert (OS K G E B) by (conclude lemma_samesideflip).
assert (Out B E A) by (conclude lemma_ray4).
assert (Out B A E) by (conclude lemma_ray5).
assert (CongA A E K E B G) by (conclude lemma_equalangleshelper).
assert (Par E K B G) by (conclude proposition_28D).
assert (Par E K G B) by (forward_using lemma_parallelflip).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists c, (BetS B C c /\\ Cong C c B C)) by (conclude lemma_extension);destruct Tf as [c];spliter.
assert (BetS c C B) by (conclude axiom_betweennesssymmetry).
assert (Par C D B A) by (forward_using lemma_parallelflip).
assert (RT D C B C B A) by (conclude proposition_29C).
assert (OS K F C G) by (conclude lemma_samesideflip).
assert (OS F K C G) by (forward_using lemma_samesidesymmetric).
assert (BetS C G B) by (conclude axiom_betweennesssymmetry).
assert (BetS c C G) by (conclude axiom_innertransitivity).
assert (RT F C G C G K) by (conclude proposition_29C).
assert (nCol D B C) by (forward_using lemma_parallelNC).
assert (nCol D C B) by (forward_using lemma_NCorder).
assert (CongA D C B D C B) by (conclude lemma_equalanglesreflexive).
assert (BetS C F D) by (conclude axiom_betweennesssymmetry).
assert (neq C F) by (forward_using lemma_betweennotequal).
assert (Out C F D) by (conclude lemma_ray4).
assert (Out C D F) by (conclude lemma_ray5).
assert (BetS C G B) by (conclude axiom_betweennesssymmetry).
assert (neq C G) by (forward_using lemma_betweennotequal).
assert (Out C G B) by (conclude lemma_ray4).

*****
H96 : Out C G B
H95 : neq C G
H94 : BetS C G B
H93 : Out C D F
H92 : Out C F D
H91 : neq C F
H90 : BetS C F D
H89 : CongA D C B D C B
H88 : nCol D C B
H87 : nCol D B C
H86 : RT F C G C G K
H85 : BetS c C G
H84 : BetS C G B
H83 : OS F K C G
H82 : OS K F C G
H81 : RT D C B C B A
H80 : Par C D B A
H79 : BetS c C B
H78 : Cong C c B C
H77 : BetS B C c
c : Point
H76 : neq B C
H75 : Par E K G B
H74 : Par E K B G
H73 : CongA A E K E B G
H72 : Out B A E
H71 : Out B E A
H70 : OS K G E B
H69 : OS K G B E
H68 : Col B B E
H67 : eq B B
H66 : Out B C G
H65 : Out B G C
H64 : OS K C B E
H63 : OS C K B E
H62 : OS H K B E
H61 : OS H K E B
H60 : Col E A B
H59 : OS C H B E
H58 : Out A D H
H57 : Out A H D
H56 : OS C D B E
H55 : neq B E
H54 : neq E B
H53 : Col B A E
H52 : Col A E B
H51 : OS C D B A
H50 : CongA A E K A B C
H49 : CongA H A E D A B
H48 : CongA E A H B A D
H47 : CongA E A H E A H
H46 : nCol E A H
H45 : nCol A H E
H44 : Out A H D
H43 : Out A E B
H42 : RT H A E A E K
H41 : OS H K A E
H40 : BetS e A E
H39 : BetS E A e
H38 : BetS B E A
H37 : RT D A B A B C
H36 : OS D C A B
H35 : BetS e A B
H34 : Cong A e B A
H33 : BetS B A e
e : Point
H32 : neq B A
H31 : neq A B
H30 : neq B G
H29 : neq A H
H28 : neq A E
H27 : OS K F G C
H26 : OS H K E A
H25 : OS C D A B
H24 : OS D A C B
H23 : OS A D C B
H22 : OS A D B C
H21 : TP B C A D
H20 : TP G C K F
H19 : TP E A H K
H18 : TP A B C D
H17 : Par A H E K
H16 : Par C D A B
H15 : Par B C A D
H14 : Par G C K F
H13 : Par C F G K
H12 : Par F C G K
H11 : Par G K F C
H10 : Par E K A H
H9 : Par E A H K
H8 : Par A B C D
H7 : Par A D B C
H6 : PG G K F C
H5 : PG E A H K
H4 : BetS B G C
H3 : BetS D F C
H2 : BetS A E B
H1 : BetS A H D
H0 : PG A B C D
A,B,C,D,E,F,G,H,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
PG E K G B
+++++
assert (Out C B G) by (conclude lemma_ray5).
-----
Lemma proposition_43B : forall A B C D E F G H K, PG A B C D -> BetS A H D -> BetS A E B -> BetS D F C -> BetS B G C -> PG E A H K -> PG G K F C -> PG E K G B.
Proof.
intros.
assert (Par A D B C) by (conclude_def PG ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par E A H K) by (conclude_def PG ).
assert (Par E K A H) by (conclude_def PG ).
assert (Par G K F C) by (conclude_def PG ).
assert (Par F C G K) by (conclude lemma_parallelsymmetric).
assert (Par C F G K) by (forward_using lemma_parallelflip).
assert (Par G C K F) by (conclude_def PG ).
assert (Par B C A D) by (conclude lemma_parallelsymmetric).
assert (Par C D A B) by (conclude lemma_parallelsymmetric).
assert (Par A H E K) by (conclude lemma_parallelsymmetric).
assert (TP A B C D) by (conclude lemma_paralleldef2B).
assert (TP E A H K) by (conclude lemma_paralleldef2B).
assert (TP G C K F) by (conclude lemma_paralleldef2B).
assert (TP B C A D) by (conclude lemma_paralleldef2B).
assert (OS A D B C) by (conclude_def TP ).
assert (OS A D C B) by (conclude lemma_samesideflip).
assert (OS D A C B) by (forward_using lemma_samesidesymmetric).
assert (OS C D A B) by (conclude_def TP ).
assert (OS H K E A) by (conclude_def TP ).
assert (OS K F G C) by (conclude_def TP ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (neq A H) by (forward_using lemma_betweennotequal).
assert (neq B G) by (forward_using lemma_betweennotequal).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists e, (BetS B A e /\\ Cong A e B A)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (BetS e A B) by (conclude axiom_betweennesssymmetry).
assert (OS D C A B) by (forward_using lemma_samesidesymmetric).
assert (RT D A B A B C) by (conclude proposition_29C).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert (BetS E A e) by (conclude lemma_3_6a).
assert (BetS e A E) by (conclude axiom_betweennesssymmetry).
assert (OS H K A E) by (forward_using lemma_samesidesymmetric).
assert (RT H A E A E K) by (conclude proposition_29C).
assert (Out A E B) by (conclude lemma_ray4).
assert (Out A H D) by (conclude lemma_ray4).
assert (nCol A H E) by (forward_using lemma_parallelNC).
assert (nCol E A H) by (forward_using lemma_NCorder).
assert (CongA E A H E A H) by (conclude lemma_equalanglesreflexive).
assert (CongA E A H B A D) by (conclude lemma_equalangleshelper).
assert (CongA H A E D A B) by (conclude lemma_equalanglesflip).
assert (CongA A E K A B C) by (apply (lemma_supplements2 H A E A B C D A B A E K);eauto).
assert (OS C D B A) by (conclude lemma_samesideflip).
assert (Col A E B) by (conclude_def Col ).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq E B) by (forward_using lemma_betweennotequal).
assert (neq B E) by (conclude lemma_inequalitysymmetric).
assert (OS C D B E) by (conclude lemma_samesidecollinear).
assert (Out A H D) by (conclude lemma_ray4).
assert (Out A D H) by (conclude lemma_ray5).
assert (OS C H B E) by (conclude lemma_sameside2).
assert (Col E A B) by (forward_using lemma_collinearorder).
assert (OS H K E B) by (conclude lemma_samesidecollinear).
assert (OS H K B E) by (conclude lemma_samesideflip).
assert (OS C K B E) by (conclude lemma_samesidetransitive).
assert (OS K C B E) by (forward_using lemma_samesidesymmetric).
assert (Out B G C) by (conclude lemma_ray4).
assert (Out B C G) by (conclude lemma_ray5).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (Col B B E) by (conclude_def Col ).
assert (OS K G B E) by (conclude lemma_sameside2).
assert (OS K G E B) by (conclude lemma_samesideflip).
assert (Out B E A) by (conclude lemma_ray4).
assert (Out B A E) by (conclude lemma_ray5).
assert (CongA A E K E B G) by (conclude lemma_equalangleshelper).
assert (Par E K B G) by (conclude proposition_28D).
assert (Par E K G B) by (forward_using lemma_parallelflip).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists c, (BetS B C c /\\ Cong C c B C)) by (conclude lemma_extension);destruct Tf as [c];spliter.
assert (BetS c C B) by (conclude axiom_betweennesssymmetry).
assert (Par C D B A) by (forward_using lemma_parallelflip).
assert (RT D C B C B A) by (conclude proposition_29C).
assert (OS K F C G) by (conclude lemma_samesideflip).
assert (OS F K C G) by (forward_using lemma_samesidesymmetric).
assert (BetS C G B) by (conclude axiom_betweennesssymmetry).
assert (BetS c C G) by (conclude axiom_innertransitivity).
assert (RT F C G C G K) by (conclude proposition_29C).
assert (nCol D B C) by (forward_using lemma_parallelNC).
assert (nCol D C B) by (forward_using lemma_NCorder).
assert (CongA D C B D C B) by (conclude lemma_equalanglesreflexive).
assert (BetS C F D) by (conclude axiom_betweennesssymmetry).
assert (neq C F) by (forward_using lemma_betweennotequal).
assert (Out C F D) by (conclude lemma_ray4).
assert (Out C D F) by (conclude lemma_ray5).
assert (BetS C G B) by (conclude axiom_betweennesssymmetry).
assert (neq C G) by (forward_using lemma_betweennotequal).
assert (Out C G B) by (conclude lemma_ray4).
assert (Out C B G) by (conclude lemma_ray5).

*****
H97 : Out C B G
H96 : Out C G B
H95 : neq C G
H94 : BetS C G B
H93 : Out C D F
H92 : Out C F D
H91 : neq C F
H90 : BetS C F D
H89 : CongA D C B D C B
H88 : nCol D C B
H87 : nCol D B C
H86 : RT F C G C G K
H85 : BetS c C G
H84 : BetS C G B
H83 : OS F K C G
H82 : OS K F C G
H81 : RT D C B C B A
H80 : Par C D B A
H79 : BetS c C B
H78 : Cong C c B C
H77 : BetS B C c
c : Point
H76 : neq B C
H75 : Par E K G B
H74 : Par E K B G
H73 : CongA A E K E B G
H72 : Out B A E
H71 : Out B E A
H70 : OS K G E B
H69 : OS K G B E
H68 : Col B B E
H67 : eq B B
H66 : Out B C G
H65 : Out B G C
H64 : OS K C B E
H63 : OS C K B E
H62 : OS H K B E
H61 : OS H K E B
H60 : Col E A B
H59 : OS C H B E
H58 : Out A D H
H57 : Out A H D
H56 : OS C D B E
H55 : neq B E
H54 : neq E B
H53 : Col B A E
H52 : Col A E B
H51 : OS C D B A
H50 : CongA A E K A B C
H49 : CongA H A E D A B
H48 : CongA E A H B A D
H47 : CongA E A H E A H
H46 : nCol E A H
H45 : nCol A H E
H44 : Out A H D
H43 : Out A E B
H42 : RT H A E A E K
H41 : OS H K A E
H40 : BetS e A E
H39 : BetS E A e
H38 : BetS B E A
H37 : RT D A B A B C
H36 : OS D C A B
H35 : BetS e A B
H34 : Cong A e B A
H33 : BetS B A e
e : Point
H32 : neq B A
H31 : neq A B
H30 : neq B G
H29 : neq A H
H28 : neq A E
H27 : OS K F G C
H26 : OS H K E A
H25 : OS C D A B
H24 : OS D A C B
H23 : OS A D C B
H22 : OS A D B C
H21 : TP B C A D
H20 : TP G C K F
H19 : TP E A H K
H18 : TP A B C D
H17 : Par A H E K
H16 : Par C D A B
H15 : Par B C A D
H14 : Par G C K F
H13 : Par C F G K
H12 : Par F C G K
H11 : Par G K F C
H10 : Par E K A H
H9 : Par E A H K
H8 : Par A B C D
H7 : Par A D B C
H6 : PG G K F C
H5 : PG E A H K
H4 : BetS B G C
H3 : BetS D F C
H2 : BetS A E B
H1 : BetS A H D
H0 : PG A B C D
A,B,C,D,E,F,G,H,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
PG E K G B
+++++
assert (CongA D C B F C G) by (conclude lemma_equalangleshelper).
-----
Lemma proposition_43B : forall A B C D E F G H K, PG A B C D -> BetS A H D -> BetS A E B -> BetS D F C -> BetS B G C -> PG E A H K -> PG G K F C -> PG E K G B.
Proof.
intros.
assert (Par A D B C) by (conclude_def PG ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par E A H K) by (conclude_def PG ).
assert (Par E K A H) by (conclude_def PG ).
assert (Par G K F C) by (conclude_def PG ).
assert (Par F C G K) by (conclude lemma_parallelsymmetric).
assert (Par C F G K) by (forward_using lemma_parallelflip).
assert (Par G C K F) by (conclude_def PG ).
assert (Par B C A D) by (conclude lemma_parallelsymmetric).
assert (Par C D A B) by (conclude lemma_parallelsymmetric).
assert (Par A H E K) by (conclude lemma_parallelsymmetric).
assert (TP A B C D) by (conclude lemma_paralleldef2B).
assert (TP E A H K) by (conclude lemma_paralleldef2B).
assert (TP G C K F) by (conclude lemma_paralleldef2B).
assert (TP B C A D) by (conclude lemma_paralleldef2B).
assert (OS A D B C) by (conclude_def TP ).
assert (OS A D C B) by (conclude lemma_samesideflip).
assert (OS D A C B) by (forward_using lemma_samesidesymmetric).
assert (OS C D A B) by (conclude_def TP ).
assert (OS H K E A) by (conclude_def TP ).
assert (OS K F G C) by (conclude_def TP ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (neq A H) by (forward_using lemma_betweennotequal).
assert (neq B G) by (forward_using lemma_betweennotequal).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists e, (BetS B A e /\\ Cong A e B A)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (BetS e A B) by (conclude axiom_betweennesssymmetry).
assert (OS D C A B) by (forward_using lemma_samesidesymmetric).
assert (RT D A B A B C) by (conclude proposition_29C).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert (BetS E A e) by (conclude lemma_3_6a).
assert (BetS e A E) by (conclude axiom_betweennesssymmetry).
assert (OS H K A E) by (forward_using lemma_samesidesymmetric).
assert (RT H A E A E K) by (conclude proposition_29C).
assert (Out A E B) by (conclude lemma_ray4).
assert (Out A H D) by (conclude lemma_ray4).
assert (nCol A H E) by (forward_using lemma_parallelNC).
assert (nCol E A H) by (forward_using lemma_NCorder).
assert (CongA E A H E A H) by (conclude lemma_equalanglesreflexive).
assert (CongA E A H B A D) by (conclude lemma_equalangleshelper).
assert (CongA H A E D A B) by (conclude lemma_equalanglesflip).
assert (CongA A E K A B C) by (apply (lemma_supplements2 H A E A B C D A B A E K);eauto).
assert (OS C D B A) by (conclude lemma_samesideflip).
assert (Col A E B) by (conclude_def Col ).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq E B) by (forward_using lemma_betweennotequal).
assert (neq B E) by (conclude lemma_inequalitysymmetric).
assert (OS C D B E) by (conclude lemma_samesidecollinear).
assert (Out A H D) by (conclude lemma_ray4).
assert (Out A D H) by (conclude lemma_ray5).
assert (OS C H B E) by (conclude lemma_sameside2).
assert (Col E A B) by (forward_using lemma_collinearorder).
assert (OS H K E B) by (conclude lemma_samesidecollinear).
assert (OS H K B E) by (conclude lemma_samesideflip).
assert (OS C K B E) by (conclude lemma_samesidetransitive).
assert (OS K C B E) by (forward_using lemma_samesidesymmetric).
assert (Out B G C) by (conclude lemma_ray4).
assert (Out B C G) by (conclude lemma_ray5).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (Col B B E) by (conclude_def Col ).
assert (OS K G B E) by (conclude lemma_sameside2).
assert (OS K G E B) by (conclude lemma_samesideflip).
assert (Out B E A) by (conclude lemma_ray4).
assert (Out B A E) by (conclude lemma_ray5).
assert (CongA A E K E B G) by (conclude lemma_equalangleshelper).
assert (Par E K B G) by (conclude proposition_28D).
assert (Par E K G B) by (forward_using lemma_parallelflip).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists c, (BetS B C c /\\ Cong C c B C)) by (conclude lemma_extension);destruct Tf as [c];spliter.
assert (BetS c C B) by (conclude axiom_betweennesssymmetry).
assert (Par C D B A) by (forward_using lemma_parallelflip).
assert (RT D C B C B A) by (conclude proposition_29C).
assert (OS K F C G) by (conclude lemma_samesideflip).
assert (OS F K C G) by (forward_using lemma_samesidesymmetric).
assert (BetS C G B) by (conclude axiom_betweennesssymmetry).
assert (BetS c C G) by (conclude axiom_innertransitivity).
assert (RT F C G C G K) by (conclude proposition_29C).
assert (nCol D B C) by (forward_using lemma_parallelNC).
assert (nCol D C B) by (forward_using lemma_NCorder).
assert (CongA D C B D C B) by (conclude lemma_equalanglesreflexive).
assert (BetS C F D) by (conclude axiom_betweennesssymmetry).
assert (neq C F) by (forward_using lemma_betweennotequal).
assert (Out C F D) by (conclude lemma_ray4).
assert (Out C D F) by (conclude lemma_ray5).
assert (BetS C G B) by (conclude axiom_betweennesssymmetry).
assert (neq C G) by (forward_using lemma_betweennotequal).
assert (Out C G B) by (conclude lemma_ray4).
assert (Out C B G) by (conclude lemma_ray5).
assert (CongA D C B F C G) by (conclude lemma_equalangleshelper).

*****
H98 : CongA D C B F C G
H97 : Out C B G
H96 : Out C G B
H95 : neq C G
H94 : BetS C G B
H93 : Out C D F
H92 : Out C F D
H91 : neq C F
H90 : BetS C F D
H89 : CongA D C B D C B
H88 : nCol D C B
H87 : nCol D B C
H86 : RT F C G C G K
H85 : BetS c C G
H84 : BetS C G B
H83 : OS F K C G
H82 : OS K F C G
H81 : RT D C B C B A
H80 : Par C D B A
H79 : BetS c C B
H78 : Cong C c B C
H77 : BetS B C c
c : Point
H76 : neq B C
H75 : Par E K G B
H74 : Par E K B G
H73 : CongA A E K E B G
H72 : Out B A E
H71 : Out B E A
H70 : OS K G E B
H69 : OS K G B E
H68 : Col B B E
H67 : eq B B
H66 : Out B C G
H65 : Out B G C
H64 : OS K C B E
H63 : OS C K B E
H62 : OS H K B E
H61 : OS H K E B
H60 : Col E A B
H59 : OS C H B E
H58 : Out A D H
H57 : Out A H D
H56 : OS C D B E
H55 : neq B E
H54 : neq E B
H53 : Col B A E
H52 : Col A E B
H51 : OS C D B A
H50 : CongA A E K A B C
H49 : CongA H A E D A B
H48 : CongA E A H B A D
H47 : CongA E A H E A H
H46 : nCol E A H
H45 : nCol A H E
H44 : Out A H D
H43 : Out A E B
H42 : RT H A E A E K
H41 : OS H K A E
H40 : BetS e A E
H39 : BetS E A e
H38 : BetS B E A
H37 : RT D A B A B C
H36 : OS D C A B
H35 : BetS e A B
H34 : Cong A e B A
H33 : BetS B A e
e : Point
H32 : neq B A
H31 : neq A B
H30 : neq B G
H29 : neq A H
H28 : neq A E
H27 : OS K F G C
H26 : OS H K E A
H25 : OS C D A B
H24 : OS D A C B
H23 : OS A D C B
H22 : OS A D B C
H21 : TP B C A D
H20 : TP G C K F
H19 : TP E A H K
H18 : TP A B C D
H17 : Par A H E K
H16 : Par C D A B
H15 : Par B C A D
H14 : Par G C K F
H13 : Par C F G K
H12 : Par F C G K
H11 : Par G K F C
H10 : Par E K A H
H9 : Par E A H K
H8 : Par A B C D
H7 : Par A D B C
H6 : PG G K F C
H5 : PG E A H K
H4 : BetS B G C
H3 : BetS D F C
H2 : BetS A E B
H1 : BetS A H D
H0 : PG A B C D
A,B,C,D,E,F,G,H,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
PG E K G B
+++++
assert (CongA C B A C G K) by (conclude (lemma_supplements2 D C B C G K F C G C B A)).
-----
Lemma proposition_43B : forall A B C D E F G H K, PG A B C D -> BetS A H D -> BetS A E B -> BetS D F C -> BetS B G C -> PG E A H K -> PG G K F C -> PG E K G B.
Proof.
intros.
assert (Par A D B C) by (conclude_def PG ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par E A H K) by (conclude_def PG ).
assert (Par E K A H) by (conclude_def PG ).
assert (Par G K F C) by (conclude_def PG ).
assert (Par F C G K) by (conclude lemma_parallelsymmetric).
assert (Par C F G K) by (forward_using lemma_parallelflip).
assert (Par G C K F) by (conclude_def PG ).
assert (Par B C A D) by (conclude lemma_parallelsymmetric).
assert (Par C D A B) by (conclude lemma_parallelsymmetric).
assert (Par A H E K) by (conclude lemma_parallelsymmetric).
assert (TP A B C D) by (conclude lemma_paralleldef2B).
assert (TP E A H K) by (conclude lemma_paralleldef2B).
assert (TP G C K F) by (conclude lemma_paralleldef2B).
assert (TP B C A D) by (conclude lemma_paralleldef2B).
assert (OS A D B C) by (conclude_def TP ).
assert (OS A D C B) by (conclude lemma_samesideflip).
assert (OS D A C B) by (forward_using lemma_samesidesymmetric).
assert (OS C D A B) by (conclude_def TP ).
assert (OS H K E A) by (conclude_def TP ).
assert (OS K F G C) by (conclude_def TP ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (neq A H) by (forward_using lemma_betweennotequal).
assert (neq B G) by (forward_using lemma_betweennotequal).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists e, (BetS B A e /\\ Cong A e B A)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (BetS e A B) by (conclude axiom_betweennesssymmetry).
assert (OS D C A B) by (forward_using lemma_samesidesymmetric).
assert (RT D A B A B C) by (conclude proposition_29C).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert (BetS E A e) by (conclude lemma_3_6a).
assert (BetS e A E) by (conclude axiom_betweennesssymmetry).
assert (OS H K A E) by (forward_using lemma_samesidesymmetric).
assert (RT H A E A E K) by (conclude proposition_29C).
assert (Out A E B) by (conclude lemma_ray4).
assert (Out A H D) by (conclude lemma_ray4).
assert (nCol A H E) by (forward_using lemma_parallelNC).
assert (nCol E A H) by (forward_using lemma_NCorder).
assert (CongA E A H E A H) by (conclude lemma_equalanglesreflexive).
assert (CongA E A H B A D) by (conclude lemma_equalangleshelper).
assert (CongA H A E D A B) by (conclude lemma_equalanglesflip).
assert (CongA A E K A B C) by (apply (lemma_supplements2 H A E A B C D A B A E K);eauto).
assert (OS C D B A) by (conclude lemma_samesideflip).
assert (Col A E B) by (conclude_def Col ).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq E B) by (forward_using lemma_betweennotequal).
assert (neq B E) by (conclude lemma_inequalitysymmetric).
assert (OS C D B E) by (conclude lemma_samesidecollinear).
assert (Out A H D) by (conclude lemma_ray4).
assert (Out A D H) by (conclude lemma_ray5).
assert (OS C H B E) by (conclude lemma_sameside2).
assert (Col E A B) by (forward_using lemma_collinearorder).
assert (OS H K E B) by (conclude lemma_samesidecollinear).
assert (OS H K B E) by (conclude lemma_samesideflip).
assert (OS C K B E) by (conclude lemma_samesidetransitive).
assert (OS K C B E) by (forward_using lemma_samesidesymmetric).
assert (Out B G C) by (conclude lemma_ray4).
assert (Out B C G) by (conclude lemma_ray5).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (Col B B E) by (conclude_def Col ).
assert (OS K G B E) by (conclude lemma_sameside2).
assert (OS K G E B) by (conclude lemma_samesideflip).
assert (Out B E A) by (conclude lemma_ray4).
assert (Out B A E) by (conclude lemma_ray5).
assert (CongA A E K E B G) by (conclude lemma_equalangleshelper).
assert (Par E K B G) by (conclude proposition_28D).
assert (Par E K G B) by (forward_using lemma_parallelflip).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists c, (BetS B C c /\\ Cong C c B C)) by (conclude lemma_extension);destruct Tf as [c];spliter.
assert (BetS c C B) by (conclude axiom_betweennesssymmetry).
assert (Par C D B A) by (forward_using lemma_parallelflip).
assert (RT D C B C B A) by (conclude proposition_29C).
assert (OS K F C G) by (conclude lemma_samesideflip).
assert (OS F K C G) by (forward_using lemma_samesidesymmetric).
assert (BetS C G B) by (conclude axiom_betweennesssymmetry).
assert (BetS c C G) by (conclude axiom_innertransitivity).
assert (RT F C G C G K) by (conclude proposition_29C).
assert (nCol D B C) by (forward_using lemma_parallelNC).
assert (nCol D C B) by (forward_using lemma_NCorder).
assert (CongA D C B D C B) by (conclude lemma_equalanglesreflexive).
assert (BetS C F D) by (conclude axiom_betweennesssymmetry).
assert (neq C F) by (forward_using lemma_betweennotequal).
assert (Out C F D) by (conclude lemma_ray4).
assert (Out C D F) by (conclude lemma_ray5).
assert (BetS C G B) by (conclude axiom_betweennesssymmetry).
assert (neq C G) by (forward_using lemma_betweennotequal).
assert (Out C G B) by (conclude lemma_ray4).
assert (Out C B G) by (conclude lemma_ray5).
assert (CongA D C B F C G) by (conclude lemma_equalangleshelper).
assert (CongA C B A C G K) by (conclude (lemma_supplements2 D C B C G K F C G C B A)).

*****
H99 : CongA C B A C G K
H98 : CongA D C B F C G
H97 : Out C B G
H96 : Out C G B
H95 : neq C G
H94 : BetS C G B
H93 : Out C D F
H92 : Out C F D
H91 : neq C F
H90 : BetS C F D
H89 : CongA D C B D C B
H88 : nCol D C B
H87 : nCol D B C
H86 : RT F C G C G K
H85 : BetS c C G
H84 : BetS C G B
H83 : OS F K C G
H82 : OS K F C G
H81 : RT D C B C B A
H80 : Par C D B A
H79 : BetS c C B
H78 : Cong C c B C
H77 : BetS B C c
c : Point
H76 : neq B C
H75 : Par E K G B
H74 : Par E K B G
H73 : CongA A E K E B G
H72 : Out B A E
H71 : Out B E A
H70 : OS K G E B
H69 : OS K G B E
H68 : Col B B E
H67 : eq B B
H66 : Out B C G
H65 : Out B G C
H64 : OS K C B E
H63 : OS C K B E
H62 : OS H K B E
H61 : OS H K E B
H60 : Col E A B
H59 : OS C H B E
H58 : Out A D H
H57 : Out A H D
H56 : OS C D B E
H55 : neq B E
H54 : neq E B
H53 : Col B A E
H52 : Col A E B
H51 : OS C D B A
H50 : CongA A E K A B C
H49 : CongA H A E D A B
H48 : CongA E A H B A D
H47 : CongA E A H E A H
H46 : nCol E A H
H45 : nCol A H E
H44 : Out A H D
H43 : Out A E B
H42 : RT H A E A E K
H41 : OS H K A E
H40 : BetS e A E
H39 : BetS E A e
H38 : BetS B E A
H37 : RT D A B A B C
H36 : OS D C A B
H35 : BetS e A B
H34 : Cong A e B A
H33 : BetS B A e
e : Point
H32 : neq B A
H31 : neq A B
H30 : neq B G
H29 : neq A H
H28 : neq A E
H27 : OS K F G C
H26 : OS H K E A
H25 : OS C D A B
H24 : OS D A C B
H23 : OS A D C B
H22 : OS A D B C
H21 : TP B C A D
H20 : TP G C K F
H19 : TP E A H K
H18 : TP A B C D
H17 : Par A H E K
H16 : Par C D A B
H15 : Par B C A D
H14 : Par G C K F
H13 : Par C F G K
H12 : Par F C G K
H11 : Par G K F C
H10 : Par E K A H
H9 : Par E A H K
H8 : Par A B C D
H7 : Par A D B C
H6 : PG G K F C
H5 : PG E A H K
H4 : BetS B G C
H3 : BetS D F C
H2 : BetS A E B
H1 : BetS A H D
H0 : PG A B C D
A,B,C,D,E,F,G,H,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
PG E K G B
+++++
assert (CongA C G K C B A) by (conclude lemma_equalanglessymmetric).
-----
Lemma proposition_43B : forall A B C D E F G H K, PG A B C D -> BetS A H D -> BetS A E B -> BetS D F C -> BetS B G C -> PG E A H K -> PG G K F C -> PG E K G B.
Proof.
intros.
assert (Par A D B C) by (conclude_def PG ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par E A H K) by (conclude_def PG ).
assert (Par E K A H) by (conclude_def PG ).
assert (Par G K F C) by (conclude_def PG ).
assert (Par F C G K) by (conclude lemma_parallelsymmetric).
assert (Par C F G K) by (forward_using lemma_parallelflip).
assert (Par G C K F) by (conclude_def PG ).
assert (Par B C A D) by (conclude lemma_parallelsymmetric).
assert (Par C D A B) by (conclude lemma_parallelsymmetric).
assert (Par A H E K) by (conclude lemma_parallelsymmetric).
assert (TP A B C D) by (conclude lemma_paralleldef2B).
assert (TP E A H K) by (conclude lemma_paralleldef2B).
assert (TP G C K F) by (conclude lemma_paralleldef2B).
assert (TP B C A D) by (conclude lemma_paralleldef2B).
assert (OS A D B C) by (conclude_def TP ).
assert (OS A D C B) by (conclude lemma_samesideflip).
assert (OS D A C B) by (forward_using lemma_samesidesymmetric).
assert (OS C D A B) by (conclude_def TP ).
assert (OS H K E A) by (conclude_def TP ).
assert (OS K F G C) by (conclude_def TP ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (neq A H) by (forward_using lemma_betweennotequal).
assert (neq B G) by (forward_using lemma_betweennotequal).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists e, (BetS B A e /\\ Cong A e B A)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (BetS e A B) by (conclude axiom_betweennesssymmetry).
assert (OS D C A B) by (forward_using lemma_samesidesymmetric).
assert (RT D A B A B C) by (conclude proposition_29C).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert (BetS E A e) by (conclude lemma_3_6a).
assert (BetS e A E) by (conclude axiom_betweennesssymmetry).
assert (OS H K A E) by (forward_using lemma_samesidesymmetric).
assert (RT H A E A E K) by (conclude proposition_29C).
assert (Out A E B) by (conclude lemma_ray4).
assert (Out A H D) by (conclude lemma_ray4).
assert (nCol A H E) by (forward_using lemma_parallelNC).
assert (nCol E A H) by (forward_using lemma_NCorder).
assert (CongA E A H E A H) by (conclude lemma_equalanglesreflexive).
assert (CongA E A H B A D) by (conclude lemma_equalangleshelper).
assert (CongA H A E D A B) by (conclude lemma_equalanglesflip).
assert (CongA A E K A B C) by (apply (lemma_supplements2 H A E A B C D A B A E K);eauto).
assert (OS C D B A) by (conclude lemma_samesideflip).
assert (Col A E B) by (conclude_def Col ).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq E B) by (forward_using lemma_betweennotequal).
assert (neq B E) by (conclude lemma_inequalitysymmetric).
assert (OS C D B E) by (conclude lemma_samesidecollinear).
assert (Out A H D) by (conclude lemma_ray4).
assert (Out A D H) by (conclude lemma_ray5).
assert (OS C H B E) by (conclude lemma_sameside2).
assert (Col E A B) by (forward_using lemma_collinearorder).
assert (OS H K E B) by (conclude lemma_samesidecollinear).
assert (OS H K B E) by (conclude lemma_samesideflip).
assert (OS C K B E) by (conclude lemma_samesidetransitive).
assert (OS K C B E) by (forward_using lemma_samesidesymmetric).
assert (Out B G C) by (conclude lemma_ray4).
assert (Out B C G) by (conclude lemma_ray5).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (Col B B E) by (conclude_def Col ).
assert (OS K G B E) by (conclude lemma_sameside2).
assert (OS K G E B) by (conclude lemma_samesideflip).
assert (Out B E A) by (conclude lemma_ray4).
assert (Out B A E) by (conclude lemma_ray5).
assert (CongA A E K E B G) by (conclude lemma_equalangleshelper).
assert (Par E K B G) by (conclude proposition_28D).
assert (Par E K G B) by (forward_using lemma_parallelflip).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists c, (BetS B C c /\\ Cong C c B C)) by (conclude lemma_extension);destruct Tf as [c];spliter.
assert (BetS c C B) by (conclude axiom_betweennesssymmetry).
assert (Par C D B A) by (forward_using lemma_parallelflip).
assert (RT D C B C B A) by (conclude proposition_29C).
assert (OS K F C G) by (conclude lemma_samesideflip).
assert (OS F K C G) by (forward_using lemma_samesidesymmetric).
assert (BetS C G B) by (conclude axiom_betweennesssymmetry).
assert (BetS c C G) by (conclude axiom_innertransitivity).
assert (RT F C G C G K) by (conclude proposition_29C).
assert (nCol D B C) by (forward_using lemma_parallelNC).
assert (nCol D C B) by (forward_using lemma_NCorder).
assert (CongA D C B D C B) by (conclude lemma_equalanglesreflexive).
assert (BetS C F D) by (conclude axiom_betweennesssymmetry).
assert (neq C F) by (forward_using lemma_betweennotequal).
assert (Out C F D) by (conclude lemma_ray4).
assert (Out C D F) by (conclude lemma_ray5).
assert (BetS C G B) by (conclude axiom_betweennesssymmetry).
assert (neq C G) by (forward_using lemma_betweennotequal).
assert (Out C G B) by (conclude lemma_ray4).
assert (Out C B G) by (conclude lemma_ray5).
assert (CongA D C B F C G) by (conclude lemma_equalangleshelper).
assert (CongA C B A C G K) by (conclude (lemma_supplements2 D C B C G K F C G C B A)).
assert (CongA C G K C B A) by (conclude lemma_equalanglessymmetric).

*****
H100 : CongA C G K C B A
H99 : CongA C B A C G K
H98 : CongA D C B F C G
H97 : Out C B G
H96 : Out C G B
H95 : neq C G
H94 : BetS C G B
H93 : Out C D F
H92 : Out C F D
H91 : neq C F
H90 : BetS C F D
H89 : CongA D C B D C B
H88 : nCol D C B
H87 : nCol D B C
H86 : RT F C G C G K
H85 : BetS c C G
H84 : BetS C G B
H83 : OS F K C G
H82 : OS K F C G
H81 : RT D C B C B A
H80 : Par C D B A
H79 : BetS c C B
H78 : Cong C c B C
H77 : BetS B C c
c : Point
H76 : neq B C
H75 : Par E K G B
H74 : Par E K B G
H73 : CongA A E K E B G
H72 : Out B A E
H71 : Out B E A
H70 : OS K G E B
H69 : OS K G B E
H68 : Col B B E
H67 : eq B B
H66 : Out B C G
H65 : Out B G C
H64 : OS K C B E
H63 : OS C K B E
H62 : OS H K B E
H61 : OS H K E B
H60 : Col E A B
H59 : OS C H B E
H58 : Out A D H
H57 : Out A H D
H56 : OS C D B E
H55 : neq B E
H54 : neq E B
H53 : Col B A E
H52 : Col A E B
H51 : OS C D B A
H50 : CongA A E K A B C
H49 : CongA H A E D A B
H48 : CongA E A H B A D
H47 : CongA E A H E A H
H46 : nCol E A H
H45 : nCol A H E
H44 : Out A H D
H43 : Out A E B
H42 : RT H A E A E K
H41 : OS H K A E
H40 : BetS e A E
H39 : BetS E A e
H38 : BetS B E A
H37 : RT D A B A B C
H36 : OS D C A B
H35 : BetS e A B
H34 : Cong A e B A
H33 : BetS B A e
e : Point
H32 : neq B A
H31 : neq A B
H30 : neq B G
H29 : neq A H
H28 : neq A E
H27 : OS K F G C
H26 : OS H K E A
H25 : OS C D A B
H24 : OS D A C B
H23 : OS A D C B
H22 : OS A D B C
H21 : TP B C A D
H20 : TP G C K F
H19 : TP E A H K
H18 : TP A B C D
H17 : Par A H E K
H16 : Par C D A B
H15 : Par B C A D
H14 : Par G C K F
H13 : Par C F G K
H12 : Par F C G K
H11 : Par G K F C
H10 : Par E K A H
H9 : Par E A H K
H8 : Par A B C D
H7 : Par A D B C
H6 : PG G K F C
H5 : PG E A H K
H4 : BetS B G C
H3 : BetS D F C
H2 : BetS A E B
H1 : BetS A H D
H0 : PG A B C D
A,B,C,D,E,F,G,H,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
PG E K G B
+++++
assert (eq A A) by (conclude cn_equalityreflexive).
-----
Lemma proposition_43B : forall A B C D E F G H K, PG A B C D -> BetS A H D -> BetS A E B -> BetS D F C -> BetS B G C -> PG E A H K -> PG G K F C -> PG E K G B.
Proof.
intros.
assert (Par A D B C) by (conclude_def PG ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par E A H K) by (conclude_def PG ).
assert (Par E K A H) by (conclude_def PG ).
assert (Par G K F C) by (conclude_def PG ).
assert (Par F C G K) by (conclude lemma_parallelsymmetric).
assert (Par C F G K) by (forward_using lemma_parallelflip).
assert (Par G C K F) by (conclude_def PG ).
assert (Par B C A D) by (conclude lemma_parallelsymmetric).
assert (Par C D A B) by (conclude lemma_parallelsymmetric).
assert (Par A H E K) by (conclude lemma_parallelsymmetric).
assert (TP A B C D) by (conclude lemma_paralleldef2B).
assert (TP E A H K) by (conclude lemma_paralleldef2B).
assert (TP G C K F) by (conclude lemma_paralleldef2B).
assert (TP B C A D) by (conclude lemma_paralleldef2B).
assert (OS A D B C) by (conclude_def TP ).
assert (OS A D C B) by (conclude lemma_samesideflip).
assert (OS D A C B) by (forward_using lemma_samesidesymmetric).
assert (OS C D A B) by (conclude_def TP ).
assert (OS H K E A) by (conclude_def TP ).
assert (OS K F G C) by (conclude_def TP ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (neq A H) by (forward_using lemma_betweennotequal).
assert (neq B G) by (forward_using lemma_betweennotequal).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists e, (BetS B A e /\\ Cong A e B A)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (BetS e A B) by (conclude axiom_betweennesssymmetry).
assert (OS D C A B) by (forward_using lemma_samesidesymmetric).
assert (RT D A B A B C) by (conclude proposition_29C).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert (BetS E A e) by (conclude lemma_3_6a).
assert (BetS e A E) by (conclude axiom_betweennesssymmetry).
assert (OS H K A E) by (forward_using lemma_samesidesymmetric).
assert (RT H A E A E K) by (conclude proposition_29C).
assert (Out A E B) by (conclude lemma_ray4).
assert (Out A H D) by (conclude lemma_ray4).
assert (nCol A H E) by (forward_using lemma_parallelNC).
assert (nCol E A H) by (forward_using lemma_NCorder).
assert (CongA E A H E A H) by (conclude lemma_equalanglesreflexive).
assert (CongA E A H B A D) by (conclude lemma_equalangleshelper).
assert (CongA H A E D A B) by (conclude lemma_equalanglesflip).
assert (CongA A E K A B C) by (apply (lemma_supplements2 H A E A B C D A B A E K);eauto).
assert (OS C D B A) by (conclude lemma_samesideflip).
assert (Col A E B) by (conclude_def Col ).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq E B) by (forward_using lemma_betweennotequal).
assert (neq B E) by (conclude lemma_inequalitysymmetric).
assert (OS C D B E) by (conclude lemma_samesidecollinear).
assert (Out A H D) by (conclude lemma_ray4).
assert (Out A D H) by (conclude lemma_ray5).
assert (OS C H B E) by (conclude lemma_sameside2).
assert (Col E A B) by (forward_using lemma_collinearorder).
assert (OS H K E B) by (conclude lemma_samesidecollinear).
assert (OS H K B E) by (conclude lemma_samesideflip).
assert (OS C K B E) by (conclude lemma_samesidetransitive).
assert (OS K C B E) by (forward_using lemma_samesidesymmetric).
assert (Out B G C) by (conclude lemma_ray4).
assert (Out B C G) by (conclude lemma_ray5).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (Col B B E) by (conclude_def Col ).
assert (OS K G B E) by (conclude lemma_sameside2).
assert (OS K G E B) by (conclude lemma_samesideflip).
assert (Out B E A) by (conclude lemma_ray4).
assert (Out B A E) by (conclude lemma_ray5).
assert (CongA A E K E B G) by (conclude lemma_equalangleshelper).
assert (Par E K B G) by (conclude proposition_28D).
assert (Par E K G B) by (forward_using lemma_parallelflip).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists c, (BetS B C c /\\ Cong C c B C)) by (conclude lemma_extension);destruct Tf as [c];spliter.
assert (BetS c C B) by (conclude axiom_betweennesssymmetry).
assert (Par C D B A) by (forward_using lemma_parallelflip).
assert (RT D C B C B A) by (conclude proposition_29C).
assert (OS K F C G) by (conclude lemma_samesideflip).
assert (OS F K C G) by (forward_using lemma_samesidesymmetric).
assert (BetS C G B) by (conclude axiom_betweennesssymmetry).
assert (BetS c C G) by (conclude axiom_innertransitivity).
assert (RT F C G C G K) by (conclude proposition_29C).
assert (nCol D B C) by (forward_using lemma_parallelNC).
assert (nCol D C B) by (forward_using lemma_NCorder).
assert (CongA D C B D C B) by (conclude lemma_equalanglesreflexive).
assert (BetS C F D) by (conclude axiom_betweennesssymmetry).
assert (neq C F) by (forward_using lemma_betweennotequal).
assert (Out C F D) by (conclude lemma_ray4).
assert (Out C D F) by (conclude lemma_ray5).
assert (BetS C G B) by (conclude axiom_betweennesssymmetry).
assert (neq C G) by (forward_using lemma_betweennotequal).
assert (Out C G B) by (conclude lemma_ray4).
assert (Out C B G) by (conclude lemma_ray5).
assert (CongA D C B F C G) by (conclude lemma_equalangleshelper).
assert (CongA C B A C G K) by (conclude (lemma_supplements2 D C B C G K F C G C B A)).
assert (CongA C G K C B A) by (conclude lemma_equalanglessymmetric).
assert (eq A A) by (conclude cn_equalityreflexive).

*****
H101 : eq A A
H100 : CongA C G K C B A
H99 : CongA C B A C G K
H98 : CongA D C B F C G
H97 : Out C B G
H96 : Out C G B
H95 : neq C G
H94 : BetS C G B
H93 : Out C D F
H92 : Out C F D
H91 : neq C F
H90 : BetS C F D
H89 : CongA D C B D C B
H88 : nCol D C B
H87 : nCol D B C
H86 : RT F C G C G K
H85 : BetS c C G
H84 : BetS C G B
H83 : OS F K C G
H82 : OS K F C G
H81 : RT D C B C B A
H80 : Par C D B A
H79 : BetS c C B
H78 : Cong C c B C
H77 : BetS B C c
c : Point
H76 : neq B C
H75 : Par E K G B
H74 : Par E K B G
H73 : CongA A E K E B G
H72 : Out B A E
H71 : Out B E A
H70 : OS K G E B
H69 : OS K G B E
H68 : Col B B E
H67 : eq B B
H66 : Out B C G
H65 : Out B G C
H64 : OS K C B E
H63 : OS C K B E
H62 : OS H K B E
H61 : OS H K E B
H60 : Col E A B
H59 : OS C H B E
H58 : Out A D H
H57 : Out A H D
H56 : OS C D B E
H55 : neq B E
H54 : neq E B
H53 : Col B A E
H52 : Col A E B
H51 : OS C D B A
H50 : CongA A E K A B C
H49 : CongA H A E D A B
H48 : CongA E A H B A D
H47 : CongA E A H E A H
H46 : nCol E A H
H45 : nCol A H E
H44 : Out A H D
H43 : Out A E B
H42 : RT H A E A E K
H41 : OS H K A E
H40 : BetS e A E
H39 : BetS E A e
H38 : BetS B E A
H37 : RT D A B A B C
H36 : OS D C A B
H35 : BetS e A B
H34 : Cong A e B A
H33 : BetS B A e
e : Point
H32 : neq B A
H31 : neq A B
H30 : neq B G
H29 : neq A H
H28 : neq A E
H27 : OS K F G C
H26 : OS H K E A
H25 : OS C D A B
H24 : OS D A C B
H23 : OS A D C B
H22 : OS A D B C
H21 : TP B C A D
H20 : TP G C K F
H19 : TP E A H K
H18 : TP A B C D
H17 : Par A H E K
H16 : Par C D A B
H15 : Par B C A D
H14 : Par G C K F
H13 : Par C F G K
H12 : Par F C G K
H11 : Par G K F C
H10 : Par E K A H
H9 : Par E A H K
H8 : Par A B C D
H7 : Par A D B C
H6 : PG G K F C
H5 : PG E A H K
H4 : BetS B G C
H3 : BetS D F C
H2 : BetS A E B
H1 : BetS A H D
H0 : PG A B C D
A,B,C,D,E,F,G,H,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
PG E K G B
+++++
assert (Out B A A) by (conclude lemma_ray4).
-----
Lemma proposition_43B : forall A B C D E F G H K, PG A B C D -> BetS A H D -> BetS A E B -> BetS D F C -> BetS B G C -> PG E A H K -> PG G K F C -> PG E K G B.
Proof.
intros.
assert (Par A D B C) by (conclude_def PG ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par E A H K) by (conclude_def PG ).
assert (Par E K A H) by (conclude_def PG ).
assert (Par G K F C) by (conclude_def PG ).
assert (Par F C G K) by (conclude lemma_parallelsymmetric).
assert (Par C F G K) by (forward_using lemma_parallelflip).
assert (Par G C K F) by (conclude_def PG ).
assert (Par B C A D) by (conclude lemma_parallelsymmetric).
assert (Par C D A B) by (conclude lemma_parallelsymmetric).
assert (Par A H E K) by (conclude lemma_parallelsymmetric).
assert (TP A B C D) by (conclude lemma_paralleldef2B).
assert (TP E A H K) by (conclude lemma_paralleldef2B).
assert (TP G C K F) by (conclude lemma_paralleldef2B).
assert (TP B C A D) by (conclude lemma_paralleldef2B).
assert (OS A D B C) by (conclude_def TP ).
assert (OS A D C B) by (conclude lemma_samesideflip).
assert (OS D A C B) by (forward_using lemma_samesidesymmetric).
assert (OS C D A B) by (conclude_def TP ).
assert (OS H K E A) by (conclude_def TP ).
assert (OS K F G C) by (conclude_def TP ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (neq A H) by (forward_using lemma_betweennotequal).
assert (neq B G) by (forward_using lemma_betweennotequal).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists e, (BetS B A e /\\ Cong A e B A)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (BetS e A B) by (conclude axiom_betweennesssymmetry).
assert (OS D C A B) by (forward_using lemma_samesidesymmetric).
assert (RT D A B A B C) by (conclude proposition_29C).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert (BetS E A e) by (conclude lemma_3_6a).
assert (BetS e A E) by (conclude axiom_betweennesssymmetry).
assert (OS H K A E) by (forward_using lemma_samesidesymmetric).
assert (RT H A E A E K) by (conclude proposition_29C).
assert (Out A E B) by (conclude lemma_ray4).
assert (Out A H D) by (conclude lemma_ray4).
assert (nCol A H E) by (forward_using lemma_parallelNC).
assert (nCol E A H) by (forward_using lemma_NCorder).
assert (CongA E A H E A H) by (conclude lemma_equalanglesreflexive).
assert (CongA E A H B A D) by (conclude lemma_equalangleshelper).
assert (CongA H A E D A B) by (conclude lemma_equalanglesflip).
assert (CongA A E K A B C) by (apply (lemma_supplements2 H A E A B C D A B A E K);eauto).
assert (OS C D B A) by (conclude lemma_samesideflip).
assert (Col A E B) by (conclude_def Col ).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq E B) by (forward_using lemma_betweennotequal).
assert (neq B E) by (conclude lemma_inequalitysymmetric).
assert (OS C D B E) by (conclude lemma_samesidecollinear).
assert (Out A H D) by (conclude lemma_ray4).
assert (Out A D H) by (conclude lemma_ray5).
assert (OS C H B E) by (conclude lemma_sameside2).
assert (Col E A B) by (forward_using lemma_collinearorder).
assert (OS H K E B) by (conclude lemma_samesidecollinear).
assert (OS H K B E) by (conclude lemma_samesideflip).
assert (OS C K B E) by (conclude lemma_samesidetransitive).
assert (OS K C B E) by (forward_using lemma_samesidesymmetric).
assert (Out B G C) by (conclude lemma_ray4).
assert (Out B C G) by (conclude lemma_ray5).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (Col B B E) by (conclude_def Col ).
assert (OS K G B E) by (conclude lemma_sameside2).
assert (OS K G E B) by (conclude lemma_samesideflip).
assert (Out B E A) by (conclude lemma_ray4).
assert (Out B A E) by (conclude lemma_ray5).
assert (CongA A E K E B G) by (conclude lemma_equalangleshelper).
assert (Par E K B G) by (conclude proposition_28D).
assert (Par E K G B) by (forward_using lemma_parallelflip).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists c, (BetS B C c /\\ Cong C c B C)) by (conclude lemma_extension);destruct Tf as [c];spliter.
assert (BetS c C B) by (conclude axiom_betweennesssymmetry).
assert (Par C D B A) by (forward_using lemma_parallelflip).
assert (RT D C B C B A) by (conclude proposition_29C).
assert (OS K F C G) by (conclude lemma_samesideflip).
assert (OS F K C G) by (forward_using lemma_samesidesymmetric).
assert (BetS C G B) by (conclude axiom_betweennesssymmetry).
assert (BetS c C G) by (conclude axiom_innertransitivity).
assert (RT F C G C G K) by (conclude proposition_29C).
assert (nCol D B C) by (forward_using lemma_parallelNC).
assert (nCol D C B) by (forward_using lemma_NCorder).
assert (CongA D C B D C B) by (conclude lemma_equalanglesreflexive).
assert (BetS C F D) by (conclude axiom_betweennesssymmetry).
assert (neq C F) by (forward_using lemma_betweennotequal).
assert (Out C F D) by (conclude lemma_ray4).
assert (Out C D F) by (conclude lemma_ray5).
assert (BetS C G B) by (conclude axiom_betweennesssymmetry).
assert (neq C G) by (forward_using lemma_betweennotequal).
assert (Out C G B) by (conclude lemma_ray4).
assert (Out C B G) by (conclude lemma_ray5).
assert (CongA D C B F C G) by (conclude lemma_equalangleshelper).
assert (CongA C B A C G K) by (conclude (lemma_supplements2 D C B C G K F C G C B A)).
assert (CongA C G K C B A) by (conclude lemma_equalanglessymmetric).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out B A A) by (conclude lemma_ray4).

*****
H102 : Out B A A
H101 : eq A A
H100 : CongA C G K C B A
H99 : CongA C B A C G K
H98 : CongA D C B F C G
H97 : Out C B G
H96 : Out C G B
H95 : neq C G
H94 : BetS C G B
H93 : Out C D F
H92 : Out C F D
H91 : neq C F
H90 : BetS C F D
H89 : CongA D C B D C B
H88 : nCol D C B
H87 : nCol D B C
H86 : RT F C G C G K
H85 : BetS c C G
H84 : BetS C G B
H83 : OS F K C G
H82 : OS K F C G
H81 : RT D C B C B A
H80 : Par C D B A
H79 : BetS c C B
H78 : Cong C c B C
H77 : BetS B C c
c : Point
H76 : neq B C
H75 : Par E K G B
H74 : Par E K B G
H73 : CongA A E K E B G
H72 : Out B A E
H71 : Out B E A
H70 : OS K G E B
H69 : OS K G B E
H68 : Col B B E
H67 : eq B B
H66 : Out B C G
H65 : Out B G C
H64 : OS K C B E
H63 : OS C K B E
H62 : OS H K B E
H61 : OS H K E B
H60 : Col E A B
H59 : OS C H B E
H58 : Out A D H
H57 : Out A H D
H56 : OS C D B E
H55 : neq B E
H54 : neq E B
H53 : Col B A E
H52 : Col A E B
H51 : OS C D B A
H50 : CongA A E K A B C
H49 : CongA H A E D A B
H48 : CongA E A H B A D
H47 : CongA E A H E A H
H46 : nCol E A H
H45 : nCol A H E
H44 : Out A H D
H43 : Out A E B
H42 : RT H A E A E K
H41 : OS H K A E
H40 : BetS e A E
H39 : BetS E A e
H38 : BetS B E A
H37 : RT D A B A B C
H36 : OS D C A B
H35 : BetS e A B
H34 : Cong A e B A
H33 : BetS B A e
e : Point
H32 : neq B A
H31 : neq A B
H30 : neq B G
H29 : neq A H
H28 : neq A E
H27 : OS K F G C
H26 : OS H K E A
H25 : OS C D A B
H24 : OS D A C B
H23 : OS A D C B
H22 : OS A D B C
H21 : TP B C A D
H20 : TP G C K F
H19 : TP E A H K
H18 : TP A B C D
H17 : Par A H E K
H16 : Par C D A B
H15 : Par B C A D
H14 : Par G C K F
H13 : Par C F G K
H12 : Par F C G K
H11 : Par G K F C
H10 : Par E K A H
H9 : Par E A H K
H8 : Par A B C D
H7 : Par A D B C
H6 : PG G K F C
H5 : PG E A H K
H4 : BetS B G C
H3 : BetS D F C
H2 : BetS A E B
H1 : BetS A H D
H0 : PG A B C D
A,B,C,D,E,F,G,H,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
PG E K G B
+++++
assert (neq B G) by (forward_using lemma_betweennotequal).
-----
Lemma proposition_43B : forall A B C D E F G H K, PG A B C D -> BetS A H D -> BetS A E B -> BetS D F C -> BetS B G C -> PG E A H K -> PG G K F C -> PG E K G B.
Proof.
intros.
assert (Par A D B C) by (conclude_def PG ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par E A H K) by (conclude_def PG ).
assert (Par E K A H) by (conclude_def PG ).
assert (Par G K F C) by (conclude_def PG ).
assert (Par F C G K) by (conclude lemma_parallelsymmetric).
assert (Par C F G K) by (forward_using lemma_parallelflip).
assert (Par G C K F) by (conclude_def PG ).
assert (Par B C A D) by (conclude lemma_parallelsymmetric).
assert (Par C D A B) by (conclude lemma_parallelsymmetric).
assert (Par A H E K) by (conclude lemma_parallelsymmetric).
assert (TP A B C D) by (conclude lemma_paralleldef2B).
assert (TP E A H K) by (conclude lemma_paralleldef2B).
assert (TP G C K F) by (conclude lemma_paralleldef2B).
assert (TP B C A D) by (conclude lemma_paralleldef2B).
assert (OS A D B C) by (conclude_def TP ).
assert (OS A D C B) by (conclude lemma_samesideflip).
assert (OS D A C B) by (forward_using lemma_samesidesymmetric).
assert (OS C D A B) by (conclude_def TP ).
assert (OS H K E A) by (conclude_def TP ).
assert (OS K F G C) by (conclude_def TP ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (neq A H) by (forward_using lemma_betweennotequal).
assert (neq B G) by (forward_using lemma_betweennotequal).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists e, (BetS B A e /\\ Cong A e B A)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (BetS e A B) by (conclude axiom_betweennesssymmetry).
assert (OS D C A B) by (forward_using lemma_samesidesymmetric).
assert (RT D A B A B C) by (conclude proposition_29C).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert (BetS E A e) by (conclude lemma_3_6a).
assert (BetS e A E) by (conclude axiom_betweennesssymmetry).
assert (OS H K A E) by (forward_using lemma_samesidesymmetric).
assert (RT H A E A E K) by (conclude proposition_29C).
assert (Out A E B) by (conclude lemma_ray4).
assert (Out A H D) by (conclude lemma_ray4).
assert (nCol A H E) by (forward_using lemma_parallelNC).
assert (nCol E A H) by (forward_using lemma_NCorder).
assert (CongA E A H E A H) by (conclude lemma_equalanglesreflexive).
assert (CongA E A H B A D) by (conclude lemma_equalangleshelper).
assert (CongA H A E D A B) by (conclude lemma_equalanglesflip).
assert (CongA A E K A B C) by (apply (lemma_supplements2 H A E A B C D A B A E K);eauto).
assert (OS C D B A) by (conclude lemma_samesideflip).
assert (Col A E B) by (conclude_def Col ).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq E B) by (forward_using lemma_betweennotequal).
assert (neq B E) by (conclude lemma_inequalitysymmetric).
assert (OS C D B E) by (conclude lemma_samesidecollinear).
assert (Out A H D) by (conclude lemma_ray4).
assert (Out A D H) by (conclude lemma_ray5).
assert (OS C H B E) by (conclude lemma_sameside2).
assert (Col E A B) by (forward_using lemma_collinearorder).
assert (OS H K E B) by (conclude lemma_samesidecollinear).
assert (OS H K B E) by (conclude lemma_samesideflip).
assert (OS C K B E) by (conclude lemma_samesidetransitive).
assert (OS K C B E) by (forward_using lemma_samesidesymmetric).
assert (Out B G C) by (conclude lemma_ray4).
assert (Out B C G) by (conclude lemma_ray5).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (Col B B E) by (conclude_def Col ).
assert (OS K G B E) by (conclude lemma_sameside2).
assert (OS K G E B) by (conclude lemma_samesideflip).
assert (Out B E A) by (conclude lemma_ray4).
assert (Out B A E) by (conclude lemma_ray5).
assert (CongA A E K E B G) by (conclude lemma_equalangleshelper).
assert (Par E K B G) by (conclude proposition_28D).
assert (Par E K G B) by (forward_using lemma_parallelflip).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists c, (BetS B C c /\\ Cong C c B C)) by (conclude lemma_extension);destruct Tf as [c];spliter.
assert (BetS c C B) by (conclude axiom_betweennesssymmetry).
assert (Par C D B A) by (forward_using lemma_parallelflip).
assert (RT D C B C B A) by (conclude proposition_29C).
assert (OS K F C G) by (conclude lemma_samesideflip).
assert (OS F K C G) by (forward_using lemma_samesidesymmetric).
assert (BetS C G B) by (conclude axiom_betweennesssymmetry).
assert (BetS c C G) by (conclude axiom_innertransitivity).
assert (RT F C G C G K) by (conclude proposition_29C).
assert (nCol D B C) by (forward_using lemma_parallelNC).
assert (nCol D C B) by (forward_using lemma_NCorder).
assert (CongA D C B D C B) by (conclude lemma_equalanglesreflexive).
assert (BetS C F D) by (conclude axiom_betweennesssymmetry).
assert (neq C F) by (forward_using lemma_betweennotequal).
assert (Out C F D) by (conclude lemma_ray4).
assert (Out C D F) by (conclude lemma_ray5).
assert (BetS C G B) by (conclude axiom_betweennesssymmetry).
assert (neq C G) by (forward_using lemma_betweennotequal).
assert (Out C G B) by (conclude lemma_ray4).
assert (Out C B G) by (conclude lemma_ray5).
assert (CongA D C B F C G) by (conclude lemma_equalangleshelper).
assert (CongA C B A C G K) by (conclude (lemma_supplements2 D C B C G K F C G C B A)).
assert (CongA C G K C B A) by (conclude lemma_equalanglessymmetric).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out B A A) by (conclude lemma_ray4).
assert (neq B G) by (forward_using lemma_betweennotequal).

*****
H103 : neq B G
H102 : Out B A A
H101 : eq A A
H100 : CongA C G K C B A
H99 : CongA C B A C G K
H98 : CongA D C B F C G
H97 : Out C B G
H96 : Out C G B
H95 : neq C G
H94 : BetS C G B
H93 : Out C D F
H92 : Out C F D
H91 : neq C F
H90 : BetS C F D
H89 : CongA D C B D C B
H88 : nCol D C B
H87 : nCol D B C
H86 : RT F C G C G K
H85 : BetS c C G
H84 : BetS C G B
H83 : OS F K C G
H82 : OS K F C G
H81 : RT D C B C B A
H80 : Par C D B A
H79 : BetS c C B
H78 : Cong C c B C
H77 : BetS B C c
c : Point
H76 : neq B C
H75 : Par E K G B
H74 : Par E K B G
H73 : CongA A E K E B G
H72 : Out B A E
H71 : Out B E A
H70 : OS K G E B
H69 : OS K G B E
H68 : Col B B E
H67 : eq B B
H66 : Out B C G
H65 : Out B G C
H64 : OS K C B E
H63 : OS C K B E
H62 : OS H K B E
H61 : OS H K E B
H60 : Col E A B
H59 : OS C H B E
H58 : Out A D H
H57 : Out A H D
H56 : OS C D B E
H55 : neq B E
H54 : neq E B
H53 : Col B A E
H52 : Col A E B
H51 : OS C D B A
H50 : CongA A E K A B C
H49 : CongA H A E D A B
H48 : CongA E A H B A D
H47 : CongA E A H E A H
H46 : nCol E A H
H45 : nCol A H E
H44 : Out A H D
H43 : Out A E B
H42 : RT H A E A E K
H41 : OS H K A E
H40 : BetS e A E
H39 : BetS E A e
H38 : BetS B E A
H37 : RT D A B A B C
H36 : OS D C A B
H35 : BetS e A B
H34 : Cong A e B A
H33 : BetS B A e
e : Point
H32 : neq B A
H31 : neq A B
H30 : neq B G
H29 : neq A H
H28 : neq A E
H27 : OS K F G C
H26 : OS H K E A
H25 : OS C D A B
H24 : OS D A C B
H23 : OS A D C B
H22 : OS A D B C
H21 : TP B C A D
H20 : TP G C K F
H19 : TP E A H K
H18 : TP A B C D
H17 : Par A H E K
H16 : Par C D A B
H15 : Par B C A D
H14 : Par G C K F
H13 : Par C F G K
H12 : Par F C G K
H11 : Par G K F C
H10 : Par E K A H
H9 : Par E A H K
H8 : Par A B C D
H7 : Par A D B C
H6 : PG G K F C
H5 : PG E A H K
H4 : BetS B G C
H3 : BetS D F C
H2 : BetS A E B
H1 : BetS A H D
H0 : PG A B C D
A,B,C,D,E,F,G,H,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
PG E K G B
+++++
assert (Out B G C) by (conclude lemma_ray4).
-----
Lemma proposition_43B : forall A B C D E F G H K, PG A B C D -> BetS A H D -> BetS A E B -> BetS D F C -> BetS B G C -> PG E A H K -> PG G K F C -> PG E K G B.
Proof.
intros.
assert (Par A D B C) by (conclude_def PG ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par E A H K) by (conclude_def PG ).
assert (Par E K A H) by (conclude_def PG ).
assert (Par G K F C) by (conclude_def PG ).
assert (Par F C G K) by (conclude lemma_parallelsymmetric).
assert (Par C F G K) by (forward_using lemma_parallelflip).
assert (Par G C K F) by (conclude_def PG ).
assert (Par B C A D) by (conclude lemma_parallelsymmetric).
assert (Par C D A B) by (conclude lemma_parallelsymmetric).
assert (Par A H E K) by (conclude lemma_parallelsymmetric).
assert (TP A B C D) by (conclude lemma_paralleldef2B).
assert (TP E A H K) by (conclude lemma_paralleldef2B).
assert (TP G C K F) by (conclude lemma_paralleldef2B).
assert (TP B C A D) by (conclude lemma_paralleldef2B).
assert (OS A D B C) by (conclude_def TP ).
assert (OS A D C B) by (conclude lemma_samesideflip).
assert (OS D A C B) by (forward_using lemma_samesidesymmetric).
assert (OS C D A B) by (conclude_def TP ).
assert (OS H K E A) by (conclude_def TP ).
assert (OS K F G C) by (conclude_def TP ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (neq A H) by (forward_using lemma_betweennotequal).
assert (neq B G) by (forward_using lemma_betweennotequal).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists e, (BetS B A e /\\ Cong A e B A)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (BetS e A B) by (conclude axiom_betweennesssymmetry).
assert (OS D C A B) by (forward_using lemma_samesidesymmetric).
assert (RT D A B A B C) by (conclude proposition_29C).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert (BetS E A e) by (conclude lemma_3_6a).
assert (BetS e A E) by (conclude axiom_betweennesssymmetry).
assert (OS H K A E) by (forward_using lemma_samesidesymmetric).
assert (RT H A E A E K) by (conclude proposition_29C).
assert (Out A E B) by (conclude lemma_ray4).
assert (Out A H D) by (conclude lemma_ray4).
assert (nCol A H E) by (forward_using lemma_parallelNC).
assert (nCol E A H) by (forward_using lemma_NCorder).
assert (CongA E A H E A H) by (conclude lemma_equalanglesreflexive).
assert (CongA E A H B A D) by (conclude lemma_equalangleshelper).
assert (CongA H A E D A B) by (conclude lemma_equalanglesflip).
assert (CongA A E K A B C) by (apply (lemma_supplements2 H A E A B C D A B A E K);eauto).
assert (OS C D B A) by (conclude lemma_samesideflip).
assert (Col A E B) by (conclude_def Col ).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq E B) by (forward_using lemma_betweennotequal).
assert (neq B E) by (conclude lemma_inequalitysymmetric).
assert (OS C D B E) by (conclude lemma_samesidecollinear).
assert (Out A H D) by (conclude lemma_ray4).
assert (Out A D H) by (conclude lemma_ray5).
assert (OS C H B E) by (conclude lemma_sameside2).
assert (Col E A B) by (forward_using lemma_collinearorder).
assert (OS H K E B) by (conclude lemma_samesidecollinear).
assert (OS H K B E) by (conclude lemma_samesideflip).
assert (OS C K B E) by (conclude lemma_samesidetransitive).
assert (OS K C B E) by (forward_using lemma_samesidesymmetric).
assert (Out B G C) by (conclude lemma_ray4).
assert (Out B C G) by (conclude lemma_ray5).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (Col B B E) by (conclude_def Col ).
assert (OS K G B E) by (conclude lemma_sameside2).
assert (OS K G E B) by (conclude lemma_samesideflip).
assert (Out B E A) by (conclude lemma_ray4).
assert (Out B A E) by (conclude lemma_ray5).
assert (CongA A E K E B G) by (conclude lemma_equalangleshelper).
assert (Par E K B G) by (conclude proposition_28D).
assert (Par E K G B) by (forward_using lemma_parallelflip).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists c, (BetS B C c /\\ Cong C c B C)) by (conclude lemma_extension);destruct Tf as [c];spliter.
assert (BetS c C B) by (conclude axiom_betweennesssymmetry).
assert (Par C D B A) by (forward_using lemma_parallelflip).
assert (RT D C B C B A) by (conclude proposition_29C).
assert (OS K F C G) by (conclude lemma_samesideflip).
assert (OS F K C G) by (forward_using lemma_samesidesymmetric).
assert (BetS C G B) by (conclude axiom_betweennesssymmetry).
assert (BetS c C G) by (conclude axiom_innertransitivity).
assert (RT F C G C G K) by (conclude proposition_29C).
assert (nCol D B C) by (forward_using lemma_parallelNC).
assert (nCol D C B) by (forward_using lemma_NCorder).
assert (CongA D C B D C B) by (conclude lemma_equalanglesreflexive).
assert (BetS C F D) by (conclude axiom_betweennesssymmetry).
assert (neq C F) by (forward_using lemma_betweennotequal).
assert (Out C F D) by (conclude lemma_ray4).
assert (Out C D F) by (conclude lemma_ray5).
assert (BetS C G B) by (conclude axiom_betweennesssymmetry).
assert (neq C G) by (forward_using lemma_betweennotequal).
assert (Out C G B) by (conclude lemma_ray4).
assert (Out C B G) by (conclude lemma_ray5).
assert (CongA D C B F C G) by (conclude lemma_equalangleshelper).
assert (CongA C B A C G K) by (conclude (lemma_supplements2 D C B C G K F C G C B A)).
assert (CongA C G K C B A) by (conclude lemma_equalanglessymmetric).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out B A A) by (conclude lemma_ray4).
assert (neq B G) by (forward_using lemma_betweennotequal).
assert (Out B G C) by (conclude lemma_ray4).

*****
H104 : Out B G C
H103 : neq B G
H102 : Out B A A
H101 : eq A A
H100 : CongA C G K C B A
H99 : CongA C B A C G K
H98 : CongA D C B F C G
H97 : Out C B G
H96 : Out C G B
H95 : neq C G
H94 : BetS C G B
H93 : Out C D F
H92 : Out C F D
H91 : neq C F
H90 : BetS C F D
H89 : CongA D C B D C B
H88 : nCol D C B
H87 : nCol D B C
H86 : RT F C G C G K
H85 : BetS c C G
H84 : BetS C G B
H83 : OS F K C G
H82 : OS K F C G
H81 : RT D C B C B A
H80 : Par C D B A
H79 : BetS c C B
H78 : Cong C c B C
H77 : BetS B C c
c : Point
H76 : neq B C
H75 : Par E K G B
H74 : Par E K B G
H73 : CongA A E K E B G
H72 : Out B A E
H71 : Out B E A
H70 : OS K G E B
H69 : OS K G B E
H68 : Col B B E
H67 : eq B B
H66 : Out B C G
H65 : Out B G C
H64 : OS K C B E
H63 : OS C K B E
H62 : OS H K B E
H61 : OS H K E B
H60 : Col E A B
H59 : OS C H B E
H58 : Out A D H
H57 : Out A H D
H56 : OS C D B E
H55 : neq B E
H54 : neq E B
H53 : Col B A E
H52 : Col A E B
H51 : OS C D B A
H50 : CongA A E K A B C
H49 : CongA H A E D A B
H48 : CongA E A H B A D
H47 : CongA E A H E A H
H46 : nCol E A H
H45 : nCol A H E
H44 : Out A H D
H43 : Out A E B
H42 : RT H A E A E K
H41 : OS H K A E
H40 : BetS e A E
H39 : BetS E A e
H38 : BetS B E A
H37 : RT D A B A B C
H36 : OS D C A B
H35 : BetS e A B
H34 : Cong A e B A
H33 : BetS B A e
e : Point
H32 : neq B A
H31 : neq A B
H30 : neq B G
H29 : neq A H
H28 : neq A E
H27 : OS K F G C
H26 : OS H K E A
H25 : OS C D A B
H24 : OS D A C B
H23 : OS A D C B
H22 : OS A D B C
H21 : TP B C A D
H20 : TP G C K F
H19 : TP E A H K
H18 : TP A B C D
H17 : Par A H E K
H16 : Par C D A B
H15 : Par B C A D
H14 : Par G C K F
H13 : Par C F G K
H12 : Par F C G K
H11 : Par G K F C
H10 : Par E K A H
H9 : Par E A H K
H8 : Par A B C D
H7 : Par A D B C
H6 : PG G K F C
H5 : PG E A H K
H4 : BetS B G C
H3 : BetS D F C
H2 : BetS A E B
H1 : BetS A H D
H0 : PG A B C D
A,B,C,D,E,F,G,H,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
PG E K G B
+++++
assert (Out B C G) by (conclude lemma_ray5).
-----
Lemma proposition_43B : forall A B C D E F G H K, PG A B C D -> BetS A H D -> BetS A E B -> BetS D F C -> BetS B G C -> PG E A H K -> PG G K F C -> PG E K G B.
Proof.
intros.
assert (Par A D B C) by (conclude_def PG ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par E A H K) by (conclude_def PG ).
assert (Par E K A H) by (conclude_def PG ).
assert (Par G K F C) by (conclude_def PG ).
assert (Par F C G K) by (conclude lemma_parallelsymmetric).
assert (Par C F G K) by (forward_using lemma_parallelflip).
assert (Par G C K F) by (conclude_def PG ).
assert (Par B C A D) by (conclude lemma_parallelsymmetric).
assert (Par C D A B) by (conclude lemma_parallelsymmetric).
assert (Par A H E K) by (conclude lemma_parallelsymmetric).
assert (TP A B C D) by (conclude lemma_paralleldef2B).
assert (TP E A H K) by (conclude lemma_paralleldef2B).
assert (TP G C K F) by (conclude lemma_paralleldef2B).
assert (TP B C A D) by (conclude lemma_paralleldef2B).
assert (OS A D B C) by (conclude_def TP ).
assert (OS A D C B) by (conclude lemma_samesideflip).
assert (OS D A C B) by (forward_using lemma_samesidesymmetric).
assert (OS C D A B) by (conclude_def TP ).
assert (OS H K E A) by (conclude_def TP ).
assert (OS K F G C) by (conclude_def TP ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (neq A H) by (forward_using lemma_betweennotequal).
assert (neq B G) by (forward_using lemma_betweennotequal).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists e, (BetS B A e /\\ Cong A e B A)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (BetS e A B) by (conclude axiom_betweennesssymmetry).
assert (OS D C A B) by (forward_using lemma_samesidesymmetric).
assert (RT D A B A B C) by (conclude proposition_29C).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert (BetS E A e) by (conclude lemma_3_6a).
assert (BetS e A E) by (conclude axiom_betweennesssymmetry).
assert (OS H K A E) by (forward_using lemma_samesidesymmetric).
assert (RT H A E A E K) by (conclude proposition_29C).
assert (Out A E B) by (conclude lemma_ray4).
assert (Out A H D) by (conclude lemma_ray4).
assert (nCol A H E) by (forward_using lemma_parallelNC).
assert (nCol E A H) by (forward_using lemma_NCorder).
assert (CongA E A H E A H) by (conclude lemma_equalanglesreflexive).
assert (CongA E A H B A D) by (conclude lemma_equalangleshelper).
assert (CongA H A E D A B) by (conclude lemma_equalanglesflip).
assert (CongA A E K A B C) by (apply (lemma_supplements2 H A E A B C D A B A E K);eauto).
assert (OS C D B A) by (conclude lemma_samesideflip).
assert (Col A E B) by (conclude_def Col ).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq E B) by (forward_using lemma_betweennotequal).
assert (neq B E) by (conclude lemma_inequalitysymmetric).
assert (OS C D B E) by (conclude lemma_samesidecollinear).
assert (Out A H D) by (conclude lemma_ray4).
assert (Out A D H) by (conclude lemma_ray5).
assert (OS C H B E) by (conclude lemma_sameside2).
assert (Col E A B) by (forward_using lemma_collinearorder).
assert (OS H K E B) by (conclude lemma_samesidecollinear).
assert (OS H K B E) by (conclude lemma_samesideflip).
assert (OS C K B E) by (conclude lemma_samesidetransitive).
assert (OS K C B E) by (forward_using lemma_samesidesymmetric).
assert (Out B G C) by (conclude lemma_ray4).
assert (Out B C G) by (conclude lemma_ray5).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (Col B B E) by (conclude_def Col ).
assert (OS K G B E) by (conclude lemma_sameside2).
assert (OS K G E B) by (conclude lemma_samesideflip).
assert (Out B E A) by (conclude lemma_ray4).
assert (Out B A E) by (conclude lemma_ray5).
assert (CongA A E K E B G) by (conclude lemma_equalangleshelper).
assert (Par E K B G) by (conclude proposition_28D).
assert (Par E K G B) by (forward_using lemma_parallelflip).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists c, (BetS B C c /\\ Cong C c B C)) by (conclude lemma_extension);destruct Tf as [c];spliter.
assert (BetS c C B) by (conclude axiom_betweennesssymmetry).
assert (Par C D B A) by (forward_using lemma_parallelflip).
assert (RT D C B C B A) by (conclude proposition_29C).
assert (OS K F C G) by (conclude lemma_samesideflip).
assert (OS F K C G) by (forward_using lemma_samesidesymmetric).
assert (BetS C G B) by (conclude axiom_betweennesssymmetry).
assert (BetS c C G) by (conclude axiom_innertransitivity).
assert (RT F C G C G K) by (conclude proposition_29C).
assert (nCol D B C) by (forward_using lemma_parallelNC).
assert (nCol D C B) by (forward_using lemma_NCorder).
assert (CongA D C B D C B) by (conclude lemma_equalanglesreflexive).
assert (BetS C F D) by (conclude axiom_betweennesssymmetry).
assert (neq C F) by (forward_using lemma_betweennotequal).
assert (Out C F D) by (conclude lemma_ray4).
assert (Out C D F) by (conclude lemma_ray5).
assert (BetS C G B) by (conclude axiom_betweennesssymmetry).
assert (neq C G) by (forward_using lemma_betweennotequal).
assert (Out C G B) by (conclude lemma_ray4).
assert (Out C B G) by (conclude lemma_ray5).
assert (CongA D C B F C G) by (conclude lemma_equalangleshelper).
assert (CongA C B A C G K) by (conclude (lemma_supplements2 D C B C G K F C G C B A)).
assert (CongA C G K C B A) by (conclude lemma_equalanglessymmetric).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out B A A) by (conclude lemma_ray4).
assert (neq B G) by (forward_using lemma_betweennotequal).
assert (Out B G C) by (conclude lemma_ray4).
assert (Out B C G) by (conclude lemma_ray5).

*****
H105 : Out B C G
H104 : Out B G C
H103 : neq B G
H102 : Out B A A
H101 : eq A A
H100 : CongA C G K C B A
H99 : CongA C B A C G K
H98 : CongA D C B F C G
H97 : Out C B G
H96 : Out C G B
H95 : neq C G
H94 : BetS C G B
H93 : Out C D F
H92 : Out C F D
H91 : neq C F
H90 : BetS C F D
H89 : CongA D C B D C B
H88 : nCol D C B
H87 : nCol D B C
H86 : RT F C G C G K
H85 : BetS c C G
H84 : BetS C G B
H83 : OS F K C G
H82 : OS K F C G
H81 : RT D C B C B A
H80 : Par C D B A
H79 : BetS c C B
H78 : Cong C c B C
H77 : BetS B C c
c : Point
H76 : neq B C
H75 : Par E K G B
H74 : Par E K B G
H73 : CongA A E K E B G
H72 : Out B A E
H71 : Out B E A
H70 : OS K G E B
H69 : OS K G B E
H68 : Col B B E
H67 : eq B B
H66 : Out B C G
H65 : Out B G C
H64 : OS K C B E
H63 : OS C K B E
H62 : OS H K B E
H61 : OS H K E B
H60 : Col E A B
H59 : OS C H B E
H58 : Out A D H
H57 : Out A H D
H56 : OS C D B E
H55 : neq B E
H54 : neq E B
H53 : Col B A E
H52 : Col A E B
H51 : OS C D B A
H50 : CongA A E K A B C
H49 : CongA H A E D A B
H48 : CongA E A H B A D
H47 : CongA E A H E A H
H46 : nCol E A H
H45 : nCol A H E
H44 : Out A H D
H43 : Out A E B
H42 : RT H A E A E K
H41 : OS H K A E
H40 : BetS e A E
H39 : BetS E A e
H38 : BetS B E A
H37 : RT D A B A B C
H36 : OS D C A B
H35 : BetS e A B
H34 : Cong A e B A
H33 : BetS B A e
e : Point
H32 : neq B A
H31 : neq A B
H30 : neq B G
H29 : neq A H
H28 : neq A E
H27 : OS K F G C
H26 : OS H K E A
H25 : OS C D A B
H24 : OS D A C B
H23 : OS A D C B
H22 : OS A D B C
H21 : TP B C A D
H20 : TP G C K F
H19 : TP E A H K
H18 : TP A B C D
H17 : Par A H E K
H16 : Par C D A B
H15 : Par B C A D
H14 : Par G C K F
H13 : Par C F G K
H12 : Par F C G K
H11 : Par G K F C
H10 : Par E K A H
H9 : Par E A H K
H8 : Par A B C D
H7 : Par A D B C
H6 : PG G K F C
H5 : PG E A H K
H4 : BetS B G C
H3 : BetS D F C
H2 : BetS A E B
H1 : BetS A H D
H0 : PG A B C D
A,B,C,D,E,F,G,H,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
PG E K G B
+++++
assert (CongA C G K G B A) by (conclude lemma_equalangleshelper).
-----
Lemma proposition_43B : forall A B C D E F G H K, PG A B C D -> BetS A H D -> BetS A E B -> BetS D F C -> BetS B G C -> PG E A H K -> PG G K F C -> PG E K G B.
Proof.
intros.
assert (Par A D B C) by (conclude_def PG ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par E A H K) by (conclude_def PG ).
assert (Par E K A H) by (conclude_def PG ).
assert (Par G K F C) by (conclude_def PG ).
assert (Par F C G K) by (conclude lemma_parallelsymmetric).
assert (Par C F G K) by (forward_using lemma_parallelflip).
assert (Par G C K F) by (conclude_def PG ).
assert (Par B C A D) by (conclude lemma_parallelsymmetric).
assert (Par C D A B) by (conclude lemma_parallelsymmetric).
assert (Par A H E K) by (conclude lemma_parallelsymmetric).
assert (TP A B C D) by (conclude lemma_paralleldef2B).
assert (TP E A H K) by (conclude lemma_paralleldef2B).
assert (TP G C K F) by (conclude lemma_paralleldef2B).
assert (TP B C A D) by (conclude lemma_paralleldef2B).
assert (OS A D B C) by (conclude_def TP ).
assert (OS A D C B) by (conclude lemma_samesideflip).
assert (OS D A C B) by (forward_using lemma_samesidesymmetric).
assert (OS C D A B) by (conclude_def TP ).
assert (OS H K E A) by (conclude_def TP ).
assert (OS K F G C) by (conclude_def TP ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (neq A H) by (forward_using lemma_betweennotequal).
assert (neq B G) by (forward_using lemma_betweennotequal).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists e, (BetS B A e /\\ Cong A e B A)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (BetS e A B) by (conclude axiom_betweennesssymmetry).
assert (OS D C A B) by (forward_using lemma_samesidesymmetric).
assert (RT D A B A B C) by (conclude proposition_29C).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert (BetS E A e) by (conclude lemma_3_6a).
assert (BetS e A E) by (conclude axiom_betweennesssymmetry).
assert (OS H K A E) by (forward_using lemma_samesidesymmetric).
assert (RT H A E A E K) by (conclude proposition_29C).
assert (Out A E B) by (conclude lemma_ray4).
assert (Out A H D) by (conclude lemma_ray4).
assert (nCol A H E) by (forward_using lemma_parallelNC).
assert (nCol E A H) by (forward_using lemma_NCorder).
assert (CongA E A H E A H) by (conclude lemma_equalanglesreflexive).
assert (CongA E A H B A D) by (conclude lemma_equalangleshelper).
assert (CongA H A E D A B) by (conclude lemma_equalanglesflip).
assert (CongA A E K A B C) by (apply (lemma_supplements2 H A E A B C D A B A E K);eauto).
assert (OS C D B A) by (conclude lemma_samesideflip).
assert (Col A E B) by (conclude_def Col ).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq E B) by (forward_using lemma_betweennotequal).
assert (neq B E) by (conclude lemma_inequalitysymmetric).
assert (OS C D B E) by (conclude lemma_samesidecollinear).
assert (Out A H D) by (conclude lemma_ray4).
assert (Out A D H) by (conclude lemma_ray5).
assert (OS C H B E) by (conclude lemma_sameside2).
assert (Col E A B) by (forward_using lemma_collinearorder).
assert (OS H K E B) by (conclude lemma_samesidecollinear).
assert (OS H K B E) by (conclude lemma_samesideflip).
assert (OS C K B E) by (conclude lemma_samesidetransitive).
assert (OS K C B E) by (forward_using lemma_samesidesymmetric).
assert (Out B G C) by (conclude lemma_ray4).
assert (Out B C G) by (conclude lemma_ray5).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (Col B B E) by (conclude_def Col ).
assert (OS K G B E) by (conclude lemma_sameside2).
assert (OS K G E B) by (conclude lemma_samesideflip).
assert (Out B E A) by (conclude lemma_ray4).
assert (Out B A E) by (conclude lemma_ray5).
assert (CongA A E K E B G) by (conclude lemma_equalangleshelper).
assert (Par E K B G) by (conclude proposition_28D).
assert (Par E K G B) by (forward_using lemma_parallelflip).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists c, (BetS B C c /\\ Cong C c B C)) by (conclude lemma_extension);destruct Tf as [c];spliter.
assert (BetS c C B) by (conclude axiom_betweennesssymmetry).
assert (Par C D B A) by (forward_using lemma_parallelflip).
assert (RT D C B C B A) by (conclude proposition_29C).
assert (OS K F C G) by (conclude lemma_samesideflip).
assert (OS F K C G) by (forward_using lemma_samesidesymmetric).
assert (BetS C G B) by (conclude axiom_betweennesssymmetry).
assert (BetS c C G) by (conclude axiom_innertransitivity).
assert (RT F C G C G K) by (conclude proposition_29C).
assert (nCol D B C) by (forward_using lemma_parallelNC).
assert (nCol D C B) by (forward_using lemma_NCorder).
assert (CongA D C B D C B) by (conclude lemma_equalanglesreflexive).
assert (BetS C F D) by (conclude axiom_betweennesssymmetry).
assert (neq C F) by (forward_using lemma_betweennotequal).
assert (Out C F D) by (conclude lemma_ray4).
assert (Out C D F) by (conclude lemma_ray5).
assert (BetS C G B) by (conclude axiom_betweennesssymmetry).
assert (neq C G) by (forward_using lemma_betweennotequal).
assert (Out C G B) by (conclude lemma_ray4).
assert (Out C B G) by (conclude lemma_ray5).
assert (CongA D C B F C G) by (conclude lemma_equalangleshelper).
assert (CongA C B A C G K) by (conclude (lemma_supplements2 D C B C G K F C G C B A)).
assert (CongA C G K C B A) by (conclude lemma_equalanglessymmetric).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out B A A) by (conclude lemma_ray4).
assert (neq B G) by (forward_using lemma_betweennotequal).
assert (Out B G C) by (conclude lemma_ray4).
assert (Out B C G) by (conclude lemma_ray5).
assert (CongA C G K G B A) by (conclude lemma_equalangleshelper).

*****
H106 : CongA C G K G B A
H105 : Out B C G
H104 : Out B G C
H103 : neq B G
H102 : Out B A A
H101 : eq A A
H100 : CongA C G K C B A
H99 : CongA C B A C G K
H98 : CongA D C B F C G
H97 : Out C B G
H96 : Out C G B
H95 : neq C G
H94 : BetS C G B
H93 : Out C D F
H92 : Out C F D
H91 : neq C F
H90 : BetS C F D
H89 : CongA D C B D C B
H88 : nCol D C B
H87 : nCol D B C
H86 : RT F C G C G K
H85 : BetS c C G
H84 : BetS C G B
H83 : OS F K C G
H82 : OS K F C G
H81 : RT D C B C B A
H80 : Par C D B A
H79 : BetS c C B
H78 : Cong C c B C
H77 : BetS B C c
c : Point
H76 : neq B C
H75 : Par E K G B
H74 : Par E K B G
H73 : CongA A E K E B G
H72 : Out B A E
H71 : Out B E A
H70 : OS K G E B
H69 : OS K G B E
H68 : Col B B E
H67 : eq B B
H66 : Out B C G
H65 : Out B G C
H64 : OS K C B E
H63 : OS C K B E
H62 : OS H K B E
H61 : OS H K E B
H60 : Col E A B
H59 : OS C H B E
H58 : Out A D H
H57 : Out A H D
H56 : OS C D B E
H55 : neq B E
H54 : neq E B
H53 : Col B A E
H52 : Col A E B
H51 : OS C D B A
H50 : CongA A E K A B C
H49 : CongA H A E D A B
H48 : CongA E A H B A D
H47 : CongA E A H E A H
H46 : nCol E A H
H45 : nCol A H E
H44 : Out A H D
H43 : Out A E B
H42 : RT H A E A E K
H41 : OS H K A E
H40 : BetS e A E
H39 : BetS E A e
H38 : BetS B E A
H37 : RT D A B A B C
H36 : OS D C A B
H35 : BetS e A B
H34 : Cong A e B A
H33 : BetS B A e
e : Point
H32 : neq B A
H31 : neq A B
H30 : neq B G
H29 : neq A H
H28 : neq A E
H27 : OS K F G C
H26 : OS H K E A
H25 : OS C D A B
H24 : OS D A C B
H23 : OS A D C B
H22 : OS A D B C
H21 : TP B C A D
H20 : TP G C K F
H19 : TP E A H K
H18 : TP A B C D
H17 : Par A H E K
H16 : Par C D A B
H15 : Par B C A D
H14 : Par G C K F
H13 : Par C F G K
H12 : Par F C G K
H11 : Par G K F C
H10 : Par E K A H
H9 : Par E A H K
H8 : Par A B C D
H7 : Par A D B C
H6 : PG G K F C
H5 : PG E A H K
H4 : BetS B G C
H3 : BetS D F C
H2 : BetS A E B
H1 : BetS A H D
H0 : PG A B C D
A,B,C,D,E,F,G,H,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
PG E K G B
+++++
assert (Col B G C) by (conclude_def Col ).
-----
Lemma proposition_43B : forall A B C D E F G H K, PG A B C D -> BetS A H D -> BetS A E B -> BetS D F C -> BetS B G C -> PG E A H K -> PG G K F C -> PG E K G B.
Proof.
intros.
assert (Par A D B C) by (conclude_def PG ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par E A H K) by (conclude_def PG ).
assert (Par E K A H) by (conclude_def PG ).
assert (Par G K F C) by (conclude_def PG ).
assert (Par F C G K) by (conclude lemma_parallelsymmetric).
assert (Par C F G K) by (forward_using lemma_parallelflip).
assert (Par G C K F) by (conclude_def PG ).
assert (Par B C A D) by (conclude lemma_parallelsymmetric).
assert (Par C D A B) by (conclude lemma_parallelsymmetric).
assert (Par A H E K) by (conclude lemma_parallelsymmetric).
assert (TP A B C D) by (conclude lemma_paralleldef2B).
assert (TP E A H K) by (conclude lemma_paralleldef2B).
assert (TP G C K F) by (conclude lemma_paralleldef2B).
assert (TP B C A D) by (conclude lemma_paralleldef2B).
assert (OS A D B C) by (conclude_def TP ).
assert (OS A D C B) by (conclude lemma_samesideflip).
assert (OS D A C B) by (forward_using lemma_samesidesymmetric).
assert (OS C D A B) by (conclude_def TP ).
assert (OS H K E A) by (conclude_def TP ).
assert (OS K F G C) by (conclude_def TP ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (neq A H) by (forward_using lemma_betweennotequal).
assert (neq B G) by (forward_using lemma_betweennotequal).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists e, (BetS B A e /\\ Cong A e B A)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (BetS e A B) by (conclude axiom_betweennesssymmetry).
assert (OS D C A B) by (forward_using lemma_samesidesymmetric).
assert (RT D A B A B C) by (conclude proposition_29C).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert (BetS E A e) by (conclude lemma_3_6a).
assert (BetS e A E) by (conclude axiom_betweennesssymmetry).
assert (OS H K A E) by (forward_using lemma_samesidesymmetric).
assert (RT H A E A E K) by (conclude proposition_29C).
assert (Out A E B) by (conclude lemma_ray4).
assert (Out A H D) by (conclude lemma_ray4).
assert (nCol A H E) by (forward_using lemma_parallelNC).
assert (nCol E A H) by (forward_using lemma_NCorder).
assert (CongA E A H E A H) by (conclude lemma_equalanglesreflexive).
assert (CongA E A H B A D) by (conclude lemma_equalangleshelper).
assert (CongA H A E D A B) by (conclude lemma_equalanglesflip).
assert (CongA A E K A B C) by (apply (lemma_supplements2 H A E A B C D A B A E K);eauto).
assert (OS C D B A) by (conclude lemma_samesideflip).
assert (Col A E B) by (conclude_def Col ).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq E B) by (forward_using lemma_betweennotequal).
assert (neq B E) by (conclude lemma_inequalitysymmetric).
assert (OS C D B E) by (conclude lemma_samesidecollinear).
assert (Out A H D) by (conclude lemma_ray4).
assert (Out A D H) by (conclude lemma_ray5).
assert (OS C H B E) by (conclude lemma_sameside2).
assert (Col E A B) by (forward_using lemma_collinearorder).
assert (OS H K E B) by (conclude lemma_samesidecollinear).
assert (OS H K B E) by (conclude lemma_samesideflip).
assert (OS C K B E) by (conclude lemma_samesidetransitive).
assert (OS K C B E) by (forward_using lemma_samesidesymmetric).
assert (Out B G C) by (conclude lemma_ray4).
assert (Out B C G) by (conclude lemma_ray5).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (Col B B E) by (conclude_def Col ).
assert (OS K G B E) by (conclude lemma_sameside2).
assert (OS K G E B) by (conclude lemma_samesideflip).
assert (Out B E A) by (conclude lemma_ray4).
assert (Out B A E) by (conclude lemma_ray5).
assert (CongA A E K E B G) by (conclude lemma_equalangleshelper).
assert (Par E K B G) by (conclude proposition_28D).
assert (Par E K G B) by (forward_using lemma_parallelflip).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists c, (BetS B C c /\\ Cong C c B C)) by (conclude lemma_extension);destruct Tf as [c];spliter.
assert (BetS c C B) by (conclude axiom_betweennesssymmetry).
assert (Par C D B A) by (forward_using lemma_parallelflip).
assert (RT D C B C B A) by (conclude proposition_29C).
assert (OS K F C G) by (conclude lemma_samesideflip).
assert (OS F K C G) by (forward_using lemma_samesidesymmetric).
assert (BetS C G B) by (conclude axiom_betweennesssymmetry).
assert (BetS c C G) by (conclude axiom_innertransitivity).
assert (RT F C G C G K) by (conclude proposition_29C).
assert (nCol D B C) by (forward_using lemma_parallelNC).
assert (nCol D C B) by (forward_using lemma_NCorder).
assert (CongA D C B D C B) by (conclude lemma_equalanglesreflexive).
assert (BetS C F D) by (conclude axiom_betweennesssymmetry).
assert (neq C F) by (forward_using lemma_betweennotequal).
assert (Out C F D) by (conclude lemma_ray4).
assert (Out C D F) by (conclude lemma_ray5).
assert (BetS C G B) by (conclude axiom_betweennesssymmetry).
assert (neq C G) by (forward_using lemma_betweennotequal).
assert (Out C G B) by (conclude lemma_ray4).
assert (Out C B G) by (conclude lemma_ray5).
assert (CongA D C B F C G) by (conclude lemma_equalangleshelper).
assert (CongA C B A C G K) by (conclude (lemma_supplements2 D C B C G K F C G C B A)).
assert (CongA C G K C B A) by (conclude lemma_equalanglessymmetric).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out B A A) by (conclude lemma_ray4).
assert (neq B G) by (forward_using lemma_betweennotequal).
assert (Out B G C) by (conclude lemma_ray4).
assert (Out B C G) by (conclude lemma_ray5).
assert (CongA C G K G B A) by (conclude lemma_equalangleshelper).
assert (Col B G C) by (conclude_def Col ).

*****
H107 : Col B G C
H106 : CongA C G K G B A
H105 : Out B C G
H104 : Out B G C
H103 : neq B G
H102 : Out B A A
H101 : eq A A
H100 : CongA C G K C B A
H99 : CongA C B A C G K
H98 : CongA D C B F C G
H97 : Out C B G
H96 : Out C G B
H95 : neq C G
H94 : BetS C G B
H93 : Out C D F
H92 : Out C F D
H91 : neq C F
H90 : BetS C F D
H89 : CongA D C B D C B
H88 : nCol D C B
H87 : nCol D B C
H86 : RT F C G C G K
H85 : BetS c C G
H84 : BetS C G B
H83 : OS F K C G
H82 : OS K F C G
H81 : RT D C B C B A
H80 : Par C D B A
H79 : BetS c C B
H78 : Cong C c B C
H77 : BetS B C c
c : Point
H76 : neq B C
H75 : Par E K G B
H74 : Par E K B G
H73 : CongA A E K E B G
H72 : Out B A E
H71 : Out B E A
H70 : OS K G E B
H69 : OS K G B E
H68 : Col B B E
H67 : eq B B
H66 : Out B C G
H65 : Out B G C
H64 : OS K C B E
H63 : OS C K B E
H62 : OS H K B E
H61 : OS H K E B
H60 : Col E A B
H59 : OS C H B E
H58 : Out A D H
H57 : Out A H D
H56 : OS C D B E
H55 : neq B E
H54 : neq E B
H53 : Col B A E
H52 : Col A E B
H51 : OS C D B A
H50 : CongA A E K A B C
H49 : CongA H A E D A B
H48 : CongA E A H B A D
H47 : CongA E A H E A H
H46 : nCol E A H
H45 : nCol A H E
H44 : Out A H D
H43 : Out A E B
H42 : RT H A E A E K
H41 : OS H K A E
H40 : BetS e A E
H39 : BetS E A e
H38 : BetS B E A
H37 : RT D A B A B C
H36 : OS D C A B
H35 : BetS e A B
H34 : Cong A e B A
H33 : BetS B A e
e : Point
H32 : neq B A
H31 : neq A B
H30 : neq B G
H29 : neq A H
H28 : neq A E
H27 : OS K F G C
H26 : OS H K E A
H25 : OS C D A B
H24 : OS D A C B
H23 : OS A D C B
H22 : OS A D B C
H21 : TP B C A D
H20 : TP G C K F
H19 : TP E A H K
H18 : TP A B C D
H17 : Par A H E K
H16 : Par C D A B
H15 : Par B C A D
H14 : Par G C K F
H13 : Par C F G K
H12 : Par F C G K
H11 : Par G K F C
H10 : Par E K A H
H9 : Par E A H K
H8 : Par A B C D
H7 : Par A D B C
H6 : PG G K F C
H5 : PG E A H K
H4 : BetS B G C
H3 : BetS D F C
H2 : BetS A E B
H1 : BetS A H D
H0 : PG A B C D
A,B,C,D,E,F,G,H,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
PG E K G B
+++++
assert (Col C B G) by (forward_using lemma_collinearorder).
-----
Lemma proposition_43B : forall A B C D E F G H K, PG A B C D -> BetS A H D -> BetS A E B -> BetS D F C -> BetS B G C -> PG E A H K -> PG G K F C -> PG E K G B.
Proof.
intros.
assert (Par A D B C) by (conclude_def PG ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par E A H K) by (conclude_def PG ).
assert (Par E K A H) by (conclude_def PG ).
assert (Par G K F C) by (conclude_def PG ).
assert (Par F C G K) by (conclude lemma_parallelsymmetric).
assert (Par C F G K) by (forward_using lemma_parallelflip).
assert (Par G C K F) by (conclude_def PG ).
assert (Par B C A D) by (conclude lemma_parallelsymmetric).
assert (Par C D A B) by (conclude lemma_parallelsymmetric).
assert (Par A H E K) by (conclude lemma_parallelsymmetric).
assert (TP A B C D) by (conclude lemma_paralleldef2B).
assert (TP E A H K) by (conclude lemma_paralleldef2B).
assert (TP G C K F) by (conclude lemma_paralleldef2B).
assert (TP B C A D) by (conclude lemma_paralleldef2B).
assert (OS A D B C) by (conclude_def TP ).
assert (OS A D C B) by (conclude lemma_samesideflip).
assert (OS D A C B) by (forward_using lemma_samesidesymmetric).
assert (OS C D A B) by (conclude_def TP ).
assert (OS H K E A) by (conclude_def TP ).
assert (OS K F G C) by (conclude_def TP ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (neq A H) by (forward_using lemma_betweennotequal).
assert (neq B G) by (forward_using lemma_betweennotequal).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists e, (BetS B A e /\\ Cong A e B A)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (BetS e A B) by (conclude axiom_betweennesssymmetry).
assert (OS D C A B) by (forward_using lemma_samesidesymmetric).
assert (RT D A B A B C) by (conclude proposition_29C).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert (BetS E A e) by (conclude lemma_3_6a).
assert (BetS e A E) by (conclude axiom_betweennesssymmetry).
assert (OS H K A E) by (forward_using lemma_samesidesymmetric).
assert (RT H A E A E K) by (conclude proposition_29C).
assert (Out A E B) by (conclude lemma_ray4).
assert (Out A H D) by (conclude lemma_ray4).
assert (nCol A H E) by (forward_using lemma_parallelNC).
assert (nCol E A H) by (forward_using lemma_NCorder).
assert (CongA E A H E A H) by (conclude lemma_equalanglesreflexive).
assert (CongA E A H B A D) by (conclude lemma_equalangleshelper).
assert (CongA H A E D A B) by (conclude lemma_equalanglesflip).
assert (CongA A E K A B C) by (apply (lemma_supplements2 H A E A B C D A B A E K);eauto).
assert (OS C D B A) by (conclude lemma_samesideflip).
assert (Col A E B) by (conclude_def Col ).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq E B) by (forward_using lemma_betweennotequal).
assert (neq B E) by (conclude lemma_inequalitysymmetric).
assert (OS C D B E) by (conclude lemma_samesidecollinear).
assert (Out A H D) by (conclude lemma_ray4).
assert (Out A D H) by (conclude lemma_ray5).
assert (OS C H B E) by (conclude lemma_sameside2).
assert (Col E A B) by (forward_using lemma_collinearorder).
assert (OS H K E B) by (conclude lemma_samesidecollinear).
assert (OS H K B E) by (conclude lemma_samesideflip).
assert (OS C K B E) by (conclude lemma_samesidetransitive).
assert (OS K C B E) by (forward_using lemma_samesidesymmetric).
assert (Out B G C) by (conclude lemma_ray4).
assert (Out B C G) by (conclude lemma_ray5).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (Col B B E) by (conclude_def Col ).
assert (OS K G B E) by (conclude lemma_sameside2).
assert (OS K G E B) by (conclude lemma_samesideflip).
assert (Out B E A) by (conclude lemma_ray4).
assert (Out B A E) by (conclude lemma_ray5).
assert (CongA A E K E B G) by (conclude lemma_equalangleshelper).
assert (Par E K B G) by (conclude proposition_28D).
assert (Par E K G B) by (forward_using lemma_parallelflip).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists c, (BetS B C c /\\ Cong C c B C)) by (conclude lemma_extension);destruct Tf as [c];spliter.
assert (BetS c C B) by (conclude axiom_betweennesssymmetry).
assert (Par C D B A) by (forward_using lemma_parallelflip).
assert (RT D C B C B A) by (conclude proposition_29C).
assert (OS K F C G) by (conclude lemma_samesideflip).
assert (OS F K C G) by (forward_using lemma_samesidesymmetric).
assert (BetS C G B) by (conclude axiom_betweennesssymmetry).
assert (BetS c C G) by (conclude axiom_innertransitivity).
assert (RT F C G C G K) by (conclude proposition_29C).
assert (nCol D B C) by (forward_using lemma_parallelNC).
assert (nCol D C B) by (forward_using lemma_NCorder).
assert (CongA D C B D C B) by (conclude lemma_equalanglesreflexive).
assert (BetS C F D) by (conclude axiom_betweennesssymmetry).
assert (neq C F) by (forward_using lemma_betweennotequal).
assert (Out C F D) by (conclude lemma_ray4).
assert (Out C D F) by (conclude lemma_ray5).
assert (BetS C G B) by (conclude axiom_betweennesssymmetry).
assert (neq C G) by (forward_using lemma_betweennotequal).
assert (Out C G B) by (conclude lemma_ray4).
assert (Out C B G) by (conclude lemma_ray5).
assert (CongA D C B F C G) by (conclude lemma_equalangleshelper).
assert (CongA C B A C G K) by (conclude (lemma_supplements2 D C B C G K F C G C B A)).
assert (CongA C G K C B A) by (conclude lemma_equalanglessymmetric).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out B A A) by (conclude lemma_ray4).
assert (neq B G) by (forward_using lemma_betweennotequal).
assert (Out B G C) by (conclude lemma_ray4).
assert (Out B C G) by (conclude lemma_ray5).
assert (CongA C G K G B A) by (conclude lemma_equalangleshelper).
assert (Col B G C) by (conclude_def Col ).
assert (Col C B G) by (forward_using lemma_collinearorder).

*****
H108 : Col C B G
H107 : Col B G C
H106 : CongA C G K G B A
H105 : Out B C G
H104 : Out B G C
H103 : neq B G
H102 : Out B A A
H101 : eq A A
H100 : CongA C G K C B A
H99 : CongA C B A C G K
H98 : CongA D C B F C G
H97 : Out C B G
H96 : Out C G B
H95 : neq C G
H94 : BetS C G B
H93 : Out C D F
H92 : Out C F D
H91 : neq C F
H90 : BetS C F D
H89 : CongA D C B D C B
H88 : nCol D C B
H87 : nCol D B C
H86 : RT F C G C G K
H85 : BetS c C G
H84 : BetS C G B
H83 : OS F K C G
H82 : OS K F C G
H81 : RT D C B C B A
H80 : Par C D B A
H79 : BetS c C B
H78 : Cong C c B C
H77 : BetS B C c
c : Point
H76 : neq B C
H75 : Par E K G B
H74 : Par E K B G
H73 : CongA A E K E B G
H72 : Out B A E
H71 : Out B E A
H70 : OS K G E B
H69 : OS K G B E
H68 : Col B B E
H67 : eq B B
H66 : Out B C G
H65 : Out B G C
H64 : OS K C B E
H63 : OS C K B E
H62 : OS H K B E
H61 : OS H K E B
H60 : Col E A B
H59 : OS C H B E
H58 : Out A D H
H57 : Out A H D
H56 : OS C D B E
H55 : neq B E
H54 : neq E B
H53 : Col B A E
H52 : Col A E B
H51 : OS C D B A
H50 : CongA A E K A B C
H49 : CongA H A E D A B
H48 : CongA E A H B A D
H47 : CongA E A H E A H
H46 : nCol E A H
H45 : nCol A H E
H44 : Out A H D
H43 : Out A E B
H42 : RT H A E A E K
H41 : OS H K A E
H40 : BetS e A E
H39 : BetS E A e
H38 : BetS B E A
H37 : RT D A B A B C
H36 : OS D C A B
H35 : BetS e A B
H34 : Cong A e B A
H33 : BetS B A e
e : Point
H32 : neq B A
H31 : neq A B
H30 : neq B G
H29 : neq A H
H28 : neq A E
H27 : OS K F G C
H26 : OS H K E A
H25 : OS C D A B
H24 : OS D A C B
H23 : OS A D C B
H22 : OS A D B C
H21 : TP B C A D
H20 : TP G C K F
H19 : TP E A H K
H18 : TP A B C D
H17 : Par A H E K
H16 : Par C D A B
H15 : Par B C A D
H14 : Par G C K F
H13 : Par C F G K
H12 : Par F C G K
H11 : Par G K F C
H10 : Par E K A H
H9 : Par E A H K
H8 : Par A B C D
H7 : Par A D B C
H6 : PG G K F C
H5 : PG E A H K
H4 : BetS B G C
H3 : BetS D F C
H2 : BetS A E B
H1 : BetS A H D
H0 : PG A B C D
A,B,C,D,E,F,G,H,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
PG E K G B
+++++
assert (BetS C F D) by (conclude axiom_betweennesssymmetry).
-----
Lemma proposition_43B : forall A B C D E F G H K, PG A B C D -> BetS A H D -> BetS A E B -> BetS D F C -> BetS B G C -> PG E A H K -> PG G K F C -> PG E K G B.
Proof.
intros.
assert (Par A D B C) by (conclude_def PG ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par E A H K) by (conclude_def PG ).
assert (Par E K A H) by (conclude_def PG ).
assert (Par G K F C) by (conclude_def PG ).
assert (Par F C G K) by (conclude lemma_parallelsymmetric).
assert (Par C F G K) by (forward_using lemma_parallelflip).
assert (Par G C K F) by (conclude_def PG ).
assert (Par B C A D) by (conclude lemma_parallelsymmetric).
assert (Par C D A B) by (conclude lemma_parallelsymmetric).
assert (Par A H E K) by (conclude lemma_parallelsymmetric).
assert (TP A B C D) by (conclude lemma_paralleldef2B).
assert (TP E A H K) by (conclude lemma_paralleldef2B).
assert (TP G C K F) by (conclude lemma_paralleldef2B).
assert (TP B C A D) by (conclude lemma_paralleldef2B).
assert (OS A D B C) by (conclude_def TP ).
assert (OS A D C B) by (conclude lemma_samesideflip).
assert (OS D A C B) by (forward_using lemma_samesidesymmetric).
assert (OS C D A B) by (conclude_def TP ).
assert (OS H K E A) by (conclude_def TP ).
assert (OS K F G C) by (conclude_def TP ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (neq A H) by (forward_using lemma_betweennotequal).
assert (neq B G) by (forward_using lemma_betweennotequal).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists e, (BetS B A e /\\ Cong A e B A)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (BetS e A B) by (conclude axiom_betweennesssymmetry).
assert (OS D C A B) by (forward_using lemma_samesidesymmetric).
assert (RT D A B A B C) by (conclude proposition_29C).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert (BetS E A e) by (conclude lemma_3_6a).
assert (BetS e A E) by (conclude axiom_betweennesssymmetry).
assert (OS H K A E) by (forward_using lemma_samesidesymmetric).
assert (RT H A E A E K) by (conclude proposition_29C).
assert (Out A E B) by (conclude lemma_ray4).
assert (Out A H D) by (conclude lemma_ray4).
assert (nCol A H E) by (forward_using lemma_parallelNC).
assert (nCol E A H) by (forward_using lemma_NCorder).
assert (CongA E A H E A H) by (conclude lemma_equalanglesreflexive).
assert (CongA E A H B A D) by (conclude lemma_equalangleshelper).
assert (CongA H A E D A B) by (conclude lemma_equalanglesflip).
assert (CongA A E K A B C) by (apply (lemma_supplements2 H A E A B C D A B A E K);eauto).
assert (OS C D B A) by (conclude lemma_samesideflip).
assert (Col A E B) by (conclude_def Col ).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq E B) by (forward_using lemma_betweennotequal).
assert (neq B E) by (conclude lemma_inequalitysymmetric).
assert (OS C D B E) by (conclude lemma_samesidecollinear).
assert (Out A H D) by (conclude lemma_ray4).
assert (Out A D H) by (conclude lemma_ray5).
assert (OS C H B E) by (conclude lemma_sameside2).
assert (Col E A B) by (forward_using lemma_collinearorder).
assert (OS H K E B) by (conclude lemma_samesidecollinear).
assert (OS H K B E) by (conclude lemma_samesideflip).
assert (OS C K B E) by (conclude lemma_samesidetransitive).
assert (OS K C B E) by (forward_using lemma_samesidesymmetric).
assert (Out B G C) by (conclude lemma_ray4).
assert (Out B C G) by (conclude lemma_ray5).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (Col B B E) by (conclude_def Col ).
assert (OS K G B E) by (conclude lemma_sameside2).
assert (OS K G E B) by (conclude lemma_samesideflip).
assert (Out B E A) by (conclude lemma_ray4).
assert (Out B A E) by (conclude lemma_ray5).
assert (CongA A E K E B G) by (conclude lemma_equalangleshelper).
assert (Par E K B G) by (conclude proposition_28D).
assert (Par E K G B) by (forward_using lemma_parallelflip).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists c, (BetS B C c /\\ Cong C c B C)) by (conclude lemma_extension);destruct Tf as [c];spliter.
assert (BetS c C B) by (conclude axiom_betweennesssymmetry).
assert (Par C D B A) by (forward_using lemma_parallelflip).
assert (RT D C B C B A) by (conclude proposition_29C).
assert (OS K F C G) by (conclude lemma_samesideflip).
assert (OS F K C G) by (forward_using lemma_samesidesymmetric).
assert (BetS C G B) by (conclude axiom_betweennesssymmetry).
assert (BetS c C G) by (conclude axiom_innertransitivity).
assert (RT F C G C G K) by (conclude proposition_29C).
assert (nCol D B C) by (forward_using lemma_parallelNC).
assert (nCol D C B) by (forward_using lemma_NCorder).
assert (CongA D C B D C B) by (conclude lemma_equalanglesreflexive).
assert (BetS C F D) by (conclude axiom_betweennesssymmetry).
assert (neq C F) by (forward_using lemma_betweennotequal).
assert (Out C F D) by (conclude lemma_ray4).
assert (Out C D F) by (conclude lemma_ray5).
assert (BetS C G B) by (conclude axiom_betweennesssymmetry).
assert (neq C G) by (forward_using lemma_betweennotequal).
assert (Out C G B) by (conclude lemma_ray4).
assert (Out C B G) by (conclude lemma_ray5).
assert (CongA D C B F C G) by (conclude lemma_equalangleshelper).
assert (CongA C B A C G K) by (conclude (lemma_supplements2 D C B C G K F C G C B A)).
assert (CongA C G K C B A) by (conclude lemma_equalanglessymmetric).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out B A A) by (conclude lemma_ray4).
assert (neq B G) by (forward_using lemma_betweennotequal).
assert (Out B G C) by (conclude lemma_ray4).
assert (Out B C G) by (conclude lemma_ray5).
assert (CongA C G K G B A) by (conclude lemma_equalangleshelper).
assert (Col B G C) by (conclude_def Col ).
assert (Col C B G) by (forward_using lemma_collinearorder).
assert (BetS C F D) by (conclude axiom_betweennesssymmetry).

*****
H109 : BetS C F D
H108 : Col C B G
H107 : Col B G C
H106 : CongA C G K G B A
H105 : Out B C G
H104 : Out B G C
H103 : neq B G
H102 : Out B A A
H101 : eq A A
H100 : CongA C G K C B A
H99 : CongA C B A C G K
H98 : CongA D C B F C G
H97 : Out C B G
H96 : Out C G B
H95 : neq C G
H94 : BetS C G B
H93 : Out C D F
H92 : Out C F D
H91 : neq C F
H90 : BetS C F D
H89 : CongA D C B D C B
H88 : nCol D C B
H87 : nCol D B C
H86 : RT F C G C G K
H85 : BetS c C G
H84 : BetS C G B
H83 : OS F K C G
H82 : OS K F C G
H81 : RT D C B C B A
H80 : Par C D B A
H79 : BetS c C B
H78 : Cong C c B C
H77 : BetS B C c
c : Point
H76 : neq B C
H75 : Par E K G B
H74 : Par E K B G
H73 : CongA A E K E B G
H72 : Out B A E
H71 : Out B E A
H70 : OS K G E B
H69 : OS K G B E
H68 : Col B B E
H67 : eq B B
H66 : Out B C G
H65 : Out B G C
H64 : OS K C B E
H63 : OS C K B E
H62 : OS H K B E
H61 : OS H K E B
H60 : Col E A B
H59 : OS C H B E
H58 : Out A D H
H57 : Out A H D
H56 : OS C D B E
H55 : neq B E
H54 : neq E B
H53 : Col B A E
H52 : Col A E B
H51 : OS C D B A
H50 : CongA A E K A B C
H49 : CongA H A E D A B
H48 : CongA E A H B A D
H47 : CongA E A H E A H
H46 : nCol E A H
H45 : nCol A H E
H44 : Out A H D
H43 : Out A E B
H42 : RT H A E A E K
H41 : OS H K A E
H40 : BetS e A E
H39 : BetS E A e
H38 : BetS B E A
H37 : RT D A B A B C
H36 : OS D C A B
H35 : BetS e A B
H34 : Cong A e B A
H33 : BetS B A e
e : Point
H32 : neq B A
H31 : neq A B
H30 : neq B G
H29 : neq A H
H28 : neq A E
H27 : OS K F G C
H26 : OS H K E A
H25 : OS C D A B
H24 : OS D A C B
H23 : OS A D C B
H22 : OS A D B C
H21 : TP B C A D
H20 : TP G C K F
H19 : TP E A H K
H18 : TP A B C D
H17 : Par A H E K
H16 : Par C D A B
H15 : Par B C A D
H14 : Par G C K F
H13 : Par C F G K
H12 : Par F C G K
H11 : Par G K F C
H10 : Par E K A H
H9 : Par E A H K
H8 : Par A B C D
H7 : Par A D B C
H6 : PG G K F C
H5 : PG E A H K
H4 : BetS B G C
H3 : BetS D F C
H2 : BetS A E B
H1 : BetS A H D
H0 : PG A B C D
A,B,C,D,E,F,G,H,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
PG E K G B
+++++
assert (neq C F) by (forward_using lemma_betweennotequal).
-----
Lemma proposition_43B : forall A B C D E F G H K, PG A B C D -> BetS A H D -> BetS A E B -> BetS D F C -> BetS B G C -> PG E A H K -> PG G K F C -> PG E K G B.
Proof.
intros.
assert (Par A D B C) by (conclude_def PG ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par E A H K) by (conclude_def PG ).
assert (Par E K A H) by (conclude_def PG ).
assert (Par G K F C) by (conclude_def PG ).
assert (Par F C G K) by (conclude lemma_parallelsymmetric).
assert (Par C F G K) by (forward_using lemma_parallelflip).
assert (Par G C K F) by (conclude_def PG ).
assert (Par B C A D) by (conclude lemma_parallelsymmetric).
assert (Par C D A B) by (conclude lemma_parallelsymmetric).
assert (Par A H E K) by (conclude lemma_parallelsymmetric).
assert (TP A B C D) by (conclude lemma_paralleldef2B).
assert (TP E A H K) by (conclude lemma_paralleldef2B).
assert (TP G C K F) by (conclude lemma_paralleldef2B).
assert (TP B C A D) by (conclude lemma_paralleldef2B).
assert (OS A D B C) by (conclude_def TP ).
assert (OS A D C B) by (conclude lemma_samesideflip).
assert (OS D A C B) by (forward_using lemma_samesidesymmetric).
assert (OS C D A B) by (conclude_def TP ).
assert (OS H K E A) by (conclude_def TP ).
assert (OS K F G C) by (conclude_def TP ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (neq A H) by (forward_using lemma_betweennotequal).
assert (neq B G) by (forward_using lemma_betweennotequal).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists e, (BetS B A e /\\ Cong A e B A)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (BetS e A B) by (conclude axiom_betweennesssymmetry).
assert (OS D C A B) by (forward_using lemma_samesidesymmetric).
assert (RT D A B A B C) by (conclude proposition_29C).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert (BetS E A e) by (conclude lemma_3_6a).
assert (BetS e A E) by (conclude axiom_betweennesssymmetry).
assert (OS H K A E) by (forward_using lemma_samesidesymmetric).
assert (RT H A E A E K) by (conclude proposition_29C).
assert (Out A E B) by (conclude lemma_ray4).
assert (Out A H D) by (conclude lemma_ray4).
assert (nCol A H E) by (forward_using lemma_parallelNC).
assert (nCol E A H) by (forward_using lemma_NCorder).
assert (CongA E A H E A H) by (conclude lemma_equalanglesreflexive).
assert (CongA E A H B A D) by (conclude lemma_equalangleshelper).
assert (CongA H A E D A B) by (conclude lemma_equalanglesflip).
assert (CongA A E K A B C) by (apply (lemma_supplements2 H A E A B C D A B A E K);eauto).
assert (OS C D B A) by (conclude lemma_samesideflip).
assert (Col A E B) by (conclude_def Col ).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq E B) by (forward_using lemma_betweennotequal).
assert (neq B E) by (conclude lemma_inequalitysymmetric).
assert (OS C D B E) by (conclude lemma_samesidecollinear).
assert (Out A H D) by (conclude lemma_ray4).
assert (Out A D H) by (conclude lemma_ray5).
assert (OS C H B E) by (conclude lemma_sameside2).
assert (Col E A B) by (forward_using lemma_collinearorder).
assert (OS H K E B) by (conclude lemma_samesidecollinear).
assert (OS H K B E) by (conclude lemma_samesideflip).
assert (OS C K B E) by (conclude lemma_samesidetransitive).
assert (OS K C B E) by (forward_using lemma_samesidesymmetric).
assert (Out B G C) by (conclude lemma_ray4).
assert (Out B C G) by (conclude lemma_ray5).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (Col B B E) by (conclude_def Col ).
assert (OS K G B E) by (conclude lemma_sameside2).
assert (OS K G E B) by (conclude lemma_samesideflip).
assert (Out B E A) by (conclude lemma_ray4).
assert (Out B A E) by (conclude lemma_ray5).
assert (CongA A E K E B G) by (conclude lemma_equalangleshelper).
assert (Par E K B G) by (conclude proposition_28D).
assert (Par E K G B) by (forward_using lemma_parallelflip).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists c, (BetS B C c /\\ Cong C c B C)) by (conclude lemma_extension);destruct Tf as [c];spliter.
assert (BetS c C B) by (conclude axiom_betweennesssymmetry).
assert (Par C D B A) by (forward_using lemma_parallelflip).
assert (RT D C B C B A) by (conclude proposition_29C).
assert (OS K F C G) by (conclude lemma_samesideflip).
assert (OS F K C G) by (forward_using lemma_samesidesymmetric).
assert (BetS C G B) by (conclude axiom_betweennesssymmetry).
assert (BetS c C G) by (conclude axiom_innertransitivity).
assert (RT F C G C G K) by (conclude proposition_29C).
assert (nCol D B C) by (forward_using lemma_parallelNC).
assert (nCol D C B) by (forward_using lemma_NCorder).
assert (CongA D C B D C B) by (conclude lemma_equalanglesreflexive).
assert (BetS C F D) by (conclude axiom_betweennesssymmetry).
assert (neq C F) by (forward_using lemma_betweennotequal).
assert (Out C F D) by (conclude lemma_ray4).
assert (Out C D F) by (conclude lemma_ray5).
assert (BetS C G B) by (conclude axiom_betweennesssymmetry).
assert (neq C G) by (forward_using lemma_betweennotequal).
assert (Out C G B) by (conclude lemma_ray4).
assert (Out C B G) by (conclude lemma_ray5).
assert (CongA D C B F C G) by (conclude lemma_equalangleshelper).
assert (CongA C B A C G K) by (conclude (lemma_supplements2 D C B C G K F C G C B A)).
assert (CongA C G K C B A) by (conclude lemma_equalanglessymmetric).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out B A A) by (conclude lemma_ray4).
assert (neq B G) by (forward_using lemma_betweennotequal).
assert (Out B G C) by (conclude lemma_ray4).
assert (Out B C G) by (conclude lemma_ray5).
assert (CongA C G K G B A) by (conclude lemma_equalangleshelper).
assert (Col B G C) by (conclude_def Col ).
assert (Col C B G) by (forward_using lemma_collinearorder).
assert (BetS C F D) by (conclude axiom_betweennesssymmetry).
assert (neq C F) by (forward_using lemma_betweennotequal).

*****
H110 : neq C F
H109 : BetS C F D
H108 : Col C B G
H107 : Col B G C
H106 : CongA C G K G B A
H105 : Out B C G
H104 : Out B G C
H103 : neq B G
H102 : Out B A A
H101 : eq A A
H100 : CongA C G K C B A
H99 : CongA C B A C G K
H98 : CongA D C B F C G
H97 : Out C B G
H96 : Out C G B
H95 : neq C G
H94 : BetS C G B
H93 : Out C D F
H92 : Out C F D
H91 : neq C F
H90 : BetS C F D
H89 : CongA D C B D C B
H88 : nCol D C B
H87 : nCol D B C
H86 : RT F C G C G K
H85 : BetS c C G
H84 : BetS C G B
H83 : OS F K C G
H82 : OS K F C G
H81 : RT D C B C B A
H80 : Par C D B A
H79 : BetS c C B
H78 : Cong C c B C
H77 : BetS B C c
c : Point
H76 : neq B C
H75 : Par E K G B
H74 : Par E K B G
H73 : CongA A E K E B G
H72 : Out B A E
H71 : Out B E A
H70 : OS K G E B
H69 : OS K G B E
H68 : Col B B E
H67 : eq B B
H66 : Out B C G
H65 : Out B G C
H64 : OS K C B E
H63 : OS C K B E
H62 : OS H K B E
H61 : OS H K E B
H60 : Col E A B
H59 : OS C H B E
H58 : Out A D H
H57 : Out A H D
H56 : OS C D B E
H55 : neq B E
H54 : neq E B
H53 : Col B A E
H52 : Col A E B
H51 : OS C D B A
H50 : CongA A E K A B C
H49 : CongA H A E D A B
H48 : CongA E A H B A D
H47 : CongA E A H E A H
H46 : nCol E A H
H45 : nCol A H E
H44 : Out A H D
H43 : Out A E B
H42 : RT H A E A E K
H41 : OS H K A E
H40 : BetS e A E
H39 : BetS E A e
H38 : BetS B E A
H37 : RT D A B A B C
H36 : OS D C A B
H35 : BetS e A B
H34 : Cong A e B A
H33 : BetS B A e
e : Point
H32 : neq B A
H31 : neq A B
H30 : neq B G
H29 : neq A H
H28 : neq A E
H27 : OS K F G C
H26 : OS H K E A
H25 : OS C D A B
H24 : OS D A C B
H23 : OS A D C B
H22 : OS A D B C
H21 : TP B C A D
H20 : TP G C K F
H19 : TP E A H K
H18 : TP A B C D
H17 : Par A H E K
H16 : Par C D A B
H15 : Par B C A D
H14 : Par G C K F
H13 : Par C F G K
H12 : Par F C G K
H11 : Par G K F C
H10 : Par E K A H
H9 : Par E A H K
H8 : Par A B C D
H7 : Par A D B C
H6 : PG G K F C
H5 : PG E A H K
H4 : BetS B G C
H3 : BetS D F C
H2 : BetS A E B
H1 : BetS A H D
H0 : PG A B C D
A,B,C,D,E,F,G,H,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
PG E K G B
+++++
assert (Out C F D) by (conclude lemma_ray4).
-----
Lemma proposition_43B : forall A B C D E F G H K, PG A B C D -> BetS A H D -> BetS A E B -> BetS D F C -> BetS B G C -> PG E A H K -> PG G K F C -> PG E K G B.
Proof.
intros.
assert (Par A D B C) by (conclude_def PG ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par E A H K) by (conclude_def PG ).
assert (Par E K A H) by (conclude_def PG ).
assert (Par G K F C) by (conclude_def PG ).
assert (Par F C G K) by (conclude lemma_parallelsymmetric).
assert (Par C F G K) by (forward_using lemma_parallelflip).
assert (Par G C K F) by (conclude_def PG ).
assert (Par B C A D) by (conclude lemma_parallelsymmetric).
assert (Par C D A B) by (conclude lemma_parallelsymmetric).
assert (Par A H E K) by (conclude lemma_parallelsymmetric).
assert (TP A B C D) by (conclude lemma_paralleldef2B).
assert (TP E A H K) by (conclude lemma_paralleldef2B).
assert (TP G C K F) by (conclude lemma_paralleldef2B).
assert (TP B C A D) by (conclude lemma_paralleldef2B).
assert (OS A D B C) by (conclude_def TP ).
assert (OS A D C B) by (conclude lemma_samesideflip).
assert (OS D A C B) by (forward_using lemma_samesidesymmetric).
assert (OS C D A B) by (conclude_def TP ).
assert (OS H K E A) by (conclude_def TP ).
assert (OS K F G C) by (conclude_def TP ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (neq A H) by (forward_using lemma_betweennotequal).
assert (neq B G) by (forward_using lemma_betweennotequal).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists e, (BetS B A e /\\ Cong A e B A)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (BetS e A B) by (conclude axiom_betweennesssymmetry).
assert (OS D C A B) by (forward_using lemma_samesidesymmetric).
assert (RT D A B A B C) by (conclude proposition_29C).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert (BetS E A e) by (conclude lemma_3_6a).
assert (BetS e A E) by (conclude axiom_betweennesssymmetry).
assert (OS H K A E) by (forward_using lemma_samesidesymmetric).
assert (RT H A E A E K) by (conclude proposition_29C).
assert (Out A E B) by (conclude lemma_ray4).
assert (Out A H D) by (conclude lemma_ray4).
assert (nCol A H E) by (forward_using lemma_parallelNC).
assert (nCol E A H) by (forward_using lemma_NCorder).
assert (CongA E A H E A H) by (conclude lemma_equalanglesreflexive).
assert (CongA E A H B A D) by (conclude lemma_equalangleshelper).
assert (CongA H A E D A B) by (conclude lemma_equalanglesflip).
assert (CongA A E K A B C) by (apply (lemma_supplements2 H A E A B C D A B A E K);eauto).
assert (OS C D B A) by (conclude lemma_samesideflip).
assert (Col A E B) by (conclude_def Col ).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq E B) by (forward_using lemma_betweennotequal).
assert (neq B E) by (conclude lemma_inequalitysymmetric).
assert (OS C D B E) by (conclude lemma_samesidecollinear).
assert (Out A H D) by (conclude lemma_ray4).
assert (Out A D H) by (conclude lemma_ray5).
assert (OS C H B E) by (conclude lemma_sameside2).
assert (Col E A B) by (forward_using lemma_collinearorder).
assert (OS H K E B) by (conclude lemma_samesidecollinear).
assert (OS H K B E) by (conclude lemma_samesideflip).
assert (OS C K B E) by (conclude lemma_samesidetransitive).
assert (OS K C B E) by (forward_using lemma_samesidesymmetric).
assert (Out B G C) by (conclude lemma_ray4).
assert (Out B C G) by (conclude lemma_ray5).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (Col B B E) by (conclude_def Col ).
assert (OS K G B E) by (conclude lemma_sameside2).
assert (OS K G E B) by (conclude lemma_samesideflip).
assert (Out B E A) by (conclude lemma_ray4).
assert (Out B A E) by (conclude lemma_ray5).
assert (CongA A E K E B G) by (conclude lemma_equalangleshelper).
assert (Par E K B G) by (conclude proposition_28D).
assert (Par E K G B) by (forward_using lemma_parallelflip).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists c, (BetS B C c /\\ Cong C c B C)) by (conclude lemma_extension);destruct Tf as [c];spliter.
assert (BetS c C B) by (conclude axiom_betweennesssymmetry).
assert (Par C D B A) by (forward_using lemma_parallelflip).
assert (RT D C B C B A) by (conclude proposition_29C).
assert (OS K F C G) by (conclude lemma_samesideflip).
assert (OS F K C G) by (forward_using lemma_samesidesymmetric).
assert (BetS C G B) by (conclude axiom_betweennesssymmetry).
assert (BetS c C G) by (conclude axiom_innertransitivity).
assert (RT F C G C G K) by (conclude proposition_29C).
assert (nCol D B C) by (forward_using lemma_parallelNC).
assert (nCol D C B) by (forward_using lemma_NCorder).
assert (CongA D C B D C B) by (conclude lemma_equalanglesreflexive).
assert (BetS C F D) by (conclude axiom_betweennesssymmetry).
assert (neq C F) by (forward_using lemma_betweennotequal).
assert (Out C F D) by (conclude lemma_ray4).
assert (Out C D F) by (conclude lemma_ray5).
assert (BetS C G B) by (conclude axiom_betweennesssymmetry).
assert (neq C G) by (forward_using lemma_betweennotequal).
assert (Out C G B) by (conclude lemma_ray4).
assert (Out C B G) by (conclude lemma_ray5).
assert (CongA D C B F C G) by (conclude lemma_equalangleshelper).
assert (CongA C B A C G K) by (conclude (lemma_supplements2 D C B C G K F C G C B A)).
assert (CongA C G K C B A) by (conclude lemma_equalanglessymmetric).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out B A A) by (conclude lemma_ray4).
assert (neq B G) by (forward_using lemma_betweennotequal).
assert (Out B G C) by (conclude lemma_ray4).
assert (Out B C G) by (conclude lemma_ray5).
assert (CongA C G K G B A) by (conclude lemma_equalangleshelper).
assert (Col B G C) by (conclude_def Col ).
assert (Col C B G) by (forward_using lemma_collinearorder).
assert (BetS C F D) by (conclude axiom_betweennesssymmetry).
assert (neq C F) by (forward_using lemma_betweennotequal).
assert (Out C F D) by (conclude lemma_ray4).

*****
H111 : Out C F D
H110 : neq C F
H109 : BetS C F D
H108 : Col C B G
H107 : Col B G C
H106 : CongA C G K G B A
H105 : Out B C G
H104 : Out B G C
H103 : neq B G
H102 : Out B A A
H101 : eq A A
H100 : CongA C G K C B A
H99 : CongA C B A C G K
H98 : CongA D C B F C G
H97 : Out C B G
H96 : Out C G B
H95 : neq C G
H94 : BetS C G B
H93 : Out C D F
H92 : Out C F D
H91 : neq C F
H90 : BetS C F D
H89 : CongA D C B D C B
H88 : nCol D C B
H87 : nCol D B C
H86 : RT F C G C G K
H85 : BetS c C G
H84 : BetS C G B
H83 : OS F K C G
H82 : OS K F C G
H81 : RT D C B C B A
H80 : Par C D B A
H79 : BetS c C B
H78 : Cong C c B C
H77 : BetS B C c
c : Point
H76 : neq B C
H75 : Par E K G B
H74 : Par E K B G
H73 : CongA A E K E B G
H72 : Out B A E
H71 : Out B E A
H70 : OS K G E B
H69 : OS K G B E
H68 : Col B B E
H67 : eq B B
H66 : Out B C G
H65 : Out B G C
H64 : OS K C B E
H63 : OS C K B E
H62 : OS H K B E
H61 : OS H K E B
H60 : Col E A B
H59 : OS C H B E
H58 : Out A D H
H57 : Out A H D
H56 : OS C D B E
H55 : neq B E
H54 : neq E B
H53 : Col B A E
H52 : Col A E B
H51 : OS C D B A
H50 : CongA A E K A B C
H49 : CongA H A E D A B
H48 : CongA E A H B A D
H47 : CongA E A H E A H
H46 : nCol E A H
H45 : nCol A H E
H44 : Out A H D
H43 : Out A E B
H42 : RT H A E A E K
H41 : OS H K A E
H40 : BetS e A E
H39 : BetS E A e
H38 : BetS B E A
H37 : RT D A B A B C
H36 : OS D C A B
H35 : BetS e A B
H34 : Cong A e B A
H33 : BetS B A e
e : Point
H32 : neq B A
H31 : neq A B
H30 : neq B G
H29 : neq A H
H28 : neq A E
H27 : OS K F G C
H26 : OS H K E A
H25 : OS C D A B
H24 : OS D A C B
H23 : OS A D C B
H22 : OS A D B C
H21 : TP B C A D
H20 : TP G C K F
H19 : TP E A H K
H18 : TP A B C D
H17 : Par A H E K
H16 : Par C D A B
H15 : Par B C A D
H14 : Par G C K F
H13 : Par C F G K
H12 : Par F C G K
H11 : Par G K F C
H10 : Par E K A H
H9 : Par E A H K
H8 : Par A B C D
H7 : Par A D B C
H6 : PG G K F C
H5 : PG E A H K
H4 : BetS B G C
H3 : BetS D F C
H2 : BetS A E B
H1 : BetS A H D
H0 : PG A B C D
A,B,C,D,E,F,G,H,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
PG E K G B
+++++
assert (Out C D F) by (conclude lemma_ray5).
-----
Lemma proposition_43B : forall A B C D E F G H K, PG A B C D -> BetS A H D -> BetS A E B -> BetS D F C -> BetS B G C -> PG E A H K -> PG G K F C -> PG E K G B.
Proof.
intros.
assert (Par A D B C) by (conclude_def PG ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par E A H K) by (conclude_def PG ).
assert (Par E K A H) by (conclude_def PG ).
assert (Par G K F C) by (conclude_def PG ).
assert (Par F C G K) by (conclude lemma_parallelsymmetric).
assert (Par C F G K) by (forward_using lemma_parallelflip).
assert (Par G C K F) by (conclude_def PG ).
assert (Par B C A D) by (conclude lemma_parallelsymmetric).
assert (Par C D A B) by (conclude lemma_parallelsymmetric).
assert (Par A H E K) by (conclude lemma_parallelsymmetric).
assert (TP A B C D) by (conclude lemma_paralleldef2B).
assert (TP E A H K) by (conclude lemma_paralleldef2B).
assert (TP G C K F) by (conclude lemma_paralleldef2B).
assert (TP B C A D) by (conclude lemma_paralleldef2B).
assert (OS A D B C) by (conclude_def TP ).
assert (OS A D C B) by (conclude lemma_samesideflip).
assert (OS D A C B) by (forward_using lemma_samesidesymmetric).
assert (OS C D A B) by (conclude_def TP ).
assert (OS H K E A) by (conclude_def TP ).
assert (OS K F G C) by (conclude_def TP ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (neq A H) by (forward_using lemma_betweennotequal).
assert (neq B G) by (forward_using lemma_betweennotequal).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists e, (BetS B A e /\\ Cong A e B A)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (BetS e A B) by (conclude axiom_betweennesssymmetry).
assert (OS D C A B) by (forward_using lemma_samesidesymmetric).
assert (RT D A B A B C) by (conclude proposition_29C).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert (BetS E A e) by (conclude lemma_3_6a).
assert (BetS e A E) by (conclude axiom_betweennesssymmetry).
assert (OS H K A E) by (forward_using lemma_samesidesymmetric).
assert (RT H A E A E K) by (conclude proposition_29C).
assert (Out A E B) by (conclude lemma_ray4).
assert (Out A H D) by (conclude lemma_ray4).
assert (nCol A H E) by (forward_using lemma_parallelNC).
assert (nCol E A H) by (forward_using lemma_NCorder).
assert (CongA E A H E A H) by (conclude lemma_equalanglesreflexive).
assert (CongA E A H B A D) by (conclude lemma_equalangleshelper).
assert (CongA H A E D A B) by (conclude lemma_equalanglesflip).
assert (CongA A E K A B C) by (apply (lemma_supplements2 H A E A B C D A B A E K);eauto).
assert (OS C D B A) by (conclude lemma_samesideflip).
assert (Col A E B) by (conclude_def Col ).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq E B) by (forward_using lemma_betweennotequal).
assert (neq B E) by (conclude lemma_inequalitysymmetric).
assert (OS C D B E) by (conclude lemma_samesidecollinear).
assert (Out A H D) by (conclude lemma_ray4).
assert (Out A D H) by (conclude lemma_ray5).
assert (OS C H B E) by (conclude lemma_sameside2).
assert (Col E A B) by (forward_using lemma_collinearorder).
assert (OS H K E B) by (conclude lemma_samesidecollinear).
assert (OS H K B E) by (conclude lemma_samesideflip).
assert (OS C K B E) by (conclude lemma_samesidetransitive).
assert (OS K C B E) by (forward_using lemma_samesidesymmetric).
assert (Out B G C) by (conclude lemma_ray4).
assert (Out B C G) by (conclude lemma_ray5).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (Col B B E) by (conclude_def Col ).
assert (OS K G B E) by (conclude lemma_sameside2).
assert (OS K G E B) by (conclude lemma_samesideflip).
assert (Out B E A) by (conclude lemma_ray4).
assert (Out B A E) by (conclude lemma_ray5).
assert (CongA A E K E B G) by (conclude lemma_equalangleshelper).
assert (Par E K B G) by (conclude proposition_28D).
assert (Par E K G B) by (forward_using lemma_parallelflip).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists c, (BetS B C c /\\ Cong C c B C)) by (conclude lemma_extension);destruct Tf as [c];spliter.
assert (BetS c C B) by (conclude axiom_betweennesssymmetry).
assert (Par C D B A) by (forward_using lemma_parallelflip).
assert (RT D C B C B A) by (conclude proposition_29C).
assert (OS K F C G) by (conclude lemma_samesideflip).
assert (OS F K C G) by (forward_using lemma_samesidesymmetric).
assert (BetS C G B) by (conclude axiom_betweennesssymmetry).
assert (BetS c C G) by (conclude axiom_innertransitivity).
assert (RT F C G C G K) by (conclude proposition_29C).
assert (nCol D B C) by (forward_using lemma_parallelNC).
assert (nCol D C B) by (forward_using lemma_NCorder).
assert (CongA D C B D C B) by (conclude lemma_equalanglesreflexive).
assert (BetS C F D) by (conclude axiom_betweennesssymmetry).
assert (neq C F) by (forward_using lemma_betweennotequal).
assert (Out C F D) by (conclude lemma_ray4).
assert (Out C D F) by (conclude lemma_ray5).
assert (BetS C G B) by (conclude axiom_betweennesssymmetry).
assert (neq C G) by (forward_using lemma_betweennotequal).
assert (Out C G B) by (conclude lemma_ray4).
assert (Out C B G) by (conclude lemma_ray5).
assert (CongA D C B F C G) by (conclude lemma_equalangleshelper).
assert (CongA C B A C G K) by (conclude (lemma_supplements2 D C B C G K F C G C B A)).
assert (CongA C G K C B A) by (conclude lemma_equalanglessymmetric).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out B A A) by (conclude lemma_ray4).
assert (neq B G) by (forward_using lemma_betweennotequal).
assert (Out B G C) by (conclude lemma_ray4).
assert (Out B C G) by (conclude lemma_ray5).
assert (CongA C G K G B A) by (conclude lemma_equalangleshelper).
assert (Col B G C) by (conclude_def Col ).
assert (Col C B G) by (forward_using lemma_collinearorder).
assert (BetS C F D) by (conclude axiom_betweennesssymmetry).
assert (neq C F) by (forward_using lemma_betweennotequal).
assert (Out C F D) by (conclude lemma_ray4).
assert (Out C D F) by (conclude lemma_ray5).

*****
H112 : Out C D F
H111 : Out C F D
H110 : neq C F
H109 : BetS C F D
H108 : Col C B G
H107 : Col B G C
H106 : CongA C G K G B A
H105 : Out B C G
H104 : Out B G C
H103 : neq B G
H102 : Out B A A
H101 : eq A A
H100 : CongA C G K C B A
H99 : CongA C B A C G K
H98 : CongA D C B F C G
H97 : Out C B G
H96 : Out C G B
H95 : neq C G
H94 : BetS C G B
H93 : Out C D F
H92 : Out C F D
H91 : neq C F
H90 : BetS C F D
H89 : CongA D C B D C B
H88 : nCol D C B
H87 : nCol D B C
H86 : RT F C G C G K
H85 : BetS c C G
H84 : BetS C G B
H83 : OS F K C G
H82 : OS K F C G
H81 : RT D C B C B A
H80 : Par C D B A
H79 : BetS c C B
H78 : Cong C c B C
H77 : BetS B C c
c : Point
H76 : neq B C
H75 : Par E K G B
H74 : Par E K B G
H73 : CongA A E K E B G
H72 : Out B A E
H71 : Out B E A
H70 : OS K G E B
H69 : OS K G B E
H68 : Col B B E
H67 : eq B B
H66 : Out B C G
H65 : Out B G C
H64 : OS K C B E
H63 : OS C K B E
H62 : OS H K B E
H61 : OS H K E B
H60 : Col E A B
H59 : OS C H B E
H58 : Out A D H
H57 : Out A H D
H56 : OS C D B E
H55 : neq B E
H54 : neq E B
H53 : Col B A E
H52 : Col A E B
H51 : OS C D B A
H50 : CongA A E K A B C
H49 : CongA H A E D A B
H48 : CongA E A H B A D
H47 : CongA E A H E A H
H46 : nCol E A H
H45 : nCol A H E
H44 : Out A H D
H43 : Out A E B
H42 : RT H A E A E K
H41 : OS H K A E
H40 : BetS e A E
H39 : BetS E A e
H38 : BetS B E A
H37 : RT D A B A B C
H36 : OS D C A B
H35 : BetS e A B
H34 : Cong A e B A
H33 : BetS B A e
e : Point
H32 : neq B A
H31 : neq A B
H30 : neq B G
H29 : neq A H
H28 : neq A E
H27 : OS K F G C
H26 : OS H K E A
H25 : OS C D A B
H24 : OS D A C B
H23 : OS A D C B
H22 : OS A D B C
H21 : TP B C A D
H20 : TP G C K F
H19 : TP E A H K
H18 : TP A B C D
H17 : Par A H E K
H16 : Par C D A B
H15 : Par B C A D
H14 : Par G C K F
H13 : Par C F G K
H12 : Par F C G K
H11 : Par G K F C
H10 : Par E K A H
H9 : Par E A H K
H8 : Par A B C D
H7 : Par A D B C
H6 : PG G K F C
H5 : PG E A H K
H4 : BetS B G C
H3 : BetS D F C
H2 : BetS A E B
H1 : BetS A H D
H0 : PG A B C D
A,B,C,D,E,F,G,H,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
PG E K G B
+++++
assert (eq C C) by (conclude cn_equalityreflexive).
-----
Lemma proposition_43B : forall A B C D E F G H K, PG A B C D -> BetS A H D -> BetS A E B -> BetS D F C -> BetS B G C -> PG E A H K -> PG G K F C -> PG E K G B.
Proof.
intros.
assert (Par A D B C) by (conclude_def PG ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par E A H K) by (conclude_def PG ).
assert (Par E K A H) by (conclude_def PG ).
assert (Par G K F C) by (conclude_def PG ).
assert (Par F C G K) by (conclude lemma_parallelsymmetric).
assert (Par C F G K) by (forward_using lemma_parallelflip).
assert (Par G C K F) by (conclude_def PG ).
assert (Par B C A D) by (conclude lemma_parallelsymmetric).
assert (Par C D A B) by (conclude lemma_parallelsymmetric).
assert (Par A H E K) by (conclude lemma_parallelsymmetric).
assert (TP A B C D) by (conclude lemma_paralleldef2B).
assert (TP E A H K) by (conclude lemma_paralleldef2B).
assert (TP G C K F) by (conclude lemma_paralleldef2B).
assert (TP B C A D) by (conclude lemma_paralleldef2B).
assert (OS A D B C) by (conclude_def TP ).
assert (OS A D C B) by (conclude lemma_samesideflip).
assert (OS D A C B) by (forward_using lemma_samesidesymmetric).
assert (OS C D A B) by (conclude_def TP ).
assert (OS H K E A) by (conclude_def TP ).
assert (OS K F G C) by (conclude_def TP ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (neq A H) by (forward_using lemma_betweennotequal).
assert (neq B G) by (forward_using lemma_betweennotequal).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists e, (BetS B A e /\\ Cong A e B A)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (BetS e A B) by (conclude axiom_betweennesssymmetry).
assert (OS D C A B) by (forward_using lemma_samesidesymmetric).
assert (RT D A B A B C) by (conclude proposition_29C).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert (BetS E A e) by (conclude lemma_3_6a).
assert (BetS e A E) by (conclude axiom_betweennesssymmetry).
assert (OS H K A E) by (forward_using lemma_samesidesymmetric).
assert (RT H A E A E K) by (conclude proposition_29C).
assert (Out A E B) by (conclude lemma_ray4).
assert (Out A H D) by (conclude lemma_ray4).
assert (nCol A H E) by (forward_using lemma_parallelNC).
assert (nCol E A H) by (forward_using lemma_NCorder).
assert (CongA E A H E A H) by (conclude lemma_equalanglesreflexive).
assert (CongA E A H B A D) by (conclude lemma_equalangleshelper).
assert (CongA H A E D A B) by (conclude lemma_equalanglesflip).
assert (CongA A E K A B C) by (apply (lemma_supplements2 H A E A B C D A B A E K);eauto).
assert (OS C D B A) by (conclude lemma_samesideflip).
assert (Col A E B) by (conclude_def Col ).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq E B) by (forward_using lemma_betweennotequal).
assert (neq B E) by (conclude lemma_inequalitysymmetric).
assert (OS C D B E) by (conclude lemma_samesidecollinear).
assert (Out A H D) by (conclude lemma_ray4).
assert (Out A D H) by (conclude lemma_ray5).
assert (OS C H B E) by (conclude lemma_sameside2).
assert (Col E A B) by (forward_using lemma_collinearorder).
assert (OS H K E B) by (conclude lemma_samesidecollinear).
assert (OS H K B E) by (conclude lemma_samesideflip).
assert (OS C K B E) by (conclude lemma_samesidetransitive).
assert (OS K C B E) by (forward_using lemma_samesidesymmetric).
assert (Out B G C) by (conclude lemma_ray4).
assert (Out B C G) by (conclude lemma_ray5).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (Col B B E) by (conclude_def Col ).
assert (OS K G B E) by (conclude lemma_sameside2).
assert (OS K G E B) by (conclude lemma_samesideflip).
assert (Out B E A) by (conclude lemma_ray4).
assert (Out B A E) by (conclude lemma_ray5).
assert (CongA A E K E B G) by (conclude lemma_equalangleshelper).
assert (Par E K B G) by (conclude proposition_28D).
assert (Par E K G B) by (forward_using lemma_parallelflip).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists c, (BetS B C c /\\ Cong C c B C)) by (conclude lemma_extension);destruct Tf as [c];spliter.
assert (BetS c C B) by (conclude axiom_betweennesssymmetry).
assert (Par C D B A) by (forward_using lemma_parallelflip).
assert (RT D C B C B A) by (conclude proposition_29C).
assert (OS K F C G) by (conclude lemma_samesideflip).
assert (OS F K C G) by (forward_using lemma_samesidesymmetric).
assert (BetS C G B) by (conclude axiom_betweennesssymmetry).
assert (BetS c C G) by (conclude axiom_innertransitivity).
assert (RT F C G C G K) by (conclude proposition_29C).
assert (nCol D B C) by (forward_using lemma_parallelNC).
assert (nCol D C B) by (forward_using lemma_NCorder).
assert (CongA D C B D C B) by (conclude lemma_equalanglesreflexive).
assert (BetS C F D) by (conclude axiom_betweennesssymmetry).
assert (neq C F) by (forward_using lemma_betweennotequal).
assert (Out C F D) by (conclude lemma_ray4).
assert (Out C D F) by (conclude lemma_ray5).
assert (BetS C G B) by (conclude axiom_betweennesssymmetry).
assert (neq C G) by (forward_using lemma_betweennotequal).
assert (Out C G B) by (conclude lemma_ray4).
assert (Out C B G) by (conclude lemma_ray5).
assert (CongA D C B F C G) by (conclude lemma_equalangleshelper).
assert (CongA C B A C G K) by (conclude (lemma_supplements2 D C B C G K F C G C B A)).
assert (CongA C G K C B A) by (conclude lemma_equalanglessymmetric).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out B A A) by (conclude lemma_ray4).
assert (neq B G) by (forward_using lemma_betweennotequal).
assert (Out B G C) by (conclude lemma_ray4).
assert (Out B C G) by (conclude lemma_ray5).
assert (CongA C G K G B A) by (conclude lemma_equalangleshelper).
assert (Col B G C) by (conclude_def Col ).
assert (Col C B G) by (forward_using lemma_collinearorder).
assert (BetS C F D) by (conclude axiom_betweennesssymmetry).
assert (neq C F) by (forward_using lemma_betweennotequal).
assert (Out C F D) by (conclude lemma_ray4).
assert (Out C D F) by (conclude lemma_ray5).
assert (eq C C) by (conclude cn_equalityreflexive).

*****
H113 : eq C C
H112 : Out C D F
H111 : Out C F D
H110 : neq C F
H109 : BetS C F D
H108 : Col C B G
H107 : Col B G C
H106 : CongA C G K G B A
H105 : Out B C G
H104 : Out B G C
H103 : neq B G
H102 : Out B A A
H101 : eq A A
H100 : CongA C G K C B A
H99 : CongA C B A C G K
H98 : CongA D C B F C G
H97 : Out C B G
H96 : Out C G B
H95 : neq C G
H94 : BetS C G B
H93 : Out C D F
H92 : Out C F D
H91 : neq C F
H90 : BetS C F D
H89 : CongA D C B D C B
H88 : nCol D C B
H87 : nCol D B C
H86 : RT F C G C G K
H85 : BetS c C G
H84 : BetS C G B
H83 : OS F K C G
H82 : OS K F C G
H81 : RT D C B C B A
H80 : Par C D B A
H79 : BetS c C B
H78 : Cong C c B C
H77 : BetS B C c
c : Point
H76 : neq B C
H75 : Par E K G B
H74 : Par E K B G
H73 : CongA A E K E B G
H72 : Out B A E
H71 : Out B E A
H70 : OS K G E B
H69 : OS K G B E
H68 : Col B B E
H67 : eq B B
H66 : Out B C G
H65 : Out B G C
H64 : OS K C B E
H63 : OS C K B E
H62 : OS H K B E
H61 : OS H K E B
H60 : Col E A B
H59 : OS C H B E
H58 : Out A D H
H57 : Out A H D
H56 : OS C D B E
H55 : neq B E
H54 : neq E B
H53 : Col B A E
H52 : Col A E B
H51 : OS C D B A
H50 : CongA A E K A B C
H49 : CongA H A E D A B
H48 : CongA E A H B A D
H47 : CongA E A H E A H
H46 : nCol E A H
H45 : nCol A H E
H44 : Out A H D
H43 : Out A E B
H42 : RT H A E A E K
H41 : OS H K A E
H40 : BetS e A E
H39 : BetS E A e
H38 : BetS B E A
H37 : RT D A B A B C
H36 : OS D C A B
H35 : BetS e A B
H34 : Cong A e B A
H33 : BetS B A e
e : Point
H32 : neq B A
H31 : neq A B
H30 : neq B G
H29 : neq A H
H28 : neq A E
H27 : OS K F G C
H26 : OS H K E A
H25 : OS C D A B
H24 : OS D A C B
H23 : OS A D C B
H22 : OS A D B C
H21 : TP B C A D
H20 : TP G C K F
H19 : TP E A H K
H18 : TP A B C D
H17 : Par A H E K
H16 : Par C D A B
H15 : Par B C A D
H14 : Par G C K F
H13 : Par C F G K
H12 : Par F C G K
H11 : Par G K F C
H10 : Par E K A H
H9 : Par E A H K
H8 : Par A B C D
H7 : Par A D B C
H6 : PG G K F C
H5 : PG E A H K
H4 : BetS B G C
H3 : BetS D F C
H2 : BetS A E B
H1 : BetS A H D
H0 : PG A B C D
A,B,C,D,E,F,G,H,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
PG E K G B
+++++
assert (Col B C C) by (conclude_def Col ).
-----
Lemma proposition_43B : forall A B C D E F G H K, PG A B C D -> BetS A H D -> BetS A E B -> BetS D F C -> BetS B G C -> PG E A H K -> PG G K F C -> PG E K G B.
Proof.
intros.
assert (Par A D B C) by (conclude_def PG ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par E A H K) by (conclude_def PG ).
assert (Par E K A H) by (conclude_def PG ).
assert (Par G K F C) by (conclude_def PG ).
assert (Par F C G K) by (conclude lemma_parallelsymmetric).
assert (Par C F G K) by (forward_using lemma_parallelflip).
assert (Par G C K F) by (conclude_def PG ).
assert (Par B C A D) by (conclude lemma_parallelsymmetric).
assert (Par C D A B) by (conclude lemma_parallelsymmetric).
assert (Par A H E K) by (conclude lemma_parallelsymmetric).
assert (TP A B C D) by (conclude lemma_paralleldef2B).
assert (TP E A H K) by (conclude lemma_paralleldef2B).
assert (TP G C K F) by (conclude lemma_paralleldef2B).
assert (TP B C A D) by (conclude lemma_paralleldef2B).
assert (OS A D B C) by (conclude_def TP ).
assert (OS A D C B) by (conclude lemma_samesideflip).
assert (OS D A C B) by (forward_using lemma_samesidesymmetric).
assert (OS C D A B) by (conclude_def TP ).
assert (OS H K E A) by (conclude_def TP ).
assert (OS K F G C) by (conclude_def TP ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (neq A H) by (forward_using lemma_betweennotequal).
assert (neq B G) by (forward_using lemma_betweennotequal).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists e, (BetS B A e /\\ Cong A e B A)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (BetS e A B) by (conclude axiom_betweennesssymmetry).
assert (OS D C A B) by (forward_using lemma_samesidesymmetric).
assert (RT D A B A B C) by (conclude proposition_29C).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert (BetS E A e) by (conclude lemma_3_6a).
assert (BetS e A E) by (conclude axiom_betweennesssymmetry).
assert (OS H K A E) by (forward_using lemma_samesidesymmetric).
assert (RT H A E A E K) by (conclude proposition_29C).
assert (Out A E B) by (conclude lemma_ray4).
assert (Out A H D) by (conclude lemma_ray4).
assert (nCol A H E) by (forward_using lemma_parallelNC).
assert (nCol E A H) by (forward_using lemma_NCorder).
assert (CongA E A H E A H) by (conclude lemma_equalanglesreflexive).
assert (CongA E A H B A D) by (conclude lemma_equalangleshelper).
assert (CongA H A E D A B) by (conclude lemma_equalanglesflip).
assert (CongA A E K A B C) by (apply (lemma_supplements2 H A E A B C D A B A E K);eauto).
assert (OS C D B A) by (conclude lemma_samesideflip).
assert (Col A E B) by (conclude_def Col ).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq E B) by (forward_using lemma_betweennotequal).
assert (neq B E) by (conclude lemma_inequalitysymmetric).
assert (OS C D B E) by (conclude lemma_samesidecollinear).
assert (Out A H D) by (conclude lemma_ray4).
assert (Out A D H) by (conclude lemma_ray5).
assert (OS C H B E) by (conclude lemma_sameside2).
assert (Col E A B) by (forward_using lemma_collinearorder).
assert (OS H K E B) by (conclude lemma_samesidecollinear).
assert (OS H K B E) by (conclude lemma_samesideflip).
assert (OS C K B E) by (conclude lemma_samesidetransitive).
assert (OS K C B E) by (forward_using lemma_samesidesymmetric).
assert (Out B G C) by (conclude lemma_ray4).
assert (Out B C G) by (conclude lemma_ray5).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (Col B B E) by (conclude_def Col ).
assert (OS K G B E) by (conclude lemma_sameside2).
assert (OS K G E B) by (conclude lemma_samesideflip).
assert (Out B E A) by (conclude lemma_ray4).
assert (Out B A E) by (conclude lemma_ray5).
assert (CongA A E K E B G) by (conclude lemma_equalangleshelper).
assert (Par E K B G) by (conclude proposition_28D).
assert (Par E K G B) by (forward_using lemma_parallelflip).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists c, (BetS B C c /\\ Cong C c B C)) by (conclude lemma_extension);destruct Tf as [c];spliter.
assert (BetS c C B) by (conclude axiom_betweennesssymmetry).
assert (Par C D B A) by (forward_using lemma_parallelflip).
assert (RT D C B C B A) by (conclude proposition_29C).
assert (OS K F C G) by (conclude lemma_samesideflip).
assert (OS F K C G) by (forward_using lemma_samesidesymmetric).
assert (BetS C G B) by (conclude axiom_betweennesssymmetry).
assert (BetS c C G) by (conclude axiom_innertransitivity).
assert (RT F C G C G K) by (conclude proposition_29C).
assert (nCol D B C) by (forward_using lemma_parallelNC).
assert (nCol D C B) by (forward_using lemma_NCorder).
assert (CongA D C B D C B) by (conclude lemma_equalanglesreflexive).
assert (BetS C F D) by (conclude axiom_betweennesssymmetry).
assert (neq C F) by (forward_using lemma_betweennotequal).
assert (Out C F D) by (conclude lemma_ray4).
assert (Out C D F) by (conclude lemma_ray5).
assert (BetS C G B) by (conclude axiom_betweennesssymmetry).
assert (neq C G) by (forward_using lemma_betweennotequal).
assert (Out C G B) by (conclude lemma_ray4).
assert (Out C B G) by (conclude lemma_ray5).
assert (CongA D C B F C G) by (conclude lemma_equalangleshelper).
assert (CongA C B A C G K) by (conclude (lemma_supplements2 D C B C G K F C G C B A)).
assert (CongA C G K C B A) by (conclude lemma_equalanglessymmetric).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out B A A) by (conclude lemma_ray4).
assert (neq B G) by (forward_using lemma_betweennotequal).
assert (Out B G C) by (conclude lemma_ray4).
assert (Out B C G) by (conclude lemma_ray5).
assert (CongA C G K G B A) by (conclude lemma_equalangleshelper).
assert (Col B G C) by (conclude_def Col ).
assert (Col C B G) by (forward_using lemma_collinearorder).
assert (BetS C F D) by (conclude axiom_betweennesssymmetry).
assert (neq C F) by (forward_using lemma_betweennotequal).
assert (Out C F D) by (conclude lemma_ray4).
assert (Out C D F) by (conclude lemma_ray5).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).

*****
H114 : Col B C C
H113 : eq C C
H112 : Out C D F
H111 : Out C F D
H110 : neq C F
H109 : BetS C F D
H108 : Col C B G
H107 : Col B G C
H106 : CongA C G K G B A
H105 : Out B C G
H104 : Out B G C
H103 : neq B G
H102 : Out B A A
H101 : eq A A
H100 : CongA C G K C B A
H99 : CongA C B A C G K
H98 : CongA D C B F C G
H97 : Out C B G
H96 : Out C G B
H95 : neq C G
H94 : BetS C G B
H93 : Out C D F
H92 : Out C F D
H91 : neq C F
H90 : BetS C F D
H89 : CongA D C B D C B
H88 : nCol D C B
H87 : nCol D B C
H86 : RT F C G C G K
H85 : BetS c C G
H84 : BetS C G B
H83 : OS F K C G
H82 : OS K F C G
H81 : RT D C B C B A
H80 : Par C D B A
H79 : BetS c C B
H78 : Cong C c B C
H77 : BetS B C c
c : Point
H76 : neq B C
H75 : Par E K G B
H74 : Par E K B G
H73 : CongA A E K E B G
H72 : Out B A E
H71 : Out B E A
H70 : OS K G E B
H69 : OS K G B E
H68 : Col B B E
H67 : eq B B
H66 : Out B C G
H65 : Out B G C
H64 : OS K C B E
H63 : OS C K B E
H62 : OS H K B E
H61 : OS H K E B
H60 : Col E A B
H59 : OS C H B E
H58 : Out A D H
H57 : Out A H D
H56 : OS C D B E
H55 : neq B E
H54 : neq E B
H53 : Col B A E
H52 : Col A E B
H51 : OS C D B A
H50 : CongA A E K A B C
H49 : CongA H A E D A B
H48 : CongA E A H B A D
H47 : CongA E A H E A H
H46 : nCol E A H
H45 : nCol A H E
H44 : Out A H D
H43 : Out A E B
H42 : RT H A E A E K
H41 : OS H K A E
H40 : BetS e A E
H39 : BetS E A e
H38 : BetS B E A
H37 : RT D A B A B C
H36 : OS D C A B
H35 : BetS e A B
H34 : Cong A e B A
H33 : BetS B A e
e : Point
H32 : neq B A
H31 : neq A B
H30 : neq B G
H29 : neq A H
H28 : neq A E
H27 : OS K F G C
H26 : OS H K E A
H25 : OS C D A B
H24 : OS D A C B
H23 : OS A D C B
H22 : OS A D B C
H21 : TP B C A D
H20 : TP G C K F
H19 : TP E A H K
H18 : TP A B C D
H17 : Par A H E K
H16 : Par C D A B
H15 : Par B C A D
H14 : Par G C K F
H13 : Par C F G K
H12 : Par F C G K
H11 : Par G K F C
H10 : Par E K A H
H9 : Par E A H K
H8 : Par A B C D
H7 : Par A D B C
H6 : PG G K F C
H5 : PG E A H K
H4 : BetS B G C
H3 : BetS D F C
H2 : BetS A E B
H1 : BetS A H D
H0 : PG A B C D
A,B,C,D,E,F,G,H,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
PG E K G B
+++++
assert (OS A F B C) by (conclude lemma_sameside2).
-----
Lemma proposition_43B : forall A B C D E F G H K, PG A B C D -> BetS A H D -> BetS A E B -> BetS D F C -> BetS B G C -> PG E A H K -> PG G K F C -> PG E K G B.
Proof.
intros.
assert (Par A D B C) by (conclude_def PG ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par E A H K) by (conclude_def PG ).
assert (Par E K A H) by (conclude_def PG ).
assert (Par G K F C) by (conclude_def PG ).
assert (Par F C G K) by (conclude lemma_parallelsymmetric).
assert (Par C F G K) by (forward_using lemma_parallelflip).
assert (Par G C K F) by (conclude_def PG ).
assert (Par B C A D) by (conclude lemma_parallelsymmetric).
assert (Par C D A B) by (conclude lemma_parallelsymmetric).
assert (Par A H E K) by (conclude lemma_parallelsymmetric).
assert (TP A B C D) by (conclude lemma_paralleldef2B).
assert (TP E A H K) by (conclude lemma_paralleldef2B).
assert (TP G C K F) by (conclude lemma_paralleldef2B).
assert (TP B C A D) by (conclude lemma_paralleldef2B).
assert (OS A D B C) by (conclude_def TP ).
assert (OS A D C B) by (conclude lemma_samesideflip).
assert (OS D A C B) by (forward_using lemma_samesidesymmetric).
assert (OS C D A B) by (conclude_def TP ).
assert (OS H K E A) by (conclude_def TP ).
assert (OS K F G C) by (conclude_def TP ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (neq A H) by (forward_using lemma_betweennotequal).
assert (neq B G) by (forward_using lemma_betweennotequal).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists e, (BetS B A e /\\ Cong A e B A)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (BetS e A B) by (conclude axiom_betweennesssymmetry).
assert (OS D C A B) by (forward_using lemma_samesidesymmetric).
assert (RT D A B A B C) by (conclude proposition_29C).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert (BetS E A e) by (conclude lemma_3_6a).
assert (BetS e A E) by (conclude axiom_betweennesssymmetry).
assert (OS H K A E) by (forward_using lemma_samesidesymmetric).
assert (RT H A E A E K) by (conclude proposition_29C).
assert (Out A E B) by (conclude lemma_ray4).
assert (Out A H D) by (conclude lemma_ray4).
assert (nCol A H E) by (forward_using lemma_parallelNC).
assert (nCol E A H) by (forward_using lemma_NCorder).
assert (CongA E A H E A H) by (conclude lemma_equalanglesreflexive).
assert (CongA E A H B A D) by (conclude lemma_equalangleshelper).
assert (CongA H A E D A B) by (conclude lemma_equalanglesflip).
assert (CongA A E K A B C) by (apply (lemma_supplements2 H A E A B C D A B A E K);eauto).
assert (OS C D B A) by (conclude lemma_samesideflip).
assert (Col A E B) by (conclude_def Col ).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq E B) by (forward_using lemma_betweennotequal).
assert (neq B E) by (conclude lemma_inequalitysymmetric).
assert (OS C D B E) by (conclude lemma_samesidecollinear).
assert (Out A H D) by (conclude lemma_ray4).
assert (Out A D H) by (conclude lemma_ray5).
assert (OS C H B E) by (conclude lemma_sameside2).
assert (Col E A B) by (forward_using lemma_collinearorder).
assert (OS H K E B) by (conclude lemma_samesidecollinear).
assert (OS H K B E) by (conclude lemma_samesideflip).
assert (OS C K B E) by (conclude lemma_samesidetransitive).
assert (OS K C B E) by (forward_using lemma_samesidesymmetric).
assert (Out B G C) by (conclude lemma_ray4).
assert (Out B C G) by (conclude lemma_ray5).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (Col B B E) by (conclude_def Col ).
assert (OS K G B E) by (conclude lemma_sameside2).
assert (OS K G E B) by (conclude lemma_samesideflip).
assert (Out B E A) by (conclude lemma_ray4).
assert (Out B A E) by (conclude lemma_ray5).
assert (CongA A E K E B G) by (conclude lemma_equalangleshelper).
assert (Par E K B G) by (conclude proposition_28D).
assert (Par E K G B) by (forward_using lemma_parallelflip).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists c, (BetS B C c /\\ Cong C c B C)) by (conclude lemma_extension);destruct Tf as [c];spliter.
assert (BetS c C B) by (conclude axiom_betweennesssymmetry).
assert (Par C D B A) by (forward_using lemma_parallelflip).
assert (RT D C B C B A) by (conclude proposition_29C).
assert (OS K F C G) by (conclude lemma_samesideflip).
assert (OS F K C G) by (forward_using lemma_samesidesymmetric).
assert (BetS C G B) by (conclude axiom_betweennesssymmetry).
assert (BetS c C G) by (conclude axiom_innertransitivity).
assert (RT F C G C G K) by (conclude proposition_29C).
assert (nCol D B C) by (forward_using lemma_parallelNC).
assert (nCol D C B) by (forward_using lemma_NCorder).
assert (CongA D C B D C B) by (conclude lemma_equalanglesreflexive).
assert (BetS C F D) by (conclude axiom_betweennesssymmetry).
assert (neq C F) by (forward_using lemma_betweennotequal).
assert (Out C F D) by (conclude lemma_ray4).
assert (Out C D F) by (conclude lemma_ray5).
assert (BetS C G B) by (conclude axiom_betweennesssymmetry).
assert (neq C G) by (forward_using lemma_betweennotequal).
assert (Out C G B) by (conclude lemma_ray4).
assert (Out C B G) by (conclude lemma_ray5).
assert (CongA D C B F C G) by (conclude lemma_equalangleshelper).
assert (CongA C B A C G K) by (conclude (lemma_supplements2 D C B C G K F C G C B A)).
assert (CongA C G K C B A) by (conclude lemma_equalanglessymmetric).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out B A A) by (conclude lemma_ray4).
assert (neq B G) by (forward_using lemma_betweennotequal).
assert (Out B G C) by (conclude lemma_ray4).
assert (Out B C G) by (conclude lemma_ray5).
assert (CongA C G K G B A) by (conclude lemma_equalangleshelper).
assert (Col B G C) by (conclude_def Col ).
assert (Col C B G) by (forward_using lemma_collinearorder).
assert (BetS C F D) by (conclude axiom_betweennesssymmetry).
assert (neq C F) by (forward_using lemma_betweennotequal).
assert (Out C F D) by (conclude lemma_ray4).
assert (Out C D F) by (conclude lemma_ray5).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (OS A F B C) by (conclude lemma_sameside2).

*****
H115 : OS A F B C
H114 : Col B C C
H113 : eq C C
H112 : Out C D F
H111 : Out C F D
H110 : neq C F
H109 : BetS C F D
H108 : Col C B G
H107 : Col B G C
H106 : CongA C G K G B A
H105 : Out B C G
H104 : Out B G C
H103 : neq B G
H102 : Out B A A
H101 : eq A A
H100 : CongA C G K C B A
H99 : CongA C B A C G K
H98 : CongA D C B F C G
H97 : Out C B G
H96 : Out C G B
H95 : neq C G
H94 : BetS C G B
H93 : Out C D F
H92 : Out C F D
H91 : neq C F
H90 : BetS C F D
H89 : CongA D C B D C B
H88 : nCol D C B
H87 : nCol D B C
H86 : RT F C G C G K
H85 : BetS c C G
H84 : BetS C G B
H83 : OS F K C G
H82 : OS K F C G
H81 : RT D C B C B A
H80 : Par C D B A
H79 : BetS c C B
H78 : Cong C c B C
H77 : BetS B C c
c : Point
H76 : neq B C
H75 : Par E K G B
H74 : Par E K B G
H73 : CongA A E K E B G
H72 : Out B A E
H71 : Out B E A
H70 : OS K G E B
H69 : OS K G B E
H68 : Col B B E
H67 : eq B B
H66 : Out B C G
H65 : Out B G C
H64 : OS K C B E
H63 : OS C K B E
H62 : OS H K B E
H61 : OS H K E B
H60 : Col E A B
H59 : OS C H B E
H58 : Out A D H
H57 : Out A H D
H56 : OS C D B E
H55 : neq B E
H54 : neq E B
H53 : Col B A E
H52 : Col A E B
H51 : OS C D B A
H50 : CongA A E K A B C
H49 : CongA H A E D A B
H48 : CongA E A H B A D
H47 : CongA E A H E A H
H46 : nCol E A H
H45 : nCol A H E
H44 : Out A H D
H43 : Out A E B
H42 : RT H A E A E K
H41 : OS H K A E
H40 : BetS e A E
H39 : BetS E A e
H38 : BetS B E A
H37 : RT D A B A B C
H36 : OS D C A B
H35 : BetS e A B
H34 : Cong A e B A
H33 : BetS B A e
e : Point
H32 : neq B A
H31 : neq A B
H30 : neq B G
H29 : neq A H
H28 : neq A E
H27 : OS K F G C
H26 : OS H K E A
H25 : OS C D A B
H24 : OS D A C B
H23 : OS A D C B
H22 : OS A D B C
H21 : TP B C A D
H20 : TP G C K F
H19 : TP E A H K
H18 : TP A B C D
H17 : Par A H E K
H16 : Par C D A B
H15 : Par B C A D
H14 : Par G C K F
H13 : Par C F G K
H12 : Par F C G K
H11 : Par G K F C
H10 : Par E K A H
H9 : Par E A H K
H8 : Par A B C D
H7 : Par A D B C
H6 : PG G K F C
H5 : PG E A H K
H4 : BetS B G C
H3 : BetS D F C
H2 : BetS A E B
H1 : BetS A H D
H0 : PG A B C D
A,B,C,D,E,F,G,H,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
PG E K G B
+++++
assert (TP G C K F) by (conclude lemma_paralleldef2B).
-----
Lemma proposition_43B : forall A B C D E F G H K, PG A B C D -> BetS A H D -> BetS A E B -> BetS D F C -> BetS B G C -> PG E A H K -> PG G K F C -> PG E K G B.
Proof.
intros.
assert (Par A D B C) by (conclude_def PG ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par E A H K) by (conclude_def PG ).
assert (Par E K A H) by (conclude_def PG ).
assert (Par G K F C) by (conclude_def PG ).
assert (Par F C G K) by (conclude lemma_parallelsymmetric).
assert (Par C F G K) by (forward_using lemma_parallelflip).
assert (Par G C K F) by (conclude_def PG ).
assert (Par B C A D) by (conclude lemma_parallelsymmetric).
assert (Par C D A B) by (conclude lemma_parallelsymmetric).
assert (Par A H E K) by (conclude lemma_parallelsymmetric).
assert (TP A B C D) by (conclude lemma_paralleldef2B).
assert (TP E A H K) by (conclude lemma_paralleldef2B).
assert (TP G C K F) by (conclude lemma_paralleldef2B).
assert (TP B C A D) by (conclude lemma_paralleldef2B).
assert (OS A D B C) by (conclude_def TP ).
assert (OS A D C B) by (conclude lemma_samesideflip).
assert (OS D A C B) by (forward_using lemma_samesidesymmetric).
assert (OS C D A B) by (conclude_def TP ).
assert (OS H K E A) by (conclude_def TP ).
assert (OS K F G C) by (conclude_def TP ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (neq A H) by (forward_using lemma_betweennotequal).
assert (neq B G) by (forward_using lemma_betweennotequal).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists e, (BetS B A e /\\ Cong A e B A)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (BetS e A B) by (conclude axiom_betweennesssymmetry).
assert (OS D C A B) by (forward_using lemma_samesidesymmetric).
assert (RT D A B A B C) by (conclude proposition_29C).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert (BetS E A e) by (conclude lemma_3_6a).
assert (BetS e A E) by (conclude axiom_betweennesssymmetry).
assert (OS H K A E) by (forward_using lemma_samesidesymmetric).
assert (RT H A E A E K) by (conclude proposition_29C).
assert (Out A E B) by (conclude lemma_ray4).
assert (Out A H D) by (conclude lemma_ray4).
assert (nCol A H E) by (forward_using lemma_parallelNC).
assert (nCol E A H) by (forward_using lemma_NCorder).
assert (CongA E A H E A H) by (conclude lemma_equalanglesreflexive).
assert (CongA E A H B A D) by (conclude lemma_equalangleshelper).
assert (CongA H A E D A B) by (conclude lemma_equalanglesflip).
assert (CongA A E K A B C) by (apply (lemma_supplements2 H A E A B C D A B A E K);eauto).
assert (OS C D B A) by (conclude lemma_samesideflip).
assert (Col A E B) by (conclude_def Col ).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq E B) by (forward_using lemma_betweennotequal).
assert (neq B E) by (conclude lemma_inequalitysymmetric).
assert (OS C D B E) by (conclude lemma_samesidecollinear).
assert (Out A H D) by (conclude lemma_ray4).
assert (Out A D H) by (conclude lemma_ray5).
assert (OS C H B E) by (conclude lemma_sameside2).
assert (Col E A B) by (forward_using lemma_collinearorder).
assert (OS H K E B) by (conclude lemma_samesidecollinear).
assert (OS H K B E) by (conclude lemma_samesideflip).
assert (OS C K B E) by (conclude lemma_samesidetransitive).
assert (OS K C B E) by (forward_using lemma_samesidesymmetric).
assert (Out B G C) by (conclude lemma_ray4).
assert (Out B C G) by (conclude lemma_ray5).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (Col B B E) by (conclude_def Col ).
assert (OS K G B E) by (conclude lemma_sameside2).
assert (OS K G E B) by (conclude lemma_samesideflip).
assert (Out B E A) by (conclude lemma_ray4).
assert (Out B A E) by (conclude lemma_ray5).
assert (CongA A E K E B G) by (conclude lemma_equalangleshelper).
assert (Par E K B G) by (conclude proposition_28D).
assert (Par E K G B) by (forward_using lemma_parallelflip).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists c, (BetS B C c /\\ Cong C c B C)) by (conclude lemma_extension);destruct Tf as [c];spliter.
assert (BetS c C B) by (conclude axiom_betweennesssymmetry).
assert (Par C D B A) by (forward_using lemma_parallelflip).
assert (RT D C B C B A) by (conclude proposition_29C).
assert (OS K F C G) by (conclude lemma_samesideflip).
assert (OS F K C G) by (forward_using lemma_samesidesymmetric).
assert (BetS C G B) by (conclude axiom_betweennesssymmetry).
assert (BetS c C G) by (conclude axiom_innertransitivity).
assert (RT F C G C G K) by (conclude proposition_29C).
assert (nCol D B C) by (forward_using lemma_parallelNC).
assert (nCol D C B) by (forward_using lemma_NCorder).
assert (CongA D C B D C B) by (conclude lemma_equalanglesreflexive).
assert (BetS C F D) by (conclude axiom_betweennesssymmetry).
assert (neq C F) by (forward_using lemma_betweennotequal).
assert (Out C F D) by (conclude lemma_ray4).
assert (Out C D F) by (conclude lemma_ray5).
assert (BetS C G B) by (conclude axiom_betweennesssymmetry).
assert (neq C G) by (forward_using lemma_betweennotequal).
assert (Out C G B) by (conclude lemma_ray4).
assert (Out C B G) by (conclude lemma_ray5).
assert (CongA D C B F C G) by (conclude lemma_equalangleshelper).
assert (CongA C B A C G K) by (conclude (lemma_supplements2 D C B C G K F C G C B A)).
assert (CongA C G K C B A) by (conclude lemma_equalanglessymmetric).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out B A A) by (conclude lemma_ray4).
assert (neq B G) by (forward_using lemma_betweennotequal).
assert (Out B G C) by (conclude lemma_ray4).
assert (Out B C G) by (conclude lemma_ray5).
assert (CongA C G K G B A) by (conclude lemma_equalangleshelper).
assert (Col B G C) by (conclude_def Col ).
assert (Col C B G) by (forward_using lemma_collinearorder).
assert (BetS C F D) by (conclude axiom_betweennesssymmetry).
assert (neq C F) by (forward_using lemma_betweennotequal).
assert (Out C F D) by (conclude lemma_ray4).
assert (Out C D F) by (conclude lemma_ray5).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (OS A F B C) by (conclude lemma_sameside2).
assert (TP G C K F) by (conclude lemma_paralleldef2B).

*****
H116 : TP G C K F
H115 : OS A F B C
H114 : Col B C C
H113 : eq C C
H112 : Out C D F
H111 : Out C F D
H110 : neq C F
H109 : BetS C F D
H108 : Col C B G
H107 : Col B G C
H106 : CongA C G K G B A
H105 : Out B C G
H104 : Out B G C
H103 : neq B G
H102 : Out B A A
H101 : eq A A
H100 : CongA C G K C B A
H99 : CongA C B A C G K
H98 : CongA D C B F C G
H97 : Out C B G
H96 : Out C G B
H95 : neq C G
H94 : BetS C G B
H93 : Out C D F
H92 : Out C F D
H91 : neq C F
H90 : BetS C F D
H89 : CongA D C B D C B
H88 : nCol D C B
H87 : nCol D B C
H86 : RT F C G C G K
H85 : BetS c C G
H84 : BetS C G B
H83 : OS F K C G
H82 : OS K F C G
H81 : RT D C B C B A
H80 : Par C D B A
H79 : BetS c C B
H78 : Cong C c B C
H77 : BetS B C c
c : Point
H76 : neq B C
H75 : Par E K G B
H74 : Par E K B G
H73 : CongA A E K E B G
H72 : Out B A E
H71 : Out B E A
H70 : OS K G E B
H69 : OS K G B E
H68 : Col B B E
H67 : eq B B
H66 : Out B C G
H65 : Out B G C
H64 : OS K C B E
H63 : OS C K B E
H62 : OS H K B E
H61 : OS H K E B
H60 : Col E A B
H59 : OS C H B E
H58 : Out A D H
H57 : Out A H D
H56 : OS C D B E
H55 : neq B E
H54 : neq E B
H53 : Col B A E
H52 : Col A E B
H51 : OS C D B A
H50 : CongA A E K A B C
H49 : CongA H A E D A B
H48 : CongA E A H B A D
H47 : CongA E A H E A H
H46 : nCol E A H
H45 : nCol A H E
H44 : Out A H D
H43 : Out A E B
H42 : RT H A E A E K
H41 : OS H K A E
H40 : BetS e A E
H39 : BetS E A e
H38 : BetS B E A
H37 : RT D A B A B C
H36 : OS D C A B
H35 : BetS e A B
H34 : Cong A e B A
H33 : BetS B A e
e : Point
H32 : neq B A
H31 : neq A B
H30 : neq B G
H29 : neq A H
H28 : neq A E
H27 : OS K F G C
H26 : OS H K E A
H25 : OS C D A B
H24 : OS D A C B
H23 : OS A D C B
H22 : OS A D B C
H21 : TP B C A D
H20 : TP G C K F
H19 : TP E A H K
H18 : TP A B C D
H17 : Par A H E K
H16 : Par C D A B
H15 : Par B C A D
H14 : Par G C K F
H13 : Par C F G K
H12 : Par F C G K
H11 : Par G K F C
H10 : Par E K A H
H9 : Par E A H K
H8 : Par A B C D
H7 : Par A D B C
H6 : PG G K F C
H5 : PG E A H K
H4 : BetS B G C
H3 : BetS D F C
H2 : BetS A E B
H1 : BetS A H D
H0 : PG A B C D
A,B,C,D,E,F,G,H,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
PG E K G B
+++++
assert (OS K F G C) by (conclude_def TP ).
-----
Lemma proposition_43B : forall A B C D E F G H K, PG A B C D -> BetS A H D -> BetS A E B -> BetS D F C -> BetS B G C -> PG E A H K -> PG G K F C -> PG E K G B.
Proof.
intros.
assert (Par A D B C) by (conclude_def PG ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par E A H K) by (conclude_def PG ).
assert (Par E K A H) by (conclude_def PG ).
assert (Par G K F C) by (conclude_def PG ).
assert (Par F C G K) by (conclude lemma_parallelsymmetric).
assert (Par C F G K) by (forward_using lemma_parallelflip).
assert (Par G C K F) by (conclude_def PG ).
assert (Par B C A D) by (conclude lemma_parallelsymmetric).
assert (Par C D A B) by (conclude lemma_parallelsymmetric).
assert (Par A H E K) by (conclude lemma_parallelsymmetric).
assert (TP A B C D) by (conclude lemma_paralleldef2B).
assert (TP E A H K) by (conclude lemma_paralleldef2B).
assert (TP G C K F) by (conclude lemma_paralleldef2B).
assert (TP B C A D) by (conclude lemma_paralleldef2B).
assert (OS A D B C) by (conclude_def TP ).
assert (OS A D C B) by (conclude lemma_samesideflip).
assert (OS D A C B) by (forward_using lemma_samesidesymmetric).
assert (OS C D A B) by (conclude_def TP ).
assert (OS H K E A) by (conclude_def TP ).
assert (OS K F G C) by (conclude_def TP ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (neq A H) by (forward_using lemma_betweennotequal).
assert (neq B G) by (forward_using lemma_betweennotequal).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists e, (BetS B A e /\\ Cong A e B A)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (BetS e A B) by (conclude axiom_betweennesssymmetry).
assert (OS D C A B) by (forward_using lemma_samesidesymmetric).
assert (RT D A B A B C) by (conclude proposition_29C).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert (BetS E A e) by (conclude lemma_3_6a).
assert (BetS e A E) by (conclude axiom_betweennesssymmetry).
assert (OS H K A E) by (forward_using lemma_samesidesymmetric).
assert (RT H A E A E K) by (conclude proposition_29C).
assert (Out A E B) by (conclude lemma_ray4).
assert (Out A H D) by (conclude lemma_ray4).
assert (nCol A H E) by (forward_using lemma_parallelNC).
assert (nCol E A H) by (forward_using lemma_NCorder).
assert (CongA E A H E A H) by (conclude lemma_equalanglesreflexive).
assert (CongA E A H B A D) by (conclude lemma_equalangleshelper).
assert (CongA H A E D A B) by (conclude lemma_equalanglesflip).
assert (CongA A E K A B C) by (apply (lemma_supplements2 H A E A B C D A B A E K);eauto).
assert (OS C D B A) by (conclude lemma_samesideflip).
assert (Col A E B) by (conclude_def Col ).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq E B) by (forward_using lemma_betweennotequal).
assert (neq B E) by (conclude lemma_inequalitysymmetric).
assert (OS C D B E) by (conclude lemma_samesidecollinear).
assert (Out A H D) by (conclude lemma_ray4).
assert (Out A D H) by (conclude lemma_ray5).
assert (OS C H B E) by (conclude lemma_sameside2).
assert (Col E A B) by (forward_using lemma_collinearorder).
assert (OS H K E B) by (conclude lemma_samesidecollinear).
assert (OS H K B E) by (conclude lemma_samesideflip).
assert (OS C K B E) by (conclude lemma_samesidetransitive).
assert (OS K C B E) by (forward_using lemma_samesidesymmetric).
assert (Out B G C) by (conclude lemma_ray4).
assert (Out B C G) by (conclude lemma_ray5).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (Col B B E) by (conclude_def Col ).
assert (OS K G B E) by (conclude lemma_sameside2).
assert (OS K G E B) by (conclude lemma_samesideflip).
assert (Out B E A) by (conclude lemma_ray4).
assert (Out B A E) by (conclude lemma_ray5).
assert (CongA A E K E B G) by (conclude lemma_equalangleshelper).
assert (Par E K B G) by (conclude proposition_28D).
assert (Par E K G B) by (forward_using lemma_parallelflip).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists c, (BetS B C c /\\ Cong C c B C)) by (conclude lemma_extension);destruct Tf as [c];spliter.
assert (BetS c C B) by (conclude axiom_betweennesssymmetry).
assert (Par C D B A) by (forward_using lemma_parallelflip).
assert (RT D C B C B A) by (conclude proposition_29C).
assert (OS K F C G) by (conclude lemma_samesideflip).
assert (OS F K C G) by (forward_using lemma_samesidesymmetric).
assert (BetS C G B) by (conclude axiom_betweennesssymmetry).
assert (BetS c C G) by (conclude axiom_innertransitivity).
assert (RT F C G C G K) by (conclude proposition_29C).
assert (nCol D B C) by (forward_using lemma_parallelNC).
assert (nCol D C B) by (forward_using lemma_NCorder).
assert (CongA D C B D C B) by (conclude lemma_equalanglesreflexive).
assert (BetS C F D) by (conclude axiom_betweennesssymmetry).
assert (neq C F) by (forward_using lemma_betweennotequal).
assert (Out C F D) by (conclude lemma_ray4).
assert (Out C D F) by (conclude lemma_ray5).
assert (BetS C G B) by (conclude axiom_betweennesssymmetry).
assert (neq C G) by (forward_using lemma_betweennotequal).
assert (Out C G B) by (conclude lemma_ray4).
assert (Out C B G) by (conclude lemma_ray5).
assert (CongA D C B F C G) by (conclude lemma_equalangleshelper).
assert (CongA C B A C G K) by (conclude (lemma_supplements2 D C B C G K F C G C B A)).
assert (CongA C G K C B A) by (conclude lemma_equalanglessymmetric).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out B A A) by (conclude lemma_ray4).
assert (neq B G) by (forward_using lemma_betweennotequal).
assert (Out B G C) by (conclude lemma_ray4).
assert (Out B C G) by (conclude lemma_ray5).
assert (CongA C G K G B A) by (conclude lemma_equalangleshelper).
assert (Col B G C) by (conclude_def Col ).
assert (Col C B G) by (forward_using lemma_collinearorder).
assert (BetS C F D) by (conclude axiom_betweennesssymmetry).
assert (neq C F) by (forward_using lemma_betweennotequal).
assert (Out C F D) by (conclude lemma_ray4).
assert (Out C D F) by (conclude lemma_ray5).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (OS A F B C) by (conclude lemma_sameside2).
assert (TP G C K F) by (conclude lemma_paralleldef2B).
assert (OS K F G C) by (conclude_def TP ).

*****
H117 : OS K F G C
H116 : TP G C K F
H115 : OS A F B C
H114 : Col B C C
H113 : eq C C
H112 : Out C D F
H111 : Out C F D
H110 : neq C F
H109 : BetS C F D
H108 : Col C B G
H107 : Col B G C
H106 : CongA C G K G B A
H105 : Out B C G
H104 : Out B G C
H103 : neq B G
H102 : Out B A A
H101 : eq A A
H100 : CongA C G K C B A
H99 : CongA C B A C G K
H98 : CongA D C B F C G
H97 : Out C B G
H96 : Out C G B
H95 : neq C G
H94 : BetS C G B
H93 : Out C D F
H92 : Out C F D
H91 : neq C F
H90 : BetS C F D
H89 : CongA D C B D C B
H88 : nCol D C B
H87 : nCol D B C
H86 : RT F C G C G K
H85 : BetS c C G
H84 : BetS C G B
H83 : OS F K C G
H82 : OS K F C G
H81 : RT D C B C B A
H80 : Par C D B A
H79 : BetS c C B
H78 : Cong C c B C
H77 : BetS B C c
c : Point
H76 : neq B C
H75 : Par E K G B
H74 : Par E K B G
H73 : CongA A E K E B G
H72 : Out B A E
H71 : Out B E A
H70 : OS K G E B
H69 : OS K G B E
H68 : Col B B E
H67 : eq B B
H66 : Out B C G
H65 : Out B G C
H64 : OS K C B E
H63 : OS C K B E
H62 : OS H K B E
H61 : OS H K E B
H60 : Col E A B
H59 : OS C H B E
H58 : Out A D H
H57 : Out A H D
H56 : OS C D B E
H55 : neq B E
H54 : neq E B
H53 : Col B A E
H52 : Col A E B
H51 : OS C D B A
H50 : CongA A E K A B C
H49 : CongA H A E D A B
H48 : CongA E A H B A D
H47 : CongA E A H E A H
H46 : nCol E A H
H45 : nCol A H E
H44 : Out A H D
H43 : Out A E B
H42 : RT H A E A E K
H41 : OS H K A E
H40 : BetS e A E
H39 : BetS E A e
H38 : BetS B E A
H37 : RT D A B A B C
H36 : OS D C A B
H35 : BetS e A B
H34 : Cong A e B A
H33 : BetS B A e
e : Point
H32 : neq B A
H31 : neq A B
H30 : neq B G
H29 : neq A H
H28 : neq A E
H27 : OS K F G C
H26 : OS H K E A
H25 : OS C D A B
H24 : OS D A C B
H23 : OS A D C B
H22 : OS A D B C
H21 : TP B C A D
H20 : TP G C K F
H19 : TP E A H K
H18 : TP A B C D
H17 : Par A H E K
H16 : Par C D A B
H15 : Par B C A D
H14 : Par G C K F
H13 : Par C F G K
H12 : Par F C G K
H11 : Par G K F C
H10 : Par E K A H
H9 : Par E A H K
H8 : Par A B C D
H7 : Par A D B C
H6 : PG G K F C
H5 : PG E A H K
H4 : BetS B G C
H3 : BetS D F C
H2 : BetS A E B
H1 : BetS A H D
H0 : PG A B C D
A,B,C,D,E,F,G,H,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
PG E K G B
+++++
assert (Col C G B) by (forward_using lemma_collinearorder).
-----
Lemma proposition_43B : forall A B C D E F G H K, PG A B C D -> BetS A H D -> BetS A E B -> BetS D F C -> BetS B G C -> PG E A H K -> PG G K F C -> PG E K G B.
Proof.
intros.
assert (Par A D B C) by (conclude_def PG ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par E A H K) by (conclude_def PG ).
assert (Par E K A H) by (conclude_def PG ).
assert (Par G K F C) by (conclude_def PG ).
assert (Par F C G K) by (conclude lemma_parallelsymmetric).
assert (Par C F G K) by (forward_using lemma_parallelflip).
assert (Par G C K F) by (conclude_def PG ).
assert (Par B C A D) by (conclude lemma_parallelsymmetric).
assert (Par C D A B) by (conclude lemma_parallelsymmetric).
assert (Par A H E K) by (conclude lemma_parallelsymmetric).
assert (TP A B C D) by (conclude lemma_paralleldef2B).
assert (TP E A H K) by (conclude lemma_paralleldef2B).
assert (TP G C K F) by (conclude lemma_paralleldef2B).
assert (TP B C A D) by (conclude lemma_paralleldef2B).
assert (OS A D B C) by (conclude_def TP ).
assert (OS A D C B) by (conclude lemma_samesideflip).
assert (OS D A C B) by (forward_using lemma_samesidesymmetric).
assert (OS C D A B) by (conclude_def TP ).
assert (OS H K E A) by (conclude_def TP ).
assert (OS K F G C) by (conclude_def TP ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (neq A H) by (forward_using lemma_betweennotequal).
assert (neq B G) by (forward_using lemma_betweennotequal).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists e, (BetS B A e /\\ Cong A e B A)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (BetS e A B) by (conclude axiom_betweennesssymmetry).
assert (OS D C A B) by (forward_using lemma_samesidesymmetric).
assert (RT D A B A B C) by (conclude proposition_29C).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert (BetS E A e) by (conclude lemma_3_6a).
assert (BetS e A E) by (conclude axiom_betweennesssymmetry).
assert (OS H K A E) by (forward_using lemma_samesidesymmetric).
assert (RT H A E A E K) by (conclude proposition_29C).
assert (Out A E B) by (conclude lemma_ray4).
assert (Out A H D) by (conclude lemma_ray4).
assert (nCol A H E) by (forward_using lemma_parallelNC).
assert (nCol E A H) by (forward_using lemma_NCorder).
assert (CongA E A H E A H) by (conclude lemma_equalanglesreflexive).
assert (CongA E A H B A D) by (conclude lemma_equalangleshelper).
assert (CongA H A E D A B) by (conclude lemma_equalanglesflip).
assert (CongA A E K A B C) by (apply (lemma_supplements2 H A E A B C D A B A E K);eauto).
assert (OS C D B A) by (conclude lemma_samesideflip).
assert (Col A E B) by (conclude_def Col ).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq E B) by (forward_using lemma_betweennotequal).
assert (neq B E) by (conclude lemma_inequalitysymmetric).
assert (OS C D B E) by (conclude lemma_samesidecollinear).
assert (Out A H D) by (conclude lemma_ray4).
assert (Out A D H) by (conclude lemma_ray5).
assert (OS C H B E) by (conclude lemma_sameside2).
assert (Col E A B) by (forward_using lemma_collinearorder).
assert (OS H K E B) by (conclude lemma_samesidecollinear).
assert (OS H K B E) by (conclude lemma_samesideflip).
assert (OS C K B E) by (conclude lemma_samesidetransitive).
assert (OS K C B E) by (forward_using lemma_samesidesymmetric).
assert (Out B G C) by (conclude lemma_ray4).
assert (Out B C G) by (conclude lemma_ray5).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (Col B B E) by (conclude_def Col ).
assert (OS K G B E) by (conclude lemma_sameside2).
assert (OS K G E B) by (conclude lemma_samesideflip).
assert (Out B E A) by (conclude lemma_ray4).
assert (Out B A E) by (conclude lemma_ray5).
assert (CongA A E K E B G) by (conclude lemma_equalangleshelper).
assert (Par E K B G) by (conclude proposition_28D).
assert (Par E K G B) by (forward_using lemma_parallelflip).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists c, (BetS B C c /\\ Cong C c B C)) by (conclude lemma_extension);destruct Tf as [c];spliter.
assert (BetS c C B) by (conclude axiom_betweennesssymmetry).
assert (Par C D B A) by (forward_using lemma_parallelflip).
assert (RT D C B C B A) by (conclude proposition_29C).
assert (OS K F C G) by (conclude lemma_samesideflip).
assert (OS F K C G) by (forward_using lemma_samesidesymmetric).
assert (BetS C G B) by (conclude axiom_betweennesssymmetry).
assert (BetS c C G) by (conclude axiom_innertransitivity).
assert (RT F C G C G K) by (conclude proposition_29C).
assert (nCol D B C) by (forward_using lemma_parallelNC).
assert (nCol D C B) by (forward_using lemma_NCorder).
assert (CongA D C B D C B) by (conclude lemma_equalanglesreflexive).
assert (BetS C F D) by (conclude axiom_betweennesssymmetry).
assert (neq C F) by (forward_using lemma_betweennotequal).
assert (Out C F D) by (conclude lemma_ray4).
assert (Out C D F) by (conclude lemma_ray5).
assert (BetS C G B) by (conclude axiom_betweennesssymmetry).
assert (neq C G) by (forward_using lemma_betweennotequal).
assert (Out C G B) by (conclude lemma_ray4).
assert (Out C B G) by (conclude lemma_ray5).
assert (CongA D C B F C G) by (conclude lemma_equalangleshelper).
assert (CongA C B A C G K) by (conclude (lemma_supplements2 D C B C G K F C G C B A)).
assert (CongA C G K C B A) by (conclude lemma_equalanglessymmetric).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out B A A) by (conclude lemma_ray4).
assert (neq B G) by (forward_using lemma_betweennotequal).
assert (Out B G C) by (conclude lemma_ray4).
assert (Out B C G) by (conclude lemma_ray5).
assert (CongA C G K G B A) by (conclude lemma_equalangleshelper).
assert (Col B G C) by (conclude_def Col ).
assert (Col C B G) by (forward_using lemma_collinearorder).
assert (BetS C F D) by (conclude axiom_betweennesssymmetry).
assert (neq C F) by (forward_using lemma_betweennotequal).
assert (Out C F D) by (conclude lemma_ray4).
assert (Out C D F) by (conclude lemma_ray5).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (OS A F B C) by (conclude lemma_sameside2).
assert (TP G C K F) by (conclude lemma_paralleldef2B).
assert (OS K F G C) by (conclude_def TP ).
assert (Col C G B) by (forward_using lemma_collinearorder).

*****
H118 : Col C G B
H117 : OS K F G C
H116 : TP G C K F
H115 : OS A F B C
H114 : Col B C C
H113 : eq C C
H112 : Out C D F
H111 : Out C F D
H110 : neq C F
H109 : BetS C F D
H108 : Col C B G
H107 : Col B G C
H106 : CongA C G K G B A
H105 : Out B C G
H104 : Out B G C
H103 : neq B G
H102 : Out B A A
H101 : eq A A
H100 : CongA C G K C B A
H99 : CongA C B A C G K
H98 : CongA D C B F C G
H97 : Out C B G
H96 : Out C G B
H95 : neq C G
H94 : BetS C G B
H93 : Out C D F
H92 : Out C F D
H91 : neq C F
H90 : BetS C F D
H89 : CongA D C B D C B
H88 : nCol D C B
H87 : nCol D B C
H86 : RT F C G C G K
H85 : BetS c C G
H84 : BetS C G B
H83 : OS F K C G
H82 : OS K F C G
H81 : RT D C B C B A
H80 : Par C D B A
H79 : BetS c C B
H78 : Cong C c B C
H77 : BetS B C c
c : Point
H76 : neq B C
H75 : Par E K G B
H74 : Par E K B G
H73 : CongA A E K E B G
H72 : Out B A E
H71 : Out B E A
H70 : OS K G E B
H69 : OS K G B E
H68 : Col B B E
H67 : eq B B
H66 : Out B C G
H65 : Out B G C
H64 : OS K C B E
H63 : OS C K B E
H62 : OS H K B E
H61 : OS H K E B
H60 : Col E A B
H59 : OS C H B E
H58 : Out A D H
H57 : Out A H D
H56 : OS C D B E
H55 : neq B E
H54 : neq E B
H53 : Col B A E
H52 : Col A E B
H51 : OS C D B A
H50 : CongA A E K A B C
H49 : CongA H A E D A B
H48 : CongA E A H B A D
H47 : CongA E A H E A H
H46 : nCol E A H
H45 : nCol A H E
H44 : Out A H D
H43 : Out A E B
H42 : RT H A E A E K
H41 : OS H K A E
H40 : BetS e A E
H39 : BetS E A e
H38 : BetS B E A
H37 : RT D A B A B C
H36 : OS D C A B
H35 : BetS e A B
H34 : Cong A e B A
H33 : BetS B A e
e : Point
H32 : neq B A
H31 : neq A B
H30 : neq B G
H29 : neq A H
H28 : neq A E
H27 : OS K F G C
H26 : OS H K E A
H25 : OS C D A B
H24 : OS D A C B
H23 : OS A D C B
H22 : OS A D B C
H21 : TP B C A D
H20 : TP G C K F
H19 : TP E A H K
H18 : TP A B C D
H17 : Par A H E K
H16 : Par C D A B
H15 : Par B C A D
H14 : Par G C K F
H13 : Par C F G K
H12 : Par F C G K
H11 : Par G K F C
H10 : Par E K A H
H9 : Par E A H K
H8 : Par A B C D
H7 : Par A D B C
H6 : PG G K F C
H5 : PG E A H K
H4 : BetS B G C
H3 : BetS D F C
H2 : BetS A E B
H1 : BetS A H D
H0 : PG A B C D
A,B,C,D,E,F,G,H,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
PG E K G B
+++++
assert (neq C B) by (conclude lemma_inequalitysymmetric).
-----
Lemma proposition_43B : forall A B C D E F G H K, PG A B C D -> BetS A H D -> BetS A E B -> BetS D F C -> BetS B G C -> PG E A H K -> PG G K F C -> PG E K G B.
Proof.
intros.
assert (Par A D B C) by (conclude_def PG ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par E A H K) by (conclude_def PG ).
assert (Par E K A H) by (conclude_def PG ).
assert (Par G K F C) by (conclude_def PG ).
assert (Par F C G K) by (conclude lemma_parallelsymmetric).
assert (Par C F G K) by (forward_using lemma_parallelflip).
assert (Par G C K F) by (conclude_def PG ).
assert (Par B C A D) by (conclude lemma_parallelsymmetric).
assert (Par C D A B) by (conclude lemma_parallelsymmetric).
assert (Par A H E K) by (conclude lemma_parallelsymmetric).
assert (TP A B C D) by (conclude lemma_paralleldef2B).
assert (TP E A H K) by (conclude lemma_paralleldef2B).
assert (TP G C K F) by (conclude lemma_paralleldef2B).
assert (TP B C A D) by (conclude lemma_paralleldef2B).
assert (OS A D B C) by (conclude_def TP ).
assert (OS A D C B) by (conclude lemma_samesideflip).
assert (OS D A C B) by (forward_using lemma_samesidesymmetric).
assert (OS C D A B) by (conclude_def TP ).
assert (OS H K E A) by (conclude_def TP ).
assert (OS K F G C) by (conclude_def TP ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (neq A H) by (forward_using lemma_betweennotequal).
assert (neq B G) by (forward_using lemma_betweennotequal).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists e, (BetS B A e /\\ Cong A e B A)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (BetS e A B) by (conclude axiom_betweennesssymmetry).
assert (OS D C A B) by (forward_using lemma_samesidesymmetric).
assert (RT D A B A B C) by (conclude proposition_29C).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert (BetS E A e) by (conclude lemma_3_6a).
assert (BetS e A E) by (conclude axiom_betweennesssymmetry).
assert (OS H K A E) by (forward_using lemma_samesidesymmetric).
assert (RT H A E A E K) by (conclude proposition_29C).
assert (Out A E B) by (conclude lemma_ray4).
assert (Out A H D) by (conclude lemma_ray4).
assert (nCol A H E) by (forward_using lemma_parallelNC).
assert (nCol E A H) by (forward_using lemma_NCorder).
assert (CongA E A H E A H) by (conclude lemma_equalanglesreflexive).
assert (CongA E A H B A D) by (conclude lemma_equalangleshelper).
assert (CongA H A E D A B) by (conclude lemma_equalanglesflip).
assert (CongA A E K A B C) by (apply (lemma_supplements2 H A E A B C D A B A E K);eauto).
assert (OS C D B A) by (conclude lemma_samesideflip).
assert (Col A E B) by (conclude_def Col ).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq E B) by (forward_using lemma_betweennotequal).
assert (neq B E) by (conclude lemma_inequalitysymmetric).
assert (OS C D B E) by (conclude lemma_samesidecollinear).
assert (Out A H D) by (conclude lemma_ray4).
assert (Out A D H) by (conclude lemma_ray5).
assert (OS C H B E) by (conclude lemma_sameside2).
assert (Col E A B) by (forward_using lemma_collinearorder).
assert (OS H K E B) by (conclude lemma_samesidecollinear).
assert (OS H K B E) by (conclude lemma_samesideflip).
assert (OS C K B E) by (conclude lemma_samesidetransitive).
assert (OS K C B E) by (forward_using lemma_samesidesymmetric).
assert (Out B G C) by (conclude lemma_ray4).
assert (Out B C G) by (conclude lemma_ray5).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (Col B B E) by (conclude_def Col ).
assert (OS K G B E) by (conclude lemma_sameside2).
assert (OS K G E B) by (conclude lemma_samesideflip).
assert (Out B E A) by (conclude lemma_ray4).
assert (Out B A E) by (conclude lemma_ray5).
assert (CongA A E K E B G) by (conclude lemma_equalangleshelper).
assert (Par E K B G) by (conclude proposition_28D).
assert (Par E K G B) by (forward_using lemma_parallelflip).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists c, (BetS B C c /\\ Cong C c B C)) by (conclude lemma_extension);destruct Tf as [c];spliter.
assert (BetS c C B) by (conclude axiom_betweennesssymmetry).
assert (Par C D B A) by (forward_using lemma_parallelflip).
assert (RT D C B C B A) by (conclude proposition_29C).
assert (OS K F C G) by (conclude lemma_samesideflip).
assert (OS F K C G) by (forward_using lemma_samesidesymmetric).
assert (BetS C G B) by (conclude axiom_betweennesssymmetry).
assert (BetS c C G) by (conclude axiom_innertransitivity).
assert (RT F C G C G K) by (conclude proposition_29C).
assert (nCol D B C) by (forward_using lemma_parallelNC).
assert (nCol D C B) by (forward_using lemma_NCorder).
assert (CongA D C B D C B) by (conclude lemma_equalanglesreflexive).
assert (BetS C F D) by (conclude axiom_betweennesssymmetry).
assert (neq C F) by (forward_using lemma_betweennotequal).
assert (Out C F D) by (conclude lemma_ray4).
assert (Out C D F) by (conclude lemma_ray5).
assert (BetS C G B) by (conclude axiom_betweennesssymmetry).
assert (neq C G) by (forward_using lemma_betweennotequal).
assert (Out C G B) by (conclude lemma_ray4).
assert (Out C B G) by (conclude lemma_ray5).
assert (CongA D C B F C G) by (conclude lemma_equalangleshelper).
assert (CongA C B A C G K) by (conclude (lemma_supplements2 D C B C G K F C G C B A)).
assert (CongA C G K C B A) by (conclude lemma_equalanglessymmetric).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out B A A) by (conclude lemma_ray4).
assert (neq B G) by (forward_using lemma_betweennotequal).
assert (Out B G C) by (conclude lemma_ray4).
assert (Out B C G) by (conclude lemma_ray5).
assert (CongA C G K G B A) by (conclude lemma_equalangleshelper).
assert (Col B G C) by (conclude_def Col ).
assert (Col C B G) by (forward_using lemma_collinearorder).
assert (BetS C F D) by (conclude axiom_betweennesssymmetry).
assert (neq C F) by (forward_using lemma_betweennotequal).
assert (Out C F D) by (conclude lemma_ray4).
assert (Out C D F) by (conclude lemma_ray5).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (OS A F B C) by (conclude lemma_sameside2).
assert (TP G C K F) by (conclude lemma_paralleldef2B).
assert (OS K F G C) by (conclude_def TP ).
assert (Col C G B) by (forward_using lemma_collinearorder).
assert (neq C B) by (conclude lemma_inequalitysymmetric).

*****
H119 : neq C B
H118 : Col C G B
H117 : OS K F G C
H116 : TP G C K F
H115 : OS A F B C
H114 : Col B C C
H113 : eq C C
H112 : Out C D F
H111 : Out C F D
H110 : neq C F
H109 : BetS C F D
H108 : Col C B G
H107 : Col B G C
H106 : CongA C G K G B A
H105 : Out B C G
H104 : Out B G C
H103 : neq B G
H102 : Out B A A
H101 : eq A A
H100 : CongA C G K C B A
H99 : CongA C B A C G K
H98 : CongA D C B F C G
H97 : Out C B G
H96 : Out C G B
H95 : neq C G
H94 : BetS C G B
H93 : Out C D F
H92 : Out C F D
H91 : neq C F
H90 : BetS C F D
H89 : CongA D C B D C B
H88 : nCol D C B
H87 : nCol D B C
H86 : RT F C G C G K
H85 : BetS c C G
H84 : BetS C G B
H83 : OS F K C G
H82 : OS K F C G
H81 : RT D C B C B A
H80 : Par C D B A
H79 : BetS c C B
H78 : Cong C c B C
H77 : BetS B C c
c : Point
H76 : neq B C
H75 : Par E K G B
H74 : Par E K B G
H73 : CongA A E K E B G
H72 : Out B A E
H71 : Out B E A
H70 : OS K G E B
H69 : OS K G B E
H68 : Col B B E
H67 : eq B B
H66 : Out B C G
H65 : Out B G C
H64 : OS K C B E
H63 : OS C K B E
H62 : OS H K B E
H61 : OS H K E B
H60 : Col E A B
H59 : OS C H B E
H58 : Out A D H
H57 : Out A H D
H56 : OS C D B E
H55 : neq B E
H54 : neq E B
H53 : Col B A E
H52 : Col A E B
H51 : OS C D B A
H50 : CongA A E K A B C
H49 : CongA H A E D A B
H48 : CongA E A H B A D
H47 : CongA E A H E A H
H46 : nCol E A H
H45 : nCol A H E
H44 : Out A H D
H43 : Out A E B
H42 : RT H A E A E K
H41 : OS H K A E
H40 : BetS e A E
H39 : BetS E A e
H38 : BetS B E A
H37 : RT D A B A B C
H36 : OS D C A B
H35 : BetS e A B
H34 : Cong A e B A
H33 : BetS B A e
e : Point
H32 : neq B A
H31 : neq A B
H30 : neq B G
H29 : neq A H
H28 : neq A E
H27 : OS K F G C
H26 : OS H K E A
H25 : OS C D A B
H24 : OS D A C B
H23 : OS A D C B
H22 : OS A D B C
H21 : TP B C A D
H20 : TP G C K F
H19 : TP E A H K
H18 : TP A B C D
H17 : Par A H E K
H16 : Par C D A B
H15 : Par B C A D
H14 : Par G C K F
H13 : Par C F G K
H12 : Par F C G K
H11 : Par G K F C
H10 : Par E K A H
H9 : Par E A H K
H8 : Par A B C D
H7 : Par A D B C
H6 : PG G K F C
H5 : PG E A H K
H4 : BetS B G C
H3 : BetS D F C
H2 : BetS A E B
H1 : BetS A H D
H0 : PG A B C D
A,B,C,D,E,F,G,H,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
PG E K G B
+++++
assert (OS K F C G) by (conclude lemma_samesideflip).
-----
Lemma proposition_43B : forall A B C D E F G H K, PG A B C D -> BetS A H D -> BetS A E B -> BetS D F C -> BetS B G C -> PG E A H K -> PG G K F C -> PG E K G B.
Proof.
intros.
assert (Par A D B C) by (conclude_def PG ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par E A H K) by (conclude_def PG ).
assert (Par E K A H) by (conclude_def PG ).
assert (Par G K F C) by (conclude_def PG ).
assert (Par F C G K) by (conclude lemma_parallelsymmetric).
assert (Par C F G K) by (forward_using lemma_parallelflip).
assert (Par G C K F) by (conclude_def PG ).
assert (Par B C A D) by (conclude lemma_parallelsymmetric).
assert (Par C D A B) by (conclude lemma_parallelsymmetric).
assert (Par A H E K) by (conclude lemma_parallelsymmetric).
assert (TP A B C D) by (conclude lemma_paralleldef2B).
assert (TP E A H K) by (conclude lemma_paralleldef2B).
assert (TP G C K F) by (conclude lemma_paralleldef2B).
assert (TP B C A D) by (conclude lemma_paralleldef2B).
assert (OS A D B C) by (conclude_def TP ).
assert (OS A D C B) by (conclude lemma_samesideflip).
assert (OS D A C B) by (forward_using lemma_samesidesymmetric).
assert (OS C D A B) by (conclude_def TP ).
assert (OS H K E A) by (conclude_def TP ).
assert (OS K F G C) by (conclude_def TP ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (neq A H) by (forward_using lemma_betweennotequal).
assert (neq B G) by (forward_using lemma_betweennotequal).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists e, (BetS B A e /\\ Cong A e B A)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (BetS e A B) by (conclude axiom_betweennesssymmetry).
assert (OS D C A B) by (forward_using lemma_samesidesymmetric).
assert (RT D A B A B C) by (conclude proposition_29C).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert (BetS E A e) by (conclude lemma_3_6a).
assert (BetS e A E) by (conclude axiom_betweennesssymmetry).
assert (OS H K A E) by (forward_using lemma_samesidesymmetric).
assert (RT H A E A E K) by (conclude proposition_29C).
assert (Out A E B) by (conclude lemma_ray4).
assert (Out A H D) by (conclude lemma_ray4).
assert (nCol A H E) by (forward_using lemma_parallelNC).
assert (nCol E A H) by (forward_using lemma_NCorder).
assert (CongA E A H E A H) by (conclude lemma_equalanglesreflexive).
assert (CongA E A H B A D) by (conclude lemma_equalangleshelper).
assert (CongA H A E D A B) by (conclude lemma_equalanglesflip).
assert (CongA A E K A B C) by (apply (lemma_supplements2 H A E A B C D A B A E K);eauto).
assert (OS C D B A) by (conclude lemma_samesideflip).
assert (Col A E B) by (conclude_def Col ).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq E B) by (forward_using lemma_betweennotequal).
assert (neq B E) by (conclude lemma_inequalitysymmetric).
assert (OS C D B E) by (conclude lemma_samesidecollinear).
assert (Out A H D) by (conclude lemma_ray4).
assert (Out A D H) by (conclude lemma_ray5).
assert (OS C H B E) by (conclude lemma_sameside2).
assert (Col E A B) by (forward_using lemma_collinearorder).
assert (OS H K E B) by (conclude lemma_samesidecollinear).
assert (OS H K B E) by (conclude lemma_samesideflip).
assert (OS C K B E) by (conclude lemma_samesidetransitive).
assert (OS K C B E) by (forward_using lemma_samesidesymmetric).
assert (Out B G C) by (conclude lemma_ray4).
assert (Out B C G) by (conclude lemma_ray5).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (Col B B E) by (conclude_def Col ).
assert (OS K G B E) by (conclude lemma_sameside2).
assert (OS K G E B) by (conclude lemma_samesideflip).
assert (Out B E A) by (conclude lemma_ray4).
assert (Out B A E) by (conclude lemma_ray5).
assert (CongA A E K E B G) by (conclude lemma_equalangleshelper).
assert (Par E K B G) by (conclude proposition_28D).
assert (Par E K G B) by (forward_using lemma_parallelflip).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists c, (BetS B C c /\\ Cong C c B C)) by (conclude lemma_extension);destruct Tf as [c];spliter.
assert (BetS c C B) by (conclude axiom_betweennesssymmetry).
assert (Par C D B A) by (forward_using lemma_parallelflip).
assert (RT D C B C B A) by (conclude proposition_29C).
assert (OS K F C G) by (conclude lemma_samesideflip).
assert (OS F K C G) by (forward_using lemma_samesidesymmetric).
assert (BetS C G B) by (conclude axiom_betweennesssymmetry).
assert (BetS c C G) by (conclude axiom_innertransitivity).
assert (RT F C G C G K) by (conclude proposition_29C).
assert (nCol D B C) by (forward_using lemma_parallelNC).
assert (nCol D C B) by (forward_using lemma_NCorder).
assert (CongA D C B D C B) by (conclude lemma_equalanglesreflexive).
assert (BetS C F D) by (conclude axiom_betweennesssymmetry).
assert (neq C F) by (forward_using lemma_betweennotequal).
assert (Out C F D) by (conclude lemma_ray4).
assert (Out C D F) by (conclude lemma_ray5).
assert (BetS C G B) by (conclude axiom_betweennesssymmetry).
assert (neq C G) by (forward_using lemma_betweennotequal).
assert (Out C G B) by (conclude lemma_ray4).
assert (Out C B G) by (conclude lemma_ray5).
assert (CongA D C B F C G) by (conclude lemma_equalangleshelper).
assert (CongA C B A C G K) by (conclude (lemma_supplements2 D C B C G K F C G C B A)).
assert (CongA C G K C B A) by (conclude lemma_equalanglessymmetric).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out B A A) by (conclude lemma_ray4).
assert (neq B G) by (forward_using lemma_betweennotequal).
assert (Out B G C) by (conclude lemma_ray4).
assert (Out B C G) by (conclude lemma_ray5).
assert (CongA C G K G B A) by (conclude lemma_equalangleshelper).
assert (Col B G C) by (conclude_def Col ).
assert (Col C B G) by (forward_using lemma_collinearorder).
assert (BetS C F D) by (conclude axiom_betweennesssymmetry).
assert (neq C F) by (forward_using lemma_betweennotequal).
assert (Out C F D) by (conclude lemma_ray4).
assert (Out C D F) by (conclude lemma_ray5).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (OS A F B C) by (conclude lemma_sameside2).
assert (TP G C K F) by (conclude lemma_paralleldef2B).
assert (OS K F G C) by (conclude_def TP ).
assert (Col C G B) by (forward_using lemma_collinearorder).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
assert (OS K F C G) by (conclude lemma_samesideflip).

*****
H120 : OS K F C G
H119 : neq C B
H118 : Col C G B
H117 : OS K F G C
H116 : TP G C K F
H115 : OS A F B C
H114 : Col B C C
H113 : eq C C
H112 : Out C D F
H111 : Out C F D
H110 : neq C F
H109 : BetS C F D
H108 : Col C B G
H107 : Col B G C
H106 : CongA C G K G B A
H105 : Out B C G
H104 : Out B G C
H103 : neq B G
H102 : Out B A A
H101 : eq A A
H100 : CongA C G K C B A
H99 : CongA C B A C G K
H98 : CongA D C B F C G
H97 : Out C B G
H96 : Out C G B
H95 : neq C G
H94 : BetS C G B
H93 : Out C D F
H92 : Out C F D
H91 : neq C F
H90 : BetS C F D
H89 : CongA D C B D C B
H88 : nCol D C B
H87 : nCol D B C
H86 : RT F C G C G K
H85 : BetS c C G
H84 : BetS C G B
H83 : OS F K C G
H82 : OS K F C G
H81 : RT D C B C B A
H80 : Par C D B A
H79 : BetS c C B
H78 : Cong C c B C
H77 : BetS B C c
c : Point
H76 : neq B C
H75 : Par E K G B
H74 : Par E K B G
H73 : CongA A E K E B G
H72 : Out B A E
H71 : Out B E A
H70 : OS K G E B
H69 : OS K G B E
H68 : Col B B E
H67 : eq B B
H66 : Out B C G
H65 : Out B G C
H64 : OS K C B E
H63 : OS C K B E
H62 : OS H K B E
H61 : OS H K E B
H60 : Col E A B
H59 : OS C H B E
H58 : Out A D H
H57 : Out A H D
H56 : OS C D B E
H55 : neq B E
H54 : neq E B
H53 : Col B A E
H52 : Col A E B
H51 : OS C D B A
H50 : CongA A E K A B C
H49 : CongA H A E D A B
H48 : CongA E A H B A D
H47 : CongA E A H E A H
H46 : nCol E A H
H45 : nCol A H E
H44 : Out A H D
H43 : Out A E B
H42 : RT H A E A E K
H41 : OS H K A E
H40 : BetS e A E
H39 : BetS E A e
H38 : BetS B E A
H37 : RT D A B A B C
H36 : OS D C A B
H35 : BetS e A B
H34 : Cong A e B A
H33 : BetS B A e
e : Point
H32 : neq B A
H31 : neq A B
H30 : neq B G
H29 : neq A H
H28 : neq A E
H27 : OS K F G C
H26 : OS H K E A
H25 : OS C D A B
H24 : OS D A C B
H23 : OS A D C B
H22 : OS A D B C
H21 : TP B C A D
H20 : TP G C K F
H19 : TP E A H K
H18 : TP A B C D
H17 : Par A H E K
H16 : Par C D A B
H15 : Par B C A D
H14 : Par G C K F
H13 : Par C F G K
H12 : Par F C G K
H11 : Par G K F C
H10 : Par E K A H
H9 : Par E A H K
H8 : Par A B C D
H7 : Par A D B C
H6 : PG G K F C
H5 : PG E A H K
H4 : BetS B G C
H3 : BetS D F C
H2 : BetS A E B
H1 : BetS A H D
H0 : PG A B C D
A,B,C,D,E,F,G,H,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
PG E K G B
+++++
assert (OS K F C B) by (conclude lemma_samesidecollinear).
-----
Lemma proposition_43B : forall A B C D E F G H K, PG A B C D -> BetS A H D -> BetS A E B -> BetS D F C -> BetS B G C -> PG E A H K -> PG G K F C -> PG E K G B.
Proof.
intros.
assert (Par A D B C) by (conclude_def PG ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par E A H K) by (conclude_def PG ).
assert (Par E K A H) by (conclude_def PG ).
assert (Par G K F C) by (conclude_def PG ).
assert (Par F C G K) by (conclude lemma_parallelsymmetric).
assert (Par C F G K) by (forward_using lemma_parallelflip).
assert (Par G C K F) by (conclude_def PG ).
assert (Par B C A D) by (conclude lemma_parallelsymmetric).
assert (Par C D A B) by (conclude lemma_parallelsymmetric).
assert (Par A H E K) by (conclude lemma_parallelsymmetric).
assert (TP A B C D) by (conclude lemma_paralleldef2B).
assert (TP E A H K) by (conclude lemma_paralleldef2B).
assert (TP G C K F) by (conclude lemma_paralleldef2B).
assert (TP B C A D) by (conclude lemma_paralleldef2B).
assert (OS A D B C) by (conclude_def TP ).
assert (OS A D C B) by (conclude lemma_samesideflip).
assert (OS D A C B) by (forward_using lemma_samesidesymmetric).
assert (OS C D A B) by (conclude_def TP ).
assert (OS H K E A) by (conclude_def TP ).
assert (OS K F G C) by (conclude_def TP ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (neq A H) by (forward_using lemma_betweennotequal).
assert (neq B G) by (forward_using lemma_betweennotequal).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists e, (BetS B A e /\\ Cong A e B A)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (BetS e A B) by (conclude axiom_betweennesssymmetry).
assert (OS D C A B) by (forward_using lemma_samesidesymmetric).
assert (RT D A B A B C) by (conclude proposition_29C).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert (BetS E A e) by (conclude lemma_3_6a).
assert (BetS e A E) by (conclude axiom_betweennesssymmetry).
assert (OS H K A E) by (forward_using lemma_samesidesymmetric).
assert (RT H A E A E K) by (conclude proposition_29C).
assert (Out A E B) by (conclude lemma_ray4).
assert (Out A H D) by (conclude lemma_ray4).
assert (nCol A H E) by (forward_using lemma_parallelNC).
assert (nCol E A H) by (forward_using lemma_NCorder).
assert (CongA E A H E A H) by (conclude lemma_equalanglesreflexive).
assert (CongA E A H B A D) by (conclude lemma_equalangleshelper).
assert (CongA H A E D A B) by (conclude lemma_equalanglesflip).
assert (CongA A E K A B C) by (apply (lemma_supplements2 H A E A B C D A B A E K);eauto).
assert (OS C D B A) by (conclude lemma_samesideflip).
assert (Col A E B) by (conclude_def Col ).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq E B) by (forward_using lemma_betweennotequal).
assert (neq B E) by (conclude lemma_inequalitysymmetric).
assert (OS C D B E) by (conclude lemma_samesidecollinear).
assert (Out A H D) by (conclude lemma_ray4).
assert (Out A D H) by (conclude lemma_ray5).
assert (OS C H B E) by (conclude lemma_sameside2).
assert (Col E A B) by (forward_using lemma_collinearorder).
assert (OS H K E B) by (conclude lemma_samesidecollinear).
assert (OS H K B E) by (conclude lemma_samesideflip).
assert (OS C K B E) by (conclude lemma_samesidetransitive).
assert (OS K C B E) by (forward_using lemma_samesidesymmetric).
assert (Out B G C) by (conclude lemma_ray4).
assert (Out B C G) by (conclude lemma_ray5).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (Col B B E) by (conclude_def Col ).
assert (OS K G B E) by (conclude lemma_sameside2).
assert (OS K G E B) by (conclude lemma_samesideflip).
assert (Out B E A) by (conclude lemma_ray4).
assert (Out B A E) by (conclude lemma_ray5).
assert (CongA A E K E B G) by (conclude lemma_equalangleshelper).
assert (Par E K B G) by (conclude proposition_28D).
assert (Par E K G B) by (forward_using lemma_parallelflip).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists c, (BetS B C c /\\ Cong C c B C)) by (conclude lemma_extension);destruct Tf as [c];spliter.
assert (BetS c C B) by (conclude axiom_betweennesssymmetry).
assert (Par C D B A) by (forward_using lemma_parallelflip).
assert (RT D C B C B A) by (conclude proposition_29C).
assert (OS K F C G) by (conclude lemma_samesideflip).
assert (OS F K C G) by (forward_using lemma_samesidesymmetric).
assert (BetS C G B) by (conclude axiom_betweennesssymmetry).
assert (BetS c C G) by (conclude axiom_innertransitivity).
assert (RT F C G C G K) by (conclude proposition_29C).
assert (nCol D B C) by (forward_using lemma_parallelNC).
assert (nCol D C B) by (forward_using lemma_NCorder).
assert (CongA D C B D C B) by (conclude lemma_equalanglesreflexive).
assert (BetS C F D) by (conclude axiom_betweennesssymmetry).
assert (neq C F) by (forward_using lemma_betweennotequal).
assert (Out C F D) by (conclude lemma_ray4).
assert (Out C D F) by (conclude lemma_ray5).
assert (BetS C G B) by (conclude axiom_betweennesssymmetry).
assert (neq C G) by (forward_using lemma_betweennotequal).
assert (Out C G B) by (conclude lemma_ray4).
assert (Out C B G) by (conclude lemma_ray5).
assert (CongA D C B F C G) by (conclude lemma_equalangleshelper).
assert (CongA C B A C G K) by (conclude (lemma_supplements2 D C B C G K F C G C B A)).
assert (CongA C G K C B A) by (conclude lemma_equalanglessymmetric).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out B A A) by (conclude lemma_ray4).
assert (neq B G) by (forward_using lemma_betweennotequal).
assert (Out B G C) by (conclude lemma_ray4).
assert (Out B C G) by (conclude lemma_ray5).
assert (CongA C G K G B A) by (conclude lemma_equalangleshelper).
assert (Col B G C) by (conclude_def Col ).
assert (Col C B G) by (forward_using lemma_collinearorder).
assert (BetS C F D) by (conclude axiom_betweennesssymmetry).
assert (neq C F) by (forward_using lemma_betweennotequal).
assert (Out C F D) by (conclude lemma_ray4).
assert (Out C D F) by (conclude lemma_ray5).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (OS A F B C) by (conclude lemma_sameside2).
assert (TP G C K F) by (conclude lemma_paralleldef2B).
assert (OS K F G C) by (conclude_def TP ).
assert (Col C G B) by (forward_using lemma_collinearorder).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
assert (OS K F C G) by (conclude lemma_samesideflip).
assert (OS K F C B) by (conclude lemma_samesidecollinear).

*****
H121 : OS K F C B
H120 : OS K F C G
H119 : neq C B
H118 : Col C G B
H117 : OS K F G C
H116 : TP G C K F
H115 : OS A F B C
H114 : Col B C C
H113 : eq C C
H112 : Out C D F
H111 : Out C F D
H110 : neq C F
H109 : BetS C F D
H108 : Col C B G
H107 : Col B G C
H106 : CongA C G K G B A
H105 : Out B C G
H104 : Out B G C
H103 : neq B G
H102 : Out B A A
H101 : eq A A
H100 : CongA C G K C B A
H99 : CongA C B A C G K
H98 : CongA D C B F C G
H97 : Out C B G
H96 : Out C G B
H95 : neq C G
H94 : BetS C G B
H93 : Out C D F
H92 : Out C F D
H91 : neq C F
H90 : BetS C F D
H89 : CongA D C B D C B
H88 : nCol D C B
H87 : nCol D B C
H86 : RT F C G C G K
H85 : BetS c C G
H84 : BetS C G B
H83 : OS F K C G
H82 : OS K F C G
H81 : RT D C B C B A
H80 : Par C D B A
H79 : BetS c C B
H78 : Cong C c B C
H77 : BetS B C c
c : Point
H76 : neq B C
H75 : Par E K G B
H74 : Par E K B G
H73 : CongA A E K E B G
H72 : Out B A E
H71 : Out B E A
H70 : OS K G E B
H69 : OS K G B E
H68 : Col B B E
H67 : eq B B
H66 : Out B C G
H65 : Out B G C
H64 : OS K C B E
H63 : OS C K B E
H62 : OS H K B E
H61 : OS H K E B
H60 : Col E A B
H59 : OS C H B E
H58 : Out A D H
H57 : Out A H D
H56 : OS C D B E
H55 : neq B E
H54 : neq E B
H53 : Col B A E
H52 : Col A E B
H51 : OS C D B A
H50 : CongA A E K A B C
H49 : CongA H A E D A B
H48 : CongA E A H B A D
H47 : CongA E A H E A H
H46 : nCol E A H
H45 : nCol A H E
H44 : Out A H D
H43 : Out A E B
H42 : RT H A E A E K
H41 : OS H K A E
H40 : BetS e A E
H39 : BetS E A e
H38 : BetS B E A
H37 : RT D A B A B C
H36 : OS D C A B
H35 : BetS e A B
H34 : Cong A e B A
H33 : BetS B A e
e : Point
H32 : neq B A
H31 : neq A B
H30 : neq B G
H29 : neq A H
H28 : neq A E
H27 : OS K F G C
H26 : OS H K E A
H25 : OS C D A B
H24 : OS D A C B
H23 : OS A D C B
H22 : OS A D B C
H21 : TP B C A D
H20 : TP G C K F
H19 : TP E A H K
H18 : TP A B C D
H17 : Par A H E K
H16 : Par C D A B
H15 : Par B C A D
H14 : Par G C K F
H13 : Par C F G K
H12 : Par F C G K
H11 : Par G K F C
H10 : Par E K A H
H9 : Par E A H K
H8 : Par A B C D
H7 : Par A D B C
H6 : PG G K F C
H5 : PG E A H K
H4 : BetS B G C
H3 : BetS D F C
H2 : BetS A E B
H1 : BetS A H D
H0 : PG A B C D
A,B,C,D,E,F,G,H,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
PG E K G B
+++++
assert (OS K F B C) by (conclude lemma_samesideflip).
-----
Lemma proposition_43B : forall A B C D E F G H K, PG A B C D -> BetS A H D -> BetS A E B -> BetS D F C -> BetS B G C -> PG E A H K -> PG G K F C -> PG E K G B.
Proof.
intros.
assert (Par A D B C) by (conclude_def PG ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par E A H K) by (conclude_def PG ).
assert (Par E K A H) by (conclude_def PG ).
assert (Par G K F C) by (conclude_def PG ).
assert (Par F C G K) by (conclude lemma_parallelsymmetric).
assert (Par C F G K) by (forward_using lemma_parallelflip).
assert (Par G C K F) by (conclude_def PG ).
assert (Par B C A D) by (conclude lemma_parallelsymmetric).
assert (Par C D A B) by (conclude lemma_parallelsymmetric).
assert (Par A H E K) by (conclude lemma_parallelsymmetric).
assert (TP A B C D) by (conclude lemma_paralleldef2B).
assert (TP E A H K) by (conclude lemma_paralleldef2B).
assert (TP G C K F) by (conclude lemma_paralleldef2B).
assert (TP B C A D) by (conclude lemma_paralleldef2B).
assert (OS A D B C) by (conclude_def TP ).
assert (OS A D C B) by (conclude lemma_samesideflip).
assert (OS D A C B) by (forward_using lemma_samesidesymmetric).
assert (OS C D A B) by (conclude_def TP ).
assert (OS H K E A) by (conclude_def TP ).
assert (OS K F G C) by (conclude_def TP ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (neq A H) by (forward_using lemma_betweennotequal).
assert (neq B G) by (forward_using lemma_betweennotequal).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists e, (BetS B A e /\\ Cong A e B A)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (BetS e A B) by (conclude axiom_betweennesssymmetry).
assert (OS D C A B) by (forward_using lemma_samesidesymmetric).
assert (RT D A B A B C) by (conclude proposition_29C).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert (BetS E A e) by (conclude lemma_3_6a).
assert (BetS e A E) by (conclude axiom_betweennesssymmetry).
assert (OS H K A E) by (forward_using lemma_samesidesymmetric).
assert (RT H A E A E K) by (conclude proposition_29C).
assert (Out A E B) by (conclude lemma_ray4).
assert (Out A H D) by (conclude lemma_ray4).
assert (nCol A H E) by (forward_using lemma_parallelNC).
assert (nCol E A H) by (forward_using lemma_NCorder).
assert (CongA E A H E A H) by (conclude lemma_equalanglesreflexive).
assert (CongA E A H B A D) by (conclude lemma_equalangleshelper).
assert (CongA H A E D A B) by (conclude lemma_equalanglesflip).
assert (CongA A E K A B C) by (apply (lemma_supplements2 H A E A B C D A B A E K);eauto).
assert (OS C D B A) by (conclude lemma_samesideflip).
assert (Col A E B) by (conclude_def Col ).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq E B) by (forward_using lemma_betweennotequal).
assert (neq B E) by (conclude lemma_inequalitysymmetric).
assert (OS C D B E) by (conclude lemma_samesidecollinear).
assert (Out A H D) by (conclude lemma_ray4).
assert (Out A D H) by (conclude lemma_ray5).
assert (OS C H B E) by (conclude lemma_sameside2).
assert (Col E A B) by (forward_using lemma_collinearorder).
assert (OS H K E B) by (conclude lemma_samesidecollinear).
assert (OS H K B E) by (conclude lemma_samesideflip).
assert (OS C K B E) by (conclude lemma_samesidetransitive).
assert (OS K C B E) by (forward_using lemma_samesidesymmetric).
assert (Out B G C) by (conclude lemma_ray4).
assert (Out B C G) by (conclude lemma_ray5).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (Col B B E) by (conclude_def Col ).
assert (OS K G B E) by (conclude lemma_sameside2).
assert (OS K G E B) by (conclude lemma_samesideflip).
assert (Out B E A) by (conclude lemma_ray4).
assert (Out B A E) by (conclude lemma_ray5).
assert (CongA A E K E B G) by (conclude lemma_equalangleshelper).
assert (Par E K B G) by (conclude proposition_28D).
assert (Par E K G B) by (forward_using lemma_parallelflip).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists c, (BetS B C c /\\ Cong C c B C)) by (conclude lemma_extension);destruct Tf as [c];spliter.
assert (BetS c C B) by (conclude axiom_betweennesssymmetry).
assert (Par C D B A) by (forward_using lemma_parallelflip).
assert (RT D C B C B A) by (conclude proposition_29C).
assert (OS K F C G) by (conclude lemma_samesideflip).
assert (OS F K C G) by (forward_using lemma_samesidesymmetric).
assert (BetS C G B) by (conclude axiom_betweennesssymmetry).
assert (BetS c C G) by (conclude axiom_innertransitivity).
assert (RT F C G C G K) by (conclude proposition_29C).
assert (nCol D B C) by (forward_using lemma_parallelNC).
assert (nCol D C B) by (forward_using lemma_NCorder).
assert (CongA D C B D C B) by (conclude lemma_equalanglesreflexive).
assert (BetS C F D) by (conclude axiom_betweennesssymmetry).
assert (neq C F) by (forward_using lemma_betweennotequal).
assert (Out C F D) by (conclude lemma_ray4).
assert (Out C D F) by (conclude lemma_ray5).
assert (BetS C G B) by (conclude axiom_betweennesssymmetry).
assert (neq C G) by (forward_using lemma_betweennotequal).
assert (Out C G B) by (conclude lemma_ray4).
assert (Out C B G) by (conclude lemma_ray5).
assert (CongA D C B F C G) by (conclude lemma_equalangleshelper).
assert (CongA C B A C G K) by (conclude (lemma_supplements2 D C B C G K F C G C B A)).
assert (CongA C G K C B A) by (conclude lemma_equalanglessymmetric).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out B A A) by (conclude lemma_ray4).
assert (neq B G) by (forward_using lemma_betweennotequal).
assert (Out B G C) by (conclude lemma_ray4).
assert (Out B C G) by (conclude lemma_ray5).
assert (CongA C G K G B A) by (conclude lemma_equalangleshelper).
assert (Col B G C) by (conclude_def Col ).
assert (Col C B G) by (forward_using lemma_collinearorder).
assert (BetS C F D) by (conclude axiom_betweennesssymmetry).
assert (neq C F) by (forward_using lemma_betweennotequal).
assert (Out C F D) by (conclude lemma_ray4).
assert (Out C D F) by (conclude lemma_ray5).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (OS A F B C) by (conclude lemma_sameside2).
assert (TP G C K F) by (conclude lemma_paralleldef2B).
assert (OS K F G C) by (conclude_def TP ).
assert (Col C G B) by (forward_using lemma_collinearorder).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
assert (OS K F C G) by (conclude lemma_samesideflip).
assert (OS K F C B) by (conclude lemma_samesidecollinear).
assert (OS K F B C) by (conclude lemma_samesideflip).

*****
H122 : OS K F B C
H121 : OS K F C B
H120 : OS K F C G
H119 : neq C B
H118 : Col C G B
H117 : OS K F G C
H116 : TP G C K F
H115 : OS A F B C
H114 : Col B C C
H113 : eq C C
H112 : Out C D F
H111 : Out C F D
H110 : neq C F
H109 : BetS C F D
H108 : Col C B G
H107 : Col B G C
H106 : CongA C G K G B A
H105 : Out B C G
H104 : Out B G C
H103 : neq B G
H102 : Out B A A
H101 : eq A A
H100 : CongA C G K C B A
H99 : CongA C B A C G K
H98 : CongA D C B F C G
H97 : Out C B G
H96 : Out C G B
H95 : neq C G
H94 : BetS C G B
H93 : Out C D F
H92 : Out C F D
H91 : neq C F
H90 : BetS C F D
H89 : CongA D C B D C B
H88 : nCol D C B
H87 : nCol D B C
H86 : RT F C G C G K
H85 : BetS c C G
H84 : BetS C G B
H83 : OS F K C G
H82 : OS K F C G
H81 : RT D C B C B A
H80 : Par C D B A
H79 : BetS c C B
H78 : Cong C c B C
H77 : BetS B C c
c : Point
H76 : neq B C
H75 : Par E K G B
H74 : Par E K B G
H73 : CongA A E K E B G
H72 : Out B A E
H71 : Out B E A
H70 : OS K G E B
H69 : OS K G B E
H68 : Col B B E
H67 : eq B B
H66 : Out B C G
H65 : Out B G C
H64 : OS K C B E
H63 : OS C K B E
H62 : OS H K B E
H61 : OS H K E B
H60 : Col E A B
H59 : OS C H B E
H58 : Out A D H
H57 : Out A H D
H56 : OS C D B E
H55 : neq B E
H54 : neq E B
H53 : Col B A E
H52 : Col A E B
H51 : OS C D B A
H50 : CongA A E K A B C
H49 : CongA H A E D A B
H48 : CongA E A H B A D
H47 : CongA E A H E A H
H46 : nCol E A H
H45 : nCol A H E
H44 : Out A H D
H43 : Out A E B
H42 : RT H A E A E K
H41 : OS H K A E
H40 : BetS e A E
H39 : BetS E A e
H38 : BetS B E A
H37 : RT D A B A B C
H36 : OS D C A B
H35 : BetS e A B
H34 : Cong A e B A
H33 : BetS B A e
e : Point
H32 : neq B A
H31 : neq A B
H30 : neq B G
H29 : neq A H
H28 : neq A E
H27 : OS K F G C
H26 : OS H K E A
H25 : OS C D A B
H24 : OS D A C B
H23 : OS A D C B
H22 : OS A D B C
H21 : TP B C A D
H20 : TP G C K F
H19 : TP E A H K
H18 : TP A B C D
H17 : Par A H E K
H16 : Par C D A B
H15 : Par B C A D
H14 : Par G C K F
H13 : Par C F G K
H12 : Par F C G K
H11 : Par G K F C
H10 : Par E K A H
H9 : Par E A H K
H8 : Par A B C D
H7 : Par A D B C
H6 : PG G K F C
H5 : PG E A H K
H4 : BetS B G C
H3 : BetS D F C
H2 : BetS A E B
H1 : BetS A H D
H0 : PG A B C D
A,B,C,D,E,F,G,H,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
PG E K G B
+++++
assert (OS F K B C) by (forward_using lemma_samesidesymmetric).
-----
Lemma proposition_43B : forall A B C D E F G H K, PG A B C D -> BetS A H D -> BetS A E B -> BetS D F C -> BetS B G C -> PG E A H K -> PG G K F C -> PG E K G B.
Proof.
intros.
assert (Par A D B C) by (conclude_def PG ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par E A H K) by (conclude_def PG ).
assert (Par E K A H) by (conclude_def PG ).
assert (Par G K F C) by (conclude_def PG ).
assert (Par F C G K) by (conclude lemma_parallelsymmetric).
assert (Par C F G K) by (forward_using lemma_parallelflip).
assert (Par G C K F) by (conclude_def PG ).
assert (Par B C A D) by (conclude lemma_parallelsymmetric).
assert (Par C D A B) by (conclude lemma_parallelsymmetric).
assert (Par A H E K) by (conclude lemma_parallelsymmetric).
assert (TP A B C D) by (conclude lemma_paralleldef2B).
assert (TP E A H K) by (conclude lemma_paralleldef2B).
assert (TP G C K F) by (conclude lemma_paralleldef2B).
assert (TP B C A D) by (conclude lemma_paralleldef2B).
assert (OS A D B C) by (conclude_def TP ).
assert (OS A D C B) by (conclude lemma_samesideflip).
assert (OS D A C B) by (forward_using lemma_samesidesymmetric).
assert (OS C D A B) by (conclude_def TP ).
assert (OS H K E A) by (conclude_def TP ).
assert (OS K F G C) by (conclude_def TP ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (neq A H) by (forward_using lemma_betweennotequal).
assert (neq B G) by (forward_using lemma_betweennotequal).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists e, (BetS B A e /\\ Cong A e B A)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (BetS e A B) by (conclude axiom_betweennesssymmetry).
assert (OS D C A B) by (forward_using lemma_samesidesymmetric).
assert (RT D A B A B C) by (conclude proposition_29C).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert (BetS E A e) by (conclude lemma_3_6a).
assert (BetS e A E) by (conclude axiom_betweennesssymmetry).
assert (OS H K A E) by (forward_using lemma_samesidesymmetric).
assert (RT H A E A E K) by (conclude proposition_29C).
assert (Out A E B) by (conclude lemma_ray4).
assert (Out A H D) by (conclude lemma_ray4).
assert (nCol A H E) by (forward_using lemma_parallelNC).
assert (nCol E A H) by (forward_using lemma_NCorder).
assert (CongA E A H E A H) by (conclude lemma_equalanglesreflexive).
assert (CongA E A H B A D) by (conclude lemma_equalangleshelper).
assert (CongA H A E D A B) by (conclude lemma_equalanglesflip).
assert (CongA A E K A B C) by (apply (lemma_supplements2 H A E A B C D A B A E K);eauto).
assert (OS C D B A) by (conclude lemma_samesideflip).
assert (Col A E B) by (conclude_def Col ).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq E B) by (forward_using lemma_betweennotequal).
assert (neq B E) by (conclude lemma_inequalitysymmetric).
assert (OS C D B E) by (conclude lemma_samesidecollinear).
assert (Out A H D) by (conclude lemma_ray4).
assert (Out A D H) by (conclude lemma_ray5).
assert (OS C H B E) by (conclude lemma_sameside2).
assert (Col E A B) by (forward_using lemma_collinearorder).
assert (OS H K E B) by (conclude lemma_samesidecollinear).
assert (OS H K B E) by (conclude lemma_samesideflip).
assert (OS C K B E) by (conclude lemma_samesidetransitive).
assert (OS K C B E) by (forward_using lemma_samesidesymmetric).
assert (Out B G C) by (conclude lemma_ray4).
assert (Out B C G) by (conclude lemma_ray5).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (Col B B E) by (conclude_def Col ).
assert (OS K G B E) by (conclude lemma_sameside2).
assert (OS K G E B) by (conclude lemma_samesideflip).
assert (Out B E A) by (conclude lemma_ray4).
assert (Out B A E) by (conclude lemma_ray5).
assert (CongA A E K E B G) by (conclude lemma_equalangleshelper).
assert (Par E K B G) by (conclude proposition_28D).
assert (Par E K G B) by (forward_using lemma_parallelflip).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists c, (BetS B C c /\\ Cong C c B C)) by (conclude lemma_extension);destruct Tf as [c];spliter.
assert (BetS c C B) by (conclude axiom_betweennesssymmetry).
assert (Par C D B A) by (forward_using lemma_parallelflip).
assert (RT D C B C B A) by (conclude proposition_29C).
assert (OS K F C G) by (conclude lemma_samesideflip).
assert (OS F K C G) by (forward_using lemma_samesidesymmetric).
assert (BetS C G B) by (conclude axiom_betweennesssymmetry).
assert (BetS c C G) by (conclude axiom_innertransitivity).
assert (RT F C G C G K) by (conclude proposition_29C).
assert (nCol D B C) by (forward_using lemma_parallelNC).
assert (nCol D C B) by (forward_using lemma_NCorder).
assert (CongA D C B D C B) by (conclude lemma_equalanglesreflexive).
assert (BetS C F D) by (conclude axiom_betweennesssymmetry).
assert (neq C F) by (forward_using lemma_betweennotequal).
assert (Out C F D) by (conclude lemma_ray4).
assert (Out C D F) by (conclude lemma_ray5).
assert (BetS C G B) by (conclude axiom_betweennesssymmetry).
assert (neq C G) by (forward_using lemma_betweennotequal).
assert (Out C G B) by (conclude lemma_ray4).
assert (Out C B G) by (conclude lemma_ray5).
assert (CongA D C B F C G) by (conclude lemma_equalangleshelper).
assert (CongA C B A C G K) by (conclude (lemma_supplements2 D C B C G K F C G C B A)).
assert (CongA C G K C B A) by (conclude lemma_equalanglessymmetric).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out B A A) by (conclude lemma_ray4).
assert (neq B G) by (forward_using lemma_betweennotequal).
assert (Out B G C) by (conclude lemma_ray4).
assert (Out B C G) by (conclude lemma_ray5).
assert (CongA C G K G B A) by (conclude lemma_equalangleshelper).
assert (Col B G C) by (conclude_def Col ).
assert (Col C B G) by (forward_using lemma_collinearorder).
assert (BetS C F D) by (conclude axiom_betweennesssymmetry).
assert (neq C F) by (forward_using lemma_betweennotequal).
assert (Out C F D) by (conclude lemma_ray4).
assert (Out C D F) by (conclude lemma_ray5).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (OS A F B C) by (conclude lemma_sameside2).
assert (TP G C K F) by (conclude lemma_paralleldef2B).
assert (OS K F G C) by (conclude_def TP ).
assert (Col C G B) by (forward_using lemma_collinearorder).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
assert (OS K F C G) by (conclude lemma_samesideflip).
assert (OS K F C B) by (conclude lemma_samesidecollinear).
assert (OS K F B C) by (conclude lemma_samesideflip).
assert (OS F K B C) by (forward_using lemma_samesidesymmetric).

*****
H123 : OS F K B C
H122 : OS K F B C
H121 : OS K F C B
H120 : OS K F C G
H119 : neq C B
H118 : Col C G B
H117 : OS K F G C
H116 : TP G C K F
H115 : OS A F B C
H114 : Col B C C
H113 : eq C C
H112 : Out C D F
H111 : Out C F D
H110 : neq C F
H109 : BetS C F D
H108 : Col C B G
H107 : Col B G C
H106 : CongA C G K G B A
H105 : Out B C G
H104 : Out B G C
H103 : neq B G
H102 : Out B A A
H101 : eq A A
H100 : CongA C G K C B A
H99 : CongA C B A C G K
H98 : CongA D C B F C G
H97 : Out C B G
H96 : Out C G B
H95 : neq C G
H94 : BetS C G B
H93 : Out C D F
H92 : Out C F D
H91 : neq C F
H90 : BetS C F D
H89 : CongA D C B D C B
H88 : nCol D C B
H87 : nCol D B C
H86 : RT F C G C G K
H85 : BetS c C G
H84 : BetS C G B
H83 : OS F K C G
H82 : OS K F C G
H81 : RT D C B C B A
H80 : Par C D B A
H79 : BetS c C B
H78 : Cong C c B C
H77 : BetS B C c
c : Point
H76 : neq B C
H75 : Par E K G B
H74 : Par E K B G
H73 : CongA A E K E B G
H72 : Out B A E
H71 : Out B E A
H70 : OS K G E B
H69 : OS K G B E
H68 : Col B B E
H67 : eq B B
H66 : Out B C G
H65 : Out B G C
H64 : OS K C B E
H63 : OS C K B E
H62 : OS H K B E
H61 : OS H K E B
H60 : Col E A B
H59 : OS C H B E
H58 : Out A D H
H57 : Out A H D
H56 : OS C D B E
H55 : neq B E
H54 : neq E B
H53 : Col B A E
H52 : Col A E B
H51 : OS C D B A
H50 : CongA A E K A B C
H49 : CongA H A E D A B
H48 : CongA E A H B A D
H47 : CongA E A H E A H
H46 : nCol E A H
H45 : nCol A H E
H44 : Out A H D
H43 : Out A E B
H42 : RT H A E A E K
H41 : OS H K A E
H40 : BetS e A E
H39 : BetS E A e
H38 : BetS B E A
H37 : RT D A B A B C
H36 : OS D C A B
H35 : BetS e A B
H34 : Cong A e B A
H33 : BetS B A e
e : Point
H32 : neq B A
H31 : neq A B
H30 : neq B G
H29 : neq A H
H28 : neq A E
H27 : OS K F G C
H26 : OS H K E A
H25 : OS C D A B
H24 : OS D A C B
H23 : OS A D C B
H22 : OS A D B C
H21 : TP B C A D
H20 : TP G C K F
H19 : TP E A H K
H18 : TP A B C D
H17 : Par A H E K
H16 : Par C D A B
H15 : Par B C A D
H14 : Par G C K F
H13 : Par C F G K
H12 : Par F C G K
H11 : Par G K F C
H10 : Par E K A H
H9 : Par E A H K
H8 : Par A B C D
H7 : Par A D B C
H6 : PG G K F C
H5 : PG E A H K
H4 : BetS B G C
H3 : BetS D F C
H2 : BetS A E B
H1 : BetS A H D
H0 : PG A B C D
A,B,C,D,E,F,G,H,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
PG E K G B
+++++
assert (OS A K B C) by (conclude lemma_samesidetransitive).
-----
Lemma proposition_43B : forall A B C D E F G H K, PG A B C D -> BetS A H D -> BetS A E B -> BetS D F C -> BetS B G C -> PG E A H K -> PG G K F C -> PG E K G B.
Proof.
intros.
assert (Par A D B C) by (conclude_def PG ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par E A H K) by (conclude_def PG ).
assert (Par E K A H) by (conclude_def PG ).
assert (Par G K F C) by (conclude_def PG ).
assert (Par F C G K) by (conclude lemma_parallelsymmetric).
assert (Par C F G K) by (forward_using lemma_parallelflip).
assert (Par G C K F) by (conclude_def PG ).
assert (Par B C A D) by (conclude lemma_parallelsymmetric).
assert (Par C D A B) by (conclude lemma_parallelsymmetric).
assert (Par A H E K) by (conclude lemma_parallelsymmetric).
assert (TP A B C D) by (conclude lemma_paralleldef2B).
assert (TP E A H K) by (conclude lemma_paralleldef2B).
assert (TP G C K F) by (conclude lemma_paralleldef2B).
assert (TP B C A D) by (conclude lemma_paralleldef2B).
assert (OS A D B C) by (conclude_def TP ).
assert (OS A D C B) by (conclude lemma_samesideflip).
assert (OS D A C B) by (forward_using lemma_samesidesymmetric).
assert (OS C D A B) by (conclude_def TP ).
assert (OS H K E A) by (conclude_def TP ).
assert (OS K F G C) by (conclude_def TP ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (neq A H) by (forward_using lemma_betweennotequal).
assert (neq B G) by (forward_using lemma_betweennotequal).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists e, (BetS B A e /\\ Cong A e B A)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (BetS e A B) by (conclude axiom_betweennesssymmetry).
assert (OS D C A B) by (forward_using lemma_samesidesymmetric).
assert (RT D A B A B C) by (conclude proposition_29C).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert (BetS E A e) by (conclude lemma_3_6a).
assert (BetS e A E) by (conclude axiom_betweennesssymmetry).
assert (OS H K A E) by (forward_using lemma_samesidesymmetric).
assert (RT H A E A E K) by (conclude proposition_29C).
assert (Out A E B) by (conclude lemma_ray4).
assert (Out A H D) by (conclude lemma_ray4).
assert (nCol A H E) by (forward_using lemma_parallelNC).
assert (nCol E A H) by (forward_using lemma_NCorder).
assert (CongA E A H E A H) by (conclude lemma_equalanglesreflexive).
assert (CongA E A H B A D) by (conclude lemma_equalangleshelper).
assert (CongA H A E D A B) by (conclude lemma_equalanglesflip).
assert (CongA A E K A B C) by (apply (lemma_supplements2 H A E A B C D A B A E K);eauto).
assert (OS C D B A) by (conclude lemma_samesideflip).
assert (Col A E B) by (conclude_def Col ).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq E B) by (forward_using lemma_betweennotequal).
assert (neq B E) by (conclude lemma_inequalitysymmetric).
assert (OS C D B E) by (conclude lemma_samesidecollinear).
assert (Out A H D) by (conclude lemma_ray4).
assert (Out A D H) by (conclude lemma_ray5).
assert (OS C H B E) by (conclude lemma_sameside2).
assert (Col E A B) by (forward_using lemma_collinearorder).
assert (OS H K E B) by (conclude lemma_samesidecollinear).
assert (OS H K B E) by (conclude lemma_samesideflip).
assert (OS C K B E) by (conclude lemma_samesidetransitive).
assert (OS K C B E) by (forward_using lemma_samesidesymmetric).
assert (Out B G C) by (conclude lemma_ray4).
assert (Out B C G) by (conclude lemma_ray5).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (Col B B E) by (conclude_def Col ).
assert (OS K G B E) by (conclude lemma_sameside2).
assert (OS K G E B) by (conclude lemma_samesideflip).
assert (Out B E A) by (conclude lemma_ray4).
assert (Out B A E) by (conclude lemma_ray5).
assert (CongA A E K E B G) by (conclude lemma_equalangleshelper).
assert (Par E K B G) by (conclude proposition_28D).
assert (Par E K G B) by (forward_using lemma_parallelflip).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists c, (BetS B C c /\\ Cong C c B C)) by (conclude lemma_extension);destruct Tf as [c];spliter.
assert (BetS c C B) by (conclude axiom_betweennesssymmetry).
assert (Par C D B A) by (forward_using lemma_parallelflip).
assert (RT D C B C B A) by (conclude proposition_29C).
assert (OS K F C G) by (conclude lemma_samesideflip).
assert (OS F K C G) by (forward_using lemma_samesidesymmetric).
assert (BetS C G B) by (conclude axiom_betweennesssymmetry).
assert (BetS c C G) by (conclude axiom_innertransitivity).
assert (RT F C G C G K) by (conclude proposition_29C).
assert (nCol D B C) by (forward_using lemma_parallelNC).
assert (nCol D C B) by (forward_using lemma_NCorder).
assert (CongA D C B D C B) by (conclude lemma_equalanglesreflexive).
assert (BetS C F D) by (conclude axiom_betweennesssymmetry).
assert (neq C F) by (forward_using lemma_betweennotequal).
assert (Out C F D) by (conclude lemma_ray4).
assert (Out C D F) by (conclude lemma_ray5).
assert (BetS C G B) by (conclude axiom_betweennesssymmetry).
assert (neq C G) by (forward_using lemma_betweennotequal).
assert (Out C G B) by (conclude lemma_ray4).
assert (Out C B G) by (conclude lemma_ray5).
assert (CongA D C B F C G) by (conclude lemma_equalangleshelper).
assert (CongA C B A C G K) by (conclude (lemma_supplements2 D C B C G K F C G C B A)).
assert (CongA C G K C B A) by (conclude lemma_equalanglessymmetric).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out B A A) by (conclude lemma_ray4).
assert (neq B G) by (forward_using lemma_betweennotequal).
assert (Out B G C) by (conclude lemma_ray4).
assert (Out B C G) by (conclude lemma_ray5).
assert (CongA C G K G B A) by (conclude lemma_equalangleshelper).
assert (Col B G C) by (conclude_def Col ).
assert (Col C B G) by (forward_using lemma_collinearorder).
assert (BetS C F D) by (conclude axiom_betweennesssymmetry).
assert (neq C F) by (forward_using lemma_betweennotequal).
assert (Out C F D) by (conclude lemma_ray4).
assert (Out C D F) by (conclude lemma_ray5).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (OS A F B C) by (conclude lemma_sameside2).
assert (TP G C K F) by (conclude lemma_paralleldef2B).
assert (OS K F G C) by (conclude_def TP ).
assert (Col C G B) by (forward_using lemma_collinearorder).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
assert (OS K F C G) by (conclude lemma_samesideflip).
assert (OS K F C B) by (conclude lemma_samesidecollinear).
assert (OS K F B C) by (conclude lemma_samesideflip).
assert (OS F K B C) by (forward_using lemma_samesidesymmetric).
assert (OS A K B C) by (conclude lemma_samesidetransitive).

*****
H124 : OS A K B C
H123 : OS F K B C
H122 : OS K F B C
H121 : OS K F C B
H120 : OS K F C G
H119 : neq C B
H118 : Col C G B
H117 : OS K F G C
H116 : TP G C K F
H115 : OS A F B C
H114 : Col B C C
H113 : eq C C
H112 : Out C D F
H111 : Out C F D
H110 : neq C F
H109 : BetS C F D
H108 : Col C B G
H107 : Col B G C
H106 : CongA C G K G B A
H105 : Out B C G
H104 : Out B G C
H103 : neq B G
H102 : Out B A A
H101 : eq A A
H100 : CongA C G K C B A
H99 : CongA C B A C G K
H98 : CongA D C B F C G
H97 : Out C B G
H96 : Out C G B
H95 : neq C G
H94 : BetS C G B
H93 : Out C D F
H92 : Out C F D
H91 : neq C F
H90 : BetS C F D
H89 : CongA D C B D C B
H88 : nCol D C B
H87 : nCol D B C
H86 : RT F C G C G K
H85 : BetS c C G
H84 : BetS C G B
H83 : OS F K C G
H82 : OS K F C G
H81 : RT D C B C B A
H80 : Par C D B A
H79 : BetS c C B
H78 : Cong C c B C
H77 : BetS B C c
c : Point
H76 : neq B C
H75 : Par E K G B
H74 : Par E K B G
H73 : CongA A E K E B G
H72 : Out B A E
H71 : Out B E A
H70 : OS K G E B
H69 : OS K G B E
H68 : Col B B E
H67 : eq B B
H66 : Out B C G
H65 : Out B G C
H64 : OS K C B E
H63 : OS C K B E
H62 : OS H K B E
H61 : OS H K E B
H60 : Col E A B
H59 : OS C H B E
H58 : Out A D H
H57 : Out A H D
H56 : OS C D B E
H55 : neq B E
H54 : neq E B
H53 : Col B A E
H52 : Col A E B
H51 : OS C D B A
H50 : CongA A E K A B C
H49 : CongA H A E D A B
H48 : CongA E A H B A D
H47 : CongA E A H E A H
H46 : nCol E A H
H45 : nCol A H E
H44 : Out A H D
H43 : Out A E B
H42 : RT H A E A E K
H41 : OS H K A E
H40 : BetS e A E
H39 : BetS E A e
H38 : BetS B E A
H37 : RT D A B A B C
H36 : OS D C A B
H35 : BetS e A B
H34 : Cong A e B A
H33 : BetS B A e
e : Point
H32 : neq B A
H31 : neq A B
H30 : neq B G
H29 : neq A H
H28 : neq A E
H27 : OS K F G C
H26 : OS H K E A
H25 : OS C D A B
H24 : OS D A C B
H23 : OS A D C B
H22 : OS A D B C
H21 : TP B C A D
H20 : TP G C K F
H19 : TP E A H K
H18 : TP A B C D
H17 : Par A H E K
H16 : Par C D A B
H15 : Par B C A D
H14 : Par G C K F
H13 : Par C F G K
H12 : Par F C G K
H11 : Par G K F C
H10 : Par E K A H
H9 : Par E A H K
H8 : Par A B C D
H7 : Par A D B C
H6 : PG G K F C
H5 : PG E A H K
H4 : BetS B G C
H3 : BetS D F C
H2 : BetS A E B
H1 : BetS A H D
H0 : PG A B C D
A,B,C,D,E,F,G,H,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
PG E K G B
+++++
assert (OS K A B C) by (forward_using lemma_samesidesymmetric).
-----
Lemma proposition_43B : forall A B C D E F G H K, PG A B C D -> BetS A H D -> BetS A E B -> BetS D F C -> BetS B G C -> PG E A H K -> PG G K F C -> PG E K G B.
Proof.
intros.
assert (Par A D B C) by (conclude_def PG ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par E A H K) by (conclude_def PG ).
assert (Par E K A H) by (conclude_def PG ).
assert (Par G K F C) by (conclude_def PG ).
assert (Par F C G K) by (conclude lemma_parallelsymmetric).
assert (Par C F G K) by (forward_using lemma_parallelflip).
assert (Par G C K F) by (conclude_def PG ).
assert (Par B C A D) by (conclude lemma_parallelsymmetric).
assert (Par C D A B) by (conclude lemma_parallelsymmetric).
assert (Par A H E K) by (conclude lemma_parallelsymmetric).
assert (TP A B C D) by (conclude lemma_paralleldef2B).
assert (TP E A H K) by (conclude lemma_paralleldef2B).
assert (TP G C K F) by (conclude lemma_paralleldef2B).
assert (TP B C A D) by (conclude lemma_paralleldef2B).
assert (OS A D B C) by (conclude_def TP ).
assert (OS A D C B) by (conclude lemma_samesideflip).
assert (OS D A C B) by (forward_using lemma_samesidesymmetric).
assert (OS C D A B) by (conclude_def TP ).
assert (OS H K E A) by (conclude_def TP ).
assert (OS K F G C) by (conclude_def TP ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (neq A H) by (forward_using lemma_betweennotequal).
assert (neq B G) by (forward_using lemma_betweennotequal).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists e, (BetS B A e /\\ Cong A e B A)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (BetS e A B) by (conclude axiom_betweennesssymmetry).
assert (OS D C A B) by (forward_using lemma_samesidesymmetric).
assert (RT D A B A B C) by (conclude proposition_29C).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert (BetS E A e) by (conclude lemma_3_6a).
assert (BetS e A E) by (conclude axiom_betweennesssymmetry).
assert (OS H K A E) by (forward_using lemma_samesidesymmetric).
assert (RT H A E A E K) by (conclude proposition_29C).
assert (Out A E B) by (conclude lemma_ray4).
assert (Out A H D) by (conclude lemma_ray4).
assert (nCol A H E) by (forward_using lemma_parallelNC).
assert (nCol E A H) by (forward_using lemma_NCorder).
assert (CongA E A H E A H) by (conclude lemma_equalanglesreflexive).
assert (CongA E A H B A D) by (conclude lemma_equalangleshelper).
assert (CongA H A E D A B) by (conclude lemma_equalanglesflip).
assert (CongA A E K A B C) by (apply (lemma_supplements2 H A E A B C D A B A E K);eauto).
assert (OS C D B A) by (conclude lemma_samesideflip).
assert (Col A E B) by (conclude_def Col ).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq E B) by (forward_using lemma_betweennotequal).
assert (neq B E) by (conclude lemma_inequalitysymmetric).
assert (OS C D B E) by (conclude lemma_samesidecollinear).
assert (Out A H D) by (conclude lemma_ray4).
assert (Out A D H) by (conclude lemma_ray5).
assert (OS C H B E) by (conclude lemma_sameside2).
assert (Col E A B) by (forward_using lemma_collinearorder).
assert (OS H K E B) by (conclude lemma_samesidecollinear).
assert (OS H K B E) by (conclude lemma_samesideflip).
assert (OS C K B E) by (conclude lemma_samesidetransitive).
assert (OS K C B E) by (forward_using lemma_samesidesymmetric).
assert (Out B G C) by (conclude lemma_ray4).
assert (Out B C G) by (conclude lemma_ray5).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (Col B B E) by (conclude_def Col ).
assert (OS K G B E) by (conclude lemma_sameside2).
assert (OS K G E B) by (conclude lemma_samesideflip).
assert (Out B E A) by (conclude lemma_ray4).
assert (Out B A E) by (conclude lemma_ray5).
assert (CongA A E K E B G) by (conclude lemma_equalangleshelper).
assert (Par E K B G) by (conclude proposition_28D).
assert (Par E K G B) by (forward_using lemma_parallelflip).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists c, (BetS B C c /\\ Cong C c B C)) by (conclude lemma_extension);destruct Tf as [c];spliter.
assert (BetS c C B) by (conclude axiom_betweennesssymmetry).
assert (Par C D B A) by (forward_using lemma_parallelflip).
assert (RT D C B C B A) by (conclude proposition_29C).
assert (OS K F C G) by (conclude lemma_samesideflip).
assert (OS F K C G) by (forward_using lemma_samesidesymmetric).
assert (BetS C G B) by (conclude axiom_betweennesssymmetry).
assert (BetS c C G) by (conclude axiom_innertransitivity).
assert (RT F C G C G K) by (conclude proposition_29C).
assert (nCol D B C) by (forward_using lemma_parallelNC).
assert (nCol D C B) by (forward_using lemma_NCorder).
assert (CongA D C B D C B) by (conclude lemma_equalanglesreflexive).
assert (BetS C F D) by (conclude axiom_betweennesssymmetry).
assert (neq C F) by (forward_using lemma_betweennotequal).
assert (Out C F D) by (conclude lemma_ray4).
assert (Out C D F) by (conclude lemma_ray5).
assert (BetS C G B) by (conclude axiom_betweennesssymmetry).
assert (neq C G) by (forward_using lemma_betweennotequal).
assert (Out C G B) by (conclude lemma_ray4).
assert (Out C B G) by (conclude lemma_ray5).
assert (CongA D C B F C G) by (conclude lemma_equalangleshelper).
assert (CongA C B A C G K) by (conclude (lemma_supplements2 D C B C G K F C G C B A)).
assert (CongA C G K C B A) by (conclude lemma_equalanglessymmetric).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out B A A) by (conclude lemma_ray4).
assert (neq B G) by (forward_using lemma_betweennotequal).
assert (Out B G C) by (conclude lemma_ray4).
assert (Out B C G) by (conclude lemma_ray5).
assert (CongA C G K G B A) by (conclude lemma_equalangleshelper).
assert (Col B G C) by (conclude_def Col ).
assert (Col C B G) by (forward_using lemma_collinearorder).
assert (BetS C F D) by (conclude axiom_betweennesssymmetry).
assert (neq C F) by (forward_using lemma_betweennotequal).
assert (Out C F D) by (conclude lemma_ray4).
assert (Out C D F) by (conclude lemma_ray5).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (OS A F B C) by (conclude lemma_sameside2).
assert (TP G C K F) by (conclude lemma_paralleldef2B).
assert (OS K F G C) by (conclude_def TP ).
assert (Col C G B) by (forward_using lemma_collinearorder).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
assert (OS K F C G) by (conclude lemma_samesideflip).
assert (OS K F C B) by (conclude lemma_samesidecollinear).
assert (OS K F B C) by (conclude lemma_samesideflip).
assert (OS F K B C) by (forward_using lemma_samesidesymmetric).
assert (OS A K B C) by (conclude lemma_samesidetransitive).
assert (OS K A B C) by (forward_using lemma_samesidesymmetric).

*****
H125 : OS K A B C
H124 : OS A K B C
H123 : OS F K B C
H122 : OS K F B C
H121 : OS K F C B
H120 : OS K F C G
H119 : neq C B
H118 : Col C G B
H117 : OS K F G C
H116 : TP G C K F
H115 : OS A F B C
H114 : Col B C C
H113 : eq C C
H112 : Out C D F
H111 : Out C F D
H110 : neq C F
H109 : BetS C F D
H108 : Col C B G
H107 : Col B G C
H106 : CongA C G K G B A
H105 : Out B C G
H104 : Out B G C
H103 : neq B G
H102 : Out B A A
H101 : eq A A
H100 : CongA C G K C B A
H99 : CongA C B A C G K
H98 : CongA D C B F C G
H97 : Out C B G
H96 : Out C G B
H95 : neq C G
H94 : BetS C G B
H93 : Out C D F
H92 : Out C F D
H91 : neq C F
H90 : BetS C F D
H89 : CongA D C B D C B
H88 : nCol D C B
H87 : nCol D B C
H86 : RT F C G C G K
H85 : BetS c C G
H84 : BetS C G B
H83 : OS F K C G
H82 : OS K F C G
H81 : RT D C B C B A
H80 : Par C D B A
H79 : BetS c C B
H78 : Cong C c B C
H77 : BetS B C c
c : Point
H76 : neq B C
H75 : Par E K G B
H74 : Par E K B G
H73 : CongA A E K E B G
H72 : Out B A E
H71 : Out B E A
H70 : OS K G E B
H69 : OS K G B E
H68 : Col B B E
H67 : eq B B
H66 : Out B C G
H65 : Out B G C
H64 : OS K C B E
H63 : OS C K B E
H62 : OS H K B E
H61 : OS H K E B
H60 : Col E A B
H59 : OS C H B E
H58 : Out A D H
H57 : Out A H D
H56 : OS C D B E
H55 : neq B E
H54 : neq E B
H53 : Col B A E
H52 : Col A E B
H51 : OS C D B A
H50 : CongA A E K A B C
H49 : CongA H A E D A B
H48 : CongA E A H B A D
H47 : CongA E A H E A H
H46 : nCol E A H
H45 : nCol A H E
H44 : Out A H D
H43 : Out A E B
H42 : RT H A E A E K
H41 : OS H K A E
H40 : BetS e A E
H39 : BetS E A e
H38 : BetS B E A
H37 : RT D A B A B C
H36 : OS D C A B
H35 : BetS e A B
H34 : Cong A e B A
H33 : BetS B A e
e : Point
H32 : neq B A
H31 : neq A B
H30 : neq B G
H29 : neq A H
H28 : neq A E
H27 : OS K F G C
H26 : OS H K E A
H25 : OS C D A B
H24 : OS D A C B
H23 : OS A D C B
H22 : OS A D B C
H21 : TP B C A D
H20 : TP G C K F
H19 : TP E A H K
H18 : TP A B C D
H17 : Par A H E K
H16 : Par C D A B
H15 : Par B C A D
H14 : Par G C K F
H13 : Par C F G K
H12 : Par F C G K
H11 : Par G K F C
H10 : Par E K A H
H9 : Par E A H K
H8 : Par A B C D
H7 : Par A D B C
H6 : PG G K F C
H5 : PG E A H K
H4 : BetS B G C
H3 : BetS D F C
H2 : BetS A E B
H1 : BetS A H D
H0 : PG A B C D
A,B,C,D,E,F,G,H,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
PG E K G B
+++++
assert (Col B C G) by (forward_using lemma_collinearorder).
-----
Lemma proposition_43B : forall A B C D E F G H K, PG A B C D -> BetS A H D -> BetS A E B -> BetS D F C -> BetS B G C -> PG E A H K -> PG G K F C -> PG E K G B.
Proof.
intros.
assert (Par A D B C) by (conclude_def PG ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par E A H K) by (conclude_def PG ).
assert (Par E K A H) by (conclude_def PG ).
assert (Par G K F C) by (conclude_def PG ).
assert (Par F C G K) by (conclude lemma_parallelsymmetric).
assert (Par C F G K) by (forward_using lemma_parallelflip).
assert (Par G C K F) by (conclude_def PG ).
assert (Par B C A D) by (conclude lemma_parallelsymmetric).
assert (Par C D A B) by (conclude lemma_parallelsymmetric).
assert (Par A H E K) by (conclude lemma_parallelsymmetric).
assert (TP A B C D) by (conclude lemma_paralleldef2B).
assert (TP E A H K) by (conclude lemma_paralleldef2B).
assert (TP G C K F) by (conclude lemma_paralleldef2B).
assert (TP B C A D) by (conclude lemma_paralleldef2B).
assert (OS A D B C) by (conclude_def TP ).
assert (OS A D C B) by (conclude lemma_samesideflip).
assert (OS D A C B) by (forward_using lemma_samesidesymmetric).
assert (OS C D A B) by (conclude_def TP ).
assert (OS H K E A) by (conclude_def TP ).
assert (OS K F G C) by (conclude_def TP ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (neq A H) by (forward_using lemma_betweennotequal).
assert (neq B G) by (forward_using lemma_betweennotequal).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists e, (BetS B A e /\\ Cong A e B A)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (BetS e A B) by (conclude axiom_betweennesssymmetry).
assert (OS D C A B) by (forward_using lemma_samesidesymmetric).
assert (RT D A B A B C) by (conclude proposition_29C).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert (BetS E A e) by (conclude lemma_3_6a).
assert (BetS e A E) by (conclude axiom_betweennesssymmetry).
assert (OS H K A E) by (forward_using lemma_samesidesymmetric).
assert (RT H A E A E K) by (conclude proposition_29C).
assert (Out A E B) by (conclude lemma_ray4).
assert (Out A H D) by (conclude lemma_ray4).
assert (nCol A H E) by (forward_using lemma_parallelNC).
assert (nCol E A H) by (forward_using lemma_NCorder).
assert (CongA E A H E A H) by (conclude lemma_equalanglesreflexive).
assert (CongA E A H B A D) by (conclude lemma_equalangleshelper).
assert (CongA H A E D A B) by (conclude lemma_equalanglesflip).
assert (CongA A E K A B C) by (apply (lemma_supplements2 H A E A B C D A B A E K);eauto).
assert (OS C D B A) by (conclude lemma_samesideflip).
assert (Col A E B) by (conclude_def Col ).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq E B) by (forward_using lemma_betweennotequal).
assert (neq B E) by (conclude lemma_inequalitysymmetric).
assert (OS C D B E) by (conclude lemma_samesidecollinear).
assert (Out A H D) by (conclude lemma_ray4).
assert (Out A D H) by (conclude lemma_ray5).
assert (OS C H B E) by (conclude lemma_sameside2).
assert (Col E A B) by (forward_using lemma_collinearorder).
assert (OS H K E B) by (conclude lemma_samesidecollinear).
assert (OS H K B E) by (conclude lemma_samesideflip).
assert (OS C K B E) by (conclude lemma_samesidetransitive).
assert (OS K C B E) by (forward_using lemma_samesidesymmetric).
assert (Out B G C) by (conclude lemma_ray4).
assert (Out B C G) by (conclude lemma_ray5).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (Col B B E) by (conclude_def Col ).
assert (OS K G B E) by (conclude lemma_sameside2).
assert (OS K G E B) by (conclude lemma_samesideflip).
assert (Out B E A) by (conclude lemma_ray4).
assert (Out B A E) by (conclude lemma_ray5).
assert (CongA A E K E B G) by (conclude lemma_equalangleshelper).
assert (Par E K B G) by (conclude proposition_28D).
assert (Par E K G B) by (forward_using lemma_parallelflip).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists c, (BetS B C c /\\ Cong C c B C)) by (conclude lemma_extension);destruct Tf as [c];spliter.
assert (BetS c C B) by (conclude axiom_betweennesssymmetry).
assert (Par C D B A) by (forward_using lemma_parallelflip).
assert (RT D C B C B A) by (conclude proposition_29C).
assert (OS K F C G) by (conclude lemma_samesideflip).
assert (OS F K C G) by (forward_using lemma_samesidesymmetric).
assert (BetS C G B) by (conclude axiom_betweennesssymmetry).
assert (BetS c C G) by (conclude axiom_innertransitivity).
assert (RT F C G C G K) by (conclude proposition_29C).
assert (nCol D B C) by (forward_using lemma_parallelNC).
assert (nCol D C B) by (forward_using lemma_NCorder).
assert (CongA D C B D C B) by (conclude lemma_equalanglesreflexive).
assert (BetS C F D) by (conclude axiom_betweennesssymmetry).
assert (neq C F) by (forward_using lemma_betweennotequal).
assert (Out C F D) by (conclude lemma_ray4).
assert (Out C D F) by (conclude lemma_ray5).
assert (BetS C G B) by (conclude axiom_betweennesssymmetry).
assert (neq C G) by (forward_using lemma_betweennotequal).
assert (Out C G B) by (conclude lemma_ray4).
assert (Out C B G) by (conclude lemma_ray5).
assert (CongA D C B F C G) by (conclude lemma_equalangleshelper).
assert (CongA C B A C G K) by (conclude (lemma_supplements2 D C B C G K F C G C B A)).
assert (CongA C G K C B A) by (conclude lemma_equalanglessymmetric).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out B A A) by (conclude lemma_ray4).
assert (neq B G) by (forward_using lemma_betweennotequal).
assert (Out B G C) by (conclude lemma_ray4).
assert (Out B C G) by (conclude lemma_ray5).
assert (CongA C G K G B A) by (conclude lemma_equalangleshelper).
assert (Col B G C) by (conclude_def Col ).
assert (Col C B G) by (forward_using lemma_collinearorder).
assert (BetS C F D) by (conclude axiom_betweennesssymmetry).
assert (neq C F) by (forward_using lemma_betweennotequal).
assert (Out C F D) by (conclude lemma_ray4).
assert (Out C D F) by (conclude lemma_ray5).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (OS A F B C) by (conclude lemma_sameside2).
assert (TP G C K F) by (conclude lemma_paralleldef2B).
assert (OS K F G C) by (conclude_def TP ).
assert (Col C G B) by (forward_using lemma_collinearorder).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
assert (OS K F C G) by (conclude lemma_samesideflip).
assert (OS K F C B) by (conclude lemma_samesidecollinear).
assert (OS K F B C) by (conclude lemma_samesideflip).
assert (OS F K B C) by (forward_using lemma_samesidesymmetric).
assert (OS A K B C) by (conclude lemma_samesidetransitive).
assert (OS K A B C) by (forward_using lemma_samesidesymmetric).
assert (Col B C G) by (forward_using lemma_collinearorder).

*****
H126 : Col B C G
H125 : OS K A B C
H124 : OS A K B C
H123 : OS F K B C
H122 : OS K F B C
H121 : OS K F C B
H120 : OS K F C G
H119 : neq C B
H118 : Col C G B
H117 : OS K F G C
H116 : TP G C K F
H115 : OS A F B C
H114 : Col B C C
H113 : eq C C
H112 : Out C D F
H111 : Out C F D
H110 : neq C F
H109 : BetS C F D
H108 : Col C B G
H107 : Col B G C
H106 : CongA C G K G B A
H105 : Out B C G
H104 : Out B G C
H103 : neq B G
H102 : Out B A A
H101 : eq A A
H100 : CongA C G K C B A
H99 : CongA C B A C G K
H98 : CongA D C B F C G
H97 : Out C B G
H96 : Out C G B
H95 : neq C G
H94 : BetS C G B
H93 : Out C D F
H92 : Out C F D
H91 : neq C F
H90 : BetS C F D
H89 : CongA D C B D C B
H88 : nCol D C B
H87 : nCol D B C
H86 : RT F C G C G K
H85 : BetS c C G
H84 : BetS C G B
H83 : OS F K C G
H82 : OS K F C G
H81 : RT D C B C B A
H80 : Par C D B A
H79 : BetS c C B
H78 : Cong C c B C
H77 : BetS B C c
c : Point
H76 : neq B C
H75 : Par E K G B
H74 : Par E K B G
H73 : CongA A E K E B G
H72 : Out B A E
H71 : Out B E A
H70 : OS K G E B
H69 : OS K G B E
H68 : Col B B E
H67 : eq B B
H66 : Out B C G
H65 : Out B G C
H64 : OS K C B E
H63 : OS C K B E
H62 : OS H K B E
H61 : OS H K E B
H60 : Col E A B
H59 : OS C H B E
H58 : Out A D H
H57 : Out A H D
H56 : OS C D B E
H55 : neq B E
H54 : neq E B
H53 : Col B A E
H52 : Col A E B
H51 : OS C D B A
H50 : CongA A E K A B C
H49 : CongA H A E D A B
H48 : CongA E A H B A D
H47 : CongA E A H E A H
H46 : nCol E A H
H45 : nCol A H E
H44 : Out A H D
H43 : Out A E B
H42 : RT H A E A E K
H41 : OS H K A E
H40 : BetS e A E
H39 : BetS E A e
H38 : BetS B E A
H37 : RT D A B A B C
H36 : OS D C A B
H35 : BetS e A B
H34 : Cong A e B A
H33 : BetS B A e
e : Point
H32 : neq B A
H31 : neq A B
H30 : neq B G
H29 : neq A H
H28 : neq A E
H27 : OS K F G C
H26 : OS H K E A
H25 : OS C D A B
H24 : OS D A C B
H23 : OS A D C B
H22 : OS A D B C
H21 : TP B C A D
H20 : TP G C K F
H19 : TP E A H K
H18 : TP A B C D
H17 : Par A H E K
H16 : Par C D A B
H15 : Par B C A D
H14 : Par G C K F
H13 : Par C F G K
H12 : Par F C G K
H11 : Par G K F C
H10 : Par E K A H
H9 : Par E A H K
H8 : Par A B C D
H7 : Par A D B C
H6 : PG G K F C
H5 : PG E A H K
H4 : BetS B G C
H3 : BetS D F C
H2 : BetS A E B
H1 : BetS A H D
H0 : PG A B C D
A,B,C,D,E,F,G,H,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
PG E K G B
+++++
assert (OS K A B G) by (conclude lemma_samesidecollinear).
-----
Lemma proposition_43B : forall A B C D E F G H K, PG A B C D -> BetS A H D -> BetS A E B -> BetS D F C -> BetS B G C -> PG E A H K -> PG G K F C -> PG E K G B.
Proof.
intros.
assert (Par A D B C) by (conclude_def PG ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par E A H K) by (conclude_def PG ).
assert (Par E K A H) by (conclude_def PG ).
assert (Par G K F C) by (conclude_def PG ).
assert (Par F C G K) by (conclude lemma_parallelsymmetric).
assert (Par C F G K) by (forward_using lemma_parallelflip).
assert (Par G C K F) by (conclude_def PG ).
assert (Par B C A D) by (conclude lemma_parallelsymmetric).
assert (Par C D A B) by (conclude lemma_parallelsymmetric).
assert (Par A H E K) by (conclude lemma_parallelsymmetric).
assert (TP A B C D) by (conclude lemma_paralleldef2B).
assert (TP E A H K) by (conclude lemma_paralleldef2B).
assert (TP G C K F) by (conclude lemma_paralleldef2B).
assert (TP B C A D) by (conclude lemma_paralleldef2B).
assert (OS A D B C) by (conclude_def TP ).
assert (OS A D C B) by (conclude lemma_samesideflip).
assert (OS D A C B) by (forward_using lemma_samesidesymmetric).
assert (OS C D A B) by (conclude_def TP ).
assert (OS H K E A) by (conclude_def TP ).
assert (OS K F G C) by (conclude_def TP ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (neq A H) by (forward_using lemma_betweennotequal).
assert (neq B G) by (forward_using lemma_betweennotequal).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists e, (BetS B A e /\\ Cong A e B A)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (BetS e A B) by (conclude axiom_betweennesssymmetry).
assert (OS D C A B) by (forward_using lemma_samesidesymmetric).
assert (RT D A B A B C) by (conclude proposition_29C).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert (BetS E A e) by (conclude lemma_3_6a).
assert (BetS e A E) by (conclude axiom_betweennesssymmetry).
assert (OS H K A E) by (forward_using lemma_samesidesymmetric).
assert (RT H A E A E K) by (conclude proposition_29C).
assert (Out A E B) by (conclude lemma_ray4).
assert (Out A H D) by (conclude lemma_ray4).
assert (nCol A H E) by (forward_using lemma_parallelNC).
assert (nCol E A H) by (forward_using lemma_NCorder).
assert (CongA E A H E A H) by (conclude lemma_equalanglesreflexive).
assert (CongA E A H B A D) by (conclude lemma_equalangleshelper).
assert (CongA H A E D A B) by (conclude lemma_equalanglesflip).
assert (CongA A E K A B C) by (apply (lemma_supplements2 H A E A B C D A B A E K);eauto).
assert (OS C D B A) by (conclude lemma_samesideflip).
assert (Col A E B) by (conclude_def Col ).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq E B) by (forward_using lemma_betweennotequal).
assert (neq B E) by (conclude lemma_inequalitysymmetric).
assert (OS C D B E) by (conclude lemma_samesidecollinear).
assert (Out A H D) by (conclude lemma_ray4).
assert (Out A D H) by (conclude lemma_ray5).
assert (OS C H B E) by (conclude lemma_sameside2).
assert (Col E A B) by (forward_using lemma_collinearorder).
assert (OS H K E B) by (conclude lemma_samesidecollinear).
assert (OS H K B E) by (conclude lemma_samesideflip).
assert (OS C K B E) by (conclude lemma_samesidetransitive).
assert (OS K C B E) by (forward_using lemma_samesidesymmetric).
assert (Out B G C) by (conclude lemma_ray4).
assert (Out B C G) by (conclude lemma_ray5).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (Col B B E) by (conclude_def Col ).
assert (OS K G B E) by (conclude lemma_sameside2).
assert (OS K G E B) by (conclude lemma_samesideflip).
assert (Out B E A) by (conclude lemma_ray4).
assert (Out B A E) by (conclude lemma_ray5).
assert (CongA A E K E B G) by (conclude lemma_equalangleshelper).
assert (Par E K B G) by (conclude proposition_28D).
assert (Par E K G B) by (forward_using lemma_parallelflip).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists c, (BetS B C c /\\ Cong C c B C)) by (conclude lemma_extension);destruct Tf as [c];spliter.
assert (BetS c C B) by (conclude axiom_betweennesssymmetry).
assert (Par C D B A) by (forward_using lemma_parallelflip).
assert (RT D C B C B A) by (conclude proposition_29C).
assert (OS K F C G) by (conclude lemma_samesideflip).
assert (OS F K C G) by (forward_using lemma_samesidesymmetric).
assert (BetS C G B) by (conclude axiom_betweennesssymmetry).
assert (BetS c C G) by (conclude axiom_innertransitivity).
assert (RT F C G C G K) by (conclude proposition_29C).
assert (nCol D B C) by (forward_using lemma_parallelNC).
assert (nCol D C B) by (forward_using lemma_NCorder).
assert (CongA D C B D C B) by (conclude lemma_equalanglesreflexive).
assert (BetS C F D) by (conclude axiom_betweennesssymmetry).
assert (neq C F) by (forward_using lemma_betweennotequal).
assert (Out C F D) by (conclude lemma_ray4).
assert (Out C D F) by (conclude lemma_ray5).
assert (BetS C G B) by (conclude axiom_betweennesssymmetry).
assert (neq C G) by (forward_using lemma_betweennotequal).
assert (Out C G B) by (conclude lemma_ray4).
assert (Out C B G) by (conclude lemma_ray5).
assert (CongA D C B F C G) by (conclude lemma_equalangleshelper).
assert (CongA C B A C G K) by (conclude (lemma_supplements2 D C B C G K F C G C B A)).
assert (CongA C G K C B A) by (conclude lemma_equalanglessymmetric).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out B A A) by (conclude lemma_ray4).
assert (neq B G) by (forward_using lemma_betweennotequal).
assert (Out B G C) by (conclude lemma_ray4).
assert (Out B C G) by (conclude lemma_ray5).
assert (CongA C G K G B A) by (conclude lemma_equalangleshelper).
assert (Col B G C) by (conclude_def Col ).
assert (Col C B G) by (forward_using lemma_collinearorder).
assert (BetS C F D) by (conclude axiom_betweennesssymmetry).
assert (neq C F) by (forward_using lemma_betweennotequal).
assert (Out C F D) by (conclude lemma_ray4).
assert (Out C D F) by (conclude lemma_ray5).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (OS A F B C) by (conclude lemma_sameside2).
assert (TP G C K F) by (conclude lemma_paralleldef2B).
assert (OS K F G C) by (conclude_def TP ).
assert (Col C G B) by (forward_using lemma_collinearorder).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
assert (OS K F C G) by (conclude lemma_samesideflip).
assert (OS K F C B) by (conclude lemma_samesidecollinear).
assert (OS K F B C) by (conclude lemma_samesideflip).
assert (OS F K B C) by (forward_using lemma_samesidesymmetric).
assert (OS A K B C) by (conclude lemma_samesidetransitive).
assert (OS K A B C) by (forward_using lemma_samesidesymmetric).
assert (Col B C G) by (forward_using lemma_collinearorder).
assert (OS K A B G) by (conclude lemma_samesidecollinear).

*****
H127 : OS K A B G
H126 : Col B C G
H125 : OS K A B C
H124 : OS A K B C
H123 : OS F K B C
H122 : OS K F B C
H121 : OS K F C B
H120 : OS K F C G
H119 : neq C B
H118 : Col C G B
H117 : OS K F G C
H116 : TP G C K F
H115 : OS A F B C
H114 : Col B C C
H113 : eq C C
H112 : Out C D F
H111 : Out C F D
H110 : neq C F
H109 : BetS C F D
H108 : Col C B G
H107 : Col B G C
H106 : CongA C G K G B A
H105 : Out B C G
H104 : Out B G C
H103 : neq B G
H102 : Out B A A
H101 : eq A A
H100 : CongA C G K C B A
H99 : CongA C B A C G K
H98 : CongA D C B F C G
H97 : Out C B G
H96 : Out C G B
H95 : neq C G
H94 : BetS C G B
H93 : Out C D F
H92 : Out C F D
H91 : neq C F
H90 : BetS C F D
H89 : CongA D C B D C B
H88 : nCol D C B
H87 : nCol D B C
H86 : RT F C G C G K
H85 : BetS c C G
H84 : BetS C G B
H83 : OS F K C G
H82 : OS K F C G
H81 : RT D C B C B A
H80 : Par C D B A
H79 : BetS c C B
H78 : Cong C c B C
H77 : BetS B C c
c : Point
H76 : neq B C
H75 : Par E K G B
H74 : Par E K B G
H73 : CongA A E K E B G
H72 : Out B A E
H71 : Out B E A
H70 : OS K G E B
H69 : OS K G B E
H68 : Col B B E
H67 : eq B B
H66 : Out B C G
H65 : Out B G C
H64 : OS K C B E
H63 : OS C K B E
H62 : OS H K B E
H61 : OS H K E B
H60 : Col E A B
H59 : OS C H B E
H58 : Out A D H
H57 : Out A H D
H56 : OS C D B E
H55 : neq B E
H54 : neq E B
H53 : Col B A E
H52 : Col A E B
H51 : OS C D B A
H50 : CongA A E K A B C
H49 : CongA H A E D A B
H48 : CongA E A H B A D
H47 : CongA E A H E A H
H46 : nCol E A H
H45 : nCol A H E
H44 : Out A H D
H43 : Out A E B
H42 : RT H A E A E K
H41 : OS H K A E
H40 : BetS e A E
H39 : BetS E A e
H38 : BetS B E A
H37 : RT D A B A B C
H36 : OS D C A B
H35 : BetS e A B
H34 : Cong A e B A
H33 : BetS B A e
e : Point
H32 : neq B A
H31 : neq A B
H30 : neq B G
H29 : neq A H
H28 : neq A E
H27 : OS K F G C
H26 : OS H K E A
H25 : OS C D A B
H24 : OS D A C B
H23 : OS A D C B
H22 : OS A D B C
H21 : TP B C A D
H20 : TP G C K F
H19 : TP E A H K
H18 : TP A B C D
H17 : Par A H E K
H16 : Par C D A B
H15 : Par B C A D
H14 : Par G C K F
H13 : Par C F G K
H12 : Par F C G K
H11 : Par G K F C
H10 : Par E K A H
H9 : Par E A H K
H8 : Par A B C D
H7 : Par A D B C
H6 : PG G K F C
H5 : PG E A H K
H4 : BetS B G C
H3 : BetS D F C
H2 : BetS A E B
H1 : BetS A H D
H0 : PG A B C D
A,B,C,D,E,F,G,H,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
PG E K G B
+++++
assert (OS K A G B) by (conclude lemma_samesideflip).
-----
Lemma proposition_43B : forall A B C D E F G H K, PG A B C D -> BetS A H D -> BetS A E B -> BetS D F C -> BetS B G C -> PG E A H K -> PG G K F C -> PG E K G B.
Proof.
intros.
assert (Par A D B C) by (conclude_def PG ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par E A H K) by (conclude_def PG ).
assert (Par E K A H) by (conclude_def PG ).
assert (Par G K F C) by (conclude_def PG ).
assert (Par F C G K) by (conclude lemma_parallelsymmetric).
assert (Par C F G K) by (forward_using lemma_parallelflip).
assert (Par G C K F) by (conclude_def PG ).
assert (Par B C A D) by (conclude lemma_parallelsymmetric).
assert (Par C D A B) by (conclude lemma_parallelsymmetric).
assert (Par A H E K) by (conclude lemma_parallelsymmetric).
assert (TP A B C D) by (conclude lemma_paralleldef2B).
assert (TP E A H K) by (conclude lemma_paralleldef2B).
assert (TP G C K F) by (conclude lemma_paralleldef2B).
assert (TP B C A D) by (conclude lemma_paralleldef2B).
assert (OS A D B C) by (conclude_def TP ).
assert (OS A D C B) by (conclude lemma_samesideflip).
assert (OS D A C B) by (forward_using lemma_samesidesymmetric).
assert (OS C D A B) by (conclude_def TP ).
assert (OS H K E A) by (conclude_def TP ).
assert (OS K F G C) by (conclude_def TP ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (neq A H) by (forward_using lemma_betweennotequal).
assert (neq B G) by (forward_using lemma_betweennotequal).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists e, (BetS B A e /\\ Cong A e B A)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (BetS e A B) by (conclude axiom_betweennesssymmetry).
assert (OS D C A B) by (forward_using lemma_samesidesymmetric).
assert (RT D A B A B C) by (conclude proposition_29C).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert (BetS E A e) by (conclude lemma_3_6a).
assert (BetS e A E) by (conclude axiom_betweennesssymmetry).
assert (OS H K A E) by (forward_using lemma_samesidesymmetric).
assert (RT H A E A E K) by (conclude proposition_29C).
assert (Out A E B) by (conclude lemma_ray4).
assert (Out A H D) by (conclude lemma_ray4).
assert (nCol A H E) by (forward_using lemma_parallelNC).
assert (nCol E A H) by (forward_using lemma_NCorder).
assert (CongA E A H E A H) by (conclude lemma_equalanglesreflexive).
assert (CongA E A H B A D) by (conclude lemma_equalangleshelper).
assert (CongA H A E D A B) by (conclude lemma_equalanglesflip).
assert (CongA A E K A B C) by (apply (lemma_supplements2 H A E A B C D A B A E K);eauto).
assert (OS C D B A) by (conclude lemma_samesideflip).
assert (Col A E B) by (conclude_def Col ).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq E B) by (forward_using lemma_betweennotequal).
assert (neq B E) by (conclude lemma_inequalitysymmetric).
assert (OS C D B E) by (conclude lemma_samesidecollinear).
assert (Out A H D) by (conclude lemma_ray4).
assert (Out A D H) by (conclude lemma_ray5).
assert (OS C H B E) by (conclude lemma_sameside2).
assert (Col E A B) by (forward_using lemma_collinearorder).
assert (OS H K E B) by (conclude lemma_samesidecollinear).
assert (OS H K B E) by (conclude lemma_samesideflip).
assert (OS C K B E) by (conclude lemma_samesidetransitive).
assert (OS K C B E) by (forward_using lemma_samesidesymmetric).
assert (Out B G C) by (conclude lemma_ray4).
assert (Out B C G) by (conclude lemma_ray5).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (Col B B E) by (conclude_def Col ).
assert (OS K G B E) by (conclude lemma_sameside2).
assert (OS K G E B) by (conclude lemma_samesideflip).
assert (Out B E A) by (conclude lemma_ray4).
assert (Out B A E) by (conclude lemma_ray5).
assert (CongA A E K E B G) by (conclude lemma_equalangleshelper).
assert (Par E K B G) by (conclude proposition_28D).
assert (Par E K G B) by (forward_using lemma_parallelflip).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists c, (BetS B C c /\\ Cong C c B C)) by (conclude lemma_extension);destruct Tf as [c];spliter.
assert (BetS c C B) by (conclude axiom_betweennesssymmetry).
assert (Par C D B A) by (forward_using lemma_parallelflip).
assert (RT D C B C B A) by (conclude proposition_29C).
assert (OS K F C G) by (conclude lemma_samesideflip).
assert (OS F K C G) by (forward_using lemma_samesidesymmetric).
assert (BetS C G B) by (conclude axiom_betweennesssymmetry).
assert (BetS c C G) by (conclude axiom_innertransitivity).
assert (RT F C G C G K) by (conclude proposition_29C).
assert (nCol D B C) by (forward_using lemma_parallelNC).
assert (nCol D C B) by (forward_using lemma_NCorder).
assert (CongA D C B D C B) by (conclude lemma_equalanglesreflexive).
assert (BetS C F D) by (conclude axiom_betweennesssymmetry).
assert (neq C F) by (forward_using lemma_betweennotequal).
assert (Out C F D) by (conclude lemma_ray4).
assert (Out C D F) by (conclude lemma_ray5).
assert (BetS C G B) by (conclude axiom_betweennesssymmetry).
assert (neq C G) by (forward_using lemma_betweennotequal).
assert (Out C G B) by (conclude lemma_ray4).
assert (Out C B G) by (conclude lemma_ray5).
assert (CongA D C B F C G) by (conclude lemma_equalangleshelper).
assert (CongA C B A C G K) by (conclude (lemma_supplements2 D C B C G K F C G C B A)).
assert (CongA C G K C B A) by (conclude lemma_equalanglessymmetric).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out B A A) by (conclude lemma_ray4).
assert (neq B G) by (forward_using lemma_betweennotequal).
assert (Out B G C) by (conclude lemma_ray4).
assert (Out B C G) by (conclude lemma_ray5).
assert (CongA C G K G B A) by (conclude lemma_equalangleshelper).
assert (Col B G C) by (conclude_def Col ).
assert (Col C B G) by (forward_using lemma_collinearorder).
assert (BetS C F D) by (conclude axiom_betweennesssymmetry).
assert (neq C F) by (forward_using lemma_betweennotequal).
assert (Out C F D) by (conclude lemma_ray4).
assert (Out C D F) by (conclude lemma_ray5).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (OS A F B C) by (conclude lemma_sameside2).
assert (TP G C K F) by (conclude lemma_paralleldef2B).
assert (OS K F G C) by (conclude_def TP ).
assert (Col C G B) by (forward_using lemma_collinearorder).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
assert (OS K F C G) by (conclude lemma_samesideflip).
assert (OS K F C B) by (conclude lemma_samesidecollinear).
assert (OS K F B C) by (conclude lemma_samesideflip).
assert (OS F K B C) by (forward_using lemma_samesidesymmetric).
assert (OS A K B C) by (conclude lemma_samesidetransitive).
assert (OS K A B C) by (forward_using lemma_samesidesymmetric).
assert (Col B C G) by (forward_using lemma_collinearorder).
assert (OS K A B G) by (conclude lemma_samesidecollinear).
assert (OS K A G B) by (conclude lemma_samesideflip).

*****
H128 : OS K A G B
H127 : OS K A B G
H126 : Col B C G
H125 : OS K A B C
H124 : OS A K B C
H123 : OS F K B C
H122 : OS K F B C
H121 : OS K F C B
H120 : OS K F C G
H119 : neq C B
H118 : Col C G B
H117 : OS K F G C
H116 : TP G C K F
H115 : OS A F B C
H114 : Col B C C
H113 : eq C C
H112 : Out C D F
H111 : Out C F D
H110 : neq C F
H109 : BetS C F D
H108 : Col C B G
H107 : Col B G C
H106 : CongA C G K G B A
H105 : Out B C G
H104 : Out B G C
H103 : neq B G
H102 : Out B A A
H101 : eq A A
H100 : CongA C G K C B A
H99 : CongA C B A C G K
H98 : CongA D C B F C G
H97 : Out C B G
H96 : Out C G B
H95 : neq C G
H94 : BetS C G B
H93 : Out C D F
H92 : Out C F D
H91 : neq C F
H90 : BetS C F D
H89 : CongA D C B D C B
H88 : nCol D C B
H87 : nCol D B C
H86 : RT F C G C G K
H85 : BetS c C G
H84 : BetS C G B
H83 : OS F K C G
H82 : OS K F C G
H81 : RT D C B C B A
H80 : Par C D B A
H79 : BetS c C B
H78 : Cong C c B C
H77 : BetS B C c
c : Point
H76 : neq B C
H75 : Par E K G B
H74 : Par E K B G
H73 : CongA A E K E B G
H72 : Out B A E
H71 : Out B E A
H70 : OS K G E B
H69 : OS K G B E
H68 : Col B B E
H67 : eq B B
H66 : Out B C G
H65 : Out B G C
H64 : OS K C B E
H63 : OS C K B E
H62 : OS H K B E
H61 : OS H K E B
H60 : Col E A B
H59 : OS C H B E
H58 : Out A D H
H57 : Out A H D
H56 : OS C D B E
H55 : neq B E
H54 : neq E B
H53 : Col B A E
H52 : Col A E B
H51 : OS C D B A
H50 : CongA A E K A B C
H49 : CongA H A E D A B
H48 : CongA E A H B A D
H47 : CongA E A H E A H
H46 : nCol E A H
H45 : nCol A H E
H44 : Out A H D
H43 : Out A E B
H42 : RT H A E A E K
H41 : OS H K A E
H40 : BetS e A E
H39 : BetS E A e
H38 : BetS B E A
H37 : RT D A B A B C
H36 : OS D C A B
H35 : BetS e A B
H34 : Cong A e B A
H33 : BetS B A e
e : Point
H32 : neq B A
H31 : neq A B
H30 : neq B G
H29 : neq A H
H28 : neq A E
H27 : OS K F G C
H26 : OS H K E A
H25 : OS C D A B
H24 : OS D A C B
H23 : OS A D C B
H22 : OS A D B C
H21 : TP B C A D
H20 : TP G C K F
H19 : TP E A H K
H18 : TP A B C D
H17 : Par A H E K
H16 : Par C D A B
H15 : Par B C A D
H14 : Par G C K F
H13 : Par C F G K
H12 : Par F C G K
H11 : Par G K F C
H10 : Par E K A H
H9 : Par E A H K
H8 : Par A B C D
H7 : Par A D B C
H6 : PG G K F C
H5 : PG E A H K
H4 : BetS B G C
H3 : BetS D F C
H2 : BetS A E B
H1 : BetS A H D
H0 : PG A B C D
A,B,C,D,E,F,G,H,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
PG E K G B
+++++
assert (Par G K B A) by (conclude proposition_28D).
-----
Lemma proposition_43B : forall A B C D E F G H K, PG A B C D -> BetS A H D -> BetS A E B -> BetS D F C -> BetS B G C -> PG E A H K -> PG G K F C -> PG E K G B.
Proof.
intros.
assert (Par A D B C) by (conclude_def PG ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par E A H K) by (conclude_def PG ).
assert (Par E K A H) by (conclude_def PG ).
assert (Par G K F C) by (conclude_def PG ).
assert (Par F C G K) by (conclude lemma_parallelsymmetric).
assert (Par C F G K) by (forward_using lemma_parallelflip).
assert (Par G C K F) by (conclude_def PG ).
assert (Par B C A D) by (conclude lemma_parallelsymmetric).
assert (Par C D A B) by (conclude lemma_parallelsymmetric).
assert (Par A H E K) by (conclude lemma_parallelsymmetric).
assert (TP A B C D) by (conclude lemma_paralleldef2B).
assert (TP E A H K) by (conclude lemma_paralleldef2B).
assert (TP G C K F) by (conclude lemma_paralleldef2B).
assert (TP B C A D) by (conclude lemma_paralleldef2B).
assert (OS A D B C) by (conclude_def TP ).
assert (OS A D C B) by (conclude lemma_samesideflip).
assert (OS D A C B) by (forward_using lemma_samesidesymmetric).
assert (OS C D A B) by (conclude_def TP ).
assert (OS H K E A) by (conclude_def TP ).
assert (OS K F G C) by (conclude_def TP ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (neq A H) by (forward_using lemma_betweennotequal).
assert (neq B G) by (forward_using lemma_betweennotequal).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists e, (BetS B A e /\\ Cong A e B A)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (BetS e A B) by (conclude axiom_betweennesssymmetry).
assert (OS D C A B) by (forward_using lemma_samesidesymmetric).
assert (RT D A B A B C) by (conclude proposition_29C).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert (BetS E A e) by (conclude lemma_3_6a).
assert (BetS e A E) by (conclude axiom_betweennesssymmetry).
assert (OS H K A E) by (forward_using lemma_samesidesymmetric).
assert (RT H A E A E K) by (conclude proposition_29C).
assert (Out A E B) by (conclude lemma_ray4).
assert (Out A H D) by (conclude lemma_ray4).
assert (nCol A H E) by (forward_using lemma_parallelNC).
assert (nCol E A H) by (forward_using lemma_NCorder).
assert (CongA E A H E A H) by (conclude lemma_equalanglesreflexive).
assert (CongA E A H B A D) by (conclude lemma_equalangleshelper).
assert (CongA H A E D A B) by (conclude lemma_equalanglesflip).
assert (CongA A E K A B C) by (apply (lemma_supplements2 H A E A B C D A B A E K);eauto).
assert (OS C D B A) by (conclude lemma_samesideflip).
assert (Col A E B) by (conclude_def Col ).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq E B) by (forward_using lemma_betweennotequal).
assert (neq B E) by (conclude lemma_inequalitysymmetric).
assert (OS C D B E) by (conclude lemma_samesidecollinear).
assert (Out A H D) by (conclude lemma_ray4).
assert (Out A D H) by (conclude lemma_ray5).
assert (OS C H B E) by (conclude lemma_sameside2).
assert (Col E A B) by (forward_using lemma_collinearorder).
assert (OS H K E B) by (conclude lemma_samesidecollinear).
assert (OS H K B E) by (conclude lemma_samesideflip).
assert (OS C K B E) by (conclude lemma_samesidetransitive).
assert (OS K C B E) by (forward_using lemma_samesidesymmetric).
assert (Out B G C) by (conclude lemma_ray4).
assert (Out B C G) by (conclude lemma_ray5).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (Col B B E) by (conclude_def Col ).
assert (OS K G B E) by (conclude lemma_sameside2).
assert (OS K G E B) by (conclude lemma_samesideflip).
assert (Out B E A) by (conclude lemma_ray4).
assert (Out B A E) by (conclude lemma_ray5).
assert (CongA A E K E B G) by (conclude lemma_equalangleshelper).
assert (Par E K B G) by (conclude proposition_28D).
assert (Par E K G B) by (forward_using lemma_parallelflip).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists c, (BetS B C c /\\ Cong C c B C)) by (conclude lemma_extension);destruct Tf as [c];spliter.
assert (BetS c C B) by (conclude axiom_betweennesssymmetry).
assert (Par C D B A) by (forward_using lemma_parallelflip).
assert (RT D C B C B A) by (conclude proposition_29C).
assert (OS K F C G) by (conclude lemma_samesideflip).
assert (OS F K C G) by (forward_using lemma_samesidesymmetric).
assert (BetS C G B) by (conclude axiom_betweennesssymmetry).
assert (BetS c C G) by (conclude axiom_innertransitivity).
assert (RT F C G C G K) by (conclude proposition_29C).
assert (nCol D B C) by (forward_using lemma_parallelNC).
assert (nCol D C B) by (forward_using lemma_NCorder).
assert (CongA D C B D C B) by (conclude lemma_equalanglesreflexive).
assert (BetS C F D) by (conclude axiom_betweennesssymmetry).
assert (neq C F) by (forward_using lemma_betweennotequal).
assert (Out C F D) by (conclude lemma_ray4).
assert (Out C D F) by (conclude lemma_ray5).
assert (BetS C G B) by (conclude axiom_betweennesssymmetry).
assert (neq C G) by (forward_using lemma_betweennotequal).
assert (Out C G B) by (conclude lemma_ray4).
assert (Out C B G) by (conclude lemma_ray5).
assert (CongA D C B F C G) by (conclude lemma_equalangleshelper).
assert (CongA C B A C G K) by (conclude (lemma_supplements2 D C B C G K F C G C B A)).
assert (CongA C G K C B A) by (conclude lemma_equalanglessymmetric).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out B A A) by (conclude lemma_ray4).
assert (neq B G) by (forward_using lemma_betweennotequal).
assert (Out B G C) by (conclude lemma_ray4).
assert (Out B C G) by (conclude lemma_ray5).
assert (CongA C G K G B A) by (conclude lemma_equalangleshelper).
assert (Col B G C) by (conclude_def Col ).
assert (Col C B G) by (forward_using lemma_collinearorder).
assert (BetS C F D) by (conclude axiom_betweennesssymmetry).
assert (neq C F) by (forward_using lemma_betweennotequal).
assert (Out C F D) by (conclude lemma_ray4).
assert (Out C D F) by (conclude lemma_ray5).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (OS A F B C) by (conclude lemma_sameside2).
assert (TP G C K F) by (conclude lemma_paralleldef2B).
assert (OS K F G C) by (conclude_def TP ).
assert (Col C G B) by (forward_using lemma_collinearorder).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
assert (OS K F C G) by (conclude lemma_samesideflip).
assert (OS K F C B) by (conclude lemma_samesidecollinear).
assert (OS K F B C) by (conclude lemma_samesideflip).
assert (OS F K B C) by (forward_using lemma_samesidesymmetric).
assert (OS A K B C) by (conclude lemma_samesidetransitive).
assert (OS K A B C) by (forward_using lemma_samesidesymmetric).
assert (Col B C G) by (forward_using lemma_collinearorder).
assert (OS K A B G) by (conclude lemma_samesidecollinear).
assert (OS K A G B) by (conclude lemma_samesideflip).
assert (Par G K B A) by (conclude proposition_28D).

*****
H129 : Par G K B A
H128 : OS K A G B
H127 : OS K A B G
H126 : Col B C G
H125 : OS K A B C
H124 : OS A K B C
H123 : OS F K B C
H122 : OS K F B C
H121 : OS K F C B
H120 : OS K F C G
H119 : neq C B
H118 : Col C G B
H117 : OS K F G C
H116 : TP G C K F
H115 : OS A F B C
H114 : Col B C C
H113 : eq C C
H112 : Out C D F
H111 : Out C F D
H110 : neq C F
H109 : BetS C F D
H108 : Col C B G
H107 : Col B G C
H106 : CongA C G K G B A
H105 : Out B C G
H104 : Out B G C
H103 : neq B G
H102 : Out B A A
H101 : eq A A
H100 : CongA C G K C B A
H99 : CongA C B A C G K
H98 : CongA D C B F C G
H97 : Out C B G
H96 : Out C G B
H95 : neq C G
H94 : BetS C G B
H93 : Out C D F
H92 : Out C F D
H91 : neq C F
H90 : BetS C F D
H89 : CongA D C B D C B
H88 : nCol D C B
H87 : nCol D B C
H86 : RT F C G C G K
H85 : BetS c C G
H84 : BetS C G B
H83 : OS F K C G
H82 : OS K F C G
H81 : RT D C B C B A
H80 : Par C D B A
H79 : BetS c C B
H78 : Cong C c B C
H77 : BetS B C c
c : Point
H76 : neq B C
H75 : Par E K G B
H74 : Par E K B G
H73 : CongA A E K E B G
H72 : Out B A E
H71 : Out B E A
H70 : OS K G E B
H69 : OS K G B E
H68 : Col B B E
H67 : eq B B
H66 : Out B C G
H65 : Out B G C
H64 : OS K C B E
H63 : OS C K B E
H62 : OS H K B E
H61 : OS H K E B
H60 : Col E A B
H59 : OS C H B E
H58 : Out A D H
H57 : Out A H D
H56 : OS C D B E
H55 : neq B E
H54 : neq E B
H53 : Col B A E
H52 : Col A E B
H51 : OS C D B A
H50 : CongA A E K A B C
H49 : CongA H A E D A B
H48 : CongA E A H B A D
H47 : CongA E A H E A H
H46 : nCol E A H
H45 : nCol A H E
H44 : Out A H D
H43 : Out A E B
H42 : RT H A E A E K
H41 : OS H K A E
H40 : BetS e A E
H39 : BetS E A e
H38 : BetS B E A
H37 : RT D A B A B C
H36 : OS D C A B
H35 : BetS e A B
H34 : Cong A e B A
H33 : BetS B A e
e : Point
H32 : neq B A
H31 : neq A B
H30 : neq B G
H29 : neq A H
H28 : neq A E
H27 : OS K F G C
H26 : OS H K E A
H25 : OS C D A B
H24 : OS D A C B
H23 : OS A D C B
H22 : OS A D B C
H21 : TP B C A D
H20 : TP G C K F
H19 : TP E A H K
H18 : TP A B C D
H17 : Par A H E K
H16 : Par C D A B
H15 : Par B C A D
H14 : Par G C K F
H13 : Par C F G K
H12 : Par F C G K
H11 : Par G K F C
H10 : Par E K A H
H9 : Par E A H K
H8 : Par A B C D
H7 : Par A D B C
H6 : PG G K F C
H5 : PG E A H K
H4 : BetS B G C
H3 : BetS D F C
H2 : BetS A E B
H1 : BetS A H D
H0 : PG A B C D
A,B,C,D,E,F,G,H,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
PG E K G B
+++++
assert (Par G K A B) by (forward_using lemma_parallelflip).
-----
Lemma proposition_43B : forall A B C D E F G H K, PG A B C D -> BetS A H D -> BetS A E B -> BetS D F C -> BetS B G C -> PG E A H K -> PG G K F C -> PG E K G B.
Proof.
intros.
assert (Par A D B C) by (conclude_def PG ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par E A H K) by (conclude_def PG ).
assert (Par E K A H) by (conclude_def PG ).
assert (Par G K F C) by (conclude_def PG ).
assert (Par F C G K) by (conclude lemma_parallelsymmetric).
assert (Par C F G K) by (forward_using lemma_parallelflip).
assert (Par G C K F) by (conclude_def PG ).
assert (Par B C A D) by (conclude lemma_parallelsymmetric).
assert (Par C D A B) by (conclude lemma_parallelsymmetric).
assert (Par A H E K) by (conclude lemma_parallelsymmetric).
assert (TP A B C D) by (conclude lemma_paralleldef2B).
assert (TP E A H K) by (conclude lemma_paralleldef2B).
assert (TP G C K F) by (conclude lemma_paralleldef2B).
assert (TP B C A D) by (conclude lemma_paralleldef2B).
assert (OS A D B C) by (conclude_def TP ).
assert (OS A D C B) by (conclude lemma_samesideflip).
assert (OS D A C B) by (forward_using lemma_samesidesymmetric).
assert (OS C D A B) by (conclude_def TP ).
assert (OS H K E A) by (conclude_def TP ).
assert (OS K F G C) by (conclude_def TP ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (neq A H) by (forward_using lemma_betweennotequal).
assert (neq B G) by (forward_using lemma_betweennotequal).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists e, (BetS B A e /\\ Cong A e B A)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (BetS e A B) by (conclude axiom_betweennesssymmetry).
assert (OS D C A B) by (forward_using lemma_samesidesymmetric).
assert (RT D A B A B C) by (conclude proposition_29C).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert (BetS E A e) by (conclude lemma_3_6a).
assert (BetS e A E) by (conclude axiom_betweennesssymmetry).
assert (OS H K A E) by (forward_using lemma_samesidesymmetric).
assert (RT H A E A E K) by (conclude proposition_29C).
assert (Out A E B) by (conclude lemma_ray4).
assert (Out A H D) by (conclude lemma_ray4).
assert (nCol A H E) by (forward_using lemma_parallelNC).
assert (nCol E A H) by (forward_using lemma_NCorder).
assert (CongA E A H E A H) by (conclude lemma_equalanglesreflexive).
assert (CongA E A H B A D) by (conclude lemma_equalangleshelper).
assert (CongA H A E D A B) by (conclude lemma_equalanglesflip).
assert (CongA A E K A B C) by (apply (lemma_supplements2 H A E A B C D A B A E K);eauto).
assert (OS C D B A) by (conclude lemma_samesideflip).
assert (Col A E B) by (conclude_def Col ).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq E B) by (forward_using lemma_betweennotequal).
assert (neq B E) by (conclude lemma_inequalitysymmetric).
assert (OS C D B E) by (conclude lemma_samesidecollinear).
assert (Out A H D) by (conclude lemma_ray4).
assert (Out A D H) by (conclude lemma_ray5).
assert (OS C H B E) by (conclude lemma_sameside2).
assert (Col E A B) by (forward_using lemma_collinearorder).
assert (OS H K E B) by (conclude lemma_samesidecollinear).
assert (OS H K B E) by (conclude lemma_samesideflip).
assert (OS C K B E) by (conclude lemma_samesidetransitive).
assert (OS K C B E) by (forward_using lemma_samesidesymmetric).
assert (Out B G C) by (conclude lemma_ray4).
assert (Out B C G) by (conclude lemma_ray5).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (Col B B E) by (conclude_def Col ).
assert (OS K G B E) by (conclude lemma_sameside2).
assert (OS K G E B) by (conclude lemma_samesideflip).
assert (Out B E A) by (conclude lemma_ray4).
assert (Out B A E) by (conclude lemma_ray5).
assert (CongA A E K E B G) by (conclude lemma_equalangleshelper).
assert (Par E K B G) by (conclude proposition_28D).
assert (Par E K G B) by (forward_using lemma_parallelflip).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists c, (BetS B C c /\\ Cong C c B C)) by (conclude lemma_extension);destruct Tf as [c];spliter.
assert (BetS c C B) by (conclude axiom_betweennesssymmetry).
assert (Par C D B A) by (forward_using lemma_parallelflip).
assert (RT D C B C B A) by (conclude proposition_29C).
assert (OS K F C G) by (conclude lemma_samesideflip).
assert (OS F K C G) by (forward_using lemma_samesidesymmetric).
assert (BetS C G B) by (conclude axiom_betweennesssymmetry).
assert (BetS c C G) by (conclude axiom_innertransitivity).
assert (RT F C G C G K) by (conclude proposition_29C).
assert (nCol D B C) by (forward_using lemma_parallelNC).
assert (nCol D C B) by (forward_using lemma_NCorder).
assert (CongA D C B D C B) by (conclude lemma_equalanglesreflexive).
assert (BetS C F D) by (conclude axiom_betweennesssymmetry).
assert (neq C F) by (forward_using lemma_betweennotequal).
assert (Out C F D) by (conclude lemma_ray4).
assert (Out C D F) by (conclude lemma_ray5).
assert (BetS C G B) by (conclude axiom_betweennesssymmetry).
assert (neq C G) by (forward_using lemma_betweennotequal).
assert (Out C G B) by (conclude lemma_ray4).
assert (Out C B G) by (conclude lemma_ray5).
assert (CongA D C B F C G) by (conclude lemma_equalangleshelper).
assert (CongA C B A C G K) by (conclude (lemma_supplements2 D C B C G K F C G C B A)).
assert (CongA C G K C B A) by (conclude lemma_equalanglessymmetric).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out B A A) by (conclude lemma_ray4).
assert (neq B G) by (forward_using lemma_betweennotequal).
assert (Out B G C) by (conclude lemma_ray4).
assert (Out B C G) by (conclude lemma_ray5).
assert (CongA C G K G B A) by (conclude lemma_equalangleshelper).
assert (Col B G C) by (conclude_def Col ).
assert (Col C B G) by (forward_using lemma_collinearorder).
assert (BetS C F D) by (conclude axiom_betweennesssymmetry).
assert (neq C F) by (forward_using lemma_betweennotequal).
assert (Out C F D) by (conclude lemma_ray4).
assert (Out C D F) by (conclude lemma_ray5).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (OS A F B C) by (conclude lemma_sameside2).
assert (TP G C K F) by (conclude lemma_paralleldef2B).
assert (OS K F G C) by (conclude_def TP ).
assert (Col C G B) by (forward_using lemma_collinearorder).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
assert (OS K F C G) by (conclude lemma_samesideflip).
assert (OS K F C B) by (conclude lemma_samesidecollinear).
assert (OS K F B C) by (conclude lemma_samesideflip).
assert (OS F K B C) by (forward_using lemma_samesidesymmetric).
assert (OS A K B C) by (conclude lemma_samesidetransitive).
assert (OS K A B C) by (forward_using lemma_samesidesymmetric).
assert (Col B C G) by (forward_using lemma_collinearorder).
assert (OS K A B G) by (conclude lemma_samesidecollinear).
assert (OS K A G B) by (conclude lemma_samesideflip).
assert (Par G K B A) by (conclude proposition_28D).
assert (Par G K A B) by (forward_using lemma_parallelflip).

*****
H130 : Par G K A B
H129 : Par G K B A
H128 : OS K A G B
H127 : OS K A B G
H126 : Col B C G
H125 : OS K A B C
H124 : OS A K B C
H123 : OS F K B C
H122 : OS K F B C
H121 : OS K F C B
H120 : OS K F C G
H119 : neq C B
H118 : Col C G B
H117 : OS K F G C
H116 : TP G C K F
H115 : OS A F B C
H114 : Col B C C
H113 : eq C C
H112 : Out C D F
H111 : Out C F D
H110 : neq C F
H109 : BetS C F D
H108 : Col C B G
H107 : Col B G C
H106 : CongA C G K G B A
H105 : Out B C G
H104 : Out B G C
H103 : neq B G
H102 : Out B A A
H101 : eq A A
H100 : CongA C G K C B A
H99 : CongA C B A C G K
H98 : CongA D C B F C G
H97 : Out C B G
H96 : Out C G B
H95 : neq C G
H94 : BetS C G B
H93 : Out C D F
H92 : Out C F D
H91 : neq C F
H90 : BetS C F D
H89 : CongA D C B D C B
H88 : nCol D C B
H87 : nCol D B C
H86 : RT F C G C G K
H85 : BetS c C G
H84 : BetS C G B
H83 : OS F K C G
H82 : OS K F C G
H81 : RT D C B C B A
H80 : Par C D B A
H79 : BetS c C B
H78 : Cong C c B C
H77 : BetS B C c
c : Point
H76 : neq B C
H75 : Par E K G B
H74 : Par E K B G
H73 : CongA A E K E B G
H72 : Out B A E
H71 : Out B E A
H70 : OS K G E B
H69 : OS K G B E
H68 : Col B B E
H67 : eq B B
H66 : Out B C G
H65 : Out B G C
H64 : OS K C B E
H63 : OS C K B E
H62 : OS H K B E
H61 : OS H K E B
H60 : Col E A B
H59 : OS C H B E
H58 : Out A D H
H57 : Out A H D
H56 : OS C D B E
H55 : neq B E
H54 : neq E B
H53 : Col B A E
H52 : Col A E B
H51 : OS C D B A
H50 : CongA A E K A B C
H49 : CongA H A E D A B
H48 : CongA E A H B A D
H47 : CongA E A H E A H
H46 : nCol E A H
H45 : nCol A H E
H44 : Out A H D
H43 : Out A E B
H42 : RT H A E A E K
H41 : OS H K A E
H40 : BetS e A E
H39 : BetS E A e
H38 : BetS B E A
H37 : RT D A B A B C
H36 : OS D C A B
H35 : BetS e A B
H34 : Cong A e B A
H33 : BetS B A e
e : Point
H32 : neq B A
H31 : neq A B
H30 : neq B G
H29 : neq A H
H28 : neq A E
H27 : OS K F G C
H26 : OS H K E A
H25 : OS C D A B
H24 : OS D A C B
H23 : OS A D C B
H22 : OS A D B C
H21 : TP B C A D
H20 : TP G C K F
H19 : TP E A H K
H18 : TP A B C D
H17 : Par A H E K
H16 : Par C D A B
H15 : Par B C A D
H14 : Par G C K F
H13 : Par C F G K
H12 : Par F C G K
H11 : Par G K F C
H10 : Par E K A H
H9 : Par E A H K
H8 : Par A B C D
H7 : Par A D B C
H6 : PG G K F C
H5 : PG E A H K
H4 : BetS B G C
H3 : BetS D F C
H2 : BetS A E B
H1 : BetS A H D
H0 : PG A B C D
A,B,C,D,E,F,G,H,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
PG E K G B
+++++
assert (Col A B E) by (forward_using lemma_collinearorder).
-----
Lemma proposition_43B : forall A B C D E F G H K, PG A B C D -> BetS A H D -> BetS A E B -> BetS D F C -> BetS B G C -> PG E A H K -> PG G K F C -> PG E K G B.
Proof.
intros.
assert (Par A D B C) by (conclude_def PG ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par E A H K) by (conclude_def PG ).
assert (Par E K A H) by (conclude_def PG ).
assert (Par G K F C) by (conclude_def PG ).
assert (Par F C G K) by (conclude lemma_parallelsymmetric).
assert (Par C F G K) by (forward_using lemma_parallelflip).
assert (Par G C K F) by (conclude_def PG ).
assert (Par B C A D) by (conclude lemma_parallelsymmetric).
assert (Par C D A B) by (conclude lemma_parallelsymmetric).
assert (Par A H E K) by (conclude lemma_parallelsymmetric).
assert (TP A B C D) by (conclude lemma_paralleldef2B).
assert (TP E A H K) by (conclude lemma_paralleldef2B).
assert (TP G C K F) by (conclude lemma_paralleldef2B).
assert (TP B C A D) by (conclude lemma_paralleldef2B).
assert (OS A D B C) by (conclude_def TP ).
assert (OS A D C B) by (conclude lemma_samesideflip).
assert (OS D A C B) by (forward_using lemma_samesidesymmetric).
assert (OS C D A B) by (conclude_def TP ).
assert (OS H K E A) by (conclude_def TP ).
assert (OS K F G C) by (conclude_def TP ).
assert (neq A E) by (forward_using lemma_betweennotequal).
assert (neq A H) by (forward_using lemma_betweennotequal).
assert (neq B G) by (forward_using lemma_betweennotequal).
assert (neq A B) by (forward_using lemma_betweennotequal).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists e, (BetS B A e /\\ Cong A e B A)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (BetS e A B) by (conclude axiom_betweennesssymmetry).
assert (OS D C A B) by (forward_using lemma_samesidesymmetric).
assert (RT D A B A B C) by (conclude proposition_29C).
assert (BetS B E A) by (conclude axiom_betweennesssymmetry).
assert (BetS E A e) by (conclude lemma_3_6a).
assert (BetS e A E) by (conclude axiom_betweennesssymmetry).
assert (OS H K A E) by (forward_using lemma_samesidesymmetric).
assert (RT H A E A E K) by (conclude proposition_29C).
assert (Out A E B) by (conclude lemma_ray4).
assert (Out A H D) by (conclude lemma_ray4).
assert (nCol A H E) by (forward_using lemma_parallelNC).
assert (nCol E A H) by (forward_using lemma_NCorder).
assert (CongA E A H E A H) by (conclude lemma_equalanglesreflexive).
assert (CongA E A H B A D) by (conclude lemma_equalangleshelper).
assert (CongA H A E D A B) by (conclude lemma_equalanglesflip).
assert (CongA A E K A B C) by (apply (lemma_supplements2 H A E A B C D A B A E K);eauto).
assert (OS C D B A) by (conclude lemma_samesideflip).
assert (Col A E B) by (conclude_def Col ).
assert (Col B A E) by (forward_using lemma_collinearorder).
assert (neq E B) by (forward_using lemma_betweennotequal).
assert (neq B E) by (conclude lemma_inequalitysymmetric).
assert (OS C D B E) by (conclude lemma_samesidecollinear).
assert (Out A H D) by (conclude lemma_ray4).
assert (Out A D H) by (conclude lemma_ray5).
assert (OS C H B E) by (conclude lemma_sameside2).
assert (Col E A B) by (forward_using lemma_collinearorder).
assert (OS H K E B) by (conclude lemma_samesidecollinear).
assert (OS H K B E) by (conclude lemma_samesideflip).
assert (OS C K B E) by (conclude lemma_samesidetransitive).
assert (OS K C B E) by (forward_using lemma_samesidesymmetric).
assert (Out B G C) by (conclude lemma_ray4).
assert (Out B C G) by (conclude lemma_ray5).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (Col B B E) by (conclude_def Col ).
assert (OS K G B E) by (conclude lemma_sameside2).
assert (OS K G E B) by (conclude lemma_samesideflip).
assert (Out B E A) by (conclude lemma_ray4).
assert (Out B A E) by (conclude lemma_ray5).
assert (CongA A E K E B G) by (conclude lemma_equalangleshelper).
assert (Par E K B G) by (conclude proposition_28D).
assert (Par E K G B) by (forward_using lemma_parallelflip).
assert (neq B C) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists c, (BetS B C c /\\ Cong C c B C)) by (conclude lemma_extension);destruct Tf as [c];spliter.
assert (BetS c C B) by (conclude axiom_betweennesssymmetry).
assert (Par C D B A) by (forward_using lemma_parallelflip).
assert (RT D C B C B A) by (conclude proposition_29C).
assert (OS K F C G) by (conclude lemma_samesideflip).
assert (OS F K C G) by (forward_using lemma_samesidesymmetric).
assert (BetS C G B) by (conclude axiom_betweennesssymmetry).
assert (BetS c C G) by (conclude axiom_innertransitivity).
assert (RT F C G C G K) by (conclude proposition_29C).
assert (nCol D B C) by (forward_using lemma_parallelNC).
assert (nCol D C B) by (forward_using lemma_NCorder).
assert (CongA D C B D C B) by (conclude lemma_equalanglesreflexive).
assert (BetS C F D) by (conclude axiom_betweennesssymmetry).
assert (neq C F) by (forward_using lemma_betweennotequal).
assert (Out C F D) by (conclude lemma_ray4).
assert (Out C D F) by (conclude lemma_ray5).
assert (BetS C G B) by (conclude axiom_betweennesssymmetry).
assert (neq C G) by (forward_using lemma_betweennotequal).
assert (Out C G B) by (conclude lemma_ray4).
assert (Out C B G) by (conclude lemma_ray5).
assert (CongA D C B F C G) by (conclude lemma_equalangleshelper).
assert (CongA C B A C G K) by (conclude (lemma_supplements2 D C B C G K F C G C B A)).
assert (CongA C G K C B A) by (conclude lemma_equalanglessymmetric).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Out B A A) by (conclude lemma_ray4).
assert (neq B G) by (forward_using lemma_betweennotequal).
assert (Out B G C) by (conclude lemma_ray4).
assert (Out B C G) by (conclude lemma_ray5).
assert (CongA C G K G B A) by (conclude lemma_equalangleshelper).
assert (Col B G C) by (conclude_def Col ).
assert (Col C B G) by (forward_using lemma_collinearorder).
assert (BetS C F D) by (conclude axiom_betweennesssymmetry).
assert (neq C F) by (forward_using lemma_betweennotequal).
assert (Out C F D) by (conclude lemma_ray4).
assert (Out C D F) by (conclude lemma_ray5).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (OS A F B C) by (conclude lemma_sameside2).
assert (TP G C K F) by (conclude lemma_paralleldef2B).
assert (OS K F G C) by (conclude_def TP ).
assert (Col C G B) by (forward_using lemma_collinearorder).
assert (neq C B) by (conclude lemma_inequalitysymmetric).
assert (OS K F C G) by (conclude lemma_samesideflip).
assert (OS K F C B) by (conclude lemma_samesidecollinear).
assert (OS K F B C) by (conclude lemma_samesideflip).
assert (OS F K B C) by (forward_using lemma_samesidesymmetric).
assert (OS A K B C) by (conclude lemma_samesidetransitive).
assert (OS K A B C) by (forward_using lemma_samesidesymmetric).
assert (Col B C G) by (forward_using lemma_collinearorder).
assert (OS K A B G) by (conclude lemma_samesidecollinear).
assert (OS K A G B) by (conclude lemma_samesideflip).
assert (Par G K B A) by (conclude proposition_28D).
assert (Par G K A B) by (forward_using lemma_parallelflip).
assert (Col A B E) by (forward_using lemma_collinearorder).

*****
H131 : Col A B E
H130 : Par G K A B
H129 : Par G K B A
H128 : OS K A G B
H127 : OS K A B G
H126 : Col B C G
H125 : OS K A B C
H124 : OS A K B C
H123 : OS F K B C
H122 : OS K F B C
H121 : OS K F C B
H120 : OS K F C G
H119 : neq C B
H118 : Col C G B
H117 : OS K F G C
H116 : TP G C K F
H115 : OS A F B C
H114 : Col B C C
H113 : eq C C
H112 : Out C D F
H111 : Out C F D
H110 : neq C F
H109 : BetS C F D
H108 : Col C B G
H107 : Col B G C
H106 : CongA C G K G B A
H105 : Out B C G
H104 : Out B G C
H103 : neq B G
H102 : Out B A A
H101 : eq A A
H100 : CongA C G K C B A
H99 : CongA C B A C G K
H98 : CongA D C B F C G
H97 : Out C B G
H96 : Out C G B
H95 : neq C G
H94 : BetS C G B
H93 : Out C D F
H92 : Out C F D
H91 : neq C F
H90 : BetS C F D
H89 : CongA D C B D C B
H88 : nCol D C B
H87 : nCol D B C
H86 : RT F C G C G K
H85 : BetS c C G
H84 : BetS C G B
H83 : OS F K C G
H82 : OS K F C G
H81 : RT D C B C B A
H80 : Par C D B A
H79 : BetS c C B
H78 : Cong C c B C
H77 : BetS B C c
c : Point
H76 : neq B C
H75 : Par E K G B
H74 : Par E K B G
H73 : CongA A E K E B G
H72 : Out B A E
H71 : Out B E A
H70 : OS K G E B
H69 : OS K G B E
H68 : Col B B E
H67 : eq B B
H66 : Out B C G
H65 : Out B G C
H64 : OS K C B E
H63 : OS C K B E
H62 : OS H K B E
H61 : OS H K E B
H60 : Col E A B
H59 : OS C H B E
H58 : Out A D H
H57 : Out A H D
H56 : OS C D B E
H55 : neq B E
H54 : neq E B
H53 : Col B A E
H52 : Col A E B
H51 : OS C D B A
H50 : CongA A E K A B C
H49 : CongA H A E D A B
H48 : CongA E A H B A D
H47 : CongA E A H E A H
H46 : nCol E A H
H45 : nCol A H E
H44 : Out A H D
H43 : Out A E B
H42 : RT H A E A E K
H41 : OS H K A E
H40 : BetS e A E
H39 : BetS E A e
H38 : BetS B E A
H37 : RT D A B A B C
H36 : OS D C A B
H35 : BetS e A B
H34 : Cong A e B A
H33 : BetS B A e
e : Point
H32 : neq B A
H31 : neq A B
H30 : neq B G
H29 : neq A H
H28 : neq A E
H27 : OS K F G C
H26 : OS H K E A
H25 : OS C D A B
H24 : OS D A C B
H23 : OS A D C B
H22 : OS A D B C
H21 : TP B C A D
H20 : TP G C K F
H19 : TP E A H K
H18 : TP A B C D
H17 : Par A H E K
H16 : Par C D A B
H15 : Par B C A D
H14 : Par G C K F
H13 : Par C F G K
H12 : Par F C G K
H11 : Par G K F C
H10 : Par E K A H
H9 : Par E A H K
H8 : Par A B C D
H7 : Par A D B C
H6 : PG G K F C
H5 : PG E A H K
H4 : BetS B G C
H3 : BetS D F C
H2 : BetS A E B
H1 : BetS A H D
H0 : PG A B C D
A,B,C,D,E,F,G,H,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
PG E K G B
+++++
