2ce8a9b31dd6dda008a7b4784a666765
Require Export GeoCoq.Elements.OriginalProofs.lemma_parallelcollinear1.
Require Export GeoCoq.Elements.OriginalProofs.lemma_tarskiparallelflip.
Require Export GeoCoq.Elements.OriginalProofs.lemma_parallelcollinear2.
Section Euclid.
Context `{Ax:euclidean_neutral_ruler_compass}.
Lemma lemma_parallelcollinear : 
   forall A B C c d, 
   TP A B c d -> Col c d C -> neq C d ->
   TP A B C d.
Proof.
  intros.
  assert ((neq A B /\ neq c d /\ ~ Meet A B c d /\ OS c d A B)).
  {
    conclude_def TP .
  }
  {
    idtac.
    assert ((eq c d \/ eq c C \/ eq d C \/ BetS d c C \/ BetS c d C \/ BetS c C d)).
    {
      conclude_def Col .
    }
    {
      idtac.
      assert (TP A B C d).
      {
        by cases on (eq c d \/ eq c C \/ eq d C \/ BetS d c C \/ BetS c d C \/ BetS c C d).
        {
          assert (~ ~ TP A B C d).
          {
            intro.
            contradict.
          }
          {
            close.
          }
        }
        {
          assert (TP A B C d).
          {
            conclude cn_equalitysub.
          }
          {
            idtac.
            close.
          }
        }
        {
          assert (~ ~ TP A B C d).
          {
            intro.
            assert (eq C d).
            {
              conclude lemma_equalitysymmetric.
            }
            {
              idtac.
              contradict.
            }
          }
          {
            close.
          }
        }
        {
          assert (BetS C c d).
          {
            conclude axiom_betweennesssymmetry.
          }
          {
            idtac.
            assert (TP A B C d).
            {
              conclude lemma_parallelcollinear1.
            }
            {
              idtac.
              close.
            }
          }
        }
        {
          assert (BetS C d c).
          {
            conclude axiom_betweennesssymmetry.
          }
          {
            idtac.
            assert (TP A B d c).
            {
              forward_using lemma_tarskiparallelflip.
            }
            {
              idtac.
              assert (TP A B C c).
              {
                conclude lemma_parallelcollinear1.
              }
              {
                idtac.
                assert (TP A B c C).
                {
                  forward_using lemma_tarskiparallelflip.
                }
                {
                  idtac.
                  assert (TP A B d C).
                  {
                    conclude lemma_parallelcollinear2.
                  }
                  {
                    idtac.
                    assert (TP A B C d).
                    {
                      forward_using lemma_tarskiparallelflip.
                    }
                    {
                      idtac.
                      close.
                    }
                  }
                }
              }
            }
          }
        }
        {
          assert (TP A B C d).
          {
            conclude lemma_parallelcollinear2.
          }
          {
            idtac.
            close.
          }
        }
      }
      {
        close.
      }
    }
  }
Qed.
End Euclid.
