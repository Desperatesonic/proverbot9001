Require Import GeoCoq.Axioms.parallel_postulates.
-----
Require Import GeoCoq.Tarski_dev.Ch12_parallel.
-----
Section proclus_SPP.
-----
Context `{TnEQD:Tarski_neutral_dimensionless_with_decidable_point_equality}.
-----
Lemma proclus_s_postulate_implies_strong_parallel_postulate :\n  proclus_postulate -> strong_parallel_postulate.
-----
Lemma proclus_s_postulate_implies_strong_parallel_postulate : proclus_postulate -> strong_parallel_postulate.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : proclus_postulate, strong_parallel_postulate
+++++
Proof.
-----
Lemma proclus_s_postulate_implies_strong_parallel_postulate : proclus_postulate -> strong_parallel_postulate.
Proof.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : proclus_postulate, strong_parallel_postulate
+++++
intros HP P Q R S T U HPTQ HRTS HNC1 HCop HCong1 Hcong2.
-----
Lemma proclus_s_postulate_implies_strong_parallel_postulate : proclus_postulate -> strong_parallel_postulate.
Proof.
intros HP P Q R S T U HPTQ HRTS HNC1 HCop HCong1 Hcong2.

*****
Hcong2 : Cong R T S T
HCong1 : Cong P T Q T
HCop : Coplanar P Q R U
HNC1 : not (Col P R U)
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HP : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun I : Tpoint => and (Col S Q I) (Col P U I))
+++++
elim (col_dec P Q R); [|intro HNC2]; [exists P; split; Col; unfold BetS in *; spliter; assert_cols; ColR|].
-----
Lemma proclus_s_postulate_implies_strong_parallel_postulate : proclus_postulate -> strong_parallel_postulate.
Proof.
intros HP P Q R S T U HPTQ HRTS HNC1 HCop HCong1 Hcong2.
elim (col_dec P Q R); [|intro HNC2]; [exists P; split; Col; unfold BetS in *; spliter; assert_cols; ColR|].

*****
HNC2 : not (Col P Q R)
Hcong2 : Cong R T S T
HCong1 : Cong P T Q T
HCop : Coplanar P Q R U
HNC1 : not (Col P R U)
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HP : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun I : Tpoint => and (Col S Q I) (Col P U I))
+++++
destruct (HP P R Q S P U) as [I [HCol1 HCol2]]; try exists I; Col.
-----
Lemma proclus_s_postulate_implies_strong_parallel_postulate : proclus_postulate -> strong_parallel_postulate.
Proof.
intros HP P Q R S T U HPTQ HRTS HNC1 HCop HCong1 Hcong2.
elim (col_dec P Q R); [|intro HNC2]; [exists P; split; Col; unfold BetS in *; spliter; assert_cols; ColR|].
destruct (HP P R Q S P U) as [I [HCol1 HCol2]]; try exists I; Col.

*****
HNC2 : not (Col P Q R)
Hcong2 : Cong R T S T
HCong1 : Cong P T Q T
HCop : Coplanar P Q R U
HNC1 : not (Col P R U)
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HP : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par P R Q S
+++++
apply l12_17 with T; assert_diffs; Col; split; Cong; unfold BetS in *; spliter; Between.
-----
Lemma proclus_s_postulate_implies_strong_parallel_postulate : proclus_postulate -> strong_parallel_postulate.
Proof.
intros HP P Q R S T U HPTQ HRTS HNC1 HCop HCong1 Hcong2.
elim (col_dec P Q R); [|intro HNC2]; [exists P; split; Col; unfold BetS in *; spliter; assert_cols; ColR|].
destruct (HP P R Q S P U) as [I [HCol1 HCol2]]; try exists I; Col.
apply l12_17 with T; assert_diffs; Col; split; Cong; unfold BetS in *; spliter; Between.

*****
HNC2 : not (Col P Q R)
Hcong2 : Cong R T S T
HCong1 : Cong P T Q T
HCop : Coplanar P Q R U
HNC1 : not (Col P R U)
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HP : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar Q S P U
+++++
assert (Coplanar P Q R S) by (exists T; left; unfold BetS in *; spliter; assert_cols; Col).
-----
Lemma proclus_s_postulate_implies_strong_parallel_postulate : proclus_postulate -> strong_parallel_postulate.
Proof.
intros HP P Q R S T U HPTQ HRTS HNC1 HCop HCong1 Hcong2.
elim (col_dec P Q R); [|intro HNC2]; [exists P; split; Col; unfold BetS in *; spliter; assert_cols; ColR|].
destruct (HP P R Q S P U) as [I [HCol1 HCol2]]; try exists I; Col.
apply l12_17 with T; assert_diffs; Col; split; Cong; unfold BetS in *; spliter; Between.
assert (Coplanar P Q R S) by (exists T; left; unfold BetS in *; spliter; assert_cols; Col).

*****
H : Coplanar P Q R S
HNC2 : not (Col P Q R)
Hcong2 : Cong R T S T
HCong1 : Cong P T Q T
HCop : Coplanar P Q R U
HNC1 : not (Col P R U)
HRTS : BetS R T S
HPTQ : BetS P T Q
P,Q,R,S,T,U : Tpoint
HP : proclus_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar Q S P U
+++++
CopR.
-----
Lemma proclus_s_postulate_implies_strong_parallel_postulate : proclus_postulate -> strong_parallel_postulate.
Proof.
intros HP P Q R S T U HPTQ HRTS HNC1 HCop HCong1 Hcong2.
elim (col_dec P Q R); [|intro HNC2]; [exists P; split; Col; unfold BetS in *; spliter; assert_cols; ColR|].
destruct (HP P R Q S P U) as [I [HCol1 HCol2]]; try exists I; Col.
apply l12_17 with T; assert_diffs; Col; split; Cong; unfold BetS in *; spliter; Between.
assert (Coplanar P Q R S) by (exists T; left; unfold BetS in *; spliter; assert_cols; Col).
CopR.

*****

*****

+++++
Qed.
-----
End proclus_SPP.
-----
