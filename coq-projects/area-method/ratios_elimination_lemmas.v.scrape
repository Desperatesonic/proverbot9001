Require Export area_elimination_lemmas.
-----
Theorem non_zero_denom_on_line_d_1_length_ratio :\n forall (Y P Q : Point) (l : F), on_line_d Y P Q l -> P<>Q.
-----
Theorem non_zero_denom_on_line_d_1_length_ratio : forall (Y P Q : Point) (l : F), on_line_d Y P Q l -> P<>Q.

*****

*****
forall (Y P Q : Point) (l : F) (_ : on_line_d Y P Q l), not (eq P Q)
+++++
unfold on_line_d in |- *.
-----
Theorem non_zero_denom_on_line_d_1_length_ratio : forall (Y P Q : Point) (l : F), on_line_d Y P Q l -> P<>Q.
unfold on_line_d in |- *.

*****

*****
forall (Y P Q : Point) (l : F) (_ : and (Col Y P Q) (and (not (eq P Q)) (eq (DSeg P Y) (Fmult l (DSeg P Q))))), not (eq P Q)
+++++
intuition.
-----
Theorem non_zero_denom_on_line_d_1_length_ratio : forall (Y P Q : Point) (l : F), on_line_d Y P Q l -> P<>Q.
unfold on_line_d in |- *.
intuition.

*****

*****

+++++
Qed.
-----
Theorem non_zero_denom_on_line_d_1_length_ratio_seg :\n forall (Y P Q : Point) (l : F), on_line_d Y P Q l -> P**Q <> 0.
-----
Theorem non_zero_denom_on_line_d_1_length_ratio_seg : forall (Y P Q : Point) (l : F), on_line_d Y P Q l -> P**Q <> 0.

*****

*****
forall (Y P Q : Point) (l : F) (_ : on_line_d Y P Q l), not (eq (DSeg P Q) F0)
+++++
unfold on_line_d in |- *.
-----
Theorem non_zero_denom_on_line_d_1_length_ratio_seg : forall (Y P Q : Point) (l : F), on_line_d Y P Q l -> P**Q <> 0.
unfold on_line_d in |- *.

*****

*****
forall (Y P Q : Point) (l : F) (_ : and (Col Y P Q) (and (not (eq P Q)) (eq (DSeg P Y) (Fmult l (DSeg P Q))))), not (eq (DSeg P Q) F0)
+++++
intuition.
-----
Theorem non_zero_denom_on_line_d_1_length_ratio_seg : forall (Y P Q : Point) (l : F), on_line_d Y P Q l -> P**Q <> 0.
unfold on_line_d in |- *.
intuition.

*****

*****

+++++
Qed.
-----
Theorem non_zero_denom_on_line_1_length_ratio :\n forall (Y P Q : Point), on_line Y P Q -> P<>Q.
-----
Theorem non_zero_denom_on_line_1_length_ratio : forall (Y P Q : Point), on_line Y P Q -> P<>Q.

*****

*****
forall (Y P Q : Point) (_ : on_line Y P Q), not (eq P Q)
+++++
unfold on_line in |- *.
-----
Theorem non_zero_denom_on_line_1_length_ratio : forall (Y P Q : Point), on_line Y P Q -> P<>Q.
unfold on_line in |- *.

*****

*****
forall (Y P Q : Point) (_ : and (Col Y P Q) (not (eq P Q))), not (eq P Q)
+++++
intuition.
-----
Theorem non_zero_denom_on_line_1_length_ratio : forall (Y P Q : Point), on_line Y P Q -> P<>Q.
unfold on_line in |- *.
intuition.

*****

*****

+++++
Qed.
-----
Theorem non_zero_denom_on_line_1_length_ratio_seg :\n forall (Y P Q : Point), on_line Y P Q -> P**Q <> 0.
-----
Theorem non_zero_denom_on_line_1_length_ratio_seg : forall (Y P Q : Point), on_line Y P Q -> P**Q <> 0.

*****

*****
forall (Y P Q : Point) (_ : on_line Y P Q), not (eq (DSeg P Q) F0)
+++++
unfold on_line in |- *.
-----
Theorem non_zero_denom_on_line_1_length_ratio_seg : forall (Y P Q : Point), on_line Y P Q -> P**Q <> 0.
unfold on_line in |- *.

*****

*****
forall (Y P Q : Point) (_ : and (Col Y P Q) (not (eq P Q))), not (eq (DSeg P Q) F0)
+++++
intuition.
-----
Theorem non_zero_denom_on_line_1_length_ratio_seg : forall (Y P Q : Point), on_line Y P Q -> P**Q <> 0.
unfold on_line in |- *.
intuition.

*****

*****

+++++
Qed.
-----
Theorem elim_length_ratio_on_line_d_1 :\n forall (A C D P Q Y : Point) (lambda : F),\n on_line_d Y P Q lambda ->\n S A P Q = 0 ->\n C <> D -> \n A ** Y / C ** D = (A ** P / P ** Q + lambda) / (C ** D / P ** Q).
-----
Theorem elim_length_ratio_on_line_d_1 : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q = 0 -> C <> D -> A ** Y / C ** D = (A ** P / P ** Q + lambda) / (C ** D / P ** Q).

*****

*****
forall (A C D P Q Y : Point) (lambda : F) (_ : on_line_d Y P Q lambda) (_ : eq (S A P Q) F0) (_ : not (eq C D)), eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (Fplus (Fdiv (DSeg A P) (DSeg P Q)) lambda) (Fdiv (DSeg C D) (DSeg P Q)))
+++++
Proof.
-----
Theorem elim_length_ratio_on_line_d_1 : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q = 0 -> C <> D -> A ** Y / C ** D = (A ** P / P ** Q + lambda) / (C ** D / P ** Q).
Proof.

*****

*****
forall (A C D P Q Y : Point) (lambda : F) (_ : on_line_d Y P Q lambda) (_ : eq (S A P Q) F0) (_ : not (eq C D)), eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (Fplus (Fdiv (DSeg A P) (DSeg P Q)) lambda) (Fdiv (DSeg C D) (DSeg P Q)))
+++++
unfold on_line_d in |- *.
-----
Theorem elim_length_ratio_on_line_d_1 : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q = 0 -> C <> D -> A ** Y / C ** D = (A ** P / P ** Q + lambda) / (C ** D / P ** Q).
Proof.
unfold on_line_d in |- *.

*****

*****
forall (A C D P Q Y : Point) (lambda : F) (_ : and (Col Y P Q) (and (not (eq P Q)) (eq (DSeg P Y) (Fmult lambda (DSeg P Q))))) (_ : eq (S A P Q) F0) (_ : not (eq C D)), eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (Fplus (Fdiv (DSeg A P) (DSeg P Q)) lambda) (Fdiv (DSeg C D) (DSeg P Q)))
+++++
Geometry.
-----
Theorem elim_length_ratio_on_line_d_1 : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q = 0 -> C <> D -> A ** Y / C ** D = (A ** P / P ** Q + lambda) / (C ** D / P ** Q).
Proof.
unfold on_line_d in |- *.
Geometry.

*****

*****
forall (A C D P Q Y : Point) (lambda : F) (_ : and (Col Y P Q) (and (not (eq P Q)) (eq (DSeg P Y) (Fmult lambda (DSeg P Q))))) (_ : eq (S A P Q) F0) (_ : not (eq C D)), eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (Fplus (Fdiv (DSeg A P) (DSeg P Q)) lambda) (Fdiv (DSeg C D) (DSeg P Q)))
+++++
intros.
-----
Theorem elim_length_ratio_on_line_d_1 : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q = 0 -> C <> D -> A ** Y / C ** D = (A ** P / P ** Q + lambda) / (C ** D / P ** Q).
Proof.
unfold on_line_d in |- *.
Geometry.
intros.

*****
H1 : not (eq C D)
H0 : eq (S A P Q) F0
H : and (Col Y P Q)\n (and (not (eq P Q)) (eq (DSeg P Y) (Fmult lambda (DSeg P Q))))
lambda : F
A,C,D,P,Q,Y : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (Fplus (Fdiv (DSeg A P) (DSeg P Q)) lambda) (Fdiv (DSeg C D) (DSeg P Q)))
+++++
Geometry.
-----
Theorem elim_length_ratio_on_line_d_1 : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q = 0 -> C <> D -> A ** Y / C ** D = (A ** P / P ** Q + lambda) / (C ** D / P ** Q).
Proof.
unfold on_line_d in |- *.
Geometry.
intros.
Geometry.

*****
H1 : not (eq C D)
H0 : eq (S A P Q) F0
H : and (Col Y P Q)\n (and (not (eq P Q)) (eq (DSeg P Y) (Fmult lambda (DSeg P Q))))
lambda : F
A,C,D,P,Q,Y : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (Fplus (Fdiv (DSeg A P) (DSeg P Q)) lambda) (Fdiv (DSeg C D) (DSeg P Q)))
+++++
decompose [and] H.
-----
Theorem elim_length_ratio_on_line_d_1 : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q = 0 -> C <> D -> A ** Y / C ** D = (A ** P / P ** Q + lambda) / (C ** D / P ** Q).
Proof.
unfold on_line_d in |- *.
Geometry.
intros.
Geometry.
decompose [and] H.

*****
H5 : eq (DSeg P Y) (Fmult lambda (DSeg P Q))
H4 : not (eq P Q)
H2 : Col Y P Q
H1 : not (eq C D)
H0 : eq (S A P Q) F0
H : and (Col Y P Q)\n (and (not (eq P Q)) (eq (DSeg P Y) (Fmult lambda (DSeg P Q))))
lambda : F
A,C,D,P,Q,Y : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (Fplus (Fdiv (DSeg A P) (DSeg P Q)) lambda) (Fdiv (DSeg C D) (DSeg P Q)))
+++++
clear H.
-----
Theorem elim_length_ratio_on_line_d_1 : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q = 0 -> C <> D -> A ** Y / C ** D = (A ** P / P ** Q + lambda) / (C ** D / P ** Q).
Proof.
unfold on_line_d in |- *.
Geometry.
intros.
Geometry.
decompose [and] H.
clear H.

*****
H5 : eq (DSeg P Y) (Fmult lambda (DSeg P Q))
H4 : not (eq P Q)
H2 : Col Y P Q
H1 : not (eq C D)
H0 : eq (S A P Q) F0
lambda : F
A,C,D,P,Q,Y : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (Fplus (Fdiv (DSeg A P) (DSeg P Q)) lambda) (Fdiv (DSeg C D) (DSeg P Q)))
+++++
Geometry.
-----
Theorem elim_length_ratio_on_line_d_1 : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q = 0 -> C <> D -> A ** Y / C ** D = (A ** P / P ** Q + lambda) / (C ** D / P ** Q).
Proof.
unfold on_line_d in |- *.
Geometry.
intros.
Geometry.
decompose [and] H.
clear H.
Geometry.

*****
H5 : eq (DSeg P Y) (Fmult lambda (DSeg P Q))
H4 : not (eq P Q)
H2 : Col Y P Q
H1 : not (eq C D)
H0 : eq (S A P Q) F0
lambda : F
A,C,D,P,Q,Y : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (Fplus (Fdiv (DSeg A P) (DSeg P Q)) lambda) (Fdiv (DSeg C D) (DSeg P Q)))
+++++
assert (Col P Q A).
-----
Theorem elim_length_ratio_on_line_d_1 : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q = 0 -> C <> D -> A ** Y / C ** D = (A ** P / P ** Q + lambda) / (C ** D / P ** Q).
Proof.
unfold on_line_d in |- *.
Geometry.
intros.
Geometry.
decompose [and] H.
clear H.
Geometry.
assert (Col P Q A).

*****
H5 : eq (DSeg P Y) (Fmult lambda (DSeg P Q))
H4 : not (eq P Q)
H2 : Col Y P Q
H1 : not (eq C D)
H0 : eq (S A P Q) F0
lambda : F
A,C,D,P,Q,Y : Point
*****
Col P Q A
+++++
Geometry.
-----
Theorem elim_length_ratio_on_line_d_1 : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q = 0 -> C <> D -> A ** Y / C ** D = (A ** P / P ** Q + lambda) / (C ** D / P ** Q).
Proof.
unfold on_line_d in |- *.
Geometry.
intros.
Geometry.
decompose [and] H.
clear H.
Geometry.
assert (Col P Q A).

*****
H : Col P Q A
H5 : eq (DSeg P Y) (Fmult lambda (DSeg P Q))
H4 : not (eq P Q)
H2 : Col Y P Q
H1 : not (eq C D)
H0 : eq (S A P Q) F0
lambda : F
A,C,D,P,Q,Y : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (Fplus (Fdiv (DSeg A P) (DSeg P Q)) lambda) (Fdiv (DSeg C D) (DSeg P Q)))
+++++
Geometry.
-----
Theorem elim_length_ratio_on_line_d_1 : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q = 0 -> C <> D -> A ** Y / C ** D = (A ** P / P ** Q + lambda) / (C ** D / P ** Q).
Proof.
unfold on_line_d in |- *.
Geometry.
intros.
Geometry.
decompose [and] H.
clear H.
Geometry.
assert (Col P Q A).
Geometry.

*****
H : Col P Q A
H5 : eq (DSeg P Y) (Fmult lambda (DSeg P Q))
H4 : not (eq P Q)
H2 : Col Y P Q
H1 : not (eq C D)
H0 : eq (S A P Q) F0
lambda : F
A,C,D,P,Q,Y : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (Fplus (Fdiv (DSeg A P) (DSeg P Q)) lambda) (Fdiv (DSeg C D) (DSeg P Q)))
+++++
assert (Col P Q Y).
-----
Theorem elim_length_ratio_on_line_d_1 : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q = 0 -> C <> D -> A ** Y / C ** D = (A ** P / P ** Q + lambda) / (C ** D / P ** Q).
Proof.
unfold on_line_d in |- *.
Geometry.
intros.
Geometry.
decompose [and] H.
clear H.
Geometry.
assert (Col P Q A).
Geometry.
assert (Col P Q Y).

*****
H : Col P Q A
H5 : eq (DSeg P Y) (Fmult lambda (DSeg P Q))
H4 : not (eq P Q)
H2 : Col Y P Q
H1 : not (eq C D)
H0 : eq (S A P Q) F0
lambda : F
A,C,D,P,Q,Y : Point
*****
Col P Q Y
+++++
Geometry.
-----
Theorem elim_length_ratio_on_line_d_1 : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q = 0 -> C <> D -> A ** Y / C ** D = (A ** P / P ** Q + lambda) / (C ** D / P ** Q).
Proof.
unfold on_line_d in |- *.
Geometry.
intros.
Geometry.
decompose [and] H.
clear H.
Geometry.
assert (Col P Q A).
Geometry.
assert (Col P Q Y).

*****
H3 : Col P Q Y
H : Col P Q A
H5 : eq (DSeg P Y) (Fmult lambda (DSeg P Q))
H4 : not (eq P Q)
H2 : Col Y P Q
H1 : not (eq C D)
H0 : eq (S A P Q) F0
lambda : F
A,C,D,P,Q,Y : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (Fplus (Fdiv (DSeg A P) (DSeg P Q)) lambda) (Fdiv (DSeg C D) (DSeg P Q)))
+++++
Geometry.
-----
Theorem elim_length_ratio_on_line_d_1 : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q = 0 -> C <> D -> A ** Y / C ** D = (A ** P / P ** Q + lambda) / (C ** D / P ** Q).
Proof.
unfold on_line_d in |- *.
Geometry.
intros.
Geometry.
decompose [and] H.
clear H.
Geometry.
assert (Col P Q A).
Geometry.
assert (Col P Q Y).
Geometry.

*****
H3 : Col P Q Y
H : Col P Q A
H5 : eq (DSeg P Y) (Fmult lambda (DSeg P Q))
H4 : not (eq P Q)
H2 : Col Y P Q
H1 : not (eq C D)
H0 : eq (S A P Q) F0
lambda : F
A,C,D,P,Q,Y : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (Fplus (Fdiv (DSeg A P) (DSeg P Q)) lambda) (Fdiv (DSeg C D) (DSeg P Q)))
+++++
assert (Col P A Y).
-----
Theorem elim_length_ratio_on_line_d_1 : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q = 0 -> C <> D -> A ** Y / C ** D = (A ** P / P ** Q + lambda) / (C ** D / P ** Q).
Proof.
unfold on_line_d in |- *.
Geometry.
intros.
Geometry.
decompose [and] H.
clear H.
Geometry.
assert (Col P Q A).
Geometry.
assert (Col P Q Y).
Geometry.
assert (Col P A Y).

*****
H3 : Col P Q Y
H : Col P Q A
H5 : eq (DSeg P Y) (Fmult lambda (DSeg P Q))
H4 : not (eq P Q)
H2 : Col Y P Q
H1 : not (eq C D)
H0 : eq (S A P Q) F0
lambda : F
A,C,D,P,Q,Y : Point
*****
Col P A Y
+++++
eauto with Geom.
-----
Theorem elim_length_ratio_on_line_d_1 : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q = 0 -> C <> D -> A ** Y / C ** D = (A ** P / P ** Q + lambda) / (C ** D / P ** Q).
Proof.
unfold on_line_d in |- *.
Geometry.
intros.
Geometry.
decompose [and] H.
clear H.
Geometry.
assert (Col P Q A).
Geometry.
assert (Col P Q Y).
Geometry.
assert (Col P A Y).

*****
H6 : Col P A Y
H3 : Col P Q Y
H : Col P Q A
H5 : eq (DSeg P Y) (Fmult lambda (DSeg P Q))
H4 : not (eq P Q)
H2 : Col Y P Q
H1 : not (eq C D)
H0 : eq (S A P Q) F0
lambda : F
A,C,D,P,Q,Y : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (Fplus (Fdiv (DSeg A P) (DSeg P Q)) lambda) (Fdiv (DSeg C D) (DSeg P Q)))
+++++
eauto with Geom.
-----
Theorem elim_length_ratio_on_line_d_1 : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q = 0 -> C <> D -> A ** Y / C ** D = (A ** P / P ** Q + lambda) / (C ** D / P ** Q).
Proof.
unfold on_line_d in |- *.
Geometry.
intros.
Geometry.
decompose [and] H.
clear H.
Geometry.
assert (Col P Q A).
Geometry.
assert (Col P Q Y).
Geometry.
assert (Col P A Y).
eauto with Geom.

*****
H6 : Col P A Y
H3 : Col P Q Y
H : Col P Q A
H5 : eq (DSeg P Y) (Fmult lambda (DSeg P Q))
H4 : not (eq P Q)
H2 : Col Y P Q
H1 : not (eq C D)
H0 : eq (S A P Q) F0
lambda : F
A,C,D,P,Q,Y : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (Fplus (Fdiv (DSeg A P) (DSeg P Q)) lambda) (Fdiv (DSeg C D) (DSeg P Q)))
+++++
Geometry.
-----
Theorem elim_length_ratio_on_line_d_1 : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q = 0 -> C <> D -> A ** Y / C ** D = (A ** P / P ** Q + lambda) / (C ** D / P ** Q).
Proof.
unfold on_line_d in |- *.
Geometry.
intros.
Geometry.
decompose [and] H.
clear H.
Geometry.
assert (Col P Q A).
Geometry.
assert (Col P Q Y).
Geometry.
assert (Col P A Y).
eauto with Geom.
Geometry.

*****
H6 : Col P A Y
H3 : Col P Q Y
H : Col P Q A
H5 : eq (DSeg P Y) (Fmult lambda (DSeg P Q))
H4 : not (eq P Q)
H2 : Col Y P Q
H1 : not (eq C D)
H0 : eq (S A P Q) F0
lambda : F
A,C,D,P,Q,Y : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (Fplus (Fdiv (DSeg A P) (DSeg P Q)) lambda) (Fdiv (DSeg C D) (DSeg P Q)))
+++++
assert (A ** P + P ** Y = A ** Y).
-----
Theorem elim_length_ratio_on_line_d_1 : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q = 0 -> C <> D -> A ** Y / C ** D = (A ** P / P ** Q + lambda) / (C ** D / P ** Q).
Proof.
unfold on_line_d in |- *.
Geometry.
intros.
Geometry.
decompose [and] H.
clear H.
Geometry.
assert (Col P Q A).
Geometry.
assert (Col P Q Y).
Geometry.
assert (Col P A Y).
eauto with Geom.
Geometry.
assert (A ** P + P ** Y = A ** Y).

*****
H6 : Col P A Y
H3 : Col P Q Y
H : Col P Q A
H5 : eq (DSeg P Y) (Fmult lambda (DSeg P Q))
H4 : not (eq P Q)
H2 : Col Y P Q
H1 : not (eq C D)
H0 : eq (S A P Q) F0
lambda : F
A,C,D,P,Q,Y : Point
*****
eq (Fplus (DSeg A P) (DSeg P Y)) (DSeg A Y)
+++++
Geometry.
-----
Theorem elim_length_ratio_on_line_d_1 : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q = 0 -> C <> D -> A ** Y / C ** D = (A ** P / P ** Q + lambda) / (C ** D / P ** Q).
Proof.
unfold on_line_d in |- *.
Geometry.
intros.
Geometry.
decompose [and] H.
clear H.
Geometry.
assert (Col P Q A).
Geometry.
assert (Col P Q Y).
Geometry.
assert (Col P A Y).
eauto with Geom.
Geometry.
assert (A ** P + P ** Y = A ** Y).

*****
H7 : eq (Fplus (DSeg A P) (DSeg P Y)) (DSeg A Y)
H6 : Col P A Y
H3 : Col P Q Y
H : Col P Q A
H5 : eq (DSeg P Y) (Fmult lambda (DSeg P Q))
H4 : not (eq P Q)
H2 : Col Y P Q
H1 : not (eq C D)
H0 : eq (S A P Q) F0
lambda : F
A,C,D,P,Q,Y : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (Fplus (Fdiv (DSeg A P) (DSeg P Q)) lambda) (Fdiv (DSeg C D) (DSeg P Q)))
+++++
Geometry.
-----
Theorem elim_length_ratio_on_line_d_1 : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q = 0 -> C <> D -> A ** Y / C ** D = (A ** P / P ** Q + lambda) / (C ** D / P ** Q).
Proof.
unfold on_line_d in |- *.
Geometry.
intros.
Geometry.
decompose [and] H.
clear H.
Geometry.
assert (Col P Q A).
Geometry.
assert (Col P Q Y).
Geometry.
assert (Col P A Y).
eauto with Geom.
Geometry.
assert (A ** P + P ** Y = A ** Y).
Geometry.

*****
H7 : eq (Fplus (DSeg A P) (DSeg P Y)) (DSeg A Y)
H6 : Col P A Y
H3 : Col P Q Y
H : Col P Q A
H5 : eq (DSeg P Y) (Fmult lambda (DSeg P Q))
H4 : not (eq P Q)
H2 : Col Y P Q
H1 : not (eq C D)
H0 : eq (S A P Q) F0
lambda : F
A,C,D,P,Q,Y : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (Fplus (Fdiv (DSeg A P) (DSeg P Q)) lambda) (Fdiv (DSeg C D) (DSeg P Q)))
+++++
rewrite <- H7.
-----
Theorem elim_length_ratio_on_line_d_1 : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q = 0 -> C <> D -> A ** Y / C ** D = (A ** P / P ** Q + lambda) / (C ** D / P ** Q).
Proof.
unfold on_line_d in |- *.
Geometry.
intros.
Geometry.
decompose [and] H.
clear H.
Geometry.
assert (Col P Q A).
Geometry.
assert (Col P Q Y).
Geometry.
assert (Col P A Y).
eauto with Geom.
Geometry.
assert (A ** P + P ** Y = A ** Y).
Geometry.
rewrite <- H7.

*****
H7 : eq (Fplus (DSeg A P) (DSeg P Y)) (DSeg A Y)
H6 : Col P A Y
H3 : Col P Q Y
H : Col P Q A
H5 : eq (DSeg P Y) (Fmult lambda (DSeg P Q))
H4 : not (eq P Q)
H2 : Col Y P Q
H1 : not (eq C D)
H0 : eq (S A P Q) F0
lambda : F
A,C,D,P,Q,Y : Point
*****
eq (Fdiv (Fplus (DSeg A P) (DSeg P Y)) (DSeg C D)) (Fdiv (Fplus (Fdiv (DSeg A P) (DSeg P Q)) lambda) (Fdiv (DSeg C D) (DSeg P Q)))
+++++
Geometry.
-----
Theorem elim_length_ratio_on_line_d_1 : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q = 0 -> C <> D -> A ** Y / C ** D = (A ** P / P ** Q + lambda) / (C ** D / P ** Q).
Proof.
unfold on_line_d in |- *.
Geometry.
intros.
Geometry.
decompose [and] H.
clear H.
Geometry.
assert (Col P Q A).
Geometry.
assert (Col P Q Y).
Geometry.
assert (Col P A Y).
eauto with Geom.
Geometry.
assert (A ** P + P ** Y = A ** Y).
Geometry.
rewrite <- H7.
Geometry.

*****
H7 : eq (Fplus (DSeg A P) (DSeg P Y)) (DSeg A Y)
H6 : Col P A Y
H3 : Col P Q Y
H : Col P Q A
H5 : eq (DSeg P Y) (Fmult lambda (DSeg P Q))
H4 : not (eq P Q)
H2 : Col Y P Q
H1 : not (eq C D)
H0 : eq (S A P Q) F0
lambda : F
A,C,D,P,Q,Y : Point
*****
eq (Fdiv (Fplus (DSeg A P) (DSeg P Y)) (DSeg C D)) (Fdiv (Fplus (Fdiv (DSeg A P) (DSeg P Q)) lambda) (Fdiv (DSeg C D) (DSeg P Q)))
+++++
rewrite H5.
-----
Theorem elim_length_ratio_on_line_d_1 : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q = 0 -> C <> D -> A ** Y / C ** D = (A ** P / P ** Q + lambda) / (C ** D / P ** Q).
Proof.
unfold on_line_d in |- *.
Geometry.
intros.
Geometry.
decompose [and] H.
clear H.
Geometry.
assert (Col P Q A).
Geometry.
assert (Col P Q Y).
Geometry.
assert (Col P A Y).
eauto with Geom.
Geometry.
assert (A ** P + P ** Y = A ** Y).
Geometry.
rewrite <- H7.
Geometry.
rewrite H5.

*****
H7 : eq (Fplus (DSeg A P) (DSeg P Y)) (DSeg A Y)
H6 : Col P A Y
H3 : Col P Q Y
H : Col P Q A
H5 : eq (DSeg P Y) (Fmult lambda (DSeg P Q))
H4 : not (eq P Q)
H2 : Col Y P Q
H1 : not (eq C D)
H0 : eq (S A P Q) F0
lambda : F
A,C,D,P,Q,Y : Point
*****
eq (Fdiv (Fplus (DSeg A P) (Fmult lambda (DSeg P Q))) (DSeg C D)) (Fdiv (Fplus (Fdiv (DSeg A P) (DSeg P Q)) lambda) (Fdiv (DSeg C D) (DSeg P Q)))
+++++
Geometry.
-----
Theorem elim_length_ratio_on_line_d_1 : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q = 0 -> C <> D -> A ** Y / C ** D = (A ** P / P ** Q + lambda) / (C ** D / P ** Q).
Proof.
unfold on_line_d in |- *.
Geometry.
intros.
Geometry.
decompose [and] H.
clear H.
Geometry.
assert (Col P Q A).
Geometry.
assert (Col P Q Y).
Geometry.
assert (Col P A Y).
eauto with Geom.
Geometry.
assert (A ** P + P ** Y = A ** Y).
Geometry.
rewrite <- H7.
Geometry.
rewrite H5.
Geometry.

*****
H7 : eq (Fplus (DSeg A P) (DSeg P Y)) (DSeg A Y)
H6 : Col P A Y
H3 : Col P Q Y
H : Col P Q A
H5 : eq (DSeg P Y) (Fmult lambda (DSeg P Q))
H4 : not (eq P Q)
H2 : Col Y P Q
H1 : not (eq C D)
H0 : eq (S A P Q) F0
lambda : F
A,C,D,P,Q,Y : Point
*****
eq (Fdiv (Fplus (DSeg A P) (Fmult lambda (DSeg P Q))) (DSeg C D)) (Fdiv (Fplus (Fdiv (DSeg A P) (DSeg P Q)) lambda) (Fdiv (DSeg C D) (DSeg P Q)))
+++++
field.
-----
Theorem elim_length_ratio_on_line_d_1 : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q = 0 -> C <> D -> A ** Y / C ** D = (A ** P / P ** Q + lambda) / (C ** D / P ** Q).
Proof.
unfold on_line_d in |- *.
Geometry.
intros.
Geometry.
decompose [and] H.
clear H.
Geometry.
assert (Col P Q A).
Geometry.
assert (Col P Q Y).
Geometry.
assert (Col P A Y).
eauto with Geom.
Geometry.
assert (A ** P + P ** Y = A ** Y).
Geometry.
rewrite <- H7.
Geometry.
rewrite H5.
Geometry.
field.

*****
H7 : eq (Fplus (DSeg A P) (DSeg P Y)) (DSeg A Y)
H6 : Col P A Y
H3 : Col P Q Y
H : Col P Q A
H5 : eq (DSeg P Y) (Fmult lambda (DSeg P Q))
H4 : not (eq P Q)
H2 : Col Y P Q
H1 : not (eq C D)
H0 : eq (S A P Q) F0
lambda : F
A,C,D,P,Q,Y : Point
*****
and (not (eq (DSeg P Q) F0)) (not (eq (DSeg C D) F0))
+++++
Geometry.
-----
Theorem elim_length_ratio_on_line_d_1 : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q = 0 -> C <> D -> A ** Y / C ** D = (A ** P / P ** Q + lambda) / (C ** D / P ** Q).
Proof.
unfold on_line_d in |- *.
Geometry.
intros.
Geometry.
decompose [and] H.
clear H.
Geometry.
assert (Col P Q A).

*****

*****

+++++
Qed.
-----
Theorem elim_length_ratio_on_line_1 :\n forall (A C D P Q Y : Point),\n on_line Y P Q ->\n S A P Q = 0 ->\n C <> D -> \n A ** Y / C ** D = (A ** P / P ** Q + P**Y/P**Q) / (C ** D / P ** Q).
-----
Theorem elim_length_ratio_on_line_1 : forall (A C D P Q Y : Point), on_line Y P Q -> S A P Q = 0 -> C <> D -> A ** Y / C ** D = (A ** P / P ** Q + P**Y/P**Q) / (C ** D / P ** Q).

*****

*****
forall (A C D P Q Y : Point) (_ : on_line Y P Q) (_ : eq (S A P Q) F0) (_ : not (eq C D)), eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (Fplus (Fdiv (DSeg A P) (DSeg P Q)) (Fdiv (DSeg P Y) (DSeg P Q))) (Fdiv (DSeg C D) (DSeg P Q)))
+++++
Proof.
-----
Theorem elim_length_ratio_on_line_1 : forall (A C D P Q Y : Point), on_line Y P Q -> S A P Q = 0 -> C <> D -> A ** Y / C ** D = (A ** P / P ** Q + P**Y/P**Q) / (C ** D / P ** Q).
Proof.

*****

*****
forall (A C D P Q Y : Point) (_ : on_line Y P Q) (_ : eq (S A P Q) F0) (_ : not (eq C D)), eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (Fplus (Fdiv (DSeg A P) (DSeg P Q)) (Fdiv (DSeg P Y) (DSeg P Q))) (Fdiv (DSeg C D) (DSeg P Q)))
+++++
intros.
-----
Theorem elim_length_ratio_on_line_1 : forall (A C D P Q Y : Point), on_line Y P Q -> S A P Q = 0 -> C <> D -> A ** Y / C ** D = (A ** P / P ** Q + P**Y/P**Q) / (C ** D / P ** Q).
Proof.
intros.

*****
H1 : not (eq C D)
H0 : eq (S A P Q) F0
H : on_line Y P Q
A,C,D,P,Q,Y : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (Fplus (Fdiv (DSeg A P) (DSeg P Q)) (Fdiv (DSeg P Y) (DSeg P Q))) (Fdiv (DSeg C D) (DSeg P Q)))
+++++
assert (on_line_d Y P Q (P**Y/P**Q)).
-----
Theorem elim_length_ratio_on_line_1 : forall (A C D P Q Y : Point), on_line Y P Q -> S A P Q = 0 -> C <> D -> A ** Y / C ** D = (A ** P / P ** Q + P**Y/P**Q) / (C ** D / P ** Q).
Proof.
intros.
assert (on_line_d Y P Q (P**Y/P**Q)).

*****
H1 : not (eq C D)
H0 : eq (S A P Q) F0
H : on_line Y P Q
A,C,D,P,Q,Y : Point
*****
on_line_d Y P Q (Fdiv (DSeg P Y) (DSeg P Q))
+++++
unfold on_line_d.
-----
Theorem elim_length_ratio_on_line_1 : forall (A C D P Q Y : Point), on_line Y P Q -> S A P Q = 0 -> C <> D -> A ** Y / C ** D = (A ** P / P ** Q + P**Y/P**Q) / (C ** D / P ** Q).
Proof.
intros.
assert (on_line_d Y P Q (P**Y/P**Q)).
unfold on_line_d.

*****
H1 : not (eq C D)
H0 : eq (S A P Q) F0
H : on_line Y P Q
A,C,D,P,Q,Y : Point
*****
and (Col Y P Q) (and (not (eq P Q)) (eq (DSeg P Y) (Fmult (Fdiv (DSeg P Y) (DSeg P Q)) (DSeg P Q))))
+++++
unfold on_line in H.
-----
Theorem elim_length_ratio_on_line_1 : forall (A C D P Q Y : Point), on_line Y P Q -> S A P Q = 0 -> C <> D -> A ** Y / C ** D = (A ** P / P ** Q + P**Y/P**Q) / (C ** D / P ** Q).
Proof.
intros.
assert (on_line_d Y P Q (P**Y/P**Q)).
unfold on_line_d.
unfold on_line in H.

*****
H1 : not (eq C D)
H0 : eq (S A P Q) F0
H : and (Col Y P Q) (not (eq P Q))
A,C,D,P,Q,Y : Point
*****
and (Col Y P Q) (and (not (eq P Q)) (eq (DSeg P Y) (Fmult (Fdiv (DSeg P Y) (DSeg P Q)) (DSeg P Q))))
+++++
intuition.
-----
Theorem elim_length_ratio_on_line_1 : forall (A C D P Q Y : Point), on_line Y P Q -> S A P Q = 0 -> C <> D -> A ** Y / C ** D = (A ** P / P ** Q + P**Y/P**Q) / (C ** D / P ** Q).
Proof.
intros.
assert (on_line_d Y P Q (P**Y/P**Q)).
unfold on_line_d.
unfold on_line in H.
intuition.

*****
H3 : forall _ : eq P Q, False
H2 : Col Y P Q
H1 : forall _ : eq C D, False
H0 : eq (S A P Q) F0
A,C,D,P,Q,Y : Point
*****
eq (DSeg P Y) (Fmult (Fdiv (DSeg P Y) (DSeg P Q)) (DSeg P Q))
+++++
field.
-----
Theorem elim_length_ratio_on_line_1 : forall (A C D P Q Y : Point), on_line Y P Q -> S A P Q = 0 -> C <> D -> A ** Y / C ** D = (A ** P / P ** Q + P**Y/P**Q) / (C ** D / P ** Q).
Proof.
intros.
assert (on_line_d Y P Q (P**Y/P**Q)).
unfold on_line_d.
unfold on_line in H.
intuition.
field.

*****
H3 : forall _ : eq P Q, False
H2 : Col Y P Q
H1 : forall _ : eq C D, False
H0 : eq (S A P Q) F0
A,C,D,P,Q,Y : Point
*****
not (eq (DSeg P Q) F0)
+++++
Geometry.
-----
Theorem elim_length_ratio_on_line_1 : forall (A C D P Q Y : Point), on_line Y P Q -> S A P Q = 0 -> C <> D -> A ** Y / C ** D = (A ** P / P ** Q + P**Y/P**Q) / (C ** D / P ** Q).
Proof.
intros.
assert (on_line_d Y P Q (P**Y/P**Q)).

*****
H2 : on_line_d Y P Q (Fdiv (DSeg P Y) (DSeg P Q))
H1 : not (eq C D)
H0 : eq (S A P Q) F0
H : on_line Y P Q
A,C,D,P,Q,Y : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (Fplus (Fdiv (DSeg A P) (DSeg P Q)) (Fdiv (DSeg P Y) (DSeg P Q))) (Fdiv (DSeg C D) (DSeg P Q)))
+++++
apply elim_length_ratio_on_line_d_1.
-----
Theorem elim_length_ratio_on_line_1 : forall (A C D P Q Y : Point), on_line Y P Q -> S A P Q = 0 -> C <> D -> A ** Y / C ** D = (A ** P / P ** Q + P**Y/P**Q) / (C ** D / P ** Q).
Proof.
intros.
assert (on_line_d Y P Q (P**Y/P**Q)).
apply elim_length_ratio_on_line_d_1.

*****
H2 : on_line_d Y P Q (Fdiv (DSeg P Y) (DSeg P Q))
H1 : not (eq C D)
H0 : eq (S A P Q) F0
H : on_line Y P Q
A,C,D,P,Q,Y : Point
*****
on_line_d Y P Q (Fdiv (DSeg P Y) (DSeg P Q))
+++++
auto.
-----
Theorem elim_length_ratio_on_line_1 : forall (A C D P Q Y : Point), on_line Y P Q -> S A P Q = 0 -> C <> D -> A ** Y / C ** D = (A ** P / P ** Q + P**Y/P**Q) / (C ** D / P ** Q).
Proof.
intros.
assert (on_line_d Y P Q (P**Y/P**Q)).
apply elim_length_ratio_on_line_d_1.

*****
H2 : on_line_d Y P Q (Fdiv (DSeg P Y) (DSeg P Q))
H1 : not (eq C D)
H0 : eq (S A P Q) F0
H : on_line Y P Q
A,C,D,P,Q,Y : Point
*****
eq (S A P Q) F0
+++++
auto.
-----
Theorem elim_length_ratio_on_line_1 : forall (A C D P Q Y : Point), on_line Y P Q -> S A P Q = 0 -> C <> D -> A ** Y / C ** D = (A ** P / P ** Q + P**Y/P**Q) / (C ** D / P ** Q).
Proof.
intros.
assert (on_line_d Y P Q (P**Y/P**Q)).
apply elim_length_ratio_on_line_d_1.

*****
H2 : on_line_d Y P Q (Fdiv (DSeg P Y) (DSeg P Q))
H1 : not (eq C D)
H0 : eq (S A P Q) F0
H : on_line Y P Q
A,C,D,P,Q,Y : Point
*****
not (eq C D)
+++++
auto.
-----
Theorem elim_length_ratio_on_line_1 : forall (A C D P Q Y : Point), on_line Y P Q -> S A P Q = 0 -> C <> D -> A ** Y / C ** D = (A ** P / P ** Q + P**Y/P**Q) / (C ** D / P ** Q).
Proof.
intros.
assert (on_line_d Y P Q (P**Y/P**Q)).

*****

*****

+++++
Qed.
-----
Lemma\n  invariant_par_on_line_d_1_length_ratio :\n    forall (A C D P Q Y : Point) (lambda : F),\n    on_line_d Y P Q lambda -> S A P Q = 0 -> \n    parallel A Y C D -> parallel A P P Q.
-----
Lemma invariant_par_on_line_d_1_length_ratio : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q = 0 -> parallel A Y C D -> parallel A P P Q.

*****

*****
forall (A C D P Q Y : Point) (lambda : F) (_ : on_line_d Y P Q lambda) (_ : eq (S A P Q) F0) (_ : parallel A Y C D), parallel A P P Q
+++++
Proof.
-----
Lemma invariant_par_on_line_d_1_length_ratio : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q = 0 -> parallel A Y C D -> parallel A P P Q.
Proof.

*****

*****
forall (A C D P Q Y : Point) (lambda : F) (_ : on_line_d Y P Q lambda) (_ : eq (S A P Q) F0) (_ : parallel A Y C D), parallel A P P Q
+++++
intros.
-----
Lemma invariant_par_on_line_d_1_length_ratio : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q = 0 -> parallel A Y C D -> parallel A P P Q.
Proof.
intros.

*****
H1 : parallel A Y C D
H0 : eq (S A P Q) F0
H : on_line_d Y P Q lambda
lambda : F
A,C,D,P,Q,Y : Point
*****
parallel A P P Q
+++++
unfold parallel.
-----
Lemma invariant_par_on_line_d_1_length_ratio : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q = 0 -> parallel A Y C D -> parallel A P P Q.
Proof.
intros.
unfold parallel.

*****
H1 : parallel A Y C D
H0 : eq (S A P Q) F0
H : on_line_d Y P Q lambda
lambda : F
A,C,D,P,Q,Y : Point
*****
eq (S4 A P P Q) F0
+++++
unfold S4.
-----
Lemma invariant_par_on_line_d_1_length_ratio : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q = 0 -> parallel A Y C D -> parallel A P P Q.
Proof.
intros.
unfold parallel.
unfold S4.

*****
H1 : parallel A Y C D
H0 : eq (S A P Q) F0
H : on_line_d Y P Q lambda
lambda : F
A,C,D,P,Q,Y : Point
*****
eq (Fplus (S A P P) (S A P Q)) F0
+++++
rewrite H0.
-----
Lemma invariant_par_on_line_d_1_length_ratio : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q = 0 -> parallel A Y C D -> parallel A P P Q.
Proof.
intros.
unfold parallel.
unfold S4.
rewrite H0.

*****
H1 : parallel A Y C D
H0 : eq (S A P Q) F0
H : on_line_d Y P Q lambda
lambda : F
A,C,D,P,Q,Y : Point
*****
eq (Fplus (S A P P) F0) F0
+++++
ring_simplify.
-----
Lemma invariant_par_on_line_d_1_length_ratio : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q = 0 -> parallel A Y C D -> parallel A P P Q.
Proof.
intros.
unfold parallel.
unfold S4.
rewrite H0.
ring_simplify.

*****
H1 : parallel A Y C D
H0 : eq (S A P Q) F0
H : on_line_d Y P Q lambda
lambda : F
A,C,D,P,Q,Y : Point
*****
eq (S A P P) F0
+++++
Geometry.
-----
Lemma invariant_par_on_line_d_1_length_ratio : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q = 0 -> parallel A Y C D -> parallel A P P Q.
Proof.
intros.
unfold parallel.
unfold S4.
rewrite H0.
ring_simplify.
Geometry.

*****

*****

+++++
Qed.
-----
Lemma\n  invariant_par_on_line_1_length_ratio :\n    forall (A C D P Q Y : Point),\n    on_line Y P Q -> S A P Q = 0 -> \n    parallel A Y C D -> parallel A P P Q.
-----
Lemma invariant_par_on_line_1_length_ratio : forall (A C D P Q Y : Point), on_line Y P Q -> S A P Q = 0 -> parallel A Y C D -> parallel A P P Q.

*****

*****
forall (A C D P Q Y : Point) (_ : on_line Y P Q) (_ : eq (S A P Q) F0) (_ : parallel A Y C D), parallel A P P Q
+++++
Proof.
-----
Lemma invariant_par_on_line_1_length_ratio : forall (A C D P Q Y : Point), on_line Y P Q -> S A P Q = 0 -> parallel A Y C D -> parallel A P P Q.
Proof.

*****

*****
forall (A C D P Q Y : Point) (_ : on_line Y P Q) (_ : eq (S A P Q) F0) (_ : parallel A Y C D), parallel A P P Q
+++++
intros.
-----
Lemma invariant_par_on_line_1_length_ratio : forall (A C D P Q Y : Point), on_line Y P Q -> S A P Q = 0 -> parallel A Y C D -> parallel A P P Q.
Proof.
intros.

*****
H1 : parallel A Y C D
H0 : eq (S A P Q) F0
H : on_line Y P Q
A,C,D,P,Q,Y : Point
*****
parallel A P P Q
+++++
unfold parallel.
-----
Lemma invariant_par_on_line_1_length_ratio : forall (A C D P Q Y : Point), on_line Y P Q -> S A P Q = 0 -> parallel A Y C D -> parallel A P P Q.
Proof.
intros.
unfold parallel.

*****
H1 : parallel A Y C D
H0 : eq (S A P Q) F0
H : on_line Y P Q
A,C,D,P,Q,Y : Point
*****
eq (S4 A P P Q) F0
+++++
unfold S4.
-----
Lemma invariant_par_on_line_1_length_ratio : forall (A C D P Q Y : Point), on_line Y P Q -> S A P Q = 0 -> parallel A Y C D -> parallel A P P Q.
Proof.
intros.
unfold parallel.
unfold S4.

*****
H1 : parallel A Y C D
H0 : eq (S A P Q) F0
H : on_line Y P Q
A,C,D,P,Q,Y : Point
*****
eq (Fplus (S A P P) (S A P Q)) F0
+++++
rewrite H0.
-----
Lemma invariant_par_on_line_1_length_ratio : forall (A C D P Q Y : Point), on_line Y P Q -> S A P Q = 0 -> parallel A Y C D -> parallel A P P Q.
Proof.
intros.
unfold parallel.
unfold S4.
rewrite H0.

*****
H1 : parallel A Y C D
H0 : eq (S A P Q) F0
H : on_line Y P Q
A,C,D,P,Q,Y : Point
*****
eq (Fplus (S A P P) F0) F0
+++++
ring_simplify.
-----
Lemma invariant_par_on_line_1_length_ratio : forall (A C D P Q Y : Point), on_line Y P Q -> S A P Q = 0 -> parallel A Y C D -> parallel A P P Q.
Proof.
intros.
unfold parallel.
unfold S4.
rewrite H0.
ring_simplify.

*****
H1 : parallel A Y C D
H0 : eq (S A P Q) F0
H : on_line Y P Q
A,C,D,P,Q,Y : Point
*****
eq (S A P P) F0
+++++
Geometry.
-----
Lemma invariant_par_on_line_1_length_ratio : forall (A C D P Q Y : Point), on_line Y P Q -> S A P Q = 0 -> parallel A Y C D -> parallel A P P Q.
Proof.
intros.
unfold parallel.
unfold S4.
rewrite H0.
ring_simplify.
Geometry.

*****

*****

+++++
Qed.
-----
Lemma\n  invariant_par_on_line_d_1_length_ratio_2 :\n    forall (A C D P Q Y : Point) (lambda : F),\n    on_line_d Y P Q lambda -> S A P Q = 0 -> A<>Y -> \nparallel A Y C D -> parallel C D P Q.
-----
Lemma invariant_par_on_line_d_1_length_ratio_2 : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q = 0 -> A<>Y -> parallel A Y C D -> parallel C D P Q.

*****

*****
forall (A C D P Q Y : Point) (lambda : F) (_ : on_line_d Y P Q lambda) (_ : eq (S A P Q) F0) (_ : not (eq A Y)) (_ : parallel A Y C D), parallel C D P Q
+++++
Proof.
-----
Lemma invariant_par_on_line_d_1_length_ratio_2 : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q = 0 -> A<>Y -> parallel A Y C D -> parallel C D P Q.
Proof.

*****

*****
forall (A C D P Q Y : Point) (lambda : F) (_ : on_line_d Y P Q lambda) (_ : eq (S A P Q) F0) (_ : not (eq A Y)) (_ : parallel A Y C D), parallel C D P Q
+++++
intros.
-----
Lemma invariant_par_on_line_d_1_length_ratio_2 : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q = 0 -> A<>Y -> parallel A Y C D -> parallel C D P Q.
Proof.
intros.

*****
H2 : parallel A Y C D
H1 : not (eq A Y)
H0 : eq (S A P Q) F0
H : on_line_d Y P Q lambda
lambda : F
A,C,D,P,Q,Y : Point
*****
parallel C D P Q
+++++
assert (parallel P Q Y A).
-----
Lemma invariant_par_on_line_d_1_length_ratio_2 : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q = 0 -> A<>Y -> parallel A Y C D -> parallel C D P Q.
Proof.
intros.
assert (parallel P Q Y A).

*****
H2 : parallel A Y C D
H1 : not (eq A Y)
H0 : eq (S A P Q) F0
H : on_line_d Y P Q lambda
lambda : F
A,C,D,P,Q,Y : Point
*****
parallel P Q Y A
+++++
unfold parallel.
-----
Lemma invariant_par_on_line_d_1_length_ratio_2 : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q = 0 -> A<>Y -> parallel A Y C D -> parallel C D P Q.
Proof.
intros.
assert (parallel P Q Y A).
unfold parallel.

*****
H2 : parallel A Y C D
H1 : not (eq A Y)
H0 : eq (S A P Q) F0
H : on_line_d Y P Q lambda
lambda : F
A,C,D,P,Q,Y : Point
*****
eq (S4 P Y Q A) F0
+++++
unfold S4.
-----
Lemma invariant_par_on_line_d_1_length_ratio_2 : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q = 0 -> A<>Y -> parallel A Y C D -> parallel C D P Q.
Proof.
intros.
assert (parallel P Q Y A).
unfold parallel.
unfold S4.

*****
H2 : parallel A Y C D
H1 : not (eq A Y)
H0 : eq (S A P Q) F0
H : on_line_d Y P Q lambda
lambda : F
A,C,D,P,Q,Y : Point
*****
eq (Fplus (S P Y Q) (S P Q A)) F0
+++++
replace (S P Q A ) with 0.
-----
Lemma invariant_par_on_line_d_1_length_ratio_2 : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q = 0 -> A<>Y -> parallel A Y C D -> parallel C D P Q.
Proof.
intros.
assert (parallel P Q Y A).
unfold parallel.
unfold S4.
replace (S P Q A ) with 0.

*****
H2 : parallel A Y C D
H1 : not (eq A Y)
H0 : eq (S A P Q) F0
H : on_line_d Y P Q lambda
lambda : F
A,C,D,P,Q,Y : Point
*****
eq (Fplus (S P Y Q) F0) F0
+++++
ring_simplify.
-----
Lemma invariant_par_on_line_d_1_length_ratio_2 : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q = 0 -> A<>Y -> parallel A Y C D -> parallel C D P Q.
Proof.
intros.
assert (parallel P Q Y A).
unfold parallel.
unfold S4.
replace (S P Q A ) with 0.
ring_simplify.

*****
H2 : parallel A Y C D
H1 : not (eq A Y)
H0 : eq (S A P Q) F0
H : on_line_d Y P Q lambda
lambda : F
A,C,D,P,Q,Y : Point
*****
eq (S P Y Q) F0
+++++
unfold on_line_d in H.
-----
Lemma invariant_par_on_line_d_1_length_ratio_2 : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q = 0 -> A<>Y -> parallel A Y C D -> parallel C D P Q.
Proof.
intros.
assert (parallel P Q Y A).
unfold parallel.
unfold S4.
replace (S P Q A ) with 0.
ring_simplify.
unfold on_line_d in H.

*****
H2 : parallel A Y C D
H1 : not (eq A Y)
H0 : eq (S A P Q) F0
H : and (Col Y P Q)\n (and (not (eq P Q)) (eq (DSeg P Y) (Fmult lambda (DSeg P Q))))
lambda : F
A,C,D,P,Q,Y : Point
*****
eq (S P Y Q) F0
+++++
decompose [and] H.
-----
Lemma invariant_par_on_line_d_1_length_ratio_2 : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q = 0 -> A<>Y -> parallel A Y C D -> parallel C D P Q.
Proof.
intros.
assert (parallel P Q Y A).
unfold parallel.
unfold S4.
replace (S P Q A ) with 0.
ring_simplify.
unfold on_line_d in H.
decompose [and] H.

*****
H6 : eq (DSeg P Y) (Fmult lambda (DSeg P Q))
H5 : not (eq P Q)
H3 : Col Y P Q
H2 : parallel A Y C D
H1 : not (eq A Y)
H0 : eq (S A P Q) F0
H : and (Col Y P Q)\n (and (not (eq P Q)) (eq (DSeg P Y) (Fmult lambda (DSeg P Q))))
lambda : F
A,C,D,P,Q,Y : Point
*****
eq (S P Y Q) F0
+++++
suppose (Col P Y Q).
-----
Lemma invariant_par_on_line_d_1_length_ratio_2 : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q = 0 -> A<>Y -> parallel A Y C D -> parallel C D P Q.
Proof.
intros.
assert (parallel P Q Y A).
unfold parallel.
unfold S4.
replace (S P Q A ) with 0.
ring_simplify.
unfold on_line_d in H.
decompose [and] H.
suppose (Col P Y Q).

*****
H4 : Col P Y Q
H6 : eq (DSeg P Y) (Fmult lambda (DSeg P Q))
H5 : not (eq P Q)
H3 : Col Y P Q
H2 : parallel A Y C D
H1 : not (eq A Y)
H0 : eq (S A P Q) F0
H : and (Col Y P Q)\n (and (not (eq P Q)) (eq (DSeg P Y) (Fmult lambda (DSeg P Q))))
lambda : F
A,C,D,P,Q,Y : Point
*****
eq (S P Y Q) F0
+++++
Geometry.
-----
Lemma invariant_par_on_line_d_1_length_ratio_2 : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q = 0 -> A<>Y -> parallel A Y C D -> parallel C D P Q.
Proof.
intros.
assert (parallel P Q Y A).
unfold parallel.
unfold S4.
replace (S P Q A ) with 0.
ring_simplify.
unfold on_line_d in H.
decompose [and] H.
suppose (Col P Y Q).

*****
H6 : eq (DSeg P Y) (Fmult lambda (DSeg P Q))
H5 : not (eq P Q)
H3 : Col Y P Q
H2 : parallel A Y C D
H1 : not (eq A Y)
H0 : eq (S A P Q) F0
H : and (Col Y P Q)\n (and (not (eq P Q)) (eq (DSeg P Y) (Fmult lambda (DSeg P Q))))
lambda : F
A,C,D,P,Q,Y : Point
*****
Col P Y Q
+++++
Geometry.
-----
Lemma invariant_par_on_line_d_1_length_ratio_2 : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q = 0 -> A<>Y -> parallel A Y C D -> parallel C D P Q.
Proof.
intros.
assert (parallel P Q Y A).
unfold parallel.
unfold S4.
replace (S P Q A ) with 0.

*****
H2 : parallel A Y C D
H1 : not (eq A Y)
H0 : eq (S A P Q) F0
H : on_line_d Y P Q lambda
lambda : F
A,C,D,P,Q,Y : Point
*****
eq F0 (S P Q A)
+++++
symmetry.
-----
Lemma invariant_par_on_line_d_1_length_ratio_2 : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q = 0 -> A<>Y -> parallel A Y C D -> parallel C D P Q.
Proof.
intros.
assert (parallel P Q Y A).
unfold parallel.
unfold S4.
replace (S P Q A ) with 0.
symmetry.

*****
H2 : parallel A Y C D
H1 : not (eq A Y)
H0 : eq (S A P Q) F0
H : on_line_d Y P Q lambda
lambda : F
A,C,D,P,Q,Y : Point
*****
eq (S P Q A) F0
+++++
Geometry.
-----
Lemma invariant_par_on_line_d_1_length_ratio_2 : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q = 0 -> A<>Y -> parallel A Y C D -> parallel C D P Q.
Proof.
intros.
assert (parallel P Q Y A).
unfold parallel.
unfold S4.
replace (S P Q A ) with 0.
symmetry.
Geometry.

*****
H2 : parallel A Y C D
H1 : not (eq A Y)
H0 : eq (S A P Q) F0
H : on_line_d Y P Q lambda
lambda : F
A,C,D,P,Q,Y : Point
*****
eq (S P Q A) F0
+++++
suppose (Col P Q A).
-----
Lemma invariant_par_on_line_d_1_length_ratio_2 : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q = 0 -> A<>Y -> parallel A Y C D -> parallel C D P Q.
Proof.
intros.
assert (parallel P Q Y A).
unfold parallel.
unfold S4.
replace (S P Q A ) with 0.
symmetry.
Geometry.
suppose (Col P Q A).

*****
H3 : Col P Q A
H2 : parallel A Y C D
H1 : not (eq A Y)
H0 : eq (S A P Q) F0
H : on_line_d Y P Q lambda
lambda : F
A,C,D,P,Q,Y : Point
*****
eq (S P Q A) F0
+++++
Geometry.
-----
Lemma invariant_par_on_line_d_1_length_ratio_2 : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q = 0 -> A<>Y -> parallel A Y C D -> parallel C D P Q.
Proof.
intros.
assert (parallel P Q Y A).
unfold parallel.
unfold S4.
replace (S P Q A ) with 0.
symmetry.
Geometry.
suppose (Col P Q A).

*****
H2 : parallel A Y C D
H1 : not (eq A Y)
H0 : eq (S A P Q) F0
H : on_line_d Y P Q lambda
lambda : F
A,C,D,P,Q,Y : Point
*****
Col P Q A
+++++
Geometry.
-----
Lemma invariant_par_on_line_d_1_length_ratio_2 : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q = 0 -> A<>Y -> parallel A Y C D -> parallel C D P Q.
Proof.
intros.
assert (parallel P Q Y A).

*****
H3 : parallel P Q Y A
H2 : parallel A Y C D
H1 : not (eq A Y)
H0 : eq (S A P Q) F0
H : on_line_d Y P Q lambda
lambda : F
A,C,D,P,Q,Y : Point
*****
parallel C D P Q
+++++
unfold on_line_d in H.
-----
Lemma invariant_par_on_line_d_1_length_ratio_2 : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q = 0 -> A<>Y -> parallel A Y C D -> parallel C D P Q.
Proof.
intros.
assert (parallel P Q Y A).
unfold on_line_d in H.

*****
H3 : parallel P Q Y A
H2 : parallel A Y C D
H1 : not (eq A Y)
H0 : eq (S A P Q) F0
H : and (Col Y P Q)\n (and (not (eq P Q)) (eq (DSeg P Y) (Fmult lambda (DSeg P Q))))
lambda : F
A,C,D,P,Q,Y : Point
*****
parallel C D P Q
+++++
decompose [and] H.
-----
Lemma invariant_par_on_line_d_1_length_ratio_2 : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q = 0 -> A<>Y -> parallel A Y C D -> parallel C D P Q.
Proof.
intros.
assert (parallel P Q Y A).
unfold on_line_d in H.
decompose [and] H.

*****
H7 : eq (DSeg P Y) (Fmult lambda (DSeg P Q))
H6 : not (eq P Q)
H4 : Col Y P Q
H3 : parallel P Q Y A
H2 : parallel A Y C D
H1 : not (eq A Y)
H0 : eq (S A P Q) F0
H : and (Col Y P Q)\n (and (not (eq P Q)) (eq (DSeg P Y) (Fmult lambda (DSeg P Q))))
lambda : F
A,C,D,P,Q,Y : Point
*****
parallel C D P Q
+++++
clear H.
-----
Lemma invariant_par_on_line_d_1_length_ratio_2 : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q = 0 -> A<>Y -> parallel A Y C D -> parallel C D P Q.
Proof.
intros.
assert (parallel P Q Y A).
unfold on_line_d in H.
decompose [and] H.
clear H.

*****
H7 : eq (DSeg P Y) (Fmult lambda (DSeg P Q))
H6 : not (eq P Q)
H4 : Col Y P Q
H3 : parallel P Q Y A
H2 : parallel A Y C D
H1 : not (eq A Y)
H0 : eq (S A P Q) F0
lambda : F
A,C,D,P,Q,Y : Point
*****
parallel C D P Q
+++++
assert (Col P Q A).
-----
Lemma invariant_par_on_line_d_1_length_ratio_2 : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q = 0 -> A<>Y -> parallel A Y C D -> parallel C D P Q.
Proof.
intros.
assert (parallel P Q Y A).
unfold on_line_d in H.
decompose [and] H.
clear H.
assert (Col P Q A).

*****
H7 : eq (DSeg P Y) (Fmult lambda (DSeg P Q))
H6 : not (eq P Q)
H4 : Col Y P Q
H3 : parallel P Q Y A
H2 : parallel A Y C D
H1 : not (eq A Y)
H0 : eq (S A P Q) F0
lambda : F
A,C,D,P,Q,Y : Point
*****
Col P Q A
+++++
Geometry.
-----
Lemma invariant_par_on_line_d_1_length_ratio_2 : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q = 0 -> A<>Y -> parallel A Y C D -> parallel C D P Q.
Proof.
intros.
assert (parallel P Q Y A).
unfold on_line_d in H.
decompose [and] H.
clear H.
assert (Col P Q A).

*****
H : Col P Q A
H7 : eq (DSeg P Y) (Fmult lambda (DSeg P Q))
H6 : not (eq P Q)
H4 : Col Y P Q
H3 : parallel P Q Y A
H2 : parallel A Y C D
H1 : not (eq A Y)
H0 : eq (S A P Q) F0
lambda : F
A,C,D,P,Q,Y : Point
*****
parallel C D P Q
+++++
Geometry.
-----
Lemma invariant_par_on_line_d_1_length_ratio_2 : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q = 0 -> A<>Y -> parallel A Y C D -> parallel C D P Q.
Proof.
intros.
assert (parallel P Q Y A).
unfold on_line_d in H.
decompose [and] H.
clear H.
assert (Col P Q A).
Geometry.

*****
H : Col P Q A
H7 : eq (DSeg P Y) (Fmult lambda (DSeg P Q))
H6 : not (eq P Q)
H4 : Col Y P Q
H3 : parallel P Q Y A
H2 : parallel A Y C D
H1 : not (eq A Y)
H0 : eq (S A P Q) F0
lambda : F
A,C,D,P,Q,Y : Point
*****
parallel C D P Q
+++++
assert (Col P A Y).
-----
Lemma invariant_par_on_line_d_1_length_ratio_2 : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q = 0 -> A<>Y -> parallel A Y C D -> parallel C D P Q.
Proof.
intros.
assert (parallel P Q Y A).
unfold on_line_d in H.
decompose [and] H.
clear H.
assert (Col P Q A).
Geometry.
assert (Col P A Y).

*****
H : Col P Q A
H7 : eq (DSeg P Y) (Fmult lambda (DSeg P Q))
H6 : not (eq P Q)
H4 : Col Y P Q
H3 : parallel P Q Y A
H2 : parallel A Y C D
H1 : not (eq A Y)
H0 : eq (S A P Q) F0
lambda : F
A,C,D,P,Q,Y : Point
*****
Col P A Y
+++++
eapply col_trans_1 with (B:=Q).
-----
Lemma invariant_par_on_line_d_1_length_ratio_2 : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q = 0 -> A<>Y -> parallel A Y C D -> parallel C D P Q.
Proof.
intros.
assert (parallel P Q Y A).
unfold on_line_d in H.
decompose [and] H.
clear H.
assert (Col P Q A).
Geometry.
assert (Col P A Y).
eapply col_trans_1 with (B:=Q).

*****
H : Col P Q A
H7 : eq (DSeg P Y) (Fmult lambda (DSeg P Q))
H6 : not (eq P Q)
H4 : Col Y P Q
H3 : parallel P Q Y A
H2 : parallel A Y C D
H1 : not (eq A Y)
H0 : eq (S A P Q) F0
lambda : F
A,C,D,P,Q,Y : Point
*****
not (eq P Q)
+++++
Geometry.
-----
Lemma invariant_par_on_line_d_1_length_ratio_2 : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q = 0 -> A<>Y -> parallel A Y C D -> parallel C D P Q.
Proof.
intros.
assert (parallel P Q Y A).
unfold on_line_d in H.
decompose [and] H.
clear H.
assert (Col P Q A).
Geometry.
assert (Col P A Y).
eapply col_trans_1 with (B:=Q).

*****
H : Col P Q A
H7 : eq (DSeg P Y) (Fmult lambda (DSeg P Q))
H6 : not (eq P Q)
H4 : Col Y P Q
H3 : parallel P Q Y A
H2 : parallel A Y C D
H1 : not (eq A Y)
H0 : eq (S A P Q) F0
lambda : F
A,C,D,P,Q,Y : Point
*****
Col P Q A
+++++
Geometry.
-----
Lemma invariant_par_on_line_d_1_length_ratio_2 : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q = 0 -> A<>Y -> parallel A Y C D -> parallel C D P Q.
Proof.
intros.
assert (parallel P Q Y A).
unfold on_line_d in H.
decompose [and] H.
clear H.
assert (Col P Q A).
Geometry.
assert (Col P A Y).
eapply col_trans_1 with (B:=Q).

*****
H : Col P Q A
H7 : eq (DSeg P Y) (Fmult lambda (DSeg P Q))
H6 : not (eq P Q)
H4 : Col Y P Q
H3 : parallel P Q Y A
H2 : parallel A Y C D
H1 : not (eq A Y)
H0 : eq (S A P Q) F0
lambda : F
A,C,D,P,Q,Y : Point
*****
Col P Q Y
+++++
Geometry.
-----
Lemma invariant_par_on_line_d_1_length_ratio_2 : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q = 0 -> A<>Y -> parallel A Y C D -> parallel C D P Q.
Proof.
intros.
assert (parallel P Q Y A).
unfold on_line_d in H.
decompose [and] H.
clear H.
assert (Col P Q A).
Geometry.
assert (Col P A Y).

*****
H5 : Col P A Y
H : Col P Q A
H7 : eq (DSeg P Y) (Fmult lambda (DSeg P Q))
H6 : not (eq P Q)
H4 : Col Y P Q
H3 : parallel P Q Y A
H2 : parallel A Y C D
H1 : not (eq A Y)
H0 : eq (S A P Q) F0
lambda : F
A,C,D,P,Q,Y : Point
*****
parallel C D P Q
+++++
assert (Col Q A Y).
-----
Lemma invariant_par_on_line_d_1_length_ratio_2 : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q = 0 -> A<>Y -> parallel A Y C D -> parallel C D P Q.
Proof.
intros.
assert (parallel P Q Y A).
unfold on_line_d in H.
decompose [and] H.
clear H.
assert (Col P Q A).
Geometry.
assert (Col P A Y).
assert (Col Q A Y).

*****
H5 : Col P A Y
H : Col P Q A
H7 : eq (DSeg P Y) (Fmult lambda (DSeg P Q))
H6 : not (eq P Q)
H4 : Col Y P Q
H3 : parallel P Q Y A
H2 : parallel A Y C D
H1 : not (eq A Y)
H0 : eq (S A P Q) F0
lambda : F
A,C,D,P,Q,Y : Point
*****
Col Q A Y
+++++
eapply col_trans_1 with (B:=P).
-----
Lemma invariant_par_on_line_d_1_length_ratio_2 : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q = 0 -> A<>Y -> parallel A Y C D -> parallel C D P Q.
Proof.
intros.
assert (parallel P Q Y A).
unfold on_line_d in H.
decompose [and] H.
clear H.
assert (Col P Q A).
Geometry.
assert (Col P A Y).
assert (Col Q A Y).
eapply col_trans_1 with (B:=P).

*****
H5 : Col P A Y
H : Col P Q A
H7 : eq (DSeg P Y) (Fmult lambda (DSeg P Q))
H6 : not (eq P Q)
H4 : Col Y P Q
H3 : parallel P Q Y A
H2 : parallel A Y C D
H1 : not (eq A Y)
H0 : eq (S A P Q) F0
lambda : F
A,C,D,P,Q,Y : Point
*****
not (eq Q P)
+++++
Geometry.
-----
Lemma invariant_par_on_line_d_1_length_ratio_2 : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q = 0 -> A<>Y -> parallel A Y C D -> parallel C D P Q.
Proof.
intros.
assert (parallel P Q Y A).
unfold on_line_d in H.
decompose [and] H.
clear H.
assert (Col P Q A).
Geometry.
assert (Col P A Y).
assert (Col Q A Y).
eapply col_trans_1 with (B:=P).

*****
H5 : Col P A Y
H : Col P Q A
H7 : eq (DSeg P Y) (Fmult lambda (DSeg P Q))
H6 : not (eq P Q)
H4 : Col Y P Q
H3 : parallel P Q Y A
H2 : parallel A Y C D
H1 : not (eq A Y)
H0 : eq (S A P Q) F0
lambda : F
A,C,D,P,Q,Y : Point
*****
Col Q P A
+++++
Geometry.
-----
Lemma invariant_par_on_line_d_1_length_ratio_2 : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q = 0 -> A<>Y -> parallel A Y C D -> parallel C D P Q.
Proof.
intros.
assert (parallel P Q Y A).
unfold on_line_d in H.
decompose [and] H.
clear H.
assert (Col P Q A).
Geometry.
assert (Col P A Y).
assert (Col Q A Y).
eapply col_trans_1 with (B:=P).

*****
H5 : Col P A Y
H : Col P Q A
H7 : eq (DSeg P Y) (Fmult lambda (DSeg P Q))
H6 : not (eq P Q)
H4 : Col Y P Q
H3 : parallel P Q Y A
H2 : parallel A Y C D
H1 : not (eq A Y)
H0 : eq (S A P Q) F0
lambda : F
A,C,D,P,Q,Y : Point
*****
Col Q P Y
+++++
Geometry.
-----
Lemma invariant_par_on_line_d_1_length_ratio_2 : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q = 0 -> A<>Y -> parallel A Y C D -> parallel C D P Q.
Proof.
intros.
assert (parallel P Q Y A).
unfold on_line_d in H.
decompose [and] H.
clear H.
assert (Col P Q A).
Geometry.
assert (Col P A Y).
assert (Col Q A Y).

*****
H8 : Col Q A Y
H5 : Col P A Y
H : Col P Q A
H7 : eq (DSeg P Y) (Fmult lambda (DSeg P Q))
H6 : not (eq P Q)
H4 : Col Y P Q
H3 : parallel P Q Y A
H2 : parallel A Y C D
H1 : not (eq A Y)
H0 : eq (S A P Q) F0
lambda : F
A,C,D,P,Q,Y : Point
*****
parallel C D P Q
+++++
assert (parallel C D A P).
-----
Lemma invariant_par_on_line_d_1_length_ratio_2 : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q = 0 -> A<>Y -> parallel A Y C D -> parallel C D P Q.
Proof.
intros.
assert (parallel P Q Y A).
unfold on_line_d in H.
decompose [and] H.
clear H.
assert (Col P Q A).
Geometry.
assert (Col P A Y).
assert (Col Q A Y).
assert (parallel C D A P).

*****
H8 : Col Q A Y
H5 : Col P A Y
H : Col P Q A
H7 : eq (DSeg P Y) (Fmult lambda (DSeg P Q))
H6 : not (eq P Q)
H4 : Col Y P Q
H3 : parallel P Q Y A
H2 : parallel A Y C D
H1 : not (eq A Y)
H0 : eq (S A P Q) F0
lambda : F
A,C,D,P,Q,Y : Point
*****
parallel C D A P
+++++
eapply col_par_par with (D:=Y).
-----
Lemma invariant_par_on_line_d_1_length_ratio_2 : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q = 0 -> A<>Y -> parallel A Y C D -> parallel C D P Q.
Proof.
intros.
assert (parallel P Q Y A).
unfold on_line_d in H.
decompose [and] H.
clear H.
assert (Col P Q A).
Geometry.
assert (Col P A Y).
assert (Col Q A Y).
assert (parallel C D A P).
eapply col_par_par with (D:=Y).

*****
H8 : Col Q A Y
H5 : Col P A Y
H : Col P Q A
H7 : eq (DSeg P Y) (Fmult lambda (DSeg P Q))
H6 : not (eq P Q)
H4 : Col Y P Q
H3 : parallel P Q Y A
H2 : parallel A Y C D
H1 : not (eq A Y)
H0 : eq (S A P Q) F0
lambda : F
A,C,D,P,Q,Y : Point
*****
not (eq A Y)
+++++
Geometry.
-----
Lemma invariant_par_on_line_d_1_length_ratio_2 : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q = 0 -> A<>Y -> parallel A Y C D -> parallel C D P Q.
Proof.
intros.
assert (parallel P Q Y A).
unfold on_line_d in H.
decompose [and] H.
clear H.
assert (Col P Q A).
Geometry.
assert (Col P A Y).
assert (Col Q A Y).
assert (parallel C D A P).
eapply col_par_par with (D:=Y).

*****
H8 : Col Q A Y
H5 : Col P A Y
H : Col P Q A
H7 : eq (DSeg P Y) (Fmult lambda (DSeg P Q))
H6 : not (eq P Q)
H4 : Col Y P Q
H3 : parallel P Q Y A
H2 : parallel A Y C D
H1 : not (eq A Y)
H0 : eq (S A P Q) F0
lambda : F
A,C,D,P,Q,Y : Point
*****
parallel C D A Y
+++++
Geometry.
-----
Lemma invariant_par_on_line_d_1_length_ratio_2 : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q = 0 -> A<>Y -> parallel A Y C D -> parallel C D P Q.
Proof.
intros.
assert (parallel P Q Y A).
unfold on_line_d in H.
decompose [and] H.
clear H.
assert (Col P Q A).
Geometry.
assert (Col P A Y).
assert (Col Q A Y).
assert (parallel C D A P).
eapply col_par_par with (D:=Y).

*****
H8 : Col Q A Y
H5 : Col P A Y
H : Col P Q A
H7 : eq (DSeg P Y) (Fmult lambda (DSeg P Q))
H6 : not (eq P Q)
H4 : Col Y P Q
H3 : parallel P Q Y A
H2 : parallel A Y C D
H1 : not (eq A Y)
H0 : eq (S A P Q) F0
lambda : F
A,C,D,P,Q,Y : Point
*****
Col A Y P
+++++
Geometry.
-----
Lemma invariant_par_on_line_d_1_length_ratio_2 : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q = 0 -> A<>Y -> parallel A Y C D -> parallel C D P Q.
Proof.
intros.
assert (parallel P Q Y A).
unfold on_line_d in H.
decompose [and] H.
clear H.
assert (Col P Q A).
Geometry.
assert (Col P A Y).
assert (Col Q A Y).
assert (parallel C D A P).

*****
H9 : parallel C D A P
H8 : Col Q A Y
H5 : Col P A Y
H : Col P Q A
H7 : eq (DSeg P Y) (Fmult lambda (DSeg P Q))
H6 : not (eq P Q)
H4 : Col Y P Q
H3 : parallel P Q Y A
H2 : parallel A Y C D
H1 : not (eq A Y)
H0 : eq (S A P Q) F0
lambda : F
A,C,D,P,Q,Y : Point
*****
parallel C D P Q
+++++
cases_equality P A.
-----
Lemma invariant_par_on_line_d_1_length_ratio_2 : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q = 0 -> A<>Y -> parallel A Y C D -> parallel C D P Q.
Proof.
intros.
assert (parallel P Q Y A).
unfold on_line_d in H.
decompose [and] H.
clear H.
assert (Col P Q A).
Geometry.
assert (Col P A Y).
assert (Col Q A Y).
assert (parallel C D A P).
cases_equality P A.

*****
H10 : eq P A
H9 : parallel C D A P
H8 : Col Q A Y
H5 : Col P A Y
H : Col P Q A
H7 : eq (DSeg P Y) (Fmult lambda (DSeg P Q))
H6 : not (eq P Q)
H4 : Col Y P Q
H3 : parallel P Q Y A
H2 : parallel A Y C D
H1 : not (eq A Y)
H0 : eq (S A P Q) F0
lambda : F
A,C,D,P,Q,Y : Point
*****
parallel C D P Q
+++++
subst P.
-----
Lemma invariant_par_on_line_d_1_length_ratio_2 : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q = 0 -> A<>Y -> parallel A Y C D -> parallel C D P Q.
Proof.
intros.
assert (parallel P Q Y A).
unfold on_line_d in H.
decompose [and] H.
clear H.
assert (Col P Q A).
Geometry.
assert (Col P A Y).
assert (Col Q A Y).
assert (parallel C D A P).
cases_equality P A.
subst P.

*****
H9 : parallel C D A A
H8 : Col Q A Y
H3 : parallel A Q Y A
H4 : Col Y A Q
H6 : not (eq A Q)
H7 : eq (DSeg A Y) (Fmult lambda (DSeg A Q))
H : Col A Q A
H5 : Col A A Y
H2 : parallel A Y C D
H1 : not (eq A Y)
H0 : eq (S A A Q) F0
lambda : F
A,C,D,Q,Y : Point
*****
parallel C D A Q
+++++
eapply col_par_par with (D:=Y).
-----
Lemma invariant_par_on_line_d_1_length_ratio_2 : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q = 0 -> A<>Y -> parallel A Y C D -> parallel C D P Q.
Proof.
intros.
assert (parallel P Q Y A).
unfold on_line_d in H.
decompose [and] H.
clear H.
assert (Col P Q A).
Geometry.
assert (Col P A Y).
assert (Col Q A Y).
assert (parallel C D A P).
cases_equality P A.
subst P.
eapply col_par_par with (D:=Y).

*****
H9 : parallel C D A A
H8 : Col Q A Y
H3 : parallel A Q Y A
H4 : Col Y A Q
H6 : not (eq A Q)
H7 : eq (DSeg A Y) (Fmult lambda (DSeg A Q))
H : Col A Q A
H5 : Col A A Y
H2 : parallel A Y C D
H1 : not (eq A Y)
H0 : eq (S A A Q) F0
lambda : F
A,C,D,Q,Y : Point
*****
not (eq A Y)
+++++
Geometry.
-----
Lemma invariant_par_on_line_d_1_length_ratio_2 : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q = 0 -> A<>Y -> parallel A Y C D -> parallel C D P Q.
Proof.
intros.
assert (parallel P Q Y A).
unfold on_line_d in H.
decompose [and] H.
clear H.
assert (Col P Q A).
Geometry.
assert (Col P A Y).
assert (Col Q A Y).
assert (parallel C D A P).
cases_equality P A.
subst P.
eapply col_par_par with (D:=Y).

*****
H9 : parallel C D A A
H8 : Col Q A Y
H3 : parallel A Q Y A
H4 : Col Y A Q
H6 : not (eq A Q)
H7 : eq (DSeg A Y) (Fmult lambda (DSeg A Q))
H : Col A Q A
H5 : Col A A Y
H2 : parallel A Y C D
H1 : not (eq A Y)
H0 : eq (S A A Q) F0
lambda : F
A,C,D,Q,Y : Point
*****
parallel C D A Y
+++++
Geometry.
-----
Lemma invariant_par_on_line_d_1_length_ratio_2 : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q = 0 -> A<>Y -> parallel A Y C D -> parallel C D P Q.
Proof.
intros.
assert (parallel P Q Y A).
unfold on_line_d in H.
decompose [and] H.
clear H.
assert (Col P Q A).
Geometry.
assert (Col P A Y).
assert (Col Q A Y).
assert (parallel C D A P).
cases_equality P A.
subst P.
eapply col_par_par with (D:=Y).

*****
H9 : parallel C D A A
H8 : Col Q A Y
H3 : parallel A Q Y A
H4 : Col Y A Q
H6 : not (eq A Q)
H7 : eq (DSeg A Y) (Fmult lambda (DSeg A Q))
H : Col A Q A
H5 : Col A A Y
H2 : parallel A Y C D
H1 : not (eq A Y)
H0 : eq (S A A Q) F0
lambda : F
A,C,D,Q,Y : Point
*****
Col A Y Q
+++++
Geometry.
-----
Lemma invariant_par_on_line_d_1_length_ratio_2 : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q = 0 -> A<>Y -> parallel A Y C D -> parallel C D P Q.
Proof.
intros.
assert (parallel P Q Y A).
unfold on_line_d in H.
decompose [and] H.
clear H.
assert (Col P Q A).
Geometry.
assert (Col P A Y).
assert (Col Q A Y).
assert (parallel C D A P).
cases_equality P A.

*****
H10 : not (eq P A)
H9 : parallel C D A P
H8 : Col Q A Y
H5 : Col P A Y
H : Col P Q A
H7 : eq (DSeg P Y) (Fmult lambda (DSeg P Q))
H6 : not (eq P Q)
H4 : Col Y P Q
H3 : parallel P Q Y A
H2 : parallel A Y C D
H1 : not (eq A Y)
H0 : eq (S A P Q) F0
lambda : F
A,C,D,P,Q,Y : Point
*****
parallel C D P Q
+++++
eapply col_par_par with (D:=A).
-----
Lemma invariant_par_on_line_d_1_length_ratio_2 : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q = 0 -> A<>Y -> parallel A Y C D -> parallel C D P Q.
Proof.
intros.
assert (parallel P Q Y A).
unfold on_line_d in H.
decompose [and] H.
clear H.
assert (Col P Q A).
Geometry.
assert (Col P A Y).
assert (Col Q A Y).
assert (parallel C D A P).
cases_equality P A.
eapply col_par_par with (D:=A).

*****
H10 : not (eq P A)
H9 : parallel C D A P
H8 : Col Q A Y
H5 : Col P A Y
H : Col P Q A
H7 : eq (DSeg P Y) (Fmult lambda (DSeg P Q))
H6 : not (eq P Q)
H4 : Col Y P Q
H3 : parallel P Q Y A
H2 : parallel A Y C D
H1 : not (eq A Y)
H0 : eq (S A P Q) F0
lambda : F
A,C,D,P,Q,Y : Point
*****
not (eq P A)
+++++
Geometry.
-----
Lemma invariant_par_on_line_d_1_length_ratio_2 : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q = 0 -> A<>Y -> parallel A Y C D -> parallel C D P Q.
Proof.
intros.
assert (parallel P Q Y A).
unfold on_line_d in H.
decompose [and] H.
clear H.
assert (Col P Q A).
Geometry.
assert (Col P A Y).
assert (Col Q A Y).
assert (parallel C D A P).
cases_equality P A.
eapply col_par_par with (D:=A).

*****
H10 : not (eq P A)
H9 : parallel C D A P
H8 : Col Q A Y
H5 : Col P A Y
H : Col P Q A
H7 : eq (DSeg P Y) (Fmult lambda (DSeg P Q))
H6 : not (eq P Q)
H4 : Col Y P Q
H3 : parallel P Q Y A
H2 : parallel A Y C D
H1 : not (eq A Y)
H0 : eq (S A P Q) F0
lambda : F
A,C,D,P,Q,Y : Point
*****
parallel C D P A
+++++
Geometry.
-----
Lemma invariant_par_on_line_d_1_length_ratio_2 : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q = 0 -> A<>Y -> parallel A Y C D -> parallel C D P Q.
Proof.
intros.
assert (parallel P Q Y A).
unfold on_line_d in H.
decompose [and] H.
clear H.
assert (Col P Q A).
Geometry.
assert (Col P A Y).
assert (Col Q A Y).
assert (parallel C D A P).
cases_equality P A.
eapply col_par_par with (D:=A).

*****
H10 : not (eq P A)
H9 : parallel C D A P
H8 : Col Q A Y
H5 : Col P A Y
H : Col P Q A
H7 : eq (DSeg P Y) (Fmult lambda (DSeg P Q))
H6 : not (eq P Q)
H4 : Col Y P Q
H3 : parallel P Q Y A
H2 : parallel A Y C D
H1 : not (eq A Y)
H0 : eq (S A P Q) F0
lambda : F
A,C,D,P,Q,Y : Point
*****
Col P A Q
+++++
Geometry.
-----
Lemma invariant_par_on_line_d_1_length_ratio_2 : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q = 0 -> A<>Y -> parallel A Y C D -> parallel C D P Q.
Proof.
intros.
assert (parallel P Q Y A).

*****

*****

+++++
Qed.
-----
Lemma invariant_par_on_line_1_length_ratio_2 :\n    forall (A C D P Q Y : Point),\n    on_line Y P Q -> S A P Q = 0 -> Y<>A -> \nparallel A Y C D -> parallel C D P Q.
-----
Lemma invariant_par_on_line_1_length_ratio_2 : forall (A C D P Q Y : Point), on_line Y P Q -> S A P Q = 0 -> Y<>A -> parallel A Y C D -> parallel C D P Q.

*****

*****
forall (A C D P Q Y : Point) (_ : on_line Y P Q) (_ : eq (S A P Q) F0) (_ : not (eq Y A)) (_ : parallel A Y C D), parallel C D P Q
+++++
Proof.
-----
Lemma invariant_par_on_line_1_length_ratio_2 : forall (A C D P Q Y : Point), on_line Y P Q -> S A P Q = 0 -> Y<>A -> parallel A Y C D -> parallel C D P Q.
Proof.

*****

*****
forall (A C D P Q Y : Point) (_ : on_line Y P Q) (_ : eq (S A P Q) F0) (_ : not (eq Y A)) (_ : parallel A Y C D), parallel C D P Q
+++++
intros.
-----
Lemma invariant_par_on_line_1_length_ratio_2 : forall (A C D P Q Y : Point), on_line Y P Q -> S A P Q = 0 -> Y<>A -> parallel A Y C D -> parallel C D P Q.
Proof.
intros.

*****
H2 : parallel A Y C D
H1 : not (eq Y A)
H0 : eq (S A P Q) F0
H : on_line Y P Q
A,C,D,P,Q,Y : Point
*****
parallel C D P Q
+++++
assert (on_line_d Y P Q (P**Y / P**Q)).
-----
Lemma invariant_par_on_line_1_length_ratio_2 : forall (A C D P Q Y : Point), on_line Y P Q -> S A P Q = 0 -> Y<>A -> parallel A Y C D -> parallel C D P Q.
Proof.
intros.
assert (on_line_d Y P Q (P**Y / P**Q)).

*****
H2 : parallel A Y C D
H1 : not (eq Y A)
H0 : eq (S A P Q) F0
H : on_line Y P Q
A,C,D,P,Q,Y : Point
*****
on_line_d Y P Q (Fdiv (DSeg P Y) (DSeg P Q))
+++++
apply on_line_to_on_line_d.
-----
Lemma invariant_par_on_line_1_length_ratio_2 : forall (A C D P Q Y : Point), on_line Y P Q -> S A P Q = 0 -> Y<>A -> parallel A Y C D -> parallel C D P Q.
Proof.
intros.
assert (on_line_d Y P Q (P**Y / P**Q)).
apply on_line_to_on_line_d.

*****
H2 : parallel A Y C D
H1 : not (eq Y A)
H0 : eq (S A P Q) F0
H : on_line Y P Q
A,C,D,P,Q,Y : Point
*****
on_line Y P Q
+++++
Geometry.
-----
Lemma invariant_par_on_line_1_length_ratio_2 : forall (A C D P Q Y : Point), on_line Y P Q -> S A P Q = 0 -> Y<>A -> parallel A Y C D -> parallel C D P Q.
Proof.
intros.
assert (on_line_d Y P Q (P**Y / P**Q)).

*****
H3 : on_line_d Y P Q (Fdiv (DSeg P Y) (DSeg P Q))
H2 : parallel A Y C D
H1 : not (eq Y A)
H0 : eq (S A P Q) F0
H : on_line Y P Q
A,C,D,P,Q,Y : Point
*****
parallel C D P Q
+++++
eapply invariant_par_on_line_d_1_length_ratio_2.
-----
Lemma invariant_par_on_line_1_length_ratio_2 : forall (A C D P Q Y : Point), on_line Y P Q -> S A P Q = 0 -> Y<>A -> parallel A Y C D -> parallel C D P Q.
Proof.
intros.
assert (on_line_d Y P Q (P**Y / P**Q)).
eapply invariant_par_on_line_d_1_length_ratio_2.

*****
H3 : on_line_d Y P Q (Fdiv (DSeg P Y) (DSeg P Q))
H2 : parallel A Y C D
H1 : not (eq Y A)
H0 : eq (S A P Q) F0
H : on_line Y P Q
A,C,D,P,Q,Y : Point
*****
on_line_d ?Y P Q ?lambda
+++++
eauto.
-----
Lemma invariant_par_on_line_1_length_ratio_2 : forall (A C D P Q Y : Point), on_line Y P Q -> S A P Q = 0 -> Y<>A -> parallel A Y C D -> parallel C D P Q.
Proof.
intros.
assert (on_line_d Y P Q (P**Y / P**Q)).
eapply invariant_par_on_line_d_1_length_ratio_2.

*****
H3 : on_line_d Y P Q (Fdiv (DSeg P Y) (DSeg P Q))
H2 : parallel A Y C D
H1 : not (eq Y A)
H0 : eq (S A P Q) F0
H : on_line Y P Q
A,C,D,P,Q,Y : Point
*****
eq (S ?A P Q) F0
+++++
eauto.
-----
Lemma invariant_par_on_line_1_length_ratio_2 : forall (A C D P Q Y : Point), on_line Y P Q -> S A P Q = 0 -> Y<>A -> parallel A Y C D -> parallel C D P Q.
Proof.
intros.
assert (on_line_d Y P Q (P**Y / P**Q)).
eapply invariant_par_on_line_d_1_length_ratio_2.

*****
H3 : on_line_d Y P Q (Fdiv (DSeg P Y) (DSeg P Q))
H2 : parallel A Y C D
H1 : not (eq Y A)
H0 : eq (S A P Q) F0
H : on_line Y P Q
A,C,D,P,Q,Y : Point
*****
not (eq A Y)
+++++
eauto.
-----
Lemma invariant_par_on_line_1_length_ratio_2 : forall (A C D P Q Y : Point), on_line Y P Q -> S A P Q = 0 -> Y<>A -> parallel A Y C D -> parallel C D P Q.
Proof.
intros.
assert (on_line_d Y P Q (P**Y / P**Q)).
eapply invariant_par_on_line_d_1_length_ratio_2.

*****
H3 : on_line_d Y P Q (Fdiv (DSeg P Y) (DSeg P Q))
H2 : parallel A Y C D
H1 : not (eq Y A)
H0 : eq (S A P Q) F0
H : on_line Y P Q
A,C,D,P,Q,Y : Point
*****
parallel A Y C D
+++++
eauto.
-----
Lemma invariant_par_on_line_1_length_ratio_2 : forall (A C D P Q Y : Point), on_line Y P Q -> S A P Q = 0 -> Y<>A -> parallel A Y C D -> parallel C D P Q.
Proof.
intros.
assert (on_line_d Y P Q (P**Y / P**Q)).

*****

*****

+++++
Qed.
-----
Lemma invariant_par_on_line_1_length_ratio_3 :\n    forall (A C D P Q Y : Point),\n    on_line Y P Q -> S A P Q = 0 -> \n    parallel A Y C D -> parallel P Y P Q.
-----
Lemma invariant_par_on_line_1_length_ratio_3 : forall (A C D P Q Y : Point), on_line Y P Q -> S A P Q = 0 -> parallel A Y C D -> parallel P Y P Q.

*****

*****
forall (A C D P Q Y : Point) (_ : on_line Y P Q) (_ : eq (S A P Q) F0) (_ : parallel A Y C D), parallel P Y P Q
+++++
Proof.
-----
Lemma invariant_par_on_line_1_length_ratio_3 : forall (A C D P Q Y : Point), on_line Y P Q -> S A P Q = 0 -> parallel A Y C D -> parallel P Y P Q.
Proof.

*****

*****
forall (A C D P Q Y : Point) (_ : on_line Y P Q) (_ : eq (S A P Q) F0) (_ : parallel A Y C D), parallel P Y P Q
+++++
intros.
-----
Lemma invariant_par_on_line_1_length_ratio_3 : forall (A C D P Q Y : Point), on_line Y P Q -> S A P Q = 0 -> parallel A Y C D -> parallel P Y P Q.
Proof.
intros.

*****
H1 : parallel A Y C D
H0 : eq (S A P Q) F0
H : on_line Y P Q
A,C,D,P,Q,Y : Point
*****
parallel P Y P Q
+++++
unfold parallel in *.
-----
Lemma invariant_par_on_line_1_length_ratio_3 : forall (A C D P Q Y : Point), on_line Y P Q -> S A P Q = 0 -> parallel A Y C D -> parallel P Y P Q.
Proof.
intros.
unfold parallel in *.

*****
H1 : eq (S4 A C Y D) F0
H0 : eq (S A P Q) F0
H : on_line Y P Q
A,C,D,P,Q,Y : Point
*****
eq (S4 P P Y Q) F0
+++++
unfold on_line in *.
-----
Lemma invariant_par_on_line_1_length_ratio_3 : forall (A C D P Q Y : Point), on_line Y P Q -> S A P Q = 0 -> parallel A Y C D -> parallel P Y P Q.
Proof.
intros.
unfold parallel in *.
unfold on_line in *.

*****
H1 : eq (S4 A C Y D) F0
H0 : eq (S A P Q) F0
H : and (Col Y P Q) (not (eq P Q))
A,C,D,P,Q,Y : Point
*****
eq (S4 P P Y Q) F0
+++++
basic_simpl.
-----
Lemma invariant_par_on_line_1_length_ratio_3 : forall (A C D P Q Y : Point), on_line Y P Q -> S A P Q = 0 -> parallel A Y C D -> parallel P Y P Q.
Proof.
intros.
unfold parallel in *.
unfold on_line in *.
basic_simpl.

*****
H1 : eq (S4 A C Y D) F0
H0 : eq (S A P Q) F0
H : and (Col Y P Q) (not (eq P Q))
A,C,D,P,Q,Y : Point
*****
eq (S P Y Q) F0
+++++
decompose [and] H.
-----
Lemma invariant_par_on_line_1_length_ratio_3 : forall (A C D P Q Y : Point), on_line Y P Q -> S A P Q = 0 -> parallel A Y C D -> parallel P Y P Q.
Proof.
intros.
unfold parallel in *.
unfold on_line in *.
basic_simpl.
decompose [and] H.

*****
H3 : not (eq P Q)
H2 : Col Y P Q
H1 : eq (S4 A C Y D) F0
H0 : eq (S A P Q) F0
H : and (Col Y P Q) (not (eq P Q))
A,C,D,P,Q,Y : Point
*****
eq (S P Y Q) F0
+++++
replace (S P Y Q) with (- S Y P Q).
-----
Lemma invariant_par_on_line_1_length_ratio_3 : forall (A C D P Q Y : Point), on_line Y P Q -> S A P Q = 0 -> parallel A Y C D -> parallel P Y P Q.
Proof.
intros.
unfold parallel in *.
unfold on_line in *.
basic_simpl.
decompose [and] H.
replace (S P Y Q) with (- S Y P Q).

*****
H3 : not (eq P Q)
H2 : Col Y P Q
H1 : eq (S4 A C Y D) F0
H0 : eq (S A P Q) F0
H : and (Col Y P Q) (not (eq P Q))
A,C,D,P,Q,Y : Point
*****
eq (Fopp (S Y P Q)) F0
+++++
Geometry.
-----
Lemma invariant_par_on_line_1_length_ratio_3 : forall (A C D P Q Y : Point), on_line Y P Q -> S A P Q = 0 -> parallel A Y C D -> parallel P Y P Q.
Proof.
intros.
unfold parallel in *.
unfold on_line in *.
basic_simpl.
decompose [and] H.
replace (S P Y Q) with (- S Y P Q).

*****
H3 : not (eq P Q)
H2 : Col Y P Q
H1 : eq (S4 A C Y D) F0
H0 : eq (S A P Q) F0
H : and (Col Y P Q) (not (eq P Q))
A,C,D,P,Q,Y : Point
*****
eq (Fopp (S Y P Q)) (S P Y Q)
+++++
Geometry.
-----
Lemma invariant_par_on_line_1_length_ratio_3 : forall (A C D P Q Y : Point), on_line Y P Q -> S A P Q = 0 -> parallel A Y C D -> parallel P Y P Q.
Proof.
intros.
unfold parallel in *.
unfold on_line in *.
basic_simpl.
decompose [and] H.
replace (S P Y Q) with (- S Y P Q).

*****

*****

+++++
Qed.
-----
Lemma invariant_par_on_line_d_1_length_ratio_3 :\n    forall (A C D P Q Y : Point) (lambda:F),\n    on_line_d Y P Q lambda -> S A P Q = 0 -> \n    parallel A Y C D -> parallel P Y P Q.
-----
Lemma invariant_par_on_line_d_1_length_ratio_3 : forall (A C D P Q Y : Point) (lambda:F), on_line_d Y P Q lambda -> S A P Q = 0 -> parallel A Y C D -> parallel P Y P Q.

*****

*****
forall (A C D P Q Y : Point) (lambda : F) (_ : on_line_d Y P Q lambda) (_ : eq (S A P Q) F0) (_ : parallel A Y C D), parallel P Y P Q
+++++
Proof.
-----
Lemma invariant_par_on_line_d_1_length_ratio_3 : forall (A C D P Q Y : Point) (lambda:F), on_line_d Y P Q lambda -> S A P Q = 0 -> parallel A Y C D -> parallel P Y P Q.
Proof.

*****

*****
forall (A C D P Q Y : Point) (lambda : F) (_ : on_line_d Y P Q lambda) (_ : eq (S A P Q) F0) (_ : parallel A Y C D), parallel P Y P Q
+++++
intros.
-----
Lemma invariant_par_on_line_d_1_length_ratio_3 : forall (A C D P Q Y : Point) (lambda:F), on_line_d Y P Q lambda -> S A P Q = 0 -> parallel A Y C D -> parallel P Y P Q.
Proof.
intros.

*****
H1 : parallel A Y C D
H0 : eq (S A P Q) F0
H : on_line_d Y P Q lambda
lambda : F
A,C,D,P,Q,Y : Point
*****
parallel P Y P Q
+++++
unfold parallel in *.
-----
Lemma invariant_par_on_line_d_1_length_ratio_3 : forall (A C D P Q Y : Point) (lambda:F), on_line_d Y P Q lambda -> S A P Q = 0 -> parallel A Y C D -> parallel P Y P Q.
Proof.
intros.
unfold parallel in *.

*****
H1 : eq (S4 A C Y D) F0
H0 : eq (S A P Q) F0
H : on_line_d Y P Q lambda
lambda : F
A,C,D,P,Q,Y : Point
*****
eq (S4 P P Y Q) F0
+++++
unfold on_line_d in *.
-----
Lemma invariant_par_on_line_d_1_length_ratio_3 : forall (A C D P Q Y : Point) (lambda:F), on_line_d Y P Q lambda -> S A P Q = 0 -> parallel A Y C D -> parallel P Y P Q.
Proof.
intros.
unfold parallel in *.
unfold on_line_d in *.

*****
H1 : eq (S4 A C Y D) F0
H0 : eq (S A P Q) F0
H : and (Col Y P Q)\n (and (not (eq P Q)) (eq (DSeg P Y) (Fmult lambda (DSeg P Q))))
lambda : F
A,C,D,P,Q,Y : Point
*****
eq (S4 P P Y Q) F0
+++++
basic_simpl.
-----
Lemma invariant_par_on_line_d_1_length_ratio_3 : forall (A C D P Q Y : Point) (lambda:F), on_line_d Y P Q lambda -> S A P Q = 0 -> parallel A Y C D -> parallel P Y P Q.
Proof.
intros.
unfold parallel in *.
unfold on_line_d in *.
basic_simpl.

*****
H1 : eq (S4 A C Y D) F0
H0 : eq (S A P Q) F0
H : and (Col Y P Q)\n (and (not (eq P Q)) (eq (DSeg P Y) (Fmult lambda (DSeg P Q))))
lambda : F
A,C,D,P,Q,Y : Point
*****
eq (S P Y Q) F0
+++++
decompose [and] H.
-----
Lemma invariant_par_on_line_d_1_length_ratio_3 : forall (A C D P Q Y : Point) (lambda:F), on_line_d Y P Q lambda -> S A P Q = 0 -> parallel A Y C D -> parallel P Y P Q.
Proof.
intros.
unfold parallel in *.
unfold on_line_d in *.
basic_simpl.
decompose [and] H.

*****
H5 : eq (DSeg P Y) (Fmult lambda (DSeg P Q))
H4 : not (eq P Q)
H2 : Col Y P Q
H1 : eq (S4 A C Y D) F0
H0 : eq (S A P Q) F0
H : and (Col Y P Q)\n (and (not (eq P Q)) (eq (DSeg P Y) (Fmult lambda (DSeg P Q))))
lambda : F
A,C,D,P,Q,Y : Point
*****
eq (S P Y Q) F0
+++++
replace (S P Y Q) with (- S Y P Q).
-----
Lemma invariant_par_on_line_d_1_length_ratio_3 : forall (A C D P Q Y : Point) (lambda:F), on_line_d Y P Q lambda -> S A P Q = 0 -> parallel A Y C D -> parallel P Y P Q.
Proof.
intros.
unfold parallel in *.
unfold on_line_d in *.
basic_simpl.
decompose [and] H.
replace (S P Y Q) with (- S Y P Q).

*****
H5 : eq (DSeg P Y) (Fmult lambda (DSeg P Q))
H4 : not (eq P Q)
H2 : Col Y P Q
H1 : eq (S4 A C Y D) F0
H0 : eq (S A P Q) F0
H : and (Col Y P Q)\n (and (not (eq P Q)) (eq (DSeg P Y) (Fmult lambda (DSeg P Q))))
lambda : F
A,C,D,P,Q,Y : Point
*****
eq (Fopp (S Y P Q)) F0
+++++
Geometry.
-----
Lemma invariant_par_on_line_d_1_length_ratio_3 : forall (A C D P Q Y : Point) (lambda:F), on_line_d Y P Q lambda -> S A P Q = 0 -> parallel A Y C D -> parallel P Y P Q.
Proof.
intros.
unfold parallel in *.
unfold on_line_d in *.
basic_simpl.
decompose [and] H.
replace (S P Y Q) with (- S Y P Q).

*****
H5 : eq (DSeg P Y) (Fmult lambda (DSeg P Q))
H4 : not (eq P Q)
H2 : Col Y P Q
H1 : eq (S4 A C Y D) F0
H0 : eq (S A P Q) F0
H : and (Col Y P Q)\n (and (not (eq P Q)) (eq (DSeg P Y) (Fmult lambda (DSeg P Q))))
lambda : F
A,C,D,P,Q,Y : Point
*****
eq (Fopp (S Y P Q)) (S P Y Q)
+++++
Geometry.
-----
Lemma invariant_par_on_line_d_1_length_ratio_3 : forall (A C D P Q Y : Point) (lambda:F), on_line_d Y P Q lambda -> S A P Q = 0 -> parallel A Y C D -> parallel P Y P Q.
Proof.
intros.
unfold parallel in *.
unfold on_line_d in *.
basic_simpl.
decompose [and] H.
replace (S P Y Q) with (- S Y P Q).

*****

*****

+++++
Qed.
-----
Lemma non_zero_denom_on_line_d_2_length_ratio :\n    forall (A C D P Q Y : Point) (lambda : F),\n    on_line_d Y P Q lambda -> \n    S A P Q <> 0 -> \n    parallel A Y C D ->\n    C<>D -> \n    S4 C P D Q <> 0.
-----
Lemma non_zero_denom_on_line_d_2_length_ratio : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q <> 0 -> parallel A Y C D -> C<>D -> S4 C P D Q <> 0.

*****

*****
forall (A C D P Q Y : Point) (lambda : F) (_ : on_line_d Y P Q lambda) (_ : not (eq (S A P Q) F0)) (_ : parallel A Y C D) (_ : not (eq C D)), not (eq (S4 C P D Q) F0)
+++++
Proof.
-----
Lemma non_zero_denom_on_line_d_2_length_ratio : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q <> 0 -> parallel A Y C D -> C<>D -> S4 C P D Q <> 0.
Proof.

*****

*****
forall (A C D P Q Y : Point) (lambda : F) (_ : on_line_d Y P Q lambda) (_ : not (eq (S A P Q) F0)) (_ : parallel A Y C D) (_ : not (eq C D)), not (eq (S4 C P D Q) F0)
+++++
intros.
-----
Lemma non_zero_denom_on_line_d_2_length_ratio : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q <> 0 -> parallel A Y C D -> C<>D -> S4 C P D Q <> 0.
Proof.
intros.

*****
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (eq (S A P Q) F0)
H : on_line_d Y P Q lambda
lambda : F
A,C,D,P,Q,Y : Point
*****
not (eq (S4 C P D Q) F0)
+++++
rename H2 into T.
-----
Lemma non_zero_denom_on_line_d_2_length_ratio : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q <> 0 -> parallel A Y C D -> C<>D -> S4 C P D Q <> 0.
Proof.
intros.
rename H2 into T.

*****
T : not (eq C D)
H1 : parallel A Y C D
H0 : not (eq (S A P Q) F0)
H : on_line_d Y P Q lambda
lambda : F
A,C,D,P,Q,Y : Point
*****
not (eq (S4 C P D Q) F0)
+++++
unfold on_line_d in H.
-----
Lemma non_zero_denom_on_line_d_2_length_ratio : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q <> 0 -> parallel A Y C D -> C<>D -> S4 C P D Q <> 0.
Proof.
intros.
rename H2 into T.
unfold on_line_d in H.

*****
T : not (eq C D)
H1 : parallel A Y C D
H0 : not (eq (S A P Q) F0)
H : and (Col Y P Q)\n (and (not (eq P Q)) (eq (DSeg P Y) (Fmult lambda (DSeg P Q))))
lambda : F
A,C,D,P,Q,Y : Point
*****
not (eq (S4 C P D Q) F0)
+++++
decompose [and] H.
-----
Lemma non_zero_denom_on_line_d_2_length_ratio : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q <> 0 -> parallel A Y C D -> C<>D -> S4 C P D Q <> 0.
Proof.
intros.
rename H2 into T.
unfold on_line_d in H.
decompose [and] H.

*****
H5 : eq (DSeg P Y) (Fmult lambda (DSeg P Q))
H4 : not (eq P Q)
H2 : Col Y P Q
T : not (eq C D)
H1 : parallel A Y C D
H0 : not (eq (S A P Q) F0)
H : and (Col Y P Q)\n (and (not (eq P Q)) (eq (DSeg P Y) (Fmult lambda (DSeg P Q))))
lambda : F
A,C,D,P,Q,Y : Point
*****
not (eq (S4 C P D Q) F0)
+++++
clear H.
-----
Lemma non_zero_denom_on_line_d_2_length_ratio : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q <> 0 -> parallel A Y C D -> C<>D -> S4 C P D Q <> 0.
Proof.
intros.
rename H2 into T.
unfold on_line_d in H.
decompose [and] H.
clear H.

*****
H5 : eq (DSeg P Y) (Fmult lambda (DSeg P Q))
H4 : not (eq P Q)
H2 : Col Y P Q
T : not (eq C D)
H1 : parallel A Y C D
H0 : not (eq (S A P Q) F0)
lambda : F
A,C,D,P,Q,Y : Point
*****
not (eq (S4 C P D Q) F0)
+++++
assert (not (parallel A Y P Q)).
-----
Lemma non_zero_denom_on_line_d_2_length_ratio : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q <> 0 -> parallel A Y C D -> C<>D -> S4 C P D Q <> 0.
Proof.
intros.
rename H2 into T.
unfold on_line_d in H.
decompose [and] H.
clear H.
assert (not (parallel A Y P Q)).

*****
H5 : eq (DSeg P Y) (Fmult lambda (DSeg P Q))
H4 : not (eq P Q)
H2 : Col Y P Q
T : not (eq C D)
H1 : parallel A Y C D
H0 : not (eq (S A P Q) F0)
lambda : F
A,C,D,P,Q,Y : Point
*****
not (parallel A Y P Q)
+++++
unfold not.
-----
Lemma non_zero_denom_on_line_d_2_length_ratio : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q <> 0 -> parallel A Y C D -> C<>D -> S4 C P D Q <> 0.
Proof.
intros.
rename H2 into T.
unfold on_line_d in H.
decompose [and] H.
clear H.
assert (not (parallel A Y P Q)).
unfold not.

*****
H5 : eq (DSeg P Y) (Fmult lambda (DSeg P Q))
H4 : not (eq P Q)
H2 : Col Y P Q
T : not (eq C D)
H1 : parallel A Y C D
H0 : not (eq (S A P Q) F0)
lambda : F
A,C,D,P,Q,Y : Point
*****
forall _ : parallel A Y P Q, False
+++++
intro.
-----
Lemma non_zero_denom_on_line_d_2_length_ratio : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q <> 0 -> parallel A Y C D -> C<>D -> S4 C P D Q <> 0.
Proof.
intros.
rename H2 into T.
unfold on_line_d in H.
decompose [and] H.
clear H.
assert (not (parallel A Y P Q)).
unfold not.
intro.

*****
H : parallel A Y P Q
H5 : eq (DSeg P Y) (Fmult lambda (DSeg P Q))
H4 : not (eq P Q)
H2 : Col Y P Q
T : not (eq C D)
H1 : parallel A Y C D
H0 : not (eq (S A P Q) F0)
lambda : F
A,C,D,P,Q,Y : Point
*****
False
+++++
unfold parallel in H.
-----
Lemma non_zero_denom_on_line_d_2_length_ratio : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q <> 0 -> parallel A Y C D -> C<>D -> S4 C P D Q <> 0.
Proof.
intros.
rename H2 into T.
unfold on_line_d in H.
decompose [and] H.
clear H.
assert (not (parallel A Y P Q)).
unfold not.
intro.
unfold parallel in H.

*****
H : eq (S4 A P Y Q) F0
H5 : eq (DSeg P Y) (Fmult lambda (DSeg P Q))
H4 : not (eq P Q)
H2 : Col Y P Q
T : not (eq C D)
H1 : parallel A Y C D
H0 : not (eq (S A P Q) F0)
lambda : F
A,C,D,P,Q,Y : Point
*****
False
+++++
unfold S4 in H.
-----
Lemma non_zero_denom_on_line_d_2_length_ratio : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q <> 0 -> parallel A Y C D -> C<>D -> S4 C P D Q <> 0.
Proof.
intros.
rename H2 into T.
unfold on_line_d in H.
decompose [and] H.
clear H.
assert (not (parallel A Y P Q)).
unfold not.
intro.
unfold parallel in H.
unfold S4 in H.

*****
H : eq (Fplus (S A P Y) (S A Y Q)) F0
H5 : eq (DSeg P Y) (Fmult lambda (DSeg P Q))
H4 : not (eq P Q)
H2 : Col Y P Q
T : not (eq C D)
H1 : parallel A Y C D
H0 : not (eq (S A P Q) F0)
lambda : F
A,C,D,P,Q,Y : Point
*****
False
+++++
assert ((S A Y Q) = (S A Y P) + (S A P Q) + (S P Y Q)).
-----
Lemma non_zero_denom_on_line_d_2_length_ratio : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q <> 0 -> parallel A Y C D -> C<>D -> S4 C P D Q <> 0.
Proof.
intros.
rename H2 into T.
unfold on_line_d in H.
decompose [and] H.
clear H.
assert (not (parallel A Y P Q)).
unfold not.
intro.
unfold parallel in H.
unfold S4 in H.
assert ((S A Y Q) = (S A Y P) + (S A P Q) + (S P Y Q)).

*****
H : eq (Fplus (S A P Y) (S A Y Q)) F0
H5 : eq (DSeg P Y) (Fmult lambda (DSeg P Q))
H4 : not (eq P Q)
H2 : Col Y P Q
T : not (eq C D)
H1 : parallel A Y C D
H0 : not (eq (S A P Q) F0)
lambda : F
A,C,D,P,Q,Y : Point
*****
eq (S A Y Q) (Fplus (Fplus (S A Y P) (S A P Q)) (S P Y Q))
+++++
Geometry.
-----
Lemma non_zero_denom_on_line_d_2_length_ratio : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q <> 0 -> parallel A Y C D -> C<>D -> S4 C P D Q <> 0.
Proof.
intros.
rename H2 into T.
unfold on_line_d in H.
decompose [and] H.
clear H.
assert (not (parallel A Y P Q)).
unfold not.
intro.
unfold parallel in H.
unfold S4 in H.
assert ((S A Y Q) = (S A Y P) + (S A P Q) + (S P Y Q)).

*****
H3 : eq (S A Y Q) (Fplus (Fplus (S A Y P) (S A P Q)) (S P Y Q))
H : eq (Fplus (S A P Y) (S A Y Q)) F0
H5 : eq (DSeg P Y) (Fmult lambda (DSeg P Q))
H4 : not (eq P Q)
H2 : Col Y P Q
T : not (eq C D)
H1 : parallel A Y C D
H0 : not (eq (S A P Q) F0)
lambda : F
A,C,D,P,Q,Y : Point
*****
False
+++++
Geometry.
-----
Lemma non_zero_denom_on_line_d_2_length_ratio : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q <> 0 -> parallel A Y C D -> C<>D -> S4 C P D Q <> 0.
Proof.
intros.
rename H2 into T.
unfold on_line_d in H.
decompose [and] H.
clear H.
assert (not (parallel A Y P Q)).
unfold not.
intro.
unfold parallel in H.
unfold S4 in H.
assert ((S A Y Q) = (S A Y P) + (S A P Q) + (S P Y Q)).
Geometry.

*****
H3 : eq (S A Y Q) (Fplus (Fplus (S A Y P) (S A P Q)) (S P Y Q))
H : eq (Fplus (S A P Y) (S A Y Q)) F0
H5 : eq (DSeg P Y) (Fmult lambda (DSeg P Q))
H4 : not (eq P Q)
H2 : Col Y P Q
T : not (eq C D)
H1 : parallel A Y C D
H0 : not (eq (S A P Q) F0)
lambda : F
A,C,D,P,Q,Y : Point
*****
False
+++++
rewrite H3 in H.
-----
Lemma non_zero_denom_on_line_d_2_length_ratio : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q <> 0 -> parallel A Y C D -> C<>D -> S4 C P D Q <> 0.
Proof.
intros.
rename H2 into T.
unfold on_line_d in H.
decompose [and] H.
clear H.
assert (not (parallel A Y P Q)).
unfold not.
intro.
unfold parallel in H.
unfold S4 in H.
assert ((S A Y Q) = (S A Y P) + (S A P Q) + (S P Y Q)).
Geometry.
rewrite H3 in H.

*****
H3 : eq (S A Y Q) (Fplus (Fplus (S A Y P) (S A P Q)) (S P Y Q))
H : eq (Fplus (S A P Y) (Fplus (Fplus (S A Y P) (S A P Q)) (S P Y Q))) F0
H5 : eq (DSeg P Y) (Fmult lambda (DSeg P Q))
H4 : not (eq P Q)
H2 : Col Y P Q
T : not (eq C D)
H1 : parallel A Y C D
H0 : not (eq (S A P Q) F0)
lambda : F
A,C,D,P,Q,Y : Point
*****
False
+++++
assert ((S A P Y) = - (S A Y P)).
-----
Lemma non_zero_denom_on_line_d_2_length_ratio : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q <> 0 -> parallel A Y C D -> C<>D -> S4 C P D Q <> 0.
Proof.
intros.
rename H2 into T.
unfold on_line_d in H.
decompose [and] H.
clear H.
assert (not (parallel A Y P Q)).
unfold not.
intro.
unfold parallel in H.
unfold S4 in H.
assert ((S A Y Q) = (S A Y P) + (S A P Q) + (S P Y Q)).
Geometry.
rewrite H3 in H.
assert ((S A P Y) = - (S A Y P)).

*****
H3 : eq (S A Y Q) (Fplus (Fplus (S A Y P) (S A P Q)) (S P Y Q))
H : eq (Fplus (S A P Y) (Fplus (Fplus (S A Y P) (S A P Q)) (S P Y Q))) F0
H5 : eq (DSeg P Y) (Fmult lambda (DSeg P Q))
H4 : not (eq P Q)
H2 : Col Y P Q
T : not (eq C D)
H1 : parallel A Y C D
H0 : not (eq (S A P Q) F0)
lambda : F
A,C,D,P,Q,Y : Point
*****
eq (S A P Y) (Fopp (S A Y P))
+++++
Geometry.
-----
Lemma non_zero_denom_on_line_d_2_length_ratio : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q <> 0 -> parallel A Y C D -> C<>D -> S4 C P D Q <> 0.
Proof.
intros.
rename H2 into T.
unfold on_line_d in H.
decompose [and] H.
clear H.
assert (not (parallel A Y P Q)).
unfold not.
intro.
unfold parallel in H.
unfold S4 in H.
assert ((S A Y Q) = (S A Y P) + (S A P Q) + (S P Y Q)).
Geometry.
rewrite H3 in H.
assert ((S A P Y) = - (S A Y P)).

*****
H6 : eq (S A P Y) (Fopp (S A Y P))
H3 : eq (S A Y Q) (Fplus (Fplus (S A Y P) (S A P Q)) (S P Y Q))
H : eq (Fplus (S A P Y) (Fplus (Fplus (S A Y P) (S A P Q)) (S P Y Q))) F0
H5 : eq (DSeg P Y) (Fmult lambda (DSeg P Q))
H4 : not (eq P Q)
H2 : Col Y P Q
T : not (eq C D)
H1 : parallel A Y C D
H0 : not (eq (S A P Q) F0)
lambda : F
A,C,D,P,Q,Y : Point
*****
False
+++++
Geometry.
-----
Lemma non_zero_denom_on_line_d_2_length_ratio : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q <> 0 -> parallel A Y C D -> C<>D -> S4 C P D Q <> 0.
Proof.
intros.
rename H2 into T.
unfold on_line_d in H.
decompose [and] H.
clear H.
assert (not (parallel A Y P Q)).
unfold not.
intro.
unfold parallel in H.
unfold S4 in H.
assert ((S A Y Q) = (S A Y P) + (S A P Q) + (S P Y Q)).
Geometry.
rewrite H3 in H.
assert ((S A P Y) = - (S A Y P)).
Geometry.

*****
H6 : eq (S A P Y) (Fopp (S A Y P))
H3 : eq (S A Y Q) (Fplus (Fplus (S A Y P) (S A P Q)) (S P Y Q))
H : eq (Fplus (S A P Y) (Fplus (Fplus (S A Y P) (S A P Q)) (S P Y Q))) F0
H5 : eq (DSeg P Y) (Fmult lambda (DSeg P Q))
H4 : not (eq P Q)
H2 : Col Y P Q
T : not (eq C D)
H1 : parallel A Y C D
H0 : not (eq (S A P Q) F0)
lambda : F
A,C,D,P,Q,Y : Point
*****
False
+++++
rewrite H6 in H.
-----
Lemma non_zero_denom_on_line_d_2_length_ratio : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q <> 0 -> parallel A Y C D -> C<>D -> S4 C P D Q <> 0.
Proof.
intros.
rename H2 into T.
unfold on_line_d in H.
decompose [and] H.
clear H.
assert (not (parallel A Y P Q)).
unfold not.
intro.
unfold parallel in H.
unfold S4 in H.
assert ((S A Y Q) = (S A Y P) + (S A P Q) + (S P Y Q)).
Geometry.
rewrite H3 in H.
assert ((S A P Y) = - (S A Y P)).
Geometry.
rewrite H6 in H.

*****
H6 : eq (S A P Y) (Fopp (S A Y P))
H3 : eq (S A Y Q) (Fplus (Fplus (S A Y P) (S A P Q)) (S P Y Q))
H : eq\n (Fplus (Fopp (S A Y P)) (Fplus (Fplus (S A Y P) (S A P Q)) (S P Y Q)))\n F0
H5 : eq (DSeg P Y) (Fmult lambda (DSeg P Q))
H4 : not (eq P Q)
H2 : Col Y P Q
T : not (eq C D)
H1 : parallel A Y C D
H0 : not (eq (S A P Q) F0)
lambda : F
A,C,D,P,Q,Y : Point
*****
False
+++++
assert ((S P Y Q) = (-0)).
-----
Lemma non_zero_denom_on_line_d_2_length_ratio : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q <> 0 -> parallel A Y C D -> C<>D -> S4 C P D Q <> 0.
Proof.
intros.
rename H2 into T.
unfold on_line_d in H.
decompose [and] H.
clear H.
assert (not (parallel A Y P Q)).
unfold not.
intro.
unfold parallel in H.
unfold S4 in H.
assert ((S A Y Q) = (S A Y P) + (S A P Q) + (S P Y Q)).
Geometry.
rewrite H3 in H.
assert ((S A P Y) = - (S A Y P)).
Geometry.
rewrite H6 in H.
assert ((S P Y Q) = (-0)).

*****
H6 : eq (S A P Y) (Fopp (S A Y P))
H3 : eq (S A Y Q) (Fplus (Fplus (S A Y P) (S A P Q)) (S P Y Q))
H : eq\n (Fplus (Fopp (S A Y P)) (Fplus (Fplus (S A Y P) (S A P Q)) (S P Y Q)))\n F0
H5 : eq (DSeg P Y) (Fmult lambda (DSeg P Q))
H4 : not (eq P Q)
H2 : Col Y P Q
T : not (eq C D)
H1 : parallel A Y C D
H0 : not (eq (S A P Q) F0)
lambda : F
A,C,D,P,Q,Y : Point
*****
eq (S P Y Q) (Fopp F0)
+++++
unfold Col in H2.
-----
Lemma non_zero_denom_on_line_d_2_length_ratio : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q <> 0 -> parallel A Y C D -> C<>D -> S4 C P D Q <> 0.
Proof.
intros.
rename H2 into T.
unfold on_line_d in H.
decompose [and] H.
clear H.
assert (not (parallel A Y P Q)).
unfold not.
intro.
unfold parallel in H.
unfold S4 in H.
assert ((S A Y Q) = (S A Y P) + (S A P Q) + (S P Y Q)).
Geometry.
rewrite H3 in H.
assert ((S A P Y) = - (S A Y P)).
Geometry.
rewrite H6 in H.
assert ((S P Y Q) = (-0)).
unfold Col in H2.

*****
H6 : eq (S A P Y) (Fopp (S A Y P))
H3 : eq (S A Y Q) (Fplus (Fplus (S A Y P) (S A P Q)) (S P Y Q))
H : eq\n (Fplus (Fopp (S A Y P)) (Fplus (Fplus (S A Y P) (S A P Q)) (S P Y Q)))\n F0
H5 : eq (DSeg P Y) (Fmult lambda (DSeg P Q))
H4 : not (eq P Q)
H2 : eq (S Y P Q) F0
T : not (eq C D)
H1 : parallel A Y C D
H0 : not (eq (S A P Q) F0)
lambda : F
A,C,D,P,Q,Y : Point
*****
eq (S P Y Q) (Fopp F0)
+++++
rewrite <- H2.
-----
Lemma non_zero_denom_on_line_d_2_length_ratio : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q <> 0 -> parallel A Y C D -> C<>D -> S4 C P D Q <> 0.
Proof.
intros.
rename H2 into T.
unfold on_line_d in H.
decompose [and] H.
clear H.
assert (not (parallel A Y P Q)).
unfold not.
intro.
unfold parallel in H.
unfold S4 in H.
assert ((S A Y Q) = (S A Y P) + (S A P Q) + (S P Y Q)).
Geometry.
rewrite H3 in H.
assert ((S A P Y) = - (S A Y P)).
Geometry.
rewrite H6 in H.
assert ((S P Y Q) = (-0)).
unfold Col in H2.
rewrite <- H2.

*****
H6 : eq (S A P Y) (Fopp (S A Y P))
H3 : eq (S A Y Q) (Fplus (Fplus (S A Y P) (S A P Q)) (S P Y Q))
H : eq\n (Fplus (Fopp (S A Y P)) (Fplus (Fplus (S A Y P) (S A P Q)) (S P Y Q)))\n F0
H5 : eq (DSeg P Y) (Fmult lambda (DSeg P Q))
H4 : not (eq P Q)
H2 : eq (S Y P Q) F0
T : not (eq C D)
H1 : parallel A Y C D
H0 : not (eq (S A P Q) F0)
lambda : F
A,C,D,P,Q,Y : Point
*****
eq (S P Y Q) (Fopp (S Y P Q))
+++++
Geometry.
-----
Lemma non_zero_denom_on_line_d_2_length_ratio : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q <> 0 -> parallel A Y C D -> C<>D -> S4 C P D Q <> 0.
Proof.
intros.
rename H2 into T.
unfold on_line_d in H.
decompose [and] H.
clear H.
assert (not (parallel A Y P Q)).
unfold not.
intro.
unfold parallel in H.
unfold S4 in H.
assert ((S A Y Q) = (S A Y P) + (S A P Q) + (S P Y Q)).
Geometry.
rewrite H3 in H.
assert ((S A P Y) = - (S A Y P)).
Geometry.
rewrite H6 in H.
assert ((S P Y Q) = (-0)).

*****
H7 : eq (S P Y Q) (Fopp F0)
H6 : eq (S A P Y) (Fopp (S A Y P))
H3 : eq (S A Y Q) (Fplus (Fplus (S A Y P) (S A P Q)) (S P Y Q))
H : eq\n (Fplus (Fopp (S A Y P)) (Fplus (Fplus (S A Y P) (S A P Q)) (S P Y Q)))\n F0
H5 : eq (DSeg P Y) (Fmult lambda (DSeg P Q))
H4 : not (eq P Q)
H2 : Col Y P Q
T : not (eq C D)
H1 : parallel A Y C D
H0 : not (eq (S A P Q) F0)
lambda : F
A,C,D,P,Q,Y : Point
*****
False
+++++
rewrite H7 in H.
-----
Lemma non_zero_denom_on_line_d_2_length_ratio : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q <> 0 -> parallel A Y C D -> C<>D -> S4 C P D Q <> 0.
Proof.
intros.
rename H2 into T.
unfold on_line_d in H.
decompose [and] H.
clear H.
assert (not (parallel A Y P Q)).
unfold not.
intro.
unfold parallel in H.
unfold S4 in H.
assert ((S A Y Q) = (S A Y P) + (S A P Q) + (S P Y Q)).
Geometry.
rewrite H3 in H.
assert ((S A P Y) = - (S A Y P)).
Geometry.
rewrite H6 in H.
assert ((S P Y Q) = (-0)).
rewrite H7 in H.

*****
H7 : eq (S P Y Q) (Fopp F0)
H6 : eq (S A P Y) (Fopp (S A Y P))
H3 : eq (S A Y Q) (Fplus (Fplus (S A Y P) (S A P Q)) (S P Y Q))
H : eq\n (Fplus (Fopp (S A Y P)) (Fplus (Fplus (S A Y P) (S A P Q)) (Fopp F0)))\n F0
H5 : eq (DSeg P Y) (Fmult lambda (DSeg P Q))
H4 : not (eq P Q)
H2 : Col Y P Q
T : not (eq C D)
H1 : parallel A Y C D
H0 : not (eq (S A P Q) F0)
lambda : F
A,C,D,P,Q,Y : Point
*****
False
+++++
assert (-(S A Y P)+((S A Y P)+(S A P Q)+-0) = (S A P Q)).
-----
Lemma non_zero_denom_on_line_d_2_length_ratio : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q <> 0 -> parallel A Y C D -> C<>D -> S4 C P D Q <> 0.
Proof.
intros.
rename H2 into T.
unfold on_line_d in H.
decompose [and] H.
clear H.
assert (not (parallel A Y P Q)).
unfold not.
intro.
unfold parallel in H.
unfold S4 in H.
assert ((S A Y Q) = (S A Y P) + (S A P Q) + (S P Y Q)).
Geometry.
rewrite H3 in H.
assert ((S A P Y) = - (S A Y P)).
Geometry.
rewrite H6 in H.
assert ((S P Y Q) = (-0)).
rewrite H7 in H.
assert (-(S A Y P)+((S A Y P)+(S A P Q)+-0) = (S A P Q)).

*****
H7 : eq (S P Y Q) (Fopp F0)
H6 : eq (S A P Y) (Fopp (S A Y P))
H3 : eq (S A Y Q) (Fplus (Fplus (S A Y P) (S A P Q)) (S P Y Q))
H : eq\n (Fplus (Fopp (S A Y P)) (Fplus (Fplus (S A Y P) (S A P Q)) (Fopp F0)))\n F0
H5 : eq (DSeg P Y) (Fmult lambda (DSeg P Q))
H4 : not (eq P Q)
H2 : Col Y P Q
T : not (eq C D)
H1 : parallel A Y C D
H0 : not (eq (S A P Q) F0)
lambda : F
A,C,D,P,Q,Y : Point
*****
eq (Fplus (Fopp (S A Y P)) (Fplus (Fplus (S A Y P) (S A P Q)) (Fopp F0))) (S A P Q)
+++++
ring.
-----
Lemma non_zero_denom_on_line_d_2_length_ratio : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q <> 0 -> parallel A Y C D -> C<>D -> S4 C P D Q <> 0.
Proof.
intros.
rename H2 into T.
unfold on_line_d in H.
decompose [and] H.
clear H.
assert (not (parallel A Y P Q)).
unfold not.
intro.
unfold parallel in H.
unfold S4 in H.
assert ((S A Y Q) = (S A Y P) + (S A P Q) + (S P Y Q)).
Geometry.
rewrite H3 in H.
assert ((S A P Y) = - (S A Y P)).
Geometry.
rewrite H6 in H.
assert ((S P Y Q) = (-0)).
rewrite H7 in H.
assert (-(S A Y P)+((S A Y P)+(S A P Q)+-0) = (S A P Q)).

*****
H8 : eq\n (Fplus (Fopp (S A Y P)) (Fplus (Fplus (S A Y P) (S A P Q)) (Fopp F0)))\n (S A P Q)
H7 : eq (S P Y Q) (Fopp F0)
H6 : eq (S A P Y) (Fopp (S A Y P))
H3 : eq (S A Y Q) (Fplus (Fplus (S A Y P) (S A P Q)) (S P Y Q))
H : eq\n (Fplus (Fopp (S A Y P)) (Fplus (Fplus (S A Y P) (S A P Q)) (Fopp F0)))\n F0
H5 : eq (DSeg P Y) (Fmult lambda (DSeg P Q))
H4 : not (eq P Q)
H2 : Col Y P Q
T : not (eq C D)
H1 : parallel A Y C D
H0 : not (eq (S A P Q) F0)
lambda : F
A,C,D,P,Q,Y : Point
*****
False
+++++
rewrite H8 in H.
-----
Lemma non_zero_denom_on_line_d_2_length_ratio : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q <> 0 -> parallel A Y C D -> C<>D -> S4 C P D Q <> 0.
Proof.
intros.
rename H2 into T.
unfold on_line_d in H.
decompose [and] H.
clear H.
assert (not (parallel A Y P Q)).
unfold not.
intro.
unfold parallel in H.
unfold S4 in H.
assert ((S A Y Q) = (S A Y P) + (S A P Q) + (S P Y Q)).
Geometry.
rewrite H3 in H.
assert ((S A P Y) = - (S A Y P)).
Geometry.
rewrite H6 in H.
assert ((S P Y Q) = (-0)).
rewrite H7 in H.
assert (-(S A Y P)+((S A Y P)+(S A P Q)+-0) = (S A P Q)).
rewrite H8 in H.

*****
H8 : eq\n (Fplus (Fopp (S A Y P)) (Fplus (Fplus (S A Y P) (S A P Q)) (Fopp F0)))\n (S A P Q)
H7 : eq (S P Y Q) (Fopp F0)
H6 : eq (S A P Y) (Fopp (S A Y P))
H3 : eq (S A Y Q) (Fplus (Fplus (S A Y P) (S A P Q)) (S P Y Q))
H : eq (S A P Q) F0
H5 : eq (DSeg P Y) (Fmult lambda (DSeg P Q))
H4 : not (eq P Q)
H2 : Col Y P Q
T : not (eq C D)
H1 : parallel A Y C D
H0 : not (eq (S A P Q) F0)
lambda : F
A,C,D,P,Q,Y : Point
*****
False
+++++
unfold Col in H0.
-----
Lemma non_zero_denom_on_line_d_2_length_ratio : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q <> 0 -> parallel A Y C D -> C<>D -> S4 C P D Q <> 0.
Proof.
intros.
rename H2 into T.
unfold on_line_d in H.
decompose [and] H.
clear H.
assert (not (parallel A Y P Q)).
unfold not.
intro.
unfold parallel in H.
unfold S4 in H.
assert ((S A Y Q) = (S A Y P) + (S A P Q) + (S P Y Q)).
Geometry.
rewrite H3 in H.
assert ((S A P Y) = - (S A Y P)).
Geometry.
rewrite H6 in H.
assert ((S P Y Q) = (-0)).
rewrite H7 in H.
assert (-(S A Y P)+((S A Y P)+(S A P Q)+-0) = (S A P Q)).
rewrite H8 in H.
unfold Col in H0.

*****
H8 : eq\n (Fplus (Fopp (S A Y P)) (Fplus (Fplus (S A Y P) (S A P Q)) (Fopp F0)))\n (S A P Q)
H7 : eq (S P Y Q) (Fopp F0)
H6 : eq (S A P Y) (Fopp (S A Y P))
H3 : eq (S A Y Q) (Fplus (Fplus (S A Y P) (S A P Q)) (S P Y Q))
H : eq (S A P Q) F0
H5 : eq (DSeg P Y) (Fmult lambda (DSeg P Q))
H4 : not (eq P Q)
H2 : Col Y P Q
T : not (eq C D)
H1 : parallel A Y C D
H0 : not (eq (S A P Q) F0)
lambda : F
A,C,D,P,Q,Y : Point
*****
False
+++++
intuition.
-----
Lemma non_zero_denom_on_line_d_2_length_ratio : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q <> 0 -> parallel A Y C D -> C<>D -> S4 C P D Q <> 0.
Proof.
intros.
rename H2 into T.
unfold on_line_d in H.
decompose [and] H.
clear H.
assert (not (parallel A Y P Q)).

*****
H : not (parallel A Y P Q)
H5 : eq (DSeg P Y) (Fmult lambda (DSeg P Q))
H4 : not (eq P Q)
H2 : Col Y P Q
T : not (eq C D)
H1 : parallel A Y C D
H0 : not (eq (S A P Q) F0)
lambda : F
A,C,D,P,Q,Y : Point
*****
not (eq (S4 C P D Q) F0)
+++++
unfold not.
-----
Lemma non_zero_denom_on_line_d_2_length_ratio : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q <> 0 -> parallel A Y C D -> C<>D -> S4 C P D Q <> 0.
Proof.
intros.
rename H2 into T.
unfold on_line_d in H.
decompose [and] H.
clear H.
assert (not (parallel A Y P Q)).
unfold not.

*****
H : not (parallel A Y P Q)
H5 : eq (DSeg P Y) (Fmult lambda (DSeg P Q))
H4 : not (eq P Q)
H2 : Col Y P Q
T : not (eq C D)
H1 : parallel A Y C D
H0 : not (eq (S A P Q) F0)
lambda : F
A,C,D,P,Q,Y : Point
*****
forall _ : eq (S4 C P D Q) F0, False
+++++
intro.
-----
Lemma non_zero_denom_on_line_d_2_length_ratio : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q <> 0 -> parallel A Y C D -> C<>D -> S4 C P D Q <> 0.
Proof.
intros.
rename H2 into T.
unfold on_line_d in H.
decompose [and] H.
clear H.
assert (not (parallel A Y P Q)).
unfold not.
intro.

*****
H3 : eq (S4 C P D Q) F0
H : not (parallel A Y P Q)
H5 : eq (DSeg P Y) (Fmult lambda (DSeg P Q))
H4 : not (eq P Q)
H2 : Col Y P Q
T : not (eq C D)
H1 : parallel A Y C D
H0 : not (eq (S A P Q) F0)
lambda : F
A,C,D,P,Q,Y : Point
*****
False
+++++
assert (parallel C D P Q).
-----
Lemma non_zero_denom_on_line_d_2_length_ratio : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q <> 0 -> parallel A Y C D -> C<>D -> S4 C P D Q <> 0.
Proof.
intros.
rename H2 into T.
unfold on_line_d in H.
decompose [and] H.
clear H.
assert (not (parallel A Y P Q)).
unfold not.
intro.
assert (parallel C D P Q).

*****
H3 : eq (S4 C P D Q) F0
H : not (parallel A Y P Q)
H5 : eq (DSeg P Y) (Fmult lambda (DSeg P Q))
H4 : not (eq P Q)
H2 : Col Y P Q
T : not (eq C D)
H1 : parallel A Y C D
H0 : not (eq (S A P Q) F0)
lambda : F
A,C,D,P,Q,Y : Point
*****
parallel C D P Q
+++++
Geometry.
-----
Lemma non_zero_denom_on_line_d_2_length_ratio : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q <> 0 -> parallel A Y C D -> C<>D -> S4 C P D Q <> 0.
Proof.
intros.
rename H2 into T.
unfold on_line_d in H.
decompose [and] H.
clear H.
assert (not (parallel A Y P Q)).
unfold not.
intro.
assert (parallel C D P Q).

*****
H6 : parallel C D P Q
H3 : eq (S4 C P D Q) F0
H : not (parallel A Y P Q)
H5 : eq (DSeg P Y) (Fmult lambda (DSeg P Q))
H4 : not (eq P Q)
H2 : Col Y P Q
T : not (eq C D)
H1 : parallel A Y C D
H0 : not (eq (S A P Q) F0)
lambda : F
A,C,D,P,Q,Y : Point
*****
False
+++++
Geometry.
-----
Lemma non_zero_denom_on_line_d_2_length_ratio : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q <> 0 -> parallel A Y C D -> C<>D -> S4 C P D Q <> 0.
Proof.
intros.
rename H2 into T.
unfold on_line_d in H.
decompose [and] H.
clear H.
assert (not (parallel A Y P Q)).
unfold not.
intro.
assert (parallel C D P Q).
Geometry.

*****
H6 : parallel C D P Q
H3 : eq (S4 C P D Q) F0
H : not (parallel A Y P Q)
H5 : eq (DSeg P Y) (Fmult lambda (DSeg P Q))
H4 : not (eq P Q)
H2 : Col Y P Q
T : not (eq C D)
H1 : parallel A Y C D
H0 : not (eq (S A P Q) F0)
lambda : F
A,C,D,P,Q,Y : Point
*****
False
+++++
assert (parallel A Y P Q).
-----
Lemma non_zero_denom_on_line_d_2_length_ratio : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q <> 0 -> parallel A Y C D -> C<>D -> S4 C P D Q <> 0.
Proof.
intros.
rename H2 into T.
unfold on_line_d in H.
decompose [and] H.
clear H.
assert (not (parallel A Y P Q)).
unfold not.
intro.
assert (parallel C D P Q).
Geometry.
assert (parallel A Y P Q).

*****
H6 : parallel C D P Q
H3 : eq (S4 C P D Q) F0
H : not (parallel A Y P Q)
H5 : eq (DSeg P Y) (Fmult lambda (DSeg P Q))
H4 : not (eq P Q)
H2 : Col Y P Q
T : not (eq C D)
H1 : parallel A Y C D
H0 : not (eq (S A P Q) F0)
lambda : F
A,C,D,P,Q,Y : Point
*****
parallel A Y P Q
+++++
eapply parallel_transitivity;try apply H1 || auto.
-----
Lemma non_zero_denom_on_line_d_2_length_ratio : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q <> 0 -> parallel A Y C D -> C<>D -> S4 C P D Q <> 0.
Proof.
intros.
rename H2 into T.
unfold on_line_d in H.
decompose [and] H.
clear H.
assert (not (parallel A Y P Q)).
unfold not.
intro.
assert (parallel C D P Q).
Geometry.
assert (parallel A Y P Q).
eapply parallel_transitivity;try apply H1 || auto.

*****
H6 : parallel C D P Q
H3 : eq (S4 C P D Q) F0
H : not (parallel A Y P Q)
H5 : eq (DSeg P Y) (Fmult lambda (DSeg P Q))
H4 : not (eq P Q)
H2 : Col Y P Q
T : not (eq C D)
H1 : parallel A Y C D
H0 : not (eq (S A P Q) F0)
lambda : F
A,C,D,P,Q,Y : Point
*****
not (eq C D)
+++++
auto.
-----
Lemma non_zero_denom_on_line_d_2_length_ratio : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q <> 0 -> parallel A Y C D -> C<>D -> S4 C P D Q <> 0.
Proof.
intros.
rename H2 into T.
unfold on_line_d in H.
decompose [and] H.
clear H.
assert (not (parallel A Y P Q)).
unfold not.
intro.
assert (parallel C D P Q).
Geometry.
assert (parallel A Y P Q).

*****
H7 : parallel A Y P Q
H6 : parallel C D P Q
H3 : eq (S4 C P D Q) F0
H : not (parallel A Y P Q)
H5 : eq (DSeg P Y) (Fmult lambda (DSeg P Q))
H4 : not (eq P Q)
H2 : Col Y P Q
T : not (eq C D)
H1 : parallel A Y C D
H0 : not (eq (S A P Q) F0)
lambda : F
A,C,D,P,Q,Y : Point
*****
False
+++++
intuition.
-----
Lemma non_zero_denom_on_line_d_2_length_ratio : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q <> 0 -> parallel A Y C D -> C<>D -> S4 C P D Q <> 0.
Proof.
intros.
rename H2 into T.
unfold on_line_d in H.
decompose [and] H.
clear H.
assert (not (parallel A Y P Q)).

*****

*****

+++++
Qed.
-----
Lemma non_zero_denom_on_line_2_length_ratio :\n    forall (A C D P Q Y : Point),\n    on_line Y P Q -> \n    S A P Q <> 0 -> \n    parallel A Y C D -> \n    C <> D ->\n    S4 C P D Q <> 0.
-----
Lemma non_zero_denom_on_line_2_length_ratio : forall (A C D P Q Y : Point), on_line Y P Q -> S A P Q <> 0 -> parallel A Y C D -> C <> D -> S4 C P D Q <> 0.

*****

*****
forall (A C D P Q Y : Point) (_ : on_line Y P Q) (_ : not (eq (S A P Q) F0)) (_ : parallel A Y C D) (_ : not (eq C D)), not (eq (S4 C P D Q) F0)
+++++
Proof.
-----
Lemma non_zero_denom_on_line_2_length_ratio : forall (A C D P Q Y : Point), on_line Y P Q -> S A P Q <> 0 -> parallel A Y C D -> C <> D -> S4 C P D Q <> 0.
Proof.

*****

*****
forall (A C D P Q Y : Point) (_ : on_line Y P Q) (_ : not (eq (S A P Q) F0)) (_ : parallel A Y C D) (_ : not (eq C D)), not (eq (S4 C P D Q) F0)
+++++
intros.
-----
Lemma non_zero_denom_on_line_2_length_ratio : forall (A C D P Q Y : Point), on_line Y P Q -> S A P Q <> 0 -> parallel A Y C D -> C <> D -> S4 C P D Q <> 0.
Proof.
intros.

*****
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (eq (S A P Q) F0)
H : on_line Y P Q
A,C,D,P,Q,Y : Point
*****
not (eq (S4 C P D Q) F0)
+++++
assert (on_line_d Y P Q (P**Y/P**Q)).
-----
Lemma non_zero_denom_on_line_2_length_ratio : forall (A C D P Q Y : Point), on_line Y P Q -> S A P Q <> 0 -> parallel A Y C D -> C <> D -> S4 C P D Q <> 0.
Proof.
intros.
assert (on_line_d Y P Q (P**Y/P**Q)).

*****
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (eq (S A P Q) F0)
H : on_line Y P Q
A,C,D,P,Q,Y : Point
*****
on_line_d Y P Q (Fdiv (DSeg P Y) (DSeg P Q))
+++++
apply on_line_to_on_line_d.
-----
Lemma non_zero_denom_on_line_2_length_ratio : forall (A C D P Q Y : Point), on_line Y P Q -> S A P Q <> 0 -> parallel A Y C D -> C <> D -> S4 C P D Q <> 0.
Proof.
intros.
assert (on_line_d Y P Q (P**Y/P**Q)).
apply on_line_to_on_line_d.

*****
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (eq (S A P Q) F0)
H : on_line Y P Q
A,C,D,P,Q,Y : Point
*****
on_line Y P Q
+++++
Geometry.
-----
Lemma non_zero_denom_on_line_2_length_ratio : forall (A C D P Q Y : Point), on_line Y P Q -> S A P Q <> 0 -> parallel A Y C D -> C <> D -> S4 C P D Q <> 0.
Proof.
intros.
assert (on_line_d Y P Q (P**Y/P**Q)).

*****
H3 : on_line_d Y P Q (Fdiv (DSeg P Y) (DSeg P Q))
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (eq (S A P Q) F0)
H : on_line Y P Q
A,C,D,P,Q,Y : Point
*****
not (eq (S4 C P D Q) F0)
+++++
eapply non_zero_denom_on_line_d_2_length_ratio.
-----
Lemma non_zero_denom_on_line_2_length_ratio : forall (A C D P Q Y : Point), on_line Y P Q -> S A P Q <> 0 -> parallel A Y C D -> C <> D -> S4 C P D Q <> 0.
Proof.
intros.
assert (on_line_d Y P Q (P**Y/P**Q)).
eapply non_zero_denom_on_line_d_2_length_ratio.

*****
H3 : on_line_d Y P Q (Fdiv (DSeg P Y) (DSeg P Q))
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (eq (S A P Q) F0)
H : on_line Y P Q
A,C,D,P,Q,Y : Point
*****
on_line_d ?Y P Q ?lambda
+++++
eauto.
-----
Lemma non_zero_denom_on_line_2_length_ratio : forall (A C D P Q Y : Point), on_line Y P Q -> S A P Q <> 0 -> parallel A Y C D -> C <> D -> S4 C P D Q <> 0.
Proof.
intros.
assert (on_line_d Y P Q (P**Y/P**Q)).
eapply non_zero_denom_on_line_d_2_length_ratio.

*****
H3 : on_line_d Y P Q (Fdiv (DSeg P Y) (DSeg P Q))
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (eq (S A P Q) F0)
H : on_line Y P Q
A,C,D,P,Q,Y : Point
*****
not (eq (S ?A P Q) F0)
+++++
eauto.
-----
Lemma non_zero_denom_on_line_2_length_ratio : forall (A C D P Q Y : Point), on_line Y P Q -> S A P Q <> 0 -> parallel A Y C D -> C <> D -> S4 C P D Q <> 0.
Proof.
intros.
assert (on_line_d Y P Q (P**Y/P**Q)).
eapply non_zero_denom_on_line_d_2_length_ratio.

*****
H3 : on_line_d Y P Q (Fdiv (DSeg P Y) (DSeg P Q))
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (eq (S A P Q) F0)
H : on_line Y P Q
A,C,D,P,Q,Y : Point
*****
parallel A Y C D
+++++
eauto.
-----
Lemma non_zero_denom_on_line_2_length_ratio : forall (A C D P Q Y : Point), on_line Y P Q -> S A P Q <> 0 -> parallel A Y C D -> C <> D -> S4 C P D Q <> 0.
Proof.
intros.
assert (on_line_d Y P Q (P**Y/P**Q)).
eapply non_zero_denom_on_line_d_2_length_ratio.

*****
H3 : on_line_d Y P Q (Fdiv (DSeg P Y) (DSeg P Q))
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (eq (S A P Q) F0)
H : on_line Y P Q
A,C,D,P,Q,Y : Point
*****
not (eq C D)
+++++
eauto.
-----
Lemma non_zero_denom_on_line_2_length_ratio : forall (A C D P Q Y : Point), on_line Y P Q -> S A P Q <> 0 -> parallel A Y C D -> C <> D -> S4 C P D Q <> 0.
Proof.
intros.
assert (on_line_d Y P Q (P**Y/P**Q)).

*****

*****

+++++
Qed.
-----
Lemma elim_length_ratio_on_line_d_2 :\n    forall (A C D P Q Y : Point) (lambda : F),\n    on_line_d Y P Q lambda ->\n    S A P Q <> 0 ->\n    C <> D -> \n    parallel A Y C D ->\n    A ** Y / C ** D = S A P Q / S4 C P D Q.
-----
Lemma elim_length_ratio_on_line_d_2 : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q <> 0 -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S A P Q / S4 C P D Q.

*****

*****
forall (A C D P Q Y : Point) (lambda : F) (_ : on_line_d Y P Q lambda) (_ : not (eq (S A P Q) F0)) (_ : not (eq C D)) (_ : parallel A Y C D), eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (S A P Q) (S4 C P D Q))
+++++
Proof with Geometry.
-----
Lemma elim_length_ratio_on_line_d_2 : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q <> 0 -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S A P Q / S4 C P D Q.
Proof with Geometry.

*****

*****
forall (A C D P Q Y : Point) (lambda : F) (_ : on_line_d Y P Q lambda) (_ : not (eq (S A P Q) F0)) (_ : not (eq C D)) (_ : parallel A Y C D), eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (S A P Q) (S4 C P D Q))
+++++
unfold on_line_d.
-----
Lemma elim_length_ratio_on_line_d_2 : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q <> 0 -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S A P Q / S4 C P D Q.
Proof with Geometry.
unfold on_line_d.

*****

*****
forall (A C D P Q Y : Point) (lambda : F) (_ : and (Col Y P Q) (and (not (eq P Q)) (eq (DSeg P Y) (Fmult lambda (DSeg P Q))))) (_ : not (eq (S A P Q) F0)) (_ : not (eq C D)) (_ : parallel A Y C D), eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (S A P Q) (S4 C P D Q))
+++++
intros.
-----
Lemma elim_length_ratio_on_line_d_2 : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q <> 0 -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S A P Q / S4 C P D Q.
Proof with Geometry.
unfold on_line_d.
intros.

*****
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (eq (S A P Q) F0)
H : and (Col Y P Q)\n (and (not (eq P Q)) (eq (DSeg P Y) (Fmult lambda (DSeg P Q))))
lambda : F
A,C,D,P,Q,Y : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (S A P Q) (S4 C P D Q))
+++++
DecompAndAll.
-----
Lemma elim_length_ratio_on_line_d_2 : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q <> 0 -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S A P Q / S4 C P D Q.
Proof with Geometry.
unfold on_line_d.
intros.
DecompAndAll.

*****
H6 : eq (DSeg P Y) (Fmult lambda (DSeg P Q))
H5 : not (eq P Q)
H3 : Col Y P Q
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (eq (S A P Q) F0)
lambda : F
A,C,D,P,Q,Y : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (S A P Q) (S4 C P D Q))
+++++
assert (~A=Y).
-----
Lemma elim_length_ratio_on_line_d_2 : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q <> 0 -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S A P Q / S4 C P D Q.
Proof with Geometry.
unfold on_line_d.
intros.
DecompAndAll.
assert (~A=Y).

*****
H6 : eq (DSeg P Y) (Fmult lambda (DSeg P Q))
H5 : not (eq P Q)
H3 : Col Y P Q
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (eq (S A P Q) F0)
lambda : F
A,C,D,P,Q,Y : Point
*****
not (eq A Y)
+++++
unfold not;intro.
-----
Lemma elim_length_ratio_on_line_d_2 : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q <> 0 -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S A P Q / S4 C P D Q.
Proof with Geometry.
unfold on_line_d.
intros.
DecompAndAll.
assert (~A=Y).
unfold not;intro.

*****
H : eq A Y
H6 : eq (DSeg P Y) (Fmult lambda (DSeg P Q))
H5 : not (eq P Q)
H3 : Col Y P Q
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (eq (S A P Q) F0)
lambda : F
A,C,D,P,Q,Y : Point
*****
False
+++++
subst A.
-----
Lemma elim_length_ratio_on_line_d_2 : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q <> 0 -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S A P Q / S4 C P D Q.
Proof with Geometry.
unfold on_line_d.
intros.
DecompAndAll.
assert (~A=Y).
unfold not;intro.
subst A.

*****
H6 : eq (DSeg P Y) (Fmult lambda (DSeg P Q))
H5 : not (eq P Q)
H3 : Col Y P Q
H2 : parallel Y Y C D
H1 : not (eq C D)
H0 : not (eq (S Y P Q) F0)
lambda : F
C,D,P,Q,Y : Point
*****
False
+++++
intuition.
-----
Lemma elim_length_ratio_on_line_d_2 : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q <> 0 -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S A P Q / S4 C P D Q.
Proof with Geometry.
unfold on_line_d.
intros.
DecompAndAll.
assert (~A=Y).
unfold not;intro.
subst A.
intuition.

*****
H : not (eq A Y)
H6 : eq (DSeg P Y) (Fmult lambda (DSeg P Q))
H5 : not (eq P Q)
H3 : Col Y P Q
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (eq (S A P Q) F0)
lambda : F
A,C,D,P,Q,Y : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (S A P Q) (S4 C P D Q))
+++++
assert (T:exists Y0 : Point, Col Y0 A Y /\ A ** Y0 = C ** D /\ weak_3_parallelogram A Y0 D C).
-----
Lemma elim_length_ratio_on_line_d_2 : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q <> 0 -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S A P Q / S4 C P D Q.
Proof with Geometry.
unfold on_line_d.
intros.
DecompAndAll.
assert (~A=Y).
unfold not;intro.
subst A.
intuition.
assert (T:exists Y0 : Point, Col Y0 A Y /\\ A ** Y0 = C ** D /\\ weak_3_parallelogram A Y0 D C).

*****
H : not (eq A Y)
H6 : eq (DSeg P Y) (Fmult lambda (DSeg P Q))
H5 : not (eq P Q)
H3 : Col Y P Q
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (eq (S A P Q) F0)
lambda : F
A,C,D,P,Q,Y : Point
*****
ex (fun Y0 : Point => and (Col Y0 A Y) (and (eq (DSeg A Y0) (DSeg C D)) (weak_3_parallelogram A Y0 D C)))
+++++
apply on_line_dex_spec_strong_f...
-----
Lemma elim_length_ratio_on_line_d_2 : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q <> 0 -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S A P Q / S4 C P D Q.
Proof with Geometry.
unfold on_line_d.
intros.
DecompAndAll.
assert (~A=Y).
unfold not;intro.
subst A.
intuition.
assert (T:exists Y0 : Point, Col Y0 A Y /\\ A ** Y0 = C ** D /\\ weak_3_parallelogram A Y0 D C).
apply on_line_dex_spec_strong_f...

*****
T : ex\n (fun Y0 : Point =>\n and (Col Y0 A Y)\n (and (eq (DSeg A Y0) (DSeg C D)) (weak_3_parallelogram A Y0 D C)))
H : not (eq A Y)
H6 : eq (DSeg P Y) (Fmult lambda (DSeg P Q))
H5 : not (eq P Q)
H3 : Col Y P Q
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (eq (S A P Q) F0)
lambda : F
A,C,D,P,Q,Y : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (S A P Q) (S4 C P D Q))
+++++
DecompExAnd T SS.
-----
Lemma elim_length_ratio_on_line_d_2 : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q <> 0 -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S A P Q / S4 C P D Q.
Proof with Geometry.
unfold on_line_d.
intros.
DecompAndAll.
assert (~A=Y).
unfold not;intro.
subst A.
intuition.
assert (T:exists Y0 : Point, Col Y0 A Y /\\ A ** Y0 = C ** D /\\ weak_3_parallelogram A Y0 D C).
apply on_line_dex_spec_strong_f...
DecompExAnd T SS.

*****
H10 : weak_3_parallelogram A SS D C
H9 : eq (DSeg A SS) (DSeg C D)
H7 : Col SS A Y
SS : Point
H : not (eq A Y)
H6 : eq (DSeg P Y) (Fmult lambda (DSeg P Q))
H5 : not (eq P Q)
H3 : Col Y P Q
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (eq (S A P Q) F0)
lambda : F
A,C,D,P,Q,Y : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (S A P Q) (S4 C P D Q))
+++++
assert (A<>SS).
-----
Lemma elim_length_ratio_on_line_d_2 : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q <> 0 -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S A P Q / S4 C P D Q.
Proof with Geometry.
unfold on_line_d.
intros.
DecompAndAll.
assert (~A=Y).
unfold not;intro.
subst A.
intuition.
assert (T:exists Y0 : Point, Col Y0 A Y /\\ A ** Y0 = C ** D /\\ weak_3_parallelogram A Y0 D C).
apply on_line_dex_spec_strong_f...
DecompExAnd T SS.
assert (A<>SS).

*****
H10 : weak_3_parallelogram A SS D C
H9 : eq (DSeg A SS) (DSeg C D)
H7 : Col SS A Y
SS : Point
H : not (eq A Y)
H6 : eq (DSeg P Y) (Fmult lambda (DSeg P Q))
H5 : not (eq P Q)
H3 : Col Y P Q
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (eq (S A P Q) F0)
lambda : F
A,C,D,P,Q,Y : Point
*****
not (eq A SS)
+++++
unfold not;intro;subst SS.
-----
Lemma elim_length_ratio_on_line_d_2 : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q <> 0 -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S A P Q / S4 C P D Q.
Proof with Geometry.
unfold on_line_d.
intros.
DecompAndAll.
assert (~A=Y).
unfold not;intro.
subst A.
intuition.
assert (T:exists Y0 : Point, Col Y0 A Y /\\ A ** Y0 = C ** D /\\ weak_3_parallelogram A Y0 D C).
apply on_line_dex_spec_strong_f...
DecompExAnd T SS.
assert (A<>SS).
unfold not;intro;subst SS.

*****
H7 : Col A A Y
H9 : eq (DSeg A A) (DSeg C D)
H10 : weak_3_parallelogram A A D C
H : not (eq A Y)
H6 : eq (DSeg P Y) (Fmult lambda (DSeg P Q))
H5 : not (eq P Q)
H3 : Col Y P Q
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (eq (S A P Q) F0)
lambda : F
A,C,D,P,Q,Y : Point
*****
False
+++++
basic_simpl.
-----
Lemma elim_length_ratio_on_line_d_2 : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q <> 0 -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S A P Q / S4 C P D Q.
Proof with Geometry.
unfold on_line_d.
intros.
DecompAndAll.
assert (~A=Y).
unfold not;intro.
subst A.
intuition.
assert (T:exists Y0 : Point, Col Y0 A Y /\\ A ** Y0 = C ** D /\\ weak_3_parallelogram A Y0 D C).
apply on_line_dex_spec_strong_f...
DecompExAnd T SS.
assert (A<>SS).
unfold not;intro;subst SS.
basic_simpl.

*****
H7 : Col A A Y
H9 : eq F0 (DSeg C D)
H10 : weak_3_parallelogram A A D C
H : not (eq A Y)
H6 : eq (DSeg P Y) (Fmult lambda (DSeg P Q))
H5 : not (eq P Q)
H3 : Col Y P Q
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (eq (S A P Q) F0)
lambda : F
A,C,D,P,Q,Y : Point
*****
False
+++++
assert (C=D)...
-----
Lemma elim_length_ratio_on_line_d_2 : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q <> 0 -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S A P Q / S4 C P D Q.
Proof with Geometry.
unfold on_line_d.
intros.
DecompAndAll.
assert (~A=Y).
unfold not;intro.
subst A.
intuition.
assert (T:exists Y0 : Point, Col Y0 A Y /\\ A ** Y0 = C ** D /\\ weak_3_parallelogram A Y0 D C).
apply on_line_dex_spec_strong_f...
DecompExAnd T SS.
assert (A<>SS).
unfold not;intro;subst SS.
basic_simpl.
assert (C=D)...

*****
H4 : not (eq A SS)
H10 : weak_3_parallelogram A SS D C
H9 : eq (DSeg A SS) (DSeg C D)
H7 : Col SS A Y
SS : Point
H : not (eq A Y)
H6 : eq (DSeg P Y) (Fmult lambda (DSeg P Q))
H5 : not (eq P Q)
H3 : Col Y P Q
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (eq (S A P Q) F0)
lambda : F
A,C,D,P,Q,Y : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (S A P Q) (S4 C P D Q))
+++++
assert (A**Y / A**SS = (S A P Q)/(S4 A P SS Q)).
-----
Lemma elim_length_ratio_on_line_d_2 : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q <> 0 -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S A P Q / S4 C P D Q.
Proof with Geometry.
unfold on_line_d.
intros.
DecompAndAll.
assert (~A=Y).
unfold not;intro.
subst A.
intuition.
assert (T:exists Y0 : Point, Col Y0 A Y /\\ A ** Y0 = C ** D /\\ weak_3_parallelogram A Y0 D C).
apply on_line_dex_spec_strong_f...
DecompExAnd T SS.
assert (A<>SS).
unfold not;intro;subst SS.
basic_simpl.
assert (C=D)...
assert (A**Y / A**SS = (S A P Q)/(S4 A P SS Q)).

*****
H4 : not (eq A SS)
H10 : weak_3_parallelogram A SS D C
H9 : eq (DSeg A SS) (DSeg C D)
H7 : Col SS A Y
SS : Point
H : not (eq A Y)
H6 : eq (DSeg P Y) (Fmult lambda (DSeg P Q))
H5 : not (eq P Q)
H3 : Col Y P Q
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (eq (S A P Q) F0)
lambda : F
A,C,D,P,Q,Y : Point
*****
eq (Fdiv (DSeg A Y) (DSeg A SS)) (Fdiv (S A P Q) (S4 A P SS Q))
+++++
apply co_side_ter...
-----
Lemma elim_length_ratio_on_line_d_2 : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q <> 0 -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S A P Q / S4 C P D Q.
Proof with Geometry.
unfold on_line_d.
intros.
DecompAndAll.
assert (~A=Y).
unfold not;intro.
subst A.
intuition.
assert (T:exists Y0 : Point, Col Y0 A Y /\\ A ** Y0 = C ** D /\\ weak_3_parallelogram A Y0 D C).
apply on_line_dex_spec_strong_f...
DecompExAnd T SS.
assert (A<>SS).
unfold not;intro;subst SS.
basic_simpl.
assert (C=D)...
assert (A**Y / A**SS = (S A P Q)/(S4 A P SS Q)).
apply co_side_ter...

*****
H4 : not (eq A SS)
H10 : weak_3_parallelogram A SS D C
H9 : eq (DSeg A SS) (DSeg C D)
H7 : Col SS A Y
SS : Point
H : not (eq A Y)
H6 : eq (DSeg P Y) (Fmult lambda (DSeg P Q))
H5 : not (eq P Q)
H3 : Col Y P Q
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (eq (S A P Q) F0)
lambda : F
A,C,D,P,Q,Y : Point
*****
not (parallel A SS P Q)
+++++
cases_equality P Y.
-----
Lemma elim_length_ratio_on_line_d_2 : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q <> 0 -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S A P Q / S4 C P D Q.
Proof with Geometry.
unfold on_line_d.
intros.
DecompAndAll.
assert (~A=Y).
unfold not;intro.
subst A.
intuition.
assert (T:exists Y0 : Point, Col Y0 A Y /\\ A ** Y0 = C ** D /\\ weak_3_parallelogram A Y0 D C).
apply on_line_dex_spec_strong_f...
DecompExAnd T SS.
assert (A<>SS).
unfold not;intro;subst SS.
basic_simpl.
assert (C=D)...
assert (A**Y / A**SS = (S A P Q)/(S4 A P SS Q)).
apply co_side_ter...
cases_equality P Y.

*****
H8 : eq P Y
H4 : not (eq A SS)
H10 : weak_3_parallelogram A SS D C
H9 : eq (DSeg A SS) (DSeg C D)
H7 : Col SS A Y
SS : Point
H : not (eq A Y)
H6 : eq (DSeg P Y) (Fmult lambda (DSeg P Q))
H5 : not (eq P Q)
H3 : Col Y P Q
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (eq (S A P Q) F0)
lambda : F
A,C,D,P,Q,Y : Point
*****
not (parallel A SS P Q)
+++++
subst P.
-----
Lemma elim_length_ratio_on_line_d_2 : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q <> 0 -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S A P Q / S4 C P D Q.
Proof with Geometry.
unfold on_line_d.
intros.
DecompAndAll.
assert (~A=Y).
unfold not;intro.
subst A.
intuition.
assert (T:exists Y0 : Point, Col Y0 A Y /\\ A ** Y0 = C ** D /\\ weak_3_parallelogram A Y0 D C).
apply on_line_dex_spec_strong_f...
DecompExAnd T SS.
assert (A<>SS).
unfold not;intro;subst SS.
basic_simpl.
assert (C=D)...
assert (A**Y / A**SS = (S A P Q)/(S4 A P SS Q)).
apply co_side_ter...
cases_equality P Y.
subst P.

*****
H4 : not (eq A SS)
H10 : weak_3_parallelogram A SS D C
H9 : eq (DSeg A SS) (DSeg C D)
H7 : Col SS A Y
SS : Point
H : not (eq A Y)
H3 : Col Y Y Q
H5 : not (eq Y Q)
H6 : eq (DSeg Y Y) (Fmult lambda (DSeg Y Q))
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (eq (S A Y Q) F0)
lambda : F
A,C,D,Q,Y : Point
*****
not (parallel A SS Y Q)
+++++
unfold not;intro.
-----
Lemma elim_length_ratio_on_line_d_2 : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q <> 0 -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S A P Q / S4 C P D Q.
Proof with Geometry.
unfold on_line_d.
intros.
DecompAndAll.
assert (~A=Y).
unfold not;intro.
subst A.
intuition.
assert (T:exists Y0 : Point, Col Y0 A Y /\\ A ** Y0 = C ** D /\\ weak_3_parallelogram A Y0 D C).
apply on_line_dex_spec_strong_f...
DecompExAnd T SS.
assert (A<>SS).
unfold not;intro;subst SS.
basic_simpl.
assert (C=D)...
assert (A**Y / A**SS = (S A P Q)/(S4 A P SS Q)).
apply co_side_ter...
cases_equality P Y.
subst P.
unfold not;intro.

*****
H8 : parallel A SS Y Q
H4 : not (eq A SS)
H10 : weak_3_parallelogram A SS D C
H9 : eq (DSeg A SS) (DSeg C D)
H7 : Col SS A Y
SS : Point
H : not (eq A Y)
H3 : Col Y Y Q
H5 : not (eq Y Q)
H6 : eq (DSeg Y Y) (Fmult lambda (DSeg Y Q))
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (eq (S A Y Q) F0)
lambda : F
A,C,D,Q,Y : Point
*****
False
+++++
assert (Col A SS Q).
-----
Lemma elim_length_ratio_on_line_d_2 : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q <> 0 -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S A P Q / S4 C P D Q.
Proof with Geometry.
unfold on_line_d.
intros.
DecompAndAll.
assert (~A=Y).
unfold not;intro.
subst A.
intuition.
assert (T:exists Y0 : Point, Col Y0 A Y /\\ A ** Y0 = C ** D /\\ weak_3_parallelogram A Y0 D C).
apply on_line_dex_spec_strong_f...
DecompExAnd T SS.
assert (A<>SS).
unfold not;intro;subst SS.
basic_simpl.
assert (C=D)...
assert (A**Y / A**SS = (S A P Q)/(S4 A P SS Q)).
apply co_side_ter...
cases_equality P Y.
subst P.
unfold not;intro.
assert (Col A SS Q).

*****
H8 : parallel A SS Y Q
H4 : not (eq A SS)
H10 : weak_3_parallelogram A SS D C
H9 : eq (DSeg A SS) (DSeg C D)
H7 : Col SS A Y
SS : Point
H : not (eq A Y)
H3 : Col Y Y Q
H5 : not (eq Y Q)
H6 : eq (DSeg Y Y) (Fmult lambda (DSeg Y Q))
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (eq (S A Y Q) F0)
lambda : F
A,C,D,Q,Y : Point
*****
Col A SS Q
+++++
eapply (par_col_col_1).
-----
Lemma elim_length_ratio_on_line_d_2 : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q <> 0 -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S A P Q / S4 C P D Q.
Proof with Geometry.
unfold on_line_d.
intros.
DecompAndAll.
assert (~A=Y).
unfold not;intro.
subst A.
intuition.
assert (T:exists Y0 : Point, Col Y0 A Y /\\ A ** Y0 = C ** D /\\ weak_3_parallelogram A Y0 D C).
apply on_line_dex_spec_strong_f...
DecompExAnd T SS.
assert (A<>SS).
unfold not;intro;subst SS.
basic_simpl.
assert (C=D)...
assert (A**Y / A**SS = (S A P Q)/(S4 A P SS Q)).
apply co_side_ter...
cases_equality P Y.
subst P.
unfold not;intro.
assert (Col A SS Q).
eapply (par_col_col_1).

*****
H8 : parallel A SS Y Q
H4 : not (eq A SS)
H10 : weak_3_parallelogram A SS D C
H9 : eq (DSeg A SS) (DSeg C D)
H7 : Col SS A Y
SS : Point
H : not (eq A Y)
H3 : Col Y Y Q
H5 : not (eq Y Q)
H6 : eq (DSeg Y Y) (Fmult lambda (DSeg Y Q))
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (eq (S A Y Q) F0)
lambda : F
A,C,D,Q,Y : Point
*****
parallel A SS ?C Q
+++++
apply H8.
-----
Lemma elim_length_ratio_on_line_d_2 : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q <> 0 -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S A P Q / S4 C P D Q.
Proof with Geometry.
unfold on_line_d.
intros.
DecompAndAll.
assert (~A=Y).
unfold not;intro.
subst A.
intuition.
assert (T:exists Y0 : Point, Col Y0 A Y /\\ A ** Y0 = C ** D /\\ weak_3_parallelogram A Y0 D C).
apply on_line_dex_spec_strong_f...
DecompExAnd T SS.
assert (A<>SS).
unfold not;intro;subst SS.
basic_simpl.
assert (C=D)...
assert (A**Y / A**SS = (S A P Q)/(S4 A P SS Q)).
apply co_side_ter...
cases_equality P Y.
subst P.
unfold not;intro.
assert (Col A SS Q).
eapply (par_col_col_1).
apply H8.

*****
H8 : parallel A SS Y Q
H4 : not (eq A SS)
H10 : weak_3_parallelogram A SS D C
H9 : eq (DSeg A SS) (DSeg C D)
H7 : Col SS A Y
SS : Point
H : not (eq A Y)
H3 : Col Y Y Q
H5 : not (eq Y Q)
H6 : eq (DSeg Y Y) (Fmult lambda (DSeg Y Q))
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (eq (S A Y Q) F0)
lambda : F
A,C,D,Q,Y : Point
*****
Col A SS Y
+++++
Geometry.
-----
Lemma elim_length_ratio_on_line_d_2 : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q <> 0 -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S A P Q / S4 C P D Q.
Proof with Geometry.
unfold on_line_d.
intros.
DecompAndAll.
assert (~A=Y).
unfold not;intro.
subst A.
intuition.
assert (T:exists Y0 : Point, Col Y0 A Y /\\ A ** Y0 = C ** D /\\ weak_3_parallelogram A Y0 D C).
apply on_line_dex_spec_strong_f...
DecompExAnd T SS.
assert (A<>SS).
unfold not;intro;subst SS.
basic_simpl.
assert (C=D)...
assert (A**Y / A**SS = (S A P Q)/(S4 A P SS Q)).
apply co_side_ter...
cases_equality P Y.
subst P.
unfold not;intro.
assert (Col A SS Q).
eapply (par_col_col_1).
apply H8.
Geometry.

*****
H11 : Col A SS Q
H8 : parallel A SS Y Q
H4 : not (eq A SS)
H10 : weak_3_parallelogram A SS D C
H9 : eq (DSeg A SS) (DSeg C D)
H7 : Col SS A Y
SS : Point
H : not (eq A Y)
H3 : Col Y Y Q
H5 : not (eq Y Q)
H6 : eq (DSeg Y Y) (Fmult lambda (DSeg Y Q))
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (eq (S A Y Q) F0)
lambda : F
A,C,D,Q,Y : Point
*****
False
+++++
assert (Col A Y Q).
-----
Lemma elim_length_ratio_on_line_d_2 : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q <> 0 -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S A P Q / S4 C P D Q.
Proof with Geometry.
unfold on_line_d.
intros.
DecompAndAll.
assert (~A=Y).
unfold not;intro.
subst A.
intuition.
assert (T:exists Y0 : Point, Col Y0 A Y /\\ A ** Y0 = C ** D /\\ weak_3_parallelogram A Y0 D C).
apply on_line_dex_spec_strong_f...
DecompExAnd T SS.
assert (A<>SS).
unfold not;intro;subst SS.
basic_simpl.
assert (C=D)...
assert (A**Y / A**SS = (S A P Q)/(S4 A P SS Q)).
apply co_side_ter...
cases_equality P Y.
subst P.
unfold not;intro.
assert (Col A SS Q).
eapply (par_col_col_1).
apply H8.
Geometry.
assert (Col A Y Q).

*****
H11 : Col A SS Q
H8 : parallel A SS Y Q
H4 : not (eq A SS)
H10 : weak_3_parallelogram A SS D C
H9 : eq (DSeg A SS) (DSeg C D)
H7 : Col SS A Y
SS : Point
H : not (eq A Y)
H3 : Col Y Y Q
H5 : not (eq Y Q)
H6 : eq (DSeg Y Y) (Fmult lambda (DSeg Y Q))
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (eq (S A Y Q) F0)
lambda : F
A,C,D,Q,Y : Point
*****
Col A Y Q
+++++
eapply col_trans_1 with (B:=SS)...
-----
Lemma elim_length_ratio_on_line_d_2 : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q <> 0 -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S A P Q / S4 C P D Q.
Proof with Geometry.
unfold on_line_d.
intros.
DecompAndAll.
assert (~A=Y).
unfold not;intro.
subst A.
intuition.
assert (T:exists Y0 : Point, Col Y0 A Y /\\ A ** Y0 = C ** D /\\ weak_3_parallelogram A Y0 D C).
apply on_line_dex_spec_strong_f...
DecompExAnd T SS.
assert (A<>SS).
unfold not;intro;subst SS.
basic_simpl.
assert (C=D)...
assert (A**Y / A**SS = (S A P Q)/(S4 A P SS Q)).
apply co_side_ter...
cases_equality P Y.
subst P.
unfold not;intro.
assert (Col A SS Q).
eapply (par_col_col_1).
apply H8.
Geometry.
assert (Col A Y Q).
eapply col_trans_1 with (B:=SS)...

*****
H12 : Col A Y Q
H11 : Col A SS Q
H8 : parallel A SS Y Q
H4 : not (eq A SS)
H10 : weak_3_parallelogram A SS D C
H9 : eq (DSeg A SS) (DSeg C D)
H7 : Col SS A Y
SS : Point
H : not (eq A Y)
H3 : Col Y Y Q
H5 : not (eq Y Q)
H6 : eq (DSeg Y Y) (Fmult lambda (DSeg Y Q))
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (eq (S A Y Q) F0)
lambda : F
A,C,D,Q,Y : Point
*****
False
+++++
intuition.
-----
Lemma elim_length_ratio_on_line_d_2 : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q <> 0 -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S A P Q / S4 C P D Q.
Proof with Geometry.
unfold on_line_d.
intros.
DecompAndAll.
assert (~A=Y).
unfold not;intro.
subst A.
intuition.
assert (T:exists Y0 : Point, Col Y0 A Y /\\ A ** Y0 = C ** D /\\ weak_3_parallelogram A Y0 D C).
apply on_line_dex_spec_strong_f...
DecompExAnd T SS.
assert (A<>SS).
unfold not;intro;subst SS.
basic_simpl.
assert (C=D)...
assert (A**Y / A**SS = (S A P Q)/(S4 A P SS Q)).
apply co_side_ter...
cases_equality P Y.
subst P.
unfold not;intro.
assert (Col A SS Q).
eapply (par_col_col_1).
apply H8.
Geometry.
assert (Col A Y Q).
eapply col_trans_1 with (B:=SS)...
intuition.

*****
H8 : not (eq P Y)
H4 : not (eq A SS)
H10 : weak_3_parallelogram A SS D C
H9 : eq (DSeg A SS) (DSeg C D)
H7 : Col SS A Y
SS : Point
H : not (eq A Y)
H6 : eq (DSeg P Y) (Fmult lambda (DSeg P Q))
H5 : not (eq P Q)
H3 : Col Y P Q
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (eq (S A P Q) F0)
lambda : F
A,C,D,P,Q,Y : Point
*****
not (parallel A SS P Q)
+++++
eapply common_point_not_par.
-----
Lemma elim_length_ratio_on_line_d_2 : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q <> 0 -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S A P Q / S4 C P D Q.
Proof with Geometry.
unfold on_line_d.
intros.
DecompAndAll.
assert (~A=Y).
unfold not;intro.
subst A.
intuition.
assert (T:exists Y0 : Point, Col Y0 A Y /\\ A ** Y0 = C ** D /\\ weak_3_parallelogram A Y0 D C).
apply on_line_dex_spec_strong_f...
DecompExAnd T SS.
assert (A<>SS).
unfold not;intro;subst SS.
basic_simpl.
assert (C=D)...
assert (A**Y / A**SS = (S A P Q)/(S4 A P SS Q)).
apply co_side_ter...
cases_equality P Y.
subst P.
unfold not;intro.
assert (Col A SS Q).
eapply (par_col_col_1).
apply H8.
Geometry.
assert (Col A Y Q).
eapply col_trans_1 with (B:=SS)...
intuition.
eapply common_point_not_par.

*****
H8 : not (eq P Y)
H4 : not (eq A SS)
H10 : weak_3_parallelogram A SS D C
H9 : eq (DSeg A SS) (DSeg C D)
H7 : Col SS A Y
SS : Point
H : not (eq A Y)
H6 : eq (DSeg P Y) (Fmult lambda (DSeg P Q))
H5 : not (eq P Q)
H3 : Col Y P Q
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (eq (S A P Q) F0)
lambda : F
A,C,D,P,Q,Y : Point
*****
Col ?Y A SS
+++++
2:apply H3.
-----
Lemma elim_length_ratio_on_line_d_2 : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q <> 0 -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S A P Q / S4 C P D Q.
Proof with Geometry.
unfold on_line_d.
intros.
DecompAndAll.
assert (~A=Y).
unfold not;intro.
subst A.
intuition.
assert (T:exists Y0 : Point, Col Y0 A Y /\\ A ** Y0 = C ** D /\\ weak_3_parallelogram A Y0 D C).
apply on_line_dex_spec_strong_f...
DecompExAnd T SS.
assert (A<>SS).
unfold not;intro;subst SS.
basic_simpl.
assert (C=D)...
assert (A**Y / A**SS = (S A P Q)/(S4 A P SS Q)).
apply co_side_ter...
cases_equality P Y.
subst P.
unfold not;intro.
assert (Col A SS Q).
eapply (par_col_col_1).
apply H8.
Geometry.
assert (Col A Y Q).
eapply col_trans_1 with (B:=SS)...
intuition.
eapply common_point_not_par.
2:apply H3.

*****
H8 : not (eq P Y)
H4 : not (eq A SS)
H10 : weak_3_parallelogram A SS D C
H9 : eq (DSeg A SS) (DSeg C D)
H7 : Col SS A Y
SS : Point
H : not (eq A Y)
H6 : eq (DSeg P Y) (Fmult lambda (DSeg P Q))
H5 : not (eq P Q)
H3 : Col Y P Q
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (eq (S A P Q) F0)
lambda : F
A,C,D,P,Q,Y : Point
*****
Col Y A SS
+++++
Geometry.
-----
Lemma elim_length_ratio_on_line_d_2 : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q <> 0 -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S A P Q / S4 C P D Q.
Proof with Geometry.
unfold on_line_d.
intros.
DecompAndAll.
assert (~A=Y).
unfold not;intro.
subst A.
intuition.
assert (T:exists Y0 : Point, Col Y0 A Y /\\ A ** Y0 = C ** D /\\ weak_3_parallelogram A Y0 D C).
apply on_line_dex_spec_strong_f...
DecompExAnd T SS.
assert (A<>SS).
unfold not;intro;subst SS.
basic_simpl.
assert (C=D)...
assert (A**Y / A**SS = (S A P Q)/(S4 A P SS Q)).
apply co_side_ter...
cases_equality P Y.
subst P.
unfold not;intro.
assert (Col A SS Q).
eapply (par_col_col_1).
apply H8.
Geometry.
assert (Col A Y Q).
eapply col_trans_1 with (B:=SS)...
intuition.
eapply common_point_not_par.
2:apply H3.
Geometry.

*****
H8 : not (eq P Y)
H4 : not (eq A SS)
H10 : weak_3_parallelogram A SS D C
H9 : eq (DSeg A SS) (DSeg C D)
H7 : Col SS A Y
SS : Point
H : not (eq A Y)
H6 : eq (DSeg P Y) (Fmult lambda (DSeg P Q))
H5 : not (eq P Q)
H3 : Col Y P Q
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (eq (S A P Q) F0)
lambda : F
A,C,D,P,Q,Y : Point
*****
not (eq A SS)
+++++
auto.
-----
Lemma elim_length_ratio_on_line_d_2 : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q <> 0 -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S A P Q / S4 C P D Q.
Proof with Geometry.
unfold on_line_d.
intros.
DecompAndAll.
assert (~A=Y).
unfold not;intro.
subst A.
intuition.
assert (T:exists Y0 : Point, Col Y0 A Y /\\ A ** Y0 = C ** D /\\ weak_3_parallelogram A Y0 D C).
apply on_line_dex_spec_strong_f...
DecompExAnd T SS.
assert (A<>SS).
unfold not;intro;subst SS.
basic_simpl.
assert (C=D)...
assert (A**Y / A**SS = (S A P Q)/(S4 A P SS Q)).
apply co_side_ter...
cases_equality P Y.
subst P.
unfold not;intro.
assert (Col A SS Q).
eapply (par_col_col_1).
apply H8.
Geometry.
assert (Col A Y Q).
eapply col_trans_1 with (B:=SS)...
intuition.
eapply common_point_not_par.
2:apply H3.
Geometry.
auto.

*****
H8 : not (eq P Y)
H4 : not (eq A SS)
H10 : weak_3_parallelogram A SS D C
H9 : eq (DSeg A SS) (DSeg C D)
H7 : Col SS A Y
SS : Point
H : not (eq A Y)
H6 : eq (DSeg P Y) (Fmult lambda (DSeg P Q))
H5 : not (eq P Q)
H3 : Col Y P Q
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (eq (S A P Q) F0)
lambda : F
A,C,D,P,Q,Y : Point
*****
not (eq P Q)
+++++
auto.
-----
Lemma elim_length_ratio_on_line_d_2 : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q <> 0 -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S A P Q / S4 C P D Q.
Proof with Geometry.
unfold on_line_d.
intros.
DecompAndAll.
assert (~A=Y).
unfold not;intro.
subst A.
intuition.
assert (T:exists Y0 : Point, Col Y0 A Y /\\ A ** Y0 = C ** D /\\ weak_3_parallelogram A Y0 D C).
apply on_line_dex_spec_strong_f...
DecompExAnd T SS.
assert (A<>SS).
unfold not;intro;subst SS.
basic_simpl.
assert (C=D)...
assert (A**Y / A**SS = (S A P Q)/(S4 A P SS Q)).
apply co_side_ter...
cases_equality P Y.
subst P.
unfold not;intro.
assert (Col A SS Q).
eapply (par_col_col_1).
apply H8.
Geometry.
assert (Col A Y Q).
eapply col_trans_1 with (B:=SS)...
intuition.
eapply common_point_not_par.
2:apply H3.
Geometry.
auto.
auto.

*****
H8 : not (eq P Y)
H4 : not (eq A SS)
H10 : weak_3_parallelogram A SS D C
H9 : eq (DSeg A SS) (DSeg C D)
H7 : Col SS A Y
SS : Point
H : not (eq A Y)
H6 : eq (DSeg P Y) (Fmult lambda (DSeg P Q))
H5 : not (eq P Q)
H3 : Col Y P Q
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (eq (S A P Q) F0)
lambda : F
A,C,D,P,Q,Y : Point
*****
not (Col Y A P)
+++++
unfold not;intro.
-----
Lemma elim_length_ratio_on_line_d_2 : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q <> 0 -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S A P Q / S4 C P D Q.
Proof with Geometry.
unfold on_line_d.
intros.
DecompAndAll.
assert (~A=Y).
unfold not;intro.
subst A.
intuition.
assert (T:exists Y0 : Point, Col Y0 A Y /\\ A ** Y0 = C ** D /\\ weak_3_parallelogram A Y0 D C).
apply on_line_dex_spec_strong_f...
DecompExAnd T SS.
assert (A<>SS).
unfold not;intro;subst SS.
basic_simpl.
assert (C=D)...
assert (A**Y / A**SS = (S A P Q)/(S4 A P SS Q)).
apply co_side_ter...
cases_equality P Y.
subst P.
unfold not;intro.
assert (Col A SS Q).
eapply (par_col_col_1).
apply H8.
Geometry.
assert (Col A Y Q).
eapply col_trans_1 with (B:=SS)...
intuition.
eapply common_point_not_par.
2:apply H3.
Geometry.
auto.
auto.
unfold not;intro.

*****
H11 : Col Y A P
H8 : not (eq P Y)
H4 : not (eq A SS)
H10 : weak_3_parallelogram A SS D C
H9 : eq (DSeg A SS) (DSeg C D)
H7 : Col SS A Y
SS : Point
H : not (eq A Y)
H6 : eq (DSeg P Y) (Fmult lambda (DSeg P Q))
H5 : not (eq P Q)
H3 : Col Y P Q
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (eq (S A P Q) F0)
lambda : F
A,C,D,P,Q,Y : Point
*****
False
+++++
assert (Col P Q A).
-----
Lemma elim_length_ratio_on_line_d_2 : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q <> 0 -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S A P Q / S4 C P D Q.
Proof with Geometry.
unfold on_line_d.
intros.
DecompAndAll.
assert (~A=Y).
unfold not;intro.
subst A.
intuition.
assert (T:exists Y0 : Point, Col Y0 A Y /\\ A ** Y0 = C ** D /\\ weak_3_parallelogram A Y0 D C).
apply on_line_dex_spec_strong_f...
DecompExAnd T SS.
assert (A<>SS).
unfold not;intro;subst SS.
basic_simpl.
assert (C=D)...
assert (A**Y / A**SS = (S A P Q)/(S4 A P SS Q)).
apply co_side_ter...
cases_equality P Y.
subst P.
unfold not;intro.
assert (Col A SS Q).
eapply (par_col_col_1).
apply H8.
Geometry.
assert (Col A Y Q).
eapply col_trans_1 with (B:=SS)...
intuition.
eapply common_point_not_par.
2:apply H3.
Geometry.
auto.
auto.
unfold not;intro.
assert (Col P Q A).

*****
H11 : Col Y A P
H8 : not (eq P Y)
H4 : not (eq A SS)
H10 : weak_3_parallelogram A SS D C
H9 : eq (DSeg A SS) (DSeg C D)
H7 : Col SS A Y
SS : Point
H : not (eq A Y)
H6 : eq (DSeg P Y) (Fmult lambda (DSeg P Q))
H5 : not (eq P Q)
H3 : Col Y P Q
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (eq (S A P Q) F0)
lambda : F
A,C,D,P,Q,Y : Point
*****
Col P Q A
+++++
eapply col_trans_1 with (B:= Y)...
-----
Lemma elim_length_ratio_on_line_d_2 : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q <> 0 -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S A P Q / S4 C P D Q.
Proof with Geometry.
unfold on_line_d.
intros.
DecompAndAll.
assert (~A=Y).
unfold not;intro.
subst A.
intuition.
assert (T:exists Y0 : Point, Col Y0 A Y /\\ A ** Y0 = C ** D /\\ weak_3_parallelogram A Y0 D C).
apply on_line_dex_spec_strong_f...
DecompExAnd T SS.
assert (A<>SS).
unfold not;intro;subst SS.
basic_simpl.
assert (C=D)...
assert (A**Y / A**SS = (S A P Q)/(S4 A P SS Q)).
apply co_side_ter...
cases_equality P Y.
subst P.
unfold not;intro.
assert (Col A SS Q).
eapply (par_col_col_1).
apply H8.
Geometry.
assert (Col A Y Q).
eapply col_trans_1 with (B:=SS)...
intuition.
eapply common_point_not_par.
2:apply H3.
Geometry.
auto.
auto.
unfold not;intro.
assert (Col P Q A).
eapply col_trans_1 with (B:= Y)...

*****
H12 : Col P Q A
H11 : Col Y A P
H8 : not (eq P Y)
H4 : not (eq A SS)
H10 : weak_3_parallelogram A SS D C
H9 : eq (DSeg A SS) (DSeg C D)
H7 : Col SS A Y
SS : Point
H : not (eq A Y)
H6 : eq (DSeg P Y) (Fmult lambda (DSeg P Q))
H5 : not (eq P Q)
H3 : Col Y P Q
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (eq (S A P Q) F0)
lambda : F
A,C,D,P,Q,Y : Point
*****
False
+++++
assert (Col A P Q)...
-----
Lemma elim_length_ratio_on_line_d_2 : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q <> 0 -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S A P Q / S4 C P D Q.
Proof with Geometry.
unfold on_line_d.
intros.
DecompAndAll.
assert (~A=Y).
unfold not;intro.
subst A.
intuition.
assert (T:exists Y0 : Point, Col Y0 A Y /\\ A ** Y0 = C ** D /\\ weak_3_parallelogram A Y0 D C).
apply on_line_dex_spec_strong_f...
DecompExAnd T SS.
assert (A<>SS).
unfold not;intro;subst SS.
basic_simpl.
assert (C=D)...
assert (A**Y / A**SS = (S A P Q)/(S4 A P SS Q)).
apply co_side_ter...
cases_equality P Y.
subst P.
unfold not;intro.
assert (Col A SS Q).
eapply (par_col_col_1).
apply H8.
Geometry.
assert (Col A Y Q).
eapply col_trans_1 with (B:=SS)...
intuition.
eapply common_point_not_par.
2:apply H3.
Geometry.
auto.
auto.
unfold not;intro.
assert (Col P Q A).
eapply col_trans_1 with (B:= Y)...
assert (Col A P Q)...

*****
H8 : eq (Fdiv (DSeg A Y) (DSeg A SS)) (Fdiv (S A P Q) (S4 A P SS Q))
H4 : not (eq A SS)
H10 : weak_3_parallelogram A SS D C
H9 : eq (DSeg A SS) (DSeg C D)
H7 : Col SS A Y
SS : Point
H : not (eq A Y)
H6 : eq (DSeg P Y) (Fmult lambda (DSeg P Q))
H5 : not (eq P Q)
H3 : Col Y P Q
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (eq (S A P Q) F0)
lambda : F
A,C,D,P,Q,Y : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (S A P Q) (S4 C P D Q))
+++++
rewrite <- H9.
-----
Lemma elim_length_ratio_on_line_d_2 : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q <> 0 -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S A P Q / S4 C P D Q.
Proof with Geometry.
unfold on_line_d.
intros.
DecompAndAll.
assert (~A=Y).
unfold not;intro.
subst A.
intuition.
assert (T:exists Y0 : Point, Col Y0 A Y /\\ A ** Y0 = C ** D /\\ weak_3_parallelogram A Y0 D C).
apply on_line_dex_spec_strong_f...
DecompExAnd T SS.
assert (A<>SS).
unfold not;intro;subst SS.
basic_simpl.
assert (C=D)...
assert (A**Y / A**SS = (S A P Q)/(S4 A P SS Q)).
apply co_side_ter...
cases_equality P Y.
subst P.
unfold not;intro.
assert (Col A SS Q).
eapply (par_col_col_1).
apply H8.
Geometry.
assert (Col A Y Q).
eapply col_trans_1 with (B:=SS)...
intuition.
eapply common_point_not_par.
2:apply H3.
Geometry.
auto.
auto.
unfold not;intro.
assert (Col P Q A).
eapply col_trans_1 with (B:= Y)...
assert (Col A P Q)...
rewrite <- H9.

*****
H8 : eq (Fdiv (DSeg A Y) (DSeg A SS)) (Fdiv (S A P Q) (S4 A P SS Q))
H4 : not (eq A SS)
H10 : weak_3_parallelogram A SS D C
H9 : eq (DSeg A SS) (DSeg C D)
H7 : Col SS A Y
SS : Point
H : not (eq A Y)
H6 : eq (DSeg P Y) (Fmult lambda (DSeg P Q))
H5 : not (eq P Q)
H3 : Col Y P Q
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (eq (S A P Q) F0)
lambda : F
A,C,D,P,Q,Y : Point
*****
eq (Fdiv (DSeg A Y) (DSeg A SS)) (Fdiv (S A P Q) (S4 C P D Q))
+++++
rewrite H8.
-----
Lemma elim_length_ratio_on_line_d_2 : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q <> 0 -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S A P Q / S4 C P D Q.
Proof with Geometry.
unfold on_line_d.
intros.
DecompAndAll.
assert (~A=Y).
unfold not;intro.
subst A.
intuition.
assert (T:exists Y0 : Point, Col Y0 A Y /\\ A ** Y0 = C ** D /\\ weak_3_parallelogram A Y0 D C).
apply on_line_dex_spec_strong_f...
DecompExAnd T SS.
assert (A<>SS).
unfold not;intro;subst SS.
basic_simpl.
assert (C=D)...
assert (A**Y / A**SS = (S A P Q)/(S4 A P SS Q)).
apply co_side_ter...
cases_equality P Y.
subst P.
unfold not;intro.
assert (Col A SS Q).
eapply (par_col_col_1).
apply H8.
Geometry.
assert (Col A Y Q).
eapply col_trans_1 with (B:=SS)...
intuition.
eapply common_point_not_par.
2:apply H3.
Geometry.
auto.
auto.
unfold not;intro.
assert (Col P Q A).
eapply col_trans_1 with (B:= Y)...
assert (Col A P Q)...
rewrite <- H9.
rewrite H8.

*****
H8 : eq (Fdiv (DSeg A Y) (DSeg A SS)) (Fdiv (S A P Q) (S4 A P SS Q))
H4 : not (eq A SS)
H10 : weak_3_parallelogram A SS D C
H9 : eq (DSeg A SS) (DSeg C D)
H7 : Col SS A Y
SS : Point
H : not (eq A Y)
H6 : eq (DSeg P Y) (Fmult lambda (DSeg P Q))
H5 : not (eq P Q)
H3 : Col Y P Q
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (eq (S A P Q) F0)
lambda : F
A,C,D,P,Q,Y : Point
*****
eq (Fdiv (S A P Q) (S4 A P SS Q)) (Fdiv (S A P Q) (S4 C P D Q))
+++++
clear H8.
-----
Lemma elim_length_ratio_on_line_d_2 : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q <> 0 -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S A P Q / S4 C P D Q.
Proof with Geometry.
unfold on_line_d.
intros.
DecompAndAll.
assert (~A=Y).
unfold not;intro.
subst A.
intuition.
assert (T:exists Y0 : Point, Col Y0 A Y /\\ A ** Y0 = C ** D /\\ weak_3_parallelogram A Y0 D C).
apply on_line_dex_spec_strong_f...
DecompExAnd T SS.
assert (A<>SS).
unfold not;intro;subst SS.
basic_simpl.
assert (C=D)...
assert (A**Y / A**SS = (S A P Q)/(S4 A P SS Q)).
apply co_side_ter...
cases_equality P Y.
subst P.
unfold not;intro.
assert (Col A SS Q).
eapply (par_col_col_1).
apply H8.
Geometry.
assert (Col A Y Q).
eapply col_trans_1 with (B:=SS)...
intuition.
eapply common_point_not_par.
2:apply H3.
Geometry.
auto.
auto.
unfold not;intro.
assert (Col P Q A).
eapply col_trans_1 with (B:= Y)...
assert (Col A P Q)...
rewrite <- H9.
rewrite H8.
clear H8.

*****
H4 : not (eq A SS)
H10 : weak_3_parallelogram A SS D C
H9 : eq (DSeg A SS) (DSeg C D)
H7 : Col SS A Y
SS : Point
H : not (eq A Y)
H6 : eq (DSeg P Y) (Fmult lambda (DSeg P Q))
H5 : not (eq P Q)
H3 : Col Y P Q
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (eq (S A P Q) F0)
lambda : F
A,C,D,P,Q,Y : Point
*****
eq (Fdiv (S A P Q) (S4 A P SS Q)) (Fdiv (S A P Q) (S4 C P D Q))
+++++
replace (S4 A P SS Q) with (S4 C P D Q).
-----
Lemma elim_length_ratio_on_line_d_2 : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q <> 0 -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S A P Q / S4 C P D Q.
Proof with Geometry.
unfold on_line_d.
intros.
DecompAndAll.
assert (~A=Y).
unfold not;intro.
subst A.
intuition.
assert (T:exists Y0 : Point, Col Y0 A Y /\\ A ** Y0 = C ** D /\\ weak_3_parallelogram A Y0 D C).
apply on_line_dex_spec_strong_f...
DecompExAnd T SS.
assert (A<>SS).
unfold not;intro;subst SS.
basic_simpl.
assert (C=D)...
assert (A**Y / A**SS = (S A P Q)/(S4 A P SS Q)).
apply co_side_ter...
cases_equality P Y.
subst P.
unfold not;intro.
assert (Col A SS Q).
eapply (par_col_col_1).
apply H8.
Geometry.
assert (Col A Y Q).
eapply col_trans_1 with (B:=SS)...
intuition.
eapply common_point_not_par.
2:apply H3.
Geometry.
auto.
auto.
unfold not;intro.
assert (Col P Q A).
eapply col_trans_1 with (B:= Y)...
assert (Col A P Q)...
rewrite <- H9.
rewrite H8.
clear H8.
replace (S4 A P SS Q) with (S4 C P D Q).

*****
H4 : not (eq A SS)
H10 : weak_3_parallelogram A SS D C
H9 : eq (DSeg A SS) (DSeg C D)
H7 : Col SS A Y
SS : Point
H : not (eq A Y)
H6 : eq (DSeg P Y) (Fmult lambda (DSeg P Q))
H5 : not (eq P Q)
H3 : Col Y P Q
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (eq (S A P Q) F0)
lambda : F
A,C,D,P,Q,Y : Point
*****
eq (Fdiv (S A P Q) (S4 C P D Q)) (Fdiv (S A P Q) (S4 C P D Q))
+++++
auto.
-----
Lemma elim_length_ratio_on_line_d_2 : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q <> 0 -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S A P Q / S4 C P D Q.
Proof with Geometry.
unfold on_line_d.
intros.
DecompAndAll.
assert (~A=Y).
unfold not;intro.
subst A.
intuition.
assert (T:exists Y0 : Point, Col Y0 A Y /\\ A ** Y0 = C ** D /\\ weak_3_parallelogram A Y0 D C).
apply on_line_dex_spec_strong_f...
DecompExAnd T SS.
assert (A<>SS).
unfold not;intro;subst SS.
basic_simpl.
assert (C=D)...
assert (A**Y / A**SS = (S A P Q)/(S4 A P SS Q)).
apply co_side_ter...
cases_equality P Y.
subst P.
unfold not;intro.
assert (Col A SS Q).
eapply (par_col_col_1).
apply H8.
Geometry.
assert (Col A Y Q).
eapply col_trans_1 with (B:=SS)...
intuition.
eapply common_point_not_par.
2:apply H3.
Geometry.
auto.
auto.
unfold not;intro.
assert (Col P Q A).
eapply col_trans_1 with (B:= Y)...
assert (Col A P Q)...
rewrite <- H9.
rewrite H8.
clear H8.
replace (S4 A P SS Q) with (S4 C P D Q).
auto.

*****
H4 : not (eq A SS)
H10 : weak_3_parallelogram A SS D C
H9 : eq (DSeg A SS) (DSeg C D)
H7 : Col SS A Y
SS : Point
H : not (eq A Y)
H6 : eq (DSeg P Y) (Fmult lambda (DSeg P Q))
H5 : not (eq P Q)
H3 : Col Y P Q
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (eq (S A P Q) F0)
lambda : F
A,C,D,P,Q,Y : Point
*****
eq (S4 C P D Q) (S4 A P SS Q)
+++++
replace (S4 C P D Q) with (- S4 P C Q D).
-----
Lemma elim_length_ratio_on_line_d_2 : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q <> 0 -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S A P Q / S4 C P D Q.
Proof with Geometry.
unfold on_line_d.
intros.
DecompAndAll.
assert (~A=Y).
unfold not;intro.
subst A.
intuition.
assert (T:exists Y0 : Point, Col Y0 A Y /\\ A ** Y0 = C ** D /\\ weak_3_parallelogram A Y0 D C).
apply on_line_dex_spec_strong_f...
DecompExAnd T SS.
assert (A<>SS).
unfold not;intro;subst SS.
basic_simpl.
assert (C=D)...
assert (A**Y / A**SS = (S A P Q)/(S4 A P SS Q)).
apply co_side_ter...
cases_equality P Y.
subst P.
unfold not;intro.
assert (Col A SS Q).
eapply (par_col_col_1).
apply H8.
Geometry.
assert (Col A Y Q).
eapply col_trans_1 with (B:=SS)...
intuition.
eapply common_point_not_par.
2:apply H3.
Geometry.
auto.
auto.
unfold not;intro.
assert (Col P Q A).
eapply col_trans_1 with (B:= Y)...
assert (Col A P Q)...
rewrite <- H9.
rewrite H8.
clear H8.
replace (S4 A P SS Q) with (S4 C P D Q).
auto.
replace (S4 C P D Q) with (- S4 P C Q D).

*****
H4 : not (eq A SS)
H10 : weak_3_parallelogram A SS D C
H9 : eq (DSeg A SS) (DSeg C D)
H7 : Col SS A Y
SS : Point
H : not (eq A Y)
H6 : eq (DSeg P Y) (Fmult lambda (DSeg P Q))
H5 : not (eq P Q)
H3 : Col Y P Q
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (eq (S A P Q) F0)
lambda : F
A,C,D,P,Q,Y : Point
*****
eq (Fopp (S4 P C Q D)) (S4 A P SS Q)
+++++
2:Geometry.
-----
Lemma elim_length_ratio_on_line_d_2 : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q <> 0 -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S A P Q / S4 C P D Q.
Proof with Geometry.
unfold on_line_d.
intros.
DecompAndAll.
assert (~A=Y).
unfold not;intro.
subst A.
intuition.
assert (T:exists Y0 : Point, Col Y0 A Y /\\ A ** Y0 = C ** D /\\ weak_3_parallelogram A Y0 D C).
apply on_line_dex_spec_strong_f...
DecompExAnd T SS.
assert (A<>SS).
unfold not;intro;subst SS.
basic_simpl.
assert (C=D)...
assert (A**Y / A**SS = (S A P Q)/(S4 A P SS Q)).
apply co_side_ter...
cases_equality P Y.
subst P.
unfold not;intro.
assert (Col A SS Q).
eapply (par_col_col_1).
apply H8.
Geometry.
assert (Col A Y Q).
eapply col_trans_1 with (B:=SS)...
intuition.
eapply common_point_not_par.
2:apply H3.
Geometry.
auto.
auto.
unfold not;intro.
assert (Col P Q A).
eapply col_trans_1 with (B:= Y)...
assert (Col A P Q)...
rewrite <- H9.
rewrite H8.
clear H8.
replace (S4 A P SS Q) with (S4 C P D Q).
auto.
replace (S4 C P D Q) with (- S4 P C Q D).
2:Geometry.

*****
H4 : not (eq A SS)
H10 : weak_3_parallelogram A SS D C
H9 : eq (DSeg A SS) (DSeg C D)
H7 : Col SS A Y
SS : Point
H : not (eq A Y)
H6 : eq (DSeg P Y) (Fmult lambda (DSeg P Q))
H5 : not (eq P Q)
H3 : Col Y P Q
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (eq (S A P Q) F0)
lambda : F
A,C,D,P,Q,Y : Point
*****
eq (Fopp (S4 P C Q D)) (S4 A P SS Q)
+++++
replace (S4 A P SS Q) with (- S4 P A Q SS).
-----
Lemma elim_length_ratio_on_line_d_2 : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q <> 0 -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S A P Q / S4 C P D Q.
Proof with Geometry.
unfold on_line_d.
intros.
DecompAndAll.
assert (~A=Y).
unfold not;intro.
subst A.
intuition.
assert (T:exists Y0 : Point, Col Y0 A Y /\\ A ** Y0 = C ** D /\\ weak_3_parallelogram A Y0 D C).
apply on_line_dex_spec_strong_f...
DecompExAnd T SS.
assert (A<>SS).
unfold not;intro;subst SS.
basic_simpl.
assert (C=D)...
assert (A**Y / A**SS = (S A P Q)/(S4 A P SS Q)).
apply co_side_ter...
cases_equality P Y.
subst P.
unfold not;intro.
assert (Col A SS Q).
eapply (par_col_col_1).
apply H8.
Geometry.
assert (Col A Y Q).
eapply col_trans_1 with (B:=SS)...
intuition.
eapply common_point_not_par.
2:apply H3.
Geometry.
auto.
auto.
unfold not;intro.
assert (Col P Q A).
eapply col_trans_1 with (B:= Y)...
assert (Col A P Q)...
rewrite <- H9.
rewrite H8.
clear H8.
replace (S4 A P SS Q) with (S4 C P D Q).
auto.
replace (S4 C P D Q) with (- S4 P C Q D).
2:Geometry.
replace (S4 A P SS Q) with (- S4 P A Q SS).

*****
H4 : not (eq A SS)
H10 : weak_3_parallelogram A SS D C
H9 : eq (DSeg A SS) (DSeg C D)
H7 : Col SS A Y
SS : Point
H : not (eq A Y)
H6 : eq (DSeg P Y) (Fmult lambda (DSeg P Q))
H5 : not (eq P Q)
H3 : Col Y P Q
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (eq (S A P Q) F0)
lambda : F
A,C,D,P,Q,Y : Point
*****
eq (Fopp (S4 P C Q D)) (Fopp (S4 P A Q SS))
+++++
2:Geometry.
-----
Lemma elim_length_ratio_on_line_d_2 : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q <> 0 -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S A P Q / S4 C P D Q.
Proof with Geometry.
unfold on_line_d.
intros.
DecompAndAll.
assert (~A=Y).
unfold not;intro.
subst A.
intuition.
assert (T:exists Y0 : Point, Col Y0 A Y /\\ A ** Y0 = C ** D /\\ weak_3_parallelogram A Y0 D C).
apply on_line_dex_spec_strong_f...
DecompExAnd T SS.
assert (A<>SS).
unfold not;intro;subst SS.
basic_simpl.
assert (C=D)...
assert (A**Y / A**SS = (S A P Q)/(S4 A P SS Q)).
apply co_side_ter...
cases_equality P Y.
subst P.
unfold not;intro.
assert (Col A SS Q).
eapply (par_col_col_1).
apply H8.
Geometry.
assert (Col A Y Q).
eapply col_trans_1 with (B:=SS)...
intuition.
eapply common_point_not_par.
2:apply H3.
Geometry.
auto.
auto.
unfold not;intro.
assert (Col P Q A).
eapply col_trans_1 with (B:= Y)...
assert (Col A P Q)...
rewrite <- H9.
rewrite H8.
clear H8.
replace (S4 A P SS Q) with (S4 C P D Q).
auto.
replace (S4 C P D Q) with (- S4 P C Q D).
2:Geometry.
replace (S4 A P SS Q) with (- S4 P A Q SS).
2:Geometry.

*****
H4 : not (eq A SS)
H10 : weak_3_parallelogram A SS D C
H9 : eq (DSeg A SS) (DSeg C D)
H7 : Col SS A Y
SS : Point
H : not (eq A Y)
H6 : eq (DSeg P Y) (Fmult lambda (DSeg P Q))
H5 : not (eq P Q)
H3 : Col Y P Q
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (eq (S A P Q) F0)
lambda : F
A,C,D,P,Q,Y : Point
*****
eq (Fopp (S4 P C Q D)) (Fopp (S4 P A Q SS))
+++++
replace (S4 P C Q D) with (S4 P A Q SS).
-----
Lemma elim_length_ratio_on_line_d_2 : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q <> 0 -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S A P Q / S4 C P D Q.
Proof with Geometry.
unfold on_line_d.
intros.
DecompAndAll.
assert (~A=Y).
unfold not;intro.
subst A.
intuition.
assert (T:exists Y0 : Point, Col Y0 A Y /\\ A ** Y0 = C ** D /\\ weak_3_parallelogram A Y0 D C).
apply on_line_dex_spec_strong_f...
DecompExAnd T SS.
assert (A<>SS).
unfold not;intro;subst SS.
basic_simpl.
assert (C=D)...
assert (A**Y / A**SS = (S A P Q)/(S4 A P SS Q)).
apply co_side_ter...
cases_equality P Y.
subst P.
unfold not;intro.
assert (Col A SS Q).
eapply (par_col_col_1).
apply H8.
Geometry.
assert (Col A Y Q).
eapply col_trans_1 with (B:=SS)...
intuition.
eapply common_point_not_par.
2:apply H3.
Geometry.
auto.
auto.
unfold not;intro.
assert (Col P Q A).
eapply col_trans_1 with (B:= Y)...
assert (Col A P Q)...
rewrite <- H9.
rewrite H8.
clear H8.
replace (S4 A P SS Q) with (S4 C P D Q).
auto.
replace (S4 C P D Q) with (- S4 P C Q D).
2:Geometry.
replace (S4 A P SS Q) with (- S4 P A Q SS).
2:Geometry.
replace (S4 P C Q D) with (S4 P A Q SS).

*****
H4 : not (eq A SS)
H10 : weak_3_parallelogram A SS D C
H9 : eq (DSeg A SS) (DSeg C D)
H7 : Col SS A Y
SS : Point
H : not (eq A Y)
H6 : eq (DSeg P Y) (Fmult lambda (DSeg P Q))
H5 : not (eq P Q)
H3 : Col Y P Q
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (eq (S A P Q) F0)
lambda : F
A,C,D,P,Q,Y : Point
*****
eq (Fopp (S4 P A Q SS)) (Fopp (S4 P A Q SS))
+++++
auto.
-----
Lemma elim_length_ratio_on_line_d_2 : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q <> 0 -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S A P Q / S4 C P D Q.
Proof with Geometry.
unfold on_line_d.
intros.
DecompAndAll.
assert (~A=Y).
unfold not;intro.
subst A.
intuition.
assert (T:exists Y0 : Point, Col Y0 A Y /\\ A ** Y0 = C ** D /\\ weak_3_parallelogram A Y0 D C).
apply on_line_dex_spec_strong_f...
DecompExAnd T SS.
assert (A<>SS).
unfold not;intro;subst SS.
basic_simpl.
assert (C=D)...
assert (A**Y / A**SS = (S A P Q)/(S4 A P SS Q)).
apply co_side_ter...
cases_equality P Y.
subst P.
unfold not;intro.
assert (Col A SS Q).
eapply (par_col_col_1).
apply H8.
Geometry.
assert (Col A Y Q).
eapply col_trans_1 with (B:=SS)...
intuition.
eapply common_point_not_par.
2:apply H3.
Geometry.
auto.
auto.
unfold not;intro.
assert (Col P Q A).
eapply col_trans_1 with (B:= Y)...
assert (Col A P Q)...
rewrite <- H9.
rewrite H8.
clear H8.
replace (S4 A P SS Q) with (S4 C P D Q).
auto.
replace (S4 C P D Q) with (- S4 P C Q D).
2:Geometry.
replace (S4 A P SS Q) with (- S4 P A Q SS).
2:Geometry.
replace (S4 P C Q D) with (S4 P A Q SS).
auto.

*****
H4 : not (eq A SS)
H10 : weak_3_parallelogram A SS D C
H9 : eq (DSeg A SS) (DSeg C D)
H7 : Col SS A Y
SS : Point
H : not (eq A Y)
H6 : eq (DSeg P Y) (Fmult lambda (DSeg P Q))
H5 : not (eq P Q)
H3 : Col Y P Q
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (eq (S A P Q) F0)
lambda : F
A,C,D,P,Q,Y : Point
*****
eq (S4 P A Q SS) (S4 P C Q D)
+++++
eapply l2_11b_strong_strong_strong...
-----
Lemma elim_length_ratio_on_line_d_2 : forall (A C D P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A P Q <> 0 -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S A P Q / S4 C P D Q.
Proof with Geometry.
unfold on_line_d.
intros.
DecompAndAll.
assert (~A=Y).
unfold not;intro.
subst A.
intuition.
assert (T:exists Y0 : Point, Col Y0 A Y /\\ A ** Y0 = C ** D /\\ weak_3_parallelogram A Y0 D C).
apply on_line_dex_spec_strong_f...
DecompExAnd T SS.
assert (A<>SS).
unfold not;intro;subst SS.
basic_simpl.
assert (C=D)...
assert (A**Y / A**SS = (S A P Q)/(S4 A P SS Q)).
apply co_side_ter...
cases_equality P Y.
subst P.
unfold not;intro.
assert (Col A SS Q).
eapply (par_col_col_1).
apply H8.
Geometry.
assert (Col A Y Q).
eapply col_trans_1 with (B:=SS)...
intuition.
eapply common_point_not_par.
2:apply H3.
Geometry.
auto.
auto.
unfold not;intro.
assert (Col P Q A).
eapply col_trans_1 with (B:= Y)...
assert (Col A P Q)...
rewrite <- H9.
rewrite H8.
clear H8.
replace (S4 A P SS Q) with (S4 C P D Q).
auto.
replace (S4 C P D Q) with (- S4 P C Q D).
2:Geometry.
replace (S4 A P SS Q) with (- S4 P A Q SS).
2:Geometry.
replace (S4 P C Q D) with (S4 P A Q SS).
auto.
eapply l2_11b_strong_strong_strong...

*****

*****

+++++
Qed.
-----
Lemma elim_length_ratio_on_line_2 :\n    forall (A C D P Q Y : Point),\n    on_line Y P Q ->\n    ~ Col A P Q ->\n    C <> D -> parallel A Y C D -> \n   A ** Y / C ** D = S A P Q / S4 C P D Q.
-----
Lemma elim_length_ratio_on_line_2 : forall (A C D P Q Y : Point), on_line Y P Q -> ~ Col A P Q -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S A P Q / S4 C P D Q.

*****

*****
forall (A C D P Q Y : Point) (_ : on_line Y P Q) (_ : not (Col A P Q)) (_ : not (eq C D)) (_ : parallel A Y C D), eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (S A P Q) (S4 C P D Q))
+++++
Proof.
-----
Lemma elim_length_ratio_on_line_2 : forall (A C D P Q Y : Point), on_line Y P Q -> ~ Col A P Q -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S A P Q / S4 C P D Q.
Proof.

*****

*****
forall (A C D P Q Y : Point) (_ : on_line Y P Q) (_ : not (Col A P Q)) (_ : not (eq C D)) (_ : parallel A Y C D), eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (S A P Q) (S4 C P D Q))
+++++
intros.
-----
Lemma elim_length_ratio_on_line_2 : forall (A C D P Q Y : Point), on_line Y P Q -> ~ Col A P Q -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S A P Q / S4 C P D Q.
Proof.
intros.

*****
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (Col A P Q)
H : on_line Y P Q
A,C,D,P,Q,Y : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (S A P Q) (S4 C P D Q))
+++++
assert (on_line_d Y P Q (P**Y/P**Q)).
-----
Lemma elim_length_ratio_on_line_2 : forall (A C D P Q Y : Point), on_line Y P Q -> ~ Col A P Q -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S A P Q / S4 C P D Q.
Proof.
intros.
assert (on_line_d Y P Q (P**Y/P**Q)).

*****
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (Col A P Q)
H : on_line Y P Q
A,C,D,P,Q,Y : Point
*****
on_line_d Y P Q (Fdiv (DSeg P Y) (DSeg P Q))
+++++
apply on_line_to_on_line_d.
-----
Lemma elim_length_ratio_on_line_2 : forall (A C D P Q Y : Point), on_line Y P Q -> ~ Col A P Q -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S A P Q / S4 C P D Q.
Proof.
intros.
assert (on_line_d Y P Q (P**Y/P**Q)).
apply on_line_to_on_line_d.

*****
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (Col A P Q)
H : on_line Y P Q
A,C,D,P,Q,Y : Point
*****
on_line Y P Q
+++++
Geometry.
-----
Lemma elim_length_ratio_on_line_2 : forall (A C D P Q Y : Point), on_line Y P Q -> ~ Col A P Q -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S A P Q / S4 C P D Q.
Proof.
intros.
assert (on_line_d Y P Q (P**Y/P**Q)).

*****
H3 : on_line_d Y P Q (Fdiv (DSeg P Y) (DSeg P Q))
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (Col A P Q)
H : on_line Y P Q
A,C,D,P,Q,Y : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (S A P Q) (S4 C P D Q))
+++++
eapply elim_length_ratio_on_line_d_2.
-----
Lemma elim_length_ratio_on_line_2 : forall (A C D P Q Y : Point), on_line Y P Q -> ~ Col A P Q -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S A P Q / S4 C P D Q.
Proof.
intros.
assert (on_line_d Y P Q (P**Y/P**Q)).
eapply elim_length_ratio_on_line_d_2.

*****
H3 : on_line_d Y P Q (Fdiv (DSeg P Y) (DSeg P Q))
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (Col A P Q)
H : on_line Y P Q
A,C,D,P,Q,Y : Point
*****
on_line_d Y P Q ?lambda
+++++
Geometry.
-----
Lemma elim_length_ratio_on_line_2 : forall (A C D P Q Y : Point), on_line Y P Q -> ~ Col A P Q -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S A P Q / S4 C P D Q.
Proof.
intros.
assert (on_line_d Y P Q (P**Y/P**Q)).
eapply elim_length_ratio_on_line_d_2.
Geometry.

*****
H3 : on_line_d Y P Q (Fdiv (DSeg P Y) (DSeg P Q))
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (Col A P Q)
H : on_line Y P Q
A,C,D,P,Q,Y : Point
*****
on_line_d Y P Q ?lambda
+++++
apply H3.
-----
Lemma elim_length_ratio_on_line_2 : forall (A C D P Q Y : Point), on_line Y P Q -> ~ Col A P Q -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S A P Q / S4 C P D Q.
Proof.
intros.
assert (on_line_d Y P Q (P**Y/P**Q)).
eapply elim_length_ratio_on_line_d_2.

*****
H3 : on_line_d Y P Q (Fdiv (DSeg P Y) (DSeg P Q))
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (Col A P Q)
H : on_line Y P Q
A,C,D,P,Q,Y : Point
*****
not (eq (S A P Q) F0)
+++++
Geometry.
-----
Lemma elim_length_ratio_on_line_2 : forall (A C D P Q Y : Point), on_line Y P Q -> ~ Col A P Q -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S A P Q / S4 C P D Q.
Proof.
intros.
assert (on_line_d Y P Q (P**Y/P**Q)).
eapply elim_length_ratio_on_line_d_2.

*****
H3 : on_line_d Y P Q (Fdiv (DSeg P Y) (DSeg P Q))
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (Col A P Q)
H : on_line Y P Q
A,C,D,P,Q,Y : Point
*****
not (eq C D)
+++++
Geometry.
-----
Lemma elim_length_ratio_on_line_2 : forall (A C D P Q Y : Point), on_line Y P Q -> ~ Col A P Q -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S A P Q / S4 C P D Q.
Proof.
intros.
assert (on_line_d Y P Q (P**Y/P**Q)).
eapply elim_length_ratio_on_line_d_2.

*****
H3 : on_line_d Y P Q (Fdiv (DSeg P Y) (DSeg P Q))
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (Col A P Q)
H : on_line Y P Q
A,C,D,P,Q,Y : Point
*****
parallel A Y C D
+++++
Geometry.
-----
Lemma elim_length_ratio_on_line_2 : forall (A C D P Q Y : Point), on_line Y P Q -> ~ Col A P Q -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S A P Q / S4 C P D Q.
Proof.
intros.
assert (on_line_d Y P Q (P**Y/P**Q)).

*****

*****

+++++
Qed.
-----
Lemma non_zero_denom_inter_ll_1_length_ratio :\n    forall A C D U V P Q Y : Point,\n    inter_ll Y P Q U V -> \n    S A U V <> 0 -> \n    parallel A Y C D -> \n    C <> D ->\n    S4 C U D V <> 0.
-----
Lemma non_zero_denom_inter_ll_1_length_ratio : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V <> 0 -> parallel A Y C D -> C <> D -> S4 C U D V <> 0.

*****

*****
forall (A C D U V P Q Y : Point) (_ : inter_ll Y P Q U V) (_ : not (eq (S A U V) F0)) (_ : parallel A Y C D) (_ : not (eq C D)), not (eq (S4 C U D V) F0)
+++++
Proof with Geometry.
-----
Lemma non_zero_denom_inter_ll_1_length_ratio : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V <> 0 -> parallel A Y C D -> C <> D -> S4 C U D V <> 0.
Proof with Geometry.

*****

*****
forall (A C D U V P Q Y : Point) (_ : inter_ll Y P Q U V) (_ : not (eq (S A U V) F0)) (_ : parallel A Y C D) (_ : not (eq C D)), not (eq (S4 C U D V) F0)
+++++
intros.
-----
Lemma non_zero_denom_inter_ll_1_length_ratio : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V <> 0 -> parallel A Y C D -> C <> D -> S4 C U D V <> 0.
Proof with Geometry.
intros.

*****
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (eq (S A U V) F0)
H : inter_ll Y P Q U V
A,C,D,U,V,P,Q,Y : Point
*****
not (eq (S4 C U D V) F0)
+++++
unfold not;intro.
-----
Lemma non_zero_denom_inter_ll_1_length_ratio : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V <> 0 -> parallel A Y C D -> C <> D -> S4 C U D V <> 0.
Proof with Geometry.
intros.
unfold not;intro.

*****
H3 : eq (S4 C U D V) F0
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (eq (S A U V) F0)
H : inter_ll Y P Q U V
A,C,D,U,V,P,Q,Y : Point
*****
False
+++++
assert (parallel C D U V)...
-----
Lemma non_zero_denom_inter_ll_1_length_ratio : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V <> 0 -> parallel A Y C D -> C <> D -> S4 C U D V <> 0.
Proof with Geometry.
intros.
unfold not;intro.
assert (parallel C D U V)...

*****
H4 : parallel C D U V
H3 : eq (S4 C U D V) F0
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (eq (S A U V) F0)
H : inter_ll Y P Q U V
A,C,D,U,V,P,Q,Y : Point
*****
False
+++++
assert (parallel A Y U V).
-----
Lemma non_zero_denom_inter_ll_1_length_ratio : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V <> 0 -> parallel A Y C D -> C <> D -> S4 C U D V <> 0.
Proof with Geometry.
intros.
unfold not;intro.
assert (parallel C D U V)...
assert (parallel A Y U V).

*****
H4 : parallel C D U V
H3 : eq (S4 C U D V) F0
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (eq (S A U V) F0)
H : inter_ll Y P Q U V
A,C,D,U,V,P,Q,Y : Point
*****
parallel A Y U V
+++++
eapply parallel_transitivity;eauto.
-----
Lemma non_zero_denom_inter_ll_1_length_ratio : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V <> 0 -> parallel A Y C D -> C <> D -> S4 C U D V <> 0.
Proof with Geometry.
intros.
unfold not;intro.
assert (parallel C D U V)...
assert (parallel A Y U V).
eapply parallel_transitivity;eauto.

*****
H5 : parallel A Y U V
H4 : parallel C D U V
H3 : eq (S4 C U D V) F0
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (eq (S A U V) F0)
H : inter_ll Y P Q U V
A,C,D,U,V,P,Q,Y : Point
*****
False
+++++
unfold inter_ll in *.
-----
Lemma non_zero_denom_inter_ll_1_length_ratio : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V <> 0 -> parallel A Y C D -> C <> D -> S4 C U D V <> 0.
Proof with Geometry.
intros.
unfold not;intro.
assert (parallel C D U V)...
assert (parallel A Y U V).
eapply parallel_transitivity;eauto.
unfold inter_ll in *.

*****
H5 : parallel A Y U V
H4 : parallel C D U V
H3 : eq (S4 C U D V) F0
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (eq (S A U V) F0)
H : and (Col Y P Q) (and (Col Y U V) (not (parallel P Q U V)))
A,C,D,U,V,P,Q,Y : Point
*****
False
+++++
DecompAndAll.
-----
Lemma non_zero_denom_inter_ll_1_length_ratio : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V <> 0 -> parallel A Y C D -> C <> D -> S4 C U D V <> 0.
Proof with Geometry.
intros.
unfold not;intro.
assert (parallel C D U V)...
assert (parallel A Y U V).
eapply parallel_transitivity;eauto.
unfold inter_ll in *.
DecompAndAll.

*****
H9 : not (parallel P Q U V)
H8 : Col Y U V
H6 : Col Y P Q
H5 : parallel A Y U V
H4 : parallel C D U V
H3 : eq (S4 C U D V) F0
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (eq (S A U V) F0)
A,C,D,U,V,P,Q,Y : Point
*****
False
+++++
assert (Col A U V).
-----
Lemma non_zero_denom_inter_ll_1_length_ratio : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V <> 0 -> parallel A Y C D -> C <> D -> S4 C U D V <> 0.
Proof with Geometry.
intros.
unfold not;intro.
assert (parallel C D U V)...
assert (parallel A Y U V).
eapply parallel_transitivity;eauto.
unfold inter_ll in *.
DecompAndAll.
assert (Col A U V).

*****
H9 : not (parallel P Q U V)
H8 : Col Y U V
H6 : Col Y P Q
H5 : parallel A Y U V
H4 : parallel C D U V
H3 : eq (S4 C U D V) F0
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (eq (S A U V) F0)
A,C,D,U,V,P,Q,Y : Point
*****
Col A U V
+++++
eapply par_col_col_3.
-----
Lemma non_zero_denom_inter_ll_1_length_ratio : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V <> 0 -> parallel A Y C D -> C <> D -> S4 C U D V <> 0.
Proof with Geometry.
intros.
unfold not;intro.
assert (parallel C D U V)...
assert (parallel A Y U V).
eapply parallel_transitivity;eauto.
unfold inter_ll in *.
DecompAndAll.
assert (Col A U V).
eapply par_col_col_3.

*****
H9 : not (parallel P Q U V)
H8 : Col Y U V
H6 : Col Y P Q
H5 : parallel A Y U V
H4 : parallel C D U V
H3 : eq (S4 C U D V) F0
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (eq (S A U V) F0)
A,C,D,U,V,P,Q,Y : Point
*****
parallel ?A A U V
+++++
2:apply H8.
-----
Lemma non_zero_denom_inter_ll_1_length_ratio : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V <> 0 -> parallel A Y C D -> C <> D -> S4 C U D V <> 0.
Proof with Geometry.
intros.
unfold not;intro.
assert (parallel C D U V)...
assert (parallel A Y U V).
eapply parallel_transitivity;eauto.
unfold inter_ll in *.
DecompAndAll.
assert (Col A U V).
eapply par_col_col_3.
2:apply H8.

*****
H9 : not (parallel P Q U V)
H8 : Col Y U V
H6 : Col Y P Q
H5 : parallel A Y U V
H4 : parallel C D U V
H3 : eq (S4 C U D V) F0
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (eq (S A U V) F0)
A,C,D,U,V,P,Q,Y : Point
*****
parallel Y A U V
+++++
Geometry.
-----
Lemma non_zero_denom_inter_ll_1_length_ratio : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V <> 0 -> parallel A Y C D -> C <> D -> S4 C U D V <> 0.
Proof with Geometry.
intros.
unfold not;intro.
assert (parallel C D U V)...
assert (parallel A Y U V).
eapply parallel_transitivity;eauto.
unfold inter_ll in *.
DecompAndAll.
assert (Col A U V).
eapply par_col_col_3.
2:apply H8.
Geometry.

*****
H : Col A U V
H9 : not (parallel P Q U V)
H8 : Col Y U V
H6 : Col Y P Q
H5 : parallel A Y U V
H4 : parallel C D U V
H3 : eq (S4 C U D V) F0
H2 : not (eq C D)
H1 : parallel A Y C D
H0 : not (eq (S A U V) F0)
A,C,D,U,V,P,Q,Y : Point
*****
False
+++++
intuition.
-----
Lemma non_zero_denom_inter_ll_1_length_ratio : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V <> 0 -> parallel A Y C D -> C <> D -> S4 C U D V <> 0.
Proof with Geometry.
intros.
unfold not;intro.
assert (parallel C D U V)...
assert (parallel A Y U V).
eapply parallel_transitivity;eauto.
unfold inter_ll in *.
DecompAndAll.
assert (Col A U V).
eapply par_col_col_3.
2:apply H8.
Geometry.
intuition.

*****

*****

+++++
Qed.
-----
Lemma elim_length_ratio_inter_ll_1 :\n    forall A C D U V P Q Y : Point,\n    inter_ll Y P Q U V ->\n    S A U V <> 0 -> \n    C <> D -> \n    parallel A Y C D -> \n    A ** Y / C ** D = S A U V / S4 C U D V.
-----
Lemma elim_length_ratio_inter_ll_1 : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V <> 0 -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S A U V / S4 C U D V.

*****

*****
forall (A C D U V P Q Y : Point) (_ : inter_ll Y P Q U V) (_ : not (eq (S A U V) F0)) (_ : not (eq C D)) (_ : parallel A Y C D), eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (S A U V) (S4 C U D V))
+++++
Proof.
-----
Lemma elim_length_ratio_inter_ll_1 : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V <> 0 -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S A U V / S4 C U D V.
Proof.

*****

*****
forall (A C D U V P Q Y : Point) (_ : inter_ll Y P Q U V) (_ : not (eq (S A U V) F0)) (_ : not (eq C D)) (_ : parallel A Y C D), eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (S A U V) (S4 C U D V))
+++++
intros.
-----
Lemma elim_length_ratio_inter_ll_1 : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V <> 0 -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S A U V / S4 C U D V.
Proof.
intros.

*****
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (eq (S A U V) F0)
H : inter_ll Y P Q U V
A,C,D,U,V,P,Q,Y : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (S A U V) (S4 C U D V))
+++++
unfold inter_ll in *.
-----
Lemma elim_length_ratio_inter_ll_1 : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V <> 0 -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S A U V / S4 C U D V.
Proof.
intros.
unfold inter_ll in *.

*****
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (eq (S A U V) F0)
H : and (Col Y P Q) (and (Col Y U V) (not (parallel P Q U V)))
A,C,D,U,V,P,Q,Y : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (S A U V) (S4 C U D V))
+++++
DecompAndAll.
-----
Lemma elim_length_ratio_inter_ll_1 : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V <> 0 -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S A U V / S4 C U D V.
Proof.
intros.
unfold inter_ll in *.
DecompAndAll.

*****
H6 : not (parallel P Q U V)
H5 : Col Y U V
H3 : Col Y P Q
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (eq (S A U V) F0)
A,C,D,U,V,P,Q,Y : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (S A U V) (S4 C U D V))
+++++
apply (elim_length_ratio_on_line_2 A C D U V Y).
-----
Lemma elim_length_ratio_inter_ll_1 : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V <> 0 -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S A U V / S4 C U D V.
Proof.
intros.
unfold inter_ll in *.
DecompAndAll.
apply (elim_length_ratio_on_line_2 A C D U V Y).

*****
H6 : not (parallel P Q U V)
H5 : Col Y U V
H3 : Col Y P Q
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (eq (S A U V) F0)
A,C,D,U,V,P,Q,Y : Point
*****
on_line Y U V
+++++
Geometry.
-----
Lemma elim_length_ratio_inter_ll_1 : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V <> 0 -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S A U V / S4 C U D V.
Proof.
intros.
unfold inter_ll in *.
DecompAndAll.
apply (elim_length_ratio_on_line_2 A C D U V Y).
Geometry.

*****
H6 : not (parallel P Q U V)
H5 : Col Y U V
H3 : Col Y P Q
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (eq (S A U V) F0)
A,C,D,U,V,P,Q,Y : Point
*****
on_line Y U V
+++++
unfold on_line.
-----
Lemma elim_length_ratio_inter_ll_1 : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V <> 0 -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S A U V / S4 C U D V.
Proof.
intros.
unfold inter_ll in *.
DecompAndAll.
apply (elim_length_ratio_on_line_2 A C D U V Y).
Geometry.
unfold on_line.

*****
H6 : not (parallel P Q U V)
H5 : Col Y U V
H3 : Col Y P Q
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (eq (S A U V) F0)
A,C,D,U,V,P,Q,Y : Point
*****
and (Col Y U V) (not (eq U V))
+++++
split.
-----
Lemma elim_length_ratio_inter_ll_1 : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V <> 0 -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S A U V / S4 C U D V.
Proof.
intros.
unfold inter_ll in *.
DecompAndAll.
apply (elim_length_ratio_on_line_2 A C D U V Y).
Geometry.
unfold on_line.
split.

*****
H6 : not (parallel P Q U V)
H5 : Col Y U V
H3 : Col Y P Q
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (eq (S A U V) F0)
A,C,D,U,V,P,Q,Y : Point
*****
Col Y U V
+++++
Geometry.
-----
Lemma elim_length_ratio_inter_ll_1 : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V <> 0 -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S A U V / S4 C U D V.
Proof.
intros.
unfold inter_ll in *.
DecompAndAll.
apply (elim_length_ratio_on_line_2 A C D U V Y).
Geometry.
unfold on_line.
split.

*****
H6 : not (parallel P Q U V)
H5 : Col Y U V
H3 : Col Y P Q
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (eq (S A U V) F0)
A,C,D,U,V,P,Q,Y : Point
*****
not (eq U V)
+++++
Geometry.
-----
Lemma elim_length_ratio_inter_ll_1 : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V <> 0 -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S A U V / S4 C U D V.
Proof.
intros.
unfold inter_ll in *.
DecompAndAll.
apply (elim_length_ratio_on_line_2 A C D U V Y).
Geometry.
unfold on_line.
split.
Geometry.

*****
H6 : not (parallel P Q U V)
H5 : Col Y U V
H3 : Col Y P Q
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (eq (S A U V) F0)
A,C,D,U,V,P,Q,Y : Point
*****
not (eq U V)
+++++
unfold not.
-----
Lemma elim_length_ratio_inter_ll_1 : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V <> 0 -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S A U V / S4 C U D V.
Proof.
intros.
unfold inter_ll in *.
DecompAndAll.
apply (elim_length_ratio_on_line_2 A C D U V Y).
Geometry.
unfold on_line.
split.
Geometry.
unfold not.

*****
H6 : not (parallel P Q U V)
H5 : Col Y U V
H3 : Col Y P Q
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (eq (S A U V) F0)
A,C,D,U,V,P,Q,Y : Point
*****
forall _ : eq U V, False
+++++
intro.
-----
Lemma elim_length_ratio_inter_ll_1 : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V <> 0 -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S A U V / S4 C U D V.
Proof.
intros.
unfold inter_ll in *.
DecompAndAll.
apply (elim_length_ratio_on_line_2 A C D U V Y).
Geometry.
unfold on_line.
split.
Geometry.
unfold not.
intro.

*****
H : eq U V
H6 : not (parallel P Q U V)
H5 : Col Y U V
H3 : Col Y P Q
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (eq (S A U V) F0)
A,C,D,U,V,P,Q,Y : Point
*****
False
+++++
subst U.
-----
Lemma elim_length_ratio_inter_ll_1 : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V <> 0 -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S A U V / S4 C U D V.
Proof.
intros.
unfold inter_ll in *.
DecompAndAll.
apply (elim_length_ratio_on_line_2 A C D U V Y).
Geometry.
unfold on_line.
split.
Geometry.
unfold not.
intro.
subst U.

*****
H5 : Col Y V V
H6 : not (parallel P Q V V)
H3 : Col Y P Q
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (eq (S A V V) F0)
A,C,D,V,P,Q,Y : Point
*****
False
+++++
Geometry.
-----
Lemma elim_length_ratio_inter_ll_1 : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V <> 0 -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S A U V / S4 C U D V.
Proof.
intros.
unfold inter_ll in *.
DecompAndAll.
apply (elim_length_ratio_on_line_2 A C D U V Y).

*****
H6 : not (parallel P Q U V)
H5 : Col Y U V
H3 : Col Y P Q
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (eq (S A U V) F0)
A,C,D,U,V,P,Q,Y : Point
*****
not (Col A U V)
+++++
Geometry.
-----
Lemma elim_length_ratio_inter_ll_1 : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V <> 0 -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S A U V / S4 C U D V.
Proof.
intros.
unfold inter_ll in *.
DecompAndAll.
apply (elim_length_ratio_on_line_2 A C D U V Y).

*****
H6 : not (parallel P Q U V)
H5 : Col Y U V
H3 : Col Y P Q
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (eq (S A U V) F0)
A,C,D,U,V,P,Q,Y : Point
*****
not (eq C D)
+++++
Geometry.
-----
Lemma elim_length_ratio_inter_ll_1 : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V <> 0 -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S A U V / S4 C U D V.
Proof.
intros.
unfold inter_ll in *.
DecompAndAll.
apply (elim_length_ratio_on_line_2 A C D U V Y).

*****
H6 : not (parallel P Q U V)
H5 : Col Y U V
H3 : Col Y P Q
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (eq (S A U V) F0)
A,C,D,U,V,P,Q,Y : Point
*****
parallel A Y C D
+++++
Geometry.
-----
Lemma elim_length_ratio_inter_ll_1 : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V <> 0 -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S A U V / S4 C U D V.
Proof.
intros.
unfold inter_ll in *.
DecompAndAll.
apply (elim_length_ratio_on_line_2 A C D U V Y).

*****

*****

+++++
Qed.
-----
Lemma non_zero_denom_inter_ll_2_length_ratio :\n    forall A C D U V P Q Y : Point,\n    inter_ll Y P Q U V -> \n    S A U V = 0 ->\n    C<>D ->\n    A<>Y ->\n    parallel A Y C D ->\n    S4 C P D Q <> 0.
-----
Lemma non_zero_denom_inter_ll_2_length_ratio : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C<>D -> A<>Y -> parallel A Y C D -> S4 C P D Q <> 0.

*****

*****
forall (A C D U V P Q Y : Point) (_ : inter_ll Y P Q U V) (_ : eq (S A U V) F0) (_ : not (eq C D)) (_ : not (eq A Y)) (_ : parallel A Y C D), not (eq (S4 C P D Q) F0)
+++++
Proof with Geometry.
-----
Lemma non_zero_denom_inter_ll_2_length_ratio : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C<>D -> A<>Y -> parallel A Y C D -> S4 C P D Q <> 0.
Proof with Geometry.

*****

*****
forall (A C D U V P Q Y : Point) (_ : inter_ll Y P Q U V) (_ : eq (S A U V) F0) (_ : not (eq C D)) (_ : not (eq A Y)) (_ : parallel A Y C D), not (eq (S4 C P D Q) F0)
+++++
intros.
-----
Lemma non_zero_denom_inter_ll_2_length_ratio : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C<>D -> A<>Y -> parallel A Y C D -> S4 C P D Q <> 0.
Proof with Geometry.
intros.

*****
H3 : parallel A Y C D
H2 : not (eq A Y)
H1 : not (eq C D)
H0 : eq (S A U V) F0
H : inter_ll Y P Q U V
A,C,D,U,V,P,Q,Y : Point
*****
not (eq (S4 C P D Q) F0)
+++++
unfold not;intro.
-----
Lemma non_zero_denom_inter_ll_2_length_ratio : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C<>D -> A<>Y -> parallel A Y C D -> S4 C P D Q <> 0.
Proof with Geometry.
intros.
unfold not;intro.

*****
H4 : eq (S4 C P D Q) F0
H3 : parallel A Y C D
H2 : not (eq A Y)
H1 : not (eq C D)
H0 : eq (S A U V) F0
H : inter_ll Y P Q U V
A,C,D,U,V,P,Q,Y : Point
*****
False
+++++
assert (parallel C D P Q)...
-----
Lemma non_zero_denom_inter_ll_2_length_ratio : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C<>D -> A<>Y -> parallel A Y C D -> S4 C P D Q <> 0.
Proof with Geometry.
intros.
unfold not;intro.
assert (parallel C D P Q)...

*****
H5 : parallel C D P Q
H4 : eq (S4 C P D Q) F0
H3 : parallel A Y C D
H2 : not (eq A Y)
H1 : not (eq C D)
H0 : eq (S A U V) F0
H : inter_ll Y P Q U V
A,C,D,U,V,P,Q,Y : Point
*****
False
+++++
assert (parallel A Y P Q).
-----
Lemma non_zero_denom_inter_ll_2_length_ratio : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C<>D -> A<>Y -> parallel A Y C D -> S4 C P D Q <> 0.
Proof with Geometry.
intros.
unfold not;intro.
assert (parallel C D P Q)...
assert (parallel A Y P Q).

*****
H5 : parallel C D P Q
H4 : eq (S4 C P D Q) F0
H3 : parallel A Y C D
H2 : not (eq A Y)
H1 : not (eq C D)
H0 : eq (S A U V) F0
H : inter_ll Y P Q U V
A,C,D,U,V,P,Q,Y : Point
*****
parallel A Y P Q
+++++
eapply parallel_transitivity.
-----
Lemma non_zero_denom_inter_ll_2_length_ratio : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C<>D -> A<>Y -> parallel A Y C D -> S4 C P D Q <> 0.
Proof with Geometry.
intros.
unfold not;intro.
assert (parallel C D P Q)...
assert (parallel A Y P Q).
eapply parallel_transitivity.

*****
H5 : parallel C D P Q
H4 : eq (S4 C P D Q) F0
H3 : parallel A Y C D
H2 : not (eq A Y)
H1 : not (eq C D)
H0 : eq (S A U V) F0
H : inter_ll Y P Q U V
A,C,D,U,V,P,Q,Y : Point
*****
not (eq ?C ?D)
+++++
apply H1.
-----
Lemma non_zero_denom_inter_ll_2_length_ratio : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C<>D -> A<>Y -> parallel A Y C D -> S4 C P D Q <> 0.
Proof with Geometry.
intros.
unfold not;intro.
assert (parallel C D P Q)...
assert (parallel A Y P Q).
eapply parallel_transitivity.
apply H1.

*****
H5 : parallel C D P Q
H4 : eq (S4 C P D Q) F0
H3 : parallel A Y C D
H2 : not (eq A Y)
H1 : not (eq C D)
H0 : eq (S A U V) F0
H : inter_ll Y P Q U V
A,C,D,U,V,P,Q,Y : Point
*****
parallel A Y C D
+++++
Geometry.
-----
Lemma non_zero_denom_inter_ll_2_length_ratio : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C<>D -> A<>Y -> parallel A Y C D -> S4 C P D Q <> 0.
Proof with Geometry.
intros.
unfold not;intro.
assert (parallel C D P Q)...
assert (parallel A Y P Q).
eapply parallel_transitivity.
apply H1.
Geometry.

*****
H5 : parallel C D P Q
H4 : eq (S4 C P D Q) F0
H3 : parallel A Y C D
H2 : not (eq A Y)
H1 : not (eq C D)
H0 : eq (S A U V) F0
H : inter_ll Y P Q U V
A,C,D,U,V,P,Q,Y : Point
*****
parallel C D P Q
+++++
Geometry.
-----
Lemma non_zero_denom_inter_ll_2_length_ratio : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C<>D -> A<>Y -> parallel A Y C D -> S4 C P D Q <> 0.
Proof with Geometry.
intros.
unfold not;intro.
assert (parallel C D P Q)...
assert (parallel A Y P Q).
eapply parallel_transitivity.
apply H1.
Geometry.
Geometry.

*****
H6 : parallel A Y P Q
H5 : parallel C D P Q
H4 : eq (S4 C P D Q) F0
H3 : parallel A Y C D
H2 : not (eq A Y)
H1 : not (eq C D)
H0 : eq (S A U V) F0
H : inter_ll Y P Q U V
A,C,D,U,V,P,Q,Y : Point
*****
False
+++++
unfold inter_ll in *.
-----
Lemma non_zero_denom_inter_ll_2_length_ratio : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C<>D -> A<>Y -> parallel A Y C D -> S4 C P D Q <> 0.
Proof with Geometry.
intros.
unfold not;intro.
assert (parallel C D P Q)...
assert (parallel A Y P Q).
eapply parallel_transitivity.
apply H1.
Geometry.
Geometry.
unfold inter_ll in *.

*****
H6 : parallel A Y P Q
H5 : parallel C D P Q
H4 : eq (S4 C P D Q) F0
H3 : parallel A Y C D
H2 : not (eq A Y)
H1 : not (eq C D)
H0 : eq (S A U V) F0
H : and (Col Y P Q) (and (Col Y U V) (not (parallel P Q U V)))
A,C,D,U,V,P,Q,Y : Point
*****
False
+++++
DecompAndAll.
-----
Lemma non_zero_denom_inter_ll_2_length_ratio : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C<>D -> A<>Y -> parallel A Y C D -> S4 C P D Q <> 0.
Proof with Geometry.
intros.
unfold not;intro.
assert (parallel C D P Q)...
assert (parallel A Y P Q).
eapply parallel_transitivity.
apply H1.
Geometry.
Geometry.
unfold inter_ll in *.
DecompAndAll.

*****
H10 : not (parallel P Q U V)
H9 : Col Y U V
H7 : Col Y P Q
H6 : parallel A Y P Q
H5 : parallel C D P Q
H4 : eq (S4 C P D Q) F0
H3 : parallel A Y C D
H2 : not (eq A Y)
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,P,Q,Y : Point
*****
False
+++++
assert (P<>Q).
-----
Lemma non_zero_denom_inter_ll_2_length_ratio : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C<>D -> A<>Y -> parallel A Y C D -> S4 C P D Q <> 0.
Proof with Geometry.
intros.
unfold not;intro.
assert (parallel C D P Q)...
assert (parallel A Y P Q).
eapply parallel_transitivity.
apply H1.
Geometry.
Geometry.
unfold inter_ll in *.
DecompAndAll.
assert (P<>Q).

*****
H10 : not (parallel P Q U V)
H9 : Col Y U V
H7 : Col Y P Q
H6 : parallel A Y P Q
H5 : parallel C D P Q
H4 : eq (S4 C P D Q) F0
H3 : parallel A Y C D
H2 : not (eq A Y)
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,P,Q,Y : Point
*****
not (eq P Q)
+++++
unfold not;intro;subst P.
-----
Lemma non_zero_denom_inter_ll_2_length_ratio : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C<>D -> A<>Y -> parallel A Y C D -> S4 C P D Q <> 0.
Proof with Geometry.
intros.
unfold not;intro.
assert (parallel C D P Q)...
assert (parallel A Y P Q).
eapply parallel_transitivity.
apply H1.
Geometry.
Geometry.
unfold inter_ll in *.
DecompAndAll.
assert (P<>Q).
unfold not;intro;subst P.

*****
H10 : not (parallel Q Q U V)
H9 : Col Y U V
H4 : eq (S4 C Q D Q) F0
H5 : parallel C D Q Q
H6 : parallel A Y Q Q
H7 : Col Y Q Q
H3 : parallel A Y C D
H2 : not (eq A Y)
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,Q,Y : Point
*****
False
+++++
intuition.
-----
Lemma non_zero_denom_inter_ll_2_length_ratio : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C<>D -> A<>Y -> parallel A Y C D -> S4 C P D Q <> 0.
Proof with Geometry.
intros.
unfold not;intro.
assert (parallel C D P Q)...
assert (parallel A Y P Q).
eapply parallel_transitivity.
apply H1.
Geometry.
Geometry.
unfold inter_ll in *.
DecompAndAll.
assert (P<>Q).
unfold not;intro;subst P.
intuition.

*****
H : not (eq P Q)
H10 : not (parallel P Q U V)
H9 : Col Y U V
H7 : Col Y P Q
H6 : parallel A Y P Q
H5 : parallel C D P Q
H4 : eq (S4 C P D Q) F0
H3 : parallel A Y C D
H2 : not (eq A Y)
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,P,Q,Y : Point
*****
False
+++++
assert (U<>V).
-----
Lemma non_zero_denom_inter_ll_2_length_ratio : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C<>D -> A<>Y -> parallel A Y C D -> S4 C P D Q <> 0.
Proof with Geometry.
intros.
unfold not;intro.
assert (parallel C D P Q)...
assert (parallel A Y P Q).
eapply parallel_transitivity.
apply H1.
Geometry.
Geometry.
unfold inter_ll in *.
DecompAndAll.
assert (P<>Q).
unfold not;intro;subst P.
intuition.
assert (U<>V).

*****
H : not (eq P Q)
H10 : not (parallel P Q U V)
H9 : Col Y U V
H7 : Col Y P Q
H6 : parallel A Y P Q
H5 : parallel C D P Q
H4 : eq (S4 C P D Q) F0
H3 : parallel A Y C D
H2 : not (eq A Y)
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,P,Q,Y : Point
*****
not (eq U V)
+++++
unfold not;intro;subst U.
-----
Lemma non_zero_denom_inter_ll_2_length_ratio : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C<>D -> A<>Y -> parallel A Y C D -> S4 C P D Q <> 0.
Proof with Geometry.
intros.
unfold not;intro.
assert (parallel C D P Q)...
assert (parallel A Y P Q).
eapply parallel_transitivity.
apply H1.
Geometry.
Geometry.
unfold inter_ll in *.
DecompAndAll.
assert (P<>Q).
unfold not;intro;subst P.
intuition.
assert (U<>V).
unfold not;intro;subst U.

*****
H : not (eq P Q)
H9 : Col Y V V
H10 : not (parallel P Q V V)
H7 : Col Y P Q
H6 : parallel A Y P Q
H5 : parallel C D P Q
H4 : eq (S4 C P D Q) F0
H3 : parallel A Y C D
H2 : not (eq A Y)
H1 : not (eq C D)
H0 : eq (S A V V) F0
A,C,D,V,P,Q,Y : Point
*****
False
+++++
intuition.
-----
Lemma non_zero_denom_inter_ll_2_length_ratio : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C<>D -> A<>Y -> parallel A Y C D -> S4 C P D Q <> 0.
Proof with Geometry.
intros.
unfold not;intro.
assert (parallel C D P Q)...
assert (parallel A Y P Q).
eapply parallel_transitivity.
apply H1.
Geometry.
Geometry.
unfold inter_ll in *.
DecompAndAll.
assert (P<>Q).
unfold not;intro;subst P.
intuition.
assert (U<>V).
unfold not;intro;subst U.
intuition.

*****
H8 : not (eq U V)
H : not (eq P Q)
H10 : not (parallel P Q U V)
H9 : Col Y U V
H7 : Col Y P Q
H6 : parallel A Y P Q
H5 : parallel C D P Q
H4 : eq (S4 C P D Q) F0
H3 : parallel A Y C D
H2 : not (eq A Y)
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,P,Q,Y : Point
*****
False
+++++
assert (Col A P Q).
-----
Lemma non_zero_denom_inter_ll_2_length_ratio : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C<>D -> A<>Y -> parallel A Y C D -> S4 C P D Q <> 0.
Proof with Geometry.
intros.
unfold not;intro.
assert (parallel C D P Q)...
assert (parallel A Y P Q).
eapply parallel_transitivity.
apply H1.
Geometry.
Geometry.
unfold inter_ll in *.
DecompAndAll.
assert (P<>Q).
unfold not;intro;subst P.
intuition.
assert (U<>V).
unfold not;intro;subst U.
intuition.
assert (Col A P Q).

*****
H8 : not (eq U V)
H : not (eq P Q)
H10 : not (parallel P Q U V)
H9 : Col Y U V
H7 : Col Y P Q
H6 : parallel A Y P Q
H5 : parallel C D P Q
H4 : eq (S4 C P D Q) F0
H3 : parallel A Y C D
H2 : not (eq A Y)
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,P,Q,Y : Point
*****
Col A P Q
+++++
eapply par_col_col_3.
-----
Lemma non_zero_denom_inter_ll_2_length_ratio : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C<>D -> A<>Y -> parallel A Y C D -> S4 C P D Q <> 0.
Proof with Geometry.
intros.
unfold not;intro.
assert (parallel C D P Q)...
assert (parallel A Y P Q).
eapply parallel_transitivity.
apply H1.
Geometry.
Geometry.
unfold inter_ll in *.
DecompAndAll.
assert (P<>Q).
unfold not;intro;subst P.
intuition.
assert (U<>V).
unfold not;intro;subst U.
intuition.
assert (Col A P Q).
eapply par_col_col_3.

*****
H8 : not (eq U V)
H : not (eq P Q)
H10 : not (parallel P Q U V)
H9 : Col Y U V
H7 : Col Y P Q
H6 : parallel A Y P Q
H5 : parallel C D P Q
H4 : eq (S4 C P D Q) F0
H3 : parallel A Y C D
H2 : not (eq A Y)
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,P,Q,Y : Point
*****
parallel ?A A P Q
+++++
2:apply H7.
-----
Lemma non_zero_denom_inter_ll_2_length_ratio : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C<>D -> A<>Y -> parallel A Y C D -> S4 C P D Q <> 0.
Proof with Geometry.
intros.
unfold not;intro.
assert (parallel C D P Q)...
assert (parallel A Y P Q).
eapply parallel_transitivity.
apply H1.
Geometry.
Geometry.
unfold inter_ll in *.
DecompAndAll.
assert (P<>Q).
unfold not;intro;subst P.
intuition.
assert (U<>V).
unfold not;intro;subst U.
intuition.
assert (Col A P Q).
eapply par_col_col_3.
2:apply H7.

*****
H8 : not (eq U V)
H : not (eq P Q)
H10 : not (parallel P Q U V)
H9 : Col Y U V
H7 : Col Y P Q
H6 : parallel A Y P Q
H5 : parallel C D P Q
H4 : eq (S4 C P D Q) F0
H3 : parallel A Y C D
H2 : not (eq A Y)
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,P,Q,Y : Point
*****
parallel Y A P Q
+++++
Geometry.
-----
Lemma non_zero_denom_inter_ll_2_length_ratio : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C<>D -> A<>Y -> parallel A Y C D -> S4 C P D Q <> 0.
Proof with Geometry.
intros.
unfold not;intro.
assert (parallel C D P Q)...
assert (parallel A Y P Q).
eapply parallel_transitivity.
apply H1.
Geometry.
Geometry.
unfold inter_ll in *.
DecompAndAll.
assert (P<>Q).
unfold not;intro;subst P.
intuition.
assert (U<>V).
unfold not;intro;subst U.
intuition.
assert (Col A P Q).
eapply par_col_col_3.
2:apply H7.
Geometry.

*****
H11 : Col A P Q
H8 : not (eq U V)
H : not (eq P Q)
H10 : not (parallel P Q U V)
H9 : Col Y U V
H7 : Col Y P Q
H6 : parallel A Y P Q
H5 : parallel C D P Q
H4 : eq (S4 C P D Q) F0
H3 : parallel A Y C D
H2 : not (eq A Y)
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,P,Q,Y : Point
*****
False
+++++
assert (Col U A Y).
-----
Lemma non_zero_denom_inter_ll_2_length_ratio : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C<>D -> A<>Y -> parallel A Y C D -> S4 C P D Q <> 0.
Proof with Geometry.
intros.
unfold not;intro.
assert (parallel C D P Q)...
assert (parallel A Y P Q).
eapply parallel_transitivity.
apply H1.
Geometry.
Geometry.
unfold inter_ll in *.
DecompAndAll.
assert (P<>Q).
unfold not;intro;subst P.
intuition.
assert (U<>V).
unfold not;intro;subst U.
intuition.
assert (Col A P Q).
eapply par_col_col_3.
2:apply H7.
Geometry.
assert (Col U A Y).

*****
H11 : Col A P Q
H8 : not (eq U V)
H : not (eq P Q)
H10 : not (parallel P Q U V)
H9 : Col Y U V
H7 : Col Y P Q
H6 : parallel A Y P Q
H5 : parallel C D P Q
H4 : eq (S4 C P D Q) F0
H3 : parallel A Y C D
H2 : not (eq A Y)
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,P,Q,Y : Point
*****
Col U A Y
+++++
eapply col_trans_1 with (B:=V)...
-----
Lemma non_zero_denom_inter_ll_2_length_ratio : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C<>D -> A<>Y -> parallel A Y C D -> S4 C P D Q <> 0.
Proof with Geometry.
intros.
unfold not;intro.
assert (parallel C D P Q)...
assert (parallel A Y P Q).
eapply parallel_transitivity.
apply H1.
Geometry.
Geometry.
unfold inter_ll in *.
DecompAndAll.
assert (P<>Q).
unfold not;intro;subst P.
intuition.
assert (U<>V).
unfold not;intro;subst U.
intuition.
assert (Col A P Q).
eapply par_col_col_3.
2:apply H7.
Geometry.
assert (Col U A Y).
eapply col_trans_1 with (B:=V)...

*****
H12 : Col U A Y
H11 : Col A P Q
H8 : not (eq U V)
H : not (eq P Q)
H10 : not (parallel P Q U V)
H9 : Col Y U V
H7 : Col Y P Q
H6 : parallel A Y P Q
H5 : parallel C D P Q
H4 : eq (S4 C P D Q) F0
H3 : parallel A Y C D
H2 : not (eq A Y)
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,P,Q,Y : Point
*****
False
+++++
assert (parallel P Q A U).
-----
Lemma non_zero_denom_inter_ll_2_length_ratio : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C<>D -> A<>Y -> parallel A Y C D -> S4 C P D Q <> 0.
Proof with Geometry.
intros.
unfold not;intro.
assert (parallel C D P Q)...
assert (parallel A Y P Q).
eapply parallel_transitivity.
apply H1.
Geometry.
Geometry.
unfold inter_ll in *.
DecompAndAll.
assert (P<>Q).
unfold not;intro;subst P.
intuition.
assert (U<>V).
unfold not;intro;subst U.
intuition.
assert (Col A P Q).
eapply par_col_col_3.
2:apply H7.
Geometry.
assert (Col U A Y).
eapply col_trans_1 with (B:=V)...
assert (parallel P Q A U).

*****
H12 : Col U A Y
H11 : Col A P Q
H8 : not (eq U V)
H : not (eq P Q)
H10 : not (parallel P Q U V)
H9 : Col Y U V
H7 : Col Y P Q
H6 : parallel A Y P Q
H5 : parallel C D P Q
H4 : eq (S4 C P D Q) F0
H3 : parallel A Y C D
H2 : not (eq A Y)
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,P,Q,Y : Point
*****
parallel P Q A U
+++++
eapply col_par_par.
-----
Lemma non_zero_denom_inter_ll_2_length_ratio : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C<>D -> A<>Y -> parallel A Y C D -> S4 C P D Q <> 0.
Proof with Geometry.
intros.
unfold not;intro.
assert (parallel C D P Q)...
assert (parallel A Y P Q).
eapply parallel_transitivity.
apply H1.
Geometry.
Geometry.
unfold inter_ll in *.
DecompAndAll.
assert (P<>Q).
unfold not;intro;subst P.
intuition.
assert (U<>V).
unfold not;intro;subst U.
intuition.
assert (Col A P Q).
eapply par_col_col_3.
2:apply H7.
Geometry.
assert (Col U A Y).
eapply col_trans_1 with (B:=V)...
assert (parallel P Q A U).
eapply col_par_par.

*****
H12 : Col U A Y
H11 : Col A P Q
H8 : not (eq U V)
H : not (eq P Q)
H10 : not (parallel P Q U V)
H9 : Col Y U V
H7 : Col Y P Q
H6 : parallel A Y P Q
H5 : parallel C D P Q
H4 : eq (S4 C P D Q) F0
H3 : parallel A Y C D
H2 : not (eq A Y)
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,P,Q,Y : Point
*****
not (eq A ?D)
+++++
apply H2.
-----
Lemma non_zero_denom_inter_ll_2_length_ratio : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C<>D -> A<>Y -> parallel A Y C D -> S4 C P D Q <> 0.
Proof with Geometry.
intros.
unfold not;intro.
assert (parallel C D P Q)...
assert (parallel A Y P Q).
eapply parallel_transitivity.
apply H1.
Geometry.
Geometry.
unfold inter_ll in *.
DecompAndAll.
assert (P<>Q).
unfold not;intro;subst P.
intuition.
assert (U<>V).
unfold not;intro;subst U.
intuition.
assert (Col A P Q).
eapply par_col_col_3.
2:apply H7.
Geometry.
assert (Col U A Y).
eapply col_trans_1 with (B:=V)...
assert (parallel P Q A U).
eapply col_par_par.
apply H2.

*****
H12 : Col U A Y
H11 : Col A P Q
H8 : not (eq U V)
H : not (eq P Q)
H10 : not (parallel P Q U V)
H9 : Col Y U V
H7 : Col Y P Q
H6 : parallel A Y P Q
H5 : parallel C D P Q
H4 : eq (S4 C P D Q) F0
H3 : parallel A Y C D
H2 : not (eq A Y)
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,P,Q,Y : Point
*****
parallel P Q A Y
+++++
Geometry.
-----
Lemma non_zero_denom_inter_ll_2_length_ratio : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C<>D -> A<>Y -> parallel A Y C D -> S4 C P D Q <> 0.
Proof with Geometry.
intros.
unfold not;intro.
assert (parallel C D P Q)...
assert (parallel A Y P Q).
eapply parallel_transitivity.
apply H1.
Geometry.
Geometry.
unfold inter_ll in *.
DecompAndAll.
assert (P<>Q).
unfold not;intro;subst P.
intuition.
assert (U<>V).
unfold not;intro;subst U.
intuition.
assert (Col A P Q).
eapply par_col_col_3.
2:apply H7.
Geometry.
assert (Col U A Y).
eapply col_trans_1 with (B:=V)...
assert (parallel P Q A U).
eapply col_par_par.
apply H2.
Geometry.

*****
H12 : Col U A Y
H11 : Col A P Q
H8 : not (eq U V)
H : not (eq P Q)
H10 : not (parallel P Q U V)
H9 : Col Y U V
H7 : Col Y P Q
H6 : parallel A Y P Q
H5 : parallel C D P Q
H4 : eq (S4 C P D Q) F0
H3 : parallel A Y C D
H2 : not (eq A Y)
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,P,Q,Y : Point
*****
Col A Y U
+++++
Geometry.
-----
Lemma non_zero_denom_inter_ll_2_length_ratio : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C<>D -> A<>Y -> parallel A Y C D -> S4 C P D Q <> 0.
Proof with Geometry.
intros.
unfold not;intro.
assert (parallel C D P Q)...
assert (parallel A Y P Q).
eapply parallel_transitivity.
apply H1.
Geometry.
Geometry.
unfold inter_ll in *.
DecompAndAll.
assert (P<>Q).
unfold not;intro;subst P.
intuition.
assert (U<>V).
unfold not;intro;subst U.
intuition.
assert (Col A P Q).
eapply par_col_col_3.
2:apply H7.
Geometry.
assert (Col U A Y).
eapply col_trans_1 with (B:=V)...
assert (parallel P Q A U).
eapply col_par_par.
apply H2.
Geometry.
Geometry.

*****
H13 : parallel P Q A U
H12 : Col U A Y
H11 : Col A P Q
H8 : not (eq U V)
H : not (eq P Q)
H10 : not (parallel P Q U V)
H9 : Col Y U V
H7 : Col Y P Q
H6 : parallel A Y P Q
H5 : parallel C D P Q
H4 : eq (S4 C P D Q) F0
H3 : parallel A Y C D
H2 : not (eq A Y)
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,P,Q,Y : Point
*****
False
+++++
assert (U<>A).
-----
Lemma non_zero_denom_inter_ll_2_length_ratio : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C<>D -> A<>Y -> parallel A Y C D -> S4 C P D Q <> 0.
Proof with Geometry.
intros.
unfold not;intro.
assert (parallel C D P Q)...
assert (parallel A Y P Q).
eapply parallel_transitivity.
apply H1.
Geometry.
Geometry.
unfold inter_ll in *.
DecompAndAll.
assert (P<>Q).
unfold not;intro;subst P.
intuition.
assert (U<>V).
unfold not;intro;subst U.
intuition.
assert (Col A P Q).
eapply par_col_col_3.
2:apply H7.
Geometry.
assert (Col U A Y).
eapply col_trans_1 with (B:=V)...
assert (parallel P Q A U).
eapply col_par_par.
apply H2.
Geometry.
Geometry.
assert (U<>A).

*****
H13 : parallel P Q A U
H12 : Col U A Y
H11 : Col A P Q
H8 : not (eq U V)
H : not (eq P Q)
H10 : not (parallel P Q U V)
H9 : Col Y U V
H7 : Col Y P Q
H6 : parallel A Y P Q
H5 : parallel C D P Q
H4 : eq (S4 C P D Q) F0
H3 : parallel A Y C D
H2 : not (eq A Y)
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,P,Q,Y : Point
*****
not (eq U A)
+++++
unfold not;intro.
-----
Lemma non_zero_denom_inter_ll_2_length_ratio : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C<>D -> A<>Y -> parallel A Y C D -> S4 C P D Q <> 0.
Proof with Geometry.
intros.
unfold not;intro.
assert (parallel C D P Q)...
assert (parallel A Y P Q).
eapply parallel_transitivity.
apply H1.
Geometry.
Geometry.
unfold inter_ll in *.
DecompAndAll.
assert (P<>Q).
unfold not;intro;subst P.
intuition.
assert (U<>V).
unfold not;intro;subst U.
intuition.
assert (Col A P Q).
eapply par_col_col_3.
2:apply H7.
Geometry.
assert (Col U A Y).
eapply col_trans_1 with (B:=V)...
assert (parallel P Q A U).
eapply col_par_par.
apply H2.
Geometry.
Geometry.
assert (U<>A).
unfold not;intro.

*****
H14 : eq U A
H13 : parallel P Q A U
H12 : Col U A Y
H11 : Col A P Q
H8 : not (eq U V)
H : not (eq P Q)
H10 : not (parallel P Q U V)
H9 : Col Y U V
H7 : Col Y P Q
H6 : parallel A Y P Q
H5 : parallel C D P Q
H4 : eq (S4 C P D Q) F0
H3 : parallel A Y C D
H2 : not (eq A Y)
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,P,Q,Y : Point
*****
False
+++++
subst U.
-----
Lemma non_zero_denom_inter_ll_2_length_ratio : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C<>D -> A<>Y -> parallel A Y C D -> S4 C P D Q <> 0.
Proof with Geometry.
intros.
unfold not;intro.
assert (parallel C D P Q)...
assert (parallel A Y P Q).
eapply parallel_transitivity.
apply H1.
Geometry.
Geometry.
unfold inter_ll in *.
DecompAndAll.
assert (P<>Q).
unfold not;intro;subst P.
intuition.
assert (U<>V).
unfold not;intro;subst U.
intuition.
assert (Col A P Q).
eapply par_col_col_3.
2:apply H7.
Geometry.
assert (Col U A Y).
eapply col_trans_1 with (B:=V)...
assert (parallel P Q A U).
eapply col_par_par.
apply H2.
Geometry.
Geometry.
assert (U<>A).
unfold not;intro.
subst U.

*****
H12 : Col A A Y
H13 : parallel P Q A A
H11 : Col A P Q
H8 : not (eq A V)
H : not (eq P Q)
H9 : Col Y A V
H10 : not (parallel P Q A V)
H7 : Col Y P Q
H6 : parallel A Y P Q
H5 : parallel C D P Q
H4 : eq (S4 C P D Q) F0
H3 : parallel A Y C D
H2 : not (eq A Y)
H1 : not (eq C D)
H0 : eq (S A A V) F0
A,C,D,V,P,Q,Y : Point
*****
False
+++++
assert (parallel P Q A V).
-----
Lemma non_zero_denom_inter_ll_2_length_ratio : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C<>D -> A<>Y -> parallel A Y C D -> S4 C P D Q <> 0.
Proof with Geometry.
intros.
unfold not;intro.
assert (parallel C D P Q)...
assert (parallel A Y P Q).
eapply parallel_transitivity.
apply H1.
Geometry.
Geometry.
unfold inter_ll in *.
DecompAndAll.
assert (P<>Q).
unfold not;intro;subst P.
intuition.
assert (U<>V).
unfold not;intro;subst U.
intuition.
assert (Col A P Q).
eapply par_col_col_3.
2:apply H7.
Geometry.
assert (Col U A Y).
eapply col_trans_1 with (B:=V)...
assert (parallel P Q A U).
eapply col_par_par.
apply H2.
Geometry.
Geometry.
assert (U<>A).
unfold not;intro.
subst U.
assert (parallel P Q A V).

*****
H12 : Col A A Y
H13 : parallel P Q A A
H11 : Col A P Q
H8 : not (eq A V)
H : not (eq P Q)
H9 : Col Y A V
H10 : not (parallel P Q A V)
H7 : Col Y P Q
H6 : parallel A Y P Q
H5 : parallel C D P Q
H4 : eq (S4 C P D Q) F0
H3 : parallel A Y C D
H2 : not (eq A Y)
H1 : not (eq C D)
H0 : eq (S A A V) F0
A,C,D,V,P,Q,Y : Point
*****
parallel P Q A V
+++++
eapply col_par_par.
-----
Lemma non_zero_denom_inter_ll_2_length_ratio : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C<>D -> A<>Y -> parallel A Y C D -> S4 C P D Q <> 0.
Proof with Geometry.
intros.
unfold not;intro.
assert (parallel C D P Q)...
assert (parallel A Y P Q).
eapply parallel_transitivity.
apply H1.
Geometry.
Geometry.
unfold inter_ll in *.
DecompAndAll.
assert (P<>Q).
unfold not;intro;subst P.
intuition.
assert (U<>V).
unfold not;intro;subst U.
intuition.
assert (Col A P Q).
eapply par_col_col_3.
2:apply H7.
Geometry.
assert (Col U A Y).
eapply col_trans_1 with (B:=V)...
assert (parallel P Q A U).
eapply col_par_par.
apply H2.
Geometry.
Geometry.
assert (U<>A).
unfold not;intro.
subst U.
assert (parallel P Q A V).
eapply col_par_par.

*****
H12 : Col A A Y
H13 : parallel P Q A A
H11 : Col A P Q
H8 : not (eq A V)
H : not (eq P Q)
H9 : Col Y A V
H10 : not (parallel P Q A V)
H7 : Col Y P Q
H6 : parallel A Y P Q
H5 : parallel C D P Q
H4 : eq (S4 C P D Q) F0
H3 : parallel A Y C D
H2 : not (eq A Y)
H1 : not (eq C D)
H0 : eq (S A A V) F0
A,C,D,V,P,Q,Y : Point
*****
not (eq A ?D)
+++++
apply H2.
-----
Lemma non_zero_denom_inter_ll_2_length_ratio : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C<>D -> A<>Y -> parallel A Y C D -> S4 C P D Q <> 0.
Proof with Geometry.
intros.
unfold not;intro.
assert (parallel C D P Q)...
assert (parallel A Y P Q).
eapply parallel_transitivity.
apply H1.
Geometry.
Geometry.
unfold inter_ll in *.
DecompAndAll.
assert (P<>Q).
unfold not;intro;subst P.
intuition.
assert (U<>V).
unfold not;intro;subst U.
intuition.
assert (Col A P Q).
eapply par_col_col_3.
2:apply H7.
Geometry.
assert (Col U A Y).
eapply col_trans_1 with (B:=V)...
assert (parallel P Q A U).
eapply col_par_par.
apply H2.
Geometry.
Geometry.
assert (U<>A).
unfold not;intro.
subst U.
assert (parallel P Q A V).
eapply col_par_par.
apply H2.

*****
H12 : Col A A Y
H13 : parallel P Q A A
H11 : Col A P Q
H8 : not (eq A V)
H : not (eq P Q)
H9 : Col Y A V
H10 : not (parallel P Q A V)
H7 : Col Y P Q
H6 : parallel A Y P Q
H5 : parallel C D P Q
H4 : eq (S4 C P D Q) F0
H3 : parallel A Y C D
H2 : not (eq A Y)
H1 : not (eq C D)
H0 : eq (S A A V) F0
A,C,D,V,P,Q,Y : Point
*****
parallel P Q A Y
+++++
Geometry.
-----
Lemma non_zero_denom_inter_ll_2_length_ratio : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C<>D -> A<>Y -> parallel A Y C D -> S4 C P D Q <> 0.
Proof with Geometry.
intros.
unfold not;intro.
assert (parallel C D P Q)...
assert (parallel A Y P Q).
eapply parallel_transitivity.
apply H1.
Geometry.
Geometry.
unfold inter_ll in *.
DecompAndAll.
assert (P<>Q).
unfold not;intro;subst P.
intuition.
assert (U<>V).
unfold not;intro;subst U.
intuition.
assert (Col A P Q).
eapply par_col_col_3.
2:apply H7.
Geometry.
assert (Col U A Y).
eapply col_trans_1 with (B:=V)...
assert (parallel P Q A U).
eapply col_par_par.
apply H2.
Geometry.
Geometry.
assert (U<>A).
unfold not;intro.
subst U.
assert (parallel P Q A V).
eapply col_par_par.
apply H2.
Geometry.

*****
H12 : Col A A Y
H13 : parallel P Q A A
H11 : Col A P Q
H8 : not (eq A V)
H : not (eq P Q)
H9 : Col Y A V
H10 : not (parallel P Q A V)
H7 : Col Y P Q
H6 : parallel A Y P Q
H5 : parallel C D P Q
H4 : eq (S4 C P D Q) F0
H3 : parallel A Y C D
H2 : not (eq A Y)
H1 : not (eq C D)
H0 : eq (S A A V) F0
A,C,D,V,P,Q,Y : Point
*****
Col A Y V
+++++
Geometry.
-----
Lemma non_zero_denom_inter_ll_2_length_ratio : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C<>D -> A<>Y -> parallel A Y C D -> S4 C P D Q <> 0.
Proof with Geometry.
intros.
unfold not;intro.
assert (parallel C D P Q)...
assert (parallel A Y P Q).
eapply parallel_transitivity.
apply H1.
Geometry.
Geometry.
unfold inter_ll in *.
DecompAndAll.
assert (P<>Q).
unfold not;intro;subst P.
intuition.
assert (U<>V).
unfold not;intro;subst U.
intuition.
assert (Col A P Q).
eapply par_col_col_3.
2:apply H7.
Geometry.
assert (Col U A Y).
eapply col_trans_1 with (B:=V)...
assert (parallel P Q A U).
eapply col_par_par.
apply H2.
Geometry.
Geometry.
assert (U<>A).
unfold not;intro.
subst U.
assert (parallel P Q A V).
eapply col_par_par.
apply H2.
Geometry.
Geometry.

*****
H14 : parallel P Q A V
H12 : Col A A Y
H13 : parallel P Q A A
H11 : Col A P Q
H8 : not (eq A V)
H : not (eq P Q)
H9 : Col Y A V
H10 : not (parallel P Q A V)
H7 : Col Y P Q
H6 : parallel A Y P Q
H5 : parallel C D P Q
H4 : eq (S4 C P D Q) F0
H3 : parallel A Y C D
H2 : not (eq A Y)
H1 : not (eq C D)
H0 : eq (S A A V) F0
A,C,D,V,P,Q,Y : Point
*****
False
+++++
intuition.
-----
Lemma non_zero_denom_inter_ll_2_length_ratio : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C<>D -> A<>Y -> parallel A Y C D -> S4 C P D Q <> 0.
Proof with Geometry.
intros.
unfold not;intro.
assert (parallel C D P Q)...
assert (parallel A Y P Q).
eapply parallel_transitivity.
apply H1.
Geometry.
Geometry.
unfold inter_ll in *.
DecompAndAll.
assert (P<>Q).
unfold not;intro;subst P.
intuition.
assert (U<>V).
unfold not;intro;subst U.
intuition.
assert (Col A P Q).
eapply par_col_col_3.
2:apply H7.
Geometry.
assert (Col U A Y).
eapply col_trans_1 with (B:=V)...
assert (parallel P Q A U).
eapply col_par_par.
apply H2.
Geometry.
Geometry.
assert (U<>A).
unfold not;intro.
subst U.
assert (parallel P Q A V).
eapply col_par_par.
apply H2.
Geometry.
Geometry.
intuition.

*****
H14 : not (eq U A)
H13 : parallel P Q A U
H12 : Col U A Y
H11 : Col A P Q
H8 : not (eq U V)
H : not (eq P Q)
H10 : not (parallel P Q U V)
H9 : Col Y U V
H7 : Col Y P Q
H6 : parallel A Y P Q
H5 : parallel C D P Q
H4 : eq (S4 C P D Q) F0
H3 : parallel A Y C D
H2 : not (eq A Y)
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,P,Q,Y : Point
*****
False
+++++
assert (parallel P Q U V).
-----
Lemma non_zero_denom_inter_ll_2_length_ratio : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C<>D -> A<>Y -> parallel A Y C D -> S4 C P D Q <> 0.
Proof with Geometry.
intros.
unfold not;intro.
assert (parallel C D P Q)...
assert (parallel A Y P Q).
eapply parallel_transitivity.
apply H1.
Geometry.
Geometry.
unfold inter_ll in *.
DecompAndAll.
assert (P<>Q).
unfold not;intro;subst P.
intuition.
assert (U<>V).
unfold not;intro;subst U.
intuition.
assert (Col A P Q).
eapply par_col_col_3.
2:apply H7.
Geometry.
assert (Col U A Y).
eapply col_trans_1 with (B:=V)...
assert (parallel P Q A U).
eapply col_par_par.
apply H2.
Geometry.
Geometry.
assert (U<>A).
unfold not;intro.
subst U.
assert (parallel P Q A V).
eapply col_par_par.
apply H2.
Geometry.
Geometry.
intuition.
assert (parallel P Q U V).

*****
H14 : not (eq U A)
H13 : parallel P Q A U
H12 : Col U A Y
H11 : Col A P Q
H8 : not (eq U V)
H : not (eq P Q)
H10 : not (parallel P Q U V)
H9 : Col Y U V
H7 : Col Y P Q
H6 : parallel A Y P Q
H5 : parallel C D P Q
H4 : eq (S4 C P D Q) F0
H3 : parallel A Y C D
H2 : not (eq A Y)
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,P,Q,Y : Point
*****
parallel P Q U V
+++++
eapply col_par_par.
-----
Lemma non_zero_denom_inter_ll_2_length_ratio : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C<>D -> A<>Y -> parallel A Y C D -> S4 C P D Q <> 0.
Proof with Geometry.
intros.
unfold not;intro.
assert (parallel C D P Q)...
assert (parallel A Y P Q).
eapply parallel_transitivity.
apply H1.
Geometry.
Geometry.
unfold inter_ll in *.
DecompAndAll.
assert (P<>Q).
unfold not;intro;subst P.
intuition.
assert (U<>V).
unfold not;intro;subst U.
intuition.
assert (Col A P Q).
eapply par_col_col_3.
2:apply H7.
Geometry.
assert (Col U A Y).
eapply col_trans_1 with (B:=V)...
assert (parallel P Q A U).
eapply col_par_par.
apply H2.
Geometry.
Geometry.
assert (U<>A).
unfold not;intro.
subst U.
assert (parallel P Q A V).
eapply col_par_par.
apply H2.
Geometry.
Geometry.
intuition.
assert (parallel P Q U V).
eapply col_par_par.

*****
H14 : not (eq U A)
H13 : parallel P Q A U
H12 : Col U A Y
H11 : Col A P Q
H8 : not (eq U V)
H : not (eq P Q)
H10 : not (parallel P Q U V)
H9 : Col Y U V
H7 : Col Y P Q
H6 : parallel A Y P Q
H5 : parallel C D P Q
H4 : eq (S4 C P D Q) F0
H3 : parallel A Y C D
H2 : not (eq A Y)
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,P,Q,Y : Point
*****
not (eq U ?D)
+++++
apply H14.
-----
Lemma non_zero_denom_inter_ll_2_length_ratio : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C<>D -> A<>Y -> parallel A Y C D -> S4 C P D Q <> 0.
Proof with Geometry.
intros.
unfold not;intro.
assert (parallel C D P Q)...
assert (parallel A Y P Q).
eapply parallel_transitivity.
apply H1.
Geometry.
Geometry.
unfold inter_ll in *.
DecompAndAll.
assert (P<>Q).
unfold not;intro;subst P.
intuition.
assert (U<>V).
unfold not;intro;subst U.
intuition.
assert (Col A P Q).
eapply par_col_col_3.
2:apply H7.
Geometry.
assert (Col U A Y).
eapply col_trans_1 with (B:=V)...
assert (parallel P Q A U).
eapply col_par_par.
apply H2.
Geometry.
Geometry.
assert (U<>A).
unfold not;intro.
subst U.
assert (parallel P Q A V).
eapply col_par_par.
apply H2.
Geometry.
Geometry.
intuition.
assert (parallel P Q U V).
eapply col_par_par.
apply H14.

*****
H14 : not (eq U A)
H13 : parallel P Q A U
H12 : Col U A Y
H11 : Col A P Q
H8 : not (eq U V)
H : not (eq P Q)
H10 : not (parallel P Q U V)
H9 : Col Y U V
H7 : Col Y P Q
H6 : parallel A Y P Q
H5 : parallel C D P Q
H4 : eq (S4 C P D Q) F0
H3 : parallel A Y C D
H2 : not (eq A Y)
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,P,Q,Y : Point
*****
parallel P Q U A
+++++
Geometry.
-----
Lemma non_zero_denom_inter_ll_2_length_ratio : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C<>D -> A<>Y -> parallel A Y C D -> S4 C P D Q <> 0.
Proof with Geometry.
intros.
unfold not;intro.
assert (parallel C D P Q)...
assert (parallel A Y P Q).
eapply parallel_transitivity.
apply H1.
Geometry.
Geometry.
unfold inter_ll in *.
DecompAndAll.
assert (P<>Q).
unfold not;intro;subst P.
intuition.
assert (U<>V).
unfold not;intro;subst U.
intuition.
assert (Col A P Q).
eapply par_col_col_3.
2:apply H7.
Geometry.
assert (Col U A Y).
eapply col_trans_1 with (B:=V)...
assert (parallel P Q A U).
eapply col_par_par.
apply H2.
Geometry.
Geometry.
assert (U<>A).
unfold not;intro.
subst U.
assert (parallel P Q A V).
eapply col_par_par.
apply H2.
Geometry.
Geometry.
intuition.
assert (parallel P Q U V).
eapply col_par_par.
apply H14.
Geometry.

*****
H14 : not (eq U A)
H13 : parallel P Q A U
H12 : Col U A Y
H11 : Col A P Q
H8 : not (eq U V)
H : not (eq P Q)
H10 : not (parallel P Q U V)
H9 : Col Y U V
H7 : Col Y P Q
H6 : parallel A Y P Q
H5 : parallel C D P Q
H4 : eq (S4 C P D Q) F0
H3 : parallel A Y C D
H2 : not (eq A Y)
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,P,Q,Y : Point
*****
Col U A V
+++++
Geometry.
-----
Lemma non_zero_denom_inter_ll_2_length_ratio : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C<>D -> A<>Y -> parallel A Y C D -> S4 C P D Q <> 0.
Proof with Geometry.
intros.
unfold not;intro.
assert (parallel C D P Q)...
assert (parallel A Y P Q).
eapply parallel_transitivity.
apply H1.
Geometry.
Geometry.
unfold inter_ll in *.
DecompAndAll.
assert (P<>Q).
unfold not;intro;subst P.
intuition.
assert (U<>V).
unfold not;intro;subst U.
intuition.
assert (Col A P Q).
eapply par_col_col_3.
2:apply H7.
Geometry.
assert (Col U A Y).
eapply col_trans_1 with (B:=V)...
assert (parallel P Q A U).
eapply col_par_par.
apply H2.
Geometry.
Geometry.
assert (U<>A).
unfold not;intro.
subst U.
assert (parallel P Q A V).
eapply col_par_par.
apply H2.
Geometry.
Geometry.
intuition.
assert (parallel P Q U V).
eapply col_par_par.
apply H14.
Geometry.
Geometry.

*****
H15 : parallel P Q U V
H14 : not (eq U A)
H13 : parallel P Q A U
H12 : Col U A Y
H11 : Col A P Q
H8 : not (eq U V)
H : not (eq P Q)
H10 : not (parallel P Q U V)
H9 : Col Y U V
H7 : Col Y P Q
H6 : parallel A Y P Q
H5 : parallel C D P Q
H4 : eq (S4 C P D Q) F0
H3 : parallel A Y C D
H2 : not (eq A Y)
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,P,Q,Y : Point
*****
False
+++++
intuition.
-----
Lemma non_zero_denom_inter_ll_2_length_ratio : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C<>D -> A<>Y -> parallel A Y C D -> S4 C P D Q <> 0.
Proof with Geometry.
intros.
unfold not;intro.
assert (parallel C D P Q)...
assert (parallel A Y P Q).
eapply parallel_transitivity.
apply H1.
Geometry.
Geometry.
unfold inter_ll in *.
DecompAndAll.
assert (P<>Q).
unfold not;intro;subst P.
intuition.
assert (U<>V).
unfold not;intro;subst U.
intuition.
assert (Col A P Q).
eapply par_col_col_3.
2:apply H7.
Geometry.
assert (Col U A Y).
eapply col_trans_1 with (B:=V)...
assert (parallel P Q A U).
eapply col_par_par.
apply H2.
Geometry.
Geometry.
assert (U<>A).
unfold not;intro.
subst U.
assert (parallel P Q A V).
eapply col_par_par.
apply H2.
Geometry.
Geometry.
intuition.
assert (parallel P Q U V).
eapply col_par_par.
apply H14.
Geometry.
Geometry.
intuition.

*****

*****

+++++
Qed.
-----
Lemma elim_length_ratio_inter_ll_2 :\n    forall A C D U V P Q Y : Point,\n    inter_ll Y P Q U V ->\n    S A U V = 0 ->\n    C <> D ->\n    parallel A Y C D ->\n    A<>Y ->\n    A ** Y / C ** D = S A P Q / S4 C P D Q.
-----
Lemma elim_length_ratio_inter_ll_2 : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C <> D -> parallel A Y C D -> A<>Y -> A ** Y / C ** D = S A P Q / S4 C P D Q.

*****

*****
forall (A C D U V P Q Y : Point) (_ : inter_ll Y P Q U V) (_ : eq (S A U V) F0) (_ : not (eq C D)) (_ : parallel A Y C D) (_ : not (eq A Y)), eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (S A P Q) (S4 C P D Q))
+++++
Proof.
-----
Lemma elim_length_ratio_inter_ll_2 : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C <> D -> parallel A Y C D -> A<>Y -> A ** Y / C ** D = S A P Q / S4 C P D Q.
Proof.

*****

*****
forall (A C D U V P Q Y : Point) (_ : inter_ll Y P Q U V) (_ : eq (S A U V) F0) (_ : not (eq C D)) (_ : parallel A Y C D) (_ : not (eq A Y)), eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (S A P Q) (S4 C P D Q))
+++++
intros.
-----
Lemma elim_length_ratio_inter_ll_2 : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C <> D -> parallel A Y C D -> A<>Y -> A ** Y / C ** D = S A P Q / S4 C P D Q.
Proof.
intros.

*****
H3 : not (eq A Y)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : eq (S A U V) F0
H : inter_ll Y P Q U V
A,C,D,U,V,P,Q,Y : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (S A P Q) (S4 C P D Q))
+++++
assert (S4 C P D Q <>0).
-----
Lemma elim_length_ratio_inter_ll_2 : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C <> D -> parallel A Y C D -> A<>Y -> A ** Y / C ** D = S A P Q / S4 C P D Q.
Proof.
intros.
assert (S4 C P D Q <>0).

*****
H3 : not (eq A Y)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : eq (S A U V) F0
H : inter_ll Y P Q U V
A,C,D,U,V,P,Q,Y : Point
*****
not (eq (S4 C P D Q) F0)
+++++
eapply non_zero_denom_inter_ll_2_length_ratio.
-----
Lemma elim_length_ratio_inter_ll_2 : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C <> D -> parallel A Y C D -> A<>Y -> A ** Y / C ** D = S A P Q / S4 C P D Q.
Proof.
intros.
assert (S4 C P D Q <>0).
eapply non_zero_denom_inter_ll_2_length_ratio.

*****
H3 : not (eq A Y)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : eq (S A U V) F0
H : inter_ll Y P Q U V
A,C,D,U,V,P,Q,Y : Point
*****
inter_ll ?Y P Q ?U ?V
+++++
eauto.
-----
Lemma elim_length_ratio_inter_ll_2 : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C <> D -> parallel A Y C D -> A<>Y -> A ** Y / C ** D = S A P Q / S4 C P D Q.
Proof.
intros.
assert (S4 C P D Q <>0).
eapply non_zero_denom_inter_ll_2_length_ratio.

*****
H3 : not (eq A Y)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : eq (S A U V) F0
H : inter_ll Y P Q U V
A,C,D,U,V,P,Q,Y : Point
*****
eq (S ?A U V) F0
+++++
eauto.
-----
Lemma elim_length_ratio_inter_ll_2 : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C <> D -> parallel A Y C D -> A<>Y -> A ** Y / C ** D = S A P Q / S4 C P D Q.
Proof.
intros.
assert (S4 C P D Q <>0).
eapply non_zero_denom_inter_ll_2_length_ratio.

*****
H3 : not (eq A Y)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : eq (S A U V) F0
H : inter_ll Y P Q U V
A,C,D,U,V,P,Q,Y : Point
*****
not (eq C D)
+++++
eauto.
-----
Lemma elim_length_ratio_inter_ll_2 : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C <> D -> parallel A Y C D -> A<>Y -> A ** Y / C ** D = S A P Q / S4 C P D Q.
Proof.
intros.
assert (S4 C P D Q <>0).
eapply non_zero_denom_inter_ll_2_length_ratio.

*****
H3 : not (eq A Y)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : eq (S A U V) F0
H : inter_ll Y P Q U V
A,C,D,U,V,P,Q,Y : Point
*****
not (eq A Y)
+++++
eauto.
-----
Lemma elim_length_ratio_inter_ll_2 : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C <> D -> parallel A Y C D -> A<>Y -> A ** Y / C ** D = S A P Q / S4 C P D Q.
Proof.
intros.
assert (S4 C P D Q <>0).
eapply non_zero_denom_inter_ll_2_length_ratio.

*****
H3 : not (eq A Y)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : eq (S A U V) F0
H : inter_ll Y P Q U V
A,C,D,U,V,P,Q,Y : Point
*****
parallel A Y C D
+++++
eauto.
-----
Lemma elim_length_ratio_inter_ll_2 : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C <> D -> parallel A Y C D -> A<>Y -> A ** Y / C ** D = S A P Q / S4 C P D Q.
Proof.
intros.
assert (S4 C P D Q <>0).

*****
H4 : not (eq (S4 C P D Q) F0)
H3 : not (eq A Y)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : eq (S A U V) F0
H : inter_ll Y P Q U V
A,C,D,U,V,P,Q,Y : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (S A P Q) (S4 C P D Q))
+++++
unfold inter_ll in *.
-----
Lemma elim_length_ratio_inter_ll_2 : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C <> D -> parallel A Y C D -> A<>Y -> A ** Y / C ** D = S A P Q / S4 C P D Q.
Proof.
intros.
assert (S4 C P D Q <>0).
unfold inter_ll in *.

*****
H4 : not (eq (S4 C P D Q) F0)
H3 : not (eq A Y)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : eq (S A U V) F0
H : and (Col Y P Q) (and (Col Y U V) (not (parallel P Q U V)))
A,C,D,U,V,P,Q,Y : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (S A P Q) (S4 C P D Q))
+++++
DecompAndAll.
-----
Lemma elim_length_ratio_inter_ll_2 : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C <> D -> parallel A Y C D -> A<>Y -> A ** Y / C ** D = S A P Q / S4 C P D Q.
Proof.
intros.
assert (S4 C P D Q <>0).
unfold inter_ll in *.
DecompAndAll.

*****
H8 : not (parallel P Q U V)
H7 : Col Y U V
H5 : Col Y P Q
H4 : not (eq (S4 C P D Q) F0)
H3 : not (eq A Y)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,P,Q,Y : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (S A P Q) (S4 C P D Q))
+++++
cases_equality A Y.
-----
Lemma elim_length_ratio_inter_ll_2 : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C <> D -> parallel A Y C D -> A<>Y -> A ** Y / C ** D = S A P Q / S4 C P D Q.
Proof.
intros.
assert (S4 C P D Q <>0).
unfold inter_ll in *.
DecompAndAll.
cases_equality A Y.

*****
H : eq A Y
H8 : not (parallel P Q U V)
H7 : Col Y U V
H5 : Col Y P Q
H4 : not (eq (S4 C P D Q) F0)
H3 : not (eq A Y)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,P,Q,Y : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (S A P Q) (S4 C P D Q))
+++++
subst Y.
-----
Lemma elim_length_ratio_inter_ll_2 : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C <> D -> parallel A Y C D -> A<>Y -> A ** Y / C ** D = S A P Q / S4 C P D Q.
Proof.
intros.
assert (S4 C P D Q <>0).
unfold inter_ll in *.
DecompAndAll.
cases_equality A Y.
subst Y.

*****
H8 : not (parallel P Q U V)
H5 : Col A P Q
H7 : Col A U V
H4 : not (eq (S4 C P D Q) F0)
H2 : parallel A A C D
H3 : not (eq A A)
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,P,Q : Point
*****
eq (Fdiv (DSeg A A) (DSeg C D)) (Fdiv (S A P Q) (S4 C P D Q))
+++++
rewrite H5.
-----
Lemma elim_length_ratio_inter_ll_2 : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C <> D -> parallel A Y C D -> A<>Y -> A ** Y / C ** D = S A P Q / S4 C P D Q.
Proof.
intros.
assert (S4 C P D Q <>0).
unfold inter_ll in *.
DecompAndAll.
cases_equality A Y.
subst Y.
rewrite H5.

*****
H8 : not (parallel P Q U V)
H5 : Col A P Q
H7 : Col A U V
H4 : not (eq (S4 C P D Q) F0)
H2 : parallel A A C D
H3 : not (eq A A)
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,P,Q : Point
*****
eq (Fdiv (DSeg A A) (DSeg C D)) (Fdiv F0 (S4 C P D Q))
+++++
basic_simpl.
-----
Lemma elim_length_ratio_inter_ll_2 : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C <> D -> parallel A Y C D -> A<>Y -> A ** Y / C ** D = S A P Q / S4 C P D Q.
Proof.
intros.
assert (S4 C P D Q <>0).
unfold inter_ll in *.
DecompAndAll.
cases_equality A Y.
subst Y.
rewrite H5.
basic_simpl.

*****
H8 : not (parallel P Q U V)
H5 : Col A P Q
H7 : Col A U V
H4 : not (eq (S4 C P D Q) F0)
H2 : parallel A A C D
H3 : not (eq A A)
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,P,Q : Point
*****
eq (Fdiv F0 (DSeg C D)) F0
+++++
field.
-----
Lemma elim_length_ratio_inter_ll_2 : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C <> D -> parallel A Y C D -> A<>Y -> A ** Y / C ** D = S A P Q / S4 C P D Q.
Proof.
intros.
assert (S4 C P D Q <>0).
unfold inter_ll in *.
DecompAndAll.
cases_equality A Y.
subst Y.
rewrite H5.
basic_simpl.
field.

*****
H8 : not (parallel P Q U V)
H5 : Col A P Q
H7 : Col A U V
H4 : not (eq (S4 C P D Q) F0)
H2 : parallel A A C D
H3 : not (eq A A)
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,P,Q : Point
*****
not (eq (DSeg C D) F0)
+++++
Geometry.
-----
Lemma elim_length_ratio_inter_ll_2 : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C <> D -> parallel A Y C D -> A<>Y -> A ** Y / C ** D = S A P Q / S4 C P D Q.
Proof.
intros.
assert (S4 C P D Q <>0).
unfold inter_ll in *.
DecompAndAll.
cases_equality A Y.

*****
H : not (eq A Y)
H8 : not (parallel P Q U V)
H7 : Col Y U V
H5 : Col Y P Q
H4 : not (eq (S4 C P D Q) F0)
H3 : not (eq A Y)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,P,Q,Y : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (S A P Q) (S4 C P D Q))
+++++
apply (elim_length_ratio_on_line_2 A C D).
-----
Lemma elim_length_ratio_inter_ll_2 : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C <> D -> parallel A Y C D -> A<>Y -> A ** Y / C ** D = S A P Q / S4 C P D Q.
Proof.
intros.
assert (S4 C P D Q <>0).
unfold inter_ll in *.
DecompAndAll.
cases_equality A Y.
apply (elim_length_ratio_on_line_2 A C D).

*****
H : not (eq A Y)
H8 : not (parallel P Q U V)
H7 : Col Y U V
H5 : Col Y P Q
H4 : not (eq (S4 C P D Q) F0)
H3 : not (eq A Y)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,P,Q,Y : Point
*****
on_line Y P Q
+++++
Geometry.
-----
Lemma elim_length_ratio_inter_ll_2 : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C <> D -> parallel A Y C D -> A<>Y -> A ** Y / C ** D = S A P Q / S4 C P D Q.
Proof.
intros.
assert (S4 C P D Q <>0).
unfold inter_ll in *.
DecompAndAll.
cases_equality A Y.
apply (elim_length_ratio_on_line_2 A C D).
Geometry.

*****
H : not (eq A Y)
H8 : not (parallel P Q U V)
H7 : Col Y U V
H5 : Col Y P Q
H4 : not (eq (S4 C P D Q) F0)
H3 : not (eq A Y)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,P,Q,Y : Point
*****
on_line Y P Q
+++++
unfold on_line.
-----
Lemma elim_length_ratio_inter_ll_2 : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C <> D -> parallel A Y C D -> A<>Y -> A ** Y / C ** D = S A P Q / S4 C P D Q.
Proof.
intros.
assert (S4 C P D Q <>0).
unfold inter_ll in *.
DecompAndAll.
cases_equality A Y.
apply (elim_length_ratio_on_line_2 A C D).
Geometry.
unfold on_line.

*****
H : not (eq A Y)
H8 : not (parallel P Q U V)
H7 : Col Y U V
H5 : Col Y P Q
H4 : not (eq (S4 C P D Q) F0)
H3 : not (eq A Y)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,P,Q,Y : Point
*****
and (Col Y P Q) (not (eq P Q))
+++++
split.
-----
Lemma elim_length_ratio_inter_ll_2 : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C <> D -> parallel A Y C D -> A<>Y -> A ** Y / C ** D = S A P Q / S4 C P D Q.
Proof.
intros.
assert (S4 C P D Q <>0).
unfold inter_ll in *.
DecompAndAll.
cases_equality A Y.
apply (elim_length_ratio_on_line_2 A C D).
Geometry.
unfold on_line.
split.

*****
H : not (eq A Y)
H8 : not (parallel P Q U V)
H7 : Col Y U V
H5 : Col Y P Q
H4 : not (eq (S4 C P D Q) F0)
H3 : not (eq A Y)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,P,Q,Y : Point
*****
Col Y P Q
+++++
Geometry.
-----
Lemma elim_length_ratio_inter_ll_2 : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C <> D -> parallel A Y C D -> A<>Y -> A ** Y / C ** D = S A P Q / S4 C P D Q.
Proof.
intros.
assert (S4 C P D Q <>0).
unfold inter_ll in *.
DecompAndAll.
cases_equality A Y.
apply (elim_length_ratio_on_line_2 A C D).
Geometry.
unfold on_line.
split.

*****
H : not (eq A Y)
H8 : not (parallel P Q U V)
H7 : Col Y U V
H5 : Col Y P Q
H4 : not (eq (S4 C P D Q) F0)
H3 : not (eq A Y)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,P,Q,Y : Point
*****
not (eq P Q)
+++++
Geometry.
-----
Lemma elim_length_ratio_inter_ll_2 : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C <> D -> parallel A Y C D -> A<>Y -> A ** Y / C ** D = S A P Q / S4 C P D Q.
Proof.
intros.
assert (S4 C P D Q <>0).
unfold inter_ll in *.
DecompAndAll.
cases_equality A Y.
apply (elim_length_ratio_on_line_2 A C D).
Geometry.
unfold on_line.
split.
Geometry.

*****
H : not (eq A Y)
H8 : not (parallel P Q U V)
H7 : Col Y U V
H5 : Col Y P Q
H4 : not (eq (S4 C P D Q) F0)
H3 : not (eq A Y)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,P,Q,Y : Point
*****
not (eq P Q)
+++++
unfold not.
-----
Lemma elim_length_ratio_inter_ll_2 : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C <> D -> parallel A Y C D -> A<>Y -> A ** Y / C ** D = S A P Q / S4 C P D Q.
Proof.
intros.
assert (S4 C P D Q <>0).
unfold inter_ll in *.
DecompAndAll.
cases_equality A Y.
apply (elim_length_ratio_on_line_2 A C D).
Geometry.
unfold on_line.
split.
Geometry.
unfold not.

*****
H : not (eq A Y)
H8 : not (parallel P Q U V)
H7 : Col Y U V
H5 : Col Y P Q
H4 : not (eq (S4 C P D Q) F0)
H3 : not (eq A Y)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,P,Q,Y : Point
*****
forall _ : eq P Q, False
+++++
intro.
-----
Lemma elim_length_ratio_inter_ll_2 : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C <> D -> parallel A Y C D -> A<>Y -> A ** Y / C ** D = S A P Q / S4 C P D Q.
Proof.
intros.
assert (S4 C P D Q <>0).
unfold inter_ll in *.
DecompAndAll.
cases_equality A Y.
apply (elim_length_ratio_on_line_2 A C D).
Geometry.
unfold on_line.
split.
Geometry.
unfold not.
intro.

*****
H6 : eq P Q
H : not (eq A Y)
H8 : not (parallel P Q U V)
H7 : Col Y U V
H5 : Col Y P Q
H4 : not (eq (S4 C P D Q) F0)
H3 : not (eq A Y)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,P,Q,Y : Point
*****
False
+++++
subst Q.
-----
Lemma elim_length_ratio_inter_ll_2 : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C <> D -> parallel A Y C D -> A<>Y -> A ** Y / C ** D = S A P Q / S4 C P D Q.
Proof.
intros.
assert (S4 C P D Q <>0).
unfold inter_ll in *.
DecompAndAll.
cases_equality A Y.
apply (elim_length_ratio_on_line_2 A C D).
Geometry.
unfold on_line.
split.
Geometry.
unfold not.
intro.
subst Q.

*****
H : not (eq A Y)
H8 : not (parallel P P U V)
H7 : Col Y U V
H4 : not (eq (S4 C P D P) F0)
H5 : Col Y P P
H3 : not (eq A Y)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,P,Y : Point
*****
False
+++++
Geometry.
-----
Lemma elim_length_ratio_inter_ll_2 : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C <> D -> parallel A Y C D -> A<>Y -> A ** Y / C ** D = S A P Q / S4 C P D Q.
Proof.
intros.
assert (S4 C P D Q <>0).
unfold inter_ll in *.
DecompAndAll.
cases_equality A Y.
apply (elim_length_ratio_on_line_2 A C D).

*****
H : not (eq A Y)
H8 : not (parallel P Q U V)
H7 : Col Y U V
H5 : Col Y P Q
H4 : not (eq (S4 C P D Q) F0)
H3 : not (eq A Y)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,P,Q,Y : Point
*****
not (Col A P Q)
+++++
Geometry.
-----
Lemma elim_length_ratio_inter_ll_2 : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C <> D -> parallel A Y C D -> A<>Y -> A ** Y / C ** D = S A P Q / S4 C P D Q.
Proof.
intros.
assert (S4 C P D Q <>0).
unfold inter_ll in *.
DecompAndAll.
cases_equality A Y.
apply (elim_length_ratio_on_line_2 A C D).
Geometry.

*****
H : not (eq A Y)
H8 : not (parallel P Q U V)
H7 : Col Y U V
H5 : Col Y P Q
H4 : not (eq (S4 C P D Q) F0)
H3 : not (eq A Y)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,P,Q,Y : Point
*****
not (Col A P Q)
+++++
unfold not.
-----
Lemma elim_length_ratio_inter_ll_2 : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C <> D -> parallel A Y C D -> A<>Y -> A ** Y / C ** D = S A P Q / S4 C P D Q.
Proof.
intros.
assert (S4 C P D Q <>0).
unfold inter_ll in *.
DecompAndAll.
cases_equality A Y.
apply (elim_length_ratio_on_line_2 A C D).
Geometry.
unfold not.

*****
H : not (eq A Y)
H8 : not (parallel P Q U V)
H7 : Col Y U V
H5 : Col Y P Q
H4 : not (eq (S4 C P D Q) F0)
H3 : not (eq A Y)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,P,Q,Y : Point
*****
forall _ : Col A P Q, False
+++++
intro.
-----
Lemma elim_length_ratio_inter_ll_2 : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C <> D -> parallel A Y C D -> A<>Y -> A ** Y / C ** D = S A P Q / S4 C P D Q.
Proof.
intros.
assert (S4 C P D Q <>0).
unfold inter_ll in *.
DecompAndAll.
cases_equality A Y.
apply (elim_length_ratio_on_line_2 A C D).
Geometry.
unfold not.
intro.

*****
H6 : Col A P Q
H : not (eq A Y)
H8 : not (parallel P Q U V)
H7 : Col Y U V
H5 : Col Y P Q
H4 : not (eq (S4 C P D Q) F0)
H3 : not (eq A Y)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,P,Q,Y : Point
*****
False
+++++
assert (P<>Q).
-----
Lemma elim_length_ratio_inter_ll_2 : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C <> D -> parallel A Y C D -> A<>Y -> A ** Y / C ** D = S A P Q / S4 C P D Q.
Proof.
intros.
assert (S4 C P D Q <>0).
unfold inter_ll in *.
DecompAndAll.
cases_equality A Y.
apply (elim_length_ratio_on_line_2 A C D).
Geometry.
unfold not.
intro.
assert (P<>Q).

*****
H6 : Col A P Q
H : not (eq A Y)
H8 : not (parallel P Q U V)
H7 : Col Y U V
H5 : Col Y P Q
H4 : not (eq (S4 C P D Q) F0)
H3 : not (eq A Y)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,P,Q,Y : Point
*****
not (eq P Q)
+++++
unfold not.
-----
Lemma elim_length_ratio_inter_ll_2 : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C <> D -> parallel A Y C D -> A<>Y -> A ** Y / C ** D = S A P Q / S4 C P D Q.
Proof.
intros.
assert (S4 C P D Q <>0).
unfold inter_ll in *.
DecompAndAll.
cases_equality A Y.
apply (elim_length_ratio_on_line_2 A C D).
Geometry.
unfold not.
intro.
assert (P<>Q).
unfold not.

*****
H6 : Col A P Q
H : not (eq A Y)
H8 : not (parallel P Q U V)
H7 : Col Y U V
H5 : Col Y P Q
H4 : not (eq (S4 C P D Q) F0)
H3 : not (eq A Y)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,P,Q,Y : Point
*****
forall _ : eq P Q, False
+++++
intro.
-----
Lemma elim_length_ratio_inter_ll_2 : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C <> D -> parallel A Y C D -> A<>Y -> A ** Y / C ** D = S A P Q / S4 C P D Q.
Proof.
intros.
assert (S4 C P D Q <>0).
unfold inter_ll in *.
DecompAndAll.
cases_equality A Y.
apply (elim_length_ratio_on_line_2 A C D).
Geometry.
unfold not.
intro.
assert (P<>Q).
unfold not.
intro.

*****
H9 : eq P Q
H6 : Col A P Q
H : not (eq A Y)
H8 : not (parallel P Q U V)
H7 : Col Y U V
H5 : Col Y P Q
H4 : not (eq (S4 C P D Q) F0)
H3 : not (eq A Y)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,P,Q,Y : Point
*****
False
+++++
subst P.
-----
Lemma elim_length_ratio_inter_ll_2 : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C <> D -> parallel A Y C D -> A<>Y -> A ** Y / C ** D = S A P Q / S4 C P D Q.
Proof.
intros.
assert (S4 C P D Q <>0).
unfold inter_ll in *.
DecompAndAll.
cases_equality A Y.
apply (elim_length_ratio_on_line_2 A C D).
Geometry.
unfold not.
intro.
assert (P<>Q).
unfold not.
intro.
subst P.

*****
H6 : Col A Q Q
H : not (eq A Y)
H8 : not (parallel Q Q U V)
H7 : Col Y U V
H4 : not (eq (S4 C Q D Q) F0)
H5 : Col Y Q Q
H3 : not (eq A Y)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,Q,Y : Point
*****
False
+++++
Geometry.
-----
Lemma elim_length_ratio_inter_ll_2 : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C <> D -> parallel A Y C D -> A<>Y -> A ** Y / C ** D = S A P Q / S4 C P D Q.
Proof.
intros.
assert (S4 C P D Q <>0).
unfold inter_ll in *.
DecompAndAll.
cases_equality A Y.
apply (elim_length_ratio_on_line_2 A C D).
Geometry.
unfold not.
intro.
assert (P<>Q).

*****
H9 : not (eq P Q)
H6 : Col A P Q
H : not (eq A Y)
H8 : not (parallel P Q U V)
H7 : Col Y U V
H5 : Col Y P Q
H4 : not (eq (S4 C P D Q) F0)
H3 : not (eq A Y)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,P,Q,Y : Point
*****
False
+++++
assert (Col P A Y).
-----
Lemma elim_length_ratio_inter_ll_2 : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C <> D -> parallel A Y C D -> A<>Y -> A ** Y / C ** D = S A P Q / S4 C P D Q.
Proof.
intros.
assert (S4 C P D Q <>0).
unfold inter_ll in *.
DecompAndAll.
cases_equality A Y.
apply (elim_length_ratio_on_line_2 A C D).
Geometry.
unfold not.
intro.
assert (P<>Q).
assert (Col P A Y).

*****
H9 : not (eq P Q)
H6 : Col A P Q
H : not (eq A Y)
H8 : not (parallel P Q U V)
H7 : Col Y U V
H5 : Col Y P Q
H4 : not (eq (S4 C P D Q) F0)
H3 : not (eq A Y)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,P,Q,Y : Point
*****
Col P A Y
+++++
eapply col_trans_1 with (B:=Q).
-----
Lemma elim_length_ratio_inter_ll_2 : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C <> D -> parallel A Y C D -> A<>Y -> A ** Y / C ** D = S A P Q / S4 C P D Q.
Proof.
intros.
assert (S4 C P D Q <>0).
unfold inter_ll in *.
DecompAndAll.
cases_equality A Y.
apply (elim_length_ratio_on_line_2 A C D).
Geometry.
unfold not.
intro.
assert (P<>Q).
assert (Col P A Y).
eapply col_trans_1 with (B:=Q).

*****
H9 : not (eq P Q)
H6 : Col A P Q
H : not (eq A Y)
H8 : not (parallel P Q U V)
H7 : Col Y U V
H5 : Col Y P Q
H4 : not (eq (S4 C P D Q) F0)
H3 : not (eq A Y)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,P,Q,Y : Point
*****
not (eq P Q)
+++++
Geometry.
-----
Lemma elim_length_ratio_inter_ll_2 : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C <> D -> parallel A Y C D -> A<>Y -> A ** Y / C ** D = S A P Q / S4 C P D Q.
Proof.
intros.
assert (S4 C P D Q <>0).
unfold inter_ll in *.
DecompAndAll.
cases_equality A Y.
apply (elim_length_ratio_on_line_2 A C D).
Geometry.
unfold not.
intro.
assert (P<>Q).
assert (Col P A Y).
eapply col_trans_1 with (B:=Q).

*****
H9 : not (eq P Q)
H6 : Col A P Q
H : not (eq A Y)
H8 : not (parallel P Q U V)
H7 : Col Y U V
H5 : Col Y P Q
H4 : not (eq (S4 C P D Q) F0)
H3 : not (eq A Y)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,P,Q,Y : Point
*****
Col P Q A
+++++
Geometry.
-----
Lemma elim_length_ratio_inter_ll_2 : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C <> D -> parallel A Y C D -> A<>Y -> A ** Y / C ** D = S A P Q / S4 C P D Q.
Proof.
intros.
assert (S4 C P D Q <>0).
unfold inter_ll in *.
DecompAndAll.
cases_equality A Y.
apply (elim_length_ratio_on_line_2 A C D).
Geometry.
unfold not.
intro.
assert (P<>Q).
assert (Col P A Y).
eapply col_trans_1 with (B:=Q).

*****
H9 : not (eq P Q)
H6 : Col A P Q
H : not (eq A Y)
H8 : not (parallel P Q U V)
H7 : Col Y U V
H5 : Col Y P Q
H4 : not (eq (S4 C P D Q) F0)
H3 : not (eq A Y)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,P,Q,Y : Point
*****
Col P Q Y
+++++
Geometry.
-----
Lemma elim_length_ratio_inter_ll_2 : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C <> D -> parallel A Y C D -> A<>Y -> A ** Y / C ** D = S A P Q / S4 C P D Q.
Proof.
intros.
assert (S4 C P D Q <>0).
unfold inter_ll in *.
DecompAndAll.
cases_equality A Y.
apply (elim_length_ratio_on_line_2 A C D).
Geometry.
unfold not.
intro.
assert (P<>Q).
assert (Col P A Y).

*****
H10 : Col P A Y
H9 : not (eq P Q)
H6 : Col A P Q
H : not (eq A Y)
H8 : not (parallel P Q U V)
H7 : Col Y U V
H5 : Col Y P Q
H4 : not (eq (S4 C P D Q) F0)
H3 : not (eq A Y)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,P,Q,Y : Point
*****
False
+++++
assert (parallel C D A P).
-----
Lemma elim_length_ratio_inter_ll_2 : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C <> D -> parallel A Y C D -> A<>Y -> A ** Y / C ** D = S A P Q / S4 C P D Q.
Proof.
intros.
assert (S4 C P D Q <>0).
unfold inter_ll in *.
DecompAndAll.
cases_equality A Y.
apply (elim_length_ratio_on_line_2 A C D).
Geometry.
unfold not.
intro.
assert (P<>Q).
assert (Col P A Y).
assert (parallel C D A P).

*****
H10 : Col P A Y
H9 : not (eq P Q)
H6 : Col A P Q
H : not (eq A Y)
H8 : not (parallel P Q U V)
H7 : Col Y U V
H5 : Col Y P Q
H4 : not (eq (S4 C P D Q) F0)
H3 : not (eq A Y)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,P,Q,Y : Point
*****
parallel C D A P
+++++
eapply col_par_par.
-----
Lemma elim_length_ratio_inter_ll_2 : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C <> D -> parallel A Y C D -> A<>Y -> A ** Y / C ** D = S A P Q / S4 C P D Q.
Proof.
intros.
assert (S4 C P D Q <>0).
unfold inter_ll in *.
DecompAndAll.
cases_equality A Y.
apply (elim_length_ratio_on_line_2 A C D).
Geometry.
unfold not.
intro.
assert (P<>Q).
assert (Col P A Y).
assert (parallel C D A P).
eapply col_par_par.

*****
H10 : Col P A Y
H9 : not (eq P Q)
H6 : Col A P Q
H : not (eq A Y)
H8 : not (parallel P Q U V)
H7 : Col Y U V
H5 : Col Y P Q
H4 : not (eq (S4 C P D Q) F0)
H3 : not (eq A Y)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,P,Q,Y : Point
*****
not (eq A ?D)
+++++
apply H.
-----
Lemma elim_length_ratio_inter_ll_2 : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C <> D -> parallel A Y C D -> A<>Y -> A ** Y / C ** D = S A P Q / S4 C P D Q.
Proof.
intros.
assert (S4 C P D Q <>0).
unfold inter_ll in *.
DecompAndAll.
cases_equality A Y.
apply (elim_length_ratio_on_line_2 A C D).
Geometry.
unfold not.
intro.
assert (P<>Q).
assert (Col P A Y).
assert (parallel C D A P).
eapply col_par_par.

*****
H10 : Col P A Y
H9 : not (eq P Q)
H6 : Col A P Q
H : not (eq A Y)
H8 : not (parallel P Q U V)
H7 : Col Y U V
H5 : Col Y P Q
H4 : not (eq (S4 C P D Q) F0)
H3 : not (eq A Y)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,P,Q,Y : Point
*****
parallel C D A Y
+++++
Geometry.
-----
Lemma elim_length_ratio_inter_ll_2 : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C <> D -> parallel A Y C D -> A<>Y -> A ** Y / C ** D = S A P Q / S4 C P D Q.
Proof.
intros.
assert (S4 C P D Q <>0).
unfold inter_ll in *.
DecompAndAll.
cases_equality A Y.
apply (elim_length_ratio_on_line_2 A C D).
Geometry.
unfold not.
intro.
assert (P<>Q).
assert (Col P A Y).
assert (parallel C D A P).
eapply col_par_par.

*****
H10 : Col P A Y
H9 : not (eq P Q)
H6 : Col A P Q
H : not (eq A Y)
H8 : not (parallel P Q U V)
H7 : Col Y U V
H5 : Col Y P Q
H4 : not (eq (S4 C P D Q) F0)
H3 : not (eq A Y)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,P,Q,Y : Point
*****
Col A Y P
+++++
Geometry.
-----
Lemma elim_length_ratio_inter_ll_2 : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C <> D -> parallel A Y C D -> A<>Y -> A ** Y / C ** D = S A P Q / S4 C P D Q.
Proof.
intros.
assert (S4 C P D Q <>0).
unfold inter_ll in *.
DecompAndAll.
cases_equality A Y.
apply (elim_length_ratio_on_line_2 A C D).
Geometry.
unfold not.
intro.
assert (P<>Q).
assert (Col P A Y).
assert (parallel C D A P).

*****
H11 : parallel C D A P
H10 : Col P A Y
H9 : not (eq P Q)
H6 : Col A P Q
H : not (eq A Y)
H8 : not (parallel P Q U V)
H7 : Col Y U V
H5 : Col Y P Q
H4 : not (eq (S4 C P D Q) F0)
H3 : not (eq A Y)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,P,Q,Y : Point
*****
False
+++++
assert (P<>A).
-----
Lemma elim_length_ratio_inter_ll_2 : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C <> D -> parallel A Y C D -> A<>Y -> A ** Y / C ** D = S A P Q / S4 C P D Q.
Proof.
intros.
assert (S4 C P D Q <>0).
unfold inter_ll in *.
DecompAndAll.
cases_equality A Y.
apply (elim_length_ratio_on_line_2 A C D).
Geometry.
unfold not.
intro.
assert (P<>Q).
assert (Col P A Y).
assert (parallel C D A P).
assert (P<>A).

*****
H11 : parallel C D A P
H10 : Col P A Y
H9 : not (eq P Q)
H6 : Col A P Q
H : not (eq A Y)
H8 : not (parallel P Q U V)
H7 : Col Y U V
H5 : Col Y P Q
H4 : not (eq (S4 C P D Q) F0)
H3 : not (eq A Y)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,P,Q,Y : Point
*****
not (eq P A)
+++++
unfold not.
-----
Lemma elim_length_ratio_inter_ll_2 : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C <> D -> parallel A Y C D -> A<>Y -> A ** Y / C ** D = S A P Q / S4 C P D Q.
Proof.
intros.
assert (S4 C P D Q <>0).
unfold inter_ll in *.
DecompAndAll.
cases_equality A Y.
apply (elim_length_ratio_on_line_2 A C D).
Geometry.
unfold not.
intro.
assert (P<>Q).
assert (Col P A Y).
assert (parallel C D A P).
assert (P<>A).
unfold not.

*****
H11 : parallel C D A P
H10 : Col P A Y
H9 : not (eq P Q)
H6 : Col A P Q
H : not (eq A Y)
H8 : not (parallel P Q U V)
H7 : Col Y U V
H5 : Col Y P Q
H4 : not (eq (S4 C P D Q) F0)
H3 : not (eq A Y)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,P,Q,Y : Point
*****
forall _ : eq P A, False
+++++
intro.
-----
Lemma elim_length_ratio_inter_ll_2 : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C <> D -> parallel A Y C D -> A<>Y -> A ** Y / C ** D = S A P Q / S4 C P D Q.
Proof.
intros.
assert (S4 C P D Q <>0).
unfold inter_ll in *.
DecompAndAll.
cases_equality A Y.
apply (elim_length_ratio_on_line_2 A C D).
Geometry.
unfold not.
intro.
assert (P<>Q).
assert (Col P A Y).
assert (parallel C D A P).
assert (P<>A).
unfold not.
intro.

*****
H12 : eq P A
H11 : parallel C D A P
H10 : Col P A Y
H9 : not (eq P Q)
H6 : Col A P Q
H : not (eq A Y)
H8 : not (parallel P Q U V)
H7 : Col Y U V
H5 : Col Y P Q
H4 : not (eq (S4 C P D Q) F0)
H3 : not (eq A Y)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,P,Q,Y : Point
*****
False
+++++
subst P.
-----
Lemma elim_length_ratio_inter_ll_2 : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C <> D -> parallel A Y C D -> A<>Y -> A ** Y / C ** D = S A P Q / S4 C P D Q.
Proof.
intros.
assert (S4 C P D Q <>0).
unfold inter_ll in *.
DecompAndAll.
cases_equality A Y.
apply (elim_length_ratio_on_line_2 A C D).
Geometry.
unfold not.
intro.
assert (P<>Q).
assert (Col P A Y).
assert (parallel C D A P).
assert (P<>A).
unfold not.
intro.
subst P.

*****
H6 : Col A A Q
H9 : not (eq A Q)
H10 : Col A A Y
H11 : parallel C D A A
H : not (eq A Y)
H8 : not (parallel A Q U V)
H7 : Col Y U V
H4 : not (eq (S4 C A D Q) F0)
H5 : Col Y A Q
H3 : not (eq A Y)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,Q,Y : Point
*****
False
+++++
clear H6 H10 H11.
-----
Lemma elim_length_ratio_inter_ll_2 : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C <> D -> parallel A Y C D -> A<>Y -> A ** Y / C ** D = S A P Q / S4 C P D Q.
Proof.
intros.
assert (S4 C P D Q <>0).
unfold inter_ll in *.
DecompAndAll.
cases_equality A Y.
apply (elim_length_ratio_on_line_2 A C D).
Geometry.
unfold not.
intro.
assert (P<>Q).
assert (Col P A Y).
assert (parallel C D A P).
assert (P<>A).
unfold not.
intro.
subst P.
clear H6 H10 H11.

*****
H9 : not (eq A Q)
H : not (eq A Y)
H8 : not (parallel A Q U V)
H7 : Col Y U V
H4 : not (eq (S4 C A D Q) F0)
H5 : Col Y A Q
H3 : not (eq A Y)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,Q,Y : Point
*****
False
+++++
assert (~ parallel C D A Q).
-----
Lemma elim_length_ratio_inter_ll_2 : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C <> D -> parallel A Y C D -> A<>Y -> A ** Y / C ** D = S A P Q / S4 C P D Q.
Proof.
intros.
assert (S4 C P D Q <>0).
unfold inter_ll in *.
DecompAndAll.
cases_equality A Y.
apply (elim_length_ratio_on_line_2 A C D).
Geometry.
unfold not.
intro.
assert (P<>Q).
assert (Col P A Y).
assert (parallel C D A P).
assert (P<>A).
unfold not.
intro.
subst P.
clear H6 H10 H11.
assert (~ parallel C D A Q).

*****
H9 : not (eq A Q)
H : not (eq A Y)
H8 : not (parallel A Q U V)
H7 : Col Y U V
H4 : not (eq (S4 C A D Q) F0)
H5 : Col Y A Q
H3 : not (eq A Y)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,Q,Y : Point
*****
not (parallel C D A Q)
+++++
Geometry.
-----
Lemma elim_length_ratio_inter_ll_2 : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C <> D -> parallel A Y C D -> A<>Y -> A ** Y / C ** D = S A P Q / S4 C P D Q.
Proof.
intros.
assert (S4 C P D Q <>0).
unfold inter_ll in *.
DecompAndAll.
cases_equality A Y.
apply (elim_length_ratio_on_line_2 A C D).
Geometry.
unfold not.
intro.
assert (P<>Q).
assert (Col P A Y).
assert (parallel C D A P).
assert (P<>A).
unfold not.
intro.
subst P.
clear H6 H10 H11.
assert (~ parallel C D A Q).

*****
H6 : not (parallel C D A Q)
H9 : not (eq A Q)
H : not (eq A Y)
H8 : not (parallel A Q U V)
H7 : Col Y U V
H4 : not (eq (S4 C A D Q) F0)
H5 : Col Y A Q
H3 : not (eq A Y)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,Q,Y : Point
*****
False
+++++
Geometry.
-----
Lemma elim_length_ratio_inter_ll_2 : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C <> D -> parallel A Y C D -> A<>Y -> A ** Y / C ** D = S A P Q / S4 C P D Q.
Proof.
intros.
assert (S4 C P D Q <>0).
unfold inter_ll in *.
DecompAndAll.
cases_equality A Y.
apply (elim_length_ratio_on_line_2 A C D).
Geometry.
unfold not.
intro.
assert (P<>Q).
assert (Col P A Y).
assert (parallel C D A P).
assert (P<>A).
unfold not.
intro.
subst P.
clear H6 H10 H11.
assert (~ parallel C D A Q).
Geometry.

*****
H6 : not (parallel C D A Q)
H9 : not (eq A Q)
H : not (eq A Y)
H8 : not (parallel A Q U V)
H7 : Col Y U V
H4 : not (eq (S4 C A D Q) F0)
H5 : Col Y A Q
H3 : not (eq A Y)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,Q,Y : Point
*****
False
+++++
assert (parallel C D A Q).
-----
Lemma elim_length_ratio_inter_ll_2 : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C <> D -> parallel A Y C D -> A<>Y -> A ** Y / C ** D = S A P Q / S4 C P D Q.
Proof.
intros.
assert (S4 C P D Q <>0).
unfold inter_ll in *.
DecompAndAll.
cases_equality A Y.
apply (elim_length_ratio_on_line_2 A C D).
Geometry.
unfold not.
intro.
assert (P<>Q).
assert (Col P A Y).
assert (parallel C D A P).
assert (P<>A).
unfold not.
intro.
subst P.
clear H6 H10 H11.
assert (~ parallel C D A Q).
Geometry.
assert (parallel C D A Q).

*****
H6 : not (parallel C D A Q)
H9 : not (eq A Q)
H : not (eq A Y)
H8 : not (parallel A Q U V)
H7 : Col Y U V
H4 : not (eq (S4 C A D Q) F0)
H5 : Col Y A Q
H3 : not (eq A Y)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,Q,Y : Point
*****
parallel C D A Q
+++++
eapply col_par_par.
-----
Lemma elim_length_ratio_inter_ll_2 : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C <> D -> parallel A Y C D -> A<>Y -> A ** Y / C ** D = S A P Q / S4 C P D Q.
Proof.
intros.
assert (S4 C P D Q <>0).
unfold inter_ll in *.
DecompAndAll.
cases_equality A Y.
apply (elim_length_ratio_on_line_2 A C D).
Geometry.
unfold not.
intro.
assert (P<>Q).
assert (Col P A Y).
assert (parallel C D A P).
assert (P<>A).
unfold not.
intro.
subst P.
clear H6 H10 H11.
assert (~ parallel C D A Q).
Geometry.
assert (parallel C D A Q).
eapply col_par_par.

*****
H6 : not (parallel C D A Q)
H9 : not (eq A Q)
H : not (eq A Y)
H8 : not (parallel A Q U V)
H7 : Col Y U V
H4 : not (eq (S4 C A D Q) F0)
H5 : Col Y A Q
H3 : not (eq A Y)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,Q,Y : Point
*****
not (eq A ?D)
+++++
apply H.
-----
Lemma elim_length_ratio_inter_ll_2 : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C <> D -> parallel A Y C D -> A<>Y -> A ** Y / C ** D = S A P Q / S4 C P D Q.
Proof.
intros.
assert (S4 C P D Q <>0).
unfold inter_ll in *.
DecompAndAll.
cases_equality A Y.
apply (elim_length_ratio_on_line_2 A C D).
Geometry.
unfold not.
intro.
assert (P<>Q).
assert (Col P A Y).
assert (parallel C D A P).
assert (P<>A).
unfold not.
intro.
subst P.
clear H6 H10 H11.
assert (~ parallel C D A Q).
Geometry.
assert (parallel C D A Q).
eapply col_par_par.

*****
H6 : not (parallel C D A Q)
H9 : not (eq A Q)
H : not (eq A Y)
H8 : not (parallel A Q U V)
H7 : Col Y U V
H4 : not (eq (S4 C A D Q) F0)
H5 : Col Y A Q
H3 : not (eq A Y)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,Q,Y : Point
*****
parallel C D A Y
+++++
Geometry.
-----
Lemma elim_length_ratio_inter_ll_2 : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C <> D -> parallel A Y C D -> A<>Y -> A ** Y / C ** D = S A P Q / S4 C P D Q.
Proof.
intros.
assert (S4 C P D Q <>0).
unfold inter_ll in *.
DecompAndAll.
cases_equality A Y.
apply (elim_length_ratio_on_line_2 A C D).
Geometry.
unfold not.
intro.
assert (P<>Q).
assert (Col P A Y).
assert (parallel C D A P).
assert (P<>A).
unfold not.
intro.
subst P.
clear H6 H10 H11.
assert (~ parallel C D A Q).
Geometry.
assert (parallel C D A Q).
eapply col_par_par.

*****
H6 : not (parallel C D A Q)
H9 : not (eq A Q)
H : not (eq A Y)
H8 : not (parallel A Q U V)
H7 : Col Y U V
H4 : not (eq (S4 C A D Q) F0)
H5 : Col Y A Q
H3 : not (eq A Y)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,Q,Y : Point
*****
Col A Y Q
+++++
Geometry.
-----
Lemma elim_length_ratio_inter_ll_2 : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C <> D -> parallel A Y C D -> A<>Y -> A ** Y / C ** D = S A P Q / S4 C P D Q.
Proof.
intros.
assert (S4 C P D Q <>0).
unfold inter_ll in *.
DecompAndAll.
cases_equality A Y.
apply (elim_length_ratio_on_line_2 A C D).
Geometry.
unfold not.
intro.
assert (P<>Q).
assert (Col P A Y).
assert (parallel C D A P).
assert (P<>A).
unfold not.
intro.
subst P.
clear H6 H10 H11.
assert (~ parallel C D A Q).
Geometry.
assert (parallel C D A Q).

*****
H10 : parallel C D A Q
H6 : not (parallel C D A Q)
H9 : not (eq A Q)
H : not (eq A Y)
H8 : not (parallel A Q U V)
H7 : Col Y U V
H4 : not (eq (S4 C A D Q) F0)
H5 : Col Y A Q
H3 : not (eq A Y)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,Q,Y : Point
*****
False
+++++
intuition.
-----
Lemma elim_length_ratio_inter_ll_2 : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C <> D -> parallel A Y C D -> A<>Y -> A ** Y / C ** D = S A P Q / S4 C P D Q.
Proof.
intros.
assert (S4 C P D Q <>0).
unfold inter_ll in *.
DecompAndAll.
cases_equality A Y.
apply (elim_length_ratio_on_line_2 A C D).
Geometry.
unfold not.
intro.
assert (P<>Q).
assert (Col P A Y).
assert (parallel C D A P).
assert (P<>A).

*****
H12 : not (eq P A)
H11 : parallel C D A P
H10 : Col P A Y
H9 : not (eq P Q)
H6 : Col A P Q
H : not (eq A Y)
H8 : not (parallel P Q U V)
H7 : Col Y U V
H5 : Col Y P Q
H4 : not (eq (S4 C P D Q) F0)
H3 : not (eq A Y)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,P,Q,Y : Point
*****
False
+++++
assert (parallel C D P Q).
-----
Lemma elim_length_ratio_inter_ll_2 : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C <> D -> parallel A Y C D -> A<>Y -> A ** Y / C ** D = S A P Q / S4 C P D Q.
Proof.
intros.
assert (S4 C P D Q <>0).
unfold inter_ll in *.
DecompAndAll.
cases_equality A Y.
apply (elim_length_ratio_on_line_2 A C D).
Geometry.
unfold not.
intro.
assert (P<>Q).
assert (Col P A Y).
assert (parallel C D A P).
assert (P<>A).
assert (parallel C D P Q).

*****
H12 : not (eq P A)
H11 : parallel C D A P
H10 : Col P A Y
H9 : not (eq P Q)
H6 : Col A P Q
H : not (eq A Y)
H8 : not (parallel P Q U V)
H7 : Col Y U V
H5 : Col Y P Q
H4 : not (eq (S4 C P D Q) F0)
H3 : not (eq A Y)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,P,Q,Y : Point
*****
parallel C D P Q
+++++
eapply col_par_par.
-----
Lemma elim_length_ratio_inter_ll_2 : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C <> D -> parallel A Y C D -> A<>Y -> A ** Y / C ** D = S A P Q / S4 C P D Q.
Proof.
intros.
assert (S4 C P D Q <>0).
unfold inter_ll in *.
DecompAndAll.
cases_equality A Y.
apply (elim_length_ratio_on_line_2 A C D).
Geometry.
unfold not.
intro.
assert (P<>Q).
assert (Col P A Y).
assert (parallel C D A P).
assert (P<>A).
assert (parallel C D P Q).
eapply col_par_par.

*****
H12 : not (eq P A)
H11 : parallel C D A P
H10 : Col P A Y
H9 : not (eq P Q)
H6 : Col A P Q
H : not (eq A Y)
H8 : not (parallel P Q U V)
H7 : Col Y U V
H5 : Col Y P Q
H4 : not (eq (S4 C P D Q) F0)
H3 : not (eq A Y)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,P,Q,Y : Point
*****
not (eq P ?D)
+++++
apply H12.
-----
Lemma elim_length_ratio_inter_ll_2 : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C <> D -> parallel A Y C D -> A<>Y -> A ** Y / C ** D = S A P Q / S4 C P D Q.
Proof.
intros.
assert (S4 C P D Q <>0).
unfold inter_ll in *.
DecompAndAll.
cases_equality A Y.
apply (elim_length_ratio_on_line_2 A C D).
Geometry.
unfold not.
intro.
assert (P<>Q).
assert (Col P A Y).
assert (parallel C D A P).
assert (P<>A).
assert (parallel C D P Q).
eapply col_par_par.

*****
H12 : not (eq P A)
H11 : parallel C D A P
H10 : Col P A Y
H9 : not (eq P Q)
H6 : Col A P Q
H : not (eq A Y)
H8 : not (parallel P Q U V)
H7 : Col Y U V
H5 : Col Y P Q
H4 : not (eq (S4 C P D Q) F0)
H3 : not (eq A Y)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,P,Q,Y : Point
*****
parallel C D P A
+++++
Geometry.
-----
Lemma elim_length_ratio_inter_ll_2 : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C <> D -> parallel A Y C D -> A<>Y -> A ** Y / C ** D = S A P Q / S4 C P D Q.
Proof.
intros.
assert (S4 C P D Q <>0).
unfold inter_ll in *.
DecompAndAll.
cases_equality A Y.
apply (elim_length_ratio_on_line_2 A C D).
Geometry.
unfold not.
intro.
assert (P<>Q).
assert (Col P A Y).
assert (parallel C D A P).
assert (P<>A).
assert (parallel C D P Q).
eapply col_par_par.

*****
H12 : not (eq P A)
H11 : parallel C D A P
H10 : Col P A Y
H9 : not (eq P Q)
H6 : Col A P Q
H : not (eq A Y)
H8 : not (parallel P Q U V)
H7 : Col Y U V
H5 : Col Y P Q
H4 : not (eq (S4 C P D Q) F0)
H3 : not (eq A Y)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,P,Q,Y : Point
*****
Col P A Q
+++++
Geometry.
-----
Lemma elim_length_ratio_inter_ll_2 : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C <> D -> parallel A Y C D -> A<>Y -> A ** Y / C ** D = S A P Q / S4 C P D Q.
Proof.
intros.
assert (S4 C P D Q <>0).
unfold inter_ll in *.
DecompAndAll.
cases_equality A Y.
apply (elim_length_ratio_on_line_2 A C D).
Geometry.
unfold not.
intro.
assert (P<>Q).
assert (Col P A Y).
assert (parallel C D A P).
assert (P<>A).
assert (parallel C D P Q).

*****
H13 : parallel C D P Q
H12 : not (eq P A)
H11 : parallel C D A P
H10 : Col P A Y
H9 : not (eq P Q)
H6 : Col A P Q
H : not (eq A Y)
H8 : not (parallel P Q U V)
H7 : Col Y U V
H5 : Col Y P Q
H4 : not (eq (S4 C P D Q) F0)
H3 : not (eq A Y)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,P,Q,Y : Point
*****
False
+++++
assert (~ parallel C D P Q).
-----
Lemma elim_length_ratio_inter_ll_2 : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C <> D -> parallel A Y C D -> A<>Y -> A ** Y / C ** D = S A P Q / S4 C P D Q.
Proof.
intros.
assert (S4 C P D Q <>0).
unfold inter_ll in *.
DecompAndAll.
cases_equality A Y.
apply (elim_length_ratio_on_line_2 A C D).
Geometry.
unfold not.
intro.
assert (P<>Q).
assert (Col P A Y).
assert (parallel C D A P).
assert (P<>A).
assert (parallel C D P Q).
assert (~ parallel C D P Q).

*****
H13 : parallel C D P Q
H12 : not (eq P A)
H11 : parallel C D A P
H10 : Col P A Y
H9 : not (eq P Q)
H6 : Col A P Q
H : not (eq A Y)
H8 : not (parallel P Q U V)
H7 : Col Y U V
H5 : Col Y P Q
H4 : not (eq (S4 C P D Q) F0)
H3 : not (eq A Y)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,P,Q,Y : Point
*****
not (parallel C D P Q)
+++++
Geometry.
-----
Lemma elim_length_ratio_inter_ll_2 : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C <> D -> parallel A Y C D -> A<>Y -> A ** Y / C ** D = S A P Q / S4 C P D Q.
Proof.
intros.
assert (S4 C P D Q <>0).
unfold inter_ll in *.
DecompAndAll.
cases_equality A Y.
apply (elim_length_ratio_on_line_2 A C D).
Geometry.
unfold not.
intro.
assert (P<>Q).
assert (Col P A Y).
assert (parallel C D A P).
assert (P<>A).
assert (parallel C D P Q).
assert (~ parallel C D P Q).

*****
H14 : not (parallel C D P Q)
H13 : parallel C D P Q
H12 : not (eq P A)
H11 : parallel C D A P
H10 : Col P A Y
H9 : not (eq P Q)
H6 : Col A P Q
H : not (eq A Y)
H8 : not (parallel P Q U V)
H7 : Col Y U V
H5 : Col Y P Q
H4 : not (eq (S4 C P D Q) F0)
H3 : not (eq A Y)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,P,Q,Y : Point
*****
False
+++++
Geometry.
-----
Lemma elim_length_ratio_inter_ll_2 : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C <> D -> parallel A Y C D -> A<>Y -> A ** Y / C ** D = S A P Q / S4 C P D Q.
Proof.
intros.
assert (S4 C P D Q <>0).
unfold inter_ll in *.
DecompAndAll.
cases_equality A Y.
apply (elim_length_ratio_on_line_2 A C D).

*****
H : not (eq A Y)
H8 : not (parallel P Q U V)
H7 : Col Y U V
H5 : Col Y P Q
H4 : not (eq (S4 C P D Q) F0)
H3 : not (eq A Y)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,P,Q,Y : Point
*****
not (eq C D)
+++++
Geometry.
-----
Lemma elim_length_ratio_inter_ll_2 : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C <> D -> parallel A Y C D -> A<>Y -> A ** Y / C ** D = S A P Q / S4 C P D Q.
Proof.
intros.
assert (S4 C P D Q <>0).
unfold inter_ll in *.
DecompAndAll.
cases_equality A Y.
apply (elim_length_ratio_on_line_2 A C D).

*****
H : not (eq A Y)
H8 : not (parallel P Q U V)
H7 : Col Y U V
H5 : Col Y P Q
H4 : not (eq (S4 C P D Q) F0)
H3 : not (eq A Y)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,P,Q,Y : Point
*****
parallel A Y C D
+++++
Geometry.
-----
Lemma elim_length_ratio_inter_ll_2 : forall A C D U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C <> D -> parallel A Y C D -> A<>Y -> A ** Y / C ** D = S A P Q / S4 C P D Q.
Proof.
intros.
assert (S4 C P D Q <>0).

*****

*****

+++++
Qed.
-----
Lemma non_zero_denom_on_parallel_d_1_length_ratio :\n    forall (A C D P Q R Y : Point) (l : F),\n    on_parallel_d Y R P Q l ->\n    S A R Y = 0 -> \n    P <> Q.
-----
Lemma non_zero_denom_on_parallel_d_1_length_ratio : forall (A C D P Q R Y : Point) (l : F), on_parallel_d Y R P Q l -> S A R Y = 0 -> P <> Q.

*****

*****
forall (A _ : Point) (_ : Point) (P Q R Y : Point) (l : F) (_ : on_parallel_d Y R P Q l) (_ : eq (S A R Y) F0), not (eq P Q)
+++++
Proof.
-----
Lemma non_zero_denom_on_parallel_d_1_length_ratio : forall (A C D P Q R Y : Point) (l : F), on_parallel_d Y R P Q l -> S A R Y = 0 -> P <> Q.
Proof.

*****

*****
forall (A _ : Point) (_ : Point) (P Q R Y : Point) (l : F) (_ : on_parallel_d Y R P Q l) (_ : eq (S A R Y) F0), not (eq P Q)
+++++
intros.
-----
Lemma non_zero_denom_on_parallel_d_1_length_ratio : forall (A C D P Q R Y : Point) (l : F), on_parallel_d Y R P Q l -> S A R Y = 0 -> P <> Q.
Proof.
intros.

*****
H0 : eq (S A R Y) F0
H : on_parallel_d Y R P Q l
l : F
A,C,D,P,Q,R,Y : Point
*****
not (eq P Q)
+++++
unfold on_parallel_d in H.
-----
Lemma non_zero_denom_on_parallel_d_1_length_ratio : forall (A C D P Q R Y : Point) (l : F), on_parallel_d Y R P Q l -> S A R Y = 0 -> P <> Q.
Proof.
intros.
unfold on_parallel_d in H.

*****
H0 : eq (S A R Y) F0
H : and (not (eq P Q))\n (and (parallel Y R P Q) (eq (DSeg R Y) (Fmult l (DSeg P Q))))
l : F
A,C,D,P,Q,R,Y : Point
*****
not (eq P Q)
+++++
intuition.
-----
Lemma non_zero_denom_on_parallel_d_1_length_ratio : forall (A C D P Q R Y : Point) (l : F), on_parallel_d Y R P Q l -> S A R Y = 0 -> P <> Q.
Proof.
intros.
unfold on_parallel_d in H.
intuition.

*****

*****

+++++
Qed.
-----
Lemma non_zero_denom_on_parallel_d_2_length_ratio :\n    forall (A C D P Q R Y : Point) (l : F),\n    on_parallel_d Y R P Q l ->\n    parallel A Y C D ->\n    C <> D ->\n    S A R Y <> 0 -> \n    S4 C P D Q <> 0.
-----
Lemma non_zero_denom_on_parallel_d_2_length_ratio : forall (A C D P Q R Y : Point) (l : F), on_parallel_d Y R P Q l -> parallel A Y C D -> C <> D -> S A R Y <> 0 -> S4 C P D Q <> 0.

*****

*****
forall (A C D P Q R Y : Point) (l : F) (_ : on_parallel_d Y R P Q l) (_ : parallel A Y C D) (_ : not (eq C D)) (_ : not (eq (S A R Y) F0)), not (eq (S4 C P D Q) F0)
+++++
Proof.
-----
Lemma non_zero_denom_on_parallel_d_2_length_ratio : forall (A C D P Q R Y : Point) (l : F), on_parallel_d Y R P Q l -> parallel A Y C D -> C <> D -> S A R Y <> 0 -> S4 C P D Q <> 0.
Proof.

*****

*****
forall (A C D P Q R Y : Point) (l : F) (_ : on_parallel_d Y R P Q l) (_ : parallel A Y C D) (_ : not (eq C D)) (_ : not (eq (S A R Y) F0)), not (eq (S4 C P D Q) F0)
+++++
intros.
-----
Lemma non_zero_denom_on_parallel_d_2_length_ratio : forall (A C D P Q R Y : Point) (l : F), on_parallel_d Y R P Q l -> parallel A Y C D -> C <> D -> S A R Y <> 0 -> S4 C P D Q <> 0.
Proof.
intros.

*****
H2 : not (eq (S A R Y) F0)
H1 : not (eq C D)
H0 : parallel A Y C D
H : on_parallel_d Y R P Q l
l : F
A,C,D,P,Q,R,Y : Point
*****
not (eq (S4 C P D Q) F0)
+++++
unfold not.
-----
Lemma non_zero_denom_on_parallel_d_2_length_ratio : forall (A C D P Q R Y : Point) (l : F), on_parallel_d Y R P Q l -> parallel A Y C D -> C <> D -> S A R Y <> 0 -> S4 C P D Q <> 0.
Proof.
intros.
unfold not.

*****
H2 : not (eq (S A R Y) F0)
H1 : not (eq C D)
H0 : parallel A Y C D
H : on_parallel_d Y R P Q l
l : F
A,C,D,P,Q,R,Y : Point
*****
forall _ : eq (S4 C P D Q) F0, False
+++++
intro.
-----
Lemma non_zero_denom_on_parallel_d_2_length_ratio : forall (A C D P Q R Y : Point) (l : F), on_parallel_d Y R P Q l -> parallel A Y C D -> C <> D -> S A R Y <> 0 -> S4 C P D Q <> 0.
Proof.
intros.
unfold not.
intro.

*****
H3 : eq (S4 C P D Q) F0
H2 : not (eq (S A R Y) F0)
H1 : not (eq C D)
H0 : parallel A Y C D
H : on_parallel_d Y R P Q l
l : F
A,C,D,P,Q,R,Y : Point
*****
False
+++++
assert (parallel C D P Q).
-----
Lemma non_zero_denom_on_parallel_d_2_length_ratio : forall (A C D P Q R Y : Point) (l : F), on_parallel_d Y R P Q l -> parallel A Y C D -> C <> D -> S A R Y <> 0 -> S4 C P D Q <> 0.
Proof.
intros.
unfold not.
intro.
assert (parallel C D P Q).

*****
H3 : eq (S4 C P D Q) F0
H2 : not (eq (S A R Y) F0)
H1 : not (eq C D)
H0 : parallel A Y C D
H : on_parallel_d Y R P Q l
l : F
A,C,D,P,Q,R,Y : Point
*****
parallel C D P Q
+++++
Geometry.
-----
Lemma non_zero_denom_on_parallel_d_2_length_ratio : forall (A C D P Q R Y : Point) (l : F), on_parallel_d Y R P Q l -> parallel A Y C D -> C <> D -> S A R Y <> 0 -> S4 C P D Q <> 0.
Proof.
intros.
unfold not.
intro.
assert (parallel C D P Q).

*****
H4 : parallel C D P Q
H3 : eq (S4 C P D Q) F0
H2 : not (eq (S A R Y) F0)
H1 : not (eq C D)
H0 : parallel A Y C D
H : on_parallel_d Y R P Q l
l : F
A,C,D,P,Q,R,Y : Point
*****
False
+++++
Geometry.
-----
Lemma non_zero_denom_on_parallel_d_2_length_ratio : forall (A C D P Q R Y : Point) (l : F), on_parallel_d Y R P Q l -> parallel A Y C D -> C <> D -> S A R Y <> 0 -> S4 C P D Q <> 0.
Proof.
intros.
unfold not.
intro.
assert (parallel C D P Q).
Geometry.

*****
H4 : parallel C D P Q
H3 : eq (S4 C P D Q) F0
H2 : not (eq (S A R Y) F0)
H1 : not (eq C D)
H0 : parallel A Y C D
H : on_parallel_d Y R P Q l
l : F
A,C,D,P,Q,R,Y : Point
*****
False
+++++
clear H3.
-----
Lemma non_zero_denom_on_parallel_d_2_length_ratio : forall (A C D P Q R Y : Point) (l : F), on_parallel_d Y R P Q l -> parallel A Y C D -> C <> D -> S A R Y <> 0 -> S4 C P D Q <> 0.
Proof.
intros.
unfold not.
intro.
assert (parallel C D P Q).
Geometry.
clear H3.

*****
H4 : parallel C D P Q
H2 : not (eq (S A R Y) F0)
H1 : not (eq C D)
H0 : parallel A Y C D
H : on_parallel_d Y R P Q l
l : F
A,C,D,P,Q,R,Y : Point
*****
False
+++++
unfold on_parallel_d in *.
-----
Lemma non_zero_denom_on_parallel_d_2_length_ratio : forall (A C D P Q R Y : Point) (l : F), on_parallel_d Y R P Q l -> parallel A Y C D -> C <> D -> S A R Y <> 0 -> S4 C P D Q <> 0.
Proof.
intros.
unfold not.
intro.
assert (parallel C D P Q).
Geometry.
clear H3.
unfold on_parallel_d in *.

*****
H4 : parallel C D P Q
H2 : not (eq (S A R Y) F0)
H1 : not (eq C D)
H0 : parallel A Y C D
H : and (not (eq P Q))\n (and (parallel Y R P Q) (eq (DSeg R Y) (Fmult l (DSeg P Q))))
l : F
A,C,D,P,Q,R,Y : Point
*****
False
+++++
DecompAndAll.
-----
Lemma non_zero_denom_on_parallel_d_2_length_ratio : forall (A C D P Q R Y : Point) (l : F), on_parallel_d Y R P Q l -> parallel A Y C D -> C <> D -> S A R Y <> 0 -> S4 C P D Q <> 0.
Proof.
intros.
unfold not.
intro.
assert (parallel C D P Q).
Geometry.
clear H3.
unfold on_parallel_d in *.
DecompAndAll.

*****
H7 : eq (DSeg R Y) (Fmult l (DSeg P Q))
H6 : parallel Y R P Q
H3 : not (eq P Q)
H4 : parallel C D P Q
H2 : not (eq (S A R Y) F0)
H1 : not (eq C D)
H0 : parallel A Y C D
l : F
A,C,D,P,Q,R,Y : Point
*****
False
+++++
assert (parallel A Y P Q).
-----
Lemma non_zero_denom_on_parallel_d_2_length_ratio : forall (A C D P Q R Y : Point) (l : F), on_parallel_d Y R P Q l -> parallel A Y C D -> C <> D -> S A R Y <> 0 -> S4 C P D Q <> 0.
Proof.
intros.
unfold not.
intro.
assert (parallel C D P Q).
Geometry.
clear H3.
unfold on_parallel_d in *.
DecompAndAll.
assert (parallel A Y P Q).

*****
H7 : eq (DSeg R Y) (Fmult l (DSeg P Q))
H6 : parallel Y R P Q
H3 : not (eq P Q)
H4 : parallel C D P Q
H2 : not (eq (S A R Y) F0)
H1 : not (eq C D)
H0 : parallel A Y C D
l : F
A,C,D,P,Q,R,Y : Point
*****
parallel A Y P Q
+++++
eapply parallel_transitivity.
-----
Lemma non_zero_denom_on_parallel_d_2_length_ratio : forall (A C D P Q R Y : Point) (l : F), on_parallel_d Y R P Q l -> parallel A Y C D -> C <> D -> S A R Y <> 0 -> S4 C P D Q <> 0.
Proof.
intros.
unfold not.
intro.
assert (parallel C D P Q).
Geometry.
clear H3.
unfold on_parallel_d in *.
DecompAndAll.
assert (parallel A Y P Q).
eapply parallel_transitivity.

*****
H7 : eq (DSeg R Y) (Fmult l (DSeg P Q))
H6 : parallel Y R P Q
H3 : not (eq P Q)
H4 : parallel C D P Q
H2 : not (eq (S A R Y) F0)
H1 : not (eq C D)
H0 : parallel A Y C D
l : F
A,C,D,P,Q,R,Y : Point
*****
not (eq ?C ?D)
+++++
apply H1.
-----
Lemma non_zero_denom_on_parallel_d_2_length_ratio : forall (A C D P Q R Y : Point) (l : F), on_parallel_d Y R P Q l -> parallel A Y C D -> C <> D -> S A R Y <> 0 -> S4 C P D Q <> 0.
Proof.
intros.
unfold not.
intro.
assert (parallel C D P Q).
Geometry.
clear H3.
unfold on_parallel_d in *.
DecompAndAll.
assert (parallel A Y P Q).
eapply parallel_transitivity.

*****
H7 : eq (DSeg R Y) (Fmult l (DSeg P Q))
H6 : parallel Y R P Q
H3 : not (eq P Q)
H4 : parallel C D P Q
H2 : not (eq (S A R Y) F0)
H1 : not (eq C D)
H0 : parallel A Y C D
l : F
A,C,D,P,Q,R,Y : Point
*****
parallel A Y C D
+++++
Geometry.
-----
Lemma non_zero_denom_on_parallel_d_2_length_ratio : forall (A C D P Q R Y : Point) (l : F), on_parallel_d Y R P Q l -> parallel A Y C D -> C <> D -> S A R Y <> 0 -> S4 C P D Q <> 0.
Proof.
intros.
unfold not.
intro.
assert (parallel C D P Q).
Geometry.
clear H3.
unfold on_parallel_d in *.
DecompAndAll.
assert (parallel A Y P Q).
eapply parallel_transitivity.

*****
H7 : eq (DSeg R Y) (Fmult l (DSeg P Q))
H6 : parallel Y R P Q
H3 : not (eq P Q)
H4 : parallel C D P Q
H2 : not (eq (S A R Y) F0)
H1 : not (eq C D)
H0 : parallel A Y C D
l : F
A,C,D,P,Q,R,Y : Point
*****
parallel C D P Q
+++++
Geometry.
-----
Lemma non_zero_denom_on_parallel_d_2_length_ratio : forall (A C D P Q R Y : Point) (l : F), on_parallel_d Y R P Q l -> parallel A Y C D -> C <> D -> S A R Y <> 0 -> S4 C P D Q <> 0.
Proof.
intros.
unfold not.
intro.
assert (parallel C D P Q).
Geometry.
clear H3.
unfold on_parallel_d in *.
DecompAndAll.
assert (parallel A Y P Q).

*****
H : parallel A Y P Q
H7 : eq (DSeg R Y) (Fmult l (DSeg P Q))
H6 : parallel Y R P Q
H3 : not (eq P Q)
H4 : parallel C D P Q
H2 : not (eq (S A R Y) F0)
H1 : not (eq C D)
H0 : parallel A Y C D
l : F
A,C,D,P,Q,R,Y : Point
*****
False
+++++
assert (parallel A Y Y R).
-----
Lemma non_zero_denom_on_parallel_d_2_length_ratio : forall (A C D P Q R Y : Point) (l : F), on_parallel_d Y R P Q l -> parallel A Y C D -> C <> D -> S A R Y <> 0 -> S4 C P D Q <> 0.
Proof.
intros.
unfold not.
intro.
assert (parallel C D P Q).
Geometry.
clear H3.
unfold on_parallel_d in *.
DecompAndAll.
assert (parallel A Y P Q).
assert (parallel A Y Y R).

*****
H : parallel A Y P Q
H7 : eq (DSeg R Y) (Fmult l (DSeg P Q))
H6 : parallel Y R P Q
H3 : not (eq P Q)
H4 : parallel C D P Q
H2 : not (eq (S A R Y) F0)
H1 : not (eq C D)
H0 : parallel A Y C D
l : F
A,C,D,P,Q,R,Y : Point
*****
parallel A Y Y R
+++++
eapply parallel_transitivity.
-----
Lemma non_zero_denom_on_parallel_d_2_length_ratio : forall (A C D P Q R Y : Point) (l : F), on_parallel_d Y R P Q l -> parallel A Y C D -> C <> D -> S A R Y <> 0 -> S4 C P D Q <> 0.
Proof.
intros.
unfold not.
intro.
assert (parallel C D P Q).
Geometry.
clear H3.
unfold on_parallel_d in *.
DecompAndAll.
assert (parallel A Y P Q).
assert (parallel A Y Y R).
eapply parallel_transitivity.

*****
H : parallel A Y P Q
H7 : eq (DSeg R Y) (Fmult l (DSeg P Q))
H6 : parallel Y R P Q
H3 : not (eq P Q)
H4 : parallel C D P Q
H2 : not (eq (S A R Y) F0)
H1 : not (eq C D)
H0 : parallel A Y C D
l : F
A,C,D,P,Q,R,Y : Point
*****
not (eq ?C ?D)
+++++
apply H3.
-----
Lemma non_zero_denom_on_parallel_d_2_length_ratio : forall (A C D P Q R Y : Point) (l : F), on_parallel_d Y R P Q l -> parallel A Y C D -> C <> D -> S A R Y <> 0 -> S4 C P D Q <> 0.
Proof.
intros.
unfold not.
intro.
assert (parallel C D P Q).
Geometry.
clear H3.
unfold on_parallel_d in *.
DecompAndAll.
assert (parallel A Y P Q).
assert (parallel A Y Y R).
eapply parallel_transitivity.

*****
H : parallel A Y P Q
H7 : eq (DSeg R Y) (Fmult l (DSeg P Q))
H6 : parallel Y R P Q
H3 : not (eq P Q)
H4 : parallel C D P Q
H2 : not (eq (S A R Y) F0)
H1 : not (eq C D)
H0 : parallel A Y C D
l : F
A,C,D,P,Q,R,Y : Point
*****
parallel A Y P Q
+++++
Geometry.
-----
Lemma non_zero_denom_on_parallel_d_2_length_ratio : forall (A C D P Q R Y : Point) (l : F), on_parallel_d Y R P Q l -> parallel A Y C D -> C <> D -> S A R Y <> 0 -> S4 C P D Q <> 0.
Proof.
intros.
unfold not.
intro.
assert (parallel C D P Q).
Geometry.
clear H3.
unfold on_parallel_d in *.
DecompAndAll.
assert (parallel A Y P Q).
assert (parallel A Y Y R).
eapply parallel_transitivity.

*****
H : parallel A Y P Q
H7 : eq (DSeg R Y) (Fmult l (DSeg P Q))
H6 : parallel Y R P Q
H3 : not (eq P Q)
H4 : parallel C D P Q
H2 : not (eq (S A R Y) F0)
H1 : not (eq C D)
H0 : parallel A Y C D
l : F
A,C,D,P,Q,R,Y : Point
*****
parallel P Q Y R
+++++
Geometry.
-----
Lemma non_zero_denom_on_parallel_d_2_length_ratio : forall (A C D P Q R Y : Point) (l : F), on_parallel_d Y R P Q l -> parallel A Y C D -> C <> D -> S A R Y <> 0 -> S4 C P D Q <> 0.
Proof.
intros.
unfold not.
intro.
assert (parallel C D P Q).
Geometry.
clear H3.
unfold on_parallel_d in *.
DecompAndAll.
assert (parallel A Y P Q).
assert (parallel A Y Y R).

*****
H5 : parallel A Y Y R
H : parallel A Y P Q
H7 : eq (DSeg R Y) (Fmult l (DSeg P Q))
H6 : parallel Y R P Q
H3 : not (eq P Q)
H4 : parallel C D P Q
H2 : not (eq (S A R Y) F0)
H1 : not (eq C D)
H0 : parallel A Y C D
l : F
A,C,D,P,Q,R,Y : Point
*****
False
+++++
assert (Col A Y R).
-----
Lemma non_zero_denom_on_parallel_d_2_length_ratio : forall (A C D P Q R Y : Point) (l : F), on_parallel_d Y R P Q l -> parallel A Y C D -> C <> D -> S A R Y <> 0 -> S4 C P D Q <> 0.
Proof.
intros.
unfold not.
intro.
assert (parallel C D P Q).
Geometry.
clear H3.
unfold on_parallel_d in *.
DecompAndAll.
assert (parallel A Y P Q).
assert (parallel A Y Y R).
assert (Col A Y R).

*****
H5 : parallel A Y Y R
H : parallel A Y P Q
H7 : eq (DSeg R Y) (Fmult l (DSeg P Q))
H6 : parallel Y R P Q
H3 : not (eq P Q)
H4 : parallel C D P Q
H2 : not (eq (S A R Y) F0)
H1 : not (eq C D)
H0 : parallel A Y C D
l : F
A,C,D,P,Q,R,Y : Point
*****
Col A Y R
+++++
Geometry.
-----
Lemma non_zero_denom_on_parallel_d_2_length_ratio : forall (A C D P Q R Y : Point) (l : F), on_parallel_d Y R P Q l -> parallel A Y C D -> C <> D -> S A R Y <> 0 -> S4 C P D Q <> 0.
Proof.
intros.
unfold not.
intro.
assert (parallel C D P Q).
Geometry.
clear H3.
unfold on_parallel_d in *.
DecompAndAll.
assert (parallel A Y P Q).
assert (parallel A Y Y R).
assert (Col A Y R).
Geometry.

*****
H5 : parallel A Y Y R
H : parallel A Y P Q
H7 : eq (DSeg R Y) (Fmult l (DSeg P Q))
H6 : parallel Y R P Q
H3 : not (eq P Q)
H4 : parallel C D P Q
H2 : not (eq (S A R Y) F0)
H1 : not (eq C D)
H0 : parallel A Y C D
l : F
A,C,D,P,Q,R,Y : Point
*****
Col A Y R
+++++
unfold parallel in *.
-----
Lemma non_zero_denom_on_parallel_d_2_length_ratio : forall (A C D P Q R Y : Point) (l : F), on_parallel_d Y R P Q l -> parallel A Y C D -> C <> D -> S A R Y <> 0 -> S4 C P D Q <> 0.
Proof.
intros.
unfold not.
intro.
assert (parallel C D P Q).
Geometry.
clear H3.
unfold on_parallel_d in *.
DecompAndAll.
assert (parallel A Y P Q).
assert (parallel A Y Y R).
assert (Col A Y R).
Geometry.
unfold parallel in *.

*****
H5 : eq (S4 A Y Y R) F0
H : eq (S4 A P Y Q) F0
H7 : eq (DSeg R Y) (Fmult l (DSeg P Q))
H6 : eq (S4 Y P R Q) F0
H3 : not (eq P Q)
H4 : eq (S4 C P D Q) F0
H2 : not (eq (S A R Y) F0)
H1 : not (eq C D)
H0 : eq (S4 A C Y D) F0
l : F
A,C,D,P,Q,R,Y : Point
*****
Col A Y R
+++++
unfold S4 in *.
-----
Lemma non_zero_denom_on_parallel_d_2_length_ratio : forall (A C D P Q R Y : Point) (l : F), on_parallel_d Y R P Q l -> parallel A Y C D -> C <> D -> S A R Y <> 0 -> S4 C P D Q <> 0.
Proof.
intros.
unfold not.
intro.
assert (parallel C D P Q).
Geometry.
clear H3.
unfold on_parallel_d in *.
DecompAndAll.
assert (parallel A Y P Q).
assert (parallel A Y Y R).
assert (Col A Y R).
Geometry.
unfold parallel in *.
unfold S4 in *.

*****
H5 : eq (Fplus (S A Y Y) (S A Y R)) F0
H : eq (Fplus (S A P Y) (S A Y Q)) F0
H7 : eq (DSeg R Y) (Fmult l (DSeg P Q))
H6 : eq (Fplus (S Y P R) (S Y R Q)) F0
H3 : not (eq P Q)
H4 : eq (Fplus (S C P D) (S C D Q)) F0
H2 : not (eq (S A R Y) F0)
H1 : not (eq C D)
H0 : eq (Fplus (S A C Y) (S A Y D)) F0
l : F
A,C,D,P,Q,R,Y : Point
*****
Col A Y R
+++++
basic_simpl.
-----
Lemma non_zero_denom_on_parallel_d_2_length_ratio : forall (A C D P Q R Y : Point) (l : F), on_parallel_d Y R P Q l -> parallel A Y C D -> C <> D -> S A R Y <> 0 -> S4 C P D Q <> 0.
Proof.
intros.
unfold not.
intro.
assert (parallel C D P Q).
Geometry.
clear H3.
unfold on_parallel_d in *.
DecompAndAll.
assert (parallel A Y P Q).
assert (parallel A Y Y R).
assert (Col A Y R).
Geometry.
unfold parallel in *.
unfold S4 in *.
basic_simpl.

*****
H5 : eq (S A Y R) F0
H : eq (Fplus (S A P Y) (S A Y Q)) F0
H7 : eq (DSeg R Y) (Fmult l (DSeg P Q))
H6 : eq (Fplus (S Y P R) (S Y R Q)) F0
H3 : not (eq P Q)
H4 : eq (Fplus (S C P D) (S C D Q)) F0
H2 : not (eq (S A R Y) F0)
H1 : not (eq C D)
H0 : eq (Fplus (S A C Y) (S A Y D)) F0
l : F
A,C,D,P,Q,R,Y : Point
*****
Col A Y R
+++++
Geometry.
-----
Lemma non_zero_denom_on_parallel_d_2_length_ratio : forall (A C D P Q R Y : Point) (l : F), on_parallel_d Y R P Q l -> parallel A Y C D -> C <> D -> S A R Y <> 0 -> S4 C P D Q <> 0.
Proof.
intros.
unfold not.
intro.
assert (parallel C D P Q).
Geometry.
clear H3.
unfold on_parallel_d in *.
DecompAndAll.
assert (parallel A Y P Q).
assert (parallel A Y Y R).
assert (Col A Y R).

*****
H8 : Col A Y R
H5 : parallel A Y Y R
H : parallel A Y P Q
H7 : eq (DSeg R Y) (Fmult l (DSeg P Q))
H6 : parallel Y R P Q
H3 : not (eq P Q)
H4 : parallel C D P Q
H2 : not (eq (S A R Y) F0)
H1 : not (eq C D)
H0 : parallel A Y C D
l : F
A,C,D,P,Q,R,Y : Point
*****
False
+++++
Geometry.
-----
Lemma non_zero_denom_on_parallel_d_2_length_ratio : forall (A C D P Q R Y : Point) (l : F), on_parallel_d Y R P Q l -> parallel A Y C D -> C <> D -> S A R Y <> 0 -> S4 C P D Q <> 0.
Proof.
intros.
unfold not.
intro.
assert (parallel C D P Q).
Geometry.
clear H3.
unfold on_parallel_d in *.
DecompAndAll.
assert (parallel A Y P Q).
assert (parallel A Y Y R).
assert (Col A Y R).
Geometry.

*****
H8 : Col A Y R
H5 : parallel A Y Y R
H : parallel A Y P Q
H7 : eq (DSeg R Y) (Fmult l (DSeg P Q))
H6 : parallel Y R P Q
H3 : not (eq P Q)
H4 : parallel C D P Q
H2 : not (eq (S A R Y) F0)
H1 : not (eq C D)
H0 : parallel A Y C D
l : F
A,C,D,P,Q,R,Y : Point
*****
False
+++++
assert (Col A R Y).
-----
Lemma non_zero_denom_on_parallel_d_2_length_ratio : forall (A C D P Q R Y : Point) (l : F), on_parallel_d Y R P Q l -> parallel A Y C D -> C <> D -> S A R Y <> 0 -> S4 C P D Q <> 0.
Proof.
intros.
unfold not.
intro.
assert (parallel C D P Q).
Geometry.
clear H3.
unfold on_parallel_d in *.
DecompAndAll.
assert (parallel A Y P Q).
assert (parallel A Y Y R).
assert (Col A Y R).
Geometry.
assert (Col A R Y).

*****
H8 : Col A Y R
H5 : parallel A Y Y R
H : parallel A Y P Q
H7 : eq (DSeg R Y) (Fmult l (DSeg P Q))
H6 : parallel Y R P Q
H3 : not (eq P Q)
H4 : parallel C D P Q
H2 : not (eq (S A R Y) F0)
H1 : not (eq C D)
H0 : parallel A Y C D
l : F
A,C,D,P,Q,R,Y : Point
*****
Col A R Y
+++++
Geometry.
-----
Lemma non_zero_denom_on_parallel_d_2_length_ratio : forall (A C D P Q R Y : Point) (l : F), on_parallel_d Y R P Q l -> parallel A Y C D -> C <> D -> S A R Y <> 0 -> S4 C P D Q <> 0.
Proof.
intros.
unfold not.
intro.
assert (parallel C D P Q).
Geometry.
clear H3.
unfold on_parallel_d in *.
DecompAndAll.
assert (parallel A Y P Q).
assert (parallel A Y Y R).
assert (Col A Y R).
Geometry.
assert (Col A R Y).

*****
H9 : Col A R Y
H8 : Col A Y R
H5 : parallel A Y Y R
H : parallel A Y P Q
H7 : eq (DSeg R Y) (Fmult l (DSeg P Q))
H6 : parallel Y R P Q
H3 : not (eq P Q)
H4 : parallel C D P Q
H2 : not (eq (S A R Y) F0)
H1 : not (eq C D)
H0 : parallel A Y C D
l : F
A,C,D,P,Q,R,Y : Point
*****
False
+++++
Geometry.
-----
Lemma non_zero_denom_on_parallel_d_2_length_ratio : forall (A C D P Q R Y : Point) (l : F), on_parallel_d Y R P Q l -> parallel A Y C D -> C <> D -> S A R Y <> 0 -> S4 C P D Q <> 0.
Proof.
intros.
unfold not.
intro.
assert (parallel C D P Q).

*****

*****

+++++
Qed.
-----
Lemma lambda_zero_on_parallel_d : forall Y R P Q lambda,\n   on_parallel_d Y R P Q lambda -> \n   (R=Y <-> lambda = 0).
-----
Lemma lambda_zero_on_parallel_d : forall Y R P Q lambda, on_parallel_d Y R P Q lambda -> (R=Y <-> lambda = 0).

*****

*****
forall (Y R P Q : Point) (lambda : F) (_ : on_parallel_d Y R P Q lambda), iff (eq R Y) (eq lambda F0)
+++++
Proof.
-----
Lemma lambda_zero_on_parallel_d : forall Y R P Q lambda, on_parallel_d Y R P Q lambda -> (R=Y <-> lambda = 0).
Proof.

*****

*****
forall (Y R P Q : Point) (lambda : F) (_ : on_parallel_d Y R P Q lambda), iff (eq R Y) (eq lambda F0)
+++++
intros.
-----
Lemma lambda_zero_on_parallel_d : forall Y R P Q lambda, on_parallel_d Y R P Q lambda -> (R=Y <-> lambda = 0).
Proof.
intros.

*****
H : on_parallel_d Y R P Q lambda
lambda : F
Y,R,P,Q : Point
*****
iff (eq R Y) (eq lambda F0)
+++++
unfold on_parallel_d in *.
-----
Lemma lambda_zero_on_parallel_d : forall Y R P Q lambda, on_parallel_d Y R P Q lambda -> (R=Y <-> lambda = 0).
Proof.
intros.
unfold on_parallel_d in *.

*****
H : and (not (eq P Q))\n (and (parallel Y R P Q) (eq (DSeg R Y) (Fmult lambda (DSeg P Q))))
lambda : F
Y,R,P,Q : Point
*****
iff (eq R Y) (eq lambda F0)
+++++
DecompAndAll.
-----
Lemma lambda_zero_on_parallel_d : forall Y R P Q lambda, on_parallel_d Y R P Q lambda -> (R=Y <-> lambda = 0).
Proof.
intros.
unfold on_parallel_d in *.
DecompAndAll.

*****
H3 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H2 : parallel Y R P Q
H0 : not (eq P Q)
lambda : F
Y,R,P,Q : Point
*****
iff (eq R Y) (eq lambda F0)
+++++
split.
-----
Lemma lambda_zero_on_parallel_d : forall Y R P Q lambda, on_parallel_d Y R P Q lambda -> (R=Y <-> lambda = 0).
Proof.
intros.
unfold on_parallel_d in *.
DecompAndAll.
split.

*****
H3 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H2 : parallel Y R P Q
H0 : not (eq P Q)
lambda : F
Y,R,P,Q : Point
*****
forall _ : eq R Y, eq lambda F0
+++++
intro.
-----
Lemma lambda_zero_on_parallel_d : forall Y R P Q lambda, on_parallel_d Y R P Q lambda -> (R=Y <-> lambda = 0).
Proof.
intros.
unfold on_parallel_d in *.
DecompAndAll.
split.
intro.

*****
H : eq R Y
H3 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H2 : parallel Y R P Q
H0 : not (eq P Q)
lambda : F
Y,R,P,Q : Point
*****
eq lambda F0
+++++
subst Y.
-----
Lemma lambda_zero_on_parallel_d : forall Y R P Q lambda, on_parallel_d Y R P Q lambda -> (R=Y <-> lambda = 0).
Proof.
intros.
unfold on_parallel_d in *.
DecompAndAll.
split.
intro.
subst Y.

*****
H2 : parallel R R P Q
H3 : eq (DSeg R R) (Fmult lambda (DSeg P Q))
H0 : not (eq P Q)
lambda : F
R,P,Q : Point
*****
eq lambda F0
+++++
basic_simpl.
-----
Lemma lambda_zero_on_parallel_d : forall Y R P Q lambda, on_parallel_d Y R P Q lambda -> (R=Y <-> lambda = 0).
Proof.
intros.
unfold on_parallel_d in *.
DecompAndAll.
split.
intro.
subst Y.
basic_simpl.

*****
H2 : parallel R R P Q
H3 : eq F0 (Fmult lambda (DSeg P Q))
H0 : not (eq P Q)
lambda : F
R,P,Q : Point
*****
eq lambda F0
+++++
IsoleVar (lambda) H3.
-----
Lemma lambda_zero_on_parallel_d : forall Y R P Q lambda, on_parallel_d Y R P Q lambda -> (R=Y <-> lambda = 0).
Proof.
intros.
unfold on_parallel_d in *.
DecompAndAll.
split.
intro.
subst Y.
basic_simpl.
IsoleVar (lambda) H3.

*****
H3 : eq lambda (Fdiv F0 (DSeg P Q))
H : not (eq (DSeg P Q) F0)
H2 : parallel R R P Q
H0 : not (eq P Q)
lambda : F
R,P,Q : Point
*****
eq lambda F0
+++++
rewrite H3.
-----
Lemma lambda_zero_on_parallel_d : forall Y R P Q lambda, on_parallel_d Y R P Q lambda -> (R=Y <-> lambda = 0).
Proof.
intros.
unfold on_parallel_d in *.
DecompAndAll.
split.
intro.
subst Y.
basic_simpl.
IsoleVar (lambda) H3.
rewrite H3.

*****
H3 : eq lambda (Fdiv F0 (DSeg P Q))
H : not (eq (DSeg P Q) F0)
H2 : parallel R R P Q
H0 : not (eq P Q)
lambda : F
R,P,Q : Point
*****
eq (Fdiv F0 (DSeg P Q)) F0
+++++
field.
-----
Lemma lambda_zero_on_parallel_d : forall Y R P Q lambda, on_parallel_d Y R P Q lambda -> (R=Y <-> lambda = 0).
Proof.
intros.
unfold on_parallel_d in *.
DecompAndAll.
split.
intro.
subst Y.
basic_simpl.
IsoleVar (lambda) H3.
rewrite H3.
field.

*****
H3 : eq lambda (Fdiv F0 (DSeg P Q))
H : not (eq (DSeg P Q) F0)
H2 : parallel R R P Q
H0 : not (eq P Q)
lambda : F
R,P,Q : Point
*****
not (eq (DSeg P Q) F0)
+++++
Geometry.
-----
Lemma lambda_zero_on_parallel_d : forall Y R P Q lambda, on_parallel_d Y R P Q lambda -> (R=Y <-> lambda = 0).
Proof.
intros.
unfold on_parallel_d in *.
DecompAndAll.
split.
intro.
subst Y.
basic_simpl.
IsoleVar (lambda) H3.

*****
H2 : parallel R R P Q
H3 : eq F0 (Fmult lambda (DSeg P Q))
H0 : not (eq P Q)
lambda : F
R,P,Q : Point
*****
not (eq (DSeg P Q) F0)
+++++
Geometry.
-----
Lemma lambda_zero_on_parallel_d : forall Y R P Q lambda, on_parallel_d Y R P Q lambda -> (R=Y <-> lambda = 0).
Proof.
intros.
unfold on_parallel_d in *.
DecompAndAll.
split.

*****
H3 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H2 : parallel Y R P Q
H0 : not (eq P Q)
lambda : F
Y,R,P,Q : Point
*****
forall _ : eq lambda F0, eq R Y
+++++
intro.
-----
Lemma lambda_zero_on_parallel_d : forall Y R P Q lambda, on_parallel_d Y R P Q lambda -> (R=Y <-> lambda = 0).
Proof.
intros.
unfold on_parallel_d in *.
DecompAndAll.
split.
intro.

*****
H : eq lambda F0
H3 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H2 : parallel Y R P Q
H0 : not (eq P Q)
lambda : F
Y,R,P,Q : Point
*****
eq R Y
+++++
subst lambda.
-----
Lemma lambda_zero_on_parallel_d : forall Y R P Q lambda, on_parallel_d Y R P Q lambda -> (R=Y <-> lambda = 0).
Proof.
intros.
unfold on_parallel_d in *.
DecompAndAll.
split.
intro.
subst lambda.

*****
H3 : eq (DSeg R Y) (Fmult F0 (DSeg P Q))
H2 : parallel Y R P Q
H0 : not (eq P Q)
Y,R,P,Q : Point
*****
eq R Y
+++++
basic_simpl.
-----
Lemma lambda_zero_on_parallel_d : forall Y R P Q lambda, on_parallel_d Y R P Q lambda -> (R=Y <-> lambda = 0).
Proof.
intros.
unfold on_parallel_d in *.
DecompAndAll.
split.
intro.
subst lambda.
basic_simpl.

*****
H3 : eq (DSeg R Y) F0
H2 : parallel Y R P Q
H0 : not (eq P Q)
Y,R,P,Q : Point
*****
eq R Y
+++++
Geometry.
-----
Lemma lambda_zero_on_parallel_d : forall Y R P Q lambda, on_parallel_d Y R P Q lambda -> (R=Y <-> lambda = 0).
Proof.
intros.
unfold on_parallel_d in *.
DecompAndAll.
split.

*****

*****

+++++
Qed.
-----
Lemma invariant_par_on_parallel_d_1_length_ratio :\n    forall (A C D P Q R Y : Point) (lambda : F),\n    on_parallel_d Y R P Q lambda -> \n    S A R Y = 0 -> \n    R <> Y -> \n    parallel A Y C D -> \n    parallel A R P Q.
-----
Lemma invariant_par_on_parallel_d_1_length_ratio : forall (A C D P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> S A R Y = 0 -> R <> Y -> parallel A Y C D -> parallel A R P Q.

*****

*****
forall (A C D P Q R Y : Point) (lambda : F) (_ : on_parallel_d Y R P Q lambda) (_ : eq (S A R Y) F0) (_ : not (eq R Y)) (_ : parallel A Y C D), parallel A R P Q
+++++
Proof.
-----
Lemma invariant_par_on_parallel_d_1_length_ratio : forall (A C D P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> S A R Y = 0 -> R <> Y -> parallel A Y C D -> parallel A R P Q.
Proof.

*****

*****
forall (A C D P Q R Y : Point) (lambda : F) (_ : on_parallel_d Y R P Q lambda) (_ : eq (S A R Y) F0) (_ : not (eq R Y)) (_ : parallel A Y C D), parallel A R P Q
+++++
intros.
-----
Lemma invariant_par_on_parallel_d_1_length_ratio : forall (A C D P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> S A R Y = 0 -> R <> Y -> parallel A Y C D -> parallel A R P Q.
Proof.
intros.

*****
H2 : parallel A Y C D
H1 : not (eq R Y)
H0 : eq (S A R Y) F0
H : on_parallel_d Y R P Q lambda
lambda : F
A,C,D,P,Q,R,Y : Point
*****
parallel A R P Q
+++++
unfold on_parallel_d in *.
-----
Lemma invariant_par_on_parallel_d_1_length_ratio : forall (A C D P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> S A R Y = 0 -> R <> Y -> parallel A Y C D -> parallel A R P Q.
Proof.
intros.
unfold on_parallel_d in *.

*****
H2 : parallel A Y C D
H1 : not (eq R Y)
H0 : eq (S A R Y) F0
H : and (not (eq P Q))\n (and (parallel Y R P Q) (eq (DSeg R Y) (Fmult lambda (DSeg P Q))))
lambda : F
A,C,D,P,Q,R,Y : Point
*****
parallel A R P Q
+++++
DecompAndAll.
-----
Lemma invariant_par_on_parallel_d_1_length_ratio : forall (A C D P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> S A R Y = 0 -> R <> Y -> parallel A Y C D -> parallel A R P Q.
Proof.
intros.
unfold on_parallel_d in *.
DecompAndAll.

*****
H6 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H5 : parallel Y R P Q
H3 : not (eq P Q)
H2 : parallel A Y C D
H1 : not (eq R Y)
H0 : eq (S A R Y) F0
lambda : F
A,C,D,P,Q,R,Y : Point
*****
parallel A R P Q
+++++
cut (parallel P Q R A).
-----
Lemma invariant_par_on_parallel_d_1_length_ratio : forall (A C D P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> S A R Y = 0 -> R <> Y -> parallel A Y C D -> parallel A R P Q.
Proof.
intros.
unfold on_parallel_d in *.
DecompAndAll.
cut (parallel P Q R A).

*****
H6 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H5 : parallel Y R P Q
H3 : not (eq P Q)
H2 : parallel A Y C D
H1 : not (eq R Y)
H0 : eq (S A R Y) F0
lambda : F
A,C,D,P,Q,R,Y : Point
*****
forall _ : parallel P Q R A, parallel A R P Q
+++++
Geometry.
-----
Lemma invariant_par_on_parallel_d_1_length_ratio : forall (A C D P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> S A R Y = 0 -> R <> Y -> parallel A Y C D -> parallel A R P Q.
Proof.
intros.
unfold on_parallel_d in *.
DecompAndAll.
cut (parallel P Q R A).

*****
H6 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H5 : parallel Y R P Q
H3 : not (eq P Q)
H2 : parallel A Y C D
H1 : not (eq R Y)
H0 : eq (S A R Y) F0
lambda : F
A,C,D,P,Q,R,Y : Point
*****
parallel P Q R A
+++++
Geometry.
-----
Lemma invariant_par_on_parallel_d_1_length_ratio : forall (A C D P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> S A R Y = 0 -> R <> Y -> parallel A Y C D -> parallel A R P Q.
Proof.
intros.
unfold on_parallel_d in *.
DecompAndAll.
cut (parallel P Q R A).
Geometry.

*****
H6 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H5 : parallel Y R P Q
H3 : not (eq P Q)
H2 : parallel A Y C D
H1 : not (eq R Y)
H0 : eq (S A R Y) F0
lambda : F
A,C,D,P,Q,R,Y : Point
*****
parallel P Q R A
+++++
eapply col_par_par.
-----
Lemma invariant_par_on_parallel_d_1_length_ratio : forall (A C D P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> S A R Y = 0 -> R <> Y -> parallel A Y C D -> parallel A R P Q.
Proof.
intros.
unfold on_parallel_d in *.
DecompAndAll.
cut (parallel P Q R A).
Geometry.
eapply col_par_par.

*****
H6 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H5 : parallel Y R P Q
H3 : not (eq P Q)
H2 : parallel A Y C D
H1 : not (eq R Y)
H0 : eq (S A R Y) F0
lambda : F
A,C,D,P,Q,R,Y : Point
*****
not (eq R ?D)
+++++
apply H1.
-----
Lemma invariant_par_on_parallel_d_1_length_ratio : forall (A C D P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> S A R Y = 0 -> R <> Y -> parallel A Y C D -> parallel A R P Q.
Proof.
intros.
unfold on_parallel_d in *.
DecompAndAll.
cut (parallel P Q R A).
Geometry.
eapply col_par_par.

*****
H6 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H5 : parallel Y R P Q
H3 : not (eq P Q)
H2 : parallel A Y C D
H1 : not (eq R Y)
H0 : eq (S A R Y) F0
lambda : F
A,C,D,P,Q,R,Y : Point
*****
parallel P Q R Y
+++++
Geometry.
-----
Lemma invariant_par_on_parallel_d_1_length_ratio : forall (A C D P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> S A R Y = 0 -> R <> Y -> parallel A Y C D -> parallel A R P Q.
Proof.
intros.
unfold on_parallel_d in *.
DecompAndAll.
cut (parallel P Q R A).
Geometry.
eapply col_par_par.

*****
H6 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H5 : parallel Y R P Q
H3 : not (eq P Q)
H2 : parallel A Y C D
H1 : not (eq R Y)
H0 : eq (S A R Y) F0
lambda : F
A,C,D,P,Q,R,Y : Point
*****
Col R Y A
+++++
Geometry.
-----
Lemma invariant_par_on_parallel_d_1_length_ratio : forall (A C D P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> S A R Y = 0 -> R <> Y -> parallel A Y C D -> parallel A R P Q.
Proof.
intros.
unfold on_parallel_d in *.
DecompAndAll.
cut (parallel P Q R A).

*****

*****

+++++
Qed.
-----
Lemma invariant_par_on_parallel_d_1_length_ratio_2 :\n    forall (A C D P Q R Y : Point) (lambda : F),\n    on_parallel_d Y R P Q lambda -> \n    S A R Y = 0 -> \n    R<>Y ->\n    A<>Y ->\n    parallel A Y C D -> \n    parallel C D P Q.
-----
Lemma invariant_par_on_parallel_d_1_length_ratio_2 : forall (A C D P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> S A R Y = 0 -> R<>Y -> A<>Y -> parallel A Y C D -> parallel C D P Q.

*****

*****
forall (A C D P Q R Y : Point) (lambda : F) (_ : on_parallel_d Y R P Q lambda) (_ : eq (S A R Y) F0) (_ : not (eq R Y)) (_ : not (eq A Y)) (_ : parallel A Y C D), parallel C D P Q
+++++
Proof.
-----
Lemma invariant_par_on_parallel_d_1_length_ratio_2 : forall (A C D P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> S A R Y = 0 -> R<>Y -> A<>Y -> parallel A Y C D -> parallel C D P Q.
Proof.

*****

*****
forall (A C D P Q R Y : Point) (lambda : F) (_ : on_parallel_d Y R P Q lambda) (_ : eq (S A R Y) F0) (_ : not (eq R Y)) (_ : not (eq A Y)) (_ : parallel A Y C D), parallel C D P Q
+++++
intros.
-----
Lemma invariant_par_on_parallel_d_1_length_ratio_2 : forall (A C D P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> S A R Y = 0 -> R<>Y -> A<>Y -> parallel A Y C D -> parallel C D P Q.
Proof.
intros.

*****
H3 : parallel A Y C D
H2 : not (eq A Y)
H1 : not (eq R Y)
H0 : eq (S A R Y) F0
H : on_parallel_d Y R P Q lambda
lambda : F
A,C,D,P,Q,R,Y : Point
*****
parallel C D P Q
+++++
unfold on_parallel_d in *.
-----
Lemma invariant_par_on_parallel_d_1_length_ratio_2 : forall (A C D P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> S A R Y = 0 -> R<>Y -> A<>Y -> parallel A Y C D -> parallel C D P Q.
Proof.
intros.
unfold on_parallel_d in *.

*****
H3 : parallel A Y C D
H2 : not (eq A Y)
H1 : not (eq R Y)
H0 : eq (S A R Y) F0
H : and (not (eq P Q))\n (and (parallel Y R P Q) (eq (DSeg R Y) (Fmult lambda (DSeg P Q))))
lambda : F
A,C,D,P,Q,R,Y : Point
*****
parallel C D P Q
+++++
DecompAndAll.
-----
Lemma invariant_par_on_parallel_d_1_length_ratio_2 : forall (A C D P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> S A R Y = 0 -> R<>Y -> A<>Y -> parallel A Y C D -> parallel C D P Q.
Proof.
intros.
unfold on_parallel_d in *.
DecompAndAll.

*****
H7 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H6 : parallel Y R P Q
H4 : not (eq P Q)
H3 : parallel A Y C D
H2 : not (eq A Y)
H1 : not (eq R Y)
H0 : eq (S A R Y) F0
lambda : F
A,C,D,P,Q,R,Y : Point
*****
parallel C D P Q
+++++
assert (parallel P Q Y A).
-----
Lemma invariant_par_on_parallel_d_1_length_ratio_2 : forall (A C D P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> S A R Y = 0 -> R<>Y -> A<>Y -> parallel A Y C D -> parallel C D P Q.
Proof.
intros.
unfold on_parallel_d in *.
DecompAndAll.
assert (parallel P Q Y A).

*****
H7 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H6 : parallel Y R P Q
H4 : not (eq P Q)
H3 : parallel A Y C D
H2 : not (eq A Y)
H1 : not (eq R Y)
H0 : eq (S A R Y) F0
lambda : F
A,C,D,P,Q,R,Y : Point
*****
parallel P Q Y A
+++++
eapply col_par_par.
-----
Lemma invariant_par_on_parallel_d_1_length_ratio_2 : forall (A C D P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> S A R Y = 0 -> R<>Y -> A<>Y -> parallel A Y C D -> parallel C D P Q.
Proof.
intros.
unfold on_parallel_d in *.
DecompAndAll.
assert (parallel P Q Y A).
eapply col_par_par.

*****
H7 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H6 : parallel Y R P Q
H4 : not (eq P Q)
H3 : parallel A Y C D
H2 : not (eq A Y)
H1 : not (eq R Y)
H0 : eq (S A R Y) F0
lambda : F
A,C,D,P,Q,R,Y : Point
*****
not (eq Y ?D)
+++++
assert (Y<>R).
-----
Lemma invariant_par_on_parallel_d_1_length_ratio_2 : forall (A C D P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> S A R Y = 0 -> R<>Y -> A<>Y -> parallel A Y C D -> parallel C D P Q.
Proof.
intros.
unfold on_parallel_d in *.
DecompAndAll.
assert (parallel P Q Y A).
eapply col_par_par.
assert (Y<>R).

*****
H7 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H6 : parallel Y R P Q
H4 : not (eq P Q)
H3 : parallel A Y C D
H2 : not (eq A Y)
H1 : not (eq R Y)
H0 : eq (S A R Y) F0
lambda : F
A,C,D,P,Q,R,Y : Point
*****
not (eq Y R)
+++++
Geometry.
-----
Lemma invariant_par_on_parallel_d_1_length_ratio_2 : forall (A C D P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> S A R Y = 0 -> R<>Y -> A<>Y -> parallel A Y C D -> parallel C D P Q.
Proof.
intros.
unfold on_parallel_d in *.
DecompAndAll.
assert (parallel P Q Y A).
eapply col_par_par.
assert (Y<>R).

*****
H : not (eq Y R)
H7 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H6 : parallel Y R P Q
H4 : not (eq P Q)
H3 : parallel A Y C D
H2 : not (eq A Y)
H1 : not (eq R Y)
H0 : eq (S A R Y) F0
lambda : F
A,C,D,P,Q,R,Y : Point
*****
not (eq Y ?D)
+++++
Geometry.
-----
Lemma invariant_par_on_parallel_d_1_length_ratio_2 : forall (A C D P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> S A R Y = 0 -> R<>Y -> A<>Y -> parallel A Y C D -> parallel C D P Q.
Proof.
intros.
unfold on_parallel_d in *.
DecompAndAll.
assert (parallel P Q Y A).
eapply col_par_par.
assert (Y<>R).
Geometry.

*****
H : not (eq Y R)
H7 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H6 : parallel Y R P Q
H4 : not (eq P Q)
H3 : parallel A Y C D
H2 : not (eq A Y)
H1 : not (eq R Y)
H0 : eq (S A R Y) F0
lambda : F
A,C,D,P,Q,R,Y : Point
*****
not (eq Y ?D)
+++++
apply H.
-----
Lemma invariant_par_on_parallel_d_1_length_ratio_2 : forall (A C D P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> S A R Y = 0 -> R<>Y -> A<>Y -> parallel A Y C D -> parallel C D P Q.
Proof.
intros.
unfold on_parallel_d in *.
DecompAndAll.
assert (parallel P Q Y A).
eapply col_par_par.

*****
H7 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H6 : parallel Y R P Q
H4 : not (eq P Q)
H3 : parallel A Y C D
H2 : not (eq A Y)
H1 : not (eq R Y)
H0 : eq (S A R Y) F0
lambda : F
A,C,D,P,Q,R,Y : Point
*****
parallel P Q Y R
+++++
Geometry.
-----
Lemma invariant_par_on_parallel_d_1_length_ratio_2 : forall (A C D P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> S A R Y = 0 -> R<>Y -> A<>Y -> parallel A Y C D -> parallel C D P Q.
Proof.
intros.
unfold on_parallel_d in *.
DecompAndAll.
assert (parallel P Q Y A).
eapply col_par_par.

*****
H7 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H6 : parallel Y R P Q
H4 : not (eq P Q)
H3 : parallel A Y C D
H2 : not (eq A Y)
H1 : not (eq R Y)
H0 : eq (S A R Y) F0
lambda : F
A,C,D,P,Q,R,Y : Point
*****
Col Y R A
+++++
Geometry.
-----
Lemma invariant_par_on_parallel_d_1_length_ratio_2 : forall (A C D P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> S A R Y = 0 -> R<>Y -> A<>Y -> parallel A Y C D -> parallel C D P Q.
Proof.
intros.
unfold on_parallel_d in *.
DecompAndAll.
assert (parallel P Q Y A).

*****
H : parallel P Q Y A
H7 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H6 : parallel Y R P Q
H4 : not (eq P Q)
H3 : parallel A Y C D
H2 : not (eq A Y)
H1 : not (eq R Y)
H0 : eq (S A R Y) F0
lambda : F
A,C,D,P,Q,R,Y : Point
*****
parallel C D P Q
+++++
eapply parallel_transitivity.
-----
Lemma invariant_par_on_parallel_d_1_length_ratio_2 : forall (A C D P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> S A R Y = 0 -> R<>Y -> A<>Y -> parallel A Y C D -> parallel C D P Q.
Proof.
intros.
unfold on_parallel_d in *.
DecompAndAll.
assert (parallel P Q Y A).
eapply parallel_transitivity.

*****
H : parallel P Q Y A
H7 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H6 : parallel Y R P Q
H4 : not (eq P Q)
H3 : parallel A Y C D
H2 : not (eq A Y)
H1 : not (eq R Y)
H0 : eq (S A R Y) F0
lambda : F
A,C,D,P,Q,R,Y : Point
*****
not (eq ?C ?D)
+++++
apply H2.
-----
Lemma invariant_par_on_parallel_d_1_length_ratio_2 : forall (A C D P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> S A R Y = 0 -> R<>Y -> A<>Y -> parallel A Y C D -> parallel C D P Q.
Proof.
intros.
unfold on_parallel_d in *.
DecompAndAll.
assert (parallel P Q Y A).
eapply parallel_transitivity.

*****
H : parallel P Q Y A
H7 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H6 : parallel Y R P Q
H4 : not (eq P Q)
H3 : parallel A Y C D
H2 : not (eq A Y)
H1 : not (eq R Y)
H0 : eq (S A R Y) F0
lambda : F
A,C,D,P,Q,R,Y : Point
*****
parallel C D A Y
+++++
Geometry.
-----
Lemma invariant_par_on_parallel_d_1_length_ratio_2 : forall (A C D P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> S A R Y = 0 -> R<>Y -> A<>Y -> parallel A Y C D -> parallel C D P Q.
Proof.
intros.
unfold on_parallel_d in *.
DecompAndAll.
assert (parallel P Q Y A).
eapply parallel_transitivity.

*****
H : parallel P Q Y A
H7 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H6 : parallel Y R P Q
H4 : not (eq P Q)
H3 : parallel A Y C D
H2 : not (eq A Y)
H1 : not (eq R Y)
H0 : eq (S A R Y) F0
lambda : F
A,C,D,P,Q,R,Y : Point
*****
parallel A Y P Q
+++++
Geometry.
-----
Lemma invariant_par_on_parallel_d_1_length_ratio_2 : forall (A C D P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> S A R Y = 0 -> R<>Y -> A<>Y -> parallel A Y C D -> parallel C D P Q.
Proof.
intros.
unfold on_parallel_d in *.
DecompAndAll.
assert (parallel P Q Y A).

*****

*****

+++++
Qed.
-----
Theorem elim_length_ratio_on_parallel_d_1 :\n forall (A C D P Q R Y : Point) (lambda : F),\n on_parallel_d Y R P Q lambda ->\n S A R Y = 0 ->\n C <> D ->\n A ** Y / C ** D = (A ** R / P ** Q + lambda) / (C ** D / P ** Q).
-----
Theorem elim_length_ratio_on_parallel_d_1 : forall (A C D P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> S A R Y = 0 -> C <> D -> A ** Y / C ** D = (A ** R / P ** Q + lambda) / (C ** D / P ** Q).

*****

*****
forall (A C D P Q R Y : Point) (lambda : F) (_ : on_parallel_d Y R P Q lambda) (_ : eq (S A R Y) F0) (_ : not (eq C D)), eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (Fplus (Fdiv (DSeg A R) (DSeg P Q)) lambda) (Fdiv (DSeg C D) (DSeg P Q)))
+++++
Proof.
-----
Theorem elim_length_ratio_on_parallel_d_1 : forall (A C D P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> S A R Y = 0 -> C <> D -> A ** Y / C ** D = (A ** R / P ** Q + lambda) / (C ** D / P ** Q).
Proof.

*****

*****
forall (A C D P Q R Y : Point) (lambda : F) (_ : on_parallel_d Y R P Q lambda) (_ : eq (S A R Y) F0) (_ : not (eq C D)), eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (Fplus (Fdiv (DSeg A R) (DSeg P Q)) lambda) (Fdiv (DSeg C D) (DSeg P Q)))
+++++
intros.
-----
Theorem elim_length_ratio_on_parallel_d_1 : forall (A C D P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> S A R Y = 0 -> C <> D -> A ** Y / C ** D = (A ** R / P ** Q + lambda) / (C ** D / P ** Q).
Proof.
intros.

*****
H1 : not (eq C D)
H0 : eq (S A R Y) F0
H : on_parallel_d Y R P Q lambda
lambda : F
A,C,D,P,Q,R,Y : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (Fplus (Fdiv (DSeg A R) (DSeg P Q)) lambda) (Fdiv (DSeg C D) (DSeg P Q)))
+++++
unfold on_parallel_d in H.
-----
Theorem elim_length_ratio_on_parallel_d_1 : forall (A C D P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> S A R Y = 0 -> C <> D -> A ** Y / C ** D = (A ** R / P ** Q + lambda) / (C ** D / P ** Q).
Proof.
intros.
unfold on_parallel_d in H.

*****
H1 : not (eq C D)
H0 : eq (S A R Y) F0
H : and (not (eq P Q))\n (and (parallel Y R P Q) (eq (DSeg R Y) (Fmult lambda (DSeg P Q))))
lambda : F
A,C,D,P,Q,R,Y : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (Fplus (Fdiv (DSeg A R) (DSeg P Q)) lambda) (Fdiv (DSeg C D) (DSeg P Q)))
+++++
DecompAndAll.
-----
Theorem elim_length_ratio_on_parallel_d_1 : forall (A C D P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> S A R Y = 0 -> C <> D -> A ** Y / C ** D = (A ** R / P ** Q + lambda) / (C ** D / P ** Q).
Proof.
intros.
unfold on_parallel_d in H.
DecompAndAll.

*****
H5 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H4 : parallel Y R P Q
H2 : not (eq P Q)
H1 : not (eq C D)
H0 : eq (S A R Y) F0
lambda : F
A,C,D,P,Q,R,Y : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (Fplus (Fdiv (DSeg A R) (DSeg P Q)) lambda) (Fdiv (DSeg C D) (DSeg P Q)))
+++++
assert (A ** Y + Y ** R = A ** R).
-----
Theorem elim_length_ratio_on_parallel_d_1 : forall (A C D P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> S A R Y = 0 -> C <> D -> A ** Y / C ** D = (A ** R / P ** Q + lambda) / (C ** D / P ** Q).
Proof.
intros.
unfold on_parallel_d in H.
DecompAndAll.
assert (A ** Y + Y ** R = A ** R).

*****
H5 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H4 : parallel Y R P Q
H2 : not (eq P Q)
H1 : not (eq C D)
H0 : eq (S A R Y) F0
lambda : F
A,C,D,P,Q,R,Y : Point
*****
eq (Fplus (DSeg A Y) (DSeg Y R)) (DSeg A R)
+++++
Geometry.
-----
Theorem elim_length_ratio_on_parallel_d_1 : forall (A C D P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> S A R Y = 0 -> C <> D -> A ** Y / C ** D = (A ** R / P ** Q + lambda) / (C ** D / P ** Q).
Proof.
intros.
unfold on_parallel_d in H.
DecompAndAll.
assert (A ** Y + Y ** R = A ** R).

*****
H : eq (Fplus (DSeg A Y) (DSeg Y R)) (DSeg A R)
H5 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H4 : parallel Y R P Q
H2 : not (eq P Q)
H1 : not (eq C D)
H0 : eq (S A R Y) F0
lambda : F
A,C,D,P,Q,R,Y : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (Fplus (Fdiv (DSeg A R) (DSeg P Q)) lambda) (Fdiv (DSeg C D) (DSeg P Q)))
+++++
Geometry.
-----
Theorem elim_length_ratio_on_parallel_d_1 : forall (A C D P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> S A R Y = 0 -> C <> D -> A ** Y / C ** D = (A ** R / P ** Q + lambda) / (C ** D / P ** Q).
Proof.
intros.
unfold on_parallel_d in H.
DecompAndAll.
assert (A ** Y + Y ** R = A ** R).
Geometry.

*****
H : eq (Fplus (DSeg A Y) (DSeg Y R)) (DSeg A R)
H5 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H4 : parallel Y R P Q
H2 : not (eq P Q)
H1 : not (eq C D)
H0 : eq (S A R Y) F0
lambda : F
A,C,D,P,Q,R,Y : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (Fplus (Fdiv (DSeg A R) (DSeg P Q)) lambda) (Fdiv (DSeg C D) (DSeg P Q)))
+++++
assert (Y ** R = - R ** Y).
-----
Theorem elim_length_ratio_on_parallel_d_1 : forall (A C D P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> S A R Y = 0 -> C <> D -> A ** Y / C ** D = (A ** R / P ** Q + lambda) / (C ** D / P ** Q).
Proof.
intros.
unfold on_parallel_d in H.
DecompAndAll.
assert (A ** Y + Y ** R = A ** R).
Geometry.
assert (Y ** R = - R ** Y).

*****
H : eq (Fplus (DSeg A Y) (DSeg Y R)) (DSeg A R)
H5 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H4 : parallel Y R P Q
H2 : not (eq P Q)
H1 : not (eq C D)
H0 : eq (S A R Y) F0
lambda : F
A,C,D,P,Q,R,Y : Point
*****
eq (DSeg Y R) (Fopp (DSeg R Y))
+++++
Geometry.
-----
Theorem elim_length_ratio_on_parallel_d_1 : forall (A C D P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> S A R Y = 0 -> C <> D -> A ** Y / C ** D = (A ** R / P ** Q + lambda) / (C ** D / P ** Q).
Proof.
intros.
unfold on_parallel_d in H.
DecompAndAll.
assert (A ** Y + Y ** R = A ** R).
Geometry.
assert (Y ** R = - R ** Y).

*****
H3 : eq (DSeg Y R) (Fopp (DSeg R Y))
H : eq (Fplus (DSeg A Y) (DSeg Y R)) (DSeg A R)
H5 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H4 : parallel Y R P Q
H2 : not (eq P Q)
H1 : not (eq C D)
H0 : eq (S A R Y) F0
lambda : F
A,C,D,P,Q,R,Y : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (Fplus (Fdiv (DSeg A R) (DSeg P Q)) lambda) (Fdiv (DSeg C D) (DSeg P Q)))
+++++
Geometry.
-----
Theorem elim_length_ratio_on_parallel_d_1 : forall (A C D P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> S A R Y = 0 -> C <> D -> A ** Y / C ** D = (A ** R / P ** Q + lambda) / (C ** D / P ** Q).
Proof.
intros.
unfold on_parallel_d in H.
DecompAndAll.
assert (A ** Y + Y ** R = A ** R).
Geometry.
assert (Y ** R = - R ** Y).
Geometry.

*****
H3 : eq (DSeg Y R) (Fopp (DSeg R Y))
H : eq (Fplus (DSeg A Y) (DSeg Y R)) (DSeg A R)
H5 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H4 : parallel Y R P Q
H2 : not (eq P Q)
H1 : not (eq C D)
H0 : eq (S A R Y) F0
lambda : F
A,C,D,P,Q,R,Y : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (Fplus (Fdiv (DSeg A R) (DSeg P Q)) lambda) (Fdiv (DSeg C D) (DSeg P Q)))
+++++
rewrite H3 in H.
-----
Theorem elim_length_ratio_on_parallel_d_1 : forall (A C D P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> S A R Y = 0 -> C <> D -> A ** Y / C ** D = (A ** R / P ** Q + lambda) / (C ** D / P ** Q).
Proof.
intros.
unfold on_parallel_d in H.
DecompAndAll.
assert (A ** Y + Y ** R = A ** R).
Geometry.
assert (Y ** R = - R ** Y).
Geometry.
rewrite H3 in H.

*****
H3 : eq (DSeg Y R) (Fopp (DSeg R Y))
H : eq (Fplus (DSeg A Y) (Fopp (DSeg R Y))) (DSeg A R)
H5 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H4 : parallel Y R P Q
H2 : not (eq P Q)
H1 : not (eq C D)
H0 : eq (S A R Y) F0
lambda : F
A,C,D,P,Q,R,Y : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (Fplus (Fdiv (DSeg A R) (DSeg P Q)) lambda) (Fdiv (DSeg C D) (DSeg P Q)))
+++++
RewriteVar (A ** Y) H.
-----
Theorem elim_length_ratio_on_parallel_d_1 : forall (A C D P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> S A R Y = 0 -> C <> D -> A ** Y / C ** D = (A ** R / P ** Q + lambda) / (C ** D / P ** Q).
Proof.
intros.
unfold on_parallel_d in H.
DecompAndAll.
assert (A ** Y + Y ** R = A ** R).
Geometry.
assert (Y ** R = - R ** Y).
Geometry.
rewrite H3 in H.
RewriteVar (A ** Y) H.

*****
H : eq (DSeg A Y) (Fplus (DSeg A R) (DSeg R Y))
H3 : eq (DSeg Y R) (Fopp (DSeg R Y))
H5 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H4 : parallel Y R P Q
H2 : not (eq P Q)
H1 : not (eq C D)
H0 : eq (S A R Y) F0
lambda : F
A,C,D,P,Q,R,Y : Point
*****
eq (Fdiv (Fplus (DSeg A R) (DSeg R Y)) (DSeg C D)) (Fdiv (Fplus (Fdiv (DSeg A R) (DSeg P Q)) lambda) (Fdiv (DSeg C D) (DSeg P Q)))
+++++
RewriteVar lambda H5.
-----
Theorem elim_length_ratio_on_parallel_d_1 : forall (A C D P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> S A R Y = 0 -> C <> D -> A ** Y / C ** D = (A ** R / P ** Q + lambda) / (C ** D / P ** Q).
Proof.
intros.
unfold on_parallel_d in H.
DecompAndAll.
assert (A ** Y + Y ** R = A ** R).
Geometry.
assert (Y ** R = - R ** Y).
Geometry.
rewrite H3 in H.
RewriteVar (A ** Y) H.
RewriteVar lambda H5.

*****
H5 : eq lambda (Fdiv (DSeg R Y) (DSeg P Q))
H6 : not (eq (DSeg P Q) F0)
H : eq (DSeg A Y) (Fplus (DSeg A R) (DSeg R Y))
H3 : eq (DSeg Y R) (Fopp (DSeg R Y))
H4 : parallel Y R P Q
H2 : not (eq P Q)
H1 : not (eq C D)
H0 : eq (S A R Y) F0
lambda : F
A,C,D,P,Q,R,Y : Point
*****
eq (Fdiv (Fplus (DSeg A R) (DSeg R Y)) (DSeg C D)) (Fdiv (Fplus (Fdiv (DSeg A R) (DSeg P Q)) (Fdiv (DSeg R Y) (DSeg P Q))) (Fdiv (DSeg C D) (DSeg P Q)))
+++++
Geometry.
-----
Theorem elim_length_ratio_on_parallel_d_1 : forall (A C D P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> S A R Y = 0 -> C <> D -> A ** Y / C ** D = (A ** R / P ** Q + lambda) / (C ** D / P ** Q).
Proof.
intros.
unfold on_parallel_d in H.
DecompAndAll.
assert (A ** Y + Y ** R = A ** R).
Geometry.
assert (Y ** R = - R ** Y).
Geometry.
rewrite H3 in H.
RewriteVar (A ** Y) H.
RewriteVar lambda H5.
Geometry.

*****
H5 : eq lambda (Fdiv (DSeg R Y) (DSeg P Q))
H6 : not (eq (DSeg P Q) F0)
H : eq (DSeg A Y) (Fplus (DSeg A R) (DSeg R Y))
H3 : eq (DSeg Y R) (Fopp (DSeg R Y))
H4 : parallel Y R P Q
H2 : not (eq P Q)
H1 : not (eq C D)
H0 : eq (S A R Y) F0
lambda : F
A,C,D,P,Q,R,Y : Point
*****
eq (Fdiv (Fplus (DSeg A R) (DSeg R Y)) (DSeg C D)) (Fdiv (Fplus (Fdiv (DSeg A R) (DSeg P Q)) (Fdiv (DSeg R Y) (DSeg P Q))) (Fdiv (DSeg C D) (DSeg P Q)))
+++++
field.
-----
Theorem elim_length_ratio_on_parallel_d_1 : forall (A C D P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> S A R Y = 0 -> C <> D -> A ** Y / C ** D = (A ** R / P ** Q + lambda) / (C ** D / P ** Q).
Proof.
intros.
unfold on_parallel_d in H.
DecompAndAll.
assert (A ** Y + Y ** R = A ** R).
Geometry.
assert (Y ** R = - R ** Y).
Geometry.
rewrite H3 in H.
RewriteVar (A ** Y) H.
RewriteVar lambda H5.
Geometry.
field.

*****
H5 : eq lambda (Fdiv (DSeg R Y) (DSeg P Q))
H6 : not (eq (DSeg P Q) F0)
H : eq (DSeg A Y) (Fplus (DSeg A R) (DSeg R Y))
H3 : eq (DSeg Y R) (Fopp (DSeg R Y))
H4 : parallel Y R P Q
H2 : not (eq P Q)
H1 : not (eq C D)
H0 : eq (S A R Y) F0
lambda : F
A,C,D,P,Q,R,Y : Point
*****
and (not (eq (DSeg P Q) F0)) (not (eq (DSeg C D) F0))
+++++
Geometry.
-----
Theorem elim_length_ratio_on_parallel_d_1 : forall (A C D P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> S A R Y = 0 -> C <> D -> A ** Y / C ** D = (A ** R / P ** Q + lambda) / (C ** D / P ** Q).
Proof.
intros.
unfold on_parallel_d in H.
DecompAndAll.
assert (A ** Y + Y ** R = A ** R).
Geometry.
assert (Y ** R = - R ** Y).
Geometry.
rewrite H3 in H.
RewriteVar (A ** Y) H.
RewriteVar lambda H5.

*****
H5 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H : eq (DSeg A Y) (Fplus (DSeg A R) (Fmult lambda (DSeg P Q)))
H3 : eq (DSeg Y R) (Fopp (Fmult lambda (DSeg P Q)))
H4 : parallel Y R P Q
H2 : not (eq P Q)
H1 : not (eq C D)
H0 : eq (S A R Y) F0
lambda : F
A,C,D,P,Q,R,Y : Point
*****
not (eq (DSeg P Q) F0)
+++++
Geometry.
-----
Theorem elim_length_ratio_on_parallel_d_1 : forall (A C D P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> S A R Y = 0 -> C <> D -> A ** Y / C ** D = (A ** R / P ** Q + lambda) / (C ** D / P ** Q).
Proof.
intros.
unfold on_parallel_d in H.
DecompAndAll.
assert (A ** Y + Y ** R = A ** R).

*****

*****

+++++
Qed.
-----
Lemma elim_length_ratio_on_parallel_d_2 :\n    forall (A C D P Q R Y : Point) (lambda : F),\n    on_parallel_d Y R P Q lambda ->\n    ~ Col A R Y ->\n    C <> D -> \n    parallel A Y C D -> \n    A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
-----
Lemma elim_length_ratio_on_parallel_d_2 : forall (A C D P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> ~ Col A R Y -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.

*****

*****
forall (A C D P Q R Y : Point) (lambda : F) (_ : on_parallel_d Y R P Q lambda) (_ : not (Col A R Y)) (_ : not (eq C D)) (_ : parallel A Y C D), eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (S4 A P R Q) (S4 C P D Q))
+++++
Proof.
-----
Lemma elim_length_ratio_on_parallel_d_2 : forall (A C D P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> ~ Col A R Y -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.

*****

*****
forall (A C D P Q R Y : Point) (lambda : F) (_ : on_parallel_d Y R P Q lambda) (_ : not (Col A R Y)) (_ : not (eq C D)) (_ : parallel A Y C D), eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (S4 A P R Q) (S4 C P D Q))
+++++
intros.
-----
Lemma elim_length_ratio_on_parallel_d_2 : forall (A C D P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> ~ Col A R Y -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
intros.

*****
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (Col A R Y)
H : on_parallel_d Y R P Q lambda
lambda : F
A,C,D,P,Q,R,Y : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (S4 A P R Q) (S4 C P D Q))
+++++
unfold on_parallel_d in H.
-----
Lemma elim_length_ratio_on_parallel_d_2 : forall (A C D P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> ~ Col A R Y -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
intros.
unfold on_parallel_d in H.

*****
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (Col A R Y)
H : and (not (eq P Q))\n (and (parallel Y R P Q) (eq (DSeg R Y) (Fmult lambda (DSeg P Q))))
lambda : F
A,C,D,P,Q,R,Y : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (S4 A P R Q) (S4 C P D Q))
+++++
DecompAndAll.
-----
Lemma elim_length_ratio_on_parallel_d_2 : forall (A C D P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> ~ Col A R Y -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
intros.
unfold on_parallel_d in H.
DecompAndAll.

*****
H6 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H5 : parallel Y R P Q
H3 : not (eq P Q)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (Col A R Y)
lambda : F
A,C,D,P,Q,R,Y : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (S4 A P R Q) (S4 C P D Q))
+++++
assert (~R=Y).
-----
Lemma elim_length_ratio_on_parallel_d_2 : forall (A C D P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> ~ Col A R Y -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
intros.
unfold on_parallel_d in H.
DecompAndAll.
assert (~R=Y).

*****
H6 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H5 : parallel Y R P Q
H3 : not (eq P Q)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (Col A R Y)
lambda : F
A,C,D,P,Q,R,Y : Point
*****
not (eq R Y)
+++++
unfold not.
-----
Lemma elim_length_ratio_on_parallel_d_2 : forall (A C D P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> ~ Col A R Y -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
intros.
unfold on_parallel_d in H.
DecompAndAll.
assert (~R=Y).
unfold not.

*****
H6 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H5 : parallel Y R P Q
H3 : not (eq P Q)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (Col A R Y)
lambda : F
A,C,D,P,Q,R,Y : Point
*****
forall _ : eq R Y, False
+++++
intro.
-----
Lemma elim_length_ratio_on_parallel_d_2 : forall (A C D P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> ~ Col A R Y -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
intros.
unfold on_parallel_d in H.
DecompAndAll.
assert (~R=Y).
unfold not.
intro.

*****
H : eq R Y
H6 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H5 : parallel Y R P Q
H3 : not (eq P Q)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (Col A R Y)
lambda : F
A,C,D,P,Q,R,Y : Point
*****
False
+++++
subst R.
-----
Lemma elim_length_ratio_on_parallel_d_2 : forall (A C D P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> ~ Col A R Y -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
intros.
unfold on_parallel_d in H.
DecompAndAll.
assert (~R=Y).
unfold not.
intro.
subst R.

*****
H5 : parallel Y Y P Q
H6 : eq (DSeg Y Y) (Fmult lambda (DSeg P Q))
H3 : not (eq P Q)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (Col A Y Y)
lambda : F
A,C,D,P,Q,Y : Point
*****
False
+++++
Geometry.
-----
Lemma elim_length_ratio_on_parallel_d_2 : forall (A C D P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> ~ Col A R Y -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
intros.
unfold on_parallel_d in H.
DecompAndAll.
assert (~R=Y).

*****
H : not (eq R Y)
H6 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H5 : parallel Y R P Q
H3 : not (eq P Q)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (Col A R Y)
lambda : F
A,C,D,P,Q,R,Y : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (S4 A P R Q) (S4 C P D Q))
+++++
assert (parallel R Y P Q).
-----
Lemma elim_length_ratio_on_parallel_d_2 : forall (A C D P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> ~ Col A R Y -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
intros.
unfold on_parallel_d in H.
DecompAndAll.
assert (~R=Y).
assert (parallel R Y P Q).

*****
H : not (eq R Y)
H6 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H5 : parallel Y R P Q
H3 : not (eq P Q)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (Col A R Y)
lambda : F
A,C,D,P,Q,R,Y : Point
*****
parallel R Y P Q
+++++
Geometry.
-----
Lemma elim_length_ratio_on_parallel_d_2 : forall (A C D P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> ~ Col A R Y -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
intros.
unfold on_parallel_d in H.
DecompAndAll.
assert (~R=Y).
assert (parallel R Y P Q).

*****
H4 : parallel R Y P Q
H : not (eq R Y)
H6 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H5 : parallel Y R P Q
H3 : not (eq P Q)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (Col A R Y)
lambda : F
A,C,D,P,Q,R,Y : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (S4 A P R Q) (S4 C P D Q))
+++++
Geometry.
-----
Lemma elim_length_ratio_on_parallel_d_2 : forall (A C D P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> ~ Col A R Y -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
intros.
unfold on_parallel_d in H.
DecompAndAll.
assert (~R=Y).
assert (parallel R Y P Q).
Geometry.

*****
H4 : parallel R Y P Q
H : not (eq R Y)
H6 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H5 : parallel Y R P Q
H3 : not (eq P Q)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (Col A R Y)
lambda : F
A,C,D,P,Q,R,Y : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (S4 A P R Q) (S4 C P D Q))
+++++
assert (Th:= (on_line_dex_spec_strong_f R Y P Q H4 H)).
-----
Lemma elim_length_ratio_on_parallel_d_2 : forall (A C D P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> ~ Col A R Y -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
intros.
unfold on_parallel_d in H.
DecompAndAll.
assert (~R=Y).
assert (parallel R Y P Q).
Geometry.
assert (Th:= (on_line_dex_spec_strong_f R Y P Q H4 H)).

*****
Th : ex\n (fun Y0 : Point =>\n and (Col Y0 R Y)\n (and (eq (DSeg R Y0) (DSeg P Q)) (weak_3_parallelogram R Y0 Q P)))
H4 : parallel R Y P Q
H : not (eq R Y)
H6 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H5 : parallel Y R P Q
H3 : not (eq P Q)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (Col A R Y)
lambda : F
A,C,D,P,Q,R,Y : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (S4 A P R Q) (S4 C P D Q))
+++++
DecompExAnd Th T.
-----
Lemma elim_length_ratio_on_parallel_d_2 : forall (A C D P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> ~ Col A R Y -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
intros.
unfold on_parallel_d in H.
DecompAndAll.
assert (~R=Y).
assert (parallel R Y P Q).
Geometry.
assert (Th:= (on_line_dex_spec_strong_f R Y P Q H4 H)).
DecompExAnd Th T.

*****
H11 : weak_3_parallelogram R T Q P
H10 : eq (DSeg R T) (DSeg P Q)
H8 : Col T R Y
T : Point
H4 : parallel R Y P Q
H : not (eq R Y)
H6 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H5 : parallel Y R P Q
H3 : not (eq P Q)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (Col A R Y)
lambda : F
A,C,D,P,Q,R,Y : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (S4 A P R Q) (S4 C P D Q))
+++++
assert (A<>Y).
-----
Lemma elim_length_ratio_on_parallel_d_2 : forall (A C D P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> ~ Col A R Y -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
intros.
unfold on_parallel_d in H.
DecompAndAll.
assert (~R=Y).
assert (parallel R Y P Q).
Geometry.
assert (Th:= (on_line_dex_spec_strong_f R Y P Q H4 H)).
DecompExAnd Th T.
assert (A<>Y).

*****
H11 : weak_3_parallelogram R T Q P
H10 : eq (DSeg R T) (DSeg P Q)
H8 : Col T R Y
T : Point
H4 : parallel R Y P Q
H : not (eq R Y)
H6 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H5 : parallel Y R P Q
H3 : not (eq P Q)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (Col A R Y)
lambda : F
A,C,D,P,Q,R,Y : Point
*****
not (eq A Y)
+++++
unfold not.
-----
Lemma elim_length_ratio_on_parallel_d_2 : forall (A C D P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> ~ Col A R Y -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
intros.
unfold on_parallel_d in H.
DecompAndAll.
assert (~R=Y).
assert (parallel R Y P Q).
Geometry.
assert (Th:= (on_line_dex_spec_strong_f R Y P Q H4 H)).
DecompExAnd Th T.
assert (A<>Y).
unfold not.

*****
H11 : weak_3_parallelogram R T Q P
H10 : eq (DSeg R T) (DSeg P Q)
H8 : Col T R Y
T : Point
H4 : parallel R Y P Q
H : not (eq R Y)
H6 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H5 : parallel Y R P Q
H3 : not (eq P Q)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (Col A R Y)
lambda : F
A,C,D,P,Q,R,Y : Point
*****
forall _ : eq A Y, False
+++++
intro.
-----
Lemma elim_length_ratio_on_parallel_d_2 : forall (A C D P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> ~ Col A R Y -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
intros.
unfold on_parallel_d in H.
DecompAndAll.
assert (~R=Y).
assert (parallel R Y P Q).
Geometry.
assert (Th:= (on_line_dex_spec_strong_f R Y P Q H4 H)).
DecompExAnd Th T.
assert (A<>Y).
unfold not.
intro.

*****
H7 : eq A Y
H11 : weak_3_parallelogram R T Q P
H10 : eq (DSeg R T) (DSeg P Q)
H8 : Col T R Y
T : Point
H4 : parallel R Y P Q
H : not (eq R Y)
H6 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H5 : parallel Y R P Q
H3 : not (eq P Q)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (Col A R Y)
lambda : F
A,C,D,P,Q,R,Y : Point
*****
False
+++++
subst.
-----
Lemma elim_length_ratio_on_parallel_d_2 : forall (A C D P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> ~ Col A R Y -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
intros.
unfold on_parallel_d in H.
DecompAndAll.
assert (~R=Y).
assert (parallel R Y P Q).
Geometry.
assert (Th:= (on_line_dex_spec_strong_f R Y P Q H4 H)).
DecompExAnd Th T.
assert (A<>Y).
unfold not.
intro.
subst.

*****
H11 : weak_3_parallelogram R T Q P
H10 : eq (DSeg R T) (DSeg P Q)
H8 : Col T R Y
T : Point
H4 : parallel R Y P Q
H : not (eq R Y)
H6 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H5 : parallel Y R P Q
H3 : not (eq P Q)
H2 : parallel Y Y C D
H1 : not (eq C D)
H0 : not (Col Y R Y)
lambda : F
C,D,P,Q,R,Y : Point
*****
False
+++++
Geometry.
-----
Lemma elim_length_ratio_on_parallel_d_2 : forall (A C D P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> ~ Col A R Y -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
intros.
unfold on_parallel_d in H.
DecompAndAll.
assert (~R=Y).
assert (parallel R Y P Q).
Geometry.
assert (Th:= (on_line_dex_spec_strong_f R Y P Q H4 H)).
DecompExAnd Th T.
assert (A<>Y).

*****
H7 : not (eq A Y)
H11 : weak_3_parallelogram R T Q P
H10 : eq (DSeg R T) (DSeg P Q)
H8 : Col T R Y
T : Point
H4 : parallel R Y P Q
H : not (eq R Y)
H6 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H5 : parallel Y R P Q
H3 : not (eq P Q)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (Col A R Y)
lambda : F
A,C,D,P,Q,R,Y : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (S4 A P R Q) (S4 C P D Q))
+++++
assert (Th:= (on_line_dex_spec_strong_f A Y C D H2 H7)).
-----
Lemma elim_length_ratio_on_parallel_d_2 : forall (A C D P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> ~ Col A R Y -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
intros.
unfold on_parallel_d in H.
DecompAndAll.
assert (~R=Y).
assert (parallel R Y P Q).
Geometry.
assert (Th:= (on_line_dex_spec_strong_f R Y P Q H4 H)).
DecompExAnd Th T.
assert (A<>Y).
assert (Th:= (on_line_dex_spec_strong_f A Y C D H2 H7)).

*****
Th : ex\n (fun Y0 : Point =>\n and (Col Y0 A Y)\n (and (eq (DSeg A Y0) (DSeg C D)) (weak_3_parallelogram A Y0 D C)))
H7 : not (eq A Y)
H11 : weak_3_parallelogram R T Q P
H10 : eq (DSeg R T) (DSeg P Q)
H8 : Col T R Y
T : Point
H4 : parallel R Y P Q
H : not (eq R Y)
H6 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H5 : parallel Y R P Q
H3 : not (eq P Q)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (Col A R Y)
lambda : F
A,C,D,P,Q,R,Y : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (S4 A P R Q) (S4 C P D Q))
+++++
DecompExAnd Th SS.
-----
Lemma elim_length_ratio_on_parallel_d_2 : forall (A C D P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> ~ Col A R Y -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
intros.
unfold on_parallel_d in H.
DecompAndAll.
assert (~R=Y).
assert (parallel R Y P Q).
Geometry.
assert (Th:= (on_line_dex_spec_strong_f R Y P Q H4 H)).
DecompExAnd Th T.
assert (A<>Y).
assert (Th:= (on_line_dex_spec_strong_f A Y C D H2 H7)).
DecompExAnd Th SS.

*****
H15 : weak_3_parallelogram A SS D C
H14 : eq (DSeg A SS) (DSeg C D)
H12 : Col SS A Y
SS : Point
H7 : not (eq A Y)
H11 : weak_3_parallelogram R T Q P
H10 : eq (DSeg R T) (DSeg P Q)
H8 : Col T R Y
T : Point
H4 : parallel R Y P Q
H : not (eq R Y)
H6 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H5 : parallel Y R P Q
H3 : not (eq P Q)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (Col A R Y)
lambda : F
A,C,D,P,Q,R,Y : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (S4 A P R Q) (S4 C P D Q))
+++++
assert (A**Y / A**SS = (S A R T) / (S4 A R SS T)).
-----
Lemma elim_length_ratio_on_parallel_d_2 : forall (A C D P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> ~ Col A R Y -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
intros.
unfold on_parallel_d in H.
DecompAndAll.
assert (~R=Y).
assert (parallel R Y P Q).
Geometry.
assert (Th:= (on_line_dex_spec_strong_f R Y P Q H4 H)).
DecompExAnd Th T.
assert (A<>Y).
assert (Th:= (on_line_dex_spec_strong_f A Y C D H2 H7)).
DecompExAnd Th SS.
assert (A**Y / A**SS = (S A R T) / (S4 A R SS T)).

*****
H15 : weak_3_parallelogram A SS D C
H14 : eq (DSeg A SS) (DSeg C D)
H12 : Col SS A Y
SS : Point
H7 : not (eq A Y)
H11 : weak_3_parallelogram R T Q P
H10 : eq (DSeg R T) (DSeg P Q)
H8 : Col T R Y
T : Point
H4 : parallel R Y P Q
H : not (eq R Y)
H6 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H5 : parallel Y R P Q
H3 : not (eq P Q)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (Col A R Y)
lambda : F
A,C,D,P,Q,R,Y : Point
*****
eq (Fdiv (DSeg A Y) (DSeg A SS)) (Fdiv (S A R T) (S4 A R SS T))
+++++
apply co_side_ter.
-----
Lemma elim_length_ratio_on_parallel_d_2 : forall (A C D P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> ~ Col A R Y -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
intros.
unfold on_parallel_d in H.
DecompAndAll.
assert (~R=Y).
assert (parallel R Y P Q).
Geometry.
assert (Th:= (on_line_dex_spec_strong_f R Y P Q H4 H)).
DecompExAnd Th T.
assert (A<>Y).
assert (Th:= (on_line_dex_spec_strong_f A Y C D H2 H7)).
DecompExAnd Th SS.
assert (A**Y / A**SS = (S A R T) / (S4 A R SS T)).
apply co_side_ter.

*****
H15 : weak_3_parallelogram A SS D C
H14 : eq (DSeg A SS) (DSeg C D)
H12 : Col SS A Y
SS : Point
H7 : not (eq A Y)
H11 : weak_3_parallelogram R T Q P
H10 : eq (DSeg R T) (DSeg P Q)
H8 : Col T R Y
T : Point
H4 : parallel R Y P Q
H : not (eq R Y)
H6 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H5 : parallel Y R P Q
H3 : not (eq P Q)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (Col A R Y)
lambda : F
A,C,D,P,Q,R,Y : Point
*****
not (parallel A SS R T)
+++++
Geometry.
-----
Lemma elim_length_ratio_on_parallel_d_2 : forall (A C D P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> ~ Col A R Y -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
intros.
unfold on_parallel_d in H.
DecompAndAll.
assert (~R=Y).
assert (parallel R Y P Q).
Geometry.
assert (Th:= (on_line_dex_spec_strong_f R Y P Q H4 H)).
DecompExAnd Th T.
assert (A<>Y).
assert (Th:= (on_line_dex_spec_strong_f A Y C D H2 H7)).
DecompExAnd Th SS.
assert (A**Y / A**SS = (S A R T) / (S4 A R SS T)).
apply co_side_ter.
Geometry.

*****
H15 : weak_3_parallelogram A SS D C
H14 : eq (DSeg A SS) (DSeg C D)
H12 : Col SS A Y
SS : Point
H7 : not (eq A Y)
H11 : weak_3_parallelogram R T Q P
H10 : eq (DSeg R T) (DSeg P Q)
H8 : Col T R Y
T : Point
H4 : parallel R Y P Q
H : not (eq R Y)
H6 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H5 : parallel Y R P Q
H3 : not (eq P Q)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (Col A R Y)
lambda : F
A,C,D,P,Q,R,Y : Point
*****
not (parallel A SS R T)
+++++
assert (Col Y A SS).
-----
Lemma elim_length_ratio_on_parallel_d_2 : forall (A C D P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> ~ Col A R Y -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
intros.
unfold on_parallel_d in H.
DecompAndAll.
assert (~R=Y).
assert (parallel R Y P Q).
Geometry.
assert (Th:= (on_line_dex_spec_strong_f R Y P Q H4 H)).
DecompExAnd Th T.
assert (A<>Y).
assert (Th:= (on_line_dex_spec_strong_f A Y C D H2 H7)).
DecompExAnd Th SS.
assert (A**Y / A**SS = (S A R T) / (S4 A R SS T)).
apply co_side_ter.
Geometry.
assert (Col Y A SS).

*****
H15 : weak_3_parallelogram A SS D C
H14 : eq (DSeg A SS) (DSeg C D)
H12 : Col SS A Y
SS : Point
H7 : not (eq A Y)
H11 : weak_3_parallelogram R T Q P
H10 : eq (DSeg R T) (DSeg P Q)
H8 : Col T R Y
T : Point
H4 : parallel R Y P Q
H : not (eq R Y)
H6 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H5 : parallel Y R P Q
H3 : not (eq P Q)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (Col A R Y)
lambda : F
A,C,D,P,Q,R,Y : Point
*****
Col Y A SS
+++++
Geometry.
-----
Lemma elim_length_ratio_on_parallel_d_2 : forall (A C D P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> ~ Col A R Y -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
intros.
unfold on_parallel_d in H.
DecompAndAll.
assert (~R=Y).
assert (parallel R Y P Q).
Geometry.
assert (Th:= (on_line_dex_spec_strong_f R Y P Q H4 H)).
DecompExAnd Th T.
assert (A<>Y).
assert (Th:= (on_line_dex_spec_strong_f A Y C D H2 H7)).
DecompExAnd Th SS.
assert (A**Y / A**SS = (S A R T) / (S4 A R SS T)).
apply co_side_ter.
Geometry.
assert (Col Y A SS).

*****
H9 : Col Y A SS
H15 : weak_3_parallelogram A SS D C
H14 : eq (DSeg A SS) (DSeg C D)
H12 : Col SS A Y
SS : Point
H7 : not (eq A Y)
H11 : weak_3_parallelogram R T Q P
H10 : eq (DSeg R T) (DSeg P Q)
H8 : Col T R Y
T : Point
H4 : parallel R Y P Q
H : not (eq R Y)
H6 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H5 : parallel Y R P Q
H3 : not (eq P Q)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (Col A R Y)
lambda : F
A,C,D,P,Q,R,Y : Point
*****
not (parallel A SS R T)
+++++
Geometry.
-----
Lemma elim_length_ratio_on_parallel_d_2 : forall (A C D P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> ~ Col A R Y -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
intros.
unfold on_parallel_d in H.
DecompAndAll.
assert (~R=Y).
assert (parallel R Y P Q).
Geometry.
assert (Th:= (on_line_dex_spec_strong_f R Y P Q H4 H)).
DecompExAnd Th T.
assert (A<>Y).
assert (Th:= (on_line_dex_spec_strong_f A Y C D H2 H7)).
DecompExAnd Th SS.
assert (A**Y / A**SS = (S A R T) / (S4 A R SS T)).
apply co_side_ter.
Geometry.
assert (Col Y A SS).
Geometry.

*****
H9 : Col Y A SS
H15 : weak_3_parallelogram A SS D C
H14 : eq (DSeg A SS) (DSeg C D)
H12 : Col SS A Y
SS : Point
H7 : not (eq A Y)
H11 : weak_3_parallelogram R T Q P
H10 : eq (DSeg R T) (DSeg P Q)
H8 : Col T R Y
T : Point
H4 : parallel R Y P Q
H : not (eq R Y)
H6 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H5 : parallel Y R P Q
H3 : not (eq P Q)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (Col A R Y)
lambda : F
A,C,D,P,Q,R,Y : Point
*****
not (parallel A SS R T)
+++++
assert (Col Y R T).
-----
Lemma elim_length_ratio_on_parallel_d_2 : forall (A C D P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> ~ Col A R Y -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
intros.
unfold on_parallel_d in H.
DecompAndAll.
assert (~R=Y).
assert (parallel R Y P Q).
Geometry.
assert (Th:= (on_line_dex_spec_strong_f R Y P Q H4 H)).
DecompExAnd Th T.
assert (A<>Y).
assert (Th:= (on_line_dex_spec_strong_f A Y C D H2 H7)).
DecompExAnd Th SS.
assert (A**Y / A**SS = (S A R T) / (S4 A R SS T)).
apply co_side_ter.
Geometry.
assert (Col Y A SS).
Geometry.
assert (Col Y R T).

*****
H9 : Col Y A SS
H15 : weak_3_parallelogram A SS D C
H14 : eq (DSeg A SS) (DSeg C D)
H12 : Col SS A Y
SS : Point
H7 : not (eq A Y)
H11 : weak_3_parallelogram R T Q P
H10 : eq (DSeg R T) (DSeg P Q)
H8 : Col T R Y
T : Point
H4 : parallel R Y P Q
H : not (eq R Y)
H6 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H5 : parallel Y R P Q
H3 : not (eq P Q)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (Col A R Y)
lambda : F
A,C,D,P,Q,R,Y : Point
*****
Col Y R T
+++++
Geometry.
-----
Lemma elim_length_ratio_on_parallel_d_2 : forall (A C D P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> ~ Col A R Y -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
intros.
unfold on_parallel_d in H.
DecompAndAll.
assert (~R=Y).
assert (parallel R Y P Q).
Geometry.
assert (Th:= (on_line_dex_spec_strong_f R Y P Q H4 H)).
DecompExAnd Th T.
assert (A<>Y).
assert (Th:= (on_line_dex_spec_strong_f A Y C D H2 H7)).
DecompExAnd Th SS.
assert (A**Y / A**SS = (S A R T) / (S4 A R SS T)).
apply co_side_ter.
Geometry.
assert (Col Y A SS).
Geometry.
assert (Col Y R T).

*****
H13 : Col Y R T
H9 : Col Y A SS
H15 : weak_3_parallelogram A SS D C
H14 : eq (DSeg A SS) (DSeg C D)
H12 : Col SS A Y
SS : Point
H7 : not (eq A Y)
H11 : weak_3_parallelogram R T Q P
H10 : eq (DSeg R T) (DSeg P Q)
H8 : Col T R Y
T : Point
H4 : parallel R Y P Q
H : not (eq R Y)
H6 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H5 : parallel Y R P Q
H3 : not (eq P Q)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (Col A R Y)
lambda : F
A,C,D,P,Q,R,Y : Point
*****
not (parallel A SS R T)
+++++
Geometry.
-----
Lemma elim_length_ratio_on_parallel_d_2 : forall (A C D P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> ~ Col A R Y -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
intros.
unfold on_parallel_d in H.
DecompAndAll.
assert (~R=Y).
assert (parallel R Y P Q).
Geometry.
assert (Th:= (on_line_dex_spec_strong_f R Y P Q H4 H)).
DecompExAnd Th T.
assert (A<>Y).
assert (Th:= (on_line_dex_spec_strong_f A Y C D H2 H7)).
DecompExAnd Th SS.
assert (A**Y / A**SS = (S A R T) / (S4 A R SS T)).
apply co_side_ter.
Geometry.
assert (Col Y A SS).
Geometry.
assert (Col Y R T).
Geometry.

*****
H13 : Col Y R T
H9 : Col Y A SS
H15 : weak_3_parallelogram A SS D C
H14 : eq (DSeg A SS) (DSeg C D)
H12 : Col SS A Y
SS : Point
H7 : not (eq A Y)
H11 : weak_3_parallelogram R T Q P
H10 : eq (DSeg R T) (DSeg P Q)
H8 : Col T R Y
T : Point
H4 : parallel R Y P Q
H : not (eq R Y)
H6 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H5 : parallel Y R P Q
H3 : not (eq P Q)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (Col A R Y)
lambda : F
A,C,D,P,Q,R,Y : Point
*****
not (parallel A SS R T)
+++++
eapply common_point_not_par.
-----
Lemma elim_length_ratio_on_parallel_d_2 : forall (A C D P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> ~ Col A R Y -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
intros.
unfold on_parallel_d in H.
DecompAndAll.
assert (~R=Y).
assert (parallel R Y P Q).
Geometry.
assert (Th:= (on_line_dex_spec_strong_f R Y P Q H4 H)).
DecompExAnd Th T.
assert (A<>Y).
assert (Th:= (on_line_dex_spec_strong_f A Y C D H2 H7)).
DecompExAnd Th SS.
assert (A**Y / A**SS = (S A R T) / (S4 A R SS T)).
apply co_side_ter.
Geometry.
assert (Col Y A SS).
Geometry.
assert (Col Y R T).
Geometry.
eapply common_point_not_par.

*****
H13 : Col Y R T
H9 : Col Y A SS
H15 : weak_3_parallelogram A SS D C
H14 : eq (DSeg A SS) (DSeg C D)
H12 : Col SS A Y
SS : Point
H7 : not (eq A Y)
H11 : weak_3_parallelogram R T Q P
H10 : eq (DSeg R T) (DSeg P Q)
H8 : Col T R Y
T : Point
H4 : parallel R Y P Q
H : not (eq R Y)
H6 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H5 : parallel Y R P Q
H3 : not (eq P Q)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (Col A R Y)
lambda : F
A,C,D,P,Q,R,Y : Point
*****
Col ?Y A SS
+++++
apply H9.
-----
Lemma elim_length_ratio_on_parallel_d_2 : forall (A C D P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> ~ Col A R Y -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
intros.
unfold on_parallel_d in H.
DecompAndAll.
assert (~R=Y).
assert (parallel R Y P Q).
Geometry.
assert (Th:= (on_line_dex_spec_strong_f R Y P Q H4 H)).
DecompExAnd Th T.
assert (A<>Y).
assert (Th:= (on_line_dex_spec_strong_f A Y C D H2 H7)).
DecompExAnd Th SS.
assert (A**Y / A**SS = (S A R T) / (S4 A R SS T)).
apply co_side_ter.
Geometry.
assert (Col Y A SS).
Geometry.
assert (Col Y R T).
Geometry.
eapply common_point_not_par.

*****
H13 : Col Y R T
H9 : Col Y A SS
H15 : weak_3_parallelogram A SS D C
H14 : eq (DSeg A SS) (DSeg C D)
H12 : Col SS A Y
SS : Point
H7 : not (eq A Y)
H11 : weak_3_parallelogram R T Q P
H10 : eq (DSeg R T) (DSeg P Q)
H8 : Col T R Y
T : Point
H4 : parallel R Y P Q
H : not (eq R Y)
H6 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H5 : parallel Y R P Q
H3 : not (eq P Q)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (Col A R Y)
lambda : F
A,C,D,P,Q,R,Y : Point
*****
Col Y R T
+++++
auto.
-----
Lemma elim_length_ratio_on_parallel_d_2 : forall (A C D P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> ~ Col A R Y -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
intros.
unfold on_parallel_d in H.
DecompAndAll.
assert (~R=Y).
assert (parallel R Y P Q).
Geometry.
assert (Th:= (on_line_dex_spec_strong_f R Y P Q H4 H)).
DecompExAnd Th T.
assert (A<>Y).
assert (Th:= (on_line_dex_spec_strong_f A Y C D H2 H7)).
DecompExAnd Th SS.
assert (A**Y / A**SS = (S A R T) / (S4 A R SS T)).
apply co_side_ter.
Geometry.
assert (Col Y A SS).
Geometry.
assert (Col Y R T).
Geometry.
eapply common_point_not_par.

*****
H13 : Col Y R T
H9 : Col Y A SS
H15 : weak_3_parallelogram A SS D C
H14 : eq (DSeg A SS) (DSeg C D)
H12 : Col SS A Y
SS : Point
H7 : not (eq A Y)
H11 : weak_3_parallelogram R T Q P
H10 : eq (DSeg R T) (DSeg P Q)
H8 : Col T R Y
T : Point
H4 : parallel R Y P Q
H : not (eq R Y)
H6 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H5 : parallel Y R P Q
H3 : not (eq P Q)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (Col A R Y)
lambda : F
A,C,D,P,Q,R,Y : Point
*****
not (eq A SS)
+++++
unfold not.
-----
Lemma elim_length_ratio_on_parallel_d_2 : forall (A C D P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> ~ Col A R Y -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
intros.
unfold on_parallel_d in H.
DecompAndAll.
assert (~R=Y).
assert (parallel R Y P Q).
Geometry.
assert (Th:= (on_line_dex_spec_strong_f R Y P Q H4 H)).
DecompExAnd Th T.
assert (A<>Y).
assert (Th:= (on_line_dex_spec_strong_f A Y C D H2 H7)).
DecompExAnd Th SS.
assert (A**Y / A**SS = (S A R T) / (S4 A R SS T)).
apply co_side_ter.
Geometry.
assert (Col Y A SS).
Geometry.
assert (Col Y R T).
Geometry.
eapply common_point_not_par.
unfold not.

*****
H13 : Col Y R T
H9 : Col Y A SS
H15 : weak_3_parallelogram A SS D C
H14 : eq (DSeg A SS) (DSeg C D)
H12 : Col SS A Y
SS : Point
H7 : not (eq A Y)
H11 : weak_3_parallelogram R T Q P
H10 : eq (DSeg R T) (DSeg P Q)
H8 : Col T R Y
T : Point
H4 : parallel R Y P Q
H : not (eq R Y)
H6 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H5 : parallel Y R P Q
H3 : not (eq P Q)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (Col A R Y)
lambda : F
A,C,D,P,Q,R,Y : Point
*****
forall _ : eq A SS, False
+++++
intro.
-----
Lemma elim_length_ratio_on_parallel_d_2 : forall (A C D P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> ~ Col A R Y -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
intros.
unfold on_parallel_d in H.
DecompAndAll.
assert (~R=Y).
assert (parallel R Y P Q).
Geometry.
assert (Th:= (on_line_dex_spec_strong_f R Y P Q H4 H)).
DecompExAnd Th T.
assert (A<>Y).
assert (Th:= (on_line_dex_spec_strong_f A Y C D H2 H7)).
DecompExAnd Th SS.
assert (A**Y / A**SS = (S A R T) / (S4 A R SS T)).
apply co_side_ter.
Geometry.
assert (Col Y A SS).
Geometry.
assert (Col Y R T).
Geometry.
eapply common_point_not_par.
unfold not.
intro.

*****
H16 : eq A SS
H13 : Col Y R T
H9 : Col Y A SS
H15 : weak_3_parallelogram A SS D C
H14 : eq (DSeg A SS) (DSeg C D)
H12 : Col SS A Y
SS : Point
H7 : not (eq A Y)
H11 : weak_3_parallelogram R T Q P
H10 : eq (DSeg R T) (DSeg P Q)
H8 : Col T R Y
T : Point
H4 : parallel R Y P Q
H : not (eq R Y)
H6 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H5 : parallel Y R P Q
H3 : not (eq P Q)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (Col A R Y)
lambda : F
A,C,D,P,Q,R,Y : Point
*****
False
+++++
subst SS.
-----
Lemma elim_length_ratio_on_parallel_d_2 : forall (A C D P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> ~ Col A R Y -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
intros.
unfold on_parallel_d in H.
DecompAndAll.
assert (~R=Y).
assert (parallel R Y P Q).
Geometry.
assert (Th:= (on_line_dex_spec_strong_f R Y P Q H4 H)).
DecompExAnd Th T.
assert (A<>Y).
assert (Th:= (on_line_dex_spec_strong_f A Y C D H2 H7)).
DecompExAnd Th SS.
assert (A**Y / A**SS = (S A R T) / (S4 A R SS T)).
apply co_side_ter.
Geometry.
assert (Col Y A SS).
Geometry.
assert (Col Y R T).
Geometry.
eapply common_point_not_par.
unfold not.
intro.
subst SS.

*****
H13 : Col Y R T
H12 : Col A A Y
H14 : eq (DSeg A A) (DSeg C D)
H15 : weak_3_parallelogram A A D C
H9 : Col Y A A
H7 : not (eq A Y)
H11 : weak_3_parallelogram R T Q P
H10 : eq (DSeg R T) (DSeg P Q)
H8 : Col T R Y
T : Point
H4 : parallel R Y P Q
H : not (eq R Y)
H6 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H5 : parallel Y R P Q
H3 : not (eq P Q)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (Col A R Y)
lambda : F
A,C,D,P,Q,R,Y : Point
*****
False
+++++
basic_simpl.
-----
Lemma elim_length_ratio_on_parallel_d_2 : forall (A C D P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> ~ Col A R Y -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
intros.
unfold on_parallel_d in H.
DecompAndAll.
assert (~R=Y).
assert (parallel R Y P Q).
Geometry.
assert (Th:= (on_line_dex_spec_strong_f R Y P Q H4 H)).
DecompExAnd Th T.
assert (A<>Y).
assert (Th:= (on_line_dex_spec_strong_f A Y C D H2 H7)).
DecompExAnd Th SS.
assert (A**Y / A**SS = (S A R T) / (S4 A R SS T)).
apply co_side_ter.
Geometry.
assert (Col Y A SS).
Geometry.
assert (Col Y R T).
Geometry.
eapply common_point_not_par.
unfold not.
intro.
subst SS.
basic_simpl.

*****
H13 : Col Y R T
H12 : Col A A Y
H14 : eq F0 (DSeg C D)
H15 : weak_3_parallelogram A A D C
H9 : Col Y A A
H7 : not (eq A Y)
H11 : weak_3_parallelogram R T Q P
H10 : eq (DSeg R T) (DSeg P Q)
H8 : Col T R Y
T : Point
H4 : parallel R Y P Q
H : not (eq R Y)
H6 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H5 : parallel Y R P Q
H3 : not (eq P Q)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (Col A R Y)
lambda : F
A,C,D,P,Q,R,Y : Point
*****
False
+++++
assert (C=D).
-----
Lemma elim_length_ratio_on_parallel_d_2 : forall (A C D P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> ~ Col A R Y -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
intros.
unfold on_parallel_d in H.
DecompAndAll.
assert (~R=Y).
assert (parallel R Y P Q).
Geometry.
assert (Th:= (on_line_dex_spec_strong_f R Y P Q H4 H)).
DecompExAnd Th T.
assert (A<>Y).
assert (Th:= (on_line_dex_spec_strong_f A Y C D H2 H7)).
DecompExAnd Th SS.
assert (A**Y / A**SS = (S A R T) / (S4 A R SS T)).
apply co_side_ter.
Geometry.
assert (Col Y A SS).
Geometry.
assert (Col Y R T).
Geometry.
eapply common_point_not_par.
unfold not.
intro.
subst SS.
basic_simpl.
assert (C=D).

*****
H13 : Col Y R T
H12 : Col A A Y
H14 : eq F0 (DSeg C D)
H15 : weak_3_parallelogram A A D C
H9 : Col Y A A
H7 : not (eq A Y)
H11 : weak_3_parallelogram R T Q P
H10 : eq (DSeg R T) (DSeg P Q)
H8 : Col T R Y
T : Point
H4 : parallel R Y P Q
H : not (eq R Y)
H6 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H5 : parallel Y R P Q
H3 : not (eq P Q)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (Col A R Y)
lambda : F
A,C,D,P,Q,R,Y : Point
*****
eq C D
+++++
Geometry.
-----
Lemma elim_length_ratio_on_parallel_d_2 : forall (A C D P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> ~ Col A R Y -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
intros.
unfold on_parallel_d in H.
DecompAndAll.
assert (~R=Y).
assert (parallel R Y P Q).
Geometry.
assert (Th:= (on_line_dex_spec_strong_f R Y P Q H4 H)).
DecompExAnd Th T.
assert (A<>Y).
assert (Th:= (on_line_dex_spec_strong_f A Y C D H2 H7)).
DecompExAnd Th SS.
assert (A**Y / A**SS = (S A R T) / (S4 A R SS T)).
apply co_side_ter.
Geometry.
assert (Col Y A SS).
Geometry.
assert (Col Y R T).
Geometry.
eapply common_point_not_par.
unfold not.
intro.
subst SS.
basic_simpl.
assert (C=D).

*****
H16 : eq C D
H13 : Col Y R T
H12 : Col A A Y
H14 : eq F0 (DSeg C D)
H15 : weak_3_parallelogram A A D C
H9 : Col Y A A
H7 : not (eq A Y)
H11 : weak_3_parallelogram R T Q P
H10 : eq (DSeg R T) (DSeg P Q)
H8 : Col T R Y
T : Point
H4 : parallel R Y P Q
H : not (eq R Y)
H6 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H5 : parallel Y R P Q
H3 : not (eq P Q)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (Col A R Y)
lambda : F
A,C,D,P,Q,R,Y : Point
*****
False
+++++
Geometry.
-----
Lemma elim_length_ratio_on_parallel_d_2 : forall (A C D P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> ~ Col A R Y -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
intros.
unfold on_parallel_d in H.
DecompAndAll.
assert (~R=Y).
assert (parallel R Y P Q).
Geometry.
assert (Th:= (on_line_dex_spec_strong_f R Y P Q H4 H)).
DecompExAnd Th T.
assert (A<>Y).
assert (Th:= (on_line_dex_spec_strong_f A Y C D H2 H7)).
DecompExAnd Th SS.
assert (A**Y / A**SS = (S A R T) / (S4 A R SS T)).
apply co_side_ter.
Geometry.
assert (Col Y A SS).
Geometry.
assert (Col Y R T).
Geometry.
eapply common_point_not_par.

*****
H13 : Col Y R T
H9 : Col Y A SS
H15 : weak_3_parallelogram A SS D C
H14 : eq (DSeg A SS) (DSeg C D)
H12 : Col SS A Y
SS : Point
H7 : not (eq A Y)
H11 : weak_3_parallelogram R T Q P
H10 : eq (DSeg R T) (DSeg P Q)
H8 : Col T R Y
T : Point
H4 : parallel R Y P Q
H : not (eq R Y)
H6 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H5 : parallel Y R P Q
H3 : not (eq P Q)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (Col A R Y)
lambda : F
A,C,D,P,Q,R,Y : Point
*****
not (eq R T)
+++++
unfold not.
-----
Lemma elim_length_ratio_on_parallel_d_2 : forall (A C D P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> ~ Col A R Y -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
intros.
unfold on_parallel_d in H.
DecompAndAll.
assert (~R=Y).
assert (parallel R Y P Q).
Geometry.
assert (Th:= (on_line_dex_spec_strong_f R Y P Q H4 H)).
DecompExAnd Th T.
assert (A<>Y).
assert (Th:= (on_line_dex_spec_strong_f A Y C D H2 H7)).
DecompExAnd Th SS.
assert (A**Y / A**SS = (S A R T) / (S4 A R SS T)).
apply co_side_ter.
Geometry.
assert (Col Y A SS).
Geometry.
assert (Col Y R T).
Geometry.
eapply common_point_not_par.
unfold not.

*****
H13 : Col Y R T
H9 : Col Y A SS
H15 : weak_3_parallelogram A SS D C
H14 : eq (DSeg A SS) (DSeg C D)
H12 : Col SS A Y
SS : Point
H7 : not (eq A Y)
H11 : weak_3_parallelogram R T Q P
H10 : eq (DSeg R T) (DSeg P Q)
H8 : Col T R Y
T : Point
H4 : parallel R Y P Q
H : not (eq R Y)
H6 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H5 : parallel Y R P Q
H3 : not (eq P Q)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (Col A R Y)
lambda : F
A,C,D,P,Q,R,Y : Point
*****
forall _ : eq R T, False
+++++
intro.
-----
Lemma elim_length_ratio_on_parallel_d_2 : forall (A C D P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> ~ Col A R Y -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
intros.
unfold on_parallel_d in H.
DecompAndAll.
assert (~R=Y).
assert (parallel R Y P Q).
Geometry.
assert (Th:= (on_line_dex_spec_strong_f R Y P Q H4 H)).
DecompExAnd Th T.
assert (A<>Y).
assert (Th:= (on_line_dex_spec_strong_f A Y C D H2 H7)).
DecompExAnd Th SS.
assert (A**Y / A**SS = (S A R T) / (S4 A R SS T)).
apply co_side_ter.
Geometry.
assert (Col Y A SS).
Geometry.
assert (Col Y R T).
Geometry.
eapply common_point_not_par.
unfold not.
intro.

*****
H16 : eq R T
H13 : Col Y R T
H9 : Col Y A SS
H15 : weak_3_parallelogram A SS D C
H14 : eq (DSeg A SS) (DSeg C D)
H12 : Col SS A Y
SS : Point
H7 : not (eq A Y)
H11 : weak_3_parallelogram R T Q P
H10 : eq (DSeg R T) (DSeg P Q)
H8 : Col T R Y
T : Point
H4 : parallel R Y P Q
H : not (eq R Y)
H6 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H5 : parallel Y R P Q
H3 : not (eq P Q)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (Col A R Y)
lambda : F
A,C,D,P,Q,R,Y : Point
*****
False
+++++
subst T.
-----
Lemma elim_length_ratio_on_parallel_d_2 : forall (A C D P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> ~ Col A R Y -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
intros.
unfold on_parallel_d in H.
DecompAndAll.
assert (~R=Y).
assert (parallel R Y P Q).
Geometry.
assert (Th:= (on_line_dex_spec_strong_f R Y P Q H4 H)).
DecompExAnd Th T.
assert (A<>Y).
assert (Th:= (on_line_dex_spec_strong_f A Y C D H2 H7)).
DecompExAnd Th SS.
assert (A**Y / A**SS = (S A R T) / (S4 A R SS T)).
apply co_side_ter.
Geometry.
assert (Col Y A SS).
Geometry.
assert (Col Y R T).
Geometry.
eapply common_point_not_par.
unfold not.
intro.
subst T.

*****
H13 : Col Y R R
H9 : Col Y A SS
H15 : weak_3_parallelogram A SS D C
H14 : eq (DSeg A SS) (DSeg C D)
H12 : Col SS A Y
SS : Point
H7 : not (eq A Y)
H8 : Col R R Y
H10 : eq (DSeg R R) (DSeg P Q)
H11 : weak_3_parallelogram R R Q P
H4 : parallel R Y P Q
H : not (eq R Y)
H6 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H5 : parallel Y R P Q
H3 : not (eq P Q)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (Col A R Y)
lambda : F
A,C,D,P,Q,R,Y : Point
*****
False
+++++
basic_simpl.
-----
Lemma elim_length_ratio_on_parallel_d_2 : forall (A C D P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> ~ Col A R Y -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
intros.
unfold on_parallel_d in H.
DecompAndAll.
assert (~R=Y).
assert (parallel R Y P Q).
Geometry.
assert (Th:= (on_line_dex_spec_strong_f R Y P Q H4 H)).
DecompExAnd Th T.
assert (A<>Y).
assert (Th:= (on_line_dex_spec_strong_f A Y C D H2 H7)).
DecompExAnd Th SS.
assert (A**Y / A**SS = (S A R T) / (S4 A R SS T)).
apply co_side_ter.
Geometry.
assert (Col Y A SS).
Geometry.
assert (Col Y R T).
Geometry.
eapply common_point_not_par.
unfold not.
intro.
subst T.
basic_simpl.

*****
H13 : Col Y R R
H9 : Col Y A SS
H15 : weak_3_parallelogram A SS D C
H14 : eq (DSeg A SS) (DSeg C D)
H12 : Col SS A Y
SS : Point
H7 : not (eq A Y)
H8 : Col R R Y
H10 : eq F0 (DSeg P Q)
H11 : weak_3_parallelogram R R Q P
H4 : parallel R Y P Q
H : not (eq R Y)
H6 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H5 : parallel Y R P Q
H3 : not (eq P Q)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (Col A R Y)
lambda : F
A,C,D,P,Q,R,Y : Point
*****
False
+++++
assert (P=Q).
-----
Lemma elim_length_ratio_on_parallel_d_2 : forall (A C D P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> ~ Col A R Y -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
intros.
unfold on_parallel_d in H.
DecompAndAll.
assert (~R=Y).
assert (parallel R Y P Q).
Geometry.
assert (Th:= (on_line_dex_spec_strong_f R Y P Q H4 H)).
DecompExAnd Th T.
assert (A<>Y).
assert (Th:= (on_line_dex_spec_strong_f A Y C D H2 H7)).
DecompExAnd Th SS.
assert (A**Y / A**SS = (S A R T) / (S4 A R SS T)).
apply co_side_ter.
Geometry.
assert (Col Y A SS).
Geometry.
assert (Col Y R T).
Geometry.
eapply common_point_not_par.
unfold not.
intro.
subst T.
basic_simpl.
assert (P=Q).

*****
H13 : Col Y R R
H9 : Col Y A SS
H15 : weak_3_parallelogram A SS D C
H14 : eq (DSeg A SS) (DSeg C D)
H12 : Col SS A Y
SS : Point
H7 : not (eq A Y)
H8 : Col R R Y
H10 : eq F0 (DSeg P Q)
H11 : weak_3_parallelogram R R Q P
H4 : parallel R Y P Q
H : not (eq R Y)
H6 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H5 : parallel Y R P Q
H3 : not (eq P Q)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (Col A R Y)
lambda : F
A,C,D,P,Q,R,Y : Point
*****
eq P Q
+++++
Geometry.
-----
Lemma elim_length_ratio_on_parallel_d_2 : forall (A C D P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> ~ Col A R Y -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
intros.
unfold on_parallel_d in H.
DecompAndAll.
assert (~R=Y).
assert (parallel R Y P Q).
Geometry.
assert (Th:= (on_line_dex_spec_strong_f R Y P Q H4 H)).
DecompExAnd Th T.
assert (A<>Y).
assert (Th:= (on_line_dex_spec_strong_f A Y C D H2 H7)).
DecompExAnd Th SS.
assert (A**Y / A**SS = (S A R T) / (S4 A R SS T)).
apply co_side_ter.
Geometry.
assert (Col Y A SS).
Geometry.
assert (Col Y R T).
Geometry.
eapply common_point_not_par.
unfold not.
intro.
subst T.
basic_simpl.
assert (P=Q).

*****
H16 : eq P Q
H13 : Col Y R R
H9 : Col Y A SS
H15 : weak_3_parallelogram A SS D C
H14 : eq (DSeg A SS) (DSeg C D)
H12 : Col SS A Y
SS : Point
H7 : not (eq A Y)
H8 : Col R R Y
H10 : eq F0 (DSeg P Q)
H11 : weak_3_parallelogram R R Q P
H4 : parallel R Y P Q
H : not (eq R Y)
H6 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H5 : parallel Y R P Q
H3 : not (eq P Q)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (Col A R Y)
lambda : F
A,C,D,P,Q,R,Y : Point
*****
False
+++++
Geometry.
-----
Lemma elim_length_ratio_on_parallel_d_2 : forall (A C D P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> ~ Col A R Y -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
intros.
unfold on_parallel_d in H.
DecompAndAll.
assert (~R=Y).
assert (parallel R Y P Q).
Geometry.
assert (Th:= (on_line_dex_spec_strong_f R Y P Q H4 H)).
DecompExAnd Th T.
assert (A<>Y).
assert (Th:= (on_line_dex_spec_strong_f A Y C D H2 H7)).
DecompExAnd Th SS.
assert (A**Y / A**SS = (S A R T) / (S4 A R SS T)).
apply co_side_ter.
Geometry.
assert (Col Y A SS).
Geometry.
assert (Col Y R T).
Geometry.
eapply common_point_not_par.

*****
H13 : Col Y R T
H9 : Col Y A SS
H15 : weak_3_parallelogram A SS D C
H14 : eq (DSeg A SS) (DSeg C D)
H12 : Col SS A Y
SS : Point
H7 : not (eq A Y)
H11 : weak_3_parallelogram R T Q P
H10 : eq (DSeg R T) (DSeg P Q)
H8 : Col T R Y
T : Point
H4 : parallel R Y P Q
H : not (eq R Y)
H6 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H5 : parallel Y R P Q
H3 : not (eq P Q)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (Col A R Y)
lambda : F
A,C,D,P,Q,R,Y : Point
*****
not (Col Y A R)
+++++
Geometry.
-----
Lemma elim_length_ratio_on_parallel_d_2 : forall (A C D P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> ~ Col A R Y -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
intros.
unfold on_parallel_d in H.
DecompAndAll.
assert (~R=Y).
assert (parallel R Y P Q).
Geometry.
assert (Th:= (on_line_dex_spec_strong_f R Y P Q H4 H)).
DecompExAnd Th T.
assert (A<>Y).
assert (Th:= (on_line_dex_spec_strong_f A Y C D H2 H7)).
DecompExAnd Th SS.
assert (A**Y / A**SS = (S A R T) / (S4 A R SS T)).
apply co_side_ter.

*****
H15 : weak_3_parallelogram A SS D C
H14 : eq (DSeg A SS) (DSeg C D)
H12 : Col SS A Y
SS : Point
H7 : not (eq A Y)
H11 : weak_3_parallelogram R T Q P
H10 : eq (DSeg R T) (DSeg P Q)
H8 : Col T R Y
T : Point
H4 : parallel R Y P Q
H : not (eq R Y)
H6 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H5 : parallel Y R P Q
H3 : not (eq P Q)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (Col A R Y)
lambda : F
A,C,D,P,Q,R,Y : Point
*****
Col R T Y
+++++
Geometry.
-----
Lemma elim_length_ratio_on_parallel_d_2 : forall (A C D P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> ~ Col A R Y -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
intros.
unfold on_parallel_d in H.
DecompAndAll.
assert (~R=Y).
assert (parallel R Y P Q).
Geometry.
assert (Th:= (on_line_dex_spec_strong_f R Y P Q H4 H)).
DecompExAnd Th T.
assert (A<>Y).
assert (Th:= (on_line_dex_spec_strong_f A Y C D H2 H7)).
DecompExAnd Th SS.
assert (A**Y / A**SS = (S A R T) / (S4 A R SS T)).
apply co_side_ter.

*****
H15 : weak_3_parallelogram A SS D C
H14 : eq (DSeg A SS) (DSeg C D)
H12 : Col SS A Y
SS : Point
H7 : not (eq A Y)
H11 : weak_3_parallelogram R T Q P
H10 : eq (DSeg R T) (DSeg P Q)
H8 : Col T R Y
T : Point
H4 : parallel R Y P Q
H : not (eq R Y)
H6 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H5 : parallel Y R P Q
H3 : not (eq P Q)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (Col A R Y)
lambda : F
A,C,D,P,Q,R,Y : Point
*****
Col A SS Y
+++++
Geometry.
-----
Lemma elim_length_ratio_on_parallel_d_2 : forall (A C D P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> ~ Col A R Y -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
intros.
unfold on_parallel_d in H.
DecompAndAll.
assert (~R=Y).
assert (parallel R Y P Q).
Geometry.
assert (Th:= (on_line_dex_spec_strong_f R Y P Q H4 H)).
DecompExAnd Th T.
assert (A<>Y).
assert (Th:= (on_line_dex_spec_strong_f A Y C D H2 H7)).
DecompExAnd Th SS.
assert (A**Y / A**SS = (S A R T) / (S4 A R SS T)).

*****
H9 : eq (Fdiv (DSeg A Y) (DSeg A SS)) (Fdiv (S A R T) (S4 A R SS T))
H15 : weak_3_parallelogram A SS D C
H14 : eq (DSeg A SS) (DSeg C D)
H12 : Col SS A Y
SS : Point
H7 : not (eq A Y)
H11 : weak_3_parallelogram R T Q P
H10 : eq (DSeg R T) (DSeg P Q)
H8 : Col T R Y
T : Point
H4 : parallel R Y P Q
H : not (eq R Y)
H6 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H5 : parallel Y R P Q
H3 : not (eq P Q)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (Col A R Y)
lambda : F
A,C,D,P,Q,R,Y : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (S4 A P R Q) (S4 C P D Q))
+++++
rewrite H14 in H9.
-----
Lemma elim_length_ratio_on_parallel_d_2 : forall (A C D P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> ~ Col A R Y -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
intros.
unfold on_parallel_d in H.
DecompAndAll.
assert (~R=Y).
assert (parallel R Y P Q).
Geometry.
assert (Th:= (on_line_dex_spec_strong_f R Y P Q H4 H)).
DecompExAnd Th T.
assert (A<>Y).
assert (Th:= (on_line_dex_spec_strong_f A Y C D H2 H7)).
DecompExAnd Th SS.
assert (A**Y / A**SS = (S A R T) / (S4 A R SS T)).
rewrite H14 in H9.

*****
H9 : eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (S A R T) (S4 A R SS T))
H15 : weak_3_parallelogram A SS D C
H14 : eq (DSeg A SS) (DSeg C D)
H12 : Col SS A Y
SS : Point
H7 : not (eq A Y)
H11 : weak_3_parallelogram R T Q P
H10 : eq (DSeg R T) (DSeg P Q)
H8 : Col T R Y
T : Point
H4 : parallel R Y P Q
H : not (eq R Y)
H6 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H5 : parallel Y R P Q
H3 : not (eq P Q)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (Col A R Y)
lambda : F
A,C,D,P,Q,R,Y : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (S4 A P R Q) (S4 C P D Q))
+++++
rewrite H9.
-----
Lemma elim_length_ratio_on_parallel_d_2 : forall (A C D P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> ~ Col A R Y -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
intros.
unfold on_parallel_d in H.
DecompAndAll.
assert (~R=Y).
assert (parallel R Y P Q).
Geometry.
assert (Th:= (on_line_dex_spec_strong_f R Y P Q H4 H)).
DecompExAnd Th T.
assert (A<>Y).
assert (Th:= (on_line_dex_spec_strong_f A Y C D H2 H7)).
DecompExAnd Th SS.
assert (A**Y / A**SS = (S A R T) / (S4 A R SS T)).
rewrite H14 in H9.
rewrite H9.

*****
H9 : eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (S A R T) (S4 A R SS T))
H15 : weak_3_parallelogram A SS D C
H14 : eq (DSeg A SS) (DSeg C D)
H12 : Col SS A Y
SS : Point
H7 : not (eq A Y)
H11 : weak_3_parallelogram R T Q P
H10 : eq (DSeg R T) (DSeg P Q)
H8 : Col T R Y
T : Point
H4 : parallel R Y P Q
H : not (eq R Y)
H6 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H5 : parallel Y R P Q
H3 : not (eq P Q)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (Col A R Y)
lambda : F
A,C,D,P,Q,R,Y : Point
*****
eq (Fdiv (S A R T) (S4 A R SS T)) (Fdiv (S4 A P R Q) (S4 C P D Q))
+++++
assert ((S A R T) = (S4 A P R Q)).
-----
Lemma elim_length_ratio_on_parallel_d_2 : forall (A C D P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> ~ Col A R Y -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
intros.
unfold on_parallel_d in H.
DecompAndAll.
assert (~R=Y).
assert (parallel R Y P Q).
Geometry.
assert (Th:= (on_line_dex_spec_strong_f R Y P Q H4 H)).
DecompExAnd Th T.
assert (A<>Y).
assert (Th:= (on_line_dex_spec_strong_f A Y C D H2 H7)).
DecompExAnd Th SS.
assert (A**Y / A**SS = (S A R T) / (S4 A R SS T)).
rewrite H14 in H9.
rewrite H9.
assert ((S A R T) = (S4 A P R Q)).

*****
H9 : eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (S A R T) (S4 A R SS T))
H15 : weak_3_parallelogram A SS D C
H14 : eq (DSeg A SS) (DSeg C D)
H12 : Col SS A Y
SS : Point
H7 : not (eq A Y)
H11 : weak_3_parallelogram R T Q P
H10 : eq (DSeg R T) (DSeg P Q)
H8 : Col T R Y
T : Point
H4 : parallel R Y P Q
H : not (eq R Y)
H6 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H5 : parallel Y R P Q
H3 : not (eq P Q)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (Col A R Y)
lambda : F
A,C,D,P,Q,R,Y : Point
*****
eq (S A R T) (S4 A P R Q)
+++++
apply l2_12b_strong_3.
-----
Lemma elim_length_ratio_on_parallel_d_2 : forall (A C D P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> ~ Col A R Y -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
intros.
unfold on_parallel_d in H.
DecompAndAll.
assert (~R=Y).
assert (parallel R Y P Q).
Geometry.
assert (Th:= (on_line_dex_spec_strong_f R Y P Q H4 H)).
DecompExAnd Th T.
assert (A<>Y).
assert (Th:= (on_line_dex_spec_strong_f A Y C D H2 H7)).
DecompExAnd Th SS.
assert (A**Y / A**SS = (S A R T) / (S4 A R SS T)).
rewrite H14 in H9.
rewrite H9.
assert ((S A R T) = (S4 A P R Q)).
apply l2_12b_strong_3.

*****
H9 : eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (S A R T) (S4 A R SS T))
H15 : weak_3_parallelogram A SS D C
H14 : eq (DSeg A SS) (DSeg C D)
H12 : Col SS A Y
SS : Point
H7 : not (eq A Y)
H11 : weak_3_parallelogram R T Q P
H10 : eq (DSeg R T) (DSeg P Q)
H8 : Col T R Y
T : Point
H4 : parallel R Y P Q
H : not (eq R Y)
H6 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H5 : parallel Y R P Q
H3 : not (eq P Q)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (Col A R Y)
lambda : F
A,C,D,P,Q,R,Y : Point
*****
weak_3_parallelogram R T Q P
+++++
Geometry.
-----
Lemma elim_length_ratio_on_parallel_d_2 : forall (A C D P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> ~ Col A R Y -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
intros.
unfold on_parallel_d in H.
DecompAndAll.
assert (~R=Y).
assert (parallel R Y P Q).
Geometry.
assert (Th:= (on_line_dex_spec_strong_f R Y P Q H4 H)).
DecompExAnd Th T.
assert (A<>Y).
assert (Th:= (on_line_dex_spec_strong_f A Y C D H2 H7)).
DecompExAnd Th SS.
assert (A**Y / A**SS = (S A R T) / (S4 A R SS T)).
rewrite H14 in H9.
rewrite H9.
assert ((S A R T) = (S4 A P R Q)).

*****
H13 : eq (S A R T) (S4 A P R Q)
H9 : eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (S A R T) (S4 A R SS T))
H15 : weak_3_parallelogram A SS D C
H14 : eq (DSeg A SS) (DSeg C D)
H12 : Col SS A Y
SS : Point
H7 : not (eq A Y)
H11 : weak_3_parallelogram R T Q P
H10 : eq (DSeg R T) (DSeg P Q)
H8 : Col T R Y
T : Point
H4 : parallel R Y P Q
H : not (eq R Y)
H6 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H5 : parallel Y R P Q
H3 : not (eq P Q)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (Col A R Y)
lambda : F
A,C,D,P,Q,R,Y : Point
*****
eq (Fdiv (S A R T) (S4 A R SS T)) (Fdiv (S4 A P R Q) (S4 C P D Q))
+++++
rewrite H13.
-----
Lemma elim_length_ratio_on_parallel_d_2 : forall (A C D P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> ~ Col A R Y -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
intros.
unfold on_parallel_d in H.
DecompAndAll.
assert (~R=Y).
assert (parallel R Y P Q).
Geometry.
assert (Th:= (on_line_dex_spec_strong_f R Y P Q H4 H)).
DecompExAnd Th T.
assert (A<>Y).
assert (Th:= (on_line_dex_spec_strong_f A Y C D H2 H7)).
DecompExAnd Th SS.
assert (A**Y / A**SS = (S A R T) / (S4 A R SS T)).
rewrite H14 in H9.
rewrite H9.
assert ((S A R T) = (S4 A P R Q)).
rewrite H13.

*****
H13 : eq (S A R T) (S4 A P R Q)
H9 : eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (S A R T) (S4 A R SS T))
H15 : weak_3_parallelogram A SS D C
H14 : eq (DSeg A SS) (DSeg C D)
H12 : Col SS A Y
SS : Point
H7 : not (eq A Y)
H11 : weak_3_parallelogram R T Q P
H10 : eq (DSeg R T) (DSeg P Q)
H8 : Col T R Y
T : Point
H4 : parallel R Y P Q
H : not (eq R Y)
H6 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H5 : parallel Y R P Q
H3 : not (eq P Q)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (Col A R Y)
lambda : F
A,C,D,P,Q,R,Y : Point
*****
eq (Fdiv (S4 A P R Q) (S4 A R SS T)) (Fdiv (S4 A P R Q) (S4 C P D Q))
+++++
suppose ((S4 A R SS T) = (S4 C P D Q)).
-----
Lemma elim_length_ratio_on_parallel_d_2 : forall (A C D P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> ~ Col A R Y -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
intros.
unfold on_parallel_d in H.
DecompAndAll.
assert (~R=Y).
assert (parallel R Y P Q).
Geometry.
assert (Th:= (on_line_dex_spec_strong_f R Y P Q H4 H)).
DecompExAnd Th T.
assert (A<>Y).
assert (Th:= (on_line_dex_spec_strong_f A Y C D H2 H7)).
DecompExAnd Th SS.
assert (A**Y / A**SS = (S A R T) / (S4 A R SS T)).
rewrite H14 in H9.
rewrite H9.
assert ((S A R T) = (S4 A P R Q)).
rewrite H13.
suppose ((S4 A R SS T) = (S4 C P D Q)).

*****
H16 : eq (S4 A R SS T) (S4 C P D Q)
H13 : eq (S A R T) (S4 A P R Q)
H9 : eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (S A R T) (S4 A R SS T))
H15 : weak_3_parallelogram A SS D C
H14 : eq (DSeg A SS) (DSeg C D)
H12 : Col SS A Y
SS : Point
H7 : not (eq A Y)
H11 : weak_3_parallelogram R T Q P
H10 : eq (DSeg R T) (DSeg P Q)
H8 : Col T R Y
T : Point
H4 : parallel R Y P Q
H : not (eq R Y)
H6 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H5 : parallel Y R P Q
H3 : not (eq P Q)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (Col A R Y)
lambda : F
A,C,D,P,Q,R,Y : Point
*****
eq (Fdiv (S4 A P R Q) (S4 A R SS T)) (Fdiv (S4 A P R Q) (S4 C P D Q))
+++++
congruence.
-----
Lemma elim_length_ratio_on_parallel_d_2 : forall (A C D P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> ~ Col A R Y -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
intros.
unfold on_parallel_d in H.
DecompAndAll.
assert (~R=Y).
assert (parallel R Y P Q).
Geometry.
assert (Th:= (on_line_dex_spec_strong_f R Y P Q H4 H)).
DecompExAnd Th T.
assert (A<>Y).
assert (Th:= (on_line_dex_spec_strong_f A Y C D H2 H7)).
DecompExAnd Th SS.
assert (A**Y / A**SS = (S A R T) / (S4 A R SS T)).
rewrite H14 in H9.
rewrite H9.
assert ((S A R T) = (S4 A P R Q)).
rewrite H13.
suppose ((S4 A R SS T) = (S4 C P D Q)).

*****
H13 : eq (S A R T) (S4 A P R Q)
H9 : eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (S A R T) (S4 A R SS T))
H15 : weak_3_parallelogram A SS D C
H14 : eq (DSeg A SS) (DSeg C D)
H12 : Col SS A Y
SS : Point
H7 : not (eq A Y)
H11 : weak_3_parallelogram R T Q P
H10 : eq (DSeg R T) (DSeg P Q)
H8 : Col T R Y
T : Point
H4 : parallel R Y P Q
H : not (eq R Y)
H6 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H5 : parallel Y R P Q
H3 : not (eq P Q)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (Col A R Y)
lambda : F
A,C,D,P,Q,R,Y : Point
*****
eq (S4 A R SS T) (S4 C P D Q)
+++++
assert (weak_3_parallelogram C D SS A).
-----
Lemma elim_length_ratio_on_parallel_d_2 : forall (A C D P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> ~ Col A R Y -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
intros.
unfold on_parallel_d in H.
DecompAndAll.
assert (~R=Y).
assert (parallel R Y P Q).
Geometry.
assert (Th:= (on_line_dex_spec_strong_f R Y P Q H4 H)).
DecompExAnd Th T.
assert (A<>Y).
assert (Th:= (on_line_dex_spec_strong_f A Y C D H2 H7)).
DecompExAnd Th SS.
assert (A**Y / A**SS = (S A R T) / (S4 A R SS T)).
rewrite H14 in H9.
rewrite H9.
assert ((S A R T) = (S4 A P R Q)).
rewrite H13.
suppose ((S4 A R SS T) = (S4 C P D Q)).
assert (weak_3_parallelogram C D SS A).

*****
H13 : eq (S A R T) (S4 A P R Q)
H9 : eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (S A R T) (S4 A R SS T))
H15 : weak_3_parallelogram A SS D C
H14 : eq (DSeg A SS) (DSeg C D)
H12 : Col SS A Y
SS : Point
H7 : not (eq A Y)
H11 : weak_3_parallelogram R T Q P
H10 : eq (DSeg R T) (DSeg P Q)
H8 : Col T R Y
T : Point
H4 : parallel R Y P Q
H : not (eq R Y)
H6 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H5 : parallel Y R P Q
H3 : not (eq P Q)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (Col A R Y)
lambda : F
A,C,D,P,Q,R,Y : Point
*****
weak_3_parallelogram C D SS A
+++++
Geometry.
-----
Lemma elim_length_ratio_on_parallel_d_2 : forall (A C D P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> ~ Col A R Y -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
intros.
unfold on_parallel_d in H.
DecompAndAll.
assert (~R=Y).
assert (parallel R Y P Q).
Geometry.
assert (Th:= (on_line_dex_spec_strong_f R Y P Q H4 H)).
DecompExAnd Th T.
assert (A<>Y).
assert (Th:= (on_line_dex_spec_strong_f A Y C D H2 H7)).
DecompExAnd Th SS.
assert (A**Y / A**SS = (S A R T) / (S4 A R SS T)).
rewrite H14 in H9.
rewrite H9.
assert ((S A R T) = (S4 A P R Q)).
rewrite H13.
suppose ((S4 A R SS T) = (S4 C P D Q)).
assert (weak_3_parallelogram C D SS A).

*****
H16 : weak_3_parallelogram C D SS A
H13 : eq (S A R T) (S4 A P R Q)
H9 : eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (S A R T) (S4 A R SS T))
H15 : weak_3_parallelogram A SS D C
H14 : eq (DSeg A SS) (DSeg C D)
H12 : Col SS A Y
SS : Point
H7 : not (eq A Y)
H11 : weak_3_parallelogram R T Q P
H10 : eq (DSeg R T) (DSeg P Q)
H8 : Col T R Y
T : Point
H4 : parallel R Y P Q
H : not (eq R Y)
H6 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H5 : parallel Y R P Q
H3 : not (eq P Q)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (Col A R Y)
lambda : F
A,C,D,P,Q,R,Y : Point
*****
eq (S4 A R SS T) (S4 C P D Q)
+++++
Geometry.
-----
Lemma elim_length_ratio_on_parallel_d_2 : forall (A C D P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> ~ Col A R Y -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
intros.
unfold on_parallel_d in H.
DecompAndAll.
assert (~R=Y).
assert (parallel R Y P Q).
Geometry.
assert (Th:= (on_line_dex_spec_strong_f R Y P Q H4 H)).
DecompExAnd Th T.
assert (A<>Y).
assert (Th:= (on_line_dex_spec_strong_f A Y C D H2 H7)).
DecompExAnd Th SS.
assert (A**Y / A**SS = (S A R T) / (S4 A R SS T)).
rewrite H14 in H9.
rewrite H9.
assert ((S A R T) = (S4 A P R Q)).
rewrite H13.
suppose ((S4 A R SS T) = (S4 C P D Q)).
assert (weak_3_parallelogram C D SS A).
Geometry.

*****
H16 : weak_3_parallelogram C D SS A
H13 : eq (S A R T) (S4 A P R Q)
H9 : eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (S A R T) (S4 A R SS T))
H15 : weak_3_parallelogram A SS D C
H14 : eq (DSeg A SS) (DSeg C D)
H12 : Col SS A Y
SS : Point
H7 : not (eq A Y)
H11 : weak_3_parallelogram R T Q P
H10 : eq (DSeg R T) (DSeg P Q)
H8 : Col T R Y
T : Point
H4 : parallel R Y P Q
H : not (eq R Y)
H6 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H5 : parallel Y R P Q
H3 : not (eq P Q)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (Col A R Y)
lambda : F
A,C,D,P,Q,R,Y : Point
*****
eq (S4 A R SS T) (S4 C P D Q)
+++++
assert ((S4 C R D T) = (S4 C P D Q)).
-----
Lemma elim_length_ratio_on_parallel_d_2 : forall (A C D P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> ~ Col A R Y -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
intros.
unfold on_parallel_d in H.
DecompAndAll.
assert (~R=Y).
assert (parallel R Y P Q).
Geometry.
assert (Th:= (on_line_dex_spec_strong_f R Y P Q H4 H)).
DecompExAnd Th T.
assert (A<>Y).
assert (Th:= (on_line_dex_spec_strong_f A Y C D H2 H7)).
DecompExAnd Th SS.
assert (A**Y / A**SS = (S A R T) / (S4 A R SS T)).
rewrite H14 in H9.
rewrite H9.
assert ((S A R T) = (S4 A P R Q)).
rewrite H13.
suppose ((S4 A R SS T) = (S4 C P D Q)).
assert (weak_3_parallelogram C D SS A).
Geometry.
assert ((S4 C R D T) = (S4 C P D Q)).

*****
H16 : weak_3_parallelogram C D SS A
H13 : eq (S A R T) (S4 A P R Q)
H9 : eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (S A R T) (S4 A R SS T))
H15 : weak_3_parallelogram A SS D C
H14 : eq (DSeg A SS) (DSeg C D)
H12 : Col SS A Y
SS : Point
H7 : not (eq A Y)
H11 : weak_3_parallelogram R T Q P
H10 : eq (DSeg R T) (DSeg P Q)
H8 : Col T R Y
T : Point
H4 : parallel R Y P Q
H : not (eq R Y)
H6 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H5 : parallel Y R P Q
H3 : not (eq P Q)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (Col A R Y)
lambda : F
A,C,D,P,Q,R,Y : Point
*****
eq (S4 C R D T) (S4 C P D Q)
+++++
apply l2_11b_strong_strong_strong.
-----
Lemma elim_length_ratio_on_parallel_d_2 : forall (A C D P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> ~ Col A R Y -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
intros.
unfold on_parallel_d in H.
DecompAndAll.
assert (~R=Y).
assert (parallel R Y P Q).
Geometry.
assert (Th:= (on_line_dex_spec_strong_f R Y P Q H4 H)).
DecompExAnd Th T.
assert (A<>Y).
assert (Th:= (on_line_dex_spec_strong_f A Y C D H2 H7)).
DecompExAnd Th SS.
assert (A**Y / A**SS = (S A R T) / (S4 A R SS T)).
rewrite H14 in H9.
rewrite H9.
assert ((S A R T) = (S4 A P R Q)).
rewrite H13.
suppose ((S4 A R SS T) = (S4 C P D Q)).
assert (weak_3_parallelogram C D SS A).
Geometry.
assert ((S4 C R D T) = (S4 C P D Q)).
apply l2_11b_strong_strong_strong.

*****
H16 : weak_3_parallelogram C D SS A
H13 : eq (S A R T) (S4 A P R Q)
H9 : eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (S A R T) (S4 A R SS T))
H15 : weak_3_parallelogram A SS D C
H14 : eq (DSeg A SS) (DSeg C D)
H12 : Col SS A Y
SS : Point
H7 : not (eq A Y)
H11 : weak_3_parallelogram R T Q P
H10 : eq (DSeg R T) (DSeg P Q)
H8 : Col T R Y
T : Point
H4 : parallel R Y P Q
H : not (eq R Y)
H6 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H5 : parallel Y R P Q
H3 : not (eq P Q)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (Col A R Y)
lambda : F
A,C,D,P,Q,R,Y : Point
*****
weak_3_parallelogram R T Q P
+++++
Geometry.
-----
Lemma elim_length_ratio_on_parallel_d_2 : forall (A C D P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> ~ Col A R Y -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
intros.
unfold on_parallel_d in H.
DecompAndAll.
assert (~R=Y).
assert (parallel R Y P Q).
Geometry.
assert (Th:= (on_line_dex_spec_strong_f R Y P Q H4 H)).
DecompExAnd Th T.
assert (A<>Y).
assert (Th:= (on_line_dex_spec_strong_f A Y C D H2 H7)).
DecompExAnd Th SS.
assert (A**Y / A**SS = (S A R T) / (S4 A R SS T)).
rewrite H14 in H9.
rewrite H9.
assert ((S A R T) = (S4 A P R Q)).
rewrite H13.
suppose ((S4 A R SS T) = (S4 C P D Q)).
assert (weak_3_parallelogram C D SS A).
Geometry.
assert ((S4 C R D T) = (S4 C P D Q)).

*****
H17 : eq (S4 C R D T) (S4 C P D Q)
H16 : weak_3_parallelogram C D SS A
H13 : eq (S A R T) (S4 A P R Q)
H9 : eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (S A R T) (S4 A R SS T))
H15 : weak_3_parallelogram A SS D C
H14 : eq (DSeg A SS) (DSeg C D)
H12 : Col SS A Y
SS : Point
H7 : not (eq A Y)
H11 : weak_3_parallelogram R T Q P
H10 : eq (DSeg R T) (DSeg P Q)
H8 : Col T R Y
T : Point
H4 : parallel R Y P Q
H : not (eq R Y)
H6 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H5 : parallel Y R P Q
H3 : not (eq P Q)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (Col A R Y)
lambda : F
A,C,D,P,Q,R,Y : Point
*****
eq (S4 A R SS T) (S4 C P D Q)
+++++
rewrite <- H17.
-----
Lemma elim_length_ratio_on_parallel_d_2 : forall (A C D P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> ~ Col A R Y -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
intros.
unfold on_parallel_d in H.
DecompAndAll.
assert (~R=Y).
assert (parallel R Y P Q).
Geometry.
assert (Th:= (on_line_dex_spec_strong_f R Y P Q H4 H)).
DecompExAnd Th T.
assert (A<>Y).
assert (Th:= (on_line_dex_spec_strong_f A Y C D H2 H7)).
DecompExAnd Th SS.
assert (A**Y / A**SS = (S A R T) / (S4 A R SS T)).
rewrite H14 in H9.
rewrite H9.
assert ((S A R T) = (S4 A P R Q)).
rewrite H13.
suppose ((S4 A R SS T) = (S4 C P D Q)).
assert (weak_3_parallelogram C D SS A).
Geometry.
assert ((S4 C R D T) = (S4 C P D Q)).
rewrite <- H17.

*****
H17 : eq (S4 C R D T) (S4 C P D Q)
H16 : weak_3_parallelogram C D SS A
H13 : eq (S A R T) (S4 A P R Q)
H9 : eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (S A R T) (S4 A R SS T))
H15 : weak_3_parallelogram A SS D C
H14 : eq (DSeg A SS) (DSeg C D)
H12 : Col SS A Y
SS : Point
H7 : not (eq A Y)
H11 : weak_3_parallelogram R T Q P
H10 : eq (DSeg R T) (DSeg P Q)
H8 : Col T R Y
T : Point
H4 : parallel R Y P Q
H : not (eq R Y)
H6 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H5 : parallel Y R P Q
H3 : not (eq P Q)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (Col A R Y)
lambda : F
A,C,D,P,Q,R,Y : Point
*****
eq (S4 A R SS T) (S4 C R D T)
+++++
symmetry.
-----
Lemma elim_length_ratio_on_parallel_d_2 : forall (A C D P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> ~ Col A R Y -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
intros.
unfold on_parallel_d in H.
DecompAndAll.
assert (~R=Y).
assert (parallel R Y P Q).
Geometry.
assert (Th:= (on_line_dex_spec_strong_f R Y P Q H4 H)).
DecompExAnd Th T.
assert (A<>Y).
assert (Th:= (on_line_dex_spec_strong_f A Y C D H2 H7)).
DecompExAnd Th SS.
assert (A**Y / A**SS = (S A R T) / (S4 A R SS T)).
rewrite H14 in H9.
rewrite H9.
assert ((S A R T) = (S4 A P R Q)).
rewrite H13.
suppose ((S4 A R SS T) = (S4 C P D Q)).
assert (weak_3_parallelogram C D SS A).
Geometry.
assert ((S4 C R D T) = (S4 C P D Q)).
rewrite <- H17.
symmetry.

*****
H17 : eq (S4 C R D T) (S4 C P D Q)
H16 : weak_3_parallelogram C D SS A
H13 : eq (S A R T) (S4 A P R Q)
H9 : eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (S A R T) (S4 A R SS T))
H15 : weak_3_parallelogram A SS D C
H14 : eq (DSeg A SS) (DSeg C D)
H12 : Col SS A Y
SS : Point
H7 : not (eq A Y)
H11 : weak_3_parallelogram R T Q P
H10 : eq (DSeg R T) (DSeg P Q)
H8 : Col T R Y
T : Point
H4 : parallel R Y P Q
H : not (eq R Y)
H6 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H5 : parallel Y R P Q
H3 : not (eq P Q)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (Col A R Y)
lambda : F
A,C,D,P,Q,R,Y : Point
*****
eq (S4 C R D T) (S4 A R SS T)
+++++
assert ((S4 C R D T) = -(S4 R C T D)).
-----
Lemma elim_length_ratio_on_parallel_d_2 : forall (A C D P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> ~ Col A R Y -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
intros.
unfold on_parallel_d in H.
DecompAndAll.
assert (~R=Y).
assert (parallel R Y P Q).
Geometry.
assert (Th:= (on_line_dex_spec_strong_f R Y P Q H4 H)).
DecompExAnd Th T.
assert (A<>Y).
assert (Th:= (on_line_dex_spec_strong_f A Y C D H2 H7)).
DecompExAnd Th SS.
assert (A**Y / A**SS = (S A R T) / (S4 A R SS T)).
rewrite H14 in H9.
rewrite H9.
assert ((S A R T) = (S4 A P R Q)).
rewrite H13.
suppose ((S4 A R SS T) = (S4 C P D Q)).
assert (weak_3_parallelogram C D SS A).
Geometry.
assert ((S4 C R D T) = (S4 C P D Q)).
rewrite <- H17.
symmetry.
assert ((S4 C R D T) = -(S4 R C T D)).

*****
H17 : eq (S4 C R D T) (S4 C P D Q)
H16 : weak_3_parallelogram C D SS A
H13 : eq (S A R T) (S4 A P R Q)
H9 : eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (S A R T) (S4 A R SS T))
H15 : weak_3_parallelogram A SS D C
H14 : eq (DSeg A SS) (DSeg C D)
H12 : Col SS A Y
SS : Point
H7 : not (eq A Y)
H11 : weak_3_parallelogram R T Q P
H10 : eq (DSeg R T) (DSeg P Q)
H8 : Col T R Y
T : Point
H4 : parallel R Y P Q
H : not (eq R Y)
H6 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H5 : parallel Y R P Q
H3 : not (eq P Q)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (Col A R Y)
lambda : F
A,C,D,P,Q,R,Y : Point
*****
eq (S4 C R D T) (Fopp (S4 R C T D))
+++++
Geometry.
-----
Lemma elim_length_ratio_on_parallel_d_2 : forall (A C D P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> ~ Col A R Y -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
intros.
unfold on_parallel_d in H.
DecompAndAll.
assert (~R=Y).
assert (parallel R Y P Q).
Geometry.
assert (Th:= (on_line_dex_spec_strong_f R Y P Q H4 H)).
DecompExAnd Th T.
assert (A<>Y).
assert (Th:= (on_line_dex_spec_strong_f A Y C D H2 H7)).
DecompExAnd Th SS.
assert (A**Y / A**SS = (S A R T) / (S4 A R SS T)).
rewrite H14 in H9.
rewrite H9.
assert ((S A R T) = (S4 A P R Q)).
rewrite H13.
suppose ((S4 A R SS T) = (S4 C P D Q)).
assert (weak_3_parallelogram C D SS A).
Geometry.
assert ((S4 C R D T) = (S4 C P D Q)).
rewrite <- H17.
symmetry.
assert ((S4 C R D T) = -(S4 R C T D)).

*****
H18 : eq (S4 C R D T) (Fopp (S4 R C T D))
H17 : eq (S4 C R D T) (S4 C P D Q)
H16 : weak_3_parallelogram C D SS A
H13 : eq (S A R T) (S4 A P R Q)
H9 : eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (S A R T) (S4 A R SS T))
H15 : weak_3_parallelogram A SS D C
H14 : eq (DSeg A SS) (DSeg C D)
H12 : Col SS A Y
SS : Point
H7 : not (eq A Y)
H11 : weak_3_parallelogram R T Q P
H10 : eq (DSeg R T) (DSeg P Q)
H8 : Col T R Y
T : Point
H4 : parallel R Y P Q
H : not (eq R Y)
H6 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H5 : parallel Y R P Q
H3 : not (eq P Q)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (Col A R Y)
lambda : F
A,C,D,P,Q,R,Y : Point
*****
eq (S4 C R D T) (S4 A R SS T)
+++++
assert ((S4 A R SS T) = -(S4 R A T SS)).
-----
Lemma elim_length_ratio_on_parallel_d_2 : forall (A C D P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> ~ Col A R Y -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
intros.
unfold on_parallel_d in H.
DecompAndAll.
assert (~R=Y).
assert (parallel R Y P Q).
Geometry.
assert (Th:= (on_line_dex_spec_strong_f R Y P Q H4 H)).
DecompExAnd Th T.
assert (A<>Y).
assert (Th:= (on_line_dex_spec_strong_f A Y C D H2 H7)).
DecompExAnd Th SS.
assert (A**Y / A**SS = (S A R T) / (S4 A R SS T)).
rewrite H14 in H9.
rewrite H9.
assert ((S A R T) = (S4 A P R Q)).
rewrite H13.
suppose ((S4 A R SS T) = (S4 C P D Q)).
assert (weak_3_parallelogram C D SS A).
Geometry.
assert ((S4 C R D T) = (S4 C P D Q)).
rewrite <- H17.
symmetry.
assert ((S4 C R D T) = -(S4 R C T D)).
assert ((S4 A R SS T) = -(S4 R A T SS)).

*****
H18 : eq (S4 C R D T) (Fopp (S4 R C T D))
H17 : eq (S4 C R D T) (S4 C P D Q)
H16 : weak_3_parallelogram C D SS A
H13 : eq (S A R T) (S4 A P R Q)
H9 : eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (S A R T) (S4 A R SS T))
H15 : weak_3_parallelogram A SS D C
H14 : eq (DSeg A SS) (DSeg C D)
H12 : Col SS A Y
SS : Point
H7 : not (eq A Y)
H11 : weak_3_parallelogram R T Q P
H10 : eq (DSeg R T) (DSeg P Q)
H8 : Col T R Y
T : Point
H4 : parallel R Y P Q
H : not (eq R Y)
H6 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H5 : parallel Y R P Q
H3 : not (eq P Q)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (Col A R Y)
lambda : F
A,C,D,P,Q,R,Y : Point
*****
eq (S4 A R SS T) (Fopp (S4 R A T SS))
+++++
Geometry.
-----
Lemma elim_length_ratio_on_parallel_d_2 : forall (A C D P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> ~ Col A R Y -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
intros.
unfold on_parallel_d in H.
DecompAndAll.
assert (~R=Y).
assert (parallel R Y P Q).
Geometry.
assert (Th:= (on_line_dex_spec_strong_f R Y P Q H4 H)).
DecompExAnd Th T.
assert (A<>Y).
assert (Th:= (on_line_dex_spec_strong_f A Y C D H2 H7)).
DecompExAnd Th SS.
assert (A**Y / A**SS = (S A R T) / (S4 A R SS T)).
rewrite H14 in H9.
rewrite H9.
assert ((S A R T) = (S4 A P R Q)).
rewrite H13.
suppose ((S4 A R SS T) = (S4 C P D Q)).
assert (weak_3_parallelogram C D SS A).
Geometry.
assert ((S4 C R D T) = (S4 C P D Q)).
rewrite <- H17.
symmetry.
assert ((S4 C R D T) = -(S4 R C T D)).
assert ((S4 A R SS T) = -(S4 R A T SS)).

*****
H19 : eq (S4 A R SS T) (Fopp (S4 R A T SS))
H18 : eq (S4 C R D T) (Fopp (S4 R C T D))
H17 : eq (S4 C R D T) (S4 C P D Q)
H16 : weak_3_parallelogram C D SS A
H13 : eq (S A R T) (S4 A P R Q)
H9 : eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (S A R T) (S4 A R SS T))
H15 : weak_3_parallelogram A SS D C
H14 : eq (DSeg A SS) (DSeg C D)
H12 : Col SS A Y
SS : Point
H7 : not (eq A Y)
H11 : weak_3_parallelogram R T Q P
H10 : eq (DSeg R T) (DSeg P Q)
H8 : Col T R Y
T : Point
H4 : parallel R Y P Q
H : not (eq R Y)
H6 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H5 : parallel Y R P Q
H3 : not (eq P Q)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (Col A R Y)
lambda : F
A,C,D,P,Q,R,Y : Point
*****
eq (S4 C R D T) (S4 A R SS T)
+++++
assert ((S4 R C T D) = (S4 R A T SS)).
-----
Lemma elim_length_ratio_on_parallel_d_2 : forall (A C D P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> ~ Col A R Y -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
intros.
unfold on_parallel_d in H.
DecompAndAll.
assert (~R=Y).
assert (parallel R Y P Q).
Geometry.
assert (Th:= (on_line_dex_spec_strong_f R Y P Q H4 H)).
DecompExAnd Th T.
assert (A<>Y).
assert (Th:= (on_line_dex_spec_strong_f A Y C D H2 H7)).
DecompExAnd Th SS.
assert (A**Y / A**SS = (S A R T) / (S4 A R SS T)).
rewrite H14 in H9.
rewrite H9.
assert ((S A R T) = (S4 A P R Q)).
rewrite H13.
suppose ((S4 A R SS T) = (S4 C P D Q)).
assert (weak_3_parallelogram C D SS A).
Geometry.
assert ((S4 C R D T) = (S4 C P D Q)).
rewrite <- H17.
symmetry.
assert ((S4 C R D T) = -(S4 R C T D)).
assert ((S4 A R SS T) = -(S4 R A T SS)).
assert ((S4 R C T D) = (S4 R A T SS)).

*****
H19 : eq (S4 A R SS T) (Fopp (S4 R A T SS))
H18 : eq (S4 C R D T) (Fopp (S4 R C T D))
H17 : eq (S4 C R D T) (S4 C P D Q)
H16 : weak_3_parallelogram C D SS A
H13 : eq (S A R T) (S4 A P R Q)
H9 : eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (S A R T) (S4 A R SS T))
H15 : weak_3_parallelogram A SS D C
H14 : eq (DSeg A SS) (DSeg C D)
H12 : Col SS A Y
SS : Point
H7 : not (eq A Y)
H11 : weak_3_parallelogram R T Q P
H10 : eq (DSeg R T) (DSeg P Q)
H8 : Col T R Y
T : Point
H4 : parallel R Y P Q
H : not (eq R Y)
H6 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H5 : parallel Y R P Q
H3 : not (eq P Q)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (Col A R Y)
lambda : F
A,C,D,P,Q,R,Y : Point
*****
eq (S4 R C T D) (S4 R A T SS)
+++++
apply l2_11b_strong_strong_strong.
-----
Lemma elim_length_ratio_on_parallel_d_2 : forall (A C D P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> ~ Col A R Y -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
intros.
unfold on_parallel_d in H.
DecompAndAll.
assert (~R=Y).
assert (parallel R Y P Q).
Geometry.
assert (Th:= (on_line_dex_spec_strong_f R Y P Q H4 H)).
DecompExAnd Th T.
assert (A<>Y).
assert (Th:= (on_line_dex_spec_strong_f A Y C D H2 H7)).
DecompExAnd Th SS.
assert (A**Y / A**SS = (S A R T) / (S4 A R SS T)).
rewrite H14 in H9.
rewrite H9.
assert ((S A R T) = (S4 A P R Q)).
rewrite H13.
suppose ((S4 A R SS T) = (S4 C P D Q)).
assert (weak_3_parallelogram C D SS A).
Geometry.
assert ((S4 C R D T) = (S4 C P D Q)).
rewrite <- H17.
symmetry.
assert ((S4 C R D T) = -(S4 R C T D)).
assert ((S4 A R SS T) = -(S4 R A T SS)).
assert ((S4 R C T D) = (S4 R A T SS)).
apply l2_11b_strong_strong_strong.

*****
H19 : eq (S4 A R SS T) (Fopp (S4 R A T SS))
H18 : eq (S4 C R D T) (Fopp (S4 R C T D))
H17 : eq (S4 C R D T) (S4 C P D Q)
H16 : weak_3_parallelogram C D SS A
H13 : eq (S A R T) (S4 A P R Q)
H9 : eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (S A R T) (S4 A R SS T))
H15 : weak_3_parallelogram A SS D C
H14 : eq (DSeg A SS) (DSeg C D)
H12 : Col SS A Y
SS : Point
H7 : not (eq A Y)
H11 : weak_3_parallelogram R T Q P
H10 : eq (DSeg R T) (DSeg P Q)
H8 : Col T R Y
T : Point
H4 : parallel R Y P Q
H : not (eq R Y)
H6 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H5 : parallel Y R P Q
H3 : not (eq P Q)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (Col A R Y)
lambda : F
A,C,D,P,Q,R,Y : Point
*****
weak_3_parallelogram C D SS A
+++++
trivial.
-----
Lemma elim_length_ratio_on_parallel_d_2 : forall (A C D P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> ~ Col A R Y -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
intros.
unfold on_parallel_d in H.
DecompAndAll.
assert (~R=Y).
assert (parallel R Y P Q).
Geometry.
assert (Th:= (on_line_dex_spec_strong_f R Y P Q H4 H)).
DecompExAnd Th T.
assert (A<>Y).
assert (Th:= (on_line_dex_spec_strong_f A Y C D H2 H7)).
DecompExAnd Th SS.
assert (A**Y / A**SS = (S A R T) / (S4 A R SS T)).
rewrite H14 in H9.
rewrite H9.
assert ((S A R T) = (S4 A P R Q)).
rewrite H13.
suppose ((S4 A R SS T) = (S4 C P D Q)).
assert (weak_3_parallelogram C D SS A).
Geometry.
assert ((S4 C R D T) = (S4 C P D Q)).
rewrite <- H17.
symmetry.
assert ((S4 C R D T) = -(S4 R C T D)).
assert ((S4 A R SS T) = -(S4 R A T SS)).
assert ((S4 R C T D) = (S4 R A T SS)).

*****
H20 : eq (S4 R C T D) (S4 R A T SS)
H19 : eq (S4 A R SS T) (Fopp (S4 R A T SS))
H18 : eq (S4 C R D T) (Fopp (S4 R C T D))
H17 : eq (S4 C R D T) (S4 C P D Q)
H16 : weak_3_parallelogram C D SS A
H13 : eq (S A R T) (S4 A P R Q)
H9 : eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (S A R T) (S4 A R SS T))
H15 : weak_3_parallelogram A SS D C
H14 : eq (DSeg A SS) (DSeg C D)
H12 : Col SS A Y
SS : Point
H7 : not (eq A Y)
H11 : weak_3_parallelogram R T Q P
H10 : eq (DSeg R T) (DSeg P Q)
H8 : Col T R Y
T : Point
H4 : parallel R Y P Q
H : not (eq R Y)
H6 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H5 : parallel Y R P Q
H3 : not (eq P Q)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (Col A R Y)
lambda : F
A,C,D,P,Q,R,Y : Point
*****
eq (S4 C R D T) (S4 A R SS T)
+++++
congruence.
-----
Lemma elim_length_ratio_on_parallel_d_2 : forall (A C D P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> ~ Col A R Y -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
intros.
unfold on_parallel_d in H.
DecompAndAll.
assert (~R=Y).

*****

*****

+++++
Qed.
-----
Lemma elim_area_on_inter_parallel_parallel :\n    forall P Q R U V W Y A B : Point,\n    on_inter_parallel_parallel Y R P Q W U V ->\n    R <> Y ->\n    S A B Y = S4 P W Q R / S4 P U Q V * S4 A U B V + S A B W.
-----
Lemma elim_area_on_inter_parallel_parallel : forall P Q R U V W Y A B : Point, on_inter_parallel_parallel Y R P Q W U V -> R <> Y -> S A B Y = S4 P W Q R / S4 P U Q V * S4 A U B V + S A B W.

*****

*****
forall (P Q R U V W Y A B : Point) (_ : on_inter_parallel_parallel Y R P Q W U V) (_ : not (eq R Y)), eq (S A B Y) (Fplus (Fmult (Fdiv (S4 P W Q R) (S4 P U Q V)) (S4 A U B V)) (S A B W))
+++++
Proof.
-----
Lemma elim_area_on_inter_parallel_parallel : forall P Q R U V W Y A B : Point, on_inter_parallel_parallel Y R P Q W U V -> R <> Y -> S A B Y = S4 P W Q R / S4 P U Q V * S4 A U B V + S A B W.
Proof.

*****

*****
forall (P Q R U V W Y A B : Point) (_ : on_inter_parallel_parallel Y R P Q W U V) (_ : not (eq R Y)), eq (S A B Y) (Fplus (Fmult (Fdiv (S4 P W Q R) (S4 P U Q V)) (S4 A U B V)) (S A B W))
+++++
intros.
-----
Lemma elim_area_on_inter_parallel_parallel : forall P Q R U V W Y A B : Point, on_inter_parallel_parallel Y R P Q W U V -> R <> Y -> S A B Y = S4 P W Q R / S4 P U Q V * S4 A U B V + S A B W.
Proof.
intros.

*****
H0 : not (eq R Y)
H : on_inter_parallel_parallel Y R P Q W U V
P,Q,R,U,V,W,Y,A,B : Point
*****
eq (S A B Y) (Fplus (Fmult (Fdiv (S4 P W Q R) (S4 P U Q V)) (S4 A U B V)) (S A B W))
+++++
unfold on_inter_parallel_parallel in *.
-----
Lemma elim_area_on_inter_parallel_parallel : forall P Q R U V W Y A B : Point, on_inter_parallel_parallel Y R P Q W U V -> R <> Y -> S A B Y = S4 P W Q R / S4 P U Q V * S4 A U B V + S A B W.
Proof.
intros.
unfold on_inter_parallel_parallel in *.

*****
H0 : not (eq R Y)
H : and (not (Col R U V))\n (and (parallel Y R P Q)\n (and (parallel Y W U V) (not (parallel U V P Q))))
P,Q,R,U,V,W,Y,A,B : Point
*****
eq (S A B Y) (Fplus (Fmult (Fdiv (S4 P W Q R) (S4 P U Q V)) (S4 A U B V)) (S A B W))
+++++
DecompAndAll.
-----
Lemma elim_area_on_inter_parallel_parallel : forall P Q R U V W Y A B : Point, on_inter_parallel_parallel Y R P Q W U V -> R <> Y -> S A B Y = S4 P W Q R / S4 P U Q V * S4 A U B V + S A B W.
Proof.
intros.
unfold on_inter_parallel_parallel in *.
DecompAndAll.

*****
H5 : not (parallel U V P Q)
H2 : parallel Y W U V
H3 : parallel Y R P Q
H1 : not (Col R U V)
H0 : not (eq R Y)
P,Q,R,U,V,W,Y,A,B : Point
*****
eq (S A B Y) (Fplus (Fmult (Fdiv (S4 P W Q R) (S4 P U Q V)) (S4 A U B V)) (S A B W))
+++++
assert ((S A B Y) = (S A B W) + W**Y/U**V * (S4 A U B V)).
-----
Lemma elim_area_on_inter_parallel_parallel : forall P Q R U V W Y A B : Point, on_inter_parallel_parallel Y R P Q W U V -> R <> Y -> S A B Y = S4 P W Q R / S4 P U Q V * S4 A U B V + S A B W.
Proof.
intros.
unfold on_inter_parallel_parallel in *.
DecompAndAll.
assert ((S A B Y) = (S A B W) + W**Y/U**V * (S4 A U B V)).

*****
H5 : not (parallel U V P Q)
H2 : parallel Y W U V
H3 : parallel Y R P Q
H1 : not (Col R U V)
H0 : not (eq R Y)
P,Q,R,U,V,W,Y,A,B : Point
*****
eq (S A B Y) (Fplus (S A B W) (Fmult (Fdiv (DSeg W Y) (DSeg U V)) (S4 A U B V)))
+++++
apply elim_area_on_parallel.
-----
Lemma elim_area_on_inter_parallel_parallel : forall P Q R U V W Y A B : Point, on_inter_parallel_parallel Y R P Q W U V -> R <> Y -> S A B Y = S4 P W Q R / S4 P U Q V * S4 A U B V + S A B W.
Proof.
intros.
unfold on_inter_parallel_parallel in *.
DecompAndAll.
assert ((S A B Y) = (S A B W) + W**Y/U**V * (S4 A U B V)).
apply elim_area_on_parallel.

*****
H5 : not (parallel U V P Q)
H2 : parallel Y W U V
H3 : parallel Y R P Q
H1 : not (Col R U V)
H0 : not (eq R Y)
P,Q,R,U,V,W,Y,A,B : Point
*****
on_parallel Y W U V
+++++
unfold on_parallel.
-----
Lemma elim_area_on_inter_parallel_parallel : forall P Q R U V W Y A B : Point, on_inter_parallel_parallel Y R P Q W U V -> R <> Y -> S A B Y = S4 P W Q R / S4 P U Q V * S4 A U B V + S A B W.
Proof.
intros.
unfold on_inter_parallel_parallel in *.
DecompAndAll.
assert ((S A B Y) = (S A B W) + W**Y/U**V * (S4 A U B V)).
apply elim_area_on_parallel.
unfold on_parallel.

*****
H5 : not (parallel U V P Q)
H2 : parallel Y W U V
H3 : parallel Y R P Q
H1 : not (Col R U V)
H0 : not (eq R Y)
P,Q,R,U,V,W,Y,A,B : Point
*****
and (not (eq U V)) (parallel W Y U V)
+++++
repeat split.
-----
Lemma elim_area_on_inter_parallel_parallel : forall P Q R U V W Y A B : Point, on_inter_parallel_parallel Y R P Q W U V -> R <> Y -> S A B Y = S4 P W Q R / S4 P U Q V * S4 A U B V + S A B W.
Proof.
intros.
unfold on_inter_parallel_parallel in *.
DecompAndAll.
assert ((S A B Y) = (S A B W) + W**Y/U**V * (S4 A U B V)).
apply elim_area_on_parallel.
unfold on_parallel.
repeat split.

*****
H5 : not (parallel U V P Q)
H2 : parallel Y W U V
H3 : parallel Y R P Q
H1 : not (Col R U V)
H0 : not (eq R Y)
P,Q,R,U,V,W,Y,A,B : Point
*****
not (eq U V)
+++++
Geometry.
-----
Lemma elim_area_on_inter_parallel_parallel : forall P Q R U V W Y A B : Point, on_inter_parallel_parallel Y R P Q W U V -> R <> Y -> S A B Y = S4 P W Q R / S4 P U Q V * S4 A U B V + S A B W.
Proof.
intros.
unfold on_inter_parallel_parallel in *.
DecompAndAll.
assert ((S A B Y) = (S A B W) + W**Y/U**V * (S4 A U B V)).
apply elim_area_on_parallel.
unfold on_parallel.
repeat split.
Geometry.

*****
H5 : not (parallel U V P Q)
H2 : parallel Y W U V
H3 : parallel Y R P Q
H1 : not (Col R U V)
H0 : not (eq R Y)
P,Q,R,U,V,W,Y,A,B : Point
*****
not (eq U V)
+++++
unfold not.
-----
Lemma elim_area_on_inter_parallel_parallel : forall P Q R U V W Y A B : Point, on_inter_parallel_parallel Y R P Q W U V -> R <> Y -> S A B Y = S4 P W Q R / S4 P U Q V * S4 A U B V + S A B W.
Proof.
intros.
unfold on_inter_parallel_parallel in *.
DecompAndAll.
assert ((S A B Y) = (S A B W) + W**Y/U**V * (S4 A U B V)).
apply elim_area_on_parallel.
unfold on_parallel.
repeat split.
Geometry.
unfold not.

*****
H5 : not (parallel U V P Q)
H2 : parallel Y W U V
H3 : parallel Y R P Q
H1 : not (Col R U V)
H0 : not (eq R Y)
P,Q,R,U,V,W,Y,A,B : Point
*****
forall _ : eq U V, False
+++++
intro.
-----
Lemma elim_area_on_inter_parallel_parallel : forall P Q R U V W Y A B : Point, on_inter_parallel_parallel Y R P Q W U V -> R <> Y -> S A B Y = S4 P W Q R / S4 P U Q V * S4 A U B V + S A B W.
Proof.
intros.
unfold on_inter_parallel_parallel in *.
DecompAndAll.
assert ((S A B Y) = (S A B W) + W**Y/U**V * (S4 A U B V)).
apply elim_area_on_parallel.
unfold on_parallel.
repeat split.
Geometry.
unfold not.
intro.

*****
H : eq U V
H5 : not (parallel U V P Q)
H2 : parallel Y W U V
H3 : parallel Y R P Q
H1 : not (Col R U V)
H0 : not (eq R Y)
P,Q,R,U,V,W,Y,A,B : Point
*****
False
+++++
subst U.
-----
Lemma elim_area_on_inter_parallel_parallel : forall P Q R U V W Y A B : Point, on_inter_parallel_parallel Y R P Q W U V -> R <> Y -> S A B Y = S4 P W Q R / S4 P U Q V * S4 A U B V + S A B W.
Proof.
intros.
unfold on_inter_parallel_parallel in *.
DecompAndAll.
assert ((S A B Y) = (S A B W) + W**Y/U**V * (S4 A U B V)).
apply elim_area_on_parallel.
unfold on_parallel.
repeat split.
Geometry.
unfold not.
intro.
subst U.

*****
H2 : parallel Y W V V
H5 : not (parallel V V P Q)
H3 : parallel Y R P Q
H1 : not (Col R V V)
H0 : not (eq R Y)
P,Q,R,V,W,Y,A,B : Point
*****
False
+++++
Geometry.
-----
Lemma elim_area_on_inter_parallel_parallel : forall P Q R U V W Y A B : Point, on_inter_parallel_parallel Y R P Q W U V -> R <> Y -> S A B Y = S4 P W Q R / S4 P U Q V * S4 A U B V + S A B W.
Proof.
intros.
unfold on_inter_parallel_parallel in *.
DecompAndAll.
assert ((S A B Y) = (S A B W) + W**Y/U**V * (S4 A U B V)).
apply elim_area_on_parallel.
unfold on_parallel.
repeat split.

*****
H5 : not (parallel U V P Q)
H2 : parallel Y W U V
H3 : parallel Y R P Q
H1 : not (Col R U V)
H0 : not (eq R Y)
P,Q,R,U,V,W,Y,A,B : Point
*****
parallel W Y U V
+++++
Geometry.
-----
Lemma elim_area_on_inter_parallel_parallel : forall P Q R U V W Y A B : Point, on_inter_parallel_parallel Y R P Q W U V -> R <> Y -> S A B Y = S4 P W Q R / S4 P U Q V * S4 A U B V + S A B W.
Proof.
intros.
unfold on_inter_parallel_parallel in *.
DecompAndAll.
assert ((S A B Y) = (S A B W) + W**Y/U**V * (S4 A U B V)).

*****
H : eq (S A B Y)\n (Fplus (S A B W) (Fmult (Fdiv (DSeg W Y) (DSeg U V)) (S4 A U B V)))
H5 : not (parallel U V P Q)
H2 : parallel Y W U V
H3 : parallel Y R P Q
H1 : not (Col R U V)
H0 : not (eq R Y)
P,Q,R,U,V,W,Y,A,B : Point
*****
eq (S A B Y) (Fplus (Fmult (Fdiv (S4 P W Q R) (S4 P U Q V)) (S4 A U B V)) (S A B W))
+++++
assert (P<>Q).
-----
Lemma elim_area_on_inter_parallel_parallel : forall P Q R U V W Y A B : Point, on_inter_parallel_parallel Y R P Q W U V -> R <> Y -> S A B Y = S4 P W Q R / S4 P U Q V * S4 A U B V + S A B W.
Proof.
intros.
unfold on_inter_parallel_parallel in *.
DecompAndAll.
assert ((S A B Y) = (S A B W) + W**Y/U**V * (S4 A U B V)).
assert (P<>Q).

*****
H : eq (S A B Y)\n (Fplus (S A B W) (Fmult (Fdiv (DSeg W Y) (DSeg U V)) (S4 A U B V)))
H5 : not (parallel U V P Q)
H2 : parallel Y W U V
H3 : parallel Y R P Q
H1 : not (Col R U V)
H0 : not (eq R Y)
P,Q,R,U,V,W,Y,A,B : Point
*****
not (eq P Q)
+++++
unfold not.
-----
Lemma elim_area_on_inter_parallel_parallel : forall P Q R U V W Y A B : Point, on_inter_parallel_parallel Y R P Q W U V -> R <> Y -> S A B Y = S4 P W Q R / S4 P U Q V * S4 A U B V + S A B W.
Proof.
intros.
unfold on_inter_parallel_parallel in *.
DecompAndAll.
assert ((S A B Y) = (S A B W) + W**Y/U**V * (S4 A U B V)).
assert (P<>Q).
unfold not.

*****
H : eq (S A B Y)\n (Fplus (S A B W) (Fmult (Fdiv (DSeg W Y) (DSeg U V)) (S4 A U B V)))
H5 : not (parallel U V P Q)
H2 : parallel Y W U V
H3 : parallel Y R P Q
H1 : not (Col R U V)
H0 : not (eq R Y)
P,Q,R,U,V,W,Y,A,B : Point
*****
forall _ : eq P Q, False
+++++
intro.
-----
Lemma elim_area_on_inter_parallel_parallel : forall P Q R U V W Y A B : Point, on_inter_parallel_parallel Y R P Q W U V -> R <> Y -> S A B Y = S4 P W Q R / S4 P U Q V * S4 A U B V + S A B W.
Proof.
intros.
unfold on_inter_parallel_parallel in *.
DecompAndAll.
assert ((S A B Y) = (S A B W) + W**Y/U**V * (S4 A U B V)).
assert (P<>Q).
unfold not.
intro.

*****
H4 : eq P Q
H : eq (S A B Y)\n (Fplus (S A B W) (Fmult (Fdiv (DSeg W Y) (DSeg U V)) (S4 A U B V)))
H5 : not (parallel U V P Q)
H2 : parallel Y W U V
H3 : parallel Y R P Q
H1 : not (Col R U V)
H0 : not (eq R Y)
P,Q,R,U,V,W,Y,A,B : Point
*****
False
+++++
subst P.
-----
Lemma elim_area_on_inter_parallel_parallel : forall P Q R U V W Y A B : Point, on_inter_parallel_parallel Y R P Q W U V -> R <> Y -> S A B Y = S4 P W Q R / S4 P U Q V * S4 A U B V + S A B W.
Proof.
intros.
unfold on_inter_parallel_parallel in *.
DecompAndAll.
assert ((S A B Y) = (S A B W) + W**Y/U**V * (S4 A U B V)).
assert (P<>Q).
unfold not.
intro.
subst P.

*****
H : eq (S A B Y)\n (Fplus (S A B W) (Fmult (Fdiv (DSeg W Y) (DSeg U V)) (S4 A U B V)))
H5 : not (parallel U V Q Q)
H2 : parallel Y W U V
H3 : parallel Y R Q Q
H1 : not (Col R U V)
H0 : not (eq R Y)
Q,R,U,V,W,Y,A,B : Point
*****
False
+++++
Geometry.
-----
Lemma elim_area_on_inter_parallel_parallel : forall P Q R U V W Y A B : Point, on_inter_parallel_parallel Y R P Q W U V -> R <> Y -> S A B Y = S4 P W Q R / S4 P U Q V * S4 A U B V + S A B W.
Proof.
intros.
unfold on_inter_parallel_parallel in *.
DecompAndAll.
assert ((S A B Y) = (S A B W) + W**Y/U**V * (S4 A U B V)).
assert (P<>Q).

*****
H4 : not (eq P Q)
H : eq (S A B Y)\n (Fplus (S A B W) (Fmult (Fdiv (DSeg W Y) (DSeg U V)) (S4 A U B V)))
H5 : not (parallel U V P Q)
H2 : parallel Y W U V
H3 : parallel Y R P Q
H1 : not (Col R U V)
H0 : not (eq R Y)
P,Q,R,U,V,W,Y,A,B : Point
*****
eq (S A B Y) (Fplus (Fmult (Fdiv (S4 P W Q R) (S4 P U Q V)) (S4 A U B V)) (S A B W))
+++++
assert (U<>V).
-----
Lemma elim_area_on_inter_parallel_parallel : forall P Q R U V W Y A B : Point, on_inter_parallel_parallel Y R P Q W U V -> R <> Y -> S A B Y = S4 P W Q R / S4 P U Q V * S4 A U B V + S A B W.
Proof.
intros.
unfold on_inter_parallel_parallel in *.
DecompAndAll.
assert ((S A B Y) = (S A B W) + W**Y/U**V * (S4 A U B V)).
assert (P<>Q).
assert (U<>V).

*****
H4 : not (eq P Q)
H : eq (S A B Y)\n (Fplus (S A B W) (Fmult (Fdiv (DSeg W Y) (DSeg U V)) (S4 A U B V)))
H5 : not (parallel U V P Q)
H2 : parallel Y W U V
H3 : parallel Y R P Q
H1 : not (Col R U V)
H0 : not (eq R Y)
P,Q,R,U,V,W,Y,A,B : Point
*****
not (eq U V)
+++++
unfold not.
-----
Lemma elim_area_on_inter_parallel_parallel : forall P Q R U V W Y A B : Point, on_inter_parallel_parallel Y R P Q W U V -> R <> Y -> S A B Y = S4 P W Q R / S4 P U Q V * S4 A U B V + S A B W.
Proof.
intros.
unfold on_inter_parallel_parallel in *.
DecompAndAll.
assert ((S A B Y) = (S A B W) + W**Y/U**V * (S4 A U B V)).
assert (P<>Q).
assert (U<>V).
unfold not.

*****
H4 : not (eq P Q)
H : eq (S A B Y)\n (Fplus (S A B W) (Fmult (Fdiv (DSeg W Y) (DSeg U V)) (S4 A U B V)))
H5 : not (parallel U V P Q)
H2 : parallel Y W U V
H3 : parallel Y R P Q
H1 : not (Col R U V)
H0 : not (eq R Y)
P,Q,R,U,V,W,Y,A,B : Point
*****
forall _ : eq U V, False
+++++
intro.
-----
Lemma elim_area_on_inter_parallel_parallel : forall P Q R U V W Y A B : Point, on_inter_parallel_parallel Y R P Q W U V -> R <> Y -> S A B Y = S4 P W Q R / S4 P U Q V * S4 A U B V + S A B W.
Proof.
intros.
unfold on_inter_parallel_parallel in *.
DecompAndAll.
assert ((S A B Y) = (S A B W) + W**Y/U**V * (S4 A U B V)).
assert (P<>Q).
assert (U<>V).
unfold not.
intro.

*****
H6 : eq U V
H4 : not (eq P Q)
H : eq (S A B Y)\n (Fplus (S A B W) (Fmult (Fdiv (DSeg W Y) (DSeg U V)) (S4 A U B V)))
H5 : not (parallel U V P Q)
H2 : parallel Y W U V
H3 : parallel Y R P Q
H1 : not (Col R U V)
H0 : not (eq R Y)
P,Q,R,U,V,W,Y,A,B : Point
*****
False
+++++
subst U.
-----
Lemma elim_area_on_inter_parallel_parallel : forall P Q R U V W Y A B : Point, on_inter_parallel_parallel Y R P Q W U V -> R <> Y -> S A B Y = S4 P W Q R / S4 P U Q V * S4 A U B V + S A B W.
Proof.
intros.
unfold on_inter_parallel_parallel in *.
DecompAndAll.
assert ((S A B Y) = (S A B W) + W**Y/U**V * (S4 A U B V)).
assert (P<>Q).
assert (U<>V).
unfold not.
intro.
subst U.

*****
H4 : not (eq P Q)
H2 : parallel Y W V V
H5 : not (parallel V V P Q)
H : eq (S A B Y)\n (Fplus (S A B W) (Fmult (Fdiv (DSeg W Y) (DSeg V V)) (S4 A V B V)))
H3 : parallel Y R P Q
H1 : not (Col R V V)
H0 : not (eq R Y)
P,Q,R,V,W,Y,A,B : Point
*****
False
+++++
Geometry.
-----
Lemma elim_area_on_inter_parallel_parallel : forall P Q R U V W Y A B : Point, on_inter_parallel_parallel Y R P Q W U V -> R <> Y -> S A B Y = S4 P W Q R / S4 P U Q V * S4 A U B V + S A B W.
Proof.
intros.
unfold on_inter_parallel_parallel in *.
DecompAndAll.
assert ((S A B Y) = (S A B W) + W**Y/U**V * (S4 A U B V)).
assert (P<>Q).
assert (U<>V).

*****
H6 : not (eq U V)
H4 : not (eq P Q)
H : eq (S A B Y)\n (Fplus (S A B W) (Fmult (Fdiv (DSeg W Y) (DSeg U V)) (S4 A U B V)))
H5 : not (parallel U V P Q)
H2 : parallel Y W U V
H3 : parallel Y R P Q
H1 : not (Col R U V)
H0 : not (eq R Y)
P,Q,R,U,V,W,Y,A,B : Point
*****
eq (S A B Y) (Fplus (Fmult (Fdiv (S4 P W Q R) (S4 P U Q V)) (S4 A U B V)) (S A B W))
+++++
cases_equality Y W.
-----
Lemma elim_area_on_inter_parallel_parallel : forall P Q R U V W Y A B : Point, on_inter_parallel_parallel Y R P Q W U V -> R <> Y -> S A B Y = S4 P W Q R / S4 P U Q V * S4 A U B V + S A B W.
Proof.
intros.
unfold on_inter_parallel_parallel in *.
DecompAndAll.
assert ((S A B Y) = (S A B W) + W**Y/U**V * (S4 A U B V)).
assert (P<>Q).
assert (U<>V).
cases_equality Y W.

*****
H7 : eq Y W
H6 : not (eq U V)
H4 : not (eq P Q)
H : eq (S A B Y)\n (Fplus (S A B W) (Fmult (Fdiv (DSeg W Y) (DSeg U V)) (S4 A U B V)))
H5 : not (parallel U V P Q)
H2 : parallel Y W U V
H3 : parallel Y R P Q
H1 : not (Col R U V)
H0 : not (eq R Y)
P,Q,R,U,V,W,Y,A,B : Point
*****
eq (S A B Y) (Fplus (Fmult (Fdiv (S4 P W Q R) (S4 P U Q V)) (S4 A U B V)) (S A B W))
+++++
subst Y.
-----
Lemma elim_area_on_inter_parallel_parallel : forall P Q R U V W Y A B : Point, on_inter_parallel_parallel Y R P Q W U V -> R <> Y -> S A B Y = S4 P W Q R / S4 P U Q V * S4 A U B V + S A B W.
Proof.
intros.
unfold on_inter_parallel_parallel in *.
DecompAndAll.
assert ((S A B Y) = (S A B W) + W**Y/U**V * (S4 A U B V)).
assert (P<>Q).
assert (U<>V).
cases_equality Y W.
subst Y.

*****
H6 : not (eq U V)
H4 : not (eq P Q)
H : eq (S A B W)\n (Fplus (S A B W) (Fmult (Fdiv (DSeg W W) (DSeg U V)) (S4 A U B V)))
H5 : not (parallel U V P Q)
H3 : parallel W R P Q
H2 : parallel W W U V
H1 : not (Col R U V)
H0 : not (eq R W)
P,Q,R,U,V,W,A,B : Point
*****
eq (S A B W) (Fplus (Fmult (Fdiv (S4 P W Q R) (S4 P U Q V)) (S4 A U B V)) (S A B W))
+++++
assert (parallel P Q W R).
-----
Lemma elim_area_on_inter_parallel_parallel : forall P Q R U V W Y A B : Point, on_inter_parallel_parallel Y R P Q W U V -> R <> Y -> S A B Y = S4 P W Q R / S4 P U Q V * S4 A U B V + S A B W.
Proof.
intros.
unfold on_inter_parallel_parallel in *.
DecompAndAll.
assert ((S A B Y) = (S A B W) + W**Y/U**V * (S4 A U B V)).
assert (P<>Q).
assert (U<>V).
cases_equality Y W.
subst Y.
assert (parallel P Q W R).

*****
H6 : not (eq U V)
H4 : not (eq P Q)
H : eq (S A B W)\n (Fplus (S A B W) (Fmult (Fdiv (DSeg W W) (DSeg U V)) (S4 A U B V)))
H5 : not (parallel U V P Q)
H3 : parallel W R P Q
H2 : parallel W W U V
H1 : not (Col R U V)
H0 : not (eq R W)
P,Q,R,U,V,W,A,B : Point
*****
parallel P Q W R
+++++
Geometry.
-----
Lemma elim_area_on_inter_parallel_parallel : forall P Q R U V W Y A B : Point, on_inter_parallel_parallel Y R P Q W U V -> R <> Y -> S A B Y = S4 P W Q R / S4 P U Q V * S4 A U B V + S A B W.
Proof.
intros.
unfold on_inter_parallel_parallel in *.
DecompAndAll.
assert ((S A B Y) = (S A B W) + W**Y/U**V * (S4 A U B V)).
assert (P<>Q).
assert (U<>V).
cases_equality Y W.
subst Y.
assert (parallel P Q W R).

*****
H7 : parallel P Q W R
H6 : not (eq U V)
H4 : not (eq P Q)
H : eq (S A B W)\n (Fplus (S A B W) (Fmult (Fdiv (DSeg W W) (DSeg U V)) (S4 A U B V)))
H5 : not (parallel U V P Q)
H3 : parallel W R P Q
H2 : parallel W W U V
H1 : not (Col R U V)
H0 : not (eq R W)
P,Q,R,U,V,W,A,B : Point
*****
eq (S A B W) (Fplus (Fmult (Fdiv (S4 P W Q R) (S4 P U Q V)) (S4 A U B V)) (S A B W))
+++++
Geometry.
-----
Lemma elim_area_on_inter_parallel_parallel : forall P Q R U V W Y A B : Point, on_inter_parallel_parallel Y R P Q W U V -> R <> Y -> S A B Y = S4 P W Q R / S4 P U Q V * S4 A U B V + S A B W.
Proof.
intros.
unfold on_inter_parallel_parallel in *.
DecompAndAll.
assert ((S A B Y) = (S A B W) + W**Y/U**V * (S4 A U B V)).
assert (P<>Q).
assert (U<>V).
cases_equality Y W.
subst Y.
assert (parallel P Q W R).
Geometry.

*****
H7 : parallel P Q W R
H6 : not (eq U V)
H4 : not (eq P Q)
H : eq (S A B W)\n (Fplus (S A B W) (Fmult (Fdiv (DSeg W W) (DSeg U V)) (S4 A U B V)))
H5 : not (parallel U V P Q)
H3 : parallel W R P Q
H2 : parallel W W U V
H1 : not (Col R U V)
H0 : not (eq R W)
P,Q,R,U,V,W,A,B : Point
*****
eq (S A B W) (Fplus (Fmult (Fdiv (S4 P W Q R) (S4 P U Q V)) (S4 A U B V)) (S A B W))
+++++
unfold parallel in H7.
-----
Lemma elim_area_on_inter_parallel_parallel : forall P Q R U V W Y A B : Point, on_inter_parallel_parallel Y R P Q W U V -> R <> Y -> S A B Y = S4 P W Q R / S4 P U Q V * S4 A U B V + S A B W.
Proof.
intros.
unfold on_inter_parallel_parallel in *.
DecompAndAll.
assert ((S A B Y) = (S A B W) + W**Y/U**V * (S4 A U B V)).
assert (P<>Q).
assert (U<>V).
cases_equality Y W.
subst Y.
assert (parallel P Q W R).
Geometry.
unfold parallel in H7.

*****
H7 : eq (S4 P W Q R) F0
H6 : not (eq U V)
H4 : not (eq P Q)
H : eq (S A B W)\n (Fplus (S A B W) (Fmult (Fdiv (DSeg W W) (DSeg U V)) (S4 A U B V)))
H5 : not (parallel U V P Q)
H3 : parallel W R P Q
H2 : parallel W W U V
H1 : not (Col R U V)
H0 : not (eq R W)
P,Q,R,U,V,W,A,B : Point
*****
eq (S A B W) (Fplus (Fmult (Fdiv (S4 P W Q R) (S4 P U Q V)) (S4 A U B V)) (S A B W))
+++++
rewrite H7.
-----
Lemma elim_area_on_inter_parallel_parallel : forall P Q R U V W Y A B : Point, on_inter_parallel_parallel Y R P Q W U V -> R <> Y -> S A B Y = S4 P W Q R / S4 P U Q V * S4 A U B V + S A B W.
Proof.
intros.
unfold on_inter_parallel_parallel in *.
DecompAndAll.
assert ((S A B Y) = (S A B W) + W**Y/U**V * (S4 A U B V)).
assert (P<>Q).
assert (U<>V).
cases_equality Y W.
subst Y.
assert (parallel P Q W R).
Geometry.
unfold parallel in H7.
rewrite H7.

*****
H7 : eq (S4 P W Q R) F0
H6 : not (eq U V)
H4 : not (eq P Q)
H : eq (S A B W)\n (Fplus (S A B W) (Fmult (Fdiv (DSeg W W) (DSeg U V)) (S4 A U B V)))
H5 : not (parallel U V P Q)
H3 : parallel W R P Q
H2 : parallel W W U V
H1 : not (Col R U V)
H0 : not (eq R W)
P,Q,R,U,V,W,A,B : Point
*****
eq (S A B W) (Fplus (Fmult (Fdiv F0 (S4 P U Q V)) (S4 A U B V)) (S A B W))
+++++
field.
-----
Lemma elim_area_on_inter_parallel_parallel : forall P Q R U V W Y A B : Point, on_inter_parallel_parallel Y R P Q W U V -> R <> Y -> S A B Y = S4 P W Q R / S4 P U Q V * S4 A U B V + S A B W.
Proof.
intros.
unfold on_inter_parallel_parallel in *.
DecompAndAll.
assert ((S A B Y) = (S A B W) + W**Y/U**V * (S4 A U B V)).
assert (P<>Q).
assert (U<>V).
cases_equality Y W.
subst Y.
assert (parallel P Q W R).
Geometry.
unfold parallel in H7.
rewrite H7.
field.

*****
H7 : eq (S4 P W Q R) F0
H6 : not (eq U V)
H4 : not (eq P Q)
H : eq (S A B W)\n (Fplus (S A B W) (Fmult (Fdiv (DSeg W W) (DSeg U V)) (S4 A U B V)))
H5 : not (parallel U V P Q)
H3 : parallel W R P Q
H2 : parallel W W U V
H1 : not (Col R U V)
H0 : not (eq R W)
P,Q,R,U,V,W,A,B : Point
*****
not (eq (S4 P U Q V) F0)
+++++
Geometry.
-----
Lemma elim_area_on_inter_parallel_parallel : forall P Q R U V W Y A B : Point, on_inter_parallel_parallel Y R P Q W U V -> R <> Y -> S A B Y = S4 P W Q R / S4 P U Q V * S4 A U B V + S A B W.
Proof.
intros.
unfold on_inter_parallel_parallel in *.
DecompAndAll.
assert ((S A B Y) = (S A B W) + W**Y/U**V * (S4 A U B V)).
assert (P<>Q).
assert (U<>V).
cases_equality Y W.

*****
H7 : not (eq Y W)
H6 : not (eq U V)
H4 : not (eq P Q)
H : eq (S A B Y)\n (Fplus (S A B W) (Fmult (Fdiv (DSeg W Y) (DSeg U V)) (S4 A U B V)))
H5 : not (parallel U V P Q)
H2 : parallel Y W U V
H3 : parallel Y R P Q
H1 : not (Col R U V)
H0 : not (eq R Y)
P,Q,R,U,V,W,Y,A,B : Point
*****
eq (S A B Y) (Fplus (Fmult (Fdiv (S4 P W Q R) (S4 P U Q V)) (S4 A U B V)) (S A B W))
+++++
assert (~ Col W R Y).
-----
Lemma elim_area_on_inter_parallel_parallel : forall P Q R U V W Y A B : Point, on_inter_parallel_parallel Y R P Q W U V -> R <> Y -> S A B Y = S4 P W Q R / S4 P U Q V * S4 A U B V + S A B W.
Proof.
intros.
unfold on_inter_parallel_parallel in *.
DecompAndAll.
assert ((S A B Y) = (S A B W) + W**Y/U**V * (S4 A U B V)).
assert (P<>Q).
assert (U<>V).
cases_equality Y W.
assert (~ Col W R Y).

*****
H7 : not (eq Y W)
H6 : not (eq U V)
H4 : not (eq P Q)
H : eq (S A B Y)\n (Fplus (S A B W) (Fmult (Fdiv (DSeg W Y) (DSeg U V)) (S4 A U B V)))
H5 : not (parallel U V P Q)
H2 : parallel Y W U V
H3 : parallel Y R P Q
H1 : not (Col R U V)
H0 : not (eq R Y)
P,Q,R,U,V,W,Y,A,B : Point
*****
not (Col W R Y)
+++++
unfold not.
-----
Lemma elim_area_on_inter_parallel_parallel : forall P Q R U V W Y A B : Point, on_inter_parallel_parallel Y R P Q W U V -> R <> Y -> S A B Y = S4 P W Q R / S4 P U Q V * S4 A U B V + S A B W.
Proof.
intros.
unfold on_inter_parallel_parallel in *.
DecompAndAll.
assert ((S A B Y) = (S A B W) + W**Y/U**V * (S4 A U B V)).
assert (P<>Q).
assert (U<>V).
cases_equality Y W.
assert (~ Col W R Y).
unfold not.

*****
H7 : not (eq Y W)
H6 : not (eq U V)
H4 : not (eq P Q)
H : eq (S A B Y)\n (Fplus (S A B W) (Fmult (Fdiv (DSeg W Y) (DSeg U V)) (S4 A U B V)))
H5 : not (parallel U V P Q)
H2 : parallel Y W U V
H3 : parallel Y R P Q
H1 : not (Col R U V)
H0 : not (eq R Y)
P,Q,R,U,V,W,Y,A,B : Point
*****
forall _ : Col W R Y, False
+++++
intro.
-----
Lemma elim_area_on_inter_parallel_parallel : forall P Q R U V W Y A B : Point, on_inter_parallel_parallel Y R P Q W U V -> R <> Y -> S A B Y = S4 P W Q R / S4 P U Q V * S4 A U B V + S A B W.
Proof.
intros.
unfold on_inter_parallel_parallel in *.
DecompAndAll.
assert ((S A B Y) = (S A B W) + W**Y/U**V * (S4 A U B V)).
assert (P<>Q).
assert (U<>V).
cases_equality Y W.
assert (~ Col W R Y).
unfold not.
intro.

*****
H8 : Col W R Y
H7 : not (eq Y W)
H6 : not (eq U V)
H4 : not (eq P Q)
H : eq (S A B Y)\n (Fplus (S A B W) (Fmult (Fdiv (DSeg W Y) (DSeg U V)) (S4 A U B V)))
H5 : not (parallel U V P Q)
H2 : parallel Y W U V
H3 : parallel Y R P Q
H1 : not (Col R U V)
H0 : not (eq R Y)
P,Q,R,U,V,W,Y,A,B : Point
*****
False
+++++
assert (parallel U V Y R).
-----
Lemma elim_area_on_inter_parallel_parallel : forall P Q R U V W Y A B : Point, on_inter_parallel_parallel Y R P Q W U V -> R <> Y -> S A B Y = S4 P W Q R / S4 P U Q V * S4 A U B V + S A B W.
Proof.
intros.
unfold on_inter_parallel_parallel in *.
DecompAndAll.
assert ((S A B Y) = (S A B W) + W**Y/U**V * (S4 A U B V)).
assert (P<>Q).
assert (U<>V).
cases_equality Y W.
assert (~ Col W R Y).
unfold not.
intro.
assert (parallel U V Y R).

*****
H8 : Col W R Y
H7 : not (eq Y W)
H6 : not (eq U V)
H4 : not (eq P Q)
H : eq (S A B Y)\n (Fplus (S A B W) (Fmult (Fdiv (DSeg W Y) (DSeg U V)) (S4 A U B V)))
H5 : not (parallel U V P Q)
H2 : parallel Y W U V
H3 : parallel Y R P Q
H1 : not (Col R U V)
H0 : not (eq R Y)
P,Q,R,U,V,W,Y,A,B : Point
*****
parallel U V Y R
+++++
eapply col_par_par.
-----
Lemma elim_area_on_inter_parallel_parallel : forall P Q R U V W Y A B : Point, on_inter_parallel_parallel Y R P Q W U V -> R <> Y -> S A B Y = S4 P W Q R / S4 P U Q V * S4 A U B V + S A B W.
Proof.
intros.
unfold on_inter_parallel_parallel in *.
DecompAndAll.
assert ((S A B Y) = (S A B W) + W**Y/U**V * (S4 A U B V)).
assert (P<>Q).
assert (U<>V).
cases_equality Y W.
assert (~ Col W R Y).
unfold not.
intro.
assert (parallel U V Y R).
eapply col_par_par.

*****
H8 : Col W R Y
H7 : not (eq Y W)
H6 : not (eq U V)
H4 : not (eq P Q)
H : eq (S A B Y)\n (Fplus (S A B W) (Fmult (Fdiv (DSeg W Y) (DSeg U V)) (S4 A U B V)))
H5 : not (parallel U V P Q)
H2 : parallel Y W U V
H3 : parallel Y R P Q
H1 : not (Col R U V)
H0 : not (eq R Y)
P,Q,R,U,V,W,Y,A,B : Point
*****
not (eq Y ?D)
+++++
apply H7.
-----
Lemma elim_area_on_inter_parallel_parallel : forall P Q R U V W Y A B : Point, on_inter_parallel_parallel Y R P Q W U V -> R <> Y -> S A B Y = S4 P W Q R / S4 P U Q V * S4 A U B V + S A B W.
Proof.
intros.
unfold on_inter_parallel_parallel in *.
DecompAndAll.
assert ((S A B Y) = (S A B W) + W**Y/U**V * (S4 A U B V)).
assert (P<>Q).
assert (U<>V).
cases_equality Y W.
assert (~ Col W R Y).
unfold not.
intro.
assert (parallel U V Y R).
eapply col_par_par.

*****
H8 : Col W R Y
H7 : not (eq Y W)
H6 : not (eq U V)
H4 : not (eq P Q)
H : eq (S A B Y)\n (Fplus (S A B W) (Fmult (Fdiv (DSeg W Y) (DSeg U V)) (S4 A U B V)))
H5 : not (parallel U V P Q)
H2 : parallel Y W U V
H3 : parallel Y R P Q
H1 : not (Col R U V)
H0 : not (eq R Y)
P,Q,R,U,V,W,Y,A,B : Point
*****
parallel U V Y W
+++++
Geometry.
-----
Lemma elim_area_on_inter_parallel_parallel : forall P Q R U V W Y A B : Point, on_inter_parallel_parallel Y R P Q W U V -> R <> Y -> S A B Y = S4 P W Q R / S4 P U Q V * S4 A U B V + S A B W.
Proof.
intros.
unfold on_inter_parallel_parallel in *.
DecompAndAll.
assert ((S A B Y) = (S A B W) + W**Y/U**V * (S4 A U B V)).
assert (P<>Q).
assert (U<>V).
cases_equality Y W.
assert (~ Col W R Y).
unfold not.
intro.
assert (parallel U V Y R).
eapply col_par_par.

*****
H8 : Col W R Y
H7 : not (eq Y W)
H6 : not (eq U V)
H4 : not (eq P Q)
H : eq (S A B Y)\n (Fplus (S A B W) (Fmult (Fdiv (DSeg W Y) (DSeg U V)) (S4 A U B V)))
H5 : not (parallel U V P Q)
H2 : parallel Y W U V
H3 : parallel Y R P Q
H1 : not (Col R U V)
H0 : not (eq R Y)
P,Q,R,U,V,W,Y,A,B : Point
*****
Col Y W R
+++++
Geometry.
-----
Lemma elim_area_on_inter_parallel_parallel : forall P Q R U V W Y A B : Point, on_inter_parallel_parallel Y R P Q W U V -> R <> Y -> S A B Y = S4 P W Q R / S4 P U Q V * S4 A U B V + S A B W.
Proof.
intros.
unfold on_inter_parallel_parallel in *.
DecompAndAll.
assert ((S A B Y) = (S A B W) + W**Y/U**V * (S4 A U B V)).
assert (P<>Q).
assert (U<>V).
cases_equality Y W.
assert (~ Col W R Y).
unfold not.
intro.
assert (parallel U V Y R).

*****
H9 : parallel U V Y R
H8 : Col W R Y
H7 : not (eq Y W)
H6 : not (eq U V)
H4 : not (eq P Q)
H : eq (S A B Y)\n (Fplus (S A B W) (Fmult (Fdiv (DSeg W Y) (DSeg U V)) (S4 A U B V)))
H5 : not (parallel U V P Q)
H2 : parallel Y W U V
H3 : parallel Y R P Q
H1 : not (Col R U V)
H0 : not (eq R Y)
P,Q,R,U,V,W,Y,A,B : Point
*****
False
+++++
assert (parallel U V P Q).
-----
Lemma elim_area_on_inter_parallel_parallel : forall P Q R U V W Y A B : Point, on_inter_parallel_parallel Y R P Q W U V -> R <> Y -> S A B Y = S4 P W Q R / S4 P U Q V * S4 A U B V + S A B W.
Proof.
intros.
unfold on_inter_parallel_parallel in *.
DecompAndAll.
assert ((S A B Y) = (S A B W) + W**Y/U**V * (S4 A U B V)).
assert (P<>Q).
assert (U<>V).
cases_equality Y W.
assert (~ Col W R Y).
unfold not.
intro.
assert (parallel U V Y R).
assert (parallel U V P Q).

*****
H9 : parallel U V Y R
H8 : Col W R Y
H7 : not (eq Y W)
H6 : not (eq U V)
H4 : not (eq P Q)
H : eq (S A B Y)\n (Fplus (S A B W) (Fmult (Fdiv (DSeg W Y) (DSeg U V)) (S4 A U B V)))
H5 : not (parallel U V P Q)
H2 : parallel Y W U V
H3 : parallel Y R P Q
H1 : not (Col R U V)
H0 : not (eq R Y)
P,Q,R,U,V,W,Y,A,B : Point
*****
parallel U V P Q
+++++
eapply parallel_transitivity with (C:=Y) (D:=R).
-----
Lemma elim_area_on_inter_parallel_parallel : forall P Q R U V W Y A B : Point, on_inter_parallel_parallel Y R P Q W U V -> R <> Y -> S A B Y = S4 P W Q R / S4 P U Q V * S4 A U B V + S A B W.
Proof.
intros.
unfold on_inter_parallel_parallel in *.
DecompAndAll.
assert ((S A B Y) = (S A B W) + W**Y/U**V * (S4 A U B V)).
assert (P<>Q).
assert (U<>V).
cases_equality Y W.
assert (~ Col W R Y).
unfold not.
intro.
assert (parallel U V Y R).
assert (parallel U V P Q).
eapply parallel_transitivity with (C:=Y) (D:=R).

*****
H9 : parallel U V Y R
H8 : Col W R Y
H7 : not (eq Y W)
H6 : not (eq U V)
H4 : not (eq P Q)
H : eq (S A B Y)\n (Fplus (S A B W) (Fmult (Fdiv (DSeg W Y) (DSeg U V)) (S4 A U B V)))
H5 : not (parallel U V P Q)
H2 : parallel Y W U V
H3 : parallel Y R P Q
H1 : not (Col R U V)
H0 : not (eq R Y)
P,Q,R,U,V,W,Y,A,B : Point
*****
not (eq Y R)
+++++
Geometry.
-----
Lemma elim_area_on_inter_parallel_parallel : forall P Q R U V W Y A B : Point, on_inter_parallel_parallel Y R P Q W U V -> R <> Y -> S A B Y = S4 P W Q R / S4 P U Q V * S4 A U B V + S A B W.
Proof.
intros.
unfold on_inter_parallel_parallel in *.
DecompAndAll.
assert ((S A B Y) = (S A B W) + W**Y/U**V * (S4 A U B V)).
assert (P<>Q).
assert (U<>V).
cases_equality Y W.
assert (~ Col W R Y).
unfold not.
intro.
assert (parallel U V Y R).
assert (parallel U V P Q).
eapply parallel_transitivity with (C:=Y) (D:=R).

*****
H9 : parallel U V Y R
H8 : Col W R Y
H7 : not (eq Y W)
H6 : not (eq U V)
H4 : not (eq P Q)
H : eq (S A B Y)\n (Fplus (S A B W) (Fmult (Fdiv (DSeg W Y) (DSeg U V)) (S4 A U B V)))
H5 : not (parallel U V P Q)
H2 : parallel Y W U V
H3 : parallel Y R P Q
H1 : not (Col R U V)
H0 : not (eq R Y)
P,Q,R,U,V,W,Y,A,B : Point
*****
parallel U V Y R
+++++
Geometry.
-----
Lemma elim_area_on_inter_parallel_parallel : forall P Q R U V W Y A B : Point, on_inter_parallel_parallel Y R P Q W U V -> R <> Y -> S A B Y = S4 P W Q R / S4 P U Q V * S4 A U B V + S A B W.
Proof.
intros.
unfold on_inter_parallel_parallel in *.
DecompAndAll.
assert ((S A B Y) = (S A B W) + W**Y/U**V * (S4 A U B V)).
assert (P<>Q).
assert (U<>V).
cases_equality Y W.
assert (~ Col W R Y).
unfold not.
intro.
assert (parallel U V Y R).
assert (parallel U V P Q).
eapply parallel_transitivity with (C:=Y) (D:=R).

*****
H9 : parallel U V Y R
H8 : Col W R Y
H7 : not (eq Y W)
H6 : not (eq U V)
H4 : not (eq P Q)
H : eq (S A B Y)\n (Fplus (S A B W) (Fmult (Fdiv (DSeg W Y) (DSeg U V)) (S4 A U B V)))
H5 : not (parallel U V P Q)
H2 : parallel Y W U V
H3 : parallel Y R P Q
H1 : not (Col R U V)
H0 : not (eq R Y)
P,Q,R,U,V,W,Y,A,B : Point
*****
parallel Y R P Q
+++++
Geometry.
-----
Lemma elim_area_on_inter_parallel_parallel : forall P Q R U V W Y A B : Point, on_inter_parallel_parallel Y R P Q W U V -> R <> Y -> S A B Y = S4 P W Q R / S4 P U Q V * S4 A U B V + S A B W.
Proof.
intros.
unfold on_inter_parallel_parallel in *.
DecompAndAll.
assert ((S A B Y) = (S A B W) + W**Y/U**V * (S4 A U B V)).
assert (P<>Q).
assert (U<>V).
cases_equality Y W.
assert (~ Col W R Y).
unfold not.
intro.
assert (parallel U V Y R).
assert (parallel U V P Q).

*****
H10 : parallel U V P Q
H9 : parallel U V Y R
H8 : Col W R Y
H7 : not (eq Y W)
H6 : not (eq U V)
H4 : not (eq P Q)
H : eq (S A B Y)\n (Fplus (S A B W) (Fmult (Fdiv (DSeg W Y) (DSeg U V)) (S4 A U B V)))
H5 : not (parallel U V P Q)
H2 : parallel Y W U V
H3 : parallel Y R P Q
H1 : not (Col R U V)
H0 : not (eq R Y)
P,Q,R,U,V,W,Y,A,B : Point
*****
False
+++++
intuition.
-----
Lemma elim_area_on_inter_parallel_parallel : forall P Q R U V W Y A B : Point, on_inter_parallel_parallel Y R P Q W U V -> R <> Y -> S A B Y = S4 P W Q R / S4 P U Q V * S4 A U B V + S A B W.
Proof.
intros.
unfold on_inter_parallel_parallel in *.
DecompAndAll.
assert ((S A B Y) = (S A B W) + W**Y/U**V * (S4 A U B V)).
assert (P<>Q).
assert (U<>V).
cases_equality Y W.
assert (~ Col W R Y).

*****
H8 : not (Col W R Y)
H7 : not (eq Y W)
H6 : not (eq U V)
H4 : not (eq P Q)
H : eq (S A B Y)\n (Fplus (S A B W) (Fmult (Fdiv (DSeg W Y) (DSeg U V)) (S4 A U B V)))
H5 : not (parallel U V P Q)
H2 : parallel Y W U V
H3 : parallel Y R P Q
H1 : not (Col R U V)
H0 : not (eq R Y)
P,Q,R,U,V,W,Y,A,B : Point
*****
eq (S A B Y) (Fplus (Fmult (Fdiv (S4 P W Q R) (S4 P U Q V)) (S4 A U B V)) (S A B W))
+++++
assert (W**Y/U**V = (S4 W P R Q) / (S4 U P V Q)).
-----
Lemma elim_area_on_inter_parallel_parallel : forall P Q R U V W Y A B : Point, on_inter_parallel_parallel Y R P Q W U V -> R <> Y -> S A B Y = S4 P W Q R / S4 P U Q V * S4 A U B V + S A B W.
Proof.
intros.
unfold on_inter_parallel_parallel in *.
DecompAndAll.
assert ((S A B Y) = (S A B W) + W**Y/U**V * (S4 A U B V)).
assert (P<>Q).
assert (U<>V).
cases_equality Y W.
assert (~ Col W R Y).
assert (W**Y/U**V = (S4 W P R Q) / (S4 U P V Q)).

*****
H8 : not (Col W R Y)
H7 : not (eq Y W)
H6 : not (eq U V)
H4 : not (eq P Q)
H : eq (S A B Y)\n (Fplus (S A B W) (Fmult (Fdiv (DSeg W Y) (DSeg U V)) (S4 A U B V)))
H5 : not (parallel U V P Q)
H2 : parallel Y W U V
H3 : parallel Y R P Q
H1 : not (Col R U V)
H0 : not (eq R Y)
P,Q,R,U,V,W,Y,A,B : Point
*****
eq (Fdiv (DSeg W Y) (DSeg U V)) (Fdiv (S4 W P R Q) (S4 U P V Q))
+++++
eapply elim_length_ratio_on_parallel_d_2.
-----
Lemma elim_area_on_inter_parallel_parallel : forall P Q R U V W Y A B : Point, on_inter_parallel_parallel Y R P Q W U V -> R <> Y -> S A B Y = S4 P W Q R / S4 P U Q V * S4 A U B V + S A B W.
Proof.
intros.
unfold on_inter_parallel_parallel in *.
DecompAndAll.
assert ((S A B Y) = (S A B W) + W**Y/U**V * (S4 A U B V)).
assert (P<>Q).
assert (U<>V).
cases_equality Y W.
assert (~ Col W R Y).
assert (W**Y/U**V = (S4 W P R Q) / (S4 U P V Q)).
eapply elim_length_ratio_on_parallel_d_2.

*****
H8 : not (Col W R Y)
H7 : not (eq Y W)
H6 : not (eq U V)
H4 : not (eq P Q)
H : eq (S A B Y)\n (Fplus (S A B W) (Fmult (Fdiv (DSeg W Y) (DSeg U V)) (S4 A U B V)))
H5 : not (parallel U V P Q)
H2 : parallel Y W U V
H3 : parallel Y R P Q
H1 : not (Col R U V)
H0 : not (eq R Y)
P,Q,R,U,V,W,Y,A,B : Point
*****
on_parallel_d Y R P Q ?lambda
+++++
Geometry.
-----
Lemma elim_area_on_inter_parallel_parallel : forall P Q R U V W Y A B : Point, on_inter_parallel_parallel Y R P Q W U V -> R <> Y -> S A B Y = S4 P W Q R / S4 P U Q V * S4 A U B V + S A B W.
Proof.
intros.
unfold on_inter_parallel_parallel in *.
DecompAndAll.
assert ((S A B Y) = (S A B W) + W**Y/U**V * (S4 A U B V)).
assert (P<>Q).
assert (U<>V).
cases_equality Y W.
assert (~ Col W R Y).
assert (W**Y/U**V = (S4 W P R Q) / (S4 U P V Q)).
eapply elim_length_ratio_on_parallel_d_2.
Geometry.

*****
H8 : not (Col W R Y)
H7 : not (eq Y W)
H6 : not (eq U V)
H4 : not (eq P Q)
H : eq (S A B Y)\n (Fplus (S A B W) (Fmult (Fdiv (DSeg W Y) (DSeg U V)) (S4 A U B V)))
H5 : not (parallel U V P Q)
H2 : parallel Y W U V
H3 : parallel Y R P Q
H1 : not (Col R U V)
H0 : not (eq R Y)
P,Q,R,U,V,W,Y,A,B : Point
*****
on_parallel_d Y R P Q ?lambda
+++++
unfold on_parallel_d.
-----
Lemma elim_area_on_inter_parallel_parallel : forall P Q R U V W Y A B : Point, on_inter_parallel_parallel Y R P Q W U V -> R <> Y -> S A B Y = S4 P W Q R / S4 P U Q V * S4 A U B V + S A B W.
Proof.
intros.
unfold on_inter_parallel_parallel in *.
DecompAndAll.
assert ((S A B Y) = (S A B W) + W**Y/U**V * (S4 A U B V)).
assert (P<>Q).
assert (U<>V).
cases_equality Y W.
assert (~ Col W R Y).
assert (W**Y/U**V = (S4 W P R Q) / (S4 U P V Q)).
eapply elim_length_ratio_on_parallel_d_2.
Geometry.
unfold on_parallel_d.

*****
H8 : not (Col W R Y)
H7 : not (eq Y W)
H6 : not (eq U V)
H4 : not (eq P Q)
H : eq (S A B Y)\n (Fplus (S A B W) (Fmult (Fdiv (DSeg W Y) (DSeg U V)) (S4 A U B V)))
H5 : not (parallel U V P Q)
H2 : parallel Y W U V
H3 : parallel Y R P Q
H1 : not (Col R U V)
H0 : not (eq R Y)
P,Q,R,U,V,W,Y,A,B : Point
*****
and (not (eq P Q)) (and (parallel Y R P Q) (eq (DSeg R Y) (Fmult ?lambda (DSeg P Q))))
+++++
repeat split.
-----
Lemma elim_area_on_inter_parallel_parallel : forall P Q R U V W Y A B : Point, on_inter_parallel_parallel Y R P Q W U V -> R <> Y -> S A B Y = S4 P W Q R / S4 P U Q V * S4 A U B V + S A B W.
Proof.
intros.
unfold on_inter_parallel_parallel in *.
DecompAndAll.
assert ((S A B Y) = (S A B W) + W**Y/U**V * (S4 A U B V)).
assert (P<>Q).
assert (U<>V).
cases_equality Y W.
assert (~ Col W R Y).
assert (W**Y/U**V = (S4 W P R Q) / (S4 U P V Q)).
eapply elim_length_ratio_on_parallel_d_2.
Geometry.
unfold on_parallel_d.
repeat split.

*****
H8 : not (Col W R Y)
H7 : not (eq Y W)
H6 : not (eq U V)
H4 : not (eq P Q)
H : eq (S A B Y)\n (Fplus (S A B W) (Fmult (Fdiv (DSeg W Y) (DSeg U V)) (S4 A U B V)))
H5 : not (parallel U V P Q)
H2 : parallel Y W U V
H3 : parallel Y R P Q
H1 : not (Col R U V)
H0 : not (eq R Y)
P,Q,R,U,V,W,Y,A,B : Point
*****
not (eq P Q)
+++++
Geometry.
-----
Lemma elim_area_on_inter_parallel_parallel : forall P Q R U V W Y A B : Point, on_inter_parallel_parallel Y R P Q W U V -> R <> Y -> S A B Y = S4 P W Q R / S4 P U Q V * S4 A U B V + S A B W.
Proof.
intros.
unfold on_inter_parallel_parallel in *.
DecompAndAll.
assert ((S A B Y) = (S A B W) + W**Y/U**V * (S4 A U B V)).
assert (P<>Q).
assert (U<>V).
cases_equality Y W.
assert (~ Col W R Y).
assert (W**Y/U**V = (S4 W P R Q) / (S4 U P V Q)).
eapply elim_length_ratio_on_parallel_d_2.
Geometry.
unfold on_parallel_d.
repeat split.

*****
H8 : not (Col W R Y)
H7 : not (eq Y W)
H6 : not (eq U V)
H4 : not (eq P Q)
H : eq (S A B Y)\n (Fplus (S A B W) (Fmult (Fdiv (DSeg W Y) (DSeg U V)) (S4 A U B V)))
H5 : not (parallel U V P Q)
H2 : parallel Y W U V
H3 : parallel Y R P Q
H1 : not (Col R U V)
H0 : not (eq R Y)
P,Q,R,U,V,W,Y,A,B : Point
*****
parallel Y R P Q
+++++
Geometry.
-----
Lemma elim_area_on_inter_parallel_parallel : forall P Q R U V W Y A B : Point, on_inter_parallel_parallel Y R P Q W U V -> R <> Y -> S A B Y = S4 P W Q R / S4 P U Q V * S4 A U B V + S A B W.
Proof.
intros.
unfold on_inter_parallel_parallel in *.
DecompAndAll.
assert ((S A B Y) = (S A B W) + W**Y/U**V * (S4 A U B V)).
assert (P<>Q).
assert (U<>V).
cases_equality Y W.
assert (~ Col W R Y).
assert (W**Y/U**V = (S4 W P R Q) / (S4 U P V Q)).
eapply elim_length_ratio_on_parallel_d_2.
Geometry.
unfold on_parallel_d.
repeat split.

*****
H8 : not (Col W R Y)
H7 : not (eq Y W)
H6 : not (eq U V)
H4 : not (eq P Q)
H : eq (S A B Y)\n (Fplus (S A B W) (Fmult (Fdiv (DSeg W Y) (DSeg U V)) (S4 A U B V)))
H5 : not (parallel U V P Q)
H2 : parallel Y W U V
H3 : parallel Y R P Q
H1 : not (Col R U V)
H0 : not (eq R Y)
P,Q,R,U,V,W,Y,A,B : Point
*****
eq (DSeg R Y) (Fmult ?lambda (DSeg P Q))
+++++
Geometry.
-----
Lemma elim_area_on_inter_parallel_parallel : forall P Q R U V W Y A B : Point, on_inter_parallel_parallel Y R P Q W U V -> R <> Y -> S A B Y = S4 P W Q R / S4 P U Q V * S4 A U B V + S A B W.
Proof.
intros.
unfold on_inter_parallel_parallel in *.
DecompAndAll.
assert ((S A B Y) = (S A B W) + W**Y/U**V * (S4 A U B V)).
assert (P<>Q).
assert (U<>V).
cases_equality Y W.
assert (~ Col W R Y).
assert (W**Y/U**V = (S4 W P R Q) / (S4 U P V Q)).
eapply elim_length_ratio_on_parallel_d_2.
Geometry.
unfold on_parallel_d.
repeat split.
Geometry.

*****
H8 : not (Col W R Y)
H7 : not (eq Y W)
H6 : not (eq U V)
H4 : not (eq P Q)
H : eq (S A B Y)\n (Fplus (S A B W) (Fmult (Fdiv (DSeg W Y) (DSeg U V)) (S4 A U B V)))
H5 : not (parallel U V P Q)
H2 : parallel Y W U V
H3 : parallel Y R P Q
H1 : not (Col R U V)
H0 : not (eq R Y)
P,Q,R,U,V,W,Y,A,B : Point
*****
eq (DSeg R Y) (Fmult ?lambda (DSeg P Q))
+++++
assert (R**Y = R**Y / P**Q * P**Q).
-----
Lemma elim_area_on_inter_parallel_parallel : forall P Q R U V W Y A B : Point, on_inter_parallel_parallel Y R P Q W U V -> R <> Y -> S A B Y = S4 P W Q R / S4 P U Q V * S4 A U B V + S A B W.
Proof.
intros.
unfold on_inter_parallel_parallel in *.
DecompAndAll.
assert ((S A B Y) = (S A B W) + W**Y/U**V * (S4 A U B V)).
assert (P<>Q).
assert (U<>V).
cases_equality Y W.
assert (~ Col W R Y).
assert (W**Y/U**V = (S4 W P R Q) / (S4 U P V Q)).
eapply elim_length_ratio_on_parallel_d_2.
Geometry.
unfold on_parallel_d.
repeat split.
Geometry.
assert (R**Y = R**Y / P**Q * P**Q).

*****
H8 : not (Col W R Y)
H7 : not (eq Y W)
H6 : not (eq U V)
H4 : not (eq P Q)
H : eq (S A B Y)\n (Fplus (S A B W) (Fmult (Fdiv (DSeg W Y) (DSeg U V)) (S4 A U B V)))
H5 : not (parallel U V P Q)
H2 : parallel Y W U V
H3 : parallel Y R P Q
H1 : not (Col R U V)
H0 : not (eq R Y)
P,Q,R,U,V,W,Y,A,B : Point
*****
eq (DSeg R Y) (Fmult (Fdiv (DSeg R Y) (DSeg P Q)) (DSeg P Q))
+++++
field.
-----
Lemma elim_area_on_inter_parallel_parallel : forall P Q R U V W Y A B : Point, on_inter_parallel_parallel Y R P Q W U V -> R <> Y -> S A B Y = S4 P W Q R / S4 P U Q V * S4 A U B V + S A B W.
Proof.
intros.
unfold on_inter_parallel_parallel in *.
DecompAndAll.
assert ((S A B Y) = (S A B W) + W**Y/U**V * (S4 A U B V)).
assert (P<>Q).
assert (U<>V).
cases_equality Y W.
assert (~ Col W R Y).
assert (W**Y/U**V = (S4 W P R Q) / (S4 U P V Q)).
eapply elim_length_ratio_on_parallel_d_2.
Geometry.
unfold on_parallel_d.
repeat split.
Geometry.
assert (R**Y = R**Y / P**Q * P**Q).
field.

*****
H8 : not (Col W R Y)
H7 : not (eq Y W)
H6 : not (eq U V)
H4 : not (eq P Q)
H : eq (S A B Y)\n (Fplus (S A B W) (Fmult (Fdiv (DSeg W Y) (DSeg U V)) (S4 A U B V)))
H5 : not (parallel U V P Q)
H2 : parallel Y W U V
H3 : parallel Y R P Q
H1 : not (Col R U V)
H0 : not (eq R Y)
P,Q,R,U,V,W,Y,A,B : Point
*****
not (eq (DSeg P Q) F0)
+++++
Geometry.
-----
Lemma elim_area_on_inter_parallel_parallel : forall P Q R U V W Y A B : Point, on_inter_parallel_parallel Y R P Q W U V -> R <> Y -> S A B Y = S4 P W Q R / S4 P U Q V * S4 A U B V + S A B W.
Proof.
intros.
unfold on_inter_parallel_parallel in *.
DecompAndAll.
assert ((S A B Y) = (S A B W) + W**Y/U**V * (S4 A U B V)).
assert (P<>Q).
assert (U<>V).
cases_equality Y W.
assert (~ Col W R Y).
assert (W**Y/U**V = (S4 W P R Q) / (S4 U P V Q)).
eapply elim_length_ratio_on_parallel_d_2.
Geometry.
unfold on_parallel_d.
repeat split.
Geometry.
assert (R**Y = R**Y / P**Q * P**Q).

*****
H9 : eq (DSeg R Y) (Fmult (Fdiv (DSeg R Y) (DSeg P Q)) (DSeg P Q))
H8 : not (Col W R Y)
H7 : not (eq Y W)
H6 : not (eq U V)
H4 : not (eq P Q)
H : eq (S A B Y)\n (Fplus (S A B W) (Fmult (Fdiv (DSeg W Y) (DSeg U V)) (S4 A U B V)))
H5 : not (parallel U V P Q)
H2 : parallel Y W U V
H3 : parallel Y R P Q
H1 : not (Col R U V)
H0 : not (eq R Y)
P,Q,R,U,V,W,Y,A,B : Point
*****
eq (DSeg R Y) (Fmult ?lambda (DSeg P Q))
+++++
eauto.
-----
Lemma elim_area_on_inter_parallel_parallel : forall P Q R U V W Y A B : Point, on_inter_parallel_parallel Y R P Q W U V -> R <> Y -> S A B Y = S4 P W Q R / S4 P U Q V * S4 A U B V + S A B W.
Proof.
intros.
unfold on_inter_parallel_parallel in *.
DecompAndAll.
assert ((S A B Y) = (S A B W) + W**Y/U**V * (S4 A U B V)).
assert (P<>Q).
assert (U<>V).
cases_equality Y W.
assert (~ Col W R Y).
assert (W**Y/U**V = (S4 W P R Q) / (S4 U P V Q)).
eapply elim_length_ratio_on_parallel_d_2.

*****
H8 : not (Col W R Y)
H7 : not (eq Y W)
H6 : not (eq U V)
H4 : not (eq P Q)
H : eq (S A B Y)\n (Fplus (S A B W) (Fmult (Fdiv (DSeg W Y) (DSeg U V)) (S4 A U B V)))
H5 : not (parallel U V P Q)
H2 : parallel Y W U V
H3 : parallel Y R P Q
H1 : not (Col R U V)
H0 : not (eq R Y)
P,Q,R,U,V,W,Y,A,B : Point
*****
not (Col W R Y)
+++++
Geometry.
-----
Lemma elim_area_on_inter_parallel_parallel : forall P Q R U V W Y A B : Point, on_inter_parallel_parallel Y R P Q W U V -> R <> Y -> S A B Y = S4 P W Q R / S4 P U Q V * S4 A U B V + S A B W.
Proof.
intros.
unfold on_inter_parallel_parallel in *.
DecompAndAll.
assert ((S A B Y) = (S A B W) + W**Y/U**V * (S4 A U B V)).
assert (P<>Q).
assert (U<>V).
cases_equality Y W.
assert (~ Col W R Y).
assert (W**Y/U**V = (S4 W P R Q) / (S4 U P V Q)).
eapply elim_length_ratio_on_parallel_d_2.

*****
H8 : not (Col W R Y)
H7 : not (eq Y W)
H6 : not (eq U V)
H4 : not (eq P Q)
H : eq (S A B Y)\n (Fplus (S A B W) (Fmult (Fdiv (DSeg W Y) (DSeg U V)) (S4 A U B V)))
H5 : not (parallel U V P Q)
H2 : parallel Y W U V
H3 : parallel Y R P Q
H1 : not (Col R U V)
H0 : not (eq R Y)
P,Q,R,U,V,W,Y,A,B : Point
*****
not (eq U V)
+++++
Geometry.
-----
Lemma elim_area_on_inter_parallel_parallel : forall P Q R U V W Y A B : Point, on_inter_parallel_parallel Y R P Q W U V -> R <> Y -> S A B Y = S4 P W Q R / S4 P U Q V * S4 A U B V + S A B W.
Proof.
intros.
unfold on_inter_parallel_parallel in *.
DecompAndAll.
assert ((S A B Y) = (S A B W) + W**Y/U**V * (S4 A U B V)).
assert (P<>Q).
assert (U<>V).
cases_equality Y W.
assert (~ Col W R Y).
assert (W**Y/U**V = (S4 W P R Q) / (S4 U P V Q)).
eapply elim_length_ratio_on_parallel_d_2.

*****
H8 : not (Col W R Y)
H7 : not (eq Y W)
H6 : not (eq U V)
H4 : not (eq P Q)
H : eq (S A B Y)\n (Fplus (S A B W) (Fmult (Fdiv (DSeg W Y) (DSeg U V)) (S4 A U B V)))
H5 : not (parallel U V P Q)
H2 : parallel Y W U V
H3 : parallel Y R P Q
H1 : not (Col R U V)
H0 : not (eq R Y)
P,Q,R,U,V,W,Y,A,B : Point
*****
parallel W Y U V
+++++
Geometry.
-----
Lemma elim_area_on_inter_parallel_parallel : forall P Q R U V W Y A B : Point, on_inter_parallel_parallel Y R P Q W U V -> R <> Y -> S A B Y = S4 P W Q R / S4 P U Q V * S4 A U B V + S A B W.
Proof.
intros.
unfold on_inter_parallel_parallel in *.
DecompAndAll.
assert ((S A B Y) = (S A B W) + W**Y/U**V * (S4 A U B V)).
assert (P<>Q).
assert (U<>V).
cases_equality Y W.
assert (~ Col W R Y).
assert (W**Y/U**V = (S4 W P R Q) / (S4 U P V Q)).

*****
H9 : eq (Fdiv (DSeg W Y) (DSeg U V)) (Fdiv (S4 W P R Q) (S4 U P V Q))
H8 : not (Col W R Y)
H7 : not (eq Y W)
H6 : not (eq U V)
H4 : not (eq P Q)
H : eq (S A B Y)\n (Fplus (S A B W) (Fmult (Fdiv (DSeg W Y) (DSeg U V)) (S4 A U B V)))
H5 : not (parallel U V P Q)
H2 : parallel Y W U V
H3 : parallel Y R P Q
H1 : not (Col R U V)
H0 : not (eq R Y)
P,Q,R,U,V,W,Y,A,B : Point
*****
eq (S A B Y) (Fplus (Fmult (Fdiv (S4 P W Q R) (S4 P U Q V)) (S4 A U B V)) (S A B W))
+++++
rewrite H.
-----
Lemma elim_area_on_inter_parallel_parallel : forall P Q R U V W Y A B : Point, on_inter_parallel_parallel Y R P Q W U V -> R <> Y -> S A B Y = S4 P W Q R / S4 P U Q V * S4 A U B V + S A B W.
Proof.
intros.
unfold on_inter_parallel_parallel in *.
DecompAndAll.
assert ((S A B Y) = (S A B W) + W**Y/U**V * (S4 A U B V)).
assert (P<>Q).
assert (U<>V).
cases_equality Y W.
assert (~ Col W R Y).
assert (W**Y/U**V = (S4 W P R Q) / (S4 U P V Q)).
rewrite H.

*****
H9 : eq (Fdiv (DSeg W Y) (DSeg U V)) (Fdiv (S4 W P R Q) (S4 U P V Q))
H8 : not (Col W R Y)
H7 : not (eq Y W)
H6 : not (eq U V)
H4 : not (eq P Q)
H : eq (S A B Y)\n (Fplus (S A B W) (Fmult (Fdiv (DSeg W Y) (DSeg U V)) (S4 A U B V)))
H5 : not (parallel U V P Q)
H2 : parallel Y W U V
H3 : parallel Y R P Q
H1 : not (Col R U V)
H0 : not (eq R Y)
P,Q,R,U,V,W,Y,A,B : Point
*****
eq (Fplus (S A B W) (Fmult (Fdiv (DSeg W Y) (DSeg U V)) (S4 A U B V))) (Fplus (Fmult (Fdiv (S4 P W Q R) (S4 P U Q V)) (S4 A U B V)) (S A B W))
+++++
rewrite H9.
-----
Lemma elim_area_on_inter_parallel_parallel : forall P Q R U V W Y A B : Point, on_inter_parallel_parallel Y R P Q W U V -> R <> Y -> S A B Y = S4 P W Q R / S4 P U Q V * S4 A U B V + S A B W.
Proof.
intros.
unfold on_inter_parallel_parallel in *.
DecompAndAll.
assert ((S A B Y) = (S A B W) + W**Y/U**V * (S4 A U B V)).
assert (P<>Q).
assert (U<>V).
cases_equality Y W.
assert (~ Col W R Y).
assert (W**Y/U**V = (S4 W P R Q) / (S4 U P V Q)).
rewrite H.
rewrite H9.

*****
H9 : eq (Fdiv (DSeg W Y) (DSeg U V)) (Fdiv (S4 W P R Q) (S4 U P V Q))
H8 : not (Col W R Y)
H7 : not (eq Y W)
H6 : not (eq U V)
H4 : not (eq P Q)
H : eq (S A B Y)\n (Fplus (S A B W) (Fmult (Fdiv (DSeg W Y) (DSeg U V)) (S4 A U B V)))
H5 : not (parallel U V P Q)
H2 : parallel Y W U V
H3 : parallel Y R P Q
H1 : not (Col R U V)
H0 : not (eq R Y)
P,Q,R,U,V,W,Y,A,B : Point
*****
eq (Fplus (S A B W) (Fmult (Fdiv (S4 W P R Q) (S4 U P V Q)) (S4 A U B V))) (Fplus (Fmult (Fdiv (S4 P W Q R) (S4 P U Q V)) (S4 A U B V)) (S A B W))
+++++
replace (S4 P U Q V) with (- S4 U P V Q).
-----
Lemma elim_area_on_inter_parallel_parallel : forall P Q R U V W Y A B : Point, on_inter_parallel_parallel Y R P Q W U V -> R <> Y -> S A B Y = S4 P W Q R / S4 P U Q V * S4 A U B V + S A B W.
Proof.
intros.
unfold on_inter_parallel_parallel in *.
DecompAndAll.
assert ((S A B Y) = (S A B W) + W**Y/U**V * (S4 A U B V)).
assert (P<>Q).
assert (U<>V).
cases_equality Y W.
assert (~ Col W R Y).
assert (W**Y/U**V = (S4 W P R Q) / (S4 U P V Q)).
rewrite H.
rewrite H9.
replace (S4 P U Q V) with (- S4 U P V Q).

*****
H9 : eq (Fdiv (DSeg W Y) (DSeg U V)) (Fdiv (S4 W P R Q) (S4 U P V Q))
H8 : not (Col W R Y)
H7 : not (eq Y W)
H6 : not (eq U V)
H4 : not (eq P Q)
H : eq (S A B Y)\n (Fplus (S A B W) (Fmult (Fdiv (DSeg W Y) (DSeg U V)) (S4 A U B V)))
H5 : not (parallel U V P Q)
H2 : parallel Y W U V
H3 : parallel Y R P Q
H1 : not (Col R U V)
H0 : not (eq R Y)
P,Q,R,U,V,W,Y,A,B : Point
*****
eq (Fplus (S A B W) (Fmult (Fdiv (S4 W P R Q) (S4 U P V Q)) (S4 A U B V))) (Fplus (Fmult (Fdiv (S4 P W Q R) (Fopp (S4 U P V Q))) (S4 A U B V)) (S A B W))
+++++
Geometry.
-----
Lemma elim_area_on_inter_parallel_parallel : forall P Q R U V W Y A B : Point, on_inter_parallel_parallel Y R P Q W U V -> R <> Y -> S A B Y = S4 P W Q R / S4 P U Q V * S4 A U B V + S A B W.
Proof.
intros.
unfold on_inter_parallel_parallel in *.
DecompAndAll.
assert ((S A B Y) = (S A B W) + W**Y/U**V * (S4 A U B V)).
assert (P<>Q).
assert (U<>V).
cases_equality Y W.
assert (~ Col W R Y).
assert (W**Y/U**V = (S4 W P R Q) / (S4 U P V Q)).
rewrite H.
rewrite H9.
replace (S4 P U Q V) with (- S4 U P V Q).
Geometry.

*****
H9 : eq (Fdiv (DSeg W Y) (DSeg U V)) (Fdiv (S4 W P R Q) (S4 U P V Q))
H8 : not (Col W R Y)
H7 : not (eq Y W)
H6 : not (eq U V)
H4 : not (eq P Q)
H : eq (S A B Y)\n (Fplus (S A B W) (Fmult (Fdiv (DSeg W Y) (DSeg U V)) (S4 A U B V)))
H5 : not (parallel U V P Q)
H2 : parallel Y W U V
H3 : parallel Y R P Q
H1 : not (Col R U V)
H0 : not (eq R Y)
P,Q,R,U,V,W,Y,A,B : Point
*****
eq (Fplus (S A B W) (Fmult (Fdiv (S4 W P R Q) (S4 U P V Q)) (S4 A U B V))) (Fplus (Fmult (Fdiv (S4 P W Q R) (Fopp (S4 U P V Q))) (S4 A U B V)) (S A B W))
+++++
replace (S4 W P R Q) with (- S4 P W Q R).
-----
Lemma elim_area_on_inter_parallel_parallel : forall P Q R U V W Y A B : Point, on_inter_parallel_parallel Y R P Q W U V -> R <> Y -> S A B Y = S4 P W Q R / S4 P U Q V * S4 A U B V + S A B W.
Proof.
intros.
unfold on_inter_parallel_parallel in *.
DecompAndAll.
assert ((S A B Y) = (S A B W) + W**Y/U**V * (S4 A U B V)).
assert (P<>Q).
assert (U<>V).
cases_equality Y W.
assert (~ Col W R Y).
assert (W**Y/U**V = (S4 W P R Q) / (S4 U P V Q)).
rewrite H.
rewrite H9.
replace (S4 P U Q V) with (- S4 U P V Q).
Geometry.
replace (S4 W P R Q) with (- S4 P W Q R).

*****
H9 : eq (Fdiv (DSeg W Y) (DSeg U V)) (Fdiv (S4 W P R Q) (S4 U P V Q))
H8 : not (Col W R Y)
H7 : not (eq Y W)
H6 : not (eq U V)
H4 : not (eq P Q)
H : eq (S A B Y)\n (Fplus (S A B W) (Fmult (Fdiv (DSeg W Y) (DSeg U V)) (S4 A U B V)))
H5 : not (parallel U V P Q)
H2 : parallel Y W U V
H3 : parallel Y R P Q
H1 : not (Col R U V)
H0 : not (eq R Y)
P,Q,R,U,V,W,Y,A,B : Point
*****
eq (Fplus (S A B W) (Fmult (Fdiv (Fopp (S4 P W Q R)) (S4 U P V Q)) (S4 A U B V))) (Fplus (Fmult (Fdiv (S4 P W Q R) (Fopp (S4 U P V Q))) (S4 A U B V)) (S A B W))
+++++
Geometry.
-----
Lemma elim_area_on_inter_parallel_parallel : forall P Q R U V W Y A B : Point, on_inter_parallel_parallel Y R P Q W U V -> R <> Y -> S A B Y = S4 P W Q R / S4 P U Q V * S4 A U B V + S A B W.
Proof.
intros.
unfold on_inter_parallel_parallel in *.
DecompAndAll.
assert ((S A B Y) = (S A B W) + W**Y/U**V * (S4 A U B V)).
assert (P<>Q).
assert (U<>V).
cases_equality Y W.
assert (~ Col W R Y).
assert (W**Y/U**V = (S4 W P R Q) / (S4 U P V Q)).
rewrite H.
rewrite H9.
replace (S4 P U Q V) with (- S4 U P V Q).
Geometry.
replace (S4 W P R Q) with (- S4 P W Q R).
Geometry.

*****
H9 : eq (Fdiv (DSeg W Y) (DSeg U V)) (Fdiv (S4 W P R Q) (S4 U P V Q))
H8 : not (Col W R Y)
H7 : not (eq Y W)
H6 : not (eq U V)
H4 : not (eq P Q)
H : eq (S A B Y)\n (Fplus (S A B W) (Fmult (Fdiv (DSeg W Y) (DSeg U V)) (S4 A U B V)))
H5 : not (parallel U V P Q)
H2 : parallel Y W U V
H3 : parallel Y R P Q
H1 : not (Col R U V)
H0 : not (eq R Y)
P,Q,R,U,V,W,Y,A,B : Point
*****
eq (Fplus (S A B W) (Fmult (Fdiv (Fopp (S4 P W Q R)) (S4 U P V Q)) (S4 A U B V))) (Fplus (Fmult (Fdiv (S4 P W Q R) (Fopp (S4 U P V Q))) (S4 A U B V)) (S A B W))
+++++
field.
-----
Lemma elim_area_on_inter_parallel_parallel : forall P Q R U V W Y A B : Point, on_inter_parallel_parallel Y R P Q W U V -> R <> Y -> S A B Y = S4 P W Q R / S4 P U Q V * S4 A U B V + S A B W.
Proof.
intros.
unfold on_inter_parallel_parallel in *.
DecompAndAll.
assert ((S A B Y) = (S A B W) + W**Y/U**V * (S4 A U B V)).
assert (P<>Q).
assert (U<>V).
cases_equality Y W.
assert (~ Col W R Y).
assert (W**Y/U**V = (S4 W P R Q) / (S4 U P V Q)).
rewrite H.
rewrite H9.
replace (S4 P U Q V) with (- S4 U P V Q).
Geometry.
replace (S4 W P R Q) with (- S4 P W Q R).
Geometry.
field.

*****
H9 : eq (Fdiv (DSeg W Y) (DSeg U V)) (Fdiv (S4 W P R Q) (S4 U P V Q))
H8 : not (Col W R Y)
H7 : not (eq Y W)
H6 : not (eq U V)
H4 : not (eq P Q)
H : eq (S A B Y)\n (Fplus (S A B W) (Fmult (Fdiv (DSeg W Y) (DSeg U V)) (S4 A U B V)))
H5 : not (parallel U V P Q)
H2 : parallel Y W U V
H3 : parallel Y R P Q
H1 : not (Col R U V)
H0 : not (eq R Y)
P,Q,R,U,V,W,Y,A,B : Point
*****
and (not (eq (Fopp (S4 U P V Q)) F0)) (not (eq (S4 U P V Q) F0))
+++++
split.
-----
Lemma elim_area_on_inter_parallel_parallel : forall P Q R U V W Y A B : Point, on_inter_parallel_parallel Y R P Q W U V -> R <> Y -> S A B Y = S4 P W Q R / S4 P U Q V * S4 A U B V + S A B W.
Proof.
intros.
unfold on_inter_parallel_parallel in *.
DecompAndAll.
assert ((S A B Y) = (S A B W) + W**Y/U**V * (S4 A U B V)).
assert (P<>Q).
assert (U<>V).
cases_equality Y W.
assert (~ Col W R Y).
assert (W**Y/U**V = (S4 W P R Q) / (S4 U P V Q)).
rewrite H.
rewrite H9.
replace (S4 P U Q V) with (- S4 U P V Q).
Geometry.
replace (S4 W P R Q) with (- S4 P W Q R).
Geometry.
field.
split.

*****
H9 : eq (Fdiv (DSeg W Y) (DSeg U V)) (Fdiv (S4 W P R Q) (S4 U P V Q))
H8 : not (Col W R Y)
H7 : not (eq Y W)
H6 : not (eq U V)
H4 : not (eq P Q)
H : eq (S A B Y)\n (Fplus (S A B W) (Fmult (Fdiv (DSeg W Y) (DSeg U V)) (S4 A U B V)))
H5 : not (parallel U V P Q)
H2 : parallel Y W U V
H3 : parallel Y R P Q
H1 : not (Col R U V)
H0 : not (eq R Y)
P,Q,R,U,V,W,Y,A,B : Point
*****
not (eq (Fopp (S4 U P V Q)) F0)
+++++
Geometry.
-----
Lemma elim_area_on_inter_parallel_parallel : forall P Q R U V W Y A B : Point, on_inter_parallel_parallel Y R P Q W U V -> R <> Y -> S A B Y = S4 P W Q R / S4 P U Q V * S4 A U B V + S A B W.
Proof.
intros.
unfold on_inter_parallel_parallel in *.
DecompAndAll.
assert ((S A B Y) = (S A B W) + W**Y/U**V * (S4 A U B V)).
assert (P<>Q).
assert (U<>V).
cases_equality Y W.
assert (~ Col W R Y).
assert (W**Y/U**V = (S4 W P R Q) / (S4 U P V Q)).
rewrite H.
rewrite H9.
replace (S4 P U Q V) with (- S4 U P V Q).
Geometry.
replace (S4 W P R Q) with (- S4 P W Q R).
Geometry.
field.
split.

*****
H9 : eq (Fdiv (DSeg W Y) (DSeg U V)) (Fdiv (S4 W P R Q) (S4 U P V Q))
H8 : not (Col W R Y)
H7 : not (eq Y W)
H6 : not (eq U V)
H4 : not (eq P Q)
H : eq (S A B Y)\n (Fplus (S A B W) (Fmult (Fdiv (DSeg W Y) (DSeg U V)) (S4 A U B V)))
H5 : not (parallel U V P Q)
H2 : parallel Y W U V
H3 : parallel Y R P Q
H1 : not (Col R U V)
H0 : not (eq R Y)
P,Q,R,U,V,W,Y,A,B : Point
*****
not (eq (S4 U P V Q) F0)
+++++
Geometry.
-----
Lemma elim_area_on_inter_parallel_parallel : forall P Q R U V W Y A B : Point, on_inter_parallel_parallel Y R P Q W U V -> R <> Y -> S A B Y = S4 P W Q R / S4 P U Q V * S4 A U B V + S A B W.
Proof.
intros.
unfold on_inter_parallel_parallel in *.
DecompAndAll.
assert ((S A B Y) = (S A B W) + W**Y/U**V * (S4 A U B V)).
assert (P<>Q).
assert (U<>V).
cases_equality Y W.
assert (~ Col W R Y).
assert (W**Y/U**V = (S4 W P R Q) / (S4 U P V Q)).
rewrite H.
rewrite H9.
replace (S4 P U Q V) with (- S4 U P V Q).
Geometry.
replace (S4 W P R Q) with (- S4 P W Q R).

*****
H9 : eq (Fdiv (DSeg W Y) (DSeg U V)) (Fdiv (S4 W P R Q) (S4 U P V Q))
H8 : not (Col W R Y)
H7 : not (eq Y W)
H6 : not (eq U V)
H4 : not (eq P Q)
H : eq (S A B Y)\n (Fplus (S A B W) (Fmult (Fdiv (DSeg W Y) (DSeg U V)) (S4 A U B V)))
H5 : not (parallel U V P Q)
H2 : parallel Y W U V
H3 : parallel Y R P Q
H1 : not (Col R U V)
H0 : not (eq R Y)
P,Q,R,U,V,W,Y,A,B : Point
*****
eq (Fopp (S4 P W Q R)) (S4 W P R Q)
+++++
Geometry.
-----
Lemma elim_area_on_inter_parallel_parallel : forall P Q R U V W Y A B : Point, on_inter_parallel_parallel Y R P Q W U V -> R <> Y -> S A B Y = S4 P W Q R / S4 P U Q V * S4 A U B V + S A B W.
Proof.
intros.
unfold on_inter_parallel_parallel in *.
DecompAndAll.
assert ((S A B Y) = (S A B W) + W**Y/U**V * (S4 A U B V)).
assert (P<>Q).
assert (U<>V).
cases_equality Y W.
assert (~ Col W R Y).
assert (W**Y/U**V = (S4 W P R Q) / (S4 U P V Q)).
rewrite H.
rewrite H9.
replace (S4 P U Q V) with (- S4 U P V Q).

*****
H9 : eq (Fdiv (DSeg W Y) (DSeg U V)) (Fdiv (S4 W P R Q) (S4 U P V Q))
H8 : not (Col W R Y)
H7 : not (eq Y W)
H6 : not (eq U V)
H4 : not (eq P Q)
H : eq (S A B Y)\n (Fplus (S A B W) (Fmult (Fdiv (DSeg W Y) (DSeg U V)) (S4 A U B V)))
H5 : not (parallel U V P Q)
H2 : parallel Y W U V
H3 : parallel Y R P Q
H1 : not (Col R U V)
H0 : not (eq R Y)
P,Q,R,U,V,W,Y,A,B : Point
*****
eq (Fopp (S4 U P V Q)) (S4 P U Q V)
+++++
Geometry.
-----
Lemma elim_area_on_inter_parallel_parallel : forall P Q R U V W Y A B : Point, on_inter_parallel_parallel Y R P Q W U V -> R <> Y -> S A B Y = S4 P W Q R / S4 P U Q V * S4 A U B V + S A B W.
Proof.
intros.
unfold on_inter_parallel_parallel in *.
DecompAndAll.
assert ((S A B Y) = (S A B W) + W**Y/U**V * (S4 A U B V)).

*****

*****

+++++
Qed.
-----
Lemma elim_area_on_inter_parallel_parallel_RY :\n    forall P Q R U V W Y A B : Point,\n    on_inter_parallel_parallel Y R P Q W U V ->\n    R = Y ->\n    S A B Y = S A B W +\n(W ** R / P ** Q + R ** Y / P ** Q) / (U ** V / P ** Q) * S4 A U B V.
-----
Lemma elim_area_on_inter_parallel_parallel_RY : forall P Q R U V W Y A B : Point, on_inter_parallel_parallel Y R P Q W U V -> R = Y -> S A B Y = S A B W + (W ** R / P ** Q + R ** Y / P ** Q) / (U ** V / P ** Q) * S4 A U B V.

*****

*****
forall (P Q R U V W Y A B : Point) (_ : on_inter_parallel_parallel Y R P Q W U V) (_ : eq R Y), eq (S A B Y) (Fplus (S A B W) (Fmult (Fdiv (Fplus (Fdiv (DSeg W R) (DSeg P Q)) (Fdiv (DSeg R Y) (DSeg P Q))) (Fdiv (DSeg U V) (DSeg P Q))) (S4 A U B V)))
+++++
Proof.
-----
Lemma elim_area_on_inter_parallel_parallel_RY : forall P Q R U V W Y A B : Point, on_inter_parallel_parallel Y R P Q W U V -> R = Y -> S A B Y = S A B W + (W ** R / P ** Q + R ** Y / P ** Q) / (U ** V / P ** Q) * S4 A U B V.
Proof.

*****

*****
forall (P Q R U V W Y A B : Point) (_ : on_inter_parallel_parallel Y R P Q W U V) (_ : eq R Y), eq (S A B Y) (Fplus (S A B W) (Fmult (Fdiv (Fplus (Fdiv (DSeg W R) (DSeg P Q)) (Fdiv (DSeg R Y) (DSeg P Q))) (Fdiv (DSeg U V) (DSeg P Q))) (S4 A U B V)))
+++++
intros.
-----
Lemma elim_area_on_inter_parallel_parallel_RY : forall P Q R U V W Y A B : Point, on_inter_parallel_parallel Y R P Q W U V -> R = Y -> S A B Y = S A B W + (W ** R / P ** Q + R ** Y / P ** Q) / (U ** V / P ** Q) * S4 A U B V.
Proof.
intros.

*****
H0 : eq R Y
H : on_inter_parallel_parallel Y R P Q W U V
P,Q,R,U,V,W,Y,A,B : Point
*****
eq (S A B Y) (Fplus (S A B W) (Fmult (Fdiv (Fplus (Fdiv (DSeg W R) (DSeg P Q)) (Fdiv (DSeg R Y) (DSeg P Q))) (Fdiv (DSeg U V) (DSeg P Q))) (S4 A U B V)))
+++++
unfold on_inter_parallel_parallel in *.
-----
Lemma elim_area_on_inter_parallel_parallel_RY : forall P Q R U V W Y A B : Point, on_inter_parallel_parallel Y R P Q W U V -> R = Y -> S A B Y = S A B W + (W ** R / P ** Q + R ** Y / P ** Q) / (U ** V / P ** Q) * S4 A U B V.
Proof.
intros.
unfold on_inter_parallel_parallel in *.

*****
H0 : eq R Y
H : and (not (Col R U V))\n (and (parallel Y R P Q)\n (and (parallel Y W U V) (not (parallel U V P Q))))
P,Q,R,U,V,W,Y,A,B : Point
*****
eq (S A B Y) (Fplus (S A B W) (Fmult (Fdiv (Fplus (Fdiv (DSeg W R) (DSeg P Q)) (Fdiv (DSeg R Y) (DSeg P Q))) (Fdiv (DSeg U V) (DSeg P Q))) (S4 A U B V)))
+++++
DecompAndAll.
-----
Lemma elim_area_on_inter_parallel_parallel_RY : forall P Q R U V W Y A B : Point, on_inter_parallel_parallel Y R P Q W U V -> R = Y -> S A B Y = S A B W + (W ** R / P ** Q + R ** Y / P ** Q) / (U ** V / P ** Q) * S4 A U B V.
Proof.
intros.
unfold on_inter_parallel_parallel in *.
DecompAndAll.

*****
H5 : not (parallel U V P Q)
H2 : parallel Y W U V
H3 : parallel Y R P Q
H1 : not (Col R U V)
H0 : eq R Y
P,Q,R,U,V,W,Y,A,B : Point
*****
eq (S A B Y) (Fplus (S A B W) (Fmult (Fdiv (Fplus (Fdiv (DSeg W R) (DSeg P Q)) (Fdiv (DSeg R Y) (DSeg P Q))) (Fdiv (DSeg U V) (DSeg P Q))) (S4 A U B V)))
+++++
assert ((S A B Y) = (S A B W) + (W**Y/U**V) * (S4 A U B V)).
-----
Lemma elim_area_on_inter_parallel_parallel_RY : forall P Q R U V W Y A B : Point, on_inter_parallel_parallel Y R P Q W U V -> R = Y -> S A B Y = S A B W + (W ** R / P ** Q + R ** Y / P ** Q) / (U ** V / P ** Q) * S4 A U B V.
Proof.
intros.
unfold on_inter_parallel_parallel in *.
DecompAndAll.
assert ((S A B Y) = (S A B W) + (W**Y/U**V) * (S4 A U B V)).

*****
H5 : not (parallel U V P Q)
H2 : parallel Y W U V
H3 : parallel Y R P Q
H1 : not (Col R U V)
H0 : eq R Y
P,Q,R,U,V,W,Y,A,B : Point
*****
eq (S A B Y) (Fplus (S A B W) (Fmult (Fdiv (DSeg W Y) (DSeg U V)) (S4 A U B V)))
+++++
apply elim_area_on_parallel.
-----
Lemma elim_area_on_inter_parallel_parallel_RY : forall P Q R U V W Y A B : Point, on_inter_parallel_parallel Y R P Q W U V -> R = Y -> S A B Y = S A B W + (W ** R / P ** Q + R ** Y / P ** Q) / (U ** V / P ** Q) * S4 A U B V.
Proof.
intros.
unfold on_inter_parallel_parallel in *.
DecompAndAll.
assert ((S A B Y) = (S A B W) + (W**Y/U**V) * (S4 A U B V)).
apply elim_area_on_parallel.

*****
H5 : not (parallel U V P Q)
H2 : parallel Y W U V
H3 : parallel Y R P Q
H1 : not (Col R U V)
H0 : eq R Y
P,Q,R,U,V,W,Y,A,B : Point
*****
on_parallel Y W U V
+++++
unfold on_parallel.
-----
Lemma elim_area_on_inter_parallel_parallel_RY : forall P Q R U V W Y A B : Point, on_inter_parallel_parallel Y R P Q W U V -> R = Y -> S A B Y = S A B W + (W ** R / P ** Q + R ** Y / P ** Q) / (U ** V / P ** Q) * S4 A U B V.
Proof.
intros.
unfold on_inter_parallel_parallel in *.
DecompAndAll.
assert ((S A B Y) = (S A B W) + (W**Y/U**V) * (S4 A U B V)).
apply elim_area_on_parallel.
unfold on_parallel.

*****
H5 : not (parallel U V P Q)
H2 : parallel Y W U V
H3 : parallel Y R P Q
H1 : not (Col R U V)
H0 : eq R Y
P,Q,R,U,V,W,Y,A,B : Point
*****
and (not (eq U V)) (parallel W Y U V)
+++++
repeat split.
-----
Lemma elim_area_on_inter_parallel_parallel_RY : forall P Q R U V W Y A B : Point, on_inter_parallel_parallel Y R P Q W U V -> R = Y -> S A B Y = S A B W + (W ** R / P ** Q + R ** Y / P ** Q) / (U ** V / P ** Q) * S4 A U B V.
Proof.
intros.
unfold on_inter_parallel_parallel in *.
DecompAndAll.
assert ((S A B Y) = (S A B W) + (W**Y/U**V) * (S4 A U B V)).
apply elim_area_on_parallel.
unfold on_parallel.
repeat split.

*****
H5 : not (parallel U V P Q)
H2 : parallel Y W U V
H3 : parallel Y R P Q
H1 : not (Col R U V)
H0 : eq R Y
P,Q,R,U,V,W,Y,A,B : Point
*****
not (eq U V)
+++++
Geometry.
-----
Lemma elim_area_on_inter_parallel_parallel_RY : forall P Q R U V W Y A B : Point, on_inter_parallel_parallel Y R P Q W U V -> R = Y -> S A B Y = S A B W + (W ** R / P ** Q + R ** Y / P ** Q) / (U ** V / P ** Q) * S4 A U B V.
Proof.
intros.
unfold on_inter_parallel_parallel in *.
DecompAndAll.
assert ((S A B Y) = (S A B W) + (W**Y/U**V) * (S4 A U B V)).
apply elim_area_on_parallel.
unfold on_parallel.
repeat split.
Geometry.

*****
H5 : not (parallel U V P Q)
H2 : parallel Y W U V
H3 : parallel Y R P Q
H1 : not (Col R U V)
H0 : eq R Y
P,Q,R,U,V,W,Y,A,B : Point
*****
not (eq U V)
+++++
unfold not.
-----
Lemma elim_area_on_inter_parallel_parallel_RY : forall P Q R U V W Y A B : Point, on_inter_parallel_parallel Y R P Q W U V -> R = Y -> S A B Y = S A B W + (W ** R / P ** Q + R ** Y / P ** Q) / (U ** V / P ** Q) * S4 A U B V.
Proof.
intros.
unfold on_inter_parallel_parallel in *.
DecompAndAll.
assert ((S A B Y) = (S A B W) + (W**Y/U**V) * (S4 A U B V)).
apply elim_area_on_parallel.
unfold on_parallel.
repeat split.
Geometry.
unfold not.

*****
H5 : not (parallel U V P Q)
H2 : parallel Y W U V
H3 : parallel Y R P Q
H1 : not (Col R U V)
H0 : eq R Y
P,Q,R,U,V,W,Y,A,B : Point
*****
forall _ : eq U V, False
+++++
intro.
-----
Lemma elim_area_on_inter_parallel_parallel_RY : forall P Q R U V W Y A B : Point, on_inter_parallel_parallel Y R P Q W U V -> R = Y -> S A B Y = S A B W + (W ** R / P ** Q + R ** Y / P ** Q) / (U ** V / P ** Q) * S4 A U B V.
Proof.
intros.
unfold on_inter_parallel_parallel in *.
DecompAndAll.
assert ((S A B Y) = (S A B W) + (W**Y/U**V) * (S4 A U B V)).
apply elim_area_on_parallel.
unfold on_parallel.
repeat split.
Geometry.
unfold not.
intro.

*****
H : eq U V
H5 : not (parallel U V P Q)
H2 : parallel Y W U V
H3 : parallel Y R P Q
H1 : not (Col R U V)
H0 : eq R Y
P,Q,R,U,V,W,Y,A,B : Point
*****
False
+++++
subst U.
-----
Lemma elim_area_on_inter_parallel_parallel_RY : forall P Q R U V W Y A B : Point, on_inter_parallel_parallel Y R P Q W U V -> R = Y -> S A B Y = S A B W + (W ** R / P ** Q + R ** Y / P ** Q) / (U ** V / P ** Q) * S4 A U B V.
Proof.
intros.
unfold on_inter_parallel_parallel in *.
DecompAndAll.
assert ((S A B Y) = (S A B W) + (W**Y/U**V) * (S4 A U B V)).
apply elim_area_on_parallel.
unfold on_parallel.
repeat split.
Geometry.
unfold not.
intro.
subst U.

*****
H2 : parallel Y W V V
H5 : not (parallel V V P Q)
H3 : parallel Y R P Q
H1 : not (Col R V V)
H0 : eq R Y
P,Q,R,V,W,Y,A,B : Point
*****
False
+++++
Geometry.
-----
Lemma elim_area_on_inter_parallel_parallel_RY : forall P Q R U V W Y A B : Point, on_inter_parallel_parallel Y R P Q W U V -> R = Y -> S A B Y = S A B W + (W ** R / P ** Q + R ** Y / P ** Q) / (U ** V / P ** Q) * S4 A U B V.
Proof.
intros.
unfold on_inter_parallel_parallel in *.
DecompAndAll.
assert ((S A B Y) = (S A B W) + (W**Y/U**V) * (S4 A U B V)).
apply elim_area_on_parallel.
unfold on_parallel.
repeat split.

*****
H5 : not (parallel U V P Q)
H2 : parallel Y W U V
H3 : parallel Y R P Q
H1 : not (Col R U V)
H0 : eq R Y
P,Q,R,U,V,W,Y,A,B : Point
*****
parallel W Y U V
+++++
Geometry.
-----
Lemma elim_area_on_inter_parallel_parallel_RY : forall P Q R U V W Y A B : Point, on_inter_parallel_parallel Y R P Q W U V -> R = Y -> S A B Y = S A B W + (W ** R / P ** Q + R ** Y / P ** Q) / (U ** V / P ** Q) * S4 A U B V.
Proof.
intros.
unfold on_inter_parallel_parallel in *.
DecompAndAll.
assert ((S A B Y) = (S A B W) + (W**Y/U**V) * (S4 A U B V)).

*****
H : eq (S A B Y)\n (Fplus (S A B W) (Fmult (Fdiv (DSeg W Y) (DSeg U V)) (S4 A U B V)))
H5 : not (parallel U V P Q)
H2 : parallel Y W U V
H3 : parallel Y R P Q
H1 : not (Col R U V)
H0 : eq R Y
P,Q,R,U,V,W,Y,A,B : Point
*****
eq (S A B Y) (Fplus (S A B W) (Fmult (Fdiv (Fplus (Fdiv (DSeg W R) (DSeg P Q)) (Fdiv (DSeg R Y) (DSeg P Q))) (Fdiv (DSeg U V) (DSeg P Q))) (S4 A U B V)))
+++++
assert (P<>Q).
-----
Lemma elim_area_on_inter_parallel_parallel_RY : forall P Q R U V W Y A B : Point, on_inter_parallel_parallel Y R P Q W U V -> R = Y -> S A B Y = S A B W + (W ** R / P ** Q + R ** Y / P ** Q) / (U ** V / P ** Q) * S4 A U B V.
Proof.
intros.
unfold on_inter_parallel_parallel in *.
DecompAndAll.
assert ((S A B Y) = (S A B W) + (W**Y/U**V) * (S4 A U B V)).
assert (P<>Q).

*****
H : eq (S A B Y)\n (Fplus (S A B W) (Fmult (Fdiv (DSeg W Y) (DSeg U V)) (S4 A U B V)))
H5 : not (parallel U V P Q)
H2 : parallel Y W U V
H3 : parallel Y R P Q
H1 : not (Col R U V)
H0 : eq R Y
P,Q,R,U,V,W,Y,A,B : Point
*****
not (eq P Q)
+++++
unfold not.
-----
Lemma elim_area_on_inter_parallel_parallel_RY : forall P Q R U V W Y A B : Point, on_inter_parallel_parallel Y R P Q W U V -> R = Y -> S A B Y = S A B W + (W ** R / P ** Q + R ** Y / P ** Q) / (U ** V / P ** Q) * S4 A U B V.
Proof.
intros.
unfold on_inter_parallel_parallel in *.
DecompAndAll.
assert ((S A B Y) = (S A B W) + (W**Y/U**V) * (S4 A U B V)).
assert (P<>Q).
unfold not.

*****
H : eq (S A B Y)\n (Fplus (S A B W) (Fmult (Fdiv (DSeg W Y) (DSeg U V)) (S4 A U B V)))
H5 : not (parallel U V P Q)
H2 : parallel Y W U V
H3 : parallel Y R P Q
H1 : not (Col R U V)
H0 : eq R Y
P,Q,R,U,V,W,Y,A,B : Point
*****
forall _ : eq P Q, False
+++++
intro.
-----
Lemma elim_area_on_inter_parallel_parallel_RY : forall P Q R U V W Y A B : Point, on_inter_parallel_parallel Y R P Q W U V -> R = Y -> S A B Y = S A B W + (W ** R / P ** Q + R ** Y / P ** Q) / (U ** V / P ** Q) * S4 A U B V.
Proof.
intros.
unfold on_inter_parallel_parallel in *.
DecompAndAll.
assert ((S A B Y) = (S A B W) + (W**Y/U**V) * (S4 A U B V)).
assert (P<>Q).
unfold not.
intro.

*****
H4 : eq P Q
H : eq (S A B Y)\n (Fplus (S A B W) (Fmult (Fdiv (DSeg W Y) (DSeg U V)) (S4 A U B V)))
H5 : not (parallel U V P Q)
H2 : parallel Y W U V
H3 : parallel Y R P Q
H1 : not (Col R U V)
H0 : eq R Y
P,Q,R,U,V,W,Y,A,B : Point
*****
False
+++++
subst P.
-----
Lemma elim_area_on_inter_parallel_parallel_RY : forall P Q R U V W Y A B : Point, on_inter_parallel_parallel Y R P Q W U V -> R = Y -> S A B Y = S A B W + (W ** R / P ** Q + R ** Y / P ** Q) / (U ** V / P ** Q) * S4 A U B V.
Proof.
intros.
unfold on_inter_parallel_parallel in *.
DecompAndAll.
assert ((S A B Y) = (S A B W) + (W**Y/U**V) * (S4 A U B V)).
assert (P<>Q).
unfold not.
intro.
subst P.

*****
H : eq (S A B Y)\n (Fplus (S A B W) (Fmult (Fdiv (DSeg W Y) (DSeg U V)) (S4 A U B V)))
H5 : not (parallel U V Q Q)
H2 : parallel Y W U V
H3 : parallel Y R Q Q
H1 : not (Col R U V)
H0 : eq R Y
Q,R,U,V,W,Y,A,B : Point
*****
False
+++++
Geometry.
-----
Lemma elim_area_on_inter_parallel_parallel_RY : forall P Q R U V W Y A B : Point, on_inter_parallel_parallel Y R P Q W U V -> R = Y -> S A B Y = S A B W + (W ** R / P ** Q + R ** Y / P ** Q) / (U ** V / P ** Q) * S4 A U B V.
Proof.
intros.
unfold on_inter_parallel_parallel in *.
DecompAndAll.
assert ((S A B Y) = (S A B W) + (W**Y/U**V) * (S4 A U B V)).
assert (P<>Q).

*****
H4 : not (eq P Q)
H : eq (S A B Y)\n (Fplus (S A B W) (Fmult (Fdiv (DSeg W Y) (DSeg U V)) (S4 A U B V)))
H5 : not (parallel U V P Q)
H2 : parallel Y W U V
H3 : parallel Y R P Q
H1 : not (Col R U V)
H0 : eq R Y
P,Q,R,U,V,W,Y,A,B : Point
*****
eq (S A B Y) (Fplus (S A B W) (Fmult (Fdiv (Fplus (Fdiv (DSeg W R) (DSeg P Q)) (Fdiv (DSeg R Y) (DSeg P Q))) (Fdiv (DSeg U V) (DSeg P Q))) (S4 A U B V)))
+++++
assert (U<>V).
-----
Lemma elim_area_on_inter_parallel_parallel_RY : forall P Q R U V W Y A B : Point, on_inter_parallel_parallel Y R P Q W U V -> R = Y -> S A B Y = S A B W + (W ** R / P ** Q + R ** Y / P ** Q) / (U ** V / P ** Q) * S4 A U B V.
Proof.
intros.
unfold on_inter_parallel_parallel in *.
DecompAndAll.
assert ((S A B Y) = (S A B W) + (W**Y/U**V) * (S4 A U B V)).
assert (P<>Q).
assert (U<>V).

*****
H4 : not (eq P Q)
H : eq (S A B Y)\n (Fplus (S A B W) (Fmult (Fdiv (DSeg W Y) (DSeg U V)) (S4 A U B V)))
H5 : not (parallel U V P Q)
H2 : parallel Y W U V
H3 : parallel Y R P Q
H1 : not (Col R U V)
H0 : eq R Y
P,Q,R,U,V,W,Y,A,B : Point
*****
not (eq U V)
+++++
unfold not.
-----
Lemma elim_area_on_inter_parallel_parallel_RY : forall P Q R U V W Y A B : Point, on_inter_parallel_parallel Y R P Q W U V -> R = Y -> S A B Y = S A B W + (W ** R / P ** Q + R ** Y / P ** Q) / (U ** V / P ** Q) * S4 A U B V.
Proof.
intros.
unfold on_inter_parallel_parallel in *.
DecompAndAll.
assert ((S A B Y) = (S A B W) + (W**Y/U**V) * (S4 A U B V)).
assert (P<>Q).
assert (U<>V).
unfold not.

*****
H4 : not (eq P Q)
H : eq (S A B Y)\n (Fplus (S A B W) (Fmult (Fdiv (DSeg W Y) (DSeg U V)) (S4 A U B V)))
H5 : not (parallel U V P Q)
H2 : parallel Y W U V
H3 : parallel Y R P Q
H1 : not (Col R U V)
H0 : eq R Y
P,Q,R,U,V,W,Y,A,B : Point
*****
forall _ : eq U V, False
+++++
intro.
-----
Lemma elim_area_on_inter_parallel_parallel_RY : forall P Q R U V W Y A B : Point, on_inter_parallel_parallel Y R P Q W U V -> R = Y -> S A B Y = S A B W + (W ** R / P ** Q + R ** Y / P ** Q) / (U ** V / P ** Q) * S4 A U B V.
Proof.
intros.
unfold on_inter_parallel_parallel in *.
DecompAndAll.
assert ((S A B Y) = (S A B W) + (W**Y/U**V) * (S4 A U B V)).
assert (P<>Q).
assert (U<>V).
unfold not.
intro.

*****
H6 : eq U V
H4 : not (eq P Q)
H : eq (S A B Y)\n (Fplus (S A B W) (Fmult (Fdiv (DSeg W Y) (DSeg U V)) (S4 A U B V)))
H5 : not (parallel U V P Q)
H2 : parallel Y W U V
H3 : parallel Y R P Q
H1 : not (Col R U V)
H0 : eq R Y
P,Q,R,U,V,W,Y,A,B : Point
*****
False
+++++
subst U.
-----
Lemma elim_area_on_inter_parallel_parallel_RY : forall P Q R U V W Y A B : Point, on_inter_parallel_parallel Y R P Q W U V -> R = Y -> S A B Y = S A B W + (W ** R / P ** Q + R ** Y / P ** Q) / (U ** V / P ** Q) * S4 A U B V.
Proof.
intros.
unfold on_inter_parallel_parallel in *.
DecompAndAll.
assert ((S A B Y) = (S A B W) + (W**Y/U**V) * (S4 A U B V)).
assert (P<>Q).
assert (U<>V).
unfold not.
intro.
subst U.

*****
H4 : not (eq P Q)
H2 : parallel Y W V V
H5 : not (parallel V V P Q)
H : eq (S A B Y)\n (Fplus (S A B W) (Fmult (Fdiv (DSeg W Y) (DSeg V V)) (S4 A V B V)))
H3 : parallel Y R P Q
H1 : not (Col R V V)
H0 : eq R Y
P,Q,R,V,W,Y,A,B : Point
*****
False
+++++
Geometry.
-----
Lemma elim_area_on_inter_parallel_parallel_RY : forall P Q R U V W Y A B : Point, on_inter_parallel_parallel Y R P Q W U V -> R = Y -> S A B Y = S A B W + (W ** R / P ** Q + R ** Y / P ** Q) / (U ** V / P ** Q) * S4 A U B V.
Proof.
intros.
unfold on_inter_parallel_parallel in *.
DecompAndAll.
assert ((S A B Y) = (S A B W) + (W**Y/U**V) * (S4 A U B V)).
assert (P<>Q).
assert (U<>V).

*****
H6 : not (eq U V)
H4 : not (eq P Q)
H : eq (S A B Y)\n (Fplus (S A B W) (Fmult (Fdiv (DSeg W Y) (DSeg U V)) (S4 A U B V)))
H5 : not (parallel U V P Q)
H2 : parallel Y W U V
H3 : parallel Y R P Q
H1 : not (Col R U V)
H0 : eq R Y
P,Q,R,U,V,W,Y,A,B : Point
*****
eq (S A B Y) (Fplus (S A B W) (Fmult (Fdiv (Fplus (Fdiv (DSeg W R) (DSeg P Q)) (Fdiv (DSeg R Y) (DSeg P Q))) (Fdiv (DSeg U V) (DSeg P Q))) (S4 A U B V)))
+++++
cases_equality Y W.
-----
Lemma elim_area_on_inter_parallel_parallel_RY : forall P Q R U V W Y A B : Point, on_inter_parallel_parallel Y R P Q W U V -> R = Y -> S A B Y = S A B W + (W ** R / P ** Q + R ** Y / P ** Q) / (U ** V / P ** Q) * S4 A U B V.
Proof.
intros.
unfold on_inter_parallel_parallel in *.
DecompAndAll.
assert ((S A B Y) = (S A B W) + (W**Y/U**V) * (S4 A U B V)).
assert (P<>Q).
assert (U<>V).
cases_equality Y W.

*****
H7 : eq Y W
H6 : not (eq U V)
H4 : not (eq P Q)
H : eq (S A B Y)\n (Fplus (S A B W) (Fmult (Fdiv (DSeg W Y) (DSeg U V)) (S4 A U B V)))
H5 : not (parallel U V P Q)
H2 : parallel Y W U V
H3 : parallel Y R P Q
H1 : not (Col R U V)
H0 : eq R Y
P,Q,R,U,V,W,Y,A,B : Point
*****
eq (S A B Y) (Fplus (S A B W) (Fmult (Fdiv (Fplus (Fdiv (DSeg W R) (DSeg P Q)) (Fdiv (DSeg R Y) (DSeg P Q))) (Fdiv (DSeg U V) (DSeg P Q))) (S4 A U B V)))
+++++
subst.
-----
Lemma elim_area_on_inter_parallel_parallel_RY : forall P Q R U V W Y A B : Point, on_inter_parallel_parallel Y R P Q W U V -> R = Y -> S A B Y = S A B W + (W ** R / P ** Q + R ** Y / P ** Q) / (U ** V / P ** Q) * S4 A U B V.
Proof.
intros.
unfold on_inter_parallel_parallel in *.
DecompAndAll.
assert ((S A B Y) = (S A B W) + (W**Y/U**V) * (S4 A U B V)).
assert (P<>Q).
assert (U<>V).
cases_equality Y W.
subst.

*****
H6 : not (eq U V)
H4 : not (eq P Q)
H : eq (S A B W)\n (Fplus (S A B W) (Fmult (Fdiv (DSeg W W) (DSeg U V)) (S4 A U B V)))
H5 : not (parallel U V P Q)
H3 : parallel W W P Q
H1 : not (Col W U V)
H2 : parallel W W U V
P,Q,U,V,W,A,B : Point
*****
eq (S A B W) (Fplus (S A B W) (Fmult (Fdiv (Fplus (Fdiv (DSeg W W) (DSeg P Q)) (Fdiv (DSeg W W) (DSeg P Q))) (Fdiv (DSeg U V) (DSeg P Q))) (S4 A U B V)))
+++++
basic_simpl.
-----
Lemma elim_area_on_inter_parallel_parallel_RY : forall P Q R U V W Y A B : Point, on_inter_parallel_parallel Y R P Q W U V -> R = Y -> S A B Y = S A B W + (W ** R / P ** Q + R ** Y / P ** Q) / (U ** V / P ** Q) * S4 A U B V.
Proof.
intros.
unfold on_inter_parallel_parallel in *.
DecompAndAll.
assert ((S A B Y) = (S A B W) + (W**Y/U**V) * (S4 A U B V)).
assert (P<>Q).
assert (U<>V).
cases_equality Y W.
subst.
basic_simpl.

*****
H6 : not (eq U V)
H4 : not (eq P Q)
H : eq (S A B W)\n (Fplus (S A B W) (Fmult (Fdiv F0 (DSeg U V)) (S4 A U B V)))
H5 : not (parallel U V P Q)
H3 : parallel W W P Q
H1 : not (Col W U V)
H2 : parallel W W U V
P,Q,U,V,W,A,B : Point
*****
eq (S A B W) (Fplus (S A B W) (Fmult (Fdiv (Fplus (Fdiv F0 (DSeg P Q)) (Fdiv F0 (DSeg P Q))) (Fdiv (DSeg U V) (DSeg P Q))) (S4 A U B V)))
+++++
field.
-----
Lemma elim_area_on_inter_parallel_parallel_RY : forall P Q R U V W Y A B : Point, on_inter_parallel_parallel Y R P Q W U V -> R = Y -> S A B Y = S A B W + (W ** R / P ** Q + R ** Y / P ** Q) / (U ** V / P ** Q) * S4 A U B V.
Proof.
intros.
unfold on_inter_parallel_parallel in *.
DecompAndAll.
assert ((S A B Y) = (S A B W) + (W**Y/U**V) * (S4 A U B V)).
assert (P<>Q).
assert (U<>V).
cases_equality Y W.
subst.
basic_simpl.
field.

*****
H6 : not (eq U V)
H4 : not (eq P Q)
H : eq (S A B W)\n (Fplus (S A B W) (Fmult (Fdiv F0 (DSeg U V)) (S4 A U B V)))
H5 : not (parallel U V P Q)
H3 : parallel W W P Q
H1 : not (Col W U V)
H2 : parallel W W U V
P,Q,U,V,W,A,B : Point
*****
and (not (eq (DSeg P Q) F0)) (not (eq (DSeg U V) F0))
+++++
Geometry.
-----
Lemma elim_area_on_inter_parallel_parallel_RY : forall P Q R U V W Y A B : Point, on_inter_parallel_parallel Y R P Q W U V -> R = Y -> S A B Y = S A B W + (W ** R / P ** Q + R ** Y / P ** Q) / (U ** V / P ** Q) * S4 A U B V.
Proof.
intros.
unfold on_inter_parallel_parallel in *.
DecompAndAll.
assert ((S A B Y) = (S A B W) + (W**Y/U**V) * (S4 A U B V)).
assert (P<>Q).
assert (U<>V).
cases_equality Y W.

*****
H7 : not (eq Y W)
H6 : not (eq U V)
H4 : not (eq P Q)
H : eq (S A B Y)\n (Fplus (S A B W) (Fmult (Fdiv (DSeg W Y) (DSeg U V)) (S4 A U B V)))
H5 : not (parallel U V P Q)
H2 : parallel Y W U V
H3 : parallel Y R P Q
H1 : not (Col R U V)
H0 : eq R Y
P,Q,R,U,V,W,Y,A,B : Point
*****
eq (S A B Y) (Fplus (S A B W) (Fmult (Fdiv (Fplus (Fdiv (DSeg W R) (DSeg P Q)) (Fdiv (DSeg R Y) (DSeg P Q))) (Fdiv (DSeg U V) (DSeg P Q))) (S4 A U B V)))
+++++
assert (W ** Y / U ** V = (W ** R / P ** Q + R**Y / P**Q) / (U ** V / P ** Q)).
-----
Lemma elim_area_on_inter_parallel_parallel_RY : forall P Q R U V W Y A B : Point, on_inter_parallel_parallel Y R P Q W U V -> R = Y -> S A B Y = S A B W + (W ** R / P ** Q + R ** Y / P ** Q) / (U ** V / P ** Q) * S4 A U B V.
Proof.
intros.
unfold on_inter_parallel_parallel in *.
DecompAndAll.
assert ((S A B Y) = (S A B W) + (W**Y/U**V) * (S4 A U B V)).
assert (P<>Q).
assert (U<>V).
cases_equality Y W.
assert (W ** Y / U ** V = (W ** R / P ** Q + R**Y / P**Q) / (U ** V / P ** Q)).

*****
H7 : not (eq Y W)
H6 : not (eq U V)
H4 : not (eq P Q)
H : eq (S A B Y)\n (Fplus (S A B W) (Fmult (Fdiv (DSeg W Y) (DSeg U V)) (S4 A U B V)))
H5 : not (parallel U V P Q)
H2 : parallel Y W U V
H3 : parallel Y R P Q
H1 : not (Col R U V)
H0 : eq R Y
P,Q,R,U,V,W,Y,A,B : Point
*****
eq (Fdiv (DSeg W Y) (DSeg U V)) (Fdiv (Fplus (Fdiv (DSeg W R) (DSeg P Q)) (Fdiv (DSeg R Y) (DSeg P Q))) (Fdiv (DSeg U V) (DSeg P Q)))
+++++
apply (elim_length_ratio_on_parallel_d_1 W U V).
-----
Lemma elim_area_on_inter_parallel_parallel_RY : forall P Q R U V W Y A B : Point, on_inter_parallel_parallel Y R P Q W U V -> R = Y -> S A B Y = S A B W + (W ** R / P ** Q + R ** Y / P ** Q) / (U ** V / P ** Q) * S4 A U B V.
Proof.
intros.
unfold on_inter_parallel_parallel in *.
DecompAndAll.
assert ((S A B Y) = (S A B W) + (W**Y/U**V) * (S4 A U B V)).
assert (P<>Q).
assert (U<>V).
cases_equality Y W.
assert (W ** Y / U ** V = (W ** R / P ** Q + R**Y / P**Q) / (U ** V / P ** Q)).
apply (elim_length_ratio_on_parallel_d_1 W U V).

*****
H7 : not (eq Y W)
H6 : not (eq U V)
H4 : not (eq P Q)
H : eq (S A B Y)\n (Fplus (S A B W) (Fmult (Fdiv (DSeg W Y) (DSeg U V)) (S4 A U B V)))
H5 : not (parallel U V P Q)
H2 : parallel Y W U V
H3 : parallel Y R P Q
H1 : not (Col R U V)
H0 : eq R Y
P,Q,R,U,V,W,Y,A,B : Point
*****
on_parallel_d Y R P Q (Fdiv (DSeg R Y) (DSeg P Q))
+++++
Geometry.
-----
Lemma elim_area_on_inter_parallel_parallel_RY : forall P Q R U V W Y A B : Point, on_inter_parallel_parallel Y R P Q W U V -> R = Y -> S A B Y = S A B W + (W ** R / P ** Q + R ** Y / P ** Q) / (U ** V / P ** Q) * S4 A U B V.
Proof.
intros.
unfold on_inter_parallel_parallel in *.
DecompAndAll.
assert ((S A B Y) = (S A B W) + (W**Y/U**V) * (S4 A U B V)).
assert (P<>Q).
assert (U<>V).
cases_equality Y W.
assert (W ** Y / U ** V = (W ** R / P ** Q + R**Y / P**Q) / (U ** V / P ** Q)).
apply (elim_length_ratio_on_parallel_d_1 W U V).
Geometry.

*****
H7 : not (eq Y W)
H6 : not (eq U V)
H4 : not (eq P Q)
H : eq (S A B Y)\n (Fplus (S A B W) (Fmult (Fdiv (DSeg W Y) (DSeg U V)) (S4 A U B V)))
H5 : not (parallel U V P Q)
H2 : parallel Y W U V
H3 : parallel Y R P Q
H1 : not (Col R U V)
H0 : eq R Y
P,Q,R,U,V,W,Y,A,B : Point
*****
on_parallel_d Y R P Q (Fdiv (DSeg R Y) (DSeg P Q))
+++++
unfold on_parallel_d.
-----
Lemma elim_area_on_inter_parallel_parallel_RY : forall P Q R U V W Y A B : Point, on_inter_parallel_parallel Y R P Q W U V -> R = Y -> S A B Y = S A B W + (W ** R / P ** Q + R ** Y / P ** Q) / (U ** V / P ** Q) * S4 A U B V.
Proof.
intros.
unfold on_inter_parallel_parallel in *.
DecompAndAll.
assert ((S A B Y) = (S A B W) + (W**Y/U**V) * (S4 A U B V)).
assert (P<>Q).
assert (U<>V).
cases_equality Y W.
assert (W ** Y / U ** V = (W ** R / P ** Q + R**Y / P**Q) / (U ** V / P ** Q)).
apply (elim_length_ratio_on_parallel_d_1 W U V).
Geometry.
unfold on_parallel_d.

*****
H7 : not (eq Y W)
H6 : not (eq U V)
H4 : not (eq P Q)
H : eq (S A B Y)\n (Fplus (S A B W) (Fmult (Fdiv (DSeg W Y) (DSeg U V)) (S4 A U B V)))
H5 : not (parallel U V P Q)
H2 : parallel Y W U V
H3 : parallel Y R P Q
H1 : not (Col R U V)
H0 : eq R Y
P,Q,R,U,V,W,Y,A,B : Point
*****
and (not (eq P Q)) (and (parallel Y R P Q) (eq (DSeg R Y) (Fmult (Fdiv (DSeg R Y) (DSeg P Q)) (DSeg P Q))))
+++++
repeat split.
-----
Lemma elim_area_on_inter_parallel_parallel_RY : forall P Q R U V W Y A B : Point, on_inter_parallel_parallel Y R P Q W U V -> R = Y -> S A B Y = S A B W + (W ** R / P ** Q + R ** Y / P ** Q) / (U ** V / P ** Q) * S4 A U B V.
Proof.
intros.
unfold on_inter_parallel_parallel in *.
DecompAndAll.
assert ((S A B Y) = (S A B W) + (W**Y/U**V) * (S4 A U B V)).
assert (P<>Q).
assert (U<>V).
cases_equality Y W.
assert (W ** Y / U ** V = (W ** R / P ** Q + R**Y / P**Q) / (U ** V / P ** Q)).
apply (elim_length_ratio_on_parallel_d_1 W U V).
Geometry.
unfold on_parallel_d.
repeat split.

*****
H7 : not (eq Y W)
H6 : not (eq U V)
H4 : not (eq P Q)
H : eq (S A B Y)\n (Fplus (S A B W) (Fmult (Fdiv (DSeg W Y) (DSeg U V)) (S4 A U B V)))
H5 : not (parallel U V P Q)
H2 : parallel Y W U V
H3 : parallel Y R P Q
H1 : not (Col R U V)
H0 : eq R Y
P,Q,R,U,V,W,Y,A,B : Point
*****
not (eq P Q)
+++++
Geometry.
-----
Lemma elim_area_on_inter_parallel_parallel_RY : forall P Q R U V W Y A B : Point, on_inter_parallel_parallel Y R P Q W U V -> R = Y -> S A B Y = S A B W + (W ** R / P ** Q + R ** Y / P ** Q) / (U ** V / P ** Q) * S4 A U B V.
Proof.
intros.
unfold on_inter_parallel_parallel in *.
DecompAndAll.
assert ((S A B Y) = (S A B W) + (W**Y/U**V) * (S4 A U B V)).
assert (P<>Q).
assert (U<>V).
cases_equality Y W.
assert (W ** Y / U ** V = (W ** R / P ** Q + R**Y / P**Q) / (U ** V / P ** Q)).
apply (elim_length_ratio_on_parallel_d_1 W U V).
Geometry.
unfold on_parallel_d.
repeat split.

*****
H7 : not (eq Y W)
H6 : not (eq U V)
H4 : not (eq P Q)
H : eq (S A B Y)\n (Fplus (S A B W) (Fmult (Fdiv (DSeg W Y) (DSeg U V)) (S4 A U B V)))
H5 : not (parallel U V P Q)
H2 : parallel Y W U V
H3 : parallel Y R P Q
H1 : not (Col R U V)
H0 : eq R Y
P,Q,R,U,V,W,Y,A,B : Point
*****
parallel Y R P Q
+++++
Geometry.
-----
Lemma elim_area_on_inter_parallel_parallel_RY : forall P Q R U V W Y A B : Point, on_inter_parallel_parallel Y R P Q W U V -> R = Y -> S A B Y = S A B W + (W ** R / P ** Q + R ** Y / P ** Q) / (U ** V / P ** Q) * S4 A U B V.
Proof.
intros.
unfold on_inter_parallel_parallel in *.
DecompAndAll.
assert ((S A B Y) = (S A B W) + (W**Y/U**V) * (S4 A U B V)).
assert (P<>Q).
assert (U<>V).
cases_equality Y W.
assert (W ** Y / U ** V = (W ** R / P ** Q + R**Y / P**Q) / (U ** V / P ** Q)).
apply (elim_length_ratio_on_parallel_d_1 W U V).
Geometry.
unfold on_parallel_d.
repeat split.

*****
H7 : not (eq Y W)
H6 : not (eq U V)
H4 : not (eq P Q)
H : eq (S A B Y)\n (Fplus (S A B W) (Fmult (Fdiv (DSeg W Y) (DSeg U V)) (S4 A U B V)))
H5 : not (parallel U V P Q)
H2 : parallel Y W U V
H3 : parallel Y R P Q
H1 : not (Col R U V)
H0 : eq R Y
P,Q,R,U,V,W,Y,A,B : Point
*****
eq (DSeg R Y) (Fmult (Fdiv (DSeg R Y) (DSeg P Q)) (DSeg P Q))
+++++
Geometry.
-----
Lemma elim_area_on_inter_parallel_parallel_RY : forall P Q R U V W Y A B : Point, on_inter_parallel_parallel Y R P Q W U V -> R = Y -> S A B Y = S A B W + (W ** R / P ** Q + R ** Y / P ** Q) / (U ** V / P ** Q) * S4 A U B V.
Proof.
intros.
unfold on_inter_parallel_parallel in *.
DecompAndAll.
assert ((S A B Y) = (S A B W) + (W**Y/U**V) * (S4 A U B V)).
assert (P<>Q).
assert (U<>V).
cases_equality Y W.
assert (W ** Y / U ** V = (W ** R / P ** Q + R**Y / P**Q) / (U ** V / P ** Q)).
apply (elim_length_ratio_on_parallel_d_1 W U V).
Geometry.
unfold on_parallel_d.
repeat split.
Geometry.

*****
H7 : not (eq Y W)
H6 : not (eq U V)
H4 : not (eq P Q)
H : eq (S A B Y)\n (Fplus (S A B W) (Fmult (Fdiv (DSeg W Y) (DSeg U V)) (S4 A U B V)))
H5 : not (parallel U V P Q)
H2 : parallel Y W U V
H3 : parallel Y R P Q
H1 : not (Col R U V)
H0 : eq R Y
P,Q,R,U,V,W,Y,A,B : Point
*****
eq (DSeg R Y) (Fmult (Fdiv (DSeg R Y) (DSeg P Q)) (DSeg P Q))
+++++
field.
-----
Lemma elim_area_on_inter_parallel_parallel_RY : forall P Q R U V W Y A B : Point, on_inter_parallel_parallel Y R P Q W U V -> R = Y -> S A B Y = S A B W + (W ** R / P ** Q + R ** Y / P ** Q) / (U ** V / P ** Q) * S4 A U B V.
Proof.
intros.
unfold on_inter_parallel_parallel in *.
DecompAndAll.
assert ((S A B Y) = (S A B W) + (W**Y/U**V) * (S4 A U B V)).
assert (P<>Q).
assert (U<>V).
cases_equality Y W.
assert (W ** Y / U ** V = (W ** R / P ** Q + R**Y / P**Q) / (U ** V / P ** Q)).
apply (elim_length_ratio_on_parallel_d_1 W U V).
Geometry.
unfold on_parallel_d.
repeat split.
Geometry.
field.

*****
H7 : not (eq Y W)
H6 : not (eq U V)
H4 : not (eq P Q)
H : eq (S A B Y)\n (Fplus (S A B W) (Fmult (Fdiv (DSeg W Y) (DSeg U V)) (S4 A U B V)))
H5 : not (parallel U V P Q)
H2 : parallel Y W U V
H3 : parallel Y R P Q
H1 : not (Col R U V)
H0 : eq R Y
P,Q,R,U,V,W,Y,A,B : Point
*****
not (eq (DSeg P Q) F0)
+++++
Geometry.
-----
Lemma elim_area_on_inter_parallel_parallel_RY : forall P Q R U V W Y A B : Point, on_inter_parallel_parallel Y R P Q W U V -> R = Y -> S A B Y = S A B W + (W ** R / P ** Q + R ** Y / P ** Q) / (U ** V / P ** Q) * S4 A U B V.
Proof.
intros.
unfold on_inter_parallel_parallel in *.
DecompAndAll.
assert ((S A B Y) = (S A B W) + (W**Y/U**V) * (S4 A U B V)).
assert (P<>Q).
assert (U<>V).
cases_equality Y W.
assert (W ** Y / U ** V = (W ** R / P ** Q + R**Y / P**Q) / (U ** V / P ** Q)).
apply (elim_length_ratio_on_parallel_d_1 W U V).

*****
H7 : not (eq Y W)
H6 : not (eq U V)
H4 : not (eq P Q)
H : eq (S A B Y)\n (Fplus (S A B W) (Fmult (Fdiv (DSeg W Y) (DSeg U V)) (S4 A U B V)))
H5 : not (parallel U V P Q)
H2 : parallel Y W U V
H3 : parallel Y R P Q
H1 : not (Col R U V)
H0 : eq R Y
P,Q,R,U,V,W,Y,A,B : Point
*****
eq (S W R Y) F0
+++++
Geometry.
-----
Lemma elim_area_on_inter_parallel_parallel_RY : forall P Q R U V W Y A B : Point, on_inter_parallel_parallel Y R P Q W U V -> R = Y -> S A B Y = S A B W + (W ** R / P ** Q + R ** Y / P ** Q) / (U ** V / P ** Q) * S4 A U B V.
Proof.
intros.
unfold on_inter_parallel_parallel in *.
DecompAndAll.
assert ((S A B Y) = (S A B W) + (W**Y/U**V) * (S4 A U B V)).
assert (P<>Q).
assert (U<>V).
cases_equality Y W.
assert (W ** Y / U ** V = (W ** R / P ** Q + R**Y / P**Q) / (U ** V / P ** Q)).
apply (elim_length_ratio_on_parallel_d_1 W U V).
Geometry.

*****
H7 : not (eq Y W)
H6 : not (eq U V)
H4 : not (eq P Q)
H : eq (S A B Y)\n (Fplus (S A B W) (Fmult (Fdiv (DSeg W Y) (DSeg U V)) (S4 A U B V)))
H5 : not (parallel U V P Q)
H2 : parallel Y W U V
H3 : parallel Y R P Q
H1 : not (Col R U V)
H0 : eq R Y
P,Q,R,U,V,W,Y,A,B : Point
*****
eq (S W R Y) F0
+++++
subst.
-----
Lemma elim_area_on_inter_parallel_parallel_RY : forall P Q R U V W Y A B : Point, on_inter_parallel_parallel Y R P Q W U V -> R = Y -> S A B Y = S A B W + (W ** R / P ** Q + R ** Y / P ** Q) / (U ** V / P ** Q) * S4 A U B V.
Proof.
intros.
unfold on_inter_parallel_parallel in *.
DecompAndAll.
assert ((S A B Y) = (S A B W) + (W**Y/U**V) * (S4 A U B V)).
assert (P<>Q).
assert (U<>V).
cases_equality Y W.
assert (W ** Y / U ** V = (W ** R / P ** Q + R**Y / P**Q) / (U ** V / P ** Q)).
apply (elim_length_ratio_on_parallel_d_1 W U V).
Geometry.
subst.

*****
H7 : not (eq Y W)
H6 : not (eq U V)
H4 : not (eq P Q)
H : eq (S A B Y)\n (Fplus (S A B W) (Fmult (Fdiv (DSeg W Y) (DSeg U V)) (S4 A U B V)))
H5 : not (parallel U V P Q)
H2 : parallel Y W U V
H1 : not (Col Y U V)
H3 : parallel Y Y P Q
P,Q,U,V,W,Y,A,B : Point
*****
eq (S W Y Y) F0
+++++
Geometry.
-----
Lemma elim_area_on_inter_parallel_parallel_RY : forall P Q R U V W Y A B : Point, on_inter_parallel_parallel Y R P Q W U V -> R = Y -> S A B Y = S A B W + (W ** R / P ** Q + R ** Y / P ** Q) / (U ** V / P ** Q) * S4 A U B V.
Proof.
intros.
unfold on_inter_parallel_parallel in *.
DecompAndAll.
assert ((S A B Y) = (S A B W) + (W**Y/U**V) * (S4 A U B V)).
assert (P<>Q).
assert (U<>V).
cases_equality Y W.
assert (W ** Y / U ** V = (W ** R / P ** Q + R**Y / P**Q) / (U ** V / P ** Q)).
apply (elim_length_ratio_on_parallel_d_1 W U V).

*****
H7 : not (eq Y W)
H6 : not (eq U V)
H4 : not (eq P Q)
H : eq (S A B Y)\n (Fplus (S A B W) (Fmult (Fdiv (DSeg W Y) (DSeg U V)) (S4 A U B V)))
H5 : not (parallel U V P Q)
H2 : parallel Y W U V
H3 : parallel Y R P Q
H1 : not (Col R U V)
H0 : eq R Y
P,Q,R,U,V,W,Y,A,B : Point
*****
not (eq U V)
+++++
Geometry.
-----
Lemma elim_area_on_inter_parallel_parallel_RY : forall P Q R U V W Y A B : Point, on_inter_parallel_parallel Y R P Q W U V -> R = Y -> S A B Y = S A B W + (W ** R / P ** Q + R ** Y / P ** Q) / (U ** V / P ** Q) * S4 A U B V.
Proof.
intros.
unfold on_inter_parallel_parallel in *.
DecompAndAll.
assert ((S A B Y) = (S A B W) + (W**Y/U**V) * (S4 A U B V)).
assert (P<>Q).
assert (U<>V).
cases_equality Y W.
assert (W ** Y / U ** V = (W ** R / P ** Q + R**Y / P**Q) / (U ** V / P ** Q)).

*****
H8 : eq (Fdiv (DSeg W Y) (DSeg U V))\n (Fdiv\n (Fplus (Fdiv (DSeg W R) (DSeg P Q)) (Fdiv (DSeg R Y) (DSeg P Q)))\n (Fdiv (DSeg U V) (DSeg P Q)))
H7 : not (eq Y W)
H6 : not (eq U V)
H4 : not (eq P Q)
H : eq (S A B Y)\n (Fplus (S A B W) (Fmult (Fdiv (DSeg W Y) (DSeg U V)) (S4 A U B V)))
H5 : not (parallel U V P Q)
H2 : parallel Y W U V
H3 : parallel Y R P Q
H1 : not (Col R U V)
H0 : eq R Y
P,Q,R,U,V,W,Y,A,B : Point
*****
eq (S A B Y) (Fplus (S A B W) (Fmult (Fdiv (Fplus (Fdiv (DSeg W R) (DSeg P Q)) (Fdiv (DSeg R Y) (DSeg P Q))) (Fdiv (DSeg U V) (DSeg P Q))) (S4 A U B V)))
+++++
rewrite H.
-----
Lemma elim_area_on_inter_parallel_parallel_RY : forall P Q R U V W Y A B : Point, on_inter_parallel_parallel Y R P Q W U V -> R = Y -> S A B Y = S A B W + (W ** R / P ** Q + R ** Y / P ** Q) / (U ** V / P ** Q) * S4 A U B V.
Proof.
intros.
unfold on_inter_parallel_parallel in *.
DecompAndAll.
assert ((S A B Y) = (S A B W) + (W**Y/U**V) * (S4 A U B V)).
assert (P<>Q).
assert (U<>V).
cases_equality Y W.
assert (W ** Y / U ** V = (W ** R / P ** Q + R**Y / P**Q) / (U ** V / P ** Q)).
rewrite H.

*****
H8 : eq (Fdiv (DSeg W Y) (DSeg U V))\n (Fdiv\n (Fplus (Fdiv (DSeg W R) (DSeg P Q)) (Fdiv (DSeg R Y) (DSeg P Q)))\n (Fdiv (DSeg U V) (DSeg P Q)))
H7 : not (eq Y W)
H6 : not (eq U V)
H4 : not (eq P Q)
H : eq (S A B Y)\n (Fplus (S A B W) (Fmult (Fdiv (DSeg W Y) (DSeg U V)) (S4 A U B V)))
H5 : not (parallel U V P Q)
H2 : parallel Y W U V
H3 : parallel Y R P Q
H1 : not (Col R U V)
H0 : eq R Y
P,Q,R,U,V,W,Y,A,B : Point
*****
eq (Fplus (S A B W) (Fmult (Fdiv (DSeg W Y) (DSeg U V)) (S4 A U B V))) (Fplus (S A B W) (Fmult (Fdiv (Fplus (Fdiv (DSeg W R) (DSeg P Q)) (Fdiv (DSeg R Y) (DSeg P Q))) (Fdiv (DSeg U V) (DSeg P Q))) (S4 A U B V)))
+++++
rewrite H8.
-----
Lemma elim_area_on_inter_parallel_parallel_RY : forall P Q R U V W Y A B : Point, on_inter_parallel_parallel Y R P Q W U V -> R = Y -> S A B Y = S A B W + (W ** R / P ** Q + R ** Y / P ** Q) / (U ** V / P ** Q) * S4 A U B V.
Proof.
intros.
unfold on_inter_parallel_parallel in *.
DecompAndAll.
assert ((S A B Y) = (S A B W) + (W**Y/U**V) * (S4 A U B V)).
assert (P<>Q).
assert (U<>V).
cases_equality Y W.
assert (W ** Y / U ** V = (W ** R / P ** Q + R**Y / P**Q) / (U ** V / P ** Q)).
rewrite H.
rewrite H8.

*****
H8 : eq (Fdiv (DSeg W Y) (DSeg U V))\n (Fdiv\n (Fplus (Fdiv (DSeg W R) (DSeg P Q)) (Fdiv (DSeg R Y) (DSeg P Q)))\n (Fdiv (DSeg U V) (DSeg P Q)))
H7 : not (eq Y W)
H6 : not (eq U V)
H4 : not (eq P Q)
H : eq (S A B Y)\n (Fplus (S A B W) (Fmult (Fdiv (DSeg W Y) (DSeg U V)) (S4 A U B V)))
H5 : not (parallel U V P Q)
H2 : parallel Y W U V
H3 : parallel Y R P Q
H1 : not (Col R U V)
H0 : eq R Y
P,Q,R,U,V,W,Y,A,B : Point
*****
eq (Fplus (S A B W) (Fmult (Fdiv (Fplus (Fdiv (DSeg W R) (DSeg P Q)) (Fdiv (DSeg R Y) (DSeg P Q))) (Fdiv (DSeg U V) (DSeg P Q))) (S4 A U B V))) (Fplus (S A B W) (Fmult (Fdiv (Fplus (Fdiv (DSeg W R) (DSeg P Q)) (Fdiv (DSeg R Y) (DSeg P Q))) (Fdiv (DSeg U V) (DSeg P Q))) (S4 A U B V)))
+++++
field.
-----
Lemma elim_area_on_inter_parallel_parallel_RY : forall P Q R U V W Y A B : Point, on_inter_parallel_parallel Y R P Q W U V -> R = Y -> S A B Y = S A B W + (W ** R / P ** Q + R ** Y / P ** Q) / (U ** V / P ** Q) * S4 A U B V.
Proof.
intros.
unfold on_inter_parallel_parallel in *.
DecompAndAll.
assert ((S A B Y) = (S A B W) + (W**Y/U**V) * (S4 A U B V)).
assert (P<>Q).
assert (U<>V).
cases_equality Y W.
assert (W ** Y / U ** V = (W ** R / P ** Q + R**Y / P**Q) / (U ** V / P ** Q)).
rewrite H.
rewrite H8.
field.

*****
H8 : eq (Fdiv (DSeg W Y) (DSeg U V))\n (Fdiv\n (Fplus (Fdiv (DSeg W R) (DSeg P Q)) (Fdiv (DSeg R Y) (DSeg P Q)))\n (Fdiv (DSeg U V) (DSeg P Q)))
H7 : not (eq Y W)
H6 : not (eq U V)
H4 : not (eq P Q)
H : eq (S A B Y)\n (Fplus (S A B W) (Fmult (Fdiv (DSeg W Y) (DSeg U V)) (S4 A U B V)))
H5 : not (parallel U V P Q)
H2 : parallel Y W U V
H3 : parallel Y R P Q
H1 : not (Col R U V)
H0 : eq R Y
P,Q,R,U,V,W,Y,A,B : Point
*****
and (not (eq (DSeg P Q) F0)) (not (eq (DSeg U V) F0))
+++++
Geometry.
-----
Lemma elim_area_on_inter_parallel_parallel_RY : forall P Q R U V W Y A B : Point, on_inter_parallel_parallel Y R P Q W U V -> R = Y -> S A B Y = S A B W + (W ** R / P ** Q + R ** Y / P ** Q) / (U ** V / P ** Q) * S4 A U B V.
Proof.
intros.
unfold on_inter_parallel_parallel in *.
DecompAndAll.
assert ((S A B Y) = (S A B W) + (W**Y/U**V) * (S4 A U B V)).

*****

*****

+++++
Qed.
-----
Lemma elim_length_ratio_on_inter_line_parallel_1 :\n    forall A C D U V R P Q Y : Point,\n    on_inter_line_parallel Y R U V P Q ->\n    S A U V <> 0->\n    C <> D -> \n    parallel A Y C D -> \n    A ** Y / C ** D = S A U V / S4 C U D V.
-----
Lemma elim_length_ratio_on_inter_line_parallel_1 : forall A C D U V R P Q Y : Point, on_inter_line_parallel Y R U V P Q -> S A U V <> 0-> C <> D -> parallel A Y C D -> A ** Y / C ** D = S A U V / S4 C U D V.

*****

*****
forall (A C D U V R P Q Y : Point) (_ : on_inter_line_parallel Y R U V P Q) (_ : not (eq (S A U V) F0)) (_ : not (eq C D)) (_ : parallel A Y C D), eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (S A U V) (S4 C U D V))
+++++
Proof.
-----
Lemma elim_length_ratio_on_inter_line_parallel_1 : forall A C D U V R P Q Y : Point, on_inter_line_parallel Y R U V P Q -> S A U V <> 0-> C <> D -> parallel A Y C D -> A ** Y / C ** D = S A U V / S4 C U D V.
Proof.

*****

*****
forall (A C D U V R P Q Y : Point) (_ : on_inter_line_parallel Y R U V P Q) (_ : not (eq (S A U V) F0)) (_ : not (eq C D)) (_ : parallel A Y C D), eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (S A U V) (S4 C U D V))
+++++
unfold on_inter_line_parallel.
-----
Lemma elim_length_ratio_on_inter_line_parallel_1 : forall A C D U V R P Q Y : Point, on_inter_line_parallel Y R U V P Q -> S A U V <> 0-> C <> D -> parallel A Y C D -> A ** Y / C ** D = S A U V / S4 C U D V.
Proof.
unfold on_inter_line_parallel.

*****

*****
forall (A C D U V R P Q Y : Point) (_ : and (not (Col R P Q)) (and (Col Y U V) (and (parallel Y R P Q) (not (parallel P Q U V))))) (_ : not (eq (S A U V) F0)) (_ : not (eq C D)) (_ : parallel A Y C D), eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (S A U V) (S4 C U D V))
+++++
intros.
-----
Lemma elim_length_ratio_on_inter_line_parallel_1 : forall A C D U V R P Q Y : Point, on_inter_line_parallel Y R U V P Q -> S A U V <> 0-> C <> D -> parallel A Y C D -> A ** Y / C ** D = S A U V / S4 C U D V.
Proof.
unfold on_inter_line_parallel.
intros.

*****
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (eq (S A U V) F0)
H : and (not (Col R P Q))\n (and (Col Y U V) (and (parallel Y R P Q) (not (parallel P Q U V))))
A,C,D,U,V,R,P,Q,Y : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (S A U V) (S4 C U D V))
+++++
DecompAndAll.
-----
Lemma elim_length_ratio_on_inter_line_parallel_1 : forall A C D U V R P Q Y : Point, on_inter_line_parallel Y R U V P Q -> S A U V <> 0-> C <> D -> parallel A Y C D -> A ** Y / C ** D = S A U V / S4 C U D V.
Proof.
unfold on_inter_line_parallel.
intros.
DecompAndAll.

*****
H7 : not (parallel P Q U V)
H4 : parallel Y R P Q
H5 : Col Y U V
H3 : not (Col R P Q)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (eq (S A U V) F0)
A,C,D,U,V,R,P,Q,Y : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (S A U V) (S4 C U D V))
+++++
eapply elim_length_ratio_on_line_2.
-----
Lemma elim_length_ratio_on_inter_line_parallel_1 : forall A C D U V R P Q Y : Point, on_inter_line_parallel Y R U V P Q -> S A U V <> 0-> C <> D -> parallel A Y C D -> A ** Y / C ** D = S A U V / S4 C U D V.
Proof.
unfold on_inter_line_parallel.
intros.
DecompAndAll.
eapply elim_length_ratio_on_line_2.

*****
H7 : not (parallel P Q U V)
H4 : parallel Y R P Q
H5 : Col Y U V
H3 : not (Col R P Q)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (eq (S A U V) F0)
A,C,D,U,V,R,P,Q,Y : Point
*****
on_line Y U V
+++++
Geometry.
-----
Lemma elim_length_ratio_on_inter_line_parallel_1 : forall A C D U V R P Q Y : Point, on_inter_line_parallel Y R U V P Q -> S A U V <> 0-> C <> D -> parallel A Y C D -> A ** Y / C ** D = S A U V / S4 C U D V.
Proof.
unfold on_inter_line_parallel.
intros.
DecompAndAll.
eapply elim_length_ratio_on_line_2.
Geometry.

*****
H7 : not (parallel P Q U V)
H4 : parallel Y R P Q
H5 : Col Y U V
H3 : not (Col R P Q)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (eq (S A U V) F0)
A,C,D,U,V,R,P,Q,Y : Point
*****
on_line Y U V
+++++
unfold on_line.
-----
Lemma elim_length_ratio_on_inter_line_parallel_1 : forall A C D U V R P Q Y : Point, on_inter_line_parallel Y R U V P Q -> S A U V <> 0-> C <> D -> parallel A Y C D -> A ** Y / C ** D = S A U V / S4 C U D V.
Proof.
unfold on_inter_line_parallel.
intros.
DecompAndAll.
eapply elim_length_ratio_on_line_2.
Geometry.
unfold on_line.

*****
H7 : not (parallel P Q U V)
H4 : parallel Y R P Q
H5 : Col Y U V
H3 : not (Col R P Q)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (eq (S A U V) F0)
A,C,D,U,V,R,P,Q,Y : Point
*****
and (Col Y U V) (not (eq U V))
+++++
split.
-----
Lemma elim_length_ratio_on_inter_line_parallel_1 : forall A C D U V R P Q Y : Point, on_inter_line_parallel Y R U V P Q -> S A U V <> 0-> C <> D -> parallel A Y C D -> A ** Y / C ** D = S A U V / S4 C U D V.
Proof.
unfold on_inter_line_parallel.
intros.
DecompAndAll.
eapply elim_length_ratio_on_line_2.
Geometry.
unfold on_line.
split.

*****
H7 : not (parallel P Q U V)
H4 : parallel Y R P Q
H5 : Col Y U V
H3 : not (Col R P Q)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (eq (S A U V) F0)
A,C,D,U,V,R,P,Q,Y : Point
*****
Col Y U V
+++++
Geometry.
-----
Lemma elim_length_ratio_on_inter_line_parallel_1 : forall A C D U V R P Q Y : Point, on_inter_line_parallel Y R U V P Q -> S A U V <> 0-> C <> D -> parallel A Y C D -> A ** Y / C ** D = S A U V / S4 C U D V.
Proof.
unfold on_inter_line_parallel.
intros.
DecompAndAll.
eapply elim_length_ratio_on_line_2.
Geometry.
unfold on_line.
split.

*****
H7 : not (parallel P Q U V)
H4 : parallel Y R P Q
H5 : Col Y U V
H3 : not (Col R P Q)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (eq (S A U V) F0)
A,C,D,U,V,R,P,Q,Y : Point
*****
not (eq U V)
+++++
Geometry.
-----
Lemma elim_length_ratio_on_inter_line_parallel_1 : forall A C D U V R P Q Y : Point, on_inter_line_parallel Y R U V P Q -> S A U V <> 0-> C <> D -> parallel A Y C D -> A ** Y / C ** D = S A U V / S4 C U D V.
Proof.
unfold on_inter_line_parallel.
intros.
DecompAndAll.
eapply elim_length_ratio_on_line_2.
Geometry.
unfold on_line.
split.
Geometry.

*****
H7 : not (parallel P Q U V)
H4 : parallel Y R P Q
H5 : Col Y U V
H3 : not (Col R P Q)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (eq (S A U V) F0)
A,C,D,U,V,R,P,Q,Y : Point
*****
not (eq U V)
+++++
unfold not.
-----
Lemma elim_length_ratio_on_inter_line_parallel_1 : forall A C D U V R P Q Y : Point, on_inter_line_parallel Y R U V P Q -> S A U V <> 0-> C <> D -> parallel A Y C D -> A ** Y / C ** D = S A U V / S4 C U D V.
Proof.
unfold on_inter_line_parallel.
intros.
DecompAndAll.
eapply elim_length_ratio_on_line_2.
Geometry.
unfold on_line.
split.
Geometry.
unfold not.

*****
H7 : not (parallel P Q U V)
H4 : parallel Y R P Q
H5 : Col Y U V
H3 : not (Col R P Q)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (eq (S A U V) F0)
A,C,D,U,V,R,P,Q,Y : Point
*****
forall _ : eq U V, False
+++++
intro.
-----
Lemma elim_length_ratio_on_inter_line_parallel_1 : forall A C D U V R P Q Y : Point, on_inter_line_parallel Y R U V P Q -> S A U V <> 0-> C <> D -> parallel A Y C D -> A ** Y / C ** D = S A U V / S4 C U D V.
Proof.
unfold on_inter_line_parallel.
intros.
DecompAndAll.
eapply elim_length_ratio_on_line_2.
Geometry.
unfold on_line.
split.
Geometry.
unfold not.
intro.

*****
H : eq U V
H7 : not (parallel P Q U V)
H4 : parallel Y R P Q
H5 : Col Y U V
H3 : not (Col R P Q)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (eq (S A U V) F0)
A,C,D,U,V,R,P,Q,Y : Point
*****
False
+++++
subst U.
-----
Lemma elim_length_ratio_on_inter_line_parallel_1 : forall A C D U V R P Q Y : Point, on_inter_line_parallel Y R U V P Q -> S A U V <> 0-> C <> D -> parallel A Y C D -> A ** Y / C ** D = S A U V / S4 C U D V.
Proof.
unfold on_inter_line_parallel.
intros.
DecompAndAll.
eapply elim_length_ratio_on_line_2.
Geometry.
unfold on_line.
split.
Geometry.
unfold not.
intro.
subst U.

*****
H7 : not (parallel P Q V V)
H4 : parallel Y R P Q
H5 : Col Y V V
H3 : not (Col R P Q)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (eq (S A V V) F0)
A,C,D,V,R,P,Q,Y : Point
*****
False
+++++
Geometry.
-----
Lemma elim_length_ratio_on_inter_line_parallel_1 : forall A C D U V R P Q Y : Point, on_inter_line_parallel Y R U V P Q -> S A U V <> 0-> C <> D -> parallel A Y C D -> A ** Y / C ** D = S A U V / S4 C U D V.
Proof.
unfold on_inter_line_parallel.
intros.
DecompAndAll.
eapply elim_length_ratio_on_line_2.

*****
H7 : not (parallel P Q U V)
H4 : parallel Y R P Q
H5 : Col Y U V
H3 : not (Col R P Q)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (eq (S A U V) F0)
A,C,D,U,V,R,P,Q,Y : Point
*****
not (Col A U V)
+++++
Geometry.
-----
Lemma elim_length_ratio_on_inter_line_parallel_1 : forall A C D U V R P Q Y : Point, on_inter_line_parallel Y R U V P Q -> S A U V <> 0-> C <> D -> parallel A Y C D -> A ** Y / C ** D = S A U V / S4 C U D V.
Proof.
unfold on_inter_line_parallel.
intros.
DecompAndAll.
eapply elim_length_ratio_on_line_2.

*****
H7 : not (parallel P Q U V)
H4 : parallel Y R P Q
H5 : Col Y U V
H3 : not (Col R P Q)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (eq (S A U V) F0)
A,C,D,U,V,R,P,Q,Y : Point
*****
not (eq C D)
+++++
Geometry.
-----
Lemma elim_length_ratio_on_inter_line_parallel_1 : forall A C D U V R P Q Y : Point, on_inter_line_parallel Y R U V P Q -> S A U V <> 0-> C <> D -> parallel A Y C D -> A ** Y / C ** D = S A U V / S4 C U D V.
Proof.
unfold on_inter_line_parallel.
intros.
DecompAndAll.
eapply elim_length_ratio_on_line_2.

*****
H7 : not (parallel P Q U V)
H4 : parallel Y R P Q
H5 : Col Y U V
H3 : not (Col R P Q)
H2 : parallel A Y C D
H1 : not (eq C D)
H0 : not (eq (S A U V) F0)
A,C,D,U,V,R,P,Q,Y : Point
*****
parallel A Y C D
+++++
Geometry.
-----
Lemma elim_length_ratio_on_inter_line_parallel_1 : forall A C D U V R P Q Y : Point, on_inter_line_parallel Y R U V P Q -> S A U V <> 0-> C <> D -> parallel A Y C D -> A ** Y / C ** D = S A U V / S4 C U D V.
Proof.
unfold on_inter_line_parallel.
intros.
DecompAndAll.
eapply elim_length_ratio_on_line_2.

*****

*****

+++++
Qed.
-----
Lemma elim_length_ratio_on_inter_line_parallel_2 :\n    forall A C D U V R P Q Y : Point,\n    on_inter_line_parallel Y R U V P Q ->\n    S A U V = 0 ->\n    C <> D -> \n    Y <> A ->\n    Y <> R ->\n    parallel A Y C D -> \n    A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
-----
Lemma elim_length_ratio_on_inter_line_parallel_2 : forall A C D U V R P Q Y : Point, on_inter_line_parallel Y R U V P Q -> S A U V = 0 -> C <> D -> Y <> A -> Y <> R -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.

*****

*****
forall (A C D U V R P Q Y : Point) (_ : on_inter_line_parallel Y R U V P Q) (_ : eq (S A U V) F0) (_ : not (eq C D)) (_ : not (eq Y A)) (_ : not (eq Y R)) (_ : parallel A Y C D), eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (S4 A P R Q) (S4 C P D Q))
+++++
Proof.
-----
Lemma elim_length_ratio_on_inter_line_parallel_2 : forall A C D U V R P Q Y : Point, on_inter_line_parallel Y R U V P Q -> S A U V = 0 -> C <> D -> Y <> A -> Y <> R -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.

*****

*****
forall (A C D U V R P Q Y : Point) (_ : on_inter_line_parallel Y R U V P Q) (_ : eq (S A U V) F0) (_ : not (eq C D)) (_ : not (eq Y A)) (_ : not (eq Y R)) (_ : parallel A Y C D), eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (S4 A P R Q) (S4 C P D Q))
+++++
unfold on_inter_line_parallel.
-----
Lemma elim_length_ratio_on_inter_line_parallel_2 : forall A C D U V R P Q Y : Point, on_inter_line_parallel Y R U V P Q -> S A U V = 0 -> C <> D -> Y <> A -> Y <> R -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
unfold on_inter_line_parallel.

*****

*****
forall (A C D U V R P Q Y : Point) (_ : and (not (Col R P Q)) (and (Col Y U V) (and (parallel Y R P Q) (not (parallel P Q U V))))) (_ : eq (S A U V) F0) (_ : not (eq C D)) (_ : not (eq Y A)) (_ : not (eq Y R)) (_ : parallel A Y C D), eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (S4 A P R Q) (S4 C P D Q))
+++++
intros.
-----
Lemma elim_length_ratio_on_inter_line_parallel_2 : forall A C D U V R P Q Y : Point, on_inter_line_parallel Y R U V P Q -> S A U V = 0 -> C <> D -> Y <> A -> Y <> R -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
unfold on_inter_line_parallel.
intros.

*****
H4 : parallel A Y C D
H3 : not (eq Y R)
H2 : not (eq Y A)
H1 : not (eq C D)
H0 : eq (S A U V) F0
H : and (not (Col R P Q))\n (and (Col Y U V) (and (parallel Y R P Q) (not (parallel P Q U V))))
A,C,D,U,V,R,P,Q,Y : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (S4 A P R Q) (S4 C P D Q))
+++++
DecompAndAll.
-----
Lemma elim_length_ratio_on_inter_line_parallel_2 : forall A C D U V R P Q Y : Point, on_inter_line_parallel Y R U V P Q -> S A U V = 0 -> C <> D -> Y <> A -> Y <> R -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
unfold on_inter_line_parallel.
intros.
DecompAndAll.

*****
H9 : not (parallel P Q U V)
H6 : parallel Y R P Q
H7 : Col Y U V
H5 : not (Col R P Q)
H4 : parallel A Y C D
H3 : not (eq Y R)
H2 : not (eq Y A)
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,R,P,Q,Y : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (S4 A P R Q) (S4 C P D Q))
+++++
assert (P<>Q).
-----
Lemma elim_length_ratio_on_inter_line_parallel_2 : forall A C D U V R P Q Y : Point, on_inter_line_parallel Y R U V P Q -> S A U V = 0 -> C <> D -> Y <> A -> Y <> R -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
unfold on_inter_line_parallel.
intros.
DecompAndAll.
assert (P<>Q).

*****
H9 : not (parallel P Q U V)
H6 : parallel Y R P Q
H7 : Col Y U V
H5 : not (Col R P Q)
H4 : parallel A Y C D
H3 : not (eq Y R)
H2 : not (eq Y A)
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,R,P,Q,Y : Point
*****
not (eq P Q)
+++++
unfold not.
-----
Lemma elim_length_ratio_on_inter_line_parallel_2 : forall A C D U V R P Q Y : Point, on_inter_line_parallel Y R U V P Q -> S A U V = 0 -> C <> D -> Y <> A -> Y <> R -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
unfold on_inter_line_parallel.
intros.
DecompAndAll.
assert (P<>Q).
unfold not.

*****
H9 : not (parallel P Q U V)
H6 : parallel Y R P Q
H7 : Col Y U V
H5 : not (Col R P Q)
H4 : parallel A Y C D
H3 : not (eq Y R)
H2 : not (eq Y A)
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,R,P,Q,Y : Point
*****
forall _ : eq P Q, False
+++++
intro.
-----
Lemma elim_length_ratio_on_inter_line_parallel_2 : forall A C D U V R P Q Y : Point, on_inter_line_parallel Y R U V P Q -> S A U V = 0 -> C <> D -> Y <> A -> Y <> R -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
unfold on_inter_line_parallel.
intros.
DecompAndAll.
assert (P<>Q).
unfold not.
intro.

*****
H : eq P Q
H9 : not (parallel P Q U V)
H6 : parallel Y R P Q
H7 : Col Y U V
H5 : not (Col R P Q)
H4 : parallel A Y C D
H3 : not (eq Y R)
H2 : not (eq Y A)
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,R,P,Q,Y : Point
*****
False
+++++
subst P.
-----
Lemma elim_length_ratio_on_inter_line_parallel_2 : forall A C D U V R P Q Y : Point, on_inter_line_parallel Y R U V P Q -> S A U V = 0 -> C <> D -> Y <> A -> Y <> R -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
unfold on_inter_line_parallel.
intros.
DecompAndAll.
assert (P<>Q).
unfold not.
intro.
subst P.

*****
H6 : parallel Y R Q Q
H9 : not (parallel Q Q U V)
H7 : Col Y U V
H5 : not (Col R Q Q)
H4 : parallel A Y C D
H3 : not (eq Y R)
H2 : not (eq Y A)
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,R,Q,Y : Point
*****
False
+++++
Geometry.
-----
Lemma elim_length_ratio_on_inter_line_parallel_2 : forall A C D U V R P Q Y : Point, on_inter_line_parallel Y R U V P Q -> S A U V = 0 -> C <> D -> Y <> A -> Y <> R -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
unfold on_inter_line_parallel.
intros.
DecompAndAll.
assert (P<>Q).

*****
H : not (eq P Q)
H9 : not (parallel P Q U V)
H6 : parallel Y R P Q
H7 : Col Y U V
H5 : not (Col R P Q)
H4 : parallel A Y C D
H3 : not (eq Y R)
H2 : not (eq Y A)
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,R,P,Q,Y : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (S4 A P R Q) (S4 C P D Q))
+++++
assert (~ Col A R Y).
-----
Lemma elim_length_ratio_on_inter_line_parallel_2 : forall A C D U V R P Q Y : Point, on_inter_line_parallel Y R U V P Q -> S A U V = 0 -> C <> D -> Y <> A -> Y <> R -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
unfold on_inter_line_parallel.
intros.
DecompAndAll.
assert (P<>Q).
assert (~ Col A R Y).

*****
H : not (eq P Q)
H9 : not (parallel P Q U V)
H6 : parallel Y R P Q
H7 : Col Y U V
H5 : not (Col R P Q)
H4 : parallel A Y C D
H3 : not (eq Y R)
H2 : not (eq Y A)
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,R,P,Q,Y : Point
*****
not (Col A R Y)
+++++
unfold not.
-----
Lemma elim_length_ratio_on_inter_line_parallel_2 : forall A C D U V R P Q Y : Point, on_inter_line_parallel Y R U V P Q -> S A U V = 0 -> C <> D -> Y <> A -> Y <> R -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
unfold on_inter_line_parallel.
intros.
DecompAndAll.
assert (P<>Q).
assert (~ Col A R Y).
unfold not.

*****
H : not (eq P Q)
H9 : not (parallel P Q U V)
H6 : parallel Y R P Q
H7 : Col Y U V
H5 : not (Col R P Q)
H4 : parallel A Y C D
H3 : not (eq Y R)
H2 : not (eq Y A)
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,R,P,Q,Y : Point
*****
forall _ : Col A R Y, False
+++++
intro.
-----
Lemma elim_length_ratio_on_inter_line_parallel_2 : forall A C D U V R P Q Y : Point, on_inter_line_parallel Y R U V P Q -> S A U V = 0 -> C <> D -> Y <> A -> Y <> R -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
unfold on_inter_line_parallel.
intros.
DecompAndAll.
assert (P<>Q).
assert (~ Col A R Y).
unfold not.
intro.

*****
H8 : Col A R Y
H : not (eq P Q)
H9 : not (parallel P Q U V)
H6 : parallel Y R P Q
H7 : Col Y U V
H5 : not (Col R P Q)
H4 : parallel A Y C D
H3 : not (eq Y R)
H2 : not (eq Y A)
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,R,P,Q,Y : Point
*****
False
+++++
assert (U<>V).
-----
Lemma elim_length_ratio_on_inter_line_parallel_2 : forall A C D U V R P Q Y : Point, on_inter_line_parallel Y R U V P Q -> S A U V = 0 -> C <> D -> Y <> A -> Y <> R -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
unfold on_inter_line_parallel.
intros.
DecompAndAll.
assert (P<>Q).
assert (~ Col A R Y).
unfold not.
intro.
assert (U<>V).

*****
H8 : Col A R Y
H : not (eq P Q)
H9 : not (parallel P Q U V)
H6 : parallel Y R P Q
H7 : Col Y U V
H5 : not (Col R P Q)
H4 : parallel A Y C D
H3 : not (eq Y R)
H2 : not (eq Y A)
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,R,P,Q,Y : Point
*****
not (eq U V)
+++++
unfold not.
-----
Lemma elim_length_ratio_on_inter_line_parallel_2 : forall A C D U V R P Q Y : Point, on_inter_line_parallel Y R U V P Q -> S A U V = 0 -> C <> D -> Y <> A -> Y <> R -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
unfold on_inter_line_parallel.
intros.
DecompAndAll.
assert (P<>Q).
assert (~ Col A R Y).
unfold not.
intro.
assert (U<>V).
unfold not.

*****
H8 : Col A R Y
H : not (eq P Q)
H9 : not (parallel P Q U V)
H6 : parallel Y R P Q
H7 : Col Y U V
H5 : not (Col R P Q)
H4 : parallel A Y C D
H3 : not (eq Y R)
H2 : not (eq Y A)
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,R,P,Q,Y : Point
*****
forall _ : eq U V, False
+++++
intro.
-----
Lemma elim_length_ratio_on_inter_line_parallel_2 : forall A C D U V R P Q Y : Point, on_inter_line_parallel Y R U V P Q -> S A U V = 0 -> C <> D -> Y <> A -> Y <> R -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
unfold on_inter_line_parallel.
intros.
DecompAndAll.
assert (P<>Q).
assert (~ Col A R Y).
unfold not.
intro.
assert (U<>V).
unfold not.
intro.

*****
H10 : eq U V
H8 : Col A R Y
H : not (eq P Q)
H9 : not (parallel P Q U V)
H6 : parallel Y R P Q
H7 : Col Y U V
H5 : not (Col R P Q)
H4 : parallel A Y C D
H3 : not (eq Y R)
H2 : not (eq Y A)
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,R,P,Q,Y : Point
*****
False
+++++
subst U.
-----
Lemma elim_length_ratio_on_inter_line_parallel_2 : forall A C D U V R P Q Y : Point, on_inter_line_parallel Y R U V P Q -> S A U V = 0 -> C <> D -> Y <> A -> Y <> R -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
unfold on_inter_line_parallel.
intros.
DecompAndAll.
assert (P<>Q).
assert (~ Col A R Y).
unfold not.
intro.
assert (U<>V).
unfold not.
intro.
subst U.

*****
H8 : Col A R Y
H : not (eq P Q)
H9 : not (parallel P Q V V)
H6 : parallel Y R P Q
H7 : Col Y V V
H5 : not (Col R P Q)
H4 : parallel A Y C D
H3 : not (eq Y R)
H2 : not (eq Y A)
H1 : not (eq C D)
H0 : eq (S A V V) F0
A,C,D,V,R,P,Q,Y : Point
*****
False
+++++
Geometry.
-----
Lemma elim_length_ratio_on_inter_line_parallel_2 : forall A C D U V R P Q Y : Point, on_inter_line_parallel Y R U V P Q -> S A U V = 0 -> C <> D -> Y <> A -> Y <> R -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
unfold on_inter_line_parallel.
intros.
DecompAndAll.
assert (P<>Q).
assert (~ Col A R Y).
unfold not.
intro.
assert (U<>V).

*****
H10 : not (eq U V)
H8 : Col A R Y
H : not (eq P Q)
H9 : not (parallel P Q U V)
H6 : parallel Y R P Q
H7 : Col Y U V
H5 : not (Col R P Q)
H4 : parallel A Y C D
H3 : not (eq Y R)
H2 : not (eq Y A)
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,R,P,Q,Y : Point
*****
False
+++++
assert (Col U A Y).
-----
Lemma elim_length_ratio_on_inter_line_parallel_2 : forall A C D U V R P Q Y : Point, on_inter_line_parallel Y R U V P Q -> S A U V = 0 -> C <> D -> Y <> A -> Y <> R -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
unfold on_inter_line_parallel.
intros.
DecompAndAll.
assert (P<>Q).
assert (~ Col A R Y).
unfold not.
intro.
assert (U<>V).
assert (Col U A Y).

*****
H10 : not (eq U V)
H8 : Col A R Y
H : not (eq P Q)
H9 : not (parallel P Q U V)
H6 : parallel Y R P Q
H7 : Col Y U V
H5 : not (Col R P Q)
H4 : parallel A Y C D
H3 : not (eq Y R)
H2 : not (eq Y A)
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,R,P,Q,Y : Point
*****
Col U A Y
+++++
eapply col_trans_1 with (B:=V).
-----
Lemma elim_length_ratio_on_inter_line_parallel_2 : forall A C D U V R P Q Y : Point, on_inter_line_parallel Y R U V P Q -> S A U V = 0 -> C <> D -> Y <> A -> Y <> R -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
unfold on_inter_line_parallel.
intros.
DecompAndAll.
assert (P<>Q).
assert (~ Col A R Y).
unfold not.
intro.
assert (U<>V).
assert (Col U A Y).
eapply col_trans_1 with (B:=V).

*****
H10 : not (eq U V)
H8 : Col A R Y
H : not (eq P Q)
H9 : not (parallel P Q U V)
H6 : parallel Y R P Q
H7 : Col Y U V
H5 : not (Col R P Q)
H4 : parallel A Y C D
H3 : not (eq Y R)
H2 : not (eq Y A)
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,R,P,Q,Y : Point
*****
not (eq U V)
+++++
Geometry.
-----
Lemma elim_length_ratio_on_inter_line_parallel_2 : forall A C D U V R P Q Y : Point, on_inter_line_parallel Y R U V P Q -> S A U V = 0 -> C <> D -> Y <> A -> Y <> R -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
unfold on_inter_line_parallel.
intros.
DecompAndAll.
assert (P<>Q).
assert (~ Col A R Y).
unfold not.
intro.
assert (U<>V).
assert (Col U A Y).
eapply col_trans_1 with (B:=V).

*****
H10 : not (eq U V)
H8 : Col A R Y
H : not (eq P Q)
H9 : not (parallel P Q U V)
H6 : parallel Y R P Q
H7 : Col Y U V
H5 : not (Col R P Q)
H4 : parallel A Y C D
H3 : not (eq Y R)
H2 : not (eq Y A)
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,R,P,Q,Y : Point
*****
Col U V A
+++++
Geometry.
-----
Lemma elim_length_ratio_on_inter_line_parallel_2 : forall A C D U V R P Q Y : Point, on_inter_line_parallel Y R U V P Q -> S A U V = 0 -> C <> D -> Y <> A -> Y <> R -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
unfold on_inter_line_parallel.
intros.
DecompAndAll.
assert (P<>Q).
assert (~ Col A R Y).
unfold not.
intro.
assert (U<>V).
assert (Col U A Y).
eapply col_trans_1 with (B:=V).

*****
H10 : not (eq U V)
H8 : Col A R Y
H : not (eq P Q)
H9 : not (parallel P Q U V)
H6 : parallel Y R P Q
H7 : Col Y U V
H5 : not (Col R P Q)
H4 : parallel A Y C D
H3 : not (eq Y R)
H2 : not (eq Y A)
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,R,P,Q,Y : Point
*****
Col U V Y
+++++
Geometry.
-----
Lemma elim_length_ratio_on_inter_line_parallel_2 : forall A C D U V R P Q Y : Point, on_inter_line_parallel Y R U V P Q -> S A U V = 0 -> C <> D -> Y <> A -> Y <> R -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
unfold on_inter_line_parallel.
intros.
DecompAndAll.
assert (P<>Q).
assert (~ Col A R Y).
unfold not.
intro.
assert (U<>V).
assert (Col U A Y).

*****
H11 : Col U A Y
H10 : not (eq U V)
H8 : Col A R Y
H : not (eq P Q)
H9 : not (parallel P Q U V)
H6 : parallel Y R P Q
H7 : Col Y U V
H5 : not (Col R P Q)
H4 : parallel A Y C D
H3 : not (eq Y R)
H2 : not (eq Y A)
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,R,P,Q,Y : Point
*****
False
+++++
assert (Col Y R U).
-----
Lemma elim_length_ratio_on_inter_line_parallel_2 : forall A C D U V R P Q Y : Point, on_inter_line_parallel Y R U V P Q -> S A U V = 0 -> C <> D -> Y <> A -> Y <> R -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
unfold on_inter_line_parallel.
intros.
DecompAndAll.
assert (P<>Q).
assert (~ Col A R Y).
unfold not.
intro.
assert (U<>V).
assert (Col U A Y).
assert (Col Y R U).

*****
H11 : Col U A Y
H10 : not (eq U V)
H8 : Col A R Y
H : not (eq P Q)
H9 : not (parallel P Q U V)
H6 : parallel Y R P Q
H7 : Col Y U V
H5 : not (Col R P Q)
H4 : parallel A Y C D
H3 : not (eq Y R)
H2 : not (eq Y A)
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,R,P,Q,Y : Point
*****
Col Y R U
+++++
eapply col_trans_1 with (B:=A).
-----
Lemma elim_length_ratio_on_inter_line_parallel_2 : forall A C D U V R P Q Y : Point, on_inter_line_parallel Y R U V P Q -> S A U V = 0 -> C <> D -> Y <> A -> Y <> R -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
unfold on_inter_line_parallel.
intros.
DecompAndAll.
assert (P<>Q).
assert (~ Col A R Y).
unfold not.
intro.
assert (U<>V).
assert (Col U A Y).
assert (Col Y R U).
eapply col_trans_1 with (B:=A).

*****
H11 : Col U A Y
H10 : not (eq U V)
H8 : Col A R Y
H : not (eq P Q)
H9 : not (parallel P Q U V)
H6 : parallel Y R P Q
H7 : Col Y U V
H5 : not (Col R P Q)
H4 : parallel A Y C D
H3 : not (eq Y R)
H2 : not (eq Y A)
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,R,P,Q,Y : Point
*****
not (eq Y A)
+++++
Geometry.
-----
Lemma elim_length_ratio_on_inter_line_parallel_2 : forall A C D U V R P Q Y : Point, on_inter_line_parallel Y R U V P Q -> S A U V = 0 -> C <> D -> Y <> A -> Y <> R -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
unfold on_inter_line_parallel.
intros.
DecompAndAll.
assert (P<>Q).
assert (~ Col A R Y).
unfold not.
intro.
assert (U<>V).
assert (Col U A Y).
assert (Col Y R U).
eapply col_trans_1 with (B:=A).

*****
H11 : Col U A Y
H10 : not (eq U V)
H8 : Col A R Y
H : not (eq P Q)
H9 : not (parallel P Q U V)
H6 : parallel Y R P Q
H7 : Col Y U V
H5 : not (Col R P Q)
H4 : parallel A Y C D
H3 : not (eq Y R)
H2 : not (eq Y A)
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,R,P,Q,Y : Point
*****
Col Y A R
+++++
Geometry.
-----
Lemma elim_length_ratio_on_inter_line_parallel_2 : forall A C D U V R P Q Y : Point, on_inter_line_parallel Y R U V P Q -> S A U V = 0 -> C <> D -> Y <> A -> Y <> R -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
unfold on_inter_line_parallel.
intros.
DecompAndAll.
assert (P<>Q).
assert (~ Col A R Y).
unfold not.
intro.
assert (U<>V).
assert (Col U A Y).
assert (Col Y R U).
eapply col_trans_1 with (B:=A).

*****
H11 : Col U A Y
H10 : not (eq U V)
H8 : Col A R Y
H : not (eq P Q)
H9 : not (parallel P Q U V)
H6 : parallel Y R P Q
H7 : Col Y U V
H5 : not (Col R P Q)
H4 : parallel A Y C D
H3 : not (eq Y R)
H2 : not (eq Y A)
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,R,P,Q,Y : Point
*****
Col Y A U
+++++
Geometry.
-----
Lemma elim_length_ratio_on_inter_line_parallel_2 : forall A C D U V R P Q Y : Point, on_inter_line_parallel Y R U V P Q -> S A U V = 0 -> C <> D -> Y <> A -> Y <> R -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
unfold on_inter_line_parallel.
intros.
DecompAndAll.
assert (P<>Q).
assert (~ Col A R Y).
unfold not.
intro.
assert (U<>V).
assert (Col U A Y).
assert (Col Y R U).

*****
H12 : Col Y R U
H11 : Col U A Y
H10 : not (eq U V)
H8 : Col A R Y
H : not (eq P Q)
H9 : not (parallel P Q U V)
H6 : parallel Y R P Q
H7 : Col Y U V
H5 : not (Col R P Q)
H4 : parallel A Y C D
H3 : not (eq Y R)
H2 : not (eq Y A)
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,R,P,Q,Y : Point
*****
False
+++++
assert (parallel P Q Y U).
-----
Lemma elim_length_ratio_on_inter_line_parallel_2 : forall A C D U V R P Q Y : Point, on_inter_line_parallel Y R U V P Q -> S A U V = 0 -> C <> D -> Y <> A -> Y <> R -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
unfold on_inter_line_parallel.
intros.
DecompAndAll.
assert (P<>Q).
assert (~ Col A R Y).
unfold not.
intro.
assert (U<>V).
assert (Col U A Y).
assert (Col Y R U).
assert (parallel P Q Y U).

*****
H12 : Col Y R U
H11 : Col U A Y
H10 : not (eq U V)
H8 : Col A R Y
H : not (eq P Q)
H9 : not (parallel P Q U V)
H6 : parallel Y R P Q
H7 : Col Y U V
H5 : not (Col R P Q)
H4 : parallel A Y C D
H3 : not (eq Y R)
H2 : not (eq Y A)
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,R,P,Q,Y : Point
*****
parallel P Q Y U
+++++
eapply col_par_par.
-----
Lemma elim_length_ratio_on_inter_line_parallel_2 : forall A C D U V R P Q Y : Point, on_inter_line_parallel Y R U V P Q -> S A U V = 0 -> C <> D -> Y <> A -> Y <> R -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
unfold on_inter_line_parallel.
intros.
DecompAndAll.
assert (P<>Q).
assert (~ Col A R Y).
unfold not.
intro.
assert (U<>V).
assert (Col U A Y).
assert (Col Y R U).
assert (parallel P Q Y U).
eapply col_par_par.

*****
H12 : Col Y R U
H11 : Col U A Y
H10 : not (eq U V)
H8 : Col A R Y
H : not (eq P Q)
H9 : not (parallel P Q U V)
H6 : parallel Y R P Q
H7 : Col Y U V
H5 : not (Col R P Q)
H4 : parallel A Y C D
H3 : not (eq Y R)
H2 : not (eq Y A)
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,R,P,Q,Y : Point
*****
not (eq Y ?D)
+++++
apply H3.
-----
Lemma elim_length_ratio_on_inter_line_parallel_2 : forall A C D U V R P Q Y : Point, on_inter_line_parallel Y R U V P Q -> S A U V = 0 -> C <> D -> Y <> A -> Y <> R -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
unfold on_inter_line_parallel.
intros.
DecompAndAll.
assert (P<>Q).
assert (~ Col A R Y).
unfold not.
intro.
assert (U<>V).
assert (Col U A Y).
assert (Col Y R U).
assert (parallel P Q Y U).
eapply col_par_par.

*****
H12 : Col Y R U
H11 : Col U A Y
H10 : not (eq U V)
H8 : Col A R Y
H : not (eq P Q)
H9 : not (parallel P Q U V)
H6 : parallel Y R P Q
H7 : Col Y U V
H5 : not (Col R P Q)
H4 : parallel A Y C D
H3 : not (eq Y R)
H2 : not (eq Y A)
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,R,P,Q,Y : Point
*****
parallel P Q Y R
+++++
Geometry.
-----
Lemma elim_length_ratio_on_inter_line_parallel_2 : forall A C D U V R P Q Y : Point, on_inter_line_parallel Y R U V P Q -> S A U V = 0 -> C <> D -> Y <> A -> Y <> R -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
unfold on_inter_line_parallel.
intros.
DecompAndAll.
assert (P<>Q).
assert (~ Col A R Y).
unfold not.
intro.
assert (U<>V).
assert (Col U A Y).
assert (Col Y R U).
assert (parallel P Q Y U).
eapply col_par_par.

*****
H12 : Col Y R U
H11 : Col U A Y
H10 : not (eq U V)
H8 : Col A R Y
H : not (eq P Q)
H9 : not (parallel P Q U V)
H6 : parallel Y R P Q
H7 : Col Y U V
H5 : not (Col R P Q)
H4 : parallel A Y C D
H3 : not (eq Y R)
H2 : not (eq Y A)
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,R,P,Q,Y : Point
*****
Col Y R U
+++++
Geometry.
-----
Lemma elim_length_ratio_on_inter_line_parallel_2 : forall A C D U V R P Q Y : Point, on_inter_line_parallel Y R U V P Q -> S A U V = 0 -> C <> D -> Y <> A -> Y <> R -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
unfold on_inter_line_parallel.
intros.
DecompAndAll.
assert (P<>Q).
assert (~ Col A R Y).
unfold not.
intro.
assert (U<>V).
assert (Col U A Y).
assert (Col Y R U).
assert (parallel P Q Y U).

*****
H13 : parallel P Q Y U
H12 : Col Y R U
H11 : Col U A Y
H10 : not (eq U V)
H8 : Col A R Y
H : not (eq P Q)
H9 : not (parallel P Q U V)
H6 : parallel Y R P Q
H7 : Col Y U V
H5 : not (Col R P Q)
H4 : parallel A Y C D
H3 : not (eq Y R)
H2 : not (eq Y A)
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,R,P,Q,Y : Point
*****
False
+++++
assert (U <> Y).
-----
Lemma elim_length_ratio_on_inter_line_parallel_2 : forall A C D U V R P Q Y : Point, on_inter_line_parallel Y R U V P Q -> S A U V = 0 -> C <> D -> Y <> A -> Y <> R -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
unfold on_inter_line_parallel.
intros.
DecompAndAll.
assert (P<>Q).
assert (~ Col A R Y).
unfold not.
intro.
assert (U<>V).
assert (Col U A Y).
assert (Col Y R U).
assert (parallel P Q Y U).
assert (U <> Y).

*****
H13 : parallel P Q Y U
H12 : Col Y R U
H11 : Col U A Y
H10 : not (eq U V)
H8 : Col A R Y
H : not (eq P Q)
H9 : not (parallel P Q U V)
H6 : parallel Y R P Q
H7 : Col Y U V
H5 : not (Col R P Q)
H4 : parallel A Y C D
H3 : not (eq Y R)
H2 : not (eq Y A)
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,R,P,Q,Y : Point
*****
not (eq U Y)
+++++
unfold not.
-----
Lemma elim_length_ratio_on_inter_line_parallel_2 : forall A C D U V R P Q Y : Point, on_inter_line_parallel Y R U V P Q -> S A U V = 0 -> C <> D -> Y <> A -> Y <> R -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
unfold on_inter_line_parallel.
intros.
DecompAndAll.
assert (P<>Q).
assert (~ Col A R Y).
unfold not.
intro.
assert (U<>V).
assert (Col U A Y).
assert (Col Y R U).
assert (parallel P Q Y U).
assert (U <> Y).
unfold not.

*****
H13 : parallel P Q Y U
H12 : Col Y R U
H11 : Col U A Y
H10 : not (eq U V)
H8 : Col A R Y
H : not (eq P Q)
H9 : not (parallel P Q U V)
H6 : parallel Y R P Q
H7 : Col Y U V
H5 : not (Col R P Q)
H4 : parallel A Y C D
H3 : not (eq Y R)
H2 : not (eq Y A)
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,R,P,Q,Y : Point
*****
forall _ : eq U Y, False
+++++
intro.
-----
Lemma elim_length_ratio_on_inter_line_parallel_2 : forall A C D U V R P Q Y : Point, on_inter_line_parallel Y R U V P Q -> S A U V = 0 -> C <> D -> Y <> A -> Y <> R -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
unfold on_inter_line_parallel.
intros.
DecompAndAll.
assert (P<>Q).
assert (~ Col A R Y).
unfold not.
intro.
assert (U<>V).
assert (Col U A Y).
assert (Col Y R U).
assert (parallel P Q Y U).
assert (U <> Y).
unfold not.
intro.

*****
H14 : eq U Y
H13 : parallel P Q Y U
H12 : Col Y R U
H11 : Col U A Y
H10 : not (eq U V)
H8 : Col A R Y
H : not (eq P Q)
H9 : not (parallel P Q U V)
H6 : parallel Y R P Q
H7 : Col Y U V
H5 : not (Col R P Q)
H4 : parallel A Y C D
H3 : not (eq Y R)
H2 : not (eq Y A)
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,R,P,Q,Y : Point
*****
False
+++++
subst Y.
-----
Lemma elim_length_ratio_on_inter_line_parallel_2 : forall A C D U V R P Q Y : Point, on_inter_line_parallel Y R U V P Q -> S A U V = 0 -> C <> D -> Y <> A -> Y <> R -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
unfold on_inter_line_parallel.
intros.
DecompAndAll.
assert (P<>Q).
assert (~ Col A R Y).
unfold not.
intro.
assert (U<>V).
assert (Col U A Y).
assert (Col Y R U).
assert (parallel P Q Y U).
assert (U <> Y).
unfold not.
intro.
subst Y.

*****
H11 : Col U A U
H12 : Col U R U
H13 : parallel P Q U U
H10 : not (eq U V)
H8 : Col A R U
H : not (eq P Q)
H9 : not (parallel P Q U V)
H7 : Col U U V
H6 : parallel U R P Q
H5 : not (Col R P Q)
H2 : not (eq U A)
H3 : not (eq U R)
H4 : parallel A U C D
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,R,P,Q : Point
*****
False
+++++
clear H13 H12 H11 H7.
-----
Lemma elim_length_ratio_on_inter_line_parallel_2 : forall A C D U V R P Q Y : Point, on_inter_line_parallel Y R U V P Q -> S A U V = 0 -> C <> D -> Y <> A -> Y <> R -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
unfold on_inter_line_parallel.
intros.
DecompAndAll.
assert (P<>Q).
assert (~ Col A R Y).
unfold not.
intro.
assert (U<>V).
assert (Col U A Y).
assert (Col Y R U).
assert (parallel P Q Y U).
assert (U <> Y).
unfold not.
intro.
subst Y.
clear H13 H12 H11 H7.

*****
H10 : not (eq U V)
H8 : Col A R U
H : not (eq P Q)
H9 : not (parallel P Q U V)
H6 : parallel U R P Q
H5 : not (Col R P Q)
H2 : not (eq U A)
H3 : not (eq U R)
H4 : parallel A U C D
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,R,P,Q : Point
*****
False
+++++
assert (parallel P Q U A).
-----
Lemma elim_length_ratio_on_inter_line_parallel_2 : forall A C D U V R P Q Y : Point, on_inter_line_parallel Y R U V P Q -> S A U V = 0 -> C <> D -> Y <> A -> Y <> R -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
unfold on_inter_line_parallel.
intros.
DecompAndAll.
assert (P<>Q).
assert (~ Col A R Y).
unfold not.
intro.
assert (U<>V).
assert (Col U A Y).
assert (Col Y R U).
assert (parallel P Q Y U).
assert (U <> Y).
unfold not.
intro.
subst Y.
clear H13 H12 H11 H7.
assert (parallel P Q U A).

*****
H10 : not (eq U V)
H8 : Col A R U
H : not (eq P Q)
H9 : not (parallel P Q U V)
H6 : parallel U R P Q
H5 : not (Col R P Q)
H2 : not (eq U A)
H3 : not (eq U R)
H4 : parallel A U C D
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,R,P,Q : Point
*****
parallel P Q U A
+++++
eapply col_par_par.
-----
Lemma elim_length_ratio_on_inter_line_parallel_2 : forall A C D U V R P Q Y : Point, on_inter_line_parallel Y R U V P Q -> S A U V = 0 -> C <> D -> Y <> A -> Y <> R -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
unfold on_inter_line_parallel.
intros.
DecompAndAll.
assert (P<>Q).
assert (~ Col A R Y).
unfold not.
intro.
assert (U<>V).
assert (Col U A Y).
assert (Col Y R U).
assert (parallel P Q Y U).
assert (U <> Y).
unfold not.
intro.
subst Y.
clear H13 H12 H11 H7.
assert (parallel P Q U A).
eapply col_par_par.

*****
H10 : not (eq U V)
H8 : Col A R U
H : not (eq P Q)
H9 : not (parallel P Q U V)
H6 : parallel U R P Q
H5 : not (Col R P Q)
H2 : not (eq U A)
H3 : not (eq U R)
H4 : parallel A U C D
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,R,P,Q : Point
*****
not (eq U ?D)
+++++
apply H3.
-----
Lemma elim_length_ratio_on_inter_line_parallel_2 : forall A C D U V R P Q Y : Point, on_inter_line_parallel Y R U V P Q -> S A U V = 0 -> C <> D -> Y <> A -> Y <> R -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
unfold on_inter_line_parallel.
intros.
DecompAndAll.
assert (P<>Q).
assert (~ Col A R Y).
unfold not.
intro.
assert (U<>V).
assert (Col U A Y).
assert (Col Y R U).
assert (parallel P Q Y U).
assert (U <> Y).
unfold not.
intro.
subst Y.
clear H13 H12 H11 H7.
assert (parallel P Q U A).
eapply col_par_par.

*****
H10 : not (eq U V)
H8 : Col A R U
H : not (eq P Q)
H9 : not (parallel P Q U V)
H6 : parallel U R P Q
H5 : not (Col R P Q)
H2 : not (eq U A)
H3 : not (eq U R)
H4 : parallel A U C D
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,R,P,Q : Point
*****
parallel P Q U R
+++++
Geometry.
-----
Lemma elim_length_ratio_on_inter_line_parallel_2 : forall A C D U V R P Q Y : Point, on_inter_line_parallel Y R U V P Q -> S A U V = 0 -> C <> D -> Y <> A -> Y <> R -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
unfold on_inter_line_parallel.
intros.
DecompAndAll.
assert (P<>Q).
assert (~ Col A R Y).
unfold not.
intro.
assert (U<>V).
assert (Col U A Y).
assert (Col Y R U).
assert (parallel P Q Y U).
assert (U <> Y).
unfold not.
intro.
subst Y.
clear H13 H12 H11 H7.
assert (parallel P Q U A).
eapply col_par_par.

*****
H10 : not (eq U V)
H8 : Col A R U
H : not (eq P Q)
H9 : not (parallel P Q U V)
H6 : parallel U R P Q
H5 : not (Col R P Q)
H2 : not (eq U A)
H3 : not (eq U R)
H4 : parallel A U C D
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,R,P,Q : Point
*****
Col U R A
+++++
Geometry.
-----
Lemma elim_length_ratio_on_inter_line_parallel_2 : forall A C D U V R P Q Y : Point, on_inter_line_parallel Y R U V P Q -> S A U V = 0 -> C <> D -> Y <> A -> Y <> R -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
unfold on_inter_line_parallel.
intros.
DecompAndAll.
assert (P<>Q).
assert (~ Col A R Y).
unfold not.
intro.
assert (U<>V).
assert (Col U A Y).
assert (Col Y R U).
assert (parallel P Q Y U).
assert (U <> Y).
unfold not.
intro.
subst Y.
clear H13 H12 H11 H7.
assert (parallel P Q U A).

*****
H7 : parallel P Q U A
H10 : not (eq U V)
H8 : Col A R U
H : not (eq P Q)
H9 : not (parallel P Q U V)
H6 : parallel U R P Q
H5 : not (Col R P Q)
H2 : not (eq U A)
H3 : not (eq U R)
H4 : parallel A U C D
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,R,P,Q : Point
*****
False
+++++
assert (parallel P Q U V).
-----
Lemma elim_length_ratio_on_inter_line_parallel_2 : forall A C D U V R P Q Y : Point, on_inter_line_parallel Y R U V P Q -> S A U V = 0 -> C <> D -> Y <> A -> Y <> R -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
unfold on_inter_line_parallel.
intros.
DecompAndAll.
assert (P<>Q).
assert (~ Col A R Y).
unfold not.
intro.
assert (U<>V).
assert (Col U A Y).
assert (Col Y R U).
assert (parallel P Q Y U).
assert (U <> Y).
unfold not.
intro.
subst Y.
clear H13 H12 H11 H7.
assert (parallel P Q U A).
assert (parallel P Q U V).

*****
H7 : parallel P Q U A
H10 : not (eq U V)
H8 : Col A R U
H : not (eq P Q)
H9 : not (parallel P Q U V)
H6 : parallel U R P Q
H5 : not (Col R P Q)
H2 : not (eq U A)
H3 : not (eq U R)
H4 : parallel A U C D
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,R,P,Q : Point
*****
parallel P Q U V
+++++
eapply col_par_par.
-----
Lemma elim_length_ratio_on_inter_line_parallel_2 : forall A C D U V R P Q Y : Point, on_inter_line_parallel Y R U V P Q -> S A U V = 0 -> C <> D -> Y <> A -> Y <> R -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
unfold on_inter_line_parallel.
intros.
DecompAndAll.
assert (P<>Q).
assert (~ Col A R Y).
unfold not.
intro.
assert (U<>V).
assert (Col U A Y).
assert (Col Y R U).
assert (parallel P Q Y U).
assert (U <> Y).
unfold not.
intro.
subst Y.
clear H13 H12 H11 H7.
assert (parallel P Q U A).
assert (parallel P Q U V).
eapply col_par_par.

*****
H7 : parallel P Q U A
H10 : not (eq U V)
H8 : Col A R U
H : not (eq P Q)
H9 : not (parallel P Q U V)
H6 : parallel U R P Q
H5 : not (Col R P Q)
H2 : not (eq U A)
H3 : not (eq U R)
H4 : parallel A U C D
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,R,P,Q : Point
*****
not (eq U ?D)
+++++
apply H2.
-----
Lemma elim_length_ratio_on_inter_line_parallel_2 : forall A C D U V R P Q Y : Point, on_inter_line_parallel Y R U V P Q -> S A U V = 0 -> C <> D -> Y <> A -> Y <> R -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
unfold on_inter_line_parallel.
intros.
DecompAndAll.
assert (P<>Q).
assert (~ Col A R Y).
unfold not.
intro.
assert (U<>V).
assert (Col U A Y).
assert (Col Y R U).
assert (parallel P Q Y U).
assert (U <> Y).
unfold not.
intro.
subst Y.
clear H13 H12 H11 H7.
assert (parallel P Q U A).
assert (parallel P Q U V).
eapply col_par_par.

*****
H7 : parallel P Q U A
H10 : not (eq U V)
H8 : Col A R U
H : not (eq P Q)
H9 : not (parallel P Q U V)
H6 : parallel U R P Q
H5 : not (Col R P Q)
H2 : not (eq U A)
H3 : not (eq U R)
H4 : parallel A U C D
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,R,P,Q : Point
*****
parallel P Q U A
+++++
Geometry.
-----
Lemma elim_length_ratio_on_inter_line_parallel_2 : forall A C D U V R P Q Y : Point, on_inter_line_parallel Y R U V P Q -> S A U V = 0 -> C <> D -> Y <> A -> Y <> R -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
unfold on_inter_line_parallel.
intros.
DecompAndAll.
assert (P<>Q).
assert (~ Col A R Y).
unfold not.
intro.
assert (U<>V).
assert (Col U A Y).
assert (Col Y R U).
assert (parallel P Q Y U).
assert (U <> Y).
unfold not.
intro.
subst Y.
clear H13 H12 H11 H7.
assert (parallel P Q U A).
assert (parallel P Q U V).
eapply col_par_par.

*****
H7 : parallel P Q U A
H10 : not (eq U V)
H8 : Col A R U
H : not (eq P Q)
H9 : not (parallel P Q U V)
H6 : parallel U R P Q
H5 : not (Col R P Q)
H2 : not (eq U A)
H3 : not (eq U R)
H4 : parallel A U C D
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,R,P,Q : Point
*****
Col U A V
+++++
Geometry.
-----
Lemma elim_length_ratio_on_inter_line_parallel_2 : forall A C D U V R P Q Y : Point, on_inter_line_parallel Y R U V P Q -> S A U V = 0 -> C <> D -> Y <> A -> Y <> R -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
unfold on_inter_line_parallel.
intros.
DecompAndAll.
assert (P<>Q).
assert (~ Col A R Y).
unfold not.
intro.
assert (U<>V).
assert (Col U A Y).
assert (Col Y R U).
assert (parallel P Q Y U).
assert (U <> Y).
unfold not.
intro.
subst Y.
clear H13 H12 H11 H7.
assert (parallel P Q U A).
assert (parallel P Q U V).

*****
H11 : parallel P Q U V
H7 : parallel P Q U A
H10 : not (eq U V)
H8 : Col A R U
H : not (eq P Q)
H9 : not (parallel P Q U V)
H6 : parallel U R P Q
H5 : not (Col R P Q)
H2 : not (eq U A)
H3 : not (eq U R)
H4 : parallel A U C D
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,R,P,Q : Point
*****
False
+++++
intuition.
-----
Lemma elim_length_ratio_on_inter_line_parallel_2 : forall A C D U V R P Q Y : Point, on_inter_line_parallel Y R U V P Q -> S A U V = 0 -> C <> D -> Y <> A -> Y <> R -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
unfold on_inter_line_parallel.
intros.
DecompAndAll.
assert (P<>Q).
assert (~ Col A R Y).
unfold not.
intro.
assert (U<>V).
assert (Col U A Y).
assert (Col Y R U).
assert (parallel P Q Y U).
assert (U <> Y).

*****
H14 : not (eq U Y)
H13 : parallel P Q Y U
H12 : Col Y R U
H11 : Col U A Y
H10 : not (eq U V)
H8 : Col A R Y
H : not (eq P Q)
H9 : not (parallel P Q U V)
H6 : parallel Y R P Q
H7 : Col Y U V
H5 : not (Col R P Q)
H4 : parallel A Y C D
H3 : not (eq Y R)
H2 : not (eq Y A)
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,R,P,Q,Y : Point
*****
False
+++++
assert (parallel P Q U V).
-----
Lemma elim_length_ratio_on_inter_line_parallel_2 : forall A C D U V R P Q Y : Point, on_inter_line_parallel Y R U V P Q -> S A U V = 0 -> C <> D -> Y <> A -> Y <> R -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
unfold on_inter_line_parallel.
intros.
DecompAndAll.
assert (P<>Q).
assert (~ Col A R Y).
unfold not.
intro.
assert (U<>V).
assert (Col U A Y).
assert (Col Y R U).
assert (parallel P Q Y U).
assert (U <> Y).
assert (parallel P Q U V).

*****
H14 : not (eq U Y)
H13 : parallel P Q Y U
H12 : Col Y R U
H11 : Col U A Y
H10 : not (eq U V)
H8 : Col A R Y
H : not (eq P Q)
H9 : not (parallel P Q U V)
H6 : parallel Y R P Q
H7 : Col Y U V
H5 : not (Col R P Q)
H4 : parallel A Y C D
H3 : not (eq Y R)
H2 : not (eq Y A)
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,R,P,Q,Y : Point
*****
parallel P Q U V
+++++
eapply col_par_par.
-----
Lemma elim_length_ratio_on_inter_line_parallel_2 : forall A C D U V R P Q Y : Point, on_inter_line_parallel Y R U V P Q -> S A U V = 0 -> C <> D -> Y <> A -> Y <> R -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
unfold on_inter_line_parallel.
intros.
DecompAndAll.
assert (P<>Q).
assert (~ Col A R Y).
unfold not.
intro.
assert (U<>V).
assert (Col U A Y).
assert (Col Y R U).
assert (parallel P Q Y U).
assert (U <> Y).
assert (parallel P Q U V).
eapply col_par_par.

*****
H14 : not (eq U Y)
H13 : parallel P Q Y U
H12 : Col Y R U
H11 : Col U A Y
H10 : not (eq U V)
H8 : Col A R Y
H : not (eq P Q)
H9 : not (parallel P Q U V)
H6 : parallel Y R P Q
H7 : Col Y U V
H5 : not (Col R P Q)
H4 : parallel A Y C D
H3 : not (eq Y R)
H2 : not (eq Y A)
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,R,P,Q,Y : Point
*****
not (eq U ?D)
+++++
apply H14.
-----
Lemma elim_length_ratio_on_inter_line_parallel_2 : forall A C D U V R P Q Y : Point, on_inter_line_parallel Y R U V P Q -> S A U V = 0 -> C <> D -> Y <> A -> Y <> R -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
unfold on_inter_line_parallel.
intros.
DecompAndAll.
assert (P<>Q).
assert (~ Col A R Y).
unfold not.
intro.
assert (U<>V).
assert (Col U A Y).
assert (Col Y R U).
assert (parallel P Q Y U).
assert (U <> Y).
assert (parallel P Q U V).
eapply col_par_par.

*****
H14 : not (eq U Y)
H13 : parallel P Q Y U
H12 : Col Y R U
H11 : Col U A Y
H10 : not (eq U V)
H8 : Col A R Y
H : not (eq P Q)
H9 : not (parallel P Q U V)
H6 : parallel Y R P Q
H7 : Col Y U V
H5 : not (Col R P Q)
H4 : parallel A Y C D
H3 : not (eq Y R)
H2 : not (eq Y A)
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,R,P,Q,Y : Point
*****
parallel P Q U Y
+++++
Geometry.
-----
Lemma elim_length_ratio_on_inter_line_parallel_2 : forall A C D U V R P Q Y : Point, on_inter_line_parallel Y R U V P Q -> S A U V = 0 -> C <> D -> Y <> A -> Y <> R -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
unfold on_inter_line_parallel.
intros.
DecompAndAll.
assert (P<>Q).
assert (~ Col A R Y).
unfold not.
intro.
assert (U<>V).
assert (Col U A Y).
assert (Col Y R U).
assert (parallel P Q Y U).
assert (U <> Y).
assert (parallel P Q U V).
eapply col_par_par.

*****
H14 : not (eq U Y)
H13 : parallel P Q Y U
H12 : Col Y R U
H11 : Col U A Y
H10 : not (eq U V)
H8 : Col A R Y
H : not (eq P Q)
H9 : not (parallel P Q U V)
H6 : parallel Y R P Q
H7 : Col Y U V
H5 : not (Col R P Q)
H4 : parallel A Y C D
H3 : not (eq Y R)
H2 : not (eq Y A)
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,R,P,Q,Y : Point
*****
Col U Y V
+++++
Geometry.
-----
Lemma elim_length_ratio_on_inter_line_parallel_2 : forall A C D U V R P Q Y : Point, on_inter_line_parallel Y R U V P Q -> S A U V = 0 -> C <> D -> Y <> A -> Y <> R -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
unfold on_inter_line_parallel.
intros.
DecompAndAll.
assert (P<>Q).
assert (~ Col A R Y).
unfold not.
intro.
assert (U<>V).
assert (Col U A Y).
assert (Col Y R U).
assert (parallel P Q Y U).
assert (U <> Y).
assert (parallel P Q U V).

*****
H15 : parallel P Q U V
H14 : not (eq U Y)
H13 : parallel P Q Y U
H12 : Col Y R U
H11 : Col U A Y
H10 : not (eq U V)
H8 : Col A R Y
H : not (eq P Q)
H9 : not (parallel P Q U V)
H6 : parallel Y R P Q
H7 : Col Y U V
H5 : not (Col R P Q)
H4 : parallel A Y C D
H3 : not (eq Y R)
H2 : not (eq Y A)
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,R,P,Q,Y : Point
*****
False
+++++
intuition.
-----
Lemma elim_length_ratio_on_inter_line_parallel_2 : forall A C D U V R P Q Y : Point, on_inter_line_parallel Y R U V P Q -> S A U V = 0 -> C <> D -> Y <> A -> Y <> R -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
unfold on_inter_line_parallel.
intros.
DecompAndAll.
assert (P<>Q).
assert (~ Col A R Y).

*****
H8 : not (Col A R Y)
H : not (eq P Q)
H9 : not (parallel P Q U V)
H6 : parallel Y R P Q
H7 : Col Y U V
H5 : not (Col R P Q)
H4 : parallel A Y C D
H3 : not (eq Y R)
H2 : not (eq Y A)
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,R,P,Q,Y : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (S4 A P R Q) (S4 C P D Q))
+++++
eapply elim_length_ratio_on_parallel_d_2.
-----
Lemma elim_length_ratio_on_inter_line_parallel_2 : forall A C D U V R P Q Y : Point, on_inter_line_parallel Y R U V P Q -> S A U V = 0 -> C <> D -> Y <> A -> Y <> R -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
unfold on_inter_line_parallel.
intros.
DecompAndAll.
assert (P<>Q).
assert (~ Col A R Y).
eapply elim_length_ratio_on_parallel_d_2.

*****
H8 : not (Col A R Y)
H : not (eq P Q)
H9 : not (parallel P Q U V)
H6 : parallel Y R P Q
H7 : Col Y U V
H5 : not (Col R P Q)
H4 : parallel A Y C D
H3 : not (eq Y R)
H2 : not (eq Y A)
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,R,P,Q,Y : Point
*****
on_parallel_d Y R P Q ?lambda
+++++
Geometry.
-----
Lemma elim_length_ratio_on_inter_line_parallel_2 : forall A C D U V R P Q Y : Point, on_inter_line_parallel Y R U V P Q -> S A U V = 0 -> C <> D -> Y <> A -> Y <> R -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
unfold on_inter_line_parallel.
intros.
DecompAndAll.
assert (P<>Q).
assert (~ Col A R Y).
eapply elim_length_ratio_on_parallel_d_2.
Geometry.

*****
H8 : not (Col A R Y)
H : not (eq P Q)
H9 : not (parallel P Q U V)
H6 : parallel Y R P Q
H7 : Col Y U V
H5 : not (Col R P Q)
H4 : parallel A Y C D
H3 : not (eq Y R)
H2 : not (eq Y A)
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,R,P,Q,Y : Point
*****
on_parallel_d Y R P Q ?lambda
+++++
apply on_parallel_to_on_parallel_d.
-----
Lemma elim_length_ratio_on_inter_line_parallel_2 : forall A C D U V R P Q Y : Point, on_inter_line_parallel Y R U V P Q -> S A U V = 0 -> C <> D -> Y <> A -> Y <> R -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
unfold on_inter_line_parallel.
intros.
DecompAndAll.
assert (P<>Q).
assert (~ Col A R Y).
eapply elim_length_ratio_on_parallel_d_2.
Geometry.
apply on_parallel_to_on_parallel_d.

*****
H8 : not (Col A R Y)
H : not (eq P Q)
H9 : not (parallel P Q U V)
H6 : parallel Y R P Q
H7 : Col Y U V
H5 : not (Col R P Q)
H4 : parallel A Y C D
H3 : not (eq Y R)
H2 : not (eq Y A)
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,R,P,Q,Y : Point
*****
on_parallel Y R P Q
+++++
unfold on_parallel.
-----
Lemma elim_length_ratio_on_inter_line_parallel_2 : forall A C D U V R P Q Y : Point, on_inter_line_parallel Y R U V P Q -> S A U V = 0 -> C <> D -> Y <> A -> Y <> R -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
unfold on_inter_line_parallel.
intros.
DecompAndAll.
assert (P<>Q).
assert (~ Col A R Y).
eapply elim_length_ratio_on_parallel_d_2.
Geometry.
apply on_parallel_to_on_parallel_d.
unfold on_parallel.

*****
H8 : not (Col A R Y)
H : not (eq P Q)
H9 : not (parallel P Q U V)
H6 : parallel Y R P Q
H7 : Col Y U V
H5 : not (Col R P Q)
H4 : parallel A Y C D
H3 : not (eq Y R)
H2 : not (eq Y A)
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,R,P,Q,Y : Point
*****
and (not (eq P Q)) (parallel R Y P Q)
+++++
repeat split.
-----
Lemma elim_length_ratio_on_inter_line_parallel_2 : forall A C D U V R P Q Y : Point, on_inter_line_parallel Y R U V P Q -> S A U V = 0 -> C <> D -> Y <> A -> Y <> R -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
unfold on_inter_line_parallel.
intros.
DecompAndAll.
assert (P<>Q).
assert (~ Col A R Y).
eapply elim_length_ratio_on_parallel_d_2.
Geometry.
apply on_parallel_to_on_parallel_d.
unfold on_parallel.
repeat split.

*****
H8 : not (Col A R Y)
H : not (eq P Q)
H9 : not (parallel P Q U V)
H6 : parallel Y R P Q
H7 : Col Y U V
H5 : not (Col R P Q)
H4 : parallel A Y C D
H3 : not (eq Y R)
H2 : not (eq Y A)
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,R,P,Q,Y : Point
*****
not (eq P Q)
+++++
Geometry.
-----
Lemma elim_length_ratio_on_inter_line_parallel_2 : forall A C D U V R P Q Y : Point, on_inter_line_parallel Y R U V P Q -> S A U V = 0 -> C <> D -> Y <> A -> Y <> R -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
unfold on_inter_line_parallel.
intros.
DecompAndAll.
assert (P<>Q).
assert (~ Col A R Y).
eapply elim_length_ratio_on_parallel_d_2.
Geometry.
apply on_parallel_to_on_parallel_d.
unfold on_parallel.
repeat split.

*****
H8 : not (Col A R Y)
H : not (eq P Q)
H9 : not (parallel P Q U V)
H6 : parallel Y R P Q
H7 : Col Y U V
H5 : not (Col R P Q)
H4 : parallel A Y C D
H3 : not (eq Y R)
H2 : not (eq Y A)
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,R,P,Q,Y : Point
*****
parallel R Y P Q
+++++
Geometry.
-----
Lemma elim_length_ratio_on_inter_line_parallel_2 : forall A C D U V R P Q Y : Point, on_inter_line_parallel Y R U V P Q -> S A U V = 0 -> C <> D -> Y <> A -> Y <> R -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
unfold on_inter_line_parallel.
intros.
DecompAndAll.
assert (P<>Q).
assert (~ Col A R Y).
eapply elim_length_ratio_on_parallel_d_2.

*****
H8 : not (Col A R Y)
H : not (eq P Q)
H9 : not (parallel P Q U V)
H6 : parallel Y R P Q
H7 : Col Y U V
H5 : not (Col R P Q)
H4 : parallel A Y C D
H3 : not (eq Y R)
H2 : not (eq Y A)
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,R,P,Q,Y : Point
*****
not (Col A R Y)
+++++
Geometry.
-----
Lemma elim_length_ratio_on_inter_line_parallel_2 : forall A C D U V R P Q Y : Point, on_inter_line_parallel Y R U V P Q -> S A U V = 0 -> C <> D -> Y <> A -> Y <> R -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
unfold on_inter_line_parallel.
intros.
DecompAndAll.
assert (P<>Q).
assert (~ Col A R Y).
eapply elim_length_ratio_on_parallel_d_2.

*****
H8 : not (Col A R Y)
H : not (eq P Q)
H9 : not (parallel P Q U V)
H6 : parallel Y R P Q
H7 : Col Y U V
H5 : not (Col R P Q)
H4 : parallel A Y C D
H3 : not (eq Y R)
H2 : not (eq Y A)
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,R,P,Q,Y : Point
*****
not (eq C D)
+++++
Geometry.
-----
Lemma elim_length_ratio_on_inter_line_parallel_2 : forall A C D U V R P Q Y : Point, on_inter_line_parallel Y R U V P Q -> S A U V = 0 -> C <> D -> Y <> A -> Y <> R -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
unfold on_inter_line_parallel.
intros.
DecompAndAll.
assert (P<>Q).
assert (~ Col A R Y).
eapply elim_length_ratio_on_parallel_d_2.

*****
H8 : not (Col A R Y)
H : not (eq P Q)
H9 : not (parallel P Q U V)
H6 : parallel Y R P Q
H7 : Col Y U V
H5 : not (Col R P Q)
H4 : parallel A Y C D
H3 : not (eq Y R)
H2 : not (eq Y A)
H1 : not (eq C D)
H0 : eq (S A U V) F0
A,C,D,U,V,R,P,Q,Y : Point
*****
parallel A Y C D
+++++
Geometry.
-----
Lemma elim_length_ratio_on_inter_line_parallel_2 : forall A C D U V R P Q Y : Point, on_inter_line_parallel Y R U V P Q -> S A U V = 0 -> C <> D -> Y <> A -> Y <> R -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
unfold on_inter_line_parallel.
intros.
DecompAndAll.
assert (P<>Q).

*****

*****

+++++
Qed.
-----
Lemma elim_length_ratio_on_inter_parallel_parallel_1 :\n    forall A C D P Q R U V W Y : Point,\n    on_inter_parallel_parallel Y R P Q W U V ->\n    ~ parallel A Y P Q ->\n    Y <> R ->\n    C <> D -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
-----
Lemma elim_length_ratio_on_inter_parallel_parallel_1 : forall A C D P Q R U V W Y : Point, on_inter_parallel_parallel Y R P Q W U V -> ~ parallel A Y P Q -> Y <> R -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.

*****

*****
forall (A C D P Q R U V W Y : Point) (_ : on_inter_parallel_parallel Y R P Q W U V) (_ : not (parallel A Y P Q)) (_ : not (eq Y R)) (_ : not (eq C D)) (_ : parallel A Y C D), eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (S4 A P R Q) (S4 C P D Q))
+++++
Proof.
-----
Lemma elim_length_ratio_on_inter_parallel_parallel_1 : forall A C D P Q R U V W Y : Point, on_inter_parallel_parallel Y R P Q W U V -> ~ parallel A Y P Q -> Y <> R -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.

*****

*****
forall (A C D P Q R U V W Y : Point) (_ : on_inter_parallel_parallel Y R P Q W U V) (_ : not (parallel A Y P Q)) (_ : not (eq Y R)) (_ : not (eq C D)) (_ : parallel A Y C D), eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (S4 A P R Q) (S4 C P D Q))
+++++
unfold on_inter_parallel_parallel.
-----
Lemma elim_length_ratio_on_inter_parallel_parallel_1 : forall A C D P Q R U V W Y : Point, on_inter_parallel_parallel Y R P Q W U V -> ~ parallel A Y P Q -> Y <> R -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
unfold on_inter_parallel_parallel.

*****

*****
forall (A C D P Q R U V W Y : Point) (_ : and (not (Col R U V)) (and (parallel Y R P Q) (and (parallel Y W U V) (not (parallel U V P Q))))) (_ : not (parallel A Y P Q)) (_ : not (eq Y R)) (_ : not (eq C D)) (_ : parallel A Y C D), eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (S4 A P R Q) (S4 C P D Q))
+++++
intros.
-----
Lemma elim_length_ratio_on_inter_parallel_parallel_1 : forall A C D P Q R U V W Y : Point, on_inter_parallel_parallel Y R P Q W U V -> ~ parallel A Y P Q -> Y <> R -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
unfold on_inter_parallel_parallel.
intros.

*****
H3 : parallel A Y C D
H2 : not (eq C D)
H1 : not (eq Y R)
H0 : not (parallel A Y P Q)
H : and (not (Col R U V))\n (and (parallel Y R P Q)\n (and (parallel Y W U V) (not (parallel U V P Q))))
A,C,D,P,Q,R,U,V,W,Y : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (S4 A P R Q) (S4 C P D Q))
+++++
DecompAndAll.
-----
Lemma elim_length_ratio_on_inter_parallel_parallel_1 : forall A C D P Q R U V W Y : Point, on_inter_parallel_parallel Y R P Q W U V -> ~ parallel A Y P Q -> Y <> R -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
unfold on_inter_parallel_parallel.
intros.
DecompAndAll.

*****
H8 : not (parallel U V P Q)
H5 : parallel Y W U V
H6 : parallel Y R P Q
H4 : not (Col R U V)
H3 : parallel A Y C D
H2 : not (eq C D)
H1 : not (eq Y R)
H0 : not (parallel A Y P Q)
A,C,D,P,Q,R,U,V,W,Y : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (S4 A P R Q) (S4 C P D Q))
+++++
assert (P<>Q).
-----
Lemma elim_length_ratio_on_inter_parallel_parallel_1 : forall A C D P Q R U V W Y : Point, on_inter_parallel_parallel Y R P Q W U V -> ~ parallel A Y P Q -> Y <> R -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
unfold on_inter_parallel_parallel.
intros.
DecompAndAll.
assert (P<>Q).

*****
H8 : not (parallel U V P Q)
H5 : parallel Y W U V
H6 : parallel Y R P Q
H4 : not (Col R U V)
H3 : parallel A Y C D
H2 : not (eq C D)
H1 : not (eq Y R)
H0 : not (parallel A Y P Q)
A,C,D,P,Q,R,U,V,W,Y : Point
*****
not (eq P Q)
+++++
unfold not.
-----
Lemma elim_length_ratio_on_inter_parallel_parallel_1 : forall A C D P Q R U V W Y : Point, on_inter_parallel_parallel Y R P Q W U V -> ~ parallel A Y P Q -> Y <> R -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
unfold on_inter_parallel_parallel.
intros.
DecompAndAll.
assert (P<>Q).
unfold not.

*****
H8 : not (parallel U V P Q)
H5 : parallel Y W U V
H6 : parallel Y R P Q
H4 : not (Col R U V)
H3 : parallel A Y C D
H2 : not (eq C D)
H1 : not (eq Y R)
H0 : not (parallel A Y P Q)
A,C,D,P,Q,R,U,V,W,Y : Point
*****
forall _ : eq P Q, False
+++++
intro.
-----
Lemma elim_length_ratio_on_inter_parallel_parallel_1 : forall A C D P Q R U V W Y : Point, on_inter_parallel_parallel Y R P Q W U V -> ~ parallel A Y P Q -> Y <> R -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
unfold on_inter_parallel_parallel.
intros.
DecompAndAll.
assert (P<>Q).
unfold not.
intro.

*****
H : eq P Q
H8 : not (parallel U V P Q)
H5 : parallel Y W U V
H6 : parallel Y R P Q
H4 : not (Col R U V)
H3 : parallel A Y C D
H2 : not (eq C D)
H1 : not (eq Y R)
H0 : not (parallel A Y P Q)
A,C,D,P,Q,R,U,V,W,Y : Point
*****
False
+++++
subst P.
-----
Lemma elim_length_ratio_on_inter_parallel_parallel_1 : forall A C D P Q R U V W Y : Point, on_inter_parallel_parallel Y R P Q W U V -> ~ parallel A Y P Q -> Y <> R -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
unfold on_inter_parallel_parallel.
intros.
DecompAndAll.
assert (P<>Q).
unfold not.
intro.
subst P.

*****
H8 : not (parallel U V Q Q)
H5 : parallel Y W U V
H6 : parallel Y R Q Q
H4 : not (Col R U V)
H3 : parallel A Y C D
H2 : not (eq C D)
H1 : not (eq Y R)
H0 : not (parallel A Y Q Q)
A,C,D,Q,R,U,V,W,Y : Point
*****
False
+++++
Geometry.
-----
Lemma elim_length_ratio_on_inter_parallel_parallel_1 : forall A C D P Q R U V W Y : Point, on_inter_parallel_parallel Y R P Q W U V -> ~ parallel A Y P Q -> Y <> R -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
unfold on_inter_parallel_parallel.
intros.
DecompAndAll.
assert (P<>Q).

*****
H : not (eq P Q)
H8 : not (parallel U V P Q)
H5 : parallel Y W U V
H6 : parallel Y R P Q
H4 : not (Col R U V)
H3 : parallel A Y C D
H2 : not (eq C D)
H1 : not (eq Y R)
H0 : not (parallel A Y P Q)
A,C,D,P,Q,R,U,V,W,Y : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (S4 A P R Q) (S4 C P D Q))
+++++
eapply elim_length_ratio_on_parallel_d_2.
-----
Lemma elim_length_ratio_on_inter_parallel_parallel_1 : forall A C D P Q R U V W Y : Point, on_inter_parallel_parallel Y R P Q W U V -> ~ parallel A Y P Q -> Y <> R -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
unfold on_inter_parallel_parallel.
intros.
DecompAndAll.
assert (P<>Q).
eapply elim_length_ratio_on_parallel_d_2.

*****
H : not (eq P Q)
H8 : not (parallel U V P Q)
H5 : parallel Y W U V
H6 : parallel Y R P Q
H4 : not (Col R U V)
H3 : parallel A Y C D
H2 : not (eq C D)
H1 : not (eq Y R)
H0 : not (parallel A Y P Q)
A,C,D,P,Q,R,U,V,W,Y : Point
*****
on_parallel_d Y R P Q ?lambda
+++++
Geometry.
-----
Lemma elim_length_ratio_on_inter_parallel_parallel_1 : forall A C D P Q R U V W Y : Point, on_inter_parallel_parallel Y R P Q W U V -> ~ parallel A Y P Q -> Y <> R -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
unfold on_inter_parallel_parallel.
intros.
DecompAndAll.
assert (P<>Q).
eapply elim_length_ratio_on_parallel_d_2.
Geometry.

*****
H : not (eq P Q)
H8 : not (parallel U V P Q)
H5 : parallel Y W U V
H6 : parallel Y R P Q
H4 : not (Col R U V)
H3 : parallel A Y C D
H2 : not (eq C D)
H1 : not (eq Y R)
H0 : not (parallel A Y P Q)
A,C,D,P,Q,R,U,V,W,Y : Point
*****
on_parallel_d Y R P Q ?lambda
+++++
apply on_parallel_to_on_parallel_d.
-----
Lemma elim_length_ratio_on_inter_parallel_parallel_1 : forall A C D P Q R U V W Y : Point, on_inter_parallel_parallel Y R P Q W U V -> ~ parallel A Y P Q -> Y <> R -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
unfold on_inter_parallel_parallel.
intros.
DecompAndAll.
assert (P<>Q).
eapply elim_length_ratio_on_parallel_d_2.
Geometry.
apply on_parallel_to_on_parallel_d.

*****
H : not (eq P Q)
H8 : not (parallel U V P Q)
H5 : parallel Y W U V
H6 : parallel Y R P Q
H4 : not (Col R U V)
H3 : parallel A Y C D
H2 : not (eq C D)
H1 : not (eq Y R)
H0 : not (parallel A Y P Q)
A,C,D,P,Q,R,U,V,W,Y : Point
*****
on_parallel Y R P Q
+++++
Geometry.
-----
Lemma elim_length_ratio_on_inter_parallel_parallel_1 : forall A C D P Q R U V W Y : Point, on_inter_parallel_parallel Y R P Q W U V -> ~ parallel A Y P Q -> Y <> R -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
unfold on_inter_parallel_parallel.
intros.
DecompAndAll.
assert (P<>Q).
eapply elim_length_ratio_on_parallel_d_2.
Geometry.
apply on_parallel_to_on_parallel_d.
Geometry.

*****
H : not (eq P Q)
H8 : not (parallel U V P Q)
H5 : parallel Y W U V
H6 : parallel Y R P Q
H4 : not (Col R U V)
H3 : parallel A Y C D
H2 : not (eq C D)
H1 : not (eq Y R)
H0 : not (parallel A Y P Q)
A,C,D,P,Q,R,U,V,W,Y : Point
*****
on_parallel Y R P Q
+++++
unfold on_parallel.
-----
Lemma elim_length_ratio_on_inter_parallel_parallel_1 : forall A C D P Q R U V W Y : Point, on_inter_parallel_parallel Y R P Q W U V -> ~ parallel A Y P Q -> Y <> R -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
unfold on_inter_parallel_parallel.
intros.
DecompAndAll.
assert (P<>Q).
eapply elim_length_ratio_on_parallel_d_2.
Geometry.
apply on_parallel_to_on_parallel_d.
Geometry.
unfold on_parallel.

*****
H : not (eq P Q)
H8 : not (parallel U V P Q)
H5 : parallel Y W U V
H6 : parallel Y R P Q
H4 : not (Col R U V)
H3 : parallel A Y C D
H2 : not (eq C D)
H1 : not (eq Y R)
H0 : not (parallel A Y P Q)
A,C,D,P,Q,R,U,V,W,Y : Point
*****
and (not (eq P Q)) (parallel R Y P Q)
+++++
repeat split.
-----
Lemma elim_length_ratio_on_inter_parallel_parallel_1 : forall A C D P Q R U V W Y : Point, on_inter_parallel_parallel Y R P Q W U V -> ~ parallel A Y P Q -> Y <> R -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
unfold on_inter_parallel_parallel.
intros.
DecompAndAll.
assert (P<>Q).
eapply elim_length_ratio_on_parallel_d_2.
Geometry.
apply on_parallel_to_on_parallel_d.
Geometry.
unfold on_parallel.
repeat split.

*****
H : not (eq P Q)
H8 : not (parallel U V P Q)
H5 : parallel Y W U V
H6 : parallel Y R P Q
H4 : not (Col R U V)
H3 : parallel A Y C D
H2 : not (eq C D)
H1 : not (eq Y R)
H0 : not (parallel A Y P Q)
A,C,D,P,Q,R,U,V,W,Y : Point
*****
not (eq P Q)
+++++
Geometry.
-----
Lemma elim_length_ratio_on_inter_parallel_parallel_1 : forall A C D P Q R U V W Y : Point, on_inter_parallel_parallel Y R P Q W U V -> ~ parallel A Y P Q -> Y <> R -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
unfold on_inter_parallel_parallel.
intros.
DecompAndAll.
assert (P<>Q).
eapply elim_length_ratio_on_parallel_d_2.
Geometry.
apply on_parallel_to_on_parallel_d.
Geometry.
unfold on_parallel.
repeat split.

*****
H : not (eq P Q)
H8 : not (parallel U V P Q)
H5 : parallel Y W U V
H6 : parallel Y R P Q
H4 : not (Col R U V)
H3 : parallel A Y C D
H2 : not (eq C D)
H1 : not (eq Y R)
H0 : not (parallel A Y P Q)
A,C,D,P,Q,R,U,V,W,Y : Point
*****
parallel R Y P Q
+++++
Geometry.
-----
Lemma elim_length_ratio_on_inter_parallel_parallel_1 : forall A C D P Q R U V W Y : Point, on_inter_parallel_parallel Y R P Q W U V -> ~ parallel A Y P Q -> Y <> R -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
unfold on_inter_parallel_parallel.
intros.
DecompAndAll.
assert (P<>Q).
eapply elim_length_ratio_on_parallel_d_2.

*****
H : not (eq P Q)
H8 : not (parallel U V P Q)
H5 : parallel Y W U V
H6 : parallel Y R P Q
H4 : not (Col R U V)
H3 : parallel A Y C D
H2 : not (eq C D)
H1 : not (eq Y R)
H0 : not (parallel A Y P Q)
A,C,D,P,Q,R,U,V,W,Y : Point
*****
not (Col A R Y)
+++++
Geometry.
-----
Lemma elim_length_ratio_on_inter_parallel_parallel_1 : forall A C D P Q R U V W Y : Point, on_inter_parallel_parallel Y R P Q W U V -> ~ parallel A Y P Q -> Y <> R -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
unfold on_inter_parallel_parallel.
intros.
DecompAndAll.
assert (P<>Q).
eapply elim_length_ratio_on_parallel_d_2.
Geometry.

*****
H : not (eq P Q)
H8 : not (parallel U V P Q)
H5 : parallel Y W U V
H6 : parallel Y R P Q
H4 : not (Col R U V)
H3 : parallel A Y C D
H2 : not (eq C D)
H1 : not (eq Y R)
H0 : not (parallel A Y P Q)
A,C,D,P,Q,R,U,V,W,Y : Point
*****
not (Col A R Y)
+++++
unfold not.
-----
Lemma elim_length_ratio_on_inter_parallel_parallel_1 : forall A C D P Q R U V W Y : Point, on_inter_parallel_parallel Y R P Q W U V -> ~ parallel A Y P Q -> Y <> R -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
unfold on_inter_parallel_parallel.
intros.
DecompAndAll.
assert (P<>Q).
eapply elim_length_ratio_on_parallel_d_2.
Geometry.
unfold not.

*****
H : not (eq P Q)
H8 : not (parallel U V P Q)
H5 : parallel Y W U V
H6 : parallel Y R P Q
H4 : not (Col R U V)
H3 : parallel A Y C D
H2 : not (eq C D)
H1 : not (eq Y R)
H0 : not (parallel A Y P Q)
A,C,D,P,Q,R,U,V,W,Y : Point
*****
forall _ : Col A R Y, False
+++++
intro.
-----
Lemma elim_length_ratio_on_inter_parallel_parallel_1 : forall A C D P Q R U V W Y : Point, on_inter_parallel_parallel Y R P Q W U V -> ~ parallel A Y P Q -> Y <> R -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
unfold on_inter_parallel_parallel.
intros.
DecompAndAll.
assert (P<>Q).
eapply elim_length_ratio_on_parallel_d_2.
Geometry.
unfold not.
intro.

*****
H7 : Col A R Y
H : not (eq P Q)
H8 : not (parallel U V P Q)
H5 : parallel Y W U V
H6 : parallel Y R P Q
H4 : not (Col R U V)
H3 : parallel A Y C D
H2 : not (eq C D)
H1 : not (eq Y R)
H0 : not (parallel A Y P Q)
A,C,D,P,Q,R,U,V,W,Y : Point
*****
False
+++++
assert (U<>V).
-----
Lemma elim_length_ratio_on_inter_parallel_parallel_1 : forall A C D P Q R U V W Y : Point, on_inter_parallel_parallel Y R P Q W U V -> ~ parallel A Y P Q -> Y <> R -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
unfold on_inter_parallel_parallel.
intros.
DecompAndAll.
assert (P<>Q).
eapply elim_length_ratio_on_parallel_d_2.
Geometry.
unfold not.
intro.
assert (U<>V).

*****
H7 : Col A R Y
H : not (eq P Q)
H8 : not (parallel U V P Q)
H5 : parallel Y W U V
H6 : parallel Y R P Q
H4 : not (Col R U V)
H3 : parallel A Y C D
H2 : not (eq C D)
H1 : not (eq Y R)
H0 : not (parallel A Y P Q)
A,C,D,P,Q,R,U,V,W,Y : Point
*****
not (eq U V)
+++++
unfold not.
-----
Lemma elim_length_ratio_on_inter_parallel_parallel_1 : forall A C D P Q R U V W Y : Point, on_inter_parallel_parallel Y R P Q W U V -> ~ parallel A Y P Q -> Y <> R -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
unfold on_inter_parallel_parallel.
intros.
DecompAndAll.
assert (P<>Q).
eapply elim_length_ratio_on_parallel_d_2.
Geometry.
unfold not.
intro.
assert (U<>V).
unfold not.

*****
H7 : Col A R Y
H : not (eq P Q)
H8 : not (parallel U V P Q)
H5 : parallel Y W U V
H6 : parallel Y R P Q
H4 : not (Col R U V)
H3 : parallel A Y C D
H2 : not (eq C D)
H1 : not (eq Y R)
H0 : not (parallel A Y P Q)
A,C,D,P,Q,R,U,V,W,Y : Point
*****
forall _ : eq U V, False
+++++
intro.
-----
Lemma elim_length_ratio_on_inter_parallel_parallel_1 : forall A C D P Q R U V W Y : Point, on_inter_parallel_parallel Y R P Q W U V -> ~ parallel A Y P Q -> Y <> R -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
unfold on_inter_parallel_parallel.
intros.
DecompAndAll.
assert (P<>Q).
eapply elim_length_ratio_on_parallel_d_2.
Geometry.
unfold not.
intro.
assert (U<>V).
unfold not.
intro.

*****
H9 : eq U V
H7 : Col A R Y
H : not (eq P Q)
H8 : not (parallel U V P Q)
H5 : parallel Y W U V
H6 : parallel Y R P Q
H4 : not (Col R U V)
H3 : parallel A Y C D
H2 : not (eq C D)
H1 : not (eq Y R)
H0 : not (parallel A Y P Q)
A,C,D,P,Q,R,U,V,W,Y : Point
*****
False
+++++
subst U.
-----
Lemma elim_length_ratio_on_inter_parallel_parallel_1 : forall A C D P Q R U V W Y : Point, on_inter_parallel_parallel Y R P Q W U V -> ~ parallel A Y P Q -> Y <> R -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
unfold on_inter_parallel_parallel.
intros.
DecompAndAll.
assert (P<>Q).
eapply elim_length_ratio_on_parallel_d_2.
Geometry.
unfold not.
intro.
assert (U<>V).
unfold not.
intro.
subst U.

*****
H7 : Col A R Y
H : not (eq P Q)
H5 : parallel Y W V V
H8 : not (parallel V V P Q)
H6 : parallel Y R P Q
H4 : not (Col R V V)
H3 : parallel A Y C D
H2 : not (eq C D)
H1 : not (eq Y R)
H0 : not (parallel A Y P Q)
A,C,D,P,Q,R,V,W,Y : Point
*****
False
+++++
Geometry.
-----
Lemma elim_length_ratio_on_inter_parallel_parallel_1 : forall A C D P Q R U V W Y : Point, on_inter_parallel_parallel Y R P Q W U V -> ~ parallel A Y P Q -> Y <> R -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
unfold on_inter_parallel_parallel.
intros.
DecompAndAll.
assert (P<>Q).
eapply elim_length_ratio_on_parallel_d_2.
Geometry.
unfold not.
intro.
assert (U<>V).

*****
H9 : not (eq U V)
H7 : Col A R Y
H : not (eq P Q)
H8 : not (parallel U V P Q)
H5 : parallel Y W U V
H6 : parallel Y R P Q
H4 : not (Col R U V)
H3 : parallel A Y C D
H2 : not (eq C D)
H1 : not (eq Y R)
H0 : not (parallel A Y P Q)
A,C,D,P,Q,R,U,V,W,Y : Point
*****
False
+++++
assert (A<>Y).
-----
Lemma elim_length_ratio_on_inter_parallel_parallel_1 : forall A C D P Q R U V W Y : Point, on_inter_parallel_parallel Y R P Q W U V -> ~ parallel A Y P Q -> Y <> R -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
unfold on_inter_parallel_parallel.
intros.
DecompAndAll.
assert (P<>Q).
eapply elim_length_ratio_on_parallel_d_2.
Geometry.
unfold not.
intro.
assert (U<>V).
assert (A<>Y).

*****
H9 : not (eq U V)
H7 : Col A R Y
H : not (eq P Q)
H8 : not (parallel U V P Q)
H5 : parallel Y W U V
H6 : parallel Y R P Q
H4 : not (Col R U V)
H3 : parallel A Y C D
H2 : not (eq C D)
H1 : not (eq Y R)
H0 : not (parallel A Y P Q)
A,C,D,P,Q,R,U,V,W,Y : Point
*****
not (eq A Y)
+++++
unfold not.
-----
Lemma elim_length_ratio_on_inter_parallel_parallel_1 : forall A C D P Q R U V W Y : Point, on_inter_parallel_parallel Y R P Q W U V -> ~ parallel A Y P Q -> Y <> R -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
unfold on_inter_parallel_parallel.
intros.
DecompAndAll.
assert (P<>Q).
eapply elim_length_ratio_on_parallel_d_2.
Geometry.
unfold not.
intro.
assert (U<>V).
assert (A<>Y).
unfold not.

*****
H9 : not (eq U V)
H7 : Col A R Y
H : not (eq P Q)
H8 : not (parallel U V P Q)
H5 : parallel Y W U V
H6 : parallel Y R P Q
H4 : not (Col R U V)
H3 : parallel A Y C D
H2 : not (eq C D)
H1 : not (eq Y R)
H0 : not (parallel A Y P Q)
A,C,D,P,Q,R,U,V,W,Y : Point
*****
forall _ : eq A Y, False
+++++
intro.
-----
Lemma elim_length_ratio_on_inter_parallel_parallel_1 : forall A C D P Q R U V W Y : Point, on_inter_parallel_parallel Y R P Q W U V -> ~ parallel A Y P Q -> Y <> R -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
unfold on_inter_parallel_parallel.
intros.
DecompAndAll.
assert (P<>Q).
eapply elim_length_ratio_on_parallel_d_2.
Geometry.
unfold not.
intro.
assert (U<>V).
assert (A<>Y).
unfold not.
intro.

*****
H10 : eq A Y
H9 : not (eq U V)
H7 : Col A R Y
H : not (eq P Q)
H8 : not (parallel U V P Q)
H5 : parallel Y W U V
H6 : parallel Y R P Q
H4 : not (Col R U V)
H3 : parallel A Y C D
H2 : not (eq C D)
H1 : not (eq Y R)
H0 : not (parallel A Y P Q)
A,C,D,P,Q,R,U,V,W,Y : Point
*****
False
+++++
subst A.
-----
Lemma elim_length_ratio_on_inter_parallel_parallel_1 : forall A C D P Q R U V W Y : Point, on_inter_parallel_parallel Y R P Q W U V -> ~ parallel A Y P Q -> Y <> R -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
unfold on_inter_parallel_parallel.
intros.
DecompAndAll.
assert (P<>Q).
eapply elim_length_ratio_on_parallel_d_2.
Geometry.
unfold not.
intro.
assert (U<>V).
assert (A<>Y).
unfold not.
intro.
subst A.

*****
H9 : not (eq U V)
H7 : Col Y R Y
H : not (eq P Q)
H8 : not (parallel U V P Q)
H5 : parallel Y W U V
H6 : parallel Y R P Q
H4 : not (Col R U V)
H3 : parallel Y Y C D
H2 : not (eq C D)
H1 : not (eq Y R)
H0 : not (parallel Y Y P Q)
C,D,P,Q,R,U,V,W,Y : Point
*****
False
+++++
Geometry.
-----
Lemma elim_length_ratio_on_inter_parallel_parallel_1 : forall A C D P Q R U V W Y : Point, on_inter_parallel_parallel Y R P Q W U V -> ~ parallel A Y P Q -> Y <> R -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
unfold on_inter_parallel_parallel.
intros.
DecompAndAll.
assert (P<>Q).
eapply elim_length_ratio_on_parallel_d_2.
Geometry.
unfold not.
intro.
assert (U<>V).
assert (A<>Y).

*****
H10 : not (eq A Y)
H9 : not (eq U V)
H7 : Col A R Y
H : not (eq P Q)
H8 : not (parallel U V P Q)
H5 : parallel Y W U V
H6 : parallel Y R P Q
H4 : not (Col R U V)
H3 : parallel A Y C D
H2 : not (eq C D)
H1 : not (eq Y R)
H0 : not (parallel A Y P Q)
A,C,D,P,Q,R,U,V,W,Y : Point
*****
False
+++++
assert (parallel P Q Y A).
-----
Lemma elim_length_ratio_on_inter_parallel_parallel_1 : forall A C D P Q R U V W Y : Point, on_inter_parallel_parallel Y R P Q W U V -> ~ parallel A Y P Q -> Y <> R -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
unfold on_inter_parallel_parallel.
intros.
DecompAndAll.
assert (P<>Q).
eapply elim_length_ratio_on_parallel_d_2.
Geometry.
unfold not.
intro.
assert (U<>V).
assert (A<>Y).
assert (parallel P Q Y A).

*****
H10 : not (eq A Y)
H9 : not (eq U V)
H7 : Col A R Y
H : not (eq P Q)
H8 : not (parallel U V P Q)
H5 : parallel Y W U V
H6 : parallel Y R P Q
H4 : not (Col R U V)
H3 : parallel A Y C D
H2 : not (eq C D)
H1 : not (eq Y R)
H0 : not (parallel A Y P Q)
A,C,D,P,Q,R,U,V,W,Y : Point
*****
parallel P Q Y A
+++++
eapply col_par_par.
-----
Lemma elim_length_ratio_on_inter_parallel_parallel_1 : forall A C D P Q R U V W Y : Point, on_inter_parallel_parallel Y R P Q W U V -> ~ parallel A Y P Q -> Y <> R -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
unfold on_inter_parallel_parallel.
intros.
DecompAndAll.
assert (P<>Q).
eapply elim_length_ratio_on_parallel_d_2.
Geometry.
unfold not.
intro.
assert (U<>V).
assert (A<>Y).
assert (parallel P Q Y A).
eapply col_par_par.

*****
H10 : not (eq A Y)
H9 : not (eq U V)
H7 : Col A R Y
H : not (eq P Q)
H8 : not (parallel U V P Q)
H5 : parallel Y W U V
H6 : parallel Y R P Q
H4 : not (Col R U V)
H3 : parallel A Y C D
H2 : not (eq C D)
H1 : not (eq Y R)
H0 : not (parallel A Y P Q)
A,C,D,P,Q,R,U,V,W,Y : Point
*****
not (eq Y ?D)
+++++
apply H1.
-----
Lemma elim_length_ratio_on_inter_parallel_parallel_1 : forall A C D P Q R U V W Y : Point, on_inter_parallel_parallel Y R P Q W U V -> ~ parallel A Y P Q -> Y <> R -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
unfold on_inter_parallel_parallel.
intros.
DecompAndAll.
assert (P<>Q).
eapply elim_length_ratio_on_parallel_d_2.
Geometry.
unfold not.
intro.
assert (U<>V).
assert (A<>Y).
assert (parallel P Q Y A).
eapply col_par_par.

*****
H10 : not (eq A Y)
H9 : not (eq U V)
H7 : Col A R Y
H : not (eq P Q)
H8 : not (parallel U V P Q)
H5 : parallel Y W U V
H6 : parallel Y R P Q
H4 : not (Col R U V)
H3 : parallel A Y C D
H2 : not (eq C D)
H1 : not (eq Y R)
H0 : not (parallel A Y P Q)
A,C,D,P,Q,R,U,V,W,Y : Point
*****
parallel P Q Y R
+++++
Geometry.
-----
Lemma elim_length_ratio_on_inter_parallel_parallel_1 : forall A C D P Q R U V W Y : Point, on_inter_parallel_parallel Y R P Q W U V -> ~ parallel A Y P Q -> Y <> R -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
unfold on_inter_parallel_parallel.
intros.
DecompAndAll.
assert (P<>Q).
eapply elim_length_ratio_on_parallel_d_2.
Geometry.
unfold not.
intro.
assert (U<>V).
assert (A<>Y).
assert (parallel P Q Y A).
eapply col_par_par.

*****
H10 : not (eq A Y)
H9 : not (eq U V)
H7 : Col A R Y
H : not (eq P Q)
H8 : not (parallel U V P Q)
H5 : parallel Y W U V
H6 : parallel Y R P Q
H4 : not (Col R U V)
H3 : parallel A Y C D
H2 : not (eq C D)
H1 : not (eq Y R)
H0 : not (parallel A Y P Q)
A,C,D,P,Q,R,U,V,W,Y : Point
*****
Col Y R A
+++++
Geometry.
-----
Lemma elim_length_ratio_on_inter_parallel_parallel_1 : forall A C D P Q R U V W Y : Point, on_inter_parallel_parallel Y R P Q W U V -> ~ parallel A Y P Q -> Y <> R -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
unfold on_inter_parallel_parallel.
intros.
DecompAndAll.
assert (P<>Q).
eapply elim_length_ratio_on_parallel_d_2.
Geometry.
unfold not.
intro.
assert (U<>V).
assert (A<>Y).
assert (parallel P Q Y A).

*****
H11 : parallel P Q Y A
H10 : not (eq A Y)
H9 : not (eq U V)
H7 : Col A R Y
H : not (eq P Q)
H8 : not (parallel U V P Q)
H5 : parallel Y W U V
H6 : parallel Y R P Q
H4 : not (Col R U V)
H3 : parallel A Y C D
H2 : not (eq C D)
H1 : not (eq Y R)
H0 : not (parallel A Y P Q)
A,C,D,P,Q,R,U,V,W,Y : Point
*****
False
+++++
intuition.
-----
Lemma elim_length_ratio_on_inter_parallel_parallel_1 : forall A C D P Q R U V W Y : Point, on_inter_parallel_parallel Y R P Q W U V -> ~ parallel A Y P Q -> Y <> R -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
unfold on_inter_parallel_parallel.
intros.
DecompAndAll.
assert (P<>Q).
eapply elim_length_ratio_on_parallel_d_2.

*****
H : not (eq P Q)
H8 : not (parallel U V P Q)
H5 : parallel Y W U V
H6 : parallel Y R P Q
H4 : not (Col R U V)
H3 : parallel A Y C D
H2 : not (eq C D)
H1 : not (eq Y R)
H0 : not (parallel A Y P Q)
A,C,D,P,Q,R,U,V,W,Y : Point
*****
not (eq C D)
+++++
Geometry.
-----
Lemma elim_length_ratio_on_inter_parallel_parallel_1 : forall A C D P Q R U V W Y : Point, on_inter_parallel_parallel Y R P Q W U V -> ~ parallel A Y P Q -> Y <> R -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
unfold on_inter_parallel_parallel.
intros.
DecompAndAll.
assert (P<>Q).
eapply elim_length_ratio_on_parallel_d_2.

*****
H : not (eq P Q)
H8 : not (parallel U V P Q)
H5 : parallel Y W U V
H6 : parallel Y R P Q
H4 : not (Col R U V)
H3 : parallel A Y C D
H2 : not (eq C D)
H1 : not (eq Y R)
H0 : not (parallel A Y P Q)
A,C,D,P,Q,R,U,V,W,Y : Point
*****
parallel A Y C D
+++++
Geometry.
-----
Lemma elim_length_ratio_on_inter_parallel_parallel_1 : forall A C D P Q R U V W Y : Point, on_inter_parallel_parallel Y R P Q W U V -> ~ parallel A Y P Q -> Y <> R -> C <> D -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.
Proof.
unfold on_inter_parallel_parallel.
intros.
DecompAndAll.
assert (P<>Q).

*****

*****

+++++
Qed.
-----
Lemma elim_length_ratio_on_inter_parallel_parallel_2 :\n    forall A C D P Q R U V W Y : Point,\n    on_inter_parallel_parallel Y R P Q W U V ->\n    parallel A Y P Q ->\n    Y <> A ->\n    C <> D ->\n    Y <> W ->\n    parallel A Y C D ->\n    A ** Y / C ** D = S4 A U W V / S4 C U D V.
-----
Lemma elim_length_ratio_on_inter_parallel_parallel_2 : forall A C D P Q R U V W Y : Point, on_inter_parallel_parallel Y R P Q W U V -> parallel A Y P Q -> Y <> A -> C <> D -> Y <> W -> parallel A Y C D -> A ** Y / C ** D = S4 A U W V / S4 C U D V.

*****

*****
forall (A C D P Q R U V W Y : Point) (_ : on_inter_parallel_parallel Y R P Q W U V) (_ : parallel A Y P Q) (_ : not (eq Y A)) (_ : not (eq C D)) (_ : not (eq Y W)) (_ : parallel A Y C D), eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (S4 A U W V) (S4 C U D V))
+++++
Proof.
-----
Lemma elim_length_ratio_on_inter_parallel_parallel_2 : forall A C D P Q R U V W Y : Point, on_inter_parallel_parallel Y R P Q W U V -> parallel A Y P Q -> Y <> A -> C <> D -> Y <> W -> parallel A Y C D -> A ** Y / C ** D = S4 A U W V / S4 C U D V.
Proof.

*****

*****
forall (A C D P Q R U V W Y : Point) (_ : on_inter_parallel_parallel Y R P Q W U V) (_ : parallel A Y P Q) (_ : not (eq Y A)) (_ : not (eq C D)) (_ : not (eq Y W)) (_ : parallel A Y C D), eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (S4 A U W V) (S4 C U D V))
+++++
unfold on_inter_parallel_parallel.
-----
Lemma elim_length_ratio_on_inter_parallel_parallel_2 : forall A C D P Q R U V W Y : Point, on_inter_parallel_parallel Y R P Q W U V -> parallel A Y P Q -> Y <> A -> C <> D -> Y <> W -> parallel A Y C D -> A ** Y / C ** D = S4 A U W V / S4 C U D V.
Proof.
unfold on_inter_parallel_parallel.

*****

*****
forall (A C D P Q R U V W Y : Point) (_ : and (not (Col R U V)) (and (parallel Y R P Q) (and (parallel Y W U V) (not (parallel U V P Q))))) (_ : parallel A Y P Q) (_ : not (eq Y A)) (_ : not (eq C D)) (_ : not (eq Y W)) (_ : parallel A Y C D), eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (S4 A U W V) (S4 C U D V))
+++++
intros.
-----
Lemma elim_length_ratio_on_inter_parallel_parallel_2 : forall A C D P Q R U V W Y : Point, on_inter_parallel_parallel Y R P Q W U V -> parallel A Y P Q -> Y <> A -> C <> D -> Y <> W -> parallel A Y C D -> A ** Y / C ** D = S4 A U W V / S4 C U D V.
Proof.
unfold on_inter_parallel_parallel.
intros.

*****
H4 : parallel A Y C D
H3 : not (eq Y W)
H2 : not (eq C D)
H1 : not (eq Y A)
H0 : parallel A Y P Q
H : and (not (Col R U V))\n (and (parallel Y R P Q)\n (and (parallel Y W U V) (not (parallel U V P Q))))
A,C,D,P,Q,R,U,V,W,Y : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (S4 A U W V) (S4 C U D V))
+++++
DecompAndAll.
-----
Lemma elim_length_ratio_on_inter_parallel_parallel_2 : forall A C D P Q R U V W Y : Point, on_inter_parallel_parallel Y R P Q W U V -> parallel A Y P Q -> Y <> A -> C <> D -> Y <> W -> parallel A Y C D -> A ** Y / C ** D = S4 A U W V / S4 C U D V.
Proof.
unfold on_inter_parallel_parallel.
intros.
DecompAndAll.

*****
H9 : not (parallel U V P Q)
H6 : parallel Y W U V
H7 : parallel Y R P Q
H5 : not (Col R U V)
H4 : parallel A Y C D
H3 : not (eq Y W)
H2 : not (eq C D)
H1 : not (eq Y A)
H0 : parallel A Y P Q
A,C,D,P,Q,R,U,V,W,Y : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (S4 A U W V) (S4 C U D V))
+++++
assert (P<>Q).
-----
Lemma elim_length_ratio_on_inter_parallel_parallel_2 : forall A C D P Q R U V W Y : Point, on_inter_parallel_parallel Y R P Q W U V -> parallel A Y P Q -> Y <> A -> C <> D -> Y <> W -> parallel A Y C D -> A ** Y / C ** D = S4 A U W V / S4 C U D V.
Proof.
unfold on_inter_parallel_parallel.
intros.
DecompAndAll.
assert (P<>Q).

*****
H9 : not (parallel U V P Q)
H6 : parallel Y W U V
H7 : parallel Y R P Q
H5 : not (Col R U V)
H4 : parallel A Y C D
H3 : not (eq Y W)
H2 : not (eq C D)
H1 : not (eq Y A)
H0 : parallel A Y P Q
A,C,D,P,Q,R,U,V,W,Y : Point
*****
not (eq P Q)
+++++
unfold not.
-----
Lemma elim_length_ratio_on_inter_parallel_parallel_2 : forall A C D P Q R U V W Y : Point, on_inter_parallel_parallel Y R P Q W U V -> parallel A Y P Q -> Y <> A -> C <> D -> Y <> W -> parallel A Y C D -> A ** Y / C ** D = S4 A U W V / S4 C U D V.
Proof.
unfold on_inter_parallel_parallel.
intros.
DecompAndAll.
assert (P<>Q).
unfold not.

*****
H9 : not (parallel U V P Q)
H6 : parallel Y W U V
H7 : parallel Y R P Q
H5 : not (Col R U V)
H4 : parallel A Y C D
H3 : not (eq Y W)
H2 : not (eq C D)
H1 : not (eq Y A)
H0 : parallel A Y P Q
A,C,D,P,Q,R,U,V,W,Y : Point
*****
forall _ : eq P Q, False
+++++
intro.
-----
Lemma elim_length_ratio_on_inter_parallel_parallel_2 : forall A C D P Q R U V W Y : Point, on_inter_parallel_parallel Y R P Q W U V -> parallel A Y P Q -> Y <> A -> C <> D -> Y <> W -> parallel A Y C D -> A ** Y / C ** D = S4 A U W V / S4 C U D V.
Proof.
unfold on_inter_parallel_parallel.
intros.
DecompAndAll.
assert (P<>Q).
unfold not.
intro.

*****
H : eq P Q
H9 : not (parallel U V P Q)
H6 : parallel Y W U V
H7 : parallel Y R P Q
H5 : not (Col R U V)
H4 : parallel A Y C D
H3 : not (eq Y W)
H2 : not (eq C D)
H1 : not (eq Y A)
H0 : parallel A Y P Q
A,C,D,P,Q,R,U,V,W,Y : Point
*****
False
+++++
subst P.
-----
Lemma elim_length_ratio_on_inter_parallel_parallel_2 : forall A C D P Q R U V W Y : Point, on_inter_parallel_parallel Y R P Q W U V -> parallel A Y P Q -> Y <> A -> C <> D -> Y <> W -> parallel A Y C D -> A ** Y / C ** D = S4 A U W V / S4 C U D V.
Proof.
unfold on_inter_parallel_parallel.
intros.
DecompAndAll.
assert (P<>Q).
unfold not.
intro.
subst P.

*****
H9 : not (parallel U V Q Q)
H6 : parallel Y W U V
H7 : parallel Y R Q Q
H5 : not (Col R U V)
H4 : parallel A Y C D
H3 : not (eq Y W)
H2 : not (eq C D)
H1 : not (eq Y A)
H0 : parallel A Y Q Q
A,C,D,Q,R,U,V,W,Y : Point
*****
False
+++++
Geometry.
-----
Lemma elim_length_ratio_on_inter_parallel_parallel_2 : forall A C D P Q R U V W Y : Point, on_inter_parallel_parallel Y R P Q W U V -> parallel A Y P Q -> Y <> A -> C <> D -> Y <> W -> parallel A Y C D -> A ** Y / C ** D = S4 A U W V / S4 C U D V.
Proof.
unfold on_inter_parallel_parallel.
intros.
DecompAndAll.
assert (P<>Q).

*****
H : not (eq P Q)
H9 : not (parallel U V P Q)
H6 : parallel Y W U V
H7 : parallel Y R P Q
H5 : not (Col R U V)
H4 : parallel A Y C D
H3 : not (eq Y W)
H2 : not (eq C D)
H1 : not (eq Y A)
H0 : parallel A Y P Q
A,C,D,P,Q,R,U,V,W,Y : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (S4 A U W V) (S4 C U D V))
+++++
assert (U<>V).
-----
Lemma elim_length_ratio_on_inter_parallel_parallel_2 : forall A C D P Q R U V W Y : Point, on_inter_parallel_parallel Y R P Q W U V -> parallel A Y P Q -> Y <> A -> C <> D -> Y <> W -> parallel A Y C D -> A ** Y / C ** D = S4 A U W V / S4 C U D V.
Proof.
unfold on_inter_parallel_parallel.
intros.
DecompAndAll.
assert (P<>Q).
assert (U<>V).

*****
H : not (eq P Q)
H9 : not (parallel U V P Q)
H6 : parallel Y W U V
H7 : parallel Y R P Q
H5 : not (Col R U V)
H4 : parallel A Y C D
H3 : not (eq Y W)
H2 : not (eq C D)
H1 : not (eq Y A)
H0 : parallel A Y P Q
A,C,D,P,Q,R,U,V,W,Y : Point
*****
not (eq U V)
+++++
unfold not.
-----
Lemma elim_length_ratio_on_inter_parallel_parallel_2 : forall A C D P Q R U V W Y : Point, on_inter_parallel_parallel Y R P Q W U V -> parallel A Y P Q -> Y <> A -> C <> D -> Y <> W -> parallel A Y C D -> A ** Y / C ** D = S4 A U W V / S4 C U D V.
Proof.
unfold on_inter_parallel_parallel.
intros.
DecompAndAll.
assert (P<>Q).
assert (U<>V).
unfold not.

*****
H : not (eq P Q)
H9 : not (parallel U V P Q)
H6 : parallel Y W U V
H7 : parallel Y R P Q
H5 : not (Col R U V)
H4 : parallel A Y C D
H3 : not (eq Y W)
H2 : not (eq C D)
H1 : not (eq Y A)
H0 : parallel A Y P Q
A,C,D,P,Q,R,U,V,W,Y : Point
*****
forall _ : eq U V, False
+++++
intro.
-----
Lemma elim_length_ratio_on_inter_parallel_parallel_2 : forall A C D P Q R U V W Y : Point, on_inter_parallel_parallel Y R P Q W U V -> parallel A Y P Q -> Y <> A -> C <> D -> Y <> W -> parallel A Y C D -> A ** Y / C ** D = S4 A U W V / S4 C U D V.
Proof.
unfold on_inter_parallel_parallel.
intros.
DecompAndAll.
assert (P<>Q).
assert (U<>V).
unfold not.
intro.

*****
H8 : eq U V
H : not (eq P Q)
H9 : not (parallel U V P Q)
H6 : parallel Y W U V
H7 : parallel Y R P Q
H5 : not (Col R U V)
H4 : parallel A Y C D
H3 : not (eq Y W)
H2 : not (eq C D)
H1 : not (eq Y A)
H0 : parallel A Y P Q
A,C,D,P,Q,R,U,V,W,Y : Point
*****
False
+++++
subst U.
-----
Lemma elim_length_ratio_on_inter_parallel_parallel_2 : forall A C D P Q R U V W Y : Point, on_inter_parallel_parallel Y R P Q W U V -> parallel A Y P Q -> Y <> A -> C <> D -> Y <> W -> parallel A Y C D -> A ** Y / C ** D = S4 A U W V / S4 C U D V.
Proof.
unfold on_inter_parallel_parallel.
intros.
DecompAndAll.
assert (P<>Q).
assert (U<>V).
unfold not.
intro.
subst U.

*****
H : not (eq P Q)
H6 : parallel Y W V V
H9 : not (parallel V V P Q)
H7 : parallel Y R P Q
H5 : not (Col R V V)
H4 : parallel A Y C D
H3 : not (eq Y W)
H2 : not (eq C D)
H1 : not (eq Y A)
H0 : parallel A Y P Q
A,C,D,P,Q,R,V,W,Y : Point
*****
False
+++++
Geometry.
-----
Lemma elim_length_ratio_on_inter_parallel_parallel_2 : forall A C D P Q R U V W Y : Point, on_inter_parallel_parallel Y R P Q W U V -> parallel A Y P Q -> Y <> A -> C <> D -> Y <> W -> parallel A Y C D -> A ** Y / C ** D = S4 A U W V / S4 C U D V.
Proof.
unfold on_inter_parallel_parallel.
intros.
DecompAndAll.
assert (P<>Q).
assert (U<>V).

*****
H8 : not (eq U V)
H : not (eq P Q)
H9 : not (parallel U V P Q)
H6 : parallel Y W U V
H7 : parallel Y R P Q
H5 : not (Col R U V)
H4 : parallel A Y C D
H3 : not (eq Y W)
H2 : not (eq C D)
H1 : not (eq Y A)
H0 : parallel A Y P Q
A,C,D,P,Q,R,U,V,W,Y : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C D)) (Fdiv (S4 A U W V) (S4 C U D V))
+++++
eapply elim_length_ratio_on_parallel_d_2.
-----
Lemma elim_length_ratio_on_inter_parallel_parallel_2 : forall A C D P Q R U V W Y : Point, on_inter_parallel_parallel Y R P Q W U V -> parallel A Y P Q -> Y <> A -> C <> D -> Y <> W -> parallel A Y C D -> A ** Y / C ** D = S4 A U W V / S4 C U D V.
Proof.
unfold on_inter_parallel_parallel.
intros.
DecompAndAll.
assert (P<>Q).
assert (U<>V).
eapply elim_length_ratio_on_parallel_d_2.

*****
H8 : not (eq U V)
H : not (eq P Q)
H9 : not (parallel U V P Q)
H6 : parallel Y W U V
H7 : parallel Y R P Q
H5 : not (Col R U V)
H4 : parallel A Y C D
H3 : not (eq Y W)
H2 : not (eq C D)
H1 : not (eq Y A)
H0 : parallel A Y P Q
A,C,D,P,Q,R,U,V,W,Y : Point
*****
on_parallel_d Y W U V ?lambda
+++++
Geometry.
-----
Lemma elim_length_ratio_on_inter_parallel_parallel_2 : forall A C D P Q R U V W Y : Point, on_inter_parallel_parallel Y R P Q W U V -> parallel A Y P Q -> Y <> A -> C <> D -> Y <> W -> parallel A Y C D -> A ** Y / C ** D = S4 A U W V / S4 C U D V.
Proof.
unfold on_inter_parallel_parallel.
intros.
DecompAndAll.
assert (P<>Q).
assert (U<>V).
eapply elim_length_ratio_on_parallel_d_2.
Geometry.

*****
H8 : not (eq U V)
H : not (eq P Q)
H9 : not (parallel U V P Q)
H6 : parallel Y W U V
H7 : parallel Y R P Q
H5 : not (Col R U V)
H4 : parallel A Y C D
H3 : not (eq Y W)
H2 : not (eq C D)
H1 : not (eq Y A)
H0 : parallel A Y P Q
A,C,D,P,Q,R,U,V,W,Y : Point
*****
on_parallel_d Y W U V ?lambda
+++++
apply on_parallel_to_on_parallel_d.
-----
Lemma elim_length_ratio_on_inter_parallel_parallel_2 : forall A C D P Q R U V W Y : Point, on_inter_parallel_parallel Y R P Q W U V -> parallel A Y P Q -> Y <> A -> C <> D -> Y <> W -> parallel A Y C D -> A ** Y / C ** D = S4 A U W V / S4 C U D V.
Proof.
unfold on_inter_parallel_parallel.
intros.
DecompAndAll.
assert (P<>Q).
assert (U<>V).
eapply elim_length_ratio_on_parallel_d_2.
Geometry.
apply on_parallel_to_on_parallel_d.

*****
H8 : not (eq U V)
H : not (eq P Q)
H9 : not (parallel U V P Q)
H6 : parallel Y W U V
H7 : parallel Y R P Q
H5 : not (Col R U V)
H4 : parallel A Y C D
H3 : not (eq Y W)
H2 : not (eq C D)
H1 : not (eq Y A)
H0 : parallel A Y P Q
A,C,D,P,Q,R,U,V,W,Y : Point
*****
on_parallel Y W U V
+++++
Geometry.
-----
Lemma elim_length_ratio_on_inter_parallel_parallel_2 : forall A C D P Q R U V W Y : Point, on_inter_parallel_parallel Y R P Q W U V -> parallel A Y P Q -> Y <> A -> C <> D -> Y <> W -> parallel A Y C D -> A ** Y / C ** D = S4 A U W V / S4 C U D V.
Proof.
unfold on_inter_parallel_parallel.
intros.
DecompAndAll.
assert (P<>Q).
assert (U<>V).
eapply elim_length_ratio_on_parallel_d_2.
Geometry.
apply on_parallel_to_on_parallel_d.
Geometry.

*****
H8 : not (eq U V)
H : not (eq P Q)
H9 : not (parallel U V P Q)
H6 : parallel Y W U V
H7 : parallel Y R P Q
H5 : not (Col R U V)
H4 : parallel A Y C D
H3 : not (eq Y W)
H2 : not (eq C D)
H1 : not (eq Y A)
H0 : parallel A Y P Q
A,C,D,P,Q,R,U,V,W,Y : Point
*****
on_parallel Y W U V
+++++
unfold on_parallel.
-----
Lemma elim_length_ratio_on_inter_parallel_parallel_2 : forall A C D P Q R U V W Y : Point, on_inter_parallel_parallel Y R P Q W U V -> parallel A Y P Q -> Y <> A -> C <> D -> Y <> W -> parallel A Y C D -> A ** Y / C ** D = S4 A U W V / S4 C U D V.
Proof.
unfold on_inter_parallel_parallel.
intros.
DecompAndAll.
assert (P<>Q).
assert (U<>V).
eapply elim_length_ratio_on_parallel_d_2.
Geometry.
apply on_parallel_to_on_parallel_d.
Geometry.
unfold on_parallel.

*****
H8 : not (eq U V)
H : not (eq P Q)
H9 : not (parallel U V P Q)
H6 : parallel Y W U V
H7 : parallel Y R P Q
H5 : not (Col R U V)
H4 : parallel A Y C D
H3 : not (eq Y W)
H2 : not (eq C D)
H1 : not (eq Y A)
H0 : parallel A Y P Q
A,C,D,P,Q,R,U,V,W,Y : Point
*****
and (not (eq U V)) (parallel W Y U V)
+++++
repeat split.
-----
Lemma elim_length_ratio_on_inter_parallel_parallel_2 : forall A C D P Q R U V W Y : Point, on_inter_parallel_parallel Y R P Q W U V -> parallel A Y P Q -> Y <> A -> C <> D -> Y <> W -> parallel A Y C D -> A ** Y / C ** D = S4 A U W V / S4 C U D V.
Proof.
unfold on_inter_parallel_parallel.
intros.
DecompAndAll.
assert (P<>Q).
assert (U<>V).
eapply elim_length_ratio_on_parallel_d_2.
Geometry.
apply on_parallel_to_on_parallel_d.
Geometry.
unfold on_parallel.
repeat split.

*****
H8 : not (eq U V)
H : not (eq P Q)
H9 : not (parallel U V P Q)
H6 : parallel Y W U V
H7 : parallel Y R P Q
H5 : not (Col R U V)
H4 : parallel A Y C D
H3 : not (eq Y W)
H2 : not (eq C D)
H1 : not (eq Y A)
H0 : parallel A Y P Q
A,C,D,P,Q,R,U,V,W,Y : Point
*****
not (eq U V)
+++++
Geometry.
-----
Lemma elim_length_ratio_on_inter_parallel_parallel_2 : forall A C D P Q R U V W Y : Point, on_inter_parallel_parallel Y R P Q W U V -> parallel A Y P Q -> Y <> A -> C <> D -> Y <> W -> parallel A Y C D -> A ** Y / C ** D = S4 A U W V / S4 C U D V.
Proof.
unfold on_inter_parallel_parallel.
intros.
DecompAndAll.
assert (P<>Q).
assert (U<>V).
eapply elim_length_ratio_on_parallel_d_2.
Geometry.
apply on_parallel_to_on_parallel_d.
Geometry.
unfold on_parallel.
repeat split.

*****
H8 : not (eq U V)
H : not (eq P Q)
H9 : not (parallel U V P Q)
H6 : parallel Y W U V
H7 : parallel Y R P Q
H5 : not (Col R U V)
H4 : parallel A Y C D
H3 : not (eq Y W)
H2 : not (eq C D)
H1 : not (eq Y A)
H0 : parallel A Y P Q
A,C,D,P,Q,R,U,V,W,Y : Point
*****
parallel W Y U V
+++++
Geometry.
-----
Lemma elim_length_ratio_on_inter_parallel_parallel_2 : forall A C D P Q R U V W Y : Point, on_inter_parallel_parallel Y R P Q W U V -> parallel A Y P Q -> Y <> A -> C <> D -> Y <> W -> parallel A Y C D -> A ** Y / C ** D = S4 A U W V / S4 C U D V.
Proof.
unfold on_inter_parallel_parallel.
intros.
DecompAndAll.
assert (P<>Q).
assert (U<>V).
eapply elim_length_ratio_on_parallel_d_2.

*****
H8 : not (eq U V)
H : not (eq P Q)
H9 : not (parallel U V P Q)
H6 : parallel Y W U V
H7 : parallel Y R P Q
H5 : not (Col R U V)
H4 : parallel A Y C D
H3 : not (eq Y W)
H2 : not (eq C D)
H1 : not (eq Y A)
H0 : parallel A Y P Q
A,C,D,P,Q,R,U,V,W,Y : Point
*****
not (Col A W Y)
+++++
Geometry.
-----
Lemma elim_length_ratio_on_inter_parallel_parallel_2 : forall A C D P Q R U V W Y : Point, on_inter_parallel_parallel Y R P Q W U V -> parallel A Y P Q -> Y <> A -> C <> D -> Y <> W -> parallel A Y C D -> A ** Y / C ** D = S4 A U W V / S4 C U D V.
Proof.
unfold on_inter_parallel_parallel.
intros.
DecompAndAll.
assert (P<>Q).
assert (U<>V).
eapply elim_length_ratio_on_parallel_d_2.
Geometry.

*****
H8 : not (eq U V)
H : not (eq P Q)
H9 : not (parallel U V P Q)
H6 : parallel Y W U V
H7 : parallel Y R P Q
H5 : not (Col R U V)
H4 : parallel A Y C D
H3 : not (eq Y W)
H2 : not (eq C D)
H1 : not (eq Y A)
H0 : parallel A Y P Q
A,C,D,P,Q,R,U,V,W,Y : Point
*****
not (Col A W Y)
+++++
unfold not.
-----
Lemma elim_length_ratio_on_inter_parallel_parallel_2 : forall A C D P Q R U V W Y : Point, on_inter_parallel_parallel Y R P Q W U V -> parallel A Y P Q -> Y <> A -> C <> D -> Y <> W -> parallel A Y C D -> A ** Y / C ** D = S4 A U W V / S4 C U D V.
Proof.
unfold on_inter_parallel_parallel.
intros.
DecompAndAll.
assert (P<>Q).
assert (U<>V).
eapply elim_length_ratio_on_parallel_d_2.
Geometry.
unfold not.

*****
H8 : not (eq U V)
H : not (eq P Q)
H9 : not (parallel U V P Q)
H6 : parallel Y W U V
H7 : parallel Y R P Q
H5 : not (Col R U V)
H4 : parallel A Y C D
H3 : not (eq Y W)
H2 : not (eq C D)
H1 : not (eq Y A)
H0 : parallel A Y P Q
A,C,D,P,Q,R,U,V,W,Y : Point
*****
forall _ : Col A W Y, False
+++++
intro.
-----
Lemma elim_length_ratio_on_inter_parallel_parallel_2 : forall A C D P Q R U V W Y : Point, on_inter_parallel_parallel Y R P Q W U V -> parallel A Y P Q -> Y <> A -> C <> D -> Y <> W -> parallel A Y C D -> A ** Y / C ** D = S4 A U W V / S4 C U D V.
Proof.
unfold on_inter_parallel_parallel.
intros.
DecompAndAll.
assert (P<>Q).
assert (U<>V).
eapply elim_length_ratio_on_parallel_d_2.
Geometry.
unfold not.
intro.

*****
H10 : Col A W Y
H8 : not (eq U V)
H : not (eq P Q)
H9 : not (parallel U V P Q)
H6 : parallel Y W U V
H7 : parallel Y R P Q
H5 : not (Col R U V)
H4 : parallel A Y C D
H3 : not (eq Y W)
H2 : not (eq C D)
H1 : not (eq Y A)
H0 : parallel A Y P Q
A,C,D,P,Q,R,U,V,W,Y : Point
*****
False
+++++
assert (parallel A Y Y R).
-----
Lemma elim_length_ratio_on_inter_parallel_parallel_2 : forall A C D P Q R U V W Y : Point, on_inter_parallel_parallel Y R P Q W U V -> parallel A Y P Q -> Y <> A -> C <> D -> Y <> W -> parallel A Y C D -> A ** Y / C ** D = S4 A U W V / S4 C U D V.
Proof.
unfold on_inter_parallel_parallel.
intros.
DecompAndAll.
assert (P<>Q).
assert (U<>V).
eapply elim_length_ratio_on_parallel_d_2.
Geometry.
unfold not.
intro.
assert (parallel A Y Y R).

*****
H10 : Col A W Y
H8 : not (eq U V)
H : not (eq P Q)
H9 : not (parallel U V P Q)
H6 : parallel Y W U V
H7 : parallel Y R P Q
H5 : not (Col R U V)
H4 : parallel A Y C D
H3 : not (eq Y W)
H2 : not (eq C D)
H1 : not (eq Y A)
H0 : parallel A Y P Q
A,C,D,P,Q,R,U,V,W,Y : Point
*****
parallel A Y Y R
+++++
eapply parallel_transitivity.
-----
Lemma elim_length_ratio_on_inter_parallel_parallel_2 : forall A C D P Q R U V W Y : Point, on_inter_parallel_parallel Y R P Q W U V -> parallel A Y P Q -> Y <> A -> C <> D -> Y <> W -> parallel A Y C D -> A ** Y / C ** D = S4 A U W V / S4 C U D V.
Proof.
unfold on_inter_parallel_parallel.
intros.
DecompAndAll.
assert (P<>Q).
assert (U<>V).
eapply elim_length_ratio_on_parallel_d_2.
Geometry.
unfold not.
intro.
assert (parallel A Y Y R).
eapply parallel_transitivity.

*****
H10 : Col A W Y
H8 : not (eq U V)
H : not (eq P Q)
H9 : not (parallel U V P Q)
H6 : parallel Y W U V
H7 : parallel Y R P Q
H5 : not (Col R U V)
H4 : parallel A Y C D
H3 : not (eq Y W)
H2 : not (eq C D)
H1 : not (eq Y A)
H0 : parallel A Y P Q
A,C,D,P,Q,R,U,V,W,Y : Point
*****
not (eq ?C ?D)
+++++
apply H.
-----
Lemma elim_length_ratio_on_inter_parallel_parallel_2 : forall A C D P Q R U V W Y : Point, on_inter_parallel_parallel Y R P Q W U V -> parallel A Y P Q -> Y <> A -> C <> D -> Y <> W -> parallel A Y C D -> A ** Y / C ** D = S4 A U W V / S4 C U D V.
Proof.
unfold on_inter_parallel_parallel.
intros.
DecompAndAll.
assert (P<>Q).
assert (U<>V).
eapply elim_length_ratio_on_parallel_d_2.
Geometry.
unfold not.
intro.
assert (parallel A Y Y R).
eapply parallel_transitivity.

*****
H10 : Col A W Y
H8 : not (eq U V)
H : not (eq P Q)
H9 : not (parallel U V P Q)
H6 : parallel Y W U V
H7 : parallel Y R P Q
H5 : not (Col R U V)
H4 : parallel A Y C D
H3 : not (eq Y W)
H2 : not (eq C D)
H1 : not (eq Y A)
H0 : parallel A Y P Q
A,C,D,P,Q,R,U,V,W,Y : Point
*****
parallel A Y P Q
+++++
Geometry.
-----
Lemma elim_length_ratio_on_inter_parallel_parallel_2 : forall A C D P Q R U V W Y : Point, on_inter_parallel_parallel Y R P Q W U V -> parallel A Y P Q -> Y <> A -> C <> D -> Y <> W -> parallel A Y C D -> A ** Y / C ** D = S4 A U W V / S4 C U D V.
Proof.
unfold on_inter_parallel_parallel.
intros.
DecompAndAll.
assert (P<>Q).
assert (U<>V).
eapply elim_length_ratio_on_parallel_d_2.
Geometry.
unfold not.
intro.
assert (parallel A Y Y R).
eapply parallel_transitivity.

*****
H10 : Col A W Y
H8 : not (eq U V)
H : not (eq P Q)
H9 : not (parallel U V P Q)
H6 : parallel Y W U V
H7 : parallel Y R P Q
H5 : not (Col R U V)
H4 : parallel A Y C D
H3 : not (eq Y W)
H2 : not (eq C D)
H1 : not (eq Y A)
H0 : parallel A Y P Q
A,C,D,P,Q,R,U,V,W,Y : Point
*****
parallel P Q Y R
+++++
Geometry.
-----
Lemma elim_length_ratio_on_inter_parallel_parallel_2 : forall A C D P Q R U V W Y : Point, on_inter_parallel_parallel Y R P Q W U V -> parallel A Y P Q -> Y <> A -> C <> D -> Y <> W -> parallel A Y C D -> A ** Y / C ** D = S4 A U W V / S4 C U D V.
Proof.
unfold on_inter_parallel_parallel.
intros.
DecompAndAll.
assert (P<>Q).
assert (U<>V).
eapply elim_length_ratio_on_parallel_d_2.
Geometry.
unfold not.
intro.
assert (parallel A Y Y R).

*****
H11 : parallel A Y Y R
H10 : Col A W Y
H8 : not (eq U V)
H : not (eq P Q)
H9 : not (parallel U V P Q)
H6 : parallel Y W U V
H7 : parallel Y R P Q
H5 : not (Col R U V)
H4 : parallel A Y C D
H3 : not (eq Y W)
H2 : not (eq C D)
H1 : not (eq Y A)
H0 : parallel A Y P Q
A,C,D,P,Q,R,U,V,W,Y : Point
*****
False
+++++
assert (Col Y A R).
-----
Lemma elim_length_ratio_on_inter_parallel_parallel_2 : forall A C D P Q R U V W Y : Point, on_inter_parallel_parallel Y R P Q W U V -> parallel A Y P Q -> Y <> A -> C <> D -> Y <> W -> parallel A Y C D -> A ** Y / C ** D = S4 A U W V / S4 C U D V.
Proof.
unfold on_inter_parallel_parallel.
intros.
DecompAndAll.
assert (P<>Q).
assert (U<>V).
eapply elim_length_ratio_on_parallel_d_2.
Geometry.
unfold not.
intro.
assert (parallel A Y Y R).
assert (Col Y A R).

*****
H11 : parallel A Y Y R
H10 : Col A W Y
H8 : not (eq U V)
H : not (eq P Q)
H9 : not (parallel U V P Q)
H6 : parallel Y W U V
H7 : parallel Y R P Q
H5 : not (Col R U V)
H4 : parallel A Y C D
H3 : not (eq Y W)
H2 : not (eq C D)
H1 : not (eq Y A)
H0 : parallel A Y P Q
A,C,D,P,Q,R,U,V,W,Y : Point
*****
Col Y A R
+++++
assert (parallel Y A Y R).
-----
Lemma elim_length_ratio_on_inter_parallel_parallel_2 : forall A C D P Q R U V W Y : Point, on_inter_parallel_parallel Y R P Q W U V -> parallel A Y P Q -> Y <> A -> C <> D -> Y <> W -> parallel A Y C D -> A ** Y / C ** D = S4 A U W V / S4 C U D V.
Proof.
unfold on_inter_parallel_parallel.
intros.
DecompAndAll.
assert (P<>Q).
assert (U<>V).
eapply elim_length_ratio_on_parallel_d_2.
Geometry.
unfold not.
intro.
assert (parallel A Y Y R).
assert (Col Y A R).
assert (parallel Y A Y R).

*****
H11 : parallel A Y Y R
H10 : Col A W Y
H8 : not (eq U V)
H : not (eq P Q)
H9 : not (parallel U V P Q)
H6 : parallel Y W U V
H7 : parallel Y R P Q
H5 : not (Col R U V)
H4 : parallel A Y C D
H3 : not (eq Y W)
H2 : not (eq C D)
H1 : not (eq Y A)
H0 : parallel A Y P Q
A,C,D,P,Q,R,U,V,W,Y : Point
*****
parallel Y A Y R
+++++
Geometry.
-----
Lemma elim_length_ratio_on_inter_parallel_parallel_2 : forall A C D P Q R U V W Y : Point, on_inter_parallel_parallel Y R P Q W U V -> parallel A Y P Q -> Y <> A -> C <> D -> Y <> W -> parallel A Y C D -> A ** Y / C ** D = S4 A U W V / S4 C U D V.
Proof.
unfold on_inter_parallel_parallel.
intros.
DecompAndAll.
assert (P<>Q).
assert (U<>V).
eapply elim_length_ratio_on_parallel_d_2.
Geometry.
unfold not.
intro.
assert (parallel A Y Y R).
assert (Col Y A R).
assert (parallel Y A Y R).

*****
H12 : parallel Y A Y R
H11 : parallel A Y Y R
H10 : Col A W Y
H8 : not (eq U V)
H : not (eq P Q)
H9 : not (parallel U V P Q)
H6 : parallel Y W U V
H7 : parallel Y R P Q
H5 : not (Col R U V)
H4 : parallel A Y C D
H3 : not (eq Y W)
H2 : not (eq C D)
H1 : not (eq Y A)
H0 : parallel A Y P Q
A,C,D,P,Q,R,U,V,W,Y : Point
*****
Col Y A R
+++++
Geometry.
-----
Lemma elim_length_ratio_on_inter_parallel_parallel_2 : forall A C D P Q R U V W Y : Point, on_inter_parallel_parallel Y R P Q W U V -> parallel A Y P Q -> Y <> A -> C <> D -> Y <> W -> parallel A Y C D -> A ** Y / C ** D = S4 A U W V / S4 C U D V.
Proof.
unfold on_inter_parallel_parallel.
intros.
DecompAndAll.
assert (P<>Q).
assert (U<>V).
eapply elim_length_ratio_on_parallel_d_2.
Geometry.
unfold not.
intro.
assert (parallel A Y Y R).
assert (Col Y A R).
assert (parallel Y A Y R).
Geometry.

*****
H12 : parallel Y A Y R
H11 : parallel A Y Y R
H10 : Col A W Y
H8 : not (eq U V)
H : not (eq P Q)
H9 : not (parallel U V P Q)
H6 : parallel Y W U V
H7 : parallel Y R P Q
H5 : not (Col R U V)
H4 : parallel A Y C D
H3 : not (eq Y W)
H2 : not (eq C D)
H1 : not (eq Y A)
H0 : parallel A Y P Q
A,C,D,P,Q,R,U,V,W,Y : Point
*****
Col Y A R
+++++
eapply par_col_col_1.
-----
Lemma elim_length_ratio_on_inter_parallel_parallel_2 : forall A C D P Q R U V W Y : Point, on_inter_parallel_parallel Y R P Q W U V -> parallel A Y P Q -> Y <> A -> C <> D -> Y <> W -> parallel A Y C D -> A ** Y / C ** D = S4 A U W V / S4 C U D V.
Proof.
unfold on_inter_parallel_parallel.
intros.
DecompAndAll.
assert (P<>Q).
assert (U<>V).
eapply elim_length_ratio_on_parallel_d_2.
Geometry.
unfold not.
intro.
assert (parallel A Y Y R).
assert (Col Y A R).
assert (parallel Y A Y R).
Geometry.
eapply par_col_col_1.

*****
H12 : parallel Y A Y R
H11 : parallel A Y Y R
H10 : Col A W Y
H8 : not (eq U V)
H : not (eq P Q)
H9 : not (parallel U V P Q)
H6 : parallel Y W U V
H7 : parallel Y R P Q
H5 : not (Col R U V)
H4 : parallel A Y C D
H3 : not (eq Y W)
H2 : not (eq C D)
H1 : not (eq Y A)
H0 : parallel A Y P Q
A,C,D,P,Q,R,U,V,W,Y : Point
*****
parallel Y A ?C R
+++++
apply H12.
-----
Lemma elim_length_ratio_on_inter_parallel_parallel_2 : forall A C D P Q R U V W Y : Point, on_inter_parallel_parallel Y R P Q W U V -> parallel A Y P Q -> Y <> A -> C <> D -> Y <> W -> parallel A Y C D -> A ** Y / C ** D = S4 A U W V / S4 C U D V.
Proof.
unfold on_inter_parallel_parallel.
intros.
DecompAndAll.
assert (P<>Q).
assert (U<>V).
eapply elim_length_ratio_on_parallel_d_2.
Geometry.
unfold not.
intro.
assert (parallel A Y Y R).
assert (Col Y A R).
assert (parallel Y A Y R).
Geometry.
eapply par_col_col_1.

*****
H12 : parallel Y A Y R
H11 : parallel A Y Y R
H10 : Col A W Y
H8 : not (eq U V)
H : not (eq P Q)
H9 : not (parallel U V P Q)
H6 : parallel Y W U V
H7 : parallel Y R P Q
H5 : not (Col R U V)
H4 : parallel A Y C D
H3 : not (eq Y W)
H2 : not (eq C D)
H1 : not (eq Y A)
H0 : parallel A Y P Q
A,C,D,P,Q,R,U,V,W,Y : Point
*****
Col Y A Y
+++++
Geometry.
-----
Lemma elim_length_ratio_on_inter_parallel_parallel_2 : forall A C D P Q R U V W Y : Point, on_inter_parallel_parallel Y R P Q W U V -> parallel A Y P Q -> Y <> A -> C <> D -> Y <> W -> parallel A Y C D -> A ** Y / C ** D = S4 A U W V / S4 C U D V.
Proof.
unfold on_inter_parallel_parallel.
intros.
DecompAndAll.
assert (P<>Q).
assert (U<>V).
eapply elim_length_ratio_on_parallel_d_2.
Geometry.
unfold not.
intro.
assert (parallel A Y Y R).
assert (Col Y A R).

*****
H12 : Col Y A R
H11 : parallel A Y Y R
H10 : Col A W Y
H8 : not (eq U V)
H : not (eq P Q)
H9 : not (parallel U V P Q)
H6 : parallel Y W U V
H7 : parallel Y R P Q
H5 : not (Col R U V)
H4 : parallel A Y C D
H3 : not (eq Y W)
H2 : not (eq C D)
H1 : not (eq Y A)
H0 : parallel A Y P Q
A,C,D,P,Q,R,U,V,W,Y : Point
*****
False
+++++
assert (Col Y R W).
-----
Lemma elim_length_ratio_on_inter_parallel_parallel_2 : forall A C D P Q R U V W Y : Point, on_inter_parallel_parallel Y R P Q W U V -> parallel A Y P Q -> Y <> A -> C <> D -> Y <> W -> parallel A Y C D -> A ** Y / C ** D = S4 A U W V / S4 C U D V.
Proof.
unfold on_inter_parallel_parallel.
intros.
DecompAndAll.
assert (P<>Q).
assert (U<>V).
eapply elim_length_ratio_on_parallel_d_2.
Geometry.
unfold not.
intro.
assert (parallel A Y Y R).
assert (Col Y A R).
assert (Col Y R W).

*****
H12 : Col Y A R
H11 : parallel A Y Y R
H10 : Col A W Y
H8 : not (eq U V)
H : not (eq P Q)
H9 : not (parallel U V P Q)
H6 : parallel Y W U V
H7 : parallel Y R P Q
H5 : not (Col R U V)
H4 : parallel A Y C D
H3 : not (eq Y W)
H2 : not (eq C D)
H1 : not (eq Y A)
H0 : parallel A Y P Q
A,C,D,P,Q,R,U,V,W,Y : Point
*****
Col Y R W
+++++
eapply col_trans_1 with (B:= A).
-----
Lemma elim_length_ratio_on_inter_parallel_parallel_2 : forall A C D P Q R U V W Y : Point, on_inter_parallel_parallel Y R P Q W U V -> parallel A Y P Q -> Y <> A -> C <> D -> Y <> W -> parallel A Y C D -> A ** Y / C ** D = S4 A U W V / S4 C U D V.
Proof.
unfold on_inter_parallel_parallel.
intros.
DecompAndAll.
assert (P<>Q).
assert (U<>V).
eapply elim_length_ratio_on_parallel_d_2.
Geometry.
unfold not.
intro.
assert (parallel A Y Y R).
assert (Col Y A R).
assert (Col Y R W).
eapply col_trans_1 with (B:= A).

*****
H12 : Col Y A R
H11 : parallel A Y Y R
H10 : Col A W Y
H8 : not (eq U V)
H : not (eq P Q)
H9 : not (parallel U V P Q)
H6 : parallel Y W U V
H7 : parallel Y R P Q
H5 : not (Col R U V)
H4 : parallel A Y C D
H3 : not (eq Y W)
H2 : not (eq C D)
H1 : not (eq Y A)
H0 : parallel A Y P Q
A,C,D,P,Q,R,U,V,W,Y : Point
*****
not (eq Y A)
+++++
Geometry.
-----
Lemma elim_length_ratio_on_inter_parallel_parallel_2 : forall A C D P Q R U V W Y : Point, on_inter_parallel_parallel Y R P Q W U V -> parallel A Y P Q -> Y <> A -> C <> D -> Y <> W -> parallel A Y C D -> A ** Y / C ** D = S4 A U W V / S4 C U D V.
Proof.
unfold on_inter_parallel_parallel.
intros.
DecompAndAll.
assert (P<>Q).
assert (U<>V).
eapply elim_length_ratio_on_parallel_d_2.
Geometry.
unfold not.
intro.
assert (parallel A Y Y R).
assert (Col Y A R).
assert (Col Y R W).
eapply col_trans_1 with (B:= A).

*****
H12 : Col Y A R
H11 : parallel A Y Y R
H10 : Col A W Y
H8 : not (eq U V)
H : not (eq P Q)
H9 : not (parallel U V P Q)
H6 : parallel Y W U V
H7 : parallel Y R P Q
H5 : not (Col R U V)
H4 : parallel A Y C D
H3 : not (eq Y W)
H2 : not (eq C D)
H1 : not (eq Y A)
H0 : parallel A Y P Q
A,C,D,P,Q,R,U,V,W,Y : Point
*****
Col Y A R
+++++
Geometry.
-----
Lemma elim_length_ratio_on_inter_parallel_parallel_2 : forall A C D P Q R U V W Y : Point, on_inter_parallel_parallel Y R P Q W U V -> parallel A Y P Q -> Y <> A -> C <> D -> Y <> W -> parallel A Y C D -> A ** Y / C ** D = S4 A U W V / S4 C U D V.
Proof.
unfold on_inter_parallel_parallel.
intros.
DecompAndAll.
assert (P<>Q).
assert (U<>V).
eapply elim_length_ratio_on_parallel_d_2.
Geometry.
unfold not.
intro.
assert (parallel A Y Y R).
assert (Col Y A R).
assert (Col Y R W).
eapply col_trans_1 with (B:= A).

*****
H12 : Col Y A R
H11 : parallel A Y Y R
H10 : Col A W Y
H8 : not (eq U V)
H : not (eq P Q)
H9 : not (parallel U V P Q)
H6 : parallel Y W U V
H7 : parallel Y R P Q
H5 : not (Col R U V)
H4 : parallel A Y C D
H3 : not (eq Y W)
H2 : not (eq C D)
H1 : not (eq Y A)
H0 : parallel A Y P Q
A,C,D,P,Q,R,U,V,W,Y : Point
*****
Col Y A W
+++++
Geometry.
-----
Lemma elim_length_ratio_on_inter_parallel_parallel_2 : forall A C D P Q R U V W Y : Point, on_inter_parallel_parallel Y R P Q W U V -> parallel A Y P Q -> Y <> A -> C <> D -> Y <> W -> parallel A Y C D -> A ** Y / C ** D = S4 A U W V / S4 C U D V.
Proof.
unfold on_inter_parallel_parallel.
intros.
DecompAndAll.
assert (P<>Q).
assert (U<>V).
eapply elim_length_ratio_on_parallel_d_2.
Geometry.
unfold not.
intro.
assert (parallel A Y Y R).
assert (Col Y A R).
assert (Col Y R W).

*****
H13 : Col Y R W
H12 : Col Y A R
H11 : parallel A Y Y R
H10 : Col A W Y
H8 : not (eq U V)
H : not (eq P Q)
H9 : not (parallel U V P Q)
H6 : parallel Y W U V
H7 : parallel Y R P Q
H5 : not (Col R U V)
H4 : parallel A Y C D
H3 : not (eq Y W)
H2 : not (eq C D)
H1 : not (eq Y A)
H0 : parallel A Y P Q
A,C,D,P,Q,R,U,V,W,Y : Point
*****
False
+++++
assert (parallel U V Y R).
-----
Lemma elim_length_ratio_on_inter_parallel_parallel_2 : forall A C D P Q R U V W Y : Point, on_inter_parallel_parallel Y R P Q W U V -> parallel A Y P Q -> Y <> A -> C <> D -> Y <> W -> parallel A Y C D -> A ** Y / C ** D = S4 A U W V / S4 C U D V.
Proof.
unfold on_inter_parallel_parallel.
intros.
DecompAndAll.
assert (P<>Q).
assert (U<>V).
eapply elim_length_ratio_on_parallel_d_2.
Geometry.
unfold not.
intro.
assert (parallel A Y Y R).
assert (Col Y A R).
assert (Col Y R W).
assert (parallel U V Y R).

*****
H13 : Col Y R W
H12 : Col Y A R
H11 : parallel A Y Y R
H10 : Col A W Y
H8 : not (eq U V)
H : not (eq P Q)
H9 : not (parallel U V P Q)
H6 : parallel Y W U V
H7 : parallel Y R P Q
H5 : not (Col R U V)
H4 : parallel A Y C D
H3 : not (eq Y W)
H2 : not (eq C D)
H1 : not (eq Y A)
H0 : parallel A Y P Q
A,C,D,P,Q,R,U,V,W,Y : Point
*****
parallel U V Y R
+++++
eapply col_par_par.
-----
Lemma elim_length_ratio_on_inter_parallel_parallel_2 : forall A C D P Q R U V W Y : Point, on_inter_parallel_parallel Y R P Q W U V -> parallel A Y P Q -> Y <> A -> C <> D -> Y <> W -> parallel A Y C D -> A ** Y / C ** D = S4 A U W V / S4 C U D V.
Proof.
unfold on_inter_parallel_parallel.
intros.
DecompAndAll.
assert (P<>Q).
assert (U<>V).
eapply elim_length_ratio_on_parallel_d_2.
Geometry.
unfold not.
intro.
assert (parallel A Y Y R).
assert (Col Y A R).
assert (Col Y R W).
assert (parallel U V Y R).
eapply col_par_par.

*****
H13 : Col Y R W
H12 : Col Y A R
H11 : parallel A Y Y R
H10 : Col A W Y
H8 : not (eq U V)
H : not (eq P Q)
H9 : not (parallel U V P Q)
H6 : parallel Y W U V
H7 : parallel Y R P Q
H5 : not (Col R U V)
H4 : parallel A Y C D
H3 : not (eq Y W)
H2 : not (eq C D)
H1 : not (eq Y A)
H0 : parallel A Y P Q
A,C,D,P,Q,R,U,V,W,Y : Point
*****
not (eq Y ?D)
+++++
apply H3.
-----
Lemma elim_length_ratio_on_inter_parallel_parallel_2 : forall A C D P Q R U V W Y : Point, on_inter_parallel_parallel Y R P Q W U V -> parallel A Y P Q -> Y <> A -> C <> D -> Y <> W -> parallel A Y C D -> A ** Y / C ** D = S4 A U W V / S4 C U D V.
Proof.
unfold on_inter_parallel_parallel.
intros.
DecompAndAll.
assert (P<>Q).
assert (U<>V).
eapply elim_length_ratio_on_parallel_d_2.
Geometry.
unfold not.
intro.
assert (parallel A Y Y R).
assert (Col Y A R).
assert (Col Y R W).
assert (parallel U V Y R).
eapply col_par_par.

*****
H13 : Col Y R W
H12 : Col Y A R
H11 : parallel A Y Y R
H10 : Col A W Y
H8 : not (eq U V)
H : not (eq P Q)
H9 : not (parallel U V P Q)
H6 : parallel Y W U V
H7 : parallel Y R P Q
H5 : not (Col R U V)
H4 : parallel A Y C D
H3 : not (eq Y W)
H2 : not (eq C D)
H1 : not (eq Y A)
H0 : parallel A Y P Q
A,C,D,P,Q,R,U,V,W,Y : Point
*****
parallel U V Y W
+++++
Geometry.
-----
Lemma elim_length_ratio_on_inter_parallel_parallel_2 : forall A C D P Q R U V W Y : Point, on_inter_parallel_parallel Y R P Q W U V -> parallel A Y P Q -> Y <> A -> C <> D -> Y <> W -> parallel A Y C D -> A ** Y / C ** D = S4 A U W V / S4 C U D V.
Proof.
unfold on_inter_parallel_parallel.
intros.
DecompAndAll.
assert (P<>Q).
assert (U<>V).
eapply elim_length_ratio_on_parallel_d_2.
Geometry.
unfold not.
intro.
assert (parallel A Y Y R).
assert (Col Y A R).
assert (Col Y R W).
assert (parallel U V Y R).
eapply col_par_par.

*****
H13 : Col Y R W
H12 : Col Y A R
H11 : parallel A Y Y R
H10 : Col A W Y
H8 : not (eq U V)
H : not (eq P Q)
H9 : not (parallel U V P Q)
H6 : parallel Y W U V
H7 : parallel Y R P Q
H5 : not (Col R U V)
H4 : parallel A Y C D
H3 : not (eq Y W)
H2 : not (eq C D)
H1 : not (eq Y A)
H0 : parallel A Y P Q
A,C,D,P,Q,R,U,V,W,Y : Point
*****
Col Y W R
+++++
Geometry.
-----
Lemma elim_length_ratio_on_inter_parallel_parallel_2 : forall A C D P Q R U V W Y : Point, on_inter_parallel_parallel Y R P Q W U V -> parallel A Y P Q -> Y <> A -> C <> D -> Y <> W -> parallel A Y C D -> A ** Y / C ** D = S4 A U W V / S4 C U D V.
Proof.
unfold on_inter_parallel_parallel.
intros.
DecompAndAll.
assert (P<>Q).
assert (U<>V).
eapply elim_length_ratio_on_parallel_d_2.
Geometry.
unfold not.
intro.
assert (parallel A Y Y R).
assert (Col Y A R).
assert (Col Y R W).
assert (parallel U V Y R).

*****
H14 : parallel U V Y R
H13 : Col Y R W
H12 : Col Y A R
H11 : parallel A Y Y R
H10 : Col A W Y
H8 : not (eq U V)
H : not (eq P Q)
H9 : not (parallel U V P Q)
H6 : parallel Y W U V
H7 : parallel Y R P Q
H5 : not (Col R U V)
H4 : parallel A Y C D
H3 : not (eq Y W)
H2 : not (eq C D)
H1 : not (eq Y A)
H0 : parallel A Y P Q
A,C,D,P,Q,R,U,V,W,Y : Point
*****
False
+++++
assert (Y<>R).
-----
Lemma elim_length_ratio_on_inter_parallel_parallel_2 : forall A C D P Q R U V W Y : Point, on_inter_parallel_parallel Y R P Q W U V -> parallel A Y P Q -> Y <> A -> C <> D -> Y <> W -> parallel A Y C D -> A ** Y / C ** D = S4 A U W V / S4 C U D V.
Proof.
unfold on_inter_parallel_parallel.
intros.
DecompAndAll.
assert (P<>Q).
assert (U<>V).
eapply elim_length_ratio_on_parallel_d_2.
Geometry.
unfold not.
intro.
assert (parallel A Y Y R).
assert (Col Y A R).
assert (Col Y R W).
assert (parallel U V Y R).
assert (Y<>R).

*****
H14 : parallel U V Y R
H13 : Col Y R W
H12 : Col Y A R
H11 : parallel A Y Y R
H10 : Col A W Y
H8 : not (eq U V)
H : not (eq P Q)
H9 : not (parallel U V P Q)
H6 : parallel Y W U V
H7 : parallel Y R P Q
H5 : not (Col R U V)
H4 : parallel A Y C D
H3 : not (eq Y W)
H2 : not (eq C D)
H1 : not (eq Y A)
H0 : parallel A Y P Q
A,C,D,P,Q,R,U,V,W,Y : Point
*****
not (eq Y R)
+++++
unfold not.
-----
Lemma elim_length_ratio_on_inter_parallel_parallel_2 : forall A C D P Q R U V W Y : Point, on_inter_parallel_parallel Y R P Q W U V -> parallel A Y P Q -> Y <> A -> C <> D -> Y <> W -> parallel A Y C D -> A ** Y / C ** D = S4 A U W V / S4 C U D V.
Proof.
unfold on_inter_parallel_parallel.
intros.
DecompAndAll.
assert (P<>Q).
assert (U<>V).
eapply elim_length_ratio_on_parallel_d_2.
Geometry.
unfold not.
intro.
assert (parallel A Y Y R).
assert (Col Y A R).
assert (Col Y R W).
assert (parallel U V Y R).
assert (Y<>R).
unfold not.

*****
H14 : parallel U V Y R
H13 : Col Y R W
H12 : Col Y A R
H11 : parallel A Y Y R
H10 : Col A W Y
H8 : not (eq U V)
H : not (eq P Q)
H9 : not (parallel U V P Q)
H6 : parallel Y W U V
H7 : parallel Y R P Q
H5 : not (Col R U V)
H4 : parallel A Y C D
H3 : not (eq Y W)
H2 : not (eq C D)
H1 : not (eq Y A)
H0 : parallel A Y P Q
A,C,D,P,Q,R,U,V,W,Y : Point
*****
forall _ : eq Y R, False
+++++
intro.
-----
Lemma elim_length_ratio_on_inter_parallel_parallel_2 : forall A C D P Q R U V W Y : Point, on_inter_parallel_parallel Y R P Q W U V -> parallel A Y P Q -> Y <> A -> C <> D -> Y <> W -> parallel A Y C D -> A ** Y / C ** D = S4 A U W V / S4 C U D V.
Proof.
unfold on_inter_parallel_parallel.
intros.
DecompAndAll.
assert (P<>Q).
assert (U<>V).
eapply elim_length_ratio_on_parallel_d_2.
Geometry.
unfold not.
intro.
assert (parallel A Y Y R).
assert (Col Y A R).
assert (Col Y R W).
assert (parallel U V Y R).
assert (Y<>R).
unfold not.
intro.

*****
H15 : eq Y R
H14 : parallel U V Y R
H13 : Col Y R W
H12 : Col Y A R
H11 : parallel A Y Y R
H10 : Col A W Y
H8 : not (eq U V)
H : not (eq P Q)
H9 : not (parallel U V P Q)
H6 : parallel Y W U V
H7 : parallel Y R P Q
H5 : not (Col R U V)
H4 : parallel A Y C D
H3 : not (eq Y W)
H2 : not (eq C D)
H1 : not (eq Y A)
H0 : parallel A Y P Q
A,C,D,P,Q,R,U,V,W,Y : Point
*****
False
+++++
subst Y.
-----
Lemma elim_length_ratio_on_inter_parallel_parallel_2 : forall A C D P Q R U V W Y : Point, on_inter_parallel_parallel Y R P Q W U V -> parallel A Y P Q -> Y <> A -> C <> D -> Y <> W -> parallel A Y C D -> A ** Y / C ** D = S4 A U W V / S4 C U D V.
Proof.
unfold on_inter_parallel_parallel.
intros.
DecompAndAll.
assert (P<>Q).
assert (U<>V).
eapply elim_length_ratio_on_parallel_d_2.
Geometry.
unfold not.
intro.
assert (parallel A Y Y R).
assert (Col Y A R).
assert (Col Y R W).
assert (parallel U V Y R).
assert (Y<>R).
unfold not.
intro.
subst Y.

*****
H10 : Col A W R
H11 : parallel A R R R
H12 : Col R A R
H13 : Col R R W
H14 : parallel U V R R
H8 : not (eq U V)
H : not (eq P Q)
H9 : not (parallel U V P Q)
H7 : parallel R R P Q
H6 : parallel R W U V
H5 : not (Col R U V)
H3 : not (eq R W)
H4 : parallel A R C D
H2 : not (eq C D)
H0 : parallel A R P Q
H1 : not (eq R A)
A,C,D,P,Q,R,U,V,W : Point
*****
False
+++++
clear H11 H12 H13 H14 H7.
-----
Lemma elim_length_ratio_on_inter_parallel_parallel_2 : forall A C D P Q R U V W Y : Point, on_inter_parallel_parallel Y R P Q W U V -> parallel A Y P Q -> Y <> A -> C <> D -> Y <> W -> parallel A Y C D -> A ** Y / C ** D = S4 A U W V / S4 C U D V.
Proof.
unfold on_inter_parallel_parallel.
intros.
DecompAndAll.
assert (P<>Q).
assert (U<>V).
eapply elim_length_ratio_on_parallel_d_2.
Geometry.
unfold not.
intro.
assert (parallel A Y Y R).
assert (Col Y A R).
assert (Col Y R W).
assert (parallel U V Y R).
assert (Y<>R).
unfold not.
intro.
subst Y.
clear H11 H12 H13 H14 H7.

*****
H10 : Col A W R
H8 : not (eq U V)
H : not (eq P Q)
H9 : not (parallel U V P Q)
H6 : parallel R W U V
H5 : not (Col R U V)
H3 : not (eq R W)
H4 : parallel A R C D
H2 : not (eq C D)
H0 : parallel A R P Q
H1 : not (eq R A)
A,C,D,P,Q,R,U,V,W : Point
*****
False
+++++
assert (parallel U V R A).
-----
Lemma elim_length_ratio_on_inter_parallel_parallel_2 : forall A C D P Q R U V W Y : Point, on_inter_parallel_parallel Y R P Q W U V -> parallel A Y P Q -> Y <> A -> C <> D -> Y <> W -> parallel A Y C D -> A ** Y / C ** D = S4 A U W V / S4 C U D V.
Proof.
unfold on_inter_parallel_parallel.
intros.
DecompAndAll.
assert (P<>Q).
assert (U<>V).
eapply elim_length_ratio_on_parallel_d_2.
Geometry.
unfold not.
intro.
assert (parallel A Y Y R).
assert (Col Y A R).
assert (Col Y R W).
assert (parallel U V Y R).
assert (Y<>R).
unfold not.
intro.
subst Y.
clear H11 H12 H13 H14 H7.
assert (parallel U V R A).

*****
H10 : Col A W R
H8 : not (eq U V)
H : not (eq P Q)
H9 : not (parallel U V P Q)
H6 : parallel R W U V
H5 : not (Col R U V)
H3 : not (eq R W)
H4 : parallel A R C D
H2 : not (eq C D)
H0 : parallel A R P Q
H1 : not (eq R A)
A,C,D,P,Q,R,U,V,W : Point
*****
parallel U V R A
+++++
eapply col_par_par.
-----
Lemma elim_length_ratio_on_inter_parallel_parallel_2 : forall A C D P Q R U V W Y : Point, on_inter_parallel_parallel Y R P Q W U V -> parallel A Y P Q -> Y <> A -> C <> D -> Y <> W -> parallel A Y C D -> A ** Y / C ** D = S4 A U W V / S4 C U D V.
Proof.
unfold on_inter_parallel_parallel.
intros.
DecompAndAll.
assert (P<>Q).
assert (U<>V).
eapply elim_length_ratio_on_parallel_d_2.
Geometry.
unfold not.
intro.
assert (parallel A Y Y R).
assert (Col Y A R).
assert (Col Y R W).
assert (parallel U V Y R).
assert (Y<>R).
unfold not.
intro.
subst Y.
clear H11 H12 H13 H14 H7.
assert (parallel U V R A).
eapply col_par_par.

*****
H10 : Col A W R
H8 : not (eq U V)
H : not (eq P Q)
H9 : not (parallel U V P Q)
H6 : parallel R W U V
H5 : not (Col R U V)
H3 : not (eq R W)
H4 : parallel A R C D
H2 : not (eq C D)
H0 : parallel A R P Q
H1 : not (eq R A)
A,C,D,P,Q,R,U,V,W : Point
*****
not (eq R ?D)
+++++
apply H3.
-----
Lemma elim_length_ratio_on_inter_parallel_parallel_2 : forall A C D P Q R U V W Y : Point, on_inter_parallel_parallel Y R P Q W U V -> parallel A Y P Q -> Y <> A -> C <> D -> Y <> W -> parallel A Y C D -> A ** Y / C ** D = S4 A U W V / S4 C U D V.
Proof.
unfold on_inter_parallel_parallel.
intros.
DecompAndAll.
assert (P<>Q).
assert (U<>V).
eapply elim_length_ratio_on_parallel_d_2.
Geometry.
unfold not.
intro.
assert (parallel A Y Y R).
assert (Col Y A R).
assert (Col Y R W).
assert (parallel U V Y R).
assert (Y<>R).
unfold not.
intro.
subst Y.
clear H11 H12 H13 H14 H7.
assert (parallel U V R A).
eapply col_par_par.

*****
H10 : Col A W R
H8 : not (eq U V)
H : not (eq P Q)
H9 : not (parallel U V P Q)
H6 : parallel R W U V
H5 : not (Col R U V)
H3 : not (eq R W)
H4 : parallel A R C D
H2 : not (eq C D)
H0 : parallel A R P Q
H1 : not (eq R A)
A,C,D,P,Q,R,U,V,W : Point
*****
parallel U V R W
+++++
Geometry.
-----
Lemma elim_length_ratio_on_inter_parallel_parallel_2 : forall A C D P Q R U V W Y : Point, on_inter_parallel_parallel Y R P Q W U V -> parallel A Y P Q -> Y <> A -> C <> D -> Y <> W -> parallel A Y C D -> A ** Y / C ** D = S4 A U W V / S4 C U D V.
Proof.
unfold on_inter_parallel_parallel.
intros.
DecompAndAll.
assert (P<>Q).
assert (U<>V).
eapply elim_length_ratio_on_parallel_d_2.
Geometry.
unfold not.
intro.
assert (parallel A Y Y R).
assert (Col Y A R).
assert (Col Y R W).
assert (parallel U V Y R).
assert (Y<>R).
unfold not.
intro.
subst Y.
clear H11 H12 H13 H14 H7.
assert (parallel U V R A).
eapply col_par_par.

*****
H10 : Col A W R
H8 : not (eq U V)
H : not (eq P Q)
H9 : not (parallel U V P Q)
H6 : parallel R W U V
H5 : not (Col R U V)
H3 : not (eq R W)
H4 : parallel A R C D
H2 : not (eq C D)
H0 : parallel A R P Q
H1 : not (eq R A)
A,C,D,P,Q,R,U,V,W : Point
*****
Col R W A
+++++
Geometry.
-----
Lemma elim_length_ratio_on_inter_parallel_parallel_2 : forall A C D P Q R U V W Y : Point, on_inter_parallel_parallel Y R P Q W U V -> parallel A Y P Q -> Y <> A -> C <> D -> Y <> W -> parallel A Y C D -> A ** Y / C ** D = S4 A U W V / S4 C U D V.
Proof.
unfold on_inter_parallel_parallel.
intros.
DecompAndAll.
assert (P<>Q).
assert (U<>V).
eapply elim_length_ratio_on_parallel_d_2.
Geometry.
unfold not.
intro.
assert (parallel A Y Y R).
assert (Col Y A R).
assert (Col Y R W).
assert (parallel U V Y R).
assert (Y<>R).
unfold not.
intro.
subst Y.
clear H11 H12 H13 H14 H7.
assert (parallel U V R A).

*****
H7 : parallel U V R A
H10 : Col A W R
H8 : not (eq U V)
H : not (eq P Q)
H9 : not (parallel U V P Q)
H6 : parallel R W U V
H5 : not (Col R U V)
H3 : not (eq R W)
H4 : parallel A R C D
H2 : not (eq C D)
H0 : parallel A R P Q
H1 : not (eq R A)
A,C,D,P,Q,R,U,V,W : Point
*****
False
+++++
assert (parallel U V P Q).
-----
Lemma elim_length_ratio_on_inter_parallel_parallel_2 : forall A C D P Q R U V W Y : Point, on_inter_parallel_parallel Y R P Q W U V -> parallel A Y P Q -> Y <> A -> C <> D -> Y <> W -> parallel A Y C D -> A ** Y / C ** D = S4 A U W V / S4 C U D V.
Proof.
unfold on_inter_parallel_parallel.
intros.
DecompAndAll.
assert (P<>Q).
assert (U<>V).
eapply elim_length_ratio_on_parallel_d_2.
Geometry.
unfold not.
intro.
assert (parallel A Y Y R).
assert (Col Y A R).
assert (Col Y R W).
assert (parallel U V Y R).
assert (Y<>R).
unfold not.
intro.
subst Y.
clear H11 H12 H13 H14 H7.
assert (parallel U V R A).
assert (parallel U V P Q).

*****
H7 : parallel U V R A
H10 : Col A W R
H8 : not (eq U V)
H : not (eq P Q)
H9 : not (parallel U V P Q)
H6 : parallel R W U V
H5 : not (Col R U V)
H3 : not (eq R W)
H4 : parallel A R C D
H2 : not (eq C D)
H0 : parallel A R P Q
H1 : not (eq R A)
A,C,D,P,Q,R,U,V,W : Point
*****
parallel U V P Q
+++++
eapply parallel_transitivity.
-----
Lemma elim_length_ratio_on_inter_parallel_parallel_2 : forall A C D P Q R U V W Y : Point, on_inter_parallel_parallel Y R P Q W U V -> parallel A Y P Q -> Y <> A -> C <> D -> Y <> W -> parallel A Y C D -> A ** Y / C ** D = S4 A U W V / S4 C U D V.
Proof.
unfold on_inter_parallel_parallel.
intros.
DecompAndAll.
assert (P<>Q).
assert (U<>V).
eapply elim_length_ratio_on_parallel_d_2.
Geometry.
unfold not.
intro.
assert (parallel A Y Y R).
assert (Col Y A R).
assert (Col Y R W).
assert (parallel U V Y R).
assert (Y<>R).
unfold not.
intro.
subst Y.
clear H11 H12 H13 H14 H7.
assert (parallel U V R A).
assert (parallel U V P Q).
eapply parallel_transitivity.

*****
H7 : parallel U V R A
H10 : Col A W R
H8 : not (eq U V)
H : not (eq P Q)
H9 : not (parallel U V P Q)
H6 : parallel R W U V
H5 : not (Col R U V)
H3 : not (eq R W)
H4 : parallel A R C D
H2 : not (eq C D)
H0 : parallel A R P Q
H1 : not (eq R A)
A,C,D,P,Q,R,U,V,W : Point
*****
not (eq ?C ?D)
+++++
apply H1.
-----
Lemma elim_length_ratio_on_inter_parallel_parallel_2 : forall A C D P Q R U V W Y : Point, on_inter_parallel_parallel Y R P Q W U V -> parallel A Y P Q -> Y <> A -> C <> D -> Y <> W -> parallel A Y C D -> A ** Y / C ** D = S4 A U W V / S4 C U D V.
Proof.
unfold on_inter_parallel_parallel.
intros.
DecompAndAll.
assert (P<>Q).
assert (U<>V).
eapply elim_length_ratio_on_parallel_d_2.
Geometry.
unfold not.
intro.
assert (parallel A Y Y R).
assert (Col Y A R).
assert (Col Y R W).
assert (parallel U V Y R).
assert (Y<>R).
unfold not.
intro.
subst Y.
clear H11 H12 H13 H14 H7.
assert (parallel U V R A).
assert (parallel U V P Q).
eapply parallel_transitivity.

*****
H7 : parallel U V R A
H10 : Col A W R
H8 : not (eq U V)
H : not (eq P Q)
H9 : not (parallel U V P Q)
H6 : parallel R W U V
H5 : not (Col R U V)
H3 : not (eq R W)
H4 : parallel A R C D
H2 : not (eq C D)
H0 : parallel A R P Q
H1 : not (eq R A)
A,C,D,P,Q,R,U,V,W : Point
*****
parallel U V R A
+++++
Geometry.
-----
Lemma elim_length_ratio_on_inter_parallel_parallel_2 : forall A C D P Q R U V W Y : Point, on_inter_parallel_parallel Y R P Q W U V -> parallel A Y P Q -> Y <> A -> C <> D -> Y <> W -> parallel A Y C D -> A ** Y / C ** D = S4 A U W V / S4 C U D V.
Proof.
unfold on_inter_parallel_parallel.
intros.
DecompAndAll.
assert (P<>Q).
assert (U<>V).
eapply elim_length_ratio_on_parallel_d_2.
Geometry.
unfold not.
intro.
assert (parallel A Y Y R).
assert (Col Y A R).
assert (Col Y R W).
assert (parallel U V Y R).
assert (Y<>R).
unfold not.
intro.
subst Y.
clear H11 H12 H13 H14 H7.
assert (parallel U V R A).
assert (parallel U V P Q).
eapply parallel_transitivity.

*****
H7 : parallel U V R A
H10 : Col A W R
H8 : not (eq U V)
H : not (eq P Q)
H9 : not (parallel U V P Q)
H6 : parallel R W U V
H5 : not (Col R U V)
H3 : not (eq R W)
H4 : parallel A R C D
H2 : not (eq C D)
H0 : parallel A R P Q
H1 : not (eq R A)
A,C,D,P,Q,R,U,V,W : Point
*****
parallel R A P Q
+++++
Geometry.
-----
Lemma elim_length_ratio_on_inter_parallel_parallel_2 : forall A C D P Q R U V W Y : Point, on_inter_parallel_parallel Y R P Q W U V -> parallel A Y P Q -> Y <> A -> C <> D -> Y <> W -> parallel A Y C D -> A ** Y / C ** D = S4 A U W V / S4 C U D V.
Proof.
unfold on_inter_parallel_parallel.
intros.
DecompAndAll.
assert (P<>Q).
assert (U<>V).
eapply elim_length_ratio_on_parallel_d_2.
Geometry.
unfold not.
intro.
assert (parallel A Y Y R).
assert (Col Y A R).
assert (Col Y R W).
assert (parallel U V Y R).
assert (Y<>R).
unfold not.
intro.
subst Y.
clear H11 H12 H13 H14 H7.
assert (parallel U V R A).
assert (parallel U V P Q).

*****
H11 : parallel U V P Q
H7 : parallel U V R A
H10 : Col A W R
H8 : not (eq U V)
H : not (eq P Q)
H9 : not (parallel U V P Q)
H6 : parallel R W U V
H5 : not (Col R U V)
H3 : not (eq R W)
H4 : parallel A R C D
H2 : not (eq C D)
H0 : parallel A R P Q
H1 : not (eq R A)
A,C,D,P,Q,R,U,V,W : Point
*****
False
+++++
intuition.
-----
Lemma elim_length_ratio_on_inter_parallel_parallel_2 : forall A C D P Q R U V W Y : Point, on_inter_parallel_parallel Y R P Q W U V -> parallel A Y P Q -> Y <> A -> C <> D -> Y <> W -> parallel A Y C D -> A ** Y / C ** D = S4 A U W V / S4 C U D V.
Proof.
unfold on_inter_parallel_parallel.
intros.
DecompAndAll.
assert (P<>Q).
assert (U<>V).
eapply elim_length_ratio_on_parallel_d_2.
Geometry.
unfold not.
intro.
assert (parallel A Y Y R).
assert (Col Y A R).
assert (Col Y R W).
assert (parallel U V Y R).
assert (Y<>R).

*****
H15 : not (eq Y R)
H14 : parallel U V Y R
H13 : Col Y R W
H12 : Col Y A R
H11 : parallel A Y Y R
H10 : Col A W Y
H8 : not (eq U V)
H : not (eq P Q)
H9 : not (parallel U V P Q)
H6 : parallel Y W U V
H7 : parallel Y R P Q
H5 : not (Col R U V)
H4 : parallel A Y C D
H3 : not (eq Y W)
H2 : not (eq C D)
H1 : not (eq Y A)
H0 : parallel A Y P Q
A,C,D,P,Q,R,U,V,W,Y : Point
*****
False
+++++
assert (parallel U V P Q).
-----
Lemma elim_length_ratio_on_inter_parallel_parallel_2 : forall A C D P Q R U V W Y : Point, on_inter_parallel_parallel Y R P Q W U V -> parallel A Y P Q -> Y <> A -> C <> D -> Y <> W -> parallel A Y C D -> A ** Y / C ** D = S4 A U W V / S4 C U D V.
Proof.
unfold on_inter_parallel_parallel.
intros.
DecompAndAll.
assert (P<>Q).
assert (U<>V).
eapply elim_length_ratio_on_parallel_d_2.
Geometry.
unfold not.
intro.
assert (parallel A Y Y R).
assert (Col Y A R).
assert (Col Y R W).
assert (parallel U V Y R).
assert (Y<>R).
assert (parallel U V P Q).

*****
H15 : not (eq Y R)
H14 : parallel U V Y R
H13 : Col Y R W
H12 : Col Y A R
H11 : parallel A Y Y R
H10 : Col A W Y
H8 : not (eq U V)
H : not (eq P Q)
H9 : not (parallel U V P Q)
H6 : parallel Y W U V
H7 : parallel Y R P Q
H5 : not (Col R U V)
H4 : parallel A Y C D
H3 : not (eq Y W)
H2 : not (eq C D)
H1 : not (eq Y A)
H0 : parallel A Y P Q
A,C,D,P,Q,R,U,V,W,Y : Point
*****
parallel U V P Q
+++++
eapply parallel_transitivity.
-----
Lemma elim_length_ratio_on_inter_parallel_parallel_2 : forall A C D P Q R U V W Y : Point, on_inter_parallel_parallel Y R P Q W U V -> parallel A Y P Q -> Y <> A -> C <> D -> Y <> W -> parallel A Y C D -> A ** Y / C ** D = S4 A U W V / S4 C U D V.
Proof.
unfold on_inter_parallel_parallel.
intros.
DecompAndAll.
assert (P<>Q).
assert (U<>V).
eapply elim_length_ratio_on_parallel_d_2.
Geometry.
unfold not.
intro.
assert (parallel A Y Y R).
assert (Col Y A R).
assert (Col Y R W).
assert (parallel U V Y R).
assert (Y<>R).
assert (parallel U V P Q).
eapply parallel_transitivity.

*****
H15 : not (eq Y R)
H14 : parallel U V Y R
H13 : Col Y R W
H12 : Col Y A R
H11 : parallel A Y Y R
H10 : Col A W Y
H8 : not (eq U V)
H : not (eq P Q)
H9 : not (parallel U V P Q)
H6 : parallel Y W U V
H7 : parallel Y R P Q
H5 : not (Col R U V)
H4 : parallel A Y C D
H3 : not (eq Y W)
H2 : not (eq C D)
H1 : not (eq Y A)
H0 : parallel A Y P Q
A,C,D,P,Q,R,U,V,W,Y : Point
*****
not (eq ?C ?D)
+++++
apply H15.
-----
Lemma elim_length_ratio_on_inter_parallel_parallel_2 : forall A C D P Q R U V W Y : Point, on_inter_parallel_parallel Y R P Q W U V -> parallel A Y P Q -> Y <> A -> C <> D -> Y <> W -> parallel A Y C D -> A ** Y / C ** D = S4 A U W V / S4 C U D V.
Proof.
unfold on_inter_parallel_parallel.
intros.
DecompAndAll.
assert (P<>Q).
assert (U<>V).
eapply elim_length_ratio_on_parallel_d_2.
Geometry.
unfold not.
intro.
assert (parallel A Y Y R).
assert (Col Y A R).
assert (Col Y R W).
assert (parallel U V Y R).
assert (Y<>R).
assert (parallel U V P Q).
eapply parallel_transitivity.

*****
H15 : not (eq Y R)
H14 : parallel U V Y R
H13 : Col Y R W
H12 : Col Y A R
H11 : parallel A Y Y R
H10 : Col A W Y
H8 : not (eq U V)
H : not (eq P Q)
H9 : not (parallel U V P Q)
H6 : parallel Y W U V
H7 : parallel Y R P Q
H5 : not (Col R U V)
H4 : parallel A Y C D
H3 : not (eq Y W)
H2 : not (eq C D)
H1 : not (eq Y A)
H0 : parallel A Y P Q
A,C,D,P,Q,R,U,V,W,Y : Point
*****
parallel U V Y R
+++++
Geometry.
-----
Lemma elim_length_ratio_on_inter_parallel_parallel_2 : forall A C D P Q R U V W Y : Point, on_inter_parallel_parallel Y R P Q W U V -> parallel A Y P Q -> Y <> A -> C <> D -> Y <> W -> parallel A Y C D -> A ** Y / C ** D = S4 A U W V / S4 C U D V.
Proof.
unfold on_inter_parallel_parallel.
intros.
DecompAndAll.
assert (P<>Q).
assert (U<>V).
eapply elim_length_ratio_on_parallel_d_2.
Geometry.
unfold not.
intro.
assert (parallel A Y Y R).
assert (Col Y A R).
assert (Col Y R W).
assert (parallel U V Y R).
assert (Y<>R).
assert (parallel U V P Q).
eapply parallel_transitivity.

*****
H15 : not (eq Y R)
H14 : parallel U V Y R
H13 : Col Y R W
H12 : Col Y A R
H11 : parallel A Y Y R
H10 : Col A W Y
H8 : not (eq U V)
H : not (eq P Q)
H9 : not (parallel U V P Q)
H6 : parallel Y W U V
H7 : parallel Y R P Q
H5 : not (Col R U V)
H4 : parallel A Y C D
H3 : not (eq Y W)
H2 : not (eq C D)
H1 : not (eq Y A)
H0 : parallel A Y P Q
A,C,D,P,Q,R,U,V,W,Y : Point
*****
parallel Y R P Q
+++++
Geometry.
-----
Lemma elim_length_ratio_on_inter_parallel_parallel_2 : forall A C D P Q R U V W Y : Point, on_inter_parallel_parallel Y R P Q W U V -> parallel A Y P Q -> Y <> A -> C <> D -> Y <> W -> parallel A Y C D -> A ** Y / C ** D = S4 A U W V / S4 C U D V.
Proof.
unfold on_inter_parallel_parallel.
intros.
DecompAndAll.
assert (P<>Q).
assert (U<>V).
eapply elim_length_ratio_on_parallel_d_2.
Geometry.
unfold not.
intro.
assert (parallel A Y Y R).
assert (Col Y A R).
assert (Col Y R W).
assert (parallel U V Y R).
assert (Y<>R).
assert (parallel U V P Q).

*****
H16 : parallel U V P Q
H15 : not (eq Y R)
H14 : parallel U V Y R
H13 : Col Y R W
H12 : Col Y A R
H11 : parallel A Y Y R
H10 : Col A W Y
H8 : not (eq U V)
H : not (eq P Q)
H9 : not (parallel U V P Q)
H6 : parallel Y W U V
H7 : parallel Y R P Q
H5 : not (Col R U V)
H4 : parallel A Y C D
H3 : not (eq Y W)
H2 : not (eq C D)
H1 : not (eq Y A)
H0 : parallel A Y P Q
A,C,D,P,Q,R,U,V,W,Y : Point
*****
False
+++++
intuition.
-----
Lemma elim_length_ratio_on_inter_parallel_parallel_2 : forall A C D P Q R U V W Y : Point, on_inter_parallel_parallel Y R P Q W U V -> parallel A Y P Q -> Y <> A -> C <> D -> Y <> W -> parallel A Y C D -> A ** Y / C ** D = S4 A U W V / S4 C U D V.
Proof.
unfold on_inter_parallel_parallel.
intros.
DecompAndAll.
assert (P<>Q).
assert (U<>V).
eapply elim_length_ratio_on_parallel_d_2.

*****
H8 : not (eq U V)
H : not (eq P Q)
H9 : not (parallel U V P Q)
H6 : parallel Y W U V
H7 : parallel Y R P Q
H5 : not (Col R U V)
H4 : parallel A Y C D
H3 : not (eq Y W)
H2 : not (eq C D)
H1 : not (eq Y A)
H0 : parallel A Y P Q
A,C,D,P,Q,R,U,V,W,Y : Point
*****
not (eq C D)
+++++
Geometry.
-----
Lemma elim_length_ratio_on_inter_parallel_parallel_2 : forall A C D P Q R U V W Y : Point, on_inter_parallel_parallel Y R P Q W U V -> parallel A Y P Q -> Y <> A -> C <> D -> Y <> W -> parallel A Y C D -> A ** Y / C ** D = S4 A U W V / S4 C U D V.
Proof.
unfold on_inter_parallel_parallel.
intros.
DecompAndAll.
assert (P<>Q).
assert (U<>V).
eapply elim_length_ratio_on_parallel_d_2.

*****
H8 : not (eq U V)
H : not (eq P Q)
H9 : not (parallel U V P Q)
H6 : parallel Y W U V
H7 : parallel Y R P Q
H5 : not (Col R U V)
H4 : parallel A Y C D
H3 : not (eq Y W)
H2 : not (eq C D)
H1 : not (eq Y A)
H0 : parallel A Y P Q
A,C,D,P,Q,R,U,V,W,Y : Point
*****
parallel A Y C D
+++++
Geometry.
-----
Lemma elim_length_ratio_on_inter_parallel_parallel_2 : forall A C D P Q R U V W Y : Point, on_inter_parallel_parallel Y R P Q W U V -> parallel A Y P Q -> Y <> A -> C <> D -> Y <> W -> parallel A Y C D -> A ** Y / C ** D = S4 A U W V / S4 C U D V.
Proof.
unfold on_inter_parallel_parallel.
intros.
DecompAndAll.
assert (P<>Q).

*****

*****

+++++
Qed.
-----
Theorem aux_co_side_1 :\n   forall A B P Q M : Point, \n   Q <> M -> \n   inter_ll M A B P Q -> \n   S Q A B <> 0.
-----
Theorem aux_co_side_1 : forall A B P Q M : Point, Q <> M -> inter_ll M A B P Q -> S Q A B <> 0.

*****

*****
forall (A B P Q M : Point) (_ : not (eq Q M)) (_ : inter_ll M A B P Q), not (eq (S Q A B) F0)
+++++
Proof.
-----
Theorem aux_co_side_1 : forall A B P Q M : Point, Q <> M -> inter_ll M A B P Q -> S Q A B <> 0.
Proof.

*****

*****
forall (A B P Q M : Point) (_ : not (eq Q M)) (_ : inter_ll M A B P Q), not (eq (S Q A B) F0)
+++++
intros.
-----
Theorem aux_co_side_1 : forall A B P Q M : Point, Q <> M -> inter_ll M A B P Q -> S Q A B <> 0.
Proof.
intros.

*****
H0 : inter_ll M A B P Q
H : not (eq Q M)
A,B,P,Q,M : Point
*****
not (eq (S Q A B) F0)
+++++
cut (~ Col Q A B).
-----
Theorem aux_co_side_1 : forall A B P Q M : Point, Q <> M -> inter_ll M A B P Q -> S Q A B <> 0.
Proof.
intros.
cut (~ Col Q A B).

*****
H0 : inter_ll M A B P Q
H : not (eq Q M)
A,B,P,Q,M : Point
*****
forall _ : not (Col Q A B), not (eq (S Q A B) F0)
+++++
Geometry.
-----
Theorem aux_co_side_1 : forall A B P Q M : Point, Q <> M -> inter_ll M A B P Q -> S Q A B <> 0.
Proof.
intros.
cut (~ Col Q A B).

*****
H0 : inter_ll M A B P Q
H : not (eq Q M)
A,B,P,Q,M : Point
*****
not (Col Q A B)
+++++
Geometry.
-----
Theorem aux_co_side_1 : forall A B P Q M : Point, Q <> M -> inter_ll M A B P Q -> S Q A B <> 0.
Proof.
intros.
cut (~ Col Q A B).
Geometry.

*****
H0 : inter_ll M A B P Q
H : not (eq Q M)
A,B,P,Q,M : Point
*****
not (Col Q A B)
+++++
unfold not in |- *.
-----
Theorem aux_co_side_1 : forall A B P Q M : Point, Q <> M -> inter_ll M A B P Q -> S Q A B <> 0.
Proof.
intros.
cut (~ Col Q A B).
Geometry.
unfold not in |- *.

*****
H0 : inter_ll M A B P Q
H : not (eq Q M)
A,B,P,Q,M : Point
*****
forall _ : Col Q A B, False
+++++
intro.
-----
Theorem aux_co_side_1 : forall A B P Q M : Point, Q <> M -> inter_ll M A B P Q -> S Q A B <> 0.
Proof.
intros.
cut (~ Col Q A B).
Geometry.
unfold not in |- *.
intro.

*****
H1 : Col Q A B
H0 : inter_ll M A B P Q
H : not (eq Q M)
A,B,P,Q,M : Point
*****
False
+++++
unfold inter_ll in *.
-----
Theorem aux_co_side_1 : forall A B P Q M : Point, Q <> M -> inter_ll M A B P Q -> S Q A B <> 0.
Proof.
intros.
cut (~ Col Q A B).
Geometry.
unfold not in |- *.
intro.
unfold inter_ll in *.

*****
H1 : Col Q A B
H0 : and (Col M A B) (and (Col M P Q) (not (parallel A B P Q)))
H : not (eq Q M)
A,B,P,Q,M : Point
*****
False
+++++
DecompAndAll.
-----
Theorem aux_co_side_1 : forall A B P Q M : Point, Q <> M -> inter_ll M A B P Q -> S Q A B <> 0.
Proof.
intros.
cut (~ Col Q A B).
Geometry.
unfold not in |- *.
intro.
unfold inter_ll in *.
DecompAndAll.

*****
H5 : not (parallel A B P Q)
H4 : Col M P Q
H2 : Col M A B
H1 : Col Q A B
H : not (eq Q M)
A,B,P,Q,M : Point
*****
False
+++++
assert (A<>B).
-----
Theorem aux_co_side_1 : forall A B P Q M : Point, Q <> M -> inter_ll M A B P Q -> S Q A B <> 0.
Proof.
intros.
cut (~ Col Q A B).
Geometry.
unfold not in |- *.
intro.
unfold inter_ll in *.
DecompAndAll.
assert (A<>B).

*****
H5 : not (parallel A B P Q)
H4 : Col M P Q
H2 : Col M A B
H1 : Col Q A B
H : not (eq Q M)
A,B,P,Q,M : Point
*****
not (eq A B)
+++++
try (unfold not;intro;subst A).
-----
Theorem aux_co_side_1 : forall A B P Q M : Point, Q <> M -> inter_ll M A B P Q -> S Q A B <> 0.
Proof.
intros.
cut (~ Col Q A B).
Geometry.
unfold not in |- *.
intro.
unfold inter_ll in *.
DecompAndAll.
assert (A<>B).
try (unfold not;intro;subst A).

*****
H5 : not (parallel B B P Q)
H4 : Col M P Q
H1 : Col Q B B
H2 : Col M B B
H : not (eq Q M)
B,P,Q,M : Point
*****
False
+++++
Geometry.
-----
Theorem aux_co_side_1 : forall A B P Q M : Point, Q <> M -> inter_ll M A B P Q -> S Q A B <> 0.
Proof.
intros.
cut (~ Col Q A B).
Geometry.
unfold not in |- *.
intro.
unfold inter_ll in *.
DecompAndAll.
assert (A<>B).

*****
H0 : not (eq A B)
H5 : not (parallel A B P Q)
H4 : Col M P Q
H2 : Col M A B
H1 : Col Q A B
H : not (eq Q M)
A,B,P,Q,M : Point
*****
False
+++++
try (unfold not;intro;subst A).
-----
Theorem aux_co_side_1 : forall A B P Q M : Point, Q <> M -> inter_ll M A B P Q -> S Q A B <> 0.
Proof.
intros.
cut (~ Col Q A B).
Geometry.
unfold not in |- *.
intro.
unfold inter_ll in *.
DecompAndAll.
assert (A<>B).
try (unfold not;intro;subst A).

*****
H0 : not (eq A B)
H5 : not (parallel A B P Q)
H4 : Col M P Q
H2 : Col M A B
H1 : Col Q A B
H : not (eq Q M)
A,B,P,Q,M : Point
*****
False
+++++
Geometry.
-----
Theorem aux_co_side_1 : forall A B P Q M : Point, Q <> M -> inter_ll M A B P Q -> S Q A B <> 0.
Proof.
intros.
cut (~ Col Q A B).
Geometry.
unfold not in |- *.
intro.
unfold inter_ll in *.
DecompAndAll.
assert (A<>B).
try (unfold not;intro;subst A).
Geometry.

*****
H0 : not (eq A B)
H5 : not (parallel A B P Q)
H4 : Col M P Q
H2 : Col M A B
H1 : Col Q A B
H : not (eq Q M)
A,B,P,Q,M : Point
*****
False
+++++
assert (P<>Q).
-----
Theorem aux_co_side_1 : forall A B P Q M : Point, Q <> M -> inter_ll M A B P Q -> S Q A B <> 0.
Proof.
intros.
cut (~ Col Q A B).
Geometry.
unfold not in |- *.
intro.
unfold inter_ll in *.
DecompAndAll.
assert (A<>B).
try (unfold not;intro;subst A).
Geometry.
assert (P<>Q).

*****
H0 : not (eq A B)
H5 : not (parallel A B P Q)
H4 : Col M P Q
H2 : Col M A B
H1 : Col Q A B
H : not (eq Q M)
A,B,P,Q,M : Point
*****
not (eq P Q)
+++++
try (unfold not;intro;subst P).
-----
Theorem aux_co_side_1 : forall A B P Q M : Point, Q <> M -> inter_ll M A B P Q -> S Q A B <> 0.
Proof.
intros.
cut (~ Col Q A B).
Geometry.
unfold not in |- *.
intro.
unfold inter_ll in *.
DecompAndAll.
assert (A<>B).
try (unfold not;intro;subst A).
Geometry.
assert (P<>Q).
try (unfold not;intro;subst P).

*****
H0 : not (eq A B)
H4 : Col M Q Q
H5 : not (parallel A B Q Q)
H2 : Col M A B
H1 : Col Q A B
H : not (eq Q M)
A,B,Q,M : Point
*****
False
+++++
Geometry.
-----
Theorem aux_co_side_1 : forall A B P Q M : Point, Q <> M -> inter_ll M A B P Q -> S Q A B <> 0.
Proof.
intros.
cut (~ Col Q A B).
Geometry.
unfold not in |- *.
intro.
unfold inter_ll in *.
DecompAndAll.
assert (A<>B).
try (unfold not;intro;subst A).
Geometry.
assert (P<>Q).

*****
H3 : not (eq P Q)
H0 : not (eq A B)
H5 : not (parallel A B P Q)
H4 : Col M P Q
H2 : Col M A B
H1 : Col Q A B
H : not (eq Q M)
A,B,P,Q,M : Point
*****
False
+++++
try (unfold not;intro;subst P).
-----
Theorem aux_co_side_1 : forall A B P Q M : Point, Q <> M -> inter_ll M A B P Q -> S Q A B <> 0.
Proof.
intros.
cut (~ Col Q A B).
Geometry.
unfold not in |- *.
intro.
unfold inter_ll in *.
DecompAndAll.
assert (A<>B).
try (unfold not;intro;subst A).
Geometry.
assert (P<>Q).
try (unfold not;intro;subst P).

*****
H3 : not (eq P Q)
H0 : not (eq A B)
H5 : not (parallel A B P Q)
H4 : Col M P Q
H2 : Col M A B
H1 : Col Q A B
H : not (eq Q M)
A,B,P,Q,M : Point
*****
False
+++++
Geometry.
-----
Theorem aux_co_side_1 : forall A B P Q M : Point, Q <> M -> inter_ll M A B P Q -> S Q A B <> 0.
Proof.
intros.
cut (~ Col Q A B).
Geometry.
unfold not in |- *.
intro.
unfold inter_ll in *.
DecompAndAll.
assert (A<>B).
try (unfold not;intro;subst A).
Geometry.
assert (P<>Q).
try (unfold not;intro;subst P).
Geometry.

*****
H3 : not (eq P Q)
H0 : not (eq A B)
H5 : not (parallel A B P Q)
H4 : Col M P Q
H2 : Col M A B
H1 : Col Q A B
H : not (eq Q M)
A,B,P,Q,M : Point
*****
False
+++++
assert (Col B Q M).
-----
Theorem aux_co_side_1 : forall A B P Q M : Point, Q <> M -> inter_ll M A B P Q -> S Q A B <> 0.
Proof.
intros.
cut (~ Col Q A B).
Geometry.
unfold not in |- *.
intro.
unfold inter_ll in *.
DecompAndAll.
assert (A<>B).
try (unfold not;intro;subst A).
Geometry.
assert (P<>Q).
try (unfold not;intro;subst P).
Geometry.
assert (Col B Q M).

*****
H3 : not (eq P Q)
H0 : not (eq A B)
H5 : not (parallel A B P Q)
H4 : Col M P Q
H2 : Col M A B
H1 : Col Q A B
H : not (eq Q M)
A,B,P,Q,M : Point
*****
Col B Q M
+++++
eapply col_trans_1 with (B:= A).
-----
Theorem aux_co_side_1 : forall A B P Q M : Point, Q <> M -> inter_ll M A B P Q -> S Q A B <> 0.
Proof.
intros.
cut (~ Col Q A B).
Geometry.
unfold not in |- *.
intro.
unfold inter_ll in *.
DecompAndAll.
assert (A<>B).
try (unfold not;intro;subst A).
Geometry.
assert (P<>Q).
try (unfold not;intro;subst P).
Geometry.
assert (Col B Q M).
eapply col_trans_1 with (B:= A).

*****
H3 : not (eq P Q)
H0 : not (eq A B)
H5 : not (parallel A B P Q)
H4 : Col M P Q
H2 : Col M A B
H1 : Col Q A B
H : not (eq Q M)
A,B,P,Q,M : Point
*****
not (eq B A)
+++++
Geometry.
-----
Theorem aux_co_side_1 : forall A B P Q M : Point, Q <> M -> inter_ll M A B P Q -> S Q A B <> 0.
Proof.
intros.
cut (~ Col Q A B).
Geometry.
unfold not in |- *.
intro.
unfold inter_ll in *.
DecompAndAll.
assert (A<>B).
try (unfold not;intro;subst A).
Geometry.
assert (P<>Q).
try (unfold not;intro;subst P).
Geometry.
assert (Col B Q M).
eapply col_trans_1 with (B:= A).

*****
H3 : not (eq P Q)
H0 : not (eq A B)
H5 : not (parallel A B P Q)
H4 : Col M P Q
H2 : Col M A B
H1 : Col Q A B
H : not (eq Q M)
A,B,P,Q,M : Point
*****
Col B A Q
+++++
Geometry.
-----
Theorem aux_co_side_1 : forall A B P Q M : Point, Q <> M -> inter_ll M A B P Q -> S Q A B <> 0.
Proof.
intros.
cut (~ Col Q A B).
Geometry.
unfold not in |- *.
intro.
unfold inter_ll in *.
DecompAndAll.
assert (A<>B).
try (unfold not;intro;subst A).
Geometry.
assert (P<>Q).
try (unfold not;intro;subst P).
Geometry.
assert (Col B Q M).
eapply col_trans_1 with (B:= A).

*****
H3 : not (eq P Q)
H0 : not (eq A B)
H5 : not (parallel A B P Q)
H4 : Col M P Q
H2 : Col M A B
H1 : Col Q A B
H : not (eq Q M)
A,B,P,Q,M : Point
*****
Col B A M
+++++
Geometry.
-----
Theorem aux_co_side_1 : forall A B P Q M : Point, Q <> M -> inter_ll M A B P Q -> S Q A B <> 0.
Proof.
intros.
cut (~ Col Q A B).
Geometry.
unfold not in |- *.
intro.
unfold inter_ll in *.
DecompAndAll.
assert (A<>B).
try (unfold not;intro;subst A).
Geometry.
assert (P<>Q).
try (unfold not;intro;subst P).
Geometry.
assert (Col B Q M).

*****
H6 : Col B Q M
H3 : not (eq P Q)
H0 : not (eq A B)
H5 : not (parallel A B P Q)
H4 : Col M P Q
H2 : Col M A B
H1 : Col Q A B
H : not (eq Q M)
A,B,P,Q,M : Point
*****
False
+++++
assert (Col A Q M).
-----
Theorem aux_co_side_1 : forall A B P Q M : Point, Q <> M -> inter_ll M A B P Q -> S Q A B <> 0.
Proof.
intros.
cut (~ Col Q A B).
Geometry.
unfold not in |- *.
intro.
unfold inter_ll in *.
DecompAndAll.
assert (A<>B).
try (unfold not;intro;subst A).
Geometry.
assert (P<>Q).
try (unfold not;intro;subst P).
Geometry.
assert (Col B Q M).
assert (Col A Q M).

*****
H6 : Col B Q M
H3 : not (eq P Q)
H0 : not (eq A B)
H5 : not (parallel A B P Q)
H4 : Col M P Q
H2 : Col M A B
H1 : Col Q A B
H : not (eq Q M)
A,B,P,Q,M : Point
*****
Col A Q M
+++++
eapply col_trans_1 with (B:= B).
-----
Theorem aux_co_side_1 : forall A B P Q M : Point, Q <> M -> inter_ll M A B P Q -> S Q A B <> 0.
Proof.
intros.
cut (~ Col Q A B).
Geometry.
unfold not in |- *.
intro.
unfold inter_ll in *.
DecompAndAll.
assert (A<>B).
try (unfold not;intro;subst A).
Geometry.
assert (P<>Q).
try (unfold not;intro;subst P).
Geometry.
assert (Col B Q M).
assert (Col A Q M).
eapply col_trans_1 with (B:= B).

*****
H6 : Col B Q M
H3 : not (eq P Q)
H0 : not (eq A B)
H5 : not (parallel A B P Q)
H4 : Col M P Q
H2 : Col M A B
H1 : Col Q A B
H : not (eq Q M)
A,B,P,Q,M : Point
*****
not (eq A B)
+++++
Geometry.
-----
Theorem aux_co_side_1 : forall A B P Q M : Point, Q <> M -> inter_ll M A B P Q -> S Q A B <> 0.
Proof.
intros.
cut (~ Col Q A B).
Geometry.
unfold not in |- *.
intro.
unfold inter_ll in *.
DecompAndAll.
assert (A<>B).
try (unfold not;intro;subst A).
Geometry.
assert (P<>Q).
try (unfold not;intro;subst P).
Geometry.
assert (Col B Q M).
assert (Col A Q M).
eapply col_trans_1 with (B:= B).

*****
H6 : Col B Q M
H3 : not (eq P Q)
H0 : not (eq A B)
H5 : not (parallel A B P Q)
H4 : Col M P Q
H2 : Col M A B
H1 : Col Q A B
H : not (eq Q M)
A,B,P,Q,M : Point
*****
Col A B Q
+++++
Geometry.
-----
Theorem aux_co_side_1 : forall A B P Q M : Point, Q <> M -> inter_ll M A B P Q -> S Q A B <> 0.
Proof.
intros.
cut (~ Col Q A B).
Geometry.
unfold not in |- *.
intro.
unfold inter_ll in *.
DecompAndAll.
assert (A<>B).
try (unfold not;intro;subst A).
Geometry.
assert (P<>Q).
try (unfold not;intro;subst P).
Geometry.
assert (Col B Q M).
assert (Col A Q M).
eapply col_trans_1 with (B:= B).

*****
H6 : Col B Q M
H3 : not (eq P Q)
H0 : not (eq A B)
H5 : not (parallel A B P Q)
H4 : Col M P Q
H2 : Col M A B
H1 : Col Q A B
H : not (eq Q M)
A,B,P,Q,M : Point
*****
Col A B M
+++++
Geometry.
-----
Theorem aux_co_side_1 : forall A B P Q M : Point, Q <> M -> inter_ll M A B P Q -> S Q A B <> 0.
Proof.
intros.
cut (~ Col Q A B).
Geometry.
unfold not in |- *.
intro.
unfold inter_ll in *.
DecompAndAll.
assert (A<>B).
try (unfold not;intro;subst A).
Geometry.
assert (P<>Q).
try (unfold not;intro;subst P).
Geometry.
assert (Col B Q M).
assert (Col A Q M).

*****
H7 : Col A Q M
H6 : Col B Q M
H3 : not (eq P Q)
H0 : not (eq A B)
H5 : not (parallel A B P Q)
H4 : Col M P Q
H2 : Col M A B
H1 : Col Q A B
H : not (eq Q M)
A,B,P,Q,M : Point
*****
False
+++++
assert (Col Q P B).
-----
Theorem aux_co_side_1 : forall A B P Q M : Point, Q <> M -> inter_ll M A B P Q -> S Q A B <> 0.
Proof.
intros.
cut (~ Col Q A B).
Geometry.
unfold not in |- *.
intro.
unfold inter_ll in *.
DecompAndAll.
assert (A<>B).
try (unfold not;intro;subst A).
Geometry.
assert (P<>Q).
try (unfold not;intro;subst P).
Geometry.
assert (Col B Q M).
assert (Col A Q M).
assert (Col Q P B).

*****
H7 : Col A Q M
H6 : Col B Q M
H3 : not (eq P Q)
H0 : not (eq A B)
H5 : not (parallel A B P Q)
H4 : Col M P Q
H2 : Col M A B
H1 : Col Q A B
H : not (eq Q M)
A,B,P,Q,M : Point
*****
Col Q P B
+++++
eapply col_trans_1 with (B:=M).
-----
Theorem aux_co_side_1 : forall A B P Q M : Point, Q <> M -> inter_ll M A B P Q -> S Q A B <> 0.
Proof.
intros.
cut (~ Col Q A B).
Geometry.
unfold not in |- *.
intro.
unfold inter_ll in *.
DecompAndAll.
assert (A<>B).
try (unfold not;intro;subst A).
Geometry.
assert (P<>Q).
try (unfold not;intro;subst P).
Geometry.
assert (Col B Q M).
assert (Col A Q M).
assert (Col Q P B).
eapply col_trans_1 with (B:=M).

*****
H7 : Col A Q M
H6 : Col B Q M
H3 : not (eq P Q)
H0 : not (eq A B)
H5 : not (parallel A B P Q)
H4 : Col M P Q
H2 : Col M A B
H1 : Col Q A B
H : not (eq Q M)
A,B,P,Q,M : Point
*****
not (eq Q M)
+++++
Geometry.
-----
Theorem aux_co_side_1 : forall A B P Q M : Point, Q <> M -> inter_ll M A B P Q -> S Q A B <> 0.
Proof.
intros.
cut (~ Col Q A B).
Geometry.
unfold not in |- *.
intro.
unfold inter_ll in *.
DecompAndAll.
assert (A<>B).
try (unfold not;intro;subst A).
Geometry.
assert (P<>Q).
try (unfold not;intro;subst P).
Geometry.
assert (Col B Q M).
assert (Col A Q M).
assert (Col Q P B).
eapply col_trans_1 with (B:=M).

*****
H7 : Col A Q M
H6 : Col B Q M
H3 : not (eq P Q)
H0 : not (eq A B)
H5 : not (parallel A B P Q)
H4 : Col M P Q
H2 : Col M A B
H1 : Col Q A B
H : not (eq Q M)
A,B,P,Q,M : Point
*****
Col Q M P
+++++
Geometry.
-----
Theorem aux_co_side_1 : forall A B P Q M : Point, Q <> M -> inter_ll M A B P Q -> S Q A B <> 0.
Proof.
intros.
cut (~ Col Q A B).
Geometry.
unfold not in |- *.
intro.
unfold inter_ll in *.
DecompAndAll.
assert (A<>B).
try (unfold not;intro;subst A).
Geometry.
assert (P<>Q).
try (unfold not;intro;subst P).
Geometry.
assert (Col B Q M).
assert (Col A Q M).
assert (Col Q P B).
eapply col_trans_1 with (B:=M).

*****
H7 : Col A Q M
H6 : Col B Q M
H3 : not (eq P Q)
H0 : not (eq A B)
H5 : not (parallel A B P Q)
H4 : Col M P Q
H2 : Col M A B
H1 : Col Q A B
H : not (eq Q M)
A,B,P,Q,M : Point
*****
Col Q M B
+++++
Geometry.
-----
Theorem aux_co_side_1 : forall A B P Q M : Point, Q <> M -> inter_ll M A B P Q -> S Q A B <> 0.
Proof.
intros.
cut (~ Col Q A B).
Geometry.
unfold not in |- *.
intro.
unfold inter_ll in *.
DecompAndAll.
assert (A<>B).
try (unfold not;intro;subst A).
Geometry.
assert (P<>Q).
try (unfold not;intro;subst P).
Geometry.
assert (Col B Q M).
assert (Col A Q M).
assert (Col Q P B).

*****
H8 : Col Q P B
H7 : Col A Q M
H6 : Col B Q M
H3 : not (eq P Q)
H0 : not (eq A B)
H5 : not (parallel A B P Q)
H4 : Col M P Q
H2 : Col M A B
H1 : Col Q A B
H : not (eq Q M)
A,B,P,Q,M : Point
*****
False
+++++
assert (Col Q P A).
-----
Theorem aux_co_side_1 : forall A B P Q M : Point, Q <> M -> inter_ll M A B P Q -> S Q A B <> 0.
Proof.
intros.
cut (~ Col Q A B).
Geometry.
unfold not in |- *.
intro.
unfold inter_ll in *.
DecompAndAll.
assert (A<>B).
try (unfold not;intro;subst A).
Geometry.
assert (P<>Q).
try (unfold not;intro;subst P).
Geometry.
assert (Col B Q M).
assert (Col A Q M).
assert (Col Q P B).
assert (Col Q P A).

*****
H8 : Col Q P B
H7 : Col A Q M
H6 : Col B Q M
H3 : not (eq P Q)
H0 : not (eq A B)
H5 : not (parallel A B P Q)
H4 : Col M P Q
H2 : Col M A B
H1 : Col Q A B
H : not (eq Q M)
A,B,P,Q,M : Point
*****
Col Q P A
+++++
eapply col_trans_1 with (B:=M).
-----
Theorem aux_co_side_1 : forall A B P Q M : Point, Q <> M -> inter_ll M A B P Q -> S Q A B <> 0.
Proof.
intros.
cut (~ Col Q A B).
Geometry.
unfold not in |- *.
intro.
unfold inter_ll in *.
DecompAndAll.
assert (A<>B).
try (unfold not;intro;subst A).
Geometry.
assert (P<>Q).
try (unfold not;intro;subst P).
Geometry.
assert (Col B Q M).
assert (Col A Q M).
assert (Col Q P B).
assert (Col Q P A).
eapply col_trans_1 with (B:=M).

*****
H8 : Col Q P B
H7 : Col A Q M
H6 : Col B Q M
H3 : not (eq P Q)
H0 : not (eq A B)
H5 : not (parallel A B P Q)
H4 : Col M P Q
H2 : Col M A B
H1 : Col Q A B
H : not (eq Q M)
A,B,P,Q,M : Point
*****
not (eq Q M)
+++++
Geometry.
-----
Theorem aux_co_side_1 : forall A B P Q M : Point, Q <> M -> inter_ll M A B P Q -> S Q A B <> 0.
Proof.
intros.
cut (~ Col Q A B).
Geometry.
unfold not in |- *.
intro.
unfold inter_ll in *.
DecompAndAll.
assert (A<>B).
try (unfold not;intro;subst A).
Geometry.
assert (P<>Q).
try (unfold not;intro;subst P).
Geometry.
assert (Col B Q M).
assert (Col A Q M).
assert (Col Q P B).
assert (Col Q P A).
eapply col_trans_1 with (B:=M).

*****
H8 : Col Q P B
H7 : Col A Q M
H6 : Col B Q M
H3 : not (eq P Q)
H0 : not (eq A B)
H5 : not (parallel A B P Q)
H4 : Col M P Q
H2 : Col M A B
H1 : Col Q A B
H : not (eq Q M)
A,B,P,Q,M : Point
*****
Col Q M P
+++++
Geometry.
-----
Theorem aux_co_side_1 : forall A B P Q M : Point, Q <> M -> inter_ll M A B P Q -> S Q A B <> 0.
Proof.
intros.
cut (~ Col Q A B).
Geometry.
unfold not in |- *.
intro.
unfold inter_ll in *.
DecompAndAll.
assert (A<>B).
try (unfold not;intro;subst A).
Geometry.
assert (P<>Q).
try (unfold not;intro;subst P).
Geometry.
assert (Col B Q M).
assert (Col A Q M).
assert (Col Q P B).
assert (Col Q P A).
eapply col_trans_1 with (B:=M).

*****
H8 : Col Q P B
H7 : Col A Q M
H6 : Col B Q M
H3 : not (eq P Q)
H0 : not (eq A B)
H5 : not (parallel A B P Q)
H4 : Col M P Q
H2 : Col M A B
H1 : Col Q A B
H : not (eq Q M)
A,B,P,Q,M : Point
*****
Col Q M A
+++++
Geometry.
-----
Theorem aux_co_side_1 : forall A B P Q M : Point, Q <> M -> inter_ll M A B P Q -> S Q A B <> 0.
Proof.
intros.
cut (~ Col Q A B).
Geometry.
unfold not in |- *.
intro.
unfold inter_ll in *.
DecompAndAll.
assert (A<>B).
try (unfold not;intro;subst A).
Geometry.
assert (P<>Q).
try (unfold not;intro;subst P).
Geometry.
assert (Col B Q M).
assert (Col A Q M).
assert (Col Q P B).
assert (Col Q P A).

*****
H9 : Col Q P A
H8 : Col Q P B
H7 : Col A Q M
H6 : Col B Q M
H3 : not (eq P Q)
H0 : not (eq A B)
H5 : not (parallel A B P Q)
H4 : Col M P Q
H2 : Col M A B
H1 : Col Q A B
H : not (eq Q M)
A,B,P,Q,M : Point
*****
False
+++++
assert (Col P A B).
-----
Theorem aux_co_side_1 : forall A B P Q M : Point, Q <> M -> inter_ll M A B P Q -> S Q A B <> 0.
Proof.
intros.
cut (~ Col Q A B).
Geometry.
unfold not in |- *.
intro.
unfold inter_ll in *.
DecompAndAll.
assert (A<>B).
try (unfold not;intro;subst A).
Geometry.
assert (P<>Q).
try (unfold not;intro;subst P).
Geometry.
assert (Col B Q M).
assert (Col A Q M).
assert (Col Q P B).
assert (Col Q P A).
assert (Col P A B).

*****
H9 : Col Q P A
H8 : Col Q P B
H7 : Col A Q M
H6 : Col B Q M
H3 : not (eq P Q)
H0 : not (eq A B)
H5 : not (parallel A B P Q)
H4 : Col M P Q
H2 : Col M A B
H1 : Col Q A B
H : not (eq Q M)
A,B,P,Q,M : Point
*****
Col P A B
+++++
eapply col_trans_1 with (B:=Q).
-----
Theorem aux_co_side_1 : forall A B P Q M : Point, Q <> M -> inter_ll M A B P Q -> S Q A B <> 0.
Proof.
intros.
cut (~ Col Q A B).
Geometry.
unfold not in |- *.
intro.
unfold inter_ll in *.
DecompAndAll.
assert (A<>B).
try (unfold not;intro;subst A).
Geometry.
assert (P<>Q).
try (unfold not;intro;subst P).
Geometry.
assert (Col B Q M).
assert (Col A Q M).
assert (Col Q P B).
assert (Col Q P A).
assert (Col P A B).
eapply col_trans_1 with (B:=Q).

*****
H9 : Col Q P A
H8 : Col Q P B
H7 : Col A Q M
H6 : Col B Q M
H3 : not (eq P Q)
H0 : not (eq A B)
H5 : not (parallel A B P Q)
H4 : Col M P Q
H2 : Col M A B
H1 : Col Q A B
H : not (eq Q M)
A,B,P,Q,M : Point
*****
not (eq P Q)
+++++
Geometry.
-----
Theorem aux_co_side_1 : forall A B P Q M : Point, Q <> M -> inter_ll M A B P Q -> S Q A B <> 0.
Proof.
intros.
cut (~ Col Q A B).
Geometry.
unfold not in |- *.
intro.
unfold inter_ll in *.
DecompAndAll.
assert (A<>B).
try (unfold not;intro;subst A).
Geometry.
assert (P<>Q).
try (unfold not;intro;subst P).
Geometry.
assert (Col B Q M).
assert (Col A Q M).
assert (Col Q P B).
assert (Col Q P A).
assert (Col P A B).
eapply col_trans_1 with (B:=Q).

*****
H9 : Col Q P A
H8 : Col Q P B
H7 : Col A Q M
H6 : Col B Q M
H3 : not (eq P Q)
H0 : not (eq A B)
H5 : not (parallel A B P Q)
H4 : Col M P Q
H2 : Col M A B
H1 : Col Q A B
H : not (eq Q M)
A,B,P,Q,M : Point
*****
Col P Q A
+++++
Geometry.
-----
Theorem aux_co_side_1 : forall A B P Q M : Point, Q <> M -> inter_ll M A B P Q -> S Q A B <> 0.
Proof.
intros.
cut (~ Col Q A B).
Geometry.
unfold not in |- *.
intro.
unfold inter_ll in *.
DecompAndAll.
assert (A<>B).
try (unfold not;intro;subst A).
Geometry.
assert (P<>Q).
try (unfold not;intro;subst P).
Geometry.
assert (Col B Q M).
assert (Col A Q M).
assert (Col Q P B).
assert (Col Q P A).
assert (Col P A B).
eapply col_trans_1 with (B:=Q).

*****
H9 : Col Q P A
H8 : Col Q P B
H7 : Col A Q M
H6 : Col B Q M
H3 : not (eq P Q)
H0 : not (eq A B)
H5 : not (parallel A B P Q)
H4 : Col M P Q
H2 : Col M A B
H1 : Col Q A B
H : not (eq Q M)
A,B,P,Q,M : Point
*****
Col P Q B
+++++
Geometry.
-----
Theorem aux_co_side_1 : forall A B P Q M : Point, Q <> M -> inter_ll M A B P Q -> S Q A B <> 0.
Proof.
intros.
cut (~ Col Q A B).
Geometry.
unfold not in |- *.
intro.
unfold inter_ll in *.
DecompAndAll.
assert (A<>B).
try (unfold not;intro;subst A).
Geometry.
assert (P<>Q).
try (unfold not;intro;subst P).
Geometry.
assert (Col B Q M).
assert (Col A Q M).
assert (Col Q P B).
assert (Col Q P A).
assert (Col P A B).

*****
H10 : Col P A B
H9 : Col Q P A
H8 : Col Q P B
H7 : Col A Q M
H6 : Col B Q M
H3 : not (eq P Q)
H0 : not (eq A B)
H5 : not (parallel A B P Q)
H4 : Col M P Q
H2 : Col M A B
H1 : Col Q A B
H : not (eq Q M)
A,B,P,Q,M : Point
*****
False
+++++
assert (parallel A B P Q).
-----
Theorem aux_co_side_1 : forall A B P Q M : Point, Q <> M -> inter_ll M A B P Q -> S Q A B <> 0.
Proof.
intros.
cut (~ Col Q A B).
Geometry.
unfold not in |- *.
intro.
unfold inter_ll in *.
DecompAndAll.
assert (A<>B).
try (unfold not;intro;subst A).
Geometry.
assert (P<>Q).
try (unfold not;intro;subst P).
Geometry.
assert (Col B Q M).
assert (Col A Q M).
assert (Col Q P B).
assert (Col Q P A).
assert (Col P A B).
assert (parallel A B P Q).

*****
H10 : Col P A B
H9 : Col Q P A
H8 : Col Q P B
H7 : Col A Q M
H6 : Col B Q M
H3 : not (eq P Q)
H0 : not (eq A B)
H5 : not (parallel A B P Q)
H4 : Col M P Q
H2 : Col M A B
H1 : Col Q A B
H : not (eq Q M)
A,B,P,Q,M : Point
*****
parallel A B P Q
+++++
unfold parallel in *.
-----
Theorem aux_co_side_1 : forall A B P Q M : Point, Q <> M -> inter_ll M A B P Q -> S Q A B <> 0.
Proof.
intros.
cut (~ Col Q A B).
Geometry.
unfold not in |- *.
intro.
unfold inter_ll in *.
DecompAndAll.
assert (A<>B).
try (unfold not;intro;subst A).
Geometry.
assert (P<>Q).
try (unfold not;intro;subst P).
Geometry.
assert (Col B Q M).
assert (Col A Q M).
assert (Col Q P B).
assert (Col Q P A).
assert (Col P A B).
assert (parallel A B P Q).
unfold parallel in *.

*****
H10 : Col P A B
H9 : Col Q P A
H8 : Col Q P B
H7 : Col A Q M
H6 : Col B Q M
H3 : not (eq P Q)
H0 : not (eq A B)
H5 : not (eq (S4 A P B Q) F0)
H4 : Col M P Q
H2 : Col M A B
H1 : Col Q A B
H : not (eq Q M)
A,B,P,Q,M : Point
*****
eq (S4 A P B Q) F0
+++++
unfold S4 in *.
-----
Theorem aux_co_side_1 : forall A B P Q M : Point, Q <> M -> inter_ll M A B P Q -> S Q A B <> 0.
Proof.
intros.
cut (~ Col Q A B).
Geometry.
unfold not in |- *.
intro.
unfold inter_ll in *.
DecompAndAll.
assert (A<>B).
try (unfold not;intro;subst A).
Geometry.
assert (P<>Q).
try (unfold not;intro;subst P).
Geometry.
assert (Col B Q M).
assert (Col A Q M).
assert (Col Q P B).
assert (Col Q P A).
assert (Col P A B).
assert (parallel A B P Q).
unfold parallel in *.
unfold S4 in *.

*****
H10 : Col P A B
H9 : Col Q P A
H8 : Col Q P B
H7 : Col A Q M
H6 : Col B Q M
H3 : not (eq P Q)
H0 : not (eq A B)
H5 : not (eq (Fplus (S A P B) (S A B Q)) F0)
H4 : Col M P Q
H2 : Col M A B
H1 : Col Q A B
H : not (eq Q M)
A,B,P,Q,M : Point
*****
eq (Fplus (S A P B) (S A B Q)) F0
+++++
unfold Col in *.
-----
Theorem aux_co_side_1 : forall A B P Q M : Point, Q <> M -> inter_ll M A B P Q -> S Q A B <> 0.
Proof.
intros.
cut (~ Col Q A B).
Geometry.
unfold not in |- *.
intro.
unfold inter_ll in *.
DecompAndAll.
assert (A<>B).
try (unfold not;intro;subst A).
Geometry.
assert (P<>Q).
try (unfold not;intro;subst P).
Geometry.
assert (Col B Q M).
assert (Col A Q M).
assert (Col Q P B).
assert (Col Q P A).
assert (Col P A B).
assert (parallel A B P Q).
unfold parallel in *.
unfold S4 in *.
unfold Col in *.

*****
H10 : eq (S P A B) F0
H9 : eq (S Q P A) F0
H8 : eq (S Q P B) F0
H7 : eq (S A Q M) F0
H6 : eq (S B Q M) F0
H3 : not (eq P Q)
H0 : not (eq A B)
H5 : not (eq (Fplus (S A P B) (S A B Q)) F0)
H4 : eq (S M P Q) F0
H2 : eq (S M A B) F0
H1 : eq (S Q A B) F0
H : not (eq Q M)
A,B,P,Q,M : Point
*****
eq (Fplus (S A P B) (S A B Q)) F0
+++++
uniformize_signed_areas.
-----
Theorem aux_co_side_1 : forall A B P Q M : Point, Q <> M -> inter_ll M A B P Q -> S Q A B <> 0.
Proof.
intros.
cut (~ Col Q A B).
Geometry.
unfold not in |- *.
intro.
unfold inter_ll in *.
DecompAndAll.
assert (A<>B).
try (unfold not;intro;subst A).
Geometry.
assert (P<>Q).
try (unfold not;intro;subst P).
Geometry.
assert (Col B Q M).
assert (Col A Q M).
assert (Col Q P B).
assert (Col Q P A).
assert (Col P A B).
assert (parallel A B P Q).
unfold parallel in *.
unfold S4 in *.
unfold Col in *.
uniformize_signed_areas.

*****
H10 : eq (Fopp (S A P B)) F0
H9 : eq (S Q P A) F0
H8 : eq (S Q P B) F0
H7 : eq (S A Q M) F0
H6 : eq (S B Q M) F0
H5 : not (eq (Fplus (S A P B) (S Q A B)) F0)
H4 : eq (S M P Q) F0
H2 : eq (S M A B) F0
H1 : eq (S Q A B) F0
H3 : not (eq P Q)
H0 : not (eq A B)
H : not (eq Q M)
A,B,P,Q,M : Point
*****
eq (Fplus (S A P B) (S Q A B)) F0
+++++
rewrite H1.
-----
Theorem aux_co_side_1 : forall A B P Q M : Point, Q <> M -> inter_ll M A B P Q -> S Q A B <> 0.
Proof.
intros.
cut (~ Col Q A B).
Geometry.
unfold not in |- *.
intro.
unfold inter_ll in *.
DecompAndAll.
assert (A<>B).
try (unfold not;intro;subst A).
Geometry.
assert (P<>Q).
try (unfold not;intro;subst P).
Geometry.
assert (Col B Q M).
assert (Col A Q M).
assert (Col Q P B).
assert (Col Q P A).
assert (Col P A B).
assert (parallel A B P Q).
unfold parallel in *.
unfold S4 in *.
unfold Col in *.
uniformize_signed_areas.
rewrite H1.

*****
H10 : eq (Fopp (S A P B)) F0
H9 : eq (S Q P A) F0
H8 : eq (S Q P B) F0
H7 : eq (S A Q M) F0
H6 : eq (S B Q M) F0
H5 : not (eq (Fplus (S A P B) (S Q A B)) F0)
H4 : eq (S M P Q) F0
H2 : eq (S M A B) F0
H1 : eq (S Q A B) F0
H3 : not (eq P Q)
H0 : not (eq A B)
H : not (eq Q M)
A,B,P,Q,M : Point
*****
eq (Fplus (S A P B) F0) F0
+++++
ring_simplify.
-----
Theorem aux_co_side_1 : forall A B P Q M : Point, Q <> M -> inter_ll M A B P Q -> S Q A B <> 0.
Proof.
intros.
cut (~ Col Q A B).
Geometry.
unfold not in |- *.
intro.
unfold inter_ll in *.
DecompAndAll.
assert (A<>B).
try (unfold not;intro;subst A).
Geometry.
assert (P<>Q).
try (unfold not;intro;subst P).
Geometry.
assert (Col B Q M).
assert (Col A Q M).
assert (Col Q P B).
assert (Col Q P A).
assert (Col P A B).
assert (parallel A B P Q).
unfold parallel in *.
unfold S4 in *.
unfold Col in *.
uniformize_signed_areas.
rewrite H1.
ring_simplify.

*****
H10 : eq (Fopp (S A P B)) F0
H9 : eq (S Q P A) F0
H8 : eq (S Q P B) F0
H7 : eq (S A Q M) F0
H6 : eq (S B Q M) F0
H5 : not (eq (Fplus (S A P B) (S Q A B)) F0)
H4 : eq (S M P Q) F0
H2 : eq (S M A B) F0
H1 : eq (S Q A B) F0
H3 : not (eq P Q)
H0 : not (eq A B)
H : not (eq Q M)
A,B,P,Q,M : Point
*****
eq (S A P B) F0
+++++
Geometry.
-----
Theorem aux_co_side_1 : forall A B P Q M : Point, Q <> M -> inter_ll M A B P Q -> S Q A B <> 0.
Proof.
intros.
cut (~ Col Q A B).
Geometry.
unfold not in |- *.
intro.
unfold inter_ll in *.
DecompAndAll.
assert (A<>B).
try (unfold not;intro;subst A).
Geometry.
assert (P<>Q).
try (unfold not;intro;subst P).
Geometry.
assert (Col B Q M).
assert (Col A Q M).
assert (Col Q P B).
assert (Col Q P A).
assert (Col P A B).
assert (parallel A B P Q).

*****
H11 : parallel A B P Q
H10 : Col P A B
H9 : Col Q P A
H8 : Col Q P B
H7 : Col A Q M
H6 : Col B Q M
H3 : not (eq P Q)
H0 : not (eq A B)
H5 : not (parallel A B P Q)
H4 : Col M P Q
H2 : Col M A B
H1 : Col Q A B
H : not (eq Q M)
A,B,P,Q,M : Point
*****
False
+++++
intuition.
-----
Theorem aux_co_side_1 : forall A B P Q M : Point, Q <> M -> inter_ll M A B P Q -> S Q A B <> 0.
Proof.
intros.
cut (~ Col Q A B).

*****

*****

+++++
Qed.
-----
Hint Resolve aux_co_side_1: Geom.
-----
Theorem co_side_elim_1 :\n  forall A B P Q M : Point,\n  Q <> M -> \n  inter_ll M A B P Q -> \n  P ** M / Q ** M = S P A B / S Q A B.
-----
Theorem co_side_elim_1 : forall A B P Q M : Point, Q <> M -> inter_ll M A B P Q -> P ** M / Q ** M = S P A B / S Q A B.

*****

*****
forall (A B P Q M : Point) (_ : not (eq Q M)) (_ : inter_ll M A B P Q), eq (Fdiv (DSeg P M) (DSeg Q M)) (Fdiv (S P A B) (S Q A B))
+++++
Proof.
-----
Theorem co_side_elim_1 : forall A B P Q M : Point, Q <> M -> inter_ll M A B P Q -> P ** M / Q ** M = S P A B / S Q A B.
Proof.

*****

*****
forall (A B P Q M : Point) (_ : not (eq Q M)) (_ : inter_ll M A B P Q), eq (Fdiv (DSeg P M) (DSeg Q M)) (Fdiv (S P A B) (S Q A B))
+++++
intros.
-----
Theorem co_side_elim_1 : forall A B P Q M : Point, Q <> M -> inter_ll M A B P Q -> P ** M / Q ** M = S P A B / S Q A B.
Proof.
intros.

*****
H0 : inter_ll M A B P Q
H : not (eq Q M)
A,B,P,Q,M : Point
*****
eq (Fdiv (DSeg P M) (DSeg Q M)) (Fdiv (S P A B) (S Q A B))
+++++
assert (~ Col Q A B).
-----
Theorem co_side_elim_1 : forall A B P Q M : Point, Q <> M -> inter_ll M A B P Q -> P ** M / Q ** M = S P A B / S Q A B.
Proof.
intros.
assert (~ Col Q A B).

*****
H0 : inter_ll M A B P Q
H : not (eq Q M)
A,B,P,Q,M : Point
*****
not (Col Q A B)
+++++
unfold Col.
-----
Theorem co_side_elim_1 : forall A B P Q M : Point, Q <> M -> inter_ll M A B P Q -> P ** M / Q ** M = S P A B / S Q A B.
Proof.
intros.
assert (~ Col Q A B).
unfold Col.

*****
H0 : inter_ll M A B P Q
H : not (eq Q M)
A,B,P,Q,M : Point
*****
not (eq (S Q A B) F0)
+++++
eauto with Geom.
-----
Theorem co_side_elim_1 : forall A B P Q M : Point, Q <> M -> inter_ll M A B P Q -> P ** M / Q ** M = S P A B / S Q A B.
Proof.
intros.
assert (~ Col Q A B).

*****
H1 : not (Col Q A B)
H0 : inter_ll M A B P Q
H : not (eq Q M)
A,B,P,Q,M : Point
*****
eq (Fdiv (DSeg P M) (DSeg Q M)) (Fdiv (S P A B) (S Q A B))
+++++
unfold inter_ll in H0.
-----
Theorem co_side_elim_1 : forall A B P Q M : Point, Q <> M -> inter_ll M A B P Q -> P ** M / Q ** M = S P A B / S Q A B.
Proof.
intros.
assert (~ Col Q A B).
unfold inter_ll in H0.

*****
H1 : not (Col Q A B)
H0 : and (Col M A B) (and (Col M P Q) (not (parallel A B P Q)))
H : not (eq Q M)
A,B,P,Q,M : Point
*****
eq (Fdiv (DSeg P M) (DSeg Q M)) (Fdiv (S P A B) (S Q A B))
+++++
DecompAndAll.
-----
Theorem co_side_elim_1 : forall A B P Q M : Point, Q <> M -> inter_ll M A B P Q -> P ** M / Q ** M = S P A B / S Q A B.
Proof.
intros.
assert (~ Col Q A B).
unfold inter_ll in H0.
DecompAndAll.

*****
H5 : not (parallel A B P Q)
H4 : Col M P Q
H2 : Col M A B
H1 : not (Col Q A B)
H : not (eq Q M)
A,B,P,Q,M : Point
*****
eq (Fdiv (DSeg P M) (DSeg Q M)) (Fdiv (S P A B) (S Q A B))
+++++
apply co_side.
-----
Theorem co_side_elim_1 : forall A B P Q M : Point, Q <> M -> inter_ll M A B P Q -> P ** M / Q ** M = S P A B / S Q A B.
Proof.
intros.
assert (~ Col Q A B).
unfold inter_ll in H0.
DecompAndAll.
apply co_side.

*****
H5 : not (parallel A B P Q)
H4 : Col M P Q
H2 : Col M A B
H1 : not (Col Q A B)
H : not (eq Q M)
A,B,P,Q,M : Point
*****
not (Col Q A B)
+++++
Geometry.
-----
Theorem co_side_elim_1 : forall A B P Q M : Point, Q <> M -> inter_ll M A B P Q -> P ** M / Q ** M = S P A B / S Q A B.
Proof.
intros.
assert (~ Col Q A B).
unfold inter_ll in H0.
DecompAndAll.
apply co_side.

*****
H5 : not (parallel A B P Q)
H4 : Col M P Q
H2 : Col M A B
H1 : not (Col Q A B)
H : not (eq Q M)
A,B,P,Q,M : Point
*****
not (eq Q M)
+++++
Geometry.
-----
Theorem co_side_elim_1 : forall A B P Q M : Point, Q <> M -> inter_ll M A B P Q -> P ** M / Q ** M = S P A B / S Q A B.
Proof.
intros.
assert (~ Col Q A B).
unfold inter_ll in H0.
DecompAndAll.
apply co_side.

*****
H5 : not (parallel A B P Q)
H4 : Col M P Q
H2 : Col M A B
H1 : not (Col Q A B)
H : not (eq Q M)
A,B,P,Q,M : Point
*****
Col A B M
+++++
Geometry.
-----
Theorem co_side_elim_1 : forall A B P Q M : Point, Q <> M -> inter_ll M A B P Q -> P ** M / Q ** M = S P A B / S Q A B.
Proof.
intros.
assert (~ Col Q A B).
unfold inter_ll in H0.
DecompAndAll.
apply co_side.

*****
H5 : not (parallel A B P Q)
H4 : Col M P Q
H2 : Col M A B
H1 : not (Col Q A B)
H : not (eq Q M)
A,B,P,Q,M : Point
*****
Col P Q M
+++++
Geometry.
-----
Theorem co_side_elim_1 : forall A B P Q M : Point, Q <> M -> inter_ll M A B P Q -> P ** M / Q ** M = S P A B / S Q A B.
Proof.
intros.
assert (~ Col Q A B).

*****

*****

+++++
Qed.
-----
Lemma inter_ll_comm1 : forall P A B C D : Point, \ninter_ll P A B C D -> inter_ll P A B D C.
-----
Lemma inter_ll_comm1 : forall P A B C D : Point, inter_ll P A B C D -> inter_ll P A B D C.

*****

*****
forall (P A B C D : Point) (_ : inter_ll P A B C D), inter_ll P A B D C
+++++
Proof.
-----
Lemma inter_ll_comm1 : forall P A B C D : Point, inter_ll P A B C D -> inter_ll P A B D C.
Proof.

*****

*****
forall (P A B C D : Point) (_ : inter_ll P A B C D), inter_ll P A B D C
+++++
unfold inter_ll in |- *.
-----
Lemma inter_ll_comm1 : forall P A B C D : Point, inter_ll P A B C D -> inter_ll P A B D C.
Proof.
unfold inter_ll in |- *.

*****

*****
forall (P A B C D : Point) (_ : and (Col P A B) (and (Col P C D) (not (parallel A B C D)))), and (Col P A B) (and (Col P D C) (not (parallel A B D C)))
+++++
Geometry.
-----
Lemma inter_ll_comm1 : forall P A B C D : Point, inter_ll P A B C D -> inter_ll P A B D C.
Proof.
unfold inter_ll in |- *.
Geometry.

*****

*****
forall (P A B C D : Point) (_ : and (Col P A B) (and (Col P C D) (not (parallel A B C D)))), and (Col P A B) (and (Col P D C) (not (parallel A B D C)))
+++++
intros.
-----
Lemma inter_ll_comm1 : forall P A B C D : Point, inter_ll P A B C D -> inter_ll P A B D C.
Proof.
unfold inter_ll in |- *.
Geometry.
intros.

*****
H : and (Col P A B) (and (Col P C D) (not (parallel A B C D)))
P,A,B,C,D : Point
*****
and (Col P A B) (and (Col P D C) (not (parallel A B D C)))
+++++
intuition.
-----
Lemma inter_ll_comm1 : forall P A B C D : Point, inter_ll P A B C D -> inter_ll P A B D C.
Proof.
unfold inter_ll in |- *.
Geometry.
intros.
intuition.

*****

*****

+++++
Qed.
-----
Lemma inter_ll_comm2 : forall P A B C D : Point, \ninter_ll P A B C D -> inter_ll P B A C D.
-----
Lemma inter_ll_comm2 : forall P A B C D : Point, inter_ll P A B C D -> inter_ll P B A C D.

*****

*****
forall (P A B C D : Point) (_ : inter_ll P A B C D), inter_ll P B A C D
+++++
Proof.
-----
Lemma inter_ll_comm2 : forall P A B C D : Point, inter_ll P A B C D -> inter_ll P B A C D.
Proof.

*****

*****
forall (P A B C D : Point) (_ : inter_ll P A B C D), inter_ll P B A C D
+++++
unfold inter_ll in |- *.
-----
Lemma inter_ll_comm2 : forall P A B C D : Point, inter_ll P A B C D -> inter_ll P B A C D.
Proof.
unfold inter_ll in |- *.

*****

*****
forall (P A B C D : Point) (_ : and (Col P A B) (and (Col P C D) (not (parallel A B C D)))), and (Col P B A) (and (Col P C D) (not (parallel B A C D)))
+++++
intros.
-----
Lemma inter_ll_comm2 : forall P A B C D : Point, inter_ll P A B C D -> inter_ll P B A C D.
Proof.
unfold inter_ll in |- *.
intros.

*****
H : and (Col P A B) (and (Col P C D) (not (parallel A B C D)))
P,A,B,C,D : Point
*****
and (Col P B A) (and (Col P C D) (not (parallel B A C D)))
+++++
intuition.
-----
Lemma inter_ll_comm2 : forall P A B C D : Point, inter_ll P A B C D -> inter_ll P B A C D.
Proof.
unfold inter_ll in |- *.
intros.
intuition.

*****

*****

+++++
Qed.
-----
Lemma inter_ll_comm3 : forall P A B C D : Point, \ninter_ll P A B C D -> inter_ll P B A D C.
-----
Lemma inter_ll_comm3 : forall P A B C D : Point, inter_ll P A B C D -> inter_ll P B A D C.

*****

*****
forall (P A B C D : Point) (_ : inter_ll P A B C D), inter_ll P B A D C
+++++
Proof.
-----
Lemma inter_ll_comm3 : forall P A B C D : Point, inter_ll P A B C D -> inter_ll P B A D C.
Proof.

*****

*****
forall (P A B C D : Point) (_ : inter_ll P A B C D), inter_ll P B A D C
+++++
unfold inter_ll in |- *.
-----
Lemma inter_ll_comm3 : forall P A B C D : Point, inter_ll P A B C D -> inter_ll P B A D C.
Proof.
unfold inter_ll in |- *.

*****

*****
forall (P A B C D : Point) (_ : and (Col P A B) (and (Col P C D) (not (parallel A B C D)))), and (Col P B A) (and (Col P D C) (not (parallel B A D C)))
+++++
intros.
-----
Lemma inter_ll_comm3 : forall P A B C D : Point, inter_ll P A B C D -> inter_ll P B A D C.
Proof.
unfold inter_ll in |- *.
intros.

*****
H : and (Col P A B) (and (Col P C D) (not (parallel A B C D)))
P,A,B,C,D : Point
*****
and (Col P B A) (and (Col P D C) (not (parallel B A D C)))
+++++
intuition.
-----
Lemma inter_ll_comm3 : forall P A B C D : Point, inter_ll P A B C D -> inter_ll P B A D C.
Proof.
unfold inter_ll in |- *.
intros.
intuition.

*****
H1 : parallel B A D C
H2 : forall _ : parallel A B C D, False
H : Col P C D
H0 : Col P A B
P,A,B,C,D : Point
*****
False
+++++
assert (parallel A B D C).
-----
Lemma inter_ll_comm3 : forall P A B C D : Point, inter_ll P A B C D -> inter_ll P B A D C.
Proof.
unfold inter_ll in |- *.
intros.
intuition.
assert (parallel A B D C).

*****
H1 : parallel B A D C
H2 : forall _ : parallel A B C D, False
H : Col P C D
H0 : Col P A B
P,A,B,C,D : Point
*****
parallel A B D C
+++++
Geometry.
-----
Lemma inter_ll_comm3 : forall P A B C D : Point, inter_ll P A B C D -> inter_ll P B A D C.
Proof.
unfold inter_ll in |- *.
intros.
intuition.
assert (parallel A B D C).

*****
H3 : parallel A B D C
H1 : parallel B A D C
H2 : forall _ : parallel A B C D, False
H : Col P C D
H0 : Col P A B
P,A,B,C,D : Point
*****
False
+++++
Geometry.
-----
Lemma inter_ll_comm3 : forall P A B C D : Point, inter_ll P A B C D -> inter_ll P B A D C.
Proof.
unfold inter_ll in |- *.
intros.
intuition.
assert (parallel A B D C).

*****

*****

+++++
Qed.
-----
Lemma inter_ll_comm4 : forall P A B C D : Point, \ninter_ll P A B C D -> inter_ll P C D A B.
-----
Lemma inter_ll_comm4 : forall P A B C D : Point, inter_ll P A B C D -> inter_ll P C D A B.

*****

*****
forall (P A B C D : Point) (_ : inter_ll P A B C D), inter_ll P C D A B
+++++
Proof.
-----
Lemma inter_ll_comm4 : forall P A B C D : Point, inter_ll P A B C D -> inter_ll P C D A B.
Proof.

*****

*****
forall (P A B C D : Point) (_ : inter_ll P A B C D), inter_ll P C D A B
+++++
unfold inter_ll in |- *.
-----
Lemma inter_ll_comm4 : forall P A B C D : Point, inter_ll P A B C D -> inter_ll P C D A B.
Proof.
unfold inter_ll in |- *.

*****

*****
forall (P A B C D : Point) (_ : and (Col P A B) (and (Col P C D) (not (parallel A B C D)))), and (Col P C D) (and (Col P A B) (not (parallel C D A B)))
+++++
intros.
-----
Lemma inter_ll_comm4 : forall P A B C D : Point, inter_ll P A B C D -> inter_ll P C D A B.
Proof.
unfold inter_ll in |- *.
intros.

*****
H : and (Col P A B) (and (Col P C D) (not (parallel A B C D)))
P,A,B,C,D : Point
*****
and (Col P C D) (and (Col P A B) (not (parallel C D A B)))
+++++
intuition.
-----
Lemma inter_ll_comm4 : forall P A B C D : Point, inter_ll P A B C D -> inter_ll P C D A B.
Proof.
unfold inter_ll in |- *.
intros.
intuition.

*****

*****

+++++
Qed.
-----
Hint Resolve inter_ll_comm1 inter_ll_comm2 inter_ll_comm3 inter_ll_comm4: Geom.
-----
Theorem aux_co_side_2 :\n forall A B P Q M : Point, P <> M -> inter_ll M A B P Q -> S P A B <>0.
-----
Theorem aux_co_side_2 : forall A B P Q M : Point, P <> M -> inter_ll M A B P Q -> S P A B <>0.

*****

*****
forall (A B P Q M : Point) (_ : not (eq P M)) (_ : inter_ll M A B P Q), not (eq (S P A B) F0)
+++++
Proof.
-----
Theorem aux_co_side_2 : forall A B P Q M : Point, P <> M -> inter_ll M A B P Q -> S P A B <>0.
Proof.

*****

*****
forall (A B P Q M : Point) (_ : not (eq P M)) (_ : inter_ll M A B P Q), not (eq (S P A B) F0)
+++++
intros.
-----
Theorem aux_co_side_2 : forall A B P Q M : Point, P <> M -> inter_ll M A B P Q -> S P A B <>0.
Proof.
intros.

*****
H0 : inter_ll M A B P Q
H : not (eq P M)
A,B,P,Q,M : Point
*****
not (eq (S P A B) F0)
+++++
eapply aux_co_side_1.
-----
Theorem aux_co_side_2 : forall A B P Q M : Point, P <> M -> inter_ll M A B P Q -> S P A B <>0.
Proof.
intros.
eapply aux_co_side_1.

*****
H0 : inter_ll M A B P Q
H : not (eq P M)
A,B,P,Q,M : Point
*****
not (eq P ?M)
+++++
eauto with Geom.
-----
Theorem aux_co_side_2 : forall A B P Q M : Point, P <> M -> inter_ll M A B P Q -> S P A B <>0.
Proof.
intros.
eapply aux_co_side_1.

*****
H0 : inter_ll M A B P Q
H : not (eq P M)
A,B,P,Q,M : Point
*****
inter_ll M A B ?P P
+++++
eauto with Geom.
-----
Theorem aux_co_side_2 : forall A B P Q M : Point, P <> M -> inter_ll M A B P Q -> S P A B <>0.
Proof.
intros.
eapply aux_co_side_1.

*****

*****

+++++
Qed.
-----
Theorem co_side_elim_2 : forall A B P Q M : Point,\n P <> M -> inter_ll M A B P Q -> Q ** M / P ** M = S Q A B / S P A B.
-----
Theorem co_side_elim_2 : forall A B P Q M : Point, P <> M -> inter_ll M A B P Q -> Q ** M / P ** M = S Q A B / S P A B.

*****

*****
forall (A B P Q M : Point) (_ : not (eq P M)) (_ : inter_ll M A B P Q), eq (Fdiv (DSeg Q M) (DSeg P M)) (Fdiv (S Q A B) (S P A B))
+++++
Proof.
-----
Theorem co_side_elim_2 : forall A B P Q M : Point, P <> M -> inter_ll M A B P Q -> Q ** M / P ** M = S Q A B / S P A B.
Proof.

*****

*****
forall (A B P Q M : Point) (_ : not (eq P M)) (_ : inter_ll M A B P Q), eq (Fdiv (DSeg Q M) (DSeg P M)) (Fdiv (S Q A B) (S P A B))
+++++
intros.
-----
Theorem co_side_elim_2 : forall A B P Q M : Point, P <> M -> inter_ll M A B P Q -> Q ** M / P ** M = S Q A B / S P A B.
Proof.
intros.

*****
H0 : inter_ll M A B P Q
H : not (eq P M)
A,B,P,Q,M : Point
*****
eq (Fdiv (DSeg Q M) (DSeg P M)) (Fdiv (S Q A B) (S P A B))
+++++
apply co_side_elim_1.
-----
Theorem co_side_elim_2 : forall A B P Q M : Point, P <> M -> inter_ll M A B P Q -> Q ** M / P ** M = S Q A B / S P A B.
Proof.
intros.
apply co_side_elim_1.

*****
H0 : inter_ll M A B P Q
H : not (eq P M)
A,B,P,Q,M : Point
*****
not (eq P M)
+++++
Geometry.
-----
Theorem co_side_elim_2 : forall A B P Q M : Point, P <> M -> inter_ll M A B P Q -> Q ** M / P ** M = S Q A B / S P A B.
Proof.
intros.
apply co_side_elim_1.

*****
H0 : inter_ll M A B P Q
H : not (eq P M)
A,B,P,Q,M : Point
*****
inter_ll M A B Q P
+++++
Geometry.
-----
Theorem co_side_elim_2 : forall A B P Q M : Point, P <> M -> inter_ll M A B P Q -> Q ** M / P ** M = S Q A B / S P A B.
Proof.
intros.
apply co_side_elim_1.

*****

*****

+++++
Qed.
-----
Theorem aux_co_side_3 :\n forall A B P Q M : Point, B <> M -> inter_ll M A B P Q -> S B P Q <>0.
-----
Theorem aux_co_side_3 : forall A B P Q M : Point, B <> M -> inter_ll M A B P Q -> S B P Q <>0.

*****

*****
forall (A B P Q M : Point) (_ : not (eq B M)) (_ : inter_ll M A B P Q), not (eq (S B P Q) F0)
+++++
Proof.
-----
Theorem aux_co_side_3 : forall A B P Q M : Point, B <> M -> inter_ll M A B P Q -> S B P Q <>0.
Proof.

*****

*****
forall (A B P Q M : Point) (_ : not (eq B M)) (_ : inter_ll M A B P Q), not (eq (S B P Q) F0)
+++++
intros.
-----
Theorem aux_co_side_3 : forall A B P Q M : Point, B <> M -> inter_ll M A B P Q -> S B P Q <>0.
Proof.
intros.

*****
H0 : inter_ll M A B P Q
H : not (eq B M)
A,B,P,Q,M : Point
*****
not (eq (S B P Q) F0)
+++++
eapply aux_co_side_1.
-----
Theorem aux_co_side_3 : forall A B P Q M : Point, B <> M -> inter_ll M A B P Q -> S B P Q <>0.
Proof.
intros.
eapply aux_co_side_1.

*****
H0 : inter_ll M A B P Q
H : not (eq B M)
A,B,P,Q,M : Point
*****
not (eq B ?M)
+++++
eauto with Geom.
-----
Theorem aux_co_side_3 : forall A B P Q M : Point, B <> M -> inter_ll M A B P Q -> S B P Q <>0.
Proof.
intros.
eapply aux_co_side_1.

*****
H0 : inter_ll M A B P Q
H : not (eq B M)
A,B,P,Q,M : Point
*****
inter_ll M P Q ?P B
+++++
eauto with Geom.
-----
Theorem aux_co_side_3 : forall A B P Q M : Point, B <> M -> inter_ll M A B P Q -> S B P Q <>0.
Proof.
intros.
eapply aux_co_side_1.

*****

*****

+++++
Qed.
-----
Theorem co_side_elim_3 : forall A B P Q M : Point,\n B <> M -> inter_ll M A B P Q -> A ** M / B ** M = S A P Q / S B P Q.
-----
Theorem co_side_elim_3 : forall A B P Q M : Point, B <> M -> inter_ll M A B P Q -> A ** M / B ** M = S A P Q / S B P Q.

*****

*****
forall (A B P Q M : Point) (_ : not (eq B M)) (_ : inter_ll M A B P Q), eq (Fdiv (DSeg A M) (DSeg B M)) (Fdiv (S A P Q) (S B P Q))
+++++
Proof.
-----
Theorem co_side_elim_3 : forall A B P Q M : Point, B <> M -> inter_ll M A B P Q -> A ** M / B ** M = S A P Q / S B P Q.
Proof.

*****

*****
forall (A B P Q M : Point) (_ : not (eq B M)) (_ : inter_ll M A B P Q), eq (Fdiv (DSeg A M) (DSeg B M)) (Fdiv (S A P Q) (S B P Q))
+++++
intros.
-----
Theorem co_side_elim_3 : forall A B P Q M : Point, B <> M -> inter_ll M A B P Q -> A ** M / B ** M = S A P Q / S B P Q.
Proof.
intros.

*****
H0 : inter_ll M A B P Q
H : not (eq B M)
A,B,P,Q,M : Point
*****
eq (Fdiv (DSeg A M) (DSeg B M)) (Fdiv (S A P Q) (S B P Q))
+++++
apply co_side_elim_1.
-----
Theorem co_side_elim_3 : forall A B P Q M : Point, B <> M -> inter_ll M A B P Q -> A ** M / B ** M = S A P Q / S B P Q.
Proof.
intros.
apply co_side_elim_1.

*****
H0 : inter_ll M A B P Q
H : not (eq B M)
A,B,P,Q,M : Point
*****
not (eq B M)
+++++
Geometry.
-----
Theorem co_side_elim_3 : forall A B P Q M : Point, B <> M -> inter_ll M A B P Q -> A ** M / B ** M = S A P Q / S B P Q.
Proof.
intros.
apply co_side_elim_1.

*****
H0 : inter_ll M A B P Q
H : not (eq B M)
A,B,P,Q,M : Point
*****
inter_ll M P Q A B
+++++
Geometry.
-----
Theorem co_side_elim_3 : forall A B P Q M : Point, B <> M -> inter_ll M A B P Q -> A ** M / B ** M = S A P Q / S B P Q.
Proof.
intros.
apply co_side_elim_1.

*****

*****

+++++
Qed.
-----
Theorem aux_co_side_4 :\n forall A B P Q M : Point, A <> M -> inter_ll M A B P Q -> S A P Q <>0.
-----
Theorem aux_co_side_4 : forall A B P Q M : Point, A <> M -> inter_ll M A B P Q -> S A P Q <>0.

*****

*****
forall (A B P Q M : Point) (_ : not (eq A M)) (_ : inter_ll M A B P Q), not (eq (S A P Q) F0)
+++++
Proof.
-----
Theorem aux_co_side_4 : forall A B P Q M : Point, A <> M -> inter_ll M A B P Q -> S A P Q <>0.
Proof.

*****

*****
forall (A B P Q M : Point) (_ : not (eq A M)) (_ : inter_ll M A B P Q), not (eq (S A P Q) F0)
+++++
intros.
-----
Theorem aux_co_side_4 : forall A B P Q M : Point, A <> M -> inter_ll M A B P Q -> S A P Q <>0.
Proof.
intros.

*****
H0 : inter_ll M A B P Q
H : not (eq A M)
A,B,P,Q,M : Point
*****
not (eq (S A P Q) F0)
+++++
eapply aux_co_side_1.
-----
Theorem aux_co_side_4 : forall A B P Q M : Point, A <> M -> inter_ll M A B P Q -> S A P Q <>0.
Proof.
intros.
eapply aux_co_side_1.

*****
H0 : inter_ll M A B P Q
H : not (eq A M)
A,B,P,Q,M : Point
*****
not (eq A ?M)
+++++
eauto with Geom.
-----
Theorem aux_co_side_4 : forall A B P Q M : Point, A <> M -> inter_ll M A B P Q -> S A P Q <>0.
Proof.
intros.
eapply aux_co_side_1.

*****
H0 : inter_ll M A B P Q
H : not (eq A M)
A,B,P,Q,M : Point
*****
inter_ll M P Q ?P A
+++++
eauto with Geom.
-----
Theorem aux_co_side_4 : forall A B P Q M : Point, A <> M -> inter_ll M A B P Q -> S A P Q <>0.
Proof.
intros.
eapply aux_co_side_1.

*****

*****

+++++
Qed.
-----
Theorem co_side_elim_4 : forall A B P Q M : Point,\n A <> M -> inter_ll M A B P Q -> B ** M / A ** M = S B P Q / S A P Q.
-----
Theorem co_side_elim_4 : forall A B P Q M : Point, A <> M -> inter_ll M A B P Q -> B ** M / A ** M = S B P Q / S A P Q.

*****

*****
forall (A B P Q M : Point) (_ : not (eq A M)) (_ : inter_ll M A B P Q), eq (Fdiv (DSeg B M) (DSeg A M)) (Fdiv (S B P Q) (S A P Q))
+++++
Proof.
-----
Theorem co_side_elim_4 : forall A B P Q M : Point, A <> M -> inter_ll M A B P Q -> B ** M / A ** M = S B P Q / S A P Q.
Proof.

*****

*****
forall (A B P Q M : Point) (_ : not (eq A M)) (_ : inter_ll M A B P Q), eq (Fdiv (DSeg B M) (DSeg A M)) (Fdiv (S B P Q) (S A P Q))
+++++
intros.
-----
Theorem co_side_elim_4 : forall A B P Q M : Point, A <> M -> inter_ll M A B P Q -> B ** M / A ** M = S B P Q / S A P Q.
Proof.
intros.

*****
H0 : inter_ll M A B P Q
H : not (eq A M)
A,B,P,Q,M : Point
*****
eq (Fdiv (DSeg B M) (DSeg A M)) (Fdiv (S B P Q) (S A P Q))
+++++
apply co_side_elim_1.
-----
Theorem co_side_elim_4 : forall A B P Q M : Point, A <> M -> inter_ll M A B P Q -> B ** M / A ** M = S B P Q / S A P Q.
Proof.
intros.
apply co_side_elim_1.

*****
H0 : inter_ll M A B P Q
H : not (eq A M)
A,B,P,Q,M : Point
*****
not (eq A M)
+++++
Geometry.
-----
Theorem co_side_elim_4 : forall A B P Q M : Point, A <> M -> inter_ll M A B P Q -> B ** M / A ** M = S B P Q / S A P Q.
Proof.
intros.
apply co_side_elim_1.

*****
H0 : inter_ll M A B P Q
H : not (eq A M)
A,B,P,Q,M : Point
*****
inter_ll M P Q B A
+++++
Geometry.
-----
Theorem co_side_elim_4 : forall A B P Q M : Point, A <> M -> inter_ll M A B P Q -> B ** M / A ** M = S B P Q / S A P Q.
Proof.
intros.
apply co_side_elim_1.

*****

*****

+++++
Qed.
-----
Lemma elim_length_ratio_inter_ll_1_spec :\n forall A C U V P Q Y : Point,\n inter_ll Y P Q U V -> S A U V <> 0 -> C <> Y -> parallel A Y C Y -> \n A ** Y / C ** Y = S A U V / S C U V.
-----
Lemma elim_length_ratio_inter_ll_1_spec : forall A C U V P Q Y : Point, inter_ll Y P Q U V -> S A U V <> 0 -> C <> Y -> parallel A Y C Y -> A ** Y / C ** Y = S A U V / S C U V.

*****

*****
forall (A C U V P Q Y : Point) (_ : inter_ll Y P Q U V) (_ : not (eq (S A U V) F0)) (_ : not (eq C Y)) (_ : parallel A Y C Y), eq (Fdiv (DSeg A Y) (DSeg C Y)) (Fdiv (S A U V) (S C U V))
+++++
Proof.
-----
Lemma elim_length_ratio_inter_ll_1_spec : forall A C U V P Q Y : Point, inter_ll Y P Q U V -> S A U V <> 0 -> C <> Y -> parallel A Y C Y -> A ** Y / C ** Y = S A U V / S C U V.
Proof.

*****

*****
forall (A C U V P Q Y : Point) (_ : inter_ll Y P Q U V) (_ : not (eq (S A U V) F0)) (_ : not (eq C Y)) (_ : parallel A Y C Y), eq (Fdiv (DSeg A Y) (DSeg C Y)) (Fdiv (S A U V) (S C U V))
+++++
intros.
-----
Lemma elim_length_ratio_inter_ll_1_spec : forall A C U V P Q Y : Point, inter_ll Y P Q U V -> S A U V <> 0 -> C <> Y -> parallel A Y C Y -> A ** Y / C ** Y = S A U V / S C U V.
Proof.
intros.

*****
H2 : parallel A Y C Y
H1 : not (eq C Y)
H0 : not (eq (S A U V) F0)
H : inter_ll Y P Q U V
A,C,U,V,P,Q,Y : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C Y)) (Fdiv (S A U V) (S C U V))
+++++
assert (A ** Y / C ** Y = S A U V / S4 C U Y V).
-----
Lemma elim_length_ratio_inter_ll_1_spec : forall A C U V P Q Y : Point, inter_ll Y P Q U V -> S A U V <> 0 -> C <> Y -> parallel A Y C Y -> A ** Y / C ** Y = S A U V / S C U V.
Proof.
intros.
assert (A ** Y / C ** Y = S A U V / S4 C U Y V).

*****
H2 : parallel A Y C Y
H1 : not (eq C Y)
H0 : not (eq (S A U V) F0)
H : inter_ll Y P Q U V
A,C,U,V,P,Q,Y : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C Y)) (Fdiv (S A U V) (S4 C U Y V))
+++++
eapply elim_length_ratio_inter_ll_1; apply H || auto.
-----
Lemma elim_length_ratio_inter_ll_1_spec : forall A C U V P Q Y : Point, inter_ll Y P Q U V -> S A U V <> 0 -> C <> Y -> parallel A Y C Y -> A ** Y / C ** Y = S A U V / S C U V.
Proof.
intros.
assert (A ** Y / C ** Y = S A U V / S4 C U Y V).

*****
H3 : eq (Fdiv (DSeg A Y) (DSeg C Y)) (Fdiv (S A U V) (S4 C U Y V))
H2 : parallel A Y C Y
H1 : not (eq C Y)
H0 : not (eq (S A U V) F0)
H : inter_ll Y P Q U V
A,C,U,V,P,Q,Y : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C Y)) (Fdiv (S A U V) (S C U V))
+++++
unfold S4 in H3.
-----
Lemma elim_length_ratio_inter_ll_1_spec : forall A C U V P Q Y : Point, inter_ll Y P Q U V -> S A U V <> 0 -> C <> Y -> parallel A Y C Y -> A ** Y / C ** Y = S A U V / S C U V.
Proof.
intros.
assert (A ** Y / C ** Y = S A U V / S4 C U Y V).
unfold S4 in H3.

*****
H3 : eq (Fdiv (DSeg A Y) (DSeg C Y))\n (Fdiv (S A U V) (Fplus (S C U Y) (S C Y V)))
H2 : parallel A Y C Y
H1 : not (eq C Y)
H0 : not (eq (S A U V) F0)
H : inter_ll Y P Q U V
A,C,U,V,P,Q,Y : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C Y)) (Fdiv (S A U V) (S C U V))
+++++
assert (S C U Y + S C Y V = S C U V - S Y U V).
-----
Lemma elim_length_ratio_inter_ll_1_spec : forall A C U V P Q Y : Point, inter_ll Y P Q U V -> S A U V <> 0 -> C <> Y -> parallel A Y C Y -> A ** Y / C ** Y = S A U V / S C U V.
Proof.
intros.
assert (A ** Y / C ** Y = S A U V / S4 C U Y V).
unfold S4 in H3.
assert (S C U Y + S C Y V = S C U V - S Y U V).

*****
H3 : eq (Fdiv (DSeg A Y) (DSeg C Y))\n (Fdiv (S A U V) (Fplus (S C U Y) (S C Y V)))
H2 : parallel A Y C Y
H1 : not (eq C Y)
H0 : not (eq (S A U V) F0)
H : inter_ll Y P Q U V
A,C,U,V,P,Q,Y : Point
*****
eq (Fplus (S C U Y) (S C Y V)) (Fminus (S C U V) (S Y U V))
+++++
assert (S C U V = S C U Y + S C Y V + S Y U V).
-----
Lemma elim_length_ratio_inter_ll_1_spec : forall A C U V P Q Y : Point, inter_ll Y P Q U V -> S A U V <> 0 -> C <> Y -> parallel A Y C Y -> A ** Y / C ** Y = S A U V / S C U V.
Proof.
intros.
assert (A ** Y / C ** Y = S A U V / S4 C U Y V).
unfold S4 in H3.
assert (S C U Y + S C Y V = S C U V - S Y U V).
assert (S C U V = S C U Y + S C Y V + S Y U V).

*****
H3 : eq (Fdiv (DSeg A Y) (DSeg C Y))\n (Fdiv (S A U V) (Fplus (S C U Y) (S C Y V)))
H2 : parallel A Y C Y
H1 : not (eq C Y)
H0 : not (eq (S A U V) F0)
H : inter_ll Y P Q U V
A,C,U,V,P,Q,Y : Point
*****
eq (S C U V) (Fplus (Fplus (S C U Y) (S C Y V)) (S Y U V))
+++++
Geometry.
-----
Lemma elim_length_ratio_inter_ll_1_spec : forall A C U V P Q Y : Point, inter_ll Y P Q U V -> S A U V <> 0 -> C <> Y -> parallel A Y C Y -> A ** Y / C ** Y = S A U V / S C U V.
Proof.
intros.
assert (A ** Y / C ** Y = S A U V / S4 C U Y V).
unfold S4 in H3.
assert (S C U Y + S C Y V = S C U V - S Y U V).
assert (S C U V = S C U Y + S C Y V + S Y U V).

*****
H4 : eq (S C U V) (Fplus (Fplus (S C U Y) (S C Y V)) (S Y U V))
H3 : eq (Fdiv (DSeg A Y) (DSeg C Y))\n (Fdiv (S A U V) (Fplus (S C U Y) (S C Y V)))
H2 : parallel A Y C Y
H1 : not (eq C Y)
H0 : not (eq (S A U V) F0)
H : inter_ll Y P Q U V
A,C,U,V,P,Q,Y : Point
*****
eq (Fplus (S C U Y) (S C Y V)) (Fminus (S C U V) (S Y U V))
+++++
Geometry.
-----
Lemma elim_length_ratio_inter_ll_1_spec : forall A C U V P Q Y : Point, inter_ll Y P Q U V -> S A U V <> 0 -> C <> Y -> parallel A Y C Y -> A ** Y / C ** Y = S A U V / S C U V.
Proof.
intros.
assert (A ** Y / C ** Y = S A U V / S4 C U Y V).
unfold S4 in H3.
assert (S C U Y + S C Y V = S C U V - S Y U V).
assert (S C U V = S C U Y + S C Y V + S Y U V).
Geometry.

*****
H4 : eq (S C U V) (Fplus (Fplus (S C U Y) (S C Y V)) (S Y U V))
H3 : eq (Fdiv (DSeg A Y) (DSeg C Y))\n (Fdiv (S A U V) (Fplus (S C U Y) (S C Y V)))
H2 : parallel A Y C Y
H1 : not (eq C Y)
H0 : not (eq (S A U V) F0)
H : inter_ll Y P Q U V
A,C,U,V,P,Q,Y : Point
*****
eq (Fplus (S C U Y) (S C Y V)) (Fminus (S C U V) (S Y U V))
+++++
rewrite H4.
-----
Lemma elim_length_ratio_inter_ll_1_spec : forall A C U V P Q Y : Point, inter_ll Y P Q U V -> S A U V <> 0 -> C <> Y -> parallel A Y C Y -> A ** Y / C ** Y = S A U V / S C U V.
Proof.
intros.
assert (A ** Y / C ** Y = S A U V / S4 C U Y V).
unfold S4 in H3.
assert (S C U Y + S C Y V = S C U V - S Y U V).
assert (S C U V = S C U Y + S C Y V + S Y U V).
Geometry.
rewrite H4.

*****
H4 : eq (S C U V) (Fplus (Fplus (S C U Y) (S C Y V)) (S Y U V))
H3 : eq (Fdiv (DSeg A Y) (DSeg C Y))\n (Fdiv (S A U V) (Fplus (S C U Y) (S C Y V)))
H2 : parallel A Y C Y
H1 : not (eq C Y)
H0 : not (eq (S A U V) F0)
H : inter_ll Y P Q U V
A,C,U,V,P,Q,Y : Point
*****
eq (Fplus (S C U Y) (S C Y V)) (Fminus (Fplus (Fplus (S C U Y) (S C Y V)) (S Y U V)) (S Y U V))
+++++
ring.
-----
Lemma elim_length_ratio_inter_ll_1_spec : forall A C U V P Q Y : Point, inter_ll Y P Q U V -> S A U V <> 0 -> C <> Y -> parallel A Y C Y -> A ** Y / C ** Y = S A U V / S C U V.
Proof.
intros.
assert (A ** Y / C ** Y = S A U V / S4 C U Y V).
unfold S4 in H3.
assert (S C U Y + S C Y V = S C U V - S Y U V).

*****
H4 : eq (Fplus (S C U Y) (S C Y V)) (Fminus (S C U V) (S Y U V))
H3 : eq (Fdiv (DSeg A Y) (DSeg C Y))\n (Fdiv (S A U V) (Fplus (S C U Y) (S C Y V)))
H2 : parallel A Y C Y
H1 : not (eq C Y)
H0 : not (eq (S A U V) F0)
H : inter_ll Y P Q U V
A,C,U,V,P,Q,Y : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C Y)) (Fdiv (S A U V) (S C U V))
+++++
rewrite H4 in H3.
-----
Lemma elim_length_ratio_inter_ll_1_spec : forall A C U V P Q Y : Point, inter_ll Y P Q U V -> S A U V <> 0 -> C <> Y -> parallel A Y C Y -> A ** Y / C ** Y = S A U V / S C U V.
Proof.
intros.
assert (A ** Y / C ** Y = S A U V / S4 C U Y V).
unfold S4 in H3.
assert (S C U Y + S C Y V = S C U V - S Y U V).
rewrite H4 in H3.

*****
H4 : eq (Fplus (S C U Y) (S C Y V)) (Fminus (S C U V) (S Y U V))
H3 : eq (Fdiv (DSeg A Y) (DSeg C Y))\n (Fdiv (S A U V) (Fminus (S C U V) (S Y U V)))
H2 : parallel A Y C Y
H1 : not (eq C Y)
H0 : not (eq (S A U V) F0)
H : inter_ll Y P Q U V
A,C,U,V,P,Q,Y : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C Y)) (Fdiv (S A U V) (S C U V))
+++++
unfold inter_ll in H.
-----
Lemma elim_length_ratio_inter_ll_1_spec : forall A C U V P Q Y : Point, inter_ll Y P Q U V -> S A U V <> 0 -> C <> Y -> parallel A Y C Y -> A ** Y / C ** Y = S A U V / S C U V.
Proof.
intros.
assert (A ** Y / C ** Y = S A U V / S4 C U Y V).
unfold S4 in H3.
assert (S C U Y + S C Y V = S C U V - S Y U V).
rewrite H4 in H3.
unfold inter_ll in H.

*****
H4 : eq (Fplus (S C U Y) (S C Y V)) (Fminus (S C U V) (S Y U V))
H3 : eq (Fdiv (DSeg A Y) (DSeg C Y))\n (Fdiv (S A U V) (Fminus (S C U V) (S Y U V)))
H2 : parallel A Y C Y
H1 : not (eq C Y)
H0 : not (eq (S A U V) F0)
H : and (Col Y P Q) (and (Col Y U V) (not (parallel P Q U V)))
A,C,U,V,P,Q,Y : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C Y)) (Fdiv (S A U V) (S C U V))
+++++
decompose [and] H.
-----
Lemma elim_length_ratio_inter_ll_1_spec : forall A C U V P Q Y : Point, inter_ll Y P Q U V -> S A U V <> 0 -> C <> Y -> parallel A Y C Y -> A ** Y / C ** Y = S A U V / S C U V.
Proof.
intros.
assert (A ** Y / C ** Y = S A U V / S4 C U Y V).
unfold S4 in H3.
assert (S C U Y + S C Y V = S C U V - S Y U V).
rewrite H4 in H3.
unfold inter_ll in H.
decompose [and] H.

*****
H8 : not (parallel P Q U V)
H7 : Col Y U V
H5 : Col Y P Q
H4 : eq (Fplus (S C U Y) (S C Y V)) (Fminus (S C U V) (S Y U V))
H3 : eq (Fdiv (DSeg A Y) (DSeg C Y))\n (Fdiv (S A U V) (Fminus (S C U V) (S Y U V)))
H2 : parallel A Y C Y
H1 : not (eq C Y)
H0 : not (eq (S A U V) F0)
H : and (Col Y P Q) (and (Col Y U V) (not (parallel P Q U V)))
A,C,U,V,P,Q,Y : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C Y)) (Fdiv (S A U V) (S C U V))
+++++
rewrite H7 in H3.
-----
Lemma elim_length_ratio_inter_ll_1_spec : forall A C U V P Q Y : Point, inter_ll Y P Q U V -> S A U V <> 0 -> C <> Y -> parallel A Y C Y -> A ** Y / C ** Y = S A U V / S C U V.
Proof.
intros.
assert (A ** Y / C ** Y = S A U V / S4 C U Y V).
unfold S4 in H3.
assert (S C U Y + S C Y V = S C U V - S Y U V).
rewrite H4 in H3.
unfold inter_ll in H.
decompose [and] H.
rewrite H7 in H3.

*****
H8 : not (parallel P Q U V)
H7 : Col Y U V
H5 : Col Y P Q
H4 : eq (Fplus (S C U Y) (S C Y V)) (Fminus (S C U V) (S Y U V))
H3 : eq (Fdiv (DSeg A Y) (DSeg C Y)) (Fdiv (S A U V) (Fminus (S C U V) F0))
H2 : parallel A Y C Y
H1 : not (eq C Y)
H0 : not (eq (S A U V) F0)
H : and (Col Y P Q) (and (Col Y U V) (not (parallel P Q U V)))
A,C,U,V,P,Q,Y : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C Y)) (Fdiv (S A U V) (S C U V))
+++++
rewrite H3.
-----
Lemma elim_length_ratio_inter_ll_1_spec : forall A C U V P Q Y : Point, inter_ll Y P Q U V -> S A U V <> 0 -> C <> Y -> parallel A Y C Y -> A ** Y / C ** Y = S A U V / S C U V.
Proof.
intros.
assert (A ** Y / C ** Y = S A U V / S4 C U Y V).
unfold S4 in H3.
assert (S C U Y + S C Y V = S C U V - S Y U V).
rewrite H4 in H3.
unfold inter_ll in H.
decompose [and] H.
rewrite H7 in H3.
rewrite H3.

*****
H8 : not (parallel P Q U V)
H7 : Col Y U V
H5 : Col Y P Q
H4 : eq (Fplus (S C U Y) (S C Y V)) (Fminus (S C U V) (S Y U V))
H3 : eq (Fdiv (DSeg A Y) (DSeg C Y)) (Fdiv (S A U V) (Fminus (S C U V) F0))
H2 : parallel A Y C Y
H1 : not (eq C Y)
H0 : not (eq (S A U V) F0)
H : and (Col Y P Q) (and (Col Y U V) (not (parallel P Q U V)))
A,C,U,V,P,Q,Y : Point
*****
eq (Fdiv (S A U V) (Fminus (S C U V) F0)) (Fdiv (S A U V) (S C U V))
+++++
assert (S C U V - 0 = S C U V).
-----
Lemma elim_length_ratio_inter_ll_1_spec : forall A C U V P Q Y : Point, inter_ll Y P Q U V -> S A U V <> 0 -> C <> Y -> parallel A Y C Y -> A ** Y / C ** Y = S A U V / S C U V.
Proof.
intros.
assert (A ** Y / C ** Y = S A U V / S4 C U Y V).
unfold S4 in H3.
assert (S C U Y + S C Y V = S C U V - S Y U V).
rewrite H4 in H3.
unfold inter_ll in H.
decompose [and] H.
rewrite H7 in H3.
rewrite H3.
assert (S C U V - 0 = S C U V).

*****
H8 : not (parallel P Q U V)
H7 : Col Y U V
H5 : Col Y P Q
H4 : eq (Fplus (S C U Y) (S C Y V)) (Fminus (S C U V) (S Y U V))
H3 : eq (Fdiv (DSeg A Y) (DSeg C Y)) (Fdiv (S A U V) (Fminus (S C U V) F0))
H2 : parallel A Y C Y
H1 : not (eq C Y)
H0 : not (eq (S A U V) F0)
H : and (Col Y P Q) (and (Col Y U V) (not (parallel P Q U V)))
A,C,U,V,P,Q,Y : Point
*****
eq (Fminus (S C U V) F0) (S C U V)
+++++
ring.
-----
Lemma elim_length_ratio_inter_ll_1_spec : forall A C U V P Q Y : Point, inter_ll Y P Q U V -> S A U V <> 0 -> C <> Y -> parallel A Y C Y -> A ** Y / C ** Y = S A U V / S C U V.
Proof.
intros.
assert (A ** Y / C ** Y = S A U V / S4 C U Y V).
unfold S4 in H3.
assert (S C U Y + S C Y V = S C U V - S Y U V).
rewrite H4 in H3.
unfold inter_ll in H.
decompose [and] H.
rewrite H7 in H3.
rewrite H3.
assert (S C U V - 0 = S C U V).

*****
H6 : eq (Fminus (S C U V) F0) (S C U V)
H8 : not (parallel P Q U V)
H7 : Col Y U V
H5 : Col Y P Q
H4 : eq (Fplus (S C U Y) (S C Y V)) (Fminus (S C U V) (S Y U V))
H3 : eq (Fdiv (DSeg A Y) (DSeg C Y)) (Fdiv (S A U V) (Fminus (S C U V) F0))
H2 : parallel A Y C Y
H1 : not (eq C Y)
H0 : not (eq (S A U V) F0)
H : and (Col Y P Q) (and (Col Y U V) (not (parallel P Q U V)))
A,C,U,V,P,Q,Y : Point
*****
eq (Fdiv (S A U V) (Fminus (S C U V) F0)) (Fdiv (S A U V) (S C U V))
+++++
idtac.
-----
Lemma elim_length_ratio_inter_ll_1_spec : forall A C U V P Q Y : Point, inter_ll Y P Q U V -> S A U V <> 0 -> C <> Y -> parallel A Y C Y -> A ** Y / C ** Y = S A U V / S C U V.
Proof.
intros.
assert (A ** Y / C ** Y = S A U V / S4 C U Y V).
unfold S4 in H3.
assert (S C U Y + S C Y V = S C U V - S Y U V).
rewrite H4 in H3.
unfold inter_ll in H.
decompose [and] H.
rewrite H7 in H3.
rewrite H3.
assert (S C U V - 0 = S C U V).
idtac.

*****
H6 : eq (Fminus (S C U V) F0) (S C U V)
H8 : not (parallel P Q U V)
H7 : Col Y U V
H5 : Col Y P Q
H4 : eq (Fplus (S C U Y) (S C Y V)) (Fminus (S C U V) (S Y U V))
H3 : eq (Fdiv (DSeg A Y) (DSeg C Y)) (Fdiv (S A U V) (Fminus (S C U V) F0))
H2 : parallel A Y C Y
H1 : not (eq C Y)
H0 : not (eq (S A U V) F0)
H : and (Col Y P Q) (and (Col Y U V) (not (parallel P Q U V)))
A,C,U,V,P,Q,Y : Point
*****
eq (Fdiv (S A U V) (Fminus (S C U V) F0)) (Fdiv (S A U V) (S C U V))
+++++
rewrite H6.
-----
Lemma elim_length_ratio_inter_ll_1_spec : forall A C U V P Q Y : Point, inter_ll Y P Q U V -> S A U V <> 0 -> C <> Y -> parallel A Y C Y -> A ** Y / C ** Y = S A U V / S C U V.
Proof.
intros.
assert (A ** Y / C ** Y = S A U V / S4 C U Y V).
unfold S4 in H3.
assert (S C U Y + S C Y V = S C U V - S Y U V).
rewrite H4 in H3.
unfold inter_ll in H.
decompose [and] H.
rewrite H7 in H3.
rewrite H3.
assert (S C U V - 0 = S C U V).
idtac.
rewrite H6.

*****
H6 : eq (Fminus (S C U V) F0) (S C U V)
H8 : not (parallel P Q U V)
H7 : Col Y U V
H5 : Col Y P Q
H4 : eq (Fplus (S C U Y) (S C Y V)) (Fminus (S C U V) (S Y U V))
H3 : eq (Fdiv (DSeg A Y) (DSeg C Y)) (Fdiv (S A U V) (Fminus (S C U V) F0))
H2 : parallel A Y C Y
H1 : not (eq C Y)
H0 : not (eq (S A U V) F0)
H : and (Col Y P Q) (and (Col Y U V) (not (parallel P Q U V)))
A,C,U,V,P,Q,Y : Point
*****
eq (Fdiv (S A U V) (S C U V)) (Fdiv (S A U V) (S C U V))
+++++
auto.
-----
Lemma elim_length_ratio_inter_ll_1_spec : forall A C U V P Q Y : Point, inter_ll Y P Q U V -> S A U V <> 0 -> C <> Y -> parallel A Y C Y -> A ** Y / C ** Y = S A U V / S C U V.
Proof.
intros.
assert (A ** Y / C ** Y = S A U V / S4 C U Y V).

*****

*****

+++++
Qed.
-----
Lemma elim_length_ratio_inter_ll_2_spec :\n forall A C U V P Q Y : Point,\n inter_ll Y P Q U V -> S A U V = 0 -> C <> Y -> parallel A Y C Y -> A<>Y ->\n A ** Y / C ** Y = S A P Q/ S C P Q.
-----
Lemma elim_length_ratio_inter_ll_2_spec : forall A C U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C <> Y -> parallel A Y C Y -> A<>Y -> A ** Y / C ** Y = S A P Q/ S C P Q.

*****

*****
forall (A C U V P Q Y : Point) (_ : inter_ll Y P Q U V) (_ : eq (S A U V) F0) (_ : not (eq C Y)) (_ : parallel A Y C Y) (_ : not (eq A Y)), eq (Fdiv (DSeg A Y) (DSeg C Y)) (Fdiv (S A P Q) (S C P Q))
+++++
Proof.
-----
Lemma elim_length_ratio_inter_ll_2_spec : forall A C U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C <> Y -> parallel A Y C Y -> A<>Y -> A ** Y / C ** Y = S A P Q/ S C P Q.
Proof.

*****

*****
forall (A C U V P Q Y : Point) (_ : inter_ll Y P Q U V) (_ : eq (S A U V) F0) (_ : not (eq C Y)) (_ : parallel A Y C Y) (_ : not (eq A Y)), eq (Fdiv (DSeg A Y) (DSeg C Y)) (Fdiv (S A P Q) (S C P Q))
+++++
intros.
-----
Lemma elim_length_ratio_inter_ll_2_spec : forall A C U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C <> Y -> parallel A Y C Y -> A<>Y -> A ** Y / C ** Y = S A P Q/ S C P Q.
Proof.
intros.

*****
H3 : not (eq A Y)
H2 : parallel A Y C Y
H1 : not (eq C Y)
H0 : eq (S A U V) F0
H : inter_ll Y P Q U V
A,C,U,V,P,Q,Y : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C Y)) (Fdiv (S A P Q) (S C P Q))
+++++
assert (S A P Q <> 0).
-----
Lemma elim_length_ratio_inter_ll_2_spec : forall A C U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C <> Y -> parallel A Y C Y -> A<>Y -> A ** Y / C ** Y = S A P Q/ S C P Q.
Proof.
intros.
assert (S A P Q <> 0).

*****
H3 : not (eq A Y)
H2 : parallel A Y C Y
H1 : not (eq C Y)
H0 : eq (S A U V) F0
H : inter_ll Y P Q U V
A,C,U,V,P,Q,Y : Point
*****
not (eq (S A P Q) F0)
+++++
intro.
-----
Lemma elim_length_ratio_inter_ll_2_spec : forall A C U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C <> Y -> parallel A Y C Y -> A<>Y -> A ** Y / C ** Y = S A P Q/ S C P Q.
Proof.
intros.
assert (S A P Q <> 0).
intro.

*****
H4 : eq (S A P Q) F0
H3 : not (eq A Y)
H2 : parallel A Y C Y
H1 : not (eq C Y)
H0 : eq (S A U V) F0
H : inter_ll Y P Q U V
A,C,U,V,P,Q,Y : Point
*****
False
+++++
unfold inter_ll in H.
-----
Lemma elim_length_ratio_inter_ll_2_spec : forall A C U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C <> Y -> parallel A Y C Y -> A<>Y -> A ** Y / C ** Y = S A P Q/ S C P Q.
Proof.
intros.
assert (S A P Q <> 0).
intro.
unfold inter_ll in H.

*****
H4 : eq (S A P Q) F0
H3 : not (eq A Y)
H2 : parallel A Y C Y
H1 : not (eq C Y)
H0 : eq (S A U V) F0
H : and (Col Y P Q) (and (Col Y U V) (not (parallel P Q U V)))
A,C,U,V,P,Q,Y : Point
*****
False
+++++
use H.
-----
Lemma elim_length_ratio_inter_ll_2_spec : forall A C U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C <> Y -> parallel A Y C Y -> A<>Y -> A ** Y / C ** Y = S A P Q/ S C P Q.
Proof.
intros.
assert (S A P Q <> 0).
intro.
unfold inter_ll in H.
use H.

*****
H8 : not (parallel P Q U V)
H7 : Col Y U V
H5 : Col Y P Q
H4 : eq (S A P Q) F0
H3 : not (eq A Y)
H2 : parallel A Y C Y
H1 : not (eq C Y)
H0 : eq (S A U V) F0
A,C,U,V,P,Q,Y : Point
*****
False
+++++
assert (Col A U V).
-----
Lemma elim_length_ratio_inter_ll_2_spec : forall A C U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C <> Y -> parallel A Y C Y -> A<>Y -> A ** Y / C ** Y = S A P Q/ S C P Q.
Proof.
intros.
assert (S A P Q <> 0).
intro.
unfold inter_ll in H.
use H.
assert (Col A U V).

*****
H8 : not (parallel P Q U V)
H7 : Col Y U V
H5 : Col Y P Q
H4 : eq (S A P Q) F0
H3 : not (eq A Y)
H2 : parallel A Y C Y
H1 : not (eq C Y)
H0 : eq (S A U V) F0
A,C,U,V,P,Q,Y : Point
*****
Col A U V
+++++
auto with Geom.
-----
Lemma elim_length_ratio_inter_ll_2_spec : forall A C U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C <> Y -> parallel A Y C Y -> A<>Y -> A ** Y / C ** Y = S A P Q/ S C P Q.
Proof.
intros.
assert (S A P Q <> 0).
intro.
unfold inter_ll in H.
use H.
assert (Col A U V).

*****
H : Col A U V
H8 : not (parallel P Q U V)
H7 : Col Y U V
H5 : Col Y P Q
H4 : eq (S A P Q) F0
H3 : not (eq A Y)
H2 : parallel A Y C Y
H1 : not (eq C Y)
H0 : eq (S A U V) F0
A,C,U,V,P,Q,Y : Point
*****
False
+++++
idtac.
-----
Lemma elim_length_ratio_inter_ll_2_spec : forall A C U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C <> Y -> parallel A Y C Y -> A<>Y -> A ** Y / C ** Y = S A P Q/ S C P Q.
Proof.
intros.
assert (S A P Q <> 0).
intro.
unfold inter_ll in H.
use H.
assert (Col A U V).
idtac.

*****
H : Col A U V
H8 : not (parallel P Q U V)
H7 : Col Y U V
H5 : Col Y P Q
H4 : eq (S A P Q) F0
H3 : not (eq A Y)
H2 : parallel A Y C Y
H1 : not (eq C Y)
H0 : eq (S A U V) F0
A,C,U,V,P,Q,Y : Point
*****
False
+++++
assert (Col A P Q).
-----
Lemma elim_length_ratio_inter_ll_2_spec : forall A C U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C <> Y -> parallel A Y C Y -> A<>Y -> A ** Y / C ** Y = S A P Q/ S C P Q.
Proof.
intros.
assert (S A P Q <> 0).
intro.
unfold inter_ll in H.
use H.
assert (Col A U V).
idtac.
assert (Col A P Q).

*****
H : Col A U V
H8 : not (parallel P Q U V)
H7 : Col Y U V
H5 : Col Y P Q
H4 : eq (S A P Q) F0
H3 : not (eq A Y)
H2 : parallel A Y C Y
H1 : not (eq C Y)
H0 : eq (S A U V) F0
A,C,U,V,P,Q,Y : Point
*****
Col A P Q
+++++
auto with Geom.
-----
Lemma elim_length_ratio_inter_ll_2_spec : forall A C U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C <> Y -> parallel A Y C Y -> A<>Y -> A ** Y / C ** Y = S A P Q/ S C P Q.
Proof.
intros.
assert (S A P Q <> 0).
intro.
unfold inter_ll in H.
use H.
assert (Col A U V).
idtac.
assert (Col A P Q).

*****
H6 : Col A P Q
H : Col A U V
H8 : not (parallel P Q U V)
H7 : Col Y U V
H5 : Col Y P Q
H4 : eq (S A P Q) F0
H3 : not (eq A Y)
H2 : parallel A Y C Y
H1 : not (eq C Y)
H0 : eq (S A U V) F0
A,C,U,V,P,Q,Y : Point
*****
False
+++++
idtac.
-----
Lemma elim_length_ratio_inter_ll_2_spec : forall A C U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C <> Y -> parallel A Y C Y -> A<>Y -> A ** Y / C ** Y = S A P Q/ S C P Q.
Proof.
intros.
assert (S A P Q <> 0).
intro.
unfold inter_ll in H.
use H.
assert (Col A U V).
idtac.
assert (Col A P Q).
idtac.

*****
H6 : Col A P Q
H : Col A U V
H8 : not (parallel P Q U V)
H7 : Col Y U V
H5 : Col Y P Q
H4 : eq (S A P Q) F0
H3 : not (eq A Y)
H2 : parallel A Y C Y
H1 : not (eq C Y)
H0 : eq (S A U V) F0
A,C,U,V,P,Q,Y : Point
*****
False
+++++
assert (A=Y).
-----
Lemma elim_length_ratio_inter_ll_2_spec : forall A C U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C <> Y -> parallel A Y C Y -> A<>Y -> A ** Y / C ** Y = S A P Q/ S C P Q.
Proof.
intros.
assert (S A P Q <> 0).
intro.
unfold inter_ll in H.
use H.
assert (Col A U V).
idtac.
assert (Col A P Q).
idtac.
assert (A=Y).

*****
H6 : Col A P Q
H : Col A U V
H8 : not (parallel P Q U V)
H7 : Col Y U V
H5 : Col Y P Q
H4 : eq (S A P Q) F0
H3 : not (eq A Y)
H2 : parallel A Y C Y
H1 : not (eq C Y)
H0 : eq (S A U V) F0
A,C,U,V,P,Q,Y : Point
*****
eq A Y
+++++
eapply inter_unicity_2.
-----
Lemma elim_length_ratio_inter_ll_2_spec : forall A C U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C <> Y -> parallel A Y C Y -> A<>Y -> A ** Y / C ** Y = S A P Q/ S C P Q.
Proof.
intros.
assert (S A P Q <> 0).
intro.
unfold inter_ll in H.
use H.
assert (Col A U V).
idtac.
assert (Col A P Q).
idtac.
assert (A=Y).
eapply inter_unicity_2.

*****
H6 : Col A P Q
H : Col A U V
H8 : not (parallel P Q U V)
H7 : Col Y U V
H5 : Col Y P Q
H4 : eq (S A P Q) F0
H3 : not (eq A Y)
H2 : parallel A Y C Y
H1 : not (eq C Y)
H0 : eq (S A U V) F0
A,C,U,V,P,Q,Y : Point
*****
not (parallel ?P ?Q ?A ?B)
+++++
eauto.
-----
Lemma elim_length_ratio_inter_ll_2_spec : forall A C U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C <> Y -> parallel A Y C Y -> A<>Y -> A ** Y / C ** Y = S A P Q/ S C P Q.
Proof.
intros.
assert (S A P Q <> 0).
intro.
unfold inter_ll in H.
use H.
assert (Col A U V).
idtac.
assert (Col A P Q).
idtac.
assert (A=Y).
eapply inter_unicity_2.

*****
H6 : Col A P Q
H : Col A U V
H8 : not (parallel P Q U V)
H7 : Col Y U V
H5 : Col Y P Q
H4 : eq (S A P Q) F0
H3 : not (eq A Y)
H2 : parallel A Y C Y
H1 : not (eq C Y)
H0 : eq (S A U V) F0
A,C,U,V,P,Q,Y : Point
*****
Col U V A
+++++
eauto.
-----
Lemma elim_length_ratio_inter_ll_2_spec : forall A C U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C <> Y -> parallel A Y C Y -> A<>Y -> A ** Y / C ** Y = S A P Q/ S C P Q.
Proof.
intros.
assert (S A P Q <> 0).
intro.
unfold inter_ll in H.
use H.
assert (Col A U V).
idtac.
assert (Col A P Q).
idtac.
assert (A=Y).
eapply inter_unicity_2.
eauto.

*****
H6 : Col A P Q
H : Col A U V
H8 : not (parallel P Q U V)
H7 : Col Y U V
H5 : Col Y P Q
H4 : eq (S A P Q) F0
H3 : not (eq A Y)
H2 : parallel A Y C Y
H1 : not (eq C Y)
H0 : eq (S A U V) F0
A,C,U,V,P,Q,Y : Point
*****
Col U V A
+++++
auto with Geom.
-----
Lemma elim_length_ratio_inter_ll_2_spec : forall A C U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C <> Y -> parallel A Y C Y -> A<>Y -> A ** Y / C ** Y = S A P Q/ S C P Q.
Proof.
intros.
assert (S A P Q <> 0).
intro.
unfold inter_ll in H.
use H.
assert (Col A U V).
idtac.
assert (Col A P Q).
idtac.
assert (A=Y).
eapply inter_unicity_2.

*****
H6 : Col A P Q
H : Col A U V
H8 : not (parallel P Q U V)
H7 : Col Y U V
H5 : Col Y P Q
H4 : eq (S A P Q) F0
H3 : not (eq A Y)
H2 : parallel A Y C Y
H1 : not (eq C Y)
H0 : eq (S A U V) F0
A,C,U,V,P,Q,Y : Point
*****
Col P Q A
+++++
eauto.
-----
Lemma elim_length_ratio_inter_ll_2_spec : forall A C U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C <> Y -> parallel A Y C Y -> A<>Y -> A ** Y / C ** Y = S A P Q/ S C P Q.
Proof.
intros.
assert (S A P Q <> 0).
intro.
unfold inter_ll in H.
use H.
assert (Col A U V).
idtac.
assert (Col A P Q).
idtac.
assert (A=Y).
eapply inter_unicity_2.
eauto.

*****
H6 : Col A P Q
H : Col A U V
H8 : not (parallel P Q U V)
H7 : Col Y U V
H5 : Col Y P Q
H4 : eq (S A P Q) F0
H3 : not (eq A Y)
H2 : parallel A Y C Y
H1 : not (eq C Y)
H0 : eq (S A U V) F0
A,C,U,V,P,Q,Y : Point
*****
Col P Q A
+++++
auto with Geom.
-----
Lemma elim_length_ratio_inter_ll_2_spec : forall A C U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C <> Y -> parallel A Y C Y -> A<>Y -> A ** Y / C ** Y = S A P Q/ S C P Q.
Proof.
intros.
assert (S A P Q <> 0).
intro.
unfold inter_ll in H.
use H.
assert (Col A U V).
idtac.
assert (Col A P Q).
idtac.
assert (A=Y).
eapply inter_unicity_2.

*****
H6 : Col A P Q
H : Col A U V
H8 : not (parallel P Q U V)
H7 : Col Y U V
H5 : Col Y P Q
H4 : eq (S A P Q) F0
H3 : not (eq A Y)
H2 : parallel A Y C Y
H1 : not (eq C Y)
H0 : eq (S A U V) F0
A,C,U,V,P,Q,Y : Point
*****
Col U V Y
+++++
eauto.
-----
Lemma elim_length_ratio_inter_ll_2_spec : forall A C U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C <> Y -> parallel A Y C Y -> A<>Y -> A ** Y / C ** Y = S A P Q/ S C P Q.
Proof.
intros.
assert (S A P Q <> 0).
intro.
unfold inter_ll in H.
use H.
assert (Col A U V).
idtac.
assert (Col A P Q).
idtac.
assert (A=Y).
eapply inter_unicity_2.
eauto.

*****
H6 : Col A P Q
H : Col A U V
H8 : not (parallel P Q U V)
H7 : Col Y U V
H5 : Col Y P Q
H4 : eq (S A P Q) F0
H3 : not (eq A Y)
H2 : parallel A Y C Y
H1 : not (eq C Y)
H0 : eq (S A U V) F0
A,C,U,V,P,Q,Y : Point
*****
Col U V Y
+++++
auto with Geom.
-----
Lemma elim_length_ratio_inter_ll_2_spec : forall A C U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C <> Y -> parallel A Y C Y -> A<>Y -> A ** Y / C ** Y = S A P Q/ S C P Q.
Proof.
intros.
assert (S A P Q <> 0).
intro.
unfold inter_ll in H.
use H.
assert (Col A U V).
idtac.
assert (Col A P Q).
idtac.
assert (A=Y).
eapply inter_unicity_2.

*****
H6 : Col A P Q
H : Col A U V
H8 : not (parallel P Q U V)
H7 : Col Y U V
H5 : Col Y P Q
H4 : eq (S A P Q) F0
H3 : not (eq A Y)
H2 : parallel A Y C Y
H1 : not (eq C Y)
H0 : eq (S A U V) F0
A,C,U,V,P,Q,Y : Point
*****
Col P Q Y
+++++
eauto.
-----
Lemma elim_length_ratio_inter_ll_2_spec : forall A C U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C <> Y -> parallel A Y C Y -> A<>Y -> A ** Y / C ** Y = S A P Q/ S C P Q.
Proof.
intros.
assert (S A P Q <> 0).
intro.
unfold inter_ll in H.
use H.
assert (Col A U V).
idtac.
assert (Col A P Q).
idtac.
assert (A=Y).
eapply inter_unicity_2.
eauto.

*****
H6 : Col A P Q
H : Col A U V
H8 : not (parallel P Q U V)
H7 : Col Y U V
H5 : Col Y P Q
H4 : eq (S A P Q) F0
H3 : not (eq A Y)
H2 : parallel A Y C Y
H1 : not (eq C Y)
H0 : eq (S A U V) F0
A,C,U,V,P,Q,Y : Point
*****
Col P Q Y
+++++
auto with Geom.
-----
Lemma elim_length_ratio_inter_ll_2_spec : forall A C U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C <> Y -> parallel A Y C Y -> A<>Y -> A ** Y / C ** Y = S A P Q/ S C P Q.
Proof.
intros.
assert (S A P Q <> 0).
intro.
unfold inter_ll in H.
use H.
assert (Col A U V).
idtac.
assert (Col A P Q).
idtac.
assert (A=Y).

*****
H9 : eq A Y
H6 : Col A P Q
H : Col A U V
H8 : not (parallel P Q U V)
H7 : Col Y U V
H5 : Col Y P Q
H4 : eq (S A P Q) F0
H3 : not (eq A Y)
H2 : parallel A Y C Y
H1 : not (eq C Y)
H0 : eq (S A U V) F0
A,C,U,V,P,Q,Y : Point
*****
False
+++++
intuition.
-----
Lemma elim_length_ratio_inter_ll_2_spec : forall A C U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C <> Y -> parallel A Y C Y -> A<>Y -> A ** Y / C ** Y = S A P Q/ S C P Q.
Proof.
intros.
assert (S A P Q <> 0).

*****
H4 : not (eq (S A P Q) F0)
H3 : not (eq A Y)
H2 : parallel A Y C Y
H1 : not (eq C Y)
H0 : eq (S A U V) F0
H : inter_ll Y P Q U V
A,C,U,V,P,Q,Y : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C Y)) (Fdiv (S A P Q) (S C P Q))
+++++
assert (inter_ll Y U V P Q).
-----
Lemma elim_length_ratio_inter_ll_2_spec : forall A C U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C <> Y -> parallel A Y C Y -> A<>Y -> A ** Y / C ** Y = S A P Q/ S C P Q.
Proof.
intros.
assert (S A P Q <> 0).
assert (inter_ll Y U V P Q).

*****
H4 : not (eq (S A P Q) F0)
H3 : not (eq A Y)
H2 : parallel A Y C Y
H1 : not (eq C Y)
H0 : eq (S A U V) F0
H : inter_ll Y P Q U V
A,C,U,V,P,Q,Y : Point
*****
inter_ll Y U V P Q
+++++
unfold inter_ll in *.
-----
Lemma elim_length_ratio_inter_ll_2_spec : forall A C U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C <> Y -> parallel A Y C Y -> A<>Y -> A ** Y / C ** Y = S A P Q/ S C P Q.
Proof.
intros.
assert (S A P Q <> 0).
assert (inter_ll Y U V P Q).
unfold inter_ll in *.

*****
H4 : not (eq (S A P Q) F0)
H3 : not (eq A Y)
H2 : parallel A Y C Y
H1 : not (eq C Y)
H0 : eq (S A U V) F0
H : and (Col Y P Q) (and (Col Y U V) (not (parallel P Q U V)))
A,C,U,V,P,Q,Y : Point
*****
and (Col Y U V) (and (Col Y P Q) (not (parallel U V P Q)))
+++++
intuition auto with Geom.
-----
Lemma elim_length_ratio_inter_ll_2_spec : forall A C U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C <> Y -> parallel A Y C Y -> A<>Y -> A ** Y / C ** Y = S A P Q/ S C P Q.
Proof.
intros.
assert (S A P Q <> 0).
assert (inter_ll Y U V P Q).

*****
H5 : inter_ll Y U V P Q
H4 : not (eq (S A P Q) F0)
H3 : not (eq A Y)
H2 : parallel A Y C Y
H1 : not (eq C Y)
H0 : eq (S A U V) F0
H : inter_ll Y P Q U V
A,C,U,V,P,Q,Y : Point
*****
eq (Fdiv (DSeg A Y) (DSeg C Y)) (Fdiv (S A P Q) (S C P Q))
+++++
eapply elim_length_ratio_inter_ll_1_spec.
-----
Lemma elim_length_ratio_inter_ll_2_spec : forall A C U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C <> Y -> parallel A Y C Y -> A<>Y -> A ** Y / C ** Y = S A P Q/ S C P Q.
Proof.
intros.
assert (S A P Q <> 0).
assert (inter_ll Y U V P Q).
eapply elim_length_ratio_inter_ll_1_spec.

*****
H5 : inter_ll Y U V P Q
H4 : not (eq (S A P Q) F0)
H3 : not (eq A Y)
H2 : parallel A Y C Y
H1 : not (eq C Y)
H0 : eq (S A U V) F0
H : inter_ll Y P Q U V
A,C,U,V,P,Q,Y : Point
*****
inter_ll Y ?P ?Q P Q
+++++
eauto.
-----
Lemma elim_length_ratio_inter_ll_2_spec : forall A C U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C <> Y -> parallel A Y C Y -> A<>Y -> A ** Y / C ** Y = S A P Q/ S C P Q.
Proof.
intros.
assert (S A P Q <> 0).
assert (inter_ll Y U V P Q).
eapply elim_length_ratio_inter_ll_1_spec.

*****
H5 : inter_ll Y U V P Q
H4 : not (eq (S A P Q) F0)
H3 : not (eq A Y)
H2 : parallel A Y C Y
H1 : not (eq C Y)
H0 : eq (S A U V) F0
H : inter_ll Y P Q U V
A,C,U,V,P,Q,Y : Point
*****
not (eq (S A P Q) F0)
+++++
eauto.
-----
Lemma elim_length_ratio_inter_ll_2_spec : forall A C U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C <> Y -> parallel A Y C Y -> A<>Y -> A ** Y / C ** Y = S A P Q/ S C P Q.
Proof.
intros.
assert (S A P Q <> 0).
assert (inter_ll Y U V P Q).
eapply elim_length_ratio_inter_ll_1_spec.

*****
H5 : inter_ll Y U V P Q
H4 : not (eq (S A P Q) F0)
H3 : not (eq A Y)
H2 : parallel A Y C Y
H1 : not (eq C Y)
H0 : eq (S A U V) F0
H : inter_ll Y P Q U V
A,C,U,V,P,Q,Y : Point
*****
not (eq C Y)
+++++
eauto.
-----
Lemma elim_length_ratio_inter_ll_2_spec : forall A C U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C <> Y -> parallel A Y C Y -> A<>Y -> A ** Y / C ** Y = S A P Q/ S C P Q.
Proof.
intros.
assert (S A P Q <> 0).
assert (inter_ll Y U V P Q).
eapply elim_length_ratio_inter_ll_1_spec.

*****
H5 : inter_ll Y U V P Q
H4 : not (eq (S A P Q) F0)
H3 : not (eq A Y)
H2 : parallel A Y C Y
H1 : not (eq C Y)
H0 : eq (S A U V) F0
H : inter_ll Y P Q U V
A,C,U,V,P,Q,Y : Point
*****
parallel A Y C Y
+++++
eauto.
-----
Lemma elim_length_ratio_inter_ll_2_spec : forall A C U V P Q Y : Point, inter_ll Y P Q U V -> S A U V = 0 -> C <> Y -> parallel A Y C Y -> A<>Y -> A ** Y / C ** Y = S A P Q/ S C P Q.
Proof.
intros.
assert (S A P Q <> 0).

*****

*****

+++++
Qed.
-----
