Require Import ExtLib.Relations.TransitiveClosure.
-----
Set Implicit Arguments.
-----
Set Strict Implicit.
-----
Section rightTrans.
-----
Variables (A : Type) (R : A -> A -> Prop).
-----
Variable wf_R : well_founded R.
-----
Theorem wf_rightTrans : well_founded (rightTrans R).
-----
Theorem wf_rightTrans : well_founded (rightTrans R).

*****
wf_R : well_founded R
R : forall (_ : A) (_ : A), Prop
A : Type
*****
well_founded (rightTrans R)
+++++
Proof.
-----
Theorem wf_rightTrans : well_founded (rightTrans R).
Proof.

*****
wf_R : well_founded R
R : forall (_ : A) (_ : A), Prop
A : Type
*****
well_founded (rightTrans R)
+++++
red.
-----
Theorem wf_rightTrans : well_founded (rightTrans R).
Proof.
red.

*****
wf_R : well_founded R
R : forall (_ : A) (_ : A), Prop
A : Type
*****
forall a : A, Acc (rightTrans R) a
+++++
eapply Fix.
-----
Theorem wf_rightTrans : well_founded (rightTrans R).
Proof.
red.
eapply Fix.

*****
wf_R : well_founded R
R : forall (_ : A) (_ : A), Prop
A : Type
*****
well_founded ?R
+++++
eapply wf_R.
-----
Theorem wf_rightTrans : well_founded (rightTrans R).
Proof.
red.
eapply Fix.

*****
wf_R : well_founded R
R : forall (_ : A) (_ : A), Prop
A : Type
*****
forall (x : A) (_ : forall (y : A) (_ : R y x), Acc (rightTrans R) y), Acc (rightTrans R) x
+++++
clear.
-----
Theorem wf_rightTrans : well_founded (rightTrans R).
Proof.
red.
eapply Fix.
clear.

*****
R : forall (_ : A) (_ : A), Prop
A : Type
*****
forall (x : A) (_ : forall (y : A) (_ : R y x), Acc (rightTrans R) y), Acc (rightTrans R) x
+++++
intros.
-----
Theorem wf_rightTrans : well_founded (rightTrans R).
Proof.
red.
eapply Fix.
clear.
intros.

*****
H : forall (y : A) (_ : R y x), Acc (rightTrans R) y
x : A
R : forall (_ : A) (_ : A), Prop
A : Type
*****
Acc (rightTrans R) x
+++++
constructor.
-----
Theorem wf_rightTrans : well_founded (rightTrans R).
Proof.
red.
eapply Fix.
clear.
intros.
constructor.

*****
H : forall (y : A) (_ : R y x), Acc (rightTrans R) y
x : A
R : forall (_ : A) (_ : A), Prop
A : Type
*****
forall (y : A) (_ : rightTrans R y x), Acc (rightTrans R) y
+++++
intros.
-----
Theorem wf_rightTrans : well_founded (rightTrans R).
Proof.
red.
eapply Fix.
clear.
intros.
constructor.
intros.

*****
H0 : rightTrans R y x
y : A
H : forall (y : A) (_ : R y x), Acc (rightTrans R) y
x : A
R : forall (_ : A) (_ : A), Prop
A : Type
*****
Acc (rightTrans R) y
+++++
revert H.
-----
Theorem wf_rightTrans : well_founded (rightTrans R).
Proof.
red.
eapply Fix.
clear.
intros.
constructor.
intros.
revert H.

*****
H0 : rightTrans R y x
x,y : A
R : forall (_ : A) (_ : A), Prop
A : Type
*****
forall _ : forall (y : A) (_ : R y x), Acc (rightTrans R) y, Acc (rightTrans R) y
+++++
induction H0.
-----
Theorem wf_rightTrans : well_founded (rightTrans R).
Proof.
red.
eapply Fix.
clear.
intros.
constructor.
intros.
revert H.
induction H0.

*****
H : R y y0
y,y0 : A
R : forall (_ : A) (_ : A), Prop
A : Type
*****
forall _ : forall (y : A) (_ : R y y0), Acc (rightTrans R) y, Acc (rightTrans R) y
+++++
intros.
-----
Theorem wf_rightTrans : well_founded (rightTrans R).
Proof.
red.
eapply Fix.
clear.
intros.
constructor.
intros.
revert H.
induction H0.
intros.

*****
H0 : forall (y : A) (_ : R y y0), Acc (rightTrans R) y
H : R y y0
y,y0 : A
R : forall (_ : A) (_ : A), Prop
A : Type
*****
Acc (rightTrans R) y
+++++
eauto.
-----
Theorem wf_rightTrans : well_founded (rightTrans R).
Proof.
red.
eapply Fix.
clear.
intros.
constructor.
intros.
revert H.
induction H0.

*****
IHrightTrans : forall _ : forall (y : A) (_ : R y z), Acc (rightTrans R) y,\nAcc (rightTrans R) y
H : R z y0
H0 : rightTrans R y z
y,y0,z : A
R : forall (_ : A) (_ : A), Prop
A : Type
*****
forall _ : forall (y : A) (_ : R y y0), Acc (rightTrans R) y, Acc (rightTrans R) y
+++++
intros.
-----
Theorem wf_rightTrans : well_founded (rightTrans R).
Proof.
red.
eapply Fix.
clear.
intros.
constructor.
intros.
revert H.
induction H0.
intros.

*****
H1 : forall (y : A) (_ : R y y0), Acc (rightTrans R) y
IHrightTrans : forall _ : forall (y : A) (_ : R y z), Acc (rightTrans R) y,\nAcc (rightTrans R) y
H : R z y0
H0 : rightTrans R y z
y,y0,z : A
R : forall (_ : A) (_ : A), Prop
A : Type
*****
Acc (rightTrans R) y
+++++
eapply IHrightTrans.
-----
Theorem wf_rightTrans : well_founded (rightTrans R).
Proof.
red.
eapply Fix.
clear.
intros.
constructor.
intros.
revert H.
induction H0.
intros.
eapply IHrightTrans.

*****
H1 : forall (y : A) (_ : R y y0), Acc (rightTrans R) y
IHrightTrans : forall _ : forall (y : A) (_ : R y z), Acc (rightTrans R) y,\nAcc (rightTrans R) y
H : R z y0
H0 : rightTrans R y z
y,y0,z : A
R : forall (_ : A) (_ : A), Prop
A : Type
*****
forall (y : A) (_ : R y z), Acc (rightTrans R) y
+++++
clear IHrightTrans.
-----
Theorem wf_rightTrans : well_founded (rightTrans R).
Proof.
red.
eapply Fix.
clear.
intros.
constructor.
intros.
revert H.
induction H0.
intros.
eapply IHrightTrans.
clear IHrightTrans.

*****
H1 : forall (y : A) (_ : R y y0), Acc (rightTrans R) y
H : R z y0
H0 : rightTrans R y z
y,y0,z : A
R : forall (_ : A) (_ : A), Prop
A : Type
*****
forall (y : A) (_ : R y z), Acc (rightTrans R) y
+++++
specialize (H1 _ H).
-----
Theorem wf_rightTrans : well_founded (rightTrans R).
Proof.
red.
eapply Fix.
clear.
intros.
constructor.
intros.
revert H.
induction H0.
intros.
eapply IHrightTrans.
clear IHrightTrans.
specialize (H1 _ H).

*****
H1 : Acc (rightTrans R) z
H : R z y0
H0 : rightTrans R y z
y,y0,z : A
R : forall (_ : A) (_ : A), Prop
A : Type
*****
forall (y : A) (_ : R y z), Acc (rightTrans R) y
+++++
inversion H1.
-----
Theorem wf_rightTrans : well_founded (rightTrans R).
Proof.
red.
eapply Fix.
clear.
intros.
constructor.
intros.
revert H.
induction H0.
intros.
eapply IHrightTrans.
clear IHrightTrans.
specialize (H1 _ H).
inversion H1.

*****
H2 : forall (y : A) (_ : rightTrans R y z), Acc (rightTrans R) y
H1 : Acc (rightTrans R) z
H : R z y0
H0 : rightTrans R y z
y,y0,z : A
R : forall (_ : A) (_ : A), Prop
A : Type
*****
forall (y : A) (_ : R y z), Acc (rightTrans R) y
+++++
intros.
-----
Theorem wf_rightTrans : well_founded (rightTrans R).
Proof.
red.
eapply Fix.
clear.
intros.
constructor.
intros.
revert H.
induction H0.
intros.
eapply IHrightTrans.
clear IHrightTrans.
specialize (H1 _ H).
inversion H1.
intros.

*****
H3 : R y1 z
y1 : A
H2 : forall (y : A) (_ : rightTrans R y z), Acc (rightTrans R) y
H1 : Acc (rightTrans R) z
H : R z y0
H0 : rightTrans R y z
y,y0,z : A
R : forall (_ : A) (_ : A), Prop
A : Type
*****
Acc (rightTrans R) y1
+++++
eapply H2.
-----
Theorem wf_rightTrans : well_founded (rightTrans R).
Proof.
red.
eapply Fix.
clear.
intros.
constructor.
intros.
revert H.
induction H0.
intros.
eapply IHrightTrans.
clear IHrightTrans.
specialize (H1 _ H).
inversion H1.
intros.
eapply H2.

*****
H3 : R y1 z
y1 : A
H2 : forall (y : A) (_ : rightTrans R y z), Acc (rightTrans R) y
H1 : Acc (rightTrans R) z
H : R z y0
H0 : rightTrans R y z
y,y0,z : A
R : forall (_ : A) (_ : A), Prop
A : Type
*****
rightTrans R y1 z
+++++
eapply RTFin.
-----
Theorem wf_rightTrans : well_founded (rightTrans R).
Proof.
red.
eapply Fix.
clear.
intros.
constructor.
intros.
revert H.
induction H0.
intros.
eapply IHrightTrans.
clear IHrightTrans.
specialize (H1 _ H).
inversion H1.
intros.
eapply H2.
eapply RTFin.

*****
H3 : R y1 z
y1 : A
H2 : forall (y : A) (_ : rightTrans R y z), Acc (rightTrans R) y
H1 : Acc (rightTrans R) z
H : R z y0
H0 : rightTrans R y z
y,y0,z : A
R : forall (_ : A) (_ : A), Prop
A : Type
*****
R y1 z
+++++
eassumption.
-----
Theorem wf_rightTrans : well_founded (rightTrans R).
Proof.
red.
eapply Fix.

*****

*****

+++++
Defined.
-----
Theorem wf_leftTrans : well_founded (leftTrans R).
-----
Theorem wf_leftTrans : well_founded (leftTrans R).

*****
wf_R : well_founded R
R : forall (_ : A) (_ : A), Prop
A : Type
*****
well_founded (leftTrans R)
+++++
Proof.
-----
Theorem wf_leftTrans : well_founded (leftTrans R).
Proof.

*****
wf_R : well_founded R
R : forall (_ : A) (_ : A), Prop
A : Type
*****
well_founded (leftTrans R)
+++++
red.
-----
Theorem wf_leftTrans : well_founded (leftTrans R).
Proof.
red.

*****
wf_R : well_founded R
R : forall (_ : A) (_ : A), Prop
A : Type
*****
forall a : A, Acc (leftTrans R) a
+++++
eapply Fix.
-----
Theorem wf_leftTrans : well_founded (leftTrans R).
Proof.
red.
eapply Fix.

*****
wf_R : well_founded R
R : forall (_ : A) (_ : A), Prop
A : Type
*****
well_founded ?R
+++++
eapply wf_R.
-----
Theorem wf_leftTrans : well_founded (leftTrans R).
Proof.
red.
eapply Fix.

*****
wf_R : well_founded R
R : forall (_ : A) (_ : A), Prop
A : Type
*****
forall (x : A) (_ : forall (y : A) (_ : R y x), Acc (leftTrans R) y), Acc (leftTrans R) x
+++++
clear.
-----
Theorem wf_leftTrans : well_founded (leftTrans R).
Proof.
red.
eapply Fix.
clear.

*****
R : forall (_ : A) (_ : A), Prop
A : Type
*****
forall (x : A) (_ : forall (y : A) (_ : R y x), Acc (leftTrans R) y), Acc (leftTrans R) x
+++++
intros.
-----
Theorem wf_leftTrans : well_founded (leftTrans R).
Proof.
red.
eapply Fix.
clear.
intros.

*****
H : forall (y : A) (_ : R y x), Acc (leftTrans R) y
x : A
R : forall (_ : A) (_ : A), Prop
A : Type
*****
Acc (leftTrans R) x
+++++
constructor.
-----
Theorem wf_leftTrans : well_founded (leftTrans R).
Proof.
red.
eapply Fix.
clear.
intros.
constructor.

*****
H : forall (y : A) (_ : R y x), Acc (leftTrans R) y
x : A
R : forall (_ : A) (_ : A), Prop
A : Type
*****
forall (y : A) (_ : leftTrans R y x), Acc (leftTrans R) y
+++++
intros.
-----
Theorem wf_leftTrans : well_founded (leftTrans R).
Proof.
red.
eapply Fix.
clear.
intros.
constructor.
intros.

*****
H0 : leftTrans R y x
y : A
H : forall (y : A) (_ : R y x), Acc (leftTrans R) y
x : A
R : forall (_ : A) (_ : A), Prop
A : Type
*****
Acc (leftTrans R) y
+++++
revert H.
-----
Theorem wf_leftTrans : well_founded (leftTrans R).
Proof.
red.
eapply Fix.
clear.
intros.
constructor.
intros.
revert H.

*****
H0 : leftTrans R y x
x,y : A
R : forall (_ : A) (_ : A), Prop
A : Type
*****
forall _ : forall (y : A) (_ : R y x), Acc (leftTrans R) y, Acc (leftTrans R) y
+++++
induction H0.
-----
Theorem wf_leftTrans : well_founded (leftTrans R).
Proof.
red.
eapply Fix.
clear.
intros.
constructor.
intros.
revert H.
induction H0.

*****
H : R x y
x,y : A
R : forall (_ : A) (_ : A), Prop
A : Type
*****
forall _ : forall (y0 : A) (_ : R y0 y), Acc (leftTrans R) y0, Acc (leftTrans R) x
+++++
intros.
-----
Theorem wf_leftTrans : well_founded (leftTrans R).
Proof.
red.
eapply Fix.
clear.
intros.
constructor.
intros.
revert H.
induction H0.
intros.

*****
H0 : forall (y0 : A) (_ : R y0 y), Acc (leftTrans R) y0
H : R x y
x,y : A
R : forall (_ : A) (_ : A), Prop
A : Type
*****
Acc (leftTrans R) x
+++++
eauto.
-----
Theorem wf_leftTrans : well_founded (leftTrans R).
Proof.
red.
eapply Fix.
clear.
intros.
constructor.
intros.
revert H.
induction H0.

*****
IHleftTrans : forall _ : forall (y0 : A) (_ : R y0 y), Acc (leftTrans R) y0,\nAcc (leftTrans R) z
H0 : leftTrans R z y
H : R x z
x,y,z : A
R : forall (_ : A) (_ : A), Prop
A : Type
*****
forall _ : forall (y0 : A) (_ : R y0 y), Acc (leftTrans R) y0, Acc (leftTrans R) x
+++++
intros.
-----
Theorem wf_leftTrans : well_founded (leftTrans R).
Proof.
red.
eapply Fix.
clear.
intros.
constructor.
intros.
revert H.
induction H0.
intros.

*****
H1 : forall (y0 : A) (_ : R y0 y), Acc (leftTrans R) y0
IHleftTrans : forall _ : forall (y0 : A) (_ : R y0 y), Acc (leftTrans R) y0,\nAcc (leftTrans R) z
H0 : leftTrans R z y
H : R x z
x,y,z : A
R : forall (_ : A) (_ : A), Prop
A : Type
*****
Acc (leftTrans R) x
+++++
eapply IHleftTrans.
-----
Theorem wf_leftTrans : well_founded (leftTrans R).
Proof.
red.
eapply Fix.
clear.
intros.
constructor.
intros.
revert H.
induction H0.
intros.
eapply IHleftTrans.

*****
H1 : forall (y0 : A) (_ : R y0 y), Acc (leftTrans R) y0
IHleftTrans : forall _ : forall (y0 : A) (_ : R y0 y), Acc (leftTrans R) y0,\nAcc (leftTrans R) z
H0 : leftTrans R z y
H : R x z
x,y,z : A
R : forall (_ : A) (_ : A), Prop
A : Type
*****
forall (y0 : A) (_ : R y0 y), Acc (leftTrans R) y0
+++++
clear IHleftTrans.
-----
Theorem wf_leftTrans : well_founded (leftTrans R).
Proof.
red.
eapply Fix.
clear.
intros.
constructor.
intros.
revert H.
induction H0.
intros.
eapply IHleftTrans.
clear IHleftTrans.

*****
H1 : forall (y0 : A) (_ : R y0 y), Acc (leftTrans R) y0
H0 : leftTrans R z y
H : R x z
x,y,z : A
R : forall (_ : A) (_ : A), Prop
A : Type
*****
forall (y0 : A) (_ : R y0 y), Acc (leftTrans R) y0
+++++
intros.
-----
Theorem wf_leftTrans : well_founded (leftTrans R).
Proof.
red.
eapply Fix.
clear.
intros.
constructor.
intros.
revert H.
induction H0.
intros.
eapply IHleftTrans.
clear IHleftTrans.
intros.

*****
H2 : R y0 y
y0 : A
H1 : forall (y0 : A) (_ : R y0 y), Acc (leftTrans R) y0
H0 : leftTrans R z y
H : R x z
x,y,z : A
R : forall (_ : A) (_ : A), Prop
A : Type
*****
Acc (leftTrans R) y0
+++++
eapply H1.
-----
Theorem wf_leftTrans : well_founded (leftTrans R).
Proof.
red.
eapply Fix.
clear.
intros.
constructor.
intros.
revert H.
induction H0.
intros.
eapply IHleftTrans.
clear IHleftTrans.
intros.
eapply H1.

*****
H2 : R y0 y
y0 : A
H1 : forall (y0 : A) (_ : R y0 y), Acc (leftTrans R) y0
H0 : leftTrans R z y
H : R x z
x,y,z : A
R : forall (_ : A) (_ : A), Prop
A : Type
*****
R y0 y
+++++
auto.
-----
Theorem wf_leftTrans : well_founded (leftTrans R).
Proof.
red.
eapply Fix.
clear.
intros.
constructor.
intros.
revert H.
induction H0.
intros.
eapply IHleftTrans.

*****
H1 : forall (y0 : A) (_ : R y0 y), Acc (leftTrans R) y0
IHleftTrans : forall _ : forall (y0 : A) (_ : R y0 y), Acc (leftTrans R) y0,\nAcc (leftTrans R) z
H0 : leftTrans R z y
H : R x z
x,y,z : A
R : forall (_ : A) (_ : A), Prop
A : Type
*****
leftTrans R x z
+++++
clear IHleftTrans.
-----
Theorem wf_leftTrans : well_founded (leftTrans R).
Proof.
red.
eapply Fix.
clear.
intros.
constructor.
intros.
revert H.
induction H0.
intros.
eapply IHleftTrans.
clear IHleftTrans.

*****
H1 : forall (y0 : A) (_ : R y0 y), Acc (leftTrans R) y0
H0 : leftTrans R z y
H : R x z
x,y,z : A
R : forall (_ : A) (_ : A), Prop
A : Type
*****
leftTrans R x z
+++++
eapply LTFin.
-----
Theorem wf_leftTrans : well_founded (leftTrans R).
Proof.
red.
eapply Fix.
clear.
intros.
constructor.
intros.
revert H.
induction H0.
intros.
eapply IHleftTrans.
clear IHleftTrans.
eapply LTFin.

*****
H1 : forall (y0 : A) (_ : R y0 y), Acc (leftTrans R) y0
H0 : leftTrans R z y
H : R x z
x,y,z : A
R : forall (_ : A) (_ : A), Prop
A : Type
*****
R x z
+++++
auto.
-----
Theorem wf_leftTrans : well_founded (leftTrans R).
Proof.
red.
eapply Fix.

*****

*****

+++++
Defined.
-----
End rightTrans.
-----
