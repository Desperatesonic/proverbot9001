Require Export basic_geometric_facts.
-----
Theorem common_point_not_par_aux :\n forall A B C D Y : Point,\n Col Y A B ->\n Col Y C D -> \n A <> B -> \n C <> D -> \n ~ Col D A B -> \n ~ Col Y A C -> \n ~ parallel A B C D.
-----
Theorem common_point_not_par_aux : forall A B C D Y : Point, Col Y A B -> Col Y C D -> A <> B -> C <> D -> ~ Col D A B -> ~ Col Y A C -> ~ parallel A B C D.

*****

*****
forall (A B C D Y : Point) (_ : Col Y A B) (_ : Col Y C D) (_ : not (eq A B)) (_ : not (eq C D)) (_ : not (Col D A B)) (_ : not (Col Y A C)), not (parallel A B C D)
+++++
Proof.
-----
Theorem common_point_not_par_aux : forall A B C D Y : Point, Col Y A B -> Col Y C D -> A <> B -> C <> D -> ~ Col D A B -> ~ Col Y A C -> ~ parallel A B C D.
Proof.

*****

*****
forall (A B C D Y : Point) (_ : Col Y A B) (_ : Col Y C D) (_ : not (eq A B)) (_ : not (eq C D)) (_ : not (Col D A B)) (_ : not (Col Y A C)), not (parallel A B C D)
+++++
intros.
-----
Theorem common_point_not_par_aux : forall A B C D Y : Point, Col Y A B -> Col Y C D -> A <> B -> C <> D -> ~ Col D A B -> ~ Col Y A C -> ~ parallel A B C D.
Proof.
intros.

*****
H4 : not (Col Y A C)
H3 : not (Col D A B)
H2 : not (eq C D)
H1 : not (eq A B)
H0 : Col Y C D
H : Col Y A B
A,B,C,D,Y : Point
*****
not (parallel A B C D)
+++++
assert (D <> Y).
-----
Theorem common_point_not_par_aux : forall A B C D Y : Point, Col Y A B -> Col Y C D -> A <> B -> C <> D -> ~ Col D A B -> ~ Col Y A C -> ~ parallel A B C D.
Proof.
intros.
assert (D <> Y).

*****
H4 : not (Col Y A C)
H3 : not (Col D A B)
H2 : not (eq C D)
H1 : not (eq A B)
H0 : Col Y C D
H : Col Y A B
A,B,C,D,Y : Point
*****
not (eq D Y)
+++++
unfold not.
-----
Theorem common_point_not_par_aux : forall A B C D Y : Point, Col Y A B -> Col Y C D -> A <> B -> C <> D -> ~ Col D A B -> ~ Col Y A C -> ~ parallel A B C D.
Proof.
intros.
assert (D <> Y).
unfold not.

*****
H4 : not (Col Y A C)
H3 : not (Col D A B)
H2 : not (eq C D)
H1 : not (eq A B)
H0 : Col Y C D
H : Col Y A B
A,B,C,D,Y : Point
*****
forall _ : eq D Y, False
+++++
intro.
-----
Theorem common_point_not_par_aux : forall A B C D Y : Point, Col Y A B -> Col Y C D -> A <> B -> C <> D -> ~ Col D A B -> ~ Col Y A C -> ~ parallel A B C D.
Proof.
intros.
assert (D <> Y).
unfold not.
intro.

*****
H5 : eq D Y
H4 : not (Col Y A C)
H3 : not (Col D A B)
H2 : not (eq C D)
H1 : not (eq A B)
H0 : Col Y C D
H : Col Y A B
A,B,C,D,Y : Point
*****
False
+++++
subst D.
-----
Theorem common_point_not_par_aux : forall A B C D Y : Point, Col Y A B -> Col Y C D -> A <> B -> C <> D -> ~ Col D A B -> ~ Col Y A C -> ~ parallel A B C D.
Proof.
intros.
assert (D <> Y).
unfold not.
intro.
subst D.

*****
H4 : not (Col Y A C)
H2 : not (eq C Y)
H3 : not (Col Y A B)
H1 : not (eq A B)
H0 : Col Y C Y
H : Col Y A B
A,B,C,Y : Point
*****
False
+++++
Geometry.
-----
Theorem common_point_not_par_aux : forall A B C D Y : Point, Col Y A B -> Col Y C D -> A <> B -> C <> D -> ~ Col D A B -> ~ Col Y A C -> ~ parallel A B C D.
Proof.
intros.
assert (D <> Y).

*****
H5 : not (eq D Y)
H4 : not (Col Y A C)
H3 : not (Col D A B)
H2 : not (eq C D)
H1 : not (eq A B)
H0 : Col Y C D
H : Col Y A B
A,B,C,D,Y : Point
*****
not (parallel A B C D)
+++++
unfold not.
-----
Theorem common_point_not_par_aux : forall A B C D Y : Point, Col Y A B -> Col Y C D -> A <> B -> C <> D -> ~ Col D A B -> ~ Col Y A C -> ~ parallel A B C D.
Proof.
intros.
assert (D <> Y).
unfold not.

*****
H5 : not (eq D Y)
H4 : not (Col Y A C)
H3 : not (Col D A B)
H2 : not (eq C D)
H1 : not (eq A B)
H0 : Col Y C D
H : Col Y A B
A,B,C,D,Y : Point
*****
forall _ : parallel A B C D, False
+++++
intro.
-----
Theorem common_point_not_par_aux : forall A B C D Y : Point, Col Y A B -> Col Y C D -> A <> B -> C <> D -> ~ Col D A B -> ~ Col Y A C -> ~ parallel A B C D.
Proof.
intros.
assert (D <> Y).
unfold not.
intro.

*****
H6 : parallel A B C D
H5 : not (eq D Y)
H4 : not (Col Y A C)
H3 : not (Col D A B)
H2 : not (eq C D)
H1 : not (eq A B)
H0 : Col Y C D
H : Col Y A B
A,B,C,D,Y : Point
*****
False
+++++
assert (C ** Y / D ** Y = S C A B / S D A B).
-----
Theorem common_point_not_par_aux : forall A B C D Y : Point, Col Y A B -> Col Y C D -> A <> B -> C <> D -> ~ Col D A B -> ~ Col Y A C -> ~ parallel A B C D.
Proof.
intros.
assert (D <> Y).
unfold not.
intro.
assert (C ** Y / D ** Y = S C A B / S D A B).

*****
H6 : parallel A B C D
H5 : not (eq D Y)
H4 : not (Col Y A C)
H3 : not (Col D A B)
H2 : not (eq C D)
H1 : not (eq A B)
H0 : Col Y C D
H : Col Y A B
A,B,C,D,Y : Point
*****
eq (Fdiv (DSeg C Y) (DSeg D Y)) (Fdiv (S C A B) (S D A B))
+++++
Geometry.
-----
Theorem common_point_not_par_aux : forall A B C D Y : Point, Col Y A B -> Col Y C D -> A <> B -> C <> D -> ~ Col D A B -> ~ Col Y A C -> ~ parallel A B C D.
Proof.
intros.
assert (D <> Y).
unfold not.
intro.
assert (C ** Y / D ** Y = S C A B / S D A B).

*****
H7 : eq (Fdiv (DSeg C Y) (DSeg D Y)) (Fdiv (S C A B) (S D A B))
H6 : parallel A B C D
H5 : not (eq D Y)
H4 : not (Col Y A C)
H3 : not (Col D A B)
H2 : not (eq C D)
H1 : not (eq A B)
H0 : Col Y C D
H : Col Y A B
A,B,C,D,Y : Point
*****
False
+++++
Geometry.
-----
Theorem common_point_not_par_aux : forall A B C D Y : Point, Col Y A B -> Col Y C D -> A <> B -> C <> D -> ~ Col D A B -> ~ Col Y A C -> ~ parallel A B C D.
Proof.
intros.
assert (D <> Y).
unfold not.
intro.
assert (C ** Y / D ** Y = S C A B / S D A B).
Geometry.

*****
H7 : eq (Fdiv (DSeg C Y) (DSeg D Y)) (Fdiv (S C A B) (S D A B))
H6 : parallel A B C D
H5 : not (eq D Y)
H4 : not (Col Y A C)
H3 : not (Col D A B)
H2 : not (eq C D)
H1 : not (eq A B)
H0 : Col Y C D
H : Col Y A B
A,B,C,D,Y : Point
*****
False
+++++
assert (S C A B = S D A B).
-----
Theorem common_point_not_par_aux : forall A B C D Y : Point, Col Y A B -> Col Y C D -> A <> B -> C <> D -> ~ Col D A B -> ~ Col Y A C -> ~ parallel A B C D.
Proof.
intros.
assert (D <> Y).
unfold not.
intro.
assert (C ** Y / D ** Y = S C A B / S D A B).
Geometry.
assert (S C A B = S D A B).

*****
H7 : eq (Fdiv (DSeg C Y) (DSeg D Y)) (Fdiv (S C A B) (S D A B))
H6 : parallel A B C D
H5 : not (eq D Y)
H4 : not (Col Y A C)
H3 : not (Col D A B)
H2 : not (eq C D)
H1 : not (eq A B)
H0 : Col Y C D
H : Col Y A B
A,B,C,D,Y : Point
*****
eq (S C A B) (S D A B)
+++++
unfold parallel in H6.
-----
Theorem common_point_not_par_aux : forall A B C D Y : Point, Col Y A B -> Col Y C D -> A <> B -> C <> D -> ~ Col D A B -> ~ Col Y A C -> ~ parallel A B C D.
Proof.
intros.
assert (D <> Y).
unfold not.
intro.
assert (C ** Y / D ** Y = S C A B / S D A B).
Geometry.
assert (S C A B = S D A B).
unfold parallel in H6.

*****
H7 : eq (Fdiv (DSeg C Y) (DSeg D Y)) (Fdiv (S C A B) (S D A B))
H6 : eq (S4 A C B D) F0
H5 : not (eq D Y)
H4 : not (Col Y A C)
H3 : not (Col D A B)
H2 : not (eq C D)
H1 : not (eq A B)
H0 : Col Y C D
H : Col Y A B
A,B,C,D,Y : Point
*****
eq (S C A B) (S D A B)
+++++
unfold S4 in H6.
-----
Theorem common_point_not_par_aux : forall A B C D Y : Point, Col Y A B -> Col Y C D -> A <> B -> C <> D -> ~ Col D A B -> ~ Col Y A C -> ~ parallel A B C D.
Proof.
intros.
assert (D <> Y).
unfold not.
intro.
assert (C ** Y / D ** Y = S C A B / S D A B).
Geometry.
assert (S C A B = S D A B).
unfold parallel in H6.
unfold S4 in H6.

*****
H7 : eq (Fdiv (DSeg C Y) (DSeg D Y)) (Fdiv (S C A B) (S D A B))
H6 : eq (Fplus (S A C B) (S A B D)) F0
H5 : not (eq D Y)
H4 : not (Col Y A C)
H3 : not (Col D A B)
H2 : not (eq C D)
H1 : not (eq A B)
H0 : Col Y C D
H : Col Y A B
A,B,C,D,Y : Point
*****
eq (S C A B) (S D A B)
+++++
assert (S C A B = - S A C B).
-----
Theorem common_point_not_par_aux : forall A B C D Y : Point, Col Y A B -> Col Y C D -> A <> B -> C <> D -> ~ Col D A B -> ~ Col Y A C -> ~ parallel A B C D.
Proof.
intros.
assert (D <> Y).
unfold not.
intro.
assert (C ** Y / D ** Y = S C A B / S D A B).
Geometry.
assert (S C A B = S D A B).
unfold parallel in H6.
unfold S4 in H6.
assert (S C A B = - S A C B).

*****
H7 : eq (Fdiv (DSeg C Y) (DSeg D Y)) (Fdiv (S C A B) (S D A B))
H6 : eq (Fplus (S A C B) (S A B D)) F0
H5 : not (eq D Y)
H4 : not (Col Y A C)
H3 : not (Col D A B)
H2 : not (eq C D)
H1 : not (eq A B)
H0 : Col Y C D
H : Col Y A B
A,B,C,D,Y : Point
*****
eq (S C A B) (Fopp (S A C B))
+++++
Geometry.
-----
Theorem common_point_not_par_aux : forall A B C D Y : Point, Col Y A B -> Col Y C D -> A <> B -> C <> D -> ~ Col D A B -> ~ Col Y A C -> ~ parallel A B C D.
Proof.
intros.
assert (D <> Y).
unfold not.
intro.
assert (C ** Y / D ** Y = S C A B / S D A B).
Geometry.
assert (S C A B = S D A B).
unfold parallel in H6.
unfold S4 in H6.
assert (S C A B = - S A C B).

*****
H8 : eq (S C A B) (Fopp (S A C B))
H7 : eq (Fdiv (DSeg C Y) (DSeg D Y)) (Fdiv (S C A B) (S D A B))
H6 : eq (Fplus (S A C B) (S A B D)) F0
H5 : not (eq D Y)
H4 : not (Col Y A C)
H3 : not (Col D A B)
H2 : not (eq C D)
H1 : not (eq A B)
H0 : Col Y C D
H : Col Y A B
A,B,C,D,Y : Point
*****
eq (S C A B) (S D A B)
+++++
Geometry.
-----
Theorem common_point_not_par_aux : forall A B C D Y : Point, Col Y A B -> Col Y C D -> A <> B -> C <> D -> ~ Col D A B -> ~ Col Y A C -> ~ parallel A B C D.
Proof.
intros.
assert (D <> Y).
unfold not.
intro.
assert (C ** Y / D ** Y = S C A B / S D A B).
Geometry.
assert (S C A B = S D A B).
unfold parallel in H6.
unfold S4 in H6.
assert (S C A B = - S A C B).
Geometry.

*****
H8 : eq (S C A B) (Fopp (S A C B))
H7 : eq (Fdiv (DSeg C Y) (DSeg D Y)) (Fdiv (S C A B) (S D A B))
H6 : eq (Fplus (S A C B) (S A B D)) F0
H5 : not (eq D Y)
H4 : not (Col Y A C)
H3 : not (Col D A B)
H2 : not (eq C D)
H1 : not (eq A B)
H0 : Col Y C D
H : Col Y A B
A,B,C,D,Y : Point
*****
eq (S C A B) (S D A B)
+++++
rewrite H8.
-----
Theorem common_point_not_par_aux : forall A B C D Y : Point, Col Y A B -> Col Y C D -> A <> B -> C <> D -> ~ Col D A B -> ~ Col Y A C -> ~ parallel A B C D.
Proof.
intros.
assert (D <> Y).
unfold not.
intro.
assert (C ** Y / D ** Y = S C A B / S D A B).
Geometry.
assert (S C A B = S D A B).
unfold parallel in H6.
unfold S4 in H6.
assert (S C A B = - S A C B).
Geometry.
rewrite H8.

*****
H8 : eq (S C A B) (Fopp (S A C B))
H7 : eq (Fdiv (DSeg C Y) (DSeg D Y)) (Fdiv (S C A B) (S D A B))
H6 : eq (Fplus (S A C B) (S A B D)) F0
H5 : not (eq D Y)
H4 : not (Col Y A C)
H3 : not (Col D A B)
H2 : not (eq C D)
H1 : not (eq A B)
H0 : Col Y C D
H : Col Y A B
A,B,C,D,Y : Point
*****
eq (Fopp (S A C B)) (S D A B)
+++++
RewriteVar (S A C B) H6.
-----
Theorem common_point_not_par_aux : forall A B C D Y : Point, Col Y A B -> Col Y C D -> A <> B -> C <> D -> ~ Col D A B -> ~ Col Y A C -> ~ parallel A B C D.
Proof.
intros.
assert (D <> Y).
unfold not.
intro.
assert (C ** Y / D ** Y = S C A B / S D A B).
Geometry.
assert (S C A B = S D A B).
unfold parallel in H6.
unfold S4 in H6.
assert (S C A B = - S A C B).
Geometry.
rewrite H8.
RewriteVar (S A C B) H6.

*****
H6 : eq (S A C B) (Fopp (S A B D))
H8 : eq (S C A B) (Fopp (Fopp (S A B D)))
H7 : eq (Fdiv (DSeg C Y) (DSeg D Y)) (Fdiv (S C A B) (S D A B))
H5 : not (eq D Y)
H4 : not (Col Y A C)
H3 : not (Col D A B)
H2 : not (eq C D)
H1 : not (eq A B)
H0 : Col Y C D
H : Col Y A B
A,B,C,D,Y : Point
*****
eq (Fopp (Fopp (S A B D))) (S D A B)
+++++
ring_simplify.
-----
Theorem common_point_not_par_aux : forall A B C D Y : Point, Col Y A B -> Col Y C D -> A <> B -> C <> D -> ~ Col D A B -> ~ Col Y A C -> ~ parallel A B C D.
Proof.
intros.
assert (D <> Y).
unfold not.
intro.
assert (C ** Y / D ** Y = S C A B / S D A B).
Geometry.
assert (S C A B = S D A B).
unfold parallel in H6.
unfold S4 in H6.
assert (S C A B = - S A C B).
Geometry.
rewrite H8.
RewriteVar (S A C B) H6.
ring_simplify.

*****
H6 : eq (S A C B) (Fopp (S A B D))
H8 : eq (S C A B) (Fopp (Fopp (S A B D)))
H7 : eq (Fdiv (DSeg C Y) (DSeg D Y)) (Fdiv (S C A B) (S D A B))
H5 : not (eq D Y)
H4 : not (Col Y A C)
H3 : not (Col D A B)
H2 : not (eq C D)
H1 : not (eq A B)
H0 : Col Y C D
H : Col Y A B
A,B,C,D,Y : Point
*****
eq (S A B D) (S D A B)
+++++
Geometry.
-----
Theorem common_point_not_par_aux : forall A B C D Y : Point, Col Y A B -> Col Y C D -> A <> B -> C <> D -> ~ Col D A B -> ~ Col Y A C -> ~ parallel A B C D.
Proof.
intros.
assert (D <> Y).
unfold not.
intro.
assert (C ** Y / D ** Y = S C A B / S D A B).
Geometry.
assert (S C A B = S D A B).

*****
H8 : eq (S C A B) (S D A B)
H7 : eq (Fdiv (DSeg C Y) (DSeg D Y)) (Fdiv (S C A B) (S D A B))
H6 : parallel A B C D
H5 : not (eq D Y)
H4 : not (Col Y A C)
H3 : not (Col D A B)
H2 : not (eq C D)
H1 : not (eq A B)
H0 : Col Y C D
H : Col Y A B
A,B,C,D,Y : Point
*****
False
+++++
rewrite H8 in H7.
-----
Theorem common_point_not_par_aux : forall A B C D Y : Point, Col Y A B -> Col Y C D -> A <> B -> C <> D -> ~ Col D A B -> ~ Col Y A C -> ~ parallel A B C D.
Proof.
intros.
assert (D <> Y).
unfold not.
intro.
assert (C ** Y / D ** Y = S C A B / S D A B).
Geometry.
assert (S C A B = S D A B).
rewrite H8 in H7.

*****
H8 : eq (S C A B) (S D A B)
H7 : eq (Fdiv (DSeg C Y) (DSeg D Y)) (Fdiv (S D A B) (S D A B))
H6 : parallel A B C D
H5 : not (eq D Y)
H4 : not (Col Y A C)
H3 : not (Col D A B)
H2 : not (eq C D)
H1 : not (eq A B)
H0 : Col Y C D
H : Col Y A B
A,B,C,D,Y : Point
*****
False
+++++
assert (C ** Y = D ** Y).
-----
Theorem common_point_not_par_aux : forall A B C D Y : Point, Col Y A B -> Col Y C D -> A <> B -> C <> D -> ~ Col D A B -> ~ Col Y A C -> ~ parallel A B C D.
Proof.
intros.
assert (D <> Y).
unfold not.
intro.
assert (C ** Y / D ** Y = S C A B / S D A B).
Geometry.
assert (S C A B = S D A B).
rewrite H8 in H7.
assert (C ** Y = D ** Y).

*****
H8 : eq (S C A B) (S D A B)
H7 : eq (Fdiv (DSeg C Y) (DSeg D Y)) (Fdiv (S D A B) (S D A B))
H6 : parallel A B C D
H5 : not (eq D Y)
H4 : not (Col Y A C)
H3 : not (Col D A B)
H2 : not (eq C D)
H1 : not (eq A B)
H0 : Col Y C D
H : Col Y A B
A,B,C,D,Y : Point
*****
eq (DSeg C Y) (DSeg D Y)
+++++
RewriteVar (C ** Y) H7.
-----
Theorem common_point_not_par_aux : forall A B C D Y : Point, Col Y A B -> Col Y C D -> A <> B -> C <> D -> ~ Col D A B -> ~ Col Y A C -> ~ parallel A B C D.
Proof.
intros.
assert (D <> Y).
unfold not.
intro.
assert (C ** Y / D ** Y = S C A B / S D A B).
Geometry.
assert (S C A B = S D A B).
rewrite H8 in H7.
assert (C ** Y = D ** Y).
RewriteVar (C ** Y) H7.

*****
H7 : eq (DSeg C Y) (Fmult (DSeg D Y) (Fdiv (S D A B) (S D A B)))
H9 : not (eq (DSeg D Y) F0)
H8 : eq (S C A B) (S D A B)
H6 : parallel A B C D
H5 : not (eq D Y)
H4 : not (Col Y A C)
H3 : not (Col D A B)
H2 : not (eq C D)
H1 : not (eq A B)
H0 : Col Y C D
H : Col Y A B
A,B,C,D,Y : Point
*****
eq (Fmult (DSeg D Y) (Fdiv (S D A B) (S D A B))) (DSeg D Y)
+++++
field.
-----
Theorem common_point_not_par_aux : forall A B C D Y : Point, Col Y A B -> Col Y C D -> A <> B -> C <> D -> ~ Col D A B -> ~ Col Y A C -> ~ parallel A B C D.
Proof.
intros.
assert (D <> Y).
unfold not.
intro.
assert (C ** Y / D ** Y = S C A B / S D A B).
Geometry.
assert (S C A B = S D A B).
rewrite H8 in H7.
assert (C ** Y = D ** Y).
RewriteVar (C ** Y) H7.
field.

*****
H7 : eq (DSeg C Y) (Fmult (DSeg D Y) (Fdiv (S D A B) (S D A B)))
H9 : not (eq (DSeg D Y) F0)
H8 : eq (S C A B) (S D A B)
H6 : parallel A B C D
H5 : not (eq D Y)
H4 : not (Col Y A C)
H3 : not (Col D A B)
H2 : not (eq C D)
H1 : not (eq A B)
H0 : Col Y C D
H : Col Y A B
A,B,C,D,Y : Point
*****
not (eq (S D A B) F0)
+++++
Geometry.
-----
Theorem common_point_not_par_aux : forall A B C D Y : Point, Col Y A B -> Col Y C D -> A <> B -> C <> D -> ~ Col D A B -> ~ Col Y A C -> ~ parallel A B C D.
Proof.
intros.
assert (D <> Y).
unfold not.
intro.
assert (C ** Y / D ** Y = S C A B / S D A B).
Geometry.
assert (S C A B = S D A B).
rewrite H8 in H7.
assert (C ** Y = D ** Y).
RewriteVar (C ** Y) H7.

*****
H7 : eq (Fdiv (DSeg C Y) (DSeg D Y)) (Fdiv (S D A B) (S D A B))
H8 : eq (S C A B) (S D A B)
H6 : parallel A B C D
H5 : not (eq D Y)
H4 : not (Col Y A C)
H3 : not (Col D A B)
H2 : not (eq C D)
H1 : not (eq A B)
H0 : Col Y C D
H : Col Y A B
A,B,C,D,Y : Point
*****
not (eq (DSeg D Y) F0)
+++++
Geometry.
-----
Theorem common_point_not_par_aux : forall A B C D Y : Point, Col Y A B -> Col Y C D -> A <> B -> C <> D -> ~ Col D A B -> ~ Col Y A C -> ~ parallel A B C D.
Proof.
intros.
assert (D <> Y).
unfold not.
intro.
assert (C ** Y / D ** Y = S C A B / S D A B).
Geometry.
assert (S C A B = S D A B).
rewrite H8 in H7.
assert (C ** Y = D ** Y).

*****
H9 : eq (DSeg C Y) (DSeg D Y)
H8 : eq (S C A B) (S D A B)
H7 : eq (Fdiv (DSeg C Y) (DSeg D Y)) (Fdiv (S D A B) (S D A B))
H6 : parallel A B C D
H5 : not (eq D Y)
H4 : not (Col Y A C)
H3 : not (Col D A B)
H2 : not (eq C D)
H1 : not (eq A B)
H0 : Col Y C D
H : Col Y A B
A,B,C,D,Y : Point
*****
False
+++++
assert (C = D).
-----
Theorem common_point_not_par_aux : forall A B C D Y : Point, Col Y A B -> Col Y C D -> A <> B -> C <> D -> ~ Col D A B -> ~ Col Y A C -> ~ parallel A B C D.
Proof.
intros.
assert (D <> Y).
unfold not.
intro.
assert (C ** Y / D ** Y = S C A B / S D A B).
Geometry.
assert (S C A B = S D A B).
rewrite H8 in H7.
assert (C ** Y = D ** Y).
assert (C = D).

*****
H9 : eq (DSeg C Y) (DSeg D Y)
H8 : eq (S C A B) (S D A B)
H7 : eq (Fdiv (DSeg C Y) (DSeg D Y)) (Fdiv (S D A B) (S D A B))
H6 : parallel A B C D
H5 : not (eq D Y)
H4 : not (Col Y A C)
H3 : not (Col D A B)
H2 : not (eq C D)
H1 : not (eq A B)
H0 : Col Y C D
H : Col Y A B
A,B,C,D,Y : Point
*****
eq C D
+++++
assert (C ** D + D ** Y = C ** Y).
-----
Theorem common_point_not_par_aux : forall A B C D Y : Point, Col Y A B -> Col Y C D -> A <> B -> C <> D -> ~ Col D A B -> ~ Col Y A C -> ~ parallel A B C D.
Proof.
intros.
assert (D <> Y).
unfold not.
intro.
assert (C ** Y / D ** Y = S C A B / S D A B).
Geometry.
assert (S C A B = S D A B).
rewrite H8 in H7.
assert (C ** Y = D ** Y).
assert (C = D).
assert (C ** D + D ** Y = C ** Y).

*****
H9 : eq (DSeg C Y) (DSeg D Y)
H8 : eq (S C A B) (S D A B)
H7 : eq (Fdiv (DSeg C Y) (DSeg D Y)) (Fdiv (S D A B) (S D A B))
H6 : parallel A B C D
H5 : not (eq D Y)
H4 : not (Col Y A C)
H3 : not (Col D A B)
H2 : not (eq C D)
H1 : not (eq A B)
H0 : Col Y C D
H : Col Y A B
A,B,C,D,Y : Point
*****
eq (Fplus (DSeg C D) (DSeg D Y)) (DSeg C Y)
+++++
Geometry.
-----
Theorem common_point_not_par_aux : forall A B C D Y : Point, Col Y A B -> Col Y C D -> A <> B -> C <> D -> ~ Col D A B -> ~ Col Y A C -> ~ parallel A B C D.
Proof.
intros.
assert (D <> Y).
unfold not.
intro.
assert (C ** Y / D ** Y = S C A B / S D A B).
Geometry.
assert (S C A B = S D A B).
rewrite H8 in H7.
assert (C ** Y = D ** Y).
assert (C = D).
assert (C ** D + D ** Y = C ** Y).

*****
H10 : eq (Fplus (DSeg C D) (DSeg D Y)) (DSeg C Y)
H9 : eq (DSeg C Y) (DSeg D Y)
H8 : eq (S C A B) (S D A B)
H7 : eq (Fdiv (DSeg C Y) (DSeg D Y)) (Fdiv (S D A B) (S D A B))
H6 : parallel A B C D
H5 : not (eq D Y)
H4 : not (Col Y A C)
H3 : not (Col D A B)
H2 : not (eq C D)
H1 : not (eq A B)
H0 : Col Y C D
H : Col Y A B
A,B,C,D,Y : Point
*****
eq C D
+++++
Geometry.
-----
Theorem common_point_not_par_aux : forall A B C D Y : Point, Col Y A B -> Col Y C D -> A <> B -> C <> D -> ~ Col D A B -> ~ Col Y A C -> ~ parallel A B C D.
Proof.
intros.
assert (D <> Y).
unfold not.
intro.
assert (C ** Y / D ** Y = S C A B / S D A B).
Geometry.
assert (S C A B = S D A B).
rewrite H8 in H7.
assert (C ** Y = D ** Y).
assert (C = D).
assert (C ** D + D ** Y = C ** Y).
Geometry.

*****
H10 : eq (Fplus (DSeg C D) (DSeg D Y)) (DSeg C Y)
H9 : eq (DSeg C Y) (DSeg D Y)
H8 : eq (S C A B) (S D A B)
H7 : eq (Fdiv (DSeg C Y) (DSeg D Y)) (Fdiv (S D A B) (S D A B))
H6 : parallel A B C D
H5 : not (eq D Y)
H4 : not (Col Y A C)
H3 : not (Col D A B)
H2 : not (eq C D)
H1 : not (eq A B)
H0 : Col Y C D
H : Col Y A B
A,B,C,D,Y : Point
*****
eq C D
+++++
rewrite <- H10 in H9.
-----
Theorem common_point_not_par_aux : forall A B C D Y : Point, Col Y A B -> Col Y C D -> A <> B -> C <> D -> ~ Col D A B -> ~ Col Y A C -> ~ parallel A B C D.
Proof.
intros.
assert (D <> Y).
unfold not.
intro.
assert (C ** Y / D ** Y = S C A B / S D A B).
Geometry.
assert (S C A B = S D A B).
rewrite H8 in H7.
assert (C ** Y = D ** Y).
assert (C = D).
assert (C ** D + D ** Y = C ** Y).
Geometry.
rewrite <- H10 in H9.

*****
H10 : eq (Fplus (DSeg C D) (DSeg D Y)) (DSeg C Y)
H9 : eq (Fplus (DSeg C D) (DSeg D Y)) (DSeg D Y)
H8 : eq (S C A B) (S D A B)
H7 : eq (Fdiv (DSeg C Y) (DSeg D Y)) (Fdiv (S D A B) (S D A B))
H6 : parallel A B C D
H5 : not (eq D Y)
H4 : not (Col Y A C)
H3 : not (Col D A B)
H2 : not (eq C D)
H1 : not (eq A B)
H0 : Col Y C D
H : Col Y A B
A,B,C,D,Y : Point
*****
eq C D
+++++
assert (C ** D = 0).
-----
Theorem common_point_not_par_aux : forall A B C D Y : Point, Col Y A B -> Col Y C D -> A <> B -> C <> D -> ~ Col D A B -> ~ Col Y A C -> ~ parallel A B C D.
Proof.
intros.
assert (D <> Y).
unfold not.
intro.
assert (C ** Y / D ** Y = S C A B / S D A B).
Geometry.
assert (S C A B = S D A B).
rewrite H8 in H7.
assert (C ** Y = D ** Y).
assert (C = D).
assert (C ** D + D ** Y = C ** Y).
Geometry.
rewrite <- H10 in H9.
assert (C ** D = 0).

*****
H10 : eq (Fplus (DSeg C D) (DSeg D Y)) (DSeg C Y)
H9 : eq (Fplus (DSeg C D) (DSeg D Y)) (DSeg D Y)
H8 : eq (S C A B) (S D A B)
H7 : eq (Fdiv (DSeg C Y) (DSeg D Y)) (Fdiv (S D A B) (S D A B))
H6 : parallel A B C D
H5 : not (eq D Y)
H4 : not (Col Y A C)
H3 : not (Col D A B)
H2 : not (eq C D)
H1 : not (eq A B)
H0 : Col Y C D
H : Col Y A B
A,B,C,D,Y : Point
*****
eq (DSeg C D) F0
+++++
Geometry.
-----
Theorem common_point_not_par_aux : forall A B C D Y : Point, Col Y A B -> Col Y C D -> A <> B -> C <> D -> ~ Col D A B -> ~ Col Y A C -> ~ parallel A B C D.
Proof.
intros.
assert (D <> Y).
unfold not.
intro.
assert (C ** Y / D ** Y = S C A B / S D A B).
Geometry.
assert (S C A B = S D A B).
rewrite H8 in H7.
assert (C ** Y = D ** Y).
assert (C = D).
assert (C ** D + D ** Y = C ** Y).
Geometry.
rewrite <- H10 in H9.
assert (C ** D = 0).
Geometry.

*****
H10 : eq (Fplus (DSeg C D) (DSeg D Y)) (DSeg C Y)
H9 : eq (Fplus (DSeg C D) (DSeg D Y)) (DSeg D Y)
H8 : eq (S C A B) (S D A B)
H7 : eq (Fdiv (DSeg C Y) (DSeg D Y)) (Fdiv (S D A B) (S D A B))
H6 : parallel A B C D
H5 : not (eq D Y)
H4 : not (Col Y A C)
H3 : not (Col D A B)
H2 : not (eq C D)
H1 : not (eq A B)
H0 : Col Y C D
H : Col Y A B
A,B,C,D,Y : Point
*****
eq (DSeg C D) F0
+++++
RewriteVar (C ** D) H9.
-----
Theorem common_point_not_par_aux : forall A B C D Y : Point, Col Y A B -> Col Y C D -> A <> B -> C <> D -> ~ Col D A B -> ~ Col Y A C -> ~ parallel A B C D.
Proof.
intros.
assert (D <> Y).
unfold not.
intro.
assert (C ** Y / D ** Y = S C A B / S D A B).
Geometry.
assert (S C A B = S D A B).
rewrite H8 in H7.
assert (C ** Y = D ** Y).
assert (C = D).
assert (C ** D + D ** Y = C ** Y).
Geometry.
rewrite <- H10 in H9.
assert (C ** D = 0).
Geometry.
RewriteVar (C ** D) H9.

*****
H9 : eq (DSeg C D) F0
H10 : eq (Fplus F0 (DSeg D Y)) (DSeg C Y)
H8 : eq (S C A B) (S D A B)
H7 : eq (Fdiv (DSeg C Y) (DSeg D Y)) (Fdiv (S D A B) (S D A B))
H6 : parallel A B C D
H5 : not (eq D Y)
H4 : not (Col Y A C)
H3 : not (Col D A B)
H2 : not (eq C D)
H1 : not (eq A B)
H0 : Col Y C D
H : Col Y A B
A,B,C,D,Y : Point
*****
eq F0 F0
+++++
Geometry.
-----
Theorem common_point_not_par_aux : forall A B C D Y : Point, Col Y A B -> Col Y C D -> A <> B -> C <> D -> ~ Col D A B -> ~ Col Y A C -> ~ parallel A B C D.
Proof.
intros.
assert (D <> Y).
unfold not.
intro.
assert (C ** Y / D ** Y = S C A B / S D A B).
Geometry.
assert (S C A B = S D A B).
rewrite H8 in H7.
assert (C ** Y = D ** Y).
assert (C = D).
assert (C ** D + D ** Y = C ** Y).
Geometry.
rewrite <- H10 in H9.
assert (C ** D = 0).

*****
H11 : eq (DSeg C D) F0
H10 : eq (Fplus (DSeg C D) (DSeg D Y)) (DSeg C Y)
H9 : eq (Fplus (DSeg C D) (DSeg D Y)) (DSeg D Y)
H8 : eq (S C A B) (S D A B)
H7 : eq (Fdiv (DSeg C Y) (DSeg D Y)) (Fdiv (S D A B) (S D A B))
H6 : parallel A B C D
H5 : not (eq D Y)
H4 : not (Col Y A C)
H3 : not (Col D A B)
H2 : not (eq C D)
H1 : not (eq A B)
H0 : Col Y C D
H : Col Y A B
A,B,C,D,Y : Point
*****
eq C D
+++++
Geometry.
-----
Theorem common_point_not_par_aux : forall A B C D Y : Point, Col Y A B -> Col Y C D -> A <> B -> C <> D -> ~ Col D A B -> ~ Col Y A C -> ~ parallel A B C D.
Proof.
intros.
assert (D <> Y).
unfold not.
intro.
assert (C ** Y / D ** Y = S C A B / S D A B).
Geometry.
assert (S C A B = S D A B).
rewrite H8 in H7.
assert (C ** Y = D ** Y).
assert (C = D).

*****
H10 : eq C D
H9 : eq (DSeg C Y) (DSeg D Y)
H8 : eq (S C A B) (S D A B)
H7 : eq (Fdiv (DSeg C Y) (DSeg D Y)) (Fdiv (S D A B) (S D A B))
H6 : parallel A B C D
H5 : not (eq D Y)
H4 : not (Col Y A C)
H3 : not (Col D A B)
H2 : not (eq C D)
H1 : not (eq A B)
H0 : Col Y C D
H : Col Y A B
A,B,C,D,Y : Point
*****
False
+++++
Geometry.
-----
Theorem common_point_not_par_aux : forall A B C D Y : Point, Col Y A B -> Col Y C D -> A <> B -> C <> D -> ~ Col D A B -> ~ Col Y A C -> ~ parallel A B C D.
Proof.
intros.
assert (D <> Y).

*****

*****

+++++
Qed.
-----
Lemma col_par_1 : forall A B C,\n Col A B C -> parallel A B B C.
-----
Lemma col_par_1 : forall A B C, Col A B C -> parallel A B B C.

*****

*****
forall (A B C : Point) (_ : Col A B C), parallel A B B C
+++++
Proof.
-----
Lemma col_par_1 : forall A B C, Col A B C -> parallel A B B C.
Proof.

*****

*****
forall (A B C : Point) (_ : Col A B C), parallel A B B C
+++++
intros.
-----
Lemma col_par_1 : forall A B C, Col A B C -> parallel A B B C.
Proof.
intros.

*****
H : Col A B C
A,B,C : Point
*****
parallel A B B C
+++++
unfold parallel in *.
-----
Lemma col_par_1 : forall A B C, Col A B C -> parallel A B B C.
Proof.
intros.
unfold parallel in *.

*****
H : Col A B C
A,B,C : Point
*****
eq (S4 A B B C) F0
+++++
unfold S4 in *.
-----
Lemma col_par_1 : forall A B C, Col A B C -> parallel A B B C.
Proof.
intros.
unfold parallel in *.
unfold S4 in *.

*****
H : Col A B C
A,B,C : Point
*****
eq (Fplus (S A B B) (S A B C)) F0
+++++
unfold Col in *.
-----
Lemma col_par_1 : forall A B C, Col A B C -> parallel A B B C.
Proof.
intros.
unfold parallel in *.
unfold S4 in *.
unfold Col in *.

*****
H : eq (S A B C) F0
A,B,C : Point
*****
eq (Fplus (S A B B) (S A B C)) F0
+++++
rewrite H.
-----
Lemma col_par_1 : forall A B C, Col A B C -> parallel A B B C.
Proof.
intros.
unfold parallel in *.
unfold S4 in *.
unfold Col in *.
rewrite H.

*****
H : eq (S A B C) F0
A,B,C : Point
*****
eq (Fplus (S A B B) F0) F0
+++++
basic_simpl.
-----
Lemma col_par_1 : forall A B C, Col A B C -> parallel A B B C.
Proof.
intros.
unfold parallel in *.
unfold S4 in *.
unfold Col in *.
rewrite H.
basic_simpl.

*****
H : eq (S A B C) F0
A,B,C : Point
*****
eq F0 F0
+++++
ring.
-----
Lemma col_par_1 : forall A B C, Col A B C -> parallel A B B C.
Proof.
intros.
unfold parallel in *.
unfold S4 in *.
unfold Col in *.
rewrite H.
basic_simpl.
ring.

*****

*****

+++++
Qed.
-----
Lemma col_par_2 : forall A B C,\n Col A B C -> parallel A B C B.
-----
Lemma col_par_2 : forall A B C, Col A B C -> parallel A B C B.

*****

*****
forall (A B C : Point) (_ : Col A B C), parallel A B C B
+++++
Proof.
-----
Lemma col_par_2 : forall A B C, Col A B C -> parallel A B C B.
Proof.

*****

*****
forall (A B C : Point) (_ : Col A B C), parallel A B C B
+++++
intros.
-----
Lemma col_par_2 : forall A B C, Col A B C -> parallel A B C B.
Proof.
intros.

*****
H : Col A B C
A,B,C : Point
*****
parallel A B C B
+++++
unfold parallel in *.
-----
Lemma col_par_2 : forall A B C, Col A B C -> parallel A B C B.
Proof.
intros.
unfold parallel in *.

*****
H : Col A B C
A,B,C : Point
*****
eq (S4 A C B B) F0
+++++
unfold S4 in *.
-----
Lemma col_par_2 : forall A B C, Col A B C -> parallel A B C B.
Proof.
intros.
unfold parallel in *.
unfold S4 in *.

*****
H : Col A B C
A,B,C : Point
*****
eq (Fplus (S A C B) (S A B B)) F0
+++++
unfold Col in *.
-----
Lemma col_par_2 : forall A B C, Col A B C -> parallel A B C B.
Proof.
intros.
unfold parallel in *.
unfold S4 in *.
unfold Col in *.

*****
H : eq (S A B C) F0
A,B,C : Point
*****
eq (Fplus (S A C B) (S A B B)) F0
+++++
basic_simpl.
-----
Lemma col_par_2 : forall A B C, Col A B C -> parallel A B C B.
Proof.
intros.
unfold parallel in *.
unfold S4 in *.
unfold Col in *.
basic_simpl.

*****
H : eq (S A B C) F0
A,B,C : Point
*****
eq (S A C B) F0
+++++
uniformize_signed_areas.
-----
Lemma col_par_2 : forall A B C, Col A B C -> parallel A B C B.
Proof.
intros.
unfold parallel in *.
unfold S4 in *.
unfold Col in *.
basic_simpl.
uniformize_signed_areas.

*****
H : eq (S A B C) F0
A,B,C : Point
*****
eq (Fopp (S A B C)) F0
+++++
rewrite H.
-----
Lemma col_par_2 : forall A B C, Col A B C -> parallel A B C B.
Proof.
intros.
unfold parallel in *.
unfold S4 in *.
unfold Col in *.
basic_simpl.
uniformize_signed_areas.
rewrite H.

*****
H : eq (S A B C) F0
A,B,C : Point
*****
eq (Fopp F0) F0
+++++
ring.
-----
Lemma col_par_2 : forall A B C, Col A B C -> parallel A B C B.
Proof.
intros.
unfold parallel in *.
unfold S4 in *.
unfold Col in *.
basic_simpl.
uniformize_signed_areas.
rewrite H.
ring.

*****

*****

+++++
Qed.
-----
Lemma col_par_3 : forall A B C,\n Col A B C -> parallel B A C B.
-----
Lemma col_par_3 : forall A B C, Col A B C -> parallel B A C B.

*****

*****
forall (A B C : Point) (_ : Col A B C), parallel B A C B
+++++
Proof.
-----
Lemma col_par_3 : forall A B C, Col A B C -> parallel B A C B.
Proof.

*****

*****
forall (A B C : Point) (_ : Col A B C), parallel B A C B
+++++
intros.
-----
Lemma col_par_3 : forall A B C, Col A B C -> parallel B A C B.
Proof.
intros.

*****
H : Col A B C
A,B,C : Point
*****
parallel B A C B
+++++
unfold parallel in *.
-----
Lemma col_par_3 : forall A B C, Col A B C -> parallel B A C B.
Proof.
intros.
unfold parallel in *.

*****
H : Col A B C
A,B,C : Point
*****
eq (S4 B C A B) F0
+++++
unfold S4 in *.
-----
Lemma col_par_3 : forall A B C, Col A B C -> parallel B A C B.
Proof.
intros.
unfold parallel in *.
unfold S4 in *.

*****
H : Col A B C
A,B,C : Point
*****
eq (Fplus (S B C A) (S B A B)) F0
+++++
unfold Col in *.
-----
Lemma col_par_3 : forall A B C, Col A B C -> parallel B A C B.
Proof.
intros.
unfold parallel in *.
unfold S4 in *.
unfold Col in *.

*****
H : eq (S A B C) F0
A,B,C : Point
*****
eq (Fplus (S B C A) (S B A B)) F0
+++++
basic_simpl.
-----
Lemma col_par_3 : forall A B C, Col A B C -> parallel B A C B.
Proof.
intros.
unfold parallel in *.
unfold S4 in *.
unfold Col in *.
basic_simpl.

*****
H : eq (S A B C) F0
A,B,C : Point
*****
eq (S B C A) F0
+++++
uniformize_signed_areas.
-----
Lemma col_par_3 : forall A B C, Col A B C -> parallel B A C B.
Proof.
intros.
unfold parallel in *.
unfold S4 in *.
unfold Col in *.
basic_simpl.
uniformize_signed_areas.

*****
H : eq (S A B C) F0
A,B,C : Point
*****
eq (S A B C) F0
+++++
rewrite H.
-----
Lemma col_par_3 : forall A B C, Col A B C -> parallel B A C B.
Proof.
intros.
unfold parallel in *.
unfold S4 in *.
unfold Col in *.
basic_simpl.
uniformize_signed_areas.
rewrite H.

*****
H : eq (S A B C) F0
A,B,C : Point
*****
eq F0 F0
+++++
ring.
-----
Lemma col_par_3 : forall A B C, Col A B C -> parallel B A C B.
Proof.
intros.
unfold parallel in *.
unfold S4 in *.
unfold Col in *.
basic_simpl.
uniformize_signed_areas.
rewrite H.
ring.

*****

*****

+++++
Qed.
-----
Lemma col_par_4 : forall A B C,\n Col A B C -> parallel B A B C.
-----
Lemma col_par_4 : forall A B C, Col A B C -> parallel B A B C.

*****

*****
forall (A B C : Point) (_ : Col A B C), parallel B A B C
+++++
Proof.
-----
Lemma col_par_4 : forall A B C, Col A B C -> parallel B A B C.
Proof.

*****

*****
forall (A B C : Point) (_ : Col A B C), parallel B A B C
+++++
intros.
-----
Lemma col_par_4 : forall A B C, Col A B C -> parallel B A B C.
Proof.
intros.

*****
H : Col A B C
A,B,C : Point
*****
parallel B A B C
+++++
unfold parallel in *.
-----
Lemma col_par_4 : forall A B C, Col A B C -> parallel B A B C.
Proof.
intros.
unfold parallel in *.

*****
H : Col A B C
A,B,C : Point
*****
eq (S4 B B A C) F0
+++++
unfold S4 in *.
-----
Lemma col_par_4 : forall A B C, Col A B C -> parallel B A B C.
Proof.
intros.
unfold parallel in *.
unfold S4 in *.

*****
H : Col A B C
A,B,C : Point
*****
eq (Fplus (S B B A) (S B A C)) F0
+++++
unfold Col in *.
-----
Lemma col_par_4 : forall A B C, Col A B C -> parallel B A B C.
Proof.
intros.
unfold parallel in *.
unfold S4 in *.
unfold Col in *.

*****
H : eq (S A B C) F0
A,B,C : Point
*****
eq (Fplus (S B B A) (S B A C)) F0
+++++
basic_simpl.
-----
Lemma col_par_4 : forall A B C, Col A B C -> parallel B A B C.
Proof.
intros.
unfold parallel in *.
unfold S4 in *.
unfold Col in *.
basic_simpl.

*****
H : eq (S A B C) F0
A,B,C : Point
*****
eq (S B A C) F0
+++++
uniformize_signed_areas.
-----
Lemma col_par_4 : forall A B C, Col A B C -> parallel B A B C.
Proof.
intros.
unfold parallel in *.
unfold S4 in *.
unfold Col in *.
basic_simpl.
uniformize_signed_areas.

*****
H : eq (S A B C) F0
A,B,C : Point
*****
eq (Fopp (S A B C)) F0
+++++
rewrite H.
-----
Lemma col_par_4 : forall A B C, Col A B C -> parallel B A B C.
Proof.
intros.
unfold parallel in *.
unfold S4 in *.
unfold Col in *.
basic_simpl.
uniformize_signed_areas.
rewrite H.

*****
H : eq (S A B C) F0
A,B,C : Point
*****
eq (Fopp F0) F0
+++++
ring.
-----
Lemma col_par_4 : forall A B C, Col A B C -> parallel B A B C.
Proof.
intros.
unfold parallel in *.
unfold S4 in *.
unfold Col in *.
basic_simpl.
uniformize_signed_areas.
rewrite H.
ring.

*****

*****

+++++
Qed.
-----
Hint Resolve col_par_1 col_par_2 col_par_3 col_par_4 : Geom.
-----
Lemma par_col_col_1 : forall A B C D, \n parallel A B C D ->\n Col A B C -> \n Col A B D.
-----
Lemma par_col_col_1 : forall A B C D, parallel A B C D -> Col A B C -> Col A B D.

*****

*****
forall (A B C D : Point) (_ : parallel A B C D) (_ : Col A B C), Col A B D
+++++
Proof.
-----
Lemma par_col_col_1 : forall A B C D, parallel A B C D -> Col A B C -> Col A B D.
Proof.

*****

*****
forall (A B C D : Point) (_ : parallel A B C D) (_ : Col A B C), Col A B D
+++++
intros.
-----
Lemma par_col_col_1 : forall A B C D, parallel A B C D -> Col A B C -> Col A B D.
Proof.
intros.

*****
H0 : Col A B C
H : parallel A B C D
A,B,C,D : Point
*****
Col A B D
+++++
unfold parallel in *.
-----
Lemma par_col_col_1 : forall A B C D, parallel A B C D -> Col A B C -> Col A B D.
Proof.
intros.
unfold parallel in *.

*****
H0 : Col A B C
H : eq (S4 A C B D) F0
A,B,C,D : Point
*****
Col A B D
+++++
unfold S4 in *.
-----
Lemma par_col_col_1 : forall A B C D, parallel A B C D -> Col A B C -> Col A B D.
Proof.
intros.
unfold parallel in *.
unfold S4 in *.

*****
H0 : Col A B C
H : eq (Fplus (S A C B) (S A B D)) F0
A,B,C,D : Point
*****
Col A B D
+++++
unfold Col in *.
-----
Lemma par_col_col_1 : forall A B C D, parallel A B C D -> Col A B C -> Col A B D.
Proof.
intros.
unfold parallel in *.
unfold S4 in *.
unfold Col in *.

*****
H0 : eq (S A B C) F0
H : eq (Fplus (S A C B) (S A B D)) F0
A,B,C,D : Point
*****
eq (S A B D) F0
+++++
uniformize_signed_areas.
-----
Lemma par_col_col_1 : forall A B C D, parallel A B C D -> Col A B C -> Col A B D.
Proof.
intros.
unfold parallel in *.
unfold S4 in *.
unfold Col in *.
uniformize_signed_areas.

*****
H0 : eq (Fopp (S A C B)) F0
H : eq (Fplus (S A C B) (S A B D)) F0
A,B,C,D : Point
*****
eq (S A B D) F0
+++++
RewriteVar (S A B D) H.
-----
Lemma par_col_col_1 : forall A B C D, parallel A B C D -> Col A B C -> Col A B D.
Proof.
intros.
unfold parallel in *.
unfold S4 in *.
unfold Col in *.
uniformize_signed_areas.
RewriteVar (S A B D) H.

*****
H : eq (S A B D) (Fopp (S A C B))
H0 : eq (Fopp (S A C B)) F0
A,B,C,D : Point
*****
eq (Fopp (S A C B)) F0
+++++
replace (- (1) * S A C B) with (- S A C B) by ring.
-----
Lemma par_col_col_1 : forall A B C D, parallel A B C D -> Col A B C -> Col A B D.
Proof.
intros.
unfold parallel in *.
unfold S4 in *.
unfold Col in *.
uniformize_signed_areas.
RewriteVar (S A B D) H.
replace (- (1) * S A C B) with (- S A C B) by ring.

*****
H : eq (S A B D) (Fopp (S A C B))
H0 : eq (Fopp (S A C B)) F0
A,B,C,D : Point
*****
eq (Fopp (S A C B)) F0
+++++
auto.
-----
Lemma par_col_col_1 : forall A B C D, parallel A B C D -> Col A B C -> Col A B D.
Proof.
intros.
unfold parallel in *.
unfold S4 in *.
unfold Col in *.
uniformize_signed_areas.
RewriteVar (S A B D) H.
replace (- (1) * S A C B) with (- S A C B) by ring.
auto.

*****

*****

+++++
Qed.
-----
Lemma par_col_col_2 : forall A B C D, \n parallel A B C D ->\n Col A B D -> \n Col A B C.
-----
Lemma par_col_col_2 : forall A B C D, parallel A B C D -> Col A B D -> Col A B C.

*****

*****
forall (A B C D : Point) (_ : parallel A B C D) (_ : Col A B D), Col A B C
+++++
Proof.
-----
Lemma par_col_col_2 : forall A B C D, parallel A B C D -> Col A B D -> Col A B C.
Proof.

*****

*****
forall (A B C D : Point) (_ : parallel A B C D) (_ : Col A B D), Col A B C
+++++
intros.
-----
Lemma par_col_col_2 : forall A B C D, parallel A B C D -> Col A B D -> Col A B C.
Proof.
intros.

*****
H0 : Col A B D
H : parallel A B C D
A,B,C,D : Point
*****
Col A B C
+++++
assert (parallel A B D C).
-----
Lemma par_col_col_2 : forall A B C D, parallel A B C D -> Col A B D -> Col A B C.
Proof.
intros.
assert (parallel A B D C).

*****
H0 : Col A B D
H : parallel A B C D
A,B,C,D : Point
*****
parallel A B D C
+++++
Geometry.
-----
Lemma par_col_col_2 : forall A B C D, parallel A B C D -> Col A B D -> Col A B C.
Proof.
intros.
assert (parallel A B D C).

*****
H1 : parallel A B D C
H0 : Col A B D
H : parallel A B C D
A,B,C,D : Point
*****
Col A B C
+++++
eapply par_col_col_1.
-----
Lemma par_col_col_2 : forall A B C D, parallel A B C D -> Col A B D -> Col A B C.
Proof.
intros.
assert (parallel A B D C).
eapply par_col_col_1.

*****
H1 : parallel A B D C
H0 : Col A B D
H : parallel A B C D
A,B,C,D : Point
*****
parallel A B ?C C
+++++
eauto.
-----
Lemma par_col_col_2 : forall A B C D, parallel A B C D -> Col A B D -> Col A B C.
Proof.
intros.
assert (parallel A B D C).
eapply par_col_col_1.

*****
H1 : parallel A B D C
H0 : Col A B D
H : parallel A B C D
A,B,C,D : Point
*****
Col A B D
+++++
eauto.
-----
Lemma par_col_col_2 : forall A B C D, parallel A B C D -> Col A B D -> Col A B C.
Proof.
intros.
assert (parallel A B D C).

*****

*****

+++++
Qed.
-----
Lemma par_col_col_3 : forall A B C D, \n parallel A B C D ->\n Col A C D -> \n Col B C D.
-----
Lemma par_col_col_3 : forall A B C D, parallel A B C D -> Col A C D -> Col B C D.

*****

*****
forall (A B C D : Point) (_ : parallel A B C D) (_ : Col A C D), Col B C D
+++++
Proof.
-----
Lemma par_col_col_3 : forall A B C D, parallel A B C D -> Col A C D -> Col B C D.
Proof.

*****

*****
forall (A B C D : Point) (_ : parallel A B C D) (_ : Col A C D), Col B C D
+++++
intros.
-----
Lemma par_col_col_3 : forall A B C D, parallel A B C D -> Col A C D -> Col B C D.
Proof.
intros.

*****
H0 : Col A C D
H : parallel A B C D
A,B,C,D : Point
*****
Col B C D
+++++
cut (Col C D B).
-----
Lemma par_col_col_3 : forall A B C D, parallel A B C D -> Col A C D -> Col B C D.
Proof.
intros.
cut (Col C D B).

*****
H0 : Col A C D
H : parallel A B C D
A,B,C,D : Point
*****
forall _ : Col C D B, Col B C D
+++++
Geometry.
-----
Lemma par_col_col_3 : forall A B C D, parallel A B C D -> Col A C D -> Col B C D.
Proof.
intros.
cut (Col C D B).

*****
H0 : Col A C D
H : parallel A B C D
A,B,C,D : Point
*****
Col C D B
+++++
assert (parallel C D A B).
-----
Lemma par_col_col_3 : forall A B C D, parallel A B C D -> Col A C D -> Col B C D.
Proof.
intros.
cut (Col C D B).
assert (parallel C D A B).

*****
H0 : Col A C D
H : parallel A B C D
A,B,C,D : Point
*****
parallel C D A B
+++++
Geometry.
-----
Lemma par_col_col_3 : forall A B C D, parallel A B C D -> Col A C D -> Col B C D.
Proof.
intros.
cut (Col C D B).
assert (parallel C D A B).

*****
H1 : parallel C D A B
H0 : Col A C D
H : parallel A B C D
A,B,C,D : Point
*****
Col C D B
+++++
eapply par_col_col_1.
-----
Lemma par_col_col_3 : forall A B C D, parallel A B C D -> Col A C D -> Col B C D.
Proof.
intros.
cut (Col C D B).
assert (parallel C D A B).
eapply par_col_col_1.

*****
H1 : parallel C D A B
H0 : Col A C D
H : parallel A B C D
A,B,C,D : Point
*****
parallel C D ?C B
+++++
eauto.
-----
Lemma par_col_col_3 : forall A B C D, parallel A B C D -> Col A C D -> Col B C D.
Proof.
intros.
cut (Col C D B).
assert (parallel C D A B).
eapply par_col_col_1.

*****
H1 : parallel C D A B
H0 : Col A C D
H : parallel A B C D
A,B,C,D : Point
*****
Col C D A
+++++
eauto.
-----
Lemma par_col_col_3 : forall A B C D, parallel A B C D -> Col A C D -> Col B C D.
Proof.
intros.
cut (Col C D B).
assert (parallel C D A B).
eapply par_col_col_1.
eauto.

*****
H1 : parallel C D A B
H0 : Col A C D
H : parallel A B C D
A,B,C,D : Point
*****
Col C D A
+++++
Geometry.
-----
Lemma par_col_col_3 : forall A B C D, parallel A B C D -> Col A C D -> Col B C D.
Proof.
intros.
cut (Col C D B).

*****

*****

+++++
Qed.
-----
Lemma par_col_col_4 : forall A B C D, \n parallel A B C D ->\n Col B C D -> \n Col A C D.
-----
Lemma par_col_col_4 : forall A B C D, parallel A B C D -> Col B C D -> Col A C D.

*****

*****
forall (A B C D : Point) (_ : parallel A B C D) (_ : Col B C D), Col A C D
+++++
Proof.
-----
Lemma par_col_col_4 : forall A B C D, parallel A B C D -> Col B C D -> Col A C D.
Proof.

*****

*****
forall (A B C D : Point) (_ : parallel A B C D) (_ : Col B C D), Col A C D
+++++
intros.
-----
Lemma par_col_col_4 : forall A B C D, parallel A B C D -> Col B C D -> Col A C D.
Proof.
intros.

*****
H0 : Col B C D
H : parallel A B C D
A,B,C,D : Point
*****
Col A C D
+++++
cut (Col C D A).
-----
Lemma par_col_col_4 : forall A B C D, parallel A B C D -> Col B C D -> Col A C D.
Proof.
intros.
cut (Col C D A).

*****
H0 : Col B C D
H : parallel A B C D
A,B,C,D : Point
*****
forall _ : Col C D A, Col A C D
+++++
Geometry.
-----
Lemma par_col_col_4 : forall A B C D, parallel A B C D -> Col B C D -> Col A C D.
Proof.
intros.
cut (Col C D A).

*****
H0 : Col B C D
H : parallel A B C D
A,B,C,D : Point
*****
Col C D A
+++++
assert (parallel C D B A).
-----
Lemma par_col_col_4 : forall A B C D, parallel A B C D -> Col B C D -> Col A C D.
Proof.
intros.
cut (Col C D A).
assert (parallel C D B A).

*****
H0 : Col B C D
H : parallel A B C D
A,B,C,D : Point
*****
parallel C D B A
+++++
Geometry.
-----
Lemma par_col_col_4 : forall A B C D, parallel A B C D -> Col B C D -> Col A C D.
Proof.
intros.
cut (Col C D A).
assert (parallel C D B A).

*****
H1 : parallel C D B A
H0 : Col B C D
H : parallel A B C D
A,B,C,D : Point
*****
Col C D A
+++++
eapply par_col_col_1.
-----
Lemma par_col_col_4 : forall A B C D, parallel A B C D -> Col B C D -> Col A C D.
Proof.
intros.
cut (Col C D A).
assert (parallel C D B A).
eapply par_col_col_1.

*****
H1 : parallel C D B A
H0 : Col B C D
H : parallel A B C D
A,B,C,D : Point
*****
parallel C D ?C A
+++++
eauto.
-----
Lemma par_col_col_4 : forall A B C D, parallel A B C D -> Col B C D -> Col A C D.
Proof.
intros.
cut (Col C D A).
assert (parallel C D B A).
eapply par_col_col_1.

*****
H1 : parallel C D B A
H0 : Col B C D
H : parallel A B C D
A,B,C,D : Point
*****
Col C D B
+++++
eauto.
-----
Lemma par_col_col_4 : forall A B C D, parallel A B C D -> Col B C D -> Col A C D.
Proof.
intros.
cut (Col C D A).
assert (parallel C D B A).
eapply par_col_col_1.
eauto.

*****
H1 : parallel C D B A
H0 : Col B C D
H : parallel A B C D
A,B,C,D : Point
*****
Col C D B
+++++
Geometry.
-----
Lemma par_col_col_4 : forall A B C D, parallel A B C D -> Col B C D -> Col A C D.
Proof.
intros.
cut (Col C D A).

*****

*****

+++++
Qed.
-----
Theorem common_point_not_par :\n forall A B C D Y : Point,\n Col Y A B -> \n Col Y C D -> \n A <> B -> \n C <> D ->\n ~ Col Y A C -> \n ~ parallel A B C D.
-----
Theorem common_point_not_par : forall A B C D Y : Point, Col Y A B -> Col Y C D -> A <> B -> C <> D -> ~ Col Y A C -> ~ parallel A B C D.

*****

*****
forall (A B C D Y : Point) (_ : Col Y A B) (_ : Col Y C D) (_ : not (eq A B)) (_ : not (eq C D)) (_ : not (Col Y A C)), not (parallel A B C D)
+++++
Proof.
-----
Theorem common_point_not_par : forall A B C D Y : Point, Col Y A B -> Col Y C D -> A <> B -> C <> D -> ~ Col Y A C -> ~ parallel A B C D.
Proof.

*****

*****
forall (A B C D Y : Point) (_ : Col Y A B) (_ : Col Y C D) (_ : not (eq A B)) (_ : not (eq C D)) (_ : not (Col Y A C)), not (parallel A B C D)
+++++
intros.
-----
Theorem common_point_not_par : forall A B C D Y : Point, Col Y A B -> Col Y C D -> A <> B -> C <> D -> ~ Col Y A C -> ~ parallel A B C D.
Proof.
intros.

*****
H3 : not (Col Y A C)
H2 : not (eq C D)
H1 : not (eq A B)
H0 : Col Y C D
H : Col Y A B
A,B,C,D,Y : Point
*****
not (parallel A B C D)
+++++
cases_col D A B.
-----
Theorem common_point_not_par : forall A B C D Y : Point, Col Y A B -> Col Y C D -> A <> B -> C <> D -> ~ Col Y A C -> ~ parallel A B C D.
Proof.
intros.
cases_col D A B.

*****
H4 : Col D A B
H3 : not (Col Y A C)
H2 : not (eq C D)
H1 : not (eq A B)
H0 : Col Y C D
H : Col Y A B
A,B,C,D,Y : Point
*****
not (parallel A B C D)
+++++
unfold parallel in |- *.
-----
Theorem common_point_not_par : forall A B C D Y : Point, Col Y A B -> Col Y C D -> A <> B -> C <> D -> ~ Col Y A C -> ~ parallel A B C D.
Proof.
intros.
cases_col D A B.
unfold parallel in |- *.

*****
H4 : Col D A B
H3 : not (Col Y A C)
H2 : not (eq C D)
H1 : not (eq A B)
H0 : Col Y C D
H : Col Y A B
A,B,C,D,Y : Point
*****
not (eq (S4 A C B D) F0)
+++++
unfold S4 in |- *.
-----
Theorem common_point_not_par : forall A B C D Y : Point, Col Y A B -> Col Y C D -> A <> B -> C <> D -> ~ Col Y A C -> ~ parallel A B C D.
Proof.
intros.
cases_col D A B.
unfold parallel in |- *.
unfold S4 in |- *.

*****
H4 : Col D A B
H3 : not (Col Y A C)
H2 : not (eq C D)
H1 : not (eq A B)
H0 : Col Y C D
H : Col Y A B
A,B,C,D,Y : Point
*****
not (eq (Fplus (S A C B) (S A B D)) F0)
+++++
cut (Y = D).
-----
Theorem common_point_not_par : forall A B C D Y : Point, Col Y A B -> Col Y C D -> A <> B -> C <> D -> ~ Col Y A C -> ~ parallel A B C D.
Proof.
intros.
cases_col D A B.
unfold parallel in |- *.
unfold S4 in |- *.
cut (Y = D).

*****
H4 : Col D A B
H3 : not (Col Y A C)
H2 : not (eq C D)
H1 : not (eq A B)
H0 : Col Y C D
H : Col Y A B
A,B,C,D,Y : Point
*****
forall _ : eq Y D, not (eq (Fplus (S A C B) (S A B D)) F0)
+++++
intro.
-----
Theorem common_point_not_par : forall A B C D Y : Point, Col Y A B -> Col Y C D -> A <> B -> C <> D -> ~ Col Y A C -> ~ parallel A B C D.
Proof.
intros.
cases_col D A B.
unfold parallel in |- *.
unfold S4 in |- *.
cut (Y = D).
intro.

*****
H5 : eq Y D
H4 : Col D A B
H3 : not (Col Y A C)
H2 : not (eq C D)
H1 : not (eq A B)
H0 : Col Y C D
H : Col Y A B
A,B,C,D,Y : Point
*****
not (eq (Fplus (S A C B) (S A B D)) F0)
+++++
assert (S A B D = S D A B).
-----
Theorem common_point_not_par : forall A B C D Y : Point, Col Y A B -> Col Y C D -> A <> B -> C <> D -> ~ Col Y A C -> ~ parallel A B C D.
Proof.
intros.
cases_col D A B.
unfold parallel in |- *.
unfold S4 in |- *.
cut (Y = D).
intro.
assert (S A B D = S D A B).

*****
H5 : eq Y D
H4 : Col D A B
H3 : not (Col Y A C)
H2 : not (eq C D)
H1 : not (eq A B)
H0 : Col Y C D
H : Col Y A B
A,B,C,D,Y : Point
*****
eq (S A B D) (S D A B)
+++++
Geometry.
-----
Theorem common_point_not_par : forall A B C D Y : Point, Col Y A B -> Col Y C D -> A <> B -> C <> D -> ~ Col Y A C -> ~ parallel A B C D.
Proof.
intros.
cases_col D A B.
unfold parallel in |- *.
unfold S4 in |- *.
cut (Y = D).
intro.
assert (S A B D = S D A B).

*****
H6 : eq (S A B D) (S D A B)
H5 : eq Y D
H4 : Col D A B
H3 : not (Col Y A C)
H2 : not (eq C D)
H1 : not (eq A B)
H0 : Col Y C D
H : Col Y A B
A,B,C,D,Y : Point
*****
not (eq (Fplus (S A C B) (S A B D)) F0)
+++++
Geometry.
-----
Theorem common_point_not_par : forall A B C D Y : Point, Col Y A B -> Col Y C D -> A <> B -> C <> D -> ~ Col Y A C -> ~ parallel A B C D.
Proof.
intros.
cases_col D A B.
unfold parallel in |- *.
unfold S4 in |- *.
cut (Y = D).
intro.
assert (S A B D = S D A B).
Geometry.

*****
H6 : eq (S A B D) (S D A B)
H5 : eq Y D
H4 : Col D A B
H3 : not (Col Y A C)
H2 : not (eq C D)
H1 : not (eq A B)
H0 : Col Y C D
H : Col Y A B
A,B,C,D,Y : Point
*****
not (eq (Fplus (S A C B) (S A B D)) F0)
+++++
rewrite H6.
-----
Theorem common_point_not_par : forall A B C D Y : Point, Col Y A B -> Col Y C D -> A <> B -> C <> D -> ~ Col Y A C -> ~ parallel A B C D.
Proof.
intros.
cases_col D A B.
unfold parallel in |- *.
unfold S4 in |- *.
cut (Y = D).
intro.
assert (S A B D = S D A B).
Geometry.
rewrite H6.

*****
H6 : eq (S A B D) (S D A B)
H5 : eq Y D
H4 : Col D A B
H3 : not (Col Y A C)
H2 : not (eq C D)
H1 : not (eq A B)
H0 : Col Y C D
H : Col Y A B
A,B,C,D,Y : Point
*****
not (eq (Fplus (S A C B) (S D A B)) F0)
+++++
rewrite H4.
-----
Theorem common_point_not_par : forall A B C D Y : Point, Col Y A B -> Col Y C D -> A <> B -> C <> D -> ~ Col Y A C -> ~ parallel A B C D.
Proof.
intros.
cases_col D A B.
unfold parallel in |- *.
unfold S4 in |- *.
cut (Y = D).
intro.
assert (S A B D = S D A B).
Geometry.
rewrite H6.
rewrite H4.

*****
H6 : eq (S A B D) (S D A B)
H5 : eq Y D
H4 : Col D A B
H3 : not (Col Y A C)
H2 : not (eq C D)
H1 : not (eq A B)
H0 : Col Y C D
H : Col Y A B
A,B,C,D,Y : Point
*****
not (eq (Fplus (S A C B) F0) F0)
+++++
unfold not in |- *.
-----
Theorem common_point_not_par : forall A B C D Y : Point, Col Y A B -> Col Y C D -> A <> B -> C <> D -> ~ Col Y A C -> ~ parallel A B C D.
Proof.
intros.
cases_col D A B.
unfold parallel in |- *.
unfold S4 in |- *.
cut (Y = D).
intro.
assert (S A B D = S D A B).
Geometry.
rewrite H6.
rewrite H4.
unfold not in |- *.

*****
H6 : eq (S A B D) (S D A B)
H5 : eq Y D
H4 : Col D A B
H3 : not (Col Y A C)
H2 : not (eq C D)
H1 : not (eq A B)
H0 : Col Y C D
H : Col Y A B
A,B,C,D,Y : Point
*****
forall _ : eq (Fplus (S A C B) F0) F0, False
+++++
intro.
-----
Theorem common_point_not_par : forall A B C D Y : Point, Col Y A B -> Col Y C D -> A <> B -> C <> D -> ~ Col Y A C -> ~ parallel A B C D.
Proof.
intros.
cases_col D A B.
unfold parallel in |- *.
unfold S4 in |- *.
cut (Y = D).
intro.
assert (S A B D = S D A B).
Geometry.
rewrite H6.
rewrite H4.
unfold not in |- *.
intro.

*****
H7 : eq (Fplus (S A C B) F0) F0
H6 : eq (S A B D) (S D A B)
H5 : eq Y D
H4 : Col D A B
H3 : not (Col Y A C)
H2 : not (eq C D)
H1 : not (eq A B)
H0 : Col Y C D
H : Col Y A B
A,B,C,D,Y : Point
*****
False
+++++
NormalizeRing H7.
-----
Theorem common_point_not_par : forall A B C D Y : Point, Col Y A B -> Col Y C D -> A <> B -> C <> D -> ~ Col Y A C -> ~ parallel A B C D.
Proof.
intros.
cases_col D A B.
unfold parallel in |- *.
unfold S4 in |- *.
cut (Y = D).
intro.
assert (S A B D = S D A B).
Geometry.
rewrite H6.
rewrite H4.
unfold not in |- *.
intro.
NormalizeRing H7.

*****
H7 : eq (S A C B) F0
H6 : eq (S A B D) (S D A B)
H5 : eq Y D
H4 : Col D A B
H3 : not (Col Y A C)
H2 : not (eq C D)
H1 : not (eq A B)
H0 : Col Y C D
H : Col Y A B
A,B,C,D,Y : Point
*****
False
+++++
clear H H0.
-----
Theorem common_point_not_par : forall A B C D Y : Point, Col Y A B -> Col Y C D -> A <> B -> C <> D -> ~ Col Y A C -> ~ parallel A B C D.
Proof.
intros.
cases_col D A B.
unfold parallel in |- *.
unfold S4 in |- *.
cut (Y = D).
intro.
assert (S A B D = S D A B).
Geometry.
rewrite H6.
rewrite H4.
unfold not in |- *.
intro.
NormalizeRing H7.
clear H H0.

*****
H7 : eq (S A C B) F0
H6 : eq (S A B D) (S D A B)
H5 : eq Y D
H4 : Col D A B
H3 : not (Col Y A C)
H2 : not (eq C D)
H1 : not (eq A B)
A,B,C,D,Y : Point
*****
False
+++++
rewrite H5 in H3.
-----
Theorem common_point_not_par : forall A B C D Y : Point, Col Y A B -> Col Y C D -> A <> B -> C <> D -> ~ Col Y A C -> ~ parallel A B C D.
Proof.
intros.
cases_col D A B.
unfold parallel in |- *.
unfold S4 in |- *.
cut (Y = D).
intro.
assert (S A B D = S D A B).
Geometry.
rewrite H6.
rewrite H4.
unfold not in |- *.
intro.
NormalizeRing H7.
clear H H0.
rewrite H5 in H3.

*****
H7 : eq (S A C B) F0
H6 : eq (S A B D) (S D A B)
H5 : eq Y D
H4 : Col D A B
H3 : not (Col D A C)
H2 : not (eq C D)
H1 : not (eq A B)
A,B,C,D,Y : Point
*****
False
+++++
clear H5.
-----
Theorem common_point_not_par : forall A B C D Y : Point, Col Y A B -> Col Y C D -> A <> B -> C <> D -> ~ Col Y A C -> ~ parallel A B C D.
Proof.
intros.
cases_col D A B.
unfold parallel in |- *.
unfold S4 in |- *.
cut (Y = D).
intro.
assert (S A B D = S D A B).
Geometry.
rewrite H6.
rewrite H4.
unfold not in |- *.
intro.
NormalizeRing H7.
clear H H0.
rewrite H5 in H3.
clear H5.

*****
H7 : eq (S A C B) F0
H6 : eq (S A B D) (S D A B)
H4 : Col D A B
H3 : not (Col D A C)
H2 : not (eq C D)
H1 : not (eq A B)
A,B,C,D,Y : Point
*****
False
+++++
clear H6.
-----
Theorem common_point_not_par : forall A B C D Y : Point, Col Y A B -> Col Y C D -> A <> B -> C <> D -> ~ Col Y A C -> ~ parallel A B C D.
Proof.
intros.
cases_col D A B.
unfold parallel in |- *.
unfold S4 in |- *.
cut (Y = D).
intro.
assert (S A B D = S D A B).
Geometry.
rewrite H6.
rewrite H4.
unfold not in |- *.
intro.
NormalizeRing H7.
clear H H0.
rewrite H5 in H3.
clear H5.
clear H6.

*****
H7 : eq (S A C B) F0
H4 : Col D A B
H3 : not (Col D A C)
H2 : not (eq C D)
H1 : not (eq A B)
A,B,C,D,Y : Point
*****
False
+++++
assert (Col A B D).
-----
Theorem common_point_not_par : forall A B C D Y : Point, Col Y A B -> Col Y C D -> A <> B -> C <> D -> ~ Col Y A C -> ~ parallel A B C D.
Proof.
intros.
cases_col D A B.
unfold parallel in |- *.
unfold S4 in |- *.
cut (Y = D).
intro.
assert (S A B D = S D A B).
Geometry.
rewrite H6.
rewrite H4.
unfold not in |- *.
intro.
NormalizeRing H7.
clear H H0.
rewrite H5 in H3.
clear H5.
clear H6.
assert (Col A B D).

*****
H7 : eq (S A C B) F0
H4 : Col D A B
H3 : not (Col D A C)
H2 : not (eq C D)
H1 : not (eq A B)
A,B,C,D,Y : Point
*****
Col A B D
+++++
Geometry.
-----
Theorem common_point_not_par : forall A B C D Y : Point, Col Y A B -> Col Y C D -> A <> B -> C <> D -> ~ Col Y A C -> ~ parallel A B C D.
Proof.
intros.
cases_col D A B.
unfold parallel in |- *.
unfold S4 in |- *.
cut (Y = D).
intro.
assert (S A B D = S D A B).
Geometry.
rewrite H6.
rewrite H4.
unfold not in |- *.
intro.
NormalizeRing H7.
clear H H0.
rewrite H5 in H3.
clear H5.
clear H6.
assert (Col A B D).

*****
H : Col A B D
H7 : eq (S A C B) F0
H4 : Col D A B
H3 : not (Col D A C)
H2 : not (eq C D)
H1 : not (eq A B)
A,B,C,D,Y : Point
*****
False
+++++
Geometry.
-----
Theorem common_point_not_par : forall A B C D Y : Point, Col Y A B -> Col Y C D -> A <> B -> C <> D -> ~ Col Y A C -> ~ parallel A B C D.
Proof.
intros.
cases_col D A B.
unfold parallel in |- *.
unfold S4 in |- *.
cut (Y = D).
intro.
assert (S A B D = S D A B).
Geometry.
rewrite H6.
rewrite H4.
unfold not in |- *.
intro.
NormalizeRing H7.
clear H H0.
rewrite H5 in H3.
clear H5.
clear H6.
assert (Col A B D).
Geometry.

*****
H : Col A B D
H7 : eq (S A C B) F0
H4 : Col D A B
H3 : not (Col D A C)
H2 : not (eq C D)
H1 : not (eq A B)
A,B,C,D,Y : Point
*****
False
+++++
assert (Col A B C).
-----
Theorem common_point_not_par : forall A B C D Y : Point, Col Y A B -> Col Y C D -> A <> B -> C <> D -> ~ Col Y A C -> ~ parallel A B C D.
Proof.
intros.
cases_col D A B.
unfold parallel in |- *.
unfold S4 in |- *.
cut (Y = D).
intro.
assert (S A B D = S D A B).
Geometry.
rewrite H6.
rewrite H4.
unfold not in |- *.
intro.
NormalizeRing H7.
clear H H0.
rewrite H5 in H3.
clear H5.
clear H6.
assert (Col A B D).
Geometry.
assert (Col A B C).

*****
H : Col A B D
H7 : eq (S A C B) F0
H4 : Col D A B
H3 : not (Col D A C)
H2 : not (eq C D)
H1 : not (eq A B)
A,B,C,D,Y : Point
*****
Col A B C
+++++
Geometry.
-----
Theorem common_point_not_par : forall A B C D Y : Point, Col Y A B -> Col Y C D -> A <> B -> C <> D -> ~ Col Y A C -> ~ parallel A B C D.
Proof.
intros.
cases_col D A B.
unfold parallel in |- *.
unfold S4 in |- *.
cut (Y = D).
intro.
assert (S A B D = S D A B).
Geometry.
rewrite H6.
rewrite H4.
unfold not in |- *.
intro.
NormalizeRing H7.
clear H H0.
rewrite H5 in H3.
clear H5.
clear H6.
assert (Col A B D).
Geometry.
assert (Col A B C).

*****
H0 : Col A B C
H : Col A B D
H7 : eq (S A C B) F0
H4 : Col D A B
H3 : not (Col D A C)
H2 : not (eq C D)
H1 : not (eq A B)
A,B,C,D,Y : Point
*****
False
+++++
Geometry.
-----
Theorem common_point_not_par : forall A B C D Y : Point, Col Y A B -> Col Y C D -> A <> B -> C <> D -> ~ Col Y A C -> ~ parallel A B C D.
Proof.
intros.
cases_col D A B.
unfold parallel in |- *.
unfold S4 in |- *.
cut (Y = D).
intro.
assert (S A B D = S D A B).
Geometry.
rewrite H6.
rewrite H4.
unfold not in |- *.
intro.
NormalizeRing H7.
clear H H0.
rewrite H5 in H3.
clear H5.
clear H6.
assert (Col A B D).
Geometry.
assert (Col A B C).
Geometry.

*****
H0 : Col A B C
H : Col A B D
H7 : eq (S A C B) F0
H4 : Col D A B
H3 : not (Col D A C)
H2 : not (eq C D)
H1 : not (eq A B)
A,B,C,D,Y : Point
*****
False
+++++
assert (Col A D C).
-----
Theorem common_point_not_par : forall A B C D Y : Point, Col Y A B -> Col Y C D -> A <> B -> C <> D -> ~ Col Y A C -> ~ parallel A B C D.
Proof.
intros.
cases_col D A B.
unfold parallel in |- *.
unfold S4 in |- *.
cut (Y = D).
intro.
assert (S A B D = S D A B).
Geometry.
rewrite H6.
rewrite H4.
unfold not in |- *.
intro.
NormalizeRing H7.
clear H H0.
rewrite H5 in H3.
clear H5.
clear H6.
assert (Col A B D).
Geometry.
assert (Col A B C).
Geometry.
assert (Col A D C).

*****
H0 : Col A B C
H : Col A B D
H7 : eq (S A C B) F0
H4 : Col D A B
H3 : not (Col D A C)
H2 : not (eq C D)
H1 : not (eq A B)
A,B,C,D,Y : Point
*****
Col A D C
+++++
eauto with Geom.
-----
Theorem common_point_not_par : forall A B C D Y : Point, Col Y A B -> Col Y C D -> A <> B -> C <> D -> ~ Col Y A C -> ~ parallel A B C D.
Proof.
intros.
cases_col D A B.
unfold parallel in |- *.
unfold S4 in |- *.
cut (Y = D).
intro.
assert (S A B D = S D A B).
Geometry.
rewrite H6.
rewrite H4.
unfold not in |- *.
intro.
NormalizeRing H7.
clear H H0.
rewrite H5 in H3.
clear H5.
clear H6.
assert (Col A B D).
Geometry.
assert (Col A B C).
Geometry.
assert (Col A D C).

*****
H5 : Col A D C
H0 : Col A B C
H : Col A B D
H7 : eq (S A C B) F0
H4 : Col D A B
H3 : not (Col D A C)
H2 : not (eq C D)
H1 : not (eq A B)
A,B,C,D,Y : Point
*****
False
+++++
eauto with Geom.
-----
Theorem common_point_not_par : forall A B C D Y : Point, Col Y A B -> Col Y C D -> A <> B -> C <> D -> ~ Col Y A C -> ~ parallel A B C D.
Proof.
intros.
cases_col D A B.
unfold parallel in |- *.
unfold S4 in |- *.
cut (Y = D).

*****
H4 : Col D A B
H3 : not (Col Y A C)
H2 : not (eq C D)
H1 : not (eq A B)
H0 : Col Y C D
H : Col Y A B
A,B,C,D,Y : Point
*****
eq Y D
+++++
assert (Col A B Y).
-----
Theorem common_point_not_par : forall A B C D Y : Point, Col Y A B -> Col Y C D -> A <> B -> C <> D -> ~ Col Y A C -> ~ parallel A B C D.
Proof.
intros.
cases_col D A B.
unfold parallel in |- *.
unfold S4 in |- *.
cut (Y = D).
assert (Col A B Y).

*****
H4 : Col D A B
H3 : not (Col Y A C)
H2 : not (eq C D)
H1 : not (eq A B)
H0 : Col Y C D
H : Col Y A B
A,B,C,D,Y : Point
*****
Col A B Y
+++++
Geometry.
-----
Theorem common_point_not_par : forall A B C D Y : Point, Col Y A B -> Col Y C D -> A <> B -> C <> D -> ~ Col Y A C -> ~ parallel A B C D.
Proof.
intros.
cases_col D A B.
unfold parallel in |- *.
unfold S4 in |- *.
cut (Y = D).
assert (Col A B Y).

*****
H5 : Col A B Y
H4 : Col D A B
H3 : not (Col Y A C)
H2 : not (eq C D)
H1 : not (eq A B)
H0 : Col Y C D
H : Col Y A B
A,B,C,D,Y : Point
*****
eq Y D
+++++
Geometry.
-----
Theorem common_point_not_par : forall A B C D Y : Point, Col Y A B -> Col Y C D -> A <> B -> C <> D -> ~ Col Y A C -> ~ parallel A B C D.
Proof.
intros.
cases_col D A B.
unfold parallel in |- *.
unfold S4 in |- *.
cut (Y = D).
assert (Col A B Y).
Geometry.

*****
H5 : Col A B Y
H4 : Col D A B
H3 : not (Col Y A C)
H2 : not (eq C D)
H1 : not (eq A B)
H0 : Col Y C D
H : Col Y A B
A,B,C,D,Y : Point
*****
eq Y D
+++++
assert (Col A B D).
-----
Theorem common_point_not_par : forall A B C D Y : Point, Col Y A B -> Col Y C D -> A <> B -> C <> D -> ~ Col Y A C -> ~ parallel A B C D.
Proof.
intros.
cases_col D A B.
unfold parallel in |- *.
unfold S4 in |- *.
cut (Y = D).
assert (Col A B Y).
Geometry.
assert (Col A B D).

*****
H5 : Col A B Y
H4 : Col D A B
H3 : not (Col Y A C)
H2 : not (eq C D)
H1 : not (eq A B)
H0 : Col Y C D
H : Col Y A B
A,B,C,D,Y : Point
*****
Col A B D
+++++
Geometry.
-----
Theorem common_point_not_par : forall A B C D Y : Point, Col Y A B -> Col Y C D -> A <> B -> C <> D -> ~ Col Y A C -> ~ parallel A B C D.
Proof.
intros.
cases_col D A B.
unfold parallel in |- *.
unfold S4 in |- *.
cut (Y = D).
assert (Col A B Y).
Geometry.
assert (Col A B D).

*****
H6 : Col A B D
H5 : Col A B Y
H4 : Col D A B
H3 : not (Col Y A C)
H2 : not (eq C D)
H1 : not (eq A B)
H0 : Col Y C D
H : Col Y A B
A,B,C,D,Y : Point
*****
eq Y D
+++++
Geometry.
-----
Theorem common_point_not_par : forall A B C D Y : Point, Col Y A B -> Col Y C D -> A <> B -> C <> D -> ~ Col Y A C -> ~ parallel A B C D.
Proof.
intros.
cases_col D A B.
unfold parallel in |- *.
unfold S4 in |- *.
cut (Y = D).
assert (Col A B Y).
Geometry.
assert (Col A B D).
Geometry.

*****
H6 : Col A B D
H5 : Col A B Y
H4 : Col D A B
H3 : not (Col Y A C)
H2 : not (eq C D)
H1 : not (eq A B)
H0 : Col Y C D
H : Col Y A B
A,B,C,D,Y : Point
*****
eq Y D
+++++
assert (Col A Y D).
-----
Theorem common_point_not_par : forall A B C D Y : Point, Col Y A B -> Col Y C D -> A <> B -> C <> D -> ~ Col Y A C -> ~ parallel A B C D.
Proof.
intros.
cases_col D A B.
unfold parallel in |- *.
unfold S4 in |- *.
cut (Y = D).
assert (Col A B Y).
Geometry.
assert (Col A B D).
Geometry.
assert (Col A Y D).

*****
H6 : Col A B D
H5 : Col A B Y
H4 : Col D A B
H3 : not (Col Y A C)
H2 : not (eq C D)
H1 : not (eq A B)
H0 : Col Y C D
H : Col Y A B
A,B,C,D,Y : Point
*****
Col A Y D
+++++
eauto with Geom.
-----
Theorem common_point_not_par : forall A B C D Y : Point, Col Y A B -> Col Y C D -> A <> B -> C <> D -> ~ Col Y A C -> ~ parallel A B C D.
Proof.
intros.
cases_col D A B.
unfold parallel in |- *.
unfold S4 in |- *.
cut (Y = D).
assert (Col A B Y).
Geometry.
assert (Col A B D).
Geometry.
assert (Col A Y D).

*****
H7 : Col A Y D
H6 : Col A B D
H5 : Col A B Y
H4 : Col D A B
H3 : not (Col Y A C)
H2 : not (eq C D)
H1 : not (eq A B)
H0 : Col Y C D
H : Col Y A B
A,B,C,D,Y : Point
*****
eq Y D
+++++
eauto with Geom.
-----
Theorem common_point_not_par : forall A B C D Y : Point, Col Y A B -> Col Y C D -> A <> B -> C <> D -> ~ Col Y A C -> ~ parallel A B C D.
Proof.
intros.
cases_col D A B.
unfold parallel in |- *.
unfold S4 in |- *.
cut (Y = D).
assert (Col A B Y).
Geometry.
assert (Col A B D).
Geometry.
assert (Col A Y D).
eauto with Geom.

*****
H7 : Col A Y D
H6 : Col A B D
H5 : Col A B Y
H4 : Col D A B
H3 : not (Col Y A C)
H2 : not (eq C D)
H1 : not (eq A B)
H0 : Col Y C D
H : Col Y A B
A,B,C,D,Y : Point
*****
eq Y D
+++++
assert (A <> Y).
-----
Theorem common_point_not_par : forall A B C D Y : Point, Col Y A B -> Col Y C D -> A <> B -> C <> D -> ~ Col Y A C -> ~ parallel A B C D.
Proof.
intros.
cases_col D A B.
unfold parallel in |- *.
unfold S4 in |- *.
cut (Y = D).
assert (Col A B Y).
Geometry.
assert (Col A B D).
Geometry.
assert (Col A Y D).
eauto with Geom.
assert (A <> Y).

*****
H7 : Col A Y D
H6 : Col A B D
H5 : Col A B Y
H4 : Col D A B
H3 : not (Col Y A C)
H2 : not (eq C D)
H1 : not (eq A B)
H0 : Col Y C D
H : Col Y A B
A,B,C,D,Y : Point
*****
not (eq A Y)
+++++
eauto with Geom.
-----
Theorem common_point_not_par : forall A B C D Y : Point, Col Y A B -> Col Y C D -> A <> B -> C <> D -> ~ Col Y A C -> ~ parallel A B C D.
Proof.
intros.
cases_col D A B.
unfold parallel in |- *.
unfold S4 in |- *.
cut (Y = D).
assert (Col A B Y).
Geometry.
assert (Col A B D).
Geometry.
assert (Col A Y D).
eauto with Geom.
assert (A <> Y).

*****
H8 : not (eq A Y)
H7 : Col A Y D
H6 : Col A B D
H5 : Col A B Y
H4 : Col D A B
H3 : not (Col Y A C)
H2 : not (eq C D)
H1 : not (eq A B)
H0 : Col Y C D
H : Col Y A B
A,B,C,D,Y : Point
*****
eq Y D
+++++
eauto with Geom.
-----
Theorem common_point_not_par : forall A B C D Y : Point, Col Y A B -> Col Y C D -> A <> B -> C <> D -> ~ Col Y A C -> ~ parallel A B C D.
Proof.
intros.
cases_col D A B.
unfold parallel in |- *.
unfold S4 in |- *.
cut (Y = D).
assert (Col A B Y).
Geometry.
assert (Col A B D).
Geometry.
assert (Col A Y D).
eauto with Geom.
assert (A <> Y).
eauto with Geom.

*****
H8 : not (eq A Y)
H7 : Col A Y D
H6 : Col A B D
H5 : Col A B Y
H4 : Col D A B
H3 : not (Col Y A C)
H2 : not (eq C D)
H1 : not (eq A B)
H0 : Col Y C D
H : Col Y A B
A,B,C,D,Y : Point
*****
eq Y D
+++++
cases_equality Y D.
-----
Theorem common_point_not_par : forall A B C D Y : Point, Col Y A B -> Col Y C D -> A <> B -> C <> D -> ~ Col Y A C -> ~ parallel A B C D.
Proof.
intros.
cases_col D A B.
unfold parallel in |- *.
unfold S4 in |- *.
cut (Y = D).
assert (Col A B Y).
Geometry.
assert (Col A B D).
Geometry.
assert (Col A Y D).
eauto with Geom.
assert (A <> Y).
eauto with Geom.
cases_equality Y D.

*****
H9 : eq Y D
H8 : not (eq A Y)
H7 : Col A Y D
H6 : Col A B D
H5 : Col A B Y
H4 : Col D A B
H3 : not (Col Y A C)
H2 : not (eq C D)
H1 : not (eq A B)
H0 : Col Y C D
H : Col Y A B
A,B,C,D,Y : Point
*****
eq Y D
+++++
auto.
-----
Theorem common_point_not_par : forall A B C D Y : Point, Col Y A B -> Col Y C D -> A <> B -> C <> D -> ~ Col Y A C -> ~ parallel A B C D.
Proof.
intros.
cases_col D A B.
unfold parallel in |- *.
unfold S4 in |- *.
cut (Y = D).
assert (Col A B Y).
Geometry.
assert (Col A B D).
Geometry.
assert (Col A Y D).
eauto with Geom.
assert (A <> Y).
eauto with Geom.
cases_equality Y D.

*****
H9 : not (eq Y D)
H8 : not (eq A Y)
H7 : Col A Y D
H6 : Col A B D
H5 : Col A B Y
H4 : Col D A B
H3 : not (Col Y A C)
H2 : not (eq C D)
H1 : not (eq A B)
H0 : Col Y C D
H : Col Y A B
A,B,C,D,Y : Point
*****
eq Y D
+++++
assert (Col Y D A).
-----
Theorem common_point_not_par : forall A B C D Y : Point, Col Y A B -> Col Y C D -> A <> B -> C <> D -> ~ Col Y A C -> ~ parallel A B C D.
Proof.
intros.
cases_col D A B.
unfold parallel in |- *.
unfold S4 in |- *.
cut (Y = D).
assert (Col A B Y).
Geometry.
assert (Col A B D).
Geometry.
assert (Col A Y D).
eauto with Geom.
assert (A <> Y).
eauto with Geom.
cases_equality Y D.
assert (Col Y D A).

*****
H9 : not (eq Y D)
H8 : not (eq A Y)
H7 : Col A Y D
H6 : Col A B D
H5 : Col A B Y
H4 : Col D A B
H3 : not (Col Y A C)
H2 : not (eq C D)
H1 : not (eq A B)
H0 : Col Y C D
H : Col Y A B
A,B,C,D,Y : Point
*****
Col Y D A
+++++
Geometry.
-----
Theorem common_point_not_par : forall A B C D Y : Point, Col Y A B -> Col Y C D -> A <> B -> C <> D -> ~ Col Y A C -> ~ parallel A B C D.
Proof.
intros.
cases_col D A B.
unfold parallel in |- *.
unfold S4 in |- *.
cut (Y = D).
assert (Col A B Y).
Geometry.
assert (Col A B D).
Geometry.
assert (Col A Y D).
eauto with Geom.
assert (A <> Y).
eauto with Geom.
cases_equality Y D.
assert (Col Y D A).

*****
H10 : Col Y D A
H9 : not (eq Y D)
H8 : not (eq A Y)
H7 : Col A Y D
H6 : Col A B D
H5 : Col A B Y
H4 : Col D A B
H3 : not (Col Y A C)
H2 : not (eq C D)
H1 : not (eq A B)
H0 : Col Y C D
H : Col Y A B
A,B,C,D,Y : Point
*****
eq Y D
+++++
Geometry.
-----
Theorem common_point_not_par : forall A B C D Y : Point, Col Y A B -> Col Y C D -> A <> B -> C <> D -> ~ Col Y A C -> ~ parallel A B C D.
Proof.
intros.
cases_col D A B.
unfold parallel in |- *.
unfold S4 in |- *.
cut (Y = D).
assert (Col A B Y).
Geometry.
assert (Col A B D).
Geometry.
assert (Col A Y D).
eauto with Geom.
assert (A <> Y).
eauto with Geom.
cases_equality Y D.
assert (Col Y D A).
Geometry.

*****
H10 : Col Y D A
H9 : not (eq Y D)
H8 : not (eq A Y)
H7 : Col A Y D
H6 : Col A B D
H5 : Col A B Y
H4 : Col D A B
H3 : not (Col Y A C)
H2 : not (eq C D)
H1 : not (eq A B)
H0 : Col Y C D
H : Col Y A B
A,B,C,D,Y : Point
*****
eq Y D
+++++
assert (Col Y D C).
-----
Theorem common_point_not_par : forall A B C D Y : Point, Col Y A B -> Col Y C D -> A <> B -> C <> D -> ~ Col Y A C -> ~ parallel A B C D.
Proof.
intros.
cases_col D A B.
unfold parallel in |- *.
unfold S4 in |- *.
cut (Y = D).
assert (Col A B Y).
Geometry.
assert (Col A B D).
Geometry.
assert (Col A Y D).
eauto with Geom.
assert (A <> Y).
eauto with Geom.
cases_equality Y D.
assert (Col Y D A).
Geometry.
assert (Col Y D C).

*****
H10 : Col Y D A
H9 : not (eq Y D)
H8 : not (eq A Y)
H7 : Col A Y D
H6 : Col A B D
H5 : Col A B Y
H4 : Col D A B
H3 : not (Col Y A C)
H2 : not (eq C D)
H1 : not (eq A B)
H0 : Col Y C D
H : Col Y A B
A,B,C,D,Y : Point
*****
Col Y D C
+++++
Geometry.
-----
Theorem common_point_not_par : forall A B C D Y : Point, Col Y A B -> Col Y C D -> A <> B -> C <> D -> ~ Col Y A C -> ~ parallel A B C D.
Proof.
intros.
cases_col D A B.
unfold parallel in |- *.
unfold S4 in |- *.
cut (Y = D).
assert (Col A B Y).
Geometry.
assert (Col A B D).
Geometry.
assert (Col A Y D).
eauto with Geom.
assert (A <> Y).
eauto with Geom.
cases_equality Y D.
assert (Col Y D A).
Geometry.
assert (Col Y D C).

*****
H11 : Col Y D C
H10 : Col Y D A
H9 : not (eq Y D)
H8 : not (eq A Y)
H7 : Col A Y D
H6 : Col A B D
H5 : Col A B Y
H4 : Col D A B
H3 : not (Col Y A C)
H2 : not (eq C D)
H1 : not (eq A B)
H0 : Col Y C D
H : Col Y A B
A,B,C,D,Y : Point
*****
eq Y D
+++++
Geometry.
-----
Theorem common_point_not_par : forall A B C D Y : Point, Col Y A B -> Col Y C D -> A <> B -> C <> D -> ~ Col Y A C -> ~ parallel A B C D.
Proof.
intros.
cases_col D A B.
unfold parallel in |- *.
unfold S4 in |- *.
cut (Y = D).
assert (Col A B Y).
Geometry.
assert (Col A B D).
Geometry.
assert (Col A Y D).
eauto with Geom.
assert (A <> Y).
eauto with Geom.
cases_equality Y D.
assert (Col Y D A).
Geometry.
assert (Col Y D C).
Geometry.

*****
H11 : Col Y D C
H10 : Col Y D A
H9 : not (eq Y D)
H8 : not (eq A Y)
H7 : Col A Y D
H6 : Col A B D
H5 : Col A B Y
H4 : Col D A B
H3 : not (Col Y A C)
H2 : not (eq C D)
H1 : not (eq A B)
H0 : Col Y C D
H : Col Y A B
A,B,C,D,Y : Point
*****
eq Y D
+++++
assert (Col Y A C).
-----
Theorem common_point_not_par : forall A B C D Y : Point, Col Y A B -> Col Y C D -> A <> B -> C <> D -> ~ Col Y A C -> ~ parallel A B C D.
Proof.
intros.
cases_col D A B.
unfold parallel in |- *.
unfold S4 in |- *.
cut (Y = D).
assert (Col A B Y).
Geometry.
assert (Col A B D).
Geometry.
assert (Col A Y D).
eauto with Geom.
assert (A <> Y).
eauto with Geom.
cases_equality Y D.
assert (Col Y D A).
Geometry.
assert (Col Y D C).
Geometry.
assert (Col Y A C).

*****
H11 : Col Y D C
H10 : Col Y D A
H9 : not (eq Y D)
H8 : not (eq A Y)
H7 : Col A Y D
H6 : Col A B D
H5 : Col A B Y
H4 : Col D A B
H3 : not (Col Y A C)
H2 : not (eq C D)
H1 : not (eq A B)
H0 : Col Y C D
H : Col Y A B
A,B,C,D,Y : Point
*****
Col Y A C
+++++
eauto with Geom.
-----
Theorem common_point_not_par : forall A B C D Y : Point, Col Y A B -> Col Y C D -> A <> B -> C <> D -> ~ Col Y A C -> ~ parallel A B C D.
Proof.
intros.
cases_col D A B.
unfold parallel in |- *.
unfold S4 in |- *.
cut (Y = D).
assert (Col A B Y).
Geometry.
assert (Col A B D).
Geometry.
assert (Col A Y D).
eauto with Geom.
assert (A <> Y).
eauto with Geom.
cases_equality Y D.
assert (Col Y D A).
Geometry.
assert (Col Y D C).
Geometry.
assert (Col Y A C).

*****
H12 : Col Y A C
H11 : Col Y D C
H10 : Col Y D A
H9 : not (eq Y D)
H8 : not (eq A Y)
H7 : Col A Y D
H6 : Col A B D
H5 : Col A B Y
H4 : Col D A B
H3 : not (Col Y A C)
H2 : not (eq C D)
H1 : not (eq A B)
H0 : Col Y C D
H : Col Y A B
A,B,C,D,Y : Point
*****
eq Y D
+++++
eauto with Geom.
-----
Theorem common_point_not_par : forall A B C D Y : Point, Col Y A B -> Col Y C D -> A <> B -> C <> D -> ~ Col Y A C -> ~ parallel A B C D.
Proof.
intros.
cases_col D A B.
unfold parallel in |- *.
unfold S4 in |- *.
cut (Y = D).
assert (Col A B Y).
Geometry.
assert (Col A B D).
Geometry.
assert (Col A Y D).
eauto with Geom.
assert (A <> Y).
eauto with Geom.
cases_equality Y D.
assert (Col Y D A).
Geometry.
assert (Col Y D C).
Geometry.
assert (Col Y A C).
eauto with Geom.

*****
H12 : Col Y A C
H11 : Col Y D C
H10 : Col Y D A
H9 : not (eq Y D)
H8 : not (eq A Y)
H7 : Col A Y D
H6 : Col A B D
H5 : Col A B Y
H4 : Col D A B
H3 : not (Col Y A C)
H2 : not (eq C D)
H1 : not (eq A B)
H0 : Col Y C D
H : Col Y A B
A,B,C,D,Y : Point
*****
eq Y D
+++++
intuition.
-----
Theorem common_point_not_par : forall A B C D Y : Point, Col Y A B -> Col Y C D -> A <> B -> C <> D -> ~ Col Y A C -> ~ parallel A B C D.
Proof.
intros.
cases_col D A B.

*****
H4 : not (Col D A B)
H3 : not (Col Y A C)
H2 : not (eq C D)
H1 : not (eq A B)
H0 : Col Y C D
H : Col Y A B
A,B,C,D,Y : Point
*****
not (parallel A B C D)
+++++
eapply common_point_not_par_aux; apply H || auto.
-----
Theorem common_point_not_par : forall A B C D Y : Point, Col Y A B -> Col Y C D -> A <> B -> C <> D -> ~ Col Y A C -> ~ parallel A B C D.
Proof.
intros.
cases_col D A B.

*****

*****

+++++
Qed.
-----
Definition parallelogram (A B C D : Point) : Prop :=\n  parallel A B C D /\ parallel B C A D /\ ~ Col A B C.
-----
Theorem l1_24 :\n forall A B C D O : Point,\n parallelogram A B C D -> \n Col A C O -> \n Col B D O -> \n A ** O = O ** C.
-----
Theorem l1_24 : forall A B C D O : Point, parallelogram A B C D -> Col A C O -> Col B D O -> A ** O = O ** C.

*****

*****
forall (A B C D O : Point) (_ : parallelogram A B C D) (_ : Col A C O) (_ : Col B D O), eq (DSeg A O) (DSeg O C)
+++++
Proof.
-----
Theorem l1_24 : forall A B C D O : Point, parallelogram A B C D -> Col A C O -> Col B D O -> A ** O = O ** C.
Proof.

*****

*****
forall (A B C D O : Point) (_ : parallelogram A B C D) (_ : Col A C O) (_ : Col B D O), eq (DSeg A O) (DSeg O C)
+++++
intros.
-----
Theorem l1_24 : forall A B C D O : Point, parallelogram A B C D -> Col A C O -> Col B D O -> A ** O = O ** C.
Proof.
intros.

*****
H1 : Col B D O
H0 : Col A C O
H : parallelogram A B C D
A,B,C,D,O : Point
*****
eq (DSeg A O) (DSeg O C)
+++++
unfold parallelogram in H.
-----
Theorem l1_24 : forall A B C D O : Point, parallelogram A B C D -> Col A C O -> Col B D O -> A ** O = O ** C.
Proof.
intros.
unfold parallelogram in H.

*****
H1 : Col B D O
H0 : Col A C O
H : and (parallel A B C D) (and (parallel B C A D) (not (Col A B C)))
A,B,C,D,O : Point
*****
eq (DSeg A O) (DSeg O C)
+++++
DecompAndAll.
-----
Theorem l1_24 : forall A B C D O : Point, parallelogram A B C D -> Col A C O -> Col B D O -> A ** O = O ** C.
Proof.
intros.
unfold parallelogram in H.
DecompAndAll.

*****
H5 : not (Col A B C)
H4 : parallel B C A D
H2 : parallel A B C D
H1 : Col B D O
H0 : Col A C O
A,B,C,D,O : Point
*****
eq (DSeg A O) (DSeg O C)
+++++
unfold parallel in *.
-----
Theorem l1_24 : forall A B C D O : Point, parallelogram A B C D -> Col A C O -> Col B D O -> A ** O = O ** C.
Proof.
intros.
unfold parallelogram in H.
DecompAndAll.
unfold parallel in *.

*****
H5 : not (Col A B C)
H4 : eq (S4 B A C D) F0
H2 : eq (S4 A C B D) F0
H1 : Col B D O
H0 : Col A C O
A,B,C,D,O : Point
*****
eq (DSeg A O) (DSeg O C)
+++++
unfold S4 in *.
-----
Theorem l1_24 : forall A B C D O : Point, parallelogram A B C D -> Col A C O -> Col B D O -> A ** O = O ** C.
Proof.
intros.
unfold parallelogram in H.
DecompAndAll.
unfold parallel in *.
unfold S4 in *.

*****
H5 : not (Col A B C)
H4 : eq (Fplus (S B A C) (S B C D)) F0
H2 : eq (Fplus (S A C B) (S A B D)) F0
H1 : Col B D O
H0 : Col A C O
A,B,C,D,O : Point
*****
eq (DSeg A O) (DSeg O C)
+++++
assert (S A B D = S A B C).
-----
Theorem l1_24 : forall A B C D O : Point, parallelogram A B C D -> Col A C O -> Col B D O -> A ** O = O ** C.
Proof.
intros.
unfold parallelogram in H.
DecompAndAll.
unfold parallel in *.
unfold S4 in *.
assert (S A B D = S A B C).

*****
H5 : not (Col A B C)
H4 : eq (Fplus (S B A C) (S B C D)) F0
H2 : eq (Fplus (S A C B) (S A B D)) F0
H1 : Col B D O
H0 : Col A C O
A,B,C,D,O : Point
*****
eq (S A B D) (S A B C)
+++++
RewriteVar (S A B D) H2.
-----
Theorem l1_24 : forall A B C D O : Point, parallelogram A B C D -> Col A C O -> Col B D O -> A ** O = O ** C.
Proof.
intros.
unfold parallelogram in H.
DecompAndAll.
unfold parallel in *.
unfold S4 in *.
assert (S A B D = S A B C).
RewriteVar (S A B D) H2.

*****
H2 : eq (S A B D) (Fopp (S A C B))
H5 : not (Col A B C)
H4 : eq (Fplus (S B A C) (S B C D)) F0
H1 : Col B D O
H0 : Col A C O
A,B,C,D,O : Point
*****
eq (Fopp (S A C B)) (S A B C)
+++++
Geometry.
-----
Theorem l1_24 : forall A B C D O : Point, parallelogram A B C D -> Col A C O -> Col B D O -> A ** O = O ** C.
Proof.
intros.
unfold parallelogram in H.
DecompAndAll.
unfold parallel in *.
unfold S4 in *.
assert (S A B D = S A B C).

*****
H : eq (S A B D) (S A B C)
H5 : not (Col A B C)
H4 : eq (Fplus (S B A C) (S B C D)) F0
H2 : eq (Fplus (S A C B) (S A B D)) F0
H1 : Col B D O
H0 : Col A C O
A,B,C,D,O : Point
*****
eq (DSeg A O) (DSeg O C)
+++++
replace (-(1) * S A C B) with (- S A C B) by ring.
-----
Theorem l1_24 : forall A B C D O : Point, parallelogram A B C D -> Col A C O -> Col B D O -> A ** O = O ** C.
Proof.
intros.
unfold parallelogram in H.
DecompAndAll.
unfold parallel in *.
unfold S4 in *.
assert (S A B D = S A B C).
replace (-(1) * S A C B) with (- S A C B) by ring.

*****
H : eq (S A B D) (S A B C)
H5 : not (Col A B C)
H4 : eq (Fplus (S B A C) (S B C D)) F0
H2 : eq (Fplus (S A C B) (S A B D)) F0
H1 : Col B D O
H0 : Col A C O
A,B,C,D,O : Point
*****
eq (DSeg A O) (DSeg O C)
+++++
Geometry.
-----
Theorem l1_24 : forall A B C D O : Point, parallelogram A B C D -> Col A C O -> Col B D O -> A ** O = O ** C.
Proof.
intros.
unfold parallelogram in H.
DecompAndAll.
unfold parallel in *.
unfold S4 in *.
assert (S A B D = S A B C).
replace (-(1) * S A C B) with (- S A C B) by ring.
Geometry.

*****
H : eq (S A B D) (S A B C)
H5 : not (Col A B C)
H4 : eq (Fplus (S B A C) (S B C D)) F0
H2 : eq (Fplus (S A C B) (S A B D)) F0
H1 : Col B D O
H0 : Col A C O
A,B,C,D,O : Point
*****
eq (DSeg A O) (DSeg O C)
+++++
assert (S B C D = S B C A).
-----
Theorem l1_24 : forall A B C D O : Point, parallelogram A B C D -> Col A C O -> Col B D O -> A ** O = O ** C.
Proof.
intros.
unfold parallelogram in H.
DecompAndAll.
unfold parallel in *.
unfold S4 in *.
assert (S A B D = S A B C).
replace (-(1) * S A C B) with (- S A C B) by ring.
Geometry.
assert (S B C D = S B C A).

*****
H : eq (S A B D) (S A B C)
H5 : not (Col A B C)
H4 : eq (Fplus (S B A C) (S B C D)) F0
H2 : eq (Fplus (S A C B) (S A B D)) F0
H1 : Col B D O
H0 : Col A C O
A,B,C,D,O : Point
*****
eq (S B C D) (S B C A)
+++++
RewriteVar (S B C D) H4.
-----
Theorem l1_24 : forall A B C D O : Point, parallelogram A B C D -> Col A C O -> Col B D O -> A ** O = O ** C.
Proof.
intros.
unfold parallelogram in H.
DecompAndAll.
unfold parallel in *.
unfold S4 in *.
assert (S A B D = S A B C).
replace (-(1) * S A C B) with (- S A C B) by ring.
Geometry.
assert (S B C D = S B C A).
RewriteVar (S B C D) H4.

*****
H4 : eq (S B C D) (Fopp (S B A C))
H : eq (S A B D) (S A B C)
H5 : not (Col A B C)
H2 : eq (Fplus (S A C B) (S A B D)) F0
H1 : Col B D O
H0 : Col A C O
A,B,C,D,O : Point
*****
eq (Fopp (S B A C)) (S B C A)
+++++
Geometry.
-----
Theorem l1_24 : forall A B C D O : Point, parallelogram A B C D -> Col A C O -> Col B D O -> A ** O = O ** C.
Proof.
intros.
unfold parallelogram in H.
DecompAndAll.
unfold parallel in *.
unfold S4 in *.
assert (S A B D = S A B C).
replace (-(1) * S A C B) with (- S A C B) by ring.
Geometry.
assert (S B C D = S B C A).

*****
H3 : eq (S B C D) (S B C A)
H : eq (S A B D) (S A B C)
H5 : not (Col A B C)
H4 : eq (Fplus (S B A C) (S B C D)) F0
H2 : eq (Fplus (S A C B) (S A B D)) F0
H1 : Col B D O
H0 : Col A C O
A,B,C,D,O : Point
*****
eq (DSeg A O) (DSeg O C)
+++++
replace (-(1) * S B A C) with (- S B A C) by ring.
-----
Theorem l1_24 : forall A B C D O : Point, parallelogram A B C D -> Col A C O -> Col B D O -> A ** O = O ** C.
Proof.
intros.
unfold parallelogram in H.
DecompAndAll.
unfold parallel in *.
unfold S4 in *.
assert (S A B D = S A B C).
replace (-(1) * S A C B) with (- S A C B) by ring.
Geometry.
assert (S B C D = S B C A).
replace (-(1) * S B A C) with (- S B A C) by ring.

*****
H3 : eq (S B C D) (S B C A)
H : eq (S A B D) (S A B C)
H5 : not (Col A B C)
H4 : eq (Fplus (S B A C) (S B C D)) F0
H2 : eq (Fplus (S A C B) (S A B D)) F0
H1 : Col B D O
H0 : Col A C O
A,B,C,D,O : Point
*****
eq (DSeg A O) (DSeg O C)
+++++
Geometry.
-----
Theorem l1_24 : forall A B C D O : Point, parallelogram A B C D -> Col A C O -> Col B D O -> A ** O = O ** C.
Proof.
intros.
unfold parallelogram in H.
DecompAndAll.
unfold parallel in *.
unfold S4 in *.
assert (S A B D = S A B C).
replace (-(1) * S A C B) with (- S A C B) by ring.
Geometry.
assert (S B C D = S B C A).
replace (-(1) * S B A C) with (- S B A C) by ring.
Geometry.

*****
H3 : eq (S B C D) (S B C A)
H : eq (S A B D) (S A B C)
H5 : not (Col A B C)
H4 : eq (Fplus (S B A C) (S B C D)) F0
H2 : eq (Fplus (S A C B) (S A B D)) F0
H1 : Col B D O
H0 : Col A C O
A,B,C,D,O : Point
*****
eq (DSeg A O) (DSeg O C)
+++++
assert (S C B D = - S B C A).
-----
Theorem l1_24 : forall A B C D O : Point, parallelogram A B C D -> Col A C O -> Col B D O -> A ** O = O ** C.
Proof.
intros.
unfold parallelogram in H.
DecompAndAll.
unfold parallel in *.
unfold S4 in *.
assert (S A B D = S A B C).
replace (-(1) * S A C B) with (- S A C B) by ring.
Geometry.
assert (S B C D = S B C A).
replace (-(1) * S B A C) with (- S B A C) by ring.
Geometry.
assert (S C B D = - S B C A).

*****
H3 : eq (S B C D) (S B C A)
H : eq (S A B D) (S A B C)
H5 : not (Col A B C)
H4 : eq (Fplus (S B A C) (S B C D)) F0
H2 : eq (Fplus (S A C B) (S A B D)) F0
H1 : Col B D O
H0 : Col A C O
A,B,C,D,O : Point
*****
eq (S C B D) (Fopp (S B C A))
+++++
rewrite <- H3.
-----
Theorem l1_24 : forall A B C D O : Point, parallelogram A B C D -> Col A C O -> Col B D O -> A ** O = O ** C.
Proof.
intros.
unfold parallelogram in H.
DecompAndAll.
unfold parallel in *.
unfold S4 in *.
assert (S A B D = S A B C).
replace (-(1) * S A C B) with (- S A C B) by ring.
Geometry.
assert (S B C D = S B C A).
replace (-(1) * S B A C) with (- S B A C) by ring.
Geometry.
assert (S C B D = - S B C A).
rewrite <- H3.

*****
H3 : eq (S B C D) (S B C A)
H : eq (S A B D) (S A B C)
H5 : not (Col A B C)
H4 : eq (Fplus (S B A C) (S B C D)) F0
H2 : eq (Fplus (S A C B) (S A B D)) F0
H1 : Col B D O
H0 : Col A C O
A,B,C,D,O : Point
*****
eq (S C B D) (Fopp (S B C D))
+++++
Geometry.
-----
Theorem l1_24 : forall A B C D O : Point, parallelogram A B C D -> Col A C O -> Col B D O -> A ** O = O ** C.
Proof.
intros.
unfold parallelogram in H.
DecompAndAll.
unfold parallel in *.
unfold S4 in *.
assert (S A B D = S A B C).
replace (-(1) * S A C B) with (- S A C B) by ring.
Geometry.
assert (S B C D = S B C A).
replace (-(1) * S B A C) with (- S B A C) by ring.
Geometry.
assert (S C B D = - S B C A).

*****
H6 : eq (S C B D) (Fopp (S B C A))
H3 : eq (S B C D) (S B C A)
H : eq (S A B D) (S A B C)
H5 : not (Col A B C)
H4 : eq (Fplus (S B A C) (S B C D)) F0
H2 : eq (Fplus (S A C B) (S A B D)) F0
H1 : Col B D O
H0 : Col A C O
A,B,C,D,O : Point
*****
eq (DSeg A O) (DSeg O C)
+++++
assert (~ Col C B D).
-----
Theorem l1_24 : forall A B C D O : Point, parallelogram A B C D -> Col A C O -> Col B D O -> A ** O = O ** C.
Proof.
intros.
unfold parallelogram in H.
DecompAndAll.
unfold parallel in *.
unfold S4 in *.
assert (S A B D = S A B C).
replace (-(1) * S A C B) with (- S A C B) by ring.
Geometry.
assert (S B C D = S B C A).
replace (-(1) * S B A C) with (- S B A C) by ring.
Geometry.
assert (S C B D = - S B C A).
assert (~ Col C B D).

*****
H6 : eq (S C B D) (Fopp (S B C A))
H3 : eq (S B C D) (S B C A)
H : eq (S A B D) (S A B C)
H5 : not (Col A B C)
H4 : eq (Fplus (S B A C) (S B C D)) F0
H2 : eq (Fplus (S A C B) (S A B D)) F0
H1 : Col B D O
H0 : Col A C O
A,B,C,D,O : Point
*****
not (Col C B D)
+++++
unfold not in |- *.
-----
Theorem l1_24 : forall A B C D O : Point, parallelogram A B C D -> Col A C O -> Col B D O -> A ** O = O ** C.
Proof.
intros.
unfold parallelogram in H.
DecompAndAll.
unfold parallel in *.
unfold S4 in *.
assert (S A B D = S A B C).
replace (-(1) * S A C B) with (- S A C B) by ring.
Geometry.
assert (S B C D = S B C A).
replace (-(1) * S B A C) with (- S B A C) by ring.
Geometry.
assert (S C B D = - S B C A).
assert (~ Col C B D).
unfold not in |- *.

*****
H6 : eq (S C B D) (Fopp (S B C A))
H3 : eq (S B C D) (S B C A)
H : eq (S A B D) (S A B C)
H5 : not (Col A B C)
H4 : eq (Fplus (S B A C) (S B C D)) F0
H2 : eq (Fplus (S A C B) (S A B D)) F0
H1 : Col B D O
H0 : Col A C O
A,B,C,D,O : Point
*****
forall _ : Col C B D, False
+++++
intro.
-----
Theorem l1_24 : forall A B C D O : Point, parallelogram A B C D -> Col A C O -> Col B D O -> A ** O = O ** C.
Proof.
intros.
unfold parallelogram in H.
DecompAndAll.
unfold parallel in *.
unfold S4 in *.
assert (S A B D = S A B C).
replace (-(1) * S A C B) with (- S A C B) by ring.
Geometry.
assert (S B C D = S B C A).
replace (-(1) * S B A C) with (- S B A C) by ring.
Geometry.
assert (S C B D = - S B C A).
assert (~ Col C B D).
unfold not in |- *.
intro.

*****
H7 : Col C B D
H6 : eq (S C B D) (Fopp (S B C A))
H3 : eq (S B C D) (S B C A)
H : eq (S A B D) (S A B C)
H5 : not (Col A B C)
H4 : eq (Fplus (S B A C) (S B C D)) F0
H2 : eq (Fplus (S A C B) (S A B D)) F0
H1 : Col B D O
H0 : Col A C O
A,B,C,D,O : Point
*****
False
+++++
rewrite H7 in H6.
-----
Theorem l1_24 : forall A B C D O : Point, parallelogram A B C D -> Col A C O -> Col B D O -> A ** O = O ** C.
Proof.
intros.
unfold parallelogram in H.
DecompAndAll.
unfold parallel in *.
unfold S4 in *.
assert (S A B D = S A B C).
replace (-(1) * S A C B) with (- S A C B) by ring.
Geometry.
assert (S B C D = S B C A).
replace (-(1) * S B A C) with (- S B A C) by ring.
Geometry.
assert (S C B D = - S B C A).
assert (~ Col C B D).
unfold not in |- *.
intro.
rewrite H7 in H6.

*****
H7 : Col C B D
H6 : eq F0 (Fopp (S B C A))
H3 : eq (S B C D) (S B C A)
H : eq (S A B D) (S A B C)
H5 : not (Col A B C)
H4 : eq (Fplus (S B A C) (S B C D)) F0
H2 : eq (Fplus (S A C B) (S A B D)) F0
H1 : Col B D O
H0 : Col A C O
A,B,C,D,O : Point
*****
False
+++++
Geometry.
-----
Theorem l1_24 : forall A B C D O : Point, parallelogram A B C D -> Col A C O -> Col B D O -> A ** O = O ** C.
Proof.
intros.
unfold parallelogram in H.
DecompAndAll.
unfold parallel in *.
unfold S4 in *.
assert (S A B D = S A B C).
replace (-(1) * S A C B) with (- S A C B) by ring.
Geometry.
assert (S B C D = S B C A).
replace (-(1) * S B A C) with (- S B A C) by ring.
Geometry.
assert (S C B D = - S B C A).
assert (~ Col C B D).

*****
H7 : not (Col C B D)
H6 : eq (S C B D) (Fopp (S B C A))
H3 : eq (S B C D) (S B C A)
H : eq (S A B D) (S A B C)
H5 : not (Col A B C)
H4 : eq (Fplus (S B A C) (S B C D)) F0
H2 : eq (Fplus (S A C B) (S A B D)) F0
H1 : Col B D O
H0 : Col A C O
A,B,C,D,O : Point
*****
eq (DSeg A O) (DSeg O C)
+++++
assert (A ** O / C ** O = S A B D / S C B D).
-----
Theorem l1_24 : forall A B C D O : Point, parallelogram A B C D -> Col A C O -> Col B D O -> A ** O = O ** C.
Proof.
intros.
unfold parallelogram in H.
DecompAndAll.
unfold parallel in *.
unfold S4 in *.
assert (S A B D = S A B C).
replace (-(1) * S A C B) with (- S A C B) by ring.
Geometry.
assert (S B C D = S B C A).
replace (-(1) * S B A C) with (- S B A C) by ring.
Geometry.
assert (S C B D = - S B C A).
assert (~ Col C B D).
assert (A ** O / C ** O = S A B D / S C B D).

*****
H7 : not (Col C B D)
H6 : eq (S C B D) (Fopp (S B C A))
H3 : eq (S B C D) (S B C A)
H : eq (S A B D) (S A B C)
H5 : not (Col A B C)
H4 : eq (Fplus (S B A C) (S B C D)) F0
H2 : eq (Fplus (S A C B) (S A B D)) F0
H1 : Col B D O
H0 : Col A C O
A,B,C,D,O : Point
*****
eq (Fdiv (DSeg A O) (DSeg C O)) (Fdiv (S A B D) (S C B D))
+++++
apply co_side.
-----
Theorem l1_24 : forall A B C D O : Point, parallelogram A B C D -> Col A C O -> Col B D O -> A ** O = O ** C.
Proof.
intros.
unfold parallelogram in H.
DecompAndAll.
unfold parallel in *.
unfold S4 in *.
assert (S A B D = S A B C).
replace (-(1) * S A C B) with (- S A C B) by ring.
Geometry.
assert (S B C D = S B C A).
replace (-(1) * S B A C) with (- S B A C) by ring.
Geometry.
assert (S C B D = - S B C A).
assert (~ Col C B D).
assert (A ** O / C ** O = S A B D / S C B D).
apply co_side.

*****
H7 : not (Col C B D)
H6 : eq (S C B D) (Fopp (S B C A))
H3 : eq (S B C D) (S B C A)
H : eq (S A B D) (S A B C)
H5 : not (Col A B C)
H4 : eq (Fplus (S B A C) (S B C D)) F0
H2 : eq (Fplus (S A C B) (S A B D)) F0
H1 : Col B D O
H0 : Col A C O
A,B,C,D,O : Point
*****
not (Col C B D)
+++++
Geometry.
-----
Theorem l1_24 : forall A B C D O : Point, parallelogram A B C D -> Col A C O -> Col B D O -> A ** O = O ** C.
Proof.
intros.
unfold parallelogram in H.
DecompAndAll.
unfold parallel in *.
unfold S4 in *.
assert (S A B D = S A B C).
replace (-(1) * S A C B) with (- S A C B) by ring.
Geometry.
assert (S B C D = S B C A).
replace (-(1) * S B A C) with (- S B A C) by ring.
Geometry.
assert (S C B D = - S B C A).
assert (~ Col C B D).
assert (A ** O / C ** O = S A B D / S C B D).
apply co_side.

*****
H7 : not (Col C B D)
H6 : eq (S C B D) (Fopp (S B C A))
H3 : eq (S B C D) (S B C A)
H : eq (S A B D) (S A B C)
H5 : not (Col A B C)
H4 : eq (Fplus (S B A C) (S B C D)) F0
H2 : eq (Fplus (S A C B) (S A B D)) F0
H1 : Col B D O
H0 : Col A C O
A,B,C,D,O : Point
*****
not (eq C O)
+++++
Geometry.
-----
Theorem l1_24 : forall A B C D O : Point, parallelogram A B C D -> Col A C O -> Col B D O -> A ** O = O ** C.
Proof.
intros.
unfold parallelogram in H.
DecompAndAll.
unfold parallel in *.
unfold S4 in *.
assert (S A B D = S A B C).
replace (-(1) * S A C B) with (- S A C B) by ring.
Geometry.
assert (S B C D = S B C A).
replace (-(1) * S B A C) with (- S B A C) by ring.
Geometry.
assert (S C B D = - S B C A).
assert (~ Col C B D).
assert (A ** O / C ** O = S A B D / S C B D).
apply co_side.
Geometry.

*****
H7 : not (Col C B D)
H6 : eq (S C B D) (Fopp (S B C A))
H3 : eq (S B C D) (S B C A)
H : eq (S A B D) (S A B C)
H5 : not (Col A B C)
H4 : eq (Fplus (S B A C) (S B C D)) F0
H2 : eq (Fplus (S A C B) (S A B D)) F0
H1 : Col B D O
H0 : Col A C O
A,B,C,D,O : Point
*****
not (eq C O)
+++++
unfold not in |- *.
-----
Theorem l1_24 : forall A B C D O : Point, parallelogram A B C D -> Col A C O -> Col B D O -> A ** O = O ** C.
Proof.
intros.
unfold parallelogram in H.
DecompAndAll.
unfold parallel in *.
unfold S4 in *.
assert (S A B D = S A B C).
replace (-(1) * S A C B) with (- S A C B) by ring.
Geometry.
assert (S B C D = S B C A).
replace (-(1) * S B A C) with (- S B A C) by ring.
Geometry.
assert (S C B D = - S B C A).
assert (~ Col C B D).
assert (A ** O / C ** O = S A B D / S C B D).
apply co_side.
Geometry.
unfold not in |- *.

*****
H7 : not (Col C B D)
H6 : eq (S C B D) (Fopp (S B C A))
H3 : eq (S B C D) (S B C A)
H : eq (S A B D) (S A B C)
H5 : not (Col A B C)
H4 : eq (Fplus (S B A C) (S B C D)) F0
H2 : eq (Fplus (S A C B) (S A B D)) F0
H1 : Col B D O
H0 : Col A C O
A,B,C,D,O : Point
*****
forall _ : eq C O, False
+++++
intro.
-----
Theorem l1_24 : forall A B C D O : Point, parallelogram A B C D -> Col A C O -> Col B D O -> A ** O = O ** C.
Proof.
intros.
unfold parallelogram in H.
DecompAndAll.
unfold parallel in *.
unfold S4 in *.
assert (S A B D = S A B C).
replace (-(1) * S A C B) with (- S A C B) by ring.
Geometry.
assert (S B C D = S B C A).
replace (-(1) * S B A C) with (- S B A C) by ring.
Geometry.
assert (S C B D = - S B C A).
assert (~ Col C B D).
assert (A ** O / C ** O = S A B D / S C B D).
apply co_side.
Geometry.
unfold not in |- *.
intro.

*****
H8 : eq C O
H7 : not (Col C B D)
H6 : eq (S C B D) (Fopp (S B C A))
H3 : eq (S B C D) (S B C A)
H : eq (S A B D) (S A B C)
H5 : not (Col A B C)
H4 : eq (Fplus (S B A C) (S B C D)) F0
H2 : eq (Fplus (S A C B) (S A B D)) F0
H1 : Col B D O
H0 : Col A C O
A,B,C,D,O : Point
*****
False
+++++
subst O.
-----
Theorem l1_24 : forall A B C D O : Point, parallelogram A B C D -> Col A C O -> Col B D O -> A ** O = O ** C.
Proof.
intros.
unfold parallelogram in H.
DecompAndAll.
unfold parallel in *.
unfold S4 in *.
assert (S A B D = S A B C).
replace (-(1) * S A C B) with (- S A C B) by ring.
Geometry.
assert (S B C D = S B C A).
replace (-(1) * S B A C) with (- S B A C) by ring.
Geometry.
assert (S C B D = - S B C A).
assert (~ Col C B D).
assert (A ** O / C ** O = S A B D / S C B D).
apply co_side.
Geometry.
unfold not in |- *.
intro.
subst O.

*****
H7 : not (Col C B D)
H6 : eq (S C B D) (Fopp (S B C A))
H3 : eq (S B C D) (S B C A)
H : eq (S A B D) (S A B C)
H5 : not (Col A B C)
H4 : eq (Fplus (S B A C) (S B C D)) F0
H2 : eq (Fplus (S A C B) (S A B D)) F0
H0 : Col A C C
H1 : Col B D C
A,B,C,D : Point
*****
False
+++++
Geometry.
-----
Theorem l1_24 : forall A B C D O : Point, parallelogram A B C D -> Col A C O -> Col B D O -> A ** O = O ** C.
Proof.
intros.
unfold parallelogram in H.
DecompAndAll.
unfold parallel in *.
unfold S4 in *.
assert (S A B D = S A B C).
replace (-(1) * S A C B) with (- S A C B) by ring.
Geometry.
assert (S B C D = S B C A).
replace (-(1) * S B A C) with (- S B A C) by ring.
Geometry.
assert (S C B D = - S B C A).
assert (~ Col C B D).
assert (A ** O / C ** O = S A B D / S C B D).
apply co_side.

*****
H7 : not (Col C B D)
H6 : eq (S C B D) (Fopp (S B C A))
H3 : eq (S B C D) (S B C A)
H : eq (S A B D) (S A B C)
H5 : not (Col A B C)
H4 : eq (Fplus (S B A C) (S B C D)) F0
H2 : eq (Fplus (S A C B) (S A B D)) F0
H1 : Col B D O
H0 : Col A C O
A,B,C,D,O : Point
*****
Col B D O
+++++
Geometry.
-----
Theorem l1_24 : forall A B C D O : Point, parallelogram A B C D -> Col A C O -> Col B D O -> A ** O = O ** C.
Proof.
intros.
unfold parallelogram in H.
DecompAndAll.
unfold parallel in *.
unfold S4 in *.
assert (S A B D = S A B C).
replace (-(1) * S A C B) with (- S A C B) by ring.
Geometry.
assert (S B C D = S B C A).
replace (-(1) * S B A C) with (- S B A C) by ring.
Geometry.
assert (S C B D = - S B C A).
assert (~ Col C B D).
assert (A ** O / C ** O = S A B D / S C B D).
apply co_side.

*****
H7 : not (Col C B D)
H6 : eq (S C B D) (Fopp (S B C A))
H3 : eq (S B C D) (S B C A)
H : eq (S A B D) (S A B C)
H5 : not (Col A B C)
H4 : eq (Fplus (S B A C) (S B C D)) F0
H2 : eq (Fplus (S A C B) (S A B D)) F0
H1 : Col B D O
H0 : Col A C O
A,B,C,D,O : Point
*****
Col A C O
+++++
Geometry.
-----
Theorem l1_24 : forall A B C D O : Point, parallelogram A B C D -> Col A C O -> Col B D O -> A ** O = O ** C.
Proof.
intros.
unfold parallelogram in H.
DecompAndAll.
unfold parallel in *.
unfold S4 in *.
assert (S A B D = S A B C).
replace (-(1) * S A C B) with (- S A C B) by ring.
Geometry.
assert (S B C D = S B C A).
replace (-(1) * S B A C) with (- S B A C) by ring.
Geometry.
assert (S C B D = - S B C A).
assert (~ Col C B D).
assert (A ** O / C ** O = S A B D / S C B D).

*****
H8 : eq (Fdiv (DSeg A O) (DSeg C O)) (Fdiv (S A B D) (S C B D))
H7 : not (Col C B D)
H6 : eq (S C B D) (Fopp (S B C A))
H3 : eq (S B C D) (S B C A)
H : eq (S A B D) (S A B C)
H5 : not (Col A B C)
H4 : eq (Fplus (S B A C) (S B C D)) F0
H2 : eq (Fplus (S A C B) (S A B D)) F0
H1 : Col B D O
H0 : Col A C O
A,B,C,D,O : Point
*****
eq (DSeg A O) (DSeg O C)
+++++
rewrite H in H8.
-----
Theorem l1_24 : forall A B C D O : Point, parallelogram A B C D -> Col A C O -> Col B D O -> A ** O = O ** C.
Proof.
intros.
unfold parallelogram in H.
DecompAndAll.
unfold parallel in *.
unfold S4 in *.
assert (S A B D = S A B C).
replace (-(1) * S A C B) with (- S A C B) by ring.
Geometry.
assert (S B C D = S B C A).
replace (-(1) * S B A C) with (- S B A C) by ring.
Geometry.
assert (S C B D = - S B C A).
assert (~ Col C B D).
assert (A ** O / C ** O = S A B D / S C B D).
rewrite H in H8.

*****
H8 : eq (Fdiv (DSeg A O) (DSeg C O)) (Fdiv (S A B C) (S C B D))
H7 : not (Col C B D)
H6 : eq (S C B D) (Fopp (S B C A))
H3 : eq (S B C D) (S B C A)
H : eq (S A B D) (S A B C)
H5 : not (Col A B C)
H4 : eq (Fplus (S B A C) (S B C D)) F0
H2 : eq (Fplus (S A C B) (S A B D)) F0
H1 : Col B D O
H0 : Col A C O
A,B,C,D,O : Point
*****
eq (DSeg A O) (DSeg O C)
+++++
Geometry.
-----
Theorem l1_24 : forall A B C D O : Point, parallelogram A B C D -> Col A C O -> Col B D O -> A ** O = O ** C.
Proof.
intros.
unfold parallelogram in H.
DecompAndAll.
unfold parallel in *.
unfold S4 in *.
assert (S A B D = S A B C).
replace (-(1) * S A C B) with (- S A C B) by ring.
Geometry.
assert (S B C D = S B C A).
replace (-(1) * S B A C) with (- S B A C) by ring.
Geometry.
assert (S C B D = - S B C A).
assert (~ Col C B D).
assert (A ** O / C ** O = S A B D / S C B D).
rewrite H in H8.
Geometry.

*****
H8 : eq (Fdiv (DSeg A O) (DSeg C O)) (Fdiv (S A B C) (S C B D))
H7 : not (Col C B D)
H6 : eq (S C B D) (Fopp (S B C A))
H3 : eq (S B C D) (S B C A)
H : eq (S A B D) (S A B C)
H5 : not (Col A B C)
H4 : eq (Fplus (S B A C) (S B C D)) F0
H2 : eq (Fplus (S A C B) (S A B D)) F0
H1 : Col B D O
H0 : Col A C O
A,B,C,D,O : Point
*****
eq (DSeg A O) (DSeg O C)
+++++
rewrite H6 in H8.
-----
Theorem l1_24 : forall A B C D O : Point, parallelogram A B C D -> Col A C O -> Col B D O -> A ** O = O ** C.
Proof.
intros.
unfold parallelogram in H.
DecompAndAll.
unfold parallel in *.
unfold S4 in *.
assert (S A B D = S A B C).
replace (-(1) * S A C B) with (- S A C B) by ring.
Geometry.
assert (S B C D = S B C A).
replace (-(1) * S B A C) with (- S B A C) by ring.
Geometry.
assert (S C B D = - S B C A).
assert (~ Col C B D).
assert (A ** O / C ** O = S A B D / S C B D).
rewrite H in H8.
Geometry.
rewrite H6 in H8.

*****
H8 : eq (Fdiv (DSeg A O) (DSeg C O)) (Fdiv (S A B C) (Fopp (S B C A)))
H7 : not (Col C B D)
H6 : eq (S C B D) (Fopp (S B C A))
H3 : eq (S B C D) (S B C A)
H : eq (S A B D) (S A B C)
H5 : not (Col A B C)
H4 : eq (Fplus (S B A C) (S B C D)) F0
H2 : eq (Fplus (S A C B) (S A B D)) F0
H1 : Col B D O
H0 : Col A C O
A,B,C,D,O : Point
*****
eq (DSeg A O) (DSeg O C)
+++++
Geometry.
-----
Theorem l1_24 : forall A B C D O : Point, parallelogram A B C D -> Col A C O -> Col B D O -> A ** O = O ** C.
Proof.
intros.
unfold parallelogram in H.
DecompAndAll.
unfold parallel in *.
unfold S4 in *.
assert (S A B D = S A B C).
replace (-(1) * S A C B) with (- S A C B) by ring.
Geometry.
assert (S B C D = S B C A).
replace (-(1) * S B A C) with (- S B A C) by ring.
Geometry.
assert (S C B D = - S B C A).
assert (~ Col C B D).
assert (A ** O / C ** O = S A B D / S C B D).
rewrite H in H8.
Geometry.
rewrite H6 in H8.
Geometry.

*****
H8 : eq (Fdiv (DSeg A O) (DSeg C O)) (Fdiv (S A B C) (Fopp (S B C A)))
H7 : not (Col C B D)
H6 : eq (S C B D) (Fopp (S B C A))
H3 : eq (S B C D) (S B C A)
H : eq (S A B D) (S A B C)
H5 : not (Col A B C)
H4 : eq (Fplus (S B A C) (S B C D)) F0
H2 : eq (Fplus (S A C B) (S A B D)) F0
H1 : Col B D O
H0 : Col A C O
A,B,C,D,O : Point
*****
eq (DSeg A O) (DSeg O C)
+++++
assert (S A B C = S B C A).
-----
Theorem l1_24 : forall A B C D O : Point, parallelogram A B C D -> Col A C O -> Col B D O -> A ** O = O ** C.
Proof.
intros.
unfold parallelogram in H.
DecompAndAll.
unfold parallel in *.
unfold S4 in *.
assert (S A B D = S A B C).
replace (-(1) * S A C B) with (- S A C B) by ring.
Geometry.
assert (S B C D = S B C A).
replace (-(1) * S B A C) with (- S B A C) by ring.
Geometry.
assert (S C B D = - S B C A).
assert (~ Col C B D).
assert (A ** O / C ** O = S A B D / S C B D).
rewrite H in H8.
Geometry.
rewrite H6 in H8.
Geometry.
assert (S A B C = S B C A).

*****
H8 : eq (Fdiv (DSeg A O) (DSeg C O)) (Fdiv (S A B C) (Fopp (S B C A)))
H7 : not (Col C B D)
H6 : eq (S C B D) (Fopp (S B C A))
H3 : eq (S B C D) (S B C A)
H : eq (S A B D) (S A B C)
H5 : not (Col A B C)
H4 : eq (Fplus (S B A C) (S B C D)) F0
H2 : eq (Fplus (S A C B) (S A B D)) F0
H1 : Col B D O
H0 : Col A C O
A,B,C,D,O : Point
*****
eq (S A B C) (S B C A)
+++++
Geometry.
-----
Theorem l1_24 : forall A B C D O : Point, parallelogram A B C D -> Col A C O -> Col B D O -> A ** O = O ** C.
Proof.
intros.
unfold parallelogram in H.
DecompAndAll.
unfold parallel in *.
unfold S4 in *.
assert (S A B D = S A B C).
replace (-(1) * S A C B) with (- S A C B) by ring.
Geometry.
assert (S B C D = S B C A).
replace (-(1) * S B A C) with (- S B A C) by ring.
Geometry.
assert (S C B D = - S B C A).
assert (~ Col C B D).
assert (A ** O / C ** O = S A B D / S C B D).
rewrite H in H8.
Geometry.
rewrite H6 in H8.
Geometry.
assert (S A B C = S B C A).

*****
H9 : eq (S A B C) (S B C A)
H8 : eq (Fdiv (DSeg A O) (DSeg C O)) (Fdiv (S A B C) (Fopp (S B C A)))
H7 : not (Col C B D)
H6 : eq (S C B D) (Fopp (S B C A))
H3 : eq (S B C D) (S B C A)
H : eq (S A B D) (S A B C)
H5 : not (Col A B C)
H4 : eq (Fplus (S B A C) (S B C D)) F0
H2 : eq (Fplus (S A C B) (S A B D)) F0
H1 : Col B D O
H0 : Col A C O
A,B,C,D,O : Point
*****
eq (DSeg A O) (DSeg O C)
+++++
Geometry.
-----
Theorem l1_24 : forall A B C D O : Point, parallelogram A B C D -> Col A C O -> Col B D O -> A ** O = O ** C.
Proof.
intros.
unfold parallelogram in H.
DecompAndAll.
unfold parallel in *.
unfold S4 in *.
assert (S A B D = S A B C).
replace (-(1) * S A C B) with (- S A C B) by ring.
Geometry.
assert (S B C D = S B C A).
replace (-(1) * S B A C) with (- S B A C) by ring.
Geometry.
assert (S C B D = - S B C A).
assert (~ Col C B D).
assert (A ** O / C ** O = S A B D / S C B D).
rewrite H in H8.
Geometry.
rewrite H6 in H8.
Geometry.
assert (S A B C = S B C A).
Geometry.

*****
H9 : eq (S A B C) (S B C A)
H8 : eq (Fdiv (DSeg A O) (DSeg C O)) (Fdiv (S A B C) (Fopp (S B C A)))
H7 : not (Col C B D)
H6 : eq (S C B D) (Fopp (S B C A))
H3 : eq (S B C D) (S B C A)
H : eq (S A B D) (S A B C)
H5 : not (Col A B C)
H4 : eq (Fplus (S B A C) (S B C D)) F0
H2 : eq (Fplus (S A C B) (S A B D)) F0
H1 : Col B D O
H0 : Col A C O
A,B,C,D,O : Point
*****
eq (DSeg A O) (DSeg O C)
+++++
rewrite H9 in H8.
-----
Theorem l1_24 : forall A B C D O : Point, parallelogram A B C D -> Col A C O -> Col B D O -> A ** O = O ** C.
Proof.
intros.
unfold parallelogram in H.
DecompAndAll.
unfold parallel in *.
unfold S4 in *.
assert (S A B D = S A B C).
replace (-(1) * S A C B) with (- S A C B) by ring.
Geometry.
assert (S B C D = S B C A).
replace (-(1) * S B A C) with (- S B A C) by ring.
Geometry.
assert (S C B D = - S B C A).
assert (~ Col C B D).
assert (A ** O / C ** O = S A B D / S C B D).
rewrite H in H8.
Geometry.
rewrite H6 in H8.
Geometry.
assert (S A B C = S B C A).
Geometry.
rewrite H9 in H8.

*****
H9 : eq (S A B C) (S B C A)
H8 : eq (Fdiv (DSeg A O) (DSeg C O)) (Fdiv (S B C A) (Fopp (S B C A)))
H7 : not (Col C B D)
H6 : eq (S C B D) (Fopp (S B C A))
H3 : eq (S B C D) (S B C A)
H : eq (S A B D) (S A B C)
H5 : not (Col A B C)
H4 : eq (Fplus (S B A C) (S B C D)) F0
H2 : eq (Fplus (S A C B) (S A B D)) F0
H1 : Col B D O
H0 : Col A C O
A,B,C,D,O : Point
*****
eq (DSeg A O) (DSeg O C)
+++++
Geometry.
-----
Theorem l1_24 : forall A B C D O : Point, parallelogram A B C D -> Col A C O -> Col B D O -> A ** O = O ** C.
Proof.
intros.
unfold parallelogram in H.
DecompAndAll.
unfold parallel in *.
unfold S4 in *.
assert (S A B D = S A B C).
replace (-(1) * S A C B) with (- S A C B) by ring.
Geometry.
assert (S B C D = S B C A).
replace (-(1) * S B A C) with (- S B A C) by ring.
Geometry.
assert (S C B D = - S B C A).
assert (~ Col C B D).
assert (A ** O / C ** O = S A B D / S C B D).
rewrite H in H8.
Geometry.
rewrite H6 in H8.
Geometry.
assert (S A B C = S B C A).
Geometry.
rewrite H9 in H8.
Geometry.

*****
H9 : eq (S A B C) (S B C A)
H8 : eq (Fdiv (DSeg A O) (DSeg C O)) (Fdiv (S B C A) (Fopp (S B C A)))
H7 : not (Col C B D)
H6 : eq (S C B D) (Fopp (S B C A))
H3 : eq (S B C D) (S B C A)
H : eq (S A B D) (S A B C)
H5 : not (Col A B C)
H4 : eq (Fplus (S B A C) (S B C D)) F0
H2 : eq (Fplus (S A C B) (S A B D)) F0
H1 : Col B D O
H0 : Col A C O
A,B,C,D,O : Point
*****
eq (DSeg A O) (DSeg O C)
+++++
assert (C ** O = - O ** C).
-----
Theorem l1_24 : forall A B C D O : Point, parallelogram A B C D -> Col A C O -> Col B D O -> A ** O = O ** C.
Proof.
intros.
unfold parallelogram in H.
DecompAndAll.
unfold parallel in *.
unfold S4 in *.
assert (S A B D = S A B C).
replace (-(1) * S A C B) with (- S A C B) by ring.
Geometry.
assert (S B C D = S B C A).
replace (-(1) * S B A C) with (- S B A C) by ring.
Geometry.
assert (S C B D = - S B C A).
assert (~ Col C B D).
assert (A ** O / C ** O = S A B D / S C B D).
rewrite H in H8.
Geometry.
rewrite H6 in H8.
Geometry.
assert (S A B C = S B C A).
Geometry.
rewrite H9 in H8.
Geometry.
assert (C ** O = - O ** C).

*****
H9 : eq (S A B C) (S B C A)
H8 : eq (Fdiv (DSeg A O) (DSeg C O)) (Fdiv (S B C A) (Fopp (S B C A)))
H7 : not (Col C B D)
H6 : eq (S C B D) (Fopp (S B C A))
H3 : eq (S B C D) (S B C A)
H : eq (S A B D) (S A B C)
H5 : not (Col A B C)
H4 : eq (Fplus (S B A C) (S B C D)) F0
H2 : eq (Fplus (S A C B) (S A B D)) F0
H1 : Col B D O
H0 : Col A C O
A,B,C,D,O : Point
*****
eq (DSeg C O) (Fopp (DSeg O C))
+++++
Geometry.
-----
Theorem l1_24 : forall A B C D O : Point, parallelogram A B C D -> Col A C O -> Col B D O -> A ** O = O ** C.
Proof.
intros.
unfold parallelogram in H.
DecompAndAll.
unfold parallel in *.
unfold S4 in *.
assert (S A B D = S A B C).
replace (-(1) * S A C B) with (- S A C B) by ring.
Geometry.
assert (S B C D = S B C A).
replace (-(1) * S B A C) with (- S B A C) by ring.
Geometry.
assert (S C B D = - S B C A).
assert (~ Col C B D).
assert (A ** O / C ** O = S A B D / S C B D).
rewrite H in H8.
Geometry.
rewrite H6 in H8.
Geometry.
assert (S A B C = S B C A).
Geometry.
rewrite H9 in H8.
Geometry.
assert (C ** O = - O ** C).

*****
H10 : eq (DSeg C O) (Fopp (DSeg O C))
H9 : eq (S A B C) (S B C A)
H8 : eq (Fdiv (DSeg A O) (DSeg C O)) (Fdiv (S B C A) (Fopp (S B C A)))
H7 : not (Col C B D)
H6 : eq (S C B D) (Fopp (S B C A))
H3 : eq (S B C D) (S B C A)
H : eq (S A B D) (S A B C)
H5 : not (Col A B C)
H4 : eq (Fplus (S B A C) (S B C D)) F0
H2 : eq (Fplus (S A C B) (S A B D)) F0
H1 : Col B D O
H0 : Col A C O
A,B,C,D,O : Point
*****
eq (DSeg A O) (DSeg O C)
+++++
Geometry.
-----
Theorem l1_24 : forall A B C D O : Point, parallelogram A B C D -> Col A C O -> Col B D O -> A ** O = O ** C.
Proof.
intros.
unfold parallelogram in H.
DecompAndAll.
unfold parallel in *.
unfold S4 in *.
assert (S A B D = S A B C).
replace (-(1) * S A C B) with (- S A C B) by ring.
Geometry.
assert (S B C D = S B C A).
replace (-(1) * S B A C) with (- S B A C) by ring.
Geometry.
assert (S C B D = - S B C A).
assert (~ Col C B D).
assert (A ** O / C ** O = S A B D / S C B D).
rewrite H in H8.
Geometry.
rewrite H6 in H8.
Geometry.
assert (S A B C = S B C A).
Geometry.
rewrite H9 in H8.
Geometry.
assert (C ** O = - O ** C).
Geometry.

*****
H10 : eq (DSeg C O) (Fopp (DSeg O C))
H9 : eq (S A B C) (S B C A)
H8 : eq (Fdiv (DSeg A O) (DSeg C O)) (Fdiv (S B C A) (Fopp (S B C A)))
H7 : not (Col C B D)
H6 : eq (S C B D) (Fopp (S B C A))
H3 : eq (S B C D) (S B C A)
H : eq (S A B D) (S A B C)
H5 : not (Col A B C)
H4 : eq (Fplus (S B A C) (S B C D)) F0
H2 : eq (Fplus (S A C B) (S A B D)) F0
H1 : Col B D O
H0 : Col A C O
A,B,C,D,O : Point
*****
eq (DSeg A O) (DSeg O C)
+++++
rewrite H10 in H8.
-----
Theorem l1_24 : forall A B C D O : Point, parallelogram A B C D -> Col A C O -> Col B D O -> A ** O = O ** C.
Proof.
intros.
unfold parallelogram in H.
DecompAndAll.
unfold parallel in *.
unfold S4 in *.
assert (S A B D = S A B C).
replace (-(1) * S A C B) with (- S A C B) by ring.
Geometry.
assert (S B C D = S B C A).
replace (-(1) * S B A C) with (- S B A C) by ring.
Geometry.
assert (S C B D = - S B C A).
assert (~ Col C B D).
assert (A ** O / C ** O = S A B D / S C B D).
rewrite H in H8.
Geometry.
rewrite H6 in H8.
Geometry.
assert (S A B C = S B C A).
Geometry.
rewrite H9 in H8.
Geometry.
assert (C ** O = - O ** C).
Geometry.
rewrite H10 in H8.

*****
H10 : eq (DSeg C O) (Fopp (DSeg O C))
H9 : eq (S A B C) (S B C A)
H8 : eq (Fdiv (DSeg A O) (Fopp (DSeg O C)))\n (Fdiv (S B C A) (Fopp (S B C A)))
H7 : not (Col C B D)
H6 : eq (S C B D) (Fopp (S B C A))
H3 : eq (S B C D) (S B C A)
H : eq (S A B D) (S A B C)
H5 : not (Col A B C)
H4 : eq (Fplus (S B A C) (S B C D)) F0
H2 : eq (Fplus (S A C B) (S A B D)) F0
H1 : Col B D O
H0 : Col A C O
A,B,C,D,O : Point
*****
eq (DSeg A O) (DSeg O C)
+++++
Geometry.
-----
Theorem l1_24 : forall A B C D O : Point, parallelogram A B C D -> Col A C O -> Col B D O -> A ** O = O ** C.
Proof.
intros.
unfold parallelogram in H.
DecompAndAll.
unfold parallel in *.
unfold S4 in *.
assert (S A B D = S A B C).
replace (-(1) * S A C B) with (- S A C B) by ring.
Geometry.
assert (S B C D = S B C A).
replace (-(1) * S B A C) with (- S B A C) by ring.
Geometry.
assert (S C B D = - S B C A).
assert (~ Col C B D).
assert (A ** O / C ** O = S A B D / S C B D).
rewrite H in H8.
Geometry.
rewrite H6 in H8.
Geometry.
assert (S A B C = S B C A).
Geometry.
rewrite H9 in H8.
Geometry.
assert (C ** O = - O ** C).
Geometry.
rewrite H10 in H8.
Geometry.

*****
H10 : eq (DSeg C O) (Fopp (DSeg O C))
H9 : eq (S A B C) (S B C A)
H8 : eq (Fdiv (DSeg A O) (Fopp (DSeg O C)))\n (Fdiv (S B C A) (Fopp (S B C A)))
H7 : not (Col C B D)
H6 : eq (S C B D) (Fopp (S B C A))
H3 : eq (S B C D) (S B C A)
H : eq (S A B D) (S A B C)
H5 : not (Col A B C)
H4 : eq (Fplus (S B A C) (S B C D)) F0
H2 : eq (Fplus (S A C B) (S A B D)) F0
H1 : Col B D O
H0 : Col A C O
A,B,C,D,O : Point
*****
eq (DSeg A O) (DSeg O C)
+++++
RewriteVar (A ** O) H8.
-----
Theorem l1_24 : forall A B C D O : Point, parallelogram A B C D -> Col A C O -> Col B D O -> A ** O = O ** C.
Proof.
intros.
unfold parallelogram in H.
DecompAndAll.
unfold parallel in *.
unfold S4 in *.
assert (S A B D = S A B C).
replace (-(1) * S A C B) with (- S A C B) by ring.
Geometry.
assert (S B C D = S B C A).
replace (-(1) * S B A C) with (- S B A C) by ring.
Geometry.
assert (S C B D = - S B C A).
assert (~ Col C B D).
assert (A ** O / C ** O = S A B D / S C B D).
rewrite H in H8.
Geometry.
rewrite H6 in H8.
Geometry.
assert (S A B C = S B C A).
Geometry.
rewrite H9 in H8.
Geometry.
assert (C ** O = - O ** C).
Geometry.
rewrite H10 in H8.
Geometry.
RewriteVar (A ** O) H8.

*****
H8 : eq (DSeg A O)\n (Fmult (Fopp (DSeg O C)) (Fdiv (S B C A) (Fopp (S B C A))))
H11 : not (eq (Fopp (DSeg O C)) F0)
H10 : eq (DSeg C O) (Fopp (DSeg O C))
H9 : eq (S A B C) (S B C A)
H7 : not (Col C B D)
H6 : eq (S C B D) (Fopp (S B C A))
H3 : eq (S B C D) (S B C A)
H : eq (S A B D) (S A B C)
H5 : not (Col A B C)
H4 : eq (Fplus (S B A C) (S B C D)) F0
H2 : eq (Fplus (S A C B) (S A B D)) F0
H1 : Col B D O
H0 : Col A C O
A,B,C,D,O : Point
*****
eq (Fmult (Fopp (DSeg O C)) (Fdiv (S B C A) (Fopp (S B C A)))) (DSeg O C)
+++++
Geometry.
-----
Theorem l1_24 : forall A B C D O : Point, parallelogram A B C D -> Col A C O -> Col B D O -> A ** O = O ** C.
Proof.
intros.
unfold parallelogram in H.
DecompAndAll.
unfold parallel in *.
unfold S4 in *.
assert (S A B D = S A B C).
replace (-(1) * S A C B) with (- S A C B) by ring.
Geometry.
assert (S B C D = S B C A).
replace (-(1) * S B A C) with (- S B A C) by ring.
Geometry.
assert (S C B D = - S B C A).
assert (~ Col C B D).
assert (A ** O / C ** O = S A B D / S C B D).
rewrite H in H8.
Geometry.
rewrite H6 in H8.
Geometry.
assert (S A B C = S B C A).
Geometry.
rewrite H9 in H8.
Geometry.
assert (C ** O = - O ** C).
Geometry.
rewrite H10 in H8.
Geometry.
RewriteVar (A ** O) H8.
Geometry.

*****
H8 : eq (DSeg A O)\n (Fmult (Fopp (DSeg O C)) (Fdiv (S B C A) (Fopp (S B C A))))
H11 : not (eq (Fopp (DSeg O C)) F0)
H10 : eq (DSeg C O) (Fopp (DSeg O C))
H9 : eq (S A B C) (S B C A)
H7 : not (Col C B D)
H6 : eq (S C B D) (Fopp (S B C A))
H3 : eq (S B C D) (S B C A)
H : eq (S A B D) (S A B C)
H5 : not (Col A B C)
H4 : eq (Fplus (S B A C) (S B C D)) F0
H2 : eq (Fplus (S A C B) (S A B D)) F0
H1 : Col B D O
H0 : Col A C O
A,B,C,D,O : Point
*****
eq (Fmult (Fopp (DSeg O C)) (Fdiv (S B C A) (Fopp (S B C A)))) (DSeg O C)
+++++
field.
-----
Theorem l1_24 : forall A B C D O : Point, parallelogram A B C D -> Col A C O -> Col B D O -> A ** O = O ** C.
Proof.
intros.
unfold parallelogram in H.
DecompAndAll.
unfold parallel in *.
unfold S4 in *.
assert (S A B D = S A B C).
replace (-(1) * S A C B) with (- S A C B) by ring.
Geometry.
assert (S B C D = S B C A).
replace (-(1) * S B A C) with (- S B A C) by ring.
Geometry.
assert (S C B D = - S B C A).
assert (~ Col C B D).
assert (A ** O / C ** O = S A B D / S C B D).
rewrite H in H8.
Geometry.
rewrite H6 in H8.
Geometry.
assert (S A B C = S B C A).
Geometry.
rewrite H9 in H8.
Geometry.
assert (C ** O = - O ** C).
Geometry.
rewrite H10 in H8.
Geometry.
RewriteVar (A ** O) H8.
Geometry.
field.

*****
H8 : eq (DSeg A O)\n (Fmult (Fopp (DSeg O C)) (Fdiv (S B C A) (Fopp (S B C A))))
H11 : not (eq (Fopp (DSeg O C)) F0)
H10 : eq (DSeg C O) (Fopp (DSeg O C))
H9 : eq (S A B C) (S B C A)
H7 : not (Col C B D)
H6 : eq (S C B D) (Fopp (S B C A))
H3 : eq (S B C D) (S B C A)
H : eq (S A B D) (S A B C)
H5 : not (Col A B C)
H4 : eq (Fplus (S B A C) (S B C D)) F0
H2 : eq (Fplus (S A C B) (S A B D)) F0
H1 : Col B D O
H0 : Col A C O
A,B,C,D,O : Point
*****
not (eq (Fopp (S B C A)) F0)
+++++
Geometry.
-----
Theorem l1_24 : forall A B C D O : Point, parallelogram A B C D -> Col A C O -> Col B D O -> A ** O = O ** C.
Proof.
intros.
unfold parallelogram in H.
DecompAndAll.
unfold parallel in *.
unfold S4 in *.
assert (S A B D = S A B C).
replace (-(1) * S A C B) with (- S A C B) by ring.
Geometry.
assert (S B C D = S B C A).
replace (-(1) * S B A C) with (- S B A C) by ring.
Geometry.
assert (S C B D = - S B C A).
assert (~ Col C B D).
assert (A ** O / C ** O = S A B D / S C B D).
rewrite H in H8.
Geometry.
rewrite H6 in H8.
Geometry.
assert (S A B C = S B C A).
Geometry.
rewrite H9 in H8.
Geometry.
assert (C ** O = - O ** C).
Geometry.
rewrite H10 in H8.
Geometry.
RewriteVar (A ** O) H8.

*****
H8 : eq (Fdiv (DSeg A O) (Fopp (DSeg O C)))\n (Fdiv (S B C A) (Fopp (S B C A)))
H10 : eq (DSeg C O) (Fopp (DSeg O C))
H9 : eq (S A B C) (S B C A)
H7 : not (Col C B D)
H6 : eq (S C B D) (Fopp (S B C A))
H3 : eq (S B C D) (S B C A)
H : eq (S A B D) (S A B C)
H5 : not (Col A B C)
H4 : eq (Fplus (S B A C) (S B C D)) F0
H2 : eq (Fplus (S A C B) (S A B D)) F0
H1 : Col B D O
H0 : Col A C O
A,B,C,D,O : Point
*****
not (eq (Fopp (DSeg O C)) F0)
+++++
Geometry.
-----
Theorem l1_24 : forall A B C D O : Point, parallelogram A B C D -> Col A C O -> Col B D O -> A ** O = O ** C.
Proof.
intros.
unfold parallelogram in H.
DecompAndAll.
unfold parallel in *.
unfold S4 in *.
assert (S A B D = S A B C).
replace (-(1) * S A C B) with (- S A C B) by ring.
Geometry.
assert (S B C D = S B C A).
replace (-(1) * S B A C) with (- S B A C) by ring.
Geometry.
assert (S C B D = - S B C A).
assert (~ Col C B D).
assert (A ** O / C ** O = S A B D / S C B D).
rewrite H in H8.
Geometry.
rewrite H6 in H8.
Geometry.
assert (S A B C = S B C A).
Geometry.
rewrite H9 in H8.
Geometry.
assert (C ** O = - O ** C).
Geometry.
rewrite H10 in H8.
Geometry.
RewriteVar (A ** O) H8.
Geometry.

*****
H8 : eq (Fdiv (DSeg A O) (Fopp (DSeg O C)))\n (Fdiv (S B C A) (Fopp (S B C A)))
H10 : eq (DSeg C O) (Fopp (DSeg O C))
H9 : eq (S A B C) (S B C A)
H7 : not (Col C B D)
H6 : eq (S C B D) (Fopp (S B C A))
H3 : eq (S B C D) (S B C A)
H : eq (S A B D) (S A B C)
H5 : not (Col A B C)
H4 : eq (Fplus (S B A C) (S B C D)) F0
H2 : eq (Fplus (S A C B) (S A B D)) F0
H1 : Col B D O
H0 : Col A C O
A,B,C,D,O : Point
*****
not (eq (Fopp (DSeg O C)) F0)
+++++
rewrite <- H10.
-----
Theorem l1_24 : forall A B C D O : Point, parallelogram A B C D -> Col A C O -> Col B D O -> A ** O = O ** C.
Proof.
intros.
unfold parallelogram in H.
DecompAndAll.
unfold parallel in *.
unfold S4 in *.
assert (S A B D = S A B C).
replace (-(1) * S A C B) with (- S A C B) by ring.
Geometry.
assert (S B C D = S B C A).
replace (-(1) * S B A C) with (- S B A C) by ring.
Geometry.
assert (S C B D = - S B C A).
assert (~ Col C B D).
assert (A ** O / C ** O = S A B D / S C B D).
rewrite H in H8.
Geometry.
rewrite H6 in H8.
Geometry.
assert (S A B C = S B C A).
Geometry.
rewrite H9 in H8.
Geometry.
assert (C ** O = - O ** C).
Geometry.
rewrite H10 in H8.
Geometry.
RewriteVar (A ** O) H8.
Geometry.
rewrite <- H10.

*****
H8 : eq (Fdiv (DSeg A O) (Fopp (DSeg O C)))\n (Fdiv (S B C A) (Fopp (S B C A)))
H10 : eq (DSeg C O) (Fopp (DSeg O C))
H9 : eq (S A B C) (S B C A)
H7 : not (Col C B D)
H6 : eq (S C B D) (Fopp (S B C A))
H3 : eq (S B C D) (S B C A)
H : eq (S A B D) (S A B C)
H5 : not (Col A B C)
H4 : eq (Fplus (S B A C) (S B C D)) F0
H2 : eq (Fplus (S A C B) (S A B D)) F0
H1 : Col B D O
H0 : Col A C O
A,B,C,D,O : Point
*****
not (eq (DSeg C O) F0)
+++++
assert (O <> C).
-----
Theorem l1_24 : forall A B C D O : Point, parallelogram A B C D -> Col A C O -> Col B D O -> A ** O = O ** C.
Proof.
intros.
unfold parallelogram in H.
DecompAndAll.
unfold parallel in *.
unfold S4 in *.
assert (S A B D = S A B C).
replace (-(1) * S A C B) with (- S A C B) by ring.
Geometry.
assert (S B C D = S B C A).
replace (-(1) * S B A C) with (- S B A C) by ring.
Geometry.
assert (S C B D = - S B C A).
assert (~ Col C B D).
assert (A ** O / C ** O = S A B D / S C B D).
rewrite H in H8.
Geometry.
rewrite H6 in H8.
Geometry.
assert (S A B C = S B C A).
Geometry.
rewrite H9 in H8.
Geometry.
assert (C ** O = - O ** C).
Geometry.
rewrite H10 in H8.
Geometry.
RewriteVar (A ** O) H8.
Geometry.
rewrite <- H10.
assert (O <> C).

*****
H8 : eq (Fdiv (DSeg A O) (Fopp (DSeg O C)))\n (Fdiv (S B C A) (Fopp (S B C A)))
H10 : eq (DSeg C O) (Fopp (DSeg O C))
H9 : eq (S A B C) (S B C A)
H7 : not (Col C B D)
H6 : eq (S C B D) (Fopp (S B C A))
H3 : eq (S B C D) (S B C A)
H : eq (S A B D) (S A B C)
H5 : not (Col A B C)
H4 : eq (Fplus (S B A C) (S B C D)) F0
H2 : eq (Fplus (S A C B) (S A B D)) F0
H1 : Col B D O
H0 : Col A C O
A,B,C,D,O : Point
*****
not (eq O C)
+++++
unfold not.
-----
Theorem l1_24 : forall A B C D O : Point, parallelogram A B C D -> Col A C O -> Col B D O -> A ** O = O ** C.
Proof.
intros.
unfold parallelogram in H.
DecompAndAll.
unfold parallel in *.
unfold S4 in *.
assert (S A B D = S A B C).
replace (-(1) * S A C B) with (- S A C B) by ring.
Geometry.
assert (S B C D = S B C A).
replace (-(1) * S B A C) with (- S B A C) by ring.
Geometry.
assert (S C B D = - S B C A).
assert (~ Col C B D).
assert (A ** O / C ** O = S A B D / S C B D).
rewrite H in H8.
Geometry.
rewrite H6 in H8.
Geometry.
assert (S A B C = S B C A).
Geometry.
rewrite H9 in H8.
Geometry.
assert (C ** O = - O ** C).
Geometry.
rewrite H10 in H8.
Geometry.
RewriteVar (A ** O) H8.
Geometry.
rewrite <- H10.
assert (O <> C).
unfold not.

*****
H8 : eq (Fdiv (DSeg A O) (Fopp (DSeg O C)))\n (Fdiv (S B C A) (Fopp (S B C A)))
H10 : eq (DSeg C O) (Fopp (DSeg O C))
H9 : eq (S A B C) (S B C A)
H7 : not (Col C B D)
H6 : eq (S C B D) (Fopp (S B C A))
H3 : eq (S B C D) (S B C A)
H : eq (S A B D) (S A B C)
H5 : not (Col A B C)
H4 : eq (Fplus (S B A C) (S B C D)) F0
H2 : eq (Fplus (S A C B) (S A B D)) F0
H1 : Col B D O
H0 : Col A C O
A,B,C,D,O : Point
*****
forall _ : eq O C, False
+++++
intro.
-----
Theorem l1_24 : forall A B C D O : Point, parallelogram A B C D -> Col A C O -> Col B D O -> A ** O = O ** C.
Proof.
intros.
unfold parallelogram in H.
DecompAndAll.
unfold parallel in *.
unfold S4 in *.
assert (S A B D = S A B C).
replace (-(1) * S A C B) with (- S A C B) by ring.
Geometry.
assert (S B C D = S B C A).
replace (-(1) * S B A C) with (- S B A C) by ring.
Geometry.
assert (S C B D = - S B C A).
assert (~ Col C B D).
assert (A ** O / C ** O = S A B D / S C B D).
rewrite H in H8.
Geometry.
rewrite H6 in H8.
Geometry.
assert (S A B C = S B C A).
Geometry.
rewrite H9 in H8.
Geometry.
assert (C ** O = - O ** C).
Geometry.
rewrite H10 in H8.
Geometry.
RewriteVar (A ** O) H8.
Geometry.
rewrite <- H10.
assert (O <> C).
unfold not.
intro.

*****
H11 : eq O C
H8 : eq (Fdiv (DSeg A O) (Fopp (DSeg O C)))\n (Fdiv (S B C A) (Fopp (S B C A)))
H10 : eq (DSeg C O) (Fopp (DSeg O C))
H9 : eq (S A B C) (S B C A)
H7 : not (Col C B D)
H6 : eq (S C B D) (Fopp (S B C A))
H3 : eq (S B C D) (S B C A)
H : eq (S A B D) (S A B C)
H5 : not (Col A B C)
H4 : eq (Fplus (S B A C) (S B C D)) F0
H2 : eq (Fplus (S A C B) (S A B D)) F0
H1 : Col B D O
H0 : Col A C O
A,B,C,D,O : Point
*****
False
+++++
subst O.
-----
Theorem l1_24 : forall A B C D O : Point, parallelogram A B C D -> Col A C O -> Col B D O -> A ** O = O ** C.
Proof.
intros.
unfold parallelogram in H.
DecompAndAll.
unfold parallel in *.
unfold S4 in *.
assert (S A B D = S A B C).
replace (-(1) * S A C B) with (- S A C B) by ring.
Geometry.
assert (S B C D = S B C A).
replace (-(1) * S B A C) with (- S B A C) by ring.
Geometry.
assert (S C B D = - S B C A).
assert (~ Col C B D).
assert (A ** O / C ** O = S A B D / S C B D).
rewrite H in H8.
Geometry.
rewrite H6 in H8.
Geometry.
assert (S A B C = S B C A).
Geometry.
rewrite H9 in H8.
Geometry.
assert (C ** O = - O ** C).
Geometry.
rewrite H10 in H8.
Geometry.
RewriteVar (A ** O) H8.
Geometry.
rewrite <- H10.
assert (O <> C).
unfold not.
intro.
subst O.

*****
H10 : eq (DSeg C C) (Fopp (DSeg C C))
H8 : eq (Fdiv (DSeg A C) (Fopp (DSeg C C)))\n (Fdiv (S B C A) (Fopp (S B C A)))
H9 : eq (S A B C) (S B C A)
H7 : not (Col C B D)
H6 : eq (S C B D) (Fopp (S B C A))
H3 : eq (S B C D) (S B C A)
H : eq (S A B D) (S A B C)
H5 : not (Col A B C)
H4 : eq (Fplus (S B A C) (S B C D)) F0
H2 : eq (Fplus (S A C B) (S A B D)) F0
H0 : Col A C C
H1 : Col B D C
A,B,C,D : Point
*****
False
+++++
Geometry.
-----
Theorem l1_24 : forall A B C D O : Point, parallelogram A B C D -> Col A C O -> Col B D O -> A ** O = O ** C.
Proof.
intros.
unfold parallelogram in H.
DecompAndAll.
unfold parallel in *.
unfold S4 in *.
assert (S A B D = S A B C).
replace (-(1) * S A C B) with (- S A C B) by ring.
Geometry.
assert (S B C D = S B C A).
replace (-(1) * S B A C) with (- S B A C) by ring.
Geometry.
assert (S C B D = - S B C A).
assert (~ Col C B D).
assert (A ** O / C ** O = S A B D / S C B D).
rewrite H in H8.
Geometry.
rewrite H6 in H8.
Geometry.
assert (S A B C = S B C A).
Geometry.
rewrite H9 in H8.
Geometry.
assert (C ** O = - O ** C).
Geometry.
rewrite H10 in H8.
Geometry.
RewriteVar (A ** O) H8.
Geometry.
rewrite <- H10.
assert (O <> C).

*****
H11 : not (eq O C)
H8 : eq (Fdiv (DSeg A O) (Fopp (DSeg O C)))\n (Fdiv (S B C A) (Fopp (S B C A)))
H10 : eq (DSeg C O) (Fopp (DSeg O C))
H9 : eq (S A B C) (S B C A)
H7 : not (Col C B D)
H6 : eq (S C B D) (Fopp (S B C A))
H3 : eq (S B C D) (S B C A)
H : eq (S A B D) (S A B C)
H5 : not (Col A B C)
H4 : eq (Fplus (S B A C) (S B C D)) F0
H2 : eq (Fplus (S A C B) (S A B D)) F0
H1 : Col B D O
H0 : Col A C O
A,B,C,D,O : Point
*****
not (eq (DSeg C O) F0)
+++++
Geometry.
-----
Theorem l1_24 : forall A B C D O : Point, parallelogram A B C D -> Col A C O -> Col B D O -> A ** O = O ** C.
Proof.
intros.
unfold parallelogram in H.
DecompAndAll.
unfold parallel in *.
unfold S4 in *.
assert (S A B D = S A B C).

*****

*****

+++++
Qed.
-----
Theorem diago_par_intersect :\n forall A B C D : Point, \n parallelogram A B C D -> \n ~ parallel A C B D.
-----
Theorem diago_par_intersect : forall A B C D : Point, parallelogram A B C D -> ~ parallel A C B D.

*****

*****
forall (A B C D : Point) (_ : parallelogram A B C D), not (parallel A C B D)
+++++
Proof.
-----
Theorem diago_par_intersect : forall A B C D : Point, parallelogram A B C D -> ~ parallel A C B D.
Proof.

*****

*****
forall (A B C D : Point) (_ : parallelogram A B C D), not (parallel A C B D)
+++++
unfold parallelogram in |- *.
-----
Theorem diago_par_intersect : forall A B C D : Point, parallelogram A B C D -> ~ parallel A C B D.
Proof.
unfold parallelogram in |- *.

*****

*****
forall (A B C D : Point) (_ : and (parallel A B C D) (and (parallel B C A D) (not (Col A B C)))), not (parallel A C B D)
+++++
unfold parallel in |- *.
-----
Theorem diago_par_intersect : forall A B C D : Point, parallelogram A B C D -> ~ parallel A C B D.
Proof.
unfold parallelogram in |- *.
unfold parallel in |- *.

*****

*****
forall (A B C D : Point) (_ : and (eq (S4 A C B D) F0) (and (eq (S4 B A C D) F0) (not (Col A B C)))), not (eq (S4 A B C D) F0)
+++++
unfold S4 in |- *.
-----
Theorem diago_par_intersect : forall A B C D : Point, parallelogram A B C D -> ~ parallel A C B D.
Proof.
unfold parallelogram in |- *.
unfold parallel in |- *.
unfold S4 in |- *.

*****

*****
forall (A B C D : Point) (_ : and (eq (Fplus (S A C B) (S A B D)) F0) (and (eq (Fplus (S B A C) (S B C D)) F0) (not (Col A B C)))), not (eq (Fplus (S A B C) (S A C D)) F0)
+++++
intros.
-----
Theorem diago_par_intersect : forall A B C D : Point, parallelogram A B C D -> ~ parallel A C B D.
Proof.
unfold parallelogram in |- *.
unfold parallel in |- *.
unfold S4 in |- *.
intros.

*****
H : and (eq (Fplus (S A C B) (S A B D)) F0)\n (and (eq (Fplus (S B A C) (S B C D)) F0) (not (Col A B C)))
A,B,C,D : Point
*****
not (eq (Fplus (S A B C) (S A C D)) F0)
+++++
DecompAndAll.
-----
Theorem diago_par_intersect : forall A B C D : Point, parallelogram A B C D -> ~ parallel A C B D.
Proof.
unfold parallelogram in |- *.
unfold parallel in |- *.
unfold S4 in |- *.
intros.
DecompAndAll.

*****
H3 : not (Col A B C)
H2 : eq (Fplus (S B A C) (S B C D)) F0
H0 : eq (Fplus (S A C B) (S A B D)) F0
A,B,C,D : Point
*****
not (eq (Fplus (S A B C) (S A C D)) F0)
+++++
assert (S A C D = S A C B + S A B D + S B C D).
-----
Theorem diago_par_intersect : forall A B C D : Point, parallelogram A B C D -> ~ parallel A C B D.
Proof.
unfold parallelogram in |- *.
unfold parallel in |- *.
unfold S4 in |- *.
intros.
DecompAndAll.
assert (S A C D = S A C B + S A B D + S B C D).

*****
H3 : not (Col A B C)
H2 : eq (Fplus (S B A C) (S B C D)) F0
H0 : eq (Fplus (S A C B) (S A B D)) F0
A,B,C,D : Point
*****
eq (S A C D) (Fplus (Fplus (S A C B) (S A B D)) (S B C D))
+++++
Geometry.
-----
Theorem diago_par_intersect : forall A B C D : Point, parallelogram A B C D -> ~ parallel A C B D.
Proof.
unfold parallelogram in |- *.
unfold parallel in |- *.
unfold S4 in |- *.
intros.
DecompAndAll.
assert (S A C D = S A C B + S A B D + S B C D).

*****
H : eq (S A C D) (Fplus (Fplus (S A C B) (S A B D)) (S B C D))
H3 : not (Col A B C)
H2 : eq (Fplus (S B A C) (S B C D)) F0
H0 : eq (Fplus (S A C B) (S A B D)) F0
A,B,C,D : Point
*****
not (eq (Fplus (S A B C) (S A C D)) F0)
+++++
Geometry.
-----
Theorem diago_par_intersect : forall A B C D : Point, parallelogram A B C D -> ~ parallel A C B D.
Proof.
unfold parallelogram in |- *.
unfold parallel in |- *.
unfold S4 in |- *.
intros.
DecompAndAll.
assert (S A C D = S A C B + S A B D + S B C D).
Geometry.

*****
H : eq (S A C D) (Fplus (Fplus (S A C B) (S A B D)) (S B C D))
H3 : not (Col A B C)
H2 : eq (Fplus (S B A C) (S B C D)) F0
H0 : eq (Fplus (S A C B) (S A B D)) F0
A,B,C,D : Point
*****
not (eq (Fplus (S A B C) (S A C D)) F0)
+++++
RewriteVar (S A C B) H0.
-----
Theorem diago_par_intersect : forall A B C D : Point, parallelogram A B C D -> ~ parallel A C B D.
Proof.
unfold parallelogram in |- *.
unfold parallel in |- *.
unfold S4 in |- *.
intros.
DecompAndAll.
assert (S A C D = S A C B + S A B D + S B C D).
Geometry.
RewriteVar (S A C B) H0.

*****
H0 : eq (S A C B) (Fopp (S A B D))
H : eq (S A C D) (Fplus (Fplus (Fopp (S A B D)) (S A B D)) (S B C D))
H3 : not (Col A B C)
H2 : eq (Fplus (S B A C) (S B C D)) F0
A,B,C,D : Point
*****
not (eq (Fplus (S A B C) (S A C D)) F0)
+++++
RewriteVar (S B C D) H2.
-----
Theorem diago_par_intersect : forall A B C D : Point, parallelogram A B C D -> ~ parallel A C B D.
Proof.
unfold parallelogram in |- *.
unfold parallel in |- *.
unfold S4 in |- *.
intros.
DecompAndAll.
assert (S A C D = S A C B + S A B D + S B C D).
Geometry.
RewriteVar (S A C B) H0.
RewriteVar (S B C D) H2.

*****
H2 : eq (S B C D) (Fopp (S B A C))
H0 : eq (S A C B) (Fopp (S A B D))
H : eq (S A C D)\n (Fplus (Fplus (Fopp (S A B D)) (S A B D)) (Fopp (S B A C)))
H3 : not (Col A B C)
A,B,C,D : Point
*****
not (eq (Fplus (S A B C) (S A C D)) F0)
+++++
NormalizeRing H.
-----
Theorem diago_par_intersect : forall A B C D : Point, parallelogram A B C D -> ~ parallel A C B D.
Proof.
unfold parallelogram in |- *.
unfold parallel in |- *.
unfold S4 in |- *.
intros.
DecompAndAll.
assert (S A C D = S A C B + S A B D + S B C D).
Geometry.
RewriteVar (S A C B) H0.
RewriteVar (S B C D) H2.
NormalizeRing H.

*****
H : eq (S A C D) (Fopp (S B A C))
H2 : eq (S B C D) (Fopp (S B A C))
H0 : eq (S A C B) (Fopp (S A B D))
H3 : not (Col A B C)
A,B,C,D : Point
*****
not (eq (Fplus (S A B C) (S A C D)) F0)
+++++
rewrite H.
-----
Theorem diago_par_intersect : forall A B C D : Point, parallelogram A B C D -> ~ parallel A C B D.
Proof.
unfold parallelogram in |- *.
unfold parallel in |- *.
unfold S4 in |- *.
intros.
DecompAndAll.
assert (S A C D = S A C B + S A B D + S B C D).
Geometry.
RewriteVar (S A C B) H0.
RewriteVar (S B C D) H2.
NormalizeRing H.
rewrite H.

*****
H : eq (S A C D) (Fopp (S B A C))
H2 : eq (S B C D) (Fopp (S B A C))
H0 : eq (S A C B) (Fopp (S A B D))
H3 : not (Col A B C)
A,B,C,D : Point
*****
not (eq (Fplus (S A B C) (Fopp (S B A C))) F0)
+++++
replace (S B A C) with (- S A B C).
-----
Theorem diago_par_intersect : forall A B C D : Point, parallelogram A B C D -> ~ parallel A C B D.
Proof.
unfold parallelogram in |- *.
unfold parallel in |- *.
unfold S4 in |- *.
intros.
DecompAndAll.
assert (S A C D = S A C B + S A B D + S B C D).
Geometry.
RewriteVar (S A C B) H0.
RewriteVar (S B C D) H2.
NormalizeRing H.
rewrite H.
replace (S B A C) with (- S A B C).

*****
H : eq (S A C D) (Fopp (S B A C))
H2 : eq (S B C D) (Fopp (S B A C))
H0 : eq (S A C B) (Fopp (S A B D))
H3 : not (Col A B C)
A,B,C,D : Point
*****
not (eq (Fplus (S A B C) (Fopp (Fopp (S A B C)))) F0)
+++++
Geometry.
-----
Theorem diago_par_intersect : forall A B C D : Point, parallelogram A B C D -> ~ parallel A C B D.
Proof.
unfold parallelogram in |- *.
unfold parallel in |- *.
unfold S4 in |- *.
intros.
DecompAndAll.
assert (S A C D = S A C B + S A B D + S B C D).
Geometry.
RewriteVar (S A C B) H0.
RewriteVar (S B C D) H2.
NormalizeRing H.
rewrite H.
replace (S B A C) with (- S A B C).
Geometry.

*****
H : eq (S A C D) (Fopp (S B A C))
H2 : eq (S B C D) (Fopp (S B A C))
H0 : eq (S A C B) (Fopp (S A B D))
H3 : not (Col A B C)
A,B,C,D : Point
*****
not (eq (Fplus (S A B C) (Fopp (Fopp (S A B C)))) F0)
+++++
ring_simplify (S A B C + - - S A B C).
-----
Theorem diago_par_intersect : forall A B C D : Point, parallelogram A B C D -> ~ parallel A C B D.
Proof.
unfold parallelogram in |- *.
unfold parallel in |- *.
unfold S4 in |- *.
intros.
DecompAndAll.
assert (S A C D = S A C B + S A B D + S B C D).
Geometry.
RewriteVar (S A C B) H0.
RewriteVar (S B C D) H2.
NormalizeRing H.
rewrite H.
replace (S B A C) with (- S A B C).
Geometry.
ring_simplify (S A B C + - - S A B C).

*****
H : eq (S A C D) (Fopp (S B A C))
H2 : eq (S B C D) (Fopp (S B A C))
H0 : eq (S A C B) (Fopp (S A B D))
H3 : not (Col A B C)
A,B,C,D : Point
*****
not (eq (Fmult (Fplus F1 F1) (S A B C)) F0)
+++++
Geometry.
-----
Theorem diago_par_intersect : forall A B C D : Point, parallelogram A B C D -> ~ parallel A C B D.
Proof.
unfold parallelogram in |- *.
unfold parallel in |- *.
unfold S4 in |- *.
intros.
DecompAndAll.
assert (S A C D = S A C B + S A B D + S B C D).
Geometry.
RewriteVar (S A C B) H0.
RewriteVar (S B C D) H2.
NormalizeRing H.
rewrite H.
replace (S B A C) with (- S A B C).

*****
H : eq (S A C D) (Fopp (S B A C))
H2 : eq (S B C D) (Fopp (S B A C))
H0 : eq (S A C B) (Fopp (S A B D))
H3 : not (Col A B C)
A,B,C,D : Point
*****
eq (Fopp (S A B C)) (S B A C)
+++++
Geometry.
-----
Theorem diago_par_intersect : forall A B C D : Point, parallelogram A B C D -> ~ parallel A C B D.
Proof.
unfold parallelogram in |- *.
unfold parallel in |- *.
unfold S4 in |- *.
intros.
DecompAndAll.
assert (S A C D = S A C B + S A B D + S B C D).

*****

*****

+++++
Qed.
-----
Theorem para_not_col_1 :\n forall A B C D : Point, \n parallelogram A B C D -> \n ~ Col A B D.
-----
Theorem para_not_col_1 : forall A B C D : Point, parallelogram A B C D -> ~ Col A B D.

*****

*****
forall (A B C D : Point) (_ : parallelogram A B C D), not (Col A B D)
+++++
Proof.
-----
Theorem para_not_col_1 : forall A B C D : Point, parallelogram A B C D -> ~ Col A B D.
Proof.

*****

*****
forall (A B C D : Point) (_ : parallelogram A B C D), not (Col A B D)
+++++
unfold parallelogram in |- *.
-----
Theorem para_not_col_1 : forall A B C D : Point, parallelogram A B C D -> ~ Col A B D.
Proof.
unfold parallelogram in |- *.

*****

*****
forall (A B C D : Point) (_ : and (parallel A B C D) (and (parallel B C A D) (not (Col A B C)))), not (Col A B D)
+++++
unfold parallel in |- *.
-----
Theorem para_not_col_1 : forall A B C D : Point, parallelogram A B C D -> ~ Col A B D.
Proof.
unfold parallelogram in |- *.
unfold parallel in |- *.

*****

*****
forall (A B C D : Point) (_ : and (eq (S4 A C B D) F0) (and (eq (S4 B A C D) F0) (not (Col A B C)))), not (Col A B D)
+++++
unfold S4 in |- *.
-----
Theorem para_not_col_1 : forall A B C D : Point, parallelogram A B C D -> ~ Col A B D.
Proof.
unfold parallelogram in |- *.
unfold parallel in |- *.
unfold S4 in |- *.

*****

*****
forall (A B C D : Point) (_ : and (eq (Fplus (S A C B) (S A B D)) F0) (and (eq (Fplus (S B A C) (S B C D)) F0) (not (Col A B C)))), not (Col A B D)
+++++
intros.
-----
Theorem para_not_col_1 : forall A B C D : Point, parallelogram A B C D -> ~ Col A B D.
Proof.
unfold parallelogram in |- *.
unfold parallel in |- *.
unfold S4 in |- *.
intros.

*****
H : and (eq (Fplus (S A C B) (S A B D)) F0)\n (and (eq (Fplus (S B A C) (S B C D)) F0) (not (Col A B C)))
A,B,C,D : Point
*****
not (Col A B D)
+++++
decompose [and] H.
-----
Theorem para_not_col_1 : forall A B C D : Point, parallelogram A B C D -> ~ Col A B D.
Proof.
unfold parallelogram in |- *.
unfold parallel in |- *.
unfold S4 in |- *.
intros.
decompose [and] H.

*****
H3 : not (Col A B C)
H2 : eq (Fplus (S B A C) (S B C D)) F0
H0 : eq (Fplus (S A C B) (S A B D)) F0
H : and (eq (Fplus (S A C B) (S A B D)) F0)\n (and (eq (Fplus (S B A C) (S B C D)) F0) (not (Col A B C)))
A,B,C,D : Point
*****
not (Col A B D)
+++++
unfold not in |- *.
-----
Theorem para_not_col_1 : forall A B C D : Point, parallelogram A B C D -> ~ Col A B D.
Proof.
unfold parallelogram in |- *.
unfold parallel in |- *.
unfold S4 in |- *.
intros.
decompose [and] H.
unfold not in |- *.

*****
H3 : not (Col A B C)
H2 : eq (Fplus (S B A C) (S B C D)) F0
H0 : eq (Fplus (S A C B) (S A B D)) F0
H : and (eq (Fplus (S A C B) (S A B D)) F0)\n (and (eq (Fplus (S B A C) (S B C D)) F0) (not (Col A B C)))
A,B,C,D : Point
*****
forall _ : Col A B D, False
+++++
intro.
-----
Theorem para_not_col_1 : forall A B C D : Point, parallelogram A B C D -> ~ Col A B D.
Proof.
unfold parallelogram in |- *.
unfold parallel in |- *.
unfold S4 in |- *.
intros.
decompose [and] H.
unfold not in |- *.
intro.

*****
H1 : Col A B D
H3 : not (Col A B C)
H2 : eq (Fplus (S B A C) (S B C D)) F0
H0 : eq (Fplus (S A C B) (S A B D)) F0
H : and (eq (Fplus (S A C B) (S A B D)) F0)\n (and (eq (Fplus (S B A C) (S B C D)) F0) (not (Col A B C)))
A,B,C,D : Point
*****
False
+++++
rewrite H1 in H0.
-----
Theorem para_not_col_1 : forall A B C D : Point, parallelogram A B C D -> ~ Col A B D.
Proof.
unfold parallelogram in |- *.
unfold parallel in |- *.
unfold S4 in |- *.
intros.
decompose [and] H.
unfold not in |- *.
intro.
rewrite H1 in H0.

*****
H1 : Col A B D
H3 : not (Col A B C)
H2 : eq (Fplus (S B A C) (S B C D)) F0
H0 : eq (Fplus (S A C B) F0) F0
H : and (eq (Fplus (S A C B) (S A B D)) F0)\n (and (eq (Fplus (S B A C) (S B C D)) F0) (not (Col A B C)))
A,B,C,D : Point
*****
False
+++++
NormalizeRing H0.
-----
Theorem para_not_col_1 : forall A B C D : Point, parallelogram A B C D -> ~ Col A B D.
Proof.
unfold parallelogram in |- *.
unfold parallel in |- *.
unfold S4 in |- *.
intros.
decompose [and] H.
unfold not in |- *.
intro.
rewrite H1 in H0.
NormalizeRing H0.

*****
H0 : eq (S A C B) F0
H1 : Col A B D
H3 : not (Col A B C)
H2 : eq (Fplus (S B A C) (S B C D)) F0
H : and (eq (Fplus (S A C B) (S A B D)) F0)\n (and (eq (Fplus (S B A C) (S B C D)) F0) (not (Col A B C)))
A,B,C,D : Point
*****
False
+++++
assert (Col A C B).
-----
Theorem para_not_col_1 : forall A B C D : Point, parallelogram A B C D -> ~ Col A B D.
Proof.
unfold parallelogram in |- *.
unfold parallel in |- *.
unfold S4 in |- *.
intros.
decompose [and] H.
unfold not in |- *.
intro.
rewrite H1 in H0.
NormalizeRing H0.
assert (Col A C B).

*****
H0 : eq (S A C B) F0
H1 : Col A B D
H3 : not (Col A B C)
H2 : eq (Fplus (S B A C) (S B C D)) F0
H : and (eq (Fplus (S A C B) (S A B D)) F0)\n (and (eq (Fplus (S B A C) (S B C D)) F0) (not (Col A B C)))
A,B,C,D : Point
*****
Col A C B
+++++
Geometry.
-----
Theorem para_not_col_1 : forall A B C D : Point, parallelogram A B C D -> ~ Col A B D.
Proof.
unfold parallelogram in |- *.
unfold parallel in |- *.
unfold S4 in |- *.
intros.
decompose [and] H.
unfold not in |- *.
intro.
rewrite H1 in H0.
NormalizeRing H0.
assert (Col A C B).

*****
H4 : Col A C B
H0 : eq (S A C B) F0
H1 : Col A B D
H3 : not (Col A B C)
H2 : eq (Fplus (S B A C) (S B C D)) F0
H : and (eq (Fplus (S A C B) (S A B D)) F0)\n (and (eq (Fplus (S B A C) (S B C D)) F0) (not (Col A B C)))
A,B,C,D : Point
*****
False
+++++
Geometry.
-----
Theorem para_not_col_1 : forall A B C D : Point, parallelogram A B C D -> ~ Col A B D.
Proof.
unfold parallelogram in |- *.
unfold parallel in |- *.
unfold S4 in |- *.
intros.
decompose [and] H.
unfold not in |- *.
intro.
rewrite H1 in H0.
NormalizeRing H0.
assert (Col A C B).

*****

*****

+++++
Qed.
-----
Hint Resolve para_not_col_1: Geom.
-----
Theorem para_not_col_2 :\n forall A B C D : Point, parallelogram A B C D -> ~ Col B C D.
-----
Theorem para_not_col_2 : forall A B C D : Point, parallelogram A B C D -> ~ Col B C D.

*****

*****
forall (A B C D : Point) (_ : parallelogram A B C D), not (Col B C D)
+++++
Proof.
-----
Theorem para_not_col_2 : forall A B C D : Point, parallelogram A B C D -> ~ Col B C D.
Proof.

*****

*****
forall (A B C D : Point) (_ : parallelogram A B C D), not (Col B C D)
+++++
unfold parallelogram in |- *.
-----
Theorem para_not_col_2 : forall A B C D : Point, parallelogram A B C D -> ~ Col B C D.
Proof.
unfold parallelogram in |- *.

*****

*****
forall (A B C D : Point) (_ : and (parallel A B C D) (and (parallel B C A D) (not (Col A B C)))), not (Col B C D)
+++++
unfold parallel in |- *.
-----
Theorem para_not_col_2 : forall A B C D : Point, parallelogram A B C D -> ~ Col B C D.
Proof.
unfold parallelogram in |- *.
unfold parallel in |- *.

*****

*****
forall (A B C D : Point) (_ : and (eq (S4 A C B D) F0) (and (eq (S4 B A C D) F0) (not (Col A B C)))), not (Col B C D)
+++++
unfold S4 in |- *.
-----
Theorem para_not_col_2 : forall A B C D : Point, parallelogram A B C D -> ~ Col B C D.
Proof.
unfold parallelogram in |- *.
unfold parallel in |- *.
unfold S4 in |- *.

*****

*****
forall (A B C D : Point) (_ : and (eq (Fplus (S A C B) (S A B D)) F0) (and (eq (Fplus (S B A C) (S B C D)) F0) (not (Col A B C)))), not (Col B C D)
+++++
intros.
-----
Theorem para_not_col_2 : forall A B C D : Point, parallelogram A B C D -> ~ Col B C D.
Proof.
unfold parallelogram in |- *.
unfold parallel in |- *.
unfold S4 in |- *.
intros.

*****
H : and (eq (Fplus (S A C B) (S A B D)) F0)\n (and (eq (Fplus (S B A C) (S B C D)) F0) (not (Col A B C)))
A,B,C,D : Point
*****
not (Col B C D)
+++++
decompose [and] H.
-----
Theorem para_not_col_2 : forall A B C D : Point, parallelogram A B C D -> ~ Col B C D.
Proof.
unfold parallelogram in |- *.
unfold parallel in |- *.
unfold S4 in |- *.
intros.
decompose [and] H.

*****
H3 : not (Col A B C)
H2 : eq (Fplus (S B A C) (S B C D)) F0
H0 : eq (Fplus (S A C B) (S A B D)) F0
H : and (eq (Fplus (S A C B) (S A B D)) F0)\n (and (eq (Fplus (S B A C) (S B C D)) F0) (not (Col A B C)))
A,B,C,D : Point
*****
not (Col B C D)
+++++
unfold not in |- *.
-----
Theorem para_not_col_2 : forall A B C D : Point, parallelogram A B C D -> ~ Col B C D.
Proof.
unfold parallelogram in |- *.
unfold parallel in |- *.
unfold S4 in |- *.
intros.
decompose [and] H.
unfold not in |- *.

*****
H3 : not (Col A B C)
H2 : eq (Fplus (S B A C) (S B C D)) F0
H0 : eq (Fplus (S A C B) (S A B D)) F0
H : and (eq (Fplus (S A C B) (S A B D)) F0)\n (and (eq (Fplus (S B A C) (S B C D)) F0) (not (Col A B C)))
A,B,C,D : Point
*****
forall _ : Col B C D, False
+++++
intro.
-----
Theorem para_not_col_2 : forall A B C D : Point, parallelogram A B C D -> ~ Col B C D.
Proof.
unfold parallelogram in |- *.
unfold parallel in |- *.
unfold S4 in |- *.
intros.
decompose [and] H.
unfold not in |- *.
intro.

*****
H1 : Col B C D
H3 : not (Col A B C)
H2 : eq (Fplus (S B A C) (S B C D)) F0
H0 : eq (Fplus (S A C B) (S A B D)) F0
H : and (eq (Fplus (S A C B) (S A B D)) F0)\n (and (eq (Fplus (S B A C) (S B C D)) F0) (not (Col A B C)))
A,B,C,D : Point
*****
False
+++++
rewrite H1 in H2.
-----
Theorem para_not_col_2 : forall A B C D : Point, parallelogram A B C D -> ~ Col B C D.
Proof.
unfold parallelogram in |- *.
unfold parallel in |- *.
unfold S4 in |- *.
intros.
decompose [and] H.
unfold not in |- *.
intro.
rewrite H1 in H2.

*****
H1 : Col B C D
H3 : not (Col A B C)
H2 : eq (Fplus (S B A C) F0) F0
H0 : eq (Fplus (S A C B) (S A B D)) F0
H : and (eq (Fplus (S A C B) (S A B D)) F0)\n (and (eq (Fplus (S B A C) (S B C D)) F0) (not (Col A B C)))
A,B,C,D : Point
*****
False
+++++
NormalizeRing H2.
-----
Theorem para_not_col_2 : forall A B C D : Point, parallelogram A B C D -> ~ Col B C D.
Proof.
unfold parallelogram in |- *.
unfold parallel in |- *.
unfold S4 in |- *.
intros.
decompose [and] H.
unfold not in |- *.
intro.
rewrite H1 in H2.
NormalizeRing H2.

*****
H2 : eq (S B A C) F0
H1 : Col B C D
H3 : not (Col A B C)
H0 : eq (Fplus (S A C B) (S A B D)) F0
H : and (eq (Fplus (S A C B) (S A B D)) F0)\n (and (eq (Fplus (S B A C) (S B C D)) F0) (not (Col A B C)))
A,B,C,D : Point
*****
False
+++++
assert (Col B A C).
-----
Theorem para_not_col_2 : forall A B C D : Point, parallelogram A B C D -> ~ Col B C D.
Proof.
unfold parallelogram in |- *.
unfold parallel in |- *.
unfold S4 in |- *.
intros.
decompose [and] H.
unfold not in |- *.
intro.
rewrite H1 in H2.
NormalizeRing H2.
assert (Col B A C).

*****
H2 : eq (S B A C) F0
H1 : Col B C D
H3 : not (Col A B C)
H0 : eq (Fplus (S A C B) (S A B D)) F0
H : and (eq (Fplus (S A C B) (S A B D)) F0)\n (and (eq (Fplus (S B A C) (S B C D)) F0) (not (Col A B C)))
A,B,C,D : Point
*****
Col B A C
+++++
Geometry.
-----
Theorem para_not_col_2 : forall A B C D : Point, parallelogram A B C D -> ~ Col B C D.
Proof.
unfold parallelogram in |- *.
unfold parallel in |- *.
unfold S4 in |- *.
intros.
decompose [and] H.
unfold not in |- *.
intro.
rewrite H1 in H2.
NormalizeRing H2.
assert (Col B A C).

*****
H4 : Col B A C
H2 : eq (S B A C) F0
H1 : Col B C D
H3 : not (Col A B C)
H0 : eq (Fplus (S A C B) (S A B D)) F0
H : and (eq (Fplus (S A C B) (S A B D)) F0)\n (and (eq (Fplus (S B A C) (S B C D)) F0) (not (Col A B C)))
A,B,C,D : Point
*****
False
+++++
Geometry.
-----
Theorem para_not_col_2 : forall A B C D : Point, parallelogram A B C D -> ~ Col B C D.
Proof.
unfold parallelogram in |- *.
unfold parallel in |- *.
unfold S4 in |- *.
intros.
decompose [and] H.
unfold not in |- *.
intro.
rewrite H1 in H2.
NormalizeRing H2.
assert (Col B A C).

*****

*****

+++++
Qed.
-----
Hint Resolve para_not_col_2: Geom.
-----
Theorem para_not_col_3 :\n forall A B C D : Point, parallelogram A B C D -> ~ Col A C D.
-----
Theorem para_not_col_3 : forall A B C D : Point, parallelogram A B C D -> ~ Col A C D.

*****

*****
forall (A B C D : Point) (_ : parallelogram A B C D), not (Col A C D)
+++++
Proof.
-----
Theorem para_not_col_3 : forall A B C D : Point, parallelogram A B C D -> ~ Col A C D.
Proof.

*****

*****
forall (A B C D : Point) (_ : parallelogram A B C D), not (Col A C D)
+++++
unfold parallelogram in |- *.
-----
Theorem para_not_col_3 : forall A B C D : Point, parallelogram A B C D -> ~ Col A C D.
Proof.
unfold parallelogram in |- *.

*****

*****
forall (A B C D : Point) (_ : and (parallel A B C D) (and (parallel B C A D) (not (Col A B C)))), not (Col A C D)
+++++
unfold parallel in |- *.
-----
Theorem para_not_col_3 : forall A B C D : Point, parallelogram A B C D -> ~ Col A C D.
Proof.
unfold parallelogram in |- *.
unfold parallel in |- *.

*****

*****
forall (A B C D : Point) (_ : and (eq (S4 A C B D) F0) (and (eq (S4 B A C D) F0) (not (Col A B C)))), not (Col A C D)
+++++
unfold S4 in |- *.
-----
Theorem para_not_col_3 : forall A B C D : Point, parallelogram A B C D -> ~ Col A C D.
Proof.
unfold parallelogram in |- *.
unfold parallel in |- *.
unfold S4 in |- *.

*****

*****
forall (A B C D : Point) (_ : and (eq (Fplus (S A C B) (S A B D)) F0) (and (eq (Fplus (S B A C) (S B C D)) F0) (not (Col A B C)))), not (Col A C D)
+++++
intros.
-----
Theorem para_not_col_3 : forall A B C D : Point, parallelogram A B C D -> ~ Col A C D.
Proof.
unfold parallelogram in |- *.
unfold parallel in |- *.
unfold S4 in |- *.
intros.

*****
H : and (eq (Fplus (S A C B) (S A B D)) F0)\n (and (eq (Fplus (S B A C) (S B C D)) F0) (not (Col A B C)))
A,B,C,D : Point
*****
not (Col A C D)
+++++
decompose [and] H.
-----
Theorem para_not_col_3 : forall A B C D : Point, parallelogram A B C D -> ~ Col A C D.
Proof.
unfold parallelogram in |- *.
unfold parallel in |- *.
unfold S4 in |- *.
intros.
decompose [and] H.

*****
H3 : not (Col A B C)
H2 : eq (Fplus (S B A C) (S B C D)) F0
H0 : eq (Fplus (S A C B) (S A B D)) F0
H : and (eq (Fplus (S A C B) (S A B D)) F0)\n (and (eq (Fplus (S B A C) (S B C D)) F0) (not (Col A B C)))
A,B,C,D : Point
*****
not (Col A C D)
+++++
unfold not in |- *.
-----
Theorem para_not_col_3 : forall A B C D : Point, parallelogram A B C D -> ~ Col A C D.
Proof.
unfold parallelogram in |- *.
unfold parallel in |- *.
unfold S4 in |- *.
intros.
decompose [and] H.
unfold not in |- *.

*****
H3 : not (Col A B C)
H2 : eq (Fplus (S B A C) (S B C D)) F0
H0 : eq (Fplus (S A C B) (S A B D)) F0
H : and (eq (Fplus (S A C B) (S A B D)) F0)\n (and (eq (Fplus (S B A C) (S B C D)) F0) (not (Col A B C)))
A,B,C,D : Point
*****
forall _ : Col A C D, False
+++++
intro.
-----
Theorem para_not_col_3 : forall A B C D : Point, parallelogram A B C D -> ~ Col A C D.
Proof.
unfold parallelogram in |- *.
unfold parallel in |- *.
unfold S4 in |- *.
intros.
decompose [and] H.
unfold not in |- *.
intro.

*****
H1 : Col A C D
H3 : not (Col A B C)
H2 : eq (Fplus (S B A C) (S B C D)) F0
H0 : eq (Fplus (S A C B) (S A B D)) F0
H : and (eq (Fplus (S A C B) (S A B D)) F0)\n (and (eq (Fplus (S B A C) (S B C D)) F0) (not (Col A B C)))
A,B,C,D : Point
*****
False
+++++
assert (S A C D = S A C B + S A B D + S B C D).
-----
Theorem para_not_col_3 : forall A B C D : Point, parallelogram A B C D -> ~ Col A C D.
Proof.
unfold parallelogram in |- *.
unfold parallel in |- *.
unfold S4 in |- *.
intros.
decompose [and] H.
unfold not in |- *.
intro.
assert (S A C D = S A C B + S A B D + S B C D).

*****
H1 : Col A C D
H3 : not (Col A B C)
H2 : eq (Fplus (S B A C) (S B C D)) F0
H0 : eq (Fplus (S A C B) (S A B D)) F0
H : and (eq (Fplus (S A C B) (S A B D)) F0)\n (and (eq (Fplus (S B A C) (S B C D)) F0) (not (Col A B C)))
A,B,C,D : Point
*****
eq (S A C D) (Fplus (Fplus (S A C B) (S A B D)) (S B C D))
+++++
Geometry.
-----
Theorem para_not_col_3 : forall A B C D : Point, parallelogram A B C D -> ~ Col A C D.
Proof.
unfold parallelogram in |- *.
unfold parallel in |- *.
unfold S4 in |- *.
intros.
decompose [and] H.
unfold not in |- *.
intro.
assert (S A C D = S A C B + S A B D + S B C D).

*****
H4 : eq (S A C D) (Fplus (Fplus (S A C B) (S A B D)) (S B C D))
H1 : Col A C D
H3 : not (Col A B C)
H2 : eq (Fplus (S B A C) (S B C D)) F0
H0 : eq (Fplus (S A C B) (S A B D)) F0
H : and (eq (Fplus (S A C B) (S A B D)) F0)\n (and (eq (Fplus (S B A C) (S B C D)) F0) (not (Col A B C)))
A,B,C,D : Point
*****
False
+++++
Geometry.
-----
Theorem para_not_col_3 : forall A B C D : Point, parallelogram A B C D -> ~ Col A C D.
Proof.
unfold parallelogram in |- *.
unfold parallel in |- *.
unfold S4 in |- *.
intros.
decompose [and] H.
unfold not in |- *.
intro.
assert (S A C D = S A C B + S A B D + S B C D).
Geometry.

*****
H4 : eq (S A C D) (Fplus (Fplus (S A C B) (S A B D)) (S B C D))
H1 : Col A C D
H3 : not (Col A B C)
H2 : eq (Fplus (S B A C) (S B C D)) F0
H0 : eq (Fplus (S A C B) (S A B D)) F0
H : and (eq (Fplus (S A C B) (S A B D)) F0)\n (and (eq (Fplus (S B A C) (S B C D)) F0) (not (Col A B C)))
A,B,C,D : Point
*****
False
+++++
rewrite H1 in H4.
-----
Theorem para_not_col_3 : forall A B C D : Point, parallelogram A B C D -> ~ Col A C D.
Proof.
unfold parallelogram in |- *.
unfold parallel in |- *.
unfold S4 in |- *.
intros.
decompose [and] H.
unfold not in |- *.
intro.
assert (S A C D = S A C B + S A B D + S B C D).
Geometry.
rewrite H1 in H4.

*****
H4 : eq F0 (Fplus (Fplus (S A C B) (S A B D)) (S B C D))
H1 : Col A C D
H3 : not (Col A B C)
H2 : eq (Fplus (S B A C) (S B C D)) F0
H0 : eq (Fplus (S A C B) (S A B D)) F0
H : and (eq (Fplus (S A C B) (S A B D)) F0)\n (and (eq (Fplus (S B A C) (S B C D)) F0) (not (Col A B C)))
A,B,C,D : Point
*****
False
+++++
rewrite H0 in H4.
-----
Theorem para_not_col_3 : forall A B C D : Point, parallelogram A B C D -> ~ Col A C D.
Proof.
unfold parallelogram in |- *.
unfold parallel in |- *.
unfold S4 in |- *.
intros.
decompose [and] H.
unfold not in |- *.
intro.
assert (S A C D = S A C B + S A B D + S B C D).
Geometry.
rewrite H1 in H4.
rewrite H0 in H4.

*****
H4 : eq F0 (Fplus F0 (S B C D))
H1 : Col A C D
H3 : not (Col A B C)
H2 : eq (Fplus (S B A C) (S B C D)) F0
H0 : eq (Fplus (S A C B) (S A B D)) F0
H : and (eq (Fplus (S A C B) (S A B D)) F0)\n (and (eq (Fplus (S B A C) (S B C D)) F0) (not (Col A B C)))
A,B,C,D : Point
*****
False
+++++
NormalizeRing H4.
-----
Theorem para_not_col_3 : forall A B C D : Point, parallelogram A B C D -> ~ Col A C D.
Proof.
unfold parallelogram in |- *.
unfold parallel in |- *.
unfold S4 in |- *.
intros.
decompose [and] H.
unfold not in |- *.
intro.
assert (S A C D = S A C B + S A B D + S B C D).
Geometry.
rewrite H1 in H4.
rewrite H0 in H4.
NormalizeRing H4.

*****
H4 : eq F0 (S B C D)
H1 : Col A C D
H3 : not (Col A B C)
H2 : eq (Fplus (S B A C) (S B C D)) F0
H0 : eq (Fplus (S A C B) (S A B D)) F0
H : and (eq (Fplus (S A C B) (S A B D)) F0)\n (and (eq (Fplus (S B A C) (S B C D)) F0) (not (Col A B C)))
A,B,C,D : Point
*****
False
+++++
assert (Col B C D).
-----
Theorem para_not_col_3 : forall A B C D : Point, parallelogram A B C D -> ~ Col A C D.
Proof.
unfold parallelogram in |- *.
unfold parallel in |- *.
unfold S4 in |- *.
intros.
decompose [and] H.
unfold not in |- *.
intro.
assert (S A C D = S A C B + S A B D + S B C D).
Geometry.
rewrite H1 in H4.
rewrite H0 in H4.
NormalizeRing H4.
assert (Col B C D).

*****
H4 : eq F0 (S B C D)
H1 : Col A C D
H3 : not (Col A B C)
H2 : eq (Fplus (S B A C) (S B C D)) F0
H0 : eq (Fplus (S A C B) (S A B D)) F0
H : and (eq (Fplus (S A C B) (S A B D)) F0)\n (and (eq (Fplus (S B A C) (S B C D)) F0) (not (Col A B C)))
A,B,C,D : Point
*****
Col B C D
+++++
Geometry.
-----
Theorem para_not_col_3 : forall A B C D : Point, parallelogram A B C D -> ~ Col A C D.
Proof.
unfold parallelogram in |- *.
unfold parallel in |- *.
unfold S4 in |- *.
intros.
decompose [and] H.
unfold not in |- *.
intro.
assert (S A C D = S A C B + S A B D + S B C D).
Geometry.
rewrite H1 in H4.
rewrite H0 in H4.
NormalizeRing H4.
assert (Col B C D).

*****
H5 : Col B C D
H4 : eq F0 (S B C D)
H1 : Col A C D
H3 : not (Col A B C)
H2 : eq (Fplus (S B A C) (S B C D)) F0
H0 : eq (Fplus (S A C B) (S A B D)) F0
H : and (eq (Fplus (S A C B) (S A B D)) F0)\n (and (eq (Fplus (S B A C) (S B C D)) F0) (not (Col A B C)))
A,B,C,D : Point
*****
False
+++++
Geometry.
-----
Theorem para_not_col_3 : forall A B C D : Point, parallelogram A B C D -> ~ Col A C D.
Proof.
unfold parallelogram in |- *.
unfold parallel in |- *.
unfold S4 in |- *.
intros.
decompose [and] H.
unfold not in |- *.
intro.
assert (S A C D = S A C B + S A B D + S B C D).
Geometry.
rewrite H1 in H4.
rewrite H0 in H4.
NormalizeRing H4.
assert (Col B C D).
Geometry.

*****
H5 : Col B C D
H4 : eq F0 (S B C D)
H1 : Col A C D
H3 : not (Col A B C)
H2 : eq (Fplus (S B A C) (S B C D)) F0
H0 : eq (Fplus (S A C B) (S A B D)) F0
H : and (eq (Fplus (S A C B) (S A B D)) F0)\n (and (eq (Fplus (S B A C) (S B C D)) F0) (not (Col A B C)))
A,B,C,D : Point
*****
False
+++++
assert (parallelogram A B C D).
-----
Theorem para_not_col_3 : forall A B C D : Point, parallelogram A B C D -> ~ Col A C D.
Proof.
unfold parallelogram in |- *.
unfold parallel in |- *.
unfold S4 in |- *.
intros.
decompose [and] H.
unfold not in |- *.
intro.
assert (S A C D = S A C B + S A B D + S B C D).
Geometry.
rewrite H1 in H4.
rewrite H0 in H4.
NormalizeRing H4.
assert (Col B C D).
Geometry.
assert (parallelogram A B C D).

*****
H5 : Col B C D
H4 : eq F0 (S B C D)
H1 : Col A C D
H3 : not (Col A B C)
H2 : eq (Fplus (S B A C) (S B C D)) F0
H0 : eq (Fplus (S A C B) (S A B D)) F0
H : and (eq (Fplus (S A C B) (S A B D)) F0)\n (and (eq (Fplus (S B A C) (S B C D)) F0) (not (Col A B C)))
A,B,C,D : Point
*****
parallelogram A B C D
+++++
unfold parallelogram in |- *.
-----
Theorem para_not_col_3 : forall A B C D : Point, parallelogram A B C D -> ~ Col A C D.
Proof.
unfold parallelogram in |- *.
unfold parallel in |- *.
unfold S4 in |- *.
intros.
decompose [and] H.
unfold not in |- *.
intro.
assert (S A C D = S A C B + S A B D + S B C D).
Geometry.
rewrite H1 in H4.
rewrite H0 in H4.
NormalizeRing H4.
assert (Col B C D).
Geometry.
assert (parallelogram A B C D).
unfold parallelogram in |- *.

*****
H5 : Col B C D
H4 : eq F0 (S B C D)
H1 : Col A C D
H3 : not (Col A B C)
H2 : eq (Fplus (S B A C) (S B C D)) F0
H0 : eq (Fplus (S A C B) (S A B D)) F0
H : and (eq (Fplus (S A C B) (S A B D)) F0)\n (and (eq (Fplus (S B A C) (S B C D)) F0) (not (Col A B C)))
A,B,C,D : Point
*****
and (parallel A B C D) (and (parallel B C A D) (not (Col A B C)))
+++++
auto.
-----
Theorem para_not_col_3 : forall A B C D : Point, parallelogram A B C D -> ~ Col A C D.
Proof.
unfold parallelogram in |- *.
unfold parallel in |- *.
unfold S4 in |- *.
intros.
decompose [and] H.
unfold not in |- *.
intro.
assert (S A C D = S A C B + S A B D + S B C D).
Geometry.
rewrite H1 in H4.
rewrite H0 in H4.
NormalizeRing H4.
assert (Col B C D).
Geometry.
assert (parallelogram A B C D).

*****
H6 : parallelogram A B C D
H5 : Col B C D
H4 : eq F0 (S B C D)
H1 : Col A C D
H3 : not (Col A B C)
H2 : eq (Fplus (S B A C) (S B C D)) F0
H0 : eq (Fplus (S A C B) (S A B D)) F0
H : and (eq (Fplus (S A C B) (S A B D)) F0)\n (and (eq (Fplus (S B A C) (S B C D)) F0) (not (Col A B C)))
A,B,C,D : Point
*****
False
+++++
assert (~ Col B C D).
-----
Theorem para_not_col_3 : forall A B C D : Point, parallelogram A B C D -> ~ Col A C D.
Proof.
unfold parallelogram in |- *.
unfold parallel in |- *.
unfold S4 in |- *.
intros.
decompose [and] H.
unfold not in |- *.
intro.
assert (S A C D = S A C B + S A B D + S B C D).
Geometry.
rewrite H1 in H4.
rewrite H0 in H4.
NormalizeRing H4.
assert (Col B C D).
Geometry.
assert (parallelogram A B C D).
assert (~ Col B C D).

*****
H6 : parallelogram A B C D
H5 : Col B C D
H4 : eq F0 (S B C D)
H1 : Col A C D
H3 : not (Col A B C)
H2 : eq (Fplus (S B A C) (S B C D)) F0
H0 : eq (Fplus (S A C B) (S A B D)) F0
H : and (eq (Fplus (S A C B) (S A B D)) F0)\n (and (eq (Fplus (S B A C) (S B C D)) F0) (not (Col A B C)))
A,B,C,D : Point
*****
not (Col B C D)
+++++
eauto with Geom.
-----
Theorem para_not_col_3 : forall A B C D : Point, parallelogram A B C D -> ~ Col A C D.
Proof.
unfold parallelogram in |- *.
unfold parallel in |- *.
unfold S4 in |- *.
intros.
decompose [and] H.
unfold not in |- *.
intro.
assert (S A C D = S A C B + S A B D + S B C D).
Geometry.
rewrite H1 in H4.
rewrite H0 in H4.
NormalizeRing H4.
assert (Col B C D).
Geometry.
assert (parallelogram A B C D).
assert (~ Col B C D).

*****
H7 : not (Col B C D)
H6 : parallelogram A B C D
H5 : Col B C D
H4 : eq F0 (S B C D)
H1 : Col A C D
H3 : not (Col A B C)
H2 : eq (Fplus (S B A C) (S B C D)) F0
H0 : eq (Fplus (S A C B) (S A B D)) F0
H : and (eq (Fplus (S A C B) (S A B D)) F0)\n (and (eq (Fplus (S B A C) (S B C D)) F0) (not (Col A B C)))
A,B,C,D : Point
*****
False
+++++
eauto with Geom.
-----
Theorem para_not_col_3 : forall A B C D : Point, parallelogram A B C D -> ~ Col A C D.
Proof.
unfold parallelogram in |- *.
unfold parallel in |- *.
unfold S4 in |- *.
intros.
decompose [and] H.
unfold not in |- *.
intro.
assert (S A C D = S A C B + S A B D + S B C D).

*****

*****

+++++
Qed.
-----
Hint Resolve para_not_col_3: Geom.
-----
Theorem para_1 : forall A B C D : Point, \n  parallelogram A B C D -> parallelogram A D C B.
-----
Theorem para_1 : forall A B C D : Point, parallelogram A B C D -> parallelogram A D C B.

*****

*****
forall (A B C D : Point) (_ : parallelogram A B C D), parallelogram A D C B
+++++
Proof.
-----
Theorem para_1 : forall A B C D : Point, parallelogram A B C D -> parallelogram A D C B.
Proof.

*****

*****
forall (A B C D : Point) (_ : parallelogram A B C D), parallelogram A D C B
+++++
unfold parallelogram in |- *.
-----
Theorem para_1 : forall A B C D : Point, parallelogram A B C D -> parallelogram A D C B.
Proof.
unfold parallelogram in |- *.

*****

*****
forall (A B C D : Point) (_ : and (parallel A B C D) (and (parallel B C A D) (not (Col A B C)))), and (parallel A D C B) (and (parallel D C A B) (not (Col A D C)))
+++++
intros.
-----
Theorem para_1 : forall A B C D : Point, parallelogram A B C D -> parallelogram A D C B.
Proof.
unfold parallelogram in |- *.
intros.

*****
H : and (parallel A B C D) (and (parallel B C A D) (not (Col A B C)))
A,B,C,D : Point
*****
and (parallel A D C B) (and (parallel D C A B) (not (Col A D C)))
+++++
decompose [and] H.
-----
Theorem para_1 : forall A B C D : Point, parallelogram A B C D -> parallelogram A D C B.
Proof.
unfold parallelogram in |- *.
intros.
decompose [and] H.

*****
H3 : not (Col A B C)
H2 : parallel B C A D
H0 : parallel A B C D
H : and (parallel A B C D) (and (parallel B C A D) (not (Col A B C)))
A,B,C,D : Point
*****
and (parallel A D C B) (and (parallel D C A B) (not (Col A D C)))
+++++
repeat split.
-----
Theorem para_1 : forall A B C D : Point, parallelogram A B C D -> parallelogram A D C B.
Proof.
unfold parallelogram in |- *.
intros.
decompose [and] H.
repeat split.

*****
H3 : not (Col A B C)
H2 : parallel B C A D
H0 : parallel A B C D
H : and (parallel A B C D) (and (parallel B C A D) (not (Col A B C)))
A,B,C,D : Point
*****
parallel A D C B
+++++
Geometry.
-----
Theorem para_1 : forall A B C D : Point, parallelogram A B C D -> parallelogram A D C B.
Proof.
unfold parallelogram in |- *.
intros.
decompose [and] H.
repeat split.

*****
H3 : not (Col A B C)
H2 : parallel B C A D
H0 : parallel A B C D
H : and (parallel A B C D) (and (parallel B C A D) (not (Col A B C)))
A,B,C,D : Point
*****
parallel D C A B
+++++
Geometry.
-----
Theorem para_1 : forall A B C D : Point, parallelogram A B C D -> parallelogram A D C B.
Proof.
unfold parallelogram in |- *.
intros.
decompose [and] H.
repeat split.

*****
H3 : not (Col A B C)
H2 : parallel B C A D
H0 : parallel A B C D
H : and (parallel A B C D) (and (parallel B C A D) (not (Col A B C)))
A,B,C,D : Point
*****
not (Col A D C)
+++++
Geometry.
-----
Theorem para_1 : forall A B C D : Point, parallelogram A B C D -> parallelogram A D C B.
Proof.
unfold parallelogram in |- *.
intros.
decompose [and] H.
repeat split.
Geometry.

*****
H3 : not (Col A B C)
H2 : parallel B C A D
H0 : parallel A B C D
H : and (parallel A B C D) (and (parallel B C A D) (not (Col A B C)))
A,B,C,D : Point
*****
not (Col A D C)
+++++
assert (parallelogram A B C D).
-----
Theorem para_1 : forall A B C D : Point, parallelogram A B C D -> parallelogram A D C B.
Proof.
unfold parallelogram in |- *.
intros.
decompose [and] H.
repeat split.
Geometry.
assert (parallelogram A B C D).

*****
H3 : not (Col A B C)
H2 : parallel B C A D
H0 : parallel A B C D
H : and (parallel A B C D) (and (parallel B C A D) (not (Col A B C)))
A,B,C,D : Point
*****
parallelogram A B C D
+++++
unfold parallelogram in |- *.
-----
Theorem para_1 : forall A B C D : Point, parallelogram A B C D -> parallelogram A D C B.
Proof.
unfold parallelogram in |- *.
intros.
decompose [and] H.
repeat split.
Geometry.
assert (parallelogram A B C D).
unfold parallelogram in |- *.

*****
H3 : not (Col A B C)
H2 : parallel B C A D
H0 : parallel A B C D
H : and (parallel A B C D) (and (parallel B C A D) (not (Col A B C)))
A,B,C,D : Point
*****
and (parallel A B C D) (and (parallel B C A D) (not (Col A B C)))
+++++
auto.
-----
Theorem para_1 : forall A B C D : Point, parallelogram A B C D -> parallelogram A D C B.
Proof.
unfold parallelogram in |- *.
intros.
decompose [and] H.
repeat split.
Geometry.
assert (parallelogram A B C D).

*****
H1 : parallelogram A B C D
H3 : not (Col A B C)
H2 : parallel B C A D
H0 : parallel A B C D
H : and (parallel A B C D) (and (parallel B C A D) (not (Col A B C)))
A,B,C,D : Point
*****
not (Col A D C)
+++++
unfold parallelogram in |- *.
-----
Theorem para_1 : forall A B C D : Point, parallelogram A B C D -> parallelogram A D C B.
Proof.
unfold parallelogram in |- *.
intros.
decompose [and] H.
repeat split.
Geometry.
assert (parallelogram A B C D).
unfold parallelogram in |- *.

*****
H1 : parallelogram A B C D
H3 : not (Col A B C)
H2 : parallel B C A D
H0 : parallel A B C D
H : and (parallel A B C D) (and (parallel B C A D) (not (Col A B C)))
A,B,C,D : Point
*****
not (Col A D C)
+++++
auto.
-----
Theorem para_1 : forall A B C D : Point, parallelogram A B C D -> parallelogram A D C B.
Proof.
unfold parallelogram in |- *.
intros.
decompose [and] H.
repeat split.
Geometry.
assert (parallelogram A B C D).
unfold parallelogram in |- *.
auto.

*****
H1 : parallelogram A B C D
H3 : not (Col A B C)
H2 : parallel B C A D
H0 : parallel A B C D
H : and (parallel A B C D) (and (parallel B C A D) (not (Col A B C)))
A,B,C,D : Point
*****
not (Col A D C)
+++++
assert (~ Col A C D).
-----
Theorem para_1 : forall A B C D : Point, parallelogram A B C D -> parallelogram A D C B.
Proof.
unfold parallelogram in |- *.
intros.
decompose [and] H.
repeat split.
Geometry.
assert (parallelogram A B C D).
unfold parallelogram in |- *.
auto.
assert (~ Col A C D).

*****
H1 : parallelogram A B C D
H3 : not (Col A B C)
H2 : parallel B C A D
H0 : parallel A B C D
H : and (parallel A B C D) (and (parallel B C A D) (not (Col A B C)))
A,B,C,D : Point
*****
not (Col A C D)
+++++
eauto with Geom.
-----
Theorem para_1 : forall A B C D : Point, parallelogram A B C D -> parallelogram A D C B.
Proof.
unfold parallelogram in |- *.
intros.
decompose [and] H.
repeat split.
Geometry.
assert (parallelogram A B C D).
unfold parallelogram in |- *.
auto.
assert (~ Col A C D).

*****
H4 : not (Col A C D)
H1 : parallelogram A B C D
H3 : not (Col A B C)
H2 : parallel B C A D
H0 : parallel A B C D
H : and (parallel A B C D) (and (parallel B C A D) (not (Col A B C)))
A,B,C,D : Point
*****
not (Col A D C)
+++++
eauto with Geom.
-----
Theorem para_1 : forall A B C D : Point, parallelogram A B C D -> parallelogram A D C B.
Proof.
unfold parallelogram in |- *.
intros.
decompose [and] H.
repeat split.

*****

*****

+++++
Qed.
-----
Hint Resolve para_1: Geom.
-----
Theorem para_2 : forall A B C D : Point, \n  parallelogram A B C D -> parallelogram B A D C.
-----
Theorem para_2 : forall A B C D : Point, parallelogram A B C D -> parallelogram B A D C.

*****

*****
forall (A B C D : Point) (_ : parallelogram A B C D), parallelogram B A D C
+++++
Proof.
-----
Theorem para_2 : forall A B C D : Point, parallelogram A B C D -> parallelogram B A D C.
Proof.

*****

*****
forall (A B C D : Point) (_ : parallelogram A B C D), parallelogram B A D C
+++++
intros.
-----
Theorem para_2 : forall A B C D : Point, parallelogram A B C D -> parallelogram B A D C.
Proof.
intros.

*****
H : parallelogram A B C D
A,B,C,D : Point
*****
parallelogram B A D C
+++++
assert (~Col A B D).
-----
Theorem para_2 : forall A B C D : Point, parallelogram A B C D -> parallelogram B A D C.
Proof.
intros.
assert (~Col A B D).

*****
H : parallelogram A B C D
A,B,C,D : Point
*****
not (Col A B D)
+++++
eauto with Geom.
-----
Theorem para_2 : forall A B C D : Point, parallelogram A B C D -> parallelogram B A D C.
Proof.
intros.
assert (~Col A B D).

*****
H0 : not (Col A B D)
H : parallelogram A B C D
A,B,C,D : Point
*****
parallelogram B A D C
+++++
unfold parallelogram in *.
-----
Theorem para_2 : forall A B C D : Point, parallelogram A B C D -> parallelogram B A D C.
Proof.
intros.
assert (~Col A B D).
unfold parallelogram in *.

*****
H0 : not (Col A B D)
H : and (parallel A B C D) (and (parallel B C A D) (not (Col A B C)))
A,B,C,D : Point
*****
and (parallel B A D C) (and (parallel A D B C) (not (Col B A D)))
+++++
intros.
-----
Theorem para_2 : forall A B C D : Point, parallelogram A B C D -> parallelogram B A D C.
Proof.
intros.
assert (~Col A B D).
unfold parallelogram in *.
intros.

*****
H0 : not (Col A B D)
H : and (parallel A B C D) (and (parallel B C A D) (not (Col A B C)))
A,B,C,D : Point
*****
and (parallel B A D C) (and (parallel A D B C) (not (Col B A D)))
+++++
decompose [and] H.
-----
Theorem para_2 : forall A B C D : Point, parallelogram A B C D -> parallelogram B A D C.
Proof.
intros.
assert (~Col A B D).
unfold parallelogram in *.
intros.
decompose [and] H.

*****
H4 : not (Col A B C)
H3 : parallel B C A D
H1 : parallel A B C D
H0 : not (Col A B D)
H : and (parallel A B C D) (and (parallel B C A D) (not (Col A B C)))
A,B,C,D : Point
*****
and (parallel B A D C) (and (parallel A D B C) (not (Col B A D)))
+++++
repeat split.
-----
Theorem para_2 : forall A B C D : Point, parallelogram A B C D -> parallelogram B A D C.
Proof.
intros.
assert (~Col A B D).
unfold parallelogram in *.
intros.
decompose [and] H.
repeat split.

*****
H4 : not (Col A B C)
H3 : parallel B C A D
H1 : parallel A B C D
H0 : not (Col A B D)
H : and (parallel A B C D) (and (parallel B C A D) (not (Col A B C)))
A,B,C,D : Point
*****
parallel B A D C
+++++
Geometry.
-----
Theorem para_2 : forall A B C D : Point, parallelogram A B C D -> parallelogram B A D C.
Proof.
intros.
assert (~Col A B D).
unfold parallelogram in *.
intros.
decompose [and] H.
repeat split.

*****
H4 : not (Col A B C)
H3 : parallel B C A D
H1 : parallel A B C D
H0 : not (Col A B D)
H : and (parallel A B C D) (and (parallel B C A D) (not (Col A B C)))
A,B,C,D : Point
*****
parallel A D B C
+++++
Geometry.
-----
Theorem para_2 : forall A B C D : Point, parallelogram A B C D -> parallelogram B A D C.
Proof.
intros.
assert (~Col A B D).
unfold parallelogram in *.
intros.
decompose [and] H.
repeat split.

*****
H4 : not (Col A B C)
H3 : parallel B C A D
H1 : parallel A B C D
H0 : not (Col A B D)
H : and (parallel A B C D) (and (parallel B C A D) (not (Col A B C)))
A,B,C,D : Point
*****
not (Col B A D)
+++++
Geometry.
-----
Theorem para_2 : forall A B C D : Point, parallelogram A B C D -> parallelogram B A D C.
Proof.
intros.
assert (~Col A B D).

*****

*****

+++++
Qed.
-----
Hint Resolve para_2: Geom.
-----
Theorem para_3 : forall A B C D : Point, \n  parallelogram A B C D -> parallelogram D C B A.
-----
Theorem para_3 : forall A B C D : Point, parallelogram A B C D -> parallelogram D C B A.

*****

*****
forall (A B C D : Point) (_ : parallelogram A B C D), parallelogram D C B A
+++++
Proof.
-----
Theorem para_3 : forall A B C D : Point, parallelogram A B C D -> parallelogram D C B A.
Proof.

*****

*****
forall (A B C D : Point) (_ : parallelogram A B C D), parallelogram D C B A
+++++
intros.
-----
Theorem para_3 : forall A B C D : Point, parallelogram A B C D -> parallelogram D C B A.
Proof.
intros.

*****
H : parallelogram A B C D
A,B,C,D : Point
*****
parallelogram D C B A
+++++
assert (~Col D C B).
-----
Theorem para_3 : forall A B C D : Point, parallelogram A B C D -> parallelogram D C B A.
Proof.
intros.
assert (~Col D C B).

*****
H : parallelogram A B C D
A,B,C,D : Point
*****
not (Col D C B)
+++++
eauto with Geom.
-----
Theorem para_3 : forall A B C D : Point, parallelogram A B C D -> parallelogram D C B A.
Proof.
intros.
assert (~Col D C B).

*****
H0 : not (Col D C B)
H : parallelogram A B C D
A,B,C,D : Point
*****
parallelogram D C B A
+++++
unfold parallelogram in *.
-----
Theorem para_3 : forall A B C D : Point, parallelogram A B C D -> parallelogram D C B A.
Proof.
intros.
assert (~Col D C B).
unfold parallelogram in *.

*****
H0 : not (Col D C B)
H : and (parallel A B C D) (and (parallel B C A D) (not (Col A B C)))
A,B,C,D : Point
*****
and (parallel D C B A) (and (parallel C B D A) (not (Col D C B)))
+++++
intros.
-----
Theorem para_3 : forall A B C D : Point, parallelogram A B C D -> parallelogram D C B A.
Proof.
intros.
assert (~Col D C B).
unfold parallelogram in *.
intros.

*****
H0 : not (Col D C B)
H : and (parallel A B C D) (and (parallel B C A D) (not (Col A B C)))
A,B,C,D : Point
*****
and (parallel D C B A) (and (parallel C B D A) (not (Col D C B)))
+++++
decompose [and] H.
-----
Theorem para_3 : forall A B C D : Point, parallelogram A B C D -> parallelogram D C B A.
Proof.
intros.
assert (~Col D C B).
unfold parallelogram in *.
intros.
decompose [and] H.

*****
H4 : not (Col A B C)
H3 : parallel B C A D
H1 : parallel A B C D
H0 : not (Col D C B)
H : and (parallel A B C D) (and (parallel B C A D) (not (Col A B C)))
A,B,C,D : Point
*****
and (parallel D C B A) (and (parallel C B D A) (not (Col D C B)))
+++++
repeat split.
-----
Theorem para_3 : forall A B C D : Point, parallelogram A B C D -> parallelogram D C B A.
Proof.
intros.
assert (~Col D C B).
unfold parallelogram in *.
intros.
decompose [and] H.
repeat split.

*****
H4 : not (Col A B C)
H3 : parallel B C A D
H1 : parallel A B C D
H0 : not (Col D C B)
H : and (parallel A B C D) (and (parallel B C A D) (not (Col A B C)))
A,B,C,D : Point
*****
parallel D C B A
+++++
Geometry.
-----
Theorem para_3 : forall A B C D : Point, parallelogram A B C D -> parallelogram D C B A.
Proof.
intros.
assert (~Col D C B).
unfold parallelogram in *.
intros.
decompose [and] H.
repeat split.

*****
H4 : not (Col A B C)
H3 : parallel B C A D
H1 : parallel A B C D
H0 : not (Col D C B)
H : and (parallel A B C D) (and (parallel B C A D) (not (Col A B C)))
A,B,C,D : Point
*****
parallel C B D A
+++++
Geometry.
-----
Theorem para_3 : forall A B C D : Point, parallelogram A B C D -> parallelogram D C B A.
Proof.
intros.
assert (~Col D C B).
unfold parallelogram in *.
intros.
decompose [and] H.
repeat split.

*****
H4 : not (Col A B C)
H3 : parallel B C A D
H1 : parallel A B C D
H0 : not (Col D C B)
H : and (parallel A B C D) (and (parallel B C A D) (not (Col A B C)))
A,B,C,D : Point
*****
not (Col D C B)
+++++
Geometry.
-----
Theorem para_3 : forall A B C D : Point, parallelogram A B C D -> parallelogram D C B A.
Proof.
intros.
assert (~Col D C B).

*****

*****

+++++
Qed.
-----
Hint Resolve para_3: Geom.
-----
Theorem para_4 : forall A B C D : Point, \n  parallelogram A B C D -> parallelogram C B A D.
-----
Theorem para_4 : forall A B C D : Point, parallelogram A B C D -> parallelogram C B A D.

*****

*****
forall (A B C D : Point) (_ : parallelogram A B C D), parallelogram C B A D
+++++
Proof.
-----
Theorem para_4 : forall A B C D : Point, parallelogram A B C D -> parallelogram C B A D.
Proof.

*****

*****
forall (A B C D : Point) (_ : parallelogram A B C D), parallelogram C B A D
+++++
intros.
-----
Theorem para_4 : forall A B C D : Point, parallelogram A B C D -> parallelogram C B A D.
Proof.
intros.

*****
H : parallelogram A B C D
A,B,C,D : Point
*****
parallelogram C B A D
+++++
assert (~Col D C B).
-----
Theorem para_4 : forall A B C D : Point, parallelogram A B C D -> parallelogram C B A D.
Proof.
intros.
assert (~Col D C B).

*****
H : parallelogram A B C D
A,B,C,D : Point
*****
not (Col D C B)
+++++
eauto with Geom.
-----
Theorem para_4 : forall A B C D : Point, parallelogram A B C D -> parallelogram C B A D.
Proof.
intros.
assert (~Col D C B).

*****
H0 : not (Col D C B)
H : parallelogram A B C D
A,B,C,D : Point
*****
parallelogram C B A D
+++++
unfold parallelogram in *.
-----
Theorem para_4 : forall A B C D : Point, parallelogram A B C D -> parallelogram C B A D.
Proof.
intros.
assert (~Col D C B).
unfold parallelogram in *.

*****
H0 : not (Col D C B)
H : and (parallel A B C D) (and (parallel B C A D) (not (Col A B C)))
A,B,C,D : Point
*****
and (parallel C B A D) (and (parallel B A C D) (not (Col C B A)))
+++++
intros.
-----
Theorem para_4 : forall A B C D : Point, parallelogram A B C D -> parallelogram C B A D.
Proof.
intros.
assert (~Col D C B).
unfold parallelogram in *.
intros.

*****
H0 : not (Col D C B)
H : and (parallel A B C D) (and (parallel B C A D) (not (Col A B C)))
A,B,C,D : Point
*****
and (parallel C B A D) (and (parallel B A C D) (not (Col C B A)))
+++++
decompose [and] H.
-----
Theorem para_4 : forall A B C D : Point, parallelogram A B C D -> parallelogram C B A D.
Proof.
intros.
assert (~Col D C B).
unfold parallelogram in *.
intros.
decompose [and] H.

*****
H4 : not (Col A B C)
H3 : parallel B C A D
H1 : parallel A B C D
H0 : not (Col D C B)
H : and (parallel A B C D) (and (parallel B C A D) (not (Col A B C)))
A,B,C,D : Point
*****
and (parallel C B A D) (and (parallel B A C D) (not (Col C B A)))
+++++
repeat split.
-----
Theorem para_4 : forall A B C D : Point, parallelogram A B C D -> parallelogram C B A D.
Proof.
intros.
assert (~Col D C B).
unfold parallelogram in *.
intros.
decompose [and] H.
repeat split.

*****
H4 : not (Col A B C)
H3 : parallel B C A D
H1 : parallel A B C D
H0 : not (Col D C B)
H : and (parallel A B C D) (and (parallel B C A D) (not (Col A B C)))
A,B,C,D : Point
*****
parallel C B A D
+++++
Geometry.
-----
Theorem para_4 : forall A B C D : Point, parallelogram A B C D -> parallelogram C B A D.
Proof.
intros.
assert (~Col D C B).
unfold parallelogram in *.
intros.
decompose [and] H.
repeat split.

*****
H4 : not (Col A B C)
H3 : parallel B C A D
H1 : parallel A B C D
H0 : not (Col D C B)
H : and (parallel A B C D) (and (parallel B C A D) (not (Col A B C)))
A,B,C,D : Point
*****
parallel B A C D
+++++
Geometry.
-----
Theorem para_4 : forall A B C D : Point, parallelogram A B C D -> parallelogram C B A D.
Proof.
intros.
assert (~Col D C B).
unfold parallelogram in *.
intros.
decompose [and] H.
repeat split.

*****
H4 : not (Col A B C)
H3 : parallel B C A D
H1 : parallel A B C D
H0 : not (Col D C B)
H : and (parallel A B C D) (and (parallel B C A D) (not (Col A B C)))
A,B,C,D : Point
*****
not (Col C B A)
+++++
Geometry.
-----
Theorem para_4 : forall A B C D : Point, parallelogram A B C D -> parallelogram C B A D.
Proof.
intros.
assert (~Col D C B).

*****

*****

+++++
Qed.
-----
Hint Resolve para_4: Geom.
-----
Theorem not_para_eq_1 : forall A B C, ~ parallelogram A A B C.
-----
Theorem not_para_eq_1 : forall A B C, ~ parallelogram A A B C.

*****

*****
forall A B C : Point, not (parallelogram A A B C)
+++++
Proof.
-----
Theorem not_para_eq_1 : forall A B C, ~ parallelogram A A B C.
Proof.

*****

*****
forall A B C : Point, not (parallelogram A A B C)
+++++
intuition idtac.
-----
Theorem not_para_eq_1 : forall A B C, ~ parallelogram A A B C.
Proof.
intuition idtac.

*****
H : parallelogram A A B C
A,B,C : Point
*****
False
+++++
assert (~ Col A A C).
-----
Theorem not_para_eq_1 : forall A B C, ~ parallelogram A A B C.
Proof.
intuition idtac.
assert (~ Col A A C).

*****
H : parallelogram A A B C
A,B,C : Point
*****
not (Col A A C)
+++++
eauto with Geom.
-----
Theorem not_para_eq_1 : forall A B C, ~ parallelogram A A B C.
Proof.
intuition idtac.
assert (~ Col A A C).

*****
H0 : not (Col A A C)
H : parallelogram A A B C
A,B,C : Point
*****
False
+++++
intuition.
-----
Theorem not_para_eq_1 : forall A B C, ~ parallelogram A A B C.
Proof.
intuition idtac.
assert (~ Col A A C).

*****

*****

+++++
Qed.
-----
Theorem not_para_eq_2 : forall A B C, ~ parallelogram A B C C.
-----
Theorem not_para_eq_2 : forall A B C, ~ parallelogram A B C C.

*****

*****
forall A B C : Point, not (parallelogram A B C C)
+++++
Proof.
-----
Theorem not_para_eq_2 : forall A B C, ~ parallelogram A B C C.
Proof.

*****

*****
forall A B C : Point, not (parallelogram A B C C)
+++++
intuition idtac.
-----
Theorem not_para_eq_2 : forall A B C, ~ parallelogram A B C C.
Proof.
intuition idtac.

*****
H : parallelogram A B C C
A,B,C : Point
*****
False
+++++
assert (~ Col B C C).
-----
Theorem not_para_eq_2 : forall A B C, ~ parallelogram A B C C.
Proof.
intuition idtac.
assert (~ Col B C C).

*****
H : parallelogram A B C C
A,B,C : Point
*****
not (Col B C C)
+++++
eauto with Geom.
-----
Theorem not_para_eq_2 : forall A B C, ~ parallelogram A B C C.
Proof.
intuition idtac.
assert (~ Col B C C).

*****
H0 : not (Col B C C)
H : parallelogram A B C C
A,B,C : Point
*****
False
+++++
intuition.
-----
Theorem not_para_eq_2 : forall A B C, ~ parallelogram A B C C.
Proof.
intuition idtac.
assert (~ Col B C C).

*****

*****

+++++
Qed.
-----
Theorem not_para_eq_3 : forall A B C, ~ parallelogram A B C A.
-----
Theorem not_para_eq_3 : forall A B C, ~ parallelogram A B C A.

*****

*****
forall A B C : Point, not (parallelogram A B C A)
+++++
Proof.
-----
Theorem not_para_eq_3 : forall A B C, ~ parallelogram A B C A.
Proof.

*****

*****
forall A B C : Point, not (parallelogram A B C A)
+++++
intuition idtac.
-----
Theorem not_para_eq_3 : forall A B C, ~ parallelogram A B C A.
Proof.
intuition idtac.

*****
H : parallelogram A B C A
A,B,C : Point
*****
False
+++++
assert (~ Col A B A).
-----
Theorem not_para_eq_3 : forall A B C, ~ parallelogram A B C A.
Proof.
intuition idtac.
assert (~ Col A B A).

*****
H : parallelogram A B C A
A,B,C : Point
*****
not (Col A B A)
+++++
eauto with Geom.
-----
Theorem not_para_eq_3 : forall A B C, ~ parallelogram A B C A.
Proof.
intuition idtac.
assert (~ Col A B A).

*****
H0 : not (Col A B A)
H : parallelogram A B C A
A,B,C : Point
*****
False
+++++
intuition.
-----
Theorem not_para_eq_3 : forall A B C, ~ parallelogram A B C A.
Proof.
intuition idtac.
assert (~ Col A B A).

*****

*****

+++++
Qed.
-----
Theorem not_para_eq_4 : forall A B C, ~ parallelogram A B B C.
-----
Theorem not_para_eq_4 : forall A B C, ~ parallelogram A B B C.

*****

*****
forall A B C : Point, not (parallelogram A B B C)
+++++
Proof.
-----
Theorem not_para_eq_4 : forall A B C, ~ parallelogram A B B C.
Proof.

*****

*****
forall A B C : Point, not (parallelogram A B B C)
+++++
intuition idtac.
-----
Theorem not_para_eq_4 : forall A B C, ~ parallelogram A B B C.
Proof.
intuition idtac.

*****
H : parallelogram A B B C
A,B,C : Point
*****
False
+++++
assert (~ Col A B B).
-----
Theorem not_para_eq_4 : forall A B C, ~ parallelogram A B B C.
Proof.
intuition idtac.
assert (~ Col A B B).

*****
H : parallelogram A B B C
A,B,C : Point
*****
not (Col A B B)
+++++
eauto with Geom.
-----
Theorem not_para_eq_4 : forall A B C, ~ parallelogram A B B C.
Proof.
intuition idtac.
assert (~ Col A B B).

*****
H0 : not (Col A B B)
H : parallelogram A B B C
A,B,C : Point
*****
False
+++++
intuition.
-----
Theorem not_para_eq_4 : forall A B C, ~ parallelogram A B B C.
Proof.
intuition idtac.
assert (~ Col A B B).

*****

*****

+++++
Qed.
-----
Theorem not_para_eq_5 : forall A B C, ~ parallelogram A B A C.
-----
Theorem not_para_eq_5 : forall A B C, ~ parallelogram A B A C.

*****

*****
forall A B C : Point, not (parallelogram A B A C)
+++++
Proof.
-----
Theorem not_para_eq_5 : forall A B C, ~ parallelogram A B A C.
Proof.

*****

*****
forall A B C : Point, not (parallelogram A B A C)
+++++
intuition idtac.
-----
Theorem not_para_eq_5 : forall A B C, ~ parallelogram A B A C.
Proof.
intuition idtac.

*****
H : parallelogram A B A C
A,B,C : Point
*****
False
+++++
assert (~ Col A A C).
-----
Theorem not_para_eq_5 : forall A B C, ~ parallelogram A B A C.
Proof.
intuition idtac.
assert (~ Col A A C).

*****
H : parallelogram A B A C
A,B,C : Point
*****
not (Col A A C)
+++++
eauto with Geom.
-----
Theorem not_para_eq_5 : forall A B C, ~ parallelogram A B A C.
Proof.
intuition idtac.
assert (~ Col A A C).

*****
H0 : not (Col A A C)
H : parallelogram A B A C
A,B,C : Point
*****
False
+++++
intuition.
-----
Theorem not_para_eq_5 : forall A B C, ~ parallelogram A B A C.
Proof.
intuition idtac.
assert (~ Col A A C).

*****

*****

+++++
Qed.
-----
Theorem not_para_eq_6 : forall A B C, ~ parallelogram A B C B.
-----
Theorem not_para_eq_6 : forall A B C, ~ parallelogram A B C B.

*****

*****
forall A B C : Point, not (parallelogram A B C B)
+++++
Proof.
-----
Theorem not_para_eq_6 : forall A B C, ~ parallelogram A B C B.
Proof.

*****

*****
forall A B C : Point, not (parallelogram A B C B)
+++++
intuition idtac.
-----
Theorem not_para_eq_6 : forall A B C, ~ parallelogram A B C B.
Proof.
intuition idtac.

*****
H : parallelogram A B C B
A,B,C : Point
*****
False
+++++
assert (~ Col B C B).
-----
Theorem not_para_eq_6 : forall A B C, ~ parallelogram A B C B.
Proof.
intuition idtac.
assert (~ Col B C B).

*****
H : parallelogram A B C B
A,B,C : Point
*****
not (Col B C B)
+++++
eauto with Geom.
-----
Theorem not_para_eq_6 : forall A B C, ~ parallelogram A B C B.
Proof.
intuition idtac.
assert (~ Col B C B).

*****
H0 : not (Col B C B)
H : parallelogram A B C B
A,B,C : Point
*****
False
+++++
intuition.
-----
Theorem not_para_eq_6 : forall A B C, ~ parallelogram A B C B.
Proof.
intuition idtac.
assert (~ Col B C B).

*****

*****

+++++
Qed.
-----
Hint Resolve not_para_eq_1 not_para_eq_2 not_para_eq_3 \nnot_para_eq_4 not_para_eq_5 not_para_eq_6 : Geom.
-----
Theorem para_not_eq_1 : forall A B C D, \n  parallelogram A B C D -> A<>B.
-----
Theorem para_not_eq_1 : forall A B C D, parallelogram A B C D -> A<>B.

*****

*****
forall (A B C D : Point) (_ : parallelogram A B C D), not (eq A B)
+++++
Proof.
-----
Theorem para_not_eq_1 : forall A B C D, parallelogram A B C D -> A<>B.
Proof.

*****

*****
forall (A B C D : Point) (_ : parallelogram A B C D), not (eq A B)
+++++
intros.
-----
Theorem para_not_eq_1 : forall A B C D, parallelogram A B C D -> A<>B.
Proof.
intros.

*****
H : parallelogram A B C D
A,B,C,D : Point
*****
not (eq A B)
+++++
unfold not.
-----
Theorem para_not_eq_1 : forall A B C D, parallelogram A B C D -> A<>B.
Proof.
intros.
unfold not.

*****
H : parallelogram A B C D
A,B,C,D : Point
*****
forall _ : eq A B, False
+++++
intro.
-----
Theorem para_not_eq_1 : forall A B C D, parallelogram A B C D -> A<>B.
Proof.
intros.
unfold not.
intro.

*****
H0 : eq A B
H : parallelogram A B C D
A,B,C,D : Point
*****
False
+++++
subst A.
-----
Theorem para_not_eq_1 : forall A B C D, parallelogram A B C D -> A<>B.
Proof.
intros.
unfold not.
intro.
subst A.

*****
H : parallelogram B B C D
B,C,D : Point
*****
False
+++++
cut (~parallelogram B B C D).
-----
Theorem para_not_eq_1 : forall A B C D, parallelogram A B C D -> A<>B.
Proof.
intros.
unfold not.
intro.
subst A.
cut (~parallelogram B B C D).

*****
H : parallelogram B B C D
B,C,D : Point
*****
forall _ : not (parallelogram B B C D), False
+++++
auto.
-----
Theorem para_not_eq_1 : forall A B C D, parallelogram A B C D -> A<>B.
Proof.
intros.
unfold not.
intro.
subst A.
cut (~parallelogram B B C D).

*****
H : parallelogram B B C D
B,C,D : Point
*****
not (parallelogram B B C D)
+++++
Geometry.
-----
Theorem para_not_eq_1 : forall A B C D, parallelogram A B C D -> A<>B.
Proof.
intros.
unfold not.
intro.
subst A.
cut (~parallelogram B B C D).

*****

*****

+++++
Qed.
-----
Theorem para_not_eq_2 : forall A B C D, \n  parallelogram A B C D -> A<>C.
-----
Theorem para_not_eq_2 : forall A B C D, parallelogram A B C D -> A<>C.

*****

*****
forall (A B C D : Point) (_ : parallelogram A B C D), not (eq A C)
+++++
Proof.
-----
Theorem para_not_eq_2 : forall A B C D, parallelogram A B C D -> A<>C.
Proof.

*****

*****
forall (A B C D : Point) (_ : parallelogram A B C D), not (eq A C)
+++++
intros.
-----
Theorem para_not_eq_2 : forall A B C D, parallelogram A B C D -> A<>C.
Proof.
intros.

*****
H : parallelogram A B C D
A,B,C,D : Point
*****
not (eq A C)
+++++
unfold not.
-----
Theorem para_not_eq_2 : forall A B C D, parallelogram A B C D -> A<>C.
Proof.
intros.
unfold not.

*****
H : parallelogram A B C D
A,B,C,D : Point
*****
forall _ : eq A C, False
+++++
intro.
-----
Theorem para_not_eq_2 : forall A B C D, parallelogram A B C D -> A<>C.
Proof.
intros.
unfold not.
intro.

*****
H0 : eq A C
H : parallelogram A B C D
A,B,C,D : Point
*****
False
+++++
subst A.
-----
Theorem para_not_eq_2 : forall A B C D, parallelogram A B C D -> A<>C.
Proof.
intros.
unfold not.
intro.
subst A.

*****
H : parallelogram C B C D
B,C,D : Point
*****
False
+++++
cut (~parallelogram C B C D).
-----
Theorem para_not_eq_2 : forall A B C D, parallelogram A B C D -> A<>C.
Proof.
intros.
unfold not.
intro.
subst A.
cut (~parallelogram C B C D).

*****
H : parallelogram C B C D
B,C,D : Point
*****
forall _ : not (parallelogram C B C D), False
+++++
auto.
-----
Theorem para_not_eq_2 : forall A B C D, parallelogram A B C D -> A<>C.
Proof.
intros.
unfold not.
intro.
subst A.
cut (~parallelogram C B C D).

*****
H : parallelogram C B C D
B,C,D : Point
*****
not (parallelogram C B C D)
+++++
Geometry.
-----
Theorem para_not_eq_2 : forall A B C D, parallelogram A B C D -> A<>C.
Proof.
intros.
unfold not.
intro.
subst A.
cut (~parallelogram C B C D).

*****

*****

+++++
Qed.
-----
Theorem para_not_eq_3 : forall A B C D, \n  parallelogram A B C D -> A<>D.
-----
Theorem para_not_eq_3 : forall A B C D, parallelogram A B C D -> A<>D.

*****

*****
forall (A B C D : Point) (_ : parallelogram A B C D), not (eq A D)
+++++
Proof.
-----
Theorem para_not_eq_3 : forall A B C D, parallelogram A B C D -> A<>D.
Proof.

*****

*****
forall (A B C D : Point) (_ : parallelogram A B C D), not (eq A D)
+++++
intros.
-----
Theorem para_not_eq_3 : forall A B C D, parallelogram A B C D -> A<>D.
Proof.
intros.

*****
H : parallelogram A B C D
A,B,C,D : Point
*****
not (eq A D)
+++++
unfold not.
-----
Theorem para_not_eq_3 : forall A B C D, parallelogram A B C D -> A<>D.
Proof.
intros.
unfold not.

*****
H : parallelogram A B C D
A,B,C,D : Point
*****
forall _ : eq A D, False
+++++
intro.
-----
Theorem para_not_eq_3 : forall A B C D, parallelogram A B C D -> A<>D.
Proof.
intros.
unfold not.
intro.

*****
H0 : eq A D
H : parallelogram A B C D
A,B,C,D : Point
*****
False
+++++
subst A.
-----
Theorem para_not_eq_3 : forall A B C D, parallelogram A B C D -> A<>D.
Proof.
intros.
unfold not.
intro.
subst A.

*****
H : parallelogram D B C D
B,C,D : Point
*****
False
+++++
cut (~parallelogram D B C D).
-----
Theorem para_not_eq_3 : forall A B C D, parallelogram A B C D -> A<>D.
Proof.
intros.
unfold not.
intro.
subst A.
cut (~parallelogram D B C D).

*****
H : parallelogram D B C D
B,C,D : Point
*****
forall _ : not (parallelogram D B C D), False
+++++
auto.
-----
Theorem para_not_eq_3 : forall A B C D, parallelogram A B C D -> A<>D.
Proof.
intros.
unfold not.
intro.
subst A.
cut (~parallelogram D B C D).

*****
H : parallelogram D B C D
B,C,D : Point
*****
not (parallelogram D B C D)
+++++
Geometry.
-----
Theorem para_not_eq_3 : forall A B C D, parallelogram A B C D -> A<>D.
Proof.
intros.
unfold not.
intro.
subst A.
cut (~parallelogram D B C D).

*****

*****

+++++
Qed.
-----
Theorem para_not_eq_4 : forall A B C D, \n  parallelogram A B C D -> B<>C.
-----
Theorem para_not_eq_4 : forall A B C D, parallelogram A B C D -> B<>C.

*****

*****
forall (A B C D : Point) (_ : parallelogram A B C D), not (eq B C)
+++++
Proof.
-----
Theorem para_not_eq_4 : forall A B C D, parallelogram A B C D -> B<>C.
Proof.

*****

*****
forall (A B C D : Point) (_ : parallelogram A B C D), not (eq B C)
+++++
intros.
-----
Theorem para_not_eq_4 : forall A B C D, parallelogram A B C D -> B<>C.
Proof.
intros.

*****
H : parallelogram A B C D
A,B,C,D : Point
*****
not (eq B C)
+++++
unfold not.
-----
Theorem para_not_eq_4 : forall A B C D, parallelogram A B C D -> B<>C.
Proof.
intros.
unfold not.

*****
H : parallelogram A B C D
A,B,C,D : Point
*****
forall _ : eq B C, False
+++++
intro.
-----
Theorem para_not_eq_4 : forall A B C D, parallelogram A B C D -> B<>C.
Proof.
intros.
unfold not.
intro.

*****
H0 : eq B C
H : parallelogram A B C D
A,B,C,D : Point
*****
False
+++++
subst B.
-----
Theorem para_not_eq_4 : forall A B C D, parallelogram A B C D -> B<>C.
Proof.
intros.
unfold not.
intro.
subst B.

*****
H : parallelogram A C C D
A,C,D : Point
*****
False
+++++
cut (~parallelogram A C C D).
-----
Theorem para_not_eq_4 : forall A B C D, parallelogram A B C D -> B<>C.
Proof.
intros.
unfold not.
intro.
subst B.
cut (~parallelogram A C C D).

*****
H : parallelogram A C C D
A,C,D : Point
*****
forall _ : not (parallelogram A C C D), False
+++++
auto.
-----
Theorem para_not_eq_4 : forall A B C D, parallelogram A B C D -> B<>C.
Proof.
intros.
unfold not.
intro.
subst B.
cut (~parallelogram A C C D).

*****
H : parallelogram A C C D
A,C,D : Point
*****
not (parallelogram A C C D)
+++++
Geometry.
-----
Theorem para_not_eq_4 : forall A B C D, parallelogram A B C D -> B<>C.
Proof.
intros.
unfold not.
intro.
subst B.
cut (~parallelogram A C C D).

*****

*****

+++++
Qed.
-----
Theorem para_not_eq_5 : forall A B C D, \n  parallelogram A B C D -> B<>D.
-----
Theorem para_not_eq_5 : forall A B C D, parallelogram A B C D -> B<>D.

*****

*****
forall (A B C D : Point) (_ : parallelogram A B C D), not (eq B D)
+++++
Proof.
-----
Theorem para_not_eq_5 : forall A B C D, parallelogram A B C D -> B<>D.
Proof.

*****

*****
forall (A B C D : Point) (_ : parallelogram A B C D), not (eq B D)
+++++
intros.
-----
Theorem para_not_eq_5 : forall A B C D, parallelogram A B C D -> B<>D.
Proof.
intros.

*****
H : parallelogram A B C D
A,B,C,D : Point
*****
not (eq B D)
+++++
unfold not.
-----
Theorem para_not_eq_5 : forall A B C D, parallelogram A B C D -> B<>D.
Proof.
intros.
unfold not.

*****
H : parallelogram A B C D
A,B,C,D : Point
*****
forall _ : eq B D, False
+++++
intro.
-----
Theorem para_not_eq_5 : forall A B C D, parallelogram A B C D -> B<>D.
Proof.
intros.
unfold not.
intro.

*****
H0 : eq B D
H : parallelogram A B C D
A,B,C,D : Point
*****
False
+++++
subst B.
-----
Theorem para_not_eq_5 : forall A B C D, parallelogram A B C D -> B<>D.
Proof.
intros.
unfold not.
intro.
subst B.

*****
H : parallelogram A D C D
A,C,D : Point
*****
False
+++++
cut (~parallelogram A D C D).
-----
Theorem para_not_eq_5 : forall A B C D, parallelogram A B C D -> B<>D.
Proof.
intros.
unfold not.
intro.
subst B.
cut (~parallelogram A D C D).

*****
H : parallelogram A D C D
A,C,D : Point
*****
forall _ : not (parallelogram A D C D), False
+++++
auto.
-----
Theorem para_not_eq_5 : forall A B C D, parallelogram A B C D -> B<>D.
Proof.
intros.
unfold not.
intro.
subst B.
cut (~parallelogram A D C D).

*****
H : parallelogram A D C D
A,C,D : Point
*****
not (parallelogram A D C D)
+++++
Geometry.
-----
Theorem para_not_eq_5 : forall A B C D, parallelogram A B C D -> B<>D.
Proof.
intros.
unfold not.
intro.
subst B.
cut (~parallelogram A D C D).

*****

*****

+++++
Qed.
-----
Theorem para_not_eq_6 : forall A B C D, \n  parallelogram A B C D -> C<>D.
-----
Theorem para_not_eq_6 : forall A B C D, parallelogram A B C D -> C<>D.

*****

*****
forall (A B C D : Point) (_ : parallelogram A B C D), not (eq C D)
+++++
Proof.
-----
Theorem para_not_eq_6 : forall A B C D, parallelogram A B C D -> C<>D.
Proof.

*****

*****
forall (A B C D : Point) (_ : parallelogram A B C D), not (eq C D)
+++++
intros.
-----
Theorem para_not_eq_6 : forall A B C D, parallelogram A B C D -> C<>D.
Proof.
intros.

*****
H : parallelogram A B C D
A,B,C,D : Point
*****
not (eq C D)
+++++
unfold not.
-----
Theorem para_not_eq_6 : forall A B C D, parallelogram A B C D -> C<>D.
Proof.
intros.
unfold not.

*****
H : parallelogram A B C D
A,B,C,D : Point
*****
forall _ : eq C D, False
+++++
intro.
-----
Theorem para_not_eq_6 : forall A B C D, parallelogram A B C D -> C<>D.
Proof.
intros.
unfold not.
intro.

*****
H0 : eq C D
H : parallelogram A B C D
A,B,C,D : Point
*****
False
+++++
subst C.
-----
Theorem para_not_eq_6 : forall A B C D, parallelogram A B C D -> C<>D.
Proof.
intros.
unfold not.
intro.
subst C.

*****
H : parallelogram A B D D
A,B,D : Point
*****
False
+++++
cut (~parallelogram A B D D).
-----
Theorem para_not_eq_6 : forall A B C D, parallelogram A B C D -> C<>D.
Proof.
intros.
unfold not.
intro.
subst C.
cut (~parallelogram A B D D).

*****
H : parallelogram A B D D
A,B,D : Point
*****
forall _ : not (parallelogram A B D D), False
+++++
auto.
-----
Theorem para_not_eq_6 : forall A B C D, parallelogram A B C D -> C<>D.
Proof.
intros.
unfold not.
intro.
subst C.
cut (~parallelogram A B D D).

*****
H : parallelogram A B D D
A,B,D : Point
*****
not (parallelogram A B D D)
+++++
Geometry.
-----
Theorem para_not_eq_6 : forall A B C D, parallelogram A B C D -> C<>D.
Proof.
intros.
unfold not.
intro.
subst C.
cut (~parallelogram A B D D).

*****

*****

+++++
Qed.
-----
Hint Resolve para_not_eq_1 para_not_eq_2 para_not_eq_3\n para_not_eq_4 para_not_eq_5 para_not_eq_6 : Geom.
-----
Theorem mid_point_equation :\n forall A C O P Q : Point,\n Col O A C -> A <> C -> A ** O = O ** C -> \n S A P Q + S C P Q = 2 * S O P Q.
-----
Theorem mid_point_equation : forall A C O P Q : Point, Col O A C -> A <> C -> A ** O = O ** C -> S A P Q + S C P Q = 2 * S O P Q.

*****

*****
forall (A C O P Q : Point) (_ : Col O A C) (_ : not (eq A C)) (_ : eq (DSeg A O) (DSeg O C)), eq (Fplus (S A P Q) (S C P Q)) (Fmult (Fplus F1 F1) (S O P Q))
+++++
Proof.
-----
Theorem mid_point_equation : forall A C O P Q : Point, Col O A C -> A <> C -> A ** O = O ** C -> S A P Q + S C P Q = 2 * S O P Q.
Proof.

*****

*****
forall (A C O P Q : Point) (_ : Col O A C) (_ : not (eq A C)) (_ : eq (DSeg A O) (DSeg O C)), eq (Fplus (S A P Q) (S C P Q)) (Fmult (Fplus F1 F1) (S O P Q))
+++++
intros.
-----
Theorem mid_point_equation : forall A C O P Q : Point, Col O A C -> A <> C -> A ** O = O ** C -> S A P Q + S C P Q = 2 * S O P Q.
Proof.
intros.

*****
H1 : eq (DSeg A O) (DSeg O C)
H0 : not (eq A C)
H : Col O A C
A,C,O,P,Q : Point
*****
eq (Fplus (S A P Q) (S C P Q)) (Fmult (Fplus F1 F1) (S O P Q))
+++++
assert (T := l2_9 P Q A C O H0 H).
-----
Theorem mid_point_equation : forall A C O P Q : Point, Col O A C -> A <> C -> A ** O = O ** C -> S A P Q + S C P Q = 2 * S O P Q.
Proof.
intros.
assert (T := l2_9 P Q A C O H0 H).

*****
T : eq (S O P Q)\n (Fplus (Fmult (Fdiv (DSeg A O) (DSeg A C)) (S C P Q))\n (Fmult (Fdiv (DSeg O C) (DSeg A C)) (S A P Q)))
H1 : eq (DSeg A O) (DSeg O C)
H0 : not (eq A C)
H : Col O A C
A,C,O,P,Q : Point
*****
eq (Fplus (S A P Q) (S C P Q)) (Fmult (Fplus F1 F1) (S O P Q))
+++++
rewrite H1 in T.
-----
Theorem mid_point_equation : forall A C O P Q : Point, Col O A C -> A <> C -> A ** O = O ** C -> S A P Q + S C P Q = 2 * S O P Q.
Proof.
intros.
assert (T := l2_9 P Q A C O H0 H).
rewrite H1 in T.

*****
T : eq (S O P Q)\n (Fplus (Fmult (Fdiv (DSeg O C) (DSeg A C)) (S C P Q))\n (Fmult (Fdiv (DSeg O C) (DSeg A C)) (S A P Q)))
H1 : eq (DSeg A O) (DSeg O C)
H0 : not (eq A C)
H : Col O A C
A,C,O,P,Q : Point
*****
eq (Fplus (S A P Q) (S C P Q)) (Fmult (Fplus F1 F1) (S O P Q))
+++++
rewrite T.
-----
Theorem mid_point_equation : forall A C O P Q : Point, Col O A C -> A <> C -> A ** O = O ** C -> S A P Q + S C P Q = 2 * S O P Q.
Proof.
intros.
assert (T := l2_9 P Q A C O H0 H).
rewrite H1 in T.
rewrite T.

*****
T : eq (S O P Q)\n (Fplus (Fmult (Fdiv (DSeg O C) (DSeg A C)) (S C P Q))\n (Fmult (Fdiv (DSeg O C) (DSeg A C)) (S A P Q)))
H1 : eq (DSeg A O) (DSeg O C)
H0 : not (eq A C)
H : Col O A C
A,C,O,P,Q : Point
*****
eq (Fplus (S A P Q) (S C P Q)) (Fmult (Fplus F1 F1) (Fplus (Fmult (Fdiv (DSeg O C) (DSeg A C)) (S C P Q)) (Fmult (Fdiv (DSeg O C) (DSeg A C)) (S A P Q))))
+++++
assert (O ** C / A ** C = 1 / 2).
-----
Theorem mid_point_equation : forall A C O P Q : Point, Col O A C -> A <> C -> A ** O = O ** C -> S A P Q + S C P Q = 2 * S O P Q.
Proof.
intros.
assert (T := l2_9 P Q A C O H0 H).
rewrite H1 in T.
rewrite T.
assert (O ** C / A ** C = 1 / 2).

*****
T : eq (S O P Q)\n (Fplus (Fmult (Fdiv (DSeg O C) (DSeg A C)) (S C P Q))\n (Fmult (Fdiv (DSeg O C) (DSeg A C)) (S A P Q)))
H1 : eq (DSeg A O) (DSeg O C)
H0 : not (eq A C)
H : Col O A C
A,C,O,P,Q : Point
*****
eq (Fdiv (DSeg O C) (DSeg A C)) (Fdiv F1 (Fplus F1 F1))
+++++
assert (A ** O + O ** C = A ** C).
-----
Theorem mid_point_equation : forall A C O P Q : Point, Col O A C -> A <> C -> A ** O = O ** C -> S A P Q + S C P Q = 2 * S O P Q.
Proof.
intros.
assert (T := l2_9 P Q A C O H0 H).
rewrite H1 in T.
rewrite T.
assert (O ** C / A ** C = 1 / 2).
assert (A ** O + O ** C = A ** C).

*****
T : eq (S O P Q)\n (Fplus (Fmult (Fdiv (DSeg O C) (DSeg A C)) (S C P Q))\n (Fmult (Fdiv (DSeg O C) (DSeg A C)) (S A P Q)))
H1 : eq (DSeg A O) (DSeg O C)
H0 : not (eq A C)
H : Col O A C
A,C,O,P,Q : Point
*****
eq (Fplus (DSeg A O) (DSeg O C)) (DSeg A C)
+++++
Geometry.
-----
Theorem mid_point_equation : forall A C O P Q : Point, Col O A C -> A <> C -> A ** O = O ** C -> S A P Q + S C P Q = 2 * S O P Q.
Proof.
intros.
assert (T := l2_9 P Q A C O H0 H).
rewrite H1 in T.
rewrite T.
assert (O ** C / A ** C = 1 / 2).
assert (A ** O + O ** C = A ** C).

*****
H2 : eq (Fplus (DSeg A O) (DSeg O C)) (DSeg A C)
T : eq (S O P Q)\n (Fplus (Fmult (Fdiv (DSeg O C) (DSeg A C)) (S C P Q))\n (Fmult (Fdiv (DSeg O C) (DSeg A C)) (S A P Q)))
H1 : eq (DSeg A O) (DSeg O C)
H0 : not (eq A C)
H : Col O A C
A,C,O,P,Q : Point
*****
eq (Fdiv (DSeg O C) (DSeg A C)) (Fdiv F1 (Fplus F1 F1))
+++++
Geometry.
-----
Theorem mid_point_equation : forall A C O P Q : Point, Col O A C -> A <> C -> A ** O = O ** C -> S A P Q + S C P Q = 2 * S O P Q.
Proof.
intros.
assert (T := l2_9 P Q A C O H0 H).
rewrite H1 in T.
rewrite T.
assert (O ** C / A ** C = 1 / 2).
assert (A ** O + O ** C = A ** C).
Geometry.

*****
H2 : eq (Fplus (DSeg A O) (DSeg O C)) (DSeg A C)
T : eq (S O P Q)\n (Fplus (Fmult (Fdiv (DSeg O C) (DSeg A C)) (S C P Q))\n (Fmult (Fdiv (DSeg O C) (DSeg A C)) (S A P Q)))
H1 : eq (DSeg A O) (DSeg O C)
H0 : not (eq A C)
H : Col O A C
A,C,O,P,Q : Point
*****
eq (Fdiv (DSeg O C) (DSeg A C)) (Fdiv F1 (Fplus F1 F1))
+++++
rewrite H1 in H2.
-----
Theorem mid_point_equation : forall A C O P Q : Point, Col O A C -> A <> C -> A ** O = O ** C -> S A P Q + S C P Q = 2 * S O P Q.
Proof.
intros.
assert (T := l2_9 P Q A C O H0 H).
rewrite H1 in T.
rewrite T.
assert (O ** C / A ** C = 1 / 2).
assert (A ** O + O ** C = A ** C).
Geometry.
rewrite H1 in H2.

*****
H2 : eq (Fplus (DSeg O C) (DSeg O C)) (DSeg A C)
T : eq (S O P Q)\n (Fplus (Fmult (Fdiv (DSeg O C) (DSeg A C)) (S C P Q))\n (Fmult (Fdiv (DSeg O C) (DSeg A C)) (S A P Q)))
H1 : eq (DSeg A O) (DSeg O C)
H0 : not (eq A C)
H : Col O A C
A,C,O,P,Q : Point
*****
eq (Fdiv (DSeg O C) (DSeg A C)) (Fdiv F1 (Fplus F1 F1))
+++++
rewrite <- H2.
-----
Theorem mid_point_equation : forall A C O P Q : Point, Col O A C -> A <> C -> A ** O = O ** C -> S A P Q + S C P Q = 2 * S O P Q.
Proof.
intros.
assert (T := l2_9 P Q A C O H0 H).
rewrite H1 in T.
rewrite T.
assert (O ** C / A ** C = 1 / 2).
assert (A ** O + O ** C = A ** C).
Geometry.
rewrite H1 in H2.
rewrite <- H2.

*****
H2 : eq (Fplus (DSeg O C) (DSeg O C)) (DSeg A C)
T : eq (S O P Q)\n (Fplus (Fmult (Fdiv (DSeg O C) (DSeg A C)) (S C P Q))\n (Fmult (Fdiv (DSeg O C) (DSeg A C)) (S A P Q)))
H1 : eq (DSeg A O) (DSeg O C)
H0 : not (eq A C)
H : Col O A C
A,C,O,P,Q : Point
*****
eq (Fdiv (DSeg O C) (Fplus (DSeg O C) (DSeg O C))) (Fdiv F1 (Fplus F1 F1))
+++++
field.
-----
Theorem mid_point_equation : forall A C O P Q : Point, Col O A C -> A <> C -> A ** O = O ** C -> S A P Q + S C P Q = 2 * S O P Q.
Proof.
intros.
assert (T := l2_9 P Q A C O H0 H).
rewrite H1 in T.
rewrite T.
assert (O ** C / A ** C = 1 / 2).
assert (A ** O + O ** C = A ** C).
Geometry.
rewrite H1 in H2.
rewrite <- H2.
field.

*****
H2 : eq (Fplus (DSeg O C) (DSeg O C)) (DSeg A C)
T : eq (S O P Q)\n (Fplus (Fmult (Fdiv (DSeg O C) (DSeg A C)) (S C P Q))\n (Fmult (Fdiv (DSeg O C) (DSeg A C)) (S A P Q)))
H1 : eq (DSeg A O) (DSeg O C)
H0 : not (eq A C)
H : Col O A C
A,C,O,P,Q : Point
*****
and (not (eq (Fplus F1 F1) F0)) (not (eq (Fplus (DSeg O C) (DSeg O C)) F0))
+++++
assert (O ** C + O ** C = 2 * O ** C).
-----
Theorem mid_point_equation : forall A C O P Q : Point, Col O A C -> A <> C -> A ** O = O ** C -> S A P Q + S C P Q = 2 * S O P Q.
Proof.
intros.
assert (T := l2_9 P Q A C O H0 H).
rewrite H1 in T.
rewrite T.
assert (O ** C / A ** C = 1 / 2).
assert (A ** O + O ** C = A ** C).
Geometry.
rewrite H1 in H2.
rewrite <- H2.
field.
assert (O ** C + O ** C = 2 * O ** C).

*****
H2 : eq (Fplus (DSeg O C) (DSeg O C)) (DSeg A C)
T : eq (S O P Q)\n (Fplus (Fmult (Fdiv (DSeg O C) (DSeg A C)) (S C P Q))\n (Fmult (Fdiv (DSeg O C) (DSeg A C)) (S A P Q)))
H1 : eq (DSeg A O) (DSeg O C)
H0 : not (eq A C)
H : Col O A C
A,C,O,P,Q : Point
*****
eq (Fplus (DSeg O C) (DSeg O C)) (Fmult (Fplus F1 F1) (DSeg O C))
+++++
ring.
-----
Theorem mid_point_equation : forall A C O P Q : Point, Col O A C -> A <> C -> A ** O = O ** C -> S A P Q + S C P Q = 2 * S O P Q.
Proof.
intros.
assert (T := l2_9 P Q A C O H0 H).
rewrite H1 in T.
rewrite T.
assert (O ** C / A ** C = 1 / 2).
assert (A ** O + O ** C = A ** C).
Geometry.
rewrite H1 in H2.
rewrite <- H2.
field.
assert (O ** C + O ** C = 2 * O ** C).

*****
H3 : eq (Fplus (DSeg O C) (DSeg O C)) (Fmult (Fplus F1 F1) (DSeg O C))
H2 : eq (Fplus (DSeg O C) (DSeg O C)) (DSeg A C)
T : eq (S O P Q)\n (Fplus (Fmult (Fdiv (DSeg O C) (DSeg A C)) (S C P Q))\n (Fmult (Fdiv (DSeg O C) (DSeg A C)) (S A P Q)))
H1 : eq (DSeg A O) (DSeg O C)
H0 : not (eq A C)
H : Col O A C
A,C,O,P,Q : Point
*****
and (not (eq (Fplus F1 F1) F0)) (not (eq (Fplus (DSeg O C) (DSeg O C)) F0))
+++++
assert (O <> C).
-----
Theorem mid_point_equation : forall A C O P Q : Point, Col O A C -> A <> C -> A ** O = O ** C -> S A P Q + S C P Q = 2 * S O P Q.
Proof.
intros.
assert (T := l2_9 P Q A C O H0 H).
rewrite H1 in T.
rewrite T.
assert (O ** C / A ** C = 1 / 2).
assert (A ** O + O ** C = A ** C).
Geometry.
rewrite H1 in H2.
rewrite <- H2.
field.
assert (O ** C + O ** C = 2 * O ** C).
assert (O <> C).

*****
H3 : eq (Fplus (DSeg O C) (DSeg O C)) (Fmult (Fplus F1 F1) (DSeg O C))
H2 : eq (Fplus (DSeg O C) (DSeg O C)) (DSeg A C)
T : eq (S O P Q)\n (Fplus (Fmult (Fdiv (DSeg O C) (DSeg A C)) (S C P Q))\n (Fmult (Fdiv (DSeg O C) (DSeg A C)) (S A P Q)))
H1 : eq (DSeg A O) (DSeg O C)
H0 : not (eq A C)
H : Col O A C
A,C,O,P,Q : Point
*****
not (eq O C)
+++++
unfold not in |- *.
-----
Theorem mid_point_equation : forall A C O P Q : Point, Col O A C -> A <> C -> A ** O = O ** C -> S A P Q + S C P Q = 2 * S O P Q.
Proof.
intros.
assert (T := l2_9 P Q A C O H0 H).
rewrite H1 in T.
rewrite T.
assert (O ** C / A ** C = 1 / 2).
assert (A ** O + O ** C = A ** C).
Geometry.
rewrite H1 in H2.
rewrite <- H2.
field.
assert (O ** C + O ** C = 2 * O ** C).
assert (O <> C).
unfold not in |- *.

*****
H3 : eq (Fplus (DSeg O C) (DSeg O C)) (Fmult (Fplus F1 F1) (DSeg O C))
H2 : eq (Fplus (DSeg O C) (DSeg O C)) (DSeg A C)
T : eq (S O P Q)\n (Fplus (Fmult (Fdiv (DSeg O C) (DSeg A C)) (S C P Q))\n (Fmult (Fdiv (DSeg O C) (DSeg A C)) (S A P Q)))
H1 : eq (DSeg A O) (DSeg O C)
H0 : not (eq A C)
H : Col O A C
A,C,O,P,Q : Point
*****
forall _ : eq O C, False
+++++
intro.
-----
Theorem mid_point_equation : forall A C O P Q : Point, Col O A C -> A <> C -> A ** O = O ** C -> S A P Q + S C P Q = 2 * S O P Q.
Proof.
intros.
assert (T := l2_9 P Q A C O H0 H).
rewrite H1 in T.
rewrite T.
assert (O ** C / A ** C = 1 / 2).
assert (A ** O + O ** C = A ** C).
Geometry.
rewrite H1 in H2.
rewrite <- H2.
field.
assert (O ** C + O ** C = 2 * O ** C).
assert (O <> C).
unfold not in |- *.
intro.

*****
H4 : eq O C
H3 : eq (Fplus (DSeg O C) (DSeg O C)) (Fmult (Fplus F1 F1) (DSeg O C))
H2 : eq (Fplus (DSeg O C) (DSeg O C)) (DSeg A C)
T : eq (S O P Q)\n (Fplus (Fmult (Fdiv (DSeg O C) (DSeg A C)) (S C P Q))\n (Fmult (Fdiv (DSeg O C) (DSeg A C)) (S A P Q)))
H1 : eq (DSeg A O) (DSeg O C)
H0 : not (eq A C)
H : Col O A C
A,C,O,P,Q : Point
*****
False
+++++
assert (O ** C = 0).
-----
Theorem mid_point_equation : forall A C O P Q : Point, Col O A C -> A <> C -> A ** O = O ** C -> S A P Q + S C P Q = 2 * S O P Q.
Proof.
intros.
assert (T := l2_9 P Q A C O H0 H).
rewrite H1 in T.
rewrite T.
assert (O ** C / A ** C = 1 / 2).
assert (A ** O + O ** C = A ** C).
Geometry.
rewrite H1 in H2.
rewrite <- H2.
field.
assert (O ** C + O ** C = 2 * O ** C).
assert (O <> C).
unfold not in |- *.
intro.
assert (O ** C = 0).

*****
H4 : eq O C
H3 : eq (Fplus (DSeg O C) (DSeg O C)) (Fmult (Fplus F1 F1) (DSeg O C))
H2 : eq (Fplus (DSeg O C) (DSeg O C)) (DSeg A C)
T : eq (S O P Q)\n (Fplus (Fmult (Fdiv (DSeg O C) (DSeg A C)) (S C P Q))\n (Fmult (Fdiv (DSeg O C) (DSeg A C)) (S A P Q)))
H1 : eq (DSeg A O) (DSeg O C)
H0 : not (eq A C)
H : Col O A C
A,C,O,P,Q : Point
*****
eq (DSeg O C) F0
+++++
Geometry.
-----
Theorem mid_point_equation : forall A C O P Q : Point, Col O A C -> A <> C -> A ** O = O ** C -> S A P Q + S C P Q = 2 * S O P Q.
Proof.
intros.
assert (T := l2_9 P Q A C O H0 H).
rewrite H1 in T.
rewrite T.
assert (O ** C / A ** C = 1 / 2).
assert (A ** O + O ** C = A ** C).
Geometry.
rewrite H1 in H2.
rewrite <- H2.
field.
assert (O ** C + O ** C = 2 * O ** C).
assert (O <> C).
unfold not in |- *.
intro.
assert (O ** C = 0).

*****
H5 : eq (DSeg O C) F0
H4 : eq O C
H3 : eq (Fplus (DSeg O C) (DSeg O C)) (Fmult (Fplus F1 F1) (DSeg O C))
H2 : eq (Fplus (DSeg O C) (DSeg O C)) (DSeg A C)
T : eq (S O P Q)\n (Fplus (Fmult (Fdiv (DSeg O C) (DSeg A C)) (S C P Q))\n (Fmult (Fdiv (DSeg O C) (DSeg A C)) (S A P Q)))
H1 : eq (DSeg A O) (DSeg O C)
H0 : not (eq A C)
H : Col O A C
A,C,O,P,Q : Point
*****
False
+++++
Geometry.
-----
Theorem mid_point_equation : forall A C O P Q : Point, Col O A C -> A <> C -> A ** O = O ** C -> S A P Q + S C P Q = 2 * S O P Q.
Proof.
intros.
assert (T := l2_9 P Q A C O H0 H).
rewrite H1 in T.
rewrite T.
assert (O ** C / A ** C = 1 / 2).
assert (A ** O + O ** C = A ** C).
Geometry.
rewrite H1 in H2.
rewrite <- H2.
field.
assert (O ** C + O ** C = 2 * O ** C).
assert (O <> C).
unfold not in |- *.
intro.
assert (O ** C = 0).
Geometry.

*****
H5 : eq (DSeg O C) F0
H4 : eq O C
H3 : eq (Fplus (DSeg O C) (DSeg O C)) (Fmult (Fplus F1 F1) (DSeg O C))
H2 : eq (Fplus (DSeg O C) (DSeg O C)) (DSeg A C)
T : eq (S O P Q)\n (Fplus (Fmult (Fdiv (DSeg O C) (DSeg A C)) (S C P Q))\n (Fmult (Fdiv (DSeg O C) (DSeg A C)) (S A P Q)))
H1 : eq (DSeg A O) (DSeg O C)
H0 : not (eq A C)
H : Col O A C
A,C,O,P,Q : Point
*****
False
+++++
rewrite H5 in H1.
-----
Theorem mid_point_equation : forall A C O P Q : Point, Col O A C -> A <> C -> A ** O = O ** C -> S A P Q + S C P Q = 2 * S O P Q.
Proof.
intros.
assert (T := l2_9 P Q A C O H0 H).
rewrite H1 in T.
rewrite T.
assert (O ** C / A ** C = 1 / 2).
assert (A ** O + O ** C = A ** C).
Geometry.
rewrite H1 in H2.
rewrite <- H2.
field.
assert (O ** C + O ** C = 2 * O ** C).
assert (O <> C).
unfold not in |- *.
intro.
assert (O ** C = 0).
Geometry.
rewrite H5 in H1.

*****
H5 : eq (DSeg O C) F0
H4 : eq O C
H3 : eq (Fplus (DSeg O C) (DSeg O C)) (Fmult (Fplus F1 F1) (DSeg O C))
H2 : eq (Fplus (DSeg O C) (DSeg O C)) (DSeg A C)
T : eq (S O P Q)\n (Fplus (Fmult (Fdiv (DSeg O C) (DSeg A C)) (S C P Q))\n (Fmult (Fdiv (DSeg O C) (DSeg A C)) (S A P Q)))
H1 : eq (DSeg A O) F0
H0 : not (eq A C)
H : Col O A C
A,C,O,P,Q : Point
*****
False
+++++
assert (A = O).
-----
Theorem mid_point_equation : forall A C O P Q : Point, Col O A C -> A <> C -> A ** O = O ** C -> S A P Q + S C P Q = 2 * S O P Q.
Proof.
intros.
assert (T := l2_9 P Q A C O H0 H).
rewrite H1 in T.
rewrite T.
assert (O ** C / A ** C = 1 / 2).
assert (A ** O + O ** C = A ** C).
Geometry.
rewrite H1 in H2.
rewrite <- H2.
field.
assert (O ** C + O ** C = 2 * O ** C).
assert (O <> C).
unfold not in |- *.
intro.
assert (O ** C = 0).
Geometry.
rewrite H5 in H1.
assert (A = O).

*****
H5 : eq (DSeg O C) F0
H4 : eq O C
H3 : eq (Fplus (DSeg O C) (DSeg O C)) (Fmult (Fplus F1 F1) (DSeg O C))
H2 : eq (Fplus (DSeg O C) (DSeg O C)) (DSeg A C)
T : eq (S O P Q)\n (Fplus (Fmult (Fdiv (DSeg O C) (DSeg A C)) (S C P Q))\n (Fmult (Fdiv (DSeg O C) (DSeg A C)) (S A P Q)))
H1 : eq (DSeg A O) F0
H0 : not (eq A C)
H : Col O A C
A,C,O,P,Q : Point
*****
eq A O
+++++
Geometry.
-----
Theorem mid_point_equation : forall A C O P Q : Point, Col O A C -> A <> C -> A ** O = O ** C -> S A P Q + S C P Q = 2 * S O P Q.
Proof.
intros.
assert (T := l2_9 P Q A C O H0 H).
rewrite H1 in T.
rewrite T.
assert (O ** C / A ** C = 1 / 2).
assert (A ** O + O ** C = A ** C).
Geometry.
rewrite H1 in H2.
rewrite <- H2.
field.
assert (O ** C + O ** C = 2 * O ** C).
assert (O <> C).
unfold not in |- *.
intro.
assert (O ** C = 0).
Geometry.
rewrite H5 in H1.
assert (A = O).

*****
H6 : eq A O
H5 : eq (DSeg O C) F0
H4 : eq O C
H3 : eq (Fplus (DSeg O C) (DSeg O C)) (Fmult (Fplus F1 F1) (DSeg O C))
H2 : eq (Fplus (DSeg O C) (DSeg O C)) (DSeg A C)
T : eq (S O P Q)\n (Fplus (Fmult (Fdiv (DSeg O C) (DSeg A C)) (S C P Q))\n (Fmult (Fdiv (DSeg O C) (DSeg A C)) (S A P Q)))
H1 : eq (DSeg A O) F0
H0 : not (eq A C)
H : Col O A C
A,C,O,P,Q : Point
*****
False
+++++
Geometry.
-----
Theorem mid_point_equation : forall A C O P Q : Point, Col O A C -> A <> C -> A ** O = O ** C -> S A P Q + S C P Q = 2 * S O P Q.
Proof.
intros.
assert (T := l2_9 P Q A C O H0 H).
rewrite H1 in T.
rewrite T.
assert (O ** C / A ** C = 1 / 2).
assert (A ** O + O ** C = A ** C).
Geometry.
rewrite H1 in H2.
rewrite <- H2.
field.
assert (O ** C + O ** C = 2 * O ** C).
assert (O <> C).
unfold not in |- *.
intro.
assert (O ** C = 0).
Geometry.
rewrite H5 in H1.
assert (A = O).
Geometry.

*****
H6 : eq A O
H5 : eq (DSeg O C) F0
H4 : eq O C
H3 : eq (Fplus (DSeg O C) (DSeg O C)) (Fmult (Fplus F1 F1) (DSeg O C))
H2 : eq (Fplus (DSeg O C) (DSeg O C)) (DSeg A C)
T : eq (S O P Q)\n (Fplus (Fmult (Fdiv (DSeg O C) (DSeg A C)) (S C P Q))\n (Fmult (Fdiv (DSeg O C) (DSeg A C)) (S A P Q)))
H1 : eq (DSeg A O) F0
H0 : not (eq A C)
H : Col O A C
A,C,O,P,Q : Point
*****
False
+++++
assert (A = C).
-----
Theorem mid_point_equation : forall A C O P Q : Point, Col O A C -> A <> C -> A ** O = O ** C -> S A P Q + S C P Q = 2 * S O P Q.
Proof.
intros.
assert (T := l2_9 P Q A C O H0 H).
rewrite H1 in T.
rewrite T.
assert (O ** C / A ** C = 1 / 2).
assert (A ** O + O ** C = A ** C).
Geometry.
rewrite H1 in H2.
rewrite <- H2.
field.
assert (O ** C + O ** C = 2 * O ** C).
assert (O <> C).
unfold not in |- *.
intro.
assert (O ** C = 0).
Geometry.
rewrite H5 in H1.
assert (A = O).
Geometry.
assert (A = C).

*****
H6 : eq A O
H5 : eq (DSeg O C) F0
H4 : eq O C
H3 : eq (Fplus (DSeg O C) (DSeg O C)) (Fmult (Fplus F1 F1) (DSeg O C))
H2 : eq (Fplus (DSeg O C) (DSeg O C)) (DSeg A C)
T : eq (S O P Q)\n (Fplus (Fmult (Fdiv (DSeg O C) (DSeg A C)) (S C P Q))\n (Fmult (Fdiv (DSeg O C) (DSeg A C)) (S A P Q)))
H1 : eq (DSeg A O) F0
H0 : not (eq A C)
H : Col O A C
A,C,O,P,Q : Point
*****
eq A C
+++++
congruence.
-----
Theorem mid_point_equation : forall A C O P Q : Point, Col O A C -> A <> C -> A ** O = O ** C -> S A P Q + S C P Q = 2 * S O P Q.
Proof.
intros.
assert (T := l2_9 P Q A C O H0 H).
rewrite H1 in T.
rewrite T.
assert (O ** C / A ** C = 1 / 2).
assert (A ** O + O ** C = A ** C).
Geometry.
rewrite H1 in H2.
rewrite <- H2.
field.
assert (O ** C + O ** C = 2 * O ** C).
assert (O <> C).
unfold not in |- *.
intro.
assert (O ** C = 0).
Geometry.
rewrite H5 in H1.
assert (A = O).
Geometry.
assert (A = C).

*****
H7 : eq A C
H6 : eq A O
H5 : eq (DSeg O C) F0
H4 : eq O C
H3 : eq (Fplus (DSeg O C) (DSeg O C)) (Fmult (Fplus F1 F1) (DSeg O C))
H2 : eq (Fplus (DSeg O C) (DSeg O C)) (DSeg A C)
T : eq (S O P Q)\n (Fplus (Fmult (Fdiv (DSeg O C) (DSeg A C)) (S C P Q))\n (Fmult (Fdiv (DSeg O C) (DSeg A C)) (S A P Q)))
H1 : eq (DSeg A O) F0
H0 : not (eq A C)
H : Col O A C
A,C,O,P,Q : Point
*****
False
+++++
auto.
-----
Theorem mid_point_equation : forall A C O P Q : Point, Col O A C -> A <> C -> A ** O = O ** C -> S A P Q + S C P Q = 2 * S O P Q.
Proof.
intros.
assert (T := l2_9 P Q A C O H0 H).
rewrite H1 in T.
rewrite T.
assert (O ** C / A ** C = 1 / 2).
assert (A ** O + O ** C = A ** C).
Geometry.
rewrite H1 in H2.
rewrite <- H2.
field.
assert (O ** C + O ** C = 2 * O ** C).
assert (O <> C).

*****
H4 : not (eq O C)
H3 : eq (Fplus (DSeg O C) (DSeg O C)) (Fmult (Fplus F1 F1) (DSeg O C))
H2 : eq (Fplus (DSeg O C) (DSeg O C)) (DSeg A C)
T : eq (S O P Q)\n (Fplus (Fmult (Fdiv (DSeg O C) (DSeg A C)) (S C P Q))\n (Fmult (Fdiv (DSeg O C) (DSeg A C)) (S A P Q)))
H1 : eq (DSeg A O) (DSeg O C)
H0 : not (eq A C)
H : Col O A C
A,C,O,P,Q : Point
*****
and (not (eq (Fplus F1 F1) F0)) (not (eq (Fplus (DSeg O C) (DSeg O C)) F0))
+++++
rewrite H3.
-----
Theorem mid_point_equation : forall A C O P Q : Point, Col O A C -> A <> C -> A ** O = O ** C -> S A P Q + S C P Q = 2 * S O P Q.
Proof.
intros.
assert (T := l2_9 P Q A C O H0 H).
rewrite H1 in T.
rewrite T.
assert (O ** C / A ** C = 1 / 2).
assert (A ** O + O ** C = A ** C).
Geometry.
rewrite H1 in H2.
rewrite <- H2.
field.
assert (O ** C + O ** C = 2 * O ** C).
assert (O <> C).
rewrite H3.

*****
H4 : not (eq O C)
H3 : eq (Fplus (DSeg O C) (DSeg O C)) (Fmult (Fplus F1 F1) (DSeg O C))
H2 : eq (Fplus (DSeg O C) (DSeg O C)) (DSeg A C)
T : eq (S O P Q)\n (Fplus (Fmult (Fdiv (DSeg O C) (DSeg A C)) (S C P Q))\n (Fmult (Fdiv (DSeg O C) (DSeg A C)) (S A P Q)))
H1 : eq (DSeg A O) (DSeg O C)
H0 : not (eq A C)
H : Col O A C
A,C,O,P,Q : Point
*****
and (not (eq (Fplus F1 F1) F0)) (not (eq (Fmult (Fplus F1 F1) (DSeg O C)) F0))
+++++
Geometry.
-----
Theorem mid_point_equation : forall A C O P Q : Point, Col O A C -> A <> C -> A ** O = O ** C -> S A P Q + S C P Q = 2 * S O P Q.
Proof.
intros.
assert (T := l2_9 P Q A C O H0 H).
rewrite H1 in T.
rewrite T.
assert (O ** C / A ** C = 1 / 2).

*****
H2 : eq (Fdiv (DSeg O C) (DSeg A C)) (Fdiv F1 (Fplus F1 F1))
T : eq (S O P Q)\n (Fplus (Fmult (Fdiv (DSeg O C) (DSeg A C)) (S C P Q))\n (Fmult (Fdiv (DSeg O C) (DSeg A C)) (S A P Q)))
H1 : eq (DSeg A O) (DSeg O C)
H0 : not (eq A C)
H : Col O A C
A,C,O,P,Q : Point
*****
eq (Fplus (S A P Q) (S C P Q)) (Fmult (Fplus F1 F1) (Fplus (Fmult (Fdiv (DSeg O C) (DSeg A C)) (S C P Q)) (Fmult (Fdiv (DSeg O C) (DSeg A C)) (S A P Q))))
+++++
rewrite H2.
-----
Theorem mid_point_equation : forall A C O P Q : Point, Col O A C -> A <> C -> A ** O = O ** C -> S A P Q + S C P Q = 2 * S O P Q.
Proof.
intros.
assert (T := l2_9 P Q A C O H0 H).
rewrite H1 in T.
rewrite T.
assert (O ** C / A ** C = 1 / 2).
rewrite H2.

*****
H2 : eq (Fdiv (DSeg O C) (DSeg A C)) (Fdiv F1 (Fplus F1 F1))
T : eq (S O P Q)\n (Fplus (Fmult (Fdiv (DSeg O C) (DSeg A C)) (S C P Q))\n (Fmult (Fdiv (DSeg O C) (DSeg A C)) (S A P Q)))
H1 : eq (DSeg A O) (DSeg O C)
H0 : not (eq A C)
H : Col O A C
A,C,O,P,Q : Point
*****
eq (Fplus (S A P Q) (S C P Q)) (Fmult (Fplus F1 F1) (Fplus (Fmult (Fdiv F1 (Fplus F1 F1)) (S C P Q)) (Fmult (Fdiv F1 (Fplus F1 F1)) (S A P Q))))
+++++
field.
-----
Theorem mid_point_equation : forall A C O P Q : Point, Col O A C -> A <> C -> A ** O = O ** C -> S A P Q + S C P Q = 2 * S O P Q.
Proof.
intros.
assert (T := l2_9 P Q A C O H0 H).
rewrite H1 in T.
rewrite T.
assert (O ** C / A ** C = 1 / 2).
rewrite H2.
field.

*****
H2 : eq (Fdiv (DSeg O C) (DSeg A C)) (Fdiv F1 (Fplus F1 F1))
T : eq (S O P Q)\n (Fplus (Fmult (Fdiv (DSeg O C) (DSeg A C)) (S C P Q))\n (Fmult (Fdiv (DSeg O C) (DSeg A C)) (S A P Q)))
H1 : eq (DSeg A O) (DSeg O C)
H0 : not (eq A C)
H : Col O A C
A,C,O,P,Q : Point
*****
not (eq (Fplus F1 F1) F0)
+++++
Geometry.
-----
Theorem mid_point_equation : forall A C O P Q : Point, Col O A C -> A <> C -> A ** O = O ** C -> S A P Q + S C P Q = 2 * S O P Q.
Proof.
intros.
assert (T := l2_9 P Q A C O H0 H).
rewrite H1 in T.
rewrite T.
assert (O ** C / A ** C = 1 / 2).

*****

*****

+++++
Qed.
-----
Theorem col_par_par :  forall A B C D D',  \n ~C=D -> \n parallel A B C D -> \n Col C D D' -> \n parallel A B C D'.
-----
Theorem col_par_par : forall A B C D D', ~C=D -> parallel A B C D -> Col C D D' -> parallel A B C D'.

*****

*****
forall (A B C D D' : Point) (_ : not (eq C D)) (_ : parallel A B C D) (_ : Col C D D'), parallel A B C D'
+++++
Proof.
-----
Theorem col_par_par : forall A B C D D', ~C=D -> parallel A B C D -> Col C D D' -> parallel A B C D'.
Proof.

*****

*****
forall (A B C D D' : Point) (_ : not (eq C D)) (_ : parallel A B C D) (_ : Col C D D'), parallel A B C D'
+++++
intros.
-----
Theorem col_par_par : forall A B C D D', ~C=D -> parallel A B C D -> Col C D D' -> parallel A B C D'.
Proof.
intros.

*****
H1 : Col C D D'
H0 : parallel A B C D
H : not (eq C D)
A,B,C,D,D' : Point
*****
parallel A B C D'
+++++
cases_col A C D.
-----
Theorem col_par_par : forall A B C D D', ~C=D -> parallel A B C D -> Col C D D' -> parallel A B C D'.
Proof.
intros.
cases_col A C D.

*****
H2 : Col A C D
H1 : Col C D D'
H0 : parallel A B C D
H : not (eq C D)
A,B,C,D,D' : Point
*****
parallel A B C D'
+++++
assert (Col C D B).
-----
Theorem col_par_par : forall A B C D D', ~C=D -> parallel A B C D -> Col C D D' -> parallel A B C D'.
Proof.
intros.
cases_col A C D.
assert (Col C D B).

*****
H2 : Col A C D
H1 : Col C D D'
H0 : parallel A B C D
H : not (eq C D)
A,B,C,D,D' : Point
*****
Col C D B
+++++
eapply par_col_col_1 with (C:=A).
-----
Theorem col_par_par : forall A B C D D', ~C=D -> parallel A B C D -> Col C D D' -> parallel A B C D'.
Proof.
intros.
cases_col A C D.
assert (Col C D B).
eapply par_col_col_1 with (C:=A).

*****
H2 : Col A C D
H1 : Col C D D'
H0 : parallel A B C D
H : not (eq C D)
A,B,C,D,D' : Point
*****
parallel C D A B
+++++
Geometry.
-----
Theorem col_par_par : forall A B C D D', ~C=D -> parallel A B C D -> Col C D D' -> parallel A B C D'.
Proof.
intros.
cases_col A C D.
assert (Col C D B).
eapply par_col_col_1 with (C:=A).

*****
H2 : Col A C D
H1 : Col C D D'
H0 : parallel A B C D
H : not (eq C D)
A,B,C,D,D' : Point
*****
Col C D A
+++++
Geometry.
-----
Theorem col_par_par : forall A B C D D', ~C=D -> parallel A B C D -> Col C D D' -> parallel A B C D'.
Proof.
intros.
cases_col A C D.
assert (Col C D B).

*****
H3 : Col C D B
H2 : Col A C D
H1 : Col C D D'
H0 : parallel A B C D
H : not (eq C D)
A,B,C,D,D' : Point
*****
parallel A B C D'
+++++
assert (Col C A B).
-----
Theorem col_par_par : forall A B C D D', ~C=D -> parallel A B C D -> Col C D D' -> parallel A B C D'.
Proof.
intros.
cases_col A C D.
assert (Col C D B).
assert (Col C A B).

*****
H3 : Col C D B
H2 : Col A C D
H1 : Col C D D'
H0 : parallel A B C D
H : not (eq C D)
A,B,C,D,D' : Point
*****
Col C A B
+++++
eapply col_trans_1 with (B:=D).
-----
Theorem col_par_par : forall A B C D D', ~C=D -> parallel A B C D -> Col C D D' -> parallel A B C D'.
Proof.
intros.
cases_col A C D.
assert (Col C D B).
assert (Col C A B).
eapply col_trans_1 with (B:=D).

*****
H3 : Col C D B
H2 : Col A C D
H1 : Col C D D'
H0 : parallel A B C D
H : not (eq C D)
A,B,C,D,D' : Point
*****
not (eq C D)
+++++
Geometry.
-----
Theorem col_par_par : forall A B C D D', ~C=D -> parallel A B C D -> Col C D D' -> parallel A B C D'.
Proof.
intros.
cases_col A C D.
assert (Col C D B).
assert (Col C A B).
eapply col_trans_1 with (B:=D).

*****
H3 : Col C D B
H2 : Col A C D
H1 : Col C D D'
H0 : parallel A B C D
H : not (eq C D)
A,B,C,D,D' : Point
*****
Col C D A
+++++
Geometry.
-----
Theorem col_par_par : forall A B C D D', ~C=D -> parallel A B C D -> Col C D D' -> parallel A B C D'.
Proof.
intros.
cases_col A C D.
assert (Col C D B).
assert (Col C A B).
eapply col_trans_1 with (B:=D).

*****
H3 : Col C D B
H2 : Col A C D
H1 : Col C D D'
H0 : parallel A B C D
H : not (eq C D)
A,B,C,D,D' : Point
*****
Col C D B
+++++
Geometry.
-----
Theorem col_par_par : forall A B C D D', ~C=D -> parallel A B C D -> Col C D D' -> parallel A B C D'.
Proof.
intros.
cases_col A C D.
assert (Col C D B).
assert (Col C A B).

*****
H4 : Col C A B
H3 : Col C D B
H2 : Col A C D
H1 : Col C D D'
H0 : parallel A B C D
H : not (eq C D)
A,B,C,D,D' : Point
*****
parallel A B C D'
+++++
assert (Col D A B).
-----
Theorem col_par_par : forall A B C D D', ~C=D -> parallel A B C D -> Col C D D' -> parallel A B C D'.
Proof.
intros.
cases_col A C D.
assert (Col C D B).
assert (Col C A B).
assert (Col D A B).

*****
H4 : Col C A B
H3 : Col C D B
H2 : Col A C D
H1 : Col C D D'
H0 : parallel A B C D
H : not (eq C D)
A,B,C,D,D' : Point
*****
Col D A B
+++++
eapply col_trans_1 with (B:=C).
-----
Theorem col_par_par : forall A B C D D', ~C=D -> parallel A B C D -> Col C D D' -> parallel A B C D'.
Proof.
intros.
cases_col A C D.
assert (Col C D B).
assert (Col C A B).
assert (Col D A B).
eapply col_trans_1 with (B:=C).

*****
H4 : Col C A B
H3 : Col C D B
H2 : Col A C D
H1 : Col C D D'
H0 : parallel A B C D
H : not (eq C D)
A,B,C,D,D' : Point
*****
not (eq D C)
+++++
Geometry.
-----
Theorem col_par_par : forall A B C D D', ~C=D -> parallel A B C D -> Col C D D' -> parallel A B C D'.
Proof.
intros.
cases_col A C D.
assert (Col C D B).
assert (Col C A B).
assert (Col D A B).
eapply col_trans_1 with (B:=C).

*****
H4 : Col C A B
H3 : Col C D B
H2 : Col A C D
H1 : Col C D D'
H0 : parallel A B C D
H : not (eq C D)
A,B,C,D,D' : Point
*****
Col D C A
+++++
Geometry.
-----
Theorem col_par_par : forall A B C D D', ~C=D -> parallel A B C D -> Col C D D' -> parallel A B C D'.
Proof.
intros.
cases_col A C D.
assert (Col C D B).
assert (Col C A B).
assert (Col D A B).
eapply col_trans_1 with (B:=C).

*****
H4 : Col C A B
H3 : Col C D B
H2 : Col A C D
H1 : Col C D D'
H0 : parallel A B C D
H : not (eq C D)
A,B,C,D,D' : Point
*****
Col D C B
+++++
Geometry.
-----
Theorem col_par_par : forall A B C D D', ~C=D -> parallel A B C D -> Col C D D' -> parallel A B C D'.
Proof.
intros.
cases_col A C D.
assert (Col C D B).
assert (Col C A B).
assert (Col D A B).

*****
H5 : Col D A B
H4 : Col C A B
H3 : Col C D B
H2 : Col A C D
H1 : Col C D D'
H0 : parallel A B C D
H : not (eq C D)
A,B,C,D,D' : Point
*****
parallel A B C D'
+++++
unfold parallel in *.
-----
Theorem col_par_par : forall A B C D D', ~C=D -> parallel A B C D -> Col C D D' -> parallel A B C D'.
Proof.
intros.
cases_col A C D.
assert (Col C D B).
assert (Col C A B).
assert (Col D A B).
unfold parallel in *.

*****
H5 : Col D A B
H4 : Col C A B
H3 : Col C D B
H2 : Col A C D
H1 : Col C D D'
H0 : eq (S4 A C B D) F0
H : not (eq C D)
A,B,C,D,D' : Point
*****
eq (S4 A C B D') F0
+++++
unfold S4 in *.
-----
Theorem col_par_par : forall A B C D D', ~C=D -> parallel A B C D -> Col C D D' -> parallel A B C D'.
Proof.
intros.
cases_col A C D.
assert (Col C D B).
assert (Col C A B).
assert (Col D A B).
unfold parallel in *.
unfold S4 in *.

*****
H5 : Col D A B
H4 : Col C A B
H3 : Col C D B
H2 : Col A C D
H1 : Col C D D'
H0 : eq (Fplus (S A C B) (S A B D)) F0
H : not (eq C D)
A,B,C,D,D' : Point
*****
eq (Fplus (S A C B) (S A B D')) F0
+++++
replace (S A C B) with (- S C A B).
-----
Theorem col_par_par : forall A B C D D', ~C=D -> parallel A B C D -> Col C D D' -> parallel A B C D'.
Proof.
intros.
cases_col A C D.
assert (Col C D B).
assert (Col C A B).
assert (Col D A B).
unfold parallel in *.
unfold S4 in *.
replace (S A C B) with (- S C A B).

*****
H5 : Col D A B
H4 : Col C A B
H3 : Col C D B
H2 : Col A C D
H1 : Col C D D'
H0 : eq (Fplus (S A C B) (S A B D)) F0
H : not (eq C D)
A,B,C,D,D' : Point
*****
eq (Fplus (Fopp (S C A B)) (S A B D')) F0
+++++
rewrite H4.
-----
Theorem col_par_par : forall A B C D D', ~C=D -> parallel A B C D -> Col C D D' -> parallel A B C D'.
Proof.
intros.
cases_col A C D.
assert (Col C D B).
assert (Col C A B).
assert (Col D A B).
unfold parallel in *.
unfold S4 in *.
replace (S A C B) with (- S C A B).
rewrite H4.

*****
H5 : Col D A B
H4 : Col C A B
H3 : Col C D B
H2 : Col A C D
H1 : Col C D D'
H0 : eq (Fplus (S A C B) (S A B D)) F0
H : not (eq C D)
A,B,C,D,D' : Point
*****
eq (Fplus (Fopp F0) (S A B D')) F0
+++++
ring_simplify.
-----
Theorem col_par_par : forall A B C D D', ~C=D -> parallel A B C D -> Col C D D' -> parallel A B C D'.
Proof.
intros.
cases_col A C D.
assert (Col C D B).
assert (Col C A B).
assert (Col D A B).
unfold parallel in *.
unfold S4 in *.
replace (S A C B) with (- S C A B).
rewrite H4.
ring_simplify.

*****
H5 : Col D A B
H4 : Col C A B
H3 : Col C D B
H2 : Col A C D
H1 : Col C D D'
H0 : eq (Fplus (S A C B) (S A B D)) F0
H : not (eq C D)
A,B,C,D,D' : Point
*****
eq (S A B D') F0
+++++
assert (Col C A D').
-----
Theorem col_par_par : forall A B C D D', ~C=D -> parallel A B C D -> Col C D D' -> parallel A B C D'.
Proof.
intros.
cases_col A C D.
assert (Col C D B).
assert (Col C A B).
assert (Col D A B).
unfold parallel in *.
unfold S4 in *.
replace (S A C B) with (- S C A B).
rewrite H4.
ring_simplify.
assert (Col C A D').

*****
H5 : Col D A B
H4 : Col C A B
H3 : Col C D B
H2 : Col A C D
H1 : Col C D D'
H0 : eq (Fplus (S A C B) (S A B D)) F0
H : not (eq C D)
A,B,C,D,D' : Point
*****
Col C A D'
+++++
eapply col_trans_1 with (B:=D).
-----
Theorem col_par_par : forall A B C D D', ~C=D -> parallel A B C D -> Col C D D' -> parallel A B C D'.
Proof.
intros.
cases_col A C D.
assert (Col C D B).
assert (Col C A B).
assert (Col D A B).
unfold parallel in *.
unfold S4 in *.
replace (S A C B) with (- S C A B).
rewrite H4.
ring_simplify.
assert (Col C A D').
eapply col_trans_1 with (B:=D).

*****
H5 : Col D A B
H4 : Col C A B
H3 : Col C D B
H2 : Col A C D
H1 : Col C D D'
H0 : eq (Fplus (S A C B) (S A B D)) F0
H : not (eq C D)
A,B,C,D,D' : Point
*****
not (eq C D)
+++++
Geometry.
-----
Theorem col_par_par : forall A B C D D', ~C=D -> parallel A B C D -> Col C D D' -> parallel A B C D'.
Proof.
intros.
cases_col A C D.
assert (Col C D B).
assert (Col C A B).
assert (Col D A B).
unfold parallel in *.
unfold S4 in *.
replace (S A C B) with (- S C A B).
rewrite H4.
ring_simplify.
assert (Col C A D').
eapply col_trans_1 with (B:=D).

*****
H5 : Col D A B
H4 : Col C A B
H3 : Col C D B
H2 : Col A C D
H1 : Col C D D'
H0 : eq (Fplus (S A C B) (S A B D)) F0
H : not (eq C D)
A,B,C,D,D' : Point
*****
Col C D A
+++++
Geometry.
-----
Theorem col_par_par : forall A B C D D', ~C=D -> parallel A B C D -> Col C D D' -> parallel A B C D'.
Proof.
intros.
cases_col A C D.
assert (Col C D B).
assert (Col C A B).
assert (Col D A B).
unfold parallel in *.
unfold S4 in *.
replace (S A C B) with (- S C A B).
rewrite H4.
ring_simplify.
assert (Col C A D').
eapply col_trans_1 with (B:=D).

*****
H5 : Col D A B
H4 : Col C A B
H3 : Col C D B
H2 : Col A C D
H1 : Col C D D'
H0 : eq (Fplus (S A C B) (S A B D)) F0
H : not (eq C D)
A,B,C,D,D' : Point
*****
Col C D D'
+++++
Geometry.
-----
Theorem col_par_par : forall A B C D D', ~C=D -> parallel A B C D -> Col C D D' -> parallel A B C D'.
Proof.
intros.
cases_col A C D.
assert (Col C D B).
assert (Col C A B).
assert (Col D A B).
unfold parallel in *.
unfold S4 in *.
replace (S A C B) with (- S C A B).
rewrite H4.
ring_simplify.
assert (Col C A D').

*****
H6 : Col C A D'
H5 : Col D A B
H4 : Col C A B
H3 : Col C D B
H2 : Col A C D
H1 : Col C D D'
H0 : eq (Fplus (S A C B) (S A B D)) F0
H : not (eq C D)
A,B,C,D,D' : Point
*****
eq (S A B D') F0
+++++
cases_equality A C.
-----
Theorem col_par_par : forall A B C D D', ~C=D -> parallel A B C D -> Col C D D' -> parallel A B C D'.
Proof.
intros.
cases_col A C D.
assert (Col C D B).
assert (Col C A B).
assert (Col D A B).
unfold parallel in *.
unfold S4 in *.
replace (S A C B) with (- S C A B).
rewrite H4.
ring_simplify.
assert (Col C A D').
cases_equality A C.

*****
H7 : eq A C
H6 : Col C A D'
H5 : Col D A B
H4 : Col C A B
H3 : Col C D B
H2 : Col A C D
H1 : Col C D D'
H0 : eq (Fplus (S A C B) (S A B D)) F0
H : not (eq C D)
A,B,C,D,D' : Point
*****
eq (S A B D') F0
+++++
subst A.
-----
Theorem col_par_par : forall A B C D D', ~C=D -> parallel A B C D -> Col C D D' -> parallel A B C D'.
Proof.
intros.
cases_col A C D.
assert (Col C D B).
assert (Col C A B).
assert (Col D A B).
unfold parallel in *.
unfold S4 in *.
replace (S A C B) with (- S C A B).
rewrite H4.
ring_simplify.
assert (Col C A D').
cases_equality A C.
subst A.

*****
H4 : Col C C B
H5 : Col D C B
H6 : Col C C D'
H3 : Col C D B
H2 : Col C C D
H1 : Col C D D'
H0 : eq (Fplus (S C C B) (S C B D)) F0
H : not (eq C D)
B,C,D,D' : Point
*****
eq (S C B D') F0
+++++
assert (Col C B D').
-----
Theorem col_par_par : forall A B C D D', ~C=D -> parallel A B C D -> Col C D D' -> parallel A B C D'.
Proof.
intros.
cases_col A C D.
assert (Col C D B).
assert (Col C A B).
assert (Col D A B).
unfold parallel in *.
unfold S4 in *.
replace (S A C B) with (- S C A B).
rewrite H4.
ring_simplify.
assert (Col C A D').
cases_equality A C.
subst A.
assert (Col C B D').

*****
H4 : Col C C B
H5 : Col D C B
H6 : Col C C D'
H3 : Col C D B
H2 : Col C C D
H1 : Col C D D'
H0 : eq (Fplus (S C C B) (S C B D)) F0
H : not (eq C D)
B,C,D,D' : Point
*****
Col C B D'
+++++
eapply col_trans_1 with (B:=D).
-----
Theorem col_par_par : forall A B C D D', ~C=D -> parallel A B C D -> Col C D D' -> parallel A B C D'.
Proof.
intros.
cases_col A C D.
assert (Col C D B).
assert (Col C A B).
assert (Col D A B).
unfold parallel in *.
unfold S4 in *.
replace (S A C B) with (- S C A B).
rewrite H4.
ring_simplify.
assert (Col C A D').
cases_equality A C.
subst A.
assert (Col C B D').
eapply col_trans_1 with (B:=D).

*****
H4 : Col C C B
H5 : Col D C B
H6 : Col C C D'
H3 : Col C D B
H2 : Col C C D
H1 : Col C D D'
H0 : eq (Fplus (S C C B) (S C B D)) F0
H : not (eq C D)
B,C,D,D' : Point
*****
not (eq C D)
+++++
Geometry.
-----
Theorem col_par_par : forall A B C D D', ~C=D -> parallel A B C D -> Col C D D' -> parallel A B C D'.
Proof.
intros.
cases_col A C D.
assert (Col C D B).
assert (Col C A B).
assert (Col D A B).
unfold parallel in *.
unfold S4 in *.
replace (S A C B) with (- S C A B).
rewrite H4.
ring_simplify.
assert (Col C A D').
cases_equality A C.
subst A.
assert (Col C B D').
eapply col_trans_1 with (B:=D).

*****
H4 : Col C C B
H5 : Col D C B
H6 : Col C C D'
H3 : Col C D B
H2 : Col C C D
H1 : Col C D D'
H0 : eq (Fplus (S C C B) (S C B D)) F0
H : not (eq C D)
B,C,D,D' : Point
*****
Col C D B
+++++
Geometry.
-----
Theorem col_par_par : forall A B C D D', ~C=D -> parallel A B C D -> Col C D D' -> parallel A B C D'.
Proof.
intros.
cases_col A C D.
assert (Col C D B).
assert (Col C A B).
assert (Col D A B).
unfold parallel in *.
unfold S4 in *.
replace (S A C B) with (- S C A B).
rewrite H4.
ring_simplify.
assert (Col C A D').
cases_equality A C.
subst A.
assert (Col C B D').
eapply col_trans_1 with (B:=D).

*****
H4 : Col C C B
H5 : Col D C B
H6 : Col C C D'
H3 : Col C D B
H2 : Col C C D
H1 : Col C D D'
H0 : eq (Fplus (S C C B) (S C B D)) F0
H : not (eq C D)
B,C,D,D' : Point
*****
Col C D D'
+++++
Geometry.
-----
Theorem col_par_par : forall A B C D D', ~C=D -> parallel A B C D -> Col C D D' -> parallel A B C D'.
Proof.
intros.
cases_col A C D.
assert (Col C D B).
assert (Col C A B).
assert (Col D A B).
unfold parallel in *.
unfold S4 in *.
replace (S A C B) with (- S C A B).
rewrite H4.
ring_simplify.
assert (Col C A D').
cases_equality A C.
subst A.
assert (Col C B D').

*****
H7 : Col C B D'
H4 : Col C C B
H5 : Col D C B
H6 : Col C C D'
H3 : Col C D B
H2 : Col C C D
H1 : Col C D D'
H0 : eq (Fplus (S C C B) (S C B D)) F0
H : not (eq C D)
B,C,D,D' : Point
*****
eq (S C B D') F0
+++++
auto.
-----
Theorem col_par_par : forall A B C D D', ~C=D -> parallel A B C D -> Col C D D' -> parallel A B C D'.
Proof.
intros.
cases_col A C D.
assert (Col C D B).
assert (Col C A B).
assert (Col D A B).
unfold parallel in *.
unfold S4 in *.
replace (S A C B) with (- S C A B).
rewrite H4.
ring_simplify.
assert (Col C A D').
cases_equality A C.

*****
H7 : not (eq A C)
H6 : Col C A D'
H5 : Col D A B
H4 : Col C A B
H3 : Col C D B
H2 : Col A C D
H1 : Col C D D'
H0 : eq (Fplus (S A C B) (S A B D)) F0
H : not (eq C D)
A,B,C,D,D' : Point
*****
eq (S A B D') F0
+++++
assert (Col A B D').
-----
Theorem col_par_par : forall A B C D D', ~C=D -> parallel A B C D -> Col C D D' -> parallel A B C D'.
Proof.
intros.
cases_col A C D.
assert (Col C D B).
assert (Col C A B).
assert (Col D A B).
unfold parallel in *.
unfold S4 in *.
replace (S A C B) with (- S C A B).
rewrite H4.
ring_simplify.
assert (Col C A D').
cases_equality A C.
assert (Col A B D').

*****
H7 : not (eq A C)
H6 : Col C A D'
H5 : Col D A B
H4 : Col C A B
H3 : Col C D B
H2 : Col A C D
H1 : Col C D D'
H0 : eq (Fplus (S A C B) (S A B D)) F0
H : not (eq C D)
A,B,C,D,D' : Point
*****
Col A B D'
+++++
eapply col_trans_1 with (B:=C).
-----
Theorem col_par_par : forall A B C D D', ~C=D -> parallel A B C D -> Col C D D' -> parallel A B C D'.
Proof.
intros.
cases_col A C D.
assert (Col C D B).
assert (Col C A B).
assert (Col D A B).
unfold parallel in *.
unfold S4 in *.
replace (S A C B) with (- S C A B).
rewrite H4.
ring_simplify.
assert (Col C A D').
cases_equality A C.
assert (Col A B D').
eapply col_trans_1 with (B:=C).

*****
H7 : not (eq A C)
H6 : Col C A D'
H5 : Col D A B
H4 : Col C A B
H3 : Col C D B
H2 : Col A C D
H1 : Col C D D'
H0 : eq (Fplus (S A C B) (S A B D)) F0
H : not (eq C D)
A,B,C,D,D' : Point
*****
not (eq A C)
+++++
Geometry.
-----
Theorem col_par_par : forall A B C D D', ~C=D -> parallel A B C D -> Col C D D' -> parallel A B C D'.
Proof.
intros.
cases_col A C D.
assert (Col C D B).
assert (Col C A B).
assert (Col D A B).
unfold parallel in *.
unfold S4 in *.
replace (S A C B) with (- S C A B).
rewrite H4.
ring_simplify.
assert (Col C A D').
cases_equality A C.
assert (Col A B D').
eapply col_trans_1 with (B:=C).

*****
H7 : not (eq A C)
H6 : Col C A D'
H5 : Col D A B
H4 : Col C A B
H3 : Col C D B
H2 : Col A C D
H1 : Col C D D'
H0 : eq (Fplus (S A C B) (S A B D)) F0
H : not (eq C D)
A,B,C,D,D' : Point
*****
Col A C B
+++++
Geometry.
-----
Theorem col_par_par : forall A B C D D', ~C=D -> parallel A B C D -> Col C D D' -> parallel A B C D'.
Proof.
intros.
cases_col A C D.
assert (Col C D B).
assert (Col C A B).
assert (Col D A B).
unfold parallel in *.
unfold S4 in *.
replace (S A C B) with (- S C A B).
rewrite H4.
ring_simplify.
assert (Col C A D').
cases_equality A C.
assert (Col A B D').
eapply col_trans_1 with (B:=C).

*****
H7 : not (eq A C)
H6 : Col C A D'
H5 : Col D A B
H4 : Col C A B
H3 : Col C D B
H2 : Col A C D
H1 : Col C D D'
H0 : eq (Fplus (S A C B) (S A B D)) F0
H : not (eq C D)
A,B,C,D,D' : Point
*****
Col A C D'
+++++
Geometry.
-----
Theorem col_par_par : forall A B C D D', ~C=D -> parallel A B C D -> Col C D D' -> parallel A B C D'.
Proof.
intros.
cases_col A C D.
assert (Col C D B).
assert (Col C A B).
assert (Col D A B).
unfold parallel in *.
unfold S4 in *.
replace (S A C B) with (- S C A B).
rewrite H4.
ring_simplify.
assert (Col C A D').
cases_equality A C.
assert (Col A B D').

*****
H8 : Col A B D'
H7 : not (eq A C)
H6 : Col C A D'
H5 : Col D A B
H4 : Col C A B
H3 : Col C D B
H2 : Col A C D
H1 : Col C D D'
H0 : eq (Fplus (S A C B) (S A B D)) F0
H : not (eq C D)
A,B,C,D,D' : Point
*****
eq (S A B D') F0
+++++
auto.
-----
Theorem col_par_par : forall A B C D D', ~C=D -> parallel A B C D -> Col C D D' -> parallel A B C D'.
Proof.
intros.
cases_col A C D.
assert (Col C D B).
assert (Col C A B).
assert (Col D A B).
unfold parallel in *.
unfold S4 in *.
replace (S A C B) with (- S C A B).

*****
H5 : Col D A B
H4 : Col C A B
H3 : Col C D B
H2 : Col A C D
H1 : Col C D D'
H0 : eq (Fplus (S A C B) (S A B D)) F0
H : not (eq C D)
A,B,C,D,D' : Point
*****
eq (Fopp (S C A B)) (S A C B)
+++++
Geometry.
-----
Theorem col_par_par : forall A B C D D', ~C=D -> parallel A B C D -> Col C D D' -> parallel A B C D'.
Proof.
intros.
cases_col A C D.

*****
H2 : not (Col A C D)
H1 : Col C D D'
H0 : parallel A B C D
H : not (eq C D)
A,B,C,D,D' : Point
*****
parallel A B C D'
+++++
assert (~Col B C D).
-----
Theorem col_par_par : forall A B C D D', ~C=D -> parallel A B C D -> Col C D D' -> parallel A B C D'.
Proof.
intros.
cases_col A C D.
assert (~Col B C D).

*****
H2 : not (Col A C D)
H1 : Col C D D'
H0 : parallel A B C D
H : not (eq C D)
A,B,C,D,D' : Point
*****
not (Col B C D)
+++++
unfold not.
-----
Theorem col_par_par : forall A B C D D', ~C=D -> parallel A B C D -> Col C D D' -> parallel A B C D'.
Proof.
intros.
cases_col A C D.
assert (~Col B C D).
unfold not.

*****
H2 : not (Col A C D)
H1 : Col C D D'
H0 : parallel A B C D
H : not (eq C D)
A,B,C,D,D' : Point
*****
forall _ : Col B C D, False
+++++
intro.
-----
Theorem col_par_par : forall A B C D D', ~C=D -> parallel A B C D -> Col C D D' -> parallel A B C D'.
Proof.
intros.
cases_col A C D.
assert (~Col B C D).
unfold not.
intro.

*****
H3 : Col B C D
H2 : not (Col A C D)
H1 : Col C D D'
H0 : parallel A B C D
H : not (eq C D)
A,B,C,D,D' : Point
*****
False
+++++
assert (Col C D A).
-----
Theorem col_par_par : forall A B C D D', ~C=D -> parallel A B C D -> Col C D D' -> parallel A B C D'.
Proof.
intros.
cases_col A C D.
assert (~Col B C D).
unfold not.
intro.
assert (Col C D A).

*****
H3 : Col B C D
H2 : not (Col A C D)
H1 : Col C D D'
H0 : parallel A B C D
H : not (eq C D)
A,B,C,D,D' : Point
*****
Col C D A
+++++
eapply par_col_col_1 with (C:=B).
-----
Theorem col_par_par : forall A B C D D', ~C=D -> parallel A B C D -> Col C D D' -> parallel A B C D'.
Proof.
intros.
cases_col A C D.
assert (~Col B C D).
unfold not.
intro.
assert (Col C D A).
eapply par_col_col_1 with (C:=B).

*****
H3 : Col B C D
H2 : not (Col A C D)
H1 : Col C D D'
H0 : parallel A B C D
H : not (eq C D)
A,B,C,D,D' : Point
*****
parallel C D B A
+++++
Geometry.
-----
Theorem col_par_par : forall A B C D D', ~C=D -> parallel A B C D -> Col C D D' -> parallel A B C D'.
Proof.
intros.
cases_col A C D.
assert (~Col B C D).
unfold not.
intro.
assert (Col C D A).
eapply par_col_col_1 with (C:=B).

*****
H3 : Col B C D
H2 : not (Col A C D)
H1 : Col C D D'
H0 : parallel A B C D
H : not (eq C D)
A,B,C,D,D' : Point
*****
Col C D B
+++++
Geometry.
-----
Theorem col_par_par : forall A B C D D', ~C=D -> parallel A B C D -> Col C D D' -> parallel A B C D'.
Proof.
intros.
cases_col A C D.
assert (~Col B C D).
unfold not.
intro.
assert (Col C D A).

*****
H4 : Col C D A
H3 : Col B C D
H2 : not (Col A C D)
H1 : Col C D D'
H0 : parallel A B C D
H : not (eq C D)
A,B,C,D,D' : Point
*****
False
+++++
assert (Col A C D).
-----
Theorem col_par_par : forall A B C D D', ~C=D -> parallel A B C D -> Col C D D' -> parallel A B C D'.
Proof.
intros.
cases_col A C D.
assert (~Col B C D).
unfold not.
intro.
assert (Col C D A).
assert (Col A C D).

*****
H4 : Col C D A
H3 : Col B C D
H2 : not (Col A C D)
H1 : Col C D D'
H0 : parallel A B C D
H : not (eq C D)
A,B,C,D,D' : Point
*****
Col A C D
+++++
Geometry.
-----
Theorem col_par_par : forall A B C D D', ~C=D -> parallel A B C D -> Col C D D' -> parallel A B C D'.
Proof.
intros.
cases_col A C D.
assert (~Col B C D).
unfold not.
intro.
assert (Col C D A).
assert (Col A C D).

*****
H5 : Col A C D
H4 : Col C D A
H3 : Col B C D
H2 : not (Col A C D)
H1 : Col C D D'
H0 : parallel A B C D
H : not (eq C D)
A,B,C,D,D' : Point
*****
False
+++++
Geometry.
-----
Theorem col_par_par : forall A B C D D', ~C=D -> parallel A B C D -> Col C D D' -> parallel A B C D'.
Proof.
intros.
cases_col A C D.
assert (~Col B C D).

*****
H3 : not (Col B C D)
H2 : not (Col A C D)
H1 : Col C D D'
H0 : parallel A B C D
H : not (eq C D)
A,B,C,D,D' : Point
*****
parallel A B C D'
+++++
assert (parallel A B C D).
-----
Theorem col_par_par : forall A B C D D', ~C=D -> parallel A B C D -> Col C D D' -> parallel A B C D'.
Proof.
intros.
cases_col A C D.
assert (~Col B C D).
assert (parallel A B C D).

*****
H3 : not (Col B C D)
H2 : not (Col A C D)
H1 : Col C D D'
H0 : parallel A B C D
H : not (eq C D)
A,B,C,D,D' : Point
*****
parallel A B C D
+++++
Geometry.
-----
Theorem col_par_par : forall A B C D D', ~C=D -> parallel A B C D -> Col C D D' -> parallel A B C D'.
Proof.
intros.
cases_col A C D.
assert (~Col B C D).
assert (parallel A B C D).

*****
H4 : parallel A B C D
H3 : not (Col B C D)
H2 : not (Col A C D)
H1 : Col C D D'
H0 : parallel A B C D
H : not (eq C D)
A,B,C,D,D' : Point
*****
parallel A B C D'
+++++
Geometry.
-----
Theorem col_par_par : forall A B C D D', ~C=D -> parallel A B C D -> Col C D D' -> parallel A B C D'.
Proof.
intros.
cases_col A C D.
assert (~Col B C D).
assert (parallel A B C D).
Geometry.

*****
H4 : parallel A B C D
H3 : not (Col B C D)
H2 : not (Col A C D)
H1 : Col C D D'
H0 : parallel A B C D
H : not (eq C D)
A,B,C,D,D' : Point
*****
parallel A B C D'
+++++
unfold parallel in H4.
-----
Theorem col_par_par : forall A B C D D', ~C=D -> parallel A B C D -> Col C D D' -> parallel A B C D'.
Proof.
intros.
cases_col A C D.
assert (~Col B C D).
assert (parallel A B C D).
Geometry.
unfold parallel in H4.

*****
H4 : eq (S4 A C B D) F0
H3 : not (Col B C D)
H2 : not (Col A C D)
H1 : Col C D D'
H0 : parallel A B C D
H : not (eq C D)
A,B,C,D,D' : Point
*****
parallel A B C D'
+++++
unfold S4 in H4.
-----
Theorem col_par_par : forall A B C D D', ~C=D -> parallel A B C D -> Col C D D' -> parallel A B C D'.
Proof.
intros.
cases_col A C D.
assert (~Col B C D).
assert (parallel A B C D).
Geometry.
unfold parallel in H4.
unfold S4 in H4.

*****
H4 : eq (Fplus (S A C B) (S A B D)) F0
H3 : not (Col B C D)
H2 : not (Col A C D)
H1 : Col C D D'
H0 : parallel A B C D
H : not (eq C D)
A,B,C,D,D' : Point
*****
parallel A B C D'
+++++
unfold parallel.
-----
Theorem col_par_par : forall A B C D D', ~C=D -> parallel A B C D -> Col C D D' -> parallel A B C D'.
Proof.
intros.
cases_col A C D.
assert (~Col B C D).
assert (parallel A B C D).
Geometry.
unfold parallel in H4.
unfold S4 in H4.
unfold parallel.

*****
H4 : eq (Fplus (S A C B) (S A B D)) F0
H3 : not (Col B C D)
H2 : not (Col A C D)
H1 : Col C D D'
H0 : parallel A B C D
H : not (eq C D)
A,B,C,D,D' : Point
*****
eq (S4 A C B D') F0
+++++
unfold S4.
-----
Theorem col_par_par : forall A B C D D', ~C=D -> parallel A B C D -> Col C D D' -> parallel A B C D'.
Proof.
intros.
cases_col A C D.
assert (~Col B C D).
assert (parallel A B C D).
Geometry.
unfold parallel in H4.
unfold S4 in H4.
unfold parallel.
unfold S4.

*****
H4 : eq (Fplus (S A C B) (S A B D)) F0
H3 : not (Col B C D)
H2 : not (Col A C D)
H1 : Col C D D'
H0 : parallel A B C D
H : not (eq C D)
A,B,C,D,D' : Point
*****
eq (Fplus (S A C B) (S A B D')) F0
+++++
assert (C**D' / C**D = S A C D' / S A C D).
-----
Theorem col_par_par : forall A B C D D', ~C=D -> parallel A B C D -> Col C D D' -> parallel A B C D'.
Proof.
intros.
cases_col A C D.
assert (~Col B C D).
assert (parallel A B C D).
Geometry.
unfold parallel in H4.
unfold S4 in H4.
unfold parallel.
unfold S4.
assert (C**D' / C**D = S A C D' / S A C D).

*****
H4 : eq (Fplus (S A C B) (S A B D)) F0
H3 : not (Col B C D)
H2 : not (Col A C D)
H1 : Col C D D'
H0 : parallel A B C D
H : not (eq C D)
A,B,C,D,D' : Point
*****
eq (Fdiv (DSeg C D') (DSeg C D)) (Fdiv (S A C D') (S A C D))
+++++
apply A6.
-----
Theorem col_par_par : forall A B C D D', ~C=D -> parallel A B C D -> Col C D D' -> parallel A B C D'.
Proof.
intros.
cases_col A C D.
assert (~Col B C D).
assert (parallel A B C D).
Geometry.
unfold parallel in H4.
unfold S4 in H4.
unfold parallel.
unfold S4.
assert (C**D' / C**D = S A C D' / S A C D).
apply A6.

*****
H4 : eq (Fplus (S A C B) (S A B D)) F0
H3 : not (Col B C D)
H2 : not (Col A C D)
H1 : Col C D D'
H0 : parallel A B C D
H : not (eq C D)
A,B,C,D,D' : Point
*****
not (eq C D)
+++++
Geometry.
-----
Theorem col_par_par : forall A B C D D', ~C=D -> parallel A B C D -> Col C D D' -> parallel A B C D'.
Proof.
intros.
cases_col A C D.
assert (~Col B C D).
assert (parallel A B C D).
Geometry.
unfold parallel in H4.
unfold S4 in H4.
unfold parallel.
unfold S4.
assert (C**D' / C**D = S A C D' / S A C D).
apply A6.

*****
H4 : eq (Fplus (S A C B) (S A B D)) F0
H3 : not (Col B C D)
H2 : not (Col A C D)
H1 : Col C D D'
H0 : parallel A B C D
H : not (eq C D)
A,B,C,D,D' : Point
*****
not (Col A C D)
+++++
Geometry.
-----
Theorem col_par_par : forall A B C D D', ~C=D -> parallel A B C D -> Col C D D' -> parallel A B C D'.
Proof.
intros.
cases_col A C D.
assert (~Col B C D).
assert (parallel A B C D).
Geometry.
unfold parallel in H4.
unfold S4 in H4.
unfold parallel.
unfold S4.
assert (C**D' / C**D = S A C D' / S A C D).
apply A6.

*****
H4 : eq (Fplus (S A C B) (S A B D)) F0
H3 : not (Col B C D)
H2 : not (Col A C D)
H1 : Col C D D'
H0 : parallel A B C D
H : not (eq C D)
A,B,C,D,D' : Point
*****
Col C D' D
+++++
Geometry.
-----
Theorem col_par_par : forall A B C D D', ~C=D -> parallel A B C D -> Col C D D' -> parallel A B C D'.
Proof.
intros.
cases_col A C D.
assert (~Col B C D).
assert (parallel A B C D).
Geometry.
unfold parallel in H4.
unfold S4 in H4.
unfold parallel.
unfold S4.
assert (C**D' / C**D = S A C D' / S A C D).

*****
H5 : eq (Fdiv (DSeg C D') (DSeg C D)) (Fdiv (S A C D') (S A C D))
H4 : eq (Fplus (S A C B) (S A B D)) F0
H3 : not (Col B C D)
H2 : not (Col A C D)
H1 : Col C D D'
H0 : parallel A B C D
H : not (eq C D)
A,B,C,D,D' : Point
*****
eq (Fplus (S A C B) (S A B D')) F0
+++++
assert (C**D' / C**D = S B C D' / S B C D).
-----
Theorem col_par_par : forall A B C D D', ~C=D -> parallel A B C D -> Col C D D' -> parallel A B C D'.
Proof.
intros.
cases_col A C D.
assert (~Col B C D).
assert (parallel A B C D).
Geometry.
unfold parallel in H4.
unfold S4 in H4.
unfold parallel.
unfold S4.
assert (C**D' / C**D = S A C D' / S A C D).
assert (C**D' / C**D = S B C D' / S B C D).

*****
H5 : eq (Fdiv (DSeg C D') (DSeg C D)) (Fdiv (S A C D') (S A C D))
H4 : eq (Fplus (S A C B) (S A B D)) F0
H3 : not (Col B C D)
H2 : not (Col A C D)
H1 : Col C D D'
H0 : parallel A B C D
H : not (eq C D)
A,B,C,D,D' : Point
*****
eq (Fdiv (DSeg C D') (DSeg C D)) (Fdiv (S B C D') (S B C D))
+++++
apply A6.
-----
Theorem col_par_par : forall A B C D D', ~C=D -> parallel A B C D -> Col C D D' -> parallel A B C D'.
Proof.
intros.
cases_col A C D.
assert (~Col B C D).
assert (parallel A B C D).
Geometry.
unfold parallel in H4.
unfold S4 in H4.
unfold parallel.
unfold S4.
assert (C**D' / C**D = S A C D' / S A C D).
assert (C**D' / C**D = S B C D' / S B C D).
apply A6.

*****
H5 : eq (Fdiv (DSeg C D') (DSeg C D)) (Fdiv (S A C D') (S A C D))
H4 : eq (Fplus (S A C B) (S A B D)) F0
H3 : not (Col B C D)
H2 : not (Col A C D)
H1 : Col C D D'
H0 : parallel A B C D
H : not (eq C D)
A,B,C,D,D' : Point
*****
not (eq C D)
+++++
Geometry.
-----
Theorem col_par_par : forall A B C D D', ~C=D -> parallel A B C D -> Col C D D' -> parallel A B C D'.
Proof.
intros.
cases_col A C D.
assert (~Col B C D).
assert (parallel A B C D).
Geometry.
unfold parallel in H4.
unfold S4 in H4.
unfold parallel.
unfold S4.
assert (C**D' / C**D = S A C D' / S A C D).
assert (C**D' / C**D = S B C D' / S B C D).
apply A6.

*****
H5 : eq (Fdiv (DSeg C D') (DSeg C D)) (Fdiv (S A C D') (S A C D))
H4 : eq (Fplus (S A C B) (S A B D)) F0
H3 : not (Col B C D)
H2 : not (Col A C D)
H1 : Col C D D'
H0 : parallel A B C D
H : not (eq C D)
A,B,C,D,D' : Point
*****
not (Col B C D)
+++++
Geometry.
-----
Theorem col_par_par : forall A B C D D', ~C=D -> parallel A B C D -> Col C D D' -> parallel A B C D'.
Proof.
intros.
cases_col A C D.
assert (~Col B C D).
assert (parallel A B C D).
Geometry.
unfold parallel in H4.
unfold S4 in H4.
unfold parallel.
unfold S4.
assert (C**D' / C**D = S A C D' / S A C D).
assert (C**D' / C**D = S B C D' / S B C D).
apply A6.

*****
H5 : eq (Fdiv (DSeg C D') (DSeg C D)) (Fdiv (S A C D') (S A C D))
H4 : eq (Fplus (S A C B) (S A B D)) F0
H3 : not (Col B C D)
H2 : not (Col A C D)
H1 : Col C D D'
H0 : parallel A B C D
H : not (eq C D)
A,B,C,D,D' : Point
*****
Col C D' D
+++++
Geometry.
-----
Theorem col_par_par : forall A B C D D', ~C=D -> parallel A B C D -> Col C D D' -> parallel A B C D'.
Proof.
intros.
cases_col A C D.
assert (~Col B C D).
assert (parallel A B C D).
Geometry.
unfold parallel in H4.
unfold S4 in H4.
unfold parallel.
unfold S4.
assert (C**D' / C**D = S A C D' / S A C D).
assert (C**D' / C**D = S B C D' / S B C D).

*****
H6 : eq (Fdiv (DSeg C D') (DSeg C D)) (Fdiv (S B C D') (S B C D))
H5 : eq (Fdiv (DSeg C D') (DSeg C D)) (Fdiv (S A C D') (S A C D))
H4 : eq (Fplus (S A C B) (S A B D)) F0
H3 : not (Col B C D)
H2 : not (Col A C D)
H1 : Col C D D'
H0 : parallel A B C D
H : not (eq C D)
A,B,C,D,D' : Point
*****
eq (Fplus (S A C B) (S A B D')) F0
+++++
set (C ** D' / C ** D) in *.
-----
Theorem col_par_par : forall A B C D D', ~C=D -> parallel A B C D -> Col C D D' -> parallel A B C D'.
Proof.
intros.
cases_col A C D.
assert (~Col B C D).
assert (parallel A B C D).
Geometry.
unfold parallel in H4.
unfold S4 in H4.
unfold parallel.
unfold S4.
assert (C**D' / C**D = S A C D' / S A C D).
assert (C**D' / C**D = S B C D' / S B C D).
set (C ** D' / C ** D) in *.

*****
H6 : eq f (Fdiv (S B C D') (S B C D))
H5 : eq f (Fdiv (S A C D') (S A C D))
f : F
H4 : eq (Fplus (S A C B) (S A B D)) F0
H3 : not (Col B C D)
H2 : not (Col A C D)
H1 : Col C D D'
H0 : parallel A B C D
H : not (eq C D)
A,B,C,D,D' : Point
*****
eq (Fplus (S A C B) (S A B D')) F0
+++++
RewriteVar (S A C B) H4.
-----
Theorem col_par_par : forall A B C D D', ~C=D -> parallel A B C D -> Col C D D' -> parallel A B C D'.
Proof.
intros.
cases_col A C D.
assert (~Col B C D).
assert (parallel A B C D).
Geometry.
unfold parallel in H4.
unfold S4 in H4.
unfold parallel.
unfold S4.
assert (C**D' / C**D = S A C D' / S A C D).
assert (C**D' / C**D = S B C D' / S B C D).
set (C ** D' / C ** D) in *.
RewriteVar (S A C B) H4.

*****
H4 : eq (S A C B) (Fopp (S A B D))
H6 : eq f (Fdiv (S B C D') (S B C D))
H5 : eq f (Fdiv (S A C D') (S A C D))
f : F
H3 : not (Col B C D)
H2 : not (Col A C D)
H1 : Col C D D'
H0 : parallel A B C D
H : not (eq C D)
A,B,C,D,D' : Point
*****
eq (Fplus (Fopp (S A B D)) (S A B D')) F0
+++++
replace (S A B D) with (S A B C + S A C D + S C B D).
-----
Theorem col_par_par : forall A B C D D', ~C=D -> parallel A B C D -> Col C D D' -> parallel A B C D'.
Proof.
intros.
cases_col A C D.
assert (~Col B C D).
assert (parallel A B C D).
Geometry.
unfold parallel in H4.
unfold S4 in H4.
unfold parallel.
unfold S4.
assert (C**D' / C**D = S A C D' / S A C D).
assert (C**D' / C**D = S B C D' / S B C D).
set (C ** D' / C ** D) in *.
RewriteVar (S A C B) H4.
replace (S A B D) with (S A B C + S A C D + S C B D).

*****
H4 : eq (S A C B) (Fopp (S A B D))
H6 : eq f (Fdiv (S B C D') (S B C D))
H5 : eq f (Fdiv (S A C D') (S A C D))
f : F
H3 : not (Col B C D)
H2 : not (Col A C D)
H1 : Col C D D'
H0 : parallel A B C D
H : not (eq C D)
A,B,C,D,D' : Point
*****
eq (Fplus (Fopp (Fplus (Fplus (S A B C) (S A C D)) (S C B D))) (S A B D')) F0
+++++
replace (S A B D') with (S A B C + S A C D' + S C B D').
-----
Theorem col_par_par : forall A B C D D', ~C=D -> parallel A B C D -> Col C D D' -> parallel A B C D'.
Proof.
intros.
cases_col A C D.
assert (~Col B C D).
assert (parallel A B C D).
Geometry.
unfold parallel in H4.
unfold S4 in H4.
unfold parallel.
unfold S4.
assert (C**D' / C**D = S A C D' / S A C D).
assert (C**D' / C**D = S B C D' / S B C D).
set (C ** D' / C ** D) in *.
RewriteVar (S A C B) H4.
replace (S A B D) with (S A B C + S A C D + S C B D).
replace (S A B D') with (S A B C + S A C D' + S C B D').

*****
H4 : eq (S A C B) (Fopp (S A B D))
H6 : eq f (Fdiv (S B C D') (S B C D))
H5 : eq f (Fdiv (S A C D') (S A C D))
f : F
H3 : not (Col B C D)
H2 : not (Col A C D)
H1 : Col C D D'
H0 : parallel A B C D
H : not (eq C D)
A,B,C,D,D' : Point
*****
eq (Fplus (Fopp (Fplus (Fplus (S A B C) (S A C D)) (S C B D))) (Fplus (Fplus (S A B C) (S A C D')) (S C B D'))) F0
+++++
ring_simplify.
-----
Theorem col_par_par : forall A B C D D', ~C=D -> parallel A B C D -> Col C D D' -> parallel A B C D'.
Proof.
intros.
cases_col A C D.
assert (~Col B C D).
assert (parallel A B C D).
Geometry.
unfold parallel in H4.
unfold S4 in H4.
unfold parallel.
unfold S4.
assert (C**D' / C**D = S A C D' / S A C D).
assert (C**D' / C**D = S B C D' / S B C D).
set (C ** D' / C ** D) in *.
RewriteVar (S A C B) H4.
replace (S A B D) with (S A B C + S A C D + S C B D).
replace (S A B D') with (S A B C + S A C D' + S C B D').
ring_simplify.

*****
H4 : eq (S A C B) (Fopp (S A B D))
H6 : eq f (Fdiv (S B C D') (S B C D))
H5 : eq f (Fdiv (S A C D') (S A C D))
f : F
H3 : not (Col B C D)
H2 : not (Col A C D)
H1 : Col C D D'
H0 : parallel A B C D
H : not (eq C D)
A,B,C,D,D' : Point
*****
eq (Fplus (Fplus (Fminus (Fopp (S A C D)) (S C B D)) (S A C D')) (S C B D')) F0
+++++
RewriteVar (S A C D') H5.
-----
Theorem col_par_par : forall A B C D D', ~C=D -> parallel A B C D -> Col C D D' -> parallel A B C D'.
Proof.
intros.
cases_col A C D.
assert (~Col B C D).
assert (parallel A B C D).
Geometry.
unfold parallel in H4.
unfold S4 in H4.
unfold parallel.
unfold S4.
assert (C**D' / C**D = S A C D' / S A C D).
assert (C**D' / C**D = S B C D' / S B C D).
set (C ** D' / C ** D) in *.
RewriteVar (S A C B) H4.
replace (S A B D) with (S A B C + S A C D + S C B D).
replace (S A B D') with (S A B C + S A C D' + S C B D').
ring_simplify.
RewriteVar (S A C D') H5.

*****
H5 : eq (S A C D') (Fmult (S A C D) f)
H7 : not (eq (S A C D) F0)
H4 : eq (S A C B) (Fopp (S A B D))
H6 : eq f (Fdiv (S B C D') (S B C D))
f : F
H3 : not (Col B C D)
H2 : not (Col A C D)
H1 : Col C D D'
H0 : parallel A B C D
H : not (eq C D)
A,B,C,D,D' : Point
*****
eq (Fplus (Fplus (Fminus (Fopp (S A C D)) (S C B D)) (Fmult (S A C D) f)) (S C B D')) F0
+++++
replace (S C B D') with (- S B C D').
-----
Theorem col_par_par : forall A B C D D', ~C=D -> parallel A B C D -> Col C D D' -> parallel A B C D'.
Proof.
intros.
cases_col A C D.
assert (~Col B C D).
assert (parallel A B C D).
Geometry.
unfold parallel in H4.
unfold S4 in H4.
unfold parallel.
unfold S4.
assert (C**D' / C**D = S A C D' / S A C D).
assert (C**D' / C**D = S B C D' / S B C D).
set (C ** D' / C ** D) in *.
RewriteVar (S A C B) H4.
replace (S A B D) with (S A B C + S A C D + S C B D).
replace (S A B D') with (S A B C + S A C D' + S C B D').
ring_simplify.
RewriteVar (S A C D') H5.
replace (S C B D') with (- S B C D').

*****
H5 : eq (S A C D') (Fmult (S A C D) f)
H7 : not (eq (S A C D) F0)
H4 : eq (S A C B) (Fopp (S A B D))
H6 : eq f (Fdiv (S B C D') (S B C D))
f : F
H3 : not (Col B C D)
H2 : not (Col A C D)
H1 : Col C D D'
H0 : parallel A B C D
H : not (eq C D)
A,B,C,D,D' : Point
*****
eq (Fplus (Fplus (Fminus (Fopp (S A C D)) (S C B D)) (Fmult (S A C D) f)) (Fopp (S B C D'))) F0
+++++
RewriteVar (S B C D') H6.
-----
Theorem col_par_par : forall A B C D D', ~C=D -> parallel A B C D -> Col C D D' -> parallel A B C D'.
Proof.
intros.
cases_col A C D.
assert (~Col B C D).
assert (parallel A B C D).
Geometry.
unfold parallel in H4.
unfold S4 in H4.
unfold parallel.
unfold S4.
assert (C**D' / C**D = S A C D' / S A C D).
assert (C**D' / C**D = S B C D' / S B C D).
set (C ** D' / C ** D) in *.
RewriteVar (S A C B) H4.
replace (S A B D) with (S A B C + S A C D + S C B D).
replace (S A B D') with (S A B C + S A C D' + S C B D').
ring_simplify.
RewriteVar (S A C D') H5.
replace (S C B D') with (- S B C D').
RewriteVar (S B C D') H6.

*****
H6 : eq (S B C D') (Fmult (S B C D) f)
H8 : not (eq (S B C D) F0)
H5 : eq (S A C D') (Fmult (S A C D) f)
H7 : not (eq (S A C D) F0)
H4 : eq (S A C B) (Fopp (S A B D))
f : F
H3 : not (Col B C D)
H2 : not (Col A C D)
H1 : Col C D D'
H0 : parallel A B C D
H : not (eq C D)
A,B,C,D,D' : Point
*****
eq (Fplus (Fplus (Fminus (Fopp (S A C D)) (S C B D)) (Fmult (S A C D) f)) (Fopp (Fmult (S B C D) f))) F0
+++++
replace (S B C D) with (-S C B D).
-----
Theorem col_par_par : forall A B C D D', ~C=D -> parallel A B C D -> Col C D D' -> parallel A B C D'.
Proof.
intros.
cases_col A C D.
assert (~Col B C D).
assert (parallel A B C D).
Geometry.
unfold parallel in H4.
unfold S4 in H4.
unfold parallel.
unfold S4.
assert (C**D' / C**D = S A C D' / S A C D).
assert (C**D' / C**D = S B C D' / S B C D).
set (C ** D' / C ** D) in *.
RewriteVar (S A C B) H4.
replace (S A B D) with (S A B C + S A C D + S C B D).
replace (S A B D') with (S A B C + S A C D' + S C B D').
ring_simplify.
RewriteVar (S A C D') H5.
replace (S C B D') with (- S B C D').
RewriteVar (S B C D') H6.
replace (S B C D) with (-S C B D).

*****
H6 : eq (S B C D') (Fmult (S B C D) f)
H8 : not (eq (S B C D) F0)
H5 : eq (S A C D') (Fmult (S A C D) f)
H7 : not (eq (S A C D) F0)
H4 : eq (S A C B) (Fopp (S A B D))
f : F
H3 : not (Col B C D)
H2 : not (Col A C D)
H1 : Col C D D'
H0 : parallel A B C D
H : not (eq C D)
A,B,C,D,D' : Point
*****
eq (Fplus (Fplus (Fminus (Fopp (S A C D)) (S C B D)) (Fmult (S A C D) f)) (Fopp (Fmult (Fopp (S C B D)) f))) F0
+++++
ring_simplify.
-----
Theorem col_par_par : forall A B C D D', ~C=D -> parallel A B C D -> Col C D D' -> parallel A B C D'.
Proof.
intros.
cases_col A C D.
assert (~Col B C D).
assert (parallel A B C D).
Geometry.
unfold parallel in H4.
unfold S4 in H4.
unfold parallel.
unfold S4.
assert (C**D' / C**D = S A C D' / S A C D).
assert (C**D' / C**D = S B C D' / S B C D).
set (C ** D' / C ** D) in *.
RewriteVar (S A C B) H4.
replace (S A B D) with (S A B C + S A C D + S C B D).
replace (S A B D') with (S A B C + S A C D' + S C B D').
ring_simplify.
RewriteVar (S A C D') H5.
replace (S C B D') with (- S B C D').
RewriteVar (S B C D') H6.
replace (S B C D) with (-S C B D).
ring_simplify.

*****
H6 : eq (S B C D') (Fmult (S B C D) f)
H8 : not (eq (S B C D) F0)
H5 : eq (S A C D') (Fmult (S A C D) f)
H7 : not (eq (S A C D) F0)
H4 : eq (S A C B) (Fopp (S A B D))
f : F
H3 : not (Col B C D)
H2 : not (Col A C D)
H1 : Col C D D'
H0 : parallel A B C D
H : not (eq C D)
A,B,C,D,D' : Point
*****
eq (Fminus (Fplus (Fminus (Fmult (S A C D) f) (S A C D)) (Fmult (S C B D) f)) (S C B D)) F0
+++++
replace ( S A C D * f - S A C D + S C B D * f - S C B D) with ((S A C D + S C B D) * (f-1)) by ring.
-----
Theorem col_par_par : forall A B C D D', ~C=D -> parallel A B C D -> Col C D D' -> parallel A B C D'.
Proof.
intros.
cases_col A C D.
assert (~Col B C D).
assert (parallel A B C D).
Geometry.
unfold parallel in H4.
unfold S4 in H4.
unfold parallel.
unfold S4.
assert (C**D' / C**D = S A C D' / S A C D).
assert (C**D' / C**D = S B C D' / S B C D).
set (C ** D' / C ** D) in *.
RewriteVar (S A C B) H4.
replace (S A B D) with (S A B C + S A C D + S C B D).
replace (S A B D') with (S A B C + S A C D' + S C B D').
ring_simplify.
RewriteVar (S A C D') H5.
replace (S C B D') with (- S B C D').
RewriteVar (S B C D') H6.
replace (S B C D) with (-S C B D).
ring_simplify.
replace ( S A C D * f - S A C D + S C B D * f - S C B D) with ((S A C D + S C B D) * (f-1)) by ring.

*****
H6 : eq (S B C D') (Fmult (S B C D) f)
H8 : not (eq (S B C D) F0)
H5 : eq (S A C D') (Fmult (S A C D) f)
H7 : not (eq (S A C D) F0)
H4 : eq (S A C B) (Fopp (S A B D))
f : F
H3 : not (Col B C D)
H2 : not (Col A C D)
H1 : Col C D D'
H0 : parallel A B C D
H : not (eq C D)
A,B,C,D,D' : Point
*****
eq (Fmult (Fplus (S A C D) (S C B D)) (Fminus f F1)) F0
+++++
replace (S A C D + S C B D) with 0.
-----
Theorem col_par_par : forall A B C D D', ~C=D -> parallel A B C D -> Col C D D' -> parallel A B C D'.
Proof.
intros.
cases_col A C D.
assert (~Col B C D).
assert (parallel A B C D).
Geometry.
unfold parallel in H4.
unfold S4 in H4.
unfold parallel.
unfold S4.
assert (C**D' / C**D = S A C D' / S A C D).
assert (C**D' / C**D = S B C D' / S B C D).
set (C ** D' / C ** D) in *.
RewriteVar (S A C B) H4.
replace (S A B D) with (S A B C + S A C D + S C B D).
replace (S A B D') with (S A B C + S A C D' + S C B D').
ring_simplify.
RewriteVar (S A C D') H5.
replace (S C B D') with (- S B C D').
RewriteVar (S B C D') H6.
replace (S B C D) with (-S C B D).
ring_simplify.
replace ( S A C D * f - S A C D + S C B D * f - S C B D) with ((S A C D + S C B D) * (f-1)) by ring.
replace (S A C D + S C B D) with 0.

*****
H6 : eq (S B C D') (Fmult (S B C D) f)
H8 : not (eq (S B C D) F0)
H5 : eq (S A C D') (Fmult (S A C D) f)
H7 : not (eq (S A C D) F0)
H4 : eq (S A C B) (Fopp (S A B D))
f : F
H3 : not (Col B C D)
H2 : not (Col A C D)
H1 : Col C D D'
H0 : parallel A B C D
H : not (eq C D)
A,B,C,D,D' : Point
*****
eq (Fmult F0 (Fminus f F1)) F0
+++++
ring.
-----
Theorem col_par_par : forall A B C D D', ~C=D -> parallel A B C D -> Col C D D' -> parallel A B C D'.
Proof.
intros.
cases_col A C D.
assert (~Col B C D).
assert (parallel A B C D).
Geometry.
unfold parallel in H4.
unfold S4 in H4.
unfold parallel.
unfold S4.
assert (C**D' / C**D = S A C D' / S A C D).
assert (C**D' / C**D = S B C D' / S B C D).
set (C ** D' / C ** D) in *.
RewriteVar (S A C B) H4.
replace (S A B D) with (S A B C + S A C D + S C B D).
replace (S A B D') with (S A B C + S A C D' + S C B D').
ring_simplify.
RewriteVar (S A C D') H5.
replace (S C B D') with (- S B C D').
RewriteVar (S B C D') H6.
replace (S B C D) with (-S C B D).
ring_simplify.
replace ( S A C D * f - S A C D + S C B D * f - S C B D) with ((S A C D + S C B D) * (f-1)) by ring.
replace (S A C D + S C B D) with 0.

*****
H6 : eq (S B C D') (Fmult (S B C D) f)
H8 : not (eq (S B C D) F0)
H5 : eq (S A C D') (Fmult (S A C D) f)
H7 : not (eq (S A C D) F0)
H4 : eq (S A C B) (Fopp (S A B D))
f : F
H3 : not (Col B C D)
H2 : not (Col A C D)
H1 : Col C D D'
H0 : parallel A B C D
H : not (eq C D)
A,B,C,D,D' : Point
*****
eq F0 (Fplus (S A C D) (S C B D))
+++++
symmetry.
-----
Theorem col_par_par : forall A B C D D', ~C=D -> parallel A B C D -> Col C D D' -> parallel A B C D'.
Proof.
intros.
cases_col A C D.
assert (~Col B C D).
assert (parallel A B C D).
Geometry.
unfold parallel in H4.
unfold S4 in H4.
unfold parallel.
unfold S4.
assert (C**D' / C**D = S A C D' / S A C D).
assert (C**D' / C**D = S B C D' / S B C D).
set (C ** D' / C ** D) in *.
RewriteVar (S A C B) H4.
replace (S A B D) with (S A B C + S A C D + S C B D).
replace (S A B D') with (S A B C + S A C D' + S C B D').
ring_simplify.
RewriteVar (S A C D') H5.
replace (S C B D') with (- S B C D').
RewriteVar (S B C D') H6.
replace (S B C D) with (-S C B D).
ring_simplify.
replace ( S A C D * f - S A C D + S C B D * f - S C B D) with ((S A C D + S C B D) * (f-1)) by ring.
replace (S A C D + S C B D) with 0.
symmetry.

*****
H6 : eq (S B C D') (Fmult (S B C D) f)
H8 : not (eq (S B C D) F0)
H5 : eq (S A C D') (Fmult (S A C D) f)
H7 : not (eq (S A C D) F0)
H4 : eq (S A C B) (Fopp (S A B D))
f : F
H3 : not (Col B C D)
H2 : not (Col A C D)
H1 : Col C D D'
H0 : parallel A B C D
H : not (eq C D)
A,B,C,D,D' : Point
*****
eq (Fplus (S A C D) (S C B D)) F0
+++++
assert (parallel C D B A).
-----
Theorem col_par_par : forall A B C D D', ~C=D -> parallel A B C D -> Col C D D' -> parallel A B C D'.
Proof.
intros.
cases_col A C D.
assert (~Col B C D).
assert (parallel A B C D).
Geometry.
unfold parallel in H4.
unfold S4 in H4.
unfold parallel.
unfold S4.
assert (C**D' / C**D = S A C D' / S A C D).
assert (C**D' / C**D = S B C D' / S B C D).
set (C ** D' / C ** D) in *.
RewriteVar (S A C B) H4.
replace (S A B D) with (S A B C + S A C D + S C B D).
replace (S A B D') with (S A B C + S A C D' + S C B D').
ring_simplify.
RewriteVar (S A C D') H5.
replace (S C B D') with (- S B C D').
RewriteVar (S B C D') H6.
replace (S B C D) with (-S C B D).
ring_simplify.
replace ( S A C D * f - S A C D + S C B D * f - S C B D) with ((S A C D + S C B D) * (f-1)) by ring.
replace (S A C D + S C B D) with 0.
symmetry.
assert (parallel C D B A).

*****
H6 : eq (S B C D') (Fmult (S B C D) f)
H8 : not (eq (S B C D) F0)
H5 : eq (S A C D') (Fmult (S A C D) f)
H7 : not (eq (S A C D) F0)
H4 : eq (S A C B) (Fopp (S A B D))
f : F
H3 : not (Col B C D)
H2 : not (Col A C D)
H1 : Col C D D'
H0 : parallel A B C D
H : not (eq C D)
A,B,C,D,D' : Point
*****
parallel C D B A
+++++
Geometry.
-----
Theorem col_par_par : forall A B C D D', ~C=D -> parallel A B C D -> Col C D D' -> parallel A B C D'.
Proof.
intros.
cases_col A C D.
assert (~Col B C D).
assert (parallel A B C D).
Geometry.
unfold parallel in H4.
unfold S4 in H4.
unfold parallel.
unfold S4.
assert (C**D' / C**D = S A C D' / S A C D).
assert (C**D' / C**D = S B C D' / S B C D).
set (C ** D' / C ** D) in *.
RewriteVar (S A C B) H4.
replace (S A B D) with (S A B C + S A C D + S C B D).
replace (S A B D') with (S A B C + S A C D' + S C B D').
ring_simplify.
RewriteVar (S A C D') H5.
replace (S C B D') with (- S B C D').
RewriteVar (S B C D') H6.
replace (S B C D) with (-S C B D).
ring_simplify.
replace ( S A C D * f - S A C D + S C B D * f - S C B D) with ((S A C D + S C B D) * (f-1)) by ring.
replace (S A C D + S C B D) with 0.
symmetry.
assert (parallel C D B A).

*****
H9 : parallel C D B A
H6 : eq (S B C D') (Fmult (S B C D) f)
H8 : not (eq (S B C D) F0)
H5 : eq (S A C D') (Fmult (S A C D) f)
H7 : not (eq (S A C D) F0)
H4 : eq (S A C B) (Fopp (S A B D))
f : F
H3 : not (Col B C D)
H2 : not (Col A C D)
H1 : Col C D D'
H0 : parallel A B C D
H : not (eq C D)
A,B,C,D,D' : Point
*****
eq (Fplus (S A C D) (S C B D)) F0
+++++
Geometry.
-----
Theorem col_par_par : forall A B C D D', ~C=D -> parallel A B C D -> Col C D D' -> parallel A B C D'.
Proof.
intros.
cases_col A C D.
assert (~Col B C D).
assert (parallel A B C D).
Geometry.
unfold parallel in H4.
unfold S4 in H4.
unfold parallel.
unfold S4.
assert (C**D' / C**D = S A C D' / S A C D).
assert (C**D' / C**D = S B C D' / S B C D).
set (C ** D' / C ** D) in *.
RewriteVar (S A C B) H4.
replace (S A B D) with (S A B C + S A C D + S C B D).
replace (S A B D') with (S A B C + S A C D' + S C B D').
ring_simplify.
RewriteVar (S A C D') H5.
replace (S C B D') with (- S B C D').
RewriteVar (S B C D') H6.
replace (S B C D) with (-S C B D).
ring_simplify.
replace ( S A C D * f - S A C D + S C B D * f - S C B D) with ((S A C D + S C B D) * (f-1)) by ring.
replace (S A C D + S C B D) with 0.
symmetry.
assert (parallel C D B A).
Geometry.

*****
H9 : parallel C D B A
H6 : eq (S B C D') (Fmult (S B C D) f)
H8 : not (eq (S B C D) F0)
H5 : eq (S A C D') (Fmult (S A C D) f)
H7 : not (eq (S A C D) F0)
H4 : eq (S A C B) (Fopp (S A B D))
f : F
H3 : not (Col B C D)
H2 : not (Col A C D)
H1 : Col C D D'
H0 : parallel A B C D
H : not (eq C D)
A,B,C,D,D' : Point
*****
eq (Fplus (S A C D) (S C B D)) F0
+++++
unfold parallel in *.
-----
Theorem col_par_par : forall A B C D D', ~C=D -> parallel A B C D -> Col C D D' -> parallel A B C D'.
Proof.
intros.
cases_col A C D.
assert (~Col B C D).
assert (parallel A B C D).
Geometry.
unfold parallel in H4.
unfold S4 in H4.
unfold parallel.
unfold S4.
assert (C**D' / C**D = S A C D' / S A C D).
assert (C**D' / C**D = S B C D' / S B C D).
set (C ** D' / C ** D) in *.
RewriteVar (S A C B) H4.
replace (S A B D) with (S A B C + S A C D + S C B D).
replace (S A B D') with (S A B C + S A C D' + S C B D').
ring_simplify.
RewriteVar (S A C D') H5.
replace (S C B D') with (- S B C D').
RewriteVar (S B C D') H6.
replace (S B C D) with (-S C B D).
ring_simplify.
replace ( S A C D * f - S A C D + S C B D * f - S C B D) with ((S A C D + S C B D) * (f-1)) by ring.
replace (S A C D + S C B D) with 0.
symmetry.
assert (parallel C D B A).
Geometry.
unfold parallel in *.

*****
H9 : eq (S4 C B D A) F0
H6 : eq (S B C D') (Fmult (S B C D) f)
H8 : not (eq (S B C D) F0)
H5 : eq (S A C D') (Fmult (S A C D) f)
H7 : not (eq (S A C D) F0)
H4 : eq (S A C B) (Fopp (S A B D))
f : F
H3 : not (Col B C D)
H2 : not (Col A C D)
H1 : Col C D D'
H0 : eq (S4 A C B D) F0
H : not (eq C D)
A,B,C,D,D' : Point
*****
eq (Fplus (S A C D) (S C B D)) F0
+++++
unfold S4 in *.
-----
Theorem col_par_par : forall A B C D D', ~C=D -> parallel A B C D -> Col C D D' -> parallel A B C D'.
Proof.
intros.
cases_col A C D.
assert (~Col B C D).
assert (parallel A B C D).
Geometry.
unfold parallel in H4.
unfold S4 in H4.
unfold parallel.
unfold S4.
assert (C**D' / C**D = S A C D' / S A C D).
assert (C**D' / C**D = S B C D' / S B C D).
set (C ** D' / C ** D) in *.
RewriteVar (S A C B) H4.
replace (S A B D) with (S A B C + S A C D + S C B D).
replace (S A B D') with (S A B C + S A C D' + S C B D').
ring_simplify.
RewriteVar (S A C D') H5.
replace (S C B D') with (- S B C D').
RewriteVar (S B C D') H6.
replace (S B C D) with (-S C B D).
ring_simplify.
replace ( S A C D * f - S A C D + S C B D * f - S C B D) with ((S A C D + S C B D) * (f-1)) by ring.
replace (S A C D + S C B D) with 0.
symmetry.
assert (parallel C D B A).
Geometry.
unfold parallel in *.
unfold S4 in *.

*****
H9 : eq (Fplus (S C B D) (S C D A)) F0
H6 : eq (S B C D') (Fmult (S B C D) f)
H8 : not (eq (S B C D) F0)
H5 : eq (S A C D') (Fmult (S A C D) f)
H7 : not (eq (S A C D) F0)
H4 : eq (S A C B) (Fopp (S A B D))
f : F
H3 : not (Col B C D)
H2 : not (Col A C D)
H1 : Col C D D'
H0 : eq (Fplus (S A C B) (S A B D)) F0
H : not (eq C D)
A,B,C,D,D' : Point
*****
eq (Fplus (S A C D) (S C B D)) F0
+++++
RewriteVar (S C B D) H9.
-----
Theorem col_par_par : forall A B C D D', ~C=D -> parallel A B C D -> Col C D D' -> parallel A B C D'.
Proof.
intros.
cases_col A C D.
assert (~Col B C D).
assert (parallel A B C D).
Geometry.
unfold parallel in H4.
unfold S4 in H4.
unfold parallel.
unfold S4.
assert (C**D' / C**D = S A C D' / S A C D).
assert (C**D' / C**D = S B C D' / S B C D).
set (C ** D' / C ** D) in *.
RewriteVar (S A C B) H4.
replace (S A B D) with (S A B C + S A C D + S C B D).
replace (S A B D') with (S A B C + S A C D' + S C B D').
ring_simplify.
RewriteVar (S A C D') H5.
replace (S C B D') with (- S B C D').
RewriteVar (S B C D') H6.
replace (S B C D) with (-S C B D).
ring_simplify.
replace ( S A C D * f - S A C D + S C B D * f - S C B D) with ((S A C D + S C B D) * (f-1)) by ring.
replace (S A C D + S C B D) with 0.
symmetry.
assert (parallel C D B A).
Geometry.
unfold parallel in *.
unfold S4 in *.
RewriteVar (S C B D) H9.

*****
H9 : eq (S C B D) (Fopp (S C D A))
H6 : eq (S B C D') (Fmult (S B C D) f)
H8 : not (eq (S B C D) F0)
H5 : eq (S A C D') (Fmult (S A C D) f)
H7 : not (eq (S A C D) F0)
H4 : eq (S A C B) (Fopp (S A B D))
f : F
H3 : not (Col B C D)
H2 : not (Col A C D)
H1 : Col C D D'
H0 : eq (Fplus (S A C B) (S A B D)) F0
H : not (eq C D)
A,B,C,D,D' : Point
*****
eq (Fplus (S A C D) (Fopp (S C D A))) F0
+++++
uniformize_signed_areas.
-----
Theorem col_par_par : forall A B C D D', ~C=D -> parallel A B C D -> Col C D D' -> parallel A B C D'.
Proof.
intros.
cases_col A C D.
assert (~Col B C D).
assert (parallel A B C D).
Geometry.
unfold parallel in H4.
unfold S4 in H4.
unfold parallel.
unfold S4.
assert (C**D' / C**D = S A C D' / S A C D).
assert (C**D' / C**D = S B C D' / S B C D).
set (C ** D' / C ** D) in *.
RewriteVar (S A C B) H4.
replace (S A B D) with (S A B C + S A C D + S C B D).
replace (S A B D') with (S A B C + S A C D' + S C B D').
ring_simplify.
RewriteVar (S A C D') H5.
replace (S C B D') with (- S B C D').
RewriteVar (S B C D') H6.
replace (S B C D) with (-S C B D).
ring_simplify.
replace ( S A C D * f - S A C D + S C B D * f - S C B D) with ((S A C D + S C B D) * (f-1)) by ring.
replace (S A C D + S C B D) with 0.
symmetry.
assert (parallel C D B A).
Geometry.
unfold parallel in *.
unfold S4 in *.
RewriteVar (S C B D) H9.
uniformize_signed_areas.

*****
H9 : eq (Fopp (S B C D)) (Fopp (S A C D))
H6 : eq (S B C D') (Fmult (S B C D) f)
H8 : not (eq (S B C D) F0)
H5 : eq (S A C D') (Fmult (S A C D) f)
H7 : not (eq (S A C D) F0)
H4 : eq (S A C B) (Fopp (S A B D))
H0 : eq (Fplus (S A C B) (S A B D)) F0
f : F
H3 : not (Col B C D)
H2 : not (Col A C D)
H1 : Col C D D'
H : not (eq C D)
A,B,C,D,D' : Point
*****
eq (Fplus (S A C D) (Fopp (S A C D))) F0
+++++
ring.
-----
Theorem col_par_par : forall A B C D D', ~C=D -> parallel A B C D -> Col C D D' -> parallel A B C D'.
Proof.
intros.
cases_col A C D.
assert (~Col B C D).
assert (parallel A B C D).
Geometry.
unfold parallel in H4.
unfold S4 in H4.
unfold parallel.
unfold S4.
assert (C**D' / C**D = S A C D' / S A C D).
assert (C**D' / C**D = S B C D' / S B C D).
set (C ** D' / C ** D) in *.
RewriteVar (S A C B) H4.
replace (S A B D) with (S A B C + S A C D + S C B D).
replace (S A B D') with (S A B C + S A C D' + S C B D').
ring_simplify.
RewriteVar (S A C D') H5.
replace (S C B D') with (- S B C D').
RewriteVar (S B C D') H6.
replace (S B C D) with (-S C B D).

*****
H6 : eq (S B C D') (Fmult (S B C D) f)
H8 : not (eq (S B C D) F0)
H5 : eq (S A C D') (Fmult (S A C D) f)
H7 : not (eq (S A C D) F0)
H4 : eq (S A C B) (Fopp (S A B D))
f : F
H3 : not (Col B C D)
H2 : not (Col A C D)
H1 : Col C D D'
H0 : parallel A B C D
H : not (eq C D)
A,B,C,D,D' : Point
*****
eq (Fopp (S C B D)) (S B C D)
+++++
Geometry.
-----
Theorem col_par_par : forall A B C D D', ~C=D -> parallel A B C D -> Col C D D' -> parallel A B C D'.
Proof.
intros.
cases_col A C D.
assert (~Col B C D).
assert (parallel A B C D).
Geometry.
unfold parallel in H4.
unfold S4 in H4.
unfold parallel.
unfold S4.
assert (C**D' / C**D = S A C D' / S A C D).
assert (C**D' / C**D = S B C D' / S B C D).
set (C ** D' / C ** D) in *.
RewriteVar (S A C B) H4.
replace (S A B D) with (S A B C + S A C D + S C B D).
replace (S A B D') with (S A B C + S A C D' + S C B D').
ring_simplify.
RewriteVar (S A C D') H5.
replace (S C B D') with (- S B C D').
RewriteVar (S B C D') H6.

*****
H6 : eq f (Fdiv (S B C D') (S B C D))
H5 : eq (S A C D') (Fmult (S A C D) (Fdiv (S B C D') (S B C D)))
H7 : not (eq (S A C D) F0)
H4 : eq (S A C B) (Fopp (S A B D))
f : F
H3 : not (Col B C D)
H2 : not (Col A C D)
H1 : Col C D D'
H0 : parallel A B C D
H : not (eq C D)
A,B,C,D,D' : Point
*****
not (eq (S B C D) F0)
+++++
Geometry.
-----
Theorem col_par_par : forall A B C D D', ~C=D -> parallel A B C D -> Col C D D' -> parallel A B C D'.
Proof.
intros.
cases_col A C D.
assert (~Col B C D).
assert (parallel A B C D).
Geometry.
unfold parallel in H4.
unfold S4 in H4.
unfold parallel.
unfold S4.
assert (C**D' / C**D = S A C D' / S A C D).
assert (C**D' / C**D = S B C D' / S B C D).
set (C ** D' / C ** D) in *.
RewriteVar (S A C B) H4.
replace (S A B D) with (S A B C + S A C D + S C B D).
replace (S A B D') with (S A B C + S A C D' + S C B D').
ring_simplify.
RewriteVar (S A C D') H5.
replace (S C B D') with (- S B C D').

*****
H5 : eq (S A C D') (Fmult (S A C D) f)
H7 : not (eq (S A C D) F0)
H4 : eq (S A C B) (Fopp (S A B D))
H6 : eq f (Fdiv (S B C D') (S B C D))
f : F
H3 : not (Col B C D)
H2 : not (Col A C D)
H1 : Col C D D'
H0 : parallel A B C D
H : not (eq C D)
A,B,C,D,D' : Point
*****
eq (Fopp (S B C D')) (S C B D')
+++++
Geometry.
-----
Theorem col_par_par : forall A B C D D', ~C=D -> parallel A B C D -> Col C D D' -> parallel A B C D'.
Proof.
intros.
cases_col A C D.
assert (~Col B C D).
assert (parallel A B C D).
Geometry.
unfold parallel in H4.
unfold S4 in H4.
unfold parallel.
unfold S4.
assert (C**D' / C**D = S A C D' / S A C D).
assert (C**D' / C**D = S B C D' / S B C D).
set (C ** D' / C ** D) in *.
RewriteVar (S A C B) H4.
replace (S A B D) with (S A B C + S A C D + S C B D).
replace (S A B D') with (S A B C + S A C D' + S C B D').
ring_simplify.
RewriteVar (S A C D') H5.

*****
H5 : eq f (Fdiv (S A C D') (S A C D))
H4 : eq (S A C B) (Fopp (S A B D))
H6 : eq (Fdiv (S A C D') (S A C D)) (Fdiv (S B C D') (S B C D))
f : F
H3 : not (Col B C D)
H2 : not (Col A C D)
H1 : Col C D D'
H0 : parallel A B C D
H : not (eq C D)
A,B,C,D,D' : Point
*****
not (eq (S A C D) F0)
+++++
Geometry.
-----
Theorem col_par_par : forall A B C D D', ~C=D -> parallel A B C D -> Col C D D' -> parallel A B C D'.
Proof.
intros.
cases_col A C D.
assert (~Col B C D).
assert (parallel A B C D).
Geometry.
unfold parallel in H4.
unfold S4 in H4.
unfold parallel.
unfold S4.
assert (C**D' / C**D = S A C D' / S A C D).
assert (C**D' / C**D = S B C D' / S B C D).
set (C ** D' / C ** D) in *.
RewriteVar (S A C B) H4.
replace (S A B D) with (S A B C + S A C D + S C B D).
replace (S A B D') with (S A B C + S A C D' + S C B D').

*****
H4 : eq (S A C B) (Fopp (S A B D))
H6 : eq f (Fdiv (S B C D') (S B C D))
H5 : eq f (Fdiv (S A C D') (S A C D))
f : F
H3 : not (Col B C D)
H2 : not (Col A C D)
H1 : Col C D D'
H0 : parallel A B C D
H : not (eq C D)
A,B,C,D,D' : Point
*****
eq (Fplus (Fplus (S A B C) (S A C D')) (S C B D')) (S A B D')
+++++
symmetry.
-----
Theorem col_par_par : forall A B C D D', ~C=D -> parallel A B C D -> Col C D D' -> parallel A B C D'.
Proof.
intros.
cases_col A C D.
assert (~Col B C D).
assert (parallel A B C D).
Geometry.
unfold parallel in H4.
unfold S4 in H4.
unfold parallel.
unfold S4.
assert (C**D' / C**D = S A C D' / S A C D).
assert (C**D' / C**D = S B C D' / S B C D).
set (C ** D' / C ** D) in *.
RewriteVar (S A C B) H4.
replace (S A B D) with (S A B C + S A C D + S C B D).
replace (S A B D') with (S A B C + S A C D' + S C B D').
symmetry.

*****
H4 : eq (S A C B) (Fopp (S A B D))
H6 : eq f (Fdiv (S B C D') (S B C D))
H5 : eq f (Fdiv (S A C D') (S A C D))
f : F
H3 : not (Col B C D)
H2 : not (Col A C D)
H1 : Col C D D'
H0 : parallel A B C D
H : not (eq C D)
A,B,C,D,D' : Point
*****
eq (S A B D') (Fplus (Fplus (S A B C) (S A C D')) (S C B D'))
+++++
Geometry.
-----
Theorem col_par_par : forall A B C D D', ~C=D -> parallel A B C D -> Col C D D' -> parallel A B C D'.
Proof.
intros.
cases_col A C D.
assert (~Col B C D).
assert (parallel A B C D).
Geometry.
unfold parallel in H4.
unfold S4 in H4.
unfold parallel.
unfold S4.
assert (C**D' / C**D = S A C D' / S A C D).
assert (C**D' / C**D = S B C D' / S B C D).
set (C ** D' / C ** D) in *.
RewriteVar (S A C B) H4.
replace (S A B D) with (S A B C + S A C D + S C B D).

*****
H4 : eq (S A C B) (Fopp (S A B D))
H6 : eq f (Fdiv (S B C D') (S B C D))
H5 : eq f (Fdiv (S A C D') (S A C D))
f : F
H3 : not (Col B C D)
H2 : not (Col A C D)
H1 : Col C D D'
H0 : parallel A B C D
H : not (eq C D)
A,B,C,D,D' : Point
*****
eq (Fplus (Fplus (S A B C) (S A C D)) (S C B D)) (S A B D)
+++++
symmetry.
-----
Theorem col_par_par : forall A B C D D', ~C=D -> parallel A B C D -> Col C D D' -> parallel A B C D'.
Proof.
intros.
cases_col A C D.
assert (~Col B C D).
assert (parallel A B C D).
Geometry.
unfold parallel in H4.
unfold S4 in H4.
unfold parallel.
unfold S4.
assert (C**D' / C**D = S A C D' / S A C D).
assert (C**D' / C**D = S B C D' / S B C D).
set (C ** D' / C ** D) in *.
RewriteVar (S A C B) H4.
replace (S A B D) with (S A B C + S A C D + S C B D).
symmetry.

*****
H4 : eq (S A C B) (Fopp (S A B D))
H6 : eq f (Fdiv (S B C D') (S B C D))
H5 : eq f (Fdiv (S A C D') (S A C D))
f : F
H3 : not (Col B C D)
H2 : not (Col A C D)
H1 : Col C D D'
H0 : parallel A B C D
H : not (eq C D)
A,B,C,D,D' : Point
*****
eq (S A B D) (Fplus (Fplus (S A B C) (S A C D)) (S C B D))
+++++
Geometry.
-----
Theorem col_par_par : forall A B C D D', ~C=D -> parallel A B C D -> Col C D D' -> parallel A B C D'.
Proof.
intros.
cases_col A C D.

*****

*****

+++++
Qed.
-----
