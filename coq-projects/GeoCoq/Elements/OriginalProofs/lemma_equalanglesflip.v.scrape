Require Export GeoCoq.Elements.OriginalProofs.lemma_ABCequalsCBA.
-----
Require Export GeoCoq.Elements.OriginalProofs.lemma_equalanglestransitive.
-----
Section Euclid.
-----
Context `{Ax:euclidean_neutral_ruler_compass}.
-----
Lemma lemma_equalanglesflip : \n   forall A B C D E F, \n   CongA A B C D E F ->\n   CongA C B A F E D.
-----
Lemma lemma_equalanglesflip : forall A B C D E F, CongA A B C D E F -> CongA C B A F E D.

*****
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
forall (A B C D E F : Point) (_ : CongA A B C D E F), CongA C B A F E D
+++++
Proof.
-----
Lemma lemma_equalanglesflip : forall A B C D E F, CongA A B C D E F -> CongA C B A F E D.
Proof.

*****
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
forall (A B C D E F : Point) (_ : CongA A B C D E F), CongA C B A F E D
+++++
intros.
-----
Lemma lemma_equalanglesflip : forall A B C D E F, CongA A B C D E F -> CongA C B A F E D.
Proof.
intros.

*****
H : CongA A B C D E F
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA C B A F E D
+++++
assert (nCol D E F).
-----
Lemma lemma_equalanglesflip : forall A B C D E F, CongA A B C D E F -> CongA C B A F E D.
Proof.
intros.
assert (nCol D E F).

*****
H : CongA A B C D E F
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
nCol D E F
+++++
conclude lemma_equalanglesNC.
-----
Lemma lemma_equalanglesflip : forall A B C D E F, CongA A B C D E F -> CongA C B A F E D.
Proof.
intros.
assert (nCol D E F).

*****
H0 : nCol D E F
H : CongA A B C D E F
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA C B A F E D
+++++
idtac.
-----
Lemma lemma_equalanglesflip : forall A B C D E F, CongA A B C D E F -> CongA C B A F E D.
Proof.
intros.
assert (nCol D E F).
idtac.

*****
H0 : nCol D E F
H : CongA A B C D E F
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA C B A F E D
+++++
assert (CongA D E F A B C).
-----
Lemma lemma_equalanglesflip : forall A B C D E F, CongA A B C D E F -> CongA C B A F E D.
Proof.
intros.
assert (nCol D E F).
idtac.
assert (CongA D E F A B C).

*****
H0 : nCol D E F
H : CongA A B C D E F
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA D E F A B C
+++++
conclude lemma_equalanglessymmetric.
-----
Lemma lemma_equalanglesflip : forall A B C D E F, CongA A B C D E F -> CongA C B A F E D.
Proof.
intros.
assert (nCol D E F).
idtac.
assert (CongA D E F A B C).

*****
H1 : CongA D E F A B C
H0 : nCol D E F
H : CongA A B C D E F
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA C B A F E D
+++++
idtac.
-----
Lemma lemma_equalanglesflip : forall A B C D E F, CongA A B C D E F -> CongA C B A F E D.
Proof.
intros.
assert (nCol D E F).
idtac.
assert (CongA D E F A B C).
idtac.

*****
H1 : CongA D E F A B C
H0 : nCol D E F
H : CongA A B C D E F
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA C B A F E D
+++++
assert (nCol A B C).
-----
Lemma lemma_equalanglesflip : forall A B C D E F, CongA A B C D E F -> CongA C B A F E D.
Proof.
intros.
assert (nCol D E F).
idtac.
assert (CongA D E F A B C).
idtac.
assert (nCol A B C).

*****
H1 : CongA D E F A B C
H0 : nCol D E F
H : CongA A B C D E F
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
nCol A B C
+++++
conclude lemma_equalanglesNC.
-----
Lemma lemma_equalanglesflip : forall A B C D E F, CongA A B C D E F -> CongA C B A F E D.
Proof.
intros.
assert (nCol D E F).
idtac.
assert (CongA D E F A B C).
idtac.
assert (nCol A B C).

*****
H2 : nCol A B C
H1 : CongA D E F A B C
H0 : nCol D E F
H : CongA A B C D E F
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA C B A F E D
+++++
idtac.
-----
Lemma lemma_equalanglesflip : forall A B C D E F, CongA A B C D E F -> CongA C B A F E D.
Proof.
intros.
assert (nCol D E F).
idtac.
assert (CongA D E F A B C).
idtac.
assert (nCol A B C).
idtac.

*****
H2 : nCol A B C
H1 : CongA D E F A B C
H0 : nCol D E F
H : CongA A B C D E F
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA C B A F E D
+++++
assert (~ Col C B A).
-----
Lemma lemma_equalanglesflip : forall A B C D E F, CongA A B C D E F -> CongA C B A F E D.
Proof.
intros.
assert (nCol D E F).
idtac.
assert (CongA D E F A B C).
idtac.
assert (nCol A B C).
idtac.
assert (~ Col C B A).

*****
H2 : nCol A B C
H1 : CongA D E F A B C
H0 : nCol D E F
H : CongA A B C D E F
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (Col C B A)
+++++
intro.
-----
Lemma lemma_equalanglesflip : forall A B C D E F, CongA A B C D E F -> CongA C B A F E D.
Proof.
intros.
assert (nCol D E F).
idtac.
assert (CongA D E F A B C).
idtac.
assert (nCol A B C).
idtac.
assert (~ Col C B A).
intro.

*****
H3 : Col C B A
H2 : nCol A B C
H1 : CongA D E F A B C
H0 : nCol D E F
H : CongA A B C D E F
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col A B C).
-----
Lemma lemma_equalanglesflip : forall A B C D E F, CongA A B C D E F -> CongA C B A F E D.
Proof.
intros.
assert (nCol D E F).
idtac.
assert (CongA D E F A B C).
idtac.
assert (nCol A B C).
idtac.
assert (~ Col C B A).
intro.
assert (Col A B C).

*****
H3 : Col C B A
H2 : nCol A B C
H1 : CongA D E F A B C
H0 : nCol D E F
H : CongA A B C D E F
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Col A B C
+++++
forward_using lemma_collinearorder.
-----
Lemma lemma_equalanglesflip : forall A B C D E F, CongA A B C D E F -> CongA C B A F E D.
Proof.
intros.
assert (nCol D E F).
idtac.
assert (CongA D E F A B C).
idtac.
assert (nCol A B C).
idtac.
assert (~ Col C B A).
intro.
assert (Col A B C).

*****
H4 : Col A B C
H3 : Col C B A
H2 : nCol A B C
H1 : CongA D E F A B C
H0 : nCol D E F
H : CongA A B C D E F
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
idtac.
-----
Lemma lemma_equalanglesflip : forall A B C D E F, CongA A B C D E F -> CongA C B A F E D.
Proof.
intros.
assert (nCol D E F).
idtac.
assert (CongA D E F A B C).
idtac.
assert (nCol A B C).
idtac.
assert (~ Col C B A).
intro.
assert (Col A B C).
idtac.

*****
H4 : Col A B C
H3 : Col C B A
H2 : nCol A B C
H1 : CongA D E F A B C
H0 : nCol D E F
H : CongA A B C D E F
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma lemma_equalanglesflip : forall A B C D E F, CongA A B C D E F -> CongA C B A F E D.
Proof.
intros.
assert (nCol D E F).
idtac.
assert (CongA D E F A B C).
idtac.
assert (nCol A B C).
idtac.
assert (~ Col C B A).

*****
H3 : not (Col C B A)
H2 : nCol A B C
H1 : CongA D E F A B C
H0 : nCol D E F
H : CongA A B C D E F
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA C B A F E D
+++++
assert (CongA C B A A B C).
-----
Lemma lemma_equalanglesflip : forall A B C D E F, CongA A B C D E F -> CongA C B A F E D.
Proof.
intros.
assert (nCol D E F).
idtac.
assert (CongA D E F A B C).
idtac.
assert (nCol A B C).
idtac.
assert (~ Col C B A).
assert (CongA C B A A B C).

*****
H3 : not (Col C B A)
H2 : nCol A B C
H1 : CongA D E F A B C
H0 : nCol D E F
H : CongA A B C D E F
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA C B A A B C
+++++
conclude lemma_ABCequalsCBA.
-----
Lemma lemma_equalanglesflip : forall A B C D E F, CongA A B C D E F -> CongA C B A F E D.
Proof.
intros.
assert (nCol D E F).
idtac.
assert (CongA D E F A B C).
idtac.
assert (nCol A B C).
idtac.
assert (~ Col C B A).
assert (CongA C B A A B C).

*****
H4 : CongA C B A A B C
H3 : not (Col C B A)
H2 : nCol A B C
H1 : CongA D E F A B C
H0 : nCol D E F
H : CongA A B C D E F
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA C B A F E D
+++++
idtac.
-----
Lemma lemma_equalanglesflip : forall A B C D E F, CongA A B C D E F -> CongA C B A F E D.
Proof.
intros.
assert (nCol D E F).
idtac.
assert (CongA D E F A B C).
idtac.
assert (nCol A B C).
idtac.
assert (~ Col C B A).
assert (CongA C B A A B C).
idtac.

*****
H4 : CongA C B A A B C
H3 : not (Col C B A)
H2 : nCol A B C
H1 : CongA D E F A B C
H0 : nCol D E F
H : CongA A B C D E F
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA C B A F E D
+++++
assert (CongA C B A D E F).
-----
Lemma lemma_equalanglesflip : forall A B C D E F, CongA A B C D E F -> CongA C B A F E D.
Proof.
intros.
assert (nCol D E F).
idtac.
assert (CongA D E F A B C).
idtac.
assert (nCol A B C).
idtac.
assert (~ Col C B A).
assert (CongA C B A A B C).
idtac.
assert (CongA C B A D E F).

*****
H4 : CongA C B A A B C
H3 : not (Col C B A)
H2 : nCol A B C
H1 : CongA D E F A B C
H0 : nCol D E F
H : CongA A B C D E F
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA C B A D E F
+++++
conclude lemma_equalanglestransitive.
-----
Lemma lemma_equalanglesflip : forall A B C D E F, CongA A B C D E F -> CongA C B A F E D.
Proof.
intros.
assert (nCol D E F).
idtac.
assert (CongA D E F A B C).
idtac.
assert (nCol A B C).
idtac.
assert (~ Col C B A).
assert (CongA C B A A B C).
idtac.
assert (CongA C B A D E F).

*****
H5 : CongA C B A D E F
H4 : CongA C B A A B C
H3 : not (Col C B A)
H2 : nCol A B C
H1 : CongA D E F A B C
H0 : nCol D E F
H : CongA A B C D E F
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA C B A F E D
+++++
idtac.
-----
Lemma lemma_equalanglesflip : forall A B C D E F, CongA A B C D E F -> CongA C B A F E D.
Proof.
intros.
assert (nCol D E F).
idtac.
assert (CongA D E F A B C).
idtac.
assert (nCol A B C).
idtac.
assert (~ Col C B A).
assert (CongA C B A A B C).
idtac.
assert (CongA C B A D E F).
idtac.

*****
H5 : CongA C B A D E F
H4 : CongA C B A A B C
H3 : not (Col C B A)
H2 : nCol A B C
H1 : CongA D E F A B C
H0 : nCol D E F
H : CongA A B C D E F
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA C B A F E D
+++++
assert (CongA D E F F E D).
-----
Lemma lemma_equalanglesflip : forall A B C D E F, CongA A B C D E F -> CongA C B A F E D.
Proof.
intros.
assert (nCol D E F).
idtac.
assert (CongA D E F A B C).
idtac.
assert (nCol A B C).
idtac.
assert (~ Col C B A).
assert (CongA C B A A B C).
idtac.
assert (CongA C B A D E F).
idtac.
assert (CongA D E F F E D).

*****
H5 : CongA C B A D E F
H4 : CongA C B A A B C
H3 : not (Col C B A)
H2 : nCol A B C
H1 : CongA D E F A B C
H0 : nCol D E F
H : CongA A B C D E F
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA D E F F E D
+++++
conclude lemma_ABCequalsCBA.
-----
Lemma lemma_equalanglesflip : forall A B C D E F, CongA A B C D E F -> CongA C B A F E D.
Proof.
intros.
assert (nCol D E F).
idtac.
assert (CongA D E F A B C).
idtac.
assert (nCol A B C).
idtac.
assert (~ Col C B A).
assert (CongA C B A A B C).
idtac.
assert (CongA C B A D E F).
idtac.
assert (CongA D E F F E D).

*****
H6 : CongA D E F F E D
H5 : CongA C B A D E F
H4 : CongA C B A A B C
H3 : not (Col C B A)
H2 : nCol A B C
H1 : CongA D E F A B C
H0 : nCol D E F
H : CongA A B C D E F
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA C B A F E D
+++++
idtac.
-----
Lemma lemma_equalanglesflip : forall A B C D E F, CongA A B C D E F -> CongA C B A F E D.
Proof.
intros.
assert (nCol D E F).
idtac.
assert (CongA D E F A B C).
idtac.
assert (nCol A B C).
idtac.
assert (~ Col C B A).
assert (CongA C B A A B C).
idtac.
assert (CongA C B A D E F).
idtac.
assert (CongA D E F F E D).
idtac.

*****
H6 : CongA D E F F E D
H5 : CongA C B A D E F
H4 : CongA C B A A B C
H3 : not (Col C B A)
H2 : nCol A B C
H1 : CongA D E F A B C
H0 : nCol D E F
H : CongA A B C D E F
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA C B A F E D
+++++
assert (CongA C B A F E D).
-----
Lemma lemma_equalanglesflip : forall A B C D E F, CongA A B C D E F -> CongA C B A F E D.
Proof.
intros.
assert (nCol D E F).
idtac.
assert (CongA D E F A B C).
idtac.
assert (nCol A B C).
idtac.
assert (~ Col C B A).
assert (CongA C B A A B C).
idtac.
assert (CongA C B A D E F).
idtac.
assert (CongA D E F F E D).
idtac.
assert (CongA C B A F E D).

*****
H6 : CongA D E F F E D
H5 : CongA C B A D E F
H4 : CongA C B A A B C
H3 : not (Col C B A)
H2 : nCol A B C
H1 : CongA D E F A B C
H0 : nCol D E F
H : CongA A B C D E F
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA C B A F E D
+++++
conclude lemma_equalanglestransitive.
-----
Lemma lemma_equalanglesflip : forall A B C D E F, CongA A B C D E F -> CongA C B A F E D.
Proof.
intros.
assert (nCol D E F).
idtac.
assert (CongA D E F A B C).
idtac.
assert (nCol A B C).
idtac.
assert (~ Col C B A).
assert (CongA C B A A B C).
idtac.
assert (CongA C B A D E F).
idtac.
assert (CongA D E F F E D).
idtac.
assert (CongA C B A F E D).

*****
H7 : CongA C B A F E D
H6 : CongA D E F F E D
H5 : CongA C B A D E F
H4 : CongA C B A A B C
H3 : not (Col C B A)
H2 : nCol A B C
H1 : CongA D E F A B C
H0 : nCol D E F
H : CongA A B C D E F
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA C B A F E D
+++++
idtac.
-----
Lemma lemma_equalanglesflip : forall A B C D E F, CongA A B C D E F -> CongA C B A F E D.
Proof.
intros.
assert (nCol D E F).
idtac.
assert (CongA D E F A B C).
idtac.
assert (nCol A B C).
idtac.
assert (~ Col C B A).
assert (CongA C B A A B C).
idtac.
assert (CongA C B A D E F).
idtac.
assert (CongA D E F F E D).
idtac.
assert (CongA C B A F E D).
idtac.

*****
H7 : CongA C B A F E D
H6 : CongA D E F F E D
H5 : CongA C B A D E F
H4 : CongA C B A A B C
H3 : not (Col C B A)
H2 : nCol A B C
H1 : CongA D E F A B C
H0 : nCol D E F
H : CongA A B C D E F
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA C B A F E D
+++++
close.
-----
Lemma lemma_equalanglesflip : forall A B C D E F, CongA A B C D E F -> CongA C B A F E D.
Proof.
intros.
assert (nCol D E F).

*****

*****

+++++
Qed.
-----
End Euclid.
-----
