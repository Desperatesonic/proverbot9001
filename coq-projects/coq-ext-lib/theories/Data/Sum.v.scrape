Require Import ExtLib.Core.RelDec.
-----
Require Import ExtLib.Tactics.Consider.
-----
Require Import ExtLib.Tactics.Injection.
-----
Set Implicit Arguments.
-----
Set Strict Implicit.
-----
Section PairParam.
-----
Variable T : Type.
-----
Variable eqT : T -> T -> Prop.
-----
Variable U : Type.
-----
Variable eqU : U -> U -> Prop.
-----
Inductive sum_eq : T + U -> T + U -> Prop :=\n  | Inl_eq : forall a b, eqT a b -> sum_eq (inl a) (inl b)\n  | Inr_eq : forall a b, eqU a b -> sum_eq (inr a) (inr b).
-----
Variable EDT : RelDec eqT.
-----
Variable EDU : RelDec eqU.
-----
Global Instance RelDec_equ_sum\n  : RelDec (sum_eq) :=\n  { rel_dec := fun x y =>\n                 match x , y with\n                   | inl x , inl y => rel_dec x y\n                   | inr x , inr y => rel_dec x y\n                   | inl _ , inr _ => false\n                   | inr _ , inl _ => false\n                 end }.
-----
Variable EDCT : RelDec_Correct EDT.
-----
Variable EDCU : RelDec_Correct EDU.
-----
Global Instance RelDec_Correct_equ_sum : RelDec_Correct RelDec_equ_sum.
-----
Global Instance RelDec_Correct_equ_sum : RelDec_Correct RelDec_equ_sum.

*****
EDCU : RelDec_Correct EDU
EDCT : RelDec_Correct EDT
EDU : RelDec eqU
EDT : RelDec eqT
eqU : forall (_ : U) (_ : U), Prop
U : Type
eqT : forall (_ : T) (_ : T), Prop
T : Type
*****
RelDec_Correct RelDec_equ_sum
+++++
Proof.
-----
Global Instance RelDec_Correct_equ_sum : RelDec_Correct RelDec_equ_sum.
Proof.

*****
EDCU : RelDec_Correct EDU
EDCT : RelDec_Correct EDT
EDU : RelDec eqU
EDT : RelDec eqT
eqU : forall (_ : U) (_ : U), Prop
U : Type
eqT : forall (_ : T) (_ : T), Prop
T : Type
*****
RelDec_Correct RelDec_equ_sum
+++++
constructor; destruct x; destruct y; split; simpl in *; intros; repeat match goal with | [ H : context [ rel_dec ?X ?Y ] |- _ ] => consider (rel_dec X Y); intros; subst | [ |- context [ rel_dec ?X ?Y ] ] => consider (rel_dec X Y); intros; subst end; intuition; try solve [ constructor; auto | congruence ].
-----
Global Instance RelDec_Correct_equ_sum : RelDec_Correct RelDec_equ_sum.
Proof.
constructor; destruct x; destruct y; split; simpl in *; intros; repeat match goal with | [ H : context [ rel_dec ?X ?Y ] |- _ ] => consider (rel_dec X Y); intros; subst | [ |- context [ rel_dec ?X ?Y ] ] => consider (rel_dec X Y); intros; subst end; intuition; try solve [ constructor; auto | congruence ].

*****
H0 : forall _ : eqT t t0, False
H : sum_eq (inl t) (inl t0)
t,t0 : T
EDCU : RelDec_Correct EDU
EDCT : RelDec_Correct EDT
EDU : RelDec eqU
EDT : RelDec eqT
eqU : forall (_ : U) (_ : U), Prop
U : Type
eqT : forall (_ : T) (_ : T), Prop
T : Type
*****
eq false true
+++++
+
-----
Global Instance RelDec_Correct_equ_sum : RelDec_Correct RelDec_equ_sum.
Proof.
constructor; destruct x; destruct y; split; simpl in *; intros; repeat match goal with | [ H : context [ rel_dec ?X ?Y ] |- _ ] => consider (rel_dec X Y); intros; subst | [ |- context [ rel_dec ?X ?Y ] ] => consider (rel_dec X Y); intros; subst end; intuition; try solve [ constructor; auto | congruence ].
+

*****
H0 : forall _ : eqT t t0, False
H : sum_eq (inl t) (inl t0)
t,t0 : T
EDCU : RelDec_Correct EDU
EDCT : RelDec_Correct EDT
EDU : RelDec eqU
EDT : RelDec eqT
eqU : forall (_ : U) (_ : U), Prop
U : Type
eqT : forall (_ : T) (_ : T), Prop
T : Type
*****
eq false true
+++++
inversion H.
-----
Global Instance RelDec_Correct_equ_sum : RelDec_Correct RelDec_equ_sum.
Proof.
constructor; destruct x; destruct y; split; simpl in *; intros; repeat match goal with | [ H : context [ rel_dec ?X ?Y ] |- _ ] => consider (rel_dec X Y); intros; subst | [ |- context [ rel_dec ?X ?Y ] ] => consider (rel_dec X Y); intros; subst end; intuition; try solve [ constructor; auto | congruence ].
+
inversion H.

*****
H2 : eq b t0
H1 : eq a t
H3 : eqT t t0
a,b : T
H0 : forall _ : eqT t t0, False
H : sum_eq (inl t) (inl t0)
t,t0 : T
EDCU : RelDec_Correct EDU
EDCT : RelDec_Correct EDT
EDU : RelDec eqU
EDT : RelDec eqT
eqU : forall (_ : U) (_ : U), Prop
U : Type
eqT : forall (_ : T) (_ : T), Prop
T : Type
*****
eq false true
+++++
intuition.
-----
Global Instance RelDec_Correct_equ_sum : RelDec_Correct RelDec_equ_sum.
Proof.
constructor; destruct x; destruct y; split; simpl in *; intros; repeat match goal with | [ H : context [ rel_dec ?X ?Y ] |- _ ] => consider (rel_dec X Y); intros; subst | [ |- context [ rel_dec ?X ?Y ] ] => consider (rel_dec X Y); intros; subst end; intuition; try solve [ constructor; auto | congruence ].
+
inversion H.
intuition.

*****

*****

+++++
+
-----
Global Instance RelDec_Correct_equ_sum : RelDec_Correct RelDec_equ_sum.
Proof.
constructor; destruct x; destruct y; split; simpl in *; intros; repeat match goal with | [ H : context [ rel_dec ?X ?Y ] |- _ ] => consider (rel_dec X Y); intros; subst | [ |- context [ rel_dec ?X ?Y ] ] => consider (rel_dec X Y); intros; subst end; intuition; try solve [ constructor; auto | congruence ].
+
inversion H.
intuition.
+

*****
H : sum_eq (inl t) (inr u)
u : U
t : T
EDCU : RelDec_Correct EDU
EDCT : RelDec_Correct EDT
EDU : RelDec eqU
EDT : RelDec eqT
eqU : forall (_ : U) (_ : U), Prop
U : Type
eqT : forall (_ : T) (_ : T), Prop
T : Type
*****
eq false true
+++++
inversion H.
-----
Global Instance RelDec_Correct_equ_sum : RelDec_Correct RelDec_equ_sum.
Proof.
constructor; destruct x; destruct y; split; simpl in *; intros; repeat match goal with | [ H : context [ rel_dec ?X ?Y ] |- _ ] => consider (rel_dec X Y); intros; subst | [ |- context [ rel_dec ?X ?Y ] ] => consider (rel_dec X Y); intros; subst end; intuition; try solve [ constructor; auto | congruence ].
+
inversion H.
intuition.
+
inversion H.

*****

*****

+++++
+
-----
Global Instance RelDec_Correct_equ_sum : RelDec_Correct RelDec_equ_sum.
Proof.
constructor; destruct x; destruct y; split; simpl in *; intros; repeat match goal with | [ H : context [ rel_dec ?X ?Y ] |- _ ] => consider (rel_dec X Y); intros; subst | [ |- context [ rel_dec ?X ?Y ] ] => consider (rel_dec X Y); intros; subst end; intuition; try solve [ constructor; auto | congruence ].
+
inversion H.
intuition.
+
inversion H.
+

*****
H : sum_eq (inr u) (inl t)
t : T
u : U
EDCU : RelDec_Correct EDU
EDCT : RelDec_Correct EDT
EDU : RelDec eqU
EDT : RelDec eqT
eqU : forall (_ : U) (_ : U), Prop
U : Type
eqT : forall (_ : T) (_ : T), Prop
T : Type
*****
eq false true
+++++
inversion H.
-----
Global Instance RelDec_Correct_equ_sum : RelDec_Correct RelDec_equ_sum.
Proof.
constructor; destruct x; destruct y; split; simpl in *; intros; repeat match goal with | [ H : context [ rel_dec ?X ?Y ] |- _ ] => consider (rel_dec X Y); intros; subst | [ |- context [ rel_dec ?X ?Y ] ] => consider (rel_dec X Y); intros; subst end; intuition; try solve [ constructor; auto | congruence ].
+
inversion H.
intuition.
+
inversion H.
+
inversion H.

*****

*****

+++++
+
-----
Global Instance RelDec_Correct_equ_sum : RelDec_Correct RelDec_equ_sum.
Proof.
constructor; destruct x; destruct y; split; simpl in *; intros; repeat match goal with | [ H : context [ rel_dec ?X ?Y ] |- _ ] => consider (rel_dec X Y); intros; subst | [ |- context [ rel_dec ?X ?Y ] ] => consider (rel_dec X Y); intros; subst end; intuition; try solve [ constructor; auto | congruence ].
+
inversion H.
intuition.
+
inversion H.
+
inversion H.
+

*****
H0 : forall _ : eqU u u0, False
H : sum_eq (inr u) (inr u0)
u,u0 : U
EDCU : RelDec_Correct EDU
EDCT : RelDec_Correct EDT
EDU : RelDec eqU
EDT : RelDec eqT
eqU : forall (_ : U) (_ : U), Prop
U : Type
eqT : forall (_ : T) (_ : T), Prop
T : Type
*****
eq false true
+++++
inversion H; intuition.
-----
Global Instance RelDec_Correct_equ_sum : RelDec_Correct RelDec_equ_sum.
Proof.
constructor; destruct x; destruct y; split; simpl in *; intros; repeat match goal with | [ H : context [ rel_dec ?X ?Y ] |- _ ] => consider (rel_dec X Y); intros; subst | [ |- context [ rel_dec ?X ?Y ] ] => consider (rel_dec X Y); intros; subst end; intuition; try solve [ constructor; auto | congruence ].
+
inversion H.
intuition.
+
inversion H.
+
inversion H.
+
inversion H; intuition.

*****

*****

+++++
Qed.
-----
End PairParam.
-----
Section SumEq.
-----
Variable T : Type.
-----
Variable U : Type.
-----
Variable EDT : RelDec (@eq T).
-----
Variable EDU : RelDec (@eq U).
-----
Global Instance RelDec_eq_pair : RelDec (@eq (T + U)) :=\n  { rel_dec := fun x y =>\n                 match x , y with\n                   | inl x , inl y => rel_dec x y\n                   | inr x , inr y => rel_dec x y\n                   | inl _ , inr _ => false\n                   | inr _ , inl _ => false\n                 end }.
-----
Variable EDCT : RelDec_Correct EDT.
-----
Variable EDCU : RelDec_Correct EDU.
-----
Global Instance RelDec_Correct_eq_pair : RelDec_Correct RelDec_eq_pair.
-----
Global Instance RelDec_Correct_eq_pair : RelDec_Correct RelDec_eq_pair.

*****
EDCU : RelDec_Correct EDU
EDCT : RelDec_Correct EDT
EDU : RelDec eq
EDT : RelDec eq
U : Type
T : Type
*****
RelDec_Correct RelDec_eq_pair
+++++
Proof.
-----
Global Instance RelDec_Correct_eq_pair : RelDec_Correct RelDec_eq_pair.
Proof.

*****
EDCU : RelDec_Correct EDU
EDCT : RelDec_Correct EDT
EDU : RelDec eq
EDT : RelDec eq
U : Type
T : Type
*****
RelDec_Correct RelDec_eq_pair
+++++
constructor; destruct x; destruct y; split; simpl in *; intros; repeat match goal with | [ H : context [ rel_dec ?X ?Y ] |- _ ] => consider (rel_dec X Y); intros; subst | [ |- context [ rel_dec ?X ?Y ] ] => consider (rel_dec X Y); intros; subst end; congruence.
-----
Global Instance RelDec_Correct_eq_pair : RelDec_Correct RelDec_eq_pair.
Proof.
constructor; destruct x; destruct y; split; simpl in *; intros; repeat match goal with | [ H : context [ rel_dec ?X ?Y ] |- _ ] => consider (rel_dec X Y); intros; subst | [ |- context [ rel_dec ?X ?Y ] ] => consider (rel_dec X Y); intros; subst end; congruence.

*****

*****

+++++
Qed.
-----
End SumEq.
-----
Global Instance Injective_inl T U a c : Injective (@inl T U a = inl c).
-----
Global Instance Injective_inl T U a c : Injective (@inl T U a = inl c).

*****
a,c : T
U : Type
T : Type
*****
Injective (eq (inl a) (inl c))
+++++
refine {| result := a = c |}.
-----
Global Instance Injective_inl T U a c : Injective (@inl T U a = inl c).
refine {| result := a = c |}.

*****
a,c : T
U : Type
T : Type
*****
forall _ : eq (inl a) (inl c), eq a c
+++++
Proof.
-----
Global Instance Injective_inl T U a c : Injective (@inl T U a = inl c).
refine {| result := a = c |}.
Proof.

*****
a,c : T
U : Type
T : Type
*****
forall _ : eq (inl a) (inl c), eq a c
+++++
abstract (inversion 1; intuition).
-----
Global Instance Injective_inl T U a c : Injective (@inl T U a = inl c).
refine {| result := a = c |}.
Proof.
abstract (inversion 1; intuition).

*****

*****

+++++
Defined.
-----
Global Instance Injective_inr T U a c : Injective (@inr T U a = inr c).
-----
Global Instance Injective_inr T U a c : Injective (@inr T U a = inr c).

*****
a,c : U
U : Type
T : Type
*****
Injective (eq (inr a) (inr c))
+++++
refine {| result := a = c |}.
-----
Global Instance Injective_inr T U a c : Injective (@inr T U a = inr c).
refine {| result := a = c |}.

*****
a,c : U
U : Type
T : Type
*****
forall _ : eq (inr a) (inr c), eq a c
+++++
Proof.
-----
Global Instance Injective_inr T U a c : Injective (@inr T U a = inr c).
refine {| result := a = c |}.
Proof.

*****
a,c : U
U : Type
T : Type
*****
forall _ : eq (inr a) (inr c), eq a c
+++++
abstract (inversion 1; intuition).
-----
Global Instance Injective_inr T U a c : Injective (@inr T U a = inr c).
refine {| result := a = c |}.
Proof.
abstract (inversion 1; intuition).

*****

*****

+++++
Defined.
-----
Global Instance Injective_inl_False T U a c : Injective (@inl T U a = inr c).
-----
Global Instance Injective_inl_False T U a c : Injective (@inl T U a = inr c).

*****
c : U
a : T
U : Type
T : Type
*****
Injective (eq (inl a) (inr c))
+++++
refine {| result := False |}.
-----
Global Instance Injective_inl_False T U a c : Injective (@inl T U a = inr c).
refine {| result := False |}.

*****
c : U
a : T
U : Type
T : Type
*****
forall _ : eq (inl a) (inr c), False
+++++
Proof.
-----
Global Instance Injective_inl_False T U a c : Injective (@inl T U a = inr c).
refine {| result := False |}.
Proof.

*****
c : U
a : T
U : Type
T : Type
*****
forall _ : eq (inl a) (inr c), False
+++++
abstract (inversion 1; intuition).
-----
Global Instance Injective_inl_False T U a c : Injective (@inl T U a = inr c).
refine {| result := False |}.
Proof.
abstract (inversion 1; intuition).

*****

*****

+++++
Defined.
-----
Global Instance Injective_inr_False T U a c : Injective (@inr T U a = inl c).
-----
Global Instance Injective_inr_False T U a c : Injective (@inr T U a = inl c).

*****
c : T
a : U
U : Type
T : Type
*****
Injective (eq (inr a) (inl c))
+++++
refine {| result := False |}.
-----
Global Instance Injective_inr_False T U a c : Injective (@inr T U a = inl c).
refine {| result := False |}.

*****
c : T
a : U
U : Type
T : Type
*****
forall _ : eq (inr a) (inl c), False
+++++
Proof.
-----
Global Instance Injective_inr_False T U a c : Injective (@inr T U a = inl c).
refine {| result := False |}.
Proof.

*****
c : T
a : U
U : Type
T : Type
*****
forall _ : eq (inr a) (inl c), False
+++++
abstract (inversion 1; intuition).
-----
Global Instance Injective_inr_False T U a c : Injective (@inr T U a = inl c).
refine {| result := False |}.
Proof.
abstract (inversion 1; intuition).

*****

*****

+++++
Defined.
-----
