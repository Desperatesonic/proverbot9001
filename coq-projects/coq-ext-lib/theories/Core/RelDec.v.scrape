Require Import Coq.Bool.Bool.
-----
Require Import Coq.Classes.RelationClasses.
-----
Require Coq.Setoids.Setoid.
-----
Set Implicit Arguments.
-----
Set Strict Implicit.
-----
Class RelDec (T : Type) (equ : T -> T -> Prop) : Type :=\n{ rel_dec : T -> T -> bool }.
-----
Arguments rel_dec {_} {equ} {_} _ _.
-----
Arguments rel_dec _ _ _ !x !y.
-----
Class RelDec_Correct T (equ : T -> T -> Prop) (ED : RelDec equ) : Prop :=\n{ rel_dec_correct : forall x y : T, rel_dec x y = true <-> equ x y }.
-----
Notation "a ?[ r  ]  b" := (@rel_dec _ r _ a b) (at level 30, b at next level).
-----
Definition eq_dec {T : Type} {ED : RelDec (@eq T)} := rel_dec.
-----
Section neg_rel_dec_correct.
-----
Context {T} {R:T -> T -> Prop} {RD:RelDec R} {RDC:RelDec_Correct RD}.
-----
Definition neg_rel_dec_correct : forall {x y}, ~R x y <-> rel_dec x y = false.
-----
Definition neg_rel_dec_correct : forall {x y}, ~R x y <-> rel_dec x y = false.

*****
RDC : RelDec_Correct RD
RD : RelDec R
R : forall (_ : T) (_ : T), Prop
T : Type
*****
forall x y : T, iff (not (R x y)) (eq (rel_dec x y) false)
+++++
Proof.
-----
Definition neg_rel_dec_correct : forall {x y}, ~R x y <-> rel_dec x y = false.
Proof.

*****
RDC : RelDec_Correct RD
RD : RelDec R
R : forall (_ : T) (_ : T), Prop
T : Type
*****
forall x y : T, iff (not (R x y)) (eq (rel_dec x y) false)
+++++
intros x y.
-----
Definition neg_rel_dec_correct : forall {x y}, ~R x y <-> rel_dec x y = false.
Proof.
intros x y.

*****
x,y : T
RDC : RelDec_Correct RD
RD : RelDec R
R : forall (_ : T) (_ : T), Prop
T : Type
*****
iff (not (R x y)) (eq (rel_dec x y) false)
+++++
destruct (bool_dec (rel_dec x y) true) ; constructor ; intros ; repeat match goal with | [ |- ~ _ ] => unfold not ; intros | [ H1 : ?P, H2 : ~?P |- _ ] => specialize (H2 H1) ; contradiction | [ H1 : ?P = true, H2 : ?P = false |- _ ] => rewrite H1 in H2 ; discriminate | [ H1 : ?P <> true |- ?P = false ] => apply not_true_is_false ; exact H1 | [ H1 : ?rel_dec ?a ?b = true, H2 : ~?R ?a ?b |- _ ] => apply rel_dec_correct in H1 | [ H1 : ?rel_dec ?a ?b = false, H2 : ?R ?a ?b |- _ ] => apply rel_dec_correct in H2 end.
-----
Definition neg_rel_dec_correct : forall {x y}, ~R x y <-> rel_dec x y = false.
Proof.
intros x y.
destruct (bool_dec (rel_dec x y) true) ; constructor ; intros ; repeat match goal with | [ |- ~ _ ] => unfold not ; intros | [ H1 : ?P, H2 : ~?P |- _ ] => specialize (H2 H1) ; contradiction | [ H1 : ?P = true, H2 : ?P = false |- _ ] => rewrite H1 in H2 ; discriminate | [ H1 : ?P <> true |- ?P = false ] => apply not_true_is_false ; exact H1 | [ H1 : ?rel_dec ?a ?b = true, H2 : ~?R ?a ?b |- _ ] => apply rel_dec_correct in H1 | [ H1 : ?rel_dec ?a ?b = false, H2 : ?R ?a ?b |- _ ] => apply rel_dec_correct in H2 end.

*****

*****

+++++
Qed.
-----
End neg_rel_dec_correct.
-----
Section rel_dec_p.
-----
Context {T} {R:T -> T -> Prop} {RD:RelDec R} {RDC:RelDec_Correct RD}.
-----
Definition rel_dec_p (x:T) (y:T) : {R x y} + {~R x y}.
-----
Definition rel_dec_p (x:T) (y:T) : {R x y} + {~R x y}.

*****
x,y : T
RDC : RelDec_Correct RD
RD : RelDec R
R : forall (_ : T) (_ : T), Prop
T : Type
*****
sumbool (R x y) (not (R x y))
+++++
Proof.
-----
Definition rel_dec_p (x:T) (y:T) : {R x y} + {~R x y}.
Proof.

*****
x,y : T
RDC : RelDec_Correct RD
RD : RelDec R
R : forall (_ : T) (_ : T), Prop
T : Type
*****
sumbool (R x y) (not (R x y))
+++++
destruct (bool_dec (rel_dec x y) true) as [H | H].
-----
Definition rel_dec_p (x:T) (y:T) : {R x y} + {~R x y}.
Proof.
destruct (bool_dec (rel_dec x y) true) as [H | H].

*****
H : eq (rel_dec x y) true
x,y : T
RDC : RelDec_Correct RD
RD : RelDec R
R : forall (_ : T) (_ : T), Prop
T : Type
*****
sumbool (R x y) (not (R x y))
+++++
apply rel_dec_correct in H.
-----
Definition rel_dec_p (x:T) (y:T) : {R x y} + {~R x y}.
Proof.
destruct (bool_dec (rel_dec x y) true) as [H | H].
apply rel_dec_correct in H.

*****
H : R x y
x,y : T
RDC : RelDec_Correct RD
RD : RelDec R
R : forall (_ : T) (_ : T), Prop
T : Type
*****
sumbool (R x y) (not (R x y))
+++++
eauto.
-----
Definition rel_dec_p (x:T) (y:T) : {R x y} + {~R x y}.
Proof.
destruct (bool_dec (rel_dec x y) true) as [H | H].

*****
H : not (eq (rel_dec x y) true)
x,y : T
RDC : RelDec_Correct RD
RD : RelDec R
R : forall (_ : T) (_ : T), Prop
T : Type
*****
sumbool (R x y) (not (R x y))
+++++
apply not_true_is_false in H.
-----
Definition rel_dec_p (x:T) (y:T) : {R x y} + {~R x y}.
Proof.
destruct (bool_dec (rel_dec x y) true) as [H | H].
apply not_true_is_false in H.

*****
H : eq (rel_dec x y) false
x,y : T
RDC : RelDec_Correct RD
RD : RelDec R
R : forall (_ : T) (_ : T), Prop
T : Type
*****
sumbool (R x y) (not (R x y))
+++++
apply neg_rel_dec_correct in H.
-----
Definition rel_dec_p (x:T) (y:T) : {R x y} + {~R x y}.
Proof.
destruct (bool_dec (rel_dec x y) true) as [H | H].
apply not_true_is_false in H.
apply neg_rel_dec_correct in H.

*****
H : not (R x y)
x,y : T
RDC : RelDec_Correct RD
RD : RelDec R
R : forall (_ : T) (_ : T), Prop
T : Type
*****
sumbool (R x y) (not (R x y))
+++++
eauto.
-----
Definition rel_dec_p (x:T) (y:T) : {R x y} + {~R x y}.
Proof.
destruct (bool_dec (rel_dec x y) true) as [H | H].

*****

*****

+++++
Qed.
-----
Definition neg_rel_dec_p (x:T) (y:T) : {~R x y} + {R x y}.
-----
Definition neg_rel_dec_p (x:T) (y:T) : {~R x y} + {R x y}.

*****
x,y : T
RDC : RelDec_Correct RD
RD : RelDec R
R : forall (_ : T) (_ : T), Prop
T : Type
*****
sumbool (not (R x y)) (R x y)
+++++
Proof.
-----
Definition neg_rel_dec_p (x:T) (y:T) : {~R x y} + {R x y}.
Proof.

*****
x,y : T
RDC : RelDec_Correct RD
RD : RelDec R
R : forall (_ : T) (_ : T), Prop
T : Type
*****
sumbool (not (R x y)) (R x y)
+++++
destruct (rel_dec_p x y).
-----
Definition neg_rel_dec_p (x:T) (y:T) : {~R x y} + {R x y}.
Proof.
destruct (rel_dec_p x y).

*****
r : R x y
x,y : T
RDC : RelDec_Correct RD
RD : RelDec R
R : forall (_ : T) (_ : T), Prop
T : Type
*****
sumbool (not (R x y)) (R x y)
+++++
right.
-----
Definition neg_rel_dec_p (x:T) (y:T) : {~R x y} + {R x y}.
Proof.
destruct (rel_dec_p x y).
right.

*****
r : R x y
x,y : T
RDC : RelDec_Correct RD
RD : RelDec R
R : forall (_ : T) (_ : T), Prop
T : Type
*****
R x y
+++++
auto.
-----
Definition neg_rel_dec_p (x:T) (y:T) : {~R x y} + {R x y}.
Proof.
destruct (rel_dec_p x y).

*****
n : not (R x y)
x,y : T
RDC : RelDec_Correct RD
RD : RelDec R
R : forall (_ : T) (_ : T), Prop
T : Type
*****
sumbool (not (R x y)) (R x y)
+++++
left.
-----
Definition neg_rel_dec_p (x:T) (y:T) : {~R x y} + {R x y}.
Proof.
destruct (rel_dec_p x y).
left.

*****
n : not (R x y)
x,y : T
RDC : RelDec_Correct RD
RD : RelDec R
R : forall (_ : T) (_ : T), Prop
T : Type
*****
not (R x y)
+++++
auto.
-----
Definition neg_rel_dec_p (x:T) (y:T) : {~R x y} + {R x y}.
Proof.
destruct (rel_dec_p x y).

*****

*****

+++++
Qed.
-----
End rel_dec_p.
-----
Section lemmas.
-----
Variable T : Type.
-----
Variable eqt : T -> T -> Prop.
-----
Variable r : RelDec eqt.
-----
Variable rc : RelDec_Correct r.
-----
Theorem rel_dec_eq_true : forall x y,\n    eqt x y -> rel_dec x y = true.
-----
Theorem rel_dec_eq_true : forall x y, eqt x y -> rel_dec x y = true.

*****
rc : RelDec_Correct r
r : RelDec eqt
eqt : forall (_ : T) (_ : T), Prop
T : Type
*****
forall (x y : T) (_ : eqt x y), eq (rel_dec x y) true
+++++
Proof.
-----
Theorem rel_dec_eq_true : forall x y, eqt x y -> rel_dec x y = true.
Proof.

*****
rc : RelDec_Correct r
r : RelDec eqt
eqt : forall (_ : T) (_ : T), Prop
T : Type
*****
forall (x y : T) (_ : eqt x y), eq (rel_dec x y) true
+++++
intros.
-----
Theorem rel_dec_eq_true : forall x y, eqt x y -> rel_dec x y = true.
Proof.
intros.

*****
H : eqt x y
x,y : T
rc : RelDec_Correct r
r : RelDec eqt
eqt : forall (_ : T) (_ : T), Prop
T : Type
*****
eq (rel_dec x y) true
+++++
eapply rel_dec_correct in H.
-----
Theorem rel_dec_eq_true : forall x y, eqt x y -> rel_dec x y = true.
Proof.
intros.
eapply rel_dec_correct in H.

*****
H : eq (rel_dec x y) true
x,y : T
rc : RelDec_Correct r
r : RelDec eqt
eqt : forall (_ : T) (_ : T), Prop
T : Type
*****
eq (rel_dec x y) true
+++++
assumption.
-----
Theorem rel_dec_eq_true : forall x y, eqt x y -> rel_dec x y = true.
Proof.
intros.
eapply rel_dec_correct in H.
assumption.

*****

*****

+++++
Qed.
-----
Theorem rel_dec_neq_false : forall x y,\n    ~eqt x y -> rel_dec x y = false.
-----
Theorem rel_dec_neq_false : forall x y, ~eqt x y -> rel_dec x y = false.

*****
rc : RelDec_Correct r
r : RelDec eqt
eqt : forall (_ : T) (_ : T), Prop
T : Type
*****
forall (x y : T) (_ : not (eqt x y)), eq (rel_dec x y) false
+++++
Proof.
-----
Theorem rel_dec_neq_false : forall x y, ~eqt x y -> rel_dec x y = false.
Proof.

*****
rc : RelDec_Correct r
r : RelDec eqt
eqt : forall (_ : T) (_ : T), Prop
T : Type
*****
forall (x y : T) (_ : not (eqt x y)), eq (rel_dec x y) false
+++++
intros.
-----
Theorem rel_dec_neq_false : forall x y, ~eqt x y -> rel_dec x y = false.
Proof.
intros.

*****
H : not (eqt x y)
x,y : T
rc : RelDec_Correct r
r : RelDec eqt
eqt : forall (_ : T) (_ : T), Prop
T : Type
*****
eq (rel_dec x y) false
+++++
remember (x ?[ eqt ] y).
-----
Theorem rel_dec_neq_false : forall x y, ~eqt x y -> rel_dec x y = false.
Proof.
intros.
remember (x ?[ eqt ] y).

*****
Heqb : eq b (rel_dec x y)
b : bool
H : not (eqt x y)
x,y : T
rc : RelDec_Correct r
r : RelDec eqt
eqt : forall (_ : T) (_ : T), Prop
T : Type
*****
eq b false
+++++
symmetry in Heqb.
-----
Theorem rel_dec_neq_false : forall x y, ~eqt x y -> rel_dec x y = false.
Proof.
intros.
remember (x ?[ eqt ] y).
symmetry in Heqb.

*****
Heqb : eq (rel_dec x y) b
b : bool
H : not (eqt x y)
x,y : T
rc : RelDec_Correct r
r : RelDec eqt
eqt : forall (_ : T) (_ : T), Prop
T : Type
*****
eq b false
+++++
destruct b.
-----
Theorem rel_dec_neq_false : forall x y, ~eqt x y -> rel_dec x y = false.
Proof.
intros.
remember (x ?[ eqt ] y).
symmetry in Heqb.
destruct b.

*****
Heqb : eq (rel_dec x y) true
H : not (eqt x y)
x,y : T
rc : RelDec_Correct r
r : RelDec eqt
eqt : forall (_ : T) (_ : T), Prop
T : Type
*****
eq true false
+++++
try reflexivity.
-----
Theorem rel_dec_neq_false : forall x y, ~eqt x y -> rel_dec x y = false.
Proof.
intros.
remember (x ?[ eqt ] y).
symmetry in Heqb.
destruct b.
try reflexivity.

*****
Heqb : eq (rel_dec x y) true
H : not (eqt x y)
x,y : T
rc : RelDec_Correct r
r : RelDec eqt
eqt : forall (_ : T) (_ : T), Prop
T : Type
*****
eq true false
+++++
exfalso.
-----
Theorem rel_dec_neq_false : forall x y, ~eqt x y -> rel_dec x y = false.
Proof.
intros.
remember (x ?[ eqt ] y).
symmetry in Heqb.
destruct b.
try reflexivity.
exfalso.

*****
Heqb : eq (rel_dec x y) true
H : not (eqt x y)
x,y : T
rc : RelDec_Correct r
r : RelDec eqt
eqt : forall (_ : T) (_ : T), Prop
T : Type
*****
False
+++++
eapply (@rel_dec_correct _ _ _ rc) in Heqb.
-----
Theorem rel_dec_neq_false : forall x y, ~eqt x y -> rel_dec x y = false.
Proof.
intros.
remember (x ?[ eqt ] y).
symmetry in Heqb.
destruct b.
try reflexivity.
exfalso.
eapply (@rel_dec_correct _ _ _ rc) in Heqb.

*****
Heqb : eqt x y
H : not (eqt x y)
x,y : T
rc : RelDec_Correct r
r : RelDec eqt
eqt : forall (_ : T) (_ : T), Prop
T : Type
*****
False
+++++
auto.
-----
Theorem rel_dec_neq_false : forall x y, ~eqt x y -> rel_dec x y = false.
Proof.
intros.
remember (x ?[ eqt ] y).
symmetry in Heqb.
destruct b.

*****
Heqb : eq (rel_dec x y) false
H : not (eqt x y)
x,y : T
rc : RelDec_Correct r
r : RelDec eqt
eqt : forall (_ : T) (_ : T), Prop
T : Type
*****
eq false false
+++++
try reflexivity.
-----
Theorem rel_dec_neq_false : forall x y, ~eqt x y -> rel_dec x y = false.
Proof.
intros.
remember (x ?[ eqt ] y).
symmetry in Heqb.
destruct b.

*****

*****

+++++
Qed.
-----
Theorem rel_dec_sym : Symmetric eqt -> forall x y,\n    x ?[ eqt ] y = y ?[ eqt ] x.
-----
Theorem rel_dec_sym : Symmetric eqt -> forall x y, x ?[ eqt ] y = y ?[ eqt ] x.

*****
rc : RelDec_Correct r
r : RelDec eqt
eqt : forall (_ : T) (_ : T), Prop
T : Type
*****
forall (_ : Symmetric eqt) (x y : T), eq (rel_dec x y) (rel_dec y x)
+++++
Proof.
-----
Theorem rel_dec_sym : Symmetric eqt -> forall x y, x ?[ eqt ] y = y ?[ eqt ] x.
Proof.

*****
rc : RelDec_Correct r
r : RelDec eqt
eqt : forall (_ : T) (_ : T), Prop
T : Type
*****
forall (_ : Symmetric eqt) (x y : T), eq (rel_dec x y) (rel_dec y x)
+++++
intros.
-----
Theorem rel_dec_sym : Symmetric eqt -> forall x y, x ?[ eqt ] y = y ?[ eqt ] x.
Proof.
intros.

*****
x,y : T
H : Symmetric eqt
rc : RelDec_Correct r
r : RelDec eqt
eqt : forall (_ : T) (_ : T), Prop
T : Type
*****
eq (rel_dec x y) (rel_dec y x)
+++++
remember (x ?[ eqt ] y).
-----
Theorem rel_dec_sym : Symmetric eqt -> forall x y, x ?[ eqt ] y = y ?[ eqt ] x.
Proof.
intros.
remember (x ?[ eqt ] y).

*****
Heqb : eq b (rel_dec x y)
b : bool
x,y : T
H : Symmetric eqt
rc : RelDec_Correct r
r : RelDec eqt
eqt : forall (_ : T) (_ : T), Prop
T : Type
*****
eq b (rel_dec y x)
+++++
remember (y ?[ eqt ] x).
-----
Theorem rel_dec_sym : Symmetric eqt -> forall x y, x ?[ eqt ] y = y ?[ eqt ] x.
Proof.
intros.
remember (x ?[ eqt ] y).
remember (y ?[ eqt ] x).

*****
Heqb0 : eq b0 (rel_dec y x)
b0 : bool
Heqb : eq b (rel_dec x y)
b : bool
x,y : T
H : Symmetric eqt
rc : RelDec_Correct r
r : RelDec eqt
eqt : forall (_ : T) (_ : T), Prop
T : Type
*****
eq b b0
+++++
intuition.
-----
Theorem rel_dec_sym : Symmetric eqt -> forall x y, x ?[ eqt ] y = y ?[ eqt ] x.
Proof.
intros.
remember (x ?[ eqt ] y).
remember (y ?[ eqt ] x).
intuition.

*****
Heqb0 : eq b0 (rel_dec y x)
b0 : bool
Heqb : eq b (rel_dec x y)
b : bool
x,y : T
H : Symmetric eqt
rc : RelDec_Correct r
r : RelDec eqt
eqt : forall (_ : T) (_ : T), Prop
T : Type
*****
eq b b0
+++++
destruct b.
-----
Theorem rel_dec_sym : Symmetric eqt -> forall x y, x ?[ eqt ] y = y ?[ eqt ] x.
Proof.
intros.
remember (x ?[ eqt ] y).
remember (y ?[ eqt ] x).
intuition.
destruct b.

*****
Heqb0 : eq b0 (rel_dec y x)
b0 : bool
Heqb : eq true (rel_dec x y)
x,y : T
H : Symmetric eqt
rc : RelDec_Correct r
r : RelDec eqt
eqt : forall (_ : T) (_ : T), Prop
T : Type
*****
eq true b0
+++++
destruct b0.
-----
Theorem rel_dec_sym : Symmetric eqt -> forall x y, x ?[ eqt ] y = y ?[ eqt ] x.
Proof.
intros.
remember (x ?[ eqt ] y).
remember (y ?[ eqt ] x).
intuition.
destruct b.
destruct b0.

*****
Heqb0 : eq true (rel_dec y x)
Heqb : eq true (rel_dec x y)
x,y : T
H : Symmetric eqt
rc : RelDec_Correct r
r : RelDec eqt
eqt : forall (_ : T) (_ : T), Prop
T : Type
*****
eq true true
+++++
auto.
-----
Theorem rel_dec_sym : Symmetric eqt -> forall x y, x ?[ eqt ] y = y ?[ eqt ] x.
Proof.
intros.
remember (x ?[ eqt ] y).
remember (y ?[ eqt ] x).
intuition.
destruct b.
destruct b0.

*****
Heqb0 : eq false (rel_dec y x)
Heqb : eq true (rel_dec x y)
x,y : T
H : Symmetric eqt
rc : RelDec_Correct r
r : RelDec eqt
eqt : forall (_ : T) (_ : T), Prop
T : Type
*****
eq true false
+++++
auto.
-----
Theorem rel_dec_sym : Symmetric eqt -> forall x y, x ?[ eqt ] y = y ?[ eqt ] x.
Proof.
intros.
remember (x ?[ eqt ] y).
remember (y ?[ eqt ] x).
intuition.
destruct b.
destruct b0.
auto.

*****
Heqb0 : eq false (rel_dec y x)
Heqb : eq true (rel_dec x y)
x,y : T
H : Symmetric eqt
rc : RelDec_Correct r
r : RelDec eqt
eqt : forall (_ : T) (_ : T), Prop
T : Type
*****
eq true false
+++++
symmetry in Heqb.
-----
Theorem rel_dec_sym : Symmetric eqt -> forall x y, x ?[ eqt ] y = y ?[ eqt ] x.
Proof.
intros.
remember (x ?[ eqt ] y).
remember (y ?[ eqt ] x).
intuition.
destruct b.
destruct b0.
auto.
symmetry in Heqb.

*****
Heqb0 : eq false (rel_dec y x)
Heqb : eq (rel_dec x y) true
x,y : T
H : Symmetric eqt
rc : RelDec_Correct r
r : RelDec eqt
eqt : forall (_ : T) (_ : T), Prop
T : Type
*****
eq true false
+++++
symmetry in Heqb0.
-----
Theorem rel_dec_sym : Symmetric eqt -> forall x y, x ?[ eqt ] y = y ?[ eqt ] x.
Proof.
intros.
remember (x ?[ eqt ] y).
remember (y ?[ eqt ] x).
intuition.
destruct b.
destruct b0.
auto.
symmetry in Heqb.
symmetry in Heqb0.

*****
Heqb0 : eq (rel_dec y x) false
Heqb : eq (rel_dec x y) true
x,y : T
H : Symmetric eqt
rc : RelDec_Correct r
r : RelDec eqt
eqt : forall (_ : T) (_ : T), Prop
T : Type
*****
eq true false
+++++
eapply (@rel_dec_correct _ _ _ rc) in Heqb.
-----
Theorem rel_dec_sym : Symmetric eqt -> forall x y, x ?[ eqt ] y = y ?[ eqt ] x.
Proof.
intros.
remember (x ?[ eqt ] y).
remember (y ?[ eqt ] x).
intuition.
destruct b.
destruct b0.
auto.
symmetry in Heqb.
symmetry in Heqb0.
eapply (@rel_dec_correct _ _ _ rc) in Heqb.

*****
Heqb0 : eq (rel_dec y x) false
Heqb : eqt x y
x,y : T
H : Symmetric eqt
rc : RelDec_Correct r
r : RelDec eqt
eqt : forall (_ : T) (_ : T), Prop
T : Type
*****
eq true false
+++++
symmetry in Heqb.
-----
Theorem rel_dec_sym : Symmetric eqt -> forall x y, x ?[ eqt ] y = y ?[ eqt ] x.
Proof.
intros.
remember (x ?[ eqt ] y).
remember (y ?[ eqt ] x).
intuition.
destruct b.
destruct b0.
auto.
symmetry in Heqb.
symmetry in Heqb0.
eapply (@rel_dec_correct _ _ _ rc) in Heqb.
symmetry in Heqb.

*****
Heqb0 : eq (rel_dec y x) false
Heqb : eqt y x
x,y : T
H : Symmetric eqt
rc : RelDec_Correct r
r : RelDec eqt
eqt : forall (_ : T) (_ : T), Prop
T : Type
*****
eq true false
+++++
eapply (@rel_dec_correct _ _ _ rc) in Heqb.
-----
Theorem rel_dec_sym : Symmetric eqt -> forall x y, x ?[ eqt ] y = y ?[ eqt ] x.
Proof.
intros.
remember (x ?[ eqt ] y).
remember (y ?[ eqt ] x).
intuition.
destruct b.
destruct b0.
auto.
symmetry in Heqb.
symmetry in Heqb0.
eapply (@rel_dec_correct _ _ _ rc) in Heqb.
symmetry in Heqb.
eapply (@rel_dec_correct _ _ _ rc) in Heqb.

*****
Heqb0 : eq (rel_dec y x) false
Heqb : eq (rel_dec y x) true
x,y : T
H : Symmetric eqt
rc : RelDec_Correct r
r : RelDec eqt
eqt : forall (_ : T) (_ : T), Prop
T : Type
*****
eq true false
+++++
congruence.
-----
Theorem rel_dec_sym : Symmetric eqt -> forall x y, x ?[ eqt ] y = y ?[ eqt ] x.
Proof.
intros.
remember (x ?[ eqt ] y).
remember (y ?[ eqt ] x).
intuition.
destruct b.

*****
Heqb0 : eq b0 (rel_dec y x)
b0 : bool
Heqb : eq false (rel_dec x y)
x,y : T
H : Symmetric eqt
rc : RelDec_Correct r
r : RelDec eqt
eqt : forall (_ : T) (_ : T), Prop
T : Type
*****
eq false b0
+++++
destruct b0.
-----
Theorem rel_dec_sym : Symmetric eqt -> forall x y, x ?[ eqt ] y = y ?[ eqt ] x.
Proof.
intros.
remember (x ?[ eqt ] y).
remember (y ?[ eqt ] x).
intuition.
destruct b.
destruct b0.

*****
Heqb0 : eq true (rel_dec y x)
Heqb : eq false (rel_dec x y)
x,y : T
H : Symmetric eqt
rc : RelDec_Correct r
r : RelDec eqt
eqt : forall (_ : T) (_ : T), Prop
T : Type
*****
eq false true
+++++
auto.
-----
Theorem rel_dec_sym : Symmetric eqt -> forall x y, x ?[ eqt ] y = y ?[ eqt ] x.
Proof.
intros.
remember (x ?[ eqt ] y).
remember (y ?[ eqt ] x).
intuition.
destruct b.
destruct b0.
auto.

*****
Heqb0 : eq true (rel_dec y x)
Heqb : eq false (rel_dec x y)
x,y : T
H : Symmetric eqt
rc : RelDec_Correct r
r : RelDec eqt
eqt : forall (_ : T) (_ : T), Prop
T : Type
*****
eq false true
+++++
symmetry in Heqb.
-----
Theorem rel_dec_sym : Symmetric eqt -> forall x y, x ?[ eqt ] y = y ?[ eqt ] x.
Proof.
intros.
remember (x ?[ eqt ] y).
remember (y ?[ eqt ] x).
intuition.
destruct b.
destruct b0.
auto.
symmetry in Heqb.

*****
Heqb0 : eq true (rel_dec y x)
Heqb : eq (rel_dec x y) false
x,y : T
H : Symmetric eqt
rc : RelDec_Correct r
r : RelDec eqt
eqt : forall (_ : T) (_ : T), Prop
T : Type
*****
eq false true
+++++
symmetry in Heqb0.
-----
Theorem rel_dec_sym : Symmetric eqt -> forall x y, x ?[ eqt ] y = y ?[ eqt ] x.
Proof.
intros.
remember (x ?[ eqt ] y).
remember (y ?[ eqt ] x).
intuition.
destruct b.
destruct b0.
auto.
symmetry in Heqb.
symmetry in Heqb0.

*****
Heqb0 : eq (rel_dec y x) true
Heqb : eq (rel_dec x y) false
x,y : T
H : Symmetric eqt
rc : RelDec_Correct r
r : RelDec eqt
eqt : forall (_ : T) (_ : T), Prop
T : Type
*****
eq false true
+++++
eapply (@rel_dec_correct _ _ _ rc) in Heqb0.
-----
Theorem rel_dec_sym : Symmetric eqt -> forall x y, x ?[ eqt ] y = y ?[ eqt ] x.
Proof.
intros.
remember (x ?[ eqt ] y).
remember (y ?[ eqt ] x).
intuition.
destruct b.
destruct b0.
auto.
symmetry in Heqb.
symmetry in Heqb0.
eapply (@rel_dec_correct _ _ _ rc) in Heqb0.

*****
Heqb0 : eqt y x
Heqb : eq (rel_dec x y) false
x,y : T
H : Symmetric eqt
rc : RelDec_Correct r
r : RelDec eqt
eqt : forall (_ : T) (_ : T), Prop
T : Type
*****
eq false true
+++++
symmetry in Heqb0.
-----
Theorem rel_dec_sym : Symmetric eqt -> forall x y, x ?[ eqt ] y = y ?[ eqt ] x.
Proof.
intros.
remember (x ?[ eqt ] y).
remember (y ?[ eqt ] x).
intuition.
destruct b.
destruct b0.
auto.
symmetry in Heqb.
symmetry in Heqb0.
eapply (@rel_dec_correct _ _ _ rc) in Heqb0.
symmetry in Heqb0.

*****
Heqb0 : eqt x y
Heqb : eq (rel_dec x y) false
x,y : T
H : Symmetric eqt
rc : RelDec_Correct r
r : RelDec eqt
eqt : forall (_ : T) (_ : T), Prop
T : Type
*****
eq false true
+++++
eapply (@rel_dec_correct _ _ _ rc) in Heqb0.
-----
Theorem rel_dec_sym : Symmetric eqt -> forall x y, x ?[ eqt ] y = y ?[ eqt ] x.
Proof.
intros.
remember (x ?[ eqt ] y).
remember (y ?[ eqt ] x).
intuition.
destruct b.
destruct b0.
auto.
symmetry in Heqb.
symmetry in Heqb0.
eapply (@rel_dec_correct _ _ _ rc) in Heqb0.
symmetry in Heqb0.
eapply (@rel_dec_correct _ _ _ rc) in Heqb0.

*****
Heqb0 : eq (rel_dec x y) true
Heqb : eq (rel_dec x y) false
x,y : T
H : Symmetric eqt
rc : RelDec_Correct r
r : RelDec eqt
eqt : forall (_ : T) (_ : T), Prop
T : Type
*****
eq false true
+++++
congruence.
-----
Theorem rel_dec_sym : Symmetric eqt -> forall x y, x ?[ eqt ] y = y ?[ eqt ] x.
Proof.
intros.
remember (x ?[ eqt ] y).
remember (y ?[ eqt ] x).
intuition.
destruct b.
destruct b0.

*****
Heqb0 : eq false (rel_dec y x)
Heqb : eq false (rel_dec x y)
x,y : T
H : Symmetric eqt
rc : RelDec_Correct r
r : RelDec eqt
eqt : forall (_ : T) (_ : T), Prop
T : Type
*****
eq false false
+++++
auto.
-----
Theorem rel_dec_sym : Symmetric eqt -> forall x y, x ?[ eqt ] y = y ?[ eqt ] x.
Proof.
intros.
remember (x ?[ eqt ] y).
remember (y ?[ eqt ] x).
intuition.
destruct b.

*****

*****

+++++
Qed.
-----
End lemmas.
-----
Section RelDec_from_dec.
-----
Context {T} (R : T -> T -> Prop).
-----
Variable (f : forall a b : T, {R a b} + {~R a b}).
-----
Definition RelDec_from_dec\n  : RelDec R :=\n  {| rel_dec := fun a b =>\n                  match f a b with\n                  | left _ => true\n                  | right _ => false\n                  end |}.
-----
Global Instance RelDec_Correct_eq_typ : RelDec_Correct RelDec_from_dec.
-----
Global Instance RelDec_Correct_eq_typ : RelDec_Correct RelDec_from_dec.

*****
f : forall a b : T, sumbool (R a b) (not (R a b))
R : forall (_ : T) (_ : T), Prop
T : Type
*****
RelDec_Correct RelDec_from_dec
+++++
Proof.
-----
Global Instance RelDec_Correct_eq_typ : RelDec_Correct RelDec_from_dec.
Proof.

*****
f : forall a b : T, sumbool (R a b) (not (R a b))
R : forall (_ : T) (_ : T), Prop
T : Type
*****
RelDec_Correct RelDec_from_dec
+++++
constructor.
-----
Global Instance RelDec_Correct_eq_typ : RelDec_Correct RelDec_from_dec.
Proof.
constructor.

*****
f : forall a b : T, sumbool (R a b) (not (R a b))
R : forall (_ : T) (_ : T), Prop
T : Type
*****
forall x y : T, iff (eq (rel_dec x y) true) (R x y)
+++++
intros.
-----
Global Instance RelDec_Correct_eq_typ : RelDec_Correct RelDec_from_dec.
Proof.
constructor.
intros.

*****
x,y : T
f : forall a b : T, sumbool (R a b) (not (R a b))
R : forall (_ : T) (_ : T), Prop
T : Type
*****
iff (eq (rel_dec x y) true) (R x y)
+++++
unfold rel_dec.
-----
Global Instance RelDec_Correct_eq_typ : RelDec_Correct RelDec_from_dec.
Proof.
constructor.
intros.
unfold rel_dec.

*****
x,y : T
f : forall a b : T, sumbool (R a b) (not (R a b))
R : forall (_ : T) (_ : T), Prop
T : Type
*****
iff (eq ((let (rel_dec) := RelDec_from_dec in rel_dec) x y) true) (R x y)
+++++
simpl.
-----
Global Instance RelDec_Correct_eq_typ : RelDec_Correct RelDec_from_dec.
Proof.
constructor.
intros.
unfold rel_dec.
simpl.

*****
x,y : T
f : forall a b : T, sumbool (R a b) (not (R a b))
R : forall (_ : T) (_ : T), Prop
T : Type
*****
iff (eq (if f x y then true else false) true) (R x y)
+++++
destruct (f x y).
-----
Global Instance RelDec_Correct_eq_typ : RelDec_Correct RelDec_from_dec.
Proof.
constructor.
intros.
unfold rel_dec.
simpl.
destruct (f x y).

*****
r : R x y
x,y : T
f : forall a b : T, sumbool (R a b) (not (R a b))
R : forall (_ : T) (_ : T), Prop
T : Type
*****
iff (eq true true) (R x y)
+++++
tauto.
-----
Global Instance RelDec_Correct_eq_typ : RelDec_Correct RelDec_from_dec.
Proof.
constructor.
intros.
unfold rel_dec.
simpl.
destruct (f x y).

*****
n : not (R x y)
x,y : T
f : forall a b : T, sumbool (R a b) (not (R a b))
R : forall (_ : T) (_ : T), Prop
T : Type
*****
iff (eq false true) (R x y)
+++++
split.
-----
Global Instance RelDec_Correct_eq_typ : RelDec_Correct RelDec_from_dec.
Proof.
constructor.
intros.
unfold rel_dec.
simpl.
destruct (f x y).
split.

*****
n : not (R x y)
x,y : T
f : forall a b : T, sumbool (R a b) (not (R a b))
R : forall (_ : T) (_ : T), Prop
T : Type
*****
forall _ : eq false true, R x y
+++++
inversion 1.
-----
Global Instance RelDec_Correct_eq_typ : RelDec_Correct RelDec_from_dec.
Proof.
constructor.
intros.
unfold rel_dec.
simpl.
destruct (f x y).
split.

*****
n : not (R x y)
x,y : T
f : forall a b : T, sumbool (R a b) (not (R a b))
R : forall (_ : T) (_ : T), Prop
T : Type
*****
forall _ : R x y, eq false true
+++++
intro.
-----
Global Instance RelDec_Correct_eq_typ : RelDec_Correct RelDec_from_dec.
Proof.
constructor.
intros.
unfold rel_dec.
simpl.
destruct (f x y).
split.
intro.

*****
H : R x y
n : not (R x y)
x,y : T
f : forall a b : T, sumbool (R a b) (not (R a b))
R : forall (_ : T) (_ : T), Prop
T : Type
*****
eq false true
+++++
apply n in H.
-----
Global Instance RelDec_Correct_eq_typ : RelDec_Correct RelDec_from_dec.
Proof.
constructor.
intros.
unfold rel_dec.
simpl.
destruct (f x y).
split.
intro.
apply n in H.

*****
H : False
n : not (R x y)
x,y : T
f : forall a b : T, sumbool (R a b) (not (R a b))
R : forall (_ : T) (_ : T), Prop
T : Type
*****
eq false true
+++++
tauto.
-----
Global Instance RelDec_Correct_eq_typ : RelDec_Correct RelDec_from_dec.
Proof.
constructor.
intros.
unfold rel_dec.
simpl.
destruct (f x y).

*****

*****

+++++
Qed.
-----
End RelDec_from_dec.
-----
