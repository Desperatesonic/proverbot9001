Require Import GeoCoq.Axioms.parallel_postulates.
-----
Require Import GeoCoq.Tarski_dev.Ch12_parallel.
-----
Section SPP_ID.
-----
Context `{TnEQD:Tarski_neutral_dimensionless_with_decidable_point_equality}.
-----
Lemma strong_parallel_postulate_implies_inter_dec :\n  strong_parallel_postulate ->\n  decidability_of_intersection.
-----
Lemma strong_parallel_postulate_implies_inter_dec : strong_parallel_postulate -> decidability_of_intersection.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : strong_parallel_postulate, decidability_of_intersection
+++++
Proof.
-----
Lemma strong_parallel_postulate_implies_inter_dec : strong_parallel_postulate -> decidability_of_intersection.
Proof.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : strong_parallel_postulate, decidability_of_intersection
+++++
intros HSPP S Q P U.
-----
Lemma strong_parallel_postulate_implies_inter_dec : strong_parallel_postulate -> decidability_of_intersection.
Proof.
intros HSPP S Q P U.

*****
S,Q,P,U : Tpoint
HSPP : strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (ex (fun I : Tpoint => and (Col I S Q) (Col I P U))) (not (ex (fun I : Tpoint => and (Col I S Q) (Col I P U))))
+++++
elim (col_dec P Q S); intro HPQS; [left; exists P; Col|].
-----
Lemma strong_parallel_postulate_implies_inter_dec : strong_parallel_postulate -> decidability_of_intersection.
Proof.
intros HSPP S Q P U.
elim (col_dec P Q S); intro HPQS; [left; exists P; Col|].

*****
HPQS : not (Col P Q S)
S,Q,P,U : Tpoint
HSPP : strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (ex (fun I : Tpoint => and (Col I S Q) (Col I P U))) (not (ex (fun I : Tpoint => and (Col I S Q) (Col I P U))))
+++++
elim (eq_dec_points P U); intro HPU; treat_equalities; [left; exists Q; Col|].
-----
Lemma strong_parallel_postulate_implies_inter_dec : strong_parallel_postulate -> decidability_of_intersection.
Proof.
intros HSPP S Q P U.
elim (col_dec P Q S); intro HPQS; [left; exists P; Col|].
elim (eq_dec_points P U); intro HPU; treat_equalities; [left; exists Q; Col|].

*****
HPU : not (eq P U)
HPQS : not (Col P Q S)
S,Q,P,U : Tpoint
HSPP : strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (ex (fun I : Tpoint => and (Col I S Q) (Col I P U))) (not (ex (fun I : Tpoint => and (Col I S Q) (Col I P U))))
+++++
assert (H := midpoint_existence P Q); destruct H as [T [HPTQ HCong1]].
-----
Lemma strong_parallel_postulate_implies_inter_dec : strong_parallel_postulate -> decidability_of_intersection.
Proof.
intros HSPP S Q P U.
elim (col_dec P Q S); intro HPQS; [left; exists P; Col|].
elim (eq_dec_points P U); intro HPU; treat_equalities; [left; exists Q; Col|].
assert (H := midpoint_existence P Q); destruct H as [T [HPTQ HCong1]].

*****
HCong1 : Cong P T T Q
HPTQ : Bet P T Q
T : Tpoint
HPU : not (eq P U)
HPQS : not (Col P Q S)
S,Q,P,U : Tpoint
HSPP : strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (ex (fun I : Tpoint => and (Col I S Q) (Col I P U))) (not (ex (fun I : Tpoint => and (Col I S Q) (Col I P U))))
+++++
assert (H := symmetric_point_construction S T); destruct H as [R [HRTS HCong2]].
-----
Lemma strong_parallel_postulate_implies_inter_dec : strong_parallel_postulate -> decidability_of_intersection.
Proof.
intros HSPP S Q P U.
elim (col_dec P Q S); intro HPQS; [left; exists P; Col|].
elim (eq_dec_points P U); intro HPU; treat_equalities; [left; exists Q; Col|].
assert (H := midpoint_existence P Q); destruct H as [T [HPTQ HCong1]].
assert (H := symmetric_point_construction S T); destruct H as [R [HRTS HCong2]].

*****
HCong2 : Cong S T T R
HRTS : Bet S T R
R : Tpoint
HCong1 : Cong P T T Q
HPTQ : Bet P T Q
T : Tpoint
HPU : not (eq P U)
HPQS : not (Col P Q S)
S,Q,P,U : Tpoint
HSPP : strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (ex (fun I : Tpoint => and (Col I S Q) (Col I P U))) (not (ex (fun I : Tpoint => and (Col I S Q) (Col I P U))))
+++++
elim (col_dec P R U); intro HPRU.
-----
Lemma strong_parallel_postulate_implies_inter_dec : strong_parallel_postulate -> decidability_of_intersection.
Proof.
intros HSPP S Q P U.
elim (col_dec P Q S); intro HPQS; [left; exists P; Col|].
elim (eq_dec_points P U); intro HPU; treat_equalities; [left; exists Q; Col|].
assert (H := midpoint_existence P Q); destruct H as [T [HPTQ HCong1]].
assert (H := symmetric_point_construction S T); destruct H as [R [HRTS HCong2]].
elim (col_dec P R U); intro HPRU.

*****
HPRU : Col P R U
HCong2 : Cong S T T R
HRTS : Bet S T R
R : Tpoint
HCong1 : Cong P T T Q
HPTQ : Bet P T Q
T : Tpoint
HPU : not (eq P U)
HPQS : not (Col P Q S)
S,Q,P,U : Tpoint
HSPP : strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (ex (fun I : Tpoint => and (Col I S Q) (Col I P U))) (not (ex (fun I : Tpoint => and (Col I S Q) (Col I P U))))
+++++
assert (HPar : Par_strict Q S P U).
-----
Lemma strong_parallel_postulate_implies_inter_dec : strong_parallel_postulate -> decidability_of_intersection.
Proof.
intros HSPP S Q P U.
elim (col_dec P Q S); intro HPQS; [left; exists P; Col|].
elim (eq_dec_points P U); intro HPU; treat_equalities; [left; exists Q; Col|].
assert (H := midpoint_existence P Q); destruct H as [T [HPTQ HCong1]].
assert (H := symmetric_point_construction S T); destruct H as [R [HRTS HCong2]].
elim (col_dec P R U); intro HPRU.
assert (HPar : Par_strict Q S P U).

*****
HPRU : Col P R U
HCong2 : Cong S T T R
HRTS : Bet S T R
R : Tpoint
HCong1 : Cong P T T Q
HPTQ : Bet P T Q
T : Tpoint
HPU : not (eq P U)
HPQS : not (Col P Q S)
S,Q,P,U : Tpoint
HSPP : strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par_strict Q S P U
+++++
apply par_strict_col_par_strict with R; Col.
-----
Lemma strong_parallel_postulate_implies_inter_dec : strong_parallel_postulate -> decidability_of_intersection.
Proof.
intros HSPP S Q P U.
elim (col_dec P Q S); intro HPQS; [left; exists P; Col|].
elim (eq_dec_points P U); intro HPU; treat_equalities; [left; exists Q; Col|].
assert (H := midpoint_existence P Q); destruct H as [T [HPTQ HCong1]].
assert (H := symmetric_point_construction S T); destruct H as [R [HRTS HCong2]].
elim (col_dec P R U); intro HPRU.
assert (HPar : Par_strict Q S P U).
apply par_strict_col_par_strict with R; Col.

*****
HPRU : Col P R U
HCong2 : Cong S T T R
HRTS : Bet S T R
R : Tpoint
HCong1 : Cong P T T Q
HPTQ : Bet P T Q
T : Tpoint
HPU : not (eq P U)
HPQS : not (Col P Q S)
S,Q,P,U : Tpoint
HSPP : strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par_strict Q S P R
+++++
apply par_not_col_strict with P; Col.
-----
Lemma strong_parallel_postulate_implies_inter_dec : strong_parallel_postulate -> decidability_of_intersection.
Proof.
intros HSPP S Q P U.
elim (col_dec P Q S); intro HPQS; [left; exists P; Col|].
elim (eq_dec_points P U); intro HPU; treat_equalities; [left; exists Q; Col|].
assert (H := midpoint_existence P Q); destruct H as [T [HPTQ HCong1]].
assert (H := symmetric_point_construction S T); destruct H as [R [HRTS HCong2]].
elim (col_dec P R U); intro HPRU.
assert (HPar : Par_strict Q S P U).
apply par_strict_col_par_strict with R; Col.
apply par_not_col_strict with P; Col.

*****
HPRU : Col P R U
HCong2 : Cong S T T R
HRTS : Bet S T R
R : Tpoint
HCong1 : Cong P T T Q
HPTQ : Bet P T Q
T : Tpoint
HPU : not (eq P U)
HPQS : not (Col P Q S)
S,Q,P,U : Tpoint
HSPP : strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par Q S P R
+++++
apply l12_17 with T; assert_diffs; Col; split; Between; Cong.
-----
Lemma strong_parallel_postulate_implies_inter_dec : strong_parallel_postulate -> decidability_of_intersection.
Proof.
intros HSPP S Q P U.
elim (col_dec P Q S); intro HPQS; [left; exists P; Col|].
elim (eq_dec_points P U); intro HPU; treat_equalities; [left; exists Q; Col|].
assert (H := midpoint_existence P Q); destruct H as [T [HPTQ HCong1]].
assert (H := symmetric_point_construction S T); destruct H as [R [HRTS HCong2]].
elim (col_dec P R U); intro HPRU.
assert (HPar : Par_strict Q S P U).

*****
HPar : Par_strict Q S P U
HPRU : Col P R U
HCong2 : Cong S T T R
HRTS : Bet S T R
R : Tpoint
HCong1 : Cong P T T Q
HPTQ : Bet P T Q
T : Tpoint
HPU : not (eq P U)
HPQS : not (Col P Q S)
S,Q,P,U : Tpoint
HSPP : strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (ex (fun I : Tpoint => and (Col I S Q) (Col I P U))) (not (ex (fun I : Tpoint => and (Col I S Q) (Col I P U))))
+++++
destruct HPar as [H1 [H2 [H3 H]]].
-----
Lemma strong_parallel_postulate_implies_inter_dec : strong_parallel_postulate -> decidability_of_intersection.
Proof.
intros HSPP S Q P U.
elim (col_dec P Q S); intro HPQS; [left; exists P; Col|].
elim (eq_dec_points P U); intro HPU; treat_equalities; [left; exists Q; Col|].
assert (H := midpoint_existence P Q); destruct H as [T [HPTQ HCong1]].
assert (H := symmetric_point_construction S T); destruct H as [R [HRTS HCong2]].
elim (col_dec P R U); intro HPRU.
assert (HPar : Par_strict Q S P U).
destruct HPar as [H1 [H2 [H3 H]]].

*****
H : not (ex (fun X : Tpoint => and (Col X Q S) (Col X P U)))
H3 : Coplanar Q S P U
H2 : not (eq P U)
H1 : not (eq Q S)
HPRU : Col P R U
HCong2 : Cong S T T R
HRTS : Bet S T R
R : Tpoint
HCong1 : Cong P T T Q
HPTQ : Bet P T Q
T : Tpoint
HPU : not (eq P U)
HPQS : not (Col P Q S)
S,Q,P,U : Tpoint
HSPP : strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (ex (fun I : Tpoint => and (Col I S Q) (Col I P U))) (not (ex (fun I : Tpoint => and (Col I S Q) (Col I P U))))
+++++
right; intro HI; apply H.
-----
Lemma strong_parallel_postulate_implies_inter_dec : strong_parallel_postulate -> decidability_of_intersection.
Proof.
intros HSPP S Q P U.
elim (col_dec P Q S); intro HPQS; [left; exists P; Col|].
elim (eq_dec_points P U); intro HPU; treat_equalities; [left; exists Q; Col|].
assert (H := midpoint_existence P Q); destruct H as [T [HPTQ HCong1]].
assert (H := symmetric_point_construction S T); destruct H as [R [HRTS HCong2]].
elim (col_dec P R U); intro HPRU.
assert (HPar : Par_strict Q S P U).
destruct HPar as [H1 [H2 [H3 H]]].
right; intro HI; apply H.

*****
HI : ex (fun I : Tpoint => and (Col I S Q) (Col I P U))
H : not (ex (fun X : Tpoint => and (Col X Q S) (Col X P U)))
H3 : Coplanar Q S P U
H2 : not (eq P U)
H1 : not (eq Q S)
HPRU : Col P R U
HCong2 : Cong S T T R
HRTS : Bet S T R
R : Tpoint
HCong1 : Cong P T T Q
HPTQ : Bet P T Q
T : Tpoint
HPU : not (eq P U)
HPQS : not (Col P Q S)
S,Q,P,U : Tpoint
HSPP : strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => and (Col X Q S) (Col X P U))
+++++
destruct HI as [I [HCol1 HCol2]]; exists I; Col.
-----
Lemma strong_parallel_postulate_implies_inter_dec : strong_parallel_postulate -> decidability_of_intersection.
Proof.
intros HSPP S Q P U.
elim (col_dec P Q S); intro HPQS; [left; exists P; Col|].
elim (eq_dec_points P U); intro HPU; treat_equalities; [left; exists Q; Col|].
assert (H := midpoint_existence P Q); destruct H as [T [HPTQ HCong1]].
assert (H := symmetric_point_construction S T); destruct H as [R [HRTS HCong2]].
elim (col_dec P R U); intro HPRU.

*****
HPRU : not (Col P R U)
HCong2 : Cong S T T R
HRTS : Bet S T R
R : Tpoint
HCong1 : Cong P T T Q
HPTQ : Bet P T Q
T : Tpoint
HPU : not (eq P U)
HPQS : not (Col P Q S)
S,Q,P,U : Tpoint
HSPP : strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (ex (fun I : Tpoint => and (Col I S Q) (Col I P U))) (not (ex (fun I : Tpoint => and (Col I S Q) (Col I P U))))
+++++
elim (cop_dec P Q S U); intro HCop.
-----
Lemma strong_parallel_postulate_implies_inter_dec : strong_parallel_postulate -> decidability_of_intersection.
Proof.
intros HSPP S Q P U.
elim (col_dec P Q S); intro HPQS; [left; exists P; Col|].
elim (eq_dec_points P U); intro HPU; treat_equalities; [left; exists Q; Col|].
assert (H := midpoint_existence P Q); destruct H as [T [HPTQ HCong1]].
assert (H := symmetric_point_construction S T); destruct H as [R [HRTS HCong2]].
elim (col_dec P R U); intro HPRU.
elim (cop_dec P Q S U); intro HCop.

*****
HCop : Coplanar P Q S U
HPRU : not (Col P R U)
HCong2 : Cong S T T R
HRTS : Bet S T R
R : Tpoint
HCong1 : Cong P T T Q
HPTQ : Bet P T Q
T : Tpoint
HPU : not (eq P U)
HPQS : not (Col P Q S)
S,Q,P,U : Tpoint
HSPP : strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (ex (fun I : Tpoint => and (Col I S Q) (Col I P U))) (not (ex (fun I : Tpoint => and (Col I S Q) (Col I P U))))
+++++
assert (H : BetS R T S); try (clear HRTS; rename H into HRTS).
-----
Lemma strong_parallel_postulate_implies_inter_dec : strong_parallel_postulate -> decidability_of_intersection.
Proof.
intros HSPP S Q P U.
elim (col_dec P Q S); intro HPQS; [left; exists P; Col|].
elim (eq_dec_points P U); intro HPU; treat_equalities; [left; exists Q; Col|].
assert (H := midpoint_existence P Q); destruct H as [T [HPTQ HCong1]].
assert (H := symmetric_point_construction S T); destruct H as [R [HRTS HCong2]].
elim (col_dec P R U); intro HPRU.
elim (cop_dec P Q S U); intro HCop.
assert (H : BetS R T S); try (clear HRTS; rename H into HRTS).

*****
HCop : Coplanar P Q S U
HPRU : not (Col P R U)
HCong2 : Cong S T T R
HRTS : Bet S T R
R : Tpoint
HCong1 : Cong P T T Q
HPTQ : Bet P T Q
T : Tpoint
HPU : not (eq P U)
HPQS : not (Col P Q S)
S,Q,P,U : Tpoint
HSPP : strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
BetS R T S
+++++
split; Between.
-----
Lemma strong_parallel_postulate_implies_inter_dec : strong_parallel_postulate -> decidability_of_intersection.
Proof.
intros HSPP S Q P U.
elim (col_dec P Q S); intro HPQS; [left; exists P; Col|].
elim (eq_dec_points P U); intro HPU; treat_equalities; [left; exists Q; Col|].
assert (H := midpoint_existence P Q); destruct H as [T [HPTQ HCong1]].
assert (H := symmetric_point_construction S T); destruct H as [R [HRTS HCong2]].
elim (col_dec P R U); intro HPRU.
elim (cop_dec P Q S U); intro HCop.
assert (H : BetS R T S); try (clear HRTS; rename H into HRTS).
split; Between.

*****
HCop : Coplanar P Q S U
HPRU : not (Col P R U)
HCong2 : Cong S T T R
HRTS : Bet S T R
R : Tpoint
HCong1 : Cong P T T Q
HPTQ : Bet P T Q
T : Tpoint
HPU : not (eq P U)
HPQS : not (Col P Q S)
S,Q,P,U : Tpoint
HSPP : strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (not (eq R T)) (not (eq T S))
+++++
split; try (intro; treat_equalities; assert_cols; Col).
-----
Lemma strong_parallel_postulate_implies_inter_dec : strong_parallel_postulate -> decidability_of_intersection.
Proof.
intros HSPP S Q P U.
elim (col_dec P Q S); intro HPQS; [left; exists P; Col|].
elim (eq_dec_points P U); intro HPU; treat_equalities; [left; exists Q; Col|].
assert (H := midpoint_existence P Q); destruct H as [T [HPTQ HCong1]].
assert (H := symmetric_point_construction S T); destruct H as [R [HRTS HCong2]].
elim (col_dec P R U); intro HPRU.
elim (cop_dec P Q S U); intro HCop.
assert (H : BetS R T S); try (clear HRTS; rename H into HRTS).

*****
HRTS : BetS R T S
HCop : Coplanar P Q S U
HPRU : not (Col P R U)
HCong2 : Cong S T T R
R : Tpoint
HCong1 : Cong P T T Q
HPTQ : Bet P T Q
T : Tpoint
HPU : not (eq P U)
HPQS : not (Col P Q S)
S,Q,P,U : Tpoint
HSPP : strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (ex (fun I : Tpoint => and (Col I S Q) (Col I P U))) (not (ex (fun I : Tpoint => and (Col I S Q) (Col I P U))))
+++++
assert (H : BetS P T Q); try (clear HPTQ; rename H into HPTQ).
-----
Lemma strong_parallel_postulate_implies_inter_dec : strong_parallel_postulate -> decidability_of_intersection.
Proof.
intros HSPP S Q P U.
elim (col_dec P Q S); intro HPQS; [left; exists P; Col|].
elim (eq_dec_points P U); intro HPU; treat_equalities; [left; exists Q; Col|].
assert (H := midpoint_existence P Q); destruct H as [T [HPTQ HCong1]].
assert (H := symmetric_point_construction S T); destruct H as [R [HRTS HCong2]].
elim (col_dec P R U); intro HPRU.
elim (cop_dec P Q S U); intro HCop.
assert (H : BetS R T S); try (clear HRTS; rename H into HRTS).
assert (H : BetS P T Q); try (clear HPTQ; rename H into HPTQ).

*****
HRTS : BetS R T S
HCop : Coplanar P Q S U
HPRU : not (Col P R U)
HCong2 : Cong S T T R
R : Tpoint
HCong1 : Cong P T T Q
HPTQ : Bet P T Q
T : Tpoint
HPU : not (eq P U)
HPQS : not (Col P Q S)
S,Q,P,U : Tpoint
HSPP : strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
BetS P T Q
+++++
split; Col.
-----
Lemma strong_parallel_postulate_implies_inter_dec : strong_parallel_postulate -> decidability_of_intersection.
Proof.
intros HSPP S Q P U.
elim (col_dec P Q S); intro HPQS; [left; exists P; Col|].
elim (eq_dec_points P U); intro HPU; treat_equalities; [left; exists Q; Col|].
assert (H := midpoint_existence P Q); destruct H as [T [HPTQ HCong1]].
assert (H := symmetric_point_construction S T); destruct H as [R [HRTS HCong2]].
elim (col_dec P R U); intro HPRU.
elim (cop_dec P Q S U); intro HCop.
assert (H : BetS R T S); try (clear HRTS; rename H into HRTS).
assert (H : BetS P T Q); try (clear HPTQ; rename H into HPTQ).
split; Col.

*****
HRTS : BetS R T S
HCop : Coplanar P Q S U
HPRU : not (Col P R U)
HCong2 : Cong S T T R
R : Tpoint
HCong1 : Cong P T T Q
HPTQ : Bet P T Q
T : Tpoint
HPU : not (eq P U)
HPQS : not (Col P Q S)
S,Q,P,U : Tpoint
HSPP : strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (not (eq P T)) (not (eq T Q))
+++++
split; try (intro; treat_equalities; Col).
-----
Lemma strong_parallel_postulate_implies_inter_dec : strong_parallel_postulate -> decidability_of_intersection.
Proof.
intros HSPP S Q P U.
elim (col_dec P Q S); intro HPQS; [left; exists P; Col|].
elim (eq_dec_points P U); intro HPU; treat_equalities; [left; exists Q; Col|].
assert (H := midpoint_existence P Q); destruct H as [T [HPTQ HCong1]].
assert (H := symmetric_point_construction S T); destruct H as [R [HRTS HCong2]].
elim (col_dec P R U); intro HPRU.
elim (cop_dec P Q S U); intro HCop.
assert (H : BetS R T S); try (clear HRTS; rename H into HRTS).
assert (H : BetS P T Q); try (clear HPTQ; rename H into HPTQ).

*****
HPTQ : BetS P T Q
HRTS : BetS R T S
HCop : Coplanar P Q S U
HPRU : not (Col P R U)
HCong2 : Cong S T T R
R : Tpoint
HCong1 : Cong P T T Q
T : Tpoint
HPU : not (eq P U)
HPQS : not (Col P Q S)
S,Q,P,U : Tpoint
HSPP : strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (ex (fun I : Tpoint => and (Col I S Q) (Col I P U))) (not (ex (fun I : Tpoint => and (Col I S Q) (Col I P U))))
+++++
assert (HI := HSPP P Q R S T U); destruct HI as [I [HCol1 HCol2]]; Cong; try (left; exists I; Col).
-----
Lemma strong_parallel_postulate_implies_inter_dec : strong_parallel_postulate -> decidability_of_intersection.
Proof.
intros HSPP S Q P U.
elim (col_dec P Q S); intro HPQS; [left; exists P; Col|].
elim (eq_dec_points P U); intro HPU; treat_equalities; [left; exists Q; Col|].
assert (H := midpoint_existence P Q); destruct H as [T [HPTQ HCong1]].
assert (H := symmetric_point_construction S T); destruct H as [R [HRTS HCong2]].
elim (col_dec P R U); intro HPRU.
elim (cop_dec P Q S U); intro HCop.
assert (H : BetS R T S); try (clear HRTS; rename H into HRTS).
assert (H : BetS P T Q); try (clear HPTQ; rename H into HPTQ).
assert (HI := HSPP P Q R S T U); destruct HI as [I [HCol1 HCol2]]; Cong; try (left; exists I; Col).

*****
HPTQ : BetS P T Q
HRTS : BetS R T S
HCop : Coplanar P Q S U
HPRU : not (Col P R U)
HCong2 : Cong S T T R
R : Tpoint
HCong1 : Cong P T T Q
T : Tpoint
HPU : not (eq P U)
HPQS : not (Col P Q S)
S,Q,P,U : Tpoint
HSPP : strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar P Q R U
+++++
unfold BetS in *; spliter.
-----
Lemma strong_parallel_postulate_implies_inter_dec : strong_parallel_postulate -> decidability_of_intersection.
Proof.
intros HSPP S Q P U.
elim (col_dec P Q S); intro HPQS; [left; exists P; Col|].
elim (eq_dec_points P U); intro HPU; treat_equalities; [left; exists Q; Col|].
assert (H := midpoint_existence P Q); destruct H as [T [HPTQ HCong1]].
assert (H := symmetric_point_construction S T); destruct H as [R [HRTS HCong2]].
elim (col_dec P R U); intro HPRU.
elim (cop_dec P Q S U); intro HCop.
assert (H : BetS R T S); try (clear HRTS; rename H into HRTS).
assert (H : BetS P T Q); try (clear HPTQ; rename H into HPTQ).
assert (HI := HSPP P Q R S T U); destruct HI as [I [HCol1 HCol2]]; Cong; try (left; exists I; Col).
unfold BetS in *; spliter.

*****
H1 : not (eq T Q)
H0 : not (eq P T)
H : Bet P T Q
H4 : not (eq T S)
H3 : not (eq R T)
H2 : Bet R T S
HCop : Coplanar P Q S U
HPRU : not (Col P R U)
HCong2 : Cong S T T R
R : Tpoint
HCong1 : Cong P T T Q
T : Tpoint
HPU : not (eq P U)
HPQS : not (Col P Q S)
S,Q,P,U : Tpoint
HSPP : strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar P Q R U
+++++
apply coplanar_trans_1 with S; [Col|exists T; right; right; split; Col|Cop].
-----
Lemma strong_parallel_postulate_implies_inter_dec : strong_parallel_postulate -> decidability_of_intersection.
Proof.
intros HSPP S Q P U.
elim (col_dec P Q S); intro HPQS; [left; exists P; Col|].
elim (eq_dec_points P U); intro HPU; treat_equalities; [left; exists Q; Col|].
assert (H := midpoint_existence P Q); destruct H as [T [HPTQ HCong1]].
assert (H := symmetric_point_construction S T); destruct H as [R [HRTS HCong2]].
elim (col_dec P R U); intro HPRU.
elim (cop_dec P Q S U); intro HCop.

*****
HCop : not (Coplanar P Q S U)
HPRU : not (Col P R U)
HCong2 : Cong S T T R
HRTS : Bet S T R
R : Tpoint
HCong1 : Cong P T T Q
HPTQ : Bet P T Q
T : Tpoint
HPU : not (eq P U)
HPQS : not (Col P Q S)
S,Q,P,U : Tpoint
HSPP : strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (ex (fun I : Tpoint => and (Col I S Q) (Col I P U))) (not (ex (fun I : Tpoint => and (Col I S Q) (Col I P U))))
+++++
right; intros [I []].
-----
Lemma strong_parallel_postulate_implies_inter_dec : strong_parallel_postulate -> decidability_of_intersection.
Proof.
intros HSPP S Q P U.
elim (col_dec P Q S); intro HPQS; [left; exists P; Col|].
elim (eq_dec_points P U); intro HPU; treat_equalities; [left; exists Q; Col|].
assert (H := midpoint_existence P Q); destruct H as [T [HPTQ HCong1]].
assert (H := symmetric_point_construction S T); destruct H as [R [HRTS HCong2]].
elim (col_dec P R U); intro HPRU.
elim (cop_dec P Q S U); intro HCop.
right; intros [I []].

*****
H0 : Col I P U
H : Col I S Q
I : Tpoint
HCop : not (Coplanar P Q S U)
HPRU : not (Col P R U)
HCong2 : Cong S T T R
HRTS : Bet S T R
R : Tpoint
HCong1 : Cong P T T Q
HPTQ : Bet P T Q
T : Tpoint
HPU : not (eq P U)
HPQS : not (Col P Q S)
S,Q,P,U : Tpoint
HSPP : strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply HCop.
-----
Lemma strong_parallel_postulate_implies_inter_dec : strong_parallel_postulate -> decidability_of_intersection.
Proof.
intros HSPP S Q P U.
elim (col_dec P Q S); intro HPQS; [left; exists P; Col|].
elim (eq_dec_points P U); intro HPU; treat_equalities; [left; exists Q; Col|].
assert (H := midpoint_existence P Q); destruct H as [T [HPTQ HCong1]].
assert (H := symmetric_point_construction S T); destruct H as [R [HRTS HCong2]].
elim (col_dec P R U); intro HPRU.
elim (cop_dec P Q S U); intro HCop.
right; intros [I []].
apply HCop.

*****
H0 : Col I P U
H : Col I S Q
I : Tpoint
HCop : not (Coplanar P Q S U)
HPRU : not (Col P R U)
HCong2 : Cong S T T R
HRTS : Bet S T R
R : Tpoint
HCong1 : Cong P T T Q
HPTQ : Bet P T Q
T : Tpoint
HPU : not (eq P U)
HPQS : not (Col P Q S)
S,Q,P,U : Tpoint
HSPP : strong_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar P Q S U
+++++
exists I; right; right; split; Col.
-----
Lemma strong_parallel_postulate_implies_inter_dec : strong_parallel_postulate -> decidability_of_intersection.
Proof.
intros HSPP S Q P U.
elim (col_dec P Q S); intro HPQS; [left; exists P; Col|].
elim (eq_dec_points P U); intro HPU; treat_equalities; [left; exists Q; Col|].
assert (H := midpoint_existence P Q); destruct H as [T [HPTQ HCong1]].
assert (H := symmetric_point_construction S T); destruct H as [R [HRTS HCong2]].
elim (col_dec P R U); intro HPRU.

*****

*****

+++++
Qed.
-----
End SPP_ID.
-----
