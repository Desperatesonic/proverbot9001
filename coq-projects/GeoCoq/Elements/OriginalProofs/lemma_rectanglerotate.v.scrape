Require Export GeoCoq.Elements.OriginalProofs.euclidean_tactics.
-----
Section Euclid.
-----
Context `{Ax1:area}.
-----
Lemma lemma_rectanglerotate : \n   forall A B C D, \n   RE A B C D ->\n   RE B C D A.
-----
Lemma lemma_rectanglerotate : forall A B C D, RE A B C D -> RE B C D A.

*****
Ax1 : area Ax
Ax : euclidean_euclidean Ax2
Ax2 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
forall (A B C D : Point) (_ : RE A B C D), RE B C D A
+++++
Proof.
-----
Lemma lemma_rectanglerotate : forall A B C D, RE A B C D -> RE B C D A.
Proof.

*****
Ax1 : area Ax
Ax : euclidean_euclidean Ax2
Ax2 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
forall (A B C D : Point) (_ : RE A B C D), RE B C D A
+++++
intros.
-----
Lemma lemma_rectanglerotate : forall A B C D, RE A B C D -> RE B C D A.
Proof.
intros.

*****
H : RE A B C D
A,B,C,D : Point
Ax1 : area Ax
Ax : euclidean_euclidean Ax2
Ax2 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
RE B C D A
+++++
assert ((Per D A B /\ Per A B C /\ Per B C D /\ Per C D A /\ CR A C B D)) by (conclude_def RE ).
-----
Lemma lemma_rectanglerotate : forall A B C D, RE A B C D -> RE B C D A.
Proof.
intros.
assert ((Per D A B /\\ Per A B C /\\ Per B C D /\\ Per C D A /\\ CR A C B D)) by (conclude_def RE ).

*****
H0 : and (Per D A B)\n (and (Per A B C) (and (Per B C D) (and (Per C D A) (CR A C B D))))
H : RE A B C D
A,B,C,D : Point
Ax1 : area Ax
Ax : euclidean_euclidean Ax2
Ax2 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
RE B C D A
+++++
let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\ BetS B M D)) by (conclude_def CR );destruct Tf as [M];spliter.
-----
Lemma lemma_rectanglerotate : forall A B C D, RE A B C D -> RE B C D A.
Proof.
intros.
assert ((Per D A B /\\ Per A B C /\\ Per B C D /\\ Per C D A /\\ CR A C B D)) by (conclude_def RE ).
let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\\ BetS B M D)) by (conclude_def CR );destruct Tf as [M];spliter.

*****
H2 : BetS B M D
H1 : BetS A M C
M : Point
H6 : CR A C B D
H5 : Per C D A
H4 : Per B C D
H3 : Per A B C
H0 : Per D A B
H : RE A B C D
A,B,C,D : Point
Ax1 : area Ax
Ax : euclidean_euclidean Ax2
Ax2 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
RE B C D A
+++++
assert (BetS C M A) by (conclude axiom_betweennesssymmetry).
-----
Lemma lemma_rectanglerotate : forall A B C D, RE A B C D -> RE B C D A.
Proof.
intros.
assert ((Per D A B /\\ Per A B C /\\ Per B C D /\\ Per C D A /\\ CR A C B D)) by (conclude_def RE ).
let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\\ BetS B M D)) by (conclude_def CR );destruct Tf as [M];spliter.
assert (BetS C M A) by (conclude axiom_betweennesssymmetry).

*****
H7 : BetS C M A
H2 : BetS B M D
H1 : BetS A M C
M : Point
H6 : CR A C B D
H5 : Per C D A
H4 : Per B C D
H3 : Per A B C
H0 : Per D A B
H : RE A B C D
A,B,C,D : Point
Ax1 : area Ax
Ax : euclidean_euclidean Ax2
Ax2 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
RE B C D A
+++++
assert (CR B D C A) by (conclude_def CR ).
-----
Lemma lemma_rectanglerotate : forall A B C D, RE A B C D -> RE B C D A.
Proof.
intros.
assert ((Per D A B /\\ Per A B C /\\ Per B C D /\\ Per C D A /\\ CR A C B D)) by (conclude_def RE ).
let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\\ BetS B M D)) by (conclude_def CR );destruct Tf as [M];spliter.
assert (BetS C M A) by (conclude axiom_betweennesssymmetry).
assert (CR B D C A) by (conclude_def CR ).

*****
H8 : CR B D C A
H7 : BetS C M A
H2 : BetS B M D
H1 : BetS A M C
M : Point
H6 : CR A C B D
H5 : Per C D A
H4 : Per B C D
H3 : Per A B C
H0 : Per D A B
H : RE A B C D
A,B,C,D : Point
Ax1 : area Ax
Ax : euclidean_euclidean Ax2
Ax2 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
RE B C D A
+++++
assert (RE B C D A) by (conclude_def RE ).
-----
Lemma lemma_rectanglerotate : forall A B C D, RE A B C D -> RE B C D A.
Proof.
intros.
assert ((Per D A B /\\ Per A B C /\\ Per B C D /\\ Per C D A /\\ CR A C B D)) by (conclude_def RE ).
let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\\ BetS B M D)) by (conclude_def CR );destruct Tf as [M];spliter.
assert (BetS C M A) by (conclude axiom_betweennesssymmetry).
assert (CR B D C A) by (conclude_def CR ).
assert (RE B C D A) by (conclude_def RE ).

*****
H9 : RE B C D A
H8 : CR B D C A
H7 : BetS C M A
H2 : BetS B M D
H1 : BetS A M C
M : Point
H6 : CR A C B D
H5 : Per C D A
H4 : Per B C D
H3 : Per A B C
H0 : Per D A B
H : RE A B C D
A,B,C,D : Point
Ax1 : area Ax
Ax : euclidean_euclidean Ax2
Ax2 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
RE B C D A
+++++
close.
-----
Lemma lemma_rectanglerotate : forall A B C D, RE A B C D -> RE B C D A.
Proof.
intros.
assert ((Per D A B /\\ Per A B C /\\ Per B C D /\\ Per C D A /\\ CR A C B D)) by (conclude_def RE ).
let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\\ BetS B M D)) by (conclude_def CR );destruct Tf as [M];spliter.
assert (BetS C M A) by (conclude axiom_betweennesssymmetry).
assert (CR B D C A) by (conclude_def CR ).
assert (RE B C D A) by (conclude_def RE ).
close.

*****

*****

+++++
Qed.
-----
End Euclid.
-----
