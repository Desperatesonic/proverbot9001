Require Export GeoCoq.Elements.OriginalProofs.lemma_ray2.
-----
Require Export GeoCoq.Elements.OriginalProofs.lemma_rayimpliescollinear.
-----
Require Export GeoCoq.Elements.OriginalProofs.lemma_collinearitypreserved.
-----
Require Export GeoCoq.Elements.OriginalProofs.lemma_raystrict.
-----
Section Euclid.
-----
Context `{Ax:euclidean_neutral_ruler_compass}.
-----
Lemma lemma_equalanglesNC : \n   forall A B C a b c, \n   CongA A B C a b c ->\n   nCol a b c.
-----
Lemma lemma_equalanglesNC : forall A B C a b c, CongA A B C a b c -> nCol a b c.

*****
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
forall (A B C a b c : Point) (_ : CongA A B C a b c), nCol a b c
+++++
Proof.
-----
Lemma lemma_equalanglesNC : forall A B C a b c, CongA A B C a b c -> nCol a b c.
Proof.

*****
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
forall (A B C a b c : Point) (_ : CongA A B C a b c), nCol a b c
+++++
intros.
-----
Lemma lemma_equalanglesNC : forall A B C a b c, CongA A B C a b c -> nCol a b c.
Proof.
intros.

*****
H : CongA A B C a b c
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
nCol a b c
+++++
let Tf:=fresh in assert (Tf:exists U V u v, (Out B A U /\ Out B C V /\ Out b a u /\ Out b c v /\ Cong B U b u /\ Cong B V b v /\ Cong U V u v /\ nCol A B C)) by (conclude_def CongA );destruct Tf as [U[V[u[v]]]];spliter.
-----
Lemma lemma_equalanglesNC : forall A B C a b c, CongA A B C a b c -> nCol a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists U V u v, (Out B A U /\\ Out B C V /\\ Out b a u /\\ Out b c v /\\ Cong B U b u /\\ Cong B V b v /\\ Cong U V u v /\\ nCol A B C)) by (conclude_def CongA );destruct Tf as [U[V[u[v]]]];spliter.

*****
H7 : nCol A B C
H6 : Cong U V u v
H5 : Cong B V b v
H4 : Cong B U b u
H3 : Out b c v
H2 : Out b a u
H1 : Out B C V
H0 : Out B A U
U,V,u,v : Point
H : CongA A B C a b c
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
nCol a b c
+++++
assert (neq b a) by (conclude lemma_ray2).
-----
Lemma lemma_equalanglesNC : forall A B C a b c, CongA A B C a b c -> nCol a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists U V u v, (Out B A U /\\ Out B C V /\\ Out b a u /\\ Out b c v /\\ Cong B U b u /\\ Cong B V b v /\\ Cong U V u v /\\ nCol A B C)) by (conclude_def CongA );destruct Tf as [U[V[u[v]]]];spliter.
assert (neq b a) by (conclude lemma_ray2).

*****
H8 : neq b a
H7 : nCol A B C
H6 : Cong U V u v
H5 : Cong B V b v
H4 : Cong B U b u
H3 : Out b c v
H2 : Out b a u
H1 : Out B C V
H0 : Out B A U
U,V,u,v : Point
H : CongA A B C a b c
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
nCol a b c
+++++
assert (neq a b) by (conclude lemma_inequalitysymmetric).
-----
Lemma lemma_equalanglesNC : forall A B C a b c, CongA A B C a b c -> nCol a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists U V u v, (Out B A U /\\ Out B C V /\\ Out b a u /\\ Out b c v /\\ Cong B U b u /\\ Cong B V b v /\\ Cong U V u v /\\ nCol A B C)) by (conclude_def CongA );destruct Tf as [U[V[u[v]]]];spliter.
assert (neq b a) by (conclude lemma_ray2).
assert (neq a b) by (conclude lemma_inequalitysymmetric).

*****
H9 : neq a b
H8 : neq b a
H7 : nCol A B C
H6 : Cong U V u v
H5 : Cong B V b v
H4 : Cong B U b u
H3 : Out b c v
H2 : Out b a u
H1 : Out B C V
H0 : Out B A U
U,V,u,v : Point
H : CongA A B C a b c
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
nCol a b c
+++++
assert (Cong b u B U) by (conclude lemma_congruencesymmetric).
-----
Lemma lemma_equalanglesNC : forall A B C a b c, CongA A B C a b c -> nCol a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists U V u v, (Out B A U /\\ Out B C V /\\ Out b a u /\\ Out b c v /\\ Cong B U b u /\\ Cong B V b v /\\ Cong U V u v /\\ nCol A B C)) by (conclude_def CongA );destruct Tf as [U[V[u[v]]]];spliter.
assert (neq b a) by (conclude lemma_ray2).
assert (neq a b) by (conclude lemma_inequalitysymmetric).
assert (Cong b u B U) by (conclude lemma_congruencesymmetric).

*****
H10 : Cong b u B U
H9 : neq a b
H8 : neq b a
H7 : nCol A B C
H6 : Cong U V u v
H5 : Cong B V b v
H4 : Cong B U b u
H3 : Out b c v
H2 : Out b a u
H1 : Out B C V
H0 : Out B A U
U,V,u,v : Point
H : CongA A B C a b c
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
nCol a b c
+++++
assert (Cong b v B V) by (conclude lemma_congruencesymmetric).
-----
Lemma lemma_equalanglesNC : forall A B C a b c, CongA A B C a b c -> nCol a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists U V u v, (Out B A U /\\ Out B C V /\\ Out b a u /\\ Out b c v /\\ Cong B U b u /\\ Cong B V b v /\\ Cong U V u v /\\ nCol A B C)) by (conclude_def CongA );destruct Tf as [U[V[u[v]]]];spliter.
assert (neq b a) by (conclude lemma_ray2).
assert (neq a b) by (conclude lemma_inequalitysymmetric).
assert (Cong b u B U) by (conclude lemma_congruencesymmetric).
assert (Cong b v B V) by (conclude lemma_congruencesymmetric).

*****
H11 : Cong b v B V
H10 : Cong b u B U
H9 : neq a b
H8 : neq b a
H7 : nCol A B C
H6 : Cong U V u v
H5 : Cong B V b v
H4 : Cong B U b u
H3 : Out b c v
H2 : Out b a u
H1 : Out B C V
H0 : Out B A U
U,V,u,v : Point
H : CongA A B C a b c
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
nCol a b c
+++++
assert (Col B A U) by (conclude lemma_rayimpliescollinear).
-----
Lemma lemma_equalanglesNC : forall A B C a b c, CongA A B C a b c -> nCol a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists U V u v, (Out B A U /\\ Out B C V /\\ Out b a u /\\ Out b c v /\\ Cong B U b u /\\ Cong B V b v /\\ Cong U V u v /\\ nCol A B C)) by (conclude_def CongA );destruct Tf as [U[V[u[v]]]];spliter.
assert (neq b a) by (conclude lemma_ray2).
assert (neq a b) by (conclude lemma_inequalitysymmetric).
assert (Cong b u B U) by (conclude lemma_congruencesymmetric).
assert (Cong b v B V) by (conclude lemma_congruencesymmetric).
assert (Col B A U) by (conclude lemma_rayimpliescollinear).

*****
H12 : Col B A U
H11 : Cong b v B V
H10 : Cong b u B U
H9 : neq a b
H8 : neq b a
H7 : nCol A B C
H6 : Cong U V u v
H5 : Cong B V b v
H4 : Cong B U b u
H3 : Out b c v
H2 : Out b a u
H1 : Out B C V
H0 : Out B A U
U,V,u,v : Point
H : CongA A B C a b c
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
nCol a b c
+++++
assert (Col B C V) by (conclude lemma_rayimpliescollinear).
-----
Lemma lemma_equalanglesNC : forall A B C a b c, CongA A B C a b c -> nCol a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists U V u v, (Out B A U /\\ Out B C V /\\ Out b a u /\\ Out b c v /\\ Cong B U b u /\\ Cong B V b v /\\ Cong U V u v /\\ nCol A B C)) by (conclude_def CongA );destruct Tf as [U[V[u[v]]]];spliter.
assert (neq b a) by (conclude lemma_ray2).
assert (neq a b) by (conclude lemma_inequalitysymmetric).
assert (Cong b u B U) by (conclude lemma_congruencesymmetric).
assert (Cong b v B V) by (conclude lemma_congruencesymmetric).
assert (Col B A U) by (conclude lemma_rayimpliescollinear).
assert (Col B C V) by (conclude lemma_rayimpliescollinear).

*****
H13 : Col B C V
H12 : Col B A U
H11 : Cong b v B V
H10 : Cong b u B U
H9 : neq a b
H8 : neq b a
H7 : nCol A B C
H6 : Cong U V u v
H5 : Cong B V b v
H4 : Cong B U b u
H3 : Out b c v
H2 : Out b a u
H1 : Out B C V
H0 : Out B A U
U,V,u,v : Point
H : CongA A B C a b c
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
nCol a b c
+++++
assert (Col b a u) by (conclude lemma_rayimpliescollinear).
-----
Lemma lemma_equalanglesNC : forall A B C a b c, CongA A B C a b c -> nCol a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists U V u v, (Out B A U /\\ Out B C V /\\ Out b a u /\\ Out b c v /\\ Cong B U b u /\\ Cong B V b v /\\ Cong U V u v /\\ nCol A B C)) by (conclude_def CongA );destruct Tf as [U[V[u[v]]]];spliter.
assert (neq b a) by (conclude lemma_ray2).
assert (neq a b) by (conclude lemma_inequalitysymmetric).
assert (Cong b u B U) by (conclude lemma_congruencesymmetric).
assert (Cong b v B V) by (conclude lemma_congruencesymmetric).
assert (Col B A U) by (conclude lemma_rayimpliescollinear).
assert (Col B C V) by (conclude lemma_rayimpliescollinear).
assert (Col b a u) by (conclude lemma_rayimpliescollinear).

*****
H14 : Col b a u
H13 : Col B C V
H12 : Col B A U
H11 : Cong b v B V
H10 : Cong b u B U
H9 : neq a b
H8 : neq b a
H7 : nCol A B C
H6 : Cong U V u v
H5 : Cong B V b v
H4 : Cong B U b u
H3 : Out b c v
H2 : Out b a u
H1 : Out B C V
H0 : Out B A U
U,V,u,v : Point
H : CongA A B C a b c
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
nCol a b c
+++++
assert (Col b c v) by (conclude lemma_rayimpliescollinear).
-----
Lemma lemma_equalanglesNC : forall A B C a b c, CongA A B C a b c -> nCol a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists U V u v, (Out B A U /\\ Out B C V /\\ Out b a u /\\ Out b c v /\\ Cong B U b u /\\ Cong B V b v /\\ Cong U V u v /\\ nCol A B C)) by (conclude_def CongA );destruct Tf as [U[V[u[v]]]];spliter.
assert (neq b a) by (conclude lemma_ray2).
assert (neq a b) by (conclude lemma_inequalitysymmetric).
assert (Cong b u B U) by (conclude lemma_congruencesymmetric).
assert (Cong b v B V) by (conclude lemma_congruencesymmetric).
assert (Col B A U) by (conclude lemma_rayimpliescollinear).
assert (Col B C V) by (conclude lemma_rayimpliescollinear).
assert (Col b a u) by (conclude lemma_rayimpliescollinear).
assert (Col b c v) by (conclude lemma_rayimpliescollinear).

*****
H15 : Col b c v
H14 : Col b a u
H13 : Col B C V
H12 : Col B A U
H11 : Cong b v B V
H10 : Cong b u B U
H9 : neq a b
H8 : neq b a
H7 : nCol A B C
H6 : Cong U V u v
H5 : Cong B V b v
H4 : Cong B U b u
H3 : Out b c v
H2 : Out b a u
H1 : Out B C V
H0 : Out B A U
U,V,u,v : Point
H : CongA A B C a b c
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
nCol a b c
+++++
assert (Col a b u) by (forward_using lemma_collinearorder).
-----
Lemma lemma_equalanglesNC : forall A B C a b c, CongA A B C a b c -> nCol a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists U V u v, (Out B A U /\\ Out B C V /\\ Out b a u /\\ Out b c v /\\ Cong B U b u /\\ Cong B V b v /\\ Cong U V u v /\\ nCol A B C)) by (conclude_def CongA );destruct Tf as [U[V[u[v]]]];spliter.
assert (neq b a) by (conclude lemma_ray2).
assert (neq a b) by (conclude lemma_inequalitysymmetric).
assert (Cong b u B U) by (conclude lemma_congruencesymmetric).
assert (Cong b v B V) by (conclude lemma_congruencesymmetric).
assert (Col B A U) by (conclude lemma_rayimpliescollinear).
assert (Col B C V) by (conclude lemma_rayimpliescollinear).
assert (Col b a u) by (conclude lemma_rayimpliescollinear).
assert (Col b c v) by (conclude lemma_rayimpliescollinear).
assert (Col a b u) by (forward_using lemma_collinearorder).

*****
H16 : Col a b u
H15 : Col b c v
H14 : Col b a u
H13 : Col B C V
H12 : Col B A U
H11 : Cong b v B V
H10 : Cong b u B U
H9 : neq a b
H8 : neq b a
H7 : nCol A B C
H6 : Cong U V u v
H5 : Cong B V b v
H4 : Cong B U b u
H3 : Out b c v
H2 : Out b a u
H1 : Out B C V
H0 : Out B A U
U,V,u,v : Point
H : CongA A B C a b c
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
nCol a b c
+++++
assert (~ Col a b c).
-----
Lemma lemma_equalanglesNC : forall A B C a b c, CongA A B C a b c -> nCol a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists U V u v, (Out B A U /\\ Out B C V /\\ Out b a u /\\ Out b c v /\\ Cong B U b u /\\ Cong B V b v /\\ Cong U V u v /\\ nCol A B C)) by (conclude_def CongA );destruct Tf as [U[V[u[v]]]];spliter.
assert (neq b a) by (conclude lemma_ray2).
assert (neq a b) by (conclude lemma_inequalitysymmetric).
assert (Cong b u B U) by (conclude lemma_congruencesymmetric).
assert (Cong b v B V) by (conclude lemma_congruencesymmetric).
assert (Col B A U) by (conclude lemma_rayimpliescollinear).
assert (Col B C V) by (conclude lemma_rayimpliescollinear).
assert (Col b a u) by (conclude lemma_rayimpliescollinear).
assert (Col b c v) by (conclude lemma_rayimpliescollinear).
assert (Col a b u) by (forward_using lemma_collinearorder).
assert (~ Col a b c).

*****
H16 : Col a b u
H15 : Col b c v
H14 : Col b a u
H13 : Col B C V
H12 : Col B A U
H11 : Cong b v B V
H10 : Cong b u B U
H9 : neq a b
H8 : neq b a
H7 : nCol A B C
H6 : Cong U V u v
H5 : Cong B V b v
H4 : Cong B U b u
H3 : Out b c v
H2 : Out b a u
H1 : Out B C V
H0 : Out B A U
U,V,u,v : Point
H : CongA A B C a b c
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (Col a b c)
+++++
intro.
-----
Lemma lemma_equalanglesNC : forall A B C a b c, CongA A B C a b c -> nCol a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists U V u v, (Out B A U /\\ Out B C V /\\ Out b a u /\\ Out b c v /\\ Cong B U b u /\\ Cong B V b v /\\ Cong U V u v /\\ nCol A B C)) by (conclude_def CongA );destruct Tf as [U[V[u[v]]]];spliter.
assert (neq b a) by (conclude lemma_ray2).
assert (neq a b) by (conclude lemma_inequalitysymmetric).
assert (Cong b u B U) by (conclude lemma_congruencesymmetric).
assert (Cong b v B V) by (conclude lemma_congruencesymmetric).
assert (Col B A U) by (conclude lemma_rayimpliescollinear).
assert (Col B C V) by (conclude lemma_rayimpliescollinear).
assert (Col b a u) by (conclude lemma_rayimpliescollinear).
assert (Col b c v) by (conclude lemma_rayimpliescollinear).
assert (Col a b u) by (forward_using lemma_collinearorder).
assert (~ Col a b c).
intro.

*****
H17 : Col a b c
H16 : Col a b u
H15 : Col b c v
H14 : Col b a u
H13 : Col B C V
H12 : Col B A U
H11 : Cong b v B V
H10 : Cong b u B U
H9 : neq a b
H8 : neq b a
H7 : nCol A B C
H6 : Cong U V u v
H5 : Cong B V b v
H4 : Cong B U b u
H3 : Out b c v
H2 : Out b a u
H1 : Out B C V
H0 : Out B A U
U,V,u,v : Point
H : CongA A B C a b c
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col b u c) by (conclude lemma_collinear4).
-----
Lemma lemma_equalanglesNC : forall A B C a b c, CongA A B C a b c -> nCol a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists U V u v, (Out B A U /\\ Out B C V /\\ Out b a u /\\ Out b c v /\\ Cong B U b u /\\ Cong B V b v /\\ Cong U V u v /\\ nCol A B C)) by (conclude_def CongA );destruct Tf as [U[V[u[v]]]];spliter.
assert (neq b a) by (conclude lemma_ray2).
assert (neq a b) by (conclude lemma_inequalitysymmetric).
assert (Cong b u B U) by (conclude lemma_congruencesymmetric).
assert (Cong b v B V) by (conclude lemma_congruencesymmetric).
assert (Col B A U) by (conclude lemma_rayimpliescollinear).
assert (Col B C V) by (conclude lemma_rayimpliescollinear).
assert (Col b a u) by (conclude lemma_rayimpliescollinear).
assert (Col b c v) by (conclude lemma_rayimpliescollinear).
assert (Col a b u) by (forward_using lemma_collinearorder).
assert (~ Col a b c).
intro.
assert (Col b u c) by (conclude lemma_collinear4).

*****
H18 : Col b u c
H17 : Col a b c
H16 : Col a b u
H15 : Col b c v
H14 : Col b a u
H13 : Col B C V
H12 : Col B A U
H11 : Cong b v B V
H10 : Cong b u B U
H9 : neq a b
H8 : neq b a
H7 : nCol A B C
H6 : Cong U V u v
H5 : Cong B V b v
H4 : Cong B U b u
H3 : Out b c v
H2 : Out b a u
H1 : Out B C V
H0 : Out B A U
U,V,u,v : Point
H : CongA A B C a b c
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col c b u) by (forward_using lemma_collinearorder).
-----
Lemma lemma_equalanglesNC : forall A B C a b c, CongA A B C a b c -> nCol a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists U V u v, (Out B A U /\\ Out B C V /\\ Out b a u /\\ Out b c v /\\ Cong B U b u /\\ Cong B V b v /\\ Cong U V u v /\\ nCol A B C)) by (conclude_def CongA );destruct Tf as [U[V[u[v]]]];spliter.
assert (neq b a) by (conclude lemma_ray2).
assert (neq a b) by (conclude lemma_inequalitysymmetric).
assert (Cong b u B U) by (conclude lemma_congruencesymmetric).
assert (Cong b v B V) by (conclude lemma_congruencesymmetric).
assert (Col B A U) by (conclude lemma_rayimpliescollinear).
assert (Col B C V) by (conclude lemma_rayimpliescollinear).
assert (Col b a u) by (conclude lemma_rayimpliescollinear).
assert (Col b c v) by (conclude lemma_rayimpliescollinear).
assert (Col a b u) by (forward_using lemma_collinearorder).
assert (~ Col a b c).
intro.
assert (Col b u c) by (conclude lemma_collinear4).
assert (Col c b u) by (forward_using lemma_collinearorder).

*****
H19 : Col c b u
H18 : Col b u c
H17 : Col a b c
H16 : Col a b u
H15 : Col b c v
H14 : Col b a u
H13 : Col B C V
H12 : Col B A U
H11 : Cong b v B V
H10 : Cong b u B U
H9 : neq a b
H8 : neq b a
H7 : nCol A B C
H6 : Cong U V u v
H5 : Cong B V b v
H4 : Cong B U b u
H3 : Out b c v
H2 : Out b a u
H1 : Out B C V
H0 : Out B A U
U,V,u,v : Point
H : CongA A B C a b c
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col c b v) by (forward_using lemma_collinearorder).
-----
Lemma lemma_equalanglesNC : forall A B C a b c, CongA A B C a b c -> nCol a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists U V u v, (Out B A U /\\ Out B C V /\\ Out b a u /\\ Out b c v /\\ Cong B U b u /\\ Cong B V b v /\\ Cong U V u v /\\ nCol A B C)) by (conclude_def CongA );destruct Tf as [U[V[u[v]]]];spliter.
assert (neq b a) by (conclude lemma_ray2).
assert (neq a b) by (conclude lemma_inequalitysymmetric).
assert (Cong b u B U) by (conclude lemma_congruencesymmetric).
assert (Cong b v B V) by (conclude lemma_congruencesymmetric).
assert (Col B A U) by (conclude lemma_rayimpliescollinear).
assert (Col B C V) by (conclude lemma_rayimpliescollinear).
assert (Col b a u) by (conclude lemma_rayimpliescollinear).
assert (Col b c v) by (conclude lemma_rayimpliescollinear).
assert (Col a b u) by (forward_using lemma_collinearorder).
assert (~ Col a b c).
intro.
assert (Col b u c) by (conclude lemma_collinear4).
assert (Col c b u) by (forward_using lemma_collinearorder).
assert (Col c b v) by (forward_using lemma_collinearorder).

*****
H20 : Col c b v
H19 : Col c b u
H18 : Col b u c
H17 : Col a b c
H16 : Col a b u
H15 : Col b c v
H14 : Col b a u
H13 : Col B C V
H12 : Col B A U
H11 : Cong b v B V
H10 : Cong b u B U
H9 : neq a b
H8 : neq b a
H7 : nCol A B C
H6 : Cong U V u v
H5 : Cong B V b v
H4 : Cong B U b u
H3 : Out b c v
H2 : Out b a u
H1 : Out B C V
H0 : Out B A U
U,V,u,v : Point
H : CongA A B C a b c
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (neq b c) by (conclude lemma_ray2).
-----
Lemma lemma_equalanglesNC : forall A B C a b c, CongA A B C a b c -> nCol a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists U V u v, (Out B A U /\\ Out B C V /\\ Out b a u /\\ Out b c v /\\ Cong B U b u /\\ Cong B V b v /\\ Cong U V u v /\\ nCol A B C)) by (conclude_def CongA );destruct Tf as [U[V[u[v]]]];spliter.
assert (neq b a) by (conclude lemma_ray2).
assert (neq a b) by (conclude lemma_inequalitysymmetric).
assert (Cong b u B U) by (conclude lemma_congruencesymmetric).
assert (Cong b v B V) by (conclude lemma_congruencesymmetric).
assert (Col B A U) by (conclude lemma_rayimpliescollinear).
assert (Col B C V) by (conclude lemma_rayimpliescollinear).
assert (Col b a u) by (conclude lemma_rayimpliescollinear).
assert (Col b c v) by (conclude lemma_rayimpliescollinear).
assert (Col a b u) by (forward_using lemma_collinearorder).
assert (~ Col a b c).
intro.
assert (Col b u c) by (conclude lemma_collinear4).
assert (Col c b u) by (forward_using lemma_collinearorder).
assert (Col c b v) by (forward_using lemma_collinearorder).
assert (neq b c) by (conclude lemma_ray2).

*****
H21 : neq b c
H20 : Col c b v
H19 : Col c b u
H18 : Col b u c
H17 : Col a b c
H16 : Col a b u
H15 : Col b c v
H14 : Col b a u
H13 : Col B C V
H12 : Col B A U
H11 : Cong b v B V
H10 : Cong b u B U
H9 : neq a b
H8 : neq b a
H7 : nCol A B C
H6 : Cong U V u v
H5 : Cong B V b v
H4 : Cong B U b u
H3 : Out b c v
H2 : Out b a u
H1 : Out B C V
H0 : Out B A U
U,V,u,v : Point
H : CongA A B C a b c
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (neq c b) by (conclude lemma_inequalitysymmetric).
-----
Lemma lemma_equalanglesNC : forall A B C a b c, CongA A B C a b c -> nCol a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists U V u v, (Out B A U /\\ Out B C V /\\ Out b a u /\\ Out b c v /\\ Cong B U b u /\\ Cong B V b v /\\ Cong U V u v /\\ nCol A B C)) by (conclude_def CongA );destruct Tf as [U[V[u[v]]]];spliter.
assert (neq b a) by (conclude lemma_ray2).
assert (neq a b) by (conclude lemma_inequalitysymmetric).
assert (Cong b u B U) by (conclude lemma_congruencesymmetric).
assert (Cong b v B V) by (conclude lemma_congruencesymmetric).
assert (Col B A U) by (conclude lemma_rayimpliescollinear).
assert (Col B C V) by (conclude lemma_rayimpliescollinear).
assert (Col b a u) by (conclude lemma_rayimpliescollinear).
assert (Col b c v) by (conclude lemma_rayimpliescollinear).
assert (Col a b u) by (forward_using lemma_collinearorder).
assert (~ Col a b c).
intro.
assert (Col b u c) by (conclude lemma_collinear4).
assert (Col c b u) by (forward_using lemma_collinearorder).
assert (Col c b v) by (forward_using lemma_collinearorder).
assert (neq b c) by (conclude lemma_ray2).
assert (neq c b) by (conclude lemma_inequalitysymmetric).

*****
H22 : neq c b
H21 : neq b c
H20 : Col c b v
H19 : Col c b u
H18 : Col b u c
H17 : Col a b c
H16 : Col a b u
H15 : Col b c v
H14 : Col b a u
H13 : Col B C V
H12 : Col B A U
H11 : Cong b v B V
H10 : Cong b u B U
H9 : neq a b
H8 : neq b a
H7 : nCol A B C
H6 : Cong U V u v
H5 : Cong B V b v
H4 : Cong B U b u
H3 : Out b c v
H2 : Out b a u
H1 : Out B C V
H0 : Out B A U
U,V,u,v : Point
H : CongA A B C a b c
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col b u v) by (conclude lemma_collinear4).
-----
Lemma lemma_equalanglesNC : forall A B C a b c, CongA A B C a b c -> nCol a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists U V u v, (Out B A U /\\ Out B C V /\\ Out b a u /\\ Out b c v /\\ Cong B U b u /\\ Cong B V b v /\\ Cong U V u v /\\ nCol A B C)) by (conclude_def CongA );destruct Tf as [U[V[u[v]]]];spliter.
assert (neq b a) by (conclude lemma_ray2).
assert (neq a b) by (conclude lemma_inequalitysymmetric).
assert (Cong b u B U) by (conclude lemma_congruencesymmetric).
assert (Cong b v B V) by (conclude lemma_congruencesymmetric).
assert (Col B A U) by (conclude lemma_rayimpliescollinear).
assert (Col B C V) by (conclude lemma_rayimpliescollinear).
assert (Col b a u) by (conclude lemma_rayimpliescollinear).
assert (Col b c v) by (conclude lemma_rayimpliescollinear).
assert (Col a b u) by (forward_using lemma_collinearorder).
assert (~ Col a b c).
intro.
assert (Col b u c) by (conclude lemma_collinear4).
assert (Col c b u) by (forward_using lemma_collinearorder).
assert (Col c b v) by (forward_using lemma_collinearorder).
assert (neq b c) by (conclude lemma_ray2).
assert (neq c b) by (conclude lemma_inequalitysymmetric).
assert (Col b u v) by (conclude lemma_collinear4).

*****
H23 : Col b u v
H22 : neq c b
H21 : neq b c
H20 : Col c b v
H19 : Col c b u
H18 : Col b u c
H17 : Col a b c
H16 : Col a b u
H15 : Col b c v
H14 : Col b a u
H13 : Col B C V
H12 : Col B A U
H11 : Cong b v B V
H10 : Cong b u B U
H9 : neq a b
H8 : neq b a
H7 : nCol A B C
H6 : Cong U V u v
H5 : Cong B V b v
H4 : Cong B U b u
H3 : Out b c v
H2 : Out b a u
H1 : Out B C V
H0 : Out B A U
U,V,u,v : Point
H : CongA A B C a b c
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Cong u v U V) by (conclude lemma_congruencesymmetric).
-----
Lemma lemma_equalanglesNC : forall A B C a b c, CongA A B C a b c -> nCol a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists U V u v, (Out B A U /\\ Out B C V /\\ Out b a u /\\ Out b c v /\\ Cong B U b u /\\ Cong B V b v /\\ Cong U V u v /\\ nCol A B C)) by (conclude_def CongA );destruct Tf as [U[V[u[v]]]];spliter.
assert (neq b a) by (conclude lemma_ray2).
assert (neq a b) by (conclude lemma_inequalitysymmetric).
assert (Cong b u B U) by (conclude lemma_congruencesymmetric).
assert (Cong b v B V) by (conclude lemma_congruencesymmetric).
assert (Col B A U) by (conclude lemma_rayimpliescollinear).
assert (Col B C V) by (conclude lemma_rayimpliescollinear).
assert (Col b a u) by (conclude lemma_rayimpliescollinear).
assert (Col b c v) by (conclude lemma_rayimpliescollinear).
assert (Col a b u) by (forward_using lemma_collinearorder).
assert (~ Col a b c).
intro.
assert (Col b u c) by (conclude lemma_collinear4).
assert (Col c b u) by (forward_using lemma_collinearorder).
assert (Col c b v) by (forward_using lemma_collinearorder).
assert (neq b c) by (conclude lemma_ray2).
assert (neq c b) by (conclude lemma_inequalitysymmetric).
assert (Col b u v) by (conclude lemma_collinear4).
assert (Cong u v U V) by (conclude lemma_congruencesymmetric).

*****
H24 : Cong u v U V
H23 : Col b u v
H22 : neq c b
H21 : neq b c
H20 : Col c b v
H19 : Col c b u
H18 : Col b u c
H17 : Col a b c
H16 : Col a b u
H15 : Col b c v
H14 : Col b a u
H13 : Col B C V
H12 : Col B A U
H11 : Cong b v B V
H10 : Cong b u B U
H9 : neq a b
H8 : neq b a
H7 : nCol A B C
H6 : Cong U V u v
H5 : Cong B V b v
H4 : Cong B U b u
H3 : Out b c v
H2 : Out b a u
H1 : Out B C V
H0 : Out B A U
U,V,u,v : Point
H : CongA A B C a b c
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col B U V) by (conclude lemma_collinearitypreserved).
-----
Lemma lemma_equalanglesNC : forall A B C a b c, CongA A B C a b c -> nCol a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists U V u v, (Out B A U /\\ Out B C V /\\ Out b a u /\\ Out b c v /\\ Cong B U b u /\\ Cong B V b v /\\ Cong U V u v /\\ nCol A B C)) by (conclude_def CongA );destruct Tf as [U[V[u[v]]]];spliter.
assert (neq b a) by (conclude lemma_ray2).
assert (neq a b) by (conclude lemma_inequalitysymmetric).
assert (Cong b u B U) by (conclude lemma_congruencesymmetric).
assert (Cong b v B V) by (conclude lemma_congruencesymmetric).
assert (Col B A U) by (conclude lemma_rayimpliescollinear).
assert (Col B C V) by (conclude lemma_rayimpliescollinear).
assert (Col b a u) by (conclude lemma_rayimpliescollinear).
assert (Col b c v) by (conclude lemma_rayimpliescollinear).
assert (Col a b u) by (forward_using lemma_collinearorder).
assert (~ Col a b c).
intro.
assert (Col b u c) by (conclude lemma_collinear4).
assert (Col c b u) by (forward_using lemma_collinearorder).
assert (Col c b v) by (forward_using lemma_collinearorder).
assert (neq b c) by (conclude lemma_ray2).
assert (neq c b) by (conclude lemma_inequalitysymmetric).
assert (Col b u v) by (conclude lemma_collinear4).
assert (Cong u v U V) by (conclude lemma_congruencesymmetric).
assert (Col B U V) by (conclude lemma_collinearitypreserved).

*****
H25 : Col B U V
H24 : Cong u v U V
H23 : Col b u v
H22 : neq c b
H21 : neq b c
H20 : Col c b v
H19 : Col c b u
H18 : Col b u c
H17 : Col a b c
H16 : Col a b u
H15 : Col b c v
H14 : Col b a u
H13 : Col B C V
H12 : Col B A U
H11 : Cong b v B V
H10 : Cong b u B U
H9 : neq a b
H8 : neq b a
H7 : nCol A B C
H6 : Cong U V u v
H5 : Cong B V b v
H4 : Cong B U b u
H3 : Out b c v
H2 : Out b a u
H1 : Out B C V
H0 : Out B A U
U,V,u,v : Point
H : CongA A B C a b c
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col B U A) by (forward_using lemma_collinearorder).
-----
Lemma lemma_equalanglesNC : forall A B C a b c, CongA A B C a b c -> nCol a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists U V u v, (Out B A U /\\ Out B C V /\\ Out b a u /\\ Out b c v /\\ Cong B U b u /\\ Cong B V b v /\\ Cong U V u v /\\ nCol A B C)) by (conclude_def CongA );destruct Tf as [U[V[u[v]]]];spliter.
assert (neq b a) by (conclude lemma_ray2).
assert (neq a b) by (conclude lemma_inequalitysymmetric).
assert (Cong b u B U) by (conclude lemma_congruencesymmetric).
assert (Cong b v B V) by (conclude lemma_congruencesymmetric).
assert (Col B A U) by (conclude lemma_rayimpliescollinear).
assert (Col B C V) by (conclude lemma_rayimpliescollinear).
assert (Col b a u) by (conclude lemma_rayimpliescollinear).
assert (Col b c v) by (conclude lemma_rayimpliescollinear).
assert (Col a b u) by (forward_using lemma_collinearorder).
assert (~ Col a b c).
intro.
assert (Col b u c) by (conclude lemma_collinear4).
assert (Col c b u) by (forward_using lemma_collinearorder).
assert (Col c b v) by (forward_using lemma_collinearorder).
assert (neq b c) by (conclude lemma_ray2).
assert (neq c b) by (conclude lemma_inequalitysymmetric).
assert (Col b u v) by (conclude lemma_collinear4).
assert (Cong u v U V) by (conclude lemma_congruencesymmetric).
assert (Col B U V) by (conclude lemma_collinearitypreserved).
assert (Col B U A) by (forward_using lemma_collinearorder).

*****
H26 : Col B U A
H25 : Col B U V
H24 : Cong u v U V
H23 : Col b u v
H22 : neq c b
H21 : neq b c
H20 : Col c b v
H19 : Col c b u
H18 : Col b u c
H17 : Col a b c
H16 : Col a b u
H15 : Col b c v
H14 : Col b a u
H13 : Col B C V
H12 : Col B A U
H11 : Cong b v B V
H10 : Cong b u B U
H9 : neq a b
H8 : neq b a
H7 : nCol A B C
H6 : Cong U V u v
H5 : Cong B V b v
H4 : Cong B U b u
H3 : Out b c v
H2 : Out b a u
H1 : Out B C V
H0 : Out B A U
U,V,u,v : Point
H : CongA A B C a b c
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (neq B U) by (conclude lemma_raystrict).
-----
Lemma lemma_equalanglesNC : forall A B C a b c, CongA A B C a b c -> nCol a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists U V u v, (Out B A U /\\ Out B C V /\\ Out b a u /\\ Out b c v /\\ Cong B U b u /\\ Cong B V b v /\\ Cong U V u v /\\ nCol A B C)) by (conclude_def CongA );destruct Tf as [U[V[u[v]]]];spliter.
assert (neq b a) by (conclude lemma_ray2).
assert (neq a b) by (conclude lemma_inequalitysymmetric).
assert (Cong b u B U) by (conclude lemma_congruencesymmetric).
assert (Cong b v B V) by (conclude lemma_congruencesymmetric).
assert (Col B A U) by (conclude lemma_rayimpliescollinear).
assert (Col B C V) by (conclude lemma_rayimpliescollinear).
assert (Col b a u) by (conclude lemma_rayimpliescollinear).
assert (Col b c v) by (conclude lemma_rayimpliescollinear).
assert (Col a b u) by (forward_using lemma_collinearorder).
assert (~ Col a b c).
intro.
assert (Col b u c) by (conclude lemma_collinear4).
assert (Col c b u) by (forward_using lemma_collinearorder).
assert (Col c b v) by (forward_using lemma_collinearorder).
assert (neq b c) by (conclude lemma_ray2).
assert (neq c b) by (conclude lemma_inequalitysymmetric).
assert (Col b u v) by (conclude lemma_collinear4).
assert (Cong u v U V) by (conclude lemma_congruencesymmetric).
assert (Col B U V) by (conclude lemma_collinearitypreserved).
assert (Col B U A) by (forward_using lemma_collinearorder).
assert (neq B U) by (conclude lemma_raystrict).

*****
H27 : neq B U
H26 : Col B U A
H25 : Col B U V
H24 : Cong u v U V
H23 : Col b u v
H22 : neq c b
H21 : neq b c
H20 : Col c b v
H19 : Col c b u
H18 : Col b u c
H17 : Col a b c
H16 : Col a b u
H15 : Col b c v
H14 : Col b a u
H13 : Col B C V
H12 : Col B A U
H11 : Cong b v B V
H10 : Cong b u B U
H9 : neq a b
H8 : neq b a
H7 : nCol A B C
H6 : Cong U V u v
H5 : Cong B V b v
H4 : Cong B U b u
H3 : Out b c v
H2 : Out b a u
H1 : Out B C V
H0 : Out B A U
U,V,u,v : Point
H : CongA A B C a b c
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col U V A) by (conclude lemma_collinear4).
-----
Lemma lemma_equalanglesNC : forall A B C a b c, CongA A B C a b c -> nCol a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists U V u v, (Out B A U /\\ Out B C V /\\ Out b a u /\\ Out b c v /\\ Cong B U b u /\\ Cong B V b v /\\ Cong U V u v /\\ nCol A B C)) by (conclude_def CongA );destruct Tf as [U[V[u[v]]]];spliter.
assert (neq b a) by (conclude lemma_ray2).
assert (neq a b) by (conclude lemma_inequalitysymmetric).
assert (Cong b u B U) by (conclude lemma_congruencesymmetric).
assert (Cong b v B V) by (conclude lemma_congruencesymmetric).
assert (Col B A U) by (conclude lemma_rayimpliescollinear).
assert (Col B C V) by (conclude lemma_rayimpliescollinear).
assert (Col b a u) by (conclude lemma_rayimpliescollinear).
assert (Col b c v) by (conclude lemma_rayimpliescollinear).
assert (Col a b u) by (forward_using lemma_collinearorder).
assert (~ Col a b c).
intro.
assert (Col b u c) by (conclude lemma_collinear4).
assert (Col c b u) by (forward_using lemma_collinearorder).
assert (Col c b v) by (forward_using lemma_collinearorder).
assert (neq b c) by (conclude lemma_ray2).
assert (neq c b) by (conclude lemma_inequalitysymmetric).
assert (Col b u v) by (conclude lemma_collinear4).
assert (Cong u v U V) by (conclude lemma_congruencesymmetric).
assert (Col B U V) by (conclude lemma_collinearitypreserved).
assert (Col B U A) by (forward_using lemma_collinearorder).
assert (neq B U) by (conclude lemma_raystrict).
assert (Col U V A) by (conclude lemma_collinear4).

*****
H28 : Col U V A
H27 : neq B U
H26 : Col B U A
H25 : Col B U V
H24 : Cong u v U V
H23 : Col b u v
H22 : neq c b
H21 : neq b c
H20 : Col c b v
H19 : Col c b u
H18 : Col b u c
H17 : Col a b c
H16 : Col a b u
H15 : Col b c v
H14 : Col b a u
H13 : Col B C V
H12 : Col B A U
H11 : Cong b v B V
H10 : Cong b u B U
H9 : neq a b
H8 : neq b a
H7 : nCol A B C
H6 : Cong U V u v
H5 : Cong B V b v
H4 : Cong B U b u
H3 : Out b c v
H2 : Out b a u
H1 : Out B C V
H0 : Out B A U
U,V,u,v : Point
H : CongA A B C a b c
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col U V B) by (forward_using lemma_collinearorder).
-----
Lemma lemma_equalanglesNC : forall A B C a b c, CongA A B C a b c -> nCol a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists U V u v, (Out B A U /\\ Out B C V /\\ Out b a u /\\ Out b c v /\\ Cong B U b u /\\ Cong B V b v /\\ Cong U V u v /\\ nCol A B C)) by (conclude_def CongA );destruct Tf as [U[V[u[v]]]];spliter.
assert (neq b a) by (conclude lemma_ray2).
assert (neq a b) by (conclude lemma_inequalitysymmetric).
assert (Cong b u B U) by (conclude lemma_congruencesymmetric).
assert (Cong b v B V) by (conclude lemma_congruencesymmetric).
assert (Col B A U) by (conclude lemma_rayimpliescollinear).
assert (Col B C V) by (conclude lemma_rayimpliescollinear).
assert (Col b a u) by (conclude lemma_rayimpliescollinear).
assert (Col b c v) by (conclude lemma_rayimpliescollinear).
assert (Col a b u) by (forward_using lemma_collinearorder).
assert (~ Col a b c).
intro.
assert (Col b u c) by (conclude lemma_collinear4).
assert (Col c b u) by (forward_using lemma_collinearorder).
assert (Col c b v) by (forward_using lemma_collinearorder).
assert (neq b c) by (conclude lemma_ray2).
assert (neq c b) by (conclude lemma_inequalitysymmetric).
assert (Col b u v) by (conclude lemma_collinear4).
assert (Cong u v U V) by (conclude lemma_congruencesymmetric).
assert (Col B U V) by (conclude lemma_collinearitypreserved).
assert (Col B U A) by (forward_using lemma_collinearorder).
assert (neq B U) by (conclude lemma_raystrict).
assert (Col U V A) by (conclude lemma_collinear4).
assert (Col U V B) by (forward_using lemma_collinearorder).

*****
H29 : Col U V B
H28 : Col U V A
H27 : neq B U
H26 : Col B U A
H25 : Col B U V
H24 : Cong u v U V
H23 : Col b u v
H22 : neq c b
H21 : neq b c
H20 : Col c b v
H19 : Col c b u
H18 : Col b u c
H17 : Col a b c
H16 : Col a b u
H15 : Col b c v
H14 : Col b a u
H13 : Col B C V
H12 : Col B A U
H11 : Cong b v B V
H10 : Cong b u B U
H9 : neq a b
H8 : neq b a
H7 : nCol A B C
H6 : Cong U V u v
H5 : Cong B V b v
H4 : Cong B U b u
H3 : Out b c v
H2 : Out b a u
H1 : Out B C V
H0 : Out B A U
U,V,u,v : Point
H : CongA A B C a b c
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col V A B).
-----
Lemma lemma_equalanglesNC : forall A B C a b c, CongA A B C a b c -> nCol a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists U V u v, (Out B A U /\\ Out B C V /\\ Out b a u /\\ Out b c v /\\ Cong B U b u /\\ Cong B V b v /\\ Cong U V u v /\\ nCol A B C)) by (conclude_def CongA );destruct Tf as [U[V[u[v]]]];spliter.
assert (neq b a) by (conclude lemma_ray2).
assert (neq a b) by (conclude lemma_inequalitysymmetric).
assert (Cong b u B U) by (conclude lemma_congruencesymmetric).
assert (Cong b v B V) by (conclude lemma_congruencesymmetric).
assert (Col B A U) by (conclude lemma_rayimpliescollinear).
assert (Col B C V) by (conclude lemma_rayimpliescollinear).
assert (Col b a u) by (conclude lemma_rayimpliescollinear).
assert (Col b c v) by (conclude lemma_rayimpliescollinear).
assert (Col a b u) by (forward_using lemma_collinearorder).
assert (~ Col a b c).
intro.
assert (Col b u c) by (conclude lemma_collinear4).
assert (Col c b u) by (forward_using lemma_collinearorder).
assert (Col c b v) by (forward_using lemma_collinearorder).
assert (neq b c) by (conclude lemma_ray2).
assert (neq c b) by (conclude lemma_inequalitysymmetric).
assert (Col b u v) by (conclude lemma_collinear4).
assert (Cong u v U V) by (conclude lemma_congruencesymmetric).
assert (Col B U V) by (conclude lemma_collinearitypreserved).
assert (Col B U A) by (forward_using lemma_collinearorder).
assert (neq B U) by (conclude lemma_raystrict).
assert (Col U V A) by (conclude lemma_collinear4).
assert (Col U V B) by (forward_using lemma_collinearorder).
assert (Col V A B).

*****
H29 : Col U V B
H28 : Col U V A
H27 : neq B U
H26 : Col B U A
H25 : Col B U V
H24 : Cong u v U V
H23 : Col b u v
H22 : neq c b
H21 : neq b c
H20 : Col c b v
H19 : Col c b u
H18 : Col b u c
H17 : Col a b c
H16 : Col a b u
H15 : Col b c v
H14 : Col b a u
H13 : Col B C V
H12 : Col B A U
H11 : Cong b v B V
H10 : Cong b u B U
H9 : neq a b
H8 : neq b a
H7 : nCol A B C
H6 : Cong U V u v
H5 : Cong B V b v
H4 : Cong B U b u
H3 : Out b c v
H2 : Out b a u
H1 : Out B C V
H0 : Out B A U
U,V,u,v : Point
H : CongA A B C a b c
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Col V A B
+++++
by cases on (eq U V \/ neq U V).
-----
Lemma lemma_equalanglesNC : forall A B C a b c, CongA A B C a b c -> nCol a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists U V u v, (Out B A U /\\ Out B C V /\\ Out b a u /\\ Out b c v /\\ Cong B U b u /\\ Cong B V b v /\\ Cong U V u v /\\ nCol A B C)) by (conclude_def CongA );destruct Tf as [U[V[u[v]]]];spliter.
assert (neq b a) by (conclude lemma_ray2).
assert (neq a b) by (conclude lemma_inequalitysymmetric).
assert (Cong b u B U) by (conclude lemma_congruencesymmetric).
assert (Cong b v B V) by (conclude lemma_congruencesymmetric).
assert (Col B A U) by (conclude lemma_rayimpliescollinear).
assert (Col B C V) by (conclude lemma_rayimpliescollinear).
assert (Col b a u) by (conclude lemma_rayimpliescollinear).
assert (Col b c v) by (conclude lemma_rayimpliescollinear).
assert (Col a b u) by (forward_using lemma_collinearorder).
assert (~ Col a b c).
intro.
assert (Col b u c) by (conclude lemma_collinear4).
assert (Col c b u) by (forward_using lemma_collinearorder).
assert (Col c b v) by (forward_using lemma_collinearorder).
assert (neq b c) by (conclude lemma_ray2).
assert (neq c b) by (conclude lemma_inequalitysymmetric).
assert (Col b u v) by (conclude lemma_collinear4).
assert (Cong u v U V) by (conclude lemma_congruencesymmetric).
assert (Col B U V) by (conclude lemma_collinearitypreserved).
assert (Col B U A) by (forward_using lemma_collinearorder).
assert (neq B U) by (conclude lemma_raystrict).
assert (Col U V A) by (conclude lemma_collinear4).
assert (Col U V B) by (forward_using lemma_collinearorder).
assert (Col V A B).
by cases on (eq U V \\/ neq U V).

*****
H31 : eq U V
H29 : Col U V B
H28 : Col U V A
H27 : neq B U
H26 : Col B U A
H25 : Col B U V
H24 : Cong u v U V
H23 : Col b u v
H22 : neq c b
H21 : neq b c
H20 : Col c b v
H19 : Col c b u
H18 : Col b u c
H17 : Col a b c
H16 : Col a b u
H15 : Col b c v
H14 : Col b a u
H13 : Col B C V
H12 : Col B A U
H11 : Cong b v B V
H10 : Cong b u B U
H9 : neq a b
H8 : neq b a
H7 : nCol A B C
H6 : Cong U V u v
H5 : Cong B V b v
H4 : Cong B U b u
H3 : Out b c v
H2 : Out b a u
H1 : Out B C V
H0 : Out B A U
U,V,u,v : Point
H : CongA A B C a b c
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Col V A B
+++++
assert (Col B A V) by (conclude cn_equalitysub).
-----
Lemma lemma_equalanglesNC : forall A B C a b c, CongA A B C a b c -> nCol a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists U V u v, (Out B A U /\\ Out B C V /\\ Out b a u /\\ Out b c v /\\ Cong B U b u /\\ Cong B V b v /\\ Cong U V u v /\\ nCol A B C)) by (conclude_def CongA );destruct Tf as [U[V[u[v]]]];spliter.
assert (neq b a) by (conclude lemma_ray2).
assert (neq a b) by (conclude lemma_inequalitysymmetric).
assert (Cong b u B U) by (conclude lemma_congruencesymmetric).
assert (Cong b v B V) by (conclude lemma_congruencesymmetric).
assert (Col B A U) by (conclude lemma_rayimpliescollinear).
assert (Col B C V) by (conclude lemma_rayimpliescollinear).
assert (Col b a u) by (conclude lemma_rayimpliescollinear).
assert (Col b c v) by (conclude lemma_rayimpliescollinear).
assert (Col a b u) by (forward_using lemma_collinearorder).
assert (~ Col a b c).
intro.
assert (Col b u c) by (conclude lemma_collinear4).
assert (Col c b u) by (forward_using lemma_collinearorder).
assert (Col c b v) by (forward_using lemma_collinearorder).
assert (neq b c) by (conclude lemma_ray2).
assert (neq c b) by (conclude lemma_inequalitysymmetric).
assert (Col b u v) by (conclude lemma_collinear4).
assert (Cong u v U V) by (conclude lemma_congruencesymmetric).
assert (Col B U V) by (conclude lemma_collinearitypreserved).
assert (Col B U A) by (forward_using lemma_collinearorder).
assert (neq B U) by (conclude lemma_raystrict).
assert (Col U V A) by (conclude lemma_collinear4).
assert (Col U V B) by (forward_using lemma_collinearorder).
assert (Col V A B).
by cases on (eq U V \\/ neq U V).
assert (Col B A V) by (conclude cn_equalitysub).

*****
H30 : Col B A V
H31 : eq U V
H29 : Col U V B
H28 : Col U V A
H27 : neq B U
H26 : Col B U A
H25 : Col B U V
H24 : Cong u v U V
H23 : Col b u v
H22 : neq c b
H21 : neq b c
H20 : Col c b v
H19 : Col c b u
H18 : Col b u c
H17 : Col a b c
H16 : Col a b u
H15 : Col b c v
H14 : Col b a u
H13 : Col B C V
H12 : Col B A U
H11 : Cong b v B V
H10 : Cong b u B U
H9 : neq a b
H8 : neq b a
H7 : nCol A B C
H6 : Cong U V u v
H5 : Cong B V b v
H4 : Cong B U b u
H3 : Out b c v
H2 : Out b a u
H1 : Out B C V
H0 : Out B A U
U,V,u,v : Point
H : CongA A B C a b c
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Col V A B
+++++
assert (Col V A B) by (forward_using lemma_collinearorder).
-----
Lemma lemma_equalanglesNC : forall A B C a b c, CongA A B C a b c -> nCol a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists U V u v, (Out B A U /\\ Out B C V /\\ Out b a u /\\ Out b c v /\\ Cong B U b u /\\ Cong B V b v /\\ Cong U V u v /\\ nCol A B C)) by (conclude_def CongA );destruct Tf as [U[V[u[v]]]];spliter.
assert (neq b a) by (conclude lemma_ray2).
assert (neq a b) by (conclude lemma_inequalitysymmetric).
assert (Cong b u B U) by (conclude lemma_congruencesymmetric).
assert (Cong b v B V) by (conclude lemma_congruencesymmetric).
assert (Col B A U) by (conclude lemma_rayimpliescollinear).
assert (Col B C V) by (conclude lemma_rayimpliescollinear).
assert (Col b a u) by (conclude lemma_rayimpliescollinear).
assert (Col b c v) by (conclude lemma_rayimpliescollinear).
assert (Col a b u) by (forward_using lemma_collinearorder).
assert (~ Col a b c).
intro.
assert (Col b u c) by (conclude lemma_collinear4).
assert (Col c b u) by (forward_using lemma_collinearorder).
assert (Col c b v) by (forward_using lemma_collinearorder).
assert (neq b c) by (conclude lemma_ray2).
assert (neq c b) by (conclude lemma_inequalitysymmetric).
assert (Col b u v) by (conclude lemma_collinear4).
assert (Cong u v U V) by (conclude lemma_congruencesymmetric).
assert (Col B U V) by (conclude lemma_collinearitypreserved).
assert (Col B U A) by (forward_using lemma_collinearorder).
assert (neq B U) by (conclude lemma_raystrict).
assert (Col U V A) by (conclude lemma_collinear4).
assert (Col U V B) by (forward_using lemma_collinearorder).
assert (Col V A B).
by cases on (eq U V \\/ neq U V).
assert (Col B A V) by (conclude cn_equalitysub).
assert (Col V A B) by (forward_using lemma_collinearorder).

*****
H32 : Col V A B
H30 : Col B A V
H31 : eq U V
H29 : Col U V B
H28 : Col U V A
H27 : neq B U
H26 : Col B U A
H25 : Col B U V
H24 : Cong u v U V
H23 : Col b u v
H22 : neq c b
H21 : neq b c
H20 : Col c b v
H19 : Col c b u
H18 : Col b u c
H17 : Col a b c
H16 : Col a b u
H15 : Col b c v
H14 : Col b a u
H13 : Col B C V
H12 : Col B A U
H11 : Cong b v B V
H10 : Cong b u B U
H9 : neq a b
H8 : neq b a
H7 : nCol A B C
H6 : Cong U V u v
H5 : Cong B V b v
H4 : Cong B U b u
H3 : Out b c v
H2 : Out b a u
H1 : Out B C V
H0 : Out B A U
U,V,u,v : Point
H : CongA A B C a b c
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Col V A B
+++++
close.
-----
Lemma lemma_equalanglesNC : forall A B C a b c, CongA A B C a b c -> nCol a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists U V u v, (Out B A U /\\ Out B C V /\\ Out b a u /\\ Out b c v /\\ Cong B U b u /\\ Cong B V b v /\\ Cong U V u v /\\ nCol A B C)) by (conclude_def CongA );destruct Tf as [U[V[u[v]]]];spliter.
assert (neq b a) by (conclude lemma_ray2).
assert (neq a b) by (conclude lemma_inequalitysymmetric).
assert (Cong b u B U) by (conclude lemma_congruencesymmetric).
assert (Cong b v B V) by (conclude lemma_congruencesymmetric).
assert (Col B A U) by (conclude lemma_rayimpliescollinear).
assert (Col B C V) by (conclude lemma_rayimpliescollinear).
assert (Col b a u) by (conclude lemma_rayimpliescollinear).
assert (Col b c v) by (conclude lemma_rayimpliescollinear).
assert (Col a b u) by (forward_using lemma_collinearorder).
assert (~ Col a b c).
intro.
assert (Col b u c) by (conclude lemma_collinear4).
assert (Col c b u) by (forward_using lemma_collinearorder).
assert (Col c b v) by (forward_using lemma_collinearorder).
assert (neq b c) by (conclude lemma_ray2).
assert (neq c b) by (conclude lemma_inequalitysymmetric).
assert (Col b u v) by (conclude lemma_collinear4).
assert (Cong u v U V) by (conclude lemma_congruencesymmetric).
assert (Col B U V) by (conclude lemma_collinearitypreserved).
assert (Col B U A) by (forward_using lemma_collinearorder).
assert (neq B U) by (conclude lemma_raystrict).
assert (Col U V A) by (conclude lemma_collinear4).
assert (Col U V B) by (forward_using lemma_collinearorder).
assert (Col V A B).
by cases on (eq U V \\/ neq U V).

*****
H31 : neq U V
H29 : Col U V B
H28 : Col U V A
H27 : neq B U
H26 : Col B U A
H25 : Col B U V
H24 : Cong u v U V
H23 : Col b u v
H22 : neq c b
H21 : neq b c
H20 : Col c b v
H19 : Col c b u
H18 : Col b u c
H17 : Col a b c
H16 : Col a b u
H15 : Col b c v
H14 : Col b a u
H13 : Col B C V
H12 : Col B A U
H11 : Cong b v B V
H10 : Cong b u B U
H9 : neq a b
H8 : neq b a
H7 : nCol A B C
H6 : Cong U V u v
H5 : Cong B V b v
H4 : Cong B U b u
H3 : Out b c v
H2 : Out b a u
H1 : Out B C V
H0 : Out B A U
U,V,u,v : Point
H : CongA A B C a b c
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Col V A B
+++++
assert (Col V A B) by (conclude lemma_collinear4).
-----
Lemma lemma_equalanglesNC : forall A B C a b c, CongA A B C a b c -> nCol a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists U V u v, (Out B A U /\\ Out B C V /\\ Out b a u /\\ Out b c v /\\ Cong B U b u /\\ Cong B V b v /\\ Cong U V u v /\\ nCol A B C)) by (conclude_def CongA );destruct Tf as [U[V[u[v]]]];spliter.
assert (neq b a) by (conclude lemma_ray2).
assert (neq a b) by (conclude lemma_inequalitysymmetric).
assert (Cong b u B U) by (conclude lemma_congruencesymmetric).
assert (Cong b v B V) by (conclude lemma_congruencesymmetric).
assert (Col B A U) by (conclude lemma_rayimpliescollinear).
assert (Col B C V) by (conclude lemma_rayimpliescollinear).
assert (Col b a u) by (conclude lemma_rayimpliescollinear).
assert (Col b c v) by (conclude lemma_rayimpliescollinear).
assert (Col a b u) by (forward_using lemma_collinearorder).
assert (~ Col a b c).
intro.
assert (Col b u c) by (conclude lemma_collinear4).
assert (Col c b u) by (forward_using lemma_collinearorder).
assert (Col c b v) by (forward_using lemma_collinearorder).
assert (neq b c) by (conclude lemma_ray2).
assert (neq c b) by (conclude lemma_inequalitysymmetric).
assert (Col b u v) by (conclude lemma_collinear4).
assert (Cong u v U V) by (conclude lemma_congruencesymmetric).
assert (Col B U V) by (conclude lemma_collinearitypreserved).
assert (Col B U A) by (forward_using lemma_collinearorder).
assert (neq B U) by (conclude lemma_raystrict).
assert (Col U V A) by (conclude lemma_collinear4).
assert (Col U V B) by (forward_using lemma_collinearorder).
assert (Col V A B).
by cases on (eq U V \\/ neq U V).
assert (Col V A B) by (conclude lemma_collinear4).

*****
H30 : Col V A B
H31 : neq U V
H29 : Col U V B
H28 : Col U V A
H27 : neq B U
H26 : Col B U A
H25 : Col B U V
H24 : Cong u v U V
H23 : Col b u v
H22 : neq c b
H21 : neq b c
H20 : Col c b v
H19 : Col c b u
H18 : Col b u c
H17 : Col a b c
H16 : Col a b u
H15 : Col b c v
H14 : Col b a u
H13 : Col B C V
H12 : Col B A U
H11 : Cong b v B V
H10 : Cong b u B U
H9 : neq a b
H8 : neq b a
H7 : nCol A B C
H6 : Cong U V u v
H5 : Cong B V b v
H4 : Cong B U b u
H3 : Out b c v
H2 : Out b a u
H1 : Out B C V
H0 : Out B A U
U,V,u,v : Point
H : CongA A B C a b c
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Col V A B
+++++
close.
-----
Lemma lemma_equalanglesNC : forall A B C a b c, CongA A B C a b c -> nCol a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists U V u v, (Out B A U /\\ Out B C V /\\ Out b a u /\\ Out b c v /\\ Cong B U b u /\\ Cong B V b v /\\ Cong U V u v /\\ nCol A B C)) by (conclude_def CongA );destruct Tf as [U[V[u[v]]]];spliter.
assert (neq b a) by (conclude lemma_ray2).
assert (neq a b) by (conclude lemma_inequalitysymmetric).
assert (Cong b u B U) by (conclude lemma_congruencesymmetric).
assert (Cong b v B V) by (conclude lemma_congruencesymmetric).
assert (Col B A U) by (conclude lemma_rayimpliescollinear).
assert (Col B C V) by (conclude lemma_rayimpliescollinear).
assert (Col b a u) by (conclude lemma_rayimpliescollinear).
assert (Col b c v) by (conclude lemma_rayimpliescollinear).
assert (Col a b u) by (forward_using lemma_collinearorder).
assert (~ Col a b c).
intro.
assert (Col b u c) by (conclude lemma_collinear4).
assert (Col c b u) by (forward_using lemma_collinearorder).
assert (Col c b v) by (forward_using lemma_collinearorder).
assert (neq b c) by (conclude lemma_ray2).
assert (neq c b) by (conclude lemma_inequalitysymmetric).
assert (Col b u v) by (conclude lemma_collinear4).
assert (Cong u v U V) by (conclude lemma_congruencesymmetric).
assert (Col B U V) by (conclude lemma_collinearitypreserved).
assert (Col B U A) by (forward_using lemma_collinearorder).
assert (neq B U) by (conclude lemma_raystrict).
assert (Col U V A) by (conclude lemma_collinear4).
assert (Col U V B) by (forward_using lemma_collinearorder).
assert (Col V A B).
by cases on (eq U V \\/ neq U V).

*****
H30 : Col V A B
H29 : Col U V B
H28 : Col U V A
H27 : neq B U
H26 : Col B U A
H25 : Col B U V
H24 : Cong u v U V
H23 : Col b u v
H22 : neq c b
H21 : neq b c
H20 : Col c b v
H19 : Col c b u
H18 : Col b u c
H17 : Col a b c
H16 : Col a b u
H15 : Col b c v
H14 : Col b a u
H13 : Col B C V
H12 : Col B A U
H11 : Cong b v B V
H10 : Cong b u B U
H9 : neq a b
H8 : neq b a
H7 : nCol A B C
H6 : Cong U V u v
H5 : Cong B V b v
H4 : Cong B U b u
H3 : Out b c v
H2 : Out b a u
H1 : Out B C V
H0 : Out B A U
U,V,u,v : Point
H : CongA A B C a b c
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col V B A) by (forward_using lemma_collinearorder).
-----
Lemma lemma_equalanglesNC : forall A B C a b c, CongA A B C a b c -> nCol a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists U V u v, (Out B A U /\\ Out B C V /\\ Out b a u /\\ Out b c v /\\ Cong B U b u /\\ Cong B V b v /\\ Cong U V u v /\\ nCol A B C)) by (conclude_def CongA );destruct Tf as [U[V[u[v]]]];spliter.
assert (neq b a) by (conclude lemma_ray2).
assert (neq a b) by (conclude lemma_inequalitysymmetric).
assert (Cong b u B U) by (conclude lemma_congruencesymmetric).
assert (Cong b v B V) by (conclude lemma_congruencesymmetric).
assert (Col B A U) by (conclude lemma_rayimpliescollinear).
assert (Col B C V) by (conclude lemma_rayimpliescollinear).
assert (Col b a u) by (conclude lemma_rayimpliescollinear).
assert (Col b c v) by (conclude lemma_rayimpliescollinear).
assert (Col a b u) by (forward_using lemma_collinearorder).
assert (~ Col a b c).
intro.
assert (Col b u c) by (conclude lemma_collinear4).
assert (Col c b u) by (forward_using lemma_collinearorder).
assert (Col c b v) by (forward_using lemma_collinearorder).
assert (neq b c) by (conclude lemma_ray2).
assert (neq c b) by (conclude lemma_inequalitysymmetric).
assert (Col b u v) by (conclude lemma_collinear4).
assert (Cong u v U V) by (conclude lemma_congruencesymmetric).
assert (Col B U V) by (conclude lemma_collinearitypreserved).
assert (Col B U A) by (forward_using lemma_collinearorder).
assert (neq B U) by (conclude lemma_raystrict).
assert (Col U V A) by (conclude lemma_collinear4).
assert (Col U V B) by (forward_using lemma_collinearorder).
assert (Col V A B).
by cases on (eq U V \\/ neq U V).
assert (Col V B A) by (forward_using lemma_collinearorder).

*****
H31 : Col V B A
H30 : Col V A B
H29 : Col U V B
H28 : Col U V A
H27 : neq B U
H26 : Col B U A
H25 : Col B U V
H24 : Cong u v U V
H23 : Col b u v
H22 : neq c b
H21 : neq b c
H20 : Col c b v
H19 : Col c b u
H18 : Col b u c
H17 : Col a b c
H16 : Col a b u
H15 : Col b c v
H14 : Col b a u
H13 : Col B C V
H12 : Col B A U
H11 : Cong b v B V
H10 : Cong b u B U
H9 : neq a b
H8 : neq b a
H7 : nCol A B C
H6 : Cong U V u v
H5 : Cong B V b v
H4 : Cong B U b u
H3 : Out b c v
H2 : Out b a u
H1 : Out B C V
H0 : Out B A U
U,V,u,v : Point
H : CongA A B C a b c
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col V B C) by (forward_using lemma_collinearorder).
-----
Lemma lemma_equalanglesNC : forall A B C a b c, CongA A B C a b c -> nCol a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists U V u v, (Out B A U /\\ Out B C V /\\ Out b a u /\\ Out b c v /\\ Cong B U b u /\\ Cong B V b v /\\ Cong U V u v /\\ nCol A B C)) by (conclude_def CongA );destruct Tf as [U[V[u[v]]]];spliter.
assert (neq b a) by (conclude lemma_ray2).
assert (neq a b) by (conclude lemma_inequalitysymmetric).
assert (Cong b u B U) by (conclude lemma_congruencesymmetric).
assert (Cong b v B V) by (conclude lemma_congruencesymmetric).
assert (Col B A U) by (conclude lemma_rayimpliescollinear).
assert (Col B C V) by (conclude lemma_rayimpliescollinear).
assert (Col b a u) by (conclude lemma_rayimpliescollinear).
assert (Col b c v) by (conclude lemma_rayimpliescollinear).
assert (Col a b u) by (forward_using lemma_collinearorder).
assert (~ Col a b c).
intro.
assert (Col b u c) by (conclude lemma_collinear4).
assert (Col c b u) by (forward_using lemma_collinearorder).
assert (Col c b v) by (forward_using lemma_collinearorder).
assert (neq b c) by (conclude lemma_ray2).
assert (neq c b) by (conclude lemma_inequalitysymmetric).
assert (Col b u v) by (conclude lemma_collinear4).
assert (Cong u v U V) by (conclude lemma_congruencesymmetric).
assert (Col B U V) by (conclude lemma_collinearitypreserved).
assert (Col B U A) by (forward_using lemma_collinearorder).
assert (neq B U) by (conclude lemma_raystrict).
assert (Col U V A) by (conclude lemma_collinear4).
assert (Col U V B) by (forward_using lemma_collinearorder).
assert (Col V A B).
by cases on (eq U V \\/ neq U V).
assert (Col V B A) by (forward_using lemma_collinearorder).
assert (Col V B C) by (forward_using lemma_collinearorder).

*****
H32 : Col V B C
H31 : Col V B A
H30 : Col V A B
H29 : Col U V B
H28 : Col U V A
H27 : neq B U
H26 : Col B U A
H25 : Col B U V
H24 : Cong u v U V
H23 : Col b u v
H22 : neq c b
H21 : neq b c
H20 : Col c b v
H19 : Col c b u
H18 : Col b u c
H17 : Col a b c
H16 : Col a b u
H15 : Col b c v
H14 : Col b a u
H13 : Col B C V
H12 : Col B A U
H11 : Cong b v B V
H10 : Cong b u B U
H9 : neq a b
H8 : neq b a
H7 : nCol A B C
H6 : Cong U V u v
H5 : Cong B V b v
H4 : Cong B U b u
H3 : Out b c v
H2 : Out b a u
H1 : Out B C V
H0 : Out B A U
U,V,u,v : Point
H : CongA A B C a b c
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (neq B V) by (conclude lemma_raystrict).
-----
Lemma lemma_equalanglesNC : forall A B C a b c, CongA A B C a b c -> nCol a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists U V u v, (Out B A U /\\ Out B C V /\\ Out b a u /\\ Out b c v /\\ Cong B U b u /\\ Cong B V b v /\\ Cong U V u v /\\ nCol A B C)) by (conclude_def CongA );destruct Tf as [U[V[u[v]]]];spliter.
assert (neq b a) by (conclude lemma_ray2).
assert (neq a b) by (conclude lemma_inequalitysymmetric).
assert (Cong b u B U) by (conclude lemma_congruencesymmetric).
assert (Cong b v B V) by (conclude lemma_congruencesymmetric).
assert (Col B A U) by (conclude lemma_rayimpliescollinear).
assert (Col B C V) by (conclude lemma_rayimpliescollinear).
assert (Col b a u) by (conclude lemma_rayimpliescollinear).
assert (Col b c v) by (conclude lemma_rayimpliescollinear).
assert (Col a b u) by (forward_using lemma_collinearorder).
assert (~ Col a b c).
intro.
assert (Col b u c) by (conclude lemma_collinear4).
assert (Col c b u) by (forward_using lemma_collinearorder).
assert (Col c b v) by (forward_using lemma_collinearorder).
assert (neq b c) by (conclude lemma_ray2).
assert (neq c b) by (conclude lemma_inequalitysymmetric).
assert (Col b u v) by (conclude lemma_collinear4).
assert (Cong u v U V) by (conclude lemma_congruencesymmetric).
assert (Col B U V) by (conclude lemma_collinearitypreserved).
assert (Col B U A) by (forward_using lemma_collinearorder).
assert (neq B U) by (conclude lemma_raystrict).
assert (Col U V A) by (conclude lemma_collinear4).
assert (Col U V B) by (forward_using lemma_collinearorder).
assert (Col V A B).
by cases on (eq U V \\/ neq U V).
assert (Col V B A) by (forward_using lemma_collinearorder).
assert (Col V B C) by (forward_using lemma_collinearorder).
assert (neq B V) by (conclude lemma_raystrict).

*****
H33 : neq B V
H32 : Col V B C
H31 : Col V B A
H30 : Col V A B
H29 : Col U V B
H28 : Col U V A
H27 : neq B U
H26 : Col B U A
H25 : Col B U V
H24 : Cong u v U V
H23 : Col b u v
H22 : neq c b
H21 : neq b c
H20 : Col c b v
H19 : Col c b u
H18 : Col b u c
H17 : Col a b c
H16 : Col a b u
H15 : Col b c v
H14 : Col b a u
H13 : Col B C V
H12 : Col B A U
H11 : Cong b v B V
H10 : Cong b u B U
H9 : neq a b
H8 : neq b a
H7 : nCol A B C
H6 : Cong U V u v
H5 : Cong B V b v
H4 : Cong B U b u
H3 : Out b c v
H2 : Out b a u
H1 : Out B C V
H0 : Out B A U
U,V,u,v : Point
H : CongA A B C a b c
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (neq V B) by (conclude lemma_inequalitysymmetric).
-----
Lemma lemma_equalanglesNC : forall A B C a b c, CongA A B C a b c -> nCol a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists U V u v, (Out B A U /\\ Out B C V /\\ Out b a u /\\ Out b c v /\\ Cong B U b u /\\ Cong B V b v /\\ Cong U V u v /\\ nCol A B C)) by (conclude_def CongA );destruct Tf as [U[V[u[v]]]];spliter.
assert (neq b a) by (conclude lemma_ray2).
assert (neq a b) by (conclude lemma_inequalitysymmetric).
assert (Cong b u B U) by (conclude lemma_congruencesymmetric).
assert (Cong b v B V) by (conclude lemma_congruencesymmetric).
assert (Col B A U) by (conclude lemma_rayimpliescollinear).
assert (Col B C V) by (conclude lemma_rayimpliescollinear).
assert (Col b a u) by (conclude lemma_rayimpliescollinear).
assert (Col b c v) by (conclude lemma_rayimpliescollinear).
assert (Col a b u) by (forward_using lemma_collinearorder).
assert (~ Col a b c).
intro.
assert (Col b u c) by (conclude lemma_collinear4).
assert (Col c b u) by (forward_using lemma_collinearorder).
assert (Col c b v) by (forward_using lemma_collinearorder).
assert (neq b c) by (conclude lemma_ray2).
assert (neq c b) by (conclude lemma_inequalitysymmetric).
assert (Col b u v) by (conclude lemma_collinear4).
assert (Cong u v U V) by (conclude lemma_congruencesymmetric).
assert (Col B U V) by (conclude lemma_collinearitypreserved).
assert (Col B U A) by (forward_using lemma_collinearorder).
assert (neq B U) by (conclude lemma_raystrict).
assert (Col U V A) by (conclude lemma_collinear4).
assert (Col U V B) by (forward_using lemma_collinearorder).
assert (Col V A B).
by cases on (eq U V \\/ neq U V).
assert (Col V B A) by (forward_using lemma_collinearorder).
assert (Col V B C) by (forward_using lemma_collinearorder).
assert (neq B V) by (conclude lemma_raystrict).
assert (neq V B) by (conclude lemma_inequalitysymmetric).

*****
H34 : neq V B
H33 : neq B V
H32 : Col V B C
H31 : Col V B A
H30 : Col V A B
H29 : Col U V B
H28 : Col U V A
H27 : neq B U
H26 : Col B U A
H25 : Col B U V
H24 : Cong u v U V
H23 : Col b u v
H22 : neq c b
H21 : neq b c
H20 : Col c b v
H19 : Col c b u
H18 : Col b u c
H17 : Col a b c
H16 : Col a b u
H15 : Col b c v
H14 : Col b a u
H13 : Col B C V
H12 : Col B A U
H11 : Cong b v B V
H10 : Cong b u B U
H9 : neq a b
H8 : neq b a
H7 : nCol A B C
H6 : Cong U V u v
H5 : Cong B V b v
H4 : Cong B U b u
H3 : Out b c v
H2 : Out b a u
H1 : Out B C V
H0 : Out B A U
U,V,u,v : Point
H : CongA A B C a b c
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col B A C) by (conclude lemma_collinear4).
-----
Lemma lemma_equalanglesNC : forall A B C a b c, CongA A B C a b c -> nCol a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists U V u v, (Out B A U /\\ Out B C V /\\ Out b a u /\\ Out b c v /\\ Cong B U b u /\\ Cong B V b v /\\ Cong U V u v /\\ nCol A B C)) by (conclude_def CongA );destruct Tf as [U[V[u[v]]]];spliter.
assert (neq b a) by (conclude lemma_ray2).
assert (neq a b) by (conclude lemma_inequalitysymmetric).
assert (Cong b u B U) by (conclude lemma_congruencesymmetric).
assert (Cong b v B V) by (conclude lemma_congruencesymmetric).
assert (Col B A U) by (conclude lemma_rayimpliescollinear).
assert (Col B C V) by (conclude lemma_rayimpliescollinear).
assert (Col b a u) by (conclude lemma_rayimpliescollinear).
assert (Col b c v) by (conclude lemma_rayimpliescollinear).
assert (Col a b u) by (forward_using lemma_collinearorder).
assert (~ Col a b c).
intro.
assert (Col b u c) by (conclude lemma_collinear4).
assert (Col c b u) by (forward_using lemma_collinearorder).
assert (Col c b v) by (forward_using lemma_collinearorder).
assert (neq b c) by (conclude lemma_ray2).
assert (neq c b) by (conclude lemma_inequalitysymmetric).
assert (Col b u v) by (conclude lemma_collinear4).
assert (Cong u v U V) by (conclude lemma_congruencesymmetric).
assert (Col B U V) by (conclude lemma_collinearitypreserved).
assert (Col B U A) by (forward_using lemma_collinearorder).
assert (neq B U) by (conclude lemma_raystrict).
assert (Col U V A) by (conclude lemma_collinear4).
assert (Col U V B) by (forward_using lemma_collinearorder).
assert (Col V A B).
by cases on (eq U V \\/ neq U V).
assert (Col V B A) by (forward_using lemma_collinearorder).
assert (Col V B C) by (forward_using lemma_collinearorder).
assert (neq B V) by (conclude lemma_raystrict).
assert (neq V B) by (conclude lemma_inequalitysymmetric).
assert (Col B A C) by (conclude lemma_collinear4).

*****
H35 : Col B A C
H34 : neq V B
H33 : neq B V
H32 : Col V B C
H31 : Col V B A
H30 : Col V A B
H29 : Col U V B
H28 : Col U V A
H27 : neq B U
H26 : Col B U A
H25 : Col B U V
H24 : Cong u v U V
H23 : Col b u v
H22 : neq c b
H21 : neq b c
H20 : Col c b v
H19 : Col c b u
H18 : Col b u c
H17 : Col a b c
H16 : Col a b u
H15 : Col b c v
H14 : Col b a u
H13 : Col B C V
H12 : Col B A U
H11 : Cong b v B V
H10 : Cong b u B U
H9 : neq a b
H8 : neq b a
H7 : nCol A B C
H6 : Cong U V u v
H5 : Cong B V b v
H4 : Cong B U b u
H3 : Out b c v
H2 : Out b a u
H1 : Out B C V
H0 : Out B A U
U,V,u,v : Point
H : CongA A B C a b c
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col A B C) by (forward_using lemma_collinearorder).
-----
Lemma lemma_equalanglesNC : forall A B C a b c, CongA A B C a b c -> nCol a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists U V u v, (Out B A U /\\ Out B C V /\\ Out b a u /\\ Out b c v /\\ Cong B U b u /\\ Cong B V b v /\\ Cong U V u v /\\ nCol A B C)) by (conclude_def CongA );destruct Tf as [U[V[u[v]]]];spliter.
assert (neq b a) by (conclude lemma_ray2).
assert (neq a b) by (conclude lemma_inequalitysymmetric).
assert (Cong b u B U) by (conclude lemma_congruencesymmetric).
assert (Cong b v B V) by (conclude lemma_congruencesymmetric).
assert (Col B A U) by (conclude lemma_rayimpliescollinear).
assert (Col B C V) by (conclude lemma_rayimpliescollinear).
assert (Col b a u) by (conclude lemma_rayimpliescollinear).
assert (Col b c v) by (conclude lemma_rayimpliescollinear).
assert (Col a b u) by (forward_using lemma_collinearorder).
assert (~ Col a b c).
intro.
assert (Col b u c) by (conclude lemma_collinear4).
assert (Col c b u) by (forward_using lemma_collinearorder).
assert (Col c b v) by (forward_using lemma_collinearorder).
assert (neq b c) by (conclude lemma_ray2).
assert (neq c b) by (conclude lemma_inequalitysymmetric).
assert (Col b u v) by (conclude lemma_collinear4).
assert (Cong u v U V) by (conclude lemma_congruencesymmetric).
assert (Col B U V) by (conclude lemma_collinearitypreserved).
assert (Col B U A) by (forward_using lemma_collinearorder).
assert (neq B U) by (conclude lemma_raystrict).
assert (Col U V A) by (conclude lemma_collinear4).
assert (Col U V B) by (forward_using lemma_collinearorder).
assert (Col V A B).
by cases on (eq U V \\/ neq U V).
assert (Col V B A) by (forward_using lemma_collinearorder).
assert (Col V B C) by (forward_using lemma_collinearorder).
assert (neq B V) by (conclude lemma_raystrict).
assert (neq V B) by (conclude lemma_inequalitysymmetric).
assert (Col B A C) by (conclude lemma_collinear4).
assert (Col A B C) by (forward_using lemma_collinearorder).

*****
H36 : Col A B C
H35 : Col B A C
H34 : neq V B
H33 : neq B V
H32 : Col V B C
H31 : Col V B A
H30 : Col V A B
H29 : Col U V B
H28 : Col U V A
H27 : neq B U
H26 : Col B U A
H25 : Col B U V
H24 : Cong u v U V
H23 : Col b u v
H22 : neq c b
H21 : neq b c
H20 : Col c b v
H19 : Col c b u
H18 : Col b u c
H17 : Col a b c
H16 : Col a b u
H15 : Col b c v
H14 : Col b a u
H13 : Col B C V
H12 : Col B A U
H11 : Cong b v B V
H10 : Cong b u B U
H9 : neq a b
H8 : neq b a
H7 : nCol A B C
H6 : Cong U V u v
H5 : Cong B V b v
H4 : Cong B U b u
H3 : Out b c v
H2 : Out b a u
H1 : Out B C V
H0 : Out B A U
U,V,u,v : Point
H : CongA A B C a b c
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma lemma_equalanglesNC : forall A B C a b c, CongA A B C a b c -> nCol a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists U V u v, (Out B A U /\\ Out B C V /\\ Out b a u /\\ Out b c v /\\ Cong B U b u /\\ Cong B V b v /\\ Cong U V u v /\\ nCol A B C)) by (conclude_def CongA );destruct Tf as [U[V[u[v]]]];spliter.
assert (neq b a) by (conclude lemma_ray2).
assert (neq a b) by (conclude lemma_inequalitysymmetric).
assert (Cong b u B U) by (conclude lemma_congruencesymmetric).
assert (Cong b v B V) by (conclude lemma_congruencesymmetric).
assert (Col B A U) by (conclude lemma_rayimpliescollinear).
assert (Col B C V) by (conclude lemma_rayimpliescollinear).
assert (Col b a u) by (conclude lemma_rayimpliescollinear).
assert (Col b c v) by (conclude lemma_rayimpliescollinear).
assert (Col a b u) by (forward_using lemma_collinearorder).
assert (~ Col a b c).

*****
H17 : not (Col a b c)
H16 : Col a b u
H15 : Col b c v
H14 : Col b a u
H13 : Col B C V
H12 : Col B A U
H11 : Cong b v B V
H10 : Cong b u B U
H9 : neq a b
H8 : neq b a
H7 : nCol A B C
H6 : Cong U V u v
H5 : Cong B V b v
H4 : Cong B U b u
H3 : Out b c v
H2 : Out b a u
H1 : Out B C V
H0 : Out B A U
U,V,u,v : Point
H : CongA A B C a b c
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
nCol a b c
+++++
close.
-----
Lemma lemma_equalanglesNC : forall A B C a b c, CongA A B C a b c -> nCol a b c.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists U V u v, (Out B A U /\\ Out B C V /\\ Out b a u /\\ Out b c v /\\ Cong B U b u /\\ Cong B V b v /\\ Cong U V u v /\\ nCol A B C)) by (conclude_def CongA );destruct Tf as [U[V[u[v]]]];spliter.
assert (neq b a) by (conclude lemma_ray2).
assert (neq a b) by (conclude lemma_inequalitysymmetric).
assert (Cong b u B U) by (conclude lemma_congruencesymmetric).
assert (Cong b v B V) by (conclude lemma_congruencesymmetric).
assert (Col B A U) by (conclude lemma_rayimpliescollinear).
assert (Col B C V) by (conclude lemma_rayimpliescollinear).
assert (Col b a u) by (conclude lemma_rayimpliescollinear).
assert (Col b c v) by (conclude lemma_rayimpliescollinear).
assert (Col a b u) by (forward_using lemma_collinearorder).
assert (~ Col a b c).
close.

*****

*****

+++++
Qed.
-----
End Euclid.
-----
