Require Export GeoCoq.Tarski_dev.Annexes.midpoint_theorems.
-----
Require Export GeoCoq.Highschool.varignon.
-----
Section Exercises.
-----
Context `{TE:Tarski_euclidean}.
-----
Lemma Per_mid_rectangle : forall A B C I J K,\n  A <> B ->\n  B <> C ->\n  Per B A C ->\n  Midpoint I B C ->\n  Midpoint J A C ->\n  Midpoint K A B ->\n  Rectangle A J I K.
-----
Lemma Per_mid_rectangle : forall A B C I J K, A <> B -> B <> C -> Per B A C -> Midpoint I B C -> Midpoint J A C -> Midpoint K A B -> Rectangle A J I K.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C I J K : Tpoint) (_ : not (eq A B)) (_ : not (eq B C)) (_ : Per B A C) (_ : Midpoint I B C) (_ : Midpoint J A C) (_ : Midpoint K A B), Rectangle A J I K
+++++
Proof.
-----
Lemma Per_mid_rectangle : forall A B C I J K, A <> B -> B <> C -> Per B A C -> Midpoint I B C -> Midpoint J A C -> Midpoint K A B -> Rectangle A J I K.
Proof.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C I J K : Tpoint) (_ : not (eq A B)) (_ : not (eq B C)) (_ : Per B A C) (_ : Midpoint I B C) (_ : Midpoint J A C) (_ : Midpoint K A B), Rectangle A J I K
+++++
intros.
-----
Lemma Per_mid_rectangle : forall A B C I J K, A <> B -> B <> C -> Per B A C -> Midpoint I B C -> Midpoint J A C -> Midpoint K A B -> Rectangle A J I K.
Proof.
intros.

*****
H4 : Midpoint K A B
H3 : Midpoint J A C
H2 : Midpoint I B C
H1 : Per B A C
H0 : not (eq B C)
H : not (eq A B)
A,B,C,I,J,K : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Rectangle A J I K
+++++
assert_diffs.
-----
Lemma Per_mid_rectangle : forall A B C I J K, A <> B -> B <> C -> Per B A C -> Midpoint I B C -> Midpoint J A C -> Midpoint K A B -> Rectangle A J I K.
Proof.
intros.
assert_diffs.

*****
H9 : not (eq K B)
H8 : not (eq K A)
H7 : not (eq I C)
H6 : not (eq I B)
H4 : Midpoint K A B
H3 : Midpoint J A C
H2 : Midpoint I B C
H1 : Per B A C
H0 : not (eq B C)
H : not (eq A B)
A,B,C,I,J,K : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Rectangle A J I K
+++++
assert_cols.
-----
Lemma Per_mid_rectangle : forall A B C I J K, A <> B -> B <> C -> Per B A C -> Midpoint I B C -> Midpoint J A C -> Midpoint K A B -> Rectangle A J I K.
Proof.
intros.
assert_diffs.
assert_cols.

*****
H11 : Col I B C
H10 : Col J A C
H5 : Col K A B
H9 : not (eq K B)
H8 : not (eq K A)
H7 : not (eq I C)
H6 : not (eq I B)
H4 : Midpoint K A B
H3 : Midpoint J A C
H2 : Midpoint I B C
H1 : Per B A C
H0 : not (eq B C)
H : not (eq A B)
A,B,C,I,J,K : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Rectangle A J I K
+++++
elim (eq_dec_points A C); intro; apply plg_per_rect.
-----
Lemma Per_mid_rectangle : forall A B C I J K, A <> B -> B <> C -> Per B A C -> Midpoint I B C -> Midpoint J A C -> Midpoint K A B -> Rectangle A J I K.
Proof.
intros.
assert_diffs.
assert_cols.
elim (eq_dec_points A C); intro; apply plg_per_rect.

*****
H12 : eq A C
H11 : Col I B C
H10 : Col J A C
H5 : Col K A B
H9 : not (eq K B)
H8 : not (eq K A)
H7 : not (eq I C)
H6 : not (eq I B)
H4 : Midpoint K A B
H3 : Midpoint J A C
H2 : Midpoint I B C
H1 : Per B A C
H0 : not (eq B C)
H : not (eq A B)
A,B,C,I,J,K : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Plg A J I K
+++++
treat_equalities.
-----
Lemma Per_mid_rectangle : forall A B C I J K, A <> B -> B <> C -> Per B A C -> Midpoint I B C -> Midpoint J A C -> Midpoint K A B -> Rectangle A J I K.
Proof.
intros.
assert_diffs.
assert_cols.
elim (eq_dec_points A C); intro; apply plg_per_rect.
treat_equalities.

*****
H11 : Col I B J
H8 : not (eq I J)
H6 : not (eq I B)
H1 : Per B J J
H4 : Midpoint I J B
H : not (eq J B)
B,I,J : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Plg J J I I
+++++
assert (HM : exists M : Tpoint, Midpoint M J I) by (apply midpoint_existence); decompose [ex] HM; repeat split; intuition; exists x; intuition.
-----
Lemma Per_mid_rectangle : forall A B C I J K, A <> B -> B <> C -> Per B A C -> Midpoint I B C -> Midpoint J A C -> Midpoint K A B -> Rectangle A J I K.
Proof.
intros.
assert_diffs.
assert_cols.
elim (eq_dec_points A C); intro; apply plg_per_rect.
treat_equalities.
assert (HM : exists M : Tpoint, Midpoint M J I) by (apply midpoint_existence); decompose [ex] HM; repeat split; intuition; exists x; intuition.

*****
H12 : eq A C
H11 : Col I B C
H10 : Col J A C
H5 : Col K A B
H9 : not (eq K B)
H8 : not (eq K A)
H7 : not (eq I C)
H6 : not (eq I B)
H4 : Midpoint K A B
H3 : Midpoint J A C
H2 : Midpoint I B C
H1 : Per B A C
H0 : not (eq B C)
H : not (eq A B)
A,B,C,I,J,K : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (Per K A J) (or (Per I J A) (or (Per A K I) (Per J I K)))
+++++
treat_equalities; intuition.
-----
Lemma Per_mid_rectangle : forall A B C I J K, A <> B -> B <> C -> Per B A C -> Midpoint I B C -> Midpoint J A C -> Midpoint K A B -> Rectangle A J I K.
Proof.
intros.
assert_diffs.
assert_cols.
elim (eq_dec_points A C); intro; apply plg_per_rect.
treat_equalities.
assert (HM : exists M : Tpoint, Midpoint M J I) by (apply midpoint_existence); decompose [ex] HM; repeat split; intuition; exists x; intuition.
treat_equalities; intuition.

*****
H12 : not (eq A C)
H11 : Col I B C
H10 : Col J A C
H5 : Col K A B
H9 : not (eq K B)
H8 : not (eq K A)
H7 : not (eq I C)
H6 : not (eq I B)
H4 : Midpoint K A B
H3 : Midpoint J A C
H2 : Midpoint I B C
H1 : Per B A C
H0 : not (eq B C)
H : not (eq A B)
A,B,C,I,J,K : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Plg A J I K
+++++
assert( Par A B J I /\ Par A C I K /\ Par B C J K /\ Cong A K I J /\ Cong B K I J /\ Cong A J I K /\ Cong C J I K /\ Cong B I J K /\ Cong C I J K) by (apply triangle_mid_par_cong; intuition).
-----
Lemma Per_mid_rectangle : forall A B C I J K, A <> B -> B <> C -> Per B A C -> Midpoint I B C -> Midpoint J A C -> Midpoint K A B -> Rectangle A J I K.
Proof.
intros.
assert_diffs.
assert_cols.
elim (eq_dec_points A C); intro; apply plg_per_rect.
treat_equalities.
assert (HM : exists M : Tpoint, Midpoint M J I) by (apply midpoint_existence); decompose [ex] HM; repeat split; intuition; exists x; intuition.
treat_equalities; intuition.
assert( Par A B J I /\\ Par A C I K /\\ Par B C J K /\\ Cong A K I J /\\ Cong B K I J /\\ Cong A J I K /\\ Cong C J I K /\\ Cong B I J K /\\ Cong C I J K) by (apply triangle_mid_par_cong; intuition).

*****
H13 : and (Par A B J I)\n (and (Par A C I K)\n (and (Par B C J K)\n (and (Cong A K I J)\n (and (Cong B K I J)\n (and (Cong A J I K)\n (and (Cong C J I K)\n (and (Cong B I J K) (Cong C I J K))))))))
H12 : not (eq A C)
H11 : Col I B C
H10 : Col J A C
H5 : Col K A B
H9 : not (eq K B)
H8 : not (eq K A)
H7 : not (eq I C)
H6 : not (eq I B)
H4 : Midpoint K A B
H3 : Midpoint J A C
H2 : Midpoint I B C
H1 : Per B A C
H0 : not (eq B C)
H : not (eq A B)
A,B,C,I,J,K : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Plg A J I K
+++++
spliter.
-----
Lemma Per_mid_rectangle : forall A B C I J K, A <> B -> B <> C -> Per B A C -> Midpoint I B C -> Midpoint J A C -> Midpoint K A B -> Rectangle A J I K.
Proof.
intros.
assert_diffs.
assert_cols.
elim (eq_dec_points A C); intro; apply plg_per_rect.
treat_equalities.
assert (HM : exists M : Tpoint, Midpoint M J I) by (apply midpoint_existence); decompose [ex] HM; repeat split; intuition; exists x; intuition.
treat_equalities; intuition.
assert( Par A B J I /\\ Par A C I K /\\ Par B C J K /\\ Cong A K I J /\\ Cong B K I J /\\ Cong A J I K /\\ Cong C J I K /\\ Cong B I J K /\\ Cong C I J K) by (apply triangle_mid_par_cong; intuition).
spliter.

*****
H21 : Cong C I J K
H20 : Cong B I J K
H19 : Cong C J I K
H18 : Cong A J I K
H17 : Cong B K I J
H16 : Cong A K I J
H15 : Par B C J K
H14 : Par A C I K
H13 : Par A B J I
H12 : not (eq A C)
H11 : Col I B C
H10 : Col J A C
H5 : Col K A B
H9 : not (eq K B)
H8 : not (eq K A)
H7 : not (eq I C)
H6 : not (eq I B)
H4 : Midpoint K A B
H3 : Midpoint J A C
H2 : Midpoint I B C
H1 : Per B A C
H0 : not (eq B C)
H : not (eq A B)
A,B,C,I,J,K : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Plg A J I K
+++++
elim (col_dec A B C); intro; assert_diffs.
-----
Lemma Per_mid_rectangle : forall A B C I J K, A <> B -> B <> C -> Per B A C -> Midpoint I B C -> Midpoint J A C -> Midpoint K A B -> Rectangle A J I K.
Proof.
intros.
assert_diffs.
assert_cols.
elim (eq_dec_points A C); intro; apply plg_per_rect.
treat_equalities.
assert (HM : exists M : Tpoint, Midpoint M J I) by (apply midpoint_existence); decompose [ex] HM; repeat split; intuition; exists x; intuition.
treat_equalities; intuition.
assert( Par A B J I /\\ Par A C I K /\\ Par B C J K /\\ Cong A K I J /\\ Cong B K I J /\\ Cong A J I K /\\ Cong C J I K /\\ Cong B I J K /\\ Cong C I J K) by (apply triangle_mid_par_cong; intuition).
spliter.
elim (col_dec A B C); intro; assert_diffs.

*****
H25 : not (eq I K)
H27 : not (eq J C)
H26 : not (eq J A)
H24 : not (eq J K)
H23 : not (eq I J)
H22 : Col A B C
H21 : Cong C I J K
H20 : Cong B I J K
H19 : Cong C J I K
H18 : Cong A J I K
H17 : Cong B K I J
H16 : Cong A K I J
H15 : Par B C J K
H14 : Par A C I K
H13 : Par A B J I
H12 : not (eq A C)
H11 : Col I B C
H10 : Col J A C
H5 : Col K A B
H9 : not (eq K B)
H8 : not (eq K A)
H7 : not (eq I C)
H6 : not (eq I B)
H4 : Midpoint K A B
H3 : Midpoint J A C
H2 : Midpoint I B C
H1 : Per B A C
H0 : not (eq B C)
H : not (eq A B)
A,B,C,I,J,K : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Plg A J I K
+++++
apply parallelogram_to_plg; unfold Parallelogram; right; unfold Parallelogram_flat; repeat split.
-----
Lemma Per_mid_rectangle : forall A B C I J K, A <> B -> B <> C -> Per B A C -> Midpoint I B C -> Midpoint J A C -> Midpoint K A B -> Rectangle A J I K.
Proof.
intros.
assert_diffs.
assert_cols.
elim (eq_dec_points A C); intro; apply plg_per_rect.
treat_equalities.
assert (HM : exists M : Tpoint, Midpoint M J I) by (apply midpoint_existence); decompose [ex] HM; repeat split; intuition; exists x; intuition.
treat_equalities; intuition.
assert( Par A B J I /\\ Par A C I K /\\ Par B C J K /\\ Cong A K I J /\\ Cong B K I J /\\ Cong A J I K /\\ Cong C J I K /\\ Cong B I J K /\\ Cong C I J K) by (apply triangle_mid_par_cong; intuition).
spliter.
elim (col_dec A B C); intro; assert_diffs.
apply parallelogram_to_plg; unfold Parallelogram; right; unfold Parallelogram_flat; repeat split.

*****
H25 : not (eq I K)
H27 : not (eq J C)
H26 : not (eq J A)
H24 : not (eq J K)
H23 : not (eq I J)
H22 : Col A B C
H21 : Cong C I J K
H20 : Cong B I J K
H19 : Cong C J I K
H18 : Cong A J I K
H17 : Cong B K I J
H16 : Cong A K I J
H15 : Par B C J K
H14 : Par A C I K
H13 : Par A B J I
H12 : not (eq A C)
H11 : Col I B C
H10 : Col J A C
H5 : Col K A B
H9 : not (eq K B)
H8 : not (eq K A)
H7 : not (eq I C)
H6 : not (eq I B)
H4 : Midpoint K A B
H3 : Midpoint J A C
H2 : Midpoint I B C
H1 : Per B A C
H0 : not (eq B C)
H : not (eq A B)
A,B,C,I,J,K : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A J I
+++++
ColR.
-----
Lemma Per_mid_rectangle : forall A B C I J K, A <> B -> B <> C -> Per B A C -> Midpoint I B C -> Midpoint J A C -> Midpoint K A B -> Rectangle A J I K.
Proof.
intros.
assert_diffs.
assert_cols.
elim (eq_dec_points A C); intro; apply plg_per_rect.
treat_equalities.
assert (HM : exists M : Tpoint, Midpoint M J I) by (apply midpoint_existence); decompose [ex] HM; repeat split; intuition; exists x; intuition.
treat_equalities; intuition.
assert( Par A B J I /\\ Par A C I K /\\ Par B C J K /\\ Cong A K I J /\\ Cong B K I J /\\ Cong A J I K /\\ Cong C J I K /\\ Cong B I J K /\\ Cong C I J K) by (apply triangle_mid_par_cong; intuition).
spliter.
elim (col_dec A B C); intro; assert_diffs.
apply parallelogram_to_plg; unfold Parallelogram; right; unfold Parallelogram_flat; repeat split.
ColR.

*****
H25 : not (eq I K)
H27 : not (eq J C)
H26 : not (eq J A)
H24 : not (eq J K)
H23 : not (eq I J)
H22 : Col A B C
H21 : Cong C I J K
H20 : Cong B I J K
H19 : Cong C J I K
H18 : Cong A J I K
H17 : Cong B K I J
H16 : Cong A K I J
H15 : Par B C J K
H14 : Par A C I K
H13 : Par A B J I
H12 : not (eq A C)
H11 : Col I B C
H10 : Col J A C
H5 : Col K A B
H9 : not (eq K B)
H8 : not (eq K A)
H7 : not (eq I C)
H6 : not (eq I B)
H4 : Midpoint K A B
H3 : Midpoint J A C
H2 : Midpoint I B C
H1 : Per B A C
H0 : not (eq B C)
H : not (eq A B)
A,B,C,I,J,K : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A J K
+++++
ColR.
-----
Lemma Per_mid_rectangle : forall A B C I J K, A <> B -> B <> C -> Per B A C -> Midpoint I B C -> Midpoint J A C -> Midpoint K A B -> Rectangle A J I K.
Proof.
intros.
assert_diffs.
assert_cols.
elim (eq_dec_points A C); intro; apply plg_per_rect.
treat_equalities.
assert (HM : exists M : Tpoint, Midpoint M J I) by (apply midpoint_existence); decompose [ex] HM; repeat split; intuition; exists x; intuition.
treat_equalities; intuition.
assert( Par A B J I /\\ Par A C I K /\\ Par B C J K /\\ Cong A K I J /\\ Cong B K I J /\\ Cong A J I K /\\ Cong C J I K /\\ Cong B I J K /\\ Cong C I J K) by (apply triangle_mid_par_cong; intuition).
spliter.
elim (col_dec A B C); intro; assert_diffs.
apply parallelogram_to_plg; unfold Parallelogram; right; unfold Parallelogram_flat; repeat split.
ColR.
ColR.

*****
H25 : not (eq I K)
H27 : not (eq J C)
H26 : not (eq J A)
H24 : not (eq J K)
H23 : not (eq I J)
H22 : Col A B C
H21 : Cong C I J K
H20 : Cong B I J K
H19 : Cong C J I K
H18 : Cong A J I K
H17 : Cong B K I J
H16 : Cong A K I J
H15 : Par B C J K
H14 : Par A C I K
H13 : Par A B J I
H12 : not (eq A C)
H11 : Col I B C
H10 : Col J A C
H5 : Col K A B
H9 : not (eq K B)
H8 : not (eq K A)
H7 : not (eq I C)
H6 : not (eq I B)
H4 : Midpoint K A B
H3 : Midpoint J A C
H2 : Midpoint I B C
H1 : Per B A C
H0 : not (eq B C)
H : not (eq A B)
A,B,C,I,J,K : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong A J I K
+++++
assumption.
-----
Lemma Per_mid_rectangle : forall A B C I J K, A <> B -> B <> C -> Per B A C -> Midpoint I B C -> Midpoint J A C -> Midpoint K A B -> Rectangle A J I K.
Proof.
intros.
assert_diffs.
assert_cols.
elim (eq_dec_points A C); intro; apply plg_per_rect.
treat_equalities.
assert (HM : exists M : Tpoint, Midpoint M J I) by (apply midpoint_existence); decompose [ex] HM; repeat split; intuition; exists x; intuition.
treat_equalities; intuition.
assert( Par A B J I /\\ Par A C I K /\\ Par B C J K /\\ Cong A K I J /\\ Cong B K I J /\\ Cong A J I K /\\ Cong C J I K /\\ Cong B I J K /\\ Cong C I J K) by (apply triangle_mid_par_cong; intuition).
spliter.
elim (col_dec A B C); intro; assert_diffs.
apply parallelogram_to_plg; unfold Parallelogram; right; unfold Parallelogram_flat; repeat split.
ColR.
ColR.
assumption.

*****
H25 : not (eq I K)
H27 : not (eq J C)
H26 : not (eq J A)
H24 : not (eq J K)
H23 : not (eq I J)
H22 : Col A B C
H21 : Cong C I J K
H20 : Cong B I J K
H19 : Cong C J I K
H18 : Cong A J I K
H17 : Cong B K I J
H16 : Cong A K I J
H15 : Par B C J K
H14 : Par A C I K
H13 : Par A B J I
H12 : not (eq A C)
H11 : Col I B C
H10 : Col J A C
H5 : Col K A B
H9 : not (eq K B)
H8 : not (eq K A)
H7 : not (eq I C)
H6 : not (eq I B)
H4 : Midpoint K A B
H3 : Midpoint J A C
H2 : Midpoint I B C
H1 : Per B A C
H0 : not (eq B C)
H : not (eq A B)
A,B,C,I,J,K : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong A K I J
+++++
assumption.
-----
Lemma Per_mid_rectangle : forall A B C I J K, A <> B -> B <> C -> Per B A C -> Midpoint I B C -> Midpoint J A C -> Midpoint K A B -> Rectangle A J I K.
Proof.
intros.
assert_diffs.
assert_cols.
elim (eq_dec_points A C); intro; apply plg_per_rect.
treat_equalities.
assert (HM : exists M : Tpoint, Midpoint M J I) by (apply midpoint_existence); decompose [ex] HM; repeat split; intuition; exists x; intuition.
treat_equalities; intuition.
assert( Par A B J I /\\ Par A C I K /\\ Par B C J K /\\ Cong A K I J /\\ Cong B K I J /\\ Cong A J I K /\\ Cong C J I K /\\ Cong B I J K /\\ Cong C I J K) by (apply triangle_mid_par_cong; intuition).
spliter.
elim (col_dec A B C); intro; assert_diffs.
apply parallelogram_to_plg; unfold Parallelogram; right; unfold Parallelogram_flat; repeat split.
ColR.
ColR.
assumption.
assumption.

*****
H25 : not (eq I K)
H27 : not (eq J C)
H26 : not (eq J A)
H24 : not (eq J K)
H23 : not (eq I J)
H22 : Col A B C
H21 : Cong C I J K
H20 : Cong B I J K
H19 : Cong C J I K
H18 : Cong A J I K
H17 : Cong B K I J
H16 : Cong A K I J
H15 : Par B C J K
H14 : Par A C I K
H13 : Par A B J I
H12 : not (eq A C)
H11 : Col I B C
H10 : Col J A C
H5 : Col K A B
H9 : not (eq K B)
H8 : not (eq K A)
H7 : not (eq I C)
H6 : not (eq I B)
H4 : Midpoint K A B
H3 : Midpoint J A C
H2 : Midpoint I B C
H1 : Per B A C
H0 : not (eq B C)
H : not (eq A B)
A,B,C,I,J,K : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (not (eq A I)) (not (eq J K))
+++++
right; intro; subst; assert (B = C) by (apply symmetric_point_uniqueness with A K; assumption); contradiction.
-----
Lemma Per_mid_rectangle : forall A B C I J K, A <> B -> B <> C -> Per B A C -> Midpoint I B C -> Midpoint J A C -> Midpoint K A B -> Rectangle A J I K.
Proof.
intros.
assert_diffs.
assert_cols.
elim (eq_dec_points A C); intro; apply plg_per_rect.
treat_equalities.
assert (HM : exists M : Tpoint, Midpoint M J I) by (apply midpoint_existence); decompose [ex] HM; repeat split; intuition; exists x; intuition.
treat_equalities; intuition.
assert( Par A B J I /\\ Par A C I K /\\ Par B C J K /\\ Cong A K I J /\\ Cong B K I J /\\ Cong A J I K /\\ Cong C J I K /\\ Cong B I J K /\\ Cong C I J K) by (apply triangle_mid_par_cong; intuition).
spliter.
elim (col_dec A B C); intro; assert_diffs.
apply parallelogram_to_plg; unfold Parallelogram; right; unfold Parallelogram_flat; repeat split.
ColR.
ColR.
assumption.
assumption.
right; intro; subst; assert (B = C) by (apply symmetric_point_uniqueness with A K; assumption); contradiction.

*****
H25 : not (eq I K)
H27 : not (eq J C)
H26 : not (eq J A)
H24 : not (eq J K)
H23 : not (eq I J)
H22 : not (Col A B C)
H21 : Cong C I J K
H20 : Cong B I J K
H19 : Cong C J I K
H18 : Cong A J I K
H17 : Cong B K I J
H16 : Cong A K I J
H15 : Par B C J K
H14 : Par A C I K
H13 : Par A B J I
H12 : not (eq A C)
H11 : Col I B C
H10 : Col J A C
H5 : Col K A B
H9 : not (eq K B)
H8 : not (eq K A)
H7 : not (eq I C)
H6 : not (eq I B)
H4 : Midpoint K A B
H3 : Midpoint J A C
H2 : Midpoint I B C
H1 : Per B A C
H0 : not (eq B C)
H : not (eq A B)
A,B,C,I,J,K : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Plg A J I K
+++++
apply pars_par_plg.
-----
Lemma Per_mid_rectangle : forall A B C I J K, A <> B -> B <> C -> Per B A C -> Midpoint I B C -> Midpoint J A C -> Midpoint K A B -> Rectangle A J I K.
Proof.
intros.
assert_diffs.
assert_cols.
elim (eq_dec_points A C); intro; apply plg_per_rect.
treat_equalities.
assert (HM : exists M : Tpoint, Midpoint M J I) by (apply midpoint_existence); decompose [ex] HM; repeat split; intuition; exists x; intuition.
treat_equalities; intuition.
assert( Par A B J I /\\ Par A C I K /\\ Par B C J K /\\ Cong A K I J /\\ Cong B K I J /\\ Cong A J I K /\\ Cong C J I K /\\ Cong B I J K /\\ Cong C I J K) by (apply triangle_mid_par_cong; intuition).
spliter.
elim (col_dec A B C); intro; assert_diffs.
apply parallelogram_to_plg; unfold Parallelogram; right; unfold Parallelogram_flat; repeat split.
ColR.
ColR.
assumption.
assumption.
right; intro; subst; assert (B = C) by (apply symmetric_point_uniqueness with A K; assumption); contradiction.
apply pars_par_plg.

*****
H25 : not (eq I K)
H27 : not (eq J C)
H26 : not (eq J A)
H24 : not (eq J K)
H23 : not (eq I J)
H22 : not (Col A B C)
H21 : Cong C I J K
H20 : Cong B I J K
H19 : Cong C J I K
H18 : Cong A J I K
H17 : Cong B K I J
H16 : Cong A K I J
H15 : Par B C J K
H14 : Par A C I K
H13 : Par A B J I
H12 : not (eq A C)
H11 : Col I B C
H10 : Col J A C
H5 : Col K A B
H9 : not (eq K B)
H8 : not (eq K A)
H7 : not (eq I C)
H6 : not (eq I B)
H4 : Midpoint K A B
H3 : Midpoint J A C
H2 : Midpoint I B C
H1 : Per B A C
H0 : not (eq B C)
H : not (eq A B)
A,B,C,I,J,K : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par_strict A J I K
+++++
assert (Par_strict A B J I /\ Par_strict A C I K /\ Par_strict B C J K /\ Cong A K I J /\ Cong B K I J /\ Cong A J I K /\ Cong C J I K /\ Cong B I J K /\ Cong C I J K) by (apply triangle_mid_par_strict_cong; intuition).
-----
Lemma Per_mid_rectangle : forall A B C I J K, A <> B -> B <> C -> Per B A C -> Midpoint I B C -> Midpoint J A C -> Midpoint K A B -> Rectangle A J I K.
Proof.
intros.
assert_diffs.
assert_cols.
elim (eq_dec_points A C); intro; apply plg_per_rect.
treat_equalities.
assert (HM : exists M : Tpoint, Midpoint M J I) by (apply midpoint_existence); decompose [ex] HM; repeat split; intuition; exists x; intuition.
treat_equalities; intuition.
assert( Par A B J I /\\ Par A C I K /\\ Par B C J K /\\ Cong A K I J /\\ Cong B K I J /\\ Cong A J I K /\\ Cong C J I K /\\ Cong B I J K /\\ Cong C I J K) by (apply triangle_mid_par_cong; intuition).
spliter.
elim (col_dec A B C); intro; assert_diffs.
apply parallelogram_to_plg; unfold Parallelogram; right; unfold Parallelogram_flat; repeat split.
ColR.
ColR.
assumption.
assumption.
right; intro; subst; assert (B = C) by (apply symmetric_point_uniqueness with A K; assumption); contradiction.
apply pars_par_plg.
assert (Par_strict A B J I /\\ Par_strict A C I K /\\ Par_strict B C J K /\\ Cong A K I J /\\ Cong B K I J /\\ Cong A J I K /\\ Cong C J I K /\\ Cong B I J K /\\ Cong C I J K) by (apply triangle_mid_par_strict_cong; intuition).

*****
H28 : and (Par_strict A B J I)\n (and (Par_strict A C I K)\n (and (Par_strict B C J K)\n (and (Cong A K I J)\n (and (Cong B K I J)\n (and (Cong A J I K)\n (and (Cong C J I K)\n (and (Cong B I J K) (Cong C I J K))))))))
H25 : not (eq I K)
H27 : not (eq J C)
H26 : not (eq J A)
H24 : not (eq J K)
H23 : not (eq I J)
H22 : not (Col A B C)
H21 : Cong C I J K
H20 : Cong B I J K
H19 : Cong C J I K
H18 : Cong A J I K
H17 : Cong B K I J
H16 : Cong A K I J
H15 : Par B C J K
H14 : Par A C I K
H13 : Par A B J I
H12 : not (eq A C)
H11 : Col I B C
H10 : Col J A C
H5 : Col K A B
H9 : not (eq K B)
H8 : not (eq K A)
H7 : not (eq I C)
H6 : not (eq I B)
H4 : Midpoint K A B
H3 : Midpoint J A C
H2 : Midpoint I B C
H1 : Per B A C
H0 : not (eq B C)
H : not (eq A B)
A,B,C,I,J,K : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par_strict A J I K
+++++
spliter.
-----
Lemma Per_mid_rectangle : forall A B C I J K, A <> B -> B <> C -> Per B A C -> Midpoint I B C -> Midpoint J A C -> Midpoint K A B -> Rectangle A J I K.
Proof.
intros.
assert_diffs.
assert_cols.
elim (eq_dec_points A C); intro; apply plg_per_rect.
treat_equalities.
assert (HM : exists M : Tpoint, Midpoint M J I) by (apply midpoint_existence); decompose [ex] HM; repeat split; intuition; exists x; intuition.
treat_equalities; intuition.
assert( Par A B J I /\\ Par A C I K /\\ Par B C J K /\\ Cong A K I J /\\ Cong B K I J /\\ Cong A J I K /\\ Cong C J I K /\\ Cong B I J K /\\ Cong C I J K) by (apply triangle_mid_par_cong; intuition).
spliter.
elim (col_dec A B C); intro; assert_diffs.
apply parallelogram_to_plg; unfold Parallelogram; right; unfold Parallelogram_flat; repeat split.
ColR.
ColR.
assumption.
assumption.
right; intro; subst; assert (B = C) by (apply symmetric_point_uniqueness with A K; assumption); contradiction.
apply pars_par_plg.
assert (Par_strict A B J I /\\ Par_strict A C I K /\\ Par_strict B C J K /\\ Cong A K I J /\\ Cong B K I J /\\ Cong A J I K /\\ Cong C J I K /\\ Cong B I J K /\\ Cong C I J K) by (apply triangle_mid_par_strict_cong; intuition).
spliter.

*****
H36 : Cong C I J K
H35 : Cong B I J K
H34 : Cong C J I K
H33 : Cong A J I K
H32 : Cong B K I J
H31 : Cong A K I J
H30 : Par_strict B C J K
H29 : Par_strict A C I K
H28 : Par_strict A B J I
H25 : not (eq I K)
H27 : not (eq J C)
H26 : not (eq J A)
H24 : not (eq J K)
H23 : not (eq I J)
H22 : not (Col A B C)
H21 : Cong C I J K
H20 : Cong B I J K
H19 : Cong C J I K
H18 : Cong A J I K
H17 : Cong B K I J
H16 : Cong A K I J
H15 : Par B C J K
H14 : Par A C I K
H13 : Par A B J I
H12 : not (eq A C)
H11 : Col I B C
H10 : Col J A C
H5 : Col K A B
H9 : not (eq K B)
H8 : not (eq K A)
H7 : not (eq I C)
H6 : not (eq I B)
H4 : Midpoint K A B
H3 : Midpoint J A C
H2 : Midpoint I B C
H1 : Per B A C
H0 : not (eq B C)
H : not (eq A B)
A,B,C,I,J,K : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par_strict A J I K
+++++
apply par_strict_symmetry; apply par_strict_col_par_strict with C; intuition; apply par_strict_symmetry; apply par_strict_right_comm; assumption; Col.
-----
