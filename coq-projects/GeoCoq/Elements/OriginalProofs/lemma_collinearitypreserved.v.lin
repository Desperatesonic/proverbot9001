129bf74e19bcad97ee3bb0088ca02109
Require Export GeoCoq.Elements.OriginalProofs.lemma_congruencetransitive.
Require Export GeoCoq.Elements.OriginalProofs.lemma_betweennesspreserved.
Section Euclid.
Context `{Ax:euclidean_neutral_ruler_compass}.
Lemma lemma_collinearitypreserved : 
   forall A B C a b c, 
   Col A B C -> Cong A B a b -> Cong A C a c -> Cong B C b c ->
   Col a b c.
Proof.
  intros.
  assert (Cong C B B C).
  {
    conclude cn_equalityreverse.
  }
  {
    idtac.
    assert (Cong C B b c).
    {
      conclude lemma_congruencetransitive.
    }
    {
      idtac.
      assert (Cong b c c b).
      {
        conclude cn_equalityreverse.
      }
      {
        idtac.
        assert (Cong C B c b).
        {
          conclude lemma_congruencetransitive.
        }
        {
          idtac.
          assert (Cong a b b a).
          {
            conclude cn_equalityreverse.
          }
          {
            idtac.
            assert (Cong A B b a).
            {
              conclude lemma_congruencetransitive.
            }
            {
              idtac.
              assert (Cong A B B A).
              {
                conclude cn_equalityreverse.
              }
              {
                idtac.
                assert (Cong B A A B).
                {
                  conclude lemma_congruencesymmetric.
                }
                {
                  idtac.
                  assert (Cong B A b a).
                  {
                    conclude lemma_congruencetransitive.
                  }
                  {
                    idtac.
                    assert ((eq A B \/ eq A C \/ eq B C \/ BetS B A C \/ BetS A B C \/ BetS A C B)).
                    {
                      conclude_def Col .
                    }
                    {
                      idtac.
                      assert (Col a b c).
                      {
                        by cases on (eq A B \/ eq A C \/ eq B C \/ BetS B A C \/ BetS A B C \/ BetS A C B).
                        {
                          assert (Cong A A a b).
                          {
                            conclude cn_equalitysub.
                          }
                          {
                            idtac.
                            assert (Cong a b A A).
                            {
                              conclude lemma_congruencesymmetric.
                            }
                            {
                              idtac.
                              assert (~ neq a b).
                              {
                                intro.
                                assert (neq A A).
                                {
                                  conclude axiom_nocollapse.
                                }
                                {
                                  idtac.
                                  assert (eq A A).
                                  {
                                    conclude cn_equalityreflexive.
                                  }
                                  {
                                    idtac.
                                    contradict.
                                  }
                                }
                              }
                              {
                                assert (eq a b).
                                {
                                  conclude cn_stability.
                                }
                                {
                                  idtac.
                                  assert (Col a b c).
                                  {
                                    conclude_def Col .
                                  }
                                  {
                                    idtac.
                                    close.
                                  }
                                }
                              }
                            }
                          }
                        }
                        {
                          assert (Cong A A a c).
                          {
                            conclude cn_equalitysub.
                          }
                          {
                            idtac.
                            assert (Cong a c A A).
                            {
                              conclude lemma_congruencesymmetric.
                            }
                            {
                              idtac.
                              assert (~ neq a c).
                              {
                                intro.
                                assert (neq A A).
                                {
                                  conclude axiom_nocollapse.
                                }
                                {
                                  idtac.
                                  assert (eq A A).
                                  {
                                    conclude cn_equalityreflexive.
                                  }
                                  {
                                    idtac.
                                    contradict.
                                  }
                                }
                              }
                              {
                                assert (eq a c).
                                {
                                  conclude cn_stability.
                                }
                                {
                                  idtac.
                                  assert (Col a b c).
                                  {
                                    conclude_def Col .
                                  }
                                  {
                                    idtac.
                                    close.
                                  }
                                }
                              }
                            }
                          }
                        }
                        {
                          assert (Cong B B b c).
                          {
                            conclude cn_equalitysub.
                          }
                          {
                            idtac.
                            assert (Cong b c B B).
                            {
                              conclude lemma_congruencesymmetric.
                            }
                            {
                              idtac.
                              assert (~ neq b c).
                              {
                                intro.
                                assert (neq B B).
                                {
                                  conclude axiom_nocollapse.
                                }
                                {
                                  idtac.
                                  assert (eq B B).
                                  {
                                    conclude cn_equalityreflexive.
                                  }
                                  {
                                    idtac.
                                    contradict.
                                  }
                                }
                              }
                              {
                                assert (eq b c).
                                {
                                  conclude cn_stability.
                                }
                                {
                                  idtac.
                                  assert (Col a b c).
                                  {
                                    conclude_def Col .
                                  }
                                  {
                                    idtac.
                                    close.
                                  }
                                }
                              }
                            }
                          }
                        }
                        {
                          assert (BetS b a c).
                          {
                            conclude lemma_betweennesspreserved.
                          }
                          {
                            idtac.
                            assert (Col a b c).
                            {
                              conclude_def Col .
                            }
                            {
                              idtac.
                              close.
                            }
                          }
                        }
                        {
                          assert (BetS a b c).
                          {
                            conclude lemma_betweennesspreserved.
                          }
                          {
                            idtac.
                            assert (Col a b c).
                            {
                              conclude_def Col .
                            }
                            {
                              idtac.
                              close.
                            }
                          }
                        }
                        {
                          assert (BetS a c b).
                          {
                            conclude lemma_betweennesspreserved.
                          }
                          {
                            idtac.
                            assert (Col a b c).
                            {
                              conclude_def Col .
                            }
                            {
                              idtac.
                              close.
                            }
                          }
                        }
                      }
                      {
                        close.
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
Qed.
End Euclid.
