From Coq Require Import RelationClasses.
-----
Require Import ExtLib.Structures.Monad.
-----
Require Import ExtLib.Structures.Reducible.
-----
Set Implicit Arguments.
-----
Set Strict Implicit.
-----
Section Maps.
-----
Variables K V : Type.
-----
Variable map : Type.
-----
Class Map : Type :=\n  { empty    : map\n  ; add      : K -> V -> map -> map\n  ; remove   : K -> map -> map\n  ; lookup   : K -> map -> option V\n  ; union    : map -> map -> map\n  }.
-----
Variable R : K -> K -> Prop.
-----
Class MapOk (M : Map) : Type :=\n  { mapsto : K -> V -> map -> Prop\n  ; mapsto_empty : forall k v, ~mapsto k v empty\n  ; mapsto_lookup : forall k v m, lookup k m = Some v <-> mapsto k v m\n  ; mapsto_add_eq : forall m k v, mapsto k v (add k v m)\n  ; mapsto_add_neq : forall m k v k',\n                       ~R k k' ->\n                       forall v', (mapsto k' v' m <-> mapsto k' v' (add k v m))\n  }.
-----
Variable M : Map.
-----
Definition contains (k : K) (m : map) : bool :=\n    match lookup k m with\n      | None => false\n      | Some _ => true\n    end.
-----
Definition singleton (k : K) (v : V) : map :=\n    add k v empty.
-----
Context {F : Foldable map (K * V)}.
-----
Definition combine (f : K -> V -> V -> V) (m1 m2 : map) : map :=\n    fold (fun k_v acc =>\n      let '(k,v) := k_v in\n      match lookup k acc with\n        | None => add k v acc\n        | Some v' => add k (f k v v') acc\n      end) m2 m1.
-----
Definition filter (f : K -> V -> bool) (m : map) : map :=\n    fold (fun k_v acc =>\n      let '(k,v) := k_v in\n      if f k v\n        then add k v acc\n        else acc) empty m.
-----
Definition submap_with (le : V -> V -> bool) (m1 m2 : map) : bool :=\n    fold (fun k_v (acc : bool) => \n      if acc then \n        let '(k,v) := k_v in\n        match lookup k m2 with\n          | None => false\n          | Some v' => le v v'\n        end\n      else false) true m1.
-----
End Maps.
-----
Arguments empty {_} {_} {_} {_}.
-----
Arguments add {K V} {map} {Map} _ _ _.
-----
Arguments remove {K V} {map} {Map} _ _.
-----
Arguments lookup {K V} {map} {Map} _ _.
-----
Arguments contains {K V} {map} {M} _ _.
-----
Arguments singleton {K V} {map} {M} _ _.
-----
Arguments combine {K V} {map} {M} _ _ _ _.
-----
