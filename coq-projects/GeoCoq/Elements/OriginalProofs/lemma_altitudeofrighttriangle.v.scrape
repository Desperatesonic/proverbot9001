Require Export GeoCoq.Elements.OriginalProofs.lemma_NCdistinct.
-----
Require Export GeoCoq.Elements.OriginalProofs.lemma_8_7.
-----
Require Export GeoCoq.Elements.OriginalProofs.lemma_legsmallerhypotenuse.
-----
Require Export GeoCoq.Elements.OriginalProofs.lemma_trichotomy2.
-----
Require Export GeoCoq.Elements.OriginalProofs.lemma_tworays.
-----
Section Euclid.
-----
Context `{Ax:euclidean_neutral_ruler_compass}.
-----
Lemma lemma_altitudeofrighttriangle : \n   forall A B C M p, \n   Per B A C -> Per A M p -> Col B C p -> Col B C M ->\n   BetS B M C.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.

*****
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
forall (A B C M p : Point) (_ : Per B A C) (_ : Per A M p) (_ : Col B C p) (_ : Col B C M), BetS B M C
+++++
Proof.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.

*****
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
forall (A B C M p : Point) (_ : Per B A C) (_ : Per A M p) (_ : Col B C p) (_ : Col B C M), BetS B M C
+++++
intros.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.

*****
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
BetS B M C
+++++
assert (nCol B A C).
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).

*****
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
nCol B A C
+++++
conclude lemma_rightangleNC.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).

*****
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
BetS B M C
+++++
idtac.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.

*****
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
BetS B M C
+++++
assert (neq C B).
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).

*****
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
neq C B
+++++
forward_using lemma_NCdistinct.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).

*****
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
BetS B M C
+++++
idtac.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.

*****
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
BetS B M C
+++++
assert (~ eq B M).
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).

*****
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (eq B M)
+++++
intro.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
intro.

*****
H5 : eq B M
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Per A B p).
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
intro.
assert (Per A B p).

*****
H5 : eq B M
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Per A B p
+++++
conclude cn_equalitysub.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
intro.
assert (Per A B p).

*****
H6 : Per A B p
H5 : eq B M
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
idtac.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
intro.
assert (Per A B p).
idtac.

*****
H6 : Per A B p
H5 : eq B M
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col p B C).
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
intro.
assert (Per A B p).
idtac.
assert (Col p B C).

*****
H6 : Per A B p
H5 : eq B M
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Col p B C
+++++
forward_using lemma_collinearorder.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
intro.
assert (Per A B p).
idtac.
assert (Col p B C).

*****
H7 : Col p B C
H6 : Per A B p
H5 : eq B M
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
idtac.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
intro.
assert (Per A B p).
idtac.
assert (Col p B C).
idtac.

*****
H7 : Col p B C
H6 : Per A B p
H5 : eq B M
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Per p B A).
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
intro.
assert (Per A B p).
idtac.
assert (Col p B C).
idtac.
assert (Per p B A).

*****
H7 : Col p B C
H6 : Per A B p
H5 : eq B M
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Per p B A
+++++
conclude lemma_8_2.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
intro.
assert (Per A B p).
idtac.
assert (Col p B C).
idtac.
assert (Per p B A).

*****
H8 : Per p B A
H7 : Col p B C
H6 : Per A B p
H5 : eq B M
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
idtac.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
intro.
assert (Per A B p).
idtac.
assert (Col p B C).
idtac.
assert (Per p B A).
idtac.

*****
H8 : Per p B A
H7 : Col p B C
H6 : Per A B p
H5 : eq B M
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Per C B A).
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
intro.
assert (Per A B p).
idtac.
assert (Col p B C).
idtac.
assert (Per p B A).
idtac.
assert (Per C B A).

*****
H8 : Per p B A
H7 : Col p B C
H6 : Per A B p
H5 : eq B M
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Per C B A
+++++
conclude lemma_collinearright.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
intro.
assert (Per A B p).
idtac.
assert (Col p B C).
idtac.
assert (Per p B A).
idtac.
assert (Per C B A).

*****
H9 : Per C B A
H8 : Per p B A
H7 : Col p B C
H6 : Per A B p
H5 : eq B M
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
idtac.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
intro.
assert (Per A B p).
idtac.
assert (Col p B C).
idtac.
assert (Per p B A).
idtac.
assert (Per C B A).
idtac.

*****
H9 : Per C B A
H8 : Per p B A
H7 : Col p B C
H6 : Per A B p
H5 : eq B M
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (~ Per C B A).
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
intro.
assert (Per A B p).
idtac.
assert (Col p B C).
idtac.
assert (Per p B A).
idtac.
assert (Per C B A).
idtac.
assert (~ Per C B A).

*****
H9 : Per C B A
H8 : Per p B A
H7 : Col p B C
H6 : Per A B p
H5 : eq B M
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (Per C B A)
+++++
conclude lemma_8_7.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
intro.
assert (Per A B p).
idtac.
assert (Col p B C).
idtac.
assert (Per p B A).
idtac.
assert (Per C B A).
idtac.
assert (~ Per C B A).

*****
H10 : not (Per C B A)
H9 : Per C B A
H8 : Per p B A
H7 : Col p B C
H6 : Per A B p
H5 : eq B M
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
idtac.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
intro.
assert (Per A B p).
idtac.
assert (Col p B C).
idtac.
assert (Per p B A).
idtac.
assert (Per C B A).
idtac.
assert (~ Per C B A).
idtac.

*****
H10 : not (Per C B A)
H9 : Per C B A
H8 : Per p B A
H7 : Col p B C
H6 : Per A B p
H5 : eq B M
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).

*****
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
BetS B M C
+++++
assert (Per p M A).
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).

*****
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Per p M A
+++++
conclude lemma_8_2.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).

*****
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
BetS B M C
+++++
idtac.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.

*****
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
BetS B M C
+++++
assert (Col C B p).
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).

*****
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Col C B p
+++++
forward_using lemma_collinearorder.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).

*****
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
BetS B M C
+++++
idtac.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.

*****
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
BetS B M C
+++++
assert (Col C B M).
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).

*****
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Col C B M
+++++
forward_using lemma_collinearorder.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).

*****
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
BetS B M C
+++++
idtac.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.

*****
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
BetS B M C
+++++
assert (nCol B A C).
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).

*****
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
nCol B A C
+++++
conclude lemma_rightangleNC.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).

*****
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
BetS B M C
+++++
idtac.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.

*****
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
BetS B M C
+++++
assert (neq C B).
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).

*****
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
neq C B
+++++
forward_using lemma_NCdistinct.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).

*****
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
BetS B M C
+++++
idtac.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.

*****
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
BetS B M C
+++++
assert (Col B p M).
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).

*****
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Col B p M
+++++
conclude lemma_collinear4.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).

*****
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
BetS B M C
+++++
idtac.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.

*****
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
BetS B M C
+++++
assert (Col p M B).
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).

*****
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Col p M B
+++++
forward_using lemma_collinearorder.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).

*****
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
BetS B M C
+++++
idtac.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.

*****
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
BetS B M C
+++++
assert (Per B M A).
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).

*****
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Per B M A
+++++
conclude lemma_collinearright.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).

*****
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
BetS B M C
+++++
idtac.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.

*****
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
BetS B M C
+++++
assert (Col B C p).
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).

*****
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Col B C p
+++++
forward_using lemma_collinearorder.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).

*****
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
BetS B M C
+++++
idtac.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.

*****
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
BetS B M C
+++++
assert (Col B C M).
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).

*****
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Col B C M
+++++
forward_using lemma_collinearorder.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).

*****
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
BetS B M C
+++++
idtac.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.

*****
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
BetS B M C
+++++
assert (neq B C).
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).

*****
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
neq B C
+++++
conclude lemma_inequalitysymmetric.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).

*****
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
BetS B M C
+++++
idtac.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.

*****
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
BetS B M C
+++++
assert (Col C p M).
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).

*****
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Col C p M
+++++
conclude lemma_collinear4.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).

*****
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
BetS B M C
+++++
idtac.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.

*****
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
BetS B M C
+++++
assert (Col p M C).
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).

*****
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Col p M C
+++++
forward_using lemma_collinearorder.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).

*****
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
BetS B M C
+++++
idtac.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.

*****
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
BetS B M C
+++++
assert (Per C A B).
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).

*****
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Per C A B
+++++
conclude lemma_8_2.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).

*****
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
BetS B M C
+++++
idtac.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.

*****
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
BetS B M C
+++++
assert (~ eq C M).
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).

*****
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (eq C M)
+++++
intro.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
intro.

*****
H20 : eq C M
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Per A C p).
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
intro.
assert (Per A C p).

*****
H20 : eq C M
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Per A C p
+++++
conclude cn_equalitysub.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
intro.
assert (Per A C p).

*****
H21 : Per A C p
H20 : eq C M
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
idtac.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
intro.
assert (Per A C p).
idtac.

*****
H21 : Per A C p
H20 : eq C M
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col p C B).
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
intro.
assert (Per A C p).
idtac.
assert (Col p C B).

*****
H21 : Per A C p
H20 : eq C M
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Col p C B
+++++
forward_using lemma_collinearorder.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
intro.
assert (Per A C p).
idtac.
assert (Col p C B).

*****
H22 : Col p C B
H21 : Per A C p
H20 : eq C M
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
idtac.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
intro.
assert (Per A C p).
idtac.
assert (Col p C B).
idtac.

*****
H22 : Col p C B
H21 : Per A C p
H20 : eq C M
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Per p C A).
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
intro.
assert (Per A C p).
idtac.
assert (Col p C B).
idtac.
assert (Per p C A).

*****
H22 : Col p C B
H21 : Per A C p
H20 : eq C M
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Per p C A
+++++
conclude lemma_8_2.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
intro.
assert (Per A C p).
idtac.
assert (Col p C B).
idtac.
assert (Per p C A).

*****
H23 : Per p C A
H22 : Col p C B
H21 : Per A C p
H20 : eq C M
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
idtac.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
intro.
assert (Per A C p).
idtac.
assert (Col p C B).
idtac.
assert (Per p C A).
idtac.

*****
H23 : Per p C A
H22 : Col p C B
H21 : Per A C p
H20 : eq C M
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Per B C A).
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
intro.
assert (Per A C p).
idtac.
assert (Col p C B).
idtac.
assert (Per p C A).
idtac.
assert (Per B C A).

*****
H23 : Per p C A
H22 : Col p C B
H21 : Per A C p
H20 : eq C M
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Per B C A
+++++
conclude lemma_collinearright.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
intro.
assert (Per A C p).
idtac.
assert (Col p C B).
idtac.
assert (Per p C A).
idtac.
assert (Per B C A).

*****
H24 : Per B C A
H23 : Per p C A
H22 : Col p C B
H21 : Per A C p
H20 : eq C M
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
idtac.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
intro.
assert (Per A C p).
idtac.
assert (Col p C B).
idtac.
assert (Per p C A).
idtac.
assert (Per B C A).
idtac.

*****
H24 : Per B C A
H23 : Per p C A
H22 : Col p C B
H21 : Per A C p
H20 : eq C M
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (~ Per B C A).
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
intro.
assert (Per A C p).
idtac.
assert (Col p C B).
idtac.
assert (Per p C A).
idtac.
assert (Per B C A).
idtac.
assert (~ Per B C A).

*****
H24 : Per B C A
H23 : Per p C A
H22 : Col p C B
H21 : Per A C p
H20 : eq C M
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (Per B C A)
+++++
conclude lemma_8_7.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
intro.
assert (Per A C p).
idtac.
assert (Col p C B).
idtac.
assert (Per p C A).
idtac.
assert (Per B C A).
idtac.
assert (~ Per B C A).

*****
H25 : not (Per B C A)
H24 : Per B C A
H23 : Per p C A
H22 : Col p C B
H21 : Per A C p
H20 : eq C M
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
idtac.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
intro.
assert (Per A C p).
idtac.
assert (Col p C B).
idtac.
assert (Per p C A).
idtac.
assert (Per B C A).
idtac.
assert (~ Per B C A).
idtac.

*****
H25 : not (Per B C A)
H24 : Per B C A
H23 : Per p C A
H22 : Col p C B
H21 : Per A C p
H20 : eq C M
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).

*****
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
BetS B M C
+++++
assert (Per C M A).
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).

*****
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Per C M A
+++++
conclude lemma_collinearright.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).

*****
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
BetS B M C
+++++
idtac.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.

*****
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
BetS B M C
+++++
assert (Per A M B).
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).

*****
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Per A M B
+++++
conclude lemma_8_2.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).

*****
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
BetS B M C
+++++
idtac.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.

*****
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
BetS B M C
+++++
assert (Per A M C).
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).

*****
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Per A M C
+++++
conclude lemma_8_2.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).

*****
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
BetS B M C
+++++
idtac.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.

*****
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
BetS B M C
+++++
assert (Lt M B A B).
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).

*****
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Lt M B A B
+++++
conclude lemma_legsmallerhypotenuse.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).

*****
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
BetS B M C
+++++
idtac.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.

*****
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
BetS B M C
+++++
assert (Lt B A B C).
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).

*****
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Lt B A B C
+++++
conclude lemma_legsmallerhypotenuse.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).

*****
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
BetS B M C
+++++
idtac.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.

*****
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
BetS B M C
+++++
assert (Cong B A A B).
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).

*****
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Cong B A A B
+++++
conclude cn_equalityreverse.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).

*****
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
BetS B M C
+++++
idtac.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.

*****
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
BetS B M C
+++++
assert (Lt A B B C).
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).

*****
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Lt A B B C
+++++
conclude lemma_lessthancongruence2.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).

*****
H27 : Lt A B B C
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
BetS B M C
+++++
idtac.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).
idtac.

*****
H27 : Lt A B B C
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
BetS B M C
+++++
assert (Lt M B B C).
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).
idtac.
assert (Lt M B B C).

*****
H27 : Lt A B B C
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Lt M B B C
+++++
conclude lemma_lessthantransitive.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).
idtac.
assert (Lt M B B C).

*****
H28 : Lt M B B C
H27 : Lt A B B C
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
BetS B M C
+++++
idtac.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).
idtac.
assert (Lt M B B C).
idtac.

*****
H28 : Lt M B B C
H27 : Lt A B B C
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
BetS B M C
+++++
assert (Cong M B B M).
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).
idtac.
assert (Lt M B B C).
idtac.
assert (Cong M B B M).

*****
H28 : Lt M B B C
H27 : Lt A B B C
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Cong M B B M
+++++
conclude cn_equalityreverse.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).
idtac.
assert (Lt M B B C).
idtac.
assert (Cong M B B M).

*****
H29 : Cong M B B M
H28 : Lt M B B C
H27 : Lt A B B C
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
BetS B M C
+++++
idtac.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).
idtac.
assert (Lt M B B C).
idtac.
assert (Cong M B B M).
idtac.

*****
H29 : Cong M B B M
H28 : Lt M B B C
H27 : Lt A B B C
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
BetS B M C
+++++
assert (Lt B M B C).
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).
idtac.
assert (Lt M B B C).
idtac.
assert (Cong M B B M).
idtac.
assert (Lt B M B C).

*****
H29 : Cong M B B M
H28 : Lt M B B C
H27 : Lt A B B C
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Lt B M B C
+++++
conclude lemma_lessthancongruence2.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).
idtac.
assert (Lt M B B C).
idtac.
assert (Cong M B B M).
idtac.
assert (Lt B M B C).

*****
H30 : Lt B M B C
H29 : Cong M B B M
H28 : Lt M B B C
H27 : Lt A B B C
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
BetS B M C
+++++
idtac.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).
idtac.
assert (Lt M B B C).
idtac.
assert (Cong M B B M).
idtac.
assert (Lt B M B C).
idtac.

*****
H30 : Lt B M B C
H29 : Cong M B B M
H28 : Lt M B B C
H27 : Lt A B B C
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
BetS B M C
+++++
assert (Lt M C A C).
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).
idtac.
assert (Lt M B B C).
idtac.
assert (Cong M B B M).
idtac.
assert (Lt B M B C).
idtac.
assert (Lt M C A C).

*****
H30 : Lt B M B C
H29 : Cong M B B M
H28 : Lt M B B C
H27 : Lt A B B C
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Lt M C A C
+++++
conclude lemma_legsmallerhypotenuse.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).
idtac.
assert (Lt M B B C).
idtac.
assert (Cong M B B M).
idtac.
assert (Lt B M B C).
idtac.
assert (Lt M C A C).

*****
H31 : Lt M C A C
H30 : Lt B M B C
H29 : Cong M B B M
H28 : Lt M B B C
H27 : Lt A B B C
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
BetS B M C
+++++
idtac.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).
idtac.
assert (Lt M B B C).
idtac.
assert (Cong M B B M).
idtac.
assert (Lt B M B C).
idtac.
assert (Lt M C A C).
idtac.

*****
H31 : Lt M C A C
H30 : Lt B M B C
H29 : Cong M B B M
H28 : Lt M B B C
H27 : Lt A B B C
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
BetS B M C
+++++
assert (Cong M C C M).
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).
idtac.
assert (Lt M B B C).
idtac.
assert (Cong M B B M).
idtac.
assert (Lt B M B C).
idtac.
assert (Lt M C A C).
idtac.
assert (Cong M C C M).

*****
H31 : Lt M C A C
H30 : Lt B M B C
H29 : Cong M B B M
H28 : Lt M B B C
H27 : Lt A B B C
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Cong M C C M
+++++
conclude cn_equalityreverse.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).
idtac.
assert (Lt M B B C).
idtac.
assert (Cong M B B M).
idtac.
assert (Lt B M B C).
idtac.
assert (Lt M C A C).
idtac.
assert (Cong M C C M).

*****
H32 : Cong M C C M
H31 : Lt M C A C
H30 : Lt B M B C
H29 : Cong M B B M
H28 : Lt M B B C
H27 : Lt A B B C
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
BetS B M C
+++++
idtac.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).
idtac.
assert (Lt M B B C).
idtac.
assert (Cong M B B M).
idtac.
assert (Lt B M B C).
idtac.
assert (Lt M C A C).
idtac.
assert (Cong M C C M).
idtac.

*****
H32 : Cong M C C M
H31 : Lt M C A C
H30 : Lt B M B C
H29 : Cong M B B M
H28 : Lt M B B C
H27 : Lt A B B C
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
BetS B M C
+++++
assert (Lt C M A C).
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).
idtac.
assert (Lt M B B C).
idtac.
assert (Cong M B B M).
idtac.
assert (Lt B M B C).
idtac.
assert (Lt M C A C).
idtac.
assert (Cong M C C M).
idtac.
assert (Lt C M A C).

*****
H32 : Cong M C C M
H31 : Lt M C A C
H30 : Lt B M B C
H29 : Cong M B B M
H28 : Lt M B B C
H27 : Lt A B B C
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Lt C M A C
+++++
conclude lemma_lessthancongruence2.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).
idtac.
assert (Lt M B B C).
idtac.
assert (Cong M B B M).
idtac.
assert (Lt B M B C).
idtac.
assert (Lt M C A C).
idtac.
assert (Cong M C C M).
idtac.
assert (Lt C M A C).

*****
H33 : Lt C M A C
H32 : Cong M C C M
H31 : Lt M C A C
H30 : Lt B M B C
H29 : Cong M B B M
H28 : Lt M B B C
H27 : Lt A B B C
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
BetS B M C
+++++
idtac.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).
idtac.
assert (Lt M B B C).
idtac.
assert (Cong M B B M).
idtac.
assert (Lt B M B C).
idtac.
assert (Lt M C A C).
idtac.
assert (Cong M C C M).
idtac.
assert (Lt C M A C).
idtac.

*****
H33 : Lt C M A C
H32 : Cong M C C M
H31 : Lt M C A C
H30 : Lt B M B C
H29 : Cong M B B M
H28 : Lt M B B C
H27 : Lt A B B C
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
BetS B M C
+++++
assert (Lt A C B C).
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).
idtac.
assert (Lt M B B C).
idtac.
assert (Cong M B B M).
idtac.
assert (Lt B M B C).
idtac.
assert (Lt M C A C).
idtac.
assert (Cong M C C M).
idtac.
assert (Lt C M A C).
idtac.
assert (Lt A C B C).

*****
H33 : Lt C M A C
H32 : Cong M C C M
H31 : Lt M C A C
H30 : Lt B M B C
H29 : Cong M B B M
H28 : Lt M B B C
H27 : Lt A B B C
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Lt A C B C
+++++
conclude lemma_legsmallerhypotenuse.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).
idtac.
assert (Lt M B B C).
idtac.
assert (Cong M B B M).
idtac.
assert (Lt B M B C).
idtac.
assert (Lt M C A C).
idtac.
assert (Cong M C C M).
idtac.
assert (Lt C M A C).
idtac.
assert (Lt A C B C).

*****
H34 : Lt A C B C
H33 : Lt C M A C
H32 : Cong M C C M
H31 : Lt M C A C
H30 : Lt B M B C
H29 : Cong M B B M
H28 : Lt M B B C
H27 : Lt A B B C
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
BetS B M C
+++++
idtac.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).
idtac.
assert (Lt M B B C).
idtac.
assert (Cong M B B M).
idtac.
assert (Lt B M B C).
idtac.
assert (Lt M C A C).
idtac.
assert (Cong M C C M).
idtac.
assert (Lt C M A C).
idtac.
assert (Lt A C B C).
idtac.

*****
H34 : Lt A C B C
H33 : Lt C M A C
H32 : Cong M C C M
H31 : Lt M C A C
H30 : Lt B M B C
H29 : Cong M B B M
H28 : Lt M B B C
H27 : Lt A B B C
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
BetS B M C
+++++
assert (Lt C M B C).
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).
idtac.
assert (Lt M B B C).
idtac.
assert (Cong M B B M).
idtac.
assert (Lt B M B C).
idtac.
assert (Lt M C A C).
idtac.
assert (Cong M C C M).
idtac.
assert (Lt C M A C).
idtac.
assert (Lt A C B C).
idtac.
assert (Lt C M B C).

*****
H34 : Lt A C B C
H33 : Lt C M A C
H32 : Cong M C C M
H31 : Lt M C A C
H30 : Lt B M B C
H29 : Cong M B B M
H28 : Lt M B B C
H27 : Lt A B B C
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Lt C M B C
+++++
conclude lemma_lessthantransitive.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).
idtac.
assert (Lt M B B C).
idtac.
assert (Cong M B B M).
idtac.
assert (Lt B M B C).
idtac.
assert (Lt M C A C).
idtac.
assert (Cong M C C M).
idtac.
assert (Lt C M A C).
idtac.
assert (Lt A C B C).
idtac.
assert (Lt C M B C).

*****
H35 : Lt C M B C
H34 : Lt A C B C
H33 : Lt C M A C
H32 : Cong M C C M
H31 : Lt M C A C
H30 : Lt B M B C
H29 : Cong M B B M
H28 : Lt M B B C
H27 : Lt A B B C
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
BetS B M C
+++++
idtac.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).
idtac.
assert (Lt M B B C).
idtac.
assert (Cong M B B M).
idtac.
assert (Lt B M B C).
idtac.
assert (Lt M C A C).
idtac.
assert (Cong M C C M).
idtac.
assert (Lt C M A C).
idtac.
assert (Lt A C B C).
idtac.
assert (Lt C M B C).
idtac.

*****
H35 : Lt C M B C
H34 : Lt A C B C
H33 : Lt C M A C
H32 : Cong M C C M
H31 : Lt M C A C
H30 : Lt B M B C
H29 : Cong M B B M
H28 : Lt M B B C
H27 : Lt A B B C
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
BetS B M C
+++++
assert (~ BetS M B C).
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).
idtac.
assert (Lt M B B C).
idtac.
assert (Cong M B B M).
idtac.
assert (Lt B M B C).
idtac.
assert (Lt M C A C).
idtac.
assert (Cong M C C M).
idtac.
assert (Lt C M A C).
idtac.
assert (Lt A C B C).
idtac.
assert (Lt C M B C).
idtac.
assert (~ BetS M B C).

*****
H35 : Lt C M B C
H34 : Lt A C B C
H33 : Lt C M A C
H32 : Cong M C C M
H31 : Lt M C A C
H30 : Lt B M B C
H29 : Cong M B B M
H28 : Lt M B B C
H27 : Lt A B B C
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (BetS M B C)
+++++
intro.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).
idtac.
assert (Lt M B B C).
idtac.
assert (Cong M B B M).
idtac.
assert (Lt B M B C).
idtac.
assert (Lt M C A C).
idtac.
assert (Cong M C C M).
idtac.
assert (Lt C M A C).
idtac.
assert (Lt A C B C).
idtac.
assert (Lt C M B C).
idtac.
assert (~ BetS M B C).
intro.

*****
H36 : BetS M B C
H35 : Lt C M B C
H34 : Lt A C B C
H33 : Lt C M A C
H32 : Cong M C C M
H31 : Lt M C A C
H30 : Lt B M B C
H29 : Cong M B B M
H28 : Lt M B B C
H27 : Lt A B B C
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (BetS C B M).
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).
idtac.
assert (Lt M B B C).
idtac.
assert (Cong M B B M).
idtac.
assert (Lt B M B C).
idtac.
assert (Lt M C A C).
idtac.
assert (Cong M C C M).
idtac.
assert (Lt C M A C).
idtac.
assert (Lt A C B C).
idtac.
assert (Lt C M B C).
idtac.
assert (~ BetS M B C).
intro.
assert (BetS C B M).

*****
H36 : BetS M B C
H35 : Lt C M B C
H34 : Lt A C B C
H33 : Lt C M A C
H32 : Cong M C C M
H31 : Lt M C A C
H30 : Lt B M B C
H29 : Cong M B B M
H28 : Lt M B B C
H27 : Lt A B B C
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
BetS C B M
+++++
conclude axiom_betweennesssymmetry.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).
idtac.
assert (Lt M B B C).
idtac.
assert (Cong M B B M).
idtac.
assert (Lt B M B C).
idtac.
assert (Lt M C A C).
idtac.
assert (Cong M C C M).
idtac.
assert (Lt C M A C).
idtac.
assert (Lt A C B C).
idtac.
assert (Lt C M B C).
idtac.
assert (~ BetS M B C).
intro.
assert (BetS C B M).

*****
H37 : BetS C B M
H36 : BetS M B C
H35 : Lt C M B C
H34 : Lt A C B C
H33 : Lt C M A C
H32 : Cong M C C M
H31 : Lt M C A C
H30 : Lt B M B C
H29 : Cong M B B M
H28 : Lt M B B C
H27 : Lt A B B C
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
idtac.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).
idtac.
assert (Lt M B B C).
idtac.
assert (Cong M B B M).
idtac.
assert (Lt B M B C).
idtac.
assert (Lt M C A C).
idtac.
assert (Cong M C C M).
idtac.
assert (Lt C M A C).
idtac.
assert (Lt A C B C).
idtac.
assert (Lt C M B C).
idtac.
assert (~ BetS M B C).
intro.
assert (BetS C B M).
idtac.

*****
H37 : BetS C B M
H36 : BetS M B C
H35 : Lt C M B C
H34 : Lt A C B C
H33 : Lt C M A C
H32 : Cong M C C M
H31 : Lt M C A C
H30 : Lt B M B C
H29 : Cong M B B M
H28 : Lt M B B C
H27 : Lt A B B C
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Cong C B C B).
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).
idtac.
assert (Lt M B B C).
idtac.
assert (Cong M B B M).
idtac.
assert (Lt B M B C).
idtac.
assert (Lt M C A C).
idtac.
assert (Cong M C C M).
idtac.
assert (Lt C M A C).
idtac.
assert (Lt A C B C).
idtac.
assert (Lt C M B C).
idtac.
assert (~ BetS M B C).
intro.
assert (BetS C B M).
idtac.
assert (Cong C B C B).

*****
H37 : BetS C B M
H36 : BetS M B C
H35 : Lt C M B C
H34 : Lt A C B C
H33 : Lt C M A C
H32 : Cong M C C M
H31 : Lt M C A C
H30 : Lt B M B C
H29 : Cong M B B M
H28 : Lt M B B C
H27 : Lt A B B C
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Cong C B C B
+++++
conclude cn_congruencereflexive.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).
idtac.
assert (Lt M B B C).
idtac.
assert (Cong M B B M).
idtac.
assert (Lt B M B C).
idtac.
assert (Lt M C A C).
idtac.
assert (Cong M C C M).
idtac.
assert (Lt C M A C).
idtac.
assert (Lt A C B C).
idtac.
assert (Lt C M B C).
idtac.
assert (~ BetS M B C).
intro.
assert (BetS C B M).
idtac.
assert (Cong C B C B).

*****
H38 : Cong C B C B
H37 : BetS C B M
H36 : BetS M B C
H35 : Lt C M B C
H34 : Lt A C B C
H33 : Lt C M A C
H32 : Cong M C C M
H31 : Lt M C A C
H30 : Lt B M B C
H29 : Cong M B B M
H28 : Lt M B B C
H27 : Lt A B B C
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
idtac.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).
idtac.
assert (Lt M B B C).
idtac.
assert (Cong M B B M).
idtac.
assert (Lt B M B C).
idtac.
assert (Lt M C A C).
idtac.
assert (Cong M C C M).
idtac.
assert (Lt C M A C).
idtac.
assert (Lt A C B C).
idtac.
assert (Lt C M B C).
idtac.
assert (~ BetS M B C).
intro.
assert (BetS C B M).
idtac.
assert (Cong C B C B).
idtac.

*****
H38 : Cong C B C B
H37 : BetS C B M
H36 : BetS M B C
H35 : Lt C M B C
H34 : Lt A C B C
H33 : Lt C M A C
H32 : Cong M C C M
H31 : Lt M C A C
H30 : Lt B M B C
H29 : Cong M B B M
H28 : Lt M B B C
H27 : Lt A B B C
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Lt C B C M).
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).
idtac.
assert (Lt M B B C).
idtac.
assert (Cong M B B M).
idtac.
assert (Lt B M B C).
idtac.
assert (Lt M C A C).
idtac.
assert (Cong M C C M).
idtac.
assert (Lt C M A C).
idtac.
assert (Lt A C B C).
idtac.
assert (Lt C M B C).
idtac.
assert (~ BetS M B C).
intro.
assert (BetS C B M).
idtac.
assert (Cong C B C B).
idtac.
assert (Lt C B C M).

*****
H38 : Cong C B C B
H37 : BetS C B M
H36 : BetS M B C
H35 : Lt C M B C
H34 : Lt A C B C
H33 : Lt C M A C
H32 : Cong M C C M
H31 : Lt M C A C
H30 : Lt B M B C
H29 : Cong M B B M
H28 : Lt M B B C
H27 : Lt A B B C
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Lt C B C M
+++++
conclude_def Lt .
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).
idtac.
assert (Lt M B B C).
idtac.
assert (Cong M B B M).
idtac.
assert (Lt B M B C).
idtac.
assert (Lt M C A C).
idtac.
assert (Cong M C C M).
idtac.
assert (Lt C M A C).
idtac.
assert (Lt A C B C).
idtac.
assert (Lt C M B C).
idtac.
assert (~ BetS M B C).
intro.
assert (BetS C B M).
idtac.
assert (Cong C B C B).
idtac.
assert (Lt C B C M).

*****
H39 : Lt C B C M
H38 : Cong C B C B
H37 : BetS C B M
H36 : BetS M B C
H35 : Lt C M B C
H34 : Lt A C B C
H33 : Lt C M A C
H32 : Cong M C C M
H31 : Lt M C A C
H30 : Lt B M B C
H29 : Cong M B B M
H28 : Lt M B B C
H27 : Lt A B B C
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
idtac.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).
idtac.
assert (Lt M B B C).
idtac.
assert (Cong M B B M).
idtac.
assert (Lt B M B C).
idtac.
assert (Lt M C A C).
idtac.
assert (Cong M C C M).
idtac.
assert (Lt C M A C).
idtac.
assert (Lt A C B C).
idtac.
assert (Lt C M B C).
idtac.
assert (~ BetS M B C).
intro.
assert (BetS C B M).
idtac.
assert (Cong C B C B).
idtac.
assert (Lt C B C M).
idtac.

*****
H39 : Lt C B C M
H38 : Cong C B C B
H37 : BetS C B M
H36 : BetS M B C
H35 : Lt C M B C
H34 : Lt A C B C
H33 : Lt C M A C
H32 : Cong M C C M
H31 : Lt M C A C
H30 : Lt B M B C
H29 : Cong M B B M
H28 : Lt M B B C
H27 : Lt A B B C
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Cong C B B C).
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).
idtac.
assert (Lt M B B C).
idtac.
assert (Cong M B B M).
idtac.
assert (Lt B M B C).
idtac.
assert (Lt M C A C).
idtac.
assert (Cong M C C M).
idtac.
assert (Lt C M A C).
idtac.
assert (Lt A C B C).
idtac.
assert (Lt C M B C).
idtac.
assert (~ BetS M B C).
intro.
assert (BetS C B M).
idtac.
assert (Cong C B C B).
idtac.
assert (Lt C B C M).
idtac.
assert (Cong C B B C).

*****
H39 : Lt C B C M
H38 : Cong C B C B
H37 : BetS C B M
H36 : BetS M B C
H35 : Lt C M B C
H34 : Lt A C B C
H33 : Lt C M A C
H32 : Cong M C C M
H31 : Lt M C A C
H30 : Lt B M B C
H29 : Cong M B B M
H28 : Lt M B B C
H27 : Lt A B B C
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Cong C B B C
+++++
conclude cn_equalityreverse.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).
idtac.
assert (Lt M B B C).
idtac.
assert (Cong M B B M).
idtac.
assert (Lt B M B C).
idtac.
assert (Lt M C A C).
idtac.
assert (Cong M C C M).
idtac.
assert (Lt C M A C).
idtac.
assert (Lt A C B C).
idtac.
assert (Lt C M B C).
idtac.
assert (~ BetS M B C).
intro.
assert (BetS C B M).
idtac.
assert (Cong C B C B).
idtac.
assert (Lt C B C M).
idtac.
assert (Cong C B B C).

*****
H40 : Cong C B B C
H39 : Lt C B C M
H38 : Cong C B C B
H37 : BetS C B M
H36 : BetS M B C
H35 : Lt C M B C
H34 : Lt A C B C
H33 : Lt C M A C
H32 : Cong M C C M
H31 : Lt M C A C
H30 : Lt B M B C
H29 : Cong M B B M
H28 : Lt M B B C
H27 : Lt A B B C
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
idtac.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).
idtac.
assert (Lt M B B C).
idtac.
assert (Cong M B B M).
idtac.
assert (Lt B M B C).
idtac.
assert (Lt M C A C).
idtac.
assert (Cong M C C M).
idtac.
assert (Lt C M A C).
idtac.
assert (Lt A C B C).
idtac.
assert (Lt C M B C).
idtac.
assert (~ BetS M B C).
intro.
assert (BetS C B M).
idtac.
assert (Cong C B C B).
idtac.
assert (Lt C B C M).
idtac.
assert (Cong C B B C).
idtac.

*****
H40 : Cong C B B C
H39 : Lt C B C M
H38 : Cong C B C B
H37 : BetS C B M
H36 : BetS M B C
H35 : Lt C M B C
H34 : Lt A C B C
H33 : Lt C M A C
H32 : Cong M C C M
H31 : Lt M C A C
H30 : Lt B M B C
H29 : Cong M B B M
H28 : Lt M B B C
H27 : Lt A B B C
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Lt B C C M).
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).
idtac.
assert (Lt M B B C).
idtac.
assert (Cong M B B M).
idtac.
assert (Lt B M B C).
idtac.
assert (Lt M C A C).
idtac.
assert (Cong M C C M).
idtac.
assert (Lt C M A C).
idtac.
assert (Lt A C B C).
idtac.
assert (Lt C M B C).
idtac.
assert (~ BetS M B C).
intro.
assert (BetS C B M).
idtac.
assert (Cong C B C B).
idtac.
assert (Lt C B C M).
idtac.
assert (Cong C B B C).
idtac.
assert (Lt B C C M).

*****
H40 : Cong C B B C
H39 : Lt C B C M
H38 : Cong C B C B
H37 : BetS C B M
H36 : BetS M B C
H35 : Lt C M B C
H34 : Lt A C B C
H33 : Lt C M A C
H32 : Cong M C C M
H31 : Lt M C A C
H30 : Lt B M B C
H29 : Cong M B B M
H28 : Lt M B B C
H27 : Lt A B B C
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Lt B C C M
+++++
conclude lemma_lessthancongruence2.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).
idtac.
assert (Lt M B B C).
idtac.
assert (Cong M B B M).
idtac.
assert (Lt B M B C).
idtac.
assert (Lt M C A C).
idtac.
assert (Cong M C C M).
idtac.
assert (Lt C M A C).
idtac.
assert (Lt A C B C).
idtac.
assert (Lt C M B C).
idtac.
assert (~ BetS M B C).
intro.
assert (BetS C B M).
idtac.
assert (Cong C B C B).
idtac.
assert (Lt C B C M).
idtac.
assert (Cong C B B C).
idtac.
assert (Lt B C C M).

*****
H41 : Lt B C C M
H40 : Cong C B B C
H39 : Lt C B C M
H38 : Cong C B C B
H37 : BetS C B M
H36 : BetS M B C
H35 : Lt C M B C
H34 : Lt A C B C
H33 : Lt C M A C
H32 : Cong M C C M
H31 : Lt M C A C
H30 : Lt B M B C
H29 : Cong M B B M
H28 : Lt M B B C
H27 : Lt A B B C
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
idtac.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).
idtac.
assert (Lt M B B C).
idtac.
assert (Cong M B B M).
idtac.
assert (Lt B M B C).
idtac.
assert (Lt M C A C).
idtac.
assert (Cong M C C M).
idtac.
assert (Lt C M A C).
idtac.
assert (Lt A C B C).
idtac.
assert (Lt C M B C).
idtac.
assert (~ BetS M B C).
intro.
assert (BetS C B M).
idtac.
assert (Cong C B C B).
idtac.
assert (Lt C B C M).
idtac.
assert (Cong C B B C).
idtac.
assert (Lt B C C M).
idtac.

*****
H41 : Lt B C C M
H40 : Cong C B B C
H39 : Lt C B C M
H38 : Cong C B C B
H37 : BetS C B M
H36 : BetS M B C
H35 : Lt C M B C
H34 : Lt A C B C
H33 : Lt C M A C
H32 : Cong M C C M
H31 : Lt M C A C
H30 : Lt B M B C
H29 : Cong M B B M
H28 : Lt M B B C
H27 : Lt A B B C
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (~ Lt C M B C).
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).
idtac.
assert (Lt M B B C).
idtac.
assert (Cong M B B M).
idtac.
assert (Lt B M B C).
idtac.
assert (Lt M C A C).
idtac.
assert (Cong M C C M).
idtac.
assert (Lt C M A C).
idtac.
assert (Lt A C B C).
idtac.
assert (Lt C M B C).
idtac.
assert (~ BetS M B C).
intro.
assert (BetS C B M).
idtac.
assert (Cong C B C B).
idtac.
assert (Lt C B C M).
idtac.
assert (Cong C B B C).
idtac.
assert (Lt B C C M).
idtac.
assert (~ Lt C M B C).

*****
H41 : Lt B C C M
H40 : Cong C B B C
H39 : Lt C B C M
H38 : Cong C B C B
H37 : BetS C B M
H36 : BetS M B C
H35 : Lt C M B C
H34 : Lt A C B C
H33 : Lt C M A C
H32 : Cong M C C M
H31 : Lt M C A C
H30 : Lt B M B C
H29 : Cong M B B M
H28 : Lt M B B C
H27 : Lt A B B C
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (Lt C M B C)
+++++
conclude lemma_trichotomy2.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).
idtac.
assert (Lt M B B C).
idtac.
assert (Cong M B B M).
idtac.
assert (Lt B M B C).
idtac.
assert (Lt M C A C).
idtac.
assert (Cong M C C M).
idtac.
assert (Lt C M A C).
idtac.
assert (Lt A C B C).
idtac.
assert (Lt C M B C).
idtac.
assert (~ BetS M B C).
intro.
assert (BetS C B M).
idtac.
assert (Cong C B C B).
idtac.
assert (Lt C B C M).
idtac.
assert (Cong C B B C).
idtac.
assert (Lt B C C M).
idtac.
assert (~ Lt C M B C).

*****
H42 : not (Lt C M B C)
H41 : Lt B C C M
H40 : Cong C B B C
H39 : Lt C B C M
H38 : Cong C B C B
H37 : BetS C B M
H36 : BetS M B C
H35 : Lt C M B C
H34 : Lt A C B C
H33 : Lt C M A C
H32 : Cong M C C M
H31 : Lt M C A C
H30 : Lt B M B C
H29 : Cong M B B M
H28 : Lt M B B C
H27 : Lt A B B C
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
idtac.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).
idtac.
assert (Lt M B B C).
idtac.
assert (Cong M B B M).
idtac.
assert (Lt B M B C).
idtac.
assert (Lt M C A C).
idtac.
assert (Cong M C C M).
idtac.
assert (Lt C M A C).
idtac.
assert (Lt A C B C).
idtac.
assert (Lt C M B C).
idtac.
assert (~ BetS M B C).
intro.
assert (BetS C B M).
idtac.
assert (Cong C B C B).
idtac.
assert (Lt C B C M).
idtac.
assert (Cong C B B C).
idtac.
assert (Lt B C C M).
idtac.
assert (~ Lt C M B C).
idtac.

*****
H42 : not (Lt C M B C)
H41 : Lt B C C M
H40 : Cong C B B C
H39 : Lt C B C M
H38 : Cong C B C B
H37 : BetS C B M
H36 : BetS M B C
H35 : Lt C M B C
H34 : Lt A C B C
H33 : Lt C M A C
H32 : Cong M C C M
H31 : Lt M C A C
H30 : Lt B M B C
H29 : Cong M B B M
H28 : Lt M B B C
H27 : Lt A B B C
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).
idtac.
assert (Lt M B B C).
idtac.
assert (Cong M B B M).
idtac.
assert (Lt B M B C).
idtac.
assert (Lt M C A C).
idtac.
assert (Cong M C C M).
idtac.
assert (Lt C M A C).
idtac.
assert (Lt A C B C).
idtac.
assert (Lt C M B C).
idtac.
assert (~ BetS M B C).

*****
H36 : not (BetS M B C)
H35 : Lt C M B C
H34 : Lt A C B C
H33 : Lt C M A C
H32 : Cong M C C M
H31 : Lt M C A C
H30 : Lt B M B C
H29 : Cong M B B M
H28 : Lt M B B C
H27 : Lt A B B C
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
BetS B M C
+++++
assert ((eq B C \/ eq B M \/ eq C M \/ BetS C B M \/ BetS B C M \/ BetS B M C)).
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).
idtac.
assert (Lt M B B C).
idtac.
assert (Cong M B B M).
idtac.
assert (Lt B M B C).
idtac.
assert (Lt M C A C).
idtac.
assert (Cong M C C M).
idtac.
assert (Lt C M A C).
idtac.
assert (Lt A C B C).
idtac.
assert (Lt C M B C).
idtac.
assert (~ BetS M B C).
assert ((eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C)).

*****
H36 : not (BetS M B C)
H35 : Lt C M B C
H34 : Lt A C B C
H33 : Lt C M A C
H32 : Cong M C C M
H31 : Lt M C A C
H30 : Lt B M B C
H29 : Cong M B B M
H28 : Lt M B B C
H27 : Lt A B B C
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
or (eq B C) (or (eq B M) (or (eq C M) (or (BetS C B M) (or (BetS B C M) (BetS B M C)))))
+++++
conclude_def Col .
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).
idtac.
assert (Lt M B B C).
idtac.
assert (Cong M B B M).
idtac.
assert (Lt B M B C).
idtac.
assert (Lt M C A C).
idtac.
assert (Cong M C C M).
idtac.
assert (Lt C M A C).
idtac.
assert (Lt A C B C).
idtac.
assert (Lt C M B C).
idtac.
assert (~ BetS M B C).
assert ((eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C)).

*****
H37 : or (eq B C)\n (or (eq B M)\n (or (eq C M) (or (BetS C B M) (or (BetS B C M) (BetS B M C)))))
H36 : not (BetS M B C)
H35 : Lt C M B C
H34 : Lt A C B C
H33 : Lt C M A C
H32 : Cong M C C M
H31 : Lt M C A C
H30 : Lt B M B C
H29 : Cong M B B M
H28 : Lt M B B C
H27 : Lt A B B C
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
BetS B M C
+++++
idtac.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).
idtac.
assert (Lt M B B C).
idtac.
assert (Cong M B B M).
idtac.
assert (Lt B M B C).
idtac.
assert (Lt M C A C).
idtac.
assert (Cong M C C M).
idtac.
assert (Lt C M A C).
idtac.
assert (Lt A C B C).
idtac.
assert (Lt C M B C).
idtac.
assert (~ BetS M B C).
assert ((eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C)).
idtac.

*****
H37 : or (eq B C)\n (or (eq B M)\n (or (eq C M) (or (BetS C B M) (or (BetS B C M) (BetS B M C)))))
H36 : not (BetS M B C)
H35 : Lt C M B C
H34 : Lt A C B C
H33 : Lt C M A C
H32 : Cong M C C M
H31 : Lt M C A C
H30 : Lt B M B C
H29 : Cong M B B M
H28 : Lt M B B C
H27 : Lt A B B C
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
BetS B M C
+++++
assert (Out B C M).
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).
idtac.
assert (Lt M B B C).
idtac.
assert (Cong M B B M).
idtac.
assert (Lt B M B C).
idtac.
assert (Lt M C A C).
idtac.
assert (Cong M C C M).
idtac.
assert (Lt C M A C).
idtac.
assert (Lt A C B C).
idtac.
assert (Lt C M B C).
idtac.
assert (~ BetS M B C).
assert ((eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C)).
idtac.
assert (Out B C M).

*****
H37 : or (eq B C)\n (or (eq B M)\n (or (eq C M) (or (BetS C B M) (or (BetS B C M) (BetS B M C)))))
H36 : not (BetS M B C)
H35 : Lt C M B C
H34 : Lt A C B C
H33 : Lt C M A C
H32 : Cong M C C M
H31 : Lt M C A C
H30 : Lt B M B C
H29 : Cong M B B M
H28 : Lt M B B C
H27 : Lt A B B C
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Out B C M
+++++
by cases on (eq B C \/ eq B M \/ eq C M \/ BetS C B M \/ BetS B C M \/ BetS B M C).
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).
idtac.
assert (Lt M B B C).
idtac.
assert (Cong M B B M).
idtac.
assert (Lt B M B C).
idtac.
assert (Lt M C A C).
idtac.
assert (Cong M C C M).
idtac.
assert (Lt C M A C).
idtac.
assert (Lt A C B C).
idtac.
assert (Lt C M B C).
idtac.
assert (~ BetS M B C).
assert ((eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C)).
idtac.
assert (Out B C M).
by cases on (eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C).

*****
H38 : eq B C
H36 : not (BetS M B C)
H35 : Lt C M B C
H34 : Lt A C B C
H33 : Lt C M A C
H32 : Cong M C C M
H31 : Lt M C A C
H30 : Lt B M B C
H29 : Cong M B B M
H28 : Lt M B B C
H27 : Lt A B B C
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Out B C M
+++++
assert (~ ~ Out B C M).
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).
idtac.
assert (Lt M B B C).
idtac.
assert (Cong M B B M).
idtac.
assert (Lt B M B C).
idtac.
assert (Lt M C A C).
idtac.
assert (Cong M C C M).
idtac.
assert (Lt C M A C).
idtac.
assert (Lt A C B C).
idtac.
assert (Lt C M B C).
idtac.
assert (~ BetS M B C).
assert ((eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C)).
idtac.
assert (Out B C M).
by cases on (eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C).
assert (~ ~ Out B C M).

*****
H38 : eq B C
H36 : not (BetS M B C)
H35 : Lt C M B C
H34 : Lt A C B C
H33 : Lt C M A C
H32 : Cong M C C M
H31 : Lt M C A C
H30 : Lt B M B C
H29 : Cong M B B M
H28 : Lt M B B C
H27 : Lt A B B C
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (not (Out B C M))
+++++
intro.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).
idtac.
assert (Lt M B B C).
idtac.
assert (Cong M B B M).
idtac.
assert (Lt B M B C).
idtac.
assert (Lt M C A C).
idtac.
assert (Cong M C C M).
idtac.
assert (Lt C M A C).
idtac.
assert (Lt A C B C).
idtac.
assert (Lt C M B C).
idtac.
assert (~ BetS M B C).
assert ((eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C)).
idtac.
assert (Out B C M).
by cases on (eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C).
assert (~ ~ Out B C M).
intro.

*****
H37 : not (Out B C M)
H38 : eq B C
H36 : not (BetS M B C)
H35 : Lt C M B C
H34 : Lt A C B C
H33 : Lt C M A C
H32 : Cong M C C M
H31 : Lt M C A C
H30 : Lt B M B C
H29 : Cong M B B M
H28 : Lt M B B C
H27 : Lt A B B C
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).
idtac.
assert (Lt M B B C).
idtac.
assert (Cong M B B M).
idtac.
assert (Lt B M B C).
idtac.
assert (Lt M C A C).
idtac.
assert (Cong M C C M).
idtac.
assert (Lt C M A C).
idtac.
assert (Lt A C B C).
idtac.
assert (Lt C M B C).
idtac.
assert (~ BetS M B C).
assert ((eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C)).
idtac.
assert (Out B C M).
by cases on (eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C).
assert (~ ~ Out B C M).

*****
H37 : not (not (Out B C M))
H38 : eq B C
H36 : not (BetS M B C)
H35 : Lt C M B C
H34 : Lt A C B C
H33 : Lt C M A C
H32 : Cong M C C M
H31 : Lt M C A C
H30 : Lt B M B C
H29 : Cong M B B M
H28 : Lt M B B C
H27 : Lt A B B C
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Out B C M
+++++
close.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).
idtac.
assert (Lt M B B C).
idtac.
assert (Cong M B B M).
idtac.
assert (Lt B M B C).
idtac.
assert (Lt M C A C).
idtac.
assert (Cong M C C M).
idtac.
assert (Lt C M A C).
idtac.
assert (Lt A C B C).
idtac.
assert (Lt C M B C).
idtac.
assert (~ BetS M B C).
assert ((eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C)).
idtac.
assert (Out B C M).
by cases on (eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C).

*****
H39 : eq B M
H36 : not (BetS M B C)
H35 : Lt C M B C
H34 : Lt A C B C
H33 : Lt C M A C
H32 : Cong M C C M
H31 : Lt M C A C
H30 : Lt B M B C
H29 : Cong M B B M
H28 : Lt M B B C
H27 : Lt A B B C
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Out B C M
+++++
assert (~ ~ Out B C M).
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).
idtac.
assert (Lt M B B C).
idtac.
assert (Cong M B B M).
idtac.
assert (Lt B M B C).
idtac.
assert (Lt M C A C).
idtac.
assert (Cong M C C M).
idtac.
assert (Lt C M A C).
idtac.
assert (Lt A C B C).
idtac.
assert (Lt C M B C).
idtac.
assert (~ BetS M B C).
assert ((eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C)).
idtac.
assert (Out B C M).
by cases on (eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C).
assert (~ ~ Out B C M).

*****
H39 : eq B M
H36 : not (BetS M B C)
H35 : Lt C M B C
H34 : Lt A C B C
H33 : Lt C M A C
H32 : Cong M C C M
H31 : Lt M C A C
H30 : Lt B M B C
H29 : Cong M B B M
H28 : Lt M B B C
H27 : Lt A B B C
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (not (Out B C M))
+++++
intro.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).
idtac.
assert (Lt M B B C).
idtac.
assert (Cong M B B M).
idtac.
assert (Lt B M B C).
idtac.
assert (Lt M C A C).
idtac.
assert (Cong M C C M).
idtac.
assert (Lt C M A C).
idtac.
assert (Lt A C B C).
idtac.
assert (Lt C M B C).
idtac.
assert (~ BetS M B C).
assert ((eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C)).
idtac.
assert (Out B C M).
by cases on (eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C).
assert (~ ~ Out B C M).
intro.

*****
H37 : not (Out B C M)
H39 : eq B M
H36 : not (BetS M B C)
H35 : Lt C M B C
H34 : Lt A C B C
H33 : Lt C M A C
H32 : Cong M C C M
H31 : Lt M C A C
H30 : Lt B M B C
H29 : Cong M B B M
H28 : Lt M B B C
H27 : Lt A B B C
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).
idtac.
assert (Lt M B B C).
idtac.
assert (Cong M B B M).
idtac.
assert (Lt B M B C).
idtac.
assert (Lt M C A C).
idtac.
assert (Cong M C C M).
idtac.
assert (Lt C M A C).
idtac.
assert (Lt A C B C).
idtac.
assert (Lt C M B C).
idtac.
assert (~ BetS M B C).
assert ((eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C)).
idtac.
assert (Out B C M).
by cases on (eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C).
assert (~ ~ Out B C M).

*****
H37 : not (not (Out B C M))
H39 : eq B M
H36 : not (BetS M B C)
H35 : Lt C M B C
H34 : Lt A C B C
H33 : Lt C M A C
H32 : Cong M C C M
H31 : Lt M C A C
H30 : Lt B M B C
H29 : Cong M B B M
H28 : Lt M B B C
H27 : Lt A B B C
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Out B C M
+++++
close.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).
idtac.
assert (Lt M B B C).
idtac.
assert (Cong M B B M).
idtac.
assert (Lt B M B C).
idtac.
assert (Lt M C A C).
idtac.
assert (Cong M C C M).
idtac.
assert (Lt C M A C).
idtac.
assert (Lt A C B C).
idtac.
assert (Lt C M B C).
idtac.
assert (~ BetS M B C).
assert ((eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C)).
idtac.
assert (Out B C M).
by cases on (eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C).

*****
H38 : eq C M
H36 : not (BetS M B C)
H35 : Lt C M B C
H34 : Lt A C B C
H33 : Lt C M A C
H32 : Cong M C C M
H31 : Lt M C A C
H30 : Lt B M B C
H29 : Cong M B B M
H28 : Lt M B B C
H27 : Lt A B B C
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Out B C M
+++++
assert (~ ~ Out B C M).
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).
idtac.
assert (Lt M B B C).
idtac.
assert (Cong M B B M).
idtac.
assert (Lt B M B C).
idtac.
assert (Lt M C A C).
idtac.
assert (Cong M C C M).
idtac.
assert (Lt C M A C).
idtac.
assert (Lt A C B C).
idtac.
assert (Lt C M B C).
idtac.
assert (~ BetS M B C).
assert ((eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C)).
idtac.
assert (Out B C M).
by cases on (eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C).
assert (~ ~ Out B C M).

*****
H38 : eq C M
H36 : not (BetS M B C)
H35 : Lt C M B C
H34 : Lt A C B C
H33 : Lt C M A C
H32 : Cong M C C M
H31 : Lt M C A C
H30 : Lt B M B C
H29 : Cong M B B M
H28 : Lt M B B C
H27 : Lt A B B C
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (not (Out B C M))
+++++
intro.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).
idtac.
assert (Lt M B B C).
idtac.
assert (Cong M B B M).
idtac.
assert (Lt B M B C).
idtac.
assert (Lt M C A C).
idtac.
assert (Cong M C C M).
idtac.
assert (Lt C M A C).
idtac.
assert (Lt A C B C).
idtac.
assert (Lt C M B C).
idtac.
assert (~ BetS M B C).
assert ((eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C)).
idtac.
assert (Out B C M).
by cases on (eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C).
assert (~ ~ Out B C M).
intro.

*****
H37 : not (Out B C M)
H38 : eq C M
H36 : not (BetS M B C)
H35 : Lt C M B C
H34 : Lt A C B C
H33 : Lt C M A C
H32 : Cong M C C M
H31 : Lt M C A C
H30 : Lt B M B C
H29 : Cong M B B M
H28 : Lt M B B C
H27 : Lt A B B C
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).
idtac.
assert (Lt M B B C).
idtac.
assert (Cong M B B M).
idtac.
assert (Lt B M B C).
idtac.
assert (Lt M C A C).
idtac.
assert (Cong M C C M).
idtac.
assert (Lt C M A C).
idtac.
assert (Lt A C B C).
idtac.
assert (Lt C M B C).
idtac.
assert (~ BetS M B C).
assert ((eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C)).
idtac.
assert (Out B C M).
by cases on (eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C).
assert (~ ~ Out B C M).

*****
H37 : not (not (Out B C M))
H38 : eq C M
H36 : not (BetS M B C)
H35 : Lt C M B C
H34 : Lt A C B C
H33 : Lt C M A C
H32 : Cong M C C M
H31 : Lt M C A C
H30 : Lt B M B C
H29 : Cong M B B M
H28 : Lt M B B C
H27 : Lt A B B C
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Out B C M
+++++
close.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).
idtac.
assert (Lt M B B C).
idtac.
assert (Cong M B B M).
idtac.
assert (Lt B M B C).
idtac.
assert (Lt M C A C).
idtac.
assert (Cong M C C M).
idtac.
assert (Lt C M A C).
idtac.
assert (Lt A C B C).
idtac.
assert (Lt C M B C).
idtac.
assert (~ BetS M B C).
assert ((eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C)).
idtac.
assert (Out B C M).
by cases on (eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C).

*****
H39 : BetS C B M
H36 : not (BetS M B C)
H35 : Lt C M B C
H34 : Lt A C B C
H33 : Lt C M A C
H32 : Cong M C C M
H31 : Lt M C A C
H30 : Lt B M B C
H29 : Cong M B B M
H28 : Lt M B B C
H27 : Lt A B B C
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Out B C M
+++++
assert (~ ~ Out B C M).
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).
idtac.
assert (Lt M B B C).
idtac.
assert (Cong M B B M).
idtac.
assert (Lt B M B C).
idtac.
assert (Lt M C A C).
idtac.
assert (Cong M C C M).
idtac.
assert (Lt C M A C).
idtac.
assert (Lt A C B C).
idtac.
assert (Lt C M B C).
idtac.
assert (~ BetS M B C).
assert ((eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C)).
idtac.
assert (Out B C M).
by cases on (eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C).
assert (~ ~ Out B C M).

*****
H39 : BetS C B M
H36 : not (BetS M B C)
H35 : Lt C M B C
H34 : Lt A C B C
H33 : Lt C M A C
H32 : Cong M C C M
H31 : Lt M C A C
H30 : Lt B M B C
H29 : Cong M B B M
H28 : Lt M B B C
H27 : Lt A B B C
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (not (Out B C M))
+++++
intro.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).
idtac.
assert (Lt M B B C).
idtac.
assert (Cong M B B M).
idtac.
assert (Lt B M B C).
idtac.
assert (Lt M C A C).
idtac.
assert (Cong M C C M).
idtac.
assert (Lt C M A C).
idtac.
assert (Lt A C B C).
idtac.
assert (Lt C M B C).
idtac.
assert (~ BetS M B C).
assert ((eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C)).
idtac.
assert (Out B C M).
by cases on (eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C).
assert (~ ~ Out B C M).
intro.

*****
H37 : not (Out B C M)
H39 : BetS C B M
H36 : not (BetS M B C)
H35 : Lt C M B C
H34 : Lt A C B C
H33 : Lt C M A C
H32 : Cong M C C M
H31 : Lt M C A C
H30 : Lt B M B C
H29 : Cong M B B M
H28 : Lt M B B C
H27 : Lt A B B C
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (BetS M B C).
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).
idtac.
assert (Lt M B B C).
idtac.
assert (Cong M B B M).
idtac.
assert (Lt B M B C).
idtac.
assert (Lt M C A C).
idtac.
assert (Cong M C C M).
idtac.
assert (Lt C M A C).
idtac.
assert (Lt A C B C).
idtac.
assert (Lt C M B C).
idtac.
assert (~ BetS M B C).
assert ((eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C)).
idtac.
assert (Out B C M).
by cases on (eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C).
assert (~ ~ Out B C M).
intro.
assert (BetS M B C).

*****
H37 : not (Out B C M)
H39 : BetS C B M
H36 : not (BetS M B C)
H35 : Lt C M B C
H34 : Lt A C B C
H33 : Lt C M A C
H32 : Cong M C C M
H31 : Lt M C A C
H30 : Lt B M B C
H29 : Cong M B B M
H28 : Lt M B B C
H27 : Lt A B B C
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
BetS M B C
+++++
conclude axiom_betweennesssymmetry.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).
idtac.
assert (Lt M B B C).
idtac.
assert (Cong M B B M).
idtac.
assert (Lt B M B C).
idtac.
assert (Lt M C A C).
idtac.
assert (Cong M C C M).
idtac.
assert (Lt C M A C).
idtac.
assert (Lt A C B C).
idtac.
assert (Lt C M B C).
idtac.
assert (~ BetS M B C).
assert ((eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C)).
idtac.
assert (Out B C M).
by cases on (eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C).
assert (~ ~ Out B C M).
intro.
assert (BetS M B C).

*****
H38 : BetS M B C
H37 : not (Out B C M)
H39 : BetS C B M
H36 : not (BetS M B C)
H35 : Lt C M B C
H34 : Lt A C B C
H33 : Lt C M A C
H32 : Cong M C C M
H31 : Lt M C A C
H30 : Lt B M B C
H29 : Cong M B B M
H28 : Lt M B B C
H27 : Lt A B B C
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
idtac.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).
idtac.
assert (Lt M B B C).
idtac.
assert (Cong M B B M).
idtac.
assert (Lt B M B C).
idtac.
assert (Lt M C A C).
idtac.
assert (Cong M C C M).
idtac.
assert (Lt C M A C).
idtac.
assert (Lt A C B C).
idtac.
assert (Lt C M B C).
idtac.
assert (~ BetS M B C).
assert ((eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C)).
idtac.
assert (Out B C M).
by cases on (eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C).
assert (~ ~ Out B C M).
intro.
assert (BetS M B C).
idtac.

*****
H38 : BetS M B C
H37 : not (Out B C M)
H39 : BetS C B M
H36 : not (BetS M B C)
H35 : Lt C M B C
H34 : Lt A C B C
H33 : Lt C M A C
H32 : Cong M C C M
H31 : Lt M C A C
H30 : Lt B M B C
H29 : Cong M B B M
H28 : Lt M B B C
H27 : Lt A B B C
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).
idtac.
assert (Lt M B B C).
idtac.
assert (Cong M B B M).
idtac.
assert (Lt B M B C).
idtac.
assert (Lt M C A C).
idtac.
assert (Cong M C C M).
idtac.
assert (Lt C M A C).
idtac.
assert (Lt A C B C).
idtac.
assert (Lt C M B C).
idtac.
assert (~ BetS M B C).
assert ((eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C)).
idtac.
assert (Out B C M).
by cases on (eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C).
assert (~ ~ Out B C M).

*****
H37 : not (not (Out B C M))
H39 : BetS C B M
H36 : not (BetS M B C)
H35 : Lt C M B C
H34 : Lt A C B C
H33 : Lt C M A C
H32 : Cong M C C M
H31 : Lt M C A C
H30 : Lt B M B C
H29 : Cong M B B M
H28 : Lt M B B C
H27 : Lt A B B C
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Out B C M
+++++
close.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).
idtac.
assert (Lt M B B C).
idtac.
assert (Cong M B B M).
idtac.
assert (Lt B M B C).
idtac.
assert (Lt M C A C).
idtac.
assert (Cong M C C M).
idtac.
assert (Lt C M A C).
idtac.
assert (Lt A C B C).
idtac.
assert (Lt C M B C).
idtac.
assert (~ BetS M B C).
assert ((eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C)).
idtac.
assert (Out B C M).
by cases on (eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C).

*****
H38 : BetS B C M
H36 : not (BetS M B C)
H35 : Lt C M B C
H34 : Lt A C B C
H33 : Lt C M A C
H32 : Cong M C C M
H31 : Lt M C A C
H30 : Lt B M B C
H29 : Cong M B B M
H28 : Lt M B B C
H27 : Lt A B B C
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Out B C M
+++++
assert (Out B C M).
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).
idtac.
assert (Lt M B B C).
idtac.
assert (Cong M B B M).
idtac.
assert (Lt B M B C).
idtac.
assert (Lt M C A C).
idtac.
assert (Cong M C C M).
idtac.
assert (Lt C M A C).
idtac.
assert (Lt A C B C).
idtac.
assert (Lt C M B C).
idtac.
assert (~ BetS M B C).
assert ((eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C)).
idtac.
assert (Out B C M).
by cases on (eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C).
assert (Out B C M).

*****
H38 : BetS B C M
H36 : not (BetS M B C)
H35 : Lt C M B C
H34 : Lt A C B C
H33 : Lt C M A C
H32 : Cong M C C M
H31 : Lt M C A C
H30 : Lt B M B C
H29 : Cong M B B M
H28 : Lt M B B C
H27 : Lt A B B C
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Out B C M
+++++
conclude lemma_ray4.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).
idtac.
assert (Lt M B B C).
idtac.
assert (Cong M B B M).
idtac.
assert (Lt B M B C).
idtac.
assert (Lt M C A C).
idtac.
assert (Cong M C C M).
idtac.
assert (Lt C M A C).
idtac.
assert (Lt A C B C).
idtac.
assert (Lt C M B C).
idtac.
assert (~ BetS M B C).
assert ((eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C)).
idtac.
assert (Out B C M).
by cases on (eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C).
assert (Out B C M).

*****
H37 : Out B C M
H38 : BetS B C M
H36 : not (BetS M B C)
H35 : Lt C M B C
H34 : Lt A C B C
H33 : Lt C M A C
H32 : Cong M C C M
H31 : Lt M C A C
H30 : Lt B M B C
H29 : Cong M B B M
H28 : Lt M B B C
H27 : Lt A B B C
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Out B C M
+++++
idtac.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).
idtac.
assert (Lt M B B C).
idtac.
assert (Cong M B B M).
idtac.
assert (Lt B M B C).
idtac.
assert (Lt M C A C).
idtac.
assert (Cong M C C M).
idtac.
assert (Lt C M A C).
idtac.
assert (Lt A C B C).
idtac.
assert (Lt C M B C).
idtac.
assert (~ BetS M B C).
assert ((eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C)).
idtac.
assert (Out B C M).
by cases on (eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C).
assert (Out B C M).
idtac.

*****
H37 : Out B C M
H38 : BetS B C M
H36 : not (BetS M B C)
H35 : Lt C M B C
H34 : Lt A C B C
H33 : Lt C M A C
H32 : Cong M C C M
H31 : Lt M C A C
H30 : Lt B M B C
H29 : Cong M B B M
H28 : Lt M B B C
H27 : Lt A B B C
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Out B C M
+++++
close.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).
idtac.
assert (Lt M B B C).
idtac.
assert (Cong M B B M).
idtac.
assert (Lt B M B C).
idtac.
assert (Lt M C A C).
idtac.
assert (Cong M C C M).
idtac.
assert (Lt C M A C).
idtac.
assert (Lt A C B C).
idtac.
assert (Lt C M B C).
idtac.
assert (~ BetS M B C).
assert ((eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C)).
idtac.
assert (Out B C M).
by cases on (eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C).

*****
H38 : BetS B M C
H36 : not (BetS M B C)
H35 : Lt C M B C
H34 : Lt A C B C
H33 : Lt C M A C
H32 : Cong M C C M
H31 : Lt M C A C
H30 : Lt B M B C
H29 : Cong M B B M
H28 : Lt M B B C
H27 : Lt A B B C
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Out B C M
+++++
assert (Out B M C).
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).
idtac.
assert (Lt M B B C).
idtac.
assert (Cong M B B M).
idtac.
assert (Lt B M B C).
idtac.
assert (Lt M C A C).
idtac.
assert (Cong M C C M).
idtac.
assert (Lt C M A C).
idtac.
assert (Lt A C B C).
idtac.
assert (Lt C M B C).
idtac.
assert (~ BetS M B C).
assert ((eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C)).
idtac.
assert (Out B C M).
by cases on (eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C).
assert (Out B M C).

*****
H38 : BetS B M C
H36 : not (BetS M B C)
H35 : Lt C M B C
H34 : Lt A C B C
H33 : Lt C M A C
H32 : Cong M C C M
H31 : Lt M C A C
H30 : Lt B M B C
H29 : Cong M B B M
H28 : Lt M B B C
H27 : Lt A B B C
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Out B M C
+++++
conclude lemma_ray4.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).
idtac.
assert (Lt M B B C).
idtac.
assert (Cong M B B M).
idtac.
assert (Lt B M B C).
idtac.
assert (Lt M C A C).
idtac.
assert (Cong M C C M).
idtac.
assert (Lt C M A C).
idtac.
assert (Lt A C B C).
idtac.
assert (Lt C M B C).
idtac.
assert (~ BetS M B C).
assert ((eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C)).
idtac.
assert (Out B C M).
by cases on (eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C).
assert (Out B M C).

*****
H37 : Out B M C
H38 : BetS B M C
H36 : not (BetS M B C)
H35 : Lt C M B C
H34 : Lt A C B C
H33 : Lt C M A C
H32 : Cong M C C M
H31 : Lt M C A C
H30 : Lt B M B C
H29 : Cong M B B M
H28 : Lt M B B C
H27 : Lt A B B C
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Out B C M
+++++
idtac.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).
idtac.
assert (Lt M B B C).
idtac.
assert (Cong M B B M).
idtac.
assert (Lt B M B C).
idtac.
assert (Lt M C A C).
idtac.
assert (Cong M C C M).
idtac.
assert (Lt C M A C).
idtac.
assert (Lt A C B C).
idtac.
assert (Lt C M B C).
idtac.
assert (~ BetS M B C).
assert ((eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C)).
idtac.
assert (Out B C M).
by cases on (eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C).
assert (Out B M C).
idtac.

*****
H37 : Out B M C
H38 : BetS B M C
H36 : not (BetS M B C)
H35 : Lt C M B C
H34 : Lt A C B C
H33 : Lt C M A C
H32 : Cong M C C M
H31 : Lt M C A C
H30 : Lt B M B C
H29 : Cong M B B M
H28 : Lt M B B C
H27 : Lt A B B C
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Out B C M
+++++
assert (Out B C M).
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).
idtac.
assert (Lt M B B C).
idtac.
assert (Cong M B B M).
idtac.
assert (Lt B M B C).
idtac.
assert (Lt M C A C).
idtac.
assert (Cong M C C M).
idtac.
assert (Lt C M A C).
idtac.
assert (Lt A C B C).
idtac.
assert (Lt C M B C).
idtac.
assert (~ BetS M B C).
assert ((eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C)).
idtac.
assert (Out B C M).
by cases on (eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C).
assert (Out B M C).
idtac.
assert (Out B C M).

*****
H37 : Out B M C
H38 : BetS B M C
H36 : not (BetS M B C)
H35 : Lt C M B C
H34 : Lt A C B C
H33 : Lt C M A C
H32 : Cong M C C M
H31 : Lt M C A C
H30 : Lt B M B C
H29 : Cong M B B M
H28 : Lt M B B C
H27 : Lt A B B C
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Out B C M
+++++
conclude lemma_ray5.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).
idtac.
assert (Lt M B B C).
idtac.
assert (Cong M B B M).
idtac.
assert (Lt B M B C).
idtac.
assert (Lt M C A C).
idtac.
assert (Cong M C C M).
idtac.
assert (Lt C M A C).
idtac.
assert (Lt A C B C).
idtac.
assert (Lt C M B C).
idtac.
assert (~ BetS M B C).
assert ((eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C)).
idtac.
assert (Out B C M).
by cases on (eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C).
assert (Out B M C).
idtac.
assert (Out B C M).

*****
H39 : Out B C M
H37 : Out B M C
H38 : BetS B M C
H36 : not (BetS M B C)
H35 : Lt C M B C
H34 : Lt A C B C
H33 : Lt C M A C
H32 : Cong M C C M
H31 : Lt M C A C
H30 : Lt B M B C
H29 : Cong M B B M
H28 : Lt M B B C
H27 : Lt A B B C
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Out B C M
+++++
idtac.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).
idtac.
assert (Lt M B B C).
idtac.
assert (Cong M B B M).
idtac.
assert (Lt B M B C).
idtac.
assert (Lt M C A C).
idtac.
assert (Cong M C C M).
idtac.
assert (Lt C M A C).
idtac.
assert (Lt A C B C).
idtac.
assert (Lt C M B C).
idtac.
assert (~ BetS M B C).
assert ((eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C)).
idtac.
assert (Out B C M).
by cases on (eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C).
assert (Out B M C).
idtac.
assert (Out B C M).
idtac.

*****
H39 : Out B C M
H37 : Out B M C
H38 : BetS B M C
H36 : not (BetS M B C)
H35 : Lt C M B C
H34 : Lt A C B C
H33 : Lt C M A C
H32 : Cong M C C M
H31 : Lt M C A C
H30 : Lt B M B C
H29 : Cong M B B M
H28 : Lt M B B C
H27 : Lt A B B C
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Out B C M
+++++
close.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).
idtac.
assert (Lt M B B C).
idtac.
assert (Cong M B B M).
idtac.
assert (Lt B M B C).
idtac.
assert (Lt M C A C).
idtac.
assert (Cong M C C M).
idtac.
assert (Lt C M A C).
idtac.
assert (Lt A C B C).
idtac.
assert (Lt C M B C).
idtac.
assert (~ BetS M B C).
assert ((eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C)).
idtac.
assert (Out B C M).

*****
H38 : Out B C M
H37 : or (eq B C)\n (or (eq B M)\n (or (eq C M) (or (BetS C B M) (or (BetS B C M) (BetS B M C)))))
H36 : not (BetS M B C)
H35 : Lt C M B C
H34 : Lt A C B C
H33 : Lt C M A C
H32 : Cong M C C M
H31 : Lt M C A C
H30 : Lt B M B C
H29 : Cong M B B M
H28 : Lt M B B C
H27 : Lt A B B C
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
BetS B M C
+++++
assert (~ BetS B C M).
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).
idtac.
assert (Lt M B B C).
idtac.
assert (Cong M B B M).
idtac.
assert (Lt B M B C).
idtac.
assert (Lt M C A C).
idtac.
assert (Cong M C C M).
idtac.
assert (Lt C M A C).
idtac.
assert (Lt A C B C).
idtac.
assert (Lt C M B C).
idtac.
assert (~ BetS M B C).
assert ((eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C)).
idtac.
assert (Out B C M).
assert (~ BetS B C M).

*****
H38 : Out B C M
H37 : or (eq B C)\n (or (eq B M)\n (or (eq C M) (or (BetS C B M) (or (BetS B C M) (BetS B M C)))))
H36 : not (BetS M B C)
H35 : Lt C M B C
H34 : Lt A C B C
H33 : Lt C M A C
H32 : Cong M C C M
H31 : Lt M C A C
H30 : Lt B M B C
H29 : Cong M B B M
H28 : Lt M B B C
H27 : Lt A B B C
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (BetS B C M)
+++++
intro.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).
idtac.
assert (Lt M B B C).
idtac.
assert (Cong M B B M).
idtac.
assert (Lt B M B C).
idtac.
assert (Lt M C A C).
idtac.
assert (Cong M C C M).
idtac.
assert (Lt C M A C).
idtac.
assert (Lt A C B C).
idtac.
assert (Lt C M B C).
idtac.
assert (~ BetS M B C).
assert ((eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C)).
idtac.
assert (Out B C M).
assert (~ BetS B C M).
intro.

*****
H39 : BetS B C M
H38 : Out B C M
H37 : or (eq B C)\n (or (eq B M)\n (or (eq C M) (or (BetS C B M) (or (BetS B C M) (BetS B M C)))))
H36 : not (BetS M B C)
H35 : Lt C M B C
H34 : Lt A C B C
H33 : Lt C M A C
H32 : Cong M C C M
H31 : Lt M C A C
H30 : Lt B M B C
H29 : Cong M B B M
H28 : Lt M B B C
H27 : Lt A B B C
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Cong B C B C).
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).
idtac.
assert (Lt M B B C).
idtac.
assert (Cong M B B M).
idtac.
assert (Lt B M B C).
idtac.
assert (Lt M C A C).
idtac.
assert (Cong M C C M).
idtac.
assert (Lt C M A C).
idtac.
assert (Lt A C B C).
idtac.
assert (Lt C M B C).
idtac.
assert (~ BetS M B C).
assert ((eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C)).
idtac.
assert (Out B C M).
assert (~ BetS B C M).
intro.
assert (Cong B C B C).

*****
H39 : BetS B C M
H38 : Out B C M
H37 : or (eq B C)\n (or (eq B M)\n (or (eq C M) (or (BetS C B M) (or (BetS B C M) (BetS B M C)))))
H36 : not (BetS M B C)
H35 : Lt C M B C
H34 : Lt A C B C
H33 : Lt C M A C
H32 : Cong M C C M
H31 : Lt M C A C
H30 : Lt B M B C
H29 : Cong M B B M
H28 : Lt M B B C
H27 : Lt A B B C
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Cong B C B C
+++++
conclude cn_congruencereflexive.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).
idtac.
assert (Lt M B B C).
idtac.
assert (Cong M B B M).
idtac.
assert (Lt B M B C).
idtac.
assert (Lt M C A C).
idtac.
assert (Cong M C C M).
idtac.
assert (Lt C M A C).
idtac.
assert (Lt A C B C).
idtac.
assert (Lt C M B C).
idtac.
assert (~ BetS M B C).
assert ((eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C)).
idtac.
assert (Out B C M).
assert (~ BetS B C M).
intro.
assert (Cong B C B C).

*****
H40 : Cong B C B C
H39 : BetS B C M
H38 : Out B C M
H37 : or (eq B C)\n (or (eq B M)\n (or (eq C M) (or (BetS C B M) (or (BetS B C M) (BetS B M C)))))
H36 : not (BetS M B C)
H35 : Lt C M B C
H34 : Lt A C B C
H33 : Lt C M A C
H32 : Cong M C C M
H31 : Lt M C A C
H30 : Lt B M B C
H29 : Cong M B B M
H28 : Lt M B B C
H27 : Lt A B B C
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
idtac.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).
idtac.
assert (Lt M B B C).
idtac.
assert (Cong M B B M).
idtac.
assert (Lt B M B C).
idtac.
assert (Lt M C A C).
idtac.
assert (Cong M C C M).
idtac.
assert (Lt C M A C).
idtac.
assert (Lt A C B C).
idtac.
assert (Lt C M B C).
idtac.
assert (~ BetS M B C).
assert ((eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C)).
idtac.
assert (Out B C M).
assert (~ BetS B C M).
intro.
assert (Cong B C B C).
idtac.

*****
H40 : Cong B C B C
H39 : BetS B C M
H38 : Out B C M
H37 : or (eq B C)\n (or (eq B M)\n (or (eq C M) (or (BetS C B M) (or (BetS B C M) (BetS B M C)))))
H36 : not (BetS M B C)
H35 : Lt C M B C
H34 : Lt A C B C
H33 : Lt C M A C
H32 : Cong M C C M
H31 : Lt M C A C
H30 : Lt B M B C
H29 : Cong M B B M
H28 : Lt M B B C
H27 : Lt A B B C
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Lt B C B M).
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).
idtac.
assert (Lt M B B C).
idtac.
assert (Cong M B B M).
idtac.
assert (Lt B M B C).
idtac.
assert (Lt M C A C).
idtac.
assert (Cong M C C M).
idtac.
assert (Lt C M A C).
idtac.
assert (Lt A C B C).
idtac.
assert (Lt C M B C).
idtac.
assert (~ BetS M B C).
assert ((eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C)).
idtac.
assert (Out B C M).
assert (~ BetS B C M).
intro.
assert (Cong B C B C).
idtac.
assert (Lt B C B M).

*****
H40 : Cong B C B C
H39 : BetS B C M
H38 : Out B C M
H37 : or (eq B C)\n (or (eq B M)\n (or (eq C M) (or (BetS C B M) (or (BetS B C M) (BetS B M C)))))
H36 : not (BetS M B C)
H35 : Lt C M B C
H34 : Lt A C B C
H33 : Lt C M A C
H32 : Cong M C C M
H31 : Lt M C A C
H30 : Lt B M B C
H29 : Cong M B B M
H28 : Lt M B B C
H27 : Lt A B B C
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Lt B C B M
+++++
conclude_def Lt .
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).
idtac.
assert (Lt M B B C).
idtac.
assert (Cong M B B M).
idtac.
assert (Lt B M B C).
idtac.
assert (Lt M C A C).
idtac.
assert (Cong M C C M).
idtac.
assert (Lt C M A C).
idtac.
assert (Lt A C B C).
idtac.
assert (Lt C M B C).
idtac.
assert (~ BetS M B C).
assert ((eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C)).
idtac.
assert (Out B C M).
assert (~ BetS B C M).
intro.
assert (Cong B C B C).
idtac.
assert (Lt B C B M).

*****
H41 : Lt B C B M
H40 : Cong B C B C
H39 : BetS B C M
H38 : Out B C M
H37 : or (eq B C)\n (or (eq B M)\n (or (eq C M) (or (BetS C B M) (or (BetS B C M) (BetS B M C)))))
H36 : not (BetS M B C)
H35 : Lt C M B C
H34 : Lt A C B C
H33 : Lt C M A C
H32 : Cong M C C M
H31 : Lt M C A C
H30 : Lt B M B C
H29 : Cong M B B M
H28 : Lt M B B C
H27 : Lt A B B C
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
idtac.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).
idtac.
assert (Lt M B B C).
idtac.
assert (Cong M B B M).
idtac.
assert (Lt B M B C).
idtac.
assert (Lt M C A C).
idtac.
assert (Cong M C C M).
idtac.
assert (Lt C M A C).
idtac.
assert (Lt A C B C).
idtac.
assert (Lt C M B C).
idtac.
assert (~ BetS M B C).
assert ((eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C)).
idtac.
assert (Out B C M).
assert (~ BetS B C M).
intro.
assert (Cong B C B C).
idtac.
assert (Lt B C B M).
idtac.

*****
H41 : Lt B C B M
H40 : Cong B C B C
H39 : BetS B C M
H38 : Out B C M
H37 : or (eq B C)\n (or (eq B M)\n (or (eq C M) (or (BetS C B M) (or (BetS B C M) (BetS B M C)))))
H36 : not (BetS M B C)
H35 : Lt C M B C
H34 : Lt A C B C
H33 : Lt C M A C
H32 : Cong M C C M
H31 : Lt M C A C
H30 : Lt B M B C
H29 : Cong M B B M
H28 : Lt M B B C
H27 : Lt A B B C
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (~ Lt B M B C).
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).
idtac.
assert (Lt M B B C).
idtac.
assert (Cong M B B M).
idtac.
assert (Lt B M B C).
idtac.
assert (Lt M C A C).
idtac.
assert (Cong M C C M).
idtac.
assert (Lt C M A C).
idtac.
assert (Lt A C B C).
idtac.
assert (Lt C M B C).
idtac.
assert (~ BetS M B C).
assert ((eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C)).
idtac.
assert (Out B C M).
assert (~ BetS B C M).
intro.
assert (Cong B C B C).
idtac.
assert (Lt B C B M).
idtac.
assert (~ Lt B M B C).

*****
H41 : Lt B C B M
H40 : Cong B C B C
H39 : BetS B C M
H38 : Out B C M
H37 : or (eq B C)\n (or (eq B M)\n (or (eq C M) (or (BetS C B M) (or (BetS B C M) (BetS B M C)))))
H36 : not (BetS M B C)
H35 : Lt C M B C
H34 : Lt A C B C
H33 : Lt C M A C
H32 : Cong M C C M
H31 : Lt M C A C
H30 : Lt B M B C
H29 : Cong M B B M
H28 : Lt M B B C
H27 : Lt A B B C
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (Lt B M B C)
+++++
conclude lemma_trichotomy2.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).
idtac.
assert (Lt M B B C).
idtac.
assert (Cong M B B M).
idtac.
assert (Lt B M B C).
idtac.
assert (Lt M C A C).
idtac.
assert (Cong M C C M).
idtac.
assert (Lt C M A C).
idtac.
assert (Lt A C B C).
idtac.
assert (Lt C M B C).
idtac.
assert (~ BetS M B C).
assert ((eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C)).
idtac.
assert (Out B C M).
assert (~ BetS B C M).
intro.
assert (Cong B C B C).
idtac.
assert (Lt B C B M).
idtac.
assert (~ Lt B M B C).

*****
H42 : not (Lt B M B C)
H41 : Lt B C B M
H40 : Cong B C B C
H39 : BetS B C M
H38 : Out B C M
H37 : or (eq B C)\n (or (eq B M)\n (or (eq C M) (or (BetS C B M) (or (BetS B C M) (BetS B M C)))))
H36 : not (BetS M B C)
H35 : Lt C M B C
H34 : Lt A C B C
H33 : Lt C M A C
H32 : Cong M C C M
H31 : Lt M C A C
H30 : Lt B M B C
H29 : Cong M B B M
H28 : Lt M B B C
H27 : Lt A B B C
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
idtac.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).
idtac.
assert (Lt M B B C).
idtac.
assert (Cong M B B M).
idtac.
assert (Lt B M B C).
idtac.
assert (Lt M C A C).
idtac.
assert (Cong M C C M).
idtac.
assert (Lt C M A C).
idtac.
assert (Lt A C B C).
idtac.
assert (Lt C M B C).
idtac.
assert (~ BetS M B C).
assert ((eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C)).
idtac.
assert (Out B C M).
assert (~ BetS B C M).
intro.
assert (Cong B C B C).
idtac.
assert (Lt B C B M).
idtac.
assert (~ Lt B M B C).
idtac.

*****
H42 : not (Lt B M B C)
H41 : Lt B C B M
H40 : Cong B C B C
H39 : BetS B C M
H38 : Out B C M
H37 : or (eq B C)\n (or (eq B M)\n (or (eq C M) (or (BetS C B M) (or (BetS B C M) (BetS B M C)))))
H36 : not (BetS M B C)
H35 : Lt C M B C
H34 : Lt A C B C
H33 : Lt C M A C
H32 : Cong M C C M
H31 : Lt M C A C
H30 : Lt B M B C
H29 : Cong M B B M
H28 : Lt M B B C
H27 : Lt A B B C
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).
idtac.
assert (Lt M B B C).
idtac.
assert (Cong M B B M).
idtac.
assert (Lt B M B C).
idtac.
assert (Lt M C A C).
idtac.
assert (Cong M C C M).
idtac.
assert (Lt C M A C).
idtac.
assert (Lt A C B C).
idtac.
assert (Lt C M B C).
idtac.
assert (~ BetS M B C).
assert ((eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C)).
idtac.
assert (Out B C M).
assert (~ BetS B C M).

*****
H39 : not (BetS B C M)
H38 : Out B C M
H37 : or (eq B C)\n (or (eq B M)\n (or (eq C M) (or (BetS C B M) (or (BetS B C M) (BetS B M C)))))
H36 : not (BetS M B C)
H35 : Lt C M B C
H34 : Lt A C B C
H33 : Lt C M A C
H32 : Cong M C C M
H31 : Lt M C A C
H30 : Lt B M B C
H29 : Cong M B B M
H28 : Lt M B B C
H27 : Lt A B B C
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
BetS B M C
+++++
assert (Out C B M).
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).
idtac.
assert (Lt M B B C).
idtac.
assert (Cong M B B M).
idtac.
assert (Lt B M B C).
idtac.
assert (Lt M C A C).
idtac.
assert (Cong M C C M).
idtac.
assert (Lt C M A C).
idtac.
assert (Lt A C B C).
idtac.
assert (Lt C M B C).
idtac.
assert (~ BetS M B C).
assert ((eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C)).
idtac.
assert (Out B C M).
assert (~ BetS B C M).
assert (Out C B M).

*****
H39 : not (BetS B C M)
H38 : Out B C M
H37 : or (eq B C)\n (or (eq B M)\n (or (eq C M) (or (BetS C B M) (or (BetS B C M) (BetS B M C)))))
H36 : not (BetS M B C)
H35 : Lt C M B C
H34 : Lt A C B C
H33 : Lt C M A C
H32 : Cong M C C M
H31 : Lt M C A C
H30 : Lt B M B C
H29 : Cong M B B M
H28 : Lt M B B C
H27 : Lt A B B C
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Out C B M
+++++
by cases on (eq B C \/ eq B M \/ eq C M \/ BetS C B M \/ BetS B C M \/ BetS B M C).
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).
idtac.
assert (Lt M B B C).
idtac.
assert (Cong M B B M).
idtac.
assert (Lt B M B C).
idtac.
assert (Lt M C A C).
idtac.
assert (Cong M C C M).
idtac.
assert (Lt C M A C).
idtac.
assert (Lt A C B C).
idtac.
assert (Lt C M B C).
idtac.
assert (~ BetS M B C).
assert ((eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C)).
idtac.
assert (Out B C M).
assert (~ BetS B C M).
assert (Out C B M).
by cases on (eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C).

*****
H40 : eq B C
H39 : not (BetS B C M)
H38 : Out B C M
H36 : not (BetS M B C)
H35 : Lt C M B C
H34 : Lt A C B C
H33 : Lt C M A C
H32 : Cong M C C M
H31 : Lt M C A C
H30 : Lt B M B C
H29 : Cong M B B M
H28 : Lt M B B C
H27 : Lt A B B C
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Out C B M
+++++
assert (~ ~ Out C B M).
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).
idtac.
assert (Lt M B B C).
idtac.
assert (Cong M B B M).
idtac.
assert (Lt B M B C).
idtac.
assert (Lt M C A C).
idtac.
assert (Cong M C C M).
idtac.
assert (Lt C M A C).
idtac.
assert (Lt A C B C).
idtac.
assert (Lt C M B C).
idtac.
assert (~ BetS M B C).
assert ((eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C)).
idtac.
assert (Out B C M).
assert (~ BetS B C M).
assert (Out C B M).
by cases on (eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C).
assert (~ ~ Out C B M).

*****
H40 : eq B C
H39 : not (BetS B C M)
H38 : Out B C M
H36 : not (BetS M B C)
H35 : Lt C M B C
H34 : Lt A C B C
H33 : Lt C M A C
H32 : Cong M C C M
H31 : Lt M C A C
H30 : Lt B M B C
H29 : Cong M B B M
H28 : Lt M B B C
H27 : Lt A B B C
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (not (Out C B M))
+++++
intro.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).
idtac.
assert (Lt M B B C).
idtac.
assert (Cong M B B M).
idtac.
assert (Lt B M B C).
idtac.
assert (Lt M C A C).
idtac.
assert (Cong M C C M).
idtac.
assert (Lt C M A C).
idtac.
assert (Lt A C B C).
idtac.
assert (Lt C M B C).
idtac.
assert (~ BetS M B C).
assert ((eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C)).
idtac.
assert (Out B C M).
assert (~ BetS B C M).
assert (Out C B M).
by cases on (eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C).
assert (~ ~ Out C B M).
intro.

*****
H37 : not (Out C B M)
H40 : eq B C
H39 : not (BetS B C M)
H38 : Out B C M
H36 : not (BetS M B C)
H35 : Lt C M B C
H34 : Lt A C B C
H33 : Lt C M A C
H32 : Cong M C C M
H31 : Lt M C A C
H30 : Lt B M B C
H29 : Cong M B B M
H28 : Lt M B B C
H27 : Lt A B B C
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).
idtac.
assert (Lt M B B C).
idtac.
assert (Cong M B B M).
idtac.
assert (Lt B M B C).
idtac.
assert (Lt M C A C).
idtac.
assert (Cong M C C M).
idtac.
assert (Lt C M A C).
idtac.
assert (Lt A C B C).
idtac.
assert (Lt C M B C).
idtac.
assert (~ BetS M B C).
assert ((eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C)).
idtac.
assert (Out B C M).
assert (~ BetS B C M).
assert (Out C B M).
by cases on (eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C).
assert (~ ~ Out C B M).

*****
H37 : not (not (Out C B M))
H40 : eq B C
H39 : not (BetS B C M)
H38 : Out B C M
H36 : not (BetS M B C)
H35 : Lt C M B C
H34 : Lt A C B C
H33 : Lt C M A C
H32 : Cong M C C M
H31 : Lt M C A C
H30 : Lt B M B C
H29 : Cong M B B M
H28 : Lt M B B C
H27 : Lt A B B C
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Out C B M
+++++
close.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).
idtac.
assert (Lt M B B C).
idtac.
assert (Cong M B B M).
idtac.
assert (Lt B M B C).
idtac.
assert (Lt M C A C).
idtac.
assert (Cong M C C M).
idtac.
assert (Lt C M A C).
idtac.
assert (Lt A C B C).
idtac.
assert (Lt C M B C).
idtac.
assert (~ BetS M B C).
assert ((eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C)).
idtac.
assert (Out B C M).
assert (~ BetS B C M).
assert (Out C B M).
by cases on (eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C).

*****
H41 : eq B M
H39 : not (BetS B C M)
H38 : Out B C M
H36 : not (BetS M B C)
H35 : Lt C M B C
H34 : Lt A C B C
H33 : Lt C M A C
H32 : Cong M C C M
H31 : Lt M C A C
H30 : Lt B M B C
H29 : Cong M B B M
H28 : Lt M B B C
H27 : Lt A B B C
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Out C B M
+++++
assert (~ ~ Out C B M).
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).
idtac.
assert (Lt M B B C).
idtac.
assert (Cong M B B M).
idtac.
assert (Lt B M B C).
idtac.
assert (Lt M C A C).
idtac.
assert (Cong M C C M).
idtac.
assert (Lt C M A C).
idtac.
assert (Lt A C B C).
idtac.
assert (Lt C M B C).
idtac.
assert (~ BetS M B C).
assert ((eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C)).
idtac.
assert (Out B C M).
assert (~ BetS B C M).
assert (Out C B M).
by cases on (eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C).
assert (~ ~ Out C B M).

*****
H41 : eq B M
H39 : not (BetS B C M)
H38 : Out B C M
H36 : not (BetS M B C)
H35 : Lt C M B C
H34 : Lt A C B C
H33 : Lt C M A C
H32 : Cong M C C M
H31 : Lt M C A C
H30 : Lt B M B C
H29 : Cong M B B M
H28 : Lt M B B C
H27 : Lt A B B C
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (not (Out C B M))
+++++
intro.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).
idtac.
assert (Lt M B B C).
idtac.
assert (Cong M B B M).
idtac.
assert (Lt B M B C).
idtac.
assert (Lt M C A C).
idtac.
assert (Cong M C C M).
idtac.
assert (Lt C M A C).
idtac.
assert (Lt A C B C).
idtac.
assert (Lt C M B C).
idtac.
assert (~ BetS M B C).
assert ((eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C)).
idtac.
assert (Out B C M).
assert (~ BetS B C M).
assert (Out C B M).
by cases on (eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C).
assert (~ ~ Out C B M).
intro.

*****
H37 : not (Out C B M)
H41 : eq B M
H39 : not (BetS B C M)
H38 : Out B C M
H36 : not (BetS M B C)
H35 : Lt C M B C
H34 : Lt A C B C
H33 : Lt C M A C
H32 : Cong M C C M
H31 : Lt M C A C
H30 : Lt B M B C
H29 : Cong M B B M
H28 : Lt M B B C
H27 : Lt A B B C
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).
idtac.
assert (Lt M B B C).
idtac.
assert (Cong M B B M).
idtac.
assert (Lt B M B C).
idtac.
assert (Lt M C A C).
idtac.
assert (Cong M C C M).
idtac.
assert (Lt C M A C).
idtac.
assert (Lt A C B C).
idtac.
assert (Lt C M B C).
idtac.
assert (~ BetS M B C).
assert ((eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C)).
idtac.
assert (Out B C M).
assert (~ BetS B C M).
assert (Out C B M).
by cases on (eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C).
assert (~ ~ Out C B M).

*****
H37 : not (not (Out C B M))
H41 : eq B M
H39 : not (BetS B C M)
H38 : Out B C M
H36 : not (BetS M B C)
H35 : Lt C M B C
H34 : Lt A C B C
H33 : Lt C M A C
H32 : Cong M C C M
H31 : Lt M C A C
H30 : Lt B M B C
H29 : Cong M B B M
H28 : Lt M B B C
H27 : Lt A B B C
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Out C B M
+++++
close.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).
idtac.
assert (Lt M B B C).
idtac.
assert (Cong M B B M).
idtac.
assert (Lt B M B C).
idtac.
assert (Lt M C A C).
idtac.
assert (Cong M C C M).
idtac.
assert (Lt C M A C).
idtac.
assert (Lt A C B C).
idtac.
assert (Lt C M B C).
idtac.
assert (~ BetS M B C).
assert ((eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C)).
idtac.
assert (Out B C M).
assert (~ BetS B C M).
assert (Out C B M).
by cases on (eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C).

*****
H40 : eq C M
H39 : not (BetS B C M)
H38 : Out B C M
H36 : not (BetS M B C)
H35 : Lt C M B C
H34 : Lt A C B C
H33 : Lt C M A C
H32 : Cong M C C M
H31 : Lt M C A C
H30 : Lt B M B C
H29 : Cong M B B M
H28 : Lt M B B C
H27 : Lt A B B C
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Out C B M
+++++
assert (~ ~ Out C B M).
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).
idtac.
assert (Lt M B B C).
idtac.
assert (Cong M B B M).
idtac.
assert (Lt B M B C).
idtac.
assert (Lt M C A C).
idtac.
assert (Cong M C C M).
idtac.
assert (Lt C M A C).
idtac.
assert (Lt A C B C).
idtac.
assert (Lt C M B C).
idtac.
assert (~ BetS M B C).
assert ((eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C)).
idtac.
assert (Out B C M).
assert (~ BetS B C M).
assert (Out C B M).
by cases on (eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C).
assert (~ ~ Out C B M).

*****
H40 : eq C M
H39 : not (BetS B C M)
H38 : Out B C M
H36 : not (BetS M B C)
H35 : Lt C M B C
H34 : Lt A C B C
H33 : Lt C M A C
H32 : Cong M C C M
H31 : Lt M C A C
H30 : Lt B M B C
H29 : Cong M B B M
H28 : Lt M B B C
H27 : Lt A B B C
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (not (Out C B M))
+++++
intro.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).
idtac.
assert (Lt M B B C).
idtac.
assert (Cong M B B M).
idtac.
assert (Lt B M B C).
idtac.
assert (Lt M C A C).
idtac.
assert (Cong M C C M).
idtac.
assert (Lt C M A C).
idtac.
assert (Lt A C B C).
idtac.
assert (Lt C M B C).
idtac.
assert (~ BetS M B C).
assert ((eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C)).
idtac.
assert (Out B C M).
assert (~ BetS B C M).
assert (Out C B M).
by cases on (eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C).
assert (~ ~ Out C B M).
intro.

*****
H37 : not (Out C B M)
H40 : eq C M
H39 : not (BetS B C M)
H38 : Out B C M
H36 : not (BetS M B C)
H35 : Lt C M B C
H34 : Lt A C B C
H33 : Lt C M A C
H32 : Cong M C C M
H31 : Lt M C A C
H30 : Lt B M B C
H29 : Cong M B B M
H28 : Lt M B B C
H27 : Lt A B B C
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).
idtac.
assert (Lt M B B C).
idtac.
assert (Cong M B B M).
idtac.
assert (Lt B M B C).
idtac.
assert (Lt M C A C).
idtac.
assert (Cong M C C M).
idtac.
assert (Lt C M A C).
idtac.
assert (Lt A C B C).
idtac.
assert (Lt C M B C).
idtac.
assert (~ BetS M B C).
assert ((eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C)).
idtac.
assert (Out B C M).
assert (~ BetS B C M).
assert (Out C B M).
by cases on (eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C).
assert (~ ~ Out C B M).

*****
H37 : not (not (Out C B M))
H40 : eq C M
H39 : not (BetS B C M)
H38 : Out B C M
H36 : not (BetS M B C)
H35 : Lt C M B C
H34 : Lt A C B C
H33 : Lt C M A C
H32 : Cong M C C M
H31 : Lt M C A C
H30 : Lt B M B C
H29 : Cong M B B M
H28 : Lt M B B C
H27 : Lt A B B C
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Out C B M
+++++
close.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).
idtac.
assert (Lt M B B C).
idtac.
assert (Cong M B B M).
idtac.
assert (Lt B M B C).
idtac.
assert (Lt M C A C).
idtac.
assert (Cong M C C M).
idtac.
assert (Lt C M A C).
idtac.
assert (Lt A C B C).
idtac.
assert (Lt C M B C).
idtac.
assert (~ BetS M B C).
assert ((eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C)).
idtac.
assert (Out B C M).
assert (~ BetS B C M).
assert (Out C B M).
by cases on (eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C).

*****
H41 : BetS C B M
H39 : not (BetS B C M)
H38 : Out B C M
H36 : not (BetS M B C)
H35 : Lt C M B C
H34 : Lt A C B C
H33 : Lt C M A C
H32 : Cong M C C M
H31 : Lt M C A C
H30 : Lt B M B C
H29 : Cong M B B M
H28 : Lt M B B C
H27 : Lt A B B C
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Out C B M
+++++
assert (Out C B M).
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).
idtac.
assert (Lt M B B C).
idtac.
assert (Cong M B B M).
idtac.
assert (Lt B M B C).
idtac.
assert (Lt M C A C).
idtac.
assert (Cong M C C M).
idtac.
assert (Lt C M A C).
idtac.
assert (Lt A C B C).
idtac.
assert (Lt C M B C).
idtac.
assert (~ BetS M B C).
assert ((eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C)).
idtac.
assert (Out B C M).
assert (~ BetS B C M).
assert (Out C B M).
by cases on (eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C).
assert (Out C B M).

*****
H41 : BetS C B M
H39 : not (BetS B C M)
H38 : Out B C M
H36 : not (BetS M B C)
H35 : Lt C M B C
H34 : Lt A C B C
H33 : Lt C M A C
H32 : Cong M C C M
H31 : Lt M C A C
H30 : Lt B M B C
H29 : Cong M B B M
H28 : Lt M B B C
H27 : Lt A B B C
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Out C B M
+++++
conclude lemma_ray4.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).
idtac.
assert (Lt M B B C).
idtac.
assert (Cong M B B M).
idtac.
assert (Lt B M B C).
idtac.
assert (Lt M C A C).
idtac.
assert (Cong M C C M).
idtac.
assert (Lt C M A C).
idtac.
assert (Lt A C B C).
idtac.
assert (Lt C M B C).
idtac.
assert (~ BetS M B C).
assert ((eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C)).
idtac.
assert (Out B C M).
assert (~ BetS B C M).
assert (Out C B M).
by cases on (eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C).
assert (Out C B M).

*****
H37 : Out C B M
H41 : BetS C B M
H39 : not (BetS B C M)
H38 : Out B C M
H36 : not (BetS M B C)
H35 : Lt C M B C
H34 : Lt A C B C
H33 : Lt C M A C
H32 : Cong M C C M
H31 : Lt M C A C
H30 : Lt B M B C
H29 : Cong M B B M
H28 : Lt M B B C
H27 : Lt A B B C
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Out C B M
+++++
idtac.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).
idtac.
assert (Lt M B B C).
idtac.
assert (Cong M B B M).
idtac.
assert (Lt B M B C).
idtac.
assert (Lt M C A C).
idtac.
assert (Cong M C C M).
idtac.
assert (Lt C M A C).
idtac.
assert (Lt A C B C).
idtac.
assert (Lt C M B C).
idtac.
assert (~ BetS M B C).
assert ((eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C)).
idtac.
assert (Out B C M).
assert (~ BetS B C M).
assert (Out C B M).
by cases on (eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C).
assert (Out C B M).
idtac.

*****
H37 : Out C B M
H41 : BetS C B M
H39 : not (BetS B C M)
H38 : Out B C M
H36 : not (BetS M B C)
H35 : Lt C M B C
H34 : Lt A C B C
H33 : Lt C M A C
H32 : Cong M C C M
H31 : Lt M C A C
H30 : Lt B M B C
H29 : Cong M B B M
H28 : Lt M B B C
H27 : Lt A B B C
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Out C B M
+++++
close.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).
idtac.
assert (Lt M B B C).
idtac.
assert (Cong M B B M).
idtac.
assert (Lt B M B C).
idtac.
assert (Lt M C A C).
idtac.
assert (Cong M C C M).
idtac.
assert (Lt C M A C).
idtac.
assert (Lt A C B C).
idtac.
assert (Lt C M B C).
idtac.
assert (~ BetS M B C).
assert ((eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C)).
idtac.
assert (Out B C M).
assert (~ BetS B C M).
assert (Out C B M).
by cases on (eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C).

*****
H40 : BetS B C M
H39 : not (BetS B C M)
H38 : Out B C M
H36 : not (BetS M B C)
H35 : Lt C M B C
H34 : Lt A C B C
H33 : Lt C M A C
H32 : Cong M C C M
H31 : Lt M C A C
H30 : Lt B M B C
H29 : Cong M B B M
H28 : Lt M B B C
H27 : Lt A B B C
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Out C B M
+++++
assert (~ ~ Out C B M).
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).
idtac.
assert (Lt M B B C).
idtac.
assert (Cong M B B M).
idtac.
assert (Lt B M B C).
idtac.
assert (Lt M C A C).
idtac.
assert (Cong M C C M).
idtac.
assert (Lt C M A C).
idtac.
assert (Lt A C B C).
idtac.
assert (Lt C M B C).
idtac.
assert (~ BetS M B C).
assert ((eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C)).
idtac.
assert (Out B C M).
assert (~ BetS B C M).
assert (Out C B M).
by cases on (eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C).
assert (~ ~ Out C B M).

*****
H40 : BetS B C M
H39 : not (BetS B C M)
H38 : Out B C M
H36 : not (BetS M B C)
H35 : Lt C M B C
H34 : Lt A C B C
H33 : Lt C M A C
H32 : Cong M C C M
H31 : Lt M C A C
H30 : Lt B M B C
H29 : Cong M B B M
H28 : Lt M B B C
H27 : Lt A B B C
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (not (Out C B M))
+++++
intro.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).
idtac.
assert (Lt M B B C).
idtac.
assert (Cong M B B M).
idtac.
assert (Lt B M B C).
idtac.
assert (Lt M C A C).
idtac.
assert (Cong M C C M).
idtac.
assert (Lt C M A C).
idtac.
assert (Lt A C B C).
idtac.
assert (Lt C M B C).
idtac.
assert (~ BetS M B C).
assert ((eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C)).
idtac.
assert (Out B C M).
assert (~ BetS B C M).
assert (Out C B M).
by cases on (eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C).
assert (~ ~ Out C B M).
intro.

*****
H37 : not (Out C B M)
H40 : BetS B C M
H39 : not (BetS B C M)
H38 : Out B C M
H36 : not (BetS M B C)
H35 : Lt C M B C
H34 : Lt A C B C
H33 : Lt C M A C
H32 : Cong M C C M
H31 : Lt M C A C
H30 : Lt B M B C
H29 : Cong M B B M
H28 : Lt M B B C
H27 : Lt A B B C
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).
idtac.
assert (Lt M B B C).
idtac.
assert (Cong M B B M).
idtac.
assert (Lt B M B C).
idtac.
assert (Lt M C A C).
idtac.
assert (Cong M C C M).
idtac.
assert (Lt C M A C).
idtac.
assert (Lt A C B C).
idtac.
assert (Lt C M B C).
idtac.
assert (~ BetS M B C).
assert ((eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C)).
idtac.
assert (Out B C M).
assert (~ BetS B C M).
assert (Out C B M).
by cases on (eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C).
assert (~ ~ Out C B M).

*****
H37 : not (not (Out C B M))
H40 : BetS B C M
H39 : not (BetS B C M)
H38 : Out B C M
H36 : not (BetS M B C)
H35 : Lt C M B C
H34 : Lt A C B C
H33 : Lt C M A C
H32 : Cong M C C M
H31 : Lt M C A C
H30 : Lt B M B C
H29 : Cong M B B M
H28 : Lt M B B C
H27 : Lt A B B C
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Out C B M
+++++
close.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).
idtac.
assert (Lt M B B C).
idtac.
assert (Cong M B B M).
idtac.
assert (Lt B M B C).
idtac.
assert (Lt M C A C).
idtac.
assert (Cong M C C M).
idtac.
assert (Lt C M A C).
idtac.
assert (Lt A C B C).
idtac.
assert (Lt C M B C).
idtac.
assert (~ BetS M B C).
assert ((eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C)).
idtac.
assert (Out B C M).
assert (~ BetS B C M).
assert (Out C B M).
by cases on (eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C).

*****
H40 : BetS B M C
H39 : not (BetS B C M)
H38 : Out B C M
H36 : not (BetS M B C)
H35 : Lt C M B C
H34 : Lt A C B C
H33 : Lt C M A C
H32 : Cong M C C M
H31 : Lt M C A C
H30 : Lt B M B C
H29 : Cong M B B M
H28 : Lt M B B C
H27 : Lt A B B C
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Out C B M
+++++
assert (BetS C M B).
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).
idtac.
assert (Lt M B B C).
idtac.
assert (Cong M B B M).
idtac.
assert (Lt B M B C).
idtac.
assert (Lt M C A C).
idtac.
assert (Cong M C C M).
idtac.
assert (Lt C M A C).
idtac.
assert (Lt A C B C).
idtac.
assert (Lt C M B C).
idtac.
assert (~ BetS M B C).
assert ((eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C)).
idtac.
assert (Out B C M).
assert (~ BetS B C M).
assert (Out C B M).
by cases on (eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C).
assert (BetS C M B).

*****
H40 : BetS B M C
H39 : not (BetS B C M)
H38 : Out B C M
H36 : not (BetS M B C)
H35 : Lt C M B C
H34 : Lt A C B C
H33 : Lt C M A C
H32 : Cong M C C M
H31 : Lt M C A C
H30 : Lt B M B C
H29 : Cong M B B M
H28 : Lt M B B C
H27 : Lt A B B C
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
BetS C M B
+++++
conclude axiom_betweennesssymmetry.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).
idtac.
assert (Lt M B B C).
idtac.
assert (Cong M B B M).
idtac.
assert (Lt B M B C).
idtac.
assert (Lt M C A C).
idtac.
assert (Cong M C C M).
idtac.
assert (Lt C M A C).
idtac.
assert (Lt A C B C).
idtac.
assert (Lt C M B C).
idtac.
assert (~ BetS M B C).
assert ((eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C)).
idtac.
assert (Out B C M).
assert (~ BetS B C M).
assert (Out C B M).
by cases on (eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C).
assert (BetS C M B).

*****
H37 : BetS C M B
H40 : BetS B M C
H39 : not (BetS B C M)
H38 : Out B C M
H36 : not (BetS M B C)
H35 : Lt C M B C
H34 : Lt A C B C
H33 : Lt C M A C
H32 : Cong M C C M
H31 : Lt M C A C
H30 : Lt B M B C
H29 : Cong M B B M
H28 : Lt M B B C
H27 : Lt A B B C
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Out C B M
+++++
idtac.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).
idtac.
assert (Lt M B B C).
idtac.
assert (Cong M B B M).
idtac.
assert (Lt B M B C).
idtac.
assert (Lt M C A C).
idtac.
assert (Cong M C C M).
idtac.
assert (Lt C M A C).
idtac.
assert (Lt A C B C).
idtac.
assert (Lt C M B C).
idtac.
assert (~ BetS M B C).
assert ((eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C)).
idtac.
assert (Out B C M).
assert (~ BetS B C M).
assert (Out C B M).
by cases on (eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C).
assert (BetS C M B).
idtac.

*****
H37 : BetS C M B
H40 : BetS B M C
H39 : not (BetS B C M)
H38 : Out B C M
H36 : not (BetS M B C)
H35 : Lt C M B C
H34 : Lt A C B C
H33 : Lt C M A C
H32 : Cong M C C M
H31 : Lt M C A C
H30 : Lt B M B C
H29 : Cong M B B M
H28 : Lt M B B C
H27 : Lt A B B C
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Out C B M
+++++
assert (Out C M B).
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).
idtac.
assert (Lt M B B C).
idtac.
assert (Cong M B B M).
idtac.
assert (Lt B M B C).
idtac.
assert (Lt M C A C).
idtac.
assert (Cong M C C M).
idtac.
assert (Lt C M A C).
idtac.
assert (Lt A C B C).
idtac.
assert (Lt C M B C).
idtac.
assert (~ BetS M B C).
assert ((eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C)).
idtac.
assert (Out B C M).
assert (~ BetS B C M).
assert (Out C B M).
by cases on (eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C).
assert (BetS C M B).
idtac.
assert (Out C M B).

*****
H37 : BetS C M B
H40 : BetS B M C
H39 : not (BetS B C M)
H38 : Out B C M
H36 : not (BetS M B C)
H35 : Lt C M B C
H34 : Lt A C B C
H33 : Lt C M A C
H32 : Cong M C C M
H31 : Lt M C A C
H30 : Lt B M B C
H29 : Cong M B B M
H28 : Lt M B B C
H27 : Lt A B B C
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Out C M B
+++++
conclude lemma_ray4.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).
idtac.
assert (Lt M B B C).
idtac.
assert (Cong M B B M).
idtac.
assert (Lt B M B C).
idtac.
assert (Lt M C A C).
idtac.
assert (Cong M C C M).
idtac.
assert (Lt C M A C).
idtac.
assert (Lt A C B C).
idtac.
assert (Lt C M B C).
idtac.
assert (~ BetS M B C).
assert ((eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C)).
idtac.
assert (Out B C M).
assert (~ BetS B C M).
assert (Out C B M).
by cases on (eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C).
assert (BetS C M B).
idtac.
assert (Out C M B).

*****
H41 : Out C M B
H37 : BetS C M B
H40 : BetS B M C
H39 : not (BetS B C M)
H38 : Out B C M
H36 : not (BetS M B C)
H35 : Lt C M B C
H34 : Lt A C B C
H33 : Lt C M A C
H32 : Cong M C C M
H31 : Lt M C A C
H30 : Lt B M B C
H29 : Cong M B B M
H28 : Lt M B B C
H27 : Lt A B B C
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Out C B M
+++++
idtac.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).
idtac.
assert (Lt M B B C).
idtac.
assert (Cong M B B M).
idtac.
assert (Lt B M B C).
idtac.
assert (Lt M C A C).
idtac.
assert (Cong M C C M).
idtac.
assert (Lt C M A C).
idtac.
assert (Lt A C B C).
idtac.
assert (Lt C M B C).
idtac.
assert (~ BetS M B C).
assert ((eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C)).
idtac.
assert (Out B C M).
assert (~ BetS B C M).
assert (Out C B M).
by cases on (eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C).
assert (BetS C M B).
idtac.
assert (Out C M B).
idtac.

*****
H41 : Out C M B
H37 : BetS C M B
H40 : BetS B M C
H39 : not (BetS B C M)
H38 : Out B C M
H36 : not (BetS M B C)
H35 : Lt C M B C
H34 : Lt A C B C
H33 : Lt C M A C
H32 : Cong M C C M
H31 : Lt M C A C
H30 : Lt B M B C
H29 : Cong M B B M
H28 : Lt M B B C
H27 : Lt A B B C
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Out C B M
+++++
assert (Out C B M).
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).
idtac.
assert (Lt M B B C).
idtac.
assert (Cong M B B M).
idtac.
assert (Lt B M B C).
idtac.
assert (Lt M C A C).
idtac.
assert (Cong M C C M).
idtac.
assert (Lt C M A C).
idtac.
assert (Lt A C B C).
idtac.
assert (Lt C M B C).
idtac.
assert (~ BetS M B C).
assert ((eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C)).
idtac.
assert (Out B C M).
assert (~ BetS B C M).
assert (Out C B M).
by cases on (eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C).
assert (BetS C M B).
idtac.
assert (Out C M B).
idtac.
assert (Out C B M).

*****
H41 : Out C M B
H37 : BetS C M B
H40 : BetS B M C
H39 : not (BetS B C M)
H38 : Out B C M
H36 : not (BetS M B C)
H35 : Lt C M B C
H34 : Lt A C B C
H33 : Lt C M A C
H32 : Cong M C C M
H31 : Lt M C A C
H30 : Lt B M B C
H29 : Cong M B B M
H28 : Lt M B B C
H27 : Lt A B B C
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Out C B M
+++++
conclude lemma_ray5.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).
idtac.
assert (Lt M B B C).
idtac.
assert (Cong M B B M).
idtac.
assert (Lt B M B C).
idtac.
assert (Lt M C A C).
idtac.
assert (Cong M C C M).
idtac.
assert (Lt C M A C).
idtac.
assert (Lt A C B C).
idtac.
assert (Lt C M B C).
idtac.
assert (~ BetS M B C).
assert ((eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C)).
idtac.
assert (Out B C M).
assert (~ BetS B C M).
assert (Out C B M).
by cases on (eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C).
assert (BetS C M B).
idtac.
assert (Out C M B).
idtac.
assert (Out C B M).

*****
H42 : Out C B M
H41 : Out C M B
H37 : BetS C M B
H40 : BetS B M C
H39 : not (BetS B C M)
H38 : Out B C M
H36 : not (BetS M B C)
H35 : Lt C M B C
H34 : Lt A C B C
H33 : Lt C M A C
H32 : Cong M C C M
H31 : Lt M C A C
H30 : Lt B M B C
H29 : Cong M B B M
H28 : Lt M B B C
H27 : Lt A B B C
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Out C B M
+++++
idtac.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).
idtac.
assert (Lt M B B C).
idtac.
assert (Cong M B B M).
idtac.
assert (Lt B M B C).
idtac.
assert (Lt M C A C).
idtac.
assert (Cong M C C M).
idtac.
assert (Lt C M A C).
idtac.
assert (Lt A C B C).
idtac.
assert (Lt C M B C).
idtac.
assert (~ BetS M B C).
assert ((eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C)).
idtac.
assert (Out B C M).
assert (~ BetS B C M).
assert (Out C B M).
by cases on (eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C).
assert (BetS C M B).
idtac.
assert (Out C M B).
idtac.
assert (Out C B M).
idtac.

*****
H42 : Out C B M
H41 : Out C M B
H37 : BetS C M B
H40 : BetS B M C
H39 : not (BetS B C M)
H38 : Out B C M
H36 : not (BetS M B C)
H35 : Lt C M B C
H34 : Lt A C B C
H33 : Lt C M A C
H32 : Cong M C C M
H31 : Lt M C A C
H30 : Lt B M B C
H29 : Cong M B B M
H28 : Lt M B B C
H27 : Lt A B B C
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Out C B M
+++++
close.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).
idtac.
assert (Lt M B B C).
idtac.
assert (Cong M B B M).
idtac.
assert (Lt B M B C).
idtac.
assert (Lt M C A C).
idtac.
assert (Cong M C C M).
idtac.
assert (Lt C M A C).
idtac.
assert (Lt A C B C).
idtac.
assert (Lt C M B C).
idtac.
assert (~ BetS M B C).
assert ((eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C)).
idtac.
assert (Out B C M).
assert (~ BetS B C M).
assert (Out C B M).

*****
H40 : Out C B M
H39 : not (BetS B C M)
H38 : Out B C M
H37 : or (eq B C)\n (or (eq B M)\n (or (eq C M) (or (BetS C B M) (or (BetS B C M) (BetS B M C)))))
H36 : not (BetS M B C)
H35 : Lt C M B C
H34 : Lt A C B C
H33 : Lt C M A C
H32 : Cong M C C M
H31 : Lt M C A C
H30 : Lt B M B C
H29 : Cong M B B M
H28 : Lt M B B C
H27 : Lt A B B C
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
BetS B M C
+++++
assert (BetS B M C).
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).
idtac.
assert (Lt M B B C).
idtac.
assert (Cong M B B M).
idtac.
assert (Lt B M B C).
idtac.
assert (Lt M C A C).
idtac.
assert (Cong M C C M).
idtac.
assert (Lt C M A C).
idtac.
assert (Lt A C B C).
idtac.
assert (Lt C M B C).
idtac.
assert (~ BetS M B C).
assert ((eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C)).
idtac.
assert (Out B C M).
assert (~ BetS B C M).
assert (Out C B M).
assert (BetS B M C).

*****
H40 : Out C B M
H39 : not (BetS B C M)
H38 : Out B C M
H37 : or (eq B C)\n (or (eq B M)\n (or (eq C M) (or (BetS C B M) (or (BetS B C M) (BetS B M C)))))
H36 : not (BetS M B C)
H35 : Lt C M B C
H34 : Lt A C B C
H33 : Lt C M A C
H32 : Cong M C C M
H31 : Lt M C A C
H30 : Lt B M B C
H29 : Cong M B B M
H28 : Lt M B B C
H27 : Lt A B B C
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
BetS B M C
+++++
conclude lemma_tworays.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).
idtac.
assert (Lt M B B C).
idtac.
assert (Cong M B B M).
idtac.
assert (Lt B M B C).
idtac.
assert (Lt M C A C).
idtac.
assert (Cong M C C M).
idtac.
assert (Lt C M A C).
idtac.
assert (Lt A C B C).
idtac.
assert (Lt C M B C).
idtac.
assert (~ BetS M B C).
assert ((eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C)).
idtac.
assert (Out B C M).
assert (~ BetS B C M).
assert (Out C B M).
assert (BetS B M C).

*****
H41 : BetS B M C
H40 : Out C B M
H39 : not (BetS B C M)
H38 : Out B C M
H37 : or (eq B C)\n (or (eq B M)\n (or (eq C M) (or (BetS C B M) (or (BetS B C M) (BetS B M C)))))
H36 : not (BetS M B C)
H35 : Lt C M B C
H34 : Lt A C B C
H33 : Lt C M A C
H32 : Cong M C C M
H31 : Lt M C A C
H30 : Lt B M B C
H29 : Cong M B B M
H28 : Lt M B B C
H27 : Lt A B B C
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
BetS B M C
+++++
idtac.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (~ eq B M).
assert (Per p M A).
idtac.
assert (Col C B p).
idtac.
assert (Col C B M).
idtac.
assert (nCol B A C).
idtac.
assert (neq C B).
idtac.
assert (Col B p M).
idtac.
assert (Col p M B).
idtac.
assert (Per B M A).
idtac.
assert (Col B C p).
idtac.
assert (Col B C M).
idtac.
assert (neq B C).
idtac.
assert (Col C p M).
idtac.
assert (Col p M C).
idtac.
assert (Per C A B).
idtac.
assert (~ eq C M).
assert (Per C M A).
idtac.
assert (Per A M B).
idtac.
assert (Per A M C).
idtac.
assert (Lt M B A B).
idtac.
assert (Lt B A B C).
idtac.
assert (Cong B A A B).
idtac.
assert (Lt A B B C).
idtac.
assert (Lt M B B C).
idtac.
assert (Cong M B B M).
idtac.
assert (Lt B M B C).
idtac.
assert (Lt M C A C).
idtac.
assert (Cong M C C M).
idtac.
assert (Lt C M A C).
idtac.
assert (Lt A C B C).
idtac.
assert (Lt C M B C).
idtac.
assert (~ BetS M B C).
assert ((eq B C \\/ eq B M \\/ eq C M \\/ BetS C B M \\/ BetS B C M \\/ BetS B M C)).
idtac.
assert (Out B C M).
assert (~ BetS B C M).
assert (Out C B M).
assert (BetS B M C).
idtac.

*****
H41 : BetS B M C
H40 : Out C B M
H39 : not (BetS B C M)
H38 : Out B C M
H37 : or (eq B C)\n (or (eq B M)\n (or (eq C M) (or (BetS C B M) (or (BetS B C M) (BetS B M C)))))
H36 : not (BetS M B C)
H35 : Lt C M B C
H34 : Lt A C B C
H33 : Lt C M A C
H32 : Cong M C C M
H31 : Lt M C A C
H30 : Lt B M B C
H29 : Cong M B B M
H28 : Lt M B B C
H27 : Lt A B B C
H26 : Cong B A A B
H25 : Lt B A B C
H24 : Lt M B A B
H23 : Per A M C
H22 : Per A M B
H21 : Per C M A
H20 : not (eq C M)
H19 : Per C A B
H18 : Col p M C
H17 : Col C p M
H16 : neq B C
H15 : Col B C M
H14 : Col B C p
H13 : Per B M A
H12 : Col p M B
H11 : Col B p M
H10 : neq C B
H9 : nCol B A C
H8 : Col C B M
H7 : Col C B p
H6 : Per p M A
H5 : not (eq B M)
H4 : neq C B
H3 : nCol B A C
H2 : Col B C M
H1 : Col B C p
H0 : Per A M p
H : Per B A C
A,B,C,M,p : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
BetS B M C
+++++
close.
-----
Lemma lemma_altitudeofrighttriangle : forall A B C M p, Per B A C -> Per A M p -> Col B C p -> Col B C M -> BetS B M C.
Proof.
intros.
assert (nCol B A C).

*****

*****

+++++
Qed.
-----
End Euclid.
-----
