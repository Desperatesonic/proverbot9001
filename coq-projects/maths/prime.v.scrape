From Coq Require Import ZArith.
-----
Require Import ZArithRing.
-----
Require Import divide.
-----
Require Import gcd.
-----
Definition rel_prime (a b : Z) : Prop := gcd a b 1.
-----
Lemma rel_prime_bezout : forall a b : Z, rel_prime a b -> Bezout a b 1.
-----
Lemma rel_prime_bezout : forall a b : Z, rel_prime a b -> Bezout a b 1.

*****

*****
forall (a b : Z) (_ : rel_prime a b), Bezout a b (Zpos xH)
+++++
Proof.
-----
Lemma rel_prime_bezout : forall a b : Z, rel_prime a b -> Bezout a b 1.
Proof.

*****

*****
forall (a b : Z) (_ : rel_prime a b), Bezout a b (Zpos xH)
+++++
intros a b.
-----
Lemma rel_prime_bezout : forall a b : Z, rel_prime a b -> Bezout a b 1.
Proof.
intros a b.

*****
a,b : Z
*****
forall _ : rel_prime a b, Bezout a b (Zpos xH)
+++++
exact (gcd_bezout a b 1).
-----
Lemma rel_prime_bezout : forall a b : Z, rel_prime a b -> Bezout a b 1.
Proof.
intros a b.
exact (gcd_bezout a b 1).

*****

*****

+++++
Qed.
-----
Lemma bezout_rel_prime : forall a b : Z, Bezout a b 1 -> rel_prime a b.
-----
Lemma bezout_rel_prime : forall a b : Z, Bezout a b 1 -> rel_prime a b.

*****

*****
forall (a b : Z) (_ : Bezout a b (Zpos xH)), rel_prime a b
+++++
Proof.
-----
Lemma bezout_rel_prime : forall a b : Z, Bezout a b 1 -> rel_prime a b.
Proof.

*****

*****
forall (a b : Z) (_ : Bezout a b (Zpos xH)), rel_prime a b
+++++
simple induction 1.
-----
Lemma bezout_rel_prime : forall a b : Z, Bezout a b 1 -> rel_prime a b.
Proof.
simple induction 1.

*****
H : Bezout a b (Zpos xH)
a,b : Z
*****
forall (u v : Z) (_ : eq (Z.add (Z.mul u a) (Z.mul v b)) (Zpos xH)), rel_prime a b
+++++
constructor.
-----
Lemma bezout_rel_prime : forall a b : Z, Bezout a b 1 -> rel_prime a b.
Proof.
simple induction 1.
constructor.

*****
H0 : eq (Z.add (Z.mul u a) (Z.mul v b)) (Zpos xH)
u,v : Z
H : Bezout a b (Zpos xH)
a,b : Z
*****
divide (Zpos xH) a
+++++
auto.
-----
Lemma bezout_rel_prime : forall a b : Z, Bezout a b 1 -> rel_prime a b.
Proof.
simple induction 1.
constructor.

*****
H0 : eq (Z.add (Z.mul u a) (Z.mul v b)) (Zpos xH)
u,v : Z
H : Bezout a b (Zpos xH)
a,b : Z
*****
divide (Zpos xH) b
+++++
auto.
-----
Lemma bezout_rel_prime : forall a b : Z, Bezout a b 1 -> rel_prime a b.
Proof.
simple induction 1.
constructor.

*****
H0 : eq (Z.add (Z.mul u a) (Z.mul v b)) (Zpos xH)
u,v : Z
H : Bezout a b (Zpos xH)
a,b : Z
*****
forall (x : Z) (_ : divide x a) (_ : divide x b), divide x (Zpos xH)
+++++
auto.
-----
Lemma bezout_rel_prime : forall a b : Z, Bezout a b 1 -> rel_prime a b.
Proof.
simple induction 1.
constructor.
auto.

*****
H0 : eq (Z.add (Z.mul u a) (Z.mul v b)) (Zpos xH)
u,v : Z
H : Bezout a b (Zpos xH)
a,b : Z
*****
forall (x : Z) (_ : divide x a) (_ : divide x b), divide x (Zpos xH)
+++++
intros.
-----
Lemma bezout_rel_prime : forall a b : Z, Bezout a b 1 -> rel_prime a b.
Proof.
simple induction 1.
constructor.
auto.
intros.

*****
H2 : divide x b
H1 : divide x a
x : Z
H0 : eq (Z.add (Z.mul u a) (Z.mul v b)) (Zpos xH)
u,v : Z
H : Bezout a b (Zpos xH)
a,b : Z
*****
divide x (Zpos xH)
+++++
rewrite <- H0.
-----
Lemma bezout_rel_prime : forall a b : Z, Bezout a b 1 -> rel_prime a b.
Proof.
simple induction 1.
constructor.
auto.
intros.
rewrite <- H0.

*****
H2 : divide x b
H1 : divide x a
x : Z
H0 : eq (Z.add (Z.mul u a) (Z.mul v b)) (Zpos xH)
u,v : Z
H : Bezout a b (Zpos xH)
a,b : Z
*****
divide x (Z.add (Z.mul u a) (Z.mul v b))
+++++
auto.
-----
Lemma bezout_rel_prime : forall a b : Z, Bezout a b 1 -> rel_prime a b.
Proof.
simple induction 1.
constructor.

*****

*****

+++++
Qed.
-----
Theorem Gauss : forall a b c : Z, (a | b * c)%Z -> rel_prime a b -> (a | c)%Z.
-----
Theorem Gauss : forall a b c : Z, (a | b * c)%Z -> rel_prime a b -> (a | c)%Z.

*****

*****
forall (a b c : Z) (_ : divide a (Z.mul b c)) (_ : rel_prime a b), divide a c
+++++
Proof.
-----
Theorem Gauss : forall a b c : Z, (a | b * c)%Z -> rel_prime a b -> (a | c)%Z.
Proof.

*****

*****
forall (a b c : Z) (_ : divide a (Z.mul b c)) (_ : rel_prime a b), divide a c
+++++
intros.
-----
Theorem Gauss : forall a b c : Z, (a | b * c)%Z -> rel_prime a b -> (a | c)%Z.
Proof.
intros.

*****
H0 : rel_prime a b
H : divide a (Z.mul b c)
a,b,c : Z
*****
divide a c
+++++
elim (rel_prime_bezout a b H0).
-----
Theorem Gauss : forall a b c : Z, (a | b * c)%Z -> rel_prime a b -> (a | c)%Z.
Proof.
intros.
elim (rel_prime_bezout a b H0).

*****
H0 : rel_prime a b
H : divide a (Z.mul b c)
a,b,c : Z
*****
forall (u v : Z) (_ : eq (Z.add (Z.mul u a) (Z.mul v b)) (Zpos xH)), divide a c
+++++
intros.
-----
Theorem Gauss : forall a b c : Z, (a | b * c)%Z -> rel_prime a b -> (a | c)%Z.
Proof.
intros.
elim (rel_prime_bezout a b H0).
intros.

*****
H1 : eq (Z.add (Z.mul u a) (Z.mul v b)) (Zpos xH)
u,v : Z
H0 : rel_prime a b
H : divide a (Z.mul b c)
a,b,c : Z
*****
divide a c
+++++
replace c with (c * 1)%Z.
-----
Theorem Gauss : forall a b c : Z, (a | b * c)%Z -> rel_prime a b -> (a | c)%Z.
Proof.
intros.
elim (rel_prime_bezout a b H0).
intros.
replace c with (c * 1)%Z.

*****
H1 : eq (Z.add (Z.mul u a) (Z.mul v b)) (Zpos xH)
u,v : Z
H0 : rel_prime a b
H : divide a (Z.mul b c)
a,b,c : Z
*****
divide a (Z.mul c (Zpos xH))
+++++
idtac.
-----
Theorem Gauss : forall a b c : Z, (a | b * c)%Z -> rel_prime a b -> (a | c)%Z.
Proof.
intros.
elim (rel_prime_bezout a b H0).
intros.
replace c with (c * 1)%Z.
idtac.

*****
H1 : eq (Z.add (Z.mul u a) (Z.mul v b)) (Zpos xH)
u,v : Z
H0 : rel_prime a b
H : divide a (Z.mul b c)
a,b,c : Z
*****
divide a (Z.mul c (Zpos xH))
+++++
rewrite <- H1.
-----
Theorem Gauss : forall a b c : Z, (a | b * c)%Z -> rel_prime a b -> (a | c)%Z.
Proof.
intros.
elim (rel_prime_bezout a b H0).
intros.
replace c with (c * 1)%Z.
idtac.
rewrite <- H1.

*****
H1 : eq (Z.add (Z.mul u a) (Z.mul v b)) (Zpos xH)
u,v : Z
H0 : rel_prime a b
H : divide a (Z.mul b c)
a,b,c : Z
*****
divide a (Z.mul c (Z.add (Z.mul u a) (Z.mul v b)))
+++++
replace (c * (u * a + v * b))%Z with (c * u * a + v * (b * c))%Z.
-----
Theorem Gauss : forall a b c : Z, (a | b * c)%Z -> rel_prime a b -> (a | c)%Z.
Proof.
intros.
elim (rel_prime_bezout a b H0).
intros.
replace c with (c * 1)%Z.
idtac.
rewrite <- H1.
replace (c * (u * a + v * b))%Z with (c * u * a + v * (b * c))%Z.

*****
H1 : eq (Z.add (Z.mul u a) (Z.mul v b)) (Zpos xH)
u,v : Z
H0 : rel_prime a b
H : divide a (Z.mul b c)
a,b,c : Z
*****
divide a (Z.add (Z.mul (Z.mul c u) a) (Z.mul v (Z.mul b c)))
+++++
eauto.
-----
Theorem Gauss : forall a b c : Z, (a | b * c)%Z -> rel_prime a b -> (a | c)%Z.
Proof.
intros.
elim (rel_prime_bezout a b H0).
intros.
replace c with (c * 1)%Z.
idtac.
rewrite <- H1.
replace (c * (u * a + v * b))%Z with (c * u * a + v * (b * c))%Z.

*****
H1 : eq (Z.add (Z.mul u a) (Z.mul v b)) (Zpos xH)
u,v : Z
H0 : rel_prime a b
H : divide a (Z.mul b c)
a,b,c : Z
*****
eq (Z.add (Z.mul (Z.mul c u) a) (Z.mul v (Z.mul b c))) (Z.mul c (Z.add (Z.mul u a) (Z.mul v b)))
+++++
ring.
-----
Theorem Gauss : forall a b c : Z, (a | b * c)%Z -> rel_prime a b -> (a | c)%Z.
Proof.
intros.
elim (rel_prime_bezout a b H0).
intros.
replace c with (c * 1)%Z.

*****
H1 : eq (Z.add (Z.mul u a) (Z.mul v b)) (Zpos xH)
u,v : Z
H0 : rel_prime a b
H : divide a (Z.mul b c)
a,b,c : Z
*****
eq (Z.mul c (Zpos xH)) c
+++++
ring.
-----
Theorem Gauss : forall a b c : Z, (a | b * c)%Z -> rel_prime a b -> (a | c)%Z.
Proof.
intros.
elim (rel_prime_bezout a b H0).
intros.
replace c with (c * 1)%Z.

*****

*****

+++++
Qed.
-----
Lemma rel_prime_mult :\n forall a b c : Z, rel_prime a b -> rel_prime a c -> rel_prime a (b * c).
-----
Lemma rel_prime_mult : forall a b c : Z, rel_prime a b -> rel_prime a c -> rel_prime a (b * c).

*****

*****
forall (a b c : Z) (_ : rel_prime a b) (_ : rel_prime a c), rel_prime a (Z.mul b c)
+++++
Proof.
-----
Lemma rel_prime_mult : forall a b c : Z, rel_prime a b -> rel_prime a c -> rel_prime a (b * c).
Proof.

*****

*****
forall (a b c : Z) (_ : rel_prime a b) (_ : rel_prime a c), rel_prime a (Z.mul b c)
+++++
intros a b c Hb Hc.
-----
Lemma rel_prime_mult : forall a b c : Z, rel_prime a b -> rel_prime a c -> rel_prime a (b * c).
Proof.
intros a b c Hb Hc.

*****
Hc : rel_prime a c
Hb : rel_prime a b
a,b,c : Z
*****
rel_prime a (Z.mul b c)
+++++
elim (rel_prime_bezout a b Hb).
-----
Lemma rel_prime_mult : forall a b c : Z, rel_prime a b -> rel_prime a c -> rel_prime a (b * c).
Proof.
intros a b c Hb Hc.
elim (rel_prime_bezout a b Hb).

*****
Hc : rel_prime a c
Hb : rel_prime a b
a,b,c : Z
*****
forall (u v : Z) (_ : eq (Z.add (Z.mul u a) (Z.mul v b)) (Zpos xH)), rel_prime a (Z.mul b c)
+++++
intros.
-----
Lemma rel_prime_mult : forall a b c : Z, rel_prime a b -> rel_prime a c -> rel_prime a (b * c).
Proof.
intros a b c Hb Hc.
elim (rel_prime_bezout a b Hb).
intros.

*****
H : eq (Z.add (Z.mul u a) (Z.mul v b)) (Zpos xH)
u,v : Z
Hc : rel_prime a c
Hb : rel_prime a b
a,b,c : Z
*****
rel_prime a (Z.mul b c)
+++++
elim (rel_prime_bezout a c Hc).
-----
Lemma rel_prime_mult : forall a b c : Z, rel_prime a b -> rel_prime a c -> rel_prime a (b * c).
Proof.
intros a b c Hb Hc.
elim (rel_prime_bezout a b Hb).
intros.
elim (rel_prime_bezout a c Hc).

*****
H : eq (Z.add (Z.mul u a) (Z.mul v b)) (Zpos xH)
u,v : Z
Hc : rel_prime a c
Hb : rel_prime a b
a,b,c : Z
*****
forall (u v : Z) (_ : eq (Z.add (Z.mul u a) (Z.mul v c)) (Zpos xH)), rel_prime a (Z.mul b c)
+++++
intros.
-----
Lemma rel_prime_mult : forall a b c : Z, rel_prime a b -> rel_prime a c -> rel_prime a (b * c).
Proof.
intros a b c Hb Hc.
elim (rel_prime_bezout a b Hb).
intros.
elim (rel_prime_bezout a c Hc).
intros.

*****
H0 : eq (Z.add (Z.mul u0 a) (Z.mul v0 c)) (Zpos xH)
u0,v0 : Z
H : eq (Z.add (Z.mul u a) (Z.mul v b)) (Zpos xH)
u,v : Z
Hc : rel_prime a c
Hb : rel_prime a b
a,b,c : Z
*****
rel_prime a (Z.mul b c)
+++++
apply bezout_rel_prime.
-----
Lemma rel_prime_mult : forall a b c : Z, rel_prime a b -> rel_prime a c -> rel_prime a (b * c).
Proof.
intros a b c Hb Hc.
elim (rel_prime_bezout a b Hb).
intros.
elim (rel_prime_bezout a c Hc).
intros.
apply bezout_rel_prime.

*****
H0 : eq (Z.add (Z.mul u0 a) (Z.mul v0 c)) (Zpos xH)
u0,v0 : Z
H : eq (Z.add (Z.mul u a) (Z.mul v b)) (Zpos xH)
u,v : Z
Hc : rel_prime a c
Hb : rel_prime a b
a,b,c : Z
*****
Bezout a (Z.mul b c) (Zpos xH)
+++++
apply Bezout_intro with (u := (u * u0 * a + v0 * c * u + u0 * v * b)%Z) (v := (v * v0)%Z).
-----
Lemma rel_prime_mult : forall a b c : Z, rel_prime a b -> rel_prime a c -> rel_prime a (b * c).
Proof.
intros a b c Hb Hc.
elim (rel_prime_bezout a b Hb).
intros.
elim (rel_prime_bezout a c Hc).
intros.
apply bezout_rel_prime.
apply Bezout_intro with (u := (u * u0 * a + v0 * c * u + u0 * v * b)%Z) (v := (v * v0)%Z).

*****
H0 : eq (Z.add (Z.mul u0 a) (Z.mul v0 c)) (Zpos xH)
u0,v0 : Z
H : eq (Z.add (Z.mul u a) (Z.mul v b)) (Zpos xH)
u,v : Z
Hc : rel_prime a c
Hb : rel_prime a b
a,b,c : Z
*****
eq (Z.add (Z.mul (Z.add (Z.add (Z.mul (Z.mul u u0) a) (Z.mul (Z.mul v0 c) u)) (Z.mul (Z.mul u0 v) b)) a) (Z.mul (Z.mul v v0) (Z.mul b c))) (Zpos xH)
+++++
rewrite <- H.
-----
Lemma rel_prime_mult : forall a b c : Z, rel_prime a b -> rel_prime a c -> rel_prime a (b * c).
Proof.
intros a b c Hb Hc.
elim (rel_prime_bezout a b Hb).
intros.
elim (rel_prime_bezout a c Hc).
intros.
apply bezout_rel_prime.
apply Bezout_intro with (u := (u * u0 * a + v0 * c * u + u0 * v * b)%Z) (v := (v * v0)%Z).
rewrite <- H.

*****
H0 : eq (Z.add (Z.mul u0 a) (Z.mul v0 c)) (Zpos xH)
u0,v0 : Z
H : eq (Z.add (Z.mul u a) (Z.mul v b)) (Zpos xH)
u,v : Z
Hc : rel_prime a c
Hb : rel_prime a b
a,b,c : Z
*****
eq (Z.add (Z.mul (Z.add (Z.add (Z.mul (Z.mul u u0) a) (Z.mul (Z.mul v0 c) u)) (Z.mul (Z.mul u0 v) b)) a) (Z.mul (Z.mul v v0) (Z.mul b c))) (Z.add (Z.mul u a) (Z.mul v b))
+++++
replace (u * a + v * b)%Z with ((u * a + v * b) * 1)%Z.
-----
Lemma rel_prime_mult : forall a b c : Z, rel_prime a b -> rel_prime a c -> rel_prime a (b * c).
Proof.
intros a b c Hb Hc.
elim (rel_prime_bezout a b Hb).
intros.
elim (rel_prime_bezout a c Hc).
intros.
apply bezout_rel_prime.
apply Bezout_intro with (u := (u * u0 * a + v0 * c * u + u0 * v * b)%Z) (v := (v * v0)%Z).
rewrite <- H.
replace (u * a + v * b)%Z with ((u * a + v * b) * 1)%Z.

*****
H0 : eq (Z.add (Z.mul u0 a) (Z.mul v0 c)) (Zpos xH)
u0,v0 : Z
H : eq (Z.add (Z.mul u a) (Z.mul v b)) (Zpos xH)
u,v : Z
Hc : rel_prime a c
Hb : rel_prime a b
a,b,c : Z
*****
eq (Z.add (Z.mul (Z.add (Z.add (Z.mul (Z.mul u u0) a) (Z.mul (Z.mul v0 c) u)) (Z.mul (Z.mul u0 v) b)) a) (Z.mul (Z.mul v v0) (Z.mul b c))) (Z.mul (Z.add (Z.mul u a) (Z.mul v b)) (Zpos xH))
+++++
idtac.
-----
Lemma rel_prime_mult : forall a b c : Z, rel_prime a b -> rel_prime a c -> rel_prime a (b * c).
Proof.
intros a b c Hb Hc.
elim (rel_prime_bezout a b Hb).
intros.
elim (rel_prime_bezout a c Hc).
intros.
apply bezout_rel_prime.
apply Bezout_intro with (u := (u * u0 * a + v0 * c * u + u0 * v * b)%Z) (v := (v * v0)%Z).
rewrite <- H.
replace (u * a + v * b)%Z with ((u * a + v * b) * 1)%Z.
idtac.

*****
H0 : eq (Z.add (Z.mul u0 a) (Z.mul v0 c)) (Zpos xH)
u0,v0 : Z
H : eq (Z.add (Z.mul u a) (Z.mul v b)) (Zpos xH)
u,v : Z
Hc : rel_prime a c
Hb : rel_prime a b
a,b,c : Z
*****
eq (Z.add (Z.mul (Z.add (Z.add (Z.mul (Z.mul u u0) a) (Z.mul (Z.mul v0 c) u)) (Z.mul (Z.mul u0 v) b)) a) (Z.mul (Z.mul v v0) (Z.mul b c))) (Z.mul (Z.add (Z.mul u a) (Z.mul v b)) (Zpos xH))
+++++
rewrite <- H0.
-----
Lemma rel_prime_mult : forall a b c : Z, rel_prime a b -> rel_prime a c -> rel_prime a (b * c).
Proof.
intros a b c Hb Hc.
elim (rel_prime_bezout a b Hb).
intros.
elim (rel_prime_bezout a c Hc).
intros.
apply bezout_rel_prime.
apply Bezout_intro with (u := (u * u0 * a + v0 * c * u + u0 * v * b)%Z) (v := (v * v0)%Z).
rewrite <- H.
replace (u * a + v * b)%Z with ((u * a + v * b) * 1)%Z.
idtac.
rewrite <- H0.

*****
H0 : eq (Z.add (Z.mul u0 a) (Z.mul v0 c)) (Zpos xH)
u0,v0 : Z
H : eq (Z.add (Z.mul u a) (Z.mul v b)) (Zpos xH)
u,v : Z
Hc : rel_prime a c
Hb : rel_prime a b
a,b,c : Z
*****
eq (Z.add (Z.mul (Z.add (Z.add (Z.mul (Z.mul u u0) a) (Z.mul (Z.mul v0 c) u)) (Z.mul (Z.mul u0 v) b)) a) (Z.mul (Z.mul v v0) (Z.mul b c))) (Z.mul (Z.add (Z.mul u a) (Z.mul v b)) (Z.add (Z.mul u0 a) (Z.mul v0 c)))
+++++
ring.
-----
Lemma rel_prime_mult : forall a b c : Z, rel_prime a b -> rel_prime a c -> rel_prime a (b * c).
Proof.
intros a b c Hb Hc.
elim (rel_prime_bezout a b Hb).
intros.
elim (rel_prime_bezout a c Hc).
intros.
apply bezout_rel_prime.
apply Bezout_intro with (u := (u * u0 * a + v0 * c * u + u0 * v * b)%Z) (v := (v * v0)%Z).
rewrite <- H.
replace (u * a + v * b)%Z with ((u * a + v * b) * 1)%Z.

*****
H0 : eq (Z.add (Z.mul u0 a) (Z.mul v0 c)) (Zpos xH)
u0,v0 : Z
H : eq (Z.add (Z.mul u a) (Z.mul v b)) (Zpos xH)
u,v : Z
Hc : rel_prime a c
Hb : rel_prime a b
a,b,c : Z
*****
eq (Z.mul (Z.add (Z.mul u a) (Z.mul v b)) (Zpos xH)) (Z.add (Z.mul u a) (Z.mul v b))
+++++
ring.
-----
Lemma rel_prime_mult : forall a b c : Z, rel_prime a b -> rel_prime a c -> rel_prime a (b * c).
Proof.
intros a b c Hb Hc.
elim (rel_prime_bezout a b Hb).
intros.
elim (rel_prime_bezout a c Hc).
intros.
apply bezout_rel_prime.
apply Bezout_intro with (u := (u * u0 * a + v0 * c * u + u0 * v * b)%Z) (v := (v * v0)%Z).
rewrite <- H.
replace (u * a + v * b)%Z with ((u * a + v * b) * 1)%Z.

*****

*****

+++++
Qed.
-----
Inductive prime (p : Z) : Prop :=\n    prime_intro :\n      (1 < p)%Z -> (forall n : Z, (1 <= n < p)%Z -> rel_prime n p) -> prime p.
-----
Lemma prime_divisors :\n forall p : Z,\n prime p ->\n forall a : Z, (a | p)%Z -> a = (-1)%Z \/ a = 1%Z \/ a = p \/ a = (- p)%Z.
-----
Lemma prime_divisors : forall p : Z, prime p -> forall a : Z, (a | p)%Z -> a = (-1)%Z \\/ a = 1%Z \\/ a = p \\/ a = (- p)%Z.

*****

*****
forall (p : Z) (_ : prime p) (a : Z) (_ : divide a p), or (eq a (Zneg xH)) (or (eq a (Zpos xH)) (or (eq a p) (eq a (Z.opp p))))
+++++
Proof.
-----
Lemma prime_divisors : forall p : Z, prime p -> forall a : Z, (a | p)%Z -> a = (-1)%Z \\/ a = 1%Z \\/ a = p \\/ a = (- p)%Z.
Proof.

*****

*****
forall (p : Z) (_ : prime p) (a : Z) (_ : divide a p), or (eq a (Zneg xH)) (or (eq a (Zpos xH)) (or (eq a p) (eq a (Z.opp p))))
+++++
simple induction 1.
-----
Lemma prime_divisors : forall p : Z, prime p -> forall a : Z, (a | p)%Z -> a = (-1)%Z \\/ a = 1%Z \\/ a = p \\/ a = (- p)%Z.
Proof.
simple induction 1.

*****
H : prime p
p : Z
*****
forall (_ : Z.lt (Zpos xH) p) (_ : forall (n : Z) (_ : and (Z.le (Zpos xH) n) (Z.lt n p)), rel_prime n p) (a : Z) (_ : divide a p), or (eq a (Zneg xH)) (or (eq a (Zpos xH)) (or (eq a p) (eq a (Z.opp p))))
+++++
intros.
-----
Lemma prime_divisors : forall p : Z, prime p -> forall a : Z, (a | p)%Z -> a = (-1)%Z \\/ a = 1%Z \\/ a = p \\/ a = (- p)%Z.
Proof.
simple induction 1.
intros.

*****
H2 : divide a p
a : Z
H1 : forall (n : Z) (_ : and (Z.le (Zpos xH) n) (Z.lt n p)), rel_prime n p
H0 : Z.lt (Zpos xH) p
H : prime p
p : Z
*****
or (eq a (Zneg xH)) (or (eq a (Zpos xH)) (or (eq a p) (eq a (Z.opp p))))
+++++
assert (a = (- p)%Z \/ (- p < a < -1)%Z \/ a = (-1)%Z \/ a = 0%Z \/ a = 1%Z \/ (1 < a < p)%Z \/ a = p).
-----
Lemma prime_divisors : forall p : Z, prime p -> forall a : Z, (a | p)%Z -> a = (-1)%Z \\/ a = 1%Z \\/ a = p \\/ a = (- p)%Z.
Proof.
simple induction 1.
intros.
assert (a = (- p)%Z \\/ (- p < a < -1)%Z \\/ a = (-1)%Z \\/ a = 0%Z \\/ a = 1%Z \\/ (1 < a < p)%Z \\/ a = p).

*****
H2 : divide a p
a : Z
H1 : forall (n : Z) (_ : and (Z.le (Zpos xH) n) (Z.lt n p)), rel_prime n p
H0 : Z.lt (Zpos xH) p
H : prime p
p : Z
*****
or (eq a (Z.opp p)) (or (and (Z.lt (Z.opp p) a) (Z.lt a (Zneg xH))) (or (eq a (Zneg xH)) (or (eq a Z0) (or (eq a (Zpos xH)) (or (and (Z.lt (Zpos xH) a) (Z.lt a p)) (eq a p))))))
+++++
assert (Zabs a <= Zabs p)%Z.
-----
Lemma prime_divisors : forall p : Z, prime p -> forall a : Z, (a | p)%Z -> a = (-1)%Z \\/ a = 1%Z \\/ a = p \\/ a = (- p)%Z.
Proof.
simple induction 1.
intros.
assert (a = (- p)%Z \\/ (- p < a < -1)%Z \\/ a = (-1)%Z \\/ a = 0%Z \\/ a = 1%Z \\/ (1 < a < p)%Z \\/ a = p).
assert (Zabs a <= Zabs p)%Z.

*****
H2 : divide a p
a : Z
H1 : forall (n : Z) (_ : and (Z.le (Zpos xH) n) (Z.lt n p)), rel_prime n p
H0 : Z.lt (Zpos xH) p
H : prime p
p : Z
*****
Z.le (Z.abs a) (Z.abs p)
+++++
apply divide_bounds.
-----
Lemma prime_divisors : forall p : Z, prime p -> forall a : Z, (a | p)%Z -> a = (-1)%Z \\/ a = 1%Z \\/ a = p \\/ a = (- p)%Z.
Proof.
simple induction 1.
intros.
assert (a = (- p)%Z \\/ (- p < a < -1)%Z \\/ a = (-1)%Z \\/ a = 0%Z \\/ a = 1%Z \\/ (1 < a < p)%Z \\/ a = p).
assert (Zabs a <= Zabs p)%Z.
apply divide_bounds.

*****
H2 : divide a p
a : Z
H1 : forall (n : Z) (_ : and (Z.le (Zpos xH) n) (Z.lt n p)), rel_prime n p
H0 : Z.lt (Zpos xH) p
H : prime p
p : Z
*****
divide a p
+++++
assumption.
-----
Lemma prime_divisors : forall p : Z, prime p -> forall a : Z, (a | p)%Z -> a = (-1)%Z \\/ a = 1%Z \\/ a = p \\/ a = (- p)%Z.
Proof.
simple induction 1.
intros.
assert (a = (- p)%Z \\/ (- p < a < -1)%Z \\/ a = (-1)%Z \\/ a = 0%Z \\/ a = 1%Z \\/ (1 < a < p)%Z \\/ a = p).
assert (Zabs a <= Zabs p)%Z.
apply divide_bounds.

*****
H2 : divide a p
a : Z
H1 : forall (n : Z) (_ : and (Z.le (Zpos xH) n) (Z.lt n p)), rel_prime n p
H0 : Z.lt (Zpos xH) p
H : prime p
p : Z
*****
not (eq p Z0)
+++++
omega.
-----
Lemma prime_divisors : forall p : Z, prime p -> forall a : Z, (a | p)%Z -> a = (-1)%Z \\/ a = 1%Z \\/ a = p \\/ a = (- p)%Z.
Proof.
simple induction 1.
intros.
assert (a = (- p)%Z \\/ (- p < a < -1)%Z \\/ a = (-1)%Z \\/ a = 0%Z \\/ a = 1%Z \\/ (1 < a < p)%Z \\/ a = p).
assert (Zabs a <= Zabs p)%Z.

*****
H3 : Z.le (Z.abs a) (Z.abs p)
H2 : divide a p
a : Z
H1 : forall (n : Z) (_ : and (Z.le (Zpos xH) n) (Z.lt n p)), rel_prime n p
H0 : Z.lt (Zpos xH) p
H : prime p
p : Z
*****
or (eq a (Z.opp p)) (or (and (Z.lt (Z.opp p) a) (Z.lt a (Zneg xH))) (or (eq a (Zneg xH)) (or (eq a Z0) (or (eq a (Zpos xH)) (or (and (Z.lt (Zpos xH) a) (Z.lt a p)) (eq a p))))))
+++++
generalize H3.
-----
Lemma prime_divisors : forall p : Z, prime p -> forall a : Z, (a | p)%Z -> a = (-1)%Z \\/ a = 1%Z \\/ a = p \\/ a = (- p)%Z.
Proof.
simple induction 1.
intros.
assert (a = (- p)%Z \\/ (- p < a < -1)%Z \\/ a = (-1)%Z \\/ a = 0%Z \\/ a = 1%Z \\/ (1 < a < p)%Z \\/ a = p).
assert (Zabs a <= Zabs p)%Z.
generalize H3.

*****
H3 : Z.le (Z.abs a) (Z.abs p)
H2 : divide a p
a : Z
H1 : forall (n : Z) (_ : and (Z.le (Zpos xH) n) (Z.lt n p)), rel_prime n p
H0 : Z.lt (Zpos xH) p
H : prime p
p : Z
*****
forall _ : Z.le (Z.abs a) (Z.abs p), or (eq a (Z.opp p)) (or (and (Z.lt (Z.opp p) a) (Z.lt a (Zneg xH))) (or (eq a (Zneg xH)) (or (eq a Z0) (or (eq a (Zpos xH)) (or (and (Z.lt (Zpos xH) a) (Z.lt a p)) (eq a p))))))
+++++
pattern (Zabs a) in |- *.
-----
Lemma prime_divisors : forall p : Z, prime p -> forall a : Z, (a | p)%Z -> a = (-1)%Z \\/ a = 1%Z \\/ a = p \\/ a = (- p)%Z.
Proof.
simple induction 1.
intros.
assert (a = (- p)%Z \\/ (- p < a < -1)%Z \\/ a = (-1)%Z \\/ a = 0%Z \\/ a = 1%Z \\/ (1 < a < p)%Z \\/ a = p).
assert (Zabs a <= Zabs p)%Z.
generalize H3.
pattern (Zabs a) in |- *.

*****
H3 : Z.le (Z.abs a) (Z.abs p)
H2 : divide a p
a : Z
H1 : forall (n : Z) (_ : and (Z.le (Zpos xH) n) (Z.lt n p)), rel_prime n p
H0 : Z.lt (Zpos xH) p
H : prime p
p : Z
*****
(fun z : Z => forall _ : Z.le z (Z.abs p), or (eq a (Z.opp p)) (or (and (Z.lt (Z.opp p) a) (Z.lt a (Zneg xH))) (or (eq a (Zneg xH)) (or (eq a Z0) (or (eq a (Zpos xH)) (or (and (Z.lt (Zpos xH) a) (Z.lt a p)) (eq a p))))))) (Z.abs a)
+++++
apply Zabs_ind.
-----
Lemma prime_divisors : forall p : Z, prime p -> forall a : Z, (a | p)%Z -> a = (-1)%Z \\/ a = 1%Z \\/ a = p \\/ a = (- p)%Z.
Proof.
simple induction 1.
intros.
assert (a = (- p)%Z \\/ (- p < a < -1)%Z \\/ a = (-1)%Z \\/ a = 0%Z \\/ a = 1%Z \\/ (1 < a < p)%Z \\/ a = p).
assert (Zabs a <= Zabs p)%Z.
generalize H3.
pattern (Zabs a) in |- *.
apply Zabs_ind.

*****
H3 : Z.le (Z.abs a) (Z.abs p)
H2 : divide a p
a : Z
H1 : forall (n : Z) (_ : and (Z.le (Zpos xH) n) (Z.lt n p)), rel_prime n p
H0 : Z.lt (Zpos xH) p
H : prime p
p : Z
*****
forall (_ : Z.ge a Z0) (_ : Z.le a (Z.abs p)), or (eq a (Z.opp p)) (or (and (Z.lt (Z.opp p) a) (Z.lt a (Zneg xH))) (or (eq a (Zneg xH)) (or (eq a Z0) (or (eq a (Zpos xH)) (or (and (Z.lt (Zpos xH) a) (Z.lt a p)) (eq a p))))))
+++++
pattern (Zabs p) in |- *.
-----
Lemma prime_divisors : forall p : Z, prime p -> forall a : Z, (a | p)%Z -> a = (-1)%Z \\/ a = 1%Z \\/ a = p \\/ a = (- p)%Z.
Proof.
simple induction 1.
intros.
assert (a = (- p)%Z \\/ (- p < a < -1)%Z \\/ a = (-1)%Z \\/ a = 0%Z \\/ a = 1%Z \\/ (1 < a < p)%Z \\/ a = p).
assert (Zabs a <= Zabs p)%Z.
generalize H3.
pattern (Zabs a) in |- *.
apply Zabs_ind.
pattern (Zabs p) in |- *.

*****
H3 : Z.le (Z.abs a) (Z.abs p)
H2 : divide a p
a : Z
H1 : forall (n : Z) (_ : and (Z.le (Zpos xH) n) (Z.lt n p)), rel_prime n p
H0 : Z.lt (Zpos xH) p
H : prime p
p : Z
*****
(fun z : Z => forall (_ : Z.ge a Z0) (_ : Z.le a z), or (eq a (Z.opp p)) (or (and (Z.lt (Z.opp p) a) (Z.lt a (Zneg xH))) (or (eq a (Zneg xH)) (or (eq a Z0) (or (eq a (Zpos xH)) (or (and (Z.lt (Zpos xH) a) (Z.lt a p)) (eq a p))))))) (Z.abs p)
+++++
apply Zabs_ind.
-----
Lemma prime_divisors : forall p : Z, prime p -> forall a : Z, (a | p)%Z -> a = (-1)%Z \\/ a = 1%Z \\/ a = p \\/ a = (- p)%Z.
Proof.
simple induction 1.
intros.
assert (a = (- p)%Z \\/ (- p < a < -1)%Z \\/ a = (-1)%Z \\/ a = 0%Z \\/ a = 1%Z \\/ (1 < a < p)%Z \\/ a = p).
assert (Zabs a <= Zabs p)%Z.
generalize H3.
pattern (Zabs a) in |- *.
apply Zabs_ind.
pattern (Zabs p) in |- *.
apply Zabs_ind.

*****
H3 : Z.le (Z.abs a) (Z.abs p)
H2 : divide a p
a : Z
H1 : forall (n : Z) (_ : and (Z.le (Zpos xH) n) (Z.lt n p)), rel_prime n p
H0 : Z.lt (Zpos xH) p
H : prime p
p : Z
*****
forall (_ : Z.ge p Z0) (_ : Z.ge a Z0) (_ : Z.le a p), or (eq a (Z.opp p)) (or (and (Z.lt (Z.opp p) a) (Z.lt a (Zneg xH))) (or (eq a (Zneg xH)) (or (eq a Z0) (or (eq a (Zpos xH)) (or (and (Z.lt (Zpos xH) a) (Z.lt a p)) (eq a p))))))
+++++
intros.
-----
Lemma prime_divisors : forall p : Z, prime p -> forall a : Z, (a | p)%Z -> a = (-1)%Z \\/ a = 1%Z \\/ a = p \\/ a = (- p)%Z.
Proof.
simple induction 1.
intros.
assert (a = (- p)%Z \\/ (- p < a < -1)%Z \\/ a = (-1)%Z \\/ a = 0%Z \\/ a = 1%Z \\/ (1 < a < p)%Z \\/ a = p).
assert (Zabs a <= Zabs p)%Z.
generalize H3.
pattern (Zabs a) in |- *.
apply Zabs_ind.
pattern (Zabs p) in |- *.
apply Zabs_ind.
intros.

*****
H6 : Z.le a p
H5 : Z.ge a Z0
H4 : Z.ge p Z0
H3 : Z.le (Z.abs a) (Z.abs p)
H2 : divide a p
a : Z
H1 : forall (n : Z) (_ : and (Z.le (Zpos xH) n) (Z.lt n p)), rel_prime n p
H0 : Z.lt (Zpos xH) p
H : prime p
p : Z
*****
or (eq a (Z.opp p)) (or (and (Z.lt (Z.opp p) a) (Z.lt a (Zneg xH))) (or (eq a (Zneg xH)) (or (eq a Z0) (or (eq a (Zpos xH)) (or (and (Z.lt (Zpos xH) a) (Z.lt a p)) (eq a p))))))
+++++
omega.
-----
Lemma prime_divisors : forall p : Z, prime p -> forall a : Z, (a | p)%Z -> a = (-1)%Z \\/ a = 1%Z \\/ a = p \\/ a = (- p)%Z.
Proof.
simple induction 1.
intros.
assert (a = (- p)%Z \\/ (- p < a < -1)%Z \\/ a = (-1)%Z \\/ a = 0%Z \\/ a = 1%Z \\/ (1 < a < p)%Z \\/ a = p).
assert (Zabs a <= Zabs p)%Z.
generalize H3.
pattern (Zabs a) in |- *.
apply Zabs_ind.
pattern (Zabs p) in |- *.
apply Zabs_ind.

*****
H3 : Z.le (Z.abs a) (Z.abs p)
H2 : divide a p
a : Z
H1 : forall (n : Z) (_ : and (Z.le (Zpos xH) n) (Z.lt n p)), rel_prime n p
H0 : Z.lt (Zpos xH) p
H : prime p
p : Z
*****
forall (_ : Z.le p Z0) (_ : Z.ge a Z0) (_ : Z.le a (Z.opp p)), or (eq a (Z.opp p)) (or (and (Z.lt (Z.opp p) a) (Z.lt a (Zneg xH))) (or (eq a (Zneg xH)) (or (eq a Z0) (or (eq a (Zpos xH)) (or (and (Z.lt (Zpos xH) a) (Z.lt a p)) (eq a p))))))
+++++
intros.
-----
Lemma prime_divisors : forall p : Z, prime p -> forall a : Z, (a | p)%Z -> a = (-1)%Z \\/ a = 1%Z \\/ a = p \\/ a = (- p)%Z.
Proof.
simple induction 1.
intros.
assert (a = (- p)%Z \\/ (- p < a < -1)%Z \\/ a = (-1)%Z \\/ a = 0%Z \\/ a = 1%Z \\/ (1 < a < p)%Z \\/ a = p).
assert (Zabs a <= Zabs p)%Z.
generalize H3.
pattern (Zabs a) in |- *.
apply Zabs_ind.
pattern (Zabs p) in |- *.
apply Zabs_ind.
intros.

*****
H6 : Z.le a (Z.opp p)
H5 : Z.ge a Z0
H4 : Z.le p Z0
H3 : Z.le (Z.abs a) (Z.abs p)
H2 : divide a p
a : Z
H1 : forall (n : Z) (_ : and (Z.le (Zpos xH) n) (Z.lt n p)), rel_prime n p
H0 : Z.lt (Zpos xH) p
H : prime p
p : Z
*****
or (eq a (Z.opp p)) (or (and (Z.lt (Z.opp p) a) (Z.lt a (Zneg xH))) (or (eq a (Zneg xH)) (or (eq a Z0) (or (eq a (Zpos xH)) (or (and (Z.lt (Zpos xH) a) (Z.lt a p)) (eq a p))))))
+++++
omega.
-----
Lemma prime_divisors : forall p : Z, prime p -> forall a : Z, (a | p)%Z -> a = (-1)%Z \\/ a = 1%Z \\/ a = p \\/ a = (- p)%Z.
Proof.
simple induction 1.
intros.
assert (a = (- p)%Z \\/ (- p < a < -1)%Z \\/ a = (-1)%Z \\/ a = 0%Z \\/ a = 1%Z \\/ (1 < a < p)%Z \\/ a = p).
assert (Zabs a <= Zabs p)%Z.
generalize H3.
pattern (Zabs a) in |- *.
apply Zabs_ind.

*****
H3 : Z.le (Z.abs a) (Z.abs p)
H2 : divide a p
a : Z
H1 : forall (n : Z) (_ : and (Z.le (Zpos xH) n) (Z.lt n p)), rel_prime n p
H0 : Z.lt (Zpos xH) p
H : prime p
p : Z
*****
forall (_ : Z.le a Z0) (_ : Z.le (Z.opp a) (Z.abs p)), or (eq a (Z.opp p)) (or (and (Z.lt (Z.opp p) a) (Z.lt a (Zneg xH))) (or (eq a (Zneg xH)) (or (eq a Z0) (or (eq a (Zpos xH)) (or (and (Z.lt (Zpos xH) a) (Z.lt a p)) (eq a p))))))
+++++
pattern (Zabs p) in |- *.
-----
Lemma prime_divisors : forall p : Z, prime p -> forall a : Z, (a | p)%Z -> a = (-1)%Z \\/ a = 1%Z \\/ a = p \\/ a = (- p)%Z.
Proof.
simple induction 1.
intros.
assert (a = (- p)%Z \\/ (- p < a < -1)%Z \\/ a = (-1)%Z \\/ a = 0%Z \\/ a = 1%Z \\/ (1 < a < p)%Z \\/ a = p).
assert (Zabs a <= Zabs p)%Z.
generalize H3.
pattern (Zabs a) in |- *.
apply Zabs_ind.
pattern (Zabs p) in |- *.

*****
H3 : Z.le (Z.abs a) (Z.abs p)
H2 : divide a p
a : Z
H1 : forall (n : Z) (_ : and (Z.le (Zpos xH) n) (Z.lt n p)), rel_prime n p
H0 : Z.lt (Zpos xH) p
H : prime p
p : Z
*****
(fun z : Z => forall (_ : Z.le a Z0) (_ : Z.le (Z.opp a) z), or (eq a (Z.opp p)) (or (and (Z.lt (Z.opp p) a) (Z.lt a (Zneg xH))) (or (eq a (Zneg xH)) (or (eq a Z0) (or (eq a (Zpos xH)) (or (and (Z.lt (Zpos xH) a) (Z.lt a p)) (eq a p))))))) (Z.abs p)
+++++
apply Zabs_ind.
-----
Lemma prime_divisors : forall p : Z, prime p -> forall a : Z, (a | p)%Z -> a = (-1)%Z \\/ a = 1%Z \\/ a = p \\/ a = (- p)%Z.
Proof.
simple induction 1.
intros.
assert (a = (- p)%Z \\/ (- p < a < -1)%Z \\/ a = (-1)%Z \\/ a = 0%Z \\/ a = 1%Z \\/ (1 < a < p)%Z \\/ a = p).
assert (Zabs a <= Zabs p)%Z.
generalize H3.
pattern (Zabs a) in |- *.
apply Zabs_ind.
pattern (Zabs p) in |- *.
apply Zabs_ind.

*****
H3 : Z.le (Z.abs a) (Z.abs p)
H2 : divide a p
a : Z
H1 : forall (n : Z) (_ : and (Z.le (Zpos xH) n) (Z.lt n p)), rel_prime n p
H0 : Z.lt (Zpos xH) p
H : prime p
p : Z
*****
forall (_ : Z.ge p Z0) (_ : Z.le a Z0) (_ : Z.le (Z.opp a) p), or (eq a (Z.opp p)) (or (and (Z.lt (Z.opp p) a) (Z.lt a (Zneg xH))) (or (eq a (Zneg xH)) (or (eq a Z0) (or (eq a (Zpos xH)) (or (and (Z.lt (Zpos xH) a) (Z.lt a p)) (eq a p))))))
+++++
intros.
-----
Lemma prime_divisors : forall p : Z, prime p -> forall a : Z, (a | p)%Z -> a = (-1)%Z \\/ a = 1%Z \\/ a = p \\/ a = (- p)%Z.
Proof.
simple induction 1.
intros.
assert (a = (- p)%Z \\/ (- p < a < -1)%Z \\/ a = (-1)%Z \\/ a = 0%Z \\/ a = 1%Z \\/ (1 < a < p)%Z \\/ a = p).
assert (Zabs a <= Zabs p)%Z.
generalize H3.
pattern (Zabs a) in |- *.
apply Zabs_ind.
pattern (Zabs p) in |- *.
apply Zabs_ind.
intros.

*****
H6 : Z.le (Z.opp a) p
H5 : Z.le a Z0
H4 : Z.ge p Z0
H3 : Z.le (Z.abs a) (Z.abs p)
H2 : divide a p
a : Z
H1 : forall (n : Z) (_ : and (Z.le (Zpos xH) n) (Z.lt n p)), rel_prime n p
H0 : Z.lt (Zpos xH) p
H : prime p
p : Z
*****
or (eq a (Z.opp p)) (or (and (Z.lt (Z.opp p) a) (Z.lt a (Zneg xH))) (or (eq a (Zneg xH)) (or (eq a Z0) (or (eq a (Zpos xH)) (or (and (Z.lt (Zpos xH) a) (Z.lt a p)) (eq a p))))))
+++++
omega.
-----
Lemma prime_divisors : forall p : Z, prime p -> forall a : Z, (a | p)%Z -> a = (-1)%Z \\/ a = 1%Z \\/ a = p \\/ a = (- p)%Z.
Proof.
simple induction 1.
intros.
assert (a = (- p)%Z \\/ (- p < a < -1)%Z \\/ a = (-1)%Z \\/ a = 0%Z \\/ a = 1%Z \\/ (1 < a < p)%Z \\/ a = p).
assert (Zabs a <= Zabs p)%Z.
generalize H3.
pattern (Zabs a) in |- *.
apply Zabs_ind.
pattern (Zabs p) in |- *.
apply Zabs_ind.

*****
H3 : Z.le (Z.abs a) (Z.abs p)
H2 : divide a p
a : Z
H1 : forall (n : Z) (_ : and (Z.le (Zpos xH) n) (Z.lt n p)), rel_prime n p
H0 : Z.lt (Zpos xH) p
H : prime p
p : Z
*****
forall (_ : Z.le p Z0) (_ : Z.le a Z0) (_ : Z.le (Z.opp a) (Z.opp p)), or (eq a (Z.opp p)) (or (and (Z.lt (Z.opp p) a) (Z.lt a (Zneg xH))) (or (eq a (Zneg xH)) (or (eq a Z0) (or (eq a (Zpos xH)) (or (and (Z.lt (Zpos xH) a) (Z.lt a p)) (eq a p))))))
+++++
intros.
-----
Lemma prime_divisors : forall p : Z, prime p -> forall a : Z, (a | p)%Z -> a = (-1)%Z \\/ a = 1%Z \\/ a = p \\/ a = (- p)%Z.
Proof.
simple induction 1.
intros.
assert (a = (- p)%Z \\/ (- p < a < -1)%Z \\/ a = (-1)%Z \\/ a = 0%Z \\/ a = 1%Z \\/ (1 < a < p)%Z \\/ a = p).
assert (Zabs a <= Zabs p)%Z.
generalize H3.
pattern (Zabs a) in |- *.
apply Zabs_ind.
pattern (Zabs p) in |- *.
apply Zabs_ind.
intros.

*****
H6 : Z.le (Z.opp a) (Z.opp p)
H5 : Z.le a Z0
H4 : Z.le p Z0
H3 : Z.le (Z.abs a) (Z.abs p)
H2 : divide a p
a : Z
H1 : forall (n : Z) (_ : and (Z.le (Zpos xH) n) (Z.lt n p)), rel_prime n p
H0 : Z.lt (Zpos xH) p
H : prime p
p : Z
*****
or (eq a (Z.opp p)) (or (and (Z.lt (Z.opp p) a) (Z.lt a (Zneg xH))) (or (eq a (Zneg xH)) (or (eq a Z0) (or (eq a (Zpos xH)) (or (and (Z.lt (Zpos xH) a) (Z.lt a p)) (eq a p))))))
+++++
omega.
-----
Lemma prime_divisors : forall p : Z, prime p -> forall a : Z, (a | p)%Z -> a = (-1)%Z \\/ a = 1%Z \\/ a = p \\/ a = (- p)%Z.
Proof.
simple induction 1.
intros.
assert (a = (- p)%Z \\/ (- p < a < -1)%Z \\/ a = (-1)%Z \\/ a = 0%Z \\/ a = 1%Z \\/ (1 < a < p)%Z \\/ a = p).

*****
H3 : or (eq a (Z.opp p))\n (or (and (Z.lt (Z.opp p) a) (Z.lt a (Zneg xH)))\n (or (eq a (Zneg xH))\n (or (eq a Z0)\n (or (eq a (Zpos xH))\n (or (and (Z.lt (Zpos xH) a) (Z.lt a p)) (eq a p))))))
H2 : divide a p
a : Z
H1 : forall (n : Z) (_ : and (Z.le (Zpos xH) n) (Z.lt n p)), rel_prime n p
H0 : Z.lt (Zpos xH) p
H : prime p
p : Z
*****
or (eq a (Zneg xH)) (or (eq a (Zpos xH)) (or (eq a p) (eq a (Z.opp p))))
+++++
intuition.
-----
Lemma prime_divisors : forall p : Z, prime p -> forall a : Z, (a | p)%Z -> a = (-1)%Z \\/ a = 1%Z \\/ a = p \\/ a = (- p)%Z.
Proof.
simple induction 1.
intros.
assert (a = (- p)%Z \\/ (- p < a < -1)%Z \\/ a = (-1)%Z \\/ a = 0%Z \\/ a = 1%Z \\/ (1 < a < p)%Z \\/ a = p).
intuition.

*****
H5 : Z.lt a (Zneg xH)
H4 : Z.lt (Z.opp p) a
H2 : divide a p
a : Z
H1 : forall (n : Z) (_ : and (Z.le (Zpos xH) n) (Z.lt n p)), rel_prime n p
H0 : Z.lt (Zpos xH) p
H : prime p
p : Z
*****
or (eq a (Zneg xH)) (or (eq a (Zpos xH)) (or (eq a p) (eq a (Z.opp p))))
+++++
absurd (rel_prime (- a) p).
-----
Lemma prime_divisors : forall p : Z, prime p -> forall a : Z, (a | p)%Z -> a = (-1)%Z \\/ a = 1%Z \\/ a = p \\/ a = (- p)%Z.
Proof.
simple induction 1.
intros.
assert (a = (- p)%Z \\/ (- p < a < -1)%Z \\/ a = (-1)%Z \\/ a = 0%Z \\/ a = 1%Z \\/ (1 < a < p)%Z \\/ a = p).
intuition.
absurd (rel_prime (- a) p).

*****
H5 : Z.lt a (Zneg xH)
H4 : Z.lt (Z.opp p) a
H2 : divide a p
a : Z
H1 : forall (n : Z) (_ : and (Z.le (Zpos xH) n) (Z.lt n p)), rel_prime n p
H0 : Z.lt (Zpos xH) p
H : prime p
p : Z
*****
not (rel_prime (Z.opp a) p)
+++++
intuition.
-----
Lemma prime_divisors : forall p : Z, prime p -> forall a : Z, (a | p)%Z -> a = (-1)%Z \\/ a = 1%Z \\/ a = p \\/ a = (- p)%Z.
Proof.
simple induction 1.
intros.
assert (a = (- p)%Z \\/ (- p < a < -1)%Z \\/ a = (-1)%Z \\/ a = 0%Z \\/ a = 1%Z \\/ (1 < a < p)%Z \\/ a = p).
intuition.
absurd (rel_prime (- a) p).
intuition.

*****
H3 : rel_prime (Z.opp a) p
H5 : Z.lt a (Zneg xH)
H4 : Z.lt (Z.opp p) a
H2 : divide a p
a : Z
H1 : forall (n : Z) (_ : and (Z.le (Zpos xH) n) (Z.lt n p)), rel_prime n p
H0 : Z.lt (Zpos xH) p
H : prime p
p : Z
*****
False
+++++
inversion H3.
-----
Lemma prime_divisors : forall p : Z, prime p -> forall a : Z, (a | p)%Z -> a = (-1)%Z \\/ a = 1%Z \\/ a = p \\/ a = (- p)%Z.
Proof.
simple induction 1.
intros.
assert (a = (- p)%Z \\/ (- p < a < -1)%Z \\/ a = (-1)%Z \\/ a = 0%Z \\/ a = 1%Z \\/ (1 < a < p)%Z \\/ a = p).
intuition.
absurd (rel_prime (- a) p).
intuition.
inversion H3.

*****
H8 : forall (x : Z) (_ : divide x (Z.opp a)) (_ : divide x p),\ndivide x (Zpos xH)
H7 : divide (Zpos xH) p
H6 : divide (Zpos xH) (Z.opp a)
H3 : rel_prime (Z.opp a) p
H5 : Z.lt a (Zneg xH)
H4 : Z.lt (Z.opp p) a
H2 : divide a p
a : Z
H1 : forall (n : Z) (_ : and (Z.le (Zpos xH) n) (Z.lt n p)), rel_prime n p
H0 : Z.lt (Zpos xH) p
H : prime p
p : Z
*****
False
+++++
assert (- a | - a)%Z.
-----
Lemma prime_divisors : forall p : Z, prime p -> forall a : Z, (a | p)%Z -> a = (-1)%Z \\/ a = 1%Z \\/ a = p \\/ a = (- p)%Z.
Proof.
simple induction 1.
intros.
assert (a = (- p)%Z \\/ (- p < a < -1)%Z \\/ a = (-1)%Z \\/ a = 0%Z \\/ a = 1%Z \\/ (1 < a < p)%Z \\/ a = p).
intuition.
absurd (rel_prime (- a) p).
intuition.
inversion H3.
assert (- a | - a)%Z.

*****
H8 : forall (x : Z) (_ : divide x (Z.opp a)) (_ : divide x p),\ndivide x (Zpos xH)
H7 : divide (Zpos xH) p
H6 : divide (Zpos xH) (Z.opp a)
H3 : rel_prime (Z.opp a) p
H5 : Z.lt a (Zneg xH)
H4 : Z.lt (Z.opp p) a
H2 : divide a p
a : Z
H1 : forall (n : Z) (_ : and (Z.le (Zpos xH) n) (Z.lt n p)), rel_prime n p
H0 : Z.lt (Zpos xH) p
H : prime p
p : Z
*****
divide (Z.opp a) (Z.opp a)
+++++
auto.
-----
Lemma prime_divisors : forall p : Z, prime p -> forall a : Z, (a | p)%Z -> a = (-1)%Z \\/ a = 1%Z \\/ a = p \\/ a = (- p)%Z.
Proof.
simple induction 1.
intros.
assert (a = (- p)%Z \\/ (- p < a < -1)%Z \\/ a = (-1)%Z \\/ a = 0%Z \\/ a = 1%Z \\/ (1 < a < p)%Z \\/ a = p).
intuition.
absurd (rel_prime (- a) p).
intuition.
inversion H3.
assert (- a | - a)%Z.

*****
H9 : divide (Z.opp a) (Z.opp a)
H8 : forall (x : Z) (_ : divide x (Z.opp a)) (_ : divide x p),\ndivide x (Zpos xH)
H7 : divide (Zpos xH) p
H6 : divide (Zpos xH) (Z.opp a)
H3 : rel_prime (Z.opp a) p
H5 : Z.lt a (Zneg xH)
H4 : Z.lt (Z.opp p) a
H2 : divide a p
a : Z
H1 : forall (n : Z) (_ : and (Z.le (Zpos xH) n) (Z.lt n p)), rel_prime n p
H0 : Z.lt (Zpos xH) p
H : prime p
p : Z
*****
False
+++++
auto.
-----
Lemma prime_divisors : forall p : Z, prime p -> forall a : Z, (a | p)%Z -> a = (-1)%Z \\/ a = 1%Z \\/ a = p \\/ a = (- p)%Z.
Proof.
simple induction 1.
intros.
assert (a = (- p)%Z \\/ (- p < a < -1)%Z \\/ a = (-1)%Z \\/ a = 0%Z \\/ a = 1%Z \\/ (1 < a < p)%Z \\/ a = p).
intuition.
absurd (rel_prime (- a) p).
intuition.
inversion H3.
assert (- a | - a)%Z.
auto.

*****
H9 : divide (Z.opp a) (Z.opp a)
H8 : forall (x : Z) (_ : divide x (Z.opp a)) (_ : divide x p),\ndivide x (Zpos xH)
H7 : divide (Zpos xH) p
H6 : divide (Zpos xH) (Z.opp a)
H3 : rel_prime (Z.opp a) p
H5 : Z.lt a (Zneg xH)
H4 : Z.lt (Z.opp p) a
H2 : divide a p
a : Z
H1 : forall (n : Z) (_ : and (Z.le (Zpos xH) n) (Z.lt n p)), rel_prime n p
H0 : Z.lt (Zpos xH) p
H : prime p
p : Z
*****
False
+++++
assert (- a | p)%Z.
-----
Lemma prime_divisors : forall p : Z, prime p -> forall a : Z, (a | p)%Z -> a = (-1)%Z \\/ a = 1%Z \\/ a = p \\/ a = (- p)%Z.
Proof.
simple induction 1.
intros.
assert (a = (- p)%Z \\/ (- p < a < -1)%Z \\/ a = (-1)%Z \\/ a = 0%Z \\/ a = 1%Z \\/ (1 < a < p)%Z \\/ a = p).
intuition.
absurd (rel_prime (- a) p).
intuition.
inversion H3.
assert (- a | - a)%Z.
auto.
assert (- a | p)%Z.

*****
H9 : divide (Z.opp a) (Z.opp a)
H8 : forall (x : Z) (_ : divide x (Z.opp a)) (_ : divide x p),\ndivide x (Zpos xH)
H7 : divide (Zpos xH) p
H6 : divide (Zpos xH) (Z.opp a)
H3 : rel_prime (Z.opp a) p
H5 : Z.lt a (Zneg xH)
H4 : Z.lt (Z.opp p) a
H2 : divide a p
a : Z
H1 : forall (n : Z) (_ : and (Z.le (Zpos xH) n) (Z.lt n p)), rel_prime n p
H0 : Z.lt (Zpos xH) p
H : prime p
p : Z
*****
divide (Z.opp a) p
+++++
auto.
-----
Lemma prime_divisors : forall p : Z, prime p -> forall a : Z, (a | p)%Z -> a = (-1)%Z \\/ a = 1%Z \\/ a = p \\/ a = (- p)%Z.
Proof.
simple induction 1.
intros.
assert (a = (- p)%Z \\/ (- p < a < -1)%Z \\/ a = (-1)%Z \\/ a = 0%Z \\/ a = 1%Z \\/ (1 < a < p)%Z \\/ a = p).
intuition.
absurd (rel_prime (- a) p).
intuition.
inversion H3.
assert (- a | - a)%Z.
auto.
assert (- a | p)%Z.

*****
H10 : divide (Z.opp a) p
H9 : divide (Z.opp a) (Z.opp a)
H8 : forall (x : Z) (_ : divide x (Z.opp a)) (_ : divide x p),\ndivide x (Zpos xH)
H7 : divide (Zpos xH) p
H6 : divide (Zpos xH) (Z.opp a)
H3 : rel_prime (Z.opp a) p
H5 : Z.lt a (Zneg xH)
H4 : Z.lt (Z.opp p) a
H2 : divide a p
a : Z
H1 : forall (n : Z) (_ : and (Z.le (Zpos xH) n) (Z.lt n p)), rel_prime n p
H0 : Z.lt (Zpos xH) p
H : prime p
p : Z
*****
False
+++++
auto.
-----
Lemma prime_divisors : forall p : Z, prime p -> forall a : Z, (a | p)%Z -> a = (-1)%Z \\/ a = 1%Z \\/ a = p \\/ a = (- p)%Z.
Proof.
simple induction 1.
intros.
assert (a = (- p)%Z \\/ (- p < a < -1)%Z \\/ a = (-1)%Z \\/ a = 0%Z \\/ a = 1%Z \\/ (1 < a < p)%Z \\/ a = p).
intuition.
absurd (rel_prime (- a) p).
intuition.
inversion H3.
assert (- a | - a)%Z.
auto.
assert (- a | p)%Z.
auto.

*****
H10 : divide (Z.opp a) p
H9 : divide (Z.opp a) (Z.opp a)
H8 : forall (x : Z) (_ : divide x (Z.opp a)) (_ : divide x p),\ndivide x (Zpos xH)
H7 : divide (Zpos xH) p
H6 : divide (Zpos xH) (Z.opp a)
H3 : rel_prime (Z.opp a) p
H5 : Z.lt a (Zneg xH)
H4 : Z.lt (Z.opp p) a
H2 : divide a p
a : Z
H1 : forall (n : Z) (_ : and (Z.le (Zpos xH) n) (Z.lt n p)), rel_prime n p
H0 : Z.lt (Zpos xH) p
H : prime p
p : Z
*****
False
+++++
generalize (H8 (- a)%Z H9 H10).
-----
Lemma prime_divisors : forall p : Z, prime p -> forall a : Z, (a | p)%Z -> a = (-1)%Z \\/ a = 1%Z \\/ a = p \\/ a = (- p)%Z.
Proof.
simple induction 1.
intros.
assert (a = (- p)%Z \\/ (- p < a < -1)%Z \\/ a = (-1)%Z \\/ a = 0%Z \\/ a = 1%Z \\/ (1 < a < p)%Z \\/ a = p).
intuition.
absurd (rel_prime (- a) p).
intuition.
inversion H3.
assert (- a | - a)%Z.
auto.
assert (- a | p)%Z.
auto.
generalize (H8 (- a)%Z H9 H10).

*****
H10 : divide (Z.opp a) p
H9 : divide (Z.opp a) (Z.opp a)
H8 : forall (x : Z) (_ : divide x (Z.opp a)) (_ : divide x p),\ndivide x (Zpos xH)
H7 : divide (Zpos xH) p
H6 : divide (Zpos xH) (Z.opp a)
H3 : rel_prime (Z.opp a) p
H5 : Z.lt a (Zneg xH)
H4 : Z.lt (Z.opp p) a
H2 : divide a p
a : Z
H1 : forall (n : Z) (_ : and (Z.le (Zpos xH) n) (Z.lt n p)), rel_prime n p
H0 : Z.lt (Zpos xH) p
H : prime p
p : Z
*****
forall _ : divide (Z.opp a) (Zpos xH), False
+++++
intuition.
-----
Lemma prime_divisors : forall p : Z, prime p -> forall a : Z, (a | p)%Z -> a = (-1)%Z \\/ a = 1%Z \\/ a = p \\/ a = (- p)%Z.
Proof.
simple induction 1.
intros.
assert (a = (- p)%Z \\/ (- p < a < -1)%Z \\/ a = (-1)%Z \\/ a = 0%Z \\/ a = 1%Z \\/ (1 < a < p)%Z \\/ a = p).
intuition.
absurd (rel_prime (- a) p).
intuition.
inversion H3.
assert (- a | - a)%Z.
auto.
assert (- a | p)%Z.
auto.
generalize (H8 (- a)%Z H9 H10).
intuition.

*****
H11 : divide (Z.opp a) (Zpos xH)
H10 : divide (Z.opp a) p
H9 : divide (Z.opp a) (Z.opp a)
H8 : forall (x : Z) (_ : divide x (Z.opp a)) (_ : divide x p),\ndivide x (Zpos xH)
H7 : divide (Zpos xH) p
H6 : divide (Zpos xH) (Z.opp a)
H3 : rel_prime (Z.opp a) p
H5 : Z.lt a (Zneg xH)
H4 : Z.lt (Z.opp p) a
H2 : divide a p
a : Z
H1 : forall (n : Z) (_ : and (Z.le (Zpos xH) n) (Z.lt n p)), rel_prime n p
H0 : Z.lt (Zpos xH) p
H : prime p
p : Z
*****
False
+++++
generalize (divide_1 (- a) H11).
-----
Lemma prime_divisors : forall p : Z, prime p -> forall a : Z, (a | p)%Z -> a = (-1)%Z \\/ a = 1%Z \\/ a = p \\/ a = (- p)%Z.
Proof.
simple induction 1.
intros.
assert (a = (- p)%Z \\/ (- p < a < -1)%Z \\/ a = (-1)%Z \\/ a = 0%Z \\/ a = 1%Z \\/ (1 < a < p)%Z \\/ a = p).
intuition.
absurd (rel_prime (- a) p).
intuition.
inversion H3.
assert (- a | - a)%Z.
auto.
assert (- a | p)%Z.
auto.
generalize (H8 (- a)%Z H9 H10).
intuition.
generalize (divide_1 (- a) H11).

*****
H11 : divide (Z.opp a) (Zpos xH)
H10 : divide (Z.opp a) p
H9 : divide (Z.opp a) (Z.opp a)
H8 : forall (x : Z) (_ : divide x (Z.opp a)) (_ : divide x p),\ndivide x (Zpos xH)
H7 : divide (Zpos xH) p
H6 : divide (Zpos xH) (Z.opp a)
H3 : rel_prime (Z.opp a) p
H5 : Z.lt a (Zneg xH)
H4 : Z.lt (Z.opp p) a
H2 : divide a p
a : Z
H1 : forall (n : Z) (_ : and (Z.le (Zpos xH) n) (Z.lt n p)), rel_prime n p
H0 : Z.lt (Zpos xH) p
H : prime p
p : Z
*****
forall _ : or (eq (Z.opp a) (Zpos xH)) (eq (Z.opp a) (Zneg xH)), False
+++++
intuition.
-----
Lemma prime_divisors : forall p : Z, prime p -> forall a : Z, (a | p)%Z -> a = (-1)%Z \\/ a = 1%Z \\/ a = p \\/ a = (- p)%Z.
Proof.
simple induction 1.
intros.
assert (a = (- p)%Z \\/ (- p < a < -1)%Z \\/ a = (-1)%Z \\/ a = 0%Z \\/ a = 1%Z \\/ (1 < a < p)%Z \\/ a = p).
intuition.
absurd (rel_prime (- a) p).

*****
H5 : Z.lt a (Zneg xH)
H4 : Z.lt (Z.opp p) a
H2 : divide a p
a : Z
H1 : forall (n : Z) (_ : and (Z.le (Zpos xH) n) (Z.lt n p)), rel_prime n p
H0 : Z.lt (Zpos xH) p
H : prime p
p : Z
*****
rel_prime (Z.opp a) p
+++++
intuition.
-----
Lemma prime_divisors : forall p : Z, prime p -> forall a : Z, (a | p)%Z -> a = (-1)%Z \\/ a = 1%Z \\/ a = p \\/ a = (- p)%Z.
Proof.
simple induction 1.
intros.
assert (a = (- p)%Z \\/ (- p < a < -1)%Z \\/ a = (-1)%Z \\/ a = 0%Z \\/ a = 1%Z \\/ (1 < a < p)%Z \\/ a = p).
intuition.

*****
H3 : eq a Z0
H2 : divide a p
a : Z
H1 : forall (n : Z) (_ : and (Z.le (Zpos xH) n) (Z.lt n p)), rel_prime n p
H0 : Z.lt (Zpos xH) p
H : prime p
p : Z
*****
or (eq a (Zneg xH)) (or (eq a (Zpos xH)) (or (eq a p) (eq a (Z.opp p))))
+++++
inversion H2.
-----
Lemma prime_divisors : forall p : Z, prime p -> forall a : Z, (a | p)%Z -> a = (-1)%Z \\/ a = 1%Z \\/ a = p \\/ a = (- p)%Z.
Proof.
simple induction 1.
intros.
assert (a = (- p)%Z \\/ (- p < a < -1)%Z \\/ a = (-1)%Z \\/ a = 0%Z \\/ a = 1%Z \\/ (1 < a < p)%Z \\/ a = p).
intuition.
inversion H2.

*****
H4 : eq p (Z.mul q a)
q : Z
H3 : eq a Z0
H2 : divide a p
a : Z
H1 : forall (n : Z) (_ : and (Z.le (Zpos xH) n) (Z.lt n p)), rel_prime n p
H0 : Z.lt (Zpos xH) p
H : prime p
p : Z
*****
or (eq a (Zneg xH)) (or (eq a (Zpos xH)) (or (eq a p) (eq a (Z.opp p))))
+++++
subst a.
-----
Lemma prime_divisors : forall p : Z, prime p -> forall a : Z, (a | p)%Z -> a = (-1)%Z \\/ a = 1%Z \\/ a = p \\/ a = (- p)%Z.
Proof.
simple induction 1.
intros.
assert (a = (- p)%Z \\/ (- p < a < -1)%Z \\/ a = (-1)%Z \\/ a = 0%Z \\/ a = 1%Z \\/ (1 < a < p)%Z \\/ a = p).
intuition.
inversion H2.
subst a.

*****
H4 : eq p (Z.mul q Z0)
q : Z
H2 : divide Z0 p
H1 : forall (n : Z) (_ : and (Z.le (Zpos xH) n) (Z.lt n p)), rel_prime n p
H0 : Z.lt (Zpos xH) p
H : prime p
p : Z
*****
or (eq Z0 (Zneg xH)) (or (eq Z0 (Zpos xH)) (or (eq Z0 p) (eq Z0 (Z.opp p))))
+++++
omega.
-----
Lemma prime_divisors : forall p : Z, prime p -> forall a : Z, (a | p)%Z -> a = (-1)%Z \\/ a = 1%Z \\/ a = p \\/ a = (- p)%Z.
Proof.
simple induction 1.
intros.
assert (a = (- p)%Z \\/ (- p < a < -1)%Z \\/ a = (-1)%Z \\/ a = 0%Z \\/ a = 1%Z \\/ (1 < a < p)%Z \\/ a = p).
intuition.

*****
H5 : Z.lt a p
H4 : Z.lt (Zpos xH) a
H2 : divide a p
a : Z
H1 : forall (n : Z) (_ : and (Z.le (Zpos xH) n) (Z.lt n p)), rel_prime n p
H0 : Z.lt (Zpos xH) p
H : prime p
p : Z
*****
or (eq a (Zneg xH)) (or (eq a (Zpos xH)) (or (eq a p) (eq a (Z.opp p))))
+++++
absurd (rel_prime a p).
-----
Lemma prime_divisors : forall p : Z, prime p -> forall a : Z, (a | p)%Z -> a = (-1)%Z \\/ a = 1%Z \\/ a = p \\/ a = (- p)%Z.
Proof.
simple induction 1.
intros.
assert (a = (- p)%Z \\/ (- p < a < -1)%Z \\/ a = (-1)%Z \\/ a = 0%Z \\/ a = 1%Z \\/ (1 < a < p)%Z \\/ a = p).
intuition.
absurd (rel_prime a p).

*****
H5 : Z.lt a p
H4 : Z.lt (Zpos xH) a
H2 : divide a p
a : Z
H1 : forall (n : Z) (_ : and (Z.le (Zpos xH) n) (Z.lt n p)), rel_prime n p
H0 : Z.lt (Zpos xH) p
H : prime p
p : Z
*****
not (rel_prime a p)
+++++
intuition.
-----
Lemma prime_divisors : forall p : Z, prime p -> forall a : Z, (a | p)%Z -> a = (-1)%Z \\/ a = 1%Z \\/ a = p \\/ a = (- p)%Z.
Proof.
simple induction 1.
intros.
assert (a = (- p)%Z \\/ (- p < a < -1)%Z \\/ a = (-1)%Z \\/ a = 0%Z \\/ a = 1%Z \\/ (1 < a < p)%Z \\/ a = p).
intuition.
absurd (rel_prime a p).
intuition.

*****
H3 : rel_prime a p
H5 : Z.lt a p
H4 : Z.lt (Zpos xH) a
H2 : divide a p
a : Z
H1 : forall (n : Z) (_ : and (Z.le (Zpos xH) n) (Z.lt n p)), rel_prime n p
H0 : Z.lt (Zpos xH) p
H : prime p
p : Z
*****
False
+++++
inversion H3.
-----
Lemma prime_divisors : forall p : Z, prime p -> forall a : Z, (a | p)%Z -> a = (-1)%Z \\/ a = 1%Z \\/ a = p \\/ a = (- p)%Z.
Proof.
simple induction 1.
intros.
assert (a = (- p)%Z \\/ (- p < a < -1)%Z \\/ a = (-1)%Z \\/ a = 0%Z \\/ a = 1%Z \\/ (1 < a < p)%Z \\/ a = p).
intuition.
absurd (rel_prime a p).
intuition.
inversion H3.

*****
H8 : forall (x : Z) (_ : divide x a) (_ : divide x p), divide x (Zpos xH)
H7 : divide (Zpos xH) p
H6 : divide (Zpos xH) a
H3 : rel_prime a p
H5 : Z.lt a p
H4 : Z.lt (Zpos xH) a
H2 : divide a p
a : Z
H1 : forall (n : Z) (_ : and (Z.le (Zpos xH) n) (Z.lt n p)), rel_prime n p
H0 : Z.lt (Zpos xH) p
H : prime p
p : Z
*****
False
+++++
assert (a | a)%Z.
-----
Lemma prime_divisors : forall p : Z, prime p -> forall a : Z, (a | p)%Z -> a = (-1)%Z \\/ a = 1%Z \\/ a = p \\/ a = (- p)%Z.
Proof.
simple induction 1.
intros.
assert (a = (- p)%Z \\/ (- p < a < -1)%Z \\/ a = (-1)%Z \\/ a = 0%Z \\/ a = 1%Z \\/ (1 < a < p)%Z \\/ a = p).
intuition.
absurd (rel_prime a p).
intuition.
inversion H3.
assert (a | a)%Z.

*****
H8 : forall (x : Z) (_ : divide x a) (_ : divide x p), divide x (Zpos xH)
H7 : divide (Zpos xH) p
H6 : divide (Zpos xH) a
H3 : rel_prime a p
H5 : Z.lt a p
H4 : Z.lt (Zpos xH) a
H2 : divide a p
a : Z
H1 : forall (n : Z) (_ : and (Z.le (Zpos xH) n) (Z.lt n p)), rel_prime n p
H0 : Z.lt (Zpos xH) p
H : prime p
p : Z
*****
divide a a
+++++
auto.
-----
Lemma prime_divisors : forall p : Z, prime p -> forall a : Z, (a | p)%Z -> a = (-1)%Z \\/ a = 1%Z \\/ a = p \\/ a = (- p)%Z.
Proof.
simple induction 1.
intros.
assert (a = (- p)%Z \\/ (- p < a < -1)%Z \\/ a = (-1)%Z \\/ a = 0%Z \\/ a = 1%Z \\/ (1 < a < p)%Z \\/ a = p).
intuition.
absurd (rel_prime a p).
intuition.
inversion H3.
assert (a | a)%Z.

*****
H9 : divide a a
H8 : forall (x : Z) (_ : divide x a) (_ : divide x p), divide x (Zpos xH)
H7 : divide (Zpos xH) p
H6 : divide (Zpos xH) a
H3 : rel_prime a p
H5 : Z.lt a p
H4 : Z.lt (Zpos xH) a
H2 : divide a p
a : Z
H1 : forall (n : Z) (_ : and (Z.le (Zpos xH) n) (Z.lt n p)), rel_prime n p
H0 : Z.lt (Zpos xH) p
H : prime p
p : Z
*****
False
+++++
auto.
-----
Lemma prime_divisors : forall p : Z, prime p -> forall a : Z, (a | p)%Z -> a = (-1)%Z \\/ a = 1%Z \\/ a = p \\/ a = (- p)%Z.
Proof.
simple induction 1.
intros.
assert (a = (- p)%Z \\/ (- p < a < -1)%Z \\/ a = (-1)%Z \\/ a = 0%Z \\/ a = 1%Z \\/ (1 < a < p)%Z \\/ a = p).
intuition.
absurd (rel_prime a p).
intuition.
inversion H3.
assert (a | a)%Z.
auto.

*****
H9 : divide a a
H8 : forall (x : Z) (_ : divide x a) (_ : divide x p), divide x (Zpos xH)
H7 : divide (Zpos xH) p
H6 : divide (Zpos xH) a
H3 : rel_prime a p
H5 : Z.lt a p
H4 : Z.lt (Zpos xH) a
H2 : divide a p
a : Z
H1 : forall (n : Z) (_ : and (Z.le (Zpos xH) n) (Z.lt n p)), rel_prime n p
H0 : Z.lt (Zpos xH) p
H : prime p
p : Z
*****
False
+++++
assert (a | p)%Z.
-----
Lemma prime_divisors : forall p : Z, prime p -> forall a : Z, (a | p)%Z -> a = (-1)%Z \\/ a = 1%Z \\/ a = p \\/ a = (- p)%Z.
Proof.
simple induction 1.
intros.
assert (a = (- p)%Z \\/ (- p < a < -1)%Z \\/ a = (-1)%Z \\/ a = 0%Z \\/ a = 1%Z \\/ (1 < a < p)%Z \\/ a = p).
intuition.
absurd (rel_prime a p).
intuition.
inversion H3.
assert (a | a)%Z.
auto.
assert (a | p)%Z.

*****
H9 : divide a a
H8 : forall (x : Z) (_ : divide x a) (_ : divide x p), divide x (Zpos xH)
H7 : divide (Zpos xH) p
H6 : divide (Zpos xH) a
H3 : rel_prime a p
H5 : Z.lt a p
H4 : Z.lt (Zpos xH) a
H2 : divide a p
a : Z
H1 : forall (n : Z) (_ : and (Z.le (Zpos xH) n) (Z.lt n p)), rel_prime n p
H0 : Z.lt (Zpos xH) p
H : prime p
p : Z
*****
divide a p
+++++
auto.
-----
Lemma prime_divisors : forall p : Z, prime p -> forall a : Z, (a | p)%Z -> a = (-1)%Z \\/ a = 1%Z \\/ a = p \\/ a = (- p)%Z.
Proof.
simple induction 1.
intros.
assert (a = (- p)%Z \\/ (- p < a < -1)%Z \\/ a = (-1)%Z \\/ a = 0%Z \\/ a = 1%Z \\/ (1 < a < p)%Z \\/ a = p).
intuition.
absurd (rel_prime a p).
intuition.
inversion H3.
assert (a | a)%Z.
auto.
assert (a | p)%Z.

*****
H10 : divide a p
H9 : divide a a
H8 : forall (x : Z) (_ : divide x a) (_ : divide x p), divide x (Zpos xH)
H7 : divide (Zpos xH) p
H6 : divide (Zpos xH) a
H3 : rel_prime a p
H5 : Z.lt a p
H4 : Z.lt (Zpos xH) a
H2 : divide a p
a : Z
H1 : forall (n : Z) (_ : and (Z.le (Zpos xH) n) (Z.lt n p)), rel_prime n p
H0 : Z.lt (Zpos xH) p
H : prime p
p : Z
*****
False
+++++
auto.
-----
Lemma prime_divisors : forall p : Z, prime p -> forall a : Z, (a | p)%Z -> a = (-1)%Z \\/ a = 1%Z \\/ a = p \\/ a = (- p)%Z.
Proof.
simple induction 1.
intros.
assert (a = (- p)%Z \\/ (- p < a < -1)%Z \\/ a = (-1)%Z \\/ a = 0%Z \\/ a = 1%Z \\/ (1 < a < p)%Z \\/ a = p).
intuition.
absurd (rel_prime a p).
intuition.
inversion H3.
assert (a | a)%Z.
auto.
assert (a | p)%Z.
auto.

*****
H10 : divide a p
H9 : divide a a
H8 : forall (x : Z) (_ : divide x a) (_ : divide x p), divide x (Zpos xH)
H7 : divide (Zpos xH) p
H6 : divide (Zpos xH) a
H3 : rel_prime a p
H5 : Z.lt a p
H4 : Z.lt (Zpos xH) a
H2 : divide a p
a : Z
H1 : forall (n : Z) (_ : and (Z.le (Zpos xH) n) (Z.lt n p)), rel_prime n p
H0 : Z.lt (Zpos xH) p
H : prime p
p : Z
*****
False
+++++
generalize (H8 a H9 H10).
-----
Lemma prime_divisors : forall p : Z, prime p -> forall a : Z, (a | p)%Z -> a = (-1)%Z \\/ a = 1%Z \\/ a = p \\/ a = (- p)%Z.
Proof.
simple induction 1.
intros.
assert (a = (- p)%Z \\/ (- p < a < -1)%Z \\/ a = (-1)%Z \\/ a = 0%Z \\/ a = 1%Z \\/ (1 < a < p)%Z \\/ a = p).
intuition.
absurd (rel_prime a p).
intuition.
inversion H3.
assert (a | a)%Z.
auto.
assert (a | p)%Z.
auto.
generalize (H8 a H9 H10).

*****
H10 : divide a p
H9 : divide a a
H8 : forall (x : Z) (_ : divide x a) (_ : divide x p), divide x (Zpos xH)
H7 : divide (Zpos xH) p
H6 : divide (Zpos xH) a
H3 : rel_prime a p
H5 : Z.lt a p
H4 : Z.lt (Zpos xH) a
H2 : divide a p
a : Z
H1 : forall (n : Z) (_ : and (Z.le (Zpos xH) n) (Z.lt n p)), rel_prime n p
H0 : Z.lt (Zpos xH) p
H : prime p
p : Z
*****
forall _ : divide a (Zpos xH), False
+++++
intuition.
-----
Lemma prime_divisors : forall p : Z, prime p -> forall a : Z, (a | p)%Z -> a = (-1)%Z \\/ a = 1%Z \\/ a = p \\/ a = (- p)%Z.
Proof.
simple induction 1.
intros.
assert (a = (- p)%Z \\/ (- p < a < -1)%Z \\/ a = (-1)%Z \\/ a = 0%Z \\/ a = 1%Z \\/ (1 < a < p)%Z \\/ a = p).
intuition.
absurd (rel_prime a p).
intuition.
inversion H3.
assert (a | a)%Z.
auto.
assert (a | p)%Z.
auto.
generalize (H8 a H9 H10).
intuition.

*****
H11 : divide a (Zpos xH)
H10 : divide a p
H9 : divide a a
H8 : forall (x : Z) (_ : divide x a) (_ : divide x p), divide x (Zpos xH)
H7 : divide (Zpos xH) p
H6 : divide (Zpos xH) a
H3 : rel_prime a p
H5 : Z.lt a p
H4 : Z.lt (Zpos xH) a
H2 : divide a p
a : Z
H1 : forall (n : Z) (_ : and (Z.le (Zpos xH) n) (Z.lt n p)), rel_prime n p
H0 : Z.lt (Zpos xH) p
H : prime p
p : Z
*****
False
+++++
generalize (divide_1 a H11).
-----
Lemma prime_divisors : forall p : Z, prime p -> forall a : Z, (a | p)%Z -> a = (-1)%Z \\/ a = 1%Z \\/ a = p \\/ a = (- p)%Z.
Proof.
simple induction 1.
intros.
assert (a = (- p)%Z \\/ (- p < a < -1)%Z \\/ a = (-1)%Z \\/ a = 0%Z \\/ a = 1%Z \\/ (1 < a < p)%Z \\/ a = p).
intuition.
absurd (rel_prime a p).
intuition.
inversion H3.
assert (a | a)%Z.
auto.
assert (a | p)%Z.
auto.
generalize (H8 a H9 H10).
intuition.
generalize (divide_1 a H11).

*****
H11 : divide a (Zpos xH)
H10 : divide a p
H9 : divide a a
H8 : forall (x : Z) (_ : divide x a) (_ : divide x p), divide x (Zpos xH)
H7 : divide (Zpos xH) p
H6 : divide (Zpos xH) a
H3 : rel_prime a p
H5 : Z.lt a p
H4 : Z.lt (Zpos xH) a
H2 : divide a p
a : Z
H1 : forall (n : Z) (_ : and (Z.le (Zpos xH) n) (Z.lt n p)), rel_prime n p
H0 : Z.lt (Zpos xH) p
H : prime p
p : Z
*****
forall _ : or (eq a (Zpos xH)) (eq a (Zneg xH)), False
+++++
intuition.
-----
Lemma prime_divisors : forall p : Z, prime p -> forall a : Z, (a | p)%Z -> a = (-1)%Z \\/ a = 1%Z \\/ a = p \\/ a = (- p)%Z.
Proof.
simple induction 1.
intros.
assert (a = (- p)%Z \\/ (- p < a < -1)%Z \\/ a = (-1)%Z \\/ a = 0%Z \\/ a = 1%Z \\/ (1 < a < p)%Z \\/ a = p).
intuition.
absurd (rel_prime a p).

*****
H5 : Z.lt a p
H4 : Z.lt (Zpos xH) a
H2 : divide a p
a : Z
H1 : forall (n : Z) (_ : and (Z.le (Zpos xH) n) (Z.lt n p)), rel_prime n p
H0 : Z.lt (Zpos xH) p
H : prime p
p : Z
*****
rel_prime a p
+++++
intuition.
-----
Lemma prime_divisors : forall p : Z, prime p -> forall a : Z, (a | p)%Z -> a = (-1)%Z \\/ a = 1%Z \\/ a = p \\/ a = (- p)%Z.
Proof.
simple induction 1.
intros.
assert (a = (- p)%Z \\/ (- p < a < -1)%Z \\/ a = (-1)%Z \\/ a = 0%Z \\/ a = 1%Z \\/ (1 < a < p)%Z \\/ a = p).

*****

*****

+++++
Qed.
-----
Lemma prime_rel_prime :\n forall p : Z, prime p -> forall a : Z, ~ (p | a)%Z -> rel_prime p a.
-----
Lemma prime_rel_prime : forall p : Z, prime p -> forall a : Z, ~ (p | a)%Z -> rel_prime p a.

*****

*****
forall (p : Z) (_ : prime p) (a : Z) (_ : not (divide p a)), rel_prime p a
+++++
Proof.
-----
Lemma prime_rel_prime : forall p : Z, prime p -> forall a : Z, ~ (p | a)%Z -> rel_prime p a.
Proof.

*****

*****
forall (p : Z) (_ : prime p) (a : Z) (_ : not (divide p a)), rel_prime p a
+++++
simple induction 1.
-----
Lemma prime_rel_prime : forall p : Z, prime p -> forall a : Z, ~ (p | a)%Z -> rel_prime p a.
Proof.
simple induction 1.

*****
H : prime p
p : Z
*****
forall (_ : Z.lt (Zpos xH) p) (_ : forall (n : Z) (_ : and (Z.le (Zpos xH) n) (Z.lt n p)), rel_prime n p) (a : Z) (_ : not (divide p a)), rel_prime p a
+++++
intros.
-----
Lemma prime_rel_prime : forall p : Z, prime p -> forall a : Z, ~ (p | a)%Z -> rel_prime p a.
Proof.
simple induction 1.
intros.

*****
H2 : not (divide p a)
a : Z
H1 : forall (n : Z) (_ : and (Z.le (Zpos xH) n) (Z.lt n p)), rel_prime n p
H0 : Z.lt (Zpos xH) p
H : prime p
p : Z
*****
rel_prime p a
+++++
constructor.
-----
Lemma prime_rel_prime : forall p : Z, prime p -> forall a : Z, ~ (p | a)%Z -> rel_prime p a.
Proof.
simple induction 1.
intros.
constructor.

*****
H2 : not (divide p a)
a : Z
H1 : forall (n : Z) (_ : and (Z.le (Zpos xH) n) (Z.lt n p)), rel_prime n p
H0 : Z.lt (Zpos xH) p
H : prime p
p : Z
*****
divide (Zpos xH) p
+++++
intuition.
-----
Lemma prime_rel_prime : forall p : Z, prime p -> forall a : Z, ~ (p | a)%Z -> rel_prime p a.
Proof.
simple induction 1.
intros.
constructor.

*****
H2 : not (divide p a)
a : Z
H1 : forall (n : Z) (_ : and (Z.le (Zpos xH) n) (Z.lt n p)), rel_prime n p
H0 : Z.lt (Zpos xH) p
H : prime p
p : Z
*****
divide (Zpos xH) a
+++++
intuition.
-----
Lemma prime_rel_prime : forall p : Z, prime p -> forall a : Z, ~ (p | a)%Z -> rel_prime p a.
Proof.
simple induction 1.
intros.
constructor.

*****
H2 : not (divide p a)
a : Z
H1 : forall (n : Z) (_ : and (Z.le (Zpos xH) n) (Z.lt n p)), rel_prime n p
H0 : Z.lt (Zpos xH) p
H : prime p
p : Z
*****
forall (x : Z) (_ : divide x p) (_ : divide x a), divide x (Zpos xH)
+++++
intuition.
-----
Lemma prime_rel_prime : forall p : Z, prime p -> forall a : Z, ~ (p | a)%Z -> rel_prime p a.
Proof.
simple induction 1.
intros.
constructor.
intuition.

*****
H4 : divide x a
H3 : divide x p
x : Z
H2 : forall _ : divide p a, False
a : Z
H1 : forall (n : Z) (_ : and (Z.le (Zpos xH) n) (Z.lt n p)), rel_prime n p
H0 : Z.lt (Zpos xH) p
H : prime p
p : Z
*****
divide x (Zpos xH)
+++++
elim (prime_divisors p H x H3).
-----
Lemma prime_rel_prime : forall p : Z, prime p -> forall a : Z, ~ (p | a)%Z -> rel_prime p a.
Proof.
simple induction 1.
intros.
constructor.
intuition.
elim (prime_divisors p H x H3).

*****
H4 : divide x a
H3 : divide x p
x : Z
H2 : forall _ : divide p a, False
a : Z
H1 : forall (n : Z) (_ : and (Z.le (Zpos xH) n) (Z.lt n p)), rel_prime n p
H0 : Z.lt (Zpos xH) p
H : prime p
p : Z
*****
forall _ : eq x (Zneg xH), divide x (Zpos xH)
+++++
intuition.
-----
Lemma prime_rel_prime : forall p : Z, prime p -> forall a : Z, ~ (p | a)%Z -> rel_prime p a.
Proof.
simple induction 1.
intros.
constructor.
intuition.
elim (prime_divisors p H x H3).
intuition.

*****
H5 : eq x (Zneg xH)
H4 : divide x a
H3 : divide x p
x : Z
H2 : forall _ : divide p a, False
a : Z
H1 : forall (n : Z) (_ : and (Z.le (Zpos xH) n) (Z.lt n p)), rel_prime n p
H0 : Z.lt (Zpos xH) p
H : prime p
p : Z
*****
divide x (Zpos xH)
+++++
subst.
-----
Lemma prime_rel_prime : forall p : Z, prime p -> forall a : Z, ~ (p | a)%Z -> rel_prime p a.
Proof.
simple induction 1.
intros.
constructor.
intuition.
elim (prime_divisors p H x H3).
intuition.
subst.

*****
H3 : divide (Zneg xH) p
H4 : divide (Zneg xH) a
H2 : forall _ : divide p a, False
a : Z
H1 : forall (n : Z) (_ : and (Z.le (Zpos xH) n) (Z.lt n p)), rel_prime n p
H0 : Z.lt (Zpos xH) p
H : prime p
p : Z
*****
divide (Zneg xH) (Zpos xH)
+++++
auto.
-----
Lemma prime_rel_prime : forall p : Z, prime p -> forall a : Z, ~ (p | a)%Z -> rel_prime p a.
Proof.
simple induction 1.
intros.
constructor.
intuition.
elim (prime_divisors p H x H3).

*****
H4 : divide x a
H3 : divide x p
x : Z
H2 : forall _ : divide p a, False
a : Z
H1 : forall (n : Z) (_ : and (Z.le (Zpos xH) n) (Z.lt n p)), rel_prime n p
H0 : Z.lt (Zpos xH) p
H : prime p
p : Z
*****
forall _ : or (eq x (Zpos xH)) (or (eq x p) (eq x (Z.opp p))), divide x (Zpos xH)
+++++
intuition.
-----
Lemma prime_rel_prime : forall p : Z, prime p -> forall a : Z, ~ (p | a)%Z -> rel_prime p a.
Proof.
simple induction 1.
intros.
constructor.
intuition.
elim (prime_divisors p H x H3).
intuition.

*****
H6 : eq x (Zpos xH)
H4 : divide x a
H3 : divide x p
x : Z
H2 : forall _ : divide p a, False
a : Z
H1 : forall (n : Z) (_ : and (Z.le (Zpos xH) n) (Z.lt n p)), rel_prime n p
H0 : Z.lt (Zpos xH) p
H : prime p
p : Z
*****
divide x (Zpos xH)
+++++
subst.
-----
Lemma prime_rel_prime : forall p : Z, prime p -> forall a : Z, ~ (p | a)%Z -> rel_prime p a.
Proof.
simple induction 1.
intros.
constructor.
intuition.
elim (prime_divisors p H x H3).
intuition.
subst.

*****
H3 : divide (Zpos xH) p
H4 : divide (Zpos xH) a
H2 : forall _ : divide p a, False
a : Z
H1 : forall (n : Z) (_ : and (Z.le (Zpos xH) n) (Z.lt n p)), rel_prime n p
H0 : Z.lt (Zpos xH) p
H : prime p
p : Z
*****
divide (Zpos xH) (Zpos xH)
+++++
auto.
-----
Lemma prime_rel_prime : forall p : Z, prime p -> forall a : Z, ~ (p | a)%Z -> rel_prime p a.
Proof.
simple induction 1.
intros.
constructor.
intuition.
elim (prime_divisors p H x H3).
intuition.

*****
H5 : eq x p
H4 : divide x a
H3 : divide x p
x : Z
H2 : forall _ : divide p a, False
a : Z
H1 : forall (n : Z) (_ : and (Z.le (Zpos xH) n) (Z.lt n p)), rel_prime n p
H0 : Z.lt (Zpos xH) p
H : prime p
p : Z
*****
divide x (Zpos xH)
+++++
subst.
-----
Lemma prime_rel_prime : forall p : Z, prime p -> forall a : Z, ~ (p | a)%Z -> rel_prime p a.
Proof.
simple induction 1.
intros.
constructor.
intuition.
elim (prime_divisors p H x H3).
intuition.
subst.

*****
H3 : divide p p
H4 : divide p a
H2 : forall _ : divide p a, False
a : Z
H1 : forall (n : Z) (_ : and (Z.le (Zpos xH) n) (Z.lt n p)), rel_prime n p
H0 : Z.lt (Zpos xH) p
H : prime p
p : Z
*****
divide p (Zpos xH)
+++++
auto.
-----
Lemma prime_rel_prime : forall p : Z, prime p -> forall a : Z, ~ (p | a)%Z -> rel_prime p a.
Proof.
simple induction 1.
intros.
constructor.
intuition.
elim (prime_divisors p H x H3).
intuition.
subst.
auto.

*****
H3 : divide p p
H4 : divide p a
H2 : forall _ : divide p a, False
a : Z
H1 : forall (n : Z) (_ : and (Z.le (Zpos xH) n) (Z.lt n p)), rel_prime n p
H0 : Z.lt (Zpos xH) p
H : prime p
p : Z
*****
divide p (Zpos xH)
+++++
absurd (p | a)%Z.
-----
Lemma prime_rel_prime : forall p : Z, prime p -> forall a : Z, ~ (p | a)%Z -> rel_prime p a.
Proof.
simple induction 1.
intros.
constructor.
intuition.
elim (prime_divisors p H x H3).
intuition.
subst.
auto.
absurd (p | a)%Z.

*****
H3 : divide p p
H4 : divide p a
H2 : forall _ : divide p a, False
a : Z
H1 : forall (n : Z) (_ : and (Z.le (Zpos xH) n) (Z.lt n p)), rel_prime n p
H0 : Z.lt (Zpos xH) p
H : prime p
p : Z
*****
not (divide p a)
+++++
auto.
-----
Lemma prime_rel_prime : forall p : Z, prime p -> forall a : Z, ~ (p | a)%Z -> rel_prime p a.
Proof.
simple induction 1.
intros.
constructor.
intuition.
elim (prime_divisors p H x H3).
intuition.
subst.
auto.
absurd (p | a)%Z.

*****
H3 : divide p p
H4 : divide p a
H2 : forall _ : divide p a, False
a : Z
H1 : forall (n : Z) (_ : and (Z.le (Zpos xH) n) (Z.lt n p)), rel_prime n p
H0 : Z.lt (Zpos xH) p
H : prime p
p : Z
*****
divide p a
+++++
auto.
-----
Lemma prime_rel_prime : forall p : Z, prime p -> forall a : Z, ~ (p | a)%Z -> rel_prime p a.
Proof.
simple induction 1.
intros.
constructor.
intuition.
elim (prime_divisors p H x H3).
intuition.

*****
H5 : eq x (Z.opp p)
H4 : divide x a
H3 : divide x p
x : Z
H2 : forall _ : divide p a, False
a : Z
H1 : forall (n : Z) (_ : and (Z.le (Zpos xH) n) (Z.lt n p)), rel_prime n p
H0 : Z.lt (Zpos xH) p
H : prime p
p : Z
*****
divide x (Zpos xH)
+++++
subst.
-----
Lemma prime_rel_prime : forall p : Z, prime p -> forall a : Z, ~ (p | a)%Z -> rel_prime p a.
Proof.
simple induction 1.
intros.
constructor.
intuition.
elim (prime_divisors p H x H3).
intuition.
subst.

*****
H3 : divide (Z.opp p) p
H4 : divide (Z.opp p) a
H2 : forall _ : divide p a, False
a : Z
H1 : forall (n : Z) (_ : and (Z.le (Zpos xH) n) (Z.lt n p)), rel_prime n p
H0 : Z.lt (Zpos xH) p
H : prime p
p : Z
*****
divide (Z.opp p) (Zpos xH)
+++++
auto.
-----
Lemma prime_rel_prime : forall p : Z, prime p -> forall a : Z, ~ (p | a)%Z -> rel_prime p a.
Proof.
simple induction 1.
intros.
constructor.
intuition.
elim (prime_divisors p H x H3).
intuition.
subst.
auto.

*****
H3 : divide (Z.opp p) p
H4 : divide (Z.opp p) a
H2 : forall _ : divide p a, False
a : Z
H1 : forall (n : Z) (_ : and (Z.le (Zpos xH) n) (Z.lt n p)), rel_prime n p
H0 : Z.lt (Zpos xH) p
H : prime p
p : Z
*****
divide (Z.opp p) (Zpos xH)
+++++
absurd (p | a)%Z.
-----
Lemma prime_rel_prime : forall p : Z, prime p -> forall a : Z, ~ (p | a)%Z -> rel_prime p a.
Proof.
simple induction 1.
intros.
constructor.
intuition.
elim (prime_divisors p H x H3).
intuition.
subst.
auto.
absurd (p | a)%Z.

*****
H3 : divide (Z.opp p) p
H4 : divide (Z.opp p) a
H2 : forall _ : divide p a, False
a : Z
H1 : forall (n : Z) (_ : and (Z.le (Zpos xH) n) (Z.lt n p)), rel_prime n p
H0 : Z.lt (Zpos xH) p
H : prime p
p : Z
*****
not (divide p a)
+++++
intuition.
-----
Lemma prime_rel_prime : forall p : Z, prime p -> forall a : Z, ~ (p | a)%Z -> rel_prime p a.
Proof.
simple induction 1.
intros.
constructor.
intuition.
elim (prime_divisors p H x H3).
intuition.
subst.
auto.
absurd (p | a)%Z.

*****
H3 : divide (Z.opp p) p
H4 : divide (Z.opp p) a
H2 : forall _ : divide p a, False
a : Z
H1 : forall (n : Z) (_ : and (Z.le (Zpos xH) n) (Z.lt n p)), rel_prime n p
H0 : Z.lt (Zpos xH) p
H : prime p
p : Z
*****
divide p a
+++++
intuition.
-----
Lemma prime_rel_prime : forall p : Z, prime p -> forall a : Z, ~ (p | a)%Z -> rel_prime p a.
Proof.
simple induction 1.
intros.
constructor.

*****

*****

+++++
Qed.
-----
Hint Resolve prime_rel_prime.
-----
Axiom divide_dec : forall a b : Z, {(a | b)%Z} + {~ (a | b)%Z}.
-----
Lemma prime_mult :\n forall p : Z,\n prime p -> forall a b : Z, (p | a * b)%Z -> (p | a)%Z \/ (p | b)%Z.
-----
Lemma prime_mult : forall p : Z, prime p -> forall a b : Z, (p | a * b)%Z -> (p | a)%Z \\/ (p | b)%Z.

*****

*****
forall (p : Z) (_ : prime p) (a b : Z) (_ : divide p (Z.mul a b)), or (divide p a) (divide p b)
+++++
Proof.
-----
Lemma prime_mult : forall p : Z, prime p -> forall a b : Z, (p | a * b)%Z -> (p | a)%Z \\/ (p | b)%Z.
Proof.

*****

*****
forall (p : Z) (_ : prime p) (a b : Z) (_ : divide p (Z.mul a b)), or (divide p a) (divide p b)
+++++
simple induction 1.
-----
Lemma prime_mult : forall p : Z, prime p -> forall a b : Z, (p | a * b)%Z -> (p | a)%Z \\/ (p | b)%Z.
Proof.
simple induction 1.

*****
H : prime p
p : Z
*****
forall (_ : Z.lt (Zpos xH) p) (_ : forall (n : Z) (_ : and (Z.le (Zpos xH) n) (Z.lt n p)), rel_prime n p) (a b : Z) (_ : divide p (Z.mul a b)), or (divide p a) (divide p b)
+++++
intros.
-----
Lemma prime_mult : forall p : Z, prime p -> forall a b : Z, (p | a * b)%Z -> (p | a)%Z \\/ (p | b)%Z.
Proof.
simple induction 1.
intros.

*****
H2 : divide p (Z.mul a b)
a,b : Z
H1 : forall (n : Z) (_ : and (Z.le (Zpos xH) n) (Z.lt n p)), rel_prime n p
H0 : Z.lt (Zpos xH) p
H : prime p
p : Z
*****
or (divide p a) (divide p b)
+++++
case (divide_dec p a).
-----
Lemma prime_mult : forall p : Z, prime p -> forall a b : Z, (p | a * b)%Z -> (p | a)%Z \\/ (p | b)%Z.
Proof.
simple induction 1.
intros.
case (divide_dec p a).

*****
H2 : divide p (Z.mul a b)
a,b : Z
H1 : forall (n : Z) (_ : and (Z.le (Zpos xH) n) (Z.lt n p)), rel_prime n p
H0 : Z.lt (Zpos xH) p
H : prime p
p : Z
*****
forall _ : divide p a, or (divide p a) (divide p b)
+++++
intuition.
-----
Lemma prime_mult : forall p : Z, prime p -> forall a b : Z, (p | a * b)%Z -> (p | a)%Z \\/ (p | b)%Z.
Proof.
simple induction 1.
intros.
case (divide_dec p a).

*****
H2 : divide p (Z.mul a b)
a,b : Z
H1 : forall (n : Z) (_ : and (Z.le (Zpos xH) n) (Z.lt n p)), rel_prime n p
H0 : Z.lt (Zpos xH) p
H : prime p
p : Z
*****
forall _ : not (divide p a), or (divide p a) (divide p b)
+++++
intuition.
-----
Lemma prime_mult : forall p : Z, prime p -> forall a b : Z, (p | a * b)%Z -> (p | a)%Z \\/ (p | b)%Z.
Proof.
simple induction 1.
intros.
case (divide_dec p a).
intuition.

*****
n : forall _ : divide p a, False
H2 : divide p (Z.mul a b)
a,b : Z
H1 : forall (n : Z) (_ : and (Z.le (Zpos xH) n) (Z.lt n p)), rel_prime n p
H0 : Z.lt (Zpos xH) p
H : prime p
p : Z
*****
or (divide p a) (divide p b)
+++++
right.
-----
Lemma prime_mult : forall p : Z, prime p -> forall a b : Z, (p | a * b)%Z -> (p | a)%Z \\/ (p | b)%Z.
Proof.
simple induction 1.
intros.
case (divide_dec p a).
intuition.
right.

*****
n : forall _ : divide p a, False
H2 : divide p (Z.mul a b)
a,b : Z
H1 : forall (n : Z) (_ : and (Z.le (Zpos xH) n) (Z.lt n p)), rel_prime n p
H0 : Z.lt (Zpos xH) p
H : prime p
p : Z
*****
divide p b
+++++
apply Gauss with a.
-----
Lemma prime_mult : forall p : Z, prime p -> forall a b : Z, (p | a * b)%Z -> (p | a)%Z \\/ (p | b)%Z.
Proof.
simple induction 1.
intros.
case (divide_dec p a).
intuition.
right.
apply Gauss with a.

*****
n : forall _ : divide p a, False
H2 : divide p (Z.mul a b)
a,b : Z
H1 : forall (n : Z) (_ : and (Z.le (Zpos xH) n) (Z.lt n p)), rel_prime n p
H0 : Z.lt (Zpos xH) p
H : prime p
p : Z
*****
divide p (Z.mul a b)
+++++
auto.
-----
Lemma prime_mult : forall p : Z, prime p -> forall a b : Z, (p | a * b)%Z -> (p | a)%Z \\/ (p | b)%Z.
Proof.
simple induction 1.
intros.
case (divide_dec p a).
intuition.
right.
apply Gauss with a.

*****
n : forall _ : divide p a, False
H2 : divide p (Z.mul a b)
a,b : Z
H1 : forall (n : Z) (_ : and (Z.le (Zpos xH) n) (Z.lt n p)), rel_prime n p
H0 : Z.lt (Zpos xH) p
H : prime p
p : Z
*****
rel_prime p a
+++++
auto.
-----
Lemma prime_mult : forall p : Z, prime p -> forall a b : Z, (p | a * b)%Z -> (p | a)%Z \\/ (p | b)%Z.
Proof.
simple induction 1.
intros.
case (divide_dec p a).

*****

*****

+++++
Qed.
-----
