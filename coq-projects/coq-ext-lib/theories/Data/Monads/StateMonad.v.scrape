Require Import ExtLib.Structures.Monads.
-----
Require Import ExtLib.Structures.Monoid.
-----
Set Implicit Arguments.
-----
Set Strict Implicit.
-----
Section StateType.
-----
Variable S : Type.
-----
Record state (t : Type) : Type := mkState\n  { runState : S -> t * S }.
-----
Definition evalState {t} (c : state t) (s : S) : t :=\n    fst (runState c s).
-----
Definition execState {t} (c : state t) (s : S) : S :=\n    snd (runState c s).
-----
Global Instance Monad_state : Monad state :=\n  { ret  := fun _ v => mkState (fun s => (v, s))\n  ; bind := fun _ _ c1 c2 =>\n    mkState (fun s =>\n      let (v,s) := runState c1 s in\n      runState (c2 v) s)\n  }.
-----
Global Instance MonadState_state : MonadState S state :=\n  { get := mkState (fun x => (x,x))\n  ; put := fun v => mkState (fun _ => (tt, v))\n  }.
-----
Variable m : Type -> Type.
-----
Record stateT (t : Type) : Type := mkStateT\n  { runStateT : S -> m (t * S)%type }.
-----
Variable M : Monad m.
-----
Definition evalStateT {t} (c : stateT t) (s : S) : m t :=\n    bind (runStateT c s) (fun x => ret (fst x)).
-----
Definition execStateT {t} (c : stateT t) (s : S) : m S :=\n    bind (runStateT c s) (fun x => ret (snd x)).
-----
Global Instance Monad_stateT : Monad stateT :=\n  { ret := fun _ x => mkStateT (fun s => @ret _ M _ (x,s))\n  ; bind := fun _ _ c1 c2 =>\n    mkStateT (fun s =>\n      @bind _ M _ _ (runStateT c1 s) (fun vs =>\n        let (v,s) := vs in\n        runStateT (c2 v) s))\n  }.
-----
Global Instance MonadState_stateT : MonadState S stateT :=\n  { get := mkStateT (fun x => ret (x,x))\n  ; put := fun v => mkStateT (fun _ => ret (tt, v))\n  }.
-----
Global Instance MonadT_stateT : MonadT stateT m :=\n  { lift := fun _ c => mkStateT (fun s => bind c (fun t => ret (t, s)))\n  }.
-----
Global Instance State_State_stateT T (MS : MonadState T m) : MonadState T stateT :=\n  { get := lift get\n  ; put := fun x => lift (put x)\n  }.
-----
Global Instance MonadReader_stateT T (MR : MonadReader T m) : MonadReader T stateT :=\n  { ask := mkStateT (fun s => bind ask (fun t => ret (t, s)))\n  ; local := fun _ f c => mkStateT (fun s => local f (runStateT c s))\n  }.
-----
Global Instance MonadWriter_stateT T (Mon : Monoid T) (MR : MonadWriter Mon m) : MonadWriter Mon stateT :=\n  { tell := fun x => mkStateT (fun s => bind (tell x) (fun v => ret (v, s)))\n  ; listen := fun _ c => mkStateT (fun s => bind (listen (runStateT c s))\n    (fun x => let '(a,s,t) := x in\n    ret (a,t,s)))\n  ; pass := fun _ c => mkStateT (fun s => bind (runStateT c s) (fun x =>\n    let '(a,t,s) := x in pass (ret ((a,s),t))))\n  }.
-----
Global Instance Exc_stateT T (MR : MonadExc T m) : MonadExc T stateT :=\n  { raise := fun _ e => lift (raise e)\n  ; catch := fun _ body hnd =>\n    mkStateT (fun s => catch (runStateT body s) (fun e => runStateT (hnd e) s))\n  }.
-----
Global Instance MonadZero_stateT (MR : MonadZero m) : MonadZero stateT :=\n  { mzero _A := lift mzero\n  }.
-----
Global Instance MonadFix_stateT (MF : MonadFix m) : MonadFix stateT :=\n  { mfix := fun _ _ r v =>\n    mkStateT (fun s => mfix2 _ (fun r v s => runStateT (mkStateT (r v)) s) v s)\n  }.
-----
Global Instance MonadPlus_stateT (MP : MonadPlus m) : MonadPlus stateT :=\n  { mplus _A _B a b :=\n      mkStateT (fun s => bind (mplus (runStateT a s) (runStateT b s))\n               (fun res => match res with\n                             | inl (a,s) => ret (inl a, s)\n                             | inr (b,s) => ret (inr b, s)\n                           end))\n  }.
-----
End StateType.
-----
Arguments evalState {S} {t} (c) (s).
-----
Arguments execState {S} {t} (c) (s).
-----
Arguments evalStateT {S} {m} {M} {t} (c) (s).
-----
Arguments execStateT {S} {m} {M} {t} (c) (s).
-----
Arguments MonadWriter_stateT {S} {m} {_} {T} {Mon} (_).
-----
