Require Import GeoCoq.Axioms.parallel_postulates.
-----
Require Import GeoCoq.Tarski_dev.Ch12_parallel.
-----
Section par_trans_NID.
-----
Context `{TnEQD:Tarski_neutral_dimensionless_with_decidable_point_equality}.
-----
Lemma par_dec_NID : decidability_of_parallelism <-> decidability_of_not_intersection.
-----
Lemma par_dec_NID : decidability_of_parallelism <-> decidability_of_not_intersection.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
iff decidability_of_parallelism decidability_of_not_intersection
+++++
Proof.
-----
Lemma par_dec_NID : decidability_of_parallelism <-> decidability_of_not_intersection.
Proof.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
iff decidability_of_parallelism decidability_of_not_intersection
+++++
split.
-----
Lemma par_dec_NID : decidability_of_parallelism <-> decidability_of_not_intersection.
Proof.
split.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : decidability_of_parallelism, decidability_of_not_intersection
+++++
intros Hdec A B C D.
-----
Lemma par_dec_NID : decidability_of_parallelism <-> decidability_of_not_intersection.
Proof.
split.
intros Hdec A B C D.

*****
A,B,C,D : Tpoint
Hdec : decidability_of_parallelism
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (not (ex (fun I : Tpoint => and (Col I A B) (Col I C D)))) (not (not (ex (fun I : Tpoint => and (Col I A B) (Col I C D)))))
+++++
destruct (cop_dec A B C D) as [|HNCop].
-----
Lemma par_dec_NID : decidability_of_parallelism <-> decidability_of_not_intersection.
Proof.
split.
intros Hdec A B C D.
destruct (cop_dec A B C D) as [|HNCop].

*****
H : Coplanar A B C D
A,B,C,D : Tpoint
Hdec : decidability_of_parallelism
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (not (ex (fun I : Tpoint => and (Col I A B) (Col I C D)))) (not (not (ex (fun I : Tpoint => and (Col I A B) (Col I C D)))))
+++++
destruct (Hdec A B C D) as [[HParS|Heq]|HNPar].
-----
Lemma par_dec_NID : decidability_of_parallelism <-> decidability_of_not_intersection.
Proof.
split.
intros Hdec A B C D.
destruct (cop_dec A B C D) as [|HNCop].
destruct (Hdec A B C D) as [[HParS|Heq]|HNPar].

*****
HParS : Par_strict A B C D
H : Coplanar A B C D
A,B,C,D : Tpoint
Hdec : decidability_of_parallelism
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (not (ex (fun I : Tpoint => and (Col I A B) (Col I C D)))) (not (not (ex (fun I : Tpoint => and (Col I A B) (Col I C D)))))
+++++
left.
-----
Lemma par_dec_NID : decidability_of_parallelism <-> decidability_of_not_intersection.
Proof.
split.
intros Hdec A B C D.
destruct (cop_dec A B C D) as [|HNCop].
destruct (Hdec A B C D) as [[HParS|Heq]|HNPar].
left.

*****
HParS : Par_strict A B C D
H : Coplanar A B C D
A,B,C,D : Tpoint
Hdec : decidability_of_parallelism
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (ex (fun I : Tpoint => and (Col I A B) (Col I C D)))
+++++
unfold Par_strict in HParS.
-----
Lemma par_dec_NID : decidability_of_parallelism <-> decidability_of_not_intersection.
Proof.
split.
intros Hdec A B C D.
destruct (cop_dec A B C D) as [|HNCop].
destruct (Hdec A B C D) as [[HParS|Heq]|HNPar].
left.
unfold Par_strict in HParS.

*****
HParS : and (not (eq A B))\n (and (not (eq C D))\n (and (Coplanar A B C D)\n (not (ex (fun X : Tpoint => and (Col X A B) (Col X C D))))))
H : Coplanar A B C D
A,B,C,D : Tpoint
Hdec : decidability_of_parallelism
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (ex (fun I : Tpoint => and (Col I A B) (Col I C D)))
+++++
spliter.
-----
Lemma par_dec_NID : decidability_of_parallelism <-> decidability_of_not_intersection.
Proof.
split.
intros Hdec A B C D.
destruct (cop_dec A B C D) as [|HNCop].
destruct (Hdec A B C D) as [[HParS|Heq]|HNPar].
left.
unfold Par_strict in HParS.
spliter.

*****
H3 : not (ex (fun X : Tpoint => and (Col X A B) (Col X C D)))
H2 : Coplanar A B C D
H1 : not (eq C D)
H0 : not (eq A B)
H : Coplanar A B C D
A,B,C,D : Tpoint
Hdec : decidability_of_parallelism
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (ex (fun I : Tpoint => and (Col I A B) (Col I C D)))
+++++
assumption.
-----
Lemma par_dec_NID : decidability_of_parallelism <-> decidability_of_not_intersection.
Proof.
split.
intros Hdec A B C D.
destruct (cop_dec A B C D) as [|HNCop].
destruct (Hdec A B C D) as [[HParS|Heq]|HNPar].

*****
Heq : and (not (eq A B)) (and (not (eq C D)) (and (Col A C D) (Col B C D)))
H : Coplanar A B C D
A,B,C,D : Tpoint
Hdec : decidability_of_parallelism
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (not (ex (fun I : Tpoint => and (Col I A B) (Col I C D)))) (not (not (ex (fun I : Tpoint => and (Col I A B) (Col I C D)))))
+++++
right.
-----
Lemma par_dec_NID : decidability_of_parallelism <-> decidability_of_not_intersection.
Proof.
split.
intros Hdec A B C D.
destruct (cop_dec A B C D) as [|HNCop].
destruct (Hdec A B C D) as [[HParS|Heq]|HNPar].
right.

*****
Heq : and (not (eq A B)) (and (not (eq C D)) (and (Col A C D) (Col B C D)))
H : Coplanar A B C D
A,B,C,D : Tpoint
Hdec : decidability_of_parallelism
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (not (ex (fun I : Tpoint => and (Col I A B) (Col I C D))))
+++++
intro Habs.
-----
Lemma par_dec_NID : decidability_of_parallelism <-> decidability_of_not_intersection.
Proof.
split.
intros Hdec A B C D.
destruct (cop_dec A B C D) as [|HNCop].
destruct (Hdec A B C D) as [[HParS|Heq]|HNPar].
right.
intro Habs.

*****
Habs : not (ex (fun I : Tpoint => and (Col I A B) (Col I C D)))
Heq : and (not (eq A B)) (and (not (eq C D)) (and (Col A C D) (Col B C D)))
H : Coplanar A B C D
A,B,C,D : Tpoint
Hdec : decidability_of_parallelism
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply Habs.
-----
Lemma par_dec_NID : decidability_of_parallelism <-> decidability_of_not_intersection.
Proof.
split.
intros Hdec A B C D.
destruct (cop_dec A B C D) as [|HNCop].
destruct (Hdec A B C D) as [[HParS|Heq]|HNPar].
right.
intro Habs.
apply Habs.

*****
Habs : not (ex (fun I : Tpoint => and (Col I A B) (Col I C D)))
Heq : and (not (eq A B)) (and (not (eq C D)) (and (Col A C D) (Col B C D)))
H : Coplanar A B C D
A,B,C,D : Tpoint
Hdec : decidability_of_parallelism
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun I : Tpoint => and (Col I A B) (Col I C D))
+++++
exists B.
-----
Lemma par_dec_NID : decidability_of_parallelism <-> decidability_of_not_intersection.
Proof.
split.
intros Hdec A B C D.
destruct (cop_dec A B C D) as [|HNCop].
destruct (Hdec A B C D) as [[HParS|Heq]|HNPar].
right.
intro Habs.
apply Habs.
exists B.

*****
Habs : not (ex (fun I : Tpoint => and (Col I A B) (Col I C D)))
Heq : and (not (eq A B)) (and (not (eq C D)) (and (Col A C D) (Col B C D)))
H : Coplanar A B C D
A,B,C,D : Tpoint
Hdec : decidability_of_parallelism
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col B A B) (Col B C D)
+++++
spliter.
-----
Lemma par_dec_NID : decidability_of_parallelism <-> decidability_of_not_intersection.
Proof.
split.
intros Hdec A B C D.
destruct (cop_dec A B C D) as [|HNCop].
destruct (Hdec A B C D) as [[HParS|Heq]|HNPar].
right.
intro Habs.
apply Habs.
exists B.
spliter.

*****
Habs : not (ex (fun I : Tpoint => and (Col I A B) (Col I C D)))
H3 : Col B C D
H2 : Col A C D
H1 : not (eq C D)
H0 : not (eq A B)
H : Coplanar A B C D
A,B,C,D : Tpoint
Hdec : decidability_of_parallelism
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col B A B) (Col B C D)
+++++
Col.
-----
Lemma par_dec_NID : decidability_of_parallelism <-> decidability_of_not_intersection.
Proof.
split.
intros Hdec A B C D.
destruct (cop_dec A B C D) as [|HNCop].
destruct (Hdec A B C D) as [[HParS|Heq]|HNPar].

*****
HNPar : not (Par A B C D)
H : Coplanar A B C D
A,B,C,D : Tpoint
Hdec : decidability_of_parallelism
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (not (ex (fun I : Tpoint => and (Col I A B) (Col I C D)))) (not (not (ex (fun I : Tpoint => and (Col I A B) (Col I C D)))))
+++++
right.
-----
Lemma par_dec_NID : decidability_of_parallelism <-> decidability_of_not_intersection.
Proof.
split.
intros Hdec A B C D.
destruct (cop_dec A B C D) as [|HNCop].
destruct (Hdec A B C D) as [[HParS|Heq]|HNPar].
right.

*****
HNPar : not (Par A B C D)
H : Coplanar A B C D
A,B,C,D : Tpoint
Hdec : decidability_of_parallelism
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (not (ex (fun I : Tpoint => and (Col I A B) (Col I C D))))
+++++
intro Habs.
-----
Lemma par_dec_NID : decidability_of_parallelism <-> decidability_of_not_intersection.
Proof.
split.
intros Hdec A B C D.
destruct (cop_dec A B C D) as [|HNCop].
destruct (Hdec A B C D) as [[HParS|Heq]|HNPar].
right.
intro Habs.

*****
Habs : not (ex (fun I : Tpoint => and (Col I A B) (Col I C D)))
HNPar : not (Par A B C D)
H : Coplanar A B C D
A,B,C,D : Tpoint
Hdec : decidability_of_parallelism
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
destruct (eq_dec_points A B).
-----
Lemma par_dec_NID : decidability_of_parallelism <-> decidability_of_not_intersection.
Proof.
split.
intros Hdec A B C D.
destruct (cop_dec A B C D) as [|HNCop].
destruct (Hdec A B C D) as [[HParS|Heq]|HNPar].
right.
intro Habs.
destruct (eq_dec_points A B).

*****
H0 : eq A B
Habs : not (ex (fun I : Tpoint => and (Col I A B) (Col I C D)))
HNPar : not (Par A B C D)
H : Coplanar A B C D
A,B,C,D : Tpoint
Hdec : decidability_of_parallelism
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply Habs.
-----
Lemma par_dec_NID : decidability_of_parallelism <-> decidability_of_not_intersection.
Proof.
split.
intros Hdec A B C D.
destruct (cop_dec A B C D) as [|HNCop].
destruct (Hdec A B C D) as [[HParS|Heq]|HNPar].
right.
intro Habs.
destruct (eq_dec_points A B).
apply Habs.

*****
H0 : eq A B
Habs : not (ex (fun I : Tpoint => and (Col I A B) (Col I C D)))
HNPar : not (Par A B C D)
H : Coplanar A B C D
A,B,C,D : Tpoint
Hdec : decidability_of_parallelism
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun I : Tpoint => and (Col I A B) (Col I C D))
+++++
exists C.
-----
Lemma par_dec_NID : decidability_of_parallelism <-> decidability_of_not_intersection.
Proof.
split.
intros Hdec A B C D.
destruct (cop_dec A B C D) as [|HNCop].
destruct (Hdec A B C D) as [[HParS|Heq]|HNPar].
right.
intro Habs.
destruct (eq_dec_points A B).
apply Habs.
exists C.

*****
H0 : eq A B
Habs : not (ex (fun I : Tpoint => and (Col I A B) (Col I C D)))
HNPar : not (Par A B C D)
H : Coplanar A B C D
A,B,C,D : Tpoint
Hdec : decidability_of_parallelism
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col C A B) (Col C C D)
+++++
subst.
-----
Lemma par_dec_NID : decidability_of_parallelism <-> decidability_of_not_intersection.
Proof.
split.
intros Hdec A B C D.
destruct (cop_dec A B C D) as [|HNCop].
destruct (Hdec A B C D) as [[HParS|Heq]|HNPar].
right.
intro Habs.
destruct (eq_dec_points A B).
apply Habs.
exists C.
subst.

*****
H : Coplanar B B C D
HNPar : not (Par B B C D)
Habs : not (ex (fun I : Tpoint => and (Col I B B) (Col I C D)))
B,C,D : Tpoint
Hdec : decidability_of_parallelism
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col C B B) (Col C C D)
+++++
split.
-----
Lemma par_dec_NID : decidability_of_parallelism <-> decidability_of_not_intersection.
Proof.
split.
intros Hdec A B C D.
destruct (cop_dec A B C D) as [|HNCop].
destruct (Hdec A B C D) as [[HParS|Heq]|HNPar].
right.
intro Habs.
destruct (eq_dec_points A B).
apply Habs.
exists C.
subst.
split.

*****
H : Coplanar B B C D
HNPar : not (Par B B C D)
Habs : not (ex (fun I : Tpoint => and (Col I B B) (Col I C D)))
B,C,D : Tpoint
Hdec : decidability_of_parallelism
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col C B B
+++++
Col.
-----
Lemma par_dec_NID : decidability_of_parallelism <-> decidability_of_not_intersection.
Proof.
split.
intros Hdec A B C D.
destruct (cop_dec A B C D) as [|HNCop].
destruct (Hdec A B C D) as [[HParS|Heq]|HNPar].
right.
intro Habs.
destruct (eq_dec_points A B).
apply Habs.
exists C.
subst.
split.

*****
H : Coplanar B B C D
HNPar : not (Par B B C D)
Habs : not (ex (fun I : Tpoint => and (Col I B B) (Col I C D)))
B,C,D : Tpoint
Hdec : decidability_of_parallelism
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col C C D
+++++
Col.
-----
Lemma par_dec_NID : decidability_of_parallelism <-> decidability_of_not_intersection.
Proof.
split.
intros Hdec A B C D.
destruct (cop_dec A B C D) as [|HNCop].
destruct (Hdec A B C D) as [[HParS|Heq]|HNPar].
right.
intro Habs.
destruct (eq_dec_points A B).

*****
H0 : not (eq A B)
Habs : not (ex (fun I : Tpoint => and (Col I A B) (Col I C D)))
HNPar : not (Par A B C D)
H : Coplanar A B C D
A,B,C,D : Tpoint
Hdec : decidability_of_parallelism
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
destruct (eq_dec_points C D).
-----
Lemma par_dec_NID : decidability_of_parallelism <-> decidability_of_not_intersection.
Proof.
split.
intros Hdec A B C D.
destruct (cop_dec A B C D) as [|HNCop].
destruct (Hdec A B C D) as [[HParS|Heq]|HNPar].
right.
intro Habs.
destruct (eq_dec_points A B).
destruct (eq_dec_points C D).

*****
H1 : eq C D
H0 : not (eq A B)
Habs : not (ex (fun I : Tpoint => and (Col I A B) (Col I C D)))
HNPar : not (Par A B C D)
H : Coplanar A B C D
A,B,C,D : Tpoint
Hdec : decidability_of_parallelism
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply Habs.
-----
Lemma par_dec_NID : decidability_of_parallelism <-> decidability_of_not_intersection.
Proof.
split.
intros Hdec A B C D.
destruct (cop_dec A B C D) as [|HNCop].
destruct (Hdec A B C D) as [[HParS|Heq]|HNPar].
right.
intro Habs.
destruct (eq_dec_points A B).
destruct (eq_dec_points C D).
apply Habs.

*****
H1 : eq C D
H0 : not (eq A B)
Habs : not (ex (fun I : Tpoint => and (Col I A B) (Col I C D)))
HNPar : not (Par A B C D)
H : Coplanar A B C D
A,B,C,D : Tpoint
Hdec : decidability_of_parallelism
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun I : Tpoint => and (Col I A B) (Col I C D))
+++++
exists A.
-----
Lemma par_dec_NID : decidability_of_parallelism <-> decidability_of_not_intersection.
Proof.
split.
intros Hdec A B C D.
destruct (cop_dec A B C D) as [|HNCop].
destruct (Hdec A B C D) as [[HParS|Heq]|HNPar].
right.
intro Habs.
destruct (eq_dec_points A B).
destruct (eq_dec_points C D).
apply Habs.
exists A.

*****
H1 : eq C D
H0 : not (eq A B)
Habs : not (ex (fun I : Tpoint => and (Col I A B) (Col I C D)))
HNPar : not (Par A B C D)
H : Coplanar A B C D
A,B,C,D : Tpoint
Hdec : decidability_of_parallelism
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col A A B) (Col A C D)
+++++
subst.
-----
Lemma par_dec_NID : decidability_of_parallelism <-> decidability_of_not_intersection.
Proof.
split.
intros Hdec A B C D.
destruct (cop_dec A B C D) as [|HNCop].
destruct (Hdec A B C D) as [[HParS|Heq]|HNPar].
right.
intro Habs.
destruct (eq_dec_points A B).
destruct (eq_dec_points C D).
apply Habs.
exists A.
subst.

*****
H0 : not (eq A B)
H : Coplanar A B D D
HNPar : not (Par A B D D)
Habs : not (ex (fun I : Tpoint => and (Col I A B) (Col I D D)))
A,B,D : Tpoint
Hdec : decidability_of_parallelism
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col A A B) (Col A D D)
+++++
split.
-----
Lemma par_dec_NID : decidability_of_parallelism <-> decidability_of_not_intersection.
Proof.
split.
intros Hdec A B C D.
destruct (cop_dec A B C D) as [|HNCop].
destruct (Hdec A B C D) as [[HParS|Heq]|HNPar].
right.
intro Habs.
destruct (eq_dec_points A B).
destruct (eq_dec_points C D).
apply Habs.
exists A.
subst.
split.

*****
H0 : not (eq A B)
H : Coplanar A B D D
HNPar : not (Par A B D D)
Habs : not (ex (fun I : Tpoint => and (Col I A B) (Col I D D)))
A,B,D : Tpoint
Hdec : decidability_of_parallelism
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A A B
+++++
Col.
-----
Lemma par_dec_NID : decidability_of_parallelism <-> decidability_of_not_intersection.
Proof.
split.
intros Hdec A B C D.
destruct (cop_dec A B C D) as [|HNCop].
destruct (Hdec A B C D) as [[HParS|Heq]|HNPar].
right.
intro Habs.
destruct (eq_dec_points A B).
destruct (eq_dec_points C D).
apply Habs.
exists A.
subst.
split.

*****
H0 : not (eq A B)
H : Coplanar A B D D
HNPar : not (Par A B D D)
Habs : not (ex (fun I : Tpoint => and (Col I A B) (Col I D D)))
A,B,D : Tpoint
Hdec : decidability_of_parallelism
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A D D
+++++
Col.
-----
Lemma par_dec_NID : decidability_of_parallelism <-> decidability_of_not_intersection.
Proof.
split.
intros Hdec A B C D.
destruct (cop_dec A B C D) as [|HNCop].
destruct (Hdec A B C D) as [[HParS|Heq]|HNPar].
right.
intro Habs.
destruct (eq_dec_points A B).
destruct (eq_dec_points C D).

*****
H1 : not (eq C D)
H0 : not (eq A B)
Habs : not (ex (fun I : Tpoint => and (Col I A B) (Col I C D)))
HNPar : not (Par A B C D)
H : Coplanar A B C D
A,B,C,D : Tpoint
Hdec : decidability_of_parallelism
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply HNPar.
-----
Lemma par_dec_NID : decidability_of_parallelism <-> decidability_of_not_intersection.
Proof.
split.
intros Hdec A B C D.
destruct (cop_dec A B C D) as [|HNCop].
destruct (Hdec A B C D) as [[HParS|Heq]|HNPar].
right.
intro Habs.
destruct (eq_dec_points A B).
destruct (eq_dec_points C D).
apply HNPar.

*****
H1 : not (eq C D)
H0 : not (eq A B)
Habs : not (ex (fun I : Tpoint => and (Col I A B) (Col I C D)))
HNPar : not (Par A B C D)
H : Coplanar A B C D
A,B,C,D : Tpoint
Hdec : decidability_of_parallelism
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par A B C D
+++++
left.
-----
Lemma par_dec_NID : decidability_of_parallelism <-> decidability_of_not_intersection.
Proof.
split.
intros Hdec A B C D.
destruct (cop_dec A B C D) as [|HNCop].
destruct (Hdec A B C D) as [[HParS|Heq]|HNPar].
right.
intro Habs.
destruct (eq_dec_points A B).
destruct (eq_dec_points C D).
apply HNPar.
left.

*****
H1 : not (eq C D)
H0 : not (eq A B)
Habs : not (ex (fun I : Tpoint => and (Col I A B) (Col I C D)))
HNPar : not (Par A B C D)
H : Coplanar A B C D
A,B,C,D : Tpoint
Hdec : decidability_of_parallelism
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par_strict A B C D
+++++
unfold Par_strict.
-----
Lemma par_dec_NID : decidability_of_parallelism <-> decidability_of_not_intersection.
Proof.
split.
intros Hdec A B C D.
destruct (cop_dec A B C D) as [|HNCop].
destruct (Hdec A B C D) as [[HParS|Heq]|HNPar].
right.
intro Habs.
destruct (eq_dec_points A B).
destruct (eq_dec_points C D).
apply HNPar.
left.
unfold Par_strict.

*****
H1 : not (eq C D)
H0 : not (eq A B)
Habs : not (ex (fun I : Tpoint => and (Col I A B) (Col I C D)))
HNPar : not (Par A B C D)
H : Coplanar A B C D
A,B,C,D : Tpoint
Hdec : decidability_of_parallelism
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (not (eq A B)) (and (not (eq C D)) (and (Coplanar A B C D) (not (ex (fun X : Tpoint => and (Col X A B) (Col X C D))))))
+++++
repeat split.
-----
Lemma par_dec_NID : decidability_of_parallelism <-> decidability_of_not_intersection.
Proof.
split.
intros Hdec A B C D.
destruct (cop_dec A B C D) as [|HNCop].
destruct (Hdec A B C D) as [[HParS|Heq]|HNPar].
right.
intro Habs.
destruct (eq_dec_points A B).
destruct (eq_dec_points C D).
apply HNPar.
left.
unfold Par_strict.
repeat split.

*****
H1 : not (eq C D)
H0 : not (eq A B)
Habs : not (ex (fun I : Tpoint => and (Col I A B) (Col I C D)))
HNPar : not (Par A B C D)
H : Coplanar A B C D
A,B,C,D : Tpoint
Hdec : decidability_of_parallelism
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq A B)
+++++
assumption.
-----
Lemma par_dec_NID : decidability_of_parallelism <-> decidability_of_not_intersection.
Proof.
split.
intros Hdec A B C D.
destruct (cop_dec A B C D) as [|HNCop].
destruct (Hdec A B C D) as [[HParS|Heq]|HNPar].
right.
intro Habs.
destruct (eq_dec_points A B).
destruct (eq_dec_points C D).
apply HNPar.
left.
unfold Par_strict.
repeat split.

*****
H1 : not (eq C D)
H0 : not (eq A B)
Habs : not (ex (fun I : Tpoint => and (Col I A B) (Col I C D)))
HNPar : not (Par A B C D)
H : Coplanar A B C D
A,B,C,D : Tpoint
Hdec : decidability_of_parallelism
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq C D)
+++++
assumption.
-----
Lemma par_dec_NID : decidability_of_parallelism <-> decidability_of_not_intersection.
Proof.
split.
intros Hdec A B C D.
destruct (cop_dec A B C D) as [|HNCop].
destruct (Hdec A B C D) as [[HParS|Heq]|HNPar].
right.
intro Habs.
destruct (eq_dec_points A B).
destruct (eq_dec_points C D).
apply HNPar.
left.
unfold Par_strict.
repeat split.

*****
H1 : not (eq C D)
H0 : not (eq A B)
Habs : not (ex (fun I : Tpoint => and (Col I A B) (Col I C D)))
HNPar : not (Par A B C D)
H : Coplanar A B C D
A,B,C,D : Tpoint
Hdec : decidability_of_parallelism
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B C D
+++++
assumption.
-----
Lemma par_dec_NID : decidability_of_parallelism <-> decidability_of_not_intersection.
Proof.
split.
intros Hdec A B C D.
destruct (cop_dec A B C D) as [|HNCop].
destruct (Hdec A B C D) as [[HParS|Heq]|HNPar].
right.
intro Habs.
destruct (eq_dec_points A B).
destruct (eq_dec_points C D).
apply HNPar.
left.
unfold Par_strict.
repeat split.

*****
H1 : not (eq C D)
H0 : not (eq A B)
Habs : not (ex (fun I : Tpoint => and (Col I A B) (Col I C D)))
HNPar : not (Par A B C D)
H : Coplanar A B C D
A,B,C,D : Tpoint
Hdec : decidability_of_parallelism
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (ex (fun X : Tpoint => and (Col X A B) (Col X C D)))
+++++
assumption.
-----
Lemma par_dec_NID : decidability_of_parallelism <-> decidability_of_not_intersection.
Proof.
split.
intros Hdec A B C D.
destruct (cop_dec A B C D) as [|HNCop].

*****
HNCop : not (Coplanar A B C D)
A,B,C,D : Tpoint
Hdec : decidability_of_parallelism
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (not (ex (fun I : Tpoint => and (Col I A B) (Col I C D)))) (not (not (ex (fun I : Tpoint => and (Col I A B) (Col I C D)))))
+++++
left.
-----
Lemma par_dec_NID : decidability_of_parallelism <-> decidability_of_not_intersection.
Proof.
split.
intros Hdec A B C D.
destruct (cop_dec A B C D) as [|HNCop].
left.

*****
HNCop : not (Coplanar A B C D)
A,B,C,D : Tpoint
Hdec : decidability_of_parallelism
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (ex (fun I : Tpoint => and (Col I A B) (Col I C D)))
+++++
intros [I []].
-----
Lemma par_dec_NID : decidability_of_parallelism <-> decidability_of_not_intersection.
Proof.
split.
intros Hdec A B C D.
destruct (cop_dec A B C D) as [|HNCop].
left.
intros [I []].

*****
H0 : Col I C D
H : Col I A B
I : Tpoint
HNCop : not (Coplanar A B C D)
A,B,C,D : Tpoint
Hdec : decidability_of_parallelism
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply HNCop.
-----
Lemma par_dec_NID : decidability_of_parallelism <-> decidability_of_not_intersection.
Proof.
split.
intros Hdec A B C D.
destruct (cop_dec A B C D) as [|HNCop].
left.
intros [I []].
apply HNCop.

*****
H0 : Col I C D
H : Col I A B
I : Tpoint
HNCop : not (Coplanar A B C D)
A,B,C,D : Tpoint
Hdec : decidability_of_parallelism
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B C D
+++++
exists I.
-----
Lemma par_dec_NID : decidability_of_parallelism <-> decidability_of_not_intersection.
Proof.
split.
intros Hdec A B C D.
destruct (cop_dec A B C D) as [|HNCop].
left.
intros [I []].
apply HNCop.
exists I.

*****
H0 : Col I C D
H : Col I A B
I : Tpoint
HNCop : not (Coplanar A B C D)
A,B,C,D : Tpoint
Hdec : decidability_of_parallelism
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (and (Col A B I) (Col C D I)) (or (and (Col A C I) (Col B D I)) (and (Col A D I) (Col B C I)))
+++++
left.
-----
Lemma par_dec_NID : decidability_of_parallelism <-> decidability_of_not_intersection.
Proof.
split.
intros Hdec A B C D.
destruct (cop_dec A B C D) as [|HNCop].
left.
intros [I []].
apply HNCop.
exists I.
left.

*****
H0 : Col I C D
H : Col I A B
I : Tpoint
HNCop : not (Coplanar A B C D)
A,B,C,D : Tpoint
Hdec : decidability_of_parallelism
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col A B I) (Col C D I)
+++++
split.
-----
Lemma par_dec_NID : decidability_of_parallelism <-> decidability_of_not_intersection.
Proof.
split.
intros Hdec A B C D.
destruct (cop_dec A B C D) as [|HNCop].
left.
intros [I []].
apply HNCop.
exists I.
left.
split.

*****
H0 : Col I C D
H : Col I A B
I : Tpoint
HNCop : not (Coplanar A B C D)
A,B,C,D : Tpoint
Hdec : decidability_of_parallelism
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A B I
+++++
Col.
-----
Lemma par_dec_NID : decidability_of_parallelism <-> decidability_of_not_intersection.
Proof.
split.
intros Hdec A B C D.
destruct (cop_dec A B C D) as [|HNCop].
left.
intros [I []].
apply HNCop.
exists I.
left.
split.

*****
H0 : Col I C D
H : Col I A B
I : Tpoint
HNCop : not (Coplanar A B C D)
A,B,C,D : Tpoint
Hdec : decidability_of_parallelism
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col C D I
+++++
Col.
-----
Lemma par_dec_NID : decidability_of_parallelism <-> decidability_of_not_intersection.
Proof.
split.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : decidability_of_not_intersection, decidability_of_parallelism
+++++
intros Hdec A B C D.
-----
Lemma par_dec_NID : decidability_of_parallelism <-> decidability_of_not_intersection.
Proof.
split.
intros Hdec A B C D.

*****
A,B,C,D : Tpoint
Hdec : decidability_of_not_intersection
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (Par A B C D) (not (Par A B C D))
+++++
destruct (cop_dec A B C D) as [|HNCop].
-----
Lemma par_dec_NID : decidability_of_parallelism <-> decidability_of_not_intersection.
Proof.
split.
intros Hdec A B C D.
destruct (cop_dec A B C D) as [|HNCop].

*****
H : Coplanar A B C D
A,B,C,D : Tpoint
Hdec : decidability_of_not_intersection
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (Par A B C D) (not (Par A B C D))
+++++
destruct (eq_dec_points A B).
-----
Lemma par_dec_NID : decidability_of_parallelism <-> decidability_of_not_intersection.
Proof.
split.
intros Hdec A B C D.
destruct (cop_dec A B C D) as [|HNCop].
destruct (eq_dec_points A B).

*****
H0 : eq A B
H : Coplanar A B C D
A,B,C,D : Tpoint
Hdec : decidability_of_not_intersection
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (Par A B C D) (not (Par A B C D))
+++++
right.
-----
Lemma par_dec_NID : decidability_of_parallelism <-> decidability_of_not_intersection.
Proof.
split.
intros Hdec A B C D.
destruct (cop_dec A B C D) as [|HNCop].
destruct (eq_dec_points A B).
right.

*****
H0 : eq A B
H : Coplanar A B C D
A,B,C,D : Tpoint
Hdec : decidability_of_not_intersection
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Par A B C D)
+++++
subst.
-----
Lemma par_dec_NID : decidability_of_parallelism <-> decidability_of_not_intersection.
Proof.
split.
intros Hdec A B C D.
destruct (cop_dec A B C D) as [|HNCop].
destruct (eq_dec_points A B).
right.
subst.

*****
H : Coplanar B B C D
B,C,D : Tpoint
Hdec : decidability_of_not_intersection
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Par B B C D)
+++++
intro.
-----
Lemma par_dec_NID : decidability_of_parallelism <-> decidability_of_not_intersection.
Proof.
split.
intros Hdec A B C D.
destruct (cop_dec A B C D) as [|HNCop].
destruct (eq_dec_points A B).
right.
subst.
intro.

*****
H0 : Par B B C D
H : Coplanar B B C D
B,C,D : Tpoint
Hdec : decidability_of_not_intersection
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert_diffs.
-----
Lemma par_dec_NID : decidability_of_parallelism <-> decidability_of_not_intersection.
Proof.
split.
intros Hdec A B C D.
destruct (cop_dec A B C D) as [|HNCop].
destruct (eq_dec_points A B).
right.
subst.
intro.
assert_diffs.

*****
H2 : not (eq C D)
H1 : not (eq B B)
H0 : Par B B C D
H : Coplanar B B C D
B,C,D : Tpoint
Hdec : decidability_of_not_intersection
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
auto.
-----
Lemma par_dec_NID : decidability_of_parallelism <-> decidability_of_not_intersection.
Proof.
split.
intros Hdec A B C D.
destruct (cop_dec A B C D) as [|HNCop].
destruct (eq_dec_points A B).

*****
H0 : not (eq A B)
H : Coplanar A B C D
A,B,C,D : Tpoint
Hdec : decidability_of_not_intersection
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (Par A B C D) (not (Par A B C D))
+++++
destruct (eq_dec_points C D).
-----
Lemma par_dec_NID : decidability_of_parallelism <-> decidability_of_not_intersection.
Proof.
split.
intros Hdec A B C D.
destruct (cop_dec A B C D) as [|HNCop].
destruct (eq_dec_points A B).
destruct (eq_dec_points C D).

*****
H1 : eq C D
H0 : not (eq A B)
H : Coplanar A B C D
A,B,C,D : Tpoint
Hdec : decidability_of_not_intersection
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (Par A B C D) (not (Par A B C D))
+++++
right.
-----
Lemma par_dec_NID : decidability_of_parallelism <-> decidability_of_not_intersection.
Proof.
split.
intros Hdec A B C D.
destruct (cop_dec A B C D) as [|HNCop].
destruct (eq_dec_points A B).
destruct (eq_dec_points C D).
right.

*****
H1 : eq C D
H0 : not (eq A B)
H : Coplanar A B C D
A,B,C,D : Tpoint
Hdec : decidability_of_not_intersection
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Par A B C D)
+++++
subst.
-----
Lemma par_dec_NID : decidability_of_parallelism <-> decidability_of_not_intersection.
Proof.
split.
intros Hdec A B C D.
destruct (cop_dec A B C D) as [|HNCop].
destruct (eq_dec_points A B).
destruct (eq_dec_points C D).
right.
subst.

*****
H0 : not (eq A B)
H : Coplanar A B D D
A,B,D : Tpoint
Hdec : decidability_of_not_intersection
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Par A B D D)
+++++
intro.
-----
Lemma par_dec_NID : decidability_of_parallelism <-> decidability_of_not_intersection.
Proof.
split.
intros Hdec A B C D.
destruct (cop_dec A B C D) as [|HNCop].
destruct (eq_dec_points A B).
destruct (eq_dec_points C D).
right.
subst.
intro.

*****
H1 : Par A B D D
H0 : not (eq A B)
H : Coplanar A B D D
A,B,D : Tpoint
Hdec : decidability_of_not_intersection
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert_diffs.
-----
Lemma par_dec_NID : decidability_of_parallelism <-> decidability_of_not_intersection.
Proof.
split.
intros Hdec A B C D.
destruct (cop_dec A B C D) as [|HNCop].
destruct (eq_dec_points A B).
destruct (eq_dec_points C D).
right.
subst.
intro.
assert_diffs.

*****
H2 : not (eq D D)
H1 : Par A B D D
H0 : not (eq A B)
H : Coplanar A B D D
A,B,D : Tpoint
Hdec : decidability_of_not_intersection
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
auto.
-----
Lemma par_dec_NID : decidability_of_parallelism <-> decidability_of_not_intersection.
Proof.
split.
intros Hdec A B C D.
destruct (cop_dec A B C D) as [|HNCop].
destruct (eq_dec_points A B).
destruct (eq_dec_points C D).

*****
H1 : not (eq C D)
H0 : not (eq A B)
H : Coplanar A B C D
A,B,C,D : Tpoint
Hdec : decidability_of_not_intersection
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (Par A B C D) (not (Par A B C D))
+++++
destruct (col_dec A C D).
-----
Lemma par_dec_NID : decidability_of_parallelism <-> decidability_of_not_intersection.
Proof.
split.
intros Hdec A B C D.
destruct (cop_dec A B C D) as [|HNCop].
destruct (eq_dec_points A B).
destruct (eq_dec_points C D).
destruct (col_dec A C D).

*****
H2 : Col A C D
H1 : not (eq C D)
H0 : not (eq A B)
H : Coplanar A B C D
A,B,C,D : Tpoint
Hdec : decidability_of_not_intersection
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (Par A B C D) (not (Par A B C D))
+++++
destruct (col_dec B C D).
-----
Lemma par_dec_NID : decidability_of_parallelism <-> decidability_of_not_intersection.
Proof.
split.
intros Hdec A B C D.
destruct (cop_dec A B C D) as [|HNCop].
destruct (eq_dec_points A B).
destruct (eq_dec_points C D).
destruct (col_dec A C D).
destruct (col_dec B C D).

*****
H3 : Col B C D
H2 : Col A C D
H1 : not (eq C D)
H0 : not (eq A B)
H : Coplanar A B C D
A,B,C,D : Tpoint
Hdec : decidability_of_not_intersection
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (Par A B C D) (not (Par A B C D))
+++++
left.
-----
Lemma par_dec_NID : decidability_of_parallelism <-> decidability_of_not_intersection.
Proof.
split.
intros Hdec A B C D.
destruct (cop_dec A B C D) as [|HNCop].
destruct (eq_dec_points A B).
destruct (eq_dec_points C D).
destruct (col_dec A C D).
destruct (col_dec B C D).
left.

*****
H3 : Col B C D
H2 : Col A C D
H1 : not (eq C D)
H0 : not (eq A B)
H : Coplanar A B C D
A,B,C,D : Tpoint
Hdec : decidability_of_not_intersection
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par A B C D
+++++
right.
-----
Lemma par_dec_NID : decidability_of_parallelism <-> decidability_of_not_intersection.
Proof.
split.
intros Hdec A B C D.
destruct (cop_dec A B C D) as [|HNCop].
destruct (eq_dec_points A B).
destruct (eq_dec_points C D).
destruct (col_dec A C D).
destruct (col_dec B C D).
left.
right.

*****
H3 : Col B C D
H2 : Col A C D
H1 : not (eq C D)
H0 : not (eq A B)
H : Coplanar A B C D
A,B,C,D : Tpoint
Hdec : decidability_of_not_intersection
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (not (eq A B)) (and (not (eq C D)) (and (Col A C D) (Col B C D)))
+++++
repeat split.
-----
Lemma par_dec_NID : decidability_of_parallelism <-> decidability_of_not_intersection.
Proof.
split.
intros Hdec A B C D.
destruct (cop_dec A B C D) as [|HNCop].
destruct (eq_dec_points A B).
destruct (eq_dec_points C D).
destruct (col_dec A C D).
destruct (col_dec B C D).
left.
right.
repeat split.

*****
H3 : Col B C D
H2 : Col A C D
H1 : not (eq C D)
H0 : not (eq A B)
H : Coplanar A B C D
A,B,C,D : Tpoint
Hdec : decidability_of_not_intersection
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq A B)
+++++
assumption.
-----
Lemma par_dec_NID : decidability_of_parallelism <-> decidability_of_not_intersection.
Proof.
split.
intros Hdec A B C D.
destruct (cop_dec A B C D) as [|HNCop].
destruct (eq_dec_points A B).
destruct (eq_dec_points C D).
destruct (col_dec A C D).
destruct (col_dec B C D).
left.
right.
repeat split.

*****
H3 : Col B C D
H2 : Col A C D
H1 : not (eq C D)
H0 : not (eq A B)
H : Coplanar A B C D
A,B,C,D : Tpoint
Hdec : decidability_of_not_intersection
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq C D)
+++++
assumption.
-----
Lemma par_dec_NID : decidability_of_parallelism <-> decidability_of_not_intersection.
Proof.
split.
intros Hdec A B C D.
destruct (cop_dec A B C D) as [|HNCop].
destruct (eq_dec_points A B).
destruct (eq_dec_points C D).
destruct (col_dec A C D).
destruct (col_dec B C D).
left.
right.
repeat split.

*****
H3 : Col B C D
H2 : Col A C D
H1 : not (eq C D)
H0 : not (eq A B)
H : Coplanar A B C D
A,B,C,D : Tpoint
Hdec : decidability_of_not_intersection
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A C D
+++++
assumption.
-----
Lemma par_dec_NID : decidability_of_parallelism <-> decidability_of_not_intersection.
Proof.
split.
intros Hdec A B C D.
destruct (cop_dec A B C D) as [|HNCop].
destruct (eq_dec_points A B).
destruct (eq_dec_points C D).
destruct (col_dec A C D).
destruct (col_dec B C D).
left.
right.
repeat split.

*****
H3 : Col B C D
H2 : Col A C D
H1 : not (eq C D)
H0 : not (eq A B)
H : Coplanar A B C D
A,B,C,D : Tpoint
Hdec : decidability_of_not_intersection
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col B C D
+++++
assumption.
-----
Lemma par_dec_NID : decidability_of_parallelism <-> decidability_of_not_intersection.
Proof.
split.
intros Hdec A B C D.
destruct (cop_dec A B C D) as [|HNCop].
destruct (eq_dec_points A B).
destruct (eq_dec_points C D).
destruct (col_dec A C D).
destruct (col_dec B C D).

*****
H3 : not (Col B C D)
H2 : Col A C D
H1 : not (eq C D)
H0 : not (eq A B)
H : Coplanar A B C D
A,B,C,D : Tpoint
Hdec : decidability_of_not_intersection
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (Par A B C D) (not (Par A B C D))
+++++
right.
-----
Lemma par_dec_NID : decidability_of_parallelism <-> decidability_of_not_intersection.
Proof.
split.
intros Hdec A B C D.
destruct (cop_dec A B C D) as [|HNCop].
destruct (eq_dec_points A B).
destruct (eq_dec_points C D).
destruct (col_dec A C D).
destruct (col_dec B C D).
right.

*****
H3 : not (Col B C D)
H2 : Col A C D
H1 : not (eq C D)
H0 : not (eq A B)
H : Coplanar A B C D
A,B,C,D : Tpoint
Hdec : decidability_of_not_intersection
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Par A B C D)
+++++
intros [[_ [_ [_ Habs]]]|].
-----
Lemma par_dec_NID : decidability_of_parallelism <-> decidability_of_not_intersection.
Proof.
split.
intros Hdec A B C D.
destruct (cop_dec A B C D) as [|HNCop].
destruct (eq_dec_points A B).
destruct (eq_dec_points C D).
destruct (col_dec A C D).
destruct (col_dec B C D).
right.
intros [[_ [_ [_ Habs]]]|].

*****
Habs : not (ex (fun X : Tpoint => and (Col X A B) (Col X C D)))
H3 : not (Col B C D)
H2 : Col A C D
H1 : not (eq C D)
H0 : not (eq A B)
H : Coplanar A B C D
A,B,C,D : Tpoint
Hdec : decidability_of_not_intersection
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply Habs.
-----
Lemma par_dec_NID : decidability_of_parallelism <-> decidability_of_not_intersection.
Proof.
split.
intros Hdec A B C D.
destruct (cop_dec A B C D) as [|HNCop].
destruct (eq_dec_points A B).
destruct (eq_dec_points C D).
destruct (col_dec A C D).
destruct (col_dec B C D).
right.
intros [[_ [_ [_ Habs]]]|].
apply Habs.

*****
Habs : not (ex (fun X : Tpoint => and (Col X A B) (Col X C D)))
H3 : not (Col B C D)
H2 : Col A C D
H1 : not (eq C D)
H0 : not (eq A B)
H : Coplanar A B C D
A,B,C,D : Tpoint
Hdec : decidability_of_not_intersection
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => and (Col X A B) (Col X C D))
+++++
exists A.
-----
Lemma par_dec_NID : decidability_of_parallelism <-> decidability_of_not_intersection.
Proof.
split.
intros Hdec A B C D.
destruct (cop_dec A B C D) as [|HNCop].
destruct (eq_dec_points A B).
destruct (eq_dec_points C D).
destruct (col_dec A C D).
destruct (col_dec B C D).
right.
intros [[_ [_ [_ Habs]]]|].
apply Habs.
exists A.

*****
Habs : not (ex (fun X : Tpoint => and (Col X A B) (Col X C D)))
H3 : not (Col B C D)
H2 : Col A C D
H1 : not (eq C D)
H0 : not (eq A B)
H : Coplanar A B C D
A,B,C,D : Tpoint
Hdec : decidability_of_not_intersection
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col A A B) (Col A C D)
+++++
split.
-----
Lemma par_dec_NID : decidability_of_parallelism <-> decidability_of_not_intersection.
Proof.
split.
intros Hdec A B C D.
destruct (cop_dec A B C D) as [|HNCop].
destruct (eq_dec_points A B).
destruct (eq_dec_points C D).
destruct (col_dec A C D).
destruct (col_dec B C D).
right.
intros [[_ [_ [_ Habs]]]|].
apply Habs.
exists A.
split.

*****
Habs : not (ex (fun X : Tpoint => and (Col X A B) (Col X C D)))
H3 : not (Col B C D)
H2 : Col A C D
H1 : not (eq C D)
H0 : not (eq A B)
H : Coplanar A B C D
A,B,C,D : Tpoint
Hdec : decidability_of_not_intersection
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A A B
+++++
Col.
-----
Lemma par_dec_NID : decidability_of_parallelism <-> decidability_of_not_intersection.
Proof.
split.
intros Hdec A B C D.
destruct (cop_dec A B C D) as [|HNCop].
destruct (eq_dec_points A B).
destruct (eq_dec_points C D).
destruct (col_dec A C D).
destruct (col_dec B C D).
right.
intros [[_ [_ [_ Habs]]]|].
apply Habs.
exists A.
split.

*****
Habs : not (ex (fun X : Tpoint => and (Col X A B) (Col X C D)))
H3 : not (Col B C D)
H2 : Col A C D
H1 : not (eq C D)
H0 : not (eq A B)
H : Coplanar A B C D
A,B,C,D : Tpoint
Hdec : decidability_of_not_intersection
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A C D
+++++
Col.
-----
Lemma par_dec_NID : decidability_of_parallelism <-> decidability_of_not_intersection.
Proof.
split.
intros Hdec A B C D.
destruct (cop_dec A B C D) as [|HNCop].
destruct (eq_dec_points A B).
destruct (eq_dec_points C D).
destruct (col_dec A C D).
destruct (col_dec B C D).
right.
intros [[_ [_ [_ Habs]]]|].

*****
H4 : and (not (eq A B)) (and (not (eq C D)) (and (Col A C D) (Col B C D)))
H3 : not (Col B C D)
H2 : Col A C D
H1 : not (eq C D)
H0 : not (eq A B)
H : Coplanar A B C D
A,B,C,D : Tpoint
Hdec : decidability_of_not_intersection
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
spliter.
-----
Lemma par_dec_NID : decidability_of_parallelism <-> decidability_of_not_intersection.
Proof.
split.
intros Hdec A B C D.
destruct (cop_dec A B C D) as [|HNCop].
destruct (eq_dec_points A B).
destruct (eq_dec_points C D).
destruct (col_dec A C D).
destruct (col_dec B C D).
right.
intros [[_ [_ [_ Habs]]]|].
spliter.

*****
H7 : Col B C D
H6 : Col A C D
H5 : not (eq C D)
H4 : not (eq A B)
H3 : not (Col B C D)
H2 : Col A C D
H1 : not (eq C D)
H0 : not (eq A B)
H : Coplanar A B C D
A,B,C,D : Tpoint
Hdec : decidability_of_not_intersection
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
auto.
-----
Lemma par_dec_NID : decidability_of_parallelism <-> decidability_of_not_intersection.
Proof.
split.
intros Hdec A B C D.
destruct (cop_dec A B C D) as [|HNCop].
destruct (eq_dec_points A B).
destruct (eq_dec_points C D).
destruct (col_dec A C D).

*****
H2 : not (Col A C D)
H1 : not (eq C D)
H0 : not (eq A B)
H : Coplanar A B C D
A,B,C,D : Tpoint
Hdec : decidability_of_not_intersection
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (Par A B C D) (not (Par A B C D))
+++++
destruct (Hdec A B C D) as [HPar|HNPar].
-----
Lemma par_dec_NID : decidability_of_parallelism <-> decidability_of_not_intersection.
Proof.
split.
intros Hdec A B C D.
destruct (cop_dec A B C D) as [|HNCop].
destruct (eq_dec_points A B).
destruct (eq_dec_points C D).
destruct (col_dec A C D).
destruct (Hdec A B C D) as [HPar|HNPar].

*****
HPar : not (ex (fun I : Tpoint => and (Col I A B) (Col I C D)))
H2 : not (Col A C D)
H1 : not (eq C D)
H0 : not (eq A B)
H : Coplanar A B C D
A,B,C,D : Tpoint
Hdec : decidability_of_not_intersection
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (Par A B C D) (not (Par A B C D))
+++++
left.
-----
Lemma par_dec_NID : decidability_of_parallelism <-> decidability_of_not_intersection.
Proof.
split.
intros Hdec A B C D.
destruct (cop_dec A B C D) as [|HNCop].
destruct (eq_dec_points A B).
destruct (eq_dec_points C D).
destruct (col_dec A C D).
destruct (Hdec A B C D) as [HPar|HNPar].
left.

*****
HPar : not (ex (fun I : Tpoint => and (Col I A B) (Col I C D)))
H2 : not (Col A C D)
H1 : not (eq C D)
H0 : not (eq A B)
H : Coplanar A B C D
A,B,C,D : Tpoint
Hdec : decidability_of_not_intersection
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par A B C D
+++++
left.
-----
Lemma par_dec_NID : decidability_of_parallelism <-> decidability_of_not_intersection.
Proof.
split.
intros Hdec A B C D.
destruct (cop_dec A B C D) as [|HNCop].
destruct (eq_dec_points A B).
destruct (eq_dec_points C D).
destruct (col_dec A C D).
destruct (Hdec A B C D) as [HPar|HNPar].
left.
left.

*****
HPar : not (ex (fun I : Tpoint => and (Col I A B) (Col I C D)))
H2 : not (Col A C D)
H1 : not (eq C D)
H0 : not (eq A B)
H : Coplanar A B C D
A,B,C,D : Tpoint
Hdec : decidability_of_not_intersection
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par_strict A B C D
+++++
repeat split.
-----
Lemma par_dec_NID : decidability_of_parallelism <-> decidability_of_not_intersection.
Proof.
split.
intros Hdec A B C D.
destruct (cop_dec A B C D) as [|HNCop].
destruct (eq_dec_points A B).
destruct (eq_dec_points C D).
destruct (col_dec A C D).
destruct (Hdec A B C D) as [HPar|HNPar].
left.
left.
repeat split.

*****
HPar : not (ex (fun I : Tpoint => and (Col I A B) (Col I C D)))
H2 : not (Col A C D)
H1 : not (eq C D)
H0 : not (eq A B)
H : Coplanar A B C D
A,B,C,D : Tpoint
Hdec : decidability_of_not_intersection
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq A B)
+++++
assumption.
-----
Lemma par_dec_NID : decidability_of_parallelism <-> decidability_of_not_intersection.
Proof.
split.
intros Hdec A B C D.
destruct (cop_dec A B C D) as [|HNCop].
destruct (eq_dec_points A B).
destruct (eq_dec_points C D).
destruct (col_dec A C D).
destruct (Hdec A B C D) as [HPar|HNPar].
left.
left.
repeat split.

*****
HPar : not (ex (fun I : Tpoint => and (Col I A B) (Col I C D)))
H2 : not (Col A C D)
H1 : not (eq C D)
H0 : not (eq A B)
H : Coplanar A B C D
A,B,C,D : Tpoint
Hdec : decidability_of_not_intersection
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq C D)
+++++
assumption.
-----
Lemma par_dec_NID : decidability_of_parallelism <-> decidability_of_not_intersection.
Proof.
split.
intros Hdec A B C D.
destruct (cop_dec A B C D) as [|HNCop].
destruct (eq_dec_points A B).
destruct (eq_dec_points C D).
destruct (col_dec A C D).
destruct (Hdec A B C D) as [HPar|HNPar].
left.
left.
repeat split.

*****
HPar : not (ex (fun I : Tpoint => and (Col I A B) (Col I C D)))
H2 : not (Col A C D)
H1 : not (eq C D)
H0 : not (eq A B)
H : Coplanar A B C D
A,B,C,D : Tpoint
Hdec : decidability_of_not_intersection
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B C D
+++++
assumption.
-----
Lemma par_dec_NID : decidability_of_parallelism <-> decidability_of_not_intersection.
Proof.
split.
intros Hdec A B C D.
destruct (cop_dec A B C D) as [|HNCop].
destruct (eq_dec_points A B).
destruct (eq_dec_points C D).
destruct (col_dec A C D).
destruct (Hdec A B C D) as [HPar|HNPar].
left.
left.
repeat split.

*****
HPar : not (ex (fun I : Tpoint => and (Col I A B) (Col I C D)))
H2 : not (Col A C D)
H1 : not (eq C D)
H0 : not (eq A B)
H : Coplanar A B C D
A,B,C,D : Tpoint
Hdec : decidability_of_not_intersection
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (ex (fun X : Tpoint => and (Col X A B) (Col X C D)))
+++++
assumption.
-----
Lemma par_dec_NID : decidability_of_parallelism <-> decidability_of_not_intersection.
Proof.
split.
intros Hdec A B C D.
destruct (cop_dec A B C D) as [|HNCop].
destruct (eq_dec_points A B).
destruct (eq_dec_points C D).
destruct (col_dec A C D).
destruct (Hdec A B C D) as [HPar|HNPar].

*****
HNPar : not (not (ex (fun I : Tpoint => and (Col I A B) (Col I C D))))
H2 : not (Col A C D)
H1 : not (eq C D)
H0 : not (eq A B)
H : Coplanar A B C D
A,B,C,D : Tpoint
Hdec : decidability_of_not_intersection
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (Par A B C D) (not (Par A B C D))
+++++
right.
-----
Lemma par_dec_NID : decidability_of_parallelism <-> decidability_of_not_intersection.
Proof.
split.
intros Hdec A B C D.
destruct (cop_dec A B C D) as [|HNCop].
destruct (eq_dec_points A B).
destruct (eq_dec_points C D).
destruct (col_dec A C D).
destruct (Hdec A B C D) as [HPar|HNPar].
right.

*****
HNPar : not (not (ex (fun I : Tpoint => and (Col I A B) (Col I C D))))
H2 : not (Col A C D)
H1 : not (eq C D)
H0 : not (eq A B)
H : Coplanar A B C D
A,B,C,D : Tpoint
Hdec : decidability_of_not_intersection
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Par A B C D)
+++++
intros [HParS|Heq].
-----
Lemma par_dec_NID : decidability_of_parallelism <-> decidability_of_not_intersection.
Proof.
split.
intros Hdec A B C D.
destruct (cop_dec A B C D) as [|HNCop].
destruct (eq_dec_points A B).
destruct (eq_dec_points C D).
destruct (col_dec A C D).
destruct (Hdec A B C D) as [HPar|HNPar].
right.
intros [HParS|Heq].

*****
HParS : Par_strict A B C D
HNPar : not (not (ex (fun I : Tpoint => and (Col I A B) (Col I C D))))
H2 : not (Col A C D)
H1 : not (eq C D)
H0 : not (eq A B)
H : Coplanar A B C D
A,B,C,D : Tpoint
Hdec : decidability_of_not_intersection
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply HNPar.
-----
Lemma par_dec_NID : decidability_of_parallelism <-> decidability_of_not_intersection.
Proof.
split.
intros Hdec A B C D.
destruct (cop_dec A B C D) as [|HNCop].
destruct (eq_dec_points A B).
destruct (eq_dec_points C D).
destruct (col_dec A C D).
destruct (Hdec A B C D) as [HPar|HNPar].
right.
intros [HParS|Heq].
apply HNPar.

*****
HParS : Par_strict A B C D
HNPar : not (not (ex (fun I : Tpoint => and (Col I A B) (Col I C D))))
H2 : not (Col A C D)
H1 : not (eq C D)
H0 : not (eq A B)
H : Coplanar A B C D
A,B,C,D : Tpoint
Hdec : decidability_of_not_intersection
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (ex (fun I : Tpoint => and (Col I A B) (Col I C D)))
+++++
unfold Par_strict in HParS.
-----
Lemma par_dec_NID : decidability_of_parallelism <-> decidability_of_not_intersection.
Proof.
split.
intros Hdec A B C D.
destruct (cop_dec A B C D) as [|HNCop].
destruct (eq_dec_points A B).
destruct (eq_dec_points C D).
destruct (col_dec A C D).
destruct (Hdec A B C D) as [HPar|HNPar].
right.
intros [HParS|Heq].
apply HNPar.
unfold Par_strict in HParS.

*****
HParS : and (not (eq A B))\n (and (not (eq C D))\n (and (Coplanar A B C D)\n (not (ex (fun X : Tpoint => and (Col X A B) (Col X C D))))))
HNPar : not (not (ex (fun I : Tpoint => and (Col I A B) (Col I C D))))
H2 : not (Col A C D)
H1 : not (eq C D)
H0 : not (eq A B)
H : Coplanar A B C D
A,B,C,D : Tpoint
Hdec : decidability_of_not_intersection
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (ex (fun I : Tpoint => and (Col I A B) (Col I C D)))
+++++
spliter.
-----
Lemma par_dec_NID : decidability_of_parallelism <-> decidability_of_not_intersection.
Proof.
split.
intros Hdec A B C D.
destruct (cop_dec A B C D) as [|HNCop].
destruct (eq_dec_points A B).
destruct (eq_dec_points C D).
destruct (col_dec A C D).
destruct (Hdec A B C D) as [HPar|HNPar].
right.
intros [HParS|Heq].
apply HNPar.
unfold Par_strict in HParS.
spliter.

*****
H6 : not (ex (fun X : Tpoint => and (Col X A B) (Col X C D)))
H5 : Coplanar A B C D
H4 : not (eq C D)
H3 : not (eq A B)
HNPar : not (not (ex (fun I : Tpoint => and (Col I A B) (Col I C D))))
H2 : not (Col A C D)
H1 : not (eq C D)
H0 : not (eq A B)
H : Coplanar A B C D
A,B,C,D : Tpoint
Hdec : decidability_of_not_intersection
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (ex (fun I : Tpoint => and (Col I A B) (Col I C D)))
+++++
assumption.
-----
Lemma par_dec_NID : decidability_of_parallelism <-> decidability_of_not_intersection.
Proof.
split.
intros Hdec A B C D.
destruct (cop_dec A B C D) as [|HNCop].
destruct (eq_dec_points A B).
destruct (eq_dec_points C D).
destruct (col_dec A C D).
destruct (Hdec A B C D) as [HPar|HNPar].
right.
intros [HParS|Heq].

*****
Heq : and (not (eq A B)) (and (not (eq C D)) (and (Col A C D) (Col B C D)))
HNPar : not (not (ex (fun I : Tpoint => and (Col I A B) (Col I C D))))
H2 : not (Col A C D)
H1 : not (eq C D)
H0 : not (eq A B)
H : Coplanar A B C D
A,B,C,D : Tpoint
Hdec : decidability_of_not_intersection
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
spliter.
-----
Lemma par_dec_NID : decidability_of_parallelism <-> decidability_of_not_intersection.
Proof.
split.
intros Hdec A B C D.
destruct (cop_dec A B C D) as [|HNCop].
destruct (eq_dec_points A B).
destruct (eq_dec_points C D).
destruct (col_dec A C D).
destruct (Hdec A B C D) as [HPar|HNPar].
right.
intros [HParS|Heq].
spliter.

*****
H6 : Col B C D
H5 : Col A C D
H4 : not (eq C D)
H3 : not (eq A B)
HNPar : not (not (ex (fun I : Tpoint => and (Col I A B) (Col I C D))))
H2 : not (Col A C D)
H1 : not (eq C D)
H0 : not (eq A B)
H : Coplanar A B C D
A,B,C,D : Tpoint
Hdec : decidability_of_not_intersection
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
auto.
-----
Lemma par_dec_NID : decidability_of_parallelism <-> decidability_of_not_intersection.
Proof.
split.
intros Hdec A B C D.
destruct (cop_dec A B C D) as [|HNCop].

*****
HNCop : not (Coplanar A B C D)
A,B,C,D : Tpoint
Hdec : decidability_of_not_intersection
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (Par A B C D) (not (Par A B C D))
+++++
right.
-----
Lemma par_dec_NID : decidability_of_parallelism <-> decidability_of_not_intersection.
Proof.
split.
intros Hdec A B C D.
destruct (cop_dec A B C D) as [|HNCop].
right.

*****
HNCop : not (Coplanar A B C D)
A,B,C,D : Tpoint
Hdec : decidability_of_not_intersection
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Par A B C D)
+++++
intro HPar.
-----
Lemma par_dec_NID : decidability_of_parallelism <-> decidability_of_not_intersection.
Proof.
split.
intros Hdec A B C D.
destruct (cop_dec A B C D) as [|HNCop].
right.
intro HPar.

*****
HPar : Par A B C D
HNCop : not (Coplanar A B C D)
A,B,C,D : Tpoint
Hdec : decidability_of_not_intersection
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply HNCop, par__coplanar, HPar.
-----
Lemma par_dec_NID : decidability_of_parallelism <-> decidability_of_not_intersection.
Proof.
split.

*****

*****

+++++
Qed.
-----
Lemma par_trans__par_dec :\n  postulate_of_transitivity_of_parallelism ->\n  decidability_of_parallelism.
-----
Lemma par_trans__par_dec : postulate_of_transitivity_of_parallelism -> decidability_of_parallelism.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : postulate_of_transitivity_of_parallelism, decidability_of_parallelism
+++++
Proof.
-----
Lemma par_trans__par_dec : postulate_of_transitivity_of_parallelism -> decidability_of_parallelism.
Proof.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : postulate_of_transitivity_of_parallelism, decidability_of_parallelism
+++++
intros HTP A B C D.
-----
Lemma par_trans__par_dec : postulate_of_transitivity_of_parallelism -> decidability_of_parallelism.
Proof.
intros HTP A B C D.

*****
A,B,C,D : Tpoint
HTP : postulate_of_transitivity_of_parallelism
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (Par A B C D) (not (Par A B C D))
+++++
elim (eq_dec_points A B); intro HAB; [treat_equalities; right; intro; assert_diffs; intuition|].
-----
Lemma par_trans__par_dec : postulate_of_transitivity_of_parallelism -> decidability_of_parallelism.
Proof.
intros HTP A B C D.
elim (eq_dec_points A B); intro HAB; [treat_equalities; right; intro; assert_diffs; intuition|].

*****
HAB : not (eq A B)
A,B,C,D : Tpoint
HTP : postulate_of_transitivity_of_parallelism
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (Par A B C D) (not (Par A B C D))
+++++
elim (eq_dec_points C D); intro HCD; [treat_equalities; right; intro; assert_diffs; intuition|].
-----
Lemma par_trans__par_dec : postulate_of_transitivity_of_parallelism -> decidability_of_parallelism.
Proof.
intros HTP A B C D.
elim (eq_dec_points A B); intro HAB; [treat_equalities; right; intro; assert_diffs; intuition|].
elim (eq_dec_points C D); intro HCD; [treat_equalities; right; intro; assert_diffs; intuition|].

*****
HCD : not (eq C D)
HAB : not (eq A B)
A,B,C,D : Tpoint
HTP : postulate_of_transitivity_of_parallelism
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (Par A B C D) (not (Par A B C D))
+++++
destruct (parallel_existence1 A B C HAB) as [D' HPar].
-----
Lemma par_trans__par_dec : postulate_of_transitivity_of_parallelism -> decidability_of_parallelism.
Proof.
intros HTP A B C D.
elim (eq_dec_points A B); intro HAB; [treat_equalities; right; intro; assert_diffs; intuition|].
elim (eq_dec_points C D); intro HCD; [treat_equalities; right; intro; assert_diffs; intuition|].
destruct (parallel_existence1 A B C HAB) as [D' HPar].

*****
HPar : Par A B C D'
D' : Tpoint
HCD : not (eq C D)
HAB : not (eq A B)
A,B,C,D : Tpoint
HTP : postulate_of_transitivity_of_parallelism
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (Par A B C D) (not (Par A B C D))
+++++
elim (col_dec C D D'); intro HCol; [left; apply par_col_par with D'; Par; Col| right; intro; apply HCol; apply par_id_3; apply HTP with A B; Par].
-----
Lemma par_trans__par_dec : postulate_of_transitivity_of_parallelism -> decidability_of_parallelism.
Proof.
intros HTP A B C D.
elim (eq_dec_points A B); intro HAB; [treat_equalities; right; intro; assert_diffs; intuition|].
elim (eq_dec_points C D); intro HCD; [treat_equalities; right; intro; assert_diffs; intuition|].
destruct (parallel_existence1 A B C HAB) as [D' HPar].
elim (col_dec C D D'); intro HCol; [left; apply par_col_par with D'; Par; Col| right; intro; apply HCol; apply par_id_3; apply HTP with A B; Par].

*****

*****

+++++
Qed.
-----
Lemma col_int : forall A B C,\n  Col A B C <-> ~ (~ Bet A B C /\ ~ Bet B C A /\ ~ Bet C A B).
-----
Lemma col_int : forall A B C, Col A B C <-> ~ (~ Bet A B C /\\ ~ Bet B C A /\\ ~ Bet C A B).

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall A B C : Tpoint, iff (Col A B C) (not (and (not (Bet A B C)) (and (not (Bet B C A)) (not (Bet C A B)))))
+++++
Proof.
-----
Lemma col_int : forall A B C, Col A B C <-> ~ (~ Bet A B C /\\ ~ Bet B C A /\\ ~ Bet C A B).
Proof.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall A B C : Tpoint, iff (Col A B C) (not (and (not (Bet A B C)) (and (not (Bet B C A)) (not (Bet C A B)))))
+++++
intros A B C.
-----
Lemma col_int : forall A B C, Col A B C <-> ~ (~ Bet A B C /\\ ~ Bet B C A /\\ ~ Bet C A B).
Proof.
intros A B C.

*****
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
iff (Col A B C) (not (and (not (Bet A B C)) (and (not (Bet B C A)) (not (Bet C A B)))))
+++++
unfold Col.
-----
Lemma col_int : forall A B C, Col A B C <-> ~ (~ Bet A B C /\\ ~ Bet B C A /\\ ~ Bet C A B).
Proof.
intros A B C.
unfold Col.

*****
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
iff (or (Bet A B C) (or (Bet B C A) (Bet C A B))) (not (and (not (Bet A B C)) (and (not (Bet B C A)) (not (Bet C A B)))))
+++++
induction (bet_dec A B C).
-----
Lemma col_int : forall A B C, Col A B C <-> ~ (~ Bet A B C /\\ ~ Bet B C A /\\ ~ Bet C A B).
Proof.
intros A B C.
unfold Col.
induction (bet_dec A B C).

*****
H : Bet A B C
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
iff (or (Bet A B C) (or (Bet B C A) (Bet C A B))) (not (and (not (Bet A B C)) (and (not (Bet B C A)) (not (Bet C A B)))))
+++++
induction (bet_dec B C A).
-----
Lemma col_int : forall A B C, Col A B C <-> ~ (~ Bet A B C /\\ ~ Bet B C A /\\ ~ Bet C A B).
Proof.
intros A B C.
unfold Col.
induction (bet_dec A B C).
induction (bet_dec B C A).

*****
H0 : Bet B C A
H : Bet A B C
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
iff (or (Bet A B C) (or (Bet B C A) (Bet C A B))) (not (and (not (Bet A B C)) (and (not (Bet B C A)) (not (Bet C A B)))))
+++++
induction (bet_dec C A B).
-----
Lemma col_int : forall A B C, Col A B C <-> ~ (~ Bet A B C /\\ ~ Bet B C A /\\ ~ Bet C A B).
Proof.
intros A B C.
unfold Col.
induction (bet_dec A B C).
induction (bet_dec B C A).
induction (bet_dec C A B).

*****
H1 : Bet C A B
H0 : Bet B C A
H : Bet A B C
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
iff (or (Bet A B C) (or (Bet B C A) (Bet C A B))) (not (and (not (Bet A B C)) (and (not (Bet B C A)) (not (Bet C A B)))))
+++++
intuition.
-----
Lemma col_int : forall A B C, Col A B C <-> ~ (~ Bet A B C /\\ ~ Bet B C A /\\ ~ Bet C A B).
Proof.
intros A B C.
unfold Col.
induction (bet_dec A B C).
induction (bet_dec B C A).
induction (bet_dec C A B).

*****
H1 : not (Bet C A B)
H0 : Bet B C A
H : Bet A B C
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
iff (or (Bet A B C) (or (Bet B C A) (Bet C A B))) (not (and (not (Bet A B C)) (and (not (Bet B C A)) (not (Bet C A B)))))
+++++
intuition.
-----
Lemma col_int : forall A B C, Col A B C <-> ~ (~ Bet A B C /\\ ~ Bet B C A /\\ ~ Bet C A B).
Proof.
intros A B C.
unfold Col.
induction (bet_dec A B C).
induction (bet_dec B C A).

*****
H0 : not (Bet B C A)
H : Bet A B C
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
iff (or (Bet A B C) (or (Bet B C A) (Bet C A B))) (not (and (not (Bet A B C)) (and (not (Bet B C A)) (not (Bet C A B)))))
+++++
induction (bet_dec C A B).
-----
Lemma col_int : forall A B C, Col A B C <-> ~ (~ Bet A B C /\\ ~ Bet B C A /\\ ~ Bet C A B).
Proof.
intros A B C.
unfold Col.
induction (bet_dec A B C).
induction (bet_dec B C A).
induction (bet_dec C A B).

*****
H1 : Bet C A B
H0 : not (Bet B C A)
H : Bet A B C
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
iff (or (Bet A B C) (or (Bet B C A) (Bet C A B))) (not (and (not (Bet A B C)) (and (not (Bet B C A)) (not (Bet C A B)))))
+++++
intuition.
-----
Lemma col_int : forall A B C, Col A B C <-> ~ (~ Bet A B C /\\ ~ Bet B C A /\\ ~ Bet C A B).
Proof.
intros A B C.
unfold Col.
induction (bet_dec A B C).
induction (bet_dec B C A).
induction (bet_dec C A B).

*****
H1 : not (Bet C A B)
H0 : not (Bet B C A)
H : Bet A B C
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
iff (or (Bet A B C) (or (Bet B C A) (Bet C A B))) (not (and (not (Bet A B C)) (and (not (Bet B C A)) (not (Bet C A B)))))
+++++
intuition.
-----
Lemma col_int : forall A B C, Col A B C <-> ~ (~ Bet A B C /\\ ~ Bet B C A /\\ ~ Bet C A B).
Proof.
intros A B C.
unfold Col.
induction (bet_dec A B C).

*****
H : not (Bet A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
iff (or (Bet A B C) (or (Bet B C A) (Bet C A B))) (not (and (not (Bet A B C)) (and (not (Bet B C A)) (not (Bet C A B)))))
+++++
induction (bet_dec B C A).
-----
Lemma col_int : forall A B C, Col A B C <-> ~ (~ Bet A B C /\\ ~ Bet B C A /\\ ~ Bet C A B).
Proof.
intros A B C.
unfold Col.
induction (bet_dec A B C).
induction (bet_dec B C A).

*****
H0 : Bet B C A
H : not (Bet A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
iff (or (Bet A B C) (or (Bet B C A) (Bet C A B))) (not (and (not (Bet A B C)) (and (not (Bet B C A)) (not (Bet C A B)))))
+++++
induction (bet_dec C A B).
-----
Lemma col_int : forall A B C, Col A B C <-> ~ (~ Bet A B C /\\ ~ Bet B C A /\\ ~ Bet C A B).
Proof.
intros A B C.
unfold Col.
induction (bet_dec A B C).
induction (bet_dec B C A).
induction (bet_dec C A B).

*****
H1 : Bet C A B
H0 : Bet B C A
H : not (Bet A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
iff (or (Bet A B C) (or (Bet B C A) (Bet C A B))) (not (and (not (Bet A B C)) (and (not (Bet B C A)) (not (Bet C A B)))))
+++++
intuition.
-----
Lemma col_int : forall A B C, Col A B C <-> ~ (~ Bet A B C /\\ ~ Bet B C A /\\ ~ Bet C A B).
Proof.
intros A B C.
unfold Col.
induction (bet_dec A B C).
induction (bet_dec B C A).
induction (bet_dec C A B).

*****
H1 : not (Bet C A B)
H0 : Bet B C A
H : not (Bet A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
iff (or (Bet A B C) (or (Bet B C A) (Bet C A B))) (not (and (not (Bet A B C)) (and (not (Bet B C A)) (not (Bet C A B)))))
+++++
intuition.
-----
Lemma col_int : forall A B C, Col A B C <-> ~ (~ Bet A B C /\\ ~ Bet B C A /\\ ~ Bet C A B).
Proof.
intros A B C.
unfold Col.
induction (bet_dec A B C).
induction (bet_dec B C A).

*****
H0 : not (Bet B C A)
H : not (Bet A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
iff (or (Bet A B C) (or (Bet B C A) (Bet C A B))) (not (and (not (Bet A B C)) (and (not (Bet B C A)) (not (Bet C A B)))))
+++++
induction (bet_dec C A B).
-----
Lemma col_int : forall A B C, Col A B C <-> ~ (~ Bet A B C /\\ ~ Bet B C A /\\ ~ Bet C A B).
Proof.
intros A B C.
unfold Col.
induction (bet_dec A B C).
induction (bet_dec B C A).
induction (bet_dec C A B).

*****
H1 : Bet C A B
H0 : not (Bet B C A)
H : not (Bet A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
iff (or (Bet A B C) (or (Bet B C A) (Bet C A B))) (not (and (not (Bet A B C)) (and (not (Bet B C A)) (not (Bet C A B)))))
+++++
intuition.
-----
Lemma col_int : forall A B C, Col A B C <-> ~ (~ Bet A B C /\\ ~ Bet B C A /\\ ~ Bet C A B).
Proof.
intros A B C.
unfold Col.
induction (bet_dec A B C).
induction (bet_dec B C A).
induction (bet_dec C A B).

*****
H1 : not (Bet C A B)
H0 : not (Bet B C A)
H : not (Bet A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
iff (or (Bet A B C) (or (Bet B C A) (Bet C A B))) (not (and (not (Bet A B C)) (and (not (Bet B C A)) (not (Bet C A B)))))
+++++
intuition.
-----
Lemma col_int : forall A B C, Col A B C <-> ~ (~ Bet A B C /\\ ~ Bet B C A /\\ ~ Bet C A B).
Proof.
intros A B C.
unfold Col.
induction (bet_dec A B C).

*****

*****

+++++
Qed.
-----
Definition playfair_ter := forall A1 A2 B1 B2 C1 C2 P,\n  A1 <> A2 -> B1 <> B2 -> C1 <> C2 ->\n  Col P B1 B2 -> Col P C1 C2 ->\n  ~ (Col A1 B1 B2 /\ Col A2 B1 B2) ->\n  ~ (Col A1 C1 C2 /\ Col A2 C1 C2) ->\n  ~ (Col C1 B1 B2 /\ Col C2 B1 B2) ->\n  (exists I, ~ (~ (Col A1 A2 I /\ Col B1 B2 I) /\\n                ~ (Col A1 B1 I /\ Col A2 B2 I) /\\n                ~ (Col A1 B2 I /\ Col A2 B1 I))) ->\n  (exists I, ~ (~ (Col A1 A2 I /\ Col C1 C2 I) /\\n               ~ (Col A1 C1 I /\ Col A2 C2 I) /\\n               ~ (Col A1 C2 I /\ Col A2 C1 I))) ->\n  ~ (~ (exists I, Col I A1 A2 /\ Col I B1 B2) /\\n     ~ (exists I, Col I A1 A2 /\ Col I C1 C2)).
-----
Definition playfair_quater_qf A1 A2 B1 B2 C1 C2 P :=\n  A1 <> A2 /\ B1 <> B2 /\ C1 <> C2 /\\n  Col P B1 B2 /\ Col P C1 C2 /\\n  ~ (Col A1 B1 B2 /\ Col A2 B1 B2) /\\n  ~ (Col A1 C1 C2 /\ Col A2 C1 C2) /\\n  ~ (Col C1 B1 B2 /\ Col C2 B1 B2) /\\n  (exists I, ~ (~ (Col A1 A2 I /\ Col B1 B2 I) /\\n                ~ (Col A1 B1 I /\ Col A2 B2 I) /\\n                ~ (Col A1 B2 I /\ Col A2 B1 I))) /\\n  (exists I, ~ (~ (Col A1 A2 I /\ Col C1 C2 I) /\\n                ~ (Col A1 C1 I /\ Col A2 C2 I) /\\n                ~ (Col A1 C2 I /\ Col A2 C1 I))) /\\n  ~ (exists I, Col I A1 A2 /\ Col I B1 B2) /\\n  ~ (exists I, Col I A1 A2 /\ Col I C1 C2).
-----
Definition playfair_quater := ~ exists A1 A2 B1 B2 C1 C2 P,\n  playfair_quater_qf A1 A2 B1 B2 C1 C2 P.
-----
Lemma playfair__playfair_ter :\n  playfair_s_postulate -> playfair_ter.
-----
Lemma playfair__playfair_ter : playfair_s_postulate -> playfair_ter.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : playfair_s_postulate, playfair_ter
+++++
Proof.
-----
Lemma playfair__playfair_ter : playfair_s_postulate -> playfair_ter.
Proof.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : playfair_s_postulate, playfair_ter
+++++
intros HP A1 A2 B1 B2 C1 C2 P HA HB HC HP1 HP2 HNC1 HNC2 HNC3 HIAB HIAC.
-----
Lemma playfair__playfair_ter : playfair_s_postulate -> playfair_ter.
Proof.
intros HP A1 A2 B1 B2 C1 C2 P HA HB HC HP1 HP2 HNC1 HNC2 HNC3 HIAB HIAC.

*****
HIAC : ex\n (fun I : Tpoint =>\n not\n (and (not (and (Col A1 A2 I) (Col C1 C2 I)))\n (and (not (and (Col A1 C1 I) (Col A2 C2 I)))\n (not (and (Col A1 C2 I) (Col A2 C1 I))))))
HIAB : ex\n (fun I : Tpoint =>\n not\n (and (not (and (Col A1 A2 I) (Col B1 B2 I)))\n (and (not (and (Col A1 B1 I) (Col A2 B2 I)))\n (not (and (Col A1 B2 I) (Col A2 B1 I))))))
HNC3 : not (and (Col C1 B1 B2) (Col C2 B1 B2))
HNC2 : not (and (Col A1 C1 C2) (Col A2 C1 C2))
HNC1 : not (and (Col A1 B1 B2) (Col A2 B1 B2))
HP2 : Col P C1 C2
HP1 : Col P B1 B2
HC : not (eq C1 C2)
HB : not (eq B1 B2)
HA : not (eq A1 A2)
A1,A2,B1,B2,C1,C2,P : Tpoint
HP : playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (and (not (ex (fun I : Tpoint => and (Col I A1 A2) (Col I B1 B2)))) (not (ex (fun I : Tpoint => and (Col I A1 A2) (Col I C1 C2)))))
+++++
intros [HAB HAC].
-----
Lemma playfair__playfair_ter : playfair_s_postulate -> playfair_ter.
Proof.
intros HP A1 A2 B1 B2 C1 C2 P HA HB HC HP1 HP2 HNC1 HNC2 HNC3 HIAB HIAC.
intros [HAB HAC].

*****
HAC : not (ex (fun I : Tpoint => and (Col I A1 A2) (Col I C1 C2)))
HAB : not (ex (fun I : Tpoint => and (Col I A1 A2) (Col I B1 B2)))
HIAC : ex\n (fun I : Tpoint =>\n not\n (and (not (and (Col A1 A2 I) (Col C1 C2 I)))\n (and (not (and (Col A1 C1 I) (Col A2 C2 I)))\n (not (and (Col A1 C2 I) (Col A2 C1 I))))))
HIAB : ex\n (fun I : Tpoint =>\n not\n (and (not (and (Col A1 A2 I) (Col B1 B2 I)))\n (and (not (and (Col A1 B1 I) (Col A2 B2 I)))\n (not (and (Col A1 B2 I) (Col A2 B1 I))))))
HNC3 : not (and (Col C1 B1 B2) (Col C2 B1 B2))
HNC2 : not (and (Col A1 C1 C2) (Col A2 C1 C2))
HNC1 : not (and (Col A1 B1 B2) (Col A2 B1 B2))
HP2 : Col P C1 C2
HP1 : Col P B1 B2
HC : not (eq C1 C2)
HB : not (eq B1 B2)
HA : not (eq A1 A2)
A1,A2,B1,B2,C1,C2,P : Tpoint
HP : playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply HNC3.
-----
Lemma playfair__playfair_ter : playfair_s_postulate -> playfair_ter.
Proof.
intros HP A1 A2 B1 B2 C1 C2 P HA HB HC HP1 HP2 HNC1 HNC2 HNC3 HIAB HIAC.
intros [HAB HAC].
apply HNC3.

*****
HAC : not (ex (fun I : Tpoint => and (Col I A1 A2) (Col I C1 C2)))
HAB : not (ex (fun I : Tpoint => and (Col I A1 A2) (Col I B1 B2)))
HIAC : ex\n (fun I : Tpoint =>\n not\n (and (not (and (Col A1 A2 I) (Col C1 C2 I)))\n (and (not (and (Col A1 C1 I) (Col A2 C2 I)))\n (not (and (Col A1 C2 I) (Col A2 C1 I))))))
HIAB : ex\n (fun I : Tpoint =>\n not\n (and (not (and (Col A1 A2 I) (Col B1 B2 I)))\n (and (not (and (Col A1 B1 I) (Col A2 B2 I)))\n (not (and (Col A1 B2 I) (Col A2 B1 I))))))
HNC3 : not (and (Col C1 B1 B2) (Col C2 B1 B2))
HNC2 : not (and (Col A1 C1 C2) (Col A2 C1 C2))
HNC1 : not (and (Col A1 B1 B2) (Col A2 B1 B2))
HP2 : Col P C1 C2
HP1 : Col P B1 B2
HC : not (eq C1 C2)
HB : not (eq B1 B2)
HA : not (eq A1 A2)
A1,A2,B1,B2,C1,C2,P : Tpoint
HP : playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col C1 B1 B2) (Col C2 B1 B2)
+++++
apply (HP A1 A2 B1 B2 C1 C2 P); Col; left; repeat (split; Col).
-----
Lemma playfair__playfair_ter : playfair_s_postulate -> playfair_ter.
Proof.
intros HP A1 A2 B1 B2 C1 C2 P HA HB HC HP1 HP2 HNC1 HNC2 HNC3 HIAB HIAC.
intros [HAB HAC].
apply HNC3.
apply (HP A1 A2 B1 B2 C1 C2 P); Col; left; repeat (split; Col).

*****
HAC : not (ex (fun I : Tpoint => and (Col I A1 A2) (Col I C1 C2)))
HAB : not (ex (fun I : Tpoint => and (Col I A1 A2) (Col I B1 B2)))
HIAC : ex\n (fun I : Tpoint =>\n not\n (and (not (and (Col A1 A2 I) (Col C1 C2 I)))\n (and (not (and (Col A1 C1 I) (Col A2 C2 I)))\n (not (and (Col A1 C2 I) (Col A2 C1 I))))))
HIAB : ex\n (fun I : Tpoint =>\n not\n (and (not (and (Col A1 A2 I) (Col B1 B2 I)))\n (and (not (and (Col A1 B1 I) (Col A2 B2 I)))\n (not (and (Col A1 B2 I) (Col A2 B1 I))))))
HNC3 : not (and (Col C1 B1 B2) (Col C2 B1 B2))
HNC2 : not (and (Col A1 C1 C2) (Col A2 C1 C2))
HNC1 : not (and (Col A1 B1 B2) (Col A2 B1 B2))
HP2 : Col P C1 C2
HP1 : Col P B1 B2
HC : not (eq C1 C2)
HB : not (eq B1 B2)
HA : not (eq A1 A2)
A1,A2,B1,B2,C1,C2,P : Tpoint
HP : playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A1 A2 B1 B2
+++++
destruct HIAB as [IAB HIAB]; exists IAB.
-----
Lemma playfair__playfair_ter : playfair_s_postulate -> playfair_ter.
Proof.
intros HP A1 A2 B1 B2 C1 C2 P HA HB HC HP1 HP2 HNC1 HNC2 HNC3 HIAB HIAC.
intros [HAB HAC].
apply HNC3.
apply (HP A1 A2 B1 B2 C1 C2 P); Col; left; repeat (split; Col).
destruct HIAB as [IAB HIAB]; exists IAB.

*****
HAC : not (ex (fun I : Tpoint => and (Col I A1 A2) (Col I C1 C2)))
HAB : not (ex (fun I : Tpoint => and (Col I A1 A2) (Col I B1 B2)))
HIAC : ex\n (fun I : Tpoint =>\n not\n (and (not (and (Col A1 A2 I) (Col C1 C2 I)))\n (and (not (and (Col A1 C1 I) (Col A2 C2 I)))\n (not (and (Col A1 C2 I) (Col A2 C1 I))))))
HIAB : not\n (and (not (and (Col A1 A2 IAB) (Col B1 B2 IAB)))\n (and (not (and (Col A1 B1 IAB) (Col A2 B2 IAB)))\n (not (and (Col A1 B2 IAB) (Col A2 B1 IAB)))))
IAB : Tpoint
HNC3 : not (and (Col C1 B1 B2) (Col C2 B1 B2))
HNC2 : not (and (Col A1 C1 C2) (Col A2 C1 C2))
HNC1 : not (and (Col A1 B1 B2) (Col A2 B1 B2))
HP2 : Col P C1 C2
HP1 : Col P B1 B2
HC : not (eq C1 C2)
HB : not (eq B1 B2)
HA : not (eq A1 A2)
A1,A2,B1,B2,C1,C2,P : Tpoint
HP : playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (and (Col A1 A2 IAB) (Col B1 B2 IAB)) (or (and (Col A1 B1 IAB) (Col A2 B2 IAB)) (and (Col A1 B2 IAB) (Col A2 B1 IAB)))
+++++
clear HA HB HC HP1 HP2 HNC1 HNC2 HNC3 HIAC HAB HAC P C1 C2.
-----
Lemma playfair__playfair_ter : playfair_s_postulate -> playfair_ter.
Proof.
intros HP A1 A2 B1 B2 C1 C2 P HA HB HC HP1 HP2 HNC1 HNC2 HNC3 HIAB HIAC.
intros [HAB HAC].
apply HNC3.
apply (HP A1 A2 B1 B2 C1 C2 P); Col; left; repeat (split; Col).
destruct HIAB as [IAB HIAB]; exists IAB.
clear HA HB HC HP1 HP2 HNC1 HNC2 HNC3 HIAC HAB HAC P C1 C2.

*****
HIAB : not\n (and (not (and (Col A1 A2 IAB) (Col B1 B2 IAB)))\n (and (not (and (Col A1 B1 IAB) (Col A2 B2 IAB)))\n (not (and (Col A1 B2 IAB) (Col A2 B1 IAB)))))
A1,A2,B1,B2,IAB : Tpoint
HP : playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (and (Col A1 A2 IAB) (Col B1 B2 IAB)) (or (and (Col A1 B1 IAB) (Col A2 B2 IAB)) (and (Col A1 B2 IAB) (Col A2 B1 IAB)))
+++++
induction (col_dec A1 A2 IAB); induction (col_dec B1 B2 IAB); try solve [left; Col]; induction (col_dec A1 B1 IAB); induction (col_dec A2 B2 IAB); try solve [right; left; Col]; induction (col_dec A1 B2 IAB); induction (col_dec A2 B1 IAB); try solve [right; right; Col]; exfalso; apply HIAB; intuition.
-----
Lemma playfair__playfair_ter : playfair_s_postulate -> playfair_ter.
Proof.
intros HP A1 A2 B1 B2 C1 C2 P HA HB HC HP1 HP2 HNC1 HNC2 HNC3 HIAB HIAC.
intros [HAB HAC].
apply HNC3.
apply (HP A1 A2 B1 B2 C1 C2 P); Col; left; repeat (split; Col).

*****
HAC : not (ex (fun I : Tpoint => and (Col I A1 A2) (Col I C1 C2)))
HAB : not (ex (fun I : Tpoint => and (Col I A1 A2) (Col I B1 B2)))
HIAC : ex\n (fun I : Tpoint =>\n not\n (and (not (and (Col A1 A2 I) (Col C1 C2 I)))\n (and (not (and (Col A1 C1 I) (Col A2 C2 I)))\n (not (and (Col A1 C2 I) (Col A2 C1 I))))))
HIAB : ex\n (fun I : Tpoint =>\n not\n (and (not (and (Col A1 A2 I) (Col B1 B2 I)))\n (and (not (and (Col A1 B1 I) (Col A2 B2 I)))\n (not (and (Col A1 B2 I) (Col A2 B1 I))))))
HNC3 : not (and (Col C1 B1 B2) (Col C2 B1 B2))
HNC2 : not (and (Col A1 C1 C2) (Col A2 C1 C2))
HNC1 : not (and (Col A1 B1 B2) (Col A2 B1 B2))
HP2 : Col P C1 C2
HP1 : Col P B1 B2
HC : not (eq C1 C2)
HB : not (eq B1 B2)
HA : not (eq A1 A2)
A1,A2,B1,B2,C1,C2,P : Tpoint
HP : playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A1 A2 C1 C2
+++++
destruct HIAC as [IAC HIAC]; exists IAC.
-----
Lemma playfair__playfair_ter : playfair_s_postulate -> playfair_ter.
Proof.
intros HP A1 A2 B1 B2 C1 C2 P HA HB HC HP1 HP2 HNC1 HNC2 HNC3 HIAB HIAC.
intros [HAB HAC].
apply HNC3.
apply (HP A1 A2 B1 B2 C1 C2 P); Col; left; repeat (split; Col).
destruct HIAC as [IAC HIAC]; exists IAC.

*****
HAC : not (ex (fun I : Tpoint => and (Col I A1 A2) (Col I C1 C2)))
HAB : not (ex (fun I : Tpoint => and (Col I A1 A2) (Col I B1 B2)))
HIAC : not\n (and (not (and (Col A1 A2 IAC) (Col C1 C2 IAC)))\n (and (not (and (Col A1 C1 IAC) (Col A2 C2 IAC)))\n (not (and (Col A1 C2 IAC) (Col A2 C1 IAC)))))
IAC : Tpoint
HIAB : ex\n (fun I : Tpoint =>\n not\n (and (not (and (Col A1 A2 I) (Col B1 B2 I)))\n (and (not (and (Col A1 B1 I) (Col A2 B2 I)))\n (not (and (Col A1 B2 I) (Col A2 B1 I))))))
HNC3 : not (and (Col C1 B1 B2) (Col C2 B1 B2))
HNC2 : not (and (Col A1 C1 C2) (Col A2 C1 C2))
HNC1 : not (and (Col A1 B1 B2) (Col A2 B1 B2))
HP2 : Col P C1 C2
HP1 : Col P B1 B2
HC : not (eq C1 C2)
HB : not (eq B1 B2)
HA : not (eq A1 A2)
A1,A2,B1,B2,C1,C2,P : Tpoint
HP : playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (and (Col A1 A2 IAC) (Col C1 C2 IAC)) (or (and (Col A1 C1 IAC) (Col A2 C2 IAC)) (and (Col A1 C2 IAC) (Col A2 C1 IAC)))
+++++
clear HA HB HC HP1 HP2 HNC1 HNC2 HNC3 HIAB HAB HAC P B1 B2.
-----
Lemma playfair__playfair_ter : playfair_s_postulate -> playfair_ter.
Proof.
intros HP A1 A2 B1 B2 C1 C2 P HA HB HC HP1 HP2 HNC1 HNC2 HNC3 HIAB HIAC.
intros [HAB HAC].
apply HNC3.
apply (HP A1 A2 B1 B2 C1 C2 P); Col; left; repeat (split; Col).
destruct HIAC as [IAC HIAC]; exists IAC.
clear HA HB HC HP1 HP2 HNC1 HNC2 HNC3 HIAB HAB HAC P B1 B2.

*****
HIAC : not\n (and (not (and (Col A1 A2 IAC) (Col C1 C2 IAC)))\n (and (not (and (Col A1 C1 IAC) (Col A2 C2 IAC)))\n (not (and (Col A1 C2 IAC) (Col A2 C1 IAC)))))
A1,A2,C1,C2,IAC : Tpoint
HP : playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (and (Col A1 A2 IAC) (Col C1 C2 IAC)) (or (and (Col A1 C1 IAC) (Col A2 C2 IAC)) (and (Col A1 C2 IAC) (Col A2 C1 IAC)))
+++++
induction (col_dec A1 A2 IAC); induction (col_dec C1 C2 IAC); try solve [left; Col]; induction (col_dec A1 C1 IAC); induction (col_dec A2 C2 IAC); try solve [right; left; Col]; induction (col_dec A1 C2 IAC); induction (col_dec A2 C1 IAC); try solve [right; right; Col]; exfalso; apply HIAC; intuition.
-----
Lemma playfair__playfair_ter : playfair_s_postulate -> playfair_ter.
Proof.
intros HP A1 A2 B1 B2 C1 C2 P HA HB HC HP1 HP2 HNC1 HNC2 HNC3 HIAB HIAC.
intros [HAB HAC].
apply HNC3.
apply (HP A1 A2 B1 B2 C1 C2 P); Col; left; repeat (split; Col).

*****

*****

+++++
Qed.
-----
Lemma playfair__playfair_quater :\n  playfair_s_postulate -> playfair_quater.
-----
Lemma playfair__playfair_quater : playfair_s_postulate -> playfair_quater.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : playfair_s_postulate, playfair_quater
+++++
Proof.
-----
Lemma playfair__playfair_quater : playfair_s_postulate -> playfair_quater.
Proof.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : playfair_s_postulate, playfair_quater
+++++
intro HP; intro HPQ; destruct HPQ as [A1 [A2 [B1 [B2 [C1 [C2 [P HPQ]]]]]]].
-----
Lemma playfair__playfair_quater : playfair_s_postulate -> playfair_quater.
Proof.
intro HP; intro HPQ; destruct HPQ as [A1 [A2 [B1 [B2 [C1 [C2 [P HPQ]]]]]]].

*****
HPQ : playfair_quater_qf A1 A2 B1 B2 C1 C2 P
A1,A2,B1,B2,C1,C2,P : Tpoint
HP : playfair_s_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert (H:= HP A1 A2 B1 B2 C1 C2 P); clear HP.
-----
Lemma playfair__playfair_quater : playfair_s_postulate -> playfair_quater.
Proof.
intro HP; intro HPQ; destruct HPQ as [A1 [A2 [B1 [B2 [C1 [C2 [P HPQ]]]]]]].
assert (H:= HP A1 A2 B1 B2 C1 C2 P); clear HP.

*****
H : forall (_ : Par A1 A2 B1 B2) (_ : Col P B1 B2) (_ : Par A1 A2 C1 C2)\n (_ : Col P C1 C2), and (Col C1 B1 B2) (Col C2 B1 B2)
HPQ : playfair_quater_qf A1 A2 B1 B2 C1 C2 P
A1,A2,B1,B2,C1,C2,P : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
destruct HPQ as [HD1 [HD2 [HD3 [HC1 [HC2 [HNC1 [HNC2 [HNC3 HPQ]]]]]]]].
-----
Lemma playfair__playfair_quater : playfair_s_postulate -> playfair_quater.
Proof.
intro HP; intro HPQ; destruct HPQ as [A1 [A2 [B1 [B2 [C1 [C2 [P HPQ]]]]]]].
assert (H:= HP A1 A2 B1 B2 C1 C2 P); clear HP.
destruct HPQ as [HD1 [HD2 [HD3 [HC1 [HC2 [HNC1 [HNC2 [HNC3 HPQ]]]]]]]].

*****
H : forall (_ : Par A1 A2 B1 B2) (_ : Col P B1 B2) (_ : Par A1 A2 C1 C2)\n (_ : Col P C1 C2), and (Col C1 B1 B2) (Col C2 B1 B2)
HPQ : and\n (ex\n (fun I : Tpoint =>\n not\n (and (not (and (Col A1 A2 I) (Col B1 B2 I)))\n (and (not (and (Col A1 B1 I) (Col A2 B2 I)))\n (not (and (Col A1 B2 I) (Col A2 B1 I)))))))\n (and\n (ex\n (fun I : Tpoint =>\n not\n (and (not (and (Col A1 A2 I) (Col C1 C2 I)))\n (and (not (and (Col A1 C1 I) (Col A2 C2 I)))\n (not (and (Col A1 C2 I) (Col A2 C1 I)))))))\n (and\n (not (ex (fun I : Tpoint => and (Col I A1 A2) (Col I B1 B2))))\n (not (ex (fun I : Tpoint => and (Col I A1 A2) (Col I C1 C2))))))
HNC3 : not (and (Col C1 B1 B2) (Col C2 B1 B2))
HNC2 : not (and (Col A1 C1 C2) (Col A2 C1 C2))
HNC1 : not (and (Col A1 B1 B2) (Col A2 B1 B2))
HC2 : Col P C1 C2
HC1 : Col P B1 B2
HD3 : not (eq C1 C2)
HD2 : not (eq B1 B2)
HD1 : not (eq A1 A2)
A1,A2,B1,B2,C1,C2,P : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
destruct HPQ as [HIAB [HIAC [HNI1 HNI2]]].
-----
Lemma playfair__playfair_quater : playfair_s_postulate -> playfair_quater.
Proof.
intro HP; intro HPQ; destruct HPQ as [A1 [A2 [B1 [B2 [C1 [C2 [P HPQ]]]]]]].
assert (H:= HP A1 A2 B1 B2 C1 C2 P); clear HP.
destruct HPQ as [HD1 [HD2 [HD3 [HC1 [HC2 [HNC1 [HNC2 [HNC3 HPQ]]]]]]]].
destruct HPQ as [HIAB [HIAC [HNI1 HNI2]]].

*****
H : forall (_ : Par A1 A2 B1 B2) (_ : Col P B1 B2) (_ : Par A1 A2 C1 C2)\n (_ : Col P C1 C2), and (Col C1 B1 B2) (Col C2 B1 B2)
HNI2 : not (ex (fun I : Tpoint => and (Col I A1 A2) (Col I C1 C2)))
HNI1 : not (ex (fun I : Tpoint => and (Col I A1 A2) (Col I B1 B2)))
HIAC : ex\n (fun I : Tpoint =>\n not\n (and (not (and (Col A1 A2 I) (Col C1 C2 I)))\n (and (not (and (Col A1 C1 I) (Col A2 C2 I)))\n (not (and (Col A1 C2 I) (Col A2 C1 I))))))
HIAB : ex\n (fun I : Tpoint =>\n not\n (and (not (and (Col A1 A2 I) (Col B1 B2 I)))\n (and (not (and (Col A1 B1 I) (Col A2 B2 I)))\n (not (and (Col A1 B2 I) (Col A2 B1 I))))))
HNC3 : not (and (Col C1 B1 B2) (Col C2 B1 B2))
HNC2 : not (and (Col A1 C1 C2) (Col A2 C1 C2))
HNC1 : not (and (Col A1 B1 B2) (Col A2 B1 B2))
HC2 : Col P C1 C2
HC1 : Col P B1 B2
HD3 : not (eq C1 C2)
HD2 : not (eq B1 B2)
HD1 : not (eq A1 A2)
A1,A2,B1,B2,C1,C2,P : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply HNC3; apply H; clear H; Col; left; repeat (split; try assumption); auto.
-----
Lemma playfair__playfair_quater : playfair_s_postulate -> playfair_quater.
Proof.
intro HP; intro HPQ; destruct HPQ as [A1 [A2 [B1 [B2 [C1 [C2 [P HPQ]]]]]]].
assert (H:= HP A1 A2 B1 B2 C1 C2 P); clear HP.
destruct HPQ as [HD1 [HD2 [HD3 [HC1 [HC2 [HNC1 [HNC2 [HNC3 HPQ]]]]]]]].
destruct HPQ as [HIAB [HIAC [HNI1 HNI2]]].
apply HNC3; apply H; clear H; Col; left; repeat (split; try assumption); auto.

*****
HNI2 : not (ex (fun I : Tpoint => and (Col I A1 A2) (Col I C1 C2)))
HNI1 : not (ex (fun I : Tpoint => and (Col I A1 A2) (Col I B1 B2)))
HIAC : ex\n (fun I : Tpoint =>\n not\n (and (not (and (Col A1 A2 I) (Col C1 C2 I)))\n (and (not (and (Col A1 C1 I) (Col A2 C2 I)))\n (not (and (Col A1 C2 I) (Col A2 C1 I))))))
HIAB : ex\n (fun I : Tpoint =>\n not\n (and (not (and (Col A1 A2 I) (Col B1 B2 I)))\n (and (not (and (Col A1 B1 I) (Col A2 B2 I)))\n (not (and (Col A1 B2 I) (Col A2 B1 I))))))
HNC3 : not (and (Col C1 B1 B2) (Col C2 B1 B2))
HNC2 : not (and (Col A1 C1 C2) (Col A2 C1 C2))
HNC1 : not (and (Col A1 B1 B2) (Col A2 B1 B2))
HC2 : Col P C1 C2
HC1 : Col P B1 B2
HD3 : not (eq C1 C2)
HD2 : not (eq B1 B2)
HD1 : not (eq A1 A2)
A1,A2,B1,B2,C1,C2,P : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A1 A2 B1 B2
+++++
destruct HIAB as [IAB HIAB]; exists IAB.
-----
Lemma playfair__playfair_quater : playfair_s_postulate -> playfair_quater.
Proof.
intro HP; intro HPQ; destruct HPQ as [A1 [A2 [B1 [B2 [C1 [C2 [P HPQ]]]]]]].
assert (H:= HP A1 A2 B1 B2 C1 C2 P); clear HP.
destruct HPQ as [HD1 [HD2 [HD3 [HC1 [HC2 [HNC1 [HNC2 [HNC3 HPQ]]]]]]]].
destruct HPQ as [HIAB [HIAC [HNI1 HNI2]]].
apply HNC3; apply H; clear H; Col; left; repeat (split; try assumption); auto.
destruct HIAB as [IAB HIAB]; exists IAB.

*****
HNI2 : not (ex (fun I : Tpoint => and (Col I A1 A2) (Col I C1 C2)))
HNI1 : not (ex (fun I : Tpoint => and (Col I A1 A2) (Col I B1 B2)))
HIAC : ex\n (fun I : Tpoint =>\n not\n (and (not (and (Col A1 A2 I) (Col C1 C2 I)))\n (and (not (and (Col A1 C1 I) (Col A2 C2 I)))\n (not (and (Col A1 C2 I) (Col A2 C1 I))))))
HIAB : not\n (and (not (and (Col A1 A2 IAB) (Col B1 B2 IAB)))\n (and (not (and (Col A1 B1 IAB) (Col A2 B2 IAB)))\n (not (and (Col A1 B2 IAB) (Col A2 B1 IAB)))))
IAB : Tpoint
HNC3 : not (and (Col C1 B1 B2) (Col C2 B1 B2))
HNC2 : not (and (Col A1 C1 C2) (Col A2 C1 C2))
HNC1 : not (and (Col A1 B1 B2) (Col A2 B1 B2))
HC2 : Col P C1 C2
HC1 : Col P B1 B2
HD3 : not (eq C1 C2)
HD2 : not (eq B1 B2)
HD1 : not (eq A1 A2)
A1,A2,B1,B2,C1,C2,P : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (and (Col A1 A2 IAB) (Col B1 B2 IAB)) (or (and (Col A1 B1 IAB) (Col A2 B2 IAB)) (and (Col A1 B2 IAB) (Col A2 B1 IAB)))
+++++
clear HD1 HD2 HD3 HC1 HC2 HNC1 HNC2 HNC3 HIAC HNI1 HNI2 P C1 C2.
-----
Lemma playfair__playfair_quater : playfair_s_postulate -> playfair_quater.
Proof.
intro HP; intro HPQ; destruct HPQ as [A1 [A2 [B1 [B2 [C1 [C2 [P HPQ]]]]]]].
assert (H:= HP A1 A2 B1 B2 C1 C2 P); clear HP.
destruct HPQ as [HD1 [HD2 [HD3 [HC1 [HC2 [HNC1 [HNC2 [HNC3 HPQ]]]]]]]].
destruct HPQ as [HIAB [HIAC [HNI1 HNI2]]].
apply HNC3; apply H; clear H; Col; left; repeat (split; try assumption); auto.
destruct HIAB as [IAB HIAB]; exists IAB.
clear HD1 HD2 HD3 HC1 HC2 HNC1 HNC2 HNC3 HIAC HNI1 HNI2 P C1 C2.

*****
HIAB : not\n (and (not (and (Col A1 A2 IAB) (Col B1 B2 IAB)))\n (and (not (and (Col A1 B1 IAB) (Col A2 B2 IAB)))\n (not (and (Col A1 B2 IAB) (Col A2 B1 IAB)))))
A1,A2,B1,B2,IAB : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (and (Col A1 A2 IAB) (Col B1 B2 IAB)) (or (and (Col A1 B1 IAB) (Col A2 B2 IAB)) (and (Col A1 B2 IAB) (Col A2 B1 IAB)))
+++++
induction (col_dec A1 A2 IAB); induction (col_dec B1 B2 IAB); try solve [left; Col]; induction (col_dec A1 B1 IAB); induction (col_dec A2 B2 IAB); try solve [right; left; Col]; induction (col_dec A1 B2 IAB); induction (col_dec A2 B1 IAB); try solve [right; right; Col]; exfalso; apply HIAB; intuition.
-----
Lemma playfair__playfair_quater : playfair_s_postulate -> playfair_quater.
Proof.
intro HP; intro HPQ; destruct HPQ as [A1 [A2 [B1 [B2 [C1 [C2 [P HPQ]]]]]]].
assert (H:= HP A1 A2 B1 B2 C1 C2 P); clear HP.
destruct HPQ as [HD1 [HD2 [HD3 [HC1 [HC2 [HNC1 [HNC2 [HNC3 HPQ]]]]]]]].
destruct HPQ as [HIAB [HIAC [HNI1 HNI2]]].
apply HNC3; apply H; clear H; Col; left; repeat (split; try assumption); auto.

*****
HNI2 : not (ex (fun I : Tpoint => and (Col I A1 A2) (Col I C1 C2)))
HNI1 : not (ex (fun I : Tpoint => and (Col I A1 A2) (Col I B1 B2)))
HIAC : ex\n (fun I : Tpoint =>\n not\n (and (not (and (Col A1 A2 I) (Col C1 C2 I)))\n (and (not (and (Col A1 C1 I) (Col A2 C2 I)))\n (not (and (Col A1 C2 I) (Col A2 C1 I))))))
HIAB : ex\n (fun I : Tpoint =>\n not\n (and (not (and (Col A1 A2 I) (Col B1 B2 I)))\n (and (not (and (Col A1 B1 I) (Col A2 B2 I)))\n (not (and (Col A1 B2 I) (Col A2 B1 I))))))
HNC3 : not (and (Col C1 B1 B2) (Col C2 B1 B2))
HNC2 : not (and (Col A1 C1 C2) (Col A2 C1 C2))
HNC1 : not (and (Col A1 B1 B2) (Col A2 B1 B2))
HC2 : Col P C1 C2
HC1 : Col P B1 B2
HD3 : not (eq C1 C2)
HD2 : not (eq B1 B2)
HD1 : not (eq A1 A2)
A1,A2,B1,B2,C1,C2,P : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A1 A2 C1 C2
+++++
destruct HIAC as [IAC HIAC]; exists IAC.
-----
Lemma playfair__playfair_quater : playfair_s_postulate -> playfair_quater.
Proof.
intro HP; intro HPQ; destruct HPQ as [A1 [A2 [B1 [B2 [C1 [C2 [P HPQ]]]]]]].
assert (H:= HP A1 A2 B1 B2 C1 C2 P); clear HP.
destruct HPQ as [HD1 [HD2 [HD3 [HC1 [HC2 [HNC1 [HNC2 [HNC3 HPQ]]]]]]]].
destruct HPQ as [HIAB [HIAC [HNI1 HNI2]]].
apply HNC3; apply H; clear H; Col; left; repeat (split; try assumption); auto.
destruct HIAC as [IAC HIAC]; exists IAC.

*****
HNI2 : not (ex (fun I : Tpoint => and (Col I A1 A2) (Col I C1 C2)))
HNI1 : not (ex (fun I : Tpoint => and (Col I A1 A2) (Col I B1 B2)))
HIAC : not\n (and (not (and (Col A1 A2 IAC) (Col C1 C2 IAC)))\n (and (not (and (Col A1 C1 IAC) (Col A2 C2 IAC)))\n (not (and (Col A1 C2 IAC) (Col A2 C1 IAC)))))
IAC : Tpoint
HIAB : ex\n (fun I : Tpoint =>\n not\n (and (not (and (Col A1 A2 I) (Col B1 B2 I)))\n (and (not (and (Col A1 B1 I) (Col A2 B2 I)))\n (not (and (Col A1 B2 I) (Col A2 B1 I))))))
HNC3 : not (and (Col C1 B1 B2) (Col C2 B1 B2))
HNC2 : not (and (Col A1 C1 C2) (Col A2 C1 C2))
HNC1 : not (and (Col A1 B1 B2) (Col A2 B1 B2))
HC2 : Col P C1 C2
HC1 : Col P B1 B2
HD3 : not (eq C1 C2)
HD2 : not (eq B1 B2)
HD1 : not (eq A1 A2)
A1,A2,B1,B2,C1,C2,P : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (and (Col A1 A2 IAC) (Col C1 C2 IAC)) (or (and (Col A1 C1 IAC) (Col A2 C2 IAC)) (and (Col A1 C2 IAC) (Col A2 C1 IAC)))
+++++
clear HD1 HD2 HD3 HC1 HC2 HNC1 HNC2 HNC3 HIAB HNI1 HNI2 P B1 B2.
-----
Lemma playfair__playfair_quater : playfair_s_postulate -> playfair_quater.
Proof.
intro HP; intro HPQ; destruct HPQ as [A1 [A2 [B1 [B2 [C1 [C2 [P HPQ]]]]]]].
assert (H:= HP A1 A2 B1 B2 C1 C2 P); clear HP.
destruct HPQ as [HD1 [HD2 [HD3 [HC1 [HC2 [HNC1 [HNC2 [HNC3 HPQ]]]]]]]].
destruct HPQ as [HIAB [HIAC [HNI1 HNI2]]].
apply HNC3; apply H; clear H; Col; left; repeat (split; try assumption); auto.
destruct HIAC as [IAC HIAC]; exists IAC.
clear HD1 HD2 HD3 HC1 HC2 HNC1 HNC2 HNC3 HIAB HNI1 HNI2 P B1 B2.

*****
HIAC : not\n (and (not (and (Col A1 A2 IAC) (Col C1 C2 IAC)))\n (and (not (and (Col A1 C1 IAC) (Col A2 C2 IAC)))\n (not (and (Col A1 C2 IAC) (Col A2 C1 IAC)))))
A1,A2,C1,C2,IAC : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (and (Col A1 A2 IAC) (Col C1 C2 IAC)) (or (and (Col A1 C1 IAC) (Col A2 C2 IAC)) (and (Col A1 C2 IAC) (Col A2 C1 IAC)))
+++++
induction (col_dec A1 A2 IAC); induction (col_dec C1 C2 IAC); try solve [left; Col]; induction (col_dec A1 C1 IAC); induction (col_dec A2 C2 IAC); try solve [right; left; Col]; induction (col_dec A1 C2 IAC); induction (col_dec A2 C1 IAC); try solve [right; right; Col]; exfalso; apply HIAC; intuition.
-----
Lemma playfair__playfair_quater : playfair_s_postulate -> playfair_quater.
Proof.
intro HP; intro HPQ; destruct HPQ as [A1 [A2 [B1 [B2 [C1 [C2 [P HPQ]]]]]]].
assert (H:= HP A1 A2 B1 B2 C1 C2 P); clear HP.
destruct HPQ as [HD1 [HD2 [HD3 [HC1 [HC2 [HNC1 [HNC2 [HNC3 HPQ]]]]]]]].
destruct HPQ as [HIAB [HIAC [HNI1 HNI2]]].
apply HNC3; apply H; clear H; Col; left; repeat (split; try assumption); auto.

*****

*****

+++++
Qed.
-----
Lemma playfair_ter__playfair :\n  playfair_ter -> playfair_s_postulate.
-----
Lemma playfair_ter__playfair : playfair_ter -> playfair_s_postulate.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : playfair_ter, playfair_s_postulate
+++++
Proof.
-----
Lemma playfair_ter__playfair : playfair_ter -> playfair_s_postulate.
Proof.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : playfair_ter, playfair_s_postulate
+++++
intros HP A1 A2 B1 B2 C1 C2 P HPar1 HP1 HPar2 HP2.
-----
Lemma playfair_ter__playfair : playfair_ter -> playfair_s_postulate.
Proof.
intros HP A1 A2 B1 B2 C1 C2 P HPar1 HP1 HPar2 HP2.

*****
HP2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HP1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HP : playfair_ter
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col C1 B1 B2) (Col C2 B1 B2)
+++++
elim (col_dec A1 B1 B2); intro HNC1.
-----
Lemma playfair_ter__playfair : playfair_ter -> playfair_s_postulate.
Proof.
intros HP A1 A2 B1 B2 C1 C2 P HPar1 HP1 HPar2 HP2.
elim (col_dec A1 B1 B2); intro HNC1.

*****
HNC1 : Col A1 B1 B2
HP2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HP1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HP : playfair_ter
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col C1 B1 B2) (Col C2 B1 B2)
+++++
assert (HA : A1 <> A2) by (assert_diffs; auto).
-----
Lemma playfair_ter__playfair : playfair_ter -> playfair_s_postulate.
Proof.
intros HP A1 A2 B1 B2 C1 C2 P HPar1 HP1 HPar2 HP2.
elim (col_dec A1 B1 B2); intro HNC1.
assert (HA : A1 <> A2) by (assert_diffs; auto).

*****
HA : not (eq A1 A2)
HNC1 : Col A1 B1 B2
HP2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HP1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HP : playfair_ter
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col C1 B1 B2) (Col C2 B1 B2)
+++++
assert (HB : B1 <> B2) by (assert_diffs; auto).
-----
Lemma playfair_ter__playfair : playfair_ter -> playfair_s_postulate.
Proof.
intros HP A1 A2 B1 B2 C1 C2 P HPar1 HP1 HPar2 HP2.
elim (col_dec A1 B1 B2); intro HNC1.
assert (HA : A1 <> A2) by (assert_diffs; auto).
assert (HB : B1 <> B2) by (assert_diffs; auto).

*****
HB : not (eq B1 B2)
HA : not (eq A1 A2)
HNC1 : Col A1 B1 B2
HP2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HP1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HP : playfair_ter
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col C1 B1 B2) (Col C2 B1 B2)
+++++
assert (HC : C1 <> C2) by (assert_diffs; auto).
-----
Lemma playfair_ter__playfair : playfair_ter -> playfair_s_postulate.
Proof.
intros HP A1 A2 B1 B2 C1 C2 P HPar1 HP1 HPar2 HP2.
elim (col_dec A1 B1 B2); intro HNC1.
assert (HA : A1 <> A2) by (assert_diffs; auto).
assert (HB : B1 <> B2) by (assert_diffs; auto).
assert (HC : C1 <> C2) by (assert_diffs; auto).

*****
HC : not (eq C1 C2)
HB : not (eq B1 B2)
HA : not (eq A1 A2)
HNC1 : Col A1 B1 B2
HP2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HP1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HP : playfair_ter
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col C1 B1 B2) (Col C2 B1 B2)
+++++
apply (not_strict_par _ _ _ _ A1) in HPar1; Col.
-----
Lemma playfair_ter__playfair : playfair_ter -> playfair_s_postulate.
Proof.
intros HP A1 A2 B1 B2 C1 C2 P HPar1 HP1 HPar2 HP2.
elim (col_dec A1 B1 B2); intro HNC1.
assert (HA : A1 <> A2) by (assert_diffs; auto).
assert (HB : B1 <> B2) by (assert_diffs; auto).
assert (HC : C1 <> C2) by (assert_diffs; auto).
apply (not_strict_par _ _ _ _ A1) in HPar1; Col.

*****
HC : not (eq C1 C2)
HB : not (eq B1 B2)
HA : not (eq A1 A2)
HNC1 : Col A1 B1 B2
HP2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HP1 : Col P B1 B2
HPar1 : and (Col A1 A2 B1) (Col A1 A2 B2)
A1,A2,B1,B2,C1,C2,P : Tpoint
HP : playfair_ter
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col C1 B1 B2) (Col C2 B1 B2)
+++++
destruct HPar1 as [HC1 HC2]; clear HNC1.
-----
Lemma playfair_ter__playfair : playfair_ter -> playfair_s_postulate.
Proof.
intros HP A1 A2 B1 B2 C1 C2 P HPar1 HP1 HPar2 HP2.
elim (col_dec A1 B1 B2); intro HNC1.
assert (HA : A1 <> A2) by (assert_diffs; auto).
assert (HB : B1 <> B2) by (assert_diffs; auto).
assert (HC : C1 <> C2) by (assert_diffs; auto).
apply (not_strict_par _ _ _ _ A1) in HPar1; Col.
destruct HPar1 as [HC1 HC2]; clear HNC1.

*****
HC : not (eq C1 C2)
HB : not (eq B1 B2)
HA : not (eq A1 A2)
HP2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HP1 : Col P B1 B2
HC2 : Col A1 A2 B2
HC1 : Col A1 A2 B1
A1,A2,B1,B2,C1,C2,P : Tpoint
HP : playfair_ter
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col C1 B1 B2) (Col C2 B1 B2)
+++++
apply (not_strict_par _ _ _ _ P) in HPar2; spliter; try split; ColR.
-----
Lemma playfair_ter__playfair : playfair_ter -> playfair_s_postulate.
Proof.
intros HP A1 A2 B1 B2 C1 C2 P HPar1 HP1 HPar2 HP2.
elim (col_dec A1 B1 B2); intro HNC1.

*****
HNC1 : not (Col A1 B1 B2)
HP2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HP1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HP : playfair_ter
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col C1 B1 B2) (Col C2 B1 B2)
+++++
elim (col_dec A1 C1 C2); intro HNC2.
-----
Lemma playfair_ter__playfair : playfair_ter -> playfair_s_postulate.
Proof.
intros HP A1 A2 B1 B2 C1 C2 P HPar1 HP1 HPar2 HP2.
elim (col_dec A1 B1 B2); intro HNC1.
elim (col_dec A1 C1 C2); intro HNC2.

*****
HNC2 : Col A1 C1 C2
HNC1 : not (Col A1 B1 B2)
HP2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HP1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HP : playfair_ter
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col C1 B1 B2) (Col C2 B1 B2)
+++++
assert (HA : A1 <> A2) by (assert_diffs; auto).
-----
Lemma playfair_ter__playfair : playfair_ter -> playfair_s_postulate.
Proof.
intros HP A1 A2 B1 B2 C1 C2 P HPar1 HP1 HPar2 HP2.
elim (col_dec A1 B1 B2); intro HNC1.
elim (col_dec A1 C1 C2); intro HNC2.
assert (HA : A1 <> A2) by (assert_diffs; auto).

*****
HA : not (eq A1 A2)
HNC2 : Col A1 C1 C2
HNC1 : not (Col A1 B1 B2)
HP2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HP1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HP : playfair_ter
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col C1 B1 B2) (Col C2 B1 B2)
+++++
assert (HB : B1 <> B2) by (assert_diffs; auto).
-----
Lemma playfair_ter__playfair : playfair_ter -> playfair_s_postulate.
Proof.
intros HP A1 A2 B1 B2 C1 C2 P HPar1 HP1 HPar2 HP2.
elim (col_dec A1 B1 B2); intro HNC1.
elim (col_dec A1 C1 C2); intro HNC2.
assert (HA : A1 <> A2) by (assert_diffs; auto).
assert (HB : B1 <> B2) by (assert_diffs; auto).

*****
HB : not (eq B1 B2)
HA : not (eq A1 A2)
HNC2 : Col A1 C1 C2
HNC1 : not (Col A1 B1 B2)
HP2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HP1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HP : playfair_ter
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col C1 B1 B2) (Col C2 B1 B2)
+++++
assert (HC : C1 <> C2) by (assert_diffs; auto).
-----
Lemma playfair_ter__playfair : playfair_ter -> playfair_s_postulate.
Proof.
intros HP A1 A2 B1 B2 C1 C2 P HPar1 HP1 HPar2 HP2.
elim (col_dec A1 B1 B2); intro HNC1.
elim (col_dec A1 C1 C2); intro HNC2.
assert (HA : A1 <> A2) by (assert_diffs; auto).
assert (HB : B1 <> B2) by (assert_diffs; auto).
assert (HC : C1 <> C2) by (assert_diffs; auto).

*****
HC : not (eq C1 C2)
HB : not (eq B1 B2)
HA : not (eq A1 A2)
HNC2 : Col A1 C1 C2
HNC1 : not (Col A1 B1 B2)
HP2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HP1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HP : playfair_ter
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col C1 B1 B2) (Col C2 B1 B2)
+++++
apply (not_strict_par _ _ _ _ A1) in HPar2; Col.
-----
Lemma playfair_ter__playfair : playfair_ter -> playfair_s_postulate.
Proof.
intros HP A1 A2 B1 B2 C1 C2 P HPar1 HP1 HPar2 HP2.
elim (col_dec A1 B1 B2); intro HNC1.
elim (col_dec A1 C1 C2); intro HNC2.
assert (HA : A1 <> A2) by (assert_diffs; auto).
assert (HB : B1 <> B2) by (assert_diffs; auto).
assert (HC : C1 <> C2) by (assert_diffs; auto).
apply (not_strict_par _ _ _ _ A1) in HPar2; Col.

*****
HC : not (eq C1 C2)
HB : not (eq B1 B2)
HA : not (eq A1 A2)
HNC2 : Col A1 C1 C2
HNC1 : not (Col A1 B1 B2)
HP2 : Col P C1 C2
HPar2 : and (Col A1 A2 C1) (Col A1 A2 C2)
HP1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HP : playfair_ter
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col C1 B1 B2) (Col C2 B1 B2)
+++++
destruct HPar2 as [HC1 HC2]; clear HNC2.
-----
Lemma playfair_ter__playfair : playfair_ter -> playfair_s_postulate.
Proof.
intros HP A1 A2 B1 B2 C1 C2 P HPar1 HP1 HPar2 HP2.
elim (col_dec A1 B1 B2); intro HNC1.
elim (col_dec A1 C1 C2); intro HNC2.
assert (HA : A1 <> A2) by (assert_diffs; auto).
assert (HB : B1 <> B2) by (assert_diffs; auto).
assert (HC : C1 <> C2) by (assert_diffs; auto).
apply (not_strict_par _ _ _ _ A1) in HPar2; Col.
destruct HPar2 as [HC1 HC2]; clear HNC2.

*****
HC : not (eq C1 C2)
HB : not (eq B1 B2)
HA : not (eq A1 A2)
HNC1 : not (Col A1 B1 B2)
HP2 : Col P C1 C2
HC2 : Col A1 A2 C2
HC1 : Col A1 A2 C1
HP1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HP : playfair_ter
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col C1 B1 B2) (Col C2 B1 B2)
+++++
apply (not_strict_par _ _ _ _ P) in HPar1; spliter; try split; ColR.
-----
Lemma playfair_ter__playfair : playfair_ter -> playfair_s_postulate.
Proof.
intros HP A1 A2 B1 B2 C1 C2 P HPar1 HP1 HPar2 HP2.
elim (col_dec A1 B1 B2); intro HNC1.
elim (col_dec A1 C1 C2); intro HNC2.

*****
HNC2 : not (Col A1 C1 C2)
HNC1 : not (Col A1 B1 B2)
HP2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HP1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HP : playfair_ter
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col C1 B1 B2) (Col C2 B1 B2)
+++++
assert (H : ~ ~ (Col C1 B1 B2 /\ Col C2 B1 B2) -> Col C1 B1 B2 /\ Col C2 B1 B2); [induction (col_dec C1 B1 B2); induction (col_dec C2 B1 B2); intuition| apply H; clear H; intro HNC3; apply (HP A1 A2 B1 B2 C1 C2 P); try solve [assert_diffs; Col]; try (intros [HC1 HC2]; intuition)].
-----
Lemma playfair_ter__playfair : playfair_ter -> playfair_s_postulate.
Proof.
intros HP A1 A2 B1 B2 C1 C2 P HPar1 HP1 HPar2 HP2.
elim (col_dec A1 B1 B2); intro HNC1.
elim (col_dec A1 C1 C2); intro HNC2.
assert (H : ~ ~ (Col C1 B1 B2 /\\ Col C2 B1 B2) -> Col C1 B1 B2 /\\ Col C2 B1 B2); [induction (col_dec C1 B1 B2); induction (col_dec C2 B1 B2); intuition| apply H; clear H; intro HNC3; apply (HP A1 A2 B1 B2 C1 C2 P); try solve [assert_diffs; Col]; try (intros [HC1 HC2]; intuition)].

*****
HNC3 : not (and (Col C1 B1 B2) (Col C2 B1 B2))
HNC2 : not (Col A1 C1 C2)
HNC1 : not (Col A1 B1 B2)
HP2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HP1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HP : playfair_ter
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun I : Tpoint => not (and (not (and (Col A1 A2 I) (Col B1 B2 I))) (and (not (and (Col A1 B1 I) (Col A2 B2 I))) (not (and (Col A1 B2 I) (Col A2 B1 I))))))
+++++
apply par_symmetry in HPar1.
-----
Lemma playfair_ter__playfair : playfair_ter -> playfair_s_postulate.
Proof.
intros HP A1 A2 B1 B2 C1 C2 P HPar1 HP1 HPar2 HP2.
elim (col_dec A1 B1 B2); intro HNC1.
elim (col_dec A1 C1 C2); intro HNC2.
assert (H : ~ ~ (Col C1 B1 B2 /\\ Col C2 B1 B2) -> Col C1 B1 B2 /\\ Col C2 B1 B2); [induction (col_dec C1 B1 B2); induction (col_dec C2 B1 B2); intuition| apply H; clear H; intro HNC3; apply (HP A1 A2 B1 B2 C1 C2 P); try solve [assert_diffs; Col]; try (intros [HC1 HC2]; intuition)].
apply par_symmetry in HPar1.

*****
HNC3 : not (and (Col C1 B1 B2) (Col C2 B1 B2))
HNC2 : not (Col A1 C1 C2)
HNC1 : not (Col A1 B1 B2)
HP2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HP1 : Col P B1 B2
HPar1 : Par B1 B2 A1 A2
A1,A2,B1,B2,C1,C2,P : Tpoint
HP : playfair_ter
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun I : Tpoint => not (and (not (and (Col A1 A2 I) (Col B1 B2 I))) (and (not (and (Col A1 B1 I) (Col A2 B2 I))) (not (and (Col A1 B2 I) (Col A2 B1 I))))))
+++++
apply (par_not_col_strict _ _ _ _ A1) in HPar1; Col.
-----
Lemma playfair_ter__playfair : playfair_ter -> playfair_s_postulate.
Proof.
intros HP A1 A2 B1 B2 C1 C2 P HPar1 HP1 HPar2 HP2.
elim (col_dec A1 B1 B2); intro HNC1.
elim (col_dec A1 C1 C2); intro HNC2.
assert (H : ~ ~ (Col C1 B1 B2 /\\ Col C2 B1 B2) -> Col C1 B1 B2 /\\ Col C2 B1 B2); [induction (col_dec C1 B1 B2); induction (col_dec C2 B1 B2); intuition| apply H; clear H; intro HNC3; apply (HP A1 A2 B1 B2 C1 C2 P); try solve [assert_diffs; Col]; try (intros [HC1 HC2]; intuition)].
apply par_symmetry in HPar1.
apply (par_not_col_strict _ _ _ _ A1) in HPar1; Col.

*****
HNC3 : not (and (Col C1 B1 B2) (Col C2 B1 B2))
HNC2 : not (Col A1 C1 C2)
HNC1 : not (Col A1 B1 B2)
HP2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HP1 : Col P B1 B2
HPar1 : Par_strict B1 B2 A1 A2
A1,A2,B1,B2,C1,C2,P : Tpoint
HP : playfair_ter
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun I : Tpoint => not (and (not (and (Col A1 A2 I) (Col B1 B2 I))) (and (not (and (Col A1 B1 I) (Col A2 B2 I))) (not (and (Col A1 B2 I) (Col A2 B1 I))))))
+++++
destruct HPar1 as [_ [_ [[IAB HIAB] _]]].
-----
Lemma playfair_ter__playfair : playfair_ter -> playfair_s_postulate.
Proof.
intros HP A1 A2 B1 B2 C1 C2 P HPar1 HP1 HPar2 HP2.
elim (col_dec A1 B1 B2); intro HNC1.
elim (col_dec A1 C1 C2); intro HNC2.
assert (H : ~ ~ (Col C1 B1 B2 /\\ Col C2 B1 B2) -> Col C1 B1 B2 /\\ Col C2 B1 B2); [induction (col_dec C1 B1 B2); induction (col_dec C2 B1 B2); intuition| apply H; clear H; intro HNC3; apply (HP A1 A2 B1 B2 C1 C2 P); try solve [assert_diffs; Col]; try (intros [HC1 HC2]; intuition)].
apply par_symmetry in HPar1.
apply (par_not_col_strict _ _ _ _ A1) in HPar1; Col.
destruct HPar1 as [_ [_ [[IAB HIAB] _]]].

*****
HNC3 : not (and (Col C1 B1 B2) (Col C2 B1 B2))
HNC2 : not (Col A1 C1 C2)
HNC1 : not (Col A1 B1 B2)
HP2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HP1 : Col P B1 B2
HIAB : or (and (Col B1 B2 IAB) (Col A1 A2 IAB))\n (or (and (Col B1 A1 IAB) (Col B2 A2 IAB))\n (and (Col B1 A2 IAB) (Col B2 A1 IAB)))
A1,A2,B1,B2,C1,C2,P,IAB : Tpoint
HP : playfair_ter
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun I : Tpoint => not (and (not (and (Col A1 A2 I) (Col B1 B2 I))) (and (not (and (Col A1 B1 I) (Col A2 B2 I))) (not (and (Col A1 B2 I) (Col A2 B1 I))))))
+++++
exists IAB; intros [HIAB1 [HIAB2 HIAB3]].
-----
Lemma playfair_ter__playfair : playfair_ter -> playfair_s_postulate.
Proof.
intros HP A1 A2 B1 B2 C1 C2 P HPar1 HP1 HPar2 HP2.
elim (col_dec A1 B1 B2); intro HNC1.
elim (col_dec A1 C1 C2); intro HNC2.
assert (H : ~ ~ (Col C1 B1 B2 /\\ Col C2 B1 B2) -> Col C1 B1 B2 /\\ Col C2 B1 B2); [induction (col_dec C1 B1 B2); induction (col_dec C2 B1 B2); intuition| apply H; clear H; intro HNC3; apply (HP A1 A2 B1 B2 C1 C2 P); try solve [assert_diffs; Col]; try (intros [HC1 HC2]; intuition)].
apply par_symmetry in HPar1.
apply (par_not_col_strict _ _ _ _ A1) in HPar1; Col.
destruct HPar1 as [_ [_ [[IAB HIAB] _]]].
exists IAB; intros [HIAB1 [HIAB2 HIAB3]].

*****
HIAB3 : not (and (Col A1 B2 IAB) (Col A2 B1 IAB))
HIAB2 : not (and (Col A1 B1 IAB) (Col A2 B2 IAB))
HIAB1 : not (and (Col A1 A2 IAB) (Col B1 B2 IAB))
HNC3 : not (and (Col C1 B1 B2) (Col C2 B1 B2))
HNC2 : not (Col A1 C1 C2)
HNC1 : not (Col A1 B1 B2)
HP2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HP1 : Col P B1 B2
HIAB : or (and (Col B1 B2 IAB) (Col A1 A2 IAB))\n (or (and (Col B1 A1 IAB) (Col B2 A2 IAB))\n (and (Col B1 A2 IAB) (Col B2 A1 IAB)))
A1,A2,B1,B2,C1,C2,P,IAB : Tpoint
HP : playfair_ter
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
elim HIAB; clear HIAB; intro HIAB; [apply HIAB1|]; try solve [spliter; split; Col].
-----
Lemma playfair_ter__playfair : playfair_ter -> playfair_s_postulate.
Proof.
intros HP A1 A2 B1 B2 C1 C2 P HPar1 HP1 HPar2 HP2.
elim (col_dec A1 B1 B2); intro HNC1.
elim (col_dec A1 C1 C2); intro HNC2.
assert (H : ~ ~ (Col C1 B1 B2 /\\ Col C2 B1 B2) -> Col C1 B1 B2 /\\ Col C2 B1 B2); [induction (col_dec C1 B1 B2); induction (col_dec C2 B1 B2); intuition| apply H; clear H; intro HNC3; apply (HP A1 A2 B1 B2 C1 C2 P); try solve [assert_diffs; Col]; try (intros [HC1 HC2]; intuition)].
apply par_symmetry in HPar1.
apply (par_not_col_strict _ _ _ _ A1) in HPar1; Col.
destruct HPar1 as [_ [_ [[IAB HIAB] _]]].
exists IAB; intros [HIAB1 [HIAB2 HIAB3]].
elim HIAB; clear HIAB; intro HIAB; [apply HIAB1|]; try solve [spliter; split; Col].

*****
HIAB : or (and (Col B1 A1 IAB) (Col B2 A2 IAB))\n (and (Col B1 A2 IAB) (Col B2 A1 IAB))
HIAB3 : not (and (Col A1 B2 IAB) (Col A2 B1 IAB))
HIAB2 : not (and (Col A1 B1 IAB) (Col A2 B2 IAB))
HIAB1 : not (and (Col A1 A2 IAB) (Col B1 B2 IAB))
HNC3 : not (and (Col C1 B1 B2) (Col C2 B1 B2))
HNC2 : not (Col A1 C1 C2)
HNC1 : not (Col A1 B1 B2)
HP2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HP1 : Col P B1 B2
A1,A2,B1,B2,C1,C2,P,IAB : Tpoint
HP : playfair_ter
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
elim HIAB; clear HIAB; intro HIAB; [apply HIAB2|apply HIAB3]; spliter; split; Col.
-----
Lemma playfair_ter__playfair : playfair_ter -> playfair_s_postulate.
Proof.
intros HP A1 A2 B1 B2 C1 C2 P HPar1 HP1 HPar2 HP2.
elim (col_dec A1 B1 B2); intro HNC1.
elim (col_dec A1 C1 C2); intro HNC2.
assert (H : ~ ~ (Col C1 B1 B2 /\\ Col C2 B1 B2) -> Col C1 B1 B2 /\\ Col C2 B1 B2); [induction (col_dec C1 B1 B2); induction (col_dec C2 B1 B2); intuition| apply H; clear H; intro HNC3; apply (HP A1 A2 B1 B2 C1 C2 P); try solve [assert_diffs; Col]; try (intros [HC1 HC2]; intuition)].

*****
HNC3 : not (and (Col C1 B1 B2) (Col C2 B1 B2))
HNC2 : not (Col A1 C1 C2)
HNC1 : not (Col A1 B1 B2)
HP2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HP1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HP : playfair_ter
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun I : Tpoint => not (and (not (and (Col A1 A2 I) (Col C1 C2 I))) (and (not (and (Col A1 C1 I) (Col A2 C2 I))) (not (and (Col A1 C2 I) (Col A2 C1 I))))))
+++++
apply par_symmetry in HPar2.
-----
Lemma playfair_ter__playfair : playfair_ter -> playfair_s_postulate.
Proof.
intros HP A1 A2 B1 B2 C1 C2 P HPar1 HP1 HPar2 HP2.
elim (col_dec A1 B1 B2); intro HNC1.
elim (col_dec A1 C1 C2); intro HNC2.
assert (H : ~ ~ (Col C1 B1 B2 /\\ Col C2 B1 B2) -> Col C1 B1 B2 /\\ Col C2 B1 B2); [induction (col_dec C1 B1 B2); induction (col_dec C2 B1 B2); intuition| apply H; clear H; intro HNC3; apply (HP A1 A2 B1 B2 C1 C2 P); try solve [assert_diffs; Col]; try (intros [HC1 HC2]; intuition)].
apply par_symmetry in HPar2.

*****
HNC3 : not (and (Col C1 B1 B2) (Col C2 B1 B2))
HNC2 : not (Col A1 C1 C2)
HNC1 : not (Col A1 B1 B2)
HP2 : Col P C1 C2
HPar2 : Par C1 C2 A1 A2
HP1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HP : playfair_ter
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun I : Tpoint => not (and (not (and (Col A1 A2 I) (Col C1 C2 I))) (and (not (and (Col A1 C1 I) (Col A2 C2 I))) (not (and (Col A1 C2 I) (Col A2 C1 I))))))
+++++
apply (par_not_col_strict _ _ _ _ A1) in HPar2; Col.
-----
Lemma playfair_ter__playfair : playfair_ter -> playfair_s_postulate.
Proof.
intros HP A1 A2 B1 B2 C1 C2 P HPar1 HP1 HPar2 HP2.
elim (col_dec A1 B1 B2); intro HNC1.
elim (col_dec A1 C1 C2); intro HNC2.
assert (H : ~ ~ (Col C1 B1 B2 /\\ Col C2 B1 B2) -> Col C1 B1 B2 /\\ Col C2 B1 B2); [induction (col_dec C1 B1 B2); induction (col_dec C2 B1 B2); intuition| apply H; clear H; intro HNC3; apply (HP A1 A2 B1 B2 C1 C2 P); try solve [assert_diffs; Col]; try (intros [HC1 HC2]; intuition)].
apply par_symmetry in HPar2.
apply (par_not_col_strict _ _ _ _ A1) in HPar2; Col.

*****
HNC3 : not (and (Col C1 B1 B2) (Col C2 B1 B2))
HNC2 : not (Col A1 C1 C2)
HNC1 : not (Col A1 B1 B2)
HP2 : Col P C1 C2
HPar2 : Par_strict C1 C2 A1 A2
HP1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HP : playfair_ter
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun I : Tpoint => not (and (not (and (Col A1 A2 I) (Col C1 C2 I))) (and (not (and (Col A1 C1 I) (Col A2 C2 I))) (not (and (Col A1 C2 I) (Col A2 C1 I))))))
+++++
destruct HPar2 as [_ [_ [[IAC HIAC] _]]].
-----
Lemma playfair_ter__playfair : playfair_ter -> playfair_s_postulate.
Proof.
intros HP A1 A2 B1 B2 C1 C2 P HPar1 HP1 HPar2 HP2.
elim (col_dec A1 B1 B2); intro HNC1.
elim (col_dec A1 C1 C2); intro HNC2.
assert (H : ~ ~ (Col C1 B1 B2 /\\ Col C2 B1 B2) -> Col C1 B1 B2 /\\ Col C2 B1 B2); [induction (col_dec C1 B1 B2); induction (col_dec C2 B1 B2); intuition| apply H; clear H; intro HNC3; apply (HP A1 A2 B1 B2 C1 C2 P); try solve [assert_diffs; Col]; try (intros [HC1 HC2]; intuition)].
apply par_symmetry in HPar2.
apply (par_not_col_strict _ _ _ _ A1) in HPar2; Col.
destruct HPar2 as [_ [_ [[IAC HIAC] _]]].

*****
HNC3 : not (and (Col C1 B1 B2) (Col C2 B1 B2))
HNC2 : not (Col A1 C1 C2)
HNC1 : not (Col A1 B1 B2)
HP2 : Col P C1 C2
HIAC : or (and (Col C1 C2 IAC) (Col A1 A2 IAC))\n (or (and (Col C1 A1 IAC) (Col C2 A2 IAC))\n (and (Col C1 A2 IAC) (Col C2 A1 IAC)))
IAC : Tpoint
HP1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HP : playfair_ter
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun I : Tpoint => not (and (not (and (Col A1 A2 I) (Col C1 C2 I))) (and (not (and (Col A1 C1 I) (Col A2 C2 I))) (not (and (Col A1 C2 I) (Col A2 C1 I))))))
+++++
exists IAC; intros [HIAC1 [HIAC2 HIAC3]].
-----
Lemma playfair_ter__playfair : playfair_ter -> playfair_s_postulate.
Proof.
intros HP A1 A2 B1 B2 C1 C2 P HPar1 HP1 HPar2 HP2.
elim (col_dec A1 B1 B2); intro HNC1.
elim (col_dec A1 C1 C2); intro HNC2.
assert (H : ~ ~ (Col C1 B1 B2 /\\ Col C2 B1 B2) -> Col C1 B1 B2 /\\ Col C2 B1 B2); [induction (col_dec C1 B1 B2); induction (col_dec C2 B1 B2); intuition| apply H; clear H; intro HNC3; apply (HP A1 A2 B1 B2 C1 C2 P); try solve [assert_diffs; Col]; try (intros [HC1 HC2]; intuition)].
apply par_symmetry in HPar2.
apply (par_not_col_strict _ _ _ _ A1) in HPar2; Col.
destruct HPar2 as [_ [_ [[IAC HIAC] _]]].
exists IAC; intros [HIAC1 [HIAC2 HIAC3]].

*****
HIAC3 : not (and (Col A1 C2 IAC) (Col A2 C1 IAC))
HIAC2 : not (and (Col A1 C1 IAC) (Col A2 C2 IAC))
HIAC1 : not (and (Col A1 A2 IAC) (Col C1 C2 IAC))
HNC3 : not (and (Col C1 B1 B2) (Col C2 B1 B2))
HNC2 : not (Col A1 C1 C2)
HNC1 : not (Col A1 B1 B2)
HP2 : Col P C1 C2
HIAC : or (and (Col C1 C2 IAC) (Col A1 A2 IAC))\n (or (and (Col C1 A1 IAC) (Col C2 A2 IAC))\n (and (Col C1 A2 IAC) (Col C2 A1 IAC)))
IAC : Tpoint
HP1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HP : playfair_ter
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
elim HIAC; clear HIAC; intro HIAC; [apply HIAC1|]; try solve [spliter; split; Col].
-----
Lemma playfair_ter__playfair : playfair_ter -> playfair_s_postulate.
Proof.
intros HP A1 A2 B1 B2 C1 C2 P HPar1 HP1 HPar2 HP2.
elim (col_dec A1 B1 B2); intro HNC1.
elim (col_dec A1 C1 C2); intro HNC2.
assert (H : ~ ~ (Col C1 B1 B2 /\\ Col C2 B1 B2) -> Col C1 B1 B2 /\\ Col C2 B1 B2); [induction (col_dec C1 B1 B2); induction (col_dec C2 B1 B2); intuition| apply H; clear H; intro HNC3; apply (HP A1 A2 B1 B2 C1 C2 P); try solve [assert_diffs; Col]; try (intros [HC1 HC2]; intuition)].
apply par_symmetry in HPar2.
apply (par_not_col_strict _ _ _ _ A1) in HPar2; Col.
destruct HPar2 as [_ [_ [[IAC HIAC] _]]].
exists IAC; intros [HIAC1 [HIAC2 HIAC3]].
elim HIAC; clear HIAC; intro HIAC; [apply HIAC1|]; try solve [spliter; split; Col].

*****
HIAC : or (and (Col C1 A1 IAC) (Col C2 A2 IAC))\n (and (Col C1 A2 IAC) (Col C2 A1 IAC))
HIAC3 : not (and (Col A1 C2 IAC) (Col A2 C1 IAC))
HIAC2 : not (and (Col A1 C1 IAC) (Col A2 C2 IAC))
HIAC1 : not (and (Col A1 A2 IAC) (Col C1 C2 IAC))
HNC3 : not (and (Col C1 B1 B2) (Col C2 B1 B2))
HNC2 : not (Col A1 C1 C2)
HNC1 : not (Col A1 B1 B2)
HP2 : Col P C1 C2
IAC : Tpoint
HP1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HP : playfair_ter
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
elim HIAC; clear HIAC; intro HIAC; [apply HIAC2|apply HIAC3]; spliter; split; Col.
-----
Lemma playfair_ter__playfair : playfair_ter -> playfair_s_postulate.
Proof.
intros HP A1 A2 B1 B2 C1 C2 P HPar1 HP1 HPar2 HP2.
elim (col_dec A1 B1 B2); intro HNC1.
elim (col_dec A1 C1 C2); intro HNC2.
assert (H : ~ ~ (Col C1 B1 B2 /\\ Col C2 B1 B2) -> Col C1 B1 B2 /\\ Col C2 B1 B2); [induction (col_dec C1 B1 B2); induction (col_dec C2 B1 B2); intuition| apply H; clear H; intro HNC3; apply (HP A1 A2 B1 B2 C1 C2 P); try solve [assert_diffs; Col]; try (intros [HC1 HC2]; intuition)].

*****
HNC3 : not (and (Col C1 B1 B2) (Col C2 B1 B2))
HNC2 : not (Col A1 C1 C2)
HNC1 : not (Col A1 B1 B2)
HP2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HP1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HP : playfair_ter
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (not (ex (fun I : Tpoint => and (Col I A1 A2) (Col I B1 B2)))) (not (ex (fun I : Tpoint => and (Col I A1 A2) (Col I C1 C2))))
+++++
apply par_symmetry in HPar1; apply par_symmetry in HPar2.
-----
Lemma playfair_ter__playfair : playfair_ter -> playfair_s_postulate.
Proof.
intros HP A1 A2 B1 B2 C1 C2 P HPar1 HP1 HPar2 HP2.
elim (col_dec A1 B1 B2); intro HNC1.
elim (col_dec A1 C1 C2); intro HNC2.
assert (H : ~ ~ (Col C1 B1 B2 /\\ Col C2 B1 B2) -> Col C1 B1 B2 /\\ Col C2 B1 B2); [induction (col_dec C1 B1 B2); induction (col_dec C2 B1 B2); intuition| apply H; clear H; intro HNC3; apply (HP A1 A2 B1 B2 C1 C2 P); try solve [assert_diffs; Col]; try (intros [HC1 HC2]; intuition)].
apply par_symmetry in HPar1; apply par_symmetry in HPar2.

*****
HNC3 : not (and (Col C1 B1 B2) (Col C2 B1 B2))
HNC2 : not (Col A1 C1 C2)
HNC1 : not (Col A1 B1 B2)
HP2 : Col P C1 C2
HPar2 : Par C1 C2 A1 A2
HP1 : Col P B1 B2
HPar1 : Par B1 B2 A1 A2
A1,A2,B1,B2,C1,C2,P : Tpoint
HP : playfair_ter
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (not (ex (fun I : Tpoint => and (Col I A1 A2) (Col I B1 B2)))) (not (ex (fun I : Tpoint => and (Col I A1 A2) (Col I C1 C2))))
+++++
apply (par_not_col_strict _ _ _ _ A1) in HPar1; Col.
-----
Lemma playfair_ter__playfair : playfair_ter -> playfair_s_postulate.
Proof.
intros HP A1 A2 B1 B2 C1 C2 P HPar1 HP1 HPar2 HP2.
elim (col_dec A1 B1 B2); intro HNC1.
elim (col_dec A1 C1 C2); intro HNC2.
assert (H : ~ ~ (Col C1 B1 B2 /\\ Col C2 B1 B2) -> Col C1 B1 B2 /\\ Col C2 B1 B2); [induction (col_dec C1 B1 B2); induction (col_dec C2 B1 B2); intuition| apply H; clear H; intro HNC3; apply (HP A1 A2 B1 B2 C1 C2 P); try solve [assert_diffs; Col]; try (intros [HC1 HC2]; intuition)].
apply par_symmetry in HPar1; apply par_symmetry in HPar2.
apply (par_not_col_strict _ _ _ _ A1) in HPar1; Col.

*****
HNC3 : not (and (Col C1 B1 B2) (Col C2 B1 B2))
HNC2 : not (Col A1 C1 C2)
HNC1 : not (Col A1 B1 B2)
HP2 : Col P C1 C2
HPar2 : Par C1 C2 A1 A2
HP1 : Col P B1 B2
HPar1 : Par_strict B1 B2 A1 A2
A1,A2,B1,B2,C1,C2,P : Tpoint
HP : playfair_ter
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (not (ex (fun I : Tpoint => and (Col I A1 A2) (Col I B1 B2)))) (not (ex (fun I : Tpoint => and (Col I A1 A2) (Col I C1 C2))))
+++++
apply (par_not_col_strict _ _ _ _ A1) in HPar2; Col.
-----
Lemma playfair_ter__playfair : playfair_ter -> playfair_s_postulate.
Proof.
intros HP A1 A2 B1 B2 C1 C2 P HPar1 HP1 HPar2 HP2.
elim (col_dec A1 B1 B2); intro HNC1.
elim (col_dec A1 C1 C2); intro HNC2.
assert (H : ~ ~ (Col C1 B1 B2 /\\ Col C2 B1 B2) -> Col C1 B1 B2 /\\ Col C2 B1 B2); [induction (col_dec C1 B1 B2); induction (col_dec C2 B1 B2); intuition| apply H; clear H; intro HNC3; apply (HP A1 A2 B1 B2 C1 C2 P); try solve [assert_diffs; Col]; try (intros [HC1 HC2]; intuition)].
apply par_symmetry in HPar1; apply par_symmetry in HPar2.
apply (par_not_col_strict _ _ _ _ A1) in HPar1; Col.
apply (par_not_col_strict _ _ _ _ A1) in HPar2; Col.

*****
HNC3 : not (and (Col C1 B1 B2) (Col C2 B1 B2))
HNC2 : not (Col A1 C1 C2)
HNC1 : not (Col A1 B1 B2)
HP2 : Col P C1 C2
HPar2 : Par_strict C1 C2 A1 A2
HP1 : Col P B1 B2
HPar1 : Par_strict B1 B2 A1 A2
A1,A2,B1,B2,C1,C2,P : Tpoint
HP : playfair_ter
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (not (ex (fun I : Tpoint => and (Col I A1 A2) (Col I B1 B2)))) (not (ex (fun I : Tpoint => and (Col I A1 A2) (Col I C1 C2))))
+++++
destruct HPar1 as [_ [_ [_ HI1]]]; destruct HPar2 as [_ [_ [_ HI2]]].
-----
Lemma playfair_ter__playfair : playfair_ter -> playfair_s_postulate.
Proof.
intros HP A1 A2 B1 B2 C1 C2 P HPar1 HP1 HPar2 HP2.
elim (col_dec A1 B1 B2); intro HNC1.
elim (col_dec A1 C1 C2); intro HNC2.
assert (H : ~ ~ (Col C1 B1 B2 /\\ Col C2 B1 B2) -> Col C1 B1 B2 /\\ Col C2 B1 B2); [induction (col_dec C1 B1 B2); induction (col_dec C2 B1 B2); intuition| apply H; clear H; intro HNC3; apply (HP A1 A2 B1 B2 C1 C2 P); try solve [assert_diffs; Col]; try (intros [HC1 HC2]; intuition)].
apply par_symmetry in HPar1; apply par_symmetry in HPar2.
apply (par_not_col_strict _ _ _ _ A1) in HPar1; Col.
apply (par_not_col_strict _ _ _ _ A1) in HPar2; Col.
destruct HPar1 as [_ [_ [_ HI1]]]; destruct HPar2 as [_ [_ [_ HI2]]].

*****
HNC3 : not (and (Col C1 B1 B2) (Col C2 B1 B2))
HNC2 : not (Col A1 C1 C2)
HNC1 : not (Col A1 B1 B2)
HP2 : Col P C1 C2
HI2 : not (ex (fun X : Tpoint => and (Col X C1 C2) (Col X A1 A2)))
HP1 : Col P B1 B2
HI1 : not (ex (fun X : Tpoint => and (Col X B1 B2) (Col X A1 A2)))
A1,A2,B1,B2,C1,C2,P : Tpoint
HP : playfair_ter
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (not (ex (fun I : Tpoint => and (Col I A1 A2) (Col I B1 B2)))) (not (ex (fun I : Tpoint => and (Col I A1 A2) (Col I C1 C2))))
+++++
split; intros [I [HC1 HC2]]; [apply HI1| apply HI2]; exists I; Col.
-----
Lemma playfair_ter__playfair : playfair_ter -> playfair_s_postulate.
Proof.
intros HP A1 A2 B1 B2 C1 C2 P HPar1 HP1 HPar2 HP2.
elim (col_dec A1 B1 B2); intro HNC1.

*****

*****

+++++
Qed.
-----
Lemma not_ex_forall_not_7 :\n  forall (T : Type) (P : T -> T -> T -> T -> T -> T -> T -> Prop),\n  ~(exists x1 : T, exists x2 : T, exists x3 : T,\n    exists x4 : T, exists x5 : T, exists x6 : T,\n    exists x7 :T, P x1 x2 x3 x4 x5 x6 x7) <->\n  forall x1 : T, forall x2 : T, forall x3 : T,\n  forall x4 : T, forall x5 : T, forall x6 : T,\n  forall x7 : T, ~ P x1 x2 x3 x4 x5 x6 x7.
-----
Lemma not_ex_forall_not_7 : forall (T : Type) (P : T -> T -> T -> T -> T -> T -> T -> Prop), ~(exists x1 : T, exists x2 : T, exists x3 : T, exists x4 : T, exists x5 : T, exists x6 : T, exists x7 :T, P x1 x2 x3 x4 x5 x6 x7) <-> forall x1 : T, forall x2 : T, forall x3 : T, forall x4 : T, forall x5 : T, forall x6 : T, forall x7 : T, ~ P x1 x2 x3 x4 x5 x6 x7.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (T : Type) (P : forall (_ : T) (_ : T) (_ : T) (_ : T) (_ : T) (_ : T) (_ : T), Prop), iff (not (ex (fun x1 : T => ex (fun x2 : T => ex (fun x3 : T => ex (fun x4 : T => ex (fun x5 : T => ex (fun x6 : T => ex (fun x7 : T => P x1 x2 x3 x4 x5 x6 x7))))))))) (forall x1 x2 x3 x4 x5 x6 x7 : T, not (P x1 x2 x3 x4 x5 x6 x7))
+++++
Proof.
-----
Lemma not_ex_forall_not_7 : forall (T : Type) (P : T -> T -> T -> T -> T -> T -> T -> Prop), ~(exists x1 : T, exists x2 : T, exists x3 : T, exists x4 : T, exists x5 : T, exists x6 : T, exists x7 :T, P x1 x2 x3 x4 x5 x6 x7) <-> forall x1 : T, forall x2 : T, forall x3 : T, forall x4 : T, forall x5 : T, forall x6 : T, forall x7 : T, ~ P x1 x2 x3 x4 x5 x6 x7.
Proof.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (T : Type) (P : forall (_ : T) (_ : T) (_ : T) (_ : T) (_ : T) (_ : T) (_ : T), Prop), iff (not (ex (fun x1 : T => ex (fun x2 : T => ex (fun x3 : T => ex (fun x4 : T => ex (fun x5 : T => ex (fun x6 : T => ex (fun x7 : T => P x1 x2 x3 x4 x5 x6 x7))))))))) (forall x1 x2 x3 x4 x5 x6 x7 : T, not (P x1 x2 x3 x4 x5 x6 x7))
+++++
intros; split; intro H1; intros; intro H2; [apply H1; exists x1, x2, x3, x4, x5, x6, x7; auto|].
-----
Lemma not_ex_forall_not_7 : forall (T : Type) (P : T -> T -> T -> T -> T -> T -> T -> Prop), ~(exists x1 : T, exists x2 : T, exists x3 : T, exists x4 : T, exists x5 : T, exists x6 : T, exists x7 :T, P x1 x2 x3 x4 x5 x6 x7) <-> forall x1 : T, forall x2 : T, forall x3 : T, forall x4 : T, forall x5 : T, forall x6 : T, forall x7 : T, ~ P x1 x2 x3 x4 x5 x6 x7.
Proof.
intros; split; intro H1; intros; intro H2; [apply H1; exists x1, x2, x3, x4, x5, x6, x7; auto|].

*****
H2 : ex\n (fun x1 : T =>\n ex\n (fun x2 : T =>\n ex\n (fun x3 : T =>\n ex\n (fun x4 : T =>\n ex\n (fun x5 : T =>\n ex\n (fun x6 : T =>\n ex (fun x7 : T => P x1 x2 x3 x4 x5 x6 x7)))))))
H1 : forall x1 x2 x3 x4 x5 x6 x7 : T, not (P x1 x2 x3 x4 x5 x6 x7)
P : forall (_ : T) (_ : T) (_ : T) (_ : T) (_ : T) (_ : T) (_ : T), Prop
T : Type
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
destruct H2 as [x1 [x2 [x3 [x4 [x5 [x6 [x7 H2]]]]]]].
-----
Lemma not_ex_forall_not_7 : forall (T : Type) (P : T -> T -> T -> T -> T -> T -> T -> Prop), ~(exists x1 : T, exists x2 : T, exists x3 : T, exists x4 : T, exists x5 : T, exists x6 : T, exists x7 :T, P x1 x2 x3 x4 x5 x6 x7) <-> forall x1 : T, forall x2 : T, forall x3 : T, forall x4 : T, forall x5 : T, forall x6 : T, forall x7 : T, ~ P x1 x2 x3 x4 x5 x6 x7.
Proof.
intros; split; intro H1; intros; intro H2; [apply H1; exists x1, x2, x3, x4, x5, x6, x7; auto|].
destruct H2 as [x1 [x2 [x3 [x4 [x5 [x6 [x7 H2]]]]]]].

*****
H2 : P x1 x2 x3 x4 x5 x6 x7
x1,x2,x3,x4,x5,x6,x7 : T
H1 : forall x1 x2 x3 x4 x5 x6 x7 : T, not (P x1 x2 x3 x4 x5 x6 x7)
P : forall (_ : T) (_ : T) (_ : T) (_ : T) (_ : T) (_ : T) (_ : T), Prop
T : Type
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply (H1 x1 x2 x3 x4 x5 x6 x7); auto.
-----
Lemma not_ex_forall_not_7 : forall (T : Type) (P : T -> T -> T -> T -> T -> T -> T -> Prop), ~(exists x1 : T, exists x2 : T, exists x3 : T, exists x4 : T, exists x5 : T, exists x6 : T, exists x7 :T, P x1 x2 x3 x4 x5 x6 x7) <-> forall x1 : T, forall x2 : T, forall x3 : T, forall x4 : T, forall x5 : T, forall x6 : T, forall x7 : T, ~ P x1 x2 x3 x4 x5 x6 x7.
Proof.
intros; split; intro H1; intros; intro H2; [apply H1; exists x1, x2, x3, x4, x5, x6, x7; auto|].
destruct H2 as [x1 [x2 [x3 [x4 [x5 [x6 [x7 H2]]]]]]].
apply (H1 x1 x2 x3 x4 x5 x6 x7); auto.

*****

*****

+++++
Qed.
-----
Lemma playfair_quater__playfair :\n  playfair_quater -> playfair_s_postulate.
-----
Lemma playfair_quater__playfair : playfair_quater -> playfair_s_postulate.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : playfair_quater, playfair_s_postulate
+++++
Proof.
-----
Lemma playfair_quater__playfair : playfair_quater -> playfair_s_postulate.
Proof.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : playfair_quater, playfair_s_postulate
+++++
intros HP A1 A2 B1 B2 C1 C2 P HPar1 HP1 HPar2 HP2.
-----
Lemma playfair_quater__playfair : playfair_quater -> playfair_s_postulate.
Proof.
intros HP A1 A2 B1 B2 C1 C2 P HPar1 HP1 HPar2 HP2.

*****
HP2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HP1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HP : playfair_quater
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col C1 B1 B2) (Col C2 B1 B2)
+++++
assert (H : playfair_quater <-> forall A1 A2 B1 B2 C1 C2 P, ~ playfair_quater_qf A1 A2 B1 B2 C1 C2 P) by (apply not_ex_forall_not_7).
-----
Lemma playfair_quater__playfair : playfair_quater -> playfair_s_postulate.
Proof.
intros HP A1 A2 B1 B2 C1 C2 P HPar1 HP1 HPar2 HP2.
assert (H : playfair_quater <-> forall A1 A2 B1 B2 C1 C2 P, ~ playfair_quater_qf A1 A2 B1 B2 C1 C2 P) by (apply not_ex_forall_not_7).

*****
H : iff playfair_quater\n (forall A1 A2 B1 B2 C1 C2 P : Tpoint,\n not (playfair_quater_qf A1 A2 B1 B2 C1 C2 P))
HP2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HP1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HP : playfair_quater
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col C1 B1 B2) (Col C2 B1 B2)
+++++
rewrite H in HP; clear H.
-----
Lemma playfair_quater__playfair : playfair_quater -> playfair_s_postulate.
Proof.
intros HP A1 A2 B1 B2 C1 C2 P HPar1 HP1 HPar2 HP2.
assert (H : playfair_quater <-> forall A1 A2 B1 B2 C1 C2 P, ~ playfair_quater_qf A1 A2 B1 B2 C1 C2 P) by (apply not_ex_forall_not_7).
rewrite H in HP; clear H.

*****
HP2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HP1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HP : forall A1 A2 B1 B2 C1 C2 P : Tpoint,\nnot (playfair_quater_qf A1 A2 B1 B2 C1 C2 P)
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col C1 B1 B2) (Col C2 B1 B2)
+++++
assert (H : Col C1 B1 B2 /\ Col C2 B1 B2 <-> ~ ~ (Col C1 B1 B2 /\ Col C2 B1 B2)) by (induction (col_dec C1 B1 B2); induction (col_dec C2 B1 B2); tauto).
-----
Lemma playfair_quater__playfair : playfair_quater -> playfair_s_postulate.
Proof.
intros HP A1 A2 B1 B2 C1 C2 P HPar1 HP1 HPar2 HP2.
assert (H : playfair_quater <-> forall A1 A2 B1 B2 C1 C2 P, ~ playfair_quater_qf A1 A2 B1 B2 C1 C2 P) by (apply not_ex_forall_not_7).
rewrite H in HP; clear H.
assert (H : Col C1 B1 B2 /\\ Col C2 B1 B2 <-> ~ ~ (Col C1 B1 B2 /\\ Col C2 B1 B2)) by (induction (col_dec C1 B1 B2); induction (col_dec C2 B1 B2); tauto).

*****
H : iff (and (Col C1 B1 B2) (Col C2 B1 B2))\n (not (not (and (Col C1 B1 B2) (Col C2 B1 B2))))
HP2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HP1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HP : forall A1 A2 B1 B2 C1 C2 P : Tpoint,\nnot (playfair_quater_qf A1 A2 B1 B2 C1 C2 P)
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col C1 B1 B2) (Col C2 B1 B2)
+++++
apply H; clear H; intro HNC; apply (HP A1 A2 B1 B2 C1 C2 P).
-----
Lemma playfair_quater__playfair : playfair_quater -> playfair_s_postulate.
Proof.
intros HP A1 A2 B1 B2 C1 C2 P HPar1 HP1 HPar2 HP2.
assert (H : playfair_quater <-> forall A1 A2 B1 B2 C1 C2 P, ~ playfair_quater_qf A1 A2 B1 B2 C1 C2 P) by (apply not_ex_forall_not_7).
rewrite H in HP; clear H.
assert (H : Col C1 B1 B2 /\\ Col C2 B1 B2 <-> ~ ~ (Col C1 B1 B2 /\\ Col C2 B1 B2)) by (induction (col_dec C1 B1 B2); induction (col_dec C2 B1 B2); tauto).
apply H; clear H; intro HNC; apply (HP A1 A2 B1 B2 C1 C2 P).

*****
HNC : not (and (Col C1 B1 B2) (Col C2 B1 B2))
HP2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HP1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HP : forall A1 A2 B1 B2 C1 C2 P : Tpoint,\nnot (playfair_quater_qf A1 A2 B1 B2 C1 C2 P)
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
playfair_quater_qf A1 A2 B1 B2 C1 C2 P
+++++
repeat try (split; [assert_diffs; assumption|]).
-----
Lemma playfair_quater__playfair : playfair_quater -> playfair_s_postulate.
Proof.
intros HP A1 A2 B1 B2 C1 C2 P HPar1 HP1 HPar2 HP2.
assert (H : playfair_quater <-> forall A1 A2 B1 B2 C1 C2 P, ~ playfair_quater_qf A1 A2 B1 B2 C1 C2 P) by (apply not_ex_forall_not_7).
rewrite H in HP; clear H.
assert (H : Col C1 B1 B2 /\\ Col C2 B1 B2 <-> ~ ~ (Col C1 B1 B2 /\\ Col C2 B1 B2)) by (induction (col_dec C1 B1 B2); induction (col_dec C2 B1 B2); tauto).
apply H; clear H; intro HNC; apply (HP A1 A2 B1 B2 C1 C2 P).
repeat try (split; [assert_diffs; assumption|]).

*****
HNC : not (and (Col C1 B1 B2) (Col C2 B1 B2))
HP2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HP1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HP : forall A1 A2 B1 B2 C1 C2 P : Tpoint,\nnot (playfair_quater_qf A1 A2 B1 B2 C1 C2 P)
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (not (and (Col A1 B1 B2) (Col A2 B1 B2))) (and (not (and (Col A1 C1 C2) (Col A2 C1 C2))) (and (not (and (Col C1 B1 B2) (Col C2 B1 B2))) (and (ex (fun I : Tpoint => not (and (not (and (Col A1 A2 I) (Col B1 B2 I))) (and (not (and (Col A1 B1 I) (Col A2 B2 I))) (not (and (Col A1 B2 I) (Col A2 B1 I))))))) (and (ex (fun I : Tpoint => not (and (not (and (Col A1 A2 I) (Col C1 C2 I))) (and (not (and (Col A1 C1 I) (Col A2 C2 I))) (not (and (Col A1 C2 I) (Col A2 C1 I))))))) (and (not (ex (fun I : Tpoint => and (Col I A1 A2) (Col I B1 B2)))) (not (ex (fun I : Tpoint => and (Col I A1 A2) (Col I C1 C2)))))))))
+++++
assert (HNC1 : ~ Col A1 B1 B2).
-----
Lemma playfair_quater__playfair : playfair_quater -> playfair_s_postulate.
Proof.
intros HP A1 A2 B1 B2 C1 C2 P HPar1 HP1 HPar2 HP2.
assert (H : playfair_quater <-> forall A1 A2 B1 B2 C1 C2 P, ~ playfair_quater_qf A1 A2 B1 B2 C1 C2 P) by (apply not_ex_forall_not_7).
rewrite H in HP; clear H.
assert (H : Col C1 B1 B2 /\\ Col C2 B1 B2 <-> ~ ~ (Col C1 B1 B2 /\\ Col C2 B1 B2)) by (induction (col_dec C1 B1 B2); induction (col_dec C2 B1 B2); tauto).
apply H; clear H; intro HNC; apply (HP A1 A2 B1 B2 C1 C2 P).
repeat try (split; [assert_diffs; assumption|]).
assert (HNC1 : ~ Col A1 B1 B2).

*****
HNC : not (and (Col C1 B1 B2) (Col C2 B1 B2))
HP2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HP1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HP : forall A1 A2 B1 B2 C1 C2 P : Tpoint,\nnot (playfair_quater_qf A1 A2 B1 B2 C1 C2 P)
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col A1 B1 B2)
+++++
intro.
-----
Lemma playfair_quater__playfair : playfair_quater -> playfair_s_postulate.
Proof.
intros HP A1 A2 B1 B2 C1 C2 P HPar1 HP1 HPar2 HP2.
assert (H : playfair_quater <-> forall A1 A2 B1 B2 C1 C2 P, ~ playfair_quater_qf A1 A2 B1 B2 C1 C2 P) by (apply not_ex_forall_not_7).
rewrite H in HP; clear H.
assert (H : Col C1 B1 B2 /\\ Col C2 B1 B2 <-> ~ ~ (Col C1 B1 B2 /\\ Col C2 B1 B2)) by (induction (col_dec C1 B1 B2); induction (col_dec C2 B1 B2); tauto).
apply H; clear H; intro HNC; apply (HP A1 A2 B1 B2 C1 C2 P).
repeat try (split; [assert_diffs; assumption|]).
assert (HNC1 : ~ Col A1 B1 B2).
intro.

*****
H : Col A1 B1 B2
HNC : not (and (Col C1 B1 B2) (Col C2 B1 B2))
HP2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HP1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HP : forall A1 A2 B1 B2 C1 C2 P : Tpoint,\nnot (playfair_quater_qf A1 A2 B1 B2 C1 C2 P)
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert (HA : A1 <> A2) by (assert_diffs; auto).
-----
Lemma playfair_quater__playfair : playfair_quater -> playfair_s_postulate.
Proof.
intros HP A1 A2 B1 B2 C1 C2 P HPar1 HP1 HPar2 HP2.
assert (H : playfair_quater <-> forall A1 A2 B1 B2 C1 C2 P, ~ playfair_quater_qf A1 A2 B1 B2 C1 C2 P) by (apply not_ex_forall_not_7).
rewrite H in HP; clear H.
assert (H : Col C1 B1 B2 /\\ Col C2 B1 B2 <-> ~ ~ (Col C1 B1 B2 /\\ Col C2 B1 B2)) by (induction (col_dec C1 B1 B2); induction (col_dec C2 B1 B2); tauto).
apply H; clear H; intro HNC; apply (HP A1 A2 B1 B2 C1 C2 P).
repeat try (split; [assert_diffs; assumption|]).
assert (HNC1 : ~ Col A1 B1 B2).
intro.
assert (HA : A1 <> A2) by (assert_diffs; auto).

*****
HA : not (eq A1 A2)
H : Col A1 B1 B2
HNC : not (and (Col C1 B1 B2) (Col C2 B1 B2))
HP2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HP1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HP : forall A1 A2 B1 B2 C1 C2 P : Tpoint,\nnot (playfair_quater_qf A1 A2 B1 B2 C1 C2 P)
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert (HB : B1 <> B2) by (assert_diffs; auto).
-----
Lemma playfair_quater__playfair : playfair_quater -> playfair_s_postulate.
Proof.
intros HP A1 A2 B1 B2 C1 C2 P HPar1 HP1 HPar2 HP2.
assert (H : playfair_quater <-> forall A1 A2 B1 B2 C1 C2 P, ~ playfair_quater_qf A1 A2 B1 B2 C1 C2 P) by (apply not_ex_forall_not_7).
rewrite H in HP; clear H.
assert (H : Col C1 B1 B2 /\\ Col C2 B1 B2 <-> ~ ~ (Col C1 B1 B2 /\\ Col C2 B1 B2)) by (induction (col_dec C1 B1 B2); induction (col_dec C2 B1 B2); tauto).
apply H; clear H; intro HNC; apply (HP A1 A2 B1 B2 C1 C2 P).
repeat try (split; [assert_diffs; assumption|]).
assert (HNC1 : ~ Col A1 B1 B2).
intro.
assert (HA : A1 <> A2) by (assert_diffs; auto).
assert (HB : B1 <> B2) by (assert_diffs; auto).

*****
HB : not (eq B1 B2)
HA : not (eq A1 A2)
H : Col A1 B1 B2
HNC : not (and (Col C1 B1 B2) (Col C2 B1 B2))
HP2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HP1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HP : forall A1 A2 B1 B2 C1 C2 P : Tpoint,\nnot (playfair_quater_qf A1 A2 B1 B2 C1 C2 P)
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert (HC : C1 <> C2) by (assert_diffs; auto).
-----
Lemma playfair_quater__playfair : playfair_quater -> playfair_s_postulate.
Proof.
intros HP A1 A2 B1 B2 C1 C2 P HPar1 HP1 HPar2 HP2.
assert (H : playfair_quater <-> forall A1 A2 B1 B2 C1 C2 P, ~ playfair_quater_qf A1 A2 B1 B2 C1 C2 P) by (apply not_ex_forall_not_7).
rewrite H in HP; clear H.
assert (H : Col C1 B1 B2 /\\ Col C2 B1 B2 <-> ~ ~ (Col C1 B1 B2 /\\ Col C2 B1 B2)) by (induction (col_dec C1 B1 B2); induction (col_dec C2 B1 B2); tauto).
apply H; clear H; intro HNC; apply (HP A1 A2 B1 B2 C1 C2 P).
repeat try (split; [assert_diffs; assumption|]).
assert (HNC1 : ~ Col A1 B1 B2).
intro.
assert (HA : A1 <> A2) by (assert_diffs; auto).
assert (HB : B1 <> B2) by (assert_diffs; auto).
assert (HC : C1 <> C2) by (assert_diffs; auto).

*****
HC : not (eq C1 C2)
HB : not (eq B1 B2)
HA : not (eq A1 A2)
H : Col A1 B1 B2
HNC : not (and (Col C1 B1 B2) (Col C2 B1 B2))
HP2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HP1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HP : forall A1 A2 B1 B2 C1 C2 P : Tpoint,\nnot (playfair_quater_qf A1 A2 B1 B2 C1 C2 P)
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply (not_strict_par _ _ _ _ A1) in HPar1; Col; spliter.
-----
Lemma playfair_quater__playfair : playfair_quater -> playfair_s_postulate.
Proof.
intros HP A1 A2 B1 B2 C1 C2 P HPar1 HP1 HPar2 HP2.
assert (H : playfair_quater <-> forall A1 A2 B1 B2 C1 C2 P, ~ playfair_quater_qf A1 A2 B1 B2 C1 C2 P) by (apply not_ex_forall_not_7).
rewrite H in HP; clear H.
assert (H : Col C1 B1 B2 /\\ Col C2 B1 B2 <-> ~ ~ (Col C1 B1 B2 /\\ Col C2 B1 B2)) by (induction (col_dec C1 B1 B2); induction (col_dec C2 B1 B2); tauto).
apply H; clear H; intro HNC; apply (HP A1 A2 B1 B2 C1 C2 P).
repeat try (split; [assert_diffs; assumption|]).
assert (HNC1 : ~ Col A1 B1 B2).
intro.
assert (HA : A1 <> A2) by (assert_diffs; auto).
assert (HB : B1 <> B2) by (assert_diffs; auto).
assert (HC : C1 <> C2) by (assert_diffs; auto).
apply (not_strict_par _ _ _ _ A1) in HPar1; Col; spliter.

*****
HC : not (eq C1 C2)
HB : not (eq B1 B2)
HA : not (eq A1 A2)
H : Col A1 B1 B2
HNC : not (and (Col C1 B1 B2) (Col C2 B1 B2))
HP2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HP1 : Col P B1 B2
H1 : Col A1 A2 B2
H0 : Col A1 A2 B1
A1,A2,B1,B2,C1,C2,P : Tpoint
HP : forall A1 A2 B1 B2 C1 C2 P : Tpoint,\nnot (playfair_quater_qf A1 A2 B1 B2 C1 C2 P)
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply (not_strict_par _ _ _ _ P) in HPar2; spliter; try ColR.
-----
Lemma playfair_quater__playfair : playfair_quater -> playfair_s_postulate.
Proof.
intros HP A1 A2 B1 B2 C1 C2 P HPar1 HP1 HPar2 HP2.
assert (H : playfair_quater <-> forall A1 A2 B1 B2 C1 C2 P, ~ playfair_quater_qf A1 A2 B1 B2 C1 C2 P) by (apply not_ex_forall_not_7).
rewrite H in HP; clear H.
assert (H : Col C1 B1 B2 /\\ Col C2 B1 B2 <-> ~ ~ (Col C1 B1 B2 /\\ Col C2 B1 B2)) by (induction (col_dec C1 B1 B2); induction (col_dec C2 B1 B2); tauto).
apply H; clear H; intro HNC; apply (HP A1 A2 B1 B2 C1 C2 P).
repeat try (split; [assert_diffs; assumption|]).
assert (HNC1 : ~ Col A1 B1 B2).
intro.
assert (HA : A1 <> A2) by (assert_diffs; auto).
assert (HB : B1 <> B2) by (assert_diffs; auto).
assert (HC : C1 <> C2) by (assert_diffs; auto).
apply (not_strict_par _ _ _ _ A1) in HPar1; Col; spliter.
apply (not_strict_par _ _ _ _ P) in HPar2; spliter; try ColR.

*****
HC : not (eq C1 C2)
HB : not (eq B1 B2)
HA : not (eq A1 A2)
H : Col A1 B1 B2
HNC : not (and (Col C1 B1 B2) (Col C2 B1 B2))
HP2 : Col P C1 C2
H3 : Col A1 A2 C2
H2 : Col A1 A2 C1
HP1 : Col P B1 B2
H1 : Col A1 A2 B2
H0 : Col A1 A2 B1
A1,A2,B1,B2,C1,C2,P : Tpoint
HP : forall A1 A2 B1 B2 C1 C2 P : Tpoint,\nnot (playfair_quater_qf A1 A2 B1 B2 C1 C2 P)
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply HNC; split; ColR.
-----
Lemma playfair_quater__playfair : playfair_quater -> playfair_s_postulate.
Proof.
intros HP A1 A2 B1 B2 C1 C2 P HPar1 HP1 HPar2 HP2.
assert (H : playfair_quater <-> forall A1 A2 B1 B2 C1 C2 P, ~ playfair_quater_qf A1 A2 B1 B2 C1 C2 P) by (apply not_ex_forall_not_7).
rewrite H in HP; clear H.
assert (H : Col C1 B1 B2 /\\ Col C2 B1 B2 <-> ~ ~ (Col C1 B1 B2 /\\ Col C2 B1 B2)) by (induction (col_dec C1 B1 B2); induction (col_dec C2 B1 B2); tauto).
apply H; clear H; intro HNC; apply (HP A1 A2 B1 B2 C1 C2 P).
repeat try (split; [assert_diffs; assumption|]).
assert (HNC1 : ~ Col A1 B1 B2).

*****
HNC1 : not (Col A1 B1 B2)
HNC : not (and (Col C1 B1 B2) (Col C2 B1 B2))
HP2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HP1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HP : forall A1 A2 B1 B2 C1 C2 P : Tpoint,\nnot (playfair_quater_qf A1 A2 B1 B2 C1 C2 P)
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (not (and (Col A1 B1 B2) (Col A2 B1 B2))) (and (not (and (Col A1 C1 C2) (Col A2 C1 C2))) (and (not (and (Col C1 B1 B2) (Col C2 B1 B2))) (and (ex (fun I : Tpoint => not (and (not (and (Col A1 A2 I) (Col B1 B2 I))) (and (not (and (Col A1 B1 I) (Col A2 B2 I))) (not (and (Col A1 B2 I) (Col A2 B1 I))))))) (and (ex (fun I : Tpoint => not (and (not (and (Col A1 A2 I) (Col C1 C2 I))) (and (not (and (Col A1 C1 I) (Col A2 C2 I))) (not (and (Col A1 C2 I) (Col A2 C1 I))))))) (and (not (ex (fun I : Tpoint => and (Col I A1 A2) (Col I B1 B2)))) (not (ex (fun I : Tpoint => and (Col I A1 A2) (Col I C1 C2)))))))))
+++++
assert (HNC2 : ~ Col A2 B1 B2).
-----
Lemma playfair_quater__playfair : playfair_quater -> playfair_s_postulate.
Proof.
intros HP A1 A2 B1 B2 C1 C2 P HPar1 HP1 HPar2 HP2.
assert (H : playfair_quater <-> forall A1 A2 B1 B2 C1 C2 P, ~ playfair_quater_qf A1 A2 B1 B2 C1 C2 P) by (apply not_ex_forall_not_7).
rewrite H in HP; clear H.
assert (H : Col C1 B1 B2 /\\ Col C2 B1 B2 <-> ~ ~ (Col C1 B1 B2 /\\ Col C2 B1 B2)) by (induction (col_dec C1 B1 B2); induction (col_dec C2 B1 B2); tauto).
apply H; clear H; intro HNC; apply (HP A1 A2 B1 B2 C1 C2 P).
repeat try (split; [assert_diffs; assumption|]).
assert (HNC1 : ~ Col A1 B1 B2).
assert (HNC2 : ~ Col A2 B1 B2).

*****
HNC1 : not (Col A1 B1 B2)
HNC : not (and (Col C1 B1 B2) (Col C2 B1 B2))
HP2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HP1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HP : forall A1 A2 B1 B2 C1 C2 P : Tpoint,\nnot (playfair_quater_qf A1 A2 B1 B2 C1 C2 P)
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col A2 B1 B2)
+++++
intro.
-----
Lemma playfair_quater__playfair : playfair_quater -> playfair_s_postulate.
Proof.
intros HP A1 A2 B1 B2 C1 C2 P HPar1 HP1 HPar2 HP2.
assert (H : playfair_quater <-> forall A1 A2 B1 B2 C1 C2 P, ~ playfair_quater_qf A1 A2 B1 B2 C1 C2 P) by (apply not_ex_forall_not_7).
rewrite H in HP; clear H.
assert (H : Col C1 B1 B2 /\\ Col C2 B1 B2 <-> ~ ~ (Col C1 B1 B2 /\\ Col C2 B1 B2)) by (induction (col_dec C1 B1 B2); induction (col_dec C2 B1 B2); tauto).
apply H; clear H; intro HNC; apply (HP A1 A2 B1 B2 C1 C2 P).
repeat try (split; [assert_diffs; assumption|]).
assert (HNC1 : ~ Col A1 B1 B2).
assert (HNC2 : ~ Col A2 B1 B2).
intro.

*****
H : Col A2 B1 B2
HNC1 : not (Col A1 B1 B2)
HNC : not (and (Col C1 B1 B2) (Col C2 B1 B2))
HP2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HP1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HP : forall A1 A2 B1 B2 C1 C2 P : Tpoint,\nnot (playfair_quater_qf A1 A2 B1 B2 C1 C2 P)
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert (HA : A1 <> A2) by (assert_diffs; auto).
-----
Lemma playfair_quater__playfair : playfair_quater -> playfair_s_postulate.
Proof.
intros HP A1 A2 B1 B2 C1 C2 P HPar1 HP1 HPar2 HP2.
assert (H : playfair_quater <-> forall A1 A2 B1 B2 C1 C2 P, ~ playfair_quater_qf A1 A2 B1 B2 C1 C2 P) by (apply not_ex_forall_not_7).
rewrite H in HP; clear H.
assert (H : Col C1 B1 B2 /\\ Col C2 B1 B2 <-> ~ ~ (Col C1 B1 B2 /\\ Col C2 B1 B2)) by (induction (col_dec C1 B1 B2); induction (col_dec C2 B1 B2); tauto).
apply H; clear H; intro HNC; apply (HP A1 A2 B1 B2 C1 C2 P).
repeat try (split; [assert_diffs; assumption|]).
assert (HNC1 : ~ Col A1 B1 B2).
assert (HNC2 : ~ Col A2 B1 B2).
intro.
assert (HA : A1 <> A2) by (assert_diffs; auto).

*****
HA : not (eq A1 A2)
H : Col A2 B1 B2
HNC1 : not (Col A1 B1 B2)
HNC : not (and (Col C1 B1 B2) (Col C2 B1 B2))
HP2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HP1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HP : forall A1 A2 B1 B2 C1 C2 P : Tpoint,\nnot (playfair_quater_qf A1 A2 B1 B2 C1 C2 P)
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert (HB : B1 <> B2) by (assert_diffs; auto).
-----
Lemma playfair_quater__playfair : playfair_quater -> playfair_s_postulate.
Proof.
intros HP A1 A2 B1 B2 C1 C2 P HPar1 HP1 HPar2 HP2.
assert (H : playfair_quater <-> forall A1 A2 B1 B2 C1 C2 P, ~ playfair_quater_qf A1 A2 B1 B2 C1 C2 P) by (apply not_ex_forall_not_7).
rewrite H in HP; clear H.
assert (H : Col C1 B1 B2 /\\ Col C2 B1 B2 <-> ~ ~ (Col C1 B1 B2 /\\ Col C2 B1 B2)) by (induction (col_dec C1 B1 B2); induction (col_dec C2 B1 B2); tauto).
apply H; clear H; intro HNC; apply (HP A1 A2 B1 B2 C1 C2 P).
repeat try (split; [assert_diffs; assumption|]).
assert (HNC1 : ~ Col A1 B1 B2).
assert (HNC2 : ~ Col A2 B1 B2).
intro.
assert (HA : A1 <> A2) by (assert_diffs; auto).
assert (HB : B1 <> B2) by (assert_diffs; auto).

*****
HB : not (eq B1 B2)
HA : not (eq A1 A2)
H : Col A2 B1 B2
HNC1 : not (Col A1 B1 B2)
HNC : not (and (Col C1 B1 B2) (Col C2 B1 B2))
HP2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HP1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HP : forall A1 A2 B1 B2 C1 C2 P : Tpoint,\nnot (playfair_quater_qf A1 A2 B1 B2 C1 C2 P)
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert (HC : C1 <> C2) by (assert_diffs; auto).
-----
Lemma playfair_quater__playfair : playfair_quater -> playfair_s_postulate.
Proof.
intros HP A1 A2 B1 B2 C1 C2 P HPar1 HP1 HPar2 HP2.
assert (H : playfair_quater <-> forall A1 A2 B1 B2 C1 C2 P, ~ playfair_quater_qf A1 A2 B1 B2 C1 C2 P) by (apply not_ex_forall_not_7).
rewrite H in HP; clear H.
assert (H : Col C1 B1 B2 /\\ Col C2 B1 B2 <-> ~ ~ (Col C1 B1 B2 /\\ Col C2 B1 B2)) by (induction (col_dec C1 B1 B2); induction (col_dec C2 B1 B2); tauto).
apply H; clear H; intro HNC; apply (HP A1 A2 B1 B2 C1 C2 P).
repeat try (split; [assert_diffs; assumption|]).
assert (HNC1 : ~ Col A1 B1 B2).
assert (HNC2 : ~ Col A2 B1 B2).
intro.
assert (HA : A1 <> A2) by (assert_diffs; auto).
assert (HB : B1 <> B2) by (assert_diffs; auto).
assert (HC : C1 <> C2) by (assert_diffs; auto).

*****
HC : not (eq C1 C2)
HB : not (eq B1 B2)
HA : not (eq A1 A2)
H : Col A2 B1 B2
HNC1 : not (Col A1 B1 B2)
HNC : not (and (Col C1 B1 B2) (Col C2 B1 B2))
HP2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HP1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HP : forall A1 A2 B1 B2 C1 C2 P : Tpoint,\nnot (playfair_quater_qf A1 A2 B1 B2 C1 C2 P)
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply (not_strict_par _ _ _ _ A2) in HPar1; Col; spliter.
-----
Lemma playfair_quater__playfair : playfair_quater -> playfair_s_postulate.
Proof.
intros HP A1 A2 B1 B2 C1 C2 P HPar1 HP1 HPar2 HP2.
assert (H : playfair_quater <-> forall A1 A2 B1 B2 C1 C2 P, ~ playfair_quater_qf A1 A2 B1 B2 C1 C2 P) by (apply not_ex_forall_not_7).
rewrite H in HP; clear H.
assert (H : Col C1 B1 B2 /\\ Col C2 B1 B2 <-> ~ ~ (Col C1 B1 B2 /\\ Col C2 B1 B2)) by (induction (col_dec C1 B1 B2); induction (col_dec C2 B1 B2); tauto).
apply H; clear H; intro HNC; apply (HP A1 A2 B1 B2 C1 C2 P).
repeat try (split; [assert_diffs; assumption|]).
assert (HNC1 : ~ Col A1 B1 B2).
assert (HNC2 : ~ Col A2 B1 B2).
intro.
assert (HA : A1 <> A2) by (assert_diffs; auto).
assert (HB : B1 <> B2) by (assert_diffs; auto).
assert (HC : C1 <> C2) by (assert_diffs; auto).
apply (not_strict_par _ _ _ _ A2) in HPar1; Col; spliter.

*****
HC : not (eq C1 C2)
HB : not (eq B1 B2)
HA : not (eq A1 A2)
H : Col A2 B1 B2
HNC1 : not (Col A1 B1 B2)
HNC : not (and (Col C1 B1 B2) (Col C2 B1 B2))
HP2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HP1 : Col P B1 B2
H1 : Col A1 A2 B2
H0 : Col A1 A2 B1
A1,A2,B1,B2,C1,C2,P : Tpoint
HP : forall A1 A2 B1 B2 C1 C2 P : Tpoint,\nnot (playfair_quater_qf A1 A2 B1 B2 C1 C2 P)
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply (not_strict_par _ _ _ _ P) in HPar2; spliter; try ColR.
-----
Lemma playfair_quater__playfair : playfair_quater -> playfair_s_postulate.
Proof.
intros HP A1 A2 B1 B2 C1 C2 P HPar1 HP1 HPar2 HP2.
assert (H : playfair_quater <-> forall A1 A2 B1 B2 C1 C2 P, ~ playfair_quater_qf A1 A2 B1 B2 C1 C2 P) by (apply not_ex_forall_not_7).
rewrite H in HP; clear H.
assert (H : Col C1 B1 B2 /\\ Col C2 B1 B2 <-> ~ ~ (Col C1 B1 B2 /\\ Col C2 B1 B2)) by (induction (col_dec C1 B1 B2); induction (col_dec C2 B1 B2); tauto).
apply H; clear H; intro HNC; apply (HP A1 A2 B1 B2 C1 C2 P).
repeat try (split; [assert_diffs; assumption|]).
assert (HNC1 : ~ Col A1 B1 B2).
assert (HNC2 : ~ Col A2 B1 B2).
intro.
assert (HA : A1 <> A2) by (assert_diffs; auto).
assert (HB : B1 <> B2) by (assert_diffs; auto).
assert (HC : C1 <> C2) by (assert_diffs; auto).
apply (not_strict_par _ _ _ _ A2) in HPar1; Col; spliter.
apply (not_strict_par _ _ _ _ P) in HPar2; spliter; try ColR.

*****
HC : not (eq C1 C2)
HB : not (eq B1 B2)
HA : not (eq A1 A2)
H : Col A2 B1 B2
HNC1 : not (Col A1 B1 B2)
HNC : not (and (Col C1 B1 B2) (Col C2 B1 B2))
HP2 : Col P C1 C2
H3 : Col A1 A2 C2
H2 : Col A1 A2 C1
HP1 : Col P B1 B2
H1 : Col A1 A2 B2
H0 : Col A1 A2 B1
A1,A2,B1,B2,C1,C2,P : Tpoint
HP : forall A1 A2 B1 B2 C1 C2 P : Tpoint,\nnot (playfair_quater_qf A1 A2 B1 B2 C1 C2 P)
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply HNC; split; ColR.
-----
Lemma playfair_quater__playfair : playfair_quater -> playfair_s_postulate.
Proof.
intros HP A1 A2 B1 B2 C1 C2 P HPar1 HP1 HPar2 HP2.
assert (H : playfair_quater <-> forall A1 A2 B1 B2 C1 C2 P, ~ playfair_quater_qf A1 A2 B1 B2 C1 C2 P) by (apply not_ex_forall_not_7).
rewrite H in HP; clear H.
assert (H : Col C1 B1 B2 /\\ Col C2 B1 B2 <-> ~ ~ (Col C1 B1 B2 /\\ Col C2 B1 B2)) by (induction (col_dec C1 B1 B2); induction (col_dec C2 B1 B2); tauto).
apply H; clear H; intro HNC; apply (HP A1 A2 B1 B2 C1 C2 P).
repeat try (split; [assert_diffs; assumption|]).
assert (HNC1 : ~ Col A1 B1 B2).
assert (HNC2 : ~ Col A2 B1 B2).

*****
HNC2 : not (Col A2 B1 B2)
HNC1 : not (Col A1 B1 B2)
HNC : not (and (Col C1 B1 B2) (Col C2 B1 B2))
HP2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HP1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HP : forall A1 A2 B1 B2 C1 C2 P : Tpoint,\nnot (playfair_quater_qf A1 A2 B1 B2 C1 C2 P)
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (not (and (Col A1 B1 B2) (Col A2 B1 B2))) (and (not (and (Col A1 C1 C2) (Col A2 C1 C2))) (and (not (and (Col C1 B1 B2) (Col C2 B1 B2))) (and (ex (fun I : Tpoint => not (and (not (and (Col A1 A2 I) (Col B1 B2 I))) (and (not (and (Col A1 B1 I) (Col A2 B2 I))) (not (and (Col A1 B2 I) (Col A2 B1 I))))))) (and (ex (fun I : Tpoint => not (and (not (and (Col A1 A2 I) (Col C1 C2 I))) (and (not (and (Col A1 C1 I) (Col A2 C2 I))) (not (and (Col A1 C2 I) (Col A2 C1 I))))))) (and (not (ex (fun I : Tpoint => and (Col I A1 A2) (Col I B1 B2)))) (not (ex (fun I : Tpoint => and (Col I A1 A2) (Col I C1 C2)))))))))
+++++
assert (HNC3 : ~ Col A1 C1 C2).
-----
Lemma playfair_quater__playfair : playfair_quater -> playfair_s_postulate.
Proof.
intros HP A1 A2 B1 B2 C1 C2 P HPar1 HP1 HPar2 HP2.
assert (H : playfair_quater <-> forall A1 A2 B1 B2 C1 C2 P, ~ playfair_quater_qf A1 A2 B1 B2 C1 C2 P) by (apply not_ex_forall_not_7).
rewrite H in HP; clear H.
assert (H : Col C1 B1 B2 /\\ Col C2 B1 B2 <-> ~ ~ (Col C1 B1 B2 /\\ Col C2 B1 B2)) by (induction (col_dec C1 B1 B2); induction (col_dec C2 B1 B2); tauto).
apply H; clear H; intro HNC; apply (HP A1 A2 B1 B2 C1 C2 P).
repeat try (split; [assert_diffs; assumption|]).
assert (HNC1 : ~ Col A1 B1 B2).
assert (HNC2 : ~ Col A2 B1 B2).
assert (HNC3 : ~ Col A1 C1 C2).

*****
HNC2 : not (Col A2 B1 B2)
HNC1 : not (Col A1 B1 B2)
HNC : not (and (Col C1 B1 B2) (Col C2 B1 B2))
HP2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HP1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HP : forall A1 A2 B1 B2 C1 C2 P : Tpoint,\nnot (playfair_quater_qf A1 A2 B1 B2 C1 C2 P)
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col A1 C1 C2)
+++++
intro.
-----
Lemma playfair_quater__playfair : playfair_quater -> playfair_s_postulate.
Proof.
intros HP A1 A2 B1 B2 C1 C2 P HPar1 HP1 HPar2 HP2.
assert (H : playfair_quater <-> forall A1 A2 B1 B2 C1 C2 P, ~ playfair_quater_qf A1 A2 B1 B2 C1 C2 P) by (apply not_ex_forall_not_7).
rewrite H in HP; clear H.
assert (H : Col C1 B1 B2 /\\ Col C2 B1 B2 <-> ~ ~ (Col C1 B1 B2 /\\ Col C2 B1 B2)) by (induction (col_dec C1 B1 B2); induction (col_dec C2 B1 B2); tauto).
apply H; clear H; intro HNC; apply (HP A1 A2 B1 B2 C1 C2 P).
repeat try (split; [assert_diffs; assumption|]).
assert (HNC1 : ~ Col A1 B1 B2).
assert (HNC2 : ~ Col A2 B1 B2).
assert (HNC3 : ~ Col A1 C1 C2).
intro.

*****
H : Col A1 C1 C2
HNC2 : not (Col A2 B1 B2)
HNC1 : not (Col A1 B1 B2)
HNC : not (and (Col C1 B1 B2) (Col C2 B1 B2))
HP2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HP1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HP : forall A1 A2 B1 B2 C1 C2 P : Tpoint,\nnot (playfair_quater_qf A1 A2 B1 B2 C1 C2 P)
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert (HA : A1 <> A2) by (assert_diffs; auto).
-----
Lemma playfair_quater__playfair : playfair_quater -> playfair_s_postulate.
Proof.
intros HP A1 A2 B1 B2 C1 C2 P HPar1 HP1 HPar2 HP2.
assert (H : playfair_quater <-> forall A1 A2 B1 B2 C1 C2 P, ~ playfair_quater_qf A1 A2 B1 B2 C1 C2 P) by (apply not_ex_forall_not_7).
rewrite H in HP; clear H.
assert (H : Col C1 B1 B2 /\\ Col C2 B1 B2 <-> ~ ~ (Col C1 B1 B2 /\\ Col C2 B1 B2)) by (induction (col_dec C1 B1 B2); induction (col_dec C2 B1 B2); tauto).
apply H; clear H; intro HNC; apply (HP A1 A2 B1 B2 C1 C2 P).
repeat try (split; [assert_diffs; assumption|]).
assert (HNC1 : ~ Col A1 B1 B2).
assert (HNC2 : ~ Col A2 B1 B2).
assert (HNC3 : ~ Col A1 C1 C2).
intro.
assert (HA : A1 <> A2) by (assert_diffs; auto).

*****
HA : not (eq A1 A2)
H : Col A1 C1 C2
HNC2 : not (Col A2 B1 B2)
HNC1 : not (Col A1 B1 B2)
HNC : not (and (Col C1 B1 B2) (Col C2 B1 B2))
HP2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HP1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HP : forall A1 A2 B1 B2 C1 C2 P : Tpoint,\nnot (playfair_quater_qf A1 A2 B1 B2 C1 C2 P)
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert (HB : B1 <> B2) by (assert_diffs; auto).
-----
Lemma playfair_quater__playfair : playfair_quater -> playfair_s_postulate.
Proof.
intros HP A1 A2 B1 B2 C1 C2 P HPar1 HP1 HPar2 HP2.
assert (H : playfair_quater <-> forall A1 A2 B1 B2 C1 C2 P, ~ playfair_quater_qf A1 A2 B1 B2 C1 C2 P) by (apply not_ex_forall_not_7).
rewrite H in HP; clear H.
assert (H : Col C1 B1 B2 /\\ Col C2 B1 B2 <-> ~ ~ (Col C1 B1 B2 /\\ Col C2 B1 B2)) by (induction (col_dec C1 B1 B2); induction (col_dec C2 B1 B2); tauto).
apply H; clear H; intro HNC; apply (HP A1 A2 B1 B2 C1 C2 P).
repeat try (split; [assert_diffs; assumption|]).
assert (HNC1 : ~ Col A1 B1 B2).
assert (HNC2 : ~ Col A2 B1 B2).
assert (HNC3 : ~ Col A1 C1 C2).
intro.
assert (HA : A1 <> A2) by (assert_diffs; auto).
assert (HB : B1 <> B2) by (assert_diffs; auto).

*****
HB : not (eq B1 B2)
HA : not (eq A1 A2)
H : Col A1 C1 C2
HNC2 : not (Col A2 B1 B2)
HNC1 : not (Col A1 B1 B2)
HNC : not (and (Col C1 B1 B2) (Col C2 B1 B2))
HP2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HP1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HP : forall A1 A2 B1 B2 C1 C2 P : Tpoint,\nnot (playfair_quater_qf A1 A2 B1 B2 C1 C2 P)
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert (HC : C1 <> C2) by (assert_diffs; auto).
-----
Lemma playfair_quater__playfair : playfair_quater -> playfair_s_postulate.
Proof.
intros HP A1 A2 B1 B2 C1 C2 P HPar1 HP1 HPar2 HP2.
assert (H : playfair_quater <-> forall A1 A2 B1 B2 C1 C2 P, ~ playfair_quater_qf A1 A2 B1 B2 C1 C2 P) by (apply not_ex_forall_not_7).
rewrite H in HP; clear H.
assert (H : Col C1 B1 B2 /\\ Col C2 B1 B2 <-> ~ ~ (Col C1 B1 B2 /\\ Col C2 B1 B2)) by (induction (col_dec C1 B1 B2); induction (col_dec C2 B1 B2); tauto).
apply H; clear H; intro HNC; apply (HP A1 A2 B1 B2 C1 C2 P).
repeat try (split; [assert_diffs; assumption|]).
assert (HNC1 : ~ Col A1 B1 B2).
assert (HNC2 : ~ Col A2 B1 B2).
assert (HNC3 : ~ Col A1 C1 C2).
intro.
assert (HA : A1 <> A2) by (assert_diffs; auto).
assert (HB : B1 <> B2) by (assert_diffs; auto).
assert (HC : C1 <> C2) by (assert_diffs; auto).

*****
HC : not (eq C1 C2)
HB : not (eq B1 B2)
HA : not (eq A1 A2)
H : Col A1 C1 C2
HNC2 : not (Col A2 B1 B2)
HNC1 : not (Col A1 B1 B2)
HNC : not (and (Col C1 B1 B2) (Col C2 B1 B2))
HP2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HP1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HP : forall A1 A2 B1 B2 C1 C2 P : Tpoint,\nnot (playfair_quater_qf A1 A2 B1 B2 C1 C2 P)
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply (not_strict_par _ _ _ _ A1) in HPar2; Col; spliter.
-----
Lemma playfair_quater__playfair : playfair_quater -> playfair_s_postulate.
Proof.
intros HP A1 A2 B1 B2 C1 C2 P HPar1 HP1 HPar2 HP2.
assert (H : playfair_quater <-> forall A1 A2 B1 B2 C1 C2 P, ~ playfair_quater_qf A1 A2 B1 B2 C1 C2 P) by (apply not_ex_forall_not_7).
rewrite H in HP; clear H.
assert (H : Col C1 B1 B2 /\\ Col C2 B1 B2 <-> ~ ~ (Col C1 B1 B2 /\\ Col C2 B1 B2)) by (induction (col_dec C1 B1 B2); induction (col_dec C2 B1 B2); tauto).
apply H; clear H; intro HNC; apply (HP A1 A2 B1 B2 C1 C2 P).
repeat try (split; [assert_diffs; assumption|]).
assert (HNC1 : ~ Col A1 B1 B2).
assert (HNC2 : ~ Col A2 B1 B2).
assert (HNC3 : ~ Col A1 C1 C2).
intro.
assert (HA : A1 <> A2) by (assert_diffs; auto).
assert (HB : B1 <> B2) by (assert_diffs; auto).
assert (HC : C1 <> C2) by (assert_diffs; auto).
apply (not_strict_par _ _ _ _ A1) in HPar2; Col; spliter.

*****
HC : not (eq C1 C2)
HB : not (eq B1 B2)
HA : not (eq A1 A2)
H : Col A1 C1 C2
HNC2 : not (Col A2 B1 B2)
HNC1 : not (Col A1 B1 B2)
HNC : not (and (Col C1 B1 B2) (Col C2 B1 B2))
HP2 : Col P C1 C2
H1 : Col A1 A2 C2
H0 : Col A1 A2 C1
HP1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HP : forall A1 A2 B1 B2 C1 C2 P : Tpoint,\nnot (playfair_quater_qf A1 A2 B1 B2 C1 C2 P)
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply (not_strict_par _ _ _ _ P) in HPar1; spliter; try ColR.
-----
Lemma playfair_quater__playfair : playfair_quater -> playfair_s_postulate.
Proof.
intros HP A1 A2 B1 B2 C1 C2 P HPar1 HP1 HPar2 HP2.
assert (H : playfair_quater <-> forall A1 A2 B1 B2 C1 C2 P, ~ playfair_quater_qf A1 A2 B1 B2 C1 C2 P) by (apply not_ex_forall_not_7).
rewrite H in HP; clear H.
assert (H : Col C1 B1 B2 /\\ Col C2 B1 B2 <-> ~ ~ (Col C1 B1 B2 /\\ Col C2 B1 B2)) by (induction (col_dec C1 B1 B2); induction (col_dec C2 B1 B2); tauto).
apply H; clear H; intro HNC; apply (HP A1 A2 B1 B2 C1 C2 P).
repeat try (split; [assert_diffs; assumption|]).
assert (HNC1 : ~ Col A1 B1 B2).
assert (HNC2 : ~ Col A2 B1 B2).
assert (HNC3 : ~ Col A1 C1 C2).
intro.
assert (HA : A1 <> A2) by (assert_diffs; auto).
assert (HB : B1 <> B2) by (assert_diffs; auto).
assert (HC : C1 <> C2) by (assert_diffs; auto).
apply (not_strict_par _ _ _ _ A1) in HPar2; Col; spliter.
apply (not_strict_par _ _ _ _ P) in HPar1; spliter; try ColR.

*****
HC : not (eq C1 C2)
HB : not (eq B1 B2)
HA : not (eq A1 A2)
H : Col A1 C1 C2
HNC2 : not (Col A2 B1 B2)
HNC1 : not (Col A1 B1 B2)
HNC : not (and (Col C1 B1 B2) (Col C2 B1 B2))
HP2 : Col P C1 C2
H1 : Col A1 A2 C2
H0 : Col A1 A2 C1
HP1 : Col P B1 B2
H3 : Col A1 A2 B2
H2 : Col A1 A2 B1
A1,A2,B1,B2,C1,C2,P : Tpoint
HP : forall A1 A2 B1 B2 C1 C2 P : Tpoint,\nnot (playfair_quater_qf A1 A2 B1 B2 C1 C2 P)
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply HNC; split; ColR.
-----
Lemma playfair_quater__playfair : playfair_quater -> playfair_s_postulate.
Proof.
intros HP A1 A2 B1 B2 C1 C2 P HPar1 HP1 HPar2 HP2.
assert (H : playfair_quater <-> forall A1 A2 B1 B2 C1 C2 P, ~ playfair_quater_qf A1 A2 B1 B2 C1 C2 P) by (apply not_ex_forall_not_7).
rewrite H in HP; clear H.
assert (H : Col C1 B1 B2 /\\ Col C2 B1 B2 <-> ~ ~ (Col C1 B1 B2 /\\ Col C2 B1 B2)) by (induction (col_dec C1 B1 B2); induction (col_dec C2 B1 B2); tauto).
apply H; clear H; intro HNC; apply (HP A1 A2 B1 B2 C1 C2 P).
repeat try (split; [assert_diffs; assumption|]).
assert (HNC1 : ~ Col A1 B1 B2).
assert (HNC2 : ~ Col A2 B1 B2).
assert (HNC3 : ~ Col A1 C1 C2).

*****
HNC3 : not (Col A1 C1 C2)
HNC2 : not (Col A2 B1 B2)
HNC1 : not (Col A1 B1 B2)
HNC : not (and (Col C1 B1 B2) (Col C2 B1 B2))
HP2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HP1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HP : forall A1 A2 B1 B2 C1 C2 P : Tpoint,\nnot (playfair_quater_qf A1 A2 B1 B2 C1 C2 P)
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (not (and (Col A1 B1 B2) (Col A2 B1 B2))) (and (not (and (Col A1 C1 C2) (Col A2 C1 C2))) (and (not (and (Col C1 B1 B2) (Col C2 B1 B2))) (and (ex (fun I : Tpoint => not (and (not (and (Col A1 A2 I) (Col B1 B2 I))) (and (not (and (Col A1 B1 I) (Col A2 B2 I))) (not (and (Col A1 B2 I) (Col A2 B1 I))))))) (and (ex (fun I : Tpoint => not (and (not (and (Col A1 A2 I) (Col C1 C2 I))) (and (not (and (Col A1 C1 I) (Col A2 C2 I))) (not (and (Col A1 C2 I) (Col A2 C1 I))))))) (and (not (ex (fun I : Tpoint => and (Col I A1 A2) (Col I B1 B2)))) (not (ex (fun I : Tpoint => and (Col I A1 A2) (Col I C1 C2)))))))))
+++++
assert (HNC4 : ~ Col A2 C1 C2).
-----
Lemma playfair_quater__playfair : playfair_quater -> playfair_s_postulate.
Proof.
intros HP A1 A2 B1 B2 C1 C2 P HPar1 HP1 HPar2 HP2.
assert (H : playfair_quater <-> forall A1 A2 B1 B2 C1 C2 P, ~ playfair_quater_qf A1 A2 B1 B2 C1 C2 P) by (apply not_ex_forall_not_7).
rewrite H in HP; clear H.
assert (H : Col C1 B1 B2 /\\ Col C2 B1 B2 <-> ~ ~ (Col C1 B1 B2 /\\ Col C2 B1 B2)) by (induction (col_dec C1 B1 B2); induction (col_dec C2 B1 B2); tauto).
apply H; clear H; intro HNC; apply (HP A1 A2 B1 B2 C1 C2 P).
repeat try (split; [assert_diffs; assumption|]).
assert (HNC1 : ~ Col A1 B1 B2).
assert (HNC2 : ~ Col A2 B1 B2).
assert (HNC3 : ~ Col A1 C1 C2).
assert (HNC4 : ~ Col A2 C1 C2).

*****
HNC3 : not (Col A1 C1 C2)
HNC2 : not (Col A2 B1 B2)
HNC1 : not (Col A1 B1 B2)
HNC : not (and (Col C1 B1 B2) (Col C2 B1 B2))
HP2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HP1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HP : forall A1 A2 B1 B2 C1 C2 P : Tpoint,\nnot (playfair_quater_qf A1 A2 B1 B2 C1 C2 P)
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col A2 C1 C2)
+++++
intro.
-----
Lemma playfair_quater__playfair : playfair_quater -> playfair_s_postulate.
Proof.
intros HP A1 A2 B1 B2 C1 C2 P HPar1 HP1 HPar2 HP2.
assert (H : playfair_quater <-> forall A1 A2 B1 B2 C1 C2 P, ~ playfair_quater_qf A1 A2 B1 B2 C1 C2 P) by (apply not_ex_forall_not_7).
rewrite H in HP; clear H.
assert (H : Col C1 B1 B2 /\\ Col C2 B1 B2 <-> ~ ~ (Col C1 B1 B2 /\\ Col C2 B1 B2)) by (induction (col_dec C1 B1 B2); induction (col_dec C2 B1 B2); tauto).
apply H; clear H; intro HNC; apply (HP A1 A2 B1 B2 C1 C2 P).
repeat try (split; [assert_diffs; assumption|]).
assert (HNC1 : ~ Col A1 B1 B2).
assert (HNC2 : ~ Col A2 B1 B2).
assert (HNC3 : ~ Col A1 C1 C2).
assert (HNC4 : ~ Col A2 C1 C2).
intro.

*****
H : Col A2 C1 C2
HNC3 : not (Col A1 C1 C2)
HNC2 : not (Col A2 B1 B2)
HNC1 : not (Col A1 B1 B2)
HNC : not (and (Col C1 B1 B2) (Col C2 B1 B2))
HP2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HP1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HP : forall A1 A2 B1 B2 C1 C2 P : Tpoint,\nnot (playfair_quater_qf A1 A2 B1 B2 C1 C2 P)
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert (HA : A1 <> A2) by (assert_diffs; auto).
-----
Lemma playfair_quater__playfair : playfair_quater -> playfair_s_postulate.
Proof.
intros HP A1 A2 B1 B2 C1 C2 P HPar1 HP1 HPar2 HP2.
assert (H : playfair_quater <-> forall A1 A2 B1 B2 C1 C2 P, ~ playfair_quater_qf A1 A2 B1 B2 C1 C2 P) by (apply not_ex_forall_not_7).
rewrite H in HP; clear H.
assert (H : Col C1 B1 B2 /\\ Col C2 B1 B2 <-> ~ ~ (Col C1 B1 B2 /\\ Col C2 B1 B2)) by (induction (col_dec C1 B1 B2); induction (col_dec C2 B1 B2); tauto).
apply H; clear H; intro HNC; apply (HP A1 A2 B1 B2 C1 C2 P).
repeat try (split; [assert_diffs; assumption|]).
assert (HNC1 : ~ Col A1 B1 B2).
assert (HNC2 : ~ Col A2 B1 B2).
assert (HNC3 : ~ Col A1 C1 C2).
assert (HNC4 : ~ Col A2 C1 C2).
intro.
assert (HA : A1 <> A2) by (assert_diffs; auto).

*****
HA : not (eq A1 A2)
H : Col A2 C1 C2
HNC3 : not (Col A1 C1 C2)
HNC2 : not (Col A2 B1 B2)
HNC1 : not (Col A1 B1 B2)
HNC : not (and (Col C1 B1 B2) (Col C2 B1 B2))
HP2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HP1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HP : forall A1 A2 B1 B2 C1 C2 P : Tpoint,\nnot (playfair_quater_qf A1 A2 B1 B2 C1 C2 P)
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert (HB : B1 <> B2) by (assert_diffs; auto).
-----
Lemma playfair_quater__playfair : playfair_quater -> playfair_s_postulate.
Proof.
intros HP A1 A2 B1 B2 C1 C2 P HPar1 HP1 HPar2 HP2.
assert (H : playfair_quater <-> forall A1 A2 B1 B2 C1 C2 P, ~ playfair_quater_qf A1 A2 B1 B2 C1 C2 P) by (apply not_ex_forall_not_7).
rewrite H in HP; clear H.
assert (H : Col C1 B1 B2 /\\ Col C2 B1 B2 <-> ~ ~ (Col C1 B1 B2 /\\ Col C2 B1 B2)) by (induction (col_dec C1 B1 B2); induction (col_dec C2 B1 B2); tauto).
apply H; clear H; intro HNC; apply (HP A1 A2 B1 B2 C1 C2 P).
repeat try (split; [assert_diffs; assumption|]).
assert (HNC1 : ~ Col A1 B1 B2).
assert (HNC2 : ~ Col A2 B1 B2).
assert (HNC3 : ~ Col A1 C1 C2).
assert (HNC4 : ~ Col A2 C1 C2).
intro.
assert (HA : A1 <> A2) by (assert_diffs; auto).
assert (HB : B1 <> B2) by (assert_diffs; auto).

*****
HB : not (eq B1 B2)
HA : not (eq A1 A2)
H : Col A2 C1 C2
HNC3 : not (Col A1 C1 C2)
HNC2 : not (Col A2 B1 B2)
HNC1 : not (Col A1 B1 B2)
HNC : not (and (Col C1 B1 B2) (Col C2 B1 B2))
HP2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HP1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HP : forall A1 A2 B1 B2 C1 C2 P : Tpoint,\nnot (playfair_quater_qf A1 A2 B1 B2 C1 C2 P)
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert (HC : C1 <> C2) by (assert_diffs; auto).
-----
Lemma playfair_quater__playfair : playfair_quater -> playfair_s_postulate.
Proof.
intros HP A1 A2 B1 B2 C1 C2 P HPar1 HP1 HPar2 HP2.
assert (H : playfair_quater <-> forall A1 A2 B1 B2 C1 C2 P, ~ playfair_quater_qf A1 A2 B1 B2 C1 C2 P) by (apply not_ex_forall_not_7).
rewrite H in HP; clear H.
assert (H : Col C1 B1 B2 /\\ Col C2 B1 B2 <-> ~ ~ (Col C1 B1 B2 /\\ Col C2 B1 B2)) by (induction (col_dec C1 B1 B2); induction (col_dec C2 B1 B2); tauto).
apply H; clear H; intro HNC; apply (HP A1 A2 B1 B2 C1 C2 P).
repeat try (split; [assert_diffs; assumption|]).
assert (HNC1 : ~ Col A1 B1 B2).
assert (HNC2 : ~ Col A2 B1 B2).
assert (HNC3 : ~ Col A1 C1 C2).
assert (HNC4 : ~ Col A2 C1 C2).
intro.
assert (HA : A1 <> A2) by (assert_diffs; auto).
assert (HB : B1 <> B2) by (assert_diffs; auto).
assert (HC : C1 <> C2) by (assert_diffs; auto).

*****
HC : not (eq C1 C2)
HB : not (eq B1 B2)
HA : not (eq A1 A2)
H : Col A2 C1 C2
HNC3 : not (Col A1 C1 C2)
HNC2 : not (Col A2 B1 B2)
HNC1 : not (Col A1 B1 B2)
HNC : not (and (Col C1 B1 B2) (Col C2 B1 B2))
HP2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HP1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HP : forall A1 A2 B1 B2 C1 C2 P : Tpoint,\nnot (playfair_quater_qf A1 A2 B1 B2 C1 C2 P)
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply (not_strict_par _ _ _ _ A2) in HPar2; Col; spliter.
-----
Lemma playfair_quater__playfair : playfair_quater -> playfair_s_postulate.
Proof.
intros HP A1 A2 B1 B2 C1 C2 P HPar1 HP1 HPar2 HP2.
assert (H : playfair_quater <-> forall A1 A2 B1 B2 C1 C2 P, ~ playfair_quater_qf A1 A2 B1 B2 C1 C2 P) by (apply not_ex_forall_not_7).
rewrite H in HP; clear H.
assert (H : Col C1 B1 B2 /\\ Col C2 B1 B2 <-> ~ ~ (Col C1 B1 B2 /\\ Col C2 B1 B2)) by (induction (col_dec C1 B1 B2); induction (col_dec C2 B1 B2); tauto).
apply H; clear H; intro HNC; apply (HP A1 A2 B1 B2 C1 C2 P).
repeat try (split; [assert_diffs; assumption|]).
assert (HNC1 : ~ Col A1 B1 B2).
assert (HNC2 : ~ Col A2 B1 B2).
assert (HNC3 : ~ Col A1 C1 C2).
assert (HNC4 : ~ Col A2 C1 C2).
intro.
assert (HA : A1 <> A2) by (assert_diffs; auto).
assert (HB : B1 <> B2) by (assert_diffs; auto).
assert (HC : C1 <> C2) by (assert_diffs; auto).
apply (not_strict_par _ _ _ _ A2) in HPar2; Col; spliter.

*****
HC : not (eq C1 C2)
HB : not (eq B1 B2)
HA : not (eq A1 A2)
H : Col A2 C1 C2
HNC3 : not (Col A1 C1 C2)
HNC2 : not (Col A2 B1 B2)
HNC1 : not (Col A1 B1 B2)
HNC : not (and (Col C1 B1 B2) (Col C2 B1 B2))
HP2 : Col P C1 C2
H1 : Col A1 A2 C2
H0 : Col A1 A2 C1
HP1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HP : forall A1 A2 B1 B2 C1 C2 P : Tpoint,\nnot (playfair_quater_qf A1 A2 B1 B2 C1 C2 P)
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply (not_strict_par _ _ _ _ P) in HPar1; spliter; try ColR.
-----
Lemma playfair_quater__playfair : playfair_quater -> playfair_s_postulate.
Proof.
intros HP A1 A2 B1 B2 C1 C2 P HPar1 HP1 HPar2 HP2.
assert (H : playfair_quater <-> forall A1 A2 B1 B2 C1 C2 P, ~ playfair_quater_qf A1 A2 B1 B2 C1 C2 P) by (apply not_ex_forall_not_7).
rewrite H in HP; clear H.
assert (H : Col C1 B1 B2 /\\ Col C2 B1 B2 <-> ~ ~ (Col C1 B1 B2 /\\ Col C2 B1 B2)) by (induction (col_dec C1 B1 B2); induction (col_dec C2 B1 B2); tauto).
apply H; clear H; intro HNC; apply (HP A1 A2 B1 B2 C1 C2 P).
repeat try (split; [assert_diffs; assumption|]).
assert (HNC1 : ~ Col A1 B1 B2).
assert (HNC2 : ~ Col A2 B1 B2).
assert (HNC3 : ~ Col A1 C1 C2).
assert (HNC4 : ~ Col A2 C1 C2).
intro.
assert (HA : A1 <> A2) by (assert_diffs; auto).
assert (HB : B1 <> B2) by (assert_diffs; auto).
assert (HC : C1 <> C2) by (assert_diffs; auto).
apply (not_strict_par _ _ _ _ A2) in HPar2; Col; spliter.
apply (not_strict_par _ _ _ _ P) in HPar1; spliter; try ColR.

*****
HC : not (eq C1 C2)
HB : not (eq B1 B2)
HA : not (eq A1 A2)
H : Col A2 C1 C2
HNC3 : not (Col A1 C1 C2)
HNC2 : not (Col A2 B1 B2)
HNC1 : not (Col A1 B1 B2)
HNC : not (and (Col C1 B1 B2) (Col C2 B1 B2))
HP2 : Col P C1 C2
H1 : Col A1 A2 C2
H0 : Col A1 A2 C1
HP1 : Col P B1 B2
H3 : Col A1 A2 B2
H2 : Col A1 A2 B1
A1,A2,B1,B2,C1,C2,P : Tpoint
HP : forall A1 A2 B1 B2 C1 C2 P : Tpoint,\nnot (playfair_quater_qf A1 A2 B1 B2 C1 C2 P)
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply HNC; split; ColR.
-----
Lemma playfair_quater__playfair : playfair_quater -> playfair_s_postulate.
Proof.
intros HP A1 A2 B1 B2 C1 C2 P HPar1 HP1 HPar2 HP2.
assert (H : playfair_quater <-> forall A1 A2 B1 B2 C1 C2 P, ~ playfair_quater_qf A1 A2 B1 B2 C1 C2 P) by (apply not_ex_forall_not_7).
rewrite H in HP; clear H.
assert (H : Col C1 B1 B2 /\\ Col C2 B1 B2 <-> ~ ~ (Col C1 B1 B2 /\\ Col C2 B1 B2)) by (induction (col_dec C1 B1 B2); induction (col_dec C2 B1 B2); tauto).
apply H; clear H; intro HNC; apply (HP A1 A2 B1 B2 C1 C2 P).
repeat try (split; [assert_diffs; assumption|]).
assert (HNC1 : ~ Col A1 B1 B2).
assert (HNC2 : ~ Col A2 B1 B2).
assert (HNC3 : ~ Col A1 C1 C2).
assert (HNC4 : ~ Col A2 C1 C2).

*****
HNC4 : not (Col A2 C1 C2)
HNC3 : not (Col A1 C1 C2)
HNC2 : not (Col A2 B1 B2)
HNC1 : not (Col A1 B1 B2)
HNC : not (and (Col C1 B1 B2) (Col C2 B1 B2))
HP2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HP1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HP : forall A1 A2 B1 B2 C1 C2 P : Tpoint,\nnot (playfair_quater_qf A1 A2 B1 B2 C1 C2 P)
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (not (and (Col A1 B1 B2) (Col A2 B1 B2))) (and (not (and (Col A1 C1 C2) (Col A2 C1 C2))) (and (not (and (Col C1 B1 B2) (Col C2 B1 B2))) (and (ex (fun I : Tpoint => not (and (not (and (Col A1 A2 I) (Col B1 B2 I))) (and (not (and (Col A1 B1 I) (Col A2 B2 I))) (not (and (Col A1 B2 I) (Col A2 B1 I))))))) (and (ex (fun I : Tpoint => not (and (not (and (Col A1 A2 I) (Col C1 C2 I))) (and (not (and (Col A1 C1 I) (Col A2 C2 I))) (not (and (Col A1 C2 I) (Col A2 C1 I))))))) (and (not (ex (fun I : Tpoint => and (Col I A1 A2) (Col I B1 B2)))) (not (ex (fun I : Tpoint => and (Col I A1 A2) (Col I C1 C2)))))))))
+++++
apply par_symmetry in HPar1; apply (par_not_col_strict _ _ _ _ A1) in HPar1; Col; apply par_strict_symmetry in HPar1; destruct HPar1 as [_ [_ [HCop1 HPar1]]].
-----
Lemma playfair_quater__playfair : playfair_quater -> playfair_s_postulate.
Proof.
intros HP A1 A2 B1 B2 C1 C2 P HPar1 HP1 HPar2 HP2.
assert (H : playfair_quater <-> forall A1 A2 B1 B2 C1 C2 P, ~ playfair_quater_qf A1 A2 B1 B2 C1 C2 P) by (apply not_ex_forall_not_7).
rewrite H in HP; clear H.
assert (H : Col C1 B1 B2 /\\ Col C2 B1 B2 <-> ~ ~ (Col C1 B1 B2 /\\ Col C2 B1 B2)) by (induction (col_dec C1 B1 B2); induction (col_dec C2 B1 B2); tauto).
apply H; clear H; intro HNC; apply (HP A1 A2 B1 B2 C1 C2 P).
repeat try (split; [assert_diffs; assumption|]).
assert (HNC1 : ~ Col A1 B1 B2).
assert (HNC2 : ~ Col A2 B1 B2).
assert (HNC3 : ~ Col A1 C1 C2).
assert (HNC4 : ~ Col A2 C1 C2).
apply par_symmetry in HPar1; apply (par_not_col_strict _ _ _ _ A1) in HPar1; Col; apply par_strict_symmetry in HPar1; destruct HPar1 as [_ [_ [HCop1 HPar1]]].

*****
HNC4 : not (Col A2 C1 C2)
HNC3 : not (Col A1 C1 C2)
HNC2 : not (Col A2 B1 B2)
HNC1 : not (Col A1 B1 B2)
HNC : not (and (Col C1 B1 B2) (Col C2 B1 B2))
HP2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HP1 : Col P B1 B2
HPar1 : not (ex (fun X : Tpoint => and (Col X A1 A2) (Col X B1 B2)))
HCop1 : Coplanar A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HP : forall A1 A2 B1 B2 C1 C2 P : Tpoint,\nnot (playfair_quater_qf A1 A2 B1 B2 C1 C2 P)
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (not (and (Col A1 B1 B2) (Col A2 B1 B2))) (and (not (and (Col A1 C1 C2) (Col A2 C1 C2))) (and (not (and (Col C1 B1 B2) (Col C2 B1 B2))) (and (ex (fun I : Tpoint => not (and (not (and (Col A1 A2 I) (Col B1 B2 I))) (and (not (and (Col A1 B1 I) (Col A2 B2 I))) (not (and (Col A1 B2 I) (Col A2 B1 I))))))) (and (ex (fun I : Tpoint => not (and (not (and (Col A1 A2 I) (Col C1 C2 I))) (and (not (and (Col A1 C1 I) (Col A2 C2 I))) (not (and (Col A1 C2 I) (Col A2 C1 I))))))) (and (not (ex (fun I : Tpoint => and (Col I A1 A2) (Col I B1 B2)))) (not (ex (fun I : Tpoint => and (Col I A1 A2) (Col I C1 C2)))))))))
+++++
apply par_symmetry in HPar2; apply (par_not_col_strict _ _ _ _ A1) in HPar2; Col; apply par_strict_symmetry in HPar2; destruct HPar2 as [_ [_ [HCop2 HPar2]]].
-----
Lemma playfair_quater__playfair : playfair_quater -> playfair_s_postulate.
Proof.
intros HP A1 A2 B1 B2 C1 C2 P HPar1 HP1 HPar2 HP2.
assert (H : playfair_quater <-> forall A1 A2 B1 B2 C1 C2 P, ~ playfair_quater_qf A1 A2 B1 B2 C1 C2 P) by (apply not_ex_forall_not_7).
rewrite H in HP; clear H.
assert (H : Col C1 B1 B2 /\\ Col C2 B1 B2 <-> ~ ~ (Col C1 B1 B2 /\\ Col C2 B1 B2)) by (induction (col_dec C1 B1 B2); induction (col_dec C2 B1 B2); tauto).
apply H; clear H; intro HNC; apply (HP A1 A2 B1 B2 C1 C2 P).
repeat try (split; [assert_diffs; assumption|]).
assert (HNC1 : ~ Col A1 B1 B2).
assert (HNC2 : ~ Col A2 B1 B2).
assert (HNC3 : ~ Col A1 C1 C2).
assert (HNC4 : ~ Col A2 C1 C2).
apply par_symmetry in HPar1; apply (par_not_col_strict _ _ _ _ A1) in HPar1; Col; apply par_strict_symmetry in HPar1; destruct HPar1 as [_ [_ [HCop1 HPar1]]].
apply par_symmetry in HPar2; apply (par_not_col_strict _ _ _ _ A1) in HPar2; Col; apply par_strict_symmetry in HPar2; destruct HPar2 as [_ [_ [HCop2 HPar2]]].

*****
HNC4 : not (Col A2 C1 C2)
HNC3 : not (Col A1 C1 C2)
HNC2 : not (Col A2 B1 B2)
HNC1 : not (Col A1 B1 B2)
HNC : not (and (Col C1 B1 B2) (Col C2 B1 B2))
HP2 : Col P C1 C2
HPar2 : not (ex (fun X : Tpoint => and (Col X A1 A2) (Col X C1 C2)))
HCop2 : Coplanar A1 A2 C1 C2
HP1 : Col P B1 B2
HPar1 : not (ex (fun X : Tpoint => and (Col X A1 A2) (Col X B1 B2)))
HCop1 : Coplanar A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HP : forall A1 A2 B1 B2 C1 C2 P : Tpoint,\nnot (playfair_quater_qf A1 A2 B1 B2 C1 C2 P)
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (not (and (Col A1 B1 B2) (Col A2 B1 B2))) (and (not (and (Col A1 C1 C2) (Col A2 C1 C2))) (and (not (and (Col C1 B1 B2) (Col C2 B1 B2))) (and (ex (fun I : Tpoint => not (and (not (and (Col A1 A2 I) (Col B1 B2 I))) (and (not (and (Col A1 B1 I) (Col A2 B2 I))) (not (and (Col A1 B2 I) (Col A2 B1 I))))))) (and (ex (fun I : Tpoint => not (and (not (and (Col A1 A2 I) (Col C1 C2 I))) (and (not (and (Col A1 C1 I) (Col A2 C2 I))) (not (and (Col A1 C2 I) (Col A2 C1 I))))))) (and (not (ex (fun I : Tpoint => and (Col I A1 A2) (Col I B1 B2)))) (not (ex (fun I : Tpoint => and (Col I A1 A2) (Col I C1 C2)))))))))
+++++
repeat (split; try tauto).
-----
Lemma playfair_quater__playfair : playfair_quater -> playfair_s_postulate.
Proof.
intros HP A1 A2 B1 B2 C1 C2 P HPar1 HP1 HPar2 HP2.
assert (H : playfair_quater <-> forall A1 A2 B1 B2 C1 C2 P, ~ playfair_quater_qf A1 A2 B1 B2 C1 C2 P) by (apply not_ex_forall_not_7).
rewrite H in HP; clear H.
assert (H : Col C1 B1 B2 /\\ Col C2 B1 B2 <-> ~ ~ (Col C1 B1 B2 /\\ Col C2 B1 B2)) by (induction (col_dec C1 B1 B2); induction (col_dec C2 B1 B2); tauto).
apply H; clear H; intro HNC; apply (HP A1 A2 B1 B2 C1 C2 P).
repeat try (split; [assert_diffs; assumption|]).
assert (HNC1 : ~ Col A1 B1 B2).
assert (HNC2 : ~ Col A2 B1 B2).
assert (HNC3 : ~ Col A1 C1 C2).
assert (HNC4 : ~ Col A2 C1 C2).
apply par_symmetry in HPar1; apply (par_not_col_strict _ _ _ _ A1) in HPar1; Col; apply par_strict_symmetry in HPar1; destruct HPar1 as [_ [_ [HCop1 HPar1]]].
apply par_symmetry in HPar2; apply (par_not_col_strict _ _ _ _ A1) in HPar2; Col; apply par_strict_symmetry in HPar2; destruct HPar2 as [_ [_ [HCop2 HPar2]]].
repeat (split; try tauto).

*****
HNC4 : not (Col A2 C1 C2)
HNC3 : not (Col A1 C1 C2)
HNC2 : not (Col A2 B1 B2)
HNC1 : not (Col A1 B1 B2)
HNC : not (and (Col C1 B1 B2) (Col C2 B1 B2))
HP2 : Col P C1 C2
HPar2 : not (ex (fun X : Tpoint => and (Col X A1 A2) (Col X C1 C2)))
HCop2 : Coplanar A1 A2 C1 C2
HP1 : Col P B1 B2
HPar1 : not (ex (fun X : Tpoint => and (Col X A1 A2) (Col X B1 B2)))
HCop1 : Coplanar A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HP : forall A1 A2 B1 B2 C1 C2 P : Tpoint,\nnot (playfair_quater_qf A1 A2 B1 B2 C1 C2 P)
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun I : Tpoint => not (and (not (and (Col A1 A2 I) (Col B1 B2 I))) (and (not (and (Col A1 B1 I) (Col A2 B2 I))) (not (and (Col A1 B2 I) (Col A2 B1 I))))))
+++++
destruct HCop1 as [IAB HIAB].
-----
Lemma playfair_quater__playfair : playfair_quater -> playfair_s_postulate.
Proof.
intros HP A1 A2 B1 B2 C1 C2 P HPar1 HP1 HPar2 HP2.
assert (H : playfair_quater <-> forall A1 A2 B1 B2 C1 C2 P, ~ playfair_quater_qf A1 A2 B1 B2 C1 C2 P) by (apply not_ex_forall_not_7).
rewrite H in HP; clear H.
assert (H : Col C1 B1 B2 /\\ Col C2 B1 B2 <-> ~ ~ (Col C1 B1 B2 /\\ Col C2 B1 B2)) by (induction (col_dec C1 B1 B2); induction (col_dec C2 B1 B2); tauto).
apply H; clear H; intro HNC; apply (HP A1 A2 B1 B2 C1 C2 P).
repeat try (split; [assert_diffs; assumption|]).
assert (HNC1 : ~ Col A1 B1 B2).
assert (HNC2 : ~ Col A2 B1 B2).
assert (HNC3 : ~ Col A1 C1 C2).
assert (HNC4 : ~ Col A2 C1 C2).
apply par_symmetry in HPar1; apply (par_not_col_strict _ _ _ _ A1) in HPar1; Col; apply par_strict_symmetry in HPar1; destruct HPar1 as [_ [_ [HCop1 HPar1]]].
apply par_symmetry in HPar2; apply (par_not_col_strict _ _ _ _ A1) in HPar2; Col; apply par_strict_symmetry in HPar2; destruct HPar2 as [_ [_ [HCop2 HPar2]]].
repeat (split; try tauto).
destruct HCop1 as [IAB HIAB].

*****
HNC4 : not (Col A2 C1 C2)
HNC3 : not (Col A1 C1 C2)
HNC2 : not (Col A2 B1 B2)
HNC1 : not (Col A1 B1 B2)
HNC : not (and (Col C1 B1 B2) (Col C2 B1 B2))
HP2 : Col P C1 C2
HPar2 : not (ex (fun X : Tpoint => and (Col X A1 A2) (Col X C1 C2)))
HCop2 : Coplanar A1 A2 C1 C2
HP1 : Col P B1 B2
HPar1 : not (ex (fun X : Tpoint => and (Col X A1 A2) (Col X B1 B2)))
HIAB : or (and (Col A1 A2 IAB) (Col B1 B2 IAB))\n (or (and (Col A1 B1 IAB) (Col A2 B2 IAB))\n (and (Col A1 B2 IAB) (Col A2 B1 IAB)))
A1,A2,B1,B2,C1,C2,P,IAB : Tpoint
HP : forall A1 A2 B1 B2 C1 C2 P : Tpoint,\nnot (playfair_quater_qf A1 A2 B1 B2 C1 C2 P)
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun I : Tpoint => not (and (not (and (Col A1 A2 I) (Col B1 B2 I))) (and (not (and (Col A1 B1 I) (Col A2 B2 I))) (not (and (Col A1 B2 I) (Col A2 B1 I))))))
+++++
exists IAB; intros [HIAB1 [HIAB2 HIAB3]].
-----
Lemma playfair_quater__playfair : playfair_quater -> playfair_s_postulate.
Proof.
intros HP A1 A2 B1 B2 C1 C2 P HPar1 HP1 HPar2 HP2.
assert (H : playfair_quater <-> forall A1 A2 B1 B2 C1 C2 P, ~ playfair_quater_qf A1 A2 B1 B2 C1 C2 P) by (apply not_ex_forall_not_7).
rewrite H in HP; clear H.
assert (H : Col C1 B1 B2 /\\ Col C2 B1 B2 <-> ~ ~ (Col C1 B1 B2 /\\ Col C2 B1 B2)) by (induction (col_dec C1 B1 B2); induction (col_dec C2 B1 B2); tauto).
apply H; clear H; intro HNC; apply (HP A1 A2 B1 B2 C1 C2 P).
repeat try (split; [assert_diffs; assumption|]).
assert (HNC1 : ~ Col A1 B1 B2).
assert (HNC2 : ~ Col A2 B1 B2).
assert (HNC3 : ~ Col A1 C1 C2).
assert (HNC4 : ~ Col A2 C1 C2).
apply par_symmetry in HPar1; apply (par_not_col_strict _ _ _ _ A1) in HPar1; Col; apply par_strict_symmetry in HPar1; destruct HPar1 as [_ [_ [HCop1 HPar1]]].
apply par_symmetry in HPar2; apply (par_not_col_strict _ _ _ _ A1) in HPar2; Col; apply par_strict_symmetry in HPar2; destruct HPar2 as [_ [_ [HCop2 HPar2]]].
repeat (split; try tauto).
destruct HCop1 as [IAB HIAB].
exists IAB; intros [HIAB1 [HIAB2 HIAB3]].

*****
HIAB3 : not (and (Col A1 B2 IAB) (Col A2 B1 IAB))
HIAB2 : not (and (Col A1 B1 IAB) (Col A2 B2 IAB))
HIAB1 : not (and (Col A1 A2 IAB) (Col B1 B2 IAB))
HNC4 : not (Col A2 C1 C2)
HNC3 : not (Col A1 C1 C2)
HNC2 : not (Col A2 B1 B2)
HNC1 : not (Col A1 B1 B2)
HNC : not (and (Col C1 B1 B2) (Col C2 B1 B2))
HP2 : Col P C1 C2
HPar2 : not (ex (fun X : Tpoint => and (Col X A1 A2) (Col X C1 C2)))
HCop2 : Coplanar A1 A2 C1 C2
HP1 : Col P B1 B2
HPar1 : not (ex (fun X : Tpoint => and (Col X A1 A2) (Col X B1 B2)))
HIAB : or (and (Col A1 A2 IAB) (Col B1 B2 IAB))\n (or (and (Col A1 B1 IAB) (Col A2 B2 IAB))\n (and (Col A1 B2 IAB) (Col A2 B1 IAB)))
A1,A2,B1,B2,C1,C2,P,IAB : Tpoint
HP : forall A1 A2 B1 B2 C1 C2 P : Tpoint,\nnot (playfair_quater_qf A1 A2 B1 B2 C1 C2 P)
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
elim HIAB; clear HIAB; intro HIAB; [apply HIAB1|]; try solve [spliter; split; Col].
-----
Lemma playfair_quater__playfair : playfair_quater -> playfair_s_postulate.
Proof.
intros HP A1 A2 B1 B2 C1 C2 P HPar1 HP1 HPar2 HP2.
assert (H : playfair_quater <-> forall A1 A2 B1 B2 C1 C2 P, ~ playfair_quater_qf A1 A2 B1 B2 C1 C2 P) by (apply not_ex_forall_not_7).
rewrite H in HP; clear H.
assert (H : Col C1 B1 B2 /\\ Col C2 B1 B2 <-> ~ ~ (Col C1 B1 B2 /\\ Col C2 B1 B2)) by (induction (col_dec C1 B1 B2); induction (col_dec C2 B1 B2); tauto).
apply H; clear H; intro HNC; apply (HP A1 A2 B1 B2 C1 C2 P).
repeat try (split; [assert_diffs; assumption|]).
assert (HNC1 : ~ Col A1 B1 B2).
assert (HNC2 : ~ Col A2 B1 B2).
assert (HNC3 : ~ Col A1 C1 C2).
assert (HNC4 : ~ Col A2 C1 C2).
apply par_symmetry in HPar1; apply (par_not_col_strict _ _ _ _ A1) in HPar1; Col; apply par_strict_symmetry in HPar1; destruct HPar1 as [_ [_ [HCop1 HPar1]]].
apply par_symmetry in HPar2; apply (par_not_col_strict _ _ _ _ A1) in HPar2; Col; apply par_strict_symmetry in HPar2; destruct HPar2 as [_ [_ [HCop2 HPar2]]].
repeat (split; try tauto).
destruct HCop1 as [IAB HIAB].
exists IAB; intros [HIAB1 [HIAB2 HIAB3]].
elim HIAB; clear HIAB; intro HIAB; [apply HIAB1|]; try solve [spliter; split; Col].

*****
HIAB : or (and (Col A1 B1 IAB) (Col A2 B2 IAB))\n (and (Col A1 B2 IAB) (Col A2 B1 IAB))
HIAB3 : not (and (Col A1 B2 IAB) (Col A2 B1 IAB))
HIAB2 : not (and (Col A1 B1 IAB) (Col A2 B2 IAB))
HIAB1 : not (and (Col A1 A2 IAB) (Col B1 B2 IAB))
HNC4 : not (Col A2 C1 C2)
HNC3 : not (Col A1 C1 C2)
HNC2 : not (Col A2 B1 B2)
HNC1 : not (Col A1 B1 B2)
HNC : not (and (Col C1 B1 B2) (Col C2 B1 B2))
HP2 : Col P C1 C2
HPar2 : not (ex (fun X : Tpoint => and (Col X A1 A2) (Col X C1 C2)))
HCop2 : Coplanar A1 A2 C1 C2
HP1 : Col P B1 B2
HPar1 : not (ex (fun X : Tpoint => and (Col X A1 A2) (Col X B1 B2)))
A1,A2,B1,B2,C1,C2,P,IAB : Tpoint
HP : forall A1 A2 B1 B2 C1 C2 P : Tpoint,\nnot (playfair_quater_qf A1 A2 B1 B2 C1 C2 P)
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
elim HIAB; clear HIAB; intro HIAB; [apply HIAB2|apply HIAB3]; spliter; split; Col.
-----
Lemma playfair_quater__playfair : playfair_quater -> playfair_s_postulate.
Proof.
intros HP A1 A2 B1 B2 C1 C2 P HPar1 HP1 HPar2 HP2.
assert (H : playfair_quater <-> forall A1 A2 B1 B2 C1 C2 P, ~ playfair_quater_qf A1 A2 B1 B2 C1 C2 P) by (apply not_ex_forall_not_7).
rewrite H in HP; clear H.
assert (H : Col C1 B1 B2 /\\ Col C2 B1 B2 <-> ~ ~ (Col C1 B1 B2 /\\ Col C2 B1 B2)) by (induction (col_dec C1 B1 B2); induction (col_dec C2 B1 B2); tauto).
apply H; clear H; intro HNC; apply (HP A1 A2 B1 B2 C1 C2 P).
repeat try (split; [assert_diffs; assumption|]).
assert (HNC1 : ~ Col A1 B1 B2).
assert (HNC2 : ~ Col A2 B1 B2).
assert (HNC3 : ~ Col A1 C1 C2).
assert (HNC4 : ~ Col A2 C1 C2).
apply par_symmetry in HPar1; apply (par_not_col_strict _ _ _ _ A1) in HPar1; Col; apply par_strict_symmetry in HPar1; destruct HPar1 as [_ [_ [HCop1 HPar1]]].
apply par_symmetry in HPar2; apply (par_not_col_strict _ _ _ _ A1) in HPar2; Col; apply par_strict_symmetry in HPar2; destruct HPar2 as [_ [_ [HCop2 HPar2]]].
repeat (split; try tauto).

*****
HNC4 : not (Col A2 C1 C2)
HNC3 : not (Col A1 C1 C2)
HNC2 : not (Col A2 B1 B2)
HNC1 : not (Col A1 B1 B2)
HNC : not (and (Col C1 B1 B2) (Col C2 B1 B2))
HP2 : Col P C1 C2
HPar2 : not (ex (fun X : Tpoint => and (Col X A1 A2) (Col X C1 C2)))
HCop2 : Coplanar A1 A2 C1 C2
HP1 : Col P B1 B2
HPar1 : not (ex (fun X : Tpoint => and (Col X A1 A2) (Col X B1 B2)))
HCop1 : Coplanar A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HP : forall A1 A2 B1 B2 C1 C2 P : Tpoint,\nnot (playfair_quater_qf A1 A2 B1 B2 C1 C2 P)
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun I : Tpoint => not (and (not (and (Col A1 A2 I) (Col C1 C2 I))) (and (not (and (Col A1 C1 I) (Col A2 C2 I))) (not (and (Col A1 C2 I) (Col A2 C1 I))))))
+++++
destruct HCop2 as [IAC HIAC].
-----
Lemma playfair_quater__playfair : playfair_quater -> playfair_s_postulate.
Proof.
intros HP A1 A2 B1 B2 C1 C2 P HPar1 HP1 HPar2 HP2.
assert (H : playfair_quater <-> forall A1 A2 B1 B2 C1 C2 P, ~ playfair_quater_qf A1 A2 B1 B2 C1 C2 P) by (apply not_ex_forall_not_7).
rewrite H in HP; clear H.
assert (H : Col C1 B1 B2 /\\ Col C2 B1 B2 <-> ~ ~ (Col C1 B1 B2 /\\ Col C2 B1 B2)) by (induction (col_dec C1 B1 B2); induction (col_dec C2 B1 B2); tauto).
apply H; clear H; intro HNC; apply (HP A1 A2 B1 B2 C1 C2 P).
repeat try (split; [assert_diffs; assumption|]).
assert (HNC1 : ~ Col A1 B1 B2).
assert (HNC2 : ~ Col A2 B1 B2).
assert (HNC3 : ~ Col A1 C1 C2).
assert (HNC4 : ~ Col A2 C1 C2).
apply par_symmetry in HPar1; apply (par_not_col_strict _ _ _ _ A1) in HPar1; Col; apply par_strict_symmetry in HPar1; destruct HPar1 as [_ [_ [HCop1 HPar1]]].
apply par_symmetry in HPar2; apply (par_not_col_strict _ _ _ _ A1) in HPar2; Col; apply par_strict_symmetry in HPar2; destruct HPar2 as [_ [_ [HCop2 HPar2]]].
repeat (split; try tauto).
destruct HCop2 as [IAC HIAC].

*****
HNC4 : not (Col A2 C1 C2)
HNC3 : not (Col A1 C1 C2)
HNC2 : not (Col A2 B1 B2)
HNC1 : not (Col A1 B1 B2)
HNC : not (and (Col C1 B1 B2) (Col C2 B1 B2))
HP2 : Col P C1 C2
HPar2 : not (ex (fun X : Tpoint => and (Col X A1 A2) (Col X C1 C2)))
HIAC : or (and (Col A1 A2 IAC) (Col C1 C2 IAC))\n (or (and (Col A1 C1 IAC) (Col A2 C2 IAC))\n (and (Col A1 C2 IAC) (Col A2 C1 IAC)))
IAC : Tpoint
HP1 : Col P B1 B2
HPar1 : not (ex (fun X : Tpoint => and (Col X A1 A2) (Col X B1 B2)))
HCop1 : Coplanar A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HP : forall A1 A2 B1 B2 C1 C2 P : Tpoint,\nnot (playfair_quater_qf A1 A2 B1 B2 C1 C2 P)
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun I : Tpoint => not (and (not (and (Col A1 A2 I) (Col C1 C2 I))) (and (not (and (Col A1 C1 I) (Col A2 C2 I))) (not (and (Col A1 C2 I) (Col A2 C1 I))))))
+++++
exists IAC; intros [HIAC1 [HIAC2 HIAC3]].
-----
Lemma playfair_quater__playfair : playfair_quater -> playfair_s_postulate.
Proof.
intros HP A1 A2 B1 B2 C1 C2 P HPar1 HP1 HPar2 HP2.
assert (H : playfair_quater <-> forall A1 A2 B1 B2 C1 C2 P, ~ playfair_quater_qf A1 A2 B1 B2 C1 C2 P) by (apply not_ex_forall_not_7).
rewrite H in HP; clear H.
assert (H : Col C1 B1 B2 /\\ Col C2 B1 B2 <-> ~ ~ (Col C1 B1 B2 /\\ Col C2 B1 B2)) by (induction (col_dec C1 B1 B2); induction (col_dec C2 B1 B2); tauto).
apply H; clear H; intro HNC; apply (HP A1 A2 B1 B2 C1 C2 P).
repeat try (split; [assert_diffs; assumption|]).
assert (HNC1 : ~ Col A1 B1 B2).
assert (HNC2 : ~ Col A2 B1 B2).
assert (HNC3 : ~ Col A1 C1 C2).
assert (HNC4 : ~ Col A2 C1 C2).
apply par_symmetry in HPar1; apply (par_not_col_strict _ _ _ _ A1) in HPar1; Col; apply par_strict_symmetry in HPar1; destruct HPar1 as [_ [_ [HCop1 HPar1]]].
apply par_symmetry in HPar2; apply (par_not_col_strict _ _ _ _ A1) in HPar2; Col; apply par_strict_symmetry in HPar2; destruct HPar2 as [_ [_ [HCop2 HPar2]]].
repeat (split; try tauto).
destruct HCop2 as [IAC HIAC].
exists IAC; intros [HIAC1 [HIAC2 HIAC3]].

*****
HIAC3 : not (and (Col A1 C2 IAC) (Col A2 C1 IAC))
HIAC2 : not (and (Col A1 C1 IAC) (Col A2 C2 IAC))
HIAC1 : not (and (Col A1 A2 IAC) (Col C1 C2 IAC))
HNC4 : not (Col A2 C1 C2)
HNC3 : not (Col A1 C1 C2)
HNC2 : not (Col A2 B1 B2)
HNC1 : not (Col A1 B1 B2)
HNC : not (and (Col C1 B1 B2) (Col C2 B1 B2))
HP2 : Col P C1 C2
HPar2 : not (ex (fun X : Tpoint => and (Col X A1 A2) (Col X C1 C2)))
HIAC : or (and (Col A1 A2 IAC) (Col C1 C2 IAC))\n (or (and (Col A1 C1 IAC) (Col A2 C2 IAC))\n (and (Col A1 C2 IAC) (Col A2 C1 IAC)))
IAC : Tpoint
HP1 : Col P B1 B2
HPar1 : not (ex (fun X : Tpoint => and (Col X A1 A2) (Col X B1 B2)))
HCop1 : Coplanar A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HP : forall A1 A2 B1 B2 C1 C2 P : Tpoint,\nnot (playfair_quater_qf A1 A2 B1 B2 C1 C2 P)
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
elim HIAC; clear HIAC; intro HIAC; [apply HIAC1|]; try solve [spliter; split; Col].
-----
Lemma playfair_quater__playfair : playfair_quater -> playfair_s_postulate.
Proof.
intros HP A1 A2 B1 B2 C1 C2 P HPar1 HP1 HPar2 HP2.
assert (H : playfair_quater <-> forall A1 A2 B1 B2 C1 C2 P, ~ playfair_quater_qf A1 A2 B1 B2 C1 C2 P) by (apply not_ex_forall_not_7).
rewrite H in HP; clear H.
assert (H : Col C1 B1 B2 /\\ Col C2 B1 B2 <-> ~ ~ (Col C1 B1 B2 /\\ Col C2 B1 B2)) by (induction (col_dec C1 B1 B2); induction (col_dec C2 B1 B2); tauto).
apply H; clear H; intro HNC; apply (HP A1 A2 B1 B2 C1 C2 P).
repeat try (split; [assert_diffs; assumption|]).
assert (HNC1 : ~ Col A1 B1 B2).
assert (HNC2 : ~ Col A2 B1 B2).
assert (HNC3 : ~ Col A1 C1 C2).
assert (HNC4 : ~ Col A2 C1 C2).
apply par_symmetry in HPar1; apply (par_not_col_strict _ _ _ _ A1) in HPar1; Col; apply par_strict_symmetry in HPar1; destruct HPar1 as [_ [_ [HCop1 HPar1]]].
apply par_symmetry in HPar2; apply (par_not_col_strict _ _ _ _ A1) in HPar2; Col; apply par_strict_symmetry in HPar2; destruct HPar2 as [_ [_ [HCop2 HPar2]]].
repeat (split; try tauto).
destruct HCop2 as [IAC HIAC].
exists IAC; intros [HIAC1 [HIAC2 HIAC3]].
elim HIAC; clear HIAC; intro HIAC; [apply HIAC1|]; try solve [spliter; split; Col].

*****
HIAC : or (and (Col A1 C1 IAC) (Col A2 C2 IAC))\n (and (Col A1 C2 IAC) (Col A2 C1 IAC))
HIAC3 : not (and (Col A1 C2 IAC) (Col A2 C1 IAC))
HIAC2 : not (and (Col A1 C1 IAC) (Col A2 C2 IAC))
HIAC1 : not (and (Col A1 A2 IAC) (Col C1 C2 IAC))
HNC4 : not (Col A2 C1 C2)
HNC3 : not (Col A1 C1 C2)
HNC2 : not (Col A2 B1 B2)
HNC1 : not (Col A1 B1 B2)
HNC : not (and (Col C1 B1 B2) (Col C2 B1 B2))
HP2 : Col P C1 C2
HPar2 : not (ex (fun X : Tpoint => and (Col X A1 A2) (Col X C1 C2)))
IAC : Tpoint
HP1 : Col P B1 B2
HPar1 : not (ex (fun X : Tpoint => and (Col X A1 A2) (Col X B1 B2)))
HCop1 : Coplanar A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HP : forall A1 A2 B1 B2 C1 C2 P : Tpoint,\nnot (playfair_quater_qf A1 A2 B1 B2 C1 C2 P)
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
elim HIAC; clear HIAC; intro HIAC; [apply HIAC2|apply HIAC3]; spliter; split; Col.
-----
Lemma playfair_quater__playfair : playfair_quater -> playfair_s_postulate.
Proof.
intros HP A1 A2 B1 B2 C1 C2 P HPar1 HP1 HPar2 HP2.
assert (H : playfair_quater <-> forall A1 A2 B1 B2 C1 C2 P, ~ playfair_quater_qf A1 A2 B1 B2 C1 C2 P) by (apply not_ex_forall_not_7).
rewrite H in HP; clear H.
assert (H : Col C1 B1 B2 /\\ Col C2 B1 B2 <-> ~ ~ (Col C1 B1 B2 /\\ Col C2 B1 B2)) by (induction (col_dec C1 B1 B2); induction (col_dec C2 B1 B2); tauto).
apply H; clear H; intro HNC; apply (HP A1 A2 B1 B2 C1 C2 P).
repeat try (split; [assert_diffs; assumption|]).
assert (HNC1 : ~ Col A1 B1 B2).
assert (HNC2 : ~ Col A2 B1 B2).
assert (HNC3 : ~ Col A1 C1 C2).
assert (HNC4 : ~ Col A2 C1 C2).
apply par_symmetry in HPar1; apply (par_not_col_strict _ _ _ _ A1) in HPar1; Col; apply par_strict_symmetry in HPar1; destruct HPar1 as [_ [_ [HCop1 HPar1]]].
apply par_symmetry in HPar2; apply (par_not_col_strict _ _ _ _ A1) in HPar2; Col; apply par_strict_symmetry in HPar2; destruct HPar2 as [_ [_ [HCop2 HPar2]]].
repeat (split; try tauto).

*****

*****

+++++
Qed.
-----
End par_trans_NID.
-----
