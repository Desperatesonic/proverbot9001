c3a5394b181390e78a4c11b2e18bad92
Require Import GeoCoq.Axioms.parallel_postulates.
Require Import GeoCoq.Tarski_dev.Annexes.suma.
Require Import GeoCoq.Tarski_dev.Ch12_parallel.
Section original_spp_inverse_projection_postulate.
Context `{TnEQD:Tarski_neutral_dimensionless_with_decidable_point_equality}.
Lemma original_spp__inverse_projection_postulate :
  alternative_strong_parallel_postulate -> inverse_projection_postulate.
Proof.
  intros ospp A B C P Q Hacute Hout HPQ HPer HCop.
  assert_diffs.
  assert_cols.
  elim(col_dec A B C).
  {
    intro.
    exists P.
    split.
    {
      Col.
      apply (l6_7 _ _ A).
      {
        auto.
        apply not_bet_out.
        {
          Col.
        }
        {
          Col.
          intro.
          destruct Hacute as [x [y [z [HPer2 Hlta]]]].
          assert_diffs.
          assert(HN := not_lta_and_gta A B C x y z).
          apply HN.
          split.
          {
            auto.
          }
          {
            auto.
            split.
            {
              apply l11_31_2.
              {
                Between.
              }
              {
                Between.
              }
              {
                Between.
              }
              {
                Between.
              }
              {
                Between.
              }
            }
            {
              intro.
              destruct Hlta.
              CongA.
            }
          }
        }
      }
      {
        auto.
      }
    }
    {
      Col.
    }
  }
  {
    intro HNCol1.
    assert(HNCol2 : ~ Col B P Q).
    {
      apply per_not_col.
      {
        auto.
      }
      {
        auto.
      }
      {
        auto.
      }
    }
    {
      idtac.
      assert(HQ0 := cop_not_par_same_side A B Q P P C).
      destruct HQ0 as [Q0 []].
      {
        Col.
      }
      {
        Col.
      }
      {
        Col.
      }
      {
        Col.
        Cop.
        intro.
        apply HNCol2.
        ColR.
      }
      {
        Col.
      }
      {
        Col.
        Cop.
      }
      {
        Col.
        Cop.
        assert(HNCol3 : ~ Col A B Q0).
        {
          apply (one_side_not_col123 _ _ _ C).
          Side.
        }
        {
          idtac.
          assert(P<>Q0).
          {
            intro.
            subst.
            Col.
          }
          {
            idtac.
            assert (HSuma := ex_suma C B P B P Q0).
            destruct HSuma as [D [E [F]]].
            {
              auto.
            }
            {
              auto.
            }
            {
              auto.
            }
            {
              auto.
            }
            {
              auto.
              assert(HY := ospp C B P Q0 D E F).
              destruct HY as [Y []].
              {
                auto.
                apply (col_one_side _ A).
                {
                  Side.
                }
                {
                  Side.
                }
                {
                  Side.
                }
              }
              {
                auto.
              }
              {
                auto.
                intro.
                assert(Hlta : LtA A B C C B P).
                {
                  apply acute_per__lta.
                  {
                    auto.
                  }
                  {
                    auto.
                  }
                  {
                    auto.
                  }
                  {
                    auto.
                    apply (bet_per_suma__per123 _ _ _ B P Q0 D E F).
                    {
                      auto.
                      apply l8_2.
                      apply (l8_3 Q).
                      {
                        Perp.
                      }
                      {
                        Perp.
                      }
                      {
                        Perp.
                        Col.
                      }
                    }
                    {
                      auto.
                    }
                    {
                      auto.
                    }
                  }
                }
                {
                  destruct Hlta as [Hlea HNConga].
                  apply HNConga.
                  apply conga_right_comm.
                  apply (out_conga A B C A B C).
                  {
                    try (apply out_trivial).
                    CongA.
                  }
                  {
                    try (apply out_trivial).
                    CongA.
                  }
                  {
                    try (apply out_trivial).
                    CongA.
                  }
                  {
                    try (apply out_trivial).
                    CongA.
                  }
                  {
                    try (apply out_trivial).
                    CongA.
                  }
                }
              }
              {
                auto.
                exists Y.
                split.
                {
                  assert(HB0 := l10_15 A B B C).
                  destruct HB0 as [B0 []].
                  {
                    Col.
                  }
                  {
                    Col.
                  }
                  {
                    Col.
                    assert(HNCol4 : ~ Col A B B0).
                    {
                      apply (one_side_not_col123 _ _ _ C).
                      Side.
                    }
                    {
                      idtac.
                      assert(HNCol5 : ~ Col B C P).
                      {
                        intro.
                        apply HNCol1.
                        ColR.
                      }
                      {
                        idtac.
                        assert_diffs.
                        assert(P<>Y).
                        {
                          intro.
                          subst.
                          auto.
                        }
                        {
                          idtac.
                          apply (col_one_side_out _ B0).
                          {
                            auto.
                          }
                          {
                            auto.
                            apply (one_side_transitivity _ _ _ P).
                            {
                              apply (one_side_transitivity _ _ _ A).
                              {
                                apply invert_one_side.
                                apply in_angle_one_side.
                                {
                                  Col.
                                }
                                {
                                  Col.
                                  intro.
                                  assert(HInter := l8_16_1 B0 B A C B).
                                  destruct HInter.
                                  {
                                    Col.
                                  }
                                  {
                                    Col.
                                  }
                                  {
                                    Col.
                                    Perp.
                                  }
                                  {
                                    Col.
                                    Perp.
                                    assert(Habs : LtA A B C A B C).
                                    {
                                      apply acute_per__lta.
                                      {
                                        auto.
                                      }
                                      {
                                        auto.
                                      }
                                      {
                                        auto.
                                      }
                                      {
                                        auto.
                                      }
                                    }
                                    {
                                      idtac.
                                      destruct Habs.
                                      CongA.
                                    }
                                  }
                                }
                                {
                                  Col.
                                  apply l11_24.
                                  apply lea_in_angle.
                                  {
                                    CongA.
                                    Side.
                                    apply lta__lea.
                                    apply acute_per__lta.
                                    {
                                      auto.
                                    }
                                    {
                                      auto.
                                    }
                                    {
                                      auto.
                                    }
                                    {
                                      auto.
                                      apply perp_per_1.
                                      Perp.
                                    }
                                  }
                                  {
                                    CongA.
                                    Side.
                                  }
                                }
                              }
                              {
                                apply out_one_side.
                                {
                                  Col.
                                }
                                {
                                  Col.
                                }
                              }
                            }
                            {
                              apply l12_6.
                              assert(HPar : Par B B0 P Y).
                              {
                                apply (l12_9 _ _ _ _ A B).
                                {
                                  Perp.
                                  Cop.
                                }
                                {
                                  Perp.
                                  Cop.
                                }
                                {
                                  Perp.
                                  Cop.
                                }
                                {
                                  Perp.
                                  Cop.
                                  apply coplanar_trans_1 with C.
                                  {
                                    Col.
                                  }
                                  {
                                    Col.
                                    Cop.
                                  }
                                  {
                                    Col.
                                    Cop.
                                  }
                                }
                                {
                                  Perp.
                                }
                                {
                                  Perp.
                                  Cop.
                                  apply perp_right_comm.
                                  apply (perp_col1 _ _ _ P).
                                  {
                                    Col.
                                  }
                                  {
                                    Col.
                                    apply perp_sym.
                                    apply (perp_col1 _ _ _ Q).
                                    {
                                      Col.
                                    }
                                    {
                                      Col.
                                      Perp.
                                    }
                                    {
                                      Col.
                                      Perp.
                                      ColR.
                                    }
                                  }
                                  {
                                    Col.
                                  }
                                }
                              }
                              {
                                destruct HPar.
                                {
                                  auto.
                                }
                                {
                                  auto.
                                  exfalso.
                                  spliter.
                                  apply HNCol2.
                                  ColR.
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
                {
                  ColR.
                }
              }
            }
          }
        }
      }
    }
  }
Qed.
End original_spp_inverse_projection_postulate.
